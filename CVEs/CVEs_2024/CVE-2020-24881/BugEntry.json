{"buggy_code": ["<?php\n/*********************************************************************\n    class.config.php\n\n    osTicket config info manager.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.orm.php';\n\nclass Config {\n    var $config = array();\n\n    var $section = null;                    # Default namespace ('core')\n    var $table = CONFIG_TABLE;              # Table name (with prefix)\n    var $section_column = 'namespace';      # namespace column name\n\n    var $session = null;                    # Session-backed configuration\n\n    # Defaults for this configuration. If settings don't exist in the\n    # database yet, the ->getInfo() method will not include the (default)\n    # values in the returned array. $defaults allows developers to define\n    # new settings and the corresponding default values.\n    var $defaults = array();                # List of default values\n\n    function __construct($section=null, $defaults=array()) {\n        if ($section)\n            $this->section = $section;\n\n        if ($this->section === null)\n            return false;\n\n        if ($defaults)\n            $this->defaults = $defaults;\n\n        if (isset($_SESSION['cfg:'.$this->section]))\n            $this->session = &$_SESSION['cfg:'.$this->section];\n\n        $this->load();\n    }\n\n    function load() {\n        foreach ($this->items() as $I)\n            $this->config[$I->key] = $I;\n    }\n\n    function getNamespace() {\n        return $this->section;\n    }\n\n    function getInfo() {\n        $info = $this->defaults;\n        foreach ($this->config as $key=>$item)\n            $info[$key] = $item->value;\n        return $info;\n    }\n\n    function get($key, $default=null) {\n        if (isset($this->session) && isset($this->session[$key]))\n            return $this->session[$key];\n        elseif (isset($this->config[$key]))\n            return $this->config[$key]->value;\n        elseif (isset($this->defaults[$key]))\n            return $this->defaults[$key];\n\n        return $default;\n    }\n\n    function exists($key) {\n        return $this->get($key, null) ? true : false;\n    }\n\n    function set($key, $value) {\n        return ($this->update($key, $value)) ? $value : null;\n    }\n\n    function persist($key, $value) {\n        if (!isset($this->session)) {\n            $this->session = &$_SESSION['cfg:'.$this->section];\n            $this->session = array();\n        }\n        $this->session[$key] = $value;\n        return true;\n    }\n\n    function lastModified($key) {\n        if (isset($this->config[$key]))\n            return $this->config[$key]->updated;\n\n        return false;\n    }\n\n    function create($key, $value) {\n        $item = new ConfigItem([\n            $this->section_column => $this->section,\n            'key' => $key,\n            'value' => $value,\n        ]);\n        if (!$item->save())\n            return false;\n\n        return true;\n    }\n\n    function update($key, $value) {\n        if (!$key)\n            return false;\n        elseif (!isset($this->config[$key]))\n            return $this->create($key, $value);\n\n        $item = $this->config[$key];\n        $before = $item->value;\n        $item->value = $value;\n\n        if ($before != $item->value) {\n            $type = array('type' => 'edited', 'key' => $item->ht['key']);\n            Signal::send('object.edited', $item, $type);\n        }\n\n        return $item->save();\n    }\n\n    function updateAll($updates) {\n        foreach ($updates as $key=>$value)\n            if (!$this->update($key, $value))\n                return false;\n        return true;\n    }\n\n    function destroy() {\n        unset($this->session);\n        return $this->items()->delete() > 0;\n    }\n\n    function items() {\n        return ConfigItem::items($this->section, $this->section_column);\n    }\n}\n\nclass ConfigItem\nextends VerySimpleModel {\n    static $meta = array(\n        'table' => CONFIG_TABLE,\n        'pk' => array('id'),\n    );\n\n    static function items($namespace, $column='namespace') {\n\n        $items = static::objects()\n            ->filter([$column => $namespace]);\n\n        try {\n            count($items);\n        }\n        catch (InconsistentModelException $ex) {\n            // Pending upgrade ??\n            $items = array();\n        }\n\n        return $items;\n    }\n\n    function save($refetch=false) {\n        if ($this->dirty)\n            $this->updated = SqlFunction::NOW();\n        return parent::save($this->dirty || $refetch);\n    }\n\n    // Clean password reset tokens that have expired\n    static function cleanPwResets() {\n        global $cfg;\n\n        if (!$cfg || !($period = $cfg->getPwResetWindow())) // In seconds\n            return false;\n\n        return ConfigItem::objects()\n             ->filter(array(\n                'namespace' => 'pwreset',\n                'updated__lt' => SqlFunction::NOW()->minus(SqlInterval::SECOND($period)),\n            ))->delete();\n    }\n}\n\nclass OsticketConfig extends Config {\n    var $table = CONFIG_TABLE;\n    var $section = 'core';\n\n    var $defaultDept;   //Default Department\n    var $defaultSLA;   //Default SLA\n    var $defaultSchedule; // Default Schedule\n    var $defaultEmail;  //Default Email\n    var $alertEmail;  //Alert Email\n    var $defaultSMTPEmail; //Default  SMTP Email\n\n    var $defaults = array(\n        'allow_pw_reset' =>     true,\n        'pw_reset_window' =>    30,\n        'enable_richtext' =>    true,\n        'enable_avatars' =>     true,\n        'allow_attachments' =>  true,\n        'agent_name_format' =>  'full', # First Last\n        'client_name_format' => 'original', # As entered\n        'auto_claim_tickets'=>  true,\n        'auto_refer_closed' => true,\n        'collaborator_ticket_visibility' =>  true,\n        'disable_agent_collabs' => false,\n        'require_topic_to_close' =>  false,\n        'system_language' =>    'en_US',\n        'default_storage_bk' => 'D',\n        'message_autoresponder_collabs' => true,\n        'add_email_collabs' => true,\n        'clients_only' => false,\n        'client_registration' => 'closed',\n        'accept_unregistered_email' => true,\n        'default_help_topic' => 0,\n        'help_topic_sort_mode' => 'a',\n        'client_verify_email' => 1,\n        'allow_auth_tokens' => 1,\n        'verify_email_addrs' => 1,\n        'client_avatar' => 'gravatar.mm',\n        'agent_avatar' => 'gravatar.mm',\n        'ticket_lock' => 2, // Lock on activity\n        'max_open_tickets' => 0,\n        'files_req_auth' => 1,\n        'force_https' => '',\n    );\n\n    function __construct($section=null) {\n        parent::__construct($section);\n\n        if (count($this->config) == 0) {\n            // Fallback for osticket < 1.7@852ca89e\n            $sql='SELECT * FROM '.$this->table.' WHERE id = 1';\n            $meta = ConfigItem::getMeta();\n            if (($res=db_query($sql)) && db_num_rows($res))\n                foreach (db_fetch_array($res) as $key=>$value)\n                    $this->config[$key] = $meta->newInstance(array('value'=>$value));\n        }\n\n        return true;\n    }\n\n    function lastModified($key=false) {\n        return max(array_map(array('parent', 'lastModified'),\n            array_keys($this->config)));\n    }\n\n    function isHelpDeskOffline() {\n        return !$this->isOnline();\n    }\n\n    function isHelpDeskOnline() {\n        return $this->isOnline();\n    }\n\n    function isOnline() {\n        return ($this->get('isonline'));\n    }\n\n    function isKnowledgebaseEnabled() {\n        global $thisclient;\n\n        if ($this->get('restrict_kb', false)\n            && (!$thisclient || $thisclient->isGuest())\n        ) {\n            return false;\n        }\n        require_once(INCLUDE_DIR.'class.faq.php');\n        return ($this->get('enable_kb') && FAQ::countPublishedFAQs());\n    }\n\n    function isCannedResponseEnabled() {\n        return $this->get('enable_premade');\n    }\n\n    function getVersion() {\n        return THIS_VERSION;\n    }\n\n    function getSchemaSignature($section=null) {\n\n        if ((!$section || $section == $this->section)\n                && ($v=$this->get('schema_signature')))\n            return $v;\n\n        // 1.7 after namespaced configuration, other namespace\n        if ($section) {\n            $sql='SELECT value FROM '.$this->table\n                .' WHERE `key` = \"schema_signature\" and namespace='.db_input($section);\n            if (($res=db_query($sql, false)) && db_num_rows($res))\n                return db_result($res);\n        }\n\n        // 1.7 before namespaced configuration\n        $sql='SELECT `schema_signature` FROM '.$this->table\n            .' WHERE id=1';\n        if (($res=db_query($sql, false)) && db_num_rows($res))\n            return db_result($res);\n\n        // old version 1.6\n        return md5(self::getDBVersion());\n    }\n\n    function getDbTimezone() {\n        if (!$this->exists('db_timezone')) {\n            require_once INCLUDE_DIR . 'class.timezone.php';\n            $this->persist('db_timezone', DbTimezone::determine());\n        }\n        return $this->get('db_timezone');\n    }\n\n    function getDefaultTimezone() {\n        return $this->get('default_timezone');\n    }\n\n    function getTimezone($user=false) {\n        global $thisstaff, $thisclient;\n\n        $user = $user ?: $thisstaff;\n\n        if (!$user && $thisclient && is_callable(array($thisclient, 'getTimezone')))\n            $user = $thisclient;\n\n        if ($user)\n            $zone = $user->getTimezone();\n\n        if (!$zone)\n            $zone = $this->get('default_timezone');\n\n        if (!$zone)\n            $zone = ini_get('date.timezone');\n\n        return $zone;\n    }\n\n    function getDefaultLocale() {\n        return $this->get('default_locale');\n    }\n\n    /* Date & Time Formats */\n    function getTimeFormat($propogate=false) {\n        global $cfg;\n\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('time_format');\n\n        if ($propogate) {\n            $format = 'h:i a'; // Default\n            if (class_exists('IntlDateFormatter')) {\n                $formatter = new IntlDateFormatter(\n                    Internationalization::getCurrentLocale(),\n                    IntlDateFormatter::NONE,\n                    IntlDateFormatter::SHORT,\n                    $this->getTimezone(),\n                    IntlDateFormatter::GREGORIAN\n                );\n                $format = $formatter->getPattern();\n            }\n            // Check if we're forcing 24 hrs format\n            if ($cfg && $cfg->isForce24HourTime() && $format)\n                $format = trim(str_replace(array('a', 'h'), array('', 'H'),\n                            $format));\n            return $format;\n        }\n\n        return '';\n    }\n\n    function isForce24HourTime() {\n        return $this->get('date_formats') == '24';\n    }\n\n    /**\n     * getDateFormat\n     *\n     * Retrieve the current date format for the system, as a string, and in\n     * the intl (icu) format.\n     *\n     * Parameters:\n     * $propogate - (boolean:default=false), if set and the configuration\n     *      indicates default date and time formats (ie. not custom), then\n     *      the intl date formatter will be queried to find the pattern used\n     *      internally for the current locale settings.\n     */\n    function getDateFormat($propogate=false) {\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('date_format');\n        if ($propogate) {\n            if (class_exists('IntlDateFormatter')) {\n                $formatter = new IntlDateFormatter(\n                    Internationalization::getCurrentLocale(),\n                    IntlDateFormatter::SHORT,\n                    IntlDateFormatter::NONE,\n                    $this->getTimezone(),\n                    IntlDateFormatter::GREGORIAN\n                );\n                return $formatter->getPattern();\n            }\n            // Use a standard\n            return 'y-M-d';\n        }\n        return '';\n    }\n\n    function getDateTimeFormat() {\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('datetime_format');\n\n        if (class_exists('IntlDateFormatter'))\n            return sprintf('%s %s', $this->getDateFormat(true),\n                    $this->getTimeFormat(true));\n\n        return '';\n    }\n\n    function getDayDateTimeFormat() {\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('daydatetime_format');\n        return '';\n    }\n\n    function getConfigInfo() {\n        return $this->getInfo();\n    }\n\n    function getTitle() {\n        return $this->get('helpdesk_title');\n    }\n\n    function getUrl() {\n        return $this->get('helpdesk_url');\n    }\n\n    function getBaseUrl() { //Same as above with no trailing slash.\n        return rtrim($this->getUrl(),'/');\n    }\n\n    function getPageSize() {\n        return $this->get('max_page_size');\n    }\n\n    function getGracePeriod() {\n        return $this->get('overdue_grace_period');\n    }\n\n    function getPasswdResetPeriod() {\n        return $this->get('passwd_reset_period');\n    }\n\n    function isRichTextEnabled() {\n        return $this->get('enable_richtext');\n    }\n\n    function getAllowIframes() {\n        return str_replace(array(', ', ','), array(' ', ' '), $this->get('allow_iframes')) ?: \"'self'\";\n    }\n\n    function getIframeWhitelist() {\n        $whitelist = array_filter(explode(',', str_replace(' ', '', $this->get('embedded_domain_whitelist'))));\n\n        return !empty($whitelist) ? $whitelist : null;\n    }\n\n    function getACL() {\n        if (!($acl = $this->get('acl')))\n            return null;\n\n        return explode(',', str_replace(' ', '', $acl));\n    }\n\n    function getACLBackendOpts() {\n        return array(\n            0 => __('Disabled'),\n            1 => __('All'),\n            2 => __('Client Portal'),\n            3 => __('Staff Panel')\n        );\n    }\n\n    function getACLBackend() {\n        return $this->get('acl_backend') ?: 0;\n    }\n\n    function isAvatarsEnabled() {\n        return $this->get('enable_avatars');\n    }\n\n    function isTicketLockEnabled() {\n        return (($this->getTicketLockMode() != Lock::MODE_DISABLED)\n                && $this->getLockTime());\n    }\n\n    function getClientTimeout() {\n        return $this->getClientSessionTimeout();\n    }\n\n    function getClientSessionTimeout() {\n        return $this->get('client_session_timeout')*60;\n    }\n\n    function getClientLoginTimeout() {\n        return $this->get('client_login_timeout')*60;\n    }\n\n    function getClientMaxLogins() {\n        return $this->get('client_max_logins');\n    }\n\n    function getStaffTimeout() {\n        return $this->getStaffSessionTimeout();\n    }\n\n    function getStaffSessionTimeout() {\n        return $this->get('staff_session_timeout')*60;\n    }\n\n    function getStaffLoginTimeout() {\n        return $this->get('staff_login_timeout')*60;\n    }\n\n    function getStaffMaxLogins() {\n        return $this->get('staff_max_logins');\n    }\n\n    function getStaffAvatarSource() {\n        require_once INCLUDE_DIR . 'class.avatar.php';\n        list($source, $mode) = explode('.', $this->get('agent_avatar'), 2);\n        return AvatarSource::lookup($source, $mode);\n    }\n\n    function getClientAvatarSource() {\n        require_once INCLUDE_DIR . 'class.avatar.php';\n        list($source, $mode) = explode('.', $this->get('client_avatar'), 2);\n        return AvatarSource::lookup($source, $mode);\n    }\n\n    function getLockTime() {\n        return $this->get('autolock_minutes');\n    }\n\n    function getTicketLockMode() {\n        return $this->get('ticket_lock');\n    }\n\n    function getAgentNameFormat() {\n        return $this->get('agent_name_format');\n    }\n\n    function getClientNameFormat() {\n        return $this->get('client_name_format');\n    }\n\n    function getDefaultDeptId() {\n        return $this->get('default_dept_id');\n    }\n\n    function getDefaultDept() {\n\n        if(!$this->defaultDept && $this->getDefaultDeptId())\n            $this->defaultDept=Dept::lookup($this->getDefaultDeptId());\n\n        return $this->defaultDept;\n    }\n\n    function getDefaultEmailId() {\n        return $this->get('default_email_id');\n    }\n\n    function getDefaultEmail() {\n\n        if(!$this->defaultEmail && $this->getDefaultEmailId())\n            $this->defaultEmail = Email::lookup($this->getDefaultEmailId());\n\n        return $this->defaultEmail;\n    }\n\n    function getDefaultEmailAddress() {\n        return ($email=$this->getDefaultEmail()) ? $email->getAddress() : null;\n    }\n\n    function getDefaultTicketStatusId() {\n        return $this->get('default_ticket_status_id', 1);\n    }\n\n    function getDefaultSLAId() {\n        return $this->get('default_sla_id');\n    }\n\n    function getDefaultSLA() {\n\n        if(!$this->defaultSLA && $this->getDefaultSLAId())\n            $this->defaultSLA = SLA::lookup($this->getDefaultSLAId());\n\n        return $this->defaultSLA;\n    }\n\n    function getDefaultScheduleId() {\n        return $this->get('schedule_id');\n    }\n\n    function getDefaultSchedule() {\n        if (!isset($this->defaultSchedule) && $this->getDefaultScheduleId())\n            $this->defaultSchedule = BusinessHoursSchedule::lookup(\n                    $this->getDefaultScheduleId());\n\n        return $this->defaultSchedule;\n    }\n\n    function getAlertEmailId() {\n        return $this->get('alert_email_id');\n    }\n\n    function getAlertEmail() {\n\n        if(!$this->alertEmail)\n            if(!($this->alertEmail = Email::lookup($this->getAlertEmailId())))\n                $this->alertEmail = $this->getDefaultEmail();\n\n        return $this->alertEmail;\n    }\n\n    function getDefaultSMTPEmail() {\n\n        if(!$this->defaultSMTPEmail && $this->get('default_smtp_id'))\n            $this->defaultSMTPEmail = Email::lookup($this->get('default_smtp_id'));\n\n        return $this->defaultSMTPEmail;\n    }\n\n    function getDefaultPriorityId() {\n        return $this->get('default_priority_id');\n    }\n\n    function getDefaultPriority() {\n        if (!isset($this->defaultPriority))\n            $this->defaultPriority = Priority::lookup($this->getDefaultPriorityId());\n\n        return $this->defaultPriority;\n    }\n\n    function getDefaultTopicId() {\n        return $this->get('default_help_topic');\n    }\n\n    function getDefaultTopic() {\n        return Topic::lookup($this->getDefaultTopicId());\n    }\n\n    function getTopicSortMode() {\n        return $this->get('help_topic_sort_mode');\n    }\n\n    function forceHttps() {\n        return $this->get('force_https') == 'on';\n    }\n\n    function setTopicSortMode($mode) {\n        $modes = static::allTopicSortModes();\n        if (!isset($modes[$mode]))\n            throw new InvalidArgumentException(sprintf(\n                '%s: Unsupported help topic sort mode', $mode));\n\n        $this->update('help_topic_sort_mode', $mode);\n    }\n\n    static function allTopicSortModes() {\n        return array(\n            Topic::SORT_ALPHA   => __('Alphabetically'),\n            Topic::SORT_MANUAL  => __('Manually'),\n        );\n    }\n\n    function getDefaultTemplateId() {\n        return $this->get('default_template_id');\n    }\n\n    function getDefaultTemplate() {\n\n        if(!$this->defaultTemplate && $this->getDefaultTemplateId())\n            $this->defaultTemplate = EmailTemplateGroup::lookup($this->getDefaultTemplateId());\n\n        return $this->defaultTemplate;\n    }\n\n    function getLandingPageId() {\n        return $this->get('landing_page_id');\n    }\n\n    function getLandingPage() {\n\n        if(!$this->landing_page && $this->getLandingPageId())\n            $this->landing_page = Page::lookup($this->getLandingPageId());\n\n        return $this->landing_page;\n    }\n\n    function getOfflinePageId() {\n        return $this->get('offline_page_id');\n    }\n\n    function getOfflinePage() {\n\n        if(!$this->offline_page && $this->getOfflinePageId())\n            $this->offline_page = Page::lookup($this->getOfflinePageId());\n\n        return $this->offline_page;\n    }\n\n    function getThankYouPageId() {\n        return $this->get('thank-you_page_id');\n    }\n\n    function getThankYouPage() {\n\n        if(!$this->thankyou_page && $this->getThankYouPageId())\n            $this->thankyou_page = Page::lookup($this->getThankYouPageId());\n\n        return $this->thankyou_page;\n    }\n\n    function getDefaultPages() {\n        /* Array of ids...as opposed to objects */\n        return array(\n                $this->getLandingPageId(),\n                $this->getOfflinePageId(),\n                $this->getThankYouPageId(),\n                );\n    }\n\n    function getMaxOpenTickets() {\n         return $this->get('max_open_tickets');\n    }\n\n    function getMaxFileSize() {\n        return $this->get('max_file_size');\n    }\n\n    function getLogLevel() {\n        return $this->get('log_level');\n    }\n\n    function getLogGracePeriod() {\n        return $this->get('log_graceperiod');\n    }\n\n    function enableStaffIPBinding() {\n        return ($this->get('staff_ip_binding'));\n    }\n\n    /**\n     * Configuration: allow_pw_reset\n     *\n     * TRUE if the <a>Forgot my password</a> link and system should be\n     * enabled, and FALSE otherwise.\n     */\n    function allowPasswordReset() {\n        return $this->get('allow_pw_reset');\n    }\n\n    /**\n     * Configuration: pw_reset_window\n     *\n     * Number of minutes for which the password reset token is valid.\n     *\n     * Returns: Number of seconds the password reset token is valid. The\n     *      number of minutes from the database is automatically converted\n     *      to seconds here.\n     */\n    function getPwResetWindow() {\n        // pw_reset_window is stored in minutes. Return value in seconds\n        return $this->get('pw_reset_window') * 60;\n    }\n\n    function isClientLoginRequired() {\n        return $this->get('clients_only');\n    }\n\n    function isClientRegistrationEnabled() {\n        return in_array($this->getClientRegistrationMode(),\n            array('public', 'auto'));\n    }\n\n    function getClientRegistrationMode() {\n        return $this->get('client_registration');\n    }\n\n    function isClientRegistrationMode($modes) {\n        if (!is_array($modes))\n            $modes = array($modes);\n\n        return in_array($this->getClientRegistrationMode(), $modes);\n    }\n\n    function isClientEmailVerificationRequired() {\n        return $this->get('client_verify_email');\n    }\n\n    function isAuthTokenEnabled() {\n        return $this->get('allow_auth_tokens');\n    }\n\n    function isCaptchaEnabled() {\n        return (extension_loaded('gd') && function_exists('gd_info') && $this->get('enable_captcha'));\n    }\n\n    function isAutoCronEnabled() {\n        return ($this->get('enable_auto_cron'));\n    }\n\n    function isEmailPollingEnabled() {\n        return ($this->get('enable_mail_polling'));\n    }\n\n    function useEmailPriority() {\n        return ($this->get('use_email_priority'));\n    }\n\n    function acceptUnregisteredEmail() {\n        return $this->get('accept_unregistered_email');\n    }\n\n    function addCollabsViaEmail() {\n        return ($this->get('add_email_collabs'));\n    }\n\n    function getAdminEmail() {\n         return $this->get('admin_email');\n    }\n\n    function verifyEmailAddrs() {\n        return (bool) $this->get('verify_email_addrs');\n    }\n\n    function getReplySeparator() {\n        return $this->get('reply_separator');\n    }\n\n    function stripQuotedReply() {\n        return ($this->get('strip_quoted_reply'));\n    }\n\n    function saveEmailHeaders() {\n        return true; //No longer an option...hint: big plans for headers coming!!\n    }\n\n    function getDefaultTicketSequence() {\n        if ($this->get('ticket_sequence_id'))\n            $sequence = Sequence::lookup($this->get('ticket_sequence_id'));\n        if (!$sequence)\n            $sequence = new RandomSequence();\n        return $sequence;\n    }\n\n    function showTopLevelTicketCounts() {\n        return ($this->get('queue_bucket_counts'));\n    }\n\n    function getDefaultTicketNumberFormat() {\n        return $this->get('ticket_number_format');\n    }\n\n    function getNewTicketNumber() {\n        $s = $this->getDefaultTicketSequence();\n        return $s->next($this->getDefaultTicketNumberFormat(),\n            array('Ticket', 'isTicketNumberUnique'));\n    }\n\n    // Task sequence\n    function getDefaultTaskSequence() {\n        if ($this->get('task_sequence_id'))\n            $sequence = Sequence::lookup($this->get('task_sequence_id'));\n        if (!$sequence)\n            $sequence = new RandomSequence();\n\n        return $sequence;\n    }\n\n    function getDefaultTaskNumberFormat() {\n        return $this->get('task_number_format');\n    }\n\n    function getNewTaskNumber() {\n        $s = $this->getDefaultTaskSequence();\n        return $s->next($this->getDefaultTaskNumberFormat(),\n            array('Task', 'isNumberUnique'));\n    }\n\n    /* autoresponders  & Alerts */\n    function autoRespONNewTicket() {\n        return ($this->get('ticket_autoresponder'));\n    }\n\n    function autoRespONNewMessage() {\n        return ($this->get('message_autoresponder'));\n    }\n\n    function notifyCollabsONNewMessage() {\n        return ($this->get('message_autoresponder_collabs'));\n    }\n\n    function notifyONNewStaffTicket() {\n        return ($this->get('ticket_notice_active'));\n    }\n\n    function alertONNewMessage() {\n        return ($this->get('message_alert_active'));\n    }\n\n    function alertLastRespondentONNewMessage() {\n        return ($this->get('message_alert_laststaff'));\n    }\n\n    function alertAssignedONNewMessage() {\n        return ($this->get('message_alert_assigned'));\n    }\n\n    function alertDeptManagerONNewMessage() {\n        return ($this->get('message_alert_dept_manager'));\n    }\n\n    function alertAcctManagerONNewMessage() {\n        return ($this->get('message_alert_acct_manager'));\n    }\n\n    //TODO: change note_alert to activity_alert\n    function alertONNewActivity() {\n        return ($this->get('note_alert_active'));\n    }\n\n    function alertLastRespondentONNewActivity() {\n        return ($this->get('note_alert_laststaff'));\n    }\n\n    function alertAssignedONNewActivity() {\n        return ($this->get('note_alert_assigned'));\n    }\n\n    function alertDeptManagerONNewActivity() {\n        return ($this->get('note_alert_dept_manager'));\n    }\n\n    function alertONNewTicket() {\n        return ($this->get('ticket_alert_active'));\n    }\n\n    function alertAdminONNewTicket() {\n        return ($this->get('ticket_alert_admin'));\n    }\n\n    function alertDeptManagerONNewTicket() {\n        return ($this->get('ticket_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONNewTicket() {\n        return ($this->get('ticket_alert_dept_members'));\n    }\n\n    function alertAcctManagerONNewTicket() {\n        return ($this->get('ticket_alert_acct_manager'));\n    }\n\n    function alertONTransfer() {\n        return ($this->get('transfer_alert_active'));\n    }\n\n    function alertAssignedONTransfer() {\n        return ($this->get('transfer_alert_assigned'));\n    }\n\n    function alertDeptManagerONTransfer() {\n        return ($this->get('transfer_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONTransfer() {\n        return ($this->get('transfer_alert_dept_members'));\n    }\n\n    function alertONAssignment() {\n        return ($this->get('assigned_alert_active'));\n    }\n\n    function alertStaffONAssignment() {\n        return ($this->get('assigned_alert_staff'));\n    }\n\n    function alertTeamLeadONAssignment() {\n        return ($this->get('assigned_alert_team_lead'));\n    }\n\n    function alertTeamMembersONAssignment() {\n        return ($this->get('assigned_alert_team_members'));\n    }\n\n\n    function alertONOverdueTicket() {\n        return ($this->get('overdue_alert_active'));\n    }\n\n    function alertAssignedONOverdueTicket() {\n        return ($this->get('overdue_alert_assigned'));\n    }\n\n    function alertDeptManagerONOverdueTicket() {\n        return ($this->get('overdue_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONOverdueTicket() {\n        return ($this->get('overdue_alert_dept_members'));\n    }\n\n    function autoClaimTickets() {\n        return $this->get('auto_claim_tickets');\n    }\n\n    function autoReferTicketsOnClose() {\n         return $this->get('auto_refer_closed');\n    }\n\n    function collaboratorTicketsVisibility() {\n        return $this->get('collaborator_ticket_visibility');\n    }\n\n    function disableAgentCollaborators() {\n        return $this->get('disable_agent_collabs');\n    }\n\n    function requireTopicToClose() {\n        return $this->get('require_topic_to_close');\n    }\n\n    function getDefaultTicketQueueId() {\n        return $this->get('default_ticket_queue', 1);\n    }\n\n    function hideStaffName() {\n        return ($this->get('hide_staff_name'));\n    }\n\n    function sendOverLimitNotice() {\n        return ($this->get('overlimit_notice_active'));\n    }\n\n    /* Tasks */\n\n    function alertONNewTask() {\n        return ($this->get('task_alert_active'));\n    }\n\n    function alertAdminONNewTask() {\n        return ($this->get('task_alert_admin'));\n    }\n\n    function alertDeptManagerONNewTask() {\n        return ($this->get('task_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONNewTask() {\n        return ($this->get('task_alert_dept_members'));\n    }\n\n    function alertONTaskActivity() {\n        return ($this->get('task_activity_alert_active'));\n    }\n\n    function alertLastRespondentONTaskActivity() {\n        return ($this->get('task_activity_alert_laststaff'));\n    }\n\n    function alertAssignedONTaskActivity() {\n        return ($this->get('task_activity_alert_assigned'));\n    }\n\n    function alertDeptManagerONTaskActivity() {\n        return ($this->get('task_activity_alert_dept_manager'));\n    }\n\n    function alertONTaskTransfer() {\n        return ($this->get('task_transfer_alert_active'));\n    }\n\n    function alertAssignedONTaskTransfer() {\n        return ($this->get('task_transfer_alert_assigned'));\n    }\n\n    function alertDeptManagerONTaskTransfer() {\n        return ($this->get('task_transfer_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONTaskTransfer() {\n        return ($this->get('task_transfer_alert_dept_members'));\n    }\n\n    function alertONTaskAssignment() {\n        return ($this->get('task_assignment_alert_active'));\n    }\n\n    function alertStaffONTaskAssignment() {\n        return ($this->get('task_assignment_alert_staff'));\n    }\n\n    function alertTeamLeadONTaskAssignment() {\n        return ($this->get('task_assignment_alert_team_lead'));\n    }\n\n    function alertTeamMembersONTaskAssignment() {\n        return ($this->get('task_assignment_alert_team_members'));\n    }\n\n    function alertONOverdueTask() {\n        return ($this->get('task_overdue_alert_active'));\n    }\n\n    function alertAssignedONOverdueTask() {\n        return ($this->get('task_overdue_alert_assigned'));\n    }\n\n    function alertDeptManagerONOverdueTask() {\n        return ($this->get('task_overdue_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONOverdueTask() {\n        return ($this->get('task_overdue_alert_dept_members'));\n    }\n\n    /* Error alerts sent to admin email when enabled */\n    function alertONSQLError() {\n        return ($this->get('send_sql_errors'));\n    }\n    function alertONLoginError() {\n        return ($this->get('send_login_errors'));\n    }\n\n\n\n    /* Attachments */\n    function getAllowedFileTypes() {\n        return trim($this->get('allowed_filetypes'));\n    }\n\n    function emailAttachments() {\n        return ($this->get('email_attachments'));\n    }\n\n    function allowAttachments() {\n        return ($this->get('allow_attachments'));\n    }\n\n    function getPrimaryLanguage() {\n        return $this->get('system_language');\n    }\n\n    function getSecondaryLanguages() {\n        $langs = $this->get('secondary_langs');\n        $langs = (is_string($langs)) ? explode(',', $langs) : array();\n        return array_filter($langs);\n    }\n\n    /* Needed by upgrader on 1.6 and older releases upgrade - not not remove */\n    function getUploadDir() {\n        return $this->get('upload_dir');\n    }\n\n    function getDefaultStorageBackendChar() {\n        return $this->get('default_storage_bk');\n    }\n\n    function getVar($name) {\n        return $this->get($name);\n    }\n\n    function updateSettings($vars, &$errors) {\n\n        if(!$vars || $errors)\n            return false;\n\n        switch(strtolower($vars['t'])) {\n            case 'system':\n                return $this->updateSystemSettings($vars, $errors);\n                break;\n            case 'tickets':\n                return $this->updateTicketsSettings($vars, $errors);\n                break;\n            case 'tasks':\n                return $this->updateTasksSettings($vars, $errors);\n                break;\n            case 'emails':\n                return $this->updateEmailsSettings($vars, $errors);\n                break;\n            case 'pages':\n                return $this->updatePagesSettings($vars, $errors);\n                break;\n            case 'agents':\n                return $this->updateAgentsSettings($vars, $errors);\n                break;\n            case 'users':\n                return $this->updateUsersSettings($vars, $errors);\n                break;\n            case 'kb':\n                return $this->updateKBSettings($vars, $errors);\n                break;\n            default:\n                $errors['err']=sprintf('%s - %s', __('Unknown setting option'), __('Get technical help!'));\n        }\n\n        return false;\n    }\n\n    function updateSystemSettings($vars, &$errors) {\n\n        $f=array();\n        $f['helpdesk_url']=array('type'=>'string',   'required'=>1, 'error'=>__('Helpdesk URL is required'));\n        $f['helpdesk_title']=array('type'=>'string',   'required'=>1, 'error'=>__('Helpdesk title is required'));\n        $f['default_dept_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Default Department is required'));\n        $f['autolock_minutes']=array('type'=>'int',   'required'=>1, 'error'=>__('Enter lock time in minutes'));\n        $f['allow_iframes']=array('type'=>'cs-url',   'required'=>0, 'error'=>__('Enter comma separated list of urls'));\n        $f['embedded_domain_whitelist']=array('type'=>'cs-domain',   'required'=>0, 'error'=>__('Enter comma separated list of domains'));\n        $f['acl']=array('type'=>'ipaddr',   'required'=>0, 'error'=>__('Enter comma separated list of IP addresses'));\n        //Date & Time Options\n        $f['time_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Time format is required'));\n        $f['date_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Date format is required'));\n        $f['datetime_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Datetime format is required'));\n        $f['daydatetime_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Day, Datetime format is required'));\n        $f['default_timezone']=array('type'=>'string',   'required'=>1, 'error'=>__('Default Timezone is required'));\n        $f['system_language']=array('type'=>'string',   'required'=>1, 'error'=>__('A primary system language is required'));\n\n        $vars = Format::htmlchars($vars, true);\n\n        // ACL Checks\n        if ($vars['acl']) {\n            // Check if Admin's IP is in the list, if not, return error\n            // to avoid locking self out\n            if (!in_array($vars['acl_backend'], array(0,2))) {\n                $acl = explode(',', str_replace(' ', '', $vars['acl']));\n                if (!in_array(osTicket::get_client_ip(), $acl))\n                    $errors['acl'] = __('Cowardly refusing to lock out active administrator');\n            }\n        } elseif ((int) $vars['acl_backend'] !== 0)\n            $errors['acl'] = __('IP address required when selecting panel');\n\n        // Make sure the selected backend is valid\n        $storagebk = null;\n        if (isset($vars['default_storage_bk'])) {\n            try {\n                $storagebk = FileStorageBackend::lookup($vars['default_storage_bk']);\n\n            } catch (Exception $ex) {\n                $errors['default_storage_bk'] = $ex->getMessage();\n            }\n        }\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        // Manage secondard languages\n        $vars['secondary_langs'][] = $vars['add_secondary_language'];\n        foreach ($vars['secondary_langs'] as $i=>$lang) {\n            if (!$lang || !Internationalization::isLanguageInstalled($lang))\n                unset($vars['secondary_langs'][$i]);\n        }\n        $secondary_langs = implode(',', $vars['secondary_langs']);\n\n        if ($storagebk)\n            $this->update('default_storage_bk', $storagebk->getBkChar());\n\n\n        return $this->updateAll(array(\n            'isonline'=>$vars['isonline'],\n            'helpdesk_title'=>$vars['helpdesk_title'],\n            'helpdesk_url'=>$vars['helpdesk_url'],\n            'default_dept_id'=>$vars['default_dept_id'],\n            'force_https'=>$vars['force_https'] ? 'on' : '',\n            'max_page_size'=>$vars['max_page_size'],\n            'log_level'=>$vars['log_level'],\n            'log_graceperiod'=>$vars['log_graceperiod'],\n            'time_format'=>$vars['time_format'],\n            'date_format'=>$vars['date_format'],\n            'datetime_format'=>$vars['datetime_format'],\n            'daydatetime_format'=>$vars['daydatetime_format'],\n            'date_formats'=>$vars['date_formats'],\n            'default_timezone'=>$vars['default_timezone'],\n            'schedule_id' => $vars['schedule_id'],\n            'default_locale'=>$vars['default_locale'],\n            'system_language'=>$vars['system_language'],\n            'secondary_langs'=>$secondary_langs,\n            'max_file_size' => $vars['max_file_size'],\n            'autolock_minutes' => $vars['autolock_minutes'],\n            'enable_avatars' => isset($vars['enable_avatars']) ? 1 : 0,\n            'enable_richtext' => isset($vars['enable_richtext']) ? 1 : 0,\n            'files_req_auth' => isset($vars['files_req_auth']) ? 1 : 0,\n            'allow_iframes' => Format::sanitize($vars['allow_iframes']),\n            'embedded_domain_whitelist' => Format::sanitize($vars['embedded_domain_whitelist']),\n            'acl' => Format::sanitize($vars['acl']),\n            'acl_backend' => Format::sanitize((int) $vars['acl_backend']) ?: 0,\n        ));\n    }\n\n    function updateAgentsSettings($vars, &$errors) {\n        $f=array();\n        $f['staff_session_timeout']=array('type'=>'int',   'required'=>1, 'error'=>'Enter idle time in minutes');\n        $f['pw_reset_window']=array('type'=>'int', 'required'=>1, 'min'=>1,\n            'error'=>__('Valid password reset window required'));\n\n        require_once INCLUDE_DIR.'class.avatar.php';\n        list($avatar_source) = explode('.', $vars['agent_avatar']);\n        if (!AvatarSource::lookup($avatar_source))\n            $errors['agent_avatar'] = __('Select a value from the list');\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        return $this->updateAll(array(\n            'passwd_reset_period'=>$vars['passwd_reset_period'],\n            'staff_max_logins'=>$vars['staff_max_logins'],\n            'staff_login_timeout'=>$vars['staff_login_timeout'],\n            'staff_session_timeout'=>$vars['staff_session_timeout'],\n            'staff_ip_binding'=>isset($vars['staff_ip_binding'])?1:0,\n            'allow_pw_reset'=>isset($vars['allow_pw_reset'])?1:0,\n            'pw_reset_window'=>$vars['pw_reset_window'],\n            'agent_name_format'=>$vars['agent_name_format'],\n            'hide_staff_name'=>isset($vars['hide_staff_name']) ? 1 : 0,\n            'agent_avatar'=>$vars['agent_avatar'],\n            'disable_agent_collabs'=>isset($vars['disable_agent_collabs'])?1:0,\n        ));\n    }\n\n    function updateUsersSettings($vars, &$errors) {\n        $f=array();\n        $f['client_session_timeout']=array('type'=>'int',   'required'=>1, 'error'=>'Enter idle time in minutes');\n\n        require_once INCLUDE_DIR.'class.avatar.php';\n        list($avatar_source) = explode('.', $vars['client_avatar']);\n        if (!AvatarSource::lookup($avatar_source))\n            $errors['client_avatar'] = __('Select a value from the list');\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        return $this->updateAll(array(\n            'client_max_logins'=>$vars['client_max_logins'],\n            'client_login_timeout'=>$vars['client_login_timeout'],\n            'client_session_timeout'=>$vars['client_session_timeout'],\n            'clients_only'=>isset($vars['clients_only'])?1:0,\n            'client_registration'=>$vars['client_registration'],\n            'client_verify_email'=>isset($vars['client_verify_email'])?1:0,\n            'allow_auth_tokens' => isset($vars['allow_auth_tokens']) ? 1 : 0,\n            'client_name_format'=>$vars['client_name_format'],\n            'client_avatar'=>$vars['client_avatar'],\n        ));\n    }\n\n    function updateTicketsSettings($vars, &$errors) {\n        $f=array();\n        $f['default_sla_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n        $f['default_ticket_status_id'] = array('type'=>'int', 'required'=>1, 'error'=>__('Selection required'));\n        $f['default_priority_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n        $f['max_open_tickets']=array('type'=>'int',   'required'=>1, 'error'=>__('Enter valid numeric value'));\n\n\n        if($vars['enable_captcha']) {\n            if (!extension_loaded('gd'))\n                $errors['enable_captcha']=__('The GD extension is required');\n            elseif(!function_exists('imagepng'))\n                $errors['enable_captcha']=__('PNG support is required for Image Captcha');\n        }\n\n        if ($vars['default_help_topic']\n                && ($T = Topic::lookup($vars['default_help_topic']))\n                && !$T->isActive()) {\n            $errors['default_help_topic'] = __('Default help topic must be set to active');\n        }\n\n        if (!preg_match('`(?!<\\\\\\)#`', $vars['ticket_number_format']))\n            $errors['ticket_number_format'] = 'Ticket number format requires at least one hash character (#)';\n\n        if (!isset($vars['default_ticket_queue']))\n            $errors['default_ticket_queue'] = __(\"Select a default ticket queue\");\n        elseif (!CustomQueue::lookup($vars['default_ticket_queue']))\n            $errors['default_ticket_queue'] = __(\"Select a default ticket queue\");\n\n        $this->updateAutoresponderSettings($vars, $errors);\n        $this->updateAlertsSettings($vars, $errors);\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        // Sort ticket queues\n        $queues = CustomQueue::queues()->getIterator();\n        foreach ($vars['qsort'] as $queue_id => $sort) {\n            if ($q = $queues->findFirst(array('id' => $queue_id))) {\n                $q->sort = $sort;\n                $q->save();\n            }\n        }\n\n        return $this->updateAll(array(\n            'ticket_number_format'=>$vars['ticket_number_format'] ?: '######',\n            'ticket_sequence_id'=>$vars['ticket_sequence_id'] ?: 0,\n            'queue_bucket_counts'=>isset($vars['queue_bucket_counts'])?1:0,\n            'default_priority_id'=>$vars['default_priority_id'],\n            'default_help_topic'=>$vars['default_help_topic'],\n            'default_ticket_status_id'=>$vars['default_ticket_status_id'],\n            'default_sla_id'=>$vars['default_sla_id'],\n            'max_open_tickets'=>$vars['max_open_tickets'],\n            'enable_captcha'=>isset($vars['enable_captcha'])?1:0,\n            'auto_claim_tickets'=>isset($vars['auto_claim_tickets'])?1:0,\n            'auto_refer_closed' => isset($vars['auto_refer_closed']) ? 1 : 0,\n            'collaborator_ticket_visibility'=>isset($vars['collaborator_ticket_visibility'])?1:0,\n            'require_topic_to_close'=>isset($vars['require_topic_to_close'])?1:0,\n            'show_related_tickets'=>isset($vars['show_related_tickets'])?1:0,\n            'allow_client_updates'=>isset($vars['allow_client_updates'])?1:0,\n            'ticket_lock' => $vars['ticket_lock'],\n            'default_ticket_queue'=>$vars['default_ticket_queue'],\n        ));\n    }\n\n    function updateTasksSettings($vars, &$errors) {\n        $f=array();\n        $f['default_task_priority_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n\n        if (!preg_match('`(?!<\\\\\\)#`', $vars['task_number_format']))\n            $errors['task_number_format'] = 'Task number format requires at least one hash character (#)';\n\n        Validator::process($f, $vars, $errors);\n\n        if ($vars['task_alert_active']\n                && (!isset($vars['task_alert_admin'])\n                    && !isset($vars['task_alert_dept_manager'])\n                    && !isset($vars['task_alert_dept_members'])\n                    && !isset($vars['task_alert_acct_manager']))) {\n            $errors['task_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_activity_alert_active']\n                && (!isset($vars['task_activity_alert_laststaff'])\n                    && !isset($vars['task_activity_alert_assigned'])\n                    && !isset($vars['task_activity_alert_dept_manager']))) {\n            $errors['task_activity_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_transfer_alert_active']\n                && (!isset($vars['task_transfer_alert_assigned'])\n                    && !isset($vars['task_transfer_alert_dept_manager'])\n                    && !isset($vars['task_transfer_alert_dept_members']))) {\n            $errors['task_transfer_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_overdue_alert_active']\n                && (!isset($vars['task_overdue_alert_assigned'])\n                    && !isset($vars['task_overdue_alert_dept_manager'])\n                    && !isset($vars['task_overdue_alert_dept_members']))) {\n            $errors['task_overdue_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_assignment_alert_active']\n                && (!isset($vars['task_assignment_alert_staff'])\n                    && !isset($vars['task_assignment_alert_team_lead'])\n                    && !isset($vars['task_assignment_alert_team_members']))) {\n            $errors['task_assignment_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($errors)\n            return false;\n\n        return $this->updateAll(array(\n            'task_number_format'=>$vars['task_number_format'] ?: '######',\n            'task_sequence_id'=>$vars['task_sequence_id'] ?: 0,\n            'default_task_priority_id'=>$vars['default_task_priority_id'],\n            'default_task_sla_id'=>$vars['default_task_sla_id'],\n            'task_alert_active'=>$vars['task_alert_active'],\n            'task_alert_admin'=>isset($vars['task_alert_admin']) ? 1 : 0,\n            'task_alert_dept_manager'=>isset($vars['task_alert_dept_manager']) ? 1 : 0,\n            'task_alert_dept_members'=>isset($vars['task_alert_dept_members']) ? 1 : 0,\n            'task_activity_alert_active'=>$vars['task_activity_alert_active'],\n            'task_activity_alert_laststaff'=>isset($vars['task_activity_alert_laststaff']) ? 1 : 0,\n            'task_activity_alert_assigned'=>isset($vars['task_activity_alert_assigned']) ? 1 : 0,\n            'task_activity_alert_dept_manager'=>isset($vars['task_activity_alert_dept_manager']) ? 1 : 0,\n            'task_assignment_alert_active'=>$vars['task_assignment_alert_active'],\n            'task_assignment_alert_staff'=>isset($vars['task_assignment_alert_staff']) ? 1 : 0,\n            'task_assignment_alert_team_lead'=>isset($vars['task_assignment_alert_team_lead']) ? 1 : 0,\n            'task_assignment_alert_team_members'=>isset($vars['task_assignment_alert_team_members']) ? 1 : 0,\n            'task_transfer_alert_active'=>$vars['task_transfer_alert_active'],\n            'task_transfer_alert_assigned'=>isset($vars['task_transfer_alert_assigned']) ? 1 : 0,\n            'task_transfer_alert_dept_manager'=>isset($vars['task_transfer_alert_dept_manager']) ? 1 : 0,\n            'task_transfer_alert_dept_members'=>isset($vars['task_transfer_alert_dept_members']) ? 1 : 0,\n            'task_overdue_alert_active'=>$vars['task_overdue_alert_active'],\n            'task_overdue_alert_assigned'=>isset($vars['task_overdue_alert_assigned']) ? 1 : 0,\n            'task_overdue_alert_dept_manager'=>isset($vars['task_overdue_alert_dept_manager']) ? 1 : 0,\n            'task_overdue_alert_dept_members'=>isset($vars['task_overdue_alert_dept_members']) ? 1 : 0,\n        ));\n    }\n\n    function updateEmailsSettings($vars, &$errors) {\n        $f=array();\n        $f['default_template_id']=array('type'=>'int',   'required'=>1, 'error'=>__('You must select template'));\n        $f['default_email_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Default email is required'));\n        $f['alert_email_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n        $f['admin_email']=array('type'=>'email',   'required'=>1, 'error'=>__('System admin email is required'));\n\n        if($vars['strip_quoted_reply'] && !trim($vars['reply_separator']))\n            $errors['reply_separator']=__('Reply separator is required to strip quoted reply.');\n\n        if($vars['admin_email'] && Email::getIdByEmail($vars['admin_email'])) //Make sure admin email is not also a system email.\n            $errors['admin_email']=__('Email already setup as system email');\n\n        if(!Validator::process($f,$vars,$errors) || $errors)\n            return false;\n\n        return $this->updateAll(array(\n            'default_template_id'=>$vars['default_template_id'],\n            'default_email_id'=>$vars['default_email_id'],\n            'alert_email_id'=>$vars['alert_email_id'],\n            'default_smtp_id'=>$vars['default_smtp_id'],\n            'admin_email'=>$vars['admin_email'],\n            'verify_email_addrs'=>isset($vars['verify_email_addrs']) ? 1 : 0,\n            'enable_auto_cron'=>isset($vars['enable_auto_cron'])?1:0,\n            'enable_mail_polling'=>isset($vars['enable_mail_polling'])?1:0,\n            'strip_quoted_reply'=>isset($vars['strip_quoted_reply'])?1:0,\n            'use_email_priority'=>isset($vars['use_email_priority'])?1:0,\n            'accept_unregistered_email'=>isset($vars['accept_unregistered_email'])?1:0,\n            'add_email_collabs'=>isset($vars['add_email_collabs'])?1:0,\n            'reply_separator'=>$vars['reply_separator'],\n            'email_attachments'=>isset($vars['email_attachments'])?1:0,\n         ));\n    }\n\n    function getLogo($site) {\n        $id = $this->get(\"{$site}_logo_id\", false);\n        return ($id) ? AttachmentFile::lookup((int) $id) : null;\n    }\n    function getClientLogo() {\n        return $this->getLogo('client');\n    }\n    function getLogoId($site) {\n        return $this->get(\"{$site}_logo_id\", false);\n    }\n    function getClientLogoId() {\n        return $this->getLogoId('client');\n    }\n\n    function getStaffLogoId() {\n        return $this->getLogoId('staff');\n    }\n    function getStaffLogo() {\n        return $this->getLogo('staff');\n    }\n\n    function getStaffLoginBackdropId() {\n        return $this->get(\"staff_backdrop_id\", false);\n    }\n    function getStaffLoginBackdrop() {\n        $id = $this->getStaffLoginBackdropId();\n        return ($id) ? AttachmentFile::lookup((int) $id) : null;\n    }\n\n    function isAuthRequiredForFiles() {\n        return $this->get('files_req_auth');\n    }\n\n    function updatePagesSettings($vars, &$errors) {\n        global $ost;\n\n        $f=array();\n        $f['landing_page_id'] = array('type'=>'int',   'required'=>1, 'error'=>'required');\n        $f['offline_page_id'] = array('type'=>'int',   'required'=>1, 'error'=>'required');\n        $f['thank-you_page_id'] = array('type'=>'int',   'required'=>1, 'error'=>'required');\n\n        if ($_FILES['logo']) {\n            $error = false;\n            list($logo) = AttachmentFile::format($_FILES['logo']);\n            if (!$logo)\n                ; // Pass\n            elseif ($logo['error'])\n                $errors['logo'] = $logo['error'];\n            elseif (!AttachmentFile::uploadLogo($logo, $error))\n                $errors['logo'] = sprintf(__('Unable to upload logo image: %s'), $error);\n        }\n\n        if ($_FILES['backdrop']) {\n            $error = false;\n            list($backdrop) = AttachmentFile::format($_FILES['backdrop']);\n            if (!$backdrop)\n                ; // Pass\n            elseif ($backdrop['error'])\n                $errors['backdrop'] = $backdrop['error'];\n            elseif (!AttachmentFile::uploadBackdrop($backdrop, $error))\n                $errors['backdrop'] = sprintf(__('Unable to upload backdrop image: %s'), $error);\n        }\n\n        $company = $ost->company;\n        $company_form = $company->getForm();\n        $company_form->setSource($_POST);\n        if (!$company_form->isValid())\n            $errors += $company_form->errors();\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        $company_form->save();\n\n        if (isset($vars['delete-logo']))\n            foreach ($vars['delete-logo'] as $id)\n                if (($vars['selected-logo'] != $id)\n                        && ($f = AttachmentFile::lookup((int) $id)))\n                    $f->delete();\n\n        if (isset($vars['delete-backdrop']))\n            foreach ($vars['delete-backdrop'] as $id)\n                if (($vars['selected-backdrop'] != $id)\n                        && ($f = AttachmentFile::lookup((int) $id)))\n                    $f->delete();\n\n        return $this->updateAll(array(\n            'landing_page_id' => $vars['landing_page_id'],\n            'offline_page_id' => $vars['offline_page_id'],\n            'thank-you_page_id' => $vars['thank-you_page_id'],\n            'client_logo_id' => (\n                (is_numeric($vars['selected-logo']) && $vars['selected-logo'])\n                ? $vars['selected-logo'] : false),\n            'staff_logo_id' => (\n                (is_numeric($vars['selected-logo-scp']) && $vars['selected-logo-scp'])\n                ? $vars['selected-logo-scp'] : false),\n            'staff_backdrop_id' => (\n                (is_numeric($vars['selected-backdrop']) && $vars['selected-backdrop'])\n                ? $vars['selected-backdrop'] : false),\n           ));\n    }\n\n    function updateAutoresponderSettings($vars, &$errors) {\n\n        if($errors) return false;\n\n        return $this->updateAll(array(\n            'ticket_autoresponder'=>isset($vars['ticket_autoresponder']) ? 1 : 0,\n            'message_autoresponder'=>isset($vars['message_autoresponder']) ? 1 : 0,\n            'message_autoresponder_collabs'=>isset($vars['message_autoresponder_collabs']) ? 1 : 0,\n            'ticket_notice_active'=>isset($vars['ticket_notice_active']) ? 1 : 0,\n            'overlimit_notice_active'=>isset($vars['overlimit_notice_active']) ? 1 : 0,\n        ));\n    }\n\n\n    function updateKBSettings($vars, &$errors) {\n        if ($errors) return false;\n\n        return $this->updateAll(array(\n            'enable_kb'=>isset($vars['enable_kb'])?1:0,\n            'restrict_kb'=>isset($vars['restrict_kb'])?1:0,\n            'enable_premade'=>isset($vars['enable_premade'])?1:0,\n        ));\n    }\n\n\n    function updateAlertsSettings($vars, &$errors) {\n\n       if($vars['ticket_alert_active']\n                && (!isset($vars['ticket_alert_admin'])\n                    && !isset($vars['ticket_alert_dept_manager'])\n                    && !isset($vars['ticket_alert_dept_members'])\n                    && !isset($vars['ticket_alert_acct_manager']))) {\n            $errors['ticket_alert_active']=__('Select recipient(s)');\n        }\n        if($vars['message_alert_active']\n                && (!isset($vars['message_alert_laststaff'])\n                    && !isset($vars['message_alert_assigned'])\n                    && !isset($vars['message_alert_dept_manager'])\n                    && !isset($vars['message_alert_acct_manager']))) {\n            $errors['message_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['note_alert_active']\n                && (!isset($vars['note_alert_laststaff'])\n                    && !isset($vars['note_alert_assigned'])\n                    && !isset($vars['note_alert_dept_manager']))) {\n            $errors['note_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['transfer_alert_active']\n                && (!isset($vars['transfer_alert_assigned'])\n                    && !isset($vars['transfer_alert_dept_manager'])\n                    && !isset($vars['transfer_alert_dept_members']))) {\n            $errors['transfer_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['overdue_alert_active']\n                && (!isset($vars['overdue_alert_assigned'])\n                    && !isset($vars['overdue_alert_dept_manager'])\n                    && !isset($vars['overdue_alert_dept_members']))) {\n            $errors['overdue_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['assigned_alert_active']\n                && (!isset($vars['assigned_alert_staff'])\n                    && !isset($vars['assigned_alert_team_lead'])\n                    && !isset($vars['assigned_alert_team_members']))) {\n            $errors['assigned_alert_active']=__('Select recipient(s)');\n        }\n\n        if($errors) return false;\n\n        return $this->updateAll(array(\n            'ticket_alert_active'=>$vars['ticket_alert_active'],\n            'ticket_alert_admin'=>isset($vars['ticket_alert_admin'])?1:0,\n            'ticket_alert_dept_manager'=>isset($vars['ticket_alert_dept_manager'])?1:0,\n            'ticket_alert_dept_members'=>isset($vars['ticket_alert_dept_members'])?1:0,\n            'ticket_alert_acct_manager'=>isset($vars['ticket_alert_acct_manager'])?1:0,\n            'message_alert_active'=>$vars['message_alert_active'],\n            'message_alert_laststaff'=>isset($vars['message_alert_laststaff'])?1:0,\n            'message_alert_assigned'=>isset($vars['message_alert_assigned'])?1:0,\n            'message_alert_dept_manager'=>isset($vars['message_alert_dept_manager'])?1:0,\n            'message_alert_acct_manager'=>isset($vars['message_alert_acct_manager'])?1:0,\n            'note_alert_active'=>$vars['note_alert_active'],\n            'note_alert_laststaff'=>isset($vars['note_alert_laststaff'])?1:0,\n            'note_alert_assigned'=>isset($vars['note_alert_assigned'])?1:0,\n            'note_alert_dept_manager'=>isset($vars['note_alert_dept_manager'])?1:0,\n            'assigned_alert_active'=>$vars['assigned_alert_active'],\n            'assigned_alert_staff'=>isset($vars['assigned_alert_staff'])?1:0,\n            'assigned_alert_team_lead'=>isset($vars['assigned_alert_team_lead'])?1:0,\n            'assigned_alert_team_members'=>isset($vars['assigned_alert_team_members'])?1:0,\n            'transfer_alert_active'=>$vars['transfer_alert_active'],\n            'transfer_alert_assigned'=>isset($vars['transfer_alert_assigned'])?1:0,\n            'transfer_alert_dept_manager'=>isset($vars['transfer_alert_dept_manager'])?1:0,\n            'transfer_alert_dept_members'=>isset($vars['transfer_alert_dept_members'])?1:0,\n            'overdue_alert_active'=>$vars['overdue_alert_active'],\n            'overdue_alert_assigned'=>isset($vars['overdue_alert_assigned'])?1:0,\n            'overdue_alert_dept_manager'=>isset($vars['overdue_alert_dept_manager'])?1:0,\n            'overdue_alert_dept_members'=>isset($vars['overdue_alert_dept_members'])?1:0,\n            'send_sys_errors'=>isset($vars['send_sys_errors'])?1:0,\n            'send_sql_errors'=>isset($vars['send_sql_errors'])?1:0,\n            'send_login_errors'=>isset($vars['send_login_errors'])?1:0,\n        ));\n    }\n\n    //Used to detect version prior to 1.7 (useful during upgrade)\n    /* static */ function getDBVersion() {\n        $sql='SELECT `ostversion` FROM '.TABLE_PREFIX.'config '\n            .'WHERE id=1';\n        return db_result(db_query($sql));\n    }\n}\n?>\n", "<?php\n/*********************************************************************\n    class.format.php\n\n    Collection of helper function used for formatting\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\ninclude_once INCLUDE_DIR.'class.charset.php';\nrequire_once INCLUDE_DIR.'class.variable.php';\n\nclass Format {\n\n\n    function file_size($bytes) {\n\n        if(!is_numeric($bytes))\n            return $bytes;\n        if($bytes<1024)\n            return $bytes.' bytes';\n        if($bytes < (900<<10))\n            return round(($bytes/1024),1).' kb';\n\n        return round(($bytes/1048576),1).' mb';\n    }\n\n    function filesize2bytes($size) {\n        switch (substr($size, -1)) {\n        case 'M': case 'm': return (int)$size <<= 20;\n        case 'K': case 'k': return (int)$size <<= 10;\n        case 'G': case 'g': return (int)$size <<= 30;\n        }\n\n        return $size;\n    }\n\n    function filename($filename) {\n        return preg_replace('/[^a-zA-Z0-9\\-\\._]/', '-', $filename);\n    }\n\n    function mimedecode($text, $encoding='UTF-8') {\n        // Handle poorly or completely un-encoded header values (\n        if (function_exists('mb_detect_encoding'))\n            if (($src_enc = mb_detect_encoding($text))\n                    && (strcasecmp($src_enc, 'ASCII') !== 0))\n                return Charset::transcode($text, $src_enc, $encoding);\n\n        if(function_exists('imap_mime_header_decode')\n                && ($parts = imap_mime_header_decode($text))) {\n            $str ='';\n            foreach ($parts as $part)\n                $str.= Charset::transcode($part->text, $part->charset, $encoding);\n\n            $text = $str;\n        } elseif($text[0] == '=' && function_exists('iconv_mime_decode')) {\n            $text = iconv_mime_decode($text, 0, $encoding);\n        } elseif(!strcasecmp($encoding, 'utf-8')\n                && function_exists('imap_utf8')) {\n            $text = imap_utf8($text);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Decodes filenames given in the content-disposition header according\n     * to RFC5987, such as filename*=utf-8''filename.png. Note that the\n     * language sub-component is defined in RFC5646, and that the filename\n     * is URL encoded (in the charset specified)\n     */\n    function decodeRfc5987($filename) {\n        $match = array();\n        if (preg_match(\"/([\\w!#$%&+^_`{}~-]+)'([\\w-]*)'(.*)$/\",\n                $filename, $match))\n            // XXX: Currently we don't care about the language component.\n            //      The  encoding hint is sufficient.\n            return Charset::utf8(urldecode($match[3]), $match[1]);\n        else\n            return $filename;\n    }\n\n    /**\n     * Json Encoder\n     *\n     */\n    function json_encode($what) {\n        require_once (INCLUDE_DIR.'class.json.php');\n        return JsonDataEncoder::encode($what);\n    }\n\n\tfunction phone($phone) {\n\n\t\t$stripped= preg_replace(\"/[^0-9]/\", \"\", $phone);\n\t\tif(strlen($stripped) == 7)\n\t\t\treturn preg_replace(\"/([0-9]{3})([0-9]{4})/\", \"$1-$2\",$stripped);\n\t\telseif(strlen($stripped) == 10)\n\t\t\treturn preg_replace(\"/([0-9]{3})([0-9]{3})([0-9]{4})/\", \"($1) $2-$3\",$stripped);\n\t\telse\n\t\t\treturn $phone;\n\t}\n\n    function truncate($string,$len,$hard=false) {\n\n        if(!$len || $len>strlen($string))\n            return $string;\n\n        $string = substr($string,0,$len);\n\n        return $hard?$string:(substr($string,0,strrpos($string,' ')).' ...');\n    }\n\n    function strip_slashes($var) {\n        return is_array($var)?array_map(array('Format','strip_slashes'),$var):stripslashes($var);\n    }\n\n    function wrap($text, $len=75) {\n        return $len ? wordwrap($text, $len, \"\\n\", true) : $text;\n    }\n\n    function html_balance($html, $remove_empty=true) {\n        if (!extension_loaded('dom'))\n            return $html;\n\n        if (!trim($html))\n            return $html;\n\n        $doc = new DomDocument();\n        $xhtml = '<?xml encoding=\"utf-8\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>'\n            // Wrap the content in a <div> because libxml would use a <p>\n            . \"<div>$html</div>\";\n        $doc->encoding = 'utf-8';\n        $doc->preserveWhitespace = false;\n        $doc->recover = true;\n        if (false === @$doc->loadHTML($xhtml))\n            return $html;\n\n        if ($remove_empty) {\n            // Remove empty nodes\n            $xpath = new DOMXPath($doc);\n            static $eE = array('area'=>1, 'br'=>1, 'col'=>1, 'embed'=>1,\n                    'iframe' => 1, 'hr'=>1, 'img'=>1, 'input'=>1,\n                    'isindex'=>1, 'param'=>1, 'div'=>1);\n            do {\n                $done = true;\n                $nodes = $xpath->query('//*[not(text()) and not(node())]');\n                foreach ($nodes as $n) {\n                    if (isset($eE[$n->nodeName]))\n                        continue;\n                    $n->parentNode->removeChild($n);\n                    $done = false;\n                }\n            } while (!$done);\n        }\n\n        static $phpversion;\n        if (!isset($phpversion))\n            $phpversion = phpversion();\n\n        $body = $doc->getElementsByTagName('body');\n        if (!$body->length)\n            return $html;\n\n        if ($phpversion > '5.3.6') {\n            $html = $doc->saveHTML($doc->getElementsByTagName('body')->item(0)->firstChild);\n        }\n        else {\n            $html = $doc->saveHTML();\n            $html = preg_replace('`^<!DOCTYPE.+?>|<\\?xml .+?>|</?html>|</?body>|</?head>|<meta .+?/?>`', '', $html); # <?php\n        }\n        return preg_replace('`^<div>|</div>$`', '', trim($html));\n    }\n\n    function html($html, $config=array()) {\n        require_once(INCLUDE_DIR.'htmLawed.php');\n        $spec = false;\n        if (isset($config['spec']))\n            $spec = $config['spec'];\n\n        // Add in htmLawed defaults\n        $config += array(\n            'balance' => 1,\n        );\n\n        // Attempt to balance using libxml. htmLawed will corrupt HTML with\n        // balancing to fix improper HTML at the same time. For instance,\n        // some email clients may wrap block elements inside inline\n        // elements. htmLawed will change such block elements to inlines to\n        // make the HTML correct.\n        if ($config['balance'] && extension_loaded('dom')) {\n            $html = self::html_balance($html);\n            $config['balance'] = 0;\n        }\n\n        return htmLawed($html, $config, $spec);\n    }\n\n    function html2text($html, $width=74, $tidy=true) {\n\n        if (!$html)\n            return $html;\n\n\n        # Tidy html: decode, balance, sanitize tags\n        if($tidy)\n            $html = Format::html(Format::htmldecode($html), array('balance' => 1));\n\n        # See if advanced html2text is available (requires xml extension)\n        if (function_exists('convert_html_to_text')\n                && extension_loaded('dom')\n                && ($text = convert_html_to_text($html, $width)))\n                return $text;\n\n        # Try simple html2text  - insert line breaks after new line tags.\n        $html = preg_replace(\n                array(':<br ?/?\\>:i', ':(</div>)\\s*:i', ':(</p>)\\s*:i'),\n                array(\"\\n\", \"$1\\n\", \"$1\\n\\n\"),\n                $html);\n\n        # Strip tags, decode html chars and wrap resulting text.\n        return Format::wrap(\n                Format::htmldecode( Format::striptags($html, false)),\n                $width);\n    }\n\n    static function __html_cleanup($el, $attributes=0) {\n        static $eE = array('area'=>1, 'br'=>1, 'col'=>1, 'embed'=>1,\n            'hr'=>1, 'img'=>1, 'input'=>1, 'isindex'=>1, 'param'=>1);\n\n        // We're dealing with closing tag\n        if ($attributes === 0)\n            return \"</{$el}>\";\n\n        // Remove iframe and embed without src (perhaps striped by spec)\n        // It would be awesome to rickroll such entry :)\n        if (in_array($el, array('iframe', 'embed'))\n                && (!isset($attributes['src']) || empty($attributes['src'])))\n            return '';\n\n        // Clean unexpected class values\n        if (isset($attributes['class'])) {\n            $classes = explode(' ', $attributes['class']);\n            foreach ($classes as $i=>$a)\n                // Unset all unsupported style classes -- anything but M$\n                if (strpos($a, 'Mso') !== 0)\n                    unset($classes[$i]);\n            if ($classes)\n                $attributes['class'] = implode(' ', $classes);\n            else\n                unset($attributes['class']);\n        }\n        // Clean browser-specific style attributes\n        if (isset($attributes['style'])) {\n            $styles = preg_split('/;\\s*/S', html_entity_decode($attributes['style']));\n            $props = array();\n            foreach ($styles as $i=>&$s) {\n                @list($prop, $val) = explode(':', $s);\n                if (isset($props[$prop])) {\n                    unset($styles[$i]);\n                    continue;\n                }\n                $props[$prop] = true;\n                // Remove unset or browser-specific style rules\n                if (!$val || !$prop || $prop[0] == '-' || substr($prop, 0, 4) == 'mso-')\n                    unset($styles[$i]);\n                // Remove quotes of properties without enclosed space\n                if (!strpos($val, ' '))\n                    $val = str_replace('\"','', $val);\n                else\n                    $val = str_replace('\"',\"'\", $val);\n                $s = \"$prop:\".trim($val);\n            }\n            unset($s);\n            if ($styles)\n                $attributes['style'] = Format::htmlchars(implode(';', $styles));\n            else\n                unset($attributes['style']);\n        }\n        $at = '';\n        if (is_array($attributes)) {\n            foreach ($attributes as $k=>$v)\n                $at .= \" $k=\\\"$v\\\"\";\n            return \"<{$el}{$at}\".(isset($eE[$el])?\" /\":\"\").\">\";\n        }\n        else {\n            return \"</{$el}>\";\n        }\n    }\n\n    function safe_html($html, $options=array()) {\n        global $cfg;\n\n        $options = array_merge(array(\n                    // Balance html tags\n                    'balance' => 1,\n                    // Decoding special html char like &lt; and &gt; which\n                    // can be used to skip cleaning\n                    'decode' => true\n                    ),\n                $options);\n\n        if ($options['decode'])\n            $html = Format::htmldecode($html);\n\n        // Remove HEAD and STYLE sections\n        $html = preg_replace(\n            array(':<(head|style|script).+?</\\1>:is', # <head> and <style> sections\n                  ':<!\\[[^]<]+\\]>:',            # <![if !mso]> and friends\n                  ':<!DOCTYPE[^>]+>:',          # <!DOCTYPE ... >\n                  ':<\\?[^>]+>:',                # <?xml version=\"1.0\" ... >\n                  ':<html[^>]+:i',              # drop html attributes\n                  ':<(a|span) (name|style)=\"(mso-bookmark\\:)?_MailEndCompose\">(.+)?<\\/(a|span)>:', # Drop _MailEndCompose\n                  ':<div dir=(3D)?\"ltr\">(.*?)<\\/div>(.*):is', # drop Gmail \"ltr\" attributes\n                  ':data-cid=\"[^\"]*\":',         # drop image cid attributes\n            ),\n            array('', '', '', '', '<html', '$4', '$2 $3', ''),\n            $html);\n\n        // HtmLawed specific config only\n        $config = array(\n            'safe' => 1, //Exclude applet, embed, iframe, object and script tags.\n            'balance' => $options['balance'],\n            'comment' => 1, //Remove html comments (OUTLOOK LOVE THEM)\n            'tidy' => -1,\n            'deny_attribute' => 'id',\n            'schemes' => 'href: aim, feed, file, ftp, gopher, http, https, irc, mailto, news, nntp, sftp, ssh, telnet; *:file, http, https; src: cid, http, https, data',\n            'hook_tag' => function($e, $a=0) { return Format::__html_cleanup($e, $a); },\n        );\n\n        // iFrame Whitelist\n        if ($cfg)\n            $whitelist = $cfg->getIframeWhitelist();\n        if (!empty($whitelist)) {\n            $config['elements'] = '*+iframe';\n            $config['spec'] = 'iframe=-*,height,width,type,style,src(match=\"`^(https?:)?//(www\\.)?('\n                .implode('|', $whitelist)\n                .')/?`i\"),frameborder'.($options['spec'] ? '; '.$options['spec'] : '').',allowfullscreen';\n        }\n\n        return Format::html($html, $config);\n    }\n\n    function localizeInlineImages($text) {\n        // Change file.php urls back to content-id's\n        return preg_replace(\n            '`src=\"(?:https?:/)?(?:/[^/\"]+)*?/file\\\\.php\\\\?(?:\\w+=[^&]+&(?:amp;)?)*?key=([^&]+)[^\"]*`',\n            'src=\"cid:$1', $text);\n    }\n\n    function sanitize($text, $striptags=false, $spec=false) {\n\n        //balance and neutralize unsafe tags.\n        $text = Format::safe_html($text, array('spec' => $spec));\n\n        $text = self::localizeInlineImages($text);\n\n        //If requested - strip tags with decoding disabled.\n        return $striptags?Format::striptags($text, false):$text;\n    }\n\n    function htmlchars($var, $sanitize = false) {\n        static $phpversion = null;\n\n        if (is_array($var)) {\n            $result = array();\n            foreach ($var as $k => $v)\n                $result[$k] = self::htmlchars($v, $sanitize);\n\n            return $result;\n        }\n\n        if ($sanitize)\n            $var = Format::sanitize($var);\n\n        if (!isset($phpversion))\n            $phpversion = phpversion();\n\n        $flags = ENT_COMPAT;\n        if ($phpversion >= '5.4.0')\n            $flags |= ENT_HTML401;\n\n        try {\n            return htmlspecialchars( (string) $var, $flags, 'UTF-8', false);\n        } catch(Exception $e) {\n            return $var;\n        }\n    }\n\n    function htmldecode($var) {\n\n        if(is_array($var))\n            return array_map(array('Format','htmldecode'), $var);\n\n        $flags = ENT_COMPAT;\n        if (phpversion() >= '5.4.0')\n            $flags |= ENT_HTML401;\n\n        return htmlspecialchars_decode($var, $flags);\n    }\n\n    function input($var) {\n        return Format::htmlchars($var);\n    }\n\n    //Format text for display..\n    function display($text, $inline_images=true, $balance=true) {\n        // Make showing offsite images optional\n        $text = preg_replace_callback('/<img ([^>]*)(src=\"http[^\"]+\")([^>]*)\\/>/',\n            function($match) {\n                // Drop embedded classes -- they don't refer to ours\n                $match = preg_replace('/class=\"[^\"]*\"/', '', $match);\n                return sprintf('<span %s class=\"non-local-image\" data-%s %s></span>',\n                    $match[1], $match[2], $match[3]);\n            },\n            $text);\n\n        if ($balance)\n            $text = self::html_balance($text, false);\n\n        // make urls clickable.\n        $text = Format::clickableurls($text);\n\n        if ($inline_images)\n            return self::viewableImages($text);\n\n        return $text;\n    }\n\n    function striptags($var, $decode=true) {\n\n        if(is_array($var))\n            return array_map(array('Format','striptags'), $var, array_fill(0, count($var), $decode));\n\n        return strip_tags($decode?Format::htmldecode($var):$var);\n    }\n\n    // Strip all Emoticon/Emoji characters until we support them\n    function strip_emoticons($text) {\n        return preg_replace(array(\n                '/[\\x{1F601}-\\x{1F64F}]/u', # Emoticons\n                '/[\\x{1F680}-\\x{1F6C0}]/u', # Transport/Map\n                '/[\\x{1F600}-\\x{1F636}]/u', # Add. Emoticons\n                '/[\\x{1F681}-\\x{1F6C5}]/u', # Add. Transport/Map\n                '/[\\x{1F30D}-\\x{1F567}]/u', # Other\n                '/[\\x{1F910}-\\x{1F999}]/u', # Hands\n                '/[\\x{1F9D0}-\\x{1F9DF}]/u', # Fantasy\n                '/[\\x{1F9E0}-\\x{1F9EF}]/u', # Clothes\n                '/[\\x{1F6F0}-\\x{1F6FF}]/u', # Misc. Transport\n                '/[\\x{1F6E0}-\\x{1F6EF}]/u', # Planes/Boats\n                '/[\\x{1F6C0}-\\x{1F6CF}]/u', # Bed/Bath\n                '/[\\x{1F9C0}-\\x{1F9C2}]/u', # Misc. Food\n                '/[\\x{1F6D0}-\\x{1F6D2}]/u', # Sign/P.O.W./Cart\n                '/[\\x{1F500}-\\x{1F5FF}]/u', # Uncategorized\n                '/[\\x{1F300}-\\x{1F3FF}]/u', # Cyclone/Amphora\n                '/[\\x{2702}-\\x{27B0}]/u',   # Dingbats\n                '/[\\x{00A9}-\\x{00AE}]/u',   # Copyright/Registered\n                '/[\\x{23F0}-\\x{23FF}]/u',   # Clock/Buttons\n                '/[\\x{23E0}-\\x{23EF}]/u',   # More Buttons\n                '/[\\x{2310}-\\x{231F}]/u',   # Hourglass/Watch\n                '/[\\x{1000B6}]/u',          # Private Use Area (Plane 16)\n                '/[\\x{2322}-\\x{232F}]/u'    # Keyboard\n            ), '', $text);\n    }\n\n    //make urls clickable. Mainly for display\n    function clickableurls($text, $target='_blank') {\n        global $ost;\n\n        // Find all text between tags\n        return preg_replace_callback(':^[^<]+|>[^<]+:',\n            function($match) {\n                // Scan for things that look like URLs\n                return preg_replace_callback(\n                    '`(?<!>)(((f|ht)tp(s?)://|(?<!//)www\\.)([-+~%/.\\w]+)(?:[-?#+=&;%@.\\w\\[\\]\\/]*)?)'\n                   .'|(\\b[_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,63})`',\n                    function ($match) {\n                        if ($match[1]) {\n                            while (in_array(substr($match[1], -1),\n                                    array('.','?','-',':',';'))) {\n                                $match[9] = substr($match[1], -1) . $match[9];\n                                $match[1] = substr($match[1], 0, strlen($match[1])-1);\n                            }\n                            if (strpos($match[2], '//') === false) {\n                                $match[1] = 'http://' . $match[1];\n                            }\n\n                            return sprintf('<a href=\"%s\">%s</a>%s',\n                                $match[1], $match[1], $match[9]);\n                        } elseif ($match[6]) {\n                            return sprintf('<a href=\"mailto:%1$s\" target=\"_blank\">%1$s</a>',\n                                $match[6]);\n                        }\n                    },\n                    $match[0]);\n            },\n            $text);\n    }\n\n    function stripEmptyLines($string) {\n        return preg_replace(\"/\\n{3,}/\", \"\\n\\n\", trim($string));\n    }\n\n\n    function viewableImages($html, $options=array()) {\n        $cids = $images = array();\n        $options +=array(\n                'disposition' => 'inline');\n        return preg_replace_callback('/\"cid:([\\w._-]{32})\"/',\n        function($match) use ($options, $images) {\n            if (!($file = AttachmentFile::lookup($match[1])))\n                return $match[0];\n\n            return sprintf('\"%s\" data-cid=\"%s\"',\n                $file->getDownloadUrl($options), $match[1]);\n        }, $html);\n    }\n\n\n    /**\n     * Thanks, http://us2.php.net/manual/en/function.implode.php\n     * Implode an array with the key and value pair giving\n     * a glue, a separator between pairs and the array\n     * to implode.\n     * @param string $glue The glue between key and value\n     * @param string $separator Separator between pairs\n     * @param array $array The array to implode\n     * @return string The imploded array\n    */\n    function array_implode( $glue, $separator, $array ) {\n\n        if ( !is_array( $array ) ) return $array;\n\n        $string = array();\n        foreach ( $array as $key => $val ) {\n            if ( is_array( $val ) )\n                $val = implode( ',', $val );\n\n            $string[] = \"{$key}{$glue}{$val}\";\n        }\n\n        return implode( $separator, $string );\n    }\n\n    function number($number, $locale=false) {\n        if (is_array($number))\n            return array_map(array('Format','number'), $number);\n\n        if (!is_numeric($number))\n            return $number;\n\n        if (extension_loaded('intl') && class_exists('NumberFormatter')) {\n            $nf = NumberFormatter::create($locale ?: Internationalization::getCurrentLocale(),\n                NumberFormatter::DECIMAL);\n            return $nf->format($number);\n        }\n\n        return number_format((int) $number);\n    }\n\n    /*\n     * Add ORDINAL suffix to a number e.g 1st, 2nd, 3rd etc.\n     * TODO: Combine this routine with Format::number and pass in type of\n     * formatting.\n     */\n    function ordinalsuffix($number, $locale=false) {\n        if (is_array($number))\n            return array_map(array('Format', 'ordinalsuffix'), $number);\n\n        if (!is_numeric($number))\n            return $number;\n\n        if (extension_loaded('intl') && class_exists('NumberFormatter')) {\n            $nf = new NumberFormatter($locale ?:\n                    Internationalization::getCurrentLocale(),\n                    NumberFormatter::ORDINAL);\n            return $nf->format($number);\n        }\n\n        // Default to English ordinal\n        if (!in_array(($number % 100), [11,12,13])) {\n            switch ($number % 10) {\n            case 1:  return $number.'st';\n            case 2:  return $number.'nd';\n            case 3:  return $number.'rd';\n            }\n        }\n\n        return $number.'th';\n    }\n\n    /* elapsed time */\n    function elapsedTime($sec) {\n\n        if(!$sec || !is_numeric($sec)) return \"\";\n\n        $days = floor($sec / 86400);\n        $hrs = floor(bcmod($sec,86400)/3600);\n        $mins = round(bcmod(bcmod($sec,86400),3600)/60);\n        if($days > 0) $tstring = $days . 'd,';\n        if($hrs > 0) $tstring = $tstring . $hrs . 'h,';\n        $tstring =$tstring . $mins . 'm';\n\n        return $tstring;\n    }\n\n    function __formatDate($timestamp, $format, $fromDb, $dayType, $timeType,\n            $strftimeFallback, $timezone, $user=false) {\n        global $cfg;\n        static $cache;\n\n        if ($timestamp && $fromDb)\n            $timestamp = Misc::db2gmtime($timestamp);\n\n        // Make sure timestamp is valid for realz.\n        if (!$timestamp || !($datetime = DateTime::createFromFormat('U', $timestamp)))\n            return '';\n\n        // Normalize timezone\n        if ($timezone)\n            $timezone = Format::timezone($timezone);\n\n        // Set the desired timezone (caching since it will be mostly same\n        // for most date formatting.\n        $timezone = Format::timezone($timezone, $cfg->getTimezone());\n        if (isset($cache[$timezone]))\n            $tz =  $cache[$timezone];\n        else\n            $cache[$timezone] = $tz = new DateTimeZone($timezone);\n\n        $datetime->setTimezone($tz);\n\n        // Formmating options\n        $options = array(\n                'timezone' => $tz->getName(),\n                'locale' =>  Internationalization::getCurrentLocale($user),\n                'daytype' => $dayType,\n                'timetype' => $timeType,\n                'strftime' => $strftimeFallback,\n                );\n\n        return self::IntDateFormat($datetime, $format, $options);\n\n    }\n\n    // IntDateFormat\n    // Format datetime to desired format in accorrding to desired locale\n    function IntDateFormat(DateTime $datetime, $format, $options=array()) {\n        global $cfg;\n\n        if (!$datetime instanceof DateTime)\n            return '';\n\n        $format = $format ?: $cfg->getDateFormat();\n        $timezone = $datetime->getTimeZone();\n        // Use IntlDateFormatter if available\n        if (class_exists('IntlDateFormatter')) {\n            $options += array(\n                    'pattern' => $format,\n                    'timezone' => $timezone->getName());\n\n            if ($fmt=Internationalization::getIntDateFormatter($options))\n                return  $fmt->format($datetime);\n        }\n\n        // Fallback to using strftime which is not timezone aware\n        // Figure out timezone offset for given timestamp\n        $timestamp = $datetime->format('U');\n        $time = DateTime::createFromFormat('U', $timestamp, new DateTimeZone('UTC'));\n        $timestamp += $timezone->getOffset($time);\n        // Change format to strftime format otherwise us a fallback format\n        $format = self::getStrftimeFormat($format) ?: $options['strftime']\n            ?:  '%x %X';\n        if ($cfg && $cfg->isForce24HourTime())\n            $format = str_replace('X', 'R', $format);\n\n        return strftime($format, $timestamp);\n    }\n\n    // Normalize ambiguous timezones\n    function timezone($tz, $default=false) {\n\n        // Translate ambiguous 'GMT' timezone\n        if ($tz == 'GMT')\n           return 'Europe/London';\n\n        if (!$tz || !strcmp($tz, '+00:00'))\n            $tz = 'UTC';\n\n        if (is_numeric($tz))\n            $tz = timezone_name_from_abbr('', $tz, false);\n        // Forbid timezone abbreviations like 'CDT'\n        elseif ($tz !== 'UTC' && strpos($tz, '/') === false) {\n            // Attempt to lookup based on the abbreviation\n            if (!($tz = timezone_name_from_abbr($tz)))\n                // Abbreviation doesn't point to anything valid\n                return $default;\n        }\n\n        // SYSTEM does not describe a time zone, ensure we have a valid zone\n        // by attempting to create an instance of DateTimeZone()\n        try {\n            $timezone = new DateTimeZone($tz);\n            return $timezone->getName();\n        } catch(Exception $ex) {\n            return $default;\n        }\n\n        return $tz;\n    }\n\n    function parseDateTime($date, $locale=null, $format=false) {\n        global $cfg;\n\n        if (!$date)\n            return null;\n\n        // Timestamp format?\n        if (is_numeric($date))\n            return DateTime::createFromFormat('U', $date);\n\n        $datetime = null;\n        try {\n            $datetime = new DateTime($date);\n            $tz = $datetime->getTimezone()->getName();\n            if ($tz && $tz[0] == '+' || $tz[0] == '-')\n                $tz = (int) $datetime->format('Z');\n            elseif ($tz == 'Z')\n                $tz = 'UTC';\n            $timezone =  new DateTimeZone(Format::timezone($tz) ?: 'UTC');\n            $datetime->setTimezone($timezone);\n        } catch (Exception $ex) {\n            // Fallback using strtotime\n            if (($time=strtotime($date)))\n                $datetime = DateTime::createFromFormat('U', $time);\n\n        }\n\n        return $datetime;\n    }\n\n    function time($timestamp, $fromDb=true, $format=false, $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n            $format ?: $cfg->getTimeFormat(), $fromDb,\n            IDF_NONE, IDF_SHORT,\n            '%X', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function date($timestamp, $fromDb=true, $format=false, $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n            $format ?: $cfg->getDateFormat(), $fromDb,\n            IDF_SHORT, IDF_NONE,\n            '%x', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function datetime($timestamp, $fromDb=true, $format=false,  $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n                $format ?: $cfg->getDateTimeFormat(), $fromDb,\n                IDF_SHORT, IDF_SHORT,\n                '%x %X', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function daydatetime($timestamp, $fromDb=true, $format=false,  $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n                $format ?: $cfg->getDayDateTimeFormat(), $fromDb,\n                IDF_FULL, IDF_SHORT,\n                '%x %X', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function getStrftimeFormat($format) {\n        static $codes, $ids;\n\n        if (!isset($codes)) {\n            // This array is flipped because of duplicated formats on the\n            // intl side due to slight differences in the libraries\n            $codes = array(\n            '%d' => 'dd',\n            '%a' => 'EEE',\n            '%e' => 'd',\n            '%A' => 'EEEE',\n            '%w' => 'e',\n            '%w' => 'c',\n            '%z' => 'D',\n\n            '%V' => 'w',\n\n            '%B' => 'MMMM',\n            '%m' => 'MM',\n            '%b' => 'MMM',\n\n            '%g' => 'Y',\n            '%G' => 'Y',\n            '%Y' => 'y',\n            '%y' => 'yy',\n\n            '%P' => 'a',\n            '%l' => 'h',\n            '%k' => 'H',\n            '%I' => 'hh',\n            '%H' => 'HH',\n            '%M' => 'mm',\n            '%S' => 'ss',\n\n            '%z' => 'ZZZ',\n            '%Z' => 'z',\n            );\n\n            $flipped = array_flip($codes);\n            krsort($flipped);\n\n            // Also establish a list of ids, so we can do a creative replacement\n            // without clobbering the common letters in the formats\n            $keys = array_keys($flipped);\n            $ids = array_combine($keys, array_map('chr', array_flip($keys)));\n\n            // Now create an array from the id codes back to strftime codes\n            $codes = array_combine($ids, $flipped);\n        }\n        // $ids => array(intl => #id)\n        // $codes => array(#id => strftime)\n        $format = str_replace(array_keys($ids), $ids, $format);\n        $format = str_replace($ids, $codes, $format);\n\n        return preg_replace_callback('`[\\x00-\\x1f]`',\n            function($m) use ($ids) {\n                return $ids[ord($m[0])];\n            },\n            $format\n        );\n    }\n\n    // Translate php date / time formats to js equivalent\n    function dtfmt_php2js($format) {\n\n        $codes = array(\n        // Date\n        'DD' => 'oo',\n        'D' => 'o',\n        'EEEE' => 'DD',\n        'EEE' => 'D',\n        'MMMM' => '||',\n        'MMM' => '|',\n        'MM' => 'mm',\n        'M' =>  'm',\n        '||' => 'MM',\n        '|' => 'M',\n        'yyyy' => 'YY',\n        'yyy' => 'YY',\n        'yy' =>  'Y',\n        'y' => 'yy',\n        'YY' =>  'yy',\n        'Y' => 'y',\n        // Time\n        'a' => 'tt',\n        'HH' => 'H',\n        'H' => 'HH',\n        );\n\n        return str_replace(array_keys($codes), array_values($codes), $format);\n    }\n\n    // Thanks, http://stackoverflow.com/a/2955878/1025836\n    /* static */\n    function slugify($text) {\n        // convert special characters to entities\n        $text = htmlentities($text, ENT_NOQUOTES, 'UTF-8');\n\n        // removes entity suffixes, leaving only un-accented characters\n        $text = preg_replace('~&([A-za-z])(?:acute|cedil|circ|grave|orn|ring|slash|th|tilde|uml);~', '$1', $text);\n        $text = preg_replace('~&([A-za-z]{2})(?:lig);~', '$1', $text);\n\n        // replace non letter or digits by -\n        $text = preg_replace('~[^\\p{L}\\p{N}]+~u', '-', $text);\n\n        // trim\n        $text = trim($text, '-');\n\n        // lowercase\n        $text = strtolower($text);\n\n        return (empty($text)) ? 'n-a' : $text;\n    }\n\n    /**\n     * Parse RFC 2397 formatted data strings. Format according to the RFC\n     * should look something like:\n     *\n     * data:[type/subtype][;charset=utf-8][;base64],data\n     *\n     * Parameters:\n     * $data - (string) RFC2397 formatted data string\n     * $output_encoding - (string:optional) Character set the input data\n     *      should be encoded to.\n     * $always_convert - (bool|default:true) If the input data string does\n     *      not specify an input encding, assume iso-8859-1. If this flag is\n     *      set, the output will always be transcoded to the declared\n     *      output_encoding, if set.\n     *\n     * Returs:\n     * array (data=>parsed and transcoded data string, type=>MIME type\n     * declared in the data string or text/plain otherwise)\n     *\n     * References:\n     * http://www.ietf.org/rfc/rfc2397.txt\n     */\n    function parseRfc2397($data, $output_encoding=false, $always_convert=true) {\n        if (substr($data, 0, 5) != \"data:\")\n            return array('data'=>$data, 'type'=>'text/plain');\n\n        $data = substr($data, 5);\n        list($meta, $contents) = explode(\",\", $data, 2);\n        if ($meta)\n            list($type, $extra) = explode(\";\", $meta, 2);\n        else\n            $extra = '';\n        if (!isset($type) || !$type)\n            $type = 'text/plain';\n\n        $parameters = explode(\";\", $extra);\n\n        # Handle 'charset' hint in $extra, such as\n        # data:text/plain;charset=iso-8859-1,Blah\n        # Convert to utf-8 since it's the encoding scheme for the database.\n        $charset = ($always_convert) ? 'iso-8859-1' : false;\n        foreach ($parameters as $p) {\n            list($param, $value) = explode('=', $extra);\n            if ($param == 'charset')\n                $charset = $value;\n            elseif ($param == 'base64')\n                $contents = base64_decode($contents);\n        }\n        if ($output_encoding && $charset)\n            $contents = Charset::transcode($contents, $charset, $output_encoding);\n\n        return array(\n            'data' => $contents,\n            'type' => $type\n        );\n    }\n\n    // Performs Unicode normalization (where possible) and splits words at\n    // difficult word boundaries (for far eastern languages)\n    function searchable($text, $lang=false) {\n        global $cfg;\n\n        if (function_exists('normalizer_normalize')) {\n            // Normalize text input :: remove diacritics and such\n            $text = normalizer_normalize($text, Normalizer::FORM_C);\n        }\n\n        if (false && class_exists('IntlBreakIterator')) {\n            // Split by word boundaries\n            if ($tokenizer = IntlBreakIterator::createWordInstance(\n                    $lang ?: ($cfg ? $cfg->getPrimaryLanguage() : 'en_US'))\n            ) {\n                $tokenizer->setText($text);\n                $tokens = array();\n                foreach ($tokenizer as $token)\n                    $tokens[] = $token;\n                $text = implode(' ', $tokens);\n            }\n        }\n        else {\n            // Approximate word boundaries from Unicode chart at\n            // http://www.unicode.org/reports/tr29/#Word_Boundaries\n\n            // Punt for now\n\n            // Drop extraneous whitespace\n            $text = preg_replace('/(\\s)\\s+/u', '$1', $text);\n\n            // Drop leading and trailing whitespace\n            $text = trim($text);\n        }\n        return $text;\n    }\n\n    function relativeTime($to, $from=false, $granularity=1) {\n        if (!$to)\n            return false;\n        $timestamp = $to;\n        if (gettype($timestamp) === 'string')\n            $timestamp = strtotime($timestamp);\n        $from = $from ?: Misc::gmtime();\n        if (gettype($timestamp) === 'string')\n            $from = strtotime($from);\n        $timeDiff = $from - $timestamp;\n        $absTimeDiff = abs($timeDiff);\n\n        // Roll back to the nearest multiple of $granularity\n        $absTimeDiff -= $absTimeDiff % $granularity;\n\n        // within 2 seconds\n        if ($absTimeDiff <= 2) {\n          return $timeDiff >= 0 ? __('just now') : __('now');\n        }\n\n        // within a minute\n        if ($absTimeDiff < 60) {\n          return sprintf($timeDiff >= 0 ? __('%d seconds ago') : __('in %d seconds'), $absTimeDiff);\n        }\n\n        // within 2 minutes\n        if ($absTimeDiff < 120) {\n          return sprintf($timeDiff >= 0 ? __('about a minute ago') : __('in about a minute'));\n        }\n\n        // within an hour\n        if ($absTimeDiff < 3600) {\n          return sprintf($timeDiff >= 0 ? __('%d minutes ago') : __('in %d minutes'), $absTimeDiff / 60);\n        }\n\n        // within 2 hours\n        if ($absTimeDiff < 7200) {\n          return ($timeDiff >= 0 ? __('about an hour ago') : __('in about an hour'));\n        }\n\n        // within 24 hours\n        if ($absTimeDiff < 86400) {\n          return sprintf($timeDiff >= 0 ? __('%d hours ago') : __('in %d hours'), $absTimeDiff / 3600);\n        }\n\n        // within 29 days\n        $days29 = 29 * 86400;\n        if ($absTimeDiff < $days29) {\n          return sprintf($timeDiff >= 0 ? __('%d days ago') : __('in %d days'), round($absTimeDiff / 86400));\n        }\n\n        // within 60 days\n        $days60 = 60 * 86400;\n        if ($absTimeDiff < $days60) {\n          return ($timeDiff >= 0 ? __('about a month ago') : __('in about a month'));\n        }\n\n        $currTimeYears = date('Y', $from);\n        $timestampYears = date('Y', $timestamp);\n        $currTimeMonths = $currTimeYears * 12 + date('n', $from);\n        $timestampMonths = $timestampYears * 12 + date('n', $timestamp);\n\n        // within a year\n        $monthDiff = $currTimeMonths - $timestampMonths;\n        if ($monthDiff < 12 && $monthDiff > -12) {\n          return sprintf($monthDiff >= 0 ? __('%d months ago') : __('in %d months'), abs($monthDiff));\n        }\n\n        $yearDiff = $currTimeYears - $timestampYears;\n        if ($yearDiff < 2 && $yearDiff > -2) {\n          return $yearDiff >= 0 ? __('a year ago') : __('in a year');\n        }\n\n        return sprintf($yearDiff >= 0 ? __('%d years ago') : __('in %d years'), abs($yearDiff));\n    }\n}\n\nif (!class_exists('IntlDateFormatter')) {\n    define('IDF_NONE', 0);\n    define('IDF_SHORT', 1);\n    define('IDF_FULL', 2);\n}\nelse {\n    define('IDF_NONE', IntlDateFormatter::NONE);\n    define('IDF_SHORT', IntlDateFormatter::SHORT);\n    define('IDF_FULL', IntlDateFormatter::FULL);\n}\n\nclass FormattedLocalDate\nimplements TemplateVariable {\n\n    var $date;\n    var $timezone;\n    var $datetime;\n    var $fromdb;\n    var $format;\n\n    function __construct($date,  $options=array()) {\n\n        // Date to be formatted\n        $this->datetime = Format::parseDateTime($date);\n        $this->date = $this->datetime->getTimestamp();\n        // Desired timezone\n        if (isset($options['timezone']))\n            $this->timezone = $options['timezone'];\n        else\n            $this->timezone = false;\n        // User\n        if (isset($options['user']))\n            $this->user = $options['user'];\n        else\n            $this->user = false;\n\n        // DB date or nah?\n        if (isset($options['fromdb']))\n            $this->fromdb = $options['fromdb'];\n        else\n            $this->fromdb = true;\n        // Desired format\n        if (isset($options['format']) && $options['format'])\n            $this->format = $options['format'];\n    }\n\n    function getDateTime() {\n        return $this->datetime;\n    }\n\n    function asVar() {\n        return $this->getVar($this->format ?: 'long');\n    }\n\n    function getVar($what) {\n        // TODO: Rebase date format so that locale is discovered HERE.\n\n        switch ($what) {\n        case 'short':\n            return Format::date($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        case 'long':\n            return Format::datetime($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        case 'time':\n            return Format::time($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        case 'full':\n            return Format::daydatetime($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        }\n    }\n\n    function __toString() {\n        return $this->asVar() ?: '';\n    }\n\n    static function getVarScope() {\n        return array(\n            'full' => 'Expanded date, e.g. day, month dd, yyyy',\n            'long' => 'Date and time, e.g. d/m/yyyy hh:mm',\n            'short' => 'Date only, e.g. d/m/yyyy',\n            'time' => 'Time only, e.g. hh:mm',\n        );\n    }\n}\n\nclass FormattedDate\nextends FormattedLocalDate {\n    function asVar() {\n        return $this->getVar('system')->asVar();\n    }\n\n    function __toString() {\n        global $cfg;\n\n        $timezone = new DatetimeZone($this->timezone ?:\n                $cfg->getTimezone());\n        $options = array(\n                'timezone'  => $timezone->getName(),\n                'fromdb'    => $this->fromdb,\n                'format'    => $this->format\n                );\n\n        $val = (string) new FormattedLocalDate($this->date, $options);\n        if ($this->timezone && $this->format == 'long') {\n            try {\n                $this->datetime->setTimezone($timezone);\n                $val = sprintf('%s %s',\n                        $val, $this->datetime->format('T'));\n\n            } catch(Exception $ex) {\n                // ignore\n            }\n        }\n\n        return $val;\n    }\n\n    function getVar($what, $context=null) {\n        global $cfg;\n\n        if ($rv = parent::getVar($what, $context))\n            return $rv;\n\n        switch ($what) {\n        case 'user':\n            // Fetch $recipient from the context and find that user's time zone\n            if ($context && ($recipient = $context->getObj('recipient'))) {\n                $options = array(\n                        'timezone' => $recipient->getTimezone() ?: $cfg->getDefaultTimezone(),\n                        'user' => $recipient\n                        );\n                return new FormattedLocalDate($this->date, $options);\n            }\n            // Don't resolve the variable until correspondance is sent out\n            return false;\n        case 'system':\n            return new FormattedLocalDate($this->date, array(\n                        'timezone' => $cfg->getDefaultTimezone()\n                        )\n                    );\n        }\n    }\n\n    function getHumanize() {\n        return Format::relativeTime(Misc::db2gmtime($this->date));\n    }\n\n    static function getVarScope() {\n        return parent::getVarScope() + array(\n            'humanize' => 'Humanized time, e.g. about an hour ago',\n            'user' => array(\n                'class' => 'FormattedLocalDate', 'desc' => \"Localize to recipient's time zone and locale\"),\n            'system' => array(\n                'class' => 'FormattedLocalDate', 'desc' => 'Localize to system default time zone'),\n        );\n    }\n}\n?>\n", "<?php\n/*********************************************************************\n    class.thread.php\n\n    Thread of things!\n    XXX: Please DO NOT add any ticket related logic! use ticket class.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\ninclude_once(INCLUDE_DIR.'class.ticket.php');\ninclude_once(INCLUDE_DIR.'class.draft.php');\ninclude_once(INCLUDE_DIR.'class.role.php');\n\n//Ticket thread.\nclass Thread extends VerySimpleModel\nimplements Searchable {\n    static $meta = array(\n        'table' => THREAD_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'ticket' => array(\n                'constraint' => array(\n                    'object_type' => \"'T'\",\n                    'object_id' => 'Ticket.ticket_id',\n                ),\n            ),\n            'task' => array(\n                'constraint' => array(\n                    'object_type' => \"'A'\",\n                    'object_id' => 'Task.id',\n                ),\n            ),\n            'collaborators' => array(\n                'reverse' => 'Collaborator.thread',\n            ),\n\n            'referrals' => array(\n                'reverse' => 'ThreadReferral.thread',\n            ),\n            'entries' => array(\n                'reverse' => 'ThreadEntry.thread',\n            ),\n            'events' => array(\n                'reverse' => 'ThreadEvent.thread',\n                'broker' => 'ThreadEvents',\n            ),\n        ),\n    );\n\n    const MODE_STAFF = 1;\n    const MODE_CLIENT = 2;\n\n    var $_object;\n    var $_entries;\n    var $_collaborators; // Cache for collabs\n    var $_participants;\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getObjectId() {\n        return $this->object_id;\n    }\n\n    function getObjectType() {\n        return $this->object_type;\n    }\n\n    function getObject() {\n\n        if (!$this->_object)\n            $this->_object = ObjectModel::lookup(\n                    $this->getObjectId(), $this->getObjectType());\n\n        return $this->_object;\n    }\n\n    function getNumAttachments() {\n        return Attachment::objects()->filter(array(\n            'thread_entry__thread' => $this\n        ))->count();\n    }\n\n    function getNumEntries() {\n        return $this->entries->count();\n    }\n\n    function getEntries($criteria=false) {\n        if (!isset($this->_entries)) {\n            $this->_entries = $this->entries->annotate(array(\n                'has_attachments' => SqlAggregate::COUNT(SqlCase::N()\n                    ->when(array('attachments__inline'=>0), 1)\n                    ->otherwise(null)\n                ),\n            ));\n            $this->_entries->exclude(array('flags__hasbit'=>ThreadEntry::FLAG_HIDDEN));\n            if ($criteria)\n                $this->_entries->filter($criteria);\n        }\n        return $this->_entries;\n    }\n\n    // Referrals\n    function getNumReferrals() {\n        return $this->referrals->count();\n    }\n\n    function getReferrals() {\n        return $this->referrals;\n    }\n\n    // Collaborators\n    function getNumCollaborators() {\n        return $this->getCollaborators()->count();\n    }\n\n    function getNumActiveCollaborators() {\n\n        if (!isset($this->ht['active_collaborators']))\n            $this->ht['active_collaborators'] = count($this->getActiveCollaborators());\n\n        return $this->ht['active_collaborators'];\n    }\n\n    function getActiveCollaborators() {\n        $collaborators = $this->getCollaborators();\n        $active = array();\n        foreach ($collaborators as $c) {\n          if ($c->isActive())\n            $active[] = $c;\n        }\n        return $active;\n    }\n\n    function getCollaborators($criteria=array()) {\n\n        if ($this->_collaborators && !$criteria)\n            return $this->_collaborators;\n\n        $collaborators = $this->collaborators\n            ->filter(array('thread_id' => $this->getId()));\n\n        if (isset($criteria['isactive']))\n          $collaborators->filter(array('flags__hasbit'=>Collaborator::FLAG_ACTIVE));\n\n\n        // TODO: sort by name of the user\n        $collaborators->order_by('user__name');\n\n        if (!$criteria)\n            $this->_collaborators = $collaborators;\n\n        return $collaborators;\n    }\n\n    function isCollaborator($user) {\n        return $this->collaborators->findFirst(array(\n                    'user_id'     => $user->getId(),\n                    'thread_id'   => $this->getId()));\n    }\n\n    function addCollaborator($user, $vars, &$errors, $event=true) {\n        global $cfg, $thisstaff;\n\n        if (!$user)\n            return null;\n\n        if ($this->isCollaborator($user))\n            return false;\n\n        $vars = array_merge(array(\n                'threadId' => $this->getId(),\n                'userId' => $user->getId()), $vars ?: array());\n        if (!($c=Collaborator::add($vars, $errors)))\n            return null;\n\n        $c->active = true;\n        // Disable Agent Collabs (if configured) for User created tickets\n        if (!$thisstaff && $this->object_type === 'T'\n                && $cfg->disableAgentCollaborators()\n                && Staff::lookup($user->getDefaultEmailAddress()))\n            $c->active = false;\n\n        $this->_collaborators = null;\n\n        if ($event) {\n          $vars['add'] = true;\n          $this->logCollaboratorEvents($user, $vars);\n        }\n\n\n        return $c;\n    }\n\n    function updateCollaborators($vars, &$errors) {\n        global $thisstaff;\n\n        if (!$thisstaff) return;\n\n        //Deletes\n        if($vars['del'] && ($ids=array_filter($vars['del']))) {\n            $collabs = array();\n            foreach ($ids as $k => $cid) {\n                if (($c=Collaborator::lookup($cid))\n                        && ($c->getThreadId() == $this->getId())\n                        && $c->delete())\n                     $collabs[] = $c;\n\n                 $this->logCollaboratorEvents($c, $vars);\n            }\n        }\n\n        //statuses\n        $cids = null;\n        if($vars['cid'] && ($cids=array_filter($vars['cid']))) {\n            $this->collaborators->filter(array(\n                'thread_id' => $this->getId(),\n                'id__in' => $cids\n            ))->update(array(\n                'updated' => SqlFunction::NOW(),\n            ));\n\n            foreach ($vars['cid'] as $c) {\n              $collab = Collaborator::lookup($c);\n              if (($collab instanceof Collaborator)) {\n                $collab->setFlag(Collaborator::FLAG_ACTIVE, true);\n                $collab->save();\n              }\n            }\n        }\n\n        $inactive = $this->collaborators->filter(array(\n            'thread_id' => $this->getId(),\n            Q::not(array('id__in' => $cids ?: array(0)))\n        ));\n        if($inactive) {\n          foreach ($inactive as $i) {\n            $i->setFlag(Collaborator::FLAG_ACTIVE, false);\n            $i->save();\n          }\n          $inactive->update(array(\n              'updated' => SqlFunction::NOW(),\n          ));\n        }\n\n        unset($this->ht['active_collaborators']);\n        $this->_collaborators = null;\n\n        return true;\n    }\n\n    function logCollaboratorEvents($collaborator, $vars) {\n        $name = $collaborator->getName()->getOriginal();\n        $userId = (get_class($collaborator) == 'User')\n            ? $collaborator->getId() : $collaborator->user_id;\n        $action = $vars['del'] ? 'object.deleted' : 'object.created';\n        $addDel = $vars['del'] ? 'del' : 'add';\n\n        $this->getEvents()->log($this->getObject(), 'collab', array(\n            $addDel => array($userId => array('name' => $name))\n        ));\n        $type = array('type' => 'collab', $addDel => array($userId => array(\n                'name' => $name,\n                'src' => @$vars['source'],\n            )));\n        Signal::send($action, $this->getObject(), $type);\n    }\n\n    //UserList of participants (collaborators)\n    function getParticipants() {\n\n        if (!isset($this->_participants)) {\n            $list = new UserList();\n            if ($collabs = $this->getActiveCollaborators()) {\n                foreach ($collabs as $c)\n                    $list->add($c);\n            }\n\n            $this->_participants = $list;\n        }\n\n        return $this->_participants;\n    }\n\n    // MailingList of recipients (collaborators)\n    function getRecipients() {\n        $list = new MailingList();\n        if ($collabs = $this->getActiveCollaborators()) {\n            foreach ($collabs as $c)\n                $list->addCc($c);\n        }\n\n        return $list;\n    }\n\n    function getReferral($id, $type) {\n\n        return $this->referrals->findFirst(array(\n                    'object_id'     => $id,\n                    'object_type'   => $type));\n    }\n\n    function isReferred($to=null, $strict=false) {\n\n        if (is_null($to) || !$this->referrals)\n            return ($this->referrals && $this->referrals->count());\n\n        switch (true) {\n        case $to instanceof Staff:\n            // Referred to the staff\n            if ($this->getReferral($to->getId(),\n                        ObjectModel::OBJECT_TYPE_STAFF))\n                return true;\n\n            // Strict check only checks the Agent\n            if ($strict)\n                return false;\n\n            // Referred to staff's department\n            if ($this->referrals->findFirst(array(\n                   'object_id__in' => $to->getDepts(),\n                   'object_type'   => ObjectModel::OBJECT_TYPE_DEPT)))\n                return true;\n\n            // Referred to staff's teams\n            if ($to->getTeams() && $this->referrals->findFirst(array(\n                            'object_id__in' => $to->getTeams(),\n                            'object_type'   => ObjectModel::OBJECT_TYPE_TEAM\n                            )))\n                return true;\n\n            return false;\n            break;\n        case $to instanceof Team:\n            //Referred to a Team\n            return ($this->getReferral($to->getId(),\n                        ObjectModel::OBJECT_TYPE_TEAM));\n            break;\n        case $to instanceof Dept:\n            // Refered to the dept\n            return ($this->getReferral($to->getId(),\n                        ObjectModel::OBJECT_TYPE_DEPT));\n            break;\n        }\n\n        return false;\n    }\n\n    function refer($to) {\n\n        if ($this->isReferred($to, true))\n            return false;\n\n        $vars = array('thread_id' => $this->getId());\n        switch (true) {\n        case $to instanceof Staff:\n            $vars['object_id'] = $to->getId();\n            $vars['object_type'] = ObjectModel::OBJECT_TYPE_STAFF;\n            break;\n        case $to instanceof Team:\n            $vars['object_id'] = $to->getId();\n            $vars['object_type'] = ObjectModel::OBJECT_TYPE_TEAM;\n            break;\n        case $to instanceof Dept:\n            $vars['object_id'] = $to->getId();\n            $vars['object_type'] = ObjectModel::OBJECT_TYPE_DEPT;\n            break;\n        default:\n            return false;\n        }\n\n        return ThreadReferral::create($vars);\n    }\n\n    // Render thread\n    function render($type=false, $options=array()) {\n\n        $mode = $options['mode'] ?: self::MODE_STAFF;\n\n        // Register thread actions prior to rendering the thread.\n        if (!class_exists('tea_showemailheaders'))\n            include_once INCLUDE_DIR . 'class.thread_actions.php';\n\n        $entries = $this->getEntries();\n\n        if ($type && is_array($type)) {\n          $visibility = Q::all(array('type__in' => $type));\n\n          if ($type['user_id']) {\n            $visibility->add(array('user_id' => $type['user_id']));\n            $visibility->ored = true;\n          }\n\n          $entries->filter($visibility);\n        }\n\n        if ($options['sort'] && !strcasecmp($options['sort'], 'DESC'))\n            $entries->order_by('-id');\n\n        // Precache all the attachments on this thread\n        AttachmentFile::objects()->filter(array(\n            'attachments__thread_entry__thread__id' => $this->id\n        ))->all();\n\n        $events = $this->getEvents();\n        $inc = ($mode == self::MODE_STAFF) ? STAFFINC_DIR : CLIENTINC_DIR;\n        include $inc . 'templates/thread-entries.tmpl.php';\n    }\n\n    function getEntry($id) {\n        return ThreadEntry::lookup($id, $this->getId());\n    }\n\n    function getEvents() {\n        return $this->events;\n    }\n\n    /**\n     * postEmail\n     *\n     * After some security and sanity checks, attaches the body and subject\n     * of the message in reply to this thread item\n     *\n     * Parameters:\n     * mailinfo - (array) of information about the email, with at least the\n     *          following keys\n     *      - mid - (string) email message-id\n     *      - name - (string) personal name of email originator\n     *      - email - (string<email>) originating email address\n     *      - subject - (string) email subject line (decoded)\n     *      - body - (string) email message body (decoded)\n     */\n    function postEmail($mailinfo, $entry=null) {\n        // +==================+===================+=============+\n        // | Orig Thread-Type | Reply Thread-Type | Requires    |\n        // +==================+===================+=============+\n        // | *                | Message (M)       | From: Owner |\n        // | *                | Note (N)          | From: Staff |\n        // | Response (R)     | Message (M)       |             |\n        // | Message (M)      | Response (R)      | From: Staff |\n        // +------------------+-------------------+-------------+\n\n        if (!$object = $this->getObject()) {\n            // How should someone find this thread?\n            return false;\n        }\n        elseif ($object instanceof Ticket && (\n               !$mailinfo['staffId']\n            && $object->isClosed()\n            && !$object->isReopenable()\n        )) {\n            // Ticket is closed, not reopenable, and email was not submitted\n            // by an agent. Email cannot be submitted\n            return false;\n        }\n\n        $vars = array(\n            'mid' =>    $mailinfo['mid'],\n            'header' => $mailinfo['header'],\n            'poster' => $mailinfo['name'],\n            'origin' => 'Email',\n            'source' => 'Email',\n            'ip' =>     '',\n            'reply_to' => $entry,\n            'recipients' => $mailinfo['recipients'],\n            'thread_entry_recipients' => $mailinfo['thread_entry_recipients'],\n            'to-email-id' => $mailinfo['to-email-id'],\n            'autorespond' => !isset($mailinfo['passive']),\n        );\n\n        // XXX: Is this necessary?\n        if ($object instanceof Ticket)\n            $vars['ticketId'] = $object->getId();\n        if ($object instanceof Task)\n            $vars['taskId'] = $object->getId();\n\n        $errors = array();\n\n        if (isset($mailinfo['attachments']))\n            $vars['attachments'] = $mailinfo['attachments'];\n\n        $body = $mailinfo['message'];\n\n        // extra handling for determining Cc collabs\n        if ($mailinfo['email']) {\n          $staffSenderId = Staff::getIdByEmail($mailinfo['email']);\n\n          if (!$staffSenderId) {\n            $senderId = UserEmailModel::getIdByEmail($mailinfo['email']);\n            if ($senderId) {\n              $mailinfo['userId'] = $senderId;\n\n              if ($object instanceof Ticket && $senderId != $object->user_id && $senderId != $object->staff_id) {\n                $mailinfo['userClass'] = 'C';\n\n                $collaboratorId = Collaborator::getIdByUserId($senderId, $this->getId());\n                $collaborator = Collaborator::lookup($collaboratorId);\n\n                if ($collaborator && ($collaborator->isCc()))\n                  $vars['thread-type'] = 'M';\n              }\n            }\n          }\n        }\n\n        // Attempt to determine the user posting the entry and the\n        // corresponding entry type by the information determined by the\n        // mail parser (via the In-Reply-To header)\n        switch ($mailinfo['userClass']) {\n        case 'C': # Thread collaborator\n            $vars['flags'] = ThreadEntry::FLAG_COLLABORATOR;\n        case 'U': # Ticket owner\n            $vars['thread-type'] = 'M';\n            $vars['userId'] = $mailinfo['userId'];\n            break;\n\n        case 'A': # System administrator\n        case 'S': # Staff member (agent)\n            $vars['thread-type'] = 'N';\n            $vars['staffId'] = $mailinfo['staffId'];\n            if ($vars['staffId'])\n                $vars['poster'] = Staff::lookup($mailinfo['staffId']);\n            break;\n\n        // The user type was not identified by the mail parsing system. It\n        // is likely that the In-Reply-To and References headers were not\n        // properly brokered by the user's mail client. Use the old logic to\n        // determine the post type.\n        default:\n            // Disambiguate if the user happens also to be a staff member of\n            // the system. The current ticket owner should _always_ post\n            // messages instead of notes or responses\n            if ($object instanceof Ticket\n                && strcasecmp($mailinfo['email'], $object->getEmail()) == 0\n            ) {\n                $vars['thread-type'] = 'M';\n                $vars['userId'] = $object->getUserId();\n            }\n            // Consider collaborator role (disambiguate staff members as\n            // collaborators). Normally, the block above should match based\n            // on the Referenced message-id header\n            elseif ($C = $this->collaborators->filter(array(\n                'user__emails__address' => $mailinfo['email']\n            ))->first()) {\n                $vars['thread-type'] = 'M';\n                // XXX: There's no way that mailinfo[userId] would be set\n                $vars['userId'] = $mailinfo['userId'] ?: $C->getUserId();\n                $vars['flags'] = ThreadEntry::FLAG_COLLABORATOR;\n            }\n            // Don't process the email -- it came FROM this system\n            elseif (Email::getIdByEmail($mailinfo['email'])) {\n                return false;\n            }\n        }\n\n        // Ensure we record the name of the person posting\n        $vars['poster'] = $vars['poster']\n            ?: $mailinfo['name'] ?: $mailinfo['email'];\n\n        // TODO: Consider security constraints\n        if (!$vars['thread-type']) {\n            //XXX: Are we potentially leaking the email address to\n            // collaborators?\n            // Try not to destroy the format of the body\n            $header = sprintf(\n                _S('Received From: %1$s <%2$s>') . \"\\n\\n\",\n                $mailinfo['name'], $mailinfo['email']);\n            if ($body instanceof HtmlThreadEntryBody)\n                $header = nl2br(Format::htmlchars($header));\n            // Add the banner to the top of the message\n            if ($body instanceof ThreadEntryBody)\n                $body->prepend($header);\n            $vars['userId'] = 0; //Unknown user! //XXX: Assume ticket owner?\n            $vars['thread-type'] = 'M';\n        }\n\n        if ($mailinfo['system_emails']\n                && ($t = $this->getObject())\n                && $t instanceof Ticket)\n            $t->systemReferral($mailinfo['system_emails']);\n\n        switch ($vars['thread-type']) {\n        case 'M':\n            $vars['message'] = $body;\n            if ($object instanceof Threadable) {\n                $entry = $object->postThreadEntry('M', $vars);\n                if ($this->getObjectType() == 'C') {\n                    if ($object->isChild()) {\n                        $parent = Ticket::lookup($object->getPid());\n                        ThreadEntry::setExtra(array($entry), array('thread' => $this->getId()), $parent->getThread()->getId());\n                    }\n                }\n                return $entry;\n            }\n            elseif ($this instanceof ObjectThread)\n                return $this->addMessage($vars, $errors);\n            break;\n\n        case 'N':\n            $vars['note'] = $body;\n            if ($object instanceof Threadable)\n                return $object->postThreadEntry('N', $vars);\n            elseif ($this instanceof ObjectThread)\n                return $this->addNote($vars, $errors);\n            break;\n        }\n\n        throw new Exception('Unable to continue thread via email.');\n\n        // Currently impossible, but indicate that this thread object could\n        // not append the incoming email.\n        return false;\n    }\n\n    function deleteAttachments() {\n        $deleted = Attachment::objects()->filter(array(\n            'thread_entry__thread' => $this,\n        ))->delete();\n\n        if ($deleted)\n            AttachmentFile::deleteOrphans();\n\n        return $deleted;\n    }\n\n    function removeCollaborators() {\n        return Collaborator::objects()\n            ->filter(array('thread_id'=>$this->getId()))\n            ->delete();\n    }\n\n    function setExtra($mergedThread, $info='') {\n\n        if ($info && $info['extra']) {\n            $extra = json_decode($info['extra'], true);\n            $entries = ThreadEntry::objects()->filter(array('thread_id' => $info['threadId']));\n            foreach ($entries as $entry)\n                $entry->saveExtra($entry, array('thread' => $info['threadId']), $mergedThread->getId());\n        } else\n            ThreadEntry::setExtra($this->getEntries(), array('thread' => $this->getId()), $mergedThread->getId());\n\n        $this->object_type = 'C';\n        $number = Ticket::objects()->filter(array('ticket_id'=>$this->getObjectId()))->values_flat('number')->first();\n        $this->extra = json_encode(array('ticket_id' => $mergedThread->getObjectId(), 'number' => $extra['number'] ?: $number[0]));\n        $this->save();\n    }\n\n    /**\n     * Function: lookupByEmailHeaders\n     *\n     * Attempt to locate a thread by the email headers. It should be\n     * considered a secondary lookup to ThreadEntry::lookupByEmailHeaders(),\n     * which should find an actual thread entry, which should be possible\n     * for all email communcation which is associated with a thread entry.\n     * The only time where this is useful is for threads which triggered\n     * email communication without a thread entry, for instance, like\n     * tickets created without an initial message.\n     */\n    function lookupByEmailHeaders(&$mailinfo) {\n        $possibles = array();\n        foreach (array('mid', 'in-reply-to', 'references') as $header) {\n            $matches = array();\n            if (!isset($mailinfo[$header]) || !$mailinfo[$header])\n                continue;\n            // Header may have multiple entries (usually separated by\n            // spaces ( )\n            elseif (!preg_match_all('/<([^>@]+@[^>]+)>/', $mailinfo[$header],\n                        $matches))\n                continue;\n\n            // The References header will have the most recent message-id\n            // (parent) on the far right.\n            // @see rfc 1036, section 2.2.5\n            // @see http://www.jwz.org/doc/threading.html\n            $possibles = array_merge($possibles, array_reverse($matches[1]));\n        }\n\n        // Add the message id if it is embedded in the body\n        $match = array();\n        if (preg_match('`(?:class=\"mid-|Ref-Mid: )([^\"\\s]*)(?:$|\")`',\n                $mailinfo['message'], $match)\n            && !in_array($match[1], $possibles)\n        ) {\n            $possibles[] = $match[1];\n        }\n\n        foreach ($possibles as $mid) {\n            // Attempt to detect the ticket and user ids from the\n            // message-id header. If the message originated from\n            // osTicket, the Mailer class can break it apart. If it came\n            // from this help desk, the 'loopback' property will be set\n            // to true.\n            $mid_info = Mailer::decodeMessageId($mid);\n            if (!$mid_info || !$mid_info['loopback'])\n                continue;\n            if (isset($mid_info['uid'])\n                && @$mid_info['threadId']\n                && ($t = Thread::lookup($mid_info['threadId']))\n            ) {\n                if (@$mid_info['userId']) {\n                    $mailinfo['userId'] = $mid_info['userId'];\n                }\n                elseif (@$mid_info['staffId']) {\n                    $mailinfo['staffId'] = $mid_info['staffId'];\n                }\n                // ThreadEntry was positively identified\n                return $t;\n            }\n        }\n\n        return null;\n    }\n\n    static function getSearchableFields() {\n        return array(\n            'lastmessage' => new DatetimeField(array(\n                'label' => __('Last Message'),\n            )),\n            'lastresponse' => new DatetimeField(array(\n                'label' => __('Last Response'),\n            )),\n        );\n    }\n\n    static function supportsCustomData() {\n        false;\n    }\n\n    function delete() {\n\n        //Self delete\n        if (!parent::delete())\n            return false;\n\n        // Clear email meta data (header..etc)\n        ThreadEntryEmailInfo::objects()\n            ->filter(array('thread_entry__thread' => $this))\n            ->update(array('headers' => null));\n\n        // Mass delete entries\n        $this->deleteAttachments();\n        $this->removeCollaborators();\n\n        $this->entries->delete();\n\n        // Null out the events\n        $this->events->update(array('thread_id' => 0));\n\n        return true;\n    }\n\n    static function create($vars=false) {\n        $inst = new static($vars);\n        $inst->created = SqlFunction::NOW();\n        return $inst;\n    }\n}\n\nclass ThreadEntryEmailInfo extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_ENTRY_EMAIL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'thread_entry' => array(\n                'constraint' => array('thread_entry_id' => 'ThreadEntry.id'),\n            ),\n        ),\n    );\n}\n\nclass ThreadEntryMergeInfo extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_ENTRY_MERGE_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'thread_entry' => array(\n                'constraint' => array('thread_entry_id' => 'ThreadEntry.id'),\n            ),\n        ),\n    );\n}\n\nclass ThreadEntry extends VerySimpleModel\nimplements TemplateVariable {\n    static $meta = array(\n        'table' => THREAD_ENTRY_TABLE,\n        'pk' => array('id'),\n        'select_related' => array('staff', 'user', 'email_info'),\n        'ordering' => array('created', 'id'),\n        'joins' => array(\n            'thread' => array(\n                'constraint' => array('thread_id' => 'Thread.id'),\n            ),\n            'parent' => array(\n                'constraint' => array('pid' => 'ThreadEntry.id'),\n                'null' => true,\n            ),\n            'children' => array(\n                'reverse' => 'ThreadEntry.parent',\n            ),\n            'email_info' => array(\n                'reverse' => 'ThreadEntryEmailInfo.thread_entry',\n                'list' => false,\n            ),\n            'merge_info' => array(\n                'reverse' => 'ThreadEntryMergeInfo.thread_entry',\n                'list' => false,\n            ),\n            'attachments' => array(\n                'reverse' => 'Attachment.thread_entry',\n                'null' => true,\n            ),\n            'staff' => array(\n                'constraint' => array('staff_id' => 'Staff.staff_id'),\n                'null' => true,\n            ),\n            'user' => array(\n                'constraint' => array('user_id' => 'User.id'),\n                'null' => true,\n            ),\n        ),\n    );\n\n    const FLAG_ORIGINAL_MESSAGE         = 0x0001;\n    const FLAG_EDITED                   = 0x0002;\n    const FLAG_HIDDEN                   = 0x0004;\n    const FLAG_GUARDED                  = 0x0008;   // No replace on edit\n    const FLAG_RESENT                   = 0x0010;\n\n    const FLAG_COLLABORATOR             = 0x0020;   // Message from collaborator\n    const FLAG_BALANCED                 = 0x0040;   // HTML does not need to be balanced on ::display()\n    const FLAG_SYSTEM                   = 0x0080;   // Entry is a system note.\n    const FLAG_REPLY_ALL                = 0x00100;  // Agent response, reply all\n    const FLAG_REPLY_USER               = 0x00200;  // Agent response, reply to User\n    const FLAG_CHILD                    = 0x00400;  // Entry is from a child Ticket\n\n    const PERM_EDIT     = 'thread.edit';\n\n    var $_headers;\n    var $_body;\n    var $_thread;\n    var $_actions;\n    var $is_autoreply;\n    var $is_bounce;\n\n    static protected $perms = array(\n        self::PERM_EDIT => array(\n            'title' => /* @trans */ 'Edit Thread',\n            'desc'  => /* @trans */ 'Ability to edit thread items of other agents',\n        ),\n    );\n\n    // Thread entry types\n    static protected $types = array(\n            'M' => 'message',\n            'R' => 'response',\n            'N' => 'note',\n    );\n\n    function getTypeName() {\n      return self::$types[$this->type];\n    }\n\n    function postEmail($mailinfo) {\n        global $ost;\n\n        if (!($thread = $this->getThread()))\n            // Kind of hard to continue a discussion without a thread ...\n            return false;\n\n        elseif ($this->getEmailMessageId() == $mailinfo['mid'])\n            // Reporting success so the email can be moved or deleted.\n            return true;\n\n        // Mail sent by this system will have a predictable message-id\n        // If this incoming mail matches the code, then it very likely\n        // originated from this system and looped\n        $info = Mailer::decodeMessageId($mailinfo['mid']);\n        if ($info && $info['loopback']) {\n            // This mail was sent by this system. It was received due to\n            // some kind of mail delivery loop. It should not be considered\n            // a response to an existing thread entry\n            if ($ost)\n                $ost->log(LOG_ERR, _S('Email loop detected'), sprintf(\n                _S('It appears as though &lt;%s&gt; is being used as a forwarded or fetched email account and is also being used as a user / system account. Please correct the loop or seek technical assistance.'),\n                $mailinfo['email']),\n\n                // This is quite intentional -- don't continue the loop\n                false,\n                // Force the message, even if logging is disabled\n                true);\n            return $this;\n        }\n\n        return $thread->postEmail($mailinfo, $this);\n    }\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getPid() {\n        return $this->get('pid', 0);\n    }\n\n    function getParent() {\n        return $this->parent;\n    }\n\n    function getType() {\n        return $this->type;\n    }\n\n    function getSource() {\n        return $this->source;\n    }\n\n    function getPoster() {\n        return $this->poster;\n    }\n\n    function getTitle() {\n        return $this->title;\n    }\n\n    function getBody() {\n        if (!isset($this->_body)) {\n            $body = $this->body;\n            if ($body == null && $this->getNumAttachments()) {\n                $attachments = Attachment::objects()\n                   ->filter(array(\n                               'inline' => 1,\n                               'object_id' => $this->getId(),\n                               'type' => ObjectModel::OBJECT_TYPE_THREAD,\n                               'file__type__in' => array('text/html','text/plain'))\n                           );\n                foreach ($attachments as $a)\n                    if ($a->inline && ($f=$a->getFile()))\n                        $body .= $f->getData();\n            }\n            $this->_body = ThreadEntryBody::fromFormattedText($body, $this->format,\n                array('balanced' => $this->hasFlag(self::FLAG_BALANCED))\n            );\n        }\n        return $this->_body;\n    }\n\n    function setBody($body) {\n        global $cfg;\n\n        if (!$body instanceof ThreadEntryBody) {\n            if ($cfg->isRichTextEnabled())\n                $body = new HtmlThreadEntryBody($body);\n            else\n                $body = new TextThreadEntryBody($body);\n        }\n\n        $this->format = $body->getType();\n        $this->body = (string) $body;\n        return $this->save();\n    }\n\n    function getMessage() {\n        return $this->getBody();\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getNumAttachments() {\n        return $this->attachments->count();\n    }\n\n    function getEmailMessageId() {\n        if ($this->email_info)\n            return $this->email_info->mid;\n    }\n\n    function getEmailHeaderArray() {\n        require_once(INCLUDE_DIR.'class.mailparse.php');\n\n        if (!isset($this->_headers) && $this->email_info\n            && isset($this->email_info->headers)\n        ) {\n            $this->_headers = Mail_Parse::splitHeaders($this->email_info->headers);\n        }\n        return $this->_headers;\n    }\n\n    function getEmailReferences($include_mid=true) {\n        $references = '';\n        $headers = self::getEmailHeaderArray();\n        if (isset($headers['References']) && $headers['References'])\n            $references = $headers['References'].\" \";\n        if ($include_mid && ($mid = $this->getEmailMessageId()))\n            $references .= $mid;\n        return $references;\n    }\n\n    /**\n     * Retrieve a list of all the recients of this message if the message\n     * was received via email.\n     *\n     * Returns:\n     * (array<RFC_822>) list of recipients parsed with the Mail/RFC822\n     * address parsing utility. Returns an empty array if the message was\n     * not received via email.\n     */\n    function getAllEmailRecipients() {\n        $headers = self::getEmailHeaderArray();\n        $recipients = array();\n        if (!$headers)\n            return $recipients;\n\n        foreach (array('To', 'Cc') as $H) {\n            if (!isset($headers[$H]))\n                continue;\n\n            if (!($all = Mail_Parse::parseAddressList($headers[$H])))\n                continue;\n\n            $recipients = array_merge($recipients, $all);\n        }\n        return $recipients;\n    }\n\n    /**\n     * Recurse through the ancestry of this thread entry to find the first\n     * thread entry which cites a email Message-ID field.\n     *\n     * Returns:\n     * <ThreadEntry> or null if neither this thread entry nor any of its\n     * ancestry contains an email header with an email Message-ID header.\n     */\n    function findOriginalEmailMessage() {\n        $P = $this;\n        while (!$P->getEmailMessageId()\n            && ($P = $P->getParent()));\n        return $P;\n    }\n\n    function getUIDFromEmailReference($ref) {\n\n        $info = unpack('Vtid/Vuid',\n                Base32::decode(strtolower(substr($ref, -13))));\n\n        if ($info && $info['tid'] == $this->getId())\n            return $info['uid'];\n\n    }\n\n    function getThreadId() {\n        return $this->thread_id;\n    }\n\n    function getThread() {\n\n        if (!isset($this->_thread) && $this->thread_id)\n            // TODO: Consider typing the thread based on its type field\n            $this->_thread = ObjectThread::lookup($this->getThreadId());\n\n        return $this->_thread;\n    }\n\n    function getStaffId() {\n        return isset($this->staff_id) ? $this->staff_id : 0;\n    }\n\n    function getStaff() {\n        return $this->staff;\n    }\n\n    function getUserId() {\n        return isset($this->user_id) ? $this->user_id : 0;\n    }\n\n    function getUser() {\n        return $this->user;\n    }\n\n    function getEditor() {\n        static $types = array(\n            'U' => 'User',\n            'S' => 'Staff',\n        );\n        if (!isset($types[$this->editor_type]))\n            return null;\n\n        return $types[$this->editor_type]::lookup($this->editor);\n    }\n\n    function getName() {\n        if ($this->staff_id)\n            return $this->staff->getName();\n        if ($this->user_id)\n            return $this->user->getName();\n\n        return $this->poster;\n    }\n\n    function getEmailHeader() {\n        if ($this->email_info)\n            return $this->email_info->headers;\n    }\n\n    function isAutoReply() {\n\n        if (!isset($this->is_autoreply))\n            $this->is_autoreply = $this->getEmailHeaderArray()\n                ?  TicketFilter::isAutoReply($this->getEmailHeaderArray()) : false;\n\n        return $this->is_autoreply;\n    }\n\n    function isBounce() {\n\n        if (!isset($this->is_bounce))\n            $this->is_bounce = $this->getEmailHeaderArray()\n                ? TicketFilter::isBounce($this->getEmailHeaderArray()) : false;\n\n        return $this->is_bounce;\n    }\n\n    function isBounceOrAutoReply() {\n        return ($this->isAutoReply() || $this->isBounce());\n    }\n\n    function hasFlag($flag) {\n        return ($this->get('flags', 0) & $flag) != 0;\n    }\n    function clearFlag($flag) {\n        return $this->set('flags', $this->get('flags') & ~$flag);\n    }\n    function setFlag($flag) {\n        return $this->set('flags', $this->get('flags') | $flag);\n    }\n\n    function isSystem() {\n        return $this->hasFlag(self::FLAG_SYSTEM);\n    }\n\n    protected function normalizeFileInfo($files, $add_error=true) {\n        static $error_descriptions = array(\n            UPLOAD_ERR_INI_SIZE     => /* @trans */ 'File is too large',\n            UPLOAD_ERR_FORM_SIZE    => /* @trans */ 'File is too large',\n            UPLOAD_ERR_PARTIAL      => 'The uploaded file was only partially uploaded.',\n            UPLOAD_ERR_NO_TMP_DIR   => 'Missing a temporary folder.',\n            UPLOAD_ERR_CANT_WRITE   => 'Failed to write file to disk.',\n            UPLOAD_ERR_EXTENSION    => 'A PHP extension stopped the file upload.',\n        );\n\n        if (!is_array($files))\n            $files = array($files);\n\n        $ids = array();\n        foreach ($files as $id => $info) {\n            $F = array('inline' => is_array($info) && @$info['inline']);\n            $AF = null;\n\n            if ($info instanceof AttachmentFile)\n                $fileId = $info->getId();\n            elseif (is_array($info) && isset($info['id']))\n                $fileId = $info['id'];\n            elseif ($AF = AttachmentFile::create($info))\n                $fileId = $AF->getId();\n            elseif ($add_error) {\n                $error = $info['error']\n                    ?: sprintf(_S('Unable to save attachment - %s'),\n                        $info['name'] ?: $info['id']);\n                if (is_numeric($error) && isset($error_descriptions[$error])) {\n                    $error = sprintf(_S('Error #%1$d: %2$s'), $error,\n                        _S($error_descriptions[$error]));\n                }\n                // No need to log the missing-file error number\n                if ($error != UPLOAD_ERR_NO_FILE\n                    && ($thread = $this->getThread())\n                ) {\n                    // Log to the thread directly, since alerts should be\n                    // suppressed and this is defintely a system message\n                    $thread->addNote(array(\n                        'title' => _S('File Import Error'),\n                        'note' => new TextThreadEntryBody($error),\n                        'poster' => 'SYSTEM',\n                        'staffId' => 0,\n                    ));\n                }\n                continue;\n            }\n\n            $F['id'] = $fileId;\n\n            if (is_string($info))\n                $F['name'] = $info;\n            if (isset($AF))\n                $F['file'] = $AF;\n\n            // Add things like the `key` field, but don't change current\n            // keys of the file array\n            if (is_array($info))\n                $F += $info;\n\n            // Key is required for CID rewriting in the body\n            if (!isset($F['key']) && ($AF = AttachmentFile::lookup($F['id'])))\n                $F['key'] = $AF->key;\n\n            $ids[] = $F;\n        }\n        return $ids;\n    }\n\n   /*\n    Save attachment to the DB.\n    @file is a mixed var - can be ID or file hashtable.\n    */\n    function createAttachment($file, $name=false) {\n        $att = new Attachment(array(\n            'type' => 'H',\n            'object_id' => $this->getId(),\n            'file_id' => $file['id'],\n            'inline' => $file['inline'] ? 1 : 0,\n        ));\n\n        // Record varying file names in the attachment record\n        if (is_array($file) && isset($file['name'])) {\n            $filename = $file['name'];\n        }\n        elseif (is_string($name)) {\n            $filename = $name;\n        }\n\n        if ($filename) {\n            // This should be a noop since the ORM caches on PK\n            $F = @$file['file'] ?: AttachmentFile::lookup($file['id']);\n            // XXX: This is not Unicode safe\n            // TODO: fix name lookup\n            if ($F && strcasecmp($F->name, $filename) !== 0)\n                $att->name = $filename;\n        }\n\n        if (!$att->save())\n            return false;\n        return $att;\n    }\n\n    function createAttachments(array $files) {\n        $attachments = array();\n        foreach ($files as $info) {\n           if ($A = $this->createAttachment($info, @$info['name'] ?: false))\n               $attachments[] = $A;\n        }\n        return $attachments;\n    }\n\n    function getAttachments() {\n        return $this->attachments;\n    }\n\n    function getAttachmentUrls() {\n        $json = array();\n        foreach ($this->attachments as $att) {\n            $json[$att->file->getKey()] = array(\n                'download_url' => $att->file->getDownloadUrl(),\n                'filename' => $att->getFilename(),\n            );\n        }\n\n        return $json;\n    }\n\n    function getAttachmentsLinks($file='attachment.php', $target='_blank', $separator=' ') {\n        // TODO: Move this to the respective UI templates\n\n        $str='';\n        foreach ($this->attachments as $att ) {\n            if ($att->inline) continue;\n            $size = '';\n            if ($att->file->size)\n                $size=sprintf('<em>(%s)</em>', Format::file_size($att->file->size));\n\n            $str .= sprintf(\n                '<a class=\"Icon file no-pjax\" href=\"%s\" target=\"%s\">%s</a>%s&nbsp;%s',\n                $att->file->getDownloadUrl(), $target,\n                Format::htmlchars($att->file->name), $size, $separator);\n        }\n\n        return $str;\n    }\n\n    /* save email info\n     * TODO: Refactor it to include outgoing emails on responses.\n     */\n\n    function saveEmailInfo($vars) {\n\n        // Don't save empty message ID\n        if (!$vars || !$vars['mid'])\n            return 0;\n\n        $this->ht['email_mid'] = $vars['mid'];\n\n        $header = false;\n        if (isset($vars['header']))\n            $header = $vars['header'];\n        self::logEmailHeaders($this->getId(), $vars['mid'], $header);\n    }\n\n    /* static */\n    function logEmailHeaders($id, $mid, $header=false) {\n\n        if (!$id || !$mid)\n            return false;\n\n        $this->email_info = new ThreadEntryEmailInfo(array(\n            'thread_entry_id' => $id,\n            'mid' => $mid,\n        ));\n\n        if ($header)\n            $this->email_info->headers = trim($header);\n\n        return $this->email_info->save();\n    }\n\n    function getActivity() {\n        return new ThreadActivity('', '');\n    }\n\n    /* variables */\n\n    function __toString() {\n        return (string) $this->getBody();\n    }\n\n    // TemplateVariable interface\n    function asVar() {\n        return (string) $this->getBody()->display('email');\n    }\n\n    function getVar($tag) {\n        switch(strtolower($tag)) {\n            case 'create_date':\n                return new FormattedDate($this->getCreateDate());\n            case 'update_date':\n                return new FormattedDate($this->getUpdateDate());\n            case 'files':\n                throw new OOBContent(OOBContent::FILES, $this->attachments->all());\n        }\n    }\n\n    static function getVarScope() {\n        return array(\n          'files' => __('Attached files'),\n          'body' => __('Message body'),\n          'create_date' => array(\n              'class' => 'FormattedDate', 'desc' => __('Date created'),\n          ),\n          'ip_address' => __('IP address of remote user, for web submissions'),\n          'poster' => __('Submitter of the thread item'),\n          'staff' => array(\n            'class' => 'Staff', 'desc' => __('Agent posting the note or response'),\n          ),\n          'title' => __('Subject, if any'),\n          'user' => array(\n            'class' => 'User', 'desc' => __('User posting the message'),\n          ),\n        );\n    }\n\n    /**\n     * Parameters:\n     * mailinfo (hash<String>) email header information. Must include keys\n     *  - \"mid\" => Message-Id header of incoming mail\n     *  - \"in-reply-to\" => Message-Id the email is a direct response to\n     *  - \"references\" => List of Message-Id's the email is in response\n     *  - \"subject\" => Find external ticket number in the subject line\n     *\n     *  seen (by-ref:bool) a flag that will be set if the message-id was\n     *      positively found, indicating that the message-id has been\n     *      previously seen. This is useful if no thread-id is associated\n     *      with the email (if it was rejected for instance).\n     */\n    function lookupByEmailHeaders(&$mailinfo, &$seen=false) {\n        // Search for messages using the References header, then the\n        // in-reply-to header\n        if ($mailinfo['mid'] &&\n                ($entry = ThreadEntry::objects()\n                 ->filter(array('email_info__mid' => $mailinfo['mid']))\n                 ->order_by(false)\n                 ->first()\n                 )\n         ) {\n            $seen = true;\n            if ($mailinfo['system_emails']\n                    && ($t = $entry->getThread()->getObject())\n                    && $t instanceof Ticket)\n                $t->systemReferral($mailinfo['system_emails']);\n\n            return $entry;\n        }\n\n        $possibles = array();\n        foreach (array('mid', 'in-reply-to', 'references') as $header) {\n            $matches = array();\n            if (!isset($mailinfo[$header]) || !$mailinfo[$header])\n                continue;\n            // Header may have multiple entries (usually separated by\n            // spaces ( )\n            elseif (!preg_match_all('/<([^>@]+@[^>]+)>/', $mailinfo[$header],\n                        $matches))\n                continue;\n\n            // The References header will have the most recent message-id\n            // (parent) on the far right.\n            // @see rfc 1036, section 2.2.5\n            // @see http://www.jwz.org/doc/threading.html\n            $possibles = array_merge($possibles, array_reverse($matches[1]));\n        }\n\n        // Add the message id if it is embedded in the body\n        $match = array();\n        if (preg_match('`(?:class=\"mid-|Ref-Mid: )([^\"\\s]*)(?:$|\")`',\n                (string) $mailinfo['message'], $match)\n            && !in_array($match[1], $possibles)\n        ) {\n            $possibles[] = $match[1];\n        }\n\n        $thread = null;\n        foreach ($possibles as $mid) {\n            // Attempt to detect the ticket and user ids from the\n            // message-id header. If the message originated from\n            // osTicket, the Mailer class can break it apart. If it came\n            // from this help desk, the 'loopback' property will be set\n            // to true.\n            $mid_info = Mailer::decodeMessageId($mid);\n            if (!$mid_info || !$mid_info['loopback'])\n                continue;\n            if (isset($mid_info['uid'])\n                && @$mid_info['entryId']\n                && ($t = ThreadEntry::lookup($mid_info['entryId']))\n                && ($t->thread_id == $mid_info['threadId'])\n            ) {\n                if (@$mid_info['userId']) {\n                    $mailinfo['userId'] = $mid_info['userId'];\n\n                    $user = User::lookupByEmail($mailinfo['email']);\n                    if ($user && $mailinfo['userId'] != $user->getId())\n                      $mailinfo['userId'] = $user->getId();\n                }\n                elseif (@$mid_info['staffId']) {\n                    $mailinfo['staffId'] = $mid_info['staffId'];\n\n                    $staffId = Staff::getIdByEmail($mailinfo['email']);\n                    if ($staffId && $mailinfo['staffId'] != $staffId)\n                      $mailinfo['staffId'] = $staffId;\n                }\n\n                // Capture the user type\n                if (@$mid_info['userClass'])\n                    $mailinfo['userClass'] = $mid_info['userClass'];\n\n\n                // ThreadEntry was positively identified\n                return $t;\n            }\n        }\n        // Passive threading - listen mode\n        if (count($possibles)\n                && ($entry = ThreadEntry::objects()\n                    ->filter(array('email_info__mid__in' => array_map(\n                        function ($a) { return \"<$a>\"; },\n                    $possibles)))\n                    ->first()\n                )\n         ) {\n            $mailinfo['passive'] = true;\n            return $entry;\n        }\n\n        // Search for ticket by the [#123456] in the subject line\n        // This is the last resort -  emails must match to avoid message\n        // injection by third-party.\n        $subject = $mailinfo['subject'];\n        $match = array();\n        if ($subject\n                && $mailinfo['email']\n                // Required `#` followed by one or more of\n                //      punctuation (-) then letters, numbers, and symbols\n                // (Try not to match closing punctuation (`]`) in [#12345])\n                && preg_match(\"/#((\\p{P}*[^\\p{C}\\p{Z}\\p{P}]+)+)/u\", $subject, $match)\n                //Lookup by ticket number\n                && ($ticket = Ticket::lookupByNumber($match[1]))\n                //Lookup the user using the email address\n                && ($user = User::lookup(array('emails__address' => $mailinfo['email'])))) {\n            //We have a valid ticket and user\n            if ($ticket->getUserId() == $user->getId() //owner\n                    ||  ($c = Collaborator::lookup( // check if collaborator\n                            array('user_id' => $user->getId(),\n                                  'thread_id' => $ticket->getThreadId())))) {\n\n                $mailinfo['userId'] = $user->getId();\n                return $ticket->getLastMessage();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Find a thread entry from a message-id created from the\n     * ::asMessageId() method.\n     *\n     * *DEPRECATED* use Mailer::decodeMessageId() instead\n     */\n    function lookupByRefMessageId($mid, $from) {\n        global $ost;\n\n        $mid = trim($mid, '<>');\n        list($ver, $ids, $mails) = explode('$', $mid, 3);\n\n        // Current version is <null>\n        if ($ver !== '')\n            return false;\n\n        $ids = @unpack('Vthread', base64_decode($ids));\n        if (!$ids || !$ids['thread'])\n            return false;\n\n        $entry = ThreadEntry::lookup($ids['thread']);\n        if (!$entry)\n            return false;\n\n        // Compute the value to be compared from $mails (which used to be in\n        // ThreadEntry::asMessageId() (#nolint)\n        $domain = md5($ost->getConfig()->getURL());\n        $ticket = $entry->getThread()->getObject();\n        if (!$ticket instanceof Ticket)\n            return false;\n\n        $check = sprintf('%s@%s',\n            substr(md5($from . $ticket->getNumber() . $ticket->getId()), -10),\n            substr($domain, -10)\n        );\n\n        if ($check != $mails)\n            return false;\n\n        return $entry;\n    }\n\n    function setExtra($entries, $info=NULL, $thread_id=NULL) {\n        foreach ($entries as $entry) {\n            $mergeInfo = ThreadEntryMergeInfo::objects()\n                ->filter(array('thread_entry_id'=>$entry->getId()))\n                ->values_flat('thread_entry_id')\n                ->first();\n            if (!$mergeInfo) {\n                $mergeInfo = new ThreadEntryMergeInfo(array(\n                    'thread_entry_id' => $entry->getId(),\n                    'data' => json_encode($info),\n                ));\n                $mergeInfo->save();\n            }\n            $entry->saveExtra($info, $thread_id);\n        }\n\n    }\n\n    function saveExtra($info=NULL, $thread_id=NULL) {\n        $this->setFlag(ThreadEntry::FLAG_CHILD, true);\n        $this->thread_id = $thread_id;\n        $this->save();\n    }\n\n    function getMergeData() {\n        return $this->merge_info ? $this->merge_info->data : null;\n    }\n\n    function sortEntries($entries, $ticket) {\n        $buckets = array();\n        $childEntries = array();\n        foreach ($entries as $i=>$E) {\n            if ($ticket) {\n                $extra = json_decode($E->getMergeData(), true);\n                //separated entries\n                if ($ticket->getMergeType() == 'separate') {\n                    if ($extra['thread']) {\n                        $childEntries[$E->getId()] = $E;\n                        if ($childEntries) {\n                            uasort($childEntries, function ($a, $b) { //sort by child ticket\n                                $aExtra = json_decode($a->getMergeData(), true);\n                                $bExtra = json_decode($b->getMergeData(), true);\n                                if ($aExtra['thread'] != $bExtra[\"thread\"])\n                                    return $bExtra[\"thread\"] - $aExtra['thread'];\n                            });\n                            uasort($childEntries, function($a, $b) { //sort by child created date\n                                $aExtra = json_decode($a->getMergeData(), true);\n                                $bExtra = json_decode($b->getMergeData(), true);\n                                if ($aExtra['thread'] == $bExtra[\"thread\"])\n                                    return strtotime($a->created) - strtotime($b->created);\n                            });\n                        }\n                    } else\n                        $buckets[$E->getId()] = $E;\n                } else\n                    $buckets[$E->getId()] = $E;\n            } else //we may be looking at a task\n                $buckets[$E->getId()] = $E;\n        }\n\n        if ($ticket && $ticket->getMergeType() == 'separate')\n            $buckets = $buckets + $childEntries;\n\n        return $buckets;\n    }\n\n    //new entry ... we're trusting the caller to check validity of the data.\n    static function create($vars=false) {\n        global $cfg;\n\n        assert(is_array($vars));\n\n        //Must have...\n        if (!$vars['threadId'] || !$vars['type'])\n            return false;\n\n        if (!$vars['body'] instanceof ThreadEntryBody) {\n            if ($cfg->isRichTextEnabled())\n                $vars['body'] = new HtmlThreadEntryBody($vars['body']);\n            else\n                $vars['body'] = new TextThreadEntryBody($vars['body']);\n        }\n\n        if (!($body = Format::strip_emoticons($vars['body']->getClean())))\n            $body = '-'; //Special tag used to signify empty message as stored.\n\n        $poster = $vars['poster'];\n        if ($poster && is_object($poster))\n            $poster = (string) $poster;\n\n        $entry = new static(array(\n            'created' => SqlFunction::NOW(),\n            'type' => $vars['type'],\n            'thread_id' => $vars['threadId'],\n            'title' => Format::strip_emoticons(Format::sanitize($vars['title'], true)),\n            'format' => $vars['body']->getType(),\n            'staff_id' => $vars['staffId'],\n            'user_id' => $vars['userId'],\n            'poster' => $poster,\n            'source' => $vars['source'],\n            'flags' => $vars['flags'] ?: 0,\n        ));\n\n        //add recipients to thread entry\n        if ($vars['thread_entry_recipients']) {\n            $count = 0;\n            foreach ($vars['thread_entry_recipients'] as $key => $value)\n                $count = $count + count($value);\n\n            if ($count > 1)\n                $entry->flags |= ThreadEntry::FLAG_REPLY_ALL;\n            else\n                $entry->flags |= ThreadEntry::FLAG_REPLY_USER;\n\n            $entry->recipients = json_encode($vars['thread_entry_recipients']);\n        }\n\n\n        if (Collaborator::getIdByUserId($vars['userId'], $vars['threadId']))\n          $entry->flags |= ThreadEntry::FLAG_COLLABORATOR;\n\n        if ($entry->format == 'html')\n            // The current codebase properly balances html\n            $entry->flags |= self::FLAG_BALANCED;\n\n        // Flag system messages\n        if (!($vars['staffId'] || $vars['userId']))\n            $entry->flags |= self::FLAG_SYSTEM;\n\n        if (isset($vars['pid']))\n            $entry->pid = $vars['pid'];\n        // Check if 'reply_to' is in the $vars as the previous ThreadEntry\n        // instance. If the body of the previous message is found in the new\n        // body, strip it out.\n        elseif (isset($vars['reply_to'])\n                && $vars['reply_to'] instanceof ThreadEntry)\n            $entry->pid = $vars['reply_to']->getId();\n\n        if ($vars['ip_address'])\n            $entry->ip_address = $vars['ip_address'];\n\n        /************* ATTACHMENTS *****************/\n        // Drop stripped email inline images\n        if ($vars['attachments']) {\n            foreach ($vars['body']->getStrippedImages() as $cid) {\n                foreach ($vars['attachments'] as $i=>$a) {\n                    if (@$a['cid'] && $a['cid'] == $cid) {\n                        // Inline referenced attachment was stripped\n                        unset($vars['attachments'][$i]);\n                    }\n                }\n            }\n        }\n\n        // Handle extracted embedded images (<img src=\"data:base64,...\" />).\n        // The extraction has already been performed in the ThreadEntryBody\n        // class. Here they should simply be added to the attachments list\n        if ($atts = $vars['body']->getEmbeddedHtmlImages()) {\n            if (!is_array($vars['attachments']))\n                $vars['attachments'] = array();\n            foreach ($atts as $info) {\n                $vars['attachments'][] = $info;\n            }\n        }\n\n        $attached_files = array();\n        foreach (array(\n            // Web uploads and canned attachments\n            $vars['files'],\n            // Emailed or API attachments\n            $vars['attachments'],\n            // Inline images (attached to the draft)\n            Draft::getAttachmentIds($body),\n        ) as $files\n        ) {\n            if (is_array($files)) {\n                // Detect *inline* email attachments\n                foreach ($files as $i=>$a) {\n                    if (isset($a['cid']) && $a['cid']\n                            && strpos($body, 'cid:'.$a['cid']) !== false)\n                        $files[$i]['inline'] = true;\n                }\n                foreach ($entry->normalizeFileInfo($files) as $F) {\n                    // Deduplicate on the `key` attribute. The key is\n                    // necessary for the CID rewrite below\n                    $attached_files[$F['key']] = $F;\n                }\n            }\n        }\n\n        // Change <img src=\"cid:\"> inside the message to point to a unique\n        // hash-code for the attachment. Since the content-id will be\n        // discarded, only the unique hash-code (key) will be available to\n        // retrieve the image later\n        foreach ($attached_files as $key => $a) {\n            if (isset($a['cid']) && $a['cid']) {\n                $body = preg_replace('/src=(\"|\\'|\\b)(?:cid:)?'\n                    . preg_quote($a['cid'], '/').'\\1/i',\n                    'src=\"cid:'.$key.'\"', $body);\n            }\n        }\n\n        // Set body here after it was rewritten to capture the stored file\n        // keys (above)\n\n        // Store body as an attachment if bigger than allowed packet size\n        if (mb_strlen($body) >= 65000) { // 65,535 chars in text field.\n             $entry->body = NULL;\n             $file = array(\n                     'type' => 'text/html',\n                     'name' => md5($body).'.txt',\n                     'data' => $body,\n                     );\n\n             if (($AF = AttachmentFile::create($file))) {\n                 $attached_files[$file['key']] = array(\n                         'id' => $AF->getId(),\n                         'inline' => true,\n                         'file' => $AF);\n             } else {\n                 $entry->body = $body;\n             }\n        } else {\n            $entry->body = $body;\n\n        }\n\n        if (!$entry->save(true))\n            return false;\n\n        // Associate the attached files with this new entry\n        $entry->createAttachments($attached_files);\n\n\n        // Save mail message id, if available\n        $entry->saveEmailInfo($vars);\n\n        Signal::send('threadentry.created', $entry);\n\n        return $entry;\n    }\n\n    static function add($vars, &$errors=array()) {\n        return self::create($vars);\n    }\n\n    // Extensible thread entry actions ------------------------\n    /**\n     * getActions\n     *\n     * Retrieve a list of possible actions. This list is shown to the agent\n     * via drop-down list at the top-right of the thread entry when rendered\n     * in the UI.\n     */\n    function getActions() {\n        if (!isset($this->_actions)) {\n            $this->_actions = array();\n\n            foreach (self::$action_registry as $group=>$list) {\n                $T = array();\n                $this->_actions[__($group)] = &$T;\n                foreach ($list as $id=>$action) {\n                    $A = new $action($this);\n                    if ($A->isVisible()) {\n                        $T[$id] = $A;\n                    }\n                }\n                unset($T);\n            }\n        }\n        return $this->_actions;\n    }\n\n    function hasActions() {\n        foreach ($this->getActions() as $group => $list) {\n            if (count($list))\n                return true;\n        }\n        return false;\n    }\n\n    function triggerAction($name) {\n        foreach ($this->getActions() as $group=>$list) {\n            foreach ($list as $id=>$action) {\n                if (0 === strcasecmp($id, $name)) {\n                    if (!$action->isEnabled())\n                        return false;\n\n                    $action->trigger();\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static $action_registry = array();\n\n    static function registerAction($group, $action) {\n        if (!isset(self::$action_registry[$group]))\n            self::$action_registry[$group] = array();\n\n        self::$action_registry[$group][$action::getId()] = $action;\n    }\n\n    static function getPermissions() {\n        return self::$perms;\n    }\n\n    static function getTypes() {\n        return self::$types;\n    }\n}\n\nRolePermission::register(/* @trans */ 'Tickets', ThreadEntry::getPermissions());\n\n\nclass ThreadReferral extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_REFERRAL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'thread' => array(\n                'constraint' => array('thread_id' => 'Thread.id'),\n            ),\n            'agent' => array(\n                'constraint' => array(\n                    'object_type' => \"'S'\",\n                    'object_id' => 'Staff.staff_id',\n                ),\n            ),\n            'team' => array(\n                'constraint' => array(\n                    'object_type' => \"'E'\",\n                    'object_id' => 'Team.team_id',\n                ),\n            ),\n            'dept' => array(\n                'constraint' => array(\n                    'object_type' => \"'D'\",\n                    'object_id' => 'Dept.id',\n                ),\n            ),\n          )\n        );\n\n    var $icons = array(\n            'E' => 'group',\n            'D' => 'sitemap',\n            'S' => 'user'\n            );\n\n    var $_object = null;\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return (string) $this->getObject();\n    }\n\n    function getObject() {\n\n        if (!isset($this->_object)) {\n            $this->_object = ObjectModel::lookup(\n                    $this->object_id, $this->object_type);\n        }\n\n        return $this->_object;\n    }\n\n    function getIcon() {\n        return $this->icons[$this->object_type];\n    }\n\n    function display() {\n        return sprintf('<i class=\"icon-%s\"></i> %s',\n                $this->getIcon(), $this->getName());\n    }\n\n    static function create($vars) {\n\n        $new = new self($vars);\n        $new->created = SqlFunction::NOW();\n        return $new->save();\n    }\n}\n\nclass ThreadEvent extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_EVENT_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            // Originator of activity\n            'agent' => array(\n                'constraint' => array(\n                    'uid' => 'Staff.staff_id',\n                ),\n                'null' => true,\n            ),\n            // Agent assignee\n            'staff' => array(\n                'constraint' => array(\n                    'staff_id' => 'Staff.staff_id',\n                ),\n                'null' => true,\n            ),\n            'team' => array(\n                'constraint' => array(\n                    'team_id' => 'Team.team_id',\n                ),\n                'null' => true,\n            ),\n            'thread' => array(\n                'constraint' => array('thread_id' => 'Thread.id'),\n            ),\n            'user' => array(\n                'constraint' => array(\n                    'uid' => 'User.id',\n                ),\n                'null' => true,\n            ),\n            'dept' => array(\n                'constraint' => array(\n                    'dept_id' => 'Dept.id',\n                ),\n                'null' => true,\n            ),\n            'topic' => array(\n                'constraint' => array(\n                    'topic_id' => 'Topic.topic_id',\n                ),\n                'null' => true,\n            ),\n        ),\n    );\n\n    // Valid events for database storage\n    const ASSIGNED  = 'assigned';\n    const RELEASED  = 'released';\n    const CLOSED    = 'closed';\n    const CREATED   = 'created';\n    const COLLAB    = 'collab';\n    const EDITED    = 'edited';\n    const ERROR     = 'error';\n    const OVERDUE   = 'overdue';\n    const REOPENED  = 'reopened';\n    const STATUS    = 'status';\n    const TRANSFERRED = 'transferred';\n    const REFERRED = 'referred';\n    const VIEWED    = 'viewed';\n    const MERGED    = 'merged';\n    const UNLINKED    = 'unlinked';\n\n    const MODE_STAFF = 1;\n    const MODE_CLIENT = 2;\n\n    var $_data;\n\n    function getAvatar($size=null) {\n        if ($this->uid && $this->uid_type == 'S')\n            return $this->agent ? $this->agent->getAvatar($size) : '';\n        if ($this->uid && $this->uid_type == 'U')\n            return $this->user ? $this->user->getAvatar($size) : '';\n    }\n\n    function getUserName() {\n        if ($this->uid && $this->uid_type == 'S')\n            return $this->agent ? $this->agent->getName() : $this->username;\n        if ($this->uid && $this->uid_type == 'U')\n            return $this->user ? $this->user->getName() : $this->username;\n        return $this->username;\n    }\n\n    function getIcon() {\n        $icons = array(\n            'assigned'    => 'hand-right',\n            'released'    => 'unlock',\n            'collab'      => 'group',\n            'created'     => 'magic',\n            'overdue'     => 'time',\n            'transferred' => 'share-alt',\n            'referred'    => 'exchange',\n            'edited'      => 'pencil',\n            'closed'      => 'thumbs-up-alt',\n            'reopened'    => 'rotate-right',\n            'resent'      => 'reply-all icon-flip-horizontal',\n            'merged'      => 'code-fork',\n            'linked'      => 'link',\n            'unlinked'    => 'unlink',\n        );\n        return @$icons[$this->state] ?: 'chevron-sign-right';\n    }\n\n    function getDescription($mode=self::MODE_STAFF) {\n        // Abstract description\n        return $this->template(sprintf(\n            __('%s by {somebody} {timestamp}'),\n            $this->state\n        ), $mode);\n    }\n\n    function template($description, $mode=self::MODE_STAFF) {\n        global $thisstaff, $cfg;\n\n        $self = $this;\n        $hideName = $cfg->hideStaffName();\n        return preg_replace_callback('/\\{(<(?P<type>([^>]+))>)?(?P<key>[^}.]+)(\\.(?P<data>[^}]+))?\\}/',\n            function ($m) use ($self, $thisstaff, $cfg, $hideName, $mode) {\n                switch ($m['key']) {\n                case 'assignees':\n                    $assignees = array();\n                    if ($S = $self->staff) {\n                        $avatar = '';\n                        if ($cfg->isAvatarsEnabled())\n                            $avatar = $S->getAvatar();\n                        $assignees[] =\n                            $avatar.$S->getName();\n                    }\n                    if ($T = $self->team) {\n                        $assignees[] = $T->getLocalName();\n                    }\n                    return implode('/', $assignees);\n                case 'somebody':\n                    if ($hideName && $self->agent && $mode == self::MODE_CLIENT)\n                        $name = __('Staff');\n                    else\n                        $name = $self->getUserName();\n                    if ($cfg->isAvatarsEnabled()\n                            && ($avatar = $self->getAvatar()))\n                        $name = $avatar.$name;\n                    return $name;\n                case 'timestamp':\n                    $timeFormat = null;\n                    if ($mode != self::MODE_CLIENT && $thisstaff\n                            && !strcasecmp($thisstaff->datetime_format,\n                                'relative')) {\n                        $timeFormat = function ($timestamp) {\n                            return Format::relativeTime(Misc::db2gmtime($timestamp));\n                        };\n                    }\n\n                    return sprintf('<time %s datetime=\"%s\"\n                            data-toggle=\"tooltip\" title=\"%s\">%s</time>',\n                        $timeFormat ? 'class=\"relative\"' : '',\n                        date(DateTime::W3C, Misc::db2gmtime($self->timestamp)),\n                        Format::daydatetime($self->timestamp),\n                        $timeFormat ? $timeFormat($self->timestamp) :\n                        Format::datetime($self->timestamp)\n                    );\n                case 'agent':\n                    $name = $self->agent->getName();\n                    if ($cfg->isAvatarsEnabled()\n                            && ($avatar = $self->getAvatar()))\n                        $name = $avatar.$name;\n                    return $name;\n                case 'dept':\n                    if ($dept = $self->getDept())\n                        return $dept->getLocalName();\n                    return __('None');\n                case 'data':\n                    $val = $self->getData($m['data']);\n                    if (is_array($val))\n                        list($val, $fallback) = $val;\n                    if ($m['type'] && class_exists($m['type']))\n                        $val = $m['type']::lookup($val);\n                    if (!$val && $fallback)\n                        $val = $fallback;\n                    return Format::htmlchars((string) $val);\n                }\n                return $m[0];\n            },\n            $description\n        );\n    }\n\n    function getDept() {\n        return $this->dept;\n    }\n\n    function getData($key=false) {\n        if (!isset($this->_data))\n            $this->_data = JsonDataParser::decode($this->data);\n        return ($key) ? @$this->_data[$key] : $this->_data;\n    }\n\n    function render($mode) {\n        $inc = ($mode == self::MODE_STAFF) ? STAFFINC_DIR : CLIENTINC_DIR;\n        $event = $this->getTypedEvent();\n        include $inc . 'templates/thread-event.tmpl.php';\n    }\n\n    static function create($ht=false, $user=false) {\n        $inst = new static($ht);\n        $inst->timestamp = SqlFunction::NOW();\n\n        global $thisstaff, $thisclient;\n        $user = is_object($user) ? $user : $thisstaff ?: $thisclient;\n        if ($user instanceof Staff) {\n            $inst->uid_type = 'S';\n            $inst->uid = $user->getId();\n        }\n        elseif ($user instanceof User) {\n            $inst->uid_type = 'U';\n            $inst->uid = $user->getId();\n        }\n\n        return $inst;\n    }\n\n    static function forTicket($ticket, $state, $user=false) {\n      global $thisstaff;\n\n      if($thisstaff && !$ticket->getStaffId())\n        $staff = $thisstaff->getId();\n      else\n        $staff = $ticket->getStaffId();\n\n        $inst = self::create(array(\n            'thread_type' => ObjectModel::OBJECT_TYPE_TICKET,\n            'staff_id' => $staff,\n            'team_id' => $ticket->getTeamId(),\n            'dept_id' => $ticket->getDeptId(),\n            'topic_id' => $ticket->getTopicId(),\n        ), $user);\n        return $inst;\n    }\n\n    static function forTask($task, $state, $user=false) {\n        $inst = self::create(array(\n            'thread_type' => ObjectModel::OBJECT_TYPE_TASK,\n            'staff_id' => $task->getStaffId(),\n            'team_id' => $task->getTeamId(),\n            'dept_id' => $task->getDeptId(),\n        ), $user);\n        return $inst;\n    }\n\n    function getTypedEvent() {\n        static $subclasses;\n\n        if (!isset($subclasses)) {\n            $parent = get_class($this);\n            $subclasses = array();\n            foreach (get_declared_classes() as $class) {\n                if (is_subclass_of($class, $parent))\n                    $subclasses[$class::$state] = $class;\n            }\n        }\n        $this->state = Event::getNameById($this->event_id);\n        if (!($class = $subclasses[$this->state]))\n            return $this;\n        return new $class($this->ht);\n    }\n}\n\nclass Event extends VerySimpleModel {\n    static $meta = array(\n        'table' => EVENT_TABLE,\n        'pk' => array('id'),\n    );\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return $this->name;\n    }\n\n    function getDescription() {\n        return $this->description;\n    }\n\n    static function getNameById($id) {\n        return array_search($id, self::getIds());\n    }\n\n    static function getIdByName($name) {\n         $ids =  self::getIds();\n         return $ids[$name] ?: 0;\n    }\n\n    static function getIds() {\n        static $ids;\n\n        if (!isset($ids)) {\n            $ids = array();\n            $events = self::objects()->values_flat('id', 'name');\n            foreach ($events as $row) {\n                list($id, $name) = $row;\n                $ids[$name] = $id;\n            }\n        }\n\n        return $ids;\n    }\n\n    static function getStates($dropdown=false) {\n        $names = array();\n        if ($dropdown)\n            $names = array(__('All'));\n\n        $events = self::objects()->values_flat('name');\n        foreach ($events as $val)\n            $names[] = ucfirst($val[0]);\n\n        return $names;\n    }\n\n    static function create($vars=false, &$errors=array()) {\n        $event = new static($vars);\n        return $event;\n    }\n\n    static function __create($vars, &$errors=array()) {\n        $event = self::create($vars);\n        $event->save();\n        return $event;\n    }\n\n    function save($refetch=false) {\n        return parent::save($refetch);\n    }\n}\n\nclass ThreadEvents extends InstrumentedList {\n    function annul($event) {\n        $event_id = Event::getIdByName($event);\n        $this->queryset\n            ->filter(array('event_id' => $event_id))\n            ->update(array('annulled' => 1));\n    }\n\n    /**\n     * Add an event to the thread activity log.\n     *\n     * Parameters:\n     * $object - Object to log activity for\n     * $state - State name of the activity (one of 'created', 'edited',\n     *      'deleted', 'closed', 'reopened', 'error', 'collab', 'resent',\n     *      'assigned', 'released', 'transferred')\n     * $data - (array?) Details about the state change\n     * $user - (string|User|Staff) user triggering the state change\n     * $annul - (state) a corresponding state change that is annulled by\n     *      this event\n     */\n    function log($object, $state, $data=null, $user=null, $annul=null) {\n        global $thisstaff, $thisclient;\n\n        if ($object && ($object instanceof Ticket))\n            // TODO: Use $object->createEvent() (nolint)\n            $event = ThreadEvent::forTicket($object, $state, $user);\n        elseif ($object && ($object instanceof Task))\n            $event = ThreadEvent::forTask($object, $state, $user);\n\n        if (is_null($event))\n            return;\n\n        # Annul previous entries if requested (for instance, reopening a\n        # ticket will annul an 'closed' entry). This will be useful to\n        # easily prevent repeated statistics.\n        if ($annul) {\n            $this->annul($annul);\n        }\n\n        $username = $user;\n        $user = is_object($user) ? $user : $thisclient ?: $thisstaff;\n        if (!is_string($username)) {\n            if ($user instanceof Staff) {\n                $username = $user->getUserName();\n            }\n            // XXX: Use $user here\n            elseif ($thisclient) {\n                if ($thisclient->hasAccount())\n                    $username = $thisclient->getFullName();\n                if (!$username)\n                    $username = $thisclient->getEmail();\n            }\n            else {\n                # XXX: Security Violation ?\n                $username = 'SYSTEM';\n            }\n        }\n        $event->username = $username;\n        $event->event_id = Event::getIdByName($state);\n\n        if ($data) {\n            if (is_array($data))\n                $data = JsonDataEncoder::encode($data);\n            if (!is_string($data))\n                throw new InvalidArgumentException('Data must be string or array');\n            $event->data = $data;\n        }\n\n        $this->add($event);\n\n        // Save event immediately\n        return $event->save();\n    }\n}\n\nclass AssignmentEvent extends ThreadEvent {\n    static $icon = 'hand-right';\n    static $state = 'assigned';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case !is_array($data):\n        default:\n            $desc = __('Assignee changed by <b>{somebody}</b> to <strong>{assignees}</strong> {timestamp}');\n            break;\n        case isset($data['staff']):\n            $desc = __('<b>{somebody}</b> assigned this to <strong>{<Staff>data.staff}</strong> {timestamp}');\n            break;\n        case isset($data['team']):\n            $desc = __('<b>{somebody}</b> assigned this to <strong>{<Team>data.team}</strong> {timestamp}');\n            break;\n        case isset($data['claim']):\n            $desc = __('<b>{somebody}</b> claimed this {timestamp}');\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass ReleaseEvent extends ThreadEvent {\n    static $icon = 'unlock';\n    static $state = 'released';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['staff'], $data['team']):\n            $desc = __('Ticket released from <strong>{<Team>data.team}</strong> and <strong>{<Staff>data.staff}</strong> by <b>{somebody}</b> {timestamp}');\n            break;\n        case isset($data['staff']):\n            $desc = __('Ticket released from <strong>{<Staff>data.staff}</strong> by <b>{somebody}</b> {timestamp}');\n            break;\n        case isset($data['team']):\n            $desc = __('Ticket released from <strong>{<Team>data.team}</strong> by <b>{somebody}</b> {timestamp}');\n            break;\n        default:\n            $desc = __('<b>{somebody}</b> released ticket assignment {timestamp}');\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass ReferralEvent extends ThreadEvent {\n    static $icon = 'exchange';\n    static $state = 'referred';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['staff']):\n            $desc = __('<b>{somebody}</b> referred this to <strong>{<Staff>data.staff}</strong> {timestamp}');\n            break;\n        case isset($data['team']):\n            $desc = __('<b>{somebody}</b> referred this to <strong>{<Team>data.team}</strong> {timestamp}');\n            break;\n        case isset($data['dept']):\n            $desc = __('<b>{somebody}</b> referred this to <strong>{<Dept>data.dept}</strong> {timestamp}');\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass CloseEvent extends ThreadEvent {\n    static $icon = 'thumbs-up-alt';\n    static $state = 'closed';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        if ($this->getData('status'))\n            return $this->template(__('Closed by <b>{somebody}</b> with status of {<TicketStatus>data.status} {timestamp}'), $mode);\n        else\n            return $this->template(__('Closed by <b>{somebody}</b> {timestamp}'), $mode);\n    }\n}\n\nclass CollaboratorEvent extends ThreadEvent {\n    static $icon = 'group';\n    static $state = 'collab';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['org']):\n            $desc = __('Collaborators for {<Organization>data.org} organization added');\n            break;\n        case isset($data['del']):\n            $base = __('<b>{somebody}</b> removed <strong>%s</strong> from the collaborators {timestamp}');\n            $collabs = array();\n            $users = User::objects()->filter(array('id__in' => array_keys($data['del'])));\n            foreach ($data['del'] as $id=>$c) {\n                $U = false;\n                foreach ($users as $user) {\n                    if ($user->id == $id) {\n                        $U = $user;\n                        break;\n                    }\n                }\n                $collabs[] = Format::htmlchars($U ? $U->getName() : @$c['name'] ?: $c);\n            }\n            $desc = sprintf($base, implode(', ', $collabs));\n            break;\n        case isset($data['add']):\n            $base = __('<b>{somebody}</b> added <strong>%s</strong> as collaborators {timestamp}');\n            $collabs = array();\n            if ($data['add']) {\n                $users = User::objects()->filter(array('id__in' => array_keys($data['add'])));\n                foreach ($data['add'] as $id=>$c) {\n                    $U = false;\n                    foreach ($users as $user) {\n                        if ($user->id == $id) {\n                            $U = $user;\n                            break;\n                        }\n                    }\n                    $c = sprintf(\"%s %s\",\n                        Format::htmlchars($U ? $U->getName() : @$c['name'] ?: $c),\n                        $c['src'] ? sprintf(__('via %s'\n                            /* e.g. \"Added collab \"Me <me@company.me>\" via Email (to)\" */\n                            ), $c['src']) : ''\n                    );\n                    $collabs[] = $c;\n                }\n            }\n            $desc = $collabs\n                ? sprintf($base, implode(', ', $collabs))\n                : 'somebody';\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass CreationEvent extends ThreadEvent {\n    static $icon = 'magic';\n    static $state = 'created';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('Created by <b>{somebody}</b> {timestamp}'), $mode);\n    }\n}\n\nclass EditEvent extends ThreadEvent {\n    static $icon = 'pencil';\n    static $state = 'edited';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['owner']):\n            $desc = __('<b>{somebody}</b> changed ownership to {<User>data.owner} {timestamp}');\n            break;\n        case isset($data['status']):\n            $desc = __('<b>{somebody}</b> changed the status to <strong>{<TicketStatus>data.status}</strong> {timestamp}');\n            break;\n        case isset($data['fields']):\n            $fields = $changes = array();\n            foreach (DynamicFormField::objects()->filter(array(\n                'id__in' => array_keys($data['fields'])\n            )) as $F) {\n                $fields[$F->id] = $F;\n            }\n            foreach ($data['fields'] as $id=>$f) {\n                if (!($field = $fields[$id]))\n                   continue;\n                if ($mode == self::MODE_CLIENT &&  !$field->isVisibleToUsers())\n                    continue;\n                list($old, $new) = $f;\n                $impl = $field->getImpl($field);\n                $before = $impl->to_php($old);\n                $after = $impl->to_php($new);\n                $changes[] = sprintf('<strong>%s</strong> %s',\n                    $field->getLocal('label'), $impl->whatChanged($before, $after));\n            }\n            // Fallthrough to other editable fields\n        case isset($data['topic_id']):\n        case isset($data['sla_id']):\n        case isset($data['source']):\n        case isset($data['user_id']):\n        case isset($data['duedate']):\n            $base = __('Updated by <b>{somebody}</b> {timestamp} \u2014 %s');\n            foreach (array(\n                'topic_id' => array(__('Help Topic'), array('Topic', 'getTopicName')),\n                'sla_id' => array(__('SLA'), array('SLA', 'getSLAName')),\n                'duedate' => array(__('Due Date'), array('Format', 'date')),\n                'user_id' => array(__('Ticket Owner'), array('User', 'getNameById')),\n                'source' => array(__('Source'), null)\n            ) as $f => $info) {\n                if (isset($data[$f])) {\n                    list($name, $desc) = $info;\n                    list($old, $new) = $data[$f];\n                    if ($desc && is_callable($desc)) {\n                        $new = call_user_func($desc, $new);\n                        if ($old)\n                            $old = call_user_func($desc, $old);\n                    }\n                    if ($old and $new) {\n                        $changes[] = sprintf(\n                            __('<strong>%1$s</strong> changed from <strong>%2$s</strong> to <strong>%3$s</strong>'),\n                            Format::htmlchars($name), Format::htmlchars($old), Format::htmlchars($new)\n                        );\n                    }\n                    elseif ($new) {\n                        $changes[] = sprintf(\n                            __('<strong>%1$s</strong> set to <strong>%2$s</strong>'),\n                            Format::htmlchars($name), Format::htmlchars($new)\n                        );\n                    }\n                    else {\n                        $changes[] = sprintf(\n                            __('unset <strong>%1$s</strong>'),\n                            Format::htmlchars($name)\n                        );\n                    }\n                }\n            }\n            $desc = $changes\n                ? sprintf($base, implode(', ', $changes)) : '';\n            break;\n        }\n\n        return $this->template($desc, $mode);\n    }\n}\n\nclass OverdueEvent extends ThreadEvent {\n    static $icon = 'time';\n    static $state = 'overdue';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('Flagged as overdue by the system {timestamp}'), $mode);\n    }\n}\n\nclass ReopenEvent extends ThreadEvent {\n    static $icon = 'rotate-right';\n    static $state = 'reopened';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('Reopened by <b>{somebody}</b> {timestamp}'), $mode);\n    }\n}\n\nclass ResendEvent extends ThreadEvent {\n    static $icon = 'reply-all icon-flip-horizontal';\n    static $state = 'resent';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('<b>{somebody}</b> resent <strong><a href=\"#thread-entry-{data.entry}\">a previous response</a></strong> {timestamp}'), $mode);\n    }\n}\n\nclass TransferEvent extends ThreadEvent {\n    static $icon = 'share-alt';\n    static $state = 'transferred';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('<b>{somebody}</b> transferred this to <strong>{dept}</strong> {timestamp}'), $mode);\n    }\n}\n\nclass ViewEvent extends ThreadEvent {\n    static $state = 'viewed';\n}\n\nclass MergedEvent extends ThreadEvent {\n    static $icon = 'code-fork';\n    static $state = 'merged';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return sprintf($this->template(__('<b>{somebody}</b> merged this ticket with %s{data.id}%s<b>{data.ticket}</b>%s {timestamp}'), $mode),\n                '<a href=\"tickets.php?id=', '\">', '</a>');\n    }\n}\n\nclass LinkedEvent extends ThreadEvent {\n    static $icon = 'link';\n    static $state = 'linked';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return sprintf($this->template(__('<b>{somebody}</b> linked this ticket with %s{data.id}%s<b>{data.ticket}</b>%s {timestamp}'), $mode),\n                '<a href=\"tickets.php?id=', '\">', '</a>');\n    }\n}\n\nclass UnlinkEvent extends ThreadEvent {\n    static $icon = 'unlink';\n    static $state = 'unlinked';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return sprintf($this->template(__('<b>{somebody}</b> unlinked this ticket from %s{data.id}%s<b>{data.ticket}</b>%s {timestamp}'), $mode),\n                '<a href=\"tickets.php?id=', '\">', '</a>');\n    }\n}\n\nclass ThreadEntryBody /* extends SplString */ {\n\n    static $types = array('text', 'html');\n\n    var $body;\n    var $type;\n    var $stripped_images = array();\n    var $embedded_images = array();\n    var $options = array(\n        'strip-embedded' => true\n    );\n\n    function __construct($body, $type='text', $options=array()) {\n        $type = strtolower($type);\n        if (!in_array($type, static::$types))\n            throw new Exception(\"$type: Unsupported ThreadEntryBody type\");\n        $this->body = (string) $body;\n        if (strlen($this->body) > 250000) {\n            $max_packet = db_get_variable('max_allowed_packet', 'global');\n            // Truncate just short of the max_allowed_packet\n            $this->body = substr($this->body, 0, $max_packet - 2048) . ' ... '\n               . _S('(truncated)');\n        }\n        $this->type = $type;\n        $this->options = array_merge($this->options, $options);\n    }\n\n    function isEmpty() {\n        return !$this->body || $this->body == '-';\n    }\n\n    function convertTo($type) {\n        if ($type === $this->type)\n            return $this;\n\n        $conv = $this->type . ':' . strtolower($type);\n        switch ($conv) {\n        case 'text:html':\n            return new ThreadEntryBody(sprintf('<pre>%s</pre>',\n                Format::htmlchars($this->body)), $type);\n        case 'html:text':\n            return new ThreadEntryBody(Format::html2text((string) $this), $type);\n        }\n    }\n\n    function stripQuotedReply($tag) {\n\n        //Strip quoted reply...on emailed  messages\n        if (!$tag || strpos($this->body, $tag) === false)\n            return;\n\n        // Capture a list of inline images\n        $images_before = $images_after = array();\n        preg_match_all('/src=(\"|\\'|\\b)cid:(\\S+)\\1/', $this->body, $images_before,\n            PREG_PATTERN_ORDER);\n\n        // Strip the quoted part of the body\n        if ((list($msg) = explode($tag, $this->body, 2)) && trim($msg)) {\n            $this->body = $msg;\n\n            // Capture a list of dropped inline images\n            if ($images_before) {\n                preg_match_all('/src=(\"|\\'|\\b)cid:(\\S+)\\1/', $this->body,\n                    $images_after, PREG_PATTERN_ORDER);\n                $this->stripped_images = array_diff($images_before[2],\n                    $images_after[2]);\n            }\n        }\n    }\n\n    function getStrippedImages() {\n        return $this->stripped_images;\n    }\n\n    function getEmbeddedHtmlImages() {\n        return $this->embedded_images;\n    }\n\n    function getType() {\n        return $this->type;\n    }\n\n    function getClean() {\n        switch ($this->type) {\n        case 'html':\n            return trim($this->body, \" <>br/\\t\\n\\r\") ? $this->body: '';\n        case 'text':\n            return trim($this->body) ? $this->body: '';\n        default:\n            return trim($this->body);\n        }\n    }\n\n    function __toString() {\n        return (string) $this->body;\n    }\n\n    function toHtml() {\n        return $this->display('html');\n    }\n\n    function prepend($what) {\n        $this->body = $what . $this->body;\n    }\n\n    function append($what) {\n        $this->body .= $what;\n    }\n\n    function asVar() {\n        // Email template, assume HTML\n        return $this->display('email');\n    }\n\n    function display($format=false) {\n        throw new Exception('display: Abstract display() method not implemented');\n    }\n\n    function getSearchable() {\n        return Format::searchable($this->body);\n    }\n\n    static function fromFormattedText($text, $format=false, $options=array()) {\n        switch ($format) {\n        case 'text':\n            return new TextThreadEntryBody($text);\n        case 'html':\n            return new HtmlThreadEntryBody($text, array('strip-embedded'=>false) + $options);\n        default:\n            return new ThreadEntryBody($text);\n        }\n    }\n\n    static function clean($text, $format=null) {\n        global $cfg;\n        $format = $format ?: ($cfg->isRichTextEnabled() ? 'html' : 'text');\n        $body = static::fromFormattedText($text, $format);\n        return $body->getClean();\n    }\n}\n\nclass TextThreadEntryBody extends ThreadEntryBody {\n    function __construct($body, $options=array()) {\n        parent::__construct($body, 'text', $options);\n    }\n\n    function getClean() {\n        return Format::htmlchars(Format::html_balance(Format::stripEmptyLines(parent::getClean())));\n    }\n\n    function prepend($what) {\n        $this->body = $what . \"\\n\\n\" . $this->body;\n    }\n\n    function display($output=false) {\n        if ($this->isEmpty())\n            return '(empty)';\n\n        $escaped = Format::htmlchars($this->body);\n        switch ($output) {\n        case 'html':\n            return '<div style=\"white-space:pre-wrap\">'\n                .Format::clickableurls($escaped).'</div>';\n        case 'email':\n            return '<div style=\"white-space:pre-wrap\">'\n                .$escaped.'</div>';\n        case 'pdf':\n            return nl2br($escaped);\n        default:\n            return '<pre>'.$escaped.'</pre>';\n        }\n    }\n}\nclass HtmlThreadEntryBody extends ThreadEntryBody {\n    function __construct($body, $options=array()) {\n        if (!isset($options['strip-embedded']) || $options['strip-embedded'])\n            $body = $this->extractEmbeddedHtmlImages($body);\n        parent::__construct($body, 'html', $options);\n    }\n\n    function extractEmbeddedHtmlImages($body) {\n        $self = $this;\n        return preg_replace_callback('/src=\"(data:[^\"]+)\"/',\n        function ($m) use ($self) {\n            $info = Format::parseRfc2397($m[1], false, false);\n            $info['cid'] = 'img'.Misc::randCode(12);\n            list(,$type) = explode('/', $info['type'], 2);\n            $info['name'] = 'image'.Misc::randCode(4).'.'.$type;\n            $self->embedded_images[] = $info;\n            return 'src=\"cid:'.$info['cid'].'\"';\n        }, $body);\n    }\n\n    function getClean() {\n        return Format::sanitize(parent::getClean());\n    }\n\n    function getSearchable() {\n        // Replace tag chars with spaces (to ensure words are separated)\n        $body = Format::html($this->body, array('hook_tag' => function($el, $attributes=0) {\n            static $non_ws = array('wbr' => 1);\n            return (isset($non_ws[$el])) ? '' : ' ';\n        }));\n        // Collapse multiple white-spaces\n        $body = html_entity_decode($body, ENT_QUOTES);\n        $body = preg_replace('`\\s+`u', ' ', $body);\n        return Format::searchable($body);\n    }\n\n    function prepend($what) {\n        $this->body = sprintf('<div>%s<br/><br/></div>%s', $what, $this->body);\n    }\n\n    function display($output=false) {\n        if ($this->isEmpty())\n            return '(empty)';\n\n        switch ($output) {\n        case 'email':\n            return $this->body;\n        case 'pdf':\n            return Format::clickableurls($this->body);\n        default:\n            return Format::display($this->body, true, !$this->options['balanced']);\n        }\n    }\n}\n\n\n/* Message - Ticket thread entry of type message */\nclass MessageThreadEntry extends ThreadEntry {\n\n    const ENTRY_TYPE = 'M';\n\n    function getSubject() {\n        return $this->getTitle();\n    }\n\n    static function add($vars, &$errors=array()) {\n\n        if (!$vars || !is_array($vars) || !$vars['threadId'])\n            $errors['err'] = __('Missing or invalid data');\n        elseif (!$vars['message'])\n            $errors['message'] = __('Message content is required');\n\n        if ($errors) return false;\n\n        $vars['type'] = self::ENTRY_TYPE;\n        $vars['body'] = $vars['message'];\n\n        if (!$vars['poster']\n                && $vars['userId']\n                && ($user = User::lookup($vars['userId'])))\n            $vars['poster'] = (string) $user->getName();\n\n        return parent::add($vars);\n    }\n\n    static function getVarScope() {\n        $base = parent::getVarScope();\n        unset($base['staff']);\n        return $base;\n    }\n}\n\n/* thread entry of type response */\nclass ResponseThreadEntry extends ThreadEntry {\n\n    const ENTRY_TYPE = 'R';\n\n    function getActivity() {\n        return new ThreadActivity(\n                _S('New Response'),\n                _S('New response posted'));\n    }\n\n    function getSubject() {\n        return $this->getTitle();\n    }\n\n    function getRespondent() {\n        return $this->getStaff();\n    }\n\n    static function add($vars, &$errors=array()) {\n\n        if (!$vars || !is_array($vars) || !$vars['threadId'])\n            $errors['err'] = __('Missing or invalid data');\n        elseif (!$vars['response'])\n            $errors['response'] = __('Response content is required');\n\n        if ($errors) return false;\n\n        $vars['type'] = self::ENTRY_TYPE;\n        $vars['body'] = $vars['response'];\n        if (!$vars['pid'] && $vars['msgId'])\n            $vars['pid'] = $vars['msgId'];\n\n        if (!$vars['poster']\n                && $vars['staffId']\n                && ($staff = Staff::lookup($vars['staffId'])))\n            $vars['poster'] = (string) $staff->getName();\n\n        return parent::add($vars);\n    }\n\n    static function getVarScope() {\n        $base = parent::getVarScope();\n        unset($base['user']);\n        return $base;\n    }\n}\n\n/* Thread entry of type note (Internal Note) */\nclass NoteThreadEntry extends ThreadEntry {\n    const ENTRY_TYPE = 'N';\n\n    function getMessage() {\n        return $this->getBody();\n    }\n\n    function getActivity() {\n        return new ThreadActivity(\n                _S('New Internal Note'),\n                _S('New internal note posted'));\n    }\n\n    static function add($vars, &$errors=array()) {\n\n        //Check required params.\n        if (!$vars || !is_array($vars) || !$vars['threadId'])\n            $errors['err'] = __('Missing or invalid data');\n        elseif (!$vars['note'])\n            $errors['note'] = __('Note content is required');\n\n        if ($errors) return false;\n\n        //TODO: use array_intersect_key  when we move to php 5 to extract just what we need.\n        $vars['type'] = self::ENTRY_TYPE;\n        $vars['body'] = $vars['note'];\n\n        return parent::add($vars);\n    }\n\n    static function getVarScope() {\n        $base = parent::getVarScope();\n        unset($base['user']);\n        return $base;\n    }\n}\n\n// Object specific thread utils.\nclass ObjectThread extends Thread\nimplements TemplateVariable {\n    static $types = array(\n        ObjectModel::OBJECT_TYPE_TASK => 'TaskThread',\n        ObjectModel::OBJECT_TYPE_TICKET => 'TicketThread',\n    );\n\n    var $counts;\n\n    function getCounts() {\n        if (!isset($this->counts) && $this->getId()) {\n            $this->counts = array();\n\n            $stuff = $this->entries\n                ->values_flat('type')\n                ->annotate(array(\n                    'count' => SqlAggregate::COUNT('id')\n                ));\n\n            foreach ($stuff as $row) {\n                list($type, $count) = $row;\n                $this->counts[$type] = $count;\n            }\n        }\n        return $this->counts;\n    }\n\n    function getNumMessages() {\n        $this->getCounts();\n        return $this->counts[MessageThreadEntry::ENTRY_TYPE];\n    }\n\n    function getNumResponses() {\n        $this->getCounts();\n        return $this->counts[ResponseThreadEntry::ENTRY_TYPE];\n    }\n\n    function getNumNotes() {\n        $this->getCounts();\n        return $this->counts[NoteThreadEntry::ENTRY_TYPE];\n    }\n\n\n    function getLastMessage($criteria=false) {\n        $entries = clone $this->getEntries();\n        $entries->filter(array(\n            'type' => MessageThreadEntry::ENTRY_TYPE\n        ));\n\n        if ($criteria)\n            $entries->filter($criteria);\n\n        $entries->order_by('-id');\n\n        return $entries->first();\n    }\n\n    function getLastEmailMessage($criteria=array()) {\n\n        $criteria += array(\n                'source' => 'Email',\n                'email_info__headers__isnull' => false);\n\n        return $this->getLastMessage($criteria);\n    }\n\n    function getLastEmailMessageByUser($user) {\n\n        $uid = is_numeric($user) ? $user : 0;\n        if (!$uid && ($user instanceof EmailContact))\n            $uid = $user->getUserId();\n\n        return $uid\n                ? $this->getLastEmailMessage(array('user_id' => $uid))\n                : null;\n    }\n\n    function getEntry($criteria) {\n        // XXX: PUNT\n        if (is_numeric($criteria))\n            return parent::getEntry($criteria);\n\n        $entries = clone $this->getEntries();\n        $entries->filter($criteria);\n        return $entries->first();\n    }\n\n    function getMessages() {\n        $entries = clone $this->getEntries();\n        return $entries->filter(array(\n            'type' => MessageThreadEntry::ENTRY_TYPE\n        ));\n    }\n\n    function getResponses() {\n        $entries = clone $this->getEntries();\n        return $entries->filter(array(\n            'type' => ResponseThreadEntry::ENTRY_TYPE\n        ));\n    }\n\n    function getNotes() {\n        $entries = clone $this->getEntries();\n        return $entries->filter(array(\n            'type' => NoteThreadEntry::ENTRY_TYPE\n        ));\n    }\n\n    function addNote($vars, &$errors=array()) {\n        //Add ticket Id.\n        $vars['threadId'] = $this->getId();\n        return NoteThreadEntry::add($vars, $errors);\n    }\n\n    function addMessage($vars, &$errors) {\n        $vars['threadId'] = $this->getId();\n        $vars['staffId'] = 0;\n\n        if (!($message = MessageThreadEntry::add($vars, $errors)))\n            return $message;\n\n        $this->lastmessage = SqlFunction::NOW();\n        $this->save(true);\n        return $message;\n    }\n\n    function addResponse($vars, &$errors) {\n        $vars['threadId'] = $this->getId();\n        $vars['userId'] = 0;\n        if ($message = $this->getLastMessage())\n            $vars['pid'] = $message->getId();\n\n        $vars['flags'] = 0;\n\n        if (!($resp = ResponseThreadEntry::add($vars, $errors)))\n            return $resp;\n\n        $this->lastresponse = SqlFunction::NOW();\n        $this->save(true);\n        return $resp;\n    }\n\n    function __toString() {\n        return $this->asVar();\n    }\n\n    function asVar() {\n        return new ThreadEntries($this);\n    }\n\n    function getVar($name) {\n        switch ($name) {\n        case 'original':\n            $entry = $this->entries->filter(array(\n                'type' => MessageThreadEntry::ENTRY_TYPE,\n                'flags__hasbit' => ThreadEntry::FLAG_ORIGINAL_MESSAGE,\n                ))\n                ->order_by('id')\n                ->first();\n            if ($entry)\n                return $entry->getBody();\n\n            break;\n        case 'last_message':\n        case 'lastmessage':\n            $entry = $this->getLastMessage();\n            if ($entry)\n                return $entry->getBody();\n\n            break;\n        case 'complete':\n            return $this->asVar();\n            break;\n        }\n    }\n\n    static function getVarScope() {\n      return array(\n        'complete' =>array('class' => 'ThreadEntries', 'desc' => __('Thread Correspondence')),\n        'original' => array('class' => 'MessageThreadEntry', 'desc' => __('Original Message')),\n        'lastmessage' => array('class' => 'MessageThreadEntry', 'desc' => __('Last Message')),\n      );\n    }\n\n    static function lookup($criteria, $type=false) {\n        if (!$type)\n            return parent::lookup($criteria);\n\n        $class = false;\n        if (isset(self::$types[$type]))\n            $class = self::$types[$type];\n        if (!class_exists($class))\n            $class = get_called_class();\n\n        return $class::lookup($criteria);\n    }\n}\n\nclass ThreadEntries {\n    var $thread;\n\n    function __construct($thread) {\n        $this->thread = $thread;\n    }\n\n    function __tostring() {\n        return (string) $this->getVar();\n    }\n\n    function asVar() {\n        return $this->getVar();\n    }\n\n    function getVar($name='') {\n\n        $order = '';\n        switch ($name) {\n        case 'reversed':\n            $order = '-';\n        default:\n            $content = '';\n            $thread = $this->thread;\n            ob_start();\n            include INCLUDE_DIR.'client/templates/thread-export.tmpl.php';\n            $content = ob_get_contents();\n            ob_end_clean();\n            return $content;\n            break;\n        }\n    }\n\n    static function getVarScope() {\n      return array(\n        'reversed' => sprintf('%s %s', __('Thread Correspondence'),\n            __('in reversed order')),\n      );\n    }\n}\n\n// Ticket thread class\nclass TicketThread extends ObjectThread {\n    static function create($ticket=false) {\n        assert($ticket !== false);\n\n        $id = is_object($ticket) ? $ticket->getId() : $ticket;\n        $thread = parent::create(array(\n                    'object_id' => $id,\n                    'object_type' => ObjectModel::OBJECT_TYPE_TICKET\n                    ));\n        if ($thread->save())\n            return $thread;\n    }\n}\n\n/**\n * Class: ThreadEntryAction\n *\n * Defines a simple action to be performed on a thread entry item, such as\n * viewing the raw email headers used to generate the message, resend the\n * confirmation emails, etc.\n */\nabstract class ThreadEntryAction {\n    static $name;               // Friendly, translatable name\n    static $id;                 // Unique identifier used for plumbing\n    static $icon = 'cog';\n\n    var $entry;\n\n    function getName() {\n        $class = get_class($this);\n        return __($class::$name);\n    }\n\n    static function getId() {\n        return static::$id;\n    }\n\n    function getIcon() {\n        $class = get_class($this);\n        return 'icon-' . $class::$icon;\n    }\n\n    function getObJectId() {\n        return $this->entry->getThread()->getObjectId();\n    }\n\n    function __construct(ThreadEntry $thread) {\n        $this->entry = $thread;\n    }\n\n    abstract function trigger();\n\n    function isEnabled() {\n        return $this->isVisible();\n    }\n    function isVisible() {\n        return true;\n    }\n\n    /**\n     * getJsStub\n     *\n     * Retrieves a small JavaScript snippet to insert into the rendered page\n     * which should, via an AJAX callback, trigger this action to be\n     * performed. The URL for this sort of activity is already provided for\n     * you via the ::getAjaxUrl() method in this class.\n     */\n    abstract function getJsStub();\n\n    /**\n     * getAjaxUrl\n     *\n     * Generate a URL to be used as an AJAX callback. The URL can be used to\n     * trigger this thread entry action via the callback.\n     *\n     * Parameters:\n     * $dialog - (bool) used in conjunction with `$.dialog()` javascript\n     *      function which assumes the `ajax.php/` should be replace a leading\n     *      `#` in the url\n     */\n    function getAjaxUrl($dialog=false) {\n        return sprintf('%s%s/%d/thread/%d/%s',\n            $dialog ? '#' : 'ajax.php/',\n            $this->entry->getThread()->getObjectType() == 'T' ? 'tickets' : 'tasks',\n            $this->entry->getThread()->getObjectId(),\n            $this->entry->getId(),\n            static::getId()\n        );\n    }\n\n    function getTicketsAPI() {\n        return new TicketsAjaxAPI();\n    }\n\n    function getTasksAPI() {\n        return new TasksAjaxAPI();\n    }\n}\n\ninterface Threadable {\n    function getThreadId();\n    function getThread();\n    function postThreadEntry($type, $vars, $options=array());\n    function addCollaborator($user, $vars, &$errors, $event=true);\n}\n\n/**\n * ThreadActivity\n *\n * Object to thread activity\n *\n */\nclass ThreadActivity implements TemplateVariable {\n    var $title;\n    var $desc;\n\n    function __construct($title, $desc) {\n        $this->title = $title;\n        $this->desc = $desc;\n    }\n\n    function getTitle() {\n        return $this->title;\n    }\n\n    function getDescription() {\n        return $this->desc;\n    }\n    function asVar() {\n        return (string) $this->getTitle();\n    }\n\n    function getVar($tag) {\n        if ($tag && is_callable(array($this, 'get'.ucfirst($tag))))\n            return call_user_func(array($this, 'get'.ucfirst($tag)));\n\n        return false;\n    }\n\n    static function getVarScope() {\n        return array(\n          'title' => __('Activity Title'),\n          'description' => __('Activity Description'),\n        );\n    }\n}\n\n?>\n", "#\n# Default configuration. The format is key: value and the data will be\n# inserted into the %config table at install time\n#\n---\ncore:\n    time_format: 'hh:mm a'\n    date_format: 'MM/dd/y'\n    datetime_format: 'MM/dd/y h:mm a'\n    daydatetime_format: 'EEE, MMM d y h:mm a'\n    default_priority_id: 2\n    enable_daylight_saving: 0\n\n    reply_separator: '-- reply above this line --'\n\n    # Do not translate below here\n    isonline: 1\n    staff_ip_binding: 0\n    staff_max_logins: 4\n    staff_login_timeout: 2\n    staff_session_timeout: 30\n    passwd_reset_period: 0\n    client_max_logins: 4\n    client_login_timeout: 2\n    client_session_timeout: 30\n    max_page_size: 25\n    max_open_tickets: 0\n    autolock_minutes: 3\n    default_priority_id: 2\n    default_smtp_id: 0\n    use_email_priority: 0\n    enable_kb: 0\n    enable_premade: 1\n    enable_captcha: 0\n    enable_auto_cron: 0\n    enable_mail_polling: 0\n    send_sys_errors: 1\n    send_sql_errors: 1\n    send_login_errors: 1\n    save_email_headers: 1\n    strip_quoted_reply: 1\n    ticket_autoresponder: 0\n    message_autoresponder: 0\n    ticket_notice_active: 1\n    ticket_alert_active: 1\n    ticket_alert_admin: 1\n    ticket_alert_dept_manager: 1\n    ticket_alert_dept_members: 0\n    message_alert_active: 1\n    message_alert_laststaff: 1\n    message_alert_assigned: 1\n    message_alert_dept_manager: 0\n    note_alert_active: 0\n    note_alert_laststaff: 1\n    note_alert_assigned: 1\n    note_alert_dept_manager: 0\n    transfer_alert_active: 0\n    transfer_alert_assigned: 0\n    transfer_alert_dept_manager: 1\n    transfer_alert_dept_members: 0\n    overdue_alert_active: 1\n    overdue_alert_assigned: 1\n    overdue_alert_dept_manager: 1\n    overdue_alert_dept_members: 0\n    assigned_alert_active: 1\n    assigned_alert_staff: 1\n    assigned_alert_team_lead: 0\n    assigned_alert_team_members: 0\n    auto_claim_tickets: 1\n    auto_refer_closed: 1\n    collaborator_ticket_visibility: 1\n    require_topic_to_close: 0\n    show_related_tickets: 1\n    show_assigned_tickets: 1\n    show_answered_tickets: 0\n    hide_staff_name: 0\n    disable_agent_collabs: 0\n    overlimit_notice_active: 0\n    email_attachments: 1\n    ticket_number_format: '######'\n    ticket_sequence_id: 0\n    queue_bucket_counts: 0\n    task_number_format: '#'\n    task_sequence_id: 2\n    log_level: 2\n    log_graceperiod: 12\n    client_registration: 'public'\n    default_ticket_queue: 1\n    embedded_domain_whitelist: 'youtube.com, dailymotion.com, vimeo.com, player.vimeo.com, web.microsoftstream.com'\n", "#\n# This is popup help messages for the Admin Panel -> Settings -> Tickets\n#\n# Fields:\n# title - Shown in bold at the top of the popover window\n# content - The body of the help popover\n# links - List of links shows below the content\n#   title - Link title\n#   href - href of link (links starting with / are translated to the\n#       helpdesk installation path)\n#\n# The key names such as 'helpdesk_name' should not be translated as they\n# must match the HTML #ids put into the page template.\n#\n---\nnumber_format:\n    title: Ticket Number Format\n    content: >\n        This setting is used to generate ticket numbers. Use hash signs\n        (`#`) where digits are to be placed. Any other text in the number\n        format will be preserved. <span class=\"doc-desc-title\">Help\n        Topics</span> can define custom number formats.\n        <br/><br/>\n        For example, for six-digit numbers, use <code>######</code>.\n\nsequence_id:\n    title: Ticket Number Sequence\n    content: >\n        Choose a sequence from which to derive new ticket numbers. The\n        system has a incrementing sequence and a random sequence by default.\n        You may create as many sequences as you wish. Use various sequences\n        in the <span class=\"doc-desc-title\">Ticket Number\n        Format</span> configuration for help topics.\n\nqueue_bucket_counts:\n    title: Top-Level Ticket Counts\n    content: >\n        This setting is used to hide or show the ticket counts on Main-Level\n        queues. Get back to the way things used to be.\n\ndefault_ticket_status:\n    title: Default Status for new Tickets\n    content: >\n        Choose a status as the default for new tickets. This can be defined\n        for each help topic, if desired. It can also be overridden by a\n        ticket filter.\n    links:\n      - title: Manage Ticket Statuses\n        href: /scp/lists.php?type=ticket-status\n\ndefault_sla:\n    title: Default SLA\n    content: >\n        Choose the default Service Level Agreement to manage how long a ticket\n        can remain Open before it is rendered Overdue.\n    links:\n      - title: Create more SLA Plans\n        href: /scp/slas.php\n\ndefault_priority:\n    title: Default Priority\n    content: >\n        Choose a default <span class=\"doc-desc-title\">priority</span> for\n        tickets not assigned a priority automatically.\n        <br/><br/>\n        Priority can be assigned via the help topic, routed department, or\n        ticket filter settings.\n\nmaximum_open_tickets:\n    title: Maximum Open Tickets\n    content: >\n        Enter the maximum <em>number</em> of tickets a User is permitted to\n        have <strong>open</strong> in your help desk.\n        <br><br>\n        Enter <span class=\"doc-desc-opt\">0 </span> if you prefer to disable this limitation.\n\nemail_ticket_priority:\n    title: Email Ticket Priority\n    content: >\n        Use email priority assigned by addressee\u2019s mail service\n\nshow_related_tickets:\n    title: Show Related Tickets\n    content: >\n        Show all related tickets on user login - otherwise access is restricted to\n        one ticket view per login\n\nhuman_verification:\n    title: Human Verification\n    content: >\n        Enable CAPTCHA on the Client Portal to verify an incoming ticket is the\n        result of human activity.\n        <br><br>\n        Requires GDLib library\n\nclaim_tickets:\n    title: Claim Tickets on Response\n    content: >\n        Enable this to auto-assign unassigned tickets to the responding Agent.\n        <br><br>\n        Reopened tickets are always assigned to the last respondent unless auto\n        assign on reopen is disabled on the Department level.\n\nauto_refer:\n    title: Auto-refer Tickets on Close\n    content: >\n        Enable this to auto-refer tickets to the assigned or closing\n        Agent when a ticket is closed.\n        <br><br>\n        This is necessary when you want to give agents with limited access\n        continued access to assigned tickets after they're closed.\n\ncollaborator_ticket_visibility:\n    title: Collaborator Tickets Visibility\n    content: >\n        If Enabled, Users will have visibility to ALL Tickets they participate in\n        when signing into the Web Portal.\n        <br><br>\n        If Disabled, Users will only be able to see their own Tickets\n        when signing into the Web Portal.\n\nrequire_topic_to_close:\n    title: Require Help Topic to Close\n    content: >\n        If Enabled, a Ticket must have a Help Topic in order to be Closed by an Agent\n\nassigned_tickets:\n    title: Assigned Tickets\n    content: >\n        Enable this feature to exclude assigned tickets from the <span class=\"doc-desc-title\">Open\n        Tickets Queue</span>.\n\nanswered_tickets:\n    title: Answered Tickets\n    content: >\n        Enable this feature to show answered tickets in the <span\n        class=\"doc-desc-title\">Answered Tickets Queue</span>. Otherwise, it\n        will be included in the <span class=\"doc-desc-title\">Open Tickets\n        Queue</span>.\n\nticket_attachment_settings:\n    title: Ticket Thread Attachments\n    content: >\n        Configure settings for files attached to the <span\n        class=\"doc-desc-title\">issue details</span> field. These settings\n        are used for all new tickets and new messages regardless of the\n        source channel (web portal, email, api, etc.).\n", "<?php\nif(!defined('OSTADMININC') || !$thisstaff || !$thisstaff->isAdmin() || !$config) die('Access Denied');\nif(!($maxfileuploads=ini_get('max_file_uploads')))\n    $maxfileuploads=DEFAULT_MAX_FILE_UPLOADS;\n?>\n<h2><?php echo __('Ticket Settings and Options');?></h2>\n<form action=\"settings.php?t=tickets\" method=\"post\" class=\"save\">\n<?php csrf_token(); ?>\n<input type=\"hidden\" name=\"t\" value=\"tickets\" >\n\n<ul class=\"clean tabs\">\n    <li class=\"active\"><a href=\"#settings\"><i class=\"icon-asterisk\"></i>\n        <?php echo __('Settings'); ?></a></li>\n    <li><a href=\"#autoresp\"><i class=\"icon-mail-reply-all\"></i>\n        <?php echo __('Autoresponder'); ?></a></li>\n    <li><a href=\"#alerts\"><i class=\"icon-bell-alt\"></i>\n        <?php echo __('Alerts and Notices'); ?></a></li>\n    <li><a href=\"#queues\"><i class=\"icon-table\"></i>\n        <?php echo __('Queues'); ?></a></li>\n</ul>\n<div class=\"tab_content\" id=\"settings\">\n<table class=\"form_table settings_table\" width=\"940\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">\n                <em><?php echo __('System-wide default ticket settings and options.'); ?></em>\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <?php echo __('Default Ticket Number Format'); ?>:\n            </td>\n            <td>\n                <input type=\"text\" name=\"ticket_number_format\" value=\"<?php\n                echo $config['ticket_number_format']; ?>\"/>\n                <span class=\"faded\"><?php echo __('e.g.'); ?> <span id=\"format-example\"><?php\n                    if ($config['ticket_sequence_id'])\n                        $seq = Sequence::lookup($config['ticket_sequence_id']);\n                    if (!isset($seq))\n                        $seq = new RandomSequence();\n                    echo $seq->current($config['ticket_number_format']);\n                    ?></span></span>\n                <i class=\"help-tip icon-question-sign\" href=\"#number_format\"></i>\n                <div class=\"error\"><?php echo $errors['ticket_number_format']; ?></div>\n            </td>\n        </tr>\n        <tr><td width=\"220\"><?php echo __('Default Ticket Number Sequence'); ?>:</td>\n<?php $selected = 'selected=\"selected\"'; ?>\n            <td>\n                <select name=\"ticket_sequence_id\">\n                <option value=\"0\" <?php if ($config['ticket_sequence_id'] == 0) echo $selected;\n                    ?>>&mdash; <?php echo __('Random'); ?> &mdash;</option>\n<?php foreach (Sequence::objects() as $s) { ?>\n                <option value=\"<?php echo $s->id; ?>\" <?php\n                    if ($config['ticket_sequence_id'] == $s->id) echo $selected;\n                    ?>><?php echo $s->name; ?></option>\n<?php } ?>\n                </select>\n                <button class=\"action-button pull-right\" onclick=\"javascript:\n                $.dialog('ajax.php/sequence/manage', 205);\n                return false;\n                \"><i class=\"icon-gear\"></i> <?php echo __('Manage'); ?></button>\n                <i class=\"help-tip icon-question-sign\" href=\"#sequence_id\"></i>\n            </td>\n        </tr>\n        <tr><td width=\"220\"><?php echo __('Top-Level Ticket Counts'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"queue_bucket_counts\" <?php echo $config['queue_bucket_counts']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#queue_bucket_counts\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\" class=\"required\">\n                <?php echo __('Default Status'); ?>:\n            </td>\n            <td>\n                <span>\n                <select name=\"default_ticket_status_id\">\n                <?php\n                $criteria = array('states' => array('open'));\n                foreach (TicketStatusList::getStatuses($criteria) as $status) {\n                    $name = $status->getName();\n                    if (!($isenabled = $status->isEnabled()))\n                        $name.=' '.__('(disabled)');\n\n                    echo sprintf('<option value=\"%d\" %s %s>%s</option>',\n                            $status->getId(),\n                            ($config['default_ticket_status_id'] ==\n                             $status->getId() && $isenabled)\n                             ? 'selected=\"selected\"' : '',\n                             $isenabled ? '' : 'disabled=\"disabled\"',\n                             $name\n                            );\n                }\n                ?>\n                </select>\n                &nbsp;\n                <span class=\"error\">*&nbsp;<?php echo $errors['default_ticket_status_id']; ?></span>\n                <i class=\"help-tip icon-question-sign\" href=\"#default_ticket_status\"></i>\n                </span>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\" class=\"required\"><?php echo __('Default Priority');?>:</td>\n            <td>\n                <select name=\"default_priority_id\">\n                    <?php\n                    $priorities= db_query('SELECT priority_id,priority_desc FROM '.TICKET_PRIORITY_TABLE);\n                    while (list($id,$tag) = db_fetch_row($priorities)){ ?>\n                        <option value=\"<?php echo $id; ?>\"<?php echo ($config['default_priority_id']==$id)?'selected':''; ?>><?php echo $tag; ?></option>\n                    <?php\n                    } ?>\n                </select>\n                &nbsp;<span class=\"error\">*&nbsp;<?php echo $errors['default_priority_id']; ?></span> <i class=\"help-tip icon-question-sign\" href=\"#default_priority\"></i>\n             </td>\n        </tr>\n        <tr>\n            <td width=\"180\" class=\"required\">\n                <?php echo __('Default SLA');?>:\n            </td>\n            <td>\n                <span>\n                <select name=\"default_sla_id\">\n                    <option value=\"0\">&mdash; <?php echo __('None');?> &mdash;</option>\n                    <?php\n                    if($slas=SLA::getSLAs()) {\n                        foreach($slas as $id => $name) {\n                            echo sprintf('<option value=\"%d\" %s>%s</option>',\n                                    $id,\n                                    ($config['default_sla_id'] && $id==$config['default_sla_id'])?'selected=\"selected\"':'',\n                                    $name);\n                        }\n                    }\n                    ?>\n                </select>\n                &nbsp;<span class=\"error\">*&nbsp;<?php echo $errors['default_sla_id']; ?></span>  <i class=\"help-tip icon-question-sign\" href=\"#default_sla\"></i>\n                </span>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\"><?php echo __('Default Help Topic'); ?>:</td>\n            <td>\n                <select name=\"default_help_topic\">\n                    <option value=\"0\">&mdash; <?php echo __('None'); ?> &mdash;</option><?php\n                    $topics = Topic::getHelpTopics(false, Topic::DISPLAY_DISABLED);\n                    while (list($id,$topic) = each($topics)) { ?>\n                        <option value=\"<?php echo $id; ?>\"<?php echo ($config['default_help_topic']==$id)?'selected':''; ?>><?php echo $topic; ?></option>\n                    <?php\n                    } ?>\n                </select><br/>\n                <span class=\"error\"><?php echo $errors['default_help_topic']; ?></span>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\"><?php echo __('Lock Semantics'); ?>:</td>\n            <td>\n                <select name=\"ticket_lock\" <?php if ($cfg->getLockTime() == 0) echo 'disabled=\"disabled\"'; ?>>\n<?php foreach (array(\n    Lock::MODE_DISABLED => __('Disabled'),\n    Lock::MODE_ON_VIEW => __('Lock on view'),\n    Lock::MODE_ON_ACTIVITY => __('Lock on activity'),\n) as $v => $desc) { ?>\n                <option value=\"<?php echo $v; ?>\" <?php\n                    if ($config['ticket_lock'] == $v) echo 'selected=\"selected\"';\n                    ?>><?php echo $desc; ?></option>\n<?php } ?>\n                </select>\n                <div class=\"error\"><?php echo $errors['ticket_lock']; ?></div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <?php echo __('Default Ticket Queue'); ?>:\n            </td>\n            <td>\n                <select name=\"default_ticket_queue\">\n<?php foreach (CustomQueue::queues() as $cq) {\n?>\n                  <option value=\"<?php echo $cq->id; ?>\"\n            <?php if ($cq->getId() == $config['default_ticket_queue']) echo 'selected=\"selected\"'; ?>\n            ><?php echo $cq->getFullName(); ?></option>\n<?php } ?>\n                </select>\n                <i class=\"help-tip icon-question-sign\" href=\"#default_ticket_queue\"></i>\n                <div class=\"error\"><?php echo $errors['default_ticket_queue']; ?></div>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Maximum <b>Open</b> Tickets');?>:</td>\n            <td>\n                <input type=\"text\" name=\"max_open_tickets\" size=4 value=\"<?php echo $config['max_open_tickets']; ?>\">\n                <?php echo __('per end user'); ?>\n                <span class=\"error\">*&nbsp;<?php echo $errors['max_open_tickets']; ?></span>\n                <i class=\"help-tip icon-question-sign\" href=\"#maximum_open_tickets\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Human Verification');?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"enable_captcha\" <?php echo $config['enable_captcha']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable CAPTCHA on new web tickets.');?>\n                &nbsp;<font class=\"error\">&nbsp;<?php echo $errors['enable_captcha']; ?></font>\n                &nbsp;<i class=\"help-tip icon-question-sign\" href=\"#human_verification\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Collaborator Tickets Visibility'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"collaborator_ticket_visibility\" <?php echo $config['collaborator_ticket_visibility']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#collaborator_ticket_visibility\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Claim on Response'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"auto_claim_tickets\" <?php echo $config['auto_claim_tickets']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#claim_tickets\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Auto-refer on Close'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"auto_refer_closed\" <?php echo $config['auto_refer_closed']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip\n                icon-question-sign\" href=\"#auto_refer\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Require Help Topic to Close'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"require_topic_to_close\" <?php echo $config['require_topic_to_close']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#require_topic_to_close\"></i>\n            </td>\n        </tr>\n        <tr>\n            <th colspan=\"2\">\n                <em><b><?php echo __('Attachments');?></b>:  <?php echo __('Size and maximum uploads setting mainly apply to web tickets.');?></em>\n            </th>\n        </tr>\n        <tr>\n            <td width=\"180\"><?php echo __('Ticket Attachment Settings');?>:</td>\n            <td>\n<?php\n                $tform = TicketForm::objects()->one()->getForm();\n                $f = $tform->getField('message');\n?>\n                <a class=\"action-button field-config\" style=\"overflow:inherit\"\n                    href=\"#ajax.php/form/field-config/<?php\n                        echo $f->get('id'); ?>\"\n                    onclick=\"javascript:\n                        $.dialog($(this).attr('href').substr(1), [201]);\n                        return false;\n                    \"><i class=\"icon-edit\"></i> <?php echo __('Config'); ?></a>\n                <i class=\"help-tip icon-question-sign\" href=\"#ticket_attachment_settings\"></i>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div class=\"hidden tab_content\" id=\"autoresp\"\n    data-tip-namespace=\"settings.autoresponder\">\n    <?php include STAFFINC_DIR . 'settings-autoresp.inc.php'; ?>\n</div>\n<div class=\"hidden tab_content\" id=\"alerts\"\n    data-tip-namespace=\"settings.alerts\">\n    <?php include STAFFINC_DIR . 'settings-alerts.inc.php'; ?>\n</div>\n\n<div class=\"hidden tab_content\" id=\"queues\">\n    <?php include STAFFINC_DIR . 'queues-ticket.inc.php'; ?>\n</div>\n\n<p style=\"text-align:center;\">\n    <input class=\"button\" type=\"submit\" name=\"submit\" value=\"<?php echo __('Save Changes');?>\">\n    <input class=\"button\" type=\"reset\" name=\"reset\" value=\"<?php echo __('Reset Changes');?>\">\n</p>\n</form>\n<script type=\"text/javascript\">\n$(function() {\n    var request = null,\n      update_example = function() {\n      request && request.abort();\n      request = $.get('ajax.php/sequence/'\n        + $('[name=ticket_sequence_id] :selected').val(),\n        {'format': $('[name=ticket_number_format]').val()},\n        function(data) { $('#format-example').text(data); }\n      );\n    };\n    $('[name=ticket_sequence_id]').on('change', update_example);\n    $('[name=ticket_number_format]').on('keyup', update_example);\n});\n</script>\n"], "fixing_code": ["<?php\n/*********************************************************************\n    class.config.php\n\n    osTicket config info manager.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.orm.php';\n\nclass Config {\n    var $config = array();\n\n    var $section = null;                    # Default namespace ('core')\n    var $table = CONFIG_TABLE;              # Table name (with prefix)\n    var $section_column = 'namespace';      # namespace column name\n\n    var $session = null;                    # Session-backed configuration\n\n    # Defaults for this configuration. If settings don't exist in the\n    # database yet, the ->getInfo() method will not include the (default)\n    # values in the returned array. $defaults allows developers to define\n    # new settings and the corresponding default values.\n    var $defaults = array();                # List of default values\n\n    function __construct($section=null, $defaults=array()) {\n        if ($section)\n            $this->section = $section;\n\n        if ($this->section === null)\n            return false;\n\n        if ($defaults)\n            $this->defaults = $defaults;\n\n        if (isset($_SESSION['cfg:'.$this->section]))\n            $this->session = &$_SESSION['cfg:'.$this->section];\n\n        $this->load();\n    }\n\n    function load() {\n        foreach ($this->items() as $I)\n            $this->config[$I->key] = $I;\n    }\n\n    function getNamespace() {\n        return $this->section;\n    }\n\n    function getInfo() {\n        $info = $this->defaults;\n        foreach ($this->config as $key=>$item)\n            $info[$key] = $item->value;\n        return $info;\n    }\n\n    function get($key, $default=null) {\n        if (isset($this->session) && isset($this->session[$key]))\n            return $this->session[$key];\n        elseif (isset($this->config[$key]))\n            return $this->config[$key]->value;\n        elseif (isset($this->defaults[$key]))\n            return $this->defaults[$key];\n\n        return $default;\n    }\n\n    function exists($key) {\n        return $this->get($key, null) ? true : false;\n    }\n\n    function set($key, $value) {\n        return ($this->update($key, $value)) ? $value : null;\n    }\n\n    function persist($key, $value) {\n        if (!isset($this->session)) {\n            $this->session = &$_SESSION['cfg:'.$this->section];\n            $this->session = array();\n        }\n        $this->session[$key] = $value;\n        return true;\n    }\n\n    function lastModified($key) {\n        if (isset($this->config[$key]))\n            return $this->config[$key]->updated;\n\n        return false;\n    }\n\n    function create($key, $value) {\n        $item = new ConfigItem([\n            $this->section_column => $this->section,\n            'key' => $key,\n            'value' => $value,\n        ]);\n        if (!$item->save())\n            return false;\n\n        return true;\n    }\n\n    function update($key, $value) {\n        if (!$key)\n            return false;\n        elseif (!isset($this->config[$key]))\n            return $this->create($key, $value);\n\n        $item = $this->config[$key];\n        $before = $item->value;\n        $item->value = $value;\n\n        if ($before != $item->value) {\n            $type = array('type' => 'edited', 'key' => $item->ht['key']);\n            Signal::send('object.edited', $item, $type);\n        }\n\n        return $item->save();\n    }\n\n    function updateAll($updates) {\n        foreach ($updates as $key=>$value)\n            if (!$this->update($key, $value))\n                return false;\n        return true;\n    }\n\n    function destroy() {\n        unset($this->session);\n        return $this->items()->delete() > 0;\n    }\n\n    function items() {\n        return ConfigItem::items($this->section, $this->section_column);\n    }\n}\n\nclass ConfigItem\nextends VerySimpleModel {\n    static $meta = array(\n        'table' => CONFIG_TABLE,\n        'pk' => array('id'),\n    );\n\n    static function items($namespace, $column='namespace') {\n\n        $items = static::objects()\n            ->filter([$column => $namespace]);\n\n        try {\n            count($items);\n        }\n        catch (InconsistentModelException $ex) {\n            // Pending upgrade ??\n            $items = array();\n        }\n\n        return $items;\n    }\n\n    function save($refetch=false) {\n        if ($this->dirty)\n            $this->updated = SqlFunction::NOW();\n        return parent::save($this->dirty || $refetch);\n    }\n\n    // Clean password reset tokens that have expired\n    static function cleanPwResets() {\n        global $cfg;\n\n        if (!$cfg || !($period = $cfg->getPwResetWindow())) // In seconds\n            return false;\n\n        return ConfigItem::objects()\n             ->filter(array(\n                'namespace' => 'pwreset',\n                'updated__lt' => SqlFunction::NOW()->minus(SqlInterval::SECOND($period)),\n            ))->delete();\n    }\n}\n\nclass OsticketConfig extends Config {\n    var $table = CONFIG_TABLE;\n    var $section = 'core';\n\n    var $defaultDept;   //Default Department\n    var $defaultSLA;   //Default SLA\n    var $defaultSchedule; // Default Schedule\n    var $defaultEmail;  //Default Email\n    var $alertEmail;  //Alert Email\n    var $defaultSMTPEmail; //Default  SMTP Email\n\n    var $defaults = array(\n        'allow_pw_reset' =>     true,\n        'pw_reset_window' =>    30,\n        'enable_richtext' =>    true,\n        'enable_avatars' =>     true,\n        'allow_attachments' =>  true,\n        'agent_name_format' =>  'full', # First Last\n        'client_name_format' => 'original', # As entered\n        'auto_claim_tickets'=>  true,\n        'auto_refer_closed' => true,\n        'collaborator_ticket_visibility' =>  true,\n        'disable_agent_collabs' => false,\n        'require_topic_to_close' =>  false,\n        'system_language' =>    'en_US',\n        'default_storage_bk' => 'D',\n        'message_autoresponder_collabs' => true,\n        'add_email_collabs' => true,\n        'clients_only' => false,\n        'client_registration' => 'closed',\n        'accept_unregistered_email' => true,\n        'default_help_topic' => 0,\n        'help_topic_sort_mode' => 'a',\n        'client_verify_email' => 1,\n        'allow_auth_tokens' => 1,\n        'verify_email_addrs' => 1,\n        'client_avatar' => 'gravatar.mm',\n        'agent_avatar' => 'gravatar.mm',\n        'ticket_lock' => 2, // Lock on activity\n        'max_open_tickets' => 0,\n        'files_req_auth' => 1,\n        'force_https' => '',\n        'allow_external_images' => 1,\n    );\n\n    function __construct($section=null) {\n        parent::__construct($section);\n\n        if (count($this->config) == 0) {\n            // Fallback for osticket < 1.7@852ca89e\n            $sql='SELECT * FROM '.$this->table.' WHERE id = 1';\n            $meta = ConfigItem::getMeta();\n            if (($res=db_query($sql)) && db_num_rows($res))\n                foreach (db_fetch_array($res) as $key=>$value)\n                    $this->config[$key] = $meta->newInstance(array('value'=>$value));\n        }\n\n        return true;\n    }\n\n    function lastModified($key=false) {\n        return max(array_map(array('parent', 'lastModified'),\n            array_keys($this->config)));\n    }\n\n    function isHelpDeskOffline() {\n        return !$this->isOnline();\n    }\n\n    function isHelpDeskOnline() {\n        return $this->isOnline();\n    }\n\n    function isOnline() {\n        return ($this->get('isonline'));\n    }\n\n    function isKnowledgebaseEnabled() {\n        global $thisclient;\n\n        if ($this->get('restrict_kb', false)\n            && (!$thisclient || $thisclient->isGuest())\n        ) {\n            return false;\n        }\n        require_once(INCLUDE_DIR.'class.faq.php');\n        return ($this->get('enable_kb') && FAQ::countPublishedFAQs());\n    }\n\n    function isCannedResponseEnabled() {\n        return $this->get('enable_premade');\n    }\n\n    function getVersion() {\n        return THIS_VERSION;\n    }\n\n    function getSchemaSignature($section=null) {\n\n        if ((!$section || $section == $this->section)\n                && ($v=$this->get('schema_signature')))\n            return $v;\n\n        // 1.7 after namespaced configuration, other namespace\n        if ($section) {\n            $sql='SELECT value FROM '.$this->table\n                .' WHERE `key` = \"schema_signature\" and namespace='.db_input($section);\n            if (($res=db_query($sql, false)) && db_num_rows($res))\n                return db_result($res);\n        }\n\n        // 1.7 before namespaced configuration\n        $sql='SELECT `schema_signature` FROM '.$this->table\n            .' WHERE id=1';\n        if (($res=db_query($sql, false)) && db_num_rows($res))\n            return db_result($res);\n\n        // old version 1.6\n        return md5(self::getDBVersion());\n    }\n\n    function getDbTimezone() {\n        if (!$this->exists('db_timezone')) {\n            require_once INCLUDE_DIR . 'class.timezone.php';\n            $this->persist('db_timezone', DbTimezone::determine());\n        }\n        return $this->get('db_timezone');\n    }\n\n    function getDefaultTimezone() {\n        return $this->get('default_timezone');\n    }\n\n    function getTimezone($user=false) {\n        global $thisstaff, $thisclient;\n\n        $user = $user ?: $thisstaff;\n\n        if (!$user && $thisclient && is_callable(array($thisclient, 'getTimezone')))\n            $user = $thisclient;\n\n        if ($user)\n            $zone = $user->getTimezone();\n\n        if (!$zone)\n            $zone = $this->get('default_timezone');\n\n        if (!$zone)\n            $zone = ini_get('date.timezone');\n\n        return $zone;\n    }\n\n    function getDefaultLocale() {\n        return $this->get('default_locale');\n    }\n\n    /* Date & Time Formats */\n    function getTimeFormat($propogate=false) {\n        global $cfg;\n\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('time_format');\n\n        if ($propogate) {\n            $format = 'h:i a'; // Default\n            if (class_exists('IntlDateFormatter')) {\n                $formatter = new IntlDateFormatter(\n                    Internationalization::getCurrentLocale(),\n                    IntlDateFormatter::NONE,\n                    IntlDateFormatter::SHORT,\n                    $this->getTimezone(),\n                    IntlDateFormatter::GREGORIAN\n                );\n                $format = $formatter->getPattern();\n            }\n            // Check if we're forcing 24 hrs format\n            if ($cfg && $cfg->isForce24HourTime() && $format)\n                $format = trim(str_replace(array('a', 'h'), array('', 'H'),\n                            $format));\n            return $format;\n        }\n\n        return '';\n    }\n\n    function isForce24HourTime() {\n        return $this->get('date_formats') == '24';\n    }\n\n    /**\n     * getDateFormat\n     *\n     * Retrieve the current date format for the system, as a string, and in\n     * the intl (icu) format.\n     *\n     * Parameters:\n     * $propogate - (boolean:default=false), if set and the configuration\n     *      indicates default date and time formats (ie. not custom), then\n     *      the intl date formatter will be queried to find the pattern used\n     *      internally for the current locale settings.\n     */\n    function getDateFormat($propogate=false) {\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('date_format');\n        if ($propogate) {\n            if (class_exists('IntlDateFormatter')) {\n                $formatter = new IntlDateFormatter(\n                    Internationalization::getCurrentLocale(),\n                    IntlDateFormatter::SHORT,\n                    IntlDateFormatter::NONE,\n                    $this->getTimezone(),\n                    IntlDateFormatter::GREGORIAN\n                );\n                return $formatter->getPattern();\n            }\n            // Use a standard\n            return 'y-M-d';\n        }\n        return '';\n    }\n\n    function getDateTimeFormat() {\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('datetime_format');\n\n        if (class_exists('IntlDateFormatter'))\n            return sprintf('%s %s', $this->getDateFormat(true),\n                    $this->getTimeFormat(true));\n\n        return '';\n    }\n\n    function getDayDateTimeFormat() {\n        if ($this->get('date_formats') == 'custom')\n            return $this->get('daydatetime_format');\n        return '';\n    }\n\n    function getConfigInfo() {\n        return $this->getInfo();\n    }\n\n    function getTitle() {\n        return $this->get('helpdesk_title');\n    }\n\n    function getUrl() {\n        return $this->get('helpdesk_url');\n    }\n\n    function getBaseUrl() { //Same as above with no trailing slash.\n        return rtrim($this->getUrl(),'/');\n    }\n\n    function getPageSize() {\n        return $this->get('max_page_size');\n    }\n\n    function getGracePeriod() {\n        return $this->get('overdue_grace_period');\n    }\n\n    function getPasswdResetPeriod() {\n        return $this->get('passwd_reset_period');\n    }\n\n    function isRichTextEnabled() {\n        return $this->get('enable_richtext');\n    }\n\n    function getAllowIframes() {\n        return str_replace(array(', ', ','), array(' ', ' '), $this->get('allow_iframes')) ?: \"'self'\";\n    }\n\n    function getIframeWhitelist() {\n        $whitelist = array_filter(explode(',', str_replace(' ', '', $this->get('embedded_domain_whitelist'))));\n\n        return !empty($whitelist) ? $whitelist : null;\n    }\n\n    function getACL() {\n        if (!($acl = $this->get('acl')))\n            return null;\n\n        return explode(',', str_replace(' ', '', $acl));\n    }\n\n    function getACLBackendOpts() {\n        return array(\n            0 => __('Disabled'),\n            1 => __('All'),\n            2 => __('Client Portal'),\n            3 => __('Staff Panel')\n        );\n    }\n\n    function getACLBackend() {\n        return $this->get('acl_backend') ?: 0;\n    }\n\n    function isAvatarsEnabled() {\n        return $this->get('enable_avatars');\n    }\n\n    function isTicketLockEnabled() {\n        return (($this->getTicketLockMode() != Lock::MODE_DISABLED)\n                && $this->getLockTime());\n    }\n\n    function getClientTimeout() {\n        return $this->getClientSessionTimeout();\n    }\n\n    function getClientSessionTimeout() {\n        return $this->get('client_session_timeout')*60;\n    }\n\n    function getClientLoginTimeout() {\n        return $this->get('client_login_timeout')*60;\n    }\n\n    function getClientMaxLogins() {\n        return $this->get('client_max_logins');\n    }\n\n    function getStaffTimeout() {\n        return $this->getStaffSessionTimeout();\n    }\n\n    function getStaffSessionTimeout() {\n        return $this->get('staff_session_timeout')*60;\n    }\n\n    function getStaffLoginTimeout() {\n        return $this->get('staff_login_timeout')*60;\n    }\n\n    function getStaffMaxLogins() {\n        return $this->get('staff_max_logins');\n    }\n\n    function getStaffAvatarSource() {\n        require_once INCLUDE_DIR . 'class.avatar.php';\n        list($source, $mode) = explode('.', $this->get('agent_avatar'), 2);\n        return AvatarSource::lookup($source, $mode);\n    }\n\n    function getClientAvatarSource() {\n        require_once INCLUDE_DIR . 'class.avatar.php';\n        list($source, $mode) = explode('.', $this->get('client_avatar'), 2);\n        return AvatarSource::lookup($source, $mode);\n    }\n\n    function getLockTime() {\n        return $this->get('autolock_minutes');\n    }\n\n    function getTicketLockMode() {\n        return $this->get('ticket_lock');\n    }\n\n    function getAgentNameFormat() {\n        return $this->get('agent_name_format');\n    }\n\n    function getClientNameFormat() {\n        return $this->get('client_name_format');\n    }\n\n    function getDefaultDeptId() {\n        return $this->get('default_dept_id');\n    }\n\n    function getDefaultDept() {\n\n        if(!$this->defaultDept && $this->getDefaultDeptId())\n            $this->defaultDept=Dept::lookup($this->getDefaultDeptId());\n\n        return $this->defaultDept;\n    }\n\n    function getDefaultEmailId() {\n        return $this->get('default_email_id');\n    }\n\n    function getDefaultEmail() {\n\n        if(!$this->defaultEmail && $this->getDefaultEmailId())\n            $this->defaultEmail = Email::lookup($this->getDefaultEmailId());\n\n        return $this->defaultEmail;\n    }\n\n    function getDefaultEmailAddress() {\n        return ($email=$this->getDefaultEmail()) ? $email->getAddress() : null;\n    }\n\n    function getDefaultTicketStatusId() {\n        return $this->get('default_ticket_status_id', 1);\n    }\n\n    function getDefaultSLAId() {\n        return $this->get('default_sla_id');\n    }\n\n    function getDefaultSLA() {\n\n        if(!$this->defaultSLA && $this->getDefaultSLAId())\n            $this->defaultSLA = SLA::lookup($this->getDefaultSLAId());\n\n        return $this->defaultSLA;\n    }\n\n    function getDefaultScheduleId() {\n        return $this->get('schedule_id');\n    }\n\n    function getDefaultSchedule() {\n        if (!isset($this->defaultSchedule) && $this->getDefaultScheduleId())\n            $this->defaultSchedule = BusinessHoursSchedule::lookup(\n                    $this->getDefaultScheduleId());\n\n        return $this->defaultSchedule;\n    }\n\n    function getAlertEmailId() {\n        return $this->get('alert_email_id');\n    }\n\n    function getAlertEmail() {\n\n        if(!$this->alertEmail)\n            if(!($this->alertEmail = Email::lookup($this->getAlertEmailId())))\n                $this->alertEmail = $this->getDefaultEmail();\n\n        return $this->alertEmail;\n    }\n\n    function getDefaultSMTPEmail() {\n\n        if(!$this->defaultSMTPEmail && $this->get('default_smtp_id'))\n            $this->defaultSMTPEmail = Email::lookup($this->get('default_smtp_id'));\n\n        return $this->defaultSMTPEmail;\n    }\n\n    function getDefaultPriorityId() {\n        return $this->get('default_priority_id');\n    }\n\n    function getDefaultPriority() {\n        if (!isset($this->defaultPriority))\n            $this->defaultPriority = Priority::lookup($this->getDefaultPriorityId());\n\n        return $this->defaultPriority;\n    }\n\n    function getDefaultTopicId() {\n        return $this->get('default_help_topic');\n    }\n\n    function getDefaultTopic() {\n        return Topic::lookup($this->getDefaultTopicId());\n    }\n\n    function getTopicSortMode() {\n        return $this->get('help_topic_sort_mode');\n    }\n\n    function forceHttps() {\n        return $this->get('force_https') == 'on';\n    }\n\n    function setTopicSortMode($mode) {\n        $modes = static::allTopicSortModes();\n        if (!isset($modes[$mode]))\n            throw new InvalidArgumentException(sprintf(\n                '%s: Unsupported help topic sort mode', $mode));\n\n        $this->update('help_topic_sort_mode', $mode);\n    }\n\n    static function allTopicSortModes() {\n        return array(\n            Topic::SORT_ALPHA   => __('Alphabetically'),\n            Topic::SORT_MANUAL  => __('Manually'),\n        );\n    }\n\n    function getDefaultTemplateId() {\n        return $this->get('default_template_id');\n    }\n\n    function getDefaultTemplate() {\n\n        if(!$this->defaultTemplate && $this->getDefaultTemplateId())\n            $this->defaultTemplate = EmailTemplateGroup::lookup($this->getDefaultTemplateId());\n\n        return $this->defaultTemplate;\n    }\n\n    function getLandingPageId() {\n        return $this->get('landing_page_id');\n    }\n\n    function getLandingPage() {\n\n        if(!$this->landing_page && $this->getLandingPageId())\n            $this->landing_page = Page::lookup($this->getLandingPageId());\n\n        return $this->landing_page;\n    }\n\n    function getOfflinePageId() {\n        return $this->get('offline_page_id');\n    }\n\n    function getOfflinePage() {\n\n        if(!$this->offline_page && $this->getOfflinePageId())\n            $this->offline_page = Page::lookup($this->getOfflinePageId());\n\n        return $this->offline_page;\n    }\n\n    function getThankYouPageId() {\n        return $this->get('thank-you_page_id');\n    }\n\n    function getThankYouPage() {\n\n        if(!$this->thankyou_page && $this->getThankYouPageId())\n            $this->thankyou_page = Page::lookup($this->getThankYouPageId());\n\n        return $this->thankyou_page;\n    }\n\n    function getDefaultPages() {\n        /* Array of ids...as opposed to objects */\n        return array(\n                $this->getLandingPageId(),\n                $this->getOfflinePageId(),\n                $this->getThankYouPageId(),\n                );\n    }\n\n    function getMaxOpenTickets() {\n         return $this->get('max_open_tickets');\n    }\n\n    function getMaxFileSize() {\n        return $this->get('max_file_size');\n    }\n\n    function getLogLevel() {\n        return $this->get('log_level');\n    }\n\n    function getLogGracePeriod() {\n        return $this->get('log_graceperiod');\n    }\n\n    function enableStaffIPBinding() {\n        return ($this->get('staff_ip_binding'));\n    }\n\n    /**\n     * Configuration: allow_pw_reset\n     *\n     * TRUE if the <a>Forgot my password</a> link and system should be\n     * enabled, and FALSE otherwise.\n     */\n    function allowPasswordReset() {\n        return $this->get('allow_pw_reset');\n    }\n\n    /**\n     * Configuration: pw_reset_window\n     *\n     * Number of minutes for which the password reset token is valid.\n     *\n     * Returns: Number of seconds the password reset token is valid. The\n     *      number of minutes from the database is automatically converted\n     *      to seconds here.\n     */\n    function getPwResetWindow() {\n        // pw_reset_window is stored in minutes. Return value in seconds\n        return $this->get('pw_reset_window') * 60;\n    }\n\n    function isClientLoginRequired() {\n        return $this->get('clients_only');\n    }\n\n    function isClientRegistrationEnabled() {\n        return in_array($this->getClientRegistrationMode(),\n            array('public', 'auto'));\n    }\n\n    function getClientRegistrationMode() {\n        return $this->get('client_registration');\n    }\n\n    function isClientRegistrationMode($modes) {\n        if (!is_array($modes))\n            $modes = array($modes);\n\n        return in_array($this->getClientRegistrationMode(), $modes);\n    }\n\n    function isClientEmailVerificationRequired() {\n        return $this->get('client_verify_email');\n    }\n\n    function isAuthTokenEnabled() {\n        return $this->get('allow_auth_tokens');\n    }\n\n    function isCaptchaEnabled() {\n        return (extension_loaded('gd') && function_exists('gd_info') && $this->get('enable_captcha'));\n    }\n\n    function isAutoCronEnabled() {\n        return ($this->get('enable_auto_cron'));\n    }\n\n    function isEmailPollingEnabled() {\n        return ($this->get('enable_mail_polling'));\n    }\n\n    function useEmailPriority() {\n        return ($this->get('use_email_priority'));\n    }\n\n    function acceptUnregisteredEmail() {\n        return $this->get('accept_unregistered_email');\n    }\n\n    function addCollabsViaEmail() {\n        return ($this->get('add_email_collabs'));\n    }\n\n    function getAdminEmail() {\n         return $this->get('admin_email');\n    }\n\n    function verifyEmailAddrs() {\n        return (bool) $this->get('verify_email_addrs');\n    }\n\n    function getReplySeparator() {\n        return $this->get('reply_separator');\n    }\n\n    function stripQuotedReply() {\n        return ($this->get('strip_quoted_reply'));\n    }\n\n    function saveEmailHeaders() {\n        return true; //No longer an option...hint: big plans for headers coming!!\n    }\n\n    function getDefaultTicketSequence() {\n        if ($this->get('ticket_sequence_id'))\n            $sequence = Sequence::lookup($this->get('ticket_sequence_id'));\n        if (!$sequence)\n            $sequence = new RandomSequence();\n        return $sequence;\n    }\n\n    function showTopLevelTicketCounts() {\n        return ($this->get('queue_bucket_counts'));\n    }\n\n    function getDefaultTicketNumberFormat() {\n        return $this->get('ticket_number_format');\n    }\n\n    function getNewTicketNumber() {\n        $s = $this->getDefaultTicketSequence();\n        return $s->next($this->getDefaultTicketNumberFormat(),\n            array('Ticket', 'isTicketNumberUnique'));\n    }\n\n    // Task sequence\n    function getDefaultTaskSequence() {\n        if ($this->get('task_sequence_id'))\n            $sequence = Sequence::lookup($this->get('task_sequence_id'));\n        if (!$sequence)\n            $sequence = new RandomSequence();\n\n        return $sequence;\n    }\n\n    function getDefaultTaskNumberFormat() {\n        return $this->get('task_number_format');\n    }\n\n    function getNewTaskNumber() {\n        $s = $this->getDefaultTaskSequence();\n        return $s->next($this->getDefaultTaskNumberFormat(),\n            array('Task', 'isNumberUnique'));\n    }\n\n    /* autoresponders  & Alerts */\n    function autoRespONNewTicket() {\n        return ($this->get('ticket_autoresponder'));\n    }\n\n    function autoRespONNewMessage() {\n        return ($this->get('message_autoresponder'));\n    }\n\n    function notifyCollabsONNewMessage() {\n        return ($this->get('message_autoresponder_collabs'));\n    }\n\n    function notifyONNewStaffTicket() {\n        return ($this->get('ticket_notice_active'));\n    }\n\n    function alertONNewMessage() {\n        return ($this->get('message_alert_active'));\n    }\n\n    function alertLastRespondentONNewMessage() {\n        return ($this->get('message_alert_laststaff'));\n    }\n\n    function alertAssignedONNewMessage() {\n        return ($this->get('message_alert_assigned'));\n    }\n\n    function alertDeptManagerONNewMessage() {\n        return ($this->get('message_alert_dept_manager'));\n    }\n\n    function alertAcctManagerONNewMessage() {\n        return ($this->get('message_alert_acct_manager'));\n    }\n\n    //TODO: change note_alert to activity_alert\n    function alertONNewActivity() {\n        return ($this->get('note_alert_active'));\n    }\n\n    function alertLastRespondentONNewActivity() {\n        return ($this->get('note_alert_laststaff'));\n    }\n\n    function alertAssignedONNewActivity() {\n        return ($this->get('note_alert_assigned'));\n    }\n\n    function alertDeptManagerONNewActivity() {\n        return ($this->get('note_alert_dept_manager'));\n    }\n\n    function alertONNewTicket() {\n        return ($this->get('ticket_alert_active'));\n    }\n\n    function alertAdminONNewTicket() {\n        return ($this->get('ticket_alert_admin'));\n    }\n\n    function alertDeptManagerONNewTicket() {\n        return ($this->get('ticket_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONNewTicket() {\n        return ($this->get('ticket_alert_dept_members'));\n    }\n\n    function alertAcctManagerONNewTicket() {\n        return ($this->get('ticket_alert_acct_manager'));\n    }\n\n    function alertONTransfer() {\n        return ($this->get('transfer_alert_active'));\n    }\n\n    function alertAssignedONTransfer() {\n        return ($this->get('transfer_alert_assigned'));\n    }\n\n    function alertDeptManagerONTransfer() {\n        return ($this->get('transfer_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONTransfer() {\n        return ($this->get('transfer_alert_dept_members'));\n    }\n\n    function alertONAssignment() {\n        return ($this->get('assigned_alert_active'));\n    }\n\n    function alertStaffONAssignment() {\n        return ($this->get('assigned_alert_staff'));\n    }\n\n    function alertTeamLeadONAssignment() {\n        return ($this->get('assigned_alert_team_lead'));\n    }\n\n    function alertTeamMembersONAssignment() {\n        return ($this->get('assigned_alert_team_members'));\n    }\n\n\n    function alertONOverdueTicket() {\n        return ($this->get('overdue_alert_active'));\n    }\n\n    function alertAssignedONOverdueTicket() {\n        return ($this->get('overdue_alert_assigned'));\n    }\n\n    function alertDeptManagerONOverdueTicket() {\n        return ($this->get('overdue_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONOverdueTicket() {\n        return ($this->get('overdue_alert_dept_members'));\n    }\n\n    function autoClaimTickets() {\n        return $this->get('auto_claim_tickets');\n    }\n\n    function autoReferTicketsOnClose() {\n         return $this->get('auto_refer_closed');\n    }\n\n    function collaboratorTicketsVisibility() {\n        return $this->get('collaborator_ticket_visibility');\n    }\n\n    function disableAgentCollaborators() {\n        return $this->get('disable_agent_collabs');\n    }\n\n    function requireTopicToClose() {\n        return $this->get('require_topic_to_close');\n    }\n\n    function allowExternalImages() {\n        return ($this->get('allow_external_images'));\n    }\n\n    function getDefaultTicketQueueId() {\n        return $this->get('default_ticket_queue', 1);\n    }\n\n    function hideStaffName() {\n        return ($this->get('hide_staff_name'));\n    }\n\n    function sendOverLimitNotice() {\n        return ($this->get('overlimit_notice_active'));\n    }\n\n    /* Tasks */\n\n    function alertONNewTask() {\n        return ($this->get('task_alert_active'));\n    }\n\n    function alertAdminONNewTask() {\n        return ($this->get('task_alert_admin'));\n    }\n\n    function alertDeptManagerONNewTask() {\n        return ($this->get('task_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONNewTask() {\n        return ($this->get('task_alert_dept_members'));\n    }\n\n    function alertONTaskActivity() {\n        return ($this->get('task_activity_alert_active'));\n    }\n\n    function alertLastRespondentONTaskActivity() {\n        return ($this->get('task_activity_alert_laststaff'));\n    }\n\n    function alertAssignedONTaskActivity() {\n        return ($this->get('task_activity_alert_assigned'));\n    }\n\n    function alertDeptManagerONTaskActivity() {\n        return ($this->get('task_activity_alert_dept_manager'));\n    }\n\n    function alertONTaskTransfer() {\n        return ($this->get('task_transfer_alert_active'));\n    }\n\n    function alertAssignedONTaskTransfer() {\n        return ($this->get('task_transfer_alert_assigned'));\n    }\n\n    function alertDeptManagerONTaskTransfer() {\n        return ($this->get('task_transfer_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONTaskTransfer() {\n        return ($this->get('task_transfer_alert_dept_members'));\n    }\n\n    function alertONTaskAssignment() {\n        return ($this->get('task_assignment_alert_active'));\n    }\n\n    function alertStaffONTaskAssignment() {\n        return ($this->get('task_assignment_alert_staff'));\n    }\n\n    function alertTeamLeadONTaskAssignment() {\n        return ($this->get('task_assignment_alert_team_lead'));\n    }\n\n    function alertTeamMembersONTaskAssignment() {\n        return ($this->get('task_assignment_alert_team_members'));\n    }\n\n    function alertONOverdueTask() {\n        return ($this->get('task_overdue_alert_active'));\n    }\n\n    function alertAssignedONOverdueTask() {\n        return ($this->get('task_overdue_alert_assigned'));\n    }\n\n    function alertDeptManagerONOverdueTask() {\n        return ($this->get('task_overdue_alert_dept_manager'));\n    }\n\n    function alertDeptMembersONOverdueTask() {\n        return ($this->get('task_overdue_alert_dept_members'));\n    }\n\n    /* Error alerts sent to admin email when enabled */\n    function alertONSQLError() {\n        return ($this->get('send_sql_errors'));\n    }\n    function alertONLoginError() {\n        return ($this->get('send_login_errors'));\n    }\n\n\n\n    /* Attachments */\n    function getAllowedFileTypes() {\n        return trim($this->get('allowed_filetypes'));\n    }\n\n    function emailAttachments() {\n        return ($this->get('email_attachments'));\n    }\n\n    function allowAttachments() {\n        return ($this->get('allow_attachments'));\n    }\n\n    function getPrimaryLanguage() {\n        return $this->get('system_language');\n    }\n\n    function getSecondaryLanguages() {\n        $langs = $this->get('secondary_langs');\n        $langs = (is_string($langs)) ? explode(',', $langs) : array();\n        return array_filter($langs);\n    }\n\n    /* Needed by upgrader on 1.6 and older releases upgrade - not not remove */\n    function getUploadDir() {\n        return $this->get('upload_dir');\n    }\n\n    function getDefaultStorageBackendChar() {\n        return $this->get('default_storage_bk');\n    }\n\n    function getVar($name) {\n        return $this->get($name);\n    }\n\n    function updateSettings($vars, &$errors) {\n\n        if(!$vars || $errors)\n            return false;\n\n        switch(strtolower($vars['t'])) {\n            case 'system':\n                return $this->updateSystemSettings($vars, $errors);\n                break;\n            case 'tickets':\n                return $this->updateTicketsSettings($vars, $errors);\n                break;\n            case 'tasks':\n                return $this->updateTasksSettings($vars, $errors);\n                break;\n            case 'emails':\n                return $this->updateEmailsSettings($vars, $errors);\n                break;\n            case 'pages':\n                return $this->updatePagesSettings($vars, $errors);\n                break;\n            case 'agents':\n                return $this->updateAgentsSettings($vars, $errors);\n                break;\n            case 'users':\n                return $this->updateUsersSettings($vars, $errors);\n                break;\n            case 'kb':\n                return $this->updateKBSettings($vars, $errors);\n                break;\n            default:\n                $errors['err']=sprintf('%s - %s', __('Unknown setting option'), __('Get technical help!'));\n        }\n\n        return false;\n    }\n\n    function updateSystemSettings($vars, &$errors) {\n\n        $f=array();\n        $f['helpdesk_url']=array('type'=>'string',   'required'=>1, 'error'=>__('Helpdesk URL is required'));\n        $f['helpdesk_title']=array('type'=>'string',   'required'=>1, 'error'=>__('Helpdesk title is required'));\n        $f['default_dept_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Default Department is required'));\n        $f['autolock_minutes']=array('type'=>'int',   'required'=>1, 'error'=>__('Enter lock time in minutes'));\n        $f['allow_iframes']=array('type'=>'cs-url',   'required'=>0, 'error'=>__('Enter comma separated list of urls'));\n        $f['embedded_domain_whitelist']=array('type'=>'cs-domain',   'required'=>0, 'error'=>__('Enter comma separated list of domains'));\n        $f['acl']=array('type'=>'ipaddr',   'required'=>0, 'error'=>__('Enter comma separated list of IP addresses'));\n        //Date & Time Options\n        $f['time_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Time format is required'));\n        $f['date_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Date format is required'));\n        $f['datetime_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Datetime format is required'));\n        $f['daydatetime_format']=array('type'=>'string',   'required'=>1, 'error'=>__('Day, Datetime format is required'));\n        $f['default_timezone']=array('type'=>'string',   'required'=>1, 'error'=>__('Default Timezone is required'));\n        $f['system_language']=array('type'=>'string',   'required'=>1, 'error'=>__('A primary system language is required'));\n\n        $vars = Format::htmlchars($vars, true);\n\n        // ACL Checks\n        if ($vars['acl']) {\n            // Check if Admin's IP is in the list, if not, return error\n            // to avoid locking self out\n            if (!in_array($vars['acl_backend'], array(0,2))) {\n                $acl = explode(',', str_replace(' ', '', $vars['acl']));\n                if (!in_array(osTicket::get_client_ip(), $acl))\n                    $errors['acl'] = __('Cowardly refusing to lock out active administrator');\n            }\n        } elseif ((int) $vars['acl_backend'] !== 0)\n            $errors['acl'] = __('IP address required when selecting panel');\n\n        // Make sure the selected backend is valid\n        $storagebk = null;\n        if (isset($vars['default_storage_bk'])) {\n            try {\n                $storagebk = FileStorageBackend::lookup($vars['default_storage_bk']);\n\n            } catch (Exception $ex) {\n                $errors['default_storage_bk'] = $ex->getMessage();\n            }\n        }\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        // Manage secondard languages\n        $vars['secondary_langs'][] = $vars['add_secondary_language'];\n        foreach ($vars['secondary_langs'] as $i=>$lang) {\n            if (!$lang || !Internationalization::isLanguageInstalled($lang))\n                unset($vars['secondary_langs'][$i]);\n        }\n        $secondary_langs = implode(',', $vars['secondary_langs']);\n\n        if ($storagebk)\n            $this->update('default_storage_bk', $storagebk->getBkChar());\n\n\n        return $this->updateAll(array(\n            'isonline'=>$vars['isonline'],\n            'helpdesk_title'=>$vars['helpdesk_title'],\n            'helpdesk_url'=>$vars['helpdesk_url'],\n            'default_dept_id'=>$vars['default_dept_id'],\n            'force_https'=>$vars['force_https'] ? 'on' : '',\n            'max_page_size'=>$vars['max_page_size'],\n            'log_level'=>$vars['log_level'],\n            'log_graceperiod'=>$vars['log_graceperiod'],\n            'time_format'=>$vars['time_format'],\n            'date_format'=>$vars['date_format'],\n            'datetime_format'=>$vars['datetime_format'],\n            'daydatetime_format'=>$vars['daydatetime_format'],\n            'date_formats'=>$vars['date_formats'],\n            'default_timezone'=>$vars['default_timezone'],\n            'schedule_id' => $vars['schedule_id'],\n            'default_locale'=>$vars['default_locale'],\n            'system_language'=>$vars['system_language'],\n            'secondary_langs'=>$secondary_langs,\n            'max_file_size' => $vars['max_file_size'],\n            'autolock_minutes' => $vars['autolock_minutes'],\n            'enable_avatars' => isset($vars['enable_avatars']) ? 1 : 0,\n            'enable_richtext' => isset($vars['enable_richtext']) ? 1 : 0,\n            'files_req_auth' => isset($vars['files_req_auth']) ? 1 : 0,\n            'allow_iframes' => Format::sanitize($vars['allow_iframes']),\n            'embedded_domain_whitelist' => Format::sanitize($vars['embedded_domain_whitelist']),\n            'acl' => Format::sanitize($vars['acl']),\n            'acl_backend' => Format::sanitize((int) $vars['acl_backend']) ?: 0,\n        ));\n    }\n\n    function updateAgentsSettings($vars, &$errors) {\n        $f=array();\n        $f['staff_session_timeout']=array('type'=>'int',   'required'=>1, 'error'=>'Enter idle time in minutes');\n        $f['pw_reset_window']=array('type'=>'int', 'required'=>1, 'min'=>1,\n            'error'=>__('Valid password reset window required'));\n\n        require_once INCLUDE_DIR.'class.avatar.php';\n        list($avatar_source) = explode('.', $vars['agent_avatar']);\n        if (!AvatarSource::lookup($avatar_source))\n            $errors['agent_avatar'] = __('Select a value from the list');\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        return $this->updateAll(array(\n            'passwd_reset_period'=>$vars['passwd_reset_period'],\n            'staff_max_logins'=>$vars['staff_max_logins'],\n            'staff_login_timeout'=>$vars['staff_login_timeout'],\n            'staff_session_timeout'=>$vars['staff_session_timeout'],\n            'staff_ip_binding'=>isset($vars['staff_ip_binding'])?1:0,\n            'allow_pw_reset'=>isset($vars['allow_pw_reset'])?1:0,\n            'pw_reset_window'=>$vars['pw_reset_window'],\n            'agent_name_format'=>$vars['agent_name_format'],\n            'hide_staff_name'=>isset($vars['hide_staff_name']) ? 1 : 0,\n            'agent_avatar'=>$vars['agent_avatar'],\n            'disable_agent_collabs'=>isset($vars['disable_agent_collabs'])?1:0,\n        ));\n    }\n\n    function updateUsersSettings($vars, &$errors) {\n        $f=array();\n        $f['client_session_timeout']=array('type'=>'int',   'required'=>1, 'error'=>'Enter idle time in minutes');\n\n        require_once INCLUDE_DIR.'class.avatar.php';\n        list($avatar_source) = explode('.', $vars['client_avatar']);\n        if (!AvatarSource::lookup($avatar_source))\n            $errors['client_avatar'] = __('Select a value from the list');\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        return $this->updateAll(array(\n            'client_max_logins'=>$vars['client_max_logins'],\n            'client_login_timeout'=>$vars['client_login_timeout'],\n            'client_session_timeout'=>$vars['client_session_timeout'],\n            'clients_only'=>isset($vars['clients_only'])?1:0,\n            'client_registration'=>$vars['client_registration'],\n            'client_verify_email'=>isset($vars['client_verify_email'])?1:0,\n            'allow_auth_tokens' => isset($vars['allow_auth_tokens']) ? 1 : 0,\n            'client_name_format'=>$vars['client_name_format'],\n            'client_avatar'=>$vars['client_avatar'],\n        ));\n    }\n\n    function updateTicketsSettings($vars, &$errors) {\n        $f=array();\n        $f['default_sla_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n        $f['default_ticket_status_id'] = array('type'=>'int', 'required'=>1, 'error'=>__('Selection required'));\n        $f['default_priority_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n        $f['max_open_tickets']=array('type'=>'int',   'required'=>1, 'error'=>__('Enter valid numeric value'));\n\n\n        if($vars['enable_captcha']) {\n            if (!extension_loaded('gd'))\n                $errors['enable_captcha']=__('The GD extension is required');\n            elseif(!function_exists('imagepng'))\n                $errors['enable_captcha']=__('PNG support is required for Image Captcha');\n        }\n\n        if ($vars['default_help_topic']\n                && ($T = Topic::lookup($vars['default_help_topic']))\n                && !$T->isActive()) {\n            $errors['default_help_topic'] = __('Default help topic must be set to active');\n        }\n\n        if (!preg_match('`(?!<\\\\\\)#`', $vars['ticket_number_format']))\n            $errors['ticket_number_format'] = 'Ticket number format requires at least one hash character (#)';\n\n        if (!isset($vars['default_ticket_queue']))\n            $errors['default_ticket_queue'] = __(\"Select a default ticket queue\");\n        elseif (!CustomQueue::lookup($vars['default_ticket_queue']))\n            $errors['default_ticket_queue'] = __(\"Select a default ticket queue\");\n\n        $this->updateAutoresponderSettings($vars, $errors);\n        $this->updateAlertsSettings($vars, $errors);\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        // Sort ticket queues\n        $queues = CustomQueue::queues()->getIterator();\n        foreach ($vars['qsort'] as $queue_id => $sort) {\n            if ($q = $queues->findFirst(array('id' => $queue_id))) {\n                $q->sort = $sort;\n                $q->save();\n            }\n        }\n\n        return $this->updateAll(array(\n            'ticket_number_format'=>$vars['ticket_number_format'] ?: '######',\n            'ticket_sequence_id'=>$vars['ticket_sequence_id'] ?: 0,\n            'queue_bucket_counts'=>isset($vars['queue_bucket_counts'])?1:0,\n            'default_priority_id'=>$vars['default_priority_id'],\n            'default_help_topic'=>$vars['default_help_topic'],\n            'default_ticket_status_id'=>$vars['default_ticket_status_id'],\n            'default_sla_id'=>$vars['default_sla_id'],\n            'max_open_tickets'=>$vars['max_open_tickets'],\n            'enable_captcha'=>isset($vars['enable_captcha'])?1:0,\n            'auto_claim_tickets'=>isset($vars['auto_claim_tickets'])?1:0,\n            'auto_refer_closed' => isset($vars['auto_refer_closed']) ? 1 : 0,\n            'collaborator_ticket_visibility'=>isset($vars['collaborator_ticket_visibility'])?1:0,\n            'require_topic_to_close'=>isset($vars['require_topic_to_close'])?1:0,\n            'show_related_tickets'=>isset($vars['show_related_tickets'])?1:0,\n            'allow_client_updates'=>isset($vars['allow_client_updates'])?1:0,\n            'ticket_lock' => $vars['ticket_lock'],\n            'default_ticket_queue'=>$vars['default_ticket_queue'],\n            'allow_external_images'=>isset($vars['allow_external_images'])?1:0,\n        ));\n    }\n\n    function updateTasksSettings($vars, &$errors) {\n        $f=array();\n        $f['default_task_priority_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n\n        if (!preg_match('`(?!<\\\\\\)#`', $vars['task_number_format']))\n            $errors['task_number_format'] = 'Task number format requires at least one hash character (#)';\n\n        Validator::process($f, $vars, $errors);\n\n        if ($vars['task_alert_active']\n                && (!isset($vars['task_alert_admin'])\n                    && !isset($vars['task_alert_dept_manager'])\n                    && !isset($vars['task_alert_dept_members'])\n                    && !isset($vars['task_alert_acct_manager']))) {\n            $errors['task_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_activity_alert_active']\n                && (!isset($vars['task_activity_alert_laststaff'])\n                    && !isset($vars['task_activity_alert_assigned'])\n                    && !isset($vars['task_activity_alert_dept_manager']))) {\n            $errors['task_activity_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_transfer_alert_active']\n                && (!isset($vars['task_transfer_alert_assigned'])\n                    && !isset($vars['task_transfer_alert_dept_manager'])\n                    && !isset($vars['task_transfer_alert_dept_members']))) {\n            $errors['task_transfer_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_overdue_alert_active']\n                && (!isset($vars['task_overdue_alert_assigned'])\n                    && !isset($vars['task_overdue_alert_dept_manager'])\n                    && !isset($vars['task_overdue_alert_dept_members']))) {\n            $errors['task_overdue_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($vars['task_assignment_alert_active']\n                && (!isset($vars['task_assignment_alert_staff'])\n                    && !isset($vars['task_assignment_alert_team_lead'])\n                    && !isset($vars['task_assignment_alert_team_members']))) {\n            $errors['task_assignment_alert_active'] = __('Select recipient(s)');\n        }\n\n        if ($errors)\n            return false;\n\n        return $this->updateAll(array(\n            'task_number_format'=>$vars['task_number_format'] ?: '######',\n            'task_sequence_id'=>$vars['task_sequence_id'] ?: 0,\n            'default_task_priority_id'=>$vars['default_task_priority_id'],\n            'default_task_sla_id'=>$vars['default_task_sla_id'],\n            'task_alert_active'=>$vars['task_alert_active'],\n            'task_alert_admin'=>isset($vars['task_alert_admin']) ? 1 : 0,\n            'task_alert_dept_manager'=>isset($vars['task_alert_dept_manager']) ? 1 : 0,\n            'task_alert_dept_members'=>isset($vars['task_alert_dept_members']) ? 1 : 0,\n            'task_activity_alert_active'=>$vars['task_activity_alert_active'],\n            'task_activity_alert_laststaff'=>isset($vars['task_activity_alert_laststaff']) ? 1 : 0,\n            'task_activity_alert_assigned'=>isset($vars['task_activity_alert_assigned']) ? 1 : 0,\n            'task_activity_alert_dept_manager'=>isset($vars['task_activity_alert_dept_manager']) ? 1 : 0,\n            'task_assignment_alert_active'=>$vars['task_assignment_alert_active'],\n            'task_assignment_alert_staff'=>isset($vars['task_assignment_alert_staff']) ? 1 : 0,\n            'task_assignment_alert_team_lead'=>isset($vars['task_assignment_alert_team_lead']) ? 1 : 0,\n            'task_assignment_alert_team_members'=>isset($vars['task_assignment_alert_team_members']) ? 1 : 0,\n            'task_transfer_alert_active'=>$vars['task_transfer_alert_active'],\n            'task_transfer_alert_assigned'=>isset($vars['task_transfer_alert_assigned']) ? 1 : 0,\n            'task_transfer_alert_dept_manager'=>isset($vars['task_transfer_alert_dept_manager']) ? 1 : 0,\n            'task_transfer_alert_dept_members'=>isset($vars['task_transfer_alert_dept_members']) ? 1 : 0,\n            'task_overdue_alert_active'=>$vars['task_overdue_alert_active'],\n            'task_overdue_alert_assigned'=>isset($vars['task_overdue_alert_assigned']) ? 1 : 0,\n            'task_overdue_alert_dept_manager'=>isset($vars['task_overdue_alert_dept_manager']) ? 1 : 0,\n            'task_overdue_alert_dept_members'=>isset($vars['task_overdue_alert_dept_members']) ? 1 : 0,\n        ));\n    }\n\n    function updateEmailsSettings($vars, &$errors) {\n        $f=array();\n        $f['default_template_id']=array('type'=>'int',   'required'=>1, 'error'=>__('You must select template'));\n        $f['default_email_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Default email is required'));\n        $f['alert_email_id']=array('type'=>'int',   'required'=>1, 'error'=>__('Selection required'));\n        $f['admin_email']=array('type'=>'email',   'required'=>1, 'error'=>__('System admin email is required'));\n\n        if($vars['strip_quoted_reply'] && !trim($vars['reply_separator']))\n            $errors['reply_separator']=__('Reply separator is required to strip quoted reply.');\n\n        if($vars['admin_email'] && Email::getIdByEmail($vars['admin_email'])) //Make sure admin email is not also a system email.\n            $errors['admin_email']=__('Email already setup as system email');\n\n        if(!Validator::process($f,$vars,$errors) || $errors)\n            return false;\n\n        return $this->updateAll(array(\n            'default_template_id'=>$vars['default_template_id'],\n            'default_email_id'=>$vars['default_email_id'],\n            'alert_email_id'=>$vars['alert_email_id'],\n            'default_smtp_id'=>$vars['default_smtp_id'],\n            'admin_email'=>$vars['admin_email'],\n            'verify_email_addrs'=>isset($vars['verify_email_addrs']) ? 1 : 0,\n            'enable_auto_cron'=>isset($vars['enable_auto_cron'])?1:0,\n            'enable_mail_polling'=>isset($vars['enable_mail_polling'])?1:0,\n            'strip_quoted_reply'=>isset($vars['strip_quoted_reply'])?1:0,\n            'use_email_priority'=>isset($vars['use_email_priority'])?1:0,\n            'accept_unregistered_email'=>isset($vars['accept_unregistered_email'])?1:0,\n            'add_email_collabs'=>isset($vars['add_email_collabs'])?1:0,\n            'reply_separator'=>$vars['reply_separator'],\n            'email_attachments'=>isset($vars['email_attachments'])?1:0,\n         ));\n    }\n\n    function getLogo($site) {\n        $id = $this->get(\"{$site}_logo_id\", false);\n        return ($id) ? AttachmentFile::lookup((int) $id) : null;\n    }\n    function getClientLogo() {\n        return $this->getLogo('client');\n    }\n    function getLogoId($site) {\n        return $this->get(\"{$site}_logo_id\", false);\n    }\n    function getClientLogoId() {\n        return $this->getLogoId('client');\n    }\n\n    function getStaffLogoId() {\n        return $this->getLogoId('staff');\n    }\n    function getStaffLogo() {\n        return $this->getLogo('staff');\n    }\n\n    function getStaffLoginBackdropId() {\n        return $this->get(\"staff_backdrop_id\", false);\n    }\n    function getStaffLoginBackdrop() {\n        $id = $this->getStaffLoginBackdropId();\n        return ($id) ? AttachmentFile::lookup((int) $id) : null;\n    }\n\n    function isAuthRequiredForFiles() {\n        return $this->get('files_req_auth');\n    }\n\n    function updatePagesSettings($vars, &$errors) {\n        global $ost;\n\n        $f=array();\n        $f['landing_page_id'] = array('type'=>'int',   'required'=>1, 'error'=>'required');\n        $f['offline_page_id'] = array('type'=>'int',   'required'=>1, 'error'=>'required');\n        $f['thank-you_page_id'] = array('type'=>'int',   'required'=>1, 'error'=>'required');\n\n        if ($_FILES['logo']) {\n            $error = false;\n            list($logo) = AttachmentFile::format($_FILES['logo']);\n            if (!$logo)\n                ; // Pass\n            elseif ($logo['error'])\n                $errors['logo'] = $logo['error'];\n            elseif (!AttachmentFile::uploadLogo($logo, $error))\n                $errors['logo'] = sprintf(__('Unable to upload logo image: %s'), $error);\n        }\n\n        if ($_FILES['backdrop']) {\n            $error = false;\n            list($backdrop) = AttachmentFile::format($_FILES['backdrop']);\n            if (!$backdrop)\n                ; // Pass\n            elseif ($backdrop['error'])\n                $errors['backdrop'] = $backdrop['error'];\n            elseif (!AttachmentFile::uploadBackdrop($backdrop, $error))\n                $errors['backdrop'] = sprintf(__('Unable to upload backdrop image: %s'), $error);\n        }\n\n        $company = $ost->company;\n        $company_form = $company->getForm();\n        $company_form->setSource($_POST);\n        if (!$company_form->isValid())\n            $errors += $company_form->errors();\n\n        if(!Validator::process($f, $vars, $errors) || $errors)\n            return false;\n\n        $company_form->save();\n\n        if (isset($vars['delete-logo']))\n            foreach ($vars['delete-logo'] as $id)\n                if (($vars['selected-logo'] != $id)\n                        && ($f = AttachmentFile::lookup((int) $id)))\n                    $f->delete();\n\n        if (isset($vars['delete-backdrop']))\n            foreach ($vars['delete-backdrop'] as $id)\n                if (($vars['selected-backdrop'] != $id)\n                        && ($f = AttachmentFile::lookup((int) $id)))\n                    $f->delete();\n\n        return $this->updateAll(array(\n            'landing_page_id' => $vars['landing_page_id'],\n            'offline_page_id' => $vars['offline_page_id'],\n            'thank-you_page_id' => $vars['thank-you_page_id'],\n            'client_logo_id' => (\n                (is_numeric($vars['selected-logo']) && $vars['selected-logo'])\n                ? $vars['selected-logo'] : false),\n            'staff_logo_id' => (\n                (is_numeric($vars['selected-logo-scp']) && $vars['selected-logo-scp'])\n                ? $vars['selected-logo-scp'] : false),\n            'staff_backdrop_id' => (\n                (is_numeric($vars['selected-backdrop']) && $vars['selected-backdrop'])\n                ? $vars['selected-backdrop'] : false),\n           ));\n    }\n\n    function updateAutoresponderSettings($vars, &$errors) {\n\n        if($errors) return false;\n\n        return $this->updateAll(array(\n            'ticket_autoresponder'=>isset($vars['ticket_autoresponder']) ? 1 : 0,\n            'message_autoresponder'=>isset($vars['message_autoresponder']) ? 1 : 0,\n            'message_autoresponder_collabs'=>isset($vars['message_autoresponder_collabs']) ? 1 : 0,\n            'ticket_notice_active'=>isset($vars['ticket_notice_active']) ? 1 : 0,\n            'overlimit_notice_active'=>isset($vars['overlimit_notice_active']) ? 1 : 0,\n        ));\n    }\n\n\n    function updateKBSettings($vars, &$errors) {\n        if ($errors) return false;\n\n        return $this->updateAll(array(\n            'enable_kb'=>isset($vars['enable_kb'])?1:0,\n            'restrict_kb'=>isset($vars['restrict_kb'])?1:0,\n            'enable_premade'=>isset($vars['enable_premade'])?1:0,\n        ));\n    }\n\n\n    function updateAlertsSettings($vars, &$errors) {\n\n       if($vars['ticket_alert_active']\n                && (!isset($vars['ticket_alert_admin'])\n                    && !isset($vars['ticket_alert_dept_manager'])\n                    && !isset($vars['ticket_alert_dept_members'])\n                    && !isset($vars['ticket_alert_acct_manager']))) {\n            $errors['ticket_alert_active']=__('Select recipient(s)');\n        }\n        if($vars['message_alert_active']\n                && (!isset($vars['message_alert_laststaff'])\n                    && !isset($vars['message_alert_assigned'])\n                    && !isset($vars['message_alert_dept_manager'])\n                    && !isset($vars['message_alert_acct_manager']))) {\n            $errors['message_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['note_alert_active']\n                && (!isset($vars['note_alert_laststaff'])\n                    && !isset($vars['note_alert_assigned'])\n                    && !isset($vars['note_alert_dept_manager']))) {\n            $errors['note_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['transfer_alert_active']\n                && (!isset($vars['transfer_alert_assigned'])\n                    && !isset($vars['transfer_alert_dept_manager'])\n                    && !isset($vars['transfer_alert_dept_members']))) {\n            $errors['transfer_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['overdue_alert_active']\n                && (!isset($vars['overdue_alert_assigned'])\n                    && !isset($vars['overdue_alert_dept_manager'])\n                    && !isset($vars['overdue_alert_dept_members']))) {\n            $errors['overdue_alert_active']=__('Select recipient(s)');\n        }\n\n        if($vars['assigned_alert_active']\n                && (!isset($vars['assigned_alert_staff'])\n                    && !isset($vars['assigned_alert_team_lead'])\n                    && !isset($vars['assigned_alert_team_members']))) {\n            $errors['assigned_alert_active']=__('Select recipient(s)');\n        }\n\n        if($errors) return false;\n\n        return $this->updateAll(array(\n            'ticket_alert_active'=>$vars['ticket_alert_active'],\n            'ticket_alert_admin'=>isset($vars['ticket_alert_admin'])?1:0,\n            'ticket_alert_dept_manager'=>isset($vars['ticket_alert_dept_manager'])?1:0,\n            'ticket_alert_dept_members'=>isset($vars['ticket_alert_dept_members'])?1:0,\n            'ticket_alert_acct_manager'=>isset($vars['ticket_alert_acct_manager'])?1:0,\n            'message_alert_active'=>$vars['message_alert_active'],\n            'message_alert_laststaff'=>isset($vars['message_alert_laststaff'])?1:0,\n            'message_alert_assigned'=>isset($vars['message_alert_assigned'])?1:0,\n            'message_alert_dept_manager'=>isset($vars['message_alert_dept_manager'])?1:0,\n            'message_alert_acct_manager'=>isset($vars['message_alert_acct_manager'])?1:0,\n            'note_alert_active'=>$vars['note_alert_active'],\n            'note_alert_laststaff'=>isset($vars['note_alert_laststaff'])?1:0,\n            'note_alert_assigned'=>isset($vars['note_alert_assigned'])?1:0,\n            'note_alert_dept_manager'=>isset($vars['note_alert_dept_manager'])?1:0,\n            'assigned_alert_active'=>$vars['assigned_alert_active'],\n            'assigned_alert_staff'=>isset($vars['assigned_alert_staff'])?1:0,\n            'assigned_alert_team_lead'=>isset($vars['assigned_alert_team_lead'])?1:0,\n            'assigned_alert_team_members'=>isset($vars['assigned_alert_team_members'])?1:0,\n            'transfer_alert_active'=>$vars['transfer_alert_active'],\n            'transfer_alert_assigned'=>isset($vars['transfer_alert_assigned'])?1:0,\n            'transfer_alert_dept_manager'=>isset($vars['transfer_alert_dept_manager'])?1:0,\n            'transfer_alert_dept_members'=>isset($vars['transfer_alert_dept_members'])?1:0,\n            'overdue_alert_active'=>$vars['overdue_alert_active'],\n            'overdue_alert_assigned'=>isset($vars['overdue_alert_assigned'])?1:0,\n            'overdue_alert_dept_manager'=>isset($vars['overdue_alert_dept_manager'])?1:0,\n            'overdue_alert_dept_members'=>isset($vars['overdue_alert_dept_members'])?1:0,\n            'send_sys_errors'=>isset($vars['send_sys_errors'])?1:0,\n            'send_sql_errors'=>isset($vars['send_sql_errors'])?1:0,\n            'send_login_errors'=>isset($vars['send_login_errors'])?1:0,\n        ));\n    }\n\n    //Used to detect version prior to 1.7 (useful during upgrade)\n    /* static */ function getDBVersion() {\n        $sql='SELECT `ostversion` FROM '.TABLE_PREFIX.'config '\n            .'WHERE id=1';\n        return db_result(db_query($sql));\n    }\n}\n?>\n", "<?php\n/*********************************************************************\n    class.format.php\n\n    Collection of helper function used for formatting\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\ninclude_once INCLUDE_DIR.'class.charset.php';\nrequire_once INCLUDE_DIR.'class.variable.php';\n\nclass Format {\n\n\n    function file_size($bytes) {\n\n        if(!is_numeric($bytes))\n            return $bytes;\n        if($bytes<1024)\n            return $bytes.' bytes';\n        if($bytes < (900<<10))\n            return round(($bytes/1024),1).' kb';\n\n        return round(($bytes/1048576),1).' mb';\n    }\n\n    function filesize2bytes($size) {\n        switch (substr($size, -1)) {\n        case 'M': case 'm': return (int)$size <<= 20;\n        case 'K': case 'k': return (int)$size <<= 10;\n        case 'G': case 'g': return (int)$size <<= 30;\n        }\n\n        return $size;\n    }\n\n    function filename($filename) {\n        return preg_replace('/[^a-zA-Z0-9\\-\\._]/', '-', $filename);\n    }\n\n    function mimedecode($text, $encoding='UTF-8') {\n        // Handle poorly or completely un-encoded header values (\n        if (function_exists('mb_detect_encoding'))\n            if (($src_enc = mb_detect_encoding($text))\n                    && (strcasecmp($src_enc, 'ASCII') !== 0))\n                return Charset::transcode($text, $src_enc, $encoding);\n\n        if(function_exists('imap_mime_header_decode')\n                && ($parts = imap_mime_header_decode($text))) {\n            $str ='';\n            foreach ($parts as $part)\n                $str.= Charset::transcode($part->text, $part->charset, $encoding);\n\n            $text = $str;\n        } elseif($text[0] == '=' && function_exists('iconv_mime_decode')) {\n            $text = iconv_mime_decode($text, 0, $encoding);\n        } elseif(!strcasecmp($encoding, 'utf-8')\n                && function_exists('imap_utf8')) {\n            $text = imap_utf8($text);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Decodes filenames given in the content-disposition header according\n     * to RFC5987, such as filename*=utf-8''filename.png. Note that the\n     * language sub-component is defined in RFC5646, and that the filename\n     * is URL encoded (in the charset specified)\n     */\n    function decodeRfc5987($filename) {\n        $match = array();\n        if (preg_match(\"/([\\w!#$%&+^_`{}~-]+)'([\\w-]*)'(.*)$/\",\n                $filename, $match))\n            // XXX: Currently we don't care about the language component.\n            //      The  encoding hint is sufficient.\n            return Charset::utf8(urldecode($match[3]), $match[1]);\n        else\n            return $filename;\n    }\n\n    /**\n     * Json Encoder\n     *\n     */\n    function json_encode($what) {\n        require_once (INCLUDE_DIR.'class.json.php');\n        return JsonDataEncoder::encode($what);\n    }\n\n\tfunction phone($phone) {\n\n\t\t$stripped= preg_replace(\"/[^0-9]/\", \"\", $phone);\n\t\tif(strlen($stripped) == 7)\n\t\t\treturn preg_replace(\"/([0-9]{3})([0-9]{4})/\", \"$1-$2\",$stripped);\n\t\telseif(strlen($stripped) == 10)\n\t\t\treturn preg_replace(\"/([0-9]{3})([0-9]{3})([0-9]{4})/\", \"($1) $2-$3\",$stripped);\n\t\telse\n\t\t\treturn $phone;\n\t}\n\n    function truncate($string,$len,$hard=false) {\n\n        if(!$len || $len>strlen($string))\n            return $string;\n\n        $string = substr($string,0,$len);\n\n        return $hard?$string:(substr($string,0,strrpos($string,' ')).' ...');\n    }\n\n    function strip_slashes($var) {\n        return is_array($var)?array_map(array('Format','strip_slashes'),$var):stripslashes($var);\n    }\n\n    function wrap($text, $len=75) {\n        return $len ? wordwrap($text, $len, \"\\n\", true) : $text;\n    }\n\n    function html_balance($html, $remove_empty=true) {\n        if (!extension_loaded('dom'))\n            return $html;\n\n        if (!trim($html))\n            return $html;\n\n        $doc = new DomDocument();\n        $xhtml = '<?xml encoding=\"utf-8\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>'\n            // Wrap the content in a <div> because libxml would use a <p>\n            . \"<div>$html</div>\";\n        $doc->encoding = 'utf-8';\n        $doc->preserveWhitespace = false;\n        $doc->recover = true;\n        if (false === @$doc->loadHTML($xhtml))\n            return $html;\n\n        if ($remove_empty) {\n            // Remove empty nodes\n            $xpath = new DOMXPath($doc);\n            static $eE = array('area'=>1, 'br'=>1, 'col'=>1, 'embed'=>1,\n                    'iframe' => 1, 'hr'=>1, 'img'=>1, 'input'=>1,\n                    'isindex'=>1, 'param'=>1, 'div'=>1);\n            do {\n                $done = true;\n                $nodes = $xpath->query('//*[not(text()) and not(node())]');\n                foreach ($nodes as $n) {\n                    if (isset($eE[$n->nodeName]))\n                        continue;\n                    $n->parentNode->removeChild($n);\n                    $done = false;\n                }\n            } while (!$done);\n        }\n\n        static $phpversion;\n        if (!isset($phpversion))\n            $phpversion = phpversion();\n\n        $body = $doc->getElementsByTagName('body');\n        if (!$body->length)\n            return $html;\n\n        if ($phpversion > '5.3.6') {\n            $html = $doc->saveHTML($doc->getElementsByTagName('body')->item(0)->firstChild);\n        }\n        else {\n            $html = $doc->saveHTML();\n            $html = preg_replace('`^<!DOCTYPE.+?>|<\\?xml .+?>|</?html>|</?body>|</?head>|<meta .+?/?>`', '', $html); # <?php\n        }\n        return preg_replace('`^<div>|</div>$`', '', trim($html));\n    }\n\n    function html($html, $config=array()) {\n        require_once(INCLUDE_DIR.'htmLawed.php');\n        $spec = false;\n        if (isset($config['spec']))\n            $spec = $config['spec'];\n\n        // Add in htmLawed defaults\n        $config += array(\n            'balance' => 1,\n        );\n\n        // Attempt to balance using libxml. htmLawed will corrupt HTML with\n        // balancing to fix improper HTML at the same time. For instance,\n        // some email clients may wrap block elements inside inline\n        // elements. htmLawed will change such block elements to inlines to\n        // make the HTML correct.\n        if ($config['balance'] && extension_loaded('dom')) {\n            $html = self::html_balance($html);\n            $config['balance'] = 0;\n        }\n\n        return htmLawed($html, $config, $spec);\n    }\n\n    function html2text($html, $width=74, $tidy=true) {\n\n        if (!$html)\n            return $html;\n\n\n        # Tidy html: decode, balance, sanitize tags\n        if($tidy)\n            $html = Format::html(Format::htmldecode($html), array('balance' => 1));\n\n        # See if advanced html2text is available (requires xml extension)\n        if (function_exists('convert_html_to_text')\n                && extension_loaded('dom')\n                && ($text = convert_html_to_text($html, $width)))\n                return $text;\n\n        # Try simple html2text  - insert line breaks after new line tags.\n        $html = preg_replace(\n                array(':<br ?/?\\>:i', ':(</div>)\\s*:i', ':(</p>)\\s*:i'),\n                array(\"\\n\", \"$1\\n\", \"$1\\n\\n\"),\n                $html);\n\n        # Strip tags, decode html chars and wrap resulting text.\n        return Format::wrap(\n                Format::htmldecode( Format::striptags($html, false)),\n                $width);\n    }\n\n    static function __html_cleanup($el, $attributes=0) {\n        static $eE = array('area'=>1, 'br'=>1, 'col'=>1, 'embed'=>1,\n            'hr'=>1, 'img'=>1, 'input'=>1, 'isindex'=>1, 'param'=>1);\n\n        // We're dealing with closing tag\n        if ($attributes === 0)\n            return \"</{$el}>\";\n\n        // Remove iframe and embed without src (perhaps striped by spec)\n        // It would be awesome to rickroll such entry :)\n        if (in_array($el, array('iframe', 'embed'))\n                && (!isset($attributes['src']) || empty($attributes['src'])))\n            return '';\n\n        // Clean unexpected class values\n        if (isset($attributes['class'])) {\n            $classes = explode(' ', $attributes['class']);\n            foreach ($classes as $i=>$a)\n                // Unset all unsupported style classes -- anything but M$\n                if (strpos($a, 'Mso') !== 0)\n                    unset($classes[$i]);\n            if ($classes)\n                $attributes['class'] = implode(' ', $classes);\n            else\n                unset($attributes['class']);\n        }\n        // Clean browser-specific style attributes\n        if (isset($attributes['style'])) {\n            $styles = preg_split('/;\\s*/S', html_entity_decode($attributes['style']));\n            $props = array();\n            foreach ($styles as $i=>&$s) {\n                @list($prop, $val) = explode(':', $s);\n                if (isset($props[$prop])) {\n                    unset($styles[$i]);\n                    continue;\n                }\n                $props[$prop] = true;\n                // Remove unset or browser-specific style rules\n                if (!$val || !$prop || $prop[0] == '-' || substr($prop, 0, 4) == 'mso-')\n                    unset($styles[$i]);\n                // Remove quotes of properties without enclosed space\n                if (!strpos($val, ' '))\n                    $val = str_replace('\"','', $val);\n                else\n                    $val = str_replace('\"',\"'\", $val);\n                $s = \"$prop:\".trim($val);\n            }\n            unset($s);\n            if ($styles)\n                $attributes['style'] = Format::htmlchars(implode(';', $styles));\n            else\n                unset($attributes['style']);\n        }\n        $at = '';\n        if (is_array($attributes)) {\n            foreach ($attributes as $k=>$v)\n                $at .= \" $k=\\\"$v\\\"\";\n            return \"<{$el}{$at}\".(isset($eE[$el])?\" /\":\"\").\">\";\n        }\n        else {\n            return \"</{$el}>\";\n        }\n    }\n\n    function safe_html($html, $options=array()) {\n        global $cfg;\n\n        $options = array_merge(array(\n                    // Balance html tags\n                    'balance' => 1,\n                    // Decoding special html char like &lt; and &gt; which\n                    // can be used to skip cleaning\n                    'decode' => true\n                    ),\n                $options);\n\n        if ($options['decode'])\n            $html = Format::htmldecode($html);\n\n        // Remove HEAD and STYLE sections\n        $html = preg_replace(\n            array(':<(head|style|script).+?</\\1>:is', # <head> and <style> sections\n                  ':<!\\[[^]<]+\\]>:',            # <![if !mso]> and friends\n                  ':<!DOCTYPE[^>]+>:',          # <!DOCTYPE ... >\n                  ':<\\?[^>]+>:',                # <?xml version=\"1.0\" ... >\n                  ':<html[^>]+:i',              # drop html attributes\n                  ':<(a|span) (name|style)=\"(mso-bookmark\\:)?_MailEndCompose\">(.+)?<\\/(a|span)>:', # Drop _MailEndCompose\n                  ':<div dir=(3D)?\"ltr\">(.*?)<\\/div>(.*):is', # drop Gmail \"ltr\" attributes\n                  ':data-cid=\"[^\"]*\":',         # drop image cid attributes\n            ),\n            array('', '', '', '', '<html', '$4', '$2 $3', ''),\n            $html);\n\n        // HtmLawed specific config only\n        $config = array(\n            'safe' => 1, //Exclude applet, embed, iframe, object and script tags.\n            'balance' => $options['balance'],\n            'comment' => 1, //Remove html comments (OUTLOOK LOVE THEM)\n            'tidy' => -1,\n            'deny_attribute' => 'id',\n            'schemes' => 'href: aim, feed, file, ftp, gopher, http, https, irc, mailto, news, nntp, sftp, ssh, telnet; *:file, http, https; src: cid, http, https, data',\n            'hook_tag' => function($e, $a=0) { return Format::__html_cleanup($e, $a); },\n        );\n\n        // iFrame Whitelist\n        if ($cfg)\n            $whitelist = $cfg->getIframeWhitelist();\n        if (!empty($whitelist)) {\n            $config['elements'] = '*+iframe';\n            $config['spec'] = 'iframe=-*,height,width,type,style,src(match=\"`^(https?:)?//(www\\.)?('\n                .implode('|', $whitelist)\n                .')/?`i\"),frameborder'.($options['spec'] ? '; '.$options['spec'] : '').',allowfullscreen';\n        }\n\n        return Format::html($html, $config);\n    }\n\n    function localizeInlineImages($text) {\n        // Change file.php urls back to content-id's\n        return preg_replace(\n            '`src=\"(?:https?:/)?(?:/[^/\"]+)*?/file\\\\.php\\\\?(?:\\w+=[^&]+&(?:amp;)?)*?key=([^&]+)[^\"]*`',\n            'src=\"cid:$1', $text);\n    }\n\n    function sanitize($text, $striptags=false, $spec=false) {\n\n        //balance and neutralize unsafe tags.\n        $text = Format::safe_html($text, array('spec' => $spec));\n\n        $text = self::localizeInlineImages($text);\n\n        //If requested - strip tags with decoding disabled.\n        return $striptags?Format::striptags($text, false):$text;\n    }\n\n    function htmlchars($var, $sanitize = false) {\n        static $phpversion = null;\n\n        if (is_array($var)) {\n            $result = array();\n            foreach ($var as $k => $v)\n                $result[$k] = self::htmlchars($v, $sanitize);\n\n            return $result;\n        }\n\n        if ($sanitize)\n            $var = Format::sanitize($var);\n\n        if (!isset($phpversion))\n            $phpversion = phpversion();\n\n        $flags = ENT_COMPAT;\n        if ($phpversion >= '5.4.0')\n            $flags |= ENT_HTML401;\n\n        try {\n            return htmlspecialchars( (string) $var, $flags, 'UTF-8', false);\n        } catch(Exception $e) {\n            return $var;\n        }\n    }\n\n    function htmldecode($var) {\n\n        if(is_array($var))\n            return array_map(array('Format','htmldecode'), $var);\n\n        $flags = ENT_COMPAT;\n        if (phpversion() >= '5.4.0')\n            $flags |= ENT_HTML401;\n\n        return htmlspecialchars_decode($var, $flags);\n    }\n\n    function input($var) {\n        return Format::htmlchars($var);\n    }\n\n    //Format text for display..\n    function display($text, $inline_images=true, $balance=true) {\n        global $cfg;\n\n        // Exclude external images?\n        $exclude = !$cfg->allowExternalImages();\n        // Allowed image extensions\n        $allowed = array('gif', 'png', 'jpg', 'jpeg');\n\n        // Make showing offsite images optional\n        $text = preg_replace_callback('/<img ([^>]*)(src=\"http[^\"]+\")([^>]*)\\/>/',\n            function($match) use ($exclude, $allowed) {\n                $m = array();\n                // Split the src URL and get the extension\n                preg_match('/src=\"([^\"]+)\"/', $match[2], $m);\n                $url = explode('.', explode('?', $m[1])[0]);\n                $ext = preg_split('/[^A-Za-z]/', end($url))[0];\n\n                if (!$exclude && in_array($ext, $allowed)) {\n                    // Drop embedded classes -- they don't refer to ours\n                    $match = preg_replace('/class=\"[^\"]*\"/', '', $match);\n                    return sprintf('<span %s class=\"non-local-image\" data-%s %s></span>',\n                        $match[1], $match[2], $match[3]);\n                } else\n                    return '';\n            },\n            $text);\n\n        if ($balance)\n            $text = self::html_balance($text, false);\n\n        // make urls clickable.\n        $text = Format::clickableurls($text);\n\n        if ($inline_images)\n            return self::viewableImages($text);\n\n        return $text;\n    }\n\n    function stripExternalImages($input, $display=false) {\n        global $cfg;\n\n        // Allowed Inline External Image Extensions\n        $allowed = array('gif', 'png', 'jpg', 'jpeg');\n        $exclude = !$cfg->allowExternalImages();\n\n        $input = preg_replace_callback('/<img ([^>]*)(src=\"([^\"]+)\")([^>]*)\\/?>/',\n            function($match) use ($allowed, $exclude, $display) {\n                // Split the src URL and get the extension\n                $url = explode('.', explode('?', $match[3])[0]);\n                $ext = preg_split('/[^A-Za-z]/', end($url))[0];\n\n                if (($exclude && $display) || !in_array($ext, $allowed))\n                    return '';\n                else\n                    return $match[0];\n            },\n            $input);\n\n        return $input;\n    }\n\n    function striptags($var, $decode=true) {\n\n        if(is_array($var))\n            return array_map(array('Format','striptags'), $var, array_fill(0, count($var), $decode));\n\n        return strip_tags($decode?Format::htmldecode($var):$var);\n    }\n\n    // Strip all Emoticon/Emoji characters until we support them\n    function strip_emoticons($text) {\n        return preg_replace(array(\n                '/[\\x{1F601}-\\x{1F64F}]/u', # Emoticons\n                '/[\\x{1F680}-\\x{1F6C0}]/u', # Transport/Map\n                '/[\\x{1F600}-\\x{1F636}]/u', # Add. Emoticons\n                '/[\\x{1F681}-\\x{1F6C5}]/u', # Add. Transport/Map\n                '/[\\x{1F30D}-\\x{1F567}]/u', # Other\n                '/[\\x{1F910}-\\x{1F999}]/u', # Hands\n                '/[\\x{1F9D0}-\\x{1F9DF}]/u', # Fantasy\n                '/[\\x{1F9E0}-\\x{1F9EF}]/u', # Clothes\n                '/[\\x{1F6F0}-\\x{1F6FF}]/u', # Misc. Transport\n                '/[\\x{1F6E0}-\\x{1F6EF}]/u', # Planes/Boats\n                '/[\\x{1F6C0}-\\x{1F6CF}]/u', # Bed/Bath\n                '/[\\x{1F9C0}-\\x{1F9C2}]/u', # Misc. Food\n                '/[\\x{1F6D0}-\\x{1F6D2}]/u', # Sign/P.O.W./Cart\n                '/[\\x{1F500}-\\x{1F5FF}]/u', # Uncategorized\n                '/[\\x{1F300}-\\x{1F3FF}]/u', # Cyclone/Amphora\n                '/[\\x{2702}-\\x{27B0}]/u',   # Dingbats\n                '/[\\x{00A9}-\\x{00AE}]/u',   # Copyright/Registered\n                '/[\\x{23F0}-\\x{23FF}]/u',   # Clock/Buttons\n                '/[\\x{23E0}-\\x{23EF}]/u',   # More Buttons\n                '/[\\x{2310}-\\x{231F}]/u',   # Hourglass/Watch\n                '/[\\x{1000B6}]/u',          # Private Use Area (Plane 16)\n                '/[\\x{2322}-\\x{232F}]/u'    # Keyboard\n            ), '', $text);\n    }\n\n    //make urls clickable. Mainly for display\n    function clickableurls($text, $target='_blank') {\n        global $ost;\n\n        // Find all text between tags\n        return preg_replace_callback(':^[^<]+|>[^<]+:',\n            function($match) {\n                // Scan for things that look like URLs\n                return preg_replace_callback(\n                    '`(?<!>)(((f|ht)tp(s?)://|(?<!//)www\\.)([-+~%/.\\w]+)(?:[-?#+=&;%@.\\w\\[\\]\\/]*)?)'\n                   .'|(\\b[_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,63})`',\n                    function ($match) {\n                        if ($match[1]) {\n                            while (in_array(substr($match[1], -1),\n                                    array('.','?','-',':',';'))) {\n                                $match[9] = substr($match[1], -1) . $match[9];\n                                $match[1] = substr($match[1], 0, strlen($match[1])-1);\n                            }\n                            if (strpos($match[2], '//') === false) {\n                                $match[1] = 'http://' . $match[1];\n                            }\n\n                            return sprintf('<a href=\"%s\">%s</a>%s',\n                                $match[1], $match[1], $match[9]);\n                        } elseif ($match[6]) {\n                            return sprintf('<a href=\"mailto:%1$s\" target=\"_blank\">%1$s</a>',\n                                $match[6]);\n                        }\n                    },\n                    $match[0]);\n            },\n            $text);\n    }\n\n    function stripEmptyLines($string) {\n        return preg_replace(\"/\\n{3,}/\", \"\\n\\n\", trim($string));\n    }\n\n\n    function viewableImages($html, $options=array()) {\n        $cids = $images = array();\n        $options +=array(\n                'disposition' => 'inline');\n        return preg_replace_callback('/\"cid:([\\w._-]{32})\"/',\n        function($match) use ($options, $images) {\n            if (!($file = AttachmentFile::lookup($match[1])))\n                return $match[0];\n\n            return sprintf('\"%s\" data-cid=\"%s\"',\n                $file->getDownloadUrl($options), $match[1]);\n        }, $html);\n    }\n\n\n    /**\n     * Thanks, http://us2.php.net/manual/en/function.implode.php\n     * Implode an array with the key and value pair giving\n     * a glue, a separator between pairs and the array\n     * to implode.\n     * @param string $glue The glue between key and value\n     * @param string $separator Separator between pairs\n     * @param array $array The array to implode\n     * @return string The imploded array\n    */\n    function array_implode( $glue, $separator, $array ) {\n\n        if ( !is_array( $array ) ) return $array;\n\n        $string = array();\n        foreach ( $array as $key => $val ) {\n            if ( is_array( $val ) )\n                $val = implode( ',', $val );\n\n            $string[] = \"{$key}{$glue}{$val}\";\n        }\n\n        return implode( $separator, $string );\n    }\n\n    function number($number, $locale=false) {\n        if (is_array($number))\n            return array_map(array('Format','number'), $number);\n\n        if (!is_numeric($number))\n            return $number;\n\n        if (extension_loaded('intl') && class_exists('NumberFormatter')) {\n            $nf = NumberFormatter::create($locale ?: Internationalization::getCurrentLocale(),\n                NumberFormatter::DECIMAL);\n            return $nf->format($number);\n        }\n\n        return number_format((int) $number);\n    }\n\n    /*\n     * Add ORDINAL suffix to a number e.g 1st, 2nd, 3rd etc.\n     * TODO: Combine this routine with Format::number and pass in type of\n     * formatting.\n     */\n    function ordinalsuffix($number, $locale=false) {\n        if (is_array($number))\n            return array_map(array('Format', 'ordinalsuffix'), $number);\n\n        if (!is_numeric($number))\n            return $number;\n\n        if (extension_loaded('intl') && class_exists('NumberFormatter')) {\n            $nf = new NumberFormatter($locale ?:\n                    Internationalization::getCurrentLocale(),\n                    NumberFormatter::ORDINAL);\n            return $nf->format($number);\n        }\n\n        // Default to English ordinal\n        if (!in_array(($number % 100), [11,12,13])) {\n            switch ($number % 10) {\n            case 1:  return $number.'st';\n            case 2:  return $number.'nd';\n            case 3:  return $number.'rd';\n            }\n        }\n\n        return $number.'th';\n    }\n\n    /* elapsed time */\n    function elapsedTime($sec) {\n\n        if(!$sec || !is_numeric($sec)) return \"\";\n\n        $days = floor($sec / 86400);\n        $hrs = floor(bcmod($sec,86400)/3600);\n        $mins = round(bcmod(bcmod($sec,86400),3600)/60);\n        if($days > 0) $tstring = $days . 'd,';\n        if($hrs > 0) $tstring = $tstring . $hrs . 'h,';\n        $tstring =$tstring . $mins . 'm';\n\n        return $tstring;\n    }\n\n    function __formatDate($timestamp, $format, $fromDb, $dayType, $timeType,\n            $strftimeFallback, $timezone, $user=false) {\n        global $cfg;\n        static $cache;\n\n        if ($timestamp && $fromDb)\n            $timestamp = Misc::db2gmtime($timestamp);\n\n        // Make sure timestamp is valid for realz.\n        if (!$timestamp || !($datetime = DateTime::createFromFormat('U', $timestamp)))\n            return '';\n\n        // Normalize timezone\n        if ($timezone)\n            $timezone = Format::timezone($timezone);\n\n        // Set the desired timezone (caching since it will be mostly same\n        // for most date formatting.\n        $timezone = Format::timezone($timezone, $cfg->getTimezone());\n        if (isset($cache[$timezone]))\n            $tz =  $cache[$timezone];\n        else\n            $cache[$timezone] = $tz = new DateTimeZone($timezone);\n\n        $datetime->setTimezone($tz);\n\n        // Formmating options\n        $options = array(\n                'timezone' => $tz->getName(),\n                'locale' =>  Internationalization::getCurrentLocale($user),\n                'daytype' => $dayType,\n                'timetype' => $timeType,\n                'strftime' => $strftimeFallback,\n                );\n\n        return self::IntDateFormat($datetime, $format, $options);\n\n    }\n\n    // IntDateFormat\n    // Format datetime to desired format in accorrding to desired locale\n    function IntDateFormat(DateTime $datetime, $format, $options=array()) {\n        global $cfg;\n\n        if (!$datetime instanceof DateTime)\n            return '';\n\n        $format = $format ?: $cfg->getDateFormat();\n        $timezone = $datetime->getTimeZone();\n        // Use IntlDateFormatter if available\n        if (class_exists('IntlDateFormatter')) {\n            $options += array(\n                    'pattern' => $format,\n                    'timezone' => $timezone->getName());\n\n            if ($fmt=Internationalization::getIntDateFormatter($options))\n                return  $fmt->format($datetime);\n        }\n\n        // Fallback to using strftime which is not timezone aware\n        // Figure out timezone offset for given timestamp\n        $timestamp = $datetime->format('U');\n        $time = DateTime::createFromFormat('U', $timestamp, new DateTimeZone('UTC'));\n        $timestamp += $timezone->getOffset($time);\n        // Change format to strftime format otherwise us a fallback format\n        $format = self::getStrftimeFormat($format) ?: $options['strftime']\n            ?:  '%x %X';\n        if ($cfg && $cfg->isForce24HourTime())\n            $format = str_replace('X', 'R', $format);\n\n        return strftime($format, $timestamp);\n    }\n\n    // Normalize ambiguous timezones\n    function timezone($tz, $default=false) {\n\n        // Translate ambiguous 'GMT' timezone\n        if ($tz == 'GMT')\n           return 'Europe/London';\n\n        if (!$tz || !strcmp($tz, '+00:00'))\n            $tz = 'UTC';\n\n        if (is_numeric($tz))\n            $tz = timezone_name_from_abbr('', $tz, false);\n        // Forbid timezone abbreviations like 'CDT'\n        elseif ($tz !== 'UTC' && strpos($tz, '/') === false) {\n            // Attempt to lookup based on the abbreviation\n            if (!($tz = timezone_name_from_abbr($tz)))\n                // Abbreviation doesn't point to anything valid\n                return $default;\n        }\n\n        // SYSTEM does not describe a time zone, ensure we have a valid zone\n        // by attempting to create an instance of DateTimeZone()\n        try {\n            $timezone = new DateTimeZone($tz);\n            return $timezone->getName();\n        } catch(Exception $ex) {\n            return $default;\n        }\n\n        return $tz;\n    }\n\n    function parseDateTime($date, $locale=null, $format=false) {\n        global $cfg;\n\n        if (!$date)\n            return null;\n\n        // Timestamp format?\n        if (is_numeric($date))\n            return DateTime::createFromFormat('U', $date);\n\n        $datetime = null;\n        try {\n            $datetime = new DateTime($date);\n            $tz = $datetime->getTimezone()->getName();\n            if ($tz && $tz[0] == '+' || $tz[0] == '-')\n                $tz = (int) $datetime->format('Z');\n            elseif ($tz == 'Z')\n                $tz = 'UTC';\n            $timezone =  new DateTimeZone(Format::timezone($tz) ?: 'UTC');\n            $datetime->setTimezone($timezone);\n        } catch (Exception $ex) {\n            // Fallback using strtotime\n            if (($time=strtotime($date)))\n                $datetime = DateTime::createFromFormat('U', $time);\n\n        }\n\n        return $datetime;\n    }\n\n    function time($timestamp, $fromDb=true, $format=false, $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n            $format ?: $cfg->getTimeFormat(), $fromDb,\n            IDF_NONE, IDF_SHORT,\n            '%X', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function date($timestamp, $fromDb=true, $format=false, $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n            $format ?: $cfg->getDateFormat(), $fromDb,\n            IDF_SHORT, IDF_NONE,\n            '%x', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function datetime($timestamp, $fromDb=true, $format=false,  $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n                $format ?: $cfg->getDateTimeFormat(), $fromDb,\n                IDF_SHORT, IDF_SHORT,\n                '%x %X', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function daydatetime($timestamp, $fromDb=true, $format=false,  $timezone=false, $user=false) {\n        global $cfg;\n\n        return self::__formatDate($timestamp,\n                $format ?: $cfg->getDayDateTimeFormat(), $fromDb,\n                IDF_FULL, IDF_SHORT,\n                '%x %X', $timezone ?: $cfg->getTimezone(), $user);\n    }\n\n    function getStrftimeFormat($format) {\n        static $codes, $ids;\n\n        if (!isset($codes)) {\n            // This array is flipped because of duplicated formats on the\n            // intl side due to slight differences in the libraries\n            $codes = array(\n            '%d' => 'dd',\n            '%a' => 'EEE',\n            '%e' => 'd',\n            '%A' => 'EEEE',\n            '%w' => 'e',\n            '%w' => 'c',\n            '%z' => 'D',\n\n            '%V' => 'w',\n\n            '%B' => 'MMMM',\n            '%m' => 'MM',\n            '%b' => 'MMM',\n\n            '%g' => 'Y',\n            '%G' => 'Y',\n            '%Y' => 'y',\n            '%y' => 'yy',\n\n            '%P' => 'a',\n            '%l' => 'h',\n            '%k' => 'H',\n            '%I' => 'hh',\n            '%H' => 'HH',\n            '%M' => 'mm',\n            '%S' => 'ss',\n\n            '%z' => 'ZZZ',\n            '%Z' => 'z',\n            );\n\n            $flipped = array_flip($codes);\n            krsort($flipped);\n\n            // Also establish a list of ids, so we can do a creative replacement\n            // without clobbering the common letters in the formats\n            $keys = array_keys($flipped);\n            $ids = array_combine($keys, array_map('chr', array_flip($keys)));\n\n            // Now create an array from the id codes back to strftime codes\n            $codes = array_combine($ids, $flipped);\n        }\n        // $ids => array(intl => #id)\n        // $codes => array(#id => strftime)\n        $format = str_replace(array_keys($ids), $ids, $format);\n        $format = str_replace($ids, $codes, $format);\n\n        return preg_replace_callback('`[\\x00-\\x1f]`',\n            function($m) use ($ids) {\n                return $ids[ord($m[0])];\n            },\n            $format\n        );\n    }\n\n    // Translate php date / time formats to js equivalent\n    function dtfmt_php2js($format) {\n\n        $codes = array(\n        // Date\n        'DD' => 'oo',\n        'D' => 'o',\n        'EEEE' => 'DD',\n        'EEE' => 'D',\n        'MMMM' => '||',\n        'MMM' => '|',\n        'MM' => 'mm',\n        'M' =>  'm',\n        '||' => 'MM',\n        '|' => 'M',\n        'yyyy' => 'YY',\n        'yyy' => 'YY',\n        'yy' =>  'Y',\n        'y' => 'yy',\n        'YY' =>  'yy',\n        'Y' => 'y',\n        // Time\n        'a' => 'tt',\n        'HH' => 'H',\n        'H' => 'HH',\n        );\n\n        return str_replace(array_keys($codes), array_values($codes), $format);\n    }\n\n    // Thanks, http://stackoverflow.com/a/2955878/1025836\n    /* static */\n    function slugify($text) {\n        // convert special characters to entities\n        $text = htmlentities($text, ENT_NOQUOTES, 'UTF-8');\n\n        // removes entity suffixes, leaving only un-accented characters\n        $text = preg_replace('~&([A-za-z])(?:acute|cedil|circ|grave|orn|ring|slash|th|tilde|uml);~', '$1', $text);\n        $text = preg_replace('~&([A-za-z]{2})(?:lig);~', '$1', $text);\n\n        // replace non letter or digits by -\n        $text = preg_replace('~[^\\p{L}\\p{N}]+~u', '-', $text);\n\n        // trim\n        $text = trim($text, '-');\n\n        // lowercase\n        $text = strtolower($text);\n\n        return (empty($text)) ? 'n-a' : $text;\n    }\n\n    /**\n     * Parse RFC 2397 formatted data strings. Format according to the RFC\n     * should look something like:\n     *\n     * data:[type/subtype][;charset=utf-8][;base64],data\n     *\n     * Parameters:\n     * $data - (string) RFC2397 formatted data string\n     * $output_encoding - (string:optional) Character set the input data\n     *      should be encoded to.\n     * $always_convert - (bool|default:true) If the input data string does\n     *      not specify an input encding, assume iso-8859-1. If this flag is\n     *      set, the output will always be transcoded to the declared\n     *      output_encoding, if set.\n     *\n     * Returs:\n     * array (data=>parsed and transcoded data string, type=>MIME type\n     * declared in the data string or text/plain otherwise)\n     *\n     * References:\n     * http://www.ietf.org/rfc/rfc2397.txt\n     */\n    function parseRfc2397($data, $output_encoding=false, $always_convert=true) {\n        if (substr($data, 0, 5) != \"data:\")\n            return array('data'=>$data, 'type'=>'text/plain');\n\n        $data = substr($data, 5);\n        list($meta, $contents) = explode(\",\", $data, 2);\n        if ($meta)\n            list($type, $extra) = explode(\";\", $meta, 2);\n        else\n            $extra = '';\n        if (!isset($type) || !$type)\n            $type = 'text/plain';\n\n        $parameters = explode(\";\", $extra);\n\n        # Handle 'charset' hint in $extra, such as\n        # data:text/plain;charset=iso-8859-1,Blah\n        # Convert to utf-8 since it's the encoding scheme for the database.\n        $charset = ($always_convert) ? 'iso-8859-1' : false;\n        foreach ($parameters as $p) {\n            list($param, $value) = explode('=', $extra);\n            if ($param == 'charset')\n                $charset = $value;\n            elseif ($param == 'base64')\n                $contents = base64_decode($contents);\n        }\n        if ($output_encoding && $charset)\n            $contents = Charset::transcode($contents, $charset, $output_encoding);\n\n        return array(\n            'data' => $contents,\n            'type' => $type\n        );\n    }\n\n    // Performs Unicode normalization (where possible) and splits words at\n    // difficult word boundaries (for far eastern languages)\n    function searchable($text, $lang=false) {\n        global $cfg;\n\n        if (function_exists('normalizer_normalize')) {\n            // Normalize text input :: remove diacritics and such\n            $text = normalizer_normalize($text, Normalizer::FORM_C);\n        }\n\n        if (false && class_exists('IntlBreakIterator')) {\n            // Split by word boundaries\n            if ($tokenizer = IntlBreakIterator::createWordInstance(\n                    $lang ?: ($cfg ? $cfg->getPrimaryLanguage() : 'en_US'))\n            ) {\n                $tokenizer->setText($text);\n                $tokens = array();\n                foreach ($tokenizer as $token)\n                    $tokens[] = $token;\n                $text = implode(' ', $tokens);\n            }\n        }\n        else {\n            // Approximate word boundaries from Unicode chart at\n            // http://www.unicode.org/reports/tr29/#Word_Boundaries\n\n            // Punt for now\n\n            // Drop extraneous whitespace\n            $text = preg_replace('/(\\s)\\s+/u', '$1', $text);\n\n            // Drop leading and trailing whitespace\n            $text = trim($text);\n        }\n        return $text;\n    }\n\n    function relativeTime($to, $from=false, $granularity=1) {\n        if (!$to)\n            return false;\n        $timestamp = $to;\n        if (gettype($timestamp) === 'string')\n            $timestamp = strtotime($timestamp);\n        $from = $from ?: Misc::gmtime();\n        if (gettype($timestamp) === 'string')\n            $from = strtotime($from);\n        $timeDiff = $from - $timestamp;\n        $absTimeDiff = abs($timeDiff);\n\n        // Roll back to the nearest multiple of $granularity\n        $absTimeDiff -= $absTimeDiff % $granularity;\n\n        // within 2 seconds\n        if ($absTimeDiff <= 2) {\n          return $timeDiff >= 0 ? __('just now') : __('now');\n        }\n\n        // within a minute\n        if ($absTimeDiff < 60) {\n          return sprintf($timeDiff >= 0 ? __('%d seconds ago') : __('in %d seconds'), $absTimeDiff);\n        }\n\n        // within 2 minutes\n        if ($absTimeDiff < 120) {\n          return sprintf($timeDiff >= 0 ? __('about a minute ago') : __('in about a minute'));\n        }\n\n        // within an hour\n        if ($absTimeDiff < 3600) {\n          return sprintf($timeDiff >= 0 ? __('%d minutes ago') : __('in %d minutes'), $absTimeDiff / 60);\n        }\n\n        // within 2 hours\n        if ($absTimeDiff < 7200) {\n          return ($timeDiff >= 0 ? __('about an hour ago') : __('in about an hour'));\n        }\n\n        // within 24 hours\n        if ($absTimeDiff < 86400) {\n          return sprintf($timeDiff >= 0 ? __('%d hours ago') : __('in %d hours'), $absTimeDiff / 3600);\n        }\n\n        // within 29 days\n        $days29 = 29 * 86400;\n        if ($absTimeDiff < $days29) {\n          return sprintf($timeDiff >= 0 ? __('%d days ago') : __('in %d days'), round($absTimeDiff / 86400));\n        }\n\n        // within 60 days\n        $days60 = 60 * 86400;\n        if ($absTimeDiff < $days60) {\n          return ($timeDiff >= 0 ? __('about a month ago') : __('in about a month'));\n        }\n\n        $currTimeYears = date('Y', $from);\n        $timestampYears = date('Y', $timestamp);\n        $currTimeMonths = $currTimeYears * 12 + date('n', $from);\n        $timestampMonths = $timestampYears * 12 + date('n', $timestamp);\n\n        // within a year\n        $monthDiff = $currTimeMonths - $timestampMonths;\n        if ($monthDiff < 12 && $monthDiff > -12) {\n          return sprintf($monthDiff >= 0 ? __('%d months ago') : __('in %d months'), abs($monthDiff));\n        }\n\n        $yearDiff = $currTimeYears - $timestampYears;\n        if ($yearDiff < 2 && $yearDiff > -2) {\n          return $yearDiff >= 0 ? __('a year ago') : __('in a year');\n        }\n\n        return sprintf($yearDiff >= 0 ? __('%d years ago') : __('in %d years'), abs($yearDiff));\n    }\n}\n\nif (!class_exists('IntlDateFormatter')) {\n    define('IDF_NONE', 0);\n    define('IDF_SHORT', 1);\n    define('IDF_FULL', 2);\n}\nelse {\n    define('IDF_NONE', IntlDateFormatter::NONE);\n    define('IDF_SHORT', IntlDateFormatter::SHORT);\n    define('IDF_FULL', IntlDateFormatter::FULL);\n}\n\nclass FormattedLocalDate\nimplements TemplateVariable {\n\n    var $date;\n    var $timezone;\n    var $datetime;\n    var $fromdb;\n    var $format;\n\n    function __construct($date,  $options=array()) {\n\n        // Date to be formatted\n        $this->datetime = Format::parseDateTime($date);\n        $this->date = $this->datetime->getTimestamp();\n        // Desired timezone\n        if (isset($options['timezone']))\n            $this->timezone = $options['timezone'];\n        else\n            $this->timezone = false;\n        // User\n        if (isset($options['user']))\n            $this->user = $options['user'];\n        else\n            $this->user = false;\n\n        // DB date or nah?\n        if (isset($options['fromdb']))\n            $this->fromdb = $options['fromdb'];\n        else\n            $this->fromdb = true;\n        // Desired format\n        if (isset($options['format']) && $options['format'])\n            $this->format = $options['format'];\n    }\n\n    function getDateTime() {\n        return $this->datetime;\n    }\n\n    function asVar() {\n        return $this->getVar($this->format ?: 'long');\n    }\n\n    function getVar($what) {\n        // TODO: Rebase date format so that locale is discovered HERE.\n\n        switch ($what) {\n        case 'short':\n            return Format::date($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        case 'long':\n            return Format::datetime($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        case 'time':\n            return Format::time($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        case 'full':\n            return Format::daydatetime($this->date, $this->fromdb, false, $this->timezone, $this->user);\n        }\n    }\n\n    function __toString() {\n        return $this->asVar() ?: '';\n    }\n\n    static function getVarScope() {\n        return array(\n            'full' => 'Expanded date, e.g. day, month dd, yyyy',\n            'long' => 'Date and time, e.g. d/m/yyyy hh:mm',\n            'short' => 'Date only, e.g. d/m/yyyy',\n            'time' => 'Time only, e.g. hh:mm',\n        );\n    }\n}\n\nclass FormattedDate\nextends FormattedLocalDate {\n    function asVar() {\n        return $this->getVar('system')->asVar();\n    }\n\n    function __toString() {\n        global $cfg;\n\n        $timezone = new DatetimeZone($this->timezone ?:\n                $cfg->getTimezone());\n        $options = array(\n                'timezone'  => $timezone->getName(),\n                'fromdb'    => $this->fromdb,\n                'format'    => $this->format\n                );\n\n        $val = (string) new FormattedLocalDate($this->date, $options);\n        if ($this->timezone && $this->format == 'long') {\n            try {\n                $this->datetime->setTimezone($timezone);\n                $val = sprintf('%s %s',\n                        $val, $this->datetime->format('T'));\n\n            } catch(Exception $ex) {\n                // ignore\n            }\n        }\n\n        return $val;\n    }\n\n    function getVar($what, $context=null) {\n        global $cfg;\n\n        if ($rv = parent::getVar($what, $context))\n            return $rv;\n\n        switch ($what) {\n        case 'user':\n            // Fetch $recipient from the context and find that user's time zone\n            if ($context && ($recipient = $context->getObj('recipient'))) {\n                $options = array(\n                        'timezone' => $recipient->getTimezone() ?: $cfg->getDefaultTimezone(),\n                        'user' => $recipient\n                        );\n                return new FormattedLocalDate($this->date, $options);\n            }\n            // Don't resolve the variable until correspondance is sent out\n            return false;\n        case 'system':\n            return new FormattedLocalDate($this->date, array(\n                        'timezone' => $cfg->getDefaultTimezone()\n                        )\n                    );\n        }\n    }\n\n    function getHumanize() {\n        return Format::relativeTime(Misc::db2gmtime($this->date));\n    }\n\n    static function getVarScope() {\n        return parent::getVarScope() + array(\n            'humanize' => 'Humanized time, e.g. about an hour ago',\n            'user' => array(\n                'class' => 'FormattedLocalDate', 'desc' => \"Localize to recipient's time zone and locale\"),\n            'system' => array(\n                'class' => 'FormattedLocalDate', 'desc' => 'Localize to system default time zone'),\n        );\n    }\n}\n?>\n", "<?php\n/*********************************************************************\n    class.thread.php\n\n    Thread of things!\n    XXX: Please DO NOT add any ticket related logic! use ticket class.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\ninclude_once(INCLUDE_DIR.'class.ticket.php');\ninclude_once(INCLUDE_DIR.'class.draft.php');\ninclude_once(INCLUDE_DIR.'class.role.php');\n\n//Ticket thread.\nclass Thread extends VerySimpleModel\nimplements Searchable {\n    static $meta = array(\n        'table' => THREAD_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'ticket' => array(\n                'constraint' => array(\n                    'object_type' => \"'T'\",\n                    'object_id' => 'Ticket.ticket_id',\n                ),\n            ),\n            'task' => array(\n                'constraint' => array(\n                    'object_type' => \"'A'\",\n                    'object_id' => 'Task.id',\n                ),\n            ),\n            'collaborators' => array(\n                'reverse' => 'Collaborator.thread',\n            ),\n\n            'referrals' => array(\n                'reverse' => 'ThreadReferral.thread',\n            ),\n            'entries' => array(\n                'reverse' => 'ThreadEntry.thread',\n            ),\n            'events' => array(\n                'reverse' => 'ThreadEvent.thread',\n                'broker' => 'ThreadEvents',\n            ),\n        ),\n    );\n\n    const MODE_STAFF = 1;\n    const MODE_CLIENT = 2;\n\n    var $_object;\n    var $_entries;\n    var $_collaborators; // Cache for collabs\n    var $_participants;\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getObjectId() {\n        return $this->object_id;\n    }\n\n    function getObjectType() {\n        return $this->object_type;\n    }\n\n    function getObject() {\n\n        if (!$this->_object)\n            $this->_object = ObjectModel::lookup(\n                    $this->getObjectId(), $this->getObjectType());\n\n        return $this->_object;\n    }\n\n    function getNumAttachments() {\n        return Attachment::objects()->filter(array(\n            'thread_entry__thread' => $this\n        ))->count();\n    }\n\n    function getNumEntries() {\n        return $this->entries->count();\n    }\n\n    function getEntries($criteria=false) {\n        if (!isset($this->_entries)) {\n            $this->_entries = $this->entries->annotate(array(\n                'has_attachments' => SqlAggregate::COUNT(SqlCase::N()\n                    ->when(array('attachments__inline'=>0), 1)\n                    ->otherwise(null)\n                ),\n            ));\n            $this->_entries->exclude(array('flags__hasbit'=>ThreadEntry::FLAG_HIDDEN));\n            if ($criteria)\n                $this->_entries->filter($criteria);\n        }\n        return $this->_entries;\n    }\n\n    // Referrals\n    function getNumReferrals() {\n        return $this->referrals->count();\n    }\n\n    function getReferrals() {\n        return $this->referrals;\n    }\n\n    // Collaborators\n    function getNumCollaborators() {\n        return $this->getCollaborators()->count();\n    }\n\n    function getNumActiveCollaborators() {\n\n        if (!isset($this->ht['active_collaborators']))\n            $this->ht['active_collaborators'] = count($this->getActiveCollaborators());\n\n        return $this->ht['active_collaborators'];\n    }\n\n    function getActiveCollaborators() {\n        $collaborators = $this->getCollaborators();\n        $active = array();\n        foreach ($collaborators as $c) {\n          if ($c->isActive())\n            $active[] = $c;\n        }\n        return $active;\n    }\n\n    function getCollaborators($criteria=array()) {\n\n        if ($this->_collaborators && !$criteria)\n            return $this->_collaborators;\n\n        $collaborators = $this->collaborators\n            ->filter(array('thread_id' => $this->getId()));\n\n        if (isset($criteria['isactive']))\n          $collaborators->filter(array('flags__hasbit'=>Collaborator::FLAG_ACTIVE));\n\n\n        // TODO: sort by name of the user\n        $collaborators->order_by('user__name');\n\n        if (!$criteria)\n            $this->_collaborators = $collaborators;\n\n        return $collaborators;\n    }\n\n    function isCollaborator($user) {\n        return $this->collaborators->findFirst(array(\n                    'user_id'     => $user->getId(),\n                    'thread_id'   => $this->getId()));\n    }\n\n    function addCollaborator($user, $vars, &$errors, $event=true) {\n        global $cfg, $thisstaff;\n\n        if (!$user)\n            return null;\n\n        if ($this->isCollaborator($user))\n            return false;\n\n        $vars = array_merge(array(\n                'threadId' => $this->getId(),\n                'userId' => $user->getId()), $vars ?: array());\n        if (!($c=Collaborator::add($vars, $errors)))\n            return null;\n\n        $c->active = true;\n        // Disable Agent Collabs (if configured) for User created tickets\n        if (!$thisstaff && $this->object_type === 'T'\n                && $cfg->disableAgentCollaborators()\n                && Staff::lookup($user->getDefaultEmailAddress()))\n            $c->active = false;\n\n        $this->_collaborators = null;\n\n        if ($event) {\n          $vars['add'] = true;\n          $this->logCollaboratorEvents($user, $vars);\n        }\n\n\n        return $c;\n    }\n\n    function updateCollaborators($vars, &$errors) {\n        global $thisstaff;\n\n        if (!$thisstaff) return;\n\n        //Deletes\n        if($vars['del'] && ($ids=array_filter($vars['del']))) {\n            $collabs = array();\n            foreach ($ids as $k => $cid) {\n                if (($c=Collaborator::lookup($cid))\n                        && ($c->getThreadId() == $this->getId())\n                        && $c->delete())\n                     $collabs[] = $c;\n\n                 $this->logCollaboratorEvents($c, $vars);\n            }\n        }\n\n        //statuses\n        $cids = null;\n        if($vars['cid'] && ($cids=array_filter($vars['cid']))) {\n            $this->collaborators->filter(array(\n                'thread_id' => $this->getId(),\n                'id__in' => $cids\n            ))->update(array(\n                'updated' => SqlFunction::NOW(),\n            ));\n\n            foreach ($vars['cid'] as $c) {\n              $collab = Collaborator::lookup($c);\n              if (($collab instanceof Collaborator)) {\n                $collab->setFlag(Collaborator::FLAG_ACTIVE, true);\n                $collab->save();\n              }\n            }\n        }\n\n        $inactive = $this->collaborators->filter(array(\n            'thread_id' => $this->getId(),\n            Q::not(array('id__in' => $cids ?: array(0)))\n        ));\n        if($inactive) {\n          foreach ($inactive as $i) {\n            $i->setFlag(Collaborator::FLAG_ACTIVE, false);\n            $i->save();\n          }\n          $inactive->update(array(\n              'updated' => SqlFunction::NOW(),\n          ));\n        }\n\n        unset($this->ht['active_collaborators']);\n        $this->_collaborators = null;\n\n        return true;\n    }\n\n    function logCollaboratorEvents($collaborator, $vars) {\n        $name = $collaborator->getName()->getOriginal();\n        $userId = (get_class($collaborator) == 'User')\n            ? $collaborator->getId() : $collaborator->user_id;\n        $action = $vars['del'] ? 'object.deleted' : 'object.created';\n        $addDel = $vars['del'] ? 'del' : 'add';\n\n        $this->getEvents()->log($this->getObject(), 'collab', array(\n            $addDel => array($userId => array('name' => $name))\n        ));\n        $type = array('type' => 'collab', $addDel => array($userId => array(\n                'name' => $name,\n                'src' => @$vars['source'],\n            )));\n        Signal::send($action, $this->getObject(), $type);\n    }\n\n    //UserList of participants (collaborators)\n    function getParticipants() {\n\n        if (!isset($this->_participants)) {\n            $list = new UserList();\n            if ($collabs = $this->getActiveCollaborators()) {\n                foreach ($collabs as $c)\n                    $list->add($c);\n            }\n\n            $this->_participants = $list;\n        }\n\n        return $this->_participants;\n    }\n\n    // MailingList of recipients (collaborators)\n    function getRecipients() {\n        $list = new MailingList();\n        if ($collabs = $this->getActiveCollaborators()) {\n            foreach ($collabs as $c)\n                $list->addCc($c);\n        }\n\n        return $list;\n    }\n\n    function getReferral($id, $type) {\n\n        return $this->referrals->findFirst(array(\n                    'object_id'     => $id,\n                    'object_type'   => $type));\n    }\n\n    function isReferred($to=null, $strict=false) {\n\n        if (is_null($to) || !$this->referrals)\n            return ($this->referrals && $this->referrals->count());\n\n        switch (true) {\n        case $to instanceof Staff:\n            // Referred to the staff\n            if ($this->getReferral($to->getId(),\n                        ObjectModel::OBJECT_TYPE_STAFF))\n                return true;\n\n            // Strict check only checks the Agent\n            if ($strict)\n                return false;\n\n            // Referred to staff's department\n            if ($this->referrals->findFirst(array(\n                   'object_id__in' => $to->getDepts(),\n                   'object_type'   => ObjectModel::OBJECT_TYPE_DEPT)))\n                return true;\n\n            // Referred to staff's teams\n            if ($to->getTeams() && $this->referrals->findFirst(array(\n                            'object_id__in' => $to->getTeams(),\n                            'object_type'   => ObjectModel::OBJECT_TYPE_TEAM\n                            )))\n                return true;\n\n            return false;\n            break;\n        case $to instanceof Team:\n            //Referred to a Team\n            return ($this->getReferral($to->getId(),\n                        ObjectModel::OBJECT_TYPE_TEAM));\n            break;\n        case $to instanceof Dept:\n            // Refered to the dept\n            return ($this->getReferral($to->getId(),\n                        ObjectModel::OBJECT_TYPE_DEPT));\n            break;\n        }\n\n        return false;\n    }\n\n    function refer($to) {\n\n        if ($this->isReferred($to, true))\n            return false;\n\n        $vars = array('thread_id' => $this->getId());\n        switch (true) {\n        case $to instanceof Staff:\n            $vars['object_id'] = $to->getId();\n            $vars['object_type'] = ObjectModel::OBJECT_TYPE_STAFF;\n            break;\n        case $to instanceof Team:\n            $vars['object_id'] = $to->getId();\n            $vars['object_type'] = ObjectModel::OBJECT_TYPE_TEAM;\n            break;\n        case $to instanceof Dept:\n            $vars['object_id'] = $to->getId();\n            $vars['object_type'] = ObjectModel::OBJECT_TYPE_DEPT;\n            break;\n        default:\n            return false;\n        }\n\n        return ThreadReferral::create($vars);\n    }\n\n    // Render thread\n    function render($type=false, $options=array()) {\n\n        $mode = $options['mode'] ?: self::MODE_STAFF;\n\n        // Register thread actions prior to rendering the thread.\n        if (!class_exists('tea_showemailheaders'))\n            include_once INCLUDE_DIR . 'class.thread_actions.php';\n\n        $entries = $this->getEntries();\n\n        if ($type && is_array($type)) {\n          $visibility = Q::all(array('type__in' => $type));\n\n          if ($type['user_id']) {\n            $visibility->add(array('user_id' => $type['user_id']));\n            $visibility->ored = true;\n          }\n\n          $entries->filter($visibility);\n        }\n\n        if ($options['sort'] && !strcasecmp($options['sort'], 'DESC'))\n            $entries->order_by('-id');\n\n        // Precache all the attachments on this thread\n        AttachmentFile::objects()->filter(array(\n            'attachments__thread_entry__thread__id' => $this->id\n        ))->all();\n\n        $events = $this->getEvents();\n        $inc = ($mode == self::MODE_STAFF) ? STAFFINC_DIR : CLIENTINC_DIR;\n        include $inc . 'templates/thread-entries.tmpl.php';\n    }\n\n    function getEntry($id) {\n        return ThreadEntry::lookup($id, $this->getId());\n    }\n\n    function getEvents() {\n        return $this->events;\n    }\n\n    /**\n     * postEmail\n     *\n     * After some security and sanity checks, attaches the body and subject\n     * of the message in reply to this thread item\n     *\n     * Parameters:\n     * mailinfo - (array) of information about the email, with at least the\n     *          following keys\n     *      - mid - (string) email message-id\n     *      - name - (string) personal name of email originator\n     *      - email - (string<email>) originating email address\n     *      - subject - (string) email subject line (decoded)\n     *      - body - (string) email message body (decoded)\n     */\n    function postEmail($mailinfo, $entry=null) {\n        // +==================+===================+=============+\n        // | Orig Thread-Type | Reply Thread-Type | Requires    |\n        // +==================+===================+=============+\n        // | *                | Message (M)       | From: Owner |\n        // | *                | Note (N)          | From: Staff |\n        // | Response (R)     | Message (M)       |             |\n        // | Message (M)      | Response (R)      | From: Staff |\n        // +------------------+-------------------+-------------+\n\n        if (!$object = $this->getObject()) {\n            // How should someone find this thread?\n            return false;\n        }\n        elseif ($object instanceof Ticket && (\n               !$mailinfo['staffId']\n            && $object->isClosed()\n            && !$object->isReopenable()\n        )) {\n            // Ticket is closed, not reopenable, and email was not submitted\n            // by an agent. Email cannot be submitted\n            return false;\n        }\n\n        $vars = array(\n            'mid' =>    $mailinfo['mid'],\n            'header' => $mailinfo['header'],\n            'poster' => $mailinfo['name'],\n            'origin' => 'Email',\n            'source' => 'Email',\n            'ip' =>     '',\n            'reply_to' => $entry,\n            'recipients' => $mailinfo['recipients'],\n            'thread_entry_recipients' => $mailinfo['thread_entry_recipients'],\n            'to-email-id' => $mailinfo['to-email-id'],\n            'autorespond' => !isset($mailinfo['passive']),\n        );\n\n        // XXX: Is this necessary?\n        if ($object instanceof Ticket)\n            $vars['ticketId'] = $object->getId();\n        if ($object instanceof Task)\n            $vars['taskId'] = $object->getId();\n\n        $errors = array();\n\n        if (isset($mailinfo['attachments']))\n            $vars['attachments'] = $mailinfo['attachments'];\n\n        $body = $mailinfo['message'];\n\n        // extra handling for determining Cc collabs\n        if ($mailinfo['email']) {\n          $staffSenderId = Staff::getIdByEmail($mailinfo['email']);\n\n          if (!$staffSenderId) {\n            $senderId = UserEmailModel::getIdByEmail($mailinfo['email']);\n            if ($senderId) {\n              $mailinfo['userId'] = $senderId;\n\n              if ($object instanceof Ticket && $senderId != $object->user_id && $senderId != $object->staff_id) {\n                $mailinfo['userClass'] = 'C';\n\n                $collaboratorId = Collaborator::getIdByUserId($senderId, $this->getId());\n                $collaborator = Collaborator::lookup($collaboratorId);\n\n                if ($collaborator && ($collaborator->isCc()))\n                  $vars['thread-type'] = 'M';\n              }\n            }\n          }\n        }\n\n        // Attempt to determine the user posting the entry and the\n        // corresponding entry type by the information determined by the\n        // mail parser (via the In-Reply-To header)\n        switch ($mailinfo['userClass']) {\n        case 'C': # Thread collaborator\n            $vars['flags'] = ThreadEntry::FLAG_COLLABORATOR;\n        case 'U': # Ticket owner\n            $vars['thread-type'] = 'M';\n            $vars['userId'] = $mailinfo['userId'];\n            break;\n\n        case 'A': # System administrator\n        case 'S': # Staff member (agent)\n            $vars['thread-type'] = 'N';\n            $vars['staffId'] = $mailinfo['staffId'];\n            if ($vars['staffId'])\n                $vars['poster'] = Staff::lookup($mailinfo['staffId']);\n            break;\n\n        // The user type was not identified by the mail parsing system. It\n        // is likely that the In-Reply-To and References headers were not\n        // properly brokered by the user's mail client. Use the old logic to\n        // determine the post type.\n        default:\n            // Disambiguate if the user happens also to be a staff member of\n            // the system. The current ticket owner should _always_ post\n            // messages instead of notes or responses\n            if ($object instanceof Ticket\n                && strcasecmp($mailinfo['email'], $object->getEmail()) == 0\n            ) {\n                $vars['thread-type'] = 'M';\n                $vars['userId'] = $object->getUserId();\n            }\n            // Consider collaborator role (disambiguate staff members as\n            // collaborators). Normally, the block above should match based\n            // on the Referenced message-id header\n            elseif ($C = $this->collaborators->filter(array(\n                'user__emails__address' => $mailinfo['email']\n            ))->first()) {\n                $vars['thread-type'] = 'M';\n                // XXX: There's no way that mailinfo[userId] would be set\n                $vars['userId'] = $mailinfo['userId'] ?: $C->getUserId();\n                $vars['flags'] = ThreadEntry::FLAG_COLLABORATOR;\n            }\n            // Don't process the email -- it came FROM this system\n            elseif (Email::getIdByEmail($mailinfo['email'])) {\n                return false;\n            }\n        }\n\n        // Ensure we record the name of the person posting\n        $vars['poster'] = $vars['poster']\n            ?: $mailinfo['name'] ?: $mailinfo['email'];\n\n        // TODO: Consider security constraints\n        if (!$vars['thread-type']) {\n            //XXX: Are we potentially leaking the email address to\n            // collaborators?\n            // Try not to destroy the format of the body\n            $header = sprintf(\n                _S('Received From: %1$s <%2$s>') . \"\\n\\n\",\n                $mailinfo['name'], $mailinfo['email']);\n            if ($body instanceof HtmlThreadEntryBody)\n                $header = nl2br(Format::htmlchars($header));\n            // Add the banner to the top of the message\n            if ($body instanceof ThreadEntryBody)\n                $body->prepend($header);\n            $vars['userId'] = 0; //Unknown user! //XXX: Assume ticket owner?\n            $vars['thread-type'] = 'M';\n        }\n\n        if ($mailinfo['system_emails']\n                && ($t = $this->getObject())\n                && $t instanceof Ticket)\n            $t->systemReferral($mailinfo['system_emails']);\n\n        switch ($vars['thread-type']) {\n        case 'M':\n            $vars['message'] = $body;\n            if ($object instanceof Threadable) {\n                $entry = $object->postThreadEntry('M', $vars);\n                if ($this->getObjectType() == 'C') {\n                    if ($object->isChild()) {\n                        $parent = Ticket::lookup($object->getPid());\n                        ThreadEntry::setExtra(array($entry), array('thread' => $this->getId()), $parent->getThread()->getId());\n                    }\n                }\n                return $entry;\n            }\n            elseif ($this instanceof ObjectThread)\n                return $this->addMessage($vars, $errors);\n            break;\n\n        case 'N':\n            $vars['note'] = $body;\n            if ($object instanceof Threadable)\n                return $object->postThreadEntry('N', $vars);\n            elseif ($this instanceof ObjectThread)\n                return $this->addNote($vars, $errors);\n            break;\n        }\n\n        throw new Exception('Unable to continue thread via email.');\n\n        // Currently impossible, but indicate that this thread object could\n        // not append the incoming email.\n        return false;\n    }\n\n    function deleteAttachments() {\n        $deleted = Attachment::objects()->filter(array(\n            'thread_entry__thread' => $this,\n        ))->delete();\n\n        if ($deleted)\n            AttachmentFile::deleteOrphans();\n\n        return $deleted;\n    }\n\n    function removeCollaborators() {\n        return Collaborator::objects()\n            ->filter(array('thread_id'=>$this->getId()))\n            ->delete();\n    }\n\n    function setExtra($mergedThread, $info='') {\n\n        if ($info && $info['extra']) {\n            $extra = json_decode($info['extra'], true);\n            $entries = ThreadEntry::objects()->filter(array('thread_id' => $info['threadId']));\n            foreach ($entries as $entry)\n                $entry->saveExtra($entry, array('thread' => $info['threadId']), $mergedThread->getId());\n        } else\n            ThreadEntry::setExtra($this->getEntries(), array('thread' => $this->getId()), $mergedThread->getId());\n\n        $this->object_type = 'C';\n        $number = Ticket::objects()->filter(array('ticket_id'=>$this->getObjectId()))->values_flat('number')->first();\n        $this->extra = json_encode(array('ticket_id' => $mergedThread->getObjectId(), 'number' => $extra['number'] ?: $number[0]));\n        $this->save();\n    }\n\n    /**\n     * Function: lookupByEmailHeaders\n     *\n     * Attempt to locate a thread by the email headers. It should be\n     * considered a secondary lookup to ThreadEntry::lookupByEmailHeaders(),\n     * which should find an actual thread entry, which should be possible\n     * for all email communcation which is associated with a thread entry.\n     * The only time where this is useful is for threads which triggered\n     * email communication without a thread entry, for instance, like\n     * tickets created without an initial message.\n     */\n    function lookupByEmailHeaders(&$mailinfo) {\n        $possibles = array();\n        foreach (array('mid', 'in-reply-to', 'references') as $header) {\n            $matches = array();\n            if (!isset($mailinfo[$header]) || !$mailinfo[$header])\n                continue;\n            // Header may have multiple entries (usually separated by\n            // spaces ( )\n            elseif (!preg_match_all('/<([^>@]+@[^>]+)>/', $mailinfo[$header],\n                        $matches))\n                continue;\n\n            // The References header will have the most recent message-id\n            // (parent) on the far right.\n            // @see rfc 1036, section 2.2.5\n            // @see http://www.jwz.org/doc/threading.html\n            $possibles = array_merge($possibles, array_reverse($matches[1]));\n        }\n\n        // Add the message id if it is embedded in the body\n        $match = array();\n        if (preg_match('`(?:class=\"mid-|Ref-Mid: )([^\"\\s]*)(?:$|\")`',\n                $mailinfo['message'], $match)\n            && !in_array($match[1], $possibles)\n        ) {\n            $possibles[] = $match[1];\n        }\n\n        foreach ($possibles as $mid) {\n            // Attempt to detect the ticket and user ids from the\n            // message-id header. If the message originated from\n            // osTicket, the Mailer class can break it apart. If it came\n            // from this help desk, the 'loopback' property will be set\n            // to true.\n            $mid_info = Mailer::decodeMessageId($mid);\n            if (!$mid_info || !$mid_info['loopback'])\n                continue;\n            if (isset($mid_info['uid'])\n                && @$mid_info['threadId']\n                && ($t = Thread::lookup($mid_info['threadId']))\n            ) {\n                if (@$mid_info['userId']) {\n                    $mailinfo['userId'] = $mid_info['userId'];\n                }\n                elseif (@$mid_info['staffId']) {\n                    $mailinfo['staffId'] = $mid_info['staffId'];\n                }\n                // ThreadEntry was positively identified\n                return $t;\n            }\n        }\n\n        return null;\n    }\n\n    static function getSearchableFields() {\n        return array(\n            'lastmessage' => new DatetimeField(array(\n                'label' => __('Last Message'),\n            )),\n            'lastresponse' => new DatetimeField(array(\n                'label' => __('Last Response'),\n            )),\n        );\n    }\n\n    static function supportsCustomData() {\n        false;\n    }\n\n    function delete() {\n\n        //Self delete\n        if (!parent::delete())\n            return false;\n\n        // Clear email meta data (header..etc)\n        ThreadEntryEmailInfo::objects()\n            ->filter(array('thread_entry__thread' => $this))\n            ->update(array('headers' => null));\n\n        // Mass delete entries\n        $this->deleteAttachments();\n        $this->removeCollaborators();\n\n        $this->entries->delete();\n\n        // Null out the events\n        $this->events->update(array('thread_id' => 0));\n\n        return true;\n    }\n\n    static function create($vars=false) {\n        $inst = new static($vars);\n        $inst->created = SqlFunction::NOW();\n        return $inst;\n    }\n}\n\nclass ThreadEntryEmailInfo extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_ENTRY_EMAIL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'thread_entry' => array(\n                'constraint' => array('thread_entry_id' => 'ThreadEntry.id'),\n            ),\n        ),\n    );\n}\n\nclass ThreadEntryMergeInfo extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_ENTRY_MERGE_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'thread_entry' => array(\n                'constraint' => array('thread_entry_id' => 'ThreadEntry.id'),\n            ),\n        ),\n    );\n}\n\nclass ThreadEntry extends VerySimpleModel\nimplements TemplateVariable {\n    static $meta = array(\n        'table' => THREAD_ENTRY_TABLE,\n        'pk' => array('id'),\n        'select_related' => array('staff', 'user', 'email_info'),\n        'ordering' => array('created', 'id'),\n        'joins' => array(\n            'thread' => array(\n                'constraint' => array('thread_id' => 'Thread.id'),\n            ),\n            'parent' => array(\n                'constraint' => array('pid' => 'ThreadEntry.id'),\n                'null' => true,\n            ),\n            'children' => array(\n                'reverse' => 'ThreadEntry.parent',\n            ),\n            'email_info' => array(\n                'reverse' => 'ThreadEntryEmailInfo.thread_entry',\n                'list' => false,\n            ),\n            'merge_info' => array(\n                'reverse' => 'ThreadEntryMergeInfo.thread_entry',\n                'list' => false,\n            ),\n            'attachments' => array(\n                'reverse' => 'Attachment.thread_entry',\n                'null' => true,\n            ),\n            'staff' => array(\n                'constraint' => array('staff_id' => 'Staff.staff_id'),\n                'null' => true,\n            ),\n            'user' => array(\n                'constraint' => array('user_id' => 'User.id'),\n                'null' => true,\n            ),\n        ),\n    );\n\n    const FLAG_ORIGINAL_MESSAGE         = 0x0001;\n    const FLAG_EDITED                   = 0x0002;\n    const FLAG_HIDDEN                   = 0x0004;\n    const FLAG_GUARDED                  = 0x0008;   // No replace on edit\n    const FLAG_RESENT                   = 0x0010;\n\n    const FLAG_COLLABORATOR             = 0x0020;   // Message from collaborator\n    const FLAG_BALANCED                 = 0x0040;   // HTML does not need to be balanced on ::display()\n    const FLAG_SYSTEM                   = 0x0080;   // Entry is a system note.\n    const FLAG_REPLY_ALL                = 0x00100;  // Agent response, reply all\n    const FLAG_REPLY_USER               = 0x00200;  // Agent response, reply to User\n    const FLAG_CHILD                    = 0x00400;  // Entry is from a child Ticket\n\n    const PERM_EDIT     = 'thread.edit';\n\n    var $_headers;\n    var $_body;\n    var $_thread;\n    var $_actions;\n    var $is_autoreply;\n    var $is_bounce;\n\n    static protected $perms = array(\n        self::PERM_EDIT => array(\n            'title' => /* @trans */ 'Edit Thread',\n            'desc'  => /* @trans */ 'Ability to edit thread items of other agents',\n        ),\n    );\n\n    // Thread entry types\n    static protected $types = array(\n            'M' => 'message',\n            'R' => 'response',\n            'N' => 'note',\n    );\n\n    function getTypeName() {\n      return self::$types[$this->type];\n    }\n\n    function postEmail($mailinfo) {\n        global $ost;\n\n        if (!($thread = $this->getThread()))\n            // Kind of hard to continue a discussion without a thread ...\n            return false;\n\n        elseif ($this->getEmailMessageId() == $mailinfo['mid'])\n            // Reporting success so the email can be moved or deleted.\n            return true;\n\n        // Mail sent by this system will have a predictable message-id\n        // If this incoming mail matches the code, then it very likely\n        // originated from this system and looped\n        $info = Mailer::decodeMessageId($mailinfo['mid']);\n        if ($info && $info['loopback']) {\n            // This mail was sent by this system. It was received due to\n            // some kind of mail delivery loop. It should not be considered\n            // a response to an existing thread entry\n            if ($ost)\n                $ost->log(LOG_ERR, _S('Email loop detected'), sprintf(\n                _S('It appears as though &lt;%s&gt; is being used as a forwarded or fetched email account and is also being used as a user / system account. Please correct the loop or seek technical assistance.'),\n                $mailinfo['email']),\n\n                // This is quite intentional -- don't continue the loop\n                false,\n                // Force the message, even if logging is disabled\n                true);\n            return $this;\n        }\n\n        return $thread->postEmail($mailinfo, $this);\n    }\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getPid() {\n        return $this->get('pid', 0);\n    }\n\n    function getParent() {\n        return $this->parent;\n    }\n\n    function getType() {\n        return $this->type;\n    }\n\n    function getSource() {\n        return $this->source;\n    }\n\n    function getPoster() {\n        return $this->poster;\n    }\n\n    function getTitle() {\n        return $this->title;\n    }\n\n    function getBody() {\n        if (!isset($this->_body)) {\n            $body = $this->body;\n            if ($body == null && $this->getNumAttachments()) {\n                $attachments = Attachment::objects()\n                   ->filter(array(\n                               'inline' => 1,\n                               'object_id' => $this->getId(),\n                               'type' => ObjectModel::OBJECT_TYPE_THREAD,\n                               'file__type__in' => array('text/html','text/plain'))\n                           );\n                foreach ($attachments as $a)\n                    if ($a->inline && ($f=$a->getFile()))\n                        $body .= $f->getData();\n            }\n            $this->_body = ThreadEntryBody::fromFormattedText($body, $this->format,\n                array('balanced' => $this->hasFlag(self::FLAG_BALANCED))\n            );\n        }\n        return $this->_body;\n    }\n\n    function setBody($body) {\n        global $cfg;\n\n        if (!$body instanceof ThreadEntryBody) {\n            if ($cfg->isRichTextEnabled())\n                $body = new HtmlThreadEntryBody($body);\n            else\n                $body = new TextThreadEntryBody($body);\n        }\n\n        $this->format = $body->getType();\n        $this->body = (string) $body;\n        return $this->save();\n    }\n\n    function getMessage() {\n        return $this->getBody();\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getNumAttachments() {\n        return $this->attachments->count();\n    }\n\n    function getEmailMessageId() {\n        if ($this->email_info)\n            return $this->email_info->mid;\n    }\n\n    function getEmailHeaderArray() {\n        require_once(INCLUDE_DIR.'class.mailparse.php');\n\n        if (!isset($this->_headers) && $this->email_info\n            && isset($this->email_info->headers)\n        ) {\n            $this->_headers = Mail_Parse::splitHeaders($this->email_info->headers);\n        }\n        return $this->_headers;\n    }\n\n    function getEmailReferences($include_mid=true) {\n        $references = '';\n        $headers = self::getEmailHeaderArray();\n        if (isset($headers['References']) && $headers['References'])\n            $references = $headers['References'].\" \";\n        if ($include_mid && ($mid = $this->getEmailMessageId()))\n            $references .= $mid;\n        return $references;\n    }\n\n    /**\n     * Retrieve a list of all the recients of this message if the message\n     * was received via email.\n     *\n     * Returns:\n     * (array<RFC_822>) list of recipients parsed with the Mail/RFC822\n     * address parsing utility. Returns an empty array if the message was\n     * not received via email.\n     */\n    function getAllEmailRecipients() {\n        $headers = self::getEmailHeaderArray();\n        $recipients = array();\n        if (!$headers)\n            return $recipients;\n\n        foreach (array('To', 'Cc') as $H) {\n            if (!isset($headers[$H]))\n                continue;\n\n            if (!($all = Mail_Parse::parseAddressList($headers[$H])))\n                continue;\n\n            $recipients = array_merge($recipients, $all);\n        }\n        return $recipients;\n    }\n\n    /**\n     * Recurse through the ancestry of this thread entry to find the first\n     * thread entry which cites a email Message-ID field.\n     *\n     * Returns:\n     * <ThreadEntry> or null if neither this thread entry nor any of its\n     * ancestry contains an email header with an email Message-ID header.\n     */\n    function findOriginalEmailMessage() {\n        $P = $this;\n        while (!$P->getEmailMessageId()\n            && ($P = $P->getParent()));\n        return $P;\n    }\n\n    function getUIDFromEmailReference($ref) {\n\n        $info = unpack('Vtid/Vuid',\n                Base32::decode(strtolower(substr($ref, -13))));\n\n        if ($info && $info['tid'] == $this->getId())\n            return $info['uid'];\n\n    }\n\n    function getThreadId() {\n        return $this->thread_id;\n    }\n\n    function getThread() {\n\n        if (!isset($this->_thread) && $this->thread_id)\n            // TODO: Consider typing the thread based on its type field\n            $this->_thread = ObjectThread::lookup($this->getThreadId());\n\n        return $this->_thread;\n    }\n\n    function getStaffId() {\n        return isset($this->staff_id) ? $this->staff_id : 0;\n    }\n\n    function getStaff() {\n        return $this->staff;\n    }\n\n    function getUserId() {\n        return isset($this->user_id) ? $this->user_id : 0;\n    }\n\n    function getUser() {\n        return $this->user;\n    }\n\n    function getEditor() {\n        static $types = array(\n            'U' => 'User',\n            'S' => 'Staff',\n        );\n        if (!isset($types[$this->editor_type]))\n            return null;\n\n        return $types[$this->editor_type]::lookup($this->editor);\n    }\n\n    function getName() {\n        if ($this->staff_id)\n            return $this->staff->getName();\n        if ($this->user_id)\n            return $this->user->getName();\n\n        return $this->poster;\n    }\n\n    function getEmailHeader() {\n        if ($this->email_info)\n            return $this->email_info->headers;\n    }\n\n    function isAutoReply() {\n\n        if (!isset($this->is_autoreply))\n            $this->is_autoreply = $this->getEmailHeaderArray()\n                ?  TicketFilter::isAutoReply($this->getEmailHeaderArray()) : false;\n\n        return $this->is_autoreply;\n    }\n\n    function isBounce() {\n\n        if (!isset($this->is_bounce))\n            $this->is_bounce = $this->getEmailHeaderArray()\n                ? TicketFilter::isBounce($this->getEmailHeaderArray()) : false;\n\n        return $this->is_bounce;\n    }\n\n    function isBounceOrAutoReply() {\n        return ($this->isAutoReply() || $this->isBounce());\n    }\n\n    function hasFlag($flag) {\n        return ($this->get('flags', 0) & $flag) != 0;\n    }\n    function clearFlag($flag) {\n        return $this->set('flags', $this->get('flags') & ~$flag);\n    }\n    function setFlag($flag) {\n        return $this->set('flags', $this->get('flags') | $flag);\n    }\n\n    function isSystem() {\n        return $this->hasFlag(self::FLAG_SYSTEM);\n    }\n\n    protected function normalizeFileInfo($files, $add_error=true) {\n        static $error_descriptions = array(\n            UPLOAD_ERR_INI_SIZE     => /* @trans */ 'File is too large',\n            UPLOAD_ERR_FORM_SIZE    => /* @trans */ 'File is too large',\n            UPLOAD_ERR_PARTIAL      => 'The uploaded file was only partially uploaded.',\n            UPLOAD_ERR_NO_TMP_DIR   => 'Missing a temporary folder.',\n            UPLOAD_ERR_CANT_WRITE   => 'Failed to write file to disk.',\n            UPLOAD_ERR_EXTENSION    => 'A PHP extension stopped the file upload.',\n        );\n\n        if (!is_array($files))\n            $files = array($files);\n\n        $ids = array();\n        foreach ($files as $id => $info) {\n            $F = array('inline' => is_array($info) && @$info['inline']);\n            $AF = null;\n\n            if ($info instanceof AttachmentFile)\n                $fileId = $info->getId();\n            elseif (is_array($info) && isset($info['id']))\n                $fileId = $info['id'];\n            elseif ($AF = AttachmentFile::create($info))\n                $fileId = $AF->getId();\n            elseif ($add_error) {\n                $error = $info['error']\n                    ?: sprintf(_S('Unable to save attachment - %s'),\n                        $info['name'] ?: $info['id']);\n                if (is_numeric($error) && isset($error_descriptions[$error])) {\n                    $error = sprintf(_S('Error #%1$d: %2$s'), $error,\n                        _S($error_descriptions[$error]));\n                }\n                // No need to log the missing-file error number\n                if ($error != UPLOAD_ERR_NO_FILE\n                    && ($thread = $this->getThread())\n                ) {\n                    // Log to the thread directly, since alerts should be\n                    // suppressed and this is defintely a system message\n                    $thread->addNote(array(\n                        'title' => _S('File Import Error'),\n                        'note' => new TextThreadEntryBody($error),\n                        'poster' => 'SYSTEM',\n                        'staffId' => 0,\n                    ));\n                }\n                continue;\n            }\n\n            $F['id'] = $fileId;\n\n            if (is_string($info))\n                $F['name'] = $info;\n            if (isset($AF))\n                $F['file'] = $AF;\n\n            // Add things like the `key` field, but don't change current\n            // keys of the file array\n            if (is_array($info))\n                $F += $info;\n\n            // Key is required for CID rewriting in the body\n            if (!isset($F['key']) && ($AF = AttachmentFile::lookup($F['id'])))\n                $F['key'] = $AF->key;\n\n            $ids[] = $F;\n        }\n        return $ids;\n    }\n\n   /*\n    Save attachment to the DB.\n    @file is a mixed var - can be ID or file hashtable.\n    */\n    function createAttachment($file, $name=false) {\n        $att = new Attachment(array(\n            'type' => 'H',\n            'object_id' => $this->getId(),\n            'file_id' => $file['id'],\n            'inline' => $file['inline'] ? 1 : 0,\n        ));\n\n        // Record varying file names in the attachment record\n        if (is_array($file) && isset($file['name'])) {\n            $filename = $file['name'];\n        }\n        elseif (is_string($name)) {\n            $filename = $name;\n        }\n\n        if ($filename) {\n            // This should be a noop since the ORM caches on PK\n            $F = @$file['file'] ?: AttachmentFile::lookup($file['id']);\n            // XXX: This is not Unicode safe\n            // TODO: fix name lookup\n            if ($F && strcasecmp($F->name, $filename) !== 0)\n                $att->name = $filename;\n        }\n\n        if (!$att->save())\n            return false;\n        return $att;\n    }\n\n    function createAttachments(array $files) {\n        $attachments = array();\n        foreach ($files as $info) {\n           if ($A = $this->createAttachment($info, @$info['name'] ?: false))\n               $attachments[] = $A;\n        }\n        return $attachments;\n    }\n\n    function getAttachments() {\n        return $this->attachments;\n    }\n\n    function getAttachmentUrls() {\n        $json = array();\n        foreach ($this->attachments as $att) {\n            $json[$att->file->getKey()] = array(\n                'download_url' => $att->file->getDownloadUrl(),\n                'filename' => $att->getFilename(),\n            );\n        }\n\n        return $json;\n    }\n\n    function getAttachmentsLinks($file='attachment.php', $target='_blank', $separator=' ') {\n        // TODO: Move this to the respective UI templates\n\n        $str='';\n        foreach ($this->attachments as $att ) {\n            if ($att->inline) continue;\n            $size = '';\n            if ($att->file->size)\n                $size=sprintf('<em>(%s)</em>', Format::file_size($att->file->size));\n\n            $str .= sprintf(\n                '<a class=\"Icon file no-pjax\" href=\"%s\" target=\"%s\">%s</a>%s&nbsp;%s',\n                $att->file->getDownloadUrl(), $target,\n                Format::htmlchars($att->file->name), $size, $separator);\n        }\n\n        return $str;\n    }\n\n    /* save email info\n     * TODO: Refactor it to include outgoing emails on responses.\n     */\n\n    function saveEmailInfo($vars) {\n\n        // Don't save empty message ID\n        if (!$vars || !$vars['mid'])\n            return 0;\n\n        $this->ht['email_mid'] = $vars['mid'];\n\n        $header = false;\n        if (isset($vars['header']))\n            $header = $vars['header'];\n        self::logEmailHeaders($this->getId(), $vars['mid'], $header);\n    }\n\n    /* static */\n    function logEmailHeaders($id, $mid, $header=false) {\n\n        if (!$id || !$mid)\n            return false;\n\n        $this->email_info = new ThreadEntryEmailInfo(array(\n            'thread_entry_id' => $id,\n            'mid' => $mid,\n        ));\n\n        if ($header)\n            $this->email_info->headers = trim($header);\n\n        return $this->email_info->save();\n    }\n\n    function getActivity() {\n        return new ThreadActivity('', '');\n    }\n\n    /* variables */\n\n    function __toString() {\n        return (string) $this->getBody();\n    }\n\n    // TemplateVariable interface\n    function asVar() {\n        return (string) $this->getBody()->display('email');\n    }\n\n    function getVar($tag) {\n        switch(strtolower($tag)) {\n            case 'create_date':\n                return new FormattedDate($this->getCreateDate());\n            case 'update_date':\n                return new FormattedDate($this->getUpdateDate());\n            case 'files':\n                throw new OOBContent(OOBContent::FILES, $this->attachments->all());\n        }\n    }\n\n    static function getVarScope() {\n        return array(\n          'files' => __('Attached files'),\n          'body' => __('Message body'),\n          'create_date' => array(\n              'class' => 'FormattedDate', 'desc' => __('Date created'),\n          ),\n          'ip_address' => __('IP address of remote user, for web submissions'),\n          'poster' => __('Submitter of the thread item'),\n          'staff' => array(\n            'class' => 'Staff', 'desc' => __('Agent posting the note or response'),\n          ),\n          'title' => __('Subject, if any'),\n          'user' => array(\n            'class' => 'User', 'desc' => __('User posting the message'),\n          ),\n        );\n    }\n\n    /**\n     * Parameters:\n     * mailinfo (hash<String>) email header information. Must include keys\n     *  - \"mid\" => Message-Id header of incoming mail\n     *  - \"in-reply-to\" => Message-Id the email is a direct response to\n     *  - \"references\" => List of Message-Id's the email is in response\n     *  - \"subject\" => Find external ticket number in the subject line\n     *\n     *  seen (by-ref:bool) a flag that will be set if the message-id was\n     *      positively found, indicating that the message-id has been\n     *      previously seen. This is useful if no thread-id is associated\n     *      with the email (if it was rejected for instance).\n     */\n    function lookupByEmailHeaders(&$mailinfo, &$seen=false) {\n        // Search for messages using the References header, then the\n        // in-reply-to header\n        if ($mailinfo['mid'] &&\n                ($entry = ThreadEntry::objects()\n                 ->filter(array('email_info__mid' => $mailinfo['mid']))\n                 ->order_by(false)\n                 ->first()\n                 )\n         ) {\n            $seen = true;\n            if ($mailinfo['system_emails']\n                    && ($t = $entry->getThread()->getObject())\n                    && $t instanceof Ticket)\n                $t->systemReferral($mailinfo['system_emails']);\n\n            return $entry;\n        }\n\n        $possibles = array();\n        foreach (array('mid', 'in-reply-to', 'references') as $header) {\n            $matches = array();\n            if (!isset($mailinfo[$header]) || !$mailinfo[$header])\n                continue;\n            // Header may have multiple entries (usually separated by\n            // spaces ( )\n            elseif (!preg_match_all('/<([^>@]+@[^>]+)>/', $mailinfo[$header],\n                        $matches))\n                continue;\n\n            // The References header will have the most recent message-id\n            // (parent) on the far right.\n            // @see rfc 1036, section 2.2.5\n            // @see http://www.jwz.org/doc/threading.html\n            $possibles = array_merge($possibles, array_reverse($matches[1]));\n        }\n\n        // Add the message id if it is embedded in the body\n        $match = array();\n        if (preg_match('`(?:class=\"mid-|Ref-Mid: )([^\"\\s]*)(?:$|\")`',\n                (string) $mailinfo['message'], $match)\n            && !in_array($match[1], $possibles)\n        ) {\n            $possibles[] = $match[1];\n        }\n\n        $thread = null;\n        foreach ($possibles as $mid) {\n            // Attempt to detect the ticket and user ids from the\n            // message-id header. If the message originated from\n            // osTicket, the Mailer class can break it apart. If it came\n            // from this help desk, the 'loopback' property will be set\n            // to true.\n            $mid_info = Mailer::decodeMessageId($mid);\n            if (!$mid_info || !$mid_info['loopback'])\n                continue;\n            if (isset($mid_info['uid'])\n                && @$mid_info['entryId']\n                && ($t = ThreadEntry::lookup($mid_info['entryId']))\n                && ($t->thread_id == $mid_info['threadId'])\n            ) {\n                if (@$mid_info['userId']) {\n                    $mailinfo['userId'] = $mid_info['userId'];\n\n                    $user = User::lookupByEmail($mailinfo['email']);\n                    if ($user && $mailinfo['userId'] != $user->getId())\n                      $mailinfo['userId'] = $user->getId();\n                }\n                elseif (@$mid_info['staffId']) {\n                    $mailinfo['staffId'] = $mid_info['staffId'];\n\n                    $staffId = Staff::getIdByEmail($mailinfo['email']);\n                    if ($staffId && $mailinfo['staffId'] != $staffId)\n                      $mailinfo['staffId'] = $staffId;\n                }\n\n                // Capture the user type\n                if (@$mid_info['userClass'])\n                    $mailinfo['userClass'] = $mid_info['userClass'];\n\n\n                // ThreadEntry was positively identified\n                return $t;\n            }\n        }\n        // Passive threading - listen mode\n        if (count($possibles)\n                && ($entry = ThreadEntry::objects()\n                    ->filter(array('email_info__mid__in' => array_map(\n                        function ($a) { return \"<$a>\"; },\n                    $possibles)))\n                    ->first()\n                )\n         ) {\n            $mailinfo['passive'] = true;\n            return $entry;\n        }\n\n        // Search for ticket by the [#123456] in the subject line\n        // This is the last resort -  emails must match to avoid message\n        // injection by third-party.\n        $subject = $mailinfo['subject'];\n        $match = array();\n        if ($subject\n                && $mailinfo['email']\n                // Required `#` followed by one or more of\n                //      punctuation (-) then letters, numbers, and symbols\n                // (Try not to match closing punctuation (`]`) in [#12345])\n                && preg_match(\"/#((\\p{P}*[^\\p{C}\\p{Z}\\p{P}]+)+)/u\", $subject, $match)\n                //Lookup by ticket number\n                && ($ticket = Ticket::lookupByNumber($match[1]))\n                //Lookup the user using the email address\n                && ($user = User::lookup(array('emails__address' => $mailinfo['email'])))) {\n            //We have a valid ticket and user\n            if ($ticket->getUserId() == $user->getId() //owner\n                    ||  ($c = Collaborator::lookup( // check if collaborator\n                            array('user_id' => $user->getId(),\n                                  'thread_id' => $ticket->getThreadId())))) {\n\n                $mailinfo['userId'] = $user->getId();\n                return $ticket->getLastMessage();\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Find a thread entry from a message-id created from the\n     * ::asMessageId() method.\n     *\n     * *DEPRECATED* use Mailer::decodeMessageId() instead\n     */\n    function lookupByRefMessageId($mid, $from) {\n        global $ost;\n\n        $mid = trim($mid, '<>');\n        list($ver, $ids, $mails) = explode('$', $mid, 3);\n\n        // Current version is <null>\n        if ($ver !== '')\n            return false;\n\n        $ids = @unpack('Vthread', base64_decode($ids));\n        if (!$ids || !$ids['thread'])\n            return false;\n\n        $entry = ThreadEntry::lookup($ids['thread']);\n        if (!$entry)\n            return false;\n\n        // Compute the value to be compared from $mails (which used to be in\n        // ThreadEntry::asMessageId() (#nolint)\n        $domain = md5($ost->getConfig()->getURL());\n        $ticket = $entry->getThread()->getObject();\n        if (!$ticket instanceof Ticket)\n            return false;\n\n        $check = sprintf('%s@%s',\n            substr(md5($from . $ticket->getNumber() . $ticket->getId()), -10),\n            substr($domain, -10)\n        );\n\n        if ($check != $mails)\n            return false;\n\n        return $entry;\n    }\n\n    function setExtra($entries, $info=NULL, $thread_id=NULL) {\n        foreach ($entries as $entry) {\n            $mergeInfo = ThreadEntryMergeInfo::objects()\n                ->filter(array('thread_entry_id'=>$entry->getId()))\n                ->values_flat('thread_entry_id')\n                ->first();\n            if (!$mergeInfo) {\n                $mergeInfo = new ThreadEntryMergeInfo(array(\n                    'thread_entry_id' => $entry->getId(),\n                    'data' => json_encode($info),\n                ));\n                $mergeInfo->save();\n            }\n            $entry->saveExtra($info, $thread_id);\n        }\n\n    }\n\n    function saveExtra($info=NULL, $thread_id=NULL) {\n        $this->setFlag(ThreadEntry::FLAG_CHILD, true);\n        $this->thread_id = $thread_id;\n        $this->save();\n    }\n\n    function getMergeData() {\n        return $this->merge_info ? $this->merge_info->data : null;\n    }\n\n    function sortEntries($entries, $ticket) {\n        $buckets = array();\n        $childEntries = array();\n        foreach ($entries as $i=>$E) {\n            if ($ticket) {\n                $extra = json_decode($E->getMergeData(), true);\n                //separated entries\n                if ($ticket->getMergeType() == 'separate') {\n                    if ($extra['thread']) {\n                        $childEntries[$E->getId()] = $E;\n                        if ($childEntries) {\n                            uasort($childEntries, function ($a, $b) { //sort by child ticket\n                                $aExtra = json_decode($a->getMergeData(), true);\n                                $bExtra = json_decode($b->getMergeData(), true);\n                                if ($aExtra['thread'] != $bExtra[\"thread\"])\n                                    return $bExtra[\"thread\"] - $aExtra['thread'];\n                            });\n                            uasort($childEntries, function($a, $b) { //sort by child created date\n                                $aExtra = json_decode($a->getMergeData(), true);\n                                $bExtra = json_decode($b->getMergeData(), true);\n                                if ($aExtra['thread'] == $bExtra[\"thread\"])\n                                    return strtotime($a->created) - strtotime($b->created);\n                            });\n                        }\n                    } else\n                        $buckets[$E->getId()] = $E;\n                } else\n                    $buckets[$E->getId()] = $E;\n            } else //we may be looking at a task\n                $buckets[$E->getId()] = $E;\n        }\n\n        if ($ticket && $ticket->getMergeType() == 'separate')\n            $buckets = $buckets + $childEntries;\n\n        return $buckets;\n    }\n\n    //new entry ... we're trusting the caller to check validity of the data.\n    static function create($vars=false) {\n        global $cfg;\n\n        assert(is_array($vars));\n\n        //Must have...\n        if (!$vars['threadId'] || !$vars['type'])\n            return false;\n\n        if (!$vars['body'] instanceof ThreadEntryBody) {\n            if ($cfg->isRichTextEnabled())\n                $vars['body'] = new HtmlThreadEntryBody($vars['body']);\n            else\n                $vars['body'] = new TextThreadEntryBody($vars['body']);\n        }\n\n        if (!($body = Format::strip_emoticons($vars['body']->getClean())))\n            $body = '-'; //Special tag used to signify empty message as stored.\n\n        // Ensure valid external images\n        $body = Format::stripExternalImages($body);\n\n        $poster = $vars['poster'];\n        if ($poster && is_object($poster))\n            $poster = (string) $poster;\n\n        $entry = new static(array(\n            'created' => SqlFunction::NOW(),\n            'type' => $vars['type'],\n            'thread_id' => $vars['threadId'],\n            'title' => Format::strip_emoticons(Format::sanitize($vars['title'], true)),\n            'format' => $vars['body']->getType(),\n            'staff_id' => $vars['staffId'],\n            'user_id' => $vars['userId'],\n            'poster' => $poster,\n            'source' => $vars['source'],\n            'flags' => $vars['flags'] ?: 0,\n        ));\n\n        //add recipients to thread entry\n        if ($vars['thread_entry_recipients']) {\n            $count = 0;\n            foreach ($vars['thread_entry_recipients'] as $key => $value)\n                $count = $count + count($value);\n\n            if ($count > 1)\n                $entry->flags |= ThreadEntry::FLAG_REPLY_ALL;\n            else\n                $entry->flags |= ThreadEntry::FLAG_REPLY_USER;\n\n            $entry->recipients = json_encode($vars['thread_entry_recipients']);\n        }\n\n\n        if (Collaborator::getIdByUserId($vars['userId'], $vars['threadId']))\n          $entry->flags |= ThreadEntry::FLAG_COLLABORATOR;\n\n        if ($entry->format == 'html')\n            // The current codebase properly balances html\n            $entry->flags |= self::FLAG_BALANCED;\n\n        // Flag system messages\n        if (!($vars['staffId'] || $vars['userId']))\n            $entry->flags |= self::FLAG_SYSTEM;\n\n        if (isset($vars['pid']))\n            $entry->pid = $vars['pid'];\n        // Check if 'reply_to' is in the $vars as the previous ThreadEntry\n        // instance. If the body of the previous message is found in the new\n        // body, strip it out.\n        elseif (isset($vars['reply_to'])\n                && $vars['reply_to'] instanceof ThreadEntry)\n            $entry->pid = $vars['reply_to']->getId();\n\n        if ($vars['ip_address'])\n            $entry->ip_address = $vars['ip_address'];\n\n        /************* ATTACHMENTS *****************/\n        // Drop stripped email inline images\n        if ($vars['attachments']) {\n            foreach ($vars['body']->getStrippedImages() as $cid) {\n                foreach ($vars['attachments'] as $i=>$a) {\n                    if (@$a['cid'] && $a['cid'] == $cid) {\n                        // Inline referenced attachment was stripped\n                        unset($vars['attachments'][$i]);\n                    }\n                }\n            }\n        }\n\n        // Handle extracted embedded images (<img src=\"data:base64,...\" />).\n        // The extraction has already been performed in the ThreadEntryBody\n        // class. Here they should simply be added to the attachments list\n        if ($atts = $vars['body']->getEmbeddedHtmlImages()) {\n            if (!is_array($vars['attachments']))\n                $vars['attachments'] = array();\n            foreach ($atts as $info) {\n                $vars['attachments'][] = $info;\n            }\n        }\n\n        $attached_files = array();\n        foreach (array(\n            // Web uploads and canned attachments\n            $vars['files'],\n            // Emailed or API attachments\n            $vars['attachments'],\n            // Inline images (attached to the draft)\n            Draft::getAttachmentIds($body),\n        ) as $files\n        ) {\n            if (is_array($files)) {\n                // Detect *inline* email attachments\n                foreach ($files as $i=>$a) {\n                    if (isset($a['cid']) && $a['cid']\n                            && strpos($body, 'cid:'.$a['cid']) !== false)\n                        $files[$i]['inline'] = true;\n                }\n                foreach ($entry->normalizeFileInfo($files) as $F) {\n                    // Deduplicate on the `key` attribute. The key is\n                    // necessary for the CID rewrite below\n                    $attached_files[$F['key']] = $F;\n                }\n            }\n        }\n\n        // Change <img src=\"cid:\"> inside the message to point to a unique\n        // hash-code for the attachment. Since the content-id will be\n        // discarded, only the unique hash-code (key) will be available to\n        // retrieve the image later\n        foreach ($attached_files as $key => $a) {\n            if (isset($a['cid']) && $a['cid']) {\n                $body = preg_replace('/src=(\"|\\'|\\b)(?:cid:)?'\n                    . preg_quote($a['cid'], '/').'\\1/i',\n                    'src=\"cid:'.$key.'\"', $body);\n            }\n        }\n\n        // Set body here after it was rewritten to capture the stored file\n        // keys (above)\n\n        // Store body as an attachment if bigger than allowed packet size\n        if (mb_strlen($body) >= 65000) { // 65,535 chars in text field.\n             $entry->body = NULL;\n             $file = array(\n                     'type' => 'text/html',\n                     'name' => md5($body).'.txt',\n                     'data' => $body,\n                     );\n\n             if (($AF = AttachmentFile::create($file))) {\n                 $attached_files[$file['key']] = array(\n                         'id' => $AF->getId(),\n                         'inline' => true,\n                         'file' => $AF);\n             } else {\n                 $entry->body = $body;\n             }\n        } else {\n            $entry->body = $body;\n\n        }\n\n        if (!$entry->save(true))\n            return false;\n\n        // Associate the attached files with this new entry\n        $entry->createAttachments($attached_files);\n\n\n        // Save mail message id, if available\n        $entry->saveEmailInfo($vars);\n\n        Signal::send('threadentry.created', $entry);\n\n        return $entry;\n    }\n\n    static function add($vars, &$errors=array()) {\n        return self::create($vars);\n    }\n\n    // Extensible thread entry actions ------------------------\n    /**\n     * getActions\n     *\n     * Retrieve a list of possible actions. This list is shown to the agent\n     * via drop-down list at the top-right of the thread entry when rendered\n     * in the UI.\n     */\n    function getActions() {\n        if (!isset($this->_actions)) {\n            $this->_actions = array();\n\n            foreach (self::$action_registry as $group=>$list) {\n                $T = array();\n                $this->_actions[__($group)] = &$T;\n                foreach ($list as $id=>$action) {\n                    $A = new $action($this);\n                    if ($A->isVisible()) {\n                        $T[$id] = $A;\n                    }\n                }\n                unset($T);\n            }\n        }\n        return $this->_actions;\n    }\n\n    function hasActions() {\n        foreach ($this->getActions() as $group => $list) {\n            if (count($list))\n                return true;\n        }\n        return false;\n    }\n\n    function triggerAction($name) {\n        foreach ($this->getActions() as $group=>$list) {\n            foreach ($list as $id=>$action) {\n                if (0 === strcasecmp($id, $name)) {\n                    if (!$action->isEnabled())\n                        return false;\n\n                    $action->trigger();\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    static $action_registry = array();\n\n    static function registerAction($group, $action) {\n        if (!isset(self::$action_registry[$group]))\n            self::$action_registry[$group] = array();\n\n        self::$action_registry[$group][$action::getId()] = $action;\n    }\n\n    static function getPermissions() {\n        return self::$perms;\n    }\n\n    static function getTypes() {\n        return self::$types;\n    }\n}\n\nRolePermission::register(/* @trans */ 'Tickets', ThreadEntry::getPermissions());\n\n\nclass ThreadReferral extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_REFERRAL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'thread' => array(\n                'constraint' => array('thread_id' => 'Thread.id'),\n            ),\n            'agent' => array(\n                'constraint' => array(\n                    'object_type' => \"'S'\",\n                    'object_id' => 'Staff.staff_id',\n                ),\n            ),\n            'team' => array(\n                'constraint' => array(\n                    'object_type' => \"'E'\",\n                    'object_id' => 'Team.team_id',\n                ),\n            ),\n            'dept' => array(\n                'constraint' => array(\n                    'object_type' => \"'D'\",\n                    'object_id' => 'Dept.id',\n                ),\n            ),\n          )\n        );\n\n    var $icons = array(\n            'E' => 'group',\n            'D' => 'sitemap',\n            'S' => 'user'\n            );\n\n    var $_object = null;\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return (string) $this->getObject();\n    }\n\n    function getObject() {\n\n        if (!isset($this->_object)) {\n            $this->_object = ObjectModel::lookup(\n                    $this->object_id, $this->object_type);\n        }\n\n        return $this->_object;\n    }\n\n    function getIcon() {\n        return $this->icons[$this->object_type];\n    }\n\n    function display() {\n        return sprintf('<i class=\"icon-%s\"></i> %s',\n                $this->getIcon(), $this->getName());\n    }\n\n    static function create($vars) {\n\n        $new = new self($vars);\n        $new->created = SqlFunction::NOW();\n        return $new->save();\n    }\n}\n\nclass ThreadEvent extends VerySimpleModel {\n    static $meta = array(\n        'table' => THREAD_EVENT_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            // Originator of activity\n            'agent' => array(\n                'constraint' => array(\n                    'uid' => 'Staff.staff_id',\n                ),\n                'null' => true,\n            ),\n            // Agent assignee\n            'staff' => array(\n                'constraint' => array(\n                    'staff_id' => 'Staff.staff_id',\n                ),\n                'null' => true,\n            ),\n            'team' => array(\n                'constraint' => array(\n                    'team_id' => 'Team.team_id',\n                ),\n                'null' => true,\n            ),\n            'thread' => array(\n                'constraint' => array('thread_id' => 'Thread.id'),\n            ),\n            'user' => array(\n                'constraint' => array(\n                    'uid' => 'User.id',\n                ),\n                'null' => true,\n            ),\n            'dept' => array(\n                'constraint' => array(\n                    'dept_id' => 'Dept.id',\n                ),\n                'null' => true,\n            ),\n            'topic' => array(\n                'constraint' => array(\n                    'topic_id' => 'Topic.topic_id',\n                ),\n                'null' => true,\n            ),\n        ),\n    );\n\n    // Valid events for database storage\n    const ASSIGNED  = 'assigned';\n    const RELEASED  = 'released';\n    const CLOSED    = 'closed';\n    const CREATED   = 'created';\n    const COLLAB    = 'collab';\n    const EDITED    = 'edited';\n    const ERROR     = 'error';\n    const OVERDUE   = 'overdue';\n    const REOPENED  = 'reopened';\n    const STATUS    = 'status';\n    const TRANSFERRED = 'transferred';\n    const REFERRED = 'referred';\n    const VIEWED    = 'viewed';\n    const MERGED    = 'merged';\n    const UNLINKED    = 'unlinked';\n\n    const MODE_STAFF = 1;\n    const MODE_CLIENT = 2;\n\n    var $_data;\n\n    function getAvatar($size=null) {\n        if ($this->uid && $this->uid_type == 'S')\n            return $this->agent ? $this->agent->getAvatar($size) : '';\n        if ($this->uid && $this->uid_type == 'U')\n            return $this->user ? $this->user->getAvatar($size) : '';\n    }\n\n    function getUserName() {\n        if ($this->uid && $this->uid_type == 'S')\n            return $this->agent ? $this->agent->getName() : $this->username;\n        if ($this->uid && $this->uid_type == 'U')\n            return $this->user ? $this->user->getName() : $this->username;\n        return $this->username;\n    }\n\n    function getIcon() {\n        $icons = array(\n            'assigned'    => 'hand-right',\n            'released'    => 'unlock',\n            'collab'      => 'group',\n            'created'     => 'magic',\n            'overdue'     => 'time',\n            'transferred' => 'share-alt',\n            'referred'    => 'exchange',\n            'edited'      => 'pencil',\n            'closed'      => 'thumbs-up-alt',\n            'reopened'    => 'rotate-right',\n            'resent'      => 'reply-all icon-flip-horizontal',\n            'merged'      => 'code-fork',\n            'linked'      => 'link',\n            'unlinked'    => 'unlink',\n        );\n        return @$icons[$this->state] ?: 'chevron-sign-right';\n    }\n\n    function getDescription($mode=self::MODE_STAFF) {\n        // Abstract description\n        return $this->template(sprintf(\n            __('%s by {somebody} {timestamp}'),\n            $this->state\n        ), $mode);\n    }\n\n    function template($description, $mode=self::MODE_STAFF) {\n        global $thisstaff, $cfg;\n\n        $self = $this;\n        $hideName = $cfg->hideStaffName();\n        return preg_replace_callback('/\\{(<(?P<type>([^>]+))>)?(?P<key>[^}.]+)(\\.(?P<data>[^}]+))?\\}/',\n            function ($m) use ($self, $thisstaff, $cfg, $hideName, $mode) {\n                switch ($m['key']) {\n                case 'assignees':\n                    $assignees = array();\n                    if ($S = $self->staff) {\n                        $avatar = '';\n                        if ($cfg->isAvatarsEnabled())\n                            $avatar = $S->getAvatar();\n                        $assignees[] =\n                            $avatar.$S->getName();\n                    }\n                    if ($T = $self->team) {\n                        $assignees[] = $T->getLocalName();\n                    }\n                    return implode('/', $assignees);\n                case 'somebody':\n                    if ($hideName && $self->agent && $mode == self::MODE_CLIENT)\n                        $name = __('Staff');\n                    else\n                        $name = $self->getUserName();\n                    if ($cfg->isAvatarsEnabled()\n                            && ($avatar = $self->getAvatar()))\n                        $name = $avatar.$name;\n                    return $name;\n                case 'timestamp':\n                    $timeFormat = null;\n                    if ($mode != self::MODE_CLIENT && $thisstaff\n                            && !strcasecmp($thisstaff->datetime_format,\n                                'relative')) {\n                        $timeFormat = function ($timestamp) {\n                            return Format::relativeTime(Misc::db2gmtime($timestamp));\n                        };\n                    }\n\n                    return sprintf('<time %s datetime=\"%s\"\n                            data-toggle=\"tooltip\" title=\"%s\">%s</time>',\n                        $timeFormat ? 'class=\"relative\"' : '',\n                        date(DateTime::W3C, Misc::db2gmtime($self->timestamp)),\n                        Format::daydatetime($self->timestamp),\n                        $timeFormat ? $timeFormat($self->timestamp) :\n                        Format::datetime($self->timestamp)\n                    );\n                case 'agent':\n                    $name = $self->agent->getName();\n                    if ($cfg->isAvatarsEnabled()\n                            && ($avatar = $self->getAvatar()))\n                        $name = $avatar.$name;\n                    return $name;\n                case 'dept':\n                    if ($dept = $self->getDept())\n                        return $dept->getLocalName();\n                    return __('None');\n                case 'data':\n                    $val = $self->getData($m['data']);\n                    if (is_array($val))\n                        list($val, $fallback) = $val;\n                    if ($m['type'] && class_exists($m['type']))\n                        $val = $m['type']::lookup($val);\n                    if (!$val && $fallback)\n                        $val = $fallback;\n                    return Format::htmlchars((string) $val);\n                }\n                return $m[0];\n            },\n            $description\n        );\n    }\n\n    function getDept() {\n        return $this->dept;\n    }\n\n    function getData($key=false) {\n        if (!isset($this->_data))\n            $this->_data = JsonDataParser::decode($this->data);\n        return ($key) ? @$this->_data[$key] : $this->_data;\n    }\n\n    function render($mode) {\n        $inc = ($mode == self::MODE_STAFF) ? STAFFINC_DIR : CLIENTINC_DIR;\n        $event = $this->getTypedEvent();\n        include $inc . 'templates/thread-event.tmpl.php';\n    }\n\n    static function create($ht=false, $user=false) {\n        $inst = new static($ht);\n        $inst->timestamp = SqlFunction::NOW();\n\n        global $thisstaff, $thisclient;\n        $user = is_object($user) ? $user : $thisstaff ?: $thisclient;\n        if ($user instanceof Staff) {\n            $inst->uid_type = 'S';\n            $inst->uid = $user->getId();\n        }\n        elseif ($user instanceof User) {\n            $inst->uid_type = 'U';\n            $inst->uid = $user->getId();\n        }\n\n        return $inst;\n    }\n\n    static function forTicket($ticket, $state, $user=false) {\n      global $thisstaff;\n\n      if($thisstaff && !$ticket->getStaffId())\n        $staff = $thisstaff->getId();\n      else\n        $staff = $ticket->getStaffId();\n\n        $inst = self::create(array(\n            'thread_type' => ObjectModel::OBJECT_TYPE_TICKET,\n            'staff_id' => $staff,\n            'team_id' => $ticket->getTeamId(),\n            'dept_id' => $ticket->getDeptId(),\n            'topic_id' => $ticket->getTopicId(),\n        ), $user);\n        return $inst;\n    }\n\n    static function forTask($task, $state, $user=false) {\n        $inst = self::create(array(\n            'thread_type' => ObjectModel::OBJECT_TYPE_TASK,\n            'staff_id' => $task->getStaffId(),\n            'team_id' => $task->getTeamId(),\n            'dept_id' => $task->getDeptId(),\n        ), $user);\n        return $inst;\n    }\n\n    function getTypedEvent() {\n        static $subclasses;\n\n        if (!isset($subclasses)) {\n            $parent = get_class($this);\n            $subclasses = array();\n            foreach (get_declared_classes() as $class) {\n                if (is_subclass_of($class, $parent))\n                    $subclasses[$class::$state] = $class;\n            }\n        }\n        $this->state = Event::getNameById($this->event_id);\n        if (!($class = $subclasses[$this->state]))\n            return $this;\n        return new $class($this->ht);\n    }\n}\n\nclass Event extends VerySimpleModel {\n    static $meta = array(\n        'table' => EVENT_TABLE,\n        'pk' => array('id'),\n    );\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return $this->name;\n    }\n\n    function getDescription() {\n        return $this->description;\n    }\n\n    static function getNameById($id) {\n        return array_search($id, self::getIds());\n    }\n\n    static function getIdByName($name) {\n         $ids =  self::getIds();\n         return $ids[$name] ?: 0;\n    }\n\n    static function getIds() {\n        static $ids;\n\n        if (!isset($ids)) {\n            $ids = array();\n            $events = self::objects()->values_flat('id', 'name');\n            foreach ($events as $row) {\n                list($id, $name) = $row;\n                $ids[$name] = $id;\n            }\n        }\n\n        return $ids;\n    }\n\n    static function getStates($dropdown=false) {\n        $names = array();\n        if ($dropdown)\n            $names = array(__('All'));\n\n        $events = self::objects()->values_flat('name');\n        foreach ($events as $val)\n            $names[] = ucfirst($val[0]);\n\n        return $names;\n    }\n\n    static function create($vars=false, &$errors=array()) {\n        $event = new static($vars);\n        return $event;\n    }\n\n    static function __create($vars, &$errors=array()) {\n        $event = self::create($vars);\n        $event->save();\n        return $event;\n    }\n\n    function save($refetch=false) {\n        return parent::save($refetch);\n    }\n}\n\nclass ThreadEvents extends InstrumentedList {\n    function annul($event) {\n        $event_id = Event::getIdByName($event);\n        $this->queryset\n            ->filter(array('event_id' => $event_id))\n            ->update(array('annulled' => 1));\n    }\n\n    /**\n     * Add an event to the thread activity log.\n     *\n     * Parameters:\n     * $object - Object to log activity for\n     * $state - State name of the activity (one of 'created', 'edited',\n     *      'deleted', 'closed', 'reopened', 'error', 'collab', 'resent',\n     *      'assigned', 'released', 'transferred')\n     * $data - (array?) Details about the state change\n     * $user - (string|User|Staff) user triggering the state change\n     * $annul - (state) a corresponding state change that is annulled by\n     *      this event\n     */\n    function log($object, $state, $data=null, $user=null, $annul=null) {\n        global $thisstaff, $thisclient;\n\n        if ($object && ($object instanceof Ticket))\n            // TODO: Use $object->createEvent() (nolint)\n            $event = ThreadEvent::forTicket($object, $state, $user);\n        elseif ($object && ($object instanceof Task))\n            $event = ThreadEvent::forTask($object, $state, $user);\n\n        if (is_null($event))\n            return;\n\n        # Annul previous entries if requested (for instance, reopening a\n        # ticket will annul an 'closed' entry). This will be useful to\n        # easily prevent repeated statistics.\n        if ($annul) {\n            $this->annul($annul);\n        }\n\n        $username = $user;\n        $user = is_object($user) ? $user : $thisclient ?: $thisstaff;\n        if (!is_string($username)) {\n            if ($user instanceof Staff) {\n                $username = $user->getUserName();\n            }\n            // XXX: Use $user here\n            elseif ($thisclient) {\n                if ($thisclient->hasAccount())\n                    $username = $thisclient->getFullName();\n                if (!$username)\n                    $username = $thisclient->getEmail();\n            }\n            else {\n                # XXX: Security Violation ?\n                $username = 'SYSTEM';\n            }\n        }\n        $event->username = $username;\n        $event->event_id = Event::getIdByName($state);\n\n        if ($data) {\n            if (is_array($data))\n                $data = JsonDataEncoder::encode($data);\n            if (!is_string($data))\n                throw new InvalidArgumentException('Data must be string or array');\n            $event->data = $data;\n        }\n\n        $this->add($event);\n\n        // Save event immediately\n        return $event->save();\n    }\n}\n\nclass AssignmentEvent extends ThreadEvent {\n    static $icon = 'hand-right';\n    static $state = 'assigned';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case !is_array($data):\n        default:\n            $desc = __('Assignee changed by <b>{somebody}</b> to <strong>{assignees}</strong> {timestamp}');\n            break;\n        case isset($data['staff']):\n            $desc = __('<b>{somebody}</b> assigned this to <strong>{<Staff>data.staff}</strong> {timestamp}');\n            break;\n        case isset($data['team']):\n            $desc = __('<b>{somebody}</b> assigned this to <strong>{<Team>data.team}</strong> {timestamp}');\n            break;\n        case isset($data['claim']):\n            $desc = __('<b>{somebody}</b> claimed this {timestamp}');\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass ReleaseEvent extends ThreadEvent {\n    static $icon = 'unlock';\n    static $state = 'released';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['staff'], $data['team']):\n            $desc = __('Ticket released from <strong>{<Team>data.team}</strong> and <strong>{<Staff>data.staff}</strong> by <b>{somebody}</b> {timestamp}');\n            break;\n        case isset($data['staff']):\n            $desc = __('Ticket released from <strong>{<Staff>data.staff}</strong> by <b>{somebody}</b> {timestamp}');\n            break;\n        case isset($data['team']):\n            $desc = __('Ticket released from <strong>{<Team>data.team}</strong> by <b>{somebody}</b> {timestamp}');\n            break;\n        default:\n            $desc = __('<b>{somebody}</b> released ticket assignment {timestamp}');\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass ReferralEvent extends ThreadEvent {\n    static $icon = 'exchange';\n    static $state = 'referred';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['staff']):\n            $desc = __('<b>{somebody}</b> referred this to <strong>{<Staff>data.staff}</strong> {timestamp}');\n            break;\n        case isset($data['team']):\n            $desc = __('<b>{somebody}</b> referred this to <strong>{<Team>data.team}</strong> {timestamp}');\n            break;\n        case isset($data['dept']):\n            $desc = __('<b>{somebody}</b> referred this to <strong>{<Dept>data.dept}</strong> {timestamp}');\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass CloseEvent extends ThreadEvent {\n    static $icon = 'thumbs-up-alt';\n    static $state = 'closed';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        if ($this->getData('status'))\n            return $this->template(__('Closed by <b>{somebody}</b> with status of {<TicketStatus>data.status} {timestamp}'), $mode);\n        else\n            return $this->template(__('Closed by <b>{somebody}</b> {timestamp}'), $mode);\n    }\n}\n\nclass CollaboratorEvent extends ThreadEvent {\n    static $icon = 'group';\n    static $state = 'collab';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['org']):\n            $desc = __('Collaborators for {<Organization>data.org} organization added');\n            break;\n        case isset($data['del']):\n            $base = __('<b>{somebody}</b> removed <strong>%s</strong> from the collaborators {timestamp}');\n            $collabs = array();\n            $users = User::objects()->filter(array('id__in' => array_keys($data['del'])));\n            foreach ($data['del'] as $id=>$c) {\n                $U = false;\n                foreach ($users as $user) {\n                    if ($user->id == $id) {\n                        $U = $user;\n                        break;\n                    }\n                }\n                $collabs[] = Format::htmlchars($U ? $U->getName() : @$c['name'] ?: $c);\n            }\n            $desc = sprintf($base, implode(', ', $collabs));\n            break;\n        case isset($data['add']):\n            $base = __('<b>{somebody}</b> added <strong>%s</strong> as collaborators {timestamp}');\n            $collabs = array();\n            if ($data['add']) {\n                $users = User::objects()->filter(array('id__in' => array_keys($data['add'])));\n                foreach ($data['add'] as $id=>$c) {\n                    $U = false;\n                    foreach ($users as $user) {\n                        if ($user->id == $id) {\n                            $U = $user;\n                            break;\n                        }\n                    }\n                    $c = sprintf(\"%s %s\",\n                        Format::htmlchars($U ? $U->getName() : @$c['name'] ?: $c),\n                        $c['src'] ? sprintf(__('via %s'\n                            /* e.g. \"Added collab \"Me <me@company.me>\" via Email (to)\" */\n                            ), $c['src']) : ''\n                    );\n                    $collabs[] = $c;\n                }\n            }\n            $desc = $collabs\n                ? sprintf($base, implode(', ', $collabs))\n                : 'somebody';\n            break;\n        }\n        return $this->template($desc, $mode);\n    }\n}\n\nclass CreationEvent extends ThreadEvent {\n    static $icon = 'magic';\n    static $state = 'created';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('Created by <b>{somebody}</b> {timestamp}'), $mode);\n    }\n}\n\nclass EditEvent extends ThreadEvent {\n    static $icon = 'pencil';\n    static $state = 'edited';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        $data = $this->getData();\n        switch (true) {\n        case isset($data['owner']):\n            $desc = __('<b>{somebody}</b> changed ownership to {<User>data.owner} {timestamp}');\n            break;\n        case isset($data['status']):\n            $desc = __('<b>{somebody}</b> changed the status to <strong>{<TicketStatus>data.status}</strong> {timestamp}');\n            break;\n        case isset($data['fields']):\n            $fields = $changes = array();\n            foreach (DynamicFormField::objects()->filter(array(\n                'id__in' => array_keys($data['fields'])\n            )) as $F) {\n                $fields[$F->id] = $F;\n            }\n            foreach ($data['fields'] as $id=>$f) {\n                if (!($field = $fields[$id]))\n                   continue;\n                if ($mode == self::MODE_CLIENT &&  !$field->isVisibleToUsers())\n                    continue;\n                list($old, $new) = $f;\n                $impl = $field->getImpl($field);\n                $before = $impl->to_php($old);\n                $after = $impl->to_php($new);\n                $changes[] = sprintf('<strong>%s</strong> %s',\n                    $field->getLocal('label'), $impl->whatChanged($before, $after));\n            }\n            // Fallthrough to other editable fields\n        case isset($data['topic_id']):\n        case isset($data['sla_id']):\n        case isset($data['source']):\n        case isset($data['user_id']):\n        case isset($data['duedate']):\n            $base = __('Updated by <b>{somebody}</b> {timestamp} \u2014 %s');\n            foreach (array(\n                'topic_id' => array(__('Help Topic'), array('Topic', 'getTopicName')),\n                'sla_id' => array(__('SLA'), array('SLA', 'getSLAName')),\n                'duedate' => array(__('Due Date'), array('Format', 'date')),\n                'user_id' => array(__('Ticket Owner'), array('User', 'getNameById')),\n                'source' => array(__('Source'), null)\n            ) as $f => $info) {\n                if (isset($data[$f])) {\n                    list($name, $desc) = $info;\n                    list($old, $new) = $data[$f];\n                    if ($desc && is_callable($desc)) {\n                        $new = call_user_func($desc, $new);\n                        if ($old)\n                            $old = call_user_func($desc, $old);\n                    }\n                    if ($old and $new) {\n                        $changes[] = sprintf(\n                            __('<strong>%1$s</strong> changed from <strong>%2$s</strong> to <strong>%3$s</strong>'),\n                            Format::htmlchars($name), Format::htmlchars($old), Format::htmlchars($new)\n                        );\n                    }\n                    elseif ($new) {\n                        $changes[] = sprintf(\n                            __('<strong>%1$s</strong> set to <strong>%2$s</strong>'),\n                            Format::htmlchars($name), Format::htmlchars($new)\n                        );\n                    }\n                    else {\n                        $changes[] = sprintf(\n                            __('unset <strong>%1$s</strong>'),\n                            Format::htmlchars($name)\n                        );\n                    }\n                }\n            }\n            $desc = $changes\n                ? sprintf($base, implode(', ', $changes)) : '';\n            break;\n        }\n\n        return $this->template($desc, $mode);\n    }\n}\n\nclass OverdueEvent extends ThreadEvent {\n    static $icon = 'time';\n    static $state = 'overdue';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('Flagged as overdue by the system {timestamp}'), $mode);\n    }\n}\n\nclass ReopenEvent extends ThreadEvent {\n    static $icon = 'rotate-right';\n    static $state = 'reopened';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('Reopened by <b>{somebody}</b> {timestamp}'), $mode);\n    }\n}\n\nclass ResendEvent extends ThreadEvent {\n    static $icon = 'reply-all icon-flip-horizontal';\n    static $state = 'resent';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('<b>{somebody}</b> resent <strong><a href=\"#thread-entry-{data.entry}\">a previous response</a></strong> {timestamp}'), $mode);\n    }\n}\n\nclass TransferEvent extends ThreadEvent {\n    static $icon = 'share-alt';\n    static $state = 'transferred';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return $this->template(__('<b>{somebody}</b> transferred this to <strong>{dept}</strong> {timestamp}'), $mode);\n    }\n}\n\nclass ViewEvent extends ThreadEvent {\n    static $state = 'viewed';\n}\n\nclass MergedEvent extends ThreadEvent {\n    static $icon = 'code-fork';\n    static $state = 'merged';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return sprintf($this->template(__('<b>{somebody}</b> merged this ticket with %s{data.id}%s<b>{data.ticket}</b>%s {timestamp}'), $mode),\n                '<a href=\"tickets.php?id=', '\">', '</a>');\n    }\n}\n\nclass LinkedEvent extends ThreadEvent {\n    static $icon = 'link';\n    static $state = 'linked';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return sprintf($this->template(__('<b>{somebody}</b> linked this ticket with %s{data.id}%s<b>{data.ticket}</b>%s {timestamp}'), $mode),\n                '<a href=\"tickets.php?id=', '\">', '</a>');\n    }\n}\n\nclass UnlinkEvent extends ThreadEvent {\n    static $icon = 'unlink';\n    static $state = 'unlinked';\n\n    function getDescription($mode=self::MODE_STAFF) {\n        return sprintf($this->template(__('<b>{somebody}</b> unlinked this ticket from %s{data.id}%s<b>{data.ticket}</b>%s {timestamp}'), $mode),\n                '<a href=\"tickets.php?id=', '\">', '</a>');\n    }\n}\n\nclass ThreadEntryBody /* extends SplString */ {\n\n    static $types = array('text', 'html');\n\n    var $body;\n    var $type;\n    var $stripped_images = array();\n    var $embedded_images = array();\n    var $options = array(\n        'strip-embedded' => true\n    );\n\n    function __construct($body, $type='text', $options=array()) {\n        $type = strtolower($type);\n        if (!in_array($type, static::$types))\n            throw new Exception(\"$type: Unsupported ThreadEntryBody type\");\n        $this->body = (string) $body;\n        if (strlen($this->body) > 250000) {\n            $max_packet = db_get_variable('max_allowed_packet', 'global');\n            // Truncate just short of the max_allowed_packet\n            $this->body = substr($this->body, 0, $max_packet - 2048) . ' ... '\n               . _S('(truncated)');\n        }\n        $this->type = $type;\n        $this->options = array_merge($this->options, $options);\n    }\n\n    function isEmpty() {\n        return !$this->body || $this->body == '-';\n    }\n\n    function convertTo($type) {\n        if ($type === $this->type)\n            return $this;\n\n        $conv = $this->type . ':' . strtolower($type);\n        switch ($conv) {\n        case 'text:html':\n            return new ThreadEntryBody(sprintf('<pre>%s</pre>',\n                Format::htmlchars($this->body)), $type);\n        case 'html:text':\n            return new ThreadEntryBody(Format::html2text((string) $this), $type);\n        }\n    }\n\n    function stripQuotedReply($tag) {\n\n        //Strip quoted reply...on emailed  messages\n        if (!$tag || strpos($this->body, $tag) === false)\n            return;\n\n        // Capture a list of inline images\n        $images_before = $images_after = array();\n        preg_match_all('/src=(\"|\\'|\\b)cid:(\\S+)\\1/', $this->body, $images_before,\n            PREG_PATTERN_ORDER);\n\n        // Strip the quoted part of the body\n        if ((list($msg) = explode($tag, $this->body, 2)) && trim($msg)) {\n            $this->body = $msg;\n\n            // Capture a list of dropped inline images\n            if ($images_before) {\n                preg_match_all('/src=(\"|\\'|\\b)cid:(\\S+)\\1/', $this->body,\n                    $images_after, PREG_PATTERN_ORDER);\n                $this->stripped_images = array_diff($images_before[2],\n                    $images_after[2]);\n            }\n        }\n    }\n\n    function getStrippedImages() {\n        return $this->stripped_images;\n    }\n\n    function getEmbeddedHtmlImages() {\n        return $this->embedded_images;\n    }\n\n    function getType() {\n        return $this->type;\n    }\n\n    function getClean() {\n        switch ($this->type) {\n        case 'html':\n            return trim($this->body, \" <>br/\\t\\n\\r\") ? $this->body: '';\n        case 'text':\n            return trim($this->body) ? $this->body: '';\n        default:\n            return trim($this->body);\n        }\n    }\n\n    function __toString() {\n        return (string) $this->body;\n    }\n\n    function toHtml() {\n        return $this->display('html');\n    }\n\n    function prepend($what) {\n        $this->body = $what . $this->body;\n    }\n\n    function append($what) {\n        $this->body .= $what;\n    }\n\n    function asVar() {\n        // Email template, assume HTML\n        return $this->display('email');\n    }\n\n    function display($format=false) {\n        throw new Exception('display: Abstract display() method not implemented');\n    }\n\n    function getSearchable() {\n        return Format::searchable($this->body);\n    }\n\n    static function fromFormattedText($text, $format=false, $options=array()) {\n        switch ($format) {\n        case 'text':\n            return new TextThreadEntryBody($text);\n        case 'html':\n            return new HtmlThreadEntryBody($text, array('strip-embedded'=>false) + $options);\n        default:\n            return new ThreadEntryBody($text);\n        }\n    }\n\n    static function clean($text, $format=null) {\n        global $cfg;\n        $format = $format ?: ($cfg->isRichTextEnabled() ? 'html' : 'text');\n        $body = static::fromFormattedText($text, $format);\n        return $body->getClean();\n    }\n}\n\nclass TextThreadEntryBody extends ThreadEntryBody {\n    function __construct($body, $options=array()) {\n        parent::__construct($body, 'text', $options);\n    }\n\n    function getClean() {\n        return Format::htmlchars(Format::html_balance(Format::stripEmptyLines(parent::getClean())));\n    }\n\n    function prepend($what) {\n        $this->body = $what . \"\\n\\n\" . $this->body;\n    }\n\n    function display($output=false) {\n        if ($this->isEmpty())\n            return '(empty)';\n\n        $escaped = Format::htmlchars($this->body);\n        switch ($output) {\n        case 'html':\n            return '<div style=\"white-space:pre-wrap\">'\n                .Format::clickableurls($escaped).'</div>';\n        case 'email':\n            return '<div style=\"white-space:pre-wrap\">'\n                .$escaped.'</div>';\n        case 'pdf':\n            return nl2br($escaped);\n        default:\n            return '<pre>'.$escaped.'</pre>';\n        }\n    }\n}\nclass HtmlThreadEntryBody extends ThreadEntryBody {\n    function __construct($body, $options=array()) {\n        if (!isset($options['strip-embedded']) || $options['strip-embedded'])\n            $body = $this->extractEmbeddedHtmlImages($body);\n        parent::__construct($body, 'html', $options);\n    }\n\n    function extractEmbeddedHtmlImages($body) {\n        $self = $this;\n        return preg_replace_callback('/src=\"(data:[^\"]+)\"/',\n        function ($m) use ($self) {\n            $info = Format::parseRfc2397($m[1], false, false);\n            $info['cid'] = 'img'.Misc::randCode(12);\n            list(,$type) = explode('/', $info['type'], 2);\n            $info['name'] = 'image'.Misc::randCode(4).'.'.$type;\n            $self->embedded_images[] = $info;\n            return 'src=\"cid:'.$info['cid'].'\"';\n        }, $body);\n    }\n\n    function getClean() {\n        return Format::sanitize(parent::getClean());\n    }\n\n    function getSearchable() {\n        // Replace tag chars with spaces (to ensure words are separated)\n        $body = Format::html($this->body, array('hook_tag' => function($el, $attributes=0) {\n            static $non_ws = array('wbr' => 1);\n            return (isset($non_ws[$el])) ? '' : ' ';\n        }));\n        // Collapse multiple white-spaces\n        $body = html_entity_decode($body, ENT_QUOTES);\n        $body = preg_replace('`\\s+`u', ' ', $body);\n        return Format::searchable($body);\n    }\n\n    function prepend($what) {\n        $this->body = sprintf('<div>%s<br/><br/></div>%s', $what, $this->body);\n    }\n\n    function display($output=false) {\n        if ($this->isEmpty())\n            return '(empty)';\n\n        switch ($output) {\n        case 'email':\n            return $this->body;\n        case 'pdf':\n            return Format::clickableurls(Format::stripExternalImages($this->body, true));\n        default:\n            return Format::display($this->body, true, !$this->options['balanced']);\n        }\n    }\n}\n\n\n/* Message - Ticket thread entry of type message */\nclass MessageThreadEntry extends ThreadEntry {\n\n    const ENTRY_TYPE = 'M';\n\n    function getSubject() {\n        return $this->getTitle();\n    }\n\n    static function add($vars, &$errors=array()) {\n\n        if (!$vars || !is_array($vars) || !$vars['threadId'])\n            $errors['err'] = __('Missing or invalid data');\n        elseif (!$vars['message'])\n            $errors['message'] = __('Message content is required');\n\n        if ($errors) return false;\n\n        $vars['type'] = self::ENTRY_TYPE;\n        $vars['body'] = $vars['message'];\n\n        if (!$vars['poster']\n                && $vars['userId']\n                && ($user = User::lookup($vars['userId'])))\n            $vars['poster'] = (string) $user->getName();\n\n        return parent::add($vars);\n    }\n\n    static function getVarScope() {\n        $base = parent::getVarScope();\n        unset($base['staff']);\n        return $base;\n    }\n}\n\n/* thread entry of type response */\nclass ResponseThreadEntry extends ThreadEntry {\n\n    const ENTRY_TYPE = 'R';\n\n    function getActivity() {\n        return new ThreadActivity(\n                _S('New Response'),\n                _S('New response posted'));\n    }\n\n    function getSubject() {\n        return $this->getTitle();\n    }\n\n    function getRespondent() {\n        return $this->getStaff();\n    }\n\n    static function add($vars, &$errors=array()) {\n\n        if (!$vars || !is_array($vars) || !$vars['threadId'])\n            $errors['err'] = __('Missing or invalid data');\n        elseif (!$vars['response'])\n            $errors['response'] = __('Response content is required');\n\n        if ($errors) return false;\n\n        $vars['type'] = self::ENTRY_TYPE;\n        $vars['body'] = $vars['response'];\n        if (!$vars['pid'] && $vars['msgId'])\n            $vars['pid'] = $vars['msgId'];\n\n        if (!$vars['poster']\n                && $vars['staffId']\n                && ($staff = Staff::lookup($vars['staffId'])))\n            $vars['poster'] = (string) $staff->getName();\n\n        return parent::add($vars);\n    }\n\n    static function getVarScope() {\n        $base = parent::getVarScope();\n        unset($base['user']);\n        return $base;\n    }\n}\n\n/* Thread entry of type note (Internal Note) */\nclass NoteThreadEntry extends ThreadEntry {\n    const ENTRY_TYPE = 'N';\n\n    function getMessage() {\n        return $this->getBody();\n    }\n\n    function getActivity() {\n        return new ThreadActivity(\n                _S('New Internal Note'),\n                _S('New internal note posted'));\n    }\n\n    static function add($vars, &$errors=array()) {\n\n        //Check required params.\n        if (!$vars || !is_array($vars) || !$vars['threadId'])\n            $errors['err'] = __('Missing or invalid data');\n        elseif (!$vars['note'])\n            $errors['note'] = __('Note content is required');\n\n        if ($errors) return false;\n\n        //TODO: use array_intersect_key  when we move to php 5 to extract just what we need.\n        $vars['type'] = self::ENTRY_TYPE;\n        $vars['body'] = $vars['note'];\n\n        return parent::add($vars);\n    }\n\n    static function getVarScope() {\n        $base = parent::getVarScope();\n        unset($base['user']);\n        return $base;\n    }\n}\n\n// Object specific thread utils.\nclass ObjectThread extends Thread\nimplements TemplateVariable {\n    static $types = array(\n        ObjectModel::OBJECT_TYPE_TASK => 'TaskThread',\n        ObjectModel::OBJECT_TYPE_TICKET => 'TicketThread',\n    );\n\n    var $counts;\n\n    function getCounts() {\n        if (!isset($this->counts) && $this->getId()) {\n            $this->counts = array();\n\n            $stuff = $this->entries\n                ->values_flat('type')\n                ->annotate(array(\n                    'count' => SqlAggregate::COUNT('id')\n                ));\n\n            foreach ($stuff as $row) {\n                list($type, $count) = $row;\n                $this->counts[$type] = $count;\n            }\n        }\n        return $this->counts;\n    }\n\n    function getNumMessages() {\n        $this->getCounts();\n        return $this->counts[MessageThreadEntry::ENTRY_TYPE];\n    }\n\n    function getNumResponses() {\n        $this->getCounts();\n        return $this->counts[ResponseThreadEntry::ENTRY_TYPE];\n    }\n\n    function getNumNotes() {\n        $this->getCounts();\n        return $this->counts[NoteThreadEntry::ENTRY_TYPE];\n    }\n\n\n    function getLastMessage($criteria=false) {\n        $entries = clone $this->getEntries();\n        $entries->filter(array(\n            'type' => MessageThreadEntry::ENTRY_TYPE\n        ));\n\n        if ($criteria)\n            $entries->filter($criteria);\n\n        $entries->order_by('-id');\n\n        return $entries->first();\n    }\n\n    function getLastEmailMessage($criteria=array()) {\n\n        $criteria += array(\n                'source' => 'Email',\n                'email_info__headers__isnull' => false);\n\n        return $this->getLastMessage($criteria);\n    }\n\n    function getLastEmailMessageByUser($user) {\n\n        $uid = is_numeric($user) ? $user : 0;\n        if (!$uid && ($user instanceof EmailContact))\n            $uid = $user->getUserId();\n\n        return $uid\n                ? $this->getLastEmailMessage(array('user_id' => $uid))\n                : null;\n    }\n\n    function getEntry($criteria) {\n        // XXX: PUNT\n        if (is_numeric($criteria))\n            return parent::getEntry($criteria);\n\n        $entries = clone $this->getEntries();\n        $entries->filter($criteria);\n        return $entries->first();\n    }\n\n    function getMessages() {\n        $entries = clone $this->getEntries();\n        return $entries->filter(array(\n            'type' => MessageThreadEntry::ENTRY_TYPE\n        ));\n    }\n\n    function getResponses() {\n        $entries = clone $this->getEntries();\n        return $entries->filter(array(\n            'type' => ResponseThreadEntry::ENTRY_TYPE\n        ));\n    }\n\n    function getNotes() {\n        $entries = clone $this->getEntries();\n        return $entries->filter(array(\n            'type' => NoteThreadEntry::ENTRY_TYPE\n        ));\n    }\n\n    function addNote($vars, &$errors=array()) {\n        //Add ticket Id.\n        $vars['threadId'] = $this->getId();\n        return NoteThreadEntry::add($vars, $errors);\n    }\n\n    function addMessage($vars, &$errors) {\n        $vars['threadId'] = $this->getId();\n        $vars['staffId'] = 0;\n\n        if (!($message = MessageThreadEntry::add($vars, $errors)))\n            return $message;\n\n        $this->lastmessage = SqlFunction::NOW();\n        $this->save(true);\n        return $message;\n    }\n\n    function addResponse($vars, &$errors) {\n        $vars['threadId'] = $this->getId();\n        $vars['userId'] = 0;\n        if ($message = $this->getLastMessage())\n            $vars['pid'] = $message->getId();\n\n        $vars['flags'] = 0;\n\n        if (!($resp = ResponseThreadEntry::add($vars, $errors)))\n            return $resp;\n\n        $this->lastresponse = SqlFunction::NOW();\n        $this->save(true);\n        return $resp;\n    }\n\n    function __toString() {\n        return $this->asVar();\n    }\n\n    function asVar() {\n        return new ThreadEntries($this);\n    }\n\n    function getVar($name) {\n        switch ($name) {\n        case 'original':\n            $entry = $this->entries->filter(array(\n                'type' => MessageThreadEntry::ENTRY_TYPE,\n                'flags__hasbit' => ThreadEntry::FLAG_ORIGINAL_MESSAGE,\n                ))\n                ->order_by('id')\n                ->first();\n            if ($entry)\n                return $entry->getBody();\n\n            break;\n        case 'last_message':\n        case 'lastmessage':\n            $entry = $this->getLastMessage();\n            if ($entry)\n                return $entry->getBody();\n\n            break;\n        case 'complete':\n            return $this->asVar();\n            break;\n        }\n    }\n\n    static function getVarScope() {\n      return array(\n        'complete' =>array('class' => 'ThreadEntries', 'desc' => __('Thread Correspondence')),\n        'original' => array('class' => 'MessageThreadEntry', 'desc' => __('Original Message')),\n        'lastmessage' => array('class' => 'MessageThreadEntry', 'desc' => __('Last Message')),\n      );\n    }\n\n    static function lookup($criteria, $type=false) {\n        if (!$type)\n            return parent::lookup($criteria);\n\n        $class = false;\n        if (isset(self::$types[$type]))\n            $class = self::$types[$type];\n        if (!class_exists($class))\n            $class = get_called_class();\n\n        return $class::lookup($criteria);\n    }\n}\n\nclass ThreadEntries {\n    var $thread;\n\n    function __construct($thread) {\n        $this->thread = $thread;\n    }\n\n    function __tostring() {\n        return (string) $this->getVar();\n    }\n\n    function asVar() {\n        return $this->getVar();\n    }\n\n    function getVar($name='') {\n\n        $order = '';\n        switch ($name) {\n        case 'reversed':\n            $order = '-';\n        default:\n            $content = '';\n            $thread = $this->thread;\n            ob_start();\n            include INCLUDE_DIR.'client/templates/thread-export.tmpl.php';\n            $content = ob_get_contents();\n            ob_end_clean();\n            return $content;\n            break;\n        }\n    }\n\n    static function getVarScope() {\n      return array(\n        'reversed' => sprintf('%s %s', __('Thread Correspondence'),\n            __('in reversed order')),\n      );\n    }\n}\n\n// Ticket thread class\nclass TicketThread extends ObjectThread {\n    static function create($ticket=false) {\n        assert($ticket !== false);\n\n        $id = is_object($ticket) ? $ticket->getId() : $ticket;\n        $thread = parent::create(array(\n                    'object_id' => $id,\n                    'object_type' => ObjectModel::OBJECT_TYPE_TICKET\n                    ));\n        if ($thread->save())\n            return $thread;\n    }\n}\n\n/**\n * Class: ThreadEntryAction\n *\n * Defines a simple action to be performed on a thread entry item, such as\n * viewing the raw email headers used to generate the message, resend the\n * confirmation emails, etc.\n */\nabstract class ThreadEntryAction {\n    static $name;               // Friendly, translatable name\n    static $id;                 // Unique identifier used for plumbing\n    static $icon = 'cog';\n\n    var $entry;\n\n    function getName() {\n        $class = get_class($this);\n        return __($class::$name);\n    }\n\n    static function getId() {\n        return static::$id;\n    }\n\n    function getIcon() {\n        $class = get_class($this);\n        return 'icon-' . $class::$icon;\n    }\n\n    function getObJectId() {\n        return $this->entry->getThread()->getObjectId();\n    }\n\n    function __construct(ThreadEntry $thread) {\n        $this->entry = $thread;\n    }\n\n    abstract function trigger();\n\n    function isEnabled() {\n        return $this->isVisible();\n    }\n    function isVisible() {\n        return true;\n    }\n\n    /**\n     * getJsStub\n     *\n     * Retrieves a small JavaScript snippet to insert into the rendered page\n     * which should, via an AJAX callback, trigger this action to be\n     * performed. The URL for this sort of activity is already provided for\n     * you via the ::getAjaxUrl() method in this class.\n     */\n    abstract function getJsStub();\n\n    /**\n     * getAjaxUrl\n     *\n     * Generate a URL to be used as an AJAX callback. The URL can be used to\n     * trigger this thread entry action via the callback.\n     *\n     * Parameters:\n     * $dialog - (bool) used in conjunction with `$.dialog()` javascript\n     *      function which assumes the `ajax.php/` should be replace a leading\n     *      `#` in the url\n     */\n    function getAjaxUrl($dialog=false) {\n        return sprintf('%s%s/%d/thread/%d/%s',\n            $dialog ? '#' : 'ajax.php/',\n            $this->entry->getThread()->getObjectType() == 'T' ? 'tickets' : 'tasks',\n            $this->entry->getThread()->getObjectId(),\n            $this->entry->getId(),\n            static::getId()\n        );\n    }\n\n    function getTicketsAPI() {\n        return new TicketsAjaxAPI();\n    }\n\n    function getTasksAPI() {\n        return new TasksAjaxAPI();\n    }\n}\n\ninterface Threadable {\n    function getThreadId();\n    function getThread();\n    function postThreadEntry($type, $vars, $options=array());\n    function addCollaborator($user, $vars, &$errors, $event=true);\n}\n\n/**\n * ThreadActivity\n *\n * Object to thread activity\n *\n */\nclass ThreadActivity implements TemplateVariable {\n    var $title;\n    var $desc;\n\n    function __construct($title, $desc) {\n        $this->title = $title;\n        $this->desc = $desc;\n    }\n\n    function getTitle() {\n        return $this->title;\n    }\n\n    function getDescription() {\n        return $this->desc;\n    }\n    function asVar() {\n        return (string) $this->getTitle();\n    }\n\n    function getVar($tag) {\n        if ($tag && is_callable(array($this, 'get'.ucfirst($tag))))\n            return call_user_func(array($this, 'get'.ucfirst($tag)));\n\n        return false;\n    }\n\n    static function getVarScope() {\n        return array(\n          'title' => __('Activity Title'),\n          'description' => __('Activity Description'),\n        );\n    }\n}\n\n?>\n", "#\n# Default configuration. The format is key: value and the data will be\n# inserted into the %config table at install time\n#\n---\ncore:\n    time_format: 'hh:mm a'\n    date_format: 'MM/dd/y'\n    datetime_format: 'MM/dd/y h:mm a'\n    daydatetime_format: 'EEE, MMM d y h:mm a'\n    default_priority_id: 2\n    enable_daylight_saving: 0\n\n    reply_separator: '-- reply above this line --'\n\n    # Do not translate below here\n    isonline: 1\n    staff_ip_binding: 0\n    staff_max_logins: 4\n    staff_login_timeout: 2\n    staff_session_timeout: 30\n    passwd_reset_period: 0\n    client_max_logins: 4\n    client_login_timeout: 2\n    client_session_timeout: 30\n    max_page_size: 25\n    max_open_tickets: 0\n    autolock_minutes: 3\n    default_priority_id: 2\n    default_smtp_id: 0\n    use_email_priority: 0\n    enable_kb: 0\n    enable_premade: 1\n    enable_captcha: 0\n    enable_auto_cron: 0\n    enable_mail_polling: 0\n    send_sys_errors: 1\n    send_sql_errors: 1\n    send_login_errors: 1\n    save_email_headers: 1\n    strip_quoted_reply: 1\n    ticket_autoresponder: 0\n    message_autoresponder: 0\n    ticket_notice_active: 1\n    ticket_alert_active: 1\n    ticket_alert_admin: 1\n    ticket_alert_dept_manager: 1\n    ticket_alert_dept_members: 0\n    message_alert_active: 1\n    message_alert_laststaff: 1\n    message_alert_assigned: 1\n    message_alert_dept_manager: 0\n    note_alert_active: 0\n    note_alert_laststaff: 1\n    note_alert_assigned: 1\n    note_alert_dept_manager: 0\n    transfer_alert_active: 0\n    transfer_alert_assigned: 0\n    transfer_alert_dept_manager: 1\n    transfer_alert_dept_members: 0\n    overdue_alert_active: 1\n    overdue_alert_assigned: 1\n    overdue_alert_dept_manager: 1\n    overdue_alert_dept_members: 0\n    assigned_alert_active: 1\n    assigned_alert_staff: 1\n    assigned_alert_team_lead: 0\n    assigned_alert_team_members: 0\n    auto_claim_tickets: 1\n    auto_refer_closed: 1\n    collaborator_ticket_visibility: 1\n    require_topic_to_close: 0\n    show_related_tickets: 1\n    show_assigned_tickets: 1\n    show_answered_tickets: 0\n    hide_staff_name: 0\n    disable_agent_collabs: 0\n    overlimit_notice_active: 0\n    email_attachments: 1\n    ticket_number_format: '######'\n    ticket_sequence_id: 0\n    queue_bucket_counts: 0\n    allow_external_images: 1\n    task_number_format: '#'\n    task_sequence_id: 2\n    log_level: 2\n    log_graceperiod: 12\n    client_registration: 'public'\n    default_ticket_queue: 1\n    embedded_domain_whitelist: 'youtube.com, dailymotion.com, vimeo.com, player.vimeo.com, web.microsoftstream.com'\n", "#\n# This is popup help messages for the Admin Panel -> Settings -> Tickets\n#\n# Fields:\n# title - Shown in bold at the top of the popover window\n# content - The body of the help popover\n# links - List of links shows below the content\n#   title - Link title\n#   href - href of link (links starting with / are translated to the\n#       helpdesk installation path)\n#\n# The key names such as 'helpdesk_name' should not be translated as they\n# must match the HTML #ids put into the page template.\n#\n---\nnumber_format:\n    title: Ticket Number Format\n    content: >\n        This setting is used to generate ticket numbers. Use hash signs\n        (`#`) where digits are to be placed. Any other text in the number\n        format will be preserved. <span class=\"doc-desc-title\">Help\n        Topics</span> can define custom number formats.\n        <br/><br/>\n        For example, for six-digit numbers, use <code>######</code>.\n\nsequence_id:\n    title: Ticket Number Sequence\n    content: >\n        Choose a sequence from which to derive new ticket numbers. The\n        system has a incrementing sequence and a random sequence by default.\n        You may create as many sequences as you wish. Use various sequences\n        in the <span class=\"doc-desc-title\">Ticket Number\n        Format</span> configuration for help topics.\n\nqueue_bucket_counts:\n    title: Top-Level Ticket Counts\n    content: >\n        This setting is used to hide or show the ticket counts on Main-Level\n        queues. Get back to the way things used to be.\n\ndefault_ticket_status:\n    title: Default Status for new Tickets\n    content: >\n        Choose a status as the default for new tickets. This can be defined\n        for each help topic, if desired. It can also be overridden by a\n        ticket filter.\n    links:\n      - title: Manage Ticket Statuses\n        href: /scp/lists.php?type=ticket-status\n\ndefault_sla:\n    title: Default SLA\n    content: >\n        Choose the default Service Level Agreement to manage how long a ticket\n        can remain Open before it is rendered Overdue.\n    links:\n      - title: Create more SLA Plans\n        href: /scp/slas.php\n\ndefault_priority:\n    title: Default Priority\n    content: >\n        Choose a default <span class=\"doc-desc-title\">priority</span> for\n        tickets not assigned a priority automatically.\n        <br/><br/>\n        Priority can be assigned via the help topic, routed department, or\n        ticket filter settings.\n\nmaximum_open_tickets:\n    title: Maximum Open Tickets\n    content: >\n        Enter the maximum <em>number</em> of tickets a User is permitted to\n        have <strong>open</strong> in your help desk.\n        <br><br>\n        Enter <span class=\"doc-desc-opt\">0 </span> if you prefer to disable this limitation.\n\nemail_ticket_priority:\n    title: Email Ticket Priority\n    content: >\n        Use email priority assigned by addressee\u2019s mail service\n\nshow_related_tickets:\n    title: Show Related Tickets\n    content: >\n        Show all related tickets on user login - otherwise access is restricted to\n        one ticket view per login\n\nhuman_verification:\n    title: Human Verification\n    content: >\n        Enable CAPTCHA on the Client Portal to verify an incoming ticket is the\n        result of human activity.\n        <br><br>\n        Requires GDLib library\n\nclaim_tickets:\n    title: Claim Tickets on Response\n    content: >\n        Enable this to auto-assign unassigned tickets to the responding Agent.\n        <br><br>\n        Reopened tickets are always assigned to the last respondent unless auto\n        assign on reopen is disabled on the Department level.\n\nauto_refer:\n    title: Auto-refer Tickets on Close\n    content: >\n        Enable this to auto-refer tickets to the assigned or closing\n        Agent when a ticket is closed.\n        <br><br>\n        This is necessary when you want to give agents with limited access\n        continued access to assigned tickets after they're closed.\n\ncollaborator_ticket_visibility:\n    title: Collaborator Tickets Visibility\n    content: >\n        If Enabled, Users will have visibility to ALL Tickets they participate in\n        when signing into the Web Portal.\n        <br><br>\n        If Disabled, Users will only be able to see their own Tickets\n        when signing into the Web Portal.\n\nrequire_topic_to_close:\n    title: Require Help Topic to Close\n    content: >\n        If Enabled, a Ticket must have a Help Topic in order to be Closed by an Agent\n\nallow_external_images:\n    title: Allow External Images\n    content: >\n        If Enabled, the system will allow external inline images that have a valid image\n        extension (.png, .jpg, .jpeg, .gif). If Disabled, the system will exclude\n        any external inline images. One caveat to note, is if the setting is Disabled we\n        will still store external inline images that have a valid image extension in case\n        the setting is re-enabled in the future.\n\nassigned_tickets:\n    title: Assigned Tickets\n    content: >\n        Enable this feature to exclude assigned tickets from the <span class=\"doc-desc-title\">Open\n        Tickets Queue</span>.\n\nanswered_tickets:\n    title: Answered Tickets\n    content: >\n        Enable this feature to show answered tickets in the <span\n        class=\"doc-desc-title\">Answered Tickets Queue</span>. Otherwise, it\n        will be included in the <span class=\"doc-desc-title\">Open Tickets\n        Queue</span>.\n\nticket_attachment_settings:\n    title: Ticket Thread Attachments\n    content: >\n        Configure settings for files attached to the <span\n        class=\"doc-desc-title\">issue details</span> field. These settings\n        are used for all new tickets and new messages regardless of the\n        source channel (web portal, email, api, etc.).\n", "<?php\nif(!defined('OSTADMININC') || !$thisstaff || !$thisstaff->isAdmin() || !$config) die('Access Denied');\nif(!($maxfileuploads=ini_get('max_file_uploads')))\n    $maxfileuploads=DEFAULT_MAX_FILE_UPLOADS;\n?>\n<h2><?php echo __('Ticket Settings and Options');?></h2>\n<form action=\"settings.php?t=tickets\" method=\"post\" class=\"save\">\n<?php csrf_token(); ?>\n<input type=\"hidden\" name=\"t\" value=\"tickets\" >\n\n<ul class=\"clean tabs\">\n    <li class=\"active\"><a href=\"#settings\"><i class=\"icon-asterisk\"></i>\n        <?php echo __('Settings'); ?></a></li>\n    <li><a href=\"#autoresp\"><i class=\"icon-mail-reply-all\"></i>\n        <?php echo __('Autoresponder'); ?></a></li>\n    <li><a href=\"#alerts\"><i class=\"icon-bell-alt\"></i>\n        <?php echo __('Alerts and Notices'); ?></a></li>\n    <li><a href=\"#queues\"><i class=\"icon-table\"></i>\n        <?php echo __('Queues'); ?></a></li>\n</ul>\n<div class=\"tab_content\" id=\"settings\">\n<table class=\"form_table settings_table\" width=\"940\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">\n                <em><?php echo __('System-wide default ticket settings and options.'); ?></em>\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <?php echo __('Default Ticket Number Format'); ?>:\n            </td>\n            <td>\n                <input type=\"text\" name=\"ticket_number_format\" value=\"<?php\n                echo $config['ticket_number_format']; ?>\"/>\n                <span class=\"faded\"><?php echo __('e.g.'); ?> <span id=\"format-example\"><?php\n                    if ($config['ticket_sequence_id'])\n                        $seq = Sequence::lookup($config['ticket_sequence_id']);\n                    if (!isset($seq))\n                        $seq = new RandomSequence();\n                    echo $seq->current($config['ticket_number_format']);\n                    ?></span></span>\n                <i class=\"help-tip icon-question-sign\" href=\"#number_format\"></i>\n                <div class=\"error\"><?php echo $errors['ticket_number_format']; ?></div>\n            </td>\n        </tr>\n        <tr><td width=\"220\"><?php echo __('Default Ticket Number Sequence'); ?>:</td>\n<?php $selected = 'selected=\"selected\"'; ?>\n            <td>\n                <select name=\"ticket_sequence_id\">\n                <option value=\"0\" <?php if ($config['ticket_sequence_id'] == 0) echo $selected;\n                    ?>>&mdash; <?php echo __('Random'); ?> &mdash;</option>\n<?php foreach (Sequence::objects() as $s) { ?>\n                <option value=\"<?php echo $s->id; ?>\" <?php\n                    if ($config['ticket_sequence_id'] == $s->id) echo $selected;\n                    ?>><?php echo $s->name; ?></option>\n<?php } ?>\n                </select>\n                <button class=\"action-button pull-right\" onclick=\"javascript:\n                $.dialog('ajax.php/sequence/manage', 205);\n                return false;\n                \"><i class=\"icon-gear\"></i> <?php echo __('Manage'); ?></button>\n                <i class=\"help-tip icon-question-sign\" href=\"#sequence_id\"></i>\n            </td>\n        </tr>\n        <tr><td width=\"220\"><?php echo __('Top-Level Ticket Counts'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"queue_bucket_counts\" <?php echo $config['queue_bucket_counts']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#queue_bucket_counts\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\" class=\"required\">\n                <?php echo __('Default Status'); ?>:\n            </td>\n            <td>\n                <span>\n                <select name=\"default_ticket_status_id\">\n                <?php\n                $criteria = array('states' => array('open'));\n                foreach (TicketStatusList::getStatuses($criteria) as $status) {\n                    $name = $status->getName();\n                    if (!($isenabled = $status->isEnabled()))\n                        $name.=' '.__('(disabled)');\n\n                    echo sprintf('<option value=\"%d\" %s %s>%s</option>',\n                            $status->getId(),\n                            ($config['default_ticket_status_id'] ==\n                             $status->getId() && $isenabled)\n                             ? 'selected=\"selected\"' : '',\n                             $isenabled ? '' : 'disabled=\"disabled\"',\n                             $name\n                            );\n                }\n                ?>\n                </select>\n                &nbsp;\n                <span class=\"error\">*&nbsp;<?php echo $errors['default_ticket_status_id']; ?></span>\n                <i class=\"help-tip icon-question-sign\" href=\"#default_ticket_status\"></i>\n                </span>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\" class=\"required\"><?php echo __('Default Priority');?>:</td>\n            <td>\n                <select name=\"default_priority_id\">\n                    <?php\n                    $priorities= db_query('SELECT priority_id,priority_desc FROM '.TICKET_PRIORITY_TABLE);\n                    while (list($id,$tag) = db_fetch_row($priorities)){ ?>\n                        <option value=\"<?php echo $id; ?>\"<?php echo ($config['default_priority_id']==$id)?'selected':''; ?>><?php echo $tag; ?></option>\n                    <?php\n                    } ?>\n                </select>\n                &nbsp;<span class=\"error\">*&nbsp;<?php echo $errors['default_priority_id']; ?></span> <i class=\"help-tip icon-question-sign\" href=\"#default_priority\"></i>\n             </td>\n        </tr>\n        <tr>\n            <td width=\"180\" class=\"required\">\n                <?php echo __('Default SLA');?>:\n            </td>\n            <td>\n                <span>\n                <select name=\"default_sla_id\">\n                    <option value=\"0\">&mdash; <?php echo __('None');?> &mdash;</option>\n                    <?php\n                    if($slas=SLA::getSLAs()) {\n                        foreach($slas as $id => $name) {\n                            echo sprintf('<option value=\"%d\" %s>%s</option>',\n                                    $id,\n                                    ($config['default_sla_id'] && $id==$config['default_sla_id'])?'selected=\"selected\"':'',\n                                    $name);\n                        }\n                    }\n                    ?>\n                </select>\n                &nbsp;<span class=\"error\">*&nbsp;<?php echo $errors['default_sla_id']; ?></span>  <i class=\"help-tip icon-question-sign\" href=\"#default_sla\"></i>\n                </span>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\"><?php echo __('Default Help Topic'); ?>:</td>\n            <td>\n                <select name=\"default_help_topic\">\n                    <option value=\"0\">&mdash; <?php echo __('None'); ?> &mdash;</option><?php\n                    $topics = Topic::getHelpTopics(false, Topic::DISPLAY_DISABLED);\n                    while (list($id,$topic) = each($topics)) { ?>\n                        <option value=\"<?php echo $id; ?>\"<?php echo ($config['default_help_topic']==$id)?'selected':''; ?>><?php echo $topic; ?></option>\n                    <?php\n                    } ?>\n                </select><br/>\n                <span class=\"error\"><?php echo $errors['default_help_topic']; ?></span>\n            </td>\n        </tr>\n        <tr>\n            <td width=\"180\"><?php echo __('Lock Semantics'); ?>:</td>\n            <td>\n                <select name=\"ticket_lock\" <?php if ($cfg->getLockTime() == 0) echo 'disabled=\"disabled\"'; ?>>\n<?php foreach (array(\n    Lock::MODE_DISABLED => __('Disabled'),\n    Lock::MODE_ON_VIEW => __('Lock on view'),\n    Lock::MODE_ON_ACTIVITY => __('Lock on activity'),\n) as $v => $desc) { ?>\n                <option value=\"<?php echo $v; ?>\" <?php\n                    if ($config['ticket_lock'] == $v) echo 'selected=\"selected\"';\n                    ?>><?php echo $desc; ?></option>\n<?php } ?>\n                </select>\n                <div class=\"error\"><?php echo $errors['ticket_lock']; ?></div>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <?php echo __('Default Ticket Queue'); ?>:\n            </td>\n            <td>\n                <select name=\"default_ticket_queue\">\n<?php foreach (CustomQueue::queues() as $cq) {\n?>\n                  <option value=\"<?php echo $cq->id; ?>\"\n            <?php if ($cq->getId() == $config['default_ticket_queue']) echo 'selected=\"selected\"'; ?>\n            ><?php echo $cq->getFullName(); ?></option>\n<?php } ?>\n                </select>\n                <i class=\"help-tip icon-question-sign\" href=\"#default_ticket_queue\"></i>\n                <div class=\"error\"><?php echo $errors['default_ticket_queue']; ?></div>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Maximum <b>Open</b> Tickets');?>:</td>\n            <td>\n                <input type=\"text\" name=\"max_open_tickets\" size=4 value=\"<?php echo $config['max_open_tickets']; ?>\">\n                <?php echo __('per end user'); ?>\n                <span class=\"error\">*&nbsp;<?php echo $errors['max_open_tickets']; ?></span>\n                <i class=\"help-tip icon-question-sign\" href=\"#maximum_open_tickets\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Human Verification');?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"enable_captcha\" <?php echo $config['enable_captcha']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable CAPTCHA on new web tickets.');?>\n                &nbsp;<font class=\"error\">&nbsp;<?php echo $errors['enable_captcha']; ?></font>\n                &nbsp;<i class=\"help-tip icon-question-sign\" href=\"#human_verification\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Collaborator Tickets Visibility'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"collaborator_ticket_visibility\" <?php echo $config['collaborator_ticket_visibility']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#collaborator_ticket_visibility\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Claim on Response'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"auto_claim_tickets\" <?php echo $config['auto_claim_tickets']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#claim_tickets\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Auto-refer on Close'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"auto_refer_closed\" <?php echo $config['auto_refer_closed']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip\n                icon-question-sign\" href=\"#auto_refer\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Require Help Topic to Close'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"require_topic_to_close\" <?php echo $config['require_topic_to_close']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#require_topic_to_close\"></i>\n            </td>\n        </tr>\n        <tr>\n            <td><?php echo __('Allow External Images'); ?>:</td>\n            <td>\n                <input type=\"checkbox\" name=\"allow_external_images\" <?php echo $config['allow_external_images']?'checked=\"checked\"':''; ?>>\n                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#allow_external_images\"></i>\n            </td>\n        </tr>\n        <tr>\n            <th colspan=\"2\">\n                <em><b><?php echo __('Attachments');?></b>:  <?php echo __('Size and maximum uploads setting mainly apply to web tickets.');?></em>\n            </th>\n        </tr>\n        <tr>\n            <td width=\"180\"><?php echo __('Ticket Attachment Settings');?>:</td>\n            <td>\n<?php\n                $tform = TicketForm::objects()->one()->getForm();\n                $f = $tform->getField('message');\n?>\n                <a class=\"action-button field-config\" style=\"overflow:inherit\"\n                    href=\"#ajax.php/form/field-config/<?php\n                        echo $f->get('id'); ?>\"\n                    onclick=\"javascript:\n                        $.dialog($(this).attr('href').substr(1), [201]);\n                        return false;\n                    \"><i class=\"icon-edit\"></i> <?php echo __('Config'); ?></a>\n                <i class=\"help-tip icon-question-sign\" href=\"#ticket_attachment_settings\"></i>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div class=\"hidden tab_content\" id=\"autoresp\"\n    data-tip-namespace=\"settings.autoresponder\">\n    <?php include STAFFINC_DIR . 'settings-autoresp.inc.php'; ?>\n</div>\n<div class=\"hidden tab_content\" id=\"alerts\"\n    data-tip-namespace=\"settings.alerts\">\n    <?php include STAFFINC_DIR . 'settings-alerts.inc.php'; ?>\n</div>\n\n<div class=\"hidden tab_content\" id=\"queues\">\n    <?php include STAFFINC_DIR . 'queues-ticket.inc.php'; ?>\n</div>\n\n<p style=\"text-align:center;\">\n    <input class=\"button\" type=\"submit\" name=\"submit\" value=\"<?php echo __('Save Changes');?>\">\n    <input class=\"button\" type=\"reset\" name=\"reset\" value=\"<?php echo __('Reset Changes');?>\">\n</p>\n</form>\n<script type=\"text/javascript\">\n$(function() {\n    var request = null,\n      update_example = function() {\n      request && request.abort();\n      request = $.get('ajax.php/sequence/'\n        + $('[name=ticket_sequence_id] :selected').val(),\n        {'format': $('[name=ticket_number_format]').val()},\n        function(data) { $('#format-example').text(data); }\n      );\n    };\n    $('[name=ticket_sequence_id]').on('change', update_example);\n    $('[name=ticket_number_format]').on('keyup', update_example);\n});\n</script>\n"], "filenames": ["include/class.config.php", "include/class.format.php", "include/class.thread.php", "include/i18n/en_US/config.yaml", "include/i18n/en_US/help/tips/settings.ticket.yaml", "include/staff/settings-tickets.inc.php"], "buggy_code_start_loc": [232, 413, 1648, 82, 126, 234], "buggy_code_end_loc": [1419, 433, 2894, 82, 126, 234], "fixing_code_start_loc": [233, 414, 1649, 83, 127, 235], "fixing_code_end_loc": [1426, 473, 2897, 84, 136, 242], "type": "CWE-918", "message": "SSRF exists in osTicket before 1.14.3, where an attacker can add malicious file to server or perform port scanning.", "other": {"cve": {"id": "CVE-2020-24881", "sourceIdentifier": "cve@mitre.org", "published": "2020-11-02T21:15:26.680", "lastModified": "2021-01-30T02:29:36.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SSRF exists in osTicket before 1.14.3, where an attacker can add malicious file to server or perform port scanning."}, {"lang": "es", "value": "Una vulnerabilidad de tipo SSRF se presenta en osTicket versiones anteriores a 1.14.3, donde un atacante puede agregar un archivo malicioso al servidor o llevar a cabo un escaneo de puertos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:osticket:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.14.3", "matchCriteriaId": "228BD49A-F6C5-404D-9644-82F3B48F7F73"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/160995/osTicket-1.14.2-Server-Side-Request-Forgery.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://blackbatsec.medium.com/cve-2020-24881-server-side-request-forgery-in-osticket-eea175e147f0", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/osTicket/osTicket/commit/d98c2d096aeb8876c6ab2f88317cd371d781f14d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osTicket/osTicket/commit/d98c2d096aeb8876c6ab2f88317cd371d781f14d"}}