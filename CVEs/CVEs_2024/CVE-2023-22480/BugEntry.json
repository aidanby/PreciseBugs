{"buggy_code": ["package v1\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/KubeOperator/KubeOperator/pkg/controller\"\n\t\"github.com/KubeOperator/KubeOperator/pkg/errorf\"\n\t\"github.com/KubeOperator/KubeOperator/pkg/middleware\"\n\t\"github.com/jinzhu/gorm\"\n\t\"github.com/kataras/iris/v12\"\n\t\"github.com/kataras/iris/v12/context\"\n\t\"github.com/kataras/iris/v12/mvc\"\n\t\"github.com/pkg/errors\"\n)\n\nvar AuthScope iris.Party\nvar WhiteScope iris.Party\n\nfunc V1(parent iris.Party) {\n\tv1 := parent.Party(\"/v1\")\n\tauthParty := v1.Party(\"/auth\")\n\tmvc.New(authParty.Party(\"/session\")).HandleError(ErrorHandler).Handle(controller.NewSessionController())\n\tmvc.New(v1.Party(\"/user\")).HandleError(ErrorHandler).Handle(controller.NewForgotPasswordController())\n\tAuthScope = v1.Party(\"/\")\n\tAuthScope.Use(middleware.JWTMiddleware().Serve)\n\tAuthScope.Use(middleware.UserMiddleware)\n\tAuthScope.Use(middleware.RBACMiddleware())\n\tAuthScope.Use(middleware.PagerMiddleware)\n\tAuthScope.Use(middleware.ForceMiddleware)\n\tmvc.New(AuthScope.Party(\"/clusters\")).HandleError(ErrorHandler).Handle(controller.NewClusterController())\n\tmvc.New(AuthScope.Party(\"/credentials\")).HandleError(ErrorHandler).Handle(controller.NewCredentialController())\n\tmvc.New(AuthScope.Party(\"/hosts\")).HandleError(ErrorHandler).Handle(controller.NewHostController())\n\tmvc.New(AuthScope.Party(\"/users\")).HandleError(ErrorHandler).Handle(controller.NewUserController())\n\tmvc.New(AuthScope.Party(\"/dashboard\")).HandleError(ErrorHandler).Handle(controller.NewKubePiController())\n\tmvc.New(AuthScope.Party(\"/regions\")).HandleError(ErrorHandler).Handle(controller.NewRegionController())\n\tmvc.New(AuthScope.Party(\"/zones\")).HandleError(ErrorHandler).Handle(controller.NewZoneController())\n\tmvc.New(AuthScope.Party(\"/plans\")).HandleError(ErrorHandler).Handle(controller.NewPlanController())\n\tmvc.New(AuthScope.Party(\"/settings\")).HandleError(ErrorHandler).Handle(controller.NewSystemSettingController())\n\tmvc.New(AuthScope.Party(\"/ntp\")).HandleError(ErrorHandler).Handle(controller.NewNtpServerController())\n\tmvc.New(AuthScope.Party(\"/logs\")).HandleError(ErrorHandler).Handle(controller.NewSystemLogController())\n\tmvc.New(AuthScope.Party(\"/projects\")).HandleError(ErrorHandler).Handle(controller.NewProjectController())\n\tmvc.New(AuthScope.Party(\"/clusters/provisioner\")).HandleError(ErrorHandler).Handle(controller.NewProvisionerController())\n\tmvc.New(AuthScope.Party(\"/kubernetes\")).HandleError(ErrorHandler).Handle(controller.NewKubernetesController())\n\tmvc.New(AuthScope.Party(\"/clusters/tool\")).HandleError(ErrorHandler).Handle(controller.NewClusterToolController())\n\tmvc.New(AuthScope.Party(\"/backupaccounts\")).HandleError(ErrorHandler).Handle(controller.NewBackupAccountController())\n\tmvc.New(AuthScope.Party(\"/clusters/backup\")).HandleError(ErrorHandler).Handle(controller.NewClusterBackupStrategyController())\n\tmvc.New(AuthScope.Party(\"/clusters/monitor\")).HandleError(ErrorHandler).Handle(controller.NewMonitorController())\n\tmvc.New(AuthScope.Party(\"/tasks\")).Handle(ErrorHandler).Handle(controller.NewTaskLogController())\n\tmvc.New(AuthScope.Party(\"/components\")).Handle(ErrorHandler).Handle(controller.NewComponentController())\n\tmvc.New(AuthScope.Party(\"/license\")).Handle(ErrorHandler).Handle(controller.NewLicenseController())\n\tmvc.New(AuthScope.Party(\"/clusters/backup/files\")).HandleError(ErrorHandler).Handle(controller.NewClusterBackupFileController())\n\tmvc.New(AuthScope.Party(\"/clusters/velero/{cluster}/{operate}\")).HandleError(ErrorHandler).Handle(controller.NewClusterVeleroBackupController())\n\tmvc.New(AuthScope.Party(\"/manifests\")).HandleError(ErrorHandler).Handle(controller.NewManifestController())\n\tmvc.New(AuthScope.Party(\"/vmconfigs\")).HandleError(ErrorHandler).Handle(controller.NewVmConfigController())\n\tmvc.New(AuthScope.Party(\"/ippools\")).HandleError(ErrorHandler).Handle(controller.NewIpPoolController())\n\tmvc.New(AuthScope.Party(\"/ippools/{name}/ips\")).HandleError(ErrorHandler).Handle(controller.NewIpController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/resources\")).HandleError(ErrorHandler).Handle(controller.NewProjectResourceController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/members\")).HandleError(ErrorHandler).Handle(controller.NewProjectMemberController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/clusters/{cluster}/members\")).HandleError(ErrorHandler).Handle(controller.NewClusterMemberController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/clusters/{cluster}/resources\")).HandleError(ErrorHandler).Handle(controller.NewClusterResourceController())\n\tmvc.New(AuthScope.Party(\"/templates\")).HandleError(ErrorHandler).Handle(controller.NewTemplateConfigController())\n\tmvc.New(AuthScope.Party(\"/clusters/grade\")).HandleError(ErrorHandler).Handle(controller.NewGradeController())\n\tmvc.New(AuthScope.Party(\"/ldap\")).HandleError(ErrorHandler).Handle(controller.NewLdapController())\n\tmvc.New(AuthScope.Party(\"/msg/accounts\")).HandleError(ErrorHandler).Handle(controller.NewMessageAccountController())\n\tmvc.New(AuthScope.Party(\"/msg/subscribes\")).HandleError(ErrorHandler).Handle(controller.NewMessageSubscribeController())\n\tmvc.New(AuthScope.Party(\"/user/messages\")).HandleError(ErrorHandler).Handle(controller.NewUserMsgController())\n\tmvc.New(AuthScope.Party(\"/user/settings\")).HandleError(ErrorHandler).Handle(controller.NewUserSettingController())\n\tWhiteScope = v1.Party(\"/\")\n\tWhiteScope.Get(\"/clusters/kubeconfig/{name}\", downloadKubeconfig)\n\tWhiteScope.Get(\"/captcha\", generateCaptcha)\n\tmvc.New(WhiteScope.Party(\"/theme\")).HandleError(ErrorHandler).Handle(controller.NewThemeController())\n\n}\n\nfunc ErrorHandler(ctx context.Context, err error) {\n\tif err != nil {\n\t\twarp := struct {\n\t\t\tMsg string `json:\"msg\"`\n\t\t}{err.Error()}\n\t\tvar result string\n\t\tswitch errType := err.(type) {\n\t\tcase gorm.Errors:\n\t\t\terrorSet := make(map[string]string)\n\t\t\tfor _, er := range errType {\n\t\t\t\ttr := ctx.Tr(er.Error())\n\t\t\t\tif tr != \"\" {\n\t\t\t\t\terrorMsg := tr\n\t\t\t\t\terrorSet[er.Error()] = errorMsg\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor _, set := range errorSet {\n\t\t\t\tresult = result + set + \" \"\n\t\t\t}\n\t\tcase error:\n\t\t\tswitch errRoot := errors.Cause(err).(type) {\n\t\t\tcase errorf.CErrFs:\n\t\t\t\terrs := errRoot.Get()\n\t\t\t\tfor _, er := range errs {\n\t\t\t\t\targs := er.Args.([]interface{})\n\t\t\t\t\ttr := ctx.Tr(er.Msg, args...)\n\t\t\t\t\tif tr != \"\" {\n\t\t\t\t\t\tresult = result + tr + \"\\n \"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\ttr := ctx.Tr(errors.Cause(err).Error())\n\t\t\t\tif tr != \"\" {\n\t\t\t\t\tresult = tr\n\t\t\t\t} else {\n\t\t\t\t\tresult = err.Error()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twarp.Msg = result\n\t\tbf, _ := json.Marshal(&warp)\n\t\tctx.StatusCode(http.StatusBadRequest)\n\t\t_, _ = ctx.WriteString(string(bf))\n\t\tctx.StopExecution()\n\t\treturn\n\t}\n}\n"], "fixing_code": ["package v1\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/KubeOperator/KubeOperator/pkg/controller\"\n\t\"github.com/KubeOperator/KubeOperator/pkg/errorf\"\n\t\"github.com/KubeOperator/KubeOperator/pkg/middleware\"\n\t\"github.com/jinzhu/gorm\"\n\t\"github.com/kataras/iris/v12\"\n\t\"github.com/kataras/iris/v12/context\"\n\t\"github.com/kataras/iris/v12/mvc\"\n\t\"github.com/pkg/errors\"\n)\n\nvar AuthScope iris.Party\nvar WhiteScope iris.Party\n\nfunc V1(parent iris.Party) {\n\tv1 := parent.Party(\"/v1\")\n\tauthParty := v1.Party(\"/auth\")\n\tmvc.New(authParty.Party(\"/session\")).HandleError(ErrorHandler).Handle(controller.NewSessionController())\n\tmvc.New(v1.Party(\"/user\")).HandleError(ErrorHandler).Handle(controller.NewForgotPasswordController())\n\tAuthScope = v1.Party(\"/\")\n\tAuthScope.Use(middleware.JWTMiddleware().Serve)\n\tAuthScope.Use(middleware.UserMiddleware)\n\tAuthScope.Use(middleware.RBACMiddleware())\n\tAuthScope.Use(middleware.PagerMiddleware)\n\tAuthScope.Use(middleware.ForceMiddleware)\n\tmvc.New(AuthScope.Party(\"/clusters\")).HandleError(ErrorHandler).Handle(controller.NewClusterController())\n\tmvc.New(AuthScope.Party(\"/credentials\")).HandleError(ErrorHandler).Handle(controller.NewCredentialController())\n\tmvc.New(AuthScope.Party(\"/hosts\")).HandleError(ErrorHandler).Handle(controller.NewHostController())\n\tmvc.New(AuthScope.Party(\"/users\")).HandleError(ErrorHandler).Handle(controller.NewUserController())\n\tmvc.New(AuthScope.Party(\"/dashboard\")).HandleError(ErrorHandler).Handle(controller.NewKubePiController())\n\tmvc.New(AuthScope.Party(\"/regions\")).HandleError(ErrorHandler).Handle(controller.NewRegionController())\n\tmvc.New(AuthScope.Party(\"/zones\")).HandleError(ErrorHandler).Handle(controller.NewZoneController())\n\tmvc.New(AuthScope.Party(\"/plans\")).HandleError(ErrorHandler).Handle(controller.NewPlanController())\n\tmvc.New(AuthScope.Party(\"/settings\")).HandleError(ErrorHandler).Handle(controller.NewSystemSettingController())\n\tmvc.New(AuthScope.Party(\"/ntp\")).HandleError(ErrorHandler).Handle(controller.NewNtpServerController())\n\tmvc.New(AuthScope.Party(\"/logs\")).HandleError(ErrorHandler).Handle(controller.NewSystemLogController())\n\tmvc.New(AuthScope.Party(\"/projects\")).HandleError(ErrorHandler).Handle(controller.NewProjectController())\n\tmvc.New(AuthScope.Party(\"/clusters/provisioner\")).HandleError(ErrorHandler).Handle(controller.NewProvisionerController())\n\tmvc.New(AuthScope.Party(\"/kubernetes\")).HandleError(ErrorHandler).Handle(controller.NewKubernetesController())\n\tmvc.New(AuthScope.Party(\"/clusters/tool\")).HandleError(ErrorHandler).Handle(controller.NewClusterToolController())\n\tmvc.New(AuthScope.Party(\"/backupaccounts\")).HandleError(ErrorHandler).Handle(controller.NewBackupAccountController())\n\tmvc.New(AuthScope.Party(\"/clusters/backup\")).HandleError(ErrorHandler).Handle(controller.NewClusterBackupStrategyController())\n\tmvc.New(AuthScope.Party(\"/clusters/monitor\")).HandleError(ErrorHandler).Handle(controller.NewMonitorController())\n\tmvc.New(AuthScope.Party(\"/tasks\")).Handle(ErrorHandler).Handle(controller.NewTaskLogController())\n\tmvc.New(AuthScope.Party(\"/components\")).Handle(ErrorHandler).Handle(controller.NewComponentController())\n\tmvc.New(AuthScope.Party(\"/license\")).Handle(ErrorHandler).Handle(controller.NewLicenseController())\n\tmvc.New(AuthScope.Party(\"/clusters/backup/files\")).HandleError(ErrorHandler).Handle(controller.NewClusterBackupFileController())\n\tmvc.New(AuthScope.Party(\"/clusters/velero/{cluster}/{operate}\")).HandleError(ErrorHandler).Handle(controller.NewClusterVeleroBackupController())\n\tmvc.New(AuthScope.Party(\"/manifests\")).HandleError(ErrorHandler).Handle(controller.NewManifestController())\n\tmvc.New(AuthScope.Party(\"/vmconfigs\")).HandleError(ErrorHandler).Handle(controller.NewVmConfigController())\n\tmvc.New(AuthScope.Party(\"/ippools\")).HandleError(ErrorHandler).Handle(controller.NewIpPoolController())\n\tmvc.New(AuthScope.Party(\"/ippools/{name}/ips\")).HandleError(ErrorHandler).Handle(controller.NewIpController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/resources\")).HandleError(ErrorHandler).Handle(controller.NewProjectResourceController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/members\")).HandleError(ErrorHandler).Handle(controller.NewProjectMemberController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/clusters/{cluster}/members\")).HandleError(ErrorHandler).Handle(controller.NewClusterMemberController())\n\tmvc.New(AuthScope.Party(\"/projects/{project}/clusters/{cluster}/resources\")).HandleError(ErrorHandler).Handle(controller.NewClusterResourceController())\n\tmvc.New(AuthScope.Party(\"/templates\")).HandleError(ErrorHandler).Handle(controller.NewTemplateConfigController())\n\tmvc.New(AuthScope.Party(\"/clusters/grade\")).HandleError(ErrorHandler).Handle(controller.NewGradeController())\n\tmvc.New(AuthScope.Party(\"/ldap\")).HandleError(ErrorHandler).Handle(controller.NewLdapController())\n\tmvc.New(AuthScope.Party(\"/msg/accounts\")).HandleError(ErrorHandler).Handle(controller.NewMessageAccountController())\n\tmvc.New(AuthScope.Party(\"/msg/subscribes\")).HandleError(ErrorHandler).Handle(controller.NewMessageSubscribeController())\n\tmvc.New(AuthScope.Party(\"/user/messages\")).HandleError(ErrorHandler).Handle(controller.NewUserMsgController())\n\tmvc.New(AuthScope.Party(\"/user/settings\")).HandleError(ErrorHandler).Handle(controller.NewUserSettingController())\n\tAuthScope.Get(\"/clusters/kubeconfig/{name}\", downloadKubeconfig)\n\tWhiteScope = v1.Party(\"/\")\n\tWhiteScope.Get(\"/captcha\", generateCaptcha)\n\tmvc.New(WhiteScope.Party(\"/theme\")).HandleError(ErrorHandler).Handle(controller.NewThemeController())\n\n}\n\nfunc ErrorHandler(ctx context.Context, err error) {\n\tif err != nil {\n\t\twarp := struct {\n\t\t\tMsg string `json:\"msg\"`\n\t\t}{err.Error()}\n\t\tvar result string\n\t\tswitch errType := err.(type) {\n\t\tcase gorm.Errors:\n\t\t\terrorSet := make(map[string]string)\n\t\t\tfor _, er := range errType {\n\t\t\t\ttr := ctx.Tr(er.Error())\n\t\t\t\tif tr != \"\" {\n\t\t\t\t\terrorMsg := tr\n\t\t\t\t\terrorSet[er.Error()] = errorMsg\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor _, set := range errorSet {\n\t\t\t\tresult = result + set + \" \"\n\t\t\t}\n\t\tcase error:\n\t\t\tswitch errRoot := errors.Cause(err).(type) {\n\t\t\tcase errorf.CErrFs:\n\t\t\t\terrs := errRoot.Get()\n\t\t\t\tfor _, er := range errs {\n\t\t\t\t\targs := er.Args.([]interface{})\n\t\t\t\t\ttr := ctx.Tr(er.Msg, args...)\n\t\t\t\t\tif tr != \"\" {\n\t\t\t\t\t\tresult = result + tr + \"\\n \"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\ttr := ctx.Tr(errors.Cause(err).Error())\n\t\t\t\tif tr != \"\" {\n\t\t\t\t\tresult = tr\n\t\t\t\t} else {\n\t\t\t\t\tresult = err.Error()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twarp.Msg = result\n\t\tbf, _ := json.Marshal(&warp)\n\t\tctx.StatusCode(http.StatusBadRequest)\n\t\t_, _ = ctx.WriteString(string(bf))\n\t\tctx.StopExecution()\n\t\treturn\n\t}\n}\n"], "filenames": ["pkg/router/v1/v1api.go"], "buggy_code_start_loc": [68], "buggy_code_end_loc": [71], "fixing_code_start_loc": [69], "fixing_code_end_loc": [70], "type": "CWE-863", "message": "KubeOperator is an open source Kubernetes distribution focused on helping enterprises plan, deploy and operate production-level K8s clusters. In KubeOperator versions 3.16.3 and below, API interfaces with unauthorized entities and can leak sensitive information. This vulnerability could be used to take over the cluster under certain conditions. This issue has been patched in version 3.16.4.", "other": {"cve": {"id": "CVE-2023-22480", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-14T01:15:15.207", "lastModified": "2023-01-24T18:40:30.457", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "KubeOperator is an open source Kubernetes distribution focused on helping enterprises plan, deploy and operate production-level K8s clusters. In KubeOperator versions 3.16.3 and below, API interfaces with unauthorized entities and can leak sensitive information. This vulnerability could be used to take over the cluster under certain conditions. This issue has been patched in version 3.16.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fit2cloud:kubeoperator:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.16.4", "matchCriteriaId": "486336C5-5A30-4490-A12B-E79FE102419B"}]}]}], "references": [{"url": "https://github.com/KubeOperator/KubeOperator/commit/7ef42bf1c16900d13e6376f8be5ecdbfdfb44aaf", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/KubeOperator/KubeOperator/releases/tag/v3.16.4", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/KubeOperator/KubeOperator/security/advisories/GHSA-jxgp-jgh3-8jc8", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/KubeOperator/KubeOperator/commit/7ef42bf1c16900d13e6376f8be5ecdbfdfb44aaf"}}