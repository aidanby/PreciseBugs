{"buggy_code": ["import tarfile\nimport os\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ntar_extensions = ('.tar', '.tar.Z', '.tar.bz2', '.tar.gz', '.tar.lz',\n                  '.tar.lzma', '.tar.xz', '.taz', '.tb2', '.tbz', '.tbz2',\n                  '.tgz', '.tlz', '.txz', '.tz')\n\n\ndef _is_tar_extract(cmd):\n    if '--extract' in cmd:\n        return True\n\n    cmd = cmd.split()\n\n    return len(cmd) > 1 and 'x' in cmd[1]\n\n\ndef _tar_file(cmd):\n    for c in cmd:\n        for ext in tar_extensions:\n            if c.endswith(ext):\n                return (c, c[0:len(c) - len(ext)])\n\n\n@for_app('tar')\ndef match(command):\n    return ('-C' not in command.script\n            and _is_tar_extract(command.script)\n            and _tar_file(command.script_parts) is not None)\n\n\ndef get_new_command(command):\n    dir = shell.quote(_tar_file(command.script_parts)[1])\n    return shell.and_('mkdir -p {dir}', '{cmd} -C {dir}') \\\n        .format(dir=dir, cmd=command.script)\n\n\ndef side_effect(old_cmd, command):\n    with tarfile.TarFile(_tar_file(old_cmd.script_parts)[0]) as archive:\n        for file in archive.getnames():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n", "import os\nimport zipfile\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ndef _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except Exception:\n        return False\n\n\ndef _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)\n\n\n@for_app('unzip')\ndef match(command):\n    if '-d' in command.script:\n        return False\n\n    zip_file = _zip_file(command)\n    if zip_file:\n        return _is_bad_zip(zip_file)\n    else:\n        return False\n\n\ndef get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))\n\n\ndef side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n\n\nrequires_output = False\n"], "fixing_code": ["import tarfile\nimport os\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ntar_extensions = ('.tar', '.tar.Z', '.tar.bz2', '.tar.gz', '.tar.lz',\n                  '.tar.lzma', '.tar.xz', '.taz', '.tb2', '.tbz', '.tbz2',\n                  '.tgz', '.tlz', '.txz', '.tz')\n\n\ndef _is_tar_extract(cmd):\n    if '--extract' in cmd:\n        return True\n\n    cmd = cmd.split()\n\n    return len(cmd) > 1 and 'x' in cmd[1]\n\n\ndef _tar_file(cmd):\n    for c in cmd:\n        for ext in tar_extensions:\n            if c.endswith(ext):\n                return (c, c[0:len(c) - len(ext)])\n\n\n@for_app('tar')\ndef match(command):\n    return ('-C' not in command.script\n            and _is_tar_extract(command.script)\n            and _tar_file(command.script_parts) is not None)\n\n\ndef get_new_command(command):\n    dir = shell.quote(_tar_file(command.script_parts)[1])\n    return shell.and_('mkdir -p {dir}', '{cmd} -C {dir}') \\\n        .format(dir=dir, cmd=command.script)\n\n\ndef side_effect(old_cmd, command):\n    with tarfile.TarFile(_tar_file(old_cmd.script_parts)[0]) as archive:\n        for file in archive.getnames():\n            if not os.path.abspath(file).startswith(os.getcwd()):\n                # it's unsafe to overwrite files outside of the current directory\n                continue\n\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n", "import os\nimport zipfile\nfrom thefuck.utils import for_app\nfrom thefuck.shells import shell\n\n\ndef _is_bad_zip(file):\n    try:\n        with zipfile.ZipFile(file, 'r') as archive:\n            return len(archive.namelist()) > 1\n    except Exception:\n        return False\n\n\ndef _zip_file(command):\n    # unzip works that way:\n    # unzip [-flags] file[.zip] [file(s) ...] [-x file(s) ...]\n    #                ^          ^ files to unzip from the archive\n    #                archive to unzip\n    for c in command.script_parts[1:]:\n        if not c.startswith('-'):\n            if c.endswith('.zip'):\n                return c\n            else:\n                return u'{}.zip'.format(c)\n\n\n@for_app('unzip')\ndef match(command):\n    if '-d' in command.script:\n        return False\n\n    zip_file = _zip_file(command)\n    if zip_file:\n        return _is_bad_zip(zip_file)\n    else:\n        return False\n\n\ndef get_new_command(command):\n    return u'{} -d {}'.format(\n        command.script, shell.quote(_zip_file(command)[:-4]))\n\n\ndef side_effect(old_cmd, command):\n    with zipfile.ZipFile(_zip_file(old_cmd), 'r') as archive:\n        for file in archive.namelist():\n            if not os.path.abspath(file).startswith(os.getcwd()):\n                # it's unsafe to overwrite files outside of the current directory\n                continue\n\n            try:\n                os.remove(file)\n            except OSError:\n                # does not try to remove directories as we cannot know if they\n                # already existed before\n                pass\n\n\nrequires_output = False\n"], "filenames": ["thefuck/rules/dirty_untar.py", "thefuck/rules/dirty_unzip.py"], "buggy_code_start_loc": [43, 47], "buggy_code_end_loc": [43, 47], "fixing_code_start_loc": [44, 48], "fixing_code_end_loc": [48, 52], "type": "CWE-22", "message": "The thefuck (aka The Fuck) package before 3.31 for Python allows Path Traversal that leads to arbitrary file deletion via the \"undo archive operation\" feature.", "other": {"cve": {"id": "CVE-2021-34363", "sourceIdentifier": "cve@mitre.org", "published": "2021-06-10T11:15:09.357", "lastModified": "2022-03-25T18:54:39.473", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The thefuck (aka The Fuck) package before 3.31 for Python allows Path Traversal that leads to arbitrary file deletion via the \"undo archive operation\" feature."}, {"lang": "es", "value": "El paquete thefuck (tambi\u00e9n se conoce como The Fuck) versiones anteriores a 3.31 para Python permite un Salto de Ruta que conlleva a la eliminaci\u00f3n arbitraria de archivos por medio de la funcionalidad \"undo archive operation\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:the_fuck_project:the_fuck:*:*:*:*:*:python:*:*", "versionEndExcluding": "3.31", "matchCriteriaId": "0A9233E6-2A79-476A-B199-E504831829CA"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}]}]}], "references": [{"url": "https://github.com/nvbn/thefuck/commit/e343c577cd7da4d304b837d4a07ab4df1e023092", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nvbn/thefuck/releases/tag/3.31", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4MEDDLBFVRUQHPYIBJ4MFM3M4NUJUXL5/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YA6UNQSOY6M3NJDZLS6YJXTS4WGDMEEJ/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://vuln.ryotak.me/advisories/48", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nvbn/thefuck/commit/e343c577cd7da4d304b837d4a07ab4df1e023092"}}