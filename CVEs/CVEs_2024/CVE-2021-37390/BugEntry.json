{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * @package chamilo.social\n *\n * @author Julio Montoya <gugli100@gmail.com>\n */\n$cidReset = true;\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n$ajax_url = api_get_path(WEB_AJAX_PATH).'message.ajax.php';\napi_block_anonymous_users();\n\nif (api_get_setting('allow_social_tool') != 'true') {\n    api_not_allowed();\n}\n\n$this_section = SECTION_SOCIAL;\n$tool_name = get_lang('Search');\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_CODE_PATH).'social/profile.php',\n    'name' => get_lang('SocialNetwork'),\n];\n\n$query = isset($_GET['q']) ? Security::remove_XSS($_GET['q']) : null;\n\n$queryNoFilter = isset($_GET['q']) ? $_GET['q'] : null;\n$query_search_type = isset($_GET['search_type']) && in_array($_GET['search_type'], ['0', '1', '2']) ? $_GET['search_type'] : null;\n$extra_fields = UserManager::getExtraFilterableFields();\n$query_vars = ['q' => $query, 'search_type' => $query_search_type];\nif (!empty($extra_fields)) {\n    foreach ($extra_fields as $extra_field) {\n        $field_name = 'field_'.$extra_field['variable'];\n        if (isset($_GET[$field_name]) && $_GET[$field_name] != '0') {\n            $query_vars[$field_name] = $_GET[$field_name];\n        }\n    }\n}\n\n//Block Social Menu\n$social_menu_block = SocialManager::show_social_menu('search');\n$block_search = '';\n$searchForm = UserManager::get_search_form($queryNoFilter);\n\n$groups = [];\n$totalGroups = [];\n$users = [];\n$totalUsers = [];\n$usergroup = new UserGroup();\n\n// I'm searching something\nif ($query != '' || ($query_vars['search_type'] == '1' && count($query_vars) > 2)) {\n    $itemPerPage = 6;\n\n    if ($_GET['search_type'] == '0' || $_GET['search_type'] == '1') {\n        $page = isset($_GET['users_page_nr']) ? intval($_GET['users_page_nr']) : 1;\n        $totalUsers = UserManager::get_all_user_tags(\n            $_GET['q'],\n            0,\n            0,\n            $itemPerPage,\n            true\n        );\n\n        $from = intval(($page - 1) * $itemPerPage);\n        // Get users from tags\n        $users = UserManager::get_all_user_tags($_GET['q'], 0, $from, $itemPerPage);\n    }\n\n    if ($_GET['search_type'] == '0' || $_GET['search_type'] == '2') {\n        $pageGroup = isset($_GET['groups_page_nr']) ? intval($_GET['groups_page_nr']) : 1;\n        // Groups\n        $fromGroups = intval(($pageGroup - 1) * $itemPerPage);\n        $totalGroups = count($usergroup->get_all_group_tags($_GET['q'], 0, $itemPerPage, true));\n\n        $groups = $usergroup->get_all_group_tags($_GET['q'], $fromGroups);\n    }\n\n    if (empty($users) && empty($groups)) {\n        Display::addFlash(Display::return_message(get_lang('SorryNoResults')));\n    }\n\n    $results = '<div id=\"whoisonline\">';\n    if (is_array($users) && count($users) > 0) {\n        $results .= '<div class=\"row\">';\n        $buttonClass = 'btn btn-default btn-sm';\n        foreach ($users as $user) {\n            $user_info = api_get_user_info($user['id'], true);\n            $sendInvitation = '<button class=\"'.$buttonClass.' disabled \">\n                <em class=\"fa fa-user\"></em> '.get_lang('SendInvitation').'</button>';\n            $relation_type = SocialManager::get_relation_between_contacts(api_get_user_id(), $user_info['user_id']);\n            $url = api_get_path(WEB_PATH).'main/social/profile.php?u='.$user_info['user_id'];\n\n            // Show send invitation icon if they are not friends yet\n            if ($relation_type != 3 && $relation_type != 4 && $user_info['user_id'] != api_get_user_id()) {\n                $sendInvitation = '<a href=\"#\" class=\"'.$buttonClass.' btn-to-send-invitation\" data-send-to=\"'.$user_info['user_id'].'\">\n                             <em class=\"fa fa-user\"></em> '.get_lang('SendInvitation').'</a>';\n            }\n\n            $sendMessageUrl = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php?'.http_build_query([\n                'a' => 'get_user_popup',\n                'user_id' => $user_info['user_id'],\n            ]);\n\n            $sendMessage = Display::toolbarButton(\n                get_lang('SendMessage'),\n                $sendMessageUrl,\n                'envelope',\n                'default',\n                [\n                    'class' => 'ajax btn-sm',\n                    'data-title' => get_lang('SendMessage'),\n                ]\n            );\n\n            if (!empty($user_info['user_is_online'])) {\n                $status_icon = Display::return_icon('online.png', get_lang('OnLine'), null, ICON_SIZE_TINY);\n            } else {\n                $status_icon = Display::return_icon('offline.png', get_lang('Disconnected'), null, ICON_SIZE_TINY);\n            }\n\n            if ($user_info['status'] == 5) {\n                $user_icon = Display::return_icon('user.png', get_lang('Student'), null, ICON_SIZE_TINY);\n            } else {\n                $user_icon = Display::return_icon('teacher.png', get_lang('Teacher'), null, ICON_SIZE_TINY);\n            }\n\n            $user_info['complete_name'] = Display::url($user_info['complete_name'], $url);\n            $invitations = $sendInvitation.$sendMessage;\n\n            $results .= Display::getUserCard(\n                $user_info,\n                $status_icon.$user_icon,\n                $invitations\n            );\n        }\n        $results .= '</div>';\n    }\n    $results .= '</div>';\n\n    $visibility = [true, true, true, true, true];\n\n    if (!empty($users)) {\n        $results .= Display::return_sortable_grid(\n            'users',\n            null,\n            null,\n            ['hide_navigation' => false, 'per_page' => $itemPerPage],\n            $query_vars,\n            false,\n            $visibility,\n            true,\n            [],\n            $totalUsers\n        );\n        $block_search .= Display::panelCollapse(\n            get_lang('Users'),\n            $results,\n            'search-friends',\n            null,\n            'friends-accordion',\n            'friends-collapse'\n        );\n    }\n\n    $grid_groups = [];\n    $block_groups = '<div id=\"whoisonline\">';\n    if (is_array($groups) && count($groups) > 0) {\n        $block_groups .= '<div class=\"row\">';\n        foreach ($groups as $group) {\n            $group['name'] = Security::remove_XSS($group['name'], STUDENT, true);\n            $group['description'] = Security::remove_XSS($group['description'], STUDENT, true);\n            $id = $group['id'];\n            $url_open = '<a href=\"group_view.php?id='.$id.'\">';\n            $url_close = '</a>';\n            $name = cut($group['name'], 60, true);\n            $count_users_group = count($usergroup->get_all_users_by_group($id));\n            if ($count_users_group == 1) {\n                $count_users_group = $count_users_group;\n            } else {\n                $count_users_group = $count_users_group;\n            }\n            $picture = $usergroup->get_picture_group(\n                $group['id'],\n                $group['picture'],\n                GROUP_IMAGE_SIZE_ORIGINAL\n            );\n\n            $tags = null;\n            $group['picture'] = '<img class=\"img-responsive img-circle\" src=\"'.$picture['file'].'\" />';\n\n            $members = Display::returnFontAwesomeIcon('user').'( '.$count_users_group.' )';\n            $item_1 = Display::tag('p', $url_open.$name.$url_close);\n\n            $block_groups .= '\n                <div class=\"col-md-4\">\n                    <div class=\"items-user\">\n                        <div class=\"items-user-avatar\">\n                            '.$group['picture'].'\n                        </div>\n                        <div class=\"user-info\">\n                            '.$item_1.'\n                            <p>'.$members.'</p>    \n                            <p>'.$group['description'].'</p>\n                            <p>'.$tags.'</p>\n                            <p>'.$url_open.get_lang('SeeMore').$url_close.'</p>\n                        </div>\n                    </div>\n                </div>';\n        }\n        $block_groups .= '</div>';\n    }\n    $block_groups .= '</div>';\n\n    $visibility = [true, true, true, true, true];\n\n    if (!empty($groups)) {\n        $block_groups .= Display::return_sortable_grid(\n            'groups',\n            null,\n            $grid_groups,\n            ['hide_navigation' => false, 'per_page' => $itemPerPage],\n            $query_vars,\n            false,\n            $visibility,\n            true,\n            [],\n            $totalGroups\n        );\n        $block_search .= Display:: panelCollapse(\n            get_lang('Groups'),\n            $block_groups,\n            'search-groups',\n            null,\n            'groups-accordion',\n            'groups-collapse'\n        );\n    }\n}\n\n$tpl = new Template($tool_name);\n// Block Social Avatar\nSocialManager::setSocialUserBlock($tpl, api_get_user_id(), 'search');\n$tpl->assign('social_menu_block', $social_menu_block);\n$tpl->assign('social_search', $block_search);\n$tpl->assign('search_form', $searchForm);\n\n$formModalTpl = new Template();\n$formModalTpl->assign('invitation_form', MessageManager::generate_invitation_form());\n$template = $formModalTpl->get_template('social/form_modals.tpl');\n$formModals = $formModalTpl->fetch($template);\n\n$tpl->assign('form_modals', $formModals);\n\n$social_layout = $tpl->get_template('social/search.tpl');\n$tpl->display($social_layout);\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * @package chamilo.social\n *\n * @author Julio Montoya <gugli100@gmail.com>\n */\n$cidReset = true;\n\nrequire_once __DIR__.'/../inc/global.inc.php';\n$ajax_url = api_get_path(WEB_AJAX_PATH).'message.ajax.php';\napi_block_anonymous_users();\n\nif (api_get_setting('allow_social_tool') != 'true') {\n    api_not_allowed();\n}\n\n$this_section = SECTION_SOCIAL;\n$tool_name = get_lang('Search');\n$interbreadcrumb[] = [\n    'url' => api_get_path(WEB_CODE_PATH).'social/profile.php',\n    'name' => get_lang('SocialNetwork'),\n];\n\n$query = isset($_GET['q']) ? htmlentities($_GET['q']) : null;\n\n$queryNoTags = isset($_GET['q']) ? strip_tags($_GET['q']) : null;\n$query_search_type = isset($_GET['search_type']) && in_array($_GET['search_type'], ['0', '1', '2']) ? $_GET['search_type'] : null;\n$extra_fields = UserManager::getExtraFilterableFields();\n$query_vars = ['q' => $query, 'search_type' => $query_search_type];\nif (!empty($extra_fields)) {\n    foreach ($extra_fields as $extra_field) {\n        $field_name = 'field_'.$extra_field['variable'];\n        if (isset($_GET[$field_name]) && $_GET[$field_name] != '0') {\n            $query_vars[$field_name] = $_GET[$field_name];\n        }\n    }\n}\n\n//Block Social Menu\n$social_menu_block = SocialManager::show_social_menu('search');\n$block_search = '';\n$searchForm = UserManager::get_search_form($queryNoTags);\n\n$groups = [];\n$totalGroups = [];\n$users = [];\n$totalUsers = [];\n$usergroup = new UserGroup();\n\n// I'm searching something\nif ($query != '' || ($query_vars['search_type'] == '1' && count($query_vars) > 2)) {\n    $itemPerPage = 6;\n\n    if ($_GET['search_type'] == '0' || $_GET['search_type'] == '1') {\n        $page = isset($_GET['users_page_nr']) ? intval($_GET['users_page_nr']) : 1;\n        $totalUsers = UserManager::get_all_user_tags(\n            $_GET['q'],\n            0,\n            0,\n            $itemPerPage,\n            true\n        );\n\n        $from = intval(($page - 1) * $itemPerPage);\n        // Get users from tags\n        $users = UserManager::get_all_user_tags($_GET['q'], 0, $from, $itemPerPage);\n    }\n\n    if ($_GET['search_type'] == '0' || $_GET['search_type'] == '2') {\n        $pageGroup = isset($_GET['groups_page_nr']) ? intval($_GET['groups_page_nr']) : 1;\n        // Groups\n        $fromGroups = intval(($pageGroup - 1) * $itemPerPage);\n        $totalGroups = count($usergroup->get_all_group_tags($_GET['q'], 0, $itemPerPage, true));\n\n        $groups = $usergroup->get_all_group_tags($_GET['q'], $fromGroups);\n    }\n\n    if (empty($users) && empty($groups)) {\n        Display::addFlash(Display::return_message(get_lang('SorryNoResults')));\n    }\n\n    $results = '<div id=\"whoisonline\">';\n    if (is_array($users) && count($users) > 0) {\n        $results .= '<div class=\"row\">';\n        $buttonClass = 'btn btn-default btn-sm';\n        foreach ($users as $user) {\n            $user_info = api_get_user_info($user['id'], true);\n            $sendInvitation = '<button class=\"'.$buttonClass.' disabled \">\n                <em class=\"fa fa-user\"></em> '.get_lang('SendInvitation').'</button>';\n            $relation_type = SocialManager::get_relation_between_contacts(api_get_user_id(), $user_info['user_id']);\n            $url = api_get_path(WEB_PATH).'main/social/profile.php?u='.$user_info['user_id'];\n\n            // Show send invitation icon if they are not friends yet\n            if ($relation_type != 3 && $relation_type != 4 && $user_info['user_id'] != api_get_user_id()) {\n                $sendInvitation = '<a href=\"#\" class=\"'.$buttonClass.' btn-to-send-invitation\" data-send-to=\"'.$user_info['user_id'].'\">\n                             <em class=\"fa fa-user\"></em> '.get_lang('SendInvitation').'</a>';\n            }\n\n            $sendMessageUrl = api_get_path(WEB_AJAX_PATH).'user_manager.ajax.php?'.http_build_query([\n                'a' => 'get_user_popup',\n                'user_id' => $user_info['user_id'],\n            ]);\n\n            $sendMessage = Display::toolbarButton(\n                get_lang('SendMessage'),\n                $sendMessageUrl,\n                'envelope',\n                'default',\n                [\n                    'class' => 'ajax btn-sm',\n                    'data-title' => get_lang('SendMessage'),\n                ]\n            );\n\n            if (!empty($user_info['user_is_online'])) {\n                $status_icon = Display::return_icon('online.png', get_lang('OnLine'), null, ICON_SIZE_TINY);\n            } else {\n                $status_icon = Display::return_icon('offline.png', get_lang('Disconnected'), null, ICON_SIZE_TINY);\n            }\n\n            if ($user_info['status'] == 5) {\n                $user_icon = Display::return_icon('user.png', get_lang('Student'), null, ICON_SIZE_TINY);\n            } else {\n                $user_icon = Display::return_icon('teacher.png', get_lang('Teacher'), null, ICON_SIZE_TINY);\n            }\n\n            $user_info['complete_name'] = Display::url($user_info['complete_name'], $url);\n            $invitations = $sendInvitation.$sendMessage;\n\n            $results .= Display::getUserCard(\n                $user_info,\n                $status_icon.$user_icon,\n                $invitations\n            );\n        }\n        $results .= '</div>';\n    }\n    $results .= '</div>';\n\n    $visibility = [true, true, true, true, true];\n\n    if (!empty($users)) {\n        $results .= Display::return_sortable_grid(\n            'users',\n            null,\n            null,\n            ['hide_navigation' => false, 'per_page' => $itemPerPage],\n            $query_vars,\n            false,\n            $visibility,\n            true,\n            [],\n            $totalUsers\n        );\n        $block_search .= Display::panelCollapse(\n            get_lang('Users'),\n            $results,\n            'search-friends',\n            null,\n            'friends-accordion',\n            'friends-collapse'\n        );\n    }\n\n    $grid_groups = [];\n    $block_groups = '<div id=\"whoisonline\">';\n    if (is_array($groups) && count($groups) > 0) {\n        $block_groups .= '<div class=\"row\">';\n        foreach ($groups as $group) {\n            $group['name'] = Security::remove_XSS($group['name'], STUDENT, true);\n            $group['description'] = Security::remove_XSS($group['description'], STUDENT, true);\n            $id = $group['id'];\n            $url_open = '<a href=\"group_view.php?id='.$id.'\">';\n            $url_close = '</a>';\n            $name = cut($group['name'], 60, true);\n            $count_users_group = count($usergroup->get_all_users_by_group($id));\n            if ($count_users_group == 1) {\n                $count_users_group = $count_users_group;\n            } else {\n                $count_users_group = $count_users_group;\n            }\n            $picture = $usergroup->get_picture_group(\n                $group['id'],\n                $group['picture'],\n                GROUP_IMAGE_SIZE_ORIGINAL\n            );\n\n            $tags = null;\n            $group['picture'] = '<img class=\"img-responsive img-circle\" src=\"'.$picture['file'].'\" />';\n\n            $members = Display::returnFontAwesomeIcon('user').'( '.$count_users_group.' )';\n            $item_1 = Display::tag('p', $url_open.$name.$url_close);\n\n            $block_groups .= '\n                <div class=\"col-md-4\">\n                    <div class=\"items-user\">\n                        <div class=\"items-user-avatar\">\n                            '.$group['picture'].'\n                        </div>\n                        <div class=\"user-info\">\n                            '.$item_1.'\n                            <p>'.$members.'</p>\n                            <p>'.$group['description'].'</p>\n                            <p>'.$tags.'</p>\n                            <p>'.$url_open.get_lang('SeeMore').$url_close.'</p>\n                        </div>\n                    </div>\n                </div>';\n        }\n        $block_groups .= '</div>';\n    }\n    $block_groups .= '</div>';\n\n    $visibility = [true, true, true, true, true];\n\n    if (!empty($groups)) {\n        $block_groups .= Display::return_sortable_grid(\n            'groups',\n            null,\n            $grid_groups,\n            ['hide_navigation' => false, 'per_page' => $itemPerPage],\n            $query_vars,\n            false,\n            $visibility,\n            true,\n            [],\n            $totalGroups\n        );\n        $block_search .= Display:: panelCollapse(\n            get_lang('Groups'),\n            $block_groups,\n            'search-groups',\n            null,\n            'groups-accordion',\n            'groups-collapse'\n        );\n    }\n}\n\n$tpl = new Template($tool_name);\n// Block Social Avatar\nSocialManager::setSocialUserBlock($tpl, api_get_user_id(), 'search');\n$tpl->assign('social_menu_block', $social_menu_block);\n$tpl->assign('social_search', $block_search);\n$tpl->assign('search_form', $searchForm);\n\n$formModalTpl = new Template();\n$formModalTpl->assign('invitation_form', MessageManager::generate_invitation_form());\n$template = $formModalTpl->get_template('social/form_modals.tpl');\n$formModals = $formModalTpl->fetch($template);\n\n$tpl->assign('form_modals', $formModals);\n\n$social_layout = $tpl->get_template('social/search.tpl');\n$tpl->display($social_layout);\n"], "filenames": ["main/social/search.php"], "buggy_code_start_loc": [26], "buggy_code_end_loc": [205], "fixing_code_start_loc": [26], "fixing_code_end_loc": [205], "type": "CWE-79", "message": "A Chamilo LMS 1.11.14 reflected XSS vulnerability exists in main/social/search.php=q URI (social network search feature).", "other": {"cve": {"id": "CVE-2021-37390", "sourceIdentifier": "cve@mitre.org", "published": "2021-08-10T20:15:08.647", "lastModified": "2021-08-17T15:36:33.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Chamilo LMS 1.11.14 reflected XSS vulnerability exists in main/social/search.php=q URI (social network search feature)."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de tipo XSS reflejado en Chamilo LMS versi\u00f3n 1.11.14, en la funci\u00f3n main/social/search.php=q URI (funcionalidad de b\u00fasqueda en redes sociales)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.11.14", "matchCriteriaId": "F430146D-54FD-40CF-8199-CE337308440A"}]}]}], "references": [{"url": "https://gitbook.seguranca-informatica.pt/cve-and-exploits/cves/chamilo-lms-1.11.14-xss-vulnerabilities", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/3fcc751d5cc7da311532a8756fba5a8778f50ca0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/3fcc751d5cc7da311532a8756fba5a8778f50ca0"}}