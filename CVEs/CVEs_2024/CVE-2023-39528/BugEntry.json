{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\Theme;\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\ThemeManagerBuilder;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Filesystem\\FileSystem;\n\nclass AdminTranslationsControllerCore extends AdminController\n{\n    /** Name of theme by default */\n    public const DEFAULT_THEME_NAME = _PS_DEFAULT_THEME_NAME_;\n    public const TEXTAREA_SIZED = 70;\n\n    /** @var string : Link which list all pack of language */\n    protected $link_lang_pack = 'http://i18n.prestashop-project.org/translations/%ps_version%/available_languages.json';\n\n    /** @var int : number of sentence which can be translated */\n    protected $total_expression = 0;\n\n    /** @var int : number of sentence which aren't translated */\n    protected $missing_translations = 0;\n\n    /** @var array : List of ISO code for all languages */\n    protected $all_iso_lang = [];\n\n    /** @var array */\n    protected $modules_translations = [];\n\n    /** @var array : List of folder which must be ignored */\n    protected static $ignore_folder = ['.', '..', '.svn', '.git', '.htaccess', 'index.php'];\n\n    /** @var array : List of content type accepted for translation mail file */\n    protected static $content_type_accepted = ['txt', 'tpl', 'html'];\n\n    /** @var array : List of theme by translation type : FRONT, BACK, ERRORS... */\n    protected $translations_informations = [];\n\n    /** @var array : List of all languages */\n    protected $languages;\n\n    /** @var array : List of all themes */\n    protected $themes;\n\n    /** @var string : Directory of selected theme */\n    protected $theme_selected;\n\n    /** @var string : Name of translations type */\n    protected $type_selected;\n\n    /** @var Language object : Language for the selected language */\n    protected $lang_selected;\n\n    /** @var bool : Is true if number of var exceed the suhosin request or post limit */\n    protected $post_limit_exceed = false;\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->multishop_context = Shop::CONTEXT_ALL;\n        $this->table = 'translations';\n\n        parent::__construct();\n\n        $this->link_lang_pack = str_replace('%ps_version%', _PS_VERSION_, $this->link_lang_pack);\n\n        $this->themes = (new ThemeManagerBuilder($this->context, Db::getInstance()))\n            ->buildRepository()\n            ->getList();\n    }\n\n    /*\n     * Set the type which is selected\n     */\n    public function setTypeSelected($type_selected)\n    {\n        $this->type_selected = $type_selected;\n    }\n\n    /**\n     * AdminController::initContent() override.\n     *\n     * @see AdminController::initContent()\n     */\n    public function initContent()\n    {\n        if (null !== $this->type_selected) {\n            $method_name = 'initForm' . $this->type_selected;\n            if (method_exists($this, $method_name)) {\n                $this->content = $this->initForm($method_name);\n            } else {\n                $this->errors[] = $this->trans('\"%type%\" does not exist.', ['%type%' => $this->type_selected], 'Admin.Notifications.Error');\n                $this->content = $this->initMain();\n            }\n        } else {\n            $this->content = $this->initMain();\n        }\n\n        $this->context->smarty->assign([\n            'content' => $this->content,\n        ]);\n    }\n\n    /**\n     * This function create vars by default and call the good method for generate form.\n     *\n     * @param string $method_name\n     *\n     * @return mixed Call the method $this->method_name()\n     */\n    public function initForm($method_name)\n    {\n        // Create a title for each translation page\n        $title = $this->trans(\n            '%1$s (Language: %2$s, Theme: %3$s)',\n                [\n                    '%1$s' => (empty($this->translations_informations[$this->type_selected]['name']) ? false : $this->translations_informations[$this->type_selected]['name']),\n                    '%2$s' => $this->lang_selected->name,\n                    '%3$s' => $this->theme_selected ? $this->theme_selected : $this->trans('None', [], 'Admin.Global'),\n                ],\n                'Admin.International.Feature'\n            );\n\n        // Set vars for all forms\n        $this->tpl_view_vars = [\n            'lang' => $this->lang_selected->iso_code,\n            'title' => $title,\n            'type' => $this->type_selected,\n            'theme' => $this->theme_selected,\n            'post_limit_exceeded' => $this->post_limit_exceed,\n            'url_submit' => self::$currentIndex . '&submitTranslations' . ucfirst($this->type_selected) . '=1&token=' . $this->token,\n            'url_submit_installed_module' => self::$currentIndex . '&submitSelect' . ucfirst($this->type_selected) . '=1&token=' . $this->token,\n            'toggle_button' => $this->displayToggleButton(),\n            'textarea_sized' => self::TEXTAREA_SIZED,\n        ];\n\n        // Call method initForm for a type\n        return $this->{$method_name}();\n    }\n\n    /**\n     * AdminController::initToolbar() override.\n     *\n     * @see AdminController::initToolbar()\n     */\n    public function initToolbar()\n    {\n        $this->toolbar_btn['save-and-stay'] = [\n            'short' => 'SaveAndStay',\n            'href' => '#',\n            'desc' => $this->trans('Save and stay', [], 'Admin.Actions'),\n        ];\n        $this->toolbar_btn['save'] = [\n            'href' => '#',\n            'desc' => $this->trans('Update translations', [], 'Admin.International.Feature'),\n        ];\n        $this->toolbar_btn['cancel'] = [\n            'href' => self::$currentIndex . '&token=' . $this->token,\n            'desc' => $this->trans('Cancel', [], 'Admin.Actions'),\n        ];\n    }\n\n    /**\n     * Generate the Main page.\n     */\n    public function initMain()\n    {\n        if (\n            !in_array(\n                $this->authorizationLevel(),\n                [\n                    AdminController::LEVEL_VIEW,\n                    AdminController::LEVEL_EDIT,\n                    AdminController::LEVEL_ADD,\n                    AdminController::LEVEL_DELETE,\n                ]\n            )\n        ) {\n            Tools::redirectAdmin(Context::getContext()->link->getAdminLink('AdminDashboard'));\n        }\n\n        // Block add/update a language\n        $packsToInstall = [];\n        $packsToUpdate = [];\n        $token = Tools::getAdminToken('AdminLanguages' . (int) Tab::getIdFromClassName('AdminLanguages') . (int) $this->context->employee->id);\n        $arrayStreamContext = @stream_context_create(['http' => ['method' => 'GET', 'timeout' => 8]]);\n\n        if ($langPacks = Tools::file_get_contents($this->link_lang_pack, false, $arrayStreamContext)) {\n            if ($langPacks != '' && $langPacks = json_decode($langPacks, true)) {\n                foreach ($langPacks as $locale => $langName) {\n                    $langDetails = Language::getJsonLanguageDetails($locale);\n                    if (!Language::isInstalledByLocale($locale)) {\n                        $packsToInstall[$locale] = $langDetails['name'];\n                    } else {\n                        $packsToUpdate[$locale] = $langDetails['name'];\n                    }\n                }\n            }\n        }\n\n        $modules = [];\n        foreach ($this->getListModules(true) as $module) {\n            $modules[$module->name] = [\n                'name' => $module->name,\n                'displayName' => $module->displayName,\n                'urlToTranslate' => !$module->isUsingNewTranslationSystem() ? $this->context->link->getAdminLink(\n                    'AdminTranslations',\n                    true,\n                    [],\n                    [\n                        'type' => 'modules',\n                        'module' => $module->name,\n                    ]\n                ) : '',\n            ];\n        }\n\n        $this->tpl_view_vars = [\n            'theme_default' => self::DEFAULT_THEME_NAME,\n            'theme_lang_dir' => _THEME_LANG_DIR_,\n            'token' => $this->token,\n            'languages' => $this->languages,\n            'translations_type' => $this->translations_informations,\n            'packs_to_install' => $packsToInstall,\n            'packs_to_update' => $packsToUpdate,\n            'url_submit' => self::$currentIndex . '&token=' . $this->token,\n            'themes' => $this->themes,\n            'modules' => $modules,\n            'current_theme_name' => $this->context->shop->theme_name,\n            'url_create_language' => 'index.php?controller=AdminLanguages&addlang&token=' . $token,\n            'level' => $this->authorizationLevel(),\n        ];\n\n        $this->toolbar_scroll = false;\n\n        $this->content .= $this->renderKpis();\n        $this->content .= parent::renderView();\n\n        return $this->content;\n    }\n\n    /**\n     * This method merge each arrays of modules translation in the array of modules translations.\n     */\n    protected function getModuleTranslations()\n    {\n        global $_MODULE;\n        $name_var = (empty($this->translations_informations[$this->type_selected]['var']) ? false : $this->translations_informations[$this->type_selected]['var']);\n\n        if (!isset($_MODULE) && !isset($GLOBALS[$name_var])) {\n            $GLOBALS[$name_var] = [];\n        } elseif (isset($_MODULE)) {\n            $GLOBALS[$name_var] = $_MODULE;\n        }\n    }\n\n    /**\n     * This method is only used by AdminTranslations::submitCopyLang().\n     *\n     * It try to create folder in new theme.\n     *\n     * When a translation file is copied for a module, its translation key is wrong.\n     * We have to change the translation key and rewrite the file.\n     *\n     * @param string $dest file name\n     *\n     * @return bool\n     */\n    protected function checkDirAndCreate($dest)\n    {\n        $bool = true;\n\n        // To get only folder path\n        $path = dirname($dest);\n\n        // If folder wasn't already added\n        // Do not use Tools::file_exists_cache because it changes over time!\n        if (!file_exists($path)) {\n            if (!mkdir($path, FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                $bool &= false;\n                $this->errors[] = $this->trans('Cannot create the folder \"%folder%\". Please check your directory writing permissions.', ['%folder%' => $path], 'Admin.International.Notification');\n            }\n        }\n\n        return $bool;\n    }\n\n    /**\n     * Read the Post var and write the translation file.\n     * This method overwrites the old translation file.\n     *\n     * @param bool $override_file Set true if this file is a override\n     *\n     * @throws PrestaShopException\n     */\n    protected function writeTranslationFile($override_file = false)\n    {\n        $type = Tools::toCamelCase($this->type_selected, true);\n\n        if (isset($this->translations_informations[$this->type_selected])) {\n            $translation_informations = $this->translations_informations[$this->type_selected];\n        } else {\n            return;\n        }\n\n        if ($override_file) {\n            $file_path = $translation_informations['override']['dir'] . $translation_informations['override']['file'];\n        } else {\n            $file_path = $translation_informations['dir'] . $translation_informations['file'];\n        }\n\n        if ($file_path && !file_exists($file_path)) {\n            if (!file_exists(dirname($file_path)) && !mkdir(dirname($file_path), FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                throw new PrestaShopException($this->trans('Directory \"%folder%\" cannot be created', ['%folder%' => dirname($file_path)], 'Admin.Notifications.Error'));\n            } elseif (!touch($file_path)) {\n                throw new PrestaShopException($this->trans('File \"%file%\" cannot be created', ['%file%' => $file_path], 'Admin.Notifications.Error'));\n            }\n        }\n\n        $thm_name = str_replace('.', '', Tools::getValue('theme'));\n        $kpi_key = substr(strtoupper($thm_name . '_' . Tools::getValue('lang')), 0, 16);\n\n        if ($fd = fopen($file_path, 'wb')) {\n            // Get value of button save and stay\n            $save_and_stay = Tools::isSubmit('submitTranslations' . $type . 'AndStay');\n\n            // Unset all POST which are not translations\n            unset(\n                $_POST['submitTranslations' . $type],\n                $_POST['submitTranslations' . $type . 'AndStay'],\n                $_POST['lang'],\n                $_POST['token'],\n                $_POST['theme'],\n                $_POST['type']\n            );\n\n            // Get all POST which aren't empty\n            $to_insert = [];\n            foreach ($_POST as $key => $value) {\n                if (!empty($value)) {\n                    $to_insert[$key] = $value;\n                }\n            }\n\n            ConfigurationKPI::updateValue('FRONTOFFICE_TRANSLATIONS_EXPIRE', time());\n            ConfigurationKPI::updateValue('TRANSLATE_TOTAL_' . $kpi_key, count($_POST));\n            ConfigurationKPI::updateValue('TRANSLATE_DONE_' . $kpi_key, count($to_insert));\n\n            // translations array is ordered by key (easy merge)\n            ksort($to_insert);\n            $tab = $translation_informations['var'];\n            fwrite($fd, \"<?php\\n\\nglobal \\$\" . $tab . \";\\n\\$\" . $tab . \" = [];\\n\");\n            foreach ($to_insert as $key => $value) {\n                fwrite($fd, '$' . $tab . '[\\'' . pSQL($key, true) . '\\'] = \\'' . pSQL($value, true) . '\\';' . \"\\n\");\n            }\n            fwrite($fd, \"\\n?>\");\n            fclose($fd);\n\n            // Redirect\n            if ($save_and_stay) {\n                $this->redirect(true);\n            } else {\n                $this->redirect();\n            }\n        } else {\n            throw new PrestaShopException($this->trans('Cannot write this file: \"%folder%\"', ['%folder%' => $file_path], 'Admin.Notifications.Error'));\n        }\n    }\n\n    public function submitCopyLang()\n    {\n        $from_lang = Tools::getValue('fromLang');\n        $to_lang = Tools::getValue('toLang');\n        $from_theme = Tools::getValue('fromTheme');\n        $to_theme = Tools::getValue('toTheme');\n\n        if (!$from_lang || !$to_lang) {\n            $this->errors[] = $this->trans('You must select two languages in order to copy data from one to another.', [], 'Admin.International.Notification');\n\n            return;\n        }\n        if (!$from_theme || !$to_theme) {\n            $this->errors[] = $this->trans('You must select two themes in order to copy data from one to another.', [], 'Admin.International.Notification');\n\n            return;\n        }\n        if ($from_lang == $to_lang && $from_theme == $to_theme) {\n            $this->errors[] = $this->trans('There is nothing to copy (same language and theme).', [], 'Admin.International.Notification');\n\n            return;\n        }\n\n        Language::copyLanguageData(Language::getIdByIso($from_lang), Language::getIdByIso($to_lang));\n\n        $theme_exists = ['from_theme' => false, 'to_theme' => false];\n        foreach ($this->themes as $theme) {\n            if ($theme->getName() == $from_theme) {\n                $theme_exists['from_theme'] = true;\n            }\n            if ($theme->getName() == $to_theme) {\n                $theme_exists['to_theme'] = true;\n            }\n        }\n        if ($theme_exists['from_theme'] == false || $theme_exists['to_theme'] == false) {\n            $this->errors[] = $this->trans('Theme(s) not found', [], 'Admin.International.Notification');\n        }\n\n        if (count($this->errors)) {\n            return;\n        }\n\n        $bool = true;\n        $items = Language::getFilesList($from_lang, $from_theme, $to_lang, $to_theme, false, false, true);\n        foreach ($items as $source => $dest) {\n            if (!$this->checkDirAndCreate($dest)) {\n                $this->errors[] = $this->trans('Impossible to create the directory \"%folder%\".', ['%folder%' => $dest], 'Admin.International.Notification');\n            } elseif (!copy($source, $dest)) {\n                $this->errors[] = $this->trans('Impossible to copy \"%source%\" to \"%dest%\".', ['%source%' => $source, '%dest%' => $dest], 'Admin.International.Notification');\n            } elseif (strpos($dest, 'modules') && basename($source) === $from_lang . '.php' && $bool !== false) {\n                if (!$this->changeModulesKeyTranslation($dest, $from_theme, $to_theme)) {\n                    $this->errors[] = $this->trans('Impossible to translate \"%dest%\".', ['%dest%' => $dest], 'Admin.International.Notification');\n                }\n            }\n        }\n        if (!count($this->errors)) {\n            $this->redirect(false, 14);\n        }\n        $this->errors[] = $this->trans('A part of the data has been copied but some of the language files could not be found.', [], 'Admin.International.Notification');\n    }\n\n    /**\n     * Change the key translation to according it to theme name.\n     *\n     * @param string $path\n     * @param string $theme_from\n     * @param string $theme_to\n     *\n     * @return bool\n     */\n    public function changeModulesKeyTranslation($path, $theme_from, $theme_to)\n    {\n        $content = file_get_contents($path);\n        $arr_replace = [];\n        $bool_flag = true;\n        if (preg_match_all('#\\$_MODULE\\[\\'([^\\']+)\\'\\]#Ui', $content, $matches)) {\n            foreach ($matches[1] as $value) {\n                $arr_replace[$value] = str_replace($theme_from, $theme_to, $value);\n            }\n            $content = str_replace(array_keys($arr_replace), array_values($arr_replace), $content);\n            $bool_flag = (file_put_contents($path, $content) === false) ? false : true;\n        }\n\n        return $bool_flag;\n    }\n\n    public function exportTabs()\n    {\n        // Get name tabs by iso code\n        $tabs = Tab::getTabs($this->lang_selected->id);\n\n        // Get name of the default tabs\n        $tabs_default_lang = Tab::getTabs(1);\n\n        $tabs_default = [];\n        foreach ($tabs_default_lang as $tab) {\n            $tabs_default[$tab['class_name']] = pSQL($tab['name']);\n        }\n\n        // Create content\n        $content = \"<?php\\n\\n\\$_TABS = array();\";\n        if (!empty($tabs)) {\n            foreach ($tabs as $tab) {\n                /*\n                 * We don't export tab translations that are identical to the default\n                 * tab translations to avoid a problem that would occur in the followin scenario:\n                 *\n                 * 1) install PrestaShop in, say, Spanish => tabs are by default in Spanish\n                 * 2) create a new language, say, Klingon => tabs are populated using the default, Spanish, tabs\n                 * 3) export the Klingon language pack\n                 *\n                 * => Since you have not yet translated the tabs into Klingon,\n                 * without the condition below, you would get tabs exported, but in Spanish.\n                 * This would lead to a Klingon pack actually containing Spanish.\n                 *\n                 * This has caused many issues in the past, so, as a precaution, tabs from\n                 * the default language are not exported.\n                 *\n                 */\n                if ($tabs_default[$tab['class_name']] != pSQL($tab['name'])) {\n                    $content .= \"\\n\\$_TABS['\" . $tab['class_name'] . \"'] = '\" . pSQL($tab['name']) . \"';\";\n                }\n            }\n        }\n        $content .= \"\\n\\nreturn \\$_TABS;\";\n\n        $dir = _PS_TRANSLATIONS_DIR_ . $this->lang_selected->iso_code . DIRECTORY_SEPARATOR;\n        $path = $dir . 'tabs.php';\n\n        // Check if tabs.php exists for the selected Iso Code\n        if (!Tools::file_exists_cache($dir)) {\n            if (!mkdir($dir, FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                throw new PrestaShopException('The file ' . $dir . ' cannot be created.');\n            }\n        }\n        if (!file_put_contents($path, $content)) {\n            throw new PrestaShopException('File \"' . $path . '\" does not exist and cannot be created in ' . $dir);\n        }\n        if (!is_writable($path)) {\n            $this->displayWarning($this->trans('This file must be writable: %file%', ['%file%' => $path], 'Admin.Notifications.Error'));\n        }\n    }\n\n    public function submitExportLang()\n    {\n        if ($this->lang_selected->iso_code && $this->theme_selected) {\n            $this->exportTabs();\n            $items = array_flip(Language::getFilesList($this->lang_selected->iso_code, $this->theme_selected, false, false, false, false, true));\n            $file_name = _PS_TRANSLATIONS_DIR_ . '/export/' . $this->lang_selected->iso_code . '.gzip';\n            $gz = new Archive_Tar($file_name, 'gz');\n            if ($gz->createModify($items, '', _PS_ROOT_DIR_)) {\n                ob_start();\n                header('Pragma: public');\n                header('Expires: 0');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Cache-Control: public');\n                header('Content-Description: File Transfer');\n                header('Content-type: application/octet-stream');\n                header('Content-Disposition: attachment; filename=\"' . $this->lang_selected->iso_code . '.gzip' . '\"');\n                header('Content-Transfer-Encoding: binary');\n                ob_end_flush();\n                readfile($file_name);\n                @unlink($file_name);\n                exit;\n            }\n            $this->errors[] = $this->trans('An error occurred while creating archive.', [], 'Admin.International.Notification');\n        }\n        $this->errors[] = $this->trans('Please select a language and a theme.', [], 'Admin.International.Notification');\n    }\n\n    public static function checkAndAddMailsFiles($iso_code, $files_list)\n    {\n        if (Language::getIdByIso('en')) {\n            $default_language = 'en';\n        } else {\n            $default_language = Language::getIsoById((int) Configuration::get('PS_LANG_DEFAULT'));\n        }\n\n        if (!$default_language || !Validate::isLanguageIsoCode($default_language)) {\n            return false;\n        }\n\n        // 1 - Scan mails files\n        $mails = [];\n        if (Tools::file_exists_cache(_PS_MAIL_DIR_ . $default_language . '/')) {\n            $mails = scandir(_PS_MAIL_DIR_ . $default_language . '/', SCANDIR_SORT_NONE);\n        }\n\n        $mails_new_lang = [];\n\n        // Get all email files\n        foreach ($files_list as $file) {\n            if (preg_match('#^mails\\/([a-z0-9]+)\\/#Ui', $file['filename'], $matches)) {\n                $slash_pos = strrpos($file['filename'], '/');\n                $mails_new_lang[] = substr($file['filename'], -(strlen($file['filename']) - $slash_pos - 1));\n            }\n        }\n\n        // Get the difference\n        $arr_mails_needed = array_diff($mails, $mails_new_lang);\n\n        // Add mails files\n        foreach ($arr_mails_needed as $mail_to_add) {\n            if (!in_array($mail_to_add, self::$ignore_folder)) {\n                @copy(_PS_MAIL_DIR_ . $default_language . '/' . $mail_to_add, _PS_MAIL_DIR_ . $iso_code . '/' . $mail_to_add);\n            }\n        }\n\n        // 2 - Scan modules files\n        $modules = scandir(_PS_MODULE_DIR_, SCANDIR_SORT_NONE);\n\n        $module_mail_en = [];\n        $module_mail_iso_code = [];\n\n        foreach ($modules as $module) {\n            if (!in_array($module, self::$ignore_folder) && Tools::file_exists_cache(_PS_MODULE_DIR_ . $module . '/mails/' . $default_language . '/')) {\n                $arr_files = scandir(_PS_MODULE_DIR_ . $module . '/mails/' . $default_language . '/', SCANDIR_SORT_NONE);\n\n                foreach ($arr_files as $file) {\n                    if (!in_array($file, self::$ignore_folder)) {\n                        if (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module . '/mails/' . $default_language . '/' . $file)) {\n                            $module_mail_en[] = _PS_MODULE_DIR_ . $module . '/mails/ISO_CODE/' . $file;\n                        }\n\n                        if (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module . '/mails/' . $iso_code . '/' . $file)) {\n                            $module_mail_iso_code[] = _PS_MODULE_DIR_ . $module . '/mails/ISO_CODE/' . $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Get the difference in this modules\n        $arr_modules_mails_needed = array_diff($module_mail_en, $module_mail_iso_code);\n\n        // Add mails files for this modules\n        foreach ($arr_modules_mails_needed as $file) {\n            $file_en = str_replace('ISO_CODE', $default_language, $file);\n            $file_iso_code = str_replace('ISO_CODE', $iso_code, $file);\n            $dir_iso_code = substr($file_iso_code, 0, -(strlen($file_iso_code) - strrpos($file_iso_code, '/') - 1));\n\n            if (!file_exists($dir_iso_code)) {\n                mkdir($dir_iso_code);\n                file_put_contents($dir_iso_code . '/index.php', Tools::getDefaultIndexContent());\n            }\n\n            if (Tools::file_exists_cache($file_en)) {\n                copy($file_en, $file_iso_code);\n            }\n        }\n    }\n\n    /**\n     * Move theme translations in selected themes.\n     *\n     * @param array $files\n     * @param array $themes_selected\n     */\n    public function checkAndAddThemesFiles($files, $themes_selected)\n    {\n        foreach ($files as $file) {\n            // Check if file is a file theme\n            if (preg_match('#^themes\\/([a-z0-9]+)\\/lang\\/#Ui', $file['filename'], $matches)) {\n                $slash_pos = strrpos($file['filename'], '/');\n                $name_file = substr($file['filename'], -(strlen($file['filename']) - $slash_pos - 1));\n                $name_default_theme = $matches[1];\n                $deleted_old_theme = false;\n\n                // Get the old file theme\n                if (file_exists(_PS_THEME_DIR_ . 'lang/' . $name_file)) {\n                    $theme_file_old = _PS_THEME_DIR_ . 'lang/' . $name_file;\n                } else {\n                    $deleted_old_theme = true;\n                    $theme_file_old = str_replace(self::DEFAULT_THEME_NAME, $name_default_theme, _PS_THEME_DIR_ . 'lang/' . $name_file);\n                }\n\n                // Move the old file theme in the new folder\n                foreach ($themes_selected as $theme_name) {\n                    if (file_exists($theme_file_old)) {\n                        copy($theme_file_old, str_replace($name_default_theme, $theme_name, $theme_file_old));\n                    }\n                }\n\n                if ($deleted_old_theme) {\n                    @unlink($theme_file_old);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add new translations tabs by code ISO.\n     *\n     * @param string $iso_code\n     * @param array $files\n     *\n     * @return array\n     */\n    public static function addNewTabs($iso_code, $files)\n    {\n        $errors = [];\n\n        foreach ($files as $file) {\n            // Check if file is a file theme\n            if (preg_match('#^translations\\/' . $iso_code . '\\/tabs.php#Ui', $file['filename'], $matches) && Validate::isLanguageIsoCode($iso_code)) {\n                // Include array width new translations tabs\n                $_TABS = [];\n                clearstatcache();\n                if (file_exists(_PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . $file['filename'])) {\n                    include_once _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . $file['filename'];\n                }\n\n                /** @var mixed $_TABS */\n                if (is_array($_TABS) && count($_TABS)) {\n                    foreach ($_TABS as $class_name => $translations) {\n                        // Get instance of this tab by class name\n                        $tab = Tab::getInstanceFromClassName($class_name);\n                        //Check if class name exists\n                        if (!empty($tab->class_name)) {\n                            $id_lang = Language::getIdByIso($iso_code, true);\n                            $tab->name[(int) $id_lang] = $translations;\n\n                            // Do not crash at intall\n                            if (!isset($tab->name[Configuration::get('PS_LANG_DEFAULT')])) {\n                                $tab->name[(int) Configuration::get('PS_LANG_DEFAULT')] = $translations;\n                            }\n\n                            if (!Validate::isGenericName($tab->name[(int) $id_lang])) {\n                                $errors[] = Context::getContext()->getTranslator()->trans('Tab \"%s\" is not valid', [$tab->name[(int) $id_lang]], 'Admin.International.Notification');\n                            } else {\n                                $tab->update();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $errors;\n    }\n\n    public static function checkTranslationFile($content)\n    {\n        $lines = array_map('trim', explode(\"\\n\", $content));\n        $global = false;\n        foreach ($lines as $line) {\n            // PHP tags\n            if (in_array($line, ['<?php', '?>', ''])) {\n                continue;\n            }\n\n            // Global variable declaration\n            if (!$global && preg_match('/^global\\s+\\$([a-z0-9-_]+)\\s*;$/i', $line, $matches)) {\n                $global = $matches[1];\n\n                continue;\n            }\n            // Global variable initialization\n            if ($global != false && preg_match('/^\\$' . preg_quote($global, '/') . '\\s*=\\s*array\\(\\s*\\)\\s*;$/i', $line)) {\n                continue;\n            }\n\n            // Global variable initialization without declaration\n            if (!$global && preg_match('/^\\$([a-z0-9-_]+)\\s*=\\s*array\\(\\s*\\)\\s*;$/i', $line, $matches)) {\n                $global = $matches[1];\n\n                continue;\n            }\n\n            // Assignation\n            if (preg_match('/^\\$' . preg_quote($global, '/') . '\\[\\'' . _PS_TRANS_PATTERN_ . '\\'\\]\\s*=\\s*\\'' . _PS_TRANS_PATTERN_ . '\\'\\s*;$/i', $line)) {\n                continue;\n            }\n\n            // Sometimes the global variable is returned...\n            if (preg_match('/^return\\s+\\$' . preg_quote($global, '/') . '\\s*;$/i', $line, $matches)) {\n                continue;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    public function submitImportLang()\n    {\n        if (!isset($_FILES['file']['tmp_name']) || !$_FILES['file']['tmp_name']) {\n            $this->errors[] = $this->trans('No file has been selected.', [], 'Admin.Notifications.Error');\n        } else {\n            $gz = new Archive_Tar($_FILES['file']['tmp_name'], 'gz');\n            $filename = $_FILES['file']['name'];\n            $iso_code = str_replace(['.tar.gz', '.gzip'], '', $filename);\n\n            if (Validate::isLangIsoCode($iso_code)) {\n                $themes_selected = Tools::getValue('theme', [self::DEFAULT_THEME_NAME]);\n                $files_list = AdminTranslationsController::filterTranslationFiles($gz->listContent());\n                $files_paths = AdminTranslationsController::filesListToPaths($files_list);\n\n                $uniqid = uniqid();\n                $sandbox = _PS_CACHE_DIR_ . 'sandbox' . DIRECTORY_SEPARATOR . $uniqid . DIRECTORY_SEPARATOR;\n                /** @var bool $statusExtract */\n                $statusExtract = $gz->extractList($files_paths, $sandbox);\n                if ($statusExtract) {\n                    foreach ($files_list as $file2check) {\n                        //don't validate index.php, will be overwrite when extract in translation directory\n                        if (pathinfo($file2check['filename'], PATHINFO_BASENAME) == 'index.php') {\n                            continue;\n                        }\n\n                        if (preg_match('@^[0-9a-z-_/\\\\\\\\]+\\.php$@i', $file2check['filename'])) {\n                            if (!@filemtime($sandbox . $file2check['filename']) || !AdminTranslationsController::checkTranslationFile(file_get_contents($sandbox . $file2check['filename']))) {\n                                $this->errors[] = $this->trans('Validation failed for: %file%', ['%file%' => $file2check['filename']], 'Admin.International.Notification');\n                            }\n                        } elseif (!preg_match('@mails[0-9a-z-_/\\\\\\\\]+\\.(html|tpl|txt)$@i', $file2check['filename'])) {\n                            $this->errors[] = $this->trans('Unidentified file found: %file%', ['%file%' => $file2check['filename']], 'Admin.International.Notification');\n                        }\n                    }\n                    Tools::deleteDirectory($sandbox, true);\n                }\n\n                $i = 0;\n                $tmp_array = [];\n                foreach ($files_paths as $files_path) {\n                    $path = dirname($files_path);\n                    if (is_dir(_PS_TRANSLATIONS_DIR_ . '../' . $path) && !is_writable(_PS_TRANSLATIONS_DIR_ . '../' . $path) && !in_array($path, $tmp_array)) {\n                        $this->errors[] = (!$i++ ? $this->trans('The archive cannot be extracted.', [], 'Admin.International.Notification') . ' ' : '') . $this->trans('The server does not have permissions for writing.', [], 'Admin.Notifications.Error') . ' ' . $this->trans('Please check rights for %file%', ['%file%' => $path], 'Admin.Notifications.Error');\n                        $tmp_array[] = $path;\n                    }\n                }\n\n                if (count($this->errors)) {\n                    return false;\n                }\n\n                /** @var bool $error */\n                $error = $gz->extractList($files_paths, _PS_TRANSLATIONS_DIR_ . '../');\n                if ($error) {\n                    foreach ($files_list as $file2check) {\n                        if (pathinfo($file2check['filename'], PATHINFO_BASENAME) == 'index.php' && file_put_contents(_PS_TRANSLATIONS_DIR_ . '../' . $file2check['filename'], Tools::getDefaultIndexContent())) {\n                            continue;\n                        }\n                    }\n\n                    // Clear smarty modules cache\n                    Tools::clearCache();\n\n                    if (Validate::isLanguageFileName($filename)) {\n                        if (!Language::checkAndAddLanguage($iso_code)) {\n                            $conf = 20;\n                        } else {\n                            // Reset cache\n                            Language::loadLanguages();\n\n                            AdminTranslationsController::checkAndAddMailsFiles($iso_code, $files_list);\n                            $this->checkAndAddThemesFiles($files_list, $themes_selected);\n                            $tab_errors = AdminTranslationsController::addNewTabs($iso_code, $files_list);\n\n                            if (count($tab_errors)) {\n                                $this->errors += $tab_errors;\n\n                                return false;\n                            }\n                        }\n                    }\n\n                    /*\n                     * @see AdminController::$_conf\n                     */\n                    $this->redirect(false, (isset($conf) ? $conf : '15'));\n                } else {\n                    $this->errors[] = $this->trans('The archive cannot be extracted.', [], 'Admin.International.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('ISO CODE invalid \"%iso_code%\" for the following file: \"%file%\"', ['%iso_code%' => $iso_code, '%file%' => $filename], 'Admin.International.Notification');\n            }\n        }\n    }\n\n    /**\n     * Filter the translation files contained in a .gzip pack\n     * and return only the ones that we want.\n     *\n     * Right now the function only needs to check that\n     * the modules for which we want to add translations\n     * are present on the shop (installed or not).\n     *\n     * @param array $list Is the output of Archive_Tar::listContent()\n     *\n     * @return array\n     */\n    public static function filterTranslationFiles($list)\n    {\n        $kept = [];\n        foreach ($list as $file) {\n            if ('index.php' == basename($file['filename'])) {\n                continue;\n            }\n            if (preg_match('#^modules/([^/]+)/#', $file['filename'], $m)) {\n                if (is_dir(_PS_MODULE_DIR_ . $m[1])) {\n                    $kept[] = $file;\n                }\n            } else {\n                $kept[] = $file;\n            }\n        }\n\n        return $kept;\n    }\n\n    /**\n     * Turn the list returned by\n     * AdminTranslationsController::filterTranslationFiles()\n     * into a list of paths that can be passed to\n     * Archive_Tar::extractList().\n     *\n     * @param array $list\n     *\n     * @return array\n     */\n    public static function filesListToPaths($list)\n    {\n        $paths = [];\n        foreach ($list as $item) {\n            $paths[] = $item['filename'];\n        }\n\n        return $paths;\n    }\n\n    public function submitAddLang()\n    {\n        $languageDetails = Language::getJsonLanguageDetails(Tools::getValue('params_import_language'));\n        $isoCode = $languageDetails['iso_code'];\n\n        if (Validate::isLangIsoCode($isoCode)) {\n            $success = Language::downloadAndInstallLanguagePack($isoCode, _PS_VERSION_, null, true);\n            if ($success === true) {\n                Language::loadLanguages();\n                Tools::clearAllCache();\n\n                /* @see AdminController::$_conf */\n                $this->redirect(false, 15);\n            } else {\n                foreach ($success as $error) {\n                    $this->errors[] = $error;\n                }\n            }\n        }\n    }\n\n    /**\n     * This method check each file (tpl or php file), get its sentences to translate,\n     * compare with posted values and write in iso code translation file.\n     *\n     * @param string $file_name\n     * @param array $files\n     * @param string $theme_name\n     * @param string $module_name\n     * @param string|bool $dir\n     *\n     * @throws PrestaShopException\n     */\n    protected function findAndWriteTranslationsIntoFile($file_name, $files, $theme_name, $module_name, $dir = false)\n    {\n        // These static vars allow to use file to write just one time.\n        static $cache_file = [];\n        static $str_write = '';\n        static $array_check_duplicate = [];\n\n        // Set file_name in static var, this allow to open and wright the file just one time\n        if (!isset($cache_file[$theme_name . '-' . $file_name])) {\n            $str_write = '';\n            $cache_file[$theme_name . '-' . $file_name] = true;\n            if (!Tools::file_exists_cache(dirname($file_name))) {\n                mkdir(dirname($file_name), FileSystem::DEFAULT_MODE_FOLDER, true);\n            }\n            if (!Tools::file_exists_cache($file_name)) {\n                file_put_contents($file_name, '');\n            }\n            if (!is_writable($file_name)) {\n                throw new PrestaShopException($this->trans('Cannot write to the theme\\'s language file (%s). Please check writing permissions.', [$file_name], 'Admin.International.Notification'));\n            }\n\n            // this string is initialized one time for a file\n            $str_write .= \"<?php\\n\\nglobal \\$_MODULE;\\n\\$_MODULE = array();\\n\";\n            $array_check_duplicate = [];\n        }\n\n        foreach ($files as $file) {\n            if (preg_match('/^(.*)\\.(tpl|php)$/', $file) && Tools::file_exists_cache($dir . $file) && !in_array($file, self::$ignore_folder)) {\n                // Get content for this file\n                $content = file_get_contents($dir . $file);\n\n                // Get file type\n                $type_file = substr($file, -4) == '.tpl' ? 'tpl' : 'php';\n\n                // Parse this content\n                $matches = $this->userParseFile($content, $this->type_selected, $type_file, $module_name);\n\n                // Write each translation on its module file\n                $template_name = substr(basename($file), 0, -4);\n\n                foreach ($matches as $key) {\n                    if ($theme_name) {\n                        $post_key = md5(strtolower($module_name) . '_' . strtolower($theme_name) . '_' . strtolower($template_name) . '_' . md5($key));\n                        $pattern = '\\'<{' . strtolower($module_name) . '}' . strtolower($theme_name) . '>' . strtolower($template_name) . '_' . md5($key) . '\\'';\n                    } else {\n                        $post_key = md5(strtolower($module_name) . '_' . strtolower($template_name) . '_' . md5($key));\n                        $pattern = '\\'<{' . strtolower($module_name) . '}prestashop>' . strtolower($template_name) . '_' . md5($key) . '\\'';\n                    }\n\n                    if (array_key_exists($post_key, $_POST) && !in_array($pattern, $array_check_duplicate)) {\n                        if ($_POST[$post_key] == '') {\n                            continue;\n                        }\n                        $array_check_duplicate[] = $pattern;\n                        $str_write .= '$_MODULE[' . $pattern . '] = \\'' . pSQL(str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], ' ', $_POST[$post_key])) . '\\';' . \"\\n\";\n                        ++$this->total_expression;\n                    }\n                }\n            }\n        }\n\n        if (isset($cache_file[$theme_name . '-' . $file_name]) && $str_write != \"<?php\\n\\nglobal \\$_MODULE;\\n\\$_MODULE = array();\\n\") {\n            file_put_contents($file_name, $str_write);\n        }\n    }\n\n    /**\n     * Clear the list of module file by type (file or directory).\n     *\n     * @param array $files List of files\n     * @param string $type_clear (file|directory)\n     * @param string $path\n     *\n     * @return array : list of a good files\n     */\n    public function clearModuleFiles($files, $type_clear = 'file', $path = '')\n    {\n        // List of directory which not must be parsed\n        $arr_exclude = ['img', 'js', 'mails', 'override'];\n\n        // List of good extention files\n        $arr_good_ext = ['.tpl', '.php'];\n\n        foreach ($files as $key => $file) {\n            if ($file[0] === '.' || in_array(substr($file, 0, strrpos($file, '.')), $this->all_iso_lang)) {\n                unset($files[$key]);\n            } elseif ($type_clear === 'file' && !in_array(substr($file, strrpos($file, '.')), $arr_good_ext)) {\n                unset($files[$key]);\n            } elseif ($type_clear === 'directory' && (!is_dir($path . $file) || in_array($file, $arr_exclude))) {\n                unset($files[$key]);\n            }\n        }\n\n        return $files;\n    }\n\n    /**\n     * This method get translation for each files of a module,\n     * compare with global $_MODULES array and fill AdminTranslations::modules_translations array\n     * With key as English sentences and values as their iso code translations.\n     *\n     * @param array $files\n     * @param string $theme_name\n     * @param string $module_name\n     * @param string|bool $dir\n     */\n    protected function findAndFillTranslations($files, $theme_name, $module_name, $dir = false)\n    {\n        $name_var = (empty($this->translations_informations[$this->type_selected]['var']) ? false : $this->translations_informations[$this->type_selected]['var']);\n\n        // added for compatibility\n        $GLOBALS[$name_var] = array_change_key_case($GLOBALS[$name_var]);\n\n        // Thank to this var similar keys are not duplicate\n        // in AndminTranslation::modules_translations array\n        // see below\n        $array_check_duplicate = [];\n        foreach ($files as $file) {\n            if ((preg_match('/^(.*).tpl$/', $file) || preg_match('/^(.*).php$/', $file)) && Tools::file_exists_cache($file_path = $dir . $file)) {\n                // Get content for this file\n                $content = file_get_contents($file_path);\n\n                // Module files can now be ignored by adding this string in a file\n                if (strpos($content, 'IGNORE_THIS_FILE_FOR_TRANSLATION') !== false) {\n                    continue;\n                }\n\n                // Get file type\n                $type_file = substr($file, -4) == '.tpl' ? 'tpl' : 'php';\n\n                // Parse this content\n                $matches = $this->userParseFile($content, $this->type_selected, $type_file, $module_name);\n\n                // Write each translation on its module file\n                $template_name = substr(basename($file), 0, -4);\n\n                foreach ($matches as $key) {\n                    $md5_key = md5($key);\n                    $module_key = '<{' . Tools::strtolower($module_name) . '}' . strtolower($theme_name) . '>' . Tools::strtolower($template_name) . '_' . $md5_key;\n                    $default_key = '<{' . Tools::strtolower($module_name) . '}prestashop>' . Tools::strtolower($template_name) . '_' . $md5_key;\n                    // to avoid duplicate entry\n                    if (!in_array($module_key, $array_check_duplicate)) {\n                        $array_check_duplicate[] = $module_key;\n                        if (!isset($this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'])) {\n                            ++$this->total_expression;\n                        }\n                        if ($theme_name && array_key_exists($module_key, $GLOBALS[$name_var])) {\n                            $this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$module_key], ENT_COMPAT, 'UTF-8');\n                        } elseif (array_key_exists($default_key, $GLOBALS[$name_var])) {\n                            $this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$default_key], ENT_COMPAT, 'UTF-8');\n                        } else {\n                            $this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'] = '';\n                            ++$this->missing_translations;\n                        }\n                        $this->modules_translations[$theme_name][$module_name][$template_name][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get list of files which must be parsed by directory and by type of translations.\n     *\n     * @return array : list of files by directory\n     */\n    public function getFileToParseByTypeTranslation()\n    {\n        $directories = [];\n\n        switch ($this->type_selected) {\n            case 'front':\n                $directories['php'] = [\n                    _PS_FRONT_CONTROLLER_DIR_ => scandir(_PS_FRONT_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/front/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/front/', SCANDIR_SORT_NONE),\n                    _PS_CLASS_DIR_ . 'controller/' => ['FrontController.php'],\n                ];\n\n                $directories['tpl'] = [_PS_ALL_THEMES_DIR_ => scandir(_PS_ALL_THEMES_DIR_, SCANDIR_SORT_NONE)];\n                self::$ignore_folder[] = 'modules';\n                $directories['tpl'] = array_merge($directories['tpl'], $this->listFiles(_PS_THEME_SELECTED_DIR_));\n                if (isset($directories['tpl'][_PS_THEME_SELECTED_DIR_ . 'pdf/'])) {\n                    unset($directories['tpl'][_PS_THEME_SELECTED_DIR_ . 'pdf/']);\n                }\n\n                break;\n\n            case 'back':\n                $directories = [\n                    'php' => [\n                        _PS_ADMIN_CONTROLLER_DIR_ => scandir(_PS_ADMIN_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                        _PS_OVERRIDE_DIR_ . 'controllers/admin/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/admin/', SCANDIR_SORT_NONE),\n                        _PS_CLASS_DIR_ . 'helper/' => scandir(_PS_CLASS_DIR_ . 'helper/', SCANDIR_SORT_NONE),\n                        _PS_CLASS_DIR_ . 'controller/' => ['AdminController.php'],\n                        _PS_CLASS_DIR_ => ['PaymentModule.php'],\n                    ],\n                    'php-sf2' => [\n                        _PS_ROOT_DIR_ . '/src/' => Tools::scandir(_PS_ROOT_DIR_ . '/src/', 'php', '', true),\n                    ],\n                    'tpl-sf2' => Tools::scandir(_PS_ROOT_DIR_ . '/src/PrestaShopBundle/Resources/views/', 'twig', '', true),\n                    'tpl' => $this->listFiles(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR . 'themes/'),\n                    'specific' => [\n                        _PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR => [],\n                    ],\n                ];\n\n                // For translate the template which are overridden\n                if (file_exists(_PS_OVERRIDE_DIR_ . 'controllers' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'templates')) {\n                    $directories['tpl'] = array_merge($directories['tpl'], $this->listFiles(_PS_OVERRIDE_DIR_ . 'controllers' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'templates'));\n                }\n\n                break;\n\n            case 'errors':\n                $directories['php'] = [\n                    _PS_ROOT_DIR_ => scandir(_PS_ROOT_DIR_, SCANDIR_SORT_NONE),\n                    _PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR => scandir(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR, SCANDIR_SORT_NONE),\n                    _PS_FRONT_CONTROLLER_DIR_ => scandir(_PS_FRONT_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_ADMIN_CONTROLLER_DIR_ => scandir(_PS_ADMIN_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/front/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/front/', SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/admin/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/admin/', SCANDIR_SORT_NONE),\n                ];\n\n                // Get all files for folders classes/ and override/classes/ recursively\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_CLASS_DIR_, [], 'php'));\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_OVERRIDE_DIR_ . 'classes/', [], 'php'));\n\n                break;\n\n            case 'fields':\n                $directories['php'] = $this->listFiles(_PS_CLASS_DIR_, [], 'php');\n\n                break;\n\n            case 'pdf':\n                $tpl_theme = Tools::file_exists_cache(_PS_THEME_SELECTED_DIR_ . 'pdf/') ? scandir(_PS_THEME_SELECTED_DIR_ . 'pdf/', SCANDIR_SORT_NONE) : [];\n                $directories = [\n                    'php' => [\n                        _PS_CLASS_DIR_ . 'pdf/' => scandir(_PS_CLASS_DIR_ . 'pdf/', SCANDIR_SORT_NONE),\n                        _PS_OVERRIDE_DIR_ . 'classes/pdf/' => scandir(_PS_OVERRIDE_DIR_ . 'classes/pdf/', SCANDIR_SORT_NONE),\n                    ],\n                    'tpl' => [\n                        _PS_PDF_DIR_ => scandir(_PS_PDF_DIR_, SCANDIR_SORT_NONE),\n                        _PS_THEME_SELECTED_DIR_ . 'pdf/' => $tpl_theme,\n                    ],\n                ];\n                $directories['tpl'] = array_merge($directories['tpl'], $this->getModulesHasPDF());\n                $directories['php'] = array_merge($directories['php'], $this->getModulesHasPDF(true));\n\n                break;\n\n            case 'mails':\n                $directories['php'] = [\n                    _PS_FRONT_CONTROLLER_DIR_ => scandir(_PS_FRONT_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_ADMIN_CONTROLLER_DIR_ => scandir(_PS_ADMIN_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/front/' => is_dir(_PS_OVERRIDE_DIR_ . 'controllers/front/') ? scandir(_PS_OVERRIDE_DIR_ . 'controllers/front/', SCANDIR_SORT_NONE) : [],\n                    _PS_OVERRIDE_DIR_ . 'controllers/admin/' => is_dir(_PS_OVERRIDE_DIR_ . 'controllers/admin/') ? scandir(_PS_OVERRIDE_DIR_ . 'controllers/admin/', SCANDIR_SORT_NONE) : [],\n                    _PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR => scandir(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR, SCANDIR_SORT_NONE),\n                ];\n\n                // Get all files for folders classes/ and override/classes/ recursively\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_CLASS_DIR_, [], 'php'));\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_OVERRIDE_DIR_ . 'classes/', [], 'php'));\n                $directories['php'] = array_merge($directories['php'], $this->getModulesHasMails());\n\n                break;\n        }\n\n        return $directories;\n    }\n\n    /**\n     * This method parse a file by type of translation and type file.\n     *\n     * @param string $content\n     * @param string $type_translation front, back, errors, modules...\n     * @param string|bool $type_file (tpl|php)\n     * @param string $module_name name of the module\n     *\n     * @return array\n     */\n    protected function userParseFile($content, $type_translation, $type_file = false, $module_name = '')\n    {\n        switch ($type_translation) {\n            case 'front':\n                // Parsing file in Front office\n                if ($type_file == 'php') {\n                    $regex = '/this->l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'[\\)|\\,]/U';\n                } else {\n                    $regex = '/\\{l\\s*s=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1(\\s*sprintf=.*)?(\\s*js=1)?\\s*\\}/U';\n                }\n\n                break;\n\n            case 'back':\n                // Parsing file in Back office\n                if ($type_file == 'php') {\n                    $regex = '/this->l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'[\\)|\\,]/U';\n                } elseif ($type_file == 'specific') {\n                    $regex = '/Translate::getAdminTranslation\\((\\')' . _PS_TRANS_PATTERN_ . '\\'(?:,.*)*\\)/U';\n                } else {\n                    $regex = '/\\{l\\s*s\\s*=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1(\\s*sprintf=.*)?(\\s*js=1)?(\\s*slashes=1)?.*\\}/U';\n                }\n\n                break;\n\n            case 'errors':\n                // Parsing file for all errors syntax\n                $regex = '/Tools::displayError\\((\\')' . _PS_TRANS_PATTERN_ . '\\'(,\\s*(.+))?\\)/U';\n\n                break;\n\n            case 'modules':\n                // Parsing modules file\n                if ($type_file == 'php') {\n                    $regex = '/->l\\(\\s*(\\')' . _PS_TRANS_PATTERN_ . '\\'(\\s*,\\s*?\\'(.+)\\')?(\\s*,\\s*?(.+))?\\s*\\)/Ums';\n                } else {\n                    // In tpl file look for something that should contain mod='module_name' according to the documentation\n                    $regex = '/\\{l\\s*s=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1.*\\s+mod=\\'' . $module_name . '\\'.*\\}/U';\n                }\n\n                break;\n\n            case 'pdf':\n                // Parsing PDF file\n                if ($type_file == 'php') {\n                    $regex = [\n                        '/HTMLTemplate.*::l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'[\\)|\\,]/U',\n                        '/->l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'(, ?\\'(.+)\\')?(, ?(.+))?\\)/U',\n                    ];\n                } else {\n                    $regex = '/\\{l\\s*s=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1(\\s*sprintf=.*)?(\\s*js=1)?(\\s*pdf=\\'true\\')?\\s*\\}/U';\n                }\n\n                break;\n            default:\n                $regex = [];\n        }\n\n        if (!is_array($regex)) {\n            $regex = [$regex];\n        }\n\n        $strings = [];\n        foreach ($regex as $regex_row) {\n            $matches = [];\n            $n = preg_match_all($regex_row, $content, $matches);\n            for ($i = 0; $i < $n; ++$i) {\n                $quote = $matches[1][$i];\n                $string = $matches[2][$i];\n\n                if ($quote === '\"') {\n                    // Escape single quotes because the core will do it when looking for the translation of this string\n                    $string = str_replace('\\'', '\\\\\\'', $string);\n                    // Unescape double quotes\n                    $string = preg_replace('/\\\\\\\\+\"/', '\"', $string);\n                }\n\n                $strings[] = $string;\n            }\n        }\n\n        return array_unique($strings);\n    }\n\n    /**\n     * Get all translations informations for all type of translations.\n     *\n     * array(\n     *  'type' => array(\n     *      'name' => string : title for the translation type,\n     *      'var' => string : name of var for the translation file,\n     *      'dir' => string : dir of translation file\n     *      'file' => string : file name of translation file\n     *  )\n     * )\n     */\n    public function getTranslationsInformations()\n    {\n        $this->translations_informations = [\n            'back' => [\n                'name' => $this->trans('Back office translations', [], 'Admin.International.Feature'),\n                'var' => '_LANGADM',\n                'dir' => _PS_TRANSLATIONS_DIR_ . $this->lang_selected->iso_code . '/',\n                'file' => 'admin.php',\n                'sf_controller' => true,\n                'choice_theme' => false,\n            ],\n            'themes' => [\n                'name' => $this->trans('Themes translations', [], 'Admin.International.Feature'),\n                'var' => '_THEMES',\n                'dir' => '',\n                'file' => '',\n                'sf_controller' => true,\n                'choice_theme' => true,\n            ],\n            'modules' => [\n                'name' => $this->trans('Installed modules translations', [], 'Admin.International.Feature'),\n                'var' => '_MODULES',\n                'dir' => _PS_ROOT_DIR_ . '/modules/',\n                'file' => '',\n                'sf_controller' => true,\n                'choice_theme' => false,\n            ],\n            'mails' => [\n                'name' => $this->trans('Email translations', [], 'Admin.International.Feature'),\n                'var' => '_LANGMAIL',\n                'dir' => _PS_MAIL_DIR_ . $this->lang_selected->iso_code . '/',\n                'file' => 'lang.php',\n                'sf_controller' => false,\n                'choice_theme' => false,\n            ],\n            'others' => [\n                'name' => $this->trans('Other translations', [], 'Admin.International.Feature'),\n                'var' => '_OTHERS',\n                'dir' => '',\n                'file' => '',\n                'sf_controller' => true,\n                'choice_theme' => false,\n            ],\n        ];\n\n        if (defined('_PS_THEME_SELECTED_DIR_')) {\n            $this->translations_informations['modules']['override'] = ['dir' => _PS_THEME_SELECTED_DIR_ . 'modules/', 'file' => ''];\n            $this->translations_informations['mails']['override'] = ['dir' => _PS_THEME_SELECTED_DIR_ . 'mails/' . $this->lang_selected->iso_code . '/', 'file' => 'lang.php'];\n        }\n    }\n\n    /**\n     * Get all informations on : languages, theme and the translation type.\n     */\n    public function getInformations()\n    {\n        // Get all Languages\n        $this->languages = Language::getLanguages(false);\n\n        // Get all iso_code of languages\n        foreach ($this->languages as $language) {\n            $this->all_iso_lang[] = $language['iso_code'];\n        }\n\n        // Get folder name of theme\n        if (($theme = Tools::getValue('selected-theme')) && !is_array($theme)) {\n            $theme_exists = $this->theme_exists($theme);\n            if (!$theme_exists) {\n                throw new PrestaShopException($this->trans('Invalid theme \"%theme%\"', ['%theme%' => Tools::safeOutput($theme)], 'Admin.International.Notification'));\n            }\n            $this->theme_selected = Tools::safeOutput($theme);\n        }\n\n        // Set the path of selected theme\n        if ($this->theme_selected) {\n            define('_PS_THEME_SELECTED_DIR_', _PS_ROOT_DIR_ . '/themes/' . $this->theme_selected . '/');\n        } else {\n            define('_PS_THEME_SELECTED_DIR_', '');\n        }\n\n        // Get type of translation\n        if (($type = Tools::getValue('type')) && !is_array($type)) {\n            $this->type_selected = strtolower(Tools::safeOutput($type));\n        }\n\n        // Get selected language\n        if (Tools::getValue('lang') || Tools::getValue('iso_code')) {\n            $iso_code = Tools::getValue('lang') ? Tools::getValue('lang') : Tools::getValue('iso_code');\n\n            if (!Validate::isLangIsoCode($iso_code) || !in_array($iso_code, $this->all_iso_lang)) {\n                throw new PrestaShopException($this->trans('Invalid iso code \"%iso_code%\"', ['%iso_code%' => Tools::safeOutput($iso_code)], 'Admin.International.Notification'));\n            }\n\n            $this->lang_selected = new Language((int) Language::getIdByIso($iso_code));\n        } else {\n            $this->lang_selected = new Language((int) Language::getIdByIso('en'));\n        }\n\n        // Get all information for translations\n        $this->getTranslationsInformations();\n    }\n\n    public function renderKpis()\n    {\n        $time = time();\n        $kpis = [];\n\n        /* The data generation is located in AdminStatsControllerCore */\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-languages';\n        $helper->icon = 'icon-microphone';\n        $helper->color = 'color1';\n        $helper->href = $this->context->link->getAdminLink('AdminLanguages');\n        $helper->title = $this->trans('Enabled Languages', [], 'Admin.International.Feature');\n        if (ConfigurationKPI::get('ENABLED_LANGUAGES') !== false) {\n            $helper->value = ConfigurationKPI::get('ENABLED_LANGUAGES');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=enabled_languages';\n        $helper->refresh = (bool) (ConfigurationKPI::get('ENABLED_LANGUAGES_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-country';\n        $helper->icon = 'icon-home';\n        $helper->color = 'color2';\n        $helper->title = $this->trans('Main Country', [], 'Admin.International.Feature');\n        $helper->subtitle = $this->trans('30 Days', [], 'Admin.Global');\n        if (ConfigurationKPI::get('MAIN_COUNTRY', $this->context->language->id) !== false) {\n            $helper->value = ConfigurationKPI::get('MAIN_COUNTRY', $this->context->language->id);\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=main_country';\n        $helper->refresh = (bool) (ConfigurationKPI::get('MAIN_COUNTRY_EXPIRE', $this->context->language->id) < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-translations';\n        $helper->icon = 'icon-list';\n        $helper->color = 'color3';\n        $helper->title = $this->trans('Front office Translations', [], 'Admin.International.Feature');\n        if (ConfigurationKPI::get('FRONTOFFICE_TRANSLATIONS') !== false) {\n            $helper->value = ConfigurationKPI::get('FRONTOFFICE_TRANSLATIONS');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=frontoffice_translations';\n        $helper->refresh = (bool) (ConfigurationKPI::get('FRONTOFFICE_TRANSLATIONS_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpiRow();\n        $helper->kpis = $kpis;\n\n        return $helper->generate();\n    }\n\n    /**\n     * AdminController::postProcess() override.\n     *\n     * @see AdminController::postProcess()\n     */\n    public function postProcess()\n    {\n        $this->getInformations();\n\n        /* PrestaShop demo mode */\n        if (_PS_MODE_DEMO_) {\n            $this->errors[] = $this->trans('This functionality has been disabled.', [], 'Admin.Notifications.Error');\n\n            return;\n        }\n        /* PrestaShop demo mode */\n\n        try {\n            if (Tools::isSubmit('submitCopyLang')) {\n                if ($this->access('add')) {\n                    $this->submitCopyLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitExport')) {\n                if ($this->access('add')) {\n                    $this->submitExportLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitImport')) {\n                if ($this->access('add')) {\n                    $this->submitImportLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitAddLanguage')) {\n                if ($this->access('add')) {\n                    $this->submitAddLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsPdf')) {\n                if ($this->access('edit')) {\n                    // Only the PrestaShop team should write the translations into the _PS_TRANSLATIONS_DIR_\n                    if (!$this->theme_selected) {\n                        $this->writeTranslationFile();\n                    } else {\n                        $this->writeTranslationFile(true);\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsBack') || Tools::isSubmit('submitTranslationsErrors') || Tools::isSubmit('submitTranslationsFields') || Tools::isSubmit('submitTranslationsFront')) {\n                if ($this->access('edit')) {\n                    $this->writeTranslationFile();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsMails') || Tools::isSubmit('submitTranslationsMailsAndStay')) {\n                if ($this->access('edit')) {\n                    $this->submitTranslationsMails();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsModules')) {\n                if ($this->access('edit')) {\n                    // Get list of modules\n                    if ($modules = $this->getListModules()) {\n                        // Get files of all modules\n                        $arr_files = $this->getAllModuleFiles($modules, null, $this->lang_selected->iso_code, true);\n\n                        // Find and write all translation modules files\n                        foreach ($arr_files as $value) {\n                            $this->findAndWriteTranslationsIntoFile($value['file_name'], $value['files'], $value['theme'], $value['module'], $value['dir']);\n                        }\n\n                        // Clear modules cache\n                        Tools::clearAllCache();\n\n                        // Redirect\n                        if (Tools::getIsset('submitTranslationsModulesAndStay')) {\n                            $this->redirect(true);\n                        } else {\n                            $this->redirect();\n                        }\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitSelectModules')) {\n                $this->redirect(false, false, true);\n            }\n        } catch (PrestaShopException $e) {\n            $this->errors[] = $e->getMessage();\n        }\n    }\n\n    /**\n     * This method redirect in the translation main page or in the translation page.\n     *\n     * @param bool $save_and_stay : true if the user has clicked on the button \"save and stay\"\n     * @param bool|int $conf : id of confirmation message\n     * @param bool $modify_translation : true if the user has clicked on the button \"Modify translation\"\n     */\n    protected function redirect($save_and_stay = false, $conf = false, $modify_translation = false)\n    {\n        $conf = !$conf ? 4 : $conf;\n        $url_base = self::$currentIndex . '&token=' . $this->token . '&conf=' . $conf;\n        if ($modify_translation) {\n            Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token . '&lang=' . Tools::getValue('langue') . '&type=' . $this->type_selected . '&module=' . Tools::getValue('module') . '&selected-theme=' . $this->theme_selected);\n        } elseif ($save_and_stay) {\n            Tools::redirectAdmin($url_base . '&lang=' . $this->lang_selected->iso_code . '&type=' . $this->type_selected . '&module=' . Tools::getValue('module') . '&selected-theme=' . $this->theme_selected);\n        } else {\n            Tools::redirectAdmin($url_base . '&action=settings');\n        }\n    }\n\n    protected function getMailPattern()\n    {\n        Tools::displayAsDeprecated('Email pattern is no longer used, emails are always saved like they are.');\n        // Let the indentation like it.\n        return '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/1999/REC-html401-19991224/strict.dtd\">\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n</head>\n<body>\n    #content\n</body>\n</html>';\n    }\n\n    /**\n     * This method is used to write translation for mails.\n     * This writes subject translation files\n     * (in root/mails/lang_choosen/lang.php or root/_PS_THEMES_DIR_/mails/lang_choosen/lang.php)\n     * and mails files.\n     */\n    protected function submitTranslationsMails()\n    {\n        $arr_mail_content = [];\n        $arr_mail_path = [];\n\n        if (Tools::getValue('core_mail')) {\n            $arr_mail_content['core_mail'] = Tools::getValue('core_mail');\n\n            // Get path of directory for find a good path of translation file\n            if (!$this->theme_selected) {\n                $arr_mail_path['core_mail'] = $this->translations_informations[$this->type_selected]['dir'];\n            } else {\n                $arr_mail_path['core_mail'] = $this->translations_informations[$this->type_selected]['override']['dir'];\n            }\n        }\n\n        if (Tools::getValue('module_mail')) {\n            $arr_mail_content['module_mail'] = Tools::getValue('module_mail');\n\n            // Get path of directory for find a good path of translation file\n            if (!$this->theme_selected) {\n                $arr_mail_path['module_mail'] = $this->translations_informations['modules']['dir'] . '{module}/mails/' . $this->lang_selected->iso_code . '/';\n            } else {\n                $arr_mail_path['module_mail'] = $this->translations_informations['modules']['override']['dir'] . '{module}/mails/' . $this->lang_selected->iso_code . '/';\n            }\n        }\n\n        // Save each mail content\n        foreach ($arr_mail_content as $group_name => $all_content) {\n            foreach ($all_content as $type_content => $mails) {\n                if (!in_array($type_content, self::$content_type_accepted)) {\n                    throw new PrestaShopException($this->trans('This %type_content% file extension is not accepted.', ['%type_content%' => $type_content], 'Admin.International.Notification'));\n                }\n\n                foreach ($mails as $mail_name => $content) {\n                    $module_name = false;\n                    $module_name_pipe_pos = stripos($mail_name, '|');\n                    if ($module_name_pipe_pos) {\n                        $module_name = substr($mail_name, 0, $module_name_pipe_pos);\n                        if (!Validate::isModuleName($module_name)) {\n                            throw new PrestaShopException($this->trans('Invalid module name \"%module%\"', ['%module%' => Tools::safeOutput($module_name)], 'Admin.International.Notification'));\n                        }\n                        $mail_name = substr($mail_name, $module_name_pipe_pos + 1);\n                        if (!Validate::isTplName($mail_name)) {\n                            throw new PrestaShopException($this->trans('Invalid mail name \"%mail%\"', ['%mail%' => Tools::safeOutput($mail_name)], 'Admin.International.Notification'));\n                        }\n                    }\n\n                    if ($type_content == 'html') {\n                        $content = Tools::htmlentitiesUTF8($content);\n                        $content = htmlspecialchars_decode($content);\n                        // replace correct end of line\n                        $content = str_replace(\"\\r\\n\", PHP_EOL, $content);\n                    }\n\n                    if (Validate::isCleanHTML($content)) {\n                        $path = $arr_mail_path[$group_name] ?? '';\n                        if ($module_name) {\n                            $path = str_replace('{module}', $module_name, $path);\n                        }\n                        if (!file_exists($path) && !mkdir($path, FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                            throw new PrestaShopException($this->trans('Directory \"%folder%\" cannot be created', ['%folder%' => dirname($path)], 'Admin.International.Notification'));\n                        }\n\n                        if ($type_content == 'tpl') {\n                            preg_match('/{\\s*[^$]+/s', $content, $matches);\n                            if (!empty($matches)) {\n                                throw new PrestaShopException($this->trans('Your email translations contain some invalid HTML and cannot be saved. Please check your content.', [], 'Admin.International.Notification'));\n                            }\n                        }\n\n                        file_put_contents($path . $mail_name . '.' . $type_content, $content);\n                    } else {\n                        throw new PrestaShopException($this->trans('Your HTML email templates cannot contain JavaScript code.', [], 'Admin.International.Notification'));\n                    }\n                }\n            }\n        }\n\n        // Update subjects\n        $array_subjects = [];\n        if (($subjects = Tools::getValue('subject')) && is_array($subjects)) {\n            $array_subjects['core_and_modules'] = ['translations' => [], 'path' => ($arr_mail_path['core_mail'] ?? '') . 'lang.php'];\n            foreach ($subjects as $subject_translation) {\n                $array_subjects['core_and_modules']['translations'] = array_merge($array_subjects['core_and_modules']['translations'], $subject_translation);\n            }\n        }\n        if (!empty($array_subjects)) {\n            foreach ($array_subjects as $infos) {\n                $this->writeSubjectTranslationFile($infos['translations'], $infos['path']);\n            }\n        }\n\n        if (Tools::isSubmit('submitTranslationsMailsAndStay')) {\n            $this->redirect(true);\n        } else {\n            $this->redirect();\n        }\n    }\n\n    /**\n     * Include file $dir/$file and return the var $var declared in it.\n     * This create the file if not exists.\n     *\n     * return array : translations\n     */\n    public function fileExists()\n    {\n        $var = $this->translations_informations[$this->type_selected]['var'];\n        $dir = $this->translations_informations[$this->type_selected]['dir'];\n        $file = $this->translations_informations[$this->type_selected]['file'];\n\n        $$var = [];\n        if (!Tools::file_exists_cache($dir)) {\n            if (!mkdir($dir, 0700)) {\n                throw new PrestaShopException('Directory ' . $dir . ' cannot be created.');\n            }\n        }\n        if (!Tools::file_exists_cache($dir . DIRECTORY_SEPARATOR . $file)) {\n            if (!file_put_contents($dir . '/' . $file, \"<?php\\n\\nglobal \\$\" . $var . \";\\n\\$\" . $var . \" = array();\\n\\n?>\")) {\n                throw new PrestaShopException('File \"' . $file . '\" doesn\\'t exists and cannot be created in ' . $dir);\n            }\n        }\n        if (!is_writable($dir . DIRECTORY_SEPARATOR . $file)) {\n            $this->displayWarning($this->trans('This file must be writable:', [], 'Admin.Notifications.Error') . ' ' . $dir . '/' . $file);\n        }\n        include $dir . DIRECTORY_SEPARATOR . $file;\n\n        return $$var;\n    }\n\n    public function displayToggleButton($closed = false)\n    {\n        $str_output = '\n        <script type=\"text/javascript\">';\n        if (Tools::getValue('type') == 'mails') {\n            $str_output .= '$(document).ready(function(){\n                toggleDiv(\\'' . $this->type_selected . '_div\\'); toggleButtonValue(this.id, openAll, closeAll);\n                });';\n        }\n        $str_output .= '\n            var openAll = \\'' . html_entity_decode($this->trans('Expand all fieldsets', [], 'Admin.International.Feature'), ENT_NOQUOTES, 'UTF-8') . '\\';\n            var closeAll = \\'' . html_entity_decode($this->trans('Close all fieldsets', [], 'Admin.International.Feature'), ENT_NOQUOTES, 'UTF-8') . '\\';\n        </script>\n        <button type=\"button\" class=\"btn btn-default\" id=\"buttonall\" data-status=\"open\" onclick=\"toggleDiv(\\'' . $this->type_selected . '_div\\', $(this).data(\\'status\\')); toggleButtonValue(this.id, openAll, closeAll);\"><i class=\"process-icon-compress\"></i> <span>' . $this->trans('Close all fieldsets', [], 'Admin.International.Feature') . '</span></button>';\n\n        return $str_output;\n    }\n\n    public function displayLimitPostWarning($count)\n    {\n        $return = [];\n        if ((ini_get('suhosin.post.max_vars') && ini_get('suhosin.post.max_vars') < $count) || (ini_get('suhosin.request.max_vars') && ini_get('suhosin.request.max_vars') < $count)) {\n            $return['error_type'] = 'suhosin';\n            $return['post.max_vars'] = ini_get('suhosin.post.max_vars');\n            $return['request.max_vars'] = ini_get('suhosin.request.max_vars');\n            $return['needed_limit'] = $count + 100;\n        } elseif (ini_get('max_input_vars') && ini_get('max_input_vars') < $count) {\n            $return['error_type'] = 'conf';\n            $return['max_input_vars'] = ini_get('max_input_vars');\n            $return['needed_limit'] = $count + 100;\n        }\n\n        return $return;\n    }\n\n    /**\n     * Find sentence which use %d, %s, %%, %1$d, %1$s...\n     *\n     * @param string $key English sentence\n     *\n     * @return string|bool List of matches\n     */\n    public function checkIfKeyUseSprintf($key)\n    {\n        if (preg_match_all('#(?:%%|%(?:[0-9]+\\$)?[+-]?(?:[ 0]|\\'.)?-?[0-9]*(?:\\.[0-9]+)?[bcdeufFosxX])#', $key, $matches)) {\n            return implode(', ', $matches[0]);\n        }\n\n        return false;\n    }\n\n    /**\n     * This method generate the form for front translations.\n     */\n    public function initFormFront()\n    {\n        if (!$this->theme_exists(Tools::getValue('theme'))) {\n            $this->errors[] = $this->trans('Invalid theme \"%theme%\"', ['%theme%' => Tools::getValue('theme')], 'Admin.International.Notification');\n\n            return;\n        }\n\n        $missing_translations_front = [];\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n\n        /* List templates to parse */\n        $files_by_directory = $this->getFileToParseByTypeTranslation();\n        $count = 0;\n        $tabs_array = [];\n        foreach ($files_by_directory as $file_type => $root_directory) {\n            foreach ($root_directory as $dir => $files) {\n                $prefix = '';\n\n                foreach ($files as $file) {\n                    if (preg_match('/^(.*).(tpl|php)$/', $file) && (Tools::file_exists_cache($file_path = $dir . $file))) {\n                        $prefix_key = $prefix . substr(basename($file), 0, -4);\n                        $new_lang = [];\n\n                        // Get content for this file\n                        $content = file_get_contents($file_path);\n\n                        // Parse this content\n                        $matches = $this->userParseFile($content, $this->type_selected, $file_type);\n\n                        /* Get string translation */\n                        foreach ($matches as $key) {\n                            if (empty($key)) {\n                                $this->errors[] = $this->trans('Empty string found, please edit: \"%file%\"', ['%file%' => $file_path], 'Admin.International.Notification');\n                                $new_lang[$key] = '';\n                            } else {\n                                // Caution ! front has underscore between prefix key and md5, back has not\n                                if (isset($GLOBALS[$name_var][$prefix_key . '_' . md5($key)])) {\n                                    $new_lang[$key]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . '_' . md5($key)], ENT_COMPAT, 'UTF-8'));\n                                } else {\n                                    if (!isset($new_lang[$key]['trad'])) {\n                                        $new_lang[$key]['trad'] = '';\n                                        if (!isset($missing_translations_front[$prefix_key])) {\n                                            $missing_translations_front[$prefix_key] = 1;\n                                        } else {\n                                            ++$missing_translations_front[$prefix_key];\n                                        }\n                                    }\n                                }\n                                $new_lang[$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                            }\n                        }\n\n                        if (isset($tabs_array[$prefix_key])) {\n                            $tabs_array[$prefix_key] = array_merge($tabs_array[$prefix_key], $new_lang);\n                        } else {\n                            $tabs_array[$prefix_key] = $new_lang;\n                        }\n\n                        $count += count($new_lang);\n                    }\n                }\n            }\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'missing_translations' => $missing_translations_front,\n            'count' => $count,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'limit_warning' => $this->displayLimitPostWarning($count),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * This method generate the form for back translations.\n     */\n    public function initFormBack()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n        $missing_translations_back = [];\n\n        // Get all types of file (PHP, TPL...) and a list of files to parse by folder\n        $files_per_directory = $this->getFileToParseByTypeTranslation();\n\n        //Parse SF2 php files\n        $regexSf2Php = [\n            '/->trans\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?[\\[|array\\(](.*)[\\]|\\)])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n            '/->transchoice\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?(.*))(,\\s*?[\\[|array\\(](.*)[\\]|\\)])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n        ];\n\n        $tabs_array = [];\n        foreach ($files_per_directory['php-sf2'] as $dir => $files) {\n            foreach ($files as $file) {\n                // Get content for this file\n                $content = file_get_contents($dir . $file);\n                if (!$content) {\n                    continue;\n                }\n\n                // Parse this content\n                foreach ($regexSf2Php as $reg) {\n                    preg_match_all($reg, $content, $matches);\n                    foreach ($matches[0] as $key => $match) {\n                        $domainKey = strpos($match, 'trans(') !== false ? 8 : 10;\n                        $stringToTranslate = $matches[2][$key];\n                        $prefix_key = $matches[$domainKey][$key];\n\n                        if ($prefix_key && $stringToTranslate) {\n                            if (isset($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)])) {\n                                $tabs_array[$prefix_key][$stringToTranslate]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)], ENT_COMPAT, 'UTF-8'));\n                            } else {\n                                if (!isset($tabs_array[$prefix_key][$stringToTranslate]['trad'])) {\n                                    $tabs_array[$prefix_key][$stringToTranslate]['trad'] = '';\n                                    if (!isset($missing_translations_back[$prefix_key])) {\n                                        $missing_translations_back[$prefix_key] = 1;\n                                    } else {\n                                        ++$missing_translations_back[$prefix_key];\n                                    }\n                                }\n                            }\n                            $tabs_array[$prefix_key][$stringToTranslate]['use_sprintf'] = $this->checkIfKeyUseSprintf($stringToTranslate);\n                        }\n                    }\n                }\n            }\n        }\n\n        //Parse SF2/Twig files\n        $regexSf2Tpl = [\n            '/trans\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?[\\{\\[](.*)[\\}\\]])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n            '/transchoice\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?(.*))(,\\s*?[\\{\\[](.*)[\\}\\]])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n        ];\n\n        foreach ($files_per_directory['tpl-sf2'] as $file) {\n            // Get content for this file\n            $content = file_get_contents(_PS_ROOT_DIR_ . '/src/PrestaShopBundle/Resources/views/' . $file);\n            if (!$content) {\n                continue;\n            }\n\n            // Parse this content\n            foreach ($regexSf2Tpl as $reg) {\n                preg_match_all($reg, $content, $matches);\n                foreach ($matches[0] as $key => $match) {\n                    $domainKey = strpos($match, 'trans(') !== false ? 8 : 10;\n                    $stringToTranslate = $matches[2][$key];\n                    $prefix_key = $matches[$domainKey][$key];\n\n                    if ($prefix_key && $stringToTranslate) {\n                        if (isset($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)])) {\n                            $tabs_array[$prefix_key][$stringToTranslate]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)], ENT_COMPAT, 'UTF-8'));\n                        } else {\n                            if (!isset($tabs_array[$prefix_key][$stringToTranslate]['trad'])) {\n                                $tabs_array[$prefix_key][$stringToTranslate]['trad'] = '';\n                                if (!isset($missing_translations_back[$prefix_key])) {\n                                    $missing_translations_back[$prefix_key] = 1;\n                                } else {\n                                    ++$missing_translations_back[$prefix_key];\n                                }\n                            }\n                        }\n                        $tabs_array[$prefix_key][$stringToTranslate]['use_sprintf'] = $this->checkIfKeyUseSprintf($stringToTranslate);\n                    }\n                }\n            }\n        }\n\n        //Parse ps PHP files\n        foreach ($files_per_directory['php'] as $dir => $files) {\n            foreach ($files as $file) {\n                // Check if is a PHP file and if the override file exists\n                if (preg_match('/^(.*)\\.php$/', $file) && Tools::file_exists_cache($file_path = $dir . $file) && !in_array($file, self::$ignore_folder)) {\n                    $prefix_key = basename($file);\n                    // -4 becomes -14 to remove the ending \"Controller.php\" from the filename\n                    if (strpos($file, 'Controller.php') !== false) {\n                        $prefix_key = basename(substr($file, 0, -14));\n                    } elseif (strpos($file, 'Helper') !== false) {\n                        $prefix_key = 'Helper';\n                    }\n\n                    if ($prefix_key == 'Admin') {\n                        $prefix_key = 'AdminController';\n                    }\n\n                    if ($prefix_key == 'PaymentModule.php') {\n                        $prefix_key = 'PaymentModule';\n                    }\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected, 'php');\n\n                    foreach ($matches as $key) {\n                        // Caution ! front has underscore between prefix key and md5, back has not\n                        if (isset($GLOBALS[$name_var][$prefix_key . md5($key)])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($key)], ENT_COMPAT, 'UTF-8'));\n                        } else {\n                            if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                                $tabs_array[$prefix_key][$key]['trad'] = '';\n                                if (!isset($missing_translations_back[$prefix_key])) {\n                                    $missing_translations_back[$prefix_key] = 1;\n                                } else {\n                                    ++$missing_translations_back[$prefix_key];\n                                }\n                            }\n                        }\n                        $tabs_array[$prefix_key][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n\n        foreach ($files_per_directory['specific'] as $dir => $files) {\n            foreach ($files as $file) {\n                if (Tools::file_exists_cache($file_path = $dir . $file) && !in_array($file, self::$ignore_folder)) {\n                    $prefix_key = 'index';\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected, 'specific');\n\n                    foreach ($matches as $key) {\n                        // Caution ! front has underscore between prefix key and md5, back has not\n                        if (isset($GLOBALS[$name_var][$prefix_key . md5($key)])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($key)], ENT_COMPAT, 'UTF-8'));\n                        } else {\n                            if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                                $tabs_array[$prefix_key][$key]['trad'] = '';\n                                if (!isset($missing_translations_back[$prefix_key])) {\n                                    $missing_translations_back[$prefix_key] = 1;\n                                } else {\n                                    ++$missing_translations_back[$prefix_key];\n                                }\n                            }\n                        }\n                        $tabs_array[$prefix_key][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n\n        foreach ($files_per_directory['tpl'] as $dir => $files) {\n            foreach ($files as $file) {\n                if (preg_match('/^(.*).tpl$/', $file) && Tools::file_exists_cache($file_path = $dir . $file)) {\n                    // get controller name instead of file name\n                    $prefix_key = Tools::toCamelCase(str_replace(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR . 'themes', '', $file_path), true);\n                    $pos = strrpos($prefix_key, DIRECTORY_SEPARATOR);\n                    $tmp = substr($prefix_key, 0, $pos);\n\n                    if (preg_match('#controllers#', $tmp)) {\n                        $parent_class = explode(DIRECTORY_SEPARATOR, str_replace('/', DIRECTORY_SEPARATOR, $tmp));\n                        $override = array_search('override', $parent_class);\n                        if ($override !== false) {\n                            // case override/controllers/admin/templates/controller_name\n                            $prefix_key = 'Admin' . ucfirst($parent_class[$override + 4]);\n                        } else {\n                            // case admin_name/themes/theme_name/template/controllers/controller_name\n                            $key = array_search('controllers', $parent_class);\n                            $prefix_key = 'Admin' . ucfirst($parent_class[$key + 1]);\n                        }\n                    } else {\n                        $prefix_key = 'Admin' . ucfirst(substr($tmp, strrpos($tmp, DIRECTORY_SEPARATOR) + 1, $pos));\n                    }\n\n                    // Adding list, form, option in Helper Translations\n                    $list_prefix_key = ['AdminHelpers', 'AdminList', 'AdminView', 'AdminOptions', 'AdminForm',\n                        'AdminCalendar', 'AdminTree', 'AdminUploader', 'AdminDataviz', 'AdminKpi', 'AdminModule_list', 'AdminModulesList',\n                    ];\n                    if (in_array($prefix_key, $list_prefix_key)) {\n                        $prefix_key = 'Helper';\n                    }\n\n                    // Adding the folder backup/download/ in AdminBackup Translations\n                    if ($prefix_key == 'AdminDownload') {\n                        $prefix_key = 'AdminBackup';\n                    }\n\n                    // use the prefix \"AdminController\" (like old php files 'header', 'footer.inc', 'index', 'login', 'password', 'functions'\n                    if ($prefix_key == 'Admin' || $prefix_key == 'AdminTemplate') {\n                        $prefix_key = 'AdminController';\n                    }\n\n                    $new_lang = [];\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected, 'tpl');\n\n                    /* Get string translation for each tpl file */\n                    foreach ($matches as $english_string) {\n                        if (empty($english_string)) {\n                            $this->errors[] = $this->trans('There is an error in template, an empty string has been found. Please edit: \"%file%\"', ['%file%' => $file_path], 'Admin.International.Notification');\n                            $new_lang[$english_string] = '';\n                        } else {\n                            $trans_key = $prefix_key . md5($english_string);\n\n                            if (isset($GLOBALS[$name_var][$trans_key])) {\n                                $new_lang[$english_string]['trad'] = html_entity_decode($GLOBALS[$name_var][$trans_key], ENT_COMPAT, 'UTF-8');\n                            } else {\n                                if (!isset($new_lang[$english_string]['trad'])) {\n                                    $new_lang[$english_string]['trad'] = '';\n                                    if (!isset($missing_translations_back[$prefix_key])) {\n                                        $missing_translations_back[$prefix_key] = 1;\n                                    } else {\n                                        ++$missing_translations_back[$prefix_key];\n                                    }\n                                }\n                            }\n                            $new_lang[$english_string]['use_sprintf'] = $this->checkIfKeyUseSprintf($key ?? '');\n                        }\n                    }\n                    if (isset($tabs_array[$prefix_key])) {\n                        $tabs_array[$prefix_key] = array_merge($tabs_array[$prefix_key], $new_lang);\n                    } else {\n                        $tabs_array[$prefix_key] = $new_lang;\n                    }\n                }\n            }\n        }\n\n        // count will contain the number of expressions of the page\n        $count = 0;\n        foreach ($tabs_array as $array) {\n            $count += count($array);\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => $count,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'limit_warning' => $this->displayLimitPostWarning($count),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n            'missing_translations' => $missing_translations_back,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Check if directory and file exist and return an list of modules.\n     *\n     * @return array List of modules\n     *\n     * @throws PrestaShopException\n     */\n    public function getListModules($withInstance = false)\n    {\n        if (!Tools::file_exists_cache($this->translations_informations['modules']['dir'])) {\n            throw new PrestaShopException($this->trans('Fatal error: The module directory does not exist.', [], 'Admin.Notifications.Error') . '(' . $this->translations_informations['modules']['dir'] . ')');\n        }\n        if (!is_writable($this->translations_informations['modules']['dir'])) {\n            throw new PrestaShopException($this->trans('The module directory must be writable.', [], 'Admin.International.Notification'));\n        }\n\n        $module_instances = [];\n        // Get all module which are installed for to have a minimum of POST\n        $modules = Module::getModulesInstalled();\n        if ($withInstance) {\n            foreach ($modules as $module) {\n                if ($tmp_instance = Module::getInstanceById((int) $module['id_module'])) {\n                    // We want to be able to sort modules by display name\n                    $module_instances[$tmp_instance->displayName] = $tmp_instance;\n                }\n            }\n            ksort($module_instances);\n\n            return $module_instances;\n        }\n\n        foreach ($modules as &$module) {\n            $module = $module['name'];\n        }\n\n        return $modules;\n    }\n\n    /**\n     * This method generate the form for errors translations.\n     */\n    public function initFormErrors()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n        $count_empty = [];\n\n        /* List files to parse */\n        $string_to_translate = [];\n        $file_by_directory = $this->getFileToParseByTypeTranslation();\n\n        if ($modules = $this->getListModules()) {\n            foreach ($modules as $module) {\n                if (is_dir(_PS_MODULE_DIR_ . $module) && !in_array($module, self::$ignore_folder)) {\n                    $file_by_directory['php'] = array_merge($file_by_directory['php'], $this->listFiles(_PS_MODULE_DIR_ . $module . '/', [], 'php'));\n                }\n            }\n        }\n\n        foreach ($file_by_directory['php'] as $dir => $files) {\n            foreach ($files as $file) {\n                if (preg_match('/\\.php$/', $file) && Tools::file_exists_cache($file_path = $dir . $file) && !in_array($file, self::$ignore_folder)) {\n                    if (!filesize($file_path)) {\n                        continue;\n                    }\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected);\n\n                    foreach ($matches as $key) {\n                        if (array_key_exists(md5($key), $GLOBALS[$name_var])) {\n                            $string_to_translate[$key]['trad'] = html_entity_decode($GLOBALS[$name_var][md5($key)], ENT_COMPAT, 'UTF-8');\n                        } else {\n                            $string_to_translate[$key]['trad'] = '';\n                            if (!isset($count_empty[$key])) {\n                                $count_empty[$key] = 1;\n                            }\n                        }\n                        $string_to_translate[$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n\n        //adding sf2 form translations\n        $sf2_loader = new Symfony\\Component\\Translation\\Loader\\XliffFileLoader();\n\n        try {\n            $sf2_trans = $sf2_loader->load(_PS_VENDOR_DIR_ . '/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.' . $this->lang_selected->iso_code . '.xlf', $this->lang_selected->iso_code);\n        } catch (\\Exception $e) {\n            $sf2_trans = $sf2_loader->load(_PS_VENDOR_DIR_ . '/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf', $this->lang_selected->iso_code);\n        }\n\n        foreach ($sf2_trans->all()['messages'] as $k => $v) {\n            if (array_key_exists(md5($k), $GLOBALS[$name_var])) {\n                $string_to_translate[$k]['trad'] = html_entity_decode($GLOBALS[$name_var][md5($k)], ENT_COMPAT, 'UTF-8');\n            } else {\n                $string_to_translate[$k]['trad'] = '';\n                if (!isset($count_empty[$k])) {\n                    $count_empty[$k] = 1;\n                }\n            }\n            $string_to_translate[$k]['use_sprintf'] = false;\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => count($string_to_translate),\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'limit_warning' => $this->displayLimitPostWarning(count($string_to_translate)),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'errorsArray' => $string_to_translate,\n            'missing_translations' => $count_empty,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_errors.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * This method generate the form for fields translations.\n     */\n    public function initFormFields()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n        $missing_translations_fields = [];\n        $class_array = [];\n        $tabs_array = [];\n        $count = 0;\n\n        $files_by_directory = $this->getFileToParseByTypeTranslation();\n\n        foreach ($files_by_directory['php'] as $dir => $files) {\n            foreach ($files as $file) {\n                $exclude_files = ['index.php', 'PrestaShopAutoload.php', 'StockManagerInterface.php',\n                    'TaxManagerInterface.php', 'WebserviceOutputInterface.php', 'WebserviceSpecificManagementInterface.php',\n                ];\n\n                if (!preg_match('/\\.php$/', $file) || in_array($file, $exclude_files)) {\n                    continue;\n                }\n\n                $class_name = substr($file, 0, -4);\n                if (!is_subclass_of($class_name . 'Core', 'ObjectModel')) {\n                    continue;\n                }\n                $class_array[$class_name] = call_user_func([$class_name, 'getValidationRules'], $class_name);\n            }\n        }\n        foreach ($class_array as $prefix_key => $rules) {\n            if (isset($rules['validate'])) {\n                foreach ($rules['validate'] as $key => $value) {\n                    if (isset($GLOBALS[$name_var][$prefix_key . '_' . md5($key)])) {\n                        $tabs_array[$prefix_key][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$prefix_key . '_' . md5($key)], ENT_COMPAT, 'UTF-8');\n                        ++$count;\n                    } else {\n                        if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = '';\n                            if (!isset($missing_translations_fields[$prefix_key])) {\n                                $missing_translations_fields[$prefix_key] = 1;\n                            } else {\n                                ++$missing_translations_fields[$prefix_key];\n                            }\n                            ++$count;\n                        }\n                    }\n                }\n            }\n            if (isset($rules['validateLang'])) {\n                foreach ($rules['validateLang'] as $key => $value) {\n                    if (isset($GLOBALS[$name_var][$prefix_key . '_' . md5($key)])) {\n                        $tabs_array[$prefix_key][$key]['trad'] = '';\n                        if (array_key_exists($prefix_key . '_' . md5(addslashes($key)), $GLOBALS[$name_var])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$prefix_key . '_' . md5(addslashes($key))], ENT_COMPAT, 'UTF-8');\n                        }\n\n                        ++$count;\n                    } else {\n                        if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = '';\n                            if (!isset($missing_translations_fields[$prefix_key])) {\n                                $missing_translations_fields[$prefix_key] = 1;\n                            } else {\n                                ++$missing_translations_fields[$prefix_key];\n                            }\n                            ++$count;\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => $count,\n            'limit_warning' => $this->displayLimitPostWarning($count),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'missing_translations' => $missing_translations_fields,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Get each informations for each mails found in the folder $dir.\n     *\n     * @since 1.4.0.14\n     *\n     * @param string $dir\n     * @param string $group_name\n     *\n     * @return array|false\n     */\n    public function getMailFiles($dir, $group_name = 'mail')\n    {\n        $arr_return = [];\n        if (Language::getIdByIso('en')) {\n            $default_language = 'en';\n        } else {\n            $default_language = Language::getIsoById((int) Configuration::get('PS_LANG_DEFAULT'));\n        }\n        if (!$default_language || !Validate::isLanguageIsoCode($default_language)) {\n            return false;\n        }\n\n        // Very usefull to name input and textarea fields\n        $arr_return['group_name'] = $group_name;\n        $arr_return['empty_values'] = 0;\n        $arr_return['total_filled'] = 0;\n        $arr_return['directory'] = $dir;\n\n        // Get path for english mail directory\n        $dir_en = str_replace('/' . $this->lang_selected->iso_code . '/', '/' . $default_language . '/', $dir);\n\n        if (Tools::file_exists_cache($dir_en)) {\n            // Get all english files to compare with the language to translate\n            foreach (scandir($dir_en, SCANDIR_SORT_NONE) as $email_file) {\n                if (strripos($email_file, '.html') > 0 || strripos($email_file, '.txt') > 0) {\n                    $email_name = substr($email_file, 0, strripos($email_file, '.'));\n                    $type = substr($email_file, strripos($email_file, '.') + 1);\n                    if (!isset($arr_return['files'][$email_name])) {\n                        $arr_return['files'][$email_name] = [];\n                    }\n                    // $email_file is from scandir ($dir), so we already know that file exists\n                    $arr_return['files'][$email_name][$type]['en'] = $this->getMailContent($dir_en, $email_file);\n\n                    // check if the file exists in the language to translate\n                    if (Tools::file_exists_cache($dir . '/' . $email_file)) {\n                        $arr_return['files'][$email_name][$type][$this->lang_selected->iso_code] = $this->getMailContent($dir, $email_file);\n                        ++$this->total_expression;\n                    } else {\n                        $arr_return['files'][$email_name][$type][$this->lang_selected->iso_code] = '';\n                    }\n\n                    if ($arr_return['files'][$email_name][$type][$this->lang_selected->iso_code] == '') {\n                        ++$arr_return['empty_values'];\n                    } else {\n                        ++$arr_return['total_filled'];\n                    }\n                }\n            }\n        } else {\n            $this->warnings[] = $this->trans(\n                'A mail directory exists for the \"%iso_code%\" language, but not for the default language (%language%) in %folder%',\n                ['%iso_code%' => $this->lang_selected->iso_code, '%folder%' => str_replace(_PS_ROOT_DIR_, '', dirname($dir)), '%language%' => $default_language],\n                'Admin.International.Notification'\n            );\n        }\n\n        return $arr_return;\n    }\n\n    /**\n     * Get content of the mail file.\n     *\n     * @since 1.4.0.14\n     *\n     * @param string $dir\n     * @param string $file\n     *\n     * @return string|false\n     */\n    protected function getMailContent($dir, $file)\n    {\n        $content = file_get_contents($dir . '/' . $file);\n\n        if (Tools::strlen($content) === 0) {\n            $content = '';\n        }\n\n        return $content;\n    }\n\n    /**\n     * Display mails in html format.\n     * This was create for factorize the html displaying.\n     *\n     * @since 1.4.0.14\n     *\n     * @param array $mails\n     * @param array $all_subject_mail\n     * @param Language $obj_lang\n     * @param string $id_html Use for set html id attribute for the block\n     * @param string $title Set the title for the block\n     * @param string|bool $name_for_module Is not false define add a name for distinguish mails module\n     *\n     * @return string\n     */\n    protected function displayMailContent($mails, $all_subject_mail, $obj_lang, $id_html, $title, $name_for_module = false)\n    {\n        $str_return = '';\n        $group_name = 'mail';\n        if (array_key_exists('group_name', $mails)) {\n            $group_name = $mails['group_name'];\n        }\n\n        if ($mails['empty_values'] == 0) {\n            $translation_missing_badge_type = 'badge-success';\n        } else {\n            $translation_missing_badge_type = 'badge-danger';\n        }\n        $str_return .= '<div class=\"mails_field\">\n            <h4>\n            <span class=\"badge\">' . ((int) $mails['empty_values'] + (int) $mails['total_filled']) . ' <i class=\"icon-envelope-o\"></i></span>\n            <a href=\"javascript:void(0);\" onclick=\"$(\\'#' . $id_html . '\\').slideToggle();\">' . $title . '</a>\n            <span class=\"pull-right badge ' . $translation_missing_badge_type . '\">' . $mails['empty_values'] . ' ' . $this->trans('missing translation(s)', [], 'Admin.International.Notification') . '</span>\n            </h4>\n            <div name=\"mails_div\" id=\"' . $id_html . '\" class=\"panel-group\">';\n\n        if (!empty($mails['files'])) {\n            $topic_already_displayed = [];\n            foreach ($mails['files'] as $mail_name => $mail_files) {\n                $str_return .= '<div class=\"panel translations-email-panel\">';\n                $str_return .= '<a href=\"#' . $id_html . '-' . $mail_name . '\" class=\"panel-title\" data-toggle=\"collapse\" data-parent=\"#' . $id_html . '\" >' . $mail_name . ' <i class=\"icon-caret-down\"></i> </a>';\n                $str_return .= '<div id=\"' . $id_html . '-' . $mail_name . '\" class=\"email-collapse panel-collapse collapse\">';\n                if (array_key_exists('html', $mail_files) || array_key_exists('txt', $mail_files)) {\n                    if (array_key_exists($mail_name, $all_subject_mail)) {\n                        foreach ($all_subject_mail[$mail_name] as $subject_mail) {\n                            $subject_key = 'subject[' . Tools::htmlentitiesUTF8($group_name) . '][' . Tools::htmlentitiesUTF8($subject_mail) . ']';\n                            if (in_array($subject_key, $topic_already_displayed)) {\n                                continue;\n                            }\n                            $topic_already_displayed[] = $subject_key;\n                            $value_subject_mail = isset($mails['subject'][$subject_mail]) ? $mails['subject'][$subject_mail] : '';\n                            $str_return .= '\n                            <div class=\"label-subject row\">\n                                <label class=\"control-label col-lg-3\">' . $this->trans('Email subject', [], 'Admin.International.Feature');\n                            if (isset($value_subject_mail['use_sprintf']) && $value_subject_mail['use_sprintf']) {\n                                $str_return .= '<span class=\"useSpecialSyntax\" title=\"' . $this->trans('This expression uses a special syntax:', [], 'Admin.International.Notification') . ' ' . $value_subject_mail['use_sprintf'] . '\">\n                                    <i class=\"icon-exclamation-triangle\"></i>\n                                </span>';\n                            }\n                            $str_return .= '</label><div class=\"col-lg-9\">';\n                            if (isset($value_subject_mail['trad']) && $value_subject_mail['trad']) {\n                                $str_return .= '<input class=\"form-control\" type=\"text\" name=\"subject[' . Tools::htmlentitiesUTF8($group_name) . '][' . Tools::htmlentitiesUTF8($subject_mail) . ']\" value=\"' . $value_subject_mail['trad'] . '\" />';\n                            } else {\n                                $str_return .= '<input class=\"form-control\" type=\"text\" name=\"subject[' . Tools::htmlentitiesUTF8($group_name) . '][' . Tools::htmlentitiesUTF8($subject_mail) . ']\" value=\"\" />';\n                            }\n                            $str_return .= '<p class=\"help-block\">' . stripcslashes($subject_mail) . '</p>';\n                            $str_return .= '</div></div>';\n                        }\n                    } else {\n                        $str_return .= '\n                            <hr><div class=\"alert alert-info\">'\n                            . $this->trans('No Subject was found for %mail_name% in the database.', ['%mail_name%' => $mail_name], 'Admin.International.Notification')\n                            . '</div>';\n                    }\n                    // tab menu\n                    $str_return .= '<hr><ul class=\"nav nav-pills\">\n                        <li class=\"active\"><a href=\"#' . $mail_name . '-html\" data-toggle=\"tab\">' . $this->trans('View HTML version', [], 'Admin.International.Feature') . '</a></li>\n                        <li><a href=\"#' . $mail_name . '-editor\" data-toggle=\"tab\">' . $this->trans('Edit HTML version', [], 'Admin.International.Feature') . '</a></li>\n                        <li><a href=\"#' . $mail_name . '-text\" data-toggle=\"tab\">' . $this->trans('View/Edit TXT version', [], 'Admin.International.Feature') . '</a></li>\n                        </ul>';\n                    // tab-content\n                    $str_return .= '<div class=\"tab-content\">';\n\n                    $base_uri = str_replace(_PS_ROOT_DIR_, __PS_BASE_URI__, $mails['directory']);\n                    $base_uri = str_replace('//', '/', $base_uri);\n                    $url_mail = $base_uri . $mail_name . '.html';\n\n                    $mail_files_html = empty($mail_files['html']) ? false : $mail_files['html'];\n                    $str_return .= '<div class=\"tab-pane active\" id=\"' . $mail_name . '-html\">';\n                    $str_return .= $this->displayMailBlockHtml($mail_files_html, $obj_lang->iso_code, $url_mail, $mail_name, $group_name, $name_for_module);\n                    $str_return .= '</div>';\n\n                    $mail_files_txt = empty($mail_files['txt']) ? false : $mail_files['txt'];\n                    $str_return .= '<div class=\"tab-pane\" id=\"' . $mail_name . '-text\">';\n                    $str_return .= $this->displayMailBlockTxt($mail_files_txt, $obj_lang->iso_code, $mail_name, $group_name, $name_for_module);\n                    $str_return .= '</div>';\n\n                    $str_return .= '<div class=\"tab-pane\" id=\"' . $mail_name . '-editor\">';\n                    $str_return .= $this->displayMailEditor($mail_files_html, $obj_lang->iso_code, $mail_name, $group_name, $name_for_module);\n                    $str_return .= '</div>';\n\n                    $str_return .= '</div>';\n                    $str_return .= '</div><!--end .panel-collapse -->';\n                    $str_return .= '</div><!--end .panel -->';\n                }\n            }\n        } else {\n            $str_return .= '<p class=\"error\">\n                ' . $this->trans('There was a problem getting the mail files.', [], 'Admin.International.Notification') . '<br>\n                ' . $this->trans('English language files must exist in %folder% folder', [\n                '%folder%' => '<em>' . preg_replace('@/[a-z]{2}(/?)$@', '/en$1', $mails['directory']) . '</em>',\n            ], 'Admin.International.Notification') . '\n            </p>';\n        }\n\n        $str_return .= '</div><!-- #' . $id_html . ' --></div><!-- end .mails_field -->';\n\n        return $str_return;\n    }\n\n    /**\n     * Just build the html structure for display txt mails.\n     *\n     * @since 1.4.0.14\n     *\n     * @param array $content With english and language needed contents\n     * @param string $lang ISO code of the needed language\n     * @param string $mail_name Name of the file to translate (same for txt and html files)\n     * @param string $group_name group name allow to distinguish each block of mail\n     * @param string|bool $name_for_module Is not false define add a name for distinguish mails module\n     *\n     * @return string\n     */\n    protected function displayMailBlockTxt($content, $lang, $mail_name, $group_name, $name_for_module = false)\n    {\n        if (!empty($content)) {\n            $text_content = Tools::htmlentitiesUTF8(stripslashes(strip_tags($content[$lang])));\n        } else {\n            $text_content = '';\n        }\n\n        return '<div class=\"block-mail\" >\n                    <div class=\"mail-form\">\n                        <div><textarea class=\"rte noEditor\" name=\"' . $group_name . '[txt][' . ($name_for_module ? $name_for_module . '|' : '') . $mail_name . ']\">' . $text_content . '</textarea></div>\n                    </div>\n                </div>';\n    }\n\n    /**\n     * Just build the html structure for display html mails.\n     *\n     * @since 1.4.0.14\n     *\n     * @param array $content With english and language needed contents\n     * @param string $lang ISO code of the needed language\n     * @param string $url The html page and displaying an outline\n     * @param string $mail_name Name of the file to translate (same for txt and html files)\n     * @param string $group_name group name allow to distinguish each block of mail\n     * @param string|bool $name_for_module Is not false define add a name for distinguish mails module\n     *\n     * @return string\n     */\n    protected function displayMailBlockHtml($content, $lang, $url, $mail_name, $group_name, $name_for_module = false)\n    {\n        $title = [];\n\n        if (!empty($content)) {\n            $this->cleanMailContent($content, $lang, $title);\n        }\n\n        $name_for_module = $name_for_module ? $name_for_module . '|' : '';\n\n        return '<div class=\"block-mail\" >\n                    <div class=\"mail-form\">\n                        <div class=\"thumbnail email-html-frame\" data-email-src=\"' . $url . '\"></div>\n                    </div>\n                </div>';\n    }\n\n    protected function displayMailEditor($content, $lang, $mail_name, $group_name, $name_for_module = false)\n    {\n        $title = [];\n\n        if (!empty($content)) {\n            $this->cleanMailContent($content, $lang, $title);\n            $html_content = $content[$lang];\n        } else {\n            $html_content = '';\n        }\n\n        $name_for_module = $name_for_module ? $name_for_module . '|' : '';\n\n        return '<textarea class=\"rte-mail rte-mail-' . $mail_name . ' form-control\" data-rte=\"' . $mail_name . '\" name=\"' . $group_name . '[html][' . $name_for_module . $mail_name . ']\">' . $html_content . '</textarea>';\n    }\n\n    protected function cleanMailContent(&$content, $lang, &$title)\n    {\n        if (stripos($content[$lang], '<body')) {\n            $array_lang = $lang != 'en' ? ['en', $lang] : [$lang];\n            foreach ($array_lang as $language) {\n                $title[$language] = substr($content[$language], 0, stripos($content[$language], '<body'));\n                preg_match('#<title>([^<]+)</title>#Ui', $title[$language], $matches);\n                $title[$language] = empty($matches[1]) ? '' : $matches[1];\n            }\n        }\n        $content[$lang] = (isset($content[$lang]) ? Tools::htmlentitiesUTF8(stripslashes($content[$lang])) : '');\n    }\n\n    /**\n     * Check in each module if contains mails folder.\n     *\n     * @param bool $with_module_name\n     *\n     * @return array Array of modules which have mails\n     */\n    public function getModulesHasMails($with_module_name = false)\n    {\n        $arr_modules = [];\n        if (array_key_exists('dir', $this->translations_informations['modules'])) {\n            if ($modules_dir = scandir($this->translations_informations['modules']['dir'], SCANDIR_SORT_NONE)) {\n                foreach ($modules_dir as $module_dir) {\n                    if (!in_array($module_dir, self::$ignore_folder)) {\n                        $dir = false;\n                        if ($this->theme_selected && Tools::file_exists_cache($this->translations_informations['modules']['override']['dir'] . $module_dir . '/mails/')) {\n                            $dir = $this->translations_informations['modules']['override']['dir'] . $module_dir . '/';\n                        } elseif (Tools::file_exists_cache($this->translations_informations['modules']['dir'] . $module_dir . '/mails/')) {\n                            $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/';\n                        }\n                        if ($dir !== false) {\n                            if ($with_module_name) {\n                                $arr_modules[$module_dir] = $dir;\n                            } else {\n                                if ($this->theme_selected) {\n                                    $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/';\n                                }\n                                $arr_modules[$dir] = scandir($dir, SCANDIR_SORT_NONE);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $arr_modules;\n    }\n\n    /**\n     * Check in each module if contains pdf folder.\n     *\n     * @param bool $classes\n     *\n     * @return array Array of modules which have pdf\n     */\n    public function getModulesHasPDF($classes = false)\n    {\n        $arr_modules = [];\n        foreach (scandir($this->translations_informations['modules']['dir'], SCANDIR_SORT_NONE) as $module_dir) {\n            if (!in_array($module_dir, self::$ignore_folder)) {\n                $dir = false;\n                if ($classes) {\n                    if ($this->theme_selected && Tools::file_exists_cache($this->translations_informations['modules']['override']['dir'] . $module_dir . '/classes/')) {\n                        $dir = $this->translations_informations['modules']['override']['dir'] . $module_dir . '/classes/';\n                    } elseif (Tools::file_exists_cache($this->translations_informations['modules']['dir'] . $module_dir . '/classes/')) {\n                        $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/classes/';\n                    }\n                    if ($dir !== false) {\n                        $arr_modules[$dir] = scandir($dir, SCANDIR_SORT_NONE);\n                    }\n                } else {\n                    if ($this->theme_selected && Tools::file_exists_cache($this->translations_informations['modules']['override']['dir'] . $module_dir . '/pdf/')) {\n                        $dir = $this->translations_informations['modules']['override']['dir'] . $module_dir . '/pdf/';\n                    } elseif (Tools::file_exists_cache($this->translations_informations['modules']['dir'] . $module_dir . '/pdf/')) {\n                        $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/pdf/';\n                    }\n                    if ($dir !== false) {\n                        $arr_modules[$dir] = scandir($dir, SCANDIR_SORT_NONE);\n                    }\n                }\n            }\n        }\n\n        return $arr_modules;\n    }\n\n    protected function getTinyMCEForMails($iso_lang)\n    {\n        // TinyMCE\n        $iso_tiny_mce = (Tools::file_exists_cache(_PS_ROOT_DIR_ . '/js/tiny_mce/langs/' . $iso_lang . '.js') ? $iso_lang : 'en');\n        $ad = __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_);\n        //return false;\n        return '\n            <script type=\"text/javascript\">\n                var iso = \\'' . $iso_tiny_mce . '\\' ;\n                var pathCSS = \\'' . _THEME_CSS_DIR_ . '\\' ;\n                var ad = \\'' . $ad . '\\' ;\n            </script>\n            <script type=\"text/javascript\" src=\"' . __PS_BASE_URI__ . 'js/tiny_mce/tiny_mce.js\"></script>\n            <script type=\"text/javascript\" src=\"' . __PS_BASE_URI__ . 'js/admin/tinymce.inc.js\"></script>';\n    }\n\n    /**\n     * This method generate the form for mails translations.\n     *\n     * @param bool $no_display\n     *\n     * @return array|string\n     */\n    public function initFormMails($no_display = false)\n    {\n        $module_mails = [];\n\n        // get all mail subjects, this method parse each files in Prestashop !!\n        $subject_mail = [];\n\n        $modules_has_mails = $this->getModulesHasMails(true);\n\n        $files_by_directiories = $this->getFileToParseByTypeTranslation();\n\n        if (!$this->theme_selected || !@filemtime($this->translations_informations[$this->type_selected]['override']['dir'])) {\n            $this->copyMailFilesForAllLanguages();\n        }\n\n        foreach ($files_by_directiories['php'] as $dir => $files) {\n            if (!empty($files)) {\n                foreach ($files as $file) {\n                    // If file exist and is not in ignore_folder, in the next step we check if a folder or mail\n                    if (Tools::file_exists_cache($dir . $file) && !in_array($file, self::$ignore_folder)) {\n                        $subject_mail = $this->getSubjectMail($dir, $file, $subject_mail);\n                    }\n                }\n            }\n        }\n\n        // Get path of directory for find a good path of translation file\n        if ($this->theme_selected && @filemtime($this->translations_informations[$this->type_selected]['override']['dir'])) {\n            $i18n_dir = $this->translations_informations[$this->type_selected]['override']['dir'];\n        } else {\n            $i18n_dir = $this->translations_informations[$this->type_selected]['dir'];\n        }\n\n        $core_mails = $this->getMailFiles($i18n_dir, 'core_mail');\n        $core_mails['subject'] = $this->getSubjectMailContent($i18n_dir);\n\n        foreach ($modules_has_mails as $module_name => $module_path) {\n            $module_path = rtrim($module_path, '/');\n            $module_mails[$module_name] = $this->getMailFiles($module_path . '/mails/' . $this->lang_selected->iso_code . '/', 'module_mail');\n            $module_mails[$module_name]['subject'] = $core_mails['subject'];\n            $module_mails[$module_name]['display'] = $this->displayMailContent($module_mails[$module_name], $subject_mail, $this->lang_selected, Tools::strtolower($module_name), $module_name, $module_name);\n        }\n\n        if ($no_display) {\n            $empty = 0;\n            $total = 0;\n            $total += (int) $core_mails['total_filled'];\n            $empty += (int) $core_mails['empty_values'];\n            foreach ($module_mails as $mod_infos) {\n                $total += (int) $mod_infos['total_filled'];\n                $empty += (int) $mod_infos['empty_values'];\n            }\n\n            return ['total' => $total, 'empty' => $empty];\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'limit_warning' => $this->displayLimitPostWarning($this->total_expression),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tinyMCE' => $this->getTinyMCEForMails($this->lang_selected->iso_code),\n            'mail_content' => $this->displayMailContent($core_mails, $subject_mail, $this->lang_selected, 'core', $this->trans('Core emails', [], 'Admin.International.Feature')),\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'module_mails' => $module_mails,\n            'theme_name' => $this->theme_selected,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_mails.tpl';\n\n        return parent::renderView();\n    }\n\n    public function copyMailFilesForAllLanguages()\n    {\n        $current_theme = Tools::safeOutput($this->context->shop->theme->getName());\n        $languages = Language::getLanguages();\n\n        foreach ($languages as $key => $lang) {\n            $dir_to_copy_iso = [];\n            $files_to_copy_iso = [];\n            $current_iso_code = $lang['iso_code'];\n\n            $dir_to_copy_iso[] = _PS_MAIL_DIR_ . $current_iso_code . '/';\n\n            $modules_has_mails = $this->getModulesHasMails(true);\n            foreach ($modules_has_mails as $module_name => $module_path) {\n                if ($pos = strpos($module_path, '/modules')) {\n                    $dir_to_copy_iso[] = _PS_ROOT_DIR_ . substr($module_path, $pos) . 'mails/' . $current_iso_code . '/';\n                }\n            }\n\n            foreach ($dir_to_copy_iso as $dir) {\n                if (!is_dir($dir)) {\n                    continue;\n                }\n                $scanDir = scandir($dir, SCANDIR_SORT_NONE);\n                if (!$scanDir) {\n                    continue;\n                }\n                foreach ($scanDir as $file) {\n                    if (!in_array($file, self::$ignore_folder)) {\n                        $files_to_copy_iso[] = [\n                            'from' => $dir . $file,\n                            'to' => str_replace((strpos($dir, _PS_CORE_DIR_) !== false) ? _PS_CORE_DIR_ : _PS_ROOT_DIR_, _PS_ROOT_DIR_ . '/themes/' . $current_theme, $dir) . $file,\n                        ];\n                    }\n                }\n            }\n\n            foreach ($files_to_copy_iso as $file) {\n                if (!file_exists($file['to'])) {\n                    $content = file_get_contents($file['from']);\n\n                    $stack = [];\n                    $folder = dirname($file['to']);\n                    while (!is_dir($folder)) {\n                        $stack[] = $folder;\n                        $folder = dirname($folder);\n                    }\n                    while ($folder = array_pop($stack)) {\n                        mkdir($folder);\n                    }\n\n                    $success = file_put_contents($file['to'], $content);\n                    if ($success === false) {\n                        Tools::dieOrLog(sprintf('%s cannot be copied to %s', $file['from'], $file['to']), false);\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Get list of subjects of mails.\n     *\n     * @param string $dir\n     * @param string $file\n     * @param array $subject_mail\n     *\n     * @return array : list of subjects of mails\n     */\n    protected function getSubjectMail($dir, $file, $subject_mail)\n    {\n        $dir = rtrim($dir, '/');\n        // If is file and is not in ignore_folder\n        if (is_file($dir . '/' . $file) && !in_array($file, self::$ignore_folder) && preg_match('/\\.php$/', $file)) {\n            $content = file_get_contents($dir . '/' . $file);\n            $content = str_replace(\"\\n\", ' ', $content);\n\n            // Subject must match with a template, therefore we first grep the Mail::Send() function then the Mail::l() inside.\n            if (preg_match_all('/Mail::Send([^;]*);/si', $content, $tab)) {\n                for ($i = 0; isset($tab[1][$i]); ++$i) {\n                    $tab2 = explode(',', $tab[1][$i]);\n                    if (is_array($tab2) && isset($tab2[1])) {\n                        $template = trim(str_replace('\\'', '', $tab2[1]));\n                        foreach ($tab2 as $tab3) {\n                            if (preg_match('/Mail::l\\(\\'' . _PS_TRANS_PATTERN_ . '\\'\\)/Us', $tab3 . ')', $matches)) {\n                                if (!isset($subject_mail[$template])) {\n                                    $subject_mail[$template] = [];\n                                }\n                                if (!in_array($matches[1], $subject_mail[$template])) {\n                                    $subject_mail[$template][] = $matches[1];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } elseif (!in_array($file, self::$ignore_folder) && is_dir($dir . '/' . $file)) {\n            // Or if is folder, we scan folder for check if found in folder and subfolder\n            foreach (scandir($dir . '/' . $file, SCANDIR_SORT_NONE) as $temp) {\n                if ($temp[0] != '.') {\n                    $subject_mail = $this->getSubjectMail($dir . '/' . $file, $temp, $subject_mail);\n                }\n            }\n        }\n\n        return $subject_mail;\n    }\n\n    protected function writeSubjectTranslationFile($sub, $path)\n    {\n        if (!Tools::file_exists_cache(dirname($path))) {\n            if (!mkdir(dirname($path), 0700)) {\n                throw new PrestaShopException('Directory ' . dirname($path) . ' cannot be created.');\n            }\n        }\n        if ($fd = @fopen($path, 'wb')) {\n            $tab = 'LANGMAIL';\n            fwrite($fd, \"<?php\\n\\nglobal \\$_\" . $tab . \";\\n\\$_\" . $tab . \" = array();\\n\");\n\n            foreach ($sub as $key => $value) {\n                fwrite($fd, '$_' . $tab . '[\\'' . pSQL($key) . '\\'] = \\'' . pSQL($value) . '\\';' . \"\\n\");\n            }\n\n            fwrite($fd, \"\\n?>\");\n            fclose($fd);\n        } else {\n            throw new PrestaShopException($this->trans('Cannot write language file for email subjects. Path is: %folder%', ['%folder%' => $path], 'Admin.International.Notification'));\n        }\n    }\n\n    /**\n     * This get files to translate in module directory.\n     * Recursive method allow to get each files for a module no matter his depth.\n     *\n     * @param string $path directory path to scan\n     * @param array $array_files by reference - array which saved files to parse\n     * @param string $module_name module name\n     * @param string $lang_file full path of translation file\n     * @param bool $is_default\n     */\n    protected function recursiveGetModuleFiles($path, &$array_files, $module_name, $lang_file, $is_default = false)\n    {\n        $files_module = [];\n        if (Tools::file_exists_cache($path)) {\n            $files_module = scandir($path, SCANDIR_SORT_NONE);\n        }\n        $files_for_module = $this->clearModuleFiles($files_module, 'file');\n        if (!empty($files_for_module)) {\n            $array_files[] = [\n                'file_name' => $lang_file,\n                'dir' => $path,\n                'files' => $files_for_module,\n                'module' => $module_name,\n                'is_default' => $is_default,\n                'theme' => $this->theme_selected,\n            ];\n        }\n\n        $dir_module = $this->clearModuleFiles($files_module, 'directory', $path);\n\n        if (!empty($dir_module)) {\n            foreach ($dir_module as $folder) {\n                $this->recursiveGetModuleFiles($path . $folder . '/', $array_files, $module_name, $lang_file, $is_default);\n            }\n        }\n    }\n\n    /**\n     * This method get translation in each translations file.\n     * The file depend on $lang param.\n     *\n     * @param array $modules List of modules\n     * @param string|null $root_dir path where it get each modules\n     * @param string $lang ISO code of chosen language to translate\n     * @param bool $is_default Set it if modules are located in root/prestashop/modules folder\n     *                         This allow to distinguish overridden prestashop theme and original module\n     *\n     * @return array\n     */\n    protected function getAllModuleFiles($modules, $root_dir, $lang, $is_default = false)\n    {\n        $array_files = [];\n        $initial_root_dir = $root_dir;\n        foreach ($modules as $module) {\n            $root_dir = $initial_root_dir;\n            if (isset($module[0]) && $module[0] == '.') {\n                continue;\n            }\n\n            // First we load the default translation file\n            if ($root_dir == null) {\n                $i18n_dir = $this->translations_informations[$this->type_selected]['dir'];\n                if (is_dir($i18n_dir . $module)) {\n                    $root_dir = $i18n_dir;\n                }\n\n                $lang_file = $root_dir . $module . '/translations/' . $lang . '.php';\n                if (!Tools::file_exists_cache($root_dir . $module . '/translations/' . $lang . '.php') && Tools::file_exists_cache($root_dir . $module . '/' . $lang . '.php')) {\n                    $lang_file = $root_dir . $module . '/' . $lang . '.php';\n                }\n                @include $lang_file;\n                $this->getModuleTranslations();\n                // If a theme is selected, then the destination translation file must be in the theme\n                if ($this->theme_selected) {\n                    $lang_file = $this->translations_informations[$this->type_selected]['override']['dir'] . $module . '/translations/' . $lang . '.php';\n                }\n                $this->recursiveGetModuleFiles($root_dir . $module . '/', $array_files, $module, $lang_file, $is_default);\n            }\n\n            $root_dir = $initial_root_dir;\n            // Then we load the overriden translation file\n            if ($this->theme_selected && isset($this->translations_informations[$this->type_selected]['override'])) {\n                $i18n_dir = $this->translations_informations[$this->type_selected]['override']['dir'];\n                if (is_dir($i18n_dir . $module)) {\n                    $root_dir = $i18n_dir;\n                }\n                if (Tools::file_exists_cache($root_dir . $module . '/translations/' . $lang . '.php')) {\n                    $lang_file = $root_dir . $module . '/translations/' . $lang . '.php';\n                } elseif (Tools::file_exists_cache($root_dir . $module . '/' . $lang . '.php')) {\n                    $lang_file = $root_dir . $module . '/' . $lang . '.php';\n                }\n                if (!empty($lang_file)) {\n                    @include $lang_file;\n                    $this->getModuleTranslations();\n                    $this->recursiveGetModuleFiles($root_dir . $module . '/', $array_files, $module, $lang_file, $is_default);\n                }\n            }\n        }\n\n        return $array_files;\n    }\n\n    /**\n     * This method generate the form for modules translations.\n     */\n    public function initFormModules()\n    {\n        // Get list of installed modules\n        $installed_modules = $this->getListModules();\n\n        // get selected module\n        $modules = [Tools::getValue('module')];\n\n        // Get all modules files and include all translation files\n        $arr_files = $this->getAllModuleFiles($modules, null, $this->lang_selected->iso_code, true);\n        foreach ($arr_files as $value) {\n            $this->findAndFillTranslations($value['files'], $value['theme'], $value['module'], $value['dir']);\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'default_theme_name' => self::DEFAULT_THEME_NAME,\n            'count' => $this->total_expression,\n            'limit_warning' => $this->displayLimitPostWarning($this->total_expression),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'textarea_sized' => self::TEXTAREA_SIZED,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'modules_translations' => $this->modules_translations,\n            'missing_translations' => $this->missing_translations,\n            'module_name' => $modules[0],\n            'installed_modules' => $installed_modules,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_modules.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Parse PDF class.\n     *\n     * @since 1.4.5.0\n     *\n     * @param string $file_path File to parse\n     * @param string $file_type Type of file\n     * @param array $lang_array Contains expression in the chosen language\n     * @param string $tab name      To use with the md5 key\n     * @param array $tabs_array\n     * @param array $count_missing\n     *\n     * @return array Array          Containing all datas needed for building the translation form\n     */\n    protected function parsePdfClass($file_path, $file_type, $lang_array, $tab, $tabs_array, &$count_missing)\n    {\n        // Get content for this file\n        $content = file_get_contents($file_path);\n\n        // Parse this content\n        $matches = $this->userParseFile($content, $this->type_selected, $file_type);\n\n        foreach ($matches as $key) {\n            if (array_key_exists($tab . md5(addslashes($key)), $lang_array)) {\n                $tabs_array[$tab][$key]['trad'] = html_entity_decode($lang_array[$tab . md5(addslashes($key))], ENT_COMPAT, 'UTF-8');\n            } else {\n                $tabs_array[$tab][$key]['trad'] = '';\n                if (!isset($count_missing[$tab])) {\n                    $count_missing[$tab] = 1;\n                } else {\n                    ++$count_missing[$tab];\n                }\n            }\n            $tabs_array[$tab][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n        }\n\n        return $tabs_array;\n    }\n\n    /**\n     * This method generate the form for PDF translations.\n     */\n    public function initFormPDF()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = [];\n        $missing_translations_pdf = [];\n\n        $i18n_dir = $this->translations_informations[$this->type_selected]['dir'];\n        $default_i18n_file = $i18n_dir . $this->translations_informations[$this->type_selected]['file'];\n\n        if (!$this->theme_selected) {\n            $i18n_file = $default_i18n_file;\n        } else {\n            $i18n_dir = $this->translations_informations[$this->type_selected]['override']['dir'];\n            $i18n_file = $i18n_dir . $this->translations_informations[$this->type_selected]['override']['file'];\n        }\n\n        $this->checkDirAndCreate($i18n_file);\n        if ((!file_exists($i18n_file) && !is_writable($i18n_dir)) && !is_writable($i18n_file)) {\n            $this->errors[] = $this->trans('Cannot write into the \"%file%\"', ['%file%' => $i18n_file], 'Admin.International.Notification');\n        }\n\n        @include $i18n_file;\n\n        // if the override's translation file is empty load the default file\n        /* @phpstan-ignore-next-line */\n        if (!isset($GLOBALS[$name_var]) || count($GLOBALS[$name_var]) == 0) {\n            @include $default_i18n_file;\n        }\n\n        $prefix_key = 'PDF';\n        $tabs_array = [$prefix_key => []];\n\n        $files_by_directory = $this->getFileToParseByTypeTranslation();\n\n        foreach ($files_by_directory as $type => $directories) {\n            foreach ($directories as $dir => $files) {\n                foreach ($files as $file) {\n                    if (!in_array($file, self::$ignore_folder) && Tools::file_exists_cache($file_path = $dir . $file)) {\n                        if ($type == 'tpl') {\n                            if (Tools::file_exists_cache($file_path) && is_file($file_path)) {\n                                // Get content for this file\n                                $content = file_get_contents($file_path);\n\n                                // Parse this content\n                                $matches = $this->userParseFile($content, $this->type_selected, 'tpl');\n\n                                foreach ($matches as $key) {\n                                    /* @phpstan-ignore-next-line */\n                                    if (isset($GLOBALS[$name_var][$prefix_key . md5($key)])) {\n                                        $tabs_array[$prefix_key][$key]['trad'] = (html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($key)], ENT_COMPAT, 'UTF-8'));\n                                    } else {\n                                        if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                                            $tabs_array[$prefix_key][$key]['trad'] = '';\n                                            if (!isset($missing_translations_pdf[$prefix_key])) {\n                                                $missing_translations_pdf[$prefix_key] = 1;\n                                            } else {\n                                                ++$missing_translations_pdf[$prefix_key];\n                                            }\n                                        }\n                                    }\n                                    $tabs_array[$prefix_key][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                                }\n                            }\n                        } elseif (Tools::file_exists_cache($file_path)) {\n                            $tabs_array = $this->parsePdfClass($file_path, 'php', $GLOBALS[$name_var], $prefix_key, $tabs_array, $missing_translations_pdf);\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => count($tabs_array['PDF']),\n            'limit_warning' => $this->displayLimitPostWarning(count($tabs_array['PDF'])),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'missing_translations' => $missing_translations_pdf,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Recursively list files in directory $dir.\n     *\n     * @param string $dir\n     * @param array $list\n     * @param string $file_ext\n     *\n     * @return array\n     */\n    public function listFiles($dir, $list = [], $file_ext = 'tpl')\n    {\n        $dir = rtrim($dir, '/') . DIRECTORY_SEPARATOR;\n\n        $to_parse = is_dir($dir) ? scandir($dir, SCANDIR_SORT_NONE) : [];\n        // copied (and kind of) adapted from AdminImages.php\n        foreach ($to_parse as $file) {\n            if (!in_array($file, self::$ignore_folder)) {\n                if (preg_match('#' . preg_quote($file_ext, '#') . '$#i', $file)) {\n                    $list[$dir][] = $file;\n                } elseif (is_dir($dir . $file)) {\n                    $list = $this->listFiles($dir . $file, $list, $file_ext);\n                }\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Checks if theme exists.\n     *\n     * @param string $theme\n     *\n     * @return bool\n     */\n    protected function theme_exists($theme)\n    {\n        $theme_exists = false;\n        foreach ($this->themes as $existing_theme) {\n            /** @var Theme $existing_theme */\n            if ($existing_theme->getName() == $theme) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static function getEmailHTML($email)\n    {\n        if (__PS_BASE_URI__ != '/') {\n            $email_file = str_replace(__PS_BASE_URI__, _PS_ROOT_DIR_ . '/', $email);\n        } else {\n            $email_file = _PS_ROOT_DIR_ . $email;\n        }\n\n        if (file_exists($email_file)) {\n            $email_html = file_get_contents($email_file);\n        } else {\n            $email_html = '';\n        }\n\n        return $email_html;\n    }\n\n    /**\n     * Display the HTML content of an email.\n     */\n    public function displayAjaxEmailHTML()\n    {\n        $email = Tools::getValue('email');\n        $this->ajaxRender(\n            AdminTranslationsController::getEmailHTML($email)\n        );\n    }\n\n    /**\n     * @param string $directory Name of directory\n     *\n     * @return array\n     */\n    protected function getSubjectMailContent($directory)\n    {\n        $subject_mail_content = [];\n        if (Tools::file_exists_cache($directory . '/lang.php')) {\n            // we need to include this even if already included (no include once)\n            include $directory . '/lang.php';\n            foreach ($GLOBALS[$this->translations_informations[$this->type_selected]['var']] as $key => $subject) {\n                ++$this->total_expression;\n                $subject = str_replace('\\n', ' ', $subject);\n                $subject = str_replace(\"\\\\'\", \"\\'\", $subject);\n                $subject_mail_content[$key]['trad'] = htmlentities($subject, ENT_QUOTES, 'UTF-8');\n                $subject_mail_content[$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n            }\n        }\n\n        return $subject_mail_content;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\Theme;\nuse PrestaShop\\PrestaShop\\Core\\Addon\\Theme\\ThemeManagerBuilder;\nuse PrestaShop\\PrestaShop\\Core\\Foundation\\Filesystem\\FileSystem;\n\nclass AdminTranslationsControllerCore extends AdminController\n{\n    /** Name of theme by default */\n    public const DEFAULT_THEME_NAME = _PS_DEFAULT_THEME_NAME_;\n    public const TEXTAREA_SIZED = 70;\n\n    /** @var string : Link which list all pack of language */\n    protected $link_lang_pack = 'http://i18n.prestashop-project.org/translations/%ps_version%/available_languages.json';\n\n    /** @var int : number of sentence which can be translated */\n    protected $total_expression = 0;\n\n    /** @var int : number of sentence which aren't translated */\n    protected $missing_translations = 0;\n\n    /** @var array : List of ISO code for all languages */\n    protected $all_iso_lang = [];\n\n    /** @var array */\n    protected $modules_translations = [];\n\n    /** @var array : List of folder which must be ignored */\n    protected static $ignore_folder = ['.', '..', '.svn', '.git', '.htaccess', 'index.php'];\n\n    /** @var array : List of content type accepted for translation mail file */\n    protected static $content_type_accepted = ['txt', 'tpl', 'html'];\n\n    /** @var array : List of theme by translation type : FRONT, BACK, ERRORS... */\n    protected $translations_informations = [];\n\n    /** @var array : List of all languages */\n    protected $languages;\n\n    /** @var array : List of all themes */\n    protected $themes;\n\n    /** @var string : Directory of selected theme */\n    protected $theme_selected;\n\n    /** @var string : Name of translations type */\n    protected $type_selected;\n\n    /** @var Language object : Language for the selected language */\n    protected $lang_selected;\n\n    /** @var bool : Is true if number of var exceed the suhosin request or post limit */\n    protected $post_limit_exceed = false;\n\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->multishop_context = Shop::CONTEXT_ALL;\n        $this->table = 'translations';\n\n        parent::__construct();\n\n        $this->link_lang_pack = str_replace('%ps_version%', _PS_VERSION_, $this->link_lang_pack);\n\n        $this->themes = (new ThemeManagerBuilder($this->context, Db::getInstance()))\n            ->buildRepository()\n            ->getList();\n    }\n\n    /*\n     * Set the type which is selected\n     */\n    public function setTypeSelected($type_selected)\n    {\n        $this->type_selected = $type_selected;\n    }\n\n    /**\n     * AdminController::initContent() override.\n     *\n     * @see AdminController::initContent()\n     */\n    public function initContent()\n    {\n        if (null !== $this->type_selected) {\n            $method_name = 'initForm' . $this->type_selected;\n            if (method_exists($this, $method_name)) {\n                $this->content = $this->initForm($method_name);\n            } else {\n                $this->errors[] = $this->trans('\"%type%\" does not exist.', ['%type%' => $this->type_selected], 'Admin.Notifications.Error');\n                $this->content = $this->initMain();\n            }\n        } else {\n            $this->content = $this->initMain();\n        }\n\n        $this->context->smarty->assign([\n            'content' => $this->content,\n        ]);\n    }\n\n    /**\n     * This function create vars by default and call the good method for generate form.\n     *\n     * @param string $method_name\n     *\n     * @return mixed Call the method $this->method_name()\n     */\n    public function initForm($method_name)\n    {\n        // Create a title for each translation page\n        $title = $this->trans(\n            '%1$s (Language: %2$s, Theme: %3$s)',\n                [\n                    '%1$s' => (empty($this->translations_informations[$this->type_selected]['name']) ? false : $this->translations_informations[$this->type_selected]['name']),\n                    '%2$s' => $this->lang_selected->name,\n                    '%3$s' => $this->theme_selected ? $this->theme_selected : $this->trans('None', [], 'Admin.Global'),\n                ],\n                'Admin.International.Feature'\n            );\n\n        // Set vars for all forms\n        $this->tpl_view_vars = [\n            'lang' => $this->lang_selected->iso_code,\n            'title' => $title,\n            'type' => $this->type_selected,\n            'theme' => $this->theme_selected,\n            'post_limit_exceeded' => $this->post_limit_exceed,\n            'url_submit' => self::$currentIndex . '&submitTranslations' . ucfirst($this->type_selected) . '=1&token=' . $this->token,\n            'url_submit_installed_module' => self::$currentIndex . '&submitSelect' . ucfirst($this->type_selected) . '=1&token=' . $this->token,\n            'toggle_button' => $this->displayToggleButton(),\n            'textarea_sized' => self::TEXTAREA_SIZED,\n        ];\n\n        // Call method initForm for a type\n        return $this->{$method_name}();\n    }\n\n    /**\n     * AdminController::initToolbar() override.\n     *\n     * @see AdminController::initToolbar()\n     */\n    public function initToolbar()\n    {\n        $this->toolbar_btn['save-and-stay'] = [\n            'short' => 'SaveAndStay',\n            'href' => '#',\n            'desc' => $this->trans('Save and stay', [], 'Admin.Actions'),\n        ];\n        $this->toolbar_btn['save'] = [\n            'href' => '#',\n            'desc' => $this->trans('Update translations', [], 'Admin.International.Feature'),\n        ];\n        $this->toolbar_btn['cancel'] = [\n            'href' => self::$currentIndex . '&token=' . $this->token,\n            'desc' => $this->trans('Cancel', [], 'Admin.Actions'),\n        ];\n    }\n\n    /**\n     * Generate the Main page.\n     */\n    public function initMain()\n    {\n        if (\n            !in_array(\n                $this->authorizationLevel(),\n                [\n                    AdminController::LEVEL_VIEW,\n                    AdminController::LEVEL_EDIT,\n                    AdminController::LEVEL_ADD,\n                    AdminController::LEVEL_DELETE,\n                ]\n            )\n        ) {\n            Tools::redirectAdmin(Context::getContext()->link->getAdminLink('AdminDashboard'));\n        }\n\n        // Block add/update a language\n        $packsToInstall = [];\n        $packsToUpdate = [];\n        $token = Tools::getAdminToken('AdminLanguages' . (int) Tab::getIdFromClassName('AdminLanguages') . (int) $this->context->employee->id);\n        $arrayStreamContext = @stream_context_create(['http' => ['method' => 'GET', 'timeout' => 8]]);\n\n        if ($langPacks = Tools::file_get_contents($this->link_lang_pack, false, $arrayStreamContext)) {\n            if ($langPacks != '' && $langPacks = json_decode($langPacks, true)) {\n                foreach ($langPacks as $locale => $langName) {\n                    $langDetails = Language::getJsonLanguageDetails($locale);\n                    if (!Language::isInstalledByLocale($locale)) {\n                        $packsToInstall[$locale] = $langDetails['name'];\n                    } else {\n                        $packsToUpdate[$locale] = $langDetails['name'];\n                    }\n                }\n            }\n        }\n\n        $modules = [];\n        foreach ($this->getListModules(true) as $module) {\n            $modules[$module->name] = [\n                'name' => $module->name,\n                'displayName' => $module->displayName,\n                'urlToTranslate' => !$module->isUsingNewTranslationSystem() ? $this->context->link->getAdminLink(\n                    'AdminTranslations',\n                    true,\n                    [],\n                    [\n                        'type' => 'modules',\n                        'module' => $module->name,\n                    ]\n                ) : '',\n            ];\n        }\n\n        $this->tpl_view_vars = [\n            'theme_default' => self::DEFAULT_THEME_NAME,\n            'theme_lang_dir' => _THEME_LANG_DIR_,\n            'token' => $this->token,\n            'languages' => $this->languages,\n            'translations_type' => $this->translations_informations,\n            'packs_to_install' => $packsToInstall,\n            'packs_to_update' => $packsToUpdate,\n            'url_submit' => self::$currentIndex . '&token=' . $this->token,\n            'themes' => $this->themes,\n            'modules' => $modules,\n            'current_theme_name' => $this->context->shop->theme_name,\n            'url_create_language' => 'index.php?controller=AdminLanguages&addlang&token=' . $token,\n            'level' => $this->authorizationLevel(),\n        ];\n\n        $this->toolbar_scroll = false;\n\n        $this->content .= $this->renderKpis();\n        $this->content .= parent::renderView();\n\n        return $this->content;\n    }\n\n    /**\n     * This method merge each arrays of modules translation in the array of modules translations.\n     */\n    protected function getModuleTranslations()\n    {\n        global $_MODULE;\n        $name_var = (empty($this->translations_informations[$this->type_selected]['var']) ? false : $this->translations_informations[$this->type_selected]['var']);\n\n        if (!isset($_MODULE) && !isset($GLOBALS[$name_var])) {\n            $GLOBALS[$name_var] = [];\n        } elseif (isset($_MODULE)) {\n            $GLOBALS[$name_var] = $_MODULE;\n        }\n    }\n\n    /**\n     * This method is only used by AdminTranslations::submitCopyLang().\n     *\n     * It try to create folder in new theme.\n     *\n     * When a translation file is copied for a module, its translation key is wrong.\n     * We have to change the translation key and rewrite the file.\n     *\n     * @param string $dest file name\n     *\n     * @return bool\n     */\n    protected function checkDirAndCreate($dest)\n    {\n        $bool = true;\n\n        // To get only folder path\n        $path = dirname($dest);\n\n        // If folder wasn't already added\n        // Do not use Tools::file_exists_cache because it changes over time!\n        if (!file_exists($path)) {\n            if (!mkdir($path, FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                $bool &= false;\n                $this->errors[] = $this->trans('Cannot create the folder \"%folder%\". Please check your directory writing permissions.', ['%folder%' => $path], 'Admin.International.Notification');\n            }\n        }\n\n        return $bool;\n    }\n\n    /**\n     * Read the Post var and write the translation file.\n     * This method overwrites the old translation file.\n     *\n     * @param bool $override_file Set true if this file is a override\n     *\n     * @throws PrestaShopException\n     */\n    protected function writeTranslationFile($override_file = false)\n    {\n        $type = Tools::toCamelCase($this->type_selected, true);\n\n        if (isset($this->translations_informations[$this->type_selected])) {\n            $translation_informations = $this->translations_informations[$this->type_selected];\n        } else {\n            return;\n        }\n\n        if ($override_file) {\n            $file_path = $translation_informations['override']['dir'] . $translation_informations['override']['file'];\n        } else {\n            $file_path = $translation_informations['dir'] . $translation_informations['file'];\n        }\n\n        if ($file_path && !file_exists($file_path)) {\n            if (!file_exists(dirname($file_path)) && !mkdir(dirname($file_path), FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                throw new PrestaShopException($this->trans('Directory \"%folder%\" cannot be created', ['%folder%' => dirname($file_path)], 'Admin.Notifications.Error'));\n            } elseif (!touch($file_path)) {\n                throw new PrestaShopException($this->trans('File \"%file%\" cannot be created', ['%file%' => $file_path], 'Admin.Notifications.Error'));\n            }\n        }\n\n        $thm_name = str_replace('.', '', Tools::getValue('theme'));\n        $kpi_key = substr(strtoupper($thm_name . '_' . Tools::getValue('lang')), 0, 16);\n\n        if ($fd = fopen($file_path, 'wb')) {\n            // Get value of button save and stay\n            $save_and_stay = Tools::isSubmit('submitTranslations' . $type . 'AndStay');\n\n            // Unset all POST which are not translations\n            unset(\n                $_POST['submitTranslations' . $type],\n                $_POST['submitTranslations' . $type . 'AndStay'],\n                $_POST['lang'],\n                $_POST['token'],\n                $_POST['theme'],\n                $_POST['type']\n            );\n\n            // Get all POST which aren't empty\n            $to_insert = [];\n            foreach ($_POST as $key => $value) {\n                if (!empty($value)) {\n                    $to_insert[$key] = $value;\n                }\n            }\n\n            ConfigurationKPI::updateValue('FRONTOFFICE_TRANSLATIONS_EXPIRE', time());\n            ConfigurationKPI::updateValue('TRANSLATE_TOTAL_' . $kpi_key, count($_POST));\n            ConfigurationKPI::updateValue('TRANSLATE_DONE_' . $kpi_key, count($to_insert));\n\n            // translations array is ordered by key (easy merge)\n            ksort($to_insert);\n            $tab = $translation_informations['var'];\n            fwrite($fd, \"<?php\\n\\nglobal \\$\" . $tab . \";\\n\\$\" . $tab . \" = [];\\n\");\n            foreach ($to_insert as $key => $value) {\n                fwrite($fd, '$' . $tab . '[\\'' . pSQL($key, true) . '\\'] = \\'' . pSQL($value, true) . '\\';' . \"\\n\");\n            }\n            fwrite($fd, \"\\n?>\");\n            fclose($fd);\n\n            // Redirect\n            if ($save_and_stay) {\n                $this->redirect(true);\n            } else {\n                $this->redirect();\n            }\n        } else {\n            throw new PrestaShopException($this->trans('Cannot write this file: \"%folder%\"', ['%folder%' => $file_path], 'Admin.Notifications.Error'));\n        }\n    }\n\n    public function submitCopyLang()\n    {\n        $from_lang = Tools::getValue('fromLang');\n        $to_lang = Tools::getValue('toLang');\n        $from_theme = Tools::getValue('fromTheme');\n        $to_theme = Tools::getValue('toTheme');\n\n        if (!$from_lang || !$to_lang) {\n            $this->errors[] = $this->trans('You must select two languages in order to copy data from one to another.', [], 'Admin.International.Notification');\n\n            return;\n        }\n        if (!$from_theme || !$to_theme) {\n            $this->errors[] = $this->trans('You must select two themes in order to copy data from one to another.', [], 'Admin.International.Notification');\n\n            return;\n        }\n        if ($from_lang == $to_lang && $from_theme == $to_theme) {\n            $this->errors[] = $this->trans('There is nothing to copy (same language and theme).', [], 'Admin.International.Notification');\n\n            return;\n        }\n\n        Language::copyLanguageData(Language::getIdByIso($from_lang), Language::getIdByIso($to_lang));\n\n        $theme_exists = ['from_theme' => false, 'to_theme' => false];\n        foreach ($this->themes as $theme) {\n            if ($theme->getName() == $from_theme) {\n                $theme_exists['from_theme'] = true;\n            }\n            if ($theme->getName() == $to_theme) {\n                $theme_exists['to_theme'] = true;\n            }\n        }\n        if ($theme_exists['from_theme'] == false || $theme_exists['to_theme'] == false) {\n            $this->errors[] = $this->trans('Theme(s) not found', [], 'Admin.International.Notification');\n        }\n\n        if (count($this->errors)) {\n            return;\n        }\n\n        $bool = true;\n        $items = Language::getFilesList($from_lang, $from_theme, $to_lang, $to_theme, false, false, true);\n        foreach ($items as $source => $dest) {\n            if (!$this->checkDirAndCreate($dest)) {\n                $this->errors[] = $this->trans('Impossible to create the directory \"%folder%\".', ['%folder%' => $dest], 'Admin.International.Notification');\n            } elseif (!copy($source, $dest)) {\n                $this->errors[] = $this->trans('Impossible to copy \"%source%\" to \"%dest%\".', ['%source%' => $source, '%dest%' => $dest], 'Admin.International.Notification');\n            } elseif (strpos($dest, 'modules') && basename($source) === $from_lang . '.php' && $bool !== false) {\n                if (!$this->changeModulesKeyTranslation($dest, $from_theme, $to_theme)) {\n                    $this->errors[] = $this->trans('Impossible to translate \"%dest%\".', ['%dest%' => $dest], 'Admin.International.Notification');\n                }\n            }\n        }\n        if (!count($this->errors)) {\n            $this->redirect(false, 14);\n        }\n        $this->errors[] = $this->trans('A part of the data has been copied but some of the language files could not be found.', [], 'Admin.International.Notification');\n    }\n\n    /**\n     * Change the key translation to according it to theme name.\n     *\n     * @param string $path\n     * @param string $theme_from\n     * @param string $theme_to\n     *\n     * @return bool\n     */\n    public function changeModulesKeyTranslation($path, $theme_from, $theme_to)\n    {\n        $content = file_get_contents($path);\n        $arr_replace = [];\n        $bool_flag = true;\n        if (preg_match_all('#\\$_MODULE\\[\\'([^\\']+)\\'\\]#Ui', $content, $matches)) {\n            foreach ($matches[1] as $value) {\n                $arr_replace[$value] = str_replace($theme_from, $theme_to, $value);\n            }\n            $content = str_replace(array_keys($arr_replace), array_values($arr_replace), $content);\n            $bool_flag = (file_put_contents($path, $content) === false) ? false : true;\n        }\n\n        return $bool_flag;\n    }\n\n    public function exportTabs()\n    {\n        // Get name tabs by iso code\n        $tabs = Tab::getTabs($this->lang_selected->id);\n\n        // Get name of the default tabs\n        $tabs_default_lang = Tab::getTabs(1);\n\n        $tabs_default = [];\n        foreach ($tabs_default_lang as $tab) {\n            $tabs_default[$tab['class_name']] = pSQL($tab['name']);\n        }\n\n        // Create content\n        $content = \"<?php\\n\\n\\$_TABS = array();\";\n        if (!empty($tabs)) {\n            foreach ($tabs as $tab) {\n                /*\n                 * We don't export tab translations that are identical to the default\n                 * tab translations to avoid a problem that would occur in the followin scenario:\n                 *\n                 * 1) install PrestaShop in, say, Spanish => tabs are by default in Spanish\n                 * 2) create a new language, say, Klingon => tabs are populated using the default, Spanish, tabs\n                 * 3) export the Klingon language pack\n                 *\n                 * => Since you have not yet translated the tabs into Klingon,\n                 * without the condition below, you would get tabs exported, but in Spanish.\n                 * This would lead to a Klingon pack actually containing Spanish.\n                 *\n                 * This has caused many issues in the past, so, as a precaution, tabs from\n                 * the default language are not exported.\n                 *\n                 */\n                if ($tabs_default[$tab['class_name']] != pSQL($tab['name'])) {\n                    $content .= \"\\n\\$_TABS['\" . $tab['class_name'] . \"'] = '\" . pSQL($tab['name']) . \"';\";\n                }\n            }\n        }\n        $content .= \"\\n\\nreturn \\$_TABS;\";\n\n        $dir = _PS_TRANSLATIONS_DIR_ . $this->lang_selected->iso_code . DIRECTORY_SEPARATOR;\n        $path = $dir . 'tabs.php';\n\n        // Check if tabs.php exists for the selected Iso Code\n        if (!Tools::file_exists_cache($dir)) {\n            if (!mkdir($dir, FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                throw new PrestaShopException('The file ' . $dir . ' cannot be created.');\n            }\n        }\n        if (!file_put_contents($path, $content)) {\n            throw new PrestaShopException('File \"' . $path . '\" does not exist and cannot be created in ' . $dir);\n        }\n        if (!is_writable($path)) {\n            $this->displayWarning($this->trans('This file must be writable: %file%', ['%file%' => $path], 'Admin.Notifications.Error'));\n        }\n    }\n\n    public function submitExportLang()\n    {\n        if ($this->lang_selected->iso_code && $this->theme_selected) {\n            $this->exportTabs();\n            $items = array_flip(Language::getFilesList($this->lang_selected->iso_code, $this->theme_selected, false, false, false, false, true));\n            $file_name = _PS_TRANSLATIONS_DIR_ . '/export/' . $this->lang_selected->iso_code . '.gzip';\n            $gz = new Archive_Tar($file_name, 'gz');\n            if ($gz->createModify($items, '', _PS_ROOT_DIR_)) {\n                ob_start();\n                header('Pragma: public');\n                header('Expires: 0');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Cache-Control: public');\n                header('Content-Description: File Transfer');\n                header('Content-type: application/octet-stream');\n                header('Content-Disposition: attachment; filename=\"' . $this->lang_selected->iso_code . '.gzip' . '\"');\n                header('Content-Transfer-Encoding: binary');\n                ob_end_flush();\n                readfile($file_name);\n                @unlink($file_name);\n                exit;\n            }\n            $this->errors[] = $this->trans('An error occurred while creating archive.', [], 'Admin.International.Notification');\n        }\n        $this->errors[] = $this->trans('Please select a language and a theme.', [], 'Admin.International.Notification');\n    }\n\n    public static function checkAndAddMailsFiles($iso_code, $files_list)\n    {\n        if (Language::getIdByIso('en')) {\n            $default_language = 'en';\n        } else {\n            $default_language = Language::getIsoById((int) Configuration::get('PS_LANG_DEFAULT'));\n        }\n\n        if (!$default_language || !Validate::isLanguageIsoCode($default_language)) {\n            return false;\n        }\n\n        // 1 - Scan mails files\n        $mails = [];\n        if (Tools::file_exists_cache(_PS_MAIL_DIR_ . $default_language . '/')) {\n            $mails = scandir(_PS_MAIL_DIR_ . $default_language . '/', SCANDIR_SORT_NONE);\n        }\n\n        $mails_new_lang = [];\n\n        // Get all email files\n        foreach ($files_list as $file) {\n            if (preg_match('#^mails\\/([a-z0-9]+)\\/#Ui', $file['filename'], $matches)) {\n                $slash_pos = strrpos($file['filename'], '/');\n                $mails_new_lang[] = substr($file['filename'], -(strlen($file['filename']) - $slash_pos - 1));\n            }\n        }\n\n        // Get the difference\n        $arr_mails_needed = array_diff($mails, $mails_new_lang);\n\n        // Add mails files\n        foreach ($arr_mails_needed as $mail_to_add) {\n            if (!in_array($mail_to_add, self::$ignore_folder)) {\n                @copy(_PS_MAIL_DIR_ . $default_language . '/' . $mail_to_add, _PS_MAIL_DIR_ . $iso_code . '/' . $mail_to_add);\n            }\n        }\n\n        // 2 - Scan modules files\n        $modules = scandir(_PS_MODULE_DIR_, SCANDIR_SORT_NONE);\n\n        $module_mail_en = [];\n        $module_mail_iso_code = [];\n\n        foreach ($modules as $module) {\n            if (!in_array($module, self::$ignore_folder) && Tools::file_exists_cache(_PS_MODULE_DIR_ . $module . '/mails/' . $default_language . '/')) {\n                $arr_files = scandir(_PS_MODULE_DIR_ . $module . '/mails/' . $default_language . '/', SCANDIR_SORT_NONE);\n\n                foreach ($arr_files as $file) {\n                    if (!in_array($file, self::$ignore_folder)) {\n                        if (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module . '/mails/' . $default_language . '/' . $file)) {\n                            $module_mail_en[] = _PS_MODULE_DIR_ . $module . '/mails/ISO_CODE/' . $file;\n                        }\n\n                        if (Tools::file_exists_cache(_PS_MODULE_DIR_ . $module . '/mails/' . $iso_code . '/' . $file)) {\n                            $module_mail_iso_code[] = _PS_MODULE_DIR_ . $module . '/mails/ISO_CODE/' . $file;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Get the difference in this modules\n        $arr_modules_mails_needed = array_diff($module_mail_en, $module_mail_iso_code);\n\n        // Add mails files for this modules\n        foreach ($arr_modules_mails_needed as $file) {\n            $file_en = str_replace('ISO_CODE', $default_language, $file);\n            $file_iso_code = str_replace('ISO_CODE', $iso_code, $file);\n            $dir_iso_code = substr($file_iso_code, 0, -(strlen($file_iso_code) - strrpos($file_iso_code, '/') - 1));\n\n            if (!file_exists($dir_iso_code)) {\n                mkdir($dir_iso_code);\n                file_put_contents($dir_iso_code . '/index.php', Tools::getDefaultIndexContent());\n            }\n\n            if (Tools::file_exists_cache($file_en)) {\n                copy($file_en, $file_iso_code);\n            }\n        }\n    }\n\n    /**\n     * Move theme translations in selected themes.\n     *\n     * @param array $files\n     * @param array $themes_selected\n     */\n    public function checkAndAddThemesFiles($files, $themes_selected)\n    {\n        foreach ($files as $file) {\n            // Check if file is a file theme\n            if (preg_match('#^themes\\/([a-z0-9]+)\\/lang\\/#Ui', $file['filename'], $matches)) {\n                $slash_pos = strrpos($file['filename'], '/');\n                $name_file = substr($file['filename'], -(strlen($file['filename']) - $slash_pos - 1));\n                $name_default_theme = $matches[1];\n                $deleted_old_theme = false;\n\n                // Get the old file theme\n                if (file_exists(_PS_THEME_DIR_ . 'lang/' . $name_file)) {\n                    $theme_file_old = _PS_THEME_DIR_ . 'lang/' . $name_file;\n                } else {\n                    $deleted_old_theme = true;\n                    $theme_file_old = str_replace(self::DEFAULT_THEME_NAME, $name_default_theme, _PS_THEME_DIR_ . 'lang/' . $name_file);\n                }\n\n                // Move the old file theme in the new folder\n                foreach ($themes_selected as $theme_name) {\n                    if (file_exists($theme_file_old)) {\n                        copy($theme_file_old, str_replace($name_default_theme, $theme_name, $theme_file_old));\n                    }\n                }\n\n                if ($deleted_old_theme) {\n                    @unlink($theme_file_old);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add new translations tabs by code ISO.\n     *\n     * @param string $iso_code\n     * @param array $files\n     *\n     * @return array\n     */\n    public static function addNewTabs($iso_code, $files)\n    {\n        $errors = [];\n\n        foreach ($files as $file) {\n            // Check if file is a file theme\n            if (preg_match('#^translations\\/' . $iso_code . '\\/tabs.php#Ui', $file['filename'], $matches) && Validate::isLanguageIsoCode($iso_code)) {\n                // Include array width new translations tabs\n                $_TABS = [];\n                clearstatcache();\n                if (file_exists(_PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . $file['filename'])) {\n                    include_once _PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . $file['filename'];\n                }\n\n                /** @var mixed $_TABS */\n                if (is_array($_TABS) && count($_TABS)) {\n                    foreach ($_TABS as $class_name => $translations) {\n                        // Get instance of this tab by class name\n                        $tab = Tab::getInstanceFromClassName($class_name);\n                        //Check if class name exists\n                        if (!empty($tab->class_name)) {\n                            $id_lang = Language::getIdByIso($iso_code, true);\n                            $tab->name[(int) $id_lang] = $translations;\n\n                            // Do not crash at intall\n                            if (!isset($tab->name[Configuration::get('PS_LANG_DEFAULT')])) {\n                                $tab->name[(int) Configuration::get('PS_LANG_DEFAULT')] = $translations;\n                            }\n\n                            if (!Validate::isGenericName($tab->name[(int) $id_lang])) {\n                                $errors[] = Context::getContext()->getTranslator()->trans('Tab \"%s\" is not valid', [$tab->name[(int) $id_lang]], 'Admin.International.Notification');\n                            } else {\n                                $tab->update();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $errors;\n    }\n\n    public static function checkTranslationFile($content)\n    {\n        $lines = array_map('trim', explode(\"\\n\", $content));\n        $global = false;\n        foreach ($lines as $line) {\n            // PHP tags\n            if (in_array($line, ['<?php', '?>', ''])) {\n                continue;\n            }\n\n            // Global variable declaration\n            if (!$global && preg_match('/^global\\s+\\$([a-z0-9-_]+)\\s*;$/i', $line, $matches)) {\n                $global = $matches[1];\n\n                continue;\n            }\n            // Global variable initialization\n            if ($global != false && preg_match('/^\\$' . preg_quote($global, '/') . '\\s*=\\s*array\\(\\s*\\)\\s*;$/i', $line)) {\n                continue;\n            }\n\n            // Global variable initialization without declaration\n            if (!$global && preg_match('/^\\$([a-z0-9-_]+)\\s*=\\s*array\\(\\s*\\)\\s*;$/i', $line, $matches)) {\n                $global = $matches[1];\n\n                continue;\n            }\n\n            // Assignation\n            if (preg_match('/^\\$' . preg_quote($global, '/') . '\\[\\'' . _PS_TRANS_PATTERN_ . '\\'\\]\\s*=\\s*\\'' . _PS_TRANS_PATTERN_ . '\\'\\s*;$/i', $line)) {\n                continue;\n            }\n\n            // Sometimes the global variable is returned...\n            if (preg_match('/^return\\s+\\$' . preg_quote($global, '/') . '\\s*;$/i', $line, $matches)) {\n                continue;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    public function submitImportLang()\n    {\n        if (!isset($_FILES['file']['tmp_name']) || !$_FILES['file']['tmp_name']) {\n            $this->errors[] = $this->trans('No file has been selected.', [], 'Admin.Notifications.Error');\n        } else {\n            $gz = new Archive_Tar($_FILES['file']['tmp_name'], 'gz');\n            $filename = $_FILES['file']['name'];\n            $iso_code = str_replace(['.tar.gz', '.gzip'], '', $filename);\n\n            if (Validate::isLangIsoCode($iso_code)) {\n                $themes_selected = Tools::getValue('theme', [self::DEFAULT_THEME_NAME]);\n                $files_list = AdminTranslationsController::filterTranslationFiles($gz->listContent());\n                $files_paths = AdminTranslationsController::filesListToPaths($files_list);\n\n                $uniqid = uniqid();\n                $sandbox = _PS_CACHE_DIR_ . 'sandbox' . DIRECTORY_SEPARATOR . $uniqid . DIRECTORY_SEPARATOR;\n                /** @var bool $statusExtract */\n                $statusExtract = $gz->extractList($files_paths, $sandbox);\n                if ($statusExtract) {\n                    foreach ($files_list as $file2check) {\n                        //don't validate index.php, will be overwrite when extract in translation directory\n                        if (pathinfo($file2check['filename'], PATHINFO_BASENAME) == 'index.php') {\n                            continue;\n                        }\n\n                        if (preg_match('@^[0-9a-z-_/\\\\\\\\]+\\.php$@i', $file2check['filename'])) {\n                            if (!@filemtime($sandbox . $file2check['filename']) || !AdminTranslationsController::checkTranslationFile(file_get_contents($sandbox . $file2check['filename']))) {\n                                $this->errors[] = $this->trans('Validation failed for: %file%', ['%file%' => $file2check['filename']], 'Admin.International.Notification');\n                            }\n                        } elseif (!preg_match('@mails[0-9a-z-_/\\\\\\\\]+\\.(html|tpl|txt)$@i', $file2check['filename'])) {\n                            $this->errors[] = $this->trans('Unidentified file found: %file%', ['%file%' => $file2check['filename']], 'Admin.International.Notification');\n                        }\n                    }\n                    Tools::deleteDirectory($sandbox, true);\n                }\n\n                $i = 0;\n                $tmp_array = [];\n                foreach ($files_paths as $files_path) {\n                    $path = dirname($files_path);\n                    if (is_dir(_PS_TRANSLATIONS_DIR_ . '../' . $path) && !is_writable(_PS_TRANSLATIONS_DIR_ . '../' . $path) && !in_array($path, $tmp_array)) {\n                        $this->errors[] = (!$i++ ? $this->trans('The archive cannot be extracted.', [], 'Admin.International.Notification') . ' ' : '') . $this->trans('The server does not have permissions for writing.', [], 'Admin.Notifications.Error') . ' ' . $this->trans('Please check rights for %file%', ['%file%' => $path], 'Admin.Notifications.Error');\n                        $tmp_array[] = $path;\n                    }\n                }\n\n                if (count($this->errors)) {\n                    return false;\n                }\n\n                /** @var bool $error */\n                $error = $gz->extractList($files_paths, _PS_TRANSLATIONS_DIR_ . '../');\n                if ($error) {\n                    foreach ($files_list as $file2check) {\n                        if (pathinfo($file2check['filename'], PATHINFO_BASENAME) == 'index.php' && file_put_contents(_PS_TRANSLATIONS_DIR_ . '../' . $file2check['filename'], Tools::getDefaultIndexContent())) {\n                            continue;\n                        }\n                    }\n\n                    // Clear smarty modules cache\n                    Tools::clearCache();\n\n                    if (Validate::isLanguageFileName($filename)) {\n                        if (!Language::checkAndAddLanguage($iso_code)) {\n                            $conf = 20;\n                        } else {\n                            // Reset cache\n                            Language::loadLanguages();\n\n                            AdminTranslationsController::checkAndAddMailsFiles($iso_code, $files_list);\n                            $this->checkAndAddThemesFiles($files_list, $themes_selected);\n                            $tab_errors = AdminTranslationsController::addNewTabs($iso_code, $files_list);\n\n                            if (count($tab_errors)) {\n                                $this->errors += $tab_errors;\n\n                                return false;\n                            }\n                        }\n                    }\n\n                    /*\n                     * @see AdminController::$_conf\n                     */\n                    $this->redirect(false, (isset($conf) ? $conf : '15'));\n                } else {\n                    $this->errors[] = $this->trans('The archive cannot be extracted.', [], 'Admin.International.Notification');\n                }\n            } else {\n                $this->errors[] = $this->trans('ISO CODE invalid \"%iso_code%\" for the following file: \"%file%\"', ['%iso_code%' => $iso_code, '%file%' => $filename], 'Admin.International.Notification');\n            }\n        }\n    }\n\n    /**\n     * Filter the translation files contained in a .gzip pack\n     * and return only the ones that we want.\n     *\n     * Right now the function only needs to check that\n     * the modules for which we want to add translations\n     * are present on the shop (installed or not).\n     *\n     * @param array $list Is the output of Archive_Tar::listContent()\n     *\n     * @return array\n     */\n    public static function filterTranslationFiles($list)\n    {\n        $kept = [];\n        foreach ($list as $file) {\n            if ('index.php' == basename($file['filename'])) {\n                continue;\n            }\n            if (preg_match('#^modules/([^/]+)/#', $file['filename'], $m)) {\n                if (is_dir(_PS_MODULE_DIR_ . $m[1])) {\n                    $kept[] = $file;\n                }\n            } else {\n                $kept[] = $file;\n            }\n        }\n\n        return $kept;\n    }\n\n    /**\n     * Turn the list returned by\n     * AdminTranslationsController::filterTranslationFiles()\n     * into a list of paths that can be passed to\n     * Archive_Tar::extractList().\n     *\n     * @param array $list\n     *\n     * @return array\n     */\n    public static function filesListToPaths($list)\n    {\n        $paths = [];\n        foreach ($list as $item) {\n            $paths[] = $item['filename'];\n        }\n\n        return $paths;\n    }\n\n    public function submitAddLang()\n    {\n        $languageDetails = Language::getJsonLanguageDetails(Tools::getValue('params_import_language'));\n        $isoCode = $languageDetails['iso_code'];\n\n        if (Validate::isLangIsoCode($isoCode)) {\n            $success = Language::downloadAndInstallLanguagePack($isoCode, _PS_VERSION_, null, true);\n            if ($success === true) {\n                Language::loadLanguages();\n                Tools::clearAllCache();\n\n                /* @see AdminController::$_conf */\n                $this->redirect(false, 15);\n            } else {\n                foreach ($success as $error) {\n                    $this->errors[] = $error;\n                }\n            }\n        }\n    }\n\n    /**\n     * This method check each file (tpl or php file), get its sentences to translate,\n     * compare with posted values and write in iso code translation file.\n     *\n     * @param string $file_name\n     * @param array $files\n     * @param string $theme_name\n     * @param string $module_name\n     * @param string|bool $dir\n     *\n     * @throws PrestaShopException\n     */\n    protected function findAndWriteTranslationsIntoFile($file_name, $files, $theme_name, $module_name, $dir = false)\n    {\n        // These static vars allow to use file to write just one time.\n        static $cache_file = [];\n        static $str_write = '';\n        static $array_check_duplicate = [];\n\n        // Set file_name in static var, this allow to open and wright the file just one time\n        if (!isset($cache_file[$theme_name . '-' . $file_name])) {\n            $str_write = '';\n            $cache_file[$theme_name . '-' . $file_name] = true;\n            if (!Tools::file_exists_cache(dirname($file_name))) {\n                mkdir(dirname($file_name), FileSystem::DEFAULT_MODE_FOLDER, true);\n            }\n            if (!Tools::file_exists_cache($file_name)) {\n                file_put_contents($file_name, '');\n            }\n            if (!is_writable($file_name)) {\n                throw new PrestaShopException($this->trans('Cannot write to the theme\\'s language file (%s). Please check writing permissions.', [$file_name], 'Admin.International.Notification'));\n            }\n\n            // this string is initialized one time for a file\n            $str_write .= \"<?php\\n\\nglobal \\$_MODULE;\\n\\$_MODULE = array();\\n\";\n            $array_check_duplicate = [];\n        }\n\n        foreach ($files as $file) {\n            if (preg_match('/^(.*)\\.(tpl|php)$/', $file) && Tools::file_exists_cache($dir . $file) && !in_array($file, self::$ignore_folder)) {\n                // Get content for this file\n                $content = file_get_contents($dir . $file);\n\n                // Get file type\n                $type_file = substr($file, -4) == '.tpl' ? 'tpl' : 'php';\n\n                // Parse this content\n                $matches = $this->userParseFile($content, $this->type_selected, $type_file, $module_name);\n\n                // Write each translation on its module file\n                $template_name = substr(basename($file), 0, -4);\n\n                foreach ($matches as $key) {\n                    if ($theme_name) {\n                        $post_key = md5(strtolower($module_name) . '_' . strtolower($theme_name) . '_' . strtolower($template_name) . '_' . md5($key));\n                        $pattern = '\\'<{' . strtolower($module_name) . '}' . strtolower($theme_name) . '>' . strtolower($template_name) . '_' . md5($key) . '\\'';\n                    } else {\n                        $post_key = md5(strtolower($module_name) . '_' . strtolower($template_name) . '_' . md5($key));\n                        $pattern = '\\'<{' . strtolower($module_name) . '}prestashop>' . strtolower($template_name) . '_' . md5($key) . '\\'';\n                    }\n\n                    if (array_key_exists($post_key, $_POST) && !in_array($pattern, $array_check_duplicate)) {\n                        if ($_POST[$post_key] == '') {\n                            continue;\n                        }\n                        $array_check_duplicate[] = $pattern;\n                        $str_write .= '$_MODULE[' . $pattern . '] = \\'' . pSQL(str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], ' ', $_POST[$post_key])) . '\\';' . \"\\n\";\n                        ++$this->total_expression;\n                    }\n                }\n            }\n        }\n\n        if (isset($cache_file[$theme_name . '-' . $file_name]) && $str_write != \"<?php\\n\\nglobal \\$_MODULE;\\n\\$_MODULE = array();\\n\") {\n            file_put_contents($file_name, $str_write);\n        }\n    }\n\n    /**\n     * Clear the list of module file by type (file or directory).\n     *\n     * @param array $files List of files\n     * @param string $type_clear (file|directory)\n     * @param string $path\n     *\n     * @return array : list of a good files\n     */\n    public function clearModuleFiles($files, $type_clear = 'file', $path = '')\n    {\n        // List of directory which not must be parsed\n        $arr_exclude = ['img', 'js', 'mails', 'override'];\n\n        // List of good extention files\n        $arr_good_ext = ['.tpl', '.php'];\n\n        foreach ($files as $key => $file) {\n            if ($file[0] === '.' || in_array(substr($file, 0, strrpos($file, '.')), $this->all_iso_lang)) {\n                unset($files[$key]);\n            } elseif ($type_clear === 'file' && !in_array(substr($file, strrpos($file, '.')), $arr_good_ext)) {\n                unset($files[$key]);\n            } elseif ($type_clear === 'directory' && (!is_dir($path . $file) || in_array($file, $arr_exclude))) {\n                unset($files[$key]);\n            }\n        }\n\n        return $files;\n    }\n\n    /**\n     * This method get translation for each files of a module,\n     * compare with global $_MODULES array and fill AdminTranslations::modules_translations array\n     * With key as English sentences and values as their iso code translations.\n     *\n     * @param array $files\n     * @param string $theme_name\n     * @param string $module_name\n     * @param string|bool $dir\n     */\n    protected function findAndFillTranslations($files, $theme_name, $module_name, $dir = false)\n    {\n        $name_var = (empty($this->translations_informations[$this->type_selected]['var']) ? false : $this->translations_informations[$this->type_selected]['var']);\n\n        // added for compatibility\n        $GLOBALS[$name_var] = array_change_key_case($GLOBALS[$name_var]);\n\n        // Thank to this var similar keys are not duplicate\n        // in AndminTranslation::modules_translations array\n        // see below\n        $array_check_duplicate = [];\n        foreach ($files as $file) {\n            if ((preg_match('/^(.*).tpl$/', $file) || preg_match('/^(.*).php$/', $file)) && Tools::file_exists_cache($file_path = $dir . $file)) {\n                // Get content for this file\n                $content = file_get_contents($file_path);\n\n                // Module files can now be ignored by adding this string in a file\n                if (strpos($content, 'IGNORE_THIS_FILE_FOR_TRANSLATION') !== false) {\n                    continue;\n                }\n\n                // Get file type\n                $type_file = substr($file, -4) == '.tpl' ? 'tpl' : 'php';\n\n                // Parse this content\n                $matches = $this->userParseFile($content, $this->type_selected, $type_file, $module_name);\n\n                // Write each translation on its module file\n                $template_name = substr(basename($file), 0, -4);\n\n                foreach ($matches as $key) {\n                    $md5_key = md5($key);\n                    $module_key = '<{' . Tools::strtolower($module_name) . '}' . strtolower($theme_name) . '>' . Tools::strtolower($template_name) . '_' . $md5_key;\n                    $default_key = '<{' . Tools::strtolower($module_name) . '}prestashop>' . Tools::strtolower($template_name) . '_' . $md5_key;\n                    // to avoid duplicate entry\n                    if (!in_array($module_key, $array_check_duplicate)) {\n                        $array_check_duplicate[] = $module_key;\n                        if (!isset($this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'])) {\n                            ++$this->total_expression;\n                        }\n                        if ($theme_name && array_key_exists($module_key, $GLOBALS[$name_var])) {\n                            $this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$module_key], ENT_COMPAT, 'UTF-8');\n                        } elseif (array_key_exists($default_key, $GLOBALS[$name_var])) {\n                            $this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$default_key], ENT_COMPAT, 'UTF-8');\n                        } else {\n                            $this->modules_translations[$theme_name][$module_name][$template_name][$key]['trad'] = '';\n                            ++$this->missing_translations;\n                        }\n                        $this->modules_translations[$theme_name][$module_name][$template_name][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get list of files which must be parsed by directory and by type of translations.\n     *\n     * @return array : list of files by directory\n     */\n    public function getFileToParseByTypeTranslation()\n    {\n        $directories = [];\n\n        switch ($this->type_selected) {\n            case 'front':\n                $directories['php'] = [\n                    _PS_FRONT_CONTROLLER_DIR_ => scandir(_PS_FRONT_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/front/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/front/', SCANDIR_SORT_NONE),\n                    _PS_CLASS_DIR_ . 'controller/' => ['FrontController.php'],\n                ];\n\n                $directories['tpl'] = [_PS_ALL_THEMES_DIR_ => scandir(_PS_ALL_THEMES_DIR_, SCANDIR_SORT_NONE)];\n                self::$ignore_folder[] = 'modules';\n                $directories['tpl'] = array_merge($directories['tpl'], $this->listFiles(_PS_THEME_SELECTED_DIR_));\n                if (isset($directories['tpl'][_PS_THEME_SELECTED_DIR_ . 'pdf/'])) {\n                    unset($directories['tpl'][_PS_THEME_SELECTED_DIR_ . 'pdf/']);\n                }\n\n                break;\n\n            case 'back':\n                $directories = [\n                    'php' => [\n                        _PS_ADMIN_CONTROLLER_DIR_ => scandir(_PS_ADMIN_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                        _PS_OVERRIDE_DIR_ . 'controllers/admin/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/admin/', SCANDIR_SORT_NONE),\n                        _PS_CLASS_DIR_ . 'helper/' => scandir(_PS_CLASS_DIR_ . 'helper/', SCANDIR_SORT_NONE),\n                        _PS_CLASS_DIR_ . 'controller/' => ['AdminController.php'],\n                        _PS_CLASS_DIR_ => ['PaymentModule.php'],\n                    ],\n                    'php-sf2' => [\n                        _PS_ROOT_DIR_ . '/src/' => Tools::scandir(_PS_ROOT_DIR_ . '/src/', 'php', '', true),\n                    ],\n                    'tpl-sf2' => Tools::scandir(_PS_ROOT_DIR_ . '/src/PrestaShopBundle/Resources/views/', 'twig', '', true),\n                    'tpl' => $this->listFiles(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR . 'themes/'),\n                    'specific' => [\n                        _PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR => [],\n                    ],\n                ];\n\n                // For translate the template which are overridden\n                if (file_exists(_PS_OVERRIDE_DIR_ . 'controllers' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'templates')) {\n                    $directories['tpl'] = array_merge($directories['tpl'], $this->listFiles(_PS_OVERRIDE_DIR_ . 'controllers' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'templates'));\n                }\n\n                break;\n\n            case 'errors':\n                $directories['php'] = [\n                    _PS_ROOT_DIR_ => scandir(_PS_ROOT_DIR_, SCANDIR_SORT_NONE),\n                    _PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR => scandir(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR, SCANDIR_SORT_NONE),\n                    _PS_FRONT_CONTROLLER_DIR_ => scandir(_PS_FRONT_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_ADMIN_CONTROLLER_DIR_ => scandir(_PS_ADMIN_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/front/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/front/', SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/admin/' => scandir(_PS_OVERRIDE_DIR_ . 'controllers/admin/', SCANDIR_SORT_NONE),\n                ];\n\n                // Get all files for folders classes/ and override/classes/ recursively\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_CLASS_DIR_, [], 'php'));\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_OVERRIDE_DIR_ . 'classes/', [], 'php'));\n\n                break;\n\n            case 'fields':\n                $directories['php'] = $this->listFiles(_PS_CLASS_DIR_, [], 'php');\n\n                break;\n\n            case 'pdf':\n                $tpl_theme = Tools::file_exists_cache(_PS_THEME_SELECTED_DIR_ . 'pdf/') ? scandir(_PS_THEME_SELECTED_DIR_ . 'pdf/', SCANDIR_SORT_NONE) : [];\n                $directories = [\n                    'php' => [\n                        _PS_CLASS_DIR_ . 'pdf/' => scandir(_PS_CLASS_DIR_ . 'pdf/', SCANDIR_SORT_NONE),\n                        _PS_OVERRIDE_DIR_ . 'classes/pdf/' => scandir(_PS_OVERRIDE_DIR_ . 'classes/pdf/', SCANDIR_SORT_NONE),\n                    ],\n                    'tpl' => [\n                        _PS_PDF_DIR_ => scandir(_PS_PDF_DIR_, SCANDIR_SORT_NONE),\n                        _PS_THEME_SELECTED_DIR_ . 'pdf/' => $tpl_theme,\n                    ],\n                ];\n                $directories['tpl'] = array_merge($directories['tpl'], $this->getModulesHasPDF());\n                $directories['php'] = array_merge($directories['php'], $this->getModulesHasPDF(true));\n\n                break;\n\n            case 'mails':\n                $directories['php'] = [\n                    _PS_FRONT_CONTROLLER_DIR_ => scandir(_PS_FRONT_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_ADMIN_CONTROLLER_DIR_ => scandir(_PS_ADMIN_CONTROLLER_DIR_, SCANDIR_SORT_NONE),\n                    _PS_OVERRIDE_DIR_ . 'controllers/front/' => is_dir(_PS_OVERRIDE_DIR_ . 'controllers/front/') ? scandir(_PS_OVERRIDE_DIR_ . 'controllers/front/', SCANDIR_SORT_NONE) : [],\n                    _PS_OVERRIDE_DIR_ . 'controllers/admin/' => is_dir(_PS_OVERRIDE_DIR_ . 'controllers/admin/') ? scandir(_PS_OVERRIDE_DIR_ . 'controllers/admin/', SCANDIR_SORT_NONE) : [],\n                    _PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR => scandir(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR, SCANDIR_SORT_NONE),\n                ];\n\n                // Get all files for folders classes/ and override/classes/ recursively\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_CLASS_DIR_, [], 'php'));\n                $directories['php'] = array_merge($directories['php'], $this->listFiles(_PS_OVERRIDE_DIR_ . 'classes/', [], 'php'));\n                $directories['php'] = array_merge($directories['php'], $this->getModulesHasMails());\n\n                break;\n        }\n\n        return $directories;\n    }\n\n    /**\n     * This method parse a file by type of translation and type file.\n     *\n     * @param string $content\n     * @param string $type_translation front, back, errors, modules...\n     * @param string|bool $type_file (tpl|php)\n     * @param string $module_name name of the module\n     *\n     * @return array\n     */\n    protected function userParseFile($content, $type_translation, $type_file = false, $module_name = '')\n    {\n        switch ($type_translation) {\n            case 'front':\n                // Parsing file in Front office\n                if ($type_file == 'php') {\n                    $regex = '/this->l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'[\\)|\\,]/U';\n                } else {\n                    $regex = '/\\{l\\s*s=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1(\\s*sprintf=.*)?(\\s*js=1)?\\s*\\}/U';\n                }\n\n                break;\n\n            case 'back':\n                // Parsing file in Back office\n                if ($type_file == 'php') {\n                    $regex = '/this->l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'[\\)|\\,]/U';\n                } elseif ($type_file == 'specific') {\n                    $regex = '/Translate::getAdminTranslation\\((\\')' . _PS_TRANS_PATTERN_ . '\\'(?:,.*)*\\)/U';\n                } else {\n                    $regex = '/\\{l\\s*s\\s*=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1(\\s*sprintf=.*)?(\\s*js=1)?(\\s*slashes=1)?.*\\}/U';\n                }\n\n                break;\n\n            case 'errors':\n                // Parsing file for all errors syntax\n                $regex = '/Tools::displayError\\((\\')' . _PS_TRANS_PATTERN_ . '\\'(,\\s*(.+))?\\)/U';\n\n                break;\n\n            case 'modules':\n                // Parsing modules file\n                if ($type_file == 'php') {\n                    $regex = '/->l\\(\\s*(\\')' . _PS_TRANS_PATTERN_ . '\\'(\\s*,\\s*?\\'(.+)\\')?(\\s*,\\s*?(.+))?\\s*\\)/Ums';\n                } else {\n                    // In tpl file look for something that should contain mod='module_name' according to the documentation\n                    $regex = '/\\{l\\s*s=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1.*\\s+mod=\\'' . $module_name . '\\'.*\\}/U';\n                }\n\n                break;\n\n            case 'pdf':\n                // Parsing PDF file\n                if ($type_file == 'php') {\n                    $regex = [\n                        '/HTMLTemplate.*::l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'[\\)|\\,]/U',\n                        '/->l\\((\\')' . _PS_TRANS_PATTERN_ . '\\'(, ?\\'(.+)\\')?(, ?(.+))?\\)/U',\n                    ];\n                } else {\n                    $regex = '/\\{l\\s*s=([\\'\\\"])' . _PS_TRANS_PATTERN_ . '\\1(\\s*sprintf=.*)?(\\s*js=1)?(\\s*pdf=\\'true\\')?\\s*\\}/U';\n                }\n\n                break;\n            default:\n                $regex = [];\n        }\n\n        if (!is_array($regex)) {\n            $regex = [$regex];\n        }\n\n        $strings = [];\n        foreach ($regex as $regex_row) {\n            $matches = [];\n            $n = preg_match_all($regex_row, $content, $matches);\n            for ($i = 0; $i < $n; ++$i) {\n                $quote = $matches[1][$i];\n                $string = $matches[2][$i];\n\n                if ($quote === '\"') {\n                    // Escape single quotes because the core will do it when looking for the translation of this string\n                    $string = str_replace('\\'', '\\\\\\'', $string);\n                    // Unescape double quotes\n                    $string = preg_replace('/\\\\\\\\+\"/', '\"', $string);\n                }\n\n                $strings[] = $string;\n            }\n        }\n\n        return array_unique($strings);\n    }\n\n    /**\n     * Get all translations informations for all type of translations.\n     *\n     * array(\n     *  'type' => array(\n     *      'name' => string : title for the translation type,\n     *      'var' => string : name of var for the translation file,\n     *      'dir' => string : dir of translation file\n     *      'file' => string : file name of translation file\n     *  )\n     * )\n     */\n    public function getTranslationsInformations()\n    {\n        $this->translations_informations = [\n            'back' => [\n                'name' => $this->trans('Back office translations', [], 'Admin.International.Feature'),\n                'var' => '_LANGADM',\n                'dir' => _PS_TRANSLATIONS_DIR_ . $this->lang_selected->iso_code . '/',\n                'file' => 'admin.php',\n                'sf_controller' => true,\n                'choice_theme' => false,\n            ],\n            'themes' => [\n                'name' => $this->trans('Themes translations', [], 'Admin.International.Feature'),\n                'var' => '_THEMES',\n                'dir' => '',\n                'file' => '',\n                'sf_controller' => true,\n                'choice_theme' => true,\n            ],\n            'modules' => [\n                'name' => $this->trans('Installed modules translations', [], 'Admin.International.Feature'),\n                'var' => '_MODULES',\n                'dir' => _PS_ROOT_DIR_ . '/modules/',\n                'file' => '',\n                'sf_controller' => true,\n                'choice_theme' => false,\n            ],\n            'mails' => [\n                'name' => $this->trans('Email translations', [], 'Admin.International.Feature'),\n                'var' => '_LANGMAIL',\n                'dir' => _PS_MAIL_DIR_ . $this->lang_selected->iso_code . '/',\n                'file' => 'lang.php',\n                'sf_controller' => false,\n                'choice_theme' => false,\n            ],\n            'others' => [\n                'name' => $this->trans('Other translations', [], 'Admin.International.Feature'),\n                'var' => '_OTHERS',\n                'dir' => '',\n                'file' => '',\n                'sf_controller' => true,\n                'choice_theme' => false,\n            ],\n        ];\n\n        if (defined('_PS_THEME_SELECTED_DIR_')) {\n            $this->translations_informations['modules']['override'] = ['dir' => _PS_THEME_SELECTED_DIR_ . 'modules/', 'file' => ''];\n            $this->translations_informations['mails']['override'] = ['dir' => _PS_THEME_SELECTED_DIR_ . 'mails/' . $this->lang_selected->iso_code . '/', 'file' => 'lang.php'];\n        }\n    }\n\n    /**\n     * Get all informations on : languages, theme and the translation type.\n     */\n    public function getInformations()\n    {\n        // Get all Languages\n        $this->languages = Language::getLanguages(false);\n\n        // Get all iso_code of languages\n        foreach ($this->languages as $language) {\n            $this->all_iso_lang[] = $language['iso_code'];\n        }\n\n        // Get folder name of theme\n        if (($theme = Tools::getValue('selected-theme')) && !is_array($theme)) {\n            $theme_exists = $this->theme_exists($theme);\n            if (!$theme_exists) {\n                throw new PrestaShopException($this->trans('Invalid theme \"%theme%\"', ['%theme%' => Tools::safeOutput($theme)], 'Admin.International.Notification'));\n            }\n            $this->theme_selected = Tools::safeOutput($theme);\n        }\n\n        // Set the path of selected theme\n        if ($this->theme_selected) {\n            define('_PS_THEME_SELECTED_DIR_', _PS_ROOT_DIR_ . '/themes/' . $this->theme_selected . '/');\n        } else {\n            define('_PS_THEME_SELECTED_DIR_', '');\n        }\n\n        // Get type of translation\n        if (($type = Tools::getValue('type')) && !is_array($type)) {\n            $this->type_selected = strtolower(Tools::safeOutput($type));\n        }\n\n        // Get selected language\n        if (Tools::getValue('lang') || Tools::getValue('iso_code')) {\n            $iso_code = Tools::getValue('lang') ? Tools::getValue('lang') : Tools::getValue('iso_code');\n\n            if (!Validate::isLangIsoCode($iso_code) || !in_array($iso_code, $this->all_iso_lang)) {\n                throw new PrestaShopException($this->trans('Invalid iso code \"%iso_code%\"', ['%iso_code%' => Tools::safeOutput($iso_code)], 'Admin.International.Notification'));\n            }\n\n            $this->lang_selected = new Language((int) Language::getIdByIso($iso_code));\n        } else {\n            $this->lang_selected = new Language((int) Language::getIdByIso('en'));\n        }\n\n        // Get all information for translations\n        $this->getTranslationsInformations();\n    }\n\n    public function renderKpis()\n    {\n        $time = time();\n        $kpis = [];\n\n        /* The data generation is located in AdminStatsControllerCore */\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-languages';\n        $helper->icon = 'icon-microphone';\n        $helper->color = 'color1';\n        $helper->href = $this->context->link->getAdminLink('AdminLanguages');\n        $helper->title = $this->trans('Enabled Languages', [], 'Admin.International.Feature');\n        if (ConfigurationKPI::get('ENABLED_LANGUAGES') !== false) {\n            $helper->value = ConfigurationKPI::get('ENABLED_LANGUAGES');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=enabled_languages';\n        $helper->refresh = (bool) (ConfigurationKPI::get('ENABLED_LANGUAGES_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-country';\n        $helper->icon = 'icon-home';\n        $helper->color = 'color2';\n        $helper->title = $this->trans('Main Country', [], 'Admin.International.Feature');\n        $helper->subtitle = $this->trans('30 Days', [], 'Admin.Global');\n        if (ConfigurationKPI::get('MAIN_COUNTRY', $this->context->language->id) !== false) {\n            $helper->value = ConfigurationKPI::get('MAIN_COUNTRY', $this->context->language->id);\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=main_country';\n        $helper->refresh = (bool) (ConfigurationKPI::get('MAIN_COUNTRY_EXPIRE', $this->context->language->id) < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpi();\n        $helper->id = 'box-translations';\n        $helper->icon = 'icon-list';\n        $helper->color = 'color3';\n        $helper->title = $this->trans('Front office Translations', [], 'Admin.International.Feature');\n        if (ConfigurationKPI::get('FRONTOFFICE_TRANSLATIONS') !== false) {\n            $helper->value = ConfigurationKPI::get('FRONTOFFICE_TRANSLATIONS');\n        }\n        $helper->source = $this->context->link->getAdminLink('AdminStats') . '&ajax=1&action=getKpi&kpi=frontoffice_translations';\n        $helper->refresh = (bool) (ConfigurationKPI::get('FRONTOFFICE_TRANSLATIONS_EXPIRE') < $time);\n        $kpis[] = $helper->generate();\n\n        $helper = new HelperKpiRow();\n        $helper->kpis = $kpis;\n\n        return $helper->generate();\n    }\n\n    /**\n     * AdminController::postProcess() override.\n     *\n     * @see AdminController::postProcess()\n     */\n    public function postProcess()\n    {\n        $this->getInformations();\n\n        /* PrestaShop demo mode */\n        if (_PS_MODE_DEMO_) {\n            $this->errors[] = $this->trans('This functionality has been disabled.', [], 'Admin.Notifications.Error');\n\n            return;\n        }\n        /* PrestaShop demo mode */\n\n        try {\n            if (Tools::isSubmit('submitCopyLang')) {\n                if ($this->access('add')) {\n                    $this->submitCopyLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitExport')) {\n                if ($this->access('add')) {\n                    $this->submitExportLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitImport')) {\n                if ($this->access('add')) {\n                    $this->submitImportLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitAddLanguage')) {\n                if ($this->access('add')) {\n                    $this->submitAddLang();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsPdf')) {\n                if ($this->access('edit')) {\n                    // Only the PrestaShop team should write the translations into the _PS_TRANSLATIONS_DIR_\n                    if (!$this->theme_selected) {\n                        $this->writeTranslationFile();\n                    } else {\n                        $this->writeTranslationFile(true);\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsBack') || Tools::isSubmit('submitTranslationsErrors') || Tools::isSubmit('submitTranslationsFields') || Tools::isSubmit('submitTranslationsFront')) {\n                if ($this->access('edit')) {\n                    $this->writeTranslationFile();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsMails') || Tools::isSubmit('submitTranslationsMailsAndStay')) {\n                if ($this->access('edit')) {\n                    $this->submitTranslationsMails();\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitTranslationsModules')) {\n                if ($this->access('edit')) {\n                    // Get list of modules\n                    if ($modules = $this->getListModules()) {\n                        // Get files of all modules\n                        $arr_files = $this->getAllModuleFiles($modules, null, $this->lang_selected->iso_code, true);\n\n                        // Find and write all translation modules files\n                        foreach ($arr_files as $value) {\n                            $this->findAndWriteTranslationsIntoFile($value['file_name'], $value['files'], $value['theme'], $value['module'], $value['dir']);\n                        }\n\n                        // Clear modules cache\n                        Tools::clearAllCache();\n\n                        // Redirect\n                        if (Tools::getIsset('submitTranslationsModulesAndStay')) {\n                            $this->redirect(true);\n                        } else {\n                            $this->redirect();\n                        }\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', [], 'Admin.Notifications.Error');\n                }\n            } elseif (Tools::isSubmit('submitSelectModules')) {\n                $this->redirect(false, false, true);\n            }\n        } catch (PrestaShopException $e) {\n            $this->errors[] = $e->getMessage();\n        }\n    }\n\n    /**\n     * This method redirect in the translation main page or in the translation page.\n     *\n     * @param bool $save_and_stay : true if the user has clicked on the button \"save and stay\"\n     * @param bool|int $conf : id of confirmation message\n     * @param bool $modify_translation : true if the user has clicked on the button \"Modify translation\"\n     */\n    protected function redirect($save_and_stay = false, $conf = false, $modify_translation = false)\n    {\n        $conf = !$conf ? 4 : $conf;\n        $url_base = self::$currentIndex . '&token=' . $this->token . '&conf=' . $conf;\n        if ($modify_translation) {\n            Tools::redirectAdmin(self::$currentIndex . '&token=' . $this->token . '&lang=' . Tools::getValue('langue') . '&type=' . $this->type_selected . '&module=' . Tools::getValue('module') . '&selected-theme=' . $this->theme_selected);\n        } elseif ($save_and_stay) {\n            Tools::redirectAdmin($url_base . '&lang=' . $this->lang_selected->iso_code . '&type=' . $this->type_selected . '&module=' . Tools::getValue('module') . '&selected-theme=' . $this->theme_selected);\n        } else {\n            Tools::redirectAdmin($url_base . '&action=settings');\n        }\n    }\n\n    protected function getMailPattern()\n    {\n        Tools::displayAsDeprecated('Email pattern is no longer used, emails are always saved like they are.');\n        // Let the indentation like it.\n        return '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/1999/REC-html401-19991224/strict.dtd\">\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n</head>\n<body>\n    #content\n</body>\n</html>';\n    }\n\n    /**\n     * This method is used to write translation for mails.\n     * This writes subject translation files\n     * (in root/mails/lang_choosen/lang.php or root/_PS_THEMES_DIR_/mails/lang_choosen/lang.php)\n     * and mails files.\n     */\n    protected function submitTranslationsMails()\n    {\n        $arr_mail_content = [];\n        $arr_mail_path = [];\n\n        if (Tools::getValue('core_mail')) {\n            $arr_mail_content['core_mail'] = Tools::getValue('core_mail');\n\n            // Get path of directory for find a good path of translation file\n            if (!$this->theme_selected) {\n                $arr_mail_path['core_mail'] = $this->translations_informations[$this->type_selected]['dir'];\n            } else {\n                $arr_mail_path['core_mail'] = $this->translations_informations[$this->type_selected]['override']['dir'];\n            }\n        }\n\n        if (Tools::getValue('module_mail')) {\n            $arr_mail_content['module_mail'] = Tools::getValue('module_mail');\n\n            // Get path of directory for find a good path of translation file\n            if (!$this->theme_selected) {\n                $arr_mail_path['module_mail'] = $this->translations_informations['modules']['dir'] . '{module}/mails/' . $this->lang_selected->iso_code . '/';\n            } else {\n                $arr_mail_path['module_mail'] = $this->translations_informations['modules']['override']['dir'] . '{module}/mails/' . $this->lang_selected->iso_code . '/';\n            }\n        }\n\n        // Save each mail content\n        foreach ($arr_mail_content as $group_name => $all_content) {\n            foreach ($all_content as $type_content => $mails) {\n                if (!in_array($type_content, self::$content_type_accepted)) {\n                    throw new PrestaShopException($this->trans('This %type_content% file extension is not accepted.', ['%type_content%' => $type_content], 'Admin.International.Notification'));\n                }\n\n                foreach ($mails as $mail_name => $content) {\n                    $module_name = false;\n                    $module_name_pipe_pos = stripos($mail_name, '|');\n                    if ($module_name_pipe_pos) {\n                        $module_name = substr($mail_name, 0, $module_name_pipe_pos);\n                        if (!Validate::isModuleName($module_name)) {\n                            throw new PrestaShopException($this->trans('Invalid module name \"%module%\"', ['%module%' => Tools::safeOutput($module_name)], 'Admin.International.Notification'));\n                        }\n                        $mail_name = substr($mail_name, $module_name_pipe_pos + 1);\n                        if (!Validate::isTplName($mail_name)) {\n                            throw new PrestaShopException($this->trans('Invalid mail name \"%mail%\"', ['%mail%' => Tools::safeOutput($mail_name)], 'Admin.International.Notification'));\n                        }\n                    }\n\n                    if ($type_content == 'html') {\n                        $content = Tools::htmlentitiesUTF8($content);\n                        $content = htmlspecialchars_decode($content);\n                        // replace correct end of line\n                        $content = str_replace(\"\\r\\n\", PHP_EOL, $content);\n                    }\n\n                    if (Validate::isCleanHTML($content)) {\n                        $path = $arr_mail_path[$group_name] ?? '';\n                        if ($module_name) {\n                            $path = str_replace('{module}', $module_name, $path);\n                        }\n                        if (!file_exists($path) && !mkdir($path, FileSystem::DEFAULT_MODE_FOLDER, true)) {\n                            throw new PrestaShopException($this->trans('Directory \"%folder%\" cannot be created', ['%folder%' => dirname($path)], 'Admin.International.Notification'));\n                        }\n\n                        if ($type_content == 'tpl') {\n                            preg_match('/{\\s*[^$]+/s', $content, $matches);\n                            if (!empty($matches)) {\n                                throw new PrestaShopException($this->trans('Your email translations contain some invalid HTML and cannot be saved. Please check your content.', [], 'Admin.International.Notification'));\n                            }\n                        }\n\n                        file_put_contents($path . $mail_name . '.' . $type_content, $content);\n                    } else {\n                        throw new PrestaShopException($this->trans('Your HTML email templates cannot contain JavaScript code.', [], 'Admin.International.Notification'));\n                    }\n                }\n            }\n        }\n\n        // Update subjects\n        $array_subjects = [];\n        if (($subjects = Tools::getValue('subject')) && is_array($subjects)) {\n            $array_subjects['core_and_modules'] = ['translations' => [], 'path' => ($arr_mail_path['core_mail'] ?? '') . 'lang.php'];\n            foreach ($subjects as $subject_translation) {\n                $array_subjects['core_and_modules']['translations'] = array_merge($array_subjects['core_and_modules']['translations'], $subject_translation);\n            }\n        }\n        if (!empty($array_subjects)) {\n            foreach ($array_subjects as $infos) {\n                $this->writeSubjectTranslationFile($infos['translations'], $infos['path']);\n            }\n        }\n\n        if (Tools::isSubmit('submitTranslationsMailsAndStay')) {\n            $this->redirect(true);\n        } else {\n            $this->redirect();\n        }\n    }\n\n    /**\n     * Include file $dir/$file and return the var $var declared in it.\n     * This create the file if not exists.\n     *\n     * return array : translations\n     */\n    public function fileExists()\n    {\n        $var = $this->translations_informations[$this->type_selected]['var'];\n        $dir = $this->translations_informations[$this->type_selected]['dir'];\n        $file = $this->translations_informations[$this->type_selected]['file'];\n\n        $$var = [];\n        if (!Tools::file_exists_cache($dir)) {\n            if (!mkdir($dir, 0700)) {\n                throw new PrestaShopException('Directory ' . $dir . ' cannot be created.');\n            }\n        }\n        if (!Tools::file_exists_cache($dir . DIRECTORY_SEPARATOR . $file)) {\n            if (!file_put_contents($dir . '/' . $file, \"<?php\\n\\nglobal \\$\" . $var . \";\\n\\$\" . $var . \" = array();\\n\\n?>\")) {\n                throw new PrestaShopException('File \"' . $file . '\" doesn\\'t exists and cannot be created in ' . $dir);\n            }\n        }\n        if (!is_writable($dir . DIRECTORY_SEPARATOR . $file)) {\n            $this->displayWarning($this->trans('This file must be writable:', [], 'Admin.Notifications.Error') . ' ' . $dir . '/' . $file);\n        }\n        include $dir . DIRECTORY_SEPARATOR . $file;\n\n        return $$var;\n    }\n\n    public function displayToggleButton($closed = false)\n    {\n        $str_output = '\n        <script type=\"text/javascript\">';\n        if (Tools::getValue('type') == 'mails') {\n            $str_output .= '$(document).ready(function(){\n                toggleDiv(\\'' . $this->type_selected . '_div\\'); toggleButtonValue(this.id, openAll, closeAll);\n                });';\n        }\n        $str_output .= '\n            var openAll = \\'' . html_entity_decode($this->trans('Expand all fieldsets', [], 'Admin.International.Feature'), ENT_NOQUOTES, 'UTF-8') . '\\';\n            var closeAll = \\'' . html_entity_decode($this->trans('Close all fieldsets', [], 'Admin.International.Feature'), ENT_NOQUOTES, 'UTF-8') . '\\';\n        </script>\n        <button type=\"button\" class=\"btn btn-default\" id=\"buttonall\" data-status=\"open\" onclick=\"toggleDiv(\\'' . $this->type_selected . '_div\\', $(this).data(\\'status\\')); toggleButtonValue(this.id, openAll, closeAll);\"><i class=\"process-icon-compress\"></i> <span>' . $this->trans('Close all fieldsets', [], 'Admin.International.Feature') . '</span></button>';\n\n        return $str_output;\n    }\n\n    public function displayLimitPostWarning($count)\n    {\n        $return = [];\n        if ((ini_get('suhosin.post.max_vars') && ini_get('suhosin.post.max_vars') < $count) || (ini_get('suhosin.request.max_vars') && ini_get('suhosin.request.max_vars') < $count)) {\n            $return['error_type'] = 'suhosin';\n            $return['post.max_vars'] = ini_get('suhosin.post.max_vars');\n            $return['request.max_vars'] = ini_get('suhosin.request.max_vars');\n            $return['needed_limit'] = $count + 100;\n        } elseif (ini_get('max_input_vars') && ini_get('max_input_vars') < $count) {\n            $return['error_type'] = 'conf';\n            $return['max_input_vars'] = ini_get('max_input_vars');\n            $return['needed_limit'] = $count + 100;\n        }\n\n        return $return;\n    }\n\n    /**\n     * Find sentence which use %d, %s, %%, %1$d, %1$s...\n     *\n     * @param string $key English sentence\n     *\n     * @return string|bool List of matches\n     */\n    public function checkIfKeyUseSprintf($key)\n    {\n        if (preg_match_all('#(?:%%|%(?:[0-9]+\\$)?[+-]?(?:[ 0]|\\'.)?-?[0-9]*(?:\\.[0-9]+)?[bcdeufFosxX])#', $key, $matches)) {\n            return implode(', ', $matches[0]);\n        }\n\n        return false;\n    }\n\n    /**\n     * This method generate the form for front translations.\n     */\n    public function initFormFront()\n    {\n        if (!$this->theme_exists(Tools::getValue('theme'))) {\n            $this->errors[] = $this->trans('Invalid theme \"%theme%\"', ['%theme%' => Tools::getValue('theme')], 'Admin.International.Notification');\n\n            return;\n        }\n\n        $missing_translations_front = [];\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n\n        /* List templates to parse */\n        $files_by_directory = $this->getFileToParseByTypeTranslation();\n        $count = 0;\n        $tabs_array = [];\n        foreach ($files_by_directory as $file_type => $root_directory) {\n            foreach ($root_directory as $dir => $files) {\n                $prefix = '';\n\n                foreach ($files as $file) {\n                    if (preg_match('/^(.*).(tpl|php)$/', $file) && (Tools::file_exists_cache($file_path = $dir . $file))) {\n                        $prefix_key = $prefix . substr(basename($file), 0, -4);\n                        $new_lang = [];\n\n                        // Get content for this file\n                        $content = file_get_contents($file_path);\n\n                        // Parse this content\n                        $matches = $this->userParseFile($content, $this->type_selected, $file_type);\n\n                        /* Get string translation */\n                        foreach ($matches as $key) {\n                            if (empty($key)) {\n                                $this->errors[] = $this->trans('Empty string found, please edit: \"%file%\"', ['%file%' => $file_path], 'Admin.International.Notification');\n                                $new_lang[$key] = '';\n                            } else {\n                                // Caution ! front has underscore between prefix key and md5, back has not\n                                if (isset($GLOBALS[$name_var][$prefix_key . '_' . md5($key)])) {\n                                    $new_lang[$key]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . '_' . md5($key)], ENT_COMPAT, 'UTF-8'));\n                                } else {\n                                    if (!isset($new_lang[$key]['trad'])) {\n                                        $new_lang[$key]['trad'] = '';\n                                        if (!isset($missing_translations_front[$prefix_key])) {\n                                            $missing_translations_front[$prefix_key] = 1;\n                                        } else {\n                                            ++$missing_translations_front[$prefix_key];\n                                        }\n                                    }\n                                }\n                                $new_lang[$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                            }\n                        }\n\n                        if (isset($tabs_array[$prefix_key])) {\n                            $tabs_array[$prefix_key] = array_merge($tabs_array[$prefix_key], $new_lang);\n                        } else {\n                            $tabs_array[$prefix_key] = $new_lang;\n                        }\n\n                        $count += count($new_lang);\n                    }\n                }\n            }\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'missing_translations' => $missing_translations_front,\n            'count' => $count,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'limit_warning' => $this->displayLimitPostWarning($count),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * This method generate the form for back translations.\n     */\n    public function initFormBack()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n        $missing_translations_back = [];\n\n        // Get all types of file (PHP, TPL...) and a list of files to parse by folder\n        $files_per_directory = $this->getFileToParseByTypeTranslation();\n\n        //Parse SF2 php files\n        $regexSf2Php = [\n            '/->trans\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?[\\[|array\\(](.*)[\\]|\\)])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n            '/->transchoice\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?(.*))(,\\s*?[\\[|array\\(](.*)[\\]|\\)])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n        ];\n\n        $tabs_array = [];\n        foreach ($files_per_directory['php-sf2'] as $dir => $files) {\n            foreach ($files as $file) {\n                // Get content for this file\n                $content = file_get_contents($dir . $file);\n                if (!$content) {\n                    continue;\n                }\n\n                // Parse this content\n                foreach ($regexSf2Php as $reg) {\n                    preg_match_all($reg, $content, $matches);\n                    foreach ($matches[0] as $key => $match) {\n                        $domainKey = strpos($match, 'trans(') !== false ? 8 : 10;\n                        $stringToTranslate = $matches[2][$key];\n                        $prefix_key = $matches[$domainKey][$key];\n\n                        if ($prefix_key && $stringToTranslate) {\n                            if (isset($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)])) {\n                                $tabs_array[$prefix_key][$stringToTranslate]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)], ENT_COMPAT, 'UTF-8'));\n                            } else {\n                                if (!isset($tabs_array[$prefix_key][$stringToTranslate]['trad'])) {\n                                    $tabs_array[$prefix_key][$stringToTranslate]['trad'] = '';\n                                    if (!isset($missing_translations_back[$prefix_key])) {\n                                        $missing_translations_back[$prefix_key] = 1;\n                                    } else {\n                                        ++$missing_translations_back[$prefix_key];\n                                    }\n                                }\n                            }\n                            $tabs_array[$prefix_key][$stringToTranslate]['use_sprintf'] = $this->checkIfKeyUseSprintf($stringToTranslate);\n                        }\n                    }\n                }\n            }\n        }\n\n        //Parse SF2/Twig files\n        $regexSf2Tpl = [\n            '/trans\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?[\\{\\[](.*)[\\}\\]])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n            '/transchoice\\(([\\'\\\"])' . _PS_TRANS_PATTERN_ . '([\\'\\\"])(,\\s*?(.*))(,\\s*?[\\{\\[](.*)[\\}\\]])(,\\s*?([\\'\\\"])(.*)([\\'\\\"]))?\\)/Us',\n        ];\n\n        foreach ($files_per_directory['tpl-sf2'] as $file) {\n            // Get content for this file\n            $content = file_get_contents(_PS_ROOT_DIR_ . '/src/PrestaShopBundle/Resources/views/' . $file);\n            if (!$content) {\n                continue;\n            }\n\n            // Parse this content\n            foreach ($regexSf2Tpl as $reg) {\n                preg_match_all($reg, $content, $matches);\n                foreach ($matches[0] as $key => $match) {\n                    $domainKey = strpos($match, 'trans(') !== false ? 8 : 10;\n                    $stringToTranslate = $matches[2][$key];\n                    $prefix_key = $matches[$domainKey][$key];\n\n                    if ($prefix_key && $stringToTranslate) {\n                        if (isset($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)])) {\n                            $tabs_array[$prefix_key][$stringToTranslate]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($stringToTranslate)], ENT_COMPAT, 'UTF-8'));\n                        } else {\n                            if (!isset($tabs_array[$prefix_key][$stringToTranslate]['trad'])) {\n                                $tabs_array[$prefix_key][$stringToTranslate]['trad'] = '';\n                                if (!isset($missing_translations_back[$prefix_key])) {\n                                    $missing_translations_back[$prefix_key] = 1;\n                                } else {\n                                    ++$missing_translations_back[$prefix_key];\n                                }\n                            }\n                        }\n                        $tabs_array[$prefix_key][$stringToTranslate]['use_sprintf'] = $this->checkIfKeyUseSprintf($stringToTranslate);\n                    }\n                }\n            }\n        }\n\n        //Parse ps PHP files\n        foreach ($files_per_directory['php'] as $dir => $files) {\n            foreach ($files as $file) {\n                // Check if is a PHP file and if the override file exists\n                if (preg_match('/^(.*)\\.php$/', $file) && Tools::file_exists_cache($file_path = $dir . $file) && !in_array($file, self::$ignore_folder)) {\n                    $prefix_key = basename($file);\n                    // -4 becomes -14 to remove the ending \"Controller.php\" from the filename\n                    if (strpos($file, 'Controller.php') !== false) {\n                        $prefix_key = basename(substr($file, 0, -14));\n                    } elseif (strpos($file, 'Helper') !== false) {\n                        $prefix_key = 'Helper';\n                    }\n\n                    if ($prefix_key == 'Admin') {\n                        $prefix_key = 'AdminController';\n                    }\n\n                    if ($prefix_key == 'PaymentModule.php') {\n                        $prefix_key = 'PaymentModule';\n                    }\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected, 'php');\n\n                    foreach ($matches as $key) {\n                        // Caution ! front has underscore between prefix key and md5, back has not\n                        if (isset($GLOBALS[$name_var][$prefix_key . md5($key)])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($key)], ENT_COMPAT, 'UTF-8'));\n                        } else {\n                            if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                                $tabs_array[$prefix_key][$key]['trad'] = '';\n                                if (!isset($missing_translations_back[$prefix_key])) {\n                                    $missing_translations_back[$prefix_key] = 1;\n                                } else {\n                                    ++$missing_translations_back[$prefix_key];\n                                }\n                            }\n                        }\n                        $tabs_array[$prefix_key][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n\n        foreach ($files_per_directory['specific'] as $dir => $files) {\n            foreach ($files as $file) {\n                if (Tools::file_exists_cache($file_path = $dir . $file) && !in_array($file, self::$ignore_folder)) {\n                    $prefix_key = 'index';\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected, 'specific');\n\n                    foreach ($matches as $key) {\n                        // Caution ! front has underscore between prefix key and md5, back has not\n                        if (isset($GLOBALS[$name_var][$prefix_key . md5($key)])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = stripslashes(html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($key)], ENT_COMPAT, 'UTF-8'));\n                        } else {\n                            if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                                $tabs_array[$prefix_key][$key]['trad'] = '';\n                                if (!isset($missing_translations_back[$prefix_key])) {\n                                    $missing_translations_back[$prefix_key] = 1;\n                                } else {\n                                    ++$missing_translations_back[$prefix_key];\n                                }\n                            }\n                        }\n                        $tabs_array[$prefix_key][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n\n        foreach ($files_per_directory['tpl'] as $dir => $files) {\n            foreach ($files as $file) {\n                if (preg_match('/^(.*).tpl$/', $file) && Tools::file_exists_cache($file_path = $dir . $file)) {\n                    // get controller name instead of file name\n                    $prefix_key = Tools::toCamelCase(str_replace(_PS_ADMIN_DIR_ . DIRECTORY_SEPARATOR . 'themes', '', $file_path), true);\n                    $pos = strrpos($prefix_key, DIRECTORY_SEPARATOR);\n                    $tmp = substr($prefix_key, 0, $pos);\n\n                    if (preg_match('#controllers#', $tmp)) {\n                        $parent_class = explode(DIRECTORY_SEPARATOR, str_replace('/', DIRECTORY_SEPARATOR, $tmp));\n                        $override = array_search('override', $parent_class);\n                        if ($override !== false) {\n                            // case override/controllers/admin/templates/controller_name\n                            $prefix_key = 'Admin' . ucfirst($parent_class[$override + 4]);\n                        } else {\n                            // case admin_name/themes/theme_name/template/controllers/controller_name\n                            $key = array_search('controllers', $parent_class);\n                            $prefix_key = 'Admin' . ucfirst($parent_class[$key + 1]);\n                        }\n                    } else {\n                        $prefix_key = 'Admin' . ucfirst(substr($tmp, strrpos($tmp, DIRECTORY_SEPARATOR) + 1, $pos));\n                    }\n\n                    // Adding list, form, option in Helper Translations\n                    $list_prefix_key = ['AdminHelpers', 'AdminList', 'AdminView', 'AdminOptions', 'AdminForm',\n                        'AdminCalendar', 'AdminTree', 'AdminUploader', 'AdminDataviz', 'AdminKpi', 'AdminModule_list', 'AdminModulesList',\n                    ];\n                    if (in_array($prefix_key, $list_prefix_key)) {\n                        $prefix_key = 'Helper';\n                    }\n\n                    // Adding the folder backup/download/ in AdminBackup Translations\n                    if ($prefix_key == 'AdminDownload') {\n                        $prefix_key = 'AdminBackup';\n                    }\n\n                    // use the prefix \"AdminController\" (like old php files 'header', 'footer.inc', 'index', 'login', 'password', 'functions'\n                    if ($prefix_key == 'Admin' || $prefix_key == 'AdminTemplate') {\n                        $prefix_key = 'AdminController';\n                    }\n\n                    $new_lang = [];\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected, 'tpl');\n\n                    /* Get string translation for each tpl file */\n                    foreach ($matches as $english_string) {\n                        if (empty($english_string)) {\n                            $this->errors[] = $this->trans('There is an error in template, an empty string has been found. Please edit: \"%file%\"', ['%file%' => $file_path], 'Admin.International.Notification');\n                            $new_lang[$english_string] = '';\n                        } else {\n                            $trans_key = $prefix_key . md5($english_string);\n\n                            if (isset($GLOBALS[$name_var][$trans_key])) {\n                                $new_lang[$english_string]['trad'] = html_entity_decode($GLOBALS[$name_var][$trans_key], ENT_COMPAT, 'UTF-8');\n                            } else {\n                                if (!isset($new_lang[$english_string]['trad'])) {\n                                    $new_lang[$english_string]['trad'] = '';\n                                    if (!isset($missing_translations_back[$prefix_key])) {\n                                        $missing_translations_back[$prefix_key] = 1;\n                                    } else {\n                                        ++$missing_translations_back[$prefix_key];\n                                    }\n                                }\n                            }\n                            $new_lang[$english_string]['use_sprintf'] = $this->checkIfKeyUseSprintf($key ?? '');\n                        }\n                    }\n                    if (isset($tabs_array[$prefix_key])) {\n                        $tabs_array[$prefix_key] = array_merge($tabs_array[$prefix_key], $new_lang);\n                    } else {\n                        $tabs_array[$prefix_key] = $new_lang;\n                    }\n                }\n            }\n        }\n\n        // count will contain the number of expressions of the page\n        $count = 0;\n        foreach ($tabs_array as $array) {\n            $count += count($array);\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => $count,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'limit_warning' => $this->displayLimitPostWarning($count),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n            'missing_translations' => $missing_translations_back,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Check if directory and file exist and return an list of modules.\n     *\n     * @return array List of modules\n     *\n     * @throws PrestaShopException\n     */\n    public function getListModules($withInstance = false)\n    {\n        if (!Tools::file_exists_cache($this->translations_informations['modules']['dir'])) {\n            throw new PrestaShopException($this->trans('Fatal error: The module directory does not exist.', [], 'Admin.Notifications.Error') . '(' . $this->translations_informations['modules']['dir'] . ')');\n        }\n        if (!is_writable($this->translations_informations['modules']['dir'])) {\n            throw new PrestaShopException($this->trans('The module directory must be writable.', [], 'Admin.International.Notification'));\n        }\n\n        $module_instances = [];\n        // Get all module which are installed for to have a minimum of POST\n        $modules = Module::getModulesInstalled();\n        if ($withInstance) {\n            foreach ($modules as $module) {\n                if ($tmp_instance = Module::getInstanceById((int) $module['id_module'])) {\n                    // We want to be able to sort modules by display name\n                    $module_instances[$tmp_instance->displayName] = $tmp_instance;\n                }\n            }\n            ksort($module_instances);\n\n            return $module_instances;\n        }\n\n        foreach ($modules as &$module) {\n            $module = $module['name'];\n        }\n\n        return $modules;\n    }\n\n    /**\n     * This method generate the form for errors translations.\n     */\n    public function initFormErrors()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n        $count_empty = [];\n\n        /* List files to parse */\n        $string_to_translate = [];\n        $file_by_directory = $this->getFileToParseByTypeTranslation();\n\n        if ($modules = $this->getListModules()) {\n            foreach ($modules as $module) {\n                if (is_dir(_PS_MODULE_DIR_ . $module) && !in_array($module, self::$ignore_folder)) {\n                    $file_by_directory['php'] = array_merge($file_by_directory['php'], $this->listFiles(_PS_MODULE_DIR_ . $module . '/', [], 'php'));\n                }\n            }\n        }\n\n        foreach ($file_by_directory['php'] as $dir => $files) {\n            foreach ($files as $file) {\n                if (preg_match('/\\.php$/', $file) && Tools::file_exists_cache($file_path = $dir . $file) && !in_array($file, self::$ignore_folder)) {\n                    if (!filesize($file_path)) {\n                        continue;\n                    }\n\n                    // Get content for this file\n                    $content = file_get_contents($file_path);\n\n                    // Parse this content\n                    $matches = $this->userParseFile($content, $this->type_selected);\n\n                    foreach ($matches as $key) {\n                        if (array_key_exists(md5($key), $GLOBALS[$name_var])) {\n                            $string_to_translate[$key]['trad'] = html_entity_decode($GLOBALS[$name_var][md5($key)], ENT_COMPAT, 'UTF-8');\n                        } else {\n                            $string_to_translate[$key]['trad'] = '';\n                            if (!isset($count_empty[$key])) {\n                                $count_empty[$key] = 1;\n                            }\n                        }\n                        $string_to_translate[$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                    }\n                }\n            }\n        }\n\n        //adding sf2 form translations\n        $sf2_loader = new Symfony\\Component\\Translation\\Loader\\XliffFileLoader();\n\n        try {\n            $sf2_trans = $sf2_loader->load(_PS_VENDOR_DIR_ . '/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.' . $this->lang_selected->iso_code . '.xlf', $this->lang_selected->iso_code);\n        } catch (\\Exception $e) {\n            $sf2_trans = $sf2_loader->load(_PS_VENDOR_DIR_ . '/symfony/symfony/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf', $this->lang_selected->iso_code);\n        }\n\n        foreach ($sf2_trans->all()['messages'] as $k => $v) {\n            if (array_key_exists(md5($k), $GLOBALS[$name_var])) {\n                $string_to_translate[$k]['trad'] = html_entity_decode($GLOBALS[$name_var][md5($k)], ENT_COMPAT, 'UTF-8');\n            } else {\n                $string_to_translate[$k]['trad'] = '';\n                if (!isset($count_empty[$k])) {\n                    $count_empty[$k] = 1;\n                }\n            }\n            $string_to_translate[$k]['use_sprintf'] = false;\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => count($string_to_translate),\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'limit_warning' => $this->displayLimitPostWarning(count($string_to_translate)),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'errorsArray' => $string_to_translate,\n            'missing_translations' => $count_empty,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_errors.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * This method generate the form for fields translations.\n     */\n    public function initFormFields()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = $this->fileExists();\n        $missing_translations_fields = [];\n        $class_array = [];\n        $tabs_array = [];\n        $count = 0;\n\n        $files_by_directory = $this->getFileToParseByTypeTranslation();\n\n        foreach ($files_by_directory['php'] as $dir => $files) {\n            foreach ($files as $file) {\n                $exclude_files = ['index.php', 'PrestaShopAutoload.php', 'StockManagerInterface.php',\n                    'TaxManagerInterface.php', 'WebserviceOutputInterface.php', 'WebserviceSpecificManagementInterface.php',\n                ];\n\n                if (!preg_match('/\\.php$/', $file) || in_array($file, $exclude_files)) {\n                    continue;\n                }\n\n                $class_name = substr($file, 0, -4);\n                if (!is_subclass_of($class_name . 'Core', 'ObjectModel')) {\n                    continue;\n                }\n                $class_array[$class_name] = call_user_func([$class_name, 'getValidationRules'], $class_name);\n            }\n        }\n        foreach ($class_array as $prefix_key => $rules) {\n            if (isset($rules['validate'])) {\n                foreach ($rules['validate'] as $key => $value) {\n                    if (isset($GLOBALS[$name_var][$prefix_key . '_' . md5($key)])) {\n                        $tabs_array[$prefix_key][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$prefix_key . '_' . md5($key)], ENT_COMPAT, 'UTF-8');\n                        ++$count;\n                    } else {\n                        if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = '';\n                            if (!isset($missing_translations_fields[$prefix_key])) {\n                                $missing_translations_fields[$prefix_key] = 1;\n                            } else {\n                                ++$missing_translations_fields[$prefix_key];\n                            }\n                            ++$count;\n                        }\n                    }\n                }\n            }\n            if (isset($rules['validateLang'])) {\n                foreach ($rules['validateLang'] as $key => $value) {\n                    if (isset($GLOBALS[$name_var][$prefix_key . '_' . md5($key)])) {\n                        $tabs_array[$prefix_key][$key]['trad'] = '';\n                        if (array_key_exists($prefix_key . '_' . md5(addslashes($key)), $GLOBALS[$name_var])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = html_entity_decode($GLOBALS[$name_var][$prefix_key . '_' . md5(addslashes($key))], ENT_COMPAT, 'UTF-8');\n                        }\n\n                        ++$count;\n                    } else {\n                        if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                            $tabs_array[$prefix_key][$key]['trad'] = '';\n                            if (!isset($missing_translations_fields[$prefix_key])) {\n                                $missing_translations_fields[$prefix_key] = 1;\n                            } else {\n                                ++$missing_translations_fields[$prefix_key];\n                            }\n                            ++$count;\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => $count,\n            'limit_warning' => $this->displayLimitPostWarning($count),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'missing_translations' => $missing_translations_fields,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Get each informations for each mails found in the folder $dir.\n     *\n     * @since 1.4.0.14\n     *\n     * @param string $dir\n     * @param string $group_name\n     *\n     * @return array|false\n     */\n    public function getMailFiles($dir, $group_name = 'mail')\n    {\n        $arr_return = [];\n        if (Language::getIdByIso('en')) {\n            $default_language = 'en';\n        } else {\n            $default_language = Language::getIsoById((int) Configuration::get('PS_LANG_DEFAULT'));\n        }\n        if (!$default_language || !Validate::isLanguageIsoCode($default_language)) {\n            return false;\n        }\n\n        // Very usefull to name input and textarea fields\n        $arr_return['group_name'] = $group_name;\n        $arr_return['empty_values'] = 0;\n        $arr_return['total_filled'] = 0;\n        $arr_return['directory'] = $dir;\n\n        // Get path for english mail directory\n        $dir_en = str_replace('/' . $this->lang_selected->iso_code . '/', '/' . $default_language . '/', $dir);\n\n        if (Tools::file_exists_cache($dir_en)) {\n            // Get all english files to compare with the language to translate\n            foreach (scandir($dir_en, SCANDIR_SORT_NONE) as $email_file) {\n                if (strripos($email_file, '.html') > 0 || strripos($email_file, '.txt') > 0) {\n                    $email_name = substr($email_file, 0, strripos($email_file, '.'));\n                    $type = substr($email_file, strripos($email_file, '.') + 1);\n                    if (!isset($arr_return['files'][$email_name])) {\n                        $arr_return['files'][$email_name] = [];\n                    }\n                    // $email_file is from scandir ($dir), so we already know that file exists\n                    $arr_return['files'][$email_name][$type]['en'] = $this->getMailContent($dir_en, $email_file);\n\n                    // check if the file exists in the language to translate\n                    if (Tools::file_exists_cache($dir . '/' . $email_file)) {\n                        $arr_return['files'][$email_name][$type][$this->lang_selected->iso_code] = $this->getMailContent($dir, $email_file);\n                        ++$this->total_expression;\n                    } else {\n                        $arr_return['files'][$email_name][$type][$this->lang_selected->iso_code] = '';\n                    }\n\n                    if ($arr_return['files'][$email_name][$type][$this->lang_selected->iso_code] == '') {\n                        ++$arr_return['empty_values'];\n                    } else {\n                        ++$arr_return['total_filled'];\n                    }\n                }\n            }\n        } else {\n            $this->warnings[] = $this->trans(\n                'A mail directory exists for the \"%iso_code%\" language, but not for the default language (%language%) in %folder%',\n                ['%iso_code%' => $this->lang_selected->iso_code, '%folder%' => str_replace(_PS_ROOT_DIR_, '', dirname($dir)), '%language%' => $default_language],\n                'Admin.International.Notification'\n            );\n        }\n\n        return $arr_return;\n    }\n\n    /**\n     * Get content of the mail file.\n     *\n     * @since 1.4.0.14\n     *\n     * @param string $dir\n     * @param string $file\n     *\n     * @return string|false\n     */\n    protected function getMailContent($dir, $file)\n    {\n        $content = file_get_contents($dir . '/' . $file);\n\n        if (Tools::strlen($content) === 0) {\n            $content = '';\n        }\n\n        return $content;\n    }\n\n    /**\n     * Display mails in html format.\n     * This was create for factorize the html displaying.\n     *\n     * @since 1.4.0.14\n     *\n     * @param array $mails\n     * @param array $all_subject_mail\n     * @param Language $obj_lang\n     * @param string $id_html Use for set html id attribute for the block\n     * @param string $title Set the title for the block\n     * @param string|bool $name_for_module Is not false define add a name for distinguish mails module\n     *\n     * @return string\n     */\n    protected function displayMailContent($mails, $all_subject_mail, $obj_lang, $id_html, $title, $name_for_module = false)\n    {\n        $str_return = '';\n        $group_name = 'mail';\n        if (array_key_exists('group_name', $mails)) {\n            $group_name = $mails['group_name'];\n        }\n\n        if ($mails['empty_values'] == 0) {\n            $translation_missing_badge_type = 'badge-success';\n        } else {\n            $translation_missing_badge_type = 'badge-danger';\n        }\n        $str_return .= '<div class=\"mails_field\">\n            <h4>\n            <span class=\"badge\">' . ((int) $mails['empty_values'] + (int) $mails['total_filled']) . ' <i class=\"icon-envelope-o\"></i></span>\n            <a href=\"javascript:void(0);\" onclick=\"$(\\'#' . $id_html . '\\').slideToggle();\">' . $title . '</a>\n            <span class=\"pull-right badge ' . $translation_missing_badge_type . '\">' . $mails['empty_values'] . ' ' . $this->trans('missing translation(s)', [], 'Admin.International.Notification') . '</span>\n            </h4>\n            <div name=\"mails_div\" id=\"' . $id_html . '\" class=\"panel-group\">';\n\n        if (!empty($mails['files'])) {\n            $topic_already_displayed = [];\n            foreach ($mails['files'] as $mail_name => $mail_files) {\n                $str_return .= '<div class=\"panel translations-email-panel\">';\n                $str_return .= '<a href=\"#' . $id_html . '-' . $mail_name . '\" class=\"panel-title\" data-toggle=\"collapse\" data-parent=\"#' . $id_html . '\" >' . $mail_name . ' <i class=\"icon-caret-down\"></i> </a>';\n                $str_return .= '<div id=\"' . $id_html . '-' . $mail_name . '\" class=\"email-collapse panel-collapse collapse\">';\n                if (array_key_exists('html', $mail_files) || array_key_exists('txt', $mail_files)) {\n                    if (array_key_exists($mail_name, $all_subject_mail)) {\n                        foreach ($all_subject_mail[$mail_name] as $subject_mail) {\n                            $subject_key = 'subject[' . Tools::htmlentitiesUTF8($group_name) . '][' . Tools::htmlentitiesUTF8($subject_mail) . ']';\n                            if (in_array($subject_key, $topic_already_displayed)) {\n                                continue;\n                            }\n                            $topic_already_displayed[] = $subject_key;\n                            $value_subject_mail = isset($mails['subject'][$subject_mail]) ? $mails['subject'][$subject_mail] : '';\n                            $str_return .= '\n                            <div class=\"label-subject row\">\n                                <label class=\"control-label col-lg-3\">' . $this->trans('Email subject', [], 'Admin.International.Feature');\n                            if (isset($value_subject_mail['use_sprintf']) && $value_subject_mail['use_sprintf']) {\n                                $str_return .= '<span class=\"useSpecialSyntax\" title=\"' . $this->trans('This expression uses a special syntax:', [], 'Admin.International.Notification') . ' ' . $value_subject_mail['use_sprintf'] . '\">\n                                    <i class=\"icon-exclamation-triangle\"></i>\n                                </span>';\n                            }\n                            $str_return .= '</label><div class=\"col-lg-9\">';\n                            if (isset($value_subject_mail['trad']) && $value_subject_mail['trad']) {\n                                $str_return .= '<input class=\"form-control\" type=\"text\" name=\"subject[' . Tools::htmlentitiesUTF8($group_name) . '][' . Tools::htmlentitiesUTF8($subject_mail) . ']\" value=\"' . $value_subject_mail['trad'] . '\" />';\n                            } else {\n                                $str_return .= '<input class=\"form-control\" type=\"text\" name=\"subject[' . Tools::htmlentitiesUTF8($group_name) . '][' . Tools::htmlentitiesUTF8($subject_mail) . ']\" value=\"\" />';\n                            }\n                            $str_return .= '<p class=\"help-block\">' . stripcslashes($subject_mail) . '</p>';\n                            $str_return .= '</div></div>';\n                        }\n                    } else {\n                        $str_return .= '\n                            <hr><div class=\"alert alert-info\">'\n                            . $this->trans('No Subject was found for %mail_name% in the database.', ['%mail_name%' => $mail_name], 'Admin.International.Notification')\n                            . '</div>';\n                    }\n                    // tab menu\n                    $str_return .= '<hr><ul class=\"nav nav-pills\">\n                        <li class=\"active\"><a href=\"#' . $mail_name . '-html\" data-toggle=\"tab\">' . $this->trans('View HTML version', [], 'Admin.International.Feature') . '</a></li>\n                        <li><a href=\"#' . $mail_name . '-editor\" data-toggle=\"tab\">' . $this->trans('Edit HTML version', [], 'Admin.International.Feature') . '</a></li>\n                        <li><a href=\"#' . $mail_name . '-text\" data-toggle=\"tab\">' . $this->trans('View/Edit TXT version', [], 'Admin.International.Feature') . '</a></li>\n                        </ul>';\n                    // tab-content\n                    $str_return .= '<div class=\"tab-content\">';\n\n                    $base_uri = str_replace(_PS_ROOT_DIR_, __PS_BASE_URI__, $mails['directory']);\n                    $base_uri = str_replace('//', '/', $base_uri);\n                    $url_mail = $base_uri . $mail_name . '.html';\n\n                    $mail_files_html = empty($mail_files['html']) ? false : $mail_files['html'];\n                    $str_return .= '<div class=\"tab-pane active\" id=\"' . $mail_name . '-html\">';\n                    $str_return .= $this->displayMailBlockHtml($mail_files_html, $obj_lang->iso_code, $url_mail, $mail_name, $group_name, $name_for_module);\n                    $str_return .= '</div>';\n\n                    $mail_files_txt = empty($mail_files['txt']) ? false : $mail_files['txt'];\n                    $str_return .= '<div class=\"tab-pane\" id=\"' . $mail_name . '-text\">';\n                    $str_return .= $this->displayMailBlockTxt($mail_files_txt, $obj_lang->iso_code, $mail_name, $group_name, $name_for_module);\n                    $str_return .= '</div>';\n\n                    $str_return .= '<div class=\"tab-pane\" id=\"' . $mail_name . '-editor\">';\n                    $str_return .= $this->displayMailEditor($mail_files_html, $obj_lang->iso_code, $mail_name, $group_name, $name_for_module);\n                    $str_return .= '</div>';\n\n                    $str_return .= '</div>';\n                    $str_return .= '</div><!--end .panel-collapse -->';\n                    $str_return .= '</div><!--end .panel -->';\n                }\n            }\n        } else {\n            $str_return .= '<p class=\"error\">\n                ' . $this->trans('There was a problem getting the mail files.', [], 'Admin.International.Notification') . '<br>\n                ' . $this->trans('English language files must exist in %folder% folder', [\n                '%folder%' => '<em>' . preg_replace('@/[a-z]{2}(/?)$@', '/en$1', $mails['directory']) . '</em>',\n            ], 'Admin.International.Notification') . '\n            </p>';\n        }\n\n        $str_return .= '</div><!-- #' . $id_html . ' --></div><!-- end .mails_field -->';\n\n        return $str_return;\n    }\n\n    /**\n     * Just build the html structure for display txt mails.\n     *\n     * @since 1.4.0.14\n     *\n     * @param array $content With english and language needed contents\n     * @param string $lang ISO code of the needed language\n     * @param string $mail_name Name of the file to translate (same for txt and html files)\n     * @param string $group_name group name allow to distinguish each block of mail\n     * @param string|bool $name_for_module Is not false define add a name for distinguish mails module\n     *\n     * @return string\n     */\n    protected function displayMailBlockTxt($content, $lang, $mail_name, $group_name, $name_for_module = false)\n    {\n        if (!empty($content)) {\n            $text_content = Tools::htmlentitiesUTF8(stripslashes(strip_tags($content[$lang])));\n        } else {\n            $text_content = '';\n        }\n\n        return '<div class=\"block-mail\" >\n                    <div class=\"mail-form\">\n                        <div><textarea class=\"rte noEditor\" name=\"' . $group_name . '[txt][' . ($name_for_module ? $name_for_module . '|' : '') . $mail_name . ']\">' . $text_content . '</textarea></div>\n                    </div>\n                </div>';\n    }\n\n    /**\n     * Just build the html structure for display html mails.\n     *\n     * @since 1.4.0.14\n     *\n     * @param array $content With english and language needed contents\n     * @param string $lang ISO code of the needed language\n     * @param string $url The html page and displaying an outline\n     * @param string $mail_name Name of the file to translate (same for txt and html files)\n     * @param string $group_name group name allow to distinguish each block of mail\n     * @param string|bool $name_for_module Is not false define add a name for distinguish mails module\n     *\n     * @return string\n     */\n    protected function displayMailBlockHtml($content, $lang, $url, $mail_name, $group_name, $name_for_module = false)\n    {\n        $title = [];\n\n        if (!empty($content)) {\n            $this->cleanMailContent($content, $lang, $title);\n        }\n\n        $name_for_module = $name_for_module ? $name_for_module . '|' : '';\n\n        return '<div class=\"block-mail\" >\n                    <div class=\"mail-form\">\n                        <div class=\"thumbnail email-html-frame\" data-email-src=\"' . $url . '\"></div>\n                    </div>\n                </div>';\n    }\n\n    protected function displayMailEditor($content, $lang, $mail_name, $group_name, $name_for_module = false)\n    {\n        $title = [];\n\n        if (!empty($content)) {\n            $this->cleanMailContent($content, $lang, $title);\n            $html_content = $content[$lang];\n        } else {\n            $html_content = '';\n        }\n\n        $name_for_module = $name_for_module ? $name_for_module . '|' : '';\n\n        return '<textarea class=\"rte-mail rte-mail-' . $mail_name . ' form-control\" data-rte=\"' . $mail_name . '\" name=\"' . $group_name . '[html][' . $name_for_module . $mail_name . ']\">' . $html_content . '</textarea>';\n    }\n\n    protected function cleanMailContent(&$content, $lang, &$title)\n    {\n        if (stripos($content[$lang], '<body')) {\n            $array_lang = $lang != 'en' ? ['en', $lang] : [$lang];\n            foreach ($array_lang as $language) {\n                $title[$language] = substr($content[$language], 0, stripos($content[$language], '<body'));\n                preg_match('#<title>([^<]+)</title>#Ui', $title[$language], $matches);\n                $title[$language] = empty($matches[1]) ? '' : $matches[1];\n            }\n        }\n        $content[$lang] = (isset($content[$lang]) ? Tools::htmlentitiesUTF8(stripslashes($content[$lang])) : '');\n    }\n\n    /**\n     * Check in each module if contains mails folder.\n     *\n     * @param bool $with_module_name\n     *\n     * @return array Array of modules which have mails\n     */\n    public function getModulesHasMails($with_module_name = false)\n    {\n        $arr_modules = [];\n        if (array_key_exists('dir', $this->translations_informations['modules'])) {\n            if ($modules_dir = scandir($this->translations_informations['modules']['dir'], SCANDIR_SORT_NONE)) {\n                foreach ($modules_dir as $module_dir) {\n                    if (!in_array($module_dir, self::$ignore_folder)) {\n                        $dir = false;\n                        if ($this->theme_selected && Tools::file_exists_cache($this->translations_informations['modules']['override']['dir'] . $module_dir . '/mails/')) {\n                            $dir = $this->translations_informations['modules']['override']['dir'] . $module_dir . '/';\n                        } elseif (Tools::file_exists_cache($this->translations_informations['modules']['dir'] . $module_dir . '/mails/')) {\n                            $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/';\n                        }\n                        if ($dir !== false) {\n                            if ($with_module_name) {\n                                $arr_modules[$module_dir] = $dir;\n                            } else {\n                                if ($this->theme_selected) {\n                                    $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/';\n                                }\n                                $arr_modules[$dir] = scandir($dir, SCANDIR_SORT_NONE);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $arr_modules;\n    }\n\n    /**\n     * Check in each module if contains pdf folder.\n     *\n     * @param bool $classes\n     *\n     * @return array Array of modules which have pdf\n     */\n    public function getModulesHasPDF($classes = false)\n    {\n        $arr_modules = [];\n        foreach (scandir($this->translations_informations['modules']['dir'], SCANDIR_SORT_NONE) as $module_dir) {\n            if (!in_array($module_dir, self::$ignore_folder)) {\n                $dir = false;\n                if ($classes) {\n                    if ($this->theme_selected && Tools::file_exists_cache($this->translations_informations['modules']['override']['dir'] . $module_dir . '/classes/')) {\n                        $dir = $this->translations_informations['modules']['override']['dir'] . $module_dir . '/classes/';\n                    } elseif (Tools::file_exists_cache($this->translations_informations['modules']['dir'] . $module_dir . '/classes/')) {\n                        $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/classes/';\n                    }\n                    if ($dir !== false) {\n                        $arr_modules[$dir] = scandir($dir, SCANDIR_SORT_NONE);\n                    }\n                } else {\n                    if ($this->theme_selected && Tools::file_exists_cache($this->translations_informations['modules']['override']['dir'] . $module_dir . '/pdf/')) {\n                        $dir = $this->translations_informations['modules']['override']['dir'] . $module_dir . '/pdf/';\n                    } elseif (Tools::file_exists_cache($this->translations_informations['modules']['dir'] . $module_dir . '/pdf/')) {\n                        $dir = $this->translations_informations['modules']['dir'] . $module_dir . '/pdf/';\n                    }\n                    if ($dir !== false) {\n                        $arr_modules[$dir] = scandir($dir, SCANDIR_SORT_NONE);\n                    }\n                }\n            }\n        }\n\n        return $arr_modules;\n    }\n\n    protected function getTinyMCEForMails($iso_lang)\n    {\n        // TinyMCE\n        $iso_tiny_mce = (Tools::file_exists_cache(_PS_ROOT_DIR_ . '/js/tiny_mce/langs/' . $iso_lang . '.js') ? $iso_lang : 'en');\n        $ad = __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_);\n        //return false;\n        return '\n            <script type=\"text/javascript\">\n                var iso = \\'' . $iso_tiny_mce . '\\' ;\n                var pathCSS = \\'' . _THEME_CSS_DIR_ . '\\' ;\n                var ad = \\'' . $ad . '\\' ;\n            </script>\n            <script type=\"text/javascript\" src=\"' . __PS_BASE_URI__ . 'js/tiny_mce/tiny_mce.js\"></script>\n            <script type=\"text/javascript\" src=\"' . __PS_BASE_URI__ . 'js/admin/tinymce.inc.js\"></script>';\n    }\n\n    /**\n     * This method generate the form for mails translations.\n     *\n     * @param bool $no_display\n     *\n     * @return array|string\n     */\n    public function initFormMails($no_display = false)\n    {\n        $module_mails = [];\n\n        // get all mail subjects, this method parse each files in Prestashop !!\n        $subject_mail = [];\n\n        $modules_has_mails = $this->getModulesHasMails(true);\n\n        $files_by_directiories = $this->getFileToParseByTypeTranslation();\n\n        if (!$this->theme_selected || !@filemtime($this->translations_informations[$this->type_selected]['override']['dir'])) {\n            $this->copyMailFilesForAllLanguages();\n        }\n\n        foreach ($files_by_directiories['php'] as $dir => $files) {\n            if (!empty($files)) {\n                foreach ($files as $file) {\n                    // If file exist and is not in ignore_folder, in the next step we check if a folder or mail\n                    if (Tools::file_exists_cache($dir . $file) && !in_array($file, self::$ignore_folder)) {\n                        $subject_mail = $this->getSubjectMail($dir, $file, $subject_mail);\n                    }\n                }\n            }\n        }\n\n        // Get path of directory for find a good path of translation file\n        if ($this->theme_selected && @filemtime($this->translations_informations[$this->type_selected]['override']['dir'])) {\n            $i18n_dir = $this->translations_informations[$this->type_selected]['override']['dir'];\n        } else {\n            $i18n_dir = $this->translations_informations[$this->type_selected]['dir'];\n        }\n\n        $core_mails = $this->getMailFiles($i18n_dir, 'core_mail');\n        $core_mails['subject'] = $this->getSubjectMailContent($i18n_dir);\n\n        foreach ($modules_has_mails as $module_name => $module_path) {\n            $module_path = rtrim($module_path, '/');\n            $module_mails[$module_name] = $this->getMailFiles($module_path . '/mails/' . $this->lang_selected->iso_code . '/', 'module_mail');\n            $module_mails[$module_name]['subject'] = $core_mails['subject'];\n            $module_mails[$module_name]['display'] = $this->displayMailContent($module_mails[$module_name], $subject_mail, $this->lang_selected, Tools::strtolower($module_name), $module_name, $module_name);\n        }\n\n        if ($no_display) {\n            $empty = 0;\n            $total = 0;\n            $total += (int) $core_mails['total_filled'];\n            $empty += (int) $core_mails['empty_values'];\n            foreach ($module_mails as $mod_infos) {\n                $total += (int) $mod_infos['total_filled'];\n                $empty += (int) $mod_infos['empty_values'];\n            }\n\n            return ['total' => $total, 'empty' => $empty];\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'limit_warning' => $this->displayLimitPostWarning($this->total_expression),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tinyMCE' => $this->getTinyMCEForMails($this->lang_selected->iso_code),\n            'mail_content' => $this->displayMailContent($core_mails, $subject_mail, $this->lang_selected, 'core', $this->trans('Core emails', [], 'Admin.International.Feature')),\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'module_mails' => $module_mails,\n            'theme_name' => $this->theme_selected,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_mails.tpl';\n\n        return parent::renderView();\n    }\n\n    public function copyMailFilesForAllLanguages()\n    {\n        $current_theme = Tools::safeOutput($this->context->shop->theme->getName());\n        $languages = Language::getLanguages();\n\n        foreach ($languages as $key => $lang) {\n            $dir_to_copy_iso = [];\n            $files_to_copy_iso = [];\n            $current_iso_code = $lang['iso_code'];\n\n            $dir_to_copy_iso[] = _PS_MAIL_DIR_ . $current_iso_code . '/';\n\n            $modules_has_mails = $this->getModulesHasMails(true);\n            foreach ($modules_has_mails as $module_name => $module_path) {\n                if ($pos = strpos($module_path, '/modules')) {\n                    $dir_to_copy_iso[] = _PS_ROOT_DIR_ . substr($module_path, $pos) . 'mails/' . $current_iso_code . '/';\n                }\n            }\n\n            foreach ($dir_to_copy_iso as $dir) {\n                if (!is_dir($dir)) {\n                    continue;\n                }\n                $scanDir = scandir($dir, SCANDIR_SORT_NONE);\n                if (!$scanDir) {\n                    continue;\n                }\n                foreach ($scanDir as $file) {\n                    if (!in_array($file, self::$ignore_folder)) {\n                        $files_to_copy_iso[] = [\n                            'from' => $dir . $file,\n                            'to' => str_replace((strpos($dir, _PS_CORE_DIR_) !== false) ? _PS_CORE_DIR_ : _PS_ROOT_DIR_, _PS_ROOT_DIR_ . '/themes/' . $current_theme, $dir) . $file,\n                        ];\n                    }\n                }\n            }\n\n            foreach ($files_to_copy_iso as $file) {\n                if (!file_exists($file['to'])) {\n                    $content = file_get_contents($file['from']);\n\n                    $stack = [];\n                    $folder = dirname($file['to']);\n                    while (!is_dir($folder)) {\n                        $stack[] = $folder;\n                        $folder = dirname($folder);\n                    }\n                    while ($folder = array_pop($stack)) {\n                        mkdir($folder);\n                    }\n\n                    $success = file_put_contents($file['to'], $content);\n                    if ($success === false) {\n                        Tools::dieOrLog(sprintf('%s cannot be copied to %s', $file['from'], $file['to']), false);\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Get list of subjects of mails.\n     *\n     * @param string $dir\n     * @param string $file\n     * @param array $subject_mail\n     *\n     * @return array : list of subjects of mails\n     */\n    protected function getSubjectMail($dir, $file, $subject_mail)\n    {\n        $dir = rtrim($dir, '/');\n        // If is file and is not in ignore_folder\n        if (is_file($dir . '/' . $file) && !in_array($file, self::$ignore_folder) && preg_match('/\\.php$/', $file)) {\n            $content = file_get_contents($dir . '/' . $file);\n            $content = str_replace(\"\\n\", ' ', $content);\n\n            // Subject must match with a template, therefore we first grep the Mail::Send() function then the Mail::l() inside.\n            if (preg_match_all('/Mail::Send([^;]*);/si', $content, $tab)) {\n                for ($i = 0; isset($tab[1][$i]); ++$i) {\n                    $tab2 = explode(',', $tab[1][$i]);\n                    if (is_array($tab2) && isset($tab2[1])) {\n                        $template = trim(str_replace('\\'', '', $tab2[1]));\n                        foreach ($tab2 as $tab3) {\n                            if (preg_match('/Mail::l\\(\\'' . _PS_TRANS_PATTERN_ . '\\'\\)/Us', $tab3 . ')', $matches)) {\n                                if (!isset($subject_mail[$template])) {\n                                    $subject_mail[$template] = [];\n                                }\n                                if (!in_array($matches[1], $subject_mail[$template])) {\n                                    $subject_mail[$template][] = $matches[1];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } elseif (!in_array($file, self::$ignore_folder) && is_dir($dir . '/' . $file)) {\n            // Or if is folder, we scan folder for check if found in folder and subfolder\n            foreach (scandir($dir . '/' . $file, SCANDIR_SORT_NONE) as $temp) {\n                if ($temp[0] != '.') {\n                    $subject_mail = $this->getSubjectMail($dir . '/' . $file, $temp, $subject_mail);\n                }\n            }\n        }\n\n        return $subject_mail;\n    }\n\n    protected function writeSubjectTranslationFile($sub, $path)\n    {\n        if (!Tools::file_exists_cache(dirname($path))) {\n            if (!mkdir(dirname($path), 0700)) {\n                throw new PrestaShopException('Directory ' . dirname($path) . ' cannot be created.');\n            }\n        }\n        if ($fd = @fopen($path, 'wb')) {\n            $tab = 'LANGMAIL';\n            fwrite($fd, \"<?php\\n\\nglobal \\$_\" . $tab . \";\\n\\$_\" . $tab . \" = array();\\n\");\n\n            foreach ($sub as $key => $value) {\n                fwrite($fd, '$_' . $tab . '[\\'' . pSQL($key) . '\\'] = \\'' . pSQL($value) . '\\';' . \"\\n\");\n            }\n\n            fwrite($fd, \"\\n?>\");\n            fclose($fd);\n        } else {\n            throw new PrestaShopException($this->trans('Cannot write language file for email subjects. Path is: %folder%', ['%folder%' => $path], 'Admin.International.Notification'));\n        }\n    }\n\n    /**\n     * This get files to translate in module directory.\n     * Recursive method allow to get each files for a module no matter his depth.\n     *\n     * @param string $path directory path to scan\n     * @param array $array_files by reference - array which saved files to parse\n     * @param string $module_name module name\n     * @param string $lang_file full path of translation file\n     * @param bool $is_default\n     */\n    protected function recursiveGetModuleFiles($path, &$array_files, $module_name, $lang_file, $is_default = false)\n    {\n        $files_module = [];\n        if (Tools::file_exists_cache($path)) {\n            $files_module = scandir($path, SCANDIR_SORT_NONE);\n        }\n        $files_for_module = $this->clearModuleFiles($files_module, 'file');\n        if (!empty($files_for_module)) {\n            $array_files[] = [\n                'file_name' => $lang_file,\n                'dir' => $path,\n                'files' => $files_for_module,\n                'module' => $module_name,\n                'is_default' => $is_default,\n                'theme' => $this->theme_selected,\n            ];\n        }\n\n        $dir_module = $this->clearModuleFiles($files_module, 'directory', $path);\n\n        if (!empty($dir_module)) {\n            foreach ($dir_module as $folder) {\n                $this->recursiveGetModuleFiles($path . $folder . '/', $array_files, $module_name, $lang_file, $is_default);\n            }\n        }\n    }\n\n    /**\n     * This method get translation in each translations file.\n     * The file depend on $lang param.\n     *\n     * @param array $modules List of modules\n     * @param string|null $root_dir path where it get each modules\n     * @param string $lang ISO code of chosen language to translate\n     * @param bool $is_default Set it if modules are located in root/prestashop/modules folder\n     *                         This allow to distinguish overridden prestashop theme and original module\n     *\n     * @return array\n     */\n    protected function getAllModuleFiles($modules, $root_dir, $lang, $is_default = false)\n    {\n        $array_files = [];\n        $initial_root_dir = $root_dir;\n        foreach ($modules as $module) {\n            $root_dir = $initial_root_dir;\n            if (isset($module[0]) && $module[0] == '.') {\n                continue;\n            }\n\n            // First we load the default translation file\n            if ($root_dir == null) {\n                $i18n_dir = $this->translations_informations[$this->type_selected]['dir'];\n                if (is_dir($i18n_dir . $module)) {\n                    $root_dir = $i18n_dir;\n                }\n\n                $lang_file = $root_dir . $module . '/translations/' . $lang . '.php';\n                if (!Tools::file_exists_cache($root_dir . $module . '/translations/' . $lang . '.php') && Tools::file_exists_cache($root_dir . $module . '/' . $lang . '.php')) {\n                    $lang_file = $root_dir . $module . '/' . $lang . '.php';\n                }\n                @include $lang_file;\n                $this->getModuleTranslations();\n                // If a theme is selected, then the destination translation file must be in the theme\n                if ($this->theme_selected) {\n                    $lang_file = $this->translations_informations[$this->type_selected]['override']['dir'] . $module . '/translations/' . $lang . '.php';\n                }\n                $this->recursiveGetModuleFiles($root_dir . $module . '/', $array_files, $module, $lang_file, $is_default);\n            }\n\n            $root_dir = $initial_root_dir;\n            // Then we load the overriden translation file\n            if ($this->theme_selected && isset($this->translations_informations[$this->type_selected]['override'])) {\n                $i18n_dir = $this->translations_informations[$this->type_selected]['override']['dir'];\n                if (is_dir($i18n_dir . $module)) {\n                    $root_dir = $i18n_dir;\n                }\n                if (Tools::file_exists_cache($root_dir . $module . '/translations/' . $lang . '.php')) {\n                    $lang_file = $root_dir . $module . '/translations/' . $lang . '.php';\n                } elseif (Tools::file_exists_cache($root_dir . $module . '/' . $lang . '.php')) {\n                    $lang_file = $root_dir . $module . '/' . $lang . '.php';\n                }\n                if (!empty($lang_file)) {\n                    @include $lang_file;\n                    $this->getModuleTranslations();\n                    $this->recursiveGetModuleFiles($root_dir . $module . '/', $array_files, $module, $lang_file, $is_default);\n                }\n            }\n        }\n\n        return $array_files;\n    }\n\n    /**\n     * This method generate the form for modules translations.\n     */\n    public function initFormModules()\n    {\n        // Get list of installed modules\n        $installed_modules = $this->getListModules();\n\n        // get selected module\n        $modules = [Tools::getValue('module')];\n\n        // Get all modules files and include all translation files\n        $arr_files = $this->getAllModuleFiles($modules, null, $this->lang_selected->iso_code, true);\n        foreach ($arr_files as $value) {\n            $this->findAndFillTranslations($value['files'], $value['theme'], $value['module'], $value['dir']);\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'default_theme_name' => self::DEFAULT_THEME_NAME,\n            'count' => $this->total_expression,\n            'limit_warning' => $this->displayLimitPostWarning($this->total_expression),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'textarea_sized' => self::TEXTAREA_SIZED,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'modules_translations' => $this->modules_translations,\n            'missing_translations' => $this->missing_translations,\n            'module_name' => $modules[0],\n            'installed_modules' => $installed_modules,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_modules.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Parse PDF class.\n     *\n     * @since 1.4.5.0\n     *\n     * @param string $file_path File to parse\n     * @param string $file_type Type of file\n     * @param array $lang_array Contains expression in the chosen language\n     * @param string $tab name      To use with the md5 key\n     * @param array $tabs_array\n     * @param array $count_missing\n     *\n     * @return array Array          Containing all datas needed for building the translation form\n     */\n    protected function parsePdfClass($file_path, $file_type, $lang_array, $tab, $tabs_array, &$count_missing)\n    {\n        // Get content for this file\n        $content = file_get_contents($file_path);\n\n        // Parse this content\n        $matches = $this->userParseFile($content, $this->type_selected, $file_type);\n\n        foreach ($matches as $key) {\n            if (array_key_exists($tab . md5(addslashes($key)), $lang_array)) {\n                $tabs_array[$tab][$key]['trad'] = html_entity_decode($lang_array[$tab . md5(addslashes($key))], ENT_COMPAT, 'UTF-8');\n            } else {\n                $tabs_array[$tab][$key]['trad'] = '';\n                if (!isset($count_missing[$tab])) {\n                    $count_missing[$tab] = 1;\n                } else {\n                    ++$count_missing[$tab];\n                }\n            }\n            $tabs_array[$tab][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n        }\n\n        return $tabs_array;\n    }\n\n    /**\n     * This method generate the form for PDF translations.\n     */\n    public function initFormPDF()\n    {\n        $name_var = $this->translations_informations[$this->type_selected]['var'];\n        $GLOBALS[$name_var] = [];\n        $missing_translations_pdf = [];\n\n        $i18n_dir = $this->translations_informations[$this->type_selected]['dir'];\n        $default_i18n_file = $i18n_dir . $this->translations_informations[$this->type_selected]['file'];\n\n        if (!$this->theme_selected) {\n            $i18n_file = $default_i18n_file;\n        } else {\n            $i18n_dir = $this->translations_informations[$this->type_selected]['override']['dir'];\n            $i18n_file = $i18n_dir . $this->translations_informations[$this->type_selected]['override']['file'];\n        }\n\n        $this->checkDirAndCreate($i18n_file);\n        if ((!file_exists($i18n_file) && !is_writable($i18n_dir)) && !is_writable($i18n_file)) {\n            $this->errors[] = $this->trans('Cannot write into the \"%file%\"', ['%file%' => $i18n_file], 'Admin.International.Notification');\n        }\n\n        @include $i18n_file;\n\n        // if the override's translation file is empty load the default file\n        /* @phpstan-ignore-next-line */\n        if (!isset($GLOBALS[$name_var]) || count($GLOBALS[$name_var]) == 0) {\n            @include $default_i18n_file;\n        }\n\n        $prefix_key = 'PDF';\n        $tabs_array = [$prefix_key => []];\n\n        $files_by_directory = $this->getFileToParseByTypeTranslation();\n\n        foreach ($files_by_directory as $type => $directories) {\n            foreach ($directories as $dir => $files) {\n                foreach ($files as $file) {\n                    if (!in_array($file, self::$ignore_folder) && Tools::file_exists_cache($file_path = $dir . $file)) {\n                        if ($type == 'tpl') {\n                            if (Tools::file_exists_cache($file_path) && is_file($file_path)) {\n                                // Get content for this file\n                                $content = file_get_contents($file_path);\n\n                                // Parse this content\n                                $matches = $this->userParseFile($content, $this->type_selected, 'tpl');\n\n                                foreach ($matches as $key) {\n                                    /* @phpstan-ignore-next-line */\n                                    if (isset($GLOBALS[$name_var][$prefix_key . md5($key)])) {\n                                        $tabs_array[$prefix_key][$key]['trad'] = (html_entity_decode($GLOBALS[$name_var][$prefix_key . md5($key)], ENT_COMPAT, 'UTF-8'));\n                                    } else {\n                                        if (!isset($tabs_array[$prefix_key][$key]['trad'])) {\n                                            $tabs_array[$prefix_key][$key]['trad'] = '';\n                                            if (!isset($missing_translations_pdf[$prefix_key])) {\n                                                $missing_translations_pdf[$prefix_key] = 1;\n                                            } else {\n                                                ++$missing_translations_pdf[$prefix_key];\n                                            }\n                                        }\n                                    }\n                                    $tabs_array[$prefix_key][$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n                                }\n                            }\n                        } elseif (Tools::file_exists_cache($file_path)) {\n                            $tabs_array = $this->parsePdfClass($file_path, 'php', $GLOBALS[$name_var], $prefix_key, $tabs_array, $missing_translations_pdf);\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->tpl_view_vars = array_merge($this->tpl_view_vars, [\n            'count' => count($tabs_array['PDF']),\n            'limit_warning' => $this->displayLimitPostWarning(count($tabs_array['PDF'])),\n            'mod_security_warning' => Tools::apacheModExists('mod_security'),\n            'tabsArray' => $tabs_array,\n            'cancel_url' => $this->context->link->getAdminLink('AdminTranslations'),\n            'missing_translations' => $missing_translations_pdf,\n        ]);\n\n        $this->initToolbar();\n        $this->base_tpl_view = 'translation_form.tpl';\n\n        return parent::renderView();\n    }\n\n    /**\n     * Recursively list files in directory $dir.\n     *\n     * @param string $dir\n     * @param array $list\n     * @param string $file_ext\n     *\n     * @return array\n     */\n    public function listFiles($dir, $list = [], $file_ext = 'tpl')\n    {\n        $dir = rtrim($dir, '/') . DIRECTORY_SEPARATOR;\n\n        $to_parse = is_dir($dir) ? scandir($dir, SCANDIR_SORT_NONE) : [];\n        // copied (and kind of) adapted from AdminImages.php\n        foreach ($to_parse as $file) {\n            if (!in_array($file, self::$ignore_folder)) {\n                if (preg_match('#' . preg_quote($file_ext, '#') . '$#i', $file)) {\n                    $list[$dir][] = $file;\n                } elseif (is_dir($dir . $file)) {\n                    $list = $this->listFiles($dir . $file, $list, $file_ext);\n                }\n            }\n        }\n\n        return $list;\n    }\n\n    /**\n     * Checks if theme exists.\n     *\n     * @param string $theme\n     *\n     * @return bool\n     */\n    protected function theme_exists($theme)\n    {\n        $theme_exists = false;\n        foreach ($this->themes as $existing_theme) {\n            /** @var Theme $existing_theme */\n            if ($existing_theme->getName() == $theme) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static function getEmailHTML($email)\n    {\n        if (__PS_BASE_URI__ != '/') {\n            $email_file = str_replace(__PS_BASE_URI__, _PS_ROOT_DIR_ . '/', $email);\n        } else {\n            $email_file = _PS_ROOT_DIR_ . $email;\n        }\n\n        if (strpos(realpath($email_file), _PS_ROOT_DIR_) === 0 && file_exists($email_file)) {\n            $email_html = file_get_contents($email_file);\n        } else {\n            $email_html = '';\n        }\n\n        return $email_html;\n    }\n\n    /**\n     * Display the HTML content of an email.\n     */\n    public function displayAjaxEmailHTML()\n    {\n        $email = Tools::getValue('email');\n        $this->ajaxRender(\n            AdminTranslationsController::getEmailHTML($email)\n        );\n    }\n\n    /**\n     * @param string $directory Name of directory\n     *\n     * @return array\n     */\n    protected function getSubjectMailContent($directory)\n    {\n        $subject_mail_content = [];\n        if (Tools::file_exists_cache($directory . '/lang.php')) {\n            // we need to include this even if already included (no include once)\n            include $directory . '/lang.php';\n            foreach ($GLOBALS[$this->translations_informations[$this->type_selected]['var']] as $key => $subject) {\n                ++$this->total_expression;\n                $subject = str_replace('\\n', ' ', $subject);\n                $subject = str_replace(\"\\\\'\", \"\\'\", $subject);\n                $subject_mail_content[$key]['trad'] = htmlentities($subject, ENT_QUOTES, 'UTF-8');\n                $subject_mail_content[$key]['use_sprintf'] = $this->checkIfKeyUseSprintf($key);\n            }\n        }\n\n        return $subject_mail_content;\n    }\n}\n"], "filenames": ["controllers/admin/AdminTranslationsController.php"], "buggy_code_start_loc": [3299], "buggy_code_end_loc": [3300], "fixing_code_start_loc": [3299], "fixing_code_end_loc": [3300], "type": "CWE-22", "message": "PrestaShop is an open source e-commerce web application. Prior to version 8.1.1, the `displayAjaxEmailHTML` method can be used to read any file on the server, potentially even outside of the project if the server is not correctly configured. Version 8.1.1 contains a patch for this issue. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-39528", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-07T21:15:10.597", "lastModified": "2023-08-09T19:45:03.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is an open source e-commerce web application. Prior to version 8.1.1, the `displayAjaxEmailHTML` method can be used to read any file on the server, potentially even outside of the project if the server is not correctly configured. Version 8.1.1 contains a patch for this issue. There are no known workarounds."}, {"lang": "es", "value": "PrestaShop es una aplicaci\u00f3n web de comercio electr\u00f3nico de c\u00f3digo abierto. Antes de la versi\u00f3n 8.1.1, el m\u00e9todo \"displayAjaxEmailHTML\" puede ser utilizado para leer cualquier archivo en el servidor, potencialmente incluso fuera del proyecto si el servidor no est\u00e1 configurado correctamente. La versi\u00f3n 8.1.1 contiene un parche para este problema. No se conocen soluciones. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.1.1", "matchCriteriaId": "705A3EBE-48E5-4E3B-A8D8-471098F8B56E"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/11de3a84322fa4ecd0995ac40d575db61804724c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-hpf4-v7v2-95p2", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/11de3a84322fa4ecd0995ac40d575db61804724c"}}