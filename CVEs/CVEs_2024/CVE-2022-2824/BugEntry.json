{"buggy_code": ["<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * import supporting libraries\n */\nrequire_once(\"DataAdapter.php\");\nrequire_once(\"CriteriaFilter.php\");\nrequire_once(\"verysimple/IO/Includer.php\");\n\n/**\n * Criteria is a base object that is passed into Phreeze->Query for retreiving\n * records based on specific criteria\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc.\n * @copyright 1997-2007 VerySimple, Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 2.3\n */\nclass Criteria\n{\n    protected $_join;\n    protected $_where;\n    protected $_where_delim;\n    protected $_order;\n    protected $_order_delim;\n    protected $_is_prepared;\n    protected $_map_object_class;\n    private $_fieldmaps;\n    private $_keymaps;\n    private $_constructor_where;\n    private $_constructor_order;\n    private $_set_order;\n    private $_and = array ();\n    private $_or = array ();\n    public $PrimaryKeyField;\n    public $PrimaryKeyValue;\n\n    /**\n     *\n     * @var $Filters a CriteriaFilter or array of CriteriaFilters to be applied to the query\n     */\n    public $Filters;\n    public function __construct($where = \"\", $order = \"\")\n    {\n        $this->_constructor_where = $where;\n        $this->_constructor_order = $order;\n\n        $this->_where = $where;\n        $this->_order = $order;\n\n        $this->Init();\n    }\n\n    /**\n     * Init is called directly after construction and can be overridden.\n     * If the\n     * name of the Criteria class is not ObjectClassCriteria, then this method\n     * must be overridden and _map_object_class should be set to the correct\n     * name of the DAO Map class\n     */\n    protected function Init()\n    {\n        $this->_map_object_class = str_replace(\"Criteria\", \"Map\", get_class($this));\n    }\n\n    /**\n     * Add a CriteriaFilter to the criteria for custom filtering of results\n     *\n     * @param CriteriaFilter $filter\n     */\n    public function AddFilter(CriteriaFilter $filter)\n    {\n        if (! $this->Filters) {\n            $this->Filters = array ();\n        }\n\n        $this->Filters [] = $filter;\n    }\n\n    /**\n     * Return an array of CriteriaFilters that have been added to this criteria\n     *\n     * @return array\n     */\n    public function GetFilters()\n    {\n        return $this->Filters;\n    }\n\n    /**\n     * Remove all filters that are currently attached\n     */\n    public function ClearFilters()\n    {\n        $this->Filters = null;\n    }\n\n    /**\n     * Adds a criteria to be joined w/ an \"and\" statement.\n     * Criterias to foreign objects may be added as long as they\n     * have an immediate relationship to the foreign table\n     *\n     * @param\n     *          Criteria\n     * @param\n     *          string [optional] id of the foreign key map. If the same table is joined\n     *          multiple times, then you should specify which keymap to use\n     */\n    public function AddAnd(Criteria $criteria, $keymap_id = null)\n    {\n        $this->_and [] = $criteria;\n    }\n\n    /**\n     * Return any and criterias that have been added to this criteria\n     *\n     * @return array\n     */\n    public function GetAnds()\n    {\n        return $this->_and;\n    }\n\n    /**\n     * Escape values for insertion into a SQL query string\n     *\n     * @return string\n     */\n    public function Escape($val)\n    {\n        return DataAdapter::Escape($val);\n    }\n\n    /**\n     * Returns DataAdapter::GetQuotedSql($val)\n     *\n     * @param variant $val\n     *          to be quoted\n     * @return string\n     */\n    public function GetQuotedSql($val)\n    {\n        return DataAdapter::GetQuotedSql($val);\n    }\n\n    /**\n     * Adds a criteria to be joined w/ an \"or\" statement.\n     * Criterias to foreign objects may be added as long as they\n     * have an immediate relationship to the foreign table\n     *\n     * @param\n     *          Criteria\n     * @param\n     *          string [optional] id of the foreign key map. If the same table is joined\n     *          multiple times, then you should specify which keymap to use\n     */\n    public function AddOr(Criteria $criteria, $keymap_id = null)\n    {\n        $this->_or [] = $criteria;\n    }\n\n    /**\n     * Return any 'or' criterias that have been added to this criteria\n     *\n     * @return array\n     */\n    public function GetOrs()\n    {\n        return $this->_or;\n    }\n\n    /**\n     * Reset the Criteria for re-use.\n     * This is called by querybuilder after the criteria has been used\n     * to generate SQL. It can be called manually as well.\n     */\n    public function Reset()\n    {\n        $this->_is_prepared = false;\n        $this->_where = $this->_constructor_where;\n        $this->_order = $this->_constructor_order;\n    }\n\n    /**\n     * Prepare is called just prior to execution and will fire OnPrepare after it completes\n     * If this is a base Criteria class, then we can only do a lookup by PrimaryKeyField or\n     * else raw SQL must be provided during construction.\n     * _Equals, _BeginsWith can only be\n     * used by inherited Criteria classes because we don't know what table this is associated\n     * with, so we can't translate property names to column names.\n     */\n    final protected function Prepare()\n    {\n        if (! $this->_is_prepared) {\n            if (get_class($this) == \"Criteria\") {\n                if ($this->PrimaryKeyField) {\n                    // PrimaryKeyField property was specified. this might be coming from $phreezer->Get\n                    $this->_where = \" \" . $this->PrimaryKeyField . \" = '\" . $this->Escape($this->PrimaryKeyValue) . \"'\";\n                }\n\n                // else {raw SQL was likely provided in the constructor. this might be coming from $phreezer->GetOneToMany}\n            } else {\n                // loop through all of the properties and attempt to\n                // build a query based on any values that have been set\n                $this->_where = '';\n                $this->_where_delim = '';\n\n                $props = get_object_vars($this);\n                foreach ($props as $prop => $val) {\n                    // TODO: tighten this up a bit to reduce redundant code\n                    if ($prop == \"Filters\" && isset($val) && (is_array($val) || is_a($val, 'CriteriaFilter'))) {\n                        // a filter object will take care of generating it's own where statement\n\n                        // normalize the input to accept either an individual filter or multiple filters\n                        $filters = (is_array($val)) ? $val : array (\n                                $val\n                        );\n\n                        foreach ($filters as $filter) {\n                            $this->_where .= $this->_where_delim . ' ' . $filter->GetWhere($this);\n                            $this->_where_delim = \" and\";\n                        }\n                    } elseif (substr($prop, - 7) == \"_Equals\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_Equals\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" = \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 10) == \"_NotEquals\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_NotEquals\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" != \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 8) == \"_IsEmpty\" && $this->$prop) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsEmpty\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" = ''\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 11) == \"_IsNotEmpty\" && $this->$prop) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsNotEmpty\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" != ''\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 7) == \"_IsLike\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsLike\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" like '%\" . $this->Escape($val) . \"%'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 10) == \"_IsNotLike\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsNotLike\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" not like '%\" . $this->Escape($val) . \"%'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 11) == \"_BeginsWith\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_BeginsWith\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" like '\" . $this->Escape($val) . \"%'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 9) == \"_EndsWith\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_EndsWith\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" like '%\" . $this->Escape($val) . \"'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 12) == \"_GreaterThan\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_GreaterThan\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" > \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 19) == \"_GreaterThanOrEqual\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_GreaterThanOrEqual\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" >= \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 9) == \"_LessThan\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_LessThan\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" < \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 16) == \"_LessThanOrEqual\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_LessThanOrEqual\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" <= \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 10) == \"_BitwiseOr\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_BitwiseOr\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" (\" . $dbfield . \" | '\" . $this->Escape($val) . \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 11) == \"_BitwiseAnd\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_BitwiseAnd\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" (\" . $dbfield . \" & \" . $this->Escape($val) . \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 16) == \"_LiteralFunction\" && strlen($this->$prop)) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_LiteralFunction\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" (\" . $dbfield . \" \" . $val . \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 3) == \"_In\" && isset($val)) {\n                        // if a string was passed in then treat it as comma-delimited\n                        if (! is_array($val)) {\n                            $val = explode(',', $val);\n                        }\n\n                            // if the count is zero, technically the user is saying that they don't\n                            // want any results. the only way to do that is to make the criteria\n                            // something that will for sure not match any existing records. we cannot\n                            // 100% guarantee this, though, we can choose a highly unlikely value\n                            // that will never return a match under ordinary circumstances\n                        if (count($val) == 0) {\n                            array_push($val, \"$prop EMPTY PHREEZE CRITERIA ARRAY\");\n                        }\n\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_In\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" in (\";\n                        $indelim = \"\";\n                        foreach ($val as $n) {\n                            $this->_where .= $indelim . \"'\" . $this->Escape($n) . \"'\";\n                            $indelim = \",\";\n                        }\n\n                        $this->_where .= \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 6) == \"_NotIn\" && isset($val)) {\n                        // if a string was passed in then treat it as comma-delimited\n                        if (! is_array($val)) {\n                            $val = explode(',', $val);\n                        }\n\n                            // if the count is zero, technically the user is saying that they don't\n                            // want any results. the only way to do that is to make the criteria\n                            // something that will for sure not match any existing records. we cannot\n                            // 100% guarantee this, though, we can choose a highly unlikely value\n                            // that will never return a match under ordinary circumstances\n                        if (count($val) == 0) {\n                            array_push($val, \"$prop EMPTY PHREEZE CRITERIA ARRAY\");\n                        }\n\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_NotIn\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" not in (\";\n                        $indelim = \"\";\n                        foreach ($val as $n) {\n                            $this->_where .= $indelim . \"'\" . $this->Escape($n) . \"'\";\n                            $indelim = \",\";\n                        }\n\n                        $this->_where .= \")\";\n                        $this->_where_delim = \" and\";\n                    }\n                }\n            }\n\n            // prepend the sql so the statement will work correctly\n            if ($this->_where) {\n                $this->_where = \" where \" . $this->_where;\n            }\n\n            // if the user has called SetOrder then use that for the order\n            if ($this->_set_order) {\n                $this->_order = $this->_set_order;\n            }\n\n            // if any of the filters have an order by then add those\n            if (is_array($this->Filters)) {\n                $orderDelim = $this->_order ? ',' : '';\n                foreach ($this->Filters as $filter) {\n                    $filterOrder = $filter->GetOrder($this);\n                    if ($filterOrder) {\n                        $this->_order .= $orderDelim . $filterOrder;\n                        $orderDelim = ', ';\n                    }\n                }\n            }\n\n            if ($this->_order) {\n                $this->_order = \" order by \" . $this->_order;\n            }\n\n            $this->OnPrepare();\n            $this->_is_prepared = true;\n        }\n    }\n    public function OnPrepare()\n    {\n    }\n    final public function GetWhere()\n    {\n        $this->Prepare();\n        return $this->_where;\n    }\n    final public function GetJoin()\n    {\n        $this->Prepare();\n        return $this->_join;\n    }\n    final public function GetOrder()\n    {\n        $this->Prepare();\n        return $this->_order;\n    }\n\n    /**\n     * Adds an object property to the order by clause.\n     * If any sorting needs to be done\n     * on foreign tables, then for the moment, you need to override this method and\n     * handle it manually. You can call this method repeatedly to add more than\n     * one property for sorting.\n     *\n     * @param string $property\n     *          the name of the object property (or '?' for random order)\n     * @param bool $desc\n     *          (optional) set to true to sort in descending order (default false)\n     */\n    public function SetOrder($property, $desc = false)\n    {\n        if (! $property) {\n            // no property was specified.\n            return;\n        }\n\n        $this->_order_delim = ($this->_set_order) ? \",\" : \"\";\n\n        if ($property == '?') {\n            $this->_set_order = \"RAND()\" . $this->_order_delim . $this->_set_order;\n        } else {\n            $colname = $this->GetFieldFromProp($property);\n            $this->_set_order .= $this->_order_delim . $colname . ($desc ? \" desc\" : \"\");\n        }\n    }\n    private function InitMaps()\n    {\n        if (! $this->_fieldmaps) {\n            // we have to open the file to get the fieldmaps\n            $mapname = $this->_map_object_class;\n            $this->IncludeMap($mapname);\n\n            $this->_fieldmaps = call_user_func(array (\n                    $mapname,\n                    \"GetFieldMaps\"\n            ));\n            $this->_keymaps = call_user_func(array (\n                    $mapname,\n                    \"GetKeyMaps\"\n            ));\n        }\n    }\n\n    /**\n     * If the map class is not already defined, attempts to require_once the definition.\n     * If the Map file cannot be located, an exception is thrown\n     *\n     * @access public\n     * @param string $objectclass\n     *          The name of the object map class\n     */\n    public function IncludeMap($objectclass)\n    {\n        try {\n            Includer::RequireClass($objectclass, \"Model/DAO/\");\n        } catch (IncludeException $ex) {\n            throw new Exception($ex->getMessage() . '.  If a map file does not exist then ' . get_class($this) . ' can implement GetFieldFromProp instead.');\n        }\n    }\n    protected function GetFieldMaps()\n    {\n        $this->InitMaps();\n        return $this->_fieldmaps;\n    }\n    protected function GetKeyMaps()\n    {\n        $this->InitMaps();\n        return $this->_keymaps;\n    }\n    public function GetFieldFromProp($propname)\n    {\n        if (get_class($this) == \"Criteria\") {\n            throw new Exception(\"Phreeze is unable to determine field mapping.  The base Criteria class should only be used to query by primary key without sorting\");\n        }\n\n        $fms = $this->GetFieldMaps();\n\n        // make sure this property is defined\n        if (! isset($fms [$propname])) {\n            throw new Exception(get_class($this) . \" is unable to determine the database column for the property: '$propname'\");\n        }\n\n        // print_r($this->_fieldmaps);\n        $fm = $fms [$propname];\n\n        return $fm->FieldType == FM_CALCULATION ? \"(\" . $fm->ColumnName . \")\" : \"`\" . $fm->TableName . \"`.`\" . $fm->ColumnName . \"`\";\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @throws Exception\n     */\n    public function __get($key)\n    {\n        if (! Phreezer::$COMPAT_VERSION_2) {\n            throw new Exception(\"Unknown property: $key\");\n        }\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @param string $val\n     * @throws Exception\n     */\n    public function __set($key, $val)\n    {\n        if (! Phreezer::$COMPAT_VERSION_2) {\n            throw new Exception(\"Unknown property: $key\");\n        }\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * DataPage is a container for one \"page\" of data in a DataSet\n * This is used for displaying results in small chunks.\n * A DataPage\n * is returned by DataSet::GetDataPage\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2007 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.1\n */\nclass DataPage implements Iterator\n{\n    /**\n     * The Rows property is an array of objects retreived from the data store\n     */\n    public $Rows = null;\n\n    /**\n     * ObjectName is the classname of the object that is stored\n     */\n    public $ObjectName = \"\";\n\n    /**\n     * ObjectInstance is an instance of the class that is stored in Rows\n     *\n     * @var Phreezable\n     */\n    public $ObjectInstance = null;\n\n    /**\n     * ObjectKey is the name of the primary key property for the objects in Rows\n     */\n    public $ObjectKey = \"\";\n    public $TotalResults = 0;\n    public $TotalPages = 0;\n    public $CurrentPage = 0;\n    public $PageSize = 0;\n\n    /**\n     *\n     * @return Phreezable\n     */\n    public function Next()\n    {\n        return next($this->Rows);\n    }\n    public function rewind()\n    {\n        reset($this->Rows);\n    }\n\n    /**\n     *\n     * @return Phreezable\n     */\n    public function current()\n    {\n        return current($this->Rows);\n    }\n    public function key()\n    {\n        return key($this->Rows);\n    }\n    public function valid()\n    {\n        return $this->current() !== false;\n    }\n\n    /**\n     * Returns the entire page as an array of objects.\n     * if the asSimpleObject is false\n     * then the stateful Phreezable objects will be returned. If asSimpleObject is true\n     * then the objects returned will be whatever is returned by ToObject()\n     * Phreezable object (the default is a stdClass with all public properties)\n     *\n     * @access public\n     * @param\n     *          bool asSimpleObject if true then populate the array with ToObject on each item in the array\n     * @param\n     *          array options (only relevant if asSimpleObject is true) passed through to ToObject\n     * @return array\n     */\n    function ToObjectArray($asSimpleObject = false, $options = null)\n    {\n        $arr = null;\n\n        if ($asSimpleObject) {\n            $arr = array ();\n            foreach ($this->Rows as $row) {\n                $arr [] = $row->ToObject($options);\n            }\n        } else {\n            $arr = $this->Rows;\n        }\n\n        return $arr;\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * import supporting libraries\n */\nrequire_once(\"DataPage.php\");\n\n/**\n * DataSet stores zero or more Loadable objects\n * The DataSet is the object that is returned by every Phreezer Query operation.\n * The DataSet contains various methods to enumerate through , or retrieve all\n * results all at once.\n *\n * The DataSet executes queries lazily, only when the first result is retrieved.\n * Using GetDataPage will allow retreival of sub-sets of large amounts of data without\n * querying the entire database\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2007 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.2\n */\nclass DataSet implements Iterator // @TODO implement Countable, ArrayAccess\n{\n    protected $_phreezer;\n    protected $_rs;\n    protected $_objectclass;\n    protected $_counter;\n    private $_sql;\n    private $_current; // the current object in the set\n    private $_last; // the previous object in the set\n    private $_totalcount;\n    private $_no_exception; // used during iteration to suppress exception on the final Next call\n    private $_cache_timeout; // length of time to cache query results\n    public $UnableToCache = true;\n\n    /**\n     * A custom SQL query may be provided to count the results of the query.\n     * This query should return one column \"counter\" which is the number of rows\n     * and must take into account all criteria parameters.\n     * If no value is provided, the counter query will be generated (which is likely less efficient)\n     *\n     * @var string\n     */\n    public $CountSQL = \"\";\n\n    /**\n     * Contructor initializes the object\n     *\n     * @access public\n     * @param\n     *          Phreezer\n     * @param\n     *          string class of object this DataSet contains\n     * @param string $sql\n     *          code\n     * @param\n     *          int cache timeout (in seconds). Default is Phreezer->ValueCacheTimeout. Set to 0 for no cache\n     */\n    function __construct(&$preezer, $objectclass, $sql, $cache_timeout = null)\n    {\n        $this->_counter = - 1;\n        $this->_totalcount = - 1;\n        $this->_eof = false;\n        $this->_objectclass = $objectclass;\n        $this->_phreezer = & $preezer;\n        $this->_rs = null;\n        $this->_sql = $sql;\n        $this->_cache_timeout = is_null($cache_timeout) ? $preezer->ValueCacheTimeout : $cache_timeout;\n    }\n\n    /**\n     * _getObject must be overridden and returns the type of object that\n     * this collection will contain.\n     *\n     * @access private\n     * @param array $row\n     *          array to use for populating a single object\n     * @return Preezable\n     */\n    private function _getObject(&$row)\n    {\n        $obj = new $this->_objectclass($this->_phreezer, $row);\n        return $obj;\n    }\n\n    /**\n     * Next returns the next object in the collection.\n     *\n     * @access public\n     * @return Preezable\n     */\n    function Next()\n    {\n        if ($this->UnableToCache) {\n            require_once(\"verysimple/Util/ExceptionFormatter.php\");\n            $info = ExceptionFormatter::FormatTrace(debug_backtrace());\n            $this->_phreezer->Observe(\"(DataSet.Next: unable to cache query with cursor) \" . $info . \"  \" . $this->_sql, OBSERVE_DEBUG);\n\n            // use this line to discover where an uncachable query is coming from\n            throw new Exception(\"WTF\");\n\n            // stop this warning from repeating on every next call for this dataset\n            $this->UnableToCache = false;\n        }\n\n        $this->_verifyRs();\n\n        $this->_current = null;\n        $this->_counter ++;\n\n        if ($this->_eof) {\n            if (! $this->_no_exception) {\n                throw new Exception(\"EOF: This is a forward-only dataset.\");\n            }\n        }\n\n        if ($row = $this->_phreezer->DataAdapter->Fetch($this->_rs)) {\n            $this->_current = $this->_getObject($row);\n            $this->_last = $this->_current;\n        } else {\n            $this->_eof = true;\n        }\n\n        return $this->_current;\n    }\n\n    /**\n     * Executes the sql statement and fills the resultset if necessary\n     */\n    private function _verifyRs()\n    {\n        if ($this->_rs == null) {\n            $this->_phreezer->IncludeModel($this->_objectclass);\n            $this->_rs = $this->_phreezer->DataAdapter->Select($this->_sql);\n        }\n    }\n\n    /**\n     * If a reporter query does not return data (insert/update/delete) then\n     * calling Execute will execute the sql without expecting return data\n     */\n    public function Execute()\n    {\n        return $this->_phreezer->DataAdapter->Execute($this->_sql);\n    }\n    public function rewind()\n    {\n        $this->_rs = null;\n        $this->_counter = 0;\n        $this->_no_exception = true;\n        $this->_total = $this->Count();\n        $this->_verifyRs();\n        $this->Next(); // we have to get the party started for php iteration\n    }\n    public function current()\n    {\n        // php iteration calls next then gets the current record. The DataSet\n        // Next return the current object. so, we have to fudge a little on the\n        // laster iteration to make it work properly\n        return ($this->key() == $this->Count()) ? $this->_last : $this->_current;\n    }\n    public function key()\n    {\n        return $this->_counter;\n    }\n    public function valid()\n    {\n        return $this->key() <= $this->Count();\n    }\n\n    /**\n     * Returns true if the total number of records is known.\n     * Because calling \"Count\"\n     * directly may fire a database query, this method can be used to tell if\n     * the number of records is known without actually firing any queries\n     *\n     * @return boolean\n     */\n    function CountIsKnown()\n    {\n        return $this->_totalcount > - 1;\n    }\n\n    /**\n     * Count returns the number of objects in the collection.\n     * If the\n     * count is not available, a count statement will be executed to determine the total\n     * number of rows available\n     *\n     * Note: if you get an \"Unknown Column\" error during a query, it may be due to tables being\n     * joined in the wrong order. To fix this, simply include references in your FieldMap to\n     * the foreign tables in the same order that you wish them to be included in the query\n     *\n     * @access public\n     * @return int\n     */\n    function Count()\n    {\n        if (! $this->CountIsKnown()) {\n            // check the cache\n            $cachekey = $this->_sql . \" COUNT\";\n            $this->_totalcount = $this->GetDelayedCache($cachekey);\n\n            // if no cache, go to the db\n            if ($this->_totalcount != null) {\n                $this->_phreezer->Observe(\"DataSet.Count: skipping count query because cache exists\", OBSERVE_DEBUG);\n            } else {\n                $this->LockCache($cachekey);\n\n                $sql = \"\";\n\n                // if a custom counter sql query was provided, use that because it should be more efficient\n                if ($this->CountSQL) {\n                    $this->_phreezer->Observe(\"DataSet.Count: using CountSQL to obtain total number of records\", OBSERVE_DEBUG);\n                    $sql = $this->CountSQL;\n                } else {\n                    $this->_phreezer->Observe(\"(DataSet.Count: CountSQL was not provided so a counter query will be generated.  Implement GetCustomCountQuery in the reporter class to improve performance.)\", OBSERVE_WARN);\n                    $sql = \"select count(1) as counter from (\" . $this->_sql . \") tmptable\" . rand(1000, 9999);\n                }\n\n                $rs = $this->_phreezer->DataAdapter->Select($sql);\n                $row = $this->_phreezer->DataAdapter->Fetch($rs);\n                $this->_phreezer->DataAdapter->Release($rs);\n                $this->_totalcount = $row [\"counter\"];\n\n                $this->_phreezer->SetValueCache($cachekey, $this->_totalcount, $this->_cache_timeout);\n\n                $this->UnlockCache($cachekey);\n            }\n        }\n\n        return $this->_totalcount;\n    }\n\n    /**\n     * Returns the entire collection as an array of objects.\n     * if the asSimpleObject is false\n     * then the stateful Phreezable objects will be returned. If asSimpleObject is true\n     * then the objects returned will be whatever is returned by ToObject() on each\n     * Phreezable object (the default is a stdClass with all public properties)\n     *\n     * @access public\n     * @param\n     *          bool asSimpleObject if true then populate the array with ToObject()\n     * @param\n     *          array options (only relevant if asSimpleObject is true) passed through to ToObject\n     * @return array\n     */\n    function ToObjectArray($asSimpleObject = false, $options = null)\n    {\n        $cachekey = $this->_sql . \" OBJECTARRAY\" . ($asSimpleObject ? '-AS-OBJECT-' . serialize($options) : '');\n\n        $arr = $this->GetDelayedCache($cachekey);\n\n        if ($arr != null) {\n            // we have a cache value, so we will repopulate from that\n            $this->_phreezer->Observe(\"(DataSet.ToObjectArray: skipping query because cache exists) \" . $this->_sql, OBSERVE_DEBUG);\n            if (! $asSimpleObject) {\n                foreach ($arr as $obj) {\n                    $obj->Refresh($this->_phreezer);\n                }\n            }\n        } else {\n            // there is nothing in the cache so we have to reload it\n\n            $this->LockCache($cachekey);\n\n            $this->UnableToCache = false;\n\n            // use a fixed count array if the count is known for performance\n            $arr = $this->CountIsKnown() ? $this->GetEmptyArray($this->Count()) : array ();\n\n            $i = 0;\n            while ($object = $this->Next()) {\n                $arr [$i++] = $asSimpleObject ? $object->ToObject($options) : $object;\n            }\n\n            $this->_phreezer->SetValueCache($cachekey, $arr, $this->_cache_timeout);\n\n            $this->UnlockCache($cachekey);\n        }\n\n        return $arr;\n    }\n\n    /**\n     *\n     * @deprecated Use GetLabelArray instead\n     */\n    function ToLabelArray($val_prop, $label_prop)\n    {\n        return $this->GetLabelArray($val_prop, $label_prop);\n    }\n\n    /**\n     * Returns an empty array structure, determining which is appropriate\n     * based on the system capabilities and whether a count is known.\n     * If the count parameter is provided then the returned array may be\n     * a fixed-size array (depending on php version)\n     *\n     * @param\n     *          int count (if known)\n     * @return Array or SplFixedArray\n     */\n    private function GetEmptyArray($count = 0)\n    {\n        return ($count && class_exists('SplFixedArray')) ? new SplFixedArray($count) : array ();\n    }\n\n    /**\n     * Returns the entire collection as an associative array that can be easily used\n     * for Smarty dropdowns\n     *\n     * @access public\n     * @param string $val_prop\n     *          the object property to be used for the dropdown value\n     * @param string $label_prop\n     *          the object property to be used for the dropdown label\n     * @return array\n     */\n    function GetLabelArray($val_prop, $label_prop)\n    {\n        // check the cache\n        // $cachekey = md5($this->_sql . \" VAL=\".$val_prop.\" LABEL=\" . $label_prop);\n        $cachekey = $this->_sql . \" VAL=\" . $val_prop . \" LABEL=\" . $label_prop;\n\n        $arr = $this->GetDelayedCache($cachekey);\n\n        // if no cache, go to the db\n        if ($arr != null) {\n            $this->_phreezer->Observe(\"(DataSet.GetLabelArray: skipping query because cache exists) \" . $this->_sql, OBSERVE_QUERY);\n        } else {\n            $this->LockCache($cachekey);\n\n            $arr = array ();\n            $this->UnableToCache = false;\n\n            while ($object = $this->Next()) {\n                $arr [$object->$val_prop] = $object->$label_prop;\n            }\n\n            $this->_phreezer->SetValueCache($cachekey, $arr, $this->_cache_timeout);\n\n            $this->UnlockCache($cachekey);\n        }\n\n        return $arr;\n    }\n\n    /**\n     * Release the resources held by this DataSet\n     *\n     * @access public\n     */\n    function Clear()\n    {\n        $this->_phreezer->DataAdapter->Release($this->_rs);\n    }\n\n    /**\n     * Returns a DataPage object suitable for binding to the smarty PageView plugin.\n     * If $countrecords is true then the total number of records will be eagerly fetched\n     * using a count query. This is necessary in order to calculate the total number of\n     * results and total number of pages. If you do not care about pagination and simply\n     * want to limit the results, then this can be set to false to supress the count\n     * query. However, the pagination settings will not be correct and the total number\n     * of rows will be -1\n     *\n     * @access public\n     * @param int $pagenum\n     *          which page of the results to view\n     * @param int $pagesize\n     *          the size of the page (or zero to disable paging).\n     * @param bool $countrecords\n     *          will eagerly fetch the total number of records with a count query\n     * @return DataPage\n     */\n    function GetDataPage($pagenum, $pagesize, $countrecords = true)\n    {\n        // check the cache\n        // $cachekey = md5($this->_sql . \" PAGE=\".$pagenum.\" SIZE=\" . $pagesize);\n        $cachekey = $this->_sql . \" PAGE=\" . $pagenum . \" SIZE=\" . $pagesize . \" COUNT=\" . ($countrecords ? '1' : '0');\n\n        $page = $this->GetDelayedCache($cachekey);\n\n        // if no cache, go to the db\n        if ($page != null) {\n            $this->_phreezer->Observe(\"(DataSet.GetDataPage: skipping query because cache exists) \" . $this->_sql, OBSERVE_QUERY);\n\n            foreach ($page->Rows as $obj) {\n                $obj->Refresh($this->_phreezer);\n            }\n        } else {\n            $this->LockCache($cachekey);\n\n            $this->UnableToCache = false;\n\n            $page = new DataPage();\n            $page->ObjectName = $this->_objectclass;\n            $page->ObjectInstance = new $this->_objectclass($this->_phreezer);\n            $page->PageSize = $pagesize;\n            $page->CurrentPage = $pagenum;\n\n            if ($countrecords) {\n                $page->TotalResults = $this->Count();\n\n                // first check if we have less than or exactly the same number of\n                // results as the pagesize. if so, don't bother doing the math.\n                // we know we just have one page\n                if ($page->TotalPages > 0 && $page->TotalPages <= $page->PageSize) {\n                    $page->TotalPages = 1;\n                } elseif ($pagesize == 0) {\n                    // we don't want paging to occur in this case\n                    $page->TotalPages = 1;\n                } else {\n                    // we have more than one page. we always need to round up\n                    // here because 5.1 pages means we are spilling out into\n                    // a 6th page. (this will also handle zero results properly)\n                    $page->TotalPages = ceil($page->TotalResults / $pagesize);\n                }\n            } else {\n                $page->TotalResults = $pagesize; // this will get adjusted after we run the query\n                $page->TotalPages = 1;\n            }\n\n            // now enumerate through the rows in the page that we want.\n            // decrement the requested pagenum here so that we will be\n            // using a zero-based array - which saves us from having to\n            // decrement on every iteration\n            $pagenum--;\n\n            $start = $pagesize * $pagenum;\n\n            // @TODO the limit statement should come from the DataAdapter\n            // ~~~ more efficient method where we limit the data queried ~~~\n            // since we are doing paging, we want to get only the records that we\n            // want from the database, so we wrap the original query with a\n            // limit query.\n            // $sql = \"select * from (\" . $this->_sql . \") page limit $start,$pagesize\";\n            $sql = $this->_sql . ($pagesize == 0 ? \"\" : \" limit $start,$pagesize\");\n            $this->_rs = $this->_phreezer->DataAdapter->Select($sql);\n\n            // if we know the number of rows we have, then use SplFixedArray for performance\n            $page->Rows = ($page->TotalPages > $page->CurrentPage) ? $this->GetEmptyArray($pagesize) : array ();\n\n            // transfer all of the results into the page object\n            $i = 0;\n            while ($obj = $this->Next()) {\n                $page->Rows [$i++] = $obj;\n            }\n\n            if (! $countrecords) {\n                // we don't know the total count so just set it to the total number of rows in this page\n                $page->TotalResults = $i;\n            }\n\n            $this->_phreezer->SetValueCache($cachekey, $page, $this->_cache_timeout);\n\n            $this->Clear();\n\n            $this->UnlockCache($cachekey);\n        }\n\n        return $page;\n    }\n\n    /**\n     *\n     * @param string $cachekey\n     */\n    private function GetDelayedCache($cachekey)\n    {\n        // if no cache then don't return anything\n        if ($this->_cache_timeout == 0) {\n            return null;\n        }\n\n        $obj = $this->_phreezer->GetValueCache($cachekey);\n\n        // no cache, so try three times with a delay to prevent a cache stampede\n        $counter = 1;\n        while ($counter < 4 && $obj == null && $this->IsLocked($cachekey)) {\n            $this->_phreezer->Observe(\"(DataSet.GetDelayedCache: flood prevention. delayed attempt \" . $counter . \" of 3...) \" . $cachekey, OBSERVE_DEBUG);\n            usleep(50000); // 5/100th of a second\n            $obj = $this->_phreezer->GetValueCache($cachekey);\n            $counter++;\n        }\n\n        return $obj;\n    }\n\n    /**\n     *\n     * @param\n     *          $cachekey\n     */\n    private function IsLocked($cachekey)\n    {\n        return $this->_phreezer->LockFilePath && file_exists($this->_phreezer->LockFilePath . md5($cachekey) . \".lock\");\n    }\n\n    /**\n     *\n     * @param\n     *          $cachekey\n     */\n    private function LockCache($cachekey)\n    {\n        if ($this->_phreezer->LockFilePath) {\n            touch($this->_phreezer->LockFilePath . md5($cachekey) . \".lock\");\n        }\n    }\n\n    /**\n     *\n     * @param\n     *          $cachekey\n     */\n    private function UnlockCache($cachekey)\n    {\n        if ($this->_phreezer->LockFilePath) {\n            $lockfile = $this->_phreezer->LockFilePath . md5($cachekey) . \".lock\";\n            if (file_exists($lockfile)) {\n                @unlink($lockfile);\n            }\n        }\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * Phreezable Class\n *\n * Abstract base class for object that are persistable by Phreeze\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2005 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.3\n */\nabstract class Phreezable implements Serializable\n{\n    private $_cache = array ();\n    protected $_phreezer;\n    protected $_val_errors = array ();\n    protected $_base_validation_complete = false;\n    private $_isLoaded;\n    private $_isPartiallyLoaded;\n    private $_cacheLevel = 0;\n    private $_noCache = false;\n\n    /** @var these properties will never be cached */\n    private static $NoCacheProperties = array (\n            \"_cache\",\n            \"_phreezer\",\n            \"_val_errors\",\n            \"_base_validation_complete\"\n    );\n\n    /** @var cache of public properties for each type for improved performance when enumerating */\n    private static $PublicPropCache = array ();\n\n    /**\n     * Returns true if the current object has been loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isLoaded = $value;\n        }\n\n        return $this->_isLoaded;\n    }\n\n    /**\n     * Returns true if the current object has been partially loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsPartiallyLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isPartiallyLoaded = $value;\n        }\n\n        return $this->_isPartiallyLoaded;\n    }\n\n    /**\n     * Returns 0 if this was loaded from the DB, 1 if from 1st level cache and 2 if 2nd level cache\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function CacheLevel($value = null)\n    {\n        if ($value != null) {\n            $this->_cacheLevel = $value;\n        }\n\n        return $this->_cacheLevel;\n    }\n\n    /**\n     * Returns true if the current object should never be cached\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function NoCache($value = null)\n    {\n        if ($value != null) {\n            $this->_noCache = $value;\n        }\n\n        return $this->_noCache;\n    }\n\n    /**\n     * Returns an array with all public properties, excluding any internal\n     * properties used by the Phreeze framework.\n     * This is cached for performance\n     * when enumerating through large numbers of the same class\n     *\n     * @return array\n     */\n    public function GetPublicProperties()\n    {\n        $className = get_class($this);\n\n        if (! array_key_exists($className, self::$PublicPropCache)) {\n            $props = array ();\n            $ro = new ReflectionObject($this);\n\n            foreach ($ro->getProperties() as $rp) {\n                $propname = $rp->getName();\n\n                if (! in_array($propname, self::$NoCacheProperties)) {\n                    if (! ($rp->isPrivate() || $rp->isStatic())) {\n                        $props [] = $propname;\n                    }\n                }\n            }\n\n            self::$PublicPropCache [$className] = $props;\n        }\n\n        return self::$PublicPropCache [$className];\n    }\n\n    /**\n     * When serializing, make sure that we ommit certain properties that\n     * should never be cached or serialized.\n     */\n    function serialize()\n    {\n        $propvals = array ();\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->getName();\n\n            if (! in_array($propname, self::$NoCacheProperties)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $propvals [$propname] = $rp->getValue($this);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $propvals [$propname] = $rp->getValue($this);\n                }\n            }\n        }\n\n        return serialize($propvals);\n    }\n\n    /**\n     *\n     * @deprecated use ToObject\n     */\n    function GetObject($props = null, $camelCase = false)\n    {\n        return $this->ToObject(array (\n                'props' => $props,\n                'camelCase' => $camelCase\n        ));\n    }\n\n    /**\n     * Return an object with a limited number of properties from this Phreezable object.\n     * This can be used if not all properties are necessary, for example rendering as JSON\n     *\n     * This can be overridden per class for custom JSON output. The overridden method may accept\n     * additional option parameters that are not supported by the base Phreezable class\n     *\n     * @param\n     *          array assoc array of options. This is passed through from Controller->RenderJSON\n     *          props (array) array of props to return (if null then use all public props)\n     *          omit (array) array of props to omit\n     *          camelCase (bool) if true then first letter of each property is made lowercase\n     * @return stdClass\n     */\n    function ToObject($options = null)\n    {\n        if ($options === null) {\n            $options = array ();\n        }\n\n        $props = array_key_exists('props', $options) ? $options ['props'] : $this->GetPublicProperties();\n        $omit = array_key_exists('omit', $options) ? $options ['omit'] : array ();\n        $camelCase = array_key_exists('camelCase', $options) ? $options ['camelCase'] : false;\n\n        $obj = new stdClass();\n\n        foreach ($props as $prop) {\n            if (! in_array($prop, $omit)) {\n                $newProp = ($camelCase) ? lcfirst($prop) : $prop;\n                $obj->$newProp = $this->$prop;\n            }\n        }\n\n        return $obj;\n    }\n\n    /**\n     * Reload the object when it awakes from serialization\n     *\n     * @param\n     *          $data\n     */\n    function unserialize($data)\n    {\n        $propvals = unserialize($data);\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->name;\n            if (array_key_exists($propname, $propvals)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $rp->setValue($this, $propvals [$propname]);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $rp->setValue($this, $propvals [$propname]);\n                }\n            }\n        }\n    }\n\n    /**\n     * constructor\n     *\n     * @access public\n     * @param Phreezer $phreezer\n     * @param Array $row\n     */\n    final function __construct(Phreezer $phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n        $this->_cache = array ();\n\n        if ($row) {\n            $this->Init();\n            $this->Load($row);\n        } else {\n            $this->LoadDefaults();\n            $this->Init();\n        }\n    }\n\n    /**\n     * Init is called after contruction.\n     * When loading, Init is called prior to Load().\n     * When creating a blank object, Init is called immediately after LoadDefaults()\n     *\n     * @access public\n     */\n    public function Init()\n    {\n    }\n\n    /**\n     * LoadDefaults is called during construction if this object is not instantiated with\n     * a DB row.\n     * The default values as specified in the fieldmap are loaded\n     *\n     * @access public\n     */\n    public function LoadDefaults()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n\n        foreach ($fms as $fm) {\n            $prop = $fm->PropertyName;\n            $this->$prop = $fm->DefaultValue;\n        }\n    }\n\n    /**\n     * LoadFromObject allows this class to be populated from another class, so long as\n     * the properties are compatible.\n     * This is useful when using reporters so that you\n     * can easily convert them to phreezable objects. Be sure to check that IsLoaded\n     * is true before attempting to save this object.\n     *\n     * @access public\n     * @param $src the\n     *          object to populate from, which must contain compatible properties\n     */\n    public function LoadFromObject($src)\n    {\n        $this->IsLoaded(true);\n        $src_cls = get_class($src);\n\n        foreach (get_object_vars($this) as $key => $val) {\n            if (substr($key, 0, 1) != \"_\") {\n                if (property_exists($src_cls, $key)) {\n                    $this->$key = $src->$key;\n                    $this->IsPartiallyLoaded(true);\n                } else {\n                    $this->IsLoaded(false);\n                }\n            }\n        }\n\n        $this->OnLoad();\n    }\n\n    /**\n     * Validate returns true if the properties all contain valid values.\n     * If not,\n     * use GetValidationErrors to see which fields have invalid values.\n     *\n     * @access public\n     */\n    public function Validate()\n    {\n        // force re-validation\n        $this->ResetValidationErrors();\n\n        $is_valid = (! $this->HasValidationErrors());\n\n        // if validation fails, remove this object from the cache otherwise invalid values can\n        // hang around and cause troubles.\n        if (! $is_valid) {\n            $this->_phreezer->DeleteCache(get_class($this), $this->GetPrimaryKeyValue());\n        }\n\n        return $is_valid;\n    }\n\n    /**\n     * Add a validation error to the error array\n     *\n     * @param\n     *          string property name\n     * @param\n     *          string error message\n     */\n    protected function AddValidationError($prop, $msg)\n    {\n        $this->_val_errors [$prop] = $msg;\n    }\n\n    /**\n     * Returns true if this object has validation errors\n     *\n     * @return bool\n     */\n    protected function HasValidationErrors()\n    {\n        $this->_DoBaseValidation();\n        return count($this->_val_errors) > 0;\n    }\n\n    /**\n     * Returns the error array - containing an array of fields with invalid values.\n     *\n     * @access public\n     * @return array\n     */\n    public function GetValidationErrors()\n    {\n        $this->_DoBaseValidation();\n        return $this->_val_errors;\n    }\n\n    /**\n     * Clears all previous validation errors\n     */\n    protected function ResetValidationErrors()\n    {\n        $this->_val_errors = array ();\n        $this->_base_validation_complete = false;\n    }\n\n    /**\n     * populates the _val_errors array w/ phreezer\n     *\n     * @access private\n     */\n    private function _DoBaseValidation()\n    {\n        $lenfunction = $this->_phreezer->DataAdapter->ConnectionSetting->Multibyte ? 'mb_strlen' : 'strlen';\n\n        if (! $this->_base_validation_complete) {\n            $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n\n            foreach ($fms as $fm) {\n                $prop = $fm->PropertyName;\n\n                if ($fm->FieldType == FM_TYPE_DECIMAL && is_numeric($fm->FieldSize)) {\n                    // decimal validation needs to be treated differently than whole numbers\n\n                    $values = explode('.', (string) $this->$prop, 2);\n                    $right = count($values) > 1 ? strlen((string) $values [1]) : 0;\n                    $left = strlen((string) $values [0]);\n\n                    $limits = explode('.', (string) $fm->FieldSize, 2);\n                    $limitRight = count($limits) > 1 ? (int) $limits [1] : 0;\n                    $limitLeft = (int) $limits [0] - $limitRight;\n\n                    if ($left > $limitLeft || $right > $limitRight) {\n                        $this->AddValidationError($prop, \"$prop exceeds the maximum length of \" . $fm->FieldSize . \"\");\n                    }\n                } elseif (is_numeric($fm->FieldSize) && ($lenfunction($this->$prop) - 1 > $fm->FieldSize)) {\n                    $this->AddValidationError($prop, \"$prop exceeds the maximum length of \" . $fm->FieldSize . \"\");\n                }\n\n                if ($this->$prop == \"\" && ($fm->DefaultValue || $fm->IsAutoInsert)) {\n                    // these fields are auto-populated so we don't need to validate them unless\n                    // a specific value was provided\n                } else {\n                    switch ($fm->FieldType) {\n                        case FM_TYPE_INT:\n                        case FM_TYPE_SMALLINT:\n                        case FM_TYPE_TINYINT:\n                        case FM_TYPE_MEDIUMINT:\n                        case FM_TYPE_BIGINT:\n                        case FM_TYPE_DECIMAL:\n                            if (! is_numeric($this->$prop)) {\n                                $this->AddValidationError($prop, \"$prop is not a valid number\");\n                            }\n                            break;\n                        case FM_TYPE_DATE:\n                        case FM_TYPE_DATETIME:\n                            if (strtotime($this->$prop) === '') {\n                                $this->AddValidationError($prop, \"$prop is not a valid date/time value.\");\n                            }\n                            break;\n                        case FM_TYPE_ENUM:\n                            if (! in_array($this->$prop, $fm->GetEnumValues())) {\n                                $this->AddValidationError($prop, \"$prop is not valid value. Allowed values: \" . implode(', ', $fm->GetEnumValues()));\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        // print_r($this->_val_errors);\n\n        $this->_base_validation_complete = true;\n    }\n\n    /**\n     * This static function can be overridden to populate this object with\n     * results of a custom query\n     *\n     * @access public\n     * @param Criteria $criteria\n     * @return string or null\n     */\n    public static function GetCustomQuery($criteria)\n    {\n        return null;\n    }\n\n    /**\n     * Refresh the object in the event that it has been saved to the session or serialized\n     *\n     * @access public\n     * @param Phreezer $phreezer\n     * @param Array $row\n     */\n    final function Refresh(&$phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n\n        // also refresh any children in the cache in case they are accessed\n        foreach ($this->_cache as $child) {\n            if (in_array(\"Phreezable\", class_parents($child))) {\n                $child->Refresh($phreezer, $row);\n            }\n        }\n\n        if ($row) {\n            $this->Load($row);\n        }\n\n        $this->OnRefresh();\n    }\n\n    /**\n     * Serialized string representation of this object.\n     * For sorting\n     * purposes it is recommended to override this method\n     */\n    function ToString()\n    {\n        return serialize($this);\n    }\n\n    /**\n     * Returns the name of the primary key property.\n     * TODO: does not support multiple primary keys.\n     *\n     * @access public\n     * @return string\n     */\n    function GetPrimaryKeyName()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        foreach ($fms as $fm) {\n            if ($fm->IsPrimaryKey) {\n                return $fm->PropertyName;\n            }\n        }\n\n        /*\n         * print \"<pre>\";\n         * $this->Data = \"\";\n         * $this->_phreezer = null;\n         * $this->_cache = null;\n         * print_r($this);\n         *\n         * print_r($fms);\n         * die();\n         */\n\n        throw new Exception(\"No Primary Key found for \" . get_class($this));\n    }\n\n    /**\n     * Returns the value of the primary key property.\n     * TODO: does not support multiple primary keys.\n     *\n     * @access public\n     * @return string\n     */\n    function GetPrimaryKeyValue()\n    {\n        $prop = $this->GetPrimaryKeyName();\n        return $this->$prop;\n    }\n\n    /**\n     * Returns this object as an associative array with properties as keys and\n     * values as values\n     *\n     * @access public\n     * @return array\n     */\n    function GetArray()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        $cols = array ();\n\n        foreach ($fms as $fm) {\n            $prop = $fm->PropertyName;\n            $cols [$fm->ColumnName] = $this->$prop;\n        }\n\n        return $cols;\n    }\n\n    /**\n     * Persist this object to the data store\n     *\n     * @access public\n     * @param bool $force_insert\n     *          (default = false)\n     * @return int auto_increment or number of records affected\n     */\n    function Save($force_insert = false)\n    {\n        return $this->_phreezer->Save($this, $force_insert);\n    }\n\n    /**\n     * Delete this object from the data store\n     *\n     * @access public\n     * @return int number of records affected\n     */\n    function Delete()\n    {\n        return $this->_phreezer->Delete($this);\n    }\n\n    /**\n     * Loads the object with data given in the row array.\n     *\n     * @access public\n     * @param Array $row\n     */\n    function Load(&$row)\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        $this->_phreezer->Observe(\"Loading \" . get_class($this), OBSERVE_DEBUG);\n\n        $this->IsLoaded(true); // assume true until fail occurs\n        $this->IsPartiallyLoaded(false); // at least we tried\n\n        // in order to prevent collisions on fields, QueryBuilder appends __tablename__rand to the\n                                         // sql statement. We need to strip that out so we can match it up to the property names\n        $rowlocal = array ();\n        foreach ($row as $key => $val) {\n            $info = explode(\"___\", $key);\n\n            // we prefer to use tablename.colname if we have it, but if not\n            // just use the colname\n            $newkey = isset($info [1]) ? ($info [1] . \".\" . $info [0]) : $info [0];\n            if (isset($rowlocal [$newkey])) {\n                throw new Exception(\"The column `$newkey` was selected twice in the same query, causing a data collision\");\n            }\n\n            $rowlocal [$newkey] = $val;\n        }\n\n        foreach ($fms as $fm) {\n            if (array_key_exists($fm->TableName . \".\" . $fm->ColumnName, $rowlocal)) {\n                // first try to locate the field by tablename.colname\n                $prop = $fm->PropertyName;\n                $this->$prop = $rowlocal [$fm->TableName . \".\" . $fm->ColumnName];\n            } elseif (array_key_exists($fm->ColumnName, $rowlocal)) {\n                // if we can't locate the field by tablename.colname, then just look for colname\n                $prop = $fm->PropertyName;\n                $this->$prop = $rowlocal [$fm->ColumnName];\n            } else {\n                // there is a required column missing from this $row array - mark as partially loaded\n                $this->_phreezer->Observe(\"Missing column '\" . $fm->ColumnName . \"' while loading \" . get_class($this), OBSERVE_WARN);\n                $this->IsLoaded(false);\n                $this->IsPartiallyLoaded(true);\n            }\n        }\n\n        // now look for any eagerly loaded children - their fields should be available in this query\n        $kms = $this->_phreezer->GetKeyMaps(get_class($this));\n\n        foreach ($kms as $km) {\n            if ($km->LoadType == KM_LOAD_EAGER || $km->LoadType == KM_LOAD_INNER) {\n                // load the child object that was obtained eagerly and cache so we\n                // won't ever grab the same object twice in one page load\n                $this->_phreezer->IncludeModel($km->ForeignObject);\n                $foclass = $km->ForeignObject;\n                $fo = new $foclass($this->_phreezer, $row);\n\n                $this->_phreezer->SetCache($foclass, $fo->GetPrimaryKeyValue(), $fo, $this->_phreezer->CacheQueryObjectLevel2);\n            }\n        }\n\n        $this->_phreezer->Observe(\"Firing \" . get_class($this) . \"->OnLoad()\", OBSERVE_DEBUG);\n        $this->OnLoad();\n    }\n\n    /**\n     * Returns a value from the local cache\n     *\n     * @access public\n     * @deprecated this is handled internally by Phreezer now\n     * @param string $key\n     * @return object\n     */\n    public function GetCache($key)\n    {\n        return (array_key_exists($key, $this->_cache) ? $this->_cache [$key] : null);\n    }\n\n    /**\n     * Sets a value from in local cache\n     *\n     * @access public\n     * @deprecated this is handled internally by Phreezer now\n     * @param string $key\n     * @param object $obj\n     */\n    public function SetCache($key, $obj)\n    {\n        $this->_cache [$key] = $obj;\n    }\n\n    /**\n     * Clears all values in the local cache\n     *\n     * @access public\n     * @deprecated this is handled internally by Phreezer now\n     */\n    public function ClearCache()\n    {\n        $this->_cache = array ();\n    }\n\n    /**\n     * Called after object is loaded, may be overridden\n     *\n     * @access protected\n     */\n    protected function OnLoad()\n    {\n    }\n\n    /**\n     * Called by Phreezer prior to saving the object, may be overridden.\n     * If this function returns any non-true value, then the save operation\n     * will be cancelled. This allows you to perform custom insert/update queries\n     * if necessary\n     *\n     * @access protected\n     * @param boolean $is_insert\n     *          true if Phreezer considers this a new record\n     * @return boolean\n     */\n    public function OnSave($is_insert)\n    {\n        return true;\n    }\n\n    /**\n     * Called by Phreezer after object is updated, may be overridden\n     *\n     * @access public\n     */\n    public function OnUpdate()\n    {\n    }\n\n    /**\n     * Called by Phreezer after object is inserted, may be overridden\n     *\n     * @access public\n     */\n    public function OnInsert()\n    {\n    }\n\n    /**\n     * Called by Phreezer after object is deleted, may be overridden\n     *\n     * @access public\n     */\n    public function OnDelete()\n    {\n    }\n\n    /**\n     * Called by Phreezer before object is deleted, may be overridden.\n     * if a true value is not returned, the delete operation will be aborted\n     *\n     * @access public\n     * @return bool\n     */\n    public function OnBeforeDelete()\n    {\n        return true;\n    }\n\n    /**\n     * Called after object is refreshed, may be overridden\n     *\n     * @access public\n     */\n    public function OnRefresh()\n    {\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @throws Exception\n     */\n    public function __get($key)\n    {\n        throw new Exception(\"Unknown property: $key\");\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @param string $val\n     * @throws Exception\n     */\n    public function __set($key, $val)\n    {\n        throw new Exception(\"Unknown property: $key\");\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * Reporter allows creating dynamic objects that do not necessarily reflect\n * the structure of the datastore table.\n * This is often useful for reporting\n * or returning aggregate data\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2005 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.0\n */\nabstract class Reporter implements Serializable\n{\n    protected $_phreezer;\n    private $_isLoaded;\n    private $_isPartiallyLoaded;\n    private $_cacheLevel = 0;\n    private $_noCache = false;\n\n    /** @var these properties will never be cached */\n    private static $NoCacheProperties = array (\n            \"_cache\",\n            \"_phreezer\",\n            \"_val_errors\",\n            \"_base_validation_complete\"\n    );\n\n    /** @var cache of public properties for each type for improved performance when enumerating */\n    private static $PublicPropCache = array ();\n\n    /**\n     * Returns true if the current object has been loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isLoaded = $value;\n        }\n\n        return $this->_isLoaded;\n    }\n\n    /**\n     * Returns true if the current object has been partially loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsPartiallyLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isPartiallyLoaded = $value;\n        }\n\n        return $this->_isPartiallyLoaded;\n    }\n\n    /**\n     * Returns 0 if this was loaded from the DB, 1 if from 1st level cache and 2 if 2nd level cache\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function CacheLevel($value = null)\n    {\n        if ($value != null) {\n            $this->_cacheLevel = $value;\n        }\n\n        return $this->_cacheLevel;\n    }\n\n    /**\n     * Returns true if the current object should never be cached\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function NoCache($value = null)\n    {\n        if ($value != null) {\n            $this->_noCache = $value;\n        }\n\n        return $this->_noCache;\n    }\n\n    /**\n     * constructor\n     *\n     * @access public\n     * @param Phreezer $phreezer\n     * @param Array $row\n     */\n    final function __construct(&$phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n\n        if ($row) {\n            $this->Load($row);\n        }\n    }\n\n    /**\n     * When serializing, make sure that we ommit certain properties that\n     * should never be cached or serialized.\n     */\n    function serialize()\n    {\n        $propvals = array ();\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->getName();\n\n            if (! in_array($propname, self::$NoCacheProperties)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $propvals [$propname] = $rp->getValue($this);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $propvals [$propname] = $rp->getValue($this);\n                }\n            }\n        }\n\n        return serialize($propvals);\n    }\n\n    /**\n     * Reload the object when it awakes from serialization\n     *\n     * @param\n     *          $data\n     */\n    function unserialize($data)\n    {\n        $propvals = unserialize($data);\n\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->name;\n            if (array_key_exists($propname, $propvals)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $rp->setValue($this, $propvals [$propname]);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $rp->setValue($this, $propvals [$propname]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns an array with all public properties, excluding any internal\n     * properties used by the Phreeze framework.\n     * This is cached for performance\n     * when enumerating through large numbers of the same class\n     *\n     * @return array\n     */\n    public function GetPublicProperties()\n    {\n        $className = get_class($this);\n\n        if (! array_key_exists($className, self::$PublicPropCache)) {\n            $props = array ();\n            $ro = new ReflectionObject($this);\n\n            foreach ($ro->getProperties() as $rp) {\n                $propname = $rp->getName();\n\n                if (! in_array($propname, self::$NoCacheProperties)) {\n                    if (! ($rp->isPrivate() || $rp->isStatic())) {\n                        $props [] = $propname;\n                    }\n                }\n            }\n\n            self::$PublicPropCache [$className] = $props;\n        }\n\n        return self::$PublicPropCache [$className];\n    }\n\n    /**\n     * Return an object with a limited number of properties from this Phreezable object.\n     * This can be used if not all properties are necessary, for example rendering as JSON\n     *\n     * This can be overridden per class for custom JSON output. the overridden method may accept\n     * additional option parameters that are not supported by the base Phreezable class\n     *\n     * @param\n     *          array assoc array of options. This is passed through from Controller->RenderJSON\n     *          props (array) array of props to return (if null then use all public props)\n     *          omit (array) array of props to omit\n     *          camelCase (bool) if true then first letter of each property is made lowercase\n     * @return stdClass\n     */\n    function ToObject($options = null)\n    {\n        if ($options === null) {\n            $options = array ();\n        }\n\n        $props = array_key_exists('props', $options) ? $options ['props'] : $this->GetPublicProperties();\n        $omit = array_key_exists('omit', $options) ? $options ['omit'] : array ();\n        $camelCase = array_key_exists('camelCase', $options) ? $options ['camelCase'] : false;\n\n        $obj = new stdClass();\n\n        foreach ($props as $prop) {\n            if (! in_array($prop, $omit)) {\n                $newProp = ($camelCase) ? lcfirst($prop) : $prop;\n                $obj->$newProp = $this->$prop;\n            }\n        }\n\n        return $obj;\n    }\n\n    /**\n     * Restores the object's connection to the datastore, for example after serialization\n     *\n     * @param\n     *          $phreezer\n     * @param\n     *          $row\n     */\n    function Refresh(Phreezer $phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n\n        if ($row) {\n            $this->Load($row);\n        }\n\n        $this->OnRefresh();\n    }\n\n    /**\n     * Called after object is refreshed, may be overridden\n     *\n     * @access public\n     */\n    public function OnRefresh()\n    {\n    }\n\n    /**\n     * This static function can be overridden to populate this object with\n     * results of a custom query\n     *\n     * @access public\n     * @param Criteria $criteria\n     * @return string\n     */\n    static function GetCustomQuery($criteria)\n    {\n        return \"\";\n    }\n\n    /**\n     * This may be overridden to return SQL used for counting the number of rows\n     * in a result.\n     * This method is not required, however it will allow\n     * Phreeze to use an efficient query for counting results. This query\n     * must return the correct number of results that GetCustomQuery would,\n     * given the same criteria\n     *\n     * The resultant SQL must return only one row with one column named 'counter'\n     *\n     * @access public\n     * @param Criteria $criteria\n     * @return string\n     */\n    static function GetCustomCountQuery($criteria)\n    {\n        return \"\";\n    }\n\n    /**\n     * Returns this object as an associative array with properties as keys and\n     * values as values\n     *\n     * @access public\n     * @return array\n     */\n    function GetArray()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        $cols = array ();\n\n        foreach ($fms as $fm) {\n            $prop = $fm->PropertyName;\n            $cols [$fm->ColumnName] = $this->$prop;\n        }\n\n        return $cols;\n    }\n\n    /**\n     * Loads the object with data given in the row array.\n     *\n     * @access public\n     * @param Array $row\n     */\n    function Load(&$row)\n    {\n        $this->_phreezer->Observe(\"Loading \" . get_class($this), OBSERVE_DEBUG);\n\n        foreach (array_keys($row) as $prop) {\n            $this->$prop = $row [$prop];\n        }\n\n        $this->OnLoad();\n    }\n\n    /**\n     * Called after object is loaded, may be overridden\n     *\n     * @access protected\n     */\n    protected function OnLoad()\n    {\n    }\n}\n", "<?php\n\n/**\n * PortalPatientController.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2022 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n/**\n * import supporting libraries\n */\nrequire_once(\"AppBasePortalController.php\");\nrequire_once(\"Model/Patient.php\");\n\n/**\n * PatientController is the controller class for the Patient object.\n * The\n * controller is responsible for processing input from the user, reading/updating\n * the model as necessary and displaying the appropriate view.\n *\n * @package Patient Portal::Controller\n * @author ClassBuilder\n * @version 1.0\n */\nclass PortalPatientController extends AppBasePortalController\n{\n    /**\n     * Override here for any controller-specific functionality\n     *\n     * @inheritdocs\n     */\n    protected function Init()\n    {\n        parent::Init();\n    }\n\n    /**\n     * Displays a list view of Patient objects\n     */\n    public function ListView()\n    {\n        $rid = $pid = $user = $encounter = 0;\n        if (isset($_GET['id'])) {\n            $rid = (int) $_GET['id'];\n        }\n\n        if (isset($_GET['pid'])) {\n            $pid = (int) $_GET['pid'];\n        }\n\n        if (isset($_GET['user'])) {\n            $user = $_GET['user'];\n        }\n\n        if (isset($_GET['enc'])) {\n            $encounter = $_GET['enc'];\n        }\n\n        $this->Assign('recid', $rid);\n        $this->Assign('cpid', $pid);\n        $this->Assign('cuser', $user);\n        $this->Assign('encounter', $encounter);\n        $this->Render();\n    }\n\n    /**\n     * API Method queries for Patient records and render as JSON\n     */\n    public function Query()\n    {\n        try {\n            $criteria = new PatientCriteria();\n            $recnum = RequestUtil::Get('patientId');\n            $criteria->Pid_Equals = $recnum;\n\n            $output = new stdClass();\n\n            // if a sort order was specified then specify in the criteria\n            $output->orderBy = RequestUtil::Get('orderBy');\n            $output->orderDesc = RequestUtil::Get('orderDesc') != '';\n            if ($output->orderBy) {\n                $criteria->SetOrder($output->orderBy, $output->orderDesc);\n            }\n\n            $page = RequestUtil::Get('page');\n\n            // return all results\n            $patientdata = $this->Phreezer->Query('PatientReporter', $criteria);\n            $output->rows = $patientdata->ToObjectArray(true, $this->SimpleObjectParams());\n            $output->totalResults = count($output->rows);\n            $output->totalPages = 1;\n            $output->pageSize = $output->totalResults;\n            $output->currentPage = 1;\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method retrieves a single Patient record and render as JSON\n     */\n    public function Read()\n    {\n        try {\n            // not required here but, represents patient rec id, not audit id.\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $ppid = RequestUtil::Get('patientId');\n            $appsql = new ApplicationTable();\n            $edata = $appsql->getPortalAudit($ppid, 'review');\n            $changed = !empty($edata['table_args']) ? unserialize($edata['table_args'], ['allowed_classes' => false]) : [];\n            $newv = array();\n            foreach ($changed as $key => $val) {\n                $newv[lcfirst(ucwords(preg_replace_callback(\"/(\\_(.))/\", function ($match) {\n                    return strtoupper($match[2]);\n                }, strtolower($key))))] = $val;\n            }\n\n            $this->RenderJSON($newv, $this->JSONPCallback(), false, $this->SimpleObjectParams());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method updates an existing Patient record and render response as JSON\n     */\n    public function Update()\n    {\n        try {\n            $json = json_decode(RequestUtil::GetBody());\n\n            if (! $json) {\n                throw new Exception('The request body does not contain valid JSON');\n            }\n\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $patient = $this->Phreezer->Get('Patient', $pk);\n\n            $patient->Title = $this->SafeGetVal($json, 'title', $patient->Title);\n            $patient->Language = $this->SafeGetVal($json, 'language', $patient->Language);\n            //$patient->Financial = $this->SafeGetVal($json, 'financial', $patient->Financial);\n            $patient->Fname = $this->SafeGetVal($json, 'fname', $patient->Fname);\n            $patient->Lname = $this->SafeGetVal($json, 'lname', $patient->Lname);\n            $patient->Mname = $this->SafeGetVal($json, 'mname', $patient->Mname);\n            $patient->Dob = date('Y-m-d', strtotime($this->SafeGetVal($json, 'dob', $patient->Dob)));\n            $patient->Street = $this->SafeGetVal($json, 'street', $patient->Street);\n            $patient->PostalCode = $this->SafeGetVal($json, 'postalCode', $patient->PostalCode);\n            $patient->City = $this->SafeGetVal($json, 'city', $patient->City);\n            $patient->State = $this->SafeGetVal($json, 'state', $patient->State);\n            $patient->CountryCode = $this->SafeGetVal($json, 'countryCode', $patient->CountryCode);\n            $patient->DriversLicense = $this->SafeGetVal($json, 'driversLicense', $patient->DriversLicense);\n            $patient->Ss = $this->SafeGetVal($json, 'ss', $patient->Ss);\n            $patient->Occupation = $this->SafeGetVal($json, 'occupation', $patient->Occupation);\n            $patient->PhoneHome = $this->SafeGetVal($json, 'phoneHome', $patient->PhoneHome);\n            $patient->PhoneBiz = $this->SafeGetVal($json, 'phoneBiz', $patient->PhoneBiz);\n            $patient->PhoneContact = $this->SafeGetVal($json, 'phoneContact', $patient->PhoneContact);\n            $patient->PhoneCell = $this->SafeGetVal($json, 'phoneCell', $patient->PhoneCell);\n            $patient->PharmacyId = $this->SafeGetVal($json, 'pharmacyId', $patient->PharmacyId);\n            $patient->Status = $this->SafeGetVal($json, 'status', $patient->Status);\n            $patient->ContactRelationship = $this->SafeGetVal($json, 'contactRelationship', $patient->ContactRelationship);\n            $patient->Date = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'date', $patient->Date)));\n            $patient->Sex = $this->SafeGetVal($json, 'sex', $patient->Sex);\n            $patient->Referrer = $this->SafeGetVal($json, 'referrer', $patient->Referrer);\n            $patient->Referrerid = $this->SafeGetVal($json, 'referrerid', $patient->Referrerid);\n            $patient->Providerid = $this->SafeGetVal($json, 'providerid', $patient->Providerid);\n            $patient->RefProviderid = $this->SafeGetVal($json, 'refProviderid', $patient->RefProviderid);\n            $patient->Email = $this->SafeGetVal($json, 'email', $patient->Email);\n            $patient->EmailDirect = $this->SafeGetVal($json, 'emailDirect', $patient->EmailDirect);\n            $patient->Ethnoracial = $this->SafeGetVal($json, 'ethnoracial', $patient->Ethnoracial);\n            $patient->Race = $this->SafeGetVal($json, 'race', $patient->Race);\n            $patient->Ethnicity = $this->SafeGetVal($json, 'ethnicity', $patient->Ethnicity);\n            $patient->Religion = $this->SafeGetVal($json, 'religion', $patient->Religion);\n            //$patient->Interpretter = $this->SafeGetVal($json, 'interpretter', $patient->Interpretter);\n            //$patient->Migrantseasonal = $this->SafeGetVal($json, 'migrantseasonal', $patient->Migrantseasonal);\n            $patient->FamilySize = $this->SafeGetVal($json, 'familySize', $patient->FamilySize);\n            /*$patient->MonthlyIncome = $this->SafeGetVal($json, 'monthlyIncome', $patient->MonthlyIncome);\n            $patient->BillingNote = $this->SafeGetVal($json, 'billingNote', $patient->BillingNote);\n            $patient->Homeless = $this->SafeGetVal($json, 'homeless', $patient->Homeless);\n            $patient->FinancialReview = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'financialReview', $patient->FinancialReview)));*/\n            $patient->Pubpid = $this->SafeGetVal($json, 'pubpid', $patient->Pubpid);\n            $patient->Pid = $this->SafeGetVal($json, 'pid', $patient->Pid);\n            $patient->HipaaMail = $this->SafeGetVal($json, 'hipaaMail', $patient->HipaaMail);\n            $patient->HipaaVoice = $this->SafeGetVal($json, 'hipaaVoice', $patient->HipaaVoice);\n            $patient->HipaaNotice = $this->SafeGetVal($json, 'hipaaNotice', $patient->HipaaNotice);\n            $patient->HipaaMessage = $this->SafeGetVal($json, 'hipaaMessage', $patient->HipaaMessage);\n            $patient->HipaaAllowsms = $this->SafeGetVal($json, 'hipaaAllowsms', $patient->HipaaAllowsms);\n            $patient->HipaaAllowemail = $this->SafeGetVal($json, 'hipaaAllowemail', $patient->HipaaAllowemail);\n            /*$patient->Squad = $this->SafeGetVal($json, 'squad', $patient->Squad);\n            $patient->Fitness = $this->SafeGetVal($json, 'fitness', $patient->Fitness);\n            $patient->ReferralSource = $this->SafeGetVal($json, 'referralSource', $patient->ReferralSource);\n            $patient->Pricelevel = $this->SafeGetVal($json, 'pricelevel', $patient->Pricelevel);*/\n            $patient->Regdate = date('Y-m-d', strtotime($this->SafeGetVal($json, 'regdate', $patient->Regdate)));\n            /*$patient->Contrastart = date('Y-m-d', strtotime($this->SafeGetVal($json, 'contrastart', $patient->Contrastart)));\n            $patient->CompletedAd = $this->SafeGetVal($json, 'completedAd', $patient->CompletedAd);\n            $patient->AdReviewed = date('Y-m-d', strtotime($this->SafeGetVal($json, 'adReviewed', $patient->AdReviewed)));\n            $patient->Vfc = $this->SafeGetVal($json, 'vfc', $patient->Vfc);*/\n            $patient->Mothersname = $this->SafeGetVal($json, 'mothersname', $patient->Mothersname);\n            $patient->Guardiansname = $this->SafeGetVal($json, 'guardiansname', $patient->Guardiansname);\n            $patient->AllowImmRegUse = $this->SafeGetVal($json, 'allowImmRegUse', $patient->AllowImmRegUse);\n            $patient->AllowImmInfoShare = $this->SafeGetVal($json, 'allowImmInfoShare', $patient->AllowImmInfoShare);\n            $patient->AllowHealthInfoEx = $this->SafeGetVal($json, 'allowHealthInfoEx', $patient->AllowHealthInfoEx);\n            $patient->AllowPatientPortal = $this->SafeGetVal($json, 'allowPatientPortal', $patient->AllowPatientPortal);\n            $patient->CareTeam = $this->SafeGetVal($json, 'careTeam', $patient->CareTeam);\n            $patient->County = $this->SafeGetVal($json, 'county', $patient->County);\n            //$patient->Industry = $this->SafeGetVal($json, 'industry', $patient->Industry);\n            $patient->Note = $this->SafeGetVal($json, 'note', $patient->Note);\n            $patient->Validate();\n            $errors = $patient->GetValidationErrors();\n\n            if (count($errors) > 0) {\n                $this->RenderErrorJSON('Please check the form for errors', $errors);\n            } else {\n                self::SaveAudit($patient);\n                // $patient->Save(); //active records save\n                $this->RenderJSON($patient, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n    public function SaveAudit($p)\n    {\n        $appsql = new ApplicationTable();\n        $ja = $p->GetArray();\n        $ja['note'] = $p->Note;\n        try {\n            $audit = array ();\n            // date(\"Y-m-d H:i:s\");\n            $audit['patient_id'] = $ja['pid'];\n            $audit['activity'] = \"profile\";\n            $audit['require_audit'] = \"1\";\n            $audit['pending_action'] = \"review\";\n            $audit['action_taken'] = \"\";\n            $audit['status'] = \"waiting\";\n            $audit['narrative'] = \"Patient request changes to demographics.\";\n            $audit['table_action'] = \"\";\n            $audit['table_args'] = $ja; // edited record\n            $audit['action_user'] = \"0\";\n            $audit['action_taken_time'] = \"\";\n            $audit['checksum'] = \"0\";\n\n            // returns false for new audit\n            $edata = $appsql->getPortalAudit($ja['pid'], 'review');\n            if ($edata) {\n                if (empty($edata['id'])) {\n                    throw new Exception(\"Invalid ID on Save!\");\n                }\n                $audit['date'] = $edata['date'] ?? null;\n                $appsql->portalAudit('update', $edata['id'], $audit);\n            } else {\n                $appsql->portalAudit('insert', '', $audit);\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n    /**\n     * API Method deletes an existing Patient record and render response as JSON\n     */\n    public function Delete()\n    {\n        try {\n            // TODO: if a soft delete is prefered, change this to update the deleted flag instead of hard-deleting\n\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $patient = $this->Phreezer->Get('Patient', $pk);\n\n            $patient->Delete();\n\n            $output = new stdClass();\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n}\n", "<?php\n\n/**\n * OnsiteActivityViewListView.tpl.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2020 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n    $this->assign('title', xlt('Portal') . ' | ' . xlt('Activity'));\n    $this->assign('nav', 'onsiteactivityviews');\n\n    $this->display('_FormsHeader.tpl.php');\n    echo \"<script>var cuser='\" . $this->cuser . \"';</script>\";\n?>\n<script>\n    $LAB.script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/app/onsiteactivityviews.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\").wait(function(){\n        $(function () {\n            actpage.init();\n        });\n        setTimeout(function(){\n            if (!actpage.isInitialized) actpage.init();\n        },1000);\n    });\n</script>\n\n<div class=\"container mt-5\">\n\n<h3>\n    <i class=\"icon-th-list\"></i><?php echo xlt('Onsite Patient Activities')?>\n    <span id=\"loader\" class=\"loader progress progress-striped active\"><span class=\"progress-bar\"></span></span>\n    <div class=\"col-sm-3 col-md-3 float-right\">\n        <form class=\"navbar-form\" role=\"search\">\n        <div class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"<?php echo xla('Search'); ?>\" name=\"srch-term\" id=\"srch-term\" />\n            <div class=\"input-group-append\">\n                <button class=\"btn btn-secondary\" type=\"submit\"><i class=\"fas fa-search\"></i></button>\n            </div>\n        </div>\n        </form>\n    </div>\n</h3>\n    <!-- underscore template for the collection -->\n    <script type=\"text/template\" id=\"onsiteActivityViewCollectionTemplate\">\n        <table class=\"collection table table-sm table-bordered table-hover\">\n        <thead>\n            <tr>\n                <th id=\"header_Date\"><?php echo xlt('Date')?><% if (actpage.orderBy == 'Date') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PatientId\"><?php echo xlt('Patient Id')?><% if (actpage.orderBy == 'PatientId') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Fname\"><?php echo xlt('First{{Name}}')?><% if (actpage.orderBy == 'Fname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Mname\"><?php echo xlt('Middle{{Name}}')?><% if (actpage.orderBy == 'Mname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Lname\"><?php echo xlt('Last{{Name}}')?><% if (actpage.orderBy == 'Lname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Narrative\"><?php echo xlt('Narrative')?><% if (actpage.orderBy == 'Narrative') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Activity\"><?php echo xlt('Activity')?><% if (actpage.orderBy == 'Activity') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_RequireAudit\"><?php echo xlt('Require Audit')?><% if (actpage.orderBy == 'RequireAudit') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PendingAction\"><?php echo xlt('Pending Action')?><% if (actpage.orderBy == 'PendingAction') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Status\"><?php echo xlt('Status')?><% if (actpage.orderBy == 'Status') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n<!-- UNCOMMENT TO SHOW ADDITIONAL COLUMNS - Leave in place for future use\n                <th id=\"header_Id\">Id<% if (actpage.orderBy == 'Id') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_ActionTaken\">Action Taken<% if (actpage.orderBy == 'ActionTaken') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_TableAction\">Table Action<% if (actpage.orderBy == 'TableAction') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_TableArgs\">Table Args<% if (actpage.orderBy == 'TableArgs') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_ActionUser\">Action User<% if (actpage.orderBy == 'ActionUser') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_ActionTakenTime\">Action Taken Time<% if (actpage.orderBy == 'ActionTakenTime') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Checksum\">Checksum<% if (actpage.orderBy == 'Checksum') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Title\">Title<% if (actpage.orderBy == 'Title') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Dob\">Dob<% if (actpage.orderBy == 'Dob') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Ss\">Ss<% if (actpage.orderBy == 'Ss') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Street\">Street<% if (actpage.orderBy == 'Street') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PostalCode\">Postal Code<% if (actpage.orderBy == 'PostalCode') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_City\">City<% if (actpage.orderBy == 'City') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_State\">State<% if (actpage.orderBy == 'State') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Referrerid\">Referrerid<% if (actpage.orderBy == 'Referrerid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Providerid\">Providerid<% if (actpage.orderBy == 'Providerid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_RefProviderid\">Ref Providerid<% if (actpage.orderBy == 'RefProviderid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Pubpid\">Pubpid<% if (actpage.orderBy == 'Pubpid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_CareTeam\">Care Team<% if (actpage.orderBy == 'CareTeam') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Username\">Username<% if (actpage.orderBy == 'Username') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Authorized\">Authorized<% if (actpage.orderBy == 'Authorized') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Ufname\">Ufname<% if (actpage.orderBy == 'Ufname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Umname\">Umname<% if (actpage.orderBy == 'Umname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Ulname\">Ulname<% if (actpage.orderBy == 'Ulname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Facility\">Facility<% if (actpage.orderBy == 'Facility') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Active\">Active<% if (actpage.orderBy == 'Active') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Utitle\">Utitle<% if (actpage.orderBy == 'Utitle') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PhysicianType\">Physician Type<% if (actpage.orderBy == 'PhysicianType') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n-->\n            </tr>\n        </thead>\n        <tbody>\n        <% items.each(function(item) { %>\n            <tr id=\"<%= _.escape(item.get('id')) %>\">\n                <td><%if (item.get('date')) { %><%= moment(app.parseDate(item.get('date'))).format('MMM D, YYYY h:mm A') %><% } else { %>NULL<% } %></td>\n                <td><%= _.escape(item.get('patientId') || '') %></td>\n                <td><%= _.escape(item.get('fname') || '') %></td>\n                <td><%= _.escape(item.get('mname') || '') %></td>\n                <td><%= _.escape(item.get('lname') || '') %></td>\n                <td><%= _.escape(item.get('narrative') || '') %></td>\n                <td><%= _.escape(item.get('activity') || '') %></td>\n                <td><%= _.escape(item.get('requireAudit') || '') %></td>\n                <td><%= _.escape(item.get('pendingAction') || '') %></td>\n                <td><%= _.escape(item.get('status') || '') %></td>\n<!-- UNCOMMENT TO SHOW ADDITIONAL COLUMNS - Leave in place for future use\n                <td><%= _.escape(item.get('id') || '') %></td>\n                <td><%= _.escape(item.get('actionTaken') || '') %></td>\n                <td><%= _.escape(item.get('tableAction') || '') %></td>\n                <td><%= _.escape(item.get('tableArgs') || '') %></td>\n                <td><%= _.escape(item.get('actionUser') || '') %></td>\n                <td><%if (item.get('actionTakenTime')) { %><%= moment(app.parseDate(item.get('actionTakenTime'))).format('MMM D, YYYY h:mm A') %><% } else { %>NULL<% } %></td>\n                <td><%= _.escape(item.get('checksum') || '') %></td>\n                <td><%= _.escape(item.get('title') || '') %></td>\n                <td><%if (item.get('dob')) { %><%= moment(app.parseDate(item.get('dob'))).format('MMM D, YYYY') %><% } else { %>NULL<% } %></td>\n                <td><%= _.escape(item.get('ss') || '') %></td>\n                <td><%= _.escape(item.get('street') || '') %></td>\n                <td><%= _.escape(item.get('postalCode') || '') %></td>\n                <td><%= _.escape(item.get('city') || '') %></td>\n                <td><%= _.escape(item.get('state') || '') %></td>\n                <td><%= _.escape(item.get('referrerid') || '') %></td>\n                <td><%= _.escape(item.get('providerid') || '') %></td>\n                <td><%= _.escape(item.get('refProviderid') || '') %></td>\n                <td><%= _.escape(item.get('pubpid') || '') %></td>\n                <td><%= _.escape(item.get('careTeam') || '') %></td>\n                <td><%= _.escape(item.get('username') || '') %></td>\n                <td><%= _.escape(item.get('authorized') || '') %></td>\n                <td><%= _.escape(item.get('ufname') || '') %></td>\n                <td><%= _.escape(item.get('umname') || '') %></td>\n                <td><%= _.escape(item.get('ulname') || '') %></td>\n                <td><%= _.escape(item.get('facility') || '') %></td>\n                <td><%= _.escape(item.get('active') || '') %></td>\n                <td><%= _.escape(item.get('utitle') || '') %></td>\n                <td><%= _.escape(item.get('physicianType') || '') %></td>\n-->\n            </tr>\n        <% }); %>\n        </tbody>\n        </table>\n        <%=  view.getPaginationHtml(page) %>\n    </script>\n    <!-- underscore template for the model -->\n    <script type=\"text/template\" id=\"onsiteActivityViewModelTemplate\"></script>\n    <div id=\"collectionAlert\"></div>\n    <div id=\"onsiteActivityViewCollectionContainer\" class=\"collectionContainer\"></div>\n    <p id=\"returnButtonContainer\" class=\"buttonContainer\">\n        <button id=\"returnHome\" class=\"btn btn-primary\"><?php echo xlt('Home'); ?></button>\n    </p>\n</div> <!-- /container -->\n<?php\n    $this->display('_Footer.tpl.php');\n?>\n", "<?php\n\n/**\n * Patient Portal\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2022 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n$this->assign('title', xlt(\"Portal Dashboard\") . \" | \" . xlt(\"Home\"));\n$this->assign('nav', 'home');\n\nuse OpenEMR\\Core\\Header;\n\n?>\n<!DOCTYPE html>\n<!-- Language grabbed by PDF var that has the correct format !-->\n<html lang=\"<?php echo $GLOBALS['pdf_language']; ?>\">\n<head>\n    <title><?php $this->eprint($this->title); ?></title>\n    <meta name=\"description\" content=\"Provider Portal\" />\n    <meta name=\"author\" content=\"Dashboard | sjpadgett@gmail.com\" />\n\n    <?php\n    Header::setupHeader(['datetime-picker']);\n    echo \"<script>var cpid='\" . attr($this->cpid) . \"';var cuser='\" . attr($this->cuser) . \"';var webRoot='\" . $GLOBALS['web_root'] . \"';</script>\";\n    ?>\n    <link href=\"<?php echo $GLOBALS['web_root']; ?>/portal/sign/css/signer_modal.css?v=<?php echo $GLOBALS['v_js_includes']; ?>\" rel=\"stylesheet\">\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/portal/sign/assets/signature_pad.umd.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\"></script>\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/portal/sign/assets/signer_api.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\"></script>\n\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/libs/LAB.min.js\"></script>\n    <script>\n        $LAB.script(\"<?php echo $GLOBALS['assets_static_relative']; ?>/underscore/underscore-min.js\")\n        .script(\"<?php echo $GLOBALS['assets_static_relative']; ?>/moment/moment.js\")\n        .script(\"<?php echo $GLOBALS['assets_static_relative']; ?>/backbone/backbone-min.js\")\n        .script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/app.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\")\n        .script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/model.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\").wait()\n        .script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/view.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\")\n        .wait(function () {\n            $(function () {\n                console.log('*** Provider Template Load Done ***');\n            });\n        });\n    </script>\n</head>\n\n<body class=\"pt-2\">\n<div class=\"modal fade\" id=\"formdialog\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n    <div class=\"modal-dialog bg-light\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?php echo xlt('About Portal Dashboard') ?></h4>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n            </div>\n            <div class=\"modal-body\">\n                <div>\n                    <span><?php echo xlt('Please see forum or wiki'); ?>\n                <a href=\"<?php echo attr('https://community.open-emr.org/'); ?>\" target=\"_blank\"><?php echo xlt(\"Visit Forum\"); ?></a>\n                    </span>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button id=\"okButton\" data-dismiss=\"modal\" class=\"btn btn-secondary\"><?php echo xlt('Close...') ?></button>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container p-3\">\n    <div class=\"jumbotron jumbotron-fluid text-center p-1\">\n        <h3><?php echo xlt('Portal Dashboard') ?><i class=\"fa fa-user-md text-danger ml-2\" style=\"font-size: 3rem;\"></i></h3>\n        <p>\n        <button class=\"btn btn-sm btn-secondary\" data-toggle=\"modal\" data-target=\"#formdialog\"><?php echo xlt('Tell me more') ?></button>\n        </p>\n    </div>\n<div class='jumbotron jumbotron-fluid p-4'>\n    <div class=\"row\">\n        <div class=\"col\">\n            <h4><i class=\"icon-cogs\"></i><?php echo xlt('Templates') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/import_template_ui.php\"><?php echo xlt('Manage Templates') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-th\"></i><?php echo xlt('Audits') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/patient/onsiteactivityviews\"><?php echo xlt('Review Audits') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-cogs\"></i><?php echo xlt('Mail') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/messaging/messages.php\"><?php echo xlt('Secure Mail') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-cogs\"></i><?php echo xlt('Chat') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/messaging/secure_chat.php\"><?php echo xlt('Chat Messaging') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-signin\"></i><?php echo xlt('Signature') ?></h4>\n            <p><a data-type=\"admin-signature\" class=\"btn btn-primary btn-sm\" href=\"#openSignModal\" data-toggle=\"modal\" data-backdrop=\"true\" data-target=\"#openSignModal\">\n             <span><?php echo xlt('Signature on File') . '  '; ?></span><i class=\"fa fa-sign-in\"></i></a></p>\n        </div>\n    </div>\n</div>\n</div>\n<!-- /container -->\n<?php\n$this->display('_Footer.tpl.php');\n?>\n", "<?php\n\n/**\n * portal_patient_report.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady@sparmy.com>\n * @copyright Copyright (c) 2016-2020 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(dirname(__FILE__) . \"/../../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\n//landing page definition -- where to go if something goes wrong\n$landingpage = \"../index.php?site=\" . urlencode($_SESSION['site_id']);\n//\n\n// kick out if patient not authenticated\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n    $user = $_SESSION['sessionUser'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    header('Location: ' . $landingpage . '&w');\n    exit;\n}\n\n$ignoreAuth_onsite_portal = true;\nglobal $ignoreAuth_onsite_portal;\n\nrequire_once('../../interface/globals.php');\nrequire_once(\"$srcdir/lists.inc\");\nrequire_once(\"$srcdir/forms.inc\");\nrequire_once(\"$srcdir/patient.inc\");\n\nuse OpenEMR\\Core\\Header;\n\n// get various authorization levels\n$auth_notes_a  = true; //AclMain::aclCheckCore('encounters', 'notes_a');\n$auth_notes    = true; //AclMain::aclCheckCore('encounters', 'notes');\n$auth_coding_a = true; //AclMain::aclCheckCore('encounters', 'coding_a');\n$auth_coding   = true; //AclMain::aclCheckCore('encounters', 'coding');\n$auth_relaxed  = true; //AclMain::aclCheckCore('encounters', 'relaxed');\n$auth_med      = true; //AclMain::aclCheckCore('patients'  , 'med');\n$auth_demo     = true; //AclMain::aclCheckCore('patients'  , 'demo');\n\n$ignoreAuth_onsite_portal = true;\n?>\n\n<?php Header::setupAssets('textformat'); ?>\n\n<style>\n    input[type=\"checkbox\"],\n    input[type=\"radio\"] {\n        margin: 0 5px 5px;\n        line-height: normal;\n    }\n\n    /*=============================================================\n * Patient Reports\n * seen in the patient reports screens\n *============================================================*/\n    #patient_reports {\n        width: 100%;\n    }\n\n    #patient_reports .issues {\n        padding-right: 30px;\n    }\n\n    #patient_reports .issues table {\n        margin: 10px 0 10px 0;\n    }\n\n    #patient_reports .issues td {\n        padding: 2px;\n    }\n\n    #patient_reports .encounters td {\n        padding: 2px;\n    }\n\n    #patient_reports .encounter_forms {\n        margin: 5px 15px 5px 15px;\n    }\n\n    #patient_reports td {\n        vertical-align: top;\n    }\n\n    #patient_reports ul {\n        list-style: none;\n    }\n\n    /*=============================================================\n * Report - Custom\n * seen as the patient report (portal_custom_report.php)\n *============================================================*/\n    #report_custom {\n        width: 100%;\n    }\n\n    #report_custom hr {\n        border: 2px dotted #000;\n    }\n\n    #report_custom .billing {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom h1 {\n        font-size: 120%;\n        margin: 0 0 5px 0;\n        padding: 0;\n    }\n\n    #report_custom .immunizations {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .notes {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .transactions {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .communications {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .documents {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .demographics {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .insurance {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .history {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .issue {\n        margin-left: 20px;\n    }\n\n    #report_custom .issue_type {\n        font-weight: bold;\n        padding: 5px 0 5px 0;\n    }\n\n    #report_custom .issue_diag {\n        margin: 0 20px 0 20px;\n    }\n\n    #report_custom .encounter {\n        width: 100%;\n        border-top: 2px dotted #000;\n        padding: 10px 5px 10px 5px;\n        margin-top: 10px;\n    }\n\n    #report_custom .encounter h1 {\n        font-size: 140%;\n        margin: 0;\n        padding: 0;\n    }\n\n    #report_custom .encounter_form {\n        margin: 10px;\n        padding: 10px;\n        border-top: 1px solid #808080;\n    }\n\n    #addressbook_list tr.evenrow {\n        background-color: #ddddff;\n    }\n\n    #addressbook_list tr.oddrow {\n        background-color: #ffffff;\n    }\n\n    tr.odd,\n    td.even {\n        background-color: #ffffff !important;\n    }\n</style>\n\n<script>\n\nfunction checkAll(check) {\n var f = document.forms['report_form'];\n for (var i = 0; i < f.elements.length; ++i) {\n  if (f.elements[i].type == 'checkbox') f.elements[i].checked = check;\n }\n return false;\n}\n\nfunction show_date_fun(){\n  if(document.getElementById('show_date').checked == true){\n    document.getElementById('date_div').style.display = '';\n  }else{\n    document.getElementById('date_div').style.display = 'none';\n  }\n  return;\n}\nvar mypcc = '<?php echo $GLOBALS['phone_country_code']; ?>';\n</script>\n\n<body class=\"body_top\">\n<div id=\"patient_reports\"> <!-- large outer DIV -->\n\n<?php if ($GLOBALS['activate_ccr_ccd_report']) { // show CCR/CCD reporting options ?>\n<div id=\"ccr_report\">\n\n<form name='ccr_form' id='ccr_form' method='post' action=\"../ccr/createCCR.php?portal_auth=1\">\n<span class='title'><?php echo xlt('Continuity of Care Record (CCR)'); ?></span>&nbsp;&nbsp;\n<br/>\n<span class='text'>(<?php echo xlt('Pop ups need to be enabled to see these reports'); ?>)</span>\n<br/>\n<br/>\n<input type='hidden' name='ccrAction'>\n<input type='hidden' name='raw'>\n<input type=\"checkbox\" name=\"show_date\" id=\"show_date\" onchange=\"show_date_fun();\" ><span class='text'><?php echo xlt('Use Date Range'); ?></span>\n<br />\n<div id=\"date_div\" style=\"display:none\" >\n  <br />\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n    <tr>\n      <td>\n        <span class='bold'><?php echo xlt('Start Date');?>: </span>\n      </td>\n      <td>\n        <input type='text' size='10' name='Start' id='Start' class='datepicker' title='<?php echo xla('yyyy-mm-dd'); ?>' />\n      </td>\n      <td>\n        &nbsp;\n        <span class='bold'><?php echo xlt('End Date');?>: </span>\n      </td>\n      <td>\n        <input type='text' size='10' name='End' id='End' class='datepicker' title='<?php echo xla('yyyy-mm-dd'); ?>' />\n      </td>\n    </tr>\n  </table>\n</div>\n<br />\n\n<!-- <button data-target=\"#reportdialog\" data-toggle=\"modal\" class=\"btn btn-secondary\">\n    <?php //echo xla('Generate Report'); ?></button> -->\n<input type=\"button\" class=\"generateCCR\" value=\"<?php echo xla('Generate Report'); ?>\" />\n<!-- <input type=\"button\" class=\"generateCCR_download_h\" value=\"<?php echo xl('Download') . \" (Hybrid)\"; ?>\" /> -->\n<input type=\"button\" class=\"generateCCR_download_p\" value=\"<?php echo xla('Download'); ?>\" />\n    <?php if ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccr_enable'] == true) { ?>\n<input type=\"button\" class=\"viewCCR_send_dialog\" value=\"<?php echo xla('Transmit'); ?>\" />\n             <br />\n             <div id=\"ccr_send_dialog\" style=\"display:none\" >\n              <br />\n              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n               <tr>\n                <td>\n                 <span class='bold'><?php echo xlt('Enter Recipient\\'s Direct Address');?>: </span>\n                <input type=\"text\" size=\"64\" name=\"ccr_send_to\" id=\"ccr_send_to\" value=\"\">\n                <input type=\"hidden\" name=\"ccr_sent_by\" id=\"ccr_sent_by\" value=\"user\">\n                <input type=\"button\" class=\"viewCCR_transmit\" value=\"<?php echo xla('Send'); ?>\" />\n                <div id=\"ccr_send_result\" style=\"display:none\" >\n                 <span class=\"text\" id=\"ccr_send_message\"></span>\n                </div>\n                </td>\n              </tr>\n              </table>\n             </div>\n<?php } ?>\n<hr/>\n<span class='title'><?php echo xlt('Continuity of Care Document (CCD)'); ?></span>&nbsp;&nbsp;\n<br/>\n<span class='text'>(<?php echo xlt('Pop ups need to be enabled to see these reports'); ?>)</span>\n<br/>\n<br/>\n<input type=\"button\" class=\"viewCCD\" value=\"<?php echo xla('Generate Report'); ?>\" />\n<input type=\"button\" class=\"viewCCD_download\" value=\"<?php echo xla('Download'); ?>\" />\n    <?php if ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccd_enable'] == true) { ?>\n<input type=\"button\" class=\"viewCCD_send_dialog\" value=\"<?php echo xla('Transmit'); ?>\" />\n             <br />\n             <div id=\"ccd_send_dialog\" style=\"display:none\" >\n              <br />\n              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n               <tr>\n                <td>\n                 <span class='bold'><?php echo xlt('Enter Recipient\\'s Direct Address');?>: </span>\n                <input type=\"text\" size=\"64\" name=\"ccd_send_to\" id=\"ccd_send_to\" value=\"\">\n        <input type=\"hidden\" name=\"ccd_sent_by\" id=\"ccd_sent_by\" value=\"user\">\n                <input type=\"button\" class=\"viewCCD_transmit\" value=\"<?php echo xla('Send'); ?>\" />\n                <div id=\"ccd_send_result\" style=\"display:none\" >\n                 <span class=\"text\" id=\"ccd_send_message\"></span>\n                </div>\n                </td>\n              </tr>\n              </table>\n             </div>\n<?php } ?>\n\n</form>\n\n<hr/>\n\n</div>\n<?php } // end CCR/CCD reporting options ?>\n\n<form name='report_form' id=\"report_form\" method='post' action='./report/portal_custom_report.php'>\n\n<span class='card-heading'><?php echo xlt('Patient Report'); ?></span>&nbsp;&nbsp;\n<a class=\"link_submit\" href=\"#\" onclick=\"return checkAll(true)\"><?php echo xlt('Check All'); ?></a>\n|\n<a class=\"link_submit\" href=\"#\" onclick=\"return checkAll(false)\"><?php echo xlt('Clear All'); ?></a>\n<p>\n\n<table class=\"table includes\">\n <tr>\n  <td class='text'>\n   <input type='checkbox' name='include_demographics' id='include_demographics' value=\"demographics\" checked><?php echo xlt('Demographics'); ?><br />\n   <input type='checkbox' name='include_history' id='include_history' value=\"history\"><?php echo xlt('History'); ?><br />\n   <input type='checkbox' name='include_insurance' id='include_insurance' value=\"insurance\"><?php echo xlt('Insurance'); ?><br />\n   <input type='checkbox' name='include_billing' id='include_billing' value=\"billing\"\n    <?php if (!$GLOBALS['simplified_demographics']) {\n        echo 'checked';\n    } ?>><?php echo xlt('Billing'); ?><br />\n  </td>\n  <td class='text'>\n   <!--\n   <input type='checkbox' name='include_allergies' id='include_allergies' value=\"allergies\">Allergies<br />\n   <input type='checkbox' name='include_medications' id='include_medications' value=\"medications\">Medications<br />\n   -->\n   <input type='checkbox' name='include_immunizations' id='include_immunizations' value=\"immunizations\"><?php echo xlt('Immunizations'); ?><br />\n   <!--\n   <input type='checkbox' name='include_medical_problems' id='include_medical_problems' value=\"medical_problems\">Medical Problems<br />\n   -->\n   <input type='checkbox' name='include_notes' id='include_notes' value=\"notes\"><?php echo xlt('Patient Notes'); ?><br />\n   <input type='checkbox' name='include_transactions' id='include_transactions' value=\"transactions\"><?php echo xlt('Transactions'); ?><br />\n   <input type='checkbox' name='include_batchcom' id='include_batchcom' value=\"batchcom\"><?php echo xlt('Communications'); ?><br />\n  </td>\n </tr>\n</table>\n\n<input type='hidden' name='pdf' value='0'>\n<br />\n\n<!-- old ccr button position -->\n\n<table class=\"issues_encounters_forms table\">\n <tr>\n\n  <!-- Issues -->\n  <td class='text'>\n  <div class=\"issues\">\n  <span class='bold'><?php echo xlt('Issues'); ?>:</span>\n   <br />\n   <br />\n\n   <table>\n\n<?php\n// get issues\n$pres = sqlStatement(\"SELECT * FROM lists WHERE pid = ? \" .\n                    \"ORDER BY type, begdate\", [$pid]);\n$lasttype = \"\";\nwhile ($prow = sqlFetchArray($pres)) {\n    if ($lasttype != $prow['type']) {\n        $lasttype = $prow['type'];\n\n   /****\n   $disptype = $lasttype;\n   switch ($lasttype) {\n    case \"allergy\"        : $disptype = \"Allergies\"       ; break;\n    case \"problem\"        :\n    case \"medical_problem\": $disptype = \"Medical Problems\"; break;\n    case \"medication\"     : $disptype = \"Medications\"     ; break;\n    case \"surgery\"        : $disptype = \"Surgeries\"       ; break;\n   }\n   ****/\n        $disptype = $ISSUE_TYPES[$lasttype][0];\n\n        echo \" <tr>\\n\";\n        echo \"  <td colspan='4' class='bold'><b>\" . text($disptype) . \"</b></td>\\n\";\n        echo \" </tr>\\n\";\n    }\n\n    $rowid = $prow['id'];\n    $disptitle = trim($prow['title']) ? $prow['title'] : \"[Missing Title]\";\n\n    $ieres = sqlStatement(\"SELECT encounter FROM issue_encounter WHERE \" .\n                        \"pid = ? AND list_id = ?\", [$pid, $rowid]);\n\n    echo \"    <tr class='text'>\\n\";\n    echo \"     <td>&nbsp;</td>\\n\";\n    echo \"     <td>\";\n    echo \"<input type='checkbox' name='issue_\" . attr($rowid) . \"' id='issue_\" . attr($rowid) . \"' class='issuecheckbox' value='/\";\n    while ($ierow = sqlFetchArray($ieres)) {\n        echo text($ierow['encounter']) . \"/\";\n    }\n\n    echo \"' />\" . text($disptitle) . \"</td>\\n\";\n    echo \"     <td>\" . text($prow['begdate']);\n\n    if ($prow['enddate']) {\n        echo \" - \" . text($prow['enddate']);\n    } else {\n        echo \" Active\";\n    }\n\n        echo \"</td>\\n\";\n        echo \"</tr>\\n\";\n}\n?>\n   </table>\n\n<?php //endif; // end of Issues output ?>\n\n   </div> <!-- end issues DIV -->\n  </td>\n\n<!-- Encounters and Forms -->\n\n<td class='text'>\n<div class='encounters'>\n<span class='bold'><?php echo xlt('Encounters & Forms'); ?>:</span>\n<br /><br />\n\n<?php if (!($auth_notes_a || $auth_notes || $auth_coding_a || $auth_coding || $auth_med || $auth_relaxed)) : ?>\n(Encounters not authorized)\n<?php else : ?>\n    <?php\n\n    $isfirst = 1;\n    $res = sqlStatement(\"SELECT forms.encounter, forms.form_id, forms.form_name, \" .\n                    \"forms.formdir, forms.date AS fdate, form_encounter.date \" .\n                    \",form_encounter.reason \" .\n                    \"FROM forms, form_encounter WHERE \" .\n                    \"forms.pid = ? AND form_encounter.pid = ? AND \" .\n                    \"form_encounter.encounter = forms.encounter \" .\n                    \" AND forms.deleted=0 \" . // --JRM--\n                    \"ORDER BY form_encounter.date DESC, fdate ASC\", [$pid, $pid]);\n    $res2 = sqlStatement(\"SELECT name FROM registry ORDER BY priority\");\n    $html_strings = array();\n    $registry_form_name = array();\n    while ($result2 = sqlFetchArray($res2)) {\n        array_push($registry_form_name, trim($result2['name']));\n    }\n\n    while ($result = sqlFetchArray($res)) {\n        if ($result[\"form_name\"] == \"New Patient Encounter\") {\n            if ($isfirst == 0) {\n                foreach ($registry_form_name as $var) {\n                    if ($toprint = $html_strings[$var]) {\n                        foreach ($toprint as $var) {\n                            print $var;\n                        }\n                    }\n                }\n\n                $html_strings = array();\n                echo \"</div>\\n\"; // end DIV encounter_forms\n                echo \"</div>\\n\\n\";  //end DIV encounter_data\n                echo \"<br />\";\n            }\n\n            $isfirst = 0;\n            echo \"<div class='encounter_data'>\\n\";\n            echo \"<input type=checkbox \" .\n                \" name='\" . attr($result[\"formdir\"]) . \"_\" .  attr($result[\"form_id\"]) . \"'\" .\n                \" id='\" . attr($result[\"formdir\"]) . \"_\" .  attr($result[\"form_id\"]) . \"'\" .\n                \" value='\" . attr($result[\"encounter\"]) . \"'\" .\n                \" class='encounter'\" .\n                \" >\";\n\n            // show encounter reason, not just 'New Encounter'\n            // trim to a reasonable length for display purposes --cfapress\n            $maxReasonLength = 20;\n            if (strlen($result[\"reason\"]) > $maxReasonLength) {\n                $result['reason'] = substr($result['reason'], 0, $maxReasonLength) . \" ... \";\n            }\n\n            echo attr($result[\"reason\"]) .\n                \" (\" . date(\"Y-m-d\", strtotime($result[\"date\"])) .\n                \")\\n\";\n            echo \"<div class='encounter_forms'>\\n\";\n        } else {\n            $form_name = trim($result[\"form_name\"]);\n            //if form name is not in registry, look for the closest match by\n            // finding a registry name which is  at the start of the form name.\n            //this is to allow for forms to put additional helpful information\n            //in the database in the same string as their form name after the name\n            $form_name_found_flag = 0;\n            foreach ($registry_form_name as $var) {\n                if ($var == $form_name) {\n                    $form_name_found_flag = 1;\n                }\n            }\n\n            // if the form does not match precisely with any names in the registry, now see if any front partial matches\n            // and change $form_name appropriately so it will print above in $toprint = $html_strings[$var]\n            if (!$form_name_found_flag) {\n                foreach ($registry_form_name as $var) {\n                    if (strpos($form_name, $var) == 0) {\n                        $form_name = $var;\n                    }\n                }\n            }\n\n            if (!is_array($html_strings[$form_name] ?? null)) {\n                $html_strings[$form_name] = array();\n            }\n\n            array_push($html_strings[$form_name], \"<input type='checkbox' \" .\n                                                \" name='\" . attr($result[\"formdir\"]) . \"_\" . attr($result[\"form_id\"]) . \"'\" .\n                                                \" id='\" . attr($result[\"formdir\"]) . \"_\" . attr($result[\"form_id\"]) . \"'\" .\n                                                \" value='\" . attr($result[\"encounter\"]) . \"'\" .\n                                                \" class='encounter_form' \" .\n                                                \">\" . text(xl_form_title($result[\"form_name\"])) . \"<br />\\n\");\n        }\n    }\n\n    foreach ($registry_form_name as $var) {\n        if ($toprint = $html_strings[$var] ?? null) {\n            foreach ($toprint as $var) {\n                print $var;\n            }\n        }\n    }\n    ?>\n\n<?php endif; ?>\n\n  </div> <!-- end encounters DIV -->\n  </td>\n </tr>\n</table>\n\n<!-- Procedure Orders -->\n<hr/>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n <tr>\n  <td class='bold'><?php echo xlt('Procedures'); ?>&nbsp;&nbsp;</td>\n  <td class='text'><?php echo xlt('Order Date'); ?>&nbsp;&nbsp;</td>\n  <td class='text'><?php echo xlt('Encounter Date'); ?>&nbsp;&nbsp;</td>\n  <td class='text'><?php echo xlt('Order Descriptions'); ?></td>\n </tr>\n<?php\n$res = sqlStatement(\n    \"SELECT po.procedure_order_id, po.date_ordered, fe.date \" .\n    \"FROM procedure_order AS po \" .\n    \"LEFT JOIN forms AS f ON f.pid = po.patient_id AND f.formdir = 'procedure_order' AND \" .\n    \"f.form_id = po.procedure_order_id AND f.deleted = 0 \" .\n    \"LEFT JOIN form_encounter AS fe ON fe.pid = f.pid AND fe.encounter = f.encounter \" .\n    \"WHERE po.patient_id = ? \" .\n    \"ORDER BY po.date_ordered DESC, po.procedure_order_id DESC\",\n    array($pid)\n);\nwhile ($row = sqlFetchArray($res)) {\n    $poid = $row['procedure_order_id'];\n    echo \" <tr>\\n\";\n    echo \"  <td align='center' class='text'>\" .\n       \"<input type='checkbox' name='procedures[]' value='\" . attr($poid) . \"' />&nbsp;&nbsp;</td>\\n\";\n    echo \"  <td class='text'>\" . text(oeFormatShortDate($row['date_ordered'])) . \"&nbsp;&nbsp;</td>\\n\";\n    echo \"  <td class='text'>\" . text(oeFormatShortDate($row['date'])) . \"&nbsp;&nbsp;</td>\\n\";\n    echo \"  <td class='text'>\";\n    $opres = sqlStatement(\n        \"SELECT procedure_code, procedure_name FROM procedure_order_code \" .\n        \"WHERE procedure_order_id = ? ORDER BY procedure_order_seq\",\n        array($poid)\n    );\n    while ($oprow = sqlFetchArray($opres)) {\n        $tmp = $oprow['procedure_name'];\n        if (empty($tmp)) {\n            $tmp = $oprow['procedure_code'];\n        }\n\n        echo text($tmp) . \"<br />\";\n    }\n\n    echo \"</td>\\n\";\n    echo \" </tr>\\n\";\n}\n?>\n</table>\n\n<hr/>\n<span class=\"bold\"><?php echo xlt('Documents'); ?></span>:<br />\n<ul>\n<?php\n// show available documents\n$db = $GLOBALS['adodb']['db'];\n$sql = \"SELECT d.id, d.url, d.name as document_name, c.name FROM documents AS d \" .\n        \"LEFT JOIN categories_to_documents AS ctd ON d.id=ctd.document_id \" .\n        \"LEFT JOIN categories AS c ON c.id = ctd.category_id WHERE \" .\n        \"d.foreign_id = ? AND d.deleted = 0\";\n$result = $db->Execute($sql, [$pid]);\nif ($db->ErrorMsg()) {\n    echo $db->ErrorMsg();\n}\n\nwhile ($result && !$result->EOF) {\n    $fname = basename($result->fields['url']);\n    $extension = strtolower(substr($fname, strrpos($fname, \".\")));\n    if ($extension !== '.zip' && $extension !== '.dcm') {\n        echo \"<li class='bold'>\";\n        echo '<input type=\"checkbox\" name=\"documents[]\" value=\"' .\n            $result->fields['id'] . '\">';\n        echo '&nbsp;&nbsp;<i>' . text(xl_document_category($result->fields['name'])) . \"</i>\";\n        echo '&nbsp;&nbsp;' . xlt('Name') . ': <i>' . text(basename($result->fields['url'])) . \"</i>\";\n        echo '</li>';\n    }\n\n    $result->MoveNext();\n}\n?>\n</ul>\n</form>\n\n<input type=\"button\" class=\"genreport\" value=\"<?php echo xla('Generate Report'); ?>\" />&nbsp;\n<input type=\"button\" class=\"genpdfrep\" value=\"<?php echo xla('Download PDF'); ?>\" />&nbsp;\n\n</div>  <!-- close patient_reports DIV -->\n\n<script>\n\n// jQuery stuff to make the page a little easier to use\ninitReport = function(){\n    $(\"body\").on(\"click\", \".genreport\", function() {\n          document.report_form.pdf.value = 0;\n          showCustom();\n\n          return false;\n         });\n    $(\".genpdfrep\").click(function() {  document.report_form.pdf.value = 1; $(\"#report_form\").submit(); });\n    $(\".genportal\").click(function() {  document.report_form.pdf.value = 2; $(\"#report_form\").submit(); });\n    $(\"#genfullreport\").click(function() { location.href='<?php echo (!empty($returnurl)) ? \"$rootdir/patient_file/encounter/$returnurl\"  : '';?>'; });\n    //$(\"#printform\").click(function() { PrintForm(); });\n    $(\".issuecheckbox\").click(function() { issueClick(this); });\n\n    // check/uncheck all Forms of an encounter\n    $(\".encounter\").click(function() { SelectForms(this); });\n\n    function showCustom(){\n        var formval = $( \"#report_form\" ).serializeArray();\n        var title = <?php echo xlj(\"Custom Report\") ?>;\n        var params = {\n            sizeHeight: 'full',\n            size: 'modal-lg',\n            title: title,\n            type: \"POST\",\n            url: './report/portal_custom_report.php',\n            data: formval\n        };\n\n        // returns a promise after dialog inits. Just an empty fulfill for an example.\n        // Could do an alert or confirm etc.\n        return dialog.ajax(params)\n        .then(function (dialog) {\n            $('div.modal-body', dialog).addClass('overflow-auto');\n        });\n    }\n    $(\".generateCCR\").click(\n        function() {\n            if(document.getElementById('show_date').checked == true){\n                if(document.getElementById('Start').value == '' || document.getElementById('End').value == ''){\n                   alert(<?php echo xlj('Please select a start date and end date'); ?>);\n                        return false;\n                }\n            }\n        var ccrAction = document.getElementsByName('ccrAction');\n        ccrAction[0].value = 'generate';\n        var raw = document.getElementsByName('raw');\n        raw[0].value = 'no';\n\n        ccr_form.setAttribute(\"target\", \"_blank\");\n        $(\"#ccr_form\").submit();\n        ccr_form.setAttribute(\"target\", \"\");\n    });\n        $(\".generateCCR_raw\").click(\n        function() {\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'generate';\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'yes';\n\n                ccr_form.setAttribute(\"target\", \"_blank\");\n                $(\"#ccr_form\").submit();\n                ccr_form.setAttribute(\"target\", \"\");\n        });\n        $(\".generateCCR_download_h\").click(\n        function() {\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'generate';\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'hybrid';\n\n                $(\"#ccr_form\").submit();\n        });\n        $(\".generateCCR_download_p\").click(\n        function() {\n            if(document.getElementById('show_date').checked === true){\n                if(document.getElementById('Start').value === '' || document.getElementById('End').value === ''){\n                        alert(<?php echo xlj('Please select a start date and end date'); ?>);\n                        return false;\n                }\n            }\n            var ccrAction = document.getElementsByName('ccrAction');\n            ccrAction[0].value = 'generate';\n            var raw = document.getElementsByName('raw');\n            raw[0].value = 'pure';\n\n            $(\"#ccr_form\").submit();\n        });\n    $(\".viewCCD\").click(\n    function() {\n        var ccrAction = document.getElementsByName('ccrAction');\n        ccrAction[0].value = 'viewccd';\n            var raw = document.getElementsByName('raw');\n            raw[0].value = 'no';\n\n            ccr_form.setAttribute(\"target\", \"_blank\");\n        $(\"#ccr_form\").submit();\n                ccr_form.setAttribute(\"target\", \"\");\n    });\n        $(\".viewCCD_raw\").click(\n        function() {\n            var ccrAction = document.getElementsByName('ccrAction');\n            ccrAction[0].value = 'viewccd';\n            var raw = document.getElementsByName('raw');\n            raw[0].value = 'yes';\n\n            ccr_form.setAttribute(\"target\", \"_blank\");\n            $(\"#ccr_form\").submit();\n            ccr_form.setAttribute(\"target\", \"\");\n        });\n        $(\".viewCCD_download\").click(\n        function() {\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'viewccd';\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'pure';\n                $(\"#ccr_form\").submit();\n        });\n<?php if ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccr_enable'] == true) { ?>\n        $(\".viewCCR_send_dialog\").click(\n        function() {\n                $(\"#ccr_send_dialog\").toggle();\n        });\n        $(\".viewCCR_transmit\").click(\n        function() {\n                $(\".viewCCR_transmit\").attr('disabled','disabled');\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'generate';\n                var ccrRecipient = $(\"#ccr_send_to\").val();\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'send '+ccrRecipient;\n                if(ccrRecipient === \"\") {\n                  $(\"#ccr_send_message\").html(\"<?php\n                    echo xla('Please enter a valid Direct Address above.'); ?>\");\n                  $(\"#ccr_send_result\").show();\n                } else {\n                  $(\".viewCCR_transmit\").attr('disabled','disabled');\n                  $(\"#ccr_send_message\").html(\"<?php\n                    echo xla('Working... this may take a minute.'); ?>\");\n                  $(\"#ccr_send_result\").show();\n                  var action=$(\"#ccr_form\").attr('action');\n                  $.post(action, {ccrAction:'generate',raw:'send '+ccrRecipient,requested_by:'user'},\n                     function(data) {\n                       if(data === \"SUCCESS\") {\n                         $(\"#ccr_send_message\").html(\"<?php\n                            echo xla('Your message was submitted for delivery to');\n                            ?> \"+ccrRecipient);\n                         $(\"#ccr_send_to\").val(\"\");\n                       } else {\n                         $(\"#ccr_send_message\").html(data);\n                       }\n                       $(\".viewCCR_transmit\").removeAttr('disabled');\n                  });\n                }\n        });\n<?php }\n\nif ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccd_enable'] == true) { ?>\n        $(\".viewCCD_send_dialog\").click(\n        function() {\n                $(\"#ccd_send_dialog\").toggle();\n        });\n        $(\".viewCCD_transmit\").click(\n        function() {\n                $(\".viewCCD_transmit\").attr('disabled','disabled');\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'viewccd';\n                var ccdRecipient = $(\"#ccd_send_to\").val();\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'send '+ccdRecipient;\n                if(ccdRecipient === \"\") {\n                  $(\"#ccd_send_message\").html(\"<?php\n                    echo xla('Please enter a valid Direct Address above.'); ?>\");\n                  $(\"#ccd_send_result\").show();\n                } else {\n                  $(\".viewCCD_transmit\").attr('disabled','disabled');\n                  $(\"#ccd_send_message\").html(\"<?php\n                    echo xla('Working... this may take a minute.'); ?>\");\n                  $(\"#ccd_send_result\").show();\n                  var action=$(\"#ccr_form\").attr('action');\n                  $.post(action, {ccrAction:'viewccd',raw:'send '+ccdRecipient,requested_by:'user'},\n                     function(data) {\n                       if(data === \"SUCCESS\") {\n                         $(\"#ccd_send_message\").html(\"<?php\n                            echo xla('Your message was submitted for delivery to');\n                            ?> \"+ccdRecipient);\n                         $(\"#ccd_send_to\").val(\"\");\n                       } else {\n                         $(\"#ccd_send_message\").html(data);\n                       }\n                       $(\".viewCCD_transmit\").removeAttr('disabled');\n                  });\n                }\n        });\n<?php } ?>\n}; // end initReport\n\n$(function () {\n\n    initReport();\n\n    $('.datepicker').datetimepicker({\n        <?php $datetimepicker_timepicker = false; ?>\n        <?php $datetimepicker_formatInput = false; ?>\n        <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n    });\n});\n\n// select/deselect the Forms related to the selected Encounter\n// (it ain't pretty code folks)\nvar SelectForms = function (selectedEncounter) {\n    if ($(selectedEncounter).prop(\"checked\")) {\n        $(selectedEncounter).parent().children().each(function (i, obj) {\n            $(this).children().each(function (i, obj) {\n                $(this).prop(\"checked\", true);\n            });\n        });\n    } else {\n        $(selectedEncounter).parent().children().each(function (i, obj) {\n            $(this).children().each(function (i, obj) {\n                $(this).prop(\"checked\", false);\n            });\n        });\n    }\n}\n\n// When an issue is checked, auto-check all the related encounters and forms\nfunction issueClick(issue) {\n    // do nothing when unchecked\n    if (!$(issue).prop(\"checked\")) return;\n\n    $(\"#report_form :checkbox\").each(function (i, obj) {\n        if ($(issue).val().indexOf('/' + $(this).val() + '/') >= 0) {\n            $(this).prop(\"checked\", true);\n        }\n\n    });\n}\n\n</script>\n\n", "<?php\n\n/**\n * Patient Portal\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n//Need to unwrap data to ensure user/patient is authorized\n$data = (array)(json_decode(file_get_contents(\"php://input\")));\n$req_pid = $data['pid'];\n$user = $data['user'];\n$signer = !empty($data['signer']) ? $data['signer'] : '';\n$type = $data['type'];\n$isPortal = $data['is_portal'];\n$output = urldecode($data['output']);\n$ignoreAuth = false;\n\n// this script is used by both the patient portal and main openemr; below does authorization.\nif ($isPortal) {\n    require_once(__DIR__ . \"/../../../src/Common/Session/SessionUtil.php\");\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\n    if (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n        // authorized by patient portal\n        $req_pid = $_SESSION['pid'];\n        $ignoreAuth_onsite_portal = true;\n    } else {\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        echo js_escape(\"error invalid session,\");\n        exit();\n    }\n}\nrequire_once(\"../../../interface/globals.php\");\n\nif ($type === 'witness-signature') {\n    echo(js_escape('Done'));\n    exit();\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    if ($type === 'admin-signature') {\n        $req_pid = 0;\n    }\n    $sig_hash = hash('sha3-512', $output);\n    $created = time();\n    $ip = $_SERVER['REMOTE_ADDR'];\n    $status = 'filed';\n    $lastmod = date('Y-m-d H:i:s');\n    $r = sqlStatement(\"SELECT COUNT( DISTINCT TYPE ) x FROM onsite_signatures where pid = ? and user = ? \", array($req_pid, $user));\n    $c = sqlFetchArray($r);\n    $isit = $c['x'] * 1;\n    if ($isit) {\n        $qstr = \"UPDATE onsite_signatures SET pid=?,lastmod=?,status=?, user=?, signature=?, sig_hash=?, ip=?,sig_image=? WHERE pid=? && user=?\";\n        $rcnt = sqlStatement($qstr, array($req_pid, $lastmod, $status, $user, null, $sig_hash, $ip, $output, $req_pid, $user));\n    } else {\n        $qstr = \"INSERT INTO onsite_signatures (pid,lastmod,status,type,user,signator, signature, sig_hash, ip, created, sig_image) VALUES (?,?,?,?,?,?,?,?,?,?,?) \";\n        sqlStatement($qstr, array($req_pid, $lastmod, $status, $type, $user, $signer, null, $sig_hash, $ip, $created, $output));\n    }\n\n    echo json_encode('Done', JSON_THROW_ON_ERROR);\n    exit();\n}\n", "<?php\n\n/**\n * Patient Portal\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n//Need to unwrap data to ensure user/patient is authorized\n$data = (array)(json_decode(file_get_contents(\"php://input\"), true, 512, JSON_THROW_ON_ERROR));\n$req_pid = $data['pid'];\n$user = $data['user'];\n$type = $data['type'];\n$isPortal = $data['is_portal'];\n$signer = '';\n$ignoreAuth = false;\n\n// this script is used by both the patient portal and main openemr; below does authorization.\nif ($isPortal) {\n    require_once(__DIR__ . \"/../../../src/Common/Session/SessionUtil.php\");\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\n    if (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n        // authorized by patient portal\n        $req_pid = $_SESSION['pid'];\n        $ignoreAuth_onsite_portal = true;\n    } else {\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        echo js_escape(\"error\");\n        exit();\n    }\n}\nrequire_once(\"../../../interface/globals.php\");\n\n$created = time();\n$lastmod = date('Y-m-d H:i:s');\n$status = 'filed';\n$info_query = array();\n$isAdmin = ($type === 'admin-signature');\nif ($isAdmin) {\n    $req_pid = 0;\n}\nif ($type === 'witness-signature') {\n    echo(js_escape('Witness Signature'));\n    exit();\n}\nif ($req_pid === 0 || empty($user)) {\n    if (!$isAdmin) {\n        echo(js_escape('error not an admin'));\n        exit();\n    }\n}\n\nif ($data['mode'] === 'fetch_info') {\n    $stmt = \"Select CONCAT(IFNULL(fname,''), ' ',IFNULL(lname,'')) as userName From users Where id = ?\";\n    $user_result = sqlQuery($stmt, array($user)) ?: [];\n    $stmt = \"Select CONCAT(IFNULL(fname,''), ' ',IFNULL(lname,'')) as ptName From patient_data Where pid = ?\";\n    $pt_result = sqlQuery($stmt, array($req_pid)) ?: [];\n    $signature = [];\n    if ($pt_result) {\n        $info_query = array_merge($pt_result, $user_result, $signature);\n    } else {\n        $info_query = array_merge($user_result, $signature);\n    }\n\n    if ($isAdmin) {\n        $signer = $user_result['userName'];\n    } else {\n        $signer = $pt_result['ptName'];\n    }\n    if (!$signer) {\n        echo js_escape(\"error\");\n        exit();\n    }\n}\n\nif ($isAdmin) {\n    $req_pid = 0;\n    $row = sqlQuery(\"SELECT pid,status,sig_image,type,user FROM onsite_signatures WHERE user=? && type=?\", array($user, $type));\n} else {\n    $row = sqlQuery(\"SELECT pid,status,sig_image,type,user FROM onsite_signatures WHERE pid=? And user=?\", array($req_pid, $user));\n}\n\nif (!$row['pid'] && !$row['user']) {\n    $status = 'waiting';\n    $qstr = \"INSERT INTO onsite_signatures (pid,lastmod,status,type,user,signator,created) VALUES (?,?,?,?,?,?,?)\";\n    sqlStatement($qstr, array($req_pid, $lastmod, $status, $type, $user, $signer, $created));\n}\n\nif ($row['status'] == 'filed') {\n    if ($data['mode'] === 'fetch_info') {\n        $info_query['signature'] = $row['sig_image'];\n        echo js_escape($info_query);\n        exit();\n    }\n    echo js_escape($row['sig_image']);\n} elseif ($row['status'] == 'waiting' || $status == 'waiting') {\n    $info_query['message'] = 'waiting';\n    echo js_escape($info_query);\n}\n\nexit();\n", "<?php\n/**\n * Gacl class - phpGACL main class\n *\n * Original code from phpGACL - Generic Access Control List\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Mike Benoit <ipso@snappymail.ca>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2002-2003 Mike Benoit <ipso@snappymail.ca>\n * @copyright Copyright (c) 2020 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html GNU Lesser General Public License 2.1\n */\n\nnamespace OpenEMR\\Gacl;\n\n/*\n * Path to ADODB.\n */\nif ( !defined('ADODB_DIR') ) {\n\tdefine('ADODB_DIR', dirname(__FILE__).'/../vendor/adodb/adodb-php');\n}\n\n//openemr configuration file - bm - 05-2009\n// to collect sql database login info and the utf8 flag\n// also collect the adodb libraries to support mysqli_mod that is needed for mysql ssl support\nrequire_once(dirname(__FILE__) . \"/../../library/sqlconf.php\");\nrequire_once(dirname(__FILE__) . \"/../../vendor/adodb/adodb-php/adodb.inc.php\");\nrequire_once(dirname(__FILE__) . \"/../../vendor/adodb/adodb-php/drivers/adodb-mysqli.inc.php\");\n\nclass Gacl {\n\t/*\n\t--- phpGACL Configuration path/file ---\n\t*/\n\tvar $config_file = '';\n\n\t/*\n\t--- Private properties ---\n\t*/\n\t/** @var boolean Enables Debug output if true */\n\tvar $_debug = FALSE;\n\n\t/*\n\t--- Database configuration. ---\n\t*/\n\t/** @var string Prefix for all the phpgacl tables in the database */\n\tvar $_db_table_prefix = 'gacl_';\n\n\t/** @var string The database type, based on available ADODB connectors - mysql, postgres7, sybase, oci8po See here for more: http://php.weblogs.com/adodb_manual#driverguide */\n\tvar $_db_type = 'mysqli';\n\n\t/** @var string The database server */\n\tvar $_db_host = '';\n\n\t/** @var string The database user name */\n\tvar $_db_user = '';\n\n\t/** @var string The database user password */\n\tvar $_db_password = '';\n\n\t/** @var string The database name */\n\tvar $_db_name = '';\n\n\t/** @var object An ADODB database connector object */\n\tvar $_db = '';\n\n    /** @var boolean The utf8 encoding flag */\n    var $_db_encoding_setting = '';\n\n    /** @var object An ADODB database connector object */\n    var $db;\n\n\t/*\n\t * NOTE: \tThis cache must be manually cleaned each time ACL's are modified.\n\t * \t\tAlternatively you could wait for the cache to expire.\n\t */\n\n\t/** @var boolean Caches queries if true */\n\tvar $_caching = FALSE;\n\n\t/** @var boolean Force cache to expire */\n\tvar $_force_cache_expire = TRUE;\n\n\t/** @var string The directory for cache file to eb written (ensure write permission are set) */\n\tvar $_cache_dir = '/tmp/phpgacl_cache'; // NO trailing slash\n\n\t/** @var int The time for the cache to expire in seconds - 600 == Ten Minutes */\n\tvar $_cache_expire_time=600;\n\n\t/** @var string A switch to put acl_check into '_group_' mode */\n\tvar $_group_switch = '_group_';\n\n\t/**\n\t * Constructor\n\t * @param array An arry of options to oeverride the class defaults\n\t */\n\tfunction __construct($options = NULL) {\n\n\t\t$available_options = array('db','debug','items_per_page','max_select_box_items','max_search_return_items','db_table_prefix','db_type','db_host','db_user','db_password','db_name','caching','force_cache_expire','cache_dir','cache_expire_time');\n\n\t\t//Values supplied in $options array overwrite those in the config file.\n\t\tif ( file_exists($this->config_file) ) {\n\t\t        $config = parse_ini_file($this->config_file);\n\n\t\t        if ( is_array($config) ) {\n\t\t                $gacl_options = array_merge($config, $options);\n\t\t        }\n\n\t        \tunset($config);\n\t\t}\n\n\t\tif (is_array($options)) {\n\t\t\tforeach ($options as $key => $value) {\n\t\t\t\t$this->debug_text(\"Option: $key\");\n\n\t\t\t\tif (in_array($key, $available_options) ) {\n\t\t\t\t\t$this->debug_text(\"Valid Config options: $key\");\n\t\t\t\t\t$property = '_'.$key;\n\t\t\t\t\t$this->$property = $value;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"ERROR: Config option: $key is not a valid option\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        //collect openemr sql info from include at top of script - bm 05-2009\n        global $sqlconf, $disable_utf8_flag;\n        $this->_db_host = $sqlconf[\"host\"];\n        $this->_db_user = $sqlconf[\"login\"];\n        $this->_db_password = $sqlconf[\"pass\"];\n        $this->_db_name = $sqlconf[\"dbase\"];\n        if (!$disable_utf8_flag) {\n            if (!empty($sqlconf[\"db_encoding\"]) && ($sqlconf[\"db_encoding\"] == \"utf8mb4\")) {\n                $this->_db_encoding_setting = \"utf8mb4\";\n            } else {\n                $this->_db_encoding_setting = \"utf8\";\n            }\n        } else {\n            $this->_db_encoding_setting = \"\";\n        }\n\n\t\trequire_once( ADODB_DIR .'/adodb.inc.php');\n\t\trequire_once( ADODB_DIR .'/adodb-pager.inc.php');\n\n\t\tif (is_object($this->_db)) {\n\t\t\t$this->db = &$this->_db;\n\t\t} else {\n\t\t\t$this->db = ADONewConnection($this->_db_type);\n\t\t\t//Use NUM for slight performance/memory reasons.\n\t\t\t$this->db->SetFetchMode(ADODB_FETCH_NUM);\n\n            // Set mysql to use ssl, if applicable.\n            // Can support basic encryption by including just the mysql-ca pem (this is mandatory for ssl)\n            // Can also support client based certificate if also include mysql-cert and mysql-key (this is optional for ssl)\n            if (file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-ca\")) {\n                if (defined('MYSQLI_CLIENT_SSL')) {\n                    if (\n                        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-key\") &&\n                        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-cert\")\n                    ) {\n                        // with client side certificate/key\n                        $this->db->ssl_key = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-key\";\n                        $this->db->ssl_cert = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-cert\";\n                        $this->db->ssl_ca = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-ca\";\n                    } else {\n                        // without client side certificate/key\n                        $this->db->ssl_ca = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-ca\";\n                    }\n                    $this->db->clientFlags = MYSQLI_CLIENT_SSL;\n            \t}\n            }\n\n\t\t\t// Port to be used in connection\n\t\t\t$this->db->port = $sqlconf[\"port\"];\n\n            if ((!empty($GLOBALS[\"enable_database_connection_pooling\"]) || !empty($_SESSION[\"enable_database_connection_pooling\"])) && empty($GLOBALS['connection_pooling_off'])) {\n                $this->db->PConnect($this->_db_host, $this->_db_user, $this->_db_password, $this->_db_name);\n            } else {\n                $this->db->connect($this->_db_host, $this->_db_user, $this->_db_password, $this->_db_name);\n            }\n            // Modified 5/2009 by BM for UTF-8 project\n            if ($this->_db_encoding_setting == \"utf8mb4\") {\n                $success_flag = $this->db->Execute(\"SET NAMES 'utf8mb4'\");\n                if (!$success_flag) {\n                    error_log(\"PHP custom error: from gacl src/Gacl/Gacl.php - Unable to set up UTF8MB4 encoding with mysql database\" . htmlspecialchars($this->db->ErrorMsg(), ENT_QUOTES), 0);\n\t\t\t\t}\n\t\t\t} elseif ($this->_db_encoding_setting == \"utf8\") {\n                $success_flag = $this->db->Execute(\"SET NAMES 'utf8'\");\n                if (!$success_flag) {\n                    error_log(\"PHP custom error: from gacl src/Gacl/Gacl.php - Unable to set up UTF8 encoding with mysql database\" . htmlspecialchars($this->db->ErrorMsg(), ENT_QUOTES), 0);\n                }\n            }\n\t\t        // ---------------------------------------\n\n\t\t\t//Turn off STRICT SQL\n\t\t\t$sql_strict_set_success = $this->db->Execute(\"SET sql_mode = ''\");\n\t\t\tif (!$sql_strict_set_success) {\n\t\t\t\terror_log(\"Unable to set strict sql setting: \" . htmlspecialchars($this->db->ErrorMsg(), ENT_QUOTES), 0);\n\t\t\t}\n\n            if (!empty($GLOBALS['debug_ssl_mysql_connection'])) {\n                error_log(\"CHECK SSL CIPHER IN GACL ADODB: \" . htmlspecialchars(print_r($this->db->Execute(\"SHOW STATUS LIKE 'Ssl_cipher';\")->fields, true), ENT_QUOTES));\n            }\n\n\t\t}\n\t\t$this->db->debug = $this->_debug;\n\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\tif (!class_exists('Hashed_Cache_Lite')) {\n\t\t\t\trequire_once(dirname(__FILE__) .'/Cache_Lite/Hashed_Cache_Lite.php');\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Cache options. We default to the highest performance. If you run in to cache corruption problems,\n\t\t\t * Change all the 'false' to 'true', this will slow things down slightly however.\n\t\t\t */\n\n\t\t\t$cache_options = array(\n\t\t\t\t'caching' => $this->_caching,\n\t\t\t\t'cacheDir' => $this->_cache_dir.'/',\n\t\t\t\t'lifeTime' => $this->_cache_expire_time,\n\t\t\t\t'fileLocking' => TRUE,\n\t\t\t\t'writeControl' => FALSE,\n\t\t\t\t'readControl' => FALSE,\n\t\t\t\t'memoryCaching' => TRUE,\n\t\t\t\t'automaticSerialization' => FALSE\n\t\t\t);\n\t\t\t$this->Cache_Lite = new Hashed_Cache_Lite($cache_options);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t* Prints debug text if debug is enabled.\n\t* @param string THe text to output\n\t* @return boolean Always returns true\n\t*/\n\tfunction debug_text($text) {\n\n\t\tif ($this->_debug) {\n\t\t\techo \"$text<br />\\n\";\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t* Prints database debug text if debug is enabled.\n\t* @param string The name of the function calling this method\n\t* @return string Returns an error message\n\t*/\n\tfunction debug_db($function_name = '') {\n\t\tif ($function_name != '') {\n\t\t\t$function_name .= ' (): ';\n\t\t}\n\n\t\treturn $this->debug_text ($function_name .'database error: '. $this->db->ErrorMsg() .' ('. $this->db->ErrorNo() .')');\n\t}\n\n\t/**\n\t*\n        * Check if the current user has a given type or types of access to an access control object.\n\t*\n        * Implemented as a wrapper of acl_query().\n\t* This function exists simply to return TRUE/FALSE accordingly.\n        *\n\t* @param string $aco_section_value The ACO section value\n\t* @param string $aco_value The ACO value\n\t* @param string $aro_section_value The ARO section value\n\t* @param string $aro_value The ARO value\n\t* @param string $axo_section_value The AXO section value (optional)\n\t* @param string $axo_value The AXO section value (optional)\n\t* @param integer $root_aro_group The group id of the ARO (optional)\n\t* @param integer $root_axo_group The group id of the AXO (optional)\n\t* @return boolean true if the check succeeds, false if not.\n\t*/\n\tfunction acl_check($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value=NULL, $axo_value=NULL, $root_aro_group=NULL, $root_axo_group=NULL) {\n\t\t$acl_result = $this->acl_query($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value, $axo_value, $root_aro_group, $root_axo_group);\n\n\t\treturn $acl_result['allow'];\n\t}\n\n\t/**\n\t* Wraps the actual acl_query() function.\n\t*\n\t* Quick access to the return value of an ACL.\n\t* @param string The ACO section value\n\t* @param string The ACO value\n\t* @param string The ARO section value\n\t* @param string The ARO section\n\t* @param string The AXO section value (optional)\n\t* @param string The AXO section value (optional)\n\t* @param integer The group id of the ARO (optional)\n\t* @param integer The group id of the AXO (optional)\n\t* @return string The return value of the ACL\n\t*/\n\tfunction acl_return_value($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value=NULL, $axo_value=NULL, $root_aro_group=NULL, $root_axo_group=NULL) {\n\t\t$acl_result = $this->acl_query($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value, $axo_value, $root_aro_group, $root_axo_group);\n\n\t\treturn $acl_result['return_value'];\n\t}\n\n\t/**\n\t* Handles ACL lookups over arrays of AROs\n\t* @param string The ACO section value\n\t* @param string The ACO value\n\t* @param array An named array of arrays, each element in the format aro_section_value=>array(aro_value1,aro_value1,...)\n\t* @return mixed The same data format as inputted.\n\t\\*======================================================================*/\n\tfunction acl_check_array($aco_section_value, $aco_value, $aro_array) {\n\t\t/*\n\t\t\tInput Array:\n\t\t\t\tSection => array(Value, Value, Value),\n\t\t\t\tSection => array(Value, Value, Value)\n\n\t\t */\n\n\t\tif (!is_array($aro_array)) {\n\t\t\t$this->debug_text(\"acl_query_array(): ARO Array must be passed\");\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\tforeach ($aro_value_array as $aro_value) {\n\t\t\t\t$this->debug_text(\"acl_query_array(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value\");\n\n\t\t\t\tif( $this->acl_check($aco_section_value, $aco_value, $aro_section_value, $aro_value) ) {\n\t\t\t\t\t$this->debug_text(\"acl_query_array(): ACL_CHECK True\");\n\t\t\t\t\t$retarr[$aro_section_value][] = $aro_value;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"acl_query_array(): ACL_CHECK False\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $retarr;\n\n\t}\n\n\t/**\n\t* The Main function that does the actual ACL lookup.\n        *\n\t* @param string The ACO section value\n\t* @param string The ACO value\n\t* @param string The ARO section value\n\t* @param string The ARO value\n\t* @param string The AXO section value (optional)\n\t* @param string The AXO value (optional)\n\t* @param string The value of the ARO group (optional)\n\t* @param string The value of the AXO group (optional)\n\t* @param boolean Debug the operation if true (optional)\n        * @param boolean Option to return all applicable ACL's rather than just one. (optional) (Added by OpenEMR)\n\t* @return array Returns as much information as possible about the ACL so other functions can trim it down and omit unwanted data.\n\t*/\n\tfunction acl_query($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value=NULL, $axo_value=NULL, $root_aro_group=NULL, $root_axo_group=NULL, $debug=NULL, $return_all=FALSE) {\n\n\t\t$cache_id = 'acl_query_'.$aco_section_value.'-'.$aco_value.'-'.$aro_section_value.'-'.$aro_value.'-'.$axo_section_value.'-'.$axo_value.'-'.$root_aro_group.'-'.$root_axo_group.'-'.$debug.'-'.$return_all;\n\n\t\t$retarr = $this->get_cache($cache_id);\n\n\t\tif (!$retarr) {\n\t\t\t/*\n\t\t\t * Grab all groups mapped to this ARO/AXO\n\t\t\t */\n\t\t\t$aro_group_ids = $this->acl_get_groups($aro_section_value, $aro_value, $root_aro_group, 'ARO');\n\n\t\t\tif (is_array($aro_group_ids) AND !empty($aro_group_ids)) {\n\t\t\t\t$sql_aro_group_ids = implode(',', $aro_group_ids);\n\t\t\t}\n\n\t\t\tif ($axo_section_value != '' AND $axo_value != '') {\n\t\t\t\t$axo_group_ids = $this->acl_get_groups($axo_section_value, $axo_value, $root_axo_group, 'AXO');\n\n\t\t\t\tif (is_array($axo_group_ids) AND !empty($axo_group_ids)) {\n\t\t\t\t\t$sql_axo_group_ids = implode(',', $axo_group_ids);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * This query is where all the magic happens.\n\t\t\t * The ordering is very important here, as well very tricky to get correct.\n\t\t\t * Currently there can be  duplicate ACLs, or ones that step on each other toes. In this case, the ACL that was last updated/created\n\t\t\t * is used; unless the $return_all parameter is set to TRUE, then will return the entire array of applicable ACL information (this\n                         * option was added by OpenEMR)\n\t\t\t *\n\t\t\t * This is probably where the most optimizations can be made.\n\t\t\t */\n\n\t\t\t$order_by = array();\n\n\t\t\t$query = '\n\t\t\t\t\tSELECT\t\ta.id,a.allow,a.return_value\n\t\t\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a\n\t\t\t\t\tLEFT JOIN \t'. $this->_db_table_prefix .'aco_map ac ON ac.acl_id=a.id';\n\n\t\t\tif ($aro_section_value != $this->_group_switch) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_map ar ON ar.acl_id=a.id';\n\t\t\t}\n\n\t\t\tif ($axo_section_value != $this->_group_switch) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_map ax ON ax.acl_id=a.id';\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * if there are no aro groups, don't bother doing the join.\n\t\t\t */\n\t\t\tif (isset($sql_aro_group_ids)) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups_map arg ON arg.acl_id=a.id\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups rg ON rg.id=arg.group_id';\n\t\t\t}\n\n\t\t\t// this join is necessary to weed out rules associated with axo groups\n\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups_map axg ON axg.acl_id=a.id';\n\n\t\t\t/*\n\t\t\t * if there are no axo groups, don't bother doing the join.\n\t\t\t * it is only used to rank by the level of the group.\n\t\t\t */\n\t\t\tif (isset($sql_axo_group_ids)) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups xg ON xg.id=axg.group_id';\n\t\t\t}\n\n\t\t\t//Move the below line to the LEFT JOIN above for PostgreSQL's sake.\n\t\t\t//AND\tac.acl_id=a.id\n\t\t\t$query .= '\n\t\t\t\t\tWHERE\t\ta.enabled=1\n\t\t\t\t\t\tAND\t\t(ac.section_value='. $this->db->quote($aco_section_value) .' AND ac.value='. $this->db->quote($aco_value) .')';\n\n\t\t\t// if we are querying an aro group\n\t\t\tif ($aro_section_value == $this->_group_switch) {\n\t\t\t\t// if acl_get_groups did not return an array\n\t\t\t\tif ( !isset ($sql_aro_group_ids) ) {\n\t\t\t\t\t$this->debug_text ('acl_query(): Invalid ARO Group: '. $aro_value);\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\trg.id IN ('. $sql_aro_group_ids .')';\n\n\t\t\t\t$order_by[] = '(rg.rgt-rg.lft) ASC';\n\t\t\t} else {\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\t((ar.section_value='. $this->db->quote($aro_section_value) .' AND ar.value='. $this->db->quote($aro_value) .')';\n\n\t\t\t\tif ( isset ($sql_aro_group_ids) ) {\n\t\t\t\t\t$query .= ' OR rg.id IN ('. $sql_aro_group_ids .')';\n\n\t\t\t\t\t$order_by[] = '(CASE WHEN ar.value IS NULL THEN 0 ELSE 1 END) DESC';\n\t\t\t\t\t$order_by[] = '(rg.rgt-rg.lft) ASC';\n\t\t\t\t}\n\n\t\t\t\t$query .= ')';\n\t\t\t}\n\n\n\t\t\t// if we are querying an axo group\n\t\t\tif ($axo_section_value == $this->_group_switch) {\n\t\t\t\t// if acl_get_groups did not return an array\n\t\t\t\tif ( !isset ($sql_axo_group_ids) ) {\n\t\t\t\t\t$this->debug_text ('acl_query(): Invalid AXO Group: '. $axo_value);\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\txg.id IN ('. $sql_axo_group_ids .')';\n\n\t\t\t\t$order_by[] = '(xg.rgt-xg.lft) ASC';\n\t\t\t} else {\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\t(';\n\n\t\t\t\tif ($axo_section_value == '' AND $axo_value == '') {\n\t\t\t\t\t$query .= '(ax.section_value IS NULL AND ax.value IS NULL)';\n\t\t\t\t} else {\n\t\t\t\t\t$query .= '(ax.section_value='. $this->db->quote($axo_section_value) .' AND ax.value='. $this->db->quote($axo_value) .')';\n\t\t\t\t}\n\n\t\t\t\tif (isset($sql_axo_group_ids)) {\n\t\t\t\t\t$query .= ' OR xg.id IN ('. $sql_axo_group_ids .')';\n\n\t\t\t\t\t$order_by[] = '(CASE WHEN ax.value IS NULL THEN 0 ELSE 1 END) DESC';\n\t\t\t\t\t$order_by[] = '(xg.rgt-xg.lft) ASC';\n\t\t\t\t} else {\n\t\t\t\t\t$query .= ' AND axg.group_id IS NULL';\n\t\t\t\t}\n\n\t\t\t\t$query .= ')';\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * The ordering is always very tricky and makes all the difference in the world.\n\t\t\t * Order (ar.value IS NOT NULL) DESC should put ACLs given to specific AROs\n\t\t\t * ahead of any ACLs given to groups. This works well for exceptions to groups.\n                         * If the $return_all parameter is set to TRUE, then will return the entire\n                         * array of applicable ACL information (this option was added by OpenEMR)\n\t\t\t */\n\n\t\t\t$order_by[] = 'a.updated_date DESC';\n\n\t\t\t$query .= '\n\t\t\t\t\tORDER BY\t'. implode (',', $order_by) . '\n\t\t\t\t\t';\n\n\t\t\t// we are only interested in the first row unless $return_all is set\n                        if ($return_all) {\n                                $rs = $this->db->Execute($query);\n                        }\n                        else {\n\t\t\t        $rs = $this->db->SelectLimit($query, 1);\n                        }\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('acl_query');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n                        if ($return_all) {\n                                while ($arr = $rs->FetchRow()) {\n                                        $row[] = $arr;\n                                }\n                        }\n                        else {\n\t\t\t        $row = $rs->FetchRow();\n                        }\n\n\n\t\t\t/*\n\t\t\t * Return ACL ID. This is the key to \"hooking\" extras like pricing assigned to ACLs etc... Very useful.\n\t\t\t */\n\t\t\tif (isset($row) && is_array($row)) {\n\n                                if ($return_all) {\n                                        foreach ($row as $single_row) {\n\t\t\t\t\t\t$allow = FALSE;\n                                                if ( isset($single_row[1]) AND $single_row[1] == 1 ) {\n                                                        $allow = TRUE;\n                                                }\n                                                if ($retarr === false) {\n                                                    // PHP 8.1 deprecates Autovivification on false and it will break in PHP 9.0, so need to set the\n                                                    //  array explicitly\n                                                    $retarr = [['acl_id' => &$single_row[0], 'return_value' => &$single_row[2], 'allow' => $allow]];\n                                                } else {\n                                                    $retarr[] = array('acl_id' => &$single_row[0], 'return_value' => &$single_row[2], 'allow' => $allow);\n                                                }\n                                        }\n                                }\n                                else {\n\t\t\t\t\t$allow = FALSE;\n\t\t\t\t        if ( isset($row[1]) AND $row[1] == 1 ) {\n\t\t\t\t\t        $allow = TRUE;\n\t\t\t\t        }\n\t\t\t\t        $retarr = array('acl_id' => &$row[0], 'return_value' => &$row[2], 'allow' => $allow);\n                                }\n\t\t\t} else {\n                                if ($return_all) {\n\t\t\t                // Permission denied.\n\t\t\t                $retarr[] = array('acl_id' => NULL, 'return_value' => NULL, 'allow' => FALSE);\n                                }\n                                else {\n                                        // Permission denied.\n                                        $retarr = array('acl_id' => NULL, 'return_value' => NULL, 'allow' => FALSE);\n                                }\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Return the query that we ran if in debug mode.\n\t\t\t */\n\t\t\tif ($debug == TRUE) {\n\t\t\t\t$retarr['query'] = &$query;\n\t\t\t}\n\n\t\t\t//Cache data.\n\t\t\t$this->put_cache($retarr, $cache_id);\n\t\t}\n\n\t\tif ($return_all)\n\t\t{\n\t\t\t$this->debug_text(\"<b>acl_query():</b> ACO Section: $aco_section_value ACO Value: $aco_value ARO Section: $aro_section_value ARO Value $aro_value ACL ID: OMITTED due to return_all\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->debug_text(\"<b>acl_query():</b> ACO Section: $aco_section_value ACO Value: $aco_value ARO Section: $aro_section_value ARO Value $aro_value ACL ID: \". $retarr['acl_id'] .' Result: '. $retarr['allow']);\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t* Grabs all groups mapped to an ARO. You can also specify a root_group for subtree'ing.\n\t* @param string The section value or the ARO or ACO\n\t* @param string The value of the ARO or ACO\n\t* @param integer The group id of the group to start at (optional)\n\t* @param string The type of group, either ARO or AXO (optional)\n\t*/\n\tfunction acl_get_groups($section_value, $value, $root_group=NULL, $group_type='ARO') {\n\n\t\tswitch(strtolower($group_type)) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$object_table = $this->_db_table_prefix .'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$group_map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$object_table = $this->_db_table_prefix .'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$group_map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//$profiler->startTimer( \"acl_get_groups()\");\n\n\t\t//Generate unique cache id.\n\t\t$cache_id = 'acl_get_groups_'.$section_value.'-'.$value.'-'.$root_group.'-'.$group_type;\n\n\t\t$retarr = $this->get_cache($cache_id);\n\n\t\tif (!$retarr) {\n\n\t\t\t// Make sure we get the groups\n\t\t\t$query = '\n\t\t\t\t\tSELECT \t\tDISTINCT g2.id';\n\n\t\t\tif ($section_value == $this->_group_switch) {\n\t\t\t\t$query .= '\n\t\t\t\t\tFROM\t\t' . $group_table . ' g1,' . $group_table . ' g2';\n\n\t\t\t\t$where = '\n\t\t\t\t\tWHERE\t\tg1.value=' . $this->db->quote( $value );\n\t\t\t} else {\n\t\t\t\t$query .= '\n\t\t\t\t\tFROM\t\t'. $object_table .' o,'. $group_map_table .' gm,'. $group_table .' g1,'. $group_table .' g2';\n\n\t\t\t\t$where = '\n\t\t\t\t\tWHERE\t\t(o.section_value='. $this->db->quote($section_value) .' AND o.value='. $this->db->quote($value) .')\n\t\t\t\t\t\tAND\t\tgm.'. $group_type .'_id=o.id\n\t\t\t\t\t\tAND\t\tg1.id=gm.group_id';\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If root_group_id is specified, we have to narrow this query down\n\t\t\t * to just groups deeper in the tree then what is specified.\n\t\t\t * This essentially creates a virtual \"subtree\" and ignores all outside groups.\n\t\t\t * Useful for sites like sourceforge where you may seperate groups by \"project\".\n\t\t\t */\n\t\t\tif ( $root_group != '') {\n\t\t\t\t//It is important to note the below line modifies the tables being selected.\n\t\t\t\t//This is the reason for the WHERE variable.\n\t\t\t\t$query .= ','. $group_table .' g3';\n\n\t\t\t\t$where .= '\n\t\t\t\t\t\tAND\t\tg3.value='. $this->db->quote( $root_group ) .'\n\t\t\t\t\t\tAND\t\t((g2.lft BETWEEN g3.lft AND g1.lft) AND (g2.rgt BETWEEN g1.rgt AND g3.rgt))';\n\t\t\t} else {\n\t\t\t\t$where .= '\n\t\t\t\t\t\tAND\t\t(g2.lft <= g1.lft AND g2.rgt >= g1.rgt)';\n\t\t\t}\n\n\t\t\t$query .= $where;\n\n\t\t\t// $this->debug_text($query);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('acl_get_groups');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$retarr = array();\n\n\t\t\t//Unbuffered query?\n\t\t\twhile (!$rs->EOF) {\n\t\t\t\t$retarr[] = reset($rs->fields);\n\t\t\t\t$rs->MoveNext();\n\t\t\t}\n\n\t\t\t//Cache data.\n\t\t\t$this->put_cache($retarr, $cache_id);\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t* Uses PEAR's Cache_Lite package to grab cached arrays, objects, variables etc...\n\t* using unserialize() so it can handle more then just text string.\n\t* @param string The id of the cached object\n\t* @return mixed The cached object, otherwise FALSE if the object identifier was not found\n\t*/\n\tfunction get_cache($cache_id) {\n\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\t$this->debug_text(\"get_cache(): on ID: $cache_id\");\n\n\t\t\tif ( is_string($this->Cache_Lite->get($cache_id) ) ) {\n\t\t\t\treturn unserialize($this->Cache_Lite->get($cache_id) );\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Uses PEAR's Cache_Lite package to write cached arrays, objects, variables etc...\n\t* using serialize() so it can handle more then just text string.\n\t* @param mixed A variable to cache\n\t* @param string The id of the cached variable\n\t*/\n\tfunction put_cache($data, $cache_id) {\n\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\t$this->debug_text(\"put_cache(): Cache MISS on ID: $cache_id\");\n\n\t\t\treturn $this->Cache_Lite->save(serialize($data), $cache_id);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction clear_cache() {\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\t$this->debug_text(\"clear_cache(): Clearing cache\");\n\t\t\t$this->Cache_Lite->clean();\n\t\t}\n\t}\n}\n?>\n"], "fixing_code": ["<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * import supporting libraries\n */\nrequire_once(\"DataAdapter.php\");\nrequire_once(\"CriteriaFilter.php\");\nrequire_once(\"verysimple/IO/Includer.php\");\n\n/**\n * Criteria is a base object that is passed into Phreeze->Query for retreiving\n * records based on specific criteria\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc.\n * @copyright 1997-2007 VerySimple, Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 2.3\n */\nclass Criteria\n{\n    protected $_join;\n    protected $_where;\n    protected $_where_delim;\n    protected $_order;\n    protected $_order_delim;\n    protected $_is_prepared;\n    protected $_map_object_class;\n    private $_fieldmaps;\n    private $_keymaps;\n    private $_constructor_where;\n    private $_constructor_order;\n    private $_set_order;\n    private $_and = array ();\n    private $_or = array ();\n    public $PrimaryKeyField;\n    public $PrimaryKeyValue;\n\n    /**\n     *\n     * @var $Filters a CriteriaFilter or array of CriteriaFilters to be applied to the query\n     */\n    public $Filters;\n    public function __construct($where = \"\", $order = \"\")\n    {\n        $this->_constructor_where = $where;\n        $this->_constructor_order = $order;\n\n        $this->_where = $where;\n        $this->_order = $order;\n\n        $this->Init();\n    }\n\n    /**\n     * Init is called directly after construction and can be overridden.\n     * If the\n     * name of the Criteria class is not ObjectClassCriteria, then this method\n     * must be overridden and _map_object_class should be set to the correct\n     * name of the DAO Map class\n     */\n    protected function Init()\n    {\n        $this->_map_object_class = str_replace(\"Criteria\", \"Map\", get_class($this));\n    }\n\n    /**\n     * Add a CriteriaFilter to the criteria for custom filtering of results\n     *\n     * @param CriteriaFilter $filter\n     */\n    public function AddFilter(CriteriaFilter $filter)\n    {\n        if (! $this->Filters) {\n            $this->Filters = array ();\n        }\n\n        $this->Filters [] = $filter;\n    }\n\n    /**\n     * Return an array of CriteriaFilters that have been added to this criteria\n     *\n     * @return array\n     */\n    public function GetFilters()\n    {\n        return $this->Filters;\n    }\n\n    /**\n     * Remove all filters that are currently attached\n     */\n    public function ClearFilters()\n    {\n        $this->Filters = null;\n    }\n\n    /**\n     * Adds a criteria to be joined w/ an \"and\" statement.\n     * Criterias to foreign objects may be added as long as they\n     * have an immediate relationship to the foreign table\n     *\n     * @param\n     *          Criteria\n     * @param\n     *          string [optional] id of the foreign key map. If the same table is joined\n     *          multiple times, then you should specify which keymap to use\n     */\n    public function AddAnd(Criteria $criteria, $keymap_id = null)\n    {\n        $this->_and [] = $criteria;\n    }\n\n    /**\n     * Return any and criterias that have been added to this criteria\n     *\n     * @return array\n     */\n    public function GetAnds()\n    {\n        return $this->_and;\n    }\n\n    /**\n     * Escape values for insertion into a SQL query string\n     *\n     * @return string\n     */\n    public function Escape($val)\n    {\n        return DataAdapter::Escape($val);\n    }\n\n    /**\n     * Returns DataAdapter::GetQuotedSql($val)\n     *\n     * @param variant $val\n     *          to be quoted\n     * @return string\n     */\n    public function GetQuotedSql($val)\n    {\n        return DataAdapter::GetQuotedSql($val);\n    }\n\n    /**\n     * Adds a criteria to be joined w/ an \"or\" statement.\n     * Criterias to foreign objects may be added as long as they\n     * have an immediate relationship to the foreign table\n     *\n     * @param\n     *          Criteria\n     * @param\n     *          string [optional] id of the foreign key map. If the same table is joined\n     *          multiple times, then you should specify which keymap to use\n     */\n    public function AddOr(Criteria $criteria, $keymap_id = null)\n    {\n        $this->_or [] = $criteria;\n    }\n\n    /**\n     * Return any 'or' criterias that have been added to this criteria\n     *\n     * @return array\n     */\n    public function GetOrs()\n    {\n        return $this->_or;\n    }\n\n    /**\n     * Reset the Criteria for re-use.\n     * This is called by querybuilder after the criteria has been used\n     * to generate SQL. It can be called manually as well.\n     */\n    public function Reset()\n    {\n        $this->_is_prepared = false;\n        $this->_where = $this->_constructor_where;\n        $this->_order = $this->_constructor_order;\n    }\n\n    /**\n     * Prepare is called just prior to execution and will fire OnPrepare after it completes\n     * If this is a base Criteria class, then we can only do a lookup by PrimaryKeyField or\n     * else raw SQL must be provided during construction.\n     * _Equals, _BeginsWith can only be\n     * used by inherited Criteria classes because we don't know what table this is associated\n     * with, so we can't translate property names to column names.\n     */\n    final protected function Prepare()\n    {\n        if (! $this->_is_prepared) {\n            if (get_class($this) == \"Criteria\") {\n                if ($this->PrimaryKeyField) {\n                    // PrimaryKeyField property was specified. this might be coming from $phreezer->Get\n                    $this->_where = \" \" . $this->PrimaryKeyField . \" = '\" . $this->Escape($this->PrimaryKeyValue) . \"'\";\n                }\n\n                // else {raw SQL was likely provided in the constructor. this might be coming from $phreezer->GetOneToMany}\n            } else {\n                // loop through all of the properties and attempt to\n                // build a query based on any values that have been set\n                $this->_where = '';\n                $this->_where_delim = '';\n\n                $props = get_object_vars($this);\n                foreach ($props as $prop => $val) {\n                    // TODO: tighten this up a bit to reduce redundant code\n                    if ($prop == \"Filters\" && isset($val) && (is_array($val) || is_a($val, 'CriteriaFilter'))) {\n                        // a filter object will take care of generating it's own where statement\n\n                        // normalize the input to accept either an individual filter or multiple filters\n                        $filters = (is_array($val)) ? $val : array (\n                                $val\n                        );\n\n                        foreach ($filters as $filter) {\n                            $this->_where .= $this->_where_delim . ' ' . $filter->GetWhere($this);\n                            $this->_where_delim = \" and\";\n                        }\n                    } elseif (substr($prop, - 7) == \"_Equals\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_Equals\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" = \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 10) == \"_NotEquals\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_NotEquals\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" != \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 8) == \"_IsEmpty\" && $this->$prop ?? '') {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsEmpty\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" = ''\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 11) == \"_IsNotEmpty\" && $this->$prop ?? '') {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsNotEmpty\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" != ''\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 7) == \"_IsLike\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsLike\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" like '%\" . $this->Escape($val) . \"%'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 10) == \"_IsNotLike\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_IsNotLike\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" not like '%\" . $this->Escape($val) . \"%'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 11) == \"_BeginsWith\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_BeginsWith\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" like '\" . $this->Escape($val) . \"%'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 9) == \"_EndsWith\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_EndsWith\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" like '%\" . $this->Escape($val) . \"'\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 12) == \"_GreaterThan\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_GreaterThan\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" > \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 19) == \"_GreaterThanOrEqual\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_GreaterThanOrEqual\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" >= \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 9) == \"_LessThan\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_LessThan\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" < \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 16) == \"_LessThanOrEqual\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_LessThanOrEqual\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" <= \" . $this->GetQuotedSql($val) . \"\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 10) == \"_BitwiseOr\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_BitwiseOr\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" (\" . $dbfield . \" | '\" . $this->Escape($val) . \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 11) == \"_BitwiseAnd\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_BitwiseAnd\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" (\" . $dbfield . \" & \" . $this->Escape($val) . \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 16) == \"_LiteralFunction\" && strlen($this->$prop ?? '')) {\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_LiteralFunction\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" (\" . $dbfield . \" \" . $val . \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 3) == \"_In\" && isset($val)) {\n                        // if a string was passed in then treat it as comma-delimited\n                        if (! is_array($val)) {\n                            $val = explode(',', $val);\n                        }\n\n                            // if the count is zero, technically the user is saying that they don't\n                            // want any results. the only way to do that is to make the criteria\n                            // something that will for sure not match any existing records. we cannot\n                            // 100% guarantee this, though, we can choose a highly unlikely value\n                            // that will never return a match under ordinary circumstances\n                        if (count($val) == 0) {\n                            array_push($val, \"$prop EMPTY PHREEZE CRITERIA ARRAY\");\n                        }\n\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_In\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" in (\";\n                        $indelim = \"\";\n                        foreach ($val as $n) {\n                            $this->_where .= $indelim . \"'\" . $this->Escape($n) . \"'\";\n                            $indelim = \",\";\n                        }\n\n                        $this->_where .= \")\";\n                        $this->_where_delim = \" and\";\n                    } elseif (substr($prop, - 6) == \"_NotIn\" && isset($val)) {\n                        // if a string was passed in then treat it as comma-delimited\n                        if (! is_array($val)) {\n                            $val = explode(',', $val);\n                        }\n\n                            // if the count is zero, technically the user is saying that they don't\n                            // want any results. the only way to do that is to make the criteria\n                            // something that will for sure not match any existing records. we cannot\n                            // 100% guarantee this, though, we can choose a highly unlikely value\n                            // that will never return a match under ordinary circumstances\n                        if (count($val) == 0) {\n                            array_push($val, \"$prop EMPTY PHREEZE CRITERIA ARRAY\");\n                        }\n\n                        $dbfield = $this->GetFieldFromProp(str_replace(\"_NotIn\", \"\", $prop));\n                        $this->_where .= $this->_where_delim . \" \" . $dbfield . \" not in (\";\n                        $indelim = \"\";\n                        foreach ($val as $n) {\n                            $this->_where .= $indelim . \"'\" . $this->Escape($n) . \"'\";\n                            $indelim = \",\";\n                        }\n\n                        $this->_where .= \")\";\n                        $this->_where_delim = \" and\";\n                    }\n                }\n            }\n\n            // prepend the sql so the statement will work correctly\n            if ($this->_where) {\n                $this->_where = \" where \" . $this->_where;\n            }\n\n            // if the user has called SetOrder then use that for the order\n            if ($this->_set_order) {\n                $this->_order = $this->_set_order;\n            }\n\n            // if any of the filters have an order by then add those\n            if (is_array($this->Filters)) {\n                $orderDelim = $this->_order ? ',' : '';\n                foreach ($this->Filters as $filter) {\n                    $filterOrder = $filter->GetOrder($this);\n                    if ($filterOrder) {\n                        $this->_order .= $orderDelim . $filterOrder;\n                        $orderDelim = ', ';\n                    }\n                }\n            }\n\n            if ($this->_order) {\n                $this->_order = \" order by \" . $this->_order;\n            }\n\n            $this->OnPrepare();\n            $this->_is_prepared = true;\n        }\n    }\n    public function OnPrepare()\n    {\n    }\n    final public function GetWhere()\n    {\n        $this->Prepare();\n        return $this->_where;\n    }\n    final public function GetJoin()\n    {\n        $this->Prepare();\n        return $this->_join;\n    }\n    final public function GetOrder()\n    {\n        $this->Prepare();\n        return $this->_order;\n    }\n\n    /**\n     * Adds an object property to the order by clause.\n     * If any sorting needs to be done\n     * on foreign tables, then for the moment, you need to override this method and\n     * handle it manually. You can call this method repeatedly to add more than\n     * one property for sorting.\n     *\n     * @param string $property\n     *          the name of the object property (or '?' for random order)\n     * @param bool $desc\n     *          (optional) set to true to sort in descending order (default false)\n     */\n    public function SetOrder($property, $desc = false)\n    {\n        if (! $property) {\n            // no property was specified.\n            return;\n        }\n\n        $this->_order_delim = ($this->_set_order) ? \",\" : \"\";\n\n        if ($property == '?') {\n            $this->_set_order = \"RAND()\" . $this->_order_delim . $this->_set_order;\n        } else {\n            $colname = $this->GetFieldFromProp($property);\n            $this->_set_order .= $this->_order_delim . $colname . ($desc ? \" desc\" : \"\");\n        }\n    }\n    private function InitMaps()\n    {\n        if (! $this->_fieldmaps) {\n            // we have to open the file to get the fieldmaps\n            $mapname = $this->_map_object_class;\n            $this->IncludeMap($mapname);\n\n            $this->_fieldmaps = call_user_func(array (\n                    $mapname,\n                    \"GetFieldMaps\"\n            ));\n            $this->_keymaps = call_user_func(array (\n                    $mapname,\n                    \"GetKeyMaps\"\n            ));\n        }\n    }\n\n    /**\n     * If the map class is not already defined, attempts to require_once the definition.\n     * If the Map file cannot be located, an exception is thrown\n     *\n     * @access public\n     * @param string $objectclass\n     *          The name of the object map class\n     */\n    public function IncludeMap($objectclass)\n    {\n        try {\n            Includer::RequireClass($objectclass, \"Model/DAO/\");\n        } catch (IncludeException $ex) {\n            throw new Exception($ex->getMessage() . '.  If a map file does not exist then ' . get_class($this) . ' can implement GetFieldFromProp instead.');\n        }\n    }\n    protected function GetFieldMaps()\n    {\n        $this->InitMaps();\n        return $this->_fieldmaps;\n    }\n    protected function GetKeyMaps()\n    {\n        $this->InitMaps();\n        return $this->_keymaps;\n    }\n    public function GetFieldFromProp($propname)\n    {\n        if (get_class($this) == \"Criteria\") {\n            throw new Exception(\"Phreeze is unable to determine field mapping.  The base Criteria class should only be used to query by primary key without sorting\");\n        }\n\n        $fms = $this->GetFieldMaps();\n\n        // make sure this property is defined\n        if (! isset($fms [$propname])) {\n            throw new Exception(get_class($this) . \" is unable to determine the database column for the property: '$propname'\");\n        }\n\n        // print_r($this->_fieldmaps);\n        $fm = $fms [$propname];\n\n        return $fm->FieldType == FM_CALCULATION ? \"(\" . $fm->ColumnName . \")\" : \"`\" . $fm->TableName . \"`.`\" . $fm->ColumnName . \"`\";\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @throws Exception\n     */\n    public function __get($key)\n    {\n        if (! Phreezer::$COMPAT_VERSION_2) {\n            throw new Exception(\"Unknown property: $key\");\n        }\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @param string $val\n     * @throws Exception\n     */\n    public function __set($key, $val)\n    {\n        if (! Phreezer::$COMPAT_VERSION_2) {\n            throw new Exception(\"Unknown property: $key\");\n        }\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * DataPage is a container for one \"page\" of data in a DataSet\n * This is used for displaying results in small chunks.\n * A DataPage\n * is returned by DataSet::GetDataPage\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2007 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.1\n */\nclass DataPage implements Iterator\n{\n    /**\n     * The Rows property is an array of objects retreived from the data store\n     */\n    public $Rows = null;\n\n    /**\n     * ObjectName is the classname of the object that is stored\n     */\n    public $ObjectName = \"\";\n\n    /**\n     * ObjectInstance is an instance of the class that is stored in Rows\n     *\n     * @var Phreezable\n     */\n    public $ObjectInstance = null;\n\n    /**\n     * ObjectKey is the name of the primary key property for the objects in Rows\n     */\n    public $ObjectKey = \"\";\n    public $TotalResults = 0;\n    public $TotalPages = 0;\n    public $CurrentPage = 0;\n    public $PageSize = 0;\n\n    /**\n     *\n     * @return Phreezable\n     */\n    #[\\ReturnTypeWillChange]\n    public function Next()\n    {\n        return next($this->Rows);\n    }\n    #[\\ReturnTypeWillChange]\n    public function rewind()\n    {\n        reset($this->Rows);\n    }\n\n    /**\n     *\n     * @return Phreezable\n     */\n    #[\\ReturnTypeWillChange]\n    public function current()\n    {\n        return current($this->Rows);\n    }\n    #[\\ReturnTypeWillChange]\n    public function key()\n    {\n        return key($this->Rows);\n    }\n    #[\\ReturnTypeWillChange]\n    public function valid()\n    {\n        return $this->current() !== false;\n    }\n\n    /**\n     * Returns the entire page as an array of objects.\n     * if the asSimpleObject is false\n     * then the stateful Phreezable objects will be returned. If asSimpleObject is true\n     * then the objects returned will be whatever is returned by ToObject()\n     * Phreezable object (the default is a stdClass with all public properties)\n     *\n     * @access public\n     * @param\n     *          bool asSimpleObject if true then populate the array with ToObject on each item in the array\n     * @param\n     *          array options (only relevant if asSimpleObject is true) passed through to ToObject\n     * @return array\n     */\n    function ToObjectArray($asSimpleObject = false, $options = null)\n    {\n        $arr = null;\n\n        if ($asSimpleObject) {\n            $arr = array ();\n            foreach ($this->Rows as $row) {\n                $arr [] = $row->ToObject($options);\n            }\n        } else {\n            $arr = $this->Rows;\n        }\n\n        return $arr;\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * import supporting libraries\n */\nrequire_once(\"DataPage.php\");\n\n/**\n * DataSet stores zero or more Loadable objects\n * The DataSet is the object that is returned by every Phreezer Query operation.\n * The DataSet contains various methods to enumerate through , or retrieve all\n * results all at once.\n *\n * The DataSet executes queries lazily, only when the first result is retrieved.\n * Using GetDataPage will allow retreival of sub-sets of large amounts of data without\n * querying the entire database\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2007 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.2\n */\nclass DataSet implements Iterator // @TODO implement Countable, ArrayAccess\n{\n    protected $_phreezer;\n    protected $_rs;\n    protected $_objectclass;\n    protected $_counter;\n    private $_sql;\n    private $_current; // the current object in the set\n    private $_last; // the previous object in the set\n    private $_totalcount;\n    private $_no_exception; // used during iteration to suppress exception on the final Next call\n    private $_cache_timeout; // length of time to cache query results\n    public $UnableToCache = true;\n\n    /**\n     * A custom SQL query may be provided to count the results of the query.\n     * This query should return one column \"counter\" which is the number of rows\n     * and must take into account all criteria parameters.\n     * If no value is provided, the counter query will be generated (which is likely less efficient)\n     *\n     * @var string\n     */\n    public $CountSQL = \"\";\n\n    /**\n     * Contructor initializes the object\n     *\n     * @access public\n     * @param\n     *          Phreezer\n     * @param\n     *          string class of object this DataSet contains\n     * @param string $sql\n     *          code\n     * @param\n     *          int cache timeout (in seconds). Default is Phreezer->ValueCacheTimeout. Set to 0 for no cache\n     */\n    function __construct(&$preezer, $objectclass, $sql, $cache_timeout = null)\n    {\n        $this->_counter = - 1;\n        $this->_totalcount = - 1;\n        $this->_eof = false;\n        $this->_objectclass = $objectclass;\n        $this->_phreezer = & $preezer;\n        $this->_rs = null;\n        $this->_sql = $sql;\n        $this->_cache_timeout = is_null($cache_timeout) ? $preezer->ValueCacheTimeout : $cache_timeout;\n    }\n\n    /**\n     * _getObject must be overridden and returns the type of object that\n     * this collection will contain.\n     *\n     * @access private\n     * @param array $row\n     *          array to use for populating a single object\n     * @return Preezable\n     */\n    private function _getObject(&$row)\n    {\n        $obj = new $this->_objectclass($this->_phreezer, $row);\n        return $obj;\n    }\n\n    /**\n     * Next returns the next object in the collection.\n     *\n     * @access public\n     * @return Preezable\n     */\n    #[\\ReturnTypeWillChange]\n    function Next()\n    {\n        if ($this->UnableToCache) {\n            require_once(\"verysimple/Util/ExceptionFormatter.php\");\n            $info = ExceptionFormatter::FormatTrace(debug_backtrace());\n            $this->_phreezer->Observe(\"(DataSet.Next: unable to cache query with cursor) \" . $info . \"  \" . $this->_sql, OBSERVE_DEBUG);\n\n            // use this line to discover where an uncachable query is coming from\n            throw new Exception(\"WTF\");\n\n            // stop this warning from repeating on every next call for this dataset\n            $this->UnableToCache = false;\n        }\n\n        $this->_verifyRs();\n\n        $this->_current = null;\n        $this->_counter ++;\n\n        if ($this->_eof) {\n            if (! $this->_no_exception) {\n                throw new Exception(\"EOF: This is a forward-only dataset.\");\n            }\n        }\n\n        if ($row = $this->_phreezer->DataAdapter->Fetch($this->_rs)) {\n            $this->_current = $this->_getObject($row);\n            $this->_last = $this->_current;\n        } else {\n            $this->_eof = true;\n        }\n\n        return $this->_current;\n    }\n\n    /**\n     * Executes the sql statement and fills the resultset if necessary\n     */\n    private function _verifyRs()\n    {\n        if ($this->_rs == null) {\n            $this->_phreezer->IncludeModel($this->_objectclass);\n            $this->_rs = $this->_phreezer->DataAdapter->Select($this->_sql);\n        }\n    }\n\n    /**\n     * If a reporter query does not return data (insert/update/delete) then\n     * calling Execute will execute the sql without expecting return data\n     */\n    public function Execute()\n    {\n        return $this->_phreezer->DataAdapter->Execute($this->_sql);\n    }\n    #[\\ReturnTypeWillChange]\n    public function rewind()\n    {\n        $this->_rs = null;\n        $this->_counter = 0;\n        $this->_no_exception = true;\n        $this->_total = $this->Count();\n        $this->_verifyRs();\n        $this->Next(); // we have to get the party started for php iteration\n    }\n    #[\\ReturnTypeWillChange]\n    public function current()\n    {\n        // php iteration calls next then gets the current record. The DataSet\n        // Next return the current object. so, we have to fudge a little on the\n        // laster iteration to make it work properly\n        return ($this->key() == $this->Count()) ? $this->_last : $this->_current;\n    }\n    #[\\ReturnTypeWillChange]\n    public function key()\n    {\n        return $this->_counter;\n    }\n    #[\\ReturnTypeWillChange]\n    public function valid()\n    {\n        return $this->key() <= $this->Count();\n    }\n\n    /**\n     * Returns true if the total number of records is known.\n     * Because calling \"Count\"\n     * directly may fire a database query, this method can be used to tell if\n     * the number of records is known without actually firing any queries\n     *\n     * @return boolean\n     */\n    function CountIsKnown()\n    {\n        return $this->_totalcount > - 1;\n    }\n\n    /**\n     * Count returns the number of objects in the collection.\n     * If the\n     * count is not available, a count statement will be executed to determine the total\n     * number of rows available\n     *\n     * Note: if you get an \"Unknown Column\" error during a query, it may be due to tables being\n     * joined in the wrong order. To fix this, simply include references in your FieldMap to\n     * the foreign tables in the same order that you wish them to be included in the query\n     *\n     * @access public\n     * @return int\n     */\n    function Count()\n    {\n        if (! $this->CountIsKnown()) {\n            // check the cache\n            $cachekey = $this->_sql . \" COUNT\";\n            $this->_totalcount = $this->GetDelayedCache($cachekey);\n\n            // if no cache, go to the db\n            if ($this->_totalcount != null) {\n                $this->_phreezer->Observe(\"DataSet.Count: skipping count query because cache exists\", OBSERVE_DEBUG);\n            } else {\n                $this->LockCache($cachekey);\n\n                $sql = \"\";\n\n                // if a custom counter sql query was provided, use that because it should be more efficient\n                if ($this->CountSQL) {\n                    $this->_phreezer->Observe(\"DataSet.Count: using CountSQL to obtain total number of records\", OBSERVE_DEBUG);\n                    $sql = $this->CountSQL;\n                } else {\n                    $this->_phreezer->Observe(\"(DataSet.Count: CountSQL was not provided so a counter query will be generated.  Implement GetCustomCountQuery in the reporter class to improve performance.)\", OBSERVE_WARN);\n                    $sql = \"select count(1) as counter from (\" . $this->_sql . \") tmptable\" . rand(1000, 9999);\n                }\n\n                $rs = $this->_phreezer->DataAdapter->Select($sql);\n                $row = $this->_phreezer->DataAdapter->Fetch($rs);\n                $this->_phreezer->DataAdapter->Release($rs);\n                $this->_totalcount = $row [\"counter\"];\n\n                $this->_phreezer->SetValueCache($cachekey, $this->_totalcount, $this->_cache_timeout);\n\n                $this->UnlockCache($cachekey);\n            }\n        }\n\n        return $this->_totalcount;\n    }\n\n    /**\n     * Returns the entire collection as an array of objects.\n     * if the asSimpleObject is false\n     * then the stateful Phreezable objects will be returned. If asSimpleObject is true\n     * then the objects returned will be whatever is returned by ToObject() on each\n     * Phreezable object (the default is a stdClass with all public properties)\n     *\n     * @access public\n     * @param\n     *          bool asSimpleObject if true then populate the array with ToObject()\n     * @param\n     *          array options (only relevant if asSimpleObject is true) passed through to ToObject\n     * @return array\n     */\n    function ToObjectArray($asSimpleObject = false, $options = null)\n    {\n        $cachekey = $this->_sql . \" OBJECTARRAY\" . ($asSimpleObject ? '-AS-OBJECT-' . serialize($options) : '');\n\n        $arr = $this->GetDelayedCache($cachekey);\n\n        if ($arr != null) {\n            // we have a cache value, so we will repopulate from that\n            $this->_phreezer->Observe(\"(DataSet.ToObjectArray: skipping query because cache exists) \" . $this->_sql, OBSERVE_DEBUG);\n            if (! $asSimpleObject) {\n                foreach ($arr as $obj) {\n                    $obj->Refresh($this->_phreezer);\n                }\n            }\n        } else {\n            // there is nothing in the cache so we have to reload it\n\n            $this->LockCache($cachekey);\n\n            $this->UnableToCache = false;\n\n            // use a fixed count array if the count is known for performance\n            $arr = $this->CountIsKnown() ? $this->GetEmptyArray($this->Count()) : array ();\n\n            $i = 0;\n            while ($object = $this->Next()) {\n                $arr [$i++] = $asSimpleObject ? $object->ToObject($options) : $object;\n            }\n\n            $this->_phreezer->SetValueCache($cachekey, $arr, $this->_cache_timeout);\n\n            $this->UnlockCache($cachekey);\n        }\n\n        return $arr;\n    }\n\n    /**\n     *\n     * @deprecated Use GetLabelArray instead\n     */\n    function ToLabelArray($val_prop, $label_prop)\n    {\n        return $this->GetLabelArray($val_prop, $label_prop);\n    }\n\n    /**\n     * Returns an empty array structure, determining which is appropriate\n     * based on the system capabilities and whether a count is known.\n     * If the count parameter is provided then the returned array may be\n     * a fixed-size array (depending on php version)\n     *\n     * @param\n     *          int count (if known)\n     * @return Array or SplFixedArray\n     */\n    private function GetEmptyArray($count = 0)\n    {\n        return ($count && class_exists('SplFixedArray')) ? new SplFixedArray($count) : array ();\n    }\n\n    /**\n     * Returns the entire collection as an associative array that can be easily used\n     * for Smarty dropdowns\n     *\n     * @access public\n     * @param string $val_prop\n     *          the object property to be used for the dropdown value\n     * @param string $label_prop\n     *          the object property to be used for the dropdown label\n     * @return array\n     */\n    function GetLabelArray($val_prop, $label_prop)\n    {\n        // check the cache\n        // $cachekey = md5($this->_sql . \" VAL=\".$val_prop.\" LABEL=\" . $label_prop);\n        $cachekey = $this->_sql . \" VAL=\" . $val_prop . \" LABEL=\" . $label_prop;\n\n        $arr = $this->GetDelayedCache($cachekey);\n\n        // if no cache, go to the db\n        if ($arr != null) {\n            $this->_phreezer->Observe(\"(DataSet.GetLabelArray: skipping query because cache exists) \" . $this->_sql, OBSERVE_QUERY);\n        } else {\n            $this->LockCache($cachekey);\n\n            $arr = array ();\n            $this->UnableToCache = false;\n\n            while ($object = $this->Next()) {\n                $arr [$object->$val_prop] = $object->$label_prop;\n            }\n\n            $this->_phreezer->SetValueCache($cachekey, $arr, $this->_cache_timeout);\n\n            $this->UnlockCache($cachekey);\n        }\n\n        return $arr;\n    }\n\n    /**\n     * Release the resources held by this DataSet\n     *\n     * @access public\n     */\n    function Clear()\n    {\n        $this->_phreezer->DataAdapter->Release($this->_rs);\n    }\n\n    /**\n     * Returns a DataPage object suitable for binding to the smarty PageView plugin.\n     * If $countrecords is true then the total number of records will be eagerly fetched\n     * using a count query. This is necessary in order to calculate the total number of\n     * results and total number of pages. If you do not care about pagination and simply\n     * want to limit the results, then this can be set to false to supress the count\n     * query. However, the pagination settings will not be correct and the total number\n     * of rows will be -1\n     *\n     * @access public\n     * @param int $pagenum\n     *          which page of the results to view\n     * @param int $pagesize\n     *          the size of the page (or zero to disable paging).\n     * @param bool $countrecords\n     *          will eagerly fetch the total number of records with a count query\n     * @return DataPage\n     */\n    function GetDataPage($pagenum, $pagesize, $countrecords = true)\n    {\n        // check the cache\n        // $cachekey = md5($this->_sql . \" PAGE=\".$pagenum.\" SIZE=\" . $pagesize);\n        $cachekey = $this->_sql . \" PAGE=\" . $pagenum . \" SIZE=\" . $pagesize . \" COUNT=\" . ($countrecords ? '1' : '0');\n\n        $page = $this->GetDelayedCache($cachekey);\n\n        // if no cache, go to the db\n        if ($page != null) {\n            $this->_phreezer->Observe(\"(DataSet.GetDataPage: skipping query because cache exists) \" . $this->_sql, OBSERVE_QUERY);\n\n            foreach ($page->Rows as $obj) {\n                $obj->Refresh($this->_phreezer);\n            }\n        } else {\n            $this->LockCache($cachekey);\n\n            $this->UnableToCache = false;\n\n            $page = new DataPage();\n            $page->ObjectName = $this->_objectclass;\n            $page->ObjectInstance = new $this->_objectclass($this->_phreezer);\n            $page->PageSize = $pagesize;\n            $page->CurrentPage = $pagenum;\n\n            if ($countrecords) {\n                $page->TotalResults = $this->Count();\n\n                // first check if we have less than or exactly the same number of\n                // results as the pagesize. if so, don't bother doing the math.\n                // we know we just have one page\n                if ($page->TotalPages > 0 && $page->TotalPages <= $page->PageSize) {\n                    $page->TotalPages = 1;\n                } elseif ($pagesize == 0) {\n                    // we don't want paging to occur in this case\n                    $page->TotalPages = 1;\n                } else {\n                    // we have more than one page. we always need to round up\n                    // here because 5.1 pages means we are spilling out into\n                    // a 6th page. (this will also handle zero results properly)\n                    $page->TotalPages = ceil($page->TotalResults / $pagesize);\n                }\n            } else {\n                $page->TotalResults = $pagesize; // this will get adjusted after we run the query\n                $page->TotalPages = 1;\n            }\n\n            // now enumerate through the rows in the page that we want.\n            // decrement the requested pagenum here so that we will be\n            // using a zero-based array - which saves us from having to\n            // decrement on every iteration\n            $pagenum--;\n\n            $start = $pagesize * $pagenum;\n\n            // @TODO the limit statement should come from the DataAdapter\n            // ~~~ more efficient method where we limit the data queried ~~~\n            // since we are doing paging, we want to get only the records that we\n            // want from the database, so we wrap the original query with a\n            // limit query.\n            // $sql = \"select * from (\" . $this->_sql . \") page limit $start,$pagesize\";\n            $sql = $this->_sql . ($pagesize == 0 ? \"\" : \" limit $start,$pagesize\");\n            $this->_rs = $this->_phreezer->DataAdapter->Select($sql);\n\n            // if we know the number of rows we have, then use SplFixedArray for performance\n            $page->Rows = ($page->TotalPages > $page->CurrentPage) ? $this->GetEmptyArray($pagesize) : array ();\n\n            // transfer all of the results into the page object\n            $i = 0;\n            while ($obj = $this->Next()) {\n                $page->Rows [$i++] = $obj;\n            }\n\n            if (! $countrecords) {\n                // we don't know the total count so just set it to the total number of rows in this page\n                $page->TotalResults = $i;\n            }\n\n            $this->_phreezer->SetValueCache($cachekey, $page, $this->_cache_timeout);\n\n            $this->Clear();\n\n            $this->UnlockCache($cachekey);\n        }\n\n        return $page;\n    }\n\n    /**\n     *\n     * @param string $cachekey\n     */\n    private function GetDelayedCache($cachekey)\n    {\n        // if no cache then don't return anything\n        if ($this->_cache_timeout == 0) {\n            return null;\n        }\n\n        $obj = $this->_phreezer->GetValueCache($cachekey);\n\n        // no cache, so try three times with a delay to prevent a cache stampede\n        $counter = 1;\n        while ($counter < 4 && $obj == null && $this->IsLocked($cachekey)) {\n            $this->_phreezer->Observe(\"(DataSet.GetDelayedCache: flood prevention. delayed attempt \" . $counter . \" of 3...) \" . $cachekey, OBSERVE_DEBUG);\n            usleep(50000); // 5/100th of a second\n            $obj = $this->_phreezer->GetValueCache($cachekey);\n            $counter++;\n        }\n\n        return $obj;\n    }\n\n    /**\n     *\n     * @param\n     *          $cachekey\n     */\n    private function IsLocked($cachekey)\n    {\n        return $this->_phreezer->LockFilePath && file_exists($this->_phreezer->LockFilePath . md5($cachekey) . \".lock\");\n    }\n\n    /**\n     *\n     * @param\n     *          $cachekey\n     */\n    private function LockCache($cachekey)\n    {\n        if ($this->_phreezer->LockFilePath) {\n            touch($this->_phreezer->LockFilePath . md5($cachekey) . \".lock\");\n        }\n    }\n\n    /**\n     *\n     * @param\n     *          $cachekey\n     */\n    private function UnlockCache($cachekey)\n    {\n        if ($this->_phreezer->LockFilePath) {\n            $lockfile = $this->_phreezer->LockFilePath . md5($cachekey) . \".lock\";\n            if (file_exists($lockfile)) {\n                @unlink($lockfile);\n            }\n        }\n    }\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * Phreezable Class\n *\n * Abstract base class for object that are persistable by Phreeze\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2005 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.3\n */\nabstract class Phreezable implements Serializable\n{\n    private $_cache = array ();\n    protected $_phreezer;\n    protected $_val_errors = array ();\n    protected $_base_validation_complete = false;\n    private $_isLoaded;\n    private $_isPartiallyLoaded;\n    private $_cacheLevel = 0;\n    private $_noCache = false;\n\n    /** @var these properties will never be cached */\n    private static $NoCacheProperties = array (\n            \"_cache\",\n            \"_phreezer\",\n            \"_val_errors\",\n            \"_base_validation_complete\"\n    );\n\n    /** @var cache of public properties for each type for improved performance when enumerating */\n    private static $PublicPropCache = array ();\n\n    /**\n     * Returns true if the current object has been loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isLoaded = $value;\n        }\n\n        return $this->_isLoaded;\n    }\n\n    /**\n     * Returns true if the current object has been partially loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsPartiallyLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isPartiallyLoaded = $value;\n        }\n\n        return $this->_isPartiallyLoaded;\n    }\n\n    /**\n     * Returns 0 if this was loaded from the DB, 1 if from 1st level cache and 2 if 2nd level cache\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function CacheLevel($value = null)\n    {\n        if ($value != null) {\n            $this->_cacheLevel = $value;\n        }\n\n        return $this->_cacheLevel;\n    }\n\n    /**\n     * Returns true if the current object should never be cached\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function NoCache($value = null)\n    {\n        if ($value != null) {\n            $this->_noCache = $value;\n        }\n\n        return $this->_noCache;\n    }\n\n    /**\n     * Returns an array with all public properties, excluding any internal\n     * properties used by the Phreeze framework.\n     * This is cached for performance\n     * when enumerating through large numbers of the same class\n     *\n     * @return array\n     */\n    public function GetPublicProperties()\n    {\n        $className = get_class($this);\n\n        if (! array_key_exists($className, self::$PublicPropCache)) {\n            $props = array ();\n            $ro = new ReflectionObject($this);\n\n            foreach ($ro->getProperties() as $rp) {\n                $propname = $rp->getName();\n\n                if (! in_array($propname, self::$NoCacheProperties)) {\n                    if (! ($rp->isPrivate() || $rp->isStatic())) {\n                        $props [] = $propname;\n                    }\n                }\n            }\n\n            self::$PublicPropCache [$className] = $props;\n        }\n\n        return self::$PublicPropCache [$className];\n    }\n\n    /**\n     * When serializing, make sure that we ommit certain properties that\n     * should never be cached or serialized.\n     */\n    function serialize()\n    {\n        $propvals = array ();\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->getName();\n\n            if (! in_array($propname, self::$NoCacheProperties)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $propvals [$propname] = $rp->getValue($this);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $propvals [$propname] = $rp->getValue($this);\n                }\n            }\n        }\n\n        return serialize($propvals);\n    }\n\n    /**\n     *\n     * @deprecated use ToObject\n     */\n    function GetObject($props = null, $camelCase = false)\n    {\n        return $this->ToObject(array (\n                'props' => $props,\n                'camelCase' => $camelCase\n        ));\n    }\n\n    /**\n     * Return an object with a limited number of properties from this Phreezable object.\n     * This can be used if not all properties are necessary, for example rendering as JSON\n     *\n     * This can be overridden per class for custom JSON output. The overridden method may accept\n     * additional option parameters that are not supported by the base Phreezable class\n     *\n     * @param\n     *          array assoc array of options. This is passed through from Controller->RenderJSON\n     *          props (array) array of props to return (if null then use all public props)\n     *          omit (array) array of props to omit\n     *          camelCase (bool) if true then first letter of each property is made lowercase\n     * @return stdClass\n     */\n    function ToObject($options = null)\n    {\n        if ($options === null) {\n            $options = array ();\n        }\n\n        $props = array_key_exists('props', $options) ? $options ['props'] : $this->GetPublicProperties();\n        $omit = array_key_exists('omit', $options) ? $options ['omit'] : array ();\n        $camelCase = array_key_exists('camelCase', $options) ? $options ['camelCase'] : false;\n\n        $obj = new stdClass();\n\n        foreach ($props as $prop) {\n            if (! in_array($prop, $omit)) {\n                $newProp = ($camelCase) ? lcfirst($prop) : $prop;\n                $obj->$newProp = $this->$prop;\n            }\n        }\n\n        return $obj;\n    }\n\n    /**\n     * Reload the object when it awakes from serialization\n     *\n     * @param\n     *          $data\n     */\n    function unserialize($data)\n    {\n        $propvals = unserialize($data);\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->name;\n            if (array_key_exists($propname, $propvals)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $rp->setValue($this, $propvals [$propname]);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $rp->setValue($this, $propvals [$propname]);\n                }\n            }\n        }\n    }\n\n    /**\n     * constructor\n     *\n     * @access public\n     * @param Phreezer $phreezer\n     * @param Array $row\n     */\n    final function __construct(Phreezer $phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n        $this->_cache = array ();\n\n        if ($row) {\n            $this->Init();\n            $this->Load($row);\n        } else {\n            $this->LoadDefaults();\n            $this->Init();\n        }\n    }\n\n    /**\n     * Init is called after contruction.\n     * When loading, Init is called prior to Load().\n     * When creating a blank object, Init is called immediately after LoadDefaults()\n     *\n     * @access public\n     */\n    public function Init()\n    {\n    }\n\n    /**\n     * LoadDefaults is called during construction if this object is not instantiated with\n     * a DB row.\n     * The default values as specified in the fieldmap are loaded\n     *\n     * @access public\n     */\n    public function LoadDefaults()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n\n        foreach ($fms as $fm) {\n            $prop = $fm->PropertyName;\n            $this->$prop = $fm->DefaultValue;\n        }\n    }\n\n    /**\n     * LoadFromObject allows this class to be populated from another class, so long as\n     * the properties are compatible.\n     * This is useful when using reporters so that you\n     * can easily convert them to phreezable objects. Be sure to check that IsLoaded\n     * is true before attempting to save this object.\n     *\n     * @access public\n     * @param $src the\n     *          object to populate from, which must contain compatible properties\n     */\n    public function LoadFromObject($src)\n    {\n        $this->IsLoaded(true);\n        $src_cls = get_class($src);\n\n        foreach (get_object_vars($this) as $key => $val) {\n            if (substr($key, 0, 1) != \"_\") {\n                if (property_exists($src_cls, $key)) {\n                    $this->$key = $src->$key;\n                    $this->IsPartiallyLoaded(true);\n                } else {\n                    $this->IsLoaded(false);\n                }\n            }\n        }\n\n        $this->OnLoad();\n    }\n\n    /**\n     * Validate returns true if the properties all contain valid values.\n     * If not,\n     * use GetValidationErrors to see which fields have invalid values.\n     *\n     * @access public\n     */\n    public function Validate()\n    {\n        // force re-validation\n        $this->ResetValidationErrors();\n\n        $is_valid = (! $this->HasValidationErrors());\n\n        // if validation fails, remove this object from the cache otherwise invalid values can\n        // hang around and cause troubles.\n        if (! $is_valid) {\n            $this->_phreezer->DeleteCache(get_class($this), $this->GetPrimaryKeyValue());\n        }\n\n        return $is_valid;\n    }\n\n    /**\n     * Add a validation error to the error array\n     *\n     * @param\n     *          string property name\n     * @param\n     *          string error message\n     */\n    protected function AddValidationError($prop, $msg)\n    {\n        $this->_val_errors [$prop] = $msg;\n    }\n\n    /**\n     * Returns true if this object has validation errors\n     *\n     * @return bool\n     */\n    protected function HasValidationErrors()\n    {\n        $this->_DoBaseValidation();\n        return count($this->_val_errors) > 0;\n    }\n\n    /**\n     * Returns the error array - containing an array of fields with invalid values.\n     *\n     * @access public\n     * @return array\n     */\n    public function GetValidationErrors()\n    {\n        $this->_DoBaseValidation();\n        return $this->_val_errors;\n    }\n\n    /**\n     * Clears all previous validation errors\n     */\n    protected function ResetValidationErrors()\n    {\n        $this->_val_errors = array ();\n        $this->_base_validation_complete = false;\n    }\n\n    /**\n     * populates the _val_errors array w/ phreezer\n     *\n     * @access private\n     */\n    private function _DoBaseValidation()\n    {\n        $lenfunction = $this->_phreezer->DataAdapter->ConnectionSetting->Multibyte ? 'mb_strlen' : 'strlen';\n\n        if (! $this->_base_validation_complete) {\n            $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n\n            foreach ($fms as $fm) {\n                $prop = $fm->PropertyName;\n\n                if ($fm->FieldType == FM_TYPE_DECIMAL && is_numeric($fm->FieldSize)) {\n                    // decimal validation needs to be treated differently than whole numbers\n\n                    $values = explode('.', (string) $this->$prop, 2);\n                    $right = count($values) > 1 ? strlen((string) $values [1]) : 0;\n                    $left = strlen((string) $values [0]);\n\n                    $limits = explode('.', (string) $fm->FieldSize, 2);\n                    $limitRight = count($limits) > 1 ? (int) $limits [1] : 0;\n                    $limitLeft = (int) $limits [0] - $limitRight;\n\n                    if ($left > $limitLeft || $right > $limitRight) {\n                        $this->AddValidationError($prop, \"$prop exceeds the maximum length of \" . $fm->FieldSize . \"\");\n                    }\n                } elseif (is_numeric($fm->FieldSize) && ($lenfunction($this->$prop) - 1 > $fm->FieldSize)) {\n                    $this->AddValidationError($prop, \"$prop exceeds the maximum length of \" . $fm->FieldSize . \"\");\n                }\n\n                if ($this->$prop == \"\" && ($fm->DefaultValue || $fm->IsAutoInsert)) {\n                    // these fields are auto-populated so we don't need to validate them unless\n                    // a specific value was provided\n                } else {\n                    switch ($fm->FieldType) {\n                        case FM_TYPE_INT:\n                        case FM_TYPE_SMALLINT:\n                        case FM_TYPE_TINYINT:\n                        case FM_TYPE_MEDIUMINT:\n                        case FM_TYPE_BIGINT:\n                        case FM_TYPE_DECIMAL:\n                            if (! is_numeric($this->$prop)) {\n                                $this->AddValidationError($prop, \"$prop is not a valid number\");\n                            }\n                            break;\n                        case FM_TYPE_DATE:\n                        case FM_TYPE_DATETIME:\n                            if (strtotime(($this->$prop ?? '')) === '') {\n                                $this->AddValidationError($prop, \"$prop is not a valid date/time value.\");\n                            }\n                            break;\n                        case FM_TYPE_ENUM:\n                            if (! in_array($this->$prop, $fm->GetEnumValues())) {\n                                $this->AddValidationError($prop, \"$prop is not valid value. Allowed values: \" . implode(', ', $fm->GetEnumValues()));\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        // print_r($this->_val_errors);\n\n        $this->_base_validation_complete = true;\n    }\n\n    /**\n     * This static function can be overridden to populate this object with\n     * results of a custom query\n     *\n     * @access public\n     * @param Criteria $criteria\n     * @return string or null\n     */\n    public static function GetCustomQuery($criteria)\n    {\n        return null;\n    }\n\n    /**\n     * Refresh the object in the event that it has been saved to the session or serialized\n     *\n     * @access public\n     * @param Phreezer $phreezer\n     * @param Array $row\n     */\n    final function Refresh(&$phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n\n        // also refresh any children in the cache in case they are accessed\n        foreach ($this->_cache as $child) {\n            if (in_array(\"Phreezable\", class_parents($child))) {\n                $child->Refresh($phreezer, $row);\n            }\n        }\n\n        if ($row) {\n            $this->Load($row);\n        }\n\n        $this->OnRefresh();\n    }\n\n    /**\n     * Serialized string representation of this object.\n     * For sorting\n     * purposes it is recommended to override this method\n     */\n    function ToString()\n    {\n        return serialize($this);\n    }\n\n    /**\n     * Returns the name of the primary key property.\n     * TODO: does not support multiple primary keys.\n     *\n     * @access public\n     * @return string\n     */\n    function GetPrimaryKeyName()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        foreach ($fms as $fm) {\n            if ($fm->IsPrimaryKey) {\n                return $fm->PropertyName;\n            }\n        }\n\n        /*\n         * print \"<pre>\";\n         * $this->Data = \"\";\n         * $this->_phreezer = null;\n         * $this->_cache = null;\n         * print_r($this);\n         *\n         * print_r($fms);\n         * die();\n         */\n\n        throw new Exception(\"No Primary Key found for \" . get_class($this));\n    }\n\n    /**\n     * Returns the value of the primary key property.\n     * TODO: does not support multiple primary keys.\n     *\n     * @access public\n     * @return string\n     */\n    function GetPrimaryKeyValue()\n    {\n        $prop = $this->GetPrimaryKeyName();\n        return $this->$prop;\n    }\n\n    /**\n     * Returns this object as an associative array with properties as keys and\n     * values as values\n     *\n     * @access public\n     * @return array\n     */\n    function GetArray()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        $cols = array ();\n\n        foreach ($fms as $fm) {\n            $prop = $fm->PropertyName;\n            $cols [$fm->ColumnName] = $this->$prop;\n        }\n\n        return $cols;\n    }\n\n    /**\n     * Persist this object to the data store\n     *\n     * @access public\n     * @param bool $force_insert\n     *          (default = false)\n     * @return int auto_increment or number of records affected\n     */\n    function Save($force_insert = false)\n    {\n        return $this->_phreezer->Save($this, $force_insert);\n    }\n\n    /**\n     * Delete this object from the data store\n     *\n     * @access public\n     * @return int number of records affected\n     */\n    function Delete()\n    {\n        return $this->_phreezer->Delete($this);\n    }\n\n    /**\n     * Loads the object with data given in the row array.\n     *\n     * @access public\n     * @param Array $row\n     */\n    function Load(&$row)\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        $this->_phreezer->Observe(\"Loading \" . get_class($this), OBSERVE_DEBUG);\n\n        $this->IsLoaded(true); // assume true until fail occurs\n        $this->IsPartiallyLoaded(false); // at least we tried\n\n        // in order to prevent collisions on fields, QueryBuilder appends __tablename__rand to the\n                                         // sql statement. We need to strip that out so we can match it up to the property names\n        $rowlocal = array ();\n        foreach ($row as $key => $val) {\n            $info = explode(\"___\", $key);\n\n            // we prefer to use tablename.colname if we have it, but if not\n            // just use the colname\n            $newkey = isset($info [1]) ? ($info [1] . \".\" . $info [0]) : $info [0];\n            if (isset($rowlocal [$newkey])) {\n                throw new Exception(\"The column `$newkey` was selected twice in the same query, causing a data collision\");\n            }\n\n            $rowlocal [$newkey] = $val;\n        }\n\n        foreach ($fms as $fm) {\n            if (array_key_exists($fm->TableName . \".\" . $fm->ColumnName, $rowlocal)) {\n                // first try to locate the field by tablename.colname\n                $prop = $fm->PropertyName;\n                $this->$prop = $rowlocal [$fm->TableName . \".\" . $fm->ColumnName];\n            } elseif (array_key_exists($fm->ColumnName, $rowlocal)) {\n                // if we can't locate the field by tablename.colname, then just look for colname\n                $prop = $fm->PropertyName;\n                $this->$prop = $rowlocal [$fm->ColumnName];\n            } else {\n                // there is a required column missing from this $row array - mark as partially loaded\n                $this->_phreezer->Observe(\"Missing column '\" . $fm->ColumnName . \"' while loading \" . get_class($this), OBSERVE_WARN);\n                $this->IsLoaded(false);\n                $this->IsPartiallyLoaded(true);\n            }\n        }\n\n        // now look for any eagerly loaded children - their fields should be available in this query\n        $kms = $this->_phreezer->GetKeyMaps(get_class($this));\n\n        foreach ($kms as $km) {\n            if ($km->LoadType == KM_LOAD_EAGER || $km->LoadType == KM_LOAD_INNER) {\n                // load the child object that was obtained eagerly and cache so we\n                // won't ever grab the same object twice in one page load\n                $this->_phreezer->IncludeModel($km->ForeignObject);\n                $foclass = $km->ForeignObject;\n                $fo = new $foclass($this->_phreezer, $row);\n\n                $this->_phreezer->SetCache($foclass, $fo->GetPrimaryKeyValue(), $fo, $this->_phreezer->CacheQueryObjectLevel2);\n            }\n        }\n\n        $this->_phreezer->Observe(\"Firing \" . get_class($this) . \"->OnLoad()\", OBSERVE_DEBUG);\n        $this->OnLoad();\n    }\n\n    /**\n     * Returns a value from the local cache\n     *\n     * @access public\n     * @deprecated this is handled internally by Phreezer now\n     * @param string $key\n     * @return object\n     */\n    public function GetCache($key)\n    {\n        return (array_key_exists($key, $this->_cache) ? $this->_cache [$key] : null);\n    }\n\n    /**\n     * Sets a value from in local cache\n     *\n     * @access public\n     * @deprecated this is handled internally by Phreezer now\n     * @param string $key\n     * @param object $obj\n     */\n    public function SetCache($key, $obj)\n    {\n        $this->_cache [$key] = $obj;\n    }\n\n    /**\n     * Clears all values in the local cache\n     *\n     * @access public\n     * @deprecated this is handled internally by Phreezer now\n     */\n    public function ClearCache()\n    {\n        $this->_cache = array ();\n    }\n\n    /**\n     * Called after object is loaded, may be overridden\n     *\n     * @access protected\n     */\n    protected function OnLoad()\n    {\n    }\n\n    /**\n     * Called by Phreezer prior to saving the object, may be overridden.\n     * If this function returns any non-true value, then the save operation\n     * will be cancelled. This allows you to perform custom insert/update queries\n     * if necessary\n     *\n     * @access protected\n     * @param boolean $is_insert\n     *          true if Phreezer considers this a new record\n     * @return boolean\n     */\n    public function OnSave($is_insert)\n    {\n        return true;\n    }\n\n    /**\n     * Called by Phreezer after object is updated, may be overridden\n     *\n     * @access public\n     */\n    public function OnUpdate()\n    {\n    }\n\n    /**\n     * Called by Phreezer after object is inserted, may be overridden\n     *\n     * @access public\n     */\n    public function OnInsert()\n    {\n    }\n\n    /**\n     * Called by Phreezer after object is deleted, may be overridden\n     *\n     * @access public\n     */\n    public function OnDelete()\n    {\n    }\n\n    /**\n     * Called by Phreezer before object is deleted, may be overridden.\n     * if a true value is not returned, the delete operation will be aborted\n     *\n     * @access public\n     * @return bool\n     */\n    public function OnBeforeDelete()\n    {\n        return true;\n    }\n\n    /**\n     * Called after object is refreshed, may be overridden\n     *\n     * @access public\n     */\n    public function OnRefresh()\n    {\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @throws Exception\n     */\n    public function __get($key)\n    {\n        throw new Exception(\"Unknown property: $key\");\n    }\n\n    /**\n     * Throw an exception if an undeclared property is accessed\n     *\n     * @access public\n     * @param string $key\n     * @param string $val\n     * @throws Exception\n     */\n    public function __set($key, $val)\n    {\n        throw new Exception(\"Unknown property: $key\");\n    }\n\n    function __serialize()\n    {}\n\n    function __unserialize($data)\n    {}\n}\n", "<?php\n\n/** @package    verysimple::Phreeze */\n\n/**\n * Reporter allows creating dynamic objects that do not necessarily reflect\n * the structure of the datastore table.\n * This is often useful for reporting\n * or returning aggregate data\n *\n * @package verysimple::Phreeze\n * @author VerySimple Inc. <noreply@verysimple.com>\n * @copyright 1997-2005 VerySimple Inc.\n * @license http://www.gnu.org/licenses/lgpl.html LGPL\n * @version 1.0\n */\nabstract class Reporter implements Serializable\n{\n    protected $_phreezer;\n    private $_isLoaded;\n    private $_isPartiallyLoaded;\n    private $_cacheLevel = 0;\n    private $_noCache = false;\n\n    /** @var these properties will never be cached */\n    private static $NoCacheProperties = array (\n            \"_cache\",\n            \"_phreezer\",\n            \"_val_errors\",\n            \"_base_validation_complete\"\n    );\n\n    /** @var cache of public properties for each type for improved performance when enumerating */\n    private static $PublicPropCache = array ();\n\n    /**\n     * Returns true if the current object has been loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isLoaded = $value;\n        }\n\n        return $this->_isLoaded;\n    }\n\n    /**\n     * Returns true if the current object has been partially loaded\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function IsPartiallyLoaded($value = null)\n    {\n        if ($value != null) {\n            $this->_isPartiallyLoaded = $value;\n        }\n\n        return $this->_isPartiallyLoaded;\n    }\n\n    /**\n     * Returns 0 if this was loaded from the DB, 1 if from 1st level cache and 2 if 2nd level cache\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function CacheLevel($value = null)\n    {\n        if ($value != null) {\n            $this->_cacheLevel = $value;\n        }\n\n        return $this->_cacheLevel;\n    }\n\n    /**\n     * Returns true if the current object should never be cached\n     *\n     * @access public\n     * @param\n     *          bool (optional) if provided will change the value\n     * @return bool\n     */\n    public function NoCache($value = null)\n    {\n        if ($value != null) {\n            $this->_noCache = $value;\n        }\n\n        return $this->_noCache;\n    }\n\n    /**\n     * constructor\n     *\n     * @access public\n     * @param Phreezer $phreezer\n     * @param Array $row\n     */\n    final function __construct(&$phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n\n        if ($row) {\n            $this->Load($row);\n        }\n    }\n\n    /**\n     * When serializing, make sure that we ommit certain properties that\n     * should never be cached or serialized.\n     */\n    function serialize()\n    {\n        $propvals = array ();\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->getName();\n\n            if (! in_array($propname, self::$NoCacheProperties)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $propvals [$propname] = $rp->getValue($this);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $propvals [$propname] = $rp->getValue($this);\n                }\n            }\n        }\n\n        return serialize($propvals);\n    }\n\n    /**\n     * Reload the object when it awakes from serialization\n     *\n     * @param\n     *          $data\n     */\n    function unserialize($data)\n    {\n        $propvals = unserialize($data);\n\n        $ro = new ReflectionObject($this);\n\n        foreach ($ro->getProperties() as $rp) {\n            $propname = $rp->name;\n            if (array_key_exists($propname, $propvals)) {\n                if (method_exists($rp, \"setAccessible\")) {\n                    $rp->setAccessible(true);\n                    $rp->setValue($this, $propvals [$propname]);\n                } elseif (! $rp->isPrivate()) {\n                    // if < php 5.3 we can't serialize private vars\n                    $rp->setValue($this, $propvals [$propname]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns an array with all public properties, excluding any internal\n     * properties used by the Phreeze framework.\n     * This is cached for performance\n     * when enumerating through large numbers of the same class\n     *\n     * @return array\n     */\n    public function GetPublicProperties()\n    {\n        $className = get_class($this);\n\n        if (! array_key_exists($className, self::$PublicPropCache)) {\n            $props = array ();\n            $ro = new ReflectionObject($this);\n\n            foreach ($ro->getProperties() as $rp) {\n                $propname = $rp->getName();\n\n                if (! in_array($propname, self::$NoCacheProperties)) {\n                    if (! ($rp->isPrivate() || $rp->isStatic())) {\n                        $props [] = $propname;\n                    }\n                }\n            }\n\n            self::$PublicPropCache [$className] = $props;\n        }\n\n        return self::$PublicPropCache [$className];\n    }\n\n    /**\n     * Return an object with a limited number of properties from this Phreezable object.\n     * This can be used if not all properties are necessary, for example rendering as JSON\n     *\n     * This can be overridden per class for custom JSON output. the overridden method may accept\n     * additional option parameters that are not supported by the base Phreezable class\n     *\n     * @param\n     *          array assoc array of options. This is passed through from Controller->RenderJSON\n     *          props (array) array of props to return (if null then use all public props)\n     *          omit (array) array of props to omit\n     *          camelCase (bool) if true then first letter of each property is made lowercase\n     * @return stdClass\n     */\n    function ToObject($options = null)\n    {\n        if ($options === null) {\n            $options = array ();\n        }\n\n        $props = array_key_exists('props', $options) ? $options ['props'] : $this->GetPublicProperties();\n        $omit = array_key_exists('omit', $options) ? $options ['omit'] : array ();\n        $camelCase = array_key_exists('camelCase', $options) ? $options ['camelCase'] : false;\n\n        $obj = new stdClass();\n\n        foreach ($props as $prop) {\n            if (! in_array($prop, $omit)) {\n                $newProp = ($camelCase) ? lcfirst($prop) : $prop;\n                $obj->$newProp = $this->$prop;\n            }\n        }\n\n        return $obj;\n    }\n\n    /**\n     * Restores the object's connection to the datastore, for example after serialization\n     *\n     * @param\n     *          $phreezer\n     * @param\n     *          $row\n     */\n    function Refresh(Phreezer $phreezer, $row = null)\n    {\n        $this->_phreezer = $phreezer;\n\n        if ($row) {\n            $this->Load($row);\n        }\n\n        $this->OnRefresh();\n    }\n\n    /**\n     * Called after object is refreshed, may be overridden\n     *\n     * @access public\n     */\n    public function OnRefresh()\n    {\n    }\n\n    /**\n     * This static function can be overridden to populate this object with\n     * results of a custom query\n     *\n     * @access public\n     * @param Criteria $criteria\n     * @return string\n     */\n    static function GetCustomQuery($criteria)\n    {\n        return \"\";\n    }\n\n    /**\n     * This may be overridden to return SQL used for counting the number of rows\n     * in a result.\n     * This method is not required, however it will allow\n     * Phreeze to use an efficient query for counting results. This query\n     * must return the correct number of results that GetCustomQuery would,\n     * given the same criteria\n     *\n     * The resultant SQL must return only one row with one column named 'counter'\n     *\n     * @access public\n     * @param Criteria $criteria\n     * @return string\n     */\n    static function GetCustomCountQuery($criteria)\n    {\n        return \"\";\n    }\n\n    /**\n     * Returns this object as an associative array with properties as keys and\n     * values as values\n     *\n     * @access public\n     * @return array\n     */\n    function GetArray()\n    {\n        $fms = $this->_phreezer->GetFieldMaps(get_class($this));\n        $cols = array ();\n\n        foreach ($fms as $fm) {\n            $prop = $fm->PropertyName;\n            $cols [$fm->ColumnName] = $this->$prop;\n        }\n\n        return $cols;\n    }\n\n    /**\n     * Loads the object with data given in the row array.\n     *\n     * @access public\n     * @param Array $row\n     */\n    function Load(&$row)\n    {\n        $this->_phreezer->Observe(\"Loading \" . get_class($this), OBSERVE_DEBUG);\n\n        foreach (array_keys($row) as $prop) {\n            $this->$prop = $row [$prop];\n        }\n\n        $this->OnLoad();\n    }\n\n    /**\n     * Called after object is loaded, may be overridden\n     *\n     * @access protected\n     */\n    protected function OnLoad()\n    {\n    }\n\n    function __serialize()\n    {}\n\n    function __unserialize($data)\n    {}\n}\n", "<?php\n\n/**\n * PortalPatientController.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2022 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n/**\n * import supporting libraries\n */\nrequire_once(\"AppBasePortalController.php\");\nrequire_once(\"Model/Patient.php\");\n\n/**\n * PatientController is the controller class for the Patient object.\n * The\n * controller is responsible for processing input from the user, reading/updating\n * the model as necessary and displaying the appropriate view.\n *\n * @package Patient Portal::Controller\n * @author ClassBuilder\n * @version 1.0\n */\nclass PortalPatientController extends AppBasePortalController\n{\n    /**\n     * Override here for any controller-specific functionality\n     *\n     * @inheritdocs\n     */\n    protected function Init()\n    {\n        parent::Init();\n    }\n\n    /**\n     * Displays a list view of Patient objects\n     */\n    public function ListView()\n    {\n        $rid = $pid = $user = $encounter = 0;\n        if (isset($_GET['id'])) {\n            $rid = (int) $_GET['id'];\n        }\n\n        if (isset($_GET['pid'])) {\n            $pid = (int) $_GET['pid'];\n        }\n\n        if (isset($_GET['user'])) {\n            $user = $_GET['user'];\n        }\n\n        if (isset($_GET['enc'])) {\n            $encounter = $_GET['enc'];\n        }\n\n        $this->Assign('recid', $rid);\n        $this->Assign('cpid', $pid);\n        $this->Assign('cuser', $user);\n        $this->Assign('encounter', $encounter);\n        $this->Render();\n    }\n\n    /**\n     * API Method queries for Patient records and render as JSON\n     */\n    public function Query()\n    {\n        try {\n            $criteria = new PatientCriteria();\n            $recnum = RequestUtil::Get('patientId');\n            $criteria->Pid_Equals = $recnum;\n\n            $output = new stdClass();\n\n            // if a sort order was specified then specify in the criteria\n            $output->orderBy = RequestUtil::Get('orderBy');\n            $output->orderDesc = RequestUtil::Get('orderDesc') != '';\n            if ($output->orderBy) {\n                $criteria->SetOrder($output->orderBy, $output->orderDesc);\n            }\n\n            $page = RequestUtil::Get('page');\n\n            // return all results\n            $patientdata = $this->Phreezer->Query('PatientReporter', $criteria);\n            $output->rows = $patientdata->ToObjectArray(true, $this->SimpleObjectParams());\n            $output->totalResults = count($output->rows);\n            $output->totalPages = 1;\n            $output->pageSize = $output->totalResults;\n            $output->currentPage = 1;\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method retrieves a single Patient record and render as JSON\n     */\n    public function Read()\n    {\n        try {\n            // not required here but, represents patient rec id, not audit id.\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $ppid = RequestUtil::Get('patientId');\n            $appsql = new ApplicationTable();\n            $edata = $appsql->getPortalAudit($ppid, 'review');\n            $changed = !empty($edata['table_args']) ? unserialize($edata['table_args'], ['allowed_classes' => false]) : [];\n            $newv = array();\n            foreach ($changed as $key => $val) {\n                $newv[lcfirst(ucwords(preg_replace_callback(\"/(\\_(.))/\", function ($match) {\n                    return strtoupper($match[2]);\n                }, strtolower($key))))] = $val;\n            }\n\n            $this->RenderJSON($newv, $this->JSONPCallback(), false, $this->SimpleObjectParams());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n\n    /**\n     * API Method updates an existing Patient record and render response as JSON\n     */\n    public function Update()\n    {\n        try {\n            $json = json_decode(RequestUtil::GetBody());\n\n            if (! $json) {\n                throw new Exception('The request body does not contain valid JSON');\n            }\n\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $patient = $this->Phreezer->Get('Patient', $pk);\n\n            $patient->Title = $this->SafeGetVal($json, 'title', $patient->Title);\n            $patient->Language = $this->SafeGetVal($json, 'language', $patient->Language);\n            //$patient->Financial = $this->SafeGetVal($json, 'financial', $patient->Financial);\n            $patient->Fname = $this->SafeGetVal($json, 'fname', $patient->Fname);\n            $patient->Lname = $this->SafeGetVal($json, 'lname', $patient->Lname);\n            $patient->Mname = $this->SafeGetVal($json, 'mname', $patient->Mname);\n            $patient->Dob = date('Y-m-d', strtotime($this->SafeGetVal($json, 'dob', $patient->Dob)));\n            $patient->Street = $this->SafeGetVal($json, 'street', $patient->Street);\n            $patient->PostalCode = $this->SafeGetVal($json, 'postalCode', $patient->PostalCode);\n            $patient->City = $this->SafeGetVal($json, 'city', $patient->City);\n            $patient->State = $this->SafeGetVal($json, 'state', $patient->State);\n            $patient->CountryCode = $this->SafeGetVal($json, 'countryCode', $patient->CountryCode);\n            $patient->DriversLicense = $this->SafeGetVal($json, 'driversLicense', $patient->DriversLicense);\n            $patient->Ss = $this->SafeGetVal($json, 'ss', $patient->Ss);\n            $patient->Occupation = $this->SafeGetVal($json, 'occupation', $patient->Occupation);\n            $patient->PhoneHome = $this->SafeGetVal($json, 'phoneHome', $patient->PhoneHome);\n            $patient->PhoneBiz = $this->SafeGetVal($json, 'phoneBiz', $patient->PhoneBiz);\n            $patient->PhoneContact = $this->SafeGetVal($json, 'phoneContact', $patient->PhoneContact);\n            $patient->PhoneCell = $this->SafeGetVal($json, 'phoneCell', $patient->PhoneCell);\n            $patient->PharmacyId = $this->SafeGetVal($json, 'pharmacyId', $patient->PharmacyId);\n            $patient->Status = $this->SafeGetVal($json, 'status', $patient->Status);\n            $patient->ContactRelationship = $this->SafeGetVal($json, 'contactRelationship', $patient->ContactRelationship);\n            $patient->Date = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'date', $patient->Date)));\n            $patient->Sex = $this->SafeGetVal($json, 'sex', $patient->Sex);\n            $patient->Referrer = $this->SafeGetVal($json, 'referrer', $patient->Referrer);\n            $patient->Referrerid = $this->SafeGetVal($json, 'referrerid', $patient->Referrerid);\n            $patient->Providerid = $this->SafeGetVal($json, 'providerid', $patient->Providerid);\n            $patient->RefProviderid = $this->SafeGetVal($json, 'refProviderid', $patient->RefProviderid);\n            $patient->Email = $this->SafeGetVal($json, 'email', $patient->Email);\n            $patient->EmailDirect = $this->SafeGetVal($json, 'emailDirect', $patient->EmailDirect);\n            $patient->Ethnoracial = $this->SafeGetVal($json, 'ethnoracial', $patient->Ethnoracial);\n            $patient->Race = $this->SafeGetVal($json, 'race', $patient->Race);\n            $patient->Ethnicity = $this->SafeGetVal($json, 'ethnicity', $patient->Ethnicity);\n            $patient->Religion = $this->SafeGetVal($json, 'religion', $patient->Religion);\n            //$patient->Interpretter = $this->SafeGetVal($json, 'interpretter', $patient->Interpretter);\n            //$patient->Migrantseasonal = $this->SafeGetVal($json, 'migrantseasonal', $patient->Migrantseasonal);\n            $patient->FamilySize = $this->SafeGetVal($json, 'familySize', $patient->FamilySize);\n            /*$patient->MonthlyIncome = $this->SafeGetVal($json, 'monthlyIncome', $patient->MonthlyIncome);\n            $patient->BillingNote = $this->SafeGetVal($json, 'billingNote', $patient->BillingNote);\n            $patient->Homeless = $this->SafeGetVal($json, 'homeless', $patient->Homeless);\n            $patient->FinancialReview = date('Y-m-d H:i:s', strtotime($this->SafeGetVal($json, 'financialReview', $patient->FinancialReview)));*/\n            $patient->Pubpid = $this->SafeGetVal($json, 'pubpid', $patient->Pubpid);\n            $patient->Pid = $this->SafeGetVal($json, 'pid', $patient->Pid);\n            $patient->HipaaMail = $this->SafeGetVal($json, 'hipaaMail', $patient->HipaaMail);\n            $patient->HipaaVoice = $this->SafeGetVal($json, 'hipaaVoice', $patient->HipaaVoice);\n            $patient->HipaaNotice = $this->SafeGetVal($json, 'hipaaNotice', $patient->HipaaNotice);\n            $patient->HipaaMessage = $this->SafeGetVal($json, 'hipaaMessage', $patient->HipaaMessage);\n            $patient->HipaaAllowsms = $this->SafeGetVal($json, 'hipaaAllowsms', $patient->HipaaAllowsms);\n            $patient->HipaaAllowemail = $this->SafeGetVal($json, 'hipaaAllowemail', $patient->HipaaAllowemail);\n            /*$patient->Squad = $this->SafeGetVal($json, 'squad', $patient->Squad);\n            $patient->Fitness = $this->SafeGetVal($json, 'fitness', $patient->Fitness);\n            $patient->ReferralSource = $this->SafeGetVal($json, 'referralSource', $patient->ReferralSource);\n            $patient->Pricelevel = $this->SafeGetVal($json, 'pricelevel', $patient->Pricelevel);*/\n            if (!empty($patient->Regdate)) {\n                $patient->Regdate = date('Y-m-d', strtotime($this->SafeGetVal($json, 'regdate', $patient->Regdate)));\n            }\n            /*$patient->Contrastart = date('Y-m-d', strtotime($this->SafeGetVal($json, 'contrastart', $patient->Contrastart)));\n            $patient->CompletedAd = $this->SafeGetVal($json, 'completedAd', $patient->CompletedAd);\n            $patient->AdReviewed = date('Y-m-d', strtotime($this->SafeGetVal($json, 'adReviewed', $patient->AdReviewed)));\n            $patient->Vfc = $this->SafeGetVal($json, 'vfc', $patient->Vfc);*/\n            $patient->Mothersname = $this->SafeGetVal($json, 'mothersname', $patient->Mothersname);\n            $patient->Guardiansname = $this->SafeGetVal($json, 'guardiansname', $patient->Guardiansname);\n            $patient->AllowImmRegUse = $this->SafeGetVal($json, 'allowImmRegUse', $patient->AllowImmRegUse);\n            $patient->AllowImmInfoShare = $this->SafeGetVal($json, 'allowImmInfoShare', $patient->AllowImmInfoShare);\n            $patient->AllowHealthInfoEx = $this->SafeGetVal($json, 'allowHealthInfoEx', $patient->AllowHealthInfoEx);\n            $patient->AllowPatientPortal = $this->SafeGetVal($json, 'allowPatientPortal', $patient->AllowPatientPortal);\n            $patient->CareTeam = $this->SafeGetVal($json, 'careTeam', $patient->CareTeam);\n            $patient->County = $this->SafeGetVal($json, 'county', $patient->County);\n            //$patient->Industry = $this->SafeGetVal($json, 'industry', $patient->Industry);\n            $patient->Note = $this->SafeGetVal($json, 'note', $patient->Note);\n            $patient->Validate();\n            $errors = $patient->GetValidationErrors();\n\n            if (count($errors) > 0) {\n                $this->RenderErrorJSON('Please check the form for errors', $errors);\n            } else {\n                self::SaveAudit($patient);\n                // $patient->Save(); //active records save\n                $this->RenderJSON($patient, $this->JSONPCallback(), true, $this->SimpleObjectParams());\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n    public function SaveAudit($p)\n    {\n        $appsql = new ApplicationTable();\n        $ja = $p->GetArray();\n        $ja['note'] = $p->Note;\n        try {\n            $audit = array ();\n            // date(\"Y-m-d H:i:s\");\n            $audit['patient_id'] = $ja['pid'];\n            $audit['activity'] = \"profile\";\n            $audit['require_audit'] = \"1\";\n            $audit['pending_action'] = \"review\";\n            $audit['action_taken'] = \"\";\n            $audit['status'] = \"waiting\";\n            $audit['narrative'] = \"Patient request changes to demographics.\";\n            $audit['table_action'] = \"\";\n            $audit['table_args'] = $ja; // edited record\n            $audit['action_user'] = \"0\";\n            $audit['action_taken_time'] = \"\";\n            $audit['checksum'] = \"0\";\n\n            // returns false for new audit\n            $edata = $appsql->getPortalAudit($ja['pid'], 'review');\n            if ($edata) {\n                if (empty($edata['id'])) {\n                    throw new Exception(\"Invalid ID on Save!\");\n                }\n                $audit['date'] = $edata['date'] ?? null;\n                $appsql->portalAudit('update', $edata['id'], $audit);\n            } else {\n                $appsql->portalAudit('insert', '', $audit);\n            }\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n    /**\n     * API Method deletes an existing Patient record and render response as JSON\n     */\n    public function Delete()\n    {\n        try {\n            // TODO: if a soft delete is prefered, change this to update the deleted flag instead of hard-deleting\n\n            $pk = $this->GetRouter()->GetUrlParam('id');\n            $patient = $this->Phreezer->Get('Patient', $pk);\n\n            $patient->Delete();\n\n            $output = new stdClass();\n\n            $this->RenderJSON($output, $this->JSONPCallback());\n        } catch (Exception $ex) {\n            $this->RenderExceptionJSON($ex);\n        }\n    }\n}\n", "<?php\n\n/**\n * OnsiteActivityViewListView.tpl.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2020 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n$this->assign('title', xlt('Portal') . ' | ' . xlt('Activity'));\n$this->assign('nav', 'onsiteactivityviews');\n\nuse OpenEMR\\Common\\Acl\\AclMain;\n\nif (!AclMain::aclCheckCore('patientportal', 'portal')) {\n    die(xlt(\"Unauthorized\"));\n    exit;\n}\n\n$this->display('_FormsHeader.tpl.php');\necho \"<script>var cuser='\" . $this->cuser . \"';</script>\";\n?>\n<script>\n    $LAB.script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/app/onsiteactivityviews.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\").wait(function(){\n        $(function () {\n            actpage.init();\n        });\n        setTimeout(function(){\n            if (!actpage.isInitialized) actpage.init();\n        },1000);\n    });\n</script>\n\n<div class=\"container mt-5\">\n\n<h3>\n    <i class=\"icon-th-list\"></i><?php echo xlt('Onsite Patient Activities')?>\n    <span id=\"loader\" class=\"loader progress progress-striped active\"><span class=\"progress-bar\"></span></span>\n    <div class=\"col-sm-3 col-md-3 float-right\">\n        <form class=\"navbar-form\" role=\"search\">\n        <div class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"<?php echo xla('Search'); ?>\" name=\"srch-term\" id=\"srch-term\" />\n            <div class=\"input-group-append\">\n                <button class=\"btn btn-secondary\" type=\"submit\"><i class=\"fas fa-search\"></i></button>\n            </div>\n        </div>\n        </form>\n    </div>\n</h3>\n    <!-- underscore template for the collection -->\n    <script type=\"text/template\" id=\"onsiteActivityViewCollectionTemplate\">\n        <table class=\"collection table table-sm table-bordered table-hover\">\n        <thead>\n            <tr>\n                <th id=\"header_Date\"><?php echo xlt('Date')?><% if (actpage.orderBy == 'Date') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PatientId\"><?php echo xlt('Patient Id')?><% if (actpage.orderBy == 'PatientId') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Fname\"><?php echo xlt('First{{Name}}')?><% if (actpage.orderBy == 'Fname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Mname\"><?php echo xlt('Middle{{Name}}')?><% if (actpage.orderBy == 'Mname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Lname\"><?php echo xlt('Last{{Name}}')?><% if (actpage.orderBy == 'Lname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Narrative\"><?php echo xlt('Narrative')?><% if (actpage.orderBy == 'Narrative') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Activity\"><?php echo xlt('Activity')?><% if (actpage.orderBy == 'Activity') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_RequireAudit\"><?php echo xlt('Require Audit')?><% if (actpage.orderBy == 'RequireAudit') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PendingAction\"><?php echo xlt('Pending Action')?><% if (actpage.orderBy == 'PendingAction') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Status\"><?php echo xlt('Status')?><% if (actpage.orderBy == 'Status') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n<!-- UNCOMMENT TO SHOW ADDITIONAL COLUMNS - Leave in place for future use\n                <th id=\"header_Id\">Id<% if (actpage.orderBy == 'Id') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_ActionTaken\">Action Taken<% if (actpage.orderBy == 'ActionTaken') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_TableAction\">Table Action<% if (actpage.orderBy == 'TableAction') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_TableArgs\">Table Args<% if (actpage.orderBy == 'TableArgs') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_ActionUser\">Action User<% if (actpage.orderBy == 'ActionUser') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_ActionTakenTime\">Action Taken Time<% if (actpage.orderBy == 'ActionTakenTime') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Checksum\">Checksum<% if (actpage.orderBy == 'Checksum') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Title\">Title<% if (actpage.orderBy == 'Title') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Dob\">Dob<% if (actpage.orderBy == 'Dob') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Ss\">Ss<% if (actpage.orderBy == 'Ss') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Street\">Street<% if (actpage.orderBy == 'Street') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PostalCode\">Postal Code<% if (actpage.orderBy == 'PostalCode') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_City\">City<% if (actpage.orderBy == 'City') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_State\">State<% if (actpage.orderBy == 'State') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Referrerid\">Referrerid<% if (actpage.orderBy == 'Referrerid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Providerid\">Providerid<% if (actpage.orderBy == 'Providerid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_RefProviderid\">Ref Providerid<% if (actpage.orderBy == 'RefProviderid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Pubpid\">Pubpid<% if (actpage.orderBy == 'Pubpid') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_CareTeam\">Care Team<% if (actpage.orderBy == 'CareTeam') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Username\">Username<% if (actpage.orderBy == 'Username') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Authorized\">Authorized<% if (actpage.orderBy == 'Authorized') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Ufname\">Ufname<% if (actpage.orderBy == 'Ufname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Umname\">Umname<% if (actpage.orderBy == 'Umname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Ulname\">Ulname<% if (actpage.orderBy == 'Ulname') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Facility\">Facility<% if (actpage.orderBy == 'Facility') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Active\">Active<% if (actpage.orderBy == 'Active') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_Utitle\">Utitle<% if (actpage.orderBy == 'Utitle') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n                <th id=\"header_PhysicianType\">Physician Type<% if (actpage.orderBy == 'PhysicianType') { %> <i class='icon-arrow-<%= actpage.orderDesc ? 'up' : 'down' %>' /><% } %></th>\n-->\n            </tr>\n        </thead>\n        <tbody>\n        <% items.each(function(item) { %>\n            <tr id=\"<%= _.escape(item.get('id')) %>\">\n                <td><%if (item.get('date')) { %><%= moment(app.parseDate(item.get('date'))).format('MMM D, YYYY h:mm A') %><% } else { %>NULL<% } %></td>\n                <td><%= _.escape(item.get('patientId') || '') %></td>\n                <td><%= _.escape(item.get('fname') || '') %></td>\n                <td><%= _.escape(item.get('mname') || '') %></td>\n                <td><%= _.escape(item.get('lname') || '') %></td>\n                <td><%= _.escape(item.get('narrative') || '') %></td>\n                <td><%= _.escape(item.get('activity') || '') %></td>\n                <td><%= _.escape(item.get('requireAudit') || '') %></td>\n                <td><%= _.escape(item.get('pendingAction') || '') %></td>\n                <td><%= _.escape(item.get('status') || '') %></td>\n<!-- UNCOMMENT TO SHOW ADDITIONAL COLUMNS - Leave in place for future use\n                <td><%= _.escape(item.get('id') || '') %></td>\n                <td><%= _.escape(item.get('actionTaken') || '') %></td>\n                <td><%= _.escape(item.get('tableAction') || '') %></td>\n                <td><%= _.escape(item.get('tableArgs') || '') %></td>\n                <td><%= _.escape(item.get('actionUser') || '') %></td>\n                <td><%if (item.get('actionTakenTime')) { %><%= moment(app.parseDate(item.get('actionTakenTime'))).format('MMM D, YYYY h:mm A') %><% } else { %>NULL<% } %></td>\n                <td><%= _.escape(item.get('checksum') || '') %></td>\n                <td><%= _.escape(item.get('title') || '') %></td>\n                <td><%if (item.get('dob')) { %><%= moment(app.parseDate(item.get('dob'))).format('MMM D, YYYY') %><% } else { %>NULL<% } %></td>\n                <td><%= _.escape(item.get('ss') || '') %></td>\n                <td><%= _.escape(item.get('street') || '') %></td>\n                <td><%= _.escape(item.get('postalCode') || '') %></td>\n                <td><%= _.escape(item.get('city') || '') %></td>\n                <td><%= _.escape(item.get('state') || '') %></td>\n                <td><%= _.escape(item.get('referrerid') || '') %></td>\n                <td><%= _.escape(item.get('providerid') || '') %></td>\n                <td><%= _.escape(item.get('refProviderid') || '') %></td>\n                <td><%= _.escape(item.get('pubpid') || '') %></td>\n                <td><%= _.escape(item.get('careTeam') || '') %></td>\n                <td><%= _.escape(item.get('username') || '') %></td>\n                <td><%= _.escape(item.get('authorized') || '') %></td>\n                <td><%= _.escape(item.get('ufname') || '') %></td>\n                <td><%= _.escape(item.get('umname') || '') %></td>\n                <td><%= _.escape(item.get('ulname') || '') %></td>\n                <td><%= _.escape(item.get('facility') || '') %></td>\n                <td><%= _.escape(item.get('active') || '') %></td>\n                <td><%= _.escape(item.get('utitle') || '') %></td>\n                <td><%= _.escape(item.get('physicianType') || '') %></td>\n-->\n            </tr>\n        <% }); %>\n        </tbody>\n        </table>\n        <%=  view.getPaginationHtml(page) %>\n    </script>\n    <!-- underscore template for the model -->\n    <script type=\"text/template\" id=\"onsiteActivityViewModelTemplate\"></script>\n    <div id=\"collectionAlert\"></div>\n    <div id=\"onsiteActivityViewCollectionContainer\" class=\"collectionContainer\"></div>\n    <p id=\"returnButtonContainer\" class=\"buttonContainer\">\n        <button id=\"returnHome\" class=\"btn btn-primary\"><?php echo xlt('Home'); ?></button>\n    </p>\n</div> <!-- /container -->\n<?php\n    $this->display('_Footer.tpl.php');\n?>\n", "<?php\n\n/**\n * Patient Portal\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2016-2022 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n$this->assign('title', xlt(\"Portal Dashboard\") . \" | \" . xlt(\"Home\"));\n$this->assign('nav', 'home');\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Core\\Header;\n\nif (!AclMain::aclCheckCore('patientportal', 'portal')) {\n    die(xlt(\"Unauthorized\"));\n    exit;\n}\n\n?>\n<!DOCTYPE html>\n<!-- Language grabbed by PDF var that has the correct format !-->\n<html lang=\"<?php echo $GLOBALS['pdf_language']; ?>\">\n<head>\n    <title><?php $this->eprint($this->title); ?></title>\n    <meta name=\"description\" content=\"Provider Portal\" />\n    <meta name=\"author\" content=\"Dashboard | sjpadgett@gmail.com\" />\n\n    <?php\n    Header::setupHeader(['datetime-picker']);\n    echo \"<script>var cpid='\" . attr($this->cpid) . \"';var cuser='\" . attr($this->cuser) . \"';var webRoot='\" . $GLOBALS['web_root'] . \"';</script>\";\n    ?>\n    <link href=\"<?php echo $GLOBALS['web_root']; ?>/portal/sign/css/signer_modal.css?v=<?php echo $GLOBALS['v_js_includes']; ?>\" rel=\"stylesheet\">\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/portal/sign/assets/signature_pad.umd.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\"></script>\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/portal/sign/assets/signer_api.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\"></script>\n\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/libs/LAB.min.js\"></script>\n    <script>\n        $LAB.script(\"<?php echo $GLOBALS['assets_static_relative']; ?>/underscore/underscore-min.js\")\n        .script(\"<?php echo $GLOBALS['assets_static_relative']; ?>/moment/moment.js\")\n        .script(\"<?php echo $GLOBALS['assets_static_relative']; ?>/backbone/backbone-min.js\")\n        .script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/app.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\")\n        .script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/model.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\").wait()\n        .script(\"<?php echo $GLOBALS['web_root']; ?>/portal/patient/scripts/view.js?v=<?php echo $GLOBALS['v_js_includes']; ?>\")\n        .wait(function () {\n            $(function () {\n                console.log('*** Provider Template Load Done ***');\n            });\n        });\n    </script>\n</head>\n\n<body class=\"pt-2\">\n<div class=\"modal fade\" id=\"formdialog\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n    <div class=\"modal-dialog bg-light\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\"><?php echo xlt('About Portal Dashboard') ?></h4>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n            </div>\n            <div class=\"modal-body\">\n                <div>\n                    <span><?php echo xlt('Please see forum or wiki'); ?>\n                <a href=\"<?php echo attr('https://community.open-emr.org/'); ?>\" target=\"_blank\"><?php echo xlt(\"Visit Forum\"); ?></a>\n                    </span>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button id=\"okButton\" data-dismiss=\"modal\" class=\"btn btn-secondary\"><?php echo xlt('Close...') ?></button>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"container p-3\">\n    <div class=\"jumbotron jumbotron-fluid text-center p-1\">\n        <h3><?php echo xlt('Portal Dashboard') ?><i class=\"fa fa-user-md text-danger ml-2\" style=\"font-size: 3rem;\"></i></h3>\n        <p>\n        <button class=\"btn btn-sm btn-secondary\" data-toggle=\"modal\" data-target=\"#formdialog\"><?php echo xlt('Tell me more') ?></button>\n        </p>\n    </div>\n<div class='jumbotron jumbotron-fluid p-4'>\n    <div class=\"row\">\n        <div class=\"col\">\n            <h4><i class=\"icon-cogs\"></i><?php echo xlt('Templates') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/import_template_ui.php\"><?php echo xlt('Manage Templates') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-th\"></i><?php echo xlt('Audits') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/patient/onsiteactivityviews\"><?php echo xlt('Review Audits') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-cogs\"></i><?php echo xlt('Mail') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/messaging/messages.php\"><?php echo xlt('Secure Mail') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-cogs\"></i><?php echo xlt('Chat') ?></h4>\n            <a class=\"btn btn-success btn-sm\" href=\"<?php echo $GLOBALS['web_root'];?>/portal/messaging/secure_chat.php\"><?php echo xlt('Chat Messaging') ?></a>\n        </div>\n        <div class=\"col\">\n            <h4><i class=\"icon-signin\"></i><?php echo xlt('Signature') ?></h4>\n            <p><a data-type=\"admin-signature\" class=\"btn btn-primary btn-sm\" href=\"#openSignModal\" data-toggle=\"modal\" data-backdrop=\"true\" data-target=\"#openSignModal\">\n             <span><?php echo xlt('Signature on File') . '  '; ?></span><i class=\"fa fa-sign-in\"></i></a></p>\n        </div>\n    </div>\n</div>\n</div>\n<!-- /container -->\n<?php\n$this->display('_Footer.tpl.php');\n?>\n", "<?php\n\n/**\n * portal_patient_report.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady@sparmy.com>\n * @copyright Copyright (c) 2016-2020 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n// Will start the (patient) portal OpenEMR session/cookie.\nrequire_once(dirname(__FILE__) . \"/../../src/Common/Session/SessionUtil.php\");\nOpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\n//landing page definition -- where to go if something goes wrong\n$landingpage = \"../index.php?site=\" . urlencode($_SESSION['site_id']);\n//\n\n// kick out if patient not authenticated\nif (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n    $pid = $_SESSION['pid'];\n    $user = $_SESSION['sessionUser'];\n} else {\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n    header('Location: ' . $landingpage . '&w');\n    exit;\n}\n\n$ignoreAuth_onsite_portal = true;\nglobal $ignoreAuth_onsite_portal;\n\nrequire_once('../../interface/globals.php');\nrequire_once(\"$srcdir/lists.inc\");\nrequire_once(\"$srcdir/forms.inc\");\nrequire_once(\"$srcdir/patient.inc\");\n\nuse OpenEMR\\Core\\Header;\n\n// get various authorization levels\n$auth_notes_a  = true; //AclMain::aclCheckCore('encounters', 'notes_a');\n$auth_notes    = true; //AclMain::aclCheckCore('encounters', 'notes');\n$auth_coding_a = true; //AclMain::aclCheckCore('encounters', 'coding_a');\n$auth_coding   = true; //AclMain::aclCheckCore('encounters', 'coding');\n$auth_relaxed  = true; //AclMain::aclCheckCore('encounters', 'relaxed');\n$auth_med      = true; //AclMain::aclCheckCore('patients'  , 'med');\n$auth_demo     = true; //AclMain::aclCheckCore('patients'  , 'demo');\n\n$ignoreAuth_onsite_portal = true;\n?>\n\n<?php Header::setupAssets('textformat'); ?>\n\n<style>\n    input[type=\"checkbox\"],\n    input[type=\"radio\"] {\n        margin: 0 5px 5px;\n        line-height: normal;\n    }\n\n    /*=============================================================\n * Patient Reports\n * seen in the patient reports screens\n *============================================================*/\n    #patient_reports {\n        width: 100%;\n    }\n\n    #patient_reports .issues {\n        padding-right: 30px;\n    }\n\n    #patient_reports .issues table {\n        margin: 10px 0 10px 0;\n    }\n\n    #patient_reports .issues td {\n        padding: 2px;\n    }\n\n    #patient_reports .encounters td {\n        padding: 2px;\n    }\n\n    #patient_reports .encounter_forms {\n        margin: 5px 15px 5px 15px;\n    }\n\n    #patient_reports td {\n        vertical-align: top;\n    }\n\n    #patient_reports ul {\n        list-style: none;\n    }\n\n    /*=============================================================\n * Report - Custom\n * seen as the patient report (portal_custom_report.php)\n *============================================================*/\n    #report_custom {\n        width: 100%;\n    }\n\n    #report_custom hr {\n        border: 2px dotted #000;\n    }\n\n    #report_custom .billing {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom h1 {\n        font-size: 120%;\n        margin: 0 0 5px 0;\n        padding: 0;\n    }\n\n    #report_custom .immunizations {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .notes {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .transactions {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .communications {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .documents {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .demographics {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .insurance {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .history {\n        margin: 5px;\n        padding: 5px;\n    }\n\n    #report_custom .issue {\n        margin-left: 20px;\n    }\n\n    #report_custom .issue_type {\n        font-weight: bold;\n        padding: 5px 0 5px 0;\n    }\n\n    #report_custom .issue_diag {\n        margin: 0 20px 0 20px;\n    }\n\n    #report_custom .encounter {\n        width: 100%;\n        border-top: 2px dotted #000;\n        padding: 10px 5px 10px 5px;\n        margin-top: 10px;\n    }\n\n    #report_custom .encounter h1 {\n        font-size: 140%;\n        margin: 0;\n        padding: 0;\n    }\n\n    #report_custom .encounter_form {\n        margin: 10px;\n        padding: 10px;\n        border-top: 1px solid #808080;\n    }\n\n    #addressbook_list tr.evenrow {\n        background-color: #ddddff;\n    }\n\n    #addressbook_list tr.oddrow {\n        background-color: #ffffff;\n    }\n\n    tr.odd,\n    td.even {\n        background-color: #ffffff !important;\n    }\n</style>\n\n<script>\n\nfunction checkAll(check) {\n var f = document.forms['report_form'];\n for (var i = 0; i < f.elements.length; ++i) {\n  if (f.elements[i].type == 'checkbox') f.elements[i].checked = check;\n }\n return false;\n}\n\nfunction show_date_fun(){\n  if(document.getElementById('show_date').checked == true){\n    document.getElementById('date_div').style.display = '';\n  }else{\n    document.getElementById('date_div').style.display = 'none';\n  }\n  return;\n}\nvar mypcc = '<?php echo $GLOBALS['phone_country_code']; ?>';\n</script>\n\n<body class=\"body_top\">\n<div id=\"patient_reports\"> <!-- large outer DIV -->\n\n<?php if ($GLOBALS['activate_ccr_ccd_report']) { // show CCR/CCD reporting options ?>\n<div id=\"ccr_report\">\n\n<form name='ccr_form' id='ccr_form' method='post' action=\"../ccr/createCCR.php?portal_auth=1\">\n<span class='title'><?php echo xlt('Continuity of Care Record (CCR)'); ?></span>&nbsp;&nbsp;\n<br/>\n<span class='text'>(<?php echo xlt('Pop ups need to be enabled to see these reports'); ?>)</span>\n<br/>\n<br/>\n<input type='hidden' name='ccrAction'>\n<input type='hidden' name='raw'>\n<input type=\"checkbox\" name=\"show_date\" id=\"show_date\" onchange=\"show_date_fun();\" ><span class='text'><?php echo xlt('Use Date Range'); ?></span>\n<br />\n<div id=\"date_div\" style=\"display:none\" >\n  <br />\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n    <tr>\n      <td>\n        <span class='bold'><?php echo xlt('Start Date');?>: </span>\n      </td>\n      <td>\n        <input type='text' size='10' name='Start' id='Start' class='datepicker' title='<?php echo xla('yyyy-mm-dd'); ?>' />\n      </td>\n      <td>\n        &nbsp;\n        <span class='bold'><?php echo xlt('End Date');?>: </span>\n      </td>\n      <td>\n        <input type='text' size='10' name='End' id='End' class='datepicker' title='<?php echo xla('yyyy-mm-dd'); ?>' />\n      </td>\n    </tr>\n  </table>\n</div>\n<br />\n\n<!-- <button data-target=\"#reportdialog\" data-toggle=\"modal\" class=\"btn btn-secondary\">\n    <?php //echo xla('Generate Report'); ?></button> -->\n<input type=\"button\" class=\"generateCCR\" value=\"<?php echo xla('Generate Report'); ?>\" />\n<!-- <input type=\"button\" class=\"generateCCR_download_h\" value=\"<?php echo xl('Download') . \" (Hybrid)\"; ?>\" /> -->\n<input type=\"button\" class=\"generateCCR_download_p\" value=\"<?php echo xla('Download'); ?>\" />\n    <?php if ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccr_enable'] == true) { ?>\n<input type=\"button\" class=\"viewCCR_send_dialog\" value=\"<?php echo xla('Transmit'); ?>\" />\n             <br />\n             <div id=\"ccr_send_dialog\" style=\"display:none\" >\n              <br />\n              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n               <tr>\n                <td>\n                 <span class='bold'><?php echo xlt('Enter Recipient\\'s Direct Address');?>: </span>\n                <input type=\"text\" size=\"64\" name=\"ccr_send_to\" id=\"ccr_send_to\" value=\"\">\n                <input type=\"hidden\" name=\"ccr_sent_by\" id=\"ccr_sent_by\" value=\"user\">\n                <input type=\"button\" class=\"viewCCR_transmit\" value=\"<?php echo xla('Send'); ?>\" />\n                <div id=\"ccr_send_result\" style=\"display:none\" >\n                 <span class=\"text\" id=\"ccr_send_message\"></span>\n                </div>\n                </td>\n              </tr>\n              </table>\n             </div>\n<?php } ?>\n<hr/>\n<span class='title'><?php echo xlt('Continuity of Care Document (CCD)'); ?></span>&nbsp;&nbsp;\n<br/>\n<span class='text'>(<?php echo xlt('Pop ups need to be enabled to see these reports'); ?>)</span>\n<br/>\n<br/>\n<input type=\"button\" class=\"viewCCD\" value=\"<?php echo xla('Generate Report'); ?>\" />\n<input type=\"button\" class=\"viewCCD_download\" value=\"<?php echo xla('Download'); ?>\" />\n    <?php if ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccd_enable'] == true) { ?>\n<input type=\"button\" class=\"viewCCD_send_dialog\" value=\"<?php echo xla('Transmit'); ?>\" />\n             <br />\n             <div id=\"ccd_send_dialog\" style=\"display:none\" >\n              <br />\n              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n               <tr>\n                <td>\n                 <span class='bold'><?php echo xlt('Enter Recipient\\'s Direct Address');?>: </span>\n                <input type=\"text\" size=\"64\" name=\"ccd_send_to\" id=\"ccd_send_to\" value=\"\">\n        <input type=\"hidden\" name=\"ccd_sent_by\" id=\"ccd_sent_by\" value=\"user\">\n                <input type=\"button\" class=\"viewCCD_transmit\" value=\"<?php echo xla('Send'); ?>\" />\n                <div id=\"ccd_send_result\" style=\"display:none\" >\n                 <span class=\"text\" id=\"ccd_send_message\"></span>\n                </div>\n                </td>\n              </tr>\n              </table>\n             </div>\n<?php } ?>\n\n</form>\n\n<hr/>\n\n</div>\n<?php } // end CCR/CCD reporting options ?>\n\n<form name='report_form' id=\"report_form\" method='post' action='./report/portal_custom_report.php'>\n\n<span class='card-heading'><?php echo xlt('Patient Report'); ?></span>&nbsp;&nbsp;\n<a class=\"link_submit\" href=\"#\" onclick=\"return checkAll(true)\"><?php echo xlt('Check All'); ?></a>\n|\n<a class=\"link_submit\" href=\"#\" onclick=\"return checkAll(false)\"><?php echo xlt('Clear All'); ?></a>\n<p>\n\n<table class=\"table includes\">\n <tr>\n  <td class='text'>\n   <input type='checkbox' name='include_demographics' id='include_demographics' value=\"demographics\" checked><?php echo xlt('Demographics'); ?><br />\n   <input type='checkbox' name='include_history' id='include_history' value=\"history\"><?php echo xlt('History'); ?><br />\n   <input type='checkbox' name='include_insurance' id='include_insurance' value=\"insurance\"><?php echo xlt('Insurance'); ?><br />\n   <input type='checkbox' name='include_billing' id='include_billing' value=\"billing\"\n    <?php if (!$GLOBALS['simplified_demographics']) {\n        echo 'checked';\n    } ?>><?php echo xlt('Billing'); ?><br />\n  </td>\n  <td class='text'>\n   <!--\n   <input type='checkbox' name='include_allergies' id='include_allergies' value=\"allergies\">Allergies<br />\n   <input type='checkbox' name='include_medications' id='include_medications' value=\"medications\">Medications<br />\n   -->\n   <input type='checkbox' name='include_immunizations' id='include_immunizations' value=\"immunizations\"><?php echo xlt('Immunizations'); ?><br />\n   <!--\n   <input type='checkbox' name='include_medical_problems' id='include_medical_problems' value=\"medical_problems\">Medical Problems<br />\n   -->\n   <input type='checkbox' name='include_notes' id='include_notes' value=\"notes\"><?php echo xlt('Patient Notes'); ?><br />\n   <input type='checkbox' name='include_transactions' id='include_transactions' value=\"transactions\"><?php echo xlt('Transactions'); ?><br />\n   <input type='checkbox' name='include_batchcom' id='include_batchcom' value=\"batchcom\"><?php echo xlt('Communications'); ?><br />\n  </td>\n </tr>\n</table>\n\n<input type='hidden' name='pdf' value='0'>\n<br />\n\n<!-- old ccr button position -->\n\n<table class=\"issues_encounters_forms table\">\n <tr>\n\n  <!-- Issues -->\n  <td class='text'>\n  <div class=\"issues\">\n  <span class='bold'><?php echo xlt('Issues'); ?>:</span>\n   <br />\n   <br />\n\n   <table>\n\n<?php\n// get issues\n$pres = sqlStatement(\"SELECT * FROM lists WHERE pid = ? \" .\n                    \"ORDER BY type, begdate\", [$pid]);\n$lasttype = \"\";\nwhile ($prow = sqlFetchArray($pres)) {\n    if ($lasttype != $prow['type']) {\n        $lasttype = $prow['type'];\n\n   /****\n   $disptype = $lasttype;\n   switch ($lasttype) {\n    case \"allergy\"        : $disptype = \"Allergies\"       ; break;\n    case \"problem\"        :\n    case \"medical_problem\": $disptype = \"Medical Problems\"; break;\n    case \"medication\"     : $disptype = \"Medications\"     ; break;\n    case \"surgery\"        : $disptype = \"Surgeries\"       ; break;\n   }\n   ****/\n        $disptype = $ISSUE_TYPES[$lasttype][0];\n\n        echo \" <tr>\\n\";\n        echo \"  <td colspan='4' class='bold'><b>\" . text($disptype) . \"</b></td>\\n\";\n        echo \" </tr>\\n\";\n    }\n\n    $rowid = $prow['id'];\n    $disptitle = trim($prow['title']) ? $prow['title'] : \"[Missing Title]\";\n\n    $ieres = sqlStatement(\"SELECT encounter FROM issue_encounter WHERE \" .\n                        \"pid = ? AND list_id = ?\", [$pid, $rowid]);\n\n    echo \"    <tr class='text'>\\n\";\n    echo \"     <td>&nbsp;</td>\\n\";\n    echo \"     <td>\";\n    echo \"<input type='checkbox' name='issue_\" . attr($rowid) . \"' id='issue_\" . attr($rowid) . \"' class='issuecheckbox' value='/\";\n    while ($ierow = sqlFetchArray($ieres)) {\n        echo text($ierow['encounter']) . \"/\";\n    }\n\n    echo \"' />\" . text($disptitle) . \"</td>\\n\";\n    echo \"     <td>\" . text($prow['begdate']);\n\n    if ($prow['enddate']) {\n        echo \" - \" . text($prow['enddate']);\n    } else {\n        echo \" Active\";\n    }\n\n        echo \"</td>\\n\";\n        echo \"</tr>\\n\";\n}\n?>\n   </table>\n\n<?php //endif; // end of Issues output ?>\n\n   </div> <!-- end issues DIV -->\n  </td>\n\n<!-- Encounters and Forms -->\n\n<td class='text'>\n<div class='encounters'>\n<span class='bold'><?php echo xlt('Encounters & Forms'); ?>:</span>\n<br /><br />\n\n<?php if (!($auth_notes_a || $auth_notes || $auth_coding_a || $auth_coding || $auth_med || $auth_relaxed)) : ?>\n(Encounters not authorized)\n<?php else : ?>\n    <?php\n\n    $isfirst = 1;\n    $res = sqlStatement(\"SELECT forms.encounter, forms.form_id, forms.form_name, \" .\n                    \"forms.formdir, forms.date AS fdate, form_encounter.date \" .\n                    \",form_encounter.reason \" .\n                    \"FROM forms, form_encounter WHERE \" .\n                    \"forms.pid = ? AND form_encounter.pid = ? AND \" .\n                    \"form_encounter.encounter = forms.encounter \" .\n                    \" AND forms.deleted=0 \" . // --JRM--\n                    \"ORDER BY form_encounter.date DESC, fdate ASC\", [$pid, $pid]);\n    $res2 = sqlStatement(\"SELECT name FROM registry ORDER BY priority\");\n    $html_strings = array();\n    $registry_form_name = array();\n    while ($result2 = sqlFetchArray($res2)) {\n        array_push($registry_form_name, trim($result2['name']));\n    }\n\n    while ($result = sqlFetchArray($res)) {\n        if ($result[\"form_name\"] == \"New Patient Encounter\") {\n            if ($isfirst == 0) {\n                foreach ($registry_form_name as $var) {\n                    if ($toprint = ($html_strings[$var] ?? '')) {\n                        foreach ($toprint as $var) {\n                            print $var;\n                        }\n                    }\n                }\n\n                $html_strings = array();\n                echo \"</div>\\n\"; // end DIV encounter_forms\n                echo \"</div>\\n\\n\";  //end DIV encounter_data\n                echo \"<br />\";\n            }\n\n            $isfirst = 0;\n            echo \"<div class='encounter_data'>\\n\";\n            echo \"<input type=checkbox \" .\n                \" name='\" . attr($result[\"formdir\"]) . \"_\" .  attr($result[\"form_id\"]) . \"'\" .\n                \" id='\" . attr($result[\"formdir\"]) . \"_\" .  attr($result[\"form_id\"]) . \"'\" .\n                \" value='\" . attr($result[\"encounter\"]) . \"'\" .\n                \" class='encounter'\" .\n                \" >\";\n\n            // show encounter reason, not just 'New Encounter'\n            // trim to a reasonable length for display purposes --cfapress\n            $maxReasonLength = 20;\n            if (strlen($result[\"reason\"]) > $maxReasonLength) {\n                $result['reason'] = substr($result['reason'], 0, $maxReasonLength) . \" ... \";\n            }\n\n            echo attr($result[\"reason\"]) .\n                \" (\" . date(\"Y-m-d\", strtotime($result[\"date\"])) .\n                \")\\n\";\n            echo \"<div class='encounter_forms'>\\n\";\n        } else {\n            $form_name = trim($result[\"form_name\"]);\n            //if form name is not in registry, look for the closest match by\n            // finding a registry name which is  at the start of the form name.\n            //this is to allow for forms to put additional helpful information\n            //in the database in the same string as their form name after the name\n            $form_name_found_flag = 0;\n            foreach ($registry_form_name as $var) {\n                if ($var == $form_name) {\n                    $form_name_found_flag = 1;\n                }\n            }\n\n            // if the form does not match precisely with any names in the registry, now see if any front partial matches\n            // and change $form_name appropriately so it will print above in $toprint = $html_strings[$var]\n            if (!$form_name_found_flag) {\n                foreach ($registry_form_name as $var) {\n                    if (strpos($form_name, $var) == 0) {\n                        $form_name = $var;\n                    }\n                }\n            }\n\n            if (!is_array($html_strings[$form_name] ?? null)) {\n                $html_strings[$form_name] = array();\n            }\n\n            array_push($html_strings[$form_name], \"<input type='checkbox' \" .\n                                                \" name='\" . attr($result[\"formdir\"]) . \"_\" . attr($result[\"form_id\"]) . \"'\" .\n                                                \" id='\" . attr($result[\"formdir\"]) . \"_\" . attr($result[\"form_id\"]) . \"'\" .\n                                                \" value='\" . attr($result[\"encounter\"]) . \"'\" .\n                                                \" class='encounter_form' \" .\n                                                \">\" . text(xl_form_title($result[\"form_name\"])) . \"<br />\\n\");\n        }\n    }\n\n    foreach ($registry_form_name as $var) {\n        if ($toprint = $html_strings[$var] ?? null) {\n            foreach ($toprint as $var) {\n                print $var;\n            }\n        }\n    }\n    ?>\n\n<?php endif; ?>\n\n  </div> <!-- end encounters DIV -->\n  </td>\n </tr>\n</table>\n\n<!-- Procedure Orders -->\n<hr/>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" >\n <tr>\n  <td class='bold'><?php echo xlt('Procedures'); ?>&nbsp;&nbsp;</td>\n  <td class='text'><?php echo xlt('Order Date'); ?>&nbsp;&nbsp;</td>\n  <td class='text'><?php echo xlt('Encounter Date'); ?>&nbsp;&nbsp;</td>\n  <td class='text'><?php echo xlt('Order Descriptions'); ?></td>\n </tr>\n<?php\n$res = sqlStatement(\n    \"SELECT po.procedure_order_id, po.date_ordered, fe.date \" .\n    \"FROM procedure_order AS po \" .\n    \"LEFT JOIN forms AS f ON f.pid = po.patient_id AND f.formdir = 'procedure_order' AND \" .\n    \"f.form_id = po.procedure_order_id AND f.deleted = 0 \" .\n    \"LEFT JOIN form_encounter AS fe ON fe.pid = f.pid AND fe.encounter = f.encounter \" .\n    \"WHERE po.patient_id = ? \" .\n    \"ORDER BY po.date_ordered DESC, po.procedure_order_id DESC\",\n    array($pid)\n);\nwhile ($row = sqlFetchArray($res)) {\n    $poid = $row['procedure_order_id'];\n    echo \" <tr>\\n\";\n    echo \"  <td align='center' class='text'>\" .\n       \"<input type='checkbox' name='procedures[]' value='\" . attr($poid) . \"' />&nbsp;&nbsp;</td>\\n\";\n    echo \"  <td class='text'>\" . text(oeFormatShortDate($row['date_ordered'])) . \"&nbsp;&nbsp;</td>\\n\";\n    echo \"  <td class='text'>\" . text(oeFormatShortDate($row['date'])) . \"&nbsp;&nbsp;</td>\\n\";\n    echo \"  <td class='text'>\";\n    $opres = sqlStatement(\n        \"SELECT procedure_code, procedure_name FROM procedure_order_code \" .\n        \"WHERE procedure_order_id = ? ORDER BY procedure_order_seq\",\n        array($poid)\n    );\n    while ($oprow = sqlFetchArray($opres)) {\n        $tmp = $oprow['procedure_name'];\n        if (empty($tmp)) {\n            $tmp = $oprow['procedure_code'];\n        }\n\n        echo text($tmp) . \"<br />\";\n    }\n\n    echo \"</td>\\n\";\n    echo \" </tr>\\n\";\n}\n?>\n</table>\n\n<hr/>\n<span class=\"bold\"><?php echo xlt('Documents'); ?></span>:<br />\n<ul>\n<?php\n// show available documents\n$db = $GLOBALS['adodb']['db'];\n$sql = \"SELECT d.id, d.url, d.name as document_name, c.name FROM documents AS d \" .\n        \"LEFT JOIN categories_to_documents AS ctd ON d.id=ctd.document_id \" .\n        \"LEFT JOIN categories AS c ON c.id = ctd.category_id WHERE \" .\n        \"d.foreign_id = ? AND d.deleted = 0\";\n$result = $db->Execute($sql, [$pid]);\nif ($db->ErrorMsg()) {\n    echo $db->ErrorMsg();\n}\n\nwhile ($result && !$result->EOF) {\n    $fname = basename($result->fields['url']);\n    $extension = strtolower(substr($fname, strrpos($fname, \".\")));\n    if ($extension !== '.zip' && $extension !== '.dcm') {\n        echo \"<li class='bold'>\";\n        echo '<input type=\"checkbox\" name=\"documents[]\" value=\"' .\n            $result->fields['id'] . '\">';\n        echo '&nbsp;&nbsp;<i>' . text(xl_document_category($result->fields['name'])) . \"</i>\";\n        echo '&nbsp;&nbsp;' . xlt('Name') . ': <i>' . text(basename($result->fields['url'])) . \"</i>\";\n        echo '</li>';\n    }\n\n    $result->MoveNext();\n}\n?>\n</ul>\n</form>\n\n<input type=\"button\" class=\"genreport\" value=\"<?php echo xla('Generate Report'); ?>\" />&nbsp;\n<input type=\"button\" class=\"genpdfrep\" value=\"<?php echo xla('Download PDF'); ?>\" />&nbsp;\n\n</div>  <!-- close patient_reports DIV -->\n\n<script>\n\n// jQuery stuff to make the page a little easier to use\ninitReport = function(){\n    $(\"body\").on(\"click\", \".genreport\", function() {\n          document.report_form.pdf.value = 0;\n          showCustom();\n\n          return false;\n         });\n    $(\".genpdfrep\").click(function() {  document.report_form.pdf.value = 1; $(\"#report_form\").submit(); });\n    $(\".genportal\").click(function() {  document.report_form.pdf.value = 2; $(\"#report_form\").submit(); });\n    $(\"#genfullreport\").click(function() { location.href='<?php echo (!empty($returnurl)) ? \"$rootdir/patient_file/encounter/$returnurl\"  : '';?>'; });\n    //$(\"#printform\").click(function() { PrintForm(); });\n    $(\".issuecheckbox\").click(function() { issueClick(this); });\n\n    // check/uncheck all Forms of an encounter\n    $(\".encounter\").click(function() { SelectForms(this); });\n\n    function showCustom(){\n        var formval = $( \"#report_form\" ).serializeArray();\n        var title = <?php echo xlj(\"Custom Report\") ?>;\n        var params = {\n            sizeHeight: 'full',\n            size: 'modal-lg',\n            title: title,\n            type: \"POST\",\n            url: './report/portal_custom_report.php',\n            data: formval\n        };\n\n        // returns a promise after dialog inits. Just an empty fulfill for an example.\n        // Could do an alert or confirm etc.\n        return dialog.ajax(params)\n        .then(function (dialog) {\n            $('div.modal-body', dialog).addClass('overflow-auto');\n        });\n    }\n    $(\".generateCCR\").click(\n        function() {\n            if(document.getElementById('show_date').checked == true){\n                if(document.getElementById('Start').value == '' || document.getElementById('End').value == ''){\n                   alert(<?php echo xlj('Please select a start date and end date'); ?>);\n                        return false;\n                }\n            }\n        var ccrAction = document.getElementsByName('ccrAction');\n        ccrAction[0].value = 'generate';\n        var raw = document.getElementsByName('raw');\n        raw[0].value = 'no';\n\n        ccr_form.setAttribute(\"target\", \"_blank\");\n        $(\"#ccr_form\").submit();\n        ccr_form.setAttribute(\"target\", \"\");\n    });\n        $(\".generateCCR_raw\").click(\n        function() {\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'generate';\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'yes';\n\n                ccr_form.setAttribute(\"target\", \"_blank\");\n                $(\"#ccr_form\").submit();\n                ccr_form.setAttribute(\"target\", \"\");\n        });\n        $(\".generateCCR_download_h\").click(\n        function() {\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'generate';\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'hybrid';\n\n                $(\"#ccr_form\").submit();\n        });\n        $(\".generateCCR_download_p\").click(\n        function() {\n            if(document.getElementById('show_date').checked === true){\n                if(document.getElementById('Start').value === '' || document.getElementById('End').value === ''){\n                        alert(<?php echo xlj('Please select a start date and end date'); ?>);\n                        return false;\n                }\n            }\n            var ccrAction = document.getElementsByName('ccrAction');\n            ccrAction[0].value = 'generate';\n            var raw = document.getElementsByName('raw');\n            raw[0].value = 'pure';\n\n            $(\"#ccr_form\").submit();\n        });\n    $(\".viewCCD\").click(\n    function() {\n        var ccrAction = document.getElementsByName('ccrAction');\n        ccrAction[0].value = 'viewccd';\n            var raw = document.getElementsByName('raw');\n            raw[0].value = 'no';\n\n            ccr_form.setAttribute(\"target\", \"_blank\");\n        $(\"#ccr_form\").submit();\n                ccr_form.setAttribute(\"target\", \"\");\n    });\n        $(\".viewCCD_raw\").click(\n        function() {\n            var ccrAction = document.getElementsByName('ccrAction');\n            ccrAction[0].value = 'viewccd';\n            var raw = document.getElementsByName('raw');\n            raw[0].value = 'yes';\n\n            ccr_form.setAttribute(\"target\", \"_blank\");\n            $(\"#ccr_form\").submit();\n            ccr_form.setAttribute(\"target\", \"\");\n        });\n        $(\".viewCCD_download\").click(\n        function() {\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'viewccd';\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'pure';\n                $(\"#ccr_form\").submit();\n        });\n<?php if ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccr_enable'] == true) { ?>\n        $(\".viewCCR_send_dialog\").click(\n        function() {\n                $(\"#ccr_send_dialog\").toggle();\n        });\n        $(\".viewCCR_transmit\").click(\n        function() {\n                $(\".viewCCR_transmit\").attr('disabled','disabled');\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'generate';\n                var ccrRecipient = $(\"#ccr_send_to\").val();\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'send '+ccrRecipient;\n                if(ccrRecipient === \"\") {\n                  $(\"#ccr_send_message\").html(\"<?php\n                    echo xla('Please enter a valid Direct Address above.'); ?>\");\n                  $(\"#ccr_send_result\").show();\n                } else {\n                  $(\".viewCCR_transmit\").attr('disabled','disabled');\n                  $(\"#ccr_send_message\").html(\"<?php\n                    echo xla('Working... this may take a minute.'); ?>\");\n                  $(\"#ccr_send_result\").show();\n                  var action=$(\"#ccr_form\").attr('action');\n                  $.post(action, {ccrAction:'generate',raw:'send '+ccrRecipient,requested_by:'user'},\n                     function(data) {\n                       if(data === \"SUCCESS\") {\n                         $(\"#ccr_send_message\").html(\"<?php\n                            echo xla('Your message was submitted for delivery to');\n                            ?> \"+ccrRecipient);\n                         $(\"#ccr_send_to\").val(\"\");\n                       } else {\n                         $(\"#ccr_send_message\").html(data);\n                       }\n                       $(\".viewCCR_transmit\").removeAttr('disabled');\n                  });\n                }\n        });\n<?php }\n\nif ($GLOBALS['phimail_enable'] == true && $GLOBALS['phimail_ccd_enable'] == true) { ?>\n        $(\".viewCCD_send_dialog\").click(\n        function() {\n                $(\"#ccd_send_dialog\").toggle();\n        });\n        $(\".viewCCD_transmit\").click(\n        function() {\n                $(\".viewCCD_transmit\").attr('disabled','disabled');\n                var ccrAction = document.getElementsByName('ccrAction');\n                ccrAction[0].value = 'viewccd';\n                var ccdRecipient = $(\"#ccd_send_to\").val();\n                var raw = document.getElementsByName('raw');\n                raw[0].value = 'send '+ccdRecipient;\n                if(ccdRecipient === \"\") {\n                  $(\"#ccd_send_message\").html(\"<?php\n                    echo xla('Please enter a valid Direct Address above.'); ?>\");\n                  $(\"#ccd_send_result\").show();\n                } else {\n                  $(\".viewCCD_transmit\").attr('disabled','disabled');\n                  $(\"#ccd_send_message\").html(\"<?php\n                    echo xla('Working... this may take a minute.'); ?>\");\n                  $(\"#ccd_send_result\").show();\n                  var action=$(\"#ccr_form\").attr('action');\n                  $.post(action, {ccrAction:'viewccd',raw:'send '+ccdRecipient,requested_by:'user'},\n                     function(data) {\n                       if(data === \"SUCCESS\") {\n                         $(\"#ccd_send_message\").html(\"<?php\n                            echo xla('Your message was submitted for delivery to');\n                            ?> \"+ccdRecipient);\n                         $(\"#ccd_send_to\").val(\"\");\n                       } else {\n                         $(\"#ccd_send_message\").html(data);\n                       }\n                       $(\".viewCCD_transmit\").removeAttr('disabled');\n                  });\n                }\n        });\n<?php } ?>\n}; // end initReport\n\n$(function () {\n\n    initReport();\n\n    $('.datepicker').datetimepicker({\n        <?php $datetimepicker_timepicker = false; ?>\n        <?php $datetimepicker_formatInput = false; ?>\n        <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n    });\n});\n\n// select/deselect the Forms related to the selected Encounter\n// (it ain't pretty code folks)\nvar SelectForms = function (selectedEncounter) {\n    if ($(selectedEncounter).prop(\"checked\")) {\n        $(selectedEncounter).parent().children().each(function (i, obj) {\n            $(this).children().each(function (i, obj) {\n                $(this).prop(\"checked\", true);\n            });\n        });\n    } else {\n        $(selectedEncounter).parent().children().each(function (i, obj) {\n            $(this).children().each(function (i, obj) {\n                $(this).prop(\"checked\", false);\n            });\n        });\n    }\n}\n\n// When an issue is checked, auto-check all the related encounters and forms\nfunction issueClick(issue) {\n    // do nothing when unchecked\n    if (!$(issue).prop(\"checked\")) return;\n\n    $(\"#report_form :checkbox\").each(function (i, obj) {\n        if ($(issue).val().indexOf('/' + $(this).val() + '/') >= 0) {\n            $(this).prop(\"checked\", true);\n        }\n\n    });\n}\n\n</script>\n\n", "<?php\n\n/**\n * Patient Portal\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n//Need to unwrap data to ensure user/patient is authorized\n$data = (array)(json_decode(file_get_contents(\"php://input\")));\n$req_pid = $data['pid'];\n$user = $data['user'];\n$signer = !empty($data['signer']) ? $data['signer'] : '';\n$type = $data['type'];\n$isPortal = $data['is_portal'];\n$output = urldecode($data['output']);\n$ignoreAuth = false;\n\n// this script is used by both the patient portal and main openemr; below does authorization.\nif ($isPortal) {\n    require_once(__DIR__ . \"/../../../src/Common/Session/SessionUtil.php\");\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\n    if (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n        // authorized by patient portal\n        $req_pid = $_SESSION['pid'];\n        $ignoreAuth_onsite_portal = true;\n    } else {\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        echo js_escape(\"error invalid session,\");\n        exit();\n    }\n}\nrequire_once(\"../../../interface/globals.php\");\n\nif (!$isPortal) {\n    $userManipulatedFlag = false;\n    if ($user != $_SESSION['authUserID']) {\n        $userManipulatedFlag = true;\n    }\n\n    if ($userManipulatedFlag) {\n        echo js_escape(\"error\");\n        exit();\n    }\n}\n\nif ($type === 'witness-signature') {\n    echo(js_escape('Done'));\n    exit();\n}\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    if ($type === 'admin-signature') {\n        $req_pid = 0;\n    }\n    $sig_hash = hash('sha3-512', $output);\n    $created = time();\n    $ip = $_SERVER['REMOTE_ADDR'];\n    $status = 'filed';\n    $lastmod = date('Y-m-d H:i:s');\n    $r = sqlStatement(\"SELECT COUNT( DISTINCT TYPE ) x FROM onsite_signatures where pid = ? and user = ? \", array($req_pid, $user));\n    $c = sqlFetchArray($r);\n    $isit = $c['x'] * 1;\n    if ($isit) {\n        $qstr = \"UPDATE onsite_signatures SET pid=?,lastmod=?,status=?, user=?, signature=?, sig_hash=?, ip=?,sig_image=? WHERE pid=? && user=?\";\n        $rcnt = sqlStatement($qstr, array($req_pid, $lastmod, $status, $user, null, $sig_hash, $ip, $output, $req_pid, $user));\n    } else {\n        $qstr = \"INSERT INTO onsite_signatures (pid,lastmod,status,type,user,signator, signature, sig_hash, ip, created, sig_image) VALUES (?,?,?,?,?,?,?,?,?,?,?) \";\n        sqlStatement($qstr, array($req_pid, $lastmod, $status, $type, $user, $signer, null, $sig_hash, $ip, $created, $output));\n    }\n\n    echo json_encode('Done', JSON_THROW_ON_ERROR);\n    exit();\n}\n", "<?php\n\n/**\n * Patient Portal\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2016-2021 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n//Need to unwrap data to ensure user/patient is authorized\n$data = (array)(json_decode(file_get_contents(\"php://input\"), true, 512, JSON_THROW_ON_ERROR));\n$req_pid = $data['pid'];\n$user = $data['user'];\n$type = $data['type'];\n$isPortal = $data['is_portal'];\n$signer = '';\n$ignoreAuth = false;\n\n// this script is used by both the patient portal and main openemr; below does authorization.\nif ($isPortal) {\n    require_once(__DIR__ . \"/../../../src/Common/Session/SessionUtil.php\");\n    OpenEMR\\Common\\Session\\SessionUtil::portalSessionStart();\n\n    if (isset($_SESSION['pid']) && isset($_SESSION['patient_portal_onsite_two'])) {\n        // authorized by patient portal\n        $req_pid = $_SESSION['pid'];\n        $ignoreAuth_onsite_portal = true;\n    } else {\n        OpenEMR\\Common\\Session\\SessionUtil::portalSessionCookieDestroy();\n        echo js_escape(\"error\");\n        exit();\n    }\n}\nrequire_once(\"../../../interface/globals.php\");\n\nif (!$isPortal) {\n    $userManipulatedFlag = false;\n    if ($user != $_SESSION['authUserID']) {\n        $userManipulatedFlag = true;\n    }\n\n    if ($userManipulatedFlag) {\n        echo js_escape(\"error\");\n        exit();\n    }\n}\n\n$created = time();\n$lastmod = date('Y-m-d H:i:s');\n$status = 'filed';\n$info_query = array();\n$isAdmin = ($type === 'admin-signature');\nif ($isAdmin) {\n    $req_pid = 0;\n}\nif ($type === 'witness-signature') {\n    echo(js_escape('Witness Signature'));\n    exit();\n}\nif ($req_pid === 0 || empty($user)) {\n    if (!$isAdmin) {\n        echo(js_escape('error not an admin'));\n        exit();\n    }\n}\n\nif (($data['mode'] ?? null) === 'fetch_info') {\n    $stmt = \"Select CONCAT(IFNULL(fname,''), ' ',IFNULL(lname,'')) as userName From users Where id = ?\";\n    $user_result = sqlQuery($stmt, array($user)) ?: [];\n    $stmt = \"Select CONCAT(IFNULL(fname,''), ' ',IFNULL(lname,'')) as ptName From patient_data Where pid = ?\";\n    $pt_result = sqlQuery($stmt, array($req_pid)) ?: [];\n    $signature = [];\n    if ($pt_result) {\n        $info_query = array_merge($pt_result, $user_result, $signature);\n    } else {\n        $info_query = array_merge($user_result, $signature);\n    }\n\n    if ($isAdmin) {\n        $signer = $user_result['userName'];\n    } else {\n        $signer = $pt_result['ptName'];\n    }\n    if (!$signer) {\n        echo js_escape(\"error\");\n        exit();\n    }\n}\n\nif ($isAdmin) {\n    $req_pid = 0;\n    $row = sqlQuery(\"SELECT pid,status,sig_image,type,user FROM onsite_signatures WHERE user=? && type=?\", array($user, $type));\n} else {\n    $row = sqlQuery(\"SELECT pid,status,sig_image,type,user FROM onsite_signatures WHERE pid=? And user=?\", array($req_pid, $user));\n}\n\nif (!($row['pid'] ?? null) && !($row['user'] ?? null)) {\n    $status = 'waiting';\n    $qstr = \"INSERT INTO onsite_signatures (pid,lastmod,status,type,user,signator,created) VALUES (?,?,?,?,?,?,?)\";\n    sqlStatement($qstr, array($req_pid, $lastmod, $status, $type, $user, $signer, $created));\n}\n\nif (($row['status'] ?? null) == 'filed') {\n    if (($data['mode'] ?? null) === 'fetch_info') {\n        $info_query['signature'] = $row['sig_image'];\n        echo js_escape($info_query);\n        exit();\n    }\n    echo js_escape($row['sig_image']);\n} elseif (($row['status'] ?? null) == 'waiting' || $status == 'waiting') {\n    $info_query['message'] = 'waiting';\n    echo js_escape($info_query);\n}\n\nexit();\n", "<?php\n/**\n * Gacl class - phpGACL main class\n *\n * Original code from phpGACL - Generic Access Control List\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Mike Benoit <ipso@snappymail.ca>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2002-2003 Mike Benoit <ipso@snappymail.ca>\n * @copyright Copyright (c) 2020 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html GNU Lesser General Public License 2.1\n */\n\nnamespace OpenEMR\\Gacl;\n\n/*\n * Path to ADODB.\n */\nif ( !defined('ADODB_DIR') ) {\n\tdefine('ADODB_DIR', dirname(__FILE__).'/../vendor/adodb/adodb-php');\n}\n\n//openemr configuration file - bm - 05-2009\n// to collect sql database login info and the utf8 flag\n// also collect the adodb libraries to support mysqli_mod that is needed for mysql ssl support\nrequire_once(dirname(__FILE__) . \"/../../library/sqlconf.php\");\nrequire_once(dirname(__FILE__) . \"/../../vendor/adodb/adodb-php/adodb.inc.php\");\nrequire_once(dirname(__FILE__) . \"/../../vendor/adodb/adodb-php/drivers/adodb-mysqli.inc.php\");\n\nclass Gacl {\n\t/*\n\t--- phpGACL Configuration path/file ---\n\t*/\n\tvar $config_file = '';\n\n\t/*\n\t--- Private properties ---\n\t*/\n\t/** @var boolean Enables Debug output if true */\n\tvar $_debug = FALSE;\n\n\t/*\n\t--- Database configuration. ---\n\t*/\n\t/** @var string Prefix for all the phpgacl tables in the database */\n\tvar $_db_table_prefix = 'gacl_';\n\n\t/** @var string The database type, based on available ADODB connectors - mysql, postgres7, sybase, oci8po See here for more: http://php.weblogs.com/adodb_manual#driverguide */\n\tvar $_db_type = 'mysqli';\n\n\t/** @var string The database server */\n\tvar $_db_host = '';\n\n\t/** @var string The database user name */\n\tvar $_db_user = '';\n\n\t/** @var string The database user password */\n\tvar $_db_password = '';\n\n\t/** @var string The database name */\n\tvar $_db_name = '';\n\n\t/** @var object An ADODB database connector object */\n\tvar $_db = '';\n\n    /** @var boolean The utf8 encoding flag */\n    var $_db_encoding_setting = '';\n\n    /** @var object An ADODB database connector object */\n    var $db;\n\n\t/*\n\t * NOTE: \tThis cache must be manually cleaned each time ACL's are modified.\n\t * \t\tAlternatively you could wait for the cache to expire.\n\t */\n\n\t/** @var boolean Caches queries if true */\n\tvar $_caching = FALSE;\n\n\t/** @var boolean Force cache to expire */\n\tvar $_force_cache_expire = TRUE;\n\n\t/** @var string The directory for cache file to eb written (ensure write permission are set) */\n\tvar $_cache_dir = '/tmp/phpgacl_cache'; // NO trailing slash\n\n\t/** @var int The time for the cache to expire in seconds - 600 == Ten Minutes */\n\tvar $_cache_expire_time=600;\n\n\t/** @var string A switch to put acl_check into '_group_' mode */\n\tvar $_group_switch = '_group_';\n\n\t/**\n\t * Constructor\n\t * @param array An arry of options to oeverride the class defaults\n\t */\n\tfunction __construct($options = NULL) {\n\n\t\t$available_options = array('db','debug','items_per_page','max_select_box_items','max_search_return_items','db_table_prefix','db_type','db_host','db_user','db_password','db_name','caching','force_cache_expire','cache_dir','cache_expire_time');\n\n\t\t//Values supplied in $options array overwrite those in the config file.\n\t\tif ( file_exists($this->config_file) ) {\n\t\t        $config = parse_ini_file($this->config_file);\n\n\t\t        if ( is_array($config) ) {\n\t\t                $gacl_options = array_merge($config, $options);\n\t\t        }\n\n\t        \tunset($config);\n\t\t}\n\n\t\tif (is_array($options)) {\n\t\t\tforeach ($options as $key => $value) {\n\t\t\t\t$this->debug_text(\"Option: $key\");\n\n\t\t\t\tif (in_array($key, $available_options) ) {\n\t\t\t\t\t$this->debug_text(\"Valid Config options: $key\");\n\t\t\t\t\t$property = '_'.$key;\n\t\t\t\t\t$this->$property = $value;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"ERROR: Config option: $key is not a valid option\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n        //collect openemr sql info from include at top of script - bm 05-2009\n        global $sqlconf, $disable_utf8_flag;\n        $this->_db_host = $sqlconf[\"host\"];\n        $this->_db_user = $sqlconf[\"login\"];\n        $this->_db_password = $sqlconf[\"pass\"];\n        $this->_db_name = $sqlconf[\"dbase\"];\n        if (!$disable_utf8_flag) {\n            if (!empty($sqlconf[\"db_encoding\"]) && ($sqlconf[\"db_encoding\"] == \"utf8mb4\")) {\n                $this->_db_encoding_setting = \"utf8mb4\";\n            } else {\n                $this->_db_encoding_setting = \"utf8\";\n            }\n        } else {\n            $this->_db_encoding_setting = \"\";\n        }\n\n\t\trequire_once( ADODB_DIR .'/adodb.inc.php');\n\t\trequire_once( ADODB_DIR .'/adodb-pager.inc.php');\n\n\t\tif (is_object($this->_db)) {\n\t\t\t$this->db = &$this->_db;\n\t\t} else {\n\t\t\t$this->db = ADONewConnection($this->_db_type);\n\t\t\t//Use NUM for slight performance/memory reasons.\n\t\t\t$this->db->SetFetchMode(ADODB_FETCH_NUM);\n\n            // Set mysql to use ssl, if applicable.\n            // Can support basic encryption by including just the mysql-ca pem (this is mandatory for ssl)\n            // Can also support client based certificate if also include mysql-cert and mysql-key (this is optional for ssl)\n            if (file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-ca\")) {\n                if (defined('MYSQLI_CLIENT_SSL')) {\n                    if (\n                        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-key\") &&\n                        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-cert\")\n                    ) {\n                        // with client side certificate/key\n                        $this->db->ssl_key = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-key\";\n                        $this->db->ssl_cert = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-cert\";\n                        $this->db->ssl_ca = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-ca\";\n                    } else {\n                        // without client side certificate/key\n                        $this->db->ssl_ca = \"${GLOBALS['OE_SITE_DIR']}/documents/certificates/mysql-ca\";\n                    }\n                    $this->db->clientFlags = MYSQLI_CLIENT_SSL;\n            \t}\n            }\n\n\t\t\t// Port to be used in connection\n\t\t\t$this->db->port = $sqlconf[\"port\"];\n\n            if ((!empty($GLOBALS[\"enable_database_connection_pooling\"]) || !empty($_SESSION[\"enable_database_connection_pooling\"])) && empty($GLOBALS['connection_pooling_off'])) {\n                $this->db->PConnect($this->_db_host, $this->_db_user, $this->_db_password, $this->_db_name);\n            } else {\n                $this->db->connect($this->_db_host, $this->_db_user, $this->_db_password, $this->_db_name);\n            }\n            // Modified 5/2009 by BM for UTF-8 project\n            if ($this->_db_encoding_setting == \"utf8mb4\") {\n                $success_flag = $this->db->Execute(\"SET NAMES 'utf8mb4'\");\n                if (!$success_flag) {\n                    error_log(\"PHP custom error: from gacl src/Gacl/Gacl.php - Unable to set up UTF8MB4 encoding with mysql database\" . htmlspecialchars($this->db->ErrorMsg(), ENT_QUOTES), 0);\n\t\t\t\t}\n\t\t\t} elseif ($this->_db_encoding_setting == \"utf8\") {\n                $success_flag = $this->db->Execute(\"SET NAMES 'utf8'\");\n                if (!$success_flag) {\n                    error_log(\"PHP custom error: from gacl src/Gacl/Gacl.php - Unable to set up UTF8 encoding with mysql database\" . htmlspecialchars($this->db->ErrorMsg(), ENT_QUOTES), 0);\n                }\n            }\n\t\t        // ---------------------------------------\n\n\t\t\t//Turn off STRICT SQL\n\t\t\t$sql_strict_set_success = $this->db->Execute(\"SET sql_mode = ''\");\n\t\t\tif (!$sql_strict_set_success) {\n\t\t\t\terror_log(\"Unable to set strict sql setting: \" . htmlspecialchars($this->db->ErrorMsg(), ENT_QUOTES), 0);\n\t\t\t}\n\n            if (!empty($GLOBALS['debug_ssl_mysql_connection'])) {\n                error_log(\"CHECK SSL CIPHER IN GACL ADODB: \" . htmlspecialchars(print_r($this->db->Execute(\"SHOW STATUS LIKE 'Ssl_cipher';\")->fields, true), ENT_QUOTES));\n            }\n\n\t\t}\n\t\t$this->db->debug = $this->_debug;\n\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\tif (!class_exists('Hashed_Cache_Lite')) {\n\t\t\t\trequire_once(dirname(__FILE__) .'/Cache_Lite/Hashed_Cache_Lite.php');\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Cache options. We default to the highest performance. If you run in to cache corruption problems,\n\t\t\t * Change all the 'false' to 'true', this will slow things down slightly however.\n\t\t\t */\n\n\t\t\t$cache_options = array(\n\t\t\t\t'caching' => $this->_caching,\n\t\t\t\t'cacheDir' => $this->_cache_dir.'/',\n\t\t\t\t'lifeTime' => $this->_cache_expire_time,\n\t\t\t\t'fileLocking' => TRUE,\n\t\t\t\t'writeControl' => FALSE,\n\t\t\t\t'readControl' => FALSE,\n\t\t\t\t'memoryCaching' => TRUE,\n\t\t\t\t'automaticSerialization' => FALSE\n\t\t\t);\n\t\t\t$this->Cache_Lite = new Hashed_Cache_Lite($cache_options);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t* Prints debug text if debug is enabled.\n\t* @param string THe text to output\n\t* @return boolean Always returns true\n\t*/\n\tfunction debug_text($text) {\n\n\t\tif ($this->_debug) {\n\t\t\techo \"$text<br />\\n\";\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t* Prints database debug text if debug is enabled.\n\t* @param string The name of the function calling this method\n\t* @return string Returns an error message\n\t*/\n\tfunction debug_db($function_name = '') {\n\t\tif ($function_name != '') {\n\t\t\t$function_name .= ' (): ';\n\t\t}\n\n\t\treturn $this->debug_text ($function_name .'database error: '. $this->db->ErrorMsg() .' ('. $this->db->ErrorNo() .')');\n\t}\n\n\t/**\n\t*\n        * Check if the current user has a given type or types of access to an access control object.\n\t*\n        * Implemented as a wrapper of acl_query().\n\t* This function exists simply to return TRUE/FALSE accordingly.\n        *\n\t* @param string $aco_section_value The ACO section value\n\t* @param string $aco_value The ACO value\n\t* @param string $aro_section_value The ARO section value\n\t* @param string $aro_value The ARO value\n\t* @param string $axo_section_value The AXO section value (optional)\n\t* @param string $axo_value The AXO section value (optional)\n\t* @param integer $root_aro_group The group id of the ARO (optional)\n\t* @param integer $root_axo_group The group id of the AXO (optional)\n\t* @return boolean true if the check succeeds, false if not.\n\t*/\n\tfunction acl_check($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value=NULL, $axo_value=NULL, $root_aro_group=NULL, $root_axo_group=NULL) {\n\t\t$acl_result = $this->acl_query($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value, $axo_value, $root_aro_group, $root_axo_group);\n\n\t\treturn $acl_result['allow'];\n\t}\n\n\t/**\n\t* Wraps the actual acl_query() function.\n\t*\n\t* Quick access to the return value of an ACL.\n\t* @param string The ACO section value\n\t* @param string The ACO value\n\t* @param string The ARO section value\n\t* @param string The ARO section\n\t* @param string The AXO section value (optional)\n\t* @param string The AXO section value (optional)\n\t* @param integer The group id of the ARO (optional)\n\t* @param integer The group id of the AXO (optional)\n\t* @return string The return value of the ACL\n\t*/\n\tfunction acl_return_value($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value=NULL, $axo_value=NULL, $root_aro_group=NULL, $root_axo_group=NULL) {\n\t\t$acl_result = $this->acl_query($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value, $axo_value, $root_aro_group, $root_axo_group);\n\n\t\treturn $acl_result['return_value'];\n\t}\n\n\t/**\n\t* Handles ACL lookups over arrays of AROs\n\t* @param string The ACO section value\n\t* @param string The ACO value\n\t* @param array An named array of arrays, each element in the format aro_section_value=>array(aro_value1,aro_value1,...)\n\t* @return mixed The same data format as inputted.\n\t\\*======================================================================*/\n\tfunction acl_check_array($aco_section_value, $aco_value, $aro_array) {\n\t\t/*\n\t\t\tInput Array:\n\t\t\t\tSection => array(Value, Value, Value),\n\t\t\t\tSection => array(Value, Value, Value)\n\n\t\t */\n\n\t\tif (!is_array($aro_array)) {\n\t\t\t$this->debug_text(\"acl_query_array(): ARO Array must be passed\");\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach($aro_array as $aro_section_value => $aro_value_array) {\n\t\t\tforeach ($aro_value_array as $aro_value) {\n\t\t\t\t$this->debug_text(\"acl_query_array(): ARO Section Value: $aro_section_value ARO VALUE: $aro_value\");\n\n\t\t\t\tif( $this->acl_check($aco_section_value, $aco_value, $aro_section_value, $aro_value) ) {\n\t\t\t\t\t$this->debug_text(\"acl_query_array(): ACL_CHECK True\");\n\t\t\t\t\t$retarr[$aro_section_value][] = $aro_value;\n\t\t\t\t} else {\n\t\t\t\t\t$this->debug_text(\"acl_query_array(): ACL_CHECK False\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $retarr;\n\n\t}\n\n\t/**\n\t* The Main function that does the actual ACL lookup.\n        *\n\t* @param string The ACO section value\n\t* @param string The ACO value\n\t* @param string The ARO section value\n\t* @param string The ARO value\n\t* @param string The AXO section value (optional)\n\t* @param string The AXO value (optional)\n\t* @param string The value of the ARO group (optional)\n\t* @param string The value of the AXO group (optional)\n\t* @param boolean Debug the operation if true (optional)\n        * @param boolean Option to return all applicable ACL's rather than just one. (optional) (Added by OpenEMR)\n\t* @return array Returns as much information as possible about the ACL so other functions can trim it down and omit unwanted data.\n\t*/\n\tfunction acl_query($aco_section_value, $aco_value, $aro_section_value, $aro_value, $axo_section_value=NULL, $axo_value=NULL, $root_aro_group=NULL, $root_axo_group=NULL, $debug=NULL, $return_all=FALSE) {\n\n\t\t$cache_id = 'acl_query_'.$aco_section_value.'-'.$aco_value.'-'.$aro_section_value.'-'.$aro_value.'-'.$axo_section_value.'-'.$axo_value.'-'.$root_aro_group.'-'.$root_axo_group.'-'.$debug.'-'.$return_all;\n\n\t\t$retarr = $this->get_cache($cache_id);\n\n\t\tif (!$retarr) {\n\t\t\t/*\n\t\t\t * Grab all groups mapped to this ARO/AXO\n\t\t\t */\n\t\t\t$aro_group_ids = $this->acl_get_groups($aro_section_value, $aro_value, $root_aro_group, 'ARO');\n\n\t\t\tif (is_array($aro_group_ids) AND !empty($aro_group_ids)) {\n\t\t\t\t$sql_aro_group_ids = implode(',', $aro_group_ids);\n\t\t\t}\n\n\t\t\tif ($axo_section_value != '' AND $axo_value != '') {\n\t\t\t\t$axo_group_ids = $this->acl_get_groups($axo_section_value, $axo_value, $root_axo_group, 'AXO');\n\n\t\t\t\tif (is_array($axo_group_ids) AND !empty($axo_group_ids)) {\n\t\t\t\t\t$sql_axo_group_ids = implode(',', $axo_group_ids);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * This query is where all the magic happens.\n\t\t\t * The ordering is very important here, as well very tricky to get correct.\n\t\t\t * Currently there can be  duplicate ACLs, or ones that step on each other toes. In this case, the ACL that was last updated/created\n\t\t\t * is used; unless the $return_all parameter is set to TRUE, then will return the entire array of applicable ACL information (this\n                         * option was added by OpenEMR)\n\t\t\t *\n\t\t\t * This is probably where the most optimizations can be made.\n\t\t\t */\n\n\t\t\t$order_by = array();\n\n\t\t\t$query = '\n\t\t\t\t\tSELECT\t\ta.id,a.allow,a.return_value\n\t\t\t\t\tFROM\t\t'. $this->_db_table_prefix .'acl a\n\t\t\t\t\tLEFT JOIN \t'. $this->_db_table_prefix .'aco_map ac ON ac.acl_id=a.id';\n\n\t\t\tif ($aro_section_value != $this->_group_switch) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_map ar ON ar.acl_id=a.id';\n\t\t\t}\n\n\t\t\tif ($axo_section_value != $this->_group_switch) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_map ax ON ax.acl_id=a.id';\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * if there are no aro groups, don't bother doing the join.\n\t\t\t */\n\t\t\tif (isset($sql_aro_group_ids)) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups_map arg ON arg.acl_id=a.id\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'aro_groups rg ON rg.id=arg.group_id';\n\t\t\t}\n\n\t\t\t// this join is necessary to weed out rules associated with axo groups\n\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups_map axg ON axg.acl_id=a.id';\n\n\t\t\t/*\n\t\t\t * if there are no axo groups, don't bother doing the join.\n\t\t\t * it is only used to rank by the level of the group.\n\t\t\t */\n\t\t\tif (isset($sql_axo_group_ids)) {\n\t\t\t\t$query .= '\n\t\t\t\t\tLEFT JOIN\t'. $this->_db_table_prefix .'axo_groups xg ON xg.id=axg.group_id';\n\t\t\t}\n\n\t\t\t//Move the below line to the LEFT JOIN above for PostgreSQL's sake.\n\t\t\t//AND\tac.acl_id=a.id\n\t\t\t$query .= '\n\t\t\t\t\tWHERE\t\ta.enabled=1\n\t\t\t\t\t\tAND\t\t(ac.section_value='. $this->db->quote($aco_section_value) .' AND ac.value='. $this->db->quote($aco_value) .')';\n\n\t\t\t// if we are querying an aro group\n\t\t\tif ($aro_section_value == $this->_group_switch) {\n\t\t\t\t// if acl_get_groups did not return an array\n\t\t\t\tif ( !isset ($sql_aro_group_ids) ) {\n\t\t\t\t\t$this->debug_text ('acl_query(): Invalid ARO Group: '. $aro_value);\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\trg.id IN ('. $sql_aro_group_ids .')';\n\n\t\t\t\t$order_by[] = '(rg.rgt-rg.lft) ASC';\n\t\t\t} else {\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\t((ar.section_value='. $this->db->quote($aro_section_value) .' AND ar.value='. $this->db->quote($aro_value) .')';\n\n\t\t\t\tif ( isset ($sql_aro_group_ids) ) {\n\t\t\t\t\t$query .= ' OR rg.id IN ('. $sql_aro_group_ids .')';\n\n\t\t\t\t\t$order_by[] = '(CASE WHEN ar.value IS NULL THEN 0 ELSE 1 END) DESC';\n\t\t\t\t\t$order_by[] = '(rg.rgt-rg.lft) ASC';\n\t\t\t\t}\n\n\t\t\t\t$query .= ')';\n\t\t\t}\n\n\n\t\t\t// if we are querying an axo group\n\t\t\tif ($axo_section_value == $this->_group_switch) {\n\t\t\t\t// if acl_get_groups did not return an array\n\t\t\t\tif ( !isset ($sql_axo_group_ids) ) {\n\t\t\t\t\t$this->debug_text ('acl_query(): Invalid AXO Group: '. $axo_value);\n\t\t\t\t\treturn FALSE;\n\t\t\t\t}\n\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\txg.id IN ('. $sql_axo_group_ids .')';\n\n\t\t\t\t$order_by[] = '(xg.rgt-xg.lft) ASC';\n\t\t\t} else {\n\t\t\t\t$query .= '\n\t\t\t\t\t\tAND\t\t(';\n\n\t\t\t\tif ($axo_section_value == '' AND $axo_value == '') {\n\t\t\t\t\t$query .= '(ax.section_value IS NULL AND ax.value IS NULL)';\n\t\t\t\t} else {\n\t\t\t\t\t$query .= '(ax.section_value='. $this->db->quote($axo_section_value) .' AND ax.value='. $this->db->quote($axo_value) .')';\n\t\t\t\t}\n\n\t\t\t\tif (isset($sql_axo_group_ids)) {\n\t\t\t\t\t$query .= ' OR xg.id IN ('. $sql_axo_group_ids .')';\n\n\t\t\t\t\t$order_by[] = '(CASE WHEN ax.value IS NULL THEN 0 ELSE 1 END) DESC';\n\t\t\t\t\t$order_by[] = '(xg.rgt-xg.lft) ASC';\n\t\t\t\t} else {\n\t\t\t\t\t$query .= ' AND axg.group_id IS NULL';\n\t\t\t\t}\n\n\t\t\t\t$query .= ')';\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * The ordering is always very tricky and makes all the difference in the world.\n\t\t\t * Order (ar.value IS NOT NULL) DESC should put ACLs given to specific AROs\n\t\t\t * ahead of any ACLs given to groups. This works well for exceptions to groups.\n                         * If the $return_all parameter is set to TRUE, then will return the entire\n                         * array of applicable ACL information (this option was added by OpenEMR)\n\t\t\t */\n\n\t\t\t$order_by[] = 'a.updated_date DESC';\n\n\t\t\t$query .= '\n\t\t\t\t\tORDER BY\t'. implode (',', $order_by) . '\n\t\t\t\t\t';\n\n\t\t\t// we are only interested in the first row unless $return_all is set\n                        if ($return_all) {\n                                $rs = $this->db->Execute($query);\n                        }\n                        else {\n\t\t\t        $rs = $this->db->SelectLimit($query, 1);\n                        }\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('acl_query');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n                        if ($return_all) {\n                                while ($arr = $rs->FetchRow()) {\n                                        $row[] = $arr;\n                                }\n                        }\n                        else {\n\t\t\t        $row = $rs->FetchRow();\n                        }\n\n\n\t\t\t/*\n\t\t\t * Return ACL ID. This is the key to \"hooking\" extras like pricing assigned to ACLs etc... Very useful.\n\t\t\t */\n\t\t\tif (isset($row) && is_array($row)) {\n\n                                if ($return_all) {\n                                        foreach ($row as $single_row) {\n\t\t\t\t\t\t$allow = FALSE;\n                                                if ( isset($single_row[1]) AND $single_row[1] == 1 ) {\n                                                        $allow = TRUE;\n                                                }\n                                                if ($retarr === false) {\n                                                    // PHP 8.1 deprecates Autovivification on false and it will break in PHP 9.0, so need to set the\n                                                    //  array explicitly\n                                                    $retarr = [['acl_id' => &$single_row[0], 'return_value' => &$single_row[2], 'allow' => $allow]];\n                                                } else {\n                                                    $retarr[] = array('acl_id' => &$single_row[0], 'return_value' => &$single_row[2], 'allow' => $allow);\n                                                }\n                                        }\n                                }\n                                else {\n\t\t\t\t\t$allow = FALSE;\n\t\t\t\t        if ( isset($row[1]) AND $row[1] == 1 ) {\n\t\t\t\t\t        $allow = TRUE;\n\t\t\t\t        }\n\t\t\t\t        $retarr = array('acl_id' => &$row[0], 'return_value' => &$row[2], 'allow' => $allow);\n                                }\n\t\t\t} else {\n                                if ($return_all) {\n\t\t\t                // Permission denied.\n                            if(!is_array($retarr)) {\n                                $retarr = [];\n                            }\n\t\t\t                $retarr[] = array('acl_id' => NULL, 'return_value' => NULL, 'allow' => FALSE);\n                                }\n                                else {\n                                        // Permission denied.\n                                        $retarr = array('acl_id' => NULL, 'return_value' => NULL, 'allow' => FALSE);\n                                }\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Return the query that we ran if in debug mode.\n\t\t\t */\n\t\t\tif ($debug == TRUE) {\n\t\t\t\t$retarr['query'] = &$query;\n\t\t\t}\n\n\t\t\t//Cache data.\n\t\t\t$this->put_cache($retarr, $cache_id);\n\t\t}\n\n\t\tif ($return_all)\n\t\t{\n\t\t\t$this->debug_text(\"<b>acl_query():</b> ACO Section: $aco_section_value ACO Value: $aco_value ARO Section: $aro_section_value ARO Value $aro_value ACL ID: OMITTED due to return_all\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->debug_text(\"<b>acl_query():</b> ACO Section: $aco_section_value ACO Value: $aco_value ARO Section: $aro_section_value ARO Value $aro_value ACL ID: \". $retarr['acl_id'] .' Result: '. $retarr['allow']);\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t* Grabs all groups mapped to an ARO. You can also specify a root_group for subtree'ing.\n\t* @param string The section value or the ARO or ACO\n\t* @param string The value of the ARO or ACO\n\t* @param integer The group id of the group to start at (optional)\n\t* @param string The type of group, either ARO or AXO (optional)\n\t*/\n\tfunction acl_get_groups($section_value, $value, $root_group=NULL, $group_type='ARO') {\n\n\t\tswitch(strtolower($group_type)) {\n\t\t\tcase 'axo':\n\t\t\t\t$group_type = 'axo';\n\t\t\t\t$object_table = $this->_db_table_prefix .'axo';\n\t\t\t\t$group_table = $this->_db_table_prefix .'axo_groups';\n\t\t\t\t$group_map_table = $this->_db_table_prefix .'groups_axo_map';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$group_type = 'aro';\n\t\t\t\t$object_table = $this->_db_table_prefix .'aro';\n\t\t\t\t$group_table = $this->_db_table_prefix .'aro_groups';\n\t\t\t\t$group_map_table = $this->_db_table_prefix .'groups_aro_map';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//$profiler->startTimer( \"acl_get_groups()\");\n\n\t\t//Generate unique cache id.\n\t\t$cache_id = 'acl_get_groups_'.$section_value.'-'.$value.'-'.$root_group.'-'.$group_type;\n\n\t\t$retarr = $this->get_cache($cache_id);\n\n\t\tif (!$retarr) {\n\n\t\t\t// Make sure we get the groups\n\t\t\t$query = '\n\t\t\t\t\tSELECT \t\tDISTINCT g2.id';\n\n\t\t\tif ($section_value == $this->_group_switch) {\n\t\t\t\t$query .= '\n\t\t\t\t\tFROM\t\t' . $group_table . ' g1,' . $group_table . ' g2';\n\n\t\t\t\t$where = '\n\t\t\t\t\tWHERE\t\tg1.value=' . $this->db->quote( $value );\n\t\t\t} else {\n\t\t\t\t$query .= '\n\t\t\t\t\tFROM\t\t'. $object_table .' o,'. $group_map_table .' gm,'. $group_table .' g1,'. $group_table .' g2';\n\n\t\t\t\t$where = '\n\t\t\t\t\tWHERE\t\t(o.section_value='. $this->db->quote($section_value) .' AND o.value='. $this->db->quote($value) .')\n\t\t\t\t\t\tAND\t\tgm.'. $group_type .'_id=o.id\n\t\t\t\t\t\tAND\t\tg1.id=gm.group_id';\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If root_group_id is specified, we have to narrow this query down\n\t\t\t * to just groups deeper in the tree then what is specified.\n\t\t\t * This essentially creates a virtual \"subtree\" and ignores all outside groups.\n\t\t\t * Useful for sites like sourceforge where you may seperate groups by \"project\".\n\t\t\t */\n\t\t\tif ( $root_group != '') {\n\t\t\t\t//It is important to note the below line modifies the tables being selected.\n\t\t\t\t//This is the reason for the WHERE variable.\n\t\t\t\t$query .= ','. $group_table .' g3';\n\n\t\t\t\t$where .= '\n\t\t\t\t\t\tAND\t\tg3.value='. $this->db->quote( $root_group ) .'\n\t\t\t\t\t\tAND\t\t((g2.lft BETWEEN g3.lft AND g1.lft) AND (g2.rgt BETWEEN g1.rgt AND g3.rgt))';\n\t\t\t} else {\n\t\t\t\t$where .= '\n\t\t\t\t\t\tAND\t\t(g2.lft <= g1.lft AND g2.rgt >= g1.rgt)';\n\t\t\t}\n\n\t\t\t$query .= $where;\n\n\t\t\t// $this->debug_text($query);\n\t\t\t$rs = $this->db->Execute($query);\n\n\t\t\tif (!is_object($rs)) {\n\t\t\t\t$this->debug_db('acl_get_groups');\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$retarr = array();\n\n\t\t\t//Unbuffered query?\n\t\t\twhile (!$rs->EOF) {\n\t\t\t\t$retarr[] = reset($rs->fields);\n\t\t\t\t$rs->MoveNext();\n\t\t\t}\n\n\t\t\t//Cache data.\n\t\t\t$this->put_cache($retarr, $cache_id);\n\t\t}\n\n\t\treturn $retarr;\n\t}\n\n\t/**\n\t* Uses PEAR's Cache_Lite package to grab cached arrays, objects, variables etc...\n\t* using unserialize() so it can handle more then just text string.\n\t* @param string The id of the cached object\n\t* @return mixed The cached object, otherwise FALSE if the object identifier was not found\n\t*/\n\tfunction get_cache($cache_id) {\n\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\t$this->debug_text(\"get_cache(): on ID: $cache_id\");\n\n\t\t\tif ( is_string($this->Cache_Lite->get($cache_id) ) ) {\n\t\t\t\treturn unserialize($this->Cache_Lite->get($cache_id) );\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Uses PEAR's Cache_Lite package to write cached arrays, objects, variables etc...\n\t* using serialize() so it can handle more then just text string.\n\t* @param mixed A variable to cache\n\t* @param string The id of the cached variable\n\t*/\n\tfunction put_cache($data, $cache_id) {\n\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\t$this->debug_text(\"put_cache(): Cache MISS on ID: $cache_id\");\n\n\t\t\treturn $this->Cache_Lite->save(serialize($data), $cache_id);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction clear_cache() {\n\t\tif ( $this->_caching == TRUE ) {\n\t\t\t$this->debug_text(\"clear_cache(): Clearing cache\");\n\t\t\t$this->Cache_Lite->clean();\n\t\t}\n\t}\n}\n?>\n"], "filenames": ["portal/patient/fwk/libs/verysimple/Phreeze/Criteria.php", "portal/patient/fwk/libs/verysimple/Phreeze/DataPage.php", "portal/patient/fwk/libs/verysimple/Phreeze/DataSet.php", "portal/patient/fwk/libs/verysimple/Phreeze/Phreezable.php", "portal/patient/fwk/libs/verysimple/Phreeze/Reporter.php", "portal/patient/libs/Controller/PortalPatientController.php", "portal/patient/templates/OnsiteActivityViewListView.tpl.php", "portal/patient/templates/ProviderHome.tpl.php", "portal/report/portal_patient_report.php", "portal/sign/lib/save-signature.php", "portal/sign/lib/show-signature.php", "src/Gacl/Gacl.php"], "buggy_code_start_loc": [226, 48, 95, 434, 344, 198, 13, 15, 473, 41, 40, 568], "buggy_code_end_loc": [283, 69, 169, 789, 344, 199, 18, 16, 474, 41, 104, 568], "fixing_code_start_loc": [226, 49, 96, 434, 345, 198, 13, 16, 473, 42, 41, 569], "fixing_code_end_loc": [283, 75, 175, 796, 351, 201, 25, 23, 474, 54, 116, 572], "type": "NVD-CWE-Other", "message": "Improper Access Control in GitHub repository openemr/openemr prior to 7.0.0.1.", "other": {"cve": {"id": "CVE-2022-2824", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-15T16:15:07.903", "lastModified": "2022-08-16T19:08:07.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository openemr/openemr prior to 7.0.0.1."}, {"lang": "es", "value": "Un Control de Acceso inapropiado en el repositorio de GitHub openemr/openemr versiones anteriores a 7.0.0.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.1", "matchCriteriaId": "5BE76D51-2D38-44E8-9ED0-630F49F42168"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/c5d99452c173ef21a8e2241e2bbf4b66e2d7fe11", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/1ccb2d1c-6881-4813-a5bc-1603d29b7141", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/c5d99452c173ef21a8e2241e2bbf4b66e2d7fe11"}}