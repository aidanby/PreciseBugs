{"buggy_code": ["# parse-link-header [![build status](https://secure.travis-ci.org/thlorenz/parse-link-header.png)](http://travis-ci.org/thlorenz/parse-link-header)\n\n[![testling badge](https://ci.testling.com/thlorenz/parse-link-header.png)](https://ci.testling.com/thlorenz/parse-link-header)\n\nParses a link header and returns paging information for each contained link.\n\n```js\nvar parse = require('parse-link-header');\n\nvar linkHeader =\n  '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\", ' +\n  '<https://api.github.com/user/9287/repos?page=1&per_page=100>; rel=\"prev\"; pet=\"cat\", ' +\n  '<https://api.github.com/user/9287/repos?page=5&per_page=100>; rel=\"last\"'\n\nvar parsed = parse(linkHeader);\nconsole.log(parsed);\n```\n\n```js\n{ next:\n   { page: '3',\n     per_page: '100',\n     rel: 'next',\n     url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' },\n  prev:\n   { page: '1',\n     per_page: '100',\n     rel: 'prev',\n     pet: 'cat',\n     url: 'https://api.github.com/user/9287/repos?page=1&per_page=100' },\n  last:\n   { page: '5',\n     per_page: '100',\n     rel: 'last',\n     url: 'https://api.github.com/user/9287/repos?page=5&per_page=100' } }\n```\n\n## Installation\n\n    npm install parse-link-header\n\n## API\n\n***parseLinkHeader(linkHeader : String) : Object***\n\nParses the given link header containing [web links](http://tools.ietf.org/html/rfc5988) and returns an object keyed by\nthe `rel` property that contains information about each link.\n\n### Formatting a link header\n\nThe purpose of this module is to parse the link header information. To format an object generated by this module back to the link header string, use the [format-link-header](https://github.com/jonathansamines/format-link-header) module.\n", "'use strict';\n\nvar qs = require('querystring')\n  , url = require('url')\n  , xtend = require('xtend');\n\nfunction hasRel(x) {\n  return x && x.rel;\n}\n\nfunction intoRels (acc, x) {\n  function splitRel (rel) {\n    acc[rel] = xtend(x, { rel: rel });\n  }\n\n  x.rel.split(/\\s+/).forEach(splitRel);\n\n  return acc;\n}\n\nfunction createObjects (acc, p) {\n  // rel=\"next\" => 1: rel 2: next\n  var m = p.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/)\n  if (m) acc[m[1]] = m[2];\n  return acc;\n}\n\nfunction parseLink(link) {\n  try {\n    var m         =  link.match(/<?([^>]*)>(.*)/)\n      , linkUrl   =  m[1]\n      , parts     =  m[2].split(';')\n      , parsedUrl =  url.parse(linkUrl)\n      , qry       =  qs.parse(parsedUrl.query);\n\n    parts.shift();\n\n    var info = parts\n      .reduce(createObjects, {});\n    \n    info = xtend(qry, info);\n    info.url = linkUrl;\n    return info;\n  } catch (e) {\n    return null;\n  }\n}\n\nmodule.exports = function (linkHeader) {\n  if (!linkHeader) return null;\n\n  return linkHeader.split(/,\\s*</)\n   .map(parseLink)\n   .filter(hasRel)\n   .reduce(intoRels, {});\n};\n", "'use strict';\n/*jshint asi: true */\n\nvar test = require('tape').test\nvar parse = require('..')\n\ntest('parsing a proper link header with next and last', function (t) {\n  var link = \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100>; rel=\"next\", ' + \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100>; rel=\"last\"'\n\n  var res = parse(link)\n  t.deepEqual(\n      parse(link)\n    , { next:\n        { client_id: '1',\n          client_secret: '2',\n          page: '2',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100' },\n        last:\n        { client_id: '1',\n          client_secret: '2',\n          page: '3',\n          per_page: '100',\n          rel: 'last',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next and last'\n  )\n  t.end()\n})\n\ntest('handles unquoted relationships', function (t) {\n  var link = \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100>; rel=next, ' + \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100>; rel=last'\n\n  var res = parse(link)\n  t.deepEqual(\n      parse(link)\n    , { next:\n        { client_id: '1',\n          client_secret: '2',\n          page: '2',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100' },\n        last:\n        { client_id: '1',\n          client_secret: '2',\n          page: '3',\n          per_page: '100',\n          rel: 'last',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next and last'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with next, prev and last', function (t) {\n  var linkHeader = \n    '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\", ' + \n    '<https://api.github.com/user/9287/repos?page=1&per_page=100>; rel=\"prev\", ' + \n    '<https://api.github.com/user/9287/repos?page=5&per_page=100>; rel=\"last\"'\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { page: '3',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' },\n        prev:\n        { page: '1',\n          per_page: '100',\n          rel: 'prev',\n          url: 'https://api.github.com/user/9287/repos?page=1&per_page=100' },\n        last:\n        { page: '5',\n          per_page: '100',\n          rel: 'last',\n          url: 'https://api.github.com/user/9287/repos?page=5&per_page=100' } }\n    , 'parses out link, page and perPage for next, prev and last'\n  )\n  t.end()\n})\n\ntest('parsing an empty link header', function (t) {\n  var linkHeader = '' \n  var res = parse(linkHeader)\n  \n  t.equal( parse(linkHeader) , null , 'returns null')\n  t.end()\n})\n\ntest('parsing a proper link header with next and a link without rel', function (t) {\n  var linkHeader = \n    '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\", ' + \n    '<https://api.github.com/user/9287/repos?page=1&per_page=100>; pet=\"cat\", '\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { page: '3',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next only'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with next and properties besides rel', function (t) {\n  var linkHeader = \n    '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\"; hello=\"world\"; pet=\"cat\"'\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { page: '3',\n          per_page: '100',\n          rel: 'next',\n          hello: 'world',\n          pet: 'cat',\n          url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next and all other properties'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with a comma in the url', function (t) {\n  var linkHeader = \n    '<https://imaginary.url.notreal/?name=What,+me+worry>; rel=\"next\";'\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { rel: 'next',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/?name=What,+me+worry' } }\n    , 'correctly parses URL with comma'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with a multi-word rel', function (t) {\n  var linkHeader =\n    '<https://imaginary.url.notreal/?name=What,+me+worry>; rel=\"next page\";'\n\n  var res = parse(linkHeader)\n\n  t.deepEqual(\n      parse(linkHeader)\n    , { page: { rel: 'page',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/?name=What,+me+worry' },\n        next: { rel: 'next',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/?name=What,+me+worry' }}\n    , 'correctly parses multi-word rels'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with matrix parameters', function (t) {\n  var linkHeader =\n    '<https://imaginary.url.notreal/segment;foo=bar;baz/item?name=What,+me+worry>; rel=\"next\";'\n\n  var res = parse(linkHeader)\n\n  t.deepEqual(\n      parse(linkHeader)\n    , { next: { rel: 'next',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/segment;foo=bar;baz/item?name=What,+me+worry' }}\n    , 'correctly parses url with matrix parameters'\n  )\n  t.end()\n})\n"], "fixing_code": ["# parse-link-header [![build status](https://secure.travis-ci.org/thlorenz/parse-link-header.png)](http://travis-ci.org/thlorenz/parse-link-header)\n\n[![testling badge](https://ci.testling.com/thlorenz/parse-link-header.png)](https://ci.testling.com/thlorenz/parse-link-header)\n\nParses a link header and returns paging information for each contained link.\n\n```js\nvar parse = require('parse-link-header');\n\nvar linkHeader =\n  '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\", ' +\n  '<https://api.github.com/user/9287/repos?page=1&per_page=100>; rel=\"prev\"; pet=\"cat\", ' +\n  '<https://api.github.com/user/9287/repos?page=5&per_page=100>; rel=\"last\"'\n\nvar parsed = parse(linkHeader);\nconsole.log(parsed);\n```\n\n```js\n{ next:\n   { page: '3',\n     per_page: '100',\n     rel: 'next',\n     url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' },\n  prev:\n   { page: '1',\n     per_page: '100',\n     rel: 'prev',\n     pet: 'cat',\n     url: 'https://api.github.com/user/9287/repos?page=1&per_page=100' },\n  last:\n   { page: '5',\n     per_page: '100',\n     rel: 'last',\n     url: 'https://api.github.com/user/9287/repos?page=5&per_page=100' } }\n```\n\n## Installation\n\n    npm install parse-link-header\n\n## API\n\n***parseLinkHeader(linkHeader : String) : Object***\n\nParses the given link header containing [web links](http://tools.ietf.org/html/rfc5988) and returns an object keyed by\nthe `rel` property that contains information about each link.\n\n### Environmental Variables\n\nTo avoid redundantly parsing of extremely long (invalid) input, the package uses 2 env variabes:\n\n`PARSE_LINK_HEADER_MAXLEN` - Sets the number of characters the input should be limited to - longer inputs will not be handled. Defaults to `2000`.\n\n`PARSE_LINK_HEADER_THROW_ON_MAXLEN_EXCEEDED` - Defines behavior for when the `PARSE_LINK_HEADER_MAXLEN` parameter is exceeded. if defined, an error will be thrown; if it's `null`, the function fails silently by returning `null`. Defaults to `null`.\n\n### Formatting a link header\n\nThe purpose of this module is to parse the link header information. To format an object generated by this module back to the link header string, use the [format-link-header](https://github.com/jonathansamines/format-link-header) module.\n", "'use strict';\n\nvar qs = require('querystring')\n  , url = require('url')\n  , xtend = require('xtend');\n\nconst PARSE_LINK_HEADER_MAXLEN = parseInt(process.env.PARSE_LINK_HEADER_MAXLEN) || 2000;\nconst PARSE_LINK_HEADER_THROW_ON_MAXLEN_EXCEEDED = process.env.PARSE_LINK_HEADER_THROW_ON_MAXLEN_EXCEEDED != null\n\nfunction hasRel(x) {\n  return x && x.rel;\n}\n\nfunction intoRels (acc, x) {\n  function splitRel (rel) {\n    acc[rel] = xtend(x, { rel: rel });\n  }\n\n  x.rel.split(/\\s+/).forEach(splitRel);\n\n  return acc;\n}\n\nfunction createObjects (acc, p) {\n  // rel=\"next\" => 1: rel 2: next\n  var m = p.match(/\\s*(.+)\\s*=\\s*\"?([^\"]+)\"?/)\n  if (m) acc[m[1]] = m[2];\n  return acc;\n}\n\nfunction parseLink(link) {\n  try {\n    var m         =  link.match(/<?([^>]*)>(.*)/)\n      , linkUrl   =  m[1]\n      , parts     =  m[2].split(';')\n      , parsedUrl =  url.parse(linkUrl)\n      , qry       =  qs.parse(parsedUrl.query);\n\n    parts.shift();\n\n    var info = parts\n      .reduce(createObjects, {});\n    \n    info = xtend(qry, info);\n    info.url = linkUrl;\n    return info;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction checkHeader(linkHeader){\n  if (!linkHeader) return false;\n\n  if (linkHeader.length > PARSE_LINK_HEADER_MAXLEN) {\n    if (PARSE_LINK_HEADER_THROW_ON_MAXLEN_EXCEEDED) {\n      throw new Error('Input string too long, it should be under ' + PARSE_LINK_HEADER_MAXLEN + ' characters.');\n    } else {\n        return false;\n      }\n  }\n  return true;\n}\n\nmodule.exports = function (linkHeader) {\n  if (!checkHeader(linkHeader)) return null;\n\n  return linkHeader.split(/,\\s*</)\n   .map(parseLink)\n   .filter(hasRel)\n   .reduce(intoRels, {});\n};\n", "'use strict';\n/*jshint asi: true */\n\nvar test = require('tape').test\nvar parse = require('..')\n\ntest('parsing a proper link header with next and last', function (t) {\n  var link = \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100>; rel=\"next\", ' + \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100>; rel=\"last\"'\n\n  var res = parse(link)\n  t.deepEqual(\n      parse(link)\n    , { next:\n        { client_id: '1',\n          client_secret: '2',\n          page: '2',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100' },\n        last:\n        { client_id: '1',\n          client_secret: '2',\n          page: '3',\n          per_page: '100',\n          rel: 'last',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next and last'\n  )\n  t.end()\n})\n\ntest('handles unquoted relationships', function (t) {\n  var link = \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100>; rel=next, ' + \n    '<https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100>; rel=last'\n\n  var res = parse(link)\n  t.deepEqual(\n      parse(link)\n    , { next:\n        { client_id: '1',\n          client_secret: '2',\n          page: '2',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=2&per_page=100' },\n        last:\n        { client_id: '1',\n          client_secret: '2',\n          page: '3',\n          per_page: '100',\n          rel: 'last',\n          url: 'https://api.github.com/user/9287/repos?client_id=1&client_secret=2&page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next and last'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with next, prev and last', function (t) {\n  var linkHeader = \n    '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\", ' + \n    '<https://api.github.com/user/9287/repos?page=1&per_page=100>; rel=\"prev\", ' + \n    '<https://api.github.com/user/9287/repos?page=5&per_page=100>; rel=\"last\"'\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { page: '3',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' },\n        prev:\n        { page: '1',\n          per_page: '100',\n          rel: 'prev',\n          url: 'https://api.github.com/user/9287/repos?page=1&per_page=100' },\n        last:\n        { page: '5',\n          per_page: '100',\n          rel: 'last',\n          url: 'https://api.github.com/user/9287/repos?page=5&per_page=100' } }\n    , 'parses out link, page and perPage for next, prev and last'\n  )\n  t.end()\n})\n\ntest('parsing an empty link header', function (t) {\n  var linkHeader = '' \n  var res = parse(linkHeader)\n  \n  t.equal( parse(linkHeader) , null , 'returns null')\n  t.end()\n})\n\ntest('parsing a proper link header with next and a link without rel', function (t) {\n  var linkHeader = \n    '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\", ' + \n    '<https://api.github.com/user/9287/repos?page=1&per_page=100>; pet=\"cat\", '\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { page: '3',\n          per_page: '100',\n          rel: 'next',\n          url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next only'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with next and properties besides rel', function (t) {\n  var linkHeader = \n    '<https://api.github.com/user/9287/repos?page=3&per_page=100>; rel=\"next\"; hello=\"world\"; pet=\"cat\"'\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { page: '3',\n          per_page: '100',\n          rel: 'next',\n          hello: 'world',\n          pet: 'cat',\n          url: 'https://api.github.com/user/9287/repos?page=3&per_page=100' } }\n    , 'parses out link, page and perPage for next and all other properties'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with a comma in the url', function (t) {\n  var linkHeader = \n    '<https://imaginary.url.notreal/?name=What,+me+worry>; rel=\"next\";'\n\n  var res = parse(linkHeader)\n  \n  t.deepEqual(\n      parse(linkHeader)\n    , { next:\n        { rel: 'next',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/?name=What,+me+worry' } }\n    , 'correctly parses URL with comma'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with a multi-word rel', function (t) {\n  var linkHeader =\n    '<https://imaginary.url.notreal/?name=What,+me+worry>; rel=\"next page\";'\n\n  var res = parse(linkHeader)\n\n  t.deepEqual(\n      parse(linkHeader)\n    , { page: { rel: 'page',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/?name=What,+me+worry' },\n        next: { rel: 'next',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/?name=What,+me+worry' }}\n    , 'correctly parses multi-word rels'\n  )\n  t.end()\n})\n\ntest('parsing a proper link header with matrix parameters', function (t) {\n  var linkHeader =\n    '<https://imaginary.url.notreal/segment;foo=bar;baz/item?name=What,+me+worry>; rel=\"next\";'\n\n  var res = parse(linkHeader)\n\n  t.deepEqual(\n      parse(linkHeader)\n    , { next: { rel: 'next',\n          name: 'What, me worry',\n          url: 'https://imaginary.url.notreal/segment;foo=bar;baz/item?name=What,+me+worry' }}\n    , 'correctly parses url with matrix parameters'\n  )\n  t.end()\n})\n\ntest('parsing an extremely long link header', function (t) {\n  function payload (n) {\n    var ret = \"\"\n    for (var i = 0; i < n; i++) {\n      ret += \" \"\n    }\n    return ret\n    }\n  var linkHeader = '; rel=\"' + payload(10000) + '\",'\n\n  t.equal(\n      parse(linkHeader)\n    , null\n    , 'correctly returns null when dealing with an extremely long link header'\n  )\n  t.end()\n})\n"], "filenames": ["README.md", "index.js", "test/parse-link-header.js"], "buggy_code_start_loc": [48, 5, 188], "buggy_code_end_loc": [48, 51, 188], "fixing_code_start_loc": [49, 6, 189], "fixing_code_end_loc": [57, 67, 207], "type": "NVD-CWE-Other", "message": "The package parse-link-header before 2.0.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the checkHeader function.", "other": {"cve": {"id": "CVE-2021-23490", "sourceIdentifier": "report@snyk.io", "published": "2021-12-24T20:15:08.013", "lastModified": "2022-01-06T16:04:34.567", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package parse-link-header before 2.0.0 are vulnerable to Regular Expression Denial of Service (ReDoS) via the checkHeader function."}, {"lang": "es", "value": "El paquete parse-link-header versiones anteriores a 2.0.0, es vulnerable a la Denegaci\u00f3n de Servicio por Expresi\u00f3n Regular (ReDoS) por medio de la funci\u00f3n checkHeader"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:parse-link-header_project:parse-link-header:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "ABFF95B1-1B0A-46E9-8932-5215A8AF9579"}]}]}], "references": [{"url": "https://github.com/thlorenz/parse-link-header/commit/72f05c717b3f129c5331a07bf300ed8886eb8ae1", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2321973", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-PARSELINKHEADER-1582783", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thlorenz/parse-link-header/commit/72f05c717b3f129c5331a07bf300ed8886eb8ae1"}}