{"buggy_code": ["/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.util.FileUtils;\nimport org.olat.core.util.StringHelper;\n\npublic class FileSelection {\n\n\t/** HTML form identifier */\n\tpublic static final String FORM_ID = \"paths\";\n\t\n\tprivate List<String> files = new ArrayList<>();\n\tprivate String currentContainerRelPath;\n\t\n\tpublic FileSelection(UserRequest ureq, String currentContainerRelPath) {\n\t\tif (currentContainerRelPath.equals(\"/\")) currentContainerRelPath = \"\";\n\t\tthis.currentContainerRelPath = currentContainerRelPath;\n\t\tparse(ureq);\n\t}\n\n\tpublic List<String> getFiles() {\n\t\treturn files;\n\t}\n\t\n\t/**\n\t * Checks if there is at least one file with invalid file name in the selection.\n\t * Returns the list with the invalid filenames.\n\t * \n\t * @return\n\t */\n\tpublic List<String> getInvalidFileNames() {\n\t\tList<String> invalidFileNames = new ArrayList<>();\n\t\tList<String> filesList = getFiles();\n\t\tfor(String fileName:filesList) {\n\t\t\tif(!FileUtils.validateFilename(fileName)) {\n\t\t\t\tinvalidFileNames.add(fileName);\n\t\t\t}\n\t\t}\n\t\treturn invalidFileNames;\n\t}\n\t\n\t/**\n\t * Parse paths and build BriefcasePath wrappers.\n\t * @param base\n\t * @param ureq\n\t */\n\tprivate void parse(UserRequest ureq) {\n\t\tString[] sFiles = ureq.getHttpReq().getParameterValues(FORM_ID);\n\t\tif (sFiles == null || sFiles.length == 0) return;\n\t\tfiles = Arrays.asList(sFiles);\n\t}\n\n\t/**\n\t * Render pathset as HTML.\n\t * \n\t * @return HTML Fragment.\n\t */\n\tpublic String renderAsHtml() {\n\t\tStringBuilder sb = new StringBuilder(255);\n\t\tsb.append(\"<ul>\");\n\t\tfor (String filename:files) {\n\t\t\tsb.append(\"<li>\")\n\t\t\t  .append(currentContainerRelPath).append(\"/\").append(StringHelper.escapeHtml(filename))\n\t\t\t  .append(\"</li>\");\n\t\t}\n\t\tsb.append(\"</ul>\");\n\t\treturn sb.toString();\n\t}\n}\n", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderEvent;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.vfs.VFSVersionModule;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.Component;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.controller.BasicController;\nimport org.olat.core.gui.control.generic.modal.DialogBoxController;\nimport org.olat.core.gui.control.generic.modal.DialogBoxUIFactory;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLockApplicationType;\nimport org.olat.core.util.vfs.VFSLockManager;\n\npublic class CmdDelete extends BasicController implements FolderCommand {\n\n\tprivate static int status = FolderCommandStatus.STATUS_SUCCESS;\n\n\tprivate Translator translator;\n\tprivate FolderComponent folderComponent;\n\tprivate FileSelection fileSelection;\n\n\tprivate DialogBoxController dialogCtr;\n\tprivate DialogBoxController lockedFiledCtr;\n\t\n\tprivate final boolean versionsEnabled;\n\tprivate final VFSLockManager lockManager;\n\t\n\tprotected CmdDelete(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl);\n\t\tversionsEnabled = CoreSpringFactory.getImpl(VFSVersionModule.class).isEnabled();\n\t\tlockManager = CoreSpringFactory.getImpl(VFSLockManager.class);\n\t}\n\n\t@Override\n\tpublic Controller execute(FolderComponent fc, UserRequest ureq, WindowControl wContr, Translator trans) {\n\t\tthis.translator = trans;\n\t\tthis.folderComponent = fc;\n\t\tthis.fileSelection = new FileSelection(ureq, fc.getCurrentContainerPath());\n\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\tList<String> lockedFiles = hasLockedFiles(currentContainer, fileSelection);\n\t\tif (lockedFiles.isEmpty()) {\n\t\t\tString msg = trans.translate(\"del.confirm\") + \"<p>\" + fileSelection.renderAsHtml() + \"</p>\";\t\t\n\t\t\t// create dialog controller\n\t\t\tdialogCtr = activateYesNoDialog(ureq, trans.translate(\"del.header\"), msg, dialogCtr);\n\t\t} else {\n\t\t\tString msg = FolderCommandHelper.renderLockedMessageAsHtml(trans, lockedFiles);\n\t\t\tList<String> buttonLabels = Collections.singletonList(trans.translate(\"ok\"));\n\t\t\tlockedFiledCtr = activateGenericDialog(ureq, trans.translate(\"lock.title\"), msg, buttonLabels, lockedFiledCtr);\n\t\t}\n\t\treturn this;\n\t}\n\t\n\tpublic List<String> hasLockedFiles(VFSContainer container, FileSelection selection) {\n\t\tList<String> lockedFiles = new ArrayList<>();\n\t\tfor (String file : selection.getFiles()) {\n\t\t\tVFSItem item = container.resolve(file);\n\t\t\tif (lockManager.isLockedForMe(item, getIdentity(), VFSLockApplicationType.vfs, null)) {\n\t\t\t\tlockedFiles.add(file);\n\t\t\t}\n\t\t}\n\t\treturn lockedFiles;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\t// this controller has its own modal dialog box\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\tpublic FileSelection getFileSelection() {\n\t\treturn fileSelection;\n\t}\n\n\t@Override\n\tpublic void event(UserRequest ureq, Controller source, Event event) {\n\t\tif (source == dialogCtr) {\n\t\t\tif (DialogBoxUIFactory.isYesEvent(event)) {\t\t\t\t\n\t\t\t\t// do delete\n\t\t\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\t\t\tList<String> files = fileSelection.getFiles();\n\t\t\t\tif (files.isEmpty()) {\n\t\t\t\t\t// sometimes, browser sends empty form data...\n\t\t\t\t\tgetWindowControl().setError(translator.translate(\"failed\"));\n\t\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t\t}\n\t\t\t\tfor (String file : files) {\n\t\t\t\t\tVFSItem item = currentContainer.resolve(file);\n\t\t\t\t\tif (item != null && (item.canDelete() == VFSConstants.YES)) {\n\t\t\t\t\t\tif (versionsEnabled && item.canVersion() == VFSConstants.YES) {\n\t\t\t\t\t\t\t// Move to pub\n\t\t\t\t\t\t\titem.delete();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.deleteSilently();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetWindowControl().setWarning(translator.translate(\"del.partial\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString confirmationText = fileSelection.renderAsHtml();\n\t\t\t\tfireEvent(ureq, new FolderEvent(FolderEvent.DELETE_EVENT, confirmationText));\n\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t} else {\n\t\t\t\t// abort\n\t\t\t\tstatus = FolderCommandStatus.STATUS_CANCELED;\n\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\t@Override\n\tprotected void event(UserRequest ureq, Component source, Event event) {\n\t\t// no events to catch\n\t}\n\n\t@Override\n\tprotected void doDispose() {\n\t\t// autodisposed by basic controller\n\t}\n}\n", "/**\n * <a href=\"http://www.openolat.org\">\n * OpenOLAT - Online Learning and Training</a><br>\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n * you may not use this file except in compliance with the License.<br>\n * You may obtain a copy of the License at the\n * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache homepage</a>\n * <p>\n * Unless required by applicable law or agreed to in writing,<br>\n * software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n * See the License for the specific language governing permissions and <br>\n * limitations under the License.\n * <p>\n * Initial code contributed and copyrighted by<br>\n * frentix GmbH, http://www.frentix.com\n * <p>\n */\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.ZipOutputStream;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.logging.log4j.Logger;\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.media.MediaResource;\nimport org.olat.core.gui.media.ServletUtil;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.logging.Tracing;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.ZipUtil;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.core.util.vfs.filters.VFSSystemItemFilter;\n\n/**\n * \n * Initial date: 31.10.2014<br>\n * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com\n *\n */\npublic class CmdDownloadZip implements FolderCommand {\n\t\n\tprivate static final Logger log = Tracing.createLoggerFor(CmdDownloadZip.class);\n\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\n\n\t@Override\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wControl, Translator trans) {\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\n\t\tstatus = FolderCommandHelper.sanityCheck(wControl, folderComponent);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tFileSelection selection = new FileSelection(ureq, folderComponent.getCurrentContainerPath());\n\t\tstatus = FolderCommandHelper.sanityCheck3(wControl, folderComponent, selection);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif(selection.getFiles().isEmpty()) {\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\twControl.setWarning(trans.translate(\"warning.file.selection.empty\"));\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tMediaResource mr = new ZipMediaResource(currentContainer, selection);\n\t\tureq.getDispatchResult().setResultingMediaResource(mr);\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\tprivate static class ZipMediaResource implements MediaResource {\n\t\t\n\t\tprivate final FileSelection selection;\n\t\tprivate final VFSContainer currentContainer;\n\t\t\n\t\tpublic ZipMediaResource(VFSContainer currentContainer, FileSelection selection) {\n\t\t\tthis.selection = selection;\n\t\t\tthis.currentContainer = currentContainer;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic long getCacheControlDuration() {\n\t\t\treturn ServletUtil.CACHE_NO_CACHE;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean acceptRanges() {\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn \"application/zip\";\n\t\t}\n\n\t\t@Override\n\t\tpublic Long getSize() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic InputStream getInputStream() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Long getLastModified() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void prepare(HttpServletResponse hres) {\n\t\t\tList<String> selectedFiles = selection.getFiles();\n\t\t\t\n\t\t\tString urlEncodedLabel;\n\t\t\tif(selectedFiles.size() == 1) {\n\t\t\t\tString filename = selectedFiles.get(0);\n\t\t\t\tint lastIndexOf = filename.lastIndexOf('.');\n\t\t\t\tif(lastIndexOf > 0) {\n\t\t\t\t\tfilename = filename.substring(0, lastIndexOf);\n\t\t\t\t}\n\t\t\t\turlEncodedLabel = StringHelper.urlEncodeUTF8(filename + \".zip\");\n\t\t\t} else  {\n\t\t\t\turlEncodedLabel = \"Archive.zip\";\n\t\t\t}\n\t\t\t\n\t\t\thres.setHeader(\"Content-Disposition\",\"attachment; filename*=UTF-8''\" + urlEncodedLabel);\t\t\t\n\t\t\thres.setHeader(\"Content-Description\", urlEncodedLabel);\n\t\t\t\n\t\t\tif(selectedFiles.size() == 1 && selectedFiles.get(0).toLowerCase().endsWith(\".zip\")) {\n\t\t\t\tVFSItem singleItem = currentContainer.resolve(selectedFiles.get(0));\n\t\t\t\tif(singleItem instanceof VFSLeaf) {\n\t\t\t\t\ttry(OutputStream out = hres.getOutputStream()) {\n\t\t\t\t\t\tVFSManager.copyContent((VFSLeaf)singleItem, out);\n\t\t\t\t\t} catch(IOException e) {\n\t\t\t\t\t\tlog.error(\"\", e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprepareZip(hres, selectedFiles);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprepareZip(hres, selectedFiles);\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate void prepareZip(HttpServletResponse hres, List<String> selectedFiles) {\n\t\t\tVFSRepositoryService vfsRepositoryService = CoreSpringFactory.getImpl(VFSRepositoryService.class);\n\t\t\ttry(ZipOutputStream zout = new ZipOutputStream(hres.getOutputStream())) {\n\t\t\t\tzout.setLevel(9);\n\t\t\t\t\n\t\t\t\tList<VFSItem> vfsFiles = new ArrayList<>();\n\t\t\t\tfor (String fileName : selectedFiles) {\n\t\t\t\t\tVFSItem item = currentContainer.resolve(fileName);\n\t\t\t\t\tif (item != null) {\n\t\t\t\t\t\tvfsFiles.add(item);\n\t\t\t\t\t\t// update download counter\n\t\t\t\t\t\tif (item instanceof VFSLeaf && item.canMeta() == VFSConstants.YES) {\n\t\t\t\t\t\t\tvfsRepositoryService.increaseDownloadCount((VFSLeaf)item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (VFSItem item:vfsFiles) {\n\t\t\t\t\tZipUtil.addToZip(item, \"\", zout, new VFSSystemItemFilter(), false);\n\t\t\t\t}\n\t\t\t\tzout.flush();\n\t\t\t} catch (IOException e) {\n\t\t\t\tString className = e.getClass().getSimpleName();\n\t\t\t\tif(\"ClientAbortException\".equals(className)) {\n\t\t\t\t\tlog.debug(\"client browser probably abort when downloading zipped files\", e);\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(\"client browser probably abort when downloading zipped files\", e);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"\", e);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void release() {\n\t\t\t//\n\t\t}\n\t}\n}", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderEvent;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.notifications.NotificationsManager;\nimport org.olat.core.commons.services.notifications.SubscriptionContext;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.Component;\nimport org.olat.core.gui.components.link.Link;\nimport org.olat.core.gui.components.link.LinkFactory;\nimport org.olat.core.gui.components.tree.MenuTree;\nimport org.olat.core.gui.components.velocity.VelocityContainer;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.DefaultController;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.generic.folder.FolderTreeModel;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.util.Util;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSLockApplicationType;\nimport org.olat.core.util.vfs.VFSLockManager;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.core.util.vfs.VFSStatus;\nimport org.olat.core.util.vfs.callbacks.VFSSecurityCallback;\nimport org.olat.core.util.vfs.filters.VFSItemFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class CmdMoveCopy extends DefaultController implements FolderCommand {\n\n\tprivate static final String VELOCITY_ROOT = Util.getPackageVelocityRoot(CmdMoveCopy.class);\n\tprivate static int status = FolderCommandStatus.STATUS_SUCCESS;\n\n\tprivate Translator translator;\n\n\tprivate MenuTree selTree;\n\tprivate FileSelection fileSelection;\n\tprivate Link selectButton, cancelButton;\n\tprivate FolderComponent folderComponent;\n\tprivate final boolean move;\n\t\n\t@Autowired\n\tprivate VFSLockManager vfsLockManager;\n\t@Autowired\n\tprivate VFSRepositoryService vfsRepositoryService;\n\t@Autowired\n\tprivate NotificationsManager notificationsManager;\n\n\tprotected CmdMoveCopy(WindowControl wControl, boolean move) {\n\t\tsuper(wControl);\n\t\tthis.move = move;\n\t}\n\t\n\t@Override\n\tpublic Controller execute(FolderComponent fc, UserRequest ureq, WindowControl windowControl, Translator trans) {\n\t\tthis.folderComponent = fc;\n\t\tthis.translator = trans;\n\t\tthis.fileSelection = new FileSelection(ureq, fc.getCurrentContainerPath());\n\t\t\t\t\n\t\tVelocityContainer main = new VelocityContainer(\"mc\", VELOCITY_ROOT + \"/movecopy.html\", translator, this);\n\t\tmain.contextPut(\"fileselection\", fileSelection);\n\t\t\n\t\t//check if command is executed on a file list containing invalid filenames or paths\n\t\tif(!fileSelection.getInvalidFileNames().isEmpty()) {\t\t\n\t\t\tmain.contextPut(\"invalidFileNames\", fileSelection.getInvalidFileNames());\n\t\t}\t\t\n\n\t\tselTree = new MenuTree(null, \"seltree\", this);\n\t\tFolderTreeModel ftm = new FolderTreeModel(ureq.getLocale(), fc.getRootContainer(),\n\t\t\t\ttrue, false, true, fc.getRootContainer().canWrite() == VFSConstants.YES, new EditableFilter());\n\t\tselTree.setTreeModel(ftm);\n\t\tselectButton = LinkFactory.createButton(move ? \"move\" : \"copy\", main, this);\n\t\tcancelButton = LinkFactory.createButton(\"cancel\", main, this);\n\n\t\tmain.put(\"seltree\", selTree);\n\t\tif (move) {\n\t\t\tmain.contextPut(\"move\", Boolean.TRUE);\n\t\t}\n\n\t\tsetInitialComponent(main);\n\t\treturn this;\n\t}\n\t\n\tpublic boolean isMoved() {\n\t\treturn move;\n\t}\n\t\n\tpublic FileSelection getFileSelection() {\n\t\treturn fileSelection;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\tpublic String getTarget() {\n\t\tFolderTreeModel ftm = (FolderTreeModel) selTree.getTreeModel();\n\t\treturn ftm.getSelectedPath(selTree.getSelectedNode());\n\t}\n\n\t@Override\n\tpublic void event(UserRequest ureq, Component source, Event event) {\n\t\tif(cancelButton == source) {\n\t\t\tstatus = FolderCommandStatus.STATUS_CANCELED;\n\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t} else if (selectButton == source) {\n\t\t\tdoMove(ureq);\n\t\t}\n\t}\n\t\n\tprivate void doMove(UserRequest ureq) {\n\t\tFolderTreeModel ftm = (FolderTreeModel) selTree.getTreeModel();\n\t\tString selectedPath = ftm.getSelectedPath(selTree.getSelectedNode());\n\t\tif (selectedPath == null) {\n\t\t\tabortFailed(ureq, \"failed\");\n\t\t\treturn;\n\t\t}\n\t\tVFSStatus vfsStatus = VFSConstants.SUCCESS;\n\t\tVFSContainer rootContainer = folderComponent.getRootContainer();\n\t\tVFSItem vfsItem = rootContainer.resolve(selectedPath);\n\t\tif (vfsItem == null || (vfsItem.canWrite() != VFSConstants.YES)) {\n\t\t\tabortFailed(ureq, \"failed\");\n\t\t\treturn;\n\t\t}\n\t\t// copy the files\n\t\tVFSContainer target = (VFSContainer)vfsItem;\n\t\tList<VFSItem> sources = getSanityCheckedSourceItems(target, ureq);\n\t\tif (sources == null) return;\n\t\t\n\t\tfor (VFSItem vfsSource:sources) {\n\t\t\tVFSItem targetFile = target.resolve(vfsSource.getName());\n\t\t\tif(vfsSource instanceof VFSLeaf && targetFile != null && targetFile.canVersion() == VFSConstants.YES) {\n\t\t\t\t//add a new version to the file\n\t\t\t\tVFSLeaf sourceLeaf = (VFSLeaf)vfsSource;\n\t\t\t\tvfsRepositoryService.addVersion(sourceLeaf, ureq.getIdentity(), false, \"\", sourceLeaf.getInputStream());\n\t\t\t} else {\n\t\t\t\tvfsStatus = target.copyFrom(vfsSource, ureq.getIdentity());\n\t\t\t}\n\t\t\tif (vfsStatus != VFSConstants.SUCCESS) {\n\t\t\t\tString errorKey = \"failed\";\n\t\t\t\tif (vfsStatus == VFSConstants.ERROR_QUOTA_EXCEEDED)\n\t\t\t\t\terrorKey = \"QuotaExceeded\";\n\t\t\t\tabortFailed(ureq, errorKey);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (move) {\n\t\t\t\t// if move, delete the source. Note that meta source\n\t\t\t\t// has already been delete (i.e. moved)\n\t\t\t\tvfsSource.delete();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// after a copy or a move, notify the subscribers\n\t\tVFSSecurityCallback secCallback = VFSManager.findInheritedSecurityCallback(folderComponent.getCurrentContainer());\n\t\tif (secCallback != null) {\n\t\t\tSubscriptionContext subsContext = secCallback.getSubscriptionContext();\n\t\t\tif (subsContext != null) {\n\t\t\t\tnotificationsManager.markPublisherNews(subsContext, ureq.getIdentity(), true);\n\t\t\t}\n\t\t}\n\t\tfireEvent(ureq, new FolderEvent(move ? FolderEvent.MOVE_EVENT : FolderEvent.COPY_EVENT, fileSelection.renderAsHtml()));\n\t\tnotifyFinished(ureq);\n\t}\n\t\n\tprivate void notifyFinished(UserRequest ureq) {\n\t\tVFSContainer container = VFSManager.findInheritingSecurityCallbackContainer(folderComponent.getRootContainer());\n\t\tVFSSecurityCallback secCallback = container.getLocalSecurityCallback();\n\t\tif(secCallback != null) {\n\t\t\tSubscriptionContext subsContext = secCallback.getSubscriptionContext();\n\t\t\tif (subsContext != null) {\n\t\t\t\tnotificationsManager.markPublisherNews(subsContext, ureq.getIdentity(), true);\n\t\t\t}\n\t\t}\n\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t}\n\n\t/**\n\t * Get the list of source files. Sanity check if resolveable, overlapping or\n\t * a target with the same name already exists. In such cases, set the error message, fire\n\t * the abort event and return null.\n\t * \n\t * @param target\n\t * @param ureq\n\t * @return\n\t */\n\tprivate List<VFSItem> getSanityCheckedSourceItems(VFSContainer target, UserRequest ureq) {\n\t\t// collect all source files first\n\t\t\n\t\tList<VFSItem> sources = new ArrayList<>();\n\t\tfor (String sourceRelPath:fileSelection.getFiles()) {\n\t\t\tVFSItem vfsSource = folderComponent.getCurrentContainer().resolve(sourceRelPath);\n\t\t\tif (vfsSource == null) {\n\t\t\t\tabortFailed(ureq, \"FileDoesNotExist\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (vfsSource instanceof VFSContainer) {\n\t\t\t\t// if a folder... check if they are overlapping\n\t\t\t\tif (VFSManager.isContainerDescendantOrSelf(target, (VFSContainer)vfsSource)) {\n\t\t\t\t\tabortFailed(ureq, \"OverlappingTarget\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (vfsLockManager.isLockedForMe(vfsSource, ureq.getIdentity(), VFSLockApplicationType.vfs, null)) {\n\t\t\t\tabortFailed(ureq, \"lock.title\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// check for existence... this will also prevent to copy item over itself\n\t\t\tVFSItem item = target.resolve(vfsSource.getName());\n\t\t\tif (item != null) {\n\t\t\t\tabortFailed(ureq, \"TargetNameAlreadyUsed\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\tif (vfsSource.canCopy() != VFSConstants.YES) {\n\t\t\t\tgetWindowControl().setError(translator.translate(\"FileMoveCopyFailed\", new String[] {vfsSource.getName()}));\n\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tsources.add(vfsSource);\n\t\t}\n\t\treturn sources;\n\t}\n\t\n\tprivate void abortFailed(UserRequest ureq, String errorMessageKey) {\n\t\tgetWindowControl().setError(translator.translate(errorMessageKey));\n\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t}\n\t\n\t@Override\n\tprotected void doDispose() {\n\t\t//\n\t}\n\t\n\tprivate static final class EditableFilter implements VFSItemFilter {\n\t\t\n\t\t@Override\n\t\tpublic boolean accept(VFSItem vfsItem) {\n\t\t\tVFSSecurityCallback secCallback = vfsItem.getLocalSecurityCallback();\n\t\t\tif(secCallback != null && !secCallback.canWrite()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n}", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.notifications.NotificationsManager;\nimport org.olat.core.commons.services.notifications.SubscriptionContext;\nimport org.olat.core.commons.services.vfs.VFSMetadata;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.commons.services.vfs.model.VFSMetadataImpl;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.Component;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.controller.BasicController;\nimport org.olat.core.gui.control.generic.modal.DialogBoxController;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.id.Identity;\nimport org.olat.core.logging.AssertException;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.ZipUtil;\nimport org.olat.core.util.vfs.Quota;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.core.util.vfs.callbacks.VFSSecurityCallback;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class CmdUnzip extends BasicController implements FolderCommand {\n\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\n\t\n\tprivate Translator translator;\n\tprivate DialogBoxController lockedFiledCtr;\n\t\n\t@Autowired\n\tprivate VFSRepositoryService vfsRepositoryService;\n\t@Autowired\n\tprivate NotificationsManager notificationsManager;\n\t\n\tpublic CmdUnzip(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl);\n\t}\n\t\n\t@Override\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wContr, Translator trans) {\n\t\tthis.translator = trans;\n\t\tFileSelection selection = new FileSelection(ureq, folderComponent.getCurrentContainerPath());\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\tif (currentContainer.canWrite() != VFSConstants.YES)\n\t\t\tthrow new AssertException(\"Cannot unzip to folder. Writing denied.\");\n\t\t\t\n\t  //check if command is executed on a file containing invalid filenames or paths - checks if the resulting folder has a valid name\n\t\tif(selection.getInvalidFileNames().size()>0) {\t\t\t\t\n\t\t\tstatus = FolderCommandStatus.STATUS_INVALID_NAME;\n\t\t\treturn null;\n\t\t}\t\t\n\t\t\n\t\tList<String> lockedFiles = new ArrayList<>();\n\t\tfor (String sItem:selection.getFiles()) {\n\t\t\tVFSItem vfsItem = currentContainer.resolve(sItem);\n\t\t\tif (vfsItem instanceof VFSLeaf) {\n\t\t\t\ttry {\n\t\t\t\t\tlockedFiles.addAll(checkLockedFiles((VFSLeaf)vfsItem, currentContainer, ureq.getIdentity()));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tString name = vfsItem == null ? \"NULL\" : vfsItem.getName();\n\t\t\t\t\tgetWindowControl().setError(translator.translate(\"FileUnzipFailed\", new String[]{name}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!lockedFiles.isEmpty()) {\n\t\t\tString msg = FolderCommandHelper.renderLockedMessageAsHtml(trans, lockedFiles);\n\t\t\tList<String> buttonLabels = Collections.singletonList(trans.translate(\"ok\"));\n\t\t\tlockedFiledCtr = activateGenericDialog(ureq, trans.translate(\"lock.title\"), msg, buttonLabels, lockedFiledCtr);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tVFSItem currentVfsItem = null;\n\t\ttry {\n\t\t\tboolean fileNotExist = false;\n\t\t\tfor (String sItem:selection.getFiles()) {\n\t\t\t\tcurrentVfsItem = currentContainer.resolve(sItem);\n\t\t\t\tif (currentVfsItem instanceof VFSLeaf) {\n\t\t\t\t\tif (!doUnzip((VFSLeaf)currentVfsItem, currentContainer, ureq, wContr)) {\n\t\t\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfileNotExist = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (fileNotExist) {\n\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\tgetWindowControl().setError(translator.translate(\"FileDoesNotExist\"));\n\t\t\t}\n\t\t\t\n\t\t\tVFSContainer inheritingCont = VFSManager.findInheritingSecurityCallbackContainer(folderComponent.getRootContainer());\n\t\t\tif(inheritingCont != null) {\n\t\t\t\tVFSSecurityCallback secCallback = inheritingCont.getLocalSecurityCallback();\n\t\t\t\tif(secCallback != null) {\n\t\t\t\t\tSubscriptionContext subsContext = secCallback.getSubscriptionContext();\n\t\t\t\t\tif (subsContext != null) {\n\t\t\t\t\t\tnotificationsManager.markPublisherNews(subsContext, ureq.getIdentity(), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tlogError(\"Corrupted ZIP\", e);\n\t\t\tString name = currentVfsItem == null ? \"NULL\" : currentVfsItem.getName();\n\t\t\tgetWindowControl().setError(translator.translate(\"FileUnzipFailed\", new String[]{name}));\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\tprivate List<String> checkLockedFiles(VFSLeaf vfsItem, VFSContainer currentContainer, Identity identity) {\n\t\tString name = vfsItem.getName();\n\t\tif (!name.toLowerCase().endsWith(\".zip\")) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\n\t\tif(currentContainer.canVersion() != VFSConstants.YES) {\n\t\t\t//this command don't overwrite existing folders\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\t\n\t\tString sZipContainer = name.substring(0, name.length() - 4);\n\t\tVFSItem zipContainer = currentContainer.resolve(sZipContainer);\n\t\tif(zipContainer == null) {\n\t\t\treturn Collections.emptyList();\n\t\t} else if (zipContainer instanceof VFSContainer) {\n\t\t\treturn ZipUtil.checkLockedFileBeforeUnzipNonStrict(vfsItem, (VFSContainer)zipContainer, identity);\n\t\t} else {\n\t\t\t//replace a file with a folder ???\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t}\n\n\tprivate boolean doUnzip(VFSLeaf vfsItem, VFSContainer currentContainer, UserRequest ureq, WindowControl wControl) {\n\t\tString name = vfsItem.getName();\n\t\tif (!name.toLowerCase().endsWith(\".zip\")) {\n\t\t\twControl.setError(translator.translate(\"FileUnzipFailed\", new String[] {vfsItem.getName()}));\n\t\t\treturn false;\n\t\t} \n\t\t\n\t\t// we make a new folder with the same name as the zip file\n\t\tString sZipContainer = name.substring(0, name.length() - 4);\n\t\t\n\t\tboolean versioning = currentContainer.canVersion() == VFSConstants.YES;\n\t\t\n\t\tVFSContainer zipContainer = currentContainer.createChildContainer(sZipContainer);\n\t\tif (zipContainer == null) {\n\t\t\tif(versioning) {\n\t\t\t\tVFSItem resolvedItem = currentContainer.resolve(sZipContainer);\n\t\t\t\tif(resolvedItem instanceof VFSContainer) {\n\t\t\t\t\tzipContainer = (VFSContainer)resolvedItem;\n\t\t\t\t} else {\n\t\t\t\t\tString numberedFilename = findContainerName(currentContainer, sZipContainer);\n\t\t\t\t\tif(StringHelper.containsNonWhitespace(numberedFilename)) {\n\t\t\t\t\t\tzipContainer = currentContainer.createChildContainer(numberedFilename);\n\t\t\t\t\t}\n\t\t\t\t\tif(zipContainer == null) {// we try our best\n\t\t\t\t\t\twControl.setError(translator.translate(\"unzip.alreadyexists\", new String[] {sZipContainer}));\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// folder already exists... issue warning\n\t\t\t\twControl.setError(translator.translate(\"unzip.alreadyexists\", new String[] {sZipContainer}));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (zipContainer.canMeta() == VFSConstants.YES) {\n\t\t\tVFSMetadata info = zipContainer.getMetaInfo();\n\t\t\tif(info instanceof VFSMetadataImpl) {\n\t\t\t\t((VFSMetadataImpl)info).setFileInitializedBy(ureq.getIdentity());\n\t\t\t\tvfsRepositoryService.updateMetadata(info);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ZipUtil.unzipNonStrict(vfsItem, zipContainer, ureq.getIdentity(), versioning)) {\n\t\t\t// operation failed - rollback\n\t\t\tzipContainer.delete();\n\t\t\twControl.setError(translator.translate(\"failed\"));\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// check quota\n\t\t\tlong quotaLeftKB = VFSManager.getQuotaLeftKB(currentContainer);\n\t\t\tif (quotaLeftKB != Quota.UNLIMITED && quotaLeftKB < 0) {\n\t\t\t\t// quota exceeded - rollback\n\t\t\t\tzipContainer.delete();\n\t\t\t\twControl.setError(translator.translate(\"QuotaExceeded\"));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tprivate String findContainerName(VFSContainer container, String filename) {\n\t\tString newName = filename;\n\t\tVFSItem newFile = container.resolve(newName);\n\t\tfor(int count=1; newFile != null && count < 999 ; count++) {\n\t\t\tnewName = filename + \"_\" + count;\n\t\t    newFile = container.resolve(newName);\n\t\t}\n\t\tif(newFile == null) {\n\t\t\treturn newName;\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\n\t@Override\n\tprotected void doDispose() {\n\t\t//autodisposed by BasicController\n\t}\n\n\t@Override\n\tprotected void event(UserRequest ureq, Component source, Event event) {\n\t\t// no events to catch\n\t}\n\t\n\t@Override\n\tpublic void event(UserRequest ureq, Controller source, Event event) {\n\t\t// no events to catch\n\t}\n\t\n\t\n\n}\n", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderEvent;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.form.flexible.FormItemContainer;\nimport org.olat.core.gui.components.form.flexible.elements.TextElement;\nimport org.olat.core.gui.components.form.flexible.impl.FormBasicController;\nimport org.olat.core.gui.components.form.flexible.impl.FormLayoutContainer;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.logging.AssertException;\nimport org.olat.core.util.FileUtils;\nimport org.olat.core.util.ZipUtil;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.filters.VFSSystemItemFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * \n * Description:<br>\n * Provides a CreateItemForm and creates a zip file if input valid.\n * \n * <P>\n * Initial Date:  30.01.2008 <br>\n * @author Lavinia Dumitrescu\n */\npublic class CmdZip extends FormBasicController implements FolderCommand {\n\t\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\t\n\n\tprivate VFSContainer currentContainer;\n\tprivate FileSelection selection;\n\tprivate TextElement textElement;\n\t\n\t@Autowired\n\tprivate VFSRepositoryService vfsRepositoryService;\n\t\n\tprotected CmdZip(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl);\n\t}\n\t\n\t@Override\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wControl, Translator trans) {\n\t\tsetTranslator(trans);\n\t\tcurrentContainer = folderComponent.getCurrentContainer();\n\t\tif (currentContainer.canWrite() != VFSConstants.YES) {\n\t\t\tthrow new AssertException(\"Cannot write to current folder.\");\n\t\t}\n\t\t\n\t\tstatus = FolderCommandHelper.sanityCheck(wControl, folderComponent);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tselection = new FileSelection(ureq, folderComponent.getCurrentContainerPath());\n\t\tstatus = FolderCommandHelper.sanityCheck3(wControl, folderComponent, selection);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif(selection.getFiles().isEmpty()) {\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\twControl.setWarning(trans.translate(\"warning.file.selection.empty\"));\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tinitForm(ureq);\n\t\treturn this;\n\t}\n\t\n\t@Override\n\tprotected void initForm(FormItemContainer formLayout, Controller listener, UserRequest ureq) {\n\t\tString files = selection.renderAsHtml();\n\t\tuifactory.addStaticExampleText(\"zip.confirm\", files, formLayout);\n\t\t\n\t\ttextElement = uifactory.addTextElement(\"fileName\", \"zip.name\", 20, \"\", formLayout);\n\t\ttextElement.setMandatory(true);\t\t\t\n\t\tuifactory.addStaticTextElement(\"extension\", null, translate(\"zip.extension\"), formLayout);\n\t\t\n\t\tFormLayoutContainer formButtons = FormLayoutContainer.createButtonLayout(\"formButton\", getTranslator());\n\t\tformLayout.add(formButtons);\n\t\tuifactory.addFormSubmitButton(\"submit\",\"zip.button\", formButtons);\n\t\tuifactory.addFormCancelButton(\"cancel\", formButtons, ureq, getWindowControl());\t\n\t}\n\n\t@Override\n\tprotected void doDispose() {\n\t\t// nothing to do\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn translate(\"zip.header\");\n\t}\n\n\t@Override\n\tprotected void formCancelled(UserRequest ureq) {\n\t\tstatus = FolderCommandStatus.STATUS_CANCELED;\n\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\n\t}\n\n\t/**\n\t * Creates a zipFile by using ZipUtil and fires Event.DONE_EVENT if successful.\n\t */\n\t@Override\n\tprotected void formOK(UserRequest ureq) {\n\t\tString name = textElement.getValue();\n\t\tif(!name.toLowerCase().endsWith(\".zip\")) {\n\t\t\tname += \".zip\";\n\t\t}\n\n\t\tVFSLeaf zipFile = currentContainer.createChildLeaf(name);\n\t\tif (zipFile == null) {\n\t\t\tfireEvent(ureq, Event.FAILED_EVENT);\n\t\t\treturn;\t\t\t\t\n\t\t}\n\t\t\n\t\tList<VFSItem> vfsFiles = new ArrayList<>();\n\t\tfor (String fileName : selection.getFiles()) {\n\t\t\tVFSItem item = currentContainer.resolve(fileName);\n\t\t\tif (item != null) {\n\t\t\t\tvfsFiles.add(item);\n\t\t\t}\n\t\t}\n\t\tif (!ZipUtil.zip(vfsFiles, zipFile, new VFSSystemItemFilter(), false)) {\n\t\t\tzipFile.delete();\t\t\t\t\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t} else {\n\t\t\tvfsRepositoryService.itemSaved(zipFile, ureq.getIdentity());\n\t\t\t\n\t\t\tfireEvent(ureq, new FolderEvent(FolderEvent.ZIP_EVENT, selection.renderAsHtml()));\t\t\t\t\n\t\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\t\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\t\n\t/**\n\t * Checks if input valid.\n\t * @see org.olat.core.commons.modules.bc.commands.AbstractCreateItemForm#validateFormLogic(org.olat.core.gui.UserRequest)\n\t */\n\t@Override\n\tprotected boolean validateFormLogic(UserRequest ureq) {\n\t\tboolean isInputValid = true;\n\t\tString name = textElement.getValue();\t\t\n\t\tif(name==null || name.trim().equals(\"\")) {\n\t\t\ttextElement.setErrorKey(\"zip.name.empty\", new String[0]);\n\t\t\tisInputValid = false;\n\t\t} else {\t\t\t\t\n\t\t\tif (!validateFileName(name)) {\n\t\t\t\ttextElement.setErrorKey(\"zip.name.notvalid\", new String[0]);\n\t\t\t\tisInputValid = false;\n\t\t\t\treturn isInputValid;\n\t\t\t} \n    //Note: use java.io.File and not VFS to create a leaf. File must not exist upon ZipUtil.zip()\n\t\t\tname = name + \".zip\";\n\t\t\tVFSItem zipFile = currentContainer.resolve(name);\n\t\t\tif (zipFile != null) {\t\t\t\t\t\n\t\t\t\ttextElement.setErrorKey(\"zip.alreadyexists\", new String[] {name});\n\t\t\t\tisInputValid = false;\n\t\t\t} else {\n\t\t\t\tisInputValid = true;\n\t\t\t}\n\t\t}\t\t\t\n\t\treturn isInputValid;\t\t\t\n\t}\n\n\t/**\n\t * Checks if filename contains any prohibited chars.\n\t * @param name\n\t * @return true if file name valid.\n\t */\n\tprivate boolean validateFileName(String name) {\n\t\treturn FileUtils.validateFilename(name);\n\t}\n}", "/**\n * <a href=\"http://www.openolat.org\">\n * OpenOLAT - Online Learning and Training</a><br>\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n * you may not use this file except in compliance with the License.<br>\n * You may obtain a copy of the License at the\n * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache homepage</a>\n * <p>\n * Unless required by applicable law or agreed to in writing,<br>\n * software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n * See the License for the specific language governing permissions and <br>\n * limitations under the License.\n * <p>\n * Initial code contributed and copyrighted by<br>\n * frentix GmbH, http://www.frentix.com\n * <p>\n */\npackage org.olat.core.util.mail.ui;\n\nimport java.io.File;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.UUID;\n\nimport org.olat.basesecurity.BaseSecurity;\nimport org.olat.basesecurity.events.SingleIdentityChosenEvent;\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderConfig;\nimport org.olat.core.commons.modules.bc.commands.CmdSendMail;\nimport org.olat.core.commons.modules.bc.commands.FolderCommand;\nimport org.olat.core.commons.modules.bc.commands.FolderCommandHelper;\nimport org.olat.core.commons.modules.bc.commands.FolderCommandStatus;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.modules.bc.meta.MetaInfoController;\nimport org.olat.core.commons.services.vfs.VFSMetadata;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.form.flexible.FormItem;\nimport org.olat.core.gui.components.form.flexible.FormItemContainer;\nimport org.olat.core.gui.components.form.flexible.elements.FormLink;\nimport org.olat.core.gui.components.form.flexible.elements.TextElement;\nimport org.olat.core.gui.components.form.flexible.impl.FormBasicController;\nimport org.olat.core.gui.components.form.flexible.impl.FormEvent;\nimport org.olat.core.gui.components.form.flexible.impl.FormLayoutContainer;\nimport org.olat.core.gui.components.link.Link;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.generic.closablewrapper.CloseableCalloutWindowController;\nimport org.olat.core.gui.control.generic.folder.FolderHelper;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.gui.util.CSSHelper;\nimport org.olat.core.id.Identity;\nimport org.olat.core.id.Roles;\nimport org.olat.core.id.UserConstants;\nimport org.olat.core.id.context.BusinessControlFactory;\nimport org.olat.core.id.context.ContextEntry;\nimport org.olat.core.util.CodeHelper;\nimport org.olat.core.util.Formatter;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.Util;\nimport org.olat.core.util.mail.MailBundle;\nimport org.olat.core.util.mail.MailHelper;\nimport org.olat.core.util.mail.MailManager;\nimport org.olat.core.util.mail.MailModule;\nimport org.olat.core.util.mail.MailerResult;\nimport org.olat.core.util.vfs.LocalFileImpl;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.user.UserManager;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * \n * <h3>Description:</h3>\n * <p>\n * <p>\n * Initial Date: 7 feb. 2011 <br>\n * \n * @author srosse, stephane.rosse@frentix.com, www.frentix.com\n */\npublic class SendDocumentsByEMailController extends FormBasicController implements CmdSendMail {\n\n\tprivate TextElement bodyElement;\n\tprivate FormLink addEmailLink;\n\tprivate TextElement subjectElement;\n\tprivate FormLayoutContainer userListBox;\n\tprivate FormLayoutContainer attachmentsLayout;\n\tprivate EMailCalloutCtrl emailCalloutCtrl;\n\tprivate CloseableCalloutWindowController calloutCtrl;\n\t\n\tprivate final DecimalFormat formatMb = new DecimalFormat(\"0.00\");\n\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\n\tprivate List<File> attachments;\n\tprivate final boolean allowAttachments;\n\tprivate List<IdentityWrapper> toValues = new ArrayList<>();\n\n\t@Autowired\n\tprivate UserManager userManager;\n\t@Autowired\n\tprivate MailManager mailManager;\n\t@Autowired\n\tprivate BaseSecurity securityManager;\n\n\tpublic SendDocumentsByEMailController(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl, null, Util.createPackageTranslator(MailModule.class, ureq.getLocale(),\n\t\t\t\tUtil.createPackageTranslator(MetaInfoController.class, ureq.getLocale())));\n\t\tsetBasePackage(MailModule.class);\n\n\t\tallowAttachments = !FolderConfig.getSendDocumentLinkOnly();\n\n\t\tinitForm(ureq);\n\t}\n\n\t@Override\n\tprotected void initForm(FormItemContainer formLayout, Controller listener, UserRequest ureq) {\n\t\tsetFormDescription(\"send.mail.description\");\n\t\tsetFormStyle(\"o_send_documents\");\n\n\t\tint emailCols = 25;\n\n\t\tString toPage = velocity_root + \"/tos.html\";\n\t\tuserListBox = FormLayoutContainer.createCustomFormLayout(\"send.mail.to.auto\", getTranslator(), toPage);\n\t\tuserListBox.setLabel(\"send.mail.to\", null);\n\t\tuserListBox.setRootForm(mainForm);\n\t\tuserListBox.contextPut(\"tos\", toValues);\n\t\tformLayout.add(userListBox);\n\n\t\taddEmailLink = uifactory.addFormLink(\"add.email\", userListBox);\n\t\taddEmailLink.setIconLeftCSS(\"o_icon o_icon_add\");\n\n\t\tsubjectElement = uifactory.addTextElement(\"tsubject\", \"send.mail.subject\", 255, \"\", formLayout);\n\n\t\tbodyElement = uifactory.addTextAreaElement(\"tbody\", \"send.mail.body\", -1, 20, emailCols, false, false, \"\", formLayout);\n\n\t\tif (allowAttachments) {\n\t\t\tString page = Util.getPackageVelocityRoot(MailModule.class) + \"/sendattachments.html\";\n\t\t\tattachmentsLayout = FormLayoutContainer.createCustomFormLayout(\"attachments\", getTranslator(), page);\n\t\t\tattachmentsLayout.setRootForm(mainForm);\n\t\t\tattachmentsLayout.setLabel(\"send.mail.attachments\", null);\n\t\t\tformLayout.add(attachmentsLayout);\n\t\t}\n\n\t\tFormLayoutContainer buttonGroupLayout = FormLayoutContainer.createButtonLayout(\"buttonGroupLayout\", getTranslator());\n\t\tformLayout.add(buttonGroupLayout);\n\t\tuifactory.addFormSubmitButton(\"ok\", buttonGroupLayout);\n\t\tuifactory.addFormCancelButton(\"cancel\", buttonGroupLayout, ureq, getWindowControl());\n\t}\n\n\t@Override\n\tprotected void doDispose() {\n\t\t//\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn translate(\"send.mail.title\");\n\t}\n\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wControl, Translator translator) {\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\tVFSContainer rootContainer = folderComponent.getRootContainer();\n\n\t\tif (!VFSManager.exists(currentContainer)) {\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\tshowError(translator.translate(\"FileDoesNotExist\"));\n\t\t\treturn null;\n\t\t}\n\t\tstatus = FolderCommandHelper.sanityCheck(wControl, folderComponent);\n\t\tif (status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\tFileSelection selection = new FileSelection(ureq, folderComponent.getCurrentContainerPath());\n\t\tstatus = FolderCommandHelper.sanityCheck3(wControl, folderComponent, selection);\n\t\tif (status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean selectionWithContainer = false;\n\t\tList<String> filenames = selection.getFiles();\n\t\tList<VFSLeaf> leafs = new ArrayList<>();\n\t\tfor (String file : filenames) {\n\t\t\tVFSItem item = currentContainer.resolve(file);\n\t\t\tif (item instanceof VFSContainer) {\n\t\t\t\tselectionWithContainer = true;\n\t\t\t} else if (item instanceof VFSLeaf) {\n\t\t\t\tleafs.add((VFSLeaf) item);\n\t\t\t}\n\t\t}\n\t\tif (selectionWithContainer) {\n\t\t\tif (leafs.isEmpty()) {\n\t\t\t\twControl.setError(getTranslator().translate(\"send.mail.noFileSelected\"));\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tsetFormWarning(getTranslator().translate(\"send.mail.selectionContainsFolder\"));\n\t\t\t}\n\t\t}\n\t\tsetFiles(rootContainer, leafs);\n\t\treturn this;\n\t}\n\n\tprotected void setFiles(VFSContainer rootContainer, List<VFSLeaf> files) {\n\t\tStringBuilder subjectSb = new StringBuilder();\n\t\tif (StringHelper.containsNonWhitespace(subjectElement.getValue())) {\n\t\t\tsubjectSb.append(subjectElement.getValue()).append('\\n').append('\\n');\n\t\t}\n\t\tStringBuilder bodySb = new StringBuilder();\n\t\tif (StringHelper.containsNonWhitespace(bodyElement.getValue())) {\n\t\t\tbodySb.append(bodyElement.getValue()).append('\\n').append('\\n');\n\t\t}\n\n\t\tattachments = new ArrayList<>();\n\t\tlong fileSize = 0l;\n\t\tfor (VFSLeaf file : files) {\n\t\t\tVFSMetadata infos = null;\n\t\t\tif (file.canMeta() == VFSConstants.YES) {\n\t\t\t\tinfos = file.getMetaInfo();\n\t\t\t}\n\t\t\t// subject\n\t\t\tappendToSubject(file, infos, subjectSb);\n\n\t\t\t// body\n\t\t\tappendMetadatas(file, infos, bodySb);\n\t\t\tappendBusinessPath(rootContainer, file, bodySb);\n\t\t\tbodySb.append('\\n').append('\\n');\n\t\t\tfileSize += file.getSize();\n\t\t\tif (allowAttachments && file instanceof LocalFileImpl) {\n\t\t\t\tFile f = ((LocalFileImpl) file).getBasefile();\n\t\t\t\tattachments.add(f);\n\t\t\t}\n\t\t}\n\n\t\tint mailQuota = CoreSpringFactory.getImpl(MailModule.class).getMaxSizeForAttachement();\n\t\tlong fileSizeInMB = fileSize / (1024l * 1024l);\n\t\tif (allowAttachments) {\n\t\t\tif (fileSizeInMB > mailQuota) {\n\t\t\t\tattachments.clear();\n\t\t\t\tsetFormWarning(\"send.mail.fileToBigForAttachments\", new String[] { String.valueOf(mailQuota), String.valueOf(fileSizeInMB) });\n\t\t\t} else {\n\t\t\t\tList<FileInfo> infos = new ArrayList<>(files.size());\n\t\t\t\tfor (VFSLeaf file : files) {\n\t\t\t\t\tfinal String name = file.getName();\n\t\t\t\t\tfinal double size = file.getSize() / (1024.0 * 1024.0);\n\t\t\t\t\tfinal String sizeStr = formatMb.format(size);\n\t\t\t\t\tfinal String cssClass = CSSHelper.createFiletypeIconCssClassFor(file.getName());\n\t\t\t\t\tinfos.add(new FileInfo(name, sizeStr, cssClass));\n\t\t\t\t}\n\t\t\t\tattachmentsLayout.contextPut(\"attachments\", infos);\n\t\t\t}\n\t\t}\n\n\t\tsubjectElement.setValue(subjectSb.toString());\n\t\tbodyElement.setValue(bodySb.toString());\n\t}\n\n\tprotected void appendToSubject(VFSLeaf file, VFSMetadata infos, StringBuilder sb) {\n\t\tif (sb.length() > 0)\n\t\t\tsb.append(\", \");\n\t\tif (infos != null && StringHelper.containsNonWhitespace(infos.getTitle())) {\n\t\t\tsb.append(infos.getTitle());\n\t\t} else {\n\t\t\tsb.append(file.getName());\n\t\t}\n\t}\n\n\tprotected void appendMetadatas(VFSLeaf file, VFSMetadata infos, StringBuilder sb) {\n\t\tif (infos == null) {\n\t\t\tappendMetadata(\"mf.filename\", file.getName(), sb);\n\t\t} else {\n\t\t\tappendMetadata(\"mf.filename\", infos.getFilename(), sb);\n\t\t\tString title = infos.getTitle();\n\t\t\tif (StringHelper.containsNonWhitespace(title)) {\n\t\t\t\tappendMetadata(\"mf.title\", title, sb);\n\t\t\t}\n\t\t\tString comment = infos.getComment();\n\t\t\tif (StringHelper.containsNonWhitespace(comment)) {\n\t\t\t\tappendMetadata(\"mf.comment\", comment, sb);\n\t\t\t}\n\t\t\tString creator = infos.getCreator();\n\t\t\tif (StringHelper.containsNonWhitespace(creator)) {\n\t\t\t\tappendMetadata(\"mf.creator\", creator, sb);\n\t\t\t}\n\t\t\tString publisher = infos.getPublisher();\n\t\t\tif (StringHelper.containsNonWhitespace(publisher)) {\n\t\t\t\tappendMetadata(\"mf.publisher\", publisher, sb);\n\t\t\t}\n\t\t\tString source = infos.getSource();\n\t\t\tif (StringHelper.containsNonWhitespace(source)) {\n\t\t\t\tappendMetadata(\"mf.source\", source, sb);\n\t\t\t}\n\t\t\tString city = infos.getCity();\n\t\t\tif (StringHelper.containsNonWhitespace(city)) {\n\t\t\t\tappendMetadata(\"mf.city\", city, sb);\n\t\t\t}\n\t\t\tappendPublicationDate(infos, sb);\n\t\t\tString pages = infos.getPages();\n\t\t\tif (StringHelper.containsNonWhitespace(pages)) {\n\t\t\t\tappendMetadata(\"mf.pages\", pages, sb);\n\t\t\t}\n\t\t\tString language = infos.getLanguage();\n\t\t\tif (StringHelper.containsNonWhitespace(language)) {\n\t\t\t\tappendMetadata(\"mf.language\", language, sb);\n\t\t\t}\n\t\t\tString url = infos.getUrl();\n\t\t\tif (StringHelper.containsNonWhitespace(url)) {\n\t\t\t\tappendMetadata(\"mf.url\", url, sb);\n\t\t\t}\n\t\t\tString author = userManager.getUserDisplayName(infos.getFileInitializedBy());\n\t\t\tif (StringHelper.containsNonWhitespace(author)) {\n\t\t\t\tappendMetadata(\"mf.author\", author, sb);\n\t\t\t}\n\t\t\tString size = Formatter.formatBytes(file.getSize());\n\t\t\tappendMetadata(\"mf.size\", size, sb);\n\t\t\tDate lastModifiedDate = infos.getFileLastModified();\n\t\t\tif (lastModifiedDate != null) {\n\t\t\t\tappendMetadata(\"mf.lastModified\", Formatter.getInstance(getLocale()).formatDate(lastModifiedDate), sb);\n\t\t\t}\n\t\t\tString type = FolderHelper.extractFileType(file.getName(), getLocale());\n\t\t\tif (StringHelper.containsNonWhitespace(type)) {\n\t\t\t\tappendMetadata(\"mf.type\", type, sb);\n\t\t\t}\n\t\t\tint downloads = infos.getDownloadCount();\n\t\t\tif (infos.getDownloadCount() >= 0) {\n\t\t\t\tappendMetadata(\"mf.downloads\", String.valueOf(downloads), sb);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected void appendMetadata(String i18nKey, String value, StringBuilder sb) {\n\t\tsb.append(translate(i18nKey)).append(\": \").append(value).append('\\n');\n\t}\n\n\tprotected void appendPublicationDate(VFSMetadata infos, StringBuilder sb) {\n\t\tString[] publicationDate = infos.getPublicationDate();\n\t\tif (publicationDate == null || publicationDate.length != 2)\n\t\t\treturn;\n\t\tString month = publicationDate[1];\n\t\tString year = publicationDate[0];\n\t\tif (StringHelper.containsNonWhitespace(month) || StringHelper.containsNonWhitespace(year)) {\n\t\t\tsb.append(translate(\"mf.publishDate\")).append(\":\");\n\t\t\tif (StringHelper.containsNonWhitespace(month)) {\n\t\t\t\tsb.append(\" \").append(translate(\"mf.month\").replaceAll(\"&nbsp;\", \"\")).append(\" \").append(month);\n\t\t\t}\n\t\t\tif (StringHelper.containsNonWhitespace(year)) {\n\t\t\t\tsb.append(\" \").append(translate(\"mf.year\").replaceAll(\"&nbsp;\", \"\")).append(\" \").append(year);\n\t\t\t}\n\t\t\tsb.append('\\n');\n\t\t}\n\t}\n\n\tprotected void appendBusinessPath(VFSContainer rootContainer, VFSLeaf file, StringBuilder sb) {\n\t\tBusinessControlFactory bCF = BusinessControlFactory.getInstance();\n\t\tString businnessPath = getWindowControl().getBusinessControl().getAsString();\n\n\t\tString relPath = getRelativePath(rootContainer, file);\n\t\tbusinnessPath += \"[path=\" + relPath + \"]\";\n\n\t\tList<ContextEntry> ces = bCF.createCEListFromString(businnessPath);\n\t\tString uri = bCF.getAsURIString(ces, true);\n\t\tthis.appendMetadata(\"mf.url\", uri, sb);\n\t}\n\n\tprotected String getRelativePath(VFSContainer rootContainer, VFSLeaf file) {\n\t\tString sb = \"/\" + file.getName();\n\t\tVFSContainer parent = file.getParentContainer();\n\t\twhile (parent != null && !rootContainer.isSame(parent)) {\n\t\t\tsb = \"/\" + parent.getName() + sb;\n\t\t\tparent = parent.getParentContainer();\n\t\t}\n\t\treturn sb;\n\t}\n\n\t@Override\n\tprotected boolean validateFormLogic(UserRequest ureq) {\n\t\tboolean allOk = super.validateFormLogic(ureq);\n\n\t\tString subject = subjectElement.getValue();\n\t\tsubjectElement.clearError();\n\t\tif (!StringHelper.containsNonWhitespace(subject)) {\n\t\t\tsubjectElement.setErrorKey(\"form.legende.mandatory\", null);\n\t\t\tallOk &= false;\n\t\t} else if(subject != null && subject.length() > subjectElement.getMaxLength()) {\n\t\t\tsubjectElement.setErrorKey(\"text.element.error.notlongerthan\",\n\t\t\t\t\tnew String[]{ Integer.toString(subjectElement.getMaxLength()) });\n\t\t\tallOk &= false;\n\t\t}\n\n\t\tString body = bodyElement.getValue();\n\t\tbodyElement.clearError();\n\t\tif (!StringHelper.containsNonWhitespace(body)) {\n\t\t\tbodyElement.setErrorKey(\"form.legende.mandatory\", null);\n\t\t\tallOk &= false;\n\t\t}\n\n\t\tList<Identity> invalidTos = getInvalidToAddressesFromTextBoxList();\n\t\tuserListBox.clearError();\n\t\tif (!invalidTos.isEmpty()) {\n\t\t\tString[] invalidTosArray = new String[invalidTos.size()];\n\t\t\tuserListBox.setErrorKey(\"mailhelper.error.addressinvalid\", invalidTos.toArray(invalidTosArray));\n\t\t\tallOk &= false;\n\t\t} else if(toValues == null || toValues.isEmpty()) {\n\t\t\tuserListBox.setErrorKey(\"form.legende.mandatory\", null);\n\t\t\tallOk &= false;\n\t\t}\n\n\t\treturn allOk;\n\t}\n\n\t/**\n\t * returns a list of invalid Values within the textboxlist.\n\t * values are either email-addresses (manually added, thus external) or\n\t * usernames (from autocompletion, thus olat users)\n\t * \n\t * @return\n\t */\n\tprivate List<Identity> getInvalidToAddressesFromTextBoxList() {\n\t\tList<Identity> invalidTos = new ArrayList<>();\n\n\t\t// the toValues are either usernames (from autocompletion, thus OLAT\n\t\t// users) or email-addresses (external)\n\t\tif (FolderConfig.getSendDocumentToExtern()) {\n\t\t\tfor (IdentityWrapper toValue : toValues) {\n\t\t\t\tIdentity id = toValue.getIdentity();\n\t\t\t\tif (!MailHelper.isValidEmailAddress(id.getUser().getProperty(UserConstants.EMAIL, null))\n\t\t\t\t\t\t&& !securityManager.isIdentityVisible(id)) {\n\t\t\t\t\tinvalidTos.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (IdentityWrapper toValue : toValues) {\n\t\t\t\tIdentity id = toValue.getIdentity();\n\t\t\t\tif(!securityManager.isIdentityVisible(id)){\n\t\t\t\t\tinvalidTos.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn invalidTos;\n\t}\n\n\t@Override\n\tprotected void formInnerEvent(UserRequest ureq, FormItem source, FormEvent event) {\n\t\tif(source == addEmailLink) {\n\t\t\tdoAddEmail(ureq);\n\t\t} else if(source instanceof FormLink && source.getUserObject() instanceof IdentityWrapper) {\n\t\t\tif(source.getName().startsWith(\"rm-\")) {\n\t\t\t\tfor(Iterator<IdentityWrapper> wrapperIt=toValues.iterator(); wrapperIt.hasNext(); ) {\n\t\t\t\t\tIdentityWrapper wrapper = wrapperIt.next();\n\t\t\t\t\tif(source.getUserObject().equals(wrapper)) {\n\t\t\t\t\t\twrapperIt.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tuserListBox.setDirty(true);\n\t\t}\n\t\tsuper.formInnerEvent(ureq, source, event);\n\t}\n\n\t@Override\n\tpublic void event(UserRequest ureq, Controller source, Event event) {\n\t\tif(source == emailCalloutCtrl) {\n\t\t\tif (event instanceof SingleIdentityChosenEvent) {\n\t\t\t\taddIdentity((SingleIdentityChosenEvent)event);\n\t\t\t}\n\t\t\tcalloutCtrl.deactivate();\n\t\t}\n\t}\n\t\n\tprivate void addIdentity(SingleIdentityChosenEvent foundEvent) {\n\t\tIdentity chosenIdentity = foundEvent.getChosenIdentity();\n\t\tif (chosenIdentity != null) {\n\t\t\taddIdentity(chosenIdentity);\n\t\t}\n\t\tuserListBox.setDirty(true);\n\t}\n\t\n\tprivate void addIdentity(Identity identity) {\n\t\tFormLink rmLink = uifactory.addFormLink(\"rm-\" + CodeHelper.getForeverUniqueID(), \" \", null, userListBox, Link.NONTRANSLATED + Link.LINK);\n\t\tIdentityWrapper wrapper = new IdentityWrapper(identity, rmLink);\n\t\trmLink.setIconLeftCSS(\"o_icon o_icon_remove\");\n\t\trmLink.setUserObject(wrapper);\n\t\ttoValues.add(wrapper);\n\t\tuserListBox.setDirty(true);\n\t}\n\n\t@Override\n\tprotected void formOK(UserRequest ureq) {\n\t\tList<Identity> tos = new ArrayList<>(toValues.size());\n\t\tfor(IdentityWrapper wrapper:toValues) {\n\t\t\ttos.add(wrapper.getIdentity());\n\t\t}\n\t\tString subject = subjectElement.getValue();\n\t\tString body = bodyElement.getValue();\n\t\tsendEmail(tos, subject, body, ureq);\n\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\n\t}\n\n\t@Override\n\tprotected void formCancelled(UserRequest ureq) {\n\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\n\t}\n\t\n\t\n\t\n\tprotected void doAddEmail(UserRequest ureq) {\n\t\tString title = translate(\"add.email\");\n\t\tremoveAsListenerAndDispose(emailCalloutCtrl);\n\t\tboolean allowExtern = FolderConfig.getSendDocumentToExtern();\n\t\temailCalloutCtrl = new EMailCalloutCtrl(ureq, getWindowControl(), allowExtern);\n\t\tlistenTo(emailCalloutCtrl);\n\t\t\n\t\tremoveAsListenerAndDispose(calloutCtrl);\n\t\tcalloutCtrl = new CloseableCalloutWindowController(ureq, getWindowControl(), emailCalloutCtrl.getInitialComponent(), addEmailLink, title, true, null);\n\t\tlistenTo(calloutCtrl);\n\t\tcalloutCtrl.activate();\t\n\t}\n\n\tprotected void sendEmail(List<Identity> tos, String subject, String body, UserRequest ureq) {\n\t\tFile[] attachmentArray = null;\n\t\tif (attachments != null && !attachments.isEmpty() && allowAttachments) {\n\t\t\tattachmentArray = attachments.toArray(new File[attachments.size()]);\n\t\t}\n\n\t\tMailerResult result = new MailerResult();\n\t\tString metaId = UUID.randomUUID().toString().replace(\"-\", \"\");\n\t\tfor(Identity to:tos) {\n\t\t\tMailBundle bundle = new MailBundle();\n\t\t\tbundle.setToId(to);\n\t\t\tbundle.setMetaId(metaId);\n\t\t\tbundle.setFromId(ureq.getIdentity());\n\t\t\tbundle.setContent(subject, body, attachmentArray);\n\t\t\tresult.append(mailManager.sendMessage(bundle));\n\t\t}\n\t\t\n\t\tRoles roles = ureq.getUserSession().getRoles();\n\t\tboolean detailedErrorOutput = roles.isAdministrator() || roles.isSystemAdmin();\n\t\tMailHelper.printErrorsAndWarnings(result, getWindowControl(), detailedErrorOutput, ureq.getLocale());\n\t}\n\n\tpublic class FileInfo {\n\t\tprivate final String filename;\n\t\tprivate final String sizeInMB;\n\t\tprivate final String cssClass;\n\n\t\tpublic FileInfo(String filename, String sizeInMB, String cssClass) {\n\t\t\tthis.filename = filename;\n\t\t\tthis.sizeInMB = sizeInMB;\n\t\t\tthis.cssClass = cssClass;\n\t\t}\n\n\t\tpublic String getFilename() {\n\t\t\treturn filename;\n\t\t}\n\n\t\tpublic String getSizeInMB() {\n\t\t\treturn sizeInMB;\n\t\t}\n\n\t\tpublic String getCssClass() {\n\t\t\treturn cssClass;\n\t\t}\n\t}\n\t\n\tpublic final class IdentityWrapper {\n\t\tprivate Identity identity;\n\t\tprivate FormLink removeLink;\n\t\t\n\t\tpublic IdentityWrapper(Identity identity, FormLink removeLink) {\n\t\t\tthis.identity = identity;\n\t\t\tthis.removeLink = removeLink;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\tif(identity instanceof EMailIdentity) {\n\t\t\t\treturn identity.getUser().getProperty(UserConstants.EMAIL, null);\n\t\t\t}\n\t\t\treturn userManager.getUserDisplayName(identity);\n\t\t}\n\t\t\n\t\tpublic Identity getIdentity() {\n\t\t\treturn identity;\n\t\t}\n\t\t\n\t\tpublic String getRemoveLinkName() {\n\t\t\treturn removeLink.getComponent().getComponentName();\n\t\t}\n\t}\n}"], "fixing_code": ["/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.util.FileUtils;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\n\npublic class FileSelection {\n\n\t/** HTML form identifier */\n\tpublic static final String FORM_ID = \"paths\";\n\t\n\tprivate final List<String> files = new ArrayList<>();\n\tprivate final String currentContainerRelPath;\n\tprivate final VFSContainer currentContainer;\n\t\n\tpublic FileSelection(UserRequest ureq, VFSContainer currentContainer, String currentContainerRelPath) {\n\t\tif (currentContainerRelPath.equals(\"/\")) currentContainerRelPath = \"\";\n\t\tthis.currentContainerRelPath = currentContainerRelPath;\n\t\tthis.currentContainer = currentContainer;\n\t\tparse(ureq);\n\t}\n\n\tpublic List<String> getFiles() {\n\t\treturn files;\n\t}\n\t\n\t/**\n\t * Checks if there is at least one file with invalid file name in the selection.\n\t * Returns the list with the invalid filenames.\n\t * \n\t * @return\n\t */\n\tpublic List<String> getInvalidFileNames() {\n\t\tList<String> invalidFileNames = new ArrayList<>();\n\t\tList<String> filesList = getFiles();\n\t\tfor(String fileName:filesList) {\n\t\t\tif(!FileUtils.validateFilename(fileName)) {\n\t\t\t\tinvalidFileNames.add(fileName);\n\t\t\t}\n\t\t}\n\t\treturn invalidFileNames;\n\t}\n\t\n\t/**\n\t * Parse paths and build BriefcasePath wrappers.\n\t * @param base\n\t * @param ureq\n\t */\n\tprivate void parse(UserRequest ureq) {\n\t\tString[] sFiles = ureq.getHttpReq().getParameterValues(FORM_ID);\n\t\tif (sFiles == null || sFiles.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tList<VFSItem> items = currentContainer.getItems();\n\t\tif(items != null && !items.isEmpty()) {\n\t\t\tSet<String> itemNames =  items.stream()\n\t\t\t\t\t.map(VFSItem::getName)\n\t\t\t\t\t.collect(Collectors.toSet());\n\t\t\tfor(String sFile:sFiles) {\n\t\t\t\tif(itemNames.contains(sFile)) {\n\t\t\t\t\tfiles.add(sFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render pathset as HTML.\n\t * \n\t * @return HTML Fragment.\n\t */\n\tpublic String renderAsHtml() {\n\t\tStringBuilder sb = new StringBuilder(255);\n\t\tsb.append(\"<ul>\");\n\t\tfor (String filename:files) {\n\t\t\tsb.append(\"<li>\")\n\t\t\t  .append(currentContainerRelPath).append(\"/\").append(StringHelper.escapeHtml(filename))\n\t\t\t  .append(\"</li>\");\n\t\t}\n\t\tsb.append(\"</ul>\");\n\t\treturn sb.toString();\n\t}\n}\n", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderEvent;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.vfs.VFSVersionModule;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.Component;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.controller.BasicController;\nimport org.olat.core.gui.control.generic.modal.DialogBoxController;\nimport org.olat.core.gui.control.generic.modal.DialogBoxUIFactory;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLockApplicationType;\nimport org.olat.core.util.vfs.VFSLockManager;\n\npublic class CmdDelete extends BasicController implements FolderCommand {\n\n\tprivate static int status = FolderCommandStatus.STATUS_SUCCESS;\n\n\tprivate Translator translator;\n\tprivate FolderComponent folderComponent;\n\tprivate FileSelection fileSelection;\n\n\tprivate DialogBoxController dialogCtr;\n\tprivate DialogBoxController lockedFiledCtr;\n\t\n\tprivate final boolean versionsEnabled;\n\tprivate final VFSLockManager lockManager;\n\t\n\tprotected CmdDelete(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl);\n\t\tversionsEnabled = CoreSpringFactory.getImpl(VFSVersionModule.class).isEnabled();\n\t\tlockManager = CoreSpringFactory.getImpl(VFSLockManager.class);\n\t}\n\n\t@Override\n\tpublic Controller execute(FolderComponent fc, UserRequest ureq, WindowControl wContr, Translator trans) {\n\t\tthis.translator = trans;\n\t\tthis.folderComponent = fc;\n\t\tthis.fileSelection = new FileSelection(ureq, fc.getCurrentContainer(), fc.getCurrentContainerPath());\n\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\tList<String> lockedFiles = hasLockedFiles(currentContainer, fileSelection);\n\t\tif (lockedFiles.isEmpty()) {\n\t\t\tString msg = trans.translate(\"del.confirm\") + \"<p>\" + fileSelection.renderAsHtml() + \"</p>\";\t\t\n\t\t\t// create dialog controller\n\t\t\tdialogCtr = activateYesNoDialog(ureq, trans.translate(\"del.header\"), msg, dialogCtr);\n\t\t} else {\n\t\t\tString msg = FolderCommandHelper.renderLockedMessageAsHtml(trans, lockedFiles);\n\t\t\tList<String> buttonLabels = Collections.singletonList(trans.translate(\"ok\"));\n\t\t\tlockedFiledCtr = activateGenericDialog(ureq, trans.translate(\"lock.title\"), msg, buttonLabels, lockedFiledCtr);\n\t\t}\n\t\treturn this;\n\t}\n\t\n\tpublic List<String> hasLockedFiles(VFSContainer container, FileSelection selection) {\n\t\tList<String> lockedFiles = new ArrayList<>();\n\t\tfor (String file : selection.getFiles()) {\n\t\t\tVFSItem item = container.resolve(file);\n\t\t\tif (lockManager.isLockedForMe(item, getIdentity(), VFSLockApplicationType.vfs, null)) {\n\t\t\t\tlockedFiles.add(file);\n\t\t\t}\n\t\t}\n\t\treturn lockedFiles;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\t// this controller has its own modal dialog box\n\t\treturn true;\n\t}\n\t\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\tpublic FileSelection getFileSelection() {\n\t\treturn fileSelection;\n\t}\n\n\t@Override\n\tpublic void event(UserRequest ureq, Controller source, Event event) {\n\t\tif (source == dialogCtr) {\n\t\t\tif (DialogBoxUIFactory.isYesEvent(event)) {\t\t\t\t\n\t\t\t\t// do delete\n\t\t\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\t\t\tList<String> files = fileSelection.getFiles();\n\t\t\t\tif (files.isEmpty()) {\n\t\t\t\t\t// sometimes, browser sends empty form data...\n\t\t\t\t\tgetWindowControl().setError(translator.translate(\"failed\"));\n\t\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t\t}\n\t\t\t\tfor (String file : files) {\n\t\t\t\t\tVFSItem item = currentContainer.resolve(file);\n\t\t\t\t\tif (item != null && (item.canDelete() == VFSConstants.YES)) {\n\t\t\t\t\t\tif (versionsEnabled && item.canVersion() == VFSConstants.YES) {\n\t\t\t\t\t\t\t// Move to pub\n\t\t\t\t\t\t\titem.delete();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.deleteSilently();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetWindowControl().setWarning(translator.translate(\"del.partial\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString confirmationText = fileSelection.renderAsHtml();\n\t\t\t\tfireEvent(ureq, new FolderEvent(FolderEvent.DELETE_EVENT, confirmationText));\n\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t} else {\n\t\t\t\t// abort\n\t\t\t\tstatus = FolderCommandStatus.STATUS_CANCELED;\n\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t}\n\t\t}\n\n\t}\n\t\n\t@Override\n\tprotected void event(UserRequest ureq, Component source, Event event) {\n\t\t// no events to catch\n\t}\n\n\t@Override\n\tprotected void doDispose() {\n\t\t// autodisposed by basic controller\n\t}\n}\n", "/**\n * <a href=\"http://www.openolat.org\">\n * OpenOLAT - Online Learning and Training</a><br>\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n * you may not use this file except in compliance with the License.<br>\n * You may obtain a copy of the License at the\n * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache homepage</a>\n * <p>\n * Unless required by applicable law or agreed to in writing,<br>\n * software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n * See the License for the specific language governing permissions and <br>\n * limitations under the License.\n * <p>\n * Initial code contributed and copyrighted by<br>\n * frentix GmbH, http://www.frentix.com\n * <p>\n */\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.ZipOutputStream;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.logging.log4j.Logger;\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.media.MediaResource;\nimport org.olat.core.gui.media.ServletUtil;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.logging.Tracing;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.ZipUtil;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.core.util.vfs.filters.VFSSystemItemFilter;\n\n/**\n * \n * Initial date: 31.10.2014<br>\n * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com\n *\n */\npublic class CmdDownloadZip implements FolderCommand {\n\t\n\tprivate static final Logger log = Tracing.createLoggerFor(CmdDownloadZip.class);\n\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\n\n\t@Override\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wControl, Translator trans) {\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\n\t\tstatus = FolderCommandHelper.sanityCheck(wControl, folderComponent);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tFileSelection selection = new FileSelection(ureq, folderComponent.getCurrentContainer(), folderComponent.getCurrentContainerPath());\n\t\tstatus = FolderCommandHelper.sanityCheck3(wControl, folderComponent, selection);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif(selection.getFiles().isEmpty()) {\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\twControl.setWarning(trans.translate(\"warning.file.selection.empty22\"));\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tMediaResource mr = new ZipMediaResource(currentContainer, selection);\n\t\tureq.getDispatchResult().setResultingMediaResource(mr);\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\tprivate static class ZipMediaResource implements MediaResource {\n\t\t\n\t\tprivate final FileSelection selection;\n\t\tprivate final VFSContainer currentContainer;\n\t\t\n\t\tpublic ZipMediaResource(VFSContainer currentContainer, FileSelection selection) {\n\t\t\tthis.selection = selection;\n\t\t\tthis.currentContainer = currentContainer;\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic long getCacheControlDuration() {\n\t\t\treturn ServletUtil.CACHE_NO_CACHE;\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean acceptRanges() {\n\t\t\treturn false;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn \"application/zip\";\n\t\t}\n\n\t\t@Override\n\t\tpublic Long getSize() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic InputStream getInputStream() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Long getLastModified() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic void prepare(HttpServletResponse hres) {\n\t\t\tList<String> selectedFiles = selection.getFiles();\n\t\t\t\n\t\t\tString urlEncodedLabel;\n\t\t\tif(selectedFiles.size() == 1) {\n\t\t\t\tString filename = selectedFiles.get(0);\n\t\t\t\tint lastIndexOf = filename.lastIndexOf('.');\n\t\t\t\tif(lastIndexOf > 0) {\n\t\t\t\t\tfilename = filename.substring(0, lastIndexOf);\n\t\t\t\t}\n\t\t\t\turlEncodedLabel = StringHelper.urlEncodeUTF8(filename + \".zip\");\n\t\t\t} else  {\n\t\t\t\turlEncodedLabel = \"Archive.zip\";\n\t\t\t}\n\t\t\t\n\t\t\thres.setHeader(\"Content-Disposition\",\"attachment; filename*=UTF-8''\" + urlEncodedLabel);\t\t\t\n\t\t\thres.setHeader(\"Content-Description\", urlEncodedLabel);\n\t\t\t\n\t\t\tif(selectedFiles.size() == 1 && selectedFiles.get(0).toLowerCase().endsWith(\".zip\")) {\n\t\t\t\tVFSItem singleItem = currentContainer.resolve(selectedFiles.get(0));\n\t\t\t\tif(singleItem instanceof VFSLeaf) {\n\t\t\t\t\ttry(OutputStream out = hres.getOutputStream()) {\n\t\t\t\t\t\tVFSManager.copyContent((VFSLeaf)singleItem, out);\n\t\t\t\t\t} catch(IOException e) {\n\t\t\t\t\t\tlog.error(\"\", e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprepareZip(hres, selectedFiles);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprepareZip(hres, selectedFiles);\n\t\t\t}\n\t\t}\n\t\t\n\t\tprivate void prepareZip(HttpServletResponse hres, List<String> selectedFiles) {\n\t\t\tVFSRepositoryService vfsRepositoryService = CoreSpringFactory.getImpl(VFSRepositoryService.class);\n\t\t\ttry(ZipOutputStream zout = new ZipOutputStream(hres.getOutputStream())) {\n\t\t\t\tzout.setLevel(9);\n\t\t\t\t\n\t\t\t\tList<VFSItem> vfsFiles = new ArrayList<>();\n\t\t\t\tfor (String fileName : selectedFiles) {\n\t\t\t\t\tVFSItem item = currentContainer.resolve(fileName);\n\t\t\t\t\tif (item != null) {\n\t\t\t\t\t\tvfsFiles.add(item);\n\t\t\t\t\t\t// update download counter\n\t\t\t\t\t\tif (item instanceof VFSLeaf && item.canMeta() == VFSConstants.YES) {\n\t\t\t\t\t\t\tvfsRepositoryService.increaseDownloadCount((VFSLeaf)item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (VFSItem item:vfsFiles) {\n\t\t\t\t\tZipUtil.addToZip(item, \"\", zout, new VFSSystemItemFilter(), false);\n\t\t\t\t}\n\t\t\t\tzout.flush();\n\t\t\t} catch (IOException e) {\n\t\t\t\tString className = e.getClass().getSimpleName();\n\t\t\t\tif(\"ClientAbortException\".equals(className)) {\n\t\t\t\t\tlog.debug(\"client browser probably abort when downloading zipped files\", e);\n\t\t\t\t} else {\n\t\t\t\t\tlog.error(\"client browser probably abort when downloading zipped files\", e);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"\", e);\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic void release() {\n\t\t\t//\n\t\t}\n\t}\n}", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderEvent;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.notifications.NotificationsManager;\nimport org.olat.core.commons.services.notifications.SubscriptionContext;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.Component;\nimport org.olat.core.gui.components.link.Link;\nimport org.olat.core.gui.components.link.LinkFactory;\nimport org.olat.core.gui.components.tree.MenuTree;\nimport org.olat.core.gui.components.velocity.VelocityContainer;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.DefaultController;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.generic.folder.FolderTreeModel;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.util.Util;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSLockApplicationType;\nimport org.olat.core.util.vfs.VFSLockManager;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.core.util.vfs.VFSStatus;\nimport org.olat.core.util.vfs.callbacks.VFSSecurityCallback;\nimport org.olat.core.util.vfs.filters.VFSItemFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class CmdMoveCopy extends DefaultController implements FolderCommand {\n\n\tprivate static final String VELOCITY_ROOT = Util.getPackageVelocityRoot(CmdMoveCopy.class);\n\tprivate static int status = FolderCommandStatus.STATUS_SUCCESS;\n\n\tprivate Translator translator;\n\n\tprivate MenuTree selTree;\n\tprivate FileSelection fileSelection;\n\tprivate Link selectButton, cancelButton;\n\tprivate FolderComponent folderComponent;\n\tprivate final boolean move;\n\t\n\t@Autowired\n\tprivate VFSLockManager vfsLockManager;\n\t@Autowired\n\tprivate VFSRepositoryService vfsRepositoryService;\n\t@Autowired\n\tprivate NotificationsManager notificationsManager;\n\n\tprotected CmdMoveCopy(WindowControl wControl, boolean move) {\n\t\tsuper(wControl);\n\t\tthis.move = move;\n\t}\n\t\n\t@Override\n\tpublic Controller execute(FolderComponent fc, UserRequest ureq, WindowControl windowControl, Translator trans) {\n\t\tthis.folderComponent = fc;\n\t\tthis.translator = trans;\n\t\tthis.fileSelection = new FileSelection(ureq, fc.getCurrentContainer(), fc.getCurrentContainerPath());\n\t\t\t\t\n\t\tVelocityContainer main = new VelocityContainer(\"mc\", VELOCITY_ROOT + \"/movecopy.html\", translator, this);\n\t\tmain.contextPut(\"fileselection\", fileSelection);\n\t\t\n\t\t//check if command is executed on a file list containing invalid filenames or paths\n\t\tif(!fileSelection.getInvalidFileNames().isEmpty()) {\t\t\n\t\t\tmain.contextPut(\"invalidFileNames\", fileSelection.getInvalidFileNames());\n\t\t}\t\t\n\n\t\tselTree = new MenuTree(null, \"seltree\", this);\n\t\tFolderTreeModel ftm = new FolderTreeModel(ureq.getLocale(), fc.getRootContainer(),\n\t\t\t\ttrue, false, true, fc.getRootContainer().canWrite() == VFSConstants.YES, new EditableFilter());\n\t\tselTree.setTreeModel(ftm);\n\t\tselectButton = LinkFactory.createButton(move ? \"move\" : \"copy\", main, this);\n\t\tcancelButton = LinkFactory.createButton(\"cancel\", main, this);\n\n\t\tmain.put(\"seltree\", selTree);\n\t\tif (move) {\n\t\t\tmain.contextPut(\"move\", Boolean.TRUE);\n\t\t}\n\n\t\tsetInitialComponent(main);\n\t\treturn this;\n\t}\n\t\n\tpublic boolean isMoved() {\n\t\treturn move;\n\t}\n\t\n\tpublic FileSelection getFileSelection() {\n\t\treturn fileSelection;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\tpublic String getTarget() {\n\t\tFolderTreeModel ftm = (FolderTreeModel) selTree.getTreeModel();\n\t\treturn ftm.getSelectedPath(selTree.getSelectedNode());\n\t}\n\n\t@Override\n\tpublic void event(UserRequest ureq, Component source, Event event) {\n\t\tif(cancelButton == source) {\n\t\t\tstatus = FolderCommandStatus.STATUS_CANCELED;\n\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t} else if (selectButton == source) {\n\t\t\tdoMove(ureq);\n\t\t}\n\t}\n\t\n\tprivate void doMove(UserRequest ureq) {\n\t\tFolderTreeModel ftm = (FolderTreeModel) selTree.getTreeModel();\n\t\tString selectedPath = ftm.getSelectedPath(selTree.getSelectedNode());\n\t\tif (selectedPath == null) {\n\t\t\tabortFailed(ureq, \"failed\");\n\t\t\treturn;\n\t\t}\n\t\tVFSStatus vfsStatus = VFSConstants.SUCCESS;\n\t\tVFSContainer rootContainer = folderComponent.getRootContainer();\n\t\tVFSItem vfsItem = rootContainer.resolve(selectedPath);\n\t\tif (vfsItem == null || (vfsItem.canWrite() != VFSConstants.YES)) {\n\t\t\tabortFailed(ureq, \"failed\");\n\t\t\treturn;\n\t\t}\n\t\t// copy the files\n\t\tVFSContainer target = (VFSContainer)vfsItem;\n\t\tList<VFSItem> sources = getSanityCheckedSourceItems(target, ureq);\n\t\tif (sources == null) return;\n\t\t\n\t\tfor (VFSItem vfsSource:sources) {\n\t\t\tVFSItem targetFile = target.resolve(vfsSource.getName());\n\t\t\tif(vfsSource instanceof VFSLeaf && targetFile != null && targetFile.canVersion() == VFSConstants.YES) {\n\t\t\t\t//add a new version to the file\n\t\t\t\tVFSLeaf sourceLeaf = (VFSLeaf)vfsSource;\n\t\t\t\tvfsRepositoryService.addVersion(sourceLeaf, ureq.getIdentity(), false, \"\", sourceLeaf.getInputStream());\n\t\t\t} else {\n\t\t\t\tvfsStatus = target.copyFrom(vfsSource, ureq.getIdentity());\n\t\t\t}\n\t\t\tif (vfsStatus != VFSConstants.SUCCESS) {\n\t\t\t\tString errorKey = \"failed\";\n\t\t\t\tif (vfsStatus == VFSConstants.ERROR_QUOTA_EXCEEDED)\n\t\t\t\t\terrorKey = \"QuotaExceeded\";\n\t\t\t\tabortFailed(ureq, errorKey);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (move) {\n\t\t\t\t// if move, delete the source. Note that meta source\n\t\t\t\t// has already been delete (i.e. moved)\n\t\t\t\tvfsSource.delete();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// after a copy or a move, notify the subscribers\n\t\tVFSSecurityCallback secCallback = VFSManager.findInheritedSecurityCallback(folderComponent.getCurrentContainer());\n\t\tif (secCallback != null) {\n\t\t\tSubscriptionContext subsContext = secCallback.getSubscriptionContext();\n\t\t\tif (subsContext != null) {\n\t\t\t\tnotificationsManager.markPublisherNews(subsContext, ureq.getIdentity(), true);\n\t\t\t}\n\t\t}\n\t\tfireEvent(ureq, new FolderEvent(move ? FolderEvent.MOVE_EVENT : FolderEvent.COPY_EVENT, fileSelection.renderAsHtml()));\n\t\tnotifyFinished(ureq);\n\t}\n\t\n\tprivate void notifyFinished(UserRequest ureq) {\n\t\tVFSContainer container = VFSManager.findInheritingSecurityCallbackContainer(folderComponent.getRootContainer());\n\t\tVFSSecurityCallback secCallback = container.getLocalSecurityCallback();\n\t\tif(secCallback != null) {\n\t\t\tSubscriptionContext subsContext = secCallback.getSubscriptionContext();\n\t\t\tif (subsContext != null) {\n\t\t\t\tnotificationsManager.markPublisherNews(subsContext, ureq.getIdentity(), true);\n\t\t\t}\n\t\t}\n\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t}\n\n\t/**\n\t * Get the list of source files. Sanity check if resolveable, overlapping or\n\t * a target with the same name already exists. In such cases, set the error message, fire\n\t * the abort event and return null.\n\t * \n\t * @param target\n\t * @param ureq\n\t * @return\n\t */\n\tprivate List<VFSItem> getSanityCheckedSourceItems(VFSContainer target, UserRequest ureq) {\n\t\t// collect all source files first\n\t\t\n\t\tList<VFSItem> sources = new ArrayList<>();\n\t\tfor (String sourceRelPath:fileSelection.getFiles()) {\n\t\t\tVFSItem vfsSource = folderComponent.getCurrentContainer().resolve(sourceRelPath);\n\t\t\tif (vfsSource == null) {\n\t\t\t\tabortFailed(ureq, \"FileDoesNotExist\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (vfsSource instanceof VFSContainer) {\n\t\t\t\t// if a folder... check if they are overlapping\n\t\t\t\tif (VFSManager.isContainerDescendantOrSelf(target, (VFSContainer)vfsSource)) {\n\t\t\t\t\tabortFailed(ureq, \"OverlappingTarget\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (vfsLockManager.isLockedForMe(vfsSource, ureq.getIdentity(), VFSLockApplicationType.vfs, null)) {\n\t\t\t\tabortFailed(ureq, \"lock.title\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// check for existence... this will also prevent to copy item over itself\n\t\t\tVFSItem item = target.resolve(vfsSource.getName());\n\t\t\tif (item != null) {\n\t\t\t\tabortFailed(ureq, \"TargetNameAlreadyUsed\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\tif (vfsSource.canCopy() != VFSConstants.YES) {\n\t\t\t\tgetWindowControl().setError(translator.translate(\"FileMoveCopyFailed\", new String[] {vfsSource.getName()}));\n\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tsources.add(vfsSource);\n\t\t}\n\t\treturn sources;\n\t}\n\t\n\tprivate void abortFailed(UserRequest ureq, String errorMessageKey) {\n\t\tgetWindowControl().setError(translator.translate(errorMessageKey));\n\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t}\n\t\n\t@Override\n\tprotected void doDispose() {\n\t\t//\n\t}\n\t\n\tprivate static final class EditableFilter implements VFSItemFilter {\n\t\t\n\t\t@Override\n\t\tpublic boolean accept(VFSItem vfsItem) {\n\t\t\tVFSSecurityCallback secCallback = vfsItem.getLocalSecurityCallback();\n\t\t\tif(secCallback != null && !secCallback.canWrite()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n}", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.notifications.NotificationsManager;\nimport org.olat.core.commons.services.notifications.SubscriptionContext;\nimport org.olat.core.commons.services.vfs.VFSMetadata;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.commons.services.vfs.model.VFSMetadataImpl;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.Component;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.controller.BasicController;\nimport org.olat.core.gui.control.generic.modal.DialogBoxController;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.id.Identity;\nimport org.olat.core.logging.AssertException;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.ZipUtil;\nimport org.olat.core.util.vfs.Quota;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.core.util.vfs.callbacks.VFSSecurityCallback;\nimport org.springframework.beans.factory.annotation.Autowired;\n\npublic class CmdUnzip extends BasicController implements FolderCommand {\n\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\n\t\n\tprivate Translator translator;\n\tprivate DialogBoxController lockedFiledCtr;\n\t\n\t@Autowired\n\tprivate VFSRepositoryService vfsRepositoryService;\n\t@Autowired\n\tprivate NotificationsManager notificationsManager;\n\t\n\tpublic CmdUnzip(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl);\n\t}\n\t\n\t@Override\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wContr, Translator trans) {\n\t\tthis.translator = trans;\n\t\tFileSelection selection = new FileSelection(ureq, folderComponent.getCurrentContainer(), folderComponent.getCurrentContainerPath());\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\tif (currentContainer.canWrite() != VFSConstants.YES)\n\t\t\tthrow new AssertException(\"Cannot unzip to folder. Writing denied.\");\n\t\t\t\n\t  //check if command is executed on a file containing invalid filenames or paths - checks if the resulting folder has a valid name\n\t\tif(selection.getInvalidFileNames().size()>0) {\t\t\t\t\n\t\t\tstatus = FolderCommandStatus.STATUS_INVALID_NAME;\n\t\t\treturn null;\n\t\t}\t\t\n\t\t\n\t\tList<String> lockedFiles = new ArrayList<>();\n\t\tfor (String sItem:selection.getFiles()) {\n\t\t\tVFSItem vfsItem = currentContainer.resolve(sItem);\n\t\t\tif (vfsItem instanceof VFSLeaf) {\n\t\t\t\ttry {\n\t\t\t\t\tlockedFiles.addAll(checkLockedFiles((VFSLeaf)vfsItem, currentContainer, ureq.getIdentity()));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tString name = vfsItem == null ? \"NULL\" : vfsItem.getName();\n\t\t\t\t\tgetWindowControl().setError(translator.translate(\"FileUnzipFailed\", new String[]{name}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!lockedFiles.isEmpty()) {\n\t\t\tString msg = FolderCommandHelper.renderLockedMessageAsHtml(trans, lockedFiles);\n\t\t\tList<String> buttonLabels = Collections.singletonList(trans.translate(\"ok\"));\n\t\t\tlockedFiledCtr = activateGenericDialog(ureq, trans.translate(\"lock.title\"), msg, buttonLabels, lockedFiledCtr);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tVFSItem currentVfsItem = null;\n\t\ttry {\n\t\t\tboolean fileNotExist = false;\n\t\t\tfor (String sItem:selection.getFiles()) {\n\t\t\t\tcurrentVfsItem = currentContainer.resolve(sItem);\n\t\t\t\tif (currentVfsItem instanceof VFSLeaf) {\n\t\t\t\t\tif (!doUnzip((VFSLeaf)currentVfsItem, currentContainer, ureq, wContr)) {\n\t\t\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfileNotExist = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (fileNotExist) {\n\t\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\t\tgetWindowControl().setError(translator.translate(\"FileDoesNotExist\"));\n\t\t\t}\n\t\t\t\n\t\t\tVFSContainer inheritingCont = VFSManager.findInheritingSecurityCallbackContainer(folderComponent.getRootContainer());\n\t\t\tif(inheritingCont != null) {\n\t\t\t\tVFSSecurityCallback secCallback = inheritingCont.getLocalSecurityCallback();\n\t\t\t\tif(secCallback != null) {\n\t\t\t\t\tSubscriptionContext subsContext = secCallback.getSubscriptionContext();\n\t\t\t\t\tif (subsContext != null) {\n\t\t\t\t\t\tnotificationsManager.markPublisherNews(subsContext, ureq.getIdentity(), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tlogError(\"Corrupted ZIP\", e);\n\t\t\tString name = currentVfsItem == null ? \"NULL\" : currentVfsItem.getName();\n\t\t\tgetWindowControl().setError(translator.translate(\"FileUnzipFailed\", new String[]{name}));\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\t\n\tprivate List<String> checkLockedFiles(VFSLeaf vfsItem, VFSContainer currentContainer, Identity identity) {\n\t\tString name = vfsItem.getName();\n\t\tif (!name.toLowerCase().endsWith(\".zip\")) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\n\t\tif(currentContainer.canVersion() != VFSConstants.YES) {\n\t\t\t//this command don't overwrite existing folders\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\t\n\t\tString sZipContainer = name.substring(0, name.length() - 4);\n\t\tVFSItem zipContainer = currentContainer.resolve(sZipContainer);\n\t\tif(zipContainer == null) {\n\t\t\treturn Collections.emptyList();\n\t\t} else if (zipContainer instanceof VFSContainer) {\n\t\t\treturn ZipUtil.checkLockedFileBeforeUnzipNonStrict(vfsItem, (VFSContainer)zipContainer, identity);\n\t\t} else {\n\t\t\t//replace a file with a folder ???\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t}\n\n\tprivate boolean doUnzip(VFSLeaf vfsItem, VFSContainer currentContainer, UserRequest ureq, WindowControl wControl) {\n\t\tString name = vfsItem.getName();\n\t\tif (!name.toLowerCase().endsWith(\".zip\")) {\n\t\t\twControl.setError(translator.translate(\"FileUnzipFailed\", new String[] {vfsItem.getName()}));\n\t\t\treturn false;\n\t\t} \n\t\t\n\t\t// we make a new folder with the same name as the zip file\n\t\tString sZipContainer = name.substring(0, name.length() - 4);\n\t\t\n\t\tboolean versioning = currentContainer.canVersion() == VFSConstants.YES;\n\t\t\n\t\tVFSContainer zipContainer = currentContainer.createChildContainer(sZipContainer);\n\t\tif (zipContainer == null) {\n\t\t\tif(versioning) {\n\t\t\t\tVFSItem resolvedItem = currentContainer.resolve(sZipContainer);\n\t\t\t\tif(resolvedItem instanceof VFSContainer) {\n\t\t\t\t\tzipContainer = (VFSContainer)resolvedItem;\n\t\t\t\t} else {\n\t\t\t\t\tString numberedFilename = findContainerName(currentContainer, sZipContainer);\n\t\t\t\t\tif(StringHelper.containsNonWhitespace(numberedFilename)) {\n\t\t\t\t\t\tzipContainer = currentContainer.createChildContainer(numberedFilename);\n\t\t\t\t\t}\n\t\t\t\t\tif(zipContainer == null) {// we try our best\n\t\t\t\t\t\twControl.setError(translator.translate(\"unzip.alreadyexists\", new String[] {sZipContainer}));\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// folder already exists... issue warning\n\t\t\t\twControl.setError(translator.translate(\"unzip.alreadyexists\", new String[] {sZipContainer}));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (zipContainer.canMeta() == VFSConstants.YES) {\n\t\t\tVFSMetadata info = zipContainer.getMetaInfo();\n\t\t\tif(info instanceof VFSMetadataImpl) {\n\t\t\t\t((VFSMetadataImpl)info).setFileInitializedBy(ureq.getIdentity());\n\t\t\t\tvfsRepositoryService.updateMetadata(info);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ZipUtil.unzipNonStrict(vfsItem, zipContainer, ureq.getIdentity(), versioning)) {\n\t\t\t// operation failed - rollback\n\t\t\tzipContainer.delete();\n\t\t\twControl.setError(translator.translate(\"failed\"));\n\t\t\treturn false;\n\t\t} else {\n\t\t\t// check quota\n\t\t\tlong quotaLeftKB = VFSManager.getQuotaLeftKB(currentContainer);\n\t\t\tif (quotaLeftKB != Quota.UNLIMITED && quotaLeftKB < 0) {\n\t\t\t\t// quota exceeded - rollback\n\t\t\t\tzipContainer.delete();\n\t\t\t\twControl.setError(translator.translate(\"QuotaExceeded\"));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tprivate String findContainerName(VFSContainer container, String filename) {\n\t\tString newName = filename;\n\t\tVFSItem newFile = container.resolve(newName);\n\t\tfor(int count=1; newFile != null && count < 999 ; count++) {\n\t\t\tnewName = filename + \"_\" + count;\n\t\t    newFile = container.resolve(newName);\n\t\t}\n\t\tif(newFile == null) {\n\t\t\treturn newName;\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn null;\n\t}\n\n\n\t@Override\n\tprotected void doDispose() {\n\t\t//autodisposed by BasicController\n\t}\n\n\t@Override\n\tprotected void event(UserRequest ureq, Component source, Event event) {\n\t\t// no events to catch\n\t}\n\t\n\t@Override\n\tpublic void event(UserRequest ureq, Controller source, Event event) {\n\t\t// no events to catch\n\t}\n\t\n\t\n\n}\n", "/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/ \n\npackage org.olat.core.commons.modules.bc.commands;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderEvent;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.services.vfs.VFSRepositoryService;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.form.flexible.FormItemContainer;\nimport org.olat.core.gui.components.form.flexible.elements.TextElement;\nimport org.olat.core.gui.components.form.flexible.impl.FormBasicController;\nimport org.olat.core.gui.components.form.flexible.impl.FormLayoutContainer;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.logging.AssertException;\nimport org.olat.core.util.FileUtils;\nimport org.olat.core.util.ZipUtil;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.filters.VFSSystemItemFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * \n * Description:<br>\n * Provides a CreateItemForm and creates a zip file if input valid.\n * \n * <P>\n * Initial Date:  30.01.2008 <br>\n * @author Lavinia Dumitrescu\n */\npublic class CmdZip extends FormBasicController implements FolderCommand {\n\t\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\t\n\n\tprivate VFSContainer currentContainer;\n\tprivate FileSelection selection;\n\tprivate TextElement textElement;\n\t\n\t@Autowired\n\tprivate VFSRepositoryService vfsRepositoryService;\n\t\n\tprotected CmdZip(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl);\n\t}\n\t\n\t@Override\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wControl, Translator trans) {\n\t\tsetTranslator(trans);\n\t\tcurrentContainer = folderComponent.getCurrentContainer();\n\t\tif (currentContainer.canWrite() != VFSConstants.YES) {\n\t\t\tthrow new AssertException(\"Cannot write to current folder.\");\n\t\t}\n\t\t\n\t\tstatus = FolderCommandHelper.sanityCheck(wControl, folderComponent);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tselection = new FileSelection(ureq, folderComponent.getCurrentContainer(), folderComponent.getCurrentContainerPath());\n\t\tstatus = FolderCommandHelper.sanityCheck3(wControl, folderComponent, selection);\n\t\tif(status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif(selection.getFiles().isEmpty()) {\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\twControl.setWarning(trans.translate(\"warning.file.selection.empty\"));\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tinitForm(ureq);\n\t\treturn this;\n\t}\n\t\n\t@Override\n\tprotected void initForm(FormItemContainer formLayout, Controller listener, UserRequest ureq) {\n\t\tString files = selection.renderAsHtml();\n\t\tuifactory.addStaticExampleText(\"zip.confirm\", files, formLayout);\n\t\t\n\t\ttextElement = uifactory.addTextElement(\"fileName\", \"zip.name\", 20, \"\", formLayout);\n\t\ttextElement.setMandatory(true);\t\t\t\n\t\tuifactory.addStaticTextElement(\"extension\", null, translate(\"zip.extension\"), formLayout);\n\t\t\n\t\tFormLayoutContainer formButtons = FormLayoutContainer.createButtonLayout(\"formButton\", getTranslator());\n\t\tformLayout.add(formButtons);\n\t\tuifactory.addFormSubmitButton(\"submit\",\"zip.button\", formButtons);\n\t\tuifactory.addFormCancelButton(\"cancel\", formButtons, ureq, getWindowControl());\t\n\t}\n\n\t@Override\n\tprotected void doDispose() {\n\t\t// nothing to do\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn translate(\"zip.header\");\n\t}\n\n\t@Override\n\tprotected void formCancelled(UserRequest ureq) {\n\t\tstatus = FolderCommandStatus.STATUS_CANCELED;\n\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\n\t}\n\n\t/**\n\t * Creates a zipFile by using ZipUtil and fires Event.DONE_EVENT if successful.\n\t */\n\t@Override\n\tprotected void formOK(UserRequest ureq) {\n\t\tString name = textElement.getValue();\n\t\tif(!name.toLowerCase().endsWith(\".zip\")) {\n\t\t\tname += \".zip\";\n\t\t}\n\n\t\tVFSLeaf zipFile = currentContainer.createChildLeaf(name);\n\t\tif (zipFile == null) {\n\t\t\tfireEvent(ureq, Event.FAILED_EVENT);\n\t\t\treturn;\t\t\t\t\n\t\t}\n\t\t\n\t\tList<VFSItem> vfsFiles = new ArrayList<>();\n\t\tfor (String fileName : selection.getFiles()) {\n\t\t\tVFSItem item = currentContainer.resolve(fileName);\n\t\t\tif (item != null) {\n\t\t\t\tvfsFiles.add(item);\n\t\t\t}\n\t\t}\n\t\tif (!ZipUtil.zip(vfsFiles, zipFile, new VFSSystemItemFilter(), false)) {\n\t\t\tzipFile.delete();\t\t\t\t\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\tfireEvent(ureq, FOLDERCOMMAND_FINISHED);\n\t\t} else {\n\t\t\tvfsRepositoryService.itemSaved(zipFile, ureq.getIdentity());\n\t\t\t\n\t\t\tfireEvent(ureq, new FolderEvent(FolderEvent.ZIP_EVENT, selection.renderAsHtml()));\t\t\t\t\n\t\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\t\t\t\t\t\t\t\t\n\t\t}\n\t}\n\t\t\n\t/**\n\t * Checks if input valid.\n\t * @see org.olat.core.commons.modules.bc.commands.AbstractCreateItemForm#validateFormLogic(org.olat.core.gui.UserRequest)\n\t */\n\t@Override\n\tprotected boolean validateFormLogic(UserRequest ureq) {\n\t\tboolean isInputValid = true;\n\t\tString name = textElement.getValue();\t\t\n\t\tif(name==null || name.trim().equals(\"\")) {\n\t\t\ttextElement.setErrorKey(\"zip.name.empty\", new String[0]);\n\t\t\tisInputValid = false;\n\t\t} else {\t\t\t\t\n\t\t\tif (!validateFileName(name)) {\n\t\t\t\ttextElement.setErrorKey(\"zip.name.notvalid\", new String[0]);\n\t\t\t\tisInputValid = false;\n\t\t\t\treturn isInputValid;\n\t\t\t} \n    //Note: use java.io.File and not VFS to create a leaf. File must not exist upon ZipUtil.zip()\n\t\t\tname = name + \".zip\";\n\t\t\tVFSItem zipFile = currentContainer.resolve(name);\n\t\t\tif (zipFile != null) {\t\t\t\t\t\n\t\t\t\ttextElement.setErrorKey(\"zip.alreadyexists\", new String[] {name});\n\t\t\t\tisInputValid = false;\n\t\t\t} else {\n\t\t\t\tisInputValid = true;\n\t\t\t}\n\t\t}\t\t\t\n\t\treturn isInputValid;\t\t\t\n\t}\n\n\t/**\n\t * Checks if filename contains any prohibited chars.\n\t * @param name\n\t * @return true if file name valid.\n\t */\n\tprivate boolean validateFileName(String name) {\n\t\treturn FileUtils.validateFilename(name);\n\t}\n}", "/**\n * <a href=\"http://www.openolat.org\">\n * OpenOLAT - Online Learning and Training</a><br>\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n * you may not use this file except in compliance with the License.<br>\n * You may obtain a copy of the License at the\n * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache homepage</a>\n * <p>\n * Unless required by applicable law or agreed to in writing,<br>\n * software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n * See the License for the specific language governing permissions and <br>\n * limitations under the License.\n * <p>\n * Initial code contributed and copyrighted by<br>\n * frentix GmbH, http://www.frentix.com\n * <p>\n */\npackage org.olat.core.util.mail.ui;\n\nimport java.io.File;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.UUID;\n\nimport org.olat.basesecurity.BaseSecurity;\nimport org.olat.basesecurity.events.SingleIdentityChosenEvent;\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.modules.bc.FileSelection;\nimport org.olat.core.commons.modules.bc.FolderConfig;\nimport org.olat.core.commons.modules.bc.commands.CmdSendMail;\nimport org.olat.core.commons.modules.bc.commands.FolderCommand;\nimport org.olat.core.commons.modules.bc.commands.FolderCommandHelper;\nimport org.olat.core.commons.modules.bc.commands.FolderCommandStatus;\nimport org.olat.core.commons.modules.bc.components.FolderComponent;\nimport org.olat.core.commons.modules.bc.meta.MetaInfoController;\nimport org.olat.core.commons.services.vfs.VFSMetadata;\nimport org.olat.core.gui.UserRequest;\nimport org.olat.core.gui.components.form.flexible.FormItem;\nimport org.olat.core.gui.components.form.flexible.FormItemContainer;\nimport org.olat.core.gui.components.form.flexible.elements.FormLink;\nimport org.olat.core.gui.components.form.flexible.elements.TextElement;\nimport org.olat.core.gui.components.form.flexible.impl.FormBasicController;\nimport org.olat.core.gui.components.form.flexible.impl.FormEvent;\nimport org.olat.core.gui.components.form.flexible.impl.FormLayoutContainer;\nimport org.olat.core.gui.components.link.Link;\nimport org.olat.core.gui.control.Controller;\nimport org.olat.core.gui.control.Event;\nimport org.olat.core.gui.control.WindowControl;\nimport org.olat.core.gui.control.generic.closablewrapper.CloseableCalloutWindowController;\nimport org.olat.core.gui.control.generic.folder.FolderHelper;\nimport org.olat.core.gui.translator.Translator;\nimport org.olat.core.gui.util.CSSHelper;\nimport org.olat.core.id.Identity;\nimport org.olat.core.id.Roles;\nimport org.olat.core.id.UserConstants;\nimport org.olat.core.id.context.BusinessControlFactory;\nimport org.olat.core.id.context.ContextEntry;\nimport org.olat.core.util.CodeHelper;\nimport org.olat.core.util.Formatter;\nimport org.olat.core.util.StringHelper;\nimport org.olat.core.util.Util;\nimport org.olat.core.util.mail.MailBundle;\nimport org.olat.core.util.mail.MailHelper;\nimport org.olat.core.util.mail.MailManager;\nimport org.olat.core.util.mail.MailModule;\nimport org.olat.core.util.mail.MailerResult;\nimport org.olat.core.util.vfs.LocalFileImpl;\nimport org.olat.core.util.vfs.VFSConstants;\nimport org.olat.core.util.vfs.VFSContainer;\nimport org.olat.core.util.vfs.VFSItem;\nimport org.olat.core.util.vfs.VFSLeaf;\nimport org.olat.core.util.vfs.VFSManager;\nimport org.olat.user.UserManager;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * \n * <h3>Description:</h3>\n * <p>\n * <p>\n * Initial Date: 7 feb. 2011 <br>\n * \n * @author srosse, stephane.rosse@frentix.com, www.frentix.com\n */\npublic class SendDocumentsByEMailController extends FormBasicController implements CmdSendMail {\n\n\tprivate TextElement bodyElement;\n\tprivate FormLink addEmailLink;\n\tprivate TextElement subjectElement;\n\tprivate FormLayoutContainer userListBox;\n\tprivate FormLayoutContainer attachmentsLayout;\n\tprivate EMailCalloutCtrl emailCalloutCtrl;\n\tprivate CloseableCalloutWindowController calloutCtrl;\n\t\n\tprivate final DecimalFormat formatMb = new DecimalFormat(\"0.00\");\n\n\tprivate int status = FolderCommandStatus.STATUS_SUCCESS;\n\tprivate List<File> attachments;\n\tprivate final boolean allowAttachments;\n\tprivate List<IdentityWrapper> toValues = new ArrayList<>();\n\n\t@Autowired\n\tprivate UserManager userManager;\n\t@Autowired\n\tprivate MailManager mailManager;\n\t@Autowired\n\tprivate BaseSecurity securityManager;\n\n\tpublic SendDocumentsByEMailController(UserRequest ureq, WindowControl wControl) {\n\t\tsuper(ureq, wControl, null, Util.createPackageTranslator(MailModule.class, ureq.getLocale(),\n\t\t\t\tUtil.createPackageTranslator(MetaInfoController.class, ureq.getLocale())));\n\t\tsetBasePackage(MailModule.class);\n\n\t\tallowAttachments = !FolderConfig.getSendDocumentLinkOnly();\n\n\t\tinitForm(ureq);\n\t}\n\n\t@Override\n\tprotected void initForm(FormItemContainer formLayout, Controller listener, UserRequest ureq) {\n\t\tsetFormDescription(\"send.mail.description\");\n\t\tsetFormStyle(\"o_send_documents\");\n\n\t\tint emailCols = 25;\n\n\t\tString toPage = velocity_root + \"/tos.html\";\n\t\tuserListBox = FormLayoutContainer.createCustomFormLayout(\"send.mail.to.auto\", getTranslator(), toPage);\n\t\tuserListBox.setLabel(\"send.mail.to\", null);\n\t\tuserListBox.setRootForm(mainForm);\n\t\tuserListBox.contextPut(\"tos\", toValues);\n\t\tformLayout.add(userListBox);\n\n\t\taddEmailLink = uifactory.addFormLink(\"add.email\", userListBox);\n\t\taddEmailLink.setIconLeftCSS(\"o_icon o_icon_add\");\n\n\t\tsubjectElement = uifactory.addTextElement(\"tsubject\", \"send.mail.subject\", 255, \"\", formLayout);\n\n\t\tbodyElement = uifactory.addTextAreaElement(\"tbody\", \"send.mail.body\", -1, 20, emailCols, false, false, \"\", formLayout);\n\n\t\tif (allowAttachments) {\n\t\t\tString page = Util.getPackageVelocityRoot(MailModule.class) + \"/sendattachments.html\";\n\t\t\tattachmentsLayout = FormLayoutContainer.createCustomFormLayout(\"attachments\", getTranslator(), page);\n\t\t\tattachmentsLayout.setRootForm(mainForm);\n\t\t\tattachmentsLayout.setLabel(\"send.mail.attachments\", null);\n\t\t\tformLayout.add(attachmentsLayout);\n\t\t}\n\n\t\tFormLayoutContainer buttonGroupLayout = FormLayoutContainer.createButtonLayout(\"buttonGroupLayout\", getTranslator());\n\t\tformLayout.add(buttonGroupLayout);\n\t\tuifactory.addFormSubmitButton(\"ok\", buttonGroupLayout);\n\t\tuifactory.addFormCancelButton(\"cancel\", buttonGroupLayout, ureq, getWindowControl());\n\t}\n\n\t@Override\n\tprotected void doDispose() {\n\t\t//\n\t}\n\n\t@Override\n\tpublic int getStatus() {\n\t\treturn status;\n\t}\n\n\t@Override\n\tpublic boolean runsModal() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getModalTitle() {\n\t\treturn translate(\"send.mail.title\");\n\t}\n\n\tpublic Controller execute(FolderComponent folderComponent, UserRequest ureq, WindowControl wControl, Translator translator) {\n\t\tVFSContainer currentContainer = folderComponent.getCurrentContainer();\n\t\tVFSContainer rootContainer = folderComponent.getRootContainer();\n\n\t\tif (!VFSManager.exists(currentContainer)) {\n\t\t\tstatus = FolderCommandStatus.STATUS_FAILED;\n\t\t\tshowError(translator.translate(\"FileDoesNotExist\"));\n\t\t\treturn null;\n\t\t}\n\t\tstatus = FolderCommandHelper.sanityCheck(wControl, folderComponent);\n\t\tif (status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\t\tFileSelection selection = new FileSelection(ureq, folderComponent.getCurrentContainer(), folderComponent.getCurrentContainerPath());\n\t\tstatus = FolderCommandHelper.sanityCheck3(wControl, folderComponent, selection);\n\t\tif (status == FolderCommandStatus.STATUS_FAILED) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean selectionWithContainer = false;\n\t\tList<String> filenames = selection.getFiles();\n\t\tList<VFSLeaf> leafs = new ArrayList<>();\n\t\tfor (String file : filenames) {\n\t\t\tVFSItem item = currentContainer.resolve(file);\n\t\t\tif (item instanceof VFSContainer) {\n\t\t\t\tselectionWithContainer = true;\n\t\t\t} else if (item instanceof VFSLeaf) {\n\t\t\t\tleafs.add((VFSLeaf) item);\n\t\t\t}\n\t\t}\n\t\tif (selectionWithContainer) {\n\t\t\tif (leafs.isEmpty()) {\n\t\t\t\twControl.setError(getTranslator().translate(\"send.mail.noFileSelected\"));\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tsetFormWarning(getTranslator().translate(\"send.mail.selectionContainsFolder\"));\n\t\t\t}\n\t\t}\n\t\tsetFiles(rootContainer, leafs);\n\t\treturn this;\n\t}\n\n\tprotected void setFiles(VFSContainer rootContainer, List<VFSLeaf> files) {\n\t\tStringBuilder subjectSb = new StringBuilder();\n\t\tif (StringHelper.containsNonWhitespace(subjectElement.getValue())) {\n\t\t\tsubjectSb.append(subjectElement.getValue()).append('\\n').append('\\n');\n\t\t}\n\t\tStringBuilder bodySb = new StringBuilder();\n\t\tif (StringHelper.containsNonWhitespace(bodyElement.getValue())) {\n\t\t\tbodySb.append(bodyElement.getValue()).append('\\n').append('\\n');\n\t\t}\n\n\t\tattachments = new ArrayList<>();\n\t\tlong fileSize = 0l;\n\t\tfor (VFSLeaf file : files) {\n\t\t\tVFSMetadata infos = null;\n\t\t\tif (file.canMeta() == VFSConstants.YES) {\n\t\t\t\tinfos = file.getMetaInfo();\n\t\t\t}\n\t\t\t// subject\n\t\t\tappendToSubject(file, infos, subjectSb);\n\n\t\t\t// body\n\t\t\tappendMetadatas(file, infos, bodySb);\n\t\t\tappendBusinessPath(rootContainer, file, bodySb);\n\t\t\tbodySb.append('\\n').append('\\n');\n\t\t\tfileSize += file.getSize();\n\t\t\tif (allowAttachments && file instanceof LocalFileImpl) {\n\t\t\t\tFile f = ((LocalFileImpl) file).getBasefile();\n\t\t\t\tattachments.add(f);\n\t\t\t}\n\t\t}\n\n\t\tint mailQuota = CoreSpringFactory.getImpl(MailModule.class).getMaxSizeForAttachement();\n\t\tlong fileSizeInMB = fileSize / (1024l * 1024l);\n\t\tif (allowAttachments) {\n\t\t\tif (fileSizeInMB > mailQuota) {\n\t\t\t\tattachments.clear();\n\t\t\t\tsetFormWarning(\"send.mail.fileToBigForAttachments\", new String[] { String.valueOf(mailQuota), String.valueOf(fileSizeInMB) });\n\t\t\t} else {\n\t\t\t\tList<FileInfo> infos = new ArrayList<>(files.size());\n\t\t\t\tfor (VFSLeaf file : files) {\n\t\t\t\t\tfinal String name = file.getName();\n\t\t\t\t\tfinal double size = file.getSize() / (1024.0 * 1024.0);\n\t\t\t\t\tfinal String sizeStr = formatMb.format(size);\n\t\t\t\t\tfinal String cssClass = CSSHelper.createFiletypeIconCssClassFor(file.getName());\n\t\t\t\t\tinfos.add(new FileInfo(name, sizeStr, cssClass));\n\t\t\t\t}\n\t\t\t\tattachmentsLayout.contextPut(\"attachments\", infos);\n\t\t\t}\n\t\t}\n\n\t\tsubjectElement.setValue(subjectSb.toString());\n\t\tbodyElement.setValue(bodySb.toString());\n\t}\n\n\tprotected void appendToSubject(VFSLeaf file, VFSMetadata infos, StringBuilder sb) {\n\t\tif (sb.length() > 0)\n\t\t\tsb.append(\", \");\n\t\tif (infos != null && StringHelper.containsNonWhitespace(infos.getTitle())) {\n\t\t\tsb.append(infos.getTitle());\n\t\t} else {\n\t\t\tsb.append(file.getName());\n\t\t}\n\t}\n\n\tprotected void appendMetadatas(VFSLeaf file, VFSMetadata infos, StringBuilder sb) {\n\t\tif (infos == null) {\n\t\t\tappendMetadata(\"mf.filename\", file.getName(), sb);\n\t\t} else {\n\t\t\tappendMetadata(\"mf.filename\", infos.getFilename(), sb);\n\t\t\tString title = infos.getTitle();\n\t\t\tif (StringHelper.containsNonWhitespace(title)) {\n\t\t\t\tappendMetadata(\"mf.title\", title, sb);\n\t\t\t}\n\t\t\tString comment = infos.getComment();\n\t\t\tif (StringHelper.containsNonWhitespace(comment)) {\n\t\t\t\tappendMetadata(\"mf.comment\", comment, sb);\n\t\t\t}\n\t\t\tString creator = infos.getCreator();\n\t\t\tif (StringHelper.containsNonWhitespace(creator)) {\n\t\t\t\tappendMetadata(\"mf.creator\", creator, sb);\n\t\t\t}\n\t\t\tString publisher = infos.getPublisher();\n\t\t\tif (StringHelper.containsNonWhitespace(publisher)) {\n\t\t\t\tappendMetadata(\"mf.publisher\", publisher, sb);\n\t\t\t}\n\t\t\tString source = infos.getSource();\n\t\t\tif (StringHelper.containsNonWhitespace(source)) {\n\t\t\t\tappendMetadata(\"mf.source\", source, sb);\n\t\t\t}\n\t\t\tString city = infos.getCity();\n\t\t\tif (StringHelper.containsNonWhitespace(city)) {\n\t\t\t\tappendMetadata(\"mf.city\", city, sb);\n\t\t\t}\n\t\t\tappendPublicationDate(infos, sb);\n\t\t\tString pages = infos.getPages();\n\t\t\tif (StringHelper.containsNonWhitespace(pages)) {\n\t\t\t\tappendMetadata(\"mf.pages\", pages, sb);\n\t\t\t}\n\t\t\tString language = infos.getLanguage();\n\t\t\tif (StringHelper.containsNonWhitespace(language)) {\n\t\t\t\tappendMetadata(\"mf.language\", language, sb);\n\t\t\t}\n\t\t\tString url = infos.getUrl();\n\t\t\tif (StringHelper.containsNonWhitespace(url)) {\n\t\t\t\tappendMetadata(\"mf.url\", url, sb);\n\t\t\t}\n\t\t\tString author = userManager.getUserDisplayName(infos.getFileInitializedBy());\n\t\t\tif (StringHelper.containsNonWhitespace(author)) {\n\t\t\t\tappendMetadata(\"mf.author\", author, sb);\n\t\t\t}\n\t\t\tString size = Formatter.formatBytes(file.getSize());\n\t\t\tappendMetadata(\"mf.size\", size, sb);\n\t\t\tDate lastModifiedDate = infos.getFileLastModified();\n\t\t\tif (lastModifiedDate != null) {\n\t\t\t\tappendMetadata(\"mf.lastModified\", Formatter.getInstance(getLocale()).formatDate(lastModifiedDate), sb);\n\t\t\t}\n\t\t\tString type = FolderHelper.extractFileType(file.getName(), getLocale());\n\t\t\tif (StringHelper.containsNonWhitespace(type)) {\n\t\t\t\tappendMetadata(\"mf.type\", type, sb);\n\t\t\t}\n\t\t\tint downloads = infos.getDownloadCount();\n\t\t\tif (infos.getDownloadCount() >= 0) {\n\t\t\t\tappendMetadata(\"mf.downloads\", String.valueOf(downloads), sb);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected void appendMetadata(String i18nKey, String value, StringBuilder sb) {\n\t\tsb.append(translate(i18nKey)).append(\": \").append(value).append('\\n');\n\t}\n\n\tprotected void appendPublicationDate(VFSMetadata infos, StringBuilder sb) {\n\t\tString[] publicationDate = infos.getPublicationDate();\n\t\tif (publicationDate == null || publicationDate.length != 2)\n\t\t\treturn;\n\t\tString month = publicationDate[1];\n\t\tString year = publicationDate[0];\n\t\tif (StringHelper.containsNonWhitespace(month) || StringHelper.containsNonWhitespace(year)) {\n\t\t\tsb.append(translate(\"mf.publishDate\")).append(\":\");\n\t\t\tif (StringHelper.containsNonWhitespace(month)) {\n\t\t\t\tsb.append(\" \").append(translate(\"mf.month\").replaceAll(\"&nbsp;\", \"\")).append(\" \").append(month);\n\t\t\t}\n\t\t\tif (StringHelper.containsNonWhitespace(year)) {\n\t\t\t\tsb.append(\" \").append(translate(\"mf.year\").replaceAll(\"&nbsp;\", \"\")).append(\" \").append(year);\n\t\t\t}\n\t\t\tsb.append('\\n');\n\t\t}\n\t}\n\n\tprotected void appendBusinessPath(VFSContainer rootContainer, VFSLeaf file, StringBuilder sb) {\n\t\tBusinessControlFactory bCF = BusinessControlFactory.getInstance();\n\t\tString businnessPath = getWindowControl().getBusinessControl().getAsString();\n\n\t\tString relPath = getRelativePath(rootContainer, file);\n\t\tbusinnessPath += \"[path=\" + relPath + \"]\";\n\n\t\tList<ContextEntry> ces = bCF.createCEListFromString(businnessPath);\n\t\tString uri = bCF.getAsURIString(ces, true);\n\t\tthis.appendMetadata(\"mf.url\", uri, sb);\n\t}\n\n\tprotected String getRelativePath(VFSContainer rootContainer, VFSLeaf file) {\n\t\tString sb = \"/\" + file.getName();\n\t\tVFSContainer parent = file.getParentContainer();\n\t\twhile (parent != null && !rootContainer.isSame(parent)) {\n\t\t\tsb = \"/\" + parent.getName() + sb;\n\t\t\tparent = parent.getParentContainer();\n\t\t}\n\t\treturn sb;\n\t}\n\n\t@Override\n\tprotected boolean validateFormLogic(UserRequest ureq) {\n\t\tboolean allOk = super.validateFormLogic(ureq);\n\n\t\tString subject = subjectElement.getValue();\n\t\tsubjectElement.clearError();\n\t\tif (!StringHelper.containsNonWhitespace(subject)) {\n\t\t\tsubjectElement.setErrorKey(\"form.legende.mandatory\", null);\n\t\t\tallOk &= false;\n\t\t} else if(subject != null && subject.length() > subjectElement.getMaxLength()) {\n\t\t\tsubjectElement.setErrorKey(\"text.element.error.notlongerthan\",\n\t\t\t\t\tnew String[]{ Integer.toString(subjectElement.getMaxLength()) });\n\t\t\tallOk &= false;\n\t\t}\n\n\t\tString body = bodyElement.getValue();\n\t\tbodyElement.clearError();\n\t\tif (!StringHelper.containsNonWhitespace(body)) {\n\t\t\tbodyElement.setErrorKey(\"form.legende.mandatory\", null);\n\t\t\tallOk &= false;\n\t\t}\n\n\t\tList<Identity> invalidTos = getInvalidToAddressesFromTextBoxList();\n\t\tuserListBox.clearError();\n\t\tif (!invalidTos.isEmpty()) {\n\t\t\tString[] invalidTosArray = new String[invalidTos.size()];\n\t\t\tuserListBox.setErrorKey(\"mailhelper.error.addressinvalid\", invalidTos.toArray(invalidTosArray));\n\t\t\tallOk &= false;\n\t\t} else if(toValues == null || toValues.isEmpty()) {\n\t\t\tuserListBox.setErrorKey(\"form.legende.mandatory\", null);\n\t\t\tallOk &= false;\n\t\t}\n\n\t\treturn allOk;\n\t}\n\n\t/**\n\t * returns a list of invalid Values within the textboxlist.\n\t * values are either email-addresses (manually added, thus external) or\n\t * usernames (from autocompletion, thus olat users)\n\t * \n\t * @return\n\t */\n\tprivate List<Identity> getInvalidToAddressesFromTextBoxList() {\n\t\tList<Identity> invalidTos = new ArrayList<>();\n\n\t\t// the toValues are either usernames (from autocompletion, thus OLAT\n\t\t// users) or email-addresses (external)\n\t\tif (FolderConfig.getSendDocumentToExtern()) {\n\t\t\tfor (IdentityWrapper toValue : toValues) {\n\t\t\t\tIdentity id = toValue.getIdentity();\n\t\t\t\tif (!MailHelper.isValidEmailAddress(id.getUser().getProperty(UserConstants.EMAIL, null))\n\t\t\t\t\t\t&& !securityManager.isIdentityVisible(id)) {\n\t\t\t\t\tinvalidTos.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (IdentityWrapper toValue : toValues) {\n\t\t\t\tIdentity id = toValue.getIdentity();\n\t\t\t\tif(!securityManager.isIdentityVisible(id)){\n\t\t\t\t\tinvalidTos.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn invalidTos;\n\t}\n\n\t@Override\n\tprotected void formInnerEvent(UserRequest ureq, FormItem source, FormEvent event) {\n\t\tif(source == addEmailLink) {\n\t\t\tdoAddEmail(ureq);\n\t\t} else if(source instanceof FormLink && source.getUserObject() instanceof IdentityWrapper) {\n\t\t\tif(source.getName().startsWith(\"rm-\")) {\n\t\t\t\tfor(Iterator<IdentityWrapper> wrapperIt=toValues.iterator(); wrapperIt.hasNext(); ) {\n\t\t\t\t\tIdentityWrapper wrapper = wrapperIt.next();\n\t\t\t\t\tif(source.getUserObject().equals(wrapper)) {\n\t\t\t\t\t\twrapperIt.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tuserListBox.setDirty(true);\n\t\t}\n\t\tsuper.formInnerEvent(ureq, source, event);\n\t}\n\n\t@Override\n\tpublic void event(UserRequest ureq, Controller source, Event event) {\n\t\tif(source == emailCalloutCtrl) {\n\t\t\tif (event instanceof SingleIdentityChosenEvent) {\n\t\t\t\taddIdentity((SingleIdentityChosenEvent)event);\n\t\t\t}\n\t\t\tcalloutCtrl.deactivate();\n\t\t}\n\t}\n\t\n\tprivate void addIdentity(SingleIdentityChosenEvent foundEvent) {\n\t\tIdentity chosenIdentity = foundEvent.getChosenIdentity();\n\t\tif (chosenIdentity != null) {\n\t\t\taddIdentity(chosenIdentity);\n\t\t}\n\t\tuserListBox.setDirty(true);\n\t}\n\t\n\tprivate void addIdentity(Identity identity) {\n\t\tFormLink rmLink = uifactory.addFormLink(\"rm-\" + CodeHelper.getForeverUniqueID(), \" \", null, userListBox, Link.NONTRANSLATED + Link.LINK);\n\t\tIdentityWrapper wrapper = new IdentityWrapper(identity, rmLink);\n\t\trmLink.setIconLeftCSS(\"o_icon o_icon_remove\");\n\t\trmLink.setUserObject(wrapper);\n\t\ttoValues.add(wrapper);\n\t\tuserListBox.setDirty(true);\n\t}\n\n\t@Override\n\tprotected void formOK(UserRequest ureq) {\n\t\tList<Identity> tos = new ArrayList<>(toValues.size());\n\t\tfor(IdentityWrapper wrapper:toValues) {\n\t\t\ttos.add(wrapper.getIdentity());\n\t\t}\n\t\tString subject = subjectElement.getValue();\n\t\tString body = bodyElement.getValue();\n\t\tsendEmail(tos, subject, body, ureq);\n\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\n\t}\n\n\t@Override\n\tprotected void formCancelled(UserRequest ureq) {\n\t\tfireEvent(ureq, FolderCommand.FOLDERCOMMAND_FINISHED);\n\t}\n\t\n\t\n\t\n\tprotected void doAddEmail(UserRequest ureq) {\n\t\tString title = translate(\"add.email\");\n\t\tremoveAsListenerAndDispose(emailCalloutCtrl);\n\t\tboolean allowExtern = FolderConfig.getSendDocumentToExtern();\n\t\temailCalloutCtrl = new EMailCalloutCtrl(ureq, getWindowControl(), allowExtern);\n\t\tlistenTo(emailCalloutCtrl);\n\t\t\n\t\tremoveAsListenerAndDispose(calloutCtrl);\n\t\tcalloutCtrl = new CloseableCalloutWindowController(ureq, getWindowControl(), emailCalloutCtrl.getInitialComponent(), addEmailLink, title, true, null);\n\t\tlistenTo(calloutCtrl);\n\t\tcalloutCtrl.activate();\t\n\t}\n\n\tprotected void sendEmail(List<Identity> tos, String subject, String body, UserRequest ureq) {\n\t\tFile[] attachmentArray = null;\n\t\tif (attachments != null && !attachments.isEmpty() && allowAttachments) {\n\t\t\tattachmentArray = attachments.toArray(new File[attachments.size()]);\n\t\t}\n\n\t\tMailerResult result = new MailerResult();\n\t\tString metaId = UUID.randomUUID().toString().replace(\"-\", \"\");\n\t\tfor(Identity to:tos) {\n\t\t\tMailBundle bundle = new MailBundle();\n\t\t\tbundle.setToId(to);\n\t\t\tbundle.setMetaId(metaId);\n\t\t\tbundle.setFromId(ureq.getIdentity());\n\t\t\tbundle.setContent(subject, body, attachmentArray);\n\t\t\tresult.append(mailManager.sendMessage(bundle));\n\t\t}\n\t\t\n\t\tRoles roles = ureq.getUserSession().getRoles();\n\t\tboolean detailedErrorOutput = roles.isAdministrator() || roles.isSystemAdmin();\n\t\tMailHelper.printErrorsAndWarnings(result, getWindowControl(), detailedErrorOutput, ureq.getLocale());\n\t}\n\n\tpublic class FileInfo {\n\t\tprivate final String filename;\n\t\tprivate final String sizeInMB;\n\t\tprivate final String cssClass;\n\n\t\tpublic FileInfo(String filename, String sizeInMB, String cssClass) {\n\t\t\tthis.filename = filename;\n\t\t\tthis.sizeInMB = sizeInMB;\n\t\t\tthis.cssClass = cssClass;\n\t\t}\n\n\t\tpublic String getFilename() {\n\t\t\treturn filename;\n\t\t}\n\n\t\tpublic String getSizeInMB() {\n\t\t\treturn sizeInMB;\n\t\t}\n\n\t\tpublic String getCssClass() {\n\t\t\treturn cssClass;\n\t\t}\n\t}\n\t\n\tpublic final class IdentityWrapper {\n\t\tprivate Identity identity;\n\t\tprivate FormLink removeLink;\n\t\t\n\t\tpublic IdentityWrapper(Identity identity, FormLink removeLink) {\n\t\t\tthis.identity = identity;\n\t\t\tthis.removeLink = removeLink;\n\t\t}\n\t\t\n\t\tpublic String getName() {\n\t\t\tif(identity instanceof EMailIdentity) {\n\t\t\t\treturn identity.getUser().getProperty(UserConstants.EMAIL, null);\n\t\t\t}\n\t\t\treturn userManager.getUserDisplayName(identity);\n\t\t}\n\t\t\n\t\tpublic Identity getIdentity() {\n\t\t\treturn identity;\n\t\t}\n\t\t\n\t\tpublic String getRemoveLinkName() {\n\t\t\treturn removeLink.getComponent().getComponentName();\n\t\t}\n\t}\n}"], "filenames": ["src/main/java/org/olat/core/commons/modules/bc/FileSelection.java", "src/main/java/org/olat/core/commons/modules/bc/commands/CmdDelete.java", "src/main/java/org/olat/core/commons/modules/bc/commands/CmdDownloadZip.java", "src/main/java/org/olat/core/commons/modules/bc/commands/CmdMoveCopy.java", "src/main/java/org/olat/core/commons/modules/bc/commands/CmdUnzip.java", "src/main/java/org/olat/core/commons/modules/bc/commands/CmdZip.java", "src/main/java/org/olat/core/util/mail/ui/SendDocumentsByEMailController.java"], "buggy_code_start_loc": [30, 77, 73, 92, 80, 92, 192], "buggy_code_end_loc": [81, 78, 82, 93, 81, 93, 193], "fixing_code_start_loc": [29, 77, 73, 92, 80, 92, 192], "fixing_code_end_loc": [98, 78, 82, 93, 81, 93, 193], "type": "CWE-22", "message": "OpenOlat is a web-based e-learning platform for teaching, learning, assessment and communication, an LMS, a learning management system. In affected versions by manipulating the HTTP request an attacker can modify the path of a requested file download in the folder component to point to anywhere on the target system. The attack could be used to read any file accessible in the web root folder or outside, depending on the configuration of the system and the properly configured permission of the application server user. The attack requires an OpenOlat user account or the enabled guest user feature together with the usage of the folder component in a course. The attack does not allow writing of arbitrary files, it allows only reading of files and also only ready of files that the attacker knows the exact path which is very unlikely at least for OpenOlat data files. The problem is fixed in version 15.5.8 and 16.0.1 It is advised to upgrade to version 16.0.x. There are no known workarounds to fix this problem, an upgrade is necessary.", "other": {"cve": {"id": "CVE-2021-41152", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-18T21:15:08.143", "lastModified": "2021-10-22T13:52:17.507", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenOlat is a web-based e-learning platform for teaching, learning, assessment and communication, an LMS, a learning management system. In affected versions by manipulating the HTTP request an attacker can modify the path of a requested file download in the folder component to point to anywhere on the target system. The attack could be used to read any file accessible in the web root folder or outside, depending on the configuration of the system and the properly configured permission of the application server user. The attack requires an OpenOlat user account or the enabled guest user feature together with the usage of the folder component in a course. The attack does not allow writing of arbitrary files, it allows only reading of files and also only ready of files that the attacker knows the exact path which is very unlikely at least for OpenOlat data files. The problem is fixed in version 15.5.8 and 16.0.1 It is advised to upgrade to version 16.0.x. There are no known workarounds to fix this problem, an upgrade is necessary."}, {"lang": "es", "value": "OpenOlat es una plataforma de e-learning basada en la web para la ense\u00f1anza, el aprendizaje, la evaluaci\u00f3n y la comunicaci\u00f3n, un LMS, un sistema de administraci\u00f3n de aprendizaje. En las versiones afectadas, al manipular la petici\u00f3n HTTP, un atacante puede modificar la ruta de descarga de un archivo solicitado en el componente de carpetas para que apunte a cualquier lugar del sistema de destino. El ataque podr\u00eda ser usado para leer cualquier archivo accesible en la carpeta root de la web o fuera de ella, dependiendo de la configuraci\u00f3n del sistema y del permiso debidamente configurado del usuario del servidor de aplicaciones. El ataque requiere una cuenta de usuario de OpenOlat o la funci\u00f3n de usuario invitado habilitada junto con el uso del componente de la carpeta en un curso. El ataque no permite la escritura de archivos arbitrarios, s\u00f3lo permite la lectura de archivos y tambi\u00e9n s\u00f3lo lista de archivos que el atacante conoce la ruta exacta, lo cual es muy poco probable al menos para los archivos de datos de OpenOlat. El problema se ha corregido en las versiones 15.5.8 y 16.0.1. Se aconseja actualizar a la versi\u00f3n 16.0.x. No se presentan soluciones conocidas para corregir este problema, es necesario actualizar"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-23"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:frentix:openolat:*:*:*:*:*:*:*:*", "versionEndExcluding": "15.5.8", "matchCriteriaId": "0785A83C-365A-4FBE-A8CB-DD5002F0CA90"}]}]}], "references": [{"url": "https://github.com/OpenOLAT/OpenOLAT/commit/418bb509ffcb0e25ab4390563c6c47f0458583eb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenOLAT/OpenOLAT/security/advisories/GHSA-m8j5-837g-2p3f", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://jira.openolat.org/browse/OO-5696", "source": "security-advisories@github.com", "tags": ["Permissions Required", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/OpenOLAT/OpenOLAT/commit/418bb509ffcb0e25ab4390563c6c47f0458583eb"}}