{"buggy_code": ["<?php\n/**\n * Multisite Users List Table class.\n *\n * @package WordPress\n * @subpackage List_Table\n * @since 3.1.0\n * @access private\n */\nclass WP_MS_Users_List_Table extends WP_List_Table {\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\treturn current_user_can( 'manage_network_users' );\n\t}\n\n\t/**\n\t *\n\t * @global string $usersearch\n\t * @global string $role\n\t * @global wpdb   $wpdb\n\t * @global string $mode\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $usersearch, $role, $wpdb, $mode;\n\n\t\t$usersearch = isset( $_REQUEST['s'] ) ? wp_unslash( trim( $_REQUEST['s'] ) ) : '';\n\n\t\t$users_per_page = $this->get_items_per_page( 'users_network_per_page' );\n\n\t\t$role = isset( $_REQUEST['role'] ) ? $_REQUEST['role'] : '';\n\n\t\t$paged = $this->get_pagenum();\n\n\t\t$args = array(\n\t\t\t'number' => $users_per_page,\n\t\t\t'offset' => ( $paged-1 ) * $users_per_page,\n\t\t\t'search' => $usersearch,\n\t\t\t'blog_id' => 0,\n\t\t\t'fields' => 'all_with_meta'\n\t\t);\n\n\t\tif ( wp_is_large_network( 'users' ) )\n\t\t\t$args['search'] = ltrim( $args['search'], '*' );\n\n\t\tif ( $role == 'super' ) {\n\t\t\t$logins = implode( \"', '\", get_super_admins() );\n\t\t\t$args['include'] = $wpdb->get_col( \"SELECT ID FROM $wpdb->users WHERE user_login IN ('$logins')\" );\n\t\t}\n\n\t\t/*\n\t\t * If the network is large and a search is not being performed,\n\t\t * show only the latest users with no paging in order to avoid\n\t\t * expensive count queries.\n\t\t */\n\t\tif ( !$usersearch && wp_is_large_network( 'users' ) ) {\n\t\t\tif ( !isset($_REQUEST['orderby']) )\n\t\t\t\t$_GET['orderby'] = $_REQUEST['orderby'] = 'id';\n\t\t\tif ( !isset($_REQUEST['order']) )\n\t\t\t\t$_GET['order'] = $_REQUEST['order'] = 'DESC';\n\t\t\t$args['count_total'] = false;\n\t\t}\n\n\t\tif ( isset( $_REQUEST['orderby'] ) )\n\t\t\t$args['orderby'] = $_REQUEST['orderby'];\n\n\t\tif ( isset( $_REQUEST['order'] ) )\n\t\t\t$args['order'] = $_REQUEST['order'];\n\n\t\t$mode = empty( $_REQUEST['mode'] ) ? 'list' : $_REQUEST['mode'];\n\n\t\t// Query the user IDs for this page\n\t\t$wp_user_search = new WP_User_Query( $args );\n\n\t\t$this->items = $wp_user_search->get_results();\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_user_search->get_total(),\n\t\t\t'per_page' => $users_per_page,\n\t\t) );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\t\tif ( current_user_can( 'delete_users' ) )\n\t\t\t$actions['delete'] = __( 'Delete' );\n\t\t$actions['spam'] = _x( 'Mark as Spam', 'user' );\n\t\t$actions['notspam'] = _x( 'Not Spam', 'user' );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\t_e( 'No users found.' );\n\t}\n\n\t/**\n\t *\n\t * @global string $role\n\t * @return array\n\t */\n\tprotected function get_views() {\n\t\tglobal $role;\n\n\t\t$total_users = get_user_count();\n\t\t$super_admins = get_super_admins();\n\t\t$total_admins = count( $super_admins );\n\n\t\t$class = $role != 'super' ? ' class=\"current\"' : '';\n\t\t$role_links = array();\n\t\t$role_links['all'] = \"<a href='\" . network_admin_url('users.php') . \"'$class>\" . sprintf( _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';\n\t\t$class = $role == 'super' ? ' class=\"current\"' : '';\n\t\t$role_links['super'] = \"<a href='\" . network_admin_url('users.php?role=super') . \"'$class>\" . sprintf( _n( 'Super Admin <span class=\"count\">(%s)</span>', 'Super Admins <span class=\"count\">(%s)</span>', $total_admins ), number_format_i18n( $total_admins ) ) . '</a>';\n\n\t\treturn $role_links;\n\t}\n\n\t/**\n\t * @global string $mode\n\t * @param string $which\n\t */\n\tprotected function pagination( $which ) {\n\t\tglobal $mode;\n\n\t\tparent::pagination ( $which );\n\n\t\tif ( 'top' == $which )\n\t\t\t$this->view_switcher( $mode );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tpublic function get_columns() {\n\t\t$users_columns = array(\n\t\t\t'cb'         => '<input type=\"checkbox\" />',\n\t\t\t'username'   => __( 'Username' ),\n\t\t\t'name'       => __( 'Name' ),\n\t\t\t'email'      => __( 'E-mail' ),\n\t\t\t'registered' => _x( 'Registered', 'user' ),\n\t\t\t'blogs'      => __( 'Sites' )\n\t\t);\n\t\t/**\n\t\t * Filter the columns displayed in the Network Admin Users list table.\n\t\t *\n\t\t * @since MU\n\t\t *\n\t\t * @param array $users_columns An array of user columns. Default 'cb', 'username',\n\t\t *                             'name', 'email', 'registered', 'blogs'.\n\t\t */\n\t\treturn apply_filters( 'wpmu_users_columns', $users_columns );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'username'   => 'login',\n\t\t\t'name'       => 'name',\n\t\t\t'email'      => 'email',\n\t\t\t'registered' => 'id',\n\t\t);\n\t}\n\n\t/**\n\t * Handles the checkbox column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_cb( $user ) {\n\t\t?>\n\t\t<label class=\"screen-reader-text\" for=\"blog_<?php echo $user->ID; ?>\"><?php echo sprintf( __( 'Select %s' ), $user->user_login ); ?></label>\n\t\t<input type=\"checkbox\" id=\"blog_<?php echo $user->ID ?>\" name=\"allusers[]\" value=\"<?php echo esc_attr( $user->ID ) ?>\" />\n\t\t<?php\n\t}\n\n\t/**\n\t * Handles the username column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_username( $user ) {\n\t\t$super_admins = get_super_admins();\n\t\t$avatar\t= get_avatar( $user->user_email, 32 );\n\t\t$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), get_edit_user_link( $user->ID ) ) );\n\n\t\techo $avatar;\n\n\t\t?><strong><a href=\"<?php echo $edit_link; ?>\" class=\"edit\"><?php echo $user->user_login; ?></a><?php\n\t\tif ( in_array( $user->user_login, $super_admins ) ) {\n\t\t\techo ' - ' . __( 'Super Admin' );\n\t\t}\n\t\t?></strong>\n\t<?php\n\t}\n\n\t/**\n\t * Handles the name column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_name( $user ) {\n\t\techo \"$user->first_name $user->last_name\";\n\t}\n\n\t/**\n\t * Handles the email column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_email( $user ) {\n\t\techo \"<a href='mailto:$user->user_email'>$user->user_email</a>\";\n\t}\n\n\t/**\n\t * Handles the registered date column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @global string $mode\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_registered( $user ) {\n\t\tglobal $mode;\n\t\tif ( 'list' == $mode ) {\n\t\t\t$date = __( 'Y/m/d' );\n\t\t} else {\n\t\t\t$date = __( 'Y/m/d g:i:s a' );\n\t\t}\n\t\techo mysql2date( $date, $user->user_registered );\n\t}\n\n\t/**\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param WP_User $user\n\t * @param string  $classes\n\t * @param string  $data\n\t * @param string  $primary\n\t */\n\tprotected function _column_blogs( $user, $classes, $data, $primary ) {\n\t\techo '<td class=\"', $classes, ' has-row-actions\" ', $data, '>';\n\t\techo $this->column_blogs( $user );\n\t\techo $this->handle_row_actions( $user, 'blogs', $primary );\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Handles the blogs/sites column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_blogs( $user ) {\n\t\t$blogs = get_blogs_of_user( $user->ID, true );\n\t\tif ( ! is_array( $blogs ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ( $blogs as $val ) {\n\t\t\tif ( ! can_edit_network( $val->site_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$path\t= ( $val->path == '/' ) ? '' : $val->path;\n\t\t\techo '<span class=\"site-' . $val->site_id . '\" >';\n\t\t\techo '<a href=\"'. esc_url( network_admin_url( 'site-info.php?id=' . $val->userblog_id ) ) .'\">' . str_replace( '.' . get_current_site()->domain, '', $val->domain . $path ) . '</a>';\n\t\t\techo ' <small class=\"row-actions\">';\n\t\t\t$actions = array();\n\t\t\t$actions['edit'] = '<a href=\"'. esc_url( network_admin_url( 'site-info.php?id=' . $val->userblog_id ) ) .'\">' . __( 'Edit' ) . '</a>';\n\n\t\t\t$class = '';\n\t\t\tif ( $val->spam == 1 ) {\n\t\t\t\t$class .= 'site-spammed ';\n\t\t\t}\n\t\t\tif ( $val->mature == 1 ) {\n\t\t\t\t$class .= 'site-mature ';\n\t\t\t}\n\t\t\tif ( $val->deleted == 1 ) {\n\t\t\t\t$class .= 'site-deleted ';\n\t\t\t}\n\t\t\tif ( $val->archived == 1 ) {\n\t\t\t\t$class .= 'site-archived ';\n\t\t\t}\n\n\t\t\t$actions['view'] = '<a class=\"' . $class . '\" href=\"' . esc_url( get_home_url( $val->userblog_id ) ) . '\">' . __( 'View' ) . '</a>';\n\n\t\t\t/**\n\t\t\t * Filter the action links displayed next the sites a user belongs to\n\t\t\t * in the Network Admin Users list table.\n\t\t\t *\n\t\t\t * @since 3.1.0\n\t\t\t *\n\t\t\t * @param array $actions     An array of action links to be displayed.\n\t\t\t *                           Default 'Edit', 'View'.\n\t\t\t * @param int   $userblog_id The site ID.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'ms_user_list_site_actions', $actions, $val->userblog_id );\n\n\t\t\t$i=0;\n\t\t\t$action_count = count( $actions );\n\t\t\tforeach ( $actions as $action => $link ) {\n\t\t\t\t++$i;\n\t\t\t\t$sep = ( $i == $action_count ) ? '' : ' | ';\n\t\t\t\techo \"<span class='$action'>$link$sep</span>\";\n\t\t\t}\n\t\t\techo '</small></span><br/>';\n\t\t}\n\t}\n\n\t/**\n\t * Handles the default column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user       The current WP_User object.\n\t * @param string $column_name The current column name.\n\t */\n\tpublic function column_default( $user, $column_name ) {\n\t\t/** This filter is documented in wp-admin/includes/class-wp-users-list-table.php */\n\t\techo apply_filters( 'manage_users_custom_column', '', $column_name, $user->ID );\n\t}\n\n\tpublic function display_rows() {\n\t\tforeach ( $this->items as $user ) {\n\t\t\t$class = '';\n\n\t\t\t$status_list = array( 'spam' => 'site-spammed', 'deleted' => 'site-deleted' );\n\n\t\t\tforeach ( $status_list as $status => $col ) {\n\t\t\t\tif ( $user->$status ) {\n\t\t\t\t\t$class .= \" $col\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t?>\n\t\t\t<tr class=\"<?php echo trim( $class ); ?>\">\n\t\t\t\t<?php $this->single_row_columns( $user ); ?>\n\t\t\t</tr>\n\t\t\t<?php\n\t\t}\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'username'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'username';\n\t}\n\n\t/**\n\t * Generates and displays row action links.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param object $user        User being acted upon.\n\t * @param string $column_name Current column name.\n\t * @param string $primary     Primary column name.\n\t * @return string Row actions output for users in Multisite.\n\t */\n\tprotected function handle_row_actions( $user, $column_name, $primary ) {\n\t\tif ( $primary !== $column_name ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$super_admins = get_super_admins();\n\t\t$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), get_edit_user_link( $user->ID ) ) );\n\n\t\t$actions = array();\n\t\t$actions['edit'] = '<a href=\"' . $edit_link . '\">' . __( 'Edit' ) . '</a>';\n\n\t\tif ( current_user_can( 'delete_user', $user->ID ) && ! in_array( $user->user_login, $super_admins ) ) {\n\t\t\t$actions['delete'] = '<a href=\"' . $delete = esc_url( network_admin_url( add_query_arg( '_wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), wp_nonce_url( 'users.php', 'deleteuser' ) . '&amp;action=deleteuser&amp;id=' . $user->ID ) ) ) . '\" class=\"delete\">' . __( 'Delete' ) . '</a>';\n\t\t}\n\n\t\t/**\n\t\t * Filter the action links displayed under each user in the Network Admin Users list table.\n\t\t *\n\t\t * @since 3.2.0\n\t\t *\n\t\t * @param array   $actions An array of action links to be displayed.\n\t\t *                         Default 'Edit', 'Delete'.\n\t\t * @param WP_User $user    WP_User object.\n\t\t */\n\t\t$actions = apply_filters( 'ms_user_row_actions', $actions, $user );\n\t\treturn $this->row_actions( $actions );\n\t}\n}\n", "<?php\n/**\n * Users List Table class.\n *\n * @since 3.1.0\n * @access private\n *\n * @package WordPress\n * @subpackage List_Table\n */\nclass WP_Users_List_Table extends WP_List_Table {\n\n\t/**\n\t * Site ID to generate the Users list table for.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t * @var int\n\t */\n\tpublic $site_id;\n\n\t/**\n\t * Whether or not the current Users list table is for Multisite.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t * @var bool\n\t */\n\tpublic $is_site_users;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @see WP_List_Table::__construct() for more information on default arguments.\n\t *\n\t * @param array $args An associative array of arguments.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\tparent::__construct( array(\n\t\t\t'singular' => 'user',\n\t\t\t'plural'   => 'users',\n\t\t\t'screen'   => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t) );\n\n\t\t$this->is_site_users = 'site-users-network' == $this->screen->id;\n\n\t\tif ( $this->is_site_users )\n\t\t\t$this->site_id = isset( $_REQUEST['id'] ) ? intval( $_REQUEST['id'] ) : 0;\n\t}\n\n\t/**\n\t * Check the current user's permissions.\n\t *\n \t * @since 3.1.0\n\t * @access public\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\tif ( $this->is_site_users )\n\t\t\treturn current_user_can( 'manage_sites' );\n\t\telse\n\t\t\treturn current_user_can( 'list_users' );\n\t}\n\n\t/**\n\t * Prepare the users list for display.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @global string $role\n\t * @global string $usersearch\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $role, $usersearch;\n\n\t\t$usersearch = isset( $_REQUEST['s'] ) ? wp_unslash( trim( $_REQUEST['s'] ) ) : '';\n\n\t\t$role = isset( $_REQUEST['role'] ) ? $_REQUEST['role'] : '';\n\n\t\t$per_page = ( $this->is_site_users ) ? 'site_users_network_per_page' : 'users_per_page';\n\t\t$users_per_page = $this->get_items_per_page( $per_page );\n\n\t\t$paged = $this->get_pagenum();\n\n\t\t$args = array(\n\t\t\t'number' => $users_per_page,\n\t\t\t'offset' => ( $paged-1 ) * $users_per_page,\n\t\t\t'role' => $role,\n\t\t\t'search' => $usersearch,\n\t\t\t'fields' => 'all_with_meta'\n\t\t);\n\n\t\tif ( '' !== $args['search'] )\n\t\t\t$args['search'] = '*' . $args['search'] . '*';\n\n\t\tif ( $this->is_site_users )\n\t\t\t$args['blog_id'] = $this->site_id;\n\n\t\tif ( isset( $_REQUEST['orderby'] ) )\n\t\t\t$args['orderby'] = $_REQUEST['orderby'];\n\n\t\tif ( isset( $_REQUEST['order'] ) )\n\t\t\t$args['order'] = $_REQUEST['order'];\n\n\t\t// Query the user IDs for this page\n\t\t$wp_user_search = new WP_User_Query( $args );\n\n\t\t$this->items = $wp_user_search->get_results();\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_user_search->get_total(),\n\t\t\t'per_page' => $users_per_page,\n\t\t) );\n\t}\n\n\t/**\n\t * Output 'no users' message.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\t_e( 'No users found.' );\n\t}\n\n\t/**\n\t * Return an associative array listing all the views that can be used\n\t * with this table.\n\t *\n\t * Provides a list of roles and user count for that role for easy\n\t * filtering of the user table.\n\t *\n\t * @since  3.1.0\n\t * @access protected\n\t *\n\t * @global string $role\n\t *\n\t * @return array An array of HTML links, one for each view.\n\t */\n\tprotected function get_views() {\n\t\tglobal $role;\n\n\t\t$wp_roles = wp_roles();\n\n\t\tif ( $this->is_site_users ) {\n\t\t\t$url = 'site-users.php?id=' . $this->site_id;\n\t\t\tswitch_to_blog( $this->site_id );\n\t\t\t$users_of_blog = count_users();\n\t\t\trestore_current_blog();\n\t\t} else {\n\t\t\t$url = 'users.php';\n\t\t\t$users_of_blog = count_users();\n\t\t}\n\t\t$total_users = $users_of_blog['total_users'];\n\t\t$avail_roles =& $users_of_blog['avail_roles'];\n\t\tunset($users_of_blog);\n\n\t\t$class = empty($role) ? ' class=\"current\"' : '';\n\t\t$role_links = array();\n\t\t$role_links['all'] = \"<a href='$url'$class>\" . sprintf( _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';\n\t\tforeach ( $wp_roles->get_names() as $this_role => $name ) {\n\t\t\tif ( !isset($avail_roles[$this_role]) )\n\t\t\t\tcontinue;\n\n\t\t\t$class = '';\n\n\t\t\tif ( $this_role == $role ) {\n\t\t\t\t$class = ' class=\"current\"';\n\t\t\t}\n\n\t\t\t$name = translate_user_role( $name );\n\t\t\t/* translators: User role name with count */\n\t\t\t$name = sprintf( __('%1$s <span class=\"count\">(%2$s)</span>'), $name, number_format_i18n( $avail_roles[$this_role] ) );\n\t\t\t$role_links[$this_role] = \"<a href='\" . esc_url( add_query_arg( 'role', $this_role, $url ) ) . \"'$class>$name</a>\";\n\t\t}\n\n\t\treturn $role_links;\n\t}\n\n\t/**\n\t * Retrieve an associative array of bulk actions available on this table.\n\t *\n\t * @since  3.1.0\n\t * @access protected\n\t *\n\t * @return array Array of bulk actions.\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\n\t\tif ( is_multisite() ) {\n\t\t\tif ( current_user_can( 'remove_users' ) )\n\t\t\t\t$actions['remove'] = __( 'Remove' );\n\t\t} else {\n\t\t\tif ( current_user_can( 'delete_users' ) )\n\t\t\t\t$actions['delete'] = __( 'Delete' );\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Output the controls to allow user roles to be changed in bulk.\n\t *\n\t * @since 3.1.0\n\t * @access protected\n\t *\n\t * @param string $which Whether this is being invoked above (\"top\")\n\t *                      or below the table (\"bottom\").\n\t */\n\tprotected function extra_tablenav( $which ) {\n\t\tif ( 'top' != $which )\n\t\t\treturn;\n\t?>\n\t<div class=\"alignleft actions\">\n\t\t<?php if ( current_user_can( 'promote_users' ) ) : ?>\n\t\t<label class=\"screen-reader-text\" for=\"new_role\"><?php _e( 'Change role to&hellip;' ) ?></label>\n\t\t<select name=\"new_role\" id=\"new_role\">\n\t\t\t<option value=\"\"><?php _e( 'Change role to&hellip;' ) ?></option>\n\t\t\t<?php wp_dropdown_roles(); ?>\n\t\t</select>\n\t<?php\n\t\t\tsubmit_button( __( 'Change' ), 'button', 'changeit', false );\n\t\tendif;\n\n\t\t/**\n\t\t * Fires just before the closing div containing the bulk role-change controls\n\t\t * in the Users list table.\n\t\t *\n\t\t * @since 3.5.0\n\t\t */\n\t\tdo_action( 'restrict_manage_users' );\n\t\techo '</div>';\n\t}\n\n\t/**\n\t * Capture the bulk action required, and return it.\n\t *\n\t * Overridden from the base class implementation to capture\n\t * the role change drop-down.\n\t *\n\t * @since  3.1.0\n\t * @access public\n\t *\n\t * @return string The bulk action required.\n\t */\n\tpublic function current_action() {\n\t\tif ( isset($_REQUEST['changeit']) && !empty($_REQUEST['new_role']) )\n\t\t\treturn 'promote';\n\n\t\treturn parent::current_action();\n\t}\n\n\t/**\n\t * Get a list of columns for the list table.\n\t *\n\t * @since  3.1.0\n\t * @access public\n\t *\n\t * @return array Array in which the key is the ID of the column,\n\t *               and the value is the description.\n\t */\n\tpublic function get_columns() {\n\t\t$c = array(\n\t\t\t'cb'       => '<input type=\"checkbox\" />',\n\t\t\t'username' => __( 'Username' ),\n\t\t\t'name'     => __( 'Name' ),\n\t\t\t'email'    => __( 'E-mail' ),\n\t\t\t'role'     => __( 'Role' ),\n\t\t\t'posts'    => __( 'Posts' )\n\t\t);\n\n\t\tif ( $this->is_site_users )\n\t\t\tunset( $c['posts'] );\n\n\t\treturn $c;\n\t}\n\n\t/**\n\t * Get a list of sortable columns for the list table.\n\t *\n\t * @since 3.1.0\n\t * @access protected\n\t *\n\t * @return array Array of sortable columns.\n\t */\n\tprotected function get_sortable_columns() {\n\t\t$c = array(\n\t\t\t'username' => 'login',\n\t\t\t'name'     => 'name',\n\t\t\t'email'    => 'email',\n\t\t);\n\n\t\tif ( $this->is_site_users )\n\t\t\tunset( $c['posts'] );\n\n\t\treturn $c;\n\t}\n\n\t/**\n\t * Generate the list table rows.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t */\n\tpublic function display_rows() {\n\t\t// Query the post counts for this page\n\t\tif ( ! $this->is_site_users )\n\t\t\t$post_counts = count_many_users_posts( array_keys( $this->items ) );\n\n\t\t$editable_roles = array_keys( get_editable_roles() );\n\n\t\tforeach ( $this->items as $userid => $user_object ) {\n\t\t\tif ( count( $user_object->roles ) <= 1 ) {\n\t\t\t\t$role = reset( $user_object->roles );\n\t\t\t} elseif ( $roles = array_intersect( array_values( $user_object->roles ), $editable_roles ) ) {\n\t\t\t\t$role = reset( $roles );\n\t\t\t} else {\n\t\t\t\t$role = reset( $user_object->roles );\n\t\t\t}\n\n\t\t\tif ( is_multisite() && empty( $user_object->allcaps ) )\n\t\t\t\tcontinue;\n\n\t\t\techo \"\\n\\t\" . $this->single_row( $user_object, $style = '', $role, isset( $post_counts ) ? $post_counts[ $userid ] : 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Generate HTML for a single row on the users.php admin panel.\n\t *\n\t * @since 3.1.0\n\t * @since 4.2.0 The `$style` argument was deprecated.\n\t * @access public\n\t *\n\t * @param object $user_object The current user object.\n\t * @param string $style       Deprecated. Not used.\n\t * @param string $role        Optional. Key for the $wp_roles array. Default empty.\n\t * @param int    $numposts    Optional. Post count to display for this user. Defaults\n\t *                            to zero, as in, a new user has made zero posts.\n\t * @return string Output for a single row.\n\t */\n\tpublic function single_row( $user_object, $style = '', $role = '', $numposts = 0 ) {\n\t\t$wp_roles = wp_roles();\n\n\t\tif ( ! ( $user_object instanceof WP_User ) ) {\n\t\t\t$user_object = get_userdata( (int) $user_object );\n\t\t}\n\t\t$user_object->filter = 'display';\n\t\t$email = $user_object->user_email;\n\n\t\tif ( $this->is_site_users )\n\t\t\t$url = \"site-users.php?id={$this->site_id}&amp;\";\n\t\telse\n\t\t\t$url = 'users.php?';\n\n\t\t$checkbox = '';\n\t\t// Check if the user for this row is editable\n\t\tif ( current_user_can( 'list_users' ) ) {\n\t\t\t// Set up the user editing link\n\t\t\t$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), get_edit_user_link( $user_object->ID ) ) );\n\n\t\t\t// Set up the hover actions for this user\n\t\t\t$actions = array();\n\n\t\t\tif ( current_user_can( 'edit_user',  $user_object->ID ) ) {\n\t\t\t\t$edit = \"<strong><a href=\\\"$edit_link\\\">$user_object->user_login</a></strong><br />\";\n\t\t\t\t$actions['edit'] = '<a href=\"' . $edit_link . '\">' . __( 'Edit' ) . '</a>';\n\t\t\t} else {\n\t\t\t\t$edit = \"<strong>$user_object->user_login</strong><br />\";\n\t\t\t}\n\n\t\t\tif ( !is_multisite() && get_current_user_id() != $user_object->ID && current_user_can( 'delete_user', $user_object->ID ) )\n\t\t\t\t$actions['delete'] = \"<a class='submitdelete' href='\" . wp_nonce_url( \"users.php?action=delete&amp;user=$user_object->ID\", 'bulk-users' ) . \"'>\" . __( 'Delete' ) . \"</a>\";\n\t\t\tif ( is_multisite() && get_current_user_id() != $user_object->ID && current_user_can( 'remove_user', $user_object->ID ) )\n\t\t\t\t$actions['remove'] = \"<a class='submitdelete' href='\" . wp_nonce_url( $url.\"action=remove&amp;user=$user_object->ID\", 'bulk-users' ) . \"'>\" . __( 'Remove' ) . \"</a>\";\n\n\t\t\t/**\n\t\t\t * Filter the action links displayed under each user in the Users list table.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param array   $actions     An array of action links to be displayed.\n\t\t\t *                             Default 'Edit', 'Delete' for single site, and\n\t\t\t *                             'Edit', 'Remove' for Multisite.\n\t\t\t * @param WP_User $user_object WP_User object for the currently-listed user.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'user_row_actions', $actions, $user_object );\n\n\t\t\t// Set up the checkbox ( because the user is editable, otherwise it's empty )\n\t\t\t$checkbox = '<label class=\"screen-reader-text\" for=\"user_' . $user_object->ID . '\">' . sprintf( __( 'Select %s' ), $user_object->user_login ) . '</label>'\n\t\t\t\t\t\t. \"<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />\";\n\n\t\t} else {\n\t\t\t$edit = '<strong>' . $user_object->user_login . '</strong>';\n\t\t}\n\t\t$role_name = isset( $wp_roles->role_names[$role] ) ? translate_user_role( $wp_roles->role_names[$role] ) : __( 'None' );\n\t\t$avatar = get_avatar( $user_object->ID, 32 );\n\n\t\t$r = \"<tr id='user-$user_object->ID'>\";\n\n\t\tlist( $columns, $hidden, $sortable, $primary ) = $this->get_column_info();\n\n\t\tforeach ( $columns as $column_name => $column_display_name ) {\n\t\t\t$classes = \"$column_name column-$column_name\";\n\t\t\tif ( $primary === $column_name ) {\n\t\t\t\t$classes .= ' has-row-actions column-primary';\n\t\t\t}\n\t\t\tif ( 'posts' === $column_name ) {\n\t\t\t\t$classes .= ' num'; // Special case for that column\n\t\t\t}\n\n\t\t\tif ( in_array( $column_name, $hidden ) ) {\n\t\t\t\t$classes .= ' hidden';\n\t\t\t}\n\n\t\t\t$data = 'data-colname=\"' . wp_strip_all_tags( $column_display_name ) . '\"';\n\n\t\t\t$attributes = \"class='$classes' $data\";\n\n\t\t\tif ( 'cb' === $column_name ) {\n\t\t\t\t$r .= \"<th scope='row' class='check-column'>$checkbox</th>\";\n\t\t\t} else {\n\t\t\t\t$r .= \"<td $attributes>\";\n\t\t\t\tswitch ( $column_name ) {\n\t\t\t\t\tcase 'username':\n\t\t\t\t\t\t$r .= \"$avatar $edit\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t$r .= \"$user_object->first_name $user_object->last_name\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'email':\n\t\t\t\t\t\t$r .= \"<a href='mailto:$email'>$email</a>\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t$r .= $role_name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'posts':\n\t\t\t\t\t\tif ( $numposts > 0 ) {\n\t\t\t\t\t\t\t$r .= \"<a href='edit.php?author=$user_object->ID' class='edit'>\";\n\t\t\t\t\t\t\t$r .= '<span aria-hidden=\"true\">' . $numposts . '</span>';\n\t\t\t\t\t\t\t$r .= '<span class=\"screen-reader-text\">' . sprintf( _n( '%s post by this author', '%s posts by this author', $numposts ), number_format_i18n( $numposts ) ) . '</span>';\n\t\t\t\t\t\t\t$r .= '</a>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$r .= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Filter the display output of custom columns in the Users list table.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @since 2.8.0\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @param string $output      Custom column output. Default empty.\n\t\t\t\t\t\t * @param string $column_name Column name.\n\t\t\t\t\t\t * @param int    $user_id     ID of the currently-listed user.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$r .= apply_filters( 'manage_users_custom_column', '', $column_name, $user_object->ID );\n\t\t\t\t}\n\n\t\t\t\tif ( $primary === $column_name ) {\n\t\t\t\t\t$r .= $this->row_actions( $actions );\n\t\t\t\t}\n\t\t\t\t$r .= \"</td>\";\n\t\t\t}\n\t\t}\n\t\t$r .= '</tr>';\n\n\t\treturn $r;\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'username'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'username';\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Multisite Users List Table class.\n *\n * @package WordPress\n * @subpackage List_Table\n * @since 3.1.0\n * @access private\n */\nclass WP_MS_Users_List_Table extends WP_List_Table {\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\treturn current_user_can( 'manage_network_users' );\n\t}\n\n\t/**\n\t *\n\t * @global string $usersearch\n\t * @global string $role\n\t * @global wpdb   $wpdb\n\t * @global string $mode\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $usersearch, $role, $wpdb, $mode;\n\n\t\t$usersearch = isset( $_REQUEST['s'] ) ? wp_unslash( trim( $_REQUEST['s'] ) ) : '';\n\n\t\t$users_per_page = $this->get_items_per_page( 'users_network_per_page' );\n\n\t\t$role = isset( $_REQUEST['role'] ) ? $_REQUEST['role'] : '';\n\n\t\t$paged = $this->get_pagenum();\n\n\t\t$args = array(\n\t\t\t'number' => $users_per_page,\n\t\t\t'offset' => ( $paged-1 ) * $users_per_page,\n\t\t\t'search' => $usersearch,\n\t\t\t'blog_id' => 0,\n\t\t\t'fields' => 'all_with_meta'\n\t\t);\n\n\t\tif ( wp_is_large_network( 'users' ) )\n\t\t\t$args['search'] = ltrim( $args['search'], '*' );\n\n\t\tif ( $role == 'super' ) {\n\t\t\t$logins = implode( \"', '\", get_super_admins() );\n\t\t\t$args['include'] = $wpdb->get_col( \"SELECT ID FROM $wpdb->users WHERE user_login IN ('$logins')\" );\n\t\t}\n\n\t\t/*\n\t\t * If the network is large and a search is not being performed,\n\t\t * show only the latest users with no paging in order to avoid\n\t\t * expensive count queries.\n\t\t */\n\t\tif ( !$usersearch && wp_is_large_network( 'users' ) ) {\n\t\t\tif ( !isset($_REQUEST['orderby']) )\n\t\t\t\t$_GET['orderby'] = $_REQUEST['orderby'] = 'id';\n\t\t\tif ( !isset($_REQUEST['order']) )\n\t\t\t\t$_GET['order'] = $_REQUEST['order'] = 'DESC';\n\t\t\t$args['count_total'] = false;\n\t\t}\n\n\t\tif ( isset( $_REQUEST['orderby'] ) )\n\t\t\t$args['orderby'] = $_REQUEST['orderby'];\n\n\t\tif ( isset( $_REQUEST['order'] ) )\n\t\t\t$args['order'] = $_REQUEST['order'];\n\n\t\t$mode = empty( $_REQUEST['mode'] ) ? 'list' : $_REQUEST['mode'];\n\n\t\t// Query the user IDs for this page\n\t\t$wp_user_search = new WP_User_Query( $args );\n\n\t\t$this->items = $wp_user_search->get_results();\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_user_search->get_total(),\n\t\t\t'per_page' => $users_per_page,\n\t\t) );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\t\tif ( current_user_can( 'delete_users' ) )\n\t\t\t$actions['delete'] = __( 'Delete' );\n\t\t$actions['spam'] = _x( 'Mark as Spam', 'user' );\n\t\t$actions['notspam'] = _x( 'Not Spam', 'user' );\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\t_e( 'No users found.' );\n\t}\n\n\t/**\n\t *\n\t * @global string $role\n\t * @return array\n\t */\n\tprotected function get_views() {\n\t\tglobal $role;\n\n\t\t$total_users = get_user_count();\n\t\t$super_admins = get_super_admins();\n\t\t$total_admins = count( $super_admins );\n\n\t\t$class = $role != 'super' ? ' class=\"current\"' : '';\n\t\t$role_links = array();\n\t\t$role_links['all'] = \"<a href='\" . network_admin_url('users.php') . \"'$class>\" . sprintf( _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';\n\t\t$class = $role == 'super' ? ' class=\"current\"' : '';\n\t\t$role_links['super'] = \"<a href='\" . network_admin_url('users.php?role=super') . \"'$class>\" . sprintf( _n( 'Super Admin <span class=\"count\">(%s)</span>', 'Super Admins <span class=\"count\">(%s)</span>', $total_admins ), number_format_i18n( $total_admins ) ) . '</a>';\n\n\t\treturn $role_links;\n\t}\n\n\t/**\n\t * @global string $mode\n\t * @param string $which\n\t */\n\tprotected function pagination( $which ) {\n\t\tglobal $mode;\n\n\t\tparent::pagination ( $which );\n\n\t\tif ( 'top' == $which )\n\t\t\t$this->view_switcher( $mode );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tpublic function get_columns() {\n\t\t$users_columns = array(\n\t\t\t'cb'         => '<input type=\"checkbox\" />',\n\t\t\t'username'   => __( 'Username' ),\n\t\t\t'name'       => __( 'Name' ),\n\t\t\t'email'      => __( 'E-mail' ),\n\t\t\t'registered' => _x( 'Registered', 'user' ),\n\t\t\t'blogs'      => __( 'Sites' )\n\t\t);\n\t\t/**\n\t\t * Filter the columns displayed in the Network Admin Users list table.\n\t\t *\n\t\t * @since MU\n\t\t *\n\t\t * @param array $users_columns An array of user columns. Default 'cb', 'username',\n\t\t *                             'name', 'email', 'registered', 'blogs'.\n\t\t */\n\t\treturn apply_filters( 'wpmu_users_columns', $users_columns );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'username'   => 'login',\n\t\t\t'name'       => 'name',\n\t\t\t'email'      => 'email',\n\t\t\t'registered' => 'id',\n\t\t);\n\t}\n\n\t/**\n\t * Handles the checkbox column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_cb( $user ) {\n\t\t?>\n\t\t<label class=\"screen-reader-text\" for=\"blog_<?php echo $user->ID; ?>\"><?php echo sprintf( __( 'Select %s' ), $user->user_login ); ?></label>\n\t\t<input type=\"checkbox\" id=\"blog_<?php echo $user->ID ?>\" name=\"allusers[]\" value=\"<?php echo esc_attr( $user->ID ) ?>\" />\n\t\t<?php\n\t}\n\n\t/**\n\t * Handles the username column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_username( $user ) {\n\t\t$super_admins = get_super_admins();\n\t\t$avatar\t= get_avatar( $user->user_email, 32 );\n\t\t$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), get_edit_user_link( $user->ID ) ) );\n\n\t\techo $avatar;\n\n\t\t?><strong><a href=\"<?php echo $edit_link; ?>\" class=\"edit\"><?php echo $user->user_login; ?></a><?php\n\t\tif ( in_array( $user->user_login, $super_admins ) ) {\n\t\t\techo ' - ' . __( 'Super Admin' );\n\t\t}\n\t\t?></strong>\n\t<?php\n\t}\n\n\t/**\n\t * Handles the name column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_name( $user ) {\n\t\techo \"$user->first_name $user->last_name\";\n\t}\n\n\t/**\n\t * Handles the email column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_email( $user ) {\n\t\techo \"<a href='\" . esc_url( \"mailto:$user->user_email\" ) . \"'>$user->user_email</a>\";\n\t}\n\n\t/**\n\t * Handles the registered date column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @global string $mode\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_registered( $user ) {\n\t\tglobal $mode;\n\t\tif ( 'list' == $mode ) {\n\t\t\t$date = __( 'Y/m/d' );\n\t\t} else {\n\t\t\t$date = __( 'Y/m/d g:i:s a' );\n\t\t}\n\t\techo mysql2date( $date, $user->user_registered );\n\t}\n\n\t/**\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param WP_User $user\n\t * @param string  $classes\n\t * @param string  $data\n\t * @param string  $primary\n\t */\n\tprotected function _column_blogs( $user, $classes, $data, $primary ) {\n\t\techo '<td class=\"', $classes, ' has-row-actions\" ', $data, '>';\n\t\techo $this->column_blogs( $user );\n\t\techo $this->handle_row_actions( $user, 'blogs', $primary );\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Handles the blogs/sites column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user The current WP_User object.\n\t */\n\tpublic function column_blogs( $user ) {\n\t\t$blogs = get_blogs_of_user( $user->ID, true );\n\t\tif ( ! is_array( $blogs ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ( $blogs as $val ) {\n\t\t\tif ( ! can_edit_network( $val->site_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$path\t= ( $val->path == '/' ) ? '' : $val->path;\n\t\t\techo '<span class=\"site-' . $val->site_id . '\" >';\n\t\t\techo '<a href=\"'. esc_url( network_admin_url( 'site-info.php?id=' . $val->userblog_id ) ) .'\">' . str_replace( '.' . get_current_site()->domain, '', $val->domain . $path ) . '</a>';\n\t\t\techo ' <small class=\"row-actions\">';\n\t\t\t$actions = array();\n\t\t\t$actions['edit'] = '<a href=\"'. esc_url( network_admin_url( 'site-info.php?id=' . $val->userblog_id ) ) .'\">' . __( 'Edit' ) . '</a>';\n\n\t\t\t$class = '';\n\t\t\tif ( $val->spam == 1 ) {\n\t\t\t\t$class .= 'site-spammed ';\n\t\t\t}\n\t\t\tif ( $val->mature == 1 ) {\n\t\t\t\t$class .= 'site-mature ';\n\t\t\t}\n\t\t\tif ( $val->deleted == 1 ) {\n\t\t\t\t$class .= 'site-deleted ';\n\t\t\t}\n\t\t\tif ( $val->archived == 1 ) {\n\t\t\t\t$class .= 'site-archived ';\n\t\t\t}\n\n\t\t\t$actions['view'] = '<a class=\"' . $class . '\" href=\"' . esc_url( get_home_url( $val->userblog_id ) ) . '\">' . __( 'View' ) . '</a>';\n\n\t\t\t/**\n\t\t\t * Filter the action links displayed next the sites a user belongs to\n\t\t\t * in the Network Admin Users list table.\n\t\t\t *\n\t\t\t * @since 3.1.0\n\t\t\t *\n\t\t\t * @param array $actions     An array of action links to be displayed.\n\t\t\t *                           Default 'Edit', 'View'.\n\t\t\t * @param int   $userblog_id The site ID.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'ms_user_list_site_actions', $actions, $val->userblog_id );\n\n\t\t\t$i=0;\n\t\t\t$action_count = count( $actions );\n\t\t\tforeach ( $actions as $action => $link ) {\n\t\t\t\t++$i;\n\t\t\t\t$sep = ( $i == $action_count ) ? '' : ' | ';\n\t\t\t\techo \"<span class='$action'>$link$sep</span>\";\n\t\t\t}\n\t\t\techo '</small></span><br/>';\n\t\t}\n\t}\n\n\t/**\n\t * Handles the default column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_User $user       The current WP_User object.\n\t * @param string $column_name The current column name.\n\t */\n\tpublic function column_default( $user, $column_name ) {\n\t\t/** This filter is documented in wp-admin/includes/class-wp-users-list-table.php */\n\t\techo apply_filters( 'manage_users_custom_column', '', $column_name, $user->ID );\n\t}\n\n\tpublic function display_rows() {\n\t\tforeach ( $this->items as $user ) {\n\t\t\t$class = '';\n\n\t\t\t$status_list = array( 'spam' => 'site-spammed', 'deleted' => 'site-deleted' );\n\n\t\t\tforeach ( $status_list as $status => $col ) {\n\t\t\t\tif ( $user->$status ) {\n\t\t\t\t\t$class .= \" $col\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t?>\n\t\t\t<tr class=\"<?php echo trim( $class ); ?>\">\n\t\t\t\t<?php $this->single_row_columns( $user ); ?>\n\t\t\t</tr>\n\t\t\t<?php\n\t\t}\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'username'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'username';\n\t}\n\n\t/**\n\t * Generates and displays row action links.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param object $user        User being acted upon.\n\t * @param string $column_name Current column name.\n\t * @param string $primary     Primary column name.\n\t * @return string Row actions output for users in Multisite.\n\t */\n\tprotected function handle_row_actions( $user, $column_name, $primary ) {\n\t\tif ( $primary !== $column_name ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$super_admins = get_super_admins();\n\t\t$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), get_edit_user_link( $user->ID ) ) );\n\n\t\t$actions = array();\n\t\t$actions['edit'] = '<a href=\"' . $edit_link . '\">' . __( 'Edit' ) . '</a>';\n\n\t\tif ( current_user_can( 'delete_user', $user->ID ) && ! in_array( $user->user_login, $super_admins ) ) {\n\t\t\t$actions['delete'] = '<a href=\"' . $delete = esc_url( network_admin_url( add_query_arg( '_wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), wp_nonce_url( 'users.php', 'deleteuser' ) . '&amp;action=deleteuser&amp;id=' . $user->ID ) ) ) . '\" class=\"delete\">' . __( 'Delete' ) . '</a>';\n\t\t}\n\n\t\t/**\n\t\t * Filter the action links displayed under each user in the Network Admin Users list table.\n\t\t *\n\t\t * @since 3.2.0\n\t\t *\n\t\t * @param array   $actions An array of action links to be displayed.\n\t\t *                         Default 'Edit', 'Delete'.\n\t\t * @param WP_User $user    WP_User object.\n\t\t */\n\t\t$actions = apply_filters( 'ms_user_row_actions', $actions, $user );\n\t\treturn $this->row_actions( $actions );\n\t}\n}\n", "<?php\n/**\n * Users List Table class.\n *\n * @since 3.1.0\n * @access private\n *\n * @package WordPress\n * @subpackage List_Table\n */\nclass WP_Users_List_Table extends WP_List_Table {\n\n\t/**\n\t * Site ID to generate the Users list table for.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t * @var int\n\t */\n\tpublic $site_id;\n\n\t/**\n\t * Whether or not the current Users list table is for Multisite.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t * @var bool\n\t */\n\tpublic $is_site_users;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @see WP_List_Table::__construct() for more information on default arguments.\n\t *\n\t * @param array $args An associative array of arguments.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\tparent::__construct( array(\n\t\t\t'singular' => 'user',\n\t\t\t'plural'   => 'users',\n\t\t\t'screen'   => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t) );\n\n\t\t$this->is_site_users = 'site-users-network' == $this->screen->id;\n\n\t\tif ( $this->is_site_users )\n\t\t\t$this->site_id = isset( $_REQUEST['id'] ) ? intval( $_REQUEST['id'] ) : 0;\n\t}\n\n\t/**\n\t * Check the current user's permissions.\n\t *\n \t * @since 3.1.0\n\t * @access public\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\tif ( $this->is_site_users )\n\t\t\treturn current_user_can( 'manage_sites' );\n\t\telse\n\t\t\treturn current_user_can( 'list_users' );\n\t}\n\n\t/**\n\t * Prepare the users list for display.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @global string $role\n\t * @global string $usersearch\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $role, $usersearch;\n\n\t\t$usersearch = isset( $_REQUEST['s'] ) ? wp_unslash( trim( $_REQUEST['s'] ) ) : '';\n\n\t\t$role = isset( $_REQUEST['role'] ) ? $_REQUEST['role'] : '';\n\n\t\t$per_page = ( $this->is_site_users ) ? 'site_users_network_per_page' : 'users_per_page';\n\t\t$users_per_page = $this->get_items_per_page( $per_page );\n\n\t\t$paged = $this->get_pagenum();\n\n\t\t$args = array(\n\t\t\t'number' => $users_per_page,\n\t\t\t'offset' => ( $paged-1 ) * $users_per_page,\n\t\t\t'role' => $role,\n\t\t\t'search' => $usersearch,\n\t\t\t'fields' => 'all_with_meta'\n\t\t);\n\n\t\tif ( '' !== $args['search'] )\n\t\t\t$args['search'] = '*' . $args['search'] . '*';\n\n\t\tif ( $this->is_site_users )\n\t\t\t$args['blog_id'] = $this->site_id;\n\n\t\tif ( isset( $_REQUEST['orderby'] ) )\n\t\t\t$args['orderby'] = $_REQUEST['orderby'];\n\n\t\tif ( isset( $_REQUEST['order'] ) )\n\t\t\t$args['order'] = $_REQUEST['order'];\n\n\t\t// Query the user IDs for this page\n\t\t$wp_user_search = new WP_User_Query( $args );\n\n\t\t$this->items = $wp_user_search->get_results();\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_user_search->get_total(),\n\t\t\t'per_page' => $users_per_page,\n\t\t) );\n\t}\n\n\t/**\n\t * Output 'no users' message.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\t_e( 'No users found.' );\n\t}\n\n\t/**\n\t * Return an associative array listing all the views that can be used\n\t * with this table.\n\t *\n\t * Provides a list of roles and user count for that role for easy\n\t * filtering of the user table.\n\t *\n\t * @since  3.1.0\n\t * @access protected\n\t *\n\t * @global string $role\n\t *\n\t * @return array An array of HTML links, one for each view.\n\t */\n\tprotected function get_views() {\n\t\tglobal $role;\n\n\t\t$wp_roles = wp_roles();\n\n\t\tif ( $this->is_site_users ) {\n\t\t\t$url = 'site-users.php?id=' . $this->site_id;\n\t\t\tswitch_to_blog( $this->site_id );\n\t\t\t$users_of_blog = count_users();\n\t\t\trestore_current_blog();\n\t\t} else {\n\t\t\t$url = 'users.php';\n\t\t\t$users_of_blog = count_users();\n\t\t}\n\t\t$total_users = $users_of_blog['total_users'];\n\t\t$avail_roles =& $users_of_blog['avail_roles'];\n\t\tunset($users_of_blog);\n\n\t\t$class = empty($role) ? ' class=\"current\"' : '';\n\t\t$role_links = array();\n\t\t$role_links['all'] = \"<a href='$url'$class>\" . sprintf( _nx( 'All <span class=\"count\">(%s)</span>', 'All <span class=\"count\">(%s)</span>', $total_users, 'users' ), number_format_i18n( $total_users ) ) . '</a>';\n\t\tforeach ( $wp_roles->get_names() as $this_role => $name ) {\n\t\t\tif ( !isset($avail_roles[$this_role]) )\n\t\t\t\tcontinue;\n\n\t\t\t$class = '';\n\n\t\t\tif ( $this_role == $role ) {\n\t\t\t\t$class = ' class=\"current\"';\n\t\t\t}\n\n\t\t\t$name = translate_user_role( $name );\n\t\t\t/* translators: User role name with count */\n\t\t\t$name = sprintf( __('%1$s <span class=\"count\">(%2$s)</span>'), $name, number_format_i18n( $avail_roles[$this_role] ) );\n\t\t\t$role_links[$this_role] = \"<a href='\" . esc_url( add_query_arg( 'role', $this_role, $url ) ) . \"'$class>$name</a>\";\n\t\t}\n\n\t\treturn $role_links;\n\t}\n\n\t/**\n\t * Retrieve an associative array of bulk actions available on this table.\n\t *\n\t * @since  3.1.0\n\t * @access protected\n\t *\n\t * @return array Array of bulk actions.\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\n\t\tif ( is_multisite() ) {\n\t\t\tif ( current_user_can( 'remove_users' ) )\n\t\t\t\t$actions['remove'] = __( 'Remove' );\n\t\t} else {\n\t\t\tif ( current_user_can( 'delete_users' ) )\n\t\t\t\t$actions['delete'] = __( 'Delete' );\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Output the controls to allow user roles to be changed in bulk.\n\t *\n\t * @since 3.1.0\n\t * @access protected\n\t *\n\t * @param string $which Whether this is being invoked above (\"top\")\n\t *                      or below the table (\"bottom\").\n\t */\n\tprotected function extra_tablenav( $which ) {\n\t\tif ( 'top' != $which )\n\t\t\treturn;\n\t?>\n\t<div class=\"alignleft actions\">\n\t\t<?php if ( current_user_can( 'promote_users' ) ) : ?>\n\t\t<label class=\"screen-reader-text\" for=\"new_role\"><?php _e( 'Change role to&hellip;' ) ?></label>\n\t\t<select name=\"new_role\" id=\"new_role\">\n\t\t\t<option value=\"\"><?php _e( 'Change role to&hellip;' ) ?></option>\n\t\t\t<?php wp_dropdown_roles(); ?>\n\t\t</select>\n\t<?php\n\t\t\tsubmit_button( __( 'Change' ), 'button', 'changeit', false );\n\t\tendif;\n\n\t\t/**\n\t\t * Fires just before the closing div containing the bulk role-change controls\n\t\t * in the Users list table.\n\t\t *\n\t\t * @since 3.5.0\n\t\t */\n\t\tdo_action( 'restrict_manage_users' );\n\t\techo '</div>';\n\t}\n\n\t/**\n\t * Capture the bulk action required, and return it.\n\t *\n\t * Overridden from the base class implementation to capture\n\t * the role change drop-down.\n\t *\n\t * @since  3.1.0\n\t * @access public\n\t *\n\t * @return string The bulk action required.\n\t */\n\tpublic function current_action() {\n\t\tif ( isset($_REQUEST['changeit']) && !empty($_REQUEST['new_role']) )\n\t\t\treturn 'promote';\n\n\t\treturn parent::current_action();\n\t}\n\n\t/**\n\t * Get a list of columns for the list table.\n\t *\n\t * @since  3.1.0\n\t * @access public\n\t *\n\t * @return array Array in which the key is the ID of the column,\n\t *               and the value is the description.\n\t */\n\tpublic function get_columns() {\n\t\t$c = array(\n\t\t\t'cb'       => '<input type=\"checkbox\" />',\n\t\t\t'username' => __( 'Username' ),\n\t\t\t'name'     => __( 'Name' ),\n\t\t\t'email'    => __( 'E-mail' ),\n\t\t\t'role'     => __( 'Role' ),\n\t\t\t'posts'    => __( 'Posts' )\n\t\t);\n\n\t\tif ( $this->is_site_users )\n\t\t\tunset( $c['posts'] );\n\n\t\treturn $c;\n\t}\n\n\t/**\n\t * Get a list of sortable columns for the list table.\n\t *\n\t * @since 3.1.0\n\t * @access protected\n\t *\n\t * @return array Array of sortable columns.\n\t */\n\tprotected function get_sortable_columns() {\n\t\t$c = array(\n\t\t\t'username' => 'login',\n\t\t\t'name'     => 'name',\n\t\t\t'email'    => 'email',\n\t\t);\n\n\t\tif ( $this->is_site_users )\n\t\t\tunset( $c['posts'] );\n\n\t\treturn $c;\n\t}\n\n\t/**\n\t * Generate the list table rows.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t */\n\tpublic function display_rows() {\n\t\t// Query the post counts for this page\n\t\tif ( ! $this->is_site_users )\n\t\t\t$post_counts = count_many_users_posts( array_keys( $this->items ) );\n\n\t\t$editable_roles = array_keys( get_editable_roles() );\n\n\t\tforeach ( $this->items as $userid => $user_object ) {\n\t\t\tif ( count( $user_object->roles ) <= 1 ) {\n\t\t\t\t$role = reset( $user_object->roles );\n\t\t\t} elseif ( $roles = array_intersect( array_values( $user_object->roles ), $editable_roles ) ) {\n\t\t\t\t$role = reset( $roles );\n\t\t\t} else {\n\t\t\t\t$role = reset( $user_object->roles );\n\t\t\t}\n\n\t\t\tif ( is_multisite() && empty( $user_object->allcaps ) )\n\t\t\t\tcontinue;\n\n\t\t\techo \"\\n\\t\" . $this->single_row( $user_object, $style = '', $role, isset( $post_counts ) ? $post_counts[ $userid ] : 0 );\n\t\t}\n\t}\n\n\t/**\n\t * Generate HTML for a single row on the users.php admin panel.\n\t *\n\t * @since 3.1.0\n\t * @since 4.2.0 The `$style` argument was deprecated.\n\t * @access public\n\t *\n\t * @param object $user_object The current user object.\n\t * @param string $style       Deprecated. Not used.\n\t * @param string $role        Optional. Key for the $wp_roles array. Default empty.\n\t * @param int    $numposts    Optional. Post count to display for this user. Defaults\n\t *                            to zero, as in, a new user has made zero posts.\n\t * @return string Output for a single row.\n\t */\n\tpublic function single_row( $user_object, $style = '', $role = '', $numposts = 0 ) {\n\t\t$wp_roles = wp_roles();\n\n\t\tif ( ! ( $user_object instanceof WP_User ) ) {\n\t\t\t$user_object = get_userdata( (int) $user_object );\n\t\t}\n\t\t$user_object->filter = 'display';\n\t\t$email = $user_object->user_email;\n\n\t\tif ( $this->is_site_users )\n\t\t\t$url = \"site-users.php?id={$this->site_id}&amp;\";\n\t\telse\n\t\t\t$url = 'users.php?';\n\n\t\t$checkbox = '';\n\t\t// Check if the user for this row is editable\n\t\tif ( current_user_can( 'list_users' ) ) {\n\t\t\t// Set up the user editing link\n\t\t\t$edit_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( wp_unslash( $_SERVER['REQUEST_URI'] ) ), get_edit_user_link( $user_object->ID ) ) );\n\n\t\t\t// Set up the hover actions for this user\n\t\t\t$actions = array();\n\n\t\t\tif ( current_user_can( 'edit_user',  $user_object->ID ) ) {\n\t\t\t\t$edit = \"<strong><a href=\\\"$edit_link\\\">$user_object->user_login</a></strong><br />\";\n\t\t\t\t$actions['edit'] = '<a href=\"' . $edit_link . '\">' . __( 'Edit' ) . '</a>';\n\t\t\t} else {\n\t\t\t\t$edit = \"<strong>$user_object->user_login</strong><br />\";\n\t\t\t}\n\n\t\t\tif ( !is_multisite() && get_current_user_id() != $user_object->ID && current_user_can( 'delete_user', $user_object->ID ) )\n\t\t\t\t$actions['delete'] = \"<a class='submitdelete' href='\" . wp_nonce_url( \"users.php?action=delete&amp;user=$user_object->ID\", 'bulk-users' ) . \"'>\" . __( 'Delete' ) . \"</a>\";\n\t\t\tif ( is_multisite() && get_current_user_id() != $user_object->ID && current_user_can( 'remove_user', $user_object->ID ) )\n\t\t\t\t$actions['remove'] = \"<a class='submitdelete' href='\" . wp_nonce_url( $url.\"action=remove&amp;user=$user_object->ID\", 'bulk-users' ) . \"'>\" . __( 'Remove' ) . \"</a>\";\n\n\t\t\t/**\n\t\t\t * Filter the action links displayed under each user in the Users list table.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param array   $actions     An array of action links to be displayed.\n\t\t\t *                             Default 'Edit', 'Delete' for single site, and\n\t\t\t *                             'Edit', 'Remove' for Multisite.\n\t\t\t * @param WP_User $user_object WP_User object for the currently-listed user.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'user_row_actions', $actions, $user_object );\n\n\t\t\t// Set up the checkbox ( because the user is editable, otherwise it's empty )\n\t\t\t$checkbox = '<label class=\"screen-reader-text\" for=\"user_' . $user_object->ID . '\">' . sprintf( __( 'Select %s' ), $user_object->user_login ) . '</label>'\n\t\t\t\t\t\t. \"<input type='checkbox' name='users[]' id='user_{$user_object->ID}' class='$role' value='{$user_object->ID}' />\";\n\n\t\t} else {\n\t\t\t$edit = '<strong>' . $user_object->user_login . '</strong>';\n\t\t}\n\t\t$role_name = isset( $wp_roles->role_names[$role] ) ? translate_user_role( $wp_roles->role_names[$role] ) : __( 'None' );\n\t\t$avatar = get_avatar( $user_object->ID, 32 );\n\n\t\t$r = \"<tr id='user-$user_object->ID'>\";\n\n\t\tlist( $columns, $hidden, $sortable, $primary ) = $this->get_column_info();\n\n\t\tforeach ( $columns as $column_name => $column_display_name ) {\n\t\t\t$classes = \"$column_name column-$column_name\";\n\t\t\tif ( $primary === $column_name ) {\n\t\t\t\t$classes .= ' has-row-actions column-primary';\n\t\t\t}\n\t\t\tif ( 'posts' === $column_name ) {\n\t\t\t\t$classes .= ' num'; // Special case for that column\n\t\t\t}\n\n\t\t\tif ( in_array( $column_name, $hidden ) ) {\n\t\t\t\t$classes .= ' hidden';\n\t\t\t}\n\n\t\t\t$data = 'data-colname=\"' . wp_strip_all_tags( $column_display_name ) . '\"';\n\n\t\t\t$attributes = \"class='$classes' $data\";\n\n\t\t\tif ( 'cb' === $column_name ) {\n\t\t\t\t$r .= \"<th scope='row' class='check-column'>$checkbox</th>\";\n\t\t\t} else {\n\t\t\t\t$r .= \"<td $attributes>\";\n\t\t\t\tswitch ( $column_name ) {\n\t\t\t\t\tcase 'username':\n\t\t\t\t\t\t$r .= \"$avatar $edit\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t$r .= \"$user_object->first_name $user_object->last_name\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'email':\n\t\t\t\t\t\t$r .= \"<a href='\" . esc_url( \"mailto:$email\" ) . \"'>$email</a>\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t$r .= $role_name;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'posts':\n\t\t\t\t\t\tif ( $numposts > 0 ) {\n\t\t\t\t\t\t\t$r .= \"<a href='edit.php?author=$user_object->ID' class='edit'>\";\n\t\t\t\t\t\t\t$r .= '<span aria-hidden=\"true\">' . $numposts . '</span>';\n\t\t\t\t\t\t\t$r .= '<span class=\"screen-reader-text\">' . sprintf( _n( '%s post by this author', '%s posts by this author', $numposts ), number_format_i18n( $numposts ) ) . '</span>';\n\t\t\t\t\t\t\t$r .= '</a>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$r .= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Filter the display output of custom columns in the Users list table.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @since 2.8.0\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @param string $output      Custom column output. Default empty.\n\t\t\t\t\t\t * @param string $column_name Column name.\n\t\t\t\t\t\t * @param int    $user_id     ID of the currently-listed user.\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$r .= apply_filters( 'manage_users_custom_column', '', $column_name, $user_object->ID );\n\t\t\t\t}\n\n\t\t\t\tif ( $primary === $column_name ) {\n\t\t\t\t\t$r .= $this->row_actions( $actions );\n\t\t\t\t}\n\t\t\t\t$r .= \"</td>\";\n\t\t\t}\n\t\t}\n\t\t$r .= '</tr>';\n\n\t\treturn $r;\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'username'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'username';\n\t}\n}\n"], "filenames": ["wp-admin/includes/class-wp-ms-users-list-table.php", "wp-admin/includes/class-wp-users-list-table.php"], "buggy_code_start_loc": [236, 438], "buggy_code_end_loc": [237, 439], "fixing_code_start_loc": [236, 438], "fixing_code_end_loc": [237, 439], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the user list table in WordPress before 4.3.1 allows remote authenticated users to inject arbitrary web script or HTML via a crafted e-mail address, a different vulnerability than CVE-2015-5714.", "other": {"cve": {"id": "CVE-2015-7989", "sourceIdentifier": "security@debian.org", "published": "2016-05-22T01:59:03.867", "lastModified": "2017-11-04T01:29:11.943", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the user list table in WordPress before 4.3.1 allows remote authenticated users to inject arbitrary web script or HTML via a crafted e-mail address, a different vulnerability than CVE-2015-5714."}, {"lang": "es", "value": "Vulnerabilidad de XSS en la tabla de lista de usuarios en WordPress en versiones anteriores a 4.3.1 permite a usuarios remotos autenticados inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de una direcci\u00f3n de e-mail manipulada, una vulnerabilidad diferente de CVE-2015-5714."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.3.0", "matchCriteriaId": "398224EA-459C-49CF-9176-B144CA74A0F2"}]}]}], "references": [{"url": "http://www.debian.org/security/2015/dsa-3375", "source": "security@debian.org"}, {"url": "http://www.debian.org/security/2015/dsa-3383", "source": "security@debian.org"}, {"url": "http://www.securitytracker.com/id/1033979", "source": "security@debian.org"}, {"url": "https://codex.wordpress.org/Version_4.3.1", "source": "security@debian.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/f91a5fd10ea7245e5b41e288624819a37adf290a", "source": "security@debian.org", "tags": ["Patch"]}, {"url": "https://security-tracker.debian.org/tracker/CVE-2015-7989", "source": "security@debian.org"}, {"url": "https://wordpress.org/news/2015/09/wordpress-4-3-1/", "source": "security@debian.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8187", "source": "security@debian.org"}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/f91a5fd10ea7245e5b41e288624819a37adf290a"}}