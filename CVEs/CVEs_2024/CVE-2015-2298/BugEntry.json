{"buggy_code": ["/**\n * 2014 John McLear (Etherpad Foundation / McLear Ltd)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar async = require(\"async\");\nvar db = require(\"../db/DB\").db;\nvar ERR = require(\"async-stacktrace\");\n\nexports.getPadRaw = function(padId, callback){\n  async.waterfall([\n  function(cb){\n\n    // Get the Pad available content keys\n    db.findKeys(\"pad:\"+padId+\"*\", null, function(err,records){\n      if(!err){\n        cb(err, records);\n      }\n    })\n  },\n  function(records, cb){\n    var data = {};\n\n    async.forEachSeries(Object.keys(records), function(key, r){\n\n      // For each piece of info about a pad.\n      db.get(records[key], function(err, entry){\n        data[records[key]] = entry;\n\n        // Get the Pad Authors\n        if(entry.pool && entry.pool.numToAttrib){\n          var authors = entry.pool.numToAttrib;\n          async.forEachSeries(Object.keys(authors), function(k, c){\n            if(authors[k][0] === \"author\"){\n              var authorId = authors[k][1];\n\n              // Get the author info\n              db.get(\"globalAuthor:\"+authorId, function(e, authorEntry){\n                if(authorEntry && authorEntry.padIDs) authorEntry.padIDs = padId;\n                if(!e) data[\"globalAuthor:\"+authorId] = authorEntry;\n              });\n\n            }\n            // console.log(\"authorsK\", authors[k]);\n            c(null);\n          });\n        }\n        r(null); // callback;\n      });\n    }, function(err){ \n      cb(err, data);\n    })\n  }\n  ], function(err, data){\n    callback(null, data);\n  });\n}\n"], "fixing_code": ["/**\n * 2014 John McLear (Etherpad Foundation / McLear Ltd)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar async = require(\"async\");\nvar db = require(\"../db/DB\").db;\nvar ERR = require(\"async-stacktrace\");\n\nexports.getPadRaw = function(padId, callback){\n  async.waterfall([\n  function(cb){\n\n    // Get the Pad\n    db.findKeys(\"pad:\"+padId, null, function(err,padcontent){\n      if(!err){\n        cb(err, padcontent);\n      }\n    })\n  },\n  function(padcontent,cb){\n\n    // Get the Pad available content keys\n    db.findKeys(\"pad:\"+padId+\":*\", null, function(err,records){\n      if(!err){\n        for (var key in padcontent) { records.push(padcontent[key]);}\n        cb(err, records);\n      }\n    })\n  },\n  function(records, cb){\n    var data = {};\n\n    async.forEachSeries(Object.keys(records), function(key, r){\n\n      // For each piece of info about a pad.\n      db.get(records[key], function(err, entry){\n        data[records[key]] = entry;\n\n        // Get the Pad Authors\n        if(entry.pool && entry.pool.numToAttrib){\n          var authors = entry.pool.numToAttrib;\n          async.forEachSeries(Object.keys(authors), function(k, c){\n            if(authors[k][0] === \"author\"){\n              var authorId = authors[k][1];\n\n              // Get the author info\n              db.get(\"globalAuthor:\"+authorId, function(e, authorEntry){\n                if(authorEntry && authorEntry.padIDs) authorEntry.padIDs = padId;\n                if(!e) data[\"globalAuthor:\"+authorId] = authorEntry;\n              });\n\n            }\n            // console.log(\"authorsK\", authors[k]);\n            c(null);\n          });\n        }\n        r(null); // callback;\n      });\n    }, function(err){ \n      cb(err, data);\n    })\n  }\n  ], function(err, data){\n    callback(null, data);\n  });\n}\n"], "filenames": ["src/node/utils/ExportEtherpad.js"], "buggy_code_start_loc": [25], "buggy_code_end_loc": [28], "fixing_code_start_loc": [26], "fixing_code_end_loc": [39], "type": "CWE-200", "message": "node/utils/ExportEtherpad.js in Etherpad 1.5.x before 1.5.2 might allow remote attackers to obtain sensitive information by leveraging an improper substring check when exporting a padID.", "other": {"cve": {"id": "CVE-2015-2298", "sourceIdentifier": "cve@mitre.org", "published": "2018-01-12T17:29:00.553", "lastModified": "2018-01-29T13:31:09.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "node/utils/ExportEtherpad.js in Etherpad 1.5.x before 1.5.2 might allow remote attackers to obtain sensitive information by leveraging an improper substring check when exporting a padID."}, {"lang": "es", "value": "node/utils/ExportEtherpad.js en Etherpad en versiones 1.5.x anteriores a la 1.5.2 podr\u00eda permitir que atacantes remotos obtengan informaci\u00f3n sensible aprovechando una comprobaci\u00f3n indebida de subcadena al exportar un padID."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:etherpad:etherpad:1.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "AB82785A-1099-4730-9782-803F0577EFDE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:etherpad:etherpad:1.5.0:d:*:*:*:*:*:*", "matchCriteriaId": "A746650C-DAF9-4431-9552-487663719ABB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:etherpad:etherpad:1.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "BB1BC2A6-1B10-457A-AC41-F500CABF8C41"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/03/15/3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/ether/etherpad-lite/commit/a0fb65205c7d7ff95f00eb9fd88e93b300f30c3d", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/ether/etherpad-lite/releases/tag/1.5.2", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes"]}]}, "github_commit_url": "https://github.com/ether/etherpad-lite/commit/a0fb65205c7d7ff95f00eb9fd88e93b300f30c3d"}}