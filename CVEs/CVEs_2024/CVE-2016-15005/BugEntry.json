{"buggy_code": ["package golf\n\nimport (\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"time\"\n)\n\nconst chars = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n\nfunc randomBytes(strlen int) []byte {\n\trand.Seed(time.Now().UTC().UnixNano())\n\tresult := make([]byte, strlen)\n\tfor i := 0; i < strlen; i++ {\n\t\tresult[i] = chars[rand.Intn(len(chars))]\n\t}\n\treturn result\n}\n\nfunc decodeXSRFToken(maskedToken string) ([]byte, []byte, error) {\n\tmaskedTokenBytes, err := hex.DecodeString(maskedToken)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tmask := maskedTokenBytes[0:4]\n\ttoken := websocketMask(mask, maskedTokenBytes[4:])\n\treturn mask, token, nil\n}\n\nfunc websocketMask(mask, data []byte) []byte {\n\tfor i, v := range data {\n\t\tdata[i] = v ^ mask[i%4]\n\t}\n\treturn data\n}\n\nfunc compareToken(tokenA, tokenB []byte) bool {\n\tif tokenA == nil && tokenB == nil {\n\t\treturn true\n\t}\n\tif tokenA == nil || tokenB == nil {\n\t\treturn false\n\t}\n\tif len(tokenA) != len(tokenB) {\n\t\treturn false\n\t}\n\tfor i := range tokenA {\n\t\tif tokenA[i] != tokenB[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc newXSRFToken() string {\n\ttokenBytes := randomBytes(32)\n\tmaskBytes := randomBytes(4)\n\tmaskedTokenBytes := append(maskBytes, websocketMask(maskBytes, tokenBytes)...)\n\tmaskedToken := hex.EncodeToString(maskedTokenBytes)\n\treturn maskedToken\n}\n"], "fixing_code": ["package golf\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n)\n\nconst chars = \"abcdefghijklmnopqrstuvwxyz0123456789\"\n\nfunc randomBytes(strlen int) []byte {\n\tb := make([]byte, strlen)\n\t_, err := rand.Read(b)\n\tif err != nil {\n\t\t// panic on failure since this indicates a failure of the system's\n\t\t// CSPRNG\n\t\tpanic(err)\n\t}\n\treturn b\n}\n\nfunc decodeXSRFToken(maskedToken string) ([]byte, []byte, error) {\n\tmaskedTokenBytes, err := hex.DecodeString(maskedToken)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\tmask := maskedTokenBytes[0:4]\n\ttoken := websocketMask(mask, maskedTokenBytes[4:])\n\treturn mask, token, nil\n}\n\nfunc websocketMask(mask, data []byte) []byte {\n\tfor i, v := range data {\n\t\tdata[i] = v ^ mask[i%4]\n\t}\n\treturn data\n}\n\nfunc compareToken(tokenA, tokenB []byte) bool {\n\tif tokenA == nil && tokenB == nil {\n\t\treturn true\n\t}\n\tif tokenA == nil || tokenB == nil {\n\t\treturn false\n\t}\n\tif len(tokenA) != len(tokenB) {\n\t\treturn false\n\t}\n\tfor i := range tokenA {\n\t\tif tokenA[i] != tokenB[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc newXSRFToken() string {\n\ttokenBytes := randomBytes(32)\n\tmaskBytes := randomBytes(4)\n\tmaskedTokenBytes := append(maskBytes, websocketMask(maskBytes, tokenBytes)...)\n\tmaskedToken := hex.EncodeToString(maskedTokenBytes)\n\treturn maskedToken\n}\n"], "filenames": ["xsrf.go"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [18], "fixing_code_start_loc": [4], "fixing_code_end_loc": [19], "type": "CWE-352", "message": "CSRF tokens are generated using math/rand, which is not a cryptographically secure random number generator, allowing an attacker to predict values and bypass CSRF protections with relatively few requests.", "other": {"cve": {"id": "CVE-2016-15005", "sourceIdentifier": "security@golang.org", "published": "2022-12-27T22:15:11.003", "lastModified": "2023-02-28T18:15:09.533", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "CSRF tokens are generated using math/rand, which is not a cryptographically secure random number generator, allowing an attacker to predict values and bypass CSRF protections with relatively few requests."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:golf_project:golf:*:*:*:*:*:go:*:*", "versionEndExcluding": "0.3.0", "matchCriteriaId": "E8C3D7B1-B623-4B34-823C-2DCD94EAF18D"}]}]}], "references": [{"url": "https://github.com/dinever/golf/commit/3776f338be48b5bc5e8cf9faff7851fc52a3f1fe", "source": "security@golang.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dinever/golf/issues/20", "source": "security@golang.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/dinever/golf/pull/24", "source": "security@golang.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://pkg.go.dev/vuln/GO-2020-0045", "source": "security@golang.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dinever/golf/commit/3776f338be48b5bc5e8cf9faff7851fc52a3f1fe"}}