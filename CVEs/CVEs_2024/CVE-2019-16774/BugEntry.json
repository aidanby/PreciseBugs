{"buggy_code": ["<?php\n/**\n *\n * This file is part of phpFastCache.\n *\n * @license MIT License (MIT)\n *\n * For full copyright and license information, please see the docs/CREDITS.txt file.\n *\n * @author Khoa Bui (khoaofgod)  <khoaofgod@gmail.com> http://www.phpfastcache.com\n * @author Georges.L (Geolim4)  <contact@geolim4.com>\n *\n */\n\nnamespace phpFastCache\\Drivers\\Cookie;\n\nuse phpFastCache\\Core\\DriverAbstract;\nuse phpFastCache\\Core\\StandardPsr6StructureTrait;\nuse phpFastCache\\Entities\\driverStatistic;\nuse phpFastCache\\Exceptions\\phpFastCacheDriverCheckException;\nuse phpFastCache\\Exceptions\\phpFastCacheDriverException;\nuse Psr\\Cache\\CacheItemInterface;\n\n/**\n * Class Driver\n * @package phpFastCache\\Drivers\n */\nclass Driver extends DriverAbstract\n{\n    const PREFIX = 'PFC_';\n\n    /**\n     * Driver constructor.\n     * @param array $config\n     * @throws phpFastCacheDriverException\n     */\n    public function __construct(array $config = [])\n    {\n        $this->setup($config);\n\n        if (!$this->driverCheck()) {\n            throw new phpFastCacheDriverCheckException(sprintf(self::DRIVER_CHECK_FAILURE, $this->getDriverName()));\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public function driverCheck()\n    {\n        if (function_exists('setcookie')) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    protected function driverConnect()\n    {\n        return !(!array_key_exists('phpFastCache', $_COOKIE) && !@setcookie('phpFastCache', 1, 10));\n    }\n\n    /**\n     * @param \\Psr\\Cache\\CacheItemInterface $item\n     * @return mixed\n     * @throws \\InvalidArgumentException\n     */\n    protected function driverWrite(CacheItemInterface $item)\n    {\n        /**\n         * Check for Cross-Driver type confusion\n         */\n        if ($item instanceof Item) {\n            $this->driverConnect();\n            $keyword = self::PREFIX . $item->getKey();\n            $v = json_encode($this->driverPreWrap($item));\n\n            if (isset($this->config[ 'limited_memory_each_object' ]) && strlen($v) > $this->config[ 'limited_memory_each_object' ]) {\n                return false;\n            }\n\n            return setcookie($keyword, $v, $item->getExpirationDate()->getTimestamp(), '/');\n        } else {\n            throw new \\InvalidArgumentException('Cross-Driver type confusion detected');\n        }\n    }\n\n    /**\n     * @param \\Psr\\Cache\\CacheItemInterface $item\n     * @return mixed\n     * @throws \\phpFastCache\\Exceptions\\phpFastCacheDriverException\n     */\n    protected function driverRead(CacheItemInterface $item)\n    {\n        $this->driverConnect();\n        // return null if no caching\n        // return value if in caching\n        $keyword = self::PREFIX . $item->getKey();\n        $x = isset($_COOKIE[ $keyword ]) ? $this->decode(json_decode($_COOKIE[ $keyword ], true)) : false;\n\n        if ($x == false) {\n            return null;\n        } else {\n            if (!is_scalar($this->driverUnwrapData($x)) && !is_null($this->driverUnwrapData($x))) {\n                throw new phpFastCacheDriverException('Hacking attempt: The decoding returned a non-scalar value, Cookie driver does not allow this.');\n            }\n\n            return $x;\n        }\n    }\n\n    /**\n     * @param $key\n     * @return int\n     */\n    protected function driverReadExpirationDate($key)\n    {\n        $this->driverConnect();\n        $keyword = self::PREFIX . $key;\n        $x = isset($_COOKIE[ $keyword ]) ? $this->decode(json_decode($_COOKIE[ $keyword ])->t) : false;\n\n        return $x ? $x - time() : $x;\n    }\n\n    /**\n     * @param \\Psr\\Cache\\CacheItemInterface $item\n     * @return bool\n     * @throws \\InvalidArgumentException\n     */\n    protected function driverDelete(CacheItemInterface $item)\n    {\n        /**\n         * Check for Cross-Driver type confusion\n         */\n        if ($item instanceof Item) {\n            $this->driverConnect();\n            $keyword = self::PREFIX . $item->getKey();\n            $_COOKIE[ $keyword ] = null;\n\n            return @setcookie($keyword, null, -10);\n        } else {\n            throw new \\InvalidArgumentException('Cross-Driver type confusion detected');\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    protected function driverClear()\n    {\n        $return = null;\n        $this->driverConnect();\n        foreach ($_COOKIE as $keyword => $value) {\n            if (strpos($keyword, self::PREFIX) !== false) {\n                $_COOKIE[ $keyword ] = null;\n                $result = @setcookie($keyword, null, -10);\n                if ($return !== false) {\n                    $return = $result;\n                }\n            }\n        }\n\n        return $return;\n    }\n\n    /********************\n     *\n     * PSR-6 Extended Methods\n     *\n     *******************/\n\n    /**\n     * @return driverStatistic\n     */\n    public function getStats()\n    {\n        $size = 0;\n        $stat = new driverStatistic();\n        $stat->setData($_COOKIE);\n\n        /**\n         * Only count PFC Cookie\n         */\n        foreach ($_COOKIE as $key => $value) {\n            if (strpos($key, self::PREFIX) === 0) {\n                $size += strlen($value);\n            }\n        }\n\n        $stat->setSize($size);\n\n        return $stat;\n    }\n}"], "fixing_code": ["<?php\n/**\n *\n * This file is part of phpFastCache.\n *\n * @license MIT License (MIT)\n *\n * For full copyright and license information, please see the docs/CREDITS.txt file.\n *\n * @author Khoa Bui (khoaofgod)  <khoaofgod@gmail.com> http://www.phpfastcache.com\n * @author Georges.L (Geolim4)  <contact@geolim4.com>\n *\n */\n\nnamespace phpFastCache\\Drivers\\Cookie;\n\nuse phpFastCache\\Core\\DriverAbstract;\nuse phpFastCache\\Core\\StandardPsr6StructureTrait;\nuse phpFastCache\\Entities\\driverStatistic;\nuse phpFastCache\\Exceptions\\phpFastCacheDriverCheckException;\nuse phpFastCache\\Exceptions\\phpFastCacheDriverException;\nuse Psr\\Cache\\CacheItemInterface;\n\n/**\n * Class Driver\n * @package phpFastCache\\Drivers\n */\nclass Driver extends DriverAbstract\n{\n    const PREFIX = 'PFC_';\n\n    /**\n     * Driver constructor.\n     * @param array $config\n     * @throws phpFastCacheDriverException\n     */\n    public function __construct(array $config = [])\n    {\n        $this->setup($config);\n\n        if (!$this->driverCheck()) {\n            throw new phpFastCacheDriverCheckException(sprintf(self::DRIVER_CHECK_FAILURE, $this->getDriverName()));\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public function driverCheck()\n    {\n        if (function_exists('setcookie')) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    protected function driverConnect()\n    {\n        return !(!array_key_exists('phpFastCache', $_COOKIE) && !@setcookie('phpFastCache', 1, 10));\n    }\n\n    /**\n     * @param \\Psr\\Cache\\CacheItemInterface $item\n     * @return mixed\n     * @throws \\InvalidArgumentException\n     */\n    protected function driverWrite(CacheItemInterface $item)\n    {\n        /**\n         * Check for Cross-Driver type confusion\n         */\n        if ($item instanceof Item) {\n            $this->driverConnect();\n            $keyword = self::PREFIX . $item->getKey();\n            $v = json_encode($this->driverPreWrap($item));\n\n            if (isset($this->config[ 'limited_memory_each_object' ]) && strlen($v) > $this->config[ 'limited_memory_each_object' ]) {\n                return false;\n            }\n\n            return setcookie($keyword, $v, $item->getExpirationDate()->getTimestamp(), '/');\n        } else {\n            throw new \\InvalidArgumentException('Cross-Driver type confusion detected');\n        }\n    }\n\n    /**\n     * @param \\Psr\\Cache\\CacheItemInterface $item\n     * @return mixed\n     * @throws \\phpFastCache\\Exceptions\\phpFastCacheDriverException\n     */\n    protected function driverRead(CacheItemInterface $item)\n    {\n        $this->driverConnect();\n        // return null if no caching\n        // return value if in caching\n        $keyword = self::PREFIX . $item->getKey();\n        $x = isset($_COOKIE[ $keyword ]) ? json_decode($_COOKIE[ $keyword ], true) : false;\n\n        if ($x == false) {\n            return null;\n        } else {\n            if (!is_scalar($this->driverUnwrapData($x)) && !is_null($this->driverUnwrapData($x))) {\n                throw new phpFastCacheDriverException('Hacking attempt: The decoding returned a non-scalar value, Cookie driver does not allow this.');\n            }\n\n            return $x;\n        }\n    }\n\n    /**\n     * @param $key\n     * @return int\n     */\n    protected function driverReadExpirationDate($key)\n    {\n        $this->driverConnect();\n        $keyword = self::PREFIX . $key;\n        $x = isset($_COOKIE[ $keyword ]) ? $this->decode(json_decode($_COOKIE[ $keyword ])->t) : false;\n\n        return $x ? $x - time() : $x;\n    }\n\n    /**\n     * @param \\Psr\\Cache\\CacheItemInterface $item\n     * @return bool\n     * @throws \\InvalidArgumentException\n     */\n    protected function driverDelete(CacheItemInterface $item)\n    {\n        /**\n         * Check for Cross-Driver type confusion\n         */\n        if ($item instanceof Item) {\n            $this->driverConnect();\n            $keyword = self::PREFIX . $item->getKey();\n            $_COOKIE[ $keyword ] = null;\n\n            return @setcookie($keyword, null, -10);\n        } else {\n            throw new \\InvalidArgumentException('Cross-Driver type confusion detected');\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    protected function driverClear()\n    {\n        $return = null;\n        $this->driverConnect();\n        foreach ($_COOKIE as $keyword => $value) {\n            if (strpos($keyword, self::PREFIX) !== false) {\n                $_COOKIE[ $keyword ] = null;\n                $result = @setcookie($keyword, null, -10);\n                if ($return !== false) {\n                    $return = $result;\n                }\n            }\n        }\n\n        return $return;\n    }\n\n    /********************\n     *\n     * PSR-6 Extended Methods\n     *\n     *******************/\n\n    /**\n     * @return driverStatistic\n     */\n    public function getStats()\n    {\n        $size = 0;\n        $stat = new driverStatistic();\n        $stat->setData($_COOKIE);\n\n        /**\n         * Only count PFC Cookie\n         */\n        foreach ($_COOKIE as $key => $value) {\n            if (strpos($key, self::PREFIX) === 0) {\n                $size += strlen($value);\n            }\n        }\n\n        $stat->setSize($size);\n\n        return $stat;\n    }\n}"], "filenames": ["src/phpFastCache/Drivers/Cookie/Driver.php"], "buggy_code_start_loc": [102], "buggy_code_end_loc": [103], "fixing_code_start_loc": [102], "fixing_code_end_loc": [103], "type": "CWE-502", "message": "In phpfastcache before 5.1.3, there is a possible object injection vulnerability in cookie driver.", "other": {"cve": {"id": "CVE-2019-16774", "sourceIdentifier": "security-advisories@github.com", "published": "2019-12-12T23:15:12.167", "lastModified": "2020-10-07T15:00:54.010", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In phpfastcache before 5.1.3, there is a possible object injection vulnerability in cookie driver."}, {"lang": "es", "value": "En phpfastcache versiones anteriores a 5.1.3, se presenta una posible vulnerabilidad de inyecci\u00f3n de objetos en el controlador de cookies."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpfastcache:phpfastcache:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.0.13", "matchCriteriaId": "FB2B908F-C990-48EA-8CA5-F356F0CED811"}]}]}], "references": [{"url": "https://github.com/PHPSocialNetwork/phpfastcache/commit/c4527205cb7a402b595790c74310791f5b04a1a4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PHPSocialNetwork/phpfastcache/releases/tag/5.0.13", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/PHPSocialNetwork/phpfastcache/security/advisories/GHSA-484f-743f-6jx2", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PHPSocialNetwork/phpfastcache/commit/c4527205cb7a402b595790c74310791f5b04a1a4"}}