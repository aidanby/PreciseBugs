{"buggy_code": ["<?php\n\n/**\n * MailCleaner\n *\n * @license http://www.mailcleaner.net/open/licence_en.html MailCleaner Public License\n * @copyright 2015 Fastnet SA\n */\n\n/**\n * Newsletters controller\n */\nclass NewslettersController extends Zend_Controller_Action\n{\n    public function indexAction()\n    {\n        die();\n    }\n    \n    public function allowAction()\n    {        \n        $status = 0;\n        \n        $eximId = $this->getRequest()->getParam('id');\n\n        $spam = new Default_Model_DbTable_Spam();\n\n        $row = $spam->fetchRow($spam->select()->where('exim_id = ?', $eximId));\n                \n        if (!empty($row)) {\n            $status = 1;\n            \n            $recipient = $row->to_user.'@'.$row->to_domain;\n            \n\t    $storage = $row->store_slave;\n\n            $sender = $this->getFromHeader($eximId, $recipient);\n            \n            $status = 2;\n            \n            if ($sender) {\n                \n                $status = 3;\n                \n                $data = array(\n                    'sender'    => $sender,\n                    'recipient' => $recipient,\n                    'type'      => 'wnews',\n                    'expiracy'  => '0000-00-00',\n                    'status'    => '1',\n                    'comments'  => '[Newsletter]'\n                );\n                \n                try {\n                    $rule = new Default_Model_DbTable_NewsletterRule();\n                    $rule->insert($data);   \n                } catch (Zend_Db_Exception $e) {}\n                \n                $status = 4;\n                          \n                if (! $this->getRequest()->isXmlHttpRequest()) {\n                  $this->release($eximId, $recipient, $storage);\n                } else {\n                    return $this->_helper->json(array('id' => $eximId, 'username' => $recipient, 'storage' => $storage, 'status' => $status));\n                }                \n            }  \n        }\n    }\n    \n    private function getFromHeader($id, $recipient)\n    {\n        require_once('/usr/mailcleaner/www/classes/user/Spam.php');  \n        \n        $spam = new Spam();\n        $spam->loadDatas($id, $recipient);\n        $spam->loadHeadersAndBody();\n        $headers = $spam->getHeadersArray();\n        \n        $match = array();\n        preg_match('/[<]?([-0-9a-zA-Z.+_\\']+@[-0-9a-zA-Z.+_\\']+\\.[a-zA-Z-0-9]+)[>]?/', trim($headers['From']), $match);\n        \n        if (!empty($match[1])) {\n           return $match[1];\n        }\n        \n        return false;\n    }\n    \n    private function release($eximId, $recipient, $storage)\n    {\n        $url  = $this->getRequest()->getScheme() . '://' . $this->getRequest()->getHttpHost();\n        $url .= '/fm.php?id='.$eximId.'&a='.$recipient.'&s='.$storage;\n        \n        $ch = curl_init();  \n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * MailCleaner\n *\n * @license http://www.mailcleaner.net/open/licence_en.html MailCleaner Public License\n * @copyright 2015 Fastnet SA\n */\n\n/**\n * Newsletters controller\n */\nclass NewslettersController extends Zend_Controller_Action\n{\n    public function indexAction()\n    {\n        die();\n    }\n    \n    public function allowAction()\n    {        \n        $status = 0;\n        \n        $eximId = $this->getRequest()->getParam('id');\n\t\n\tif (strlen($eximId) == 0) { die(); }\n\n        $spam = new Default_Model_DbTable_Spam();\n\n        $row = $spam->fetchRow($spam->select()->where('exim_id = ?', $eximId));\n                \n        if (!empty($row)) {\n            $status = 1;\n            \n            $recipient = $row->to_user.'@'.$row->to_domain;\n            \n\t    $storage = $row->store_slave;\n\n            $sender = $this->getFromHeader($eximId, $recipient);\n            \n            $status = 2;\n            \n            if ($sender) {\n                \n                $status = 3;\n                \n                $data = array(\n                    'sender'    => $sender,\n                    'recipient' => $recipient,\n                    'type'      => 'wnews',\n                    'expiracy'  => '0000-00-00',\n                    'status'    => '1',\n                    'comments'  => '[Newsletter]'\n                );\n                \n                try {\n                    $rule = new Default_Model_DbTable_NewsletterRule();\n                    $rule->insert($data);   \n                } catch (Zend_Db_Exception $e) {}\n                \n                $status = 4;\n                          \n                if (! $this->getRequest()->isXmlHttpRequest()) {\n                  $this->release($eximId, $recipient, $storage);\n                } else {\n                    return $this->_helper->json(array('id' => $eximId, 'username' => $recipient, 'storage' => $storage, 'status' => $status));\n                }                \n            }  \n        }\n    }\n    \n    private function getFromHeader($id, $recipient)\n    {\n        require_once('/usr/mailcleaner/www/classes/user/Spam.php');  \n        \n        $spam = new Spam();\n        $spam->loadDatas($id, $recipient);\n        $spam->loadHeadersAndBody();\n        $headers = $spam->getHeadersArray();\n        \n        $match = array();\n        preg_match('/[<]?([-0-9a-zA-Z.+_\\']+@[-0-9a-zA-Z.+_\\']+\\.[a-zA-Z-0-9]+)[>]?/', trim($headers['From']), $match);\n        \n        if (!empty($match[1])) {\n           return $match[1];\n        }\n        \n        return false;\n    }\n    \n    private function release($eximId, $recipient, $storage)\n    {\n        $url  = $this->getRequest()->getScheme() . '://' . $this->getRequest()->getHttpHost();\n        $url .= '/fm.php?id='.$eximId.'&a='.$recipient.'&s='.$storage;\n        \n        $ch = curl_init();  \n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, false);\n        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_exec($ch);\n        curl_close($ch);\n    }\n}\n"], "filenames": ["www/guis/users/application/controllers/NewslettersController.php"], "buggy_code_start_loc": [24], "buggy_code_end_loc": [24], "fixing_code_start_loc": [25], "fixing_code_end_loc": [27], "type": "CWE-862", "message": "MailCleaner before c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9 is affected by: Unauthenticated MySQL database password information disclosure. The impact is: MySQL database content disclosure (e.g. username, password). The component is: The API call in the function allowAction() in NewslettersController.php. The attack vector is: HTTP Get request. The fixed version is: c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9.", "other": {"cve": {"id": "CVE-2019-1010246", "sourceIdentifier": "josh@bress.net", "published": "2019-07-18T19:15:11.257", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MailCleaner before c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9 is affected by: Unauthenticated MySQL database password information disclosure. The impact is: MySQL database content disclosure (e.g. username, password). The component is: The API call in the function allowAction() in NewslettersController.php. The attack vector is: HTTP Get request. The fixed version is: c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9."}, {"lang": "es", "value": "MailCleaner anterior a c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9 est\u00e1 afectado por: Divulgaci\u00f3n de informaci\u00f3n de la contrase\u00f1a de la base de datos MySQL no autenticada. El impacto es: divulgaci\u00f3n de contenido de la base de datos MySQL (por ejemplo, nombre de usuario, contrase\u00f1a). El componente es: La llamada API en la funci\u00f3n allowAction() en NewslettersController.php. El vector de ataque es: petici\u00f3n HTTP Get. La versi\u00f3n corregida es: c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mailcleaner:mailcleaner:*:*:*:*:*:*:*:*", "versionEndExcluding": "2019-01-21", "matchCriteriaId": "EA5D4F87-55D3-4173-B7A0-6B9A17BBC715"}]}]}], "references": [{"url": "https://github.com/MailCleaner/MailCleaner/commit/c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9", "source": "josh@bress.net", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MailCleaner/MailCleaner/commit/c888fbb6aaa7c5f8400f637bcf1cbb844de46cd9"}}