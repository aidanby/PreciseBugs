{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.renderer.printer;\n\nimport java.util.Arrays;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.xml.html.HTMLElementSanitizer;\n\n/**\n * Base toolkit class for all XHTML-based renderers. This printer handles whitespaces so that it prints \"&nbsp;\" when\n * needed (i.e. when the spaces are at the beginning or at the end of an element's content or when there are more than 1\n * contiguous spaces, except for CDATA sections and inside PRE elements. It also knows how to handle XHTML comments).\n *\n * @version $Id$\n * @since 1.7M1\n */\npublic class XHTMLWikiPrinter extends XMLWikiPrinter\n{\n    /**\n     * Prefix that is used for invalid/disallowed attributes.\n     *\n     * @since 14.6RC1\n     */\n    @Unstable\n    public static final String TRANSLATED_ATTRIBUTE_PREFIX = \"data-xwiki-translated-attribute-\";\n\n    /**\n     * The sanitizer used to restrict allowed elements and attributes, can be null (no restrictions).\n     *\n     * @since 14.6RC1\n     */\n    protected final HTMLElementSanitizer htmlElementSanitizer;\n\n    private int spaceCount;\n\n    private boolean isInCData;\n\n    private boolean isInPreserveElement;\n\n    private boolean elementEnded;\n\n    private boolean hasTextBeenPrinted;\n\n    private boolean isStandalone;\n\n    /**\n     * @param printer the object to which to write the XHTML output to\n     */\n    public XHTMLWikiPrinter(WikiPrinter printer)\n    {\n        this(printer, null);\n    }\n\n    /**\n     * @param printer the object to which to write the XHTML output to\n     * @param htmlElementSanitizer the sanitizer to use for sanitizing elements and attributes\n     */\n    public XHTMLWikiPrinter(WikiPrinter printer, HTMLElementSanitizer htmlElementSanitizer)\n    {\n        super(printer);\n        this.htmlElementSanitizer = htmlElementSanitizer;\n    }\n\n    /**\n     * Use it to specify that the current element to print is standalone. This value might be used to know if the first\n     * space should be printed with a simple space or a {@code &nbsp;} entity. Note that the standalone value is\n     * automatically reset after first printing of a space, or when a text is printed.\n     *\n     * @since 12.2\n     */\n    public void setStandalone()\n    {\n        this.isStandalone = true;\n    }\n\n    @Override\n    public void printXML(String str)\n    {\n        handleSpaceWhenInText();\n        super.printXML(str);\n        this.hasTextBeenPrinted = true;\n        this.isStandalone = false;\n    }\n\n    @Override\n    public void printXMLElement(String name)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name);\n        }\n    }\n\n    @Override\n    public void printXMLElement(String name, String[][] attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLElement(String name, Map<String, String> attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name);\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name, String[][] attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name, Map<String, String> attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name, Attributes attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLEndElement(String name)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenEndlement();\n            super.printXMLEndElement(name);\n            this.elementEnded = true;\n        }\n    }\n\n    @Override\n    public void printXMLComment(String content)\n    {\n        printXMLComment(content, false);\n    }\n\n    @Override\n    public void printXMLComment(String content, boolean escape)\n    {\n        handleSpaceWhenStartElement();\n        super.printXMLComment(content, escape);\n        this.elementEnded = true;\n    }\n\n    @Override\n    public void printXMLStartCData()\n    {\n        handleSpaceWhenStartElement();\n        super.printXMLStartCData();\n    }\n\n    @Override\n    public void printXMLEndCData()\n    {\n        handleSpaceWhenEndlement();\n        super.printXMLEndCData();\n    }\n\n    /**\n     * This method should be used to print a space rather than calling <code>printXML(\" \")</code>.\n     */\n    public void printSpace()\n    {\n        this.spaceCount++;\n    }\n\n    @Override\n    public void printRaw(String raw)\n    {\n        handleSpaceWhenStartElement();\n        // Prevent injecting {{/html}}. We escape {{/html}} as well as prefixes of {{/html}} at the end of the raw\n        // content to avoid that raw content and plain texts can be combined to construct the full {{/html}}. This may\n        // cause errors as we might not be using the right escaping for the context (e.g., JSON or HTML comments) but\n        // for this reason we also escape in JSON output and HTML comments.\n        String escapedRaw = raw.replace(\"{{/html}}\", \"&#123;&#123;/html}}\");\n\n        StringBuilder prefix = new StringBuilder();\n        for (Character nextChar : List.of('{', '/', 'h', 't', 'm', 'l', '}', '}')) {\n            prefix.append(nextChar);\n\n            if (escapedRaw.endsWith(prefix.toString())) {\n                escapedRaw =\n                    escapedRaw.substring(0, escapedRaw.length() - prefix.length()) + \"&#123;\" + prefix.substring(1);\n                break;\n            }\n        }\n        super.printRaw(escapedRaw);\n        this.elementEnded = true;\n    }\n\n    private void handleSpaceWhenInText()\n    {\n        if (this.elementEnded || this.hasTextBeenPrinted) {\n            handleSpaceWhenStartElement();\n        } else {\n            handleSpaceWhenEndlement();\n        }\n    }\n\n    private Map<String, String> cleanAttributes(String elementName, Map<String, String> attributes)\n    {\n        Map<String, String> cleanAttributes;\n\n        if (this.htmlElementSanitizer == null || attributes == null) {\n            cleanAttributes = attributes;\n        } else {\n            cleanAttributes = new LinkedHashMap<>();\n            for (Map.Entry<String, String> e : attributes.entrySet()) {\n                if (this.htmlElementSanitizer.isAttributeAllowed(elementName, e.getKey(), e.getValue())) {\n                    cleanAttributes.put(e.getKey(), e.getValue());\n                } else {\n                    cleanAttributes.put(TRANSLATED_ATTRIBUTE_PREFIX + e.getKey(), e.getValue());\n                }\n            }\n        }\n\n        return cleanAttributes;\n    }\n\n    private String[][] cleanAttributes(String elementName, String[][] attributes)\n    {\n        String[][] allowedAttributes;\n        if (this.htmlElementSanitizer == null || attributes == null) {\n            allowedAttributes = attributes;\n        } else {\n            allowedAttributes = Arrays.stream(attributes)\n                .map(entry -> {\n                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, entry[0], entry[1])) {\n                        return entry;\n                    } else {\n                        return new String[] { TRANSLATED_ATTRIBUTE_PREFIX + entry[0], entry[1] };\n                    }\n                })\n                .toArray(String[][]::new);\n        }\n\n        return allowedAttributes;\n    }\n\n    private Attributes cleanAttributes(String elementName, Attributes attributes)\n    {\n        Attributes allowedAttribute;\n\n        if (this.htmlElementSanitizer == null || attributes == null) {\n            allowedAttribute = attributes;\n        } else {\n            allowedAttribute = new AttributesImpl();\n\n            for (int i = 0; i < attributes.getLength(); ++i) {\n                if (this.htmlElementSanitizer.isAttributeAllowed(elementName, attributes.getQName(i),\n                    attributes.getValue(i)))\n                {\n                    ((AttributesImpl) allowedAttribute).addAttribute(null, null, attributes.getQName(i),\n                        null, attributes.getValue(i));\n                } else {\n                    ((AttributesImpl) allowedAttribute).addAttribute(null, null,\n                        TRANSLATED_ATTRIBUTE_PREFIX + attributes.getQName(i), null, attributes.getValue(i));\n                }\n            }\n        }\n\n        return allowedAttribute;\n    }\n\n    private void handleSpaceWhenStartElement()\n    {\n        // Use case: <tag1>something <tag2>...\n        // Use case: <tag1>something <!--...\n        if (this.spaceCount > 0) {\n            if (!this.isInCData && !this.isInPreserveElement) {\n                // We print a single space as a normal space, except if we are at the beginning of a standalone element\n                // in that case we want a non-breaking space so it won't be stripped.\n                // Any supplementary space will be printed as non-breaking spaces so we keep them too.\n                if (this.isStandalone && !this.hasTextBeenPrinted) {\n                    printEntity(\"&nbsp;\");\n                } else {\n                    super.printXML(\" \");\n                }\n                for (int i = 0; i < this.spaceCount - 1; i++) {\n                    printEntity(\"&nbsp;\");\n                }\n            } else {\n                super.printXML(StringUtils.repeat(' ', this.spaceCount));\n            }\n            this.isStandalone = false;\n        }\n        this.spaceCount = 0;\n        this.elementEnded = false;\n        this.hasTextBeenPrinted = false;\n    }\n\n    private void handleSpaceWhenEndlement()\n    {\n        // Use case: <tag1>something </tag1>...\n        // All spaces are &nbsp; spaces since otherwise they'll be all stripped by browsers\n        if (!this.isInCData && !this.isInPreserveElement) {\n            for (int i = 0; i < this.spaceCount; i++) {\n                printEntity(\"&nbsp;\");\n            }\n        } else {\n            super.printXML(StringUtils.repeat(' ', this.spaceCount));\n        }\n        this.spaceCount = 0;\n        this.elementEnded = false;\n        this.hasTextBeenPrinted = false;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.renderer.printer;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\n/**\n * Unit tests for {@link XHTMLWikiPrinter}.\n *\n * @version $Id$\n */\nclass XHTMLWikiPrinterTest\n{\n    @ParameterizedTest\n    @CsvSource({\n        \"Closing the {{/html}} macro., Closing the &#123;&#123;/html}} macro.\",\n        \"Starting a macro {, Starting a macro &#123;\",\n        \"Partial: {{/h, Partial: {&#123;/h\",\n        \"{{html}}, {{html}}\"\n    })\n    void testRawEscaping(String input, String expected)\n    {\n        WikiPrinter mockPrinter = mock(WikiPrinter.class);\n        XHTMLWikiPrinter xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter);\n        xhtmlWikiPrinter.printRaw(input);\n        verify(mockPrinter).print(expected);\n    }\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.renderer.printer;\n\nimport java.util.Arrays;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.xwiki.stability.Unstable;\nimport org.xwiki.xml.html.HTMLElementSanitizer;\n\n/**\n * Base toolkit class for all XHTML-based renderers. This printer handles whitespaces so that it prints \"&nbsp;\" when\n * needed (i.e. when the spaces are at the beginning or at the end of an element's content or when there are more than 1\n * contiguous spaces, except for CDATA sections and inside PRE elements. It also knows how to handle XHTML comments).\n *\n * @version $Id$\n * @since 1.7M1\n */\npublic class XHTMLWikiPrinter extends XMLWikiPrinter\n{\n    /**\n     * Prefix that is used for invalid/disallowed attributes.\n     *\n     * @since 14.6RC1\n     */\n    @Unstable\n    public static final String TRANSLATED_ATTRIBUTE_PREFIX = \"data-xwiki-translated-attribute-\";\n\n    /**\n     * Pattern for matching characters not allowed in data attributes.\n     * <p>\n     * This is the inverse of the definition of a name being\n     * <a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible>XML-compatible</a>,\n     * i.e., matching the <a href=\"https://www.w3.org/TR/xml/#NT-Name\">Name production</a> without \":\".\n     */\n    private static final Pattern DATA_REPLACEMENT_PATTERN = Pattern.compile(\"[^A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\"\n        + \"\\\\u00F8-\\\\u02ff\\\\u0370-\\\\u037d\\\\u037f-\\\\u1fff\\\\u200c\\\\u200d\\\\u2070-\\\\u218f\\\\u2c00-\\\\u2fef\\\\u3001-\\\\ud7ff\"\n        + \"\\\\uf900-\\\\ufdcf\\\\ufdf0-\\\\ufffd\\\\x{10000}-\\\\x{EFFFF}\\\\-.0-9\\\\u00b7\\\\u0300-\\\\u036f\\\\u203f-\\\\u2040]\");\n\n    /**\n     * The sanitizer used to restrict allowed elements and attributes, can be null (no restrictions).\n     *\n     * @since 14.6RC1\n     */\n    protected final HTMLElementSanitizer htmlElementSanitizer;\n\n    private int spaceCount;\n\n    private boolean isInCData;\n\n    private boolean isInPreserveElement;\n\n    private boolean elementEnded;\n\n    private boolean hasTextBeenPrinted;\n\n    private boolean isStandalone;\n\n    /**\n     * @param printer the object to which to write the XHTML output to\n     */\n    public XHTMLWikiPrinter(WikiPrinter printer)\n    {\n        this(printer, null);\n    }\n\n    /**\n     * @param printer the object to which to write the XHTML output to\n     * @param htmlElementSanitizer the sanitizer to use for sanitizing elements and attributes\n     */\n    public XHTMLWikiPrinter(WikiPrinter printer, HTMLElementSanitizer htmlElementSanitizer)\n    {\n        super(printer);\n        this.htmlElementSanitizer = htmlElementSanitizer;\n    }\n\n    /**\n     * Use it to specify that the current element to print is standalone. This value might be used to know if the first\n     * space should be printed with a simple space or a {@code &nbsp;} entity. Note that the standalone value is\n     * automatically reset after first printing of a space, or when a text is printed.\n     *\n     * @since 12.2\n     */\n    public void setStandalone()\n    {\n        this.isStandalone = true;\n    }\n\n    @Override\n    public void printXML(String str)\n    {\n        handleSpaceWhenInText();\n        super.printXML(str);\n        this.hasTextBeenPrinted = true;\n        this.isStandalone = false;\n    }\n\n    @Override\n    public void printXMLElement(String name)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name);\n        }\n    }\n\n    @Override\n    public void printXMLElement(String name, String[][] attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLElement(String name, Map<String, String> attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name);\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name, String[][] attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name, Map<String, String> attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLStartElement(String name, Attributes attributes)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenStartElement();\n            super.printXMLStartElement(name, cleanAttributes(name, attributes));\n        }\n    }\n\n    @Override\n    public void printXMLEndElement(String name)\n    {\n        if (this.htmlElementSanitizer == null || this.htmlElementSanitizer.isElementAllowed(name)) {\n            handleSpaceWhenEndlement();\n            super.printXMLEndElement(name);\n            this.elementEnded = true;\n        }\n    }\n\n    @Override\n    public void printXMLComment(String content)\n    {\n        printXMLComment(content, false);\n    }\n\n    @Override\n    public void printXMLComment(String content, boolean escape)\n    {\n        handleSpaceWhenStartElement();\n        super.printXMLComment(content, escape);\n        this.elementEnded = true;\n    }\n\n    @Override\n    public void printXMLStartCData()\n    {\n        handleSpaceWhenStartElement();\n        super.printXMLStartCData();\n    }\n\n    @Override\n    public void printXMLEndCData()\n    {\n        handleSpaceWhenEndlement();\n        super.printXMLEndCData();\n    }\n\n    /**\n     * This method should be used to print a space rather than calling <code>printXML(\" \")</code>.\n     */\n    public void printSpace()\n    {\n        this.spaceCount++;\n    }\n\n    @Override\n    public void printRaw(String raw)\n    {\n        handleSpaceWhenStartElement();\n        // Prevent injecting {{/html}}. We escape {{/html}} as well as prefixes of {{/html}} at the end of the raw\n        // content to avoid that raw content and plain texts can be combined to construct the full {{/html}}. This may\n        // cause errors as we might not be using the right escaping for the context (e.g., JSON or HTML comments) but\n        // for this reason we also escape in JSON output and HTML comments.\n        String escapedRaw = raw.replace(\"{{/html}}\", \"&#123;&#123;/html}}\");\n\n        StringBuilder prefix = new StringBuilder();\n        for (Character nextChar : List.of('{', '/', 'h', 't', 'm', 'l', '}', '}')) {\n            prefix.append(nextChar);\n\n            if (escapedRaw.endsWith(prefix.toString())) {\n                escapedRaw =\n                    escapedRaw.substring(0, escapedRaw.length() - prefix.length()) + \"&#123;\" + prefix.substring(1);\n                break;\n            }\n        }\n        super.printRaw(escapedRaw);\n        this.elementEnded = true;\n    }\n\n    private void handleSpaceWhenInText()\n    {\n        if (this.elementEnded || this.hasTextBeenPrinted) {\n            handleSpaceWhenStartElement();\n        } else {\n            handleSpaceWhenEndlement();\n        }\n    }\n\n    private Map<String, String> cleanAttributes(String elementName, Map<String, String> attributes)\n    {\n        Map<String, String> cleanAttributes;\n\n        if (this.htmlElementSanitizer == null || attributes == null) {\n            cleanAttributes = attributes;\n        } else {\n            cleanAttributes = new LinkedHashMap<>();\n            for (Map.Entry<String, String> e : attributes.entrySet()) {\n                if (this.htmlElementSanitizer.isAttributeAllowed(elementName, e.getKey(), e.getValue())) {\n                    cleanAttributes.put(e.getKey(), e.getValue());\n                } else {\n                    // Keep but clean invalid attributes with a prefix (removed during parsing) to avoid loosing them\n                    // through WYSIWYG editing.\n                    String translatedName =\n                        TRANSLATED_ATTRIBUTE_PREFIX + removeInvalidDataAttributeCharacters(e.getKey());\n                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, translatedName, e.getValue())) {\n                        cleanAttributes.put(translatedName, e.getValue());\n                    }\n                }\n            }\n        }\n\n        return cleanAttributes;\n    }\n\n    private String[][] cleanAttributes(String elementName, String[][] attributes)\n    {\n        String[][] allowedAttributes;\n        if (this.htmlElementSanitizer == null || attributes == null) {\n            allowedAttributes = attributes;\n        } else {\n            allowedAttributes = Arrays.stream(attributes)\n                .map(entry -> {\n                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, entry[0], entry[1])) {\n                        return entry;\n                    } else {\n                        // Keep but clean invalid attributes with a prefix (removed during parsing) to avoid loosing\n                        // them through WYSIWYG editing.\n                        String translatedName =\n                            TRANSLATED_ATTRIBUTE_PREFIX + removeInvalidDataAttributeCharacters(entry[0]);\n                        if (this.htmlElementSanitizer.isAttributeAllowed(elementName, translatedName, entry[1])) {\n                            return new String[] { translatedName, entry[1] };\n                        } else {\n                            return null;\n                        }\n                    }\n                })\n                .filter(Objects::nonNull)\n                .toArray(String[][]::new);\n        }\n\n        return allowedAttributes;\n    }\n\n    private Attributes cleanAttributes(String elementName, Attributes attributes)\n    {\n        Attributes allowedAttribute;\n\n        if (this.htmlElementSanitizer == null || attributes == null) {\n            allowedAttribute = attributes;\n        } else {\n            allowedAttribute = new AttributesImpl();\n\n            for (int i = 0; i < attributes.getLength(); ++i) {\n                if (this.htmlElementSanitizer.isAttributeAllowed(elementName, attributes.getQName(i),\n                    attributes.getValue(i)))\n                {\n                    ((AttributesImpl) allowedAttribute).addAttribute(null, null, attributes.getQName(i),\n                        null, attributes.getValue(i));\n                } else {\n                    // Keep but clean invalid attributes with a prefix (removed during parsing) to avoid loosing them\n                    // through WYSIWYG editing.\n                    String translatedName =\n                        TRANSLATED_ATTRIBUTE_PREFIX + removeInvalidDataAttributeCharacters(attributes.getQName(i));\n                    if (this.htmlElementSanitizer.isAttributeAllowed(elementName, translatedName,\n                        attributes.getValue(i)))\n                    {\n                        ((AttributesImpl) allowedAttribute).addAttribute(null, null,\n                            translatedName, null, attributes.getValue(i));\n                    }\n                }\n            }\n        }\n\n        return allowedAttribute;\n    }\n\n    /**\n     * Strips out invalid characters from names used for data attributes.\n     *\n     * @param name the data attribute name to clean\n     * @return valid name, to be prefixed with data-\n     */\n    public static String removeInvalidDataAttributeCharacters(String name)\n    {\n        return DATA_REPLACEMENT_PATTERN.matcher(name).replaceAll(\"\");\n    }\n\n    private void handleSpaceWhenStartElement()\n    {\n        // Use case: <tag1>something <tag2>...\n        // Use case: <tag1>something <!--...\n        if (this.spaceCount > 0) {\n            if (!this.isInCData && !this.isInPreserveElement) {\n                // We print a single space as a normal space, except if we are at the beginning of a standalone element\n                // in that case we want a non-breaking space so it won't be stripped.\n                // Any supplementary space will be printed as non-breaking spaces so we keep them too.\n                if (this.isStandalone && !this.hasTextBeenPrinted) {\n                    printEntity(\"&nbsp;\");\n                } else {\n                    super.printXML(\" \");\n                }\n                for (int i = 0; i < this.spaceCount - 1; i++) {\n                    printEntity(\"&nbsp;\");\n                }\n            } else {\n                super.printXML(StringUtils.repeat(' ', this.spaceCount));\n            }\n            this.isStandalone = false;\n        }\n        this.spaceCount = 0;\n        this.elementEnded = false;\n        this.hasTextBeenPrinted = false;\n    }\n\n    private void handleSpaceWhenEndlement()\n    {\n        // Use case: <tag1>something </tag1>...\n        // All spaces are &nbsp; spaces since otherwise they'll be all stripped by browsers\n        if (!this.isInCData && !this.isInPreserveElement) {\n            for (int i = 0; i < this.spaceCount; i++) {\n                printEntity(\"&nbsp;\");\n            }\n        } else {\n            super.printXML(StringUtils.repeat(' ', this.spaceCount));\n        }\n        this.spaceCount = 0;\n        this.elementEnded = false;\n        this.hasTextBeenPrinted = false;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.rendering.renderer.printer;\n\nimport java.util.Map;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.mockito.InOrder;\nimport org.mockito.Mockito;\nimport org.xml.sax.helpers.AttributesImpl;\nimport org.xwiki.xml.html.HTMLElementSanitizer;\n\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.atLeast;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for {@link XHTMLWikiPrinter}.\n *\n * @version $Id$\n */\nclass XHTMLWikiPrinterTest\n{\n    @ParameterizedTest\n    @CsvSource({\n        \"Closing the {{/html}} macro., Closing the &#123;&#123;/html}} macro.\",\n        \"Starting a macro {, Starting a macro &#123;\",\n        \"Partial: {{/h, Partial: {&#123;/h\",\n        \"{{html}}, {{html}}\"\n    })\n    void testRawEscaping(String input, String expected)\n    {\n        WikiPrinter mockPrinter = mock(WikiPrinter.class);\n        XHTMLWikiPrinter xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter);\n        xhtmlWikiPrinter.printRaw(input);\n        verify(mockPrinter).print(expected);\n    }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"invalid, value, data-xwiki-translated-attribute-invalid, value\",\n        \"valid, test&, valid, test&amp;\",\n        \"in/valid, value, data-xwiki-translated-attribute-invalid, value\"\n    })\n    void testParameterCleaning(String parameterName, String parameterValue, String expectedName, String expectedValue)\n    {\n        HTMLElementSanitizer mockSanitizer = mock(HTMLElementSanitizer.class);\n        when(mockSanitizer.isElementAllowed(anyString())).thenReturn(true);\n        when(mockSanitizer.isAttributeAllowed(anyString(), anyString(), anyString())).then(invocation ->\n        {\n            String attributeName = invocation.getArgument(1, String.class);\n            return \"valid\".equals(attributeName) || attributeName.startsWith(\"data-\");\n        });\n\n        // Test all possibilities of invoking the printer (with different kinds of arguments).\n        WikiPrinter mockPrinter = mock(WikiPrinter.class);\n        XHTMLWikiPrinter xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n        Map<String, String> mapParameters = Map.of(parameterName, parameterValue);\n        xhtmlWikiPrinter.printXMLStartElement(\"div\", mapParameters);\n        verify(mockSanitizer, atLeast(1)).isElementAllowed(\"div\");\n        verify(mockSanitizer, atLeast(1)).isAttributeAllowed(\"div\", parameterName, parameterValue);\n        verify(mockSanitizer, atLeast(1)).isAttributeAllowed(\"div\", expectedName, parameterValue);\n        verifyPrinting(mockPrinter, expectedName, expectedValue, true);\n\n        mockPrinter = mock(WikiPrinter.class);\n        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n        xhtmlWikiPrinter.printXMLElement(\"div\", mapParameters);\n        verifyPrinting(mockPrinter, expectedName, expectedValue, false);\n\n        mockPrinter = mock(WikiPrinter.class);\n        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n        String[][] arrayParameters = { { parameterName, parameterValue } };\n        xhtmlWikiPrinter.printXMLStartElement(\"div\", arrayParameters);\n        verifyPrinting(mockPrinter, expectedName, expectedValue, true);\n\n        mockPrinter = mock(WikiPrinter.class);\n        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n        xhtmlWikiPrinter.printXMLElement(\"div\", arrayParameters);\n        verifyPrinting(mockPrinter, expectedName, expectedValue, false);\n\n        mockPrinter = mock(WikiPrinter.class);\n        xhtmlWikiPrinter = new XHTMLWikiPrinter(mockPrinter, mockSanitizer);\n        AttributesImpl attributes = new AttributesImpl();\n        attributes.addAttribute(null, null, parameterName, null, parameterValue);\n        xhtmlWikiPrinter.printXMLStartElement(\"div\", attributes);\n        verifyPrinting(mockPrinter, expectedName, expectedValue, true);\n    }\n\n    private void verifyPrinting(WikiPrinter mockPrinter, String attributeName,\n        String attributeValue, boolean isStart)\n    {\n        InOrder inOrder = Mockito.inOrder(mockPrinter);\n        inOrder.verify(mockPrinter).print(\"<\");\n        inOrder.verify(mockPrinter).print(\"div\");\n        inOrder.verify(mockPrinter).print(\" \");\n        inOrder.verify(mockPrinter).print(attributeName);\n        inOrder.verify(mockPrinter).print(\"=\");\n        inOrder.verify(mockPrinter).print(\"\\\"\");\n        inOrder.verify(mockPrinter).print(attributeValue);\n        inOrder.verify(mockPrinter).print(\"\\\"\");\n        if (isStart) {\n            inOrder.verify(mockPrinter).print(\">\");\n        } else {\n            inOrder.verify(mockPrinter).print(\"/>\");\n        }\n        verifyNoMoreInteractions(mockPrinter);\n\n    }\n}\n"], "filenames": ["xwiki-rendering-xml/src/main/java/org/xwiki/rendering/renderer/printer/XHTMLWikiPrinter.java", "xwiki-rendering-xml/src/test/java/org/xwiki/rendering/renderer/printer/XHTMLWikiPrinterTest.java"], "buggy_code_start_loc": [25, 21], "buggy_code_end_loc": [313, 48], "fixing_code_start_loc": [26, 22], "fixing_code_end_loc": [361, 130], "type": "CWE-79", "message": "XWiki Rendering is a generic Rendering system that converts textual input in a given syntax into another syntax. The cleaning of attributes during XHTML rendering, introduced in version 14.6-rc-1, allowed the injection of arbitrary HTML code and thus cross-site scripting via invalid attribute names. This can be exploited, e.g., via the link syntax in any content that supports XWiki syntax like comments in XWiki. When a user moves the mouse over a malicious link, the malicious JavaScript code is executed in the context of the user session. When this user is a privileged user who has programming rights, this allows server-side code execution with programming rights, impacting the confidentiality, integrity and availability of the XWiki instance. While this attribute was correctly recognized as not allowed, the attribute was still printed with a prefix `data-xwiki-translated-attribute-` without further cleaning or validation. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by removing characters not allowed in data attributes and then validating the cleaned attribute again. There are no known workarounds apart from upgrading to a version including the fix.", "other": {"cve": {"id": "CVE-2023-37908", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T18:17:28.333", "lastModified": "2023-10-31T18:35:02.337", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Rendering is a generic Rendering system that converts textual input in a given syntax into another syntax. The cleaning of attributes during XHTML rendering, introduced in version 14.6-rc-1, allowed the injection of arbitrary HTML code and thus cross-site scripting via invalid attribute names. This can be exploited, e.g., via the link syntax in any content that supports XWiki syntax like comments in XWiki. When a user moves the mouse over a malicious link, the malicious JavaScript code is executed in the context of the user session. When this user is a privileged user who has programming rights, this allows server-side code execution with programming rights, impacting the confidentiality, integrity and availability of the XWiki instance. While this attribute was correctly recognized as not allowed, the attribute was still printed with a prefix `data-xwiki-translated-attribute-` without further cleaning or validation. This problem has been patched in XWiki 14.10.4 and 15.0 RC1 by removing characters not allowed in data attributes and then validating the cleaned attribute again. There are no known workarounds apart from upgrading to a version including the fix."}, {"lang": "es", "value": "XWiki Rendering es un sistema de renderizado gen\u00e9rico que convierte la entrada de texto en una sintaxis determinada en otra sintaxis. La limpieza de atributos durante la representaci\u00f3n XHTML, introducida en la versi\u00f3n 14.6-rc-1, permiti\u00f3 la inyecci\u00f3n de c\u00f3digo HTML arbitrario y, por lo tanto, Cross-Site Scripting (XSS) a trav\u00e9s de nombres de atributos no v\u00e1lidos. Esto se puede explotar, por ejemplo, a trav\u00e9s de la sintaxis de enlace en cualquier contenido que admita la sintaxis XWiki, como comentarios en XWiki. Cuando un usuario mueve el mouse sobre un enlace malicioso, el c\u00f3digo JavaScript malicioso se ejecuta en el contexto de la sesi\u00f3n del usuario. Cuando este usuario es un usuario privilegiado que tiene derechos de programaci\u00f3n, esto permite la ejecuci\u00f3n de c\u00f3digo del lado del servidor con derechos de programaci\u00f3n, lo que afecta la confidencialidad, integridad y disponibilidad de la instancia de XWiki. Si bien este atributo se reconoci\u00f3 correctamente como no permitido, a\u00fan as\u00ed se imprimi\u00f3 con un prefijo `data-xwiki-translated-attribute-` sin m\u00e1s limpieza o validaci\u00f3n. Este problema se solucion\u00f3 en XWiki 14.10.4 y 15.0 RC1 eliminando caracteres no permitidos en los atributos de datos y luego validando el atributo limpio nuevamente. No se conocen workarounds aparte de actualizar a una versi\u00f3n que incluya la soluci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-83"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki-rendering:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.6", "versionEndExcluding": "14.10.4", "matchCriteriaId": "10F860AC-6C06-4D88-9A47-4654A5265D60"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-rendering/commit/f4d5acac451dccaf276e69f0b49b72221eef5d2f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-663w-2xp3-5739", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://github.com/xwiki/xwiki-rendering/security/advisories/GHSA-6gf5-c898-7rxp", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XRENDERING-697", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-rendering/commit/f4d5acac451dccaf276e69f0b49b72221eef5d2f"}}