{"buggy_code": ["<?php\n  \n\n/**\n * Handles rendering of forms.\n * Refactored out of core-forms.php since 1.5.0.\n *\n * @since 1.5.0\n *\n */\nclass AF_Core_Forms_Rendering {\n  \n  \n  function __construct() {\n\n    add_shortcode( 'advanced_form', array( $this, 'form_shortcode' ) );\n    \n    add_action( 'af/form/render', array( $this, 'render' ), 10, 2 );\n    \n  }\n\n\n  /**\n   * Registers the shortcode advanced_form which renders the form specified by the \"form\" attribute\n   *\n   * @since 1.0.0\n   *\n   */\n  function form_shortcode( $atts ) {\n    \n    if ( isset( $atts['form'] ) ) {\n      \n      $form_id_or_key = $atts['form'];\n      unset( $atts['form'] );\n      \n      ob_start();\n      \n      $this->render( $form_id_or_key, $atts );\n      \n      $output = ob_get_clean();\n      \n      return $output;\n      \n    }\n    \n  }\n  \n  \n  /**\n   * Renders the form specified by ID\n   *\n   * @since 1.0.0\n   *\n   */\n  function render( $form_id_or_key, $args ) {\n    $form = af_get_form( $form_id_or_key );\n    \n    if ( ! $form ) {\n      return;\n    }\n    \n    $this->enqueue( $form, $args );\n    \n    // Allow the form to be modified before rendering form\n    $form = apply_filters( 'af/form/before_render', $form, $args );\n    $form = apply_filters( 'af/form/before_render/id=' . $form['post_id'], $form, $args );\n    $form = apply_filters( 'af/form/before_render/key=' . $form['key'], $form, $args );\n    \n    $args = wp_parse_args($args, array(\n      'display_title'       => false,\n      'display_description'     => false,\n      'id'            => $form['key'],\n      'values'          => array(),\n      'submit_text'         => __( 'Submit', 'advanced-forms' ),\n      'redirect'          => acf_get_current_url(),\n      'target'          => acf_get_current_url(),\n      'echo'            => true,\n      'exclude_fields'      => array(),\n      'uploader'          => 'wp',\n      'filter_mode'       => false,\n      'label_placement' => 'top',\n      'instruction_placement' => 'label',\n      'honeypot' => true,\n    ));\n    \n    // Allow the arguments to be modified before rendering form\n    $args = apply_filters( 'af/form/args', $args, $form );\n    $args = apply_filters( 'af/form/args/id=' . $form['post_id'], $args, $form );\n    $args = apply_filters( 'af/form/args/key=' . $form['key'], $args, $form );\n\n\n    // Set ACF uploader type setting\n    acf_update_setting( 'uploader', $args['uploader'] );\n    \n    // Form element\n    $form_attributes = array(\n      'class'   => 'af-form acf-form',\n      'method'  => 'POST',\n      'action'  => $args['target'],\n      'id'    => $args['id'],\n      'data-key' => $form['key'],\n    );\n    \n    $form_attributes = apply_filters( 'af/form/attributes', $form_attributes, $form, $args );\n    $form_attributes = apply_filters( 'af/form/attributes/id=' . $form['post_id'], $form_attributes, $form, $args );\n    $form_attributes = apply_filters( 'af/form/attributes/key=' . $form['key'], $form_attributes, $form, $args );\n    \n    echo sprintf( '<form %s>', acf_esc_atts( $form_attributes ) );\n    \n    do_action( 'af/form/before_title', $form, $args );\n    do_action( 'af/form/before_title/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/before_title/key=' . $form['key'], $form, $args );\n\n    // Render submission error message if one exists\n    $this->render_submission_error( $form, $args );\n\n    // Render title and description if they should be visible\n    $this->render_title_and_description( $form, $args );\n    \n    \n    /**\n     * Check if form should be restricted and not displayed.\n     * Filter will return false if no restriction is applied otherwise it will return a string to display.\n     */\n    $restriction = false;\n    $restriction = apply_filters( 'af/form/restriction', $restriction, $form, $args );\n    $restriction = apply_filters( 'af/form/restriction/id=' . $form['post_id'], $restriction, $form, $args );\n    $restriction = apply_filters( 'af/form/restriction/key=' . $form['key'], $restriction, $form, $args );\n\n    // Display success message, restriction message, or fields\n    $instance_hash = af_form_instance_hash( $form['key'], $args );\n    if ( af_has_submission( $instance_hash ) && ! af_submission_failed( $form['key'] ) && ! $args['filter_mode'] ) {\n\n      $this->render_success_message( $form, $args );\n\n    } elseif ( $restriction ) {\n    \n      $this->render_restriction_message( $restriction );\n    \n    } else {\n\n      $this->render_fields( $form, $args );\n\n    }\n    \n    // End form\n    echo '</form>';\n  }\n\n  /**\n   * Enqueues all scripts and styles necessary for a form to work.\n   * \n   * @since 1.6.7\n   * \n   */\n  function enqueue( $form, $args ) {\n    /**\n     * Enqueue ACF scripts and styles\n     *\n     * Normally ACF initializes the global JS object in wp_head but we only want to include the scripts when displaying a form.\n     * To work around this we enqueue using the regular ACF function and then immediately include the acf-input.js script and all it's dependencies.\n     * If acf-input.js is not initialized before the fields then conditional logic doesn't work. The remaining scripts/styles will be included in wp_footer.\n     *\n     * From ACF 5.7 and onwards this is no longer necessary. Conditional logic is no longer reliant on inline scripts and a regular enqueue is sufficient.\n     *\n     * @since 1.1.1\n     *\n     */\n    acf_enqueue_scripts();\n\n\n    // ACF fails to include all translations when running \"acf_enqueue_scripts\", hence we need to do it manually.\n    $acf_l10n = acf_get_instance('ACF_Assets')->text;\n    wp_localize_script( 'acf-input', 'acfL10n', $acf_l10n );\n\n    wp_enqueue_script( 'af-forms-script', AF()->url . 'assets/dist/js/forms.js', array( 'jquery', 'acf-input' ), AF()->version, true );\n    \n    // Check if ACF version is < 5.7\n    if ( acf_version_compare( acf()->version, '<', '5.7' ) ) {\n      global $wp_scripts;\n      \n      $wp_scripts->print_scripts( array( 'acf-input', 'acf-pro-input' ) );\n    }\n\n    do_action( 'af/form/enqueue', $form, $args );\n    do_action( 'af/form/enqueue/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/enqueue/key=' . $form['key'], $form, $args );\n  }\n\n\n  /**\n   * Renders all submission errors if any exist.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_submission_error( $form, $args ) {\n    if ( af_submission_failed( $form['key'] ) ) {\n      $errors = AF()->submission['errors'];\n\n      foreach ( $errors as $error ) {\n        echo '<div class=\"acf-notice -error -acf-error-message-dismiss\">';\n        echo sprintf( '<p>%s</p>', $error );\n        echo '</div>';\n      }\n    }\n  }\n\n\n  /**\n   * Renders title and description of form if they should be shown.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_title_and_description( $form, $args ) {\n    // Display title\n    if ( $args['display_title'] ) {\n      echo sprintf( '<h1 class=\"af-title\">%s</h1>', $form['title'] );\n    }\n    \n    // Display description\n    if ( $args['display_description'] ) {\n      echo sprintf( '<div class=\"af-description\">%s</div>', $form['display']['description'] );\n    }\n  }\n\n\n  /**\n   * Renders the restriction message for a form.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_restriction_message( $message ) {\n    echo '<div class=\"af-restricted-message\">';\n      echo $message;\n    echo '</div>';\n  }\n\n\n  /**\n   * Renders the success message for a form.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_success_message( $form, $args ) {\n    $success_message = $form['display']['success_message'];\n    $success_message = apply_filters( 'af/form/success_message', $success_message, $form, $args );\n    $success_message = apply_filters( 'af/form/success_message/id=' . $form['post_id'], $success_message, $form, $args );\n    $success_message = apply_filters( 'af/form/success_message/key=' . $form['key'], $success_message, $form, $args );\n\n    $success_message = af_resolve_merge_tags( $success_message );\n    \n    echo '<div class=\"af-success\" aria-live=\"assertive\" role=\"alert\">';\n    \n      echo $success_message;\n    \n    echo '</div>';\n  }\n\n\n  /**\n   * Renders a field wrapper with all fields and a submit button.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_fields( $form, $args ) {\n    // Increase the form view counter\n    if ( $form['post_id'] && ! $args['filter_mode'] ) {\n      $views = get_post_meta( $form['post_id'], 'form_num_of_views', true );\n      $views = $views ? $views + 1 : 1;\n      update_post_meta( $form['post_id'], 'form_num_of_views', $views );\n    }\n    \n    \n    // Get field groups for the form and display their fields\n    $field_groups = af_get_form_field_groups( $form['key'] );\n    \n    \n    echo sprintf( '<div class=\"af-fields acf-fields acf-form-fields -%s\">', $args['label_placement'] );\n    \n    \n    do_action( 'af/form/before_fields', $form, $args );\n    do_action( 'af/form/before_fields/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/before_fields/key=' . $form['key'], $form, $args );\n    \n\n    // Form data required by ACF for validation to work.\n    acf_form_data(array( \n      'screen'  => 'acf_form',\n      'post_id' => false,\n      'form'    => false,\n    ));\n\n    // Hidden fields to identify form\n    echo '<div class=\"acf-hidden\">';\n\n      $nonce = wp_create_nonce( 'acf_nonce' );\n      echo sprintf( '<input type=\"hidden\" name=\"_acfnonce\" value=\"%s\">', $nonce );\n      echo sprintf( '<input type=\"hidden\" name=\"nonce\" value=\"%s\">', $nonce );\n    \n      echo sprintf( '<input type=\"hidden\" name=\"af_form\" value=\"%s\">', $form['key'] );\n      echo sprintf( '<input type=\"hidden\" name=\"af_form_args\" value=\"%s\">', base64_encode( json_encode( $args ) ) );\n      echo sprintf( '<input type=\"hidden\" name=\"_acf_form\" value=\"%s\">', base64_encode( json_encode( $args ) ) );\n\n      // Add honeypot field that is not visible to users.\n      // Bots should hopefully fill this in allowing them to be detected.\n      if ( $args['honeypot'] ) {\n        echo '<input type=\"text\" name=\"email_for_non_humans\" tabindex=\"-1\" autocomplete=\"off\" />';\n      }\n      \n      do_action( 'af/form/hidden_fields', $form, $args );\n      do_action( 'af/form/hidden_fields/id=' . $form['post_id'], $form, $args );\n      do_action( 'af/form/hidden_fields/key=' . $form['key'], $form, $args );\n      \n    echo '</div>';\n    \n    \n    foreach ( $field_groups as $field_group ) {\n      $this->render_field_group( $field_group, $form, $args );\n    }\n    \n    do_action( 'af/form/after_fields', $form, $args );\n    do_action( 'af/form/after_fields/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/after_fields/key=' . $form['key'], $form, $args );\n\n    $this->render_submit_button( $form, $args );\n    \n    // End fields wrapper\n    echo '</div>';\n  }\n\n\n  /**\n   * Renders a full field group with all fields that are not excluded.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_field_group( $field_group, $form, $args ) {\n    // Get all fields for field group\n    $fields = acf_get_fields( $field_group );\n    \n    foreach ( $fields as $field ) {\n      \n      // Skip field if it is in the exluded fields argument\n      if ( isset( $args['exclude_fields'] ) && is_array( $args['exclude_fields'] ) ) {\n        \n        if ( in_array( $field['key'], $args['exclude_fields'] ) || in_array( $field['name'], $args['exclude_fields'] ) ) {\n          continue;\n        }\n        \n      }\n      \n      $this->render_field( $field, $form, $args );\n      \n    }\n  }\n\n\n  /**\n   * Renders a single field as part of a form.\n   * \n   * @since 1.5.0\n   *\n   */\n  function render_field( $field, $form, $args ) {\n    do_action( 'af/field/before_field', $field, $form, $args );\n    do_action( 'af/field/before_field/name=' . $field['name'], $field, $form, $args );\n    do_action( 'af/field/before_field/key=' . $field['key'], $field, $form, $args );\n\n    // Ignore hide from admin value\n    $field['hide_admin'] = false;\n\n    // Include default value\n    if ( empty( $field['value'] ) && isset( $field['default_value'] ) ) {\n      $field['value'] = $field['default_value'];\n    }\n    \n    \n    // Include pre-fill values (either through args or filter)\n    if ( isset( $args['values'][ $field['name'] ] ) ) {\n      $field['value'] = $args['values'][ $field['name'] ];\n    }\n    \n    if ( isset( $args['values'][ $field['key'] ] ) ) {\n      $field['value'] = $args['values'][ $field['key'] ];\n    }\n    \n    $field['value'] = apply_filters( 'af/field/prefill_value', $field['value'], $field, $form, $args );\n    $field['value'] = apply_filters( 'af/field/prefill_value/name=' . $field['name'], $field['value'], $field, $form, $args );\n    $field['value'] = apply_filters( 'af/field/prefill_value/key=' . $field['key'], $field['value'], $field, $form, $args );\n    \n    \n    // Include any previously submitted value\n    if ( isset( $_POST['acf'][ $field['key'] ] ) ) {\n      $field['value'] = $_POST['acf'][ $field['key'] ];\n    }\n\n    if ( af_has_submission( $form['key'] ) && ( $args['filter_mode'] || af_submission_failed( $form['key'] ) ) ) {\n      $field['value'] = af_get_field( $field['name'] );\n    }\n    \n    $field = apply_filters( 'af/field/before_render', $field, $form, $args );\n    $field = apply_filters( 'af/field/before_render/id=' . $form['post_id'], $field, $form, $args );\n    $field = apply_filters( 'af/field/before_render/key=' . $form['key'], $field, $form, $args );\n    \n    // Attributes to be used on the wrapper element\n    $attributes = array();\n    \n    $attributes['id'] = $field['wrapper']['id'];\n    \n    $attributes['class'] = $field['wrapper']['class'];\n    \n    $attributes['class'] .= sprintf( ' af-field af-field-type-%s af-field-%s acf-field acf-field-%s acf-field-%s', $field['type'], $field['name'], $field['type'], $field['key'] );\n    \n    if ( $field['required'] ) {\n      $attributes['class'] .= ' af-field-required';\n    }\n\n    \n    // This is something ACF needs\n    $attributes['class'] = str_replace( '_', '-', $attributes['class'] );\n    $attributes['class'] = str_replace( 'field-field-', 'field-', $attributes['class'] );\n    \n    \n    $width = $field['wrapper']['width'];\n    \n    if ( $width ) {\n      $attributes['data-width'] = $width;\n      $attributes['style'] = 'width: ' . $width . '%;';\n    }\n    \n    $attributes['data-name'] = $field['name'];\n    $attributes['data-key'] = $field['key'];\n    $attributes['data-type'] = $field['type'];\n\n    /**\n     * ACF 5.7 totally changes how conditional logic works.\n     * Instead of running a script after each field we now pass the conditional rules JSON encoded to the data-conditions attribute.\n     *\n     * @since 1.4.0\n     *\n     */\n    if( ! empty( $field['conditional_logic'] ) ) {\n      $field['conditions'] = $field['conditional_logic'];\n    }\n    \n    if( ! empty( $field['conditions'] ) ) {\n      $attributes['data-conditions'] = $field['conditions'];\n    }\n    \n    \n    $attributes = apply_filters( 'af/form/field_attributes', $attributes, $field, $form, $args );\n    $attributes = apply_filters( 'af/form/field_attributes/id=' . $form['post_id'], $attributes, $field, $form, $args );\n    $attributes = apply_filters( 'af/form/field_attributes/key=' . $form['key'], $attributes, $field, $form, $args );\n    \n    // Field instructions\n    $instruction_placement = $args['instruction_placement'];\n    $instruction_placement = apply_filters( 'af/field/instruction_placement', $instruction_placement, $field, $form, $args );\n    $instruction_placement = apply_filters( 'af/field/instruction_placement/name=' . $field['name'], $instruction_placement, $field, $form, $args );\n    $instruction_placement = apply_filters( 'af/field/instruction_placement/key=' . $field['key'], $instruction_placement, $field, $form, $args );\n    \n    if ( ! empty( $field['instructions'] ) ) {\n      $instructions = sprintf( '<p class=\"af-field-instructions -placement-%s\">%s</p>', $instruction_placement, $field['instructions'] );\n    } else {\n      $instructions = '';\n    }\n    \n    // Field wrapper\n    echo sprintf( '<div %s>', acf_esc_atts( $attributes ) );\n\n    echo '<div class=\"af-label acf-label\">';\n    \n      $label = $field['label'];\n      \n      $label .= $field['required'] ? ' <span class=\"acf-required\">*</span>' : '';\n      \n      echo sprintf( '<label for=\"acf-%s\">%s</label>', $field['key'], $label );\n\n      if ( 'label' == $instruction_placement ) {\n        echo $instructions;\n      }\n      \n    echo '</div>';\n    \n    echo '<div class=\"af-input acf-input\">';\n\n      // Render field with default ACF\n      acf_render_field( $field );\n\n    echo '</div>';\n\n    if ( 'field' == $instruction_placement ) {\n      echo $instructions;\n    }\n    \n    /*\n     * Conditional logic Javascript for field.\n     * This is not needed after ACF 5.7 and won't be included.\n     */\n    if ( acf_version_compare( acf()->version, '<', '5.7' ) ) {\n      if ( ! empty( $field['conditional_logic'] ) ) {\n        ?>\n        <script type=\"text/javascript\">\n          if(typeof acf !== 'undefined'){ acf.conditional_logic.add( '<?php echo $field['key']; ?>', <?php echo json_encode($field['conditional_logic']); ?>); }\n        </script>\n        <?php\n      }\n    }\n    \n    // End field wrapper\n    echo '</div>';\n\n    do_action( 'af/field/after_field', $field, $form, $args );\n    do_action( 'af/field/after_field/name=' . $field['name'], $field, $form, $args );\n    do_action( 'af/field/after_field/key=' . $field['key'], $field, $form, $args );\n  }\n\n\n  function render_submit_button( $form, $args ) {\n    // Submit button and loading indicator\n    $button_attributes = array();\n\n    $button_attributes['class'] = 'acf-button af-submit-button';\n\n    $button_attributes = apply_filters( 'af/form/button_attributes', $button_attributes, $form, $args );\n    $button_attributes = apply_filters( 'af/form/button_attributes/id=' . $form['post_id'], $button_attributes, $form, $args );\n    $button_attributes = apply_filters( 'af/form/button_attributes/key=' . $form['key'], $button_attributes, $form, $args );\n\n    echo '<div class=\"af-submit acf-form-submit\">';\n      echo sprintf( '<button type=\"submit\" %s>%s</button>', acf_esc_atts( $button_attributes ), $args['submit_text'] );\n      echo '<span class=\"acf-spinner af-spinner\"></span>';\n    echo '</div>';\n  }\n  \n  \n}\n\nreturn new AF_Core_Forms_Rendering();", "<?php\n  \n  \n/**\n * Handles validation, and saving of forms\n * Refactored out of core-forms.php since 1.5.0.\n *\n * @since 1.0.0\n *\n */\nclass AF_Core_Forms_Submissions {\n  const DEFAULT_COOKIE_NAME = 'af_submission';\n\n  const OPTION_EXPIRY_MINUTES = 5;\n  const OPTION_DATA_PREFIX = 'af_submission_data_';\n  const OPTION_EXPIRY_PREFIX = 'af_submission_expiry_';\n  \n  function __construct() {\n    add_action( 'init', array( $this, 'pre_form' ), 10, 0 );\n    add_action( 'acf/validate_save_post', array( $this, 'validate' ), 10, 0 );\n    add_filter( 'acf/upload_prefilter', array( $this, 'intercept_upload_errors' ), 1000, 3 );\n  }\n  \n  \n  /**\n   * Handles submissions and enqueue of neccessary scripts\n   * Relies on default ACF validations\n   *\n   * @since 1.0.0\n   *\n   */\n  function pre_form() {\n    // Make sure this is not an AJAX validation request\n    if ( isset ( $_POST['action'] ) ) {\n      return;\n    }\n\n    // Make sure honeypot field is empty if one exists\n    if ( isset( $_POST['email_for_non_humans'] ) && ! empty( $_POST['email_for_non_humans'] ) ) {\n      wp_die( 'Non-human user detected' );\n      exit;\n    }\n\n    // Try loading submission data\n    if ( ! $this->load_submission_data() ) {\n      return;\n    }\n      \n    // Validate the posted data, this validation has already been performed once over AJAX\n    if ( acf_validate_save_post( true ) ) {\n      $form = AF()->submission['form'];\n      $args = AF()->submission['args'];\n      $fields = AF()->submission['fields'];\n      \n      // Increase the form submissions counter\n      if ( $form['post_id'] ) {\n        $submissions = get_post_meta( $form['post_id'], 'form_num_of_submissions', true );\n        $submissions = $submissions ? $submissions + 1 : 1;\n        update_post_meta( $form['post_id'], 'form_num_of_submissions', $submissions );\n      }\n\n      do_action( 'af/form/before_submission', $form, $fields, $args );\n      do_action( 'af/form/before_submission/id=' . $form['post_id'], $form, $fields, $args );\n      do_action( 'af/form/before_submission/key=' . $form['key'], $form, $fields, $args );\n      \n      if ( ! af_submission_failed() ) {\n        do_action( 'af/form/submission', $form, $fields, $args );\n        do_action( 'af/form/submission/id=' . $form['post_id'], $form, $fields, $args );\n        do_action( 'af/form/submission/key=' . $form['key'], $form, $fields, $args );\n      }\n\n      // Redirect to different URL if redirect argument has been passed\n      if ( $args['redirect'] && '' != $args['redirect'] ) {\n        $this->clear_expired_submissions();\n        $this->save_submission( AF()->submission );\n\n        wp_redirect( $args['redirect'] );\n        exit;\n      }\n    }\n  }\n\n\n  /**\n   * Handles validation of a form.\n   * Adds custom validation actions specific to forms.\n   *\n   * @since 1.5.0\n   *\n   */\n  function validate() {\n    // Try loading submission data\n    if ( ! $this->load_submission_data() ) {\n      return;\n    }\n\n    $form = AF()->submission['form'];\n    $args = AF()->submission['args'];\n\n    do_action( 'af/form/validate', $form, $args );\n    do_action( 'af/form/validate/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/validate/key=' . $form['key'], $form, $args );\n  }\n  \n\n  /**\n   * Populate AF()->submission with submission data\n   * Returns boolean indicating whether a submission was loaded\n   *\n   * @since 1.5.0\n   *\n   */\n  function load_submission_data() {\n    // Check if there is a cookie-passed submission\n    if ( $submission = $this->get_submission() ) {\n      AF()->submission = $submission;\n\n      // Return false to stop the submission from being processed again\n      return false;\n    }\n\n    // Make sure a form was posted\n    if ( ! ( isset( $_POST['af_form'] ) ) ) {\n      return false;\n    }\n\n    // Bail early if already loaded\n    if ( AF()->submission ) {\n      return true;\n    }\n\n    /**\n     * Upload all files in $_FILES using ACFs helper function. Required for basic uploads to work painlessly.\n     * TODO: Move to af_save_field() to avoid saving all files?\n     *\n     * @since 1.3.1\n     *\n     */\n    if ( isset( $_FILES['acf'] ) ) {\n      $this->clear_upload_errors();\n      acf_upload_files();\n      $this->handle_upload_errors();\n    }\n\n    // Generate submission from data\n    $submission = $this->create_submission();\n    if ( ! $submission ) {\n      return false;\n    }\n\n    // Save submission data to the global AF object\n    AF()->submission = $submission;\n\n    return true;\n  }\n\n\n  /**\n   * Create a submission object from the request data.\n   * Returns a submission array or false on failure.\n   *\n   * @since 1.6.0\n   *\n   */\n  function create_submission() {\n    // Load form by key\n    $form_key_or_id = $_POST['af_form'];\n      \n    $form = af_get_form( $form_key_or_id );\n\n    if ( ! $form ) {\n      return false;\n    }\n\n    // Retrieve the args used to display the form\n    $args = json_decode( base64_decode( $_POST['af_form_args'] ), true );\n\n    // Retrieve all form fields and their values\n    $fields = array();\n    \n    if ( isset( $_POST['acf'] ) ) {\n      foreach ( $_POST['acf'] as $k => $value ) {\n        $field = acf_get_field( $k );\n        \n        $field['_input'] = $value;\n        $field['value'] = acf_format_value( $value, 0, $field );\n        \n        $fields[] = $field;\n      }\n    }\n\n    return array(\n      'form' => $form,\n      'args' => $args,\n      'fields' => $fields,\n      'errors' => array(),\n    );\n  }\n\n  /**\n   * Fetch a submission from options if the submission cookie is set.\n   * Will return false if the cookie is not set or the submission does not exist in the database.\n   * \n   * @since 1.6.6\n   *\n   */\n  private function get_submission() {\n    if ( ! isset( $_COOKIE[ $this->get_cookie_name() ] ) ) {\n      return false;\n    }\n\n    $key = $_COOKIE[ $this->get_cookie_name() ];\n    $submission = get_option( self::OPTION_DATA_PREFIX . $key, false );\n\n    $this->delete_submission( $key );\n    setcookie( $this->get_cookie_name(), '', time() - HOUR_IN_SECONDS, '/' );\n\n    return $submission;\n  }\n  \n  /**\n   * Save a submission to options and set a cookie with a reference to it.\n   * Submissions are identified by a randomly generated key stored in a cookie.\n   *\n   * @since 1.6.6\n   *\n   */\n  private function save_submission( $submission ) {\n    $key = wp_generate_password( 12, false, false );\n\n    $expiration_time = time() + self::OPTION_EXPIRY_MINUTES * MINUTE_IN_SECONDS;\n\n    add_option( self::OPTION_DATA_PREFIX . $key, $submission );\n    add_option( self::OPTION_EXPIRY_PREFIX . $key, $expiration_time );\n\n    setcookie( $this->get_cookie_name(), $key, $expiration_time, '/' );\n  }\n\n  /**\n   * Delete a submission from options based on key\n   *\n   * @since 1.6.6\n   *\n   */\n  private function delete_submission( $key ) {\n    delete_option( self::OPTION_DATA_PREFIX . $key );\n    delete_option( self::OPTION_EXPIRY_PREFIX . $key );\n  }\n\n  private function get_cookie_name() {\n    return apply_filters( 'af/settings/cookie_name', self::DEFAULT_COOKIE_NAME );\n  }\n\n  /**\n   * Remove any expired submission from options which have not been cleared automatically.\n   * If a request fails a created submission could potentially not be removed from the database.\n   *\n   * @since 1.6.6\n   *\n   */\n  private function clear_expired_submissions() {\n    global $wpdb;\n\n    $options_table = $wpdb->prefix . 'options';\n    $name_pattern = self::OPTION_EXPIRY_PREFIX . '%';\n    $current_time = time();\n\n    // Find all expired submissions in the options table.\n    // This query is very efficient because of the index on the name column.\n    $expired_submissions = $wpdb->get_col(\"\n      SELECT option_name\n      FROM $options_table\n      WHERE option_name LIKE '$name_pattern'\n        AND option_value < $current_time\n    \");\n\n    foreach ( $expired_submissions as $option_name ) {\n      // Find submission key by removing prefix from option name.\n      $submission_key = substr( $option_name, strlen( self::OPTION_EXPIRY_PREFIX ) );\n      $this->delete_submission( $submission_key );\n    }\n  }\n\n  /**\n   * ACF doesn't provide a simple way of catching upload errors when using the basic uploader.\n   * This function is hooked into the \"acf/upload_prefilter\" with a high priority.\n   * It will intercept all upload errors and save them together with field data.\n   *\n   * @since 1.7.0\n   *\n   */\n  function intercept_upload_errors( $errors, $file, $field ) {\n    if ( ! empty( $errors ) ) {\n      $this->upload_errors[ $field['key'] ] = array(\n        'field' => $field,\n        'messages' => $errors,\n      );\n    }\n\n    return $errors;\n  }\n\n  /**\n   * Removes all intercepted upload errors.\n   * Should be run before handling uploads using \"acf_upload_files()\".\n   *\n   * @since 1.7.0\n   *\n   */\n  private function clear_upload_errors() {\n    $this->upload_errors = array();\n  }\n\n  /**\n   * Checks if any upload errors have been caught and stops the submission.\n   * This is a very rudimentary way of handling upload errors but it's necessary as ACF can't handle errors when using the basic uploader.\n   * The errors checks should in the future be implemented client-side for a good user experience and this is mostly meant to be a fallback.\n   * \n   *\n   *\u00a0@since 1.7.0\n   *\n   */\n  private function handle_upload_errors() {\n    if ( empty( $this->upload_errors ) ) {\n      return;\n    }\n\n    $message = sprintf( '<h2>%s</h2>', __('Validation failed', 'acf') );\n    $message .= '<ul>';\n    foreach( $this->upload_errors as $error ) {\n      $field = $error['field'];\n      foreach ( $error['messages'] as $error_message ) {\n        $message .= '<li>' . sprintf( '%s: %s', $field['label'], $error_message ) . '</li>';\n      }\n    }\n    $message .= '</ul>';\n\n    wp_die( $message, __('Validation failed', 'acf') );\n  }\n}\n\nreturn new AF_Core_Forms_Submissions();"], "fixing_code": ["<?php\n  \n\n/**\n * Handles rendering of forms.\n * Refactored out of core-forms.php since 1.5.0.\n *\n * @since 1.5.0\n *\n */\nclass AF_Core_Forms_Rendering {\n  \n  \n  function __construct() {\n\n    add_shortcode( 'advanced_form', array( $this, 'form_shortcode' ) );\n    \n    add_action( 'af/form/render', array( $this, 'render' ), 10, 2 );\n    \n  }\n\n\n  /**\n   * Registers the shortcode advanced_form which renders the form specified by the \"form\" attribute\n   *\n   * @since 1.0.0\n   *\n   */\n  function form_shortcode( $atts ) {\n    \n    if ( isset( $atts['form'] ) ) {\n      \n      $form_id_or_key = $atts['form'];\n      unset( $atts['form'] );\n      \n      ob_start();\n      \n      $this->render( $form_id_or_key, $atts );\n      \n      $output = ob_get_clean();\n      \n      return $output;\n      \n    }\n    \n  }\n  \n  \n  /**\n   * Renders the form specified by ID\n   *\n   * @since 1.0.0\n   *\n   */\n  function render( $form_id_or_key, $args ) {\n    $form = af_get_form( $form_id_or_key );\n    \n    if ( ! $form ) {\n      return;\n    }\n    \n    $this->enqueue( $form, $args );\n    \n    // Allow the form to be modified before rendering form\n    $form = apply_filters( 'af/form/before_render', $form, $args );\n    $form = apply_filters( 'af/form/before_render/id=' . $form['post_id'], $form, $args );\n    $form = apply_filters( 'af/form/before_render/key=' . $form['key'], $form, $args );\n    \n    $args = wp_parse_args($args, array(\n      'display_title'       => false,\n      'display_description'     => false,\n      'id'            => $form['key'],\n      'values'          => array(),\n      'submit_text'         => __( 'Submit', 'advanced-forms' ),\n      'redirect'          => acf_get_current_url(),\n      'target'          => acf_get_current_url(),\n      'echo'            => true,\n      'exclude_fields'      => array(),\n      'uploader'          => 'wp',\n      'filter_mode'       => false,\n      'label_placement' => 'top',\n      'instruction_placement' => 'label',\n      'honeypot' => true,\n    ));\n    \n    // Allow the arguments to be modified before rendering form\n    $args = apply_filters( 'af/form/args', $args, $form );\n    $args = apply_filters( 'af/form/args/id=' . $form['post_id'], $args, $form );\n    $args = apply_filters( 'af/form/args/key=' . $form['key'], $args, $form );\n\n\n    // Set ACF uploader type setting\n    acf_update_setting( 'uploader', $args['uploader'] );\n    \n    // Form element\n    $form_attributes = array(\n      'class'   => 'af-form acf-form',\n      'method'  => 'POST',\n      'action'  => $args['target'],\n      'id'    => $args['id'],\n      'data-key' => $form['key'],\n    );\n    \n    $form_attributes = apply_filters( 'af/form/attributes', $form_attributes, $form, $args );\n    $form_attributes = apply_filters( 'af/form/attributes/id=' . $form['post_id'], $form_attributes, $form, $args );\n    $form_attributes = apply_filters( 'af/form/attributes/key=' . $form['key'], $form_attributes, $form, $args );\n    \n    echo sprintf( '<form %s>', acf_esc_atts( $form_attributes ) );\n    \n    do_action( 'af/form/before_title', $form, $args );\n    do_action( 'af/form/before_title/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/before_title/key=' . $form['key'], $form, $args );\n\n    // Render submission error message if one exists\n    $this->render_submission_error( $form, $args );\n\n    // Render title and description if they should be visible\n    $this->render_title_and_description( $form, $args );\n    \n    \n    /**\n     * Check if form should be restricted and not displayed.\n     * Filter will return false if no restriction is applied otherwise it will return a string to display.\n     */\n    $restriction = false;\n    $restriction = apply_filters( 'af/form/restriction', $restriction, $form, $args );\n    $restriction = apply_filters( 'af/form/restriction/id=' . $form['post_id'], $restriction, $form, $args );\n    $restriction = apply_filters( 'af/form/restriction/key=' . $form['key'], $restriction, $form, $args );\n\n    // Display success message, restriction message, or fields\n    $instance_hash = af_form_instance_hash( $form['key'], $args );\n    if ( af_has_submission( $instance_hash ) && ! af_submission_failed( $form['key'] ) && ! $args['filter_mode'] ) {\n\n      $this->render_success_message( $form, $args );\n\n    } elseif ( $restriction ) {\n    \n      $this->render_restriction_message( $restriction );\n    \n    } else {\n\n      $this->render_fields( $form, $args );\n\n    }\n    \n    // End form\n    echo '</form>';\n  }\n\n  /**\n   * Enqueues all scripts and styles necessary for a form to work.\n   * \n   * @since 1.6.7\n   * \n   */\n  function enqueue( $form, $args ) {\n    /**\n     * Enqueue ACF scripts and styles\n     *\n     * Normally ACF initializes the global JS object in wp_head but we only want to include the scripts when displaying a form.\n     * To work around this we enqueue using the regular ACF function and then immediately include the acf-input.js script and all it's dependencies.\n     * If acf-input.js is not initialized before the fields then conditional logic doesn't work. The remaining scripts/styles will be included in wp_footer.\n     *\n     * From ACF 5.7 and onwards this is no longer necessary. Conditional logic is no longer reliant on inline scripts and a regular enqueue is sufficient.\n     *\n     * @since 1.1.1\n     *\n     */\n    acf_enqueue_scripts();\n\n\n    // ACF fails to include all translations when running \"acf_enqueue_scripts\", hence we need to do it manually.\n    $acf_l10n = acf_get_instance('ACF_Assets')->text;\n    wp_localize_script( 'acf-input', 'acfL10n', $acf_l10n );\n\n    wp_enqueue_script( 'af-forms-script', AF()->url . 'assets/dist/js/forms.js', array( 'jquery', 'acf-input' ), AF()->version, true );\n    \n    // Check if ACF version is < 5.7\n    if ( acf_version_compare( acf()->version, '<', '5.7' ) ) {\n      global $wp_scripts;\n      \n      $wp_scripts->print_scripts( array( 'acf-input', 'acf-pro-input' ) );\n    }\n\n    do_action( 'af/form/enqueue', $form, $args );\n    do_action( 'af/form/enqueue/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/enqueue/key=' . $form['key'], $form, $args );\n  }\n\n\n  /**\n   * Renders all submission errors if any exist.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_submission_error( $form, $args ) {\n    if ( af_submission_failed( $form['key'] ) ) {\n      $errors = AF()->submission['errors'];\n\n      foreach ( $errors as $error ) {\n        echo '<div class=\"acf-notice -error -acf-error-message-dismiss\">';\n        echo sprintf( '<p>%s</p>', $error );\n        echo '</div>';\n      }\n    }\n  }\n\n\n  /**\n   * Renders title and description of form if they should be shown.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_title_and_description( $form, $args ) {\n    // Display title\n    if ( $args['display_title'] ) {\n      echo sprintf( '<h1 class=\"af-title\">%s</h1>', $form['title'] );\n    }\n    \n    // Display description\n    if ( $args['display_description'] ) {\n      echo sprintf( '<div class=\"af-description\">%s</div>', $form['display']['description'] );\n    }\n  }\n\n\n  /**\n   * Renders the restriction message for a form.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_restriction_message( $message ) {\n    echo '<div class=\"af-restricted-message\">';\n      echo $message;\n    echo '</div>';\n  }\n\n\n  /**\n   * Renders the success message for a form.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_success_message( $form, $args ) {\n    $success_message = $form['display']['success_message'];\n    $success_message = apply_filters( 'af/form/success_message', $success_message, $form, $args );\n    $success_message = apply_filters( 'af/form/success_message/id=' . $form['post_id'], $success_message, $form, $args );\n    $success_message = apply_filters( 'af/form/success_message/key=' . $form['key'], $success_message, $form, $args );\n\n    $success_message = af_resolve_merge_tags( $success_message );\n    \n    echo '<div class=\"af-success\" aria-live=\"assertive\" role=\"alert\">';\n    \n      echo $success_message;\n    \n    echo '</div>';\n  }\n\n\n  /**\n   * Renders a field wrapper with all fields and a submit button.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_fields( $form, $args ) {\n    // Increase the form view counter\n    if ( $form['post_id'] && ! $args['filter_mode'] ) {\n      $views = get_post_meta( $form['post_id'], 'form_num_of_views', true );\n      $views = $views ? $views + 1 : 1;\n      update_post_meta( $form['post_id'], 'form_num_of_views', $views );\n    }\n    \n    \n    // Get field groups for the form and display their fields\n    $field_groups = af_get_form_field_groups( $form['key'] );\n    \n    \n    echo sprintf( '<div class=\"af-fields acf-fields acf-form-fields -%s\">', $args['label_placement'] );\n    \n    \n    do_action( 'af/form/before_fields', $form, $args );\n    do_action( 'af/form/before_fields/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/before_fields/key=' . $form['key'], $form, $args );\n    \n\n    // Form data required by ACF for validation to work.\n    acf_form_data(array( \n      'screen'  => 'acf_form',\n      'post_id' => false,\n      'form'    => false,\n    ));\n\n    // Hidden fields to identify form\n    echo '<div class=\"acf-hidden\">';\n\n      $acf_nonce = wp_create_nonce( 'acf_nonce' );\n      echo sprintf( '<input type=\"hidden\" name=\"_acfnonce\" value=\"%s\">', $acf_nonce );\n      echo sprintf( '<input type=\"hidden\" name=\"nonce\" value=\"%s\">', $acf_nonce );\n    \n      echo sprintf( '<input type=\"hidden\" name=\"af_form\" value=\"%s\">', $form['key'] );\n\n      $encoded_args = base64_encode( json_encode( $args ) );\n      echo sprintf( '<input type=\"hidden\" name=\"af_form_args\" value=\"%s\">', $encoded_args );\n      echo sprintf( '<input type=\"hidden\" name=\"_acf_form\" value=\"%s\">', $encoded_args );\n\n      // Add nonce to ensure arguments can't be altered.\n      $hashed_args = hash( 'sha256', $encoded_args );\n      $nonce = wp_create_nonce( sprintf( 'af_submission_%s_%s', $form['key'], $hashed_args ) );\n      echo sprintf( '<input type=\"hidden\" name=\"af_form_nonce\" value=\"%s\">', $nonce );\n\n      // Add honeypot field that is not visible to users.\n      // Bots should hopefully fill this in allowing them to be detected.\n      if ( $args['honeypot'] ) {\n        echo '<input type=\"text\" name=\"email_for_non_humans\" tabindex=\"-1\" autocomplete=\"off\" />';\n      }\n      \n      do_action( 'af/form/hidden_fields', $form, $args );\n      do_action( 'af/form/hidden_fields/id=' . $form['post_id'], $form, $args );\n      do_action( 'af/form/hidden_fields/key=' . $form['key'], $form, $args );\n      \n    echo '</div>';\n    \n    \n    foreach ( $field_groups as $field_group ) {\n      $this->render_field_group( $field_group, $form, $args );\n    }\n    \n    do_action( 'af/form/after_fields', $form, $args );\n    do_action( 'af/form/after_fields/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/after_fields/key=' . $form['key'], $form, $args );\n\n    $this->render_submit_button( $form, $args );\n    \n    // End fields wrapper\n    echo '</div>';\n  }\n\n\n  /**\n   * Renders a full field group with all fields that are not excluded.\n   *\n   * @since 1.6.0\n   *\n   */\n  function render_field_group( $field_group, $form, $args ) {\n    // Get all fields for field group\n    $fields = acf_get_fields( $field_group );\n    \n    foreach ( $fields as $field ) {\n      \n      // Skip field if it is in the exluded fields argument\n      if ( isset( $args['exclude_fields'] ) && is_array( $args['exclude_fields'] ) ) {\n        \n        if ( in_array( $field['key'], $args['exclude_fields'] ) || in_array( $field['name'], $args['exclude_fields'] ) ) {\n          continue;\n        }\n        \n      }\n      \n      $this->render_field( $field, $form, $args );\n      \n    }\n  }\n\n\n  /**\n   * Renders a single field as part of a form.\n   * \n   * @since 1.5.0\n   *\n   */\n  function render_field( $field, $form, $args ) {\n    do_action( 'af/field/before_field', $field, $form, $args );\n    do_action( 'af/field/before_field/name=' . $field['name'], $field, $form, $args );\n    do_action( 'af/field/before_field/key=' . $field['key'], $field, $form, $args );\n\n    // Ignore hide from admin value\n    $field['hide_admin'] = false;\n\n    // Include default value\n    if ( empty( $field['value'] ) && isset( $field['default_value'] ) ) {\n      $field['value'] = $field['default_value'];\n    }\n    \n    \n    // Include pre-fill values (either through args or filter)\n    if ( isset( $args['values'][ $field['name'] ] ) ) {\n      $field['value'] = $args['values'][ $field['name'] ];\n    }\n    \n    if ( isset( $args['values'][ $field['key'] ] ) ) {\n      $field['value'] = $args['values'][ $field['key'] ];\n    }\n    \n    $field['value'] = apply_filters( 'af/field/prefill_value', $field['value'], $field, $form, $args );\n    $field['value'] = apply_filters( 'af/field/prefill_value/name=' . $field['name'], $field['value'], $field, $form, $args );\n    $field['value'] = apply_filters( 'af/field/prefill_value/key=' . $field['key'], $field['value'], $field, $form, $args );\n    \n    \n    // Include any previously submitted value\n    if ( isset( $_POST['acf'][ $field['key'] ] ) ) {\n      $field['value'] = $_POST['acf'][ $field['key'] ];\n    }\n\n    if ( af_has_submission( $form['key'] ) && ( $args['filter_mode'] || af_submission_failed( $form['key'] ) ) ) {\n      $field['value'] = af_get_field( $field['name'] );\n    }\n    \n    $field = apply_filters( 'af/field/before_render', $field, $form, $args );\n    $field = apply_filters( 'af/field/before_render/id=' . $form['post_id'], $field, $form, $args );\n    $field = apply_filters( 'af/field/before_render/key=' . $form['key'], $field, $form, $args );\n    \n    // Attributes to be used on the wrapper element\n    $attributes = array();\n    \n    $attributes['id'] = $field['wrapper']['id'];\n    \n    $attributes['class'] = $field['wrapper']['class'];\n    \n    $attributes['class'] .= sprintf( ' af-field af-field-type-%s af-field-%s acf-field acf-field-%s acf-field-%s', $field['type'], $field['name'], $field['type'], $field['key'] );\n    \n    if ( $field['required'] ) {\n      $attributes['class'] .= ' af-field-required';\n    }\n\n    \n    // This is something ACF needs\n    $attributes['class'] = str_replace( '_', '-', $attributes['class'] );\n    $attributes['class'] = str_replace( 'field-field-', 'field-', $attributes['class'] );\n    \n    \n    $width = $field['wrapper']['width'];\n    \n    if ( $width ) {\n      $attributes['data-width'] = $width;\n      $attributes['style'] = 'width: ' . $width . '%;';\n    }\n    \n    $attributes['data-name'] = $field['name'];\n    $attributes['data-key'] = $field['key'];\n    $attributes['data-type'] = $field['type'];\n\n    /**\n     * ACF 5.7 totally changes how conditional logic works.\n     * Instead of running a script after each field we now pass the conditional rules JSON encoded to the data-conditions attribute.\n     *\n     * @since 1.4.0\n     *\n     */\n    if( ! empty( $field['conditional_logic'] ) ) {\n      $field['conditions'] = $field['conditional_logic'];\n    }\n    \n    if( ! empty( $field['conditions'] ) ) {\n      $attributes['data-conditions'] = $field['conditions'];\n    }\n    \n    \n    $attributes = apply_filters( 'af/form/field_attributes', $attributes, $field, $form, $args );\n    $attributes = apply_filters( 'af/form/field_attributes/id=' . $form['post_id'], $attributes, $field, $form, $args );\n    $attributes = apply_filters( 'af/form/field_attributes/key=' . $form['key'], $attributes, $field, $form, $args );\n    \n    // Field instructions\n    $instruction_placement = $args['instruction_placement'];\n    $instruction_placement = apply_filters( 'af/field/instruction_placement', $instruction_placement, $field, $form, $args );\n    $instruction_placement = apply_filters( 'af/field/instruction_placement/name=' . $field['name'], $instruction_placement, $field, $form, $args );\n    $instruction_placement = apply_filters( 'af/field/instruction_placement/key=' . $field['key'], $instruction_placement, $field, $form, $args );\n    \n    if ( ! empty( $field['instructions'] ) ) {\n      $instructions = sprintf( '<p class=\"af-field-instructions -placement-%s\">%s</p>', $instruction_placement, $field['instructions'] );\n    } else {\n      $instructions = '';\n    }\n    \n    // Field wrapper\n    echo sprintf( '<div %s>', acf_esc_atts( $attributes ) );\n\n    echo '<div class=\"af-label acf-label\">';\n    \n      $label = $field['label'];\n      \n      $label .= $field['required'] ? ' <span class=\"acf-required\">*</span>' : '';\n      \n      echo sprintf( '<label for=\"acf-%s\">%s</label>', $field['key'], $label );\n\n      if ( 'label' == $instruction_placement ) {\n        echo $instructions;\n      }\n      \n    echo '</div>';\n    \n    echo '<div class=\"af-input acf-input\">';\n\n      // Render field with default ACF\n      acf_render_field( $field );\n\n    echo '</div>';\n\n    if ( 'field' == $instruction_placement ) {\n      echo $instructions;\n    }\n    \n    /*\n     * Conditional logic Javascript for field.\n     * This is not needed after ACF 5.7 and won't be included.\n     */\n    if ( acf_version_compare( acf()->version, '<', '5.7' ) ) {\n      if ( ! empty( $field['conditional_logic'] ) ) {\n        ?>\n        <script type=\"text/javascript\">\n          if(typeof acf !== 'undefined'){ acf.conditional_logic.add( '<?php echo $field['key']; ?>', <?php echo json_encode($field['conditional_logic']); ?>); }\n        </script>\n        <?php\n      }\n    }\n    \n    // End field wrapper\n    echo '</div>';\n\n    do_action( 'af/field/after_field', $field, $form, $args );\n    do_action( 'af/field/after_field/name=' . $field['name'], $field, $form, $args );\n    do_action( 'af/field/after_field/key=' . $field['key'], $field, $form, $args );\n  }\n\n\n  function render_submit_button( $form, $args ) {\n    // Submit button and loading indicator\n    $button_attributes = array();\n\n    $button_attributes['class'] = 'acf-button af-submit-button';\n\n    $button_attributes = apply_filters( 'af/form/button_attributes', $button_attributes, $form, $args );\n    $button_attributes = apply_filters( 'af/form/button_attributes/id=' . $form['post_id'], $button_attributes, $form, $args );\n    $button_attributes = apply_filters( 'af/form/button_attributes/key=' . $form['key'], $button_attributes, $form, $args );\n\n    echo '<div class=\"af-submit acf-form-submit\">';\n      echo sprintf( '<button type=\"submit\" %s>%s</button>', acf_esc_atts( $button_attributes ), $args['submit_text'] );\n      echo '<span class=\"acf-spinner af-spinner\"></span>';\n    echo '</div>';\n  }\n  \n  \n}\n\nreturn new AF_Core_Forms_Rendering();", "<?php\n  \n  \n/**\n * Handles validation, and saving of forms\n * Refactored out of core-forms.php since 1.5.0.\n *\n * @since 1.0.0\n *\n */\nclass AF_Core_Forms_Submissions {\n  const DEFAULT_COOKIE_NAME = 'af_submission';\n\n  const OPTION_EXPIRY_MINUTES = 5;\n  const OPTION_DATA_PREFIX = 'af_submission_data_';\n  const OPTION_EXPIRY_PREFIX = 'af_submission_expiry_';\n  \n  function __construct() {\n    add_action( 'init', array( $this, 'pre_form' ), 10, 0 );\n    add_action( 'acf/validate_save_post', array( $this, 'validate' ), 10, 0 );\n    add_filter( 'acf/upload_prefilter', array( $this, 'intercept_upload_errors' ), 1000, 3 );\n  }\n  \n  \n  /**\n   * Handles submissions and enqueue of neccessary scripts\n   * Relies on default ACF validations\n   *\n   * @since 1.0.0\n   *\n   */\n  function pre_form() {\n    // Make sure this is not an AJAX validation request\n    if ( isset ( $_POST['action'] ) ) {\n      return;\n    }\n\n    // Make sure honeypot field is empty if one exists\n    if ( isset( $_POST['email_for_non_humans'] ) && ! empty( $_POST['email_for_non_humans'] ) ) {\n      wp_die( 'Non-human user detected' );\n      exit;\n    }\n\n    // Try loading submission data\n    if ( ! $this->load_submission_data() ) {\n      return;\n    }\n      \n    // Validate the posted data, this validation has already been performed once over AJAX\n    if ( acf_validate_save_post( true ) ) {\n      $form = AF()->submission['form'];\n      $args = AF()->submission['args'];\n      $fields = AF()->submission['fields'];\n      \n      // Increase the form submissions counter\n      if ( $form['post_id'] ) {\n        $submissions = get_post_meta( $form['post_id'], 'form_num_of_submissions', true );\n        $submissions = $submissions ? $submissions + 1 : 1;\n        update_post_meta( $form['post_id'], 'form_num_of_submissions', $submissions );\n      }\n\n      do_action( 'af/form/before_submission', $form, $fields, $args );\n      do_action( 'af/form/before_submission/id=' . $form['post_id'], $form, $fields, $args );\n      do_action( 'af/form/before_submission/key=' . $form['key'], $form, $fields, $args );\n      \n      if ( ! af_submission_failed() ) {\n        do_action( 'af/form/submission', $form, $fields, $args );\n        do_action( 'af/form/submission/id=' . $form['post_id'], $form, $fields, $args );\n        do_action( 'af/form/submission/key=' . $form['key'], $form, $fields, $args );\n      }\n\n      // Redirect to different URL if redirect argument has been passed\n      if ( $args['redirect'] && '' != $args['redirect'] ) {\n        $this->clear_expired_submissions();\n        $this->save_submission( AF()->submission );\n\n        wp_redirect( $args['redirect'] );\n        exit;\n      }\n    }\n  }\n\n\n  /**\n   * Handles validation of a form.\n   * Adds custom validation actions specific to forms.\n   *\n   * @since 1.5.0\n   *\n   */\n  function validate() {\n    // Try loading submission data\n    if ( ! $this->load_submission_data() ) {\n      return;\n    }\n\n    $form = AF()->submission['form'];\n    $args = AF()->submission['args'];\n\n    do_action( 'af/form/validate', $form, $args );\n    do_action( 'af/form/validate/id=' . $form['post_id'], $form, $args );\n    do_action( 'af/form/validate/key=' . $form['key'], $form, $args );\n  }\n  \n\n  /**\n   * Populate AF()->submission with submission data\n   * Returns boolean indicating whether a submission was loaded\n   *\n   * @since 1.5.0\n   *\n   */\n  function load_submission_data() {\n    // Check if there is a cookie-passed submission\n    if ( $submission = $this->get_submission() ) {\n      AF()->submission = $submission;\n\n      // Return false to stop the submission from being processed again\n      return false;\n    }\n\n    // Make sure a form was posted\n    if ( ! ( isset( $_POST['af_form'] ) ) ) {\n      return false;\n    }\n\n    // Bail early if already loaded\n    if ( AF()->submission ) {\n      return true;\n    }\n\n    /**\n     * Upload all files in $_FILES using ACFs helper function. Required for basic uploads to work painlessly.\n     * TODO: Move to af_save_field() to avoid saving all files?\n     *\n     * @since 1.3.1\n     *\n     */\n    if ( isset( $_FILES['acf'] ) ) {\n      $this->clear_upload_errors();\n      acf_upload_files();\n      $this->handle_upload_errors();\n    }\n\n    // Generate submission from data\n    $submission = $this->create_submission();\n    if ( ! $submission ) {\n      return false;\n    }\n\n    // Save submission data to the global AF object\n    AF()->submission = $submission;\n\n    return true;\n  }\n\n\n  /**\n   * Create a submission object from the request data.\n   * Returns a submission array or false on failure.\n   *\n   * @since 1.6.0\n   *\n   */\n  function create_submission() {\n    // Load form by key\n    $form_key_or_id = $_POST['af_form'];\n      \n    $form = af_get_form( $form_key_or_id );\n\n    if ( ! $form ) {\n      return false;\n    }\n\n    // Retrieve the args used to display the form\n    $encoded_args = $_POST['af_form_args'];\n    $args = json_decode( base64_decode( $encoded_args ), true );\n\n    // Verify nonce\n    $nonce = $_POST['af_form_nonce'];\n    $hashed_args = hash( 'sha256', $encoded_args );\n    $nonce_value = sprintf( 'af_submission_%s_%s', $form['key'], $hashed_args );\n    if ( ! wp_verify_nonce( $nonce, $nonce_value ) ) {\n      wp_die( 'Invalid form nonce' );\n      exit;\n    }\n\n    // Retrieve all form fields and their values\n    $fields = array();\n    \n    if ( isset( $_POST['acf'] ) ) {\n      foreach ( $_POST['acf'] as $k => $value ) {\n        $field = acf_get_field( $k );\n        \n        $field['_input'] = $value;\n        $field['value'] = acf_format_value( $value, 0, $field );\n        \n        $fields[] = $field;\n      }\n    }\n\n    return array(\n      'form' => $form,\n      'args' => $args,\n      'fields' => $fields,\n      'errors' => array(),\n    );\n  }\n\n  /**\n   * Fetch a submission from options if the submission cookie is set.\n   * Will return false if the cookie is not set or the submission does not exist in the database.\n   * \n   * @since 1.6.6\n   *\n   */\n  private function get_submission() {\n    if ( ! isset( $_COOKIE[ $this->get_cookie_name() ] ) ) {\n      return false;\n    }\n\n    $key = $_COOKIE[ $this->get_cookie_name() ];\n    $submission = get_option( self::OPTION_DATA_PREFIX . $key, false );\n\n    $this->delete_submission( $key );\n    setcookie( $this->get_cookie_name(), '', time() - HOUR_IN_SECONDS, '/' );\n\n    return $submission;\n  }\n  \n  /**\n   * Save a submission to options and set a cookie with a reference to it.\n   * Submissions are identified by a randomly generated key stored in a cookie.\n   *\n   * @since 1.6.6\n   *\n   */\n  private function save_submission( $submission ) {\n    $key = wp_generate_password( 12, false, false );\n\n    $expiration_time = time() + self::OPTION_EXPIRY_MINUTES * MINUTE_IN_SECONDS;\n\n    add_option( self::OPTION_DATA_PREFIX . $key, $submission );\n    add_option( self::OPTION_EXPIRY_PREFIX . $key, $expiration_time );\n\n    setcookie( $this->get_cookie_name(), $key, $expiration_time, '/' );\n  }\n\n  /**\n   * Delete a submission from options based on key\n   *\n   * @since 1.6.6\n   *\n   */\n  private function delete_submission( $key ) {\n    delete_option( self::OPTION_DATA_PREFIX . $key );\n    delete_option( self::OPTION_EXPIRY_PREFIX . $key );\n  }\n\n  private function get_cookie_name() {\n    return apply_filters( 'af/settings/cookie_name', self::DEFAULT_COOKIE_NAME );\n  }\n\n  /**\n   * Remove any expired submission from options which have not been cleared automatically.\n   * If a request fails a created submission could potentially not be removed from the database.\n   *\n   * @since 1.6.6\n   *\n   */\n  private function clear_expired_submissions() {\n    global $wpdb;\n\n    $options_table = $wpdb->prefix . 'options';\n    $name_pattern = self::OPTION_EXPIRY_PREFIX . '%';\n    $current_time = time();\n\n    // Find all expired submissions in the options table.\n    // This query is very efficient because of the index on the name column.\n    $expired_submissions = $wpdb->get_col(\"\n      SELECT option_name\n      FROM $options_table\n      WHERE option_name LIKE '$name_pattern'\n        AND option_value < $current_time\n    \");\n\n    foreach ( $expired_submissions as $option_name ) {\n      // Find submission key by removing prefix from option name.\n      $submission_key = substr( $option_name, strlen( self::OPTION_EXPIRY_PREFIX ) );\n      $this->delete_submission( $submission_key );\n    }\n  }\n\n  /**\n   * ACF doesn't provide a simple way of catching upload errors when using the basic uploader.\n   * This function is hooked into the \"acf/upload_prefilter\" with a high priority.\n   * It will intercept all upload errors and save them together with field data.\n   *\n   * @since 1.7.0\n   *\n   */\n  function intercept_upload_errors( $errors, $file, $field ) {\n    if ( ! empty( $errors ) ) {\n      $this->upload_errors[ $field['key'] ] = array(\n        'field' => $field,\n        'messages' => $errors,\n      );\n    }\n\n    return $errors;\n  }\n\n  /**\n   * Removes all intercepted upload errors.\n   * Should be run before handling uploads using \"acf_upload_files()\".\n   *\n   * @since 1.7.0\n   *\n   */\n  private function clear_upload_errors() {\n    $this->upload_errors = array();\n  }\n\n  /**\n   * Checks if any upload errors have been caught and stops the submission.\n   * This is a very rudimentary way of handling upload errors but it's necessary as ACF can't handle errors when using the basic uploader.\n   * The errors checks should in the future be implemented client-side for a good user experience and this is mostly meant to be a fallback.\n   * \n   *\n   *\u00a0@since 1.7.0\n   *\n   */\n  private function handle_upload_errors() {\n    if ( empty( $this->upload_errors ) ) {\n      return;\n    }\n\n    $message = sprintf( '<h2>%s</h2>', __('Validation failed', 'acf') );\n    $message .= '<ul>';\n    foreach( $this->upload_errors as $error ) {\n      $field = $error['field'];\n      foreach ( $error['messages'] as $error_message ) {\n        $message .= '<li>' . sprintf( '%s: %s', $field['label'], $error_message ) . '</li>';\n      }\n    }\n    $message .= '</ul>';\n\n    wp_die( $message, __('Validation failed', 'acf') );\n  }\n}\n\nreturn new AF_Core_Forms_Submissions();"], "filenames": ["core/forms/forms-rendering.php", "core/forms/forms-submissions.php"], "buggy_code_start_loc": [301, 176], "buggy_code_end_loc": [308, 177], "fixing_code_start_loc": [301, 176], "fixing_code_end_loc": [315, 187], "type": "CWE-639", "message": "Insecure Direct Object Reference in edit function of Advanced Forms (Free & Pro) before 1.6.9 allows authenticated remote attacker to change arbitrary user's email address and request for reset password, which could lead to take over of WordPress's administrator account. To exploit this vulnerability, an attacker must register to obtain a valid WordPress's user and use such user to authenticate with WordPress in order to exploit the vulnerable edit function.", "other": {"cve": {"id": "CVE-2021-24892", "sourceIdentifier": "contact@wpscan.com", "published": "2021-11-23T20:15:10.463", "lastModified": "2021-11-29T15:44:11.333", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Insecure Direct Object Reference in edit function of Advanced Forms (Free & Pro) before 1.6.9 allows authenticated remote attacker to change arbitrary user's email address and request for reset password, which could lead to take over of WordPress's administrator account. To exploit this vulnerability, an attacker must register to obtain a valid WordPress's user and use such user to authenticate with WordPress in order to exploit the vulnerable edit function."}, {"lang": "es", "value": "Una Referencia Directa a Objetos no Segura en la funci\u00f3n edit de Advanced Forms (Free &amp; Pro) versiones anteriores a 1.6.9, permite a un atacante remoto autenticado cambiar la direcci\u00f3n de correo electr\u00f3nico de un usuario arbitrario y solicitar el restablecimiento de la contrase\u00f1a, que podr\u00eda conllevar a una toma de control de la cuenta de administrador de WordPress. Para explotar esta vulnerabilidad, un atacante debe registrarse para obtener un usuario v\u00e1lido de WordPress y usar dicho usuario para autenticarse con WordPress con el fin de explotar la funci\u00f3n edit vulnerable"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "contact@wpscan.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:advanced_forms_project:advanced_forms:*:*:*:*:free:wordpress:*:*", "versionEndExcluding": "1.6.9", "matchCriteriaId": "1A292A07-A156-4BA7-A792-9AFB001F57A4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:advanced_forms_project:advanced_forms:*:*:*:*:pro:wordpress:*:*", "versionEndExcluding": "1.6.9", "matchCriteriaId": "97B60B8C-ABC1-4C3D-8E19-8C27D757DD02"}]}]}], "references": [{"url": "https://github.com/advancedforms/advanced-forms/commit/2ce3ab6985c3a909eefb01c562995bc6a994d3a2", "source": "contact@wpscan.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wpscan.com/vulnerability/364b0843-a990-4204-848a-60c928cc5bc0", "source": "contact@wpscan.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/advancedforms/advanced-forms/commit/2ce3ab6985c3a909eefb01c562995bc6a994d3a2"}}