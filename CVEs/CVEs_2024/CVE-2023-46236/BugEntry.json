{"buggy_code": ["<?php\n/**\n * Get version, used for multiple things.\n * The new fog client uses this to tell a client to update.\n * It also is used to return the current running FOG Version.\n * If the client update is disabled, it should return 0.0.0\n * as all clients use a numerical system of which 0.0.0 is below.\n *\n * PHP version 5\n *\n * @category Getversion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\n/**\n * Get version, used for multiple things.\n * The new fog client uses this to tell a client to update.\n * It also is used to return the current running FOG Version.\n * If the client update is disabled, it should return 0.0.0\n * as all clients use a numerical system of which 0.0.0 is below.\n *\n * @category Getversion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\nrequire '../commons/base.inc.php';\n$clientUpdate = (bool)FOGCore::getSetting('FOG_CLIENT_AUTOUPDATE');\nif (isset($_REQUEST['client'])) {\n    $ver = (\n        $clientUpdate ?\n        '9.9.99' :\n        '0.0.0'\n    );\n} elseif (isset($_REQUEST['clientver'])) {\n    $ver = (\n        $clientUpdate ?\n        FOG_CLIENT_VERSION :\n        '0.0.0'\n    );\n} elseif (isset($_REQUEST['url'])) {\n    $url = $_REQUEST['url'];\n    $res = $FOGURLRequests\n        ->process($_REQUEST['url']);\n    $ver = array_shift($res);\n} else {\n    $ver = FOG_VERSION;\n}\necho $ver;\nexit;\n", "<?php\n/**\n * Presents the FOG Kernels version that the clients will use.\n *\n * PHP version 5\n *\n * @category KernelVersion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\n/**\n * Presents the FOG Kernels version that the clients will use.\n *\n * @category KernelVersion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\nrequire '../commons/base.inc.php';\nsession_write_close();\nignore_user_abort(true);\nset_time_limit(0);\nheader('Content-Type: text/event-stream');\n$url = filter_input(INPUT_POST, 'url');\nif ($url) {\n    $res = $FOGURLRequests\n        ->process($url);\n    foreach ((array)$res as &$response) {\n        echo $response;\n        unset($response);\n    }\n    exit;\n}\n$kernelvers = function ($kernel) {\n    $currpath = sprintf(\n        '%s%sservice%sipxe%s%s',\n        BASEPATH,\n        DS,\n        DS,\n        DS,\n        $kernel\n    );\n    $basepath = escapeshellarg($currpath);\n    $findstr = sprintf(\n        'strings %s | grep -A1 \"%s:\" | tail -1 | awk \\'{print $1}\\'',\n        $basepath,\n        'Undefined video mode number'\n    );\n    return shell_exec($findstr);\n};\nprintf(\n    \"%s\\n\",\n    FOG_VERSION\n);\nprintf(\n    \"bzImage Version: %s\\n\",\n    $kernelvers('bzImage')\n);\nprintf(\n    \"bzImage32 Version: %s\",\n    $kernelvers('bzImage32')\n);\n"], "fixing_code": ["<?php\n/**\n * Get version, used for multiple things.\n * The new fog client uses this to tell a client to update.\n * It also is used to return the current running FOG Version.\n * If the client update is disabled, it should return 0.0.0\n * as all clients use a numerical system of which 0.0.0 is below.\n *\n * PHP version 5\n *\n * @category Getversion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\n/**\n * Get version, used for multiple things.\n * The new fog client uses this to tell a client to update.\n * It also is used to return the current running FOG Version.\n * If the client update is disabled, it should return 0.0.0\n * as all clients use a numerical system of which 0.0.0 is below.\n *\n * @category Getversion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\nrequire '../commons/base.inc.php';\n$clientUpdate = (bool) FOGCore::getSetting('FOG_CLIENT_AUTOUPDATE');\nif (isset($_REQUEST['client'])) {\n    $ver = (\n        $clientUpdate ? \n        '9.9.99' :\n        '0.0.0'\n    );\n} elseif (isset($_REQUEST['clientver'])) {\n    $ver = (\n        $clientUpdate ? \n        FOG_CLIENT_VERSION :\n        '0.0.0'\n    );\n} elseif (isset($_REQUEST['url'])) {\n\n    // Prevent an unauthenticated user from making arbitrary requests.\n    $unauthorized = !$currentUser->isValid() || empty($_SERVER['HTTP_X_REQUESTED_WITH'])\n        || strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) !== 'xmlhttprequest';\n\n    if ($unauthorized) {\n        echo _('Unauthorized');\n        exit;\n    }\n\n    $url = $_REQUEST['url'];\n    $res = $FOGURLRequests\n        ->process($_REQUEST['url']);\n    $ver = array_shift($res);\n} else {\n    $ver = FOG_VERSION;\n}\necho $ver;\nexit;", "<?php\n/**\n * Presents the FOG Kernels version that the clients will use.\n *\n * PHP version 5\n *\n * @category KernelVersion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\n/**\n * Presents the FOG Kernels version that the clients will use.\n *\n * @category KernelVersion\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\nrequire '../commons/base.inc.php';\nsession_write_close();\nignore_user_abort(true);\nset_time_limit(0);\nheader('Content-Type: text/event-stream');\n\nif (isset($_POST['url'])) {\n\n    // Prevent an unauthenticated user from making arbitrary requests.\n    $unauthorized = !$currentUser->isValid() || empty($_SERVER['HTTP_X_REQUESTED_WITH'])\n        || strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) !== 'xmlhttprequest';\n\n    if ($unauthorized) {\n        echo _('Unauthorized');\n        exit;\n    }\n\n    $res = $FOGURLRequests\n        ->process(filter_input(INPUT_POST, 'url'));\n    foreach ((array) $res as &$response) {\n        echo $response;\n        unset($response);\n    }\n    \n    exit;\n}\n\n$kernelvers = function ($kernel) {\n    $currpath = sprintf(\n        '%s%sservice%sipxe%s%s',\n        BASEPATH,\n        DS,\n        DS,\n        DS,\n        $kernel\n    );\n    $basepath = escapeshellarg($currpath);\n    $findstr = sprintf(\n        'strings %s | grep -A1 \"%s:\" | tail -1 | awk \\'{print $1}\\'',\n        $basepath,\n        'Undefined video mode number'\n    );\n    return shell_exec($findstr);\n};\nprintf(\n    \"%s\\n\",\n    FOG_VERSION\n);\nprintf(\n    \"bzImage Version: %s\\n\",\n        $kernelvers('bzImage')\n);\nprintf(\n    \"bzImage32 Version: %s\",\n        $kernelvers('bzImage32')\n);"], "filenames": ["packages/web/service/getversion.php", "packages/web/status/kernelvers.php"], "buggy_code_start_loc": [31, 27], "buggy_code_end_loc": [54, 66], "fixing_code_start_loc": [31, 27], "fixing_code_end_loc": [64, 78], "type": "CWE-918", "message": "FOG is a free open-source cloning/imaging/rescue suite/inventory management system. Prior to version 1.5.10, a server-side-request-forgery (SSRF) vulnerability allowed an unauthenticated user to trigger a GET request as the server to an arbitrary endpoint and URL scheme. This also allows remote access to files visible to the Apache user group. Other impacts vary based on server configuration. Version 1.5.10 contains a patch.", "other": {"cve": {"id": "CVE-2023-46236", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-31T15:15:09.630", "lastModified": "2023-11-08T17:47:50.123", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "FOG is a free open-source cloning/imaging/rescue suite/inventory management system. Prior to version 1.5.10, a server-side-request-forgery (SSRF) vulnerability allowed an unauthenticated user to trigger a GET request as the server to an arbitrary endpoint and URL scheme. This also allows remote access to files visible to the Apache user group. Other impacts vary based on server configuration. Version 1.5.10 contains a patch."}, {"lang": "es", "value": "FOG es un sistema gratuito de gesti\u00f3n de inventario, im\u00e1genes, clonaci\u00f3n y rescate de c\u00f3digo abierto. Antes de la versi\u00f3n 1.5.10, una vulnerabilidad de server-side-request-forgery (SSRF) permit\u00eda a un usuario no autenticado activar una solicitud GET como servidor para un endpoint y un esquema de URL arbitrarios. Esto tambi\u00e9n permite el acceso remoto a archivos visibles para el grupo de usuarios de Apache. Otros impactos var\u00edan seg\u00fan la configuraci\u00f3n del servidor. La versi\u00f3n 1.5.10 contiene un parche."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fogproject:fogproject:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.10", "matchCriteriaId": "F0A79C05-662C-4102-B8D5-7FCA7C19A1C2"}]}]}], "references": [{"url": "https://github.com/FOGProject/fogproject/commit/9125f35ff649a3e7fd7771b1c8e5add3c726f763", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/FOGProject/fogproject/security/advisories/GHSA-8qg4-9363-873h", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/FOGProject/fogproject/commit/9125f35ff649a3e7fd7771b1c8e5add3c726f763"}}