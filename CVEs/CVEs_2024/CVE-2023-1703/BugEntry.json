{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Translation;\nuse Pimcore\\Tool\\Session;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/class\", name=\"pimcore_admin_dataobject_class_\")\n *\n * @internal\n */\nclass ClassController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/get-document-types\", name=\"getdocumenttypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDocumentTypesAction(Request $request)\n    {\n        $documentTypes = Document::getTypes();\n        $typeItems = [];\n        foreach ($documentTypes as $documentType) {\n            $typeItems[] = [\n                'text' => $documentType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-asset-types\", name=\"getassettypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAssetTypesAction(Request $request)\n    {\n        $assetTypes = Asset::getTypes();\n        $typeItems = [];\n        foreach ($assetTypes as $assetType) {\n            $typeItems[] = [\n                'text' => $assetType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-tree\", name=\"gettree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getTreeAction(Request $request)\n    {\n        $defaultIcon = '/bundles/pimcoreadmin/img/flat-color-icons/class.svg';\n\n        $classesList = new DataObject\\ClassDefinition\\Listing();\n        $classesList->setOrderKey('name');\n        $classesList->setOrder('asc');\n        $classes = $classesList->load();\n\n        // filter classes\n        if ($request->get('createAllowed')) {\n            $tmpClasses = [];\n            foreach ($classes as $class) {\n                if ($this->getAdminUser()->isAllowed($class->getId(), 'class')) {\n                    $tmpClasses[] = $class;\n                }\n            }\n            $classes = $tmpClasses;\n        }\n\n        $withId = $request->get('withId');\n        $getClassConfig = function ($class) use ($defaultIcon, $withId) {\n            $text = $class->getname();\n            if ($withId) {\n                $text .= ' (' . $class->getId() . ')';\n            }\n\n            $hasBrickField = false;\n            foreach ($class->getFieldDefinitions() as $fieldDefinition) {\n                if ($fieldDefinition instanceof DataObject\\ClassDefinition\\Data\\Objectbricks) {\n                    $hasBrickField = true;\n\n                    break;\n                }\n            }\n\n            return [\n                'id' => $class->getId(),\n                'text' => $text,\n                'leaf' => true,\n                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,\n                'cls' => 'pimcore_class_icon',\n                'propertyVisibility' => $class->getPropertyVisibility(),\n                'enableGridLocking' => $class->isEnableGridLocking(),\n                'hasBrickField' => $hasBrickField,\n            ];\n        };\n\n        // build groups\n        $groups = [];\n        foreach ($classes as $class) {\n            $groupName = null;\n\n            if ($class->getGroup()) {\n                $type = 'manual';\n                $groupName = $class->getGroup();\n            } else {\n                $type = 'auto';\n                if (preg_match('@^([A-Za-z])([^A-Z]+)@', $class->getName(), $matches)) {\n                    $groupName = $matches[0];\n                }\n\n                if (!$groupName) {\n                    // this is eg. the case when class name uses only capital letters\n                    $groupName = $class->getName();\n                }\n            }\n\n            $groupName = Translation::getByKeyLocalized($groupName, Translation::DOMAIN_ADMIN, true, true);\n\n            if (!isset($groups[$groupName])) {\n                $groups[$groupName] = [\n                    'classes' => [],\n                    'type' => $type,\n                ];\n            }\n            $groups[$groupName]['classes'][] = $class;\n        }\n\n        $treeNodes = [];\n        if (!empty($groups)) {\n            $types = array_column($groups, 'type');\n            array_multisort($types, SORT_ASC, array_keys($groups), SORT_ASC, $groups);\n        }\n\n        if (!$request->get('grouped')) {\n            // list output\n            foreach ($groups as $groupName => $groupData) {\n                foreach ($groupData['classes'] as $class) {\n                    $node = $getClassConfig($class);\n                    if (count($groupData['classes']) > 1 || $groupData['type'] == 'manual') {\n                        $node['group'] = $groupName;\n                    }\n                    $treeNodes[] = $node;\n                }\n            }\n        } else {\n            // create json output\n            foreach ($groups as $groupName => $groupData) {\n                if (count($groupData['classes']) === 1 && $groupData['type'] == 'auto') {\n                    // no group, only one child\n                    $node = $getClassConfig($groupData['classes'][0]);\n                } else {\n                    // group classes\n                    $node = [\n                        'id' => 'folder_' . $groupName,\n                        'text' => $groupName,\n                        'leaf' => false,\n                        'expandable' => true,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'children' => [],\n                    ];\n\n                    foreach ($groupData['classes'] as $class) {\n                        $node['children'][] = $getClassConfig($class);\n                    }\n                }\n\n                $treeNodes[] = $node;\n            }\n        }\n\n        return $this->adminJson($treeNodes);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $class->setFieldDefinitions([]);\n        $isWriteable = $class->isWritable();\n        $class = $class->getObjectVars();\n        $class['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($class);\n    }\n\n    /**\n     * @Route(\"/get-custom-layout\", name=\"getcustomlayout\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            $brickLayoutSeparator = strpos($request->get('id'), '.brick.');\n            if ($brickLayoutSeparator !== false) {\n                $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById(substr($request->get('id'), 0, $brickLayoutSeparator));\n                if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                    $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n                        [\n                            'name' => $customLayout->getName().' '.substr($request->get('id'), $brickLayoutSeparator+strlen('.brick.')),\n                            'userOwner' => $this->getAdminUser()->getId(),\n                            'classId' => $customLayout->getClassId(),\n                        ]\n                    );\n\n                    $customLayout->setId($request->get('id'));\n                    $customLayout->save();\n                }\n            }\n\n            if (!$customLayout) {\n                throw $this->createNotFoundException();\n            }\n        }\n        $isWriteable = $customLayout->isWritable();\n        $customLayout = $customLayout->getObjectVars();\n        $customLayout['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'data' => $customLayout]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $className = $request->get('className');\n        $className = $this->correctClassname($className);\n\n        $classId = $request->get('classIdentifier');\n        $existingClass = DataObject\\ClassDefinition::getById($classId);\n        if ($existingClass) {\n            throw new \\Exception('Class identifier already exists');\n        }\n\n        $class = DataObject\\ClassDefinition::create(\n            ['name' => $className,\n                'userOwner' => $this->getAdminUser()->getId(), ]\n        );\n\n        $class->setId($classId);\n\n        $class->save(true);\n\n        return $this->adminJson(['success' => true, 'id' => $class->getId()]);\n    }\n\n    /**\n     * @Route(\"/add-custom-layout\", name=\"addcustomlayout\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCustomLayoutAction(Request $request)\n    {\n        $layoutId = $request->get('layoutIdentifier');\n        $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId);\n        if ($existingLayout) {\n            throw new \\Exception('Custom Layout identifier already exists');\n        }\n\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n            [\n                'name' => $request->get('layoutName'),\n                'userOwner' => $this->getAdminUser()->getId(),\n                'classId' => $request->get('classId'),\n            ]\n        );\n\n        $customLayout->setId($layoutId);\n        $customLayout->save();\n\n        $isWriteable = $customLayout->isWritable();\n        $data = $customLayout->getObjectVars();\n        $data['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'name' => $customLayout->getName(),\n                                 'data' => $data, ]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function deleteAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if ($class) {\n            $class->delete();\n        }\n\n        return new Response();\n    }\n\n    /**\n     * @Route(\"/delete-custom-layout\", name=\"deletecustomlayout\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLayoutAction(Request $request)\n    {\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $id = $request->get('id');\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($id) {\n            $currentLayoutId = $layout->getId();\n\n            return $currentLayoutId === $id || str_starts_with($currentLayoutId, $id . '.brick.');\n        });\n\n        foreach ($customLayouts->getLayoutDefinitions() as $customLayout) {\n            $customLayout->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/save-custom-layout\", name=\"savecustomlayout\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        $modificationDate = (int)$values['modificationDate'];\n        if ($modificationDate < $customLayout->getModificationDate()) {\n            return $this->adminJson(['success' => false, 'msg' => 'custom_layout_changed']);\n        }\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n            $customLayout->setLayoutDefinitions($layout);\n            $customLayout->setName($values['name']);\n            $customLayout->setDescription($values['description']);\n            $customLayout->setDefault($values['default']);\n            $customLayout->save();\n\n            return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'data' => $customLayout->getObjectVars()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/save\", name=\"save\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function saveAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        // check if the class was changed during editing in the frontend\n        if ($class->getModificationDate() != $values['modificationDate']) {\n            throw new \\Exception('The class was modified during editing, please reload the class and make your changes again');\n        }\n\n        if ($values['name'] != $class->getName()) {\n            $classByName = DataObject\\ClassDefinition::getByName($values['name']);\n            if ($classByName && $classByName->getId() != $class->getId()) {\n                throw new \\Exception('Class name already exists');\n            }\n\n            $values['name'] = $this->correctClassname($values['name']);\n            $class->rename($values['name']);\n        }\n\n        unset($values['creationDate']);\n        unset($values['userOwner']);\n        unset($values['layoutDefinitions']);\n        unset($values['fieldDefinitions']);\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        $class->setValues($values);\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n\n            $class->setLayoutDefinitions($layout);\n\n            $class->setUserModification($this->getAdminUser()->getId());\n            $class->setModificationDate(time());\n\n            $propertyVisibility = [];\n            foreach ($values as $key => $value) {\n                if (preg_match('/propertyVisibility/i', $key)) {\n                    if (preg_match(\"/\\.grid\\./i\", $key)) {\n                        $propertyVisibility['grid'][preg_replace(\"/propertyVisibility\\.grid\\./i\", '', $key)] = (bool) $value;\n                    } elseif (preg_match(\"/\\.search\\./i\", $key)) {\n                        $propertyVisibility['search'][preg_replace(\"/propertyVisibility\\.search\\./i\", '', $key)] = (bool) $value;\n                    }\n                }\n            }\n            if (!empty($propertyVisibility)) {\n                $class->setPropertyVisibility($propertyVisibility);\n            }\n\n            $class->save();\n\n            // set the fielddefinitions to [] because we don't need them in the response\n            $class->setFieldDefinitions([]);\n\n            return $this->adminJson(['success' => true, 'class' => $class]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return string\n     */\n    protected function correctClassname($name)\n    {\n        $name = preg_replace('/[^a-zA-Z0-9_]+/', '', $name);\n        $name = preg_replace('/^[0-9]+/', '', $name);\n\n        return $name;\n    }\n\n    /**\n     * @Route(\"/import-class\", name=\"importclass\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importClassAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, $json, false, true);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/import-custom-layout-definition\", name=\"importcustomlayoutdefinition\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importCustomLayoutDefinitionAction(Request $request)\n    {\n        $success = false;\n        $responseContent = [];\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $importData = $this->decodeJson($json);\n\n        $existingLayout = null;\n        if (isset($importData['name'])) {\n            $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getByName($importData['name']);\n\n            if ($existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                $responseContent['nameAlreadyInUse'] = true;\n            }\n        }\n\n        if (!$existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n            $customLayoutId = $request->get('id');\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($customLayoutId);\n            if ($customLayout) {\n                try {\n                    $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($importData['layoutDefinitions'], true);\n                    $customLayout->setLayoutDefinitions($layout);\n                    if (isset($importData['name']) === true) {\n                        $customLayout->setName($importData['name']);\n                    }\n                    $customLayout->setDescription($importData['description']);\n                    $customLayout->save();\n                    $success = true;\n                } catch (\\Exception $e) {\n                    Logger::error($e->getMessage());\n                }\n            }\n\n            $responseContent['success'] = $success;\n        }\n\n        $response = $this->adminJson($responseContent);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-custom-layout-definitions\", name=\"getcustomlayoutdefinitions\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutDefinitionsAction(Request $request)\n    {\n        $classIds = explode(',', $request->get('classId'));\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($classIds) {\n            return in_array($layout->getClassId(), $classIds) && !str_contains($layout->getId(), '.brick.');\n        });\n        $list = $list->load();\n        $result = [];\n        foreach ($list as $item) {\n            $result[] = [\n                'id' => $item->getId(),\n                'name' => $item->getName() . ' (ID: ' . $item->getId() . ')',\n                'default' => $item->getDefault() ?: 0,\n            ];\n        }\n\n        return $this->adminJson(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/get-all-layouts\", name=\"getalllayouts\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAllLayoutsAction(Request $request)\n    {\n        // get all classes\n        $resultList = [];\n        $mapping = [];\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) {\n            return !str_contains($layout->getId(), '.brick.');\n        });\n        $customLayouts->setOrder(function (DataObject\\ClassDefinition\\CustomLayout $a, DataObject\\ClassDefinition\\CustomLayout $b) {\n            return strcmp($a->getName(), $b->getName());\n        });\n\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $layout) {\n            $mapping[$layout->getClassId()][] = $layout;\n        }\n\n        $classList = new DataObject\\ClassDefinition\\Listing();\n        $classList->setOrder('ASC');\n        $classList->setOrderKey('name');\n        $classList = $classList->load();\n\n        foreach ($classList as $class) {\n            if (isset($mapping[$class->getId()])) {\n                $classMapping = $mapping[$class->getId()];\n                $resultList[] = [\n                    'type' => 'master',\n                    'id' => $class->getId() . '_' . 0,\n                    'name' => $class->getName(),\n                ];\n\n                foreach ($classMapping as $layout) {\n                    $resultList[] = [\n                        'type' => 'custom',\n                        'id' => $class->getId() . '_' . $layout->getId(),\n                        'name' => $class->getName() . ' - ' . $layout->getName(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson(['data' => $resultList]);\n    }\n\n    /**\n     * @Route(\"/export-class\", name=\"exportclass\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportClassAction(Request $request)\n    {\n        $id = $request->get('id');\n        $class = DataObject\\ClassDefinition::getById($id);\n\n        if (!$class instanceof DataObject\\ClassDefinition) {\n            $errorMessage = ': Class with id [ ' . $id . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class);\n\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"class_' . $class->getName() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-custom-layout-definition\", name=\"exportcustomlayoutdefinition\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportCustomLayoutDefinitionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        if ($id) {\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($id);\n            if ($customLayout) {\n                $name = $customLayout->getName();\n                $json = DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout);\n\n                $response = new Response($json);\n                $response->headers->set('Content-type', 'application/json');\n                $response->headers->set('Content-Disposition', 'attachment; filename=\"custom_definition_' . $name . '_export.json\"');\n\n                return $response;\n            }\n        }\n\n        $errorMessage = ': Custom Layout with id [ ' . $id . ' not found. ]';\n        Logger::error($errorMessage);\n\n        throw $this->createNotFoundException($errorMessage);\n    }\n\n    /**\n     * FIELDCOLLECTIONS\n     */\n\n    /**\n     * @Route(\"/fieldcollection-get\", name=\"fieldcollectionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionGetAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-update\", name=\"fieldcollectionupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionUpdateAction(Request $request)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing fieldcollection with same name with different lower/upper cases\n                $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('FieldCollection with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            $fcDef = new DataObject\\Fieldcollection\\Definition();\n            $fcDef->setKey($key);\n            $fcDef->setTitle($title);\n            $fcDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n                $fcDef->setParentClass($values['parentClass']);\n                $fcDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $fcDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $fcDef->setLayoutDefinitions($layout);\n            }\n\n            $fcDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $fcDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-fieldcollection\", name=\"importfieldcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-fieldcollection\", name=\"exportfieldcollection\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        if (!$fieldCollection instanceof DataObject\\Fieldcollection\\Definition) {\n            $errorMessage = ': Field-Collection with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection);\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"fieldcollection_' . $fieldCollection->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/fieldcollection-delete\", name=\"fieldcollectiondelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-tree\", name=\"fieldcollectiontree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $layoutDefinitions = [];\n\n        $definitions = [];\n\n        $allowedTypes = null;\n        if ($request->query->has('allowedTypes')) {\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n        }\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        $currentLayoutId = $request->get('layoutId', null);\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $groups = [];\n        foreach ($list as $item) {\n            if ($allowedTypes && !in_array($item->getKey(), $allowedTypes)) {\n                continue;\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_fieldcollection',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_fieldcollection',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n            'layoutDefinitions' => $layoutDefinitions,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n        $layoutDefinitions = $event->getArgument('layoutDefinitions');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['fieldcollections' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        }\n\n        return $this->adminJson($definitions);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-list\", name=\"fieldcollectionlist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n        $currentLayoutId = $request->get('layoutId');\n\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('allowedTypes')) {\n            $filteredList = [];\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n            foreach ($list as $type) {\n                if (in_array($type->getKey(), $allowedTypes)) {\n                    $filteredList[] = $type;\n\n                    // mainly for objects-meta data-type\n                    $layoutDefinitions = $type->getLayoutDefinitions();\n                    $context = [\n                        'containerType' => 'fieldcollection',\n                        'containerKey' => $type->getKey(),\n                        'outerFieldname' => $request->get('field_name'),\n                    ];\n\n                    $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                    DataObject\\Service::enrichLayoutDefinition($layoutDefinitions, $object, $context);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layoutDefinitions);\n                    }\n                }\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['fieldcollections' => $list]);\n    }\n\n    /**\n     * @Route(\"/get-class-definition-for-column-config\", name=\"getclassdefinitionforcolumnconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getClassDefinitionForColumnConfigAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $objectId = (int)$request->get('oid');\n\n        $filteredDefinitions = DataObject\\Service::getCustomLayoutDefinitionForGridColumnConfig($class, $objectId);\n\n        /** @var DataObject\\ClassDefinition\\Layout $layoutDefinitions */\n        $layoutDefinitions = isset($filteredDefinitions['layoutDefinition']) ? $filteredDefinitions['layoutDefinition'] : false;\n        $filteredFieldDefinition = isset($filteredDefinitions['fieldDefinition']) ? $filteredDefinitions['fieldDefinition'] : false;\n\n        $class->setFieldDefinitions([]);\n\n        $result = [];\n\n        DataObject\\Service::enrichLayoutDefinition($layoutDefinitions);\n\n        $result['objectColumns']['children'] = $layoutDefinitions->getChildren();\n        $result['objectColumns']['nodeLabel'] = 'object_columns';\n        $result['objectColumns']['nodeType'] = 'object';\n\n        // array(\"id\", \"fullpath\", \"published\", \"creationDate\", \"modificationDate\", \"filename\", \"classname\");\n        $systemColumnNames = DataObject\\Concrete::SYSTEM_COLUMN_NAMES;\n        $systemColumns = [];\n        foreach ($systemColumnNames as $systemColumn) {\n            $systemColumns[] = ['title' => $systemColumn, 'name' => $systemColumn, 'datatype' => 'data', 'fieldtype' => 'system'];\n        }\n        $result['systemColumns']['nodeLabel'] = 'system_columns';\n        $result['systemColumns']['nodeType'] = 'system';\n        $result['systemColumns']['children'] = $systemColumns;\n\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        foreach ($list as $brickDefinition) {\n            $classDefs = $brickDefinition->getClassDefinitions();\n            if (!empty($classDefs)) {\n                foreach ($classDefs as $classDef) {\n                    if ($classDef['classname'] == $class->getName()) {\n                        $fieldName = $classDef['fieldname'];\n                        if ($filteredFieldDefinition && !$filteredFieldDefinition[$fieldName]) {\n                            continue;\n                        }\n\n                        $key = $brickDefinition->getKey();\n\n                        $brickLayoutDefinitions = $brickDefinition->getLayoutDefinitions();\n                        $context = [\n                            'containerType' => 'objectbrick',\n                            'containerKey' => $key,\n                            'outerFieldname' => $fieldName,\n                        ];\n                        DataObject\\Service::enrichLayoutDefinition($brickLayoutDefinitions, null, $context);\n\n                        $result[$key]['nodeLabel'] = $key;\n                        $result[$key]['brickField'] = $fieldName;\n                        $result[$key]['nodeType'] = 'objectbricks';\n                        $result[$key]['children'] = $brickLayoutDefinitions->getChildren();\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * OBJECT BRICKS\n     */\n\n    /**\n     * @Route(\"/objectbrick-get\", name=\"objectbrickget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickGetAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/objectbrick-update\", name=\"objectbrickupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickUpdateAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing brick with same name with different lower/upper cases\n                $list = new DataObject\\Objectbrick\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('Brick with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            // now we create a new definition\n            $brickDef = new DataObject\\Objectbrick\\Definition();\n            $brickDef->setKey($key);\n            $brickDef->setTitle($title);\n            $brickDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n\n                $brickDef->setParentClass($values['parentClass']);\n                $brickDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $brickDef->setClassDefinitions($values['classDefinitions']);\n                $brickDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $brickDef->setLayoutDefinitions($layout);\n            }\n\n            $event = new GenericEvent($this, [\n                'brickDefinition' => $brickDef,\n            ]);\n            $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_UPDATE_DEFINITION);\n            $brickDef = $event->getArgument('brickDefinition');\n\n            $brickDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $brickDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-objectbrick\", name=\"importobjectbrick\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($objectBrick, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-objectbrick\", name=\"exportobjectbrick\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        if (!$objectBrick instanceof DataObject\\Objectbrick\\Definition) {\n            $errorMessage = ': Object-Brick with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $xml = DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick);\n        $response = new Response($xml);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"objectbrick_' . $objectBrick->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/objectbrick-delete\", name=\"objectbrickdelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/objectbrick-tree\", name=\"objectbricktree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $context = null;\n        $layoutDefinitions = [];\n        $groups = [];\n        $definitions = [];\n        $fieldname = null;\n        $className = null;\n\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n        }\n\n        foreach ($list as $item) {\n            if ($forObjectEditor) {\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $item->getKey(),\n                    'outerFieldname' => $fieldname,\n                ];\n            }\n            if ($request->query->has('class_id') && $request->query->has('field_name')) {\n                $keep = false;\n                $clsDefs = $item->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $keep = true;\n\n                            continue;\n                        }\n                    }\n                }\n                if (!$keep) {\n                    continue;\n                }\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $layoutId = $request->get('layoutId');\n                    $itemLayoutDefinitions = null;\n                    if ($layoutId) {\n                        $layout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId.'.brick.'.$item->getKey());\n                        if ($layout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $itemLayoutDefinitions = $layout->getLayoutDefinitions();\n                        }\n                    }\n\n                    if ($itemLayoutDefinitions === null) {\n                        $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_objectbricks',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $layout = $item->getLayoutDefinitions();\n\n                    $currentLayoutId = $request->get('layoutId', null);\n\n                    $user = $this->getAdminUser();\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layout);\n                    } elseif ($currentLayoutId) {\n                        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($currentLayoutId.'.brick.'.$item->getKey());\n                        if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $layout = $customLayout->getLayoutDefinitions();\n                        }\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $layout;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_objectbricks',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['objectbricks' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        } else {\n            return $this->adminJson($definitions);\n        }\n    }\n\n    /**\n     * @Route(\"/objectbrick-list\", name=\"objectbricklist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $filteredList = [];\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n\n            foreach ($list as $type) {\n                $clsDefs = $type->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $filteredList[] = $type;\n\n                            continue;\n                        }\n                    }\n                }\n\n                $layout = $type->getLayoutDefinitions();\n\n                $currentLayoutId = $request->get('layoutId', null);\n\n                $user = $this->getAdminUser();\n                if ($currentLayoutId == -1 && $user->isAdmin()) {\n                    DataObject\\Service::createSuperLayout($layout);\n                    $objectData['layout'] = $layout;\n                }\n\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $type->getKey(),\n                    'outerFieldname' => $request->get('field_name'),\n                ];\n\n                $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n                $type->setLayoutDefinitions($layout);\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['objectbricks' => $list]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-import\", name=\"bulkimport\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function bulkImportAction(Request $request)\n    {\n        $result = [];\n\n        $tmpName = $_FILES['Filedata']['tmp_name'];\n        $json = file_get_contents($tmpName);\n\n        $tmpName = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/bulk-import-' . uniqid() . '.tmp';\n        file_put_contents($tmpName, $json);\n\n        Session::useSession(function (AttributeBagInterface $session) use ($tmpName) {\n            $session->set('class_bulk_import_file', $tmpName);\n        }, 'pimcore_objects');\n\n        $json = json_decode($json, true);\n\n        foreach ($json as $groupName => $group) {\n            foreach ($group as $groupItem) {\n                $displayName = null;\n                $icon = null;\n\n                if ($groupName == 'class') {\n                    $name = $groupItem['name'];\n                    $icon = 'class';\n                } elseif ($groupName == 'customlayout') {\n                    $className = $groupItem['className'];\n\n                    $layoutData = ['className' => $className, 'name' => $groupItem['name']];\n                    $name = base64_encode(json_encode($layoutData));\n                    $displayName = $className . ' / ' . $groupItem['name'];\n                    $icon = 'custom_views';\n                } else {\n                    if ($groupName == 'objectbrick') {\n                        $icon = 'objectbricks';\n                    } elseif ($groupName == 'fieldcollection') {\n                        $icon = 'fieldcollection';\n                    }\n                    $name = $groupItem['key'];\n                }\n\n                if (!$displayName) {\n                    $displayName = $name;\n                }\n                $result[] = ['icon' => $icon, 'checked' => true, 'type' => $groupName, 'name' => $name, 'displayName' => $displayName];\n            }\n        }\n\n        $response = $this->adminJson(['success' => true, 'data' => $result]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-commit\", name=\"bulkcommit\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function bulkCommitAction(Request $request)\n    {\n        $data = json_decode($request->get('data'), true);\n\n        $session = Session::get('pimcore_objects');\n        $filename = $session->get('class_bulk_import_file');\n        $json = @file_get_contents($filename);\n        $json = json_decode($json, true);\n\n        $type = $data['type'];\n        $name = $data['name'];\n        $list = $json[$type];\n\n        foreach ($list as $item) {\n            unset($item['creationDate']);\n            unset($item['modificationDate']);\n            unset($item['userOwner']);\n            unset($item['userModification']);\n\n            if ($type == 'class' && $item['name'] == $name) {\n                $class = DataObject\\ClassDefinition::getByName($name);\n                if (!$class) {\n                    $class = new DataObject\\ClassDefinition();\n                    $class->setName($name);\n                }\n                $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'objectbrick' && $item['key'] == $name) {\n                if (!$brick = DataObject\\Objectbrick\\Definition::getByKey($name)) {\n                    $brick = new DataObject\\Objectbrick\\Definition();\n                    $brick->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($brick, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'fieldcollection' && $item['key'] == $name) {\n                if (!$fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($name)) {\n                    $fieldCollection = new DataObject\\Fieldcollection\\Definition();\n                    $fieldCollection->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'customlayout') {\n                $layoutData = json_decode(base64_decode($data['name']), true);\n                $className = $layoutData['className'];\n                $layoutName = $layoutData['name'];\n\n                if ($item['name'] == $layoutName && $item['className'] == $className) {\n                    $class = DataObject\\ClassDefinition::getByName($className);\n                    if (!$class) {\n                        throw new \\Exception('Class does not exist');\n                    }\n\n                    $classId = $class->getId();\n\n                    $layoutList = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n                    $layoutList->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($layoutName, $classId) {\n                        return $layout->getName() === $layoutName && $layout->getClassId() === $classId;\n                    });\n                    $layoutList = $layoutList->load();\n\n                    $layoutDefinition = null;\n                    if ($layoutList) {\n                        $layoutDefinition = $layoutList[0];\n                    }\n\n                    if (!$layoutDefinition) {\n                        $layoutDefinition = new DataObject\\ClassDefinition\\CustomLayout();\n                        $layoutDefinition->setName($layoutName);\n                        $layoutDefinition->setClassId($classId);\n                    }\n\n                    try {\n                        $layoutDefinition->setDescription($item['description']);\n                        $layoutDef = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($item['layoutDefinitions'], true);\n                        $layoutDefinition->setLayoutDefinitions($layoutDef);\n                        $layoutDefinition->save();\n                    } catch (\\Exception $e) {\n                        Logger::error($e->getMessage());\n\n                        return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-export-prepare\", name=\"bulkexportprepare\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportPrepareAction(Request $request)\n    {\n        $data = $request->get('data');\n\n        Session::useSession(function (AttributeBagInterface $session) use ($data) {\n            $session->set('class_bulk_export_settings', $data);\n        }, 'pimcore_objects');\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/bulk-export\", name=\"bulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportAction(Request $request)\n    {\n        $result = [];\n\n        $fieldCollections = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $fieldCollections = $fieldCollections->load();\n\n        foreach ($fieldCollections as $fieldCollection) {\n            $result[] = [\n                'icon' => 'fieldcollection',\n                'checked' => true,\n                'type' => 'fieldcollection',\n                'name' => $fieldCollection->getKey(),\n                'displayName' => $fieldCollection->getKey(),\n            ];\n        }\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes->setOrder('ASC');\n        $classes->setOrderKey('id');\n        $classes = $classes->load();\n\n        foreach ($classes as $class) {\n            $result[] = [\n                'icon' => 'class',\n                'checked' => true,\n                'type' => 'class',\n                'name' => $class->getName(),\n                'displayName' => $class->getName(),\n            ];\n        }\n\n        $objectBricks = new DataObject\\Objectbrick\\Definition\\Listing();\n        $objectBricks = $objectBricks->load();\n\n        foreach ($objectBricks as $objectBrick) {\n            $result[] = [\n                'icon' => 'objectbricks',\n                'checked' => true,\n                'type' => 'objectbrick',\n                'name' => $objectBrick->getKey(),\n                'displayName' => $objectBrick->getKey(),\n            ];\n        }\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $customLayout) {\n            $class = DataObject\\ClassDefinition::getById($customLayout->getClassId());\n            $displayName = $class->getName() . ' / ' .  $customLayout->getName();\n\n            $result[] = [\n                'icon' => 'custom_views',\n                'checked' => true,\n                'type' => 'customlayout',\n                'name' => $customLayout->getId(),\n                'displayName' => $displayName,\n            ];\n        }\n\n        return new JsonResponse(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/do-bulk-export\", name=\"dobulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function doBulkExportAction(Request $request)\n    {\n        $session = Session::get('pimcore_objects');\n        $list = $session->get('class_bulk_export_settings');\n        $list = json_decode($list, true);\n        $result = [];\n\n        foreach ($list as $item) {\n            if ($item['type'] == 'fieldcollection') {\n                if ($fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($item['name'])) {\n                    $fieldCollectionJson = json_decode(DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection));\n                    $fieldCollectionJson->key = $item['name'];\n                    $result['fieldcollection'][] = $fieldCollectionJson;\n                }\n            } elseif ($item['type'] == 'class') {\n                if ($class = DataObject\\ClassDefinition::getByName($item['name'])) {\n                    $data = json_decode(DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class));\n                    $data->name = $item['name'];\n                    $result['class'][] = $data;\n                }\n            } elseif ($item['type'] == 'objectbrick') {\n                if ($objectBrick = DataObject\\Objectbrick\\Definition::getByKey($item['name'])) {\n                    $objectBrickJson = json_decode(DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick));\n                    $objectBrickJson->key = $item['name'];\n                    $result['objectbrick'][] = $objectBrickJson;\n                }\n            } elseif ($item['type'] == 'customlayout') {\n                if ($customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($item['name'])) {\n                    $classId = $customLayout->getClassId();\n                    $class = DataObject\\ClassDefinition::getById($classId);\n                    $customLayoutJson = json_decode(DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout));\n                    $customLayoutJson->name = $customLayout->getName();\n                    $customLayoutJson->className = $class->getName();\n                    $result['customlayout'][] = $customLayoutJson;\n                }\n            }\n        }\n\n        $result = json_encode($result, JSON_PRETTY_PRINT);\n        $response = new Response($result);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"bulk_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getTreeAction', 'fieldcollectionListAction', 'fieldcollectionTreeAction', 'fieldcollectionGetAction',\n            'getClassDefinitionForColumnConfigAction', 'objectbrickListAction', 'objectbrickTreeAction', 'objectbrickGetAction',\n        ];\n\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n\n    /**\n     * @Route(\"/get-fieldcollection-usages\", name=\"getfieldcollectionusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getFieldcollectionUsagesAction(Request $request)\n    {\n        $key = $request->get('key');\n        $result = [];\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes = $classes->load();\n        foreach ($classes as $class) {\n            $fieldDefs = $class->getFieldDefinitions();\n            foreach ($fieldDefs as $fieldDef) {\n                if ($fieldDef instanceof DataObject\\ClassDefinition\\Data\\Fieldcollections) {\n                    $allowedKeys = $fieldDef->getAllowedTypes();\n                    if (is_array($allowedKeys) && in_array($key, $allowedKeys)) {\n                        $result[] = [\n                            'class' => $class->getName(),\n                            'field' => $fieldDef->getName(),\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-bricks-usages\", name=\"getbrickusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getBrickUsagesAction(Request $request)\n    {\n        $classId = $request->get('classId');\n        $myclass = DataObject\\ClassDefinition::getById($classId);\n\n        $result = [];\n\n        $brickDefinitions = new DataObject\\Objectbrick\\Definition\\Listing();\n        $brickDefinitions = $brickDefinitions->load();\n        foreach ($brickDefinitions as $brickDefinition) {\n            $classes = $brickDefinition->getClassDefinitions();\n            foreach ($classes as $class) {\n                if ($myclass->getName() == $class['classname']) {\n                    $result[] = [\n                        'objectbrick' => $brickDefinition->getKey(),\n                        'field' => $class['fieldname'],\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-icons\", name=\"geticons\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return Response\n     */\n    public function getIconsAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $classId = $request->get('classId');\n\n        $iconDir = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img';\n        $classIcons = rscandir($iconDir . '/object-icons/');\n        $colorIcons = rscandir($iconDir . '/flat-color-icons/');\n        $twemoji = rscandir($iconDir . '/twemoji/');\n\n        $icons = array_merge($classIcons, $colorIcons, $twemoji);\n\n        foreach ($icons as &$icon) {\n            $icon = str_replace(PIMCORE_WEB_ROOT, '', $icon);\n        }\n\n        $event = new GenericEvent($this, [\n            'icons' => $icons,\n            'classId' => $classId,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECT_ICONS_PRE_SEND_DATA);\n        $icons = $event->getArgument('icons');\n\n        $result = [];\n        foreach ($icons as $icon) {\n            $content = file_get_contents(PIMCORE_WEB_ROOT . $icon);\n            $result[] = [\n                'text' => sprintf('<img src=\"data:%s;base64,%s\"/>', mime_content_type(PIMCORE_WEB_ROOT . $icon), base64_encode($content)),\n                'value' => $icon,\n            ];\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-class-identifier\", name=\"suggestclassidentifier\")\n     *\n     * @return Response\n     */\n    public function suggestClassIdentifierAction()\n    {\n        $db = Db::get();\n        $maxId = $db->fetchOne('SELECT MAX(CAST(id AS SIGNED)) FROM classes;');\n\n        $existingIds = $db->fetchFirstColumn('select LOWER(id) from classes');\n\n        $result = [\n            'suggestedIdentifier' => $maxId ? $maxId + 1 : 1,\n            'existingIds' => $existingIds,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-custom-layout-identifier\", name=\"suggestcustomlayoutidentifier\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function suggestCustomLayoutIdentifierAction(Request $request)\n    {\n        $classId = $request->get('classId');\n\n        $identifier = DataObject\\ClassDefinition\\CustomLayout::getIdentifier($classId);\n\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list = $list->load();\n        $existingIds = [];\n        $existingNames = [];\n\n        foreach ($list as $item) {\n            $existingIds[] = $item->getId();\n            if ($item->getClassId() == $classId) {\n                $existingNames[] = $item->getName();\n            }\n        }\n\n        $result = [\n            'suggestedIdentifier' => $identifier,\n            'existingIds' => $existingIds,\n            'existingNames' => $existingNames,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/text-layout-preview\", name=\"textlayoutpreview\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function textLayoutPreviewAction(Request $request)\n    {\n        $objPath = $request->get('previewObject', '');\n        $className = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . $request->get('className');\n        $obj = DataObject::getByPath($objPath) ?? new $className();\n\n        $textLayout = new DataObject\\ClassDefinition\\Layout\\Text();\n\n        $context = [\n          'data' => $request->get('renderingData'),\n        ];\n\n        if ($renderingClass = $request->get('renderingClass')) {\n            $textLayout->setRenderingClass($renderingClass);\n        }\n\n        if ($staticHtml = $request->get('html')) {\n            $textLayout->setHtml($staticHtml);\n        }\n\n        $html = $textLayout->enrichLayoutDefinition($obj, $context)->getHtml();\n\n        $content =\n            \"<html>\\n\" .\n            \"<head>\\n\" .\n            '<style type=\"text/css\">' . \"\\n\" .\n            file_get_contents(PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/css/admin.css') .\n            \"</style>\\n\" .\n            \"</head>\\n\\n\" .\n            \"<body class='objectlayout_element_text'>\\n\" .\n            $html .\n            \"\\n\\n</body>\\n\" .\n            \"</html>\\n\";\n\n        $response = new Response($content);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/video-supported-types\", name=\"videosupportedTypestypes\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function videoAllowedTypesAction(Request $request)\n    {\n        $videoDef = new DataObject\\ClassDefinition\\Data\\Video();\n        $res = [];\n\n        foreach ($videoDef->getSupportedTypes() as $type) {\n            $res[] = [\n                'key' => $type,\n                'value' => $this->trans($type),\n            ];\n        }\n\n        return $this->adminJson($res);\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.klass\");\npimcore.object.classes.klass = Class.create({\n\n    allowedInType: 'object',\n    disallowedDataTypes: [],\n    context: \"class\",\n    uploadRoute: 'pimcore_admin_dataobject_class_importclass',\n    exportRoute: 'pimcore_admin_dataobject_class_exportclass',\n\n    initialize: function (data, parentPanel, reopen, editorPrefix) {\n        this.parentPanel = parentPanel;\n        this.data = data;\n        this.editorPrefix = editorPrefix;\n        this.reopen = reopen;\n\n        this.addTree();\n        this.initLayoutFields();\n        this.addLayout();\n    },\n\n    getUploadUrl: function(){\n        return Routing.generate(this.uploadRoute, {id: this.getId()});\n    },\n\n    getExportUrl: function() {\n        return Routing.generate(this.exportRoute, {id: this.getId()});\n    },\n\n\n    addTree: function() {\n        this.tree = Ext.create('Ext.tree.Panel', {\n            region: \"west\",\n            width: 300,\n            split: true,\n            enableDD: true,\n            autoScroll: true,\n            root: {\n                id: \"0\",\n                root: true,\n                text: t(\"general_settings\"),\n                leaf: true,\n                iconCls: \"pimcore_icon_class\",\n                isTarget: true,\n                className: this.data.name\n            },\n            listeners: this.getTreeNodeListeners(),\n            viewConfig: {\n                plugins: {\n                    ptype: 'treeviewdragdrop',\n                    ddGroup: \"element\"\n                }\n            }\n        });\n        this.tree.getStore().setDefaultRootText(\"\");\n    },\n\n    addLayout: function () {\n\n        this.editpanel = new Ext.Panel({\n            region: \"center\",\n            bodyStyle: \"padding: 10px;\",\n            autoScroll: true\n        });\n\n        var displayId = this.data.key ? this.data.key : this.data.id; // because the field-collections use that also\n\n        var panelButtons = [];\n\n        panelButtons.push({\n            text: t(\"configure_custom_layouts\"),\n            iconCls: \"pimcore_icon_class pimcore_icon_overlay_add\",\n            hidden: this instanceof pimcore.object.fieldcollections.field,\n            handler: this.configureCustomLayouts.bind(this)\n        });\n\n        panelButtons.push({\n            text: t('reload_definition'),\n            handler: this.onRefresh.bind(this),\n            iconCls: \"pimcore_icon_reload\"\n        });\n\n        panelButtons.push({\n            text: t(\"import\"),\n            iconCls: \"pimcore_icon_upload\",\n            handler: this.upload.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n        panelButtons.push({\n            text: t(\"export\"),\n            iconCls: \"pimcore_icon_download\",\n            handler: function() {\n                pimcore.helpers.download(this.getExportUrl());\n            }.bind(this)\n        });\n\n\n        panelButtons.push({\n            text: t(\"save\"),\n            iconCls: \"pimcore_icon_apply\",\n            handler: this.save.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n\n        var name = \"\";\n        if(this.data.name) {\n            name = this.data.name + \" ( ID: \" + displayId + \")\";\n        } else {\n            name = \"ID: \" + displayId;\n        }\n\n        this.panel = new Ext.Panel({\n            border: false,\n            layout: \"border\",\n            closable: true,\n            autoScroll: true,\n            title: name,\n            //id: \"pimcore_class_editor_panel_\" + this.getId(),\n            id: this.editorPrefix + this.getId(),\n            items: [\n                this.tree,\n                this.editpanel\n            ],\n            buttons: panelButtons\n        });\n\n\n        this.parentPanel.getEditPanel().add(this.panel);\n\n        this.editpanel.add(this.getRootPanel());\n        this.setCurrentNode(\"root\");\n        this.parentPanel.getEditPanel().setActiveTab(this.panel);\n\n        pimcore.layout.refresh();\n    },\n\n    configureCustomLayouts: function() {\n        try {\n            new pimcore.object.helpers.customLayoutEditor(this.data);\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getId: function(){\n        return  this.data.id;\n    },\n\n    upload: function() {\n\n        pimcore.helpers.uploadDialog(this.getUploadUrl(), \"Filedata\", function() {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_class_get'),\n                params: {\n                    id: this.data.id\n                },\n                success: function(response) {\n                    this.data = Ext.decode(response.responseText);\n                    this.parentPanel.getEditPanel().removeAll();\n                    this.addTree();\n                    this.initLayoutFields();\n                    this.addLayout();\n                    pimcore.layout.refresh();\n                }.bind(this)\n            });\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    reload: function(response) {\n\n    },\n\n    initLayoutFields: function () {\n\n        if (this.data.layoutDefinitions) {\n            if (this.data.layoutDefinitions.children) {\n                for (var i = 0; i < this.data.layoutDefinitions.children.length; i++) {\n                    this.tree.getRootNode().appendChild(this.recursiveAddNode(this.data.layoutDefinitions.children[i],\n                        this.tree.getRootNode()));\n                }\n                this.tree.getRootNode().expand();\n            }\n        }\n    },\n\n    recursiveAddNode: function (con, scope) {\n\n        var fn = null;\n        var newNode = null;\n\n        if (con.datatype == \"layout\") {\n            fn = this.addLayoutChild.bind(scope, con.fieldtype, con, this.context);\n        }\n        else if (con.datatype == \"data\") {\n            fn = this.addDataChild.bind(scope, con.fieldtype, con, this.context);\n        }\n\n        newNode = fn();\n\n        if (con.children) {\n            for (var i = 0; i < con.children.length; i++) {\n                this.recursiveAddNode(con.children[i], newNode);\n            }\n        }\n\n        return newNode;\n    },\n\n\n    getTreeNodeListeners: function () {\n\n        var listeners = {\n            \"itemclick\" : this.onTreeNodeClick.bind(this),\n            \"itemcontextmenu\": this.onTreeNodeContextmenu.bind(this),\n            \"beforeitemmove\": this.onTreeNodeBeforeMove.bind(this)\n        };\n        return listeners;\n    },\n\n\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n\n        try {\n            this.saveCurrentNode();\n        } catch (e) {\n            console.log(e);\n        }\n\n\n        try {\n            this.editpanel.removeAll();\n\n            if (record.data.editor) {\n\n                if (record.data.editor.datax.locked) {\n                    return;\n                }\n\n                this.editpanel.add(record.data.editor.getLayout());\n\n                this.setCurrentNode(record.data.editor);\n            }\n\n            if (record.data.root) {\n                this.editpanel.add(this.getRootPanel());\n                this.setCurrentNode(\"root\");\n            }\n\n            this.editpanel.updateLayout();\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getDataMenu: function(tree, record, allowedTypes, parentType, editMode) {\n        // get available data types\n        var dataMenu = [];\n        var dataComps = Object.keys(pimcore.object.classes.data);\n        var parentRestrictions;\n        var groups = [];\n        var groupNames = [\"text\",\"numeric\",\"date\",\"select\",\"media\",\"relation\",\"geo\",\"crm\",\"structured\",\"other\"];\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            var dataComp = pimcore.object.classes.data[dataCompName];\n\n            // check for disallowed types\n            var allowed = false;\n\n            if('object' !== typeof dataComp) {\n                if (dataComp.prototype.allowIn[this.allowedInType]) {\n                    allowed = true;\n                }\n            }\n\n            if (!allowed) {\n                continue;\n            }\n\n\n            if (dataComps[i] != \"data\") { // class data is an abstract class => disallow\n                if (in_array(\"data\", allowedTypes[parentType]) || in_array(dataComps[i], allowedTypes[parentType]) ) {\n\n                    // check for restrictions from a parent field (eg. localized fields)\n                    if(in_array(\"data\", allowedTypes[parentType])) {\n                        parentRestrictions = this.getRestrictionsFromParent(record);\n                        if(parentRestrictions != null) {\n                            if(!in_array(dataComps[i], allowedTypes[parentRestrictions])) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    var group = pimcore.object.classes.data[dataComps[i]].prototype.getGroup();\n                    if (!groups[group]) {\n                        if (!in_array(group, groupNames)) {\n                            groupNames.push(group);\n                        }\n                        groups[group] = [];\n                    }\n                    var handler;\n                    if (editMode) {\n                        handler = this.changeDataType.bind(this, tree, record, dataComps[i], true, this.context);\n                    } else {\n                        handler = this.addNewDataChild.bind(this, record, dataComps[i], this.context);\n                    }\n\n                    groups[group].push({\n                        text: pimcore.object.classes.data[dataComps[i]].prototype.getTypeName(),\n                        iconCls: pimcore.object.classes.data[dataComps[i]].prototype.getIconClass(),\n                        handler: handler\n                    });\n                }\n            }\n        }\n\n        for (i = 0; i < groupNames.length; i++) {\n            if (groups[groupNames[i]] && groups[groupNames[i]].length > 0) {\n                dataMenu.push(new Ext.menu.Item({\n                    text: t(groupNames[i]),\n                    iconCls: \"pimcore_icon_data_group_\" + groupNames[i],\n                    hideOnClick: false,\n                    menu: groups[groupNames[i]]\n                }));\n            }\n        }\n        return dataMenu;\n    },\n\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        e.stopEvent();\n        tree.select();\n\n        var menu = new Ext.menu.Menu();\n\n        var allowedTypes = pimcore.object.helpers.layout.getAllowedTypes(this);\n\n        var dataComps = Object.keys(pimcore.object.classes.data);\n\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            if ('object' === typeof pimcore.object.classes.data[dataCompName]) {\n                continue;\n            }\n            var component = pimcore.object.classes.data[dataCompName];\n            if(component.prototype.allowIn['localizedfield']) {\n                allowedTypes.localizedfields.push(dataCompName);\n            }\n\n            if(component.prototype.allowIn['block']) {\n                allowedTypes.block.push(dataCompName);\n            }\n        }\n\n\n        // the child-type \"data\" is a placehoder for all data components\n\n\n        var parentType = \"root\";\n\n        if (record.data.editor) {\n            parentType = record.data.editor.type;\n        }\n\n        var changeTypeAllowed = false;\n        if (record.data.type == \"data\") {\n            changeTypeAllowed = true;\n        }\n\n        var childrenAllowed = false;\n        if (allowedTypes[parentType] && allowedTypes[parentType].length > 0) {\n            childrenAllowed = true;\n        }\n\n        if (childrenAllowed || changeTypeAllowed) {\n            // get available layouts\n            var layoutMenu = [];\n            var layouts = Object.keys(pimcore.object.classes.layout);\n\n            for (var i = 0; i < layouts.length; i++) {\n                if (layouts[i] != \"layout\") {\n                    if (in_array(layouts[i], allowedTypes[parentType])) {\n                        layoutMenu.push({\n                            text: pimcore.object.classes.layout[layouts[i]].prototype.getTypeName(),\n                            iconCls: pimcore.object.classes.layout[layouts[i]].prototype.getIconClass(),\n                            handler: function (record, type, context) {\n                                var newNode = this.addLayoutChild.bind(record, type, null, context)();\n                                newNode.getOwnerTree().getSelectionModel().select(newNode);\n                                this.onTreeNodeClick(null, newNode);\n                            }.bind(this, record, layouts[i], this.context)\n                        });\n                    }\n\n                }\n            }\n\n            var getDataMenu = this.getDataMenu.bind(this, tree, record);\n            var addDataMenu = getDataMenu(allowedTypes, parentType, false);\n\n            if (layoutMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_layout_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: layoutMenu\n                }));\n            }\n\n            if (addDataMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_data_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: addDataMenu\n                }));\n            }\n\n            if (changeTypeAllowed) {\n                var changeDataMenu = getDataMenu(allowedTypes, record.parentNode.data.editor.type, true);\n                menu.add(new Ext.menu.Item({\n                    text: t('convert_to'),\n                    iconCls: \"pimcore_icon_convert\",\n                    hideOnClick: false,\n                    menu: changeDataMenu\n                }));\n            }\n\n            if (record.data.type == \"data\") {\n                menu.add(new Ext.menu.Item({\n                    text: t('clone'),\n                    iconCls: \"pimcore_icon_clone\",\n                    hideOnClick: true,\n                    handler: this.changeDataType.bind(this, tree, record, record.data.editor.type, false, this.context)\n                }));\n            }\n\n            menu.add(new Ext.menu.Item({\n                text: t('copy'),\n                iconCls: \"pimcore_icon_copy\",\n                hideOnClick: true,\n                handler: this.copyNode.bind(this, tree, record)\n            }));\n\n            if (childrenAllowed) {\n                if (pimcore && pimcore.classEditor && pimcore.classEditor.clipboard) {\n                    menu.add(new Ext.menu.Item({\n                        text: t('paste'),\n                        iconCls: \"pimcore_icon_paste\",\n                        hideOnClick: true,\n                        handler: this.dropNode.bind(this, tree, record)\n                    }));\n                }\n            }\n        }\n\n        var deleteAllowed = true;\n\n        if (record.data.editor) {\n            if (record.data.editor.datax.locked) {\n                deleteAllowed = false;\n            }\n        }\n\n        if (this.id != 0 && deleteAllowed) {\n            menu.add(new Ext.menu.Item({\n                text: t('delete'),\n                iconCls: \"pimcore_icon_delete\",\n                handler: this.removeChild.bind(this, tree, record)\n            }));\n        }\n\n        menu.showAt(e.pageX, e.pageY);\n    },\n\n    getRestrictionsFromParent: function (node) {\n        if(in_array(node.data.editor.type, ['localizedfields', 'block'])) {\n            return node.data.editor.type;\n        } else {\n            if(node.parentNode && node.parentNode.getDepth() > 0) {\n                var parentType = this.getRestrictionsFromParent(node.parentNode);\n                if(parentType != null) {\n                    return parentType;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    onTreeNodeBeforeMove: function (node, oldParent, newParent, index, eOpts ) {\n        return pimcore.helpers.treeDragDropValidate(node, oldParent, newParent);\n    },\n\n    cloneNode:  function(tree, node) {\n        var theReference = this;\n        var nodeLabel = node.data.text;\n        var nodeType = node.data.type;\n\n        var config = {\n            text: nodeLabel,\n            type: nodeType,\n            leaf: node.data.leaf,\n            expanded: node.data.expanded\n        };\n\n\n        config.listeners = theReference.getTreeNodeListeners();\n\n        if (node.data.editor) {\n            config.iconCls = node.data.editor.getIconClass();\n        }\n\n        var newNode = node.createNode(config);\n\n        var theData = {};\n\n        if (node.data.editor) {\n            theData = Ext.apply(theData, node.data.editor.datax);\n        }\n\n        if (node.data.editor) {\n            var definitions = newNode.data.editor = pimcore.object.classes[nodeType];\n            var editorType = node.data.editor.type;\n            var editor = definitions[editorType];\n\n            newNode.data.editor = new editor(newNode, theData);\n        }\n\n        if (nodeType == \"data\") {\n            var availableFields = newNode.data.editor.availableSettingsFields;\n            for (var i = 0; i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (node.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        newNode.data.editor.datax[field] = node.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor.applySpecialData(node.data.editor);\n        }\n\n\n        var len = node.childNodes ? node.childNodes.length : 0;\n\n        var i = 0;\n\n        // Move child nodes across to the copy if required\n        for (i = 0; i < len; i++) {\n            var childNode = node.childNodes[i];\n            var clonedChildNode = this.cloneNode(tree, childNode);\n\n            newNode.appendChild(clonedChildNode);\n        }\n        return newNode;\n    },\n\n\n    copyNode: function(tree, record) {\n        if (!pimcore.classEditor) {\n            pimcore.classEditor = {};\n        }\n\n        var newNode = this.cloneNode(tree, record);\n        pimcore.classEditor.clipboard = newNode;\n\n    },\n\n    dropNode: function(tree, record) {\n        var node = pimcore.classEditor.clipboard;\n        var newNode = this.cloneNode(tree, node);\n\n        record.appendChild(newNode);\n        tree.updateLayout();\n    },\n\n\n    setCurrentNode: function (cn) {\n        this.currentNode = cn;\n    },\n\n    saveCurrentNode: function () {\n        if (this.currentNode) {\n            if (this.currentNode != \"root\") {\n                this.currentNode.applyData();\n            }  else {\n                // save root node data\n                var items = this.rootPanel.queryBy(function(item) {\n                    if (item == this.compositeIndicesPanel) {\n                        return false;\n                    }\n                    return true;\n                });\n\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    if (typeof item.getValue == \"function\") {\n                        let value = item.getValue();\n                        if (typeof item.config.xtype !== 'undefined' && item.config.xtype === 'textfield') {\n                            value = Ext.util.Format.htmlEncode(value);\n                        }\n\n                        this.data[item.name] = value;\n                    }\n                }\n\n                if (this.compositeIndicesPanel) {\n                    this.collectCompositeIndices();\n                }\n            }\n        }\n    },\n\n    collectCompositeIndices: function() {\n        var indexData = [];\n        for(let s=0; s<this.compositeIndicesPanel.items.items.length; s++) {\n            var entry = this.compositeIndicesPanel.items.items[s];\n            var items = entry.queryBy(function(item) {\n                return true;\n            });\n\n            var indexItem = {};\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (typeof item.getValue == \"function\") {\n                    indexItem[item.name] = item.getValue();\n                }\n            }\n            indexData.push(indexItem);\n        }\n\n        this.data[\"compositeIndices\"] = indexData;\n    },\n\n    getRootPanel: function () {\n        this.allowInheritance = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_inherit\"),\n            name: \"allowInherit\",\n            checked: this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.allowVariants.setDisabled(false);\n                    } else {\n                        this.allowVariants.setValue(false);\n                        this.allowVariants.setDisabled(true);\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n\n        this.allowVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_variants\"),\n            name: \"allowVariants\",\n            checked: this.data.allowVariants,\n            disabled: !this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.showVariants.setDisabled(false);\n                    } else {\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.showVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"show_variants\"),\n            name: \"showVariants\",\n            checked: this.data.showVariants,\n            disabled: !this.data.allowInherit\n        });\n\n        var getPhpClassName = function (name) {\n            return \"Pimcore\\\\Model\\\\DataObject\\\\\" + ucfirst(name);\n        };\n\n        var iconStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_geticons'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"text\", \"value\"]\n        });\n\n        var iconField = new Ext.form.field.Text({\n            id: \"iconfield-\" + this.getId(),\n            name: \"icon\",\n            width: 396,\n            renderer: Ext.util.Format.htmlEncode,\n            value: this.data.icon,\n            listeners: {\n                \"afterrender\": function (el) {\n                    el.inputEl.applyStyles(\"background:url(\" + el.getValue() + \") right center no-repeat;\");\n                }\n            }\n        });\n\n        this.compositeIndexTypeStore = new Ext.data.ArrayStore({\n            data: [['query'], ['localized_query'],['store'], ['localized_store']],\n            fields: ['value']\n        });\n\n        var suggestedColumns = [];\n        var store = this.tree.getStore();\n        var data = store.getData();\n        for (let i = 0; i < data.items.length; i++) {\n            let record = data.items[i];\n            if (record.data.type == \"data\") {\n                suggestedColumns.push([record.data.text]);\n            }\n        }\n\n        this.tagstore = new Ext.data.ArrayStore({\n            data: suggestedColumns,\n            fields: ['value']\n        });\n\n        this.compositeIndicesPanel = new Ext.Panel({\n            autoScroll: true\n        });\n\n        this.rootPanel = new Ext.form.FormPanel({\n            title: '<b>' + t(\"general_settings\") + '</b>',\n            bodyStyle: 'padding: 10px;',\n            autoScroll: true,\n            defaults: {\n                labelWidth: 200\n            },\n            items: [\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"name\"),\n                    name: \"name\",\n                    width: 500,\n                    enableKeyEvents: true,\n                    value: this.data.name,\n                    renderer: Ext.util.Format.htmlEncode,\n                    listeners: {\n                        keyup: function (el) {\n                            this.rootPanel.getComponent(\"phpClassName\").setValue(getPhpClassName(el.getValue()))\n                        }.bind(this)\n                    }\n                },\n                {\n                    xtype: \"textarea\",\n                    fieldLabel: t(\"description\"),\n                    name: \"description\",\n                    width: 500,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.description\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"unique_identifier\"),\n                    disabled: true,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.id,\n                    width: 500\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"PHP Class Name\"),\n                    name: \"phpClassName\",\n                    itemId: \"phpClassName\",\n                    width: 500,\n                    disabled: true,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: getPhpClassName(this.data.name)\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"parent_php_class\"),\n                    name: \"parentClass\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.parentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    width: 600,\n                    name: \"implementsInterfaces\",\n                    fieldLabel: t(\"implements_interfaces\"),\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.implementsInterfaces\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"use_traits\"),\n                    name: \"useTraits\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.useTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_parent_php_class\"),\n                    name: \"listingParentClass\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.listingParentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_use_traits\"),\n                    name: \"listingUseTraits\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.listingUseTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"link_generator_reference\"),\n                    name: \"linkGeneratorReference\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.linkGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_generator_reference\"),\n                    name: \"previewGeneratorReference\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.previewGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_url\"),\n                    name: \"previewUrl\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.previewUrl\n                },\n                {\n                    xtype: \"fieldcontainer\",\n                    layout: \"hbox\",\n                    fieldLabel: t(\"icon\"),\n                    defaults: {\n                        labelWidth: 200\n                    },\n                    items: [\n                        iconField,\n                        {\n                            xtype: \"combobox\",\n                            store: iconStore,\n                            width: 50,\n                            valueField: 'value',\n                            displayField: 'text',\n                            listeners: {\n                                select: function (ele, rec, idx) {\n                                    var icon = ele.container.down(\"#iconfield-\" + this.getId());\n                                    var newValue = rec.data.value;\n                                    icon.component.setValue(newValue);\n                                    icon.component.inputEl.applyStyles(\"background:url(\" + newValue + \") right center no-repeat;\");\n                                    return newValue;\n                                }.bind(this)\n                            }\n                        },\n                        {\n                            iconCls: \"pimcore_icon_refresh\",\n                            xtype: \"button\",\n                            tooltip: t(\"refresh\"),\n                            handler: function(iconField) {\n                                iconField.inputEl.applyStyles(\"background:url(\" + iconField.getValue() + \") right center no-repeat;\");\n                            }.bind(this, iconField)\n                        },\n                        {\n                            xtype: \"button\",\n                            iconCls: \"pimcore_icon_icons\",\n                            text: t('icon_library'),\n                            handler: function () {\n                                pimcore.helpers.openGenericIframeWindow(\"icon-library\", Routing.generate('pimcore_admin_misc_iconlist'), \"pimcore_icon_icons\", t(\"icon_library\"));\n                            }\n                        }\n                    ]\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"group\"),\n                    name: \"group\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.group\n                },\n                this.allowInheritance,\n                this.allowVariants,\n                this.showVariants,\n                {\n                    xtype: \"label\",\n                    text: t(\"generate_type_declarations\"),\n                    cls: 'pimcore_deprecated'\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: `(${t(\"deprecated\")})`,\n                    name: \"generateTypeDeclarations\",\n                    checked: this.data.generateTypeDeclarations,\n                    cls: 'pimcore_cb_middle_two_lines'\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_applogger_tab\"),\n                    name: \"showAppLoggerTab\",\n                    checked: this.data.showAppLoggerTab\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_fieldlookup\"),\n                    name: \"showFieldLookup\",\n                    checked: this.data.showFieldLookup\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"enable_grid_locking\"),\n                    name: \"enableGridLocking\",\n                    checked: this.data.enableGridLocking\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"encrypt_data\"),\n                    name: \"encryption\",\n                    style: 'margin: 0',\n                    checked: this.data.encryption\n                },\n                {\n                    xtype: 'container',\n                    html: t('encrypt_data_description'),\n                    style: 'margin-bottom:10px'\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('visibility_of_system_properties') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.id\",\n                    checked: this.data.propertyVisibility.grid.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.id\",\n                    checked: this.data.propertyVisibility.search.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.key\",\n                    checked: this.data.propertyVisibility.grid.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.key\",\n                    checked: this.data.propertyVisibility.search.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.path\",\n                    checked: this.data.propertyVisibility.grid.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.path\",\n                    checked: this.data.propertyVisibility.search.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.published\",\n                    checked: this.data.propertyVisibility.grid.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.published\",\n                    checked: this.data.propertyVisibility.search.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.modificationDate\",\n                    checked: this.data.propertyVisibility.grid.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.modificationDate\",\n                    checked: this.data.propertyVisibility.search.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.creationDate\",\n                    checked: this.data.propertyVisibility.grid.creationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.creationDate\",\n                    checked: this.data.propertyVisibility.search.creationDate\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('composite_indices') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: 'button',\n                    text: t('add'),\n                    iconCls: \"pimcore_icon_add\",\n                    handler: function () {\n                        this.addCompositeIndex();\n                    }.bind(this)\n                },\n                this.compositeIndicesPanel,\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('uses_these_bricks') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                this.getBricksGrid()\n\n            ]\n        });\n\n        if (this.data.compositeIndices) {\n            for (let i = 0; i < this.data.compositeIndices.length; i++) {\n                let indexData = this.data.compositeIndices[i];\n                this.addCompositeIndex(indexData);\n            }\n        }\n\n        this.rootPanel.on(\"afterrender\", function() {\n            this.usagesStore.reload();\n        }.bind(this));\n\n        return this.rootPanel;\n    },\n\n    addCompositeIndex: function(data) {\n        data = data || {};\n        var keyField = {\n            xtype: 'textfield',\n            name: \"index_key\",\n            fieldLabel: t(\"key\"),\n            labelWidth: 100,\n            width: 250,\n            value: data.index_key\n        };\n\n        //fixes data to match store model\n        const indexesArray = [];\n        if(data.index_columns){\n            Object.values(data.index_columns).forEach(column => {\n                indexesArray.push({id: column, value: column});\n            });\n        }  \n\n        var tagsField = new Ext.form.field.Tag({\n            name: \"index_columns\",\n            width:550,\n            resizable: true,\n            minChars: 2,\n            store: this.tagstore,\n            fieldLabel: t(\"columns\"),\n            value: indexesArray,\n            draggable: true,\n            displayField: 'value',\n            valueField: 'value',\n            forceSelection: false,\n            delimiter: '\\x01',\n            createNewOnEnter: true,\n            componentCls: 'superselect-no-drop-down',\n            valueParam: indexesArray\n        });\n\n        var removeButton = new Ext.button.Button({\n            iconCls: \"pimcore_icon_minus\",\n            style: \"margin-left: 10px\"\n        });\n\n        var typeCombo = {\n            xtype: 'combo',\n            name: \"index_type\",\n            triggerAction: \"all\",\n            editable: true,\n            queryMode: 'local',\n            autoComplete: false,\n            forceSelection: true,\n            selectOnFocus: true,\n            fieldLabel: t(\"table\"),\n            store: this.compositeIndexTypeStore,\n            width: 250,\n            displayField: 'value',\n            valueField: 'value',\n            value: data.index_type ? data.index_type : \"query\",\n            labelWidth: 70,\n            style: \"margin-left: 10px\"\n        };\n\n        var keyEntry = new Ext.form.FieldContainer({\n            layout: 'hbox',\n            border: false,\n            items: [keyField, typeCombo, removeButton]\n        });\n\n\n        var entry = new Ext.form.FieldContainer({\n            layout: 'vbox',\n            border: false,\n            items: [keyEntry, tagsField]\n        });\n\n\n        removeButton.addListener(\"click\", function() {\n            this.compositeIndicesPanel.remove(entry);\n        }.bind(this, entry));\n\n        this.compositeIndicesPanel.add(entry);\n    },\n\n    getBricksGrid: function() {\n        this.usagesStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_getbrickusages'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"objectbrick\", \"field\"]\n        });\n\n        var usagesGrid = new Ext.grid.GridPanel({\n            frame: false,\n            autoScroll: true,\n            store: this.usagesStore,\n            columnLines: true,\n            stripeRows: true,\n            plugins: ['gridfilters'],\n            width: 600,\n            columns: [\n                {text: t('objectbrick'), sortable: true, dataIndex: 'objectbrick', filter: 'string', flex: 1},\n                {text: t('field'), sortable: true, dataIndex: 'field', filter: 'string', flex: 1}\n            ],\n            viewConfig: {\n                forceFit: true\n            }\n        });\n        return usagesGrid;\n\n    },\n\n    addLayoutChild: function (type, initData, context) {\n\n        var nodeLabel = t(type);\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"layout\",\n            iconCls: pimcore.object.classes.layout[type].prototype.getIconClass(),\n            leaf: false,\n            expandable: false,\n            expanded: true,\n        };\n        newNode = this.appendChild(newNode);\n\n        //to hide or show the expanding icon depending if children are available or not\n        newNode.addListener('remove', function(node, removedNode, isMove) {\n            if(!node.hasChildNodes()) {\n                node.set('expandable', false);\n            }\n        });\n        newNode.addListener('append', function(node) {\n            node.set('expandable', true);\n        });\n\n\n        var editor = new pimcore.object.classes.layout[type](newNode, initData);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    addNewDataChild: function (record, type, context) {\n        var node = this.addDataChild.bind(record, type, {}, context)();\n        node.getOwnerTree().getSelectionModel().select(node);\n        this.onTreeNodeClick(null, node);\n\n        var result = this.editpanel.query('field[name=name]');\n        if(result.length && typeof result[0]['focus'] == 'function') {\n            result[0].focus();\n        }\n    },\n\n    addDataChild: function (type, initData, context) {\n\n        var nodeLabel = '';\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"data\",\n            leaf: true,\n            iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n        };\n\n        if (type == \"localizedfields\" || type == \"block\") {\n            newNode.leaf = false;\n            newNode.expanded = true;\n            newNode.expandable = false;\n        }\n\n        newNode = this.appendChild(newNode);\n\n        var editor = new pimcore.object.classes.data[type](newNode, initData);\n        editor.setContext(context);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    changeDataType: function (tree, record, type, removeExisting, context) {\n        try {\n            this.saveCurrentNode();\n\n            var nodeLabel = record.data.text;\n\n            var theData = {};\n\n            theData.name = nodeLabel;\n            theData.datatype = \"data\";\n            theData.fieldtype = type;\n\n            if (!removeExisting) {\n                var matches = nodeLabel.match(/\\d+$/);\n\n                if (matches) {\n                    var number = matches[0];\n\n                    var numberLength = number.length;\n                    number = parseInt(number);\n                    number = number + 1;\n\n                    var l = nodeLabel.length;\n\n                    nodeLabel = nodeLabel.substring(0, l - numberLength);\n                } else {\n                    number = 1;\n                }\n                nodeLabel = nodeLabel + number;\n            }\n\n\n            var parentNode = record.parentNode;\n\n            var newNode = {\n                text: nodeLabel,\n                type: \"data\",\n                leaf: true,\n                iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n            };\n\n            newNode = parentNode.createNode(newNode);\n\n            if (!removeExisting) {\n                theData.name = nodeLabel;\n            }\n\n            var editor = new pimcore.object.classes.data[type](newNode, theData);\n            editor.setContext(context);\n            newNode = record.parentNode.insertBefore(newNode, record);\n\n            var availableFields = editor.availableSettingsFields;\n            for (var i = 0;  i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (record.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        editor.datax[field] = record.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor = editor;\n            newNode.data.editor.applySpecialData(record.data.editor);\n\n\n            if (removeExisting) {\n                parentNode.removeChild(record);\n\n            } else {\n                parentNode.insertBefore(record, newNode);\n            }\n\n            //newNode.select();\n            var f = this.onTreeNodeClick.bind(this, newNode.getOwnerTree(), newNode);\n            f();\n\n            var ownerTree = newNode.getOwnerTree();\n            var selModel = ownerTree.getSelectionModel();\n            selModel.select(newNode);\n\n\n            return newNode;\n        } catch (e) {\n         console.log(e);\n        }\n    },\n\n    removeChild: function (tree, record) {\n        if (this.id != 0) {\n            if (this.currentNode == record.data.editor) {\n                this.currentNode = null;\n                var rootNode = this.tree.getRootNode();\n                var f = this.onTreeNodeClick.bind(this, this.tree, rootNode);\n                f();\n            }\n            record.remove();\n        }\n    },\n\n    getNodeData: function (node) {\n\n        var data = {};\n\n        if (node.data.editor) {\n            if (typeof node.data.editor.getData == \"function\") {\n                data = node.data.editor.getData();\n                data.invalidFieldError = null;\n                data.name = trim(data.name);\n\n                // field specific validation\n                var fieldValidation = true;\n                if(typeof node.data.editor.isValid == \"function\") {\n                    fieldValidation = node.data.editor.isValid();\n                }\n\n                var view = this.tree.getView();\n                // check if the name is unique, localizedfields can be used more than once\n                var nodeEl = Ext.fly(view.getNodeByRecord(node));\n\n                var containerAwareDataName = data.name;\n                var parentNode = node.parentNode;\n                while (parentNode) {\n                    if (parentNode.data.editor && Ext.isFunction(parentNode.data.editor.getData)) {\n                        var parentData = parentNode.data.editor.getData();\n                        if (parentData.datatype == \"data\" && parentNode.data.editor.type == \"block\") {\n                            containerAwareDataName = \"block-\" + parentData.name + \"-\" + containerAwareDataName;\n                            break;\n                        }\n                    }\n\n                    parentNode = parentNode.parentNode;\n                }\n\n                if ((fieldValidation && in_arrayi(containerAwareDataName,this.usedFieldNames) == false) || data.name == \"localizedfields\" && data.fieldtype == \"localizedfields\") {\n\n                    if(data.datatype == \"data\") {\n                        this.usedFieldNames.push(containerAwareDataName);\n                    }\n\n                    if(nodeEl) {\n                        nodeEl.removeCls(\"tree_node_error\");\n                    }\n                }\n                else {\n                    if(nodeEl) {\n                        nodeEl.addCls(\"tree_node_error\");\n                    }\n\n                    var invalidFieldsText = t(\"class_field_name_error\") + \": '\" + data.name + \"'\";\n\n                    if (data.invalidFieldError) {\n                        invalidFieldsText = invalidFieldsText + \" (\" + data.invalidFieldError + \")\";\n                    }\n\n                    if(node.data.editor.invalidFieldNames){\n                        invalidFieldsText = t(\"reserved_field_names_error\")\n                            +(implode(',',node.data.editor.forbiddenNames));\n                    }\n\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"some_fields_cannot_be_saved\"), \"error\",\n                        invalidFieldsText);\n\n                    this.getDataSuccess = false;\n                    return false;\n                }\n            }\n        }\n\n        data.children = null;\n        if (node.childNodes.length > 0) {\n            data.children = [];\n\n            for (var i = 0; i < node.childNodes.length; i++) {\n                data.children.push(this.getNodeData(node.childNodes[i]));\n            }\n        }\n\n        return data;\n    },\n\n    getData: function () {\n\n        this.getDataSuccess = true;\n\n        this.usedFieldNames = [];\n\n        var rootNode = this.tree.getRootNode();\n        var nodeData = this.getNodeData(rootNode);\n\n        return nodeData;\n    },\n\n    save: function () {\n\n        this.saveCurrentNode();\n\n        var isValidName = /^[a-zA-Z][a-zA-Z0-9]+$/;\n\n        if (this.data[\"name\"].length > 2 &&\n            isValidName.test(this.data[\"name\"]) &&\n            !in_arrayi(this.data[\"name\"], this.parentPanel.forbiddenNames)\n        ) {\n            delete this.data.layoutDefinitions;\n\n            var m = Ext.encode(this.getData());\n            var n = Ext.encode(this.data);\n\n            if (this.getDataSuccess) {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_class_save'),\n                    method: \"PUT\",\n                    params: {\n                        configuration: m,\n                        values: n,\n                        id: this.data.id\n                    },\n                    success: this.saveOnComplete.bind(this),\n                    failure: this.saveOnError.bind(this)\n                });\n            }\n        } else {\n            Ext.Msg.alert(' ', t('invalid_class_name'));\n        }\n    },\n\n    saveOnComplete: function (response) {\n\n        try {\n            var res = Ext.decode(response.responseText);\n            if(res.success) {\n                // refresh all class stores\n                this.parentPanel.tree.getStore().load();\n                pimcore.globalmanager.get(\"object_types_store\").load();\n                pimcore.globalmanager.get(\"object_types_store_create\").load();\n\n                // set the current modification date, to detect modifications on the class which are not made here\n                this.data.modificationDate = res['class'].modificationDate;\n\n                pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n            } else {\n                if (res.message) {\n                    pimcore.helpers.showNotification(t(\"error\"), res.message, \"error\");\n                } else {\n                    throw \"save was not successful, see log files in /var/log\";\n                }\n            }\n        } catch (e) {\n            this.saveOnError();\n        }\n\n    },\n\n    saveOnError: function () {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    },\n\n    onRefresh: function() {\n        this.parentPanel.getEditPanel().remove(this.panel);\n        this.reopen();\n    }\n});\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Translation;\nuse Pimcore\\Tool\\Session;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/class\", name=\"pimcore_admin_dataobject_class_\")\n *\n * @internal\n */\nclass ClassController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/get-document-types\", name=\"getdocumenttypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDocumentTypesAction(Request $request)\n    {\n        $documentTypes = Document::getTypes();\n        $typeItems = [];\n        foreach ($documentTypes as $documentType) {\n            $typeItems[] = [\n                'text' => $documentType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-asset-types\", name=\"getassettypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAssetTypesAction(Request $request)\n    {\n        $assetTypes = Asset::getTypes();\n        $typeItems = [];\n        foreach ($assetTypes as $assetType) {\n            $typeItems[] = [\n                'text' => $assetType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-tree\", name=\"gettree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getTreeAction(Request $request)\n    {\n        $defaultIcon = '/bundles/pimcoreadmin/img/flat-color-icons/class.svg';\n\n        $classesList = new DataObject\\ClassDefinition\\Listing();\n        $classesList->setOrderKey('name');\n        $classesList->setOrder('asc');\n        $classes = $classesList->load();\n\n        // filter classes\n        if ($request->get('createAllowed')) {\n            $tmpClasses = [];\n            foreach ($classes as $class) {\n                if ($this->getAdminUser()->isAllowed($class->getId(), 'class')) {\n                    $tmpClasses[] = $class;\n                }\n            }\n            $classes = $tmpClasses;\n        }\n\n        $withId = $request->get('withId');\n        $getClassConfig = function ($class) use ($defaultIcon, $withId) {\n            $text = $class->getname();\n            if ($withId) {\n                $text .= ' (' . $class->getId() . ')';\n            }\n\n            $hasBrickField = false;\n            foreach ($class->getFieldDefinitions() as $fieldDefinition) {\n                if ($fieldDefinition instanceof DataObject\\ClassDefinition\\Data\\Objectbricks) {\n                    $hasBrickField = true;\n\n                    break;\n                }\n            }\n\n            return [\n                'id' => $class->getId(),\n                'text' => $text,\n                'leaf' => true,\n                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,\n                'cls' => 'pimcore_class_icon',\n                'propertyVisibility' => $class->getPropertyVisibility(),\n                'enableGridLocking' => $class->isEnableGridLocking(),\n                'hasBrickField' => $hasBrickField,\n            ];\n        };\n\n        // build groups\n        $groups = [];\n        foreach ($classes as $class) {\n            $groupName = null;\n\n            if ($class->getGroup()) {\n                $type = 'manual';\n                $groupName = $class->getGroup();\n            } else {\n                $type = 'auto';\n                if (preg_match('@^([A-Za-z])([^A-Z]+)@', $class->getName(), $matches)) {\n                    $groupName = $matches[0];\n                }\n\n                if (!$groupName) {\n                    // this is eg. the case when class name uses only capital letters\n                    $groupName = $class->getName();\n                }\n            }\n\n            $groupName = Translation::getByKeyLocalized($groupName, Translation::DOMAIN_ADMIN, true, true);\n\n            if (!isset($groups[$groupName])) {\n                $groups[$groupName] = [\n                    'classes' => [],\n                    'type' => $type,\n                ];\n            }\n            $groups[$groupName]['classes'][] = $class;\n        }\n\n        $treeNodes = [];\n        if (!empty($groups)) {\n            $types = array_column($groups, 'type');\n            array_multisort($types, SORT_ASC, array_keys($groups), SORT_ASC, $groups);\n        }\n\n        if (!$request->get('grouped')) {\n            // list output\n            foreach ($groups as $groupName => $groupData) {\n                foreach ($groupData['classes'] as $class) {\n                    $node = $getClassConfig($class);\n                    if (count($groupData['classes']) > 1 || $groupData['type'] == 'manual') {\n                        $node['group'] = $groupName;\n                    }\n                    $treeNodes[] = $node;\n                }\n            }\n        } else {\n            // create json output\n            foreach ($groups as $groupName => $groupData) {\n                if (count($groupData['classes']) === 1 && $groupData['type'] == 'auto') {\n                    // no group, only one child\n                    $node = $getClassConfig($groupData['classes'][0]);\n                } else {\n                    // group classes\n                    $node = [\n                        'id' => 'folder_' . $groupName,\n                        'text' => $groupName,\n                        'leaf' => false,\n                        'expandable' => true,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'children' => [],\n                    ];\n\n                    foreach ($groupData['classes'] as $class) {\n                        $node['children'][] = $getClassConfig($class);\n                    }\n                }\n\n                $treeNodes[] = $node;\n            }\n        }\n\n        return $this->adminJson($treeNodes);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $class->setFieldDefinitions([]);\n        $isWriteable = $class->isWritable();\n        $class = $class->getObjectVars();\n        $class['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($class);\n    }\n\n    /**\n     * @Route(\"/get-custom-layout\", name=\"getcustomlayout\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            $brickLayoutSeparator = strpos($request->get('id'), '.brick.');\n            if ($brickLayoutSeparator !== false) {\n                $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById(substr($request->get('id'), 0, $brickLayoutSeparator));\n                if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                    $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n                        [\n                            'name' => $customLayout->getName().' '.substr($request->get('id'), $brickLayoutSeparator+strlen('.brick.')),\n                            'userOwner' => $this->getAdminUser()->getId(),\n                            'classId' => $customLayout->getClassId(),\n                        ]\n                    );\n\n                    $customLayout->setId($request->get('id'));\n                    $customLayout->save();\n                }\n            }\n\n            if (!$customLayout) {\n                throw $this->createNotFoundException();\n            }\n        }\n        $isWriteable = $customLayout->isWritable();\n        $customLayout = $customLayout->getObjectVars();\n        $customLayout['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'data' => $customLayout]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $className = $request->get('className');\n        $className = $this->correctClassname($className);\n\n        $classId = $request->get('classIdentifier');\n        $existingClass = DataObject\\ClassDefinition::getById($classId);\n        if ($existingClass) {\n            throw new \\Exception('Class identifier already exists');\n        }\n\n        $class = DataObject\\ClassDefinition::create(\n            ['name' => $className,\n                'userOwner' => $this->getAdminUser()->getId(), ]\n        );\n\n        $class->setId($classId);\n\n        $class->save(true);\n\n        return $this->adminJson(['success' => true, 'id' => $class->getId()]);\n    }\n\n    /**\n     * @Route(\"/add-custom-layout\", name=\"addcustomlayout\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCustomLayoutAction(Request $request)\n    {\n        $layoutId = $request->get('layoutIdentifier');\n        $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId);\n        if ($existingLayout) {\n            throw new \\Exception('Custom Layout identifier already exists');\n        }\n\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n            [\n                'name' => $request->get('layoutName'),\n                'userOwner' => $this->getAdminUser()->getId(),\n                'classId' => $request->get('classId'),\n            ]\n        );\n\n        $customLayout->setId($layoutId);\n        $customLayout->save();\n\n        $isWriteable = $customLayout->isWritable();\n        $data = $customLayout->getObjectVars();\n        $data['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'name' => $customLayout->getName(),\n                                 'data' => $data, ]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function deleteAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if ($class) {\n            $class->delete();\n        }\n\n        return new Response();\n    }\n\n    /**\n     * @Route(\"/delete-custom-layout\", name=\"deletecustomlayout\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLayoutAction(Request $request)\n    {\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $id = $request->get('id');\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($id) {\n            $currentLayoutId = $layout->getId();\n\n            return $currentLayoutId === $id || str_starts_with($currentLayoutId, $id . '.brick.');\n        });\n\n        foreach ($customLayouts->getLayoutDefinitions() as $customLayout) {\n            $customLayout->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/save-custom-layout\", name=\"savecustomlayout\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        $modificationDate = (int)$values['modificationDate'];\n        if ($modificationDate < $customLayout->getModificationDate()) {\n            return $this->adminJson(['success' => false, 'msg' => 'custom_layout_changed']);\n        }\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n            $customLayout->setLayoutDefinitions($layout);\n            $customLayout->setName($values['name']);\n            $customLayout->setDescription($values['description']);\n            $customLayout->setDefault($values['default']);\n            $customLayout->save();\n\n            return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'data' => $customLayout->getObjectVars()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/save\", name=\"save\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function saveAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        // check if the class was changed during editing in the frontend\n        if ($class->getModificationDate() != $values['modificationDate']) {\n            throw new \\Exception('The class was modified during editing, please reload the class and make your changes again');\n        }\n\n        if ($values['name'] != $class->getName()) {\n            $classByName = DataObject\\ClassDefinition::getByName($values['name']);\n            if ($classByName && $classByName->getId() != $class->getId()) {\n                throw new \\Exception('Class name already exists');\n            }\n\n            $values['name'] = $this->correctClassname($values['name']);\n            $class->rename($values['name']);\n        }\n\n        if ($values['compositeIndices']) {\n            foreach ($values['compositeIndices'] as $index => $compositeIndex) {\n                if ($compositeIndex['index_key'] !== ($sanitizedKey = preg_replace('/[^a-za-z0-9_\\-+]/', '', $compositeIndex['index_key']))) {\n                    $values['compositeIndices'][$index]['index_key'] = $sanitizedKey;\n                }\n            }\n        }\n\n        unset($values['creationDate']);\n        unset($values['userOwner']);\n        unset($values['layoutDefinitions']);\n        unset($values['fieldDefinitions']);\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        $class->setValues($values);\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n\n            $class->setLayoutDefinitions($layout);\n\n            $class->setUserModification($this->getAdminUser()->getId());\n            $class->setModificationDate(time());\n\n            $propertyVisibility = [];\n            foreach ($values as $key => $value) {\n                if (preg_match('/propertyVisibility/i', $key)) {\n                    if (preg_match(\"/\\.grid\\./i\", $key)) {\n                        $propertyVisibility['grid'][preg_replace(\"/propertyVisibility\\.grid\\./i\", '', $key)] = (bool) $value;\n                    } elseif (preg_match(\"/\\.search\\./i\", $key)) {\n                        $propertyVisibility['search'][preg_replace(\"/propertyVisibility\\.search\\./i\", '', $key)] = (bool) $value;\n                    }\n                }\n            }\n            if (!empty($propertyVisibility)) {\n                $class->setPropertyVisibility($propertyVisibility);\n            }\n\n            $class->save();\n\n            // set the fielddefinitions to [] because we don't need them in the response\n            $class->setFieldDefinitions([]);\n\n            return $this->adminJson(['success' => true, 'class' => $class]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return string\n     */\n    protected function correctClassname($name)\n    {\n        $name = preg_replace('/[^a-zA-Z0-9_]+/', '', $name);\n        $name = preg_replace('/^[0-9]+/', '', $name);\n\n        return $name;\n    }\n\n    /**\n     * @Route(\"/import-class\", name=\"importclass\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importClassAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, $json, false, true);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/import-custom-layout-definition\", name=\"importcustomlayoutdefinition\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importCustomLayoutDefinitionAction(Request $request)\n    {\n        $success = false;\n        $responseContent = [];\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $importData = $this->decodeJson($json);\n\n        $existingLayout = null;\n        if (isset($importData['name'])) {\n            $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getByName($importData['name']);\n\n            if ($existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                $responseContent['nameAlreadyInUse'] = true;\n            }\n        }\n\n        if (!$existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n            $customLayoutId = $request->get('id');\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($customLayoutId);\n            if ($customLayout) {\n                try {\n                    $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($importData['layoutDefinitions'], true);\n                    $customLayout->setLayoutDefinitions($layout);\n                    if (isset($importData['name']) === true) {\n                        $customLayout->setName($importData['name']);\n                    }\n                    $customLayout->setDescription($importData['description']);\n                    $customLayout->save();\n                    $success = true;\n                } catch (\\Exception $e) {\n                    Logger::error($e->getMessage());\n                }\n            }\n\n            $responseContent['success'] = $success;\n        }\n\n        $response = $this->adminJson($responseContent);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-custom-layout-definitions\", name=\"getcustomlayoutdefinitions\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutDefinitionsAction(Request $request)\n    {\n        $classIds = explode(',', $request->get('classId'));\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($classIds) {\n            return in_array($layout->getClassId(), $classIds) && !str_contains($layout->getId(), '.brick.');\n        });\n        $list = $list->load();\n        $result = [];\n        foreach ($list as $item) {\n            $result[] = [\n                'id' => $item->getId(),\n                'name' => $item->getName() . ' (ID: ' . $item->getId() . ')',\n                'default' => $item->getDefault() ?: 0,\n            ];\n        }\n\n        return $this->adminJson(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/get-all-layouts\", name=\"getalllayouts\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAllLayoutsAction(Request $request)\n    {\n        // get all classes\n        $resultList = [];\n        $mapping = [];\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) {\n            return !str_contains($layout->getId(), '.brick.');\n        });\n        $customLayouts->setOrder(function (DataObject\\ClassDefinition\\CustomLayout $a, DataObject\\ClassDefinition\\CustomLayout $b) {\n            return strcmp($a->getName(), $b->getName());\n        });\n\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $layout) {\n            $mapping[$layout->getClassId()][] = $layout;\n        }\n\n        $classList = new DataObject\\ClassDefinition\\Listing();\n        $classList->setOrder('ASC');\n        $classList->setOrderKey('name');\n        $classList = $classList->load();\n\n        foreach ($classList as $class) {\n            if (isset($mapping[$class->getId()])) {\n                $classMapping = $mapping[$class->getId()];\n                $resultList[] = [\n                    'type' => 'master',\n                    'id' => $class->getId() . '_' . 0,\n                    'name' => $class->getName(),\n                ];\n\n                foreach ($classMapping as $layout) {\n                    $resultList[] = [\n                        'type' => 'custom',\n                        'id' => $class->getId() . '_' . $layout->getId(),\n                        'name' => $class->getName() . ' - ' . $layout->getName(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson(['data' => $resultList]);\n    }\n\n    /**\n     * @Route(\"/export-class\", name=\"exportclass\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportClassAction(Request $request)\n    {\n        $id = $request->get('id');\n        $class = DataObject\\ClassDefinition::getById($id);\n\n        if (!$class instanceof DataObject\\ClassDefinition) {\n            $errorMessage = ': Class with id [ ' . $id . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class);\n\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"class_' . $class->getName() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-custom-layout-definition\", name=\"exportcustomlayoutdefinition\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportCustomLayoutDefinitionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        if ($id) {\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($id);\n            if ($customLayout) {\n                $name = $customLayout->getName();\n                $json = DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout);\n\n                $response = new Response($json);\n                $response->headers->set('Content-type', 'application/json');\n                $response->headers->set('Content-Disposition', 'attachment; filename=\"custom_definition_' . $name . '_export.json\"');\n\n                return $response;\n            }\n        }\n\n        $errorMessage = ': Custom Layout with id [ ' . $id . ' not found. ]';\n        Logger::error($errorMessage);\n\n        throw $this->createNotFoundException($errorMessage);\n    }\n\n    /**\n     * FIELDCOLLECTIONS\n     */\n\n    /**\n     * @Route(\"/fieldcollection-get\", name=\"fieldcollectionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionGetAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-update\", name=\"fieldcollectionupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionUpdateAction(Request $request)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing fieldcollection with same name with different lower/upper cases\n                $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('FieldCollection with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            $fcDef = new DataObject\\Fieldcollection\\Definition();\n            $fcDef->setKey($key);\n            $fcDef->setTitle($title);\n            $fcDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n                $fcDef->setParentClass($values['parentClass']);\n                $fcDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $fcDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $fcDef->setLayoutDefinitions($layout);\n            }\n\n            $fcDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $fcDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-fieldcollection\", name=\"importfieldcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-fieldcollection\", name=\"exportfieldcollection\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        if (!$fieldCollection instanceof DataObject\\Fieldcollection\\Definition) {\n            $errorMessage = ': Field-Collection with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection);\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"fieldcollection_' . $fieldCollection->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/fieldcollection-delete\", name=\"fieldcollectiondelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-tree\", name=\"fieldcollectiontree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $layoutDefinitions = [];\n\n        $definitions = [];\n\n        $allowedTypes = null;\n        if ($request->query->has('allowedTypes')) {\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n        }\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        $currentLayoutId = $request->get('layoutId', null);\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $groups = [];\n        foreach ($list as $item) {\n            if ($allowedTypes && !in_array($item->getKey(), $allowedTypes)) {\n                continue;\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_fieldcollection',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_fieldcollection',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n            'layoutDefinitions' => $layoutDefinitions,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n        $layoutDefinitions = $event->getArgument('layoutDefinitions');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['fieldcollections' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        }\n\n        return $this->adminJson($definitions);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-list\", name=\"fieldcollectionlist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n        $currentLayoutId = $request->get('layoutId');\n\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('allowedTypes')) {\n            $filteredList = [];\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n            foreach ($list as $type) {\n                if (in_array($type->getKey(), $allowedTypes)) {\n                    $filteredList[] = $type;\n\n                    // mainly for objects-meta data-type\n                    $layoutDefinitions = $type->getLayoutDefinitions();\n                    $context = [\n                        'containerType' => 'fieldcollection',\n                        'containerKey' => $type->getKey(),\n                        'outerFieldname' => $request->get('field_name'),\n                    ];\n\n                    $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                    DataObject\\Service::enrichLayoutDefinition($layoutDefinitions, $object, $context);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layoutDefinitions);\n                    }\n                }\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['fieldcollections' => $list]);\n    }\n\n    /**\n     * @Route(\"/get-class-definition-for-column-config\", name=\"getclassdefinitionforcolumnconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getClassDefinitionForColumnConfigAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $objectId = (int)$request->get('oid');\n\n        $filteredDefinitions = DataObject\\Service::getCustomLayoutDefinitionForGridColumnConfig($class, $objectId);\n\n        /** @var DataObject\\ClassDefinition\\Layout $layoutDefinitions */\n        $layoutDefinitions = isset($filteredDefinitions['layoutDefinition']) ? $filteredDefinitions['layoutDefinition'] : false;\n        $filteredFieldDefinition = isset($filteredDefinitions['fieldDefinition']) ? $filteredDefinitions['fieldDefinition'] : false;\n\n        $class->setFieldDefinitions([]);\n\n        $result = [];\n\n        DataObject\\Service::enrichLayoutDefinition($layoutDefinitions);\n\n        $result['objectColumns']['children'] = $layoutDefinitions->getChildren();\n        $result['objectColumns']['nodeLabel'] = 'object_columns';\n        $result['objectColumns']['nodeType'] = 'object';\n\n        // array(\"id\", \"fullpath\", \"published\", \"creationDate\", \"modificationDate\", \"filename\", \"classname\");\n        $systemColumnNames = DataObject\\Concrete::SYSTEM_COLUMN_NAMES;\n        $systemColumns = [];\n        foreach ($systemColumnNames as $systemColumn) {\n            $systemColumns[] = ['title' => $systemColumn, 'name' => $systemColumn, 'datatype' => 'data', 'fieldtype' => 'system'];\n        }\n        $result['systemColumns']['nodeLabel'] = 'system_columns';\n        $result['systemColumns']['nodeType'] = 'system';\n        $result['systemColumns']['children'] = $systemColumns;\n\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        foreach ($list as $brickDefinition) {\n            $classDefs = $brickDefinition->getClassDefinitions();\n            if (!empty($classDefs)) {\n                foreach ($classDefs as $classDef) {\n                    if ($classDef['classname'] == $class->getName()) {\n                        $fieldName = $classDef['fieldname'];\n                        if ($filteredFieldDefinition && !$filteredFieldDefinition[$fieldName]) {\n                            continue;\n                        }\n\n                        $key = $brickDefinition->getKey();\n\n                        $brickLayoutDefinitions = $brickDefinition->getLayoutDefinitions();\n                        $context = [\n                            'containerType' => 'objectbrick',\n                            'containerKey' => $key,\n                            'outerFieldname' => $fieldName,\n                        ];\n                        DataObject\\Service::enrichLayoutDefinition($brickLayoutDefinitions, null, $context);\n\n                        $result[$key]['nodeLabel'] = $key;\n                        $result[$key]['brickField'] = $fieldName;\n                        $result[$key]['nodeType'] = 'objectbricks';\n                        $result[$key]['children'] = $brickLayoutDefinitions->getChildren();\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * OBJECT BRICKS\n     */\n\n    /**\n     * @Route(\"/objectbrick-get\", name=\"objectbrickget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickGetAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/objectbrick-update\", name=\"objectbrickupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickUpdateAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing brick with same name with different lower/upper cases\n                $list = new DataObject\\Objectbrick\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('Brick with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            // now we create a new definition\n            $brickDef = new DataObject\\Objectbrick\\Definition();\n            $brickDef->setKey($key);\n            $brickDef->setTitle($title);\n            $brickDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n\n                $brickDef->setParentClass($values['parentClass']);\n                $brickDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $brickDef->setClassDefinitions($values['classDefinitions']);\n                $brickDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $brickDef->setLayoutDefinitions($layout);\n            }\n\n            $event = new GenericEvent($this, [\n                'brickDefinition' => $brickDef,\n            ]);\n            $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_UPDATE_DEFINITION);\n            $brickDef = $event->getArgument('brickDefinition');\n\n            $brickDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $brickDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-objectbrick\", name=\"importobjectbrick\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($objectBrick, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-objectbrick\", name=\"exportobjectbrick\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        if (!$objectBrick instanceof DataObject\\Objectbrick\\Definition) {\n            $errorMessage = ': Object-Brick with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $xml = DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick);\n        $response = new Response($xml);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"objectbrick_' . $objectBrick->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/objectbrick-delete\", name=\"objectbrickdelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/objectbrick-tree\", name=\"objectbricktree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $context = null;\n        $layoutDefinitions = [];\n        $groups = [];\n        $definitions = [];\n        $fieldname = null;\n        $className = null;\n\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n        }\n\n        foreach ($list as $item) {\n            if ($forObjectEditor) {\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $item->getKey(),\n                    'outerFieldname' => $fieldname,\n                ];\n            }\n            if ($request->query->has('class_id') && $request->query->has('field_name')) {\n                $keep = false;\n                $clsDefs = $item->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $keep = true;\n\n                            continue;\n                        }\n                    }\n                }\n                if (!$keep) {\n                    continue;\n                }\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $layoutId = $request->get('layoutId');\n                    $itemLayoutDefinitions = null;\n                    if ($layoutId) {\n                        $layout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId.'.brick.'.$item->getKey());\n                        if ($layout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $itemLayoutDefinitions = $layout->getLayoutDefinitions();\n                        }\n                    }\n\n                    if ($itemLayoutDefinitions === null) {\n                        $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_objectbricks',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $layout = $item->getLayoutDefinitions();\n\n                    $currentLayoutId = $request->get('layoutId', null);\n\n                    $user = $this->getAdminUser();\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layout);\n                    } elseif ($currentLayoutId) {\n                        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($currentLayoutId.'.brick.'.$item->getKey());\n                        if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $layout = $customLayout->getLayoutDefinitions();\n                        }\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $layout;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_objectbricks',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['objectbricks' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        } else {\n            return $this->adminJson($definitions);\n        }\n    }\n\n    /**\n     * @Route(\"/objectbrick-list\", name=\"objectbricklist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $filteredList = [];\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n\n            foreach ($list as $type) {\n                $clsDefs = $type->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $filteredList[] = $type;\n\n                            continue;\n                        }\n                    }\n                }\n\n                $layout = $type->getLayoutDefinitions();\n\n                $currentLayoutId = $request->get('layoutId', null);\n\n                $user = $this->getAdminUser();\n                if ($currentLayoutId == -1 && $user->isAdmin()) {\n                    DataObject\\Service::createSuperLayout($layout);\n                    $objectData['layout'] = $layout;\n                }\n\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $type->getKey(),\n                    'outerFieldname' => $request->get('field_name'),\n                ];\n\n                $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n                $type->setLayoutDefinitions($layout);\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['objectbricks' => $list]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-import\", name=\"bulkimport\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function bulkImportAction(Request $request)\n    {\n        $result = [];\n\n        $tmpName = $_FILES['Filedata']['tmp_name'];\n        $json = file_get_contents($tmpName);\n\n        $tmpName = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/bulk-import-' . uniqid() . '.tmp';\n        file_put_contents($tmpName, $json);\n\n        Session::useSession(function (AttributeBagInterface $session) use ($tmpName) {\n            $session->set('class_bulk_import_file', $tmpName);\n        }, 'pimcore_objects');\n\n        $json = json_decode($json, true);\n\n        foreach ($json as $groupName => $group) {\n            foreach ($group as $groupItem) {\n                $displayName = null;\n                $icon = null;\n\n                if ($groupName == 'class') {\n                    $name = $groupItem['name'];\n                    $icon = 'class';\n                } elseif ($groupName == 'customlayout') {\n                    $className = $groupItem['className'];\n\n                    $layoutData = ['className' => $className, 'name' => $groupItem['name']];\n                    $name = base64_encode(json_encode($layoutData));\n                    $displayName = $className . ' / ' . $groupItem['name'];\n                    $icon = 'custom_views';\n                } else {\n                    if ($groupName == 'objectbrick') {\n                        $icon = 'objectbricks';\n                    } elseif ($groupName == 'fieldcollection') {\n                        $icon = 'fieldcollection';\n                    }\n                    $name = $groupItem['key'];\n                }\n\n                if (!$displayName) {\n                    $displayName = $name;\n                }\n                $result[] = ['icon' => $icon, 'checked' => true, 'type' => $groupName, 'name' => $name, 'displayName' => $displayName];\n            }\n        }\n\n        $response = $this->adminJson(['success' => true, 'data' => $result]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-commit\", name=\"bulkcommit\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function bulkCommitAction(Request $request)\n    {\n        $data = json_decode($request->get('data'), true);\n\n        $session = Session::get('pimcore_objects');\n        $filename = $session->get('class_bulk_import_file');\n        $json = @file_get_contents($filename);\n        $json = json_decode($json, true);\n\n        $type = $data['type'];\n        $name = $data['name'];\n        $list = $json[$type];\n\n        foreach ($list as $item) {\n            unset($item['creationDate']);\n            unset($item['modificationDate']);\n            unset($item['userOwner']);\n            unset($item['userModification']);\n\n            if ($type == 'class' && $item['name'] == $name) {\n                $class = DataObject\\ClassDefinition::getByName($name);\n                if (!$class) {\n                    $class = new DataObject\\ClassDefinition();\n                    $class->setName($name);\n                }\n                $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'objectbrick' && $item['key'] == $name) {\n                if (!$brick = DataObject\\Objectbrick\\Definition::getByKey($name)) {\n                    $brick = new DataObject\\Objectbrick\\Definition();\n                    $brick->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($brick, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'fieldcollection' && $item['key'] == $name) {\n                if (!$fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($name)) {\n                    $fieldCollection = new DataObject\\Fieldcollection\\Definition();\n                    $fieldCollection->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'customlayout') {\n                $layoutData = json_decode(base64_decode($data['name']), true);\n                $className = $layoutData['className'];\n                $layoutName = $layoutData['name'];\n\n                if ($item['name'] == $layoutName && $item['className'] == $className) {\n                    $class = DataObject\\ClassDefinition::getByName($className);\n                    if (!$class) {\n                        throw new \\Exception('Class does not exist');\n                    }\n\n                    $classId = $class->getId();\n\n                    $layoutList = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n                    $layoutList->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($layoutName, $classId) {\n                        return $layout->getName() === $layoutName && $layout->getClassId() === $classId;\n                    });\n                    $layoutList = $layoutList->load();\n\n                    $layoutDefinition = null;\n                    if ($layoutList) {\n                        $layoutDefinition = $layoutList[0];\n                    }\n\n                    if (!$layoutDefinition) {\n                        $layoutDefinition = new DataObject\\ClassDefinition\\CustomLayout();\n                        $layoutDefinition->setName($layoutName);\n                        $layoutDefinition->setClassId($classId);\n                    }\n\n                    try {\n                        $layoutDefinition->setDescription($item['description']);\n                        $layoutDef = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($item['layoutDefinitions'], true);\n                        $layoutDefinition->setLayoutDefinitions($layoutDef);\n                        $layoutDefinition->save();\n                    } catch (\\Exception $e) {\n                        Logger::error($e->getMessage());\n\n                        return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-export-prepare\", name=\"bulkexportprepare\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportPrepareAction(Request $request)\n    {\n        $data = $request->get('data');\n\n        Session::useSession(function (AttributeBagInterface $session) use ($data) {\n            $session->set('class_bulk_export_settings', $data);\n        }, 'pimcore_objects');\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/bulk-export\", name=\"bulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportAction(Request $request)\n    {\n        $result = [];\n\n        $fieldCollections = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $fieldCollections = $fieldCollections->load();\n\n        foreach ($fieldCollections as $fieldCollection) {\n            $result[] = [\n                'icon' => 'fieldcollection',\n                'checked' => true,\n                'type' => 'fieldcollection',\n                'name' => $fieldCollection->getKey(),\n                'displayName' => $fieldCollection->getKey(),\n            ];\n        }\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes->setOrder('ASC');\n        $classes->setOrderKey('id');\n        $classes = $classes->load();\n\n        foreach ($classes as $class) {\n            $result[] = [\n                'icon' => 'class',\n                'checked' => true,\n                'type' => 'class',\n                'name' => $class->getName(),\n                'displayName' => $class->getName(),\n            ];\n        }\n\n        $objectBricks = new DataObject\\Objectbrick\\Definition\\Listing();\n        $objectBricks = $objectBricks->load();\n\n        foreach ($objectBricks as $objectBrick) {\n            $result[] = [\n                'icon' => 'objectbricks',\n                'checked' => true,\n                'type' => 'objectbrick',\n                'name' => $objectBrick->getKey(),\n                'displayName' => $objectBrick->getKey(),\n            ];\n        }\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $customLayout) {\n            $class = DataObject\\ClassDefinition::getById($customLayout->getClassId());\n            $displayName = $class->getName() . ' / ' .  $customLayout->getName();\n\n            $result[] = [\n                'icon' => 'custom_views',\n                'checked' => true,\n                'type' => 'customlayout',\n                'name' => $customLayout->getId(),\n                'displayName' => $displayName,\n            ];\n        }\n\n        return new JsonResponse(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/do-bulk-export\", name=\"dobulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function doBulkExportAction(Request $request)\n    {\n        $session = Session::get('pimcore_objects');\n        $list = $session->get('class_bulk_export_settings');\n        $list = json_decode($list, true);\n        $result = [];\n\n        foreach ($list as $item) {\n            if ($item['type'] == 'fieldcollection') {\n                if ($fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($item['name'])) {\n                    $fieldCollectionJson = json_decode(DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection));\n                    $fieldCollectionJson->key = $item['name'];\n                    $result['fieldcollection'][] = $fieldCollectionJson;\n                }\n            } elseif ($item['type'] == 'class') {\n                if ($class = DataObject\\ClassDefinition::getByName($item['name'])) {\n                    $data = json_decode(DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class));\n                    $data->name = $item['name'];\n                    $result['class'][] = $data;\n                }\n            } elseif ($item['type'] == 'objectbrick') {\n                if ($objectBrick = DataObject\\Objectbrick\\Definition::getByKey($item['name'])) {\n                    $objectBrickJson = json_decode(DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick));\n                    $objectBrickJson->key = $item['name'];\n                    $result['objectbrick'][] = $objectBrickJson;\n                }\n            } elseif ($item['type'] == 'customlayout') {\n                if ($customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($item['name'])) {\n                    $classId = $customLayout->getClassId();\n                    $class = DataObject\\ClassDefinition::getById($classId);\n                    $customLayoutJson = json_decode(DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout));\n                    $customLayoutJson->name = $customLayout->getName();\n                    $customLayoutJson->className = $class->getName();\n                    $result['customlayout'][] = $customLayoutJson;\n                }\n            }\n        }\n\n        $result = json_encode($result, JSON_PRETTY_PRINT);\n        $response = new Response($result);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"bulk_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getTreeAction', 'fieldcollectionListAction', 'fieldcollectionTreeAction', 'fieldcollectionGetAction',\n            'getClassDefinitionForColumnConfigAction', 'objectbrickListAction', 'objectbrickTreeAction', 'objectbrickGetAction',\n        ];\n\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n\n    /**\n     * @Route(\"/get-fieldcollection-usages\", name=\"getfieldcollectionusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getFieldcollectionUsagesAction(Request $request)\n    {\n        $key = $request->get('key');\n        $result = [];\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes = $classes->load();\n        foreach ($classes as $class) {\n            $fieldDefs = $class->getFieldDefinitions();\n            foreach ($fieldDefs as $fieldDef) {\n                if ($fieldDef instanceof DataObject\\ClassDefinition\\Data\\Fieldcollections) {\n                    $allowedKeys = $fieldDef->getAllowedTypes();\n                    if (is_array($allowedKeys) && in_array($key, $allowedKeys)) {\n                        $result[] = [\n                            'class' => $class->getName(),\n                            'field' => $fieldDef->getName(),\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-bricks-usages\", name=\"getbrickusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getBrickUsagesAction(Request $request)\n    {\n        $classId = $request->get('classId');\n        $myclass = DataObject\\ClassDefinition::getById($classId);\n\n        $result = [];\n\n        $brickDefinitions = new DataObject\\Objectbrick\\Definition\\Listing();\n        $brickDefinitions = $brickDefinitions->load();\n        foreach ($brickDefinitions as $brickDefinition) {\n            $classes = $brickDefinition->getClassDefinitions();\n            foreach ($classes as $class) {\n                if ($myclass->getName() == $class['classname']) {\n                    $result[] = [\n                        'objectbrick' => $brickDefinition->getKey(),\n                        'field' => $class['fieldname'],\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-icons\", name=\"geticons\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return Response\n     */\n    public function getIconsAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $classId = $request->get('classId');\n\n        $iconDir = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img';\n        $classIcons = rscandir($iconDir . '/object-icons/');\n        $colorIcons = rscandir($iconDir . '/flat-color-icons/');\n        $twemoji = rscandir($iconDir . '/twemoji/');\n\n        $icons = array_merge($classIcons, $colorIcons, $twemoji);\n\n        foreach ($icons as &$icon) {\n            $icon = str_replace(PIMCORE_WEB_ROOT, '', $icon);\n        }\n\n        $event = new GenericEvent($this, [\n            'icons' => $icons,\n            'classId' => $classId,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECT_ICONS_PRE_SEND_DATA);\n        $icons = $event->getArgument('icons');\n\n        $result = [];\n        foreach ($icons as $icon) {\n            $content = file_get_contents(PIMCORE_WEB_ROOT . $icon);\n            $result[] = [\n                'text' => sprintf('<img src=\"data:%s;base64,%s\"/>', mime_content_type(PIMCORE_WEB_ROOT . $icon), base64_encode($content)),\n                'value' => $icon,\n            ];\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-class-identifier\", name=\"suggestclassidentifier\")\n     *\n     * @return Response\n     */\n    public function suggestClassIdentifierAction()\n    {\n        $db = Db::get();\n        $maxId = $db->fetchOne('SELECT MAX(CAST(id AS SIGNED)) FROM classes;');\n\n        $existingIds = $db->fetchFirstColumn('select LOWER(id) from classes');\n\n        $result = [\n            'suggestedIdentifier' => $maxId ? $maxId + 1 : 1,\n            'existingIds' => $existingIds,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-custom-layout-identifier\", name=\"suggestcustomlayoutidentifier\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function suggestCustomLayoutIdentifierAction(Request $request)\n    {\n        $classId = $request->get('classId');\n\n        $identifier = DataObject\\ClassDefinition\\CustomLayout::getIdentifier($classId);\n\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list = $list->load();\n        $existingIds = [];\n        $existingNames = [];\n\n        foreach ($list as $item) {\n            $existingIds[] = $item->getId();\n            if ($item->getClassId() == $classId) {\n                $existingNames[] = $item->getName();\n            }\n        }\n\n        $result = [\n            'suggestedIdentifier' => $identifier,\n            'existingIds' => $existingIds,\n            'existingNames' => $existingNames,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/text-layout-preview\", name=\"textlayoutpreview\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function textLayoutPreviewAction(Request $request)\n    {\n        $objPath = $request->get('previewObject', '');\n        $className = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . $request->get('className');\n        $obj = DataObject::getByPath($objPath) ?? new $className();\n\n        $textLayout = new DataObject\\ClassDefinition\\Layout\\Text();\n\n        $context = [\n          'data' => $request->get('renderingData'),\n        ];\n\n        if ($renderingClass = $request->get('renderingClass')) {\n            $textLayout->setRenderingClass($renderingClass);\n        }\n\n        if ($staticHtml = $request->get('html')) {\n            $textLayout->setHtml($staticHtml);\n        }\n\n        $html = $textLayout->enrichLayoutDefinition($obj, $context)->getHtml();\n\n        $content =\n            \"<html>\\n\" .\n            \"<head>\\n\" .\n            '<style type=\"text/css\">' . \"\\n\" .\n            file_get_contents(PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/css/admin.css') .\n            \"</style>\\n\" .\n            \"</head>\\n\\n\" .\n            \"<body class='objectlayout_element_text'>\\n\" .\n            $html .\n            \"\\n\\n</body>\\n\" .\n            \"</html>\\n\";\n\n        $response = new Response($content);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/video-supported-types\", name=\"videosupportedTypestypes\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function videoAllowedTypesAction(Request $request)\n    {\n        $videoDef = new DataObject\\ClassDefinition\\Data\\Video();\n        $res = [];\n\n        foreach ($videoDef->getSupportedTypes() as $type) {\n            $res[] = [\n                'key' => $type,\n                'value' => $this->trans($type),\n            ];\n        }\n\n        return $this->adminJson($res);\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.klass\");\npimcore.object.classes.klass = Class.create({\n\n    allowedInType: 'object',\n    disallowedDataTypes: [],\n    context: \"class\",\n    uploadRoute: 'pimcore_admin_dataobject_class_importclass',\n    exportRoute: 'pimcore_admin_dataobject_class_exportclass',\n\n    initialize: function (data, parentPanel, reopen, editorPrefix) {\n        this.parentPanel = parentPanel;\n        this.data = data;\n        this.editorPrefix = editorPrefix;\n        this.reopen = reopen;\n\n        this.addTree();\n        this.initLayoutFields();\n        this.addLayout();\n    },\n\n    getUploadUrl: function(){\n        return Routing.generate(this.uploadRoute, {id: this.getId()});\n    },\n\n    getExportUrl: function() {\n        return Routing.generate(this.exportRoute, {id: this.getId()});\n    },\n\n\n    addTree: function() {\n        this.tree = Ext.create('Ext.tree.Panel', {\n            region: \"west\",\n            width: 300,\n            split: true,\n            enableDD: true,\n            autoScroll: true,\n            root: {\n                id: \"0\",\n                root: true,\n                text: t(\"general_settings\"),\n                leaf: true,\n                iconCls: \"pimcore_icon_class\",\n                isTarget: true,\n                className: this.data.name\n            },\n            listeners: this.getTreeNodeListeners(),\n            viewConfig: {\n                plugins: {\n                    ptype: 'treeviewdragdrop',\n                    ddGroup: \"element\"\n                }\n            }\n        });\n        this.tree.getStore().setDefaultRootText(\"\");\n    },\n\n    addLayout: function () {\n\n        this.editpanel = new Ext.Panel({\n            region: \"center\",\n            bodyStyle: \"padding: 10px;\",\n            autoScroll: true\n        });\n\n        var displayId = this.data.key ? this.data.key : this.data.id; // because the field-collections use that also\n\n        var panelButtons = [];\n\n        panelButtons.push({\n            text: t(\"configure_custom_layouts\"),\n            iconCls: \"pimcore_icon_class pimcore_icon_overlay_add\",\n            hidden: this instanceof pimcore.object.fieldcollections.field,\n            handler: this.configureCustomLayouts.bind(this)\n        });\n\n        panelButtons.push({\n            text: t('reload_definition'),\n            handler: this.onRefresh.bind(this),\n            iconCls: \"pimcore_icon_reload\"\n        });\n\n        panelButtons.push({\n            text: t(\"import\"),\n            iconCls: \"pimcore_icon_upload\",\n            handler: this.upload.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n        panelButtons.push({\n            text: t(\"export\"),\n            iconCls: \"pimcore_icon_download\",\n            handler: function() {\n                pimcore.helpers.download(this.getExportUrl());\n            }.bind(this)\n        });\n\n\n        panelButtons.push({\n            text: t(\"save\"),\n            iconCls: \"pimcore_icon_apply\",\n            handler: this.save.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n\n        var name = \"\";\n        if(this.data.name) {\n            name = this.data.name + \" ( ID: \" + displayId + \")\";\n        } else {\n            name = \"ID: \" + displayId;\n        }\n\n        this.panel = new Ext.Panel({\n            border: false,\n            layout: \"border\",\n            closable: true,\n            autoScroll: true,\n            title: name,\n            //id: \"pimcore_class_editor_panel_\" + this.getId(),\n            id: this.editorPrefix + this.getId(),\n            items: [\n                this.tree,\n                this.editpanel\n            ],\n            buttons: panelButtons\n        });\n\n\n        this.parentPanel.getEditPanel().add(this.panel);\n\n        this.editpanel.add(this.getRootPanel());\n        this.setCurrentNode(\"root\");\n        this.parentPanel.getEditPanel().setActiveTab(this.panel);\n\n        pimcore.layout.refresh();\n    },\n\n    configureCustomLayouts: function() {\n        try {\n            new pimcore.object.helpers.customLayoutEditor(this.data);\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getId: function(){\n        return  this.data.id;\n    },\n\n    upload: function() {\n\n        pimcore.helpers.uploadDialog(this.getUploadUrl(), \"Filedata\", function() {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_class_get'),\n                params: {\n                    id: this.data.id\n                },\n                success: function(response) {\n                    this.data = Ext.decode(response.responseText);\n                    this.parentPanel.getEditPanel().removeAll();\n                    this.addTree();\n                    this.initLayoutFields();\n                    this.addLayout();\n                    pimcore.layout.refresh();\n                }.bind(this)\n            });\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    reload: function(response) {\n\n    },\n\n    initLayoutFields: function () {\n\n        if (this.data.layoutDefinitions) {\n            if (this.data.layoutDefinitions.children) {\n                for (var i = 0; i < this.data.layoutDefinitions.children.length; i++) {\n                    this.tree.getRootNode().appendChild(this.recursiveAddNode(this.data.layoutDefinitions.children[i],\n                        this.tree.getRootNode()));\n                }\n                this.tree.getRootNode().expand();\n            }\n        }\n    },\n\n    recursiveAddNode: function (con, scope) {\n\n        var fn = null;\n        var newNode = null;\n\n        if (con.datatype == \"layout\") {\n            fn = this.addLayoutChild.bind(scope, con.fieldtype, con, this.context);\n        }\n        else if (con.datatype == \"data\") {\n            fn = this.addDataChild.bind(scope, con.fieldtype, con, this.context);\n        }\n\n        newNode = fn();\n\n        if (con.children) {\n            for (var i = 0; i < con.children.length; i++) {\n                this.recursiveAddNode(con.children[i], newNode);\n            }\n        }\n\n        return newNode;\n    },\n\n\n    getTreeNodeListeners: function () {\n\n        var listeners = {\n            \"itemclick\" : this.onTreeNodeClick.bind(this),\n            \"itemcontextmenu\": this.onTreeNodeContextmenu.bind(this),\n            \"beforeitemmove\": this.onTreeNodeBeforeMove.bind(this)\n        };\n        return listeners;\n    },\n\n\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n\n        try {\n            this.saveCurrentNode();\n        } catch (e) {\n            console.log(e);\n        }\n\n\n        try {\n            this.editpanel.removeAll();\n\n            if (record.data.editor) {\n\n                if (record.data.editor.datax.locked) {\n                    return;\n                }\n\n                this.editpanel.add(record.data.editor.getLayout());\n\n                this.setCurrentNode(record.data.editor);\n            }\n\n            if (record.data.root) {\n                this.editpanel.add(this.getRootPanel());\n                this.setCurrentNode(\"root\");\n            }\n\n            this.editpanel.updateLayout();\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getDataMenu: function(tree, record, allowedTypes, parentType, editMode) {\n        // get available data types\n        var dataMenu = [];\n        var dataComps = Object.keys(pimcore.object.classes.data);\n        var parentRestrictions;\n        var groups = [];\n        var groupNames = [\"text\",\"numeric\",\"date\",\"select\",\"media\",\"relation\",\"geo\",\"crm\",\"structured\",\"other\"];\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            var dataComp = pimcore.object.classes.data[dataCompName];\n\n            // check for disallowed types\n            var allowed = false;\n\n            if('object' !== typeof dataComp) {\n                if (dataComp.prototype.allowIn[this.allowedInType]) {\n                    allowed = true;\n                }\n            }\n\n            if (!allowed) {\n                continue;\n            }\n\n\n            if (dataComps[i] != \"data\") { // class data is an abstract class => disallow\n                if (in_array(\"data\", allowedTypes[parentType]) || in_array(dataComps[i], allowedTypes[parentType]) ) {\n\n                    // check for restrictions from a parent field (eg. localized fields)\n                    if(in_array(\"data\", allowedTypes[parentType])) {\n                        parentRestrictions = this.getRestrictionsFromParent(record);\n                        if(parentRestrictions != null) {\n                            if(!in_array(dataComps[i], allowedTypes[parentRestrictions])) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    var group = pimcore.object.classes.data[dataComps[i]].prototype.getGroup();\n                    if (!groups[group]) {\n                        if (!in_array(group, groupNames)) {\n                            groupNames.push(group);\n                        }\n                        groups[group] = [];\n                    }\n                    var handler;\n                    if (editMode) {\n                        handler = this.changeDataType.bind(this, tree, record, dataComps[i], true, this.context);\n                    } else {\n                        handler = this.addNewDataChild.bind(this, record, dataComps[i], this.context);\n                    }\n\n                    groups[group].push({\n                        text: pimcore.object.classes.data[dataComps[i]].prototype.getTypeName(),\n                        iconCls: pimcore.object.classes.data[dataComps[i]].prototype.getIconClass(),\n                        handler: handler\n                    });\n                }\n            }\n        }\n\n        for (i = 0; i < groupNames.length; i++) {\n            if (groups[groupNames[i]] && groups[groupNames[i]].length > 0) {\n                dataMenu.push(new Ext.menu.Item({\n                    text: t(groupNames[i]),\n                    iconCls: \"pimcore_icon_data_group_\" + groupNames[i],\n                    hideOnClick: false,\n                    menu: groups[groupNames[i]]\n                }));\n            }\n        }\n        return dataMenu;\n    },\n\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        e.stopEvent();\n        tree.select();\n\n        var menu = new Ext.menu.Menu();\n\n        var allowedTypes = pimcore.object.helpers.layout.getAllowedTypes(this);\n\n        var dataComps = Object.keys(pimcore.object.classes.data);\n\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            if ('object' === typeof pimcore.object.classes.data[dataCompName]) {\n                continue;\n            }\n            var component = pimcore.object.classes.data[dataCompName];\n            if(component.prototype.allowIn['localizedfield']) {\n                allowedTypes.localizedfields.push(dataCompName);\n            }\n\n            if(component.prototype.allowIn['block']) {\n                allowedTypes.block.push(dataCompName);\n            }\n        }\n\n\n        // the child-type \"data\" is a placehoder for all data components\n\n\n        var parentType = \"root\";\n\n        if (record.data.editor) {\n            parentType = record.data.editor.type;\n        }\n\n        var changeTypeAllowed = false;\n        if (record.data.type == \"data\") {\n            changeTypeAllowed = true;\n        }\n\n        var childrenAllowed = false;\n        if (allowedTypes[parentType] && allowedTypes[parentType].length > 0) {\n            childrenAllowed = true;\n        }\n\n        if (childrenAllowed || changeTypeAllowed) {\n            // get available layouts\n            var layoutMenu = [];\n            var layouts = Object.keys(pimcore.object.classes.layout);\n\n            for (var i = 0; i < layouts.length; i++) {\n                if (layouts[i] != \"layout\") {\n                    if (in_array(layouts[i], allowedTypes[parentType])) {\n                        layoutMenu.push({\n                            text: pimcore.object.classes.layout[layouts[i]].prototype.getTypeName(),\n                            iconCls: pimcore.object.classes.layout[layouts[i]].prototype.getIconClass(),\n                            handler: function (record, type, context) {\n                                var newNode = this.addLayoutChild.bind(record, type, null, context)();\n                                newNode.getOwnerTree().getSelectionModel().select(newNode);\n                                this.onTreeNodeClick(null, newNode);\n                            }.bind(this, record, layouts[i], this.context)\n                        });\n                    }\n\n                }\n            }\n\n            var getDataMenu = this.getDataMenu.bind(this, tree, record);\n            var addDataMenu = getDataMenu(allowedTypes, parentType, false);\n\n            if (layoutMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_layout_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: layoutMenu\n                }));\n            }\n\n            if (addDataMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_data_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: addDataMenu\n                }));\n            }\n\n            if (changeTypeAllowed) {\n                var changeDataMenu = getDataMenu(allowedTypes, record.parentNode.data.editor.type, true);\n                menu.add(new Ext.menu.Item({\n                    text: t('convert_to'),\n                    iconCls: \"pimcore_icon_convert\",\n                    hideOnClick: false,\n                    menu: changeDataMenu\n                }));\n            }\n\n            if (record.data.type == \"data\") {\n                menu.add(new Ext.menu.Item({\n                    text: t('clone'),\n                    iconCls: \"pimcore_icon_clone\",\n                    hideOnClick: true,\n                    handler: this.changeDataType.bind(this, tree, record, record.data.editor.type, false, this.context)\n                }));\n            }\n\n            menu.add(new Ext.menu.Item({\n                text: t('copy'),\n                iconCls: \"pimcore_icon_copy\",\n                hideOnClick: true,\n                handler: this.copyNode.bind(this, tree, record)\n            }));\n\n            if (childrenAllowed) {\n                if (pimcore && pimcore.classEditor && pimcore.classEditor.clipboard) {\n                    menu.add(new Ext.menu.Item({\n                        text: t('paste'),\n                        iconCls: \"pimcore_icon_paste\",\n                        hideOnClick: true,\n                        handler: this.dropNode.bind(this, tree, record)\n                    }));\n                }\n            }\n        }\n\n        var deleteAllowed = true;\n\n        if (record.data.editor) {\n            if (record.data.editor.datax.locked) {\n                deleteAllowed = false;\n            }\n        }\n\n        if (this.id != 0 && deleteAllowed) {\n            menu.add(new Ext.menu.Item({\n                text: t('delete'),\n                iconCls: \"pimcore_icon_delete\",\n                handler: this.removeChild.bind(this, tree, record)\n            }));\n        }\n\n        menu.showAt(e.pageX, e.pageY);\n    },\n\n    getRestrictionsFromParent: function (node) {\n        if(in_array(node.data.editor.type, ['localizedfields', 'block'])) {\n            return node.data.editor.type;\n        } else {\n            if(node.parentNode && node.parentNode.getDepth() > 0) {\n                var parentType = this.getRestrictionsFromParent(node.parentNode);\n                if(parentType != null) {\n                    return parentType;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    onTreeNodeBeforeMove: function (node, oldParent, newParent, index, eOpts ) {\n        return pimcore.helpers.treeDragDropValidate(node, oldParent, newParent);\n    },\n\n    cloneNode:  function(tree, node) {\n        var theReference = this;\n        var nodeLabel = node.data.text;\n        var nodeType = node.data.type;\n\n        var config = {\n            text: nodeLabel,\n            type: nodeType,\n            leaf: node.data.leaf,\n            expanded: node.data.expanded\n        };\n\n\n        config.listeners = theReference.getTreeNodeListeners();\n\n        if (node.data.editor) {\n            config.iconCls = node.data.editor.getIconClass();\n        }\n\n        var newNode = node.createNode(config);\n\n        var theData = {};\n\n        if (node.data.editor) {\n            theData = Ext.apply(theData, node.data.editor.datax);\n        }\n\n        if (node.data.editor) {\n            var definitions = newNode.data.editor = pimcore.object.classes[nodeType];\n            var editorType = node.data.editor.type;\n            var editor = definitions[editorType];\n\n            newNode.data.editor = new editor(newNode, theData);\n        }\n\n        if (nodeType == \"data\") {\n            var availableFields = newNode.data.editor.availableSettingsFields;\n            for (var i = 0; i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (node.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        newNode.data.editor.datax[field] = node.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor.applySpecialData(node.data.editor);\n        }\n\n\n        var len = node.childNodes ? node.childNodes.length : 0;\n\n        var i = 0;\n\n        // Move child nodes across to the copy if required\n        for (i = 0; i < len; i++) {\n            var childNode = node.childNodes[i];\n            var clonedChildNode = this.cloneNode(tree, childNode);\n\n            newNode.appendChild(clonedChildNode);\n        }\n        return newNode;\n    },\n\n\n    copyNode: function(tree, record) {\n        if (!pimcore.classEditor) {\n            pimcore.classEditor = {};\n        }\n\n        var newNode = this.cloneNode(tree, record);\n        pimcore.classEditor.clipboard = newNode;\n\n    },\n\n    dropNode: function(tree, record) {\n        var node = pimcore.classEditor.clipboard;\n        var newNode = this.cloneNode(tree, node);\n\n        record.appendChild(newNode);\n        tree.updateLayout();\n    },\n\n\n    setCurrentNode: function (cn) {\n        this.currentNode = cn;\n    },\n\n    saveCurrentNode: function () {\n        if (this.currentNode) {\n            if (this.currentNode != \"root\") {\n                this.currentNode.applyData();\n            }  else {\n                // save root node data\n                var items = this.rootPanel.queryBy(function(item) {\n                    if (item == this.compositeIndicesPanel) {\n                        return false;\n                    }\n                    return true;\n                });\n\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    if (typeof item.getValue == \"function\") {\n                        let value = item.getValue();\n                        if (typeof item.config.xtype !== 'undefined' && item.config.xtype === 'textfield') {\n                            value = Ext.util.Format.htmlEncode(value);\n                        }\n\n                        this.data[item.name] = value;\n                    }\n                }\n\n                if (this.compositeIndicesPanel) {\n                    this.collectCompositeIndices();\n                }\n            }\n        }\n    },\n\n    collectCompositeIndices: function() {\n        var indexData = [];\n        for(let s=0; s<this.compositeIndicesPanel.items.items.length; s++) {\n            var entry = this.compositeIndicesPanel.items.items[s];\n            var items = entry.queryBy(function(item) {\n                return true;\n            });\n\n            var indexItem = {};\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (typeof item.getValue == \"function\") {\n                    indexItem[item.name] = item.getValue();\n                }\n            }\n            indexData.push(indexItem);\n        }\n\n        this.data[\"compositeIndices\"] = indexData;\n    },\n\n    getRootPanel: function () {\n        this.allowInheritance = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_inherit\"),\n            name: \"allowInherit\",\n            checked: this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.allowVariants.setDisabled(false);\n                    } else {\n                        this.allowVariants.setValue(false);\n                        this.allowVariants.setDisabled(true);\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n\n        this.allowVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_variants\"),\n            name: \"allowVariants\",\n            checked: this.data.allowVariants,\n            disabled: !this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.showVariants.setDisabled(false);\n                    } else {\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.showVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"show_variants\"),\n            name: \"showVariants\",\n            checked: this.data.showVariants,\n            disabled: !this.data.allowInherit\n        });\n\n        var getPhpClassName = function (name) {\n            return \"Pimcore\\\\Model\\\\DataObject\\\\\" + ucfirst(name);\n        };\n\n        var iconStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_geticons'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"text\", \"value\"]\n        });\n\n        var iconField = new Ext.form.field.Text({\n            id: \"iconfield-\" + this.getId(),\n            name: \"icon\",\n            width: 396,\n            renderer: Ext.util.Format.htmlEncode,\n            value: this.data.icon,\n            listeners: {\n                \"afterrender\": function (el) {\n                    el.inputEl.applyStyles(\"background:url(\" + el.getValue() + \") right center no-repeat;\");\n                }\n            }\n        });\n\n        this.compositeIndexTypeStore = new Ext.data.ArrayStore({\n            data: [['query'], ['localized_query'],['store'], ['localized_store']],\n            fields: ['value']\n        });\n\n        var suggestedColumns = [];\n        var store = this.tree.getStore();\n        var data = store.getData();\n        for (let i = 0; i < data.items.length; i++) {\n            let record = data.items[i];\n            if (record.data.type == \"data\") {\n                suggestedColumns.push([record.data.text]);\n            }\n        }\n\n        this.tagstore = new Ext.data.ArrayStore({\n            data: suggestedColumns,\n            fields: ['value']\n        });\n\n        this.compositeIndicesPanel = new Ext.Panel({\n            autoScroll: true\n        });\n\n        this.rootPanel = new Ext.form.FormPanel({\n            title: '<b>' + t(\"general_settings\") + '</b>',\n            bodyStyle: 'padding: 10px;',\n            autoScroll: true,\n            defaults: {\n                labelWidth: 200\n            },\n            items: [\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"name\"),\n                    name: \"name\",\n                    width: 500,\n                    enableKeyEvents: true,\n                    value: this.data.name,\n                    renderer: Ext.util.Format.htmlEncode,\n                    listeners: {\n                        keyup: function (el) {\n                            this.rootPanel.getComponent(\"phpClassName\").setValue(getPhpClassName(el.getValue()))\n                        }.bind(this)\n                    }\n                },\n                {\n                    xtype: \"textarea\",\n                    fieldLabel: t(\"description\"),\n                    name: \"description\",\n                    width: 500,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.description\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"unique_identifier\"),\n                    disabled: true,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.id,\n                    width: 500\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"PHP Class Name\"),\n                    name: \"phpClassName\",\n                    itemId: \"phpClassName\",\n                    width: 500,\n                    disabled: true,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: getPhpClassName(this.data.name)\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"parent_php_class\"),\n                    name: \"parentClass\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.parentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    width: 600,\n                    name: \"implementsInterfaces\",\n                    fieldLabel: t(\"implements_interfaces\"),\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.implementsInterfaces\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"use_traits\"),\n                    name: \"useTraits\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.useTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_parent_php_class\"),\n                    name: \"listingParentClass\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.listingParentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_use_traits\"),\n                    name: \"listingUseTraits\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.listingUseTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"link_generator_reference\"),\n                    name: \"linkGeneratorReference\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.linkGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_generator_reference\"),\n                    name: \"previewGeneratorReference\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.previewGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_url\"),\n                    name: \"previewUrl\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.previewUrl\n                },\n                {\n                    xtype: \"fieldcontainer\",\n                    layout: \"hbox\",\n                    fieldLabel: t(\"icon\"),\n                    defaults: {\n                        labelWidth: 200\n                    },\n                    items: [\n                        iconField,\n                        {\n                            xtype: \"combobox\",\n                            store: iconStore,\n                            width: 50,\n                            valueField: 'value',\n                            displayField: 'text',\n                            listeners: {\n                                select: function (ele, rec, idx) {\n                                    var icon = ele.container.down(\"#iconfield-\" + this.getId());\n                                    var newValue = rec.data.value;\n                                    icon.component.setValue(newValue);\n                                    icon.component.inputEl.applyStyles(\"background:url(\" + newValue + \") right center no-repeat;\");\n                                    return newValue;\n                                }.bind(this)\n                            }\n                        },\n                        {\n                            iconCls: \"pimcore_icon_refresh\",\n                            xtype: \"button\",\n                            tooltip: t(\"refresh\"),\n                            handler: function(iconField) {\n                                iconField.inputEl.applyStyles(\"background:url(\" + iconField.getValue() + \") right center no-repeat;\");\n                            }.bind(this, iconField)\n                        },\n                        {\n                            xtype: \"button\",\n                            iconCls: \"pimcore_icon_icons\",\n                            text: t('icon_library'),\n                            handler: function () {\n                                pimcore.helpers.openGenericIframeWindow(\"icon-library\", Routing.generate('pimcore_admin_misc_iconlist'), \"pimcore_icon_icons\", t(\"icon_library\"));\n                            }\n                        }\n                    ]\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"group\"),\n                    name: \"group\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.group\n                },\n                this.allowInheritance,\n                this.allowVariants,\n                this.showVariants,\n                {\n                    xtype: \"label\",\n                    text: t(\"generate_type_declarations\"),\n                    cls: 'pimcore_deprecated'\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: `(${t(\"deprecated\")})`,\n                    name: \"generateTypeDeclarations\",\n                    checked: this.data.generateTypeDeclarations,\n                    cls: 'pimcore_cb_middle_two_lines'\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_applogger_tab\"),\n                    name: \"showAppLoggerTab\",\n                    checked: this.data.showAppLoggerTab\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_fieldlookup\"),\n                    name: \"showFieldLookup\",\n                    checked: this.data.showFieldLookup\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"enable_grid_locking\"),\n                    name: \"enableGridLocking\",\n                    checked: this.data.enableGridLocking\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"encrypt_data\"),\n                    name: \"encryption\",\n                    style: 'margin: 0',\n                    checked: this.data.encryption\n                },\n                {\n                    xtype: 'container',\n                    html: t('encrypt_data_description'),\n                    style: 'margin-bottom:10px'\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('visibility_of_system_properties') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.id\",\n                    checked: this.data.propertyVisibility.grid.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.id\",\n                    checked: this.data.propertyVisibility.search.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.key\",\n                    checked: this.data.propertyVisibility.grid.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.key\",\n                    checked: this.data.propertyVisibility.search.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.path\",\n                    checked: this.data.propertyVisibility.grid.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.path\",\n                    checked: this.data.propertyVisibility.search.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.published\",\n                    checked: this.data.propertyVisibility.grid.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.published\",\n                    checked: this.data.propertyVisibility.search.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.modificationDate\",\n                    checked: this.data.propertyVisibility.grid.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.modificationDate\",\n                    checked: this.data.propertyVisibility.search.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.creationDate\",\n                    checked: this.data.propertyVisibility.grid.creationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.creationDate\",\n                    checked: this.data.propertyVisibility.search.creationDate\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('composite_indices') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: 'button',\n                    text: t('add'),\n                    iconCls: \"pimcore_icon_add\",\n                    handler: function () {\n                        this.addCompositeIndex();\n                    }.bind(this)\n                },\n                this.compositeIndicesPanel,\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('uses_these_bricks') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                this.getBricksGrid()\n\n            ]\n        });\n\n        if (this.data.compositeIndices) {\n            for (let i = 0; i < this.data.compositeIndices.length; i++) {\n                let indexData = this.data.compositeIndices[i];\n                this.addCompositeIndex(indexData);\n            }\n        }\n\n        this.rootPanel.on(\"afterrender\", function() {\n            this.usagesStore.reload();\n        }.bind(this));\n\n        return this.rootPanel;\n    },\n\n    addCompositeIndex: function(data) {\n        data = data || {};\n        var keyField = {\n            xtype: 'textfield',\n            name: \"index_key\",\n            fieldLabel: t(\"key\"),\n            labelWidth: 100,\n            width: 250,\n            value: data.index_key,\n            validator: function (value) {\n                if(value !== value.replace(/[^a-za-z0-9_\\-+]/g,'')){\n                    this.setvalue(value.replace(/[^a-za-z0-9_\\-+]/g,''));\n                }\n\n                return true;\n            }\n        };\n\n        //fixes data to match store model\n        const indexesArray = [];\n        if(data.index_columns){\n            Object.values(data.index_columns).forEach(column => {\n                indexesArray.push({id: column, value: column});\n            });\n        }  \n\n        var tagsField = new Ext.form.field.Tag({\n            name: \"index_columns\",\n            width:550,\n            resizable: true,\n            minChars: 2,\n            store: this.tagstore,\n            fieldLabel: t(\"columns\"),\n            value: indexesArray,\n            draggable: true,\n            displayField: 'value',\n            valueField: 'value',\n            forceSelection: false,\n            delimiter: '\\x01',\n            createNewOnEnter: true,\n            componentCls: 'superselect-no-drop-down',\n            valueParam: indexesArray\n        });\n\n        var removeButton = new Ext.button.Button({\n            iconCls: \"pimcore_icon_minus\",\n            style: \"margin-left: 10px\"\n        });\n\n        var typeCombo = {\n            xtype: 'combo',\n            name: \"index_type\",\n            triggerAction: \"all\",\n            editable: true,\n            queryMode: 'local',\n            autoComplete: false,\n            forceSelection: true,\n            selectOnFocus: true,\n            fieldLabel: t(\"table\"),\n            store: this.compositeIndexTypeStore,\n            width: 250,\n            displayField: 'value',\n            valueField: 'value',\n            value: data.index_type ? data.index_type : \"query\",\n            labelWidth: 70,\n            style: \"margin-left: 10px\"\n        };\n\n        var keyEntry = new Ext.form.FieldContainer({\n            layout: 'hbox',\n            border: false,\n            items: [keyField, typeCombo, removeButton]\n        });\n\n\n        var entry = new Ext.form.FieldContainer({\n            layout: 'vbox',\n            border: false,\n            items: [keyEntry, tagsField]\n        });\n\n\n        removeButton.addListener(\"click\", function() {\n            this.compositeIndicesPanel.remove(entry);\n        }.bind(this, entry));\n\n        this.compositeIndicesPanel.add(entry);\n    },\n\n    getBricksGrid: function() {\n        this.usagesStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_getbrickusages'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"objectbrick\", \"field\"]\n        });\n\n        var usagesGrid = new Ext.grid.GridPanel({\n            frame: false,\n            autoScroll: true,\n            store: this.usagesStore,\n            columnLines: true,\n            stripeRows: true,\n            plugins: ['gridfilters'],\n            width: 600,\n            columns: [\n                {text: t('objectbrick'), sortable: true, dataIndex: 'objectbrick', filter: 'string', flex: 1},\n                {text: t('field'), sortable: true, dataIndex: 'field', filter: 'string', flex: 1}\n            ],\n            viewConfig: {\n                forceFit: true\n            }\n        });\n        return usagesGrid;\n\n    },\n\n    addLayoutChild: function (type, initData, context) {\n\n        var nodeLabel = t(type);\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"layout\",\n            iconCls: pimcore.object.classes.layout[type].prototype.getIconClass(),\n            leaf: false,\n            expandable: false,\n            expanded: true,\n        };\n        newNode = this.appendChild(newNode);\n\n        //to hide or show the expanding icon depending if children are available or not\n        newNode.addListener('remove', function(node, removedNode, isMove) {\n            if(!node.hasChildNodes()) {\n                node.set('expandable', false);\n            }\n        });\n        newNode.addListener('append', function(node) {\n            node.set('expandable', true);\n        });\n\n\n        var editor = new pimcore.object.classes.layout[type](newNode, initData);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    addNewDataChild: function (record, type, context) {\n        var node = this.addDataChild.bind(record, type, {}, context)();\n        node.getOwnerTree().getSelectionModel().select(node);\n        this.onTreeNodeClick(null, node);\n\n        var result = this.editpanel.query('field[name=name]');\n        if(result.length && typeof result[0]['focus'] == 'function') {\n            result[0].focus();\n        }\n    },\n\n    addDataChild: function (type, initData, context) {\n\n        var nodeLabel = '';\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"data\",\n            leaf: true,\n            iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n        };\n\n        if (type == \"localizedfields\" || type == \"block\") {\n            newNode.leaf = false;\n            newNode.expanded = true;\n            newNode.expandable = false;\n        }\n\n        newNode = this.appendChild(newNode);\n\n        var editor = new pimcore.object.classes.data[type](newNode, initData);\n        editor.setContext(context);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    changeDataType: function (tree, record, type, removeExisting, context) {\n        try {\n            this.saveCurrentNode();\n\n            var nodeLabel = record.data.text;\n\n            var theData = {};\n\n            theData.name = nodeLabel;\n            theData.datatype = \"data\";\n            theData.fieldtype = type;\n\n            if (!removeExisting) {\n                var matches = nodeLabel.match(/\\d+$/);\n\n                if (matches) {\n                    var number = matches[0];\n\n                    var numberLength = number.length;\n                    number = parseInt(number);\n                    number = number + 1;\n\n                    var l = nodeLabel.length;\n\n                    nodeLabel = nodeLabel.substring(0, l - numberLength);\n                } else {\n                    number = 1;\n                }\n                nodeLabel = nodeLabel + number;\n            }\n\n\n            var parentNode = record.parentNode;\n\n            var newNode = {\n                text: nodeLabel,\n                type: \"data\",\n                leaf: true,\n                iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n            };\n\n            newNode = parentNode.createNode(newNode);\n\n            if (!removeExisting) {\n                theData.name = nodeLabel;\n            }\n\n            var editor = new pimcore.object.classes.data[type](newNode, theData);\n            editor.setContext(context);\n            newNode = record.parentNode.insertBefore(newNode, record);\n\n            var availableFields = editor.availableSettingsFields;\n            for (var i = 0;  i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (record.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        editor.datax[field] = record.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor = editor;\n            newNode.data.editor.applySpecialData(record.data.editor);\n\n\n            if (removeExisting) {\n                parentNode.removeChild(record);\n\n            } else {\n                parentNode.insertBefore(record, newNode);\n            }\n\n            //newNode.select();\n            var f = this.onTreeNodeClick.bind(this, newNode.getOwnerTree(), newNode);\n            f();\n\n            var ownerTree = newNode.getOwnerTree();\n            var selModel = ownerTree.getSelectionModel();\n            selModel.select(newNode);\n\n\n            return newNode;\n        } catch (e) {\n         console.log(e);\n        }\n    },\n\n    removeChild: function (tree, record) {\n        if (this.id != 0) {\n            if (this.currentNode == record.data.editor) {\n                this.currentNode = null;\n                var rootNode = this.tree.getRootNode();\n                var f = this.onTreeNodeClick.bind(this, this.tree, rootNode);\n                f();\n            }\n            record.remove();\n        }\n    },\n\n    getNodeData: function (node) {\n\n        var data = {};\n\n        if (node.data.editor) {\n            if (typeof node.data.editor.getData == \"function\") {\n                data = node.data.editor.getData();\n                data.invalidFieldError = null;\n                data.name = trim(data.name);\n\n                // field specific validation\n                var fieldValidation = true;\n                if(typeof node.data.editor.isValid == \"function\") {\n                    fieldValidation = node.data.editor.isValid();\n                }\n\n                var view = this.tree.getView();\n                // check if the name is unique, localizedfields can be used more than once\n                var nodeEl = Ext.fly(view.getNodeByRecord(node));\n\n                var containerAwareDataName = data.name;\n                var parentNode = node.parentNode;\n                while (parentNode) {\n                    if (parentNode.data.editor && Ext.isFunction(parentNode.data.editor.getData)) {\n                        var parentData = parentNode.data.editor.getData();\n                        if (parentData.datatype == \"data\" && parentNode.data.editor.type == \"block\") {\n                            containerAwareDataName = \"block-\" + parentData.name + \"-\" + containerAwareDataName;\n                            break;\n                        }\n                    }\n\n                    parentNode = parentNode.parentNode;\n                }\n\n                if ((fieldValidation && in_arrayi(containerAwareDataName,this.usedFieldNames) == false) || data.name == \"localizedfields\" && data.fieldtype == \"localizedfields\") {\n\n                    if(data.datatype == \"data\") {\n                        this.usedFieldNames.push(containerAwareDataName);\n                    }\n\n                    if(nodeEl) {\n                        nodeEl.removeCls(\"tree_node_error\");\n                    }\n                }\n                else {\n                    if(nodeEl) {\n                        nodeEl.addCls(\"tree_node_error\");\n                    }\n\n                    var invalidFieldsText = t(\"class_field_name_error\") + \": '\" + data.name + \"'\";\n\n                    if (data.invalidFieldError) {\n                        invalidFieldsText = invalidFieldsText + \" (\" + data.invalidFieldError + \")\";\n                    }\n\n                    if(node.data.editor.invalidFieldNames){\n                        invalidFieldsText = t(\"reserved_field_names_error\")\n                            +(implode(',',node.data.editor.forbiddenNames));\n                    }\n\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"some_fields_cannot_be_saved\"), \"error\",\n                        invalidFieldsText);\n\n                    this.getDataSuccess = false;\n                    return false;\n                }\n            }\n        }\n\n        data.children = null;\n        if (node.childNodes.length > 0) {\n            data.children = [];\n\n            for (var i = 0; i < node.childNodes.length; i++) {\n                data.children.push(this.getNodeData(node.childNodes[i]));\n            }\n        }\n\n        return data;\n    },\n\n    getData: function () {\n\n        this.getDataSuccess = true;\n\n        this.usedFieldNames = [];\n\n        var rootNode = this.tree.getRootNode();\n        var nodeData = this.getNodeData(rootNode);\n\n        return nodeData;\n    },\n\n    save: function () {\n\n        this.saveCurrentNode();\n\n        var isValidName = /^[a-zA-Z][a-zA-Z0-9]+$/;\n\n        if (this.data[\"name\"].length > 2 &&\n            isValidName.test(this.data[\"name\"]) &&\n            !in_arrayi(this.data[\"name\"], this.parentPanel.forbiddenNames)\n        ) {\n            delete this.data.layoutDefinitions;\n\n            var m = Ext.encode(this.getData());\n            var n = Ext.encode(this.data);\n\n            if (this.getDataSuccess) {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_class_save'),\n                    method: \"PUT\",\n                    params: {\n                        configuration: m,\n                        values: n,\n                        id: this.data.id\n                    },\n                    success: this.saveOnComplete.bind(this),\n                    failure: this.saveOnError.bind(this)\n                });\n            }\n        } else {\n            Ext.Msg.alert(' ', t('invalid_class_name'));\n        }\n    },\n\n    saveOnComplete: function (response) {\n\n        try {\n            var res = Ext.decode(response.responseText);\n            if(res.success) {\n                // refresh all class stores\n                this.parentPanel.tree.getStore().load();\n                pimcore.globalmanager.get(\"object_types_store\").load();\n                pimcore.globalmanager.get(\"object_types_store_create\").load();\n\n                // set the current modification date, to detect modifications on the class which are not made here\n                this.data.modificationDate = res['class'].modificationDate;\n\n                pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n            } else {\n                if (res.message) {\n                    pimcore.helpers.showNotification(t(\"error\"), res.message, \"error\");\n                } else {\n                    throw \"save was not successful, see log files in /var/log\";\n                }\n            }\n        } catch (e) {\n            this.saveOnError();\n        }\n\n    },\n\n    saveOnError: function () {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    },\n\n    onRefresh: function() {\n        this.parentPanel.getEditPanel().remove(this.panel);\n        this.reopen();\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php", "bundles/AdminBundle/Resources/public/js/pimcore/object/classes/class.js"], "buggy_code_start_loc": [457, 1088], "buggy_code_end_loc": [457, 1089], "fixing_code_start_loc": [458, 1088], "fixing_code_end_loc": [466, 1096], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.20.", "other": {"cve": {"id": "CVE-2023-1703", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-29T16:15:07.347", "lastModified": "2023-04-03T17:38:02.983", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.20."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.20", "matchCriteriaId": "98C7372B-CF43-42C5-9227-9ED728BF03F5"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/765832f0dc5f6cfb296a82e089b701066f27bcef", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d12d105c-18fa-4d08-b591-b0e89e39eec1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/765832f0dc5f6cfb296a82e089b701066f27bcef"}}