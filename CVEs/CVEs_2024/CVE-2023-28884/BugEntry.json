{"buggy_code": ["<?php\nclass CustomPaginationTool\n{\n    public function createPaginationRules($items, $options, $model, $sort = 'id', $focusKey = 'uuid')\n    {\n        $params = array(\n            'model' => $model,\n            'current' => 1,\n            'count' => count($items),\n            'limit' => 60,\n            'page' => 1,\n            'sort' => $sort,\n            'direction' => 'asc',\n            'paramType' => 'named',\n            'prevPage' => false,\n            'nextPage' => false,\n            'options' => array(\n            ),\n        );\n        $validOptions = array('sort', 'direction', 'page', 'focus', 'limit');\n        if ($model == 'events') {\n            $validOptions[] = 'attributeFilter';\n        }\n        foreach ($validOptions as $v) {\n            if (isset($options[$v])) {\n                $params[$v] = $options[$v];\n                $params['options'][$v] = $options[$v];\n            }\n        }\n        $maxPage = floor($params['count'] / $params['limit']);\n        if ($params['count'] % $params['limit'] != 0) {\n            $maxPage += 1;\n        }\n        if ($params['page'] == 0) {\n            $params['limit'] = $params['count'];\n            $params['current'] = 1;\n        } else {\n            $params['current'] = 1 + ($params['page'] - 1) * $params['limit'];\n            if ($params['page'] > 1) {\n                $params['prevPage'] = true;\n            }\n            if ($params['page'] < $maxPage) {\n                $params['nextPage'] = true;\n            }\n        }\n        $params['pageCount'] = $maxPage;\n        return $params;\n    }\n\n    public function truncateByPagination(&$items, $params)\n    {\n        if (empty($items)) {\n            return;\n        }\n        $items = array_slice($items, $params['current'] - 1, $params['limit']);\n    }\n\n    public function truncateByQuickFilter(&$items, $value)\n    {\n        if (empty($items)) {\n            return;\n        }\n        if ($value === '') {\n            return;\n        }\n        $value = strtolower($value);\n        foreach ($items as $k => $item) {\n            $keep = false;\n            foreach ($item as $field_name => $field_value) {\n                if (!is_array($field_value)) {\n                    $field_value = array($field_value);\n                }\n                foreach ($field_value as $v) {\n                    if (!is_array($v) && strpos(strtolower($v), $value) > -1) {\n                        $keep = true;\n                    }\n                }\n            }\n            if (!$keep) {\n                unset($items[$k]);\n            }\n        }\n        $items = array_values($items);\n    }\n\n    public function sortArray(array $items, $params, $escapeReindex = false)\n    {\n        if (isset($params['sort'])) {\n            $sortArray = array();\n            foreach ($items as $k => $item) {\n                $sortArray[$k] = !empty($item[$params['sort']]) ? $item[$params['sort']] : '';\n            }\n            if (empty($params['options']['direction']) || $params['options']['direction'] === 'asc') {\n                asort($sortArray);\n            } else {\n                arsort($sortArray);\n            }\n\n            foreach ($sortArray as $k => $sortedElement) {\n                $sortArray[$k] = $items[$k];\n            }\n            $items = $sortArray;\n        }\n        if (!$escapeReindex) {\n            $items = array_values($items);\n        }\n        return $items;\n    }\n\n    public function applyRulesOnArray(array &$items, $options, $model, $sort = 'id', $focusKey = 'uuid', $escapeReindex = false)\n    {\n        $params = $this->createPaginationRules($items, $options, $model, $sort, $focusKey);\n        $items = $this->sortArray($items, $params, $escapeReindex);\n\n        if (!empty($params['options']['focus'])) {\n            $focus = $params['options']['focus'];\n            foreach ($items as $k => $item) {\n                if ($item[$focusKey] === $focus) {\n                    $params['page'] = 1 + intval(floor($k / $params['limit']));\n                    $params['current'] = 1 + ($params['page'] - 1) * $params['limit'];\n                    break;\n                }\n            }\n            unset($params['options']['focus']);\n        }\n        // Start array from one\n        array_unshift($items, 'dummy');\n        unset($items[0]);\n        $this->truncateByPagination($items, $params);\n        return $params;\n    }\n\n    public function truncateAndPaginate(&$items, &$params, $model, $escapeReindex = false)\n    {\n        if (!empty($params['named']['searchall'])) {\n            $this->truncateByQuickFilter($items, $params['named']['searchall']);\n        }\n        $passedArgs = $this->applyRulesOnArray($items, $params['named'], $model, 'id', 'uuid', $escapeReindex);\n        $params->params['paging'] = array($model => $passedArgs);\n    }\n\n    public function cmp($a, $b)\n    {\n        $multiplier = 1;\n        if ($this->direction == 'desc') {\n            $multiplier = -1;\n        }\n        return strcmp(strtolower($a[$this->filterField]), strtolower($b[$this->filterField])) * $multiplier;\n    }\n}\n"], "fixing_code": ["<?php\nclass CustomPaginationTool\n{\n    public function createPaginationRules($items, $options, $model, $sort = 'id', $focusKey = 'uuid')\n    {\n        $params = array(\n            'model' => $model,\n            'current' => 1,\n            'count' => count($items),\n            'limit' => 60,\n            'page' => 1,\n            'sort' => $sort,\n            'direction' => 'asc',\n            'paramType' => 'named',\n            'prevPage' => false,\n            'nextPage' => false,\n            'options' => array(\n            ),\n        );\n        $validOptions = array('sort', 'direction', 'page', 'focus', 'limit');\n        if ($model == 'events') {\n            $validOptions[] = 'attributeFilter';\n        }\n        foreach ($validOptions as $v) {\n            if (isset($options[$v])) {\n                $params[$v] = $options[$v];\n                $params['options'][$v] = $options[$v];\n            }\n        }\n        $params['page'] = is_numeric($params['page']) ? $params['page'] : 1;\n        $params['limit'] = is_numeric($params['limit']) ? $params['limit'] : 60;\n        $maxPage = floor($params['count'] / $params['limit']);\n        if ($params['count'] % $params['limit'] != 0) {\n            $maxPage += 1;\n        }\n        if ($params['page'] == 0) {\n            $params['limit'] = $params['count'];\n            $params['current'] = 1;\n        } else {\n            $params['current'] = 1 + ($params['page'] - 1) * $params['limit'];\n            if ($params['page'] > 1) {\n                $params['prevPage'] = true;\n            }\n            if ($params['page'] < $maxPage) {\n                $params['nextPage'] = true;\n            }\n        }\n        $params['pageCount'] = $maxPage;\n        return $params;\n    }\n\n    public function truncateByPagination(&$items, $params)\n    {\n        if (empty($items)) {\n            return;\n        }\n        $items = array_slice($items, $params['current'] - 1, $params['limit']);\n    }\n\n    public function truncateByQuickFilter(&$items, $value)\n    {\n        if (empty($items)) {\n            return;\n        }\n        if ($value === '') {\n            return;\n        }\n        $value = strtolower($value);\n        foreach ($items as $k => $item) {\n            $keep = false;\n            foreach ($item as $field_name => $field_value) {\n                if (!is_array($field_value)) {\n                    $field_value = array($field_value);\n                }\n                foreach ($field_value as $v) {\n                    if (!is_array($v) && strpos(strtolower($v), $value) > -1) {\n                        $keep = true;\n                    }\n                }\n            }\n            if (!$keep) {\n                unset($items[$k]);\n            }\n        }\n        $items = array_values($items);\n    }\n\n    public function sortArray(array $items, $params, $escapeReindex = false)\n    {\n        if (isset($params['sort'])) {\n            $sortArray = array();\n            foreach ($items as $k => $item) {\n                $sortArray[$k] = !empty($item[$params['sort']]) ? $item[$params['sort']] : '';\n            }\n            if (empty($params['options']['direction']) || $params['options']['direction'] === 'asc') {\n                asort($sortArray);\n            } else {\n                arsort($sortArray);\n            }\n\n            foreach ($sortArray as $k => $sortedElement) {\n                $sortArray[$k] = $items[$k];\n            }\n            $items = $sortArray;\n        }\n        if (!$escapeReindex) {\n            $items = array_values($items);\n        }\n        return $items;\n    }\n\n    public function applyRulesOnArray(array &$items, $options, $model, $sort = 'id', $focusKey = 'uuid', $escapeReindex = false)\n    {\n        $params = $this->createPaginationRules($items, $options, $model, $sort, $focusKey);\n        $items = $this->sortArray($items, $params, $escapeReindex);\n\n        if (!empty($params['options']['focus'])) {\n            $focus = $params['options']['focus'];\n            foreach ($items as $k => $item) {\n                if ($item[$focusKey] === $focus) {\n                    $params['page'] = 1 + intval(floor($k / $params['limit']));\n                    $params['current'] = 1 + ($params['page'] - 1) * $params['limit'];\n                    break;\n                }\n            }\n            unset($params['options']['focus']);\n        }\n        // Start array from one\n        array_unshift($items, 'dummy');\n        unset($items[0]);\n        $this->truncateByPagination($items, $params);\n        return $params;\n    }\n\n    public function truncateAndPaginate(&$items, &$params, $model, $escapeReindex = false)\n    {\n        if (!empty($params['named']['searchall'])) {\n            $this->truncateByQuickFilter($items, $params['named']['searchall']);\n        }\n        $passedArgs = $this->applyRulesOnArray($items, $params['named'], $model, 'id', 'uuid', $escapeReindex);\n        $params->params['paging'] = array($model => $passedArgs);\n    }\n\n    public function cmp($a, $b)\n    {\n        $multiplier = 1;\n        if ($this->direction == 'desc') {\n            $multiplier = -1;\n        }\n        return strcmp(strtolower($a[$this->filterField]), strtolower($b[$this->filterField])) * $multiplier;\n    }\n}\n"], "filenames": ["app/Lib/Tools/CustomPaginationTool.php"], "buggy_code_start_loc": [29], "buggy_code_end_loc": [29], "fixing_code_start_loc": [30], "fixing_code_end_loc": [32], "type": "CWE-79", "message": "In MISP 2.4.169, app/Lib/Tools/CustomPaginationTool.php allows XSS in the community index.", "other": {"cve": {"id": "CVE-2023-28884", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-27T03:15:07.233", "lastModified": "2023-03-30T17:21:10.593", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In MISP 2.4.169, app/Lib/Tools/CustomPaginationTool.php allows XSS in the community index."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp-project:malware_information_sharing_platform:2.4.169:*:*:*:*:*:*:*", "matchCriteriaId": "25FB0E6F-32FA-4A98-87BC-723C1484FE57"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/b94c7978e5e6b1db369abeedbbf00bca975b08b7", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/b94c7978e5e6b1db369abeedbbf00bca975b08b7"}}