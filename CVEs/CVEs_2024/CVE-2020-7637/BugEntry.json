{"buggy_code": ["import { ClassTransformOptions } from \"./ClassTransformOptions\";\nimport { defaultMetadataStorage } from \"./storage\";\nimport { TypeHelpOptions, TypeOptions } from \"./metadata/ExposeExcludeOptions\";\nimport { TypeMetadata } from \"./metadata/TypeMetadata\";\n\nexport enum TransformationType {\n    PLAIN_TO_CLASS,\n    CLASS_TO_PLAIN,\n    CLASS_TO_CLASS\n}\n\nexport function testForBuffer(): boolean {\n    try {\n        Buffer.isBuffer({/* empty object */});\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nfunction instantiateArrayType(arrayType: Function): Array<any> | Set<any> {\n    const array = new (arrayType as any)();\n    if (!(array instanceof Set) && !(\"push\" in array)) {\n        return [];\n    }\n    return array;\n}\n\nexport class TransformOperationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private recursionStack = new Set<Record<string, any>>();\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private transformationType: TransformationType,\n        private options: ClassTransformOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform(source: Record<string, any> | Record<string, any>[] | any,\n        value: Record<string, any> | Record<string, any>[] | any,\n        targetType: Function | TypeMetadata,\n        arrayType: Function,\n        isMap: boolean,\n        level: number = 0): any {\n\n        if (Array.isArray(value) || value instanceof Set) {\n            const newValue = arrayType && this.transformationType === TransformationType.PLAIN_TO_CLASS ? instantiateArrayType(arrayType) : [];\n            (value as any[]).forEach((subValue, index) => {\n                const subSource = source ? source[index] : undefined;\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    let realTargetType;\n                    if (typeof targetType !== \"function\" && targetType && targetType.options && targetType.options.discriminator && targetType.options.discriminator.property && targetType.options.discriminator.subTypes) {\n                        if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                            realTargetType = targetType.options.discriminator.subTypes.find((subType) => subType.name === subValue[(targetType as { options: TypeOptions }).options.discriminator.property]);\n                            const options: TypeHelpOptions = { newObject: newValue, object: subValue, property: undefined };\n                            const newType = targetType.typeFunction(options);\n                            realTargetType === undefined ? realTargetType = newType : realTargetType = realTargetType.value;\n                            if (!targetType.options.keepDiscriminatorProperty) delete subValue[targetType.options.discriminator.property];\n                        }\n                        if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                            realTargetType = subValue.constructor;\n                        }\n                        if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                            subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;\n                        }\n                    } else {\n                        realTargetType = targetType;\n                    }\n                    const value = this.transform(subSource, subValue, realTargetType, undefined, subValue instanceof Map, level + 1);\n\n                    if (newValue instanceof Set) {\n                        newValue.add(value);\n                    } else {\n                        newValue.push(value);\n                    }\n                } else if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    if (newValue instanceof Set) {\n                        newValue.add(subValue);\n                    } else {\n                        newValue.push(subValue);\n                    }\n                }\n            });\n            return newValue;\n        } else if (targetType === String && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return String(value);\n\n        } else if (targetType === Number && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Number(value);\n\n        } else if (targetType === Boolean && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Boolean(value);\n\n        } else if ((targetType === Date || value instanceof Date) && !isMap) {\n            if (value instanceof Date) {\n                return new Date(value.valueOf());\n            }\n            if (value === null || value === undefined)\n                return value;\n            return new Date(value);\n\n        } else if (testForBuffer() && (targetType === Buffer || value instanceof Buffer) && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Buffer.from(value);\n\n        } else if (typeof value === \"object\" && value !== null) {\n\n            // try to guess the type\n            if (!targetType && value.constructor !== Object/* && TransformationType === TransformationType.CLASS_TO_PLAIN*/) targetType = value.constructor;\n            if (!targetType && source) targetType = source.constructor;\n\n            if (this.options.enableCircularCheck) {\n                // add transformed type to prevent circular references\n                this.recursionStack.add(value);\n            }\n\n            const keys = this.getKeys((targetType as Function), value);\n            let newValue: any = source ? source : {};\n            if (!source && (this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)) {\n                if (isMap) {\n                    newValue = new Map();\n                } else if (targetType) {\n                    newValue = new (targetType as any)();\n                } else {\n                    newValue = {};\n                }\n            }\n\n            // traverse over keys\n            for (const key of keys) {\n                const valueKey = key;\n                let newValueKey = key, propertyName = key;\n                if (!this.options.ignoreDecorators && targetType) {\n                    if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        const exposeMetadata = defaultMetadataStorage.findExposeMetadataByCustomName((targetType as Function), key);\n                        if (exposeMetadata) {\n                            propertyName = exposeMetadata.propertyName;\n                            newValueKey = exposeMetadata.propertyName;\n                        }\n\n                    } else if (this.transformationType === TransformationType.CLASS_TO_PLAIN || this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                        const exposeMetadata = defaultMetadataStorage.findExposeMetadata((targetType as Function), key);\n                        if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                            newValueKey = exposeMetadata.options.name;\n                        }\n                    }\n                }\n\n                // get a subvalue\n                let subValue: any = undefined;\n                if (value instanceof Map) {\n                    subValue = value.get(valueKey);\n                } else if (value[valueKey] instanceof Function) {\n                    subValue = value[valueKey]();\n                } else {\n                    subValue = value[valueKey];\n                }\n\n                // determine a type\n                let type: any = undefined, isSubValueMap = subValue instanceof Map;\n                if (targetType && isMap) {\n                    type = targetType;\n\n                } else if (targetType) {\n\n                    const metadata = defaultMetadataStorage.findTypeMetadata((targetType as Function), propertyName);\n                    if (metadata) {\n                        const options: TypeHelpOptions = { newObject: newValue, object: value, property: propertyName };\n                        const newType = metadata.typeFunction ? metadata.typeFunction(options) : metadata.reflectedType;\n                        if (metadata.options && metadata.options.discriminator && metadata.options.discriminator.property && metadata.options.discriminator.subTypes) {\n                            if (!(value[valueKey] instanceof Array)) {\n                                if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                                    type = metadata.options.discriminator.subTypes.find((subType) => {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            return subType.name === subValue[metadata.options.discriminator.property]\n                                        }\n                                    });\n                                    type === undefined ? type = newType : type = type.value;\n                                    if (!metadata.options.keepDiscriminatorProperty) {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            delete subValue[metadata.options.discriminator.property];\n                                        }\n                                    }\n                                }\n                                if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                                    type = subValue.constructor;\n                                }\n                                if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                                    subValue[metadata.options.discriminator.property] = metadata.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;\n                                }\n                            } else {\n                                type = metadata;\n                            }\n                        } else {\n                            type = newType;\n                        }\n                        isSubValueMap = isSubValueMap || metadata.reflectedType === Map;\n                    } else if (this.options.targetMaps) { // try to find a type in target maps\n                        this.options.targetMaps\n                            .filter(map => map.target === targetType && !!map.properties[propertyName])\n                            .forEach(map => type = map.properties[propertyName]);\n                    } else if(this.options.enableImplicitConversion && this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        // if we have no registererd type via the @Type() decorator then we check if we have any\n                        // type declarations in reflect-metadata (type declaration is emited only if some decorator is added to the property.)\n                        const reflectedType = Reflect.getMetadata(\"design:type\", (targetType as Function).prototype, propertyName);\n\n                        if (reflectedType) {\n                            type = reflectedType;\n                        }\n                    }\n                }\n\n                // if value is an array try to get its custom array type\n                const arrayType = Array.isArray(value[valueKey]) ? this.getReflectedType((targetType as Function), propertyName) : undefined;\n\n                // const subValueKey = TransformationType === TransformationType.PLAIN_TO_CLASS && newKeyName ? newKeyName : key;\n                const subSource = source ? source[valueKey] : undefined;\n\n                // if its deserialization then type if required\n                // if we uncomment this types like string[] will not work\n                // if (this.transformationType === TransformationType.PLAIN_TO_CLASS && !type && subValue instanceof Object && !(subValue instanceof Date))\n                //     throw new Error(`Cannot determine type for ${(targetType as any).name }.${propertyName}, did you forget to specify a @Type?`);\n\n                // if newValue is a source object that has method that match newKeyName then skip it\n                if (newValue.constructor.prototype) {\n                    const descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);\n                    if ((this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        && ((descriptor && !descriptor.set) || newValue[newValueKey] instanceof Function)) //  || TransformationType === TransformationType.CLASS_TO_CLASS\n                        continue;\n                }\n\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    const transformKey = this.transformationType === TransformationType.PLAIN_TO_CLASS ? newValueKey : key;\n                    let finalValue;\n\n                    if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                        // Get original value\n                        finalValue = value[transformKey];\n                        // Apply custom transformation\n                        finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), transformKey, value, this.transformationType);\n                        // If nothing change, it means no custom transformation was applied, so use the subValue.\n                        finalValue = (value[transformKey] === finalValue) ? subValue : finalValue;\n                        // Apply the default transformation\n                        finalValue = this.transform(subSource, finalValue, type, arrayType, isSubValueMap, level + 1);\n                    } else {\n                        finalValue = this.transform(subSource, subValue, type, arrayType, isSubValueMap, level + 1);\n                        finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), transformKey, value, this.transformationType);\n                    }\n\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    } else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                } else if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    let finalValue = subValue;\n                    finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), key, value, this.transformationType);\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    } else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                }\n\n            }\n\n            if (this.options.enableCircularCheck) {\n                this.recursionStack.delete(value);\n            }\n\n            return newValue;\n\n        } else {\n            return value;\n        }\n    }\n\n    private applyCustomTransformations(value: any, target: Function, key: string, obj: any, transformationType: TransformationType): boolean {\n        let metadatas = defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);\n\n        // apply versioning options\n        if (this.options.version !== undefined) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n\n                return this.checkVersion(metadata.options.since, metadata.options.until);\n            });\n        }\n\n        // apply grouping options\n        if (this.options.groups && this.options.groups.length) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n\n                return this.checkGroups(metadata.options.groups);\n            });\n        } else {\n            metadatas = metadatas.filter(metadata => {\n                return !metadata.options || !metadata.options.groups || !metadata.options.groups.length;\n            });\n        }\n\n        metadatas.forEach(metadata => {\n            value = metadata.transformFn(value, obj, transformationType);\n        });\n\n        return value;\n    }\n\n    // preventing circular references\n    private isCircular(object: Record<string, any>): boolean {\n        return this.recursionStack.has(object);\n    }\n\n    private getReflectedType(target: Function, propertyName: string): Function | undefined {\n        if (!target) return undefined;\n        const meta = defaultMetadataStorage.findTypeMetadata(target, propertyName);\n        return meta ? meta.reflectedType : undefined;\n    }\n\n    private getKeys(target: Function, object: Record<string, any>): string[] {\n        // determine exclusion strategy\n        let strategy = defaultMetadataStorage.getStrategy(target);\n        if (strategy === \"none\")\n            strategy = this.options.strategy || \"exposeAll\"; // exposeAll is default strategy\n\n        // get all keys that need to expose\n        let keys: any[] = [];\n        if (strategy === \"exposeAll\") {\n            if (object instanceof Map) {\n                keys = Array.from(object.keys());\n            } else {\n                keys = Object.keys(object);\n            }\n        }\n\n        if (!this.options.ignoreDecorators && target) {\n\n            // add all exposed to list of keys\n            let exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);\n            if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                exposedProperties = exposedProperties.map(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                        return exposeMetadata.options.name;\n                    }\n\n                    return key;\n                });\n            }\n            if (this.options.excludeExtraneousValues) {\n                keys = exposedProperties;\n            } else {\n                keys = keys.concat(exposedProperties);\n            }\n\n            // exclude excluded properties\n            const excludedProperties = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);\n            if (excludedProperties.length > 0) {\n                keys = keys.filter(key => {\n                    return !excludedProperties.includes(key);\n                });\n            }\n\n            // apply versioning options\n            if (this.options.version !== undefined) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n\n                    return this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);\n                });\n            }\n\n            // apply grouping options\n            if (this.options.groups && this.options.groups.length) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n\n                    return this.checkGroups(exposeMetadata.options.groups);\n                });\n            } else {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    return !exposeMetadata || !exposeMetadata.options || !exposeMetadata.options.groups || !exposeMetadata.options.groups.length;\n                });\n            }\n        }\n\n        // exclude prefixed properties\n        if (this.options.excludePrefixes && this.options.excludePrefixes.length) {\n            keys = keys.filter(key => this.options.excludePrefixes.every(prefix => {\n                return key.substr(0, prefix.length) !== prefix;\n            }));\n        }\n\n        // make sure we have unique keys\n        keys = keys.filter((key, index, self) => {\n            return self.indexOf(key) === index;\n        });\n\n        return keys;\n    }\n\n    private checkVersion(since: number, until: number): boolean {\n        let decision = true;\n        if (decision && since)\n            decision = this.options.version >= since;\n        if (decision && until)\n            decision = this.options.version < until;\n\n        return decision;\n    }\n\n    private checkGroups(groups: string[]): boolean {\n        if (!groups)\n            return true;\n\n        return this.options.groups.some(optionGroup => groups.includes(optionGroup));\n    }\n}\n\n", "import \"reflect-metadata\";\nimport {classToClass, classToClassFromExist, classToPlain, classToPlainFromExist, plainToClass, plainToClassFromExist} from \"../../src/index\";\nimport {defaultMetadataStorage} from \"../../src/storage\";\nimport {Exclude, Expose, Type} from \"../../src/decorators\";\nimport {testForBuffer} from \"../../src/TransformOperationExecutor\";\n\ndescribe(\"basic functionality\", () => {\n    it(\"should return true if Buffer is present in environment, else false\", () => {\n        expect(testForBuffer()).toBeTruthy();\n        const bufferImp = global.Buffer;\n        delete global.Buffer;\n        expect(testForBuffer()).toBeFalsy();\n        global.Buffer = bufferImp;\n    });\n\n    it(\"should convert instance of the given object to plain javascript object and should expose all properties since its a default behaviour\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n    });\n\n    it(\"should exclude extraneous values if the excludeExtraneousValues option is set to true\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            @Expose() id: number;\n            @Expose() firstName: string;\n            @Expose() lastName: string;\n        }\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            age: 12\n        };\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toHaveProperty(\"age\");\n        expect(transformedUser.id).toBeUndefined();\n\n        const transformedUserWithoutExtra = plainToClass(User, fromPlainUser, {excludeExtraneousValues: true});\n        expect(transformedUserWithoutExtra).toBeInstanceOf(User);\n        expect(transformedUserWithoutExtra).not.toHaveProperty(\"age\");\n    });\n\n    it(\"should exclude all objects marked with @Exclude() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n            @Exclude()\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27, password: \"yayayaya\"};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"yayayaya\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n    });\n\n    it(\"should exclude all properties from object if whole class is marked with @Exclude() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        @Exclude()\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n            password: string;\n        }\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({});\n        expect(plainUser.firstName).toBeUndefined();\n        expect(plainUser.lastName).toBeUndefined();\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({});\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({});\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1\n        });\n    });\n\n    it(\"should exclude all properties from object if whole class is marked with @Exclude() decorator, but include properties marked with @Expose() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        @Exclude()\n        class User {\n            id: number;\n\n            @Expose()\n            firstName: string;\n\n            @Expose()\n            lastName: string;\n\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n    });\n\n    it(\"should exclude all properties from object if its defined via transformation options, but include properties marked with @Expose() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n\n            @Expose()\n            firstName: string;\n\n            @Expose()\n            lastName: string;\n\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user, {strategy: \"excludeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser, {strategy: \"excludeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser, {strategy: \"excludeAll\"});\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {strategy: \"excludeAll\"});\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassUser = classToClass(user, {strategy: \"excludeAll\"});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {strategy: \"excludeAll\"});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n    });\n\n    it(\"should expose all properties from object if its defined via transformation options, but exclude properties marked with @Exclude() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n\n            @Exclude()\n            lastName: string;\n\n            @Exclude()\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user, {strategy: \"exposeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\"\n        });\n        expect(plainUser.lastName).toBeUndefined();\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser, {strategy: \"exposeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\"\n        });\n\n        const classToClassUser = classToClass(user, {strategy: \"exposeAll\"});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {strategy: \"exposeAll\"});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\"\n        });\n    });\n\n    it(\"should convert values to specific types if they are set via @Type decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n\n            @Type(type => String)\n            firstName: string;\n\n            @Type(type => String)\n            lastName: string;\n\n            @Type(type => Number)\n            password: number;\n\n            @Type(type => Boolean)\n            isActive: boolean;\n\n            @Type(type => Date)\n            registrationDate: Date;\n\n            @Type(type => String)\n            lastVisitDate: string;\n\n            @Type(type => Buffer)\n            uuidBuffer: Buffer;\n\n            @Type(type => String)\n            nullableString?: null | string;\n\n            @Type(type => Number)\n            nullableNumber?: null | number;\n\n            @Type(type => Boolean)\n            nullableBoolean?: null | boolean;\n\n            @Type(type => Date)\n            nullableDate?: null | Date;\n\n            @Type(type => Buffer)\n            nullableBuffer?: null | Buffer;\n        }\n\n        const date = new Date();\n        const user = new User();\n        const uuid = Buffer.from('1234');\n        user.firstName = 321 as any;\n        user.lastName = 123 as any;\n        user.password = \"123\" as any;\n        user.isActive = \"1\" as any;\n        user.registrationDate = date.toString() as any;\n        user.lastVisitDate = date as any;\n        user.uuidBuffer = uuid as any;\n        user.nullableString = null as any;\n        user.nullableNumber = null as any;\n        user.nullableBoolean = null as any;\n        user.nullableDate = null as any;\n        user.nullableBuffer = null as any;\n\n        const fromPlainUser = {\n            firstName: 321,\n            lastName: 123,\n            password: \"123\",\n            isActive: \"1\",\n            registrationDate: date.toString(),\n            lastVisitDate: date,\n            uuidBuffer: uuid,\n            nullableString: null as null | string,\n            nullableNumber: null as null | string,\n            nullableBoolean: null as null | string,\n            nullableDate: null as null | string,\n            nullableBuffer: null as null | string,\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user, {strategy: \"exposeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser, {strategy: \"exposeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const classToClassUser = classToClass(user, {strategy: \"exposeAll\"});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {strategy: \"exposeAll\"});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n    });\n\n    it(\"should transform nested objects too and make sure their decorators are used too\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            name: string;\n\n            @Exclude()\n            filename: string;\n\n            uploadDate: Date;\n        }\n\n        class User {\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            photo: Photo; // type should be automatically guessed\n        }\n\n        const photo = new Photo();\n        photo.id = 1;\n        photo.name = \"Me\";\n        photo.filename = \"iam.jpg\";\n        photo.uploadDate = new Date();\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = photo;\n\n        const plainUser: any = classToPlain(user, {strategy: \"exposeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser.photo).not.toBeInstanceOf(Photo);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: photo.uploadDate\n            }\n        });\n        expect(plainUser.password).toBeUndefined();\n        expect(plainUser.photo.filename).toBeUndefined();\n        expect(plainUser.photo.uploadDate).toEqual(photo.uploadDate);\n        expect(plainUser.photo.uploadDate).not.toBe(photo.uploadDate);\n\n        const existUser = {id: 1, age: 27, photo: {id: 2, description: \"photo\"}};\n        const plainUser2: any = classToPlainFromExist(user, existUser, {strategy: \"exposeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2.photo).not.toBeInstanceOf(Photo);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: photo.uploadDate,\n                description: \"photo\"\n            }\n        });\n        expect(plainUser2).toEqual(existUser);\n        expect(plainUser2.password).toBeUndefined();\n        expect(plainUser2.photo.filename).toBeUndefined();\n        expect(plainUser2.photo.uploadDate).toEqual(photo.uploadDate);\n        expect(plainUser2.photo.uploadDate).not.toBe(photo.uploadDate);\n    });\n\n    it(\"should transform nested objects too and make sure given type is used instead of automatically guessed one\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            name: string;\n\n            @Exclude()\n            filename: string;\n        }\n\n        class ExtendedPhoto implements Photo {\n            id: number;\n\n            @Exclude()\n            name: string;\n\n            filename: string;\n        }\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(type => ExtendedPhoto) // force specific type\n            photo: Photo;\n        }\n\n        const photo = new Photo();\n        photo.id = 1;\n        photo.name = \"Me\";\n        photo.filename = \"iam.jpg\";\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = photo;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"iam.jpg\"\n            }\n        });\n        expect(plainUser.password).toBeUndefined();\n        expect(plainUser.photo.name).toBeUndefined();\n    });\n\n    it(\"should convert given plain object to class instance object\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            name: string;\n\n            @Exclude()\n            filename: string;\n\n            metadata: string;\n            uploadDate: Date;\n        }\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(type => Photo)\n            photo: Photo;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.name = \"Me\";\n        user.photo.filename = \"iam.jpg\";\n        user.photo.uploadDate = new Date();\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                filename: \"iam.jpg\",\n                uploadDate: new Date(),\n            }\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n        const fromExistPhoto = new Photo();\n        fromExistPhoto.metadata = \"taken by Camera\";\n        fromExistUser.photo = fromExistPhoto;\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser.photo).toBeInstanceOf(Photo);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: fromPlainUser.photo.uploadDate\n            }\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toEqual(fromExistUser);\n        expect(fromExistTransformedUser.photo).toEqual(fromExistPhoto);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                metadata: \"taken by Camera\",\n                uploadDate: fromPlainUser.photo.uploadDate\n            }\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).not.toEqual(user.photo);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: user.photo.uploadDate\n            }\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).not.toEqual(user.photo);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                metadata: \"taken by Camera\",\n                uploadDate: user.photo.uploadDate\n            }\n        });\n    });\n\n    it(\"should expose only properties that match given group\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n\n            @Expose({\n                groups: [\"user\", \"guest\"]\n            })\n            filename: string;\n\n            @Expose({\n                groups: [\"admin\"]\n            })\n            status: number;\n\n            metadata: string;\n        }\n\n        class User {\n            id: number;\n            firstName: string;\n\n            @Expose({\n                groups: [\"user\", \"guest\"]\n            })\n            lastName: string;\n\n            @Expose({\n                groups: [\"user\"]\n            })\n            password: string;\n\n            @Expose({\n                groups: [\"admin\"]\n            })\n            isActive: boolean;\n\n            @Type(type => Photo)\n            photo: Photo;\n\n            @Expose({\n                groups: [\"admin\"]\n            })\n            @Type(type => Photo)\n            photos: Photo[];\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.isActive = false;\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.filename = \"myphoto.jpg\";\n        user.photo.status = 1;\n        user.photos = [user.photo];\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            isActive: false,\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1,\n            }]\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n        fromExistUser.photo = new Photo();\n        fromExistUser.photo.metadata = \"taken by Camera\";\n\n        const plainUser1: any = classToPlain(user);\n        expect(plainUser1).not.toBeInstanceOf(User);\n        expect(plainUser1).toEqual({\n            firstName: \"Umed\",\n            photo: {\n                id: 1\n            }\n        });\n        expect(plainUser1.lastName).toBeUndefined();\n        expect(plainUser1.password).toBeUndefined();\n        expect(plainUser1.isActive).toBeUndefined();\n\n        const plainUser2: any = classToPlain(user, {groups: [\"user\"]});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n        expect(plainUser2.isActive).toBeUndefined();\n\n        const transformedUser2 = plainToClass(User, fromPlainUser, {groups: [\"user\"]});\n        expect(transformedUser2).toBeInstanceOf(User);\n        expect(transformedUser2.photo).toBeInstanceOf(Photo);\n        expect(transformedUser2).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {groups: [\"user\"]});\n        expect(fromExistTransformedUser).toEqual(fromExistUser);\n        expect(fromExistTransformedUser.photo).toEqual(fromExistUser.photo);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                metadata: \"taken by Camera\",\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const classToClassUser = classToClass(user, {groups: [\"user\"]});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).not.toEqual(user.photo);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {groups: [\"user\"]});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).not.toEqual(user.photo);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                metadata: \"taken by Camera\",\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const plainUser3: any = classToPlain(user, {groups: [\"guest\"]});\n        expect(plainUser3).not.toBeInstanceOf(User);\n        expect(plainUser3).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n        expect(plainUser3.password).toBeUndefined();\n        expect(plainUser3.isActive).toBeUndefined();\n\n        const transformedUser3 = plainToClass(User, fromPlainUser, {groups: [\"guest\"]});\n        expect(transformedUser3).toBeInstanceOf(User);\n        expect(transformedUser3.photo).toBeInstanceOf(Photo);\n        expect(transformedUser3).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const plainUser4: any = classToPlain(user, {groups: [\"admin\"]});\n        expect(plainUser4).not.toBeInstanceOf(User);\n        expect(plainUser4).toEqual({\n            firstName: \"Umed\",\n            isActive: false,\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n        expect(plainUser4.lastName).toBeUndefined();\n        expect(plainUser4.password).toBeUndefined();\n\n        const transformedUser4 = plainToClass(User, fromPlainUser, {groups: [\"admin\"]});\n        expect(transformedUser4).toBeInstanceOf(User);\n        expect(transformedUser4.photo).toBeInstanceOf(Photo);\n        expect(transformedUser4.photos[0]).toBeInstanceOf(Photo);\n        expect(transformedUser4).toEqual({\n            firstName: \"Umed\",\n            isActive: false,\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n\n        const plainUser5: any = classToPlain(user, {groups: [\"admin\", \"user\"]});\n        expect(plainUser5).not.toBeInstanceOf(User);\n        expect(plainUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            isActive: false,\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n\n        const transformedUser5 = plainToClass(User, fromPlainUser, {groups: [\"admin\", \"user\"]});\n        expect(transformedUser5).toBeInstanceOf(User);\n        expect(transformedUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            isActive: false,\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n    });\n\n    it(\"should expose only properties that match given version\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n\n            @Expose({\n                since: 1.5,\n                until: 2\n            })\n            filename: string;\n\n            @Expose({\n                since: 2\n            })\n            status: number;\n        }\n\n        class User {\n            @Expose({\n                since: 1,\n                until: 2\n            })\n            firstName: string;\n\n            @Expose({\n                since: 0.5\n            })\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(type => Photo)\n            photo: Photo;\n\n            @Expose({\n                since: 3\n            })\n            @Type(type => Photo)\n            photos: Photo[];\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.filename = \"myphoto.jpg\";\n        user.photo.status = 1;\n        user.photos = [user.photo];\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1,\n            }]\n        };\n\n        const plainUser1: any = classToPlain(user);\n        expect(plainUser1).not.toBeInstanceOf(User);\n        expect(plainUser1).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n\n        const transformedUser1 = plainToClass(User, fromPlainUser);\n        expect(transformedUser1).toBeInstanceOf(User);\n        expect(transformedUser1.photo).toBeInstanceOf(Photo);\n        expect(transformedUser1.photos[0]).toBeInstanceOf(Photo);\n        expect(transformedUser1).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n\n        const plainUser2: any = classToPlain(user, {version: 0.3});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            photo: {\n                id: 1\n            }\n        });\n\n        const transformedUser2 = plainToClass(User, fromPlainUser, {version: 0.3});\n        expect(transformedUser2).toBeInstanceOf(User);\n        expect(transformedUser2.photo).toBeInstanceOf(Photo);\n        expect(transformedUser2).toEqual({\n            photo: {\n                id: 1\n            }\n        });\n\n        const plainUser3: any = classToPlain(user, {version: 0.5});\n        expect(plainUser3).not.toBeInstanceOf(User);\n        expect(plainUser3).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const transformedUser3 = plainToClass(User, fromPlainUser, {version: 0.5});\n        expect(transformedUser3).toBeInstanceOf(User);\n        expect(transformedUser3.photo).toBeInstanceOf(Photo);\n        expect(transformedUser3).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const plainUser4: any = classToPlain(user, {version: 1});\n        expect(plainUser4).not.toBeInstanceOf(User);\n        expect(plainUser4).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const transformedUser4 = plainToClass(User, fromPlainUser, {version: 1});\n        expect(transformedUser4).toBeInstanceOf(User);\n        expect(transformedUser4.photo).toBeInstanceOf(Photo);\n        expect(transformedUser4).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const plainUser5: any = classToPlain(user, {version: 1.5});\n        expect(plainUser5).not.toBeInstanceOf(User);\n        expect(plainUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const transformedUser5 = plainToClass(User, fromPlainUser, {version: 1.5});\n        expect(transformedUser5).toBeInstanceOf(User);\n        expect(transformedUser5.photo).toBeInstanceOf(Photo);\n        expect(transformedUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const plainUser6: any = classToPlain(user, {version: 2});\n        expect(plainUser6).not.toBeInstanceOf(User);\n        expect(plainUser6).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            }\n        });\n\n        const transformedUser6 = plainToClass(User, fromPlainUser, {version: 2});\n        expect(transformedUser6).toBeInstanceOf(User);\n        expect(transformedUser6.photo).toBeInstanceOf(Photo);\n        expect(transformedUser6).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            }\n        });\n\n        const plainUser7: any = classToPlain(user, {version: 3});\n        expect(plainUser7).not.toBeInstanceOf(User);\n        expect(plainUser7).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n\n        const transformedUser7 = plainToClass(User, fromPlainUser, {version: 3});\n        expect(transformedUser7).toBeInstanceOf(User);\n        expect(transformedUser7.photo).toBeInstanceOf(Photo);\n        expect(transformedUser7.photos[0]).toBeInstanceOf(Photo);\n        expect(transformedUser7).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n\n    });\n\n    it(\"should expose method and accessors that have @Expose()\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Expose()\n            get name(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n\n            @Expose()\n            getName(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\",\n            getName: \"Umed Khudoiberdiev\"\n        });\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        const likeUser = new User();\n        likeUser.firstName = \"Umed\";\n        likeUser.lastName = \"Khudoiberdiev\";\n        expect(transformedUser).toEqual(likeUser);\n    });\n\n    it(\"should expose with alternative name if its given\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            @Expose({name: \"myName\"})\n            firstName: string;\n\n            @Expose({name: \"secondName\"})\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Expose()\n            get name(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n\n            @Expose({name: \"fullName\"})\n            getName(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            myName: \"Umed\",\n            secondName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            myName: \"Umed\",\n            secondName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\",\n            fullName: \"Umed Khudoiberdiev\"\n        });\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        const likeUser = new User();\n        likeUser.firstName = \"Umed\";\n        likeUser.lastName = \"Khudoiberdiev\";\n        expect(transformedUser).toEqual(likeUser);\n    });\n\n    it(\"should exclude all prefixed properties if prefix is given\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            $filename: string;\n            status: number;\n        }\n\n        class User {\n            $system: string;\n            _firstName: string;\n            _lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(() => Photo)\n            photo: Photo;\n\n            @Expose()\n            get name(): string {\n                return this._firstName + \" \" + this._lastName;\n            }\n        }\n\n        const user = new User();\n        user.$system = \"@#$%^&*token(*&^%$#@!\";\n        user._firstName = \"Umed\";\n        user._lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.$filename = \"myphoto.jpg\";\n        user.photo.status = 1;\n\n        const fromPlainUser = {\n            $system: \"@#$%^&*token(*&^%$#@!\",\n            _firstName: \"Khudoiberdiev\",\n            _lastName: \"imnosuperman\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                $filename: \"myphoto.jpg\",\n                status: 1,\n            }\n        };\n\n        const plainUser: any = classToPlain(user, {excludePrefixes: [\"_\", \"$\"]});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            name: \"Umed Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            }\n        });\n\n        const transformedUser = plainToClass(User, fromPlainUser, {excludePrefixes: [\"_\", \"$\"]});\n        expect(transformedUser).toBeInstanceOf(User);\n        const likeUser = new User();\n        likeUser.photo = new Photo();\n        likeUser.photo.id = 1;\n        likeUser.photo.status = 1;\n        expect(transformedUser).toEqual(likeUser);\n    });\n\n    it(\"should transform array\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Expose()\n            get name(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n        }\n\n        const user1 = new User();\n        user1.firstName = \"Umed\";\n        user1.lastName = \"Khudoiberdiev\";\n        user1.password = \"imnosuperman\";\n\n        const user2 = new User();\n        user2.firstName = \"Dima\";\n        user2.lastName = \"Zotov\";\n        user2.password = \"imnomesser\";\n\n        const users = [user1, user2];\n\n        const plainUsers: any = classToPlain(users);\n        expect(plainUsers).toEqual([{\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\"\n        }, {\n            firstName: \"Dima\",\n            lastName: \"Zotov\",\n            name: \"Dima Zotov\"\n        }]);\n\n        const fromPlainUsers = [{\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\"\n        }, {\n            firstName: \"Dima\",\n            lastName: \"Zotov\",\n            name: \"Dima Zotov\"\n        }];\n\n        const existUsers = [{id: 1, age: 27}, {id: 2, age: 30}];\n        const plainUser2 = classToPlainFromExist(users, existUsers);\n        expect(plainUser2).toEqual([{\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\"\n        }, {\n            id: 2,\n            age: 30,\n            firstName: \"Dima\",\n            lastName: \"Zotov\",\n            name: \"Dima Zotov\"\n        }]);\n\n        const transformedUser = plainToClass(User, fromPlainUsers);\n\n        expect(transformedUser[0]).toBeInstanceOf(User);\n        expect(transformedUser[1]).toBeInstanceOf(User);\n        const likeUser1 = new User();\n        likeUser1.firstName = \"Umed\";\n        likeUser1.lastName = \"Khudoiberdiev\";\n\n        const likeUser2 = new User();\n        likeUser2.firstName = \"Dima\";\n        likeUser2.lastName = \"Zotov\";\n        expect(transformedUser).toEqual([likeUser1, likeUser2]);\n\n        const classToClassUsers = classToClass(users);\n        expect(classToClassUsers[0]).toBeInstanceOf(User);\n        expect(classToClassUsers[1]).toBeInstanceOf(User);\n        expect(classToClassUsers[0]).not.toEqual(user1);\n        expect(classToClassUsers[1]).not.toEqual(user1);\n\n        const classUserLike1 = new User();\n        classUserLike1.firstName = \"Umed\";\n        classUserLike1.lastName = \"Khudoiberdiev\";\n\n        const classUserLike2 = new User();\n        classUserLike2.firstName = \"Dima\";\n        classUserLike2.lastName = \"Zotov\";\n\n        expect(classToClassUsers).toEqual([classUserLike1, classUserLike2]);\n\n        const fromExistUser1 = new User();\n        fromExistUser1.id = 1;\n\n        const fromExistUser2 = new User();\n        fromExistUser2.id = 2;\n\n        const fromExistUsers = [fromExistUser1, fromExistUser2];\n\n        const classToClassFromExistUser = classToClassFromExist(users, fromExistUsers);\n        expect(classToClassFromExistUser[0]).toBeInstanceOf(User);\n        expect(classToClassFromExistUser[1]).toBeInstanceOf(User);\n        expect(classToClassFromExistUser[0]).not.toEqual(user1);\n        expect(classToClassFromExistUser[1]).not.toEqual(user1);\n        expect(classToClassFromExistUser).toEqual(fromExistUsers);\n\n        const fromExistUserLike1 = new User();\n        fromExistUserLike1.id = 1;\n        fromExistUserLike1.firstName = \"Umed\";\n        fromExistUserLike1.lastName = \"Khudoiberdiev\";\n\n        const fromExistUserLike2 = new User();\n        fromExistUserLike2.id = 2;\n        fromExistUserLike2.firstName = \"Dima\";\n        fromExistUserLike2.lastName = \"Zotov\";\n\n        expect(classToClassFromExistUser).toEqual([fromExistUserLike1, fromExistUserLike2]);\n    });\n\n    it(\"should transform objects with null prototype\", () => {\n        class TestClass {\n            prop: string;\n        }\n\n        const obj = Object.create(null);\n        obj.a = \"JS FTW\";\n\n        const transformedClass = plainToClass(TestClass, obj);\n        expect(transformedClass).toBeInstanceOf(TestClass);\n    });\n\n    it(\"should default union types where the plain type is an array to an array result\", () => {\n        class User {\n            name: string;\n        }\n\n        class TestClass {\n            @Type(() => User)\n            usersDefined: User[] | undefined;\n\n            @Type(() => User)\n            usersUndefined: User[] | undefined;\n        }\n\n        const obj = Object.create(null);\n        obj.usersDefined = [{name: \"a-name\"}];\n        obj.usersUndefined = undefined;\n\n        const transformedClass = plainToClass(TestClass, obj as Record<string, any>);\n\n        expect(transformedClass).toBeInstanceOf(TestClass);\n\n        expect(transformedClass.usersDefined).toBeInstanceOf(Array);\n        expect(transformedClass.usersDefined.length).toEqual(1);\n        expect(transformedClass.usersDefined[0]).toBeInstanceOf(User);\n        expect(transformedClass.usersDefined[0].name).toEqual(\"a-name\");\n\n        expect(transformedClass.usersUndefined).toBeUndefined();\n    });\n});\n"], "fixing_code": ["import { ClassTransformOptions } from \"./ClassTransformOptions\";\nimport { defaultMetadataStorage } from \"./storage\";\nimport { TypeHelpOptions, TypeOptions } from \"./metadata/ExposeExcludeOptions\";\nimport { TypeMetadata } from \"./metadata/TypeMetadata\";\n\nexport enum TransformationType {\n    PLAIN_TO_CLASS,\n    CLASS_TO_PLAIN,\n    CLASS_TO_CLASS\n}\n\nexport function testForBuffer(): boolean {\n    try {\n        Buffer.isBuffer({/* empty object */});\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nfunction instantiateArrayType(arrayType: Function): Array<any> | Set<any> {\n    const array = new (arrayType as any)();\n    if (!(array instanceof Set) && !(\"push\" in array)) {\n        return [];\n    }\n    return array;\n}\n\nexport class TransformOperationExecutor {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private recursionStack = new Set<Record<string, any>>();\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private transformationType: TransformationType,\n        private options: ClassTransformOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform(source: Record<string, any> | Record<string, any>[] | any,\n        value: Record<string, any> | Record<string, any>[] | any,\n        targetType: Function | TypeMetadata,\n        arrayType: Function,\n        isMap: boolean,\n        level: number = 0): any {\n\n        if (Array.isArray(value) || value instanceof Set) {\n            const newValue = arrayType && this.transformationType === TransformationType.PLAIN_TO_CLASS ? instantiateArrayType(arrayType) : [];\n            (value as any[]).forEach((subValue, index) => {\n                const subSource = source ? source[index] : undefined;\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    let realTargetType;\n                    if (typeof targetType !== \"function\" && targetType && targetType.options && targetType.options.discriminator && targetType.options.discriminator.property && targetType.options.discriminator.subTypes) {\n                        if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                            realTargetType = targetType.options.discriminator.subTypes.find((subType) => subType.name === subValue[(targetType as { options: TypeOptions }).options.discriminator.property]);\n                            const options: TypeHelpOptions = { newObject: newValue, object: subValue, property: undefined };\n                            const newType = targetType.typeFunction(options);\n                            realTargetType === undefined ? realTargetType = newType : realTargetType = realTargetType.value;\n                            if (!targetType.options.keepDiscriminatorProperty) delete subValue[targetType.options.discriminator.property];\n                        }\n                        if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                            realTargetType = subValue.constructor;\n                        }\n                        if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                            subValue[targetType.options.discriminator.property] = targetType.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;\n                        }\n                    } else {\n                        realTargetType = targetType;\n                    }\n                    const value = this.transform(subSource, subValue, realTargetType, undefined, subValue instanceof Map, level + 1);\n\n                    if (newValue instanceof Set) {\n                        newValue.add(value);\n                    } else {\n                        newValue.push(value);\n                    }\n                } else if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    if (newValue instanceof Set) {\n                        newValue.add(subValue);\n                    } else {\n                        newValue.push(subValue);\n                    }\n                }\n            });\n            return newValue;\n        } else if (targetType === String && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return String(value);\n\n        } else if (targetType === Number && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Number(value);\n\n        } else if (targetType === Boolean && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Boolean(value);\n\n        } else if ((targetType === Date || value instanceof Date) && !isMap) {\n            if (value instanceof Date) {\n                return new Date(value.valueOf());\n            }\n            if (value === null || value === undefined)\n                return value;\n            return new Date(value);\n\n        } else if (testForBuffer() && (targetType === Buffer || value instanceof Buffer) && !isMap) {\n            if (value === null || value === undefined)\n                return value;\n            return Buffer.from(value);\n\n        } else if (typeof value === \"object\" && value !== null) {\n\n            // try to guess the type\n            if (!targetType && value.constructor !== Object/* && TransformationType === TransformationType.CLASS_TO_PLAIN*/) targetType = value.constructor;\n            if (!targetType && source) targetType = source.constructor;\n\n            if (this.options.enableCircularCheck) {\n                // add transformed type to prevent circular references\n                this.recursionStack.add(value);\n            }\n\n            const keys = this.getKeys((targetType as Function), value);\n            let newValue: any = source ? source : {};\n            if (!source && (this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)) {\n                if (isMap) {\n                    newValue = new Map();\n                } else if (targetType) {\n                    newValue = new (targetType as any)();\n                } else {\n                    newValue = {};\n                }\n            }\n\n            // traverse over keys\n            for (const key of keys) {\n                if (key === '__proto__' || key === 'constructor') {\n                    continue;\n                }\n\n                const valueKey = key;\n                let newValueKey = key, propertyName = key;\n                if (!this.options.ignoreDecorators && targetType) {\n                    if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        const exposeMetadata = defaultMetadataStorage.findExposeMetadataByCustomName((targetType as Function), key);\n                        if (exposeMetadata) {\n                            propertyName = exposeMetadata.propertyName;\n                            newValueKey = exposeMetadata.propertyName;\n                        }\n\n                    } else if (this.transformationType === TransformationType.CLASS_TO_PLAIN || this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                        const exposeMetadata = defaultMetadataStorage.findExposeMetadata((targetType as Function), key);\n                        if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                            newValueKey = exposeMetadata.options.name;\n                        }\n                    }\n                }\n\n                // get a subvalue\n                let subValue: any = undefined;\n                if (value instanceof Map) {\n                    subValue = value.get(valueKey);\n                } else if (value[valueKey] instanceof Function) {\n                    subValue = value[valueKey]();\n                } else {\n                    subValue = value[valueKey];\n                }\n\n                // determine a type\n                let type: any = undefined, isSubValueMap = subValue instanceof Map;\n                if (targetType && isMap) {\n                    type = targetType;\n\n                } else if (targetType) {\n\n                    const metadata = defaultMetadataStorage.findTypeMetadata((targetType as Function), propertyName);\n                    if (metadata) {\n                        const options: TypeHelpOptions = { newObject: newValue, object: value, property: propertyName };\n                        const newType = metadata.typeFunction ? metadata.typeFunction(options) : metadata.reflectedType;\n                        if (metadata.options && metadata.options.discriminator && metadata.options.discriminator.property && metadata.options.discriminator.subTypes) {\n                            if (!(value[valueKey] instanceof Array)) {\n                                if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                                    type = metadata.options.discriminator.subTypes.find((subType) => {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            return subType.name === subValue[metadata.options.discriminator.property]\n                                        }\n                                    });\n                                    type === undefined ? type = newType : type = type.value;\n                                    if (!metadata.options.keepDiscriminatorProperty) {\n                                        if (subValue && metadata.options.discriminator.property in subValue) {\n                                            delete subValue[metadata.options.discriminator.property];\n                                        }\n                                    }\n                                }\n                                if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                                    type = subValue.constructor;\n                                }\n                                if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                                    subValue[metadata.options.discriminator.property] = metadata.options.discriminator.subTypes.find((subType) => subType.value === subValue.constructor).name;\n                                }\n                            } else {\n                                type = metadata;\n                            }\n                        } else {\n                            type = newType;\n                        }\n                        isSubValueMap = isSubValueMap || metadata.reflectedType === Map;\n                    } else if (this.options.targetMaps) { // try to find a type in target maps\n                        this.options.targetMaps\n                            .filter(map => map.target === targetType && !!map.properties[propertyName])\n                            .forEach(map => type = map.properties[propertyName]);\n                    } else if(this.options.enableImplicitConversion && this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                        // if we have no registererd type via the @Type() decorator then we check if we have any\n                        // type declarations in reflect-metadata (type declaration is emited only if some decorator is added to the property.)\n                        const reflectedType = Reflect.getMetadata(\"design:type\", (targetType as Function).prototype, propertyName);\n\n                        if (reflectedType) {\n                            type = reflectedType;\n                        }\n                    }\n                }\n\n                // if value is an array try to get its custom array type\n                const arrayType = Array.isArray(value[valueKey]) ? this.getReflectedType((targetType as Function), propertyName) : undefined;\n\n                // const subValueKey = TransformationType === TransformationType.PLAIN_TO_CLASS && newKeyName ? newKeyName : key;\n                const subSource = source ? source[valueKey] : undefined;\n\n                // if its deserialization then type if required\n                // if we uncomment this types like string[] will not work\n                // if (this.transformationType === TransformationType.PLAIN_TO_CLASS && !type && subValue instanceof Object && !(subValue instanceof Date))\n                //     throw new Error(`Cannot determine type for ${(targetType as any).name }.${propertyName}, did you forget to specify a @Type?`);\n\n                // if newValue is a source object that has method that match newKeyName then skip it\n                if (newValue.constructor.prototype) {\n                    const descriptor = Object.getOwnPropertyDescriptor(newValue.constructor.prototype, newValueKey);\n                    if ((this.transformationType === TransformationType.PLAIN_TO_CLASS || this.transformationType === TransformationType.CLASS_TO_CLASS)\n                        // eslint-disable-next-line @typescript-eslint/unbound-method\n                        && ((descriptor && !descriptor.set) || newValue[newValueKey] instanceof Function)) //  || TransformationType === TransformationType.CLASS_TO_CLASS\n                        continue;\n                }\n\n                if (!this.options.enableCircularCheck || !this.isCircular(subValue)) {\n                    const transformKey = this.transformationType === TransformationType.PLAIN_TO_CLASS ? newValueKey : key;\n                    let finalValue;\n\n                    if (this.transformationType === TransformationType.CLASS_TO_PLAIN) {\n                        // Get original value\n                        finalValue = value[transformKey];\n                        // Apply custom transformation\n                        finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), transformKey, value, this.transformationType);\n                        // If nothing change, it means no custom transformation was applied, so use the subValue.\n                        finalValue = (value[transformKey] === finalValue) ? subValue : finalValue;\n                        // Apply the default transformation\n                        finalValue = this.transform(subSource, finalValue, type, arrayType, isSubValueMap, level + 1);\n                    } else {\n                        finalValue = this.transform(subSource, subValue, type, arrayType, isSubValueMap, level + 1);\n                        finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), transformKey, value, this.transformationType);\n                    }\n\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    } else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                } else if (this.transformationType === TransformationType.CLASS_TO_CLASS) {\n                    let finalValue = subValue;\n                    finalValue = this.applyCustomTransformations(finalValue, (targetType as Function), key, value, this.transformationType);\n                    if (newValue instanceof Map) {\n                        newValue.set(newValueKey, finalValue);\n                    } else {\n                        newValue[newValueKey] = finalValue;\n                    }\n                }\n\n            }\n\n            if (this.options.enableCircularCheck) {\n                this.recursionStack.delete(value);\n            }\n\n            return newValue;\n\n        } else {\n            return value;\n        }\n    }\n\n    private applyCustomTransformations(value: any, target: Function, key: string, obj: any, transformationType: TransformationType): boolean {\n        let metadatas = defaultMetadataStorage.findTransformMetadatas(target, key, this.transformationType);\n\n        // apply versioning options\n        if (this.options.version !== undefined) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n\n                return this.checkVersion(metadata.options.since, metadata.options.until);\n            });\n        }\n\n        // apply grouping options\n        if (this.options.groups && this.options.groups.length) {\n            metadatas = metadatas.filter(metadata => {\n                if (!metadata.options)\n                    return true;\n\n                return this.checkGroups(metadata.options.groups);\n            });\n        } else {\n            metadatas = metadatas.filter(metadata => {\n                return !metadata.options || !metadata.options.groups || !metadata.options.groups.length;\n            });\n        }\n\n        metadatas.forEach(metadata => {\n            value = metadata.transformFn(value, obj, transformationType);\n        });\n\n        return value;\n    }\n\n    // preventing circular references\n    private isCircular(object: Record<string, any>): boolean {\n        return this.recursionStack.has(object);\n    }\n\n    private getReflectedType(target: Function, propertyName: string): Function | undefined {\n        if (!target) return undefined;\n        const meta = defaultMetadataStorage.findTypeMetadata(target, propertyName);\n        return meta ? meta.reflectedType : undefined;\n    }\n\n    private getKeys(target: Function, object: Record<string, any>): string[] {\n        // determine exclusion strategy\n        let strategy = defaultMetadataStorage.getStrategy(target);\n        if (strategy === \"none\")\n            strategy = this.options.strategy || \"exposeAll\"; // exposeAll is default strategy\n\n        // get all keys that need to expose\n        let keys: any[] = [];\n        if (strategy === \"exposeAll\") {\n            if (object instanceof Map) {\n                keys = Array.from(object.keys());\n            } else {\n                keys = Object.keys(object);\n            }\n        }\n\n        if (!this.options.ignoreDecorators && target) {\n\n            // add all exposed to list of keys\n            let exposedProperties = defaultMetadataStorage.getExposedProperties(target, this.transformationType);\n            if (this.transformationType === TransformationType.PLAIN_TO_CLASS) {\n                exposedProperties = exposedProperties.map(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (exposeMetadata && exposeMetadata.options && exposeMetadata.options.name) {\n                        return exposeMetadata.options.name;\n                    }\n\n                    return key;\n                });\n            }\n            if (this.options.excludeExtraneousValues) {\n                keys = exposedProperties;\n            } else {\n                keys = keys.concat(exposedProperties);\n            }\n\n            // exclude excluded properties\n            const excludedProperties = defaultMetadataStorage.getExcludedProperties(target, this.transformationType);\n            if (excludedProperties.length > 0) {\n                keys = keys.filter(key => {\n                    return !excludedProperties.includes(key);\n                });\n            }\n\n            // apply versioning options\n            if (this.options.version !== undefined) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n\n                    return this.checkVersion(exposeMetadata.options.since, exposeMetadata.options.until);\n                });\n            }\n\n            // apply grouping options\n            if (this.options.groups && this.options.groups.length) {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    if (!exposeMetadata || !exposeMetadata.options)\n                        return true;\n\n                    return this.checkGroups(exposeMetadata.options.groups);\n                });\n            } else {\n                keys = keys.filter(key => {\n                    const exposeMetadata = defaultMetadataStorage.findExposeMetadata(target, key);\n                    return !exposeMetadata || !exposeMetadata.options || !exposeMetadata.options.groups || !exposeMetadata.options.groups.length;\n                });\n            }\n        }\n\n        // exclude prefixed properties\n        if (this.options.excludePrefixes && this.options.excludePrefixes.length) {\n            keys = keys.filter(key => this.options.excludePrefixes.every(prefix => {\n                return key.substr(0, prefix.length) !== prefix;\n            }));\n        }\n\n        // make sure we have unique keys\n        keys = keys.filter((key, index, self) => {\n            return self.indexOf(key) === index;\n        });\n\n        return keys;\n    }\n\n    private checkVersion(since: number, until: number): boolean {\n        let decision = true;\n        if (decision && since)\n            decision = this.options.version >= since;\n        if (decision && until)\n            decision = this.options.version < until;\n\n        return decision;\n    }\n\n    private checkGroups(groups: string[]): boolean {\n        if (!groups)\n            return true;\n\n        return this.options.groups.some(optionGroup => groups.includes(optionGroup));\n    }\n}\n\n", "import \"reflect-metadata\";\nimport {classToClass, classToClassFromExist, classToPlain, classToPlainFromExist, plainToClass, plainToClassFromExist} from \"../../src/index\";\nimport {defaultMetadataStorage} from \"../../src/storage\";\nimport {Exclude, Expose, Type} from \"../../src/decorators\";\nimport {testForBuffer} from \"../../src/TransformOperationExecutor\";\n\ndescribe(\"basic functionality\", () => {\n    it(\"should return true if Buffer is present in environment, else false\", () => {\n        expect(testForBuffer()).toBeTruthy();\n        const bufferImp = global.Buffer;\n        delete global.Buffer;\n        expect(testForBuffer()).toBeFalsy();\n        global.Buffer = bufferImp;\n    });\n\n    it(\"should convert instance of the given object to plain javascript object and should expose all properties since its a default behaviour\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        });\n    });\n\n    it(\"should exclude extraneous values if the excludeExtraneousValues option is set to true\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            @Expose() id: number;\n            @Expose() firstName: string;\n            @Expose() lastName: string;\n        }\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            age: 12\n        };\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toHaveProperty(\"age\");\n        expect(transformedUser.id).toBeUndefined();\n\n        const transformedUserWithoutExtra = plainToClass(User, fromPlainUser, {excludeExtraneousValues: true});\n        expect(transformedUserWithoutExtra).toBeInstanceOf(User);\n        expect(transformedUserWithoutExtra).not.toHaveProperty(\"age\");\n    });\n\n    it(\"should exclude all objects marked with @Exclude() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n            @Exclude()\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27, password: \"yayayaya\"};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"yayayaya\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n    });\n\n    it(\"should exclude all properties from object if whole class is marked with @Exclude() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        @Exclude()\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n            password: string;\n        }\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({});\n        expect(plainUser.firstName).toBeUndefined();\n        expect(plainUser.lastName).toBeUndefined();\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({});\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({});\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1\n        });\n    });\n\n    it(\"should exclude all properties from object if whole class is marked with @Exclude() decorator, but include properties marked with @Expose() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        @Exclude()\n        class User {\n            id: number;\n\n            @Expose()\n            firstName: string;\n\n            @Expose()\n            lastName: string;\n\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser);\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n    });\n\n    it(\"should exclude all properties from object if its defined via transformation options, but include properties marked with @Expose() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n\n            @Expose()\n            firstName: string;\n\n            @Expose()\n            lastName: string;\n\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user, {strategy: \"excludeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser, {strategy: \"excludeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser, {strategy: \"excludeAll\"});\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {strategy: \"excludeAll\"});\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassUser = classToClass(user, {strategy: \"excludeAll\"});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {strategy: \"excludeAll\"});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\"\n        });\n    });\n\n    it(\"should expose all properties from object if its defined via transformation options, but exclude properties marked with @Exclude() decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n\n            @Exclude()\n            lastName: string;\n\n            @Exclude()\n            password: string;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user, {strategy: \"exposeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\"\n        });\n        expect(plainUser.lastName).toBeUndefined();\n        expect(plainUser.password).toBeUndefined();\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser, {strategy: \"exposeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\"\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\"\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\"\n        });\n\n        const classToClassUser = classToClass(user, {strategy: \"exposeAll\"});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\"\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {strategy: \"exposeAll\"});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\"\n        });\n    });\n\n    it(\"should convert values to specific types if they are set via @Type decorator\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n\n            @Type(type => String)\n            firstName: string;\n\n            @Type(type => String)\n            lastName: string;\n\n            @Type(type => Number)\n            password: number;\n\n            @Type(type => Boolean)\n            isActive: boolean;\n\n            @Type(type => Date)\n            registrationDate: Date;\n\n            @Type(type => String)\n            lastVisitDate: string;\n\n            @Type(type => Buffer)\n            uuidBuffer: Buffer;\n\n            @Type(type => String)\n            nullableString?: null | string;\n\n            @Type(type => Number)\n            nullableNumber?: null | number;\n\n            @Type(type => Boolean)\n            nullableBoolean?: null | boolean;\n\n            @Type(type => Date)\n            nullableDate?: null | Date;\n\n            @Type(type => Buffer)\n            nullableBuffer?: null | Buffer;\n        }\n\n        const date = new Date();\n        const user = new User();\n        const uuid = Buffer.from('1234');\n        user.firstName = 321 as any;\n        user.lastName = 123 as any;\n        user.password = \"123\" as any;\n        user.isActive = \"1\" as any;\n        user.registrationDate = date.toString() as any;\n        user.lastVisitDate = date as any;\n        user.uuidBuffer = uuid as any;\n        user.nullableString = null as any;\n        user.nullableNumber = null as any;\n        user.nullableBoolean = null as any;\n        user.nullableDate = null as any;\n        user.nullableBuffer = null as any;\n\n        const fromPlainUser = {\n            firstName: 321,\n            lastName: 123,\n            password: \"123\",\n            isActive: \"1\",\n            registrationDate: date.toString(),\n            lastVisitDate: date,\n            uuidBuffer: uuid,\n            nullableString: null as null | string,\n            nullableNumber: null as null | string,\n            nullableBoolean: null as null | string,\n            nullableDate: null as null | string,\n            nullableBuffer: null as null | string,\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n\n        const plainUser: any = classToPlain(user, {strategy: \"exposeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const existUser = {id: 1, age: 27};\n        const plainUser2 = classToPlainFromExist(user, existUser, {strategy: \"exposeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n        expect(plainUser2).toEqual(existUser);\n\n        const transformedUser = plainToClass(User, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser).toEqual({\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {strategy: \"exposeAll\"});\n        expect(fromExistTransformedUser).toBeInstanceOf(User);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const classToClassUser = classToClass(user, {strategy: \"exposeAll\"});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).toEqual({\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {strategy: \"exposeAll\"});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"321\",\n            lastName: \"123\",\n            password: 123,\n            isActive: true,\n            registrationDate: new Date(date.toString()),\n            lastVisitDate: date.toString(),\n            uuidBuffer: uuid,\n            nullableString: null,\n            nullableNumber: null,\n            nullableBoolean: null,\n            nullableDate: null,\n            nullableBuffer: null\n        });\n    });\n\n    it(\"should transform nested objects too and make sure their decorators are used too\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            name: string;\n\n            @Exclude()\n            filename: string;\n\n            uploadDate: Date;\n        }\n\n        class User {\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            photo: Photo; // type should be automatically guessed\n        }\n\n        const photo = new Photo();\n        photo.id = 1;\n        photo.name = \"Me\";\n        photo.filename = \"iam.jpg\";\n        photo.uploadDate = new Date();\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = photo;\n\n        const plainUser: any = classToPlain(user, {strategy: \"exposeAll\"});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser.photo).not.toBeInstanceOf(Photo);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: photo.uploadDate\n            }\n        });\n        expect(plainUser.password).toBeUndefined();\n        expect(plainUser.photo.filename).toBeUndefined();\n        expect(plainUser.photo.uploadDate).toEqual(photo.uploadDate);\n        expect(plainUser.photo.uploadDate).not.toBe(photo.uploadDate);\n\n        const existUser = {id: 1, age: 27, photo: {id: 2, description: \"photo\"}};\n        const plainUser2: any = classToPlainFromExist(user, existUser, {strategy: \"exposeAll\"});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2.photo).not.toBeInstanceOf(Photo);\n        expect(plainUser2).toEqual({\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: photo.uploadDate,\n                description: \"photo\"\n            }\n        });\n        expect(plainUser2).toEqual(existUser);\n        expect(plainUser2.password).toBeUndefined();\n        expect(plainUser2.photo.filename).toBeUndefined();\n        expect(plainUser2.photo.uploadDate).toEqual(photo.uploadDate);\n        expect(plainUser2.photo.uploadDate).not.toBe(photo.uploadDate);\n    });\n\n    it(\"should transform nested objects too and make sure given type is used instead of automatically guessed one\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            name: string;\n\n            @Exclude()\n            filename: string;\n        }\n\n        class ExtendedPhoto implements Photo {\n            id: number;\n\n            @Exclude()\n            name: string;\n\n            filename: string;\n        }\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(type => ExtendedPhoto) // force specific type\n            photo: Photo;\n        }\n\n        const photo = new Photo();\n        photo.id = 1;\n        photo.name = \"Me\";\n        photo.filename = \"iam.jpg\";\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = photo;\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"iam.jpg\"\n            }\n        });\n        expect(plainUser.password).toBeUndefined();\n        expect(plainUser.photo.name).toBeUndefined();\n    });\n\n    it(\"should convert given plain object to class instance object\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            name: string;\n\n            @Exclude()\n            filename: string;\n\n            metadata: string;\n            uploadDate: Date;\n        }\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(type => Photo)\n            photo: Photo;\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.name = \"Me\";\n        user.photo.filename = \"iam.jpg\";\n        user.photo.uploadDate = new Date();\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                filename: \"iam.jpg\",\n                uploadDate: new Date(),\n            }\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n        const fromExistPhoto = new Photo();\n        fromExistPhoto.metadata = \"taken by Camera\";\n        fromExistUser.photo = fromExistPhoto;\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        expect(transformedUser.photo).toBeInstanceOf(Photo);\n        expect(transformedUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: fromPlainUser.photo.uploadDate\n            }\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser);\n        expect(fromExistTransformedUser).toEqual(fromExistUser);\n        expect(fromExistTransformedUser.photo).toEqual(fromExistPhoto);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                metadata: \"taken by Camera\",\n                uploadDate: fromPlainUser.photo.uploadDate\n            }\n        });\n\n        const classToClassUser = classToClass(user);\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).not.toEqual(user.photo);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                uploadDate: user.photo.uploadDate\n            }\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser);\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).not.toEqual(user.photo);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                name: \"Me\",\n                metadata: \"taken by Camera\",\n                uploadDate: user.photo.uploadDate\n            }\n        });\n    });\n\n    it(\"should expose only properties that match given group\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n\n            @Expose({\n                groups: [\"user\", \"guest\"]\n            })\n            filename: string;\n\n            @Expose({\n                groups: [\"admin\"]\n            })\n            status: number;\n\n            metadata: string;\n        }\n\n        class User {\n            id: number;\n            firstName: string;\n\n            @Expose({\n                groups: [\"user\", \"guest\"]\n            })\n            lastName: string;\n\n            @Expose({\n                groups: [\"user\"]\n            })\n            password: string;\n\n            @Expose({\n                groups: [\"admin\"]\n            })\n            isActive: boolean;\n\n            @Type(type => Photo)\n            photo: Photo;\n\n            @Expose({\n                groups: [\"admin\"]\n            })\n            @Type(type => Photo)\n            photos: Photo[];\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.isActive = false;\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.filename = \"myphoto.jpg\";\n        user.photo.status = 1;\n        user.photos = [user.photo];\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            isActive: false,\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1,\n            }]\n        };\n\n        const fromExistUser = new User();\n        fromExistUser.id = 1;\n        fromExistUser.photo = new Photo();\n        fromExistUser.photo.metadata = \"taken by Camera\";\n\n        const plainUser1: any = classToPlain(user);\n        expect(plainUser1).not.toBeInstanceOf(User);\n        expect(plainUser1).toEqual({\n            firstName: \"Umed\",\n            photo: {\n                id: 1\n            }\n        });\n        expect(plainUser1.lastName).toBeUndefined();\n        expect(plainUser1.password).toBeUndefined();\n        expect(plainUser1.isActive).toBeUndefined();\n\n        const plainUser2: any = classToPlain(user, {groups: [\"user\"]});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n        expect(plainUser2.isActive).toBeUndefined();\n\n        const transformedUser2 = plainToClass(User, fromPlainUser, {groups: [\"user\"]});\n        expect(transformedUser2).toBeInstanceOf(User);\n        expect(transformedUser2.photo).toBeInstanceOf(Photo);\n        expect(transformedUser2).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const fromExistTransformedUser = plainToClassFromExist(fromExistUser, fromPlainUser, {groups: [\"user\"]});\n        expect(fromExistTransformedUser).toEqual(fromExistUser);\n        expect(fromExistTransformedUser.photo).toEqual(fromExistUser.photo);\n        expect(fromExistTransformedUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                metadata: \"taken by Camera\",\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const classToClassUser = classToClass(user, {groups: [\"user\"]});\n        expect(classToClassUser).toBeInstanceOf(User);\n        expect(classToClassUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassUser).not.toEqual(user);\n        expect(classToClassUser).not.toEqual(user.photo);\n        expect(classToClassUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const classToClassFromExistUser = classToClassFromExist(user, fromExistUser, {groups: [\"user\"]});\n        expect(classToClassFromExistUser).toBeInstanceOf(User);\n        expect(classToClassFromExistUser.photo).toBeInstanceOf(Photo);\n        expect(classToClassFromExistUser).not.toEqual(user);\n        expect(classToClassFromExistUser).not.toEqual(user.photo);\n        expect(classToClassFromExistUser).toEqual(fromExistUser);\n        expect(classToClassFromExistUser).toEqual({\n            id: 1,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                metadata: \"taken by Camera\",\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const plainUser3: any = classToPlain(user, {groups: [\"guest\"]});\n        expect(plainUser3).not.toBeInstanceOf(User);\n        expect(plainUser3).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n        expect(plainUser3.password).toBeUndefined();\n        expect(plainUser3.isActive).toBeUndefined();\n\n        const transformedUser3 = plainToClass(User, fromPlainUser, {groups: [\"guest\"]});\n        expect(transformedUser3).toBeInstanceOf(User);\n        expect(transformedUser3.photo).toBeInstanceOf(Photo);\n        expect(transformedUser3).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const plainUser4: any = classToPlain(user, {groups: [\"admin\"]});\n        expect(plainUser4).not.toBeInstanceOf(User);\n        expect(plainUser4).toEqual({\n            firstName: \"Umed\",\n            isActive: false,\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n        expect(plainUser4.lastName).toBeUndefined();\n        expect(plainUser4.password).toBeUndefined();\n\n        const transformedUser4 = plainToClass(User, fromPlainUser, {groups: [\"admin\"]});\n        expect(transformedUser4).toBeInstanceOf(User);\n        expect(transformedUser4.photo).toBeInstanceOf(Photo);\n        expect(transformedUser4.photos[0]).toBeInstanceOf(Photo);\n        expect(transformedUser4).toEqual({\n            firstName: \"Umed\",\n            isActive: false,\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n\n        const plainUser5: any = classToPlain(user, {groups: [\"admin\", \"user\"]});\n        expect(plainUser5).not.toBeInstanceOf(User);\n        expect(plainUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            isActive: false,\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n\n        const transformedUser5 = plainToClass(User, fromPlainUser, {groups: [\"admin\", \"user\"]});\n        expect(transformedUser5).toBeInstanceOf(User);\n        expect(transformedUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            isActive: false,\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n    });\n\n    it(\"should expose only properties that match given version\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n\n            @Expose({\n                since: 1.5,\n                until: 2\n            })\n            filename: string;\n\n            @Expose({\n                since: 2\n            })\n            status: number;\n        }\n\n        class User {\n            @Expose({\n                since: 1,\n                until: 2\n            })\n            firstName: string;\n\n            @Expose({\n                since: 0.5\n            })\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(type => Photo)\n            photo: Photo;\n\n            @Expose({\n                since: 3\n            })\n            @Type(type => Photo)\n            photos: Photo[];\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.filename = \"myphoto.jpg\";\n        user.photo.status = 1;\n        user.photos = [user.photo];\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1,\n            }]\n        };\n\n        const plainUser1: any = classToPlain(user);\n        expect(plainUser1).not.toBeInstanceOf(User);\n        expect(plainUser1).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n\n        const transformedUser1 = plainToClass(User, fromPlainUser);\n        expect(transformedUser1).toBeInstanceOf(User);\n        expect(transformedUser1.photo).toBeInstanceOf(Photo);\n        expect(transformedUser1.photos[0]).toBeInstanceOf(Photo);\n        expect(transformedUser1).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                filename: \"myphoto.jpg\",\n                status: 1\n            }]\n        });\n\n        const plainUser2: any = classToPlain(user, {version: 0.3});\n        expect(plainUser2).not.toBeInstanceOf(User);\n        expect(plainUser2).toEqual({\n            photo: {\n                id: 1\n            }\n        });\n\n        const transformedUser2 = plainToClass(User, fromPlainUser, {version: 0.3});\n        expect(transformedUser2).toBeInstanceOf(User);\n        expect(transformedUser2.photo).toBeInstanceOf(Photo);\n        expect(transformedUser2).toEqual({\n            photo: {\n                id: 1\n            }\n        });\n\n        const plainUser3: any = classToPlain(user, {version: 0.5});\n        expect(plainUser3).not.toBeInstanceOf(User);\n        expect(plainUser3).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const transformedUser3 = plainToClass(User, fromPlainUser, {version: 0.5});\n        expect(transformedUser3).toBeInstanceOf(User);\n        expect(transformedUser3.photo).toBeInstanceOf(Photo);\n        expect(transformedUser3).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const plainUser4: any = classToPlain(user, {version: 1});\n        expect(plainUser4).not.toBeInstanceOf(User);\n        expect(plainUser4).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const transformedUser4 = plainToClass(User, fromPlainUser, {version: 1});\n        expect(transformedUser4).toBeInstanceOf(User);\n        expect(transformedUser4.photo).toBeInstanceOf(Photo);\n        expect(transformedUser4).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1\n            }\n        });\n\n        const plainUser5: any = classToPlain(user, {version: 1.5});\n        expect(plainUser5).not.toBeInstanceOf(User);\n        expect(plainUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const transformedUser5 = plainToClass(User, fromPlainUser, {version: 1.5});\n        expect(transformedUser5).toBeInstanceOf(User);\n        expect(transformedUser5.photo).toBeInstanceOf(Photo);\n        expect(transformedUser5).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                filename: \"myphoto.jpg\"\n            }\n        });\n\n        const plainUser6: any = classToPlain(user, {version: 2});\n        expect(plainUser6).not.toBeInstanceOf(User);\n        expect(plainUser6).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            }\n        });\n\n        const transformedUser6 = plainToClass(User, fromPlainUser, {version: 2});\n        expect(transformedUser6).toBeInstanceOf(User);\n        expect(transformedUser6.photo).toBeInstanceOf(Photo);\n        expect(transformedUser6).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            }\n        });\n\n        const plainUser7: any = classToPlain(user, {version: 3});\n        expect(plainUser7).not.toBeInstanceOf(User);\n        expect(plainUser7).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n\n        const transformedUser7 = plainToClass(User, fromPlainUser, {version: 3});\n        expect(transformedUser7).toBeInstanceOf(User);\n        expect(transformedUser7.photo).toBeInstanceOf(Photo);\n        expect(transformedUser7.photos[0]).toBeInstanceOf(Photo);\n        expect(transformedUser7).toEqual({\n            lastName: \"Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            },\n            photos: [{\n                id: 1,\n                status: 1\n            }]\n        });\n\n    });\n\n    it(\"should expose method and accessors that have @Expose()\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Expose()\n            get name(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n\n            @Expose()\n            getName(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\",\n            getName: \"Umed Khudoiberdiev\"\n        });\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        const likeUser = new User();\n        likeUser.firstName = \"Umed\";\n        likeUser.lastName = \"Khudoiberdiev\";\n        expect(transformedUser).toEqual(likeUser);\n    });\n\n    it(\"should expose with alternative name if its given\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            @Expose({name: \"myName\"})\n            firstName: string;\n\n            @Expose({name: \"secondName\"})\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Expose()\n            get name(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n\n            @Expose({name: \"fullName\"})\n            getName(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n        }\n\n        const user = new User();\n        user.firstName = \"Umed\";\n        user.lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n\n        const fromPlainUser = {\n            myName: \"Umed\",\n            secondName: \"Khudoiberdiev\",\n            password: \"imnosuperman\"\n        };\n\n        const plainUser: any = classToPlain(user);\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            myName: \"Umed\",\n            secondName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\",\n            fullName: \"Umed Khudoiberdiev\"\n        });\n\n        const transformedUser = plainToClass(User, fromPlainUser);\n        expect(transformedUser).toBeInstanceOf(User);\n        const likeUser = new User();\n        likeUser.firstName = \"Umed\";\n        likeUser.lastName = \"Khudoiberdiev\";\n        expect(transformedUser).toEqual(likeUser);\n    });\n\n    it(\"should exclude all prefixed properties if prefix is given\", () => {\n        defaultMetadataStorage.clear();\n\n        class Photo {\n            id: number;\n            $filename: string;\n            status: number;\n        }\n\n        class User {\n            $system: string;\n            _firstName: string;\n            _lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Type(() => Photo)\n            photo: Photo;\n\n            @Expose()\n            get name(): string {\n                return this._firstName + \" \" + this._lastName;\n            }\n        }\n\n        const user = new User();\n        user.$system = \"@#$%^&*token(*&^%$#@!\";\n        user._firstName = \"Umed\";\n        user._lastName = \"Khudoiberdiev\";\n        user.password = \"imnosuperman\";\n        user.photo = new Photo();\n        user.photo.id = 1;\n        user.photo.$filename = \"myphoto.jpg\";\n        user.photo.status = 1;\n\n        const fromPlainUser = {\n            $system: \"@#$%^&*token(*&^%$#@!\",\n            _firstName: \"Khudoiberdiev\",\n            _lastName: \"imnosuperman\",\n            password: \"imnosuperman\",\n            photo: {\n                id: 1,\n                $filename: \"myphoto.jpg\",\n                status: 1,\n            }\n        };\n\n        const plainUser: any = classToPlain(user, {excludePrefixes: [\"_\", \"$\"]});\n        expect(plainUser).not.toBeInstanceOf(User);\n        expect(plainUser).toEqual({\n            name: \"Umed Khudoiberdiev\",\n            photo: {\n                id: 1,\n                status: 1\n            }\n        });\n\n        const transformedUser = plainToClass(User, fromPlainUser, {excludePrefixes: [\"_\", \"$\"]});\n        expect(transformedUser).toBeInstanceOf(User);\n        const likeUser = new User();\n        likeUser.photo = new Photo();\n        likeUser.photo.id = 1;\n        likeUser.photo.status = 1;\n        expect(transformedUser).toEqual(likeUser);\n    });\n\n    it(\"should transform array\", () => {\n        defaultMetadataStorage.clear();\n\n        class User {\n            id: number;\n            firstName: string;\n            lastName: string;\n\n            @Exclude()\n            password: string;\n\n            @Expose()\n            get name(): string {\n                return this.firstName + \" \" + this.lastName;\n            }\n        }\n\n        const user1 = new User();\n        user1.firstName = \"Umed\";\n        user1.lastName = \"Khudoiberdiev\";\n        user1.password = \"imnosuperman\";\n\n        const user2 = new User();\n        user2.firstName = \"Dima\";\n        user2.lastName = \"Zotov\";\n        user2.password = \"imnomesser\";\n\n        const users = [user1, user2];\n\n        const plainUsers: any = classToPlain(users);\n        expect(plainUsers).toEqual([{\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\"\n        }, {\n            firstName: \"Dima\",\n            lastName: \"Zotov\",\n            name: \"Dima Zotov\"\n        }]);\n\n        const fromPlainUsers = [{\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\"\n        }, {\n            firstName: \"Dima\",\n            lastName: \"Zotov\",\n            name: \"Dima Zotov\"\n        }];\n\n        const existUsers = [{id: 1, age: 27}, {id: 2, age: 30}];\n        const plainUser2 = classToPlainFromExist(users, existUsers);\n        expect(plainUser2).toEqual([{\n            id: 1,\n            age: 27,\n            firstName: \"Umed\",\n            lastName: \"Khudoiberdiev\",\n            name: \"Umed Khudoiberdiev\"\n        }, {\n            id: 2,\n            age: 30,\n            firstName: \"Dima\",\n            lastName: \"Zotov\",\n            name: \"Dima Zotov\"\n        }]);\n\n        const transformedUser = plainToClass(User, fromPlainUsers);\n\n        expect(transformedUser[0]).toBeInstanceOf(User);\n        expect(transformedUser[1]).toBeInstanceOf(User);\n        const likeUser1 = new User();\n        likeUser1.firstName = \"Umed\";\n        likeUser1.lastName = \"Khudoiberdiev\";\n\n        const likeUser2 = new User();\n        likeUser2.firstName = \"Dima\";\n        likeUser2.lastName = \"Zotov\";\n        expect(transformedUser).toEqual([likeUser1, likeUser2]);\n\n        const classToClassUsers = classToClass(users);\n        expect(classToClassUsers[0]).toBeInstanceOf(User);\n        expect(classToClassUsers[1]).toBeInstanceOf(User);\n        expect(classToClassUsers[0]).not.toEqual(user1);\n        expect(classToClassUsers[1]).not.toEqual(user1);\n\n        const classUserLike1 = new User();\n        classUserLike1.firstName = \"Umed\";\n        classUserLike1.lastName = \"Khudoiberdiev\";\n\n        const classUserLike2 = new User();\n        classUserLike2.firstName = \"Dima\";\n        classUserLike2.lastName = \"Zotov\";\n\n        expect(classToClassUsers).toEqual([classUserLike1, classUserLike2]);\n\n        const fromExistUser1 = new User();\n        fromExistUser1.id = 1;\n\n        const fromExistUser2 = new User();\n        fromExistUser2.id = 2;\n\n        const fromExistUsers = [fromExistUser1, fromExistUser2];\n\n        const classToClassFromExistUser = classToClassFromExist(users, fromExistUsers);\n        expect(classToClassFromExistUser[0]).toBeInstanceOf(User);\n        expect(classToClassFromExistUser[1]).toBeInstanceOf(User);\n        expect(classToClassFromExistUser[0]).not.toEqual(user1);\n        expect(classToClassFromExistUser[1]).not.toEqual(user1);\n        expect(classToClassFromExistUser).toEqual(fromExistUsers);\n\n        const fromExistUserLike1 = new User();\n        fromExistUserLike1.id = 1;\n        fromExistUserLike1.firstName = \"Umed\";\n        fromExistUserLike1.lastName = \"Khudoiberdiev\";\n\n        const fromExistUserLike2 = new User();\n        fromExistUserLike2.id = 2;\n        fromExistUserLike2.firstName = \"Dima\";\n        fromExistUserLike2.lastName = \"Zotov\";\n\n        expect(classToClassFromExistUser).toEqual([fromExistUserLike1, fromExistUserLike2]);\n    });\n\n    it(\"should transform objects with null prototype\", () => {\n        class TestClass {\n            prop: string;\n        }\n\n        const obj = Object.create(null);\n        obj.a = \"JS FTW\";\n\n        const transformedClass = plainToClass(TestClass, obj);\n        expect(transformedClass).toBeInstanceOf(TestClass);\n    });\n\n    it('should not pollute the prototype with a `__proto__` property',() => {\n        const object = JSON.parse('{\"__proto__\": { \"admin\": true }}');\n        const plainObject = {};\n        classToPlainFromExist(object, plainObject);\n        expect((plainObject as any).admin).toEqual(undefined);\n    });\n\n    it('should not pollute the prototype with a `constructor.prototype` property',  () => {\n        const object = JSON.parse('{\"constructor\": { \"prototype\": { \"admin\": true }}}');\n        const plainObject = {};\n        classToPlainFromExist(object, plainObject);\n        expect((plainObject as any).admin).toEqual(undefined);\n    });\n\n    it(\"should default union types where the plain type is an array to an array result\", () => {\n        class User {\n            name: string;\n        }\n\n        class TestClass {\n            @Type(() => User)\n            usersDefined: User[] | undefined;\n\n            @Type(() => User)\n            usersUndefined: User[] | undefined;\n        }\n\n        const obj = Object.create(null);\n        obj.usersDefined = [{name: \"a-name\"}];\n        obj.usersUndefined = undefined;\n\n        const transformedClass = plainToClass(TestClass, obj as Record<string, any>);\n\n        expect(transformedClass).toBeInstanceOf(TestClass);\n\n        expect(transformedClass.usersDefined).toBeInstanceOf(Array);\n        expect(transformedClass.usersDefined.length).toEqual(1);\n        expect(transformedClass.usersDefined[0]).toBeInstanceOf(User);\n        expect(transformedClass.usersDefined[0].name).toEqual(\"a-name\");\n\n        expect(transformedClass.usersUndefined).toBeUndefined();\n    });\n});\n"], "filenames": ["src/TransformOperationExecutor.ts", "test/functional/basic-functionality.spec.ts"], "buggy_code_start_loc": [147, 1751], "buggy_code_end_loc": [147, 1751], "fixing_code_start_loc": [148, 1752], "fixing_code_end_loc": [152, 1766], "type": "CWE-1321", "message": "class-transformer before 0.3.1 allow attackers to perform Prototype Pollution. The classToPlainFromExist function could be tricked into adding or modifying properties of Object.prototype using a __proto__ payload.", "other": {"cve": {"id": "CVE-2020-7637", "sourceIdentifier": "report@snyk.io", "published": "2020-04-06T13:15:12.550", "lastModified": "2022-12-02T19:58:13.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "class-transformer before 0.3.1 allow attackers to perform Prototype Pollution. The classToPlainFromExist function could be tricked into adding or modifying properties of Object.prototype using a __proto__ payload."}, {"lang": "es", "value": "class-transformer versiones anteriores a 0.3.1, permiten a los atacantes realizar la Contaminaci\u00f3n Prototipo. La funci\u00f3n \"classToPlainFromExist\" podr\u00eda ser enga\u00f1ada para agregar o modificar propiedades de Object.prototype\" usando una carga \u00fatil \"__proto__\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:class-transformer_project:class-transformer:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.3.1", "matchCriteriaId": "D5049543-AFCA-4AB9-8BDC-8A44F6CB8D9A"}]}]}], "references": [{"url": "https://github.com/typestack/class-transformer/commit/8f04eb9db02de708f1a20f6f2d2bb309b2fed01e", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-CLASSTRANSFORMER-564431", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/typestack/class-transformer/commit/8f04eb9db02de708f1a20f6f2d2bb309b2fed01e"}}