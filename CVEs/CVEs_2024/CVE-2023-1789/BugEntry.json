{"buggy_code": ["<?php\n/**\n * TransactionCurrencyFactory.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Factory;\n\nuse FireflyIII\\Exceptions\\FireflyException;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse Illuminate\\Database\\QueryException;\nuse Log;\n\n/**\n * Class TransactionCurrencyFactory\n */\nclass TransactionCurrencyFactory\n{\n    /**\n     * @param  array  $data\n     *\n     * @return TransactionCurrency\n     * @throws FireflyException\n     */\n    public function create(array $data): TransactionCurrency\n    {\n        // if the code already exists (deleted)\n        // force delete it and then create the transaction:\n        $count = TransactionCurrency::withTrashed()->whereCode($data['code'])->count();\n        if (1 === $count) {\n            $old = TransactionCurrency::withTrashed()->whereCode($data['code'])->first();\n            $old->forceDelete();\n            app('log')->warning(sprintf('Force deleted old currency with ID #%d and code \"%s\".', $old->id, $data['code']));\n        }\n\n        try {\n            /** @var TransactionCurrency $result */\n            $result = TransactionCurrency::create(\n                [\n                    'name'           => $data['name'],\n                    'code'           => $data['code'],\n                    'symbol'         => $data['symbol'],\n                    'decimal_places' => $data['decimal_places'],\n                    'enabled'        => $data['enabled'],\n                ]\n            );\n        } catch (QueryException $e) {\n            $result = null;\n            Log::error(sprintf('Could not create new currency: %s', $e->getMessage()));\n            throw new FireflyException('400004: Could not store new currency.', 0, $e);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param  int|null  $currencyId\n     * @param  null|string  $currencyCode\n     *\n     * @return TransactionCurrency|null\n     */\n    public function find(?int $currencyId, ?string $currencyCode): ?TransactionCurrency\n    {\n        $currencyCode = (string)$currencyCode;\n        $currencyId   = (int)$currencyId;\n\n        if ('' === $currencyCode && 0 === $currencyId) {\n            Log::debug('Cannot find anything on empty currency code and empty currency ID!');\n\n            return null;\n        }\n\n        // first by ID:\n        if ($currencyId > 0) {\n            $currency = TransactionCurrency::find($currencyId);\n            if (null !== $currency) {\n                return $currency;\n            }\n            app('log')->warning(sprintf('Currency ID is %d but found nothing!', $currencyId));\n        }\n        // then by code:\n        if ('' !== $currencyCode) {\n            $currency = TransactionCurrency::whereCode($currencyCode)->first();\n            if (null !== $currency) {\n                return $currency;\n            }\n            app('log')->warning(sprintf('Currency code is %d but found nothing!', $currencyCode));\n        }\n        app('log')->warning('Found nothing for currency.');\n\n        return null;\n    }\n}\n", "<?php\n/**\n * CurrencyUpdateService.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Services\\Internal\\Update;\n\nuse FireflyIII\\Models\\TransactionCurrency;\n\n/**\n * Class CurrencyUpdateService\n *\n\n */\nclass CurrencyUpdateService\n{\n    /**\n     * @param  TransactionCurrency  $currency\n     * @param  array  $data\n     *\n     * @return TransactionCurrency\n     */\n    public function update(TransactionCurrency $currency, array $data): TransactionCurrency\n    {\n        if (array_key_exists('code', $data) && '' !== (string)$data['code']) {\n            $currency->code = $data['code'];\n        }\n\n        if (array_key_exists('symbol', $data) && '' !== (string)$data['symbol']) {\n            $currency->symbol = $data['symbol'];\n        }\n\n        if (array_key_exists('name', $data) && '' !== (string)$data['name']) {\n            $currency->name = $data['name'];\n        }\n\n        if (array_key_exists('enabled', $data) && is_bool($data['enabled'])) {\n            $currency->enabled = $data['enabled'];\n        }\n\n        if (array_key_exists('decimal_places', $data) && is_int($data['decimal_places'])) {\n            $currency->decimal_places = $data['decimal_places'];\n        }\n\n        $currency->save();\n\n        return $currency;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * TransactionCurrencyFactory.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Factory;\n\nuse FireflyIII\\Exceptions\\FireflyException;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse Illuminate\\Database\\QueryException;\nuse Log;\n\n/**\n * Class TransactionCurrencyFactory\n */\nclass TransactionCurrencyFactory\n{\n    /**\n     * @param  array  $data\n     *\n     * @return TransactionCurrency\n     * @throws FireflyException\n     */\n    public function create(array $data): TransactionCurrency\n    {\n        $data['code']           = e($data['code']);\n        $data['symbol']         = e($data['symbol']);\n        $data['name']           = e($data['name']);\n        $data['decimal_places'] = (int)$data['decimal_places'];\n        $data['enabled']        = (bool)$data['enabled'];\n        // if the code already exists (deleted)\n        // force delete it and then create the transaction:\n        $count = TransactionCurrency::withTrashed()->whereCode($data['code'])->count();\n        if (1 === $count) {\n            $old = TransactionCurrency::withTrashed()->whereCode($data['code'])->first();\n            $old->forceDelete();\n            app('log')->warning(sprintf('Force deleted old currency with ID #%d and code \"%s\".', $old->id, $data['code']));\n        }\n\n        try {\n            /** @var TransactionCurrency $result */\n            $result = TransactionCurrency::create(\n                [\n                    'name'           => $data['name'],\n                    'code'           => $data['code'],\n                    'symbol'         => $data['symbol'],\n                    'decimal_places' => $data['decimal_places'],\n                    'enabled'        => $data['enabled'],\n                ]\n            );\n        } catch (QueryException $e) {\n            $result = null;\n            Log::error(sprintf('Could not create new currency: %s', $e->getMessage()));\n            throw new FireflyException('400004: Could not store new currency.', 0, $e);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param  int|null  $currencyId\n     * @param  null|string  $currencyCode\n     *\n     * @return TransactionCurrency|null\n     */\n    public function find(?int $currencyId, ?string $currencyCode): ?TransactionCurrency\n    {\n        $currencyCode = (string)e($currencyCode);\n        $currencyId   = (int)$currencyId;\n\n        if ('' === $currencyCode && 0 === $currencyId) {\n            Log::debug('Cannot find anything on empty currency code and empty currency ID!');\n\n            return null;\n        }\n\n        // first by ID:\n        if ($currencyId > 0) {\n            $currency = TransactionCurrency::find($currencyId);\n            if (null !== $currency) {\n                return $currency;\n            }\n            app('log')->warning(sprintf('Currency ID is %d but found nothing!', $currencyId));\n        }\n        // then by code:\n        if ('' !== $currencyCode) {\n            $currency = TransactionCurrency::whereCode($currencyCode)->first();\n            if (null !== $currency) {\n                return $currency;\n            }\n            app('log')->warning(sprintf('Currency code is %d but found nothing!', $currencyCode));\n        }\n        app('log')->warning('Found nothing for currency.');\n\n        return null;\n    }\n}\n", "<?php\n/**\n * CurrencyUpdateService.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Services\\Internal\\Update;\n\nuse FireflyIII\\Models\\TransactionCurrency;\n\n/**\n * Class CurrencyUpdateService\n *\n\n */\nclass CurrencyUpdateService\n{\n    /**\n     * @param  TransactionCurrency  $currency\n     * @param  array  $data\n     *\n     * @return TransactionCurrency\n     */\n    public function update(TransactionCurrency $currency, array $data): TransactionCurrency\n    {\n        if (array_key_exists('code', $data) && '' !== (string)$data['code']) {\n            $currency->code = e($data['code']);\n        }\n\n        if (array_key_exists('symbol', $data) && '' !== (string)$data['symbol']) {\n            $currency->symbol = e($data['symbol']);\n        }\n\n        if (array_key_exists('name', $data) && '' !== (string)$data['name']) {\n            $currency->name = e($data['name']);\n        }\n\n        if (array_key_exists('enabled', $data) && is_bool($data['enabled'])) {\n            $currency->enabled = (bool) $data['enabled'];\n        }\n\n        if (array_key_exists('decimal_places', $data) && is_int($data['decimal_places'])) {\n            $currency->decimal_places = (int) $data['decimal_places'];\n        }\n\n        $currency->save();\n\n        return $currency;\n    }\n}\n"], "filenames": ["app/Factory/TransactionCurrencyFactory.php", "app/Services/Internal/Update/CurrencyUpdateService.php"], "buggy_code_start_loc": [43, 44], "buggy_code_end_loc": [82, 61], "fixing_code_start_loc": [44, 44], "fixing_code_end_loc": [87, 61], "type": "CWE-20", "message": "Improper Input Validation in GitHub repository firefly-iii/firefly-iii prior to 6.0.0.", "other": {"cve": {"id": "CVE-2023-1789", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-01T02:15:07.203", "lastModified": "2023-04-07T01:24:04.447", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Input Validation in GitHub repository firefly-iii/firefly-iii prior to 6.0.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.1, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.7.18", "matchCriteriaId": "9FBE25F1-2ED5-4575-9027-AFDBB23E5C58"}, {"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:5.8.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "67EA0D9B-349C-4AE4-B747-658A85A90801"}, {"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:6.0.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "A2597736-BA8C-489E-91B6-80EB9010CF4D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:6.0.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "020B0289-B89A-470E-83E0-FD47D6C93F25"}, {"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:6.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "7A7A2308-6695-4162-9DF9-8FAE1679DA47"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/6b05c0fbd3e8c40ae9b24dc2698821786fccf0c5", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/2c3489f7-6b84-48f8-9368-9cea67cf373d", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/6b05c0fbd3e8c40ae9b24dc2698821786fccf0c5"}}