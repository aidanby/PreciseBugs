{"buggy_code": ["/*\n *\n * Copyright 2017 Asylo authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n// Stubs invoked by edger8r-generated code for calls into the enclave.\n\n\n#include <cerrno>\n#include <cstring>\n#include <string>\n\n#include \"absl/strings/str_cat.h\"\n#include \"asylo/enclave.pb.h\"\n#include \"asylo/util/logging.h\"\n#include \"asylo/platform/primitives/primitives.h\"\n#include \"asylo/platform/primitives/sgx/fork.h\"\n#include \"asylo/platform/primitives/sgx/generated_bridge_t.h\"\n#include \"asylo/platform/primitives/sgx/trusted_sgx.h\"\n#include \"asylo/platform/primitives/trusted_primitives.h\"\n#include \"asylo/util/posix_error_space.h\"\n#include \"asylo/util/status.h\"\n#include \"include/sgx_trts.h\"\n\n// Edger8r does basic sanity checks for input and output pointers. The\n// parameters passed by the untrusted caller are copied by the edger8r-generated\n// code into trusted memory and then passed here. Consequently, there is no\n// possibility for TOCTOU attacks on these parameters.\n\n// Invokes the enclave snapshotting entry-point. Returns a non-zero error code\n// on failure.\nint ecall_take_snapshot(char **output, uint64_t *output_len) {\n  int result = 0;\n  size_t tmp_output_len;\n  try {\n    result = asylo::TakeSnapshot(output, &tmp_output_len);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n\n  if (output_len) {\n    *output_len = static_cast<uint64_t>(tmp_output_len);\n  }\n  return result;\n}\n\n// Invokes the enclave restoring entry-point. Returns a non-zero error code on\n// failure.\nint ecall_restore(const char *input, uint64_t input_len, char **output,\n                  uint64_t *output_len) {\n  if (!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(input,\n                                                              input_len)) {\n    asylo::primitives::TrustedPrimitives::BestEffortAbort(\n        \"ecall_restore: input found to not be in untrusted memory.\");\n  }\n  int result = 0;\n  size_t tmp_output_len;\n  try {\n    result = asylo::Restore(input, static_cast<size_t>(input_len), output,\n                            &tmp_output_len);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n\n  if (output_len) {\n    *output_len = static_cast<uint64_t>(tmp_output_len);\n  }\n  return result;\n}\n\n// Invokes the enclave secure snapshot key transfer entry-point. Returns a\n// non-zero error code on failure.\nint ecall_transfer_secure_snapshot_key(const char *input, uint64_t input_len,\n                                       char **output, uint64_t *output_len) {\n  int result = 0;\n  uint64_t bridge_output_len;\n  try {\n    result = asylo::TransferSecureSnapshotKey(\n        input, static_cast<size_t>(input_len), output, &bridge_output_len);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n  if (output_len) {\n    *output_len = static_cast<size_t>(bridge_output_len);\n  }\n  return result;\n}\n\n// Invokes the trusted entry point designated by |selector|. Returns a\n// non-zero error code on failure.\nint ecall_dispatch_trusted_call(uint64_t selector, void *buffer) {\n  return asylo::primitives::asylo_enclave_call(selector, buffer);\n}\n\n// Invokes the enclave signal handling entry-point. Returns a non-zero error\n// code on failure.\nint ecall_deliver_signal(int signum, int sigcode) {\n  int result = 0;\n  try {\n    result = asylo::primitives::DeliverSignal(signum, sigcode);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n  return result;\n}\n"], "fixing_code": ["/*\n *\n * Copyright 2017 Asylo authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n// Stubs invoked by edger8r-generated code for calls into the enclave.\n\n\n#include <cerrno>\n#include <cstring>\n#include <string>\n\n#include \"absl/strings/str_cat.h\"\n#include \"asylo/enclave.pb.h\"\n#include \"asylo/util/logging.h\"\n#include \"asylo/platform/primitives/primitives.h\"\n#include \"asylo/platform/primitives/sgx/fork.h\"\n#include \"asylo/platform/primitives/sgx/generated_bridge_t.h\"\n#include \"asylo/platform/primitives/sgx/trusted_sgx.h\"\n#include \"asylo/platform/primitives/trusted_primitives.h\"\n#include \"asylo/util/posix_error_space.h\"\n#include \"asylo/util/status.h\"\n#include \"include/sgx_trts.h\"\n\n// Edger8r does basic sanity checks for input and output pointers. The\n// parameters passed by the untrusted caller are copied by the edger8r-generated\n// code into trusted memory and then passed here. Consequently, there is no\n// possibility for TOCTOU attacks on these parameters.\n\n// Invokes the enclave snapshotting entry-point. Returns a non-zero error code\n// on failure.\nint ecall_take_snapshot(char **output, uint64_t *output_len) {\n  int result = 0;\n  size_t tmp_output_len;\n  try {\n    result = asylo::TakeSnapshot(output, &tmp_output_len);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n\n  if (output_len) {\n    *output_len = static_cast<uint64_t>(tmp_output_len);\n  }\n  return result;\n}\n\n// Invokes the enclave restoring entry-point. Returns a non-zero error code on\n// failure.\nint ecall_restore(const char *input, uint64_t input_len, char **output,\n                  uint64_t *output_len) {\n  if (!asylo::primitives::TrustedPrimitives::IsOutsideEnclave(input,\n                                                              input_len) ||\n      !asylo::primitives::TrustedPrimitives::IsOutsideEnclave(\n          output_len, sizeof(uint64_t))) {\n    asylo::primitives::TrustedPrimitives::BestEffortAbort(\n        \"ecall_restore: input/output found to not be in untrusted memory.\");\n  }\n  int result = 0;\n  size_t tmp_output_len;\n  try {\n    result = asylo::Restore(input, static_cast<size_t>(input_len), output,\n                            &tmp_output_len);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n\n  if (output_len) {\n    *output_len = static_cast<uint64_t>(tmp_output_len);\n  }\n  return result;\n}\n\n// Invokes the enclave secure snapshot key transfer entry-point. Returns a\n// non-zero error code on failure.\nint ecall_transfer_secure_snapshot_key(const char *input, uint64_t input_len,\n                                       char **output, uint64_t *output_len) {\n  int result = 0;\n  uint64_t bridge_output_len;\n  try {\n    result = asylo::TransferSecureSnapshotKey(\n        input, static_cast<size_t>(input_len), output, &bridge_output_len);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n  if (output_len) {\n    *output_len = static_cast<size_t>(bridge_output_len);\n  }\n  return result;\n}\n\n// Invokes the trusted entry point designated by |selector|. Returns a\n// non-zero error code on failure.\nint ecall_dispatch_trusted_call(uint64_t selector, void *buffer) {\n  return asylo::primitives::asylo_enclave_call(selector, buffer);\n}\n\n// Invokes the enclave signal handling entry-point. Returns a non-zero error\n// code on failure.\nint ecall_deliver_signal(int signum, int sigcode) {\n  int result = 0;\n  try {\n    result = asylo::primitives::DeliverSignal(signum, sigcode);\n  } catch (...) {\n    LOG(FATAL) << \"Uncaught exception in enclave\";\n  }\n  return result;\n}\n"], "filenames": ["asylo/platform/primitives/sgx/ecalls.cc"], "buggy_code_start_loc": [65], "buggy_code_end_loc": [68], "fixing_code_start_loc": [65], "fixing_code_end_loc": [70], "type": "CWE-119", "message": "An arbitrary memory overwrite vulnerability in the trusted memory of Asylo exists in versions prior to 0.6.0. As the ecall_restore function fails to validate the range of the output_len pointer, an attacker can manipulate the tmp_output_len value and write to an arbitrary location in the trusted (enclave) memory. We recommend updating Asylo to version 0.6.0 or later.", "other": {"cve": {"id": "CVE-2020-8904", "sourceIdentifier": "cve-coordination@google.com", "published": "2020-08-12T19:15:14.593", "lastModified": "2020-08-13T14:42:09.253", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An arbitrary memory overwrite vulnerability in the trusted memory of Asylo exists in versions prior to 0.6.0. As the ecall_restore function fails to validate the range of the output_len pointer, an attacker can manipulate the tmp_output_len value and write to an arbitrary location in the trusted (enclave) memory. We recommend updating Asylo to version 0.6.0 or later."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de sobrescritura de memoria arbitraria en la memoria confiable de Asylo en versiones anteriores a 0.6.0. Como la funci\u00f3n ecall_restore presenta un fallo al comprobar el rango del puntero output_len, un atacante puede manipular el valor tmp_output_len y escribir en una ubicaci\u00f3n arbitraria en la memoria confiable (enclave). Recomendamos actualizar Asylo en las versiones 0.6. 0 o posteriores"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.8}, {"source": "cve-coordination@google.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:C/C:N/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.1, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}, {"source": "cve-coordination@google.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-823"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:asylo:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.6.0", "matchCriteriaId": "2E43ACF0-4DFF-4A7A-BC8B-90E067F13206"}]}]}], "references": [{"url": "https://github.com/google/asylo/commit/e582f36ac49ee11a21d23ad6a30c333092e0a94e", "source": "cve-coordination@google.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/google/asylo/commit/e582f36ac49ee11a21d23ad6a30c333092e0a94e"}}