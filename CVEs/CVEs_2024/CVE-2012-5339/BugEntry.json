{"buggy_code": ["/* vim: set expandtab sw=4 ts=4 sts=4: */\n\n/**\n * @var    RTE    a JavaScript namespace containing the functionality\n *                for Routines, Triggers and Events.\n *\n *                This namespace is extended by the functionality required\n *                to handle a specific item (a routine, trigger or event)\n *                in the relevant javascript files in this folder.\n */\nvar RTE = {\n    /**\n     * @var    $ajaxDialog        jQuery object containing the reference to the\n     *                            dialog that contains the editor.\n     */\n    $ajaxDialog: null,\n    /**\n     * @var    syntaxHiglighter   Reference to the codemirror editor.\n     */\n    syntaxHiglighter: null,\n    /**\n     * @var    buttonOptions      Object containing options for\n     *                            the jQueryUI dialog buttons\n     */\n    buttonOptions: {},\n    /**\n     * Validate editor form fields.\n     */\n    validate: function () {\n        /**\n         * @var    $elm    a jQuery object containing the reference\n         *                 to an element that is being validated.\n         */\n        var $elm = null;\n        // Common validation. At the very least the name\n        // and the definition must be provided for an item\n        $elm = $('table.rte_table').last().find('input[name=item_name]');\n        if ($elm.val() === '') {\n            $elm.focus();\n            alert(PMA_messages['strFormEmpty']);\n            return false;\n        }\n        $elm = $('table.rte_table').find('textarea[name=item_definition]');\n        if ($elm.val() === '') {\n            this.syntaxHiglighter.focus();\n            alert(PMA_messages['strFormEmpty']);\n            return false;\n        }\n        // The validation has so far passed, so now\n        // we can validate item-specific fields.\n        return RTE.validateCustom();\n    }, // end validate()\n    /**\n     * Validate custom editor form fields.\n     * This function can be overridden by\n     * other files in this folder.\n     */\n    validateCustom: function () {\n        return true;\n    }, // end validateCustom()\n    /**\n     * Execute some code after the ajax\n     * dialog for the ditor is shown.\n     * This function can be overridden by\n     * other files in this folder.\n     */\n    postDialogShow: function () {\n        // Nothing by default\n    } // end postDialogShow()\n}; // end RTE namespace\n\n/**\n * Attach Ajax event handlers for the Routines, Triggers and Events editor.\n *\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function () {\n    /**\n     * Attach Ajax event handlers for the Add/Edit functionality.\n     */\n    $('a.ajax_add_anchor, a.ajax_edit_anchor').live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var    $edit_row    jQuery object containing the reference to\n         *                      the row of the the item being edited\n         *                      from the list of items .\n         */\n        var $edit_row = null;\n        if ($(this).hasClass('ajax_edit_anchor')) {\n            // Remeber the row of the item being edited for later,\n            // so that if the edit is successful, we can replace the\n            // row with info about the modified item.\n            $edit_row = $(this).parents('tr');\n        }\n        /**\n         * @var    $msg    jQuery object containing the reference to\n         *                 the AJAX message shown to the user.\n         */\n        var $msg = PMA_ajaxShowMessage();\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (data.success === true) {\n                // We have successfully fetched the editor form\n                PMA_ajaxRemoveMessage($msg);\n                // Now define the function that is called when\n                // the user presses the \"Go\" button\n                RTE.buttonOptions[PMA_messages['strGo']] = function () {\n                    // Move the data from the codemirror editor back to the\n                    // textarea, where it can be used in the form submission.\n                    RTE.syntaxHiglighter.save();\n                    // Validate editor and submit request, if passed.\n                    if (RTE.validate()) {\n                        /**\n                         * @var    data    Form data to be sent in the AJAX request.\n                         */\n                        var data = $('form.rte_form').last().serialize();\n                        $msg = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n                        $.post($('form.rte_form').last().attr('action'), data, function (data) {\n                            if (data.success === true) {\n                                // Item created successfully\n                                PMA_ajaxRemoveMessage($msg);\n                                PMA_slidingMessage(data.message);\n                                RTE.$ajaxDialog.dialog('close');\n                                // If we are in 'edit' mode, we must remove the reference to the old row.\n                                if (mode === 'edit') {\n                                    $edit_row.remove();\n                                }\n                                // Sometimes, like when moving a trigger from a table to\n                                // another one, the new row should not be inserted into the\n                                // list. In this case \"data.insert\" will be set to false.\n                                if (data.insert) {\n                                    // Insert the new row at the correct location in the list of items\n                                    /**\n                                     * @var    text    Contains the name of an item from the list\n                                     *                 that is used in comparisons to find the correct\n                                     *                 location where to insert a new row.\n                                     */\n                                    var text = '';\n                                    /**\n                                     * @var    inserted    Whether a new item has been inserted\n                                     *                     in the list or not.\n                                     */\n                                    var inserted = false;\n                                    $('table.data').find('tr').each(function () {\n                                        text = $(this)\n                                                .children('td')\n                                                .eq(0)\n                                                .find('strong')\n                                                .text()\n                                                .toUpperCase();\n                                        text = $.trim(text);\n                                        if (text !== '' && text > data.name) {\n                                            $(this).before(data.new_row);\n                                            inserted = true;\n                                            return false;\n                                        }\n                                    });\n                                    if (! inserted) {\n                                        // If we didn't manage to insert the row yet,\n                                        // it must belong at the end of the list,\n                                        // so we insert it there.\n                                        $('table.data').append(data.new_row);\n                                    }\n                                    // Fade-in the new row\n                                    $('.ajaxInsert').show('slow').removeClass('ajaxInsert');\n                                } else if ($('table.data').find('tr').has('td').length === 0) {\n                                    // If we are not supposed to insert the new row, we will now\n                                    // check if the table is empty and needs to be hidden. This\n                                    // will be the case if we were editing the only item in the\n                                    // list, which we removed and will not be inserting something\n                                    // else in its place.\n                                    $('table.data').hide(\"slow\", function () {\n                                        $('#nothing2display').show(\"slow\");\n                                    });\n                                }\n                                // Now we have inserted the row at the correct position, but surely\n                                // at least some row classes are wrong now. So we will itirate\n                                // throught all rows and assign correct classes to them.\n                                /**\n                                 * @var    ct          Count of processed rows.\n                                 */\n                                var ct = 0;\n                                /**\n                                 * @var    rowclass    Class to be attached to the row\n                                 *                     that is being processed\n                                 */\n                                var rowclass = '';\n                                $('table.data').find('tr').has('td').each(function () {\n                                    rowclass = (ct % 2 === 0) ? 'odd' : 'even';\n                                    $(this).removeClass().addClass(rowclass);\n                                    ct++;\n                                });\n                                // If this is the first item being added, remove\n                                // the \"No items\" message and show the list.\n                                if ($('table.data').find('tr').has('td').length > 0\n                                    && $('#nothing2display').is(':visible')) {\n                                    $('#nothing2display').hide(\"slow\", function () {\n                                        $('table.data').show(\"slow\");\n                                    });\n                                }\n                            } else {\n                                PMA_ajaxShowMessage(data.error, false);\n                            }\n                        }); // end $.post()\n                    } // end \"if (RTE.validate())\"\n                }; // end of function that handles the submission of the Editor\n                RTE.buttonOptions[PMA_messages['strClose']] = function () {\n                    $(this).dialog(\"close\");\n                };\n                /**\n                 * Display the dialog to the user\n                 */\n                RTE.$ajaxDialog = $('<div>' + data.message + '</div>').dialog({\n                                width: 700,\n                                minWidth: 500,\n                                buttons: RTE.buttonOptions,\n                                title: data.title,\n                                modal: true,\n                                close: function () {\n                                    $(this).remove();\n                                }\n                        });\n                RTE.$ajaxDialog.find('input[name=item_name]').focus();\n                RTE.$ajaxDialog.find('input.datefield, input.datetimefield').each(function () {\n                    PMA_addDatepicker($(this).css('width', '95%'));\n                });\n                /**\n                 * @var    mode    Used to remeber whether the editor is in\n                 *                 \"Edit\" or \"Add\" mode.\n                 */\n                var mode = 'add';\n                if ($('input[name=editor_process_edit]').length > 0) {\n                    mode = 'edit';\n                }\n                // Attach syntax highlited editor to the definition\n                /**\n                 * @var    $elm    jQuery object containing the reference to\n                 *                 the Definition textarea.\n                 */\n                var $elm = $('textarea[name=item_definition]').last();\n                /**\n                 * @var    opts    Options to pass to the codemirror editor.\n                 */\n                var opts = {lineNumbers: true, matchBrackets: true, indentUnit: 4, mode: \"text/x-mysql\"};\n                RTE.syntaxHiglighter = CodeMirror.fromTextArea($elm[0], opts);\n                // Execute item-specific code\n                RTE.postDialogShow(data);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.get()\n    }); // end $.live()\n\n    /**\n     * Attach Ajax event handlers for input fields in the editor\n     * and the routine execution dialog used to submit the Ajax\n     * request when the ENTER key is pressed.\n     */\n    $('table.rte_table').find('input[name^=item], input[name^=params]').live('keydown', function (e) {\n        if (e.which === 13) { // 13 is the ENTER key\n            e.preventDefault();\n            if (typeof RTE.buttonOptions[PMA_messages['strGo']] === 'function') {\n                RTE.buttonOptions[PMA_messages['strGo']].call();\n            }\n        }\n    }); // end $.live()\n\n    /**\n     * Attach Ajax event handlers for Export of Routines, Triggers and Events.\n     */\n    $('a.ajax_export_anchor').live('click', function (event) {\n        event.preventDefault();\n        var $msg = PMA_ajaxShowMessage();\n        // Fire the ajax request straight away\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (data.success === true) {\n                PMA_ajaxRemoveMessage($msg);\n                /**\n                 * @var button_options  Object containing options for jQueryUI dialog buttons\n                 */\n                var button_options = {};\n                button_options[PMA_messages['strClose']] = function () {\n                    $(this).dialog(\"close\").remove();\n                };\n                /**\n                 * Display the dialog to the user\n                 */\n                var $ajaxDialog = $('<div>' + data.message + '</div>').dialog({\n                                      width: 500,\n                                      buttons: button_options,\n                                      title: data.title\n                                  });\n                // Attach syntax highlited editor to export dialog\n                /**\n                 * @var    $elm    jQuery object containing the reference\n                 *                 to the Export textarea.\n                 */\n                var $elm = $ajaxDialog.find('textarea');\n                /**\n                 * @var    opts    Options to pass to the codemirror editor.\n                 */\n                var opts = {lineNumbers: true, matchBrackets: true, indentUnit: 4, mode: \"text/x-mysql\"};\n                CodeMirror.fromTextArea($elm[0], opts);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.get()\n    }); // end $.live()\n\n    /**\n     * Attach Ajax event handlers for Drop functionality of Routines, Triggers and Events.\n     */\n    $('a.ajax_drop_anchor').live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var $curr_row    Object containing reference to the current row\n         */\n        var $curr_row = $(this).parents('tr');\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = $('<div/>').text($curr_row.children('td').children('.drop_sql').html());\n        // We ask for confirmation first here, before submitting the ajax request\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n            /**\n             * @var    $msg    jQuery object containing the reference to\n             *                 the AJAX message shown to the user.\n             */\n            var $msg = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': 1, 'ajax_request': true}, function (data) {\n                if (data.success === true) {\n                    /**\n                     * @var $table    Object containing reference to the main list of elements.\n                     */\n                    var $table = $curr_row.parent();\n                    // Check how many rows will be left after we remove\n                    // the one that the user has requested us to remove\n                    if ($table.find('tr').length === 2) {\n                        // If there are two rows left, it means that they are\n                        // the header of the table and the rows that we are\n                        // about to remove, so after the removal there will be\n                        // nothing to show in the table, so we hide it.\n                        $table.hide(\"slow\", function () {\n                            $(this).find('tr.even, tr.odd').remove();\n                            $('#nothing2display').show(\"slow\");\n                        });\n                    } else {\n                        $curr_row.hide(\"slow\", function () {\n                            $(this).remove();\n                            // Now we have removed the row from the list, but maybe\n                            // some row classes are wrong now. So we will itirate\n                            // throught all rows and assign correct classes to them.\n                            /**\n                             * @var    ct          Count of processed rows.\n                             */\n                            var ct = 0;\n                            /**\n                             * @var    rowclass    Class to be attached to the row\n                             *                     that is being processed\n                             */\n                            var rowclass = '';\n                            $table.find('tr').has('td').each(function () {\n                                rowclass = (ct % 2 === 0) ? 'odd' : 'even';\n                                $(this).removeClass().addClass(rowclass);\n                                ct++;\n                            });\n                        });\n                    }\n                    // Get rid of the \"Loading\" message\n                    PMA_ajaxRemoveMessage($msg);\n                    // Show the query that we just executed\n                    PMA_slidingMessage(data.sql_query);\n                } else {\n                    PMA_ajaxShowMessage(PMA_messages['strErrorProcessingRequest'] + \" : \" + data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); // end $.live()\n}); // end of $(document).ready()\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Common functions for generating lists of Routines, Triggers and Events.\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Creates a list of items containing the relevant\n * information and some action links.\n *\n * @param    string   $type    One of ['routine'|'trigger'|'event']\n * @param    array    $items   An array of items\n *\n * @return   string   HTML code of the list of items\n */\nfunction PMA_RTE_getList($type, $items)\n{\n    global $table;\n\n    /**\n     * Conditional classes switch the list on or off\n     */\n    $class1 = 'hide';\n    $class2 = '';\n    if (! $items) {\n        $class1 = '';\n        $class2 = ' hide';\n    }\n    /**\n     * Generate output\n     */\n    $retval  = \"<!-- LIST OF \" . PMA_RTE_getWord('docu') . \" START -->\\n\";\n    $retval .= \"<fieldset>\\n\";\n    $retval .= \"    <legend>\\n\";\n    $retval .= \"        \" . PMA_RTE_getWord('title') . \"\\n\";\n    $retval .= \"        \" . PMA_showMySQLDocu('SQL-Syntax', PMA_RTE_getWord('docu')) . \"\\n\";\n    $retval .= \"    </legend>\\n\";\n    $retval .= \"    <div class='$class1' id='nothing2display'>\\n\";\n    $retval .= \"      \" . PMA_RTE_getWord('nothing') . \"\\n\";\n    $retval .= \"    </div>\\n\";\n    $retval .= \"    <table class='data$class2'>\\n\";\n    $retval .= \"        <!-- TABLE HEADERS -->\\n\";\n    $retval .= \"        <tr>\\n\";\n    switch ($type) {\n    case 'routine':\n        $retval .= \"            <th>\" . __('Name') . \"</th>\\n\";\n        $retval .= \"            <th colspan='4'>\" . __('Action') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Type') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Returns') . \"</th>\\n\";\n        break;\n    case 'trigger':\n        $retval .= \"            <th>\" . __('Name') . \"</th>\\n\";\n        if (empty($table)) {\n            $retval .= \"            <th>\" . __('Table') . \"</th>\\n\";\n        }\n        $retval .= \"            <th colspan='3'>\" . __('Action') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Time') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Event') . \"</th>\\n\";\n        break;\n    case 'event':\n        $retval .= \"            <th>\" . __('Name') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Status') . \"</th>\\n\";\n        $retval .= \"            <th colspan='3'>\" . __('Action') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Type') . \"</th>\\n\";\n        break;\n    default:\n        break;\n    }\n    $retval .= \"        </tr>\\n\";\n    $retval .= \"        <!-- TABLE DATA -->\\n\";\n    $ct = 0;\n    foreach ($items as $item) {\n        $rowclass = ($ct % 2 == 0) ? 'odd' : 'even';\n        if ($GLOBALS['is_ajax_request']) {\n            $rowclass .= ' ajaxInsert hide';\n        }\n        // Get each row from the correct function\n        switch ($type) {\n        case 'routine':\n            $retval .= PMA_RTN_getRowForList($item, $rowclass);\n            break;\n        case 'trigger':\n            $retval .= PMA_TRI_getRowForList($item, $rowclass);\n            break;\n        case 'event':\n            $retval .= PMA_EVN_getRowForList($item, $rowclass);\n            break;\n        default:\n            break;\n        }\n        $ct++;\n    }\n    $retval .= \"    </table>\\n\";\n    $retval .= \"</fieldset>\\n\";\n    $retval .= \"<!-- LIST OF \" . PMA_RTE_getWord('docu') . \" END -->\\n\";\n\n    return $retval;\n} // end PMA_RTE_getList()\n\n/**\n * Creates the contents for a row in the list of routines\n *\n * @param    array    $routine    An array of routine data\n * @param    string   $rowclass   Empty or one of ['even'|'odd']\n *\n * @return   string   HTML code of a row for the list of routines\n */\nfunction PMA_RTN_getRowForList($routine, $rowclass = '')\n{\n    global $ajax_class, $url_query, $db, $titles;\n\n    $sql_drop = sprintf('DROP %s IF EXISTS %s',\n                         $routine['ROUTINE_TYPE'],\n                         PMA_backquote($routine['SPECIFIC_NAME']));\n    $type_link = \"item_type={$routine['ROUTINE_TYPE']}\";\n\n    $retval  = \"        <tr class='noclick $rowclass'>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                <span class='drop_sql hide'>$sql_drop</span>\\n\";\n    $retval .= \"                <strong>\\n\";\n    $retval .= \"                    \" . htmlspecialchars($routine['SPECIFIC_NAME']) . \"\\n\";\n    $retval .= \"                </strong>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if ($routine['ROUTINE_DEFINITION'] !== null\n        && PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)\n        && PMA_currentUserHasPrivilege('CREATE ROUTINE', $db)\n    ) {\n        $retval .= '                <a ' . $ajax_class['edit']\n                                         . ' href=\"db_routines.php?'\n                                         . $url_query\n                                         . '&amp;edit_item=1'\n                                         . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])\n                                         . '&amp;' . $type_link\n                                         . '\">' . $titles['Edit'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoEdit']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if ($routine['ROUTINE_DEFINITION'] !== null\n        && PMA_currentUserHasPrivilege('EXECUTE', $db)\n    ) {\n        // Check if he routine has any input parameters. If it does,\n        // we will show a dialog to get values for these parameters,\n        // otherwise we can execute it directly.\n        $routine_details = PMA_RTN_getDataFromName(\n            $routine['SPECIFIC_NAME'],\n            $routine['ROUTINE_TYPE'],\n            false\n        );\n        if ($routine !== false) {\n            $execute_action = 'execute_routine';\n            for ($i=0; $i<$routine_details['item_num_params']; $i++) {\n                if ($routine_details['item_type'] == 'PROCEDURE'\n                    && $routine_details['item_param_dir'][$i] == 'OUT'\n                ) {\n                    continue;\n                }\n                $execute_action = 'execute_dialog';\n                break;\n            }\n            $retval .= '                <a ' . $ajax_class['exec']\n                                             . ' href=\"db_routines.php?'\n                                             . $url_query\n                                             . '&amp;' . $execute_action . '=1'\n                                             . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])\n                                             . '&amp;' . $type_link\n                                             . '\">' . $titles['Execute'] . \"</a>\\n\";\n        }\n    } else {\n        $retval .= \"                {$titles['NoExecute']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= '                <a ' . $ajax_class['export']\n                                     . ' href=\"db_routines.php?'\n                                     . $url_query\n                                     . '&amp;export_item=1'\n                                     . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])\n                                     . '&amp;' . $type_link\n                                     . '\">' . $titles['Export'] . \"</a>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)) {\n        $retval .= '                <a ' . $ajax_class['drop']\n                                         . ' href=\"sql.php?'\n                                         . $url_query\n                                         . '&amp;sql_query=' . urlencode($sql_drop)\n                                         . '&amp;goto=db_routines.php' . urlencode(\"?db={$db}\")\n                                         . '\" >' . $titles['Drop'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoDrop']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$routine['ROUTINE_TYPE']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                \" . htmlspecialchars($routine['DTD_IDENTIFIER']) . \"\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"        </tr>\\n\";\n\n    return $retval;\n} // end PMA_RTN_getRowForList()\n\n/**\n * Creates the contents for a row in the list of triggers\n *\n * @param    array    $trigger    An array of routine data\n * @param    string   $rowclass   Empty or one of ['even'|'odd']\n *\n * @return   string   HTML code of a cell for the list of triggers\n */\nfunction PMA_TRI_getRowForList($trigger, $rowclass = '')\n{\n    global $ajax_class, $url_query, $db, $table, $titles;\n\n    $retval  = \"        <tr class='noclick $rowclass'>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                <span class='drop_sql hide'>{$trigger['drop']}</span>\\n\";\n    $retval .= \"                <strong>\\n\";\n    $retval .= \"                    \" . htmlspecialchars($trigger['name']) . \"\\n\";\n    $retval .= \"                </strong>\\n\";\n    $retval .= \"            </td>\\n\";\n    if (empty($table)) {\n        $retval .= \"            <td>\\n\";\n        $retval .= \"                <a href='db_triggers.php?db={$db}\"\n                                     . \"&amp;table={$trigger['table']}'>\"\n                                     . $trigger['table'] . \"</a>\\n\";\n        $retval .= \"            </td>\\n\";\n    }\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table)) {\n        $retval .= '                <a ' . $ajax_class['edit']\n                                         . ' href=\"db_triggers.php?'\n                                         . $url_query\n                                         . '&amp;edit_item=1'\n                                         . '&amp;item_name=' . urlencode($trigger['name'])\n                                         . '\">' . $titles['Edit'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoEdit']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= '                    <a ' . $ajax_class['export']\n                                         . ' href=\"db_triggers.php?'\n                                         . $url_query\n                                         . '&amp;export_item=1'\n                                         . '&amp;item_name=' . urlencode($trigger['name'])\n                                         . '\">' . $titles['Export'] . \"</a>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {\n        $retval .= '                <a ' . $ajax_class['drop']\n                                         . ' href=\"sql.php?'\n                                         . $url_query\n                                         . '&amp;sql_query=' . urlencode($trigger['drop'])\n                                         . '&amp;goto=db_triggers.php' . urlencode(\"?db={$db}\")\n                                         . '\" >' . $titles['Drop'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoDrop']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$trigger['action_timing']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$trigger['event_manipulation']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"        </tr>\\n\";\n\n    return $retval;\n} // end PMA_TRI_getRowForList()\n\n/**\n * Creates the contents for a row in the list of events\n *\n * @param    array    $event      An array of routine data\n * @param    string   $rowclass   Empty or one of ['even'|'odd']\n *\n * @return   string   HTML code of a cell for the list of events\n */\nfunction PMA_EVN_getRowForList($event, $rowclass = '')\n{\n    global $ajax_class, $url_query, $db, $titles;\n\n    $sql_drop = sprintf(\n        'DROP EVENT IF EXISTS %s',\n        PMA_backquote($event['EVENT_NAME'])\n    );\n\n    $retval  = \"        <tr class='noclick $rowclass'>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                <span class='drop_sql hide'>$sql_drop</span>\\n\";\n    $retval .= \"                <strong>\\n\";\n    $retval .= \"                    \" . htmlspecialchars($event['EVENT_NAME']) . \"\\n\";\n    $retval .= \"                </strong>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$event['STATUS']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('EVENT', $db)) {\n        $retval .= '                <a ' . $ajax_class['edit']\n                                         . ' href=\"db_events.php?'\n                                         . $url_query\n                                         . '&amp;edit_item=1'\n                                         . '&amp;item_name=' . urlencode($event['EVENT_NAME'])\n                                         . '\">' . $titles['Edit'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoEdit']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= '                <a ' . $ajax_class['export']\n                                     . ' href=\"db_events.php?'\n                                     . $url_query\n                                     . '&amp;export_item=1'\n                                     . '&amp;item_name=' . urlencode($event['EVENT_NAME'])\n                                     . '\">' . $titles['Export'] . \"</a>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('EVENT', $db)) {\n        $retval .= '                <a ' . $ajax_class['drop']\n                                         . ' href=\"sql.php?'\n                                         . $url_query\n                                         . '&amp;sql_query=' . urlencode($sql_drop)\n                                         . '&amp;goto=db_events.php' . urlencode(\"?db={$db}\")\n                                         . '\" >' . $titles['Drop'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoDrop']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$event['EVENT_TYPE']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"        </tr>\\n\";\n\n    return $retval;\n} // end PMA_EVN_getRowForList()\n\n?>\n"], "fixing_code": ["/* vim: set expandtab sw=4 ts=4 sts=4: */\n\n/**\n * @var    RTE    a JavaScript namespace containing the functionality\n *                for Routines, Triggers and Events.\n *\n *                This namespace is extended by the functionality required\n *                to handle a specific item (a routine, trigger or event)\n *                in the relevant javascript files in this folder.\n */\nvar RTE = {\n    /**\n     * @var    $ajaxDialog        jQuery object containing the reference to the\n     *                            dialog that contains the editor.\n     */\n    $ajaxDialog: null,\n    /**\n     * @var    syntaxHiglighter   Reference to the codemirror editor.\n     */\n    syntaxHiglighter: null,\n    /**\n     * @var    buttonOptions      Object containing options for\n     *                            the jQueryUI dialog buttons\n     */\n    buttonOptions: {},\n    /**\n     * Validate editor form fields.\n     */\n    validate: function () {\n        /**\n         * @var    $elm    a jQuery object containing the reference\n         *                 to an element that is being validated.\n         */\n        var $elm = null;\n        // Common validation. At the very least the name\n        // and the definition must be provided for an item\n        $elm = $('table.rte_table').last().find('input[name=item_name]');\n        if ($elm.val() === '') {\n            $elm.focus();\n            alert(PMA_messages['strFormEmpty']);\n            return false;\n        }\n        $elm = $('table.rte_table').find('textarea[name=item_definition]');\n        if ($elm.val() === '') {\n            this.syntaxHiglighter.focus();\n            alert(PMA_messages['strFormEmpty']);\n            return false;\n        }\n        // The validation has so far passed, so now\n        // we can validate item-specific fields.\n        return RTE.validateCustom();\n    }, // end validate()\n    /**\n     * Validate custom editor form fields.\n     * This function can be overridden by\n     * other files in this folder.\n     */\n    validateCustom: function () {\n        return true;\n    }, // end validateCustom()\n    /**\n     * Execute some code after the ajax\n     * dialog for the ditor is shown.\n     * This function can be overridden by\n     * other files in this folder.\n     */\n    postDialogShow: function () {\n        // Nothing by default\n    } // end postDialogShow()\n}; // end RTE namespace\n\n/**\n * Attach Ajax event handlers for the Routines, Triggers and Events editor.\n *\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function () {\n    /**\n     * Attach Ajax event handlers for the Add/Edit functionality.\n     */\n    $('a.ajax_add_anchor, a.ajax_edit_anchor').live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var    $edit_row    jQuery object containing the reference to\n         *                      the row of the the item being edited\n         *                      from the list of items .\n         */\n        var $edit_row = null;\n        if ($(this).hasClass('ajax_edit_anchor')) {\n            // Remeber the row of the item being edited for later,\n            // so that if the edit is successful, we can replace the\n            // row with info about the modified item.\n            $edit_row = $(this).parents('tr');\n        }\n        /**\n         * @var    $msg    jQuery object containing the reference to\n         *                 the AJAX message shown to the user.\n         */\n        var $msg = PMA_ajaxShowMessage();\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (data.success === true) {\n                // We have successfully fetched the editor form\n                PMA_ajaxRemoveMessage($msg);\n                // Now define the function that is called when\n                // the user presses the \"Go\" button\n                RTE.buttonOptions[PMA_messages['strGo']] = function () {\n                    // Move the data from the codemirror editor back to the\n                    // textarea, where it can be used in the form submission.\n                    RTE.syntaxHiglighter.save();\n                    // Validate editor and submit request, if passed.\n                    if (RTE.validate()) {\n                        /**\n                         * @var    data    Form data to be sent in the AJAX request.\n                         */\n                        var data = $('form.rte_form').last().serialize();\n                        $msg = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n                        $.post($('form.rte_form').last().attr('action'), data, function (data) {\n                            if (data.success === true) {\n                                // Item created successfully\n                                PMA_ajaxRemoveMessage($msg);\n                                PMA_slidingMessage(data.message);\n                                RTE.$ajaxDialog.dialog('close');\n                                // If we are in 'edit' mode, we must remove the reference to the old row.\n                                if (mode === 'edit') {\n                                    $edit_row.remove();\n                                }\n                                // Sometimes, like when moving a trigger from a table to\n                                // another one, the new row should not be inserted into the\n                                // list. In this case \"data.insert\" will be set to false.\n                                if (data.insert) {\n                                    // Insert the new row at the correct location in the list of items\n                                    /**\n                                     * @var    text    Contains the name of an item from the list\n                                     *                 that is used in comparisons to find the correct\n                                     *                 location where to insert a new row.\n                                     */\n                                    var text = '';\n                                    /**\n                                     * @var    inserted    Whether a new item has been inserted\n                                     *                     in the list or not.\n                                     */\n                                    var inserted = false;\n                                    $('table.data').find('tr').each(function () {\n                                        text = $(this)\n                                                .children('td')\n                                                .eq(0)\n                                                .find('strong')\n                                                .text()\n                                                .toUpperCase();\n                                        text = $.trim(text);\n                                        if (text !== '' && text > data.name) {\n                                            $(this).before(data.new_row);\n                                            inserted = true;\n                                            return false;\n                                        }\n                                    });\n                                    if (! inserted) {\n                                        // If we didn't manage to insert the row yet,\n                                        // it must belong at the end of the list,\n                                        // so we insert it there.\n                                        $('table.data').append(data.new_row);\n                                    }\n                                    // Fade-in the new row\n                                    $('.ajaxInsert').show('slow').removeClass('ajaxInsert');\n                                } else if ($('table.data').find('tr').has('td').length === 0) {\n                                    // If we are not supposed to insert the new row, we will now\n                                    // check if the table is empty and needs to be hidden. This\n                                    // will be the case if we were editing the only item in the\n                                    // list, which we removed and will not be inserting something\n                                    // else in its place.\n                                    $('table.data').hide(\"slow\", function () {\n                                        $('#nothing2display').show(\"slow\");\n                                    });\n                                }\n                                // Now we have inserted the row at the correct position, but surely\n                                // at least some row classes are wrong now. So we will itirate\n                                // throught all rows and assign correct classes to them.\n                                /**\n                                 * @var    ct          Count of processed rows.\n                                 */\n                                var ct = 0;\n                                /**\n                                 * @var    rowclass    Class to be attached to the row\n                                 *                     that is being processed\n                                 */\n                                var rowclass = '';\n                                $('table.data').find('tr').has('td').each(function () {\n                                    rowclass = (ct % 2 === 0) ? 'odd' : 'even';\n                                    $(this).removeClass().addClass(rowclass);\n                                    ct++;\n                                });\n                                // If this is the first item being added, remove\n                                // the \"No items\" message and show the list.\n                                if ($('table.data').find('tr').has('td').length > 0\n                                    && $('#nothing2display').is(':visible')) {\n                                    $('#nothing2display').hide(\"slow\", function () {\n                                        $('table.data').show(\"slow\");\n                                    });\n                                }\n                            } else {\n                                PMA_ajaxShowMessage(data.error, false);\n                            }\n                        }); // end $.post()\n                    } // end \"if (RTE.validate())\"\n                }; // end of function that handles the submission of the Editor\n                RTE.buttonOptions[PMA_messages['strClose']] = function () {\n                    $(this).dialog(\"close\");\n                };\n                /**\n                 * Display the dialog to the user\n                 */\n                RTE.$ajaxDialog = $('<div>' + data.message + '</div>').dialog({\n                                width: 700,\n                                minWidth: 500,\n                                buttons: RTE.buttonOptions,\n                                title: data.title,\n                                modal: true,\n                                close: function () {\n                                    $(this).remove();\n                                }\n                        });\n                RTE.$ajaxDialog.find('input[name=item_name]').focus();\n                RTE.$ajaxDialog.find('input.datefield, input.datetimefield').each(function () {\n                    PMA_addDatepicker($(this).css('width', '95%'));\n                });\n                /**\n                 * @var    mode    Used to remeber whether the editor is in\n                 *                 \"Edit\" or \"Add\" mode.\n                 */\n                var mode = 'add';\n                if ($('input[name=editor_process_edit]').length > 0) {\n                    mode = 'edit';\n                }\n                // Attach syntax highlited editor to the definition\n                /**\n                 * @var    $elm    jQuery object containing the reference to\n                 *                 the Definition textarea.\n                 */\n                var $elm = $('textarea[name=item_definition]').last();\n                /**\n                 * @var    opts    Options to pass to the codemirror editor.\n                 */\n                var opts = {lineNumbers: true, matchBrackets: true, indentUnit: 4, mode: \"text/x-mysql\"};\n                RTE.syntaxHiglighter = CodeMirror.fromTextArea($elm[0], opts);\n                // Execute item-specific code\n                RTE.postDialogShow(data);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.get()\n    }); // end $.live()\n\n    /**\n     * Attach Ajax event handlers for input fields in the editor\n     * and the routine execution dialog used to submit the Ajax\n     * request when the ENTER key is pressed.\n     */\n    $('table.rte_table').find('input[name^=item], input[name^=params]').live('keydown', function (e) {\n        if (e.which === 13) { // 13 is the ENTER key\n            e.preventDefault();\n            if (typeof RTE.buttonOptions[PMA_messages['strGo']] === 'function') {\n                RTE.buttonOptions[PMA_messages['strGo']].call();\n            }\n        }\n    }); // end $.live()\n\n    /**\n     * Attach Ajax event handlers for Export of Routines, Triggers and Events.\n     */\n    $('a.ajax_export_anchor').live('click', function (event) {\n        event.preventDefault();\n        var $msg = PMA_ajaxShowMessage();\n        // Fire the ajax request straight away\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (data.success === true) {\n                PMA_ajaxRemoveMessage($msg);\n                /**\n                 * @var button_options  Object containing options for jQueryUI dialog buttons\n                 */\n                var button_options = {};\n                button_options[PMA_messages['strClose']] = function () {\n                    $(this).dialog(\"close\").remove();\n                };\n                /**\n                 * Display the dialog to the user\n                 */\n                var $ajaxDialog = $('<div>' + data.message + '</div>').dialog({\n                                      width: 500,\n                                      buttons: button_options,\n                                      title: data.title\n                                  });\n                // Attach syntax highlited editor to export dialog\n                /**\n                 * @var    $elm    jQuery object containing the reference\n                 *                 to the Export textarea.\n                 */\n                var $elm = $ajaxDialog.find('textarea');\n                /**\n                 * @var    opts    Options to pass to the codemirror editor.\n                 */\n                var opts = {lineNumbers: true, matchBrackets: true, indentUnit: 4, mode: \"text/x-mysql\"};\n                CodeMirror.fromTextArea($elm[0], opts);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.get()\n    }); // end $.live()\n\n    /**\n     * Attach Ajax event handlers for Drop functionality of Routines, Triggers and Events.\n     */\n    $('a.ajax_drop_anchor').live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var $curr_row    Object containing reference to the current row\n         */\n        var $curr_row = $(this).parents('tr');\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = $('<div/>').text($curr_row.children('td').children('.drop_sql').text());\n        // We ask for confirmation first here, before submitting the ajax request\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n            /**\n             * @var    $msg    jQuery object containing the reference to\n             *                 the AJAX message shown to the user.\n             */\n            var $msg = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': 1, 'ajax_request': true}, function (data) {\n                if (data.success === true) {\n                    /**\n                     * @var $table    Object containing reference to the main list of elements.\n                     */\n                    var $table = $curr_row.parent();\n                    // Check how many rows will be left after we remove\n                    // the one that the user has requested us to remove\n                    if ($table.find('tr').length === 2) {\n                        // If there are two rows left, it means that they are\n                        // the header of the table and the rows that we are\n                        // about to remove, so after the removal there will be\n                        // nothing to show in the table, so we hide it.\n                        $table.hide(\"slow\", function () {\n                            $(this).find('tr.even, tr.odd').remove();\n                            $('#nothing2display').show(\"slow\");\n                        });\n                    } else {\n                        $curr_row.hide(\"slow\", function () {\n                            $(this).remove();\n                            // Now we have removed the row from the list, but maybe\n                            // some row classes are wrong now. So we will itirate\n                            // throught all rows and assign correct classes to them.\n                            /**\n                             * @var    ct          Count of processed rows.\n                             */\n                            var ct = 0;\n                            /**\n                             * @var    rowclass    Class to be attached to the row\n                             *                     that is being processed\n                             */\n                            var rowclass = '';\n                            $table.find('tr').has('td').each(function () {\n                                rowclass = (ct % 2 === 0) ? 'odd' : 'even';\n                                $(this).removeClass().addClass(rowclass);\n                                ct++;\n                            });\n                        });\n                    }\n                    // Get rid of the \"Loading\" message\n                    PMA_ajaxRemoveMessage($msg);\n                    // Show the query that we just executed\n                    PMA_slidingMessage(data.sql_query);\n                } else {\n                    PMA_ajaxShowMessage(PMA_messages['strErrorProcessingRequest'] + \" : \" + data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); // end $.live()\n}); // end of $(document).ready()\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Common functions for generating lists of Routines, Triggers and Events.\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * Creates a list of items containing the relevant\n * information and some action links.\n *\n * @param    string   $type    One of ['routine'|'trigger'|'event']\n * @param    array    $items   An array of items\n *\n * @return   string   HTML code of the list of items\n */\nfunction PMA_RTE_getList($type, $items)\n{\n    global $table;\n\n    /**\n     * Conditional classes switch the list on or off\n     */\n    $class1 = 'hide';\n    $class2 = '';\n    if (! $items) {\n        $class1 = '';\n        $class2 = ' hide';\n    }\n    /**\n     * Generate output\n     */\n    $retval  = \"<!-- LIST OF \" . PMA_RTE_getWord('docu') . \" START -->\\n\";\n    $retval .= \"<fieldset>\\n\";\n    $retval .= \"    <legend>\\n\";\n    $retval .= \"        \" . PMA_RTE_getWord('title') . \"\\n\";\n    $retval .= \"        \" . PMA_showMySQLDocu('SQL-Syntax', PMA_RTE_getWord('docu')) . \"\\n\";\n    $retval .= \"    </legend>\\n\";\n    $retval .= \"    <div class='$class1' id='nothing2display'>\\n\";\n    $retval .= \"      \" . PMA_RTE_getWord('nothing') . \"\\n\";\n    $retval .= \"    </div>\\n\";\n    $retval .= \"    <table class='data$class2'>\\n\";\n    $retval .= \"        <!-- TABLE HEADERS -->\\n\";\n    $retval .= \"        <tr>\\n\";\n    switch ($type) {\n    case 'routine':\n        $retval .= \"            <th>\" . __('Name') . \"</th>\\n\";\n        $retval .= \"            <th colspan='4'>\" . __('Action') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Type') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Returns') . \"</th>\\n\";\n        break;\n    case 'trigger':\n        $retval .= \"            <th>\" . __('Name') . \"</th>\\n\";\n        if (empty($table)) {\n            $retval .= \"            <th>\" . __('Table') . \"</th>\\n\";\n        }\n        $retval .= \"            <th colspan='3'>\" . __('Action') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Time') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Event') . \"</th>\\n\";\n        break;\n    case 'event':\n        $retval .= \"            <th>\" . __('Name') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Status') . \"</th>\\n\";\n        $retval .= \"            <th colspan='3'>\" . __('Action') . \"</th>\\n\";\n        $retval .= \"            <th>\" . __('Type') . \"</th>\\n\";\n        break;\n    default:\n        break;\n    }\n    $retval .= \"        </tr>\\n\";\n    $retval .= \"        <!-- TABLE DATA -->\\n\";\n    $ct = 0;\n    foreach ($items as $item) {\n        $rowclass = ($ct % 2 == 0) ? 'odd' : 'even';\n        if ($GLOBALS['is_ajax_request']) {\n            $rowclass .= ' ajaxInsert hide';\n        }\n        // Get each row from the correct function\n        switch ($type) {\n        case 'routine':\n            $retval .= PMA_RTN_getRowForList($item, $rowclass);\n            break;\n        case 'trigger':\n            $retval .= PMA_TRI_getRowForList($item, $rowclass);\n            break;\n        case 'event':\n            $retval .= PMA_EVN_getRowForList($item, $rowclass);\n            break;\n        default:\n            break;\n        }\n        $ct++;\n    }\n    $retval .= \"    </table>\\n\";\n    $retval .= \"</fieldset>\\n\";\n    $retval .= \"<!-- LIST OF \" . PMA_RTE_getWord('docu') . \" END -->\\n\";\n\n    return $retval;\n} // end PMA_RTE_getList()\n\n/**\n * Creates the contents for a row in the list of routines\n *\n * @param    array    $routine    An array of routine data\n * @param    string   $rowclass   Empty or one of ['even'|'odd']\n *\n * @return   string   HTML code of a row for the list of routines\n */\nfunction PMA_RTN_getRowForList($routine, $rowclass = '')\n{\n    global $ajax_class, $url_query, $db, $titles;\n\n    $sql_drop = sprintf('DROP %s IF EXISTS %s',\n                         $routine['ROUTINE_TYPE'],\n                         PMA_backquote($routine['SPECIFIC_NAME']));\n    $type_link = \"item_type={$routine['ROUTINE_TYPE']}\";\n\n    $retval  = \"        <tr class='noclick $rowclass'>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                <span class='drop_sql hide'>\" . htmlspecialchars($sql_drop) . \"</span>\\n\";\n    $retval .= \"                <strong>\\n\";\n    $retval .= \"                    \" . htmlspecialchars($routine['SPECIFIC_NAME']) . \"\\n\";\n    $retval .= \"                </strong>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if ($routine['ROUTINE_DEFINITION'] !== null\n        && PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)\n        && PMA_currentUserHasPrivilege('CREATE ROUTINE', $db)\n    ) {\n        $retval .= '                <a ' . $ajax_class['edit']\n                                         . ' href=\"db_routines.php?'\n                                         . $url_query\n                                         . '&amp;edit_item=1'\n                                         . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])\n                                         . '&amp;' . $type_link\n                                         . '\">' . $titles['Edit'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoEdit']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if ($routine['ROUTINE_DEFINITION'] !== null\n        && PMA_currentUserHasPrivilege('EXECUTE', $db)\n    ) {\n        // Check if he routine has any input parameters. If it does,\n        // we will show a dialog to get values for these parameters,\n        // otherwise we can execute it directly.\n        $routine_details = PMA_RTN_getDataFromName(\n            $routine['SPECIFIC_NAME'],\n            $routine['ROUTINE_TYPE'],\n            false\n        );\n        if ($routine !== false) {\n            $execute_action = 'execute_routine';\n            for ($i=0; $i<$routine_details['item_num_params']; $i++) {\n                if ($routine_details['item_type'] == 'PROCEDURE'\n                    && $routine_details['item_param_dir'][$i] == 'OUT'\n                ) {\n                    continue;\n                }\n                $execute_action = 'execute_dialog';\n                break;\n            }\n            $retval .= '                <a ' . $ajax_class['exec']\n                                             . ' href=\"db_routines.php?'\n                                             . $url_query\n                                             . '&amp;' . $execute_action . '=1'\n                                             . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])\n                                             . '&amp;' . $type_link\n                                             . '\">' . $titles['Execute'] . \"</a>\\n\";\n        }\n    } else {\n        $retval .= \"                {$titles['NoExecute']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= '                <a ' . $ajax_class['export']\n                                     . ' href=\"db_routines.php?'\n                                     . $url_query\n                                     . '&amp;export_item=1'\n                                     . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])\n                                     . '&amp;' . $type_link\n                                     . '\">' . $titles['Export'] . \"</a>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)) {\n        $retval .= '                <a ' . $ajax_class['drop']\n                                         . ' href=\"sql.php?'\n                                         . $url_query\n                                         . '&amp;sql_query=' . urlencode($sql_drop)\n                                         . '&amp;goto=db_routines.php' . urlencode(\"?db={$db}\")\n                                         . '\" >' . $titles['Drop'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoDrop']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$routine['ROUTINE_TYPE']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                \" . htmlspecialchars($routine['DTD_IDENTIFIER']) . \"\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"        </tr>\\n\";\n\n    return $retval;\n} // end PMA_RTN_getRowForList()\n\n/**\n * Creates the contents for a row in the list of triggers\n *\n * @param    array    $trigger    An array of routine data\n * @param    string   $rowclass   Empty or one of ['even'|'odd']\n *\n * @return   string   HTML code of a cell for the list of triggers\n */\nfunction PMA_TRI_getRowForList($trigger, $rowclass = '')\n{\n    global $ajax_class, $url_query, $db, $table, $titles;\n\n    $retval  = \"        <tr class='noclick $rowclass'>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                <span class='drop_sql hide'>\" . htmlspecialchars($trigger['drop']) . \"</span>\\n\";\n    $retval .= \"                <strong>\\n\";\n    $retval .= \"                    \" . htmlspecialchars($trigger['name']) . \"\\n\";\n    $retval .= \"                </strong>\\n\";\n    $retval .= \"            </td>\\n\";\n    if (empty($table)) {\n        $retval .= \"            <td>\\n\";\n        $retval .= \"                <a href='db_triggers.php?db={$db}\"\n                                     . \"&amp;table={$trigger['table']}'>\"\n                                     . $trigger['table'] . \"</a>\\n\";\n        $retval .= \"            </td>\\n\";\n    }\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table)) {\n        $retval .= '                <a ' . $ajax_class['edit']\n                                         . ' href=\"db_triggers.php?'\n                                         . $url_query\n                                         . '&amp;edit_item=1'\n                                         . '&amp;item_name=' . urlencode($trigger['name'])\n                                         . '\">' . $titles['Edit'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoEdit']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= '                    <a ' . $ajax_class['export']\n                                         . ' href=\"db_triggers.php?'\n                                         . $url_query\n                                         . '&amp;export_item=1'\n                                         . '&amp;item_name=' . urlencode($trigger['name'])\n                                         . '\">' . $titles['Export'] . \"</a>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {\n        $retval .= '                <a ' . $ajax_class['drop']\n                                         . ' href=\"sql.php?'\n                                         . $url_query\n                                         . '&amp;sql_query=' . urlencode($trigger['drop'])\n                                         . '&amp;goto=db_triggers.php' . urlencode(\"?db={$db}\")\n                                         . '\" >' . $titles['Drop'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoDrop']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$trigger['action_timing']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$trigger['event_manipulation']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"        </tr>\\n\";\n\n    return $retval;\n} // end PMA_TRI_getRowForList()\n\n/**\n * Creates the contents for a row in the list of events\n *\n * @param    array    $event      An array of routine data\n * @param    string   $rowclass   Empty or one of ['even'|'odd']\n *\n * @return   string   HTML code of a cell for the list of events\n */\nfunction PMA_EVN_getRowForList($event, $rowclass = '')\n{\n    global $ajax_class, $url_query, $db, $titles;\n\n    $sql_drop = sprintf(\n        'DROP EVENT IF EXISTS %s',\n        PMA_backquote($event['EVENT_NAME'])\n    );\n\n    $retval  = \"        <tr class='noclick $rowclass'>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                <span class='drop_sql hide'>\" . htmlspecialchars($sql_drop) . \"</span>\\n\";\n    $retval .= \"                <strong>\\n\";\n    $retval .= \"                    \" . htmlspecialchars($event['EVENT_NAME']) . \"\\n\";\n    $retval .= \"                </strong>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$event['STATUS']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('EVENT', $db)) {\n        $retval .= '                <a ' . $ajax_class['edit']\n                                         . ' href=\"db_events.php?'\n                                         . $url_query\n                                         . '&amp;edit_item=1'\n                                         . '&amp;item_name=' . urlencode($event['EVENT_NAME'])\n                                         . '\">' . $titles['Edit'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoEdit']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= '                <a ' . $ajax_class['export']\n                                     . ' href=\"db_events.php?'\n                                     . $url_query\n                                     . '&amp;export_item=1'\n                                     . '&amp;item_name=' . urlencode($event['EVENT_NAME'])\n                                     . '\">' . $titles['Export'] . \"</a>\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    if (PMA_currentUserHasPrivilege('EVENT', $db)) {\n        $retval .= '                <a ' . $ajax_class['drop']\n                                         . ' href=\"sql.php?'\n                                         . $url_query\n                                         . '&amp;sql_query=' . urlencode($sql_drop)\n                                         . '&amp;goto=db_events.php' . urlencode(\"?db={$db}\")\n                                         . '\" >' . $titles['Drop'] . \"</a>\\n\";\n    } else {\n        $retval .= \"                {$titles['NoDrop']}\\n\";\n    }\n    $retval .= \"            </td>\\n\";\n    $retval .= \"            <td>\\n\";\n    $retval .= \"                 {$event['EVENT_TYPE']}\\n\";\n    $retval .= \"            </td>\\n\";\n    $retval .= \"        </tr>\\n\";\n\n    return $retval;\n} // end PMA_EVN_getRowForList()\n\n?>\n"], "filenames": ["js/rte/common.js", "libraries/rte/rte_list.lib.php"], "buggy_code_start_loc": [321, 124], "buggy_code_end_loc": [322, 301], "fixing_code_start_loc": [321, 124], "fixing_code_end_loc": [322, 301], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 3.5.x before 3.5.3 allow remote authenticated users to inject arbitrary web script or HTML via a crafted name of (1) an event, (2) a procedure, or (3) a trigger.", "other": {"cve": {"id": "CVE-2012-5339", "sourceIdentifier": "cve@mitre.org", "published": "2012-10-25T10:51:28.983", "lastModified": "2013-01-26T04:58:10.930", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 3.5.x before 3.5.3 allow remote authenticated users to inject arbitrary web script or HTML via a crafted name of (1) an event, (2) a procedure, or (3) a trigger."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) en phpMyAdmin v3.5.x antes de v3.5.3, permiten a usuarios remotos autenticados, ejecutar secuencias de comandos web o HTML de su elecci\u00f3n a trav\u00e9s de un nombre manipulado en (1) un evento, (2) un procedimiento o (3) un disparador."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2577DB75-9893-4496-B9B8-22F4D7C70D8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "3BBC76AB-567B-4081-8520-D4BB2211CA91"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "EDFD7186-12C3-4FA6-951E-288063262EAE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "C4E23EA5-8FD8-441A-8CB6-F1E77AA0D73B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "B5FE1328-F2E1-45C8-80ED-0560DAB666EE"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2012-11/msg00033.html", "source": "cve@mitre.org"}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2012-6.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/bid/55925", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/6ea8fad3f999bfdf79eb6fe31309592bca54d611", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/cfd688d2512df9827a8ecc0412fc264fc5bcb186", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/6ea8fad3f999bfdf79eb6fe31309592bca54d611"}}