{"buggy_code": ["<?php\n\nheader('Content-type: application/json');\n\nif (!Auth::user()->hasGlobalAdmin()) {\n    $response = array(\n        'status'  => 'error',\n        'message' => 'Need to be admin',\n    );\n    echo _json_encode($response);\n    exit;\n}\n\n$status = 'ok';\n$message = '';\n\n$device_id      = $_POST['device_id'];\n$id             = $_POST['ccustomoid_id'];\n$action         = mres($_POST['action']);\n$name           = mres($_POST['name']);\n$oid            = mres($_POST['oid']);\n$datatype       = mres($_POST['datatype']);\nif (empty(mres($_POST['unit']))) {\n    $unit           = array('NULL');\n} else {\n    $unit           = mres($_POST['unit']);\n}\nif (!empty(mres($_POST['limit'])) && is_numeric(mres($_POST['limit']))) {\n    $limit          = mres($_POST['limit']);\n} else {\n    $limit          = array('NULL');\n}\nif (!empty(mres($_POST['limit_warn'])) && is_numeric(mres($_POST['limit_warn']))) {\n    $limit_warn     = mres($_POST['limit_warn']);\n} else {\n    $limit_warn     = array('NULL');\n}\nif (!empty(mres($_POST['limit_low'])) && is_numeric(mres($_POST['limit_low']))) {\n    $limit_low      = mres($_POST['limit_low']);\n} else {\n    $limit_low      = array('NULL');\n}\nif (!empty(mres($_POST['limit_low_warn'])) && is_numeric(mres($_POST['limit_low_warn']))) {\n    $limit_low_warn = mres($_POST['limit_low_warn']);\n} else {\n    $limit_low_warn = array('NULL');\n}\nif (mres($_POST['alerts']) == 'on') {\n    $alerts = 1;\n} else {\n    $alerts = 0;\n}\nif (mres($_POST['passed']) == 'on') {\n    $passed = 1;\n} else {\n    $passed = 0;\n}\nif (!empty(mres($_POST['divisor'])) && is_numeric(mres($_POST['divisor']))) {\n    $divisor        = mres($_POST['divisor']);\n} else {\n    $divisor        = 1;\n}\nif (!empty(mres($_POST['multiplier'])) && is_numeric(mres($_POST['multiplier']))) {\n    $multiplier     = mres($_POST['multiplier']);\n} else {\n    $multiplier     = 1;\n}\nif (!empty(mres($_POST['user_func']))) {\n    $user_func = mres($_POST['user_func']);\n} else {\n    $user_func = array('NULL');\n}\n\nif ($action == \"test\") {\n    $query = \"SELECT * FROM `devices` WHERE `device_id` = $device_id LIMIT 1\";\n    $device = dbFetchRow($query);\n\n    $rawdata = snmp_get($device, $oid, '-Oqv');\n\n    if (is_numeric($rawdata)) {\n        if (dbUpdate(\n            array(\n                'customoid_passed' => 1,\n            ),\n            'customoids',\n            'customoid_id=?',\n            array($id)\n        ) >= 0) {\n            $message = \"Test successful for <i>$name</i>, value $rawdata received\";\n        } else {\n            $status   = 'error';\n            $message = \"Failed to set pass on OID <i>$name</i>\";\n        }\n    } else {\n        $status  = 'error';\n        $message = \"Invalid data in SNMP reply, value $rawdata received\";\n    }\n} else {\n    if (is_numeric($id) && $id > 0) {\n        if (dbUpdate(\n            array(\n                'customoid_descr'          => $name,\n                'customoid_oid'            => $oid,\n                'customoid_datatype'       => $datatype,\n                'customoid_unit'           => $unit,\n                'customoid_divisor'        => $divisor,\n                'customoid_multiplier'     => $multiplier,\n                'customoid_limit'          => $limit,\n                'customoid_limit_warn'     => $limit_warn,\n                'customoid_limit_low'      => $limit_low,\n                'customoid_limit_low_warn' => $limit_low_warn,\n                'customoid_alert'          => $alerts,\n                'customoid_passed'         => $passed,\n                'user_func'                => $user_func\n            ),\n            'customoids',\n            \"`customoid_id` = ?\",\n            array($id)\n        ) >= 0) { //end if condition\n            $message = \"Edited OID: <i>$name</i>\";\n        } else {\n            $status   = 'error';\n            $message = \"Failed to edit OID <i>$name</i>\";\n        }\n    } else {\n        if (empty($name)) {\n            $status  = 'error';\n            $message = 'No OID name provided';\n        } else {\n            if (dbFetchCell('SELECT 1 FROM `customoids` WHERE `customoid_descr` = ? AND `device_id`=?', array($name, $device_id))) {\n                $status = 'error';\n                $message = \"OID named <i>$name</i> on this device already exists\";\n            } else {\n                $id = dbInsert(\n                    array(\n                        'device_id'                => $device_id,\n                        'customoid_descr'          => $name,\n                        'customoid_oid'            => $oid,\n                        'customoid_datatype'       => $datatype,\n                        'customoid_unit'           => $unit,\n                        'customoid_divisor'        => $divisor,\n                        'customoid_multiplier'     => $multiplier,\n                        'customoid_limit'          => $limit,\n                        'customoid_limit_warn'     => $limit_warn,\n                        'customoid_limit_low'      => $limit_low,\n                        'customoid_limit_low_warn' => $limit_low_warn,\n                        'customoid_alert'          => $alerts,\n                        'customoid_passed'         => $passed,\n                        'user_func'                => $user_func\n                    ),\n                    'customoids'\n                );\n                if ($id) {\n                    $message = \"Added OID: <i>$name</i>\";\n                } else {\n                    $status = 'error';\n                    $message = \"Failed to add OID: <i>$name</i>\";\n                }\n            }\n        }\n    }\n}\n\ndie(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n"], "fixing_code": ["<?php\n\nheader('Content-type: application/json');\n\nif (!Auth::user()->hasGlobalAdmin()) {\n    $response = array(\n        'status'  => 'error',\n        'message' => 'Need to be admin',\n    );\n    echo _json_encode($response);\n    exit;\n}\n\n$status = 'ok';\n$message = '';\n\n$device_id      = $_POST['device_id'];\n$id             = $_POST['ccustomoid_id'];\n$action         = mres($_POST['action']);\n$name           = mres($_POST['name']);\n$oid            = mres($_POST['oid']);\n$datatype       = mres($_POST['datatype']);\nif (empty(mres($_POST['unit']))) {\n    $unit           = array('NULL');\n} else {\n    $unit           = mres($_POST['unit']);\n}\nif (!empty(mres($_POST['limit'])) && is_numeric(mres($_POST['limit']))) {\n    $limit          = mres($_POST['limit']);\n} else {\n    $limit          = array('NULL');\n}\nif (!empty(mres($_POST['limit_warn'])) && is_numeric(mres($_POST['limit_warn']))) {\n    $limit_warn     = mres($_POST['limit_warn']);\n} else {\n    $limit_warn     = array('NULL');\n}\nif (!empty(mres($_POST['limit_low'])) && is_numeric(mres($_POST['limit_low']))) {\n    $limit_low      = mres($_POST['limit_low']);\n} else {\n    $limit_low      = array('NULL');\n}\nif (!empty(mres($_POST['limit_low_warn'])) && is_numeric(mres($_POST['limit_low_warn']))) {\n    $limit_low_warn = mres($_POST['limit_low_warn']);\n} else {\n    $limit_low_warn = array('NULL');\n}\nif (mres($_POST['alerts']) == 'on') {\n    $alerts = 1;\n} else {\n    $alerts = 0;\n}\nif (mres($_POST['passed']) == 'on') {\n    $passed = 1;\n} else {\n    $passed = 0;\n}\nif (!empty(mres($_POST['divisor'])) && is_numeric(mres($_POST['divisor']))) {\n    $divisor        = mres($_POST['divisor']);\n} else {\n    $divisor        = 1;\n}\nif (!empty(mres($_POST['multiplier'])) && is_numeric(mres($_POST['multiplier']))) {\n    $multiplier     = mres($_POST['multiplier']);\n} else {\n    $multiplier     = 1;\n}\nif (!empty(mres($_POST['user_func']))) {\n    $user_func = mres($_POST['user_func']);\n} else {\n    $user_func = array('NULL');\n}\n\nif ($action == \"test\") {\n    $query = \"SELECT * FROM `devices` WHERE `device_id` = ? LIMIT 1\";\n    $device = dbFetchRow($query, [$device_id]);\n\n    $rawdata = snmp_get($device, $oid, '-Oqv');\n\n    if (is_numeric($rawdata)) {\n        if (dbUpdate(\n            array(\n                'customoid_passed' => 1,\n            ),\n            'customoids',\n            'customoid_id=?',\n            array($id)\n        ) >= 0) {\n            $message = \"Test successful for <i>$name</i>, value $rawdata received\";\n        } else {\n            $status   = 'error';\n            $message = \"Failed to set pass on OID <i>$name</i>\";\n        }\n    } else {\n        $status  = 'error';\n        $message = \"Invalid data in SNMP reply, value $rawdata received\";\n    }\n} else {\n    if (is_numeric($id) && $id > 0) {\n        if (dbUpdate(\n            array(\n                'customoid_descr'          => $name,\n                'customoid_oid'            => $oid,\n                'customoid_datatype'       => $datatype,\n                'customoid_unit'           => $unit,\n                'customoid_divisor'        => $divisor,\n                'customoid_multiplier'     => $multiplier,\n                'customoid_limit'          => $limit,\n                'customoid_limit_warn'     => $limit_warn,\n                'customoid_limit_low'      => $limit_low,\n                'customoid_limit_low_warn' => $limit_low_warn,\n                'customoid_alert'          => $alerts,\n                'customoid_passed'         => $passed,\n                'user_func'                => $user_func\n            ),\n            'customoids',\n            \"`customoid_id` = ?\",\n            array($id)\n        ) >= 0) { //end if condition\n            $message = \"Edited OID: <i>$name</i>\";\n        } else {\n            $status   = 'error';\n            $message = \"Failed to edit OID <i>$name</i>\";\n        }\n    } else {\n        if (empty($name)) {\n            $status  = 'error';\n            $message = 'No OID name provided';\n        } else {\n            if (dbFetchCell('SELECT 1 FROM `customoids` WHERE `customoid_descr` = ? AND `device_id`=?', array($name, $device_id))) {\n                $status = 'error';\n                $message = \"OID named <i>$name</i> on this device already exists\";\n            } else {\n                $id = dbInsert(\n                    array(\n                        'device_id'                => $device_id,\n                        'customoid_descr'          => $name,\n                        'customoid_oid'            => $oid,\n                        'customoid_datatype'       => $datatype,\n                        'customoid_unit'           => $unit,\n                        'customoid_divisor'        => $divisor,\n                        'customoid_multiplier'     => $multiplier,\n                        'customoid_limit'          => $limit,\n                        'customoid_limit_warn'     => $limit_warn,\n                        'customoid_limit_low'      => $limit_low,\n                        'customoid_limit_low_warn' => $limit_low_warn,\n                        'customoid_alert'          => $alerts,\n                        'customoid_passed'         => $passed,\n                        'user_func'                => $user_func\n                    ),\n                    'customoids'\n                );\n                if ($id) {\n                    $message = \"Added OID: <i>$name</i>\";\n                } else {\n                    $status = 'error';\n                    $message = \"Failed to add OID: <i>$name</i>\";\n                }\n            }\n        }\n    }\n}\n\ndie(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n"], "filenames": ["includes/html/forms/customoid.inc.php"], "buggy_code_start_loc": [75], "buggy_code_end_loc": [77], "fixing_code_start_loc": [75], "fixing_code_end_loc": [77], "type": "CWE-89", "message": "In LibreNMS before 1.65.1, an authenticated attacker can achieve SQL Injection via the customoid.inc.php device_id POST parameter to ajax_form.php.", "other": {"cve": {"id": "CVE-2020-15873", "sourceIdentifier": "cve@mitre.org", "published": "2020-07-21T17:15:12.060", "lastModified": "2020-07-23T14:17:37.467", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In LibreNMS before 1.65.1, an authenticated attacker can achieve SQL Injection via the customoid.inc.php device_id POST parameter to ajax_form.php."}, {"lang": "es", "value": "En LibreNMS versiones anteriores a 1.65.1, un atacante autenticado puede lograr una inyecci\u00f3n SQL por medio del par\u00e1metro POST del archivo customoid.inc.php device_id en el archivo ajax_form.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.65.1", "matchCriteriaId": "1CED68B9-4ACB-488A-B5B0-960E2FC81F44"}]}]}], "references": [{"url": "https://community.librenms.org/c/announcements", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/librenms/librenms/commit/8f3a29cde5bbd8608f9b42923a7d7e2598bcac4e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/compare/1.65...1.65.1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/librenms/librenms/pull/11923", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://research.loginsoft.com/bugs/blind-sql-injection-in-librenms/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/8f3a29cde5bbd8608f9b42923a7d7e2598bcac4e"}}