{"buggy_code": ["/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage br.com.magazine.dao;\r\n\r\nimport br.com.magazine.entidade.Cliente;\r\nimport br.com.magazine.entidade.Editora;\r\nimport br.com.magazine.util.ConnectionFactory;\r\nimport java.sql.Connection;\r\nimport java.sql.Date;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n *\r\n * @author Grupo X\r\n */\r\npublic class ClienteDAO {\r\n\r\n    private final String stmtCadastraCliente = \"insert into Cliente (nome, sexo, cpf, nascimento, telefone, email, senha, cep, endereco, endnumero, endcomplemento, bairro, cidade, estado, inativo, perfil) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\";\r\n    private final String stmtAtualizaCliente = \"update Cliente set nome = ?, sexo = ?, cpf = ?, nascimento = ?, telefone = ?, email = ?, senha = ?, cep = ?, endereco = ?, endnumero = ?, endcomplemento = ?, bairro = ?, cidade = ?, estado = ?, perfil = ? where idCliente = ?\";\r\n    private final String stmtBuscarClienteId = \"select * from Cliente where (idcliente = ? and inativo=false) order by nome\";\r\n//    private final String stmtListaCliente = \"select * from Cliente\";\r\n    private final String stmtRemoveCliente = \"update Cliente set inativo = true where idCliente = ?\";\r\n//    private final String stmtRemoveItemPedidoCliente = \"delete from itempedido where idpedido = (select idpedido from pedido where idcliente = ?)\";\r\n//    private final String stmtRemovePedidoCliente = \"delete from pedido where idpedido = (select idpedido from pedido where idcliente= ? )\";\r\n    private final String stmtBuscarNome = \"select * from Cliente where nome like \";\r\n    private final String stmtBuscarCPF = \"select * from Cliente where cpf like \";\r\n    private final String stmtBuscarEmail = \"select * from Cliente where email like \";\r\n    private final String stmtBuscarEmailExato = \"select * from Cliente where email = ?\";\r\n//    private final String stmtProcuraSobreNome = \"select * from Cliente where sobrenome like \";\r\n//    private final String stmtProcuraCPF = \"select * from Cliente where cpf like \";\r\n\r\n    public void cadastrarCliente(Cliente cliente) throws ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            con.setAutoCommit(false);\r\n            stmt = con.prepareStatement(stmtCadastraCliente, PreparedStatement.RETURN_GENERATED_KEYS);\r\n            stmt.setString(1, cliente.getNome());\r\n            stmt.setString(2, cliente.getSexo());\r\n            stmt.setString(3, cliente.getCpf());\r\n            stmt.setDate(4, cliente.getNascimento());\r\n            stmt.setString(5, cliente.getTelefone());\r\n            stmt.setString(6, cliente.getEmail());\r\n            stmt.setString(7, cliente.getSenha());\r\n            stmt.setString(8, cliente.getCep());\r\n            stmt.setString(9, cliente.getEndereco());\r\n            stmt.setString(10, cliente.getEndNumero());\r\n            stmt.setString(11, cliente.getEndComplemento());\r\n            stmt.setString(12, cliente.getBairro());\r\n            stmt.setString(13, cliente.getCidade());\r\n            stmt.setString(14, cliente.getEstado());\r\n            stmt.setBoolean(15, cliente.isInativo());\r\n            stmt.setInt(16, cliente.getPerfil());\r\n            stmt.executeUpdate();\r\n            con.commit();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Erro ao inserir um cliente no banco de dados. Origem: \" + e.getMessage());\r\n        } finally {\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void atualizarCliente(Cliente cliente) throws ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            con.setAutoCommit(false);\r\n            stmt = con.prepareStatement(stmtAtualizaCliente);\r\n            stmt.setString(1, cliente.getNome());\r\n            stmt.setString(2, cliente.getSexo());\r\n            stmt.setString(3, cliente.getCpf());\r\n            stmt.setDate(4, cliente.getNascimento());\r\n            stmt.setString(5, cliente.getTelefone());\r\n            stmt.setString(6, cliente.getEmail());\r\n            stmt.setString(7, cliente.getSenha());\r\n            stmt.setString(8, cliente.getCep());\r\n            stmt.setString(9, cliente.getEndereco());\r\n            stmt.setString(10, cliente.getEndNumero());\r\n            stmt.setString(11, cliente.getEndComplemento());\r\n            stmt.setString(12, cliente.getBairro());\r\n            stmt.setString(13, cliente.getCidade());\r\n            stmt.setString(14, cliente.getEstado());\r\n            stmt.setInt(15, cliente.getPerfil());\r\n            stmt.setInt(16, cliente.getIdCliente());\r\n            stmt.executeUpdate();\r\n            con.commit();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void removerCliente(Cliente cliente) throws ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtRemoveCliente);\r\n            stmt.setLong(1, cliente.getIdCliente());\r\n            stmt.executeUpdate();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar stmt. Ex=\" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public Cliente buscarClienteId(Cliente cliente) throws SQLException, ClassNotFoundException, ParseException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarClienteId);\r\n            stmt.setInt(1, cliente.getIdCliente());\r\n            rs = stmt.executeQuery();\r\n            rs.next();\r\n            Cliente clienteRetorno = new Cliente();\r\n            clienteRetorno.setIdCliente(cliente.getIdCliente());\r\n            clienteRetorno.setNome(rs.getString(\"nome\"));\r\n            clienteRetorno.setSexo(rs.getString(\"sexo\"));\r\n            clienteRetorno.setCpf(rs.getString(\"cpf\"));\r\n            Date nascimento = rs.getDate(\"nascimento\");\r\n            clienteRetorno.setNascimento(nascimento);\r\n            clienteRetorno.setTelefone(rs.getString(\"telefone\"));\r\n            clienteRetorno.setEmail(rs.getString(\"email\"));\r\n            clienteRetorno.setSenha(rs.getString(\"senha\"));\r\n            clienteRetorno.setCep(rs.getString(\"cep\"));\r\n            clienteRetorno.setEndereco(rs.getString(\"endereco\"));\r\n            clienteRetorno.setEndNumero(rs.getString(\"endnumero\"));\r\n            clienteRetorno.setEndComplemento(rs.getString(\"endcomplemento\"));\r\n            clienteRetorno.setBairro(rs.getString(\"bairro\"));\r\n            clienteRetorno.setCidade(rs.getString(\"cidade\"));\r\n            clienteRetorno.setEstado(rs.getString(\"estado\"));\r\n            clienteRetorno.setPerfil(rs.getInt(\"perfil\"));\r\n\r\n            return clienteRetorno;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n//    public List<Cliente> listaClientes() throws SQLException {\r\n//        Connection con = null;\r\n//        PreparedStatement stmt = null;\r\n//        ResultSet rs = null;\r\n//\r\n//        try {\r\n//            con = ConnectionFactory.getConnection();\r\n//            stmt = con.prepareStatement(stmtListaCliente);\r\n//            rs = stmt.executeQuery();\r\n//            List<Cliente> listaClientes = new ArrayList();\r\n//            while (rs.next()) {\r\n//                Cliente cliente = new Cliente(rs.getString(\"nome\"), rs.getString(\"sobrenome\"), rs.getString(\"cpf\"));\r\n//                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n//                listaClientes.add(cliente);\r\n//            }\r\n//            return listaClientes;\r\n//\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        } finally {\r\n//            try {\r\n//                rs.close();\r\n//            } catch (Exception ex) {\r\n//                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                stmt.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                con.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n//            }\r\n//        }\r\n//\r\n//    }\r\n//    \r\n    public List<Cliente> montaListaClientes(ResultSet rs) throws SQLException{\r\n        List<Cliente> listaClientes = new ArrayList();\r\n            while (rs.next()) {\r\n                Cliente cliente = new Cliente();\r\n                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n                cliente.setNome(rs.getString(\"nome\"));\r\n                cliente.setSexo(rs.getString(\"sexo\"));\r\n                cliente.setCpf(rs.getString(\"cpf\"));\r\n                Date nascimento = rs.getDate(\"nascimento\");\r\n                cliente.setNascimento(nascimento);\r\n                cliente.setTelefone(rs.getString(\"telefone\"));\r\n                cliente.setEmail(rs.getString(\"email\"));\r\n                cliente.setSenha(rs.getString(\"senha\"));\r\n                cliente.setCep(rs.getString(\"cep\"));\r\n                cliente.setEndereco(rs.getString(\"endereco\"));\r\n                cliente.setEndNumero(rs.getString(\"endnumero\"));\r\n                cliente.setEndComplemento(rs.getString(\"endcomplemento\"));\r\n                cliente.setBairro(rs.getString(\"bairro\"));\r\n                cliente.setCidade(rs.getString(\"cidade\"));\r\n                cliente.setEstado(rs.getString(\"estado\"));\r\n                cliente.setPerfil(rs.getInt(\"perfil\"));\r\n                listaClientes.add(cliente);\r\n            }\r\n            return listaClientes;\r\n    }\r\n    public List<Cliente> buscarFuncionarioNome(String nome) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarNome + \"'%\" + nome + \"%' and (perfil = 2 or perfil = 3) and inativo=false order by nome\");\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarFuncionarioCPF(String cpf) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarCPF + \"'%\" + cpf + \"%' and (perfil = 2 or perfil = 3) and inativo=false order by nome\");\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarFuncionarioEmail(String email) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarEmail + \"'%\" + email + \"%' and (perfil = 2 or perfil = 3) and inativo=false order by nome\");\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n    public List<Cliente> buscarClienteNome(String nome) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarNome + \"'%\" + nome + \"%' and perfil = 1 and inativo=false order by nome\");\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarClienteCPF(String cpf) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarCPF + \"'%\" + cpf + \"%' and perfil = 1 and inativo=false order by nome\");\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarClienteEmail(String email) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarEmail + \"'%\" + email + \"%' and perfil = 1 and inativo=false order by nome\");\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\npublic Cliente buscarClientePorEmail(String email) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarEmailExato);\r\n            stmt.setString(1, email);\r\n            rs = stmt.executeQuery();\r\n            // query vazia\r\n            if (!rs.next()) {\r\n                return null;\r\n            } else {\r\n                rs.next();\r\n                Cliente cliente = new Cliente();\r\n                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n                cliente.setNome(rs.getString(\"nome\"));\r\n                cliente.setSexo(rs.getString(\"sexo\"));\r\n                cliente.setCpf(rs.getString(\"cpf\"));\r\n                Date nascimento = rs.getDate(\"nascimento\");\r\n                cliente.setNascimento(nascimento);\r\n                cliente.setTelefone(rs.getString(\"telefone\"));\r\n                cliente.setEmail(rs.getString(\"email\"));\r\n                cliente.setSenha(rs.getString(\"senha\"));\r\n                cliente.setCep(rs.getString(\"cep\"));\r\n                cliente.setEndereco(rs.getString(\"endereco\"));\r\n                cliente.setEndNumero(rs.getString(\"endnumero\"));\r\n                cliente.setEndComplemento(rs.getString(\"endcomplemento\"));\r\n                cliente.setBairro(rs.getString(\"bairro\"));\r\n                cliente.setCidade(rs.getString(\"cidade\"));\r\n                cliente.setEstado(rs.getString(\"estado\"));\r\n                cliente.setInativo(rs.getBoolean(\"inativo\"));\r\n\r\n                return cliente;\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n//    \r\n//    \r\n//    public List<Cliente> procuraSobreNome(String sobrenome) throws SQLException {\r\n//        Connection con = null;\r\n//        PreparedStatement stmt = null;\r\n//        ResultSet rs = null;\r\n//\r\n//        try {\r\n//            con = ConnectionFactory.getConnection();\r\n//            stmt = con.prepareStatement(stmtProcuraSobreNome+\"'%\"+sobrenome+\"%'\");\r\n//            rs = stmt.executeQuery();\r\n//            List<Cliente> listaClientes = new ArrayList();\r\n//          \r\n//            while (rs.next()) {\r\n//                Cliente cliente = new Cliente(rs.getString(\"nome\"), rs.getString(\"sobrenome\"), rs.getString(\"cpf\"));\r\n//                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n//                listaClientes.add(cliente);\r\n//            }\r\n//            return listaClientes;\r\n//\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        } finally {\r\n//            try {\r\n//                rs.close();\r\n//            } catch (Exception ex) {\r\n//                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                stmt.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                con.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n//            }\r\n//        }\r\n//\r\n//    }\r\n//    \r\n//        public List<Cliente> procuraCPF (String cpf) throws SQLException {\r\n//        Connection con = null;\r\n//        PreparedStatement stmt = null;\r\n//        ResultSet rs = null;\r\n//\r\n//        try {\r\n//            con = ConnectionFactory.getConnection();\r\n//            stmt = con.prepareStatement(stmtProcuraCPF+\"'%\"+cpf+\"%'\");\r\n//            rs = stmt.executeQuery();\r\n//            List<Cliente> listaClientes = new ArrayList();\r\n//          \r\n//            while (rs.next()) {\r\n//                Cliente cliente = new Cliente(rs.getString(\"nome\"), rs.getString(\"sobrenome\"), rs.getString(\"cpf\"));\r\n//                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n//                listaClientes.add(cliente);\r\n//            }\r\n//            return listaClientes;\r\n//\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        } finally {\r\n//            try {\r\n//                rs.close();\r\n//            } catch (Exception ex) {\r\n//                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                stmt.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                con.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n//            }\r\n//        }\r\n//\r\n//    }\r\n//    \r\n//    \r\n}\r\n", "--Nome do banco: Web2\n\n-- Cria\u00e7\u00e3o da tabela Cliente\n\nCreate table Cliente(\n    idcliente serial,\n    nome varchar(50),\n    sexo char(1),\n    cpf varchar(15),\n    nascimento date,\n    telefone varchar(16),\n    email varchar(50),\n    senha varchar(30),\n    cep varchar(10),\n    endereco varchar(60),\n    endnumero varchar(10),\n    endcomplemento varchar(20),\n    bairro varchar(30),\n    cidade varchar(30),\n    estado varchar(30),\n    inativo boolean,\n    perfil int\n);\n\nCreate table Produto(\n    idProduto serial,\n    titulo varchar(100),\n    autor varchar(50),\n    fkEditora int,\n    fkgenero varchar(30),\n    preco real,\n    idImg serial,\n    inativo boolean\n);\n\n\nCreate table Editora(\n    idEditora serial,\n    nome varchar(100),\n    inativo boolean\n);\n\nCreate table Genero(\n    idGenero serial,\n    nome varchar(100),\n    inativo boolean\n);\n\ncreate table pedido(\nidPedido serial,\nidCliente int,\nvalorTotal real,\ndata DateTime,\nsituacao int\n)\n\n\ncreate table itemPedido(\nidItemPedido serial,\nidPedido int,\nirProduto int,\nquantidade int,\nvalorUnitario int\n)\n"], "fixing_code": ["/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\npackage br.com.magazine.dao;\r\n\r\nimport br.com.magazine.entidade.Cliente;\r\nimport br.com.magazine.entidade.Editora;\r\nimport br.com.magazine.util.ConnectionFactory;\r\nimport java.sql.Connection;\r\nimport java.sql.Date;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n *\r\n * @author Grupo X\r\n */\r\npublic class ClienteDAO {\r\n\r\n    private final String stmtCadastraCliente = \"insert into Cliente (nome, sexo, cpf, nascimento, telefone, email, senha, cep, endereco, endnumero, endcomplemento, bairro, cidade, estado, inativo, perfil) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\";\r\n    private final String stmtAtualizaCliente = \"update Cliente set nome = ?, sexo = ?, cpf = ?, nascimento = ?, telefone = ?, email = ?, senha = ?, cep = ?, endereco = ?, endnumero = ?, endcomplemento = ?, bairro = ?, cidade = ?, estado = ?, perfil = ? where idCliente = ?\";\r\n    private final String stmtBuscarClienteId = \"select * from Cliente where (idcliente = ? and inativo=false) order by nome\";\r\n//    private final String stmtListaCliente = \"select * from Cliente\";\r\n    private final String stmtRemoveCliente = \"update Cliente set inativo = true where idCliente = ?\";\r\n//    private final String stmtRemoveItemPedidoCliente = \"delete from itempedido where idpedido = (select idpedido from pedido where idcliente = ?)\";\r\n//    private final String stmtRemovePedidoCliente = \"delete from pedido where idpedido = (select idpedido from pedido where idcliente= ? )\";\r\n    private final String stmtBuscarNomeCliente = \"select * from Cliente where nome ilike ? and perfil = 1 and inativo=false order by nome\";\r\n    private final String stmtBuscarCPFCliente = \"select * from Cliente where cpf ilike ? and perfil = 1 and inativo=false order by nome\";\r\n    private final String stmtBuscarEmailCliente = \"select * from Cliente where email ilike ? and perfil = 1 and inativo=false order by nome\";\r\n    \r\n    private final String stmtBuscarNomeFuncionario = \"select * from Cliente where nome ilike ? and perfil in (2,3) and inativo=false order by nome\";\r\n    private final String stmtBuscarCPFFuncionario = \"select * from Cliente where cpf ilike ? and perfil in (2,3) and inativo=false order by nome\";\r\n    private final String stmtBuscarEmailFuncionario = \"select * from Cliente where email ilike ? and perfil in (2,3) and inativo=false order by nome\";\r\n    \r\n    private final String stmtBuscarEmailExato = \"select * from Cliente where email = ?\";\r\n//    private final String stmtProcuraSobreNome = \"select * from Cliente where sobrenome like \";\r\n//    private final String stmtProcuraCPF = \"select * from Cliente where cpf like \";\r\n\r\n    public void cadastrarCliente(Cliente cliente) throws ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            con.setAutoCommit(false);\r\n            stmt = con.prepareStatement(stmtCadastraCliente, PreparedStatement.RETURN_GENERATED_KEYS);\r\n            stmt.setString(1, cliente.getNome());\r\n            stmt.setString(2, cliente.getSexo());\r\n            stmt.setString(3, cliente.getCpf());\r\n            stmt.setDate(4, cliente.getNascimento());\r\n            stmt.setString(5, cliente.getTelefone());\r\n            stmt.setString(6, cliente.getEmail());\r\n            stmt.setString(7, cliente.getSenha());\r\n            stmt.setString(8, cliente.getCep());\r\n            stmt.setString(9, cliente.getEndereco());\r\n            stmt.setString(10, cliente.getEndNumero());\r\n            stmt.setString(11, cliente.getEndComplemento());\r\n            stmt.setString(12, cliente.getBairro());\r\n            stmt.setString(13, cliente.getCidade());\r\n            stmt.setString(14, cliente.getEstado());\r\n            stmt.setBoolean(15, cliente.isInativo());\r\n            stmt.setInt(16, cliente.getPerfil());\r\n            stmt.executeUpdate();\r\n            con.commit();\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Erro ao inserir um cliente no banco de dados. Origem: \" + e.getMessage());\r\n        } finally {\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void atualizarCliente(Cliente cliente) throws ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            con.setAutoCommit(false);\r\n            stmt = con.prepareStatement(stmtAtualizaCliente);\r\n            stmt.setString(1, cliente.getNome());\r\n            stmt.setString(2, cliente.getSexo());\r\n            stmt.setString(3, cliente.getCpf());\r\n            stmt.setDate(4, cliente.getNascimento());\r\n            stmt.setString(5, cliente.getTelefone());\r\n            stmt.setString(6, cliente.getEmail());\r\n            stmt.setString(7, cliente.getSenha());\r\n            stmt.setString(8, cliente.getCep());\r\n            stmt.setString(9, cliente.getEndereco());\r\n            stmt.setString(10, cliente.getEndNumero());\r\n            stmt.setString(11, cliente.getEndComplemento());\r\n            stmt.setString(12, cliente.getBairro());\r\n            stmt.setString(13, cliente.getCidade());\r\n            stmt.setString(14, cliente.getEstado());\r\n            stmt.setInt(15, cliente.getPerfil());\r\n            stmt.setInt(16, cliente.getIdCliente());\r\n            stmt.executeUpdate();\r\n            con.commit();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void removerCliente(Cliente cliente) throws ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtRemoveCliente);\r\n            stmt.setLong(1, cliente.getIdCliente());\r\n            stmt.executeUpdate();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                stmt.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar stmt. Ex=\" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public Cliente buscarClienteId(Cliente cliente) throws SQLException, ClassNotFoundException, ParseException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarClienteId);\r\n            stmt.setInt(1, cliente.getIdCliente());\r\n            rs = stmt.executeQuery();\r\n            rs.next();\r\n            Cliente clienteRetorno = new Cliente();\r\n            clienteRetorno.setIdCliente(cliente.getIdCliente());\r\n            clienteRetorno.setNome(rs.getString(\"nome\"));\r\n            clienteRetorno.setSexo(rs.getString(\"sexo\"));\r\n            clienteRetorno.setCpf(rs.getString(\"cpf\"));\r\n            Date nascimento = rs.getDate(\"nascimento\");\r\n            clienteRetorno.setNascimento(nascimento);\r\n            clienteRetorno.setTelefone(rs.getString(\"telefone\"));\r\n            clienteRetorno.setEmail(rs.getString(\"email\"));\r\n            clienteRetorno.setSenha(rs.getString(\"senha\"));\r\n            clienteRetorno.setCep(rs.getString(\"cep\"));\r\n            clienteRetorno.setEndereco(rs.getString(\"endereco\"));\r\n            clienteRetorno.setEndNumero(rs.getString(\"endnumero\"));\r\n            clienteRetorno.setEndComplemento(rs.getString(\"endcomplemento\"));\r\n            clienteRetorno.setBairro(rs.getString(\"bairro\"));\r\n            clienteRetorno.setCidade(rs.getString(\"cidade\"));\r\n            clienteRetorno.setEstado(rs.getString(\"estado\"));\r\n            clienteRetorno.setPerfil(rs.getInt(\"perfil\"));\r\n\r\n            return clienteRetorno;\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n//    public List<Cliente> listaClientes() throws SQLException {\r\n//        Connection con = null;\r\n//        PreparedStatement stmt = null;\r\n//        ResultSet rs = null;\r\n//\r\n//        try {\r\n//            con = ConnectionFactory.getConnection();\r\n//            stmt = con.prepareStatement(stmtListaCliente);\r\n//            rs = stmt.executeQuery();\r\n//            List<Cliente> listaClientes = new ArrayList();\r\n//            while (rs.next()) {\r\n//                Cliente cliente = new Cliente(rs.getString(\"nome\"), rs.getString(\"sobrenome\"), rs.getString(\"cpf\"));\r\n//                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n//                listaClientes.add(cliente);\r\n//            }\r\n//            return listaClientes;\r\n//\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        } finally {\r\n//            try {\r\n//                rs.close();\r\n//            } catch (Exception ex) {\r\n//                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                stmt.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                con.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n//            }\r\n//        }\r\n//\r\n//    }\r\n//    \r\n    public List<Cliente> montaListaClientes(ResultSet rs) throws SQLException{\r\n        List<Cliente> listaClientes = new ArrayList();\r\n            while (rs.next()) {\r\n                Cliente cliente = new Cliente();\r\n                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n                cliente.setNome(rs.getString(\"nome\"));\r\n                cliente.setSexo(rs.getString(\"sexo\"));\r\n                cliente.setCpf(rs.getString(\"cpf\"));\r\n                Date nascimento = rs.getDate(\"nascimento\");\r\n                cliente.setNascimento(nascimento);\r\n                cliente.setTelefone(rs.getString(\"telefone\"));\r\n                cliente.setEmail(rs.getString(\"email\"));\r\n                cliente.setSenha(rs.getString(\"senha\"));\r\n                cliente.setCep(rs.getString(\"cep\"));\r\n                cliente.setEndereco(rs.getString(\"endereco\"));\r\n                cliente.setEndNumero(rs.getString(\"endnumero\"));\r\n                cliente.setEndComplemento(rs.getString(\"endcomplemento\"));\r\n                cliente.setBairro(rs.getString(\"bairro\"));\r\n                cliente.setCidade(rs.getString(\"cidade\"));\r\n                cliente.setEstado(rs.getString(\"estado\"));\r\n                cliente.setPerfil(rs.getInt(\"perfil\"));\r\n                listaClientes.add(cliente);\r\n            }\r\n            return listaClientes;\r\n    }\r\n    public List<Cliente> buscarFuncionarioNome(String nome) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            nome = \"%\"+nome+\"%\";\r\n            stmt = con.prepareStatement(stmtBuscarNomeFuncionario);\r\n            stmt.setString(1,nome);\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarFuncionarioCPF(String cpf) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            cpf = \"%\"+cpf+\"%\";\r\n            stmt = con.prepareStatement(stmtBuscarCPFFuncionario);\r\n            stmt.setString(1, cpf);\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarFuncionarioEmail(String email) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            email = \"%\"+email+\"%\";\r\n            stmt = con.prepareStatement(stmtBuscarEmailFuncionario);\r\n            stmt.setString(1,email);\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n    public List<Cliente> buscarClienteNome(String nome) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            nome = \"%\"+nome+\"%\";\r\n            stmt = con.prepareStatement(stmtBuscarNomeCliente);\r\n            stmt.setString(1,nome);\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarClienteCPF(String cpf) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            cpf = \"%\"+cpf+\"%\";\r\n            stmt = con.prepareStatement(stmtBuscarCPFCliente);\r\n            stmt.setString(1, cpf);\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cliente> buscarClienteEmail(String email) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            email = \"%\"+email+\"%\";\r\n            stmt = con.prepareStatement(stmtBuscarEmailCliente);\r\n            stmt.setString(1,email);\r\n            rs = stmt.executeQuery();\r\n            return montaListaClientes(rs);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\npublic Cliente buscarClientePorEmail(String email) throws SQLException, ClassNotFoundException {\r\n        Connection con = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet rs = null;\r\n\r\n        try {\r\n            con = ConnectionFactory.getConnection();\r\n            stmt = con.prepareStatement(stmtBuscarEmailExato);\r\n            stmt.setString(1, email);\r\n            rs = stmt.executeQuery();\r\n            // query vazia\r\n            if (!rs.next()) {\r\n                return null;\r\n            } else {\r\n                rs.next();\r\n                Cliente cliente = new Cliente();\r\n                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n                cliente.setNome(rs.getString(\"nome\"));\r\n                cliente.setSexo(rs.getString(\"sexo\"));\r\n                cliente.setCpf(rs.getString(\"cpf\"));\r\n                Date nascimento = rs.getDate(\"nascimento\");\r\n                cliente.setNascimento(nascimento);\r\n                cliente.setTelefone(rs.getString(\"telefone\"));\r\n                cliente.setEmail(rs.getString(\"email\"));\r\n                cliente.setSenha(rs.getString(\"senha\"));\r\n                cliente.setCep(rs.getString(\"cep\"));\r\n                cliente.setEndereco(rs.getString(\"endereco\"));\r\n                cliente.setEndNumero(rs.getString(\"endnumero\"));\r\n                cliente.setEndComplemento(rs.getString(\"endcomplemento\"));\r\n                cliente.setBairro(rs.getString(\"bairro\"));\r\n                cliente.setCidade(rs.getString(\"cidade\"));\r\n                cliente.setEstado(rs.getString(\"estado\"));\r\n                cliente.setInativo(rs.getBoolean(\"inativo\"));\r\n\r\n                return cliente;\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } finally {\r\n            try {\r\n                rs.close();\r\n            } catch (Exception ex) {\r\n                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n            }\r\n            try {\r\n                stmt.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n            }\r\n            try {\r\n                con.close();\r\n            } catch (SQLException ex) {\r\n                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n//    \r\n//    \r\n//    public List<Cliente> procuraSobreNome(String sobrenome) throws SQLException {\r\n//        Connection con = null;\r\n//        PreparedStatement stmt = null;\r\n//        ResultSet rs = null;\r\n//\r\n//        try {\r\n//            con = ConnectionFactory.getConnection();\r\n//            stmt = con.prepareStatement(stmtProcuraSobreNome+\"'%\"+sobrenome+\"%'\");\r\n//            rs = stmt.executeQuery();\r\n//            List<Cliente> listaClientes = new ArrayList();\r\n//          \r\n//            while (rs.next()) {\r\n//                Cliente cliente = new Cliente(rs.getString(\"nome\"), rs.getString(\"sobrenome\"), rs.getString(\"cpf\"));\r\n//                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n//                listaClientes.add(cliente);\r\n//            }\r\n//            return listaClientes;\r\n//\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        } finally {\r\n//            try {\r\n//                rs.close();\r\n//            } catch (Exception ex) {\r\n//                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                stmt.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                con.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n//            }\r\n//        }\r\n//\r\n//    }\r\n//    \r\n//        public List<Cliente> procuraCPF (String cpf) throws SQLException {\r\n//        Connection con = null;\r\n//        PreparedStatement stmt = null;\r\n//        ResultSet rs = null;\r\n//\r\n//        try {\r\n//            con = ConnectionFactory.getConnection();\r\n//            stmt = con.prepareStatement(stmtProcuraCPF+\"'%\"+cpf+\"%'\");\r\n//            rs = stmt.executeQuery();\r\n//            List<Cliente> listaClientes = new ArrayList();\r\n//          \r\n//            while (rs.next()) {\r\n//                Cliente cliente = new Cliente(rs.getString(\"nome\"), rs.getString(\"sobrenome\"), rs.getString(\"cpf\"));\r\n//                cliente.setIdCliente(rs.getInt(\"idcliente\"));\r\n//                listaClientes.add(cliente);\r\n//            }\r\n//            return listaClientes;\r\n//\r\n//        } catch (SQLException e) {\r\n//            throw new RuntimeException(e);\r\n//        } finally {\r\n//            try {\r\n//                rs.close();\r\n//            } catch (Exception ex) {\r\n//                System.out.println(\"Erro ao fechar result set.Erro: \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                stmt.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar statement. Ex = \" + ex.getMessage());\r\n//            }\r\n//            try {\r\n//                con.close();\r\n//            } catch (SQLException ex) {\r\n//                System.out.println(\"Erro ao fechar a conexao. Ex = \" + ex.getMessage());\r\n//            }\r\n//        }\r\n//\r\n//    }\r\n//    \r\n//    \r\n}\r\n", "--Nome do banco: Web2\n\n-- Cria\u00e7\u00e3o da tabela Cliente\n\nCreate table Cliente(\n    idcliente serial,\n    nome varchar(50),\n    sexo char(1),\n    cpf varchar(15),\n    nascimento date,\n    telefone varchar(16),\n    email varchar(50),\n    senha varchar(30),\n    cep varchar(10),\n    endereco varchar(60),\n    endnumero varchar(10),\n    endcomplemento varchar(20),\n    bairro varchar(30),\n    cidade varchar(30),\n    estado varchar(30),\n    inativo boolean,\n    perfil int\n);\n\nCreate table Produto(\n    idProduto serial,\n    titulo varchar(100),\n    autor varchar(50),\n    fkEditora int,\n    fkgenero varchar(30),\n    preco real,\n    idImg serial,\n    inativo boolean\n);\n\n\nCreate table Editora(\n    idEditora serial,\n    nome varchar(100),\n    inativo boolean\n);\n\nCreate table Genero(\n    idGenero serial,\n    nome varchar(100),\n    inativo boolean\n);\n\ncreate table pedido(\nidPedido serial,\nidCliente int,\nvalorTotal real,\ndata DateTime,\nsituacao int\n);\n\n\ncreate table itemPedido(\nidItemPedido serial,\nidPedido int,\nirProduto int,\nquantidade int,\nvalorUnitario int\n);\n"], "filenames": ["src/java/br/com/magazine/dao/ClienteDAO.java", "web/BancoDeDados.sql"], "buggy_code_start_loc": [35, 55], "buggy_code_end_loc": [430, 65], "fixing_code_start_loc": [35, 55], "fixing_code_end_loc": [447, 65], "type": "CWE-89", "message": "A vulnerability was found in evandro-machado Trabalho-Web2. It has been classified as critical. This affects an unknown part of the file src/java/br/com/magazine/dao/ClienteDAO.java. The manipulation leads to sql injection. The name of the patch is f59ac954625d0a4f6d34f069a2e26686a7a20aeb. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218427.", "other": {"cve": {"id": "CVE-2015-10061", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-17T16:15:16.283", "lastModified": "2023-01-24T19:11:31.520", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in evandro-machado Trabalho-Web2. It has been classified as critical. This affects an unknown part of the file src/java/br/com/magazine/dao/ClienteDAO.java. The manipulation leads to sql injection. The name of the patch is f59ac954625d0a4f6d34f069a2e26686a7a20aeb. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218427."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trabalho-web2_project:trabalho-web2:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-06-09", "matchCriteriaId": "8F3305A0-81AB-47E3-A213-A8602F068C3C"}]}]}], "references": [{"url": "https://github.com/evandro-machado/Trabalho-Web2/commit/f59ac954625d0a4f6d34f069a2e26686a7a20aeb", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218427", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.218427", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/evandro-machado/Trabalho-Web2/commit/f59ac954625d0a4f6d34f069a2e26686a7a20aeb"}}