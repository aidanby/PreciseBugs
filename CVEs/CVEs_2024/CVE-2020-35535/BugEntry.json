{"buggy_code": ["/* -*- C++ -*-\n * Copyright 2019-2020 LibRaw LLC (info@libraw.org)\n *\n LibRaw is free software; you can redistribute it and/or modify\n it under the terms of the one of two licenses as you choose:\n\n1. GNU LESSER GENERAL PUBLIC LICENSE version 2.1\n   (See file LICENSE.LGPL provided in LibRaw distribution archive for details).\n\n2. COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n   (See file LICENSE.CDDL provided in LibRaw distribution archive for details).\n\n */\n\n#include \"../../internal/dcraw_defs.h\"\n#include \"../../internal/libraw_cameraids.h\"\n\nstatic ushort saneSonyCameraInfo(uchar a, uchar b, uchar c, uchar d, uchar e,\n                                 uchar f)\n{\n  if ((a >> 4) > 9)\n    return 0;\n  else if ((a & 0x0f) > 9)\n    return 0;\n  else if ((b >> 4) > 9)\n    return 0;\n  else if ((b & 0x0f) > 9)\n    return 0;\n  else if ((c >> 4) > 9)\n    return 0;\n  else if ((c & 0x0f) > 9)\n    return 0;\n  else if ((d >> 4) > 9)\n    return 0;\n  else if ((d & 0x0f) > 9)\n    return 0;\n  else if ((e >> 4) > 9)\n    return 0;\n  else if ((e & 0x0f) > 9)\n    return 0;\n  else if ((f >> 4) > 9)\n    return 0;\n  else if ((f & 0x0f) > 9)\n    return 0;\n  return 1;\n}\nstatic float my_roundf(float x)\n{\n  float t;\n  if (x >= 0.0)\n  {\n    t = ceilf(x);\n    if (t - x > 0.5)\n      t -= 1.0;\n    return t;\n  }\n  else\n  {\n    t = ceilf(-x);\n    if (t + x > 0.5)\n      t -= 1.0;\n    return -t;\n  }\n}\n\nstatic ushort bcd2dec(uchar data)\n{\n  if ((data >> 4) > 9)\n    return 0;\n  else if ((data & 0x0f) > 9)\n    return 0;\n  else\n    return (data >> 4) * 10 + (data & 0x0f);\n}\n\nstatic uchar SonySubstitution[257] =\n    \"\\x00\\x01\\x32\\xb1\\x0a\\x0e\\x87\\x28\\x02\\xcc\\xca\\xad\\x1b\\xdc\\x08\\xed\\x64\\x86\"\n    \"\\xf0\\x4f\\x8c\\x6c\\xb8\\xcb\\x69\\xc4\\x2c\\x03\"\n    \"\\x97\\xb6\\x93\\x7c\\x14\\xf3\\xe2\\x3e\\x30\\x8e\\xd7\\x60\\x1c\\xa1\\xab\\x37\\xec\\x75\"\n    \"\\xbe\\x23\\x15\\x6a\\x59\\x3f\\xd0\\xb9\\x96\\xb5\"\n    \"\\x50\\x27\\x88\\xe3\\x81\\x94\\xe0\\xc0\\x04\\x5c\\xc6\\xe8\\x5f\\x4b\\x70\\x38\\x9f\\x82\"\n    \"\\x80\\x51\\x2b\\xc5\\x45\\x49\\x9b\\x21\\x52\\x53\"\n    \"\\x54\\x85\\x0b\\x5d\\x61\\xda\\x7b\\x55\\x26\\x24\\x07\\x6e\\x36\\x5b\\x47\\xb7\\xd9\\x4a\"\n    \"\\xa2\\xdf\\xbf\\x12\\x25\\xbc\\x1e\\x7f\\x56\\xea\"\n    \"\\x10\\xe6\\xcf\\x67\\x4d\\x3c\\x91\\x83\\xe1\\x31\\xb3\\x6f\\xf4\\x05\\x8a\\x46\\xc8\\x18\"\n    \"\\x76\\x68\\xbd\\xac\\x92\\x2a\\x13\\xe9\\x0f\\xa3\"\n    \"\\x7a\\xdb\\x3d\\xd4\\xe7\\x3a\\x1a\\x57\\xaf\\x20\\x42\\xb2\\x9e\\xc3\\x8b\\xf2\\xd5\\xd3\"\n    \"\\xa4\\x7e\\x1f\\x98\\x9c\\xee\\x74\\xa5\\xa6\\xa7\"\n    \"\\xd8\\x5e\\xb0\\xb4\\x34\\xce\\xa8\\x79\\x77\\x5a\\xc1\\x89\\xae\\x9a\\x11\\x33\\x9d\\xf5\"\n    \"\\x39\\x19\\x65\\x78\\x16\\x71\\xd2\\xa9\\x44\\x63\"\n    \"\\x40\\x29\\xba\\xa0\\x8f\\xe4\\xd6\\x3b\\x84\\x0d\\xc2\\x4e\\x58\\xdd\\x99\\x22\\x6b\\xc9\"\n    \"\\xbb\\x17\\x06\\xe5\\x7d\\x66\\x43\\x62\\xf6\\xcd\"\n    \"\\x35\\x90\\x2e\\x41\\x8d\\x6d\\xaa\\x09\\x73\\x95\\x0c\\xf1\\x1d\\xde\\x4c\\x2f\\x2d\\xf7\"\n    \"\\xd1\\x72\\xeb\\xef\\x48\\xc7\\xf8\\xf9\\xfa\\xfb\"\n    \"\\xfc\\xfd\\xfe\\xff\";\n\nvoid LibRaw::sony_decrypt(unsigned *data, int len, int start, int key)\n{\n#ifndef LIBRAW_NOTHREADS\n#define pad tls->sony_decrypt.pad\n#define p tls->sony_decrypt.p\n#else\n  static unsigned pad[128], p;\n#endif\n  if (start)\n  {\n    for (p = 0; p < 4; p++)\n      pad[p] = key = key * 48828125 + 1;\n    pad[3] = pad[3] << 1 | (pad[0] ^ pad[2]) >> 31;\n    for (p = 4; p < 127; p++)\n      pad[p] = (pad[p - 4] ^ pad[p - 2]) << 1 | (pad[p - 3] ^ pad[p - 1]) >> 31;\n    for (p = 0; p < 127; p++)\n      pad[p] = htonl(pad[p]);\n  }\n  while (len--)\n  {\n    *data++ ^= pad[p & 127] = pad[(p + 1) & 127] ^ pad[(p + 65) & 127];\n    p++;\n  }\n#ifndef LIBRAW_NOTHREADS\n#undef pad\n#undef p\n#endif\n}\nvoid LibRaw::setSonyBodyFeatures(unsigned long long id)\n{\n  ushort idx;\n  static const struct\n  {\n    ushort scf[11];\n    /*\n    scf[0]  camera id\n    scf[1]  camera format\n    scf[2]  camera mount: Minolta A, Sony E, fixed,\n    scf[3]  camera type: DSLR, NEX, SLT, ILCE, ILCA, DSC\n    scf[4]  lens mount\n    scf[5]  tag 0x2010 group (0 if not used)\n    scf[6]  offset of Sony ISO in 0x2010 table, 0xffff if not valid\n    scf[7]  offset of ShutterCount3 in 0x9050 table, 0xffff if not valid\n    scf[8]  offset of MeteringMode in 0x2010 table, 0xffff if not valid\n    scf[9]  offset of ExposureProgram in 0x2010 table, 0xffff if not valid\n    scf[10] offset of ReleaseMode2 in 0x2010 table, 0xffff if not valid\n    */\n  } SonyCamFeatures[] = {\n      {SonyID_DSLR_A100, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A900, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A700, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A200, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A350, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A300, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A900, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A380, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A330, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A230, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A290, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x10b, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x10c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A850, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A850, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x10f, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x110, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A550, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A500, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A450, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x114, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x115, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_5, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_3, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A33, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A55, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A560, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A580, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_C3, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A35, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A65, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_SLT_A77, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_NEX_5N, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 1,\n       0x113e, 0x01bd, 0x1174, 0x1175, 0x112c},\n      {SonyID_NEX_7, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_NEX_VG20, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_SLT_A37, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 3,\n       0x11f4, 0x01bd, 0x1154, 0x1155, 0x1108},\n      {SonyID_SLT_A57, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 3,\n       0x11f4, 0x01bd, 0x1154, 0x1155, 0x1108},\n      {SonyID_NEX_F3, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 3,\n       0x11f4, 0x01bd, 0x1154, 0x1155, 0x1108},\n      {SonyID_SLT_A99, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_6, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_5R, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_DSC_RX100, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 5, 0x1254, 0xffff, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_DSC_RX1, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 5, 0x1258, 0xffff, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_VG900, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_VG30, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {0x12d, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_3000, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 5,\n       0x1280, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_SLT_A58, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 5,\n       0x1280, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {0x130, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_3N, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1280, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_ILCE_7, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_NEX_5T, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_DSC_RX100M2, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 6, 0x113c, 0xffff, 0x1064, 0x1065, 0x1018},\n      {SonyID_DSC_RX10, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 7, 0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX1R, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 5, 0x1258, 0xffff, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_ILCE_7R, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_6000, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_5000, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0x01aa, 0x025c, 0x025d, 0x0210},\n      {0x13a, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x13b, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x13c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX100M3, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 7, 0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_7S, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCA_77M2, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_ILCA, 0,\n       7, 0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {0x140, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x141, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x142, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x143, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x144, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x145, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x146, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x147, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x148, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x149, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14a, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14b, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14d, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14e, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14f, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x150, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x151, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x152, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_5100, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_7M2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX100M4, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX10M2, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {0x157, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX1RM2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {0x159, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_QX1, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_7RM2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cb, 0x025c, 0x025d, 0x0210},\n      {0x15c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x15d, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_7SM2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cb, 0x025c, 0x025d, 0x0210},\n      {0x15f, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x160, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCA_68, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_ILCA, 0,\n       7, 0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCA_99M2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_ILCA, 0, 8,\n       0x0346, 0x01cd, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX10M3, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX100M5, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_6300, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cd, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_9, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {0x167, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_6500, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cd, 0x025c, 0x025d, 0x0210},\n      {0x169, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_7RM3, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_7M3, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_RX0, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX10M4, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_RX100M6, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_HX99, LIBRAW_FORMAT_1div2p3INCH, LIBRAW_MOUNT_FixedLens,\n       LIBRAW_SONY_DSC, LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b,\n       0x024c, 0x0208},\n      {0x170, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX100M5A, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {0x172, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_6400, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_RX0M2, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {0x175, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX100M7, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_7RM4, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_9M2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {0x179, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_6600, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_6100, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n\n  };\n  ilm.CamID = id;\n\n  if (id == SonyID_DSC_R1)\n  {\n    ilm.CameraMount = ilm.LensMount = LIBRAW_MOUNT_FixedLens;\n    imSony.CameraType = LIBRAW_SONY_DSC;\n    imSony.group2010 = 0;\n    imSony.real_iso_offset = 0xffff;\n    imSony.ImageCount3_offset = 0xffff;\n    return;\n  }\n  else\n    idx = id - 0x100ULL;\n\n  if ((idx >= 0) && (idx < sizeof SonyCamFeatures / sizeof *SonyCamFeatures))\n  {\n    if (!SonyCamFeatures[idx].scf[2])\n      return;\n    ilm.CameraFormat = SonyCamFeatures[idx].scf[1];\n    ilm.CameraMount = SonyCamFeatures[idx].scf[2];\n    imSony.CameraType = SonyCamFeatures[idx].scf[3];\n    if (SonyCamFeatures[idx].scf[4])\n      ilm.LensMount = SonyCamFeatures[idx].scf[4];\n    imSony.group2010 = SonyCamFeatures[idx].scf[5];\n    imSony.real_iso_offset = SonyCamFeatures[idx].scf[6];\n    imSony.ImageCount3_offset = SonyCamFeatures[idx].scf[7];\n    imSony.MeteringMode_offset = SonyCamFeatures[idx].scf[8];\n    imSony.ExposureProgram_offset = SonyCamFeatures[idx].scf[9];\n    imSony.ReleaseMode2_offset = SonyCamFeatures[idx].scf[10];\n  }\n\n  char *sbstr = strstr(software, \" v\");\n  if (sbstr != NULL)\n  {\n    sbstr += 2;\n    imSony.firmware = atof(sbstr);\n\n    if ((id == SonyID_ILCE_7) ||\n        (id == SonyID_ILCE_7R))\n    {\n      if (imSony.firmware < 1.2f)\n        imSony.ImageCount3_offset = 0x01aa;\n      else\n        imSony.ImageCount3_offset = 0x01c0;\n    }\n    else if (id == SonyID_ILCE_6000)\n    {\n      if (imSony.firmware < 2.0f)\n        imSony.ImageCount3_offset = 0x01aa;\n      else\n        imSony.ImageCount3_offset = 0x01c0;\n    }\n    else if ((id == SonyID_ILCE_7S) ||\n             (id == SonyID_ILCE_7M2))\n    {\n      if (imSony.firmware < 1.2f)\n        imSony.ImageCount3_offset = 0x01a0;\n      else\n        imSony.ImageCount3_offset = 0x01b6;\n    }\n  }\n}\n\nvoid LibRaw::parseSonyLensType2(uchar a, uchar b)\n{\n  ushort lid2;\n  lid2 = (((ushort)a) << 8) | ((ushort)b);\n//  printf (\"==>> 2: lid2 %d\\n\", lid2);\n  if (!lid2)\n    return;\n  if (lid2 < 0x100)\n  {\n    if ((ilm.AdapterID != 0x4900) && (ilm.AdapterID != 0xef00))\n    {\n      ilm.AdapterID = lid2;\n      switch (lid2)\n      {\n      case 1:\n      case 2:\n      case 3:\n      case 6:\n        ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n        break;\n      case 44:\n      case 78:\n      case 184:\n      case 234:\n      case 239:\n        ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n        break;\n      }\n    }\n  }\n  else\n    ilm.LensID = lid2;\n\n  if ((lid2 >= 50481) &&\n      (lid2 < 50500)) {\n    strcpy(ilm.Adapter, \"MC-11\");\n    ilm.AdapterID = 0x4900;\n  } else if ((lid2 > 0xef00) &&\n             (lid2 < 0xffff) &&\n             (lid2 != 0xff00)) {\n    ilm.AdapterID = 0xef00;\n    ilm.LensID -= ilm.AdapterID;\n    ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n  }\n\n  return;\n}\n\nvoid LibRaw::parseSonyLensFeatures(uchar a, uchar b)\n{\n\n  ushort features;\n  features = (((ushort)a) << 8) | ((ushort)b);\n\n  if ((ilm.LensMount == LIBRAW_MOUNT_Canon_EF) ||\n      (ilm.LensMount != LIBRAW_MOUNT_Sigma_X3F) || !features)\n    return;\n\n  ilm.LensFeatures_pre[0] = 0;\n  ilm.LensFeatures_suf[0] = 0;\n  if ((features & 0x0200) && (features & 0x0100))\n    strcpy(ilm.LensFeatures_pre, \"E\");\n  else if (features & 0x0200)\n    strcpy(ilm.LensFeatures_pre, \"FE\");\n  else if (features & 0x0100)\n    strcpy(ilm.LensFeatures_pre, \"DT\");\n\n  if (!ilm.LensFormat && !ilm.LensMount)\n  {\n    ilm.LensFormat = LIBRAW_FORMAT_FF;\n    ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n\n    if ((features & 0x0200) && (features & 0x0100))\n    {\n      ilm.LensFormat = LIBRAW_FORMAT_APSC;\n      ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n    }\n    else if (features & 0x0200)\n    {\n      ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n    }\n    else if (features & 0x0100)\n    {\n      ilm.LensFormat = LIBRAW_FORMAT_APSC;\n    }\n  }\n\n  if (features & 0x4000)\n    strnXcat(ilm.LensFeatures_pre, \" PZ\");\n\n  if (features & 0x0008)\n    strnXcat(ilm.LensFeatures_suf, \" G\");\n  else if (features & 0x0004)\n    strnXcat(ilm.LensFeatures_suf, \" ZA\");\n\n  if ((features & 0x0020) && (features & 0x0040))\n    strnXcat(ilm.LensFeatures_suf, \" Macro\");\n  else if (features & 0x0020)\n    strnXcat(ilm.LensFeatures_suf, \" STF\");\n  else if (features & 0x0040)\n    strnXcat(ilm.LensFeatures_suf, \" Reflex\");\n  else if (features & 0x0080)\n    strnXcat(ilm.LensFeatures_suf, \" Fisheye\");\n\n  if (features & 0x0001)\n    strnXcat(ilm.LensFeatures_suf, \" SSM\");\n  else if (features & 0x0002)\n    strnXcat(ilm.LensFeatures_suf, \" SAM\");\n\n  if (features & 0x8000)\n    strnXcat(ilm.LensFeatures_suf, \" OSS\");\n\n  if (features & 0x2000)\n    strnXcat(ilm.LensFeatures_suf, \" LE\");\n\n  if (features & 0x0800)\n    strnXcat(ilm.LensFeatures_suf, \" II\");\n\n  if (ilm.LensFeatures_suf[0] == ' ')\n    memmove(ilm.LensFeatures_suf, ilm.LensFeatures_suf + 1,\n            strbuflen(ilm.LensFeatures_suf) - 1);\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x0116(uchar *buf, ushort len, unsigned long long id)\n{\n  int i = 0;\n\n  if (((id == SonyID_DSLR_A900)      ||\n       (id == SonyID_DSLR_A900_APSC) ||\n       (id == SonyID_DSLR_A850)      ||\n       (id == SonyID_DSLR_A850_APSC)) &&\n      (len >= 2))\n    i = 1;\n  else if ((id >= SonyID_DSLR_A550) && (len >= 3))\n    i = 2;\n  else\n    return;\n\n  imCommon.BatteryTemperature = (float)(buf[i] - 32) / 1.8f;\n}\n\nvoid LibRaw::process_Sony_0x2010(uchar *buf, ushort len)\n{\n  if (!imSony.group2010)\n    return;\n\n  if ((imSony.real_iso_offset != 0xffff) &&\n      (len >= (imSony.real_iso_offset + 2)) && (imCommon.real_ISO < 0.1f))\n  {\n    uchar s[2];\n    s[0] = SonySubstitution[buf[imSony.real_iso_offset]];\n    s[1] = SonySubstitution[buf[imSony.real_iso_offset + 1]];\n    imCommon.real_ISO =\n        100.0f * libraw_powf64l(2.0f, (16 - ((float)sget2(s)) / 256.0f));\n  }\n\n  if (len >= (imSony.MeteringMode_offset + 2))\n  {\n    imgdata.shootinginfo.MeteringMode =\n        SonySubstitution[buf[imSony.MeteringMode_offset]];\n    imgdata.shootinginfo.ExposureProgram =\n        SonySubstitution[buf[imSony.ExposureProgram_offset]];\n  }\n\n  if (len >= (imSony.ReleaseMode2_offset + 2))\n  {\n    imgdata.shootinginfo.DriveMode =\n        SonySubstitution[buf[imSony.ReleaseMode2_offset]];\n  }\n}\n\nvoid LibRaw::process_Sony_0x9050(uchar *buf, ushort len, unsigned long long id)\n{\n  ushort lid;\n  uchar s[4];\n  int c;\n\n  if ((ilm.CameraMount != LIBRAW_MOUNT_Sony_E) &&\n      (ilm.CameraMount != LIBRAW_MOUNT_FixedLens))\n  {\n    if (len < 2)\n      return;\n    if (buf[0])\n      ilm.MaxAp4CurFocal =\n        my_roundf(\n          libraw_powf64l(2.0f, ((float)SonySubstitution[buf[0]] / 8.0 - 1.06f) / 2.0f) *\n             10.0f) / 10.0f;\n\n    if (buf[1])\n      ilm.MinAp4CurFocal =\n        my_roundf(\n          libraw_powf64l(2.0f, ((float)SonySubstitution[buf[1]] / 8.0 - 1.06f) / 2.0f) *\n             10.0f) / 10.0f;\n  }\n\n  if (ilm.CameraMount != LIBRAW_MOUNT_FixedLens)\n  {\n    if (len <= 0x106)\n      return;\n    if (buf[0x3d] | buf[0x3c])\n    {\n      lid = SonySubstitution[buf[0x3d]] << 8 | SonySubstitution[buf[0x3c]];\n      ilm.CurAp = libraw_powf64l(2.0f, ((float)lid / 256.0f - 16.0f) / 2.0f);\n    }\n    if (buf[0x105] &&\n        (ilm.LensMount != LIBRAW_MOUNT_Canon_EF) &&\n        (ilm.LensMount != LIBRAW_MOUNT_Sigma_X3F)) {\n      switch (SonySubstitution[buf[0x105]]) {\n        case 1:\n          ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n          break;\n        case 2:\n          ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n        break;\n      }\n    }\n    if (buf[0x106]) {\n      switch (SonySubstitution[buf[0x106]]) {\n        case 1:\n          ilm.LensFormat = LIBRAW_FORMAT_APSC;\n          break;\n        case 2:\n          ilm.LensFormat = LIBRAW_FORMAT_FF;\n        break;\n      }\n    }\n  }\n\n  if (ilm.CameraMount == LIBRAW_MOUNT_Sony_E)\n  {\n    if (len <= 0x108)\n      return;\n    parseSonyLensType2(\n        SonySubstitution[buf[0x0108]], // LensType2 - Sony lens ids\n        SonySubstitution[buf[0x0107]]);\n  }\n\n  if (len <= 0x10a)\n    return;\n  if ((ilm.LensID == -1) && (ilm.CameraMount == LIBRAW_MOUNT_Minolta_A) &&\n      (buf[0x010a] | buf[0x0109]))\n  {\n    ilm.LensID = // LensType - Minolta/Sony lens ids\n        SonySubstitution[buf[0x010a]] << 8 | SonySubstitution[buf[0x0109]];\n\n    if ((ilm.LensID > 0x4900) && (ilm.LensID <= 0x5900))\n    {\n      ilm.AdapterID = 0x4900;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Sigma_X3F;\n      strcpy(ilm.Adapter, \"MC-11\");\n    }\n\n    else if ((ilm.LensID > 0xef00) && (ilm.LensID < 0xffff) &&\n             (ilm.LensID != 0xff00))\n    {\n      ilm.AdapterID = 0xef00;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n    }\n  }\n\n  if ((id >= SonyID_SLT_A65) && (id <= SonyID_NEX_F3))\n  {\n    if (len <= 0x116)\n      return;\n    // \"SLT-A65\", \"SLT-A77\", \"NEX-7\", \"NEX-VG20\",\n    // \"SLT-A37\", \"SLT-A57\", \"NEX-F3\", \"Lunar\"\n    parseSonyLensFeatures(SonySubstitution[buf[0x115]],\n                          SonySubstitution[buf[0x116]]);\n  }\n  else if (ilm.CameraMount != LIBRAW_MOUNT_FixedLens)\n  {\n    if (len <= 0x117)\n      return;\n    parseSonyLensFeatures(SonySubstitution[buf[0x116]],\n                          SonySubstitution[buf[0x117]]);\n  }\n\n  if ((id == SonyID_ILCE_7RM2) ||\n      (id == SonyID_ILCE_7SM2) ||\n      (id == SonyID_ILCA_99M2) ||\n      (id == SonyID_ILCE_6300) ||\n      (id == SonyID_ILCE_9)    ||\n      (id == SonyID_ILCE_6500) ||\n      (id == SonyID_ILCE_7RM3) ||\n      (id == SonyID_ILCE_7M3)  ||\n      (id == SonyID_ILCE_6400) ||\n      (id == SonyID_ILCE_7RM4) ||\n      (id == SonyID_ILCE_9M2)  ||\n      (id == SonyID_ILCE_6600) ||\n      (id == SonyID_ILCE_6100))\n  {\n    if (len <= 0x8d)\n      return;\n    unsigned long long b88 = SonySubstitution[buf[0x88]];\n    unsigned long long b89 = SonySubstitution[buf[0x89]];\n    unsigned long long b8a = SonySubstitution[buf[0x8a]];\n    unsigned long long b8b = SonySubstitution[buf[0x8b]];\n    unsigned long long b8c = SonySubstitution[buf[0x8c]];\n    unsigned long long b8d = SonySubstitution[buf[0x8d]];\n    sprintf(imgdata.shootinginfo.InternalBodySerial, \"%06llx\",\n            (b88 << 40) + (b89 << 32) + (b8a << 24) + (b8b << 16) + (b8c << 8) +\n                b8d);\n  }\n  else if (ilm.CameraMount == LIBRAW_MOUNT_Minolta_A)\n  {\n    if (len <= 0xf4)\n      return;\n    unsigned long long bf0 = SonySubstitution[buf[0xf0]];\n    unsigned long long bf1 = SonySubstitution[buf[0xf1]];\n    unsigned long long bf2 = SonySubstitution[buf[0xf2]];\n    unsigned long long bf3 = SonySubstitution[buf[0xf3]];\n    unsigned long long bf4 = SonySubstitution[buf[0xf4]];\n    sprintf(imgdata.shootinginfo.InternalBodySerial, \"%05llx\",\n            (bf0 << 32) + (bf1 << 24) + (bf2 << 16) + (bf3 << 8) + bf4);\n  }\n  else if ((ilm.CameraMount == LIBRAW_MOUNT_Sony_E) &&\n           (id != SonyID_NEX_5N) &&\n           (id != SonyID_NEX_7)  &&\n           (id != SonyID_NEX_VG20))\n  {\n    if (len <= 0x7f)\n      return;\n    unsigned b7c = SonySubstitution[buf[0x7c]];\n    unsigned b7d = SonySubstitution[buf[0x7d]];\n    unsigned b7e = SonySubstitution[buf[0x7e]];\n    unsigned b7f = SonySubstitution[buf[0x7f]];\n    sprintf(imgdata.shootinginfo.InternalBodySerial, \"%04x\",\n            (b7c << 24) + (b7d << 16) + (b7e << 8) + b7f);\n  }\n\n  if ((imSony.ImageCount3_offset != 0xffff) &&\n      (len >= (imSony.ImageCount3_offset + 4)))\n  {\n    FORC4 s[c] = SonySubstitution[buf[imSony.ImageCount3_offset + c]];\n    imSony.ImageCount3 = sget4(s);\n  }\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x9400(uchar *buf, ushort len, unsigned long long id)\n{\n\n  uchar s[4];\n  int c;\n  uchar bufx = buf[0];\n\n  if (((bufx == 0x23) || (bufx == 0x24) || (bufx == 0x26) || (bufx == 0x28)) &&\n      (len >= 0x1f))\n  { // 0x9400 'c' version\n\n    if ((id == SonyID_ILCE_9)       ||\n        (id == SonyID_ILCE_7RM3)    ||\n        (id == SonyID_ILCE_7M3)     ||\n        (id == SonyID_DSC_RX10M4)   ||\n        (id == SonyID_DSC_RX100M6)  ||\n        (id == SonyID_DSC_HX99)     ||\n        (id == SonyID_DSC_RX100M5A) ||\n        (id == SonyID_ILCE_6400)    ||\n        (id == SonyID_DSC_RX0M2)    ||\n        (id == SonyID_DSC_RX100M7)  ||\n        (id == SonyID_ILCE_7RM4)    ||\n        (id == SonyID_ILCE_9M2)     ||\n        (id == SonyID_ILCE_6600)    ||\n        (id == SonyID_ILCE_6100))\n    {\n      imSony.ShotNumberSincePowerUp = SonySubstitution[buf[0x0a]];\n    }\n    else\n    {\n      FORC4 s[c] = SonySubstitution[buf[0x0a + c]];\n      imSony.ShotNumberSincePowerUp = sget4(s);\n    }\n\n    imSony.Sony0x9400_version = 0xc;\n\n    imSony.Sony0x9400_ReleaseMode2 = SonySubstitution[buf[0x09]];\n\n    FORC4 s[c] = SonySubstitution[buf[0x12 + c]];\n    imSony.Sony0x9400_SequenceImageNumber = sget4(s);\n\n    imSony.Sony0x9400_SequenceLength1 = SonySubstitution[buf[0x16]]; // shots\n\n    FORC4 s[c] = SonySubstitution[buf[0x1a + c]];\n    imSony.Sony0x9400_SequenceFileNumber = sget4(s);\n\n    imSony.Sony0x9400_SequenceLength2 = SonySubstitution[buf[0x1e]]; // files\n  }\n\n  else if ((bufx == 0x0c) && (len >= 0x1f))\n  { // 0x9400 'b' version\n    imSony.Sony0x9400_version = 0xb;\n\n    FORC4 s[c] = SonySubstitution[buf[0x08 + c]];\n    imSony.Sony0x9400_SequenceImageNumber = sget4(s);\n\n    FORC4 s[c] = SonySubstitution[buf[0x0c + c]];\n    imSony.Sony0x9400_SequenceFileNumber = sget4(s);\n\n    imSony.Sony0x9400_ReleaseMode2 = SonySubstitution[buf[0x10]];\n\n    imSony.Sony0x9400_SequenceLength1 = SonySubstitution[buf[0x1e]];\n  }\n\n  else if ((bufx == 0x0a) && (len >= 0x23))\n  { // 0x9400 'a' version\n    imSony.Sony0x9400_version = 0xa;\n\n    FORC4 s[c] = SonySubstitution[buf[0x08 + c]];\n    imSony.Sony0x9400_SequenceImageNumber = sget4(s);\n\n    FORC4 s[c] = SonySubstitution[buf[0x0c + c]];\n    imSony.Sony0x9400_SequenceFileNumber = sget4(s);\n\n    imSony.Sony0x9400_ReleaseMode2 = SonySubstitution[buf[0x10]];\n\n    imSony.Sony0x9400_SequenceLength1 = SonySubstitution[buf[0x22]];\n  }\n\n  else\n    return;\n}\n\nvoid LibRaw::process_Sony_0x9402(uchar *buf, ushort len)\n{\n\n  if (len < 23)\n    return;\n\n  imgdata.shootinginfo.FocusMode = SonySubstitution[buf[0x16]];\n\n  if ((imSony.CameraType == LIBRAW_SONY_SLT) ||\n      (imSony.CameraType == LIBRAW_SONY_ILCA))\n    return;\n\n  uchar bufx = buf[0x00];\n  if ((bufx == 0x05) || (bufx == 0xff) || (buf[0x02] != 0xff))\n    return;\n\n  imCommon.AmbientTemperature =\n      (float)((short)SonySubstitution[buf[0x04]]);\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x9403(uchar *buf, ushort len)\n{\n  if (len < 6)\n    return;\n  uchar bufx = SonySubstitution[buf[4]];\n  if ((bufx == 0x00) || (bufx == 0x94))\n    return;\n\n  imCommon.SensorTemperature = (float)((short)SonySubstitution[buf[5]]);\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x9406(uchar *buf, ushort len)\n{\n  if (len < 6)\n    return;\n  uchar bufx = buf[0];\n  if ((bufx != 0x01) && (bufx != 0x08) && (bufx != 0x1b))\n    return;\n  bufx = buf[2];\n  if ((bufx != 0x08) && (bufx != 0x1b))\n    return;\n\n  imCommon.BatteryTemperature =\n      (float)(SonySubstitution[buf[5]] - 32) / 1.8f;\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x940c(uchar *buf, ushort len)\n{\n  if ((imSony.CameraType != LIBRAW_SONY_ILCE) &&\n      (imSony.CameraType != LIBRAW_SONY_NEX))\n    return;\n  if (len <= 0x000a)\n    return;\n\n  ushort lid2;\n  if ((ilm.LensMount != LIBRAW_MOUNT_Canon_EF) &&\n      (ilm.LensMount != LIBRAW_MOUNT_Sigma_X3F))\n  {\n    switch (SonySubstitution[buf[0x0008]])\n    {\n    case 1:\n    case 5:\n      ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n      break;\n    case 4:\n      ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n      break;\n    }\n  }\n  lid2 = (((ushort)SonySubstitution[buf[0x000a]]) << 8) |\n         ((ushort)SonySubstitution[buf[0x0009]]);\n  if ((lid2 > 0) &&\n      ((lid2 < 32784) || (ilm.LensID == 0x1999) || (ilm.LensID == 0xffff)))\n    parseSonyLensType2(\n        SonySubstitution[buf[0x000a]], // LensType2 - Sony lens ids\n        SonySubstitution[buf[0x0009]]);\n  if ((lid2 == 44) || (lid2 == 78) || (lid2 == 184) || (lid2 == 234) ||\n      (lid2 == 239))\n    ilm.AdapterID = lid2;\n  return;\n}\n\nvoid LibRaw::process_Sony_0x940e(uchar *buf, ushort len, unsigned long long id)\n{\n  if (((imSony.CameraType != LIBRAW_SONY_SLT) &&\n       (imSony.CameraType != LIBRAW_SONY_ILCA)) ||\n      (id == SonyID_SLT_A33)  ||\n      (id == SonyID_SLT_A55) ||\n      (id == SonyID_SLT_A35)  ||\n      (len < 3))\n    return;\n\n  imSony.AFType = SonySubstitution[buf[0x02]];\n\n  if (imSony.CameraType == LIBRAW_SONY_ILCA)\n  {\n    if (len >= 0x06)\n    {\n      imgdata.shootinginfo.FocusMode = SonySubstitution[buf[0x05]];\n    }\n    if (len >= 0x0051)\n    {\n      imSony.AFMicroAdjValue = SonySubstitution[buf[0x0050]];\n    }\n  }\n  else\n  {\n    if (len >= 0x0c)\n    {\n      imgdata.shootinginfo.FocusMode = SonySubstitution[buf[0x0b]];\n    }\n    if (len >= 0x017e)\n    {\n      imSony.AFMicroAdjValue = SonySubstitution[buf[0x017d]];\n    }\n  }\n\n  if (imSony.AFMicroAdjValue != 0)\n    imSony.AFMicroAdjOn = 1;\n}\n\nvoid LibRaw::parseSonyMakernotes(\n    int base, unsigned tag, unsigned type, unsigned len, unsigned dng_writer,\n    uchar *&table_buf_0x0116, ushort &table_buf_0x0116_len,\n    uchar *&table_buf_0x2010, ushort &table_buf_0x2010_len,\n    uchar *&table_buf_0x9050, ushort &table_buf_0x9050_len,\n    uchar *&table_buf_0x9400, ushort &table_buf_0x9400_len,\n    uchar *&table_buf_0x9402, ushort &table_buf_0x9402_len,\n    uchar *&table_buf_0x9403, ushort &table_buf_0x9403_len,\n    uchar *&table_buf_0x9406, ushort &table_buf_0x9406_len,\n    uchar *&table_buf_0x940c, ushort &table_buf_0x940c_len,\n    uchar *&table_buf_0x940e, ushort &table_buf_0x940e_len)\n{\n\n  ushort lid, a, b, c, d;\n  uchar *table_buf;\n  uchar uc;\n  uchar s[2];\n  int LensDataValid = 0;\n  unsigned uitemp;\n\n  if (tag == 0xb001)\n  { // Sony ModelID\n    unique_id = get2();\n    setSonyBodyFeatures(unique_id);\n\n    if (table_buf_0x0116_len)\n    {\n      process_Sony_0x0116(table_buf_0x0116, table_buf_0x0116_len, unique_id);\n      free(table_buf_0x0116);\n      table_buf_0x0116_len = 0;\n    }\n\n    if (table_buf_0x2010_len)\n    {\n      process_Sony_0x2010(table_buf_0x2010, table_buf_0x2010_len);\n      free(table_buf_0x2010);\n      table_buf_0x2010_len = 0;\n    }\n\n    if (table_buf_0x9050_len)\n    {\n      process_Sony_0x9050(table_buf_0x9050, table_buf_0x9050_len, unique_id);\n      free(table_buf_0x9050);\n      table_buf_0x9050_len = 0;\n    }\n\n    if (table_buf_0x9400_len)\n    {\n      process_Sony_0x9400(table_buf_0x9400, table_buf_0x9400_len, unique_id);\n      free(table_buf_0x9400);\n      table_buf_0x9400_len = 0;\n    }\n\n    if (table_buf_0x9402_len)\n    {\n      process_Sony_0x9402(table_buf_0x9402, table_buf_0x9402_len);\n      free(table_buf_0x9402);\n      table_buf_0x9402_len = 0;\n    }\n\n    if (table_buf_0x9403_len)\n    {\n      process_Sony_0x9403(table_buf_0x9403, table_buf_0x9403_len);\n      free(table_buf_0x9403);\n      table_buf_0x9403_len = 0;\n    }\n\n    if (table_buf_0x9406_len)\n    {\n      process_Sony_0x9406(table_buf_0x9406, table_buf_0x9406_len);\n      free(table_buf_0x9406);\n      table_buf_0x9406_len = 0;\n    }\n\n    if (table_buf_0x940c_len)\n    {\n      process_Sony_0x940c(table_buf_0x940c, table_buf_0x940c_len);\n      free(table_buf_0x940c);\n      table_buf_0x940c_len = 0;\n    }\n\n    if (table_buf_0x940e_len)\n    {\n      process_Sony_0x940e(table_buf_0x940e, table_buf_0x940e_len, unique_id);\n      free(table_buf_0x940e);\n      table_buf_0x940e_len = 0;\n    }\n  }\n  else if (tag == 0xb000)\n  {\n    FORC4 imSony.FileFormat = imSony.FileFormat * 10 + fgetc(ifp);\n  }\n  else if (tag == 0xb026)\n  {\n    uitemp = get4();\n    if (uitemp != 0xffffffff)\n      imgdata.shootinginfo.ImageStabilization = uitemp;\n  }\n  else if (((tag == 0x0001) || // Minolta CameraSettings, big endian\n            (tag == 0x0003)) &&\n           (len >= 196))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n\n    lid = 0x01 << 2;\n    imgdata.shootinginfo.ExposureMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    lid = 0x06 << 2;\n    imgdata.shootinginfo.DriveMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    lid = 0x07 << 2;\n    imgdata.shootinginfo.MeteringMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    lid = 0x25 << 2;\n    imSony.MinoltaCamID =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n    if (imSony.MinoltaCamID != -1)\n      ilm.CamID = imSony.MinoltaCamID;\n\n    lid = 0x30 << 2;\n    imgdata.shootinginfo.FocusMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    free(table_buf);\n  }\n  else if ((tag == 0x0004) && // Minolta CameraSettings7D, big endian\n           (len >= 227))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n\n    lid = 0x0;\n    imgdata.shootinginfo.ExposureMode =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    lid = 0x0e << 1;\n    imgdata.shootinginfo.FocusMode =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    lid = 0x10 << 1;\n    imgdata.shootinginfo.AFPoint =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    lid = 0x25 << 1;\n    switch ((ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1]) {\n    case 0:\n    case 1:\n      imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n      break;\n    case 4:\n      imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n      break;\n    default:\n      imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n      break;\n    }\n\n    lid = 0x71 << 1;\n    imgdata.shootinginfo.ImageStabilization =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    free(table_buf);\n  }\n  else if ((tag == 0x0010) && // CameraInfo\n           strncasecmp(model, \"DSLR-A100\", 9) &&\n           !strncasecmp(make, \"SONY\", 4) &&\n           ((len == 368) ||  // a700                         : CameraInfo\n            (len == 5478) || // a850, a900                   : CameraInfo\n            (len == 5506) || // a200, a300, a350             : CameraInfo2\n            (len == 6118) || // a230, a290, a330, a380, a390 : CameraInfo2\n            (len == 15360))  // a450, a500, a550, a560, a580 : CameraInfo3\n                             // a33, a35, a55\n                             // NEX-3, NEX-5, NEX-5C, NEX-C3, NEX-VG10E\n\n  )\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    if (memcmp(table_buf, \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\", 8) &&\n        memcmp(table_buf, \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", 8))\n    {\n      LensDataValid = 1;\n    }\n    switch (len)\n    {\n    case 368:  // a700: CameraInfo\n    case 5478: // a850, a900: CameraInfo\n      if ((!dng_writer) ||\n          (saneSonyCameraInfo(table_buf[0], table_buf[3], table_buf[2],\n                              table_buf[5], table_buf[4], table_buf[7])))\n      {\n        if (LensDataValid)\n        {\n          if (table_buf[0] | table_buf[3])\n            ilm.MinFocal = bcd2dec(table_buf[0]) * 100 + bcd2dec(table_buf[3]);\n          if (table_buf[2] | table_buf[5])\n            ilm.MaxFocal = bcd2dec(table_buf[2]) * 100 + bcd2dec(table_buf[5]);\n          if (table_buf[4])\n            ilm.MaxAp4MinFocal = bcd2dec(table_buf[4]) / 10.0f;\n          if (table_buf[4])\n            ilm.MaxAp4MaxFocal = bcd2dec(table_buf[7]) / 10.0f;\n          parseSonyLensFeatures(table_buf[1], table_buf[6]);\n        }\n\n        imSony.AFPointSelected = table_buf[21];\n        imgdata.shootinginfo.AFPoint = (ushort)table_buf[25];\n\n        if (len == 5478)\n        {\n          imSony.AFMicroAdjValue = table_buf[304] - 20;\n          imSony.AFMicroAdjOn = (((table_buf[305] & 0x80) == 0x80) ? 1 : 0);\n          imSony.AFMicroAdjRegisteredLenses = table_buf[305] & 0x7f;\n        }\n      }\n      break;\n    default:\n      // CameraInfo2 & 3\n      if ((!dng_writer) ||\n          (saneSonyCameraInfo(table_buf[1], table_buf[2], table_buf[3],\n                              table_buf[4], table_buf[5], table_buf[6])))\n      {\n        if ((LensDataValid) && strncasecmp(model, \"NEX-5C\", 6))\n        {\n          if (table_buf[1] | table_buf[2])\n            ilm.MinFocal = bcd2dec(table_buf[1]) * 100 + bcd2dec(table_buf[2]);\n          if (table_buf[3] | table_buf[4])\n            ilm.MaxFocal = bcd2dec(table_buf[3]) * 100 + bcd2dec(table_buf[4]);\n          if (table_buf[5])\n            ilm.MaxAp4MinFocal = bcd2dec(table_buf[5]) / 10.0f;\n          if (table_buf[6])\n            ilm.MaxAp4MaxFocal = bcd2dec(table_buf[6]) / 10.0f;\n          parseSonyLensFeatures(table_buf[0], table_buf[7]);\n        }\n\n        if (!strncasecmp(model, \"DSLR-A450\", 9) ||\n            !strncasecmp(model, \"DSLR-A500\", 9) ||\n            !strncasecmp(model, \"DSLR-A550\", 9))\n        {\n          imSony.AFPointSelected = table_buf[0x14];\n          imgdata.shootinginfo.FocusMode = table_buf[0x15];\n          imgdata.shootinginfo.AFPoint = (ushort)table_buf[0x18];\n        }\n        else if (!strncasecmp(model, \"SLT-\", 4) ||\n                 !strncasecmp(model, \"DSLR-A560\", 9) ||\n                 !strncasecmp(model, \"DSLR-A580\", 9))\n        {\n          imSony.AFPointSelected = table_buf[0x1c];\n          imgdata.shootinginfo.FocusMode = table_buf[0x1d];\n          imgdata.shootinginfo.AFPoint = (ushort)table_buf[0x20];\n        }\n      }\n    }\n    free(table_buf);\n  }\n  else if ((!dng_writer) && ((tag == 0x0020) || (tag == 0xb0280020)))\n  {\n    if (!strncasecmp(model, \"DSLR-A100\", 9))\n    { // WBInfoA100\n      fseek(ifp, 0x49dc, SEEK_CUR);\n      stmread(imgdata.shootinginfo.InternalBodySerial, 13, ifp);\n    }\n    else if ((len ==\n              19154) || // a200 a230 a290 a300 a330 a350 a380 a390 : FocusInfo\n             (len == 19148))\n    { // a700 a850 a900                          : FocusInfo\n      table_buf = (uchar *)malloc(128);\n      fread(table_buf, 128, 1, ifp);\n      imgdata.shootinginfo.DriveMode = table_buf[14];\n      imgdata.shootinginfo.ExposureProgram = table_buf[63];\n      free(table_buf);\n    }\n    else if (len == 20480) // a450 a500 a550 a560 a580 a33 a35 a55 : MoreInfo\n                           // NEX-3 NEX-5 NEX-C3 NEX-VG10E         : MoreInfo\n    {\n      a = get2();\n      b = get2();\n      c = get2();\n      d = get2();\n      if ((a) && (c == 1))\n      {\n        fseek(ifp, d - 8, SEEK_CUR);\n        table_buf = (uchar *)malloc(256);\n        fread(table_buf, 256, 1, ifp);\n        imgdata.shootinginfo.DriveMode = table_buf[1];\n        imgdata.shootinginfo.ExposureProgram = table_buf[2];\n        imgdata.shootinginfo.MeteringMode = table_buf[3];\n        switch (table_buf[6]) {\n        case 1:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n          break;\n        case 2:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n          break;\n        default:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n          break;\n        }\n        if (strncasecmp(model, \"DSLR-A450\", 9) &&\n            strncasecmp(model, \"DSLR-A500\", 9) &&\n            strncasecmp(model, \"DSLR-A550\", 9))\n          imgdata.shootinginfo.FocusMode = table_buf[0x13];\n        else\n          imgdata.shootinginfo.FocusMode = table_buf[0x2c];\n        free(table_buf);\n      }\n    }\n  }\n  else if (tag == 0x0102)\n  {\n    imSony.Quality = get4();\n  }\n  else if (tag == 0x0104)\n  {\n    imCommon.FlashEC = getreal(type);\n  }\n  else if (tag == 0x0105)\n  { // Teleconverter\n    ilm.TeleconverterID = get4();\n  }\n  else if (tag == 0x0107)\n  {\n    uitemp = get4();\n    if (uitemp == 1)\n      imgdata.shootinginfo.ImageStabilization = 0;\n    else if (uitemp == 5)\n      imgdata.shootinginfo.ImageStabilization = 1;\n    else\n      imgdata.shootinginfo.ImageStabilization = uitemp;\n  }\n  else if ((tag == 0xb0280088) && (dng_writer == nonDNG))\n  {\n    thumb_offset = get4() + base;\n  }\n  else if ((tag == 0xb0280089) && (dng_writer == nonDNG))\n  {\n    thumb_length = get4();\n  }\n  else if (((tag == 0x0114) || // CameraSettings\n            (tag == 0xb0280114)) &&\n           (len < 256000))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    switch (len)\n    {\n    case 260: // Sony a100, big endian\n      imgdata.shootinginfo.ExposureMode =\n          ((ushort)table_buf[0]) << 8 | ((ushort)table_buf[1]);\n      lid = 0x0a << 1;\n      imgdata.shootinginfo.DriveMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x0c << 1;\n      imgdata.shootinginfo.FocusMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x0d << 1;\n      imSony.AFPointSelected = table_buf[lid + 1];\n      lid = 0x0e << 1;\n      imSony.AFAreaModeSetting = table_buf[lid + 1];\n      lid = 0x12 << 1;\n      imgdata.shootinginfo.MeteringMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n\n      lid = 0x17 << 1;\n      switch ((ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1]) {\n      case 0:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 2:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_MonochromeGamma;\n        break;\n      case 5:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n\n      break;\n    case 448: // Minolta \"DYNAX 5D\" and its aliases, big endian\n      lid = 0x0a << 1;\n      imgdata.shootinginfo.ExposureMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x25 << 1;\n      imgdata.shootinginfo.MeteringMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n\n      lid = 0x2f << 1;\n      switch ((ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1]) {\n      case 0:\n      case 1:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 2:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_MonochromeGamma;\n        break;\n      case 4:\n      case 5:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n\n      lid = 0xbd << 1;\n      imgdata.shootinginfo.ImageStabilization =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      break;\n    case 280: // a200 a300 a350 a700\n    case 364: // a850 a900\n      // CameraSettings and CameraSettings2 are big endian\n      if (table_buf[2] | table_buf[3])\n      {\n        lid = (((ushort)table_buf[2]) << 8) | ((ushort)table_buf[3]);\n        ilm.CurAp = libraw_powf64l(2.0f, ((float)lid / 8.0f - 1.0f) / 2.0f);\n      }\n      lid = 0x04 << 1;\n      imgdata.shootinginfo.DriveMode = table_buf[lid + 1];\n      lid = 0x1b << 1;\n      switch (((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1])) {\n      case 0:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 1:\n      case 5:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n      lid = 0x4d << 1;\n      imgdata.shootinginfo.FocusMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      if (!imCommon.ColorSpace ||\n          (imCommon.ColorSpace == LIBRAW_COLORSPACE_Unknown)) {\n        lid = 0x83 << 1;\n        switch (((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1])) {\n        case 6:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n          break;\n        case 5:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n          break;\n        default:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n          break;\n        }\n      }\n      break;\n    case 332: // a230 a290 a330 a380 a390\n      // CameraSettings and CameraSettings2 are big endian\n      if (table_buf[2] | table_buf[3])\n      {\n        lid = (((ushort)table_buf[2]) << 8) | ((ushort)table_buf[3]);\n        ilm.CurAp = libraw_powf64l(2.0f, ((float)lid / 8.0f - 1.0f) / 2.0f);\n      }\n      lid = 0x4d << 1;\n      imgdata.shootinginfo.FocusMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x7e << 1;\n      imgdata.shootinginfo.DriveMode = table_buf[lid + 1];\n      break;\n    case 1536: // a560 a580 a33 a35 a55 NEX-3 NEX-5 NEX-5C NEX-C3 NEX-VG10E\n    case 2048: // a450 a500 a550\n      // CameraSettings3 are little endian\n      switch (table_buf[0x0e]) {\n      case 1:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 2:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n      imgdata.shootinginfo.DriveMode = table_buf[0x34];\n      parseSonyLensType2(table_buf[1016], table_buf[1015]);\n      if (ilm.LensMount != LIBRAW_MOUNT_Canon_EF)\n      {\n        switch (table_buf[153])\n        {\n        case 16:\n          ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n          break;\n        case 17:\n          ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n          break;\n        }\n      }\n      break;\n    }\n    free(table_buf);\n  }\n  else if ((tag == 0x3000) && (len < 256000))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    for (int i = 0; i < 20; i++)\n      imSony.SonyDateTime[i] = table_buf[6 + i];\n    free(table_buf);\n  }\n  else if (tag == 0x0116 && len < 256000)\n  {\n    table_buf_0x0116 = (uchar *)malloc(len);\n    table_buf_0x0116_len = len;\n    fread(table_buf_0x0116, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x0116(table_buf_0x0116, table_buf_0x0116_len, ilm.CamID);\n      free(table_buf_0x0116);\n      table_buf_0x0116_len = 0;\n    }\n  }\n  else if (tag == 0x2008)\n  {\n    imSony.LongExposureNoiseReduction = get4();\n  }\n  else if (tag == 0x2009)\n  {\n    imSony.HighISONoiseReduction = get2();\n  }\n  else if (tag == 0x200a)\n  {\n    imSony.HDR[0] = get2();\n    imSony.HDR[1] = get2();\n  }\n  else if (tag == 0x2010 && len < 256000)\n  {\n    table_buf_0x2010 = (uchar *)malloc(len);\n    table_buf_0x2010_len = len;\n    fread(table_buf_0x2010, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x2010(table_buf_0x2010, table_buf_0x2010_len);\n      free(table_buf_0x2010);\n      table_buf_0x2010_len = 0;\n    }\n  }\n  else if (tag == 0x201a)\n  {\n    imSony.ElectronicFrontCurtainShutter = get4();\n  }\n  else if (tag == 0x201b)\n  {\n    if ((imSony.CameraType != LIBRAW_SONY_DSC) ||\n        (ilm.CamID == SonyID_DSC_RX10M4)   ||\n        (ilm.CamID == SonyID_DSC_RX100M6)  ||\n        (ilm.CamID == SonyID_DSC_RX100M5A) ||\n        (ilm.CamID == SonyID_DSC_RX0M2)    ||\n        (ilm.CamID == SonyID_DSC_RX100M7))\n    {\n      fread(&uc, 1, 1, ifp);\n      imgdata.shootinginfo.FocusMode = (short)uc;\n    }\n  }\n  else if (tag == 0x201c)\n  {\n    if ((imSony.CameraType != LIBRAW_SONY_DSC) ||\n        (ilm.CamID == SonyID_DSC_RX10M4)   ||\n        (ilm.CamID == SonyID_DSC_RX100M6)  ||\n        (ilm.CamID == SonyID_DSC_RX100M5A) ||\n        (ilm.CamID == SonyID_DSC_RX0M2)    ||\n        (ilm.CamID == SonyID_DSC_RX100M7))\n    {\n      imSony.AFAreaModeSetting = fgetc(ifp);\n    }\n  }\n  else if (tag == 0x201d)\n  {\n    if (((imSony.AFAreaModeSetting == 3) &&\n         ((imSony.CameraType == LIBRAW_SONY_ILCE) ||\n          (imSony.CameraType == LIBRAW_SONY_NEX) ||\n          (ilm.CamID == SonyID_DSC_RX10M4)    ||\n          (ilm.CamID == SonyID_DSC_RX100M6)   ||\n          (ilm.CamID == SonyID_DSC_RX100M5A)  ||\n          (ilm.CamID == SonyID_DSC_RX0M2)     ||\n          (ilm.CamID == SonyID_DSC_RX100M7))) ||\n        ((imSony.AFAreaModeSetting == 4) &&\n         (imSony.CameraType == LIBRAW_SONY_ILCA)))\n    {\n      imSony.FlexibleSpotPosition[0] = get2();\n      imSony.FlexibleSpotPosition[1] = get2();\n    }\n  }\n  else if (tag == 0x201e)\n  {\n    if (imSony.CameraType != LIBRAW_SONY_DSC)\n    {\n      imSony.AFPointSelected = fgetc(ifp);\n    }\n  }\n  else if (tag == 0x2020)\n  {\n    if (imSony.CameraType != LIBRAW_SONY_DSC)\n    {\n      fread(imSony.AFPointsUsed, 1, 10, ifp);\n    }\n  }\n  else if (tag == 0x2021)\n  {\n    if ((imSony.CameraType != LIBRAW_SONY_DSC) ||\n        (ilm.CamID == SonyID_DSC_RX10M4)   ||\n        (ilm.CamID == SonyID_DSC_RX100M6)  ||\n        (ilm.CamID == SonyID_DSC_RX100M5A) ||\n        (ilm.CamID == SonyID_DSC_RX0M2)    ||\n        (ilm.CamID == SonyID_DSC_RX100M7))\n    {\n      imSony.AFTracking = fgetc(ifp);\n    }\n  }\n  else if (tag == 0x2027)\n  {\n    FORC4 imSony.FocusLocation[c] = get2();\n  }\n  else if (tag == 0x2028)\n  {\n    if (get2())\n    {\n      imSony.VariableLowPassFilter = get2();\n    }\n  }\n  else if (tag == 0x2029)\n  {\n    imSony.RAWFileType = get2();\n  }\n  else if (tag == 0x202c)\n  {\n    imSony.MeteringMode2 = get2();\n  }\n  else if (tag == 0x202f)\n  {\n    imSony.PixelShiftGroupID = get4();\n    imSony.PixelShiftGroupPrefix = imSony.PixelShiftGroupID >> 22;\n    imSony.PixelShiftGroupID =\n        ((imSony.PixelShiftGroupID >> 17) & (unsigned)0x1f) *\n            (unsigned)1000000 +\n        ((imSony.PixelShiftGroupID >> 12) & (unsigned)0x1f) * (unsigned)10000 +\n        ((imSony.PixelShiftGroupID >> 6) & (unsigned)0x3f) * (unsigned)100 +\n        (imSony.PixelShiftGroupID & (unsigned)0x3f);\n\n    imSony.numInPixelShiftGroup = fgetc(ifp);\n    imSony.nShotsInPixelShiftGroup = fgetc(ifp);\n  }\n  else if (tag == 0x9050 && len < 256000)\n  { // little endian\n    table_buf_0x9050 = (uchar *)malloc(len);\n    table_buf_0x9050_len = len;\n    fread(table_buf_0x9050, len, 1, ifp);\n\n    if (ilm.CamID)\n    {\n      process_Sony_0x9050(table_buf_0x9050, table_buf_0x9050_len, ilm.CamID);\n      free(table_buf_0x9050);\n      table_buf_0x9050_len = 0;\n    }\n  }\n  else if (tag == 0x9400 && len < 256000)\n  {\n    table_buf_0x9400 = (uchar *)malloc(len);\n    table_buf_0x9400_len = len;\n    fread(table_buf_0x9400, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9400(table_buf_0x9400, table_buf_0x9400_len, unique_id);\n      free(table_buf_0x9400);\n      table_buf_0x9400_len = 0;\n    }\n  }\n  else if (tag == 0x9402 && len < 256000)\n  {\n    table_buf_0x9402 = (uchar *)malloc(len);\n    table_buf_0x9402_len = len;\n    fread(table_buf_0x9402, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9402(table_buf_0x9402, table_buf_0x9402_len);\n      free(table_buf_0x9402);\n      table_buf_0x9402_len = 0;\n    }\n  }\n  else if (tag == 0x9403 && len < 256000)\n  {\n    table_buf_0x9403 = (uchar *)malloc(len);\n    table_buf_0x9403_len = len;\n    fread(table_buf_0x9403, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9403(table_buf_0x9403, table_buf_0x9403_len);\n      free(table_buf_0x9403);\n      table_buf_0x9403_len = 0;\n    }\n  }\n  else if ((tag == 0x9405) && (len < 256000) && (len > 0x64))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    uc = table_buf[0x0];\n    if (imCommon.real_ISO < 0.1f)\n    {\n      if ((uc == 0x25) || (uc == 0x3a) || (uc == 0x76) || (uc == 0x7e) ||\n          (uc == 0x8b) || (uc == 0x9a) || (uc == 0xb3) || (uc == 0xe1))\n      {\n        s[0] = SonySubstitution[table_buf[0x04]];\n        s[1] = SonySubstitution[table_buf[0x05]];\n        imCommon.real_ISO =\n            100.0f * libraw_powf64l(2.0f, (16 - ((float)sget2(s)) / 256.0f));\n      }\n    }\n    free(table_buf);\n  }\n  else if (tag == 0x9406 && len < 256000)\n  {\n    table_buf_0x9406 = (uchar *)malloc(len);\n    table_buf_0x9406_len = len;\n    fread(table_buf_0x9406, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9406(table_buf_0x9406, table_buf_0x9406_len);\n      free(table_buf_0x9406);\n      table_buf_0x9406_len = 0;\n    }\n  }\n  else if (tag == 0x940c && len < 256000)\n  {\n    table_buf_0x940c = (uchar *)malloc(len);\n    table_buf_0x940c_len = len;\n    fread(table_buf_0x940c, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x940c(table_buf_0x940c, table_buf_0x940c_len);\n      free(table_buf_0x940c);\n      table_buf_0x940c_len = 0;\n    }\n  }\n  else if (tag == 0x940e && len < 256000)\n  {\n    table_buf_0x940e = (uchar *)malloc(len);\n    table_buf_0x940e_len = len;\n    fread(table_buf_0x940e, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x940e(table_buf_0x940e, table_buf_0x940e_len, ilm.CamID);\n      free(table_buf_0x940e);\n      table_buf_0x940e_len = 0;\n    }\n  }\n  else if (((tag == 0xb027) || (tag == 0x010c)) && (ilm.LensID == -1))\n  {\n    ilm.LensID = get4();\n//    printf (\"==>> 1: ilm.LensID %lld\\n\", ilm.LensID);\n    if ((ilm.LensID > 0x4900) && (ilm.LensID <= 0x5900))\n    {\n      ilm.AdapterID = 0x4900;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Sigma_X3F;\n      strcpy(ilm.Adapter, \"MC-11\");\n    }\n\n    else if ((ilm.LensID > 0xef00) && (ilm.LensID < 0xffff) &&\n             (ilm.LensID != 0xff00))\n    {\n      ilm.AdapterID = 0xef00;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n    }\n\n    else if (((ilm.LensID != -1) && (ilm.LensID < 0xef00)) ||\n             (ilm.LensID == 0xff00))\n      ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n    /*\n        if (tag == 0x010c)\n          ilm.CameraMount = LIBRAW_MOUNT_Minolta_A;\n    */\n  }\n  else if (tag == 0xb02a && len < 256000)\n  { // Sony LensSpec\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    if ((!dng_writer) ||\n        (saneSonyCameraInfo(table_buf[1], table_buf[2], table_buf[3],\n                            table_buf[4], table_buf[5], table_buf[6])))\n    {\n      if (table_buf[1] | table_buf[2])\n        ilm.MinFocal = bcd2dec(table_buf[1]) * 100 + bcd2dec(table_buf[2]);\n      if (table_buf[3] | table_buf[4])\n        ilm.MaxFocal = bcd2dec(table_buf[3]) * 100 + bcd2dec(table_buf[4]);\n      if (table_buf[5])\n        ilm.MaxAp4MinFocal = bcd2dec(table_buf[5]) / 10.0f;\n      if (table_buf[6])\n        ilm.MaxAp4MaxFocal = bcd2dec(table_buf[6]) / 10.0f;\n      parseSonyLensFeatures(table_buf[0], table_buf[7]);\n    }\n    free(table_buf);\n  }\n  else if ((tag == 0xb02b) && !imgdata.sizes.raw_inset_crop.cwidth &&\n           (len == 2))\n  {\n    imgdata.sizes.raw_inset_crop.cheight = get4();\n    imgdata.sizes.raw_inset_crop.cwidth = get4();\n  }\n  else if (tag == 0xb041)\n  {\n    imgdata.shootinginfo.ExposureMode = get2();\n  }\n\n  // MetaVersion: (unique_id >= 286)\n}\n\nvoid LibRaw::parseSonySR2(uchar *cbuf_SR2, unsigned SR2SubIFDOffset,\n                          unsigned SR2SubIFDLength, unsigned dng_writer)\n{\n  unsigned c;\n  unsigned entries, tag_id, tag_type, tag_datalen;\n  INT64 sr2_offset, tag_offset, tag_data, tag_dataoffset;\n  int TagProcessed;\n  int tag_dataunitlen;\n  float num;\n  int i;\n  int WBCTC_count;\n  entries = sget2(cbuf_SR2);\n  if (entries > 1000)\n    return;\n  tag_offset = 2;\n  WBCTC_count = 0;\n  while (entries--) {\n    if (tiff_sget (SR2SubIFDOffset, cbuf_SR2, SR2SubIFDLength,\n                   &tag_offset, &tag_id, &tag_type, &tag_dataoffset,\n                   &tag_datalen, &tag_dataunitlen) == 0) {\n      TagProcessed = 0;\n      if (dng_writer == nonDNG) {\n        switch (tag_id) {\n        case 0x7300:\n          FORC4 cblack[c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          TagProcessed = 1;\n          break;\n        case 0x7303:\n          FORC4 cam_mul[GRBG_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          TagProcessed = 1;\n          break;\n        case 0x7310:\n          FORC4 cblack[RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          i = cblack[3];\n          FORC3 if (i > cblack[c]) i = cblack[c];\n          FORC4 cblack[c] -= i;\n          black = i;\n          TagProcessed = 1;\n          break;\n        case 0x7313:\n          FORC4 cam_mul[RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          TagProcessed = 1;\n          break;\n        case 0x74a0:\n          ilm.MaxAp4MaxFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x74a1:\n          ilm.MaxAp4MinFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x74a2:\n          ilm.MaxFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x74a3:\n          ilm.MinFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x7800:\n          for (i = 0; i < 3; i++)\n          {\n            num = 0.0;\n            for (c = 0; c < 3; c++)\n            {\n              imgdata.color.ccm[i][c] =\n                  (float)((short)sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * (i * 3 + c)));\n              num += imgdata.color.ccm[i][c];\n            }\n            if (num > 0.01)\n              FORC3 imgdata.color.ccm[i][c] = imgdata.color.ccm[i][c] / num;\n          }\n          TagProcessed = 1;\n          break;\n        case 0x787f:\n          if (tag_datalen == 3)\n          {\n            FORC3 imgdata.color.linear_max[c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            imgdata.color.linear_max[3] = imgdata.color.linear_max[1];\n          }\n          else if (tag_datalen == 1)\n          {\n            imgdata.color.linear_max[0] = imgdata.color.linear_max[1] =\n                imgdata.color.linear_max[2] = imgdata.color.linear_max[3] =\n                    sget2(cbuf_SR2 + tag_dataoffset);\n          }\n          TagProcessed = 1;\n          break;\n        }\n      }\n\n      if (!TagProcessed) {\n        if ((tag_id >= 0x7480) && (tag_id <= 0x7486)) {\n          i = tag_id - 0x7480;\n          if (Sony_SR2_wb_list[i] > 255) {\n            icWBCCTC[WBCTC_count][0] = Sony_SR2_wb_list[i];\n            FORC3 icWBCCTC[WBCTC_count][c + 1] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBCCTC[WBCTC_count][4] = icWBCCTC[WBCTC_count][2];\n            WBCTC_count++;\n          } else {\n            FORC3 icWBC[Sony_SR2_wb_list[i]][c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBC[Sony_SR2_wb_list[i]][3] = icWBC[Sony_SR2_wb_list[i]][1];\n          }\n        } else if ((tag_id >= 0x7820) && (tag_id <= 0x782d)) {\n          i = tag_id - 0x7820;\n          if (Sony_SR2_wb_list1[i] > 255) {\n            icWBCCTC[WBCTC_count][0] = Sony_SR2_wb_list1[i];\n            FORC3 icWBCCTC[WBCTC_count][c + 1] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBCCTC[WBCTC_count][4] = icWBCCTC[WBCTC_count][2];\n            if (Sony_SR2_wb_list1[i] == 3200) {\n              FORC3 icWBC[LIBRAW_WBI_StudioTungsten][c] = icWBCCTC[WBCTC_count][c + 1];\n              icWBC[LIBRAW_WBI_StudioTungsten][3] = icWBC[LIBRAW_WBI_StudioTungsten][1];\n            }\n            WBCTC_count++;\n          } else {\n            FORC3 icWBC[Sony_SR2_wb_list1[i]][c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBC[Sony_SR2_wb_list1[i]][3] = icWBC[Sony_SR2_wb_list1[i]][1];\n          }\n        } else if (tag_id == 0x7302) {\n          FORC4 icWBC[LIBRAW_WBI_Auto][GRBG_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n        } else if (tag_id == 0x7312) {\n          FORC4 icWBC[LIBRAW_WBI_Auto][RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n        }\n      }\n    }\n  }\n}\n\nvoid LibRaw::parseSonySRF(unsigned len)\n{\n\n  if ((len > 0xfffff) || (len == 0))\n    return;\n\n  INT64 save = ftell(ifp);\n  INT64 offset =\n      0x0310c0 - save; /* for non-DNG this value normally is 0x8ddc */\n  if (len < offset || offset < 0)\n    return;\n  INT64 decrypt_len = offset >> 2; /* master key offset value is the next\n                                      un-encrypted metadata field after SRF0 */\n\n  unsigned i, nWB;\n  unsigned MasterKey, SRF2Key, RawDataKey;\n  INT64 srf_offset, tag_offset, tag_data, tag_dataoffset;\n  int tag_dataunitlen;\n  uchar *srf_buf;\n  short entries;\n  unsigned tag_id, tag_type, tag_datalen;\n\n  srf_buf = (uchar *)malloc(len);\n  fread(srf_buf, len, 1, ifp);\n\n  offset += srf_buf[offset] << 2;\n\n#define CHECKBUFFER_SGET4(offset)                                              \\\n  do                                                                           \\\n  {                                                                            \\\n    if ((((offset) + 4) > len) || ((offset) < 0))                              \\\n      goto restore_after_parseSonySRF;                                         \\\n  } while (0)\n\n#define CHECKBUFFER_SGET2(offset)                                              \\\n  do                                                                           \\\n  {                                                                            \\\n    if ( ((offset + 2) > len) || ((offset) < 0))                               \\\n      goto restore_after_parseSonySRF;                                         \\\n  } while (0)\n\n  CHECKBUFFER_SGET4(offset);\n\n  /* master key is stored in big endian */\n  MasterKey = ((unsigned)srf_buf[offset] << 24) |\n              ((unsigned)srf_buf[offset + 1] << 16) |\n              ((unsigned)srf_buf[offset + 2] << 8) |\n              (unsigned)srf_buf[offset + 3];\n\n  /* skip SRF0 */\n  srf_offset = 0;\n  CHECKBUFFER_SGET2(srf_offset);\n  entries = sget2(srf_buf + srf_offset);\n  if (entries > 1000)\n    goto restore_after_parseSonySRF;\n  offset = srf_offset + 2;\n  CHECKBUFFER_SGET4(offset);\n  CHECKBUFFER_SGET4(offset + 12 * entries);\n  srf_offset = sget4(srf_buf + offset + 12 * entries) -\n               save; /* SRF0 ends with SRF1 abs. position */\n\n  /* get SRF1, it has fixed 40 bytes length and contains keys to decode metadata\n   * and raw data */\n  if (srf_offset < 0 || decrypt_len < srf_offset / 4)\n    goto restore_after_parseSonySRF;\n  sony_decrypt((unsigned *)(srf_buf + srf_offset), decrypt_len - srf_offset / 4,\n               1, MasterKey);\n  CHECKBUFFER_SGET2(srf_offset);\n  entries = sget2(srf_buf + srf_offset);\n  if (entries > 1000)\n    goto restore_after_parseSonySRF;\n  offset = srf_offset + 2;\n  tag_offset = offset;\n\n  while (entries--) {\n    if (tiff_sget (save, srf_buf, len,\n                   &tag_offset, &tag_id, &tag_type, &tag_dataoffset,\n                   &tag_datalen, &tag_dataunitlen) == 0) {\n      if (tag_id == 0x0000) {\n        SRF2Key = sget4(srf_buf + tag_dataoffset);\n      } else if (tag_id == 0x0001) {\n        RawDataKey = sget4(srf_buf + tag_dataoffset);\n      }\n    } else goto restore_after_parseSonySRF;\n  }\n  offset = tag_offset;\n\n  /* get SRF2 */\n  CHECKBUFFER_SGET4(offset);\n  srf_offset =\n      sget4(srf_buf + offset) - save; /* SRFn ends with SRFn+1 position */\n  if (srf_offset < 0 || decrypt_len < srf_offset / 4)\n    goto restore_after_parseSonySRF;\n  sony_decrypt((unsigned *)(srf_buf + srf_offset), decrypt_len - srf_offset / 4,\n               1, SRF2Key);\n  CHECKBUFFER_SGET2(srf_offset);\n  entries = sget2(srf_buf + srf_offset);\n  if (entries > 1000)\n    goto restore_after_parseSonySRF;\n  offset = srf_offset + 2;\n  tag_offset = offset;\n\n  while (entries--) {\n    if (tiff_sget (save, srf_buf, len,\n                   &tag_offset, &tag_id, &tag_type, &tag_dataoffset,\n                   &tag_datalen, &tag_dataunitlen) == 0) {\n      if ((tag_id >= 0x00c0) && (tag_id <= 0x00ce)) {\n        i = (tag_id - 0x00c0) % 3;\n        nWB = (tag_id - 0x00c0) / 3;\n        icWBC[Sony_SRF_wb_list[nWB]][i] = sget4(srf_buf + tag_dataoffset);\n        if (i == 1) {\n          icWBC[Sony_SRF_wb_list[nWB]][3] =\n            icWBC[Sony_SRF_wb_list[nWB]][i];\n        }\n      } else if ((tag_id >= 0x00d0) && (tag_id <= 0x00d2)) {\n        i = (tag_id - 0x00d0) % 3;\n        cam_mul[i] = sget4(srf_buf + tag_dataoffset);\n        if (i == 1) {\n          cam_mul[3] = cam_mul[i];\n        }\n      } else switch (tag_id) {\n        /*\n        0x0002  SRF6Offset\n        0x0003  SRFDataOffset (?)\n        0x0004  RawDataOffset\n        0x0005  RawDataLength\n        */\n      case 0x0043:\n        ilm.MaxAp4MaxFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      case 0x0044:\n         ilm.MaxAp4MinFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      case 0x0045:\n        ilm.MinFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      case 0x0046:\n        ilm.MaxFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      }\n    } else goto restore_after_parseSonySRF;\n  }\n  offset = tag_offset;\n\nrestore_after_parseSonySRF:\n  free(srf_buf);\n  fseek(ifp, save, SEEK_SET);\n#undef CHECKBUFFER_SGET4\n#undef CHECKBUFFER_SGET2\n}\n"], "fixing_code": ["/* -*- C++ -*-\n * Copyright 2019-2020 LibRaw LLC (info@libraw.org)\n *\n LibRaw is free software; you can redistribute it and/or modify\n it under the terms of the one of two licenses as you choose:\n\n1. GNU LESSER GENERAL PUBLIC LICENSE version 2.1\n   (See file LICENSE.LGPL provided in LibRaw distribution archive for details).\n\n2. COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\n   (See file LICENSE.CDDL provided in LibRaw distribution archive for details).\n\n */\n\n#include \"../../internal/dcraw_defs.h\"\n#include \"../../internal/libraw_cameraids.h\"\n\nstatic ushort saneSonyCameraInfo(uchar a, uchar b, uchar c, uchar d, uchar e,\n                                 uchar f)\n{\n  if ((a >> 4) > 9)\n    return 0;\n  else if ((a & 0x0f) > 9)\n    return 0;\n  else if ((b >> 4) > 9)\n    return 0;\n  else if ((b & 0x0f) > 9)\n    return 0;\n  else if ((c >> 4) > 9)\n    return 0;\n  else if ((c & 0x0f) > 9)\n    return 0;\n  else if ((d >> 4) > 9)\n    return 0;\n  else if ((d & 0x0f) > 9)\n    return 0;\n  else if ((e >> 4) > 9)\n    return 0;\n  else if ((e & 0x0f) > 9)\n    return 0;\n  else if ((f >> 4) > 9)\n    return 0;\n  else if ((f & 0x0f) > 9)\n    return 0;\n  return 1;\n}\nstatic float my_roundf(float x)\n{\n  float t;\n  if (x >= 0.0)\n  {\n    t = ceilf(x);\n    if (t - x > 0.5)\n      t -= 1.0;\n    return t;\n  }\n  else\n  {\n    t = ceilf(-x);\n    if (t + x > 0.5)\n      t -= 1.0;\n    return -t;\n  }\n}\n\nstatic ushort bcd2dec(uchar data)\n{\n  if ((data >> 4) > 9)\n    return 0;\n  else if ((data & 0x0f) > 9)\n    return 0;\n  else\n    return (data >> 4) * 10 + (data & 0x0f);\n}\n\nstatic uchar SonySubstitution[257] =\n    \"\\x00\\x01\\x32\\xb1\\x0a\\x0e\\x87\\x28\\x02\\xcc\\xca\\xad\\x1b\\xdc\\x08\\xed\\x64\\x86\"\n    \"\\xf0\\x4f\\x8c\\x6c\\xb8\\xcb\\x69\\xc4\\x2c\\x03\"\n    \"\\x97\\xb6\\x93\\x7c\\x14\\xf3\\xe2\\x3e\\x30\\x8e\\xd7\\x60\\x1c\\xa1\\xab\\x37\\xec\\x75\"\n    \"\\xbe\\x23\\x15\\x6a\\x59\\x3f\\xd0\\xb9\\x96\\xb5\"\n    \"\\x50\\x27\\x88\\xe3\\x81\\x94\\xe0\\xc0\\x04\\x5c\\xc6\\xe8\\x5f\\x4b\\x70\\x38\\x9f\\x82\"\n    \"\\x80\\x51\\x2b\\xc5\\x45\\x49\\x9b\\x21\\x52\\x53\"\n    \"\\x54\\x85\\x0b\\x5d\\x61\\xda\\x7b\\x55\\x26\\x24\\x07\\x6e\\x36\\x5b\\x47\\xb7\\xd9\\x4a\"\n    \"\\xa2\\xdf\\xbf\\x12\\x25\\xbc\\x1e\\x7f\\x56\\xea\"\n    \"\\x10\\xe6\\xcf\\x67\\x4d\\x3c\\x91\\x83\\xe1\\x31\\xb3\\x6f\\xf4\\x05\\x8a\\x46\\xc8\\x18\"\n    \"\\x76\\x68\\xbd\\xac\\x92\\x2a\\x13\\xe9\\x0f\\xa3\"\n    \"\\x7a\\xdb\\x3d\\xd4\\xe7\\x3a\\x1a\\x57\\xaf\\x20\\x42\\xb2\\x9e\\xc3\\x8b\\xf2\\xd5\\xd3\"\n    \"\\xa4\\x7e\\x1f\\x98\\x9c\\xee\\x74\\xa5\\xa6\\xa7\"\n    \"\\xd8\\x5e\\xb0\\xb4\\x34\\xce\\xa8\\x79\\x77\\x5a\\xc1\\x89\\xae\\x9a\\x11\\x33\\x9d\\xf5\"\n    \"\\x39\\x19\\x65\\x78\\x16\\x71\\xd2\\xa9\\x44\\x63\"\n    \"\\x40\\x29\\xba\\xa0\\x8f\\xe4\\xd6\\x3b\\x84\\x0d\\xc2\\x4e\\x58\\xdd\\x99\\x22\\x6b\\xc9\"\n    \"\\xbb\\x17\\x06\\xe5\\x7d\\x66\\x43\\x62\\xf6\\xcd\"\n    \"\\x35\\x90\\x2e\\x41\\x8d\\x6d\\xaa\\x09\\x73\\x95\\x0c\\xf1\\x1d\\xde\\x4c\\x2f\\x2d\\xf7\"\n    \"\\xd1\\x72\\xeb\\xef\\x48\\xc7\\xf8\\xf9\\xfa\\xfb\"\n    \"\\xfc\\xfd\\xfe\\xff\";\n\nvoid LibRaw::sony_decrypt(unsigned *data, int len, int start, int key)\n{\n#ifndef LIBRAW_NOTHREADS\n#define pad tls->sony_decrypt.pad\n#define p tls->sony_decrypt.p\n#else\n  static unsigned pad[128], p;\n#endif\n  if (start)\n  {\n    for (p = 0; p < 4; p++)\n      pad[p] = key = key * 48828125 + 1;\n    pad[3] = pad[3] << 1 | (pad[0] ^ pad[2]) >> 31;\n    for (p = 4; p < 127; p++)\n      pad[p] = (pad[p - 4] ^ pad[p - 2]) << 1 | (pad[p - 3] ^ pad[p - 1]) >> 31;\n    for (p = 0; p < 127; p++)\n      pad[p] = htonl(pad[p]);\n  }\n  while (len--)\n  {\n    *data++ ^= pad[p & 127] = pad[(p + 1) & 127] ^ pad[(p + 65) & 127];\n    p++;\n  }\n#ifndef LIBRAW_NOTHREADS\n#undef pad\n#undef p\n#endif\n}\nvoid LibRaw::setSonyBodyFeatures(unsigned long long id)\n{\n  ushort idx;\n  static const struct\n  {\n    ushort scf[11];\n    /*\n    scf[0]  camera id\n    scf[1]  camera format\n    scf[2]  camera mount: Minolta A, Sony E, fixed,\n    scf[3]  camera type: DSLR, NEX, SLT, ILCE, ILCA, DSC\n    scf[4]  lens mount\n    scf[5]  tag 0x2010 group (0 if not used)\n    scf[6]  offset of Sony ISO in 0x2010 table, 0xffff if not valid\n    scf[7]  offset of ShutterCount3 in 0x9050 table, 0xffff if not valid\n    scf[8]  offset of MeteringMode in 0x2010 table, 0xffff if not valid\n    scf[9]  offset of ExposureProgram in 0x2010 table, 0xffff if not valid\n    scf[10] offset of ReleaseMode2 in 0x2010 table, 0xffff if not valid\n    */\n  } SonyCamFeatures[] = {\n      {SonyID_DSLR_A100, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A900, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A700, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A200, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A350, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A300, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A900, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A380, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A330, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A230, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A290, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x10b, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x10c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A850, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A850, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x10f, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x110, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A550, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A500, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A450, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x114, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x115, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_5, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_3, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A33, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A55, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A560, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSLR_A580, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_DSLR, 0,\n       0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_C3, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A35, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 0,\n       0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_SLT_A65, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_SLT_A77, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_NEX_5N, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 1,\n       0x113e, 0x01bd, 0x1174, 0x1175, 0x112c},\n      {SonyID_NEX_7, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_NEX_VG20, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 2,\n       0x1218, 0x01bd, 0x1178, 0x1179, 0x112c},\n      {SonyID_SLT_A37, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 3,\n       0x11f4, 0x01bd, 0x1154, 0x1155, 0x1108},\n      {SonyID_SLT_A57, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 3,\n       0x11f4, 0x01bd, 0x1154, 0x1155, 0x1108},\n      {SonyID_NEX_F3, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 3,\n       0x11f4, 0x01bd, 0x1154, 0x1155, 0x1108},\n      {SonyID_SLT_A99, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_6, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_5R, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_DSC_RX100, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 5, 0x1254, 0xffff, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_DSC_RX1, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 5, 0x1258, 0xffff, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_VG900, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_NEX_VG30, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {0x12d, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_3000, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 5,\n       0x1280, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_SLT_A58, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_SLT, 0, 5,\n       0x1280, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {0x130, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_NEX_3N, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1280, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_ILCE_7, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_NEX_5T, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_NEX, 0, 5,\n       0x1254, 0x01aa, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_DSC_RX100M2, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 6, 0x113c, 0xffff, 0x1064, 0x1065, 0x1018},\n      {SonyID_DSC_RX10, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 7, 0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX1R, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 5, 0x1258, 0xffff, 0x11ac, 0x11ad, 0x1160},\n      {SonyID_ILCE_7R, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_6000, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_5000, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0x01aa, 0x025c, 0x025d, 0x0210},\n      {0x13a, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x13b, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x13c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX100M3, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 7, 0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_7S, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCA_77M2, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_ILCA, 0,\n       7, 0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {0x140, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x141, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x142, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x143, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x144, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x145, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x146, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x147, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x148, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x149, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14a, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14b, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14d, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14e, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x14f, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x150, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x151, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x152, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_5100, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_7M2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX100M4, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX10M2, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {0x157, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX1RM2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {0x159, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_QX1, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 7,\n       0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_7RM2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cb, 0x025c, 0x025d, 0x0210},\n      {0x15c, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x15d, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_7SM2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cb, 0x025c, 0x025d, 0x0210},\n      {0x15f, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {0x160, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCA_68, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_ILCA, 0,\n       7, 0x0344, 0x01a0, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCA_99M2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Minolta_A, LIBRAW_SONY_ILCA, 0, 8,\n       0x0346, 0x01cd, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX10M3, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX100M5, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_6300, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cd, 0x025c, 0x025d, 0x0210},\n      {SonyID_ILCE_9, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {0x167, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_6500, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 8,\n       0x0346, 0x01cd, 0x025c, 0x025d, 0x0210},\n      {0x169, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_7RM3, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_7M3, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_RX0, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 8, 0x0346, 0xffff, 0x025c, 0x025d, 0x0210},\n      {SonyID_DSC_RX10M4, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_RX100M6, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_HX99, LIBRAW_FORMAT_1div2p3INCH, LIBRAW_MOUNT_FixedLens,\n       LIBRAW_SONY_DSC, LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b,\n       0x024c, 0x0208},\n      {0x170, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX100M5A, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {0x172, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_6400, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_DSC_RX0M2, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {0x175, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_DSC_RX100M7, LIBRAW_FORMAT_1INCH, LIBRAW_MOUNT_FixedLens, LIBRAW_SONY_DSC,\n       LIBRAW_MOUNT_FixedLens, 9, 0x0320, 0xffff, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_7RM4, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_9M2, LIBRAW_FORMAT_FF, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {0x179, 0, 0, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff},\n      {SonyID_ILCE_6600, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n      {SonyID_ILCE_6100, LIBRAW_FORMAT_APSC, LIBRAW_MOUNT_Sony_E, LIBRAW_SONY_ILCE, 0, 9,\n       0x0320, 0x019f, 0x024b, 0x024c, 0x0208},\n\n  };\n  ilm.CamID = id;\n\n  if (id == SonyID_DSC_R1)\n  {\n    ilm.CameraMount = ilm.LensMount = LIBRAW_MOUNT_FixedLens;\n    imSony.CameraType = LIBRAW_SONY_DSC;\n    imSony.group2010 = 0;\n    imSony.real_iso_offset = 0xffff;\n    imSony.ImageCount3_offset = 0xffff;\n    return;\n  }\n  else\n    idx = id - 0x100ULL;\n\n  if ((idx >= 0) && (idx < sizeof SonyCamFeatures / sizeof *SonyCamFeatures))\n  {\n    if (!SonyCamFeatures[idx].scf[2])\n      return;\n    ilm.CameraFormat = SonyCamFeatures[idx].scf[1];\n    ilm.CameraMount = SonyCamFeatures[idx].scf[2];\n    imSony.CameraType = SonyCamFeatures[idx].scf[3];\n    if (SonyCamFeatures[idx].scf[4])\n      ilm.LensMount = SonyCamFeatures[idx].scf[4];\n    imSony.group2010 = SonyCamFeatures[idx].scf[5];\n    imSony.real_iso_offset = SonyCamFeatures[idx].scf[6];\n    imSony.ImageCount3_offset = SonyCamFeatures[idx].scf[7];\n    imSony.MeteringMode_offset = SonyCamFeatures[idx].scf[8];\n    imSony.ExposureProgram_offset = SonyCamFeatures[idx].scf[9];\n    imSony.ReleaseMode2_offset = SonyCamFeatures[idx].scf[10];\n  }\n\n  char *sbstr = strstr(software, \" v\");\n  if (sbstr != NULL)\n  {\n    sbstr += 2;\n    imSony.firmware = atof(sbstr);\n\n    if ((id == SonyID_ILCE_7) ||\n        (id == SonyID_ILCE_7R))\n    {\n      if (imSony.firmware < 1.2f)\n        imSony.ImageCount3_offset = 0x01aa;\n      else\n        imSony.ImageCount3_offset = 0x01c0;\n    }\n    else if (id == SonyID_ILCE_6000)\n    {\n      if (imSony.firmware < 2.0f)\n        imSony.ImageCount3_offset = 0x01aa;\n      else\n        imSony.ImageCount3_offset = 0x01c0;\n    }\n    else if ((id == SonyID_ILCE_7S) ||\n             (id == SonyID_ILCE_7M2))\n    {\n      if (imSony.firmware < 1.2f)\n        imSony.ImageCount3_offset = 0x01a0;\n      else\n        imSony.ImageCount3_offset = 0x01b6;\n    }\n  }\n}\n\nvoid LibRaw::parseSonyLensType2(uchar a, uchar b)\n{\n  ushort lid2;\n  lid2 = (((ushort)a) << 8) | ((ushort)b);\n//  printf (\"==>> 2: lid2 %d\\n\", lid2);\n  if (!lid2)\n    return;\n  if (lid2 < 0x100)\n  {\n    if ((ilm.AdapterID != 0x4900) && (ilm.AdapterID != 0xef00))\n    {\n      ilm.AdapterID = lid2;\n      switch (lid2)\n      {\n      case 1:\n      case 2:\n      case 3:\n      case 6:\n        ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n        break;\n      case 44:\n      case 78:\n      case 184:\n      case 234:\n      case 239:\n        ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n        break;\n      }\n    }\n  }\n  else\n    ilm.LensID = lid2;\n\n  if ((lid2 >= 50481) &&\n      (lid2 < 50500)) {\n    strcpy(ilm.Adapter, \"MC-11\");\n    ilm.AdapterID = 0x4900;\n  } else if ((lid2 > 0xef00) &&\n             (lid2 < 0xffff) &&\n             (lid2 != 0xff00)) {\n    ilm.AdapterID = 0xef00;\n    ilm.LensID -= ilm.AdapterID;\n    ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n  }\n\n  return;\n}\n\nvoid LibRaw::parseSonyLensFeatures(uchar a, uchar b)\n{\n\n  ushort features;\n  features = (((ushort)a) << 8) | ((ushort)b);\n\n  if ((ilm.LensMount == LIBRAW_MOUNT_Canon_EF) ||\n      (ilm.LensMount != LIBRAW_MOUNT_Sigma_X3F) || !features)\n    return;\n\n  ilm.LensFeatures_pre[0] = 0;\n  ilm.LensFeatures_suf[0] = 0;\n  if ((features & 0x0200) && (features & 0x0100))\n    strcpy(ilm.LensFeatures_pre, \"E\");\n  else if (features & 0x0200)\n    strcpy(ilm.LensFeatures_pre, \"FE\");\n  else if (features & 0x0100)\n    strcpy(ilm.LensFeatures_pre, \"DT\");\n\n  if (!ilm.LensFormat && !ilm.LensMount)\n  {\n    ilm.LensFormat = LIBRAW_FORMAT_FF;\n    ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n\n    if ((features & 0x0200) && (features & 0x0100))\n    {\n      ilm.LensFormat = LIBRAW_FORMAT_APSC;\n      ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n    }\n    else if (features & 0x0200)\n    {\n      ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n    }\n    else if (features & 0x0100)\n    {\n      ilm.LensFormat = LIBRAW_FORMAT_APSC;\n    }\n  }\n\n  if (features & 0x4000)\n    strnXcat(ilm.LensFeatures_pre, \" PZ\");\n\n  if (features & 0x0008)\n    strnXcat(ilm.LensFeatures_suf, \" G\");\n  else if (features & 0x0004)\n    strnXcat(ilm.LensFeatures_suf, \" ZA\");\n\n  if ((features & 0x0020) && (features & 0x0040))\n    strnXcat(ilm.LensFeatures_suf, \" Macro\");\n  else if (features & 0x0020)\n    strnXcat(ilm.LensFeatures_suf, \" STF\");\n  else if (features & 0x0040)\n    strnXcat(ilm.LensFeatures_suf, \" Reflex\");\n  else if (features & 0x0080)\n    strnXcat(ilm.LensFeatures_suf, \" Fisheye\");\n\n  if (features & 0x0001)\n    strnXcat(ilm.LensFeatures_suf, \" SSM\");\n  else if (features & 0x0002)\n    strnXcat(ilm.LensFeatures_suf, \" SAM\");\n\n  if (features & 0x8000)\n    strnXcat(ilm.LensFeatures_suf, \" OSS\");\n\n  if (features & 0x2000)\n    strnXcat(ilm.LensFeatures_suf, \" LE\");\n\n  if (features & 0x0800)\n    strnXcat(ilm.LensFeatures_suf, \" II\");\n\n  if (ilm.LensFeatures_suf[0] == ' ')\n    memmove(ilm.LensFeatures_suf, ilm.LensFeatures_suf + 1,\n            strbuflen(ilm.LensFeatures_suf) - 1);\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x0116(uchar *buf, ushort len, unsigned long long id)\n{\n  int i = 0;\n\n  if (((id == SonyID_DSLR_A900)      ||\n       (id == SonyID_DSLR_A900_APSC) ||\n       (id == SonyID_DSLR_A850)      ||\n       (id == SonyID_DSLR_A850_APSC)) &&\n      (len >= 2))\n    i = 1;\n  else if ((id >= SonyID_DSLR_A550) && (len >= 3))\n    i = 2;\n  else\n    return;\n\n  imCommon.BatteryTemperature = (float)(buf[i] - 32) / 1.8f;\n}\n\nvoid LibRaw::process_Sony_0x2010(uchar *buf, ushort len)\n{\n  if (!imSony.group2010)\n    return;\n\n  if ((imSony.real_iso_offset != 0xffff) &&\n      (len >= (imSony.real_iso_offset + 2)) && (imCommon.real_ISO < 0.1f))\n  {\n    uchar s[2];\n    s[0] = SonySubstitution[buf[imSony.real_iso_offset]];\n    s[1] = SonySubstitution[buf[imSony.real_iso_offset + 1]];\n    imCommon.real_ISO =\n        100.0f * libraw_powf64l(2.0f, (16 - ((float)sget2(s)) / 256.0f));\n  }\n\n  if (len >= (imSony.MeteringMode_offset + 2))\n  {\n    imgdata.shootinginfo.MeteringMode =\n        SonySubstitution[buf[imSony.MeteringMode_offset]];\n    imgdata.shootinginfo.ExposureProgram =\n        SonySubstitution[buf[imSony.ExposureProgram_offset]];\n  }\n\n  if (len >= (imSony.ReleaseMode2_offset + 2))\n  {\n    imgdata.shootinginfo.DriveMode =\n        SonySubstitution[buf[imSony.ReleaseMode2_offset]];\n  }\n}\n\nvoid LibRaw::process_Sony_0x9050(uchar *buf, ushort len, unsigned long long id)\n{\n  ushort lid;\n  uchar s[4];\n  int c;\n\n  if ((ilm.CameraMount != LIBRAW_MOUNT_Sony_E) &&\n      (ilm.CameraMount != LIBRAW_MOUNT_FixedLens))\n  {\n    if (len < 2)\n      return;\n    if (buf[0])\n      ilm.MaxAp4CurFocal =\n        my_roundf(\n          libraw_powf64l(2.0f, ((float)SonySubstitution[buf[0]] / 8.0 - 1.06f) / 2.0f) *\n             10.0f) / 10.0f;\n\n    if (buf[1])\n      ilm.MinAp4CurFocal =\n        my_roundf(\n          libraw_powf64l(2.0f, ((float)SonySubstitution[buf[1]] / 8.0 - 1.06f) / 2.0f) *\n             10.0f) / 10.0f;\n  }\n\n  if (ilm.CameraMount != LIBRAW_MOUNT_FixedLens)\n  {\n    if (len <= 0x106)\n      return;\n    if (buf[0x3d] | buf[0x3c])\n    {\n      lid = SonySubstitution[buf[0x3d]] << 8 | SonySubstitution[buf[0x3c]];\n      ilm.CurAp = libraw_powf64l(2.0f, ((float)lid / 256.0f - 16.0f) / 2.0f);\n    }\n    if (buf[0x105] &&\n        (ilm.LensMount != LIBRAW_MOUNT_Canon_EF) &&\n        (ilm.LensMount != LIBRAW_MOUNT_Sigma_X3F)) {\n      switch (SonySubstitution[buf[0x105]]) {\n        case 1:\n          ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n          break;\n        case 2:\n          ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n        break;\n      }\n    }\n    if (buf[0x106]) {\n      switch (SonySubstitution[buf[0x106]]) {\n        case 1:\n          ilm.LensFormat = LIBRAW_FORMAT_APSC;\n          break;\n        case 2:\n          ilm.LensFormat = LIBRAW_FORMAT_FF;\n        break;\n      }\n    }\n  }\n\n  if (ilm.CameraMount == LIBRAW_MOUNT_Sony_E)\n  {\n    if (len <= 0x108)\n      return;\n    parseSonyLensType2(\n        SonySubstitution[buf[0x0108]], // LensType2 - Sony lens ids\n        SonySubstitution[buf[0x0107]]);\n  }\n\n  if (len <= 0x10a)\n    return;\n  if ((ilm.LensID == -1) && (ilm.CameraMount == LIBRAW_MOUNT_Minolta_A) &&\n      (buf[0x010a] | buf[0x0109]))\n  {\n    ilm.LensID = // LensType - Minolta/Sony lens ids\n        SonySubstitution[buf[0x010a]] << 8 | SonySubstitution[buf[0x0109]];\n\n    if ((ilm.LensID > 0x4900) && (ilm.LensID <= 0x5900))\n    {\n      ilm.AdapterID = 0x4900;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Sigma_X3F;\n      strcpy(ilm.Adapter, \"MC-11\");\n    }\n\n    else if ((ilm.LensID > 0xef00) && (ilm.LensID < 0xffff) &&\n             (ilm.LensID != 0xff00))\n    {\n      ilm.AdapterID = 0xef00;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n    }\n  }\n\n  if ((id >= SonyID_SLT_A65) && (id <= SonyID_NEX_F3))\n  {\n    if (len <= 0x116)\n      return;\n    // \"SLT-A65\", \"SLT-A77\", \"NEX-7\", \"NEX-VG20\",\n    // \"SLT-A37\", \"SLT-A57\", \"NEX-F3\", \"Lunar\"\n    parseSonyLensFeatures(SonySubstitution[buf[0x115]],\n                          SonySubstitution[buf[0x116]]);\n  }\n  else if (ilm.CameraMount != LIBRAW_MOUNT_FixedLens)\n  {\n    if (len <= 0x117)\n      return;\n    parseSonyLensFeatures(SonySubstitution[buf[0x116]],\n                          SonySubstitution[buf[0x117]]);\n  }\n\n  if ((id == SonyID_ILCE_7RM2) ||\n      (id == SonyID_ILCE_7SM2) ||\n      (id == SonyID_ILCA_99M2) ||\n      (id == SonyID_ILCE_6300) ||\n      (id == SonyID_ILCE_9)    ||\n      (id == SonyID_ILCE_6500) ||\n      (id == SonyID_ILCE_7RM3) ||\n      (id == SonyID_ILCE_7M3)  ||\n      (id == SonyID_ILCE_6400) ||\n      (id == SonyID_ILCE_7RM4) ||\n      (id == SonyID_ILCE_9M2)  ||\n      (id == SonyID_ILCE_6600) ||\n      (id == SonyID_ILCE_6100))\n  {\n    if (len <= 0x8d)\n      return;\n    unsigned long long b88 = SonySubstitution[buf[0x88]];\n    unsigned long long b89 = SonySubstitution[buf[0x89]];\n    unsigned long long b8a = SonySubstitution[buf[0x8a]];\n    unsigned long long b8b = SonySubstitution[buf[0x8b]];\n    unsigned long long b8c = SonySubstitution[buf[0x8c]];\n    unsigned long long b8d = SonySubstitution[buf[0x8d]];\n    sprintf(imgdata.shootinginfo.InternalBodySerial, \"%06llx\",\n            (b88 << 40) + (b89 << 32) + (b8a << 24) + (b8b << 16) + (b8c << 8) +\n                b8d);\n  }\n  else if (ilm.CameraMount == LIBRAW_MOUNT_Minolta_A)\n  {\n    if (len <= 0xf4)\n      return;\n    unsigned long long bf0 = SonySubstitution[buf[0xf0]];\n    unsigned long long bf1 = SonySubstitution[buf[0xf1]];\n    unsigned long long bf2 = SonySubstitution[buf[0xf2]];\n    unsigned long long bf3 = SonySubstitution[buf[0xf3]];\n    unsigned long long bf4 = SonySubstitution[buf[0xf4]];\n    sprintf(imgdata.shootinginfo.InternalBodySerial, \"%05llx\",\n            (bf0 << 32) + (bf1 << 24) + (bf2 << 16) + (bf3 << 8) + bf4);\n  }\n  else if ((ilm.CameraMount == LIBRAW_MOUNT_Sony_E) &&\n           (id != SonyID_NEX_5N) &&\n           (id != SonyID_NEX_7)  &&\n           (id != SonyID_NEX_VG20))\n  {\n    if (len <= 0x7f)\n      return;\n    unsigned b7c = SonySubstitution[buf[0x7c]];\n    unsigned b7d = SonySubstitution[buf[0x7d]];\n    unsigned b7e = SonySubstitution[buf[0x7e]];\n    unsigned b7f = SonySubstitution[buf[0x7f]];\n    sprintf(imgdata.shootinginfo.InternalBodySerial, \"%04x\",\n            (b7c << 24) + (b7d << 16) + (b7e << 8) + b7f);\n  }\n\n  if ((imSony.ImageCount3_offset != 0xffff) &&\n      (len >= (imSony.ImageCount3_offset + 4)))\n  {\n    FORC4 s[c] = SonySubstitution[buf[imSony.ImageCount3_offset + c]];\n    imSony.ImageCount3 = sget4(s);\n  }\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x9400(uchar *buf, ushort len, unsigned long long id)\n{\n\n  uchar s[4];\n  int c;\n  uchar bufx = buf[0];\n\n  if (((bufx == 0x23) || (bufx == 0x24) || (bufx == 0x26) || (bufx == 0x28)) &&\n      (len >= 0x1f))\n  { // 0x9400 'c' version\n\n    if ((id == SonyID_ILCE_9)       ||\n        (id == SonyID_ILCE_7RM3)    ||\n        (id == SonyID_ILCE_7M3)     ||\n        (id == SonyID_DSC_RX10M4)   ||\n        (id == SonyID_DSC_RX100M6)  ||\n        (id == SonyID_DSC_HX99)     ||\n        (id == SonyID_DSC_RX100M5A) ||\n        (id == SonyID_ILCE_6400)    ||\n        (id == SonyID_DSC_RX0M2)    ||\n        (id == SonyID_DSC_RX100M7)  ||\n        (id == SonyID_ILCE_7RM4)    ||\n        (id == SonyID_ILCE_9M2)     ||\n        (id == SonyID_ILCE_6600)    ||\n        (id == SonyID_ILCE_6100))\n    {\n      imSony.ShotNumberSincePowerUp = SonySubstitution[buf[0x0a]];\n    }\n    else\n    {\n      FORC4 s[c] = SonySubstitution[buf[0x0a + c]];\n      imSony.ShotNumberSincePowerUp = sget4(s);\n    }\n\n    imSony.Sony0x9400_version = 0xc;\n\n    imSony.Sony0x9400_ReleaseMode2 = SonySubstitution[buf[0x09]];\n\n    FORC4 s[c] = SonySubstitution[buf[0x12 + c]];\n    imSony.Sony0x9400_SequenceImageNumber = sget4(s);\n\n    imSony.Sony0x9400_SequenceLength1 = SonySubstitution[buf[0x16]]; // shots\n\n    FORC4 s[c] = SonySubstitution[buf[0x1a + c]];\n    imSony.Sony0x9400_SequenceFileNumber = sget4(s);\n\n    imSony.Sony0x9400_SequenceLength2 = SonySubstitution[buf[0x1e]]; // files\n  }\n\n  else if ((bufx == 0x0c) && (len >= 0x1f))\n  { // 0x9400 'b' version\n    imSony.Sony0x9400_version = 0xb;\n\n    FORC4 s[c] = SonySubstitution[buf[0x08 + c]];\n    imSony.Sony0x9400_SequenceImageNumber = sget4(s);\n\n    FORC4 s[c] = SonySubstitution[buf[0x0c + c]];\n    imSony.Sony0x9400_SequenceFileNumber = sget4(s);\n\n    imSony.Sony0x9400_ReleaseMode2 = SonySubstitution[buf[0x10]];\n\n    imSony.Sony0x9400_SequenceLength1 = SonySubstitution[buf[0x1e]];\n  }\n\n  else if ((bufx == 0x0a) && (len >= 0x23))\n  { // 0x9400 'a' version\n    imSony.Sony0x9400_version = 0xa;\n\n    FORC4 s[c] = SonySubstitution[buf[0x08 + c]];\n    imSony.Sony0x9400_SequenceImageNumber = sget4(s);\n\n    FORC4 s[c] = SonySubstitution[buf[0x0c + c]];\n    imSony.Sony0x9400_SequenceFileNumber = sget4(s);\n\n    imSony.Sony0x9400_ReleaseMode2 = SonySubstitution[buf[0x10]];\n\n    imSony.Sony0x9400_SequenceLength1 = SonySubstitution[buf[0x22]];\n  }\n\n  else\n    return;\n}\n\nvoid LibRaw::process_Sony_0x9402(uchar *buf, ushort len)\n{\n\n  if (len < 23)\n    return;\n\n  imgdata.shootinginfo.FocusMode = SonySubstitution[buf[0x16]];\n\n  if ((imSony.CameraType == LIBRAW_SONY_SLT) ||\n      (imSony.CameraType == LIBRAW_SONY_ILCA))\n    return;\n\n  uchar bufx = buf[0x00];\n  if ((bufx == 0x05) || (bufx == 0xff) || (buf[0x02] != 0xff))\n    return;\n\n  imCommon.AmbientTemperature =\n      (float)((short)SonySubstitution[buf[0x04]]);\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x9403(uchar *buf, ushort len)\n{\n  if (len < 6)\n    return;\n  uchar bufx = SonySubstitution[buf[4]];\n  if ((bufx == 0x00) || (bufx == 0x94))\n    return;\n\n  imCommon.SensorTemperature = (float)((short)SonySubstitution[buf[5]]);\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x9406(uchar *buf, ushort len)\n{\n  if (len < 6)\n    return;\n  uchar bufx = buf[0];\n  if ((bufx != 0x01) && (bufx != 0x08) && (bufx != 0x1b))\n    return;\n  bufx = buf[2];\n  if ((bufx != 0x08) && (bufx != 0x1b))\n    return;\n\n  imCommon.BatteryTemperature =\n      (float)(SonySubstitution[buf[5]] - 32) / 1.8f;\n\n  return;\n}\n\nvoid LibRaw::process_Sony_0x940c(uchar *buf, ushort len)\n{\n  if ((imSony.CameraType != LIBRAW_SONY_ILCE) &&\n      (imSony.CameraType != LIBRAW_SONY_NEX))\n    return;\n  if (len <= 0x000a)\n    return;\n\n  ushort lid2;\n  if ((ilm.LensMount != LIBRAW_MOUNT_Canon_EF) &&\n      (ilm.LensMount != LIBRAW_MOUNT_Sigma_X3F))\n  {\n    switch (SonySubstitution[buf[0x0008]])\n    {\n    case 1:\n    case 5:\n      ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n      break;\n    case 4:\n      ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n      break;\n    }\n  }\n  lid2 = (((ushort)SonySubstitution[buf[0x000a]]) << 8) |\n         ((ushort)SonySubstitution[buf[0x0009]]);\n  if ((lid2 > 0) &&\n      ((lid2 < 32784) || (ilm.LensID == 0x1999) || (ilm.LensID == 0xffff)))\n    parseSonyLensType2(\n        SonySubstitution[buf[0x000a]], // LensType2 - Sony lens ids\n        SonySubstitution[buf[0x0009]]);\n  if ((lid2 == 44) || (lid2 == 78) || (lid2 == 184) || (lid2 == 234) ||\n      (lid2 == 239))\n    ilm.AdapterID = lid2;\n  return;\n}\n\nvoid LibRaw::process_Sony_0x940e(uchar *buf, ushort len, unsigned long long id)\n{\n  if (((imSony.CameraType != LIBRAW_SONY_SLT) &&\n       (imSony.CameraType != LIBRAW_SONY_ILCA)) ||\n      (id == SonyID_SLT_A33)  ||\n      (id == SonyID_SLT_A55) ||\n      (id == SonyID_SLT_A35)  ||\n      (len < 3))\n    return;\n\n  imSony.AFType = SonySubstitution[buf[0x02]];\n\n  if (imSony.CameraType == LIBRAW_SONY_ILCA)\n  {\n    if (len >= 0x06)\n    {\n      imgdata.shootinginfo.FocusMode = SonySubstitution[buf[0x05]];\n    }\n    if (len >= 0x0051)\n    {\n      imSony.AFMicroAdjValue = SonySubstitution[buf[0x0050]];\n    }\n  }\n  else\n  {\n    if (len >= 0x0c)\n    {\n      imgdata.shootinginfo.FocusMode = SonySubstitution[buf[0x0b]];\n    }\n    if (len >= 0x017e)\n    {\n      imSony.AFMicroAdjValue = SonySubstitution[buf[0x017d]];\n    }\n  }\n\n  if (imSony.AFMicroAdjValue != 0)\n    imSony.AFMicroAdjOn = 1;\n}\n\nvoid LibRaw::parseSonyMakernotes(\n    int base, unsigned tag, unsigned type, unsigned len, unsigned dng_writer,\n    uchar *&table_buf_0x0116, ushort &table_buf_0x0116_len,\n    uchar *&table_buf_0x2010, ushort &table_buf_0x2010_len,\n    uchar *&table_buf_0x9050, ushort &table_buf_0x9050_len,\n    uchar *&table_buf_0x9400, ushort &table_buf_0x9400_len,\n    uchar *&table_buf_0x9402, ushort &table_buf_0x9402_len,\n    uchar *&table_buf_0x9403, ushort &table_buf_0x9403_len,\n    uchar *&table_buf_0x9406, ushort &table_buf_0x9406_len,\n    uchar *&table_buf_0x940c, ushort &table_buf_0x940c_len,\n    uchar *&table_buf_0x940e, ushort &table_buf_0x940e_len)\n{\n\n  ushort lid, a, b, c, d;\n  uchar *table_buf;\n  uchar uc;\n  uchar s[2];\n  int LensDataValid = 0;\n  unsigned uitemp;\n\n  if (tag == 0xb001)\n  { // Sony ModelID\n    unique_id = get2();\n    setSonyBodyFeatures(unique_id);\n\n    if (table_buf_0x0116_len)\n    {\n      process_Sony_0x0116(table_buf_0x0116, table_buf_0x0116_len, unique_id);\n      free(table_buf_0x0116);\n      table_buf_0x0116_len = 0;\n    }\n\n    if (table_buf_0x2010_len)\n    {\n      process_Sony_0x2010(table_buf_0x2010, table_buf_0x2010_len);\n      free(table_buf_0x2010);\n      table_buf_0x2010_len = 0;\n    }\n\n    if (table_buf_0x9050_len)\n    {\n      process_Sony_0x9050(table_buf_0x9050, table_buf_0x9050_len, unique_id);\n      free(table_buf_0x9050);\n      table_buf_0x9050_len = 0;\n    }\n\n    if (table_buf_0x9400_len)\n    {\n      process_Sony_0x9400(table_buf_0x9400, table_buf_0x9400_len, unique_id);\n      free(table_buf_0x9400);\n      table_buf_0x9400_len = 0;\n    }\n\n    if (table_buf_0x9402_len)\n    {\n      process_Sony_0x9402(table_buf_0x9402, table_buf_0x9402_len);\n      free(table_buf_0x9402);\n      table_buf_0x9402_len = 0;\n    }\n\n    if (table_buf_0x9403_len)\n    {\n      process_Sony_0x9403(table_buf_0x9403, table_buf_0x9403_len);\n      free(table_buf_0x9403);\n      table_buf_0x9403_len = 0;\n    }\n\n    if (table_buf_0x9406_len)\n    {\n      process_Sony_0x9406(table_buf_0x9406, table_buf_0x9406_len);\n      free(table_buf_0x9406);\n      table_buf_0x9406_len = 0;\n    }\n\n    if (table_buf_0x940c_len)\n    {\n      process_Sony_0x940c(table_buf_0x940c, table_buf_0x940c_len);\n      free(table_buf_0x940c);\n      table_buf_0x940c_len = 0;\n    }\n\n    if (table_buf_0x940e_len)\n    {\n      process_Sony_0x940e(table_buf_0x940e, table_buf_0x940e_len, unique_id);\n      free(table_buf_0x940e);\n      table_buf_0x940e_len = 0;\n    }\n  }\n  else if (tag == 0xb000)\n  {\n    FORC4 imSony.FileFormat = imSony.FileFormat * 10 + fgetc(ifp);\n  }\n  else if (tag == 0xb026)\n  {\n    uitemp = get4();\n    if (uitemp != 0xffffffff)\n      imgdata.shootinginfo.ImageStabilization = uitemp;\n  }\n  else if (((tag == 0x0001) || // Minolta CameraSettings, big endian\n            (tag == 0x0003)) &&\n           (len >= 196))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n\n    lid = 0x01 << 2;\n    imgdata.shootinginfo.ExposureMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    lid = 0x06 << 2;\n    imgdata.shootinginfo.DriveMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    lid = 0x07 << 2;\n    imgdata.shootinginfo.MeteringMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    lid = 0x25 << 2;\n    imSony.MinoltaCamID =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n    if (imSony.MinoltaCamID != -1)\n      ilm.CamID = imSony.MinoltaCamID;\n\n    lid = 0x30 << 2;\n    imgdata.shootinginfo.FocusMode =\n        (unsigned)table_buf[lid] << 24 | (unsigned)table_buf[lid + 1] << 16 |\n        (unsigned)table_buf[lid + 2] << 8 | (unsigned)table_buf[lid + 3];\n\n    free(table_buf);\n  }\n  else if ((tag == 0x0004) && // Minolta CameraSettings7D, big endian\n           (len >= 227))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n\n    lid = 0x0;\n    imgdata.shootinginfo.ExposureMode =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    lid = 0x0e << 1;\n    imgdata.shootinginfo.FocusMode =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    lid = 0x10 << 1;\n    imgdata.shootinginfo.AFPoint =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    lid = 0x25 << 1;\n    switch ((ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1]) {\n    case 0:\n    case 1:\n      imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n      break;\n    case 4:\n      imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n      break;\n    default:\n      imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n      break;\n    }\n\n    lid = 0x71 << 1;\n    imgdata.shootinginfo.ImageStabilization =\n        (ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1];\n\n    free(table_buf);\n  }\n  else if ((tag == 0x0010) && // CameraInfo\n           strncasecmp(model, \"DSLR-A100\", 9) &&\n           !strncasecmp(make, \"SONY\", 4) &&\n           ((len == 368) ||  // a700                         : CameraInfo\n            (len == 5478) || // a850, a900                   : CameraInfo\n            (len == 5506) || // a200, a300, a350             : CameraInfo2\n            (len == 6118) || // a230, a290, a330, a380, a390 : CameraInfo2\n            (len == 15360))  // a450, a500, a550, a560, a580 : CameraInfo3\n                             // a33, a35, a55\n                             // NEX-3, NEX-5, NEX-5C, NEX-C3, NEX-VG10E\n\n  )\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    if (memcmp(table_buf, \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\", 8) &&\n        memcmp(table_buf, \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", 8))\n    {\n      LensDataValid = 1;\n    }\n    switch (len)\n    {\n    case 368:  // a700: CameraInfo\n    case 5478: // a850, a900: CameraInfo\n      if ((!dng_writer) ||\n          (saneSonyCameraInfo(table_buf[0], table_buf[3], table_buf[2],\n                              table_buf[5], table_buf[4], table_buf[7])))\n      {\n        if (LensDataValid)\n        {\n          if (table_buf[0] | table_buf[3])\n            ilm.MinFocal = bcd2dec(table_buf[0]) * 100 + bcd2dec(table_buf[3]);\n          if (table_buf[2] | table_buf[5])\n            ilm.MaxFocal = bcd2dec(table_buf[2]) * 100 + bcd2dec(table_buf[5]);\n          if (table_buf[4])\n            ilm.MaxAp4MinFocal = bcd2dec(table_buf[4]) / 10.0f;\n          if (table_buf[4])\n            ilm.MaxAp4MaxFocal = bcd2dec(table_buf[7]) / 10.0f;\n          parseSonyLensFeatures(table_buf[1], table_buf[6]);\n        }\n\n        imSony.AFPointSelected = table_buf[21];\n        imgdata.shootinginfo.AFPoint = (ushort)table_buf[25];\n\n        if (len == 5478)\n        {\n          imSony.AFMicroAdjValue = table_buf[304] - 20;\n          imSony.AFMicroAdjOn = (((table_buf[305] & 0x80) == 0x80) ? 1 : 0);\n          imSony.AFMicroAdjRegisteredLenses = table_buf[305] & 0x7f;\n        }\n      }\n      break;\n    default:\n      // CameraInfo2 & 3\n      if ((!dng_writer) ||\n          (saneSonyCameraInfo(table_buf[1], table_buf[2], table_buf[3],\n                              table_buf[4], table_buf[5], table_buf[6])))\n      {\n        if ((LensDataValid) && strncasecmp(model, \"NEX-5C\", 6))\n        {\n          if (table_buf[1] | table_buf[2])\n            ilm.MinFocal = bcd2dec(table_buf[1]) * 100 + bcd2dec(table_buf[2]);\n          if (table_buf[3] | table_buf[4])\n            ilm.MaxFocal = bcd2dec(table_buf[3]) * 100 + bcd2dec(table_buf[4]);\n          if (table_buf[5])\n            ilm.MaxAp4MinFocal = bcd2dec(table_buf[5]) / 10.0f;\n          if (table_buf[6])\n            ilm.MaxAp4MaxFocal = bcd2dec(table_buf[6]) / 10.0f;\n          parseSonyLensFeatures(table_buf[0], table_buf[7]);\n        }\n\n        if (!strncasecmp(model, \"DSLR-A450\", 9) ||\n            !strncasecmp(model, \"DSLR-A500\", 9) ||\n            !strncasecmp(model, \"DSLR-A550\", 9))\n        {\n          imSony.AFPointSelected = table_buf[0x14];\n          imgdata.shootinginfo.FocusMode = table_buf[0x15];\n          imgdata.shootinginfo.AFPoint = (ushort)table_buf[0x18];\n        }\n        else if (!strncasecmp(model, \"SLT-\", 4) ||\n                 !strncasecmp(model, \"DSLR-A560\", 9) ||\n                 !strncasecmp(model, \"DSLR-A580\", 9))\n        {\n          imSony.AFPointSelected = table_buf[0x1c];\n          imgdata.shootinginfo.FocusMode = table_buf[0x1d];\n          imgdata.shootinginfo.AFPoint = (ushort)table_buf[0x20];\n        }\n      }\n    }\n    free(table_buf);\n  }\n  else if ((!dng_writer) && ((tag == 0x0020) || (tag == 0xb0280020)))\n  {\n    if (!strncasecmp(model, \"DSLR-A100\", 9))\n    { // WBInfoA100\n      fseek(ifp, 0x49dc, SEEK_CUR);\n      stmread(imgdata.shootinginfo.InternalBodySerial, 13, ifp);\n    }\n    else if ((len ==\n              19154) || // a200 a230 a290 a300 a330 a350 a380 a390 : FocusInfo\n             (len == 19148))\n    { // a700 a850 a900                          : FocusInfo\n      table_buf = (uchar *)malloc(128);\n      fread(table_buf, 128, 1, ifp);\n      imgdata.shootinginfo.DriveMode = table_buf[14];\n      imgdata.shootinginfo.ExposureProgram = table_buf[63];\n      free(table_buf);\n    }\n    else if (len == 20480) // a450 a500 a550 a560 a580 a33 a35 a55 : MoreInfo\n                           // NEX-3 NEX-5 NEX-C3 NEX-VG10E         : MoreInfo\n    {\n      a = get2();\n      b = get2();\n      c = get2();\n      d = get2();\n      if ((a) && (c == 1))\n      {\n        fseek(ifp, d - 8, SEEK_CUR);\n        table_buf = (uchar *)malloc(256);\n        fread(table_buf, 256, 1, ifp);\n        imgdata.shootinginfo.DriveMode = table_buf[1];\n        imgdata.shootinginfo.ExposureProgram = table_buf[2];\n        imgdata.shootinginfo.MeteringMode = table_buf[3];\n        switch (table_buf[6]) {\n        case 1:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n          break;\n        case 2:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n          break;\n        default:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n          break;\n        }\n        if (strncasecmp(model, \"DSLR-A450\", 9) &&\n            strncasecmp(model, \"DSLR-A500\", 9) &&\n            strncasecmp(model, \"DSLR-A550\", 9))\n          imgdata.shootinginfo.FocusMode = table_buf[0x13];\n        else\n          imgdata.shootinginfo.FocusMode = table_buf[0x2c];\n        free(table_buf);\n      }\n    }\n  }\n  else if (tag == 0x0102)\n  {\n    imSony.Quality = get4();\n  }\n  else if (tag == 0x0104)\n  {\n    imCommon.FlashEC = getreal(type);\n  }\n  else if (tag == 0x0105)\n  { // Teleconverter\n    ilm.TeleconverterID = get4();\n  }\n  else if (tag == 0x0107)\n  {\n    uitemp = get4();\n    if (uitemp == 1)\n      imgdata.shootinginfo.ImageStabilization = 0;\n    else if (uitemp == 5)\n      imgdata.shootinginfo.ImageStabilization = 1;\n    else\n      imgdata.shootinginfo.ImageStabilization = uitemp;\n  }\n  else if ((tag == 0xb0280088) && (dng_writer == nonDNG))\n  {\n    thumb_offset = get4() + base;\n  }\n  else if ((tag == 0xb0280089) && (dng_writer == nonDNG))\n  {\n    thumb_length = get4();\n  }\n  else if (((tag == 0x0114) || // CameraSettings\n            (tag == 0xb0280114)) &&\n           (len < 256000))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    switch (len)\n    {\n    case 260: // Sony a100, big endian\n      imgdata.shootinginfo.ExposureMode =\n          ((ushort)table_buf[0]) << 8 | ((ushort)table_buf[1]);\n      lid = 0x0a << 1;\n      imgdata.shootinginfo.DriveMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x0c << 1;\n      imgdata.shootinginfo.FocusMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x0d << 1;\n      imSony.AFPointSelected = table_buf[lid + 1];\n      lid = 0x0e << 1;\n      imSony.AFAreaModeSetting = table_buf[lid + 1];\n      lid = 0x12 << 1;\n      imgdata.shootinginfo.MeteringMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n\n      lid = 0x17 << 1;\n      switch ((ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1]) {\n      case 0:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 2:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_MonochromeGamma;\n        break;\n      case 5:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n\n      break;\n    case 448: // Minolta \"DYNAX 5D\" and its aliases, big endian\n      lid = 0x0a << 1;\n      imgdata.shootinginfo.ExposureMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x25 << 1;\n      imgdata.shootinginfo.MeteringMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n\n      lid = 0x2f << 1;\n      switch ((ushort)table_buf[lid] << 8 | (ushort)table_buf[lid + 1]) {\n      case 0:\n      case 1:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 2:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_MonochromeGamma;\n        break;\n      case 4:\n      case 5:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n\n      lid = 0xbd << 1;\n      imgdata.shootinginfo.ImageStabilization =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      break;\n    case 280: // a200 a300 a350 a700\n    case 364: // a850 a900\n      // CameraSettings and CameraSettings2 are big endian\n      if (table_buf[2] | table_buf[3])\n      {\n        lid = (((ushort)table_buf[2]) << 8) | ((ushort)table_buf[3]);\n        ilm.CurAp = libraw_powf64l(2.0f, ((float)lid / 8.0f - 1.0f) / 2.0f);\n      }\n      lid = 0x04 << 1;\n      imgdata.shootinginfo.DriveMode = table_buf[lid + 1];\n      lid = 0x1b << 1;\n      switch (((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1])) {\n      case 0:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 1:\n      case 5:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n      lid = 0x4d << 1;\n      imgdata.shootinginfo.FocusMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      if (!imCommon.ColorSpace ||\n          (imCommon.ColorSpace == LIBRAW_COLORSPACE_Unknown)) {\n        lid = 0x83 << 1;\n        switch (((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1])) {\n        case 6:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n          break;\n        case 5:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n          break;\n        default:\n          imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n          break;\n        }\n      }\n      break;\n    case 332: // a230 a290 a330 a380 a390\n      // CameraSettings and CameraSettings2 are big endian\n      if (table_buf[2] | table_buf[3])\n      {\n        lid = (((ushort)table_buf[2]) << 8) | ((ushort)table_buf[3]);\n        ilm.CurAp = libraw_powf64l(2.0f, ((float)lid / 8.0f - 1.0f) / 2.0f);\n      }\n      lid = 0x4d << 1;\n      imgdata.shootinginfo.FocusMode =\n          ((ushort)table_buf[lid]) << 8 | ((ushort)table_buf[lid + 1]);\n      lid = 0x7e << 1;\n      imgdata.shootinginfo.DriveMode = table_buf[lid + 1];\n      break;\n    case 1536: // a560 a580 a33 a35 a55 NEX-3 NEX-5 NEX-5C NEX-C3 NEX-VG10E\n    case 2048: // a450 a500 a550\n      // CameraSettings3 are little endian\n      switch (table_buf[0x0e]) {\n      case 1:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;\n        break;\n      case 2:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;\n        break;\n      default:\n        imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;\n        break;\n      }\n      imgdata.shootinginfo.DriveMode = table_buf[0x34];\n      parseSonyLensType2(table_buf[1016], table_buf[1015]);\n      if (ilm.LensMount != LIBRAW_MOUNT_Canon_EF)\n      {\n        switch (table_buf[153])\n        {\n        case 16:\n          ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n          break;\n        case 17:\n          ilm.LensMount = LIBRAW_MOUNT_Sony_E;\n          break;\n        }\n      }\n      break;\n    }\n    free(table_buf);\n  }\n  else if ((tag == 0x3000) && (len < 256000))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    for (int i = 0; i < 20; i++)\n      imSony.SonyDateTime[i] = table_buf[6 + i];\n    free(table_buf);\n  }\n  else if (tag == 0x0116 && len < 256000)\n  {\n    table_buf_0x0116 = (uchar *)malloc(len);\n    table_buf_0x0116_len = len;\n    fread(table_buf_0x0116, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x0116(table_buf_0x0116, table_buf_0x0116_len, ilm.CamID);\n      free(table_buf_0x0116);\n      table_buf_0x0116_len = 0;\n    }\n  }\n  else if (tag == 0x2008)\n  {\n    imSony.LongExposureNoiseReduction = get4();\n  }\n  else if (tag == 0x2009)\n  {\n    imSony.HighISONoiseReduction = get2();\n  }\n  else if (tag == 0x200a)\n  {\n    imSony.HDR[0] = get2();\n    imSony.HDR[1] = get2();\n  }\n  else if (tag == 0x2010 && len < 256000)\n  {\n    table_buf_0x2010 = (uchar *)malloc(len);\n    table_buf_0x2010_len = len;\n    fread(table_buf_0x2010, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x2010(table_buf_0x2010, table_buf_0x2010_len);\n      free(table_buf_0x2010);\n      table_buf_0x2010_len = 0;\n    }\n  }\n  else if (tag == 0x201a)\n  {\n    imSony.ElectronicFrontCurtainShutter = get4();\n  }\n  else if (tag == 0x201b)\n  {\n    if ((imSony.CameraType != LIBRAW_SONY_DSC) ||\n        (ilm.CamID == SonyID_DSC_RX10M4)   ||\n        (ilm.CamID == SonyID_DSC_RX100M6)  ||\n        (ilm.CamID == SonyID_DSC_RX100M5A) ||\n        (ilm.CamID == SonyID_DSC_RX0M2)    ||\n        (ilm.CamID == SonyID_DSC_RX100M7))\n    {\n      fread(&uc, 1, 1, ifp);\n      imgdata.shootinginfo.FocusMode = (short)uc;\n    }\n  }\n  else if (tag == 0x201c)\n  {\n    if ((imSony.CameraType != LIBRAW_SONY_DSC) ||\n        (ilm.CamID == SonyID_DSC_RX10M4)   ||\n        (ilm.CamID == SonyID_DSC_RX100M6)  ||\n        (ilm.CamID == SonyID_DSC_RX100M5A) ||\n        (ilm.CamID == SonyID_DSC_RX0M2)    ||\n        (ilm.CamID == SonyID_DSC_RX100M7))\n    {\n      imSony.AFAreaModeSetting = fgetc(ifp);\n    }\n  }\n  else if (tag == 0x201d)\n  {\n    if (((imSony.AFAreaModeSetting == 3) &&\n         ((imSony.CameraType == LIBRAW_SONY_ILCE) ||\n          (imSony.CameraType == LIBRAW_SONY_NEX) ||\n          (ilm.CamID == SonyID_DSC_RX10M4)    ||\n          (ilm.CamID == SonyID_DSC_RX100M6)   ||\n          (ilm.CamID == SonyID_DSC_RX100M5A)  ||\n          (ilm.CamID == SonyID_DSC_RX0M2)     ||\n          (ilm.CamID == SonyID_DSC_RX100M7))) ||\n        ((imSony.AFAreaModeSetting == 4) &&\n         (imSony.CameraType == LIBRAW_SONY_ILCA)))\n    {\n      imSony.FlexibleSpotPosition[0] = get2();\n      imSony.FlexibleSpotPosition[1] = get2();\n    }\n  }\n  else if (tag == 0x201e)\n  {\n    if (imSony.CameraType != LIBRAW_SONY_DSC)\n    {\n      imSony.AFPointSelected = fgetc(ifp);\n    }\n  }\n  else if (tag == 0x2020)\n  {\n    if (imSony.CameraType != LIBRAW_SONY_DSC)\n    {\n      fread(imSony.AFPointsUsed, 1, 10, ifp);\n    }\n  }\n  else if (tag == 0x2021)\n  {\n    if ((imSony.CameraType != LIBRAW_SONY_DSC) ||\n        (ilm.CamID == SonyID_DSC_RX10M4)   ||\n        (ilm.CamID == SonyID_DSC_RX100M6)  ||\n        (ilm.CamID == SonyID_DSC_RX100M5A) ||\n        (ilm.CamID == SonyID_DSC_RX0M2)    ||\n        (ilm.CamID == SonyID_DSC_RX100M7))\n    {\n      imSony.AFTracking = fgetc(ifp);\n    }\n  }\n  else if (tag == 0x2027)\n  {\n    FORC4 imSony.FocusLocation[c] = get2();\n  }\n  else if (tag == 0x2028)\n  {\n    if (get2())\n    {\n      imSony.VariableLowPassFilter = get2();\n    }\n  }\n  else if (tag == 0x2029)\n  {\n    imSony.RAWFileType = get2();\n  }\n  else if (tag == 0x202c)\n  {\n    imSony.MeteringMode2 = get2();\n  }\n  else if (tag == 0x202f)\n  {\n    imSony.PixelShiftGroupID = get4();\n    imSony.PixelShiftGroupPrefix = imSony.PixelShiftGroupID >> 22;\n    imSony.PixelShiftGroupID =\n        ((imSony.PixelShiftGroupID >> 17) & (unsigned)0x1f) *\n            (unsigned)1000000 +\n        ((imSony.PixelShiftGroupID >> 12) & (unsigned)0x1f) * (unsigned)10000 +\n        ((imSony.PixelShiftGroupID >> 6) & (unsigned)0x3f) * (unsigned)100 +\n        (imSony.PixelShiftGroupID & (unsigned)0x3f);\n\n    imSony.numInPixelShiftGroup = fgetc(ifp);\n    imSony.nShotsInPixelShiftGroup = fgetc(ifp);\n  }\n  else if (tag == 0x9050 && len < 256000)\n  { // little endian\n    table_buf_0x9050 = (uchar *)malloc(len);\n    table_buf_0x9050_len = len;\n    fread(table_buf_0x9050, len, 1, ifp);\n\n    if (ilm.CamID)\n    {\n      process_Sony_0x9050(table_buf_0x9050, table_buf_0x9050_len, ilm.CamID);\n      free(table_buf_0x9050);\n      table_buf_0x9050_len = 0;\n    }\n  }\n  else if (tag == 0x9400 && len < 256000)\n  {\n    table_buf_0x9400 = (uchar *)malloc(len);\n    table_buf_0x9400_len = len;\n    fread(table_buf_0x9400, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9400(table_buf_0x9400, table_buf_0x9400_len, unique_id);\n      free(table_buf_0x9400);\n      table_buf_0x9400_len = 0;\n    }\n  }\n  else if (tag == 0x9402 && len < 256000)\n  {\n    table_buf_0x9402 = (uchar *)malloc(len);\n    table_buf_0x9402_len = len;\n    fread(table_buf_0x9402, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9402(table_buf_0x9402, table_buf_0x9402_len);\n      free(table_buf_0x9402);\n      table_buf_0x9402_len = 0;\n    }\n  }\n  else if (tag == 0x9403 && len < 256000)\n  {\n    table_buf_0x9403 = (uchar *)malloc(len);\n    table_buf_0x9403_len = len;\n    fread(table_buf_0x9403, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9403(table_buf_0x9403, table_buf_0x9403_len);\n      free(table_buf_0x9403);\n      table_buf_0x9403_len = 0;\n    }\n  }\n  else if ((tag == 0x9405) && (len < 256000) && (len > 0x64))\n  {\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    uc = table_buf[0x0];\n    if (imCommon.real_ISO < 0.1f)\n    {\n      if ((uc == 0x25) || (uc == 0x3a) || (uc == 0x76) || (uc == 0x7e) ||\n          (uc == 0x8b) || (uc == 0x9a) || (uc == 0xb3) || (uc == 0xe1))\n      {\n        s[0] = SonySubstitution[table_buf[0x04]];\n        s[1] = SonySubstitution[table_buf[0x05]];\n        imCommon.real_ISO =\n            100.0f * libraw_powf64l(2.0f, (16 - ((float)sget2(s)) / 256.0f));\n      }\n    }\n    free(table_buf);\n  }\n  else if (tag == 0x9406 && len < 256000)\n  {\n    table_buf_0x9406 = (uchar *)malloc(len);\n    table_buf_0x9406_len = len;\n    fread(table_buf_0x9406, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x9406(table_buf_0x9406, table_buf_0x9406_len);\n      free(table_buf_0x9406);\n      table_buf_0x9406_len = 0;\n    }\n  }\n  else if (tag == 0x940c && len < 256000)\n  {\n    table_buf_0x940c = (uchar *)malloc(len);\n    table_buf_0x940c_len = len;\n    fread(table_buf_0x940c, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x940c(table_buf_0x940c, table_buf_0x940c_len);\n      free(table_buf_0x940c);\n      table_buf_0x940c_len = 0;\n    }\n  }\n  else if (tag == 0x940e && len < 256000)\n  {\n    table_buf_0x940e = (uchar *)malloc(len);\n    table_buf_0x940e_len = len;\n    fread(table_buf_0x940e, len, 1, ifp);\n    if (ilm.CamID)\n    {\n      process_Sony_0x940e(table_buf_0x940e, table_buf_0x940e_len, ilm.CamID);\n      free(table_buf_0x940e);\n      table_buf_0x940e_len = 0;\n    }\n  }\n  else if (((tag == 0xb027) || (tag == 0x010c)) && (ilm.LensID == -1))\n  {\n    ilm.LensID = get4();\n//    printf (\"==>> 1: ilm.LensID %lld\\n\", ilm.LensID);\n    if ((ilm.LensID > 0x4900) && (ilm.LensID <= 0x5900))\n    {\n      ilm.AdapterID = 0x4900;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Sigma_X3F;\n      strcpy(ilm.Adapter, \"MC-11\");\n    }\n\n    else if ((ilm.LensID > 0xef00) && (ilm.LensID < 0xffff) &&\n             (ilm.LensID != 0xff00))\n    {\n      ilm.AdapterID = 0xef00;\n      ilm.LensID -= ilm.AdapterID;\n      ilm.LensMount = LIBRAW_MOUNT_Canon_EF;\n    }\n\n    else if (((ilm.LensID != -1) && (ilm.LensID < 0xef00)) ||\n             (ilm.LensID == 0xff00))\n      ilm.LensMount = LIBRAW_MOUNT_Minolta_A;\n    /*\n        if (tag == 0x010c)\n          ilm.CameraMount = LIBRAW_MOUNT_Minolta_A;\n    */\n  }\n  else if (tag == 0xb02a && len < 256000)\n  { // Sony LensSpec\n    table_buf = (uchar *)malloc(len);\n    fread(table_buf, len, 1, ifp);\n    if ((!dng_writer) ||\n        (saneSonyCameraInfo(table_buf[1], table_buf[2], table_buf[3],\n                            table_buf[4], table_buf[5], table_buf[6])))\n    {\n      if (table_buf[1] | table_buf[2])\n        ilm.MinFocal = bcd2dec(table_buf[1]) * 100 + bcd2dec(table_buf[2]);\n      if (table_buf[3] | table_buf[4])\n        ilm.MaxFocal = bcd2dec(table_buf[3]) * 100 + bcd2dec(table_buf[4]);\n      if (table_buf[5])\n        ilm.MaxAp4MinFocal = bcd2dec(table_buf[5]) / 10.0f;\n      if (table_buf[6])\n        ilm.MaxAp4MaxFocal = bcd2dec(table_buf[6]) / 10.0f;\n      parseSonyLensFeatures(table_buf[0], table_buf[7]);\n    }\n    free(table_buf);\n  }\n  else if ((tag == 0xb02b) && !imgdata.sizes.raw_inset_crop.cwidth &&\n           (len == 2))\n  {\n    imgdata.sizes.raw_inset_crop.cheight = get4();\n    imgdata.sizes.raw_inset_crop.cwidth = get4();\n  }\n  else if (tag == 0xb041)\n  {\n    imgdata.shootinginfo.ExposureMode = get2();\n  }\n\n  // MetaVersion: (unique_id >= 286)\n}\n\nvoid LibRaw::parseSonySR2(uchar *cbuf_SR2, unsigned SR2SubIFDOffset,\n                          unsigned SR2SubIFDLength, unsigned dng_writer)\n{\n  unsigned c;\n  unsigned entries, tag_id, tag_type, tag_datalen;\n  INT64 sr2_offset, tag_offset, tag_data, tag_dataoffset;\n  int TagProcessed;\n  int tag_dataunitlen;\n  float num;\n  int i;\n  int WBCTC_count;\n#define CHECKBUFFER_N(offset,N)                                     \\\n  do                                                                \\\n  {                                                                 \\\n    if ((((offset) + (N)) > SR2SubIFDLength) || ((offset) < 0))     \\\n      return;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n  } while (0)\n\n  CHECKBUFFER_N(0, 2);\n  entries = sget2(cbuf_SR2);\n  if (entries > 1000)\n    return;\n  tag_offset = 2;\n  WBCTC_count = 0;\n  while (entries--) {\n    if (tiff_sget (SR2SubIFDOffset, cbuf_SR2, SR2SubIFDLength,\n                   &tag_offset, &tag_id, &tag_type, &tag_dataoffset,\n                   &tag_datalen, &tag_dataunitlen) == 0) {\n      TagProcessed = 0;\n      if (dng_writer == nonDNG) {\n        switch (tag_id) {\n        case 0x7300:\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 4,0);\n\t\t\tFORC4 cblack[c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          TagProcessed = 1;\n          break;\n        case 0x7303:\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 4, 0);\n\t\t\tFORC4 cam_mul[GRBG_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          TagProcessed = 1;\n          break;\n        case 0x7310:\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 4, 0);\n\t\t\tFORC4 cblack[RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          i = cblack[3];\n          FORC3 if (i > cblack[c]) i = cblack[c];\n          FORC4 cblack[c] -= i;\n          black = i;\n          TagProcessed = 1;\n          break;\n        case 0x7313:\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 4, 0);\n\t\t\tFORC4 cam_mul[RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n          TagProcessed = 1;\n          break;\n        case 0x74a0:\n\t\t\tCHECKBUFFER_N(tag_dataoffset, 4);\n\t\t\tilm.MaxAp4MaxFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x74a1:\n\t\t\tCHECKBUFFER_N(tag_dataoffset, 4);\n\t\t\tilm.MaxAp4MinFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x74a2:\n\t\t\tCHECKBUFFER_N(tag_dataoffset, 4);\n\t\t\tilm.MaxFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x74a3:\n\t\t\tCHECKBUFFER_N(tag_dataoffset, 4);\n\t\t\tilm.MinFocal = sgetreal(tag_type, cbuf_SR2 + tag_dataoffset);\n          TagProcessed = 1;\n          break;\n        case 0x7800:\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 8, 2);\n\t\t  for (i = 0; i < 3; i++)\n          {\n            num = 0.0;\n            for (c = 0; c < 3; c++)\n            {\n              imgdata.color.ccm[i][c] =\n                  (float)((short)sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * (i * 3 + c)));\n              num += imgdata.color.ccm[i][c];\n            }\n            if (num > 0.01)\n              FORC3 imgdata.color.ccm[i][c] = imgdata.color.ccm[i][c] / num;\n          }\n          TagProcessed = 1;\n          break;\n        case 0x787f:\n          if (tag_datalen == 3)\n          {\n\t\t\t  CHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 2, 2);\n\t\t\t  FORC3 imgdata.color.linear_max[c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            imgdata.color.linear_max[3] = imgdata.color.linear_max[1];\n          }\n          else if (tag_datalen == 1)\n          {\n\t\t\t  CHECKBUFFER_N(tag_dataoffset, 2);\n\t\t\t  imgdata.color.linear_max[0] = imgdata.color.linear_max[1] =\n                imgdata.color.linear_max[2] = imgdata.color.linear_max[3] =\n                    sget2(cbuf_SR2 + tag_dataoffset);\n          }\n          TagProcessed = 1;\n          break;\n        }\n      }\n\n      if (!TagProcessed) {\n        if ((tag_id >= 0x7480) && (tag_id <= 0x7486)) {\n          i = tag_id - 0x7480;\n          if (Sony_SR2_wb_list[i] > 255) {\n            icWBCCTC[WBCTC_count][0] = Sony_SR2_wb_list[i];\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 2, 2);\n\t\t\tFORC3 icWBCCTC[WBCTC_count][c + 1] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBCCTC[WBCTC_count][4] = icWBCCTC[WBCTC_count][2];\n            WBCTC_count++;\n          } else {\n\t\t\t  CHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 2, 2);\n\t\t\t  FORC3 icWBC[Sony_SR2_wb_list[i]][c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBC[Sony_SR2_wb_list[i]][3] = icWBC[Sony_SR2_wb_list[i]][1];\n          }\n        } else if ((tag_id >= 0x7820) && (tag_id <= 0x782d)) {\n          i = tag_id - 0x7820;\n          if (Sony_SR2_wb_list1[i] > 255) {\n            icWBCCTC[WBCTC_count][0] = Sony_SR2_wb_list1[i];\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 2, 2);\n\t\t\tFORC3 icWBCCTC[WBCTC_count][c + 1] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBCCTC[WBCTC_count][4] = icWBCCTC[WBCTC_count][2];\n            if (Sony_SR2_wb_list1[i] == 3200) {\n              FORC3 icWBC[LIBRAW_WBI_StudioTungsten][c] = icWBCCTC[WBCTC_count][c + 1];\n              icWBC[LIBRAW_WBI_StudioTungsten][3] = icWBC[LIBRAW_WBI_StudioTungsten][1];\n            }\n            WBCTC_count++;\n          } else {\n\t\t\t  CHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 2, 2);\n\t\t\t  FORC3 icWBC[Sony_SR2_wb_list1[i]][c] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n            icWBC[Sony_SR2_wb_list1[i]][3] = icWBC[Sony_SR2_wb_list1[i]][1];\n          }\n        } else if (tag_id == 0x7302) {\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 3, 2);\n\t\t\tFORC4 icWBC[LIBRAW_WBI_Auto][GRBG_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n        } else if (tag_id == 0x7312) {\n\t\t\tCHECKBUFFER_N(tag_dataoffset + tag_dataunitlen * 3, 2);\n\t\t\tFORC4 icWBC[LIBRAW_WBI_Auto][RGGB_2_RGBG(c)] = sget2(cbuf_SR2 + tag_dataoffset + tag_dataunitlen * c);\n        }\n      }\n    }\n  }\n}\n#undef CHECKBUFFER_N\n\nvoid LibRaw::parseSonySRF(unsigned len)\n{\n\n  if ((len > 0xfffff) || (len == 0))\n    return;\n\n  INT64 save = ftell(ifp);\n  INT64 offset =\n      0x0310c0 - save; /* for non-DNG this value normally is 0x8ddc */\n  if (len < offset || offset < 0)\n    return;\n  INT64 decrypt_len = offset >> 2; /* master key offset value is the next\n                                      un-encrypted metadata field after SRF0 */\n\n  unsigned i, nWB;\n  unsigned MasterKey, SRF2Key, RawDataKey;\n  INT64 srf_offset, tag_offset, tag_data, tag_dataoffset;\n  int tag_dataunitlen;\n  uchar *srf_buf;\n  ushort entries;\n  unsigned tag_id, tag_type, tag_datalen;\n\n  srf_buf = (uchar *)malloc(len+64);\n  fread(srf_buf, len, 1, ifp);\n\n  offset += srf_buf[offset] << 2;\n\n#define CHECKBUFFER_SGET4(offset)                                              \\\n  do                                                                           \\\n  {                                                                            \\\n    if ((((offset) + 4) > len) || ((offset) < 0))                              \\\n      goto restore_after_parseSonySRF;                                         \\\n  } while (0)\n\n#define CHECKBUFFER_SGET2(offset)                                              \\\n  do                                                                           \\\n  {                                                                            \\\n    if ( ((offset + 2) > len) || ((offset) < 0))                               \\\n      goto restore_after_parseSonySRF;                                         \\\n  } while (0)\n\n  CHECKBUFFER_SGET4(offset);\n\n  /* master key is stored in big endian */\n  MasterKey = ((unsigned)srf_buf[offset] << 24) |\n              ((unsigned)srf_buf[offset + 1] << 16) |\n              ((unsigned)srf_buf[offset + 2] << 8) |\n              (unsigned)srf_buf[offset + 3];\n\n  /* skip SRF0 */\n  srf_offset = 0;\n  CHECKBUFFER_SGET2(srf_offset);\n  entries = sget2(srf_buf + srf_offset);\n  if (entries > 1000)\n    goto restore_after_parseSonySRF;\n  offset = srf_offset + 2;\n  CHECKBUFFER_SGET4(offset);\n  CHECKBUFFER_SGET4(offset + 12 * entries);\n  srf_offset = sget4(srf_buf + offset + 12 * entries) -\n               save; /* SRF0 ends with SRF1 abs. position */\n\n  /* get SRF1, it has fixed 40 bytes length and contains keys to decode metadata\n   * and raw data */\n  if (srf_offset < 0 || decrypt_len < srf_offset / 4)\n    goto restore_after_parseSonySRF;\n  sony_decrypt((unsigned *)(srf_buf + srf_offset), decrypt_len - srf_offset / 4,\n               1, MasterKey);\n  CHECKBUFFER_SGET2(srf_offset);\n  entries = sget2(srf_buf + srf_offset);\n  if (entries > 1000)\n    goto restore_after_parseSonySRF;\n  offset = srf_offset + 2;\n  tag_offset = offset;\n\n  while (entries--) {\n    if (tiff_sget (save, srf_buf, len,\n                   &tag_offset, &tag_id, &tag_type, &tag_dataoffset,\n                   &tag_datalen, &tag_dataunitlen) == 0) {\n      if (tag_id == 0x0000) {\n\t\t  CHECKBUFFER_SGET4(tag_dataoffset);\n\t\t  SRF2Key = sget4(srf_buf + tag_dataoffset);\n      } else if (tag_id == 0x0001) {\n\t\t  CHECKBUFFER_SGET4(tag_dataoffset);\n\t\t  RawDataKey = sget4(srf_buf + tag_dataoffset);\n      }\n    } else goto restore_after_parseSonySRF;\n  }\n  offset = tag_offset;\n\n  /* get SRF2 */\n  CHECKBUFFER_SGET4(offset);\n  srf_offset =\n      sget4(srf_buf + offset) - save; /* SRFn ends with SRFn+1 position */\n  if (srf_offset < 0 || decrypt_len < srf_offset / 4)\n    goto restore_after_parseSonySRF;\n  sony_decrypt((unsigned *)(srf_buf + srf_offset), decrypt_len - srf_offset / 4,\n               1, SRF2Key);\n  CHECKBUFFER_SGET2(srf_offset);\n  entries = sget2(srf_buf + srf_offset);\n  if (entries > 1000)\n    goto restore_after_parseSonySRF;\n  offset = srf_offset + 2;\n  tag_offset = offset;\n\n  while (entries--) {\n\t  if (tiff_sget(save, srf_buf, len,\n                   &tag_offset, &tag_id, &tag_type, &tag_dataoffset,\n                   &tag_datalen, &tag_dataunitlen) == 0) {\n      if ((tag_id >= 0x00c0) && (tag_id <= 0x00ce)) {\n        i = (tag_id - 0x00c0) % 3;\n        nWB = (tag_id - 0x00c0) / 3;\n\t\tCHECKBUFFER_SGET4(tag_dataoffset);\n\t\ticWBC[Sony_SRF_wb_list[nWB]][i] = sget4(srf_buf + tag_dataoffset);\n        if (i == 1) {\n          icWBC[Sony_SRF_wb_list[nWB]][3] =\n            icWBC[Sony_SRF_wb_list[nWB]][i];\n        }\n      } else if ((tag_id >= 0x00d0) && (tag_id <= 0x00d2)) {\n        i = (tag_id - 0x00d0) % 3;\n\t\tCHECKBUFFER_SGET4(tag_dataoffset);\n\t\tcam_mul[i] = sget4(srf_buf + tag_dataoffset);\n        if (i == 1) {\n          cam_mul[3] = cam_mul[i];\n        }\n      } else switch (tag_id) {\n        /*\n        0x0002  SRF6Offset\n        0x0003  SRFDataOffset (?)\n        0x0004  RawDataOffset\n        0x0005  RawDataLength\n        */\n      case 0x0043:\n\t\t  CHECKBUFFER_SGET4(tag_dataoffset); // need to add extra space\n\t\t  ilm.MaxAp4MaxFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      case 0x0044:\n\t\t  CHECKBUFFER_SGET4(tag_dataoffset);\n\t\t  ilm.MaxAp4MinFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      case 0x0045:\n\t\t  CHECKBUFFER_SGET4(tag_dataoffset);\n\t\t  ilm.MinFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      case 0x0046:\n\t\t  CHECKBUFFER_SGET4(tag_dataoffset);\n\t\t  ilm.MaxFocal = sgetreal(tag_type, srf_buf + tag_dataoffset);\n        break;\n      }\n    } else goto restore_after_parseSonySRF;\n  }\n  offset = tag_offset;\n\nrestore_after_parseSonySRF:\n  free(srf_buf);\n  fseek(ifp, save, SEEK_SET);\n#undef CHECKBUFFER_SGET4\n#undef CHECKBUFFER_SGET2\n}\n"], "filenames": ["src/metadata/sony.cpp"], "buggy_code_start_loc": [1801], "buggy_code_end_loc": [2057], "fixing_code_start_loc": [1802], "fixing_code_end_loc": [2091], "type": "CWE-125", "message": "In LibRaw, there is an out-of-bounds read vulnerability within the \"LibRaw::parseSonySRF()\" function (libraw\\src\\metadata\\sony.cpp) when processing srf files.", "other": {"cve": {"id": "CVE-2020-35535", "sourceIdentifier": "secalert@redhat.com", "published": "2022-09-01T18:15:09.027", "lastModified": "2022-09-07T17:33:56.630", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In LibRaw, there is an out-of-bounds read vulnerability within the \"LibRaw::parseSonySRF()\" function (libraw\\src\\metadata\\sony.cpp) when processing srf files."}, {"lang": "es", "value": "En LibRaw, se presenta una vulnerabilidad de lectura fuera de l\u00edmites dentro de la funci\u00f3n \"LibRaw::parseSonySRF()\" (libraw\\src\\metadata\\sony.cpp) cuando son procesados archivos srf"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:libraw:libraw:0.20.0:-:*:*:*:*:*:*", "matchCriteriaId": "E00F0C8F-11AC-42B2-8D85-27028B41EBF3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:libraw:libraw:0.20.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "B4B8669B-CE7F-47D2-9111-E7787EAD6E7E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:libraw:libraw:0.20.1:*:*:*:*:*:*:*", "matchCriteriaId": "8269B02E-558F-4AA5-9EEA-87226A3D1816"}, {"vulnerable": true, "criteria": "cpe:2.3:a:libraw:libraw:0.20.2:*:*:*:*:*:*:*", "matchCriteriaId": "06DBABB8-8921-4E8B-B9E5-FFE6CCE79EB9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:libraw:libraw:0.21.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "36C296E2-1899-457B-9EB2-916A33E383C2"}]}]}], "references": [{"url": "https://github.com/LibRaw/LibRaw/commit/c243f4539233053466c1309bde606815351bee81", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/LibRaw/LibRaw/issues/283", "source": "secalert@redhat.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LibRaw/LibRaw/commit/c243f4539233053466c1309bde606815351bee81"}}