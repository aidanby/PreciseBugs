{"buggy_code": ["--\n-- (C) 2013-17 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('text/html; charset=iso-8859-1')\n\nif(haveAdminPrivileges()) then\n   username = _GET[\"username\"]\n   full_name = _GET[\"full_name\"]\n   password = _GET[\"password\"]\n   confirm_password = _GET[\"confirm_password\"]\n   host_role = _GET[\"host_role\"]\n   networks = _GET[\"allowed_networks\"]\n   allowed_interface = _GET[\"allowed_interface\"]\n   \n   if(username == nil or full_name == nil or password == nil or confirm_password == nil or host_role == nil or networks == nil or allowed_interface == nil) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Invalid parameters\\\" }\")\n      return\n   end\n   \n   if(password ~= confirm_password) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Passwords do not match: typo?\\\" }\")\n      return\n   end\n   \n   if(ntop.addUser(username, full_name, password, host_role, networks, getInterfaceName(allowed_interface))) then\n      print (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"User added successfully\\\" }\")\n   else\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error while adding new user\\\" }\")\n   end\nend\n", "--\n-- (C) 2013 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('application/json')\n\nusername = _GET[\"username\"]\nhost_role = _GET[\"host_role\"]\nnetworks = _GET[\"networks\"]\nallowed_interface = _GET[\"allowed_interface\"]\n\nif(username == nil) then   \n    print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in username\\\" }\")\n    return\nend\n\nif(host_role ~= nil) then\n  if(not ntop.changeUserRole(username, host_role)) then\n    print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in changing host type\\\" }\")\n    return\n  end\nend\n\nif(networks ~= nil) then\n  if(not ntop.changeAllowedNets(username, networks)) then\n    print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in changing allowed networks\\\" }\")\n    return \n  end\nend\n\nif(allowed_interface ~= nil) then\n   if(not ntop.changeAllowedIfname(username, getInterfaceName(allowed_interface))) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in changing the allowed interface\\\" }\")\n      return \n   end\nend\n\nprint (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"Parameters Updated\\\" }\")\n", "--\n-- (C) 2013 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('text/html; charset=iso-8859-1')\n\nif(haveAdminPrivileges()) then\n   username = _GET[\"username\"]\n   \n   if(username == nil) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Invalid parameters\\\" }\")\n      return\n   end\n   \n   if(ntop.deleteUser(username)) then\n      print (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"User deleted successfully\\\" }\")\n   else\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error deleting user\\\" }\")\n   end\nend\n", "--\n-- (C) 2013 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('text/html; charset=iso-8859-1')\n\nusername = _GET[\"username\"]\nold_password = _GET[\"old_password\"]\nnew_password = _GET[\"new_password\"]\nconfirm_new_password = _GET[\"confirm_new_password\"]\n\nuser_group = ntop.getUserGroup()\nif(user_group == \"administrator\") then\n   old_password = \"\"\nelse\n   -- Check to avoid that this user changes password for other users\n   username = _COOKIE[\"user\"]\nend\n\nif((username == nil) or (old_password == nil) or (new_password == nil) or (confirm_new_password == nil)) then\n   print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Invalid parameters\\\" }\")\n   return\nend\n\nif(new_password ~= confirm_new_password) then\n   print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Password don't match\\\" }\")\n   return\nend\n\nif(ntop.resetUserPassword(_SESSION[\"user\"], username, old_password, new_password)) then\n   print (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"Password changed successfully\\\" }\")\nelse\n   print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Unable to set the new user password: perhaps the old password was invalid ?\\\" }\")\nend\n"], "fixing_code": ["--\n-- (C) 2013-17 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('text/html; charset=iso-8859-1')\n\nif(_GET[\"csrf\"] ~= nil) then\nif(haveAdminPrivileges()) then\n   username = _GET[\"username\"]\n   full_name = _GET[\"full_name\"]\n   password = _GET[\"password\"]\n   confirm_password = _GET[\"confirm_password\"]\n   host_role = _GET[\"host_role\"]\n   networks = _GET[\"allowed_networks\"]\n   allowed_interface = _GET[\"allowed_interface\"]\n   \n   if(username == nil or full_name == nil or password == nil or confirm_password == nil or host_role == nil or networks == nil or allowed_interface == nil) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Invalid parameters\\\" }\")\n      return\n   end\n   \n   if(password ~= confirm_password) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Passwords do not match: typo?\\\" }\")\n      return\n   end\n   \n   if(ntop.addUser(username, full_name, password, host_role, networks, getInterfaceName(allowed_interface))) then\n      print (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"User added successfully\\\" }\")\n   else\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error while adding new user\\\" }\")\n   end\nend\nend", "--\n-- (C) 2013 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('application/json')\n\nif(_GET[\"csrf\"] ~= nil) then\nusername = _GET[\"username\"]\nhost_role = _GET[\"host_role\"]\nnetworks = _GET[\"networks\"]\nallowed_interface = _GET[\"allowed_interface\"]\n\nif(username == nil) then   \n    print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in username\\\" }\")\n    return\nend\n\nif(host_role ~= nil) then\n  if(not ntop.changeUserRole(username, host_role)) then\n    print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in changing host type\\\" }\")\n    return\n  end\nend\n\nif(networks ~= nil) then\n  if(not ntop.changeAllowedNets(username, networks)) then\n    print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in changing allowed networks\\\" }\")\n    return \n  end\nend\n\nif(allowed_interface ~= nil) then\n   if(not ntop.changeAllowedIfname(username, getInterfaceName(allowed_interface))) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error in changing the allowed interface\\\" }\")\n      return \n   end\nend\n\nprint (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"Parameters Updated\\\" }\")\nend", "--\n-- (C) 2013 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('text/html; charset=iso-8859-1')\n\nif(_GET[\"csrf\"] ~= nil) then\nif(haveAdminPrivileges()) then\n   username = _GET[\"username\"]\n   \n   if(username == nil) then\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Invalid parameters\\\" }\")\n      return\n   end\n   \n   if(ntop.deleteUser(username)) then\n      print (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"User deleted successfully\\\" }\")\n   else\n      print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Error deleting user\\\" }\")\n   end\nend\nend", "--\n-- (C) 2013 - ntop.org\n--\n\ndirs = ntop.getDirs()\npackage.path = dirs.installdir .. \"/scripts/lua/modules/?.lua;\" .. package.path\nrequire \"lua_utils\"\n\nsendHTTPHeader('text/html; charset=iso-8859-1')\n\nif(_GET[\"csrf\"] ~= nil) then\nusername = _GET[\"username\"]\nold_password = _GET[\"old_password\"]\nnew_password = _GET[\"new_password\"]\nconfirm_new_password = _GET[\"confirm_new_password\"]\n\nuser_group = ntop.getUserGroup()\nif(user_group == \"administrator\") then\n   old_password = \"\"\nelse\n   -- Check to avoid that this user changes password for other users\n   username = _COOKIE[\"user\"]\nend\n\nif((username == nil) or (old_password == nil) or (new_password == nil) or (confirm_new_password == nil)) then\n   print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Invalid parameters\\\" }\")\n   return\nend\n\nif(new_password ~= confirm_new_password) then\n   print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Password don't match\\\" }\")\n   return\nend\n\nif(ntop.resetUserPassword(_SESSION[\"user\"], username, old_password, new_password)) then\n   print (\"{ \\\"result\\\" : 0, \\\"message\\\" : \\\"Password changed successfully\\\" }\")\nelse\n   print (\"{ \\\"result\\\" : -1, \\\"message\\\" : \\\"Unable to set the new user password: perhaps the old password was invalid ?\\\" }\")\nend\nend"], "filenames": ["scripts/lua/admin/add_user.lua", "scripts/lua/admin/change_user_prefs.lua", "scripts/lua/admin/delete_user.lua", "scripts/lua/admin/password_reset.lua"], "buggy_code_start_loc": [10, 10, 10, 10], "buggy_code_end_loc": [35, 42, 24, 38], "fixing_code_start_loc": [11, 11, 11, 11], "fixing_code_end_loc": [38, 45, 27, 41], "type": "CWE-352", "message": "Cross-site request forgery (CSRF) vulnerability in ntopng through 2.4 allows remote attackers to hijack the authentication of arbitrary users, as demonstrated by admin/add_user.lua, admin/change_user_prefs.lua, admin/delete_user.lua, and admin/password_reset.lua.", "other": {"cve": {"id": "CVE-2017-5473", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-14T07:59:00.183", "lastModified": "2017-09-02T01:29:02.590", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site request forgery (CSRF) vulnerability in ntopng through 2.4 allows remote attackers to hijack the authentication of arbitrary users, as demonstrated by admin/add_user.lua, admin/change_user_prefs.lua, admin/delete_user.lua, and admin/password_reset.lua."}, {"lang": "es", "value": "Vulnerabilidad de CSRF en ntopng hasta la versi\u00f3n 2.4 permite a atacantes remotos secuestrar la autenticaci\u00f3n de usuarios arbitrarios, seg\u00fan lo demostrado por admin/add_user.lua, admin/change_user_prefs.lua, admin/delete_user.lua y admin/password_reset.lua."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ntop:ntopng:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.4", "matchCriteriaId": "553EDC87-EF7A-4FD1-9CA0-447B22340CC7"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/95654", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/ntop/ntopng/commit/1b2ceac8f578a246af6351c4f476e3102cdf21b3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/ntop/ntopng/commit/f91fbe3d94c8346884271838ae3406ae633f6f15", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/41141/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/ntop/ntopng/commit/1b2ceac8f578a246af6351c4f476e3102cdf21b3"}}