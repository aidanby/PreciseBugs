{"buggy_code": ["<?php\n/**\n * @file controllers/grid/users/reviewer/form/ReviewerNotifyActionForm.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class ReviewerNotifyActionForm\n * @ingroup controllers_grid_users_reviewer_form\n *\n * @brief Perform an action on a review including a reviewer notification email.\n */\n\nimport('lib.pkp.classes.form.Form');\n\nabstract class ReviewerNotifyActionForm extends Form {\n\t/** The review assignment to alter */\n\tvar $_reviewAssignment;\n\n\t/** The submission associated with the review assignment **/\n\tvar $_submission;\n\n\t/** The review round associated with the review assignment **/\n\tvar $_reviewRound;\n\n\t/**\n\t * Constructor\n\t * @param $reviewAssignment ReviewAssignment\n\t * @param $reviewRound ReviewRound\n\t * @param $submission Submission\n\t * @param $template string\n\t */\n\tpublic function __construct($reviewAssignment, $reviewRound, $submission, $template) {\n\t\t$this->setReviewAssignment($reviewAssignment);\n\t\t$this->setReviewRound($reviewRound);\n\t\t$this->setSubmission($submission);\n\t\tparent::__construct($template);\n\t}\n\n\tprotected abstract function getEmailKey();\n\n\t//\n\t// Overridden template methods\n\t//\n\t/**\n\t * @copydoc Form::initData\n\t */\n\tpublic function initData() {\n\t\t$request = Application::get()->getRequest();\n\t\t$context = $request->getContext();\n\t\t$submission = $this->getSubmission();\n\t\t$reviewAssignment = $this->getReviewAssignment();\n\t\t$reviewRound = $this->getReviewRound();\n\t\t$reviewerId = $reviewAssignment->getReviewerId();\n\n\t\t$this->setData(array(\n\t\t\t'submissionId' => $submission->getId(),\n\t\t\t'stageId' => $reviewRound->getStageId(),\n\t\t\t'reviewRoundId' => $reviewRound->getId(),\n\t\t\t'reviewAssignmentId' => $reviewAssignment->getId(),\n\t\t\t'dateConfirmed' => $reviewAssignment->getDateConfirmed(),\n\t\t\t'reviewerId' => $reviewerId,\n\t\t));\n\n\t\timport('lib.pkp.classes.mail.SubmissionMailTemplate');\n\t\t$template = new SubmissionMailTemplate($submission, $this->getEmailKey());\n\t\tif ($template) {\n\t\t\t$userDao = DAORegistry::getDAO('UserDAO'); /* @var $userDao UserDAO */\n\t\t\t$reviewer = $userDao->getById($reviewerId);\n\t\t\t$user = $request->getUser();\n\n\t\t\t$template->assignParams([\n\t\t\t\t'reviewerName' => htmlspecialchars($reviewer->getFullName()),\n\t\t\t\t'signatureFullName' => htmlspecialchars($user->getFullname()),\n\t\t\t]);\n\t\t\t$template->replaceParams();\n\n\t\t\t$this->setData('personalMessage', $template->getBody());\n\t\t}\n\t}\n\n\t/**\n\t * @copydoc Form::execute()\n\t * @return bool whether or not the review assignment was modified successfully\n\t */\n\tpublic function execute(...$functionArgs) {\n\t\t$request = Application::get()->getRequest();\n\t\t$submission = $this->getSubmission();\n\t\t$reviewAssignment = $this->getReviewAssignment();\n\n\t\t// Notify the reviewer via email.\n\t\timport('lib.pkp.classes.mail.SubmissionMailTemplate');\n\t\t$mail = new SubmissionMailTemplate($submission, $this->getEmailKey(), null, null, false);\n\n\t\tif ($mail->isEnabled() && !$this->getData('skipEmail')) {\n\t\t\t$userDao = DAORegistry::getDAO('UserDAO'); /* @var $userDao UserDAO */\n\t\t\t$reviewerId = (int) $this->getData('reviewerId');\n\t\t\t$reviewer = $userDao->getById($reviewerId);\n\t\t\t$mail->addRecipient($reviewer->getEmail(), $reviewer->getFullName());\n\t\t\t$mail->setBody($this->getData('personalMessage'));\n\t\t\t$mail->assignParams();\n\t\t\tif (!$mail->send($request)) {\n\t\t\t\timport('classes.notification.NotificationManager');\n\t\t\t\t$notificationMgr = new NotificationManager();\n\t\t\t\t$notificationMgr->createTrivialNotification($request->getUser()->getId(), NOTIFICATION_TYPE_ERROR, array('contents' => __('email.compose.error')));\n\t\t\t}\n\t\t}\n\t\tparent::execute(...$functionArgs);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @copydoc Form::readInputData()\n\t */\n\tpublic function readInputData() {\n\t\t$this->readUserVars(array(\n\t\t\t'personalMessage',\n\t\t\t'reviewAssignmentId',\n\t\t\t'reviewRoundId',\n\t\t\t'reviewerId',\n\t\t\t'skipEmail',\n\t\t\t'stageId',\n\t\t\t'submissionId',\n\t\t));\n\t}\n\n\t//\n\t// Getters and Setters\n\t//\n\t/**\n\t * Set the ReviewAssignment\n\t * @param mixed $reviewAssignment ReviewAssignment\n\t */\n\tpublic function setReviewAssignment($reviewAssignment) {\n\t\t$this->_reviewAssignment = $reviewAssignment;\n\t}\n\n\t/**\n\t * Get the ReviewAssignment\n\t * @return ReviewAssignment\n\t */\n\tpublic function getReviewAssignment() {\n\t\treturn $this->_reviewAssignment;\n\t}\n\n\t/**\n\t * Set the ReviewRound\n\t * @param mixed $reviewRound ReviewRound\n\t */\n\tpublic function setReviewRound($reviewRound) {\n\t\t$this->_reviewRound = $reviewRound;\n\t}\n\n\t/**\n\t * Get the ReviewRound\n\t * @return ReviewRound\n\t */\n\tpublic function getReviewRound() {\n\t\treturn $this->_reviewRound;\n\t}\n\n\t/**\n\t * Set the submission\n\t * @param $submission Submission\n\t */\n\tpublic function setSubmission($submission) {\n\t\t$this->_submission = $submission;\n\t}\n\n\t/**\n\t * Get the submission\n\t * @return Submission\n\t */\n\tpublic function getSubmission() {\n\t\treturn $this->_submission;\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * @file controllers/grid/users/reviewer/form/ReviewerNotifyActionForm.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class ReviewerNotifyActionForm\n * @ingroup controllers_grid_users_reviewer_form\n *\n * @brief Perform an action on a review including a reviewer notification email.\n */\n\nimport('lib.pkp.classes.form.Form');\n\nabstract class ReviewerNotifyActionForm extends Form {\n\t/** The review assignment to alter */\n\tvar $_reviewAssignment;\n\n\t/** The submission associated with the review assignment **/\n\tvar $_submission;\n\n\t/** The review round associated with the review assignment **/\n\tvar $_reviewRound;\n\n\t/**\n\t * Constructor\n\t * @param $reviewAssignment ReviewAssignment\n\t * @param $reviewRound ReviewRound\n\t * @param $submission Submission\n\t * @param $template string\n\t */\n\tpublic function __construct($reviewAssignment, $reviewRound, $submission, $template) {\n\t\t$this->setReviewAssignment($reviewAssignment);\n\t\t$this->setReviewRound($reviewRound);\n\t\t$this->setSubmission($submission);\n\n\t\t$this->addCheck(new FormValidatorCSRF($this));\n\n\t\tparent::__construct($template);\n\t}\n\n\tprotected abstract function getEmailKey();\n\n\t//\n\t// Overridden template methods\n\t//\n\t/**\n\t * @copydoc Form::initData\n\t */\n\tpublic function initData() {\n\t\t$request = Application::get()->getRequest();\n\t\t$context = $request->getContext();\n\t\t$submission = $this->getSubmission();\n\t\t$reviewAssignment = $this->getReviewAssignment();\n\t\t$reviewRound = $this->getReviewRound();\n\t\t$reviewerId = $reviewAssignment->getReviewerId();\n\n\t\t$this->setData(array(\n\t\t\t'submissionId' => $submission->getId(),\n\t\t\t'stageId' => $reviewRound->getStageId(),\n\t\t\t'reviewRoundId' => $reviewRound->getId(),\n\t\t\t'reviewAssignmentId' => $reviewAssignment->getId(),\n\t\t\t'dateConfirmed' => $reviewAssignment->getDateConfirmed(),\n\t\t\t'reviewerId' => $reviewerId,\n\t\t));\n\n\t\timport('lib.pkp.classes.mail.SubmissionMailTemplate');\n\t\t$template = new SubmissionMailTemplate($submission, $this->getEmailKey());\n\t\tif ($template) {\n\t\t\t$userDao = DAORegistry::getDAO('UserDAO'); /* @var $userDao UserDAO */\n\t\t\t$reviewer = $userDao->getById($reviewerId);\n\t\t\t$user = $request->getUser();\n\n\t\t\t$template->assignParams([\n\t\t\t\t'reviewerName' => htmlspecialchars($reviewer->getFullName()),\n\t\t\t\t'signatureFullName' => htmlspecialchars($user->getFullname()),\n\t\t\t]);\n\t\t\t$template->replaceParams();\n\n\t\t\t$this->setData('personalMessage', $template->getBody());\n\t\t}\n\t}\n\n\t/**\n\t * @copydoc Form::execute()\n\t * @return bool whether or not the review assignment was modified successfully\n\t */\n\tpublic function execute(...$functionArgs) {\n\t\t$request = Application::get()->getRequest();\n\t\t$submission = $this->getSubmission();\n\t\t$reviewAssignment = $this->getReviewAssignment();\n\n\t\t// Notify the reviewer via email.\n\t\timport('lib.pkp.classes.mail.SubmissionMailTemplate');\n\t\t$mail = new SubmissionMailTemplate($submission, $this->getEmailKey(), null, null, false);\n\n\t\tif ($mail->isEnabled() && !$this->getData('skipEmail')) {\n\t\t\t$userDao = DAORegistry::getDAO('UserDAO'); /* @var $userDao UserDAO */\n\t\t\t$reviewerId = (int) $this->getData('reviewerId');\n\t\t\t$reviewer = $userDao->getById($reviewerId);\n\t\t\t$mail->addRecipient($reviewer->getEmail(), $reviewer->getFullName());\n\t\t\t$mail->setBody($this->getData('personalMessage'));\n\t\t\t$mail->assignParams();\n\t\t\tif (!$mail->send($request)) {\n\t\t\t\timport('classes.notification.NotificationManager');\n\t\t\t\t$notificationMgr = new NotificationManager();\n\t\t\t\t$notificationMgr->createTrivialNotification($request->getUser()->getId(), NOTIFICATION_TYPE_ERROR, array('contents' => __('email.compose.error')));\n\t\t\t}\n\t\t}\n\t\tparent::execute(...$functionArgs);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @copydoc Form::readInputData()\n\t */\n\tpublic function readInputData() {\n\t\t$this->readUserVars(array(\n\t\t\t'personalMessage',\n\t\t\t'reviewAssignmentId',\n\t\t\t'reviewRoundId',\n\t\t\t'reviewerId',\n\t\t\t'skipEmail',\n\t\t\t'stageId',\n\t\t\t'submissionId',\n\t\t));\n\t}\n\n\t//\n\t// Getters and Setters\n\t//\n\t/**\n\t * Set the ReviewAssignment\n\t * @param mixed $reviewAssignment ReviewAssignment\n\t */\n\tpublic function setReviewAssignment($reviewAssignment) {\n\t\t$this->_reviewAssignment = $reviewAssignment;\n\t}\n\n\t/**\n\t * Get the ReviewAssignment\n\t * @return ReviewAssignment\n\t */\n\tpublic function getReviewAssignment() {\n\t\treturn $this->_reviewAssignment;\n\t}\n\n\t/**\n\t * Set the ReviewRound\n\t * @param mixed $reviewRound ReviewRound\n\t */\n\tpublic function setReviewRound($reviewRound) {\n\t\t$this->_reviewRound = $reviewRound;\n\t}\n\n\t/**\n\t * Get the ReviewRound\n\t * @return ReviewRound\n\t */\n\tpublic function getReviewRound() {\n\t\treturn $this->_reviewRound;\n\t}\n\n\t/**\n\t * Set the submission\n\t * @param $submission Submission\n\t */\n\tpublic function setSubmission($submission) {\n\t\t$this->_submission = $submission;\n\t}\n\n\t/**\n\t * Get the submission\n\t * @return Submission\n\t */\n\tpublic function getSubmission() {\n\t\treturn $this->_submission;\n\t}\n}\n"], "filenames": ["controllers/grid/users/reviewer/form/ReviewerNotifyActionForm.inc.php"], "buggy_code_start_loc": [37], "buggy_code_end_loc": [37], "fixing_code_start_loc": [38], "fixing_code_end_loc": [41], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/pkp-lib prior to 3.3.0-16.", "other": {"cve": {"id": "CVE-2023-5898", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-01T01:15:08.003", "lastModified": "2023-11-08T00:26:06.370", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository pkp/pkp-lib prior to 3.3.0-16."}, {"lang": "es", "value": "Cross-Site Request Forgery (CSRF) en el repositorio de GitHub pkp/pkp-lib anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pkp:pkp_web_application_library:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-16", "matchCriteriaId": "620A9B67-F772-49B8-87D8-001DCD83FA6E"}]}]}], "references": [{"url": "https://github.com/pkp/pkp-lib/commit/01feef7a9392d314bf75b97a7e099cf0a307acd9", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/19801d12-b8ad-45e7-86e1-8f0230667c9e", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/pkp-lib/commit/01feef7a9392d314bf75b97a7e099cf0a307acd9"}}