{"buggy_code": ["/**\n * @author Cynser\n * @author n1474335 [n1474335@gmail.com]\n * @copyright Crown Copyright 2018\n * @license Apache-2.0\n */\n\nimport Operation from \"../Operation\";\nimport Utils from \"../Utils\";\nimport cptable from \"../vendor/js-codepage/cptable.js\";\nimport {IO_FORMAT} from \"../lib/ChrEnc\";\n\n/**\n * Text Encoding Brute Force operation\n */\nclass TextEncodingBruteForce extends Operation {\n\n    /**\n     * TextEncodingBruteForce constructor\n     */\n    constructor() {\n        super();\n\n        this.name = \"Text Encoding Brute Force\";\n        this.module = \"Encodings\";\n        this.description = [\n            \"Enumerates all supported text encodings for the input, allowing you to quickly spot the correct one.\",\n            \"<br><br>\",\n            \"Supported charsets are:\",\n            \"<ul>\",\n            Object.keys(IO_FORMAT).map(e => `<li>${e}</li>`).join(\"\\n\"),\n            \"</ul>\"\n        ].join(\"\\n\");\n        this.infoURL = \"https://wikipedia.org/wiki/Character_encoding\";\n        this.inputType = \"string\";\n        this.outputType = \"json\";\n        this.presentType = \"html\";\n        this.args = [\n            {\n                name: \"Mode\",\n                type: \"option\",\n                value: [\"Encode\", \"Decode\"]\n            }\n        ];\n    }\n\n    /**\n     * @param {string} input\n     * @param {Object[]} args\n     * @returns {json}\n     */\n    run(input, args) {\n        const output = {},\n            charsets = Object.keys(IO_FORMAT),\n            mode = args[0];\n\n        charsets.forEach(charset => {\n            try {\n                if (mode === \"Decode\") {\n                    output[charset] = cptable.utils.decode(IO_FORMAT[charset], input);\n                } else {\n                    output[charset] = Utils.arrayBufferToStr(cptable.utils.encode(IO_FORMAT[charset], input));\n                }\n            } catch (err) {\n                output[charset] = \"Could not decode.\";\n            }\n        });\n\n        return output;\n    }\n\n    /**\n     * Displays the encodings in an HTML table for web apps.\n     *\n     * @param {Object[]} encodings\n     * @returns {html}\n     */\n    present(encodings) {\n        let table = \"<table class='table table-hover table-sm table-bordered table-nonfluid'><tr><th>Encoding</th><th>Value</th></tr>\";\n\n        for (const enc in encodings) {\n            const value = Utils.printable(encodings[enc], true);\n            table += `<tr><td>${enc}</td><td>${value}</td></tr>`;\n        }\n\n        table += \"<table>\";\n        return table;\n    }\n\n}\n\nexport default TextEncodingBruteForce;\n"], "fixing_code": ["/**\n * @author Cynser\n * @author n1474335 [n1474335@gmail.com]\n * @copyright Crown Copyright 2018\n * @license Apache-2.0\n */\n\nimport Operation from \"../Operation\";\nimport Utils from \"../Utils\";\nimport cptable from \"../vendor/js-codepage/cptable.js\";\nimport {IO_FORMAT} from \"../lib/ChrEnc\";\n\n/**\n * Text Encoding Brute Force operation\n */\nclass TextEncodingBruteForce extends Operation {\n\n    /**\n     * TextEncodingBruteForce constructor\n     */\n    constructor() {\n        super();\n\n        this.name = \"Text Encoding Brute Force\";\n        this.module = \"Encodings\";\n        this.description = [\n            \"Enumerates all supported text encodings for the input, allowing you to quickly spot the correct one.\",\n            \"<br><br>\",\n            \"Supported charsets are:\",\n            \"<ul>\",\n            Object.keys(IO_FORMAT).map(e => `<li>${e}</li>`).join(\"\\n\"),\n            \"</ul>\"\n        ].join(\"\\n\");\n        this.infoURL = \"https://wikipedia.org/wiki/Character_encoding\";\n        this.inputType = \"string\";\n        this.outputType = \"json\";\n        this.presentType = \"html\";\n        this.args = [\n            {\n                name: \"Mode\",\n                type: \"option\",\n                value: [\"Encode\", \"Decode\"]\n            }\n        ];\n    }\n\n    /**\n     * @param {string} input\n     * @param {Object[]} args\n     * @returns {json}\n     */\n    run(input, args) {\n        const output = {},\n            charsets = Object.keys(IO_FORMAT),\n            mode = args[0];\n\n        charsets.forEach(charset => {\n            try {\n                if (mode === \"Decode\") {\n                    output[charset] = cptable.utils.decode(IO_FORMAT[charset], input);\n                } else {\n                    output[charset] = Utils.arrayBufferToStr(cptable.utils.encode(IO_FORMAT[charset], input));\n                }\n            } catch (err) {\n                output[charset] = \"Could not decode.\";\n            }\n        });\n\n        return output;\n    }\n\n    /**\n     * Displays the encodings in an HTML table for web apps.\n     *\n     * @param {Object[]} encodings\n     * @returns {html}\n     */\n    present(encodings) {\n        let table = \"<table class='table table-hover table-sm table-bordered table-nonfluid'><tr><th>Encoding</th><th>Value</th></tr>\";\n\n        for (const enc in encodings) {\n            const value = Utils.escapeHtml(Utils.printable(encodings[enc], true));\n            table += `<tr><td>${enc}</td><td>${value}</td></tr>`;\n        }\n\n        table += \"<table>\";\n        return table;\n    }\n\n}\n\nexport default TextEncodingBruteForce;\n"], "filenames": ["src/core/operations/TextEncodingBruteForce.mjs"], "buggy_code_start_loc": [82], "buggy_code_end_loc": [83], "fixing_code_start_loc": [82], "fixing_code_end_loc": [83], "type": "CWE-79", "message": "CyberChef before 8.31.2 allows XSS in core/operations/TextEncodingBruteForce.mjs.", "other": {"cve": {"id": "CVE-2019-15532", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-26T12:15:11.657", "lastModified": "2019-08-26T16:44:22.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "CyberChef before 8.31.2 allows XSS in core/operations/TextEncodingBruteForce.mjs."}, {"lang": "es", "value": "CyberChef versiones anteriores a 8.31.2, permite una vulnerabilidad de tipo XSS en el archivo core/operations/TextEncodingBruteForce.mjs."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gchq:cyberchef:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.31.2", "matchCriteriaId": "38BB6B00-CF07-49EE-BE74-4D22B1ADB7BA"}]}]}], "references": [{"url": "https://github.com/gchq/CyberChef/commit/01f0625d6a177f9c5df9281f12a27c814c2d8bcf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gchq/CyberChef/compare/v8.31.1...v8.31.2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gchq/CyberChef/issues/539", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/gchq/CyberChef/issues/544", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gchq/CyberChef/commit/01f0625d6a177f9c5df9281f12a27c814c2d8bcf"}}