{"buggy_code": ["/*****************************************************************\n|\n|    AP4 - sample entries\n|\n|    Copyright 2002-2008 Axiomatic Systems, LLC\n|\n|\n|    This file is part of Bento4/AP4 (MP4 Atom Processing Library).\n|\n|    Unless you have obtained Bento4 under a difference license,\n|    this version of Bento4 is Bento4|GPL.\n|    Bento4|GPL is free software; you can redistribute it and/or modify\n|    it under the terms of the GNU General Public License as published by\n|    the Free Software Foundation; either version 2, or (at your option)\n|    any later version.\n|\n|    Bento4|GPL is distributed in the hope that it will be useful,\n|    but WITHOUT ANY WARRANTY; without even the implied warranty of\n|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n|    GNU General Public License for more details.\n|\n|    You should have received a copy of the GNU General Public License\n|    along with Bento4|GPL; see the file COPYING.  If not, write to the\n|    Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n|    02111-1307, USA.\n|\n ****************************************************************/\n\n/*----------------------------------------------------------------------\n|   includes\n+---------------------------------------------------------------------*/\n#include \"Ap4SampleEntry.h\"\n#include \"Ap4Utils.h\"\n#include \"Ap4AtomFactory.h\"\n#include \"Ap4TimsAtom.h\"\n#include \"Ap4SampleDescription.h\"\n#include \"Ap4AvccAtom.h\"\n\n/*----------------------------------------------------------------------\n|   dynamic cast support\n+---------------------------------------------------------------------*/\nAP4_DEFINE_DYNAMIC_CAST_ANCHOR(AP4_SampleEntry)\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::AP4_SampleEntry\n+---------------------------------------------------------------------*/\nAP4_SampleEntry::AP4_SampleEntry(AP4_Atom::Type format, const AP4_AtomParent* details) :\n    AP4_ContainerAtom(format),\n    m_DataReferenceIndex(1)\n{\n    m_Reserved1[0] = 0;\n    m_Reserved1[1] = 0;\n    m_Reserved1[2] = 0;\n    m_Reserved1[3] = 0;\n    m_Reserved1[4] = 0;\n    m_Reserved1[5] = 0;\n    m_Size32 += 8;\n    \n    if (details) {\n        details->CopyChildren(*this);\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::AP4_SampleEntry\n+---------------------------------------------------------------------*/\nAP4_SampleEntry::AP4_SampleEntry(AP4_Atom::Type format,\n                                 AP4_Size       size) :\n    AP4_ContainerAtom(format, (AP4_UI64)size, false),\n    m_DataReferenceIndex(1)\n{\n    m_Reserved1[0] = 0;\n    m_Reserved1[1] = 0;\n    m_Reserved1[2] = 0;\n    m_Reserved1[3] = 0;\n    m_Reserved1[4] = 0;\n    m_Reserved1[5] = 0;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::AP4_SampleEntry\n+---------------------------------------------------------------------*/\nAP4_SampleEntry::AP4_SampleEntry(AP4_Atom::Type   format,\n                                 AP4_Size         size,\n                                 AP4_ByteStream&  stream,\n                                 AP4_AtomFactory& atom_factory) :\n    AP4_ContainerAtom(format, (AP4_UI64)size, false)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Clone\n+---------------------------------------------------------------------*/\nAP4_Atom*\nAP4_SampleEntry::Clone()\n{\n    return this->AP4_Atom::Clone();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Read\n+---------------------------------------------------------------------*/\nvoid\nAP4_SampleEntry::Read(AP4_ByteStream& stream, AP4_AtomFactory& atom_factory)\n{\n    // read the fields before the children atoms\n    ReadFields(stream);\n\n    // read children atoms (ex: esds and maybe others)\n    // NOTE: not all sample entries have children atoms\n    AP4_Size payload_size = (AP4_Size)(GetSize()-GetHeaderSize());\n    AP4_Size fields_size = GetFieldsSize();\n    if (payload_size > fields_size) {\n        ReadChildren(atom_factory, stream, payload_size-fields_size);\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_SampleEntry::GetFieldsSize()\n{\n    return 8;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    stream.Read(m_Reserved1, sizeof(m_Reserved1));\n    stream.ReadUI16(m_DataReferenceIndex);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n    \n    // reserved1\n    result = stream.Write(m_Reserved1, sizeof(m_Reserved1));\n    if (AP4_FAILED(result)) return result;\n\n    // data reference index\n    result = stream.WriteUI16(m_DataReferenceIndex);\n    if (AP4_FAILED(result)) return result;\n    \n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Write\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::Write(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n\n    // write the header\n    result = WriteHeader(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // write the fields\n    result = WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // write the children atoms\n    return m_Children.Apply(AP4_AtomListWriter(stream));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    inspector.AddField(\"data_reference_index\", m_DataReferenceIndex);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Inspect\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::Inspect(AP4_AtomInspector& inspector)\n{\n    // inspect the header\n    InspectHeader(inspector);\n\n    // inspect the fields\n    InspectFields(inspector);\n\n    // inspect children\n    m_Children.Apply(AP4_AtomListInspector(inspector));\n\n    // finish\n    inspector.EndAtom();\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::OnChildChanged\n+---------------------------------------------------------------------*/\nvoid\nAP4_SampleEntry::OnChildChanged(AP4_Atom*)\n{\n    // recompute our size\n    AP4_UI64 size = GetHeaderSize()+GetFieldsSize();\n    m_Children.Apply(AP4_AtomSizeAdder(size));\n    m_Size32 = (AP4_UI32)size;\n\n    // update our parent\n    if (m_Parent) m_Parent->OnChildChanged(this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_SampleEntry::ToSampleDescription()\n{\n    return new AP4_SampleDescription(AP4_SampleDescription::TYPE_UNKNOWN, m_Type, this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::AP4_UnknownSampleEntry\n+---------------------------------------------------------------------*/\nAP4_UnknownSampleEntry::AP4_UnknownSampleEntry(AP4_Atom::Type  type, \n                                               AP4_Size        size, \n                                               AP4_ByteStream& stream) :\n    AP4_SampleEntry(type, size)\n{\n    if (size > AP4_ATOM_HEADER_SIZE+AP4_SampleEntry::GetFieldsSize()) {\n        m_Payload.SetDataSize(size-(AP4_ATOM_HEADER_SIZE+AP4_SampleEntry::GetFieldsSize()));\n        ReadFields(stream);\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::AP4_UnknownSampleEntry\n+---------------------------------------------------------------------*/\nAP4_UnknownSampleEntry::AP4_UnknownSampleEntry(AP4_Atom::Type  type, \n                                               AP4_DataBuffer& payload) :\n    AP4_SampleEntry(type),\n    m_Payload(payload)\n{\n    m_Size32 += payload.GetDataSize();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::Clone\n+---------------------------------------------------------------------*/\nAP4_Atom*\nAP4_UnknownSampleEntry::Clone()\n{\n    return new AP4_UnknownSampleEntry(m_Type, m_Payload);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription* \nAP4_UnknownSampleEntry::ToSampleDescription()\n{\n    return new AP4_UnknownSampleDescription(this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size   \nAP4_UnknownSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize()+m_Payload.GetDataSize();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_UnknownSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // read the payload\n    return stream.Read(m_Payload.UseData(), m_Payload.GetDataSize());\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_UnknownSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n    \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // write the payload\n    return stream.Write(m_Payload.GetData(), m_Payload.GetDataSize());\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry(\n    AP4_UI32          type,\n    AP4_EsDescriptor* descriptor) :\n    AP4_SampleEntry(type)\n{\n    if (descriptor) AddChild(new AP4_EsdsAtom(descriptor));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry(\n    AP4_UI32         type,\n    AP4_Size         size,\n    AP4_ByteStream&  stream,\n    AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(type, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegSystemSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_MpegSystemSampleEntry::ToSampleDescription()\n{\n    return new AP4_MpegSystemSampleDescription(\n        AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS)));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry(AP4_EsDescriptor* descriptor) :\n    AP4_MpegSystemSampleEntry(AP4_ATOM_TYPE_MP4S, descriptor)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry(AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_MpegSystemSampleEntry(AP4_ATOM_TYPE_MP4S, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4sSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_Mp4sSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_MpegSystemSampleDescription(\n        AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS)));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::AP4_AudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AudioSampleEntry::AP4_AudioSampleEntry(AP4_Atom::Type format,\n                                           AP4_UI32       sample_rate,\n                                           AP4_UI16       sample_size,\n                                           AP4_UI16       channel_count) :\n    AP4_SampleEntry(format),\n    m_QtVersion(0),\n    m_QtRevision(0),\n    m_QtVendor(0),\n    m_ChannelCount(channel_count),\n    m_SampleSize(sample_size),\n    m_QtCompressionId(0),\n    m_QtPacketSize(0),\n    m_SampleRate(sample_rate),\n    m_QtV1SamplesPerPacket(0),\n    m_QtV1BytesPerPacket(0),\n    m_QtV1BytesPerFrame(0),\n    m_QtV1BytesPerSample(0),\n    m_QtV2StructSize(0),\n    m_QtV2SampleRate64(0.0),\n    m_QtV2ChannelCount(0),\n    m_QtV2Reserved(0),\n    m_QtV2BitsPerChannel(0),\n    m_QtV2FormatSpecificFlags(0),\n    m_QtV2BytesPerAudioPacket(0),\n    m_QtV2LPCMFramesPerAudioPacket(0)    \n{\n    m_Size32 += 20;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::AP4_AudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AudioSampleEntry::AP4_AudioSampleEntry(AP4_Atom::Type   format,\n                                           AP4_Size         size,\n                                           AP4_ByteStream&  stream,\n                                           AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(format, size)\n{\n    Read(stream, atom_factory);\n}\n    \n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_AudioSampleEntry::GetFieldsSize()\n{\n    AP4_Size size = AP4_SampleEntry::GetFieldsSize()+20;\n    if (m_QtVersion == 1) {\n        size += 16;\n    } else if (m_QtVersion == 2) {\n        size += 36+m_QtV2Extension.GetDataSize();\n    }\n    \n    return size;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::GetSampleRate\n+---------------------------------------------------------------------*/\nAP4_UI32\nAP4_AudioSampleEntry::GetSampleRate()\n{\n    if (m_QtVersion == 2) {\n        return (AP4_UI32)(m_QtV2SampleRate64);\n    } else {\n        return m_SampleRate>>16;\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::GetChannelCount\n+---------------------------------------------------------------------*/\nAP4_UI16\nAP4_AudioSampleEntry::GetChannelCount()\n{\n    if (m_QtVersion == 2) {\n        return (AP4_UI16)m_QtV2ChannelCount;\n    } else {\n        return m_ChannelCount;\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AudioSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // read the fields of this class\n    stream.ReadUI16(m_QtVersion);\n    stream.ReadUI16(m_QtRevision);\n    stream.ReadUI32(m_QtVendor);\n    stream.ReadUI16(m_ChannelCount);\n    stream.ReadUI16(m_SampleSize);\n    stream.ReadUI16(m_QtCompressionId);\n    stream.ReadUI16(m_QtPacketSize);\n    stream.ReadUI32(m_SampleRate);\n\n    // if this is a QT V1 entry, read the extension\n    if (m_QtVersion == 1) {\n        stream.ReadUI32(m_QtV1SamplesPerPacket);\n        stream.ReadUI32(m_QtV1BytesPerPacket);\n        stream.ReadUI32(m_QtV1BytesPerFrame);\n        stream.ReadUI32(m_QtV1BytesPerSample);\n    } else if (m_QtVersion == 2) {\n        stream.ReadUI32(m_QtV2StructSize);\n        stream.ReadDouble(m_QtV2SampleRate64);\n        stream.ReadUI32(m_QtV2ChannelCount);\n        stream.ReadUI32(m_QtV2Reserved);\n        stream.ReadUI32(m_QtV2BitsPerChannel);\n        stream.ReadUI32(m_QtV2FormatSpecificFlags);\n        stream.ReadUI32(m_QtV2BytesPerAudioPacket);\n        stream.ReadUI32(m_QtV2LPCMFramesPerAudioPacket);\n        if (m_QtV2StructSize > 72) {\n            unsigned int ext_size = m_QtV2StructSize-72;\n            m_QtV2Extension.SetDataSize(ext_size);\n            stream.Read(m_QtV2Extension.UseData(), ext_size);\n        }\n        m_QtV1SamplesPerPacket =\n        m_QtV1BytesPerPacket   =\n        m_QtV1BytesPerFrame    =\n        m_QtV1BytesPerSample   = 0;\n    } else {\n        m_QtV1SamplesPerPacket         = 0;\n        m_QtV1BytesPerPacket           = 0;\n        m_QtV1BytesPerFrame            = 0;\n        m_QtV1BytesPerSample           = 0;\n        m_QtV2StructSize               = 0;\n        m_QtV2SampleRate64             = 0.0;\n        m_QtV2ChannelCount             = 0;\n        m_QtV2Reserved                 = 0;\n        m_QtV2BitsPerChannel           = 0;\n        m_QtV2FormatSpecificFlags      = 0;\n        m_QtV2BytesPerAudioPacket      = 0;\n        m_QtV2LPCMFramesPerAudioPacket = 0;\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AudioSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n    \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // QT version\n    result = stream.WriteUI16(m_QtVersion);\n    if (AP4_FAILED(result)) return result;\n\n    // QT revision\n    result = stream.WriteUI16(m_QtRevision);\n    if (AP4_FAILED(result)) return result;\n\n    // QT vendor\n    result = stream.WriteUI32(m_QtVendor);\n    if (AP4_FAILED(result)) return result;\n\n    // channel count\n    result = stream.WriteUI16(m_ChannelCount);\n    if (AP4_FAILED(result)) return result;\n    \n    // sample size \n    result = stream.WriteUI16(m_SampleSize);\n    if (AP4_FAILED(result)) return result;\n\n    // QT compression ID\n    result = stream.WriteUI16(m_QtCompressionId);\n    if (AP4_FAILED(result)) return result;\n\n    // QT packet size\n    result = stream.WriteUI16(m_QtPacketSize);\n    if (AP4_FAILED(result)) return result;\n\n    // sample rate\n    result = stream.WriteUI32(m_SampleRate);\n    if (AP4_FAILED(result)) return result;\n\n    if (m_QtVersion == 1) {\n        result = stream.WriteUI32(m_QtV1SamplesPerPacket);\n        if (AP4_FAILED(result)) return result;\n        result = stream.WriteUI32(m_QtV1BytesPerPacket);\n        if (AP4_FAILED(result)) return result;\n        result = stream.WriteUI32(m_QtV1BytesPerFrame);\n        if (AP4_FAILED(result)) return result;\n        result = stream.WriteUI32(m_QtV1BytesPerSample);\n        if (AP4_FAILED(result)) return result;\n    } else if (m_QtVersion == 2) {\n        stream.WriteUI32(m_QtV2StructSize);\n        stream.WriteDouble(m_QtV2SampleRate64);\n        stream.WriteUI32(m_QtV2ChannelCount);\n        stream.WriteUI32(m_QtV2Reserved);\n        stream.WriteUI32(m_QtV2BitsPerChannel);\n        stream.WriteUI32(m_QtV2FormatSpecificFlags);\n        stream.WriteUI32(m_QtV2BytesPerAudioPacket);\n        stream.WriteUI32(m_QtV2LPCMFramesPerAudioPacket);\n        if (m_QtV2Extension.GetDataSize()) {\n            stream.Write(m_QtV2Extension.GetData(),\n                         m_QtV2Extension.GetDataSize());\n        }\n    }\n    \n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AudioSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // dump the fields from the base class\n    AP4_SampleEntry::InspectFields(inspector);\n\n    // fields\n    inspector.AddField(\"channel_count\", GetChannelCount());\n    inspector.AddField(\"sample_size\", GetSampleSize());\n    inspector.AddField(\"sample_rate\", GetSampleRate());\n    if (m_QtVersion) {\n        inspector.AddField(\"qt_version\", m_QtVersion);\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_AudioSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_GenericAudioSampleDescription(\n        m_Type,\n        GetSampleRate(),\n        GetSampleSize(),\n        GetChannelCount(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry(\n    AP4_UI32          type,\n    AP4_UI32          sample_rate, \n    AP4_UI16          sample_size,\n    AP4_UI16          channel_count,\n    AP4_EsDescriptor* descriptor) :\n    AP4_AudioSampleEntry(type, sample_rate, sample_size, channel_count)\n{\n    if (descriptor) AddChild(new AP4_EsdsAtom(descriptor));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry(\n    AP4_UI32         type,\n    AP4_Size         size,\n    AP4_ByteStream&  stream,\n    AP4_AtomFactory& atom_factory) :\n    AP4_AudioSampleEntry(type, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegAudioSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_MpegAudioSampleEntry::ToSampleDescription()\n{\n    // find the esds atom\n    AP4_EsdsAtom* esds = AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS));\n    if (esds == NULL) {\n        // check if this is a quicktime style sample description\n        if (m_QtVersion > 0) {\n            esds = AP4_DYNAMIC_CAST(AP4_EsdsAtom, FindChild(\"wave/esds\"));\n        }\n    }\n    \n    // create a sample description\n    return new AP4_MpegAudioSampleDescription(GetSampleRate(),\n                                              GetSampleSize(),\n                                              GetChannelCount(),\n                                              esds);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry(AP4_UI32          sample_rate, \n                                         AP4_UI16          sample_size,\n                                         AP4_UI16          channel_count,\n                                         AP4_EsDescriptor* descriptor) :\n    AP4_MpegAudioSampleEntry(AP4_ATOM_TYPE_MP4A, \n                             sample_rate, \n                             sample_size, \n                             channel_count,\n                             descriptor)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry(AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_MpegAudioSampleEntry(AP4_ATOM_TYPE_MP4A, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::AP4_VisualSampleEntry\n+---------------------------------------------------------------------*/\nAP4_VisualSampleEntry::AP4_VisualSampleEntry(\n    AP4_Atom::Type    format, \n    AP4_UI16          width,\n    AP4_UI16          height,\n    AP4_UI16          depth,\n    const char*           compressor_name,\n    const AP4_AtomParent* details) :\n    AP4_SampleEntry(format, details),\n    m_Predefined1(0),\n    m_Reserved2(0),\n    m_Width(width),\n    m_Height(height),\n    m_HorizResolution(0x00480000),\n    m_VertResolution(0x00480000),\n    m_Reserved3(0),\n    m_FrameCount(1),\n    m_CompressorName(compressor_name),\n    m_Depth(depth),\n    m_Predefined3(0xFFFF)\n{\n    memset(m_Predefined2, 0, sizeof(m_Predefined2));\n    m_Size32 += 70;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::AP4_VisualSampleEntry\n+---------------------------------------------------------------------*/\nAP4_VisualSampleEntry::AP4_VisualSampleEntry(AP4_Atom::Type   format,\n                                             AP4_Size         size, \n                                             AP4_ByteStream&  stream,\n                                             AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(format, size)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_VisualSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize()+70;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_VisualSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // read fields from this class\n    stream.ReadUI16(m_Predefined1);\n    stream.ReadUI16(m_Reserved2);\n    stream.Read(m_Predefined2, sizeof(m_Predefined2));\n    stream.ReadUI16(m_Width);\n    stream.ReadUI16(m_Height);\n    stream.ReadUI32(m_HorizResolution);\n    stream.ReadUI32(m_VertResolution);\n    stream.ReadUI32(m_Reserved3);\n    stream.ReadUI16(m_FrameCount);\n\n    char compressor_name[33];\n    compressor_name[32] = 0;\n    stream.Read(compressor_name, 32);\n    int name_length = compressor_name[0];\n    if (name_length < 32) {\n        compressor_name[name_length+1] = 0; // force null termination\n        m_CompressorName = &compressor_name[1];\n    }\n\n    stream.ReadUI16(m_Depth);\n    stream.ReadUI16(m_Predefined3);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_VisualSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n        \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // predefined1\n    result = stream.WriteUI16(m_Predefined1);\n    if (AP4_FAILED(result)) return result;\n    \n    // reserved2\n    result = stream.WriteUI16(m_Reserved2);\n    if (AP4_FAILED(result)) return result;\n    \n    // predefined2\n    result = stream.Write(m_Predefined2, sizeof(m_Predefined2));\n    if (AP4_FAILED(result)) return result;\n    \n    // width\n    result = stream.WriteUI16(m_Width);\n    if (AP4_FAILED(result)) return result;\n    \n    // height\n    result = stream.WriteUI16(m_Height);\n    if (AP4_FAILED(result)) return result;\n    \n    // horizontal resolution\n    result = stream.WriteUI32(m_HorizResolution);\n    if (AP4_FAILED(result)) return result;\n    \n    // vertical resolution\n    result = stream.WriteUI32(m_VertResolution);\n    if (AP4_FAILED(result)) return result;\n    \n    // reserved3\n    result = stream.WriteUI32(m_Reserved3);\n    if (AP4_FAILED(result)) return result;\n    \n    // frame count\n    result = stream.WriteUI16(m_FrameCount);\n    if (AP4_FAILED(result)) return result;\n    \n    // compressor name\n    unsigned char compressor_name[32];\n    unsigned int name_length = m_CompressorName.GetLength();\n    if (name_length > 31) name_length = 31;\n    compressor_name[0] = (unsigned char)name_length;\n    for (unsigned int i=0; i<name_length; i++) {\n        compressor_name[i+1] = m_CompressorName[i];\n    }\n    for (unsigned int i=name_length+1; i<32; i++) {\n        compressor_name[i] = 0;\n    }\n    result = stream.Write(compressor_name, 32);\n    if (AP4_FAILED(result)) return result;\n    \n    // depth\n    result = stream.WriteUI16(m_Depth);\n    if (AP4_FAILED(result)) return result;\n    \n    // predefined3\n    result = stream.WriteUI16(m_Predefined3);\n    if (AP4_FAILED(result)) return result;\n    \n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_VisualSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // dump the fields of the base class\n    AP4_SampleEntry::InspectFields(inspector);\n\n    // fields\n    inspector.AddField(\"width\", m_Width);\n    inspector.AddField(\"height\", m_Height);\n    inspector.AddField(\"compressor\", m_CompressorName.GetChars());\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_VisualSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_GenericVideoSampleDescription(\n        m_Type,\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry(\n    AP4_UI32          type,\n    AP4_UI16          width,\n    AP4_UI16          height,\n    AP4_UI16          depth,\n    const char*       compressor_name,\n    AP4_EsDescriptor* descriptor) :\n    AP4_VisualSampleEntry(type, \n                          width, \n                          height, \n                          depth, \n                          compressor_name)\n{\n    if (descriptor) AddChild(new AP4_EsdsAtom(descriptor));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry(\n    AP4_UI32         type,\n    AP4_Size         size,\n    AP4_ByteStream&  stream,\n    AP4_AtomFactory& atom_factory) :\n    AP4_VisualSampleEntry(type, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegVideoSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_MpegVideoSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_MpegVideoSampleDescription(\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS)));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4vSampleEntry::AP4_Mp4vSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4vSampleEntry::AP4_Mp4vSampleEntry(AP4_UI16          width,\n                                         AP4_UI16          height,\n                                         AP4_UI16          depth,\n                                         const char*       compressor_name,\n                                         AP4_EsDescriptor* descriptor) :\n    AP4_MpegVideoSampleEntry(AP4_ATOM_TYPE_MP4V, \n                             width, \n                             height, \n                             depth, \n                             compressor_name,\n                             descriptor)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4vSampleEntry::AP4_Mp4aSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4vSampleEntry::AP4_Mp4vSampleEntry(AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_MpegVideoSampleEntry(AP4_ATOM_TYPE_MP4V, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AvcSampleEntry::AP4_AvcSSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AvcSampleEntry::AP4_AvcSampleEntry(AP4_UI32            format,\n                                       AP4_UI16            width,\n                                       AP4_UI16            height,\n                                       AP4_UI16            depth,\n                                       const char*         compressor_name,\n                                       const AP4_AtomParent* details) :\n    AP4_VisualSampleEntry(format,\n                          width, \n                          height, \n                          depth, \n                          compressor_name,\n                          details)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AvcSampleEntry::AP4_AvcSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AvcSampleEntry::AP4_AvcSampleEntry(AP4_UI32         format,\n                                       AP4_Size         size,\n                                       AP4_ByteStream&  stream,\n                                       AP4_AtomFactory& atom_factory) :\n    AP4_VisualSampleEntry(format, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HevcSampleEntry::AP4_HevcSSampleEntry\n+---------------------------------------------------------------------*/\nAP4_HevcSampleEntry::AP4_HevcSampleEntry(AP4_UI32            format,\n                                         AP4_UI16            width,\n                                         AP4_UI16            height,\n                                         AP4_UI16            depth,\n                                         const char*         compressor_name,\n                                         const AP4_AtomParent* details) :\n    AP4_VisualSampleEntry(format,\n                          width, \n                          height, \n                          depth, \n                          compressor_name,\n                          details)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AvcSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_AvcSampleEntry::ToSampleDescription()\n{\n    return new AP4_AvcSampleDescription(\n        m_Type,\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HevcSampleEntry::AP4_HevcSampleEntry\n+---------------------------------------------------------------------*/\nAP4_HevcSampleEntry::AP4_HevcSampleEntry(AP4_UI32         format,\n                                         AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_VisualSampleEntry(format, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HevcSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_HevcSampleEntry::ToSampleDescription()\n{\n    return new AP4_HevcSampleDescription(\n        m_Type,\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry\n+---------------------------------------------------------------------*/\nAP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry(AP4_UI16 hint_track_version,\n                                               AP4_UI16 highest_compatible_version,\n                                               AP4_UI32 max_packet_size,\n                                               AP4_UI32 timescale):\n    AP4_SampleEntry(AP4_ATOM_TYPE_RTP_),\n    m_HintTrackVersion(hint_track_version),\n    m_HighestCompatibleVersion(highest_compatible_version),\n    m_MaxPacketSize(max_packet_size)\n{\n    // build an atom for timescale\n    AddChild(new AP4_TimsAtom(timescale));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry\n+---------------------------------------------------------------------*/\nAP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry(AP4_Size         size,\n                                               AP4_ByteStream&  stream,\n                                               AP4_AtomFactory& atom_factory): \n    AP4_SampleEntry(AP4_ATOM_TYPE_RTP_, size)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_RtpHintSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize()+8;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_RtpHintSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // data\n    result = stream.ReadUI16(m_HintTrackVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadUI16(m_HighestCompatibleVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadUI32(m_MaxPacketSize);\n    if (AP4_FAILED(result)) return result;\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_RtpHintSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // data\n    result = stream.WriteUI16(m_HintTrackVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI16(m_HighestCompatibleVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_MaxPacketSize);\n    if (AP4_FAILED(result)) return result;\n\n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_RtpHintSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // sample entry\n    AP4_SampleEntry::InspectFields(inspector);\n    \n    // fields\n    inspector.AddField(\"hint_track_version\", m_HintTrackVersion);\n    inspector.AddField(\"highest_compatible_version\", m_HighestCompatibleVersion);\n    inspector.AddField(\"max_packet_size\", m_MaxPacketSize);\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry\n+---------------------------------------------------------------------*/\nAP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry(\n    AP4_Atom::Type    format,\n    const char*       namespce,\n    const char*       schema_location,\n    const char*       image_mime_type) :\n    AP4_SampleEntry(format),\n    m_Namespace(namespce),\n    m_SchemaLocation(schema_location),\n    m_ImageMimeType(image_mime_type)\n{\n    SetSize(m_Size32+m_Namespace.GetLength()+1+m_SchemaLocation.GetLength()+1+m_ImageMimeType.GetLength()+1);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry\n+---------------------------------------------------------------------*/\nAP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry(AP4_Atom::Type   format,\n                                                 AP4_Size         size,\n                                                 AP4_ByteStream&  stream,\n                                                 AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(format, size)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_SubtitleSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize() +\n        3                                   +\n        m_Namespace.GetLength()             +\n        m_SchemaLocation.GetLength()        +\n        m_ImageMimeType.GetLength();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SubtitleSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // read fields from this class\n    result = stream.ReadNullTerminatedString(m_Namespace);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadNullTerminatedString(m_SchemaLocation);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadNullTerminatedString(m_ImageMimeType);\n    if (AP4_FAILED(result)) return result;\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SubtitleSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n        \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // write fields from this class\n    result = stream.WriteString(m_Namespace.GetChars());\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI08(0);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteString(m_SchemaLocation.GetChars());\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI08(0);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteString(m_ImageMimeType.GetChars());\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI08(0);\n    if (AP4_FAILED(result)) return result;\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SubtitleSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // dump the fields of the base class\n    AP4_SampleEntry::InspectFields(inspector);\n\n    // fields\n    inspector.AddField(\"namespace\",       m_Namespace.GetChars());\n    inspector.AddField(\"schema_location\", m_SchemaLocation.GetChars());\n    inspector.AddField(\"image_mime_type\", m_ImageMimeType.GetChars());\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_SubtitleSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_SubtitleSampleDescription(m_Type,\n                                             m_Namespace.GetChars(),\n                                             m_SchemaLocation.GetChars(),\n                                             m_ImageMimeType.GetChars());\n}\n\n"], "fixing_code": ["/*****************************************************************\n|\n|    AP4 - sample entries\n|\n|    Copyright 2002-2008 Axiomatic Systems, LLC\n|\n|\n|    This file is part of Bento4/AP4 (MP4 Atom Processing Library).\n|\n|    Unless you have obtained Bento4 under a difference license,\n|    this version of Bento4 is Bento4|GPL.\n|    Bento4|GPL is free software; you can redistribute it and/or modify\n|    it under the terms of the GNU General Public License as published by\n|    the Free Software Foundation; either version 2, or (at your option)\n|    any later version.\n|\n|    Bento4|GPL is distributed in the hope that it will be useful,\n|    but WITHOUT ANY WARRANTY; without even the implied warranty of\n|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n|    GNU General Public License for more details.\n|\n|    You should have received a copy of the GNU General Public License\n|    along with Bento4|GPL; see the file COPYING.  If not, write to the\n|    Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n|    02111-1307, USA.\n|\n ****************************************************************/\n\n/*----------------------------------------------------------------------\n|   includes\n+---------------------------------------------------------------------*/\n#include \"Ap4SampleEntry.h\"\n#include \"Ap4Utils.h\"\n#include \"Ap4AtomFactory.h\"\n#include \"Ap4TimsAtom.h\"\n#include \"Ap4SampleDescription.h\"\n#include \"Ap4AvccAtom.h\"\n\n/*----------------------------------------------------------------------\n|   dynamic cast support\n+---------------------------------------------------------------------*/\nAP4_DEFINE_DYNAMIC_CAST_ANCHOR(AP4_SampleEntry)\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::AP4_SampleEntry\n+---------------------------------------------------------------------*/\nAP4_SampleEntry::AP4_SampleEntry(AP4_Atom::Type format, const AP4_AtomParent* details) :\n    AP4_ContainerAtom(format),\n    m_DataReferenceIndex(1)\n{\n    m_Reserved1[0] = 0;\n    m_Reserved1[1] = 0;\n    m_Reserved1[2] = 0;\n    m_Reserved1[3] = 0;\n    m_Reserved1[4] = 0;\n    m_Reserved1[5] = 0;\n    m_Size32 += 8;\n    \n    if (details) {\n        details->CopyChildren(*this);\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::AP4_SampleEntry\n+---------------------------------------------------------------------*/\nAP4_SampleEntry::AP4_SampleEntry(AP4_Atom::Type format,\n                                 AP4_Size       size) :\n    AP4_ContainerAtom(format, (AP4_UI64)size, false),\n    m_DataReferenceIndex(1)\n{\n    m_Reserved1[0] = 0;\n    m_Reserved1[1] = 0;\n    m_Reserved1[2] = 0;\n    m_Reserved1[3] = 0;\n    m_Reserved1[4] = 0;\n    m_Reserved1[5] = 0;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::AP4_SampleEntry\n+---------------------------------------------------------------------*/\nAP4_SampleEntry::AP4_SampleEntry(AP4_Atom::Type   format,\n                                 AP4_Size         size,\n                                 AP4_ByteStream&  stream,\n                                 AP4_AtomFactory& atom_factory) :\n    AP4_ContainerAtom(format, (AP4_UI64)size, false)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Clone\n+---------------------------------------------------------------------*/\nAP4_Atom*\nAP4_SampleEntry::Clone()\n{\n    return this->AP4_Atom::Clone();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Read\n+---------------------------------------------------------------------*/\nvoid\nAP4_SampleEntry::Read(AP4_ByteStream& stream, AP4_AtomFactory& atom_factory)\n{\n    // read the fields before the children atoms\n    ReadFields(stream);\n\n    // read children atoms (ex: esds and maybe others)\n    // NOTE: not all sample entries have children atoms\n    AP4_Size payload_size = (AP4_Size)(GetSize()-GetHeaderSize());\n    AP4_Size fields_size = GetFieldsSize();\n    if (payload_size > fields_size) {\n        ReadChildren(atom_factory, stream, payload_size-fields_size);\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_SampleEntry::GetFieldsSize()\n{\n    return 8;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    stream.Read(m_Reserved1, sizeof(m_Reserved1));\n    stream.ReadUI16(m_DataReferenceIndex);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n    \n    // reserved1\n    result = stream.Write(m_Reserved1, sizeof(m_Reserved1));\n    if (AP4_FAILED(result)) return result;\n\n    // data reference index\n    result = stream.WriteUI16(m_DataReferenceIndex);\n    if (AP4_FAILED(result)) return result;\n    \n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Write\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::Write(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n\n    // write the header\n    result = WriteHeader(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // write the fields\n    result = WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // write the children atoms\n    return m_Children.Apply(AP4_AtomListWriter(stream));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    inspector.AddField(\"data_reference_index\", m_DataReferenceIndex);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::Inspect\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SampleEntry::Inspect(AP4_AtomInspector& inspector)\n{\n    // inspect the header\n    InspectHeader(inspector);\n\n    // inspect the fields\n    InspectFields(inspector);\n\n    // inspect children\n    m_Children.Apply(AP4_AtomListInspector(inspector));\n\n    // finish\n    inspector.EndAtom();\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::OnChildChanged\n+---------------------------------------------------------------------*/\nvoid\nAP4_SampleEntry::OnChildChanged(AP4_Atom*)\n{\n    // recompute our size\n    AP4_UI64 size = GetHeaderSize()+GetFieldsSize();\n    m_Children.Apply(AP4_AtomSizeAdder(size));\n    m_Size32 = (AP4_UI32)size;\n\n    // update our parent\n    if (m_Parent) m_Parent->OnChildChanged(this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_SampleEntry::ToSampleDescription()\n{\n    return new AP4_SampleDescription(AP4_SampleDescription::TYPE_UNKNOWN, m_Type, this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::AP4_UnknownSampleEntry\n+---------------------------------------------------------------------*/\nAP4_UnknownSampleEntry::AP4_UnknownSampleEntry(AP4_Atom::Type  type, \n                                               AP4_Size        size, \n                                               AP4_ByteStream& stream) :\n    AP4_SampleEntry(type, size)\n{\n    if (size > AP4_ATOM_HEADER_SIZE+AP4_SampleEntry::GetFieldsSize()) {\n        m_Payload.SetDataSize(size-(AP4_ATOM_HEADER_SIZE+AP4_SampleEntry::GetFieldsSize()));\n        ReadFields(stream);\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::AP4_UnknownSampleEntry\n+---------------------------------------------------------------------*/\nAP4_UnknownSampleEntry::AP4_UnknownSampleEntry(AP4_Atom::Type  type, \n                                               AP4_DataBuffer& payload) :\n    AP4_SampleEntry(type),\n    m_Payload(payload)\n{\n    m_Size32 += payload.GetDataSize();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::Clone\n+---------------------------------------------------------------------*/\nAP4_Atom*\nAP4_UnknownSampleEntry::Clone()\n{\n    return new AP4_UnknownSampleEntry(m_Type, m_Payload);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription* \nAP4_UnknownSampleEntry::ToSampleDescription()\n{\n    return new AP4_UnknownSampleDescription(this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size   \nAP4_UnknownSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize()+m_Payload.GetDataSize();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_UnknownSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // read the payload\n    return stream.Read(m_Payload.UseData(), m_Payload.GetDataSize());\n}\n\n/*----------------------------------------------------------------------\n|   AP4_UnknownSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_UnknownSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n    \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // write the payload\n    return stream.Write(m_Payload.GetData(), m_Payload.GetDataSize());\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry(\n    AP4_UI32          type,\n    AP4_EsDescriptor* descriptor) :\n    AP4_SampleEntry(type)\n{\n    if (descriptor) AddChild(new AP4_EsdsAtom(descriptor));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegSystemSampleEntry::AP4_MpegSystemSampleEntry(\n    AP4_UI32         type,\n    AP4_Size         size,\n    AP4_ByteStream&  stream,\n    AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(type, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegSystemSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_MpegSystemSampleEntry::ToSampleDescription()\n{\n    return new AP4_MpegSystemSampleDescription(\n        AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS)));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry(AP4_EsDescriptor* descriptor) :\n    AP4_MpegSystemSampleEntry(AP4_ATOM_TYPE_MP4S, descriptor)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4sSampleEntry::AP4_Mp4sSampleEntry(AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_MpegSystemSampleEntry(AP4_ATOM_TYPE_MP4S, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4sSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_Mp4sSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_MpegSystemSampleDescription(\n        AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS)));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::AP4_AudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AudioSampleEntry::AP4_AudioSampleEntry(AP4_Atom::Type format,\n                                           AP4_UI32       sample_rate,\n                                           AP4_UI16       sample_size,\n                                           AP4_UI16       channel_count) :\n    AP4_SampleEntry(format),\n    m_QtVersion(0),\n    m_QtRevision(0),\n    m_QtVendor(0),\n    m_ChannelCount(channel_count),\n    m_SampleSize(sample_size),\n    m_QtCompressionId(0),\n    m_QtPacketSize(0),\n    m_SampleRate(sample_rate),\n    m_QtV1SamplesPerPacket(0),\n    m_QtV1BytesPerPacket(0),\n    m_QtV1BytesPerFrame(0),\n    m_QtV1BytesPerSample(0),\n    m_QtV2StructSize(0),\n    m_QtV2SampleRate64(0.0),\n    m_QtV2ChannelCount(0),\n    m_QtV2Reserved(0),\n    m_QtV2BitsPerChannel(0),\n    m_QtV2FormatSpecificFlags(0),\n    m_QtV2BytesPerAudioPacket(0),\n    m_QtV2LPCMFramesPerAudioPacket(0)    \n{\n    m_Size32 += 20;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::AP4_AudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AudioSampleEntry::AP4_AudioSampleEntry(AP4_Atom::Type   format,\n                                           AP4_Size         size,\n                                           AP4_ByteStream&  stream,\n                                           AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(format, size)\n{\n    Read(stream, atom_factory);\n}\n    \n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_AudioSampleEntry::GetFieldsSize()\n{\n    AP4_Size size = AP4_SampleEntry::GetFieldsSize()+20;\n    if (m_QtVersion == 1) {\n        size += 16;\n    } else if (m_QtVersion == 2) {\n        size += 36+m_QtV2Extension.GetDataSize();\n    }\n    \n    return size;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::GetSampleRate\n+---------------------------------------------------------------------*/\nAP4_UI32\nAP4_AudioSampleEntry::GetSampleRate()\n{\n    if (m_QtVersion == 2) {\n        return (AP4_UI32)(m_QtV2SampleRate64);\n    } else {\n        return m_SampleRate>>16;\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::GetChannelCount\n+---------------------------------------------------------------------*/\nAP4_UI16\nAP4_AudioSampleEntry::GetChannelCount()\n{\n    if (m_QtVersion == 2) {\n        return (AP4_UI16)m_QtV2ChannelCount;\n    } else {\n        return m_ChannelCount;\n    }\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AudioSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // read the fields of this class\n    stream.ReadUI16(m_QtVersion);\n    stream.ReadUI16(m_QtRevision);\n    stream.ReadUI32(m_QtVendor);\n    stream.ReadUI16(m_ChannelCount);\n    stream.ReadUI16(m_SampleSize);\n    stream.ReadUI16(m_QtCompressionId);\n    stream.ReadUI16(m_QtPacketSize);\n    stream.ReadUI32(m_SampleRate);\n\n    // if this is a QT V1 entry, read the extension\n    if (m_QtVersion == 1) {\n        stream.ReadUI32(m_QtV1SamplesPerPacket);\n        stream.ReadUI32(m_QtV1BytesPerPacket);\n        stream.ReadUI32(m_QtV1BytesPerFrame);\n        stream.ReadUI32(m_QtV1BytesPerSample);\n    } else if (m_QtVersion == 2) {\n        stream.ReadUI32(m_QtV2StructSize);\n        stream.ReadDouble(m_QtV2SampleRate64);\n        stream.ReadUI32(m_QtV2ChannelCount);\n        stream.ReadUI32(m_QtV2Reserved);\n        stream.ReadUI32(m_QtV2BitsPerChannel);\n        stream.ReadUI32(m_QtV2FormatSpecificFlags);\n        stream.ReadUI32(m_QtV2BytesPerAudioPacket);\n        stream.ReadUI32(m_QtV2LPCMFramesPerAudioPacket);\n        if (m_QtV2StructSize > 72) {\n            unsigned int ext_size = m_QtV2StructSize-72;\n            m_QtV2Extension.SetDataSize(ext_size);\n            stream.Read(m_QtV2Extension.UseData(), ext_size);\n        }\n        m_QtV1SamplesPerPacket =\n        m_QtV1BytesPerPacket   =\n        m_QtV1BytesPerFrame    =\n        m_QtV1BytesPerSample   = 0;\n    } else {\n        m_QtV1SamplesPerPacket         = 0;\n        m_QtV1BytesPerPacket           = 0;\n        m_QtV1BytesPerFrame            = 0;\n        m_QtV1BytesPerSample           = 0;\n        m_QtV2StructSize               = 0;\n        m_QtV2SampleRate64             = 0.0;\n        m_QtV2ChannelCount             = 0;\n        m_QtV2Reserved                 = 0;\n        m_QtV2BitsPerChannel           = 0;\n        m_QtV2FormatSpecificFlags      = 0;\n        m_QtV2BytesPerAudioPacket      = 0;\n        m_QtV2LPCMFramesPerAudioPacket = 0;\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AudioSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n    \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // QT version\n    result = stream.WriteUI16(m_QtVersion);\n    if (AP4_FAILED(result)) return result;\n\n    // QT revision\n    result = stream.WriteUI16(m_QtRevision);\n    if (AP4_FAILED(result)) return result;\n\n    // QT vendor\n    result = stream.WriteUI32(m_QtVendor);\n    if (AP4_FAILED(result)) return result;\n\n    // channel count\n    result = stream.WriteUI16(m_ChannelCount);\n    if (AP4_FAILED(result)) return result;\n    \n    // sample size \n    result = stream.WriteUI16(m_SampleSize);\n    if (AP4_FAILED(result)) return result;\n\n    // QT compression ID\n    result = stream.WriteUI16(m_QtCompressionId);\n    if (AP4_FAILED(result)) return result;\n\n    // QT packet size\n    result = stream.WriteUI16(m_QtPacketSize);\n    if (AP4_FAILED(result)) return result;\n\n    // sample rate\n    result = stream.WriteUI32(m_SampleRate);\n    if (AP4_FAILED(result)) return result;\n\n    if (m_QtVersion == 1) {\n        result = stream.WriteUI32(m_QtV1SamplesPerPacket);\n        if (AP4_FAILED(result)) return result;\n        result = stream.WriteUI32(m_QtV1BytesPerPacket);\n        if (AP4_FAILED(result)) return result;\n        result = stream.WriteUI32(m_QtV1BytesPerFrame);\n        if (AP4_FAILED(result)) return result;\n        result = stream.WriteUI32(m_QtV1BytesPerSample);\n        if (AP4_FAILED(result)) return result;\n    } else if (m_QtVersion == 2) {\n        stream.WriteUI32(m_QtV2StructSize);\n        stream.WriteDouble(m_QtV2SampleRate64);\n        stream.WriteUI32(m_QtV2ChannelCount);\n        stream.WriteUI32(m_QtV2Reserved);\n        stream.WriteUI32(m_QtV2BitsPerChannel);\n        stream.WriteUI32(m_QtV2FormatSpecificFlags);\n        stream.WriteUI32(m_QtV2BytesPerAudioPacket);\n        stream.WriteUI32(m_QtV2LPCMFramesPerAudioPacket);\n        if (m_QtV2Extension.GetDataSize()) {\n            stream.Write(m_QtV2Extension.GetData(),\n                         m_QtV2Extension.GetDataSize());\n        }\n    }\n    \n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_AudioSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // dump the fields from the base class\n    AP4_SampleEntry::InspectFields(inspector);\n\n    // fields\n    inspector.AddField(\"channel_count\", GetChannelCount());\n    inspector.AddField(\"sample_size\", GetSampleSize());\n    inspector.AddField(\"sample_rate\", GetSampleRate());\n    if (m_QtVersion) {\n        inspector.AddField(\"qt_version\", m_QtVersion);\n    }\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AudioSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_AudioSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_GenericAudioSampleDescription(\n        m_Type,\n        GetSampleRate(),\n        GetSampleSize(),\n        GetChannelCount(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry(\n    AP4_UI32          type,\n    AP4_UI32          sample_rate, \n    AP4_UI16          sample_size,\n    AP4_UI16          channel_count,\n    AP4_EsDescriptor* descriptor) :\n    AP4_AudioSampleEntry(type, sample_rate, sample_size, channel_count)\n{\n    if (descriptor) AddChild(new AP4_EsdsAtom(descriptor));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegAudioSampleEntry::AP4_MpegAudioSampleEntry(\n    AP4_UI32         type,\n    AP4_Size         size,\n    AP4_ByteStream&  stream,\n    AP4_AtomFactory& atom_factory) :\n    AP4_AudioSampleEntry(type, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegAudioSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_MpegAudioSampleEntry::ToSampleDescription()\n{\n    // find the esds atom\n    AP4_EsdsAtom* esds = AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS));\n    if (esds == NULL) {\n        // check if this is a quicktime style sample description\n        if (m_QtVersion > 0) {\n            esds = AP4_DYNAMIC_CAST(AP4_EsdsAtom, FindChild(\"wave/esds\"));\n        }\n    }\n    \n    // create a sample description\n    return new AP4_MpegAudioSampleDescription(GetSampleRate(),\n                                              GetSampleSize(),\n                                              GetChannelCount(),\n                                              esds);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry(AP4_UI32          sample_rate, \n                                         AP4_UI16          sample_size,\n                                         AP4_UI16          channel_count,\n                                         AP4_EsDescriptor* descriptor) :\n    AP4_MpegAudioSampleEntry(AP4_ATOM_TYPE_MP4A, \n                             sample_rate, \n                             sample_size, \n                             channel_count,\n                             descriptor)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4aSampleEntry::AP4_Mp4aSampleEntry(AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_MpegAudioSampleEntry(AP4_ATOM_TYPE_MP4A, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::AP4_VisualSampleEntry\n+---------------------------------------------------------------------*/\nAP4_VisualSampleEntry::AP4_VisualSampleEntry(\n    AP4_Atom::Type    format, \n    AP4_UI16          width,\n    AP4_UI16          height,\n    AP4_UI16          depth,\n    const char*           compressor_name,\n    const AP4_AtomParent* details) :\n    AP4_SampleEntry(format, details),\n    m_Predefined1(0),\n    m_Reserved2(0),\n    m_Width(width),\n    m_Height(height),\n    m_HorizResolution(0x00480000),\n    m_VertResolution(0x00480000),\n    m_Reserved3(0),\n    m_FrameCount(1),\n    m_CompressorName(compressor_name),\n    m_Depth(depth),\n    m_Predefined3(0xFFFF)\n{\n    memset(m_Predefined2, 0, sizeof(m_Predefined2));\n    m_Size32 += 70;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::AP4_VisualSampleEntry\n+---------------------------------------------------------------------*/\nAP4_VisualSampleEntry::AP4_VisualSampleEntry(AP4_Atom::Type   format,\n                                             AP4_Size         size, \n                                             AP4_ByteStream&  stream,\n                                             AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(format, size)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_VisualSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize()+70;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_VisualSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // read fields from this class\n    stream.ReadUI16(m_Predefined1);\n    stream.ReadUI16(m_Reserved2);\n    stream.Read(m_Predefined2, sizeof(m_Predefined2));\n    stream.ReadUI16(m_Width);\n    stream.ReadUI16(m_Height);\n    stream.ReadUI32(m_HorizResolution);\n    stream.ReadUI32(m_VertResolution);\n    stream.ReadUI32(m_Reserved3);\n    stream.ReadUI16(m_FrameCount);\n\n    AP4_UI08 compressor_name[33];\n    compressor_name[32] = 0;\n    stream.Read(compressor_name, 32);\n    AP4_UI08 name_length = compressor_name[0];\n    if (name_length < 32) {\n        compressor_name[name_length+1] = 0; // force null termination\n        m_CompressorName = (const char*)(&compressor_name[1]);\n    }\n\n    stream.ReadUI16(m_Depth);\n    stream.ReadUI16(m_Predefined3);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_VisualSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n        \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n\n    // predefined1\n    result = stream.WriteUI16(m_Predefined1);\n    if (AP4_FAILED(result)) return result;\n    \n    // reserved2\n    result = stream.WriteUI16(m_Reserved2);\n    if (AP4_FAILED(result)) return result;\n    \n    // predefined2\n    result = stream.Write(m_Predefined2, sizeof(m_Predefined2));\n    if (AP4_FAILED(result)) return result;\n    \n    // width\n    result = stream.WriteUI16(m_Width);\n    if (AP4_FAILED(result)) return result;\n    \n    // height\n    result = stream.WriteUI16(m_Height);\n    if (AP4_FAILED(result)) return result;\n    \n    // horizontal resolution\n    result = stream.WriteUI32(m_HorizResolution);\n    if (AP4_FAILED(result)) return result;\n    \n    // vertical resolution\n    result = stream.WriteUI32(m_VertResolution);\n    if (AP4_FAILED(result)) return result;\n    \n    // reserved3\n    result = stream.WriteUI32(m_Reserved3);\n    if (AP4_FAILED(result)) return result;\n    \n    // frame count\n    result = stream.WriteUI16(m_FrameCount);\n    if (AP4_FAILED(result)) return result;\n    \n    // compressor name\n    unsigned char compressor_name[32];\n    unsigned int name_length = m_CompressorName.GetLength();\n    if (name_length > 31) name_length = 31;\n    compressor_name[0] = (unsigned char)name_length;\n    for (unsigned int i=0; i<name_length; i++) {\n        compressor_name[i+1] = m_CompressorName[i];\n    }\n    for (unsigned int i=name_length+1; i<32; i++) {\n        compressor_name[i] = 0;\n    }\n    result = stream.Write(compressor_name, 32);\n    if (AP4_FAILED(result)) return result;\n    \n    // depth\n    result = stream.WriteUI16(m_Depth);\n    if (AP4_FAILED(result)) return result;\n    \n    // predefined3\n    result = stream.WriteUI16(m_Predefined3);\n    if (AP4_FAILED(result)) return result;\n    \n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_VisualSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // dump the fields of the base class\n    AP4_SampleEntry::InspectFields(inspector);\n\n    // fields\n    inspector.AddField(\"width\", m_Width);\n    inspector.AddField(\"height\", m_Height);\n    inspector.AddField(\"compressor\", m_CompressorName.GetChars());\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_VisualSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_VisualSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_GenericVideoSampleDescription(\n        m_Type,\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry(\n    AP4_UI32          type,\n    AP4_UI16          width,\n    AP4_UI16          height,\n    AP4_UI16          depth,\n    const char*       compressor_name,\n    AP4_EsDescriptor* descriptor) :\n    AP4_VisualSampleEntry(type, \n                          width, \n                          height, \n                          depth, \n                          compressor_name)\n{\n    if (descriptor) AddChild(new AP4_EsdsAtom(descriptor));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry\n+---------------------------------------------------------------------*/\nAP4_MpegVideoSampleEntry::AP4_MpegVideoSampleEntry(\n    AP4_UI32         type,\n    AP4_Size         size,\n    AP4_ByteStream&  stream,\n    AP4_AtomFactory& atom_factory) :\n    AP4_VisualSampleEntry(type, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_MpegVideoSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_MpegVideoSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_MpegVideoSampleDescription(\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        AP4_DYNAMIC_CAST(AP4_EsdsAtom, GetChild(AP4_ATOM_TYPE_ESDS)));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4vSampleEntry::AP4_Mp4vSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4vSampleEntry::AP4_Mp4vSampleEntry(AP4_UI16          width,\n                                         AP4_UI16          height,\n                                         AP4_UI16          depth,\n                                         const char*       compressor_name,\n                                         AP4_EsDescriptor* descriptor) :\n    AP4_MpegVideoSampleEntry(AP4_ATOM_TYPE_MP4V, \n                             width, \n                             height, \n                             depth, \n                             compressor_name,\n                             descriptor)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_Mp4vSampleEntry::AP4_Mp4aSampleEntry\n+---------------------------------------------------------------------*/\nAP4_Mp4vSampleEntry::AP4_Mp4vSampleEntry(AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_MpegVideoSampleEntry(AP4_ATOM_TYPE_MP4V, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AvcSampleEntry::AP4_AvcSSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AvcSampleEntry::AP4_AvcSampleEntry(AP4_UI32            format,\n                                       AP4_UI16            width,\n                                       AP4_UI16            height,\n                                       AP4_UI16            depth,\n                                       const char*         compressor_name,\n                                       const AP4_AtomParent* details) :\n    AP4_VisualSampleEntry(format,\n                          width, \n                          height, \n                          depth, \n                          compressor_name,\n                          details)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AvcSampleEntry::AP4_AvcSampleEntry\n+---------------------------------------------------------------------*/\nAP4_AvcSampleEntry::AP4_AvcSampleEntry(AP4_UI32         format,\n                                       AP4_Size         size,\n                                       AP4_ByteStream&  stream,\n                                       AP4_AtomFactory& atom_factory) :\n    AP4_VisualSampleEntry(format, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HevcSampleEntry::AP4_HevcSSampleEntry\n+---------------------------------------------------------------------*/\nAP4_HevcSampleEntry::AP4_HevcSampleEntry(AP4_UI32            format,\n                                         AP4_UI16            width,\n                                         AP4_UI16            height,\n                                         AP4_UI16            depth,\n                                         const char*         compressor_name,\n                                         const AP4_AtomParent* details) :\n    AP4_VisualSampleEntry(format,\n                          width, \n                          height, \n                          depth, \n                          compressor_name,\n                          details)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_AvcSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_AvcSampleEntry::ToSampleDescription()\n{\n    return new AP4_AvcSampleDescription(\n        m_Type,\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HevcSampleEntry::AP4_HevcSampleEntry\n+---------------------------------------------------------------------*/\nAP4_HevcSampleEntry::AP4_HevcSampleEntry(AP4_UI32         format,\n                                         AP4_Size         size,\n                                         AP4_ByteStream&  stream,\n                                         AP4_AtomFactory& atom_factory) :\n    AP4_VisualSampleEntry(format, size, stream, atom_factory)\n{\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HevcSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_HevcSampleEntry::ToSampleDescription()\n{\n    return new AP4_HevcSampleDescription(\n        m_Type,\n        m_Width,\n        m_Height,\n        m_Depth,\n        m_CompressorName.GetChars(),\n        this);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry\n+---------------------------------------------------------------------*/\nAP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry(AP4_UI16 hint_track_version,\n                                               AP4_UI16 highest_compatible_version,\n                                               AP4_UI32 max_packet_size,\n                                               AP4_UI32 timescale):\n    AP4_SampleEntry(AP4_ATOM_TYPE_RTP_),\n    m_HintTrackVersion(hint_track_version),\n    m_HighestCompatibleVersion(highest_compatible_version),\n    m_MaxPacketSize(max_packet_size)\n{\n    // build an atom for timescale\n    AddChild(new AP4_TimsAtom(timescale));\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry\n+---------------------------------------------------------------------*/\nAP4_RtpHintSampleEntry::AP4_RtpHintSampleEntry(AP4_Size         size,\n                                               AP4_ByteStream&  stream,\n                                               AP4_AtomFactory& atom_factory): \n    AP4_SampleEntry(AP4_ATOM_TYPE_RTP_, size)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_RtpHintSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize()+8;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_RtpHintSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // data\n    result = stream.ReadUI16(m_HintTrackVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadUI16(m_HighestCompatibleVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadUI32(m_MaxPacketSize);\n    if (AP4_FAILED(result)) return result;\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_RtpHintSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // data\n    result = stream.WriteUI16(m_HintTrackVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI16(m_HighestCompatibleVersion);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_MaxPacketSize);\n    if (AP4_FAILED(result)) return result;\n\n    return result;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_RtpHintSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_RtpHintSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // sample entry\n    AP4_SampleEntry::InspectFields(inspector);\n    \n    // fields\n    inspector.AddField(\"hint_track_version\", m_HintTrackVersion);\n    inspector.AddField(\"highest_compatible_version\", m_HighestCompatibleVersion);\n    inspector.AddField(\"max_packet_size\", m_MaxPacketSize);\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry\n+---------------------------------------------------------------------*/\nAP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry(\n    AP4_Atom::Type    format,\n    const char*       namespce,\n    const char*       schema_location,\n    const char*       image_mime_type) :\n    AP4_SampleEntry(format),\n    m_Namespace(namespce),\n    m_SchemaLocation(schema_location),\n    m_ImageMimeType(image_mime_type)\n{\n    SetSize(m_Size32+m_Namespace.GetLength()+1+m_SchemaLocation.GetLength()+1+m_ImageMimeType.GetLength()+1);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry\n+---------------------------------------------------------------------*/\nAP4_SubtitleSampleEntry::AP4_SubtitleSampleEntry(AP4_Atom::Type   format,\n                                                 AP4_Size         size,\n                                                 AP4_ByteStream&  stream,\n                                                 AP4_AtomFactory& atom_factory) :\n    AP4_SampleEntry(format, size)\n{\n    Read(stream, atom_factory);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::GetFieldsSize\n+---------------------------------------------------------------------*/\nAP4_Size\nAP4_SubtitleSampleEntry::GetFieldsSize()\n{\n    return AP4_SampleEntry::GetFieldsSize() +\n        3                                   +\n        m_Namespace.GetLength()             +\n        m_SchemaLocation.GetLength()        +\n        m_ImageMimeType.GetLength();\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::ReadFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SubtitleSampleEntry::ReadFields(AP4_ByteStream& stream)\n{\n    // sample entry\n    AP4_Result result = AP4_SampleEntry::ReadFields(stream);\n    if (result < 0) return result;\n\n    // read fields from this class\n    result = stream.ReadNullTerminatedString(m_Namespace);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadNullTerminatedString(m_SchemaLocation);\n    if (AP4_FAILED(result)) return result;\n    result = stream.ReadNullTerminatedString(m_ImageMimeType);\n    if (AP4_FAILED(result)) return result;\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SubtitleSampleEntry::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n        \n    // write the fields of the base class\n    result = AP4_SampleEntry::WriteFields(stream);\n    if (AP4_FAILED(result)) return result;\n    \n    // write fields from this class\n    result = stream.WriteString(m_Namespace.GetChars());\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI08(0);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteString(m_SchemaLocation.GetChars());\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI08(0);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteString(m_ImageMimeType.GetChars());\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI08(0);\n    if (AP4_FAILED(result)) return result;\n    \n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_SubtitleSampleEntry::InspectFields(AP4_AtomInspector& inspector)\n{\n    // dump the fields of the base class\n    AP4_SampleEntry::InspectFields(inspector);\n\n    // fields\n    inspector.AddField(\"namespace\",       m_Namespace.GetChars());\n    inspector.AddField(\"schema_location\", m_SchemaLocation.GetChars());\n    inspector.AddField(\"image_mime_type\", m_ImageMimeType.GetChars());\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_SubtitleSampleEntry::ToSampleDescription\n+---------------------------------------------------------------------*/\nAP4_SampleDescription*\nAP4_SubtitleSampleEntry::ToSampleDescription()\n{\n    // create a sample description\n    return new AP4_SubtitleSampleDescription(m_Type,\n                                             m_Namespace.GetChars(),\n                                             m_SchemaLocation.GetChars(),\n                                             m_ImageMimeType.GetChars());\n}\n\n"], "filenames": ["Source/C++/Core/Ap4SampleEntry.cpp"], "buggy_code_start_loc": [775], "buggy_code_end_loc": [782], "fixing_code_start_loc": [775], "fixing_code_end_loc": [782], "type": "CWE-843", "message": "AP4_VisualSampleEntry::ReadFields in Core/Ap4SampleEntry.cpp in Bento4 1.5.0-617 uses incorrect character data types, which causes a stack-based buffer underflow and out-of-bounds write, leading to denial of service (application crash) or possibly unspecified other impact.", "other": {"cve": {"id": "CVE-2017-14639", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-21T17:29:00.200", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "AP4_VisualSampleEntry::ReadFields in Core/Ap4SampleEntry.cpp in Bento4 1.5.0-617 uses incorrect character data types, which causes a stack-based buffer underflow and out-of-bounds write, leading to denial of service (application crash) or possibly unspecified other impact."}, {"lang": "es", "value": "AP4_VisualSampleEntry::ReadFields en Core/Ap4SampleEntry.cpp en Bento4 1.5.0-617 utiliza datos de tipo car\u00e1cter incorrectos, lo que puede provocar un subdesbordamiento de b\u00fafer basado en pila y una escritura fuera de l\u00edmites, desembocando en una denegaci\u00f3n de servicio (cierre inesperado de la aplicaci\u00f3n) o incluso otro impacto no especificado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-843"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bento4:bento4:1.5.0-617:*:*:*:*:*:*:*", "matchCriteriaId": "E91AC306-5354-4B0C-B481-CBA451648D90"}]}]}], "references": [{"url": "https://blogs.gentoo.org/ago/2017/09/14/bento4-stack-based-buffer-underflow-in-ap4_visualsampleentryreadfields-ap4sampleentry-cpp/", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/axiomatic-systems/Bento4/commit/03d1222ab9c2ce779cdf01bdb96cdd69cbdcfeda", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/axiomatic-systems/Bento4/issues/190", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/axiomatic-systems/Bento4/commit/03d1222ab9c2ce779cdf01bdb96cdd69cbdcfeda"}}