{"buggy_code": ["<?php\r\nheader(\"Content-type: text/css\", true);\r\n\r\n/**\r\n * Refetches CSS as it was hosted on our server.\r\n * I can swear there is some bugs regarding relative CSS and base URL path.\r\n * This script is required if LHC is hosted on HTTPS but site itself is hosted on HTTP, because browser forbids downloading content from insecure site except images\r\n * themself\r\n * */\r\nif ($Params['user_parameters_unordered']['cobrowsemode'] == 'onlineuser'){\r\n    $ouser = erLhcoreClassModelChatOnlineUser::fetch($Params['user_parameters']['chat_id']);\r\n    $browse = erLhcoreClassCoBrowse::getBrowseInstanceByOnlineUser($ouser);\r\n} else {\r\n    $chat = erLhcoreClassChat::getSession()->load('erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n    $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n}\r\n\r\n$url = parse_url($_GET['base']);\r\n\r\n// Some basic validation\r\nif (isset($url['host']) && $url['host'] != '' && strpos($_GET['css'], $_SERVER['HTTP_HOST']) === false) {\r\n    $ch = curl_init();\r\n        \r\n    $urlCSS = parse_url($_GET['css']);\r\n   \r\n    // Just our attempt to fix CSS, BaseURL, Relative path madness\r\n    if (! isset($urlCSS['host']) || $urlCSS['host'] == '') {\r\n        if (strpos($_GET['css'], '../') !== false) {            \r\n            $numberOfTime = substr_count($_GET['css'], '../');\r\n            $match = str_replace('../', '', $_GET['css']);  \r\n                      \r\n            $parts = explode('/', rtrim($_GET['base'],'/'));            \r\n            $imagePathToCss = array_slice($parts, 0, count($parts) - $numberOfTime);\r\n            \r\n            $urlCSSDownload = implode('/', $imagePathToCss) . $match;                      \r\n        } else {\r\n            $urlCSSDownload = $url['scheme'] . '://' . $url['host'] . '/' . ltrim($_GET['css'], '/');\r\n        }\r\n    } else { \r\n        $urlCSSDownload = $_GET['css'];\r\n    }\r\n    \r\n    curl_setopt($ch, CURLOPT_URL, $urlCSSDownload);\r\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\r\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\r\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\r\n    curl_setopt($ch, CURLOPT_REFERER, $_GET['base']);\r\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 GTB5');\r\n    $cssContent = curl_exec($ch);\r\n\r\n    if ($cssContent !== false) {        \r\n        if (preg_match_all(\"/url\\(\\s*[\\'|\\\"]?([A-Za-z0-9_\\-\\/\\.\\\\%?&#]+)[\\'|\\\"]?\\s*\\)/ix\", $cssContent, $urlMatches)) {\r\n            $urlMatches = array_unique($urlMatches[1]);\r\n            foreach ($urlMatches as $match) {\r\n                $match = str_replace('\\\\', '/', $match);\r\n                // Replace path if it is realtive\r\n                if (strpos($match, 'http') === false) {\r\n                    $appendMatch = '';\r\n                    $matchOriginal = $match;\r\n                    \r\n                    if (strpos($match, '?') !== false) {\r\n                        $matchParts = explode('?', $match);\r\n                        $match = $matchParts[0];\r\n                        $appendMatch = '?' . $matchParts[1];\r\n                    }\r\n                    \r\n                    // Fix relative path\r\n                    if (strpos($match, '../') !== false) {\r\n                        $numberOfTime = substr_count($match, '../');\r\n                        $match = str_replace('../', '', $match);\r\n                        \r\n                        $parts = explode('/', $_GET['css']);\r\n                        array_pop($parts);\r\n                        \r\n                        $imagePathToCss = array_slice($parts, 0, count($parts) - $numberOfTime);\r\n                        \r\n                        $cssContent = str_replace($matchOriginal, $url['scheme'] . '://' . str_replace('//', '/', $url['host'] . '/' . implode('/', $imagePathToCss) . '/' . $match . $appendMatch), $cssContent);\r\n                    } else { // Absolute path\r\n                        $cssContent = str_replace($matchOriginal, $url['scheme'] . '://' . str_replace('//', '/', $url['host'] . '/' . $match . $appendMatch), $cssContent);\r\n                    }\r\n                }\r\n            }\r\n        }        \r\n    }\r\n    echo $cssContent;\r\n}\r\n\r\nexit();\r\n?>"], "fixing_code": ["<?php\r\nheader(\"Content-type: text/css\", true);\r\n\r\n/**\r\n * Refetches CSS as it was hosted on our server.\r\n * I can swear there is some bugs regarding relative CSS and base URL path.\r\n * This script is required if LHC is hosted on HTTPS but site itself is hosted on HTTP, because browser forbids downloading content from insecure site except images\r\n * themself\r\n * */\r\nif ($Params['user_parameters_unordered']['cobrowsemode'] == 'onlineuser'){\r\n    $ouser = erLhcoreClassModelChatOnlineUser::fetch($Params['user_parameters']['chat_id']);\r\n    $browse = erLhcoreClassCoBrowse::getBrowseInstanceByOnlineUser($ouser);\r\n} else {\r\n    $chat = erLhcoreClassChat::getSession()->load('erLhcoreClassModelChat', $Params['user_parameters']['chat_id']);\r\n    $browse = erLhcoreClassCoBrowse::getBrowseInstance($chat);\r\n}\r\n\r\n$url = parse_url($_GET['base']);\r\n\r\n// Only http/https supported\r\nif (!in_array($url['scheme'],['http','https']) || (isset($url['port']) && !in_array($url['port'],[80,443]))) {\r\n    exit;\r\n}\r\n\r\n// Some basic validation\r\nif (isset($url['host']) && $url['host'] != '' && strpos($_GET['css'], $_SERVER['HTTP_HOST']) === false) {\r\n\r\n    $urlCSS = parse_url($_GET['css']);\r\n\r\n    // Just our attempt to fix CSS, BaseURL, Relative path madness\r\n    if (! isset($urlCSS['host']) || $urlCSS['host'] == '') {\r\n        if (strpos($_GET['css'], '../') !== false) {            \r\n            $numberOfTime = substr_count($_GET['css'], '../');\r\n            $match = str_replace('../', '', $_GET['css']);  \r\n                      \r\n            $parts = explode('/', rtrim($_GET['base'],'/'));            \r\n            $imagePathToCss = array_slice($parts, 0, count($parts) - $numberOfTime);\r\n            \r\n            $urlCSSDownload = implode('/', $imagePathToCss) . $match;                      \r\n        } else {\r\n            $urlCSSDownload = $url['scheme'] . '://' . $url['host'] . '/' . ltrim($_GET['css'], '/');\r\n        }\r\n    } else {\r\n\r\n        if (!in_array($urlCSS['scheme'],['http','https']) || (isset($urlCSS['port']) && !in_array($urlCSS['port'],[80,443]))) {\r\n            exit;\r\n        }\r\n\r\n        $urlCSSDownload = $_GET['css'];\r\n    }\r\n\r\n    $ch = curl_init();\r\n    curl_setopt($ch, CURLOPT_URL, $urlCSSDownload);\r\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\r\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);\r\n    curl_setopt($ch, CURLOPT_TIMEOUT, 5);\r\n    curl_setopt($ch, CURLOPT_REFERER, $_GET['base']);\r\n    curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 GTB5');\r\n    curl_setopt($ch, CURLOPT_HEADER, true);\r\n    $response = curl_exec($ch);\r\n\r\n    if (curl_errno($ch)) {   // should be 0\r\n        curl_close($ch);\r\n        exit;\r\n    }\r\n\r\n    $curl_info = curl_getinfo($ch);\r\n    $contentType = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);\r\n    $header_size = $curl_info['header_size'];\r\n\r\n    $cssContent = substr($response, $header_size);\r\n\r\n    if ($contentType != 'text/css') {\r\n        exit;\r\n    }\r\n\r\n    if ($cssContent !== false) {        \r\n        if (preg_match_all(\"/url\\(\\s*[\\'|\\\"]?([A-Za-z0-9_\\-\\/\\.\\\\%?&#]+)[\\'|\\\"]?\\s*\\)/ix\", $cssContent, $urlMatches)) {\r\n            $urlMatches = array_unique($urlMatches[1]);\r\n            foreach ($urlMatches as $match) {\r\n                $match = str_replace('\\\\', '/', $match);\r\n                // Replace path if it is realtive\r\n                if (strpos($match, 'http') === false) {\r\n                    $appendMatch = '';\r\n                    $matchOriginal = $match;\r\n                    \r\n                    if (strpos($match, '?') !== false) {\r\n                        $matchParts = explode('?', $match);\r\n                        $match = $matchParts[0];\r\n                        $appendMatch = '?' . $matchParts[1];\r\n                    }\r\n                    \r\n                    // Fix relative path\r\n                    if (strpos($match, '../') !== false) {\r\n                        $numberOfTime = substr_count($match, '../');\r\n                        $match = str_replace('../', '', $match);\r\n                        \r\n                        $parts = explode('/', $_GET['css']);\r\n                        array_pop($parts);\r\n                        \r\n                        $imagePathToCss = array_slice($parts, 0, count($parts) - $numberOfTime);\r\n                        \r\n                        $cssContent = str_replace($matchOriginal, $url['scheme'] . '://' . str_replace('//', '/', $url['host'] . '/' . implode('/', $imagePathToCss) . '/' . $match . $appendMatch), $cssContent);\r\n                    } else { // Absolute path\r\n                        $cssContent = str_replace($matchOriginal, $url['scheme'] . '://' . str_replace('//', '/', $url['host'] . '/' . $match . $appendMatch), $cssContent);\r\n                    }\r\n                }\r\n            }\r\n        }        \r\n    }\r\n    echo $cssContent;\r\n}\r\n\r\nexit();\r\n?>"], "filenames": ["lhc_web/modules/lhcobrowse/proxycss.php"], "buggy_code_start_loc": [19], "buggy_code_end_loc": [50], "fixing_code_start_loc": [20], "fixing_code_end_loc": [76], "type": "CWE-918", "message": "SSRF on index.php/cobrowse/proxycss/ in GitHub repository livehelperchat/livehelperchat prior to 3.96.", "other": {"cve": {"id": "CVE-2022-1191", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-31T09:15:10.867", "lastModified": "2022-04-08T01:50:01.610", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SSRF on index.php/cobrowse/proxycss/ in GitHub repository livehelperchat/livehelperchat prior to 3.96."}, {"lang": "es", "value": "Una vulnerabilidad de tipo SSRF en index.php/cobrowse/proxycss/ en el repositorio de GitHub livehelperchat/livehelperchat versiones anteriores a 3.96"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.96", "matchCriteriaId": "A501764D-64D8-4CD8-9AE9-9B340EDD3DE4"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/c41f283a2c1b46c42dd2af16ecbeaedd2fe1f5df", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7264a2e1-17e7-4244-93e4-49ec14f282b3", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/c41f283a2c1b46c42dd2af16ecbeaedd2fe1f5df"}}