{"buggy_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * CSV API\n *\n * @package CoreAPI\n * @subpackage CSVAPI\n * @copyright Copyright 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses authentication_api.php\n * @uses bug_api.php\n * @uses category_api.php\n * @uses config_api.php\n * @uses constant_inc.php\n * @uses file_api.php\n * @uses helper_api.php\n * @uses project_api.php\n * @uses user_api.php\n *\n * @noinspection PhpDocMissingThrowsInspection\n */\n\nuse Mantis\\Exceptions\\ClientException;\n\nrequire_api( 'authentication_api.php' );\nrequire_api( 'bug_api.php' );\nrequire_api( 'category_api.php' );\nrequire_api( 'config_api.php' );\nrequire_api( 'constant_inc.php' );\nrequire_api( 'file_api.php' );\nrequire_api( 'helper_api.php' );\nrequire_api( 'project_api.php' );\nrequire_api( 'user_api.php' );\n\n/**\n * Emits the headers and byte order marker.  This must be called at the beginning\n * of scripts that export CSV file before any other content is called.\n *\n * @param  string  $p_filename The csv filename and extension.\n * @return void\n */\nfunction csv_start( $p_filename ) {\n\t$t_filename = urlencode( file_clean_name( $p_filename ) );\n\n\theader( 'Pragma: public' );\n\theader( 'Content-Encoding: UTF-8' );\n\theader( 'Content-Type: text/csv; name=' . $t_filename . ';charset=UTF-8' );\n\theader( 'Content-Transfer-Encoding: BASE64;' );\n\theader( 'Content-Disposition: attachment; filename=\"' . $t_filename . '\"' );\n\n\techo UTF8_BOM;\n}\n\n/**\n * get the csv file new line, can be moved to config in the future\n * @return string containing new line character\n * @access public\n */\nfunction csv_get_newline() {\n\treturn \"\\r\\n\";\n}\n\n/**\n * get the csv file separator, can be moved to config in the future\n * @return string\n * @access public\n */\nfunction csv_get_separator() {\n\tstatic $s_separator = null;\n\tif( $s_separator === null ) {\n\t\t$s_separator = config_get( 'csv_separator' );\n\t}\n\n\treturn $s_separator;\n}\n\n/**\n * if all projects selected, default to <username>.csv, otherwise default to\n * <projectname>.csv.\n * @return string filename\n * @access public\n * @throws ClientException\n */\nfunction csv_get_default_filename() {\n\t$t_current_project_id = helper_get_current_project();\n\n\tif( ALL_PROJECTS == $t_current_project_id ) {\n\t\t$t_filename = user_get_name( auth_get_current_user_id() );\n\t} else {\n\t\t$t_filename = project_get_field( $t_current_project_id, 'name' );\n\t}\n\n\treturn $t_filename . '.csv';\n}\n\n/**\n * escape a string before writing it to csv file.\n * @param string $p_string String to escape.\n * @return string\n * @access public\n */\nfunction csv_escape_string( $p_string ) {\n\t$t_escaped = str_split( '\"' . csv_get_separator() . csv_get_newline() );\n\t$t_must_escape = false;\n\twhile( ( $t_char = current( $t_escaped ) ) !== false && !$t_must_escape ) {\n\t\t$t_must_escape = strpos( $p_string, $t_char ) !== false;\n\t\tnext( $t_escaped );\n\t}\n\tif( $t_must_escape ) {\n\t\t$p_string = '\"' . str_replace( '\"', '\"\"', $p_string ) . '\"';\n\t}\n\n\treturn $p_string;\n}\n\n/**\n * An array of column names that are used to identify fields to include and in which order.\n * @return array\n * @access public\n */\nfunction csv_get_columns() {\n\treturn helper_get_columns_to_view( COLUMNS_TARGET_CSV_PAGE );\n}\n\n/**\n * Gets the formatted value for the specified issue id, project and custom field.\n * @param integer $p_issue_id     The issue id.\n * @param integer $p_project_id   The project id.\n * @param string  $p_custom_field The custom field name (without 'custom_' prefix).\n * @return string The custom field value.\n */\nfunction csv_format_custom_field( $p_issue_id, $p_project_id, $p_custom_field ) {\n\t$t_field_id = custom_field_get_id_from_name( $p_custom_field );\n\n\tif( $t_field_id === false ) {\n\t\t$t_value = '@' . $p_custom_field . '@';\n\t} else if( custom_field_is_linked( $t_field_id, $p_project_id ) ) {\n\t\t$t_def = custom_field_get_definition( $t_field_id );\n\t\t$t_value = string_custom_field_value( $t_def, $t_field_id, $p_issue_id );\n\t} else {\n\t\t# field is not linked to project\n\t\t$t_value = '';\n\t}\n\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * Gets the formatted value for the specified plugin column value.\n * @param string  $p_column The plugin column name.\n * @param BugData $p_bug    A bug object to print the column for - needed for\n *                          the display function of the plugin column.\n * @return string The plugin column value.\n */\nfunction csv_format_plugin_column_value( $p_column, BugData $p_bug ) {\n\t$t_plugin_columns = columns_get_plugin_columns();\n\n\tif( !isset( $t_plugin_columns[$p_column] ) ) {\n\t\t$t_value = '';\n\t} else {\n\t\t$t_column_object = $t_plugin_columns[$p_column];\n\t\t$t_value = $t_column_object->value( $p_bug );\n\t}\n\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * returns the formatted bug id\n * @param BugData $p_bug A BugData object.\n * @return string csv formatted bug id\n * @access public\n */\nfunction csv_format_id( BugData $p_bug ) {\n\treturn bug_format_id( $p_bug->id );\n}\n\n/**\n * returns the project name corresponding to the supplied bug\n * @param BugData $p_bug A BugData object.\n * @return string csv formatted project name\n * @access public\n */\nfunction csv_format_project_id( BugData $p_bug ) {\n\treturn csv_escape_string( project_get_name( $p_bug->project_id ) );\n}\n\n/**\n * returns the reporter name corresponding to the supplied bug\n * @param BugData $p_bug A BugData object.\n * @return string formatted user name\n * @access public\n */\nfunction csv_format_reporter_id( BugData $p_bug ) {\n\treturn csv_escape_string( user_get_name( $p_bug->reporter_id ) );\n}\n\n/**\n * returns the handler name corresponding to the supplied bug\n * @param BugData $p_bug A BugData object.\n * @return string formatted user name\n * @access public\n */\nfunction csv_format_handler_id( BugData $p_bug ) {\n\tif( $p_bug->handler_id > 0 ) {\n\t\treturn csv_escape_string( user_get_name( $p_bug->handler_id ) );\n\t}\n\treturn '';\n}\n\n/**\n * return the priority string\n * @param BugData $p_bug A BugData object.\n * @return string formatted priority string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_priority( BugData $p_bug ) {\n\t$t_priority = get_enum_element( 'priority',\n\t\t$p_bug->priority,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_priority );\n}\n\n/**\n * return the severity string\n * @param BugData $p_bug A BugData object.\n * @return string formatted severity string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_severity( BugData $p_bug ) {\n\t$t_severity = get_enum_element( 'severity',\n\t\t$p_bug->severity,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_severity );\n}\n\n/**\n * return the reproducibility string\n * @param BugData $p_bug A BugData object.\n * @return string formatted reproducibility string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_reproducibility( BugData $p_bug ) {\n\t$t_reproducibility = get_enum_element( 'reproducibility',\n\t\t$p_bug->reproducibility,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_reproducibility );\n}\n\n/**\n * return the version\n * @param BugData $p_bug A BugData object.\n * @return string formatted version string\n * @access public\n */\nfunction csv_format_version( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->version );\n}\n\n/**\n * return the fixed_in_version\n * @param BugData $p_bug A BugData object.\n * @return string formatted fixed in version string\n * @access public\n */\nfunction csv_format_fixed_in_version( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->fixed_in_version );\n}\n\n/**\n * return the target_version\n * @param BugData $p_bug A BugData object.\n * @return string formatted target version string\n * @access public\n */\nfunction csv_format_target_version( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->target_version );\n}\n\n/**\n * return the tags\n * @param BugData $p_bug A BugData object.\n * @return string formatted tags string\n * @access public\n */\nfunction csv_format_tags( BugData $p_bug ) {\n\t$t_value = '';\n\n\tif( access_has_bug_level( config_get( 'tag_view_threshold' ), $p_bug->id ) ) {\n\t\t$t_value = tag_bug_get_all( $p_bug->id );\n\t}\n\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * return the projection\n * @param BugData $p_bug A BugData object.\n * @return string formatted projection string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_projection( BugData $p_bug ) {\n\t$t_projection = get_enum_element( 'projection',\n\t\t$p_bug->projection,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_projection );\n}\n\n/**\n * return the category\n * @param BugData $p_bug A BugData object.\n * @return string formatted category string\n * @access public\n */\nfunction csv_format_category_id( BugData $p_bug ) {\n\treturn csv_escape_string( category_full_name( $p_bug->category_id, false ) );\n}\n\n/**\n * return the date submitted\n * @param BugData $p_bug A BugData object.\n * @return string formatted date\n * @access public\n */\nfunction csv_format_date_submitted( BugData $p_bug ) {\n\tstatic $s_date_format = null;\n\tif( $s_date_format === null ) {\n\t\t$s_date_format = config_get( 'short_date_format' );\n\t}\n\treturn date( $s_date_format, $p_bug->date_submitted );\n}\n\n/**\n * return the eta\n * @param BugData $p_bug A BugData object.\n * @return string formatted eta\n * @access public\n * @throws ClientException\n */\nfunction csv_format_eta( BugData $p_bug ) {\n\t$t_eta = get_enum_element( 'eta',\n\t\t$p_bug->eta,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_eta );\n}\n\n/**\n * return the operating system\n * @param BugData $p_bug A BugData object.\n * @return string formatted operating system\n * @access public\n */\nfunction csv_format_os( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->os );\n}\n\n/**\n * return the os build (os version)\n * @param BugData $p_bug A BugData object.\n * @return string formatted operating system build\n * @access public\n */\nfunction csv_format_os_build( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->os_build );\n}\n\n/**\n * return the build\n * @param BugData $p_bug A BugData object.\n * @return string formatted build\n * @access public\n */\nfunction csv_format_build( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->build );\n}\n\n/**\n * return the platform\n * @param BugData $p_bug A BugData object.\n * @return string formatted platform\n * @access public\n */\nfunction csv_format_platform( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->platform );\n}\n\n/**\n * return the view state (either private or public)\n * @param BugData $p_bug A BugData object.\n * @return string formatted view state\n * @access public\n * @throws ClientException\n */\nfunction csv_format_view_state( BugData $p_bug ) {\n\t$t_view_state = get_enum_element( 'view_state',\n\t\t$p_bug->view_state,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_view_state );\n}\n\n/**\n * return the last updated date\n * @param BugData $p_bug A BugData object.\n * @return string formatted last updated string\n * @access public\n */\nfunction csv_format_last_updated( BugData $p_bug ) {\n\tstatic $s_date_format = null;\n\tif( $s_date_format === null ) {\n\t\t$s_date_format = config_get( 'short_date_format' );\n\t}\n\treturn date( $s_date_format, $p_bug->last_updated );\n}\n\n/**\n * return the summary\n * @param BugData $p_bug A BugData object.\n * @return string formatted summary\n * @access public\n */\nfunction csv_format_summary( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->summary );\n}\n\n/**\n * return the description\n * @param BugData $p_bug A BugData object.\n * @return string formatted description\n * @access public\n */\nfunction csv_format_description( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->description );\n}\n\n/**\n * Return the notes associated with the specified bug as a string.\n *\n * @param BugData $p_bug A BugData object.\n * @return string The notes formatted as a string.\n * @access public\n */\nfunction csv_format_notes( BugData $p_bug ) {\n\t$t_notes = bugnote_get_all_visible_as_string( $p_bug->id, 'DESC',0 );\n\treturn csv_escape_string( $t_notes );\n}\n\n/**\n * return the steps to reproduce\n * @param BugData $p_bug A BugData object.\n * @return string formatted steps to reproduce\n * @access public\n */\nfunction csv_format_steps_to_reproduce( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->steps_to_reproduce );\n}\n\n/**\n * return the additional information\n * @param BugData $p_bug A BugData object.\n * @return string formatted additional information\n * @access public\n */\nfunction csv_format_additional_information( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->additional_information );\n}\n\n/**\n * return the status string\n * @param BugData $p_bug A BugData object.\n * @return string formatted status\n * @access public\n * @throws ClientException\n */\nfunction csv_format_status( BugData $p_bug ) {\n\t$t_status = get_enum_element( 'status',\n\t\t$p_bug->status,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_status );\n}\n\n/**\n * return the resolution string\n * @param BugData $p_bug A BugData object.\n * @return string formatted resolution string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_resolution( BugData $p_bug ) {\n\t$t_resolution = get_enum_element( 'resolution',\n\t\t$p_bug->resolution,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_resolution );\n}\n\n/**\n * return the duplicate bug id\n * @param BugData $p_bug A BugData object.\n * @return string formatted bug id\n * @access public\n */\nfunction csv_format_duplicate_id( BugData $p_bug ) {\n\treturn bug_format_id( $p_bug->duplicate_id );\n}\n\n/**\n * return the selection\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n * @noinspection PhpUnusedParameterInspection\n */\nfunction csv_format_selection( BugData $p_bug ) {\n\treturn csv_escape_string( '' );\n}\n\n/**\n * return the due date column\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_due_date( BugData $p_bug ) {\n\tstatic $s_date_format = null;\n\tif( $s_date_format === null ) {\n\t\t$s_date_format = config_get( 'short_date_format' );\n\t}\n\t\n\t$t_value = '';\n\tif ( !date_is_null( $p_bug->due_date )\n\t\t&& access_has_bug_level( config_get( 'due_date_view_threshold' ), $p_bug->id )\n\t) {\n\t\t$t_value = date( $s_date_format, $p_bug->due_date );\n\t}\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * return the sponsorship total for an issue\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_sponsorship_total( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->sponsorship_total );\n}\n\n/**\n * return the attachment count for an issue\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_attachment_count( BugData $p_bug ) {\n\t# Check for attachments\n\t$t_attachment_count = 0;\n\tif( file_can_view_bug_attachments( $p_bug->id ) ) {\n\t\t$t_attachment_count = file_bug_attachment_count( $p_bug->id );\n\t}\n\treturn csv_escape_string( $t_attachment_count );\n}\n\n/**\n * return the bug note count for an issue\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_bugnotes_count( BugData $p_bug ) {\n\t# grab the bugnote count\n\t$t_bugnote_stats = bug_get_bugnote_stats( $p_bug->id );\n\tif( $t_bugnote_stats ) {\n\t\t$t_bugnote_count = $t_bugnote_stats['count'];\n\t} else {\n\t\t$t_bugnote_count = 0;\n\t}\n\treturn csv_escape_string( $t_bugnote_count );\n}\n"], "fixing_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * CSV API\n *\n * @package CoreAPI\n * @subpackage CSVAPI\n * @copyright Copyright 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses authentication_api.php\n * @uses bug_api.php\n * @uses category_api.php\n * @uses config_api.php\n * @uses constant_inc.php\n * @uses file_api.php\n * @uses helper_api.php\n * @uses project_api.php\n * @uses user_api.php\n *\n * @noinspection PhpDocMissingThrowsInspection\n */\n\nuse Mantis\\Exceptions\\ClientException;\n\nrequire_api( 'authentication_api.php' );\nrequire_api( 'bug_api.php' );\nrequire_api( 'category_api.php' );\nrequire_api( 'config_api.php' );\nrequire_api( 'constant_inc.php' );\nrequire_api( 'file_api.php' );\nrequire_api( 'helper_api.php' );\nrequire_api( 'project_api.php' );\nrequire_api( 'user_api.php' );\n\n/**\n * Emits the headers and byte order marker.  This must be called at the beginning\n * of scripts that export CSV file before any other content is called.\n *\n * @param  string  $p_filename The csv filename and extension.\n * @return void\n */\nfunction csv_start( $p_filename ) {\n\t$t_filename = urlencode( file_clean_name( $p_filename ) );\n\n\theader( 'Pragma: public' );\n\theader( 'Content-Encoding: UTF-8' );\n\theader( 'Content-Type: text/csv; name=' . $t_filename . ';charset=UTF-8' );\n\theader( 'Content-Transfer-Encoding: BASE64;' );\n\theader( 'Content-Disposition: attachment; filename=\"' . $t_filename . '\"' );\n\n\techo UTF8_BOM;\n}\n\n/**\n * get the csv file new line, can be moved to config in the future\n * @return string containing new line character\n * @access public\n */\nfunction csv_get_newline() {\n\treturn \"\\r\\n\";\n}\n\n/**\n * get the csv file separator, can be moved to config in the future\n * @return string\n * @access public\n */\nfunction csv_get_separator() {\n\tstatic $s_separator = null;\n\tif( $s_separator === null ) {\n\t\t$s_separator = config_get( 'csv_separator' );\n\t}\n\n\treturn $s_separator;\n}\n\n/**\n * if all projects selected, default to <username>.csv, otherwise default to\n * <projectname>.csv.\n * @return string filename\n * @access public\n * @throws ClientException\n */\nfunction csv_get_default_filename() {\n\t$t_current_project_id = helper_get_current_project();\n\n\tif( ALL_PROJECTS == $t_current_project_id ) {\n\t\t$t_filename = user_get_name( auth_get_current_user_id() );\n\t} else {\n\t\t$t_filename = project_get_field( $t_current_project_id, 'name' );\n\t}\n\n\treturn $t_filename . '.csv';\n}\n\n/**\n * escape a string before writing it to csv file.\n * @param string $p_string String to escape.\n * @return string\n * @access public\n */\nfunction csv_escape_string( $p_string ) {\n\t# Prevent CSV injection by escaping text that could be interpreted as a formula\n\tif( $p_string && strpos( '=-+@', $p_string[0] ) !== false ) {\n\t\t# Prefixing with a tab rather than single quote, as Excel does not show\n\t\t# the tab visually in the cell.\n\t\t$p_string = \"\\t\" . $p_string;\n\t}\n\n\t$t_escaped = str_split( '\"' . csv_get_separator() . csv_get_newline() );\n\t$t_must_escape = false;\n\twhile( ( $t_char = current( $t_escaped ) ) !== false && !$t_must_escape ) {\n\t\t$t_must_escape = strpos( $p_string, $t_char ) !== false;\n\t\tnext( $t_escaped );\n\t}\n\tif( $t_must_escape ) {\n\t\t$p_string = '\"' . str_replace( '\"', '\"\"', $p_string ) . '\"';\n\t}\n\n\treturn $p_string;\n}\n\n/**\n * An array of column names that are used to identify fields to include and in which order.\n * @return array\n * @access public\n */\nfunction csv_get_columns() {\n\treturn helper_get_columns_to_view( COLUMNS_TARGET_CSV_PAGE );\n}\n\n/**\n * Gets the formatted value for the specified issue id, project and custom field.\n * @param integer $p_issue_id     The issue id.\n * @param integer $p_project_id   The project id.\n * @param string  $p_custom_field The custom field name (without 'custom_' prefix).\n * @return string The custom field value.\n */\nfunction csv_format_custom_field( $p_issue_id, $p_project_id, $p_custom_field ) {\n\t$t_field_id = custom_field_get_id_from_name( $p_custom_field );\n\n\tif( $t_field_id === false ) {\n\t\t$t_value = '@' . $p_custom_field . '@';\n\t} else if( custom_field_is_linked( $t_field_id, $p_project_id ) ) {\n\t\t$t_def = custom_field_get_definition( $t_field_id );\n\t\t$t_value = string_custom_field_value( $t_def, $t_field_id, $p_issue_id );\n\t} else {\n\t\t# field is not linked to project\n\t\t$t_value = '';\n\t}\n\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * Gets the formatted value for the specified plugin column value.\n * @param string  $p_column The plugin column name.\n * @param BugData $p_bug    A bug object to print the column for - needed for\n *                          the display function of the plugin column.\n * @return string The plugin column value.\n */\nfunction csv_format_plugin_column_value( $p_column, BugData $p_bug ) {\n\t$t_plugin_columns = columns_get_plugin_columns();\n\n\tif( !isset( $t_plugin_columns[$p_column] ) ) {\n\t\t$t_value = '';\n\t} else {\n\t\t$t_column_object = $t_plugin_columns[$p_column];\n\t\t$t_value = $t_column_object->value( $p_bug );\n\t}\n\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * returns the formatted bug id\n * @param BugData $p_bug A BugData object.\n * @return string csv formatted bug id\n * @access public\n */\nfunction csv_format_id( BugData $p_bug ) {\n\treturn bug_format_id( $p_bug->id );\n}\n\n/**\n * returns the project name corresponding to the supplied bug\n * @param BugData $p_bug A BugData object.\n * @return string csv formatted project name\n * @access public\n */\nfunction csv_format_project_id( BugData $p_bug ) {\n\treturn csv_escape_string( project_get_name( $p_bug->project_id ) );\n}\n\n/**\n * returns the reporter name corresponding to the supplied bug\n * @param BugData $p_bug A BugData object.\n * @return string formatted user name\n * @access public\n */\nfunction csv_format_reporter_id( BugData $p_bug ) {\n\treturn csv_escape_string( user_get_name( $p_bug->reporter_id ) );\n}\n\n/**\n * returns the handler name corresponding to the supplied bug\n * @param BugData $p_bug A BugData object.\n * @return string formatted user name\n * @access public\n */\nfunction csv_format_handler_id( BugData $p_bug ) {\n\tif( $p_bug->handler_id > 0 ) {\n\t\treturn csv_escape_string( user_get_name( $p_bug->handler_id ) );\n\t}\n\treturn '';\n}\n\n/**\n * return the priority string\n * @param BugData $p_bug A BugData object.\n * @return string formatted priority string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_priority( BugData $p_bug ) {\n\t$t_priority = get_enum_element( 'priority',\n\t\t$p_bug->priority,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_priority );\n}\n\n/**\n * return the severity string\n * @param BugData $p_bug A BugData object.\n * @return string formatted severity string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_severity( BugData $p_bug ) {\n\t$t_severity = get_enum_element( 'severity',\n\t\t$p_bug->severity,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_severity );\n}\n\n/**\n * return the reproducibility string\n * @param BugData $p_bug A BugData object.\n * @return string formatted reproducibility string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_reproducibility( BugData $p_bug ) {\n\t$t_reproducibility = get_enum_element( 'reproducibility',\n\t\t$p_bug->reproducibility,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_reproducibility );\n}\n\n/**\n * return the version\n * @param BugData $p_bug A BugData object.\n * @return string formatted version string\n * @access public\n */\nfunction csv_format_version( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->version );\n}\n\n/**\n * return the fixed_in_version\n * @param BugData $p_bug A BugData object.\n * @return string formatted fixed in version string\n * @access public\n */\nfunction csv_format_fixed_in_version( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->fixed_in_version );\n}\n\n/**\n * return the target_version\n * @param BugData $p_bug A BugData object.\n * @return string formatted target version string\n * @access public\n */\nfunction csv_format_target_version( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->target_version );\n}\n\n/**\n * return the tags\n * @param BugData $p_bug A BugData object.\n * @return string formatted tags string\n * @access public\n */\nfunction csv_format_tags( BugData $p_bug ) {\n\t$t_value = '';\n\n\tif( access_has_bug_level( config_get( 'tag_view_threshold' ), $p_bug->id ) ) {\n\t\t$t_value = tag_bug_get_all( $p_bug->id );\n\t}\n\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * return the projection\n * @param BugData $p_bug A BugData object.\n * @return string formatted projection string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_projection( BugData $p_bug ) {\n\t$t_projection = get_enum_element( 'projection',\n\t\t$p_bug->projection,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_projection );\n}\n\n/**\n * return the category\n * @param BugData $p_bug A BugData object.\n * @return string formatted category string\n * @access public\n */\nfunction csv_format_category_id( BugData $p_bug ) {\n\treturn csv_escape_string( category_full_name( $p_bug->category_id, false ) );\n}\n\n/**\n * return the date submitted\n * @param BugData $p_bug A BugData object.\n * @return string formatted date\n * @access public\n */\nfunction csv_format_date_submitted( BugData $p_bug ) {\n\tstatic $s_date_format = null;\n\tif( $s_date_format === null ) {\n\t\t$s_date_format = config_get( 'short_date_format' );\n\t}\n\treturn date( $s_date_format, $p_bug->date_submitted );\n}\n\n/**\n * return the eta\n * @param BugData $p_bug A BugData object.\n * @return string formatted eta\n * @access public\n * @throws ClientException\n */\nfunction csv_format_eta( BugData $p_bug ) {\n\t$t_eta = get_enum_element( 'eta',\n\t\t$p_bug->eta,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_eta );\n}\n\n/**\n * return the operating system\n * @param BugData $p_bug A BugData object.\n * @return string formatted operating system\n * @access public\n */\nfunction csv_format_os( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->os );\n}\n\n/**\n * return the os build (os version)\n * @param BugData $p_bug A BugData object.\n * @return string formatted operating system build\n * @access public\n */\nfunction csv_format_os_build( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->os_build );\n}\n\n/**\n * return the build\n * @param BugData $p_bug A BugData object.\n * @return string formatted build\n * @access public\n */\nfunction csv_format_build( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->build );\n}\n\n/**\n * return the platform\n * @param BugData $p_bug A BugData object.\n * @return string formatted platform\n * @access public\n */\nfunction csv_format_platform( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->platform );\n}\n\n/**\n * return the view state (either private or public)\n * @param BugData $p_bug A BugData object.\n * @return string formatted view state\n * @access public\n * @throws ClientException\n */\nfunction csv_format_view_state( BugData $p_bug ) {\n\t$t_view_state = get_enum_element( 'view_state',\n\t\t$p_bug->view_state,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_view_state );\n}\n\n/**\n * return the last updated date\n * @param BugData $p_bug A BugData object.\n * @return string formatted last updated string\n * @access public\n */\nfunction csv_format_last_updated( BugData $p_bug ) {\n\tstatic $s_date_format = null;\n\tif( $s_date_format === null ) {\n\t\t$s_date_format = config_get( 'short_date_format' );\n\t}\n\treturn date( $s_date_format, $p_bug->last_updated );\n}\n\n/**\n * return the summary\n * @param BugData $p_bug A BugData object.\n * @return string formatted summary\n * @access public\n */\nfunction csv_format_summary( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->summary );\n}\n\n/**\n * return the description\n * @param BugData $p_bug A BugData object.\n * @return string formatted description\n * @access public\n */\nfunction csv_format_description( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->description );\n}\n\n/**\n * Return the notes associated with the specified bug as a string.\n *\n * @param BugData $p_bug A BugData object.\n * @return string The notes formatted as a string.\n * @access public\n */\nfunction csv_format_notes( BugData $p_bug ) {\n\t$t_notes = bugnote_get_all_visible_as_string( $p_bug->id, 'DESC',0 );\n\treturn csv_escape_string( $t_notes );\n}\n\n/**\n * return the steps to reproduce\n * @param BugData $p_bug A BugData object.\n * @return string formatted steps to reproduce\n * @access public\n */\nfunction csv_format_steps_to_reproduce( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->steps_to_reproduce );\n}\n\n/**\n * return the additional information\n * @param BugData $p_bug A BugData object.\n * @return string formatted additional information\n * @access public\n */\nfunction csv_format_additional_information( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->additional_information );\n}\n\n/**\n * return the status string\n * @param BugData $p_bug A BugData object.\n * @return string formatted status\n * @access public\n * @throws ClientException\n */\nfunction csv_format_status( BugData $p_bug ) {\n\t$t_status = get_enum_element( 'status',\n\t\t$p_bug->status,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_status );\n}\n\n/**\n * return the resolution string\n * @param BugData $p_bug A BugData object.\n * @return string formatted resolution string\n * @access public\n * @throws ClientException\n */\nfunction csv_format_resolution( BugData $p_bug ) {\n\t$t_resolution = get_enum_element( 'resolution',\n\t\t$p_bug->resolution,\n\t\tauth_get_current_user_id(),\n\t\t$p_bug->project_id\n\t);\n\treturn csv_escape_string( $t_resolution );\n}\n\n/**\n * return the duplicate bug id\n * @param BugData $p_bug A BugData object.\n * @return string formatted bug id\n * @access public\n */\nfunction csv_format_duplicate_id( BugData $p_bug ) {\n\treturn bug_format_id( $p_bug->duplicate_id );\n}\n\n/**\n * return the selection\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n * @noinspection PhpUnusedParameterInspection\n */\nfunction csv_format_selection( BugData $p_bug ) {\n\treturn csv_escape_string( '' );\n}\n\n/**\n * return the due date column\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_due_date( BugData $p_bug ) {\n\tstatic $s_date_format = null;\n\tif( $s_date_format === null ) {\n\t\t$s_date_format = config_get( 'short_date_format' );\n\t}\n\t\n\t$t_value = '';\n\tif ( !date_is_null( $p_bug->due_date )\n\t\t&& access_has_bug_level( config_get( 'due_date_view_threshold' ), $p_bug->id )\n\t) {\n\t\t$t_value = date( $s_date_format, $p_bug->due_date );\n\t}\n\treturn csv_escape_string( $t_value );\n}\n\n/**\n * return the sponsorship total for an issue\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_sponsorship_total( BugData $p_bug ) {\n\treturn csv_escape_string( $p_bug->sponsorship_total );\n}\n\n/**\n * return the attachment count for an issue\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_attachment_count( BugData $p_bug ) {\n\t# Check for attachments\n\t$t_attachment_count = 0;\n\tif( file_can_view_bug_attachments( $p_bug->id ) ) {\n\t\t$t_attachment_count = file_bug_attachment_count( $p_bug->id );\n\t}\n\treturn csv_escape_string( $t_attachment_count );\n}\n\n/**\n * return the bug note count for an issue\n * @param BugData $p_bug A BugData object.\n * @return string\n * @access public\n */\nfunction csv_format_bugnotes_count( BugData $p_bug ) {\n\t# grab the bugnote count\n\t$t_bugnote_stats = bug_get_bugnote_stats( $p_bug->id );\n\tif( $t_bugnote_stats ) {\n\t\t$t_bugnote_count = $t_bugnote_stats['count'];\n\t} else {\n\t\t$t_bugnote_count = 0;\n\t}\n\treturn csv_escape_string( $t_bugnote_count );\n}\n"], "filenames": ["core/csv_api.php"], "buggy_code_start_loc": [118], "buggy_code_end_loc": [118], "fixing_code_start_loc": [119], "fixing_code_end_loc": [126], "type": "CWE-1236", "message": "Lack of Neutralization of Formula Elements in the CSV API of MantisBT before 2.25.3 allows an unprivileged attacker to execute code or gain access to information when a user opens the csv_export.php generated CSV file in Excel.", "other": {"cve": {"id": "CVE-2021-43257", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-14T20:15:09.157", "lastModified": "2022-04-22T15:02:05.773", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Lack of Neutralization of Formula Elements in the CSV API of MantisBT before 2.25.3 allows an unprivileged attacker to execute code or gain access to information when a user opens the csv_export.php generated CSV file in Excel."}, {"lang": "es", "value": "Una falta de neutralizaci\u00f3n de elementos de f\u00f3rmula en la API CSV de MantisBT versiones anteriores a 2.25.3 permite que un atacante no privilegiado ejecute c\u00f3digo u obtenga acceso a informaci\u00f3n cuando un usuario abre el archivo CSV generado por csv_export.php en Excel"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1236"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.25.3", "matchCriteriaId": "C5C85731-06A6-4482-8961-87C1DF556A69"}]}]}], "references": [{"url": "https://github.com/mantisbt/mantisbt/commit/7f4534c723e3162b8784aebda4836324041dbc3e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.mantisbt.org/bugs/view.php?id=29130", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/7f4534c723e3162b8784aebda4836324041dbc3e"}}