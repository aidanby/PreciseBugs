{"buggy_code": ["# == Schema Information\n#\n# Table name: users\n#\n#  id                     :integer          not null, primary key\n#  login                  :string\n#  identity_url           :string\n#  name                   :string\n#  admin                  :boolean          default(FALSE)\n#  bio                    :text\n#  signature              :text\n#  role                   :string           default(\"user\")\n#  home_phone             :string\n#  work_phone             :string\n#  cell_phone             :string\n#  company                :string\n#  street                 :string\n#  city                   :string\n#  state                  :string\n#  zip                    :string\n#  title                  :string\n#  twitter                :string\n#  linkedin               :string\n#  thumbnail              :string\n#  medium_image           :string\n#  large_image            :string\n#  language               :string           default(\"en\")\n#  assigned_ticket_count  :integer          default(0)\n#  topics_count           :integer          default(0)\n#  active                 :boolean          default(TRUE)\n#  created_at             :datetime         not null\n#  updated_at             :datetime         not null\n#  email                  :string           default(\"\"), not null\n#  encrypted_password     :string           default(\"\"), not null\n#  reset_password_token   :string\n#  reset_password_sent_at :datetime\n#  remember_created_at    :datetime\n#  sign_in_count          :integer          default(0), not null\n#  current_sign_in_at     :datetime\n#  last_sign_in_at        :datetime\n#  current_sign_in_ip     :inet\n#  last_sign_in_ip        :inet\n#  provider               :string\n#  uid                    :string\n#  invitation_token       :string\n#  invitation_created_at  :datetime\n#  invitation_sent_at     :datetime\n#  invitation_accepted_at :datetime\n#  invitation_limit       :integer\n#  invited_by_id          :integer\n#  invited_by_type        :string\n#  invitations_count      :integer          default(0)\n#  invitation_message     :text\n#  time_zone              :string           default(\"UTC\")\n#  profile_image          :string\n#  notify_on_private      :boolean          default(FALSE)\n#  notify_on_public       :boolean          default(FALSE)\n#  notify_on_reply        :boolean          default(FALSE)\n#  account_number         :string\n#  priority               :string           default(\"normal\")\n#\n\nclass User < ActiveRecord::Base\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable\n  devise :invitable, :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :trackable, :validatable,\n         :omniauthable, :omniauth_providers => Devise.omniauth_providers\n\n  INVALID_NAME_CHARACTERS = /\\A('|\")|('|\")\\z/\n\n  # Add preferences to user model\n  include RailsSettings::Extend\n\n  TEMP_EMAIL_PREFIX = 'change@me'\n\n  attr_accessor :opt_in\n\n  validates :name, presence: true, format: { with: /\\A\\D+\\z/ }\n  validates :email, presence: true\n\n\n  include Gravtastic\n  mount_uploader :profile_image, ProfileImageUploader\n\n  include PgSearch\n  pg_search_scope :user_search,\n                  against: [:name, :login, :email, :company, :account_number, :home_phone, :work_phone, :cell_phone]\n\n  paginates_per 15\n\n  # Relationships\n\n  has_many :topics, dependent: :destroy\n  has_many :posts, dependent: :destroy\n  has_many :votes, dependent: :destroy\n  has_many :docs\n  has_many :backups, dependent: :delete_all\n  has_many :api_keys, dependent: :destroy\n\n  has_attachment  :avatar, accept: [:jpg, :png, :gif]\n  is_gravtastic\n\n  after_invitation_accepted :set_role_on_invitation_accept\n  after_create :enable_notifications_for_admin\n  before_save :reject_invalid_characters_from_name\n  acts_as_taggable_on :teams\n\n  ROLES = %w[admin agent editor user]\n\n  # TODO: Will want to refactor this using .or when upgrading to Rails 5\n  scope :admins, -> { where('admin = ? OR role = ?',true,'admin').order('name asc') }\n  scope :agents, -> { where('admin = ? OR role = ? OR role = ?',true,'admin','agent').order('name asc') }\n  scope :customers, -> { where('admin = ? and role = ?',false,'user').where.not(role: ['agent','admin','editor']).where.not(id: 2).order('name asc') }\n  scope :team, -> { where('admin = ? OR role = ? OR role = ? OR role = ?',true,'admin','agent','editor').order('name asc') }\n  scope :active, -> { where(active: true)}\n  scope :by_role, -> (role) { where(role: role) }\n  scope :active_first, -> { order('updated_at desc') }\n  scope :alpha, -> { order('name asc') }\n\n  def set_role_on_invitation_accept\n    self.role = self.role.presence || \"agent\"\n    self.active = true\n    self.save\n  end\n\n  def enable_notifications_for_admin\n    if self.role == \"admin\"\n      self.notify_on_private = true\n      self.notify_on_public = true\n      self.notify_on_reply = true\n    end\n  end\n\n  # Permanently destroy a user along with all owned records\n  # change doc ownership\n  def permanently_destroy\n    return if self.is_admin?\n    return if self.id == 2 #prevent the system user from being destroyed\n\n    DeleteUserJob.perform_later(self.id)\n  end\n\n  # Removes or anonymizes associated records\n  def scrub\n    return if self.is_admin?\n    return if self.id == 2 #prevent the system user from anonymized\n\n    # unassign from any topics assigned to\n    self.unassign_all\n\n    # \"forget user\"\n    self.anonymize\n  end\n\n  # anonymizes a users attributes\n  def anonymize\n    return if self.is_admin?\n\n    # anonymize own attributes\n    self.update!(\n      login: 'anon',\n      name: 'Anonymous User',\n      role: 'user',\n      signature: nil,\n      home_phone: nil,\n      work_phone: nil,\n      cell_phone: nil,\n      company: nil,\n      street: nil,\n      city: nil,\n      state: nil,\n      zip: nil,\n      title: nil,\n      twitter: nil,\n      linkedin: nil,\n      bio: nil,\n      thumbnail: nil,\n      medium_image: nil,\n      large_image: nil,\n      profile_image: nil,\n      current_sign_in_ip: nil,\n      last_sign_in_ip: nil,\n      encrypted_password: SecureRandom.hex(24),\n      account_number: nil,\n      active: false,\n      email: 'change@me-' + SecureRandom.hex(5) + '.anonymous'\n    )\n\n    # anonymize cached attributes (topics)\n    self.topics.update_all(user_name: 'Anonymized User')\n\n    # rebuild index\n  end\n\n  # Unassign from all tickets\n  def unassign_all\n    Topic.where(assigned_user_id: self.id).update_all(assigned_user_id: nil)\n  end\n\n  # Can this user be deleted? Protects admins/system user from accidental delete\n  def can_scrub_and_delete?\n    return false if self.id == 2 || self.is_admin?\n    true\n  end\n\n  def self.notifiable_on_public\n    agents.where(notify_on_public: true).reorder('id asc')\n  end\n\n  def self.notifiable_on_private\n    agents.where(notify_on_private: true).reorder('id asc')\n  end\n\n  def self.notifiable_on_reply\n    agents.where(notify_on_reply: true).reorder('id asc')\n  end\n\n  def active_assigned_count\n    Topic.where(assigned_user_id: self.id).active.count\n  end\n\n  def is_restricted?\n    self.team_list.count > 0 && !self.is_admin?\n  end\n\n  def self.create_password\n    Devise.friendly_token\n  end\n\n  def thumbnail_url\n    self.thumbnail.blank? ? self.gravatar_url(size: 60) : self.thumbnail\n  end\n\n  def image_url\n    self.medium_image || self.gravatar_url(size: 60)\n  end\n\n  def self.find_for_oauth(auth)\n    user = find_by(email: auth.info.email)\n    if user\n      user.tap do |u|\n        u.provider = auth.provider\n        u.uid = auth.uid\n        u.save!\n      end\n    else\n      # NOTE: this stopped working with the test, not sure why. Replaced with\n      # find_or_create_by and everything passed again:\n\n      # where(provider: auth.provider, uid: auth.uid).first_or_create do |u|\n      # it turns out that is not part of the public rails api, despite being\n      # used in the wild. https://github.com/rails/rails/issues/23495\n\n      find_or_create_by(provider: auth.provider, uid: auth.uid) do |u|\n        u.email = auth.info.email.present? ? auth.info.email : u.temp_email(auth)\n        u.name = auth.info.name.present? ? auth.info.name : \"Name Missing\"\n        u.role = 'user'\n        u.thumbnail = auth.info.image\n        u.password = Devise.friendly_token[0,20]\n      end\n    end\n  end\n\n  def temp_email(auth)\n    \"#{TEMP_EMAIL_PREFIX}-#{auth.uid}-#{auth.provider}.com\"\n  end\n\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\n\n  def signup_guest\n    enc = Devise.token_generator.generate(User, :reset_password_token)\n    self.reset_password_token = enc\n    self.reset_password_sent_at = Time.now.utc\n\n    self.login = self.email.split(\"@\")[0]\n    self.password = User.create_password\n    self.save\n  end\n\n  # evaluates to true if they are a priority (high/vip) user\n  def priority?\n    self.priority == 'high' || self.priority == 'vip'\n  end\n\n  # NOTE: Could have user AR Enumerables for this, but the field was already in the database as a string\n  # and changing it could be painful for upgrading installed users. These are three\n  # Utility methods for checking the role of an admin:\n\n  def is_admin?\n    self.role == 'admin'\n  end\n\n  def is_agent?\n    %w( agent admin ).include?(self.role)\n  end\n\n  def is_editor?\n    %w( editor agent admin ).include?(self.role)\n  end\n\n  def self.bulk_invite(emails, message, role)\n    #below line merge comma saperated emails as well as emails saperated by new lines\n    emails = emails.each_line.reject { |l| l =~ /^\\s+$/ }.map { |l| l.strip.split(', ') }.flatten\n\n    emails.each do |email|\n      is_valid_email = email.match('^.+@.+$')\n      if is_valid_email\n        User.invite!({email: email}) do |user|\n          user.invitation_message = message\n          user.name = \"Invited User: #{email}\"\n          user.role = role\n          user.active = false\n        end\n      end\n    end\n  end\n\n  #when using deliver_later attr_accessor :message becomes nil on mailer view\n  def send_devise_notification(notification, *args)\n    devise_mailer.send(notification, self, *args).deliver_later\n  end\n\n  # check if user is active or not\n  def active_for_authentication?\n    super && self.active?\n  end\n\n  # message to the user that is not allowed to login\n  def inactive_message\n    \"You are not allowed to log in!\"\n  end\n\n  def self.register email, user_name\n    # this method is very similar to email_processor#create_user\n    # actually it was copyied from there.\n    # it should create an issue to properly refactor and\n    # preserve the DRY principle.\n\n    # create user\n    usr = User.new\n\n    token, enc = Devise.token_generator.generate(User, :reset_password_token)\n    usr.reset_password_token = enc\n    usr.reset_password_sent_at = Time.now.utc\n\n    usr.email = email\n    usr.name = user_name\n    usr.password = User.create_password\n    if usr.save\n      UserMailer.new_user(usr.id, token).deliver_later\n    end\n\n    usr\n  end\n\n  private\n\n  def reject_invalid_characters_from_name\n    self.name = name.gsub(INVALID_NAME_CHARACTERS, '') if !!name.match(INVALID_NAME_CHARACTERS)\n  end\n\nend\n", "<script>\n  Helpy.topicID = <%= @topic.id %>;\n</script>\n<div class=\"pull-right\">\n  <span class=\"btn-group left-col-dropdown\">\n    <%= link_to content_tag(:span, '', class: 'fas fa-ellipsis-v ticket-ellipsis btn'), '#', class: 'dropdown-toggle', data: { toggle: 'dropdown' }%>\n    <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n      <li><%= link_to t('change_owner', default: 'Change author'), '#', data: { toggle: \"modal\", target: \"#change-user-modal-#{@topic.posts.first.id}\" } if @topic.posts.present? %></li>\n      <li><%= link_to t('tag_with', default: 'Tag Ticket'), '#', class: 'add-tag-link' %></li>\n      <hr/>\n      <li class=\"dropdown-header\"><%= @topic.user.name %></li>\n      <li><%= link_to t(:tickets, default: 'Tickets'), remote: true %></li>\n      <li><%= link_to t(:open_new_discussion, default: 'Open Discussion'), new_admin_topic_path(user_id: @topic.user.id), remote: true, class: '' %></li>\n      <li><%= link_to t(:edit_user, default: 'Edit User'), edit_admin_user_path(@topic.user), remote: false %></li>\n    </ul>\n  </span>\n</div>\n<span class=\"btn-group left-col-dropdown\">\n  <button class=\"status dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n    <%= control_for_status(@topic.current_status) %>\n  </button>\n  <ul class=\"dropdown-menu ticket-controls\" role=\"menu\">\n    <li><%= link_to t(:mark_closed, default: 'Mark Closed'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'closed', status: @status), :remote => true, class: 'key-sr' unless @topic.current_status == \"closed\" %></li>\n    <li><%= link_to t(:reopen, default: 'Reopen'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'reopen', status: @status), :remote => true, class: 'key-so' unless @topic.current_status == \"open\" %></li>\n    <li><%= link_to t(:mark_new, default: 'Mark New'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'new', status: @status), :remote => true, class: 'key-sn' unless @topic.current_status == \"new\" %></li>\n    <li><%= link_to t(:mark_spam, default: 'Mark Spam'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'spam', status: @status), :remote => true, class: 'key-ss' unless @topic.current_status == \"spam\" %></li>\n    <li><%= link_to t(:trash, default: 'Trash'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'trash', status: @status), :remote => true, class: 'key-st' unless @topic.current_status == \"trash\" %></li>\n  </ul>\n</span>\n\n<% if forums? %>\n  <span class=\"status privacy btn-group left-col-dropdown\">\n    <button class=\"privacy-toggle dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n      <%= control_for_privacy(@topic.private?) %>\n    </button>\n    <ul class=\"dropdown-menu ticket-controls\" role=\"menu\">\n      <% Forum.where(private: false).alpha.each do |forum| %>\n      <li><%= link_to \"#{t(:move_to, default: \"Move\")}: #{forum.name}\", admin_toggle_privacy_path(topic_ids: { \"\":@topic.id }, private: 'false', forum_id: forum.id, status: @status), :remote => true %></li>\n      <% end %>\n      <li><%= link_to \"#{t(:mark_as, default: \"Mark\")}: Private\", admin_toggle_privacy_path(topic_ids: { \"\":@topic.id }, private: 'true', forum_id: 1, status: @status), :remote => true %></li>\n    </ul>\n  </span>\n<% end %>\n\n<% unless @topic.current_status == \"closed\" %>\n  <span class=\"status btn-group left-col-dropdown\">\n    <button class=\"dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n      <%= content_tag :span, class: 'btn status-label-button label label-warning assign-to' do %>\n        <%= @topic.assigned_user.try(:name).try(:upcase) || t(:unassigned, default: 'UNASSIGNED') %>\n        <%= icon('fas', 'caret-down') + ' ' %>\n      <% end %>\n    </button>\n    <ul class=\"dropdown-menu ticket-controls\" role=\"menu\">\n      <li><%= link_to \"#{current_user.name.titleize}\", admin_assign_agent_path(topic_ids: { \"\":@topic.id }, assigned_user_id: current_user.id, status: @status), :remote => true unless @topic.current_status == \"closed\" %></li>\n      <li role=\"separator\" class=\"divider\"></li>\n      <% (@admins-[current_user]).each do |admin| %>\n      <li><%= link_to \"#{admin.name.titleize} (#{admin.active_assigned_count})\", admin_assign_agent_path(topic_ids: { \"\":@topic.id }, assigned_user_id: admin.id, status: @status), :remote => true unless @topic.current_status == \"closed\" %></li>\n      <% end %>\n    </ul>\n  </span>\n\n  <span class=\"status btn-group left-col-dropdown\">\n    <button class=\"dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n      <%= content_tag(:span, style: badge_color_from_topic(@topic), class: \"btn status-label-button group-to label label-#{@topic.team_list.present? ? @topic.team_list.first.first.downcase : 'default'}\") do %>\n        <%= @topic.team_list.first.try(:upcase) || t(:no_team_assigned, default: 'Assign to group') %>\n        <%= icon('fas', 'caret-down') + ' ' %>\n      <% end %>\n    </button>\n    <ul class=\"dropdown-menu ticket-controls team-list\" role=\"menu\">\n      <% @all_teams.to_a.each do |team| %>\n        <li class='team-item'>\n          <% unless @topic.current_status == \"closed\" %>\n            <%= link_to(color_sample(team), admin_assign_team_path(topic_ids: { \"\":@topic.id }, assign_team: team, status: @status), :remote => true) %>\n          <% end %>\n        </li>\n      <% end %>\n      <!-- <li class=\"new-tag\">\n        <%= form_tag '#', class: 'new-group-form' do %>\n        <%= text_field_tag \"new_group\", '', placeholder: \"Add a new group\", class: 'form-control' %><%#= link_to \"Add\", '#', class: 'btn btn-default pull-right add-new-group' %>\n        <% end %>\n      </li> -->\n      <li><%= link_to \"Unassign from group\", admin_unassign_team_path(topic_ids: { \"\":@topic.id }, team: '', status: @status), :remote => true unless @topic.current_status == \"closed\" %></li>\n\n    </ul>\n  </span>\n<% end %>\n", "<tr id=\"user-<%= user.id %>\" class=\"user\">\n  <td>\n    <div class=\"user-thumbnail pull-left user-link\">\n      <%= link_to avatar_image(user, size=40), admin_user_path(user), remote: true %>\n    </div>\n  </td>\n  <td class=\"user-link\">\n    <span class=\"more-important\">\n      <%= link_to user.name.titleize, admin_user_path(user), remote: true, class: 'user-link' unless user.name.nil? %>\n      <%= user_priority(user) %>\n      <%= content_tag('span', t(\"#{user.role}_role\"), class: 'label label-default') if user.is_agent? %>\n      <% tag_listing(user.team_list, \"user\") %>\n    </span><br/>\n    <span class=\"less-important last-active\"> <%= \"#{t('last_seen', default: \"Last Seen:\")}\" %> <%= last_active_time(user.last_sign_in_at) %></span>\n  </td>\n  <td>\n    <span class=\"label label-count pull-right\">\n      <%= user.topics.count %>\n    </span>\n  </td>\n  <td class=\"text-right\">\n    <div class=\"btn-group\">\n      <span id=\"row-<%= user.id %>\" data-toggle=\"dropdown\" aria-expanded=\"false\" class='btn dropdown-toggle fas fa-ellipsis-v'></span>\n      <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n        <li><%= link_to t(:open_new_discussion, default: 'Open Discussion'), new_admin_topic_path(user_id: user.id), remote: true, class: '' %></li>\n        <li><%= link_to t(:discussions, default: 'Discussions'), admin_user_path(user), remote: true %></li>\n        <li><%= link_to t(:edit_user, default: 'Edit User'), edit_admin_user_path(user, mode: 'edit'), remote: false %></li>\n      </ul>\n    </div>\n  </td>\n</tr>\n", "<span class=\"btn-group left-col-dropdown\" style=\"margin-top:18px;\">\n  <%= link_to content_tag(:small, '', class: 'fas fa-ellipsis-v ticket-ellipsis btn'), '#', class: 'dropdown-toggle', data: { toggle: 'dropdown' }%>\n  <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n    <li><%= link_to t(:open_new_discussion, default: 'Open Discussion'), new_admin_topic_path(user_id: user.id), remote: true, class: '' %></li>\n    <li><%= link_to t(:edit_user, default: 'Edit User'), edit_admin_user_path(user), remote: false %></li>\n    <li><%= link_to t(:scrub_user, default: 'Anonymize User'), admin_scrub_user_path(user), remote: true,\n                    method: :post,\n                    data: { confirm: \"Are you sure you want to anonymize #{user.name}? This will anonymize the user and retain all of their public discussions.\" } if current_user.is_admin? && user.can_scrub_and_delete? %></li>\n    <li><%= link_to t(:delete_user, default: 'Delete User'), admin_user_path(user), remote: true,\n                    method: :delete,\n                    data: { confirm: \"Are you sure you want to delete #{user.name}? This will remove the user an any tickets or forum topics the user has created.\" } if current_user.is_admin? && user.can_scrub_and_delete? %></li>\n  </ul>\n</span>\n", "<% user = @user if user.nil? %>\n\n<div class=\"right-border\">\n  <div id=\"user-info\" class=\"row\">\n      <div class='col-md-12 text-center' id='user-info-image'>\n        <%= link_to(avatar_image(user, size=90), admin_user_path(user), remote: true) %>\n      </div>\n  </div>\n  <div class=\"row\">\n    <div class='col-md-12' id='user-info-info'>\n\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\">\n          <%= best_in_place user, :name, as: :input, url: admin_user_path(user) %>\n        </div>\n        <span class=\"small\">\n          <% if user.account_number.present? %>\n            <%= t(:account_number, default: 'Account:') %>\n            <%= best_in_place user, :account_number, as: :input, url: admin_user_path(user),\n            place_holder: t('activerecord.attributes.user.account_number', default: 'Account Number') if user.account_number.present? %>\n            <br/>\n          <% end %>\n          <%= best_in_place user, :company, as: :input, url: admin_user_path(user),\n          place_holder: t('click_to_edit', what: t('activerecord.attributes.user.company'), default: 'click to edit %{what}') %><br/>\n          <%= best_in_place user, :email, as: :input, url: admin_user_path(user) %><br/>\n\n        </span>\n      </div>\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\"><%= t(:contact_info, default: \"Contact\") %>:</div>\n        <%= best_in_place user, :street, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.street'), default: 'click to edit %{what}') %><br/>\n        <%= best_in_place user, :city, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.city'), default: 'click to edit %{what}') %>\n        <br/>\n        <%= best_in_place user, :state, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.state'), default: 'click to edit %{what}') %>\n        <%= best_in_place user, :zip, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.zip'), default: 'click to edit %{what}') %><br/>\n      </div>\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\"><%= t(:phone, default: \"Phone\") %>:</div>\n        <%= t(:work_phone, default: \"work\") %>: <%= best_in_place user, :work_phone,\n        as: :input, url: admin_user_path(user), place_holder: t('click_to_edit', what: '', default: 'click to edit %{what}') %><br/>\n        <%= t(:home_home, default: \"home\") %>: <%= best_in_place user, :home_phone,\n        as: :input, url: admin_user_path(user), place_holder: t('click_to_edit', what: '', default: 'click to edit %{what}') %><br/>\n        <%= t(:cell_phone, default: \"cell\") %>: <%= best_in_place user, :cell_phone,\n        as: :input, url: admin_user_path(user), place_holder: t('click_to_edit', what: '', default: 'click to edit %{what}') %><br/>\n      </div>\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\"><%= t(:notes, default: \"Notes\") %>:</div>\n        <%= best_in_place user, :notes, as: :textarea, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: 'notes', default: 'click to edit %{what}'),\n        confirm: true %><br/>\n      </div>\n    </div>\n  </div>\n</div>\n", "<style>\n#footer-wrapper,\n#footer,\n.nav-bg-color {\n  background-color: <%= AppSettings['branding.ticketing_color'] %>;\n}\n.navbar-active {\n  background-color: <%= lighten_color(AppSettings['branding.ticketing_color'], 0.05) %>;\n  border-radius: 5px;\n\n}\n#footer,\n#footer a,\n.nav-color {\n  color: <%= contrasting_text_color(AppSettings['branding.ticketing_color'].split('#')[1]) %>;\n}\n.brand-color: {\n  color: <%= AppSettings['branding.ticketing_color'] %>;\n}\n.topic-search-container {\n  background-color: <%= darken_color(AppSettings['branding.ticketing_bg_color'], 0.9) %>;\n}\nbody {\n  background-color: <%= AppSettings['branding.ticketing_bg_color'] %>;\n}\n#upper-wrapper {\n  background-color: <%= AppSettings['branding.ticketing_color'] %>;\n}\n\n#header-wrapper > nav > div > ul > li.open > a,\n.navbar.navbar-default,\n.nav {\n  background-color: transparent;\n}\n\n.nav-active {\n  background-color: <%= darken_color(AppSettings['branding.ticketing_bg_color'], 0.95) %>;\n}\n\nli.nav-over {\n  background-color: <%= darken_color(AppSettings['branding.ticketing_bg_color'], 0.97) %> !important;\n}\n\n#header-wrapper > nav > div > ul > li > a {\n  color: <%= contrasting_text_color(AppSettings['branding.ticketing_color'].split('#')[1]) %>;\n}\n\n<% if !display_branding? %>\na.navbar-brand {\n  display: none;\n}\n#header-wrapper > nav > div.navbar-collapse.collapse {\n  margin-left: -10px;\n}\n<% else %>\n#header-wrapper > nav > div.navbar-collapse.collapse {\n  margin-left: -15px;\n}\n<% end %>\n</style>\n<%= content_tag :div, bootstrap_flash, class: 'flash-wrapper' %>\n<div id=\"upper-wrapper\" class=\"jumbotron\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div id=\"header-wrapper\">\n          <div id=\"above-header\" class=\"hidden-xs small\">\n          </div>\n          <nav class=\"navbar navbar-default navbar-inverse\" role=\"navigation\">\n            <div class=\"navbar-header\">\n              <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                <span class=\"sr-only\">Toggle navigation</span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n              </button>\n            </div>\n            <div class=\"navbar-collapse collapse\">\n              <ul class=\"nav navbar-nav navbar-right pull-right hidden-xs\" data-hook='admin-nav-right'>\n                <%= content_tag(:li, '' , class: \"visible-lg visible-md visible-sm hidden-xs click-loader new-discussion #{new_active_class}\") do %>\n                  <%= navbar_expanding_link(new_admin_topic_path, \"fas fa-plus\", t(:new_ticket, default: \"New Ticket\"), \"\", (params[:controller] == 'admin/topics')) %>\n                <% end if current_user.is_agent? %>\n                <%= help_menu %>\n                <%= admin_avatar_menu %>\n              </ul>\n              <ul class=\"nav navbar-nav navbar-left\" data-hook='admin-nav-left'>\n                <%= upper_nav_item(t(:inbox, default: \"Inbox\"), admin_topics_path,[\"topics\"], ['index','show'], \"fas fa-inbox\") if (forums? || tickets?) && current_user.is_agent? %>\n                <%= upper_nav_item(t(:reports, default: 'Reports'), admin_reports_path(interval: 7), [\"reports\"], ['index', 'groups', 'team'], \"fas fa-chart-bar\") if tickets? && current_user.is_admin? %>\n                <%= upper_nav_item(t(:users, default: 'Customers'), admin_users_path(role: 'user'), [\"users\"], [\"index\",\"show\",\"edit\",\"update\"], \"fas fa-users\") if current_user.is_admin? %>\n                <%= helpcenter_menu if (knowledgebase? || forums?) && current_user.is_agent? %>\n                <%= content_tag(:li, link_to(t(:content, default: \"Content\"), admin_categories_path), class:'kblink') if knowledgebase? && current_user.role == 'editor' %>\n                <%#= content_tag(:li, link_to(t(:app_store, default: \"App Store\"), \"http://helpy.io/store/\"), class: \"hidden-sm hidden-xs\") if current_user.is_agent? %>\n                <%= content_tag(:li, link_to(t(:open_new_discussion, default: \"New Ticket\"), new_admin_topic_path), class: 'visible-xs hidden-lg hidden-md hidden-sm') if current_user.is_agent? %>\n                <%= content_tag(:li, link_to(t(:settings, default: \"Settings\"), admin_settings_path), class: 'visible-xs hidden-lg hidden-md hidden-sm') if current_user.is_admin? %>\n                <%= content_tag(:li, link_to(t(:get_help, default: \"Get Help\"), \"http://support.helpy.io/\"), class: 'visible-xs hidden-lg hidden-md hidden-sm', target: 'blank') %>\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"], "fixing_code": ["# == Schema Information\n#\n# Table name: users\n#\n#  id                     :integer          not null, primary key\n#  login                  :string\n#  identity_url           :string\n#  name                   :string\n#  admin                  :boolean          default(FALSE)\n#  bio                    :text\n#  signature              :text\n#  role                   :string           default(\"user\")\n#  home_phone             :string\n#  work_phone             :string\n#  cell_phone             :string\n#  company                :string\n#  street                 :string\n#  city                   :string\n#  state                  :string\n#  zip                    :string\n#  title                  :string\n#  twitter                :string\n#  linkedin               :string\n#  thumbnail              :string\n#  medium_image           :string\n#  large_image            :string\n#  language               :string           default(\"en\")\n#  assigned_ticket_count  :integer          default(0)\n#  topics_count           :integer          default(0)\n#  active                 :boolean          default(TRUE)\n#  created_at             :datetime         not null\n#  updated_at             :datetime         not null\n#  email                  :string           default(\"\"), not null\n#  encrypted_password     :string           default(\"\"), not null\n#  reset_password_token   :string\n#  reset_password_sent_at :datetime\n#  remember_created_at    :datetime\n#  sign_in_count          :integer          default(0), not null\n#  current_sign_in_at     :datetime\n#  last_sign_in_at        :datetime\n#  current_sign_in_ip     :inet\n#  last_sign_in_ip        :inet\n#  provider               :string\n#  uid                    :string\n#  invitation_token       :string\n#  invitation_created_at  :datetime\n#  invitation_sent_at     :datetime\n#  invitation_accepted_at :datetime\n#  invitation_limit       :integer\n#  invited_by_id          :integer\n#  invited_by_type        :string\n#  invitations_count      :integer          default(0)\n#  invitation_message     :text\n#  time_zone              :string           default(\"UTC\")\n#  profile_image          :string\n#  notify_on_private      :boolean          default(FALSE)\n#  notify_on_public       :boolean          default(FALSE)\n#  notify_on_reply        :boolean          default(FALSE)\n#  account_number         :string\n#  priority               :string           default(\"normal\")\n#\n\nclass User < ActiveRecord::Base\n  # Include default devise modules. Others available are:\n  # :confirmable, :lockable, :timeoutable\n  devise :invitable, :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :trackable, :validatable,\n         :omniauthable, :omniauth_providers => Devise.omniauth_providers\n\n  INVALID_NAME_CHARACTERS = /\\A('|\")|('|\")\\z/\n\n  # Add preferences to user model\n  include RailsSettings::Extend\n\n  TEMP_EMAIL_PREFIX = 'change@me'\n\n  attr_accessor :opt_in\n\n  validates :name, presence: true, format: { with: /\\A\\D+\\z/ }\n  validates :email, presence: true\n\n\n  include Gravtastic\n  mount_uploader :profile_image, ProfileImageUploader\n\n  include PgSearch\n  pg_search_scope :user_search,\n                  against: [:name, :login, :email, :company, :account_number, :home_phone, :work_phone, :cell_phone]\n\n  paginates_per 15\n\n  # Relationships\n\n  has_many :topics, dependent: :destroy\n  has_many :posts, dependent: :destroy\n  has_many :votes, dependent: :destroy\n  has_many :docs\n  has_many :backups, dependent: :delete_all\n  has_many :api_keys, dependent: :destroy\n\n  has_attachment  :avatar, accept: [:jpg, :png, :gif]\n  is_gravtastic\n\n  after_invitation_accepted :set_role_on_invitation_accept\n  after_create :enable_notifications_for_admin\n  before_save :reject_invalid_characters_from_name\n  acts_as_taggable_on :teams\n\n  ROLES = %w[admin agent editor user]\n\n  # TODO: Will want to refactor this using .or when upgrading to Rails 5\n  scope :admins, -> { where('admin = ? OR role = ?',true,'admin').order('name asc') }\n  scope :agents, -> { where('admin = ? OR role = ? OR role = ?',true,'admin','agent').order('name asc') }\n  scope :customers, -> { where('admin = ? and role = ?',false,'user').where.not(role: ['agent','admin','editor']).where.not(id: 2).order('name asc') }\n  scope :team, -> { where('admin = ? OR role = ? OR role = ? OR role = ?',true,'admin','agent','editor').order('name asc') }\n  scope :active, -> { where(active: true)}\n  scope :by_role, -> (role) { where(role: role) }\n  scope :active_first, -> { order('updated_at desc') }\n  scope :alpha, -> { order('name asc') }\n\n  def set_role_on_invitation_accept\n    self.role = self.role.presence || \"agent\"\n    self.active = true\n    self.save\n  end\n\n  def enable_notifications_for_admin\n    if self.role == \"admin\"\n      self.notify_on_private = true\n      self.notify_on_public = true\n      self.notify_on_reply = true\n    end\n  end\n\n  # Permanently destroy a user along with all owned records\n  # change doc ownership\n  def permanently_destroy\n    return if self.is_admin?\n    return if self.id == 2 #prevent the system user from being destroyed\n\n    DeleteUserJob.perform_later(self.id)\n  end\n\n  # Removes or anonymizes associated records\n  def scrub\n    return if self.is_admin?\n    return if self.id == 2 #prevent the system user from anonymized\n\n    # unassign from any topics assigned to\n    self.unassign_all\n\n    # \"forget user\"\n    self.anonymize\n  end\n\n  # anonymizes a users attributes\n  def anonymize\n    return if self.is_admin?\n\n    # anonymize own attributes\n    self.update!(\n      login: 'anon',\n      name: 'Anonymous User',\n      role: 'user',\n      signature: nil,\n      home_phone: nil,\n      work_phone: nil,\n      cell_phone: nil,\n      company: nil,\n      street: nil,\n      city: nil,\n      state: nil,\n      zip: nil,\n      title: nil,\n      twitter: nil,\n      linkedin: nil,\n      bio: nil,\n      thumbnail: nil,\n      medium_image: nil,\n      large_image: nil,\n      profile_image: nil,\n      current_sign_in_ip: nil,\n      last_sign_in_ip: nil,\n      encrypted_password: SecureRandom.hex(24),\n      account_number: nil,\n      active: false,\n      email: 'change@me-' + SecureRandom.hex(5) + '.anonymous'\n    )\n\n    # anonymize cached attributes (topics)\n    self.topics.update_all(user_name: 'Anonymized User')\n\n    # rebuild index\n  end\n\n  # Unassign from all tickets\n  def unassign_all\n    Topic.where(assigned_user_id: self.id).update_all(assigned_user_id: nil)\n  end\n\n  # Can this user be deleted? Protects admins/system user from accidental delete\n  def can_scrub_and_delete?\n    return false if self.id == 2 || self.is_admin?\n    true\n  end\n\n  # Is this user editable by the current logged in agent?\n  def can_be_edited? current_user\n    return true if current_user.is_admin?\n    !self.is_agent?\n  end\n\n  def self.notifiable_on_public\n    agents.where(notify_on_public: true).reorder('id asc')\n  end\n\n  def self.notifiable_on_private\n    agents.where(notify_on_private: true).reorder('id asc')\n  end\n\n  def self.notifiable_on_reply\n    agents.where(notify_on_reply: true).reorder('id asc')\n  end\n\n  def active_assigned_count\n    Topic.where(assigned_user_id: self.id).active.count\n  end\n\n  def is_restricted?\n    self.team_list.count > 0 && !self.is_admin?\n  end\n\n  def self.create_password\n    Devise.friendly_token\n  end\n\n  def thumbnail_url\n    self.thumbnail.blank? ? self.gravatar_url(size: 60) : self.thumbnail\n  end\n\n  def image_url\n    self.medium_image || self.gravatar_url(size: 60)\n  end\n\n  def self.find_for_oauth(auth)\n    user = find_by(email: auth.info.email)\n    if user\n      user.tap do |u|\n        u.provider = auth.provider\n        u.uid = auth.uid\n        u.save!\n      end\n    else\n      # NOTE: this stopped working with the test, not sure why. Replaced with\n      # find_or_create_by and everything passed again:\n\n      # where(provider: auth.provider, uid: auth.uid).first_or_create do |u|\n      # it turns out that is not part of the public rails api, despite being\n      # used in the wild. https://github.com/rails/rails/issues/23495\n\n      find_or_create_by(provider: auth.provider, uid: auth.uid) do |u|\n        u.email = auth.info.email.present? ? auth.info.email : u.temp_email(auth)\n        u.name = auth.info.name.present? ? auth.info.name : \"Name Missing\"\n        u.role = 'user'\n        u.thumbnail = auth.info.image\n        u.password = Devise.friendly_token[0,20]\n      end\n    end\n  end\n\n  def temp_email(auth)\n    \"#{TEMP_EMAIL_PREFIX}-#{auth.uid}-#{auth.provider}.com\"\n  end\n\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\n\n  def signup_guest\n    enc = Devise.token_generator.generate(User, :reset_password_token)\n    self.reset_password_token = enc\n    self.reset_password_sent_at = Time.now.utc\n\n    self.login = self.email.split(\"@\")[0]\n    self.password = User.create_password\n    self.save\n  end\n\n  # evaluates to true if they are a priority (high/vip) user\n  def priority?\n    self.priority == 'high' || self.priority == 'vip'\n  end\n\n  # NOTE: Could have user AR Enumerables for this, but the field was already in the database as a string\n  # and changing it could be painful for upgrading installed users. These are three\n  # Utility methods for checking the role of an admin:\n\n  def is_admin?\n    self.role == 'admin'\n  end\n\n  def is_agent?\n    %w( agent admin ).include?(self.role)\n  end\n\n  def is_editor?\n    %w( editor agent admin ).include?(self.role)\n  end\n\n  def self.bulk_invite(emails, message, role)\n    #below line merge comma saperated emails as well as emails saperated by new lines\n    emails = emails.each_line.reject { |l| l =~ /^\\s+$/ }.map { |l| l.strip.split(', ') }.flatten\n\n    emails.each do |email|\n      is_valid_email = email.match('^.+@.+$')\n      if is_valid_email\n        User.invite!({email: email}) do |user|\n          user.invitation_message = message\n          user.name = \"Invited User: #{email}\"\n          user.role = role\n          user.active = false\n        end\n      end\n    end\n  end\n\n  #when using deliver_later attr_accessor :message becomes nil on mailer view\n  def send_devise_notification(notification, *args)\n    devise_mailer.send(notification, self, *args).deliver_later\n  end\n\n  # check if user is active or not\n  def active_for_authentication?\n    super && self.active?\n  end\n\n  # message to the user that is not allowed to login\n  def inactive_message\n    \"You are not allowed to log in!\"\n  end\n\n  def self.register email, user_name\n    # this method is very similar to email_processor#create_user\n    # actually it was copyied from there.\n    # it should create an issue to properly refactor and\n    # preserve the DRY principle.\n\n    # create user\n    usr = User.new\n\n    token, enc = Devise.token_generator.generate(User, :reset_password_token)\n    usr.reset_password_token = enc\n    usr.reset_password_sent_at = Time.now.utc\n\n    usr.email = email\n    usr.name = user_name\n    usr.password = User.create_password\n    if usr.save\n      UserMailer.new_user(usr.id, token).deliver_later\n    end\n\n    usr\n  end\n\n  private\n\n  def reject_invalid_characters_from_name\n    self.name = name.gsub(INVALID_NAME_CHARACTERS, '') if !!name.match(INVALID_NAME_CHARACTERS)\n  end\n\nend\n", "<script>\n  Helpy.topicID = <%= @topic.id %>;\n</script>\n<div class=\"pull-right\">\n  <span class=\"btn-group left-col-dropdown\">\n    <%= link_to content_tag(:span, '', class: 'fas fa-ellipsis-v ticket-ellipsis btn'), '#', class: 'dropdown-toggle', data: { toggle: 'dropdown' }%>\n    <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n      <li><%= link_to t('change_owner', default: 'Change author'), '#', data: { toggle: \"modal\", target: \"#change-user-modal-#{@topic.posts.first.id}\" } if @topic.posts.present? %></li>\n      <li><%= link_to t('tag_with', default: 'Tag Ticket'), '#', class: 'add-tag-link' %></li>\n      <hr/>\n      <li class=\"dropdown-header\"><%= @topic.user.name %></li>\n      <li><%= link_to t(:tickets, default: 'Tickets'), remote: true %></li>\n      <li><%= link_to t(:open_new_discussion, default: 'Open Discussion'), new_admin_topic_path(user_id: @topic.user.id), remote: true, class: '' %></li>\n      <li><%= link_to t(:edit_user, default: 'Edit User'), edit_admin_user_path(@topic.user), remote: false if @topic.user.can_be_edited? current_user %></li>\n    </ul>\n  </span>\n</div>\n<span class=\"btn-group left-col-dropdown\">\n  <button class=\"status dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n    <%= control_for_status(@topic.current_status) %>\n  </button>\n  <ul class=\"dropdown-menu ticket-controls\" role=\"menu\">\n    <li><%= link_to t(:mark_closed, default: 'Mark Closed'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'closed', status: @status), :remote => true, class: 'key-sr' unless @topic.current_status == \"closed\" %></li>\n    <li><%= link_to t(:reopen, default: 'Reopen'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'reopen', status: @status), :remote => true, class: 'key-so' unless @topic.current_status == \"open\" %></li>\n    <li><%= link_to t(:mark_new, default: 'Mark New'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'new', status: @status), :remote => true, class: 'key-sn' unless @topic.current_status == \"new\" %></li>\n    <li><%= link_to t(:mark_spam, default: 'Mark Spam'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'spam', status: @status), :remote => true, class: 'key-ss' unless @topic.current_status == \"spam\" %></li>\n    <li><%= link_to t(:trash, default: 'Trash'), admin_update_topic_path(topic_ids: { \"\":@topic.id }, change_status: 'trash', status: @status), :remote => true, class: 'key-st' unless @topic.current_status == \"trash\" %></li>\n  </ul>\n</span>\n\n<% if forums? %>\n  <span class=\"status privacy btn-group left-col-dropdown\">\n    <button class=\"privacy-toggle dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n      <%= control_for_privacy(@topic.private?) %>\n    </button>\n    <ul class=\"dropdown-menu ticket-controls\" role=\"menu\">\n      <% Forum.where(private: false).alpha.each do |forum| %>\n      <li><%= link_to \"#{t(:move_to, default: \"Move\")}: #{forum.name}\", admin_toggle_privacy_path(topic_ids: { \"\":@topic.id }, private: 'false', forum_id: forum.id, status: @status), :remote => true %></li>\n      <% end %>\n      <li><%= link_to \"#{t(:mark_as, default: \"Mark\")}: Private\", admin_toggle_privacy_path(topic_ids: { \"\":@topic.id }, private: 'true', forum_id: 1, status: @status), :remote => true %></li>\n    </ul>\n  </span>\n<% end %>\n\n<% unless @topic.current_status == \"closed\" %>\n  <span class=\"status btn-group left-col-dropdown\">\n    <button class=\"dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n      <%= content_tag :span, class: 'btn status-label-button label label-warning assign-to' do %>\n        <%= @topic.assigned_user.try(:name).try(:upcase) || t(:unassigned, default: 'UNASSIGNED') %>\n        <%= icon('fas', 'caret-down') + ' ' %>\n      <% end %>\n    </button>\n    <ul class=\"dropdown-menu ticket-controls\" role=\"menu\">\n      <li><%= link_to \"#{current_user.name.titleize}\", admin_assign_agent_path(topic_ids: { \"\":@topic.id }, assigned_user_id: current_user.id, status: @status), :remote => true unless @topic.current_status == \"closed\" %></li>\n      <li role=\"separator\" class=\"divider\"></li>\n      <% (@admins-[current_user]).each do |admin| %>\n      <li><%= link_to \"#{admin.name.titleize} (#{admin.active_assigned_count})\", admin_assign_agent_path(topic_ids: { \"\":@topic.id }, assigned_user_id: admin.id, status: @status), :remote => true unless @topic.current_status == \"closed\" %></li>\n      <% end %>\n    </ul>\n  </span>\n\n  <span class=\"status btn-group left-col-dropdown\">\n    <button class=\"dropdown-toggle ticket-control\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n      <%= content_tag(:span, style: badge_color_from_topic(@topic), class: \"btn status-label-button group-to label label-#{@topic.team_list.present? ? @topic.team_list.first.first.downcase : 'default'}\") do %>\n        <%= @topic.team_list.first.try(:upcase) || t(:no_team_assigned, default: 'Assign to group') %>\n        <%= icon('fas', 'caret-down') + ' ' %>\n      <% end %>\n    </button>\n    <ul class=\"dropdown-menu ticket-controls team-list\" role=\"menu\">\n      <% @all_teams.to_a.each do |team| %>\n        <li class='team-item'>\n          <% unless @topic.current_status == \"closed\" %>\n            <%= link_to(color_sample(team), admin_assign_team_path(topic_ids: { \"\":@topic.id }, assign_team: team, status: @status), :remote => true) %>\n          <% end %>\n        </li>\n      <% end %>\n      <!-- <li class=\"new-tag\">\n        <%= form_tag '#', class: 'new-group-form' do %>\n        <%= text_field_tag \"new_group\", '', placeholder: \"Add a new group\", class: 'form-control' %><%#= link_to \"Add\", '#', class: 'btn btn-default pull-right add-new-group' %>\n        <% end %>\n      </li> -->\n      <li><%= link_to \"Unassign from group\", admin_unassign_team_path(topic_ids: { \"\":@topic.id }, team: '', status: @status), :remote => true unless @topic.current_status == \"closed\" %></li>\n\n    </ul>\n  </span>\n<% end %>\n", "<tr id=\"user-<%= user.id %>\" class=\"user\">\n  <td>\n    <div class=\"user-thumbnail pull-left user-link\">\n      <%= link_to avatar_image(user, size=40), admin_user_path(user), remote: true %>\n    </div>\n  </td>\n  <td class=\"user-link\">\n    <span class=\"more-important\">\n      <%= link_to user.name.titleize, admin_user_path(user), remote: true, class: 'user-link' unless user.name.nil? %>\n      <%= user_priority(user) %>\n      <%= content_tag('span', t(\"#{user.role}_role\"), class: 'label label-default') if user.is_agent? %>\n      <% tag_listing(user.team_list, \"user\") %>\n    </span><br/>\n    <span class=\"less-important last-active\"> <%= \"#{t('last_seen', default: \"Last Seen:\")}\" %> <%= last_active_time(user.last_sign_in_at) %></span>\n  </td>\n  <td>\n    <span class=\"label label-count pull-right\">\n      <%= user.topics.count %>\n    </span>\n  </td>\n  <td class=\"text-right\">\n    <div class=\"btn-group\">\n      <span id=\"row-<%= user.id %>\" data-toggle=\"dropdown\" aria-expanded=\"false\" class='btn dropdown-toggle fas fa-ellipsis-v'></span>\n      <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n        <li><%= link_to t(:open_new_discussion, default: 'Open Discussion'), new_admin_topic_path(user_id: user.id), remote: true, class: '' %></li>\n        <li><%= link_to t(:discussions, default: 'Discussions'), admin_user_path(user), remote: true %></li>\n        <li><%= link_to t(:edit_user, default: 'Edit User'), edit_admin_user_path(user, mode: 'edit'), remote: false if user.can_be_edited? current_user%></li>\n      </ul>\n    </div>\n  </td>\n</tr>\n", "<span class=\"btn-group left-col-dropdown\" style=\"margin-top:18px;\">\n  <%= link_to content_tag(:small, '', class: 'fas fa-ellipsis-v ticket-ellipsis btn'), '#', class: 'dropdown-toggle', data: { toggle: 'dropdown' }%>\n  <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n    <li><%= link_to t(:open_new_discussion, default: 'Open Discussion'), new_admin_topic_path(user_id: user.id), remote: true, class: '' %></li>\n    <li><%= link_to t(:edit_user, default: 'Edit User'), edit_admin_user_path(user), remote: false if user.can_be_edited? current_user %></li>\n    <li><%= link_to t(:scrub_user, default: 'Anonymize User'), admin_scrub_user_path(user), remote: true,\n                    method: :post,\n                    data: { confirm: \"Are you sure you want to anonymize #{user.name}? This will anonymize the user and retain all of their public discussions.\" } if current_user.is_admin? && user.can_scrub_and_delete? %></li>\n    <li><%= link_to t(:delete_user, default: 'Delete User'), admin_user_path(user), remote: true,\n                    method: :delete,\n                    data: { confirm: \"Are you sure you want to delete #{user.name}? This will remove the user an any tickets or forum topics the user has created.\" } if current_user.is_admin? && user.can_scrub_and_delete? %></li>\n  </ul>\n</span>\n", "<% user = @user if user.nil? %>\n\n<div class=\"right-border\">\n  <div id=\"user-info\" class=\"row\">\n      <div class='col-md-12 text-center' id='user-info-image'>\n        <%= link_to(avatar_image(user, size=90), admin_user_path(user), remote: true) %>\n      </div>\n  </div>\n  <div class=\"row\">\n    <div class='col-md-12' id='user-info-info'>\n\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\">\n          <%= best_in_place_if !user.is_agent?, user, :name, as: :input, url: admin_user_path(user) %>\n        </div>\n        <span class=\"small\">\n          <% if user.account_number.present? %>\n            <%= t(:account_number, default: 'Account:') %>\n            <%= best_in_place_if !user.is_agent?, user, :account_number, as: :input, url: admin_user_path(user),\n            place_holder: t('activerecord.attributes.user.account_number', default: 'Account Number') if user.account_number.present? %>\n            <br/>\n          <% end %>\n          <%= best_in_place_if !user.is_agent?, user, :company, as: :input, url: admin_user_path(user),\n          place_holder: t('click_to_edit', what: t('activerecord.attributes.user.company'), default: 'click to edit %{what}') %><br/>\n          <%= best_in_place_if !user.is_agent?, user, :email, as: :input, url: admin_user_path(user) %><br/>\n\n        </span>\n      </div>\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\"><%= t(:contact_info, default: \"Contact\") %>:</div>\n        <%= best_in_place_if !user.is_agent?, user, :street, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.street'), default: 'click to edit %{what}') %><br/>\n        <%= best_in_place_if !user.is_agent?, user, :city, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.city'), default: 'click to edit %{what}') %>\n        <br/>\n        <%= best_in_place_if !user.is_agent?, user, :state, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.state'), default: 'click to edit %{what}') %>\n        <%= best_in_place_if !user.is_agent?, user, :zip, as: :input, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: t('activerecord.attributes.user.zip'), default: 'click to edit %{what}') %><br/>\n      </div>\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\"><%= t(:phone, default: \"Phone\") %>:</div>\n        <%= t(:work_phone, default: \"work\") %>: <%= best_in_place_if !user.is_agent?, user, :work_phone,\n        as: :input, url: admin_user_path(user), place_holder: t('click_to_edit', what: '', default: 'click to edit %{what}') %><br/>\n        <%= t(:home_home, default: \"home\") %>: <%= best_in_place_if !user.is_agent?, user, :home_phone,\n        as: :input, url: admin_user_path(user), place_holder: t('click_to_edit', what: '', default: 'click to edit %{what}') %><br/>\n        <%= t(:cell_phone, default: \"cell\") %>: <%= best_in_place_if !user.is_agent?, user, :cell_phone,\n        as: :input, url: admin_user_path(user), place_holder: t('click_to_edit', what: '', default: 'click to edit %{what}') %><br/>\n      </div>\n      <div id=\"user-contact-info\" class=\"user-info\">\n        <div class=\"tiny-header\"><%= t(:notes, default: \"Notes\") %>:</div>\n        <%= best_in_place_if !user.is_agent?, user, :notes, as: :textarea, url: admin_user_path(user),\n        place_holder: t('click_to_edit', what: 'notes', default: 'click to edit %{what}'),\n        confirm: true %><br/>\n      </div>\n    </div>\n  </div>\n</div>\n", "<style>\n#footer-wrapper,\n#footer,\n.nav-bg-color {\n  background-color: <%= AppSettings['branding.ticketing_color'] %>;\n}\n.navbar-active {\n  background-color: <%= lighten_color(AppSettings['branding.ticketing_color'], 0.05) %>;\n  border-radius: 5px;\n\n}\n#footer,\n#footer a,\n.nav-color {\n  color: <%= contrasting_text_color(AppSettings['branding.ticketing_color'].split('#')[1]) %>;\n}\n.brand-color: {\n  color: <%= AppSettings['branding.ticketing_color'] %>;\n}\n.topic-search-container {\n  background-color: <%= darken_color(AppSettings['branding.ticketing_bg_color'], 0.9) %>;\n}\nbody {\n  background-color: <%= AppSettings['branding.ticketing_bg_color'] %>;\n}\n#upper-wrapper {\n  background-color: <%= AppSettings['branding.ticketing_color'] %>;\n}\n\n#header-wrapper > nav > div > ul > li.open > a,\n.navbar.navbar-default,\n.nav {\n  background-color: transparent;\n}\n\n.nav-active {\n  background-color: <%= darken_color(AppSettings['branding.ticketing_bg_color'], 0.95) %>;\n}\n\nli.nav-over {\n  background-color: <%= darken_color(AppSettings['branding.ticketing_bg_color'], 0.97) %> !important;\n}\n\n#header-wrapper > nav > div > ul > li > a {\n  color: <%= contrasting_text_color(AppSettings['branding.ticketing_color'].split('#')[1]) %>;\n}\n\n<% if !display_branding? %>\na.navbar-brand {\n  display: none;\n}\n#header-wrapper > nav > div.navbar-collapse.collapse {\n  margin-left: -10px;\n}\n<% else %>\n#header-wrapper > nav > div.navbar-collapse.collapse {\n  margin-left: -15px;\n}\n<% end %>\n</style>\n<%= content_tag :div, bootstrap_flash, class: 'flash-wrapper' %>\n<div id=\"upper-wrapper\" class=\"jumbotron\">\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div id=\"header-wrapper\">\n          <div id=\"above-header\" class=\"hidden-xs small\">\n          </div>\n          <nav class=\"navbar navbar-default navbar-inverse\" role=\"navigation\">\n            <div class=\"navbar-header\">\n              <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                <span class=\"sr-only\">Toggle navigation</span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n                <span class=\"icon-bar\"></span>\n              </button>\n            </div>\n            <div class=\"navbar-collapse collapse\">\n              <ul class=\"nav navbar-nav navbar-right pull-right hidden-xs\" data-hook='admin-nav-right'>\n                <%= content_tag(:li, '' , class: \"visible-lg visible-md visible-sm hidden-xs click-loader new-discussion #{new_active_class}\") do %>\n                  <%= navbar_expanding_link(new_admin_topic_path, \"fas fa-plus\", t(:new_ticket, default: \"New Ticket\"), \"\", (params[:controller] == 'admin/topics')) %>\n                <% end if current_user.is_agent? %>\n                <%= help_menu %>\n                <%= admin_avatar_menu %>\n              </ul>\n              <ul class=\"nav navbar-nav navbar-left\" data-hook='admin-nav-left'>\n                <%= upper_nav_item(t(:inbox, default: \"Inbox\"), admin_topics_path,[\"topics\"], ['index','show'], \"fas fa-inbox\") if (forums? || tickets?) && current_user.is_agent? %>\n                <%= upper_nav_item(t(:reports, default: 'Reports'), admin_reports_path(interval: 7), [\"reports\"], ['index', 'groups', 'team'], \"fas fa-chart-bar\") if tickets? && current_user.is_admin? %>\n                <%= upper_nav_item(t(:users, default: 'Customers'), admin_users_path(role: 'user'), [\"users\"], [\"index\",\"show\",\"edit\",\"update\"], \"fas fa-users\") if current_user.is_agent? %>\n                <%= helpcenter_menu if (knowledgebase? || forums?) && current_user.is_agent? %>\n                <%= content_tag(:li, link_to(t(:content, default: \"Content\"), admin_categories_path), class:'kblink') if knowledgebase? && current_user.role == 'editor' %>\n                <%#= content_tag(:li, link_to(t(:app_store, default: \"App Store\"), \"http://helpy.io/store/\"), class: \"hidden-sm hidden-xs\") if current_user.is_agent? %>\n                <%= content_tag(:li, link_to(t(:open_new_discussion, default: \"New Ticket\"), new_admin_topic_path), class: 'visible-xs hidden-lg hidden-md hidden-sm') if current_user.is_agent? %>\n                <%= content_tag(:li, link_to(t(:settings, default: \"Settings\"), admin_settings_path), class: 'visible-xs hidden-lg hidden-md hidden-sm') if current_user.is_admin? %>\n                <%= content_tag(:li, link_to(t(:get_help, default: \"Get Help\"), \"http://support.helpy.io/\"), class: 'visible-xs hidden-lg hidden-md hidden-sm', target: 'blank') %>\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"], "filenames": ["app/models/user.rb", "app/views/admin/topics/_topic_options.html.erb", "app/views/admin/users/_user.html.erb", "app/views/admin/users/_user_context_menu.html.erb", "app/views/admin/users/_user_info_with_tickets.html.erb", "app/views/layouts/_admin_header.html.erb"], "buggy_code_start_loc": [206, 14, 27, 5, 14, 89], "buggy_code_end_loc": [206, 15, 28, 6, 53, 90], "fixing_code_start_loc": [207, 14, 27, 5, 14, 89], "fixing_code_end_loc": [213, 15, 28, 6, 53, 90], "type": "NVD-CWE-noinfo", "message": "Helpy before 2.2.0 allows agents to edit admins.", "other": {"cve": {"id": "CVE-2018-20851", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-10T14:15:10.950", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Helpy before 2.2.0 allows agents to edit admins."}, {"lang": "es", "value": "Helpy versiones anteriores a 2.2.0, permite a agentes editar administradores."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:helpy.io:helpy:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.0", "matchCriteriaId": "0EEDD5C0-75E0-4BDA-AE03-A9F73DB72746"}]}]}], "references": [{"url": "https://github.com/helpyio/helpy/commit/a26dd854deb17e36a605f91a6f51d128e98d3818", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/helpyio/helpy/compare/d64e97a...592bc60", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/helpyio/helpy/commit/a26dd854deb17e36a605f91a6f51d128e98d3818"}}