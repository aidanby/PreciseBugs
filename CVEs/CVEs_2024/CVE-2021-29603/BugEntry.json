{"buggy_code": ["/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/arg_min_max.h\"\n\n#include <stdint.h>\n\n#include <functional>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace arg_min_max {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kAxis = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\n                          const TfLiteTensor* axis, TfLiteTensor* output) {\n  int axis_value;\n  // Retrive all 8 bytes when axis type is kTfLiteInt64 to avoid data loss.\n  if (axis->type == kTfLiteInt64) {\n    axis_value = static_cast<int>(*GetTensorData<int64_t>(axis));\n  } else {\n    axis_value = *GetTensorData<int>(axis);\n  }\n  if (axis_value < 0) {\n    axis_value += NumDimensions(input);\n  }\n\n  // Copy the input dimensions to output except the axis dimension.\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\n  int j = 0;\n  for (int i = 0; i < NumDimensions(input); ++i) {\n    if (i != axis_value) {\n      output_dims->data[j] = SizeOfDimension(input, i);\n      ++j;\n    }\n  }\n  return context->ResizeTensor(context, output, output_dims);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n  // Make sure the axis is only 1 dimension.\n  TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);\n  // Make sure the axis is only either int32 or int64.\n  TF_LITE_ENSURE(context,\n                 axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  auto* params = reinterpret_cast<TfLiteArgMaxParams*>(node->builtin_data);\n  switch (params->output_type) {\n    case kTfLiteInt32:\n      output->type = kTfLiteInt32;\n      break;\n    case kTfLiteInt64:\n      output->type = kTfLiteInt64;\n      break;\n    default:\n      context->ReportError(context, \"Unknown index output data type: %d\",\n                           params->output_type);\n      return kTfLiteError;\n  }\n\n  // Check conditions for different types.\n  switch (input->type) {\n    case kTfLiteFloat32:\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n    case kTfLiteInt32:\n      break;\n\n    default:\n      context->ReportError(\n          context,\n          \"Unknown input type: %d, only float32 and int types are supported\",\n          input->type);\n      return kTfLiteError;\n  }\n\n  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n\n  if (IsConstantTensor(axis)) {\n    TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));\n  } else {\n    SetTensorToDynamic(output);\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));\n  }\n\n#define TF_LITE_ARG_MIN_MAX(data_type, axis_type, output_type) \\\n  optimized_ops::ArgMinMax(                                    \\\n      GetTensorShape(input), GetTensorData<data_type>(input),  \\\n      GetTensorData<axis_type>(axis), GetTensorShape(output),  \\\n      GetTensorData<output_type>(output), is_arg_max)\n  if (axis->type == kTfLiteInt32) {\n    switch (output->type) {\n      case kTfLiteInt32: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int32_t, int32_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      case kTfLiteInt64: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int32_t, int64_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int64_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int64_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int32_t, int64_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      default:\n        context->ReportError(\n            context, \"Only int32 and int64 are supported currently, got %s.\",\n            TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else {\n    switch (output->type) {\n      case kTfLiteInt32: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int64_t, int32_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int64_t, int32_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int64_t, int32_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int64_t, int32_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      case kTfLiteInt64: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int64_t, int64_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int64_t, int64_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int64_t, int64_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int64_t, int64_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      default:\n        context->ReportError(\n            context, \"Only int32 and int64 are supported currently, got %s.\",\n            TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  }\n#undef TF_LITE_ARG_MIN_MAX\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus ArgMinEval(TfLiteContext* context, TfLiteNode* node) {\n  return Eval(context, node, false);\n}\n\nTfLiteStatus ArgMaxEval(TfLiteContext* context, TfLiteNode* node) {\n  return Eval(context, node, true);\n}\n\n}  // namespace arg_min_max\n\nTfLiteRegistration* Register_ARG_MAX() {\n  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,\n                                 arg_min_max::ArgMaxEval};\n  return &r;\n}\n\nTfLiteRegistration* Register_ARG_MIN() {\n  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,\n                                 arg_min_max::ArgMinEval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/lite/kernels/internal/reference/arg_min_max.h\"\n\n#include <stdint.h>\n\n#include <functional>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/optimized/optimized_ops.h\"\n#include \"tensorflow/lite/kernels/internal/quantization_util.h\"\n#include \"tensorflow/lite/kernels/internal/tensor.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace arg_min_max {\n\nconstexpr int kInputTensor = 0;\nconstexpr int kAxis = 1;\nconstexpr int kOutputTensor = 0;\n\nTfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\n                          const TfLiteTensor* axis, TfLiteTensor* output) {\n  int axis_value;\n  // Retrive all 8 bytes when axis type is kTfLiteInt64 to avoid data loss.\n  if (axis->type == kTfLiteInt64) {\n    axis_value = static_cast<int>(*GetTensorData<int64_t>(axis));\n  } else {\n    axis_value = *GetTensorData<int>(axis);\n  }\n  if (axis_value < 0) {\n    axis_value += NumDimensions(input);\n  }\n\n  TF_LITE_ENSURE(context, axis_value >= 0);\n  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\n\n  // Copy the input dimensions to output except the axis dimension.\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\n  int j = 0;\n  for (int i = 0; i < NumDimensions(input); ++i) {\n    if (i != axis_value) {\n      output_dims->data[j] = SizeOfDimension(input, i);\n      ++j;\n    }\n  }\n  return context->ResizeTensor(context, output, output_dims);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n  // Make sure the axis is only 1 dimension.\n  TF_LITE_ENSURE_EQ(context, NumElements(axis), 1);\n  // Make sure the axis is only either int32 or int64.\n  TF_LITE_ENSURE(context,\n                 axis->type == kTfLiteInt32 || axis->type == kTfLiteInt64);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n\n  auto* params = reinterpret_cast<TfLiteArgMaxParams*>(node->builtin_data);\n  switch (params->output_type) {\n    case kTfLiteInt32:\n      output->type = kTfLiteInt32;\n      break;\n    case kTfLiteInt64:\n      output->type = kTfLiteInt64;\n      break;\n    default:\n      context->ReportError(context, \"Unknown index output data type: %d\",\n                           params->output_type);\n      return kTfLiteError;\n  }\n\n  // Check conditions for different types.\n  switch (input->type) {\n    case kTfLiteFloat32:\n    case kTfLiteUInt8:\n    case kTfLiteInt8:\n    case kTfLiteInt32:\n      break;\n\n    default:\n      context->ReportError(\n          context,\n          \"Unknown input type: %d, only float32 and int types are supported\",\n          input->type);\n      return kTfLiteError;\n  }\n\n  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n\n  if (IsConstantTensor(axis)) {\n    TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));\n  } else {\n    SetTensorToDynamic(output);\n  }\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));\n  const TfLiteTensor* axis;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kAxis, &axis));\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context,\n                    GetOutputSafe(context, node, kOutputTensor, &output));\n  if (IsDynamicTensor(output)) {\n    TF_LITE_ENSURE_STATUS(ResizeOutput(context, input, axis, output));\n  }\n\n#define TF_LITE_ARG_MIN_MAX(data_type, axis_type, output_type) \\\n  optimized_ops::ArgMinMax(                                    \\\n      GetTensorShape(input), GetTensorData<data_type>(input),  \\\n      GetTensorData<axis_type>(axis), GetTensorShape(output),  \\\n      GetTensorData<output_type>(output), is_arg_max)\n  if (axis->type == kTfLiteInt32) {\n    switch (output->type) {\n      case kTfLiteInt32: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int32_t, int32_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      case kTfLiteInt64: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int32_t, int64_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int64_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int64_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int32_t, int64_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      default:\n        context->ReportError(\n            context, \"Only int32 and int64 are supported currently, got %s.\",\n            TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  } else {\n    switch (output->type) {\n      case kTfLiteInt32: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int64_t, int32_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int64_t, int32_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int64_t, int32_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int64_t, int32_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      case kTfLiteInt64: {\n        switch (input->type) {\n          case kTfLiteFloat32:\n            TF_LITE_ARG_MIN_MAX(float, int64_t, int64_t);\n            break;\n          case kTfLiteUInt8:\n            TF_LITE_ARG_MIN_MAX(uint8_t, int64_t, int64_t);\n            break;\n          case kTfLiteInt8:\n            TF_LITE_ARG_MIN_MAX(int8_t, int64_t, int64_t);\n            break;\n          case kTfLiteInt32:\n            TF_LITE_ARG_MIN_MAX(int32_t, int64_t, int64_t);\n            break;\n          default:\n            context->ReportError(context,\n                                 \"Only float32, uint8, int8 and int32 are \"\n                                 \"supported currently, got %s.\",\n                                 TfLiteTypeGetName(input->type));\n            return kTfLiteError;\n        }\n      } break;\n      default:\n        context->ReportError(\n            context, \"Only int32 and int64 are supported currently, got %s.\",\n            TfLiteTypeGetName(output->type));\n        return kTfLiteError;\n    }\n  }\n#undef TF_LITE_ARG_MIN_MAX\n\n  return kTfLiteOk;\n}\n\nTfLiteStatus ArgMinEval(TfLiteContext* context, TfLiteNode* node) {\n  return Eval(context, node, false);\n}\n\nTfLiteStatus ArgMaxEval(TfLiteContext* context, TfLiteNode* node) {\n  return Eval(context, node, true);\n}\n\n}  // namespace arg_min_max\n\nTfLiteRegistration* Register_ARG_MAX() {\n  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,\n                                 arg_min_max::ArgMaxEval};\n  return &r;\n}\n\nTfLiteRegistration* Register_ARG_MIN() {\n  static TfLiteRegistration r = {nullptr, nullptr, arg_min_max::Prepare,\n                                 arg_min_max::ArgMinEval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/arg_min_max.cc"], "buggy_code_start_loc": [49], "buggy_code_end_loc": [49], "fixing_code_start_loc": [50], "fixing_code_end_loc": [53], "type": "CWE-787", "message": "TensorFlow is an end-to-end open source platform for machine learning. A specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of `ArgMin`/`ArgMax`(https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59). If `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29603", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:15.577", "lastModified": "2021-05-18T15:18:17.423", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. A specially crafted TFLite model could trigger an OOB write on heap in the TFLite implementation of `ArgMin`/`ArgMax`(https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/kernels/arg_min_max.cc#L52-L59). If `axis_value` is not a value between 0 and `NumDimensions(input)`, then the condition in the `if` is never true, so code writes past the last valid element of `output_dims->data`. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Un modelo de TFLite especialmente dise\u00f1ado podr\u00eda desencadenar una escritura OOB en la pila en la implementaci\u00f3n de TFLite de \"ArgMin\"/\"ArgMax\" (https://github.com/tensorflow/tensorflow/blob/102b211d892f3abc14f845a72047809b39cc65ab/tensorflow/lite/minnel_max/arg_ # L52-L59).&#xa0;Si \"axis_value\" no es un valor entre 0 y \"NumDimensions (input)\", entonces la condici\u00f3n en el \"if\" nunca es verdadera, por lo que el c\u00f3digo escribe m\u00e1s all\u00e1 del \u00faltimo elemento v\u00e1lido de \"output_dims-)data\".&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-crch-j389-5f84", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/c59c37e7b2d563967da813fa50fe20b21f4da683"}}