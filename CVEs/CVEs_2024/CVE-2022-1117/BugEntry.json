{"buggy_code": ["Summary: Application Whitelisting Daemon\nName: fapolicyd\nVersion: 1.1.2\nRelease: 1\nLicense: GPLv3+\nURL: http://people.redhat.com/sgrubb/fapolicyd\nSource0: https://people.redhat.com/sgrubb/fapolicyd/%{name}-%{version}.tar.gz\nBuildRequires: gcc\nBuildRequires: kernel-headers\nBuildRequires: autoconf automake make gcc libtool\nBuildRequires: systemd-devel libgcrypt-devel rpm-devel file-devel file\nBuildRequires: libcap-ng-devel libseccomp-devel lmdb-devel\nBuildRequires: python3-devel\nBuildRequires: uthash-devel\nRequires(pre): shadow-utils\nRequires(post): systemd-units\nRequires(preun): systemd-units\nRequires(postun): systemd-units\n\n%description\nFapolicyd (File Access Policy Daemon) implements application whitelisting\nto decide file access rights. Applications that are known via a reputation\nsource are allowed access while unknown applications are not. The daemon\nmakes use of the kernel's fanotify interface to determine file access rights.\n\n\n%prep\n%setup -q\n\n# generate rules for python\nsed -i \"s/%python2_path%/`readlink -f %{__python2} | sed 's/\\//\\\\\\\\\\//g'`/g\" rules.d/*.rules\nsed -i \"s/%python3_path%/`readlink -f %{__python3} | sed 's/\\//\\\\\\\\\\//g'`/g\" rules.d/*.rules\nsed -i \"s/%ld_so_path%/`find /usr/lib64/ -type f -name 'ld-2\\.*.so' | sed 's/\\//\\\\\\\\\\//g'`/g\" rules.d/*.rules\n\n%build\n%configure \\\n    --with-audit \\\n    --disable-shared\n\n%make_build\n\n%install\n%make_install\nmkdir -p %{buildroot}/%{python3_sitelib}/dnf-plugins/\ninstall -p -m 644 dnf/%{name}-dnf-plugin.py %{buildroot}/%{python3_sitelib}/dnf-plugins/\ninstall -p -m 644 -D init/%{name}-tmpfiles.conf %{buildroot}/%{_tmpfilesdir}/%{name}.conf\nmkdir -p %{buildroot}/%{_localstatedir}/lib/%{name}\nmkdir -p %{buildroot}/run/%{name}\nmkdir -p %{buildroot}%{_sysconfdir}/%{name}/trust.d\nmkdir -p %{buildroot}%{_sysconfdir}/%{name}/rules.d\n\n#cleanup\nfind %{buildroot} \\( -name '*.la' -o -name '*.a' \\) -delete\n\n%check\nmake check\n\n%pre\ngetent passwd %{name} >/dev/null || useradd -r -M -d %{_localstatedir}/lib/%{name} -s /sbin/nologin -c \"Application Whitelisting Daemon\" %{name}\n\n%post\n# if no pre-existing rule file\nif [ ! -e %{_sysconfdir}/%{name}/%{name}.rules ] ; then\n\tfiles=`ls %{_sysconfdir}/%{name}/rules.d/ 2>/dev/null | wc -w`\n\t# Only if no pre-existing component rules\n\tif [ \"$files\" -eq 0 ] ; then\n\t\t## Install the known libs policy\ncp %{_datadir}/%{name}/sample-rules/10-languages.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/20-dracut.rules %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/21-updaters.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/30-patterns.rules %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/40-bad-elf.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/41-shared-obj.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/42-trusted-elf.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/70-trusted-lang.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/72-shell.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/90-deny-execute.rules %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/95-allow-open.rules  %{_sysconfdir}/%{name}/rules.d/\n\t\tchgrp %{name} %{_sysconfdir}/%{name}/rules.d/*\n\t\tif [ -x /usr/sbin/restorecon ] ; then\n\t\t\t# restore correct label\n\t\t\t/usr/sbin/restorecon -F %{_sysconfdir}/%{name}/rules.d/*\n\t\tfi\n\t\tfagenrules --load\n\tfi\nfi\n%systemd_post %{name}.service\n\n%preun\n%systemd_preun %{name}.service\n\n%postun\n%systemd_postun_with_restart %{name}.service\n\n%files\n%doc README.md\n%{!?_licensedir:%global license %%doc}\n%license COPYING\n%attr(755,root,%{name}) %dir %{_datadir}/%{name}\n%attr(755,root,%{name}) %dir %{_datadir}/%{name}/sample-rules\n%attr(644,root,%{name}) %{_datadir}/%{name}/sample-rules/*\n%attr(644,root,%{name}) %{_datadir}/%{name}/fapolicyd-magic.mgc\n%attr(750,root,%{name}) %dir %{_sysconfdir}/%{name}\n%attr(750,root,%{name}) %dir %{_sysconfdir}/%{name}/trust.d\n%attr(750,root,%{name}) %dir %{_sysconfdir}/%{name}/rules.d\n%ghost %{_sysconfdir}/%{name}/rules.d/*\n%config(noreplace) %attr(644,root,%{name}) %{_sysconfdir}/%{name}/%{name}.conf\n%config(noreplace) %attr(644,root,%{name}) %{_sysconfdir}/%{name}/%{name}.trust\n%ghost %attr(644,root,%{name}) %{_sysconfdir}/%{name}/fapolicyd.rules\n%ghost %attr(644,root,%{name}) %{_sysconfdir}/%{name}/compiled.rules\n%attr(644,root,root) %{_unitdir}/%{name}.service\n%attr(644,root,root) %{_tmpfilesdir}/%{name}.conf\n%attr(755,root,root) %{_sbindir}/%{name}\n%attr(755,root,root) %{_sbindir}/%{name}-cli\n%attr(755,root,root) %{_sbindir}/fagenrules\n%attr(644,root,root) %{_mandir}/man8/*\n%attr(644,root,root) %{_mandir}/man5/*\n%attr(644,root,root) %{_mandir}/man1/*\n%attr(644,root,root) %{_datadir}/%{name}/*\n%ghost %attr(440,%{name},%{name}) %verify(not md5 size mtime) %{_localstatedir}/log/%{name}-access.log\n%attr(770,root,%{name}) %dir %{_localstatedir}/lib/%{name}\n%attr(770,root,%{name}) %dir /run/%{name}\n%ghost %attr(660,root,%{name}) /run/%{name}/%{name}.fifo\n%ghost %attr(660,%{name},%{name}) %verify(not md5 size mtime) %{_localstatedir}/lib/%{name}/data.mdb\n%ghost %attr(660,%{name},%{name}) %verify(not md5 size mtime) %{_localstatedir}/lib/%{name}/lock.mdb\n%{python3_sitelib}/dnf-plugins/%{name}-dnf-plugin.py\n%{python3_sitelib}/dnf-plugins/__pycache__/%{name}-dnf-plugin.*.pyc\n\n%changelog\n* Tue Mar 29 2022 Steve Grubb <sgrubb@redhat.com> 1.1.2-1\n- New release\n", "AC_DEFUN([LD_SO_PATH],\n[\n  xpath=`realpath /usr/lib64/ld-2.*.so`\n  echo \"dynamic linker is.....$xpath\"\n  AC_DEFINE_UNQUOTED(SYSTEM_LD_SO, [\"$xpath\"], [dynamic linker])\n])\n"], "fixing_code": ["Summary: Application Whitelisting Daemon\nName: fapolicyd\nVersion: 1.1.2\nRelease: 1\nLicense: GPLv3+\nURL: http://people.redhat.com/sgrubb/fapolicyd\nSource0: https://people.redhat.com/sgrubb/fapolicyd/%{name}-%{version}.tar.gz\nBuildRequires: gcc\nBuildRequires: kernel-headers\nBuildRequires: autoconf automake make gcc libtool\nBuildRequires: systemd-devel libgcrypt-devel rpm-devel file-devel file\nBuildRequires: libcap-ng-devel libseccomp-devel lmdb-devel\nBuildRequires: python3-devel\nBuildRequires: uthash-devel\nRequires(pre): shadow-utils\nRequires(post): systemd-units\nRequires(preun): systemd-units\nRequires(postun): systemd-units\n\n%description\nFapolicyd (File Access Policy Daemon) implements application whitelisting\nto decide file access rights. Applications that are known via a reputation\nsource are allowed access while unknown applications are not. The daemon\nmakes use of the kernel's fanotify interface to determine file access rights.\n\n\n%prep\n%setup -q\n\n# generate rules for python\nsed -i \"s/%python2_path%/`readlink -f %{__python2} | sed 's/\\//\\\\\\\\\\//g'`/g\" rules.d/*.rules\nsed -i \"s/%python3_path%/`readlink -f %{__python3} | sed 's/\\//\\\\\\\\\\//g'`/g\" rules.d/*.rules\n\n# Detect run time linker directly from bash\ninterpret=`readelf -e /usr/bin/bash \\\n\t\t| grep Requesting \\\n\t\t| sed 's/.$//' \\\n\t\t| rev | cut -d\" \" -f1 \\\n\t\t| rev`\n\nsed -i \"s|%ld_so_path%|`realpath $interpret`|g\" rules.d/*.rules\n\n%build\n%configure \\\n    --with-audit \\\n    --disable-shared\n\n%make_build\n\n%install\n%make_install\nmkdir -p %{buildroot}/%{python3_sitelib}/dnf-plugins/\ninstall -p -m 644 dnf/%{name}-dnf-plugin.py %{buildroot}/%{python3_sitelib}/dnf-plugins/\ninstall -p -m 644 -D init/%{name}-tmpfiles.conf %{buildroot}/%{_tmpfilesdir}/%{name}.conf\nmkdir -p %{buildroot}/%{_localstatedir}/lib/%{name}\nmkdir -p %{buildroot}/run/%{name}\nmkdir -p %{buildroot}%{_sysconfdir}/%{name}/trust.d\nmkdir -p %{buildroot}%{_sysconfdir}/%{name}/rules.d\n\n#cleanup\nfind %{buildroot} \\( -name '*.la' -o -name '*.a' \\) -delete\n\n%check\nmake check\n\n%pre\ngetent passwd %{name} >/dev/null || useradd -r -M -d %{_localstatedir}/lib/%{name} -s /sbin/nologin -c \"Application Whitelisting Daemon\" %{name}\n\n%post\n# if no pre-existing rule file\nif [ ! -e %{_sysconfdir}/%{name}/%{name}.rules ] ; then\n\tfiles=`ls %{_sysconfdir}/%{name}/rules.d/ 2>/dev/null | wc -w`\n\t# Only if no pre-existing component rules\n\tif [ \"$files\" -eq 0 ] ; then\n\t\t## Install the known libs policy\ncp %{_datadir}/%{name}/sample-rules/10-languages.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/20-dracut.rules %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/21-updaters.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/30-patterns.rules %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/40-bad-elf.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/41-shared-obj.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/42-trusted-elf.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/70-trusted-lang.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/72-shell.rules  %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/90-deny-execute.rules %{_sysconfdir}/%{name}/rules.d/\ncp %{_datadir}/%{name}/sample-rules/95-allow-open.rules  %{_sysconfdir}/%{name}/rules.d/\n\t\tchgrp %{name} %{_sysconfdir}/%{name}/rules.d/*\n\t\tif [ -x /usr/sbin/restorecon ] ; then\n\t\t\t# restore correct label\n\t\t\t/usr/sbin/restorecon -F %{_sysconfdir}/%{name}/rules.d/*\n\t\tfi\n\t\tfagenrules --load\n\tfi\nfi\n%systemd_post %{name}.service\n\n%preun\n%systemd_preun %{name}.service\n\n%postun\n%systemd_postun_with_restart %{name}.service\n\n%files\n%doc README.md\n%{!?_licensedir:%global license %%doc}\n%license COPYING\n%attr(755,root,%{name}) %dir %{_datadir}/%{name}\n%attr(755,root,%{name}) %dir %{_datadir}/%{name}/sample-rules\n%attr(644,root,%{name}) %{_datadir}/%{name}/sample-rules/*\n%attr(644,root,%{name}) %{_datadir}/%{name}/fapolicyd-magic.mgc\n%attr(750,root,%{name}) %dir %{_sysconfdir}/%{name}\n%attr(750,root,%{name}) %dir %{_sysconfdir}/%{name}/trust.d\n%attr(750,root,%{name}) %dir %{_sysconfdir}/%{name}/rules.d\n%ghost %{_sysconfdir}/%{name}/rules.d/*\n%config(noreplace) %attr(644,root,%{name}) %{_sysconfdir}/%{name}/%{name}.conf\n%config(noreplace) %attr(644,root,%{name}) %{_sysconfdir}/%{name}/%{name}.trust\n%ghost %attr(644,root,%{name}) %{_sysconfdir}/%{name}/fapolicyd.rules\n%ghost %attr(644,root,%{name}) %{_sysconfdir}/%{name}/compiled.rules\n%attr(644,root,root) %{_unitdir}/%{name}.service\n%attr(644,root,root) %{_tmpfilesdir}/%{name}.conf\n%attr(755,root,root) %{_sbindir}/%{name}\n%attr(755,root,root) %{_sbindir}/%{name}-cli\n%attr(755,root,root) %{_sbindir}/fagenrules\n%attr(644,root,root) %{_mandir}/man8/*\n%attr(644,root,root) %{_mandir}/man5/*\n%attr(644,root,root) %{_mandir}/man1/*\n%attr(644,root,root) %{_datadir}/%{name}/*\n%ghost %attr(440,%{name},%{name}) %verify(not md5 size mtime) %{_localstatedir}/log/%{name}-access.log\n%attr(770,root,%{name}) %dir %{_localstatedir}/lib/%{name}\n%attr(770,root,%{name}) %dir /run/%{name}\n%ghost %attr(660,root,%{name}) /run/%{name}/%{name}.fifo\n%ghost %attr(660,%{name},%{name}) %verify(not md5 size mtime) %{_localstatedir}/lib/%{name}/data.mdb\n%ghost %attr(660,%{name},%{name}) %verify(not md5 size mtime) %{_localstatedir}/lib/%{name}/lock.mdb\n%{python3_sitelib}/dnf-plugins/%{name}-dnf-plugin.py\n%{python3_sitelib}/dnf-plugins/__pycache__/%{name}-dnf-plugin.*.pyc\n\n%changelog\n* Tue Mar 29 2022 Steve Grubb <sgrubb@redhat.com> 1.1.2-1\n- New release\n", "AC_DEFUN([LD_SO_PATH],\n[\n  xpath1=`readelf -e /usr/bin/bash | grep Requesting | sed 's/.$//' | rev | cut -d\" \" -f1 | rev`\n  xpath=`realpath $xpath1`\n  if test ! -f \"$xpath\" ; then\n    AC_MSG_ERROR([Cant find the dynamic linker])\n  fi\n  echo \"dynamic linker is.....$xpath\"\n  AC_DEFINE_UNQUOTED(SYSTEM_LD_SO, [\"$xpath\"], [dynamic linker])\n])\n"], "filenames": ["fapolicyd.spec", "m4/dyn_linker.m4"], "buggy_code_start_loc": [33, 3], "buggy_code_end_loc": [34, 4], "fixing_code_start_loc": [33, 3], "fixing_code_end_loc": [42, 8], "type": "CWE-552", "message": "A vulnerability was found in fapolicyd. The vulnerability occurs due to an assumption on how glibc names the runtime linker, a build time regular expression may not correctly detect the runtime linker. The consequence is that the pattern detection for applications launched by the run time linker may fail to detect the pattern and allow execution.", "other": {"cve": {"id": "CVE-2022-1117", "sourceIdentifier": "secalert@redhat.com", "published": "2022-08-29T15:15:10.357", "lastModified": "2023-02-12T22:15:23.080", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability was found in fapolicyd. The vulnerability occurs due to an assumption on how glibc names the runtime linker, a build time regular expression may not correctly detect the runtime linker. The consequence is that the pattern detection for applications launched by the run time linker may fail to detect the pattern and allow execution."}, {"lang": "es", "value": "Se ha encontrado una vulnerabilidad en fapolicyd. La vulnerabilidad se produce debido a una suposici\u00f3n sobre c\u00f3mo glibc nombra al enlazador en tiempo de ejecuci\u00f3n, una expresi\u00f3n regular en tiempo de compilaci\u00f3n puede no detectar correctamente el enlazador en tiempo de ejecuci\u00f3n. La consecuencia es que la detecci\u00f3n de patrones para las aplicaciones lanzadas por el enlazador en tiempo de ejecuci\u00f3n puede fallar al detectar el patr\u00f3n y permitir la ejecuci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.5, "impactScore": 5.9}]}, "weaknesses": [{"source": "secalert@redhat.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-552"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-552"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fapolicyd_project:fapolicyd:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1.2", "matchCriteriaId": "77ED18CE-3E85-47C5-B5D3-9F2A846C75E5"}]}]}], "references": [{"url": "https://access.redhat.com/security/cve/CVE-2022-1117", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2066904", "source": "secalert@redhat.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2068171", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/linux-application-whitelisting/fapolicyd/commit/38a942613f93824c53164730b2b7a2f75b8cd263", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/linux-application-whitelisting/fapolicyd/commit/38a942613f93824c53164730b2b7a2f75b8cd263"}}