{"buggy_code": ["<?php\n/**\n * 2007-2016 PrestaShop\n *\n * thirty bees is an extension to the PrestaShop e-commerce software developed by PrestaShop SA\n * Copyright (C) 2017-2018 thirty bees\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@thirtybees.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.thirtybees.com for more information.\n *\n * @author    thirty bees <contact@thirtybees.com>\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2017-2018 thirty bees\n * @copyright 2007-2016 PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n *  PrestaShop is an internationally registered trademark & property of PrestaShop SA\n */\n\n/**\n * Class AdminRequestSqlControllerCore\n *\n * @property RequestSql|null $object\n */\nclass AdminRequestSqlControllerCore extends AdminController\n{\n    /**\n     * @var array : List of encoding type for a file\n     */\n    public static $encoding_file = [\n        ['value' => 1, 'name' => 'utf-8'],\n        ['value' => 2, 'name' => 'iso-8859-1'],\n    ];\n\n    /**\n     * AdminRequestSqlControllerCore constructor.\n     *\n     * @throws PrestaShopException\n     */\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'request_sql';\n        $this->className = 'RequestSql';\n        $this->lang = false;\n\n        $this->context = Context::getContext();\n\n        $this->fields_list = [\n            'id_request_sql' => ['title' => $this->l('ID'), 'class' => 'fixed-width-xs'],\n            'name'           => ['title' => $this->l('SQL query Name')],\n            'sql'            => ['title' => $this->l('SQL query')],\n        ];\n\n        $this->fields_options = [\n            'general' => [\n                'title'  => $this->l('Settings'),\n                'fields' => [\n                    'PS_ENCODING_FILE_MANAGER_SQL' => [\n                        'title'      => $this->l('Select your default file encoding'),\n                        'cast'       => 'intval',\n                        'type'       => 'select',\n                        'identifier' => 'value',\n                        'list'       => static::$encoding_file,\n                        'visibility' => Shop::CONTEXT_ALL,\n                    ],\n                ],\n                'submit' => ['title' => $this->l('Save')],\n            ],\n        ];\n\n        $this->bulk_actions = [\n            'delete' => [\n                'text'    => $this->l('Delete selected'),\n                'confirm' => $this->l('Delete selected items?'),\n                'icon'    => 'icon-trash',\n            ],\n        ];\n\n        parent::__construct();\n    }\n\n    /**\n     * Post processing\n     *\n     * @return bool\n     * @throws PrestaShopException\n     */\n    public function postProcess()\n    {\n        /* PrestaShop demo mode */\n        if (_PS_MODE_DEMO_) {\n            $this->errors[] = Tools::displayError('This functionality has been disabled.');\n\n            return false;\n        }\n\n        return parent::postProcess();\n    }\n\n    /**\n     * method call when ajax request is made with the details row action\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     * @see AdminController::postProcess()\n     */\n    public function ajaxProcess()\n    {\n        /* PrestaShop demo mode */\n        if (_PS_MODE_DEMO_) {\n            $this->ajaxDie(Tools::displayError('This functionality has been disabled.'));\n        }\n        if ($table = Tools::GetValue('table')) {\n            $requestSql = new RequestSql();\n            $attributes = $requestSql->getAttributesByTable($table);\n            foreach ($attributes as $key => $attribute) {\n                unset($attributes[$key]['Null']);\n                unset($attributes[$key]['Key']);\n                unset($attributes[$key]['Default']);\n                unset($attributes[$key]['Extra']);\n            }\n            $this->ajaxDie(json_encode($attributes));\n        }\n    }\n\n    /**\n     * Child validation\n     *\n     * @return void\n     */\n    public function _childValidation()\n    {\n        if (Tools::getValue('submitAdd'.$this->table) && $sql = Tools::getValue('sql')) {\n            $requestSql = new RequestSql();\n            $parser = $requestSql->parsingSql($sql);\n            $validate = $requestSql->validateParser($parser, false, $sql);\n\n            if (!$validate || count($requestSql->error_sql)) {\n                $this->displayError($requestSql->error_sql);\n            }\n        }\n    }\n\n    /**\n     * Display all errors\n     *\n     * @param array $e errors\n     *\n     * @return void\n     */\n    public function displayError($e)\n    {\n        foreach (array_keys($e) as $key) {\n            switch ($key) {\n                case 'checkedFrom':\n                    if (isset($e[$key]['table'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The \"%s\" table does not exist.'), $e[$key]['table']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedFrom\" error');\n                    }\n                    break;\n\n                case 'checkedSelect':\n                    if (isset($e[$key]['table'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The \"%s\" table does not exist.'), $e[$key]['table']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } elseif (isset($e[$key]['*'])) {\n                        $this->errors[] = Tools::displayError('The \"*\" operator cannot be used in a nested query.');\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedSelect\" error');\n                    }\n                    break;\n\n                case 'checkedWhere':\n                    if (isset($e[$key]['operator'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The operator \"%s\" is incorrect.'), $e[$key]['operator']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedWhere\" error');\n                    }\n                    break;\n\n                case 'checkedHaving':\n                    if (isset($e[$key]['operator'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The \"%s\" operator is incorrect.'), $e[$key]['operator']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedHaving\" error');\n                    }\n                    break;\n\n                case 'checkedOrder':\n                    if (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedOrder\" error');\n                    }\n                    break;\n\n                case 'checkedGroupBy':\n                    if (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedGroupBy\" error');\n                    }\n                    break;\n\n                case 'checkedLimit':\n                    $this->errors[] = Tools::displayError('The LIMIT clause must contain numeric arguments.');\n                    break;\n\n                case 'returnNameTable':\n                    if (isset($e[$key]['reference'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" reference does not exist in the \"%2$s\" table.'),\n                            $e[$key]['reference'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('When multiple tables are used, each attribute must refer back to a table.');\n                    }\n                    break;\n\n                case 'testedRequired':\n                    $this->errors[] = sprintf(Tools::displayError('%s does not exist.'), $e[$key]);\n                    break;\n\n                case 'testedUnauthorized':\n                    $this->errors[] = sprintf(Tools::displayError('Is an unauthorized keyword.'), $e[$key]);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Display export action link\n     *\n     * @param string $token\n     * @param int $id\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayExportLink($token, $id)\n    {\n        $tpl = $this->createTemplate('list_action_export.tpl');\n\n        $tpl->assign(\n            [\n                'href'   => static::$currentIndex.'&token='.$this->token.'&'.$this->identifier.'='.$id.'&export'.$this->table.'=1',\n                'action' => $this->l('Export'),\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Initialize processing\n     *\n     * @return void\n     */\n    public function initProcess()\n    {\n        parent::initProcess();\n        if (Tools::getValue('export'.$this->table)) {\n            $this->display = 'export';\n            $this->action = 'export';\n        }\n    }\n\n    /**\n     * Initialize content\n     *\n     * @return void\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function initContent()\n    {\n        // toolbar (save, cancel, new, ..)\n        $this->initToolbar();\n        $this->initPageHeaderToolbar();\n        if ($this->display == 'edit' || $this->display == 'add') {\n            if (!$this->loadObject(true)) {\n                return;\n            }\n\n            $this->content .= $this->renderForm();\n        } elseif ($this->display == 'view') {\n            // Some controllers use the view action without an object\n            if ($this->className) {\n                $this->loadObject(true);\n            }\n            $this->content .= $this->renderView();\n        } elseif ($this->display == 'export') {\n            $this->generateExport();\n        } elseif (!$this->ajax) {\n            $this->content .= $this->renderList();\n            $this->content .= $this->renderOptions();\n        }\n\n        $this->context->smarty->assign(\n            [\n                'content'                   => $this->content,\n                'url_post'                  => static::$currentIndex.'&token='.$this->token,\n                'show_page_header_toolbar'  => $this->show_page_header_toolbar,\n                'page_header_toolbar_title' => $this->page_header_toolbar_title,\n                'page_header_toolbar_btn'   => $this->page_header_toolbar_btn,\n            ]\n        );\n    }\n\n    /**\n     * Initialize toolbar\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     */\n    public function initToolbar()\n    {\n        if ($this->display == 'view' && $idRequest = Tools::getIntValue('id_request_sql')) {\n            $this->toolbar_btn['edit'] = [\n                'href' => static::$currentIndex.'&amp;updaterequest_sql&amp;token='.$this->token.'&amp;id_request_sql='.$idRequest,\n                'desc' => $this->l('Edit this SQL query'),\n            ];\n        }\n\n        parent::initToolbar();\n\n        if ($this->display == 'options') {\n            unset($this->toolbar_btn['new']);\n        }\n    }\n\n    /**\n     * Initialize page header toolbar\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     */\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_request'] = [\n                'href' => static::$currentIndex.'&addrequest_sql&token='.$this->token,\n                'desc' => $this->l('Add new SQL query', null, null, false),\n                'icon' => 'process-icon-new',\n            ];\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    /**\n     * Render form\n     *\n     * @return string\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderForm()\n    {\n        $this->fields_form = [\n            'legend' => [\n                'title' => $this->l('SQL query'),\n                'icon'  => 'icon-cog',\n            ],\n            'input'  => [\n                [\n                    'type'     => 'text',\n                    'label'    => $this->l('SQL query name'),\n                    'name'     => 'name',\n                    'size'     => 103,\n                    'required' => true,\n                ],\n                [\n                    'type'     => 'textarea',\n                    'label'    => $this->l('SQL query'),\n                    'name'     => 'sql',\n                    'cols'     => 100,\n                    'rows'     => 10,\n                    'required' => true,\n                ],\n            ],\n            'submit' => [\n                'title' => $this->l('Save'),\n            ],\n        ];\n\n        $request = new RequestSql();\n        $this->tpl_form_vars = ['tables' => $request->getTables()];\n\n        return parent::renderForm();\n    }\n\n    /**\n     * Render view\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderView()\n    {\n        /** @var RequestSql $obj */\n        if (!($obj = $this->loadObject(true))) {\n            return '';\n        }\n\n        try {\n            if ($results = Db::readOnly()->getArray($obj->sql)) {\n                foreach (array_keys($results[0]) as $key) {\n                    $tabKey[] = $key;\n                }\n\n                $view['name'] = $obj->name;\n                $view['key'] = $tabKey;\n                $view['results'] = $results;\n\n                $this->toolbar_title = $obj->name;\n\n                $requestSql = new RequestSql();\n                $view['attributes'] = $requestSql->attributes;\n            } else {\n                $view['error'] = true;\n            }\n        } catch (PrestaShopException $e) {\n            $this->errors[] = $e->getMessage();\n            $view = [\n                'name'    => '',\n                'key'     => '',\n                'results' => [],\n            ];\n        }\n\n        $this->tpl_view_vars = [\n            'view' => $view,\n        ];\n\n        return parent::renderView();\n    }\n\n    /**\n     * Generating a export file\n     *\n     * @return void\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function generateExport()\n    {\n        $id = Tools::getValue($this->identifier);\n        $exportDir = _PS_ADMIN_DIR_.'/export/';\n        if (!Validate::isFileName($id)) {\n            throw new PrestaShopException(sprintf(Tools::displayError(\"Invalid filename [%s]\"), Tools::safeOutput($id)));\n        }\n        $file = 'request_sql_'.$id.'.csv';\n        if ($csv = fopen($exportDir.$file, 'w')) {\n            $sql = RequestSql::getRequestSqlById($id);\n\n            if ($sql) {\n                $results = Db::readOnly()->getArray($sql[0]['sql']);\n                foreach (array_keys($results[0]) as $key) {\n                    $tabKey[] = $key;\n                    fputs($csv, $key.';');\n                }\n                foreach ($results as $result) {\n                    fputs($csv, \"\\n\");\n                    foreach ($tabKey as $name) {\n                        fputs($csv, '\"'.strip_tags($result[$name]).'\";');\n                    }\n                }\n                if (file_exists($exportDir.$file)) {\n                    $filesize = filesize($exportDir.$file);\n                    $uploadMaxFilesize = Tools::convertBytes(ini_get('upload_max_filesize'));\n                    if ($filesize < $uploadMaxFilesize) {\n                        if (Configuration::get('PS_ENCODING_FILE_MANAGER_SQL')) {\n                            $charset = Configuration::get('PS_ENCODING_FILE_MANAGER_SQL');\n                        } else {\n                            $charset = static::$encoding_file[0]['name'];\n                        }\n\n                        header('Content-Type: text/csv; charset='.$charset);\n                        header('Cache-Control: no-store, no-cache');\n                        header('Content-Disposition: attachment; filename=\"'.$file.'\"');\n                        header('Content-Length: '.$filesize);\n                        readfile($exportDir.$file);\n                        exit;\n                    } else {\n                        $this->errors[] = Tools::DisplayError('The file is too large and can not be downloaded. Please use the LIMIT clause in this query.');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Render list\n     *\n     * @return false|string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderList()\n    {\n        // Set toolbar options\n        $this->display = null;\n        $this->initToolbar();\n\n        $this->displayWarning($this->l('When saving the query, only the \"SELECT\" SQL statement is allowed.'));\n        $this->displayInformation(\n            '\n\t\t<strong>'.$this->l('How do I create a new SQL query?').'</strong><br />\n\t\t<ul>\n\t\t\t<li>'.$this->l('Click \"Add New\".').'</li>\n\t\t\t<li>'.$this->l('Fill in the fields and click \"Save\".').'</li>\n\t\t\t<li>'.$this->l('You can then view the query results by clicking on the Edit action in the dropdown menu: ').' <i class=\"icon-pencil\"></i></li>\n\t\t\t<li>'.$this->l('You can also export the query results as a CSV file by clicking on the Export button: ').' <i class=\"icon-cloud-upload\"></i></li>\n\t\t</ul>'\n        );\n\n        $this->addRowAction('export');\n        $this->addRowAction('view');\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n\n        return parent::renderList();\n    }\n\n    /**\n     * Render options\n     *\n     * @return string\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderOptions()\n    {\n        // Set toolbar options\n        $this->display = 'options';\n        $this->show_toolbar = true;\n        $this->toolbar_scroll = true;\n        $this->initToolbar();\n\n        return parent::renderOptions();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2016 PrestaShop\n *\n * thirty bees is an extension to the PrestaShop e-commerce software developed by PrestaShop SA\n * Copyright (C) 2017-2018 thirty bees\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@thirtybees.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.thirtybees.com for more information.\n *\n * @author    thirty bees <contact@thirtybees.com>\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2017-2018 thirty bees\n * @copyright 2007-2016 PrestaShop SA\n * @license   http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n *  PrestaShop is an internationally registered trademark & property of PrestaShop SA\n */\n\n/**\n * Class AdminRequestSqlControllerCore\n *\n * @property RequestSql|null $object\n */\nclass AdminRequestSqlControllerCore extends AdminController\n{\n    /**\n     * @var array : List of encoding type for a file\n     */\n    public static $encoding_file = [\n        ['value' => 1, 'name' => 'utf-8'],\n        ['value' => 2, 'name' => 'iso-8859-1'],\n    ];\n\n    /**\n     * AdminRequestSqlControllerCore constructor.\n     *\n     * @throws PrestaShopException\n     */\n    public function __construct()\n    {\n        $this->bootstrap = true;\n        $this->table = 'request_sql';\n        $this->className = 'RequestSql';\n        $this->lang = false;\n\n        $this->context = Context::getContext();\n\n        $this->fields_list = [\n            'id_request_sql' => ['title' => $this->l('ID'), 'class' => 'fixed-width-xs'],\n            'name'           => ['title' => $this->l('SQL query Name')],\n            'sql'            => ['title' => $this->l('SQL query')],\n        ];\n\n        $this->fields_options = [\n            'general' => [\n                'title'  => $this->l('Settings'),\n                'fields' => [\n                    'PS_ENCODING_FILE_MANAGER_SQL' => [\n                        'title'      => $this->l('Select your default file encoding'),\n                        'cast'       => 'intval',\n                        'type'       => 'select',\n                        'identifier' => 'value',\n                        'list'       => static::$encoding_file,\n                        'visibility' => Shop::CONTEXT_ALL,\n                    ],\n                ],\n                'submit' => ['title' => $this->l('Save')],\n            ],\n        ];\n\n        $this->bulk_actions = [\n            'delete' => [\n                'text'    => $this->l('Delete selected'),\n                'confirm' => $this->l('Delete selected items?'),\n                'icon'    => 'icon-trash',\n            ],\n        ];\n\n        parent::__construct();\n    }\n\n    /**\n     * Post processing\n     *\n     * @return bool\n     * @throws PrestaShopException\n     */\n    public function postProcess()\n    {\n        /* PrestaShop demo mode */\n        if (_PS_MODE_DEMO_) {\n            $this->errors[] = Tools::displayError('This functionality has been disabled.');\n\n            return false;\n        }\n\n        return parent::postProcess();\n    }\n\n    /**\n     * method call when ajax request is made with the details row action\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     * @see AdminController::postProcess()\n     */\n    public function ajaxProcess()\n    {\n        /* PrestaShop demo mode */\n        if (_PS_MODE_DEMO_) {\n            $this->ajaxDie(Tools::displayError('This functionality has been disabled.'));\n        }\n        if ($table = Tools::GetValue('table')) {\n            $requestSql = new RequestSql();\n            $attributes = $requestSql->getAttributesByTable($table);\n            foreach ($attributes as $key => $attribute) {\n                unset($attributes[$key]['Null']);\n                unset($attributes[$key]['Key']);\n                unset($attributes[$key]['Default']);\n                unset($attributes[$key]['Extra']);\n            }\n            $this->ajaxDie(json_encode($attributes));\n        }\n    }\n\n    /**\n     * Child validation\n     *\n     * @return void\n     */\n    public function _childValidation()\n    {\n        if (Tools::getValue('submitAdd'.$this->table) && $sql = Tools::getValue('sql')) {\n            $requestSql = new RequestSql();\n            $parser = $requestSql->parsingSql($sql);\n            $validate = $requestSql->validateParser($parser, false, $sql);\n\n            if (!$validate || count($requestSql->error_sql)) {\n                $this->displayError($requestSql->error_sql);\n            }\n        }\n    }\n\n    /**\n     * Display all errors\n     *\n     * @param array $e errors\n     *\n     * @return void\n     */\n    public function displayError($e)\n    {\n        foreach (array_keys($e) as $key) {\n            switch ($key) {\n                case 'checkedFrom':\n                    if (isset($e[$key]['table'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The \"%s\" table does not exist.'), $e[$key]['table']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedFrom\" error');\n                    }\n                    break;\n\n                case 'checkedSelect':\n                    if (isset($e[$key]['table'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The \"%s\" table does not exist.'), $e[$key]['table']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } elseif (isset($e[$key]['*'])) {\n                        $this->errors[] = Tools::displayError('The \"*\" operator cannot be used in a nested query.');\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedSelect\" error');\n                    }\n                    break;\n\n                case 'checkedWhere':\n                    if (isset($e[$key]['operator'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The operator \"%s\" is incorrect.'), $e[$key]['operator']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedWhere\" error');\n                    }\n                    break;\n\n                case 'checkedHaving':\n                    if (isset($e[$key]['operator'])) {\n                        $this->errors[] = sprintf(Tools::displayError('The \"%s\" operator is incorrect.'), $e[$key]['operator']);\n                    } elseif (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedHaving\" error');\n                    }\n                    break;\n\n                case 'checkedOrder':\n                    if (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedOrder\" error');\n                    }\n                    break;\n\n                case 'checkedGroupBy':\n                    if (isset($e[$key]['attribut'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" attribute does not exist in the \"%2$s\" table.'),\n                            $e[$key]['attribut'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('Undefined \"checkedGroupBy\" error');\n                    }\n                    break;\n\n                case 'checkedLimit':\n                    $this->errors[] = Tools::displayError('The LIMIT clause must contain numeric arguments.');\n                    break;\n\n                case 'returnNameTable':\n                    if (isset($e[$key]['reference'])) {\n                        $this->errors[] = sprintf(\n                            Tools::displayError('The \"%1$s\" reference does not exist in the \"%2$s\" table.'),\n                            $e[$key]['reference'][0],\n                            $e[$key]['attribut'][1]\n                        );\n                    } else {\n                        $this->errors[] = Tools::displayError('When multiple tables are used, each attribute must refer back to a table.');\n                    }\n                    break;\n\n                case 'testedRequired':\n                    $this->errors[] = sprintf(Tools::displayError('%s does not exist.'), $e[$key]);\n                    break;\n\n                case 'testedUnauthorized':\n                    $this->errors[] = sprintf(Tools::displayError('Is an unauthorized keyword.'), $e[$key]);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Display export action link\n     *\n     * @param string $token\n     * @param int $id\n     *\n     * @return string\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function displayExportLink($token, $id)\n    {\n        $tpl = $this->createTemplate('list_action_export.tpl');\n\n        $tpl->assign(\n            [\n                'href'   => static::$currentIndex.'&token='.$this->token.'&'.$this->identifier.'='.$id.'&export'.$this->table.'=1',\n                'action' => $this->l('Export'),\n            ]\n        );\n\n        return $tpl->fetch();\n    }\n\n    /**\n     * Initialize processing\n     *\n     * @return void\n     */\n    public function initProcess()\n    {\n        parent::initProcess();\n        if (Tools::getValue('export'.$this->table)) {\n            $this->display = 'export';\n            $this->action = 'export';\n        }\n    }\n\n    /**\n     * Initialize content\n     *\n     * @return void\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function initContent()\n    {\n        // toolbar (save, cancel, new, ..)\n        $this->initToolbar();\n        $this->initPageHeaderToolbar();\n        if ($this->display == 'edit' || $this->display == 'add') {\n            if (!$this->loadObject(true)) {\n                return;\n            }\n\n            $this->content .= $this->renderForm();\n        } elseif ($this->display == 'view') {\n            // Some controllers use the view action without an object\n            if ($this->className) {\n                $this->loadObject(true);\n            }\n            $this->content .= $this->renderView();\n        } elseif ($this->display == 'export') {\n            $this->generateExport();\n        } elseif (!$this->ajax) {\n            $this->content .= $this->renderList();\n            $this->content .= $this->renderOptions();\n        }\n\n        $this->context->smarty->assign(\n            [\n                'content'                   => $this->content,\n                'url_post'                  => static::$currentIndex.'&token='.$this->token,\n                'show_page_header_toolbar'  => $this->show_page_header_toolbar,\n                'page_header_toolbar_title' => $this->page_header_toolbar_title,\n                'page_header_toolbar_btn'   => $this->page_header_toolbar_btn,\n            ]\n        );\n    }\n\n    /**\n     * Initialize toolbar\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     */\n    public function initToolbar()\n    {\n        if ($this->display == 'view' && $idRequest = Tools::getIntValue('id_request_sql')) {\n            $this->toolbar_btn['edit'] = [\n                'href' => static::$currentIndex.'&amp;updaterequest_sql&amp;token='.$this->token.'&amp;id_request_sql='.$idRequest,\n                'desc' => $this->l('Edit this SQL query'),\n            ];\n        }\n\n        parent::initToolbar();\n\n        if ($this->display == 'options') {\n            unset($this->toolbar_btn['new']);\n        }\n    }\n\n    /**\n     * Initialize page header toolbar\n     *\n     * @return void\n     *\n     * @throws PrestaShopException\n     */\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->display)) {\n            $this->page_header_toolbar_btn['new_request'] = [\n                'href' => static::$currentIndex.'&addrequest_sql&token='.$this->token,\n                'desc' => $this->l('Add new SQL query', null, null, false),\n                'icon' => 'process-icon-new',\n            ];\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    /**\n     * Render form\n     *\n     * @return string\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderForm()\n    {\n        $this->fields_form = [\n            'legend' => [\n                'title' => $this->l('SQL query'),\n                'icon'  => 'icon-cog',\n            ],\n            'input'  => [\n                [\n                    'type'     => 'text',\n                    'label'    => $this->l('SQL query name'),\n                    'name'     => 'name',\n                    'size'     => 103,\n                    'required' => true,\n                ],\n                [\n                    'type'     => 'textarea',\n                    'label'    => $this->l('SQL query'),\n                    'name'     => 'sql',\n                    'cols'     => 100,\n                    'rows'     => 10,\n                    'required' => true,\n                ],\n            ],\n            'submit' => [\n                'title' => $this->l('Save'),\n            ],\n        ];\n\n        $request = new RequestSql();\n        $this->tpl_form_vars = ['tables' => $request->getTables()];\n\n        return parent::renderForm();\n    }\n\n    /**\n     * Render view\n     *\n     * @return string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderView()\n    {\n        /** @var RequestSql $obj */\n        if (!($obj = $this->loadObject(true))) {\n            return '';\n        }\n\n        try {\n            if ($results = Db::readOnly()->getArray($obj->sql)) {\n                foreach (array_keys($results[0]) as $key) {\n                    $tabKey[] = $key;\n                }\n\n                $view['name'] = $obj->name;\n                $view['key'] = $tabKey;\n                $view['results'] = $results;\n\n                $this->toolbar_title = $obj->name;\n\n                $requestSql = new RequestSql();\n                $view['attributes'] = $requestSql->attributes;\n            } else {\n                $view['error'] = true;\n            }\n        } catch (PrestaShopException $e) {\n            $this->errors[] = Tools::safeOutput($e->getMessage());\n            $view = [\n                'name'    => '',\n                'key'     => '',\n                'results' => [],\n            ];\n        }\n\n        $this->tpl_view_vars = [\n            'view' => $view,\n        ];\n\n        return parent::renderView();\n    }\n\n    /**\n     * Generating a export file\n     *\n     * @return void\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function generateExport()\n    {\n        $id = Tools::getValue($this->identifier);\n        $exportDir = _PS_ADMIN_DIR_.'/export/';\n        if (!Validate::isFileName($id)) {\n            throw new PrestaShopException(sprintf(Tools::displayError(\"Invalid filename [%s]\"), Tools::safeOutput($id)));\n        }\n        $file = 'request_sql_'.$id.'.csv';\n        if ($csv = fopen($exportDir.$file, 'w')) {\n            $sql = RequestSql::getRequestSqlById($id);\n\n            if ($sql) {\n                $results = Db::readOnly()->getArray($sql[0]['sql']);\n                foreach (array_keys($results[0]) as $key) {\n                    $tabKey[] = $key;\n                    fputs($csv, $key.';');\n                }\n                foreach ($results as $result) {\n                    fputs($csv, \"\\n\");\n                    foreach ($tabKey as $name) {\n                        fputs($csv, '\"'.strip_tags($result[$name]).'\";');\n                    }\n                }\n                if (file_exists($exportDir.$file)) {\n                    $filesize = filesize($exportDir.$file);\n                    $uploadMaxFilesize = Tools::convertBytes(ini_get('upload_max_filesize'));\n                    if ($filesize < $uploadMaxFilesize) {\n                        if (Configuration::get('PS_ENCODING_FILE_MANAGER_SQL')) {\n                            $charset = Configuration::get('PS_ENCODING_FILE_MANAGER_SQL');\n                        } else {\n                            $charset = static::$encoding_file[0]['name'];\n                        }\n\n                        header('Content-Type: text/csv; charset='.$charset);\n                        header('Cache-Control: no-store, no-cache');\n                        header('Content-Disposition: attachment; filename=\"'.$file.'\"');\n                        header('Content-Length: '.$filesize);\n                        readfile($exportDir.$file);\n                        exit;\n                    } else {\n                        $this->errors[] = Tools::DisplayError('The file is too large and can not be downloaded. Please use the LIMIT clause in this query.');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Render list\n     *\n     * @return false|string\n     *\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderList()\n    {\n        // Set toolbar options\n        $this->display = null;\n        $this->initToolbar();\n\n        $this->displayWarning($this->l('When saving the query, only the \"SELECT\" SQL statement is allowed.'));\n        $this->displayInformation(\n            '\n\t\t<strong>'.$this->l('How do I create a new SQL query?').'</strong><br />\n\t\t<ul>\n\t\t\t<li>'.$this->l('Click \"Add New\".').'</li>\n\t\t\t<li>'.$this->l('Fill in the fields and click \"Save\".').'</li>\n\t\t\t<li>'.$this->l('You can then view the query results by clicking on the Edit action in the dropdown menu: ').' <i class=\"icon-pencil\"></i></li>\n\t\t\t<li>'.$this->l('You can also export the query results as a CSV file by clicking on the Export button: ').' <i class=\"icon-cloud-upload\"></i></li>\n\t\t</ul>'\n        );\n\n        $this->addRowAction('export');\n        $this->addRowAction('view');\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n\n        return parent::renderList();\n    }\n\n    /**\n     * Render options\n     *\n     * @return string\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     * @throws SmartyException\n     */\n    public function renderOptions()\n    {\n        // Set toolbar options\n        $this->display = 'options';\n        $this->show_toolbar = true;\n        $this->toolbar_scroll = true;\n        $this->initToolbar();\n\n        return parent::renderOptions();\n    }\n}\n"], "filenames": ["controllers/admin/AdminRequestSqlController.php"], "buggy_code_start_loc": [480], "buggy_code_end_loc": [481], "fixing_code_start_loc": [480], "fixing_code_end_loc": [481], "type": "CWE-79", "message": "A stored cross-site scripting (XSS) vulnerability in the component admin/AdminRequestSqlController.php of thirty bees before 1.5.0 allows attackers to execute arbitrary web script or HTML via $e->getMessage() error mishandling.", "other": {"cve": {"id": "CVE-2023-45957", "sourceIdentifier": "cve@mitre.org", "published": "2023-12-22T16:15:08.327", "lastModified": "2024-01-03T03:06:41.180", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A stored cross-site scripting (XSS) vulnerability in the component admin/AdminRequestSqlController.php of thirty bees before 1.5.0 allows attackers to execute arbitrary web script or HTML via $e->getMessage() error mishandling."}, {"lang": "es", "value": "Una vulnerabilidad de cross-site scripting (XSS) almacenado en el componente admin/AdminRequestSqlController.php de thirty bees anteriores a 1.5.0 permite a los atacantes ejecutar scripts web o HTML arbitrarios mediante un manejo incorrecto del error $e-&gt;getMessage()."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thirtybees:thirty_bees:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.0", "matchCriteriaId": "6F616AF3-86CE-490F-A99D-5FA8C80254BE"}]}]}], "references": [{"url": "https://github.com/thirtybees/thirtybees/commit/f5b2c1e0094ce53fded1443bab99a604ae8e2968", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/thirtybees/thirtybees/compare/1.4.0...1.5.0", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://zigrin.com/advisories/thirty-bees-stored-cross-site-scripting-xss/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thirtybees/thirtybees/commit/f5b2c1e0094ce53fded1443bab99a604ae8e2968"}}