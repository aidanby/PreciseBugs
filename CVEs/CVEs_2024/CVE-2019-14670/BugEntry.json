{"buggy_code": ["<?php\n/**\n * CreateController.php\n * Copyright (c) 2018 thegrumpydictator@gmail.com\n *\n * This file is part of Firefly III.\n *\n * Firefly III is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Firefly III is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Firefly III. If not, see <http://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Rule;\n\n\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Http\\Requests\\RuleFormRequest;\nuse FireflyIII\\Models\\Bill;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Repositories\\Rule\\RuleRepositoryInterface;\nuse FireflyIII\\Support\\Http\\Controllers\\ModelInformation;\nuse FireflyIII\\Support\\Http\\Controllers\\RuleManagement;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\n/**\n * Class CreateController\n */\nclass CreateController extends Controller\n{\n    use RuleManagement, ModelInformation;\n    /** @var RuleRepositoryInterface Rule repository */\n    private $ruleRepos;\n\n    /**\n     * RuleController constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.rules'));\n                app('view')->share('mainTitleIcon', 'fa-random');\n\n                $this->ruleRepos = app(RuleRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request   $request\n     * @param RuleGroup $ruleGroup\n     *\n     * @return \\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)\n     * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n     */\n    public function create(Request $request, RuleGroup $ruleGroup = null)\n    {\n        $this->createDefaultRuleGroup();\n        $this->createDefaultRule();\n        $preFilled   = [\n            'strict' => true,\n        ];\n        $oldTriggers = [];\n        $oldActions  = [];\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = \\count($oldTriggers);\n        $actionCount  = \\count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n        if (null !== $ruleGroup) {\n            $subTitle = (string)trans('firefly.make_new_rule', ['title' => $ruleGroup->title]);\n        }\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return view(\n            'rules.rule.create', compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'ruleGroup', 'subTitle')\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request $request\n     * @param Bill    $bill\n     *\n     * @return \\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)\n     * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n     */\n    public function createFromBill(Request $request, Bill $bill)\n    {\n        $request->session()->flash('info', (string)trans('firefly.instructions_rule_from_bill', ['name' => $bill->name]));\n\n        $this->createDefaultRuleGroup();\n        $this->createDefaultRule();\n        $preFilled = [\n            'strict'      => true,\n            'title'       => (string)trans('firefly.new_rule_for_bill_title', ['name' => $bill->name]),\n            'description' => (string)trans('firefly.new_rule_for_bill_description', ['name' => $bill->name]),\n        ];\n\n        // make triggers and actions from the bill itself.\n\n        // get triggers and actions for bill:\n        $oldTriggers = $this->getTriggersForBill($bill);\n        $oldActions  = $this->getActionsForBill($bill);\n\n        $triggerCount = \\count($oldTriggers);\n        $actionCount  = \\count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return view(\n            'rules.rule.create', compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'subTitle')\n        );\n    }\n\n    /**\n     * Store the new rule.\n     *\n     * @param RuleFormRequest $request\n     *\n     * @return RedirectResponse|\\Illuminate\\Routing\\Redirector\n     * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n     */\n    public function store(RuleFormRequest $request)\n    {\n        $data = $request->getRuleData();\n        $rule = $this->ruleRepos->store($data);\n        session()->flash('success', (string)trans('firefly.stored_new_rule', ['title' => $rule->title]));\n        app('preferences')->mark();\n\n        // redirect to show bill.\n        if ('true' === $request->get('return_to_bill') && (int)$request->get('bill_id') > 0) {\n            return redirect(route('bills.show', [(int)$request->get('bill_id')])); // @codeCoverageIgnore\n        }\n\n        // redirect to new bill creation.\n        if ((int)$request->get('bill_id') > 0) {\n            return redirect($this->getPreviousUri('bills.create.uri')); // @codeCoverageIgnore\n        }\n\n        $redirect = redirect($this->getPreviousUri('rules.create.uri'));\n\n        if (1 === (int)$request->get('create_another')) {\n            // @codeCoverageIgnoreStart\n            session()->put('rules.create.fromStore', true);\n            $redirect = redirect(route('rules.create', [$data['rule_group_id']]))->withInput();\n            // @codeCoverageIgnoreEnd\n        }\n\n        return $redirect;\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * CreateController.php\n * Copyright (c) 2018 thegrumpydictator@gmail.com\n *\n * This file is part of Firefly III.\n *\n * Firefly III is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Firefly III is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Firefly III. If not, see <http://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Rule;\n\n\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Http\\Requests\\RuleFormRequest;\nuse FireflyIII\\Models\\Bill;\nuse FireflyIII\\Models\\RuleGroup;\nuse FireflyIII\\Repositories\\Rule\\RuleRepositoryInterface;\nuse FireflyIII\\Support\\Http\\Controllers\\ModelInformation;\nuse FireflyIII\\Support\\Http\\Controllers\\RuleManagement;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\n/**\n * Class CreateController\n */\nclass CreateController extends Controller\n{\n    use RuleManagement, ModelInformation;\n    /** @var RuleRepositoryInterface Rule repository */\n    private $ruleRepos;\n\n    /**\n     * RuleController constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.rules'));\n                app('view')->share('mainTitleIcon', 'fa-random');\n\n                $this->ruleRepos = app(RuleRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request   $request\n     * @param RuleGroup $ruleGroup\n     *\n     * @return \\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)\n     * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n     */\n    public function create(Request $request, RuleGroup $ruleGroup = null)\n    {\n        $this->createDefaultRuleGroup();\n        $this->createDefaultRule();\n        $preFilled   = [\n            'strict' => true,\n        ];\n        $oldTriggers = [];\n        $oldActions  = [];\n\n        // restore actions and triggers from old input:\n        if ($request->old()) {\n            $oldTriggers = $this->getPreviousTriggers($request);\n            $oldActions  = $this->getPreviousActions($request);\n        }\n\n        $triggerCount = \\count($oldTriggers);\n        $actionCount  = \\count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n        if (null !== $ruleGroup) {\n            $subTitle = (string)trans('firefly.make_new_rule', ['title' => $ruleGroup->title]);\n        }\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return view(\n            'rules.rule.create', compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'ruleGroup', 'subTitle')\n        );\n    }\n\n    /**\n     * Create a new rule. It will be stored under the given $ruleGroup.\n     *\n     * @param Request $request\n     * @param Bill    $bill\n     *\n     * @return \\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)\n     * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n     */\n    public function createFromBill(Request $request, Bill $bill)\n    {\n        $request->session()->flash('info', (string)trans('firefly.instructions_rule_from_bill', ['name' => e($bill->name)]));\n\n        $this->createDefaultRuleGroup();\n        $this->createDefaultRule();\n        $preFilled = [\n            'strict'      => true,\n            'title'       => (string)trans('firefly.new_rule_for_bill_title', ['name' => $bill->name]),\n            'description' => (string)trans('firefly.new_rule_for_bill_description', ['name' => $bill->name]),\n        ];\n\n        // make triggers and actions from the bill itself.\n\n        // get triggers and actions for bill:\n        $oldTriggers = $this->getTriggersForBill($bill);\n        $oldActions  = $this->getActionsForBill($bill);\n\n        $triggerCount = \\count($oldTriggers);\n        $actionCount  = \\count($oldActions);\n        $subTitleIcon = 'fa-clone';\n\n        // title depends on whether or not there is a rule group:\n        $subTitle = (string)trans('firefly.make_new_rule_no_group');\n\n        // flash old data\n        $request->session()->flash('preFilled', $preFilled);\n\n        // put previous url in session if not redirect from store (not \"create another\").\n        if (true !== session('rules.create.fromStore')) {\n            $this->rememberPreviousUri('rules.create.uri');\n        }\n        session()->forget('rules.create.fromStore');\n\n        return view(\n            'rules.rule.create', compact('subTitleIcon', 'oldTriggers', 'preFilled', 'oldActions', 'triggerCount', 'actionCount', 'subTitle')\n        );\n    }\n\n    /**\n     * Store the new rule.\n     *\n     * @param RuleFormRequest $request\n     *\n     * @return RedirectResponse|\\Illuminate\\Routing\\Redirector\n     * @SuppressWarnings(PHPMD.CyclomaticComplexity)\n     */\n    public function store(RuleFormRequest $request)\n    {\n        $data = $request->getRuleData();\n        $rule = $this->ruleRepos->store($data);\n        session()->flash('success', (string)trans('firefly.stored_new_rule', ['title' => $rule->title]));\n        app('preferences')->mark();\n\n        // redirect to show bill.\n        if ('true' === $request->get('return_to_bill') && (int)$request->get('bill_id') > 0) {\n            return redirect(route('bills.show', [(int)$request->get('bill_id')])); // @codeCoverageIgnore\n        }\n\n        // redirect to new bill creation.\n        if ((int)$request->get('bill_id') > 0) {\n            return redirect($this->getPreviousUri('bills.create.uri')); // @codeCoverageIgnore\n        }\n\n        $redirect = redirect($this->getPreviousUri('rules.create.uri'));\n\n        if (1 === (int)$request->get('create_another')) {\n            // @codeCoverageIgnoreStart\n            session()->put('rules.create.fromStore', true);\n            $redirect = redirect(route('rules.create', [$data['rule_group_id']]))->withInput();\n            // @codeCoverageIgnoreEnd\n        }\n\n        return $redirect;\n    }\n\n}\n"], "filenames": ["app/Http/Controllers/Rule/CreateController.php"], "buggy_code_start_loc": [127], "buggy_code_end_loc": [128], "fixing_code_start_loc": [127], "fixing_code_end_loc": [128], "type": "CWE-79", "message": "Firefly III 4.7.17.3 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the bill name field. The JavaScript code is executed during rule-from-bill creation.", "other": {"cve": {"id": "CVE-2019-14670", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-05T20:15:12.127", "lastModified": "2020-12-16T17:00:14.417", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Firefly III 4.7.17.3 is vulnerable to stored XSS due to the lack of filtration of user-supplied data in the bill name field. The JavaScript code is executed during rule-from-bill creation."}, {"lang": "es", "value": "Firefly III versi\u00f3n 4.7.17.3, es vulnerable a una ataque de tipo XSS almacenado debido a la falta de filtraci\u00f3n de datos suministrados por el usuario en el campo de nombre de factura. El c\u00f3digo JavaScript es ejecutado durante la creaci\u00f3n de la regla de factura."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:4.7.17.3:*:*:*:*:*:*:*", "matchCriteriaId": "07608727-1384-457D-A9E9-76A9DE166635"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/692b256f3f6d9eab992a72eb042844220b314054", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/firefly-iii/firefly-iii/issues/2365", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/692b256f3f6d9eab992a72eb042844220b314054"}}