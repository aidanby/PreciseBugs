{"buggy_code": ["<?php\n/**\n * Logtoview handles reading files\n *\n * PHP version 5\n *\n * @category Logtoview\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\n/**\n * Logtoview handles reading files\n *\n * @category Logtoview\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\nrequire_once '../commons/base.inc.php';\nsession_write_close();\nignore_user_abort(true);\nset_time_limit(0);\nheader('Content-Type: text/event-stream');\nheader('Connection: close');\nif (!(isset($_POST['ip'])\n    && is_string($_POST['ip']))\n) {\n    echo json_encode(_('Invalid IP'));\n    exit;\n}\nif (!(isset($_POST['file'])\n    && is_string($_POST['file']))\n) {\n    echo json_encode(_('Invalid File'));\n    exit;\n}\n$file = '';\n$lines = '';\n/**\n * Returns vals.\n *\n * @param int         $reverse     Log reverse or forward.\n * @param HookManager $HookManager Hook manager item.\n * @param int         $lines       Lines to show.\n * @param string      $file        File to return.\n *\n * @return string\n */\nfunction vals($reverse, $HookManager, $lines, $file)\n{\n    ini_set(\"auto_detect_line_endings\", true);\n    $folder = sprintf(\n        '/%s/',\n        trim(\n            trim(\n                dirname($file)\n            ),\n            '/'\n        )\n    );\n    $pattern = sprintf(\n        '#^%s$#',\n        $folder\n    );\n    $folders = array(\n        '/var/log/fog/',\n        '/opt/fog/log/',\n        '/var/log/httpd/',\n        '/var/log/apache2/',\n        '/var/log/nginx/',\n        '/var/log/php-fpm/',\n        '/var/log/php5.6-fpm/',\n        '/var/log/php5-fpm/',\n        '/var/log/php7.0-fpm/'\n    );\n    $HookManager->processEvent('LOG_FOLDERS', array('folders'=>&$folders));\n    if (!preg_grep($pattern, $folders)) {\n        return _('Invalid Folder');\n    }\n    $file = trim(basename($file));\n    $path = sprintf('%s%s', $folder, $file);\n    $path = trim($path);\n    if (($fh = fopen($path, 'rb')) === false) {\n        return _('Unable to open file for reading');\n    }\n    $buffer = 4096;\n    fseek($fh, -1, SEEK_END);\n    if (fread($fh, 1) != \"\\n\") {\n        $lines -= 1;\n    }\n    $output = '';\n    $chunk = '';\n    while (ftell($fh) > 0 && $lines >= 0) {\n        $seek = min(ftell($fh), $buffer);\n        fseek($fh, -$seek, SEEK_CUR);\n        $output = ($chunk = fread($fh, $seek)).$output;\n        fseek($fh, -mb_strlen($chunk, '8bit'), SEEK_CUR);\n        $lines -= substr_count($chunk, \"\\n\");\n    }\n    while ($lines++ < 0) {\n        $output = substr(\n            $output,\n            strpos(\n                $output,\n                \"\\n\"\n            )\n            + 1\n        );\n    }\n    fclose($fh);\n    if ($reverse) {\n        $output = implode(\n            \"\\n\",\n            array_reverse(\n                explode(\n                    \"\\n\",\n                    $output\n                )\n            )\n        );\n    }\n    return trim($output);\n}\nif (!(isset($_POST['ip'])\n    && is_string($_POST['ip']))\n) {\n    echo _('Invalid IP');\n    exit;\n}\nif (!(isset($_POST['file'])\n    && is_string($_POST['file']))\n) {\n    echo _('Invalid File');\n    exit;\n}\nif (!(isset($_POST['lines'])\n    && is_numeric($_POST['lines']))\n) {\n    $_POST['lines'] = 20;\n}\nif (!(isset($_POST['reverse'])\n    && is_numeric($_POST['reverse']))\n) {\n    $_POST['reverse'] = 0;\n}\n$ip = $_POST['ip'];\n$file = sprintf(\n    '%s%s%s',\n    dirname($_POST['file']),\n    DS,\n    basename($_POST['file'])\n);\n$lines = $_POST['lines'];\n$reverse = $_POST['reverse'];\n$ip = base64_decode($ip);\n$ip = FOGCore::resolveHostname($ip);\n$ip = trim($ip);\nif (filter_var($ip, FILTER_VALIDATE_IP) === false) {\n    return print json_encode(_('IP Passed is incorrect'));\n}\nif (false !== strpos(filter_input(INPUT_SERVER, 'HTTP_HOST'), $ip)) {\n    $str = vals(\n        $reverse,\n        $HookManager,\n        $lines,\n        $file\n    );\n    echo json_encode($str);\n    exit;\n}\n$url = sprintf(\n    '%s://%s/fog/status/logtoview.php',\n    FOGCore::$httpproto,\n    $ip\n);\n$process = array(\n    'ip' => base64_encode($ip),\n    'file' => $file,\n    'lines' => $lines,\n    'reverse' => $reverse\n);\n$response = $FOGURLRequests->process(\n    $url,\n    'POST',\n    $process\n);\necho json_decode(\n    json_encode(\n        array_shift($response)\n    ),\n    true\n);\n"], "fixing_code": ["<?php\n/**\n * Logtoview handles reading files\n *\n * PHP version 5\n *\n * @category Logtoview\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\n/**\n * Logtoview handles reading files\n *\n * @category Logtoview\n * @package  FOGProject\n * @author   Tom Elliott <tommygunsster@gmail.com>\n * @license  http://opensource.org/licenses/gpl-3.0 GPLv3\n * @link     https://fogproject.org\n */\nrequire_once '../commons/base.inc.php';\nsession_write_close();\nignore_user_abort(true);\nset_time_limit(0);\nheader('Content-Type: text/event-stream');\nheader('Connection: close');\nif (!(isset($_POST['ip'])\n    && is_string($_POST['ip']))\n) {\n    echo json_encode(_('Invalid IP'));\n    exit;\n}\nif (!(isset($_POST['file'])\n    && is_string($_POST['file']))\n) {\n    echo json_encode(_('Invalid File'));\n    exit;\n}\n$file = '';\n$lines = '';\n/**\n * Returns vals.\n *\n * @param int         $reverse     Log reverse or forward.\n * @param HookManager $HookManager Hook manager item.\n * @param int         $lines       Lines to show.\n * @param string      $file        File to return.\n *\n * @return string\n */\nfunction vals($reverse, $HookManager, $lines, $file)\n{\n    ini_set(\"auto_detect_line_endings\", true);\n    $folder = sprintf(\n        '/%s/',\n        trim(\n            trim(\n                dirname($file)\n            ),\n            '/'\n        )\n    );\n    $pattern = sprintf(\n        '#^%s$#',\n        $folder\n    );\n    $folders = array(\n        '/var/log/fog/',\n        '/opt/fog/log/',\n        '/var/log/httpd/',\n        '/var/log/apache2/',\n        '/var/log/nginx/',\n        '/var/log/php-fpm/',\n        '/var/log/php5.6-fpm/',\n        '/var/log/php5-fpm/',\n        '/var/log/php7.0-fpm/'\n    );\n    $HookManager->processEvent('LOG_FOLDERS', array('folders'=>&$folders));\n    if (!preg_grep($pattern, $folders)) {\n        return _('Invalid Folder');\n    }\n    $file = trim(basename($file));\n    $path = sprintf('%s%s', $folder, $file);\n    $path = trim($path);\n    if (($fh = fopen($path, 'rb')) === false) {\n        return _('Unable to open file for reading');\n    }\n    $buffer = 4096;\n    fseek($fh, -1, SEEK_END);\n    if (fread($fh, 1) != \"\\n\") {\n        $lines -= 1;\n    }\n    $output = '';\n    $chunk = '';\n    while (ftell($fh) > 0 && $lines >= 0) {\n        $seek = min(ftell($fh), $buffer);\n        fseek($fh, -$seek, SEEK_CUR);\n        $output = ($chunk = fread($fh, $seek)).$output;\n        fseek($fh, -mb_strlen($chunk, '8bit'), SEEK_CUR);\n        $lines -= substr_count($chunk, \"\\n\");\n    }\n    while ($lines++ < 0) {\n        $output = substr(\n            $output,\n            strpos(\n                $output,\n                \"\\n\"\n            )\n            + 1\n        );\n    }\n    fclose($fh);\n    if ($reverse) {\n        $output = implode(\n            \"\\n\",\n            array_reverse(\n                explode(\n                    \"\\n\",\n                    $output\n                )\n            )\n        );\n    }\n    return trim(htmlspecialchars($output));\n}\nif (!(isset($_POST['ip'])\n    && is_string($_POST['ip']))\n) {\n    echo _('Invalid IP');\n    exit;\n}\nif (!(isset($_POST['file'])\n    && is_string($_POST['file']))\n) {\n    echo _('Invalid File');\n    exit;\n}\nif (!(isset($_POST['lines'])\n    && is_numeric($_POST['lines']))\n) {\n    $_POST['lines'] = 20;\n}\nif (!(isset($_POST['reverse'])\n    && is_numeric($_POST['reverse']))\n) {\n    $_POST['reverse'] = 0;\n}\n$ip = $_POST['ip'];\n$file = sprintf(\n    '%s%s%s',\n    dirname($_POST['file']),\n    DS,\n    basename($_POST['file'])\n);\n$lines = $_POST['lines'];\n$reverse = $_POST['reverse'];\n$ip = base64_decode($ip);\n$ip = FOGCore::resolveHostname($ip);\n$ip = trim($ip);\nif (filter_var($ip, FILTER_VALIDATE_IP) === false) {\n    return print json_encode(_('IP Passed is incorrect'));\n}\nif (false !== strpos(filter_input(INPUT_SERVER, 'HTTP_HOST'), $ip)) {\n    $str = vals(\n        $reverse,\n        $HookManager,\n        $lines,\n        $file\n    );\n    echo json_encode($str);\n    exit;\n}\n$url = sprintf(\n    '%s://%s/fog/status/logtoview.php',\n    FOGCore::$httpproto,\n    $ip\n);\n$process = array(\n    'ip' => base64_encode($ip),\n    'file' => $file,\n    'lines' => $lines,\n    'reverse' => $reverse\n);\n$response = $FOGURLRequests->process(\n    $url,\n    'POST',\n    $process\n);\necho json_decode(\n    json_encode(\n        array_shift($response)\n    ),\n    true\n);\n"], "filenames": ["packages/web/status/logtoview.php"], "buggy_code_start_loc": [125], "buggy_code_end_loc": [126], "fixing_code_start_loc": [125], "fixing_code_end_loc": [126], "type": "CWE-79", "message": "FOG is a free open-source cloning/imaging/rescue suite/inventory management system. Prior to version 1.5.10.15, due to a lack of request sanitization in the logs, a malicious request containing XSS would be stored in a log file. When an administrator of the FOG server logged in and viewed the logs, they would be parsed as HTML and displayed accordingly. Version 1.5.10.15 contains a patch. As a workaround, view logs from an external text editor rather than the dashboard.", "other": {"cve": {"id": "CVE-2023-46235", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-31T15:15:09.547", "lastModified": "2023-11-08T17:38:55.370", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "FOG is a free open-source cloning/imaging/rescue suite/inventory management system. Prior to version 1.5.10.15, due to a lack of request sanitization in the logs, a malicious request containing XSS would be stored in a log file. When an administrator of the FOG server logged in and viewed the logs, they would be parsed as HTML and displayed accordingly. Version 1.5.10.15 contains a patch. As a workaround, view logs from an external text editor rather than the dashboard."}, {"lang": "es", "value": "FOG es un sistema gratuito de gesti\u00f3n de inventario, im\u00e1genes, clonaci\u00f3n y rescate de c\u00f3digo abierto. Antes de la versi\u00f3n 1.5.10.15, debido a la falta de sanitizaci\u00f3n de solicitudes en los registros, una solicitud maliciosa que conten\u00eda XSS se almacenaba en un archivo de registro. Cuando un administrador del servidor FOG iniciaba sesi\u00f3n y ve\u00eda los registros, se analizaban como HTML y se mostraban en consecuencia. La versi\u00f3n 1.5.10.15 contiene un parche. Como workaround, vea los registros desde un editor de texto externo en lugar del panel."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}, {"lang": "en", "value": "CWE-80"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fogproject:fogproject:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.10.15", "matchCriteriaId": "F2F264CF-2217-418C-91D2-5BF2028C3EB0"}]}]}], "references": [{"url": "https://github.com/FOGProject/fogproject/commit/2e2421f19620669b9930f72fb73a8dbc5efe4980", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/FOGProject/fogproject/security/advisories/GHSA-cvf7-7mvq-5694", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/FOGProject/fogproject/commit/2e2421f19620669b9930f72fb73a8dbc5efe4980"}}