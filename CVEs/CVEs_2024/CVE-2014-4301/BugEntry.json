{"buggy_code": ["import socketio\nimport traceback\n\nfrom ajenti.http import HttpHandler\nfrom ajenti.api import BasePlugin, plugin, persistent, rootcontext\nfrom ajenti.api.http import HttpPlugin, SocketPlugin\nfrom ajenti.plugins import manager\nfrom ajenti.profiler import *\n\n\nclass SocketIORouteHandler (HttpHandler):\n    def __init__(self):\n        self.namespaces = {}\n        for cls in SocketPlugin.get_classes():\n            self.namespaces[cls.name] = cls\n\n    def handle(self, context):\n        return str(socketio.socketio_manage(context.env, self.namespaces, context))\n\n\nclass InvalidRouteHandler (HttpHandler):\n    def handle(self, context):\n        context.respond_not_found()\n        return 'Invalid URL'\n\n\n@plugin\n@persistent\n@rootcontext\nclass CentralDispatcher (BasePlugin, HttpHandler):\n    def __init__(self):\n        self.invalid = InvalidRouteHandler()\n        self.io = SocketIORouteHandler()\n\n    @profiled(lambda a, k: 'HTTP %s' % a[1].path)\n    def handle(self, context):\n        \"\"\"\n        Dispatch the request to every HttpPlugin\n        \"\"\"\n\n        if hasattr(context.session, 'appcontext'):\n            self.context = context.session.appcontext\n        else:\n            self.context = manager.context\n\n        if context.path.startswith('/ajenti:socket'):\n            return context.fallthrough(self.io)\n\n        if not hasattr(self.context, 'http_handlers'):\n            self.context.http_handlers = HttpPlugin.get_all()\n\n        for instance in self.context.http_handlers:\n            try:\n                output = instance.handle(context)\n            except Exception, e:\n                return [self.respond_error(context, e)]\n            if output is not None:\n                return output\n        return context.fallthrough(self.invalid)\n\n    def respond_error(self, context, exception):\n        context.respond_server_error()\n        stack = traceback.format_exc()\n        return \"\"\"\n        <html>\n            <body>\n\n                <style>\n                    body {\n                        font-family: sans-serif;\n                        color: #888;\n                        text-align: center;\n                    }\n\n                    body pre {\n                        width: 600px;\n                        text-align: left;\n                        margin: auto;\n                        font-family: monospace;\n                    }\n                </style>\n\n                <img src=\"/ajenti:static/main/error.jpeg\" />\n                <br/>\n                <p>\n                    Server error\n                </p>\n                <pre>\n%s\n                </pre>\n            </body>\n        </html>\n        \"\"\" % stack\n"], "fixing_code": ["import cgi\nimport socketio\nimport traceback\n\nfrom ajenti.http import HttpHandler\nfrom ajenti.api import BasePlugin, plugin, persistent, rootcontext\nfrom ajenti.api.http import HttpPlugin, SocketPlugin\nfrom ajenti.plugins import manager\nfrom ajenti.profiler import *\n\n\nclass SocketIORouteHandler (HttpHandler):\n    def __init__(self):\n        self.namespaces = {}\n        for cls in SocketPlugin.get_classes():\n            self.namespaces[cls.name] = cls\n\n    def handle(self, context):\n        return str(socketio.socketio_manage(context.env, self.namespaces, context))\n\n\nclass InvalidRouteHandler (HttpHandler):\n    def handle(self, context):\n        context.respond_not_found()\n        return 'Invalid URL'\n\n\n@plugin\n@persistent\n@rootcontext\nclass CentralDispatcher (BasePlugin, HttpHandler):\n    def __init__(self):\n        self.invalid = InvalidRouteHandler()\n        self.io = SocketIORouteHandler()\n\n    @profiled(lambda a, k: 'HTTP %s' % a[1].path)\n    def handle(self, context):\n        \"\"\"\n        Dispatch the request to every HttpPlugin\n        \"\"\"\n\n        if hasattr(context.session, 'appcontext'):\n            self.context = context.session.appcontext\n        else:\n            self.context = manager.context\n\n        if context.path.startswith('/ajenti:socket'):\n            return context.fallthrough(self.io)\n\n        if not hasattr(self.context, 'http_handlers'):\n            self.context.http_handlers = HttpPlugin.get_all()\n\n        for instance in self.context.http_handlers:\n            try:\n                output = instance.handle(context)\n            except Exception, e:\n                return [self.respond_error(context, e)]\n            if output is not None:\n                return output\n        return context.fallthrough(self.invalid)\n\n    def respond_error(self, context, exception):\n        context.respond_server_error()\n        stack = traceback.format_exc()\n        return \"\"\"\n        <html>\n            <body>\n\n                <style>\n                    body {\n                        font-family: sans-serif;\n                        color: #888;\n                        text-align: center;\n                    }\n\n                    body pre {\n                        width: 600px;\n                        text-align: left;\n                        margin: auto;\n                        font-family: monospace;\n                    }\n                </style>\n\n                <img src=\"/ajenti:static/main/error.jpeg\" />\n                <br/>\n                <p>\n                    Server error\n                </p>\n                <pre>\n%s\n                </pre>\n            </body>\n        </html>\n        \"\"\" % cgi.escape(stack)\n"], "filenames": ["ajenti/routing.py"], "buggy_code_start_loc": [0], "buggy_code_end_loc": [94], "fixing_code_start_loc": [1], "fixing_code_end_loc": [95], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in the respond_error function in routing.py in Eugene Pankov Ajenti before 1.2.21.7 allow remote attackers to inject arbitrary web script or HTML via the PATH_INFO to (1) resources.js or (2) resources.css in ajenti:static/, related to the traceback page.", "other": {"cve": {"id": "CVE-2014-4301", "sourceIdentifier": "cve@mitre.org", "published": "2014-06-18T14:55:13.307", "lastModified": "2016-09-06T13:38:35.527", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in the respond_error function in routing.py in Eugene Pankov Ajenti before 1.2.21.7 allow remote attackers to inject arbitrary web script or HTML via the PATH_INFO to (1) resources.js or (2) resources.css in ajenti:static/, related to the traceback page."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en la funci\u00f3n respond_error en routing.py en Eugene Pankov Ajenti anterior a 1.2.21.7 permiten a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de PATH_INFO hacia (1) resources.js o (2) resources.css en ajenti:static/, relacionado con la p\u00e1gina traceback."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.21", "matchCriteriaId": "40A0F389-FFD9-4A3B-834D-590E82C3FA2C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "C7B0A64A-B7C0-4C26-9D99-C62EC55E7798"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "2D993FFE-EC2F-47B8-9977-584C5A45DE72"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "0A910951-0BB7-4D81-85F6-92C33C483A8E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "984A2F17-4D28-4773-A83F-D1AD9C5C3643"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "A55937EB-97D4-4E14-B277-C82B1D1C15F9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "7584CB68-1F09-4974-88E7-E0F83776AC6B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "BE69A990-4D12-4F75-85D3-D8527C1C64FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "BBD60311-4A22-4FF8-8FAB-7EF872DE3ECF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.8:*:*:*:*:*:*:*", "matchCriteriaId": "D8FB0745-DAFE-4A9F-A6D0-ABAF9A937F4A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.9:*:*:*:*:*:*:*", "matchCriteriaId": "13E6C3AF-15AD-4897-8A71-C05FFD94081B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.10:*:*:*:*:*:*:*", "matchCriteriaId": "E4C7941B-9116-48C7-B529-A97DE13D64F7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.11.2:*:*:*:*:*:*:*", "matchCriteriaId": "EAABC566-E783-47A8-A375-5D39B6342EE7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.12:*:*:*:*:*:*:*", "matchCriteriaId": "7B5FFC25-9E65-4AC2-9036-8D6737FF98AB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.13:*:*:*:*:*:*:*", "matchCriteriaId": "D8585A18-570A-4F8A-8F25-7361AA034210"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.14:*:*:*:*:*:*:*", "matchCriteriaId": "4EC2C47B-CAA5-4804-ABD2-4373D08457AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.15:*:*:*:*:*:*:*", "matchCriteriaId": "A0757415-9675-4FC1-BAAC-C4ACAE92802B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.16:*:*:*:*:*:*:*", "matchCriteriaId": "9CD3FF52-5171-4FCB-B7F9-14401D0A0130"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.17:*:*:*:*:*:*:*", "matchCriteriaId": "DE8B485A-4232-4232-8BC1-62201BBAF095"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.18:*:*:*:*:*:*:*", "matchCriteriaId": "F6A18C3B-445D-4C7F-911A-BF1C5D8998E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.19:*:*:*:*:*:*:*", "matchCriteriaId": "006EAD4D-140C-4D17-92EA-102565B61801"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.20:*:*:*:*:*:*:*", "matchCriteriaId": "9BA6F8FE-EF7D-4712-82E9-09E65479C993"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/68047", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Eugeny/ajenti/commit/d3fc5eb142ff16d55d158afb050af18d5ff09120", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://www.netsparker.com/critical-xss-vulnerabilities-in-ajenti", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/Eugeny/ajenti/commit/d3fc5eb142ff16d55d158afb050af18d5ff09120"}}