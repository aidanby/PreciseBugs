{"buggy_code": ["<?php\n/**\n * This code is part of GOsa (http://www.gosa-project.org)\n * Copyright (C) 2003-2008 GONICUS GmbH\n * \n * ID: $$Id$$\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\n/* Load required includes */\nrequire_once \"../include/php_setup.inc\";\nrequire_once \"functions.inc\";\nrequire_once \"class_log.inc\";\nheader(\"Content-type: text/html; charset=UTF-8\");\n\n\n/**\n * Display the login page and exit().\n *\n */\nfunction displayLogin()\n{\n    global $smarty,$message,$config,$ssl,$error_collector, $BASE_DIR;\n    error_reporting(E_ALL | E_STRICT);\n\n    /* Check theme compatibility */\n    $theme= $config->get_cfg_value(\"core\",'theme');\n    if (file_exists(\"$BASE_DIR/ihtml/themes/$theme/blacklist\")) {\n        $blocks= file(\"$BASE_DIR/ihtml/themes/$theme/blacklist\");\n        foreach ($blocks as $block) {\n            if (preg_match('/'.preg_quote($block).'/', $_SERVER['HTTP_USER_AGENT'])) {\n                die(sprintf(_(\"Your browser (%s) is blacklisted for the current theme!\"), $block));\n            }\n        }\n    }\n\n    /* Fill template with required values */\n    $username = \"\";\n    if(isset($_POST[\"username\"])) {\n        $username= get_post(\"username\");\n    }\n    \n    $smarty->assign (\"title\",\"GOsa\");\n    $smarty->assign(\"logo\", image(get_template_path(\"images/logo.png\")));\n    $smarty->assign('date', gmdate(\"D, d M Y H:i:s\"));\n    $smarty->assign('username', set_post($username));\n    $smarty->assign('personal_img', get_template_path('images/login-head.png'));\n    $smarty->assign('password_img', get_template_path('images/password.png'));\n    $smarty->assign('directory_img', get_template_path('images/ldapserver.png'));\n\n    /* Some error to display? */\n    if (!isset($message)) {\n        $message= \"\";\n    }\n    $smarty->assign(\"message\", $message);\n\n    /* Displasy SSL mode warning? */\n    if ($ssl != \"\" && $config->get_cfg_value(\"core\",'warnSSL') == 'true') {\n        $smarty->assign(\"ssl\", sprintf(_(\"This session is not encrypted. Click %s to enter an encrypted session.\"), \"<a href=\\\"$ssl\\\">\".bold(_(\"here\")).\"</a>\"));\n    } else {\n        $smarty->assign(\"ssl\", \"\");\n    }\n\n    if(!$config->check_session_lifetime()) {\n        $smarty->assign (\"lifetime\", _(\"The configured session lifetime will be overridden by php.ini settings!\"));\n    } else {\n        $smarty->assign (\"lifetime\", \"\");\n    }\n\n    /* Generate server list */\n    $servers= array();\n    if (isset($_POST['server'])) {\n        $selected= get_post('server');\n    } else {\n        $selected= $config->data['MAIN']['DEFAULT'];\n    }\n    foreach ($config->data['LOCATIONS'] as $key => $ignored) {\n        $servers[$key]= $key;\n    }\n    $smarty->assign (\"server_options\", $servers);\n    $smarty->assign (\"server_id\", $selected);\n\n    /* show login screen */\n    $smarty->assign (\"PHPSESSID\", session_id());\n    if (session::is_set('errors')) {\n        $smarty->assign(\"errors\", session::get('errors'));\n    }\n    if ($error_collector != \"\") {\n        $smarty->assign(\"php_errors\", $error_collector.\"</div>\");\n    } else {\n        $smarty->assign(\"php_errors\", \"\");\n    }\n    $smarty->assign(\"msg_dialogs\", msg_dialog::get_dialogs());\n\n    $smarty->display (get_template_path('headers.tpl'));\n    $smarty->assign(\"version\",get_gosa_version());\n    $smarty->display(get_template_path('login.tpl'));\n    exit();\n}\n\n\n\n/*****************************************************************************\n *                               M   A   I   N                               *\n *****************************************************************************/\n\n/* Set error handler to own one, initialize time calculation\nand start session. */\nsession::start();\nsession::set('errorsAlreadyPosted',array());\n\n/* Destroy old session if exists. \nElse you will get your old session back, if you not logged out correctly. */\nif(is_array(session::get_all()) && count(session::get_all())) {\n    session::destroy();\n    session::start();\n}\n\n$username= \"\";\n\n/* Reset errors */\nsession::set('errors',\"\");\nsession::set('errorsAlreadyPosted',\"\");\nsession::set('LastError',\"\");\n\n/* Check if we need to run setup */\nif (!file_exists(CONFIG_DIR.\"/\".CONFIG_FILE)) {\n    header(\"location:setup.php\");\n    exit();\n}\n\n/* Reset errors */\nsession::set('errors',\"\");\n\n/* Check for java script */\nif(isset($_POST['javascript']) && $_POST['javascript'] == \"true\") {\n    session::global_set('js',TRUE);\n}elseif(isset($_POST['javascript'])) {\n    session::global_set('js',FALSE);\n}\n\n/* Check if gosa.conf (.CONFIG_FILE) is accessible */\nif (!is_readable(CONFIG_DIR.\"/\".CONFIG_FILE)) {\n    msg_dialog::display(_(\"Configuration error\"),sprintf(_(\"GOsa configuration %s/%s is not readable. Aborted.\"), CONFIG_DIR,CONFIG_FILE),FATAL_ERROR_DIALOG);\n    exit();\n}\n\n/* Parse configuration file */\n$config= new config(CONFIG_DIR.\"/\".CONFIG_FILE, $BASE_DIR);\nsession::global_set('debugLevel',$config->get_cfg_value(\"core\",'debugLevel'));\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG (DEBUG_CONFIG, __LINE__, __FUNCTION__, __FILE__, $config->data, \"config\");\n}\n\n/* Enable compressed output */\nif ($config->get_cfg_value(\"core\",\"sendCompressedOutput\") != \"\") {\n    if(ob_get_length() > 0) ob_end_clean();\n    ob_start(\"ob_gzhandler\");\n}\n\n/* Set template compile directory */\n$smarty->compile_dir= $config->get_cfg_value(\"core\",\"templateCompileDirectory\");\n$smarty->error_unassigned= true;\n\n/* Check for compile directory */\nif (!(is_dir($smarty->compile_dir) && is_writable($smarty->compile_dir))) {\n    msg_dialog::display(_(\"Smarty error\"),sprintf(_(\"Compile directory %s is not accessible!\"),\n        $smarty->compile_dir),FATAL_ERROR_DIALOG);\n    exit();\n}\n\n/* Check for old files in compile directory */\nclean_smarty_compile_dir($smarty->compile_dir);\n\n/* Language setup */\n$lang= get_browser_language();\nputenv(\"LANGUAGE=\");\nputenv(\"LANG=$lang\");\nsetlocale(LC_ALL, $lang);\n$GLOBALS['t_language']= $lang;\n$GLOBALS['t_gettext_message_dir'] = $BASE_DIR.'/locale/';\n\n/* Set the text domain as 'messages' */\n$domain = 'messages';\nbindtextdomain($domain, LOCALE_DIR);\ntextdomain($domain);\n$smarty->assign ('nextfield', 'username');\n\n/* Translation of cookie-warning. Whether to display it, is determined by JavaScript */\n$smarty->assign (\"cookies\", _(\"Your browser has cookies disabled: please enable cookies and reload this page before logging in!\"));\n\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__, $lang, \"Setting language to\");\n}\n\n\n/* Check for SSL connection */\n$ssl= \"\";\nif (!isset($_SERVER['HTTPS']) ||\n    !stristr($_SERVER['HTTPS'], \"on\")) {\n\n        if (empty($_SERVER['REQUEST_URI'])) {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['PATH_INFO'];\n        } else {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['REQUEST_URI'];\n        }\n    }\n\n/* If SSL is forced, just forward to the SSL enabled site */\nif ($config->get_cfg_value(\"core\",\"forceSSL\") == 'true' && $ssl != '') {\n    header (\"Location: $ssl\");\n    exit;\n}\n\n/* Do we have htaccess authentification enabled? */\n$htaccess_authenticated= FALSE;\nif ($config->get_cfg_value(\"core\",\"htaccessAuthentication\") == \"true\" ) {\n    if (!isset($_SERVER['REMOTE_USER'])) {\n        msg_dialog::display(_(\"Configuration error\"), _(\"Broken HTTP authentication setup!\"), FATAL_ERROR_DIALOG);\n        exit;\n    }\n\n    $tmp= process_htaccess($_SERVER['REMOTE_USER'], isset($_SERVER['KRB5CCNAME']));\n    $username= $tmp['username'];\n    $server= $tmp['server'];\n    if ($username == \"\") {\n        msg_dialog::display(_(\"Error\"), _(\"Cannot find a valid user for the current HTTP authentication!\"), FATAL_ERROR_DIALOG);\n        exit;\n    }\n    if ($server == \"\") {\n        msg_dialog::display(_(\"Error\"), _(\"Cannot find a unique user for the current HTTP authentication!\"), FATAL_ERROR_DIALOG);\n        exit;\n    }\n\n    $htaccess_authenticated= TRUE;\n}\n\n/* Got a formular answer, validate and try to log in */\nif (($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST['login'])) || $htaccess_authenticated) {\n\n    /* Reset error messages */\n    $message= \"\";\n\n    /* Destroy old sessions, they cause a successfull login to relog again ...*/\n    if(session::global_is_set('_LAST_PAGE_REQUEST')) {\n        session::global_set('_LAST_PAGE_REQUEST',time());\n    }\n\n    if (!$htaccess_authenticated) {\n        $server= get_post(\"server\");\n    }\n    $config->set_current($server);\n\n    /* Admin-logon and verify */\n    $ldap = $config->get_ldap_link();\n    if (is_null($ldap) || (is_int($ldap) && $ldap == 0)) {\n        msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), $this->dn, 0, get_class()));\n        displayLogin();\n        exit();\n    }\n\n    /* Check for locking area */\n    $ldap->cat($config->get_cfg_value(\"core\",\"config\"), array(\"dn\"));\n    $attrs= $ldap->fetch();\n    if (!count ($attrs)) {\n        $ldap->cd($config->current['BASE']);\n        $ldap->create_missing_trees($config->get_cfg_value(\"core\",\"config\"));\n    }\n\n    /* Check for valid input */\n    $ok= true;\n    if (!$htaccess_authenticated) {\n        $username= get_post(\"username\");\n        if (!preg_match(\"/^[@A-Za-z0-9_.-]+$/\", $username)) {\n            $message= _(\"Please specify a valid user name!\");\n            $ok= false;\n        } elseif (mb_strlen(get_post(\"password\"), 'UTF-8') == 0) {\n            $message= _(\"Please specify your password!\");\n            $smarty->assign ('nextfield', 'password');\n            $ok= false;\n        }\n    }\n\n    if ($ok) {\n\n        /* Login as user, initialize user ACL's */\n        if ($htaccess_authenticated) {\n            $ui= ldap_login_user_htaccess($username);\n            if ($ui === NULL || !$ui) {\n                msg_dialog::display(_(\"Authentication error\"), _(\"Cannot retrieve user information for HTTP authentication!\"), FATAL_ERROR_DIALOG);\n                exit;\n            }\n        } else {\n            $ui= ldap_login_user($username, get_post(\"password\"));\n        }\n        if ($ui === NULL || !$ui) {\n            $message= _(\"Please check the username/password combination!\");\n            $smarty->assign ('nextfield', 'password');\n            session::global_set('config',$config);\n            if(isset($_SERVER['REMOTE_ADDR'])){\n                $ip= $_SERVER['REMOTE_ADDR'];\n                new log(\"security\",\"login\",\"\",array(),\"Authentication failed for user \\\"$username\\\" [from $ip]\");\n            }else{\n                new log(\"security\",\"login\",\"\",array(),\"Authentication failed for user \\\"$username\\\"\");\n            }\n        } else {\n            /* Remove all locks of this user */\n            del_user_locks($ui->dn);\n\n            /* Save userinfo and plugin structure */\n            session::global_set('ui',$ui);\n            session::global_set('session_cnt',0);\n\n      /* Let GOsa trigger a new connection for each POST, save\n      config to session. */\n            $config->get_departments();\n            $config->make_idepartments();\n            session::global_set('config',$config);\n\n            /* Restore filter settings from cookie, if available */\n            if($config->get_cfg_value(\"core\",\"storeFilterSettings\") == \"true\") {\n\n                if(isset($_COOKIE['GOsa_Filter_Settings']) || isset($HTTP_COOKIE_VARS['GOsa_Filter_Settings'])) {\n\n                    if(isset($_COOKIE['GOsa_Filter_Settings'])) {\n                        $cookie_all = unserialize(base64_decode($_COOKIE['GOsa_Filter_Settings']));\n                    }else{\n                        $cookie_all = unserialize(base64_decode($HTTP_COOKIE_VARS['GOsa_Filter_Settings']));\n                    }\n                    if(isset($cookie_all[$ui->dn])) {\n                        $cookie = $cookie_all[$ui->dn];\n                        $cookie_vars= array(\"MultiDialogFilters\",\"CurrentMainBase\",\"plug\");\n                        foreach($cookie_vars as $var) {\n                            if(isset($cookie[$var])) {\n                                session::global_set($var,$cookie[$var]);\n                            }\n                        }\n                        if(isset($cookie['plug'])) {\n                            $plug =$cookie['plug'];\n                        }\n                    }\n                }\n            }\n\n            /* are we using accountexpiration */\n            if ($config->boolValueIsTrue(\"core\",\"handleExpiredAccounts\")) {\n                $expired= ldap_expired_account($config, $ui->dn, $ui->username);\n\n                if ($expired == POSIX_ACCOUNT_EXPIRED) {\n                    $message= _(\"Account locked. Please contact your system administrator!\");\n                    $smarty->assign ('nextfield', 'password');\n                    new log(\"security\",\"login\",\"\",array(),\"Account for user \\\"$username\\\" has expired\") ;\n                    displayLogin();\n                    exit();\n                }\n            }\n\n            /* Not account expired or password forced change go to main page */\n            new log(\"security\",\"login\",\"\",array(),\"User \\\"$username\\\" logged in successfully\") ;\n            $plist= new pluglist($config, $ui);\n\n            stats::log('global', 'global', array(),  $action = 'login', $amount = 1, 0);\n\n            if(isset($plug) && isset($plist->dirlist[$plug])) {\n                header (\"Location: main.php?plug=\".$plug.\"&amp;global_check=1\");\n            }else{\n                header (\"Location: main.php?global_check=1\");\n            }\n            exit;\n        }\n    }\n}\n\n/* Fill template with required values */\n$smarty->assign ('date', gmdate(\"D, d M Y H:i:s\"));\n$smarty->assign ('username', $username);\n$smarty->assign ('personal_img', get_template_path('images/login-head.png'));\n$smarty->assign ('password_img', get_template_path('images/password.png'));\n$smarty->assign ('directory_img', get_template_path('images/ldapserver.png'));\n\n/* Some error to display? */\nif (!isset($message)) {\n    $message= \"\";\n}\n\n$smarty->assign (\"message\", $message);\n\n/* Generate server list */\n$servers= array();\nif (isset($_POST['server'])){\n    $selected= get_post('server');\n} else {\n    $selected= $config->data['MAIN']['DEFAULT'];\n}\nforeach ($config->data['LOCATIONS'] as $key => $ignored) {\n    $servers[$key]= $key;\n}\n$smarty->assign (\"server_options\", $servers);\n$smarty->assign (\"server_id\", $selected);\n\n/* show login screen */\n$smarty->assign (\"PHPSESSID\", session_id());\nif (session::is_set('errors')) {\n    $smarty->assign(\"errors\", session::get('errors'));\n}\nif ($error_collector != \"\") {\n    $smarty->assign(\"php_errors\", preg_replace(\"/%BUGBODY%/\",$error_collector_mailto,$error_collector).\"</div>\");\n} else {\n    $smarty->assign(\"php_errors\", \"\");\n}\n\n/* Set focus to the error button if we've an error message */\n$focus= \"\";\nif (session::is_set('errors') && session::get('errors') != \"\") {\n    $focus= '<script language=\"JavaScript\" type=\"text/javascript\">';\n    $focus.= 'document.forms[0].error_accept.focus();';\n    $focus.= '</script>';\n}\n$smarty->assign(\"focus\", $focus);\ndisplayLogin();\n\n// vim:tabstop=2:expandtab:shiftwidth=2:softtabstop=2:filetype=php:syntax:ruler:\n?>\n\n</body>\n</html>\n"], "fixing_code": ["<?php\n/**\n * This code is part of GOsa (http://www.gosa-project.org)\n * Copyright (C) 2003-2008 GONICUS GmbH\n * \n * ID: $$Id$$\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\n/* Load required includes */\nrequire_once \"../include/php_setup.inc\";\nrequire_once \"functions.inc\";\nrequire_once \"class_log.inc\";\nheader(\"Content-type: text/html; charset=UTF-8\");\n\n\n/**\n * Display the login page and exit().\n *\n */\nfunction displayLogin()\n{\n    global $smarty,$message,$config,$ssl,$error_collector, $BASE_DIR;\n    error_reporting(E_ALL | E_STRICT);\n\n    /* Check theme compatibility */\n    $theme= $config->get_cfg_value(\"core\",'theme');\n    if (file_exists(\"$BASE_DIR/ihtml/themes/$theme/blacklist\")) {\n        $blocks= file(\"$BASE_DIR/ihtml/themes/$theme/blacklist\");\n        foreach ($blocks as $block) {\n            if (preg_match('/'.preg_quote($block).'/', $_SERVER['HTTP_USER_AGENT'])) {\n                die(sprintf(_(\"Your browser (%s) is blacklisted for the current theme!\"), $block));\n            }\n        }\n    }\n\n    /* Fill template with required values */\n    $username = \"\";\n    if(isset($_POST[\"username\"])) {\n        $username= get_post(\"username\");\n    }\n    \n    $smarty->assign (\"title\",\"GOsa\");\n    $smarty->assign(\"logo\", image(get_template_path(\"images/logo.png\")));\n    $smarty->assign('date', gmdate(\"D, d M Y H:i:s\"));\n    $smarty->assign('username', set_post($username));\n    $smarty->assign('personal_img', get_template_path('images/login-head.png'));\n    $smarty->assign('password_img', get_template_path('images/password.png'));\n    $smarty->assign('directory_img', get_template_path('images/ldapserver.png'));\n\n    /* Some error to display? */\n    if (!isset($message)) {\n        $message= \"\";\n    }\n    $smarty->assign(\"message\", $message);\n\n    /* Displasy SSL mode warning? */\n    if ($ssl != \"\" && $config->get_cfg_value(\"core\",'warnSSL') == 'true') {\n        $smarty->assign(\"ssl\", sprintf(_(\"This session is not encrypted. Click %s to enter an encrypted session.\"), \"<a href=\\\"$ssl\\\">\".bold(_(\"here\")).\"</a>\"));\n    } else {\n        $smarty->assign(\"ssl\", \"\");\n    }\n\n    if(!$config->check_session_lifetime()) {\n        $smarty->assign (\"lifetime\", _(\"The configured session lifetime will be overridden by php.ini settings!\"));\n    } else {\n        $smarty->assign (\"lifetime\", \"\");\n    }\n\n    /* Generate server list */\n    $servers= array();\n    if (isset($_POST['server'])) {\n        $selected= get_post('server');\n    } else {\n        $selected= $config->data['MAIN']['DEFAULT'];\n    }\n    foreach ($config->data['LOCATIONS'] as $key => $ignored) {\n        $servers[$key]= $key;\n    }\n    $smarty->assign (\"server_options\", $servers);\n    $smarty->assign (\"server_id\", $selected);\n\n    /* show login screen */\n    $smarty->assign (\"PHPSESSID\", session_id());\n    if (session::is_set('errors')) {\n        $smarty->assign(\"errors\", session::get('errors'));\n    }\n    if ($error_collector != \"\") {\n        $smarty->assign(\"php_errors\", $error_collector.\"</div>\");\n    } else {\n        $smarty->assign(\"php_errors\", \"\");\n    }\n    $smarty->assign(\"msg_dialogs\", msg_dialog::get_dialogs());\n\n    $smarty->display (get_template_path('headers.tpl'));\n    $smarty->assign(\"version\",get_gosa_version());\n    $smarty->display(get_template_path('login.tpl'));\n    exit();\n}\n\n\n\n/*****************************************************************************\n *                               M   A   I   N                               *\n *****************************************************************************/\n\n/* Set error handler to own one, initialize time calculation\nand start session. */\nsession::start();\nsession::set('errorsAlreadyPosted',array());\n\n/* Destroy old session if exists. \nElse you will get your old session back, if you not logged out correctly. */\nif(is_array(session::get_all()) && count(session::get_all())) {\n    session::destroy();\n    session::start();\n}\n\n$username= \"\";\n\n/* Reset errors */\nsession::set('errors',\"\");\nsession::set('errorsAlreadyPosted',\"\");\nsession::set('LastError',\"\");\n\n/* Check if we need to run setup */\nif (!file_exists(CONFIG_DIR.\"/\".CONFIG_FILE)) {\n    header(\"location:setup.php\");\n    exit();\n}\n\n/* Reset errors */\nsession::set('errors',\"\");\n\n/* Check for java script */\nif(isset($_POST['javascript']) && $_POST['javascript'] == \"true\") {\n    session::global_set('js',TRUE);\n}elseif(isset($_POST['javascript'])) {\n    session::global_set('js',FALSE);\n}\n\n/* Check if gosa.conf (.CONFIG_FILE) is accessible */\nif (!is_readable(CONFIG_DIR.\"/\".CONFIG_FILE)) {\n    msg_dialog::display(_(\"Configuration error\"),sprintf(_(\"GOsa configuration %s/%s is not readable. Aborted.\"), CONFIG_DIR,CONFIG_FILE),FATAL_ERROR_DIALOG);\n    exit();\n}\n\n/* Parse configuration file */\n$config= new config(CONFIG_DIR.\"/\".CONFIG_FILE, $BASE_DIR);\nsession::global_set('debugLevel',$config->get_cfg_value(\"core\",'debugLevel'));\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG (DEBUG_CONFIG, __LINE__, __FUNCTION__, __FILE__, $config->data, \"config\");\n}\n\n/* Enable compressed output */\nif ($config->get_cfg_value(\"core\",\"sendCompressedOutput\") != \"\") {\n    if(ob_get_length() > 0) ob_end_clean();\n    ob_start(\"ob_gzhandler\");\n}\n\n/* Set template compile directory */\n$smarty->compile_dir= $config->get_cfg_value(\"core\",\"templateCompileDirectory\");\n$smarty->error_unassigned= true;\n\n/* Check for compile directory */\nif (!(is_dir($smarty->compile_dir) && is_writable($smarty->compile_dir))) {\n    msg_dialog::display(_(\"Smarty error\"),sprintf(_(\"Compile directory %s is not accessible!\"),\n        $smarty->compile_dir),FATAL_ERROR_DIALOG);\n    exit();\n}\n\n/* Check for old files in compile directory */\nclean_smarty_compile_dir($smarty->compile_dir);\n\n/* Language setup */\n$lang= get_browser_language();\nputenv(\"LANGUAGE=\");\nputenv(\"LANG=$lang\");\nsetlocale(LC_ALL, $lang);\n$GLOBALS['t_language']= $lang;\n$GLOBALS['t_gettext_message_dir'] = $BASE_DIR.'/locale/';\n\n/* Set the text domain as 'messages' */\n$domain = 'messages';\nbindtextdomain($domain, LOCALE_DIR);\ntextdomain($domain);\n$smarty->assign ('nextfield', 'username');\n\n/* Translation of cookie-warning. Whether to display it, is determined by JavaScript */\n$smarty->assign (\"cookies\", _(\"Your browser has cookies disabled: please enable cookies and reload this page before logging in!\"));\n\nif ($_SERVER[\"REQUEST_METHOD\"] != \"POST\") {\n    @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__, $lang, \"Setting language to\");\n}\n\n\n/* Check for SSL connection */\n$ssl= \"\";\nif (!isset($_SERVER['HTTPS']) ||\n    !stristr($_SERVER['HTTPS'], \"on\")) {\n\n        if (empty($_SERVER['REQUEST_URI'])) {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['PATH_INFO'];\n        } else {\n            $ssl= \"https://\".$_SERVER['HTTP_HOST'].\n                $_SERVER['REQUEST_URI'];\n        }\n    }\n\n/* If SSL is forced, just forward to the SSL enabled site */\nif ($config->get_cfg_value(\"core\",\"forceSSL\") == 'true' && $ssl != '') {\n    header (\"Location: $ssl\");\n    exit;\n}\n\n/* Do we have htaccess authentification enabled? */\n$htaccess_authenticated= FALSE;\nif ($config->get_cfg_value(\"core\",\"htaccessAuthentication\") == \"true\" ) {\n    if (!isset($_SERVER['REMOTE_USER'])) {\n        msg_dialog::display(_(\"Configuration error\"), _(\"Broken HTTP authentication setup!\"), FATAL_ERROR_DIALOG);\n        exit;\n    }\n\n    $tmp= process_htaccess($_SERVER['REMOTE_USER'], isset($_SERVER['KRB5CCNAME']));\n    $username= $tmp['username'];\n    $server= $tmp['server'];\n    if ($username == \"\") {\n        msg_dialog::display(_(\"Error\"), _(\"Cannot find a valid user for the current HTTP authentication!\"), FATAL_ERROR_DIALOG);\n        exit;\n    }\n    if ($server == \"\") {\n        msg_dialog::display(_(\"Error\"), _(\"Cannot find a unique user for the current HTTP authentication!\"), FATAL_ERROR_DIALOG);\n        exit;\n    }\n\n    $htaccess_authenticated= TRUE;\n}\n\n/* Got a formular answer, validate and try to log in */\nif (($_SERVER[\"REQUEST_METHOD\"] == \"POST\" && isset($_POST['login'])) || $htaccess_authenticated) {\n\n    /* Reset error messages */\n    $message= \"\";\n\n    /* Destroy old sessions, they cause a successfull login to relog again ...*/\n    if(session::global_is_set('_LAST_PAGE_REQUEST')) {\n        session::global_set('_LAST_PAGE_REQUEST',time());\n    }\n\n    if (!$htaccess_authenticated) {\n        $server= get_post(\"server\");\n    }\n    $config->set_current($server);\n\n    /* Admin-logon and verify */\n    $ldap = $config->get_ldap_link();\n    if (is_null($ldap) || (is_int($ldap) && $ldap == 0)) {\n        msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), $this->dn, 0, get_class()));\n        displayLogin();\n        exit();\n    }\n\n    /* Check for locking area */\n    $ldap->cat($config->get_cfg_value(\"core\",\"config\"), array(\"dn\"));\n    $attrs= $ldap->fetch();\n    if (!count ($attrs)) {\n        $ldap->cd($config->current['BASE']);\n        $ldap->create_missing_trees($config->get_cfg_value(\"core\",\"config\"));\n    }\n\n    /* Check for valid input */\n    $ok= true;\n    if (!$htaccess_authenticated) {\n        $username= get_post(\"username\");\n        if (!preg_match(\"/^[@A-Za-z0-9_.-]+$/\", $username)) {\n            $message= _(\"Please specify a valid user name!\");\n            $ok= false;\n        } elseif (mb_strlen(get_post(\"password\"), 'UTF-8') == 0) {\n            $message= _(\"Please specify your password!\");\n            $smarty->assign ('nextfield', 'password');\n            $ok= false;\n        }\n    }\n\n    if ($ok) {\n\n        /* Login as user, initialize user ACL's */\n        if ($htaccess_authenticated) {\n            $ui= ldap_login_user_htaccess($username);\n            if ($ui === NULL || !$ui) {\n                msg_dialog::display(_(\"Authentication error\"), _(\"Cannot retrieve user information for HTTP authentication!\"), FATAL_ERROR_DIALOG);\n                exit;\n            }\n        } else {\n            $ui= ldap_login_user($username, get_post(\"password\"));\n        }\n        if ($ui === NULL || !$ui) {\n            $message= _(\"Please check the username/password combination!\");\n            $smarty->assign ('nextfield', 'password');\n            session::global_set('config',$config);\n            if(isset($_SERVER['REMOTE_ADDR'])){\n                $ip= $_SERVER['REMOTE_ADDR'];\n                new log(\"security\",\"login\",\"\",array(),\"Authentication failed for user \\\"$username\\\" [from $ip]\");\n            }else{\n                new log(\"security\",\"login\",\"\",array(),\"Authentication failed for user \\\"$username\\\"\");\n            }\n        } else {\n            /* Remove all locks of this user */\n            del_user_locks($ui->dn);\n\n            /* Save userinfo and plugin structure */\n            session::global_set('ui',$ui);\n            session::global_set('session_cnt',0);\n\n      /* Let GOsa trigger a new connection for each POST, save\n      config to session. */\n            $config->get_departments();\n            $config->make_idepartments();\n            session::global_set('config',$config);\n\n            /* Restore filter settings from cookie, if available */\n            if($config->get_cfg_value(\"core\",\"storeFilterSettings\") == \"true\") {\n\n                if(isset($_COOKIE['GOsa_Filter_Settings']) || isset($HTTP_COOKIE_VARS['GOsa_Filter_Settings'])) {\n\n                    if(isset($_COOKIE['GOsa_Filter_Settings'])) {\n                        $cookie_all = unserialize(base64_decode($_COOKIE['GOsa_Filter_Settings']));\n                    }else{\n                        $cookie_all = unserialize(base64_decode($HTTP_COOKIE_VARS['GOsa_Filter_Settings']));\n                    }\n                    if(isset($cookie_all[$ui->dn])) {\n                        $cookie = $cookie_all[$ui->dn];\n                        $cookie_vars= array(\"MultiDialogFilters\",\"CurrentMainBase\",\"plug\");\n                        foreach($cookie_vars as $var) {\n                            if(isset($cookie[$var])) {\n                                session::global_set($var,$cookie[$var]);\n                            }\n                        }\n                        if(isset($cookie['plug'])) {\n                            $plug =$cookie['plug'];\n                        }\n                    }\n                }\n            }\n\n            /* are we using accountexpiration */\n            if ($config->boolValueIsTrue(\"core\",\"handleExpiredAccounts\")) {\n                $expired= ldap_expired_account($config, $ui->dn, $ui->username);\n\n                if ($expired == POSIX_ACCOUNT_EXPIRED) {\n                    $message= _(\"Account locked. Please contact your system administrator!\");\n                    $smarty->assign ('nextfield', 'password');\n                    new log(\"security\",\"login\",\"\",array(),\"Account for user \\\"$username\\\" has expired\") ;\n                    displayLogin();\n                    exit();\n                }\n            }\n\n            /* Not account expired or password forced change go to main page */\n            new log(\"security\",\"login\",\"\",array(),\"User \\\"$username\\\" logged in successfully\") ;\n            $plist= new pluglist($config, $ui);\n\n            stats::log('global', 'global', array(),  $action = 'login', $amount = 1, 0);\n\n            if(isset($plug) && isset($plist->dirlist[$plug])) {\n                header (\"Location: main.php?plug=\".$plug.\"&amp;global_check=1\");\n            }else{\n                header (\"Location: main.php?global_check=1\");\n            }\n            exit;\n        }\n    }\n}\n\n/* Fill template with required values */\n$smarty->assign ('date', gmdate(\"D, d M Y H:i:s\"));\n$smarty->assign ('username', set_post($username));\n$smarty->assign ('personal_img', get_template_path('images/login-head.png'));\n$smarty->assign ('password_img', get_template_path('images/password.png'));\n$smarty->assign ('directory_img', get_template_path('images/ldapserver.png'));\n\n/* Some error to display? */\nif (!isset($message)) {\n    $message= \"\";\n}\n\n$smarty->assign (\"message\", $message);\n\n/* Generate server list */\n$servers= array();\nif (isset($_POST['server'])){\n    $selected= get_post('server');\n} else {\n    $selected= $config->data['MAIN']['DEFAULT'];\n}\nforeach ($config->data['LOCATIONS'] as $key => $ignored) {\n    $servers[$key]= $key;\n}\n$smarty->assign (\"server_options\", $servers);\n$smarty->assign (\"server_id\", $selected);\n\n/* show login screen */\n$smarty->assign (\"PHPSESSID\", session_id());\nif (session::is_set('errors')) {\n    $smarty->assign(\"errors\", session::get('errors'));\n}\nif ($error_collector != \"\") {\n    $smarty->assign(\"php_errors\", preg_replace(\"/%BUGBODY%/\",$error_collector_mailto,$error_collector).\"</div>\");\n} else {\n    $smarty->assign(\"php_errors\", \"\");\n}\n\n/* Set focus to the error button if we've an error message */\n$focus= \"\";\nif (session::is_set('errors') && session::get('errors') != \"\") {\n    $focus= '<script language=\"JavaScript\" type=\"text/javascript\">';\n    $focus.= 'document.forms[0].error_accept.focus();';\n    $focus.= '</script>';\n}\n$smarty->assign(\"focus\", $focus);\ndisplayLogin();\n\n// vim:tabstop=2:expandtab:shiftwidth=2:softtabstop=2:filetype=php:syntax:ruler:\n?>\n\n</body>\n</html>\n"], "filenames": ["html/index.php"], "buggy_code_start_loc": [391], "buggy_code_end_loc": [392], "fixing_code_start_loc": [391], "fixing_code_end_loc": [392], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the displayLogin function in html/index.php in GOsa allows remote attackers to inject arbitrary web script or HTML via the username.", "other": {"cve": {"id": "CVE-2014-9760", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-13T18:59:00.113", "lastModified": "2020-02-24T20:38:14.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the displayLogin function in html/index.php in GOsa allows remote attackers to inject arbitrary web script or HTML via the username."}, {"lang": "es", "value": "Vulnerabilidad de XSS en la funci\u00f3n displayLogin en html/index.php en GOsa permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s del nombre de usuario."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gosa_project:gosa:-:*:*:*:*:*:*:*", "matchCriteriaId": "76B43F12-8F13-4ECC-AF88-0A9A9DE1D233"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/01/15/11", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/97104", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/gosa-project/gosa-core/commit/e35b990464a2c2cf64d6833a217ed944876e7732", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/gosa-project/gosa-core/commit/e35b990464a2c2cf64d6833a217ed944876e7732"}}