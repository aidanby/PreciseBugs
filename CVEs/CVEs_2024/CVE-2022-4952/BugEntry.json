{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing Newtonsoft.Json;\n\nnamespace OmniSharp.Extensions.JsonRpc.Serialization\n{\n    public abstract class SerializerBase : ISerializer\n    {\n        private long _id;\n\n        protected virtual JsonSerializer CreateSerializer()\n        {\n            var serializer = JsonSerializer.CreateDefault();\n            AddOrReplaceConverters(serializer.Converters);\n            return _jsonSerializer = serializer;\n        }\n\n        protected virtual JsonSerializerSettings CreateSerializerSettings()\n        {\n            var settings = JsonConvert.DefaultSettings != null ? JsonConvert.DefaultSettings() : new JsonSerializerSettings();\n            AddOrReplaceConverters(settings.Converters);\n            return _settings = settings;\n        }\n\n        protected internal static void RemoveConverter<T>(ICollection<JsonConverter> converters)\n        {\n            foreach (var item in converters.Where(z => z.CanConvert(typeof(T))).ToArray())\n            {\n                converters.Remove(item);\n            }\n        }\n\n        protected internal static void ReplaceConverter<T>(ICollection<JsonConverter> converters, T item)\n            where T : JsonConverter\n        {\n            var existingConverters = converters.OfType<T>().ToArray();\n            if (existingConverters.Any())\n            {\n                foreach (var converter in existingConverters)\n                    converters.Remove(converter);\n            }\n\n            converters.Add(item);\n        }\n\n        private JsonSerializer? _jsonSerializer;\n        public JsonSerializer JsonSerializer => _jsonSerializer ?? CreateSerializer();\n\n\n        private JsonSerializerSettings? _settings;\n        public JsonSerializerSettings Settings => _settings ?? CreateSerializerSettings();\n\n        public string SerializeObject(object value) => JsonConvert.SerializeObject(value, Settings);\n\n        public object DeserializeObject(string json, Type type) => JsonConvert.DeserializeObject(json, type, Settings);\n\n        public T DeserializeObject<T>(string json) => JsonConvert.DeserializeObject<T>(json, Settings);\n        public long GetNextId() => Interlocked.Increment(ref _id);\n        protected abstract void AddOrReplaceConverters(ICollection<JsonConverter> converters);\n    }\n}\n"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing Newtonsoft.Json;\n\nnamespace OmniSharp.Extensions.JsonRpc.Serialization\n{\n    public abstract class SerializerBase : ISerializer\n    {\n        private long _id;\n\n        protected virtual JsonSerializer CreateSerializer()\n        {\n            var serializer = JsonSerializer.CreateDefault();\n            AddOrReplaceConverters(serializer.Converters);\n            return _jsonSerializer = serializer;\n        }\n\n        protected virtual JsonSerializerSettings CreateSerializerSettings()\n        {\n            var settings = JsonConvert.DefaultSettings != null ? JsonConvert.DefaultSettings() : new JsonSerializerSettings { MaxDepth = 128 };\n            AddOrReplaceConverters(settings.Converters);\n            return _settings = settings;\n        }\n\n        protected internal static void RemoveConverter<T>(ICollection<JsonConverter> converters)\n        {\n            foreach (var item in converters.Where(z => z.CanConvert(typeof(T))).ToArray())\n            {\n                converters.Remove(item);\n            }\n        }\n\n        protected internal static void ReplaceConverter<T>(ICollection<JsonConverter> converters, T item)\n            where T : JsonConverter\n        {\n            var existingConverters = converters.OfType<T>().ToArray();\n            if (existingConverters.Any())\n            {\n                foreach (var converter in existingConverters)\n                    converters.Remove(converter);\n            }\n\n            converters.Add(item);\n        }\n\n        private JsonSerializer? _jsonSerializer;\n        public JsonSerializer JsonSerializer => _jsonSerializer ?? CreateSerializer();\n\n\n        private JsonSerializerSettings? _settings;\n        public JsonSerializerSettings Settings => _settings ?? CreateSerializerSettings();\n\n        public string SerializeObject(object value) => JsonConvert.SerializeObject(value, Settings);\n\n        public object DeserializeObject(string json, Type type) => JsonConvert.DeserializeObject(json, type, Settings);\n\n        public T DeserializeObject<T>(string json) => JsonConvert.DeserializeObject<T>(json, Settings);\n        public long GetNextId() => Interlocked.Increment(ref _id);\n        protected abstract void AddOrReplaceConverters(ICollection<JsonConverter> converters);\n    }\n}\n"], "filenames": ["src/JsonRpc/Serialization/SerializerBase.cs"], "buggy_code_start_loc": [22], "buggy_code_end_loc": [23], "fixing_code_start_loc": [22], "fixing_code_end_loc": [23], "type": "NVD-CWE-noinfo", "message": "A vulnerability has been found in OmniSharp csharp-language-server-protocol up to 0.19.6 and classified as problematic. This vulnerability affects the function CreateSerializerSettings of the file src/JsonRpc/Serialization/SerializerBase.cs of the component JSON Serializer. The manipulation leads to resource consumption. Upgrading to version 0.19.7 is able to address this issue. The patch is identified as 7fd2219f194a9ef2a8901bb131c5fa12272305ce. It is recommended to upgrade the affected component. VDB-234238 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4952", "sourceIdentifier": "cna@vuldb.com", "published": "2023-07-17T02:15:09.273", "lastModified": "2024-02-29T01:36:51.210", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in OmniSharp csharp-language-server-protocol up to 0.19.6 and classified as problematic. This vulnerability affects the function CreateSerializerSettings of the file src/JsonRpc/Serialization/SerializerBase.cs of the component JSON Serializer. The manipulation leads to resource consumption. Upgrading to version 0.19.7 is able to address this issue. The patch is identified as 7fd2219f194a9ef2a8901bb131c5fa12272305ce. It is recommended to upgrade the affected component. VDB-234238 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.7}, "baseSeverity": "LOW", "exploitabilityScore": 5.1, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dotnetfoundation:c\\#_language_server_protocol:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.19.7", "matchCriteriaId": "1B1B237D-0D57-4DBA-8EBF-F883168EF32D"}]}]}], "references": [{"url": "https://github.com/OmniSharp/csharp-language-server-protocol/commit/7fd2219f194a9ef2a8901bb131c5fa12272305ce", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/OmniSharp/csharp-language-server-protocol/pull/902", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/OmniSharp/csharp-language-server-protocol/releases/tag/v0.19.7", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.234238", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.234238", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OmniSharp/csharp-language-server-protocol/commit/7fd2219f194a9ef2a8901bb131c5fa12272305ce"}}