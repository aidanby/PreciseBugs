{"buggy_code": ["import random\nimport string\nimport hashlib\nimport requests\n\n\nclass passeo:\n    def __init__(self):\n\n        def generate(length, numbers=False, symbols=False, uppercase=False, lowercase=False, space=False, save=False):\n            password = ''\n            if numbers:\n                password += string.digits\n            if symbols:\n                password += string.punctuation\n            if uppercase:\n                password += string.ascii_uppercase\n            if lowercase:\n                if uppercase:\n                    raise ValueError('Uppercase and lowercase are both true, please make one of them false.')\n                password += string.ascii_lowercase\n            if space:\n                password += ' '\n            PasseoPassword = ''.join(random.sample(password, length))\n            if save:\n                with open('passeo_passwords.txt', 'a') as file:\n                    file.write(PasseoPassword + '\\n')\n            return PasseoPassword\n\n        self.generate = generate\n\n        def strengthcheck(password):\n            sha1password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()\n            first5, tail = sha1password[:5], sha1password[5:]\n            response = requests.get('https://api.pwnedpasswords.com/range/' + first5)\n            y = tail in response.text\n            length = len(password)\n            StrengthCheckQuiz = {\n                'Pwned': '',\n                'Length': '',\n                'Case': '',\n            }\n            if y == True:\n                StrengthCheckQuiz['Pwned'] = '1/3: PASS: password has been pwned, please change it.'\n            elif y == False:\n                StrengthCheckQuiz['Pwned'] = '1/3: PASS: Your password has not been pwned, you are safe.'\n            elif y == None:\n                StrengthCheckQuiz['Pwned'] = '1/3: FAIL: An error has occurred, please try again.'\n            if length < 8:\n                StrengthCheckQuiz['Length'] = '2/3: FAIL: Your password is too short, it is recommended to make it longer.'\n\n            elif length >= 8 and length <= 16:\n                StrengthCheckQuiz['Length'] = '2/3: PASS: Your password is long enough! It could be longer, but is great.'\n\n            elif length > 16:\n                StrengthCheckQuiz['Length'] = '2/3: PASS: Your password is very long, good job!'\n            \n            elif length == None:\n                StrengthCheckQuiz['Length'] = '2/3: FAIL: An error has occurred, please try again.'\n\n            if password.lower():\n                StrengthCheckQuiz['Case'] = '3/3: FAIL: Your password has lowercase letters, but not uppercase letters, it is recommended to add uppercase letters.'\n\n            elif password.upper():\n                StrengthCheckQuiz['Case'] = '3/3: FAIL: Your password has uppercase letters, however it is also recommended to add lowercase letters.'\n            elif password.lower() and password.upper():\n                StrengthCheckQuiz['Case'] = '3/3: PASS: Your password has both uppercase and lowercase letters, good job!'\n            \n            elif password == None:\n                StrengthCheckQuiz['Case'] = '3/3: FAIL: An error has occurred, please try again.'\n            return str(StrengthCheckQuiz['Pwned']) + '\\n' + str(StrengthCheckQuiz['Length'] + '\\n' + str(StrengthCheckQuiz['Case']) + '\\n' + 'The Passeo password strength test has ended. Any questions/bugs? Raise a issue on https://github.com/ArjunSharda/Passeo/issue.')\n\n        self.strengthcheck = strengthcheck\n"], "fixing_code": ["import string\nimport hashlib\nimport requests\nimport secrets\n\n\nclass passeo:\n    def __init__(self):\n\n        def generate(length, numbers=False, symbols=False, uppercase=False, lowercase=False, space=False, save=False):\n            password = ''\n            if numbers is True:\n                password += secrets.choice(string.digits)\n            if symbols is True:\n                password += secrets.choice(string.punctuation)\n            if lowercase and uppercase == True:\n                raise ValueError('Uppercase and lowercase are both true, please make one of them false.')\n\n            if uppercase is True:\n                password += secrets.choice(string.ascii_uppercase)\n            if lowercase is True:\n                password += secrets.choice(string.ascii_lowercase)\n\n\n            if space is True:\n                password += ' '\n            PasseoPassword = ''.join(secrets.choice(password) for i in range(length))\n            if save is True:\n                with open('passeo_passwords.txt', 'a') as file:\n                    file.write(PasseoPassword + '\\n')\n            return PasseoPassword\n\n\n        self.generate = generate\n\n        def strengthcheck(password):\n            sha1password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()\n            first5, tail = sha1password[:5], sha1password[5:]\n            response = requests.get('https://api.pwnedpasswords.com/range/' + first5)\n            y = tail in response.text\n            length = len(password)\n            StrengthCheckQuiz = {\n                'Pwned': '',\n                'Length': '',\n                'Case': '',\n            }\n            if y == True:\n                StrengthCheckQuiz['Pwned'] = '1/3: PASS: password has been pwned, please change it.'\n            elif y == False:\n                StrengthCheckQuiz['Pwned'] = '1/3: PASS: Your password has not been pwned, you are safe.'\n            elif y == None:\n                StrengthCheckQuiz['Pwned'] = '1/3: FAIL: An error has occurred, please try again.'\n            if length < 8:\n                StrengthCheckQuiz[\n                    'Length'] = '2/3: FAIL: Your password is too short, it is recommended to make it longer.'\n\n            elif length >= 8 and length <= 16:\n                StrengthCheckQuiz[\n                    'Length'] = '2/3: PASS: Your password is long enough! It could be longer, but is great.'\n\n            elif length > 16:\n                StrengthCheckQuiz['Length'] = '2/3: PASS: Your password is very long, good job!'\n\n            elif length == None:\n                StrengthCheckQuiz['Length'] = '2/3: FAIL: An error has occurred, please try again.'\n\n            if password.lower():\n                StrengthCheckQuiz[\n                    'Case'] = '3/3: FAIL: Your password has lowercase letters, but not uppercase letters, it is recommended to add uppercase letters.'\n\n            elif password.upper():\n                StrengthCheckQuiz[\n                    'Case'] = '3/3: FAIL: Your password has uppercase letters, however it is also recommended to add lowercase letters.'\n            elif password.lower() and password.upper():\n                StrengthCheckQuiz[\n                    'Case'] = '3/3: PASS: Your password has both uppercase and lowercase letters, good job!'\n\n            elif password == None:\n                StrengthCheckQuiz['Case'] = '3/3: FAIL: An error has occurred, please try again.'\n            return str(StrengthCheckQuiz['Pwned']) + '\\n' + str(StrengthCheckQuiz['Length'] + '\\n' + str(\n                StrengthCheckQuiz[\n                    'Case']) + '\\n' + 'The Passeo password strength test has ended. Any questions/bugs? Raise a issue on https://github.com/ArjunSharda/Passeo/issue.')\n\n        self.strengthcheck = strengthcheck\n\n        def quickgenerate(length=int, save=False, bulk=1):\n            PASSEO_QUICKGEN_PASSWORD = ''.join(\n                secrets.choice(string.ascii_letters + string.digits) for i in range(length))\n            if save:\n                with open('passeo_quickgen_passwords.txt', 'a') as file:\n                    file.write(PASSEO_QUICKGEN_PASSWORD + '\\n')\n                    if bulk > 1:\n                        with open('passeo_quickgen_bulk_passwords.txt', 'a') as bulkf:\n                            for i in range(bulk):\n                                bulkf.write(''.join(\n                                    secrets.choice(string.ascii_letters + string.digits) for i in range(length)) + '\\n')\n\n            return PASSEO_QUICKGEN_PASSWORD\n\n\n        self.quickgenerate = quickgenerate\n"], "filenames": ["src/passeo/__init__.py"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [73], "fixing_code_start_loc": [0], "fixing_code_end_loc": [102], "type": "CWE-338", "message": "Passeo is an open source python password generator. Versions prior to 1.0.5 rely on the python `random` library for random value selection. The python `random` library warns that it should not be used for security purposes due to its reliance on a non-cryptographically secure random number generator. As a result a motivated attacker may be able to guess generated passwords. This issue has been addressed in version 1.0.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2022-23472", "sourceIdentifier": "security-advisories@github.com", "published": "2022-12-06T18:15:10.170", "lastModified": "2022-12-08T20:03:28.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Passeo is an open source python password generator. Versions prior to 1.0.5 rely on the python `random` library for random value selection. The python `random` library warns that it should not be used for security purposes due to its reliance on a non-cryptographically secure random number generator. As a result a motivated attacker may be able to guess generated passwords. This issue has been addressed in version 1.0.5. Users are advised to upgrade. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-338"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:passeo_project:passeo:*:*:*:*:*:python:*:*", "versionEndExcluding": "1.0.5", "matchCriteriaId": "C40F22C4-39CC-472C-8DFA-CEB27518B72D"}]}]}], "references": [{"url": "https://github.com/ArjunSharda/Passeo/commit/8caa798b6bc4647dca59b2376204b6dc6176361a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ArjunSharda/Passeo/security/advisories/GHSA-mhhf-vgwh-fw9h", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://peps.python.org/pep-0506/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ArjunSharda/Passeo/commit/8caa798b6bc4647dca59b2376204b6dc6176361a"}}