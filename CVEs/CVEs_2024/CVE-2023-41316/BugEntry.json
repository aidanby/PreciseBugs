{"buggy_code": ["package io.tolgee.api.v2.controllers.organizationController\n\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\nimport com.fasterxml.jackson.module.kotlin.readValue\nimport io.tolgee.dtos.misc.CreateOrganizationInvitationParams\nimport io.tolgee.dtos.request.organization.OrganizationDto\nimport io.tolgee.dtos.request.organization.OrganizationInviteUserDto\nimport io.tolgee.exceptions.BadRequestException\nimport io.tolgee.fixtures.EmailTestUtil\nimport io.tolgee.fixtures.andAssertThatJson\nimport io.tolgee.fixtures.andGetContentAsString\nimport io.tolgee.fixtures.andIsBadRequest\nimport io.tolgee.fixtures.andIsOk\nimport io.tolgee.fixtures.andPrettyPrint\nimport io.tolgee.model.Organization\nimport io.tolgee.model.enums.OrganizationRoleType\nimport io.tolgee.testing.AuthorizedControllerTest\nimport io.tolgee.testing.assertions.Assertions.assertThat\nimport io.tolgee.testing.assertions.Assertions.assertThatThrownBy\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc\nimport org.springframework.boot.test.context.SpringBootTest\n\n@SpringBootTest\n@AutoConfigureMockMvc\nclass OrganizationControllerInvitingTest : AuthorizedControllerTest() {\n\n  companion object {\n    private const val INVITED_EMAIL = \"jon@doe.com\"\n    private const val INVITED_NAME = \"Franta\"\n    private const val TEST_USERNAME = \"hi@hi.com\"\n  }\n\n  lateinit var dummyDto: OrganizationDto\n\n  @Autowired\n  private lateinit var emailTestUtil: EmailTestUtil\n\n  @BeforeEach\n  fun setup() {\n    dummyDto = OrganizationDto(\n      \"Test org\",\n      \"This is description\",\n      \"test-org\",\n    )\n    tolgeeProperties.frontEndUrl = null\n    emailTestUtil.initMocks()\n  }\n\n  @Test\n  fun testGetAllInvitations() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val invitation = invitationService.create(\n        CreateOrganizationInvitationParams(\n          organization = organization,\n          type = OrganizationRoleType.MEMBER\n        )\n      )\n      loginAsUser(\"hellouser\")\n      performAuthGet(\"/v2/organizations/${organization.id}/invitations\")\n        .andIsOk.andAssertThatJson {\n          node(\"_embedded.organizationInvitations\").let { projectsNode ->\n            projectsNode.isArray.hasSize(1)\n            projectsNode.node(\"[0].id\").isEqualTo(invitation.id)\n          }\n        }\n    }\n  }\n\n  @Test\n  fun testInviteUser() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n    loginAsUser(helloUser.username)\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val body = OrganizationInviteUserDto(roleType = OrganizationRoleType.MEMBER)\n      performAuthPut(\"/v2/organizations/${organization.id}/invite\", body).andPrettyPrint.andAssertThatJson {\n        node(\"code\").isString.hasSize(50).satisfies {\n          invitationService.getInvitation(it) // it throws on not found\n        }\n        node(\"type\").isEqualTo(\"MEMBER\")\n      }\n    }\n  }\n\n  @Test\n  fun testAcceptInvitation() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val invitation = invitationService.create(\n        CreateOrganizationInvitationParams(\n          organization = organization,\n          type = OrganizationRoleType.OWNER\n        )\n      )\n      val invitedUser = dbPopulator.createUserIfNotExists(\"invitedUser\")\n      loginAsUser(invitedUser.username)\n      performAuthGet(\"/v2/invitations/${invitation.code}/accept\").andIsOk\n      assertThatThrownBy { invitationService.getInvitation(invitation.code) }\n        .isInstanceOf(BadRequestException::class.java)\n      organizationRoleService.isUserMemberOrOwner(invitedUser.id, organization.id).let {\n        assertThat(it).isTrue\n      }\n    }\n  }\n\n  @Test\n  fun `it prevents accepting invitation again already a member`() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val invitation = invitationService.create(\n        CreateOrganizationInvitationParams(\n          organization = organization,\n          type = OrganizationRoleType.MEMBER\n        )\n      )\n      val invitedUser = dbPopulator.createUserIfNotExists(\"invitedUser\")\n      this.organizationRoleService.grantMemberRoleToUser(invitedUser, organization)\n      loginAsUser(invitedUser.username)\n      performAuthGet(\"/v2/invitations/${invitation.code}/accept\").andIsBadRequest\n    }\n  }\n\n  @Test\n  fun testDeleteInvitation() {\n    val organization = prepareTestOrganization()\n\n    val invitation = invitationService.create(\n      CreateOrganizationInvitationParams(\n        organization = organization,\n        type = OrganizationRoleType.MEMBER\n      )\n    )\n    performAuthDelete(\"/v2/invitations/${invitation.id!!}\", null).andIsOk\n    assertThatThrownBy { invitationService.getInvitation(invitation.code) }\n      .isInstanceOf(BadRequestException::class.java)\n  }\n\n  private fun prepareTestOrganization(): Organization {\n    val helloUser = dbPopulator.createUserIfNotExists(TEST_USERNAME)\n    val organization = organizationService.create(dummyDto, helloUser)\n    loginAsUser(helloUser.username)\n    return organization\n  }\n\n  @Test\n  fun `stores name and e-mail with invitation`() {\n    val organization = prepareTestOrganization()\n\n    val code = inviteWithUserWithNameAndEmail(organization.id)\n    val invitation = invitationService.getInvitation(code)\n    assertThat(invitation.name).isEqualTo(INVITED_NAME)\n    assertThat(invitation.email).isEqualTo(INVITED_EMAIL)\n  }\n\n  @Test\n  fun `sends invitation e-mail`() {\n    val organization = prepareTestOrganization()\n\n    val code = inviteWithUserWithNameAndEmail(organization.id)\n    emailTestUtil.verifyEmailSent()\n\n    val messageContent = emailTestUtil.messageContents.single()\n    assertThat(messageContent).contains(code)\n    assertThat(messageContent).contains(\"http://localhost/\")\n    emailTestUtil.assertEmailTo.isEqualTo(INVITED_EMAIL)\n  }\n\n  @Test\n  fun `does not invite when email already invited`() {\n    val organization = prepareTestOrganization()\n    performCreateInvitation(organization.id).andIsOk\n    performCreateInvitation(organization.id).andIsBadRequest\n  }\n\n  @Test\n  fun `does not invite when email already member`() {\n    val organization = prepareTestOrganization()\n    performAuthPut(\n      \"/v2/organizations/${organization.id}/invite\",\n      OrganizationInviteUserDto(\n        roleType = OrganizationRoleType.MEMBER,\n        email = TEST_USERNAME,\n        name = INVITED_NAME\n      )\n    ).andIsBadRequest\n  }\n\n  private fun inviteWithUserWithNameAndEmail(organizationId: Long): String {\n    val invitationJson = performCreateInvitation(organizationId).andIsOk.andGetContentAsString\n\n    return jacksonObjectMapper().readValue<Map<String, Any>>(invitationJson)[\"code\"] as String\n  }\n\n  private fun performCreateInvitation(organizationId: Long) = performAuthPut(\n    \"/v2/organizations/$organizationId/invite\",\n    OrganizationInviteUserDto(\n      roleType = OrganizationRoleType.MEMBER,\n      email = INVITED_EMAIL,\n      name = INVITED_NAME\n    )\n  )\n}\n", "package io.tolgee.component.email\n\nimport io.tolgee.component.FrontendUrlProvider\nimport io.tolgee.dtos.misc.EmailParams\nimport io.tolgee.model.Invitation\nimport org.springframework.stereotype.Component\n\n@Component\nclass InvitationEmailSender(\n  private val tolgeeEmailSender: TolgeeEmailSender,\n  private val frontendUrlProvider: FrontendUrlProvider\n) {\n  fun sendInvitation(\n    invitation: Invitation,\n  ) {\n    val email = invitation.email\n    if (email.isNullOrBlank()) {\n      return\n    }\n    val url = getInvitationAcceptUrl(invitation.code)\n    val params = EmailParams(\n      to = email,\n      subject = \"Invitation to Tolgee\",\n      text = \"\"\"\n        Hello! \ud83d\udc4b<br/><br/>\n        Good news. ${getInvitationSentence(invitation)}<br/><br/>\n        \n        To accept the invitation, <b>follow this link</b>:<br/>\n        <a href=\"$url\">$url</a><br/><br/>\n        \n        Regards,<br/>\n        Tolgee<br/><br/>\n      \"\"\".trimIndent()\n    )\n    tolgeeEmailSender.sendEmail(params)\n  }\n\n  private fun getInvitationSentence(invitation: Invitation): Any {\n    val projectNameOrNull = invitation.permission?.project?.name\n    val organizationNameOrNull = invitation.organizationRole?.organization?.name\n    val toWhat = when {\n      projectNameOrNull != null -> \"project\"\n      organizationNameOrNull != null -> \"organization\"\n      else -> throw IllegalStateException(\"No organization or project!\")\n    }\n\n    val name = projectNameOrNull ?: organizationNameOrNull\n\n    return \"You have been invited to $toWhat $name in Tolgee.\"\n  }\n\n  private fun getInvitationAcceptUrl(code: String): String {\n    return \"${frontendUrlProvider.url}/accept_invitation/$code\"\n  }\n}\n"], "fixing_code": ["package io.tolgee.api.v2.controllers.organizationController\n\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\nimport com.fasterxml.jackson.module.kotlin.readValue\nimport io.tolgee.dtos.misc.CreateOrganizationInvitationParams\nimport io.tolgee.dtos.request.organization.OrganizationDto\nimport io.tolgee.dtos.request.organization.OrganizationInviteUserDto\nimport io.tolgee.exceptions.BadRequestException\nimport io.tolgee.fixtures.EmailTestUtil\nimport io.tolgee.fixtures.andAssertThatJson\nimport io.tolgee.fixtures.andGetContentAsString\nimport io.tolgee.fixtures.andIsBadRequest\nimport io.tolgee.fixtures.andIsOk\nimport io.tolgee.fixtures.andPrettyPrint\nimport io.tolgee.model.Organization\nimport io.tolgee.model.enums.OrganizationRoleType\nimport io.tolgee.testing.AuthorizedControllerTest\nimport io.tolgee.testing.assertions.Assertions.assertThat\nimport io.tolgee.testing.assertions.Assertions.assertThatThrownBy\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc\nimport org.springframework.boot.test.context.SpringBootTest\n\n@SpringBootTest\n@AutoConfigureMockMvc\nclass OrganizationControllerInvitingTest : AuthorizedControllerTest() {\n\n  companion object {\n    private const val INVITED_EMAIL = \"jon@doe.com\"\n    private const val INVITED_NAME = \"Franta\"\n    private const val TEST_USERNAME = \"hi@hi.com\"\n  }\n\n  lateinit var dummyDto: OrganizationDto\n\n  @Autowired\n  private lateinit var emailTestUtil: EmailTestUtil\n\n  @BeforeEach\n  fun setup() {\n    dummyDto = OrganizationDto(\n      \"Test org\",\n      \"This is description\",\n      \"test-org\",\n    )\n    tolgeeProperties.frontEndUrl = null\n    emailTestUtil.initMocks()\n  }\n\n  @Test\n  fun testGetAllInvitations() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val invitation = invitationService.create(\n        CreateOrganizationInvitationParams(\n          organization = organization,\n          type = OrganizationRoleType.MEMBER\n        )\n      )\n      loginAsUser(\"hellouser\")\n      performAuthGet(\"/v2/organizations/${organization.id}/invitations\")\n        .andIsOk.andAssertThatJson {\n          node(\"_embedded.organizationInvitations\").let { projectsNode ->\n            projectsNode.isArray.hasSize(1)\n            projectsNode.node(\"[0].id\").isEqualTo(invitation.id)\n          }\n        }\n    }\n  }\n\n  @Test\n  fun testInviteUser() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n    loginAsUser(helloUser.username)\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val body = OrganizationInviteUserDto(roleType = OrganizationRoleType.MEMBER)\n      performAuthPut(\"/v2/organizations/${organization.id}/invite\", body).andPrettyPrint.andAssertThatJson {\n        node(\"code\").isString.hasSize(50).satisfies {\n          invitationService.getInvitation(it) // it throws on not found\n        }\n        node(\"type\").isEqualTo(\"MEMBER\")\n      }\n    }\n  }\n\n  @Test\n  fun testAcceptInvitation() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val invitation = invitationService.create(\n        CreateOrganizationInvitationParams(\n          organization = organization,\n          type = OrganizationRoleType.OWNER\n        )\n      )\n      val invitedUser = dbPopulator.createUserIfNotExists(\"invitedUser\")\n      loginAsUser(invitedUser.username)\n      performAuthGet(\"/v2/invitations/${invitation.code}/accept\").andIsOk\n      assertThatThrownBy { invitationService.getInvitation(invitation.code) }\n        .isInstanceOf(BadRequestException::class.java)\n      organizationRoleService.isUserMemberOrOwner(invitedUser.id, organization.id).let {\n        assertThat(it).isTrue\n      }\n    }\n  }\n\n  @Test\n  fun `it prevents accepting invitation again already a member`() {\n    val helloUser = dbPopulator.createUserIfNotExists(\"hellouser\")\n\n    this.organizationService.create(dummyDto, helloUser).let { organization ->\n      val invitation = invitationService.create(\n        CreateOrganizationInvitationParams(\n          organization = organization,\n          type = OrganizationRoleType.MEMBER\n        )\n      )\n      val invitedUser = dbPopulator.createUserIfNotExists(\"invitedUser\")\n      this.organizationRoleService.grantMemberRoleToUser(invitedUser, organization)\n      loginAsUser(invitedUser.username)\n      performAuthGet(\"/v2/invitations/${invitation.code}/accept\").andIsBadRequest\n    }\n  }\n\n  @Test\n  fun testDeleteInvitation() {\n    val organization = prepareTestOrganization()\n\n    val invitation = invitationService.create(\n      CreateOrganizationInvitationParams(\n        organization = organization,\n        type = OrganizationRoleType.MEMBER\n      )\n    )\n    performAuthDelete(\"/v2/invitations/${invitation.id!!}\", null).andIsOk\n    assertThatThrownBy { invitationService.getInvitation(invitation.code) }\n      .isInstanceOf(BadRequestException::class.java)\n  }\n\n  private fun prepareTestOrganization(): Organization {\n    val helloUser = dbPopulator.createUserIfNotExists(TEST_USERNAME)\n    val organization = organizationService.create(dummyDto, helloUser)\n    loginAsUser(helloUser.username)\n    return organization\n  }\n\n  @Test\n  fun `stores name and e-mail with invitation`() {\n    val organization = prepareTestOrganization()\n\n    val code = inviteWithUserWithNameAndEmail(organization.id)\n    val invitation = invitationService.getInvitation(code)\n    assertThat(invitation.name).isEqualTo(INVITED_NAME)\n    assertThat(invitation.email).isEqualTo(INVITED_EMAIL)\n  }\n\n  @Test\n  fun `sends invitation e-mail`() {\n    val organization = prepareTestOrganization()\n\n    val code = inviteWithUserWithNameAndEmail(organization.id)\n    emailTestUtil.verifyEmailSent()\n\n    val messageContent = emailTestUtil.messageContents.single()\n    assertThat(messageContent).contains(code)\n    assertThat(messageContent).contains(\"http://localhost/\")\n    emailTestUtil.assertEmailTo.isEqualTo(INVITED_EMAIL)\n  }\n\n  @Test\n  fun `e-mail is sanitized`() {\n    dummyDto.name = \"Test org <a href='https://evil.local'>test</a>\"\n    val organization = prepareTestOrganization()\n\n    inviteWithUserWithNameAndEmail(organization.id)\n    emailTestUtil.verifyEmailSent()\n\n    val messageContent = emailTestUtil.messageContents.single()\n    assertThat(messageContent).doesNotContain(\"<a href='https://evil.local\")\n    assertThat(messageContent).contains(\"&lt;a href=&#39;https://evil.local\")\n  }\n\n  @Test\n  fun `does not invite when email already invited`() {\n    val organization = prepareTestOrganization()\n    performCreateInvitation(organization.id).andIsOk\n    performCreateInvitation(organization.id).andIsBadRequest\n  }\n\n  @Test\n  fun `does not invite when email already member`() {\n    val organization = prepareTestOrganization()\n    performAuthPut(\n      \"/v2/organizations/${organization.id}/invite\",\n      OrganizationInviteUserDto(\n        roleType = OrganizationRoleType.MEMBER,\n        email = TEST_USERNAME,\n        name = INVITED_NAME\n      )\n    ).andIsBadRequest\n  }\n\n  private fun inviteWithUserWithNameAndEmail(organizationId: Long): String {\n    val invitationJson = performCreateInvitation(organizationId).andIsOk.andGetContentAsString\n\n    return jacksonObjectMapper().readValue<Map<String, Any>>(invitationJson)[\"code\"] as String\n  }\n\n  private fun performCreateInvitation(organizationId: Long) = performAuthPut(\n    \"/v2/organizations/$organizationId/invite\",\n    OrganizationInviteUserDto(\n      roleType = OrganizationRoleType.MEMBER,\n      email = INVITED_EMAIL,\n      name = INVITED_NAME\n    )\n  )\n}\n", "package io.tolgee.component.email\n\nimport io.tolgee.component.FrontendUrlProvider\nimport io.tolgee.dtos.misc.EmailParams\nimport io.tolgee.model.Invitation\nimport org.springframework.stereotype.Component\nimport org.springframework.web.util.HtmlUtils\n\n@Component\nclass InvitationEmailSender(\n  private val tolgeeEmailSender: TolgeeEmailSender,\n  private val frontendUrlProvider: FrontendUrlProvider\n) {\n  fun sendInvitation(\n    invitation: Invitation,\n  ) {\n    val email = invitation.email\n    if (email.isNullOrBlank()) {\n      return\n    }\n    val url = getInvitationAcceptUrl(invitation.code)\n    val params = EmailParams(\n      to = email,\n      subject = \"Invitation to Tolgee\",\n      text = \"\"\"\n        Hello! \ud83d\udc4b<br/><br/>\n        Good news. ${getInvitationSentence(invitation)}<br/><br/>\n        \n        To accept the invitation, <b>follow this link</b>:<br/>\n        <a href=\"$url\">$url</a><br/><br/>\n        \n        Regards,<br/>\n        Tolgee<br/><br/>\n      \"\"\".trimIndent()\n    )\n    tolgeeEmailSender.sendEmail(params)\n  }\n\n  private fun getInvitationSentence(invitation: Invitation): Any {\n    val projectNameOrNull = invitation.permission?.project?.name\n    val organizationNameOrNull = invitation.organizationRole?.organization?.name\n    val toWhat = when {\n      projectNameOrNull != null -> \"project\"\n      organizationNameOrNull != null -> \"organization\"\n      else -> throw IllegalStateException(\"No organization or project!\")\n    }\n\n    val name = projectNameOrNull ?: organizationNameOrNull\n      ?: throw IllegalStateException(\"Both the organization and the project are null??\")\n\n    val escapedName = HtmlUtils.htmlEscape(name)\n    return \"You have been invited to $toWhat $escapedName in Tolgee.\"\n  }\n\n  private fun getInvitationAcceptUrl(code: String): String {\n    return \"${frontendUrlProvider.url}/accept_invitation/$code\"\n  }\n}\n"], "filenames": ["backend/app/src/test/kotlin/io/tolgee/api/v2/controllers/organizationController/OrganizationControllerInvitingTest.kt", "backend/data/src/main/kotlin/io/tolgee/component/email/InvitationEmailSender.kt"], "buggy_code_start_loc": [175, 6], "buggy_code_end_loc": [175, 50], "fixing_code_start_loc": [176, 7], "fixing_code_end_loc": [189, 53], "type": "CWE-20", "message": "Tolgee is an open-source localization platform. Due to lack of validation field - Org Name, bad actor can send emails with HTML injected code to the victims. Registered users can inject HTML into unsanitized emails from the Tolgee instance to other users. This unsanitized HTML ends up in invitation emails which appear as legitimate org invitations. Bad actors may direct users to malicious website or execute javascript in the context of the users browser. This vulnerability has been addressed in version 3.29.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-41316", "sourceIdentifier": "security-advisories@github.com", "published": "2023-09-07T20:15:07.677", "lastModified": "2023-09-13T14:36:54.837", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tolgee is an open-source localization platform. Due to lack of validation field - Org Name, bad actor can send emails with HTML injected code to the victims. Registered users can inject HTML into unsanitized emails from the Tolgee instance to other users. This unsanitized HTML ends up in invitation emails which appear as legitimate org invitations. Bad actors may direct users to malicious website or execute javascript in the context of the users browser. This vulnerability has been addressed in version 3.29.2. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Tolgee es una plataforma de localizaci\u00f3n de c\u00f3digo abierto. Debido a la falta del campo de validaci\u00f3n - Nombre de la Organizaci\u00f3n, el actor malicioso puede enviar correos electr\u00f3nicos con c\u00f3digo HTML inyectado a las v\u00edctimas. Los usuarios registrados pueden inyectar HTML en correos electr\u00f3nicos no sanitizados desde la instancia de Tolgee a otros usuarios. Este HTML no sanitizado termina en correos electr\u00f3nicos de invitaci\u00f3n que aparecen como invitaciones de organizaciones leg\u00edtimas. Los actores maliciosos pueden dirigir a los usuarios a sitios web maliciosos o ejecutar JavaScript en el contexto del navegador del usuario. Esta vulnerabilidad se ha solucionado en la versi\u00f3n 3.29.2. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tolgee:tolgee:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.29.2", "matchCriteriaId": "BCE2D82E-9E18-41BE-B995-A87D5BCF9356"}]}]}], "references": [{"url": "https://github.com/tolgee/tolgee-platform/commit/bab718b1c9b3e90327bfb10d27b9799996e5c35b", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tolgee/tolgee-platform/security/advisories/GHSA-gx3w-rwh5-w5cg", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/tolgee/tolgee-platform/commit/bab718b1c9b3e90327bfb10d27b9799996e5c35b"}}