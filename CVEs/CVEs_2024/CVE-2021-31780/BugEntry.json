{"buggy_code": ["<?php\nApp::uses('AppModel', 'Model');\nApp::uses('TmpFileTool', 'Tools');\n\n/**\n * @property Event $Event\n * @property SharingGroup $SharingGroup\n * @property Attribute $Attribute\n */\nclass MispObject extends AppModel\n{\n    public $name = 'Object';\n    public $alias = 'Object';\n\n    public $useTable = 'objects';\n\n    public $actsAs = array(\n            'Containable',\n            'SysLogLogable.SysLogLogable' => array( // TODO Audit, logable\n                'userModel' => 'User',\n                'userKey' => 'user_id',\n                'change' => 'full'),\n    );\n\n    public $belongsTo = array(\n        'Event' => array(\n            'className' => 'Event',\n            'foreignKey' => 'event_id'\n        ),\n        'SharingGroup' => array(\n            'className' => 'SharingGroup',\n            'foreignKey' => 'sharing_group_id'\n        ),\n        'ObjectTemplate' => array(\n            'className' => 'ObjectTemplate',\n            'foreignKey' => false,\n            'dependent' => false,\n            'conditions' => array('MispObject.template_uuid' => 'ObjectTemplate.uuid')\n        )\n    );\n\n    public $hasMany = array(\n        'Attribute' => array(\n            'className' => 'Attribute',\n            'dependent' => true,\n        ),\n        'ObjectReference' => array(\n            'className' => 'ObjectReference',\n            'dependent' => true,\n            'foreignKey' => 'object_id'\n        ),\n    );\n\n    public $validFormats = array(\n        'json' => array('json', 'JsonExport', 'json')\n    );\n\n    public $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' Sharing Group', 5 => 'Inherit');\n\n    public $validate = array(\n        'uuid' => array(\n            'uuid' => array(\n                'rule' => 'uuid',\n                'message' => 'Please provide a valid RFC 4122 UUID'\n            ),\n            'unique' => array(\n                'rule' => 'isUnique',\n                'message' => 'The UUID provided is not unique',\n                'required' => 'create'\n            ),\n        ),\n        'first_seen' => array(\n            'rule' => array('datetimeOrNull'),\n            'required' => false,\n            'message' => array('Invalid ISO 8601 format')\n        ),\n        'last_seen' => array(\n            'rule' => array('datetimeOrNull'),\n            'required' => false,\n            'message' => array('Invalid ISO 8601 format')\n        )\n    );\n\n    private $__objectDuplicationCheckCache = [];\n\n    public function buildFilterConditions(&$params)\n    {\n        $conditions = [];\n        if (isset($params['wildcard'])) {\n            $temp = array();\n            $options = array(\n                'filter' => 'wildcard',\n                'scope' => 'Object',\n                'pop' => false,\n                'context' => 'Event'\n            );\n            $conditions['AND'][] = array('OR' => $this->Event->set_filter_wildcard_attributes($params, $temp, $options));\n        } else {\n            if (isset($params['ignore'])) {\n                $params['to_ids'] = array(0, 1);\n                $params['published'] = array(0, 1);\n            }\n            $simple_params = array(\n                'Object' => array(\n                    'object_name' => array('function' => 'set_filter_object_name'),\n                    'object_template_uuid' => array('function' => 'set_filter_object_template_uuid'),\n                    'object_template_version' => array('function' => 'set_filter_object_template_version'),\n                    'deleted' => array('function' => 'set_filter_deleted')\n                ),\n                'Event' => array(\n                    'eventid' => array('function' => 'set_filter_eventid'),\n                    'eventinfo' => array('function' => 'set_filter_eventinfo'),\n                    'ignore' => array('function' => 'set_filter_ignore'),\n                    'from' => array('function' => 'set_filter_timestamp'),\n                    'to' => array('function' => 'set_filter_timestamp'),\n                    'date' => array('function' => 'set_filter_date'),\n                    'tags' => array('function' => 'set_filter_tags'),\n                    'last' => array('function' => 'set_filter_timestamp', 'pop' => true),\n                    'timestamp' => array('function' => 'set_filter_timestamp', 'pop' => true),\n                    'event_timestamp' => array('function' => 'set_filter_timestamp', 'pop' => true),\n                    'publish_timestamp' => array('function' => 'set_filter_timestamp'),\n                    'org' => array('function' => 'set_filter_org'),\n                    'uuid' => array('function' => 'set_filter_uuid'),\n                    'published' => array('function' => 'set_filter_published')\n                ),\n                'Attribute' => array(\n                    'value' => array('function' => 'set_filter_value'),\n                    'category' => array('function' => 'set_filter_simple_attribute'),\n                    'type' => array('function' => 'set_filter_simple_attribute'),\n                    'object_relation' => array('function' => 'set_filter_simple_attribute'),\n                    'tags' => array('function' => 'set_filter_tags', 'pop' => true),\n                    'uuid' => array('function' => 'set_filter_uuid'),\n                    'deleted' => array('function' => 'set_filter_deleted'),\n                    'timestamp' => array('function' => 'set_filter_timestamp'),\n                    'attribute_timestamp' => array('function' => 'set_filter_timestamp'),\n                    'first_seen' => array('function' => 'set_filter_seen'),\n                    'last_seen' => array('function' => 'set_filter_seen'),\n                    'to_ids' => array('function' => 'set_filter_to_ids'),\n                    'comment' => array('function' => 'set_filter_comment')\n                )\n            );\n            foreach ($params as $param => $paramData) {\n                foreach ($simple_params as $scope => $simple_param_scoped) {\n                    if (isset($simple_param_scoped[$param]) && isset($params[$param]) && $params[$param] !== false) {\n                        $options = array(\n                            'filter' => $param,\n                            'scope' => $scope,\n                            'pop' => !empty($simple_param_scoped[$param]['pop']),\n                            'context' => 'Attribute'\n                        );\n                        if ($scope === 'Attribute') {\n                            $subQueryOptions = array(\n                                'fields' => ['Attribute.object_id'],\n                                'group' => 'Attribute.object_id',\n                                'recursive' => -1,\n                                'conditions' => array(\n                                    'Attribute.object_id NOT' => 0,\n                                    $this->Event->{$simple_param_scoped[$param]['function']}($params, $conditions, $options)\n                                )\n                            );\n                            $conditions['AND'][] = $this->subQueryGenerator($this->Attribute, $subQueryOptions, 'Object.id');\n                        } else {\n                            $conditions = $this->Event->{$simple_param_scoped[$param]['function']}($params, $conditions, $options);\n                        }\n                    }\n                }\n            }\n        }\n        return $conditions;\n    }\n\n     // check whether the variable is null or datetime\n     public function datetimeOrNull($fields)\n     {\n         $k = array_keys($fields)[0];\n         $seen = $fields[$k];\n         try {\n             new DateTime($seen);\n             $returnValue = true;\n         } catch (Exception $e) {\n             $returnValue = false;\n         }\n         return $returnValue || is_null($seen);\n     }\n\n    public function afterFind($results, $primary = false)\n    {\n        foreach ($results as $k => $v) {\n            $results[$k] = $this->Attribute->UTCToISODatetime($results[$k], $this->alias);\n        }\n        return $results;\n    }\n\n    public function beforeSave($options = array()) {\n        $this->data = $this->Attribute->ISODatetimeToUTC($this->data, $this->alias);\n    }\n\n    public function beforeValidate($options = array())\n    {\n        parent::beforeValidate();\n        if (empty($this->data[$this->alias]['comment'])) {\n            $this->data[$this->alias]['comment'] = \"\";\n        }\n        // generate UUID if it doesn't exist\n        if (empty($this->data[$this->alias]['uuid'])) {\n            $this->data[$this->alias]['uuid'] = CakeText::uuid();\n        }\n        // generate timestamp if it doesn't exist\n        if (empty($this->data[$this->alias]['timestamp'])) {\n            $date = new DateTime();\n            $this->data[$this->alias]['timestamp'] = $date->getTimestamp();\n        }\n        // parse first_seen different formats\n        if (isset($this->data[$this->alias]['first_seen'])) {\n            $this->data[$this->alias]['first_seen'] = $this->data[$this->alias]['first_seen'] === '' ? null : $this->data[$this->alias]['first_seen'];\n        }\n        // parse last_seen different formats\n        if (isset($this->data[$this->alias]['last_seen'])) {\n            $this->data[$this->alias]['last_seen'] = $this->data[$this->alias]['last_seen'] === '' ? null : $this->data[$this->alias]['last_seen'];\n        }\n        if (empty($this->data[$this->alias]['template_version'])) {\n            $this->data[$this->alias]['template_version'] = 1;\n        }\n        if (isset($this->data[$this->alias]['deleted']) && empty($this->data[$this->alias]['deleted'])) {\n            $this->data[$this->alias]['deleted'] = 0;\n        }\n        if (!isset($this->data[$this->alias]['distribution']) || $this->data['Object']['distribution'] != 4) {\n            $this->data['Object']['sharing_group_id'] = 0;\n        }\n        if (!isset($this->data[$this->alias]['distribution'])) {\n            $this->data['Object']['distribution'] = 5;\n        }\n        return true;\n    }\n\n    public function afterSave($created, $options = array())\n    {\n        $pubToZmq = Configure::read('Plugin.ZeroMQ_enable') &&\n            Configure::read('Plugin.ZeroMQ_object_notifications_enable') &&\n            empty($this->data['Object']['skip_zmq']);\n        $kafkaTopic = Configure::read('Plugin.Kafka_object_notifications_topic');\n        $pubToKafka = Configure::read('Plugin.Kafka_enable') &&\n            Configure::read('Plugin.Kafka_object_notifications_enable') &&\n            !empty($kafkaTopic) &&\n            empty($this->data['Object']['skip_kafka']);\n        if ($pubToZmq || $pubToKafka) {\n            $object = $this->find('first', array(\n                'conditions' => array('Object.id' => $this->id),\n                'recursive' => -1\n            ));\n            $action = $created ? 'add' : 'edit';\n            if (!empty($this->data['Object']['deleted'])) {\n                $action = 'soft-delete';\n            }\n            if ($pubToZmq) {\n                $pubSubTool = $this->getPubSubTool();\n                $pubSubTool->object_save($object, $action);\n            }\n            if ($pubToKafka) {\n                $kafkaPubTool = $this->getKafkaPubTool();\n                $kafkaPubTool->publishJson($kafkaTopic, $object, $action);\n            }\n        }\n        return true;\n    }\n\n    public function beforeDelete($cascade = true)\n    {\n        if (!empty($this->data['Object']['id'])) {\n            $pubToZmq = Configure::read('Plugin.ZeroMQ_enable') && Configure::read('Plugin.ZeroMQ_object_notifications_enable');\n            $kafkaTopic = Configure::read('Plugin.Kafka_object_notifications_topic');\n            $pubToKafka = Configure::read('Plugin.Kafka_enable') && Configure::read('Plugin.Kafka_object_notifications_enable') && !empty($kafkaTopic);\n            if ($pubToZmq || $pubToKafka) {\n                $object = $this->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('Object.id' => $this->data['Object']['id'])\n                ));\n                if ($pubToZmq) {\n                    $pubSubTool = $this->getPubSubTool();\n                    $pubSubTool->object_save($object, 'delete');\n                }\n                if ($pubToKafka) {\n                    $kafkaPubTool = $this->getKafkaPubTool();\n                    $kafkaPubTool->publishJson($kafkaTopic, $object, 'delete');\n                }\n            }\n        }\n    }\n\n    public function afterDelete()\n    {\n        if (!empty($this->data[$this->alias]['id'])) {\n            $this->ObjectReference->deleteAll(\n                array(\n                    'ObjectReference.referenced_type' => 1,\n                    'ObjectReference.referenced_id' => $this->data[$this->alias]['id'],\n                ),\n                false\n            );\n        }\n    }\n\n    public function checkForDuplicateObjects($object, $eventId)\n    {\n        $newObjectAttributes = array();\n        $existingObjectAttributes = array();\n        if (isset($object['Object']['Attribute'])) {\n            $attributeArray = $object['Object']['Attribute'];\n        } else {\n            $attributeArray = $object['Attribute'];\n        }\n        foreach ($attributeArray as $attribute) {\n            if ($attribute['type'] === 'malware-sample') {\n                if (strpos($attribute['value'], '|') === false && !empty($attribute['data'])) {\n                    $attribute['value'] = $attribute['value'] . '|' . md5(base64_decode($attribute['data']));\n                }\n            }\n            $newObjectAttributes[] = hash(\n                'sha256',\n                $attribute['object_relation'] . $attribute['category'] . $attribute['type'] . $this->data['Attribute']['value'] = $this->Attribute->modifyBeforeValidation($attribute['type'], $attribute['value'])\n            );\n        }\n        $newObjectAttributeCount = count($newObjectAttributes);\n        if (!empty($this->__objectDuplicationCheckCache['new'][$object['Object']['template_uuid']])) {\n            foreach ($this->__objectDuplicationCheckCache['new'][$object['Object']['template_uuid']] as $previousNewObject) {\n                if ($newObjectAttributeCount === count($previousNewObject)) {\n                    if (empty(array_diff($previousNewObject, $newObjectAttributes))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        $this->__objectDuplicationCheckCache['new'][$object['Object']['template_uuid']][] = $newObjectAttributes;\n\n        if (!isset($this->__objectDuplicationCheckCache[$object['Object']['template_uuid']])) {\n            $this->__objectDuplicationCheckCache[$object['Object']['template_uuid']] = $this->find('all', array(\n                'recursive' => -1,\n                'contain' => array(\n                    'Attribute' => array(\n                        'fields' => array('value', 'type', 'category', 'object_relation'),\n                        'conditions' => array('Attribute.deleted' => 0)\n                    )\n                ),\n                'fields' => array('template_uuid'),\n                'conditions' => array('template_uuid' => $object['Object']['template_uuid'], 'Object.deleted' => 0, 'event_id' => $eventId)\n            ));\n        }\n        $oldObjects = array();\n        foreach ($this->__objectDuplicationCheckCache[$object['Object']['template_uuid']] as $k => $existingObject) {\n            $temp = array();\n            if (!empty($existingObject['Attribute']) && $newObjectAttributeCount == count($existingObject['Attribute'])) {\n                foreach ($existingObject['Attribute'] as $existingAttribute) {\n                    $temp[] = hash(\n                        'sha256',\n                        $existingAttribute['object_relation'] . $existingAttribute['category'] . $existingAttribute['type'] . $existingAttribute['value']\n                    );\n                }\n                if (empty(array_diff($temp, $newObjectAttributes))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public function saveObject($object, $eventId, $template = false, $user, $errorBehaviour = 'drop', $breakOnDuplicate = false)\n    {\n        if ($breakOnDuplicate) {\n            $duplicate = $this->checkForDuplicateObjects($object, $eventId);\n            if ($duplicate) {\n                return array('value' => array('Duplicate object found. Since breakOnDuplicate is set the object will not be added.'));\n            }\n        }\n        $this->create();\n        $templateFields = array(\n            'name' => 'name',\n            'meta-category' => 'meta-category',\n            'description' => 'description',\n            'template_version' => 'version',\n            'template_uuid' => 'uuid'\n        );\n        if ($template) {\n            foreach ($templateFields as $k => $v) {\n                $object['Object'][$k] = $template['ObjectTemplate'][$v];\n            }\n        } else {\n            foreach ($templateFields as $k => $v) {\n                if (!isset($object['Object'][$k])) {\n                    return array('template' => array(__('No valid template found and object lacking template information. (%s)', $k)));\n                }\n            }\n        }\n        $object['Object']['event_id'] = $eventId;\n        $result = false;\n        if ($this->save($object)) {\n            $result = $this->id;\n            foreach ($object['Attribute'] as $k => $attribute) {\n                $object['Attribute'][$k]['object_id'] = $this->id;\n                if (\n                    (!array_key_exists('first_seen', $object['Attribute'][$k]) || is_null($object['Attribute'][$k]['first_seen'])) &&\n                    (array_key_exists('first_seen', $object['Object']) && !is_null($object['Object']['first_seen']))\n                ) {\n                    $object['Attribute'][$k]['first_seen'] = $object['Object']['first_seen'];\n                }\n                if (\n                    (!array_key_exists('last_seen', $object['Attribute'][$k]) || is_null($object['Attribute'][$k]['last_seen'])) &&\n                    (array_key_exists('last_seen', $object['Object']) &&  !is_null($object['Object']['last_seen']))\n                ) {\n                    $object['Attribute'][$k]['last_seen'] = $object['Object']['last_seen'];\n                }\n            }\n            $this->Attribute->saveAttributes($object['Attribute'], $user);\n        } else {\n            $result = $this->validationErrors;\n        }\n        return $result;\n    }\n\n    public function buildConditions(array $user)\n    {\n        if ($user['Role']['perm_site_admin']) {\n            return [];\n        }\n\n        $sgids = $this->Event->cacheSgids($user, true);\n        return [\n            'AND' => [\n                'OR' => [\n                    'Event.org_id' => $user['org_id'], // if event is owned by current user org, allow access to all objects\n                    'AND' => [\n                        $this->Event->createEventConditions($user),\n                        'OR' => [\n                            'Object.distribution' => array(1, 2, 3, 5),\n                            'AND' => [\n                                'Object.distribution' => 4,\n                                'Object.sharing_group_id' => $sgids,\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ];\n    }\n\n    public function fetchObjectSimple($user, $options = array())\n    {\n        $params = array(\n            'conditions' => $this->buildConditions($user),\n            'fields' => array(),\n            'recursive' => -1\n        );\n        if (isset($options['conditions'])) {\n            $params['conditions']['AND'][] = $options['conditions'];\n        }\n        if (isset($options['fields'])) {\n            $params['fields'] = $options['fields'];\n        }\n        $results = $this->find('all', array(\n            'conditions' => $params['conditions'],\n            'recursive' => -1,\n            'fields' => $params['fields'],\n            'contain' => array('Event' => array('distribution', 'id', 'user_id', 'orgc_id', 'org_id')),\n            'sort' => false\n        ));\n        return $results;\n    }\n\n    // Method that fetches all objects\n    // very flexible, it's basically a replacement for find, with the addition that it restricts access based on user\n    // options:\n    //     fields\n    //     contain\n    //     conditions\n    //     order\n    //     group\n    public function fetchObjects($user, $options = array())\n    {\n        $attributeConditions = array();\n        if (!$user['Role']['perm_site_admin']) {\n            $sgids = $this->Event->cacheSgids($user, true);\n            $attributeConditions = array(\n                'OR' => array(\n                    array(\n                        '(SELECT events.org_id FROM events WHERE events.id = Attribute.event_id)' => $user['org_id']\n                    ),\n                    array(\n                        'OR' => array(\n                            'Attribute.distribution' => array(1, 2, 3, 5),\n                            array(\n                                'Attribute.distribution' => 4,\n                                'Attribute.sharing_group_id' => $sgids,\n                            )\n                        )\n                    )\n                )\n            );\n        }\n        $params = array(\n            'conditions' => $this->buildConditions($user),\n            'recursive' => -1,\n            'contain' => array(\n                'Event' => array(\n                    'fields' => array('id', 'info', 'org_id', 'orgc_id'),\n                ),\n                'Attribute' => array(\n                    'conditions' => $attributeConditions,\n                    //'ShadowAttribute',\n                    'AttributeTag' => array(\n                        'Tag'\n                    )\n                )\n            ),\n        );\n        if (!empty($options['metadata'])) {\n            unset($params['contain']['Attribute']);\n        }\n        if (empty($options['metadata']) && empty($options['includeAllTags'])) {\n            $params['contain']['Attribute']['AttributeTag']['Tag']['conditions']['exportable'] = 1;\n        }\n        if (isset($options['contain'])) {\n            $params['contain'] = array_merge_recursive($params['contain'], $options['contain']);\n        } else {\n            $option['contain']['Event']['fields'] = array('id', 'info', 'org_id', 'orgc_id');\n        }\n        if (\n            empty($options['metadata']) &&\n            Configure::read('MISP.proposals_block_attributes') &&\n            isset($options['conditions']['AND']['Attribute.to_ids']) &&\n            $options['conditions']['AND']['Attribute.to_ids'] == 1\n        ) {\n            $this->Attribute->bindModel(array('hasMany' => array('ShadowAttribute' => array('foreignKey' => 'old_id'))));\n            $proposalRestriction =  array(\n                    'ShadowAttribute' => array(\n                            'conditions' => array(\n                                    'AND' => array(\n                                            'ShadowAttribute.deleted' => 0,\n                                            'OR' => array(\n                                                    'ShadowAttribute.proposal_to_delete' => 1,\n                                                    'ShadowAttribute.to_ids' => 0\n                                            )\n                                    )\n                            ),\n                            'fields' => array('ShadowAttribute.id')\n                    )\n            );\n            $params['contain'] = array_merge($params['contain']['Attribute'], $proposalRestriction);\n        }\n        if (isset($options['conditions'])) {\n            $params['conditions']['AND'][] = $options['conditions'];\n        }\n        if (isset($options['order'])) {\n            $params['order'] = $options['order'];\n        }\n        if (!isset($options['withAttachments'])) {\n            $options['withAttachments'] = false;\n        } else ($params['order'] = array());\n        if (!isset($options['enforceWarninglist'])) {\n            $options['enforceWarninglist'] = false;\n        }\n        if (empty($options['metadata']) && (!$user['Role']['perm_sync'] || !isset($options['deleted']) || !$options['deleted'])) {\n            $params['contain']['Attribute']['conditions']['AND']['Attribute.deleted'] = 0;\n        }\n        if (isset($options['group'])) {\n            $params['group'] = array_merge(array('Object.id'), $options['group']);\n        }\n        if (isset($options['limit'])) {\n            $params['limit'] = $options['limit'];\n            if (isset($options['page'])) {\n                $params['page'] = $options['page'];\n            }\n        }\n        $results = $this->find('all', $params);\n        if ($options['enforceWarninglist'] && !isset($this->Warninglist)) {\n            $this->Warninglist = ClassRegistry::init('Warninglist');\n        }\n        $results = array_values($results);\n        $proposals_block_attributes = Configure::read('MISP.proposals_block_attributes');\n        if (empty($options['metadata'])) {\n            foreach ($results as $key => $object) {\n                foreach ($object['Attribute'] as $key2 => $attribute) {\n                    if ($options['enforceWarninglist'] && !$this->Warninglist->filterWarninglistAttribute($attribute['Attribute'])) {\n                        unset($results[$key][$key2]);\n                        continue;\n                    }\n                    if ($proposals_block_attributes) {\n                        if (!empty($attribute['ShadowAttribute'])) {\n                            unset($results[$key][$key2]);\n                        } else {\n                            unset($results[$key][$key2]['ShadowAttribute']);\n                        }\n                    }\n                    if ($options['withAttachments']) {\n                        if ($this->Attribute->typeIsAttachment($attribute['type'])) {\n                            $encodedFile = $this->Attribute->base64EncodeAttachment($attribute);\n                            $results[$key]['Attribute'][$key2]['data'] = $encodedFile;\n                        }\n                    }\n                }\n            }\n        }\n        return $results;\n    }\n\n    /*\n     * Prepare the template form view's data, setting defaults, sorting elements\n     */\n    public function prepareTemplate($template, $request = array())\n    {\n        $temp = array();\n        usort($template['ObjectTemplateElement'], function ($a, $b) {\n            return $a['ui-priority'] < $b['ui-priority'];\n        });\n        $request_rearranged = array();\n        $template_object_elements = $template['ObjectTemplateElement'];\n        unset($template['ObjectTemplateElement']);\n        if (!empty($request['Attribute'])) {\n            foreach ($request['Attribute'] as $attribute) {\n                $request_rearranged[$attribute['object_relation']][] = $attribute;\n            }\n        }\n        foreach ($template_object_elements as $k => $v) {\n            if (empty($request_rearranged[$v['object_relation']])) {\n                if (isset($this->Event->Attribute->typeDefinitions[$v['type']])) {\n                    $v['default_category'] = $this->Event->Attribute->typeDefinitions[$v['type']]['default_category'];\n                    $v['to_ids'] = $this->Event->Attribute->typeDefinitions[$v['type']]['to_ids'];\n                    if (empty($v['categories'])) {\n                        $v['categories'] = array();\n                        foreach ($this->Event->Attribute->categoryDefinitions as $catk => $catv) {\n                            if (in_array($v['type'], $catv['types'])) {\n                                $v['categories'][] = $catk;\n                            }\n                        }\n                    }\n                    $template['ObjectTemplateElement'][] = $v;\n                } else {\n                    $template['warnings'][] = 'Missing attribute type \"' . $v['type'] . '\" found. Omitted template element (\"' . $template_object_elements[$k]['object_relation'] . '\") that would not pass validation due to this.';\n                }\n            } else {\n                foreach ($request_rearranged[$v['object_relation']] as $request_item) {\n                    if (isset($this->Event->Attribute->typeDefinitions[$v['type']])) {\n                        $v['default_category'] = $request_item['category'];\n                        $v['value'] = $request_item['value'];\n                        $v['to_ids'] = $request_item['to_ids'];\n                        $v['comment'] = $request_item['comment'];\n                        if (!empty($request_item['uuid'])) {\n                            $v['uuid'] = $request_item['uuid'];\n                        }\n                        if (isset($request_item['data'])) {\n                            $v['data'] = $request_item['data'];\n                        }\n                        if (empty($v['categories'])) {\n                            $v['categories'] = array();\n                            foreach ($this->Event->Attribute->categoryDefinitions as $catk => $catv) {\n                                if (in_array($v['type'], $catv['types'])) {\n                                    $v['categories'][] = $catk;\n                                }\n                            }\n                        }\n                        $v['disable_correlation'] = $request_item['disable_correlation'];\n                        $template['ObjectTemplateElement'][] = $v;\n                        unset($v['uuid']); // force creating a new attribute if template element entry gets reused\n                    } else {\n                        $template['warnings'][] = 'Missing attribute type \"' . $v['type'] . '\" found. Omitted template element (\"' . $template_object_elements[$k]['object_relation'] . '\") that would not pass validation due to this.';\n                    }\n                }\n            }\n        }\n        return $template;\n    }\n\n    /**\n     * Clean the attribute list up from artifacts introduced by the object form\n     * @param array $attributes\n     * @return string|array\n     */\n    public function attributeCleanup($attributes)\n    {\n        if (empty($attributes['Attribute'])) {\n            return $attributes;\n        }\n        foreach ($attributes['Attribute'] as $k => $attribute) {\n            if (isset($attribute['save']) && $attribute['save'] == 0) {\n                unset($attributes['Attribute'][$k]);\n                continue;\n            }\n            if (isset($attribute['value_select'])) {\n                if ($attribute['value_select'] !== 'Enter value manually') {\n                    $attributes['Attribute'][$k]['value'] = $attribute['value_select'];\n                }\n                unset($attributes['Attribute'][$k]['value_select']);\n            }\n            if (isset($attribute['Attachment'])) {\n                // Check if there were problems with the file upload\n                // only keep the last part of the filename, this should prevent directory attacks\n                $filename = basename($attribute['Attachment']['name']);\n                $tmpfile = new File($attribute['Attachment']['tmp_name']);\n                if ((isset($attribute['Attachment']['error']) && $attribute['Attachment']['error'] == 0) ||\n                    (!empty($attribute['Attachment']['tmp_name']) && $attribute['Attachment']['tmp_name'] != 'none')\n                ) {\n                    if (!is_uploaded_file($tmpfile->path)) {\n                        throw new InternalErrorException('PHP says file was not uploaded. Are you attacking me?');\n                    }\n                } else {\n                    return 'Issues with the file attachment for the ' . $attribute['object_relation'] . ' attribute. The error code returned is ' . $attribute['Attachment']['error'];\n                }\n                $attributes['Attribute'][$k]['value'] = $attribute['Attachment']['name'];\n                unset($attributes['Attribute'][$k]['Attachment']);\n                $attributes['Attribute'][$k]['encrypt'] = $attribute['type'] == 'malware-sample' ? 1 : 0;\n                $attributes['Attribute'][$k]['data'] = base64_encode($tmpfile->read());\n                $tmpfile->delete();\n                $tmpfile->close();\n            }\n            if (!isset($attributes['Attribute'][$k]['first_seen'])) {\n                $attributes['Attribute'][$k]['first_seen'] = null;\n            }\n            if (!isset($attributes['Attribute'][$k]['last_seen'])) {\n                $attributes['Attribute'][$k]['last_seen'] = null;\n            }\n            unset($attributes['Attribute'][$k]['save']);\n        }\n        return $attributes;\n    }\n\n    // Set Object's *-seen (and ObjectAttribute's *-seen and ObjectAttribute's value if requested) to the provided *-seen value\n    // Therefore, synchronizing the 3 values\n    public function syncObjectAndAttributeSeen($object, $forcedSeenOnElements, $applyOnAttribute=True) {\n        if (empty($forcedSeenOnElements)) {\n            return $object;\n        }\n        if (isset($forcedSeenOnElements['first_seen'])) {\n            $object['Object']['first_seen'] = $forcedSeenOnElements['first_seen'];\n        }\n        if (isset($forcedSeenOnElements['last_seen'])) {\n            $object['Object']['last_seen'] = $forcedSeenOnElements['last_seen'];\n        }\n        if ($applyOnAttribute) {\n            if (isset($object['Attribute'])) {\n                $attributes = $object['Attribute'];\n            } else {\n                $attributes = $this->find('first', array(\n                    'conditions' => array('id' => $object['Object']['id']),\n                    'contain' => array('Attribute')\n                ))['Attribute'];\n            }\n            foreach($attributes as $i => $attribute) {\n                if (isset($forcedSeenOnElements['first_seen'])) {\n                    $attributes[$i]['first_seen'] = $forcedSeenOnElements['first_seen'];\n                    if ($attribute['object_relation'] == 'first-seen') {\n                        $attributes[$i]['value'] = $forcedSeenOnElements['first_seen'];\n                    }\n                } elseif (isset($forcedSeenOnElements['last_seen'])) {\n                    $attributes[$i]['last_seen'] = $forcedSeenOnElements['last_seen'];\n                    if ($attribute['object_relation'] == 'last-seen') {\n                        $attributes[$i]['value'] = $forcedSeenOnElements['last_seen'];\n                    }\n                }\n            }\n            $object['Attribute'] = $attributes;\n        }\n        return $object;\n    }\n\n    public function deltaMerge($object, $objectToSave, $onlyAddNewAttribute=false, $user)\n    {\n        if (!isset($objectToSave['Object'])) {\n            $dataToBackup = array('ObjectReferences', 'Attribute', 'ShadowAttribute');\n            $backup = array();\n            foreach ($dataToBackup as $dtb) {\n                if (isset($objectToSave[$dtb])) {\n                    $backup[$dtb] = $objectToSave[$dtb];\n                    unset($objectToSave[$dtb]);\n                }\n            }\n            $objectToSave = array('Object' => $objectToSave);\n            foreach ($dataToBackup as $dtb) {\n                if (isset($backup[$dtb])) {\n                    $objectToSave[$dtb] = $backup[$dtb];\n                }\n            }\n            unset($dataToBackup);\n        }\n        if (isset($objectToSave['Object']['comment'])) {\n            $object['Object']['comment'] = $objectToSave['Object']['comment'];\n        }\n        if (isset($objectToSave['Object']['template_version'])) {\n            $object['Object']['template_version'] = $objectToSave['Object']['template_version'];\n        }\n        if (isset($objectToSave['Object']['distribution'])) {\n            $object['Object']['distribution'] = $objectToSave['Object']['distribution'];\n            if ($object['Object']['distribution'] == 4) {\n                $object['Object']['sharing_group_id'] = $objectToSave['Object']['sharing_group_id'];\n            }\n        }\n        $date = new DateTime();\n        $object['Object']['timestamp'] = $date->getTimestamp();\n        $forcedSeenOnElements = array();\n        if (isset($objectToSave['Object']['first_seen'])) {\n            $forcedSeenOnElements['first_seen'] = $objectToSave['Object']['first_seen'];\n        }\n        if (isset($objectToSave['Object']['last_seen'])) {\n            $forcedSeenOnElements['last_seen'] = $objectToSave['Object']['last_seen'];\n        }\n        $object = $this->syncObjectAndAttributeSeen($object, $forcedSeenOnElements, false);\n        $saveResult = $this->save($object);\n        if ($saveResult === false) {\n            return $this->validationErrors;\n        }\n\n        if (!$onlyAddNewAttribute) {\n            $checkFields = array('category', 'value', 'to_ids', 'distribution', 'sharing_group_id', 'comment', 'disable_correlation', 'first_seen', 'last_seen');\n            if (!empty($objectToSave['Attribute'])) {\n                foreach ($objectToSave['Attribute'] as $newKey => $newAttribute) {\n                    foreach ($object['Attribute'] as $origKey => $originalAttribute) {\n                        if (!empty($newAttribute['uuid'])) {\n                            if ($newAttribute['uuid'] == $originalAttribute['uuid']) {\n                                $different = false;\n                                foreach ($checkFields as $f) {\n                                    if ($f == 'sharing_group_id' && empty($newAttribute[$f])) {\n                                        $newAttribute[$f] = 0;\n                                    }\n                                    if (isset($newAttribute[$f]) && $this->attributeValueDifferent($originalAttribute[$f], $newAttribute[$f], $f)) {\n                                        $different = true;\n                                    }\n                                }\n                                if ($different) {\n                                    $newAttribute['id'] = $originalAttribute['id'];\n                                    $newAttribute['event_id'] = $object['Object']['event_id'];\n                                    $newAttribute['object_id'] = $object['Object']['id'];\n                                    $newAttribute['timestamp'] = $date->getTimestamp();\n                                    $result = $this->Event->Attribute->save(array('Attribute' => $newAttribute), array('fieldList' => $this->Attribute->editableFields));\n                                    if ($result) {\n                                        $this->Event->Attribute->AttributeTag->handleAttributeTags($user, $newAttribute, $newAttribute['event_id'], $capture=true);\n                                    }\n                                }\n                                unset($object['Attribute'][$origKey]);\n                                continue 2;\n                            }\n                        }\n                    }\n                    $this->Event->Attribute->create();\n                    $newAttribute['event_id'] = $object['Object']['event_id'];\n                    $newAttribute['object_id'] = $object['Object']['id'];\n                    // Set seen of object at attribute level\n                    if (isset($forcedSeenOnElements['first_seen'])) {\n                        $newAttribute['first_seen'] = empty($newAttribute['first_seen']) ? $forcedSeenOnElements['first_seen'] : $newAttribute['first_seen'];\n                        if ($newAttribute['object_relation'] == 'first-seen') {\n                            $newAttribute['value'] = $forcedSeenOnElements['first_seen'];\n                        }\n                    }\n                    if (isset($forcedSeenOnElements['last_seen'])) {\n                        $newAttribute['last_seen'] = empty($newAttribute['last_seen']) ? $forcedSeenOnElements['last_seen'] : $newAttribute['last_seen'];\n                        if ($newAttribute['object_relation'] == 'last-seen') {\n                            $newAttribute['value'] = $forcedSeenOnElements['last_seen'];\n                        }\n                    }\n                    if (!isset($newAttribute['distribution'])) {\n                        $newAttribute['distribution'] = Configure::read('MISP.default_attribute_distribution');\n                        if ($newAttribute['distribution'] == 'event') {\n                            $newAttribute['distribution'] = 5;\n                        }\n                    }\n                    $saveResult = $this->Event->Attribute->save($newAttribute);\n                    if ($saveResult) {\n                        $newAttribute['id'] = $this->Event->Attribute->id;\n                        $this->Event->Attribute->AttributeTag->handleAttributeTags($user, $newAttribute, $newAttribute['event_id'], $capture=true);\n                    }\n                    $attributeArrays['add'][] = $newAttribute;\n                    unset($objectToSave['Attribute'][$newKey]);\n                }\n                foreach ($object['Attribute'] as $origKey => $originalAttribute) {\n                    $originalAttribute['deleted'] = 1;\n                    $this->Event->Attribute->save($originalAttribute, array('fieldList' => $this->Attribute->editableFields));\n                }\n            }\n        } else { // we only add the new attribute\n            $newAttribute = $objectToSave['Attribute'][0];\n            $this->Event->Attribute->create();\n            $newAttribute['event_id'] = $object['Object']['event_id'];\n            $newAttribute['object_id'] = $object['Object']['id'];\n            // Set seen of object at attribute level\n            if (\n                (!array_key_exists('first_seen', $newAttribute) || is_null($newAttribute['first_seen'])) &&\n                (!array_key_exists('first_seen', $object['Object']) && !is_null($object['Object']['first_seen']))\n            ) {\n                $newAttribute['first_seen'] = $object['Object']['first_seen'];\n            }\n            if (\n                (!array_key_exists('last_seen', $newAttribute) || is_null($newAttribute['last_seen'])) &&\n                (!array_key_exists('last_seen', $object['Object']) && !is_null($object['Object']['last_seen']))\n            ) {\n                $newAttribute['last_seen'] = $object['Object']['last_seen'];\n                $different = true;\n            }\n            if (!isset($newAttribute['distribution'])) {\n                $newAttribute['distribution'] = Configure::read('MISP.default_attribute_distribution');\n                if ($newAttribute['distribution'] == 'event') {\n                    $newAttribute['distribution'] = 5;\n                }\n            }\n            $saveAttributeResult = $this->Attribute->saveAttributes(array($newAttribute), $user);\n            return $saveAttributeResult ? $this->id : $this->validationErrors;\n        }\n        return $this->id;\n    }\n\n    public function captureObject($object, $eventId, $user, $log = false, $unpublish = true, $breakOnDuplicate = false)\n    {\n        $this->create();\n        if (!isset($object['Object'])) {\n            $object = array('Object' => $object);\n        }\n        if (!empty($object['Object']['breakOnDuplicate']) || $breakOnDuplicate) {\n            $duplicate = $this->checkForDuplicateObjects($object, $eventId);\n            if ($duplicate) {\n                $log->create();\n                $log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Object',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'add',\n                        'user_id' => $user['id'],\n                        'title' => 'Object dropped due to it being a duplicate and breakOnDuplicate being requested for Event ' . $eventId,\n                        'change' => 'Duplicate object found.',\n                ));\n                return true;\n            }\n        }\n        if (empty($log)) {\n            $log = ClassRegistry::init('Log');\n        }\n        if (isset($object['Object']['id'])) {\n            unset($object['Object']['id']);\n        }\n        $object['Object']['event_id'] = $eventId;\n        if ($this->save($object)) {\n            if ($unpublish) {\n                $this->Event->unpublishEvent($eventId);\n            }\n            $objectId = $this->id;\n            $partialFails = array();\n            if (!empty($object['Object']['Attribute'])) {\n                foreach ($object['Object']['Attribute'] as $attribute) {\n                    $this->Attribute->captureAttribute($attribute, $eventId, $user, $objectId, $log);\n                }\n            }\n            return true;\n        } else {\n            $log->create();\n            $log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Object',\n                    'model_id' => 0,\n                    'email' => $user['email'],\n                    'action' => 'add',\n                    'user_id' => $user['id'],\n                    'title' => 'Object dropped due to validation for Event ' . $eventId . ' failed: ' . $object['Object']['name'],\n                    'change' => 'Validation errors: ' . json_encode($this->validationErrors) . ' Full Object: ' . json_encode($object),\n            ));\n        }\n        return 'fail';\n    }\n\n    public function editObject($object, $eventId, $user, $log, $force = false, &$nothingToChange = false)\n    {\n        $object['event_id'] = $eventId;\n        if (isset($object['uuid'])) {\n            $existingObject = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Object.uuid' => $object['uuid'])\n            ));\n            if (empty($existingObject)) {\n                return $this->captureObject($object, $eventId, $user, $log);\n            } else {\n                if ($existingObject['Object']['event_id'] != $eventId) {\n                    $log->create();\n                    $log->save(array(\n                            'org' => $user['Organisation']['name'],\n                            'model' => 'Object',\n                            'model_id' => 0,\n                            'email' => $user['email'],\n                            'action' => 'edit',\n                            'user_id' => $user['id'],\n                            'title' => 'Duplicate UUID found in object',\n                            'change' => 'An object was blocked from being saved due to a duplicate UUID. The uuid in question is: ' . $object['uuid'] . '. This can also be due to the same object (or an object with the same UUID) existing in a different event)',\n                    ));\n                    return true;\n                }\n                if (isset($object['timestamp'])) {\n                    if ($force || $existingObject['Object']['timestamp'] >= $object['timestamp']) {\n                        $nothingToChange = true;\n                        return true;\n                    }\n                } else {\n                    $date = new DateTime();\n                    $object['timestamp'] = $date->getTimestamp();\n                }\n            }\n        } else {\n            return $this->captureObject($object, $eventId, $user, $log);\n        }\n        // At this point we have an existingObject that we can edit\n        $recoverFields = array(\n            'name',\n            'meta-category',\n            'description',\n            'template_uuid',\n            'template_version',\n            'distribution',\n            'sharing_group_id',\n            'comment',\n            'deleted'\n        );\n        foreach ($recoverFields as $rF) {\n            if (!isset($object[$rF])) {\n                $object[$rF] = $existingObject['Object'][$rF];\n            }\n        }\n        $object['id'] = $existingObject['Object']['id'];\n        $object['uuid'] = $existingObject['Object']['uuid'];\n        $object['event_id'] = $eventId;\n        if ($object['distribution'] == 4) {\n            $object['sharing_group_id'] = $this->SharingGroup->captureSG($object['SharingGroup'], $user);\n        }\n        if (!$this->save($object)) {\n            $log->create();\n            $log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Object',\n                'model_id' => 0,\n                'email' => $user['email'],\n                'action' => 'edit',\n                'user_id' => $user['id'],\n                'title' => 'Attribute dropped due to validation for Event ' . $eventId . ' failed: ' . $object['name'],\n                'change' => 'Validation errors: ' . json_encode($this->validationErrors) . ' Full Object: ' . json_encode($attribute),\n            ));\n            return $this->validationErrors;\n        }\n        if (!empty($object['Attribute'])) {\n            foreach ($object['Attribute'] as $attribute) {\n                $result = $this->Attribute->editAttribute($attribute, $eventId, $user, $object['id'], $log, $force);\n            }\n        }\n        return true;\n    }\n\n    public function deleteObject(array $object, $hard=false, $unpublish=true)\n    {\n        $id = $object['Object']['id'];\n        if ($hard) {\n            // For a hard delete, simply run the delete, it will cascade\n            $this->delete($id);\n        } else {\n            // For soft deletes, sanitise the object first if the setting is enabled\n            if (Configure::read('Security.sanitise_attribute_on_delete')) {\n                $object['Object']['name'] = 'N/A';\n                $object['Object']['category'] = 'N/A';\n                $object['Object']['description'] = 'N/A';\n                $object['Object']['template_uuid'] = 'N/A';\n                $object['Object']['template_version'] = 0;\n                $object['Object']['comment'] = '';\n            }\n            $date = new DateTime();\n            $object['Object']['deleted'] = 1;\n            $object['Object']['timestamp'] = $date->getTimestamp();\n            $saveResult = $this->save($object);\n            if (!$saveResult) {\n                return $saveResult;\n            }\n            foreach ($object['Attribute'] as $attribute) {\n                if (Configure::read('Security.sanitise_attribute_on_delete')) {\n                    $attribute['category'] = 'Other';\n                    $attribute['type'] = 'comment';\n                    $attribute['value'] = 'deleted';\n                    $attribute['comment'] = '';\n                    $attribute['to_ids'] = 0;\n                }\n                $attribute['deleted'] = 1;\n                $attribute['timestamp'] = $date->getTimestamp();\n                $this->Attribute->save(array('Attribute' => $attribute));\n                $this->Event->ShadowAttribute->deleteAll(\n                    array('ShadowAttribute.old_id' => $attribute['id']),\n                    false\n                );\n            }\n            if ($unpublish) {\n                $this->Event->unpublishEvent($object['Event']['id']);\n            }\n            $object_refs = $this->ObjectReference->find('all', array(\n                'conditions' => array(\n                    'ObjectReference.referenced_type' => 1,\n                    'ObjectReference.referenced_id' => $id,\n                ),\n                'recursive' => -1\n            ));\n            foreach ($object_refs as $ref) {\n                $ref['ObjectReference']['deleted'] = 1;\n                $this->ObjectReference->save($ref);\n            }\n        }\n        return true;\n    }\n\n    public function updateTimestamp($id, $timestamp = false)\n    {\n        $date = new DateTime();\n        $object = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Object.id' => $id)\n        ));\n        $object['Object']['timestamp'] = $timestamp == false ? $date->getTimestamp() : $timestamp;\n        $object['Object']['skip_zmq'] = 1;\n        $object['Object']['skip_kafka'] = 1;\n        $result = $this->save($object);\n        return $result;\n    }\n\n    // Hunt down all LEDA and CASTOR clones\n    public function removeOrphanedObjects()\n    {\n        $orphans = $this->find('list', array(\n            'fields' => array('Object.id', 'Object.id'),\n            'conditions' => array('Event.id' => null),\n            'contain' => array('Event' => array('fields' => array('id')))\n        ));\n        foreach ($orphans as $orphan) {\n            $this->delete($orphan);\n        }\n        return count($orphans);\n    }\n\n    public function validObjectsFromAttributeTypes($user, $event_id, $selected_attribute_ids)\n    {\n        $attributes = $this->Attribute->fetchAttributes($user,\n            array(\n                'conditions' => array(\n                    'Attribute.id' => $selected_attribute_ids,\n                    'Attribute.event_id' => $event_id,\n                    'Attribute.object_id' => 0\n                ),\n            )\n        );\n        if (empty($attributes)) {\n            return array('templates' => array(), 'types' => array());\n        }\n        $attribute_types = array();\n        foreach ($attributes as $i => $attribute) {\n            $attribute_types[$attribute['Attribute']['type']] = 1;\n            $attributes[$i]['Attribute']['object_relation'] = $attribute['Attribute']['type'];\n        }\n        $attribute_types = array_keys($attribute_types);\n\n        $potential_templates = $this->ObjectTemplate->find('list', array(\n            'recursive' => -1,\n            'fields' => array(\n                'ObjectTemplate.id',\n                'COUNT(ObjectTemplateElement.type) as type_count'\n            ),\n            'conditions' => array(\n                'ObjectTemplate.active' => true,\n                'ObjectTemplateElement.type' => $attribute_types\n            ),\n            'joins' => array(\n                array(\n                    'table' => 'object_template_elements',\n                    'alias' => 'ObjectTemplateElement',\n                    'type' => 'RIGHT',\n                    'fields' => array('ObjectTemplateElement.object_relation', 'ObjectTemplateElement.type'),\n                    'conditions' => array('ObjectTemplate.id = ObjectTemplateElement.object_template_id')\n                )\n            ),\n            'group' => 'ObjectTemplate.id',\n            'order' => 'type_count DESC'\n        ));\n\n        $potential_template_ids = array_keys($potential_templates);\n        $templates = $this->ObjectTemplate->find('all', array(\n            'recursive' => -1,\n            'conditions' => array('id' => $potential_template_ids),\n            'contain' => 'ObjectTemplateElement'\n        ));\n\n        foreach ($templates as $i => $template) {\n            $res = $this->ObjectTemplate->checkTemplateConformityBasedOnTypes($template, $attributes);\n            $templates[$i]['ObjectTemplate']['compatibility'] = $res['valid'] ? true : $res['missingTypes'];\n            $templates[$i]['ObjectTemplate']['invalidTypes'] = $res['invalidTypes'];\n            $templates[$i]['ObjectTemplate']['invalidTypesMultiple'] = $res['invalidTypesMultiple'];\n        }\n        return array('templates' => $templates, 'types' => $attribute_types);\n    }\n\n    public function groupAttributesIntoObject($user, $event_id, $object, $template, $selected_attribute_ids, $selected_object_relation_mapping, $hard_delete_attribute)\n    {\n        $saved_object_id = $this->saveObject($object, $event_id, $template, $user);\n        if (!is_numeric($saved_object_id)) {\n            return $saved_object_id;\n        }\n\n        $saved_object = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Object.id' => $saved_object_id)\n        ));\n\n        $existing_attributes = $this->Attribute->fetchAttributes($user, array('conditions' => array(\n            'Attribute.id' => $selected_attribute_ids,\n            'Attribute.event_id' => $event_id,\n            'Attribute.object_id' => 0\n        )));\n\n        if (empty($existing_attributes)) {\n            return __('Selected Attributes do not exist.');\n        }\n        $event = array('Event' => $existing_attributes[0]['Event']);\n\n        // Duplicate the attribute and its context, otherwise connected instances will drop the duplicated UUID\n        foreach ($existing_attributes as $i => $existing_attribute) {\n            if (isset($selected_object_relation_mapping[$existing_attribute['Attribute']['id']])) {\n                $sightings = $this->Event->Sighting->attachToEvent($event, $user, $existing_attribute['Attribute']['id']);\n                $object_relation = $selected_object_relation_mapping[$existing_attribute['Attribute']['id']];\n                $created_attribute = $existing_attribute['Attribute'];\n                unset($created_attribute['timestamp']);\n                unset($created_attribute['id']);\n                unset($created_attribute['uuid']);\n                $created_attribute['object_relation'] = $object_relation;\n                $created_attribute['object_id'] = $saved_object['Object']['id'];\n                if (isset($existing_attribute['AttributeTag'])) {\n                    $created_attribute['AttributeTag'] = $existing_attribute['AttributeTag'];\n                }\n                if (!empty($sightings)) {\n                    $created_attribute['Sighting'] = $sightings;\n                }\n                $saved_object['Attribute'][$i] = $created_attribute;\n                $this->Attribute->captureAttribute($created_attribute, $event_id, $user, $saved_object['Object']['id']);\n                $this->Attribute->deleteAttribute($existing_attribute['Attribute']['id'], $user, $hard_delete_attribute);\n            }\n        }\n        return $saved_object['Object']['id'];\n\n    }\n\n    public function resolveUpdatedTemplate($template, $object, $update_template_available = false)\n    {\n        $toReturn = array(\n            'updateable_attribute' => false,\n            'not_updateable_attribute' => false,\n            'newer_template_version' => false,\n            'original_template_unkown' => false,\n            'template' => $template\n        );\n        $newer_template = $this->ObjectTemplate->find('first', array(\n            'conditions' => array(\n                'ObjectTemplate.uuid' => $object['Object']['template_uuid'],\n                'ObjectTemplate.version >' => $object['Object']['template_version'],\n            ),\n            'recursive' => -1,\n            'contain' => array(\n                'ObjectTemplateElement'\n            ),\n            'order' => array('ObjectTemplate.version DESC')\n        ));\n        $template_difference = array();\n        if (!empty($newer_template)) {\n            $toReturn['newer_template_version'] = !$newer_template['ObjectTemplate']['version'];\n            $newer_template_temp = Hash::remove(Hash::remove($newer_template['ObjectTemplateElement'], '{n}.id'), '{n}.object_template_id');\n            if (!empty($template)) {\n                // ignore IDs for comparison\n                $cur_template_temp = Hash::remove(Hash::remove($template['ObjectTemplateElement'], '{n}.id'), '{n}.object_template_id');\n\n                // check how current template is included in the newer\n                foreach ($cur_template_temp as $cur_obj_rel) {\n                    $flag_sim = false;\n                    foreach ($newer_template_temp as $newer_obj_rel) {\n                        $tmp = Hash::diff($cur_obj_rel, $newer_obj_rel);\n                        if (count($tmp) == 0) {\n                            $flag_sim = true;\n                            break;\n                        }\n                    }\n                    if (!$flag_sim) {\n                        $template_difference[] = $cur_obj_rel;\n                    }\n                }\n            } else { // original template unkown\n                $toReturn['original_template_unkown'] = true;\n                $unmatched_attributes = array();\n                foreach ($object['Attribute'] as $i => $attribute) {\n                    $flag_match = false;\n                    foreach ($newer_template_temp as $newer_obj_rel) {\n                        if (\n                            $newer_obj_rel['object_relation'] == $attribute['object_relation'] &&\n                            $newer_obj_rel['type'] == $attribute['type']\n                        ) {\n                            $flag_match = true;\n                            break;\n                        }\n                    }\n                    if (!$flag_match) {\n                        $unmatched_attributes[] = $attribute;\n                    }\n                }\n\n                // simulate unkown template from the attribute\n                foreach ($unmatched_attributes as $unmatched_attribute) {\n                    $template_difference[] = [\n                        'object_relation' => $unmatched_attribute['object_relation'],\n                        'type' => $unmatched_attribute['type']\n                    ];\n                }\n            }\n            $toReturn['updateable_attribute'] = $object['Attribute'];\n            $toReturn['not_updateable_attribute'] = array();\n        } else {\n            $toReturn['newer_template_version'] = false;\n        }\n        if (!empty($template_difference)) { // older template not completely embeded in newer\n            foreach ($template_difference as $temp_diff_element) {\n                foreach ($object['Attribute'] as $i => $attribute) {\n                    if (\n                        $attribute['object_relation'] == $temp_diff_element['object_relation']\n                        && $attribute['type'] == $temp_diff_element['type']\n                    ) { // This attribute cannot be merged automatically\n                        $attribute['merge-possible'] = false;\n                        $toReturn['not_updateable_attribute'][] = $attribute;\n                        unset($toReturn['updateable_attribute'][$i]);\n                    }\n                }\n            }\n        }\n        if ($update_template_available) { // template version bump requested\n            $toReturn['template'] = $newer_template; // bump the template version\n        }\n        return $toReturn;\n    }\n\n    public function reviseObject($revised_object, $object, $template) {\n        $revised_object_both = array('mergeable' => array(), 'notMergeable' => array());\n\n        // Loop through attributes to inject and perform the correct action\n        // (inject, duplicate, add warnings, ...) when applicable\n        foreach ($revised_object['Attribute'] as $attribute_to_inject) {\n            $flag_no_collision = true;\n            foreach ($object['Attribute'] as $attribute) {\n                if (\n                    $attribute['object_relation'] == $attribute_to_inject['object_relation']\n                    && $attribute['type'] == $attribute_to_inject['type']\n                    && $attribute['value'] !== $attribute_to_inject['value']\n                ) { // Collision on value\n                    $multiple = !empty(Hash::extract($template['ObjectTemplateElement'], sprintf('{n}[object_relation=%s][type=%s][multiple=true]', $attribute['object_relation'], $attribute['type'])));\n                    if ($multiple) { // if multiple is set, check if an entry exists already\n                        $flag_entry_exists = false;\n                        foreach ($object['Attribute'] as $attr) {\n                            if (\n                                $attr['object_relation'] == $attribute_to_inject['object_relation']\n                                && $attr['type'] == $attribute_to_inject['type']\n                                && $attr['value'] === $attribute_to_inject['value']\n                            ) {\n                                $flag_entry_exists = true;\n                                break;\n                            }\n                        }\n                        if (!$flag_entry_exists) { // entry does no exists, can be duplicated\n                            $attribute_to_inject['is_multiple'] = true;\n                            $revised_object_both['mergeable'][] = $attribute_to_inject;\n                            $object['Attribute'][] = $attribute_to_inject;\n                        }\n                    } else { // Collision on value, multiple not set => propose overwrite\n                        $attribute_to_inject['current_value'] = $attribute['value'];\n                        $attribute_to_inject['merge-possible'] = true; // the user can still swap value\n                        $revised_object_both['notMergeable'][] = $attribute_to_inject;\n                    }\n                    $flag_no_collision = false;\n                } else if (\n                    $attribute['object_relation'] == $attribute_to_inject['object_relation']\n                     && $attribute['type'] == $attribute_to_inject['type']\n                     && $attribute['value'] === $attribute_to_inject['value']\n                ) { // all good, they are basically the same, do nothing\n                    $revised_object_both['mergeable'][] = $attribute_to_inject;\n                    $flag_no_collision = false;\n                }\n            }\n            if ($flag_no_collision) { // no collision, nor equalities => inject it straight away\n                $revised_object_both['mergeable'][] = $attribute_to_inject;\n                $object['Attribute'][] = $attribute_to_inject;\n            }\n        }\n        return array(\n            'object' => $object,\n            'revised_object_both' => $revised_object_both\n        );\n    }\n\n    public function restSearch($user, $returnFormat, $filters, $paramsOnly = false, $jobId = false, &$elementCounter = 0, &$renderView = false)\n    {\n        if (!isset($this->validFormats[$returnFormat][1])) {\n            throw new NotFoundException('Invalid output format.');\n        }\n        App::uses($this->validFormats[$returnFormat][1], 'Export');\n        $exportTool = new $this->validFormats[$returnFormat][1]();\n        if (empty($exportTool->non_restrictive_export)) {\n            if (!isset($filters['to_ids'])) {\n                $filters['to_ids'] = 1;\n            }\n            if (!isset($filters['published'])) {\n                $filters['published'] = 1;\n            }\n            $filters['allow_proposal_blocking'] = 1;\n        }\n        if (!empty($filters['quickFilter'])) {\n            $filters['searchall'] = $filters['quickFilter'];\n            if (!empty($filters['value'])) {\n                unset($filters['value']);\n            }\n        }\n        if (!empty($exportTool->renderView)) {\n            $renderView = $exportTool->renderView;\n        }\n        if (isset($filters['searchall'])) {\n            if (!empty($filters['value'])) {\n                $filters['wildcard'] = $filters['value'];\n                unset($filters['value']);\n            } else {\n                $filters['wildcard'] = $filters['searchall'];\n            }\n        }\n        $subqueryElements = $this->Event->harvestSubqueryElements($filters);\n        $filters = $this->Event->addFiltersFromSubqueryElements($filters, $subqueryElements, $user);\n        $filters = $this->Event->addFiltersFromUserSettings($user, $filters);\n        $conditions = $this->buildFilterConditions($filters);\n        $params = array(\n            'conditions' => $conditions,\n            'fields' => array('Attribute.*', 'Event.org_id', 'Event.distribution', 'Object.*'),\n            'withAttachments' => !empty($filters['withAttachments']) ? $filters['withAttachments'] : 0,\n            'enforceWarninglist' => !empty($filters['enforceWarninglist']) ? $filters['enforceWarninglist'] : 0,\n            'includeAllTags' => !empty($filters['includeAllTags']) ? $filters['includeAllTags'] : 0,\n            'includeEventUuid' => !empty($filters['includeEventUuid']) ? $filters['includeEventUuid'] : 0,\n            'includeEventTags' => !empty($filters['includeEventTags']) ? $filters['includeEventTags'] : 0,\n            'includeProposals' => !empty($filters['includeProposals']) ? $filters['includeProposals'] : 0,\n            'includeWarninglistHits' => !empty($filters['includeWarninglistHits']) ? $filters['includeWarninglistHits'] : 0,\n            'includeContext' => !empty($filters['includeContext']) ? $filters['includeContext'] : 0,\n            'includeSightings' => !empty($filters['includeSightings']) ? $filters['includeSightings'] : 0,\n            'includeSightingdb' => !empty($filters['includeSightingdb']) ? $filters['includeSightingdb'] : 0,\n            'includeCorrelations' => !empty($filters['includeCorrelations']) ? $filters['includeCorrelations'] : 0,\n            'includeDecayScore' => !empty($filters['includeDecayScore']) ? $filters['includeDecayScore'] : 0,\n            'includeFullModel' => !empty($filters['includeFullModel']) ? $filters['includeFullModel'] : 0,\n            'allow_proposal_blocking' => !empty($filters['allow_proposal_blocking']) ? $filters['allow_proposal_blocking'] : 0,\n            'metadata' => !empty($filters['metadata']) ? $filters['metadata'] : 0,\n        );\n        if (!empty($filters['attackGalaxy'])) {\n            $params['attackGalaxy'] = $filters['attackGalaxy'];\n        }\n        if (isset($filters['include_event_uuid'])) {\n            $params['includeEventUuid'] = $filters['include_event_uuid'];\n        }\n        if (isset($filters['limit'])) {\n            $params['limit'] = $filters['limit'];\n            if (!isset($filters['page'])) {\n                $filters['page'] = 1;\n            }\n        }\n        if (isset($filters['page'])) {\n            $params['page'] = $filters['page'];\n        }\n        if (!empty($filters['deleted'])) {\n            $params['deleted'] = $filters['deleted'];\n        }\n        if (!empty($filters['excludeDecayed'])) {\n            $params['excludeDecayed'] = $filters['excludeDecayed'];\n            $params['includeDecayScore'] = 1;\n        }\n        if (!empty($filters['decayingModel'])) {\n            $params['decayingModel'] = $filters['decayingModel'];\n        }\n        if (!empty($filters['modelOverrides'])) {\n            $params['modelOverrides'] = $filters['modelOverrides'];\n        }\n        if (!empty($filters['score'])) {\n            $params['score'] = $filters['score'];\n        }\n        if (!empty($filters['metadata'])) {\n            $params['metadata'] = $filters['metadata'];\n        }\n        if ($paramsOnly) {\n            return $params;\n        }\n        if (method_exists($exportTool, 'modify_params')) {\n            $params = $exportTool->modify_params($user, $params);\n        }\n        $exportToolParams = array(\n            'user' => $user,\n            'params' => $params,\n            'returnFormat' => $returnFormat,\n            'scope' => 'Object',\n            'filters' => $filters\n        );\n        if (!empty($exportTool->additional_params)) {\n            $params = array_merge_recursive(\n                $params,\n                $exportTool->additional_params\n            );\n        }\n        $tmpfile = new TmpFileTool();\n        $tmpfile->write($exportTool->header($exportToolParams));\n        $loop = false;\n        if (empty($params['limit'])) {\n            $memory_in_mb = $this->convert_to_memory_limit_to_mb(ini_get('memory_limit'));\n            $default_attribute_memory_coefficient = Configure::check('MISP.default_attribute_memory_coefficient') ? Configure::read('MISP.default_attribute_memory_coefficient') : 80;\n            $memory_scaling_factor = isset($exportTool->memory_scaling_factor) ? $exportTool->memory_scaling_factor : $default_attribute_memory_coefficient;\n            $params['limit'] = $memory_in_mb * $memory_scaling_factor / 10;\n            $loop = true;\n            $params['page'] = 1;\n        }\n        $this->__iteratedFetch($user, $params, $loop, $tmpfile, $exportTool, $exportToolParams, $elementCounter);\n        $tmpfile->write($exportTool->footer($exportToolParams));\n        return $tmpfile;\n    }\n\n    private function __iteratedFetch($user, &$params, &$loop, TmpFileTool $tmpfile, $exportTool, $exportToolParams, &$elementCounter = 0)\n    {\n        $continue = true;\n        while ($continue) {\n            $temp = '';\n            $this->Allowedlist = ClassRegistry::init('Allowedlist');\n            $results = $this->fetchObjects($user, $params, $continue);\n            if (empty($results)) {\n                $loop = false;\n                return true;\n            }\n            if ($elementCounter !== 0 && !empty($results)) {\n                $temp .= $exportTool->separator($exportToolParams);\n            }\n            if ($params['includeSightingdb']) {\n                $this->Sightingdb = ClassRegistry::init('Sightingdb');\n                $results = $this->Sightingdb->attachToObjects($results, $user);\n            }\n            $params['page'] += 1;\n            $results = $this->Allowedlist->removeAllowedlistedFromArray($results, true);\n            $results = array_values($results);\n            $i = 0;\n            foreach ($results as $object) {\n                $elementCounter++;\n                $handlerResult = $exportTool->handler($object, $exportToolParams);\n                $temp .= $handlerResult;\n                if ($handlerResult !== '') {\n                    if ($i != count($results) -1) {\n                        $temp .= $exportTool->separator($exportToolParams);\n                    }\n                }\n                $i++;\n            }\n            if (!$loop) {\n                $continue = false;\n            }\n            $tmpfile->write($temp);\n        }\n        return true;\n    }\n\n    private function attributeValueDifferent($newValue, $originalValue, $field)\n    {\n        if (in_array($field, ['first_seen', 'last_seen'])) {\n            return new DateTime($newValue) != new DateTime($originalValue);\n        } else {\n            return $newValue != $originalValue;\n        }\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppModel', 'Model');\nApp::uses('TmpFileTool', 'Tools');\n\n/**\n * @property Event $Event\n * @property SharingGroup $SharingGroup\n * @property Attribute $Attribute\n */\nclass MispObject extends AppModel\n{\n    public $name = 'Object';\n    public $alias = 'Object';\n\n    public $useTable = 'objects';\n\n    public $actsAs = array(\n            'Containable',\n            'SysLogLogable.SysLogLogable' => array( // TODO Audit, logable\n                'userModel' => 'User',\n                'userKey' => 'user_id',\n                'change' => 'full'),\n    );\n\n    public $belongsTo = array(\n        'Event' => array(\n            'className' => 'Event',\n            'foreignKey' => 'event_id'\n        ),\n        'SharingGroup' => array(\n            'className' => 'SharingGroup',\n            'foreignKey' => 'sharing_group_id'\n        ),\n        'ObjectTemplate' => array(\n            'className' => 'ObjectTemplate',\n            'foreignKey' => false,\n            'dependent' => false,\n            'conditions' => array('MispObject.template_uuid' => 'ObjectTemplate.uuid')\n        )\n    );\n\n    public $hasMany = array(\n        'Attribute' => array(\n            'className' => 'Attribute',\n            'dependent' => true,\n        ),\n        'ObjectReference' => array(\n            'className' => 'ObjectReference',\n            'dependent' => true,\n            'foreignKey' => 'object_id'\n        ),\n    );\n\n    public $validFormats = array(\n        'json' => array('json', 'JsonExport', 'json')\n    );\n\n    public $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' Sharing Group', 5 => 'Inherit');\n\n    public $validate = array(\n        'uuid' => array(\n            'uuid' => array(\n                'rule' => 'uuid',\n                'message' => 'Please provide a valid RFC 4122 UUID'\n            ),\n            'unique' => array(\n                'rule' => 'isUnique',\n                'message' => 'The UUID provided is not unique',\n                'required' => 'create'\n            ),\n        ),\n        'first_seen' => array(\n            'rule' => array('datetimeOrNull'),\n            'required' => false,\n            'message' => array('Invalid ISO 8601 format')\n        ),\n        'last_seen' => array(\n            'rule' => array('datetimeOrNull'),\n            'required' => false,\n            'message' => array('Invalid ISO 8601 format')\n        )\n    );\n\n    private $__objectDuplicationCheckCache = [];\n\n    public function buildFilterConditions(&$params)\n    {\n        $conditions = [];\n        if (isset($params['wildcard'])) {\n            $temp = array();\n            $options = array(\n                'filter' => 'wildcard',\n                'scope' => 'Object',\n                'pop' => false,\n                'context' => 'Event'\n            );\n            $conditions['AND'][] = array('OR' => $this->Event->set_filter_wildcard_attributes($params, $temp, $options));\n        } else {\n            if (isset($params['ignore'])) {\n                $params['to_ids'] = array(0, 1);\n                $params['published'] = array(0, 1);\n            }\n            $simple_params = array(\n                'Object' => array(\n                    'object_name' => array('function' => 'set_filter_object_name'),\n                    'object_template_uuid' => array('function' => 'set_filter_object_template_uuid'),\n                    'object_template_version' => array('function' => 'set_filter_object_template_version'),\n                    'deleted' => array('function' => 'set_filter_deleted')\n                ),\n                'Event' => array(\n                    'eventid' => array('function' => 'set_filter_eventid'),\n                    'eventinfo' => array('function' => 'set_filter_eventinfo'),\n                    'ignore' => array('function' => 'set_filter_ignore'),\n                    'from' => array('function' => 'set_filter_timestamp'),\n                    'to' => array('function' => 'set_filter_timestamp'),\n                    'date' => array('function' => 'set_filter_date'),\n                    'tags' => array('function' => 'set_filter_tags'),\n                    'last' => array('function' => 'set_filter_timestamp', 'pop' => true),\n                    'timestamp' => array('function' => 'set_filter_timestamp', 'pop' => true),\n                    'event_timestamp' => array('function' => 'set_filter_timestamp', 'pop' => true),\n                    'publish_timestamp' => array('function' => 'set_filter_timestamp'),\n                    'org' => array('function' => 'set_filter_org'),\n                    'uuid' => array('function' => 'set_filter_uuid'),\n                    'published' => array('function' => 'set_filter_published')\n                ),\n                'Attribute' => array(\n                    'value' => array('function' => 'set_filter_value'),\n                    'category' => array('function' => 'set_filter_simple_attribute'),\n                    'type' => array('function' => 'set_filter_simple_attribute'),\n                    'object_relation' => array('function' => 'set_filter_simple_attribute'),\n                    'tags' => array('function' => 'set_filter_tags', 'pop' => true),\n                    'uuid' => array('function' => 'set_filter_uuid'),\n                    'deleted' => array('function' => 'set_filter_deleted'),\n                    'timestamp' => array('function' => 'set_filter_timestamp'),\n                    'attribute_timestamp' => array('function' => 'set_filter_timestamp'),\n                    'first_seen' => array('function' => 'set_filter_seen'),\n                    'last_seen' => array('function' => 'set_filter_seen'),\n                    'to_ids' => array('function' => 'set_filter_to_ids'),\n                    'comment' => array('function' => 'set_filter_comment')\n                )\n            );\n            foreach ($params as $param => $paramData) {\n                foreach ($simple_params as $scope => $simple_param_scoped) {\n                    if (isset($simple_param_scoped[$param]) && isset($params[$param]) && $params[$param] !== false) {\n                        $options = array(\n                            'filter' => $param,\n                            'scope' => $scope,\n                            'pop' => !empty($simple_param_scoped[$param]['pop']),\n                            'context' => 'Attribute'\n                        );\n                        if ($scope === 'Attribute') {\n                            $subQueryOptions = array(\n                                'fields' => ['Attribute.object_id'],\n                                'group' => 'Attribute.object_id',\n                                'recursive' => -1,\n                                'conditions' => array(\n                                    'Attribute.object_id NOT' => 0,\n                                    $this->Event->{$simple_param_scoped[$param]['function']}($params, $conditions, $options)\n                                )\n                            );\n                            $conditions['AND'][] = $this->subQueryGenerator($this->Attribute, $subQueryOptions, 'Object.id');\n                        } else {\n                            $conditions = $this->Event->{$simple_param_scoped[$param]['function']}($params, $conditions, $options);\n                        }\n                    }\n                }\n            }\n        }\n        return $conditions;\n    }\n\n     // check whether the variable is null or datetime\n     public function datetimeOrNull($fields)\n     {\n         $k = array_keys($fields)[0];\n         $seen = $fields[$k];\n         try {\n             new DateTime($seen);\n             $returnValue = true;\n         } catch (Exception $e) {\n             $returnValue = false;\n         }\n         return $returnValue || is_null($seen);\n     }\n\n    public function afterFind($results, $primary = false)\n    {\n        foreach ($results as $k => $v) {\n            $results[$k] = $this->Attribute->UTCToISODatetime($results[$k], $this->alias);\n        }\n        return $results;\n    }\n\n    public function beforeSave($options = array()) {\n        $this->data = $this->Attribute->ISODatetimeToUTC($this->data, $this->alias);\n    }\n\n    public function beforeValidate($options = array())\n    {\n        parent::beforeValidate();\n        if (empty($this->data[$this->alias]['comment'])) {\n            $this->data[$this->alias]['comment'] = \"\";\n        }\n        // generate UUID if it doesn't exist\n        if (empty($this->data[$this->alias]['uuid'])) {\n            $this->data[$this->alias]['uuid'] = CakeText::uuid();\n        }\n        // generate timestamp if it doesn't exist\n        if (empty($this->data[$this->alias]['timestamp'])) {\n            $date = new DateTime();\n            $this->data[$this->alias]['timestamp'] = $date->getTimestamp();\n        }\n        // parse first_seen different formats\n        if (isset($this->data[$this->alias]['first_seen'])) {\n            $this->data[$this->alias]['first_seen'] = $this->data[$this->alias]['first_seen'] === '' ? null : $this->data[$this->alias]['first_seen'];\n        }\n        // parse last_seen different formats\n        if (isset($this->data[$this->alias]['last_seen'])) {\n            $this->data[$this->alias]['last_seen'] = $this->data[$this->alias]['last_seen'] === '' ? null : $this->data[$this->alias]['last_seen'];\n        }\n        if (empty($this->data[$this->alias]['template_version'])) {\n            $this->data[$this->alias]['template_version'] = 1;\n        }\n        if (isset($this->data[$this->alias]['deleted']) && empty($this->data[$this->alias]['deleted'])) {\n            $this->data[$this->alias]['deleted'] = 0;\n        }\n        if (!isset($this->data[$this->alias]['distribution']) || $this->data['Object']['distribution'] != 4) {\n            $this->data['Object']['sharing_group_id'] = 0;\n        }\n        if (!isset($this->data[$this->alias]['distribution'])) {\n            $this->data['Object']['distribution'] = 5;\n        }\n        return true;\n    }\n\n    public function afterSave($created, $options = array())\n    {\n        $pubToZmq = Configure::read('Plugin.ZeroMQ_enable') &&\n            Configure::read('Plugin.ZeroMQ_object_notifications_enable') &&\n            empty($this->data['Object']['skip_zmq']);\n        $kafkaTopic = Configure::read('Plugin.Kafka_object_notifications_topic');\n        $pubToKafka = Configure::read('Plugin.Kafka_enable') &&\n            Configure::read('Plugin.Kafka_object_notifications_enable') &&\n            !empty($kafkaTopic) &&\n            empty($this->data['Object']['skip_kafka']);\n        if ($pubToZmq || $pubToKafka) {\n            $object = $this->find('first', array(\n                'conditions' => array('Object.id' => $this->id),\n                'recursive' => -1\n            ));\n            $action = $created ? 'add' : 'edit';\n            if (!empty($this->data['Object']['deleted'])) {\n                $action = 'soft-delete';\n            }\n            if ($pubToZmq) {\n                $pubSubTool = $this->getPubSubTool();\n                $pubSubTool->object_save($object, $action);\n            }\n            if ($pubToKafka) {\n                $kafkaPubTool = $this->getKafkaPubTool();\n                $kafkaPubTool->publishJson($kafkaTopic, $object, $action);\n            }\n        }\n        return true;\n    }\n\n    public function beforeDelete($cascade = true)\n    {\n        if (!empty($this->data['Object']['id'])) {\n            $pubToZmq = Configure::read('Plugin.ZeroMQ_enable') && Configure::read('Plugin.ZeroMQ_object_notifications_enable');\n            $kafkaTopic = Configure::read('Plugin.Kafka_object_notifications_topic');\n            $pubToKafka = Configure::read('Plugin.Kafka_enable') && Configure::read('Plugin.Kafka_object_notifications_enable') && !empty($kafkaTopic);\n            if ($pubToZmq || $pubToKafka) {\n                $object = $this->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('Object.id' => $this->data['Object']['id'])\n                ));\n                if ($pubToZmq) {\n                    $pubSubTool = $this->getPubSubTool();\n                    $pubSubTool->object_save($object, 'delete');\n                }\n                if ($pubToKafka) {\n                    $kafkaPubTool = $this->getKafkaPubTool();\n                    $kafkaPubTool->publishJson($kafkaTopic, $object, 'delete');\n                }\n            }\n        }\n    }\n\n    public function afterDelete()\n    {\n        if (!empty($this->data[$this->alias]['id'])) {\n            $this->ObjectReference->deleteAll(\n                array(\n                    'ObjectReference.referenced_type' => 1,\n                    'ObjectReference.referenced_id' => $this->data[$this->alias]['id'],\n                ),\n                false\n            );\n        }\n    }\n\n    public function checkForDuplicateObjects($object, $eventId)\n    {\n        $newObjectAttributes = array();\n        $existingObjectAttributes = array();\n        if (isset($object['Object']['Attribute'])) {\n            $attributeArray = $object['Object']['Attribute'];\n        } else {\n            $attributeArray = $object['Attribute'];\n        }\n        foreach ($attributeArray as $attribute) {\n            if ($attribute['type'] === 'malware-sample') {\n                if (strpos($attribute['value'], '|') === false && !empty($attribute['data'])) {\n                    $attribute['value'] = $attribute['value'] . '|' . md5(base64_decode($attribute['data']));\n                }\n            }\n            $newObjectAttributes[] = hash(\n                'sha256',\n                $attribute['object_relation'] . $attribute['category'] . $attribute['type'] . $this->data['Attribute']['value'] = $this->Attribute->modifyBeforeValidation($attribute['type'], $attribute['value'])\n            );\n        }\n        $newObjectAttributeCount = count($newObjectAttributes);\n        if (!empty($this->__objectDuplicationCheckCache['new'][$object['Object']['template_uuid']])) {\n            foreach ($this->__objectDuplicationCheckCache['new'][$object['Object']['template_uuid']] as $previousNewObject) {\n                if ($newObjectAttributeCount === count($previousNewObject)) {\n                    if (empty(array_diff($previousNewObject, $newObjectAttributes))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        $this->__objectDuplicationCheckCache['new'][$object['Object']['template_uuid']][] = $newObjectAttributes;\n\n        if (!isset($this->__objectDuplicationCheckCache[$object['Object']['template_uuid']])) {\n            $this->__objectDuplicationCheckCache[$object['Object']['template_uuid']] = $this->find('all', array(\n                'recursive' => -1,\n                'contain' => array(\n                    'Attribute' => array(\n                        'fields' => array('value', 'type', 'category', 'object_relation'),\n                        'conditions' => array('Attribute.deleted' => 0)\n                    )\n                ),\n                'fields' => array('template_uuid'),\n                'conditions' => array('template_uuid' => $object['Object']['template_uuid'], 'Object.deleted' => 0, 'event_id' => $eventId)\n            ));\n        }\n        $oldObjects = array();\n        foreach ($this->__objectDuplicationCheckCache[$object['Object']['template_uuid']] as $k => $existingObject) {\n            $temp = array();\n            if (!empty($existingObject['Attribute']) && $newObjectAttributeCount == count($existingObject['Attribute'])) {\n                foreach ($existingObject['Attribute'] as $existingAttribute) {\n                    $temp[] = hash(\n                        'sha256',\n                        $existingAttribute['object_relation'] . $existingAttribute['category'] . $existingAttribute['type'] . $existingAttribute['value']\n                    );\n                }\n                if (empty(array_diff($temp, $newObjectAttributes))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public function saveObject($object, $eventId, $template = false, $user, $errorBehaviour = 'drop', $breakOnDuplicate = false)\n    {\n        if ($breakOnDuplicate) {\n            $duplicate = $this->checkForDuplicateObjects($object, $eventId);\n            if ($duplicate) {\n                return array('value' => array('Duplicate object found. Since breakOnDuplicate is set the object will not be added.'));\n            }\n        }\n        $this->create();\n        $templateFields = array(\n            'name' => 'name',\n            'meta-category' => 'meta-category',\n            'description' => 'description',\n            'template_version' => 'version',\n            'template_uuid' => 'uuid'\n        );\n        if ($template) {\n            foreach ($templateFields as $k => $v) {\n                $object['Object'][$k] = $template['ObjectTemplate'][$v];\n            }\n        } else {\n            foreach ($templateFields as $k => $v) {\n                if (!isset($object['Object'][$k])) {\n                    return array('template' => array(__('No valid template found and object lacking template information. (%s)', $k)));\n                }\n            }\n        }\n        $object['Object']['event_id'] = $eventId;\n        $result = false;\n        if ($this->save($object)) {\n            $result = $this->id;\n            foreach ($object['Attribute'] as $k => $attribute) {\n                $object['Attribute'][$k]['object_id'] = $this->id;\n                if (\n                    (!array_key_exists('first_seen', $object['Attribute'][$k]) || is_null($object['Attribute'][$k]['first_seen'])) &&\n                    (array_key_exists('first_seen', $object['Object']) && !is_null($object['Object']['first_seen']))\n                ) {\n                    $object['Attribute'][$k]['first_seen'] = $object['Object']['first_seen'];\n                }\n                if (\n                    (!array_key_exists('last_seen', $object['Attribute'][$k]) || is_null($object['Attribute'][$k]['last_seen'])) &&\n                    (array_key_exists('last_seen', $object['Object']) &&  !is_null($object['Object']['last_seen']))\n                ) {\n                    $object['Attribute'][$k]['last_seen'] = $object['Object']['last_seen'];\n                }\n            }\n            $this->Attribute->saveAttributes($object['Attribute'], $user);\n        } else {\n            $result = $this->validationErrors;\n        }\n        return $result;\n    }\n\n    public function buildConditions(array $user)\n    {\n        if ($user['Role']['perm_site_admin']) {\n            return [];\n        }\n\n        $sgids = $this->Event->cacheSgids($user, true);\n        return [\n            'AND' => [\n                'OR' => [\n                    'Event.org_id' => $user['org_id'], // if event is owned by current user org, allow access to all objects\n                    'AND' => [\n                        $this->Event->createEventConditions($user),\n                        'OR' => [\n                            'Object.distribution' => array(1, 2, 3, 5),\n                            'AND' => [\n                                'Object.distribution' => 4,\n                                'Object.sharing_group_id' => $sgids,\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ];\n    }\n\n    public function fetchObjectSimple($user, $options = array())\n    {\n        $params = array(\n            'conditions' => $this->buildConditions($user),\n            'fields' => array(),\n            'recursive' => -1\n        );\n        if (isset($options['conditions'])) {\n            $params['conditions']['AND'][] = $options['conditions'];\n        }\n        if (isset($options['fields'])) {\n            $params['fields'] = $options['fields'];\n        }\n        $results = $this->find('all', array(\n            'conditions' => $params['conditions'],\n            'recursive' => -1,\n            'fields' => $params['fields'],\n            'contain' => array('Event' => array('distribution', 'id', 'user_id', 'orgc_id', 'org_id')),\n            'sort' => false\n        ));\n        return $results;\n    }\n\n    // Method that fetches all objects\n    // very flexible, it's basically a replacement for find, with the addition that it restricts access based on user\n    // options:\n    //     fields\n    //     contain\n    //     conditions\n    //     order\n    //     group\n    public function fetchObjects($user, $options = array())\n    {\n        $attributeConditions = array();\n        if (!$user['Role']['perm_site_admin']) {\n            $sgids = $this->Event->cacheSgids($user, true);\n            $attributeConditions = array(\n                'OR' => array(\n                    array(\n                        '(SELECT events.org_id FROM events WHERE events.id = Attribute.event_id)' => $user['org_id']\n                    ),\n                    array(\n                        'OR' => array(\n                            'Attribute.distribution' => array(1, 2, 3, 5),\n                            array(\n                                'Attribute.distribution' => 4,\n                                'Attribute.sharing_group_id' => $sgids,\n                            )\n                        )\n                    )\n                )\n            );\n        }\n        $params = array(\n            'conditions' => $this->buildConditions($user),\n            'recursive' => -1,\n            'contain' => array(\n                'Event' => array(\n                    'fields' => array('id', 'info', 'org_id', 'orgc_id'),\n                ),\n                'Attribute' => array(\n                    'conditions' => $attributeConditions,\n                    //'ShadowAttribute',\n                    'AttributeTag' => array(\n                        'Tag'\n                    )\n                )\n            ),\n        );\n        if (!empty($options['metadata'])) {\n            unset($params['contain']['Attribute']);\n        }\n        if (empty($options['metadata']) && empty($options['includeAllTags'])) {\n            $params['contain']['Attribute']['AttributeTag']['Tag']['conditions']['exportable'] = 1;\n        }\n        if (isset($options['contain'])) {\n            $params['contain'] = array_merge_recursive($params['contain'], $options['contain']);\n        } else {\n            $option['contain']['Event']['fields'] = array('id', 'info', 'org_id', 'orgc_id');\n        }\n        if (\n            empty($options['metadata']) &&\n            Configure::read('MISP.proposals_block_attributes') &&\n            isset($options['conditions']['AND']['Attribute.to_ids']) &&\n            $options['conditions']['AND']['Attribute.to_ids'] == 1\n        ) {\n            $this->Attribute->bindModel(array('hasMany' => array('ShadowAttribute' => array('foreignKey' => 'old_id'))));\n            $proposalRestriction =  array(\n                    'ShadowAttribute' => array(\n                            'conditions' => array(\n                                    'AND' => array(\n                                            'ShadowAttribute.deleted' => 0,\n                                            'OR' => array(\n                                                    'ShadowAttribute.proposal_to_delete' => 1,\n                                                    'ShadowAttribute.to_ids' => 0\n                                            )\n                                    )\n                            ),\n                            'fields' => array('ShadowAttribute.id')\n                    )\n            );\n            $params['contain'] = array_merge($params['contain']['Attribute'], $proposalRestriction);\n        }\n        if (isset($options['conditions'])) {\n            $params['conditions']['AND'][] = $options['conditions'];\n        }\n        if (isset($options['order'])) {\n            $params['order'] = $options['order'];\n        }\n        if (!isset($options['withAttachments'])) {\n            $options['withAttachments'] = false;\n        } else ($params['order'] = array());\n        if (!isset($options['enforceWarninglist'])) {\n            $options['enforceWarninglist'] = false;\n        }\n        if (empty($options['metadata']) && (!$user['Role']['perm_sync'] || !isset($options['deleted']) || !$options['deleted'])) {\n            $params['contain']['Attribute']['conditions']['AND']['Attribute.deleted'] = 0;\n        }\n        if (isset($options['group'])) {\n            $params['group'] = array_merge(array('Object.id'), $options['group']);\n        }\n        if (isset($options['limit'])) {\n            $params['limit'] = $options['limit'];\n            if (isset($options['page'])) {\n                $params['page'] = $options['page'];\n            }\n        }\n        $results = $this->find('all', $params);\n        if ($options['enforceWarninglist'] && !isset($this->Warninglist)) {\n            $this->Warninglist = ClassRegistry::init('Warninglist');\n        }\n        $results = array_values($results);\n        $proposals_block_attributes = Configure::read('MISP.proposals_block_attributes');\n        if (empty($options['metadata'])) {\n            foreach ($results as $key => $object) {\n                foreach ($object['Attribute'] as $key2 => $attribute) {\n                    if ($options['enforceWarninglist'] && !$this->Warninglist->filterWarninglistAttribute($attribute['Attribute'])) {\n                        unset($results[$key][$key2]);\n                        continue;\n                    }\n                    if ($proposals_block_attributes) {\n                        if (!empty($attribute['ShadowAttribute'])) {\n                            unset($results[$key][$key2]);\n                        } else {\n                            unset($results[$key][$key2]['ShadowAttribute']);\n                        }\n                    }\n                    if ($options['withAttachments']) {\n                        if ($this->Attribute->typeIsAttachment($attribute['type'])) {\n                            $encodedFile = $this->Attribute->base64EncodeAttachment($attribute);\n                            $results[$key]['Attribute'][$key2]['data'] = $encodedFile;\n                        }\n                    }\n                }\n            }\n        }\n        return $results;\n    }\n\n    /*\n     * Prepare the template form view's data, setting defaults, sorting elements\n     */\n    public function prepareTemplate($template, $request = array())\n    {\n        $temp = array();\n        usort($template['ObjectTemplateElement'], function ($a, $b) {\n            return $a['ui-priority'] < $b['ui-priority'];\n        });\n        $request_rearranged = array();\n        $template_object_elements = $template['ObjectTemplateElement'];\n        unset($template['ObjectTemplateElement']);\n        if (!empty($request['Attribute'])) {\n            foreach ($request['Attribute'] as $attribute) {\n                $request_rearranged[$attribute['object_relation']][] = $attribute;\n            }\n        }\n        foreach ($template_object_elements as $k => $v) {\n            if (empty($request_rearranged[$v['object_relation']])) {\n                if (isset($this->Event->Attribute->typeDefinitions[$v['type']])) {\n                    $v['default_category'] = $this->Event->Attribute->typeDefinitions[$v['type']]['default_category'];\n                    $v['to_ids'] = $this->Event->Attribute->typeDefinitions[$v['type']]['to_ids'];\n                    if (empty($v['categories'])) {\n                        $v['categories'] = array();\n                        foreach ($this->Event->Attribute->categoryDefinitions as $catk => $catv) {\n                            if (in_array($v['type'], $catv['types'])) {\n                                $v['categories'][] = $catk;\n                            }\n                        }\n                    }\n                    $template['ObjectTemplateElement'][] = $v;\n                } else {\n                    $template['warnings'][] = 'Missing attribute type \"' . $v['type'] . '\" found. Omitted template element (\"' . $template_object_elements[$k]['object_relation'] . '\") that would not pass validation due to this.';\n                }\n            } else {\n                foreach ($request_rearranged[$v['object_relation']] as $request_item) {\n                    if (isset($this->Event->Attribute->typeDefinitions[$v['type']])) {\n                        $v['default_category'] = $request_item['category'];\n                        $v['value'] = $request_item['value'];\n                        $v['to_ids'] = $request_item['to_ids'];\n                        $v['comment'] = $request_item['comment'];\n                        if (!empty($request_item['uuid'])) {\n                            $v['uuid'] = $request_item['uuid'];\n                        }\n                        if (isset($request_item['data'])) {\n                            $v['data'] = $request_item['data'];\n                        }\n                        if (empty($v['categories'])) {\n                            $v['categories'] = array();\n                            foreach ($this->Event->Attribute->categoryDefinitions as $catk => $catv) {\n                                if (in_array($v['type'], $catv['types'])) {\n                                    $v['categories'][] = $catk;\n                                }\n                            }\n                        }\n                        $v['disable_correlation'] = $request_item['disable_correlation'];\n                        $template['ObjectTemplateElement'][] = $v;\n                        unset($v['uuid']); // force creating a new attribute if template element entry gets reused\n                    } else {\n                        $template['warnings'][] = 'Missing attribute type \"' . $v['type'] . '\" found. Omitted template element (\"' . $template_object_elements[$k]['object_relation'] . '\") that would not pass validation due to this.';\n                    }\n                }\n            }\n        }\n        return $template;\n    }\n\n    /**\n     * Clean the attribute list up from artifacts introduced by the object form\n     * @param array $attributes\n     * @return string|array\n     */\n    public function attributeCleanup($attributes)\n    {\n        if (empty($attributes['Attribute'])) {\n            return $attributes;\n        }\n        foreach ($attributes['Attribute'] as $k => $attribute) {\n            if (isset($attribute['save']) && $attribute['save'] == 0) {\n                unset($attributes['Attribute'][$k]);\n                continue;\n            }\n            if (isset($attribute['value_select'])) {\n                if ($attribute['value_select'] !== 'Enter value manually') {\n                    $attributes['Attribute'][$k]['value'] = $attribute['value_select'];\n                }\n                unset($attributes['Attribute'][$k]['value_select']);\n            }\n            if (isset($attribute['Attachment'])) {\n                // Check if there were problems with the file upload\n                // only keep the last part of the filename, this should prevent directory attacks\n                $filename = basename($attribute['Attachment']['name']);\n                $tmpfile = new File($attribute['Attachment']['tmp_name']);\n                if ((isset($attribute['Attachment']['error']) && $attribute['Attachment']['error'] == 0) ||\n                    (!empty($attribute['Attachment']['tmp_name']) && $attribute['Attachment']['tmp_name'] != 'none')\n                ) {\n                    if (!is_uploaded_file($tmpfile->path)) {\n                        throw new InternalErrorException('PHP says file was not uploaded. Are you attacking me?');\n                    }\n                } else {\n                    return 'Issues with the file attachment for the ' . $attribute['object_relation'] . ' attribute. The error code returned is ' . $attribute['Attachment']['error'];\n                }\n                $attributes['Attribute'][$k]['value'] = $attribute['Attachment']['name'];\n                unset($attributes['Attribute'][$k]['Attachment']);\n                $attributes['Attribute'][$k]['encrypt'] = $attribute['type'] == 'malware-sample' ? 1 : 0;\n                $attributes['Attribute'][$k]['data'] = base64_encode($tmpfile->read());\n                $tmpfile->delete();\n                $tmpfile->close();\n            }\n            if (!isset($attributes['Attribute'][$k]['first_seen'])) {\n                $attributes['Attribute'][$k]['first_seen'] = null;\n            }\n            if (!isset($attributes['Attribute'][$k]['last_seen'])) {\n                $attributes['Attribute'][$k]['last_seen'] = null;\n            }\n            unset($attributes['Attribute'][$k]['save']);\n        }\n        return $attributes;\n    }\n\n    // Set Object's *-seen (and ObjectAttribute's *-seen and ObjectAttribute's value if requested) to the provided *-seen value\n    // Therefore, synchronizing the 3 values\n    public function syncObjectAndAttributeSeen($object, $forcedSeenOnElements, $applyOnAttribute=True) {\n        if (empty($forcedSeenOnElements)) {\n            return $object;\n        }\n        if (isset($forcedSeenOnElements['first_seen'])) {\n            $object['Object']['first_seen'] = $forcedSeenOnElements['first_seen'];\n        }\n        if (isset($forcedSeenOnElements['last_seen'])) {\n            $object['Object']['last_seen'] = $forcedSeenOnElements['last_seen'];\n        }\n        if ($applyOnAttribute) {\n            if (isset($object['Attribute'])) {\n                $attributes = $object['Attribute'];\n            } else {\n                $attributes = $this->find('first', array(\n                    'conditions' => array('id' => $object['Object']['id']),\n                    'contain' => array('Attribute')\n                ))['Attribute'];\n            }\n            foreach($attributes as $i => $attribute) {\n                if (isset($forcedSeenOnElements['first_seen'])) {\n                    $attributes[$i]['first_seen'] = $forcedSeenOnElements['first_seen'];\n                    if ($attribute['object_relation'] == 'first-seen') {\n                        $attributes[$i]['value'] = $forcedSeenOnElements['first_seen'];\n                    }\n                } elseif (isset($forcedSeenOnElements['last_seen'])) {\n                    $attributes[$i]['last_seen'] = $forcedSeenOnElements['last_seen'];\n                    if ($attribute['object_relation'] == 'last-seen') {\n                        $attributes[$i]['value'] = $forcedSeenOnElements['last_seen'];\n                    }\n                }\n            }\n            $object['Attribute'] = $attributes;\n        }\n        return $object;\n    }\n\n    public function deltaMerge($object, $objectToSave, $onlyAddNewAttribute=false, $user)\n    {\n        if (!isset($objectToSave['Object'])) {\n            $dataToBackup = array('ObjectReferences', 'Attribute', 'ShadowAttribute');\n            $backup = array();\n            foreach ($dataToBackup as $dtb) {\n                if (isset($objectToSave[$dtb])) {\n                    $backup[$dtb] = $objectToSave[$dtb];\n                    unset($objectToSave[$dtb]);\n                }\n            }\n            $objectToSave = array('Object' => $objectToSave);\n            foreach ($dataToBackup as $dtb) {\n                if (isset($backup[$dtb])) {\n                    $objectToSave[$dtb] = $backup[$dtb];\n                }\n            }\n            unset($dataToBackup);\n        }\n        if (isset($objectToSave['Object']['comment'])) {\n            $object['Object']['comment'] = $objectToSave['Object']['comment'];\n        }\n        if (isset($objectToSave['Object']['template_version'])) {\n            $object['Object']['template_version'] = $objectToSave['Object']['template_version'];\n        }\n        if (isset($objectToSave['Object']['distribution'])) {\n            $object['Object']['distribution'] = $objectToSave['Object']['distribution'];\n            if ($object['Object']['distribution'] == 4) {\n                $object['Object']['sharing_group_id'] = $objectToSave['Object']['sharing_group_id'];\n            }\n        }\n        $date = new DateTime();\n        $object['Object']['timestamp'] = $date->getTimestamp();\n        $forcedSeenOnElements = array();\n        if (isset($objectToSave['Object']['first_seen'])) {\n            $forcedSeenOnElements['first_seen'] = $objectToSave['Object']['first_seen'];\n        }\n        if (isset($objectToSave['Object']['last_seen'])) {\n            $forcedSeenOnElements['last_seen'] = $objectToSave['Object']['last_seen'];\n        }\n        $object = $this->syncObjectAndAttributeSeen($object, $forcedSeenOnElements, false);\n        $saveResult = $this->save($object);\n        if ($saveResult === false) {\n            return $this->validationErrors;\n        }\n\n        if (!$onlyAddNewAttribute) {\n            $checkFields = array('category', 'value', 'to_ids', 'distribution', 'sharing_group_id', 'comment', 'disable_correlation', 'first_seen', 'last_seen');\n            if (!empty($objectToSave['Attribute'])) {\n                foreach ($objectToSave['Attribute'] as $newKey => $newAttribute) {\n                    foreach ($object['Attribute'] as $origKey => $originalAttribute) {\n                        if (!empty($newAttribute['uuid'])) {\n                            if ($newAttribute['uuid'] == $originalAttribute['uuid']) {\n                                $different = false;\n                                foreach ($checkFields as $f) {\n                                    if ($f == 'sharing_group_id' && empty($newAttribute[$f])) {\n                                        $newAttribute[$f] = 0;\n                                    }\n                                    if (isset($newAttribute[$f]) && $this->attributeValueDifferent($originalAttribute[$f], $newAttribute[$f], $f)) {\n                                        $different = true;\n                                    }\n                                }\n                                if ($different) {\n                                    $newAttribute['id'] = $originalAttribute['id'];\n                                    $newAttribute['event_id'] = $object['Object']['event_id'];\n                                    $newAttribute['object_id'] = $object['Object']['id'];\n                                    $newAttribute['timestamp'] = $date->getTimestamp();\n                                    $result = $this->Event->Attribute->save(array('Attribute' => $newAttribute), array('fieldList' => $this->Attribute->editableFields));\n                                    if ($result) {\n                                        $this->Event->Attribute->AttributeTag->handleAttributeTags($user, $newAttribute, $newAttribute['event_id'], $capture=true);\n                                    }\n                                }\n                                unset($object['Attribute'][$origKey]);\n                                continue 2;\n                            }\n                        }\n                    }\n                    $this->Event->Attribute->create();\n                    $newAttribute['event_id'] = $object['Object']['event_id'];\n                    $newAttribute['object_id'] = $object['Object']['id'];\n                    // Set seen of object at attribute level\n                    if (isset($forcedSeenOnElements['first_seen'])) {\n                        $newAttribute['first_seen'] = empty($newAttribute['first_seen']) ? $forcedSeenOnElements['first_seen'] : $newAttribute['first_seen'];\n                        if ($newAttribute['object_relation'] == 'first-seen') {\n                            $newAttribute['value'] = $forcedSeenOnElements['first_seen'];\n                        }\n                    }\n                    if (isset($forcedSeenOnElements['last_seen'])) {\n                        $newAttribute['last_seen'] = empty($newAttribute['last_seen']) ? $forcedSeenOnElements['last_seen'] : $newAttribute['last_seen'];\n                        if ($newAttribute['object_relation'] == 'last-seen') {\n                            $newAttribute['value'] = $forcedSeenOnElements['last_seen'];\n                        }\n                    }\n                    if (!isset($newAttribute['distribution'])) {\n                        $newAttribute['distribution'] = Configure::read('MISP.default_attribute_distribution');\n                        if ($newAttribute['distribution'] == 'event') {\n                            $newAttribute['distribution'] = 5;\n                        }\n                    }\n                    $saveResult = $this->Event->Attribute->save($newAttribute);\n                    if ($saveResult) {\n                        $newAttribute['id'] = $this->Event->Attribute->id;\n                        $this->Event->Attribute->AttributeTag->handleAttributeTags($user, $newAttribute, $newAttribute['event_id'], $capture=true);\n                    }\n                    $attributeArrays['add'][] = $newAttribute;\n                    unset($objectToSave['Attribute'][$newKey]);\n                }\n                foreach ($object['Attribute'] as $origKey => $originalAttribute) {\n                    $originalAttribute['deleted'] = 1;\n                    $this->Event->Attribute->save($originalAttribute, array('fieldList' => $this->Attribute->editableFields));\n                }\n            }\n        } else { // we only add the new attribute\n            $newAttribute = $objectToSave['Attribute'][0];\n            $this->Event->Attribute->create();\n            $newAttribute['event_id'] = $object['Object']['event_id'];\n            $newAttribute['object_id'] = $object['Object']['id'];\n            // Set seen of object at attribute level\n            if (\n                (!array_key_exists('first_seen', $newAttribute) || is_null($newAttribute['first_seen'])) &&\n                (!array_key_exists('first_seen', $object['Object']) && !is_null($object['Object']['first_seen']))\n            ) {\n                $newAttribute['first_seen'] = $object['Object']['first_seen'];\n            }\n            if (\n                (!array_key_exists('last_seen', $newAttribute) || is_null($newAttribute['last_seen'])) &&\n                (!array_key_exists('last_seen', $object['Object']) && !is_null($object['Object']['last_seen']))\n            ) {\n                $newAttribute['last_seen'] = $object['Object']['last_seen'];\n                $different = true;\n            }\n            if (!isset($newAttribute['distribution'])) {\n                $newAttribute['distribution'] = Configure::read('MISP.default_attribute_distribution');\n                if ($newAttribute['distribution'] == 'event') {\n                    $newAttribute['distribution'] = 5;\n                }\n            }\n            $saveAttributeResult = $this->Attribute->saveAttributes(array($newAttribute), $user);\n            return $saveAttributeResult ? $this->id : $this->validationErrors;\n        }\n        return $this->id;\n    }\n\n    public function captureObject($object, $eventId, $user, $log = false, $unpublish = true, $breakOnDuplicate = false)\n    {\n        $this->create();\n        if (!isset($object['Object'])) {\n            $object = array('Object' => $object);\n        }\n        if (!empty($object['Object']['breakOnDuplicate']) || $breakOnDuplicate) {\n            $duplicate = $this->checkForDuplicateObjects($object, $eventId);\n            if ($duplicate) {\n                $log->create();\n                $log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Object',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'add',\n                        'user_id' => $user['id'],\n                        'title' => 'Object dropped due to it being a duplicate and breakOnDuplicate being requested for Event ' . $eventId,\n                        'change' => 'Duplicate object found.',\n                ));\n                return true;\n            }\n        }\n        if (empty($log)) {\n            $log = ClassRegistry::init('Log');\n        }\n        if (isset($object['Object']['id'])) {\n            unset($object['Object']['id']);\n        }\n        $object['Object']['event_id'] = $eventId;\n        if ($this->save($object)) {\n            if ($unpublish) {\n                $this->Event->unpublishEvent($eventId);\n            }\n            $objectId = $this->id;\n            $partialFails = array();\n            if (!empty($object['Object']['Attribute'])) {\n                foreach ($object['Object']['Attribute'] as $attribute) {\n                    $this->Attribute->captureAttribute($attribute, $eventId, $user, $objectId, $log);\n                }\n            }\n            return true;\n        } else {\n            $log->create();\n            $log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Object',\n                    'model_id' => 0,\n                    'email' => $user['email'],\n                    'action' => 'add',\n                    'user_id' => $user['id'],\n                    'title' => 'Object dropped due to validation for Event ' . $eventId . ' failed: ' . $object['Object']['name'],\n                    'change' => 'Validation errors: ' . json_encode($this->validationErrors) . ' Full Object: ' . json_encode($object),\n            ));\n        }\n        return 'fail';\n    }\n\n    public function editObject($object, $eventId, $user, $log, $force = false, &$nothingToChange = false)\n    {\n        $object['event_id'] = $eventId;\n        if (isset($object['distribution']) && $object['distribution'] == 4) {\n            if (!empty($object['SharingGroup'])) {\n                $object['sharing_group_id'] = $this->SharingGroup->captureSG($object['SharingGroup'], $user);\n            } elseif (!empty($object['sharing_group_id'])) {\n                if (!$this->SharingGroup->checkIfAuthorised($user, $object['sharing_group_id'])) {\n                    unset($object['sharing_group_id']);\n                }\n            }\n            if (empty($object['sharing_group_id'])) {\n                $object_short = (isset($object['meta-category']) ? $object['meta-category'] : 'N/A') . '/' . (isset($object['name']) ? $object['name'] : 'N/A') . ' ' . (isset($object['uuid']) ? $object['uuid'] : 'N/A');\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'MispObject',\n                    'model_id' => 0,\n                    'email' => $user['email'],\n                    'action' => 'edit',\n                    'user_id' => $user['id'],\n                    'title' => 'Object dropped due to invalid sharing group for Event ' . $eventId . ' failed: ' . $object_short,\n                    'change' => 'Validation errors: ' . json_encode($this->validationErrors) . ' Full Object: ' . json_encode($object),\n                ));\n                return 'Invalid sharing group choice.';\n            }\n        }\n        if (isset($object['uuid'])) {\n            $existingObject = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Object.uuid' => $object['uuid'])\n            ));\n            if (empty($existingObject)) {\n                return $this->captureObject($object, $eventId, $user, $log);\n            } else {\n                if ($existingObject['Object']['event_id'] != $eventId) {\n                    $log->create();\n                    $log->save(array(\n                            'org' => $user['Organisation']['name'],\n                            'model' => 'MispObject',\n                            'model_id' => 0,\n                            'email' => $user['email'],\n                            'action' => 'edit',\n                            'user_id' => $user['id'],\n                            'title' => 'Duplicate UUID found in object',\n                            'change' => 'An object was blocked from being saved due to a duplicate UUID. The uuid in question is: ' . $object['uuid'] . '. This can also be due to the same object (or an object with the same UUID) existing in a different event)',\n                    ));\n                    return true;\n                }\n                if (isset($object['timestamp'])) {\n                    if ($force || $existingObject['Object']['timestamp'] >= $object['timestamp']) {\n                        $nothingToChange = true;\n                        return true;\n                    }\n                } else {\n                    $date = new DateTime();\n                    $object['timestamp'] = $date->getTimestamp();\n                }\n            }\n        } else {\n            return $this->captureObject($object, $eventId, $user, $log);\n        }\n        // At this point we have an existingObject that we can edit\n        $recoverFields = array(\n            'name',\n            'meta-category',\n            'description',\n            'template_uuid',\n            'template_version',\n            'distribution',\n            'sharing_group_id',\n            'comment',\n            'deleted'\n        );\n        foreach ($recoverFields as $rF) {\n            if (!isset($object[$rF])) {\n                $object[$rF] = $existingObject['Object'][$rF];\n            }\n        }\n        $object['id'] = $existingObject['Object']['id'];\n        $object['uuid'] = $existingObject['Object']['uuid'];\n        $object['event_id'] = $eventId;\n        if ($object['distribution'] == 4) {\n            $object['sharing_group_id'] = $this->SharingGroup->captureSG($object['SharingGroup'], $user);\n        }\n        if (!$this->save($object)) {\n            $log->create();\n            $log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Object',\n                'model_id' => 0,\n                'email' => $user['email'],\n                'action' => 'edit',\n                'user_id' => $user['id'],\n                'title' => 'Attribute dropped due to validation for Event ' . $eventId . ' failed: ' . $object['name'],\n                'change' => 'Validation errors: ' . json_encode($this->validationErrors) . ' Full Object: ' . json_encode($attribute),\n            ));\n            return $this->validationErrors;\n        }\n        if (!empty($object['Attribute'])) {\n            foreach ($object['Attribute'] as $attribute) {\n                $result = $this->Attribute->editAttribute($attribute, $eventId, $user, $object['id'], $log, $force);\n            }\n        }\n        return true;\n    }\n\n    public function deleteObject(array $object, $hard=false, $unpublish=true)\n    {\n        $id = $object['Object']['id'];\n        if ($hard) {\n            // For a hard delete, simply run the delete, it will cascade\n            $this->delete($id);\n        } else {\n            // For soft deletes, sanitise the object first if the setting is enabled\n            if (Configure::read('Security.sanitise_attribute_on_delete')) {\n                $object['Object']['name'] = 'N/A';\n                $object['Object']['category'] = 'N/A';\n                $object['Object']['description'] = 'N/A';\n                $object['Object']['template_uuid'] = 'N/A';\n                $object['Object']['template_version'] = 0;\n                $object['Object']['comment'] = '';\n            }\n            $date = new DateTime();\n            $object['Object']['deleted'] = 1;\n            $object['Object']['timestamp'] = $date->getTimestamp();\n            $saveResult = $this->save($object);\n            if (!$saveResult) {\n                return $saveResult;\n            }\n            foreach ($object['Attribute'] as $attribute) {\n                if (Configure::read('Security.sanitise_attribute_on_delete')) {\n                    $attribute['category'] = 'Other';\n                    $attribute['type'] = 'comment';\n                    $attribute['value'] = 'deleted';\n                    $attribute['comment'] = '';\n                    $attribute['to_ids'] = 0;\n                }\n                $attribute['deleted'] = 1;\n                $attribute['timestamp'] = $date->getTimestamp();\n                $this->Attribute->save(array('Attribute' => $attribute));\n                $this->Event->ShadowAttribute->deleteAll(\n                    array('ShadowAttribute.old_id' => $attribute['id']),\n                    false\n                );\n            }\n            if ($unpublish) {\n                $this->Event->unpublishEvent($object['Event']['id']);\n            }\n            $object_refs = $this->ObjectReference->find('all', array(\n                'conditions' => array(\n                    'ObjectReference.referenced_type' => 1,\n                    'ObjectReference.referenced_id' => $id,\n                ),\n                'recursive' => -1\n            ));\n            foreach ($object_refs as $ref) {\n                $ref['ObjectReference']['deleted'] = 1;\n                $this->ObjectReference->save($ref);\n            }\n        }\n        return true;\n    }\n\n    public function updateTimestamp($id, $timestamp = false)\n    {\n        $date = new DateTime();\n        $object = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Object.id' => $id)\n        ));\n        $object['Object']['timestamp'] = $timestamp == false ? $date->getTimestamp() : $timestamp;\n        $object['Object']['skip_zmq'] = 1;\n        $object['Object']['skip_kafka'] = 1;\n        $result = $this->save($object);\n        return $result;\n    }\n\n    // Hunt down all LEDA and CASTOR clones\n    public function removeOrphanedObjects()\n    {\n        $orphans = $this->find('list', array(\n            'fields' => array('Object.id', 'Object.id'),\n            'conditions' => array('Event.id' => null),\n            'contain' => array('Event' => array('fields' => array('id')))\n        ));\n        foreach ($orphans as $orphan) {\n            $this->delete($orphan);\n        }\n        return count($orphans);\n    }\n\n    public function validObjectsFromAttributeTypes($user, $event_id, $selected_attribute_ids)\n    {\n        $attributes = $this->Attribute->fetchAttributes($user,\n            array(\n                'conditions' => array(\n                    'Attribute.id' => $selected_attribute_ids,\n                    'Attribute.event_id' => $event_id,\n                    'Attribute.object_id' => 0\n                ),\n            )\n        );\n        if (empty($attributes)) {\n            return array('templates' => array(), 'types' => array());\n        }\n        $attribute_types = array();\n        foreach ($attributes as $i => $attribute) {\n            $attribute_types[$attribute['Attribute']['type']] = 1;\n            $attributes[$i]['Attribute']['object_relation'] = $attribute['Attribute']['type'];\n        }\n        $attribute_types = array_keys($attribute_types);\n\n        $potential_templates = $this->ObjectTemplate->find('list', array(\n            'recursive' => -1,\n            'fields' => array(\n                'ObjectTemplate.id',\n                'COUNT(ObjectTemplateElement.type) as type_count'\n            ),\n            'conditions' => array(\n                'ObjectTemplate.active' => true,\n                'ObjectTemplateElement.type' => $attribute_types\n            ),\n            'joins' => array(\n                array(\n                    'table' => 'object_template_elements',\n                    'alias' => 'ObjectTemplateElement',\n                    'type' => 'RIGHT',\n                    'fields' => array('ObjectTemplateElement.object_relation', 'ObjectTemplateElement.type'),\n                    'conditions' => array('ObjectTemplate.id = ObjectTemplateElement.object_template_id')\n                )\n            ),\n            'group' => 'ObjectTemplate.id',\n            'order' => 'type_count DESC'\n        ));\n\n        $potential_template_ids = array_keys($potential_templates);\n        $templates = $this->ObjectTemplate->find('all', array(\n            'recursive' => -1,\n            'conditions' => array('id' => $potential_template_ids),\n            'contain' => 'ObjectTemplateElement'\n        ));\n\n        foreach ($templates as $i => $template) {\n            $res = $this->ObjectTemplate->checkTemplateConformityBasedOnTypes($template, $attributes);\n            $templates[$i]['ObjectTemplate']['compatibility'] = $res['valid'] ? true : $res['missingTypes'];\n            $templates[$i]['ObjectTemplate']['invalidTypes'] = $res['invalidTypes'];\n            $templates[$i]['ObjectTemplate']['invalidTypesMultiple'] = $res['invalidTypesMultiple'];\n        }\n        return array('templates' => $templates, 'types' => $attribute_types);\n    }\n\n    public function groupAttributesIntoObject($user, $event_id, $object, $template, $selected_attribute_ids, $selected_object_relation_mapping, $hard_delete_attribute)\n    {\n        $saved_object_id = $this->saveObject($object, $event_id, $template, $user);\n        if (!is_numeric($saved_object_id)) {\n            return $saved_object_id;\n        }\n\n        $saved_object = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Object.id' => $saved_object_id)\n        ));\n\n        $existing_attributes = $this->Attribute->fetchAttributes($user, array('conditions' => array(\n            'Attribute.id' => $selected_attribute_ids,\n            'Attribute.event_id' => $event_id,\n            'Attribute.object_id' => 0\n        )));\n\n        if (empty($existing_attributes)) {\n            return __('Selected Attributes do not exist.');\n        }\n        $event = array('Event' => $existing_attributes[0]['Event']);\n\n        // Duplicate the attribute and its context, otherwise connected instances will drop the duplicated UUID\n        foreach ($existing_attributes as $i => $existing_attribute) {\n            if (isset($selected_object_relation_mapping[$existing_attribute['Attribute']['id']])) {\n                $sightings = $this->Event->Sighting->attachToEvent($event, $user, $existing_attribute['Attribute']['id']);\n                $object_relation = $selected_object_relation_mapping[$existing_attribute['Attribute']['id']];\n                $created_attribute = $existing_attribute['Attribute'];\n                unset($created_attribute['timestamp']);\n                unset($created_attribute['id']);\n                unset($created_attribute['uuid']);\n                $created_attribute['object_relation'] = $object_relation;\n                $created_attribute['object_id'] = $saved_object['Object']['id'];\n                if (isset($existing_attribute['AttributeTag'])) {\n                    $created_attribute['AttributeTag'] = $existing_attribute['AttributeTag'];\n                }\n                if (!empty($sightings)) {\n                    $created_attribute['Sighting'] = $sightings;\n                }\n                $saved_object['Attribute'][$i] = $created_attribute;\n                $this->Attribute->captureAttribute($created_attribute, $event_id, $user, $saved_object['Object']['id']);\n                $this->Attribute->deleteAttribute($existing_attribute['Attribute']['id'], $user, $hard_delete_attribute);\n            }\n        }\n        return $saved_object['Object']['id'];\n\n    }\n\n    public function resolveUpdatedTemplate($template, $object, $update_template_available = false)\n    {\n        $toReturn = array(\n            'updateable_attribute' => false,\n            'not_updateable_attribute' => false,\n            'newer_template_version' => false,\n            'original_template_unkown' => false,\n            'template' => $template\n        );\n        $newer_template = $this->ObjectTemplate->find('first', array(\n            'conditions' => array(\n                'ObjectTemplate.uuid' => $object['Object']['template_uuid'],\n                'ObjectTemplate.version >' => $object['Object']['template_version'],\n            ),\n            'recursive' => -1,\n            'contain' => array(\n                'ObjectTemplateElement'\n            ),\n            'order' => array('ObjectTemplate.version DESC')\n        ));\n        $template_difference = array();\n        if (!empty($newer_template)) {\n            $toReturn['newer_template_version'] = !$newer_template['ObjectTemplate']['version'];\n            $newer_template_temp = Hash::remove(Hash::remove($newer_template['ObjectTemplateElement'], '{n}.id'), '{n}.object_template_id');\n            if (!empty($template)) {\n                // ignore IDs for comparison\n                $cur_template_temp = Hash::remove(Hash::remove($template['ObjectTemplateElement'], '{n}.id'), '{n}.object_template_id');\n\n                // check how current template is included in the newer\n                foreach ($cur_template_temp as $cur_obj_rel) {\n                    $flag_sim = false;\n                    foreach ($newer_template_temp as $newer_obj_rel) {\n                        $tmp = Hash::diff($cur_obj_rel, $newer_obj_rel);\n                        if (count($tmp) == 0) {\n                            $flag_sim = true;\n                            break;\n                        }\n                    }\n                    if (!$flag_sim) {\n                        $template_difference[] = $cur_obj_rel;\n                    }\n                }\n            } else { // original template unkown\n                $toReturn['original_template_unkown'] = true;\n                $unmatched_attributes = array();\n                foreach ($object['Attribute'] as $i => $attribute) {\n                    $flag_match = false;\n                    foreach ($newer_template_temp as $newer_obj_rel) {\n                        if (\n                            $newer_obj_rel['object_relation'] == $attribute['object_relation'] &&\n                            $newer_obj_rel['type'] == $attribute['type']\n                        ) {\n                            $flag_match = true;\n                            break;\n                        }\n                    }\n                    if (!$flag_match) {\n                        $unmatched_attributes[] = $attribute;\n                    }\n                }\n\n                // simulate unkown template from the attribute\n                foreach ($unmatched_attributes as $unmatched_attribute) {\n                    $template_difference[] = [\n                        'object_relation' => $unmatched_attribute['object_relation'],\n                        'type' => $unmatched_attribute['type']\n                    ];\n                }\n            }\n            $toReturn['updateable_attribute'] = $object['Attribute'];\n            $toReturn['not_updateable_attribute'] = array();\n        } else {\n            $toReturn['newer_template_version'] = false;\n        }\n        if (!empty($template_difference)) { // older template not completely embeded in newer\n            foreach ($template_difference as $temp_diff_element) {\n                foreach ($object['Attribute'] as $i => $attribute) {\n                    if (\n                        $attribute['object_relation'] == $temp_diff_element['object_relation']\n                        && $attribute['type'] == $temp_diff_element['type']\n                    ) { // This attribute cannot be merged automatically\n                        $attribute['merge-possible'] = false;\n                        $toReturn['not_updateable_attribute'][] = $attribute;\n                        unset($toReturn['updateable_attribute'][$i]);\n                    }\n                }\n            }\n        }\n        if ($update_template_available) { // template version bump requested\n            $toReturn['template'] = $newer_template; // bump the template version\n        }\n        return $toReturn;\n    }\n\n    public function reviseObject($revised_object, $object, $template) {\n        $revised_object_both = array('mergeable' => array(), 'notMergeable' => array());\n\n        // Loop through attributes to inject and perform the correct action\n        // (inject, duplicate, add warnings, ...) when applicable\n        foreach ($revised_object['Attribute'] as $attribute_to_inject) {\n            $flag_no_collision = true;\n            foreach ($object['Attribute'] as $attribute) {\n                if (\n                    $attribute['object_relation'] == $attribute_to_inject['object_relation']\n                    && $attribute['type'] == $attribute_to_inject['type']\n                    && $attribute['value'] !== $attribute_to_inject['value']\n                ) { // Collision on value\n                    $multiple = !empty(Hash::extract($template['ObjectTemplateElement'], sprintf('{n}[object_relation=%s][type=%s][multiple=true]', $attribute['object_relation'], $attribute['type'])));\n                    if ($multiple) { // if multiple is set, check if an entry exists already\n                        $flag_entry_exists = false;\n                        foreach ($object['Attribute'] as $attr) {\n                            if (\n                                $attr['object_relation'] == $attribute_to_inject['object_relation']\n                                && $attr['type'] == $attribute_to_inject['type']\n                                && $attr['value'] === $attribute_to_inject['value']\n                            ) {\n                                $flag_entry_exists = true;\n                                break;\n                            }\n                        }\n                        if (!$flag_entry_exists) { // entry does no exists, can be duplicated\n                            $attribute_to_inject['is_multiple'] = true;\n                            $revised_object_both['mergeable'][] = $attribute_to_inject;\n                            $object['Attribute'][] = $attribute_to_inject;\n                        }\n                    } else { // Collision on value, multiple not set => propose overwrite\n                        $attribute_to_inject['current_value'] = $attribute['value'];\n                        $attribute_to_inject['merge-possible'] = true; // the user can still swap value\n                        $revised_object_both['notMergeable'][] = $attribute_to_inject;\n                    }\n                    $flag_no_collision = false;\n                } else if (\n                    $attribute['object_relation'] == $attribute_to_inject['object_relation']\n                     && $attribute['type'] == $attribute_to_inject['type']\n                     && $attribute['value'] === $attribute_to_inject['value']\n                ) { // all good, they are basically the same, do nothing\n                    $revised_object_both['mergeable'][] = $attribute_to_inject;\n                    $flag_no_collision = false;\n                }\n            }\n            if ($flag_no_collision) { // no collision, nor equalities => inject it straight away\n                $revised_object_both['mergeable'][] = $attribute_to_inject;\n                $object['Attribute'][] = $attribute_to_inject;\n            }\n        }\n        return array(\n            'object' => $object,\n            'revised_object_both' => $revised_object_both\n        );\n    }\n\n    public function restSearch($user, $returnFormat, $filters, $paramsOnly = false, $jobId = false, &$elementCounter = 0, &$renderView = false)\n    {\n        if (!isset($this->validFormats[$returnFormat][1])) {\n            throw new NotFoundException('Invalid output format.');\n        }\n        App::uses($this->validFormats[$returnFormat][1], 'Export');\n        $exportTool = new $this->validFormats[$returnFormat][1]();\n        if (empty($exportTool->non_restrictive_export)) {\n            if (!isset($filters['to_ids'])) {\n                $filters['to_ids'] = 1;\n            }\n            if (!isset($filters['published'])) {\n                $filters['published'] = 1;\n            }\n            $filters['allow_proposal_blocking'] = 1;\n        }\n        if (!empty($filters['quickFilter'])) {\n            $filters['searchall'] = $filters['quickFilter'];\n            if (!empty($filters['value'])) {\n                unset($filters['value']);\n            }\n        }\n        if (!empty($exportTool->renderView)) {\n            $renderView = $exportTool->renderView;\n        }\n        if (isset($filters['searchall'])) {\n            if (!empty($filters['value'])) {\n                $filters['wildcard'] = $filters['value'];\n                unset($filters['value']);\n            } else {\n                $filters['wildcard'] = $filters['searchall'];\n            }\n        }\n        $subqueryElements = $this->Event->harvestSubqueryElements($filters);\n        $filters = $this->Event->addFiltersFromSubqueryElements($filters, $subqueryElements, $user);\n        $filters = $this->Event->addFiltersFromUserSettings($user, $filters);\n        $conditions = $this->buildFilterConditions($filters);\n        $params = array(\n            'conditions' => $conditions,\n            'fields' => array('Attribute.*', 'Event.org_id', 'Event.distribution', 'Object.*'),\n            'withAttachments' => !empty($filters['withAttachments']) ? $filters['withAttachments'] : 0,\n            'enforceWarninglist' => !empty($filters['enforceWarninglist']) ? $filters['enforceWarninglist'] : 0,\n            'includeAllTags' => !empty($filters['includeAllTags']) ? $filters['includeAllTags'] : 0,\n            'includeEventUuid' => !empty($filters['includeEventUuid']) ? $filters['includeEventUuid'] : 0,\n            'includeEventTags' => !empty($filters['includeEventTags']) ? $filters['includeEventTags'] : 0,\n            'includeProposals' => !empty($filters['includeProposals']) ? $filters['includeProposals'] : 0,\n            'includeWarninglistHits' => !empty($filters['includeWarninglistHits']) ? $filters['includeWarninglistHits'] : 0,\n            'includeContext' => !empty($filters['includeContext']) ? $filters['includeContext'] : 0,\n            'includeSightings' => !empty($filters['includeSightings']) ? $filters['includeSightings'] : 0,\n            'includeSightingdb' => !empty($filters['includeSightingdb']) ? $filters['includeSightingdb'] : 0,\n            'includeCorrelations' => !empty($filters['includeCorrelations']) ? $filters['includeCorrelations'] : 0,\n            'includeDecayScore' => !empty($filters['includeDecayScore']) ? $filters['includeDecayScore'] : 0,\n            'includeFullModel' => !empty($filters['includeFullModel']) ? $filters['includeFullModel'] : 0,\n            'allow_proposal_blocking' => !empty($filters['allow_proposal_blocking']) ? $filters['allow_proposal_blocking'] : 0,\n            'metadata' => !empty($filters['metadata']) ? $filters['metadata'] : 0,\n        );\n        if (!empty($filters['attackGalaxy'])) {\n            $params['attackGalaxy'] = $filters['attackGalaxy'];\n        }\n        if (isset($filters['include_event_uuid'])) {\n            $params['includeEventUuid'] = $filters['include_event_uuid'];\n        }\n        if (isset($filters['limit'])) {\n            $params['limit'] = $filters['limit'];\n            if (!isset($filters['page'])) {\n                $filters['page'] = 1;\n            }\n        }\n        if (isset($filters['page'])) {\n            $params['page'] = $filters['page'];\n        }\n        if (!empty($filters['deleted'])) {\n            $params['deleted'] = $filters['deleted'];\n        }\n        if (!empty($filters['excludeDecayed'])) {\n            $params['excludeDecayed'] = $filters['excludeDecayed'];\n            $params['includeDecayScore'] = 1;\n        }\n        if (!empty($filters['decayingModel'])) {\n            $params['decayingModel'] = $filters['decayingModel'];\n        }\n        if (!empty($filters['modelOverrides'])) {\n            $params['modelOverrides'] = $filters['modelOverrides'];\n        }\n        if (!empty($filters['score'])) {\n            $params['score'] = $filters['score'];\n        }\n        if (!empty($filters['metadata'])) {\n            $params['metadata'] = $filters['metadata'];\n        }\n        if ($paramsOnly) {\n            return $params;\n        }\n        if (method_exists($exportTool, 'modify_params')) {\n            $params = $exportTool->modify_params($user, $params);\n        }\n        $exportToolParams = array(\n            'user' => $user,\n            'params' => $params,\n            'returnFormat' => $returnFormat,\n            'scope' => 'Object',\n            'filters' => $filters\n        );\n        if (!empty($exportTool->additional_params)) {\n            $params = array_merge_recursive(\n                $params,\n                $exportTool->additional_params\n            );\n        }\n        $tmpfile = new TmpFileTool();\n        $tmpfile->write($exportTool->header($exportToolParams));\n        $loop = false;\n        if (empty($params['limit'])) {\n            $memory_in_mb = $this->convert_to_memory_limit_to_mb(ini_get('memory_limit'));\n            $default_attribute_memory_coefficient = Configure::check('MISP.default_attribute_memory_coefficient') ? Configure::read('MISP.default_attribute_memory_coefficient') : 80;\n            $memory_scaling_factor = isset($exportTool->memory_scaling_factor) ? $exportTool->memory_scaling_factor : $default_attribute_memory_coefficient;\n            $params['limit'] = $memory_in_mb * $memory_scaling_factor / 10;\n            $loop = true;\n            $params['page'] = 1;\n        }\n        $this->__iteratedFetch($user, $params, $loop, $tmpfile, $exportTool, $exportToolParams, $elementCounter);\n        $tmpfile->write($exportTool->footer($exportToolParams));\n        return $tmpfile;\n    }\n\n    private function __iteratedFetch($user, &$params, &$loop, TmpFileTool $tmpfile, $exportTool, $exportToolParams, &$elementCounter = 0)\n    {\n        $continue = true;\n        while ($continue) {\n            $temp = '';\n            $this->Allowedlist = ClassRegistry::init('Allowedlist');\n            $results = $this->fetchObjects($user, $params, $continue);\n            if (empty($results)) {\n                $loop = false;\n                return true;\n            }\n            if ($elementCounter !== 0 && !empty($results)) {\n                $temp .= $exportTool->separator($exportToolParams);\n            }\n            if ($params['includeSightingdb']) {\n                $this->Sightingdb = ClassRegistry::init('Sightingdb');\n                $results = $this->Sightingdb->attachToObjects($results, $user);\n            }\n            $params['page'] += 1;\n            $results = $this->Allowedlist->removeAllowedlistedFromArray($results, true);\n            $results = array_values($results);\n            $i = 0;\n            foreach ($results as $object) {\n                $elementCounter++;\n                $handlerResult = $exportTool->handler($object, $exportToolParams);\n                $temp .= $handlerResult;\n                if ($handlerResult !== '') {\n                    if ($i != count($results) -1) {\n                        $temp .= $exportTool->separator($exportToolParams);\n                    }\n                }\n                $i++;\n            }\n            if (!$loop) {\n                $continue = false;\n            }\n            $tmpfile->write($temp);\n        }\n        return true;\n    }\n\n    private function attributeValueDifferent($newValue, $originalValue, $field)\n    {\n        if (in_array($field, ['first_seen', 'last_seen'])) {\n            return new DateTime($newValue) != new DateTime($originalValue);\n        } else {\n            return $newValue != $originalValue;\n        }\n    }\n}\n"], "filenames": ["app/Model/MispObject.php"], "buggy_code_start_loc": [966], "buggy_code_end_loc": [980], "fixing_code_start_loc": [967], "fixing_code_end_loc": [1005], "type": "CWE-212", "message": "In app/Model/MispObject.php in MISP 2.4.141, an incorrect sharing group association could lead to information disclosure on an event edit. When an object has a sharing group associated with an event edit, the sharing group object is ignored and instead the passed local ID is reused.", "other": {"cve": {"id": "CVE-2021-31780", "sourceIdentifier": "cve@mitre.org", "published": "2021-04-23T20:15:08.027", "lastModified": "2021-05-05T20:06:49.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In app/Model/MispObject.php in MISP 2.4.141, an incorrect sharing group association could lead to information disclosure on an event edit. When an object has a sharing group associated with an event edit, the sharing group object is ignored and instead the passed local ID is reused."}, {"lang": "es", "value": "En el archivo app/Model/MispObject.php en MISP versi\u00f3n 2.4.141, una asociaci\u00f3n de grupo de intercambio incorrecta podr\u00eda conllevar a la divulgaci\u00f3n de informaci\u00f3n en una edici\u00f3n de evento.&#xa0;Cuando un objeto presenta un grupo para compartir asociado con una edici\u00f3n de evento, el objeto del grupo para compartir se ignora y, en su lugar, es reutilizado la ID local pasado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-212"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.141:*:*:*:*:*:*:*", "matchCriteriaId": "0709C4C6-DB6A-459D-BA1C-23198DC2F894"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/a0f08501d2850025892e703f40fb1570c7995478", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/a0f08501d2850025892e703f40fb1570c7995478"}}