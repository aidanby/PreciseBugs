{"buggy_code": ["<?php\n/**\n * \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 InstantCMS\n */\nclass cmsConfig extends cmsConfigs {\n\n    /**\n     * \u0421\u0438\u043d\u0433\u043b\u0442\u043e\u043d\n     * @var object\n     */\n    private static $instance = null;\n\n    /**\n     * \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0435\u043c\u0430\u043f\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\n     *\n     * @var array\n     */\n    private static $mapping  = null;\n\n    /**\n     * \u0424\u043b\u0430\u0433, \u0447\u0442\u043e \u043a\u043e\u043d\u0444\u0438\u0433 \u0441\u0430\u0439\u0442\u0430 \u0435\u0441\u0442\u044c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\n     * @var boolean\n     */\n    private $ready = false;\n\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n\n    public static function get($key) {\n        return self::getInstance()->$key;\n    }\n\n    /**\n     * \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u0435\u043c\u0430\u043f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\n     * http://docs.instantcms.ru/manual/settings/rewriting\n     *\n     * @return array\n     */\n    public static function getControllersMapping() {\n\n        if (self::$mapping !== null) {\n            return self::$mapping;\n        }\n\n        self::$mapping = [];\n\n        $map_file     = PATH . parent::CONFIG_DIR . 'remap.php';\n        $map_function = 'remap_controllers';\n\n        if (!is_readable($map_file)) {\n            return self::$mapping;\n        }\n\n        include_once $map_file;\n\n        if (!function_exists($map_function)) {\n            return self::$mapping;\n        }\n\n        self::$mapping = call_user_func($map_function);\n\n        if (!is_array(self::$mapping)) {\n            return [];\n        }\n\n        return self::$mapping;\n    }\n\n    public function __construct($cfg_file = 'config.php') {\n\n        parent::__construct($cfg_file);\n\n        if (!$this->data) {\n            return;\n        }\n\n        $this->setData();\n\n        $this->initErrorReporting();\n\n        $this->ready = true;\n    }\n\n    /**\n     * \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0435\u0441\u0442\u044c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430\n     * @return boolean\n     */\n    public function isReady() {\n        return $this->ready;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\n     *\n     * @return bool\n     */\n    public function setData() {\n\n        if (empty($this->data['detect_ip_key']) || !isset($_SERVER[$this->data['detect_ip_key']])) {\n            $this->data['detect_ip_key'] = 'REMOTE_ADDR';\n        }\n\n        if (empty($this->data['session_save_path'])) {\n\n            $this->data['session_save_path'] = session_save_path();\n\n            if (empty($this->data['session_save_path'])) {\n                $this->data['session_save_path'] = rtrim(sys_get_temp_dir(), '/');\n            }\n\n            if (!is_writable($this->data['session_save_path'])) {\n                $this->data['session_save_path'] = '';\n            }\n        }\n\n        // \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u043e\u0435 \u0434\u043b\u044f 2.14.0\n        if (!array_key_exists('allow_users_time_zone', $this->data)) {\n            $this->data['allow_users_time_zone'] = 1;\n        }\n        if (!array_key_exists('bcmathscale', $this->data)) {\n            $this->data['bcmathscale'] = 8;\n        }\n        // \u0421\u0442\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443, \u0434\u043b\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n        define('BCMATHSCALE', $this->data['bcmathscale']);\n        // \u0440\u0430\u0437\u0440\u044f\u0434\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n        if(function_exists('bcscale')){\n            bcscale($this->data['bcmathscale']);\n        }\n\n        if (empty($this->data['native_yaml']) || !function_exists('yaml_emit')) {\n            $this->data['native_yaml'] = 0;\n        }\n\n        $this->upload_host_abs = $this->upload_host;\n\n        if (mb_strpos($this->upload_host, $this->host) === 0) {\n            $url_parts = parse_url(trim($this->host, '/'));\n            $host = empty($url_parts['path']) ? $this->host : $url_parts['scheme'] . '://' . $url_parts['host'];\n            $this->upload_host = str_replace($host, '', $this->upload_host);\n            $replace_upload_host_protocol = true;\n        }\n\n        $this->set('document_root', rtrim(PATH, $this->root));\n        $this->set('root_path', PATH . DIRECTORY_SEPARATOR);\n        $this->set('system_path', $this->root_path . 'system/');\n        $this->set('upload_path', $this->document_root . $this->upload_root);\n        $this->set('cache_path', $this->document_root . $this->cache_root);\n\n        $protocol = 'http://';\n        if (\n                (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ||\n                (!empty($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443) ||\n                (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https')\n        ) {\n            $protocol = 'https://';\n            $this->host = str_replace('http://', $protocol, $this->host);\n            if (!empty($replace_upload_host_protocol)) {\n                $this->upload_host_abs = str_replace('http://', $protocol, $this->upload_host_abs);\n            }\n        }\n\n        $this->set('protocol', $protocol);\n\n        if (!empty($_SERVER['HTTP_HOST'])) {\n            $this->set('current_domain', $_SERVER['HTTP_HOST']);\n        }\n\n        return true;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043e\u0448\u0438\u0431\u043e\u043a PHP\n     */\n    private function initErrorReporting() {\n\n        error_reporting(E_ALL);\n\n        ini_set('log_errors', true);\n\n        // \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0432 .htaccess \u0438\u043b\u0438 \u0432 Apache\n        // \u0415\u0451 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0434\u0435\u0441\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\n        ini_set('display_errors', $this->data['debug']);\n        ini_set('display_startup_errors', $this->data['debug']);\n\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTPS\n     *\n     * @return boolean\n     */\n    public static function isSecureProtocol() {\n        return self::get('protocol') === 'https://';\n    }\n\n}\n", "<?php\n\ndefine('GUEST_GROUP_ID', 1);\ndefine('DEF_GROUP_ID', 3);\n#[\\AllowDynamicProperties]\nclass cmsUser {\n\n    const USER_ONLINE_INTERVAL      = 180;\n    const AUTH_TOKEN_EXPIRATION_INT = 8640000; // 100 \u0434\u043d\u0435\u0439\n\n    private static $instance;\n    private static $_ip;\n    public static $auth_token;\n    private static $cached_online = [];\n\n    public $id = 0;\n    public $email;\n    public $password;\n    public $nickname;\n    public $date_log;\n    public $is_admin   = 0;\n    public $is_logged  = false;\n    public $friends    = [];\n    public $subscribes = [];\n\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n\n    public static function get($key) {\n        return isset(self::getInstance()->$key) ? self::getInstance()->$key : null;\n    }\n\n    public static function getIp() {\n\n        if (self::$_ip === null) {\n\n            $config = cmsConfig::getInstance();\n\n            self::$_ip = isset($_SERVER[$config->detect_ip_key]) ? $_SERVER[$config->detect_ip_key] : '127.0.0.1';\n\n            if (!filter_var(self::$_ip, FILTER_VALIDATE_IP)) {\n                self::$_ip = '127.0.0.1';\n            }\n        }\n\n        return self::$_ip;\n    }\n\n    public static function setIp($ip) {\n        self::$_ip = $ip;\n\n    }\n\n    public function __construct() {\n\n        $this->groups   = [GUEST_GROUP_ID];\n        $this->ip       = self::getIp();\n        $this->date_log = date('Y-m-d H:i:s');\n\n        if(PHP_SAPI === 'cli') {\n            return;\n        }\n\n        if (self::isSessionSet('user:id')) {\n\n            // \u0443\u0436\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\n            $this->id = self::sessionGet('user:id');\n\n        } elseif (self::hasCookie('auth')) {\n\n            // \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n            $this->id = self::autoLogin(self::getCookie('auth'));\n        }\n\n        if (!$this->id) {\n            $this->id = cmsEventsManager::hook('user_auto_login', 0);\n        }\n\n        //\n        // \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        //\n        if ($this->id) {\n            $this->loadAuthUser($this->id);\n        } else {\n\n            // \u0434\u043b\u044f \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f\n            $_date_log = self::getCookie('guest_date_log', 'integer');\n            if (!$_date_log) {\n                $_date_log = time();\n            }\n\n            if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= $_date_log)) {\n\n                self::setCookie('guest_date_log', time(), 31536000);\n\n                if (!self::isSessionSet('user:date_log')) {\n                    self::sessionSet('user:date_log', $_date_log);\n                }\n            }\n\n            $this->date_log = date('Y-m-d H:i:s', self::sessionGet('user:date_log'));\n        }\n    }\n\n    public static function restrictSessionToIp($ip = false) {\n\n        if (!$ip) { $ip = self::getIp(); }\n\n        if (!self::isSessionSet('user_ip')) {\n\n            self::sessionSet('user_ip', $ip);\n\n            $octets    = explode('.', $ip);\n            $end_okets = end($octets);\n\n            self::sessionSet('user_net', rtrim($ip, $end_okets));\n        }\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u043b\u0438 ip \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0441\u0441\u0438\u0438\n     * @param boolean $strict \u0415\u0441\u043b\u0438 true, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u0439 ip \u0430\u0434\u0440\u0435\u0441, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u043f\u043e\u0434\u0441\u0435\u0442\u0438\n     * @return boolean\n     */\n    public function checkSpoofingSession($strict = false) {\n\n        if (!$strict) {\n            return strpos($this->ip, self::sessionGet('user_net')) === 0;\n        }\n\n        return $this->ip == self::sessionGet('user_ip');\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @param integer $user_id id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e\n     * @return array\n     */\n    public function loadAuthUser($user_id) {\n\n        $config = cmsConfig::getInstance();\n        $model  = cmsCore::getModel('users');\n\n        $model->filterIsNull('is_deleted');\n\n        $user = $model->getUser($user_id);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $user = cmsEventsManager::hook('user_preloaded', $user);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $model->startTransaction();\n\n        // \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0438\u0437\u0438\u0442\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438,\n        // \u0437\u043d\u0430\u0447\u0438\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u0442\u0443 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0432 \u0431\u0430\u0437\u0435\n        if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= strtotime($user['date_log']))) {\n\n            if (!self::isSessionSet('user:date_log')) {\n                self::sessionSet('user:date_log', $user['date_log']);\n            }\n\n            $model->updateUserDateLog($user_id);\n        }\n\n        // \u0441\u043e\u0437\u0434\u0430\u0435\u043c online-\u0441\u0435\u0441\u0441\u0438\u044e\n        $model->insertOrUpdate('sessions_online', ['user_id' => $user_id], ['date_created' => null]);\n\n        $model->endTransaction(true);\n\n        // \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        foreach ($user as $field => $value) {\n            $this->{$field} = $value;\n        }\n\n        // \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0430\u0442\u0430\u0440\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n        // \u043a \u043f\u0443\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0443\u0442\u044c \u043a\u043e\u0440\u043d\u044f\n        $this->avatar = cmsModel::yamlToArray($this->avatar);\n        if ($this->avatar) {\n            foreach ($this->avatar as $size => $path) {\n                $this->avatar[$size] = $config->upload_host . '/' . $path;\n            }\n        }\n\n        // \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0437\u0435\u0439 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e\n        $this->recacheFriends();\n\n        // \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b\n        // \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0441\u0441\u0438\u0438\n        $this->date_log  = self::sessionGet('user:date_log');\n        $this->perms     = self::getPermissions($user['groups']);\n        $this->is_logged = true;\n\n        return cmsEventsManager::hook('user_loaded', $user);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setUserSession($user, $last_ip = false) {\n\n        self::sessionSet('user', [\n            'id'          => $user['id'],\n            'slug'        => $user['slug'],\n            '2fa'         => !empty($user['2fa']),\n            'is_old_auth' => !empty($user['is_old_auth']),\n            'groups'      => $user['groups'],\n            'time_zone'   => $user['time_zone'],\n            'perms'       => isset($user['permissions']) ? $user['permissions'] : self::getPermissions($user['groups']),\n            'is_admin'    => $user['is_admin']\n        ]);\n\n        self::restrictSessionToIp($last_ip);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n     * @param str $auth_token\n     */\n    public static function autoLogin($auth_token) {\n\n        if (!preg_match('/^[0-9a-z]{128}$/i', $auth_token)) {\n            return 0;\n        }\n\n        $model = cmsCore::getModel('users');\n\n        $user = $model->joinInner('{users}_auth_tokens', 'au', 'au.user_id = i.id')->\n                filterEqual('au.auth_token', $auth_token)->\n                filterIsNull('is_deleted')->select('au.date_auth')->getUser();\n\n        if (!$user || $user['is_locked']) {\n            return 0;\n        }\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u0438\u0441\u0442\u0435\u043a \u043b\u0438 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n        if ((time() - strtotime($user['date_log'])) > self::AUTH_TOKEN_EXPIRATION_INT) {\n            $model->deleteAuthToken($auth_token);\n            return 0;\n        }\n\n        $model->startTransaction();\n\n        // \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0443 \u0442\u043e\u043a\u0435\u043d\u0430\n        $model->filterEqual('auth_token', $auth_token)->updateFiltered('{users}_auth_tokens', [\n            'date_log' => null\n        ], true);\n\n        $model->updateUserIp($user['id']);\n\n        $model->endTransaction(true);\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        self::setUserSession($user, $user['ip']);\n\n        return intval($user['id']);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     *\n     * @param string $email\n     * @param string $password\n     * @param boolean $remember\n     * @param boolean $complete_login\n     * @return integer|array\n     */\n    public static function login($email, $password, $remember = false, $complete_login = true, $model = null) {\n\n        if (!$email || !$password) {\n            return 0;\n        }\n\n        if($model === null) {\n            $model = cmsCore::getModel('users');\n        }\n\n        $user = $model->getUserByAuth($email, $password);\n\n        if (!$user) {\n            $user = cmsEventsManager::hook('user_auth_error', ['email' => $email, 'password' => $password]);\n        }\n\n        if (empty($user['id'])) {\n            return 0;\n        }\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        $user['permissions'] = self::getPermissions($user['groups']);\n\n        if ($complete_login) {\n\n            self::loginComplete($user, $remember);\n\n            return intval($user['id']);\n        }\n\n        return $user;\n    }\n\n    /**\n     * \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044f \u0441\u0435\u0441\u0441\u0438\u044e\n     * \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n     *\n     * @param array $user\n     * @param boolean $remember\n     * @return boolean\n     */\n    public static function loginComplete($user, $remember = false) {\n\n        self::setUserSession($user);\n\n        $model = cmsCore::getModel('users');\n\n        if ($remember) {\n\n            $auth_token = hash('sha512', string_random(32, $user['email']));\n\n            self::setCookie('auth', $auth_token, self::AUTH_TOKEN_EXPIRATION_INT);\n\n            $model->setAuthToken($user['id'], $auth_token);\n\n            $model->deleteExpiredToken($user['id'], self::AUTH_TOKEN_EXPIRATION_INT);\n\n            self::$auth_token = $auth_token;\n        }\n\n        $model->updateUserIp($user['id']);\n\n        self::getInstance()->id = $user['id'];\n        self::getInstance()->is_logged = true;\n\n        return true;\n    }\n\n    /**\n     * \u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     */\n    public static function logout() {\n\n        $model = cmsCore::getModel('users');\n\n        $userSession = self::sessionGet('user');\n\n        if (!empty($userSession['id'])) {\n\n            $model->updateUserDateLog($userSession['id']);\n\n            $model->filterEqual('user_id', $userSession['id'])->deleteFiltered('sessions_online');\n\n            cmsEventsManager::hook('user_logout', $userSession);\n        }\n\n        if (self::hasCookie('auth')) {\n\n            $auth_cookie = self::getCookie('auth');\n\n            if (preg_match('/^[0-9a-z]{128}$/i', $auth_cookie)) {\n                $model->deleteAuthToken($auth_cookie);\n            }\n\n            self::unsetCookie('auth');\n        }\n\n        // \u0435\u0441\u043b\u0438 login \u0438 logout \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445\n        // \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n        if (self::$auth_token) {\n            $model->deleteAuthToken(self::$auth_token);\n            self::$auth_token = null;\n        }\n\n        self::sessionUnset('user');\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function userIsOnline($user_id) {\n\n        if (isset(self::$cached_online[$user_id])) {\n            return self::$cached_online[$user_id];\n        }\n\n        self::$cached_online[$user_id] = false;\n\n        $model = new cmsModel();\n\n        $date_created = $model->filterEqual('user_id', $user_id)->getFieldFiltered('sessions_online', 'date_created');\n\n        if ($date_created && (time() - self::USER_ONLINE_INTERVAL) < strtotime($date_created)) {\n            self::$cached_online[$user_id] = true;\n        }\n\n        return self::$cached_online[$user_id];\n    }\n\n    public static function isLogged() {\n        return self::getInstance()->is_logged;\n    }\n\n    public static function isAdmin() {\n        return self::getInstance()->is_admin;\n    }\n\n    public static function goLogin($back_url = '') {\n        if (!$back_url) {\n            $back_url = str_replace(\"\\r\\n\", '', $_SERVER['REQUEST_URI']);\n        }\n        header('Location:' . href_to('auth', 'login') . '?' . http_build_query(['back' => $back_url]));\n        exit;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setSessionSavePath($save_handler, $path) {\n\n        if (!$path) { return false; }\n\n        if (ini_set('session.save_handler', $save_handler) === false) {\n            return false;\n        }\n\n        if ($save_handler === 'files') {\n\n            if (!is_dir($path)) {\n                if (!mkdir($path, 0755, true)) {\n                    return false;\n                }\n            }\n\n            if (!is_writable($path)) {\n                return false;\n            }\n        }\n\n        session_save_path($path);\n\n        return true;\n    }\n\n    /**\n     * \u0421\u0442\u0440\u0430\u0442\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e PHP\n     * \u0438 \u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0443, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u0430 \u0443 \u044e\u0437\u0435\u0440\u0430\n     *\n     * @param cmsConfig $config\n     */\n    public static function sessionStart(cmsConfig $config) {\n\n        // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0441\u0435\u0441\u0441\u0438\u0439\n        self::setSessionSavePath($config->session_save_handler, $config->session_save_path);\n\n        session_name($config->session_name);\n\n        $cookie_domain = null;\n\n        if ($config->cookie_domain) {\n            $cookie_domain = '.' . $config->cookie_domain;\n        }\n\n        session_set_cookie_params(0, '/;SameSite=Lax', $cookie_domain, cmsConfig::isSecureProtocol(), true);\n\n        session_start();\n\n        // \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0441\u0435\u0441\u0441\u0438\u0438\n        $session_time_zone = self::sessionGet('user:time_zone');\n\n        // \u0435\u0441\u043b\u0438 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439\n        if ($session_time_zone && $session_time_zone !== $config->time_zone) {\n            $config->set('time_zone', $session_time_zone);\n        }\n    }\n\n    public static function sessionSet($key, $value) {\n\n        if (strpos($key, ':') === false) {\n            $_SESSION[$key] = $value;\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $_SESSION[$key][$subkey] = $value;\n        }\n\n    }\n\n    public static function sessionPush($key, $value) {\n        $_SESSION[$key][] = $value;\n    }\n\n    public static function sessionGet($key, $is_clean = false) {\n\n        if (!self::isSessionSet($key)) {\n            return false;\n        }\n\n        if (strpos($key, ':') === false) {\n            $value = $_SESSION[$key];\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $value = $_SESSION[$key][$subkey];\n        }\n\n        if ($is_clean) {\n            self::sessionUnset($key);\n        }\n\n        return $value;\n    }\n\n    public static function isSessionSet($key) {\n        if (strpos($key, ':') === false) {\n            return isset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            return isset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionUnset($key) {\n        if (strpos($key, ':') === false) {\n            unset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            unset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionClear() {\n        $_SESSION = [];\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0443\u043a\u0438\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     * @param int $time \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438, \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\n     * @param string $path \u041f\u0443\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435\n     * @param bool $http_only \u041a\u0443\u043a\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n     * @param string $domain \u0414\u043e\u043c\u0435\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u043f\u0443\u0441\u0442\u043e - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439\n     * */\n    public static function setCookie($key, $value, $time = 3600, $path = '/', $http_only = true, $domain = '') {\n\n        $cookie_domain = cmsConfig::get('cookie_domain');\n\n        if (!$domain && $cookie_domain) {\n            $domain = $cookie_domain;\n        }\n\n        if (PHP_VERSION_ID < 70300) {\n            return setcookie('icms[' . $key . ']', $value, time() + $time, $path, $domain, false, $http_only);\n        } else {\n            return setcookie('icms[' . $key . ']', $value, [\n                'expires'  => time() + $time,\n                'path'     => $path,\n                'domain'   => $domain,\n                'samesite' => 'Lax',\n                'secure'   => false,\n                'httponly' => $http_only\n            ]);\n        }\n    }\n\n    public static function setCookiePublic($key, $value, $time = 3600, $path = '/') {\n        return self::setCookie($key, $value, $time, $path, false);\n    }\n\n    public static function unsetCookie($key, $path = '/', $domain = null) {\n        return self::setCookie($key, '', -3600, $path, true, $domain);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0443\u043a\u0438\u0441\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     *\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $var_type \u0422\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e string\n     * @param callable $callback\n     * @return mixed\n     */\n    public static function getCookie($key, $var_type = 'string', $callback = false) {\n\n        if (isset($_COOKIE['icms'][$key])) {\n\n            $cookie = $_COOKIE['icms'][$key];\n\n            if ($var_type !== null) {\n                @settype($cookie, $var_type);\n            }\n\n            if (is_callable($callback)) {\n                $cookie = call_user_func_array($callback, array($cookie));\n            }\n\n            return $cookie;\n        } else {\n            return false;\n        }\n    }\n\n    public static function hasCookie($key) {\n        return isset($_COOKIE['icms'][$key]);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getSetUPS($key) {\n        return cmsCore::getModel('users')->getSetUPS($key);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n     * User Personal Setting\n     *\n     * @param str       $key        \u041a\u043b\u044e\u0447 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n     * @param str|array $data       \u0414\u0430\u043d\u043d\u044b\u0435\n     * @param int       $user_id    \u0418\u0434 \u044e\u0437\u0435\u0440\u0430\n     * @return bool\n     */\n    public static function setUPS($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return (bool) cmsCore::getModel('users')->setUPS($key, $data, $user_id);\n    }\n\n    public static function getUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->getUPS($key, $user_id);\n    }\n\n    public static function getUPSActual($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        $umodel = cmsCore::getModel('users');\n\n        $old = $umodel->getUPS($key, $user_id);\n        if (!$data) {\n            return $old;\n        }\n        if ($old !== $data) {\n            $umodel->setUPS($key, $data, $user_id);\n        }\n\n        return $data;\n    }\n\n    public static function deleteUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->deleteUPS($key, $user_id);\n    }\n\n    public static function deleteUPSlist($key) {\n        return cmsCore::getModel('users')->deleteUPS($key);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function addSessionMessage($message, $class = 'info', $is_keep = false) {\n        self::sessionPush('core_message', ['class' => $class, 'text' => $message, 'is_keep' => $is_keep]);\n    }\n\n    public static function getSessionMessages($is_clear = true) {\n\n        if (self::isSessionSet('core_message')) {\n            $messages = self::sessionGet('core_message');\n        } else {\n            $messages = false;\n        }\n        if ($is_clear) {\n            self::clearSessionMessages();\n        }\n\n        return $messages;\n    }\n\n    public static function clearSessionMessages() {\n        self::sessionUnset('core_message');\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getPermissions($groups) {\n        return cmsPermissions::getUserPermissions($groups);\n    }\n\n    public static function getPermissionValue($subject, $permission) {\n\n        $user = self::getInstance();\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function isDenied($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission] == $value;\n    }\n\n    public static function isAllowed($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return true;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ($user->perms[$subject][$permission] != $value) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function isPermittedLimitReached($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value >= $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function isPermittedLimitHigher($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value < $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u0435\n     * @param int $group_id ID \u0433\u0440\u0443\u043f\u043f\u044b\n     * @return boolean\n     */\n    public function isInGroup($group_id) {\n        return in_array($group_id, $this->groups);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u044e\u0431\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n     * @param array $groups \u0421\u043f\u0438\u0441\u043e\u043a ID \u0433\u0440\u0443\u043f\u043f\n     * @return boolean\n     */\n    public function isInGroups($groups) {\n        return self::isUserInGroups($this->groups, $groups);\n    }\n\n    public static function isUserInGroups($user_groups, $groups) {\n\n        if (empty($groups) || in_array(0, $groups)) {\n            return true;\n        }\n\n        foreach ($groups as $group_id) {\n            if(in_array($group_id, $user_groups)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function isPrivacyAllowed($profile, $option, $strict = false) {\n\n        if ($this->is_admin && !$strict) {\n            return true;\n        }\n\n        if ($profile['id'] == $this->id) {\n            return true;\n        }\n\n        if (!$profile || !$option) {\n            return false;\n        }\n\n        $options = $profile['privacy_options'];\n\n        if (!isset($options[$option])) {\n            return true;\n        }\n\n        if ($options[$option] === 'anyone') {\n            return true;\n        }\n\n        if ($options[$option] === 'friends' && $this->isFriend($profile['id'])) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function recacheFriends() {\n\n        $friends = cmsCore::getModel('users')->getFriendsIds($this->id);\n\n        $this->friends    = $friends['friends'];\n        $this->subscribes = $friends['subscribes'];\n\n        return $this;\n    }\n\n    public function isFriend($friend_id, $type = 'friends') {\n\n        if (!$friend_id || !$this->id) {\n            return false;\n        }\n\n        if ($friend_id == $this->id) {\n            return true;\n        }\n\n        if (empty($this->{$type})) {\n            return false;\n        }\n\n        return in_array($friend_id, $this->{$type});\n    }\n\n    public function isSubscribe($friend_id) {\n        return $this->isFriend($friend_id, 'subscribes');\n    }\n\n    public function hasFriends() {\n        return !empty($this->friends);\n    }\n\n    public function hasSubscribes() {\n        return !empty($this->subscribes);\n    }\n\n}\n"], "fixing_code": ["<?php\n/**\n * \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 InstantCMS\n */\nclass cmsConfig extends cmsConfigs {\n\n    /**\n     * \u0421\u0438\u043d\u0433\u043b\u0442\u043e\u043d\n     * @var object\n     */\n    private static $instance = null;\n\n    /**\n     * \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0440\u0435\u043c\u0430\u043f\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\n     *\n     * @var array\n     */\n    private static $mapping  = null;\n\n    /**\n     * \u0424\u043b\u0430\u0433, \u0447\u0442\u043e \u043a\u043e\u043d\u0444\u0438\u0433 \u0441\u0430\u0439\u0442\u0430 \u0435\u0441\u0442\u044c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\n     * @var boolean\n     */\n    private $ready = false;\n\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n\n    public static function get($key) {\n        return self::getInstance()->$key;\n    }\n\n    /**\n     * \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0440\u0435\u043c\u0430\u043f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432\n     * http://docs.instantcms.ru/manual/settings/rewriting\n     *\n     * @return array\n     */\n    public static function getControllersMapping() {\n\n        if (self::$mapping !== null) {\n            return self::$mapping;\n        }\n\n        self::$mapping = [];\n\n        $map_file     = PATH . parent::CONFIG_DIR . 'remap.php';\n        $map_function = 'remap_controllers';\n\n        if (!is_readable($map_file)) {\n            return self::$mapping;\n        }\n\n        include_once $map_file;\n\n        if (!function_exists($map_function)) {\n            return self::$mapping;\n        }\n\n        self::$mapping = call_user_func($map_function);\n\n        if (!is_array(self::$mapping)) {\n            return [];\n        }\n\n        return self::$mapping;\n    }\n\n    public function __construct($cfg_file = 'config.php') {\n\n        parent::__construct($cfg_file);\n\n        if (!$this->data) {\n            return;\n        }\n\n        $this->setData();\n\n        $this->initErrorReporting();\n\n        $this->ready = true;\n    }\n\n    /**\n     * \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0435\u0441\u0442\u044c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u0430\n     * @return boolean\n     */\n    public function isReady() {\n        return $this->ready;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\n     *\n     * @return bool\n     */\n    public function setData() {\n\n        if (empty($this->data['detect_ip_key']) || !isset($_SERVER[$this->data['detect_ip_key']])) {\n            $this->data['detect_ip_key'] = 'REMOTE_ADDR';\n        }\n\n        if (empty($this->data['session_save_path'])) {\n\n            $this->data['session_save_path'] = session_save_path();\n\n            if (empty($this->data['session_save_path'])) {\n                $this->data['session_save_path'] = rtrim(sys_get_temp_dir(), '/');\n            }\n\n            if (!is_writable($this->data['session_save_path'])) {\n                $this->data['session_save_path'] = '';\n            }\n        }\n\n        // \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u043d\u043e\u0435 \u0434\u043b\u044f 2.14.0\n        if (!array_key_exists('allow_users_time_zone', $this->data)) {\n            $this->data['allow_users_time_zone'] = 1;\n        }\n        if (!array_key_exists('bcmathscale', $this->data)) {\n            $this->data['bcmathscale'] = 8;\n        }\n        // \u0421\u0442\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443, \u0434\u043b\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439\n        define('BCMATHSCALE', $this->data['bcmathscale']);\n        // \u0440\u0430\u0437\u0440\u044f\u0434\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n        if(function_exists('bcscale')){\n            bcscale($this->data['bcmathscale']);\n        }\n\n        if (empty($this->data['native_yaml']) || !function_exists('yaml_emit')) {\n            $this->data['native_yaml'] = 0;\n        }\n\n        $this->upload_host_abs = $this->upload_host;\n\n        if (mb_strpos($this->upload_host, $this->host) === 0) {\n            $url_parts = parse_url(trim($this->host, '/'));\n            $host = empty($url_parts['path']) ? $this->host : $url_parts['scheme'] . '://' . $url_parts['host'];\n            $this->upload_host = str_replace($host, '', $this->upload_host);\n            $replace_upload_host_protocol = true;\n        }\n\n        $this->set('document_root', preg_replace('#(.*)('.preg_quote($this->root).')$#u', '$1', PATH . DIRECTORY_SEPARATOR));\n        $this->set('root_path', PATH . DIRECTORY_SEPARATOR);\n        $this->set('system_path', $this->root_path . 'system/');\n        $this->set('upload_path', $this->document_root . $this->upload_root);\n        $this->set('cache_path', $this->document_root . $this->cache_root);\n\n        $protocol = 'http://';\n        if (\n                (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ||\n                (!empty($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443) ||\n                (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https')\n        ) {\n            $protocol = 'https://';\n            $this->host = str_replace('http://', $protocol, $this->host);\n            if (!empty($replace_upload_host_protocol)) {\n                $this->upload_host_abs = str_replace('http://', $protocol, $this->upload_host_abs);\n            }\n        }\n\n        $this->set('protocol', $protocol);\n\n        if (!empty($_SERVER['HTTP_HOST'])) {\n            $this->set('current_domain', $_SERVER['HTTP_HOST']);\n        }\n\n        return true;\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043e\u0448\u0438\u0431\u043e\u043a PHP\n     */\n    private function initErrorReporting() {\n\n        error_reporting(E_ALL);\n\n        ini_set('log_errors', true);\n\n        // \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u0430\u044f \u043e\u043f\u0446\u0438\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0432 .htaccess \u0438\u043b\u0438 \u0432 Apache\n        // \u0415\u0451 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0434\u0435\u0441\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\n        ini_set('display_errors', $this->data['debug']);\n        ini_set('display_startup_errors', $this->data['debug']);\n\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b HTTPS\n     *\n     * @return boolean\n     */\n    public static function isSecureProtocol() {\n        return self::get('protocol') === 'https://';\n    }\n\n}\n", "<?php\n\ndefine('GUEST_GROUP_ID', 1);\ndefine('DEF_GROUP_ID', 3);\n#[\\AllowDynamicProperties]\nclass cmsUser {\n\n    const USER_ONLINE_INTERVAL      = 180;\n    const AUTH_TOKEN_EXPIRATION_INT = 8640000; // 100 \u0434\u043d\u0435\u0439\n\n    private static $instance;\n    private static $_ip;\n    public static $auth_token;\n    private static $cached_online = [];\n\n    public $id = 0;\n    public $email;\n    public $password;\n    public $nickname;\n    public $date_log;\n    public $is_admin   = 0;\n    public $is_logged  = false;\n    public $friends    = [];\n    public $subscribes = [];\n\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n\n    public static function get($key) {\n        return isset(self::getInstance()->$key) ? self::getInstance()->$key : null;\n    }\n\n    public static function getIp() {\n\n        if (self::$_ip === null) {\n\n            $config = cmsConfig::getInstance();\n\n            self::$_ip = isset($_SERVER[$config->detect_ip_key]) ? $_SERVER[$config->detect_ip_key] : '127.0.0.1';\n\n            if (!filter_var(self::$_ip, FILTER_VALIDATE_IP)) {\n                self::$_ip = '127.0.0.1';\n            }\n        }\n\n        return self::$_ip;\n    }\n\n    public static function setIp($ip) {\n        self::$_ip = $ip;\n\n    }\n\n    public function __construct() {\n\n        $this->groups   = [GUEST_GROUP_ID];\n        $this->ip       = self::getIp();\n        $this->date_log = date('Y-m-d H:i:s');\n\n        if(PHP_SAPI === 'cli') {\n            return;\n        }\n\n        if (self::isSessionSet('user:id')) {\n\n            // \u0443\u0436\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\n            $this->id = self::sessionGet('user:id');\n\n        } elseif (self::hasCookie('auth')) {\n\n            // \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n            $this->id = self::autoLogin(self::getCookie('auth'));\n        }\n\n        if (!$this->id) {\n            $this->id = cmsEventsManager::hook('user_auto_login', 0);\n        }\n\n        //\n        // \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        //\n        if ($this->id) {\n            $this->loadAuthUser($this->id);\n        } else {\n\n            // \u0434\u043b\u044f \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f\n            $_date_log = self::getCookie('guest_date_log', 'integer');\n            if (!$_date_log) {\n                $_date_log = time();\n            }\n\n            if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= $_date_log)) {\n\n                self::setCookie('guest_date_log', time(), 31536000);\n\n                if (!self::isSessionSet('user:date_log')) {\n                    self::sessionSet('user:date_log', $_date_log);\n                }\n            }\n\n            $this->date_log = date('Y-m-d H:i:s', self::sessionGet('user:date_log'));\n        }\n    }\n\n    public static function restrictSessionToIp($ip = false) {\n\n        if (!$ip) { $ip = self::getIp(); }\n\n        if (!self::isSessionSet('user_ip')) {\n\n            self::sessionSet('user_ip', $ip);\n\n            $octets    = explode('.', $ip);\n            $end_okets = end($octets);\n\n            self::sessionSet('user_net', rtrim($ip, $end_okets));\n        }\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u043b\u0438 ip \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0441\u0441\u0438\u0438\n     * @param boolean $strict \u0415\u0441\u043b\u0438 true, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u0439 ip \u0430\u0434\u0440\u0435\u0441, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u043f\u043e\u0434\u0441\u0435\u0442\u0438\n     * @return boolean\n     */\n    public function checkSpoofingSession($strict = false) {\n\n        if (!$strict) {\n            return strpos($this->ip, self::sessionGet('user_net')) === 0;\n        }\n\n        return $this->ip == self::sessionGet('user_ip');\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @param integer $user_id id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e\n     * @return array\n     */\n    public function loadAuthUser($user_id) {\n\n        $config = cmsConfig::getInstance();\n        $model  = cmsCore::getModel('users');\n\n        $model->filterIsNull('is_deleted');\n\n        $user = $model->getUser($user_id);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $user = cmsEventsManager::hook('user_preloaded', $user);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $model->startTransaction();\n\n        // \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0438\u0437\u0438\u0442\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438,\n        // \u0437\u043d\u0430\u0447\u0438\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u0442\u0443 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0432 \u0431\u0430\u0437\u0435\n        if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= strtotime($user['date_log']))) {\n\n            if (!self::isSessionSet('user:date_log')) {\n                self::sessionSet('user:date_log', $user['date_log']);\n            }\n\n            $model->updateUserDateLog($user_id);\n        }\n\n        // \u0441\u043e\u0437\u0434\u0430\u0435\u043c online-\u0441\u0435\u0441\u0441\u0438\u044e\n        $model->insertOrUpdate('sessions_online', ['user_id' => $user_id], ['date_created' => null]);\n\n        $model->endTransaction(true);\n\n        // \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        foreach ($user as $field => $value) {\n            $this->{$field} = $value;\n        }\n\n        // \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0430\u0442\u0430\u0440\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n        // \u043a \u043f\u0443\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0443\u0442\u044c \u043a\u043e\u0440\u043d\u044f\n        $this->avatar = cmsModel::yamlToArray($this->avatar);\n        if ($this->avatar) {\n            foreach ($this->avatar as $size => $path) {\n                $this->avatar[$size] = $config->upload_host . '/' . $path;\n            }\n        }\n\n        // \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0437\u0435\u0439 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e\n        $this->recacheFriends();\n\n        // \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b\n        // \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0441\u0441\u0438\u0438\n        $this->date_log  = self::sessionGet('user:date_log');\n        $this->perms     = self::getPermissions($user['groups']);\n        $this->is_logged = true;\n\n        return cmsEventsManager::hook('user_loaded', $user);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setUserSession($user, $last_ip = false) {\n\n        self::sessionSet('user', [\n            'id'          => $user['id'],\n            'slug'        => $user['slug'],\n            '2fa'         => !empty($user['2fa']),\n            'is_old_auth' => !empty($user['is_old_auth']),\n            'groups'      => $user['groups'],\n            'time_zone'   => $user['time_zone'],\n            'perms'       => isset($user['permissions']) ? $user['permissions'] : self::getPermissions($user['groups']),\n            'is_admin'    => $user['is_admin']\n        ]);\n\n        self::restrictSessionToIp($last_ip);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n     * @param str $auth_token\n     */\n    public static function autoLogin($auth_token) {\n\n        if (!preg_match('/^[0-9a-z]{128}$/i', $auth_token)) {\n            return 0;\n        }\n\n        $model = cmsCore::getModel('users');\n\n        $user = $model->joinInner('{users}_auth_tokens', 'au', 'au.user_id = i.id')->\n                filterEqual('au.auth_token', $auth_token)->\n                filterIsNull('is_deleted')->select('au.date_auth')->getUser();\n\n        if (!$user || $user['is_locked']) {\n            return 0;\n        }\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u0438\u0441\u0442\u0435\u043a \u043b\u0438 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n        if ((time() - strtotime($user['date_log'])) > self::AUTH_TOKEN_EXPIRATION_INT) {\n            $model->deleteAuthToken($auth_token);\n            return 0;\n        }\n\n        $model->startTransaction();\n\n        // \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0443 \u0442\u043e\u043a\u0435\u043d\u0430\n        $model->filterEqual('auth_token', $auth_token)->updateFiltered('{users}_auth_tokens', [\n            'date_log' => null\n        ], true);\n\n        $model->updateUserIp($user['id']);\n\n        $model->endTransaction(true);\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        self::setUserSession($user, $user['ip']);\n\n        self::sessionRegenerate();\n\n        return intval($user['id']);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     *\n     * @param string $email\n     * @param string $password\n     * @param boolean $remember\n     * @param boolean $complete_login\n     * @return integer|array\n     */\n    public static function login($email, $password, $remember = false, $complete_login = true, $model = null) {\n\n        if (!$email || !$password) {\n            return 0;\n        }\n\n        if($model === null) {\n            $model = cmsCore::getModel('users');\n        }\n\n        $user = $model->getUserByAuth($email, $password);\n\n        if (!$user) {\n            $user = cmsEventsManager::hook('user_auth_error', ['email' => $email, 'password' => $password]);\n        }\n\n        if (empty($user['id'])) {\n            return 0;\n        }\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        $user['permissions'] = self::getPermissions($user['groups']);\n\n        if ($complete_login) {\n\n            self::loginComplete($user, $remember);\n\n            return intval($user['id']);\n        }\n\n        return $user;\n    }\n\n    /**\n     * \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044f \u0441\u0435\u0441\u0441\u0438\u044e\n     * \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n     *\n     * @param array $user\n     * @param boolean $remember\n     * @return boolean\n     */\n    public static function loginComplete($user, $remember = false) {\n\n        self::setUserSession($user);\n\n        $model = cmsCore::getModel('users');\n\n        if ($remember) {\n\n            $auth_token = hash('sha512', string_random(32, $user['email']));\n\n            self::setCookie('auth', $auth_token, self::AUTH_TOKEN_EXPIRATION_INT);\n\n            $model->setAuthToken($user['id'], $auth_token);\n\n            $model->deleteExpiredToken($user['id'], self::AUTH_TOKEN_EXPIRATION_INT);\n\n            self::$auth_token = $auth_token;\n        }\n\n        $model->updateUserIp($user['id']);\n\n        self::getInstance()->id = $user['id'];\n        self::getInstance()->is_logged = true;\n\n        self::sessionRegenerate();\n\n        return true;\n    }\n\n    /**\n     * \u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     */\n    public static function logout() {\n\n        $model = cmsCore::getModel('users');\n\n        $userSession = self::sessionGet('user');\n\n        if (!empty($userSession['id'])) {\n\n            $model->updateUserDateLog($userSession['id']);\n\n            $model->filterEqual('user_id', $userSession['id'])->deleteFiltered('sessions_online');\n\n            cmsEventsManager::hook('user_logout', $userSession);\n        }\n\n        if (self::hasCookie('auth')) {\n\n            $auth_cookie = self::getCookie('auth');\n\n            if (preg_match('/^[0-9a-z]{128}$/i', $auth_cookie)) {\n                $model->deleteAuthToken($auth_cookie);\n            }\n\n            self::unsetCookie('auth');\n        }\n\n        // \u0435\u0441\u043b\u0438 login \u0438 logout \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445\n        // \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n        if (self::$auth_token) {\n            $model->deleteAuthToken(self::$auth_token);\n            self::$auth_token = null;\n        }\n\n        self::sessionUnset('user');\n\n        self::sessionRegenerate();\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function userIsOnline($user_id) {\n\n        if (isset(self::$cached_online[$user_id])) {\n            return self::$cached_online[$user_id];\n        }\n\n        self::$cached_online[$user_id] = false;\n\n        $model = new cmsModel();\n\n        $date_created = $model->filterEqual('user_id', $user_id)->getFieldFiltered('sessions_online', 'date_created');\n\n        if ($date_created && (time() - self::USER_ONLINE_INTERVAL) < strtotime($date_created)) {\n            self::$cached_online[$user_id] = true;\n        }\n\n        return self::$cached_online[$user_id];\n    }\n\n    public static function isLogged() {\n        return self::getInstance()->is_logged;\n    }\n\n    public static function isAdmin() {\n        return self::getInstance()->is_admin;\n    }\n\n    public static function goLogin($back_url = '') {\n        if (!$back_url) {\n            $back_url = str_replace(\"\\r\\n\", '', $_SERVER['REQUEST_URI']);\n        }\n        header('Location:' . href_to('auth', 'login') . '?' . http_build_query(['back' => $back_url]));\n        exit;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setSessionSavePath($save_handler, $path) {\n\n        if (!$path) { return false; }\n\n        if (ini_set('session.save_handler', $save_handler) === false) {\n            return false;\n        }\n\n        if ($save_handler === 'files') {\n\n            if (!is_dir($path)) {\n                if (!mkdir($path, 0755, true)) {\n                    return false;\n                }\n            }\n\n            if (!is_writable($path)) {\n                return false;\n            }\n        }\n\n        session_save_path($path);\n\n        return true;\n    }\n\n    /**\n     * \u0421\u0442\u0440\u0430\u0442\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e PHP\n     * \u0438 \u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0443, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u0430 \u0443 \u044e\u0437\u0435\u0440\u0430\n     *\n     * @param cmsConfig $config\n     */\n    public static function sessionStart(cmsConfig $config) {\n\n        // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0441\u0435\u0441\u0441\u0438\u0439\n        self::setSessionSavePath($config->session_save_handler, $config->session_save_path);\n\n        session_name($config->session_name);\n\n        $cookie_domain = null;\n\n        if ($config->cookie_domain) {\n            $cookie_domain = '.' . $config->cookie_domain;\n        }\n\n        session_set_cookie_params(0, '/;SameSite=Lax', $cookie_domain, cmsConfig::isSecureProtocol(), true);\n\n        session_start();\n\n        // \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0441\u0435\u0441\u0441\u0438\u0438\n        $session_time_zone = self::sessionGet('user:time_zone');\n\n        // \u0435\u0441\u043b\u0438 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439\n        if ($session_time_zone && $session_time_zone !== $config->time_zone) {\n            $config->set('time_zone', $session_time_zone);\n        }\n    }\n\n    public static function sessionRegenerate() {\n\n        session_regenerate_id(false);\n\n        $id = session_id();\n\n        session_write_close();\n\n        session_id($id);\n\n        session_start();\n    }\n\n    public static function sessionSet($key, $value) {\n\n        if (strpos($key, ':') === false) {\n            $_SESSION[$key] = $value;\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $_SESSION[$key][$subkey] = $value;\n        }\n\n    }\n\n    public static function sessionPush($key, $value) {\n        $_SESSION[$key][] = $value;\n    }\n\n    public static function sessionGet($key, $is_clean = false) {\n\n        if (!self::isSessionSet($key)) {\n            return false;\n        }\n\n        if (strpos($key, ':') === false) {\n            $value = $_SESSION[$key];\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $value = $_SESSION[$key][$subkey];\n        }\n\n        if ($is_clean) {\n            self::sessionUnset($key);\n        }\n\n        return $value;\n    }\n\n    public static function isSessionSet($key) {\n        if (strpos($key, ':') === false) {\n            return isset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            return isset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionUnset($key) {\n        if (strpos($key, ':') === false) {\n            unset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            unset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionClear() {\n        $_SESSION = [];\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0443\u043a\u0438\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     * @param int $time \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438, \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\n     * @param string $path \u041f\u0443\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435\n     * @param bool $http_only \u041a\u0443\u043a\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n     * @param string $domain \u0414\u043e\u043c\u0435\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u043f\u0443\u0441\u0442\u043e - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439\n     * */\n    public static function setCookie($key, $value, $time = 3600, $path = '/', $http_only = true, $domain = '') {\n\n        $cookie_domain = cmsConfig::get('cookie_domain');\n\n        if (!$domain && $cookie_domain) {\n            $domain = $cookie_domain;\n        }\n\n        if (PHP_VERSION_ID < 70300) {\n            return setcookie('icms[' . $key . ']', $value, time() + $time, $path, $domain, false, $http_only);\n        } else {\n            return setcookie('icms[' . $key . ']', $value, [\n                'expires'  => time() + $time,\n                'path'     => $path,\n                'domain'   => $domain,\n                'samesite' => 'Lax',\n                'secure'   => cmsConfig::isSecureProtocol(),\n                'httponly' => $http_only\n            ]);\n        }\n    }\n\n    public static function setCookiePublic($key, $value, $time = 3600, $path = '/') {\n        return self::setCookie($key, $value, $time, $path, false);\n    }\n\n    public static function unsetCookie($key, $path = '/', $domain = null) {\n        return self::setCookie($key, '', -3600, $path, true, $domain);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0443\u043a\u0438\u0441\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     *\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $var_type \u0422\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e string\n     * @param callable $callback\n     * @return mixed\n     */\n    public static function getCookie($key, $var_type = 'string', $callback = false) {\n\n        if (isset($_COOKIE['icms'][$key])) {\n\n            $cookie = $_COOKIE['icms'][$key];\n\n            if ($var_type !== null) {\n                @settype($cookie, $var_type);\n            }\n\n            if (is_callable($callback)) {\n                $cookie = call_user_func_array($callback, array($cookie));\n            }\n\n            return $cookie;\n        } else {\n            return false;\n        }\n    }\n\n    public static function hasCookie($key) {\n        return isset($_COOKIE['icms'][$key]);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getSetUPS($key) {\n        return cmsCore::getModel('users')->getSetUPS($key);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n     * User Personal Setting\n     *\n     * @param str       $key        \u041a\u043b\u044e\u0447 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n     * @param str|array $data       \u0414\u0430\u043d\u043d\u044b\u0435\n     * @param int       $user_id    \u0418\u0434 \u044e\u0437\u0435\u0440\u0430\n     * @return bool\n     */\n    public static function setUPS($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return (bool) cmsCore::getModel('users')->setUPS($key, $data, $user_id);\n    }\n\n    public static function getUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->getUPS($key, $user_id);\n    }\n\n    public static function getUPSActual($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        $umodel = cmsCore::getModel('users');\n\n        $old = $umodel->getUPS($key, $user_id);\n        if (!$data) {\n            return $old;\n        }\n        if ($old !== $data) {\n            $umodel->setUPS($key, $data, $user_id);\n        }\n\n        return $data;\n    }\n\n    public static function deleteUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->deleteUPS($key, $user_id);\n    }\n\n    public static function deleteUPSlist($key) {\n        return cmsCore::getModel('users')->deleteUPS($key);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function addSessionMessage($message, $class = 'info', $is_keep = false) {\n        self::sessionPush('core_message', ['class' => $class, 'text' => $message, 'is_keep' => $is_keep]);\n    }\n\n    public static function getSessionMessages($is_clear = true) {\n\n        if (self::isSessionSet('core_message')) {\n            $messages = self::sessionGet('core_message');\n        } else {\n            $messages = false;\n        }\n        if ($is_clear) {\n            self::clearSessionMessages();\n        }\n\n        return $messages;\n    }\n\n    public static function clearSessionMessages() {\n        self::sessionUnset('core_message');\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getPermissions($groups) {\n        return cmsPermissions::getUserPermissions($groups);\n    }\n\n    public static function getPermissionValue($subject, $permission) {\n\n        $user = self::getInstance();\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function isDenied($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission] == $value;\n    }\n\n    public static function isAllowed($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return true;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ($user->perms[$subject][$permission] != $value) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function isPermittedLimitReached($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value >= $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function isPermittedLimitHigher($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value < $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u0435\n     * @param int $group_id ID \u0433\u0440\u0443\u043f\u043f\u044b\n     * @return boolean\n     */\n    public function isInGroup($group_id) {\n        return in_array($group_id, $this->groups);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u044e\u0431\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n     * @param array $groups \u0421\u043f\u0438\u0441\u043e\u043a ID \u0433\u0440\u0443\u043f\u043f\n     * @return boolean\n     */\n    public function isInGroups($groups) {\n        return self::isUserInGroups($this->groups, $groups);\n    }\n\n    public static function isUserInGroups($user_groups, $groups) {\n\n        if (empty($groups) || in_array(0, $groups)) {\n            return true;\n        }\n\n        foreach ($groups as $group_id) {\n            if(in_array($group_id, $user_groups)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function isPrivacyAllowed($profile, $option, $strict = false) {\n\n        if ($this->is_admin && !$strict) {\n            return true;\n        }\n\n        if ($profile['id'] == $this->id) {\n            return true;\n        }\n\n        if (!$profile || !$option) {\n            return false;\n        }\n\n        $options = $profile['privacy_options'];\n\n        if (!isset($options[$option])) {\n            return true;\n        }\n\n        if ($options[$option] === 'anyone') {\n            return true;\n        }\n\n        if ($options[$option] === 'friends' && $this->isFriend($profile['id'])) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function recacheFriends() {\n\n        $friends = cmsCore::getModel('users')->getFriendsIds($this->id);\n\n        $this->friends    = $friends['friends'];\n        $this->subscribes = $friends['subscribes'];\n\n        return $this;\n    }\n\n    public function isFriend($friend_id, $type = 'friends') {\n\n        if (!$friend_id || !$this->id) {\n            return false;\n        }\n\n        if ($friend_id == $this->id) {\n            return true;\n        }\n\n        if (empty($this->{$type})) {\n            return false;\n        }\n\n        return in_array($friend_id, $this->{$type});\n    }\n\n    public function isSubscribe($friend_id) {\n        return $this->isFriend($friend_id, 'subscribes');\n    }\n\n    public function hasFriends() {\n        return !empty($this->friends);\n    }\n\n    public function hasSubscribes() {\n        return !empty($this->subscribes);\n    }\n\n}\n"], "filenames": ["system/core/config.php", "system/core/user.php"], "buggy_code_start_loc": [147, 267], "buggy_code_end_loc": [148, 572], "fixing_code_start_loc": [147, 268], "fixing_code_end_loc": [148, 591], "type": "CWE-614", "message": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository instantsoft/icms2 prior to 2.16.1.", "other": {"cve": {"id": "CVE-2023-4654", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-31T01:15:10.573", "lastModified": "2023-09-01T14:48:51.433", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository instantsoft/icms2 prior to 2.16.1."}, {"lang": "es", "value": "Cookie sensible en sesi\u00f3n HTTPS sin atributo \"Secure\" en el repositorio de GitHub instantsoft/icms2 anterior a la versi\u00f3n 2.16.1. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-614"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instantcms:instantcms:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.16.1", "matchCriteriaId": "56EF3F9B-6CDB-4568-AF80-EEF6D72B72F6"}]}]}], "references": [{"url": "https://github.com/instantsoft/icms2/commit/ca5f150da11d9caae86638885137afe35bcc3592", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/56432a75-af43-4b1a-9307-bd8de568351b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/instantsoft/icms2/commit/ca5f150da11d9caae86638885137afe35bcc3592"}}