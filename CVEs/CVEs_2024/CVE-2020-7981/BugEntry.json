{"buggy_code": ["module Geocoder\n  module Sql\n    extend self\n\n    ##\n    # Distance calculation for use with a database that supports POWER(),\n    # SQRT(), PI(), and trigonometric functions SIN(), COS(), ASIN(), \n    # ATAN2().\n    #\n    # Based on the excellent tutorial at:\n    # http://www.scribd.com/doc/2569355/Geo-Distance-Search-with-MySQL\n    #\n    def full_distance(latitude, longitude, lat_attr, lon_attr, options = {})\n      units = options[:units] || Geocoder.config.units\n      earth = Geocoder::Calculations.earth_radius(units)\n\n      \"#{earth} * 2 * ASIN(SQRT(\" +\n        \"POWER(SIN((#{latitude.to_f} - #{lat_attr}) * PI() / 180 / 2), 2) + \" +\n        \"COS(#{latitude.to_f} * PI() / 180) * COS(#{lat_attr} * PI() / 180) * \" +\n        \"POWER(SIN((#{longitude.to_f} - #{lon_attr}) * PI() / 180 / 2), 2)\" +\n      \"))\"\n    end\n\n    ##\n    # Distance calculation for use with a database without trigonometric\n    # functions, like SQLite. Approach is to find objects within a square\n    # rather than a circle, so results are very approximate (will include\n    # objects outside the given radius).\n    #\n    # Distance and bearing calculations are *extremely inaccurate*. To be\n    # clear: this only exists to provide interface consistency. Results\n    # are not intended for use in production!\n    #\n    def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})\n      units = options[:units] || Geocoder.config.units\n      dx = Geocoder::Calculations.longitude_degree_distance(30, units)\n      dy = Geocoder::Calculations.latitude_degree_distance(units)\n\n      # sin of 45 degrees = average x or y component of vector\n      factor = Math.sin(Math::PI / 4)\n\n      \"(#{dy} * ABS(#{lat_attr} - #{latitude.to_f}) * #{factor}) + \" +\n        \"(#{dx} * ABS(#{lon_attr} - #{longitude.to_f}) * #{factor})\"\n    end\n\n    def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)\n      spans = \"#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND \"\n      # handle box that spans 180 longitude\n      if sw_lng.to_f > ne_lng.to_f\n        spans + \"(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR \" +\n        \"#{lon_attr} BETWEEN -180 AND #{ne_lng})\"\n      else\n        spans + \"#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}\"\n      end\n    end\n\n    ##\n    # Fairly accurate bearing calculation. Takes a latitude, longitude,\n    # and an options hash which must include a :bearing value\n    # (:linear or :spherical).\n    #\n    # For use with a database that supports MOD() and trigonometric functions\n    # SIN(), COS(), ASIN(), ATAN2().\n    #\n    # Based on:\n    # http://www.beginningspatial.com/calculating_bearing_one_point_another\n    #\n    def full_bearing(latitude, longitude, lat_attr, lon_attr, options = {})\n      degrees_per_radian = Geocoder::Calculations::DEGREES_PER_RADIAN\n      case options[:bearing] || Geocoder.config.distances\n      when :linear\n        \"MOD(CAST(\" +\n          \"(ATAN2( \" +\n            \"((#{lon_attr} - #{longitude.to_f}) / #{degrees_per_radian}), \" +\n            \"((#{lat_attr} - #{latitude.to_f}) / #{degrees_per_radian})\" +\n          \") * #{degrees_per_radian}) + 360 \" +\n        \"AS decimal), 360)\"\n      when :spherical\n        \"MOD(CAST(\" +\n          \"(ATAN2( \" +\n            \"SIN( (#{lon_attr} - #{longitude.to_f}) / #{degrees_per_radian} ) * \" +\n            \"COS( (#{lat_attr}) / #{degrees_per_radian} ), (\" +\n              \"COS( (#{latitude.to_f}) / #{degrees_per_radian} ) * SIN( (#{lat_attr}) / #{degrees_per_radian})\" +\n            \") - (\" +\n              \"SIN( (#{latitude.to_f}) / #{degrees_per_radian}) * COS((#{lat_attr}) / #{degrees_per_radian}) * \" +\n              \"COS( (#{lon_attr} - #{longitude.to_f}) / #{degrees_per_radian})\" +\n            \")\" +\n          \") * #{degrees_per_radian}) + 360 \" +\n        \"AS decimal), 360)\"\n      end\n    end\n\n    ##\n    # Totally lame bearing calculation. Basically useless except that it\n    # returns *something* in databases without trig functions.\n    #\n    def approx_bearing(latitude, longitude, lat_attr, lon_attr, options = {})\n      \"CASE \" +\n        \"WHEN (#{lat_attr} >= #{latitude.to_f} AND \" +\n          \"#{lon_attr} >= #{longitude.to_f}) THEN  45.0 \" +\n        \"WHEN (#{lat_attr} <  #{latitude.to_f} AND \" +\n          \"#{lon_attr} >= #{longitude.to_f}) THEN 135.0 \" +\n        \"WHEN (#{lat_attr} <  #{latitude.to_f} AND \" +\n          \"#{lon_attr} <  #{longitude.to_f}) THEN 225.0 \" +\n        \"WHEN (#{lat_attr} >= #{latitude.to_f} AND \" +\n          \"#{lon_attr} <  #{longitude.to_f}) THEN 315.0 \" +\n      \"END\"\n    end\n  end\nend\n"], "fixing_code": ["module Geocoder\n  module Sql\n    extend self\n\n    ##\n    # Distance calculation for use with a database that supports POWER(),\n    # SQRT(), PI(), and trigonometric functions SIN(), COS(), ASIN(), \n    # ATAN2().\n    #\n    # Based on the excellent tutorial at:\n    # http://www.scribd.com/doc/2569355/Geo-Distance-Search-with-MySQL\n    #\n    def full_distance(latitude, longitude, lat_attr, lon_attr, options = {})\n      units = options[:units] || Geocoder.config.units\n      earth = Geocoder::Calculations.earth_radius(units)\n\n      \"#{earth} * 2 * ASIN(SQRT(\" +\n        \"POWER(SIN((#{latitude.to_f} - #{lat_attr}) * PI() / 180 / 2), 2) + \" +\n        \"COS(#{latitude.to_f} * PI() / 180) * COS(#{lat_attr} * PI() / 180) * \" +\n        \"POWER(SIN((#{longitude.to_f} - #{lon_attr}) * PI() / 180 / 2), 2)\" +\n      \"))\"\n    end\n\n    ##\n    # Distance calculation for use with a database without trigonometric\n    # functions, like SQLite. Approach is to find objects within a square\n    # rather than a circle, so results are very approximate (will include\n    # objects outside the given radius).\n    #\n    # Distance and bearing calculations are *extremely inaccurate*. To be\n    # clear: this only exists to provide interface consistency. Results\n    # are not intended for use in production!\n    #\n    def approx_distance(latitude, longitude, lat_attr, lon_attr, options = {})\n      units = options[:units] || Geocoder.config.units\n      dx = Geocoder::Calculations.longitude_degree_distance(30, units)\n      dy = Geocoder::Calculations.latitude_degree_distance(units)\n\n      # sin of 45 degrees = average x or y component of vector\n      factor = Math.sin(Math::PI / 4)\n\n      \"(#{dy} * ABS(#{lat_attr} - #{latitude.to_f}) * #{factor}) + \" +\n        \"(#{dx} * ABS(#{lon_attr} - #{longitude.to_f}) * #{factor})\"\n    end\n\n    def within_bounding_box(sw_lat, sw_lng, ne_lat, ne_lng, lat_attr, lon_attr)\n      spans = \"#{lat_attr} BETWEEN #{sw_lat.to_f} AND #{ne_lat.to_f} AND \"\n      # handle box that spans 180 longitude\n      if sw_lng.to_f > ne_lng.to_f\n        spans + \"(#{lon_attr} BETWEEN #{sw_lng.to_f} AND 180 OR \" +\n        \"#{lon_attr} BETWEEN -180 AND #{ne_lng.to_f})\"\n      else\n        spans + \"#{lon_attr} BETWEEN #{sw_lng.to_f} AND #{ne_lng.to_f}\"\n      end\n    end\n\n    ##\n    # Fairly accurate bearing calculation. Takes a latitude, longitude,\n    # and an options hash which must include a :bearing value\n    # (:linear or :spherical).\n    #\n    # For use with a database that supports MOD() and trigonometric functions\n    # SIN(), COS(), ASIN(), ATAN2().\n    #\n    # Based on:\n    # http://www.beginningspatial.com/calculating_bearing_one_point_another\n    #\n    def full_bearing(latitude, longitude, lat_attr, lon_attr, options = {})\n      degrees_per_radian = Geocoder::Calculations::DEGREES_PER_RADIAN\n      case options[:bearing] || Geocoder.config.distances\n      when :linear\n        \"MOD(CAST(\" +\n          \"(ATAN2( \" +\n            \"((#{lon_attr} - #{longitude.to_f}) / #{degrees_per_radian}), \" +\n            \"((#{lat_attr} - #{latitude.to_f}) / #{degrees_per_radian})\" +\n          \") * #{degrees_per_radian}) + 360 \" +\n        \"AS decimal), 360)\"\n      when :spherical\n        \"MOD(CAST(\" +\n          \"(ATAN2( \" +\n            \"SIN( (#{lon_attr} - #{longitude.to_f}) / #{degrees_per_radian} ) * \" +\n            \"COS( (#{lat_attr}) / #{degrees_per_radian} ), (\" +\n              \"COS( (#{latitude.to_f}) / #{degrees_per_radian} ) * SIN( (#{lat_attr}) / #{degrees_per_radian})\" +\n            \") - (\" +\n              \"SIN( (#{latitude.to_f}) / #{degrees_per_radian}) * COS((#{lat_attr}) / #{degrees_per_radian}) * \" +\n              \"COS( (#{lon_attr} - #{longitude.to_f}) / #{degrees_per_radian})\" +\n            \")\" +\n          \") * #{degrees_per_radian}) + 360 \" +\n        \"AS decimal), 360)\"\n      end\n    end\n\n    ##\n    # Totally lame bearing calculation. Basically useless except that it\n    # returns *something* in databases without trig functions.\n    #\n    def approx_bearing(latitude, longitude, lat_attr, lon_attr, options = {})\n      \"CASE \" +\n        \"WHEN (#{lat_attr} >= #{latitude.to_f} AND \" +\n          \"#{lon_attr} >= #{longitude.to_f}) THEN  45.0 \" +\n        \"WHEN (#{lat_attr} <  #{latitude.to_f} AND \" +\n          \"#{lon_attr} >= #{longitude.to_f}) THEN 135.0 \" +\n        \"WHEN (#{lat_attr} <  #{latitude.to_f} AND \" +\n          \"#{lon_attr} <  #{longitude.to_f}) THEN 225.0 \" +\n        \"WHEN (#{lat_attr} >= #{latitude.to_f} AND \" +\n          \"#{lon_attr} <  #{longitude.to_f}) THEN 315.0 \" +\n      \"END\"\n    end\n  end\nend\n"], "filenames": ["lib/geocoder/sql.rb"], "buggy_code_start_loc": [47], "buggy_code_end_loc": [54], "fixing_code_start_loc": [47], "fixing_code_end_loc": [54], "type": "CWE-89", "message": "sql.rb in Geocoder before 1.6.1 allows Boolean-based SQL injection when within_bounding_box is used in conjunction with untrusted sw_lat, sw_lng, ne_lat, or ne_lng data.", "other": {"cve": {"id": "CVE-2020-7981", "sourceIdentifier": "cve@mitre.org", "published": "2020-01-25T20:15:09.813", "lastModified": "2020-01-27T18:59:39.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "sql.rb in Geocoder before 1.6.1 allows Boolean-based SQL injection when within_bounding_box is used in conjunction with untrusted sw_lat, sw_lng, ne_lat, or ne_lng data."}, {"lang": "es", "value": "El archivo sql.rb en Geocoder versiones anteriores a 1.6.1, permite una inyecci\u00f3n de SQL basada en Boolean cuando within_bounding_box se usa junto con datos no confiables sw_lat, sw_lng, ne_lat o ne_lng."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygeocoder:geocoder:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.6.1", "matchCriteriaId": "FCBCB84E-137B-47F3-B90B-06C5E15B6147"}]}]}], "references": [{"url": "https://github.com/alexreisner/geocoder/commit/dcdc3d8675411edce3965941a2ca7c441ca48613", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/alexreisner/geocoder/compare/v1.6.0...v1.6.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/alexreisner/geocoder/commit/dcdc3d8675411edce3965941a2ca7c441ca48613"}}