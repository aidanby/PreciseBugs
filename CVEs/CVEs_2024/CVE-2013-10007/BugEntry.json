{"buggy_code": ["=== WP Print Friendly ===\nContributors: ethitter, thinkoomph\nDonate link: http://www.thinkoomph.com/plugins-modules/wp-print-friendly/\nTags: print, template, printer, printable\nRequires at least: 3.1\nTested up to: 3.5\nStable tag: 0.5.2\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nExtends WordPress' template system to support printer-friendly templates. Works with permalink structures to support nice URLs.\n\n== Description ==\n\nExtends WordPress' template system to support printer-friendly templates for posts, pages, and custom post types. Uses WP standard template naming to support templates on a post-type basis. Supports printing paged posts on single page. Adds nice URLs for printer-friendly pages.\n\n**IMPORTANT**: There are certain plugins that may interfere with this plugin's functionality. See the **FAQ** for more information.\n\n== Installation ==\n\n1. Upload wp-print-friendly.php to /wp-content/plugins/.\n2. Activate plugin through the WordPress Plugins menu.\n3. Navigate to Options > Permalinks and click *Save Changes* to update navigation.\n\n== Frequently Asked Questions ==\n\n= Print links don't work =\nFirst, navigate to Options > Permalinks in WP Admin, click *Save Changes*, and try again.\n\nIf clicking on a print link takes you back to the post or page where the link appeared, see the **Known Plugin Conflicts** item below.\n\nIf, after reviewing the remaining FAQ, you are still experiencing problems, visit [http://www.thinkoomph.com/plugins-modules/wp-print-friendly/](http://www.thinkoomph.com/plugins-modules/wp-print-friendly/) and leave a comment detailing the problem.\n\n= How should I name print templates? =\nPrint templates should be prefixed with *wpf* and follow WordPress template conventions from there. To use one template for all contexts unless otherwise specified, name your template *wpf.php.*\n\nFor both built-in and custom post types, *wpf-[post type name].php* will be used for that post type. To use a template for a single post type object, name your template *wpf-[post type name]-[slug].php*.\n\nFor custom taxonomies, follow the naming conventions for post types.\n\nSimilarly, *wpf-home.php* will load that template for the front page of your site.\n\nThe plugin also includes a default template that may suit many needs.\n\n= How do I add a print link to my templates? =\nThe function `wpf_the_print_link` will add a link to the print-friendly version of whatever page it appears on. This function accepts the following arguments:\n\n* **$page_link**: Set to true to add a link to the current page in a paged post in addition a to a link for the entire post.\n* **$link_text**: Set to text that should appear for the print link. Defaults to *Print this post*.\n* **$class**: Specifies the CSS class for the print link. Defaults to *print_link*.\n* **$page_link_separator**: If $page_link is true, specifies what separator will appear between the print link for the entire post and the print link for the current page of the post.\n* **$page_link_text**: If $page_link is true, specifies what text will appear for the print link for the current page. Defaults to *Print this page*.\n* **$link_target**: If set to \"new\", print links will open in a new window.\n\n= Known Plugin Conflicts =\nThis plugin is known to conflict with certain plugins, many pertaining to SEO and permalinks. Conflicting plugins include, but are not limited to, the following:\n\n* **WordPress SEO by Yoast:** This plugin's `Permalink` options, particularly *Redirect attachment URL's to parent post URL* and *Redirect ugly URL's to clean permalinks. (Not recommended in many cases!)*, interfere with WP Print Friendly's ability to display print templates. Both must be disabled, and the site's rewrite rules regenerated (by visiting Options > Permalinks and clicking *Save Changes*), for WP Print Friendly to function.\n\n== Changelog ==\n\n= 0.5.2 =\n* Revert change in is_print() method made in version 0.5 as it breaks the method when no page number is specified. See [https://github.com/ethitter/WP-Print-Friendly/issues/2](https://github.com/ethitter/WP-Print-Friendly/issues/2).\n\n= 0.5.1 =\n* Correct construction of query needed in situations where verbose page rules are required.\n\n= 0.5 =\n* Add additional rewrite rules for situations where verbose page rules are required.\n* Disable canonical redirect when print template is requested.\n* Update is_print() method to use WordPress API.\n* Correct translation string implementation.\n* Update code to better conform to WordPress Coding Standards.\n\n= 0.4.4.1 =\n* Remove unnecessary query_var filter.\n\n= 0.4.4 =\n* Full support for child themes.\n* Expand template choosing to fully support WordPress template hierarchy as described at [http://codex.wordpress.org/Template_Hierarchy](http://codex.wordpress.org/Template_Hierarchy).\n* Simplify rewrite rules creation.\n\n= 0.4.3.3 =\n* Correct error that would display wrong page's content when printing a single page of a paged post.\n* Correct error in link generation for page-specific print links.\n* Increase compatibility with View All Post's Pages plugin.\n\n= 0.4.3.2 =\n* Resolve PHP notice in options retrieval.\n* Add compatibility with View All Post's Pages plugin (release forthcoming).\n\n= 0.4.3.1 =\n* Fix bug in options retrieval that caused print links to be added to default post types if no post types were selected.\n* Resolve PHP notice when using default permalinks.\n\n= 0.4.3 =\n* Fix bug in page number function.\n* Rewrite endnote link processing, including a refined regex pattern.\n* Introduce class property for print slug.\n* Correct minor bug in print link generation.\n* Add canonical link attribute and nofollow declaration to default template.\n\n= 0.4.2.2 =\n* Correct generation of custom post type rewrite rules.\n\n= 0.4.2.1 =\n* Version 0.4.2 omitted the default template.\n\n= 0.4.2 =\n* Correct page rewrite rules to accomodate situations necessitating verbose rules, such as when the permalink structure starts with `%postname%`. Thanks to Wes Herzik at ikonic for discovering and reporting this issue.\n\n= 0.4.1 =\n* Fix bug that displayed post links automatically on the wrong post types.\n\n= 0.4 =\n* Child pages now fully supported.\n* Generates and registers rewrite rules more efficiently.\n* Rewrite setting for all post types and taxonomies are now considered when adding print support.\n* Add option to disable endnotes representing links found in content.\n* Move copyright and other static elements from content filters to default template.\n* Add function to display page numbers when printing single page of post.\n* Options page is now fully translation-ready.\n* Notices are translation-ready.\n* Correct various other bugs, including many related to non-standard permalink structures, custom post types, and custom taxonomies.\n\n= 0.3.2 =\n* Add option to open print-friendly views in a new window.\n\n= 0.3.1 =\n* Correct PHP error in `is_print()`.\n\n= 0.3 =\n* Initial version.\n\n== Upgrade Notice ==\n\n= 0.5.2 =\nResolves a problem where requests for print templates redirect to the article.\n\n= 0.5.1 =\nEnsure that proper query string is built when verbose page rules are required.\n\n= 0.5 =\nAdds better support for sites that use verbose page rules, resolving situations where requests for print template redirect to the post.\n\n= 0.4.4.1 =\nRemoves unnecessary query_var filter.\n\n= 0.4.4 =\nAdds full child theme and template hierarchy support for template selection. Simplifies rewrite rules.\n\n= 0.4.3.3 =\nCorrects a few errors related to paged posts and further enhances compatibility with View All Post's Pages plugin.\n\n= 0.4.3.2 =\nFixes a minor bug in plugin's options retrieval and enhances compatibility with forthcoming View All Post's Pages plugin.\n\n= 0.4.3.1 =\nFixes a bug in plugin's options retrieval that caused print links to be added to default post types if no post types were chosen. Also resolves a PHP notice encountered when using default permalinks.\n\n= 0.4.3 =\nFixes various bugs in the print link, page numbering, and endnote generating functions. Also introduces a class variable for permalink component. Default template is updated to be more SEO friendly, now containing both canonical URL and nofollow declarations.\n\n= 0.4.2.2 =\nRewrite rules for custom post types are now generated correctly.\n\n= 0.4.2.1 =\nVersion 0.4.2 omitted the default template.\n\n= 0.4.2 =\nThis release expands the plugin's page rewrite rules to accomodate permalink structures that necessitate verbose rules, such as when the structure begins with `%postname%`.\n\n= 0.4.1 =\nThis release fixes bug that displayed post links automatically on the wrong post types.\n\n= 0.4 =\nThis release addresses numerous bugs reported by the community, including print templates for child pages. All admin text, save the plugin's name, are now ready for translation. Templates are now completely customizable, and new template functions are included.", "<?php\n/*\nPlugin Name: WP Print Friendly\nPlugin URI: http://www.thinkoomph.com/plugins-modules/wp-print-friendly/\nDescription: Extends WordPress' template system to support printer-friendly templates. Works with permalink structures to support nice URLs.\nAuthor: Erick Hitter & Oomph, Inc.\nVersion: 0.5.2\nAuthor URI: http://www.thinkoomph.com/\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\nclass wp_print_friendly {\n\tvar $query_var = 'print';\n\n\tvar $ns = 'wp_print_friendly';\n\n\tvar $settings_key = 'wpf';\n\tvar $settings_defaults = array(\n\t\t'auto' => false,\n\t\t'placement' => 'below',\n\t\t'post_types' => array( 'post', 'page' ),\n\t\t'print_text' => 'Print this entry',\n\t\t'print_text_page' => 'Print this page',\n\t\t'css_class' => 'print_link',\n\t\t'link_target' => 'same',\n\t\t'endnotes' => true,\n\t\t'endnotes_label' => 'Endnotes:'\n\t);\n\n\tvar $notice_key = 'wpf_admin_notice_dismissed';\n\n\t/**\n\t * Register deactivation hook and filter.\n\t *\n\t * @uses register_deactivation_hook, add_filter\n\t * @return null\n\t */\n\tpublic function __construct() {\n\t\tregister_deactivation_hook( __FILE__, array( $this, 'deactivation_hook' ) );\n\t\tadd_action( 'plugins_loaded', array( $this, 'action_plugins_loaded' ) );\n\t}\n\n\t/**\n\t * Clean up after plugin deactivation.\n\t *\n\t * @uses flush_rewrite_rules, delete_option\n\t * @action register_deactivation_hook\n\t * @return null\n\t */\n\tpublic function deactivation_hook() {\n\t\tflush_rewrite_rules();\n\n\t\tdelete_option( $this->settings_key );\n\t\tdelete_option( $this->notice_key );\n\t}\n\n\t/**\n\t * Register actions and filters.\n\t *\n\t * @uses add_action, add_filter, get_option\n\t * @action plugins_loaded\n\t * @return null\n\t */\n\tpublic function action_plugins_loaded() {\n\t\tadd_action( 'init', array( $this, 'action_init' ), 20 );\n\t\tadd_action( 'admin_init', array( $this, 'action_admin_init' ) );\n\t\tadd_action( 'admin_menu', array( $this, 'action_admin_menu' ) );\n\t\tadd_filter( 'request', array( $this, 'filter_request' ) );\n\t\tadd_action( 'pre_get_posts', array( $this, 'action_pre_get_posts' ) );\n\t\tadd_filter( 'template_include', array( $this, 'filter_template_include' ) );\n\t\tadd_filter( 'redirect_canonical', array( $this, 'filter_redirect_canonical' ) );\n\t\tadd_filter( 'body_class', array( $this, 'filter_body_class' ) );\n\t\tadd_filter( 'the_content', array( $this, 'filter_the_content' ), 0 );\n\t\tadd_filter( 'the_content', array( $this, 'filter_the_content_auto' ) );\n\t\tadd_filter( 'the_content', array( $this, 'filter_the_content_late' ), 99 );\n\n\t\tif ( ! get_option( $this->notice_key ) )\n\t\t\tadd_action( 'admin_notices', array( $this, 'action_admin_notices_activation' ) );\n\t}\n\n\t/**\n\t * Add print endpoint and rewrite rules for term taxonomy archives\n\t *\n\t * @uses add_rewrite_endpoint, $wp_rewrite, get_taxonomies, add_rewrite_rule, trailingslashit\n\t * @action init\n\t * @return null\n\t */\n\tpublic function action_init() {\n\t\tadd_rewrite_endpoint( $this->query_var, EP_ALL );\n\n\t\tglobal $wp_rewrite;\n\n\t\t//Taxonomies, since they aren't covered by add_rewrite_endpoint\n\t\tif ( $wp_rewrite->permalink_structure ) {\n\t\t\t$taxonomies = get_taxonomies( array(), 'objects' );\n\t\t\tforeach ( $taxonomies as $taxonomy => $args ) {\n\t\t\t\tif ( $args->rewrite == false || 'post_format' == $taxonomy )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$taxonomy_slug = '';\n\t\t\t\tif ( $args->rewrite[ 'with_front' ] && $wp_rewrite->front != '/' ) $taxonomy_slug .= $wp_rewrite->front;\n\t\t\t\t$taxonomy_slug .= $args->rewrite[ 'slug' ];\n\n\t\t\t\t$query_var = $args->query_var ? $args->query_var : 'taxonomy=' . $taxonomy . '&term';\n\n\t\t\t\tadd_rewrite_rule( $taxonomy_slug . '/(.+)/' . $this->query_var . '(/([0-9]*))?/?$', $wp_rewrite->index . '?' . $query_var . '=$matches[1]&' . $this->query_var . '=$matches[3]', 'top' );\n\t\t\t}\n\t\t}\n\n\t\t//Extra rules needed if verbose page rules are requested\n\t\tif ( $wp_rewrite->use_verbose_page_rules ) {\n\t\t\t//Build regex\n\t\t\t$regex = substr( str_replace( $wp_rewrite->rewritecode, $wp_rewrite->rewritereplace, $wp_rewrite->permalink_structure ), 1 );\n\t\t\t$regex = trailingslashit( $regex );\n\t\t\t$regex .= $this->query_var . '(/([0-9]*))?/?$';\n\n\t\t\t//Build corresponding query string\n\t\t\t$query = substr( str_replace( $wp_rewrite->rewritecode, $wp_rewrite->queryreplace, $wp_rewrite->permalink_structure ), 1 );\n\t\t\t$query = explode( '/', $query );\n\t\t\t$query = array_filter( $query );\n\n\t\t\t$i = 1;\n\t\t\tforeach ( $query as $key => $qv ) {\n\t\t\t\t$query[ $key ] .= '$matches[' . $i . ']';\n\t\t\t\t$i++;\n\t\t\t}\n\n\t\t\t$query[] = $this->query_var . '=$matches[' . ( $i + 1 ) . ']';\n\n\t\t\t$query = implode( '&', $query );\n\n\t\t\t//Add rule\n\t\t\tadd_rewrite_rule( $regex, $wp_rewrite->index . '?' . $query, 'top' );\n\t\t}\n\t}\n\n\t/**\n\t * Register plugin option and disable rewrite rule flush warning.\n\t *\n\t * @uses register_setting, update_option\n\t * @action admin_init\n\t * @return null\n\t */\n\tpublic function action_admin_init() {\n\t\tregister_setting( $this->settings_key, $this->settings_key, array( $this, 'admin_options_validate' ) );\n\n\t\tif ( isset( $_GET[ $this->notice_key ] ) )\n\t\t\tupdate_option( $this->notice_key, 1 );\n\t}\n\n\t/**\n\t * Determine if print template is being requested.\n\t *\n\t * @global $wp_query\n\t * @return bool\n\t */\n\tpublic function is_print() {\n\t\tglobal $wp_query;\n\t\treturn is_array( $wp_query->query ) && array_key_exists( $this->query_var, $wp_query->query );\n\t}\n\n\t/**\n\t * Select appropriate template based on post type and available templates.\n\t * Returns an array with name and path keys for available template or false if no template is found.\n\t *\n\t * @uses get_queried_object, is_home, is_front_page, locate_template\n\t * @return array or false\n\t */\n\tpublic function template_chooser() {\n\t\t//Get queried object to check post type\n\t\t$queried_object = get_queried_object();\n\n\t\t//Get plugin path\n\t\t$pluginpath = dirname( __FILE__ );\n\n\t\tif ( ( is_home() || is_front_page() ) && ( '' !== ( $path = locate_template( 'wpf-home.php', false ) ) ) ) {\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-home',\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\t}\n\t\telseif (\n\t\t\tis_object( $queried_object ) &&\n\t\t\tproperty_exists( $queried_object, 'taxonomy' ) &&\n\t\t\tproperty_exists( $queried_object, 'slug' ) &&\n\t\t\t( '' !== ( $path = locate_template( array( 'wpf-' . $queried_object->taxonomy . '-' . $queried_object->slug . '.php', 'wpf-' . $queried_object->taxonomy . '.php' ), false ) ) )\n\t\t)\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-' . $queried_object->taxonomy,\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif (\n\t\t\tis_object( $queried_object ) &&\n\t\t\tproperty_exists( $queried_object, 'post_type' ) &&\n\t\t\tproperty_exists( $queried_object, 'post_name' ) &&\n\t\t\t( '' !== ( $path = locate_template( array( 'wpf-' . $queried_object->post_type . '-' . $queried_object->post_name . '.php', 'wpf-' . $queried_object->post_type . '.php' ), false ) ) )\n\t\t)\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-' . $queried_object->post_type,\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif (\n\t\t\tis_object( $queried_object ) &&\n\t\t\tproperty_exists( $queried_object, 'post_name' ) &&\n\t\t\t( '' !== ( $path = locate_template( 'wpf-' . $queried_object->post_name . '.php', false ) ) )\n\t\t)\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-' . $queried_object->post_name,\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif ( '' !== ( $path = locate_template( 'wpf.php', false ) ) )\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-default',\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif ( file_exists( $pluginpath . '/default-template.php' ) )\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-plugin-default',\n\t\t\t\t'path' => $pluginpath . '/default-template.php'\n\t\t\t);\n\n\t\treturn isset( $template ) ? $template : false;\n\t}\n\n\t/**\n\t * Detect request for print stylesheet on the homepage and reset query variables.\n\t *\n\t * @param array $qv\n\t * @filter request\n\t * @return array\n\t */\n\tpublic function filter_request( $qv ) {\n\t\tif ( array_key_exists( 'pagename', $qv ) && $qv[ 'pagename' ] == $this->query_var ) {\n\t\t\t$qv[ $this->query_var ] = '';\n\t\t\tunset( $qv[ 'page' ] );\n\t\t\tunset( $qv[ 'pagename' ] );\n\t\t}\n\n\t\tif ( array_key_exists( $this->query_var, $qv ) && is_numeric( $qv[ $this->query_var ] ) )\n\t\t\t$qv[ 'page' ] = intval( $qv[ $this->query_var ] );\n\n\t\treturn $qv;\n\t}\n\n\t/**\n\t * Filter query when request to print specific page is made.\n\t *\n\t * @param object $query\n\t * @action pre_get_posts\n\t * @return object\n\t */\n\tpublic function action_pre_get_posts( $query ) {\n\t\tif ( array_key_exists( $this->query_var, $query->query_vars ) && ! empty( $query->query_vars[ $this->query_var ] ) ) {\n\t\t\t$qv = explode( '/', $query->query_vars[ $this->query_var ] );\n\n\t\t\tif ( array_key_exists( 1, $qv ) && is_numeric( $qv[ 1 ] ) )\n\t\t\t\t$query->query_vars[ 'page' ] = (int)$qv[ 1 ];\n\t\t}\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Filter template include to return print template if requested.\n\t *\n\t * @param string $template\n\t * @filter template_include\n\t * @return string\n\t */\n\tpublic function filter_template_include( $template ) {\n\t\tif ( $this->is_print() && ( $print_template = $this->template_chooser() ) )\n\t\t\t$template = $print_template[ 'path' ];\n\n\t\treturn $template;\n\t}\n\n\t/**\n\t * Prevent canonical redirect if print URL is requested.\n\t *\n\t * @param string $url\n\t * @uses this::is_print\n\t * @filter redirect_canonical\n\t * @return string or false\n\t */\n\tpublic function filter_redirect_canonical( $url ) {\n\t\tif ( $this->is_print() )\n\t\t\t$url = false;\n\n\t\treturn $url;\n\t}\n\n\t/**\n\t * Filter body classes to include references to print template.\n\t *\n\t * @param array $classes\n\t * @filter body_class\n\t * @return array\n\t */\n\tpublic function filter_body_class( $classes ) {\n\t\tif ( $this->is_print() && ( $print_template = $this->template_chooser() ) ) {\n\t\t\tif ( $print_template[ 'name' ] == 'default' )\n\t\t\t\t$classes[] = 'wpf';\n\t\t\telse\n\t\t\t\t$classes[] = $print_template[ 'name' ];\n\t\t}\n\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Filter post content to support printing entire post on one page.\n\t *\n\t * @param string $content\n\t * @uses get_query_var\n\t * @filter the_content\n\t * @return string\n\t */\n\tpublic function filter_the_content( $content ) {\n\t\tif ( $this->is_print() ) {\n\t\t\t$print = get_query_var( $this->query_var );\n\n\t\t\tif ( $print == 'all' || $print == '/all' || empty( $print ) ) {\n\t\t\t\tglobal $post;\n\n\t\t\t\t$content = $post->post_content;\n\t\t\t\t$content = str_replace(\"\\n<!--nextpage-->\\n\", \"\\n\\n\", $content);\n\t\t\t\t$content = str_replace(\"\\n<!--nextpage-->\", \"\\n\", $content);\n\t\t\t\t$content = str_replace(\"<!--nextpage-->\\n\", \"\\n\", $content);\n\t\t\t\t$content = str_replace(\"<!--nextpage-->\", ' ', $content);\n\t\t\t}\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Filter the content if automatic inclusion is selected.\n\t *\n\t * @param string $content\n\t * @uses $this::get_options, $post, $this::print_url, get_query_var, apply_filters\n\t * @filter the_content\n\t * @return string\n\t */\n\tpublic function filter_the_content_auto( $content ) {\n\t\t$options = $this->get_options();\n\n\t\tglobal $post;\n\n\t\tif ( is_array( $options ) && array_key_exists( 'auto', $options ) && $options[ 'auto' ] == true && in_array( $post->post_type, $options[ 'post_types' ] ) && ! $this->is_print() ) {\n\t\t\textract( $options );\n\n\t\t\t//Basic URL\n\t\t\t$print_url = $this->print_url();\n\n\t\t\t//Page URL, if necessary\n\t\t\tif ( ! empty( $print_text_page ) && strpos( $post->post_content, '<!--nextpage-->' ) !== false ) {\n\t\t\t\t$page = get_query_var( 'page' );\n\t\t\t\t$page = $page ? $page : 1;\n\n\t\t\t\t$print_url_page = $this->print_url( false, $page );\n\t\t\t}\n\n\t\t\t//Build link(s)\n\t\t\t$link = '<p class=\"wpf_wrapper\"><a class=\"' . $css_class . '\" href=\"' . $print_url . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $print_text . '</a>';\n\n\t\t\tif ( isset( $print_url_page ) ) {\n\t\t\t\t$link .= ' | ';\n\t\t\t\t$link .= '<a class=\"' . $css_class . ' ' . $css_class . '_cur\" href=\"' . $print_url_page . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $print_text_page . '</a>';\n\t\t\t}\n\n\t\t\t$link .= '</p><!-- .wpf_wrapper -->';\n\n\t\t\t//Place link(s)\n\t\t\tif ( $placement == 'above' )\n\t\t\t\t$content = $link . $content;\n\t\t\telseif ( $placement == 'below' )\n\t\t\t\t$content = $content . $link;\n\t\t\telseif ( $placement == 'both' )\n\t\t\t\t$content = $link . $content . $link;\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Convert links to endnotes if desired.\n\t *\n\t * @param string $content\n\t * @uses $this::is_print, $this::get_options\n\t * @filter the_content\n\t * @return string\n\t */\n\tpublic function filter_the_content_late( $content ) {\n\t\tif ( $this->is_print() ) {\n\t\t\tglobal $post;\n\n\t\t\t$options = $this->get_options();\n\n\t\t\t//Endnotes\n\t\t\tif ( $options[ 'endnotes' ] ) {\n\t\t\t\t$links = array();\n\t\t\t\t$i = 1;\n\n\t\t\t\t//Build array of links\n\t\t\t\tpreg_match_all( '#<a href=([\"\\'{1}])([^\"\\']+)([\"\\'{1}])([^>]*)>(.*?)</a>#i', $content, $matches );\n\n\t\t\t\tif (\n\t\t\t\t\tisset( $matches ) && is_array( $matches ) &&\n\t\t\t\t\tarray_key_exists( 0, $matches ) && ! empty( $matches[ 0 ] ) &&\n\t\t\t\t\tarray_key_exists( 2, $matches ) && ! empty( $matches[ 2 ] ) &&\n\t\t\t\t\tarray_key_exists( 5, $matches ) && ! empty( $matches[ 5 ] )\n\t\t\t\t) {\n\t\t\t\t\t//Format matches for replacement in content\n\t\t\t\t\t$replacements = array();\n\t\t\t\t\tforeach ( $matches[ 0 ] as $key => $match ) {\n\t\t\t\t\t\t$replacements[ $match ] = array(\n\t\t\t\t\t\t\t'url' => $matches[ 2 ][ $key ],\n\t\t\t\t\t\t\t'title' => $matches[ 5 ][ $key ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Replace links with endnote markers\n\t\t\t\t\tforeach ( $replacements as $match => $args ) {\n\t\t\t\t\t\t$content = str_replace( $match, $args[ 'title' ] . '[' . $i . ']', $content );\n\t\t\t\t\t\t$links[ $i ] = $args;\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Output endnotes\n\t\t\t\t\t$endnotes = '<div class=\"wpf-endnotes\">';\n\t\t\t\t\t$endnotes .= '<strong>' . $options[ 'endnotes_label' ] . '</strong>';\n\t\t\t\t\t$endnotes .= '<ol>';\n\t\t\t\t\tforeach ( $links as $link ) {\n\t\t\t\t\t\t$endnotes .= '<li>';\n\t\t\t\t\t\t$endnotes .=  preg_replace( '#<img(.*)>#', '[Image]', $link[ 'title' ] ) . ': ' . esc_url( $link[ 'url' ] );\n\t\t\t\t\t\t$endnotes .= '</li>';\n\t\t\t\t\t}\n\t\t\t\t\t$endnotes .= '</ol></div><!-- .wpf-endnotes -->';\n\n\t\t\t\t\t$content .= $endnotes;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Generate URL for post's printer-friendly format.\n\t *\n\t * @param int $post_id\n\t * @param int $page\n\t * @uses is_view_all, is_home, is_front_page, home_url, $post, get_permalink, is_category, get_category_link, is_tag, get_tag_link, is_date, get_query_var, get_day_link, get_month_link, get_year_link, is_tax, get_queried_object, get_term_link, $wp_rewrite, path_join, trailingslashit, add_query_arg\n\t * @return string or bool\n\t */\n\tpublic function print_url( $post_id = false, $page = false ) {\n\t\tif ( $page === true )\n\t\t\treturn false;\n\n\t\tif ( function_exists( 'is_view_all' ) && is_view_all() )\n\t\t\t$page = false;\n\n\t\t$link = false;\n\n\t\t//Get link base specific to page type being viewed\n\t\tif ( is_singular() || in_the_loop() ) {\n\t\t\tif ( $post_id == false ) {\n\t\t\t\tglobal $post;\n\t\t\t\t$post_id = $post->ID;\n\t\t\t}\n\n\t\t\tif ( ! $post_id )\n\t\t\t\treturn false;\n\n\t\t\t$link = get_permalink( $post_id );\n\t\t}\n\t\telseif ( is_home() || is_front_page() )\n\t\t\t$link = home_url( '/' );\n\t\telseif ( is_category() )\n\t\t\t$link = get_category_link( get_query_var( 'cat' ) );\n\t\telseif ( is_tag() )\n\t\t\t$link = get_tag_link( get_query_var( 'tag_id' ) );\n\t\t/* DISABLED FOR NOW AS PRINTING OF DATE-BASED ARCHIVES DOESN'T WORK YET\n\t\telseif ( is_date() ) {\n\t\t\t$year = get_query_var( 'year' );\n\t\t\t$monthnum = get_query_var( 'monthnum' );\n\t\t\t$day = get_query_var( 'day' );\n\n\t\t\tif ( $day )\n\t\t\t\t$link = get_day_link( $year, $monthnum, $day );\n\t\t\telseif ( $monthnum )\n\t\t\t\t$link = get_month_link( $year, $monthnum );\n\t\t\telse\n\t\t\t\t$link = get_year_link( $year );\n\t\t}*/\n\t\telseif ( is_tax() ) {\n\t\t\t$queried_object = get_queried_object();\n\n\t\t\tif ( is_object( $queried_object ) && property_exists( $queried_object, 'taxonomy' ) && property_exists( $queried_object, 'term_id' ) )\n\t\t\t\t$link = get_term_link( (int)$queried_object->term_id, $queried_object->taxonomy );\n\t\t}\n\n\t\t//If link base is set, build link\n\t\tif ( $link !== false ) {\n\t\t\tglobal $wp_rewrite;\n\n\t\t\t$page = intval( $page );\n\n\t\t\tif ( $wp_rewrite->using_permalinks() ) {\n\t\t\t\t$link = path_join( $link, $this->query_var );\n\n\t\t\t\tif ( $page )\n\t\t\t\t\t$link = path_join( $link, intval( $page ) );\n\n\t\t\t\tif ( $wp_rewrite->use_trailing_slashes )\n\t\t\t\t\t$link = trailingslashit( $link );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$link = add_query_arg( $this->query_var, is_numeric( $page ) ? intval( $page ) : 'all', $link );\n\n\t\t\t\tif ( $page )\n\t\t\t\t\t$link = add_query_arg( 'page', is_numeric( $page ) ? intval( $page ) : 'all', $link );\n\t\t\t}\n\t\t}\n\n\t\treturn $link;\n\t}\n\n\t/**\n\t * Add menu item for options page.\n\t *\n\t * @uses add_options_page\n\t * @action admin_menu\n\t * @return null\n\t */\n\tpublic function action_admin_menu() {\n\t\tadd_options_page( 'WP Print Friendly Options', 'WP Print Friendly', 'manage_options', $this->ns, array( $this, 'admin_options' ) );\n\t}\n\n\t/**\n\t * Render options page.\n\t *\n\t * @uses settings_fields, $this::get_options, _e, checked, esc_attr\n\t * @return html\n\t */\n\tpublic function admin_options() {\n\t?>\n\t\t<div class=\"wrap\">\n\t\t\t<h2>WP Print Friendly</h2>\n\n\t\t\t<form action=\"options.php\" method=\"post\">\n\t\t\t\t<?php\n\t\t\t\t\tsettings_fields( $this->settings_key );\n\t\t\t\t\t$options = $this->get_options();\n\n\t\t\t\t\t$post_types = $this->post_types_array();\n\t\t\t\t?>\n\n\t\t\t\t<h3>Display Options</h3>\n\n\t\t\t\t<table class=\"form-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Automatically add print links based on settings below?', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[auto]\" id=\"auto-true\" value=\"1\"<?php checked( $options[ 'auto' ], true, true ); ?> /> <label for=\"auto-true\"><?php _e( 'Yes', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[auto]\" id=\"auto-false\" value=\"0\"<?php checked( $options[ 'auto' ], false, true ); ?> /> <label for=\"auto-false\"><?php _e( 'No', 'wp_print_friendly' ); ?></label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Automatically place link:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[placement]\" id=\"placement-above\" value=\"above\"<?php checked( $options[ 'placement' ], 'above', true ); ?> /> <label for=\"placement-above\"><?php _e( 'Above content', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[placement]\" id=\"placement-below\" value=\"below\"<?php checked( $options[ 'placement' ], 'below', true ); ?> /> <label for=\"placement-below\"><?php _e( 'Below content', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[placement]\" id=\"placement-both\" value=\"both\"<?php checked( $options[ 'placement' ], 'both', true ); ?> /> <label for=\"placement-both\"><?php _e( 'Above and below content', 'wp_print_friendly' ); ?></label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Display automatically on:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<?php foreach ( $post_types as $post_type ): ?>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[post_types][]\" id=\"pt-<?php echo $post_type->name; ?>\" value=\"<?php echo $post_type->name; ?>\"<?php if ( in_array( $post_type->name, $options[ 'post_types' ] ) ) echo ' checked=\"checked\"'; ?> /> <label for=\"pt-<?php echo $post_type->name; ?>\"><?php echo $post_type->labels->name; ?></label><br />\n\t\t\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<h3>Link Options</h3>\n\n\t\t\t\t<table class=\"form-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Text for link to print entire item:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[print_text]\" id=\"print_text\" value=\"<?php echo esc_attr( $options[ 'print_text' ] ); ?>\" style=\"width: 40%;\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Text for link to print current page:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[print_text_page]\" id=\"print_text_page\" value=\"<?php echo esc_attr( $options[ 'print_text_page' ] ); ?>\" style=\"width: 40%;\" />\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'If viewing a multipage post (set by using the &lt;!--nextpage--&gt; tag), the text above is used for a link to print just the current page.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( '<strong>To hide this link,</strong> clear the field\\'s contents.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'CSS for print links:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[css_class]\" id=\"css_class\" value=\"<?php echo esc_attr( $options[ 'css_class' ] ); ?>\" style=\"width: 40%;\" />\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'For page-specific print links, a second class, created by appending <strong>_cur</strong> to the above text, is added to each link.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'Be aware that Internet Explorer will only interpret the first two CSS classes, so if multiple classes are entered above, the page-specific class may not be available in IE.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Open print-friendly views:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[link_target]\" id=\"target-same\" value=\"same\"<?php checked( $options[ 'link_target' ], 'same', true ); ?> /> <label for=\"target-same\"><?php _e( 'In the same window', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[link_target]\" id=\"target-new\" value=\"new\"<?php checked( $options[ 'link_target' ], 'new', true ); ?> /> <label for=\"target-new\"><?php _e( 'In a new window', 'wp_print_friendly' ); ?></label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<h3>Endnote Options</h3>\n\n\t\t\t\t<table class=\"form-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Include endnotes for links found in content?', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[endnotes]\" id=\"endnotes\" value=\"1\"<?php checked( $options[ 'endnotes' ], true, true ); ?> /> <label for=\"endnotes\"><?php _e( 'Yes', 'wp_print_friendly' ); ?></label>\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'If enabled, content is automatically scanned for links and an endnote is added for each link found. This can be helpful for users if your content includes many links.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><label for=\"endnotes-label\"><?php _e( 'Endnotes heading:', 'wp_print_friendly' ); ?></label></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[endnotes_label]\" class=\"regular-text code\" id=\"endnotes-label\" value=\"<?php echo esc_attr( $options[ 'endnotes_label' ] ); ?>\" />\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'If endnotes are enabled, the text entered above will be output above the list of links.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<p class=\"submit\">\n\t\t\t\t\t<input type=\"submit\" class=\"button-primary\" value=\"Save Changes\" />\n\t\t\t\t</p>\n\t\t\t</form>\n\n\t\t</div><!-- .wrap -->\n\t<?php\n\t}\n\n\t/**\n\t * Validate options\n\t *\n\t * @param array $options\n\t * @uses $this::get_options, $this::post_types_array, delete_option, sanitize_text_field\n\t * @return array\n\t */\n\tpublic function admin_options_validate( $options ) {\n\t\t$new_options = array(\n\t\t\t'endnotes' => false\n\t\t);\n\n\t\tif ( is_array( $options ) ) {\n\t\t\tforeach ( $options as $key => $value ) {\n\t\t\t\tswitch( $key ) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\tcase 'endnotes':\n\t\t\t\t\t\t$new_options[ $key ] = (bool)$value;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'placement':\n\t\t\t\t\t\t$placements = array(\n\t\t\t\t\t\t\t'above',\n\t\t\t\t\t\t\t'below',\n\t\t\t\t\t\t\t'both'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$new_options[ $key ] = in_array( $value, $placements ) ? $value : 'below';\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'post_types':\n\t\t\t\t\t\t$post_types = $this->post_types_array();\n\n\t\t\t\t\t\t$new_options[ $key ] = array();\n\n\t\t\t\t\t\tif ( is_array( $value ) && is_array( $post_types ) ) {\n\t\t\t\t\t\t\tforeach ( $post_types as $post_type ) {\n\t\t\t\t\t\t\t\tif ( in_array( $post_type->name, $value ) )\n\t\t\t\t\t\t\t\t\t$new_options[ $key ][] = $post_type->name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'print_text':\n\t\t\t\t\tcase 'print_text_page':\n\t\t\t\t\tcase 'css_class':\n\t\t\t\t\tcase 'endnotes_label':\n\t\t\t\t\t\t$value = sanitize_text_field( $value );\n\n\t\t\t\t\t\tif ( $key == 'print_text' && empty( $value ) )\n\t\t\t\t\t\t\t$value = 'Print this entry';\n\n\t\t\t\t\t\t$new_options[ $key ] = $value;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'link_target':\n\t\t\t\t\t\t$new_options[ $key ] = $value == 'new' ? 'new' : 'same';\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $new_options;\n\t}\n\n\t/**\n\t * Return plugin options array parsed with default options.\n\t *\n\t * @uses wp_parse_args, get_option\n\t * @return array\n\t */\n\tpublic function get_options() {\n\t\t$options = get_option( $this->settings_key, $this->settings_defaults );\n\n\t\tif ( ! array_key_exists( 'post_types', $options ) )\n\t\t\t$options[ 'post_types' ] = array();\n\n\t\treturn wp_parse_args( $options, $this->settings_defaults );\n\t}\n\n\t/**\n\t * Build array of available post types, excluding all builtin ones except 'post' and 'page'.\n\t *\n\t * @uses get_post_types\n\t * @return array\n\t */\n\tpublic function post_types_array() {\n\t\t$post_types = array();\n\t\tforeach ( get_post_types( array(), 'objects' ) as $post_type ) {\n\t\t\tif ( $post_type->_builtin == false || $post_type->name == 'post' || $post_type->name == 'page' )\n\t\t\t\t$post_types[] = $post_type;\n\t\t}\n\n\t\treturn $post_types;\n\t}\n\n\t/**\n\t * Display admin notice regarding rewrite rules flush.\n\t *\n\t * @uses get_option, _e, __, admin_url, add_query_arg\n\t * @action admin_notices\n\t * @return html or null\n\t */\n\tpublic function action_admin_notices_activation() {\n\t\tif ( ! get_option( $this->notice_key ) ):\n\t\t?>\n\n\t\t<div id=\"wpf-rewrite-flush-warning\" class=\"error fade\">\n\t\t\t<p><strong><?php _e( 'WP Print Friendly', 'wp_print_friendly' ); ?></strong></p>\n\n\t\t\t<p><?php printf( __( 'You must refresh your site\\'s permalinks before WP Print Friendly is fully activated. To do so, go to <a href=\"%s\">Permalinks</a> and click the <strong><em>Save Changes</em></strong> button at the bottom of the screen.', 'wp_print_friendly' ), admin_url( 'options-permalink.php' ) ); ?></p>\n\n\t\t\t<p><?php printf( __( 'When finished, click <a href=\"%s\">here</a> to hide this message.', 'wp_print_friendly' ), admin_url( add_query_arg( $this->notice_key, 1, 'index.php' ) ) ); ?></p>\n\t\t</div>\n\n\t\t<?php\n\t\tendif;\n\t}\n\n\t/**\n\t * Render page numbers, such as \"Page 1 of 5.\"\n\t *\n\t * @param int $post_id\n\t * @param string $before\n\t * @param string $separator\n\t * @param string $after\n\t * @uses $this::is_print, get_query_var, get_post_field\n\t * @return string or false\n\t */\n\tpublic function page_numbers( $post_id = false, $before = 'Page ', $separator = ' of ', $after = '' ) {\n\t\tif ( ! $this->is_print() )\n\t\t\treturn false;\n\n\t\t//Don't display on views that include all pages of a post\n\t\t$print = get_query_var( $this->query_var );\n\t\tif ( $print == 'all' || $print == '/all' || empty( $print ) )\n\t\t\treturn false;\n\n\t\t//Get post ID and post content, or return false it either fails validation\n\t\t$post_id = intval( $post_id );\n\n\t\tif ( ! $post_id ) {\n\t\t\tglobal $post;\n\t\t\t$post_id = $post->ID;\n\t\t\t$post_content = $post->post_content;\n\t\t}\n\n\t\t$post_id = intval( $post_id );\n\n\t\tif ( ! $post_id )\n\t\t\treturn false;\n\n\t\tif ( ! isset( $post_content ) || empty( $post_content ) )\n\t\t\t$post_content = get_post_field( 'post_content', $post_id );\n\n\t\tif ( ! is_string( $post_content ) || empty( $post_content ) || strpos( $post_content, '<!--nextpage-->' ) === false )\n\t\t\treturn false;\n\n\t\t//Get current page\n\t\t$page = get_query_var( $this->query_var );\n\t\t$page = $page ? $page : 1;\n\n\t\t//Get total number of pages, or return false if total cannot be determined\n\t\t$num_pages = substr_count( $post_content, '<!--nextpage-->' );\n\n\t\tif ( is_int( $num_pages ) && $num_pages > 0 )\n\t\t\t$num_pages = $num_pages + 1;\n\t\telse\n\t\t\treturn false;\n\n\t\t//Having made it this far, return the specified string\n\t\treturn $before . $page . $separator . $num_pages . $after;\n\t}\n}\nglobal $wpf;\n$wpf = new wp_print_friendly;\n\n/**\n * Shortcut to function for generating post's printer-friendly format URL\n *\n * @param int $post_id\n * @param int $page\n * @uses $wpf\n * @return string or bool\n */\nfunction wpf_get_print_url( $post_id = false, $page = false ) {\n\tglobal $wpf;\n\tif ( ! is_a( $wpf, 'wp_print_friendly' ) )\n\t\t$wpf = new wp_print_friendly;\n\n\treturn $wpf->print_url( intval( $post_id ), intval( $page ) );\n}\n\n/**\n * Output link to printer-friendly post format.\n *\n * @param string $link_text\n * @param string $class\n * @param int $post_id\n * @param bool $page_link\n * @param string $page_link_separator\n * @param string $page_link_text\n * @param string $link_target\n * @uses $post, wpf_get_print_url, esc_attr, esc_url, get_query_var\n * @return string or null\n */\nfunction wpf_the_print_link( $page_link = false, $link_text = 'Print this post', $class = 'print_link', $page_link_separator = ' | ', $page_link_text = 'Print this page', $link_target = 'same' ) {\n\tglobal $post;\n\t$url = wpf_get_print_url( $post->ID );\n\n\t$page_link = (bool)$page_link;\n\n\tif ( function_exists( 'is_view_all' ) && is_view_all() )\n\t\t$page_link = false;\n\n\tif ( $url ) {\n\t\t$link = '<a ' . ( $class ? 'class=\"' . esc_attr( $class ) . '\"' : '' ) . ' href=\"' . esc_url( $url ) . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $link_text . '</a>';\n\n\t\tif ( $page_link && strpos( $post->post_content, '<!--nextpage-->' ) !== false ) {\n\t\t\t$page = get_query_var( 'page' );\n\t\t\t$page = $page ? $page : 1;\n\t\t\t$link .= $page_link_separator . '<a ' . ( $class ? 'class=\"' . esc_attr( $class ) . '_cur ' . esc_attr( $class ) . '\"' : '' ) . ' href=\"' . esc_url( wpf_get_print_url( $post->ID, $page ) ) . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $page_link_text . '</a>';\n\t\t}\n\n\t\techo $link;\n\t}\n}\n\n/**\n * Display page numbers, such as \"Page 1 of 5.\"\n *\n * @param int $post_id\n * @param string $before\n * @param string $separator\n * @param string $after\n * @uses $wpf\n * @return string or false\n */\nfunction wpf_the_page_numbers( $post_id = false, $before = 'Page ', $separator = ' of ', $after = '' ) {\n\tglobal $wpf;\n\tif ( ! is_a( $wpf, 'wp_print_friendly' ) )\n\t\t$wpf = new wp_print_friendly;\n\n\techo $wpf->page_numbers( intval( $post_id ), $before, $separator, $after );\n}\n\nif ( ! function_exists( 'is_print' ) ) {\n\t/**\n\t * Conditional tag indicating if printer-friendly format was requested.\n\t *\n\t * @uses $wpf\n\t * @return bool\n\t */\n\tfunction is_print() {\n\t\tglobal $wpf;\n\t\tif ( ! is_a( $wpf, 'wp_print_friendly' ) )\n\t\t\t$wpf = new wp_print_friendly;\n\n\t\treturn $wpf->is_print();\n\t}\n}\n?>"], "fixing_code": ["=== WP Print Friendly ===\nContributors: ethitter, stevenkword, thinkoomph\nDonate link: http://www.thinkoomph.com/plugins-modules/wp-print-friendly/\nTags: print, template, printer, printable\nRequires at least: 3.1\nTested up to: 3.5\nStable tag: 0.5.3\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nExtends WordPress' template system to support printer-friendly templates. Works with permalink structures to support nice URLs.\n\n== Description ==\n\nExtends WordPress' template system to support printer-friendly templates for posts, pages, and custom post types. Uses WP standard template naming to support templates on a post-type basis. Supports printing paged posts on single page. Adds nice URLs for printer-friendly pages.\n\n**IMPORTANT**: There are certain plugins that may interfere with this plugin's functionality. See the **FAQ** for more information.\n\n== Installation ==\n\n1. Upload wp-print-friendly.php to /wp-content/plugins/.\n2. Activate plugin through the WordPress Plugins menu.\n3. Navigate to Options > Permalinks and click *Save Changes* to update navigation.\n\n== Frequently Asked Questions ==\n\n= Print links don't work =\nFirst, navigate to Options > Permalinks in WP Admin, click *Save Changes*, and try again.\n\nIf clicking on a print link takes you back to the post or page where the link appeared, see the **Known Plugin Conflicts** item below.\n\nIf, after reviewing the remaining FAQ, you are still experiencing problems, visit [http://www.thinkoomph.com/plugins-modules/wp-print-friendly/](http://www.thinkoomph.com/plugins-modules/wp-print-friendly/) and leave a comment detailing the problem.\n\n= How should I name print templates? =\nPrint templates should be prefixed with *wpf* and follow WordPress template conventions from there. To use one template for all contexts unless otherwise specified, name your template *wpf.php.*\n\nFor both built-in and custom post types, *wpf-[post type name].php* will be used for that post type. To use a template for a single post type object, name your template *wpf-[post type name]-[slug].php*.\n\nFor custom taxonomies, follow the naming conventions for post types.\n\nSimilarly, *wpf-home.php* will load that template for the front page of your site.\n\nThe plugin also includes a default template that may suit many needs.\n\n= How do I add a print link to my templates? =\nThe function `wpf_the_print_link` will add a link to the print-friendly version of whatever page it appears on. This function accepts the following arguments:\n\n* **$page_link**: Set to true to add a link to the current page in a paged post in addition a to a link for the entire post.\n* **$link_text**: Set to text that should appear for the print link. Defaults to *Print this post*.\n* **$class**: Specifies the CSS class for the print link. Defaults to *print_link*.\n* **$page_link_separator**: If $page_link is true, specifies what separator will appear between the print link for the entire post and the print link for the current page of the post.\n* **$page_link_text**: If $page_link is true, specifies what text will appear for the print link for the current page. Defaults to *Print this page*.\n* **$link_target**: If set to \"new\", print links will open in a new window.\n\n= Known Plugin Conflicts =\nThis plugin is known to conflict with certain plugins, many pertaining to SEO and permalinks. Conflicting plugins include, but are not limited to, the following:\n\n* **WordPress SEO by Yoast:** This plugin's `Permalink` options, particularly *Redirect attachment URL's to parent post URL* and *Redirect ugly URL's to clean permalinks. (Not recommended in many cases!)*, interfere with WP Print Friendly's ability to display print templates. Both must be disabled, and the site's rewrite rules regenerated (by visiting Options > Permalinks and clicking *Save Changes*), for WP Print Friendly to function.\n\n== Changelog ==\n\n= 0.5.3 =\n* Creates is_protected() method to determine if the print page should be visible to the current user\n* Correct security vulnerability allowing both private and password protected posts from being accessed through the print page\n* Remove print_url links from the content when the current user does not have the necessary capabilities to view the print page\n\n= 0.5.2 =\n* Revert change in is_print() method made in version 0.5 as it breaks the method when no page number is specified. See [https://github.com/ethitter/WP-Print-Friendly/issues/2](https://github.com/ethitter/WP-Print-Friendly/issues/2).\n\n= 0.5.1 =\n* Correct construction of query needed in situations where verbose page rules are required.\n\n= 0.5 =\n* Add additional rewrite rules for situations where verbose page rules are required.\n* Disable canonical redirect when print template is requested.\n* Update is_print() method to use WordPress API.\n* Correct translation string implementation.\n* Update code to better conform to WordPress Coding Standards.\n\n= 0.4.4.1 =\n* Remove unnecessary query_var filter.\n\n= 0.4.4 =\n* Full support for child themes.\n* Expand template choosing to fully support WordPress template hierarchy as described at [http://codex.wordpress.org/Template_Hierarchy](http://codex.wordpress.org/Template_Hierarchy).\n* Simplify rewrite rules creation.\n\n= 0.4.3.3 =\n* Correct error that would display wrong page's content when printing a single page of a paged post.\n* Correct error in link generation for page-specific print links.\n* Increase compatibility with View All Post's Pages plugin.\n\n= 0.4.3.2 =\n* Resolve PHP notice in options retrieval.\n* Add compatibility with View All Post's Pages plugin (release forthcoming).\n\n= 0.4.3.1 =\n* Fix bug in options retrieval that caused print links to be added to default post types if no post types were selected.\n* Resolve PHP notice when using default permalinks.\n\n= 0.4.3 =\n* Fix bug in page number function.\n* Rewrite endnote link processing, including a refined regex pattern.\n* Introduce class property for print slug.\n* Correct minor bug in print link generation.\n* Add canonical link attribute and nofollow declaration to default template.\n\n= 0.4.2.2 =\n* Correct generation of custom post type rewrite rules.\n\n= 0.4.2.1 =\n* Version 0.4.2 omitted the default template.\n\n= 0.4.2 =\n* Correct page rewrite rules to accomodate situations necessitating verbose rules, such as when the permalink structure starts with `%postname%`. Thanks to Wes Herzik at ikonic for discovering and reporting this issue.\n\n= 0.4.1 =\n* Fix bug that displayed post links automatically on the wrong post types.\n\n= 0.4 =\n* Child pages now fully supported.\n* Generates and registers rewrite rules more efficiently.\n* Rewrite setting for all post types and taxonomies are now considered when adding print support.\n* Add option to disable endnotes representing links found in content.\n* Move copyright and other static elements from content filters to default template.\n* Add function to display page numbers when printing single page of post.\n* Options page is now fully translation-ready.\n* Notices are translation-ready.\n* Correct various other bugs, including many related to non-standard permalink structures, custom post types, and custom taxonomies.\n\n= 0.3.2 =\n* Add option to open print-friendly views in a new window.\n\n= 0.3.1 =\n* Correct PHP error in `is_print()`.\n\n= 0.3 =\n* Initial version.\n\n== Upgrade Notice ==\n\n= 0.5.2 =\nResolves a problem where requests for print templates redirect to the article.\n\n= 0.5.1 =\nEnsure that proper query string is built when verbose page rules are required.\n\n= 0.5 =\nAdds better support for sites that use verbose page rules, resolving situations where requests for print template redirect to the post.\n\n= 0.4.4.1 =\nRemoves unnecessary query_var filter.\n\n= 0.4.4 =\nAdds full child theme and template hierarchy support for template selection. Simplifies rewrite rules.\n\n= 0.4.3.3 =\nCorrects a few errors related to paged posts and further enhances compatibility with View All Post's Pages plugin.\n\n= 0.4.3.2 =\nFixes a minor bug in plugin's options retrieval and enhances compatibility with forthcoming View All Post's Pages plugin.\n\n= 0.4.3.1 =\nFixes a bug in plugin's options retrieval that caused print links to be added to default post types if no post types were chosen. Also resolves a PHP notice encountered when using default permalinks.\n\n= 0.4.3 =\nFixes various bugs in the print link, page numbering, and endnote generating functions. Also introduces a class variable for permalink component. Default template is updated to be more SEO friendly, now containing both canonical URL and nofollow declarations.\n\n= 0.4.2.2 =\nRewrite rules for custom post types are now generated correctly.\n\n= 0.4.2.1 =\nVersion 0.4.2 omitted the default template.\n\n= 0.4.2 =\nThis release expands the plugin's page rewrite rules to accomodate permalink structures that necessitate verbose rules, such as when the structure begins with `%postname%`.\n\n= 0.4.1 =\nThis release fixes bug that displayed post links automatically on the wrong post types.\n\n= 0.4 =\nThis release addresses numerous bugs reported by the community, including print templates for child pages. All admin text, save the plugin's name, are now ready for translation. Templates are now completely customizable, and new template functions are included.\n", "<?php\n/*\nPlugin Name: WP Print Friendly\nPlugin URI: http://www.thinkoomph.com/plugins-modules/wp-print-friendly/\nDescription: Extends WordPress' template system to support printer-friendly templates. Works with permalink structures to support nice URLs.\nAuthor: Erick Hitter, Steven K Word & Oomph, Inc.\nVersion: 0.5.3\nAuthor URI: http://www.thinkoomph.com/\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\nclass wp_print_friendly {\n\tvar $query_var = 'print';\n\n\tvar $ns = 'wp_print_friendly';\n\n\tvar $settings_key = 'wpf';\n\tvar $settings_defaults = array(\n\t\t'auto' => false,\n\t\t'placement' => 'below',\n\t\t'post_types' => array( 'post', 'page' ),\n\t\t'print_text' => 'Print this entry',\n\t\t'print_text_page' => 'Print this page',\n\t\t'css_class' => 'print_link',\n\t\t'link_target' => 'same',\n\t\t'endnotes' => true,\n\t\t'endnotes_label' => 'Endnotes:'\n\t);\n\n\tvar $notice_key = 'wpf_admin_notice_dismissed';\n\n\t/**\n\t * Register deactivation hook and filter.\n\t *\n\t * @uses register_deactivation_hook, add_filter\n\t * @return null\n\t */\n\tpublic function __construct() {\n\t\tregister_deactivation_hook( __FILE__, array( $this, 'deactivation_hook' ) );\n\t\tadd_action( 'plugins_loaded', array( $this, 'action_plugins_loaded' ) );\n\t}\n\n\t/**\n\t * Clean up after plugin deactivation.\n\t *\n\t * @uses flush_rewrite_rules, delete_option\n\t * @action register_deactivation_hook\n\t * @return null\n\t */\n\tpublic function deactivation_hook() {\n\t\tflush_rewrite_rules();\n\n\t\tdelete_option( $this->settings_key );\n\t\tdelete_option( $this->notice_key );\n\t}\n\n\t/**\n\t * Register actions and filters.\n\t *\n\t * @uses add_action, add_filter, get_option\n\t * @action plugins_loaded\n\t * @return null\n\t */\n\tpublic function action_plugins_loaded() {\n\t\tadd_action( 'init', array( $this, 'action_init' ), 20 );\n\t\tadd_action( 'admin_init', array( $this, 'action_admin_init' ) );\n\t\tadd_action( 'admin_menu', array( $this, 'action_admin_menu' ) );\n\t\tadd_filter( 'request', array( $this, 'filter_request' ) );\n\t\tadd_action( 'pre_get_posts', array( $this, 'action_pre_get_posts' ) );\n\t\tadd_action( 'wp', array( $this, 'action_wp' ) );\n\t\tadd_filter( 'template_include', array( $this, 'filter_template_include' ) );\n\t\tadd_filter( 'redirect_canonical', array( $this, 'filter_redirect_canonical' ) );\n\t\tadd_filter( 'body_class', array( $this, 'filter_body_class' ) );\n\t\tadd_filter( 'the_content', array( $this, 'filter_the_content' ), 0 );\n\t\tadd_filter( 'the_content', array( $this, 'filter_the_content_auto' ) );\n\t\tadd_filter( 'the_content', array( $this, 'filter_the_content_late' ), 99 );\n\n\t\tif ( ! get_option( $this->notice_key ) )\n\t\t\tadd_action( 'admin_notices', array( $this, 'action_admin_notices_activation' ) );\n\t}\n\n\t/**\n\t * Add print endpoint and rewrite rules for term taxonomy archives\n\t *\n\t * @uses add_rewrite_endpoint, $wp_rewrite, get_taxonomies, add_rewrite_rule, trailingslashit\n\t * @action init\n\t * @return null\n\t */\n\tpublic function action_init() {\n\t\tadd_rewrite_endpoint( $this->query_var, EP_ALL );\n\n\t\tglobal $wp_rewrite;\n\n\t\t//Taxonomies, since they aren't covered by add_rewrite_endpoint\n\t\tif ( $wp_rewrite->permalink_structure ) {\n\t\t\t$taxonomies = get_taxonomies( array(), 'objects' );\n\t\t\tforeach ( $taxonomies as $taxonomy => $args ) {\n\t\t\t\tif ( $args->rewrite == false || 'post_format' == $taxonomy )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$taxonomy_slug = '';\n\t\t\t\tif ( $args->rewrite[ 'with_front' ] && $wp_rewrite->front != '/' ) $taxonomy_slug .= $wp_rewrite->front;\n\t\t\t\t$taxonomy_slug .= $args->rewrite[ 'slug' ];\n\n\t\t\t\t$query_var = $args->query_var ? $args->query_var : 'taxonomy=' . $taxonomy . '&term';\n\n\t\t\t\tadd_rewrite_rule( $taxonomy_slug . '/(.+)/' . $this->query_var . '(/([0-9]*))?/?$', $wp_rewrite->index . '?' . $query_var . '=$matches[1]&' . $this->query_var . '=$matches[3]', 'top' );\n\t\t\t}\n\t\t}\n\n\t\t//Extra rules needed if verbose page rules are requested\n\t\tif ( $wp_rewrite->use_verbose_page_rules ) {\n\t\t\t//Build regex\n\t\t\t$regex = substr( str_replace( $wp_rewrite->rewritecode, $wp_rewrite->rewritereplace, $wp_rewrite->permalink_structure ), 1 );\n\t\t\t$regex = trailingslashit( $regex );\n\t\t\t$regex .= $this->query_var . '(/([0-9]*))?/?$';\n\n\t\t\t//Build corresponding query string\n\t\t\t$query = substr( str_replace( $wp_rewrite->rewritecode, $wp_rewrite->queryreplace, $wp_rewrite->permalink_structure ), 1 );\n\t\t\t$query = explode( '/', $query );\n\t\t\t$query = array_filter( $query );\n\n\t\t\t$i = 1;\n\t\t\tforeach ( $query as $key => $qv ) {\n\t\t\t\t$query[ $key ] .= '$matches[' . $i . ']';\n\t\t\t\t$i++;\n\t\t\t}\n\n\t\t\t$query[] = $this->query_var . '=$matches[' . ( $i + 1 ) . ']';\n\n\t\t\t$query = implode( '&', $query );\n\n\t\t\t//Add rule\n\t\t\tadd_rewrite_rule( $regex, $wp_rewrite->index . '?' . $query, 'top' );\n\t\t}\n\t}\n\n\t/**\n\t * Register plugin option and disable rewrite rule flush warning.\n\t *\n\t * @uses register_setting, update_option\n\t * @action admin_init\n\t * @return null\n\t */\n\tpublic function action_admin_init() {\n\t\tregister_setting( $this->settings_key, $this->settings_key, array( $this, 'admin_options_validate' ) );\n\n\t\tif ( isset( $_GET[ $this->notice_key ] ) )\n\t\t\tupdate_option( $this->notice_key, 1 );\n\t}\n\n\t/**\n\t * Determine if the print page should be visible to the current user\n\t *\n\t * @uses current_user_can, post_password_required\n\t * @global $wp_query, $post\n\t * @return bool\n\t */\n\tpublic function is_protected() {\n\t\tglobal $post;\n\n\t\t// If the global $post object is not set OR BOTH the current user is NOT an admin AND the post is private\n\t\t$private = ( ! isset( $post ) || ( ! current_user_can( 'read_private_posts' ) && 'private' == $post->post_status ) ) ? true : false;\n\n\t\t// If the password is required OR if the current user does not have the capability to view private posts\n\t\treturn post_password_required() || true === $private;\n\t}\n\n\t/**\n\t * Determine if print template is being requested.\n\t *\n\t * @global $wp_query\n\t * @return bool\n\t */\n\tpublic function is_print() {\n\t\tglobal $wp_query;\n\t\treturn is_array( $wp_query->query ) && array_key_exists( $this->query_var, $wp_query->query );\n\t}\n\n\t/**\n\t * Select appropriate template based on post type and available templates.\n\t * Returns an array with name and path keys for available template or false if no template is found.\n\t *\n\t * @uses get_queried_object, is_home, is_front_page, locate_template\n\t * @return array or false\n\t */\n\tpublic function template_chooser() {\n\t\t//Get queried object to check post type\n\t\t$queried_object = get_queried_object();\n\n\t\t//Get plugin path\n\t\t$pluginpath = dirname( __FILE__ );\n\n\t\tif ( ( is_home() || is_front_page() ) && ( '' !== ( $path = locate_template( 'wpf-home.php', false ) ) ) ) {\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-home',\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\t}\n\t\telseif (\n\t\t\tis_object( $queried_object ) &&\n\t\t\tproperty_exists( $queried_object, 'taxonomy' ) &&\n\t\t\tproperty_exists( $queried_object, 'slug' ) &&\n\t\t\t( '' !== ( $path = locate_template( array( 'wpf-' . $queried_object->taxonomy . '-' . $queried_object->slug . '.php', 'wpf-' . $queried_object->taxonomy . '.php' ), false ) ) )\n\t\t)\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-' . $queried_object->taxonomy,\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif (\n\t\t\tis_object( $queried_object ) &&\n\t\t\tproperty_exists( $queried_object, 'post_type' ) &&\n\t\t\tproperty_exists( $queried_object, 'post_name' ) &&\n\t\t\t( '' !== ( $path = locate_template( array( 'wpf-' . $queried_object->post_type . '-' . $queried_object->post_name . '.php', 'wpf-' . $queried_object->post_type . '.php' ), false ) ) )\n\t\t)\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-' . $queried_object->post_type,\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif (\n\t\t\tis_object( $queried_object ) &&\n\t\t\tproperty_exists( $queried_object, 'post_name' ) &&\n\t\t\t( '' !== ( $path = locate_template( 'wpf-' . $queried_object->post_name . '.php', false ) ) )\n\t\t)\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-' . $queried_object->post_name,\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif ( '' !== ( $path = locate_template( 'wpf.php', false ) ) )\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-default',\n\t\t\t\t'path' => $path\n\t\t\t);\n\t\telseif ( file_exists( $pluginpath . '/default-template.php' ) )\n\t\t\t$template = array(\n\t\t\t\t'name' => 'wpf-plugin-default',\n\t\t\t\t'path' => $pluginpath . '/default-template.php'\n\t\t\t);\n\n\t\treturn isset( $template ) ? $template : false;\n\t}\n\n\t/**\n\t * Detect request for print stylesheet on the homepage and reset query variables.\n\t *\n\t * @param array $qv\n\t * @filter request\n\t * @return array\n\t */\n\tpublic function filter_request( $qv ) {\n\t\tif ( array_key_exists( 'pagename', $qv ) && $qv[ 'pagename' ] == $this->query_var ) {\n\t\t\t$qv[ $this->query_var ] = '';\n\t\t\tunset( $qv[ 'page' ] );\n\t\t\tunset( $qv[ 'pagename' ] );\n\t\t}\n\n\t\tif ( array_key_exists( $this->query_var, $qv ) && is_numeric( $qv[ $this->query_var ] ) )\n\t\t\t$qv[ 'page' ] = intval( $qv[ $this->query_var ] );\n\n\t\treturn $qv;\n\t}\n\n\t/**\n\t * Filter query when request to print specific page is made.\n\t *\n\t * @param object $query\n\t * @action pre_get_posts\n\t * @return object\n\t */\n\tpublic function action_pre_get_posts( $query ) {\n\t\tif ( array_key_exists( $this->query_var, $query->query_vars ) && ! empty( $query->query_vars[ $this->query_var ] ) ) {\n\t\t\t$qv = explode( '/', $query->query_vars[ $this->query_var ] );\n\n\t\t\tif ( array_key_exists( 1, $qv ) && is_numeric( $qv[ 1 ] ) )\n\t\t\t\t$query->query_vars[ 'page' ] = (int)$qv[ 1 ];\n\t\t}\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Throw a 404 if the print page should not be visible to the user\n\t *\n\t * @action wp\n\t * @global $wp_query\n\t * @uses $this::is_print, $this::is_protected\n\t * @return null\n\t */\n\tfunction action_wp() {\n\t\tglobal $wp_query;\n\n\t\tif( $this->is_print() && $this->is_protected() ) {\n\t\t\t$wp_query->set_404();\n\t\t\tstatus_header( 404 );\n\t\t\tnocache_headers();\n\t\t}\n\t}\n\n\t/**\n\t * Filter template include to return print template if requested.\n\t *\n\t * @param string $template\n\t * @filter template_include\n\t * @uses this::is_protected\n\t * @return string\n\t */\n\tpublic function filter_template_include( $template ) {\n\t\tif ( $this->is_print() && ! $this->is_protected() && ( $print_template = $this->template_chooser() ) )\n\t\t\t$template = $print_template[ 'path' ];\n\n\t\treturn $template;\n\t}\n\n\t/**\n\t * Prevent canonical redirect if print URL is requested.\n\t *\n\t * @param string $url\n\t * @uses this::is_print\n\t * @filter redirect_canonical\n\t * @return string or false\n\t */\n\tpublic function filter_redirect_canonical( $url ) {\n\t\tif ( $this->is_print() )\n\t\t\t$url = false;\n\n\t\treturn $url;\n\t}\n\n\t/**\n\t * Filter body classes to include references to print template.\n\t *\n\t * @param array $classes\n\t * @filter body_class\n\t * @return array\n\t */\n\tpublic function filter_body_class( $classes ) {\n\t\tif ( $this->is_print() && ( $print_template = $this->template_chooser() ) ) {\n\t\t\tif ( $print_template[ 'name' ] == 'default' )\n\t\t\t\t$classes[] = 'wpf';\n\t\t\telse\n\t\t\t\t$classes[] = $print_template[ 'name' ];\n\t\t}\n\n\t\treturn $classes;\n\t}\n\n\t/**\n\t * Filter post content to support printing entire post on one page.\n\t *\n\t * @param string $content\n\t * @uses get_query_var\n\t * @filter the_content\n\t * @return string\n\t */\n\tpublic function filter_the_content( $content ) {\n\t\tif ( $this->is_print() ) {\n\t\t\t$print = get_query_var( $this->query_var );\n\n\t\t\tif ( $print == 'all' || $print == '/all' || empty( $print ) ) {\n\t\t\t\tglobal $post;\n\n\t\t\t\t$content = $post->post_content;\n\t\t\t\t$content = str_replace(\"\\n<!--nextpage-->\\n\", \"\\n\\n\", $content);\n\t\t\t\t$content = str_replace(\"\\n<!--nextpage-->\", \"\\n\", $content);\n\t\t\t\t$content = str_replace(\"<!--nextpage-->\\n\", \"\\n\", $content);\n\t\t\t\t$content = str_replace(\"<!--nextpage-->\", ' ', $content);\n\t\t\t}\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Filter the content if automatic inclusion is selected.\n\t *\n\t * @param string $content\n\t * @uses $this::get_options, $post, $this::print_url, $this::is_protected, get_query_var, apply_filters\n\t * @filter the_content\n\t * @return string\n\t */\n\tpublic function filter_the_content_auto( $content ) {\n\t\t$options = $this->get_options();\n\n\t\tglobal $post;\n\n\t\t// Do not display the print_url link if the print page is not be accessible to the user\n\t\tif( $this->is_protected() )\n\t\t\treturn $content;\n\n\t\tif ( is_array( $options ) && array_key_exists( 'auto', $options ) && $options[ 'auto' ] == true && in_array( $post->post_type, $options[ 'post_types' ] ) && ! $this->is_print() ) {\n\t\t\textract( $options );\n\n\t\t\t//Basic URL\n\t\t\t$print_url = $this->print_url();\n\n\t\t\t//Page URL, if necessary\n\t\t\tif ( ! empty( $print_text_page ) && strpos( $post->post_content, '<!--nextpage-->' ) !== false ) {\n\t\t\t\t$page = get_query_var( 'page' );\n\t\t\t\t$page = $page ? $page : 1;\n\n\t\t\t\t$print_url_page = $this->print_url( false, $page );\n\t\t\t}\n\n\t\t\t//Build link(s)\n\t\t\t$link = '<p class=\"wpf_wrapper\"><a class=\"' . $css_class . '\" href=\"' . $print_url . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $print_text . '</a>';\n\n\t\t\tif ( isset( $print_url_page ) ) {\n\t\t\t\t$link .= ' | ';\n\t\t\t\t$link .= '<a class=\"' . $css_class . ' ' . $css_class . '_cur\" href=\"' . $print_url_page . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $print_text_page . '</a>';\n\t\t\t}\n\n\t\t\t$link .= '</p><!-- .wpf_wrapper -->';\n\n\t\t\t//Place link(s)\n\t\t\tif ( $placement == 'above' )\n\t\t\t\t$content = $link . $content;\n\t\t\telseif ( $placement == 'below' )\n\t\t\t\t$content = $content . $link;\n\t\t\telseif ( $placement == 'both' )\n\t\t\t\t$content = $link . $content . $link;\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Convert links to endnotes if desired.\n\t *\n\t * @param string $content\n\t * @uses $this::is_print, $this::get_options\n\t * @filter the_content\n\t * @return string\n\t */\n\tpublic function filter_the_content_late( $content ) {\n\t\tif ( $this->is_print() ) {\n\t\t\tglobal $post;\n\n\t\t\t$options = $this->get_options();\n\n\t\t\t//Endnotes\n\t\t\tif ( $options[ 'endnotes' ] ) {\n\t\t\t\t$links = array();\n\t\t\t\t$i = 1;\n\n\t\t\t\t//Build array of links\n\t\t\t\tpreg_match_all( '#<a href=([\"\\'{1}])([^\"\\']+)([\"\\'{1}])([^>]*)>(.*?)</a>#i', $content, $matches );\n\n\t\t\t\tif (\n\t\t\t\t\tisset( $matches ) && is_array( $matches ) &&\n\t\t\t\t\tarray_key_exists( 0, $matches ) && ! empty( $matches[ 0 ] ) &&\n\t\t\t\t\tarray_key_exists( 2, $matches ) && ! empty( $matches[ 2 ] ) &&\n\t\t\t\t\tarray_key_exists( 5, $matches ) && ! empty( $matches[ 5 ] )\n\t\t\t\t) {\n\t\t\t\t\t//Format matches for replacement in content\n\t\t\t\t\t$replacements = array();\n\t\t\t\t\tforeach ( $matches[ 0 ] as $key => $match ) {\n\t\t\t\t\t\t$replacements[ $match ] = array(\n\t\t\t\t\t\t\t'url' => $matches[ 2 ][ $key ],\n\t\t\t\t\t\t\t'title' => $matches[ 5 ][ $key ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Replace links with endnote markers\n\t\t\t\t\tforeach ( $replacements as $match => $args ) {\n\t\t\t\t\t\t$content = str_replace( $match, $args[ 'title' ] . '[' . $i . ']', $content );\n\t\t\t\t\t\t$links[ $i ] = $args;\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Output endnotes\n\t\t\t\t\t$endnotes = '<div class=\"wpf-endnotes\">';\n\t\t\t\t\t$endnotes .= '<strong>' . $options[ 'endnotes_label' ] . '</strong>';\n\t\t\t\t\t$endnotes .= '<ol>';\n\t\t\t\t\tforeach ( $links as $link ) {\n\t\t\t\t\t\t$endnotes .= '<li>';\n\t\t\t\t\t\t$endnotes .=  preg_replace( '#<img(.*)>#', '[Image]', $link[ 'title' ] ) . ': ' . esc_url( $link[ 'url' ] );\n\t\t\t\t\t\t$endnotes .= '</li>';\n\t\t\t\t\t}\n\t\t\t\t\t$endnotes .= '</ol></div><!-- .wpf-endnotes -->';\n\n\t\t\t\t\t$content .= $endnotes;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Generate URL for post's printer-friendly format.\n\t *\n\t * @param int $post_id\n\t * @param int $page\n\t * @uses is_view_all, is_home, is_front_page, home_url, $post, get_permalink, is_category, get_category_link, is_tag, get_tag_link, is_date, get_query_var, get_day_link, get_month_link, get_year_link, is_tax, get_queried_object, get_term_link, $wp_rewrite, path_join, trailingslashit, add_query_arg\n\t * @return string or bool\n\t */\n\tpublic function print_url( $post_id = false, $page = false ) {\n\t\tif ( $page === true )\n\t\t\treturn false;\n\n\t\tif ( function_exists( 'is_view_all' ) && is_view_all() )\n\t\t\t$page = false;\n\n\t\t$link = false;\n\n\t\t//Get link base specific to page type being viewed\n\t\tif ( is_singular() || in_the_loop() ) {\n\t\t\tif ( $post_id == false ) {\n\t\t\t\tglobal $post;\n\t\t\t\t$post_id = $post->ID;\n\t\t\t}\n\n\t\t\tif ( ! $post_id )\n\t\t\t\treturn false;\n\n\t\t\t$link = get_permalink( $post_id );\n\t\t}\n\t\telseif ( is_home() || is_front_page() )\n\t\t\t$link = home_url( '/' );\n\t\telseif ( is_category() )\n\t\t\t$link = get_category_link( get_query_var( 'cat' ) );\n\t\telseif ( is_tag() )\n\t\t\t$link = get_tag_link( get_query_var( 'tag_id' ) );\n\t\t/* DISABLED FOR NOW AS PRINTING OF DATE-BASED ARCHIVES DOESN'T WORK YET\n\t\telseif ( is_date() ) {\n\t\t\t$year = get_query_var( 'year' );\n\t\t\t$monthnum = get_query_var( 'monthnum' );\n\t\t\t$day = get_query_var( 'day' );\n\n\t\t\tif ( $day )\n\t\t\t\t$link = get_day_link( $year, $monthnum, $day );\n\t\t\telseif ( $monthnum )\n\t\t\t\t$link = get_month_link( $year, $monthnum );\n\t\t\telse\n\t\t\t\t$link = get_year_link( $year );\n\t\t}*/\n\t\telseif ( is_tax() ) {\n\t\t\t$queried_object = get_queried_object();\n\n\t\t\tif ( is_object( $queried_object ) && property_exists( $queried_object, 'taxonomy' ) && property_exists( $queried_object, 'term_id' ) )\n\t\t\t\t$link = get_term_link( (int)$queried_object->term_id, $queried_object->taxonomy );\n\t\t}\n\n\t\t//If link base is set, build link\n\t\tif ( $link !== false ) {\n\t\t\tglobal $wp_rewrite;\n\n\t\t\t$page = intval( $page );\n\n\t\t\tif ( $wp_rewrite->using_permalinks() ) {\n\t\t\t\t$link = path_join( $link, $this->query_var );\n\n\t\t\t\tif ( $page )\n\t\t\t\t\t$link = path_join( $link, intval( $page ) );\n\n\t\t\t\tif ( $wp_rewrite->use_trailing_slashes )\n\t\t\t\t\t$link = trailingslashit( $link );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$link = add_query_arg( $this->query_var, is_numeric( $page ) ? intval( $page ) : 'all', $link );\n\n\t\t\t\tif ( $page )\n\t\t\t\t\t$link = add_query_arg( 'page', is_numeric( $page ) ? intval( $page ) : 'all', $link );\n\t\t\t}\n\t\t}\n\n\t\treturn $link;\n\t}\n\n\t/**\n\t * Add menu item for options page.\n\t *\n\t * @uses add_options_page\n\t * @action admin_menu\n\t * @return null\n\t */\n\tpublic function action_admin_menu() {\n\t\tadd_options_page( 'WP Print Friendly Options', 'WP Print Friendly', 'manage_options', $this->ns, array( $this, 'admin_options' ) );\n\t}\n\n\t/**\n\t * Render options page.\n\t *\n\t * @uses settings_fields, $this::get_options, _e, checked, esc_attr\n\t * @return html\n\t */\n\tpublic function admin_options() {\n\t?>\n\t\t<div class=\"wrap\">\n\t\t\t<h2>WP Print Friendly</h2>\n\n\t\t\t<form action=\"options.php\" method=\"post\">\n\t\t\t\t<?php\n\t\t\t\t\tsettings_fields( $this->settings_key );\n\t\t\t\t\t$options = $this->get_options();\n\n\t\t\t\t\t$post_types = $this->post_types_array();\n\t\t\t\t?>\n\n\t\t\t\t<h3>Display Options</h3>\n\n\t\t\t\t<table class=\"form-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Automatically add print links based on settings below?', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[auto]\" id=\"auto-true\" value=\"1\"<?php checked( $options[ 'auto' ], true, true ); ?> /> <label for=\"auto-true\"><?php _e( 'Yes', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[auto]\" id=\"auto-false\" value=\"0\"<?php checked( $options[ 'auto' ], false, true ); ?> /> <label for=\"auto-false\"><?php _e( 'No', 'wp_print_friendly' ); ?></label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Automatically place link:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[placement]\" id=\"placement-above\" value=\"above\"<?php checked( $options[ 'placement' ], 'above', true ); ?> /> <label for=\"placement-above\"><?php _e( 'Above content', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[placement]\" id=\"placement-below\" value=\"below\"<?php checked( $options[ 'placement' ], 'below', true ); ?> /> <label for=\"placement-below\"><?php _e( 'Below content', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[placement]\" id=\"placement-both\" value=\"both\"<?php checked( $options[ 'placement' ], 'both', true ); ?> /> <label for=\"placement-both\"><?php _e( 'Above and below content', 'wp_print_friendly' ); ?></label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Display automatically on:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<?php foreach ( $post_types as $post_type ): ?>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[post_types][]\" id=\"pt-<?php echo $post_type->name; ?>\" value=\"<?php echo $post_type->name; ?>\"<?php if ( in_array( $post_type->name, $options[ 'post_types' ] ) ) echo ' checked=\"checked\"'; ?> /> <label for=\"pt-<?php echo $post_type->name; ?>\"><?php echo $post_type->labels->name; ?></label><br />\n\t\t\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<h3>Link Options</h3>\n\n\t\t\t\t<table class=\"form-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Text for link to print entire item:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[print_text]\" id=\"print_text\" value=\"<?php echo esc_attr( $options[ 'print_text' ] ); ?>\" style=\"width: 40%;\" />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Text for link to print current page:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[print_text_page]\" id=\"print_text_page\" value=\"<?php echo esc_attr( $options[ 'print_text_page' ] ); ?>\" style=\"width: 40%;\" />\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'If viewing a multipage post (set by using the &lt;!--nextpage--&gt; tag), the text above is used for a link to print just the current page.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( '<strong>To hide this link,</strong> clear the field\\'s contents.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'CSS for print links:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[css_class]\" id=\"css_class\" value=\"<?php echo esc_attr( $options[ 'css_class' ] ); ?>\" style=\"width: 40%;\" />\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'For page-specific print links, a second class, created by appending <strong>_cur</strong> to the above text, is added to each link.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'Be aware that Internet Explorer will only interpret the first two CSS classes, so if multiple classes are entered above, the page-specific class may not be available in IE.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Open print-friendly views:', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[link_target]\" id=\"target-same\" value=\"same\"<?php checked( $options[ 'link_target' ], 'same', true ); ?> /> <label for=\"target-same\"><?php _e( 'In the same window', 'wp_print_friendly' ); ?></label><br />\n\t\t\t\t\t\t\t<input type=\"radio\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[link_target]\" id=\"target-new\" value=\"new\"<?php checked( $options[ 'link_target' ], 'new', true ); ?> /> <label for=\"target-new\"><?php _e( 'In a new window', 'wp_print_friendly' ); ?></label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<h3>Endnote Options</h3>\n\n\t\t\t\t<table class=\"form-table\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><?php _e( 'Include endnotes for links found in content?', 'wp_print_friendly' ); ?></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[endnotes]\" id=\"endnotes\" value=\"1\"<?php checked( $options[ 'endnotes' ], true, true ); ?> /> <label for=\"endnotes\"><?php _e( 'Yes', 'wp_print_friendly' ); ?></label>\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'If enabled, content is automatically scanned for links and an endnote is added for each link found. This can be helpful for users if your content includes many links.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"row\"><label for=\"endnotes-label\"><?php _e( 'Endnotes heading:', 'wp_print_friendly' ); ?></label></th>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"<?php echo esc_attr( $this->settings_key ); ?>[endnotes_label]\" class=\"regular-text code\" id=\"endnotes-label\" value=\"<?php echo esc_attr( $options[ 'endnotes_label' ] ); ?>\" />\n\n\t\t\t\t\t\t\t<p class=\"description\"><?php _e( 'If endnotes are enabled, the text entered above will be output above the list of links.', 'wp_print_friendly' ); ?></p>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t\t<p class=\"submit\">\n\t\t\t\t\t<input type=\"submit\" class=\"button-primary\" value=\"Save Changes\" />\n\t\t\t\t</p>\n\t\t\t</form>\n\n\t\t</div><!-- .wrap -->\n\t<?php\n\t}\n\n\t/**\n\t * Validate options\n\t *\n\t * @param array $options\n\t * @uses $this::get_options, $this::post_types_array, delete_option, sanitize_text_field\n\t * @return array\n\t */\n\tpublic function admin_options_validate( $options ) {\n\t\t$new_options = array(\n\t\t\t'endnotes' => false\n\t\t);\n\n\t\tif ( is_array( $options ) ) {\n\t\t\tforeach ( $options as $key => $value ) {\n\t\t\t\tswitch( $key ) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\tcase 'endnotes':\n\t\t\t\t\t\t$new_options[ $key ] = (bool)$value;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'placement':\n\t\t\t\t\t\t$placements = array(\n\t\t\t\t\t\t\t'above',\n\t\t\t\t\t\t\t'below',\n\t\t\t\t\t\t\t'both'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$new_options[ $key ] = in_array( $value, $placements ) ? $value : 'below';\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'post_types':\n\t\t\t\t\t\t$post_types = $this->post_types_array();\n\n\t\t\t\t\t\t$new_options[ $key ] = array();\n\n\t\t\t\t\t\tif ( is_array( $value ) && is_array( $post_types ) ) {\n\t\t\t\t\t\t\tforeach ( $post_types as $post_type ) {\n\t\t\t\t\t\t\t\tif ( in_array( $post_type->name, $value ) )\n\t\t\t\t\t\t\t\t\t$new_options[ $key ][] = $post_type->name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'print_text':\n\t\t\t\t\tcase 'print_text_page':\n\t\t\t\t\tcase 'css_class':\n\t\t\t\t\tcase 'endnotes_label':\n\t\t\t\t\t\t$value = sanitize_text_field( $value );\n\n\t\t\t\t\t\tif ( $key == 'print_text' && empty( $value ) )\n\t\t\t\t\t\t\t$value = 'Print this entry';\n\n\t\t\t\t\t\t$new_options[ $key ] = $value;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'link_target':\n\t\t\t\t\t\t$new_options[ $key ] = $value == 'new' ? 'new' : 'same';\n\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $new_options;\n\t}\n\n\t/**\n\t * Return plugin options array parsed with default options.\n\t *\n\t * @uses wp_parse_args, get_option\n\t * @return array\n\t */\n\tpublic function get_options() {\n\t\t$options = get_option( $this->settings_key, $this->settings_defaults );\n\n\t\tif ( ! array_key_exists( 'post_types', $options ) )\n\t\t\t$options[ 'post_types' ] = array();\n\n\t\treturn wp_parse_args( $options, $this->settings_defaults );\n\t}\n\n\t/**\n\t * Build array of available post types, excluding all builtin ones except 'post' and 'page'.\n\t *\n\t * @uses get_post_types\n\t * @return array\n\t */\n\tpublic function post_types_array() {\n\t\t$post_types = array();\n\t\tforeach ( get_post_types( array(), 'objects' ) as $post_type ) {\n\t\t\tif ( $post_type->_builtin == false || $post_type->name == 'post' || $post_type->name == 'page' )\n\t\t\t\t$post_types[] = $post_type;\n\t\t}\n\n\t\treturn $post_types;\n\t}\n\n\t/**\n\t * Display admin notice regarding rewrite rules flush.\n\t *\n\t * @uses get_option, _e, __, admin_url, add_query_arg\n\t * @action admin_notices\n\t * @return html or null\n\t */\n\tpublic function action_admin_notices_activation() {\n\t\tif ( ! get_option( $this->notice_key ) ):\n\t\t?>\n\n\t\t<div id=\"wpf-rewrite-flush-warning\" class=\"error fade\">\n\t\t\t<p><strong><?php _e( 'WP Print Friendly', 'wp_print_friendly' ); ?></strong></p>\n\n\t\t\t<p><?php printf( __( 'You must refresh your site\\'s permalinks before WP Print Friendly is fully activated. To do so, go to <a href=\"%s\">Permalinks</a> and click the <strong><em>Save Changes</em></strong> button at the bottom of the screen.', 'wp_print_friendly' ), admin_url( 'options-permalink.php' ) ); ?></p>\n\n\t\t\t<p><?php printf( __( 'When finished, click <a href=\"%s\">here</a> to hide this message.', 'wp_print_friendly' ), admin_url( add_query_arg( $this->notice_key, 1, 'index.php' ) ) ); ?></p>\n\t\t</div>\n\n\t\t<?php\n\t\tendif;\n\t}\n\n\t/**\n\t * Render page numbers, such as \"Page 1 of 5.\"\n\t *\n\t * @param int $post_id\n\t * @param string $before\n\t * @param string $separator\n\t * @param string $after\n\t * @uses $this::is_print, get_query_var, get_post_field\n\t * @return string or false\n\t */\n\tpublic function page_numbers( $post_id = false, $before = 'Page ', $separator = ' of ', $after = '' ) {\n\t\tif ( ! $this->is_print() )\n\t\t\treturn false;\n\n\t\t//Don't display on views that include all pages of a post\n\t\t$print = get_query_var( $this->query_var );\n\t\tif ( $print == 'all' || $print == '/all' || empty( $print ) )\n\t\t\treturn false;\n\n\t\t//Get post ID and post content, or return false it either fails validation\n\t\t$post_id = intval( $post_id );\n\n\t\tif ( ! $post_id ) {\n\t\t\tglobal $post;\n\t\t\t$post_id = $post->ID;\n\t\t\t$post_content = $post->post_content;\n\t\t}\n\n\t\t$post_id = intval( $post_id );\n\n\t\tif ( ! $post_id )\n\t\t\treturn false;\n\n\t\tif ( ! isset( $post_content ) || empty( $post_content ) )\n\t\t\t$post_content = get_post_field( 'post_content', $post_id );\n\n\t\tif ( ! is_string( $post_content ) || empty( $post_content ) || strpos( $post_content, '<!--nextpage-->' ) === false )\n\t\t\treturn false;\n\n\t\t//Get current page\n\t\t$page = get_query_var( $this->query_var );\n\t\t$page = $page ? $page : 1;\n\n\t\t//Get total number of pages, or return false if total cannot be determined\n\t\t$num_pages = substr_count( $post_content, '<!--nextpage-->' );\n\n\t\tif ( is_int( $num_pages ) && $num_pages > 0 )\n\t\t\t$num_pages = $num_pages + 1;\n\t\telse\n\t\t\treturn false;\n\n\t\t//Having made it this far, return the specified string\n\t\treturn $before . $page . $separator . $num_pages . $after;\n\t}\n}\nglobal $wpf;\n$wpf = new wp_print_friendly;\n\n/**\n * Shortcut to function for generating post's printer-friendly format URL\n *\n * @param int $post_id\n * @param int $page\n * @uses $wpf\n * @return string or bool\n */\nfunction wpf_get_print_url( $post_id = false, $page = false ) {\n\tglobal $wpf;\n\tif ( ! is_a( $wpf, 'wp_print_friendly' ) )\n\t\t$wpf = new wp_print_friendly;\n\n\treturn $wpf->print_url( intval( $post_id ), intval( $page ) );\n}\n\n/**\n * Output link to printer-friendly post format.\n *\n * @param string $link_text\n * @param string $class\n * @param int $post_id\n * @param bool $page_link\n * @param string $page_link_separator\n * @param string $page_link_text\n * @param string $link_target\n * @uses $post, wpf_get_print_url, esc_attr, esc_url, get_query_var\n * @return string or null\n */\nfunction wpf_the_print_link( $page_link = false, $link_text = 'Print this post', $class = 'print_link', $page_link_separator = ' | ', $page_link_text = 'Print this page', $link_target = 'same' ) {\n\tglobal $post;\n\t$url = wpf_get_print_url( $post->ID );\n\n\t$page_link = (bool)$page_link;\n\n\tif ( function_exists( 'is_view_all' ) && is_view_all() )\n\t\t$page_link = false;\n\n\tif ( $url ) {\n\t\t$link = '<a ' . ( $class ? 'class=\"' . esc_attr( $class ) . '\"' : '' ) . ' href=\"' . esc_url( $url ) . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $link_text . '</a>';\n\n\t\tif ( $page_link && strpos( $post->post_content, '<!--nextpage-->' ) !== false ) {\n\t\t\t$page = get_query_var( 'page' );\n\t\t\t$page = $page ? $page : 1;\n\t\t\t$link .= $page_link_separator . '<a ' . ( $class ? 'class=\"' . esc_attr( $class ) . '_cur ' . esc_attr( $class ) . '\"' : '' ) . ' href=\"' . esc_url( wpf_get_print_url( $post->ID, $page ) ) . '\"' . ( $link_target == 'new' ? ' target=\"_blank\"' : '' ) . '>' . $page_link_text . '</a>';\n\t\t}\n\n\t\techo $link;\n\t}\n}\n\n/**\n * Display page numbers, such as \"Page 1 of 5.\"\n *\n * @param int $post_id\n * @param string $before\n * @param string $separator\n * @param string $after\n * @uses $wpf\n * @return string or false\n */\nfunction wpf_the_page_numbers( $post_id = false, $before = 'Page ', $separator = ' of ', $after = '' ) {\n\tglobal $wpf;\n\tif ( ! is_a( $wpf, 'wp_print_friendly' ) )\n\t\t$wpf = new wp_print_friendly;\n\n\techo $wpf->page_numbers( intval( $post_id ), $before, $separator, $after );\n}\n\nif ( ! function_exists( 'is_print' ) ) {\n\t/**\n\t * Conditional tag indicating if printer-friendly format was requested.\n\t *\n\t * @uses $wpf\n\t * @return bool\n\t */\n\tfunction is_print() {\n\t\tglobal $wpf;\n\t\tif ( ! is_a( $wpf, 'wp_print_friendly' ) )\n\t\t\t$wpf = new wp_print_friendly;\n\n\t\treturn $wpf->is_print();\n\t}\n}\n?>\n"], "filenames": ["readme.txt", "wp-print-friendly.php"], "buggy_code_start_loc": [2, 6], "buggy_code_end_loc": [178, 932], "fixing_code_start_loc": [2, 6], "fixing_code_end_loc": [183, 973], "type": "NVD-CWE-noinfo", "message": "A vulnerability classified as problematic has been found in ethitter WP-Print-Friendly up to 0.5.2. This affects an unknown part of the file wp-print-friendly.php. The manipulation leads to information disclosure. It is possible to initiate the attack remotely. Upgrading to version 0.5.3 is able to address this issue. The name of the patch is 437787292670c20b4abe20160ebbe8428187f2b4. It is recommended to upgrade the affected component. The identifier VDB-217269 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2013-10007", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-03T11:15:09.987", "lastModified": "2023-01-09T20:06:23.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in ethitter WP-Print-Friendly up to 0.5.2. This affects an unknown part of the file wp-print-friendly.php. The manipulation leads to information disclosure. It is possible to initiate the attack remotely. Upgrading to version 0.5.3 is able to address this issue. The name of the patch is 437787292670c20b4abe20160ebbe8428187f2b4. It is recommended to upgrade the affected component. The identifier VDB-217269 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wp-print-friendly_project:wp_print_friendly:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "0.5.3", "matchCriteriaId": "B16E1C89-FD5F-4F8C-A230-FE3F619863AD"}]}]}], "references": [{"url": "https://github.com/ethitter/WP-Print-Friendly/commit/437787292670c20b4abe20160ebbe8428187f2b4", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ethitter/WP-Print-Friendly/pull/4", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217269", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217269", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ethitter/WP-Print-Friendly/commit/437787292670c20b4abe20160ebbe8428187f2b4"}}