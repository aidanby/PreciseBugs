{"buggy_code": ["/*\n * Copyright (C) Andrew Tridgell 1995-1999\n *\n * This software may be distributed either under the terms of the\n * BSD-style license that accompanies tcpdump or the GNU GPL version 2\n * or later\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <netdissect-stdinc.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"netdissect.h\"\n#include \"extract.h\"\n#include \"smb.h\"\n\nstatic uint32_t stringlen;\nextern const u_char *startbuf;\n\n/*\n * interpret a 32 bit dos packed date/time to some parameters\n */\nstatic void\ninterpret_dos_date(uint32_t date, struct tm *tp)\n{\n    uint32_t p0, p1, p2, p3;\n\n    p0 = date & 0xFF;\n    p1 = ((date & 0xFF00) >> 8) & 0xFF;\n    p2 = ((date & 0xFF0000) >> 16) & 0xFF;\n    p3 = ((date & 0xFF000000) >> 24) & 0xFF;\n\n    tp->tm_sec = 2 * (p0 & 0x1F);\n    tp->tm_min = ((p0 >> 5) & 0xFF) + ((p1 & 0x7) << 3);\n    tp->tm_hour = (p1 >> 3) & 0xFF;\n    tp->tm_mday = (p2 & 0x1F);\n    tp->tm_mon = ((p2 >> 5) & 0xFF) + ((p3 & 0x1) << 3) - 1;\n    tp->tm_year = ((p3 >> 1) & 0xFF) + 80;\n}\n\n/*\n * common portion:\n * create a unix date from a dos date\n */\nstatic time_t\nint_unix_date(uint32_t dos_date)\n{\n    struct tm t;\n\n    if (dos_date == 0)\n\treturn(0);\n\n    interpret_dos_date(dos_date, &t);\n    t.tm_wday = 1;\n    t.tm_yday = 1;\n    t.tm_isdst = 0;\n\n    return (mktime(&t));\n}\n\n/*\n * create a unix date from a dos date\n * in network byte order\n */\nstatic time_t\nmake_unix_date(const u_char *date_ptr)\n{\n    uint32_t dos_date = 0;\n\n    dos_date = EXTRACT_LE_32BITS(date_ptr);\n\n    return int_unix_date(dos_date);\n}\n\n/*\n * create a unix date from a dos date\n * in halfword-swapped network byte order!\n */\nstatic time_t\nmake_unix_date2(const u_char *date_ptr)\n{\n    uint32_t x, x2;\n\n    x = EXTRACT_LE_32BITS(date_ptr);\n    x2 = ((x & 0xFFFF) << 16) | ((x & 0xFFFF0000) >> 16);\n    return int_unix_date(x2);\n}\n\n/*\n * interpret an 8 byte \"filetime\" structure to a time_t\n * It's originally in \"100ns units since jan 1st 1601\"\n */\nstatic time_t\ninterpret_long_date(const u_char *p)\n{\n    double d;\n    time_t ret;\n\n    /* this gives us seconds since jan 1st 1601 (approx) */\n    d = (EXTRACT_LE_32BITS(p + 4) * 256.0 + p[3]) * (1.0e-7 * (1 << 24));\n\n    /* now adjust by 369 years to make the secs since 1970 */\n    d -= 369.0 * 365.25 * 24 * 60 * 60;\n\n    /* and a fudge factor as we got it wrong by a few days */\n    d += (3 * 24 * 60 * 60 + 6 * 60 * 60 + 2);\n\n    if (d < 0)\n\treturn(0);\n\n    ret = (time_t)d;\n\n    return(ret);\n}\n\n/*\n * interpret the weird netbios \"name\". Return the name type, or -1 if\n * we run past the end of the buffer\n */\nstatic int\nname_interpret(netdissect_options *ndo,\n               const u_char *in, const u_char *maxbuf, char *out)\n{\n    int ret;\n    int len;\n\n    if (in >= maxbuf)\n\treturn(-1);\t/* name goes past the end of the buffer */\n    ND_TCHECK2(*in, 1);\n    len = (*in++) / 2;\n\n    *out=0;\n\n    if (len > 30 || len < 1)\n\treturn(0);\n\n    while (len--) {\n\tND_TCHECK2(*in, 2);\n\tif (in + 1 >= maxbuf)\n\t    return(-1);\t/* name goes past the end of the buffer */\n\tif (in[0] < 'A' || in[0] > 'P' || in[1] < 'A' || in[1] > 'P') {\n\t    *out = 0;\n\t    return(0);\n\t}\n\t*out = ((in[0] - 'A') << 4) + (in[1] - 'A');\n\tin += 2;\n\tout++;\n    }\n    *out = 0;\n    ret = out[-1];\n\n    return(ret);\n\ntrunc:\n    return(-1);\n}\n\n/*\n * find a pointer to a netbios name\n */\nstatic const u_char *\nname_ptr(netdissect_options *ndo,\n         const u_char *buf, int ofs, const u_char *maxbuf)\n{\n    const u_char *p;\n    u_char c;\n\n    p = buf + ofs;\n    if (p >= maxbuf)\n\treturn(NULL);\t/* name goes past the end of the buffer */\n    ND_TCHECK2(*p, 1);\n\n    c = *p;\n\n    /* XXX - this should use the same code that the DNS dissector does */\n    if ((c & 0xC0) == 0xC0) {\n\tuint16_t l;\n\n\tND_TCHECK2(*p, 2);\n\tif ((p + 1) >= maxbuf)\n\t    return(NULL);\t/* name goes past the end of the buffer */\n\tl = EXTRACT_16BITS(p) & 0x3FFF;\n\tif (l == 0) {\n\t    /* We have a pointer that points to itself. */\n\t    return(NULL);\n\t}\n\tp = buf + l;\n\tif (p >= maxbuf)\n\t    return(NULL);\t/* name goes past the end of the buffer */\n\tND_TCHECK2(*p, 1);\n    }\n    return(p);\n\ntrunc:\n    return(NULL);\t/* name goes past the end of the buffer */\n}\n\n/*\n * extract a netbios name from a buf\n */\nstatic int\nname_extract(netdissect_options *ndo,\n             const u_char *buf, int ofs, const u_char *maxbuf, char *name)\n{\n    const u_char *p = name_ptr(ndo, buf, ofs, maxbuf);\n    if (p == NULL)\n\treturn(-1);\t/* error (probably name going past end of buffer) */\n    name[0] = '\\0';\n    return(name_interpret(ndo, p, maxbuf, name));\n}\n\n\n/*\n * return the total storage length of a mangled name\n */\nstatic int\nname_len(netdissect_options *ndo,\n         const unsigned char *s, const unsigned char *maxbuf)\n{\n    const unsigned char *s0 = s;\n    unsigned char c;\n\n    if (s >= maxbuf)\n\treturn(-1);\t/* name goes past the end of the buffer */\n    ND_TCHECK2(*s, 1);\n    c = *s;\n    if ((c & 0xC0) == 0xC0)\n\treturn(2);\n    while (*s) {\n\tif (s >= maxbuf)\n\t    return(-1);\t/* name goes past the end of the buffer */\n\tND_TCHECK2(*s, 1);\n\ts += (*s) + 1;\n\tND_TCHECK2(*s, 1);\n    }\n    return(PTR_DIFF(s, s0) + 1);\n\ntrunc:\n    return(-1);\t/* name goes past the end of the buffer */\n}\n\nstatic void\nprint_asc(netdissect_options *ndo,\n          const unsigned char *buf, int len)\n{\n    int i;\n    for (i = 0; i < len; i++)\n        safeputchar(ndo, buf[i]);\n}\n\nstatic const char *\nname_type_str(int name_type)\n{\n    const char *f = NULL;\n\n    switch (name_type) {\n    case 0:    f = \"Workstation\"; break;\n    case 0x03: f = \"Client?\"; break;\n    case 0x20: f = \"Server\"; break;\n    case 0x1d: f = \"Master Browser\"; break;\n    case 0x1b: f = \"Domain Controller\"; break;\n    case 0x1e: f = \"Browser Server\"; break;\n    default:   f = \"Unknown\"; break;\n    }\n    return(f);\n}\n\nvoid\nsmb_print_data(netdissect_options *ndo, const unsigned char *buf, int len)\n{\n    int i = 0;\n\n    if (len <= 0)\n\treturn;\n    ND_PRINT((ndo, \"[%03X] \", i));\n    for (i = 0; i < len; /*nothing*/) {\n        ND_TCHECK(buf[i]);\n\tND_PRINT((ndo, \"%02X \", buf[i] & 0xff));\n\ti++;\n\tif (i%8 == 0)\n\t    ND_PRINT((ndo, \" \"));\n\tif (i % 16 == 0) {\n\t    print_asc(ndo, &buf[i - 16], 8);\n\t    ND_PRINT((ndo, \" \"));\n\t    print_asc(ndo, &buf[i - 8], 8);\n\t    ND_PRINT((ndo, \"\\n\"));\n\t    if (i < len)\n\t\tND_PRINT((ndo, \"[%03X] \", i));\n\t}\n    }\n    if (i % 16) {\n\tint n;\n\n\tn = 16 - (i % 16);\n\tND_PRINT((ndo, \" \"));\n\tif (n>8)\n\t    ND_PRINT((ndo, \" \"));\n\twhile (n--)\n\t    ND_PRINT((ndo, \"   \"));\n\n\tn = min(8, i % 16);\n\tprint_asc(ndo, &buf[i - (i % 16)], n);\n\tND_PRINT((ndo, \" \"));\n\tn = (i % 16) - n;\n\tif (n > 0)\n\t    print_asc(ndo, &buf[i - n], n);\n\tND_PRINT((ndo, \"\\n\"));\n    }\n    return;\n\ntrunc:\n    ND_PRINT((ndo, \"\\n\"));\n    ND_PRINT((ndo, \"WARNING: Short packet. Try increasing the snap length\\n\"));\n}\n\n\nstatic void\nwrite_bits(netdissect_options *ndo,\n           unsigned int val, const char *fmt)\n{\n    const char *p = fmt;\n    int i = 0;\n\n    while ((p = strchr(fmt, '|'))) {\n\tsize_t l = PTR_DIFF(p, fmt);\n\tif (l && (val & (1 << i)))\n\t    ND_PRINT((ndo, \"%.*s \", (int)l, fmt));\n\tfmt = p + 1;\n\ti++;\n    }\n}\n\n/* convert a UCS-2 string into an ASCII string */\n#define MAX_UNISTR_SIZE\t1000\nstatic const char *\nunistr(netdissect_options *ndo,\n       const u_char *s, uint32_t *len, int use_unicode)\n{\n    static char buf[MAX_UNISTR_SIZE+1];\n    size_t l = 0;\n    uint32_t strsize;\n    const u_char *sp;\n\n    if (use_unicode) {\n\t/*\n\t * Skip padding that puts the string on an even boundary.\n\t */\n\tif (((s - startbuf) % 2) != 0) {\n\t    ND_TCHECK(s[0]);\n\t    s++;\n\t}\n    }\n    if (*len == 0) {\n\t/*\n\t * Null-terminated string.\n\t */\n\tstrsize = 0;\n\tsp = s;\n\tif (!use_unicode) {\n\t    for (;;) {\n\t\tND_TCHECK(sp[0]);\n\t\t*len += 1;\n\t\tif (sp[0] == 0)\n\t\t    break;\n\t\tsp++;\n\t    }\n\t    strsize = *len - 1;\n\t} else {\n\t    for (;;) {\n\t\tND_TCHECK2(sp[0], 2);\n\t\t*len += 2;\n\t\tif (sp[0] == 0 && sp[1] == 0)\n\t\t    break;\n\t\tsp += 2;\n\t    }\n\t    strsize = *len - 2;\n\t}\n    } else {\n\t/*\n\t * Counted string.\n\t */\n\tstrsize = *len;\n    }\n    if (!use_unicode) {\n    \twhile (strsize != 0) {\n          ND_TCHECK(s[0]);\n\t    if (l >= MAX_UNISTR_SIZE)\n\t\tbreak;\n\t    if (ND_ISPRINT(s[0]))\n\t\tbuf[l] = s[0];\n\t    else {\n\t\tif (s[0] == 0)\n\t\t    break;\n\t\tbuf[l] = '.';\n\t    }\n\t    l++;\n\t    s++;\n\t    strsize--;\n\t}\n    } else {\n\twhile (strsize != 0) {\n\t    ND_TCHECK2(s[0], 2);\n\t    if (l >= MAX_UNISTR_SIZE)\n\t\tbreak;\n\t    if (s[1] == 0 && ND_ISPRINT(s[0])) {\n\t\t/* It's a printable ASCII character */\n\t\tbuf[l] = s[0];\n\t    } else {\n\t\t/* It's a non-ASCII character or a non-printable ASCII character */\n\t\tif (s[0] == 0 && s[1] == 0)\n\t\t    break;\n\t\tbuf[l] = '.';\n\t    }\n\t    l++;\n\t    s += 2;\n\t    if (strsize == 1)\n\t\tbreak;\n\t    strsize -= 2;\n\t}\n    }\n    buf[l] = 0;\n    return buf;\n\ntrunc:\n    return NULL;\n}\n\nstatic const u_char *\nsmb_fdata1(netdissect_options *ndo,\n           const u_char *buf, const char *fmt, const u_char *maxbuf,\n           int unicodestr)\n{\n    int reverse = 0;\n    const char *attrib_fmt = \"READONLY|HIDDEN|SYSTEM|VOLUME|DIR|ARCHIVE|\";\n\n    while (*fmt && buf<maxbuf) {\n\tswitch (*fmt) {\n\tcase 'a':\n\t    ND_TCHECK(buf[0]);\n\t    write_bits(ndo, buf[0], attrib_fmt);\n\t    buf++;\n\t    fmt++;\n\t    break;\n\n\tcase 'A':\n\t    ND_TCHECK2(buf[0], 2);\n\t    write_bits(ndo, EXTRACT_LE_16BITS(buf), attrib_fmt);\n\t    buf += 2;\n\t    fmt++;\n\t    break;\n\n\tcase '{':\n\t  {\n\t    char bitfmt[128];\n\t    char *p;\n\t    int l;\n\n\t    p = strchr(++fmt, '}');\n\t    l = PTR_DIFF(p, fmt);\n\n\t    if ((unsigned int)l > sizeof(bitfmt) - 1)\n\t\t    l = sizeof(bitfmt)-1;\n\n\t    strncpy(bitfmt, fmt, l);\n\t    bitfmt[l] = '\\0';\n\t    fmt = p + 1;\n\t    ND_TCHECK(buf[0]);\n\t    write_bits(ndo, buf[0], bitfmt);\n\t    buf++;\n\t    break;\n\t  }\n\n\tcase 'P':\n\t  {\n\t    int l = atoi(fmt + 1);\n\t    ND_TCHECK2(buf[0], l);\n\t    buf += l;\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'r':\n\t    reverse = !reverse;\n\t    fmt++;\n\t    break;\n\tcase 'b':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK(buf[0]);\n\t    x = buf[0];\n\t    ND_PRINT((ndo, \"%u (0x%x)\", x, x));\n\t    buf += 1;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'd':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 2);\n\t    x = reverse ? EXTRACT_16BITS(buf) :\n\t\t\t  EXTRACT_LE_16BITS(buf);\n\t    ND_PRINT((ndo, \"%d (0x%x)\", x, x));\n\t    buf += 2;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'D':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 4);\n\t    x = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t  EXTRACT_LE_32BITS(buf);\n\t    ND_PRINT((ndo, \"%d (0x%x)\", x, x));\n\t    buf += 4;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'L':\n\t  {\n\t    uint64_t x;\n\t    ND_TCHECK2(buf[0], 8);\n\t    x = reverse ? EXTRACT_64BITS(buf) :\n\t\t\t  EXTRACT_LE_64BITS(buf);\n\t    ND_PRINT((ndo, \"%\" PRIu64 \" (0x%\" PRIx64 \")\", x, x));\n\t    buf += 8;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'M':\n\t  {\n\t    /* Weird mixed-endian length values in 64-bit locks */\n\t    uint32_t x1, x2;\n\t    uint64_t x;\n\t    ND_TCHECK2(buf[0], 8);\n\t    x1 = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t   EXTRACT_LE_32BITS(buf);\n\t    x2 = reverse ? EXTRACT_32BITS(buf + 4) :\n\t\t\t   EXTRACT_LE_32BITS(buf + 4);\n\t    x = (((uint64_t)x1) << 32) | x2;\n\t    ND_PRINT((ndo, \"%\" PRIu64 \" (0x%\" PRIx64 \")\", x, x));\n\t    buf += 8;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'B':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK(buf[0]);\n\t    x = buf[0];\n\t    ND_PRINT((ndo, \"0x%X\", x));\n\t    buf += 1;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'w':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 2);\n\t    x = reverse ? EXTRACT_16BITS(buf) :\n\t\t\t  EXTRACT_LE_16BITS(buf);\n\t    ND_PRINT((ndo, \"0x%X\", x));\n\t    buf += 2;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'W':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 4);\n\t    x = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t  EXTRACT_LE_32BITS(buf);\n\t    ND_PRINT((ndo, \"0x%X\", x));\n\t    buf += 4;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'l':\n\t  {\n\t    fmt++;\n\t    switch (*fmt) {\n\n\t    case 'b':\n\t\tND_TCHECK(buf[0]);\n\t\tstringlen = buf[0];\n\t\tND_PRINT((ndo, \"%u\", stringlen));\n\t\tbuf += 1;\n\t\tbreak;\n\n\t    case 'd':\n\t\tND_TCHECK2(buf[0], 2);\n\t\tstringlen = reverse ? EXTRACT_16BITS(buf) :\n\t\t\t\t      EXTRACT_LE_16BITS(buf);\n\t\tND_PRINT((ndo, \"%u\", stringlen));\n\t\tbuf += 2;\n\t\tbreak;\n\n\t    case 'D':\n\t\tND_TCHECK2(buf[0], 4);\n\t\tstringlen = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t\t      EXTRACT_LE_32BITS(buf);\n\t\tND_PRINT((ndo, \"%u\", stringlen));\n\t\tbuf += 4;\n\t\tbreak;\n\t    }\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'S':\n\tcase 'R':\t/* like 'S', but always ASCII */\n\t  {\n\t    /*XXX unistr() */\n\t    const char *s;\n\t    uint32_t len;\n\n\t    len = 0;\n\t    s = unistr(ndo, buf, &len, (*fmt == 'R') ? 0 : unicodestr);\n\t    if (s == NULL)\n\t\tgoto trunc;\n\t    ND_PRINT((ndo, \"%s\", s));\n\t    buf += len;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'Z':\n\tcase 'Y':\t/* like 'Z', but always ASCII */\n\t  {\n\t    const char *s;\n\t    uint32_t len;\n\n\t    ND_TCHECK(*buf);\n\t    if (*buf != 4 && *buf != 2) {\n\t\tND_PRINT((ndo, \"Error! ASCIIZ buffer of type %u\", *buf));\n\t\treturn maxbuf;\t/* give up */\n\t    }\n\t    len = 0;\n\t    s = unistr(ndo, buf + 1, &len, (*fmt == 'Y') ? 0 : unicodestr);\n\t    if (s == NULL)\n\t\tgoto trunc;\n\t    ND_PRINT((ndo, \"%s\", s));\n\t    buf += len + 1;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 's':\n\t  {\n\t    int l = atoi(fmt + 1);\n\t    ND_TCHECK2(*buf, l);\n\t    ND_PRINT((ndo, \"%-*.*s\", l, l, buf));\n\t    buf += l;\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'c':\n\t  {\n\t    ND_TCHECK2(*buf, stringlen);\n\t    ND_PRINT((ndo, \"%-*.*s\", (int)stringlen, (int)stringlen, buf));\n\t    buf += stringlen;\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'C':\n\t  {\n\t    const char *s;\n\t    s = unistr(ndo, buf, &stringlen, unicodestr);\n\t    if (s == NULL)\n\t\tgoto trunc;\n\t    ND_PRINT((ndo, \"%s\", s));\n\t    buf += stringlen;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'h':\n\t  {\n\t    int l = atoi(fmt + 1);\n\t    ND_TCHECK2(*buf, l);\n\t    while (l--)\n\t\tND_PRINT((ndo, \"%02x\", *buf++));\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'n':\n\t  {\n\t    int t = atoi(fmt+1);\n\t    char nbuf[255];\n\t    int name_type;\n\t    int len;\n\n\t    switch (t) {\n\t    case 1:\n\t\tname_type = name_extract(ndo, startbuf, PTR_DIFF(buf, startbuf),\n\t\t    maxbuf, nbuf);\n\t\tif (name_type < 0)\n\t\t    goto trunc;\n\t\tlen = name_len(ndo, buf, maxbuf);\n\t\tif (len < 0)\n\t\t    goto trunc;\n\t\tbuf += len;\n\t\tND_PRINT((ndo, \"%-15.15s NameType=0x%02X (%s)\", nbuf, name_type,\n\t\t    name_type_str(name_type)));\n\t\tbreak;\n\t    case 2:\n\t\tND_TCHECK(buf[15]);\n\t\tname_type = buf[15];\n\t\tND_PRINT((ndo, \"%-15.15s NameType=0x%02X (%s)\", buf, name_type,\n\t\t    name_type_str(name_type)));\n\t\tbuf += 16;\n\t\tbreak;\n\t    }\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'T':\n\t  {\n\t    time_t t;\n\t    struct tm *lt;\n\t    const char *tstring;\n\t    uint32_t x;\n\n\t    switch (atoi(fmt + 1)) {\n\t    case 1:\n\t\tND_TCHECK2(buf[0], 4);\n\t\tx = EXTRACT_LE_32BITS(buf);\n\t\tif (x == 0 || x == 0xFFFFFFFF)\n\t\t    t = 0;\n\t\telse\n\t\t    t = make_unix_date(buf);\n\t\tbuf += 4;\n\t\tbreak;\n\t    case 2:\n\t\tND_TCHECK2(buf[0], 4);\n\t\tx = EXTRACT_LE_32BITS(buf);\n\t\tif (x == 0 || x == 0xFFFFFFFF)\n\t\t    t = 0;\n\t\telse\n\t\t    t = make_unix_date2(buf);\n\t\tbuf += 4;\n\t\tbreak;\n\t    case 3:\n\t\tND_TCHECK2(buf[0], 8);\n\t\tt = interpret_long_date(buf);\n\t\tbuf += 8;\n\t\tbreak;\n\t    default:\n\t\tt = 0;\n\t\tbreak;\n\t    }\n\t    if (t != 0) {\n\t\tlt = localtime(&t);\n\t\tif (lt != NULL)\n\t\t    tstring = asctime(lt);\n\t\telse\n\t\t    tstring = \"(Can't convert time)\\n\";\n\t    } else\n\t\ttstring = \"NULL\\n\";\n\t    ND_PRINT((ndo, \"%s\", tstring));\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tdefault:\n\t    ND_PRINT((ndo, \"%c\", *fmt));\n\t    fmt++;\n\t    break;\n\t}\n    }\n\n    if (buf >= maxbuf && *fmt)\n\tND_PRINT((ndo, \"END OF BUFFER\\n\"));\n\n    return(buf);\n\ntrunc:\n    ND_PRINT((ndo, \"\\n\"));\n    ND_PRINT((ndo, \"WARNING: Short packet. Try increasing the snap length\\n\"));\n    return(NULL);\n}\n\nconst u_char *\nsmb_fdata(netdissect_options *ndo,\n          const u_char *buf, const char *fmt, const u_char *maxbuf,\n          int unicodestr)\n{\n    static int depth = 0;\n    char s[128];\n    char *p;\n\n    while (*fmt) {\n\tswitch (*fmt) {\n\tcase '*':\n\t    fmt++;\n\t    while (buf < maxbuf) {\n\t\tconst u_char *buf2;\n\t\tdepth++;\n\t\tbuf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);\n\t\tdepth--;\n\t\tif (buf2 == NULL)\n\t\t    return(NULL);\n\t\tif (buf2 == buf)\n\t\t    return(buf);\n\t\tbuf = buf2;\n\t    }\n\t    return(buf);\n\n\tcase '|':\n\t    fmt++;\n\t    if (buf >= maxbuf)\n\t\treturn(buf);\n\t    break;\n\n\tcase '%':\n\t    fmt++;\n\t    buf = maxbuf;\n\t    break;\n\n\tcase '#':\n\t    fmt++;\n\t    return(buf);\n\t    break;\n\n\tcase '[':\n\t    fmt++;\n\t    if (buf >= maxbuf)\n\t\treturn(buf);\n\t    memset(s, 0, sizeof(s));\n\t    p = strchr(fmt, ']');\n\t    if ((size_t)(p - fmt + 1) > sizeof(s)) {\n\t\t/* overrun */\n\t\treturn(buf);\n\t    }\n\t    strncpy(s, fmt, p - fmt);\n\t    s[p - fmt] = '\\0';\n\t    fmt = p + 1;\n\t    buf = smb_fdata1(ndo, buf, s, maxbuf, unicodestr);\n\t    if (buf == NULL)\n\t\treturn(NULL);\n\t    break;\n\n\tdefault:\n\t    ND_PRINT((ndo, \"%c\", *fmt));\n\t    fmt++;\n\t    break;\n\t}\n    }\n    if (!depth && buf < maxbuf) {\n\tsize_t len = PTR_DIFF(maxbuf, buf);\n\tND_PRINT((ndo, \"Data: (%lu bytes)\\n\", (unsigned long)len));\n\tsmb_print_data(ndo, buf, len);\n\treturn(buf + len);\n    }\n    return(buf);\n}\n\ntypedef struct {\n    const char *name;\n    int code;\n    const char *message;\n} err_code_struct;\n\n/* DOS Error Messages */\nstatic const err_code_struct dos_msgs[] = {\n    { \"ERRbadfunc\", 1, \"Invalid function.\" },\n    { \"ERRbadfile\", 2, \"File not found.\" },\n    { \"ERRbadpath\", 3, \"Directory invalid.\" },\n    { \"ERRnofids\", 4, \"No file descriptors available\" },\n    { \"ERRnoaccess\", 5, \"Access denied.\" },\n    { \"ERRbadfid\", 6, \"Invalid file handle.\" },\n    { \"ERRbadmcb\", 7, \"Memory control blocks destroyed.\" },\n    { \"ERRnomem\", 8, \"Insufficient server memory to perform the requested function.\" },\n    { \"ERRbadmem\", 9, \"Invalid memory block address.\" },\n    { \"ERRbadenv\", 10, \"Invalid environment.\" },\n    { \"ERRbadformat\", 11, \"Invalid format.\" },\n    { \"ERRbadaccess\", 12, \"Invalid open mode.\" },\n    { \"ERRbaddata\", 13, \"Invalid data.\" },\n    { \"ERR\", 14, \"reserved.\" },\n    { \"ERRbaddrive\", 15, \"Invalid drive specified.\" },\n    { \"ERRremcd\", 16, \"A Delete Directory request attempted to remove the server's current directory.\" },\n    { \"ERRdiffdevice\", 17, \"Not same device.\" },\n    { \"ERRnofiles\", 18, \"A File Search command can find no more files matching the specified criteria.\" },\n    { \"ERRbadshare\", 32, \"The sharing mode specified for an Open conflicts with existing FIDs on the file.\" },\n    { \"ERRlock\", 33, \"A Lock request conflicted with an existing lock or specified an invalid mode, or an Unlock requested attempted to remove a lock held by another process.\" },\n    { \"ERRfilexists\", 80, \"The file named in a Create Directory, Make New File or Link request already exists.\" },\n    { \"ERRbadpipe\", 230, \"Pipe invalid.\" },\n    { \"ERRpipebusy\", 231, \"All instances of the requested pipe are busy.\" },\n    { \"ERRpipeclosing\", 232, \"Pipe close in progress.\" },\n    { \"ERRnotconnected\", 233, \"No process on other end of pipe.\" },\n    { \"ERRmoredata\", 234, \"There is more data to be returned.\" },\n    { NULL, -1, NULL }\n };\n\n/* Server Error Messages */\nstatic const err_code_struct server_msgs[] = {\n    { \"ERRerror\", 1, \"Non-specific error code.\" },\n    { \"ERRbadpw\", 2, \"Bad password - name/password pair in a Tree Connect or Session Setup are invalid.\" },\n    { \"ERRbadtype\", 3, \"reserved.\" },\n    { \"ERRaccess\", 4, \"The requester does not have the necessary access rights within the specified context for the requested function. The context is defined by the TID or the UID.\" },\n    { \"ERRinvnid\", 5, \"The tree ID (TID) specified in a command was invalid.\" },\n    { \"ERRinvnetname\", 6, \"Invalid network name in tree connect.\" },\n    { \"ERRinvdevice\", 7, \"Invalid device - printer request made to non-printer connection or non-printer request made to printer connection.\" },\n    { \"ERRqfull\", 49, \"Print queue full (files) -- returned by open print file.\" },\n    { \"ERRqtoobig\", 50, \"Print queue full -- no space.\" },\n    { \"ERRqeof\", 51, \"EOF on print queue dump.\" },\n    { \"ERRinvpfid\", 52, \"Invalid print file FID.\" },\n    { \"ERRsmbcmd\", 64, \"The server did not recognize the command received.\" },\n    { \"ERRsrverror\", 65, \"The server encountered an internal error, e.g., system file unavailable.\" },\n    { \"ERRfilespecs\", 67, \"The file handle (FID) and pathname parameters contained an invalid combination of values.\" },\n    { \"ERRreserved\", 68, \"reserved.\" },\n    { \"ERRbadpermits\", 69, \"The access permissions specified for a file or directory are not a valid combination.  The server cannot set the requested attribute.\" },\n    { \"ERRreserved\", 70, \"reserved.\" },\n    { \"ERRsetattrmode\", 71, \"The attribute mode in the Set File Attribute request is invalid.\" },\n    { \"ERRpaused\", 81, \"Server is paused.\" },\n    { \"ERRmsgoff\", 82, \"Not receiving messages.\" },\n    { \"ERRnoroom\", 83, \"No room to buffer message.\" },\n    { \"ERRrmuns\", 87, \"Too many remote user names.\" },\n    { \"ERRtimeout\", 88, \"Operation timed out.\" },\n    { \"ERRnoresource\", 89, \"No resources currently available for request.\" },\n    { \"ERRtoomanyuids\", 90, \"Too many UIDs active on this session.\" },\n    { \"ERRbaduid\", 91, \"The UID is not known as a valid ID on this session.\" },\n    { \"ERRusempx\", 250, \"Temp unable to support Raw, use MPX mode.\" },\n    { \"ERRusestd\", 251, \"Temp unable to support Raw, use standard read/write.\" },\n    { \"ERRcontmpx\", 252, \"Continue in MPX mode.\" },\n    { \"ERRreserved\", 253, \"reserved.\" },\n    { \"ERRreserved\", 254, \"reserved.\" },\n    { \"ERRnosupport\", 0xFFFF, \"Function not supported.\" },\n    { NULL, -1, NULL }\n};\n\n/* Hard Error Messages */\nstatic const err_code_struct hard_msgs[] = {\n    { \"ERRnowrite\", 19, \"Attempt to write on write-protected diskette.\" },\n    { \"ERRbadunit\", 20, \"Unknown unit.\" },\n    { \"ERRnotready\", 21, \"Drive not ready.\" },\n    { \"ERRbadcmd\", 22, \"Unknown command.\" },\n    { \"ERRdata\", 23, \"Data error (CRC).\" },\n    { \"ERRbadreq\", 24, \"Bad request structure length.\" },\n    { \"ERRseek\", 25 , \"Seek error.\" },\n    { \"ERRbadmedia\", 26, \"Unknown media type.\" },\n    { \"ERRbadsector\", 27, \"Sector not found.\" },\n    { \"ERRnopaper\", 28, \"Printer out of paper.\" },\n    { \"ERRwrite\", 29, \"Write fault.\" },\n    { \"ERRread\", 30, \"Read fault.\" },\n    { \"ERRgeneral\", 31, \"General failure.\" },\n    { \"ERRbadshare\", 32, \"A open conflicts with an existing open.\" },\n    { \"ERRlock\", 33, \"A Lock request conflicted with an existing lock or specified an invalid mode, or an Unlock requested attempted to remove a lock held by another process.\" },\n    { \"ERRwrongdisk\", 34, \"The wrong disk was found in a drive.\" },\n    { \"ERRFCBUnavail\", 35, \"No FCBs are available to process request.\" },\n    { \"ERRsharebufexc\", 36, \"A sharing buffer has been exceeded.\" },\n    { NULL, -1, NULL }\n};\n\nstatic const struct {\n    int code;\n    const char *class;\n    const err_code_struct *err_msgs;\n} err_classes[] = {\n    { 0, \"SUCCESS\", NULL },\n    { 0x01, \"ERRDOS\", dos_msgs },\n    { 0x02, \"ERRSRV\", server_msgs },\n    { 0x03, \"ERRHRD\", hard_msgs },\n    { 0x04, \"ERRXOS\", NULL },\n    { 0xE1, \"ERRRMX1\", NULL },\n    { 0xE2, \"ERRRMX2\", NULL },\n    { 0xE3, \"ERRRMX3\", NULL },\n    { 0xFF, \"ERRCMD\", NULL },\n    { -1, NULL, NULL }\n};\n\n/*\n * return a SMB error string from a SMB buffer\n */\nchar *\nsmb_errstr(int class, int num)\n{\n    static char ret[128];\n    int i, j;\n\n    ret[0] = 0;\n\n    for (i = 0; err_classes[i].class; i++)\n\tif (err_classes[i].code == class) {\n\t    if (err_classes[i].err_msgs) {\n\t\tconst err_code_struct *err = err_classes[i].err_msgs;\n\t\tfor (j = 0; err[j].name; j++)\n\t\t    if (num == err[j].code) {\n\t\t\tsnprintf(ret, sizeof(ret), \"%s - %s (%s)\",\n\t\t\t    err_classes[i].class, err[j].name, err[j].message);\n\t\t\treturn ret;\n\t\t    }\n\t    }\n\n\t    snprintf(ret, sizeof(ret), \"%s - %d\", err_classes[i].class, num);\n\t    return ret;\n\t}\n\n    snprintf(ret, sizeof(ret), \"ERROR: Unknown error (%d,%d)\", class, num);\n    return(ret);\n}\n\ntypedef struct {\n    uint32_t code;\n    const char *name;\n} nt_err_code_struct;\n\n/*\n * NT Error codes\n */\nstatic const nt_err_code_struct nt_errors[] = {\n  { 0x00000000, \"STATUS_SUCCESS\" },\n  { 0x00000000, \"STATUS_WAIT_0\" },\n  { 0x00000001, \"STATUS_WAIT_1\" },\n  { 0x00000002, \"STATUS_WAIT_2\" },\n  { 0x00000003, \"STATUS_WAIT_3\" },\n  { 0x0000003F, \"STATUS_WAIT_63\" },\n  { 0x00000080, \"STATUS_ABANDONED\" },\n  { 0x00000080, \"STATUS_ABANDONED_WAIT_0\" },\n  { 0x000000BF, \"STATUS_ABANDONED_WAIT_63\" },\n  { 0x000000C0, \"STATUS_USER_APC\" },\n  { 0x00000100, \"STATUS_KERNEL_APC\" },\n  { 0x00000101, \"STATUS_ALERTED\" },\n  { 0x00000102, \"STATUS_TIMEOUT\" },\n  { 0x00000103, \"STATUS_PENDING\" },\n  { 0x00000104, \"STATUS_REPARSE\" },\n  { 0x00000105, \"STATUS_MORE_ENTRIES\" },\n  { 0x00000106, \"STATUS_NOT_ALL_ASSIGNED\" },\n  { 0x00000107, \"STATUS_SOME_NOT_MAPPED\" },\n  { 0x00000108, \"STATUS_OPLOCK_BREAK_IN_PROGRESS\" },\n  { 0x00000109, \"STATUS_VOLUME_MOUNTED\" },\n  { 0x0000010A, \"STATUS_RXACT_COMMITTED\" },\n  { 0x0000010B, \"STATUS_NOTIFY_CLEANUP\" },\n  { 0x0000010C, \"STATUS_NOTIFY_ENUM_DIR\" },\n  { 0x0000010D, \"STATUS_NO_QUOTAS_FOR_ACCOUNT\" },\n  { 0x0000010E, \"STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED\" },\n  { 0x00000110, \"STATUS_PAGE_FAULT_TRANSITION\" },\n  { 0x00000111, \"STATUS_PAGE_FAULT_DEMAND_ZERO\" },\n  { 0x00000112, \"STATUS_PAGE_FAULT_COPY_ON_WRITE\" },\n  { 0x00000113, \"STATUS_PAGE_FAULT_GUARD_PAGE\" },\n  { 0x00000114, \"STATUS_PAGE_FAULT_PAGING_FILE\" },\n  { 0x00000115, \"STATUS_CACHE_PAGE_LOCKED\" },\n  { 0x00000116, \"STATUS_CRASH_DUMP\" },\n  { 0x00000117, \"STATUS_BUFFER_ALL_ZEROS\" },\n  { 0x00000118, \"STATUS_REPARSE_OBJECT\" },\n  { 0x0000045C, \"STATUS_NO_SHUTDOWN_IN_PROGRESS\" },\n  { 0x40000000, \"STATUS_OBJECT_NAME_EXISTS\" },\n  { 0x40000001, \"STATUS_THREAD_WAS_SUSPENDED\" },\n  { 0x40000002, \"STATUS_WORKING_SET_LIMIT_RANGE\" },\n  { 0x40000003, \"STATUS_IMAGE_NOT_AT_BASE\" },\n  { 0x40000004, \"STATUS_RXACT_STATE_CREATED\" },\n  { 0x40000005, \"STATUS_SEGMENT_NOTIFICATION\" },\n  { 0x40000006, \"STATUS_LOCAL_USER_SESSION_KEY\" },\n  { 0x40000007, \"STATUS_BAD_CURRENT_DIRECTORY\" },\n  { 0x40000008, \"STATUS_SERIAL_MORE_WRITES\" },\n  { 0x40000009, \"STATUS_REGISTRY_RECOVERED\" },\n  { 0x4000000A, \"STATUS_FT_READ_RECOVERY_FROM_BACKUP\" },\n  { 0x4000000B, \"STATUS_FT_WRITE_RECOVERY\" },\n  { 0x4000000C, \"STATUS_SERIAL_COUNTER_TIMEOUT\" },\n  { 0x4000000D, \"STATUS_NULL_LM_PASSWORD\" },\n  { 0x4000000E, \"STATUS_IMAGE_MACHINE_TYPE_MISMATCH\" },\n  { 0x4000000F, \"STATUS_RECEIVE_PARTIAL\" },\n  { 0x40000010, \"STATUS_RECEIVE_EXPEDITED\" },\n  { 0x40000011, \"STATUS_RECEIVE_PARTIAL_EXPEDITED\" },\n  { 0x40000012, \"STATUS_EVENT_DONE\" },\n  { 0x40000013, \"STATUS_EVENT_PENDING\" },\n  { 0x40000014, \"STATUS_CHECKING_FILE_SYSTEM\" },\n  { 0x40000015, \"STATUS_FATAL_APP_EXIT\" },\n  { 0x40000016, \"STATUS_PREDEFINED_HANDLE\" },\n  { 0x40000017, \"STATUS_WAS_UNLOCKED\" },\n  { 0x40000018, \"STATUS_SERVICE_NOTIFICATION\" },\n  { 0x40000019, \"STATUS_WAS_LOCKED\" },\n  { 0x4000001A, \"STATUS_LOG_HARD_ERROR\" },\n  { 0x4000001B, \"STATUS_ALREADY_WIN32\" },\n  { 0x4000001C, \"STATUS_WX86_UNSIMULATE\" },\n  { 0x4000001D, \"STATUS_WX86_CONTINUE\" },\n  { 0x4000001E, \"STATUS_WX86_SINGLE_STEP\" },\n  { 0x4000001F, \"STATUS_WX86_BREAKPOINT\" },\n  { 0x40000020, \"STATUS_WX86_EXCEPTION_CONTINUE\" },\n  { 0x40000021, \"STATUS_WX86_EXCEPTION_LASTCHANCE\" },\n  { 0x40000022, \"STATUS_WX86_EXCEPTION_CHAIN\" },\n  { 0x40000023, \"STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE\" },\n  { 0x40000024, \"STATUS_NO_YIELD_PERFORMED\" },\n  { 0x40000025, \"STATUS_TIMER_RESUME_IGNORED\" },\n  { 0x80000001, \"STATUS_GUARD_PAGE_VIOLATION\" },\n  { 0x80000002, \"STATUS_DATATYPE_MISALIGNMENT\" },\n  { 0x80000003, \"STATUS_BREAKPOINT\" },\n  { 0x80000004, \"STATUS_SINGLE_STEP\" },\n  { 0x80000005, \"STATUS_BUFFER_OVERFLOW\" },\n  { 0x80000006, \"STATUS_NO_MORE_FILES\" },\n  { 0x80000007, \"STATUS_WAKE_SYSTEM_DEBUGGER\" },\n  { 0x8000000A, \"STATUS_HANDLES_CLOSED\" },\n  { 0x8000000B, \"STATUS_NO_INHERITANCE\" },\n  { 0x8000000C, \"STATUS_GUID_SUBSTITUTION_MADE\" },\n  { 0x8000000D, \"STATUS_PARTIAL_COPY\" },\n  { 0x8000000E, \"STATUS_DEVICE_PAPER_EMPTY\" },\n  { 0x8000000F, \"STATUS_DEVICE_POWERED_OFF\" },\n  { 0x80000010, \"STATUS_DEVICE_OFF_LINE\" },\n  { 0x80000011, \"STATUS_DEVICE_BUSY\" },\n  { 0x80000012, \"STATUS_NO_MORE_EAS\" },\n  { 0x80000013, \"STATUS_INVALID_EA_NAME\" },\n  { 0x80000014, \"STATUS_EA_LIST_INCONSISTENT\" },\n  { 0x80000015, \"STATUS_INVALID_EA_FLAG\" },\n  { 0x80000016, \"STATUS_VERIFY_REQUIRED\" },\n  { 0x80000017, \"STATUS_EXTRANEOUS_INFORMATION\" },\n  { 0x80000018, \"STATUS_RXACT_COMMIT_NECESSARY\" },\n  { 0x8000001A, \"STATUS_NO_MORE_ENTRIES\" },\n  { 0x8000001B, \"STATUS_FILEMARK_DETECTED\" },\n  { 0x8000001C, \"STATUS_MEDIA_CHANGED\" },\n  { 0x8000001D, \"STATUS_BUS_RESET\" },\n  { 0x8000001E, \"STATUS_END_OF_MEDIA\" },\n  { 0x8000001F, \"STATUS_BEGINNING_OF_MEDIA\" },\n  { 0x80000020, \"STATUS_MEDIA_CHECK\" },\n  { 0x80000021, \"STATUS_SETMARK_DETECTED\" },\n  { 0x80000022, \"STATUS_NO_DATA_DETECTED\" },\n  { 0x80000023, \"STATUS_REDIRECTOR_HAS_OPEN_HANDLES\" },\n  { 0x80000024, \"STATUS_SERVER_HAS_OPEN_HANDLES\" },\n  { 0x80000025, \"STATUS_ALREADY_DISCONNECTED\" },\n  { 0x80000026, \"STATUS_LONGJUMP\" },\n  { 0x80040111, \"MAPI_E_LOGON_FAILED\" },\n  { 0x80090300, \"SEC_E_INSUFFICIENT_MEMORY\" },\n  { 0x80090301, \"SEC_E_INVALID_HANDLE\" },\n  { 0x80090302, \"SEC_E_UNSUPPORTED_FUNCTION\" },\n  { 0x8009030B, \"SEC_E_NO_IMPERSONATION\" },\n  { 0x8009030D, \"SEC_E_UNKNOWN_CREDENTIALS\" },\n  { 0x8009030E, \"SEC_E_NO_CREDENTIALS\" },\n  { 0x8009030F, \"SEC_E_MESSAGE_ALTERED\" },\n  { 0x80090310, \"SEC_E_OUT_OF_SEQUENCE\" },\n  { 0x80090311, \"SEC_E_NO_AUTHENTICATING_AUTHORITY\" },\n  { 0xC0000001, \"STATUS_UNSUCCESSFUL\" },\n  { 0xC0000002, \"STATUS_NOT_IMPLEMENTED\" },\n  { 0xC0000003, \"STATUS_INVALID_INFO_CLASS\" },\n  { 0xC0000004, \"STATUS_INFO_LENGTH_MISMATCH\" },\n  { 0xC0000005, \"STATUS_ACCESS_VIOLATION\" },\n  { 0xC0000006, \"STATUS_IN_PAGE_ERROR\" },\n  { 0xC0000007, \"STATUS_PAGEFILE_QUOTA\" },\n  { 0xC0000008, \"STATUS_INVALID_HANDLE\" },\n  { 0xC0000009, \"STATUS_BAD_INITIAL_STACK\" },\n  { 0xC000000A, \"STATUS_BAD_INITIAL_PC\" },\n  { 0xC000000B, \"STATUS_INVALID_CID\" },\n  { 0xC000000C, \"STATUS_TIMER_NOT_CANCELED\" },\n  { 0xC000000D, \"STATUS_INVALID_PARAMETER\" },\n  { 0xC000000E, \"STATUS_NO_SUCH_DEVICE\" },\n  { 0xC000000F, \"STATUS_NO_SUCH_FILE\" },\n  { 0xC0000010, \"STATUS_INVALID_DEVICE_REQUEST\" },\n  { 0xC0000011, \"STATUS_END_OF_FILE\" },\n  { 0xC0000012, \"STATUS_WRONG_VOLUME\" },\n  { 0xC0000013, \"STATUS_NO_MEDIA_IN_DEVICE\" },\n  { 0xC0000014, \"STATUS_UNRECOGNIZED_MEDIA\" },\n  { 0xC0000015, \"STATUS_NONEXISTENT_SECTOR\" },\n  { 0xC0000016, \"STATUS_MORE_PROCESSING_REQUIRED\" },\n  { 0xC0000017, \"STATUS_NO_MEMORY\" },\n  { 0xC0000018, \"STATUS_CONFLICTING_ADDRESSES\" },\n  { 0xC0000019, \"STATUS_NOT_MAPPED_VIEW\" },\n  { 0xC000001A, \"STATUS_UNABLE_TO_FREE_VM\" },\n  { 0xC000001B, \"STATUS_UNABLE_TO_DELETE_SECTION\" },\n  { 0xC000001C, \"STATUS_INVALID_SYSTEM_SERVICE\" },\n  { 0xC000001D, \"STATUS_ILLEGAL_INSTRUCTION\" },\n  { 0xC000001E, \"STATUS_INVALID_LOCK_SEQUENCE\" },\n  { 0xC000001F, \"STATUS_INVALID_VIEW_SIZE\" },\n  { 0xC0000020, \"STATUS_INVALID_FILE_FOR_SECTION\" },\n  { 0xC0000021, \"STATUS_ALREADY_COMMITTED\" },\n  { 0xC0000022, \"STATUS_ACCESS_DENIED\" },\n  { 0xC0000023, \"STATUS_BUFFER_TOO_SMALL\" },\n  { 0xC0000024, \"STATUS_OBJECT_TYPE_MISMATCH\" },\n  { 0xC0000025, \"STATUS_NONCONTINUABLE_EXCEPTION\" },\n  { 0xC0000026, \"STATUS_INVALID_DISPOSITION\" },\n  { 0xC0000027, \"STATUS_UNWIND\" },\n  { 0xC0000028, \"STATUS_BAD_STACK\" },\n  { 0xC0000029, \"STATUS_INVALID_UNWIND_TARGET\" },\n  { 0xC000002A, \"STATUS_NOT_LOCKED\" },\n  { 0xC000002B, \"STATUS_PARITY_ERROR\" },\n  { 0xC000002C, \"STATUS_UNABLE_TO_DECOMMIT_VM\" },\n  { 0xC000002D, \"STATUS_NOT_COMMITTED\" },\n  { 0xC000002E, \"STATUS_INVALID_PORT_ATTRIBUTES\" },\n  { 0xC000002F, \"STATUS_PORT_MESSAGE_TOO_LONG\" },\n  { 0xC0000030, \"STATUS_INVALID_PARAMETER_MIX\" },\n  { 0xC0000031, \"STATUS_INVALID_QUOTA_LOWER\" },\n  { 0xC0000032, \"STATUS_DISK_CORRUPT_ERROR\" },\n  { 0xC0000033, \"STATUS_OBJECT_NAME_INVALID\" },\n  { 0xC0000034, \"STATUS_OBJECT_NAME_NOT_FOUND\" },\n  { 0xC0000035, \"STATUS_OBJECT_NAME_COLLISION\" },\n  { 0xC0000037, \"STATUS_PORT_DISCONNECTED\" },\n  { 0xC0000038, \"STATUS_DEVICE_ALREADY_ATTACHED\" },\n  { 0xC0000039, \"STATUS_OBJECT_PATH_INVALID\" },\n  { 0xC000003A, \"STATUS_OBJECT_PATH_NOT_FOUND\" },\n  { 0xC000003B, \"STATUS_OBJECT_PATH_SYNTAX_BAD\" },\n  { 0xC000003C, \"STATUS_DATA_OVERRUN\" },\n  { 0xC000003D, \"STATUS_DATA_LATE_ERROR\" },\n  { 0xC000003E, \"STATUS_DATA_ERROR\" },\n  { 0xC000003F, \"STATUS_CRC_ERROR\" },\n  { 0xC0000040, \"STATUS_SECTION_TOO_BIG\" },\n  { 0xC0000041, \"STATUS_PORT_CONNECTION_REFUSED\" },\n  { 0xC0000042, \"STATUS_INVALID_PORT_HANDLE\" },\n  { 0xC0000043, \"STATUS_SHARING_VIOLATION\" },\n  { 0xC0000044, \"STATUS_QUOTA_EXCEEDED\" },\n  { 0xC0000045, \"STATUS_INVALID_PAGE_PROTECTION\" },\n  { 0xC0000046, \"STATUS_MUTANT_NOT_OWNED\" },\n  { 0xC0000047, \"STATUS_SEMAPHORE_LIMIT_EXCEEDED\" },\n  { 0xC0000048, \"STATUS_PORT_ALREADY_SET\" },\n  { 0xC0000049, \"STATUS_SECTION_NOT_IMAGE\" },\n  { 0xC000004A, \"STATUS_SUSPEND_COUNT_EXCEEDED\" },\n  { 0xC000004B, \"STATUS_THREAD_IS_TERMINATING\" },\n  { 0xC000004C, \"STATUS_BAD_WORKING_SET_LIMIT\" },\n  { 0xC000004D, \"STATUS_INCOMPATIBLE_FILE_MAP\" },\n  { 0xC000004E, \"STATUS_SECTION_PROTECTION\" },\n  { 0xC000004F, \"STATUS_EAS_NOT_SUPPORTED\" },\n  { 0xC0000050, \"STATUS_EA_TOO_LARGE\" },\n  { 0xC0000051, \"STATUS_NONEXISTENT_EA_ENTRY\" },\n  { 0xC0000052, \"STATUS_NO_EAS_ON_FILE\" },\n  { 0xC0000053, \"STATUS_EA_CORRUPT_ERROR\" },\n  { 0xC0000054, \"STATUS_FILE_LOCK_CONFLICT\" },\n  { 0xC0000055, \"STATUS_LOCK_NOT_GRANTED\" },\n  { 0xC0000056, \"STATUS_DELETE_PENDING\" },\n  { 0xC0000057, \"STATUS_CTL_FILE_NOT_SUPPORTED\" },\n  { 0xC0000058, \"STATUS_UNKNOWN_REVISION\" },\n  { 0xC0000059, \"STATUS_REVISION_MISMATCH\" },\n  { 0xC000005A, \"STATUS_INVALID_OWNER\" },\n  { 0xC000005B, \"STATUS_INVALID_PRIMARY_GROUP\" },\n  { 0xC000005C, \"STATUS_NO_IMPERSONATION_TOKEN\" },\n  { 0xC000005D, \"STATUS_CANT_DISABLE_MANDATORY\" },\n  { 0xC000005E, \"STATUS_NO_LOGON_SERVERS\" },\n  { 0xC000005F, \"STATUS_NO_SUCH_LOGON_SESSION\" },\n  { 0xC0000060, \"STATUS_NO_SUCH_PRIVILEGE\" },\n  { 0xC0000061, \"STATUS_PRIVILEGE_NOT_HELD\" },\n  { 0xC0000062, \"STATUS_INVALID_ACCOUNT_NAME\" },\n  { 0xC0000063, \"STATUS_USER_EXISTS\" },\n  { 0xC0000064, \"STATUS_NO_SUCH_USER\" },\n  { 0xC0000065, \"STATUS_GROUP_EXISTS\" },\n  { 0xC0000066, \"STATUS_NO_SUCH_GROUP\" },\n  { 0xC0000067, \"STATUS_MEMBER_IN_GROUP\" },\n  { 0xC0000068, \"STATUS_MEMBER_NOT_IN_GROUP\" },\n  { 0xC0000069, \"STATUS_LAST_ADMIN\" },\n  { 0xC000006A, \"STATUS_WRONG_PASSWORD\" },\n  { 0xC000006B, \"STATUS_ILL_FORMED_PASSWORD\" },\n  { 0xC000006C, \"STATUS_PASSWORD_RESTRICTION\" },\n  { 0xC000006D, \"STATUS_LOGON_FAILURE\" },\n  { 0xC000006E, \"STATUS_ACCOUNT_RESTRICTION\" },\n  { 0xC000006F, \"STATUS_INVALID_LOGON_HOURS\" },\n  { 0xC0000070, \"STATUS_INVALID_WORKSTATION\" },\n  { 0xC0000071, \"STATUS_PASSWORD_EXPIRED\" },\n  { 0xC0000072, \"STATUS_ACCOUNT_DISABLED\" },\n  { 0xC0000073, \"STATUS_NONE_MAPPED\" },\n  { 0xC0000074, \"STATUS_TOO_MANY_LUIDS_REQUESTED\" },\n  { 0xC0000075, \"STATUS_LUIDS_EXHAUSTED\" },\n  { 0xC0000076, \"STATUS_INVALID_SUB_AUTHORITY\" },\n  { 0xC0000077, \"STATUS_INVALID_ACL\" },\n  { 0xC0000078, \"STATUS_INVALID_SID\" },\n  { 0xC0000079, \"STATUS_INVALID_SECURITY_DESCR\" },\n  { 0xC000007A, \"STATUS_PROCEDURE_NOT_FOUND\" },\n  { 0xC000007B, \"STATUS_INVALID_IMAGE_FORMAT\" },\n  { 0xC000007C, \"STATUS_NO_TOKEN\" },\n  { 0xC000007D, \"STATUS_BAD_INHERITANCE_ACL\" },\n  { 0xC000007E, \"STATUS_RANGE_NOT_LOCKED\" },\n  { 0xC000007F, \"STATUS_DISK_FULL\" },\n  { 0xC0000080, \"STATUS_SERVER_DISABLED\" },\n  { 0xC0000081, \"STATUS_SERVER_NOT_DISABLED\" },\n  { 0xC0000082, \"STATUS_TOO_MANY_GUIDS_REQUESTED\" },\n  { 0xC0000083, \"STATUS_GUIDS_EXHAUSTED\" },\n  { 0xC0000084, \"STATUS_INVALID_ID_AUTHORITY\" },\n  { 0xC0000085, \"STATUS_AGENTS_EXHAUSTED\" },\n  { 0xC0000086, \"STATUS_INVALID_VOLUME_LABEL\" },\n  { 0xC0000087, \"STATUS_SECTION_NOT_EXTENDED\" },\n  { 0xC0000088, \"STATUS_NOT_MAPPED_DATA\" },\n  { 0xC0000089, \"STATUS_RESOURCE_DATA_NOT_FOUND\" },\n  { 0xC000008A, \"STATUS_RESOURCE_TYPE_NOT_FOUND\" },\n  { 0xC000008B, \"STATUS_RESOURCE_NAME_NOT_FOUND\" },\n  { 0xC000008C, \"STATUS_ARRAY_BOUNDS_EXCEEDED\" },\n  { 0xC000008D, \"STATUS_FLOAT_DENORMAL_OPERAND\" },\n  { 0xC000008E, \"STATUS_FLOAT_DIVIDE_BY_ZERO\" },\n  { 0xC000008F, \"STATUS_FLOAT_INEXACT_RESULT\" },\n  { 0xC0000090, \"STATUS_FLOAT_INVALID_OPERATION\" },\n  { 0xC0000091, \"STATUS_FLOAT_OVERFLOW\" },\n  { 0xC0000092, \"STATUS_FLOAT_STACK_CHECK\" },\n  { 0xC0000093, \"STATUS_FLOAT_UNDERFLOW\" },\n  { 0xC0000094, \"STATUS_INTEGER_DIVIDE_BY_ZERO\" },\n  { 0xC0000095, \"STATUS_INTEGER_OVERFLOW\" },\n  { 0xC0000096, \"STATUS_PRIVILEGED_INSTRUCTION\" },\n  { 0xC0000097, \"STATUS_TOO_MANY_PAGING_FILES\" },\n  { 0xC0000098, \"STATUS_FILE_INVALID\" },\n  { 0xC0000099, \"STATUS_ALLOTTED_SPACE_EXCEEDED\" },\n  { 0xC000009A, \"STATUS_INSUFFICIENT_RESOURCES\" },\n  { 0xC000009B, \"STATUS_DFS_EXIT_PATH_FOUND\" },\n  { 0xC000009C, \"STATUS_DEVICE_DATA_ERROR\" },\n  { 0xC000009D, \"STATUS_DEVICE_NOT_CONNECTED\" },\n  { 0xC000009E, \"STATUS_DEVICE_POWER_FAILURE\" },\n  { 0xC000009F, \"STATUS_FREE_VM_NOT_AT_BASE\" },\n  { 0xC00000A0, \"STATUS_MEMORY_NOT_ALLOCATED\" },\n  { 0xC00000A1, \"STATUS_WORKING_SET_QUOTA\" },\n  { 0xC00000A2, \"STATUS_MEDIA_WRITE_PROTECTED\" },\n  { 0xC00000A3, \"STATUS_DEVICE_NOT_READY\" },\n  { 0xC00000A4, \"STATUS_INVALID_GROUP_ATTRIBUTES\" },\n  { 0xC00000A5, \"STATUS_BAD_IMPERSONATION_LEVEL\" },\n  { 0xC00000A6, \"STATUS_CANT_OPEN_ANONYMOUS\" },\n  { 0xC00000A7, \"STATUS_BAD_VALIDATION_CLASS\" },\n  { 0xC00000A8, \"STATUS_BAD_TOKEN_TYPE\" },\n  { 0xC00000A9, \"STATUS_BAD_MASTER_BOOT_RECORD\" },\n  { 0xC00000AA, \"STATUS_INSTRUCTION_MISALIGNMENT\" },\n  { 0xC00000AB, \"STATUS_INSTANCE_NOT_AVAILABLE\" },\n  { 0xC00000AC, \"STATUS_PIPE_NOT_AVAILABLE\" },\n  { 0xC00000AD, \"STATUS_INVALID_PIPE_STATE\" },\n  { 0xC00000AE, \"STATUS_PIPE_BUSY\" },\n  { 0xC00000AF, \"STATUS_ILLEGAL_FUNCTION\" },\n  { 0xC00000B0, \"STATUS_PIPE_DISCONNECTED\" },\n  { 0xC00000B1, \"STATUS_PIPE_CLOSING\" },\n  { 0xC00000B2, \"STATUS_PIPE_CONNECTED\" },\n  { 0xC00000B3, \"STATUS_PIPE_LISTENING\" },\n  { 0xC00000B4, \"STATUS_INVALID_READ_MODE\" },\n  { 0xC00000B5, \"STATUS_IO_TIMEOUT\" },\n  { 0xC00000B6, \"STATUS_FILE_FORCED_CLOSED\" },\n  { 0xC00000B7, \"STATUS_PROFILING_NOT_STARTED\" },\n  { 0xC00000B8, \"STATUS_PROFILING_NOT_STOPPED\" },\n  { 0xC00000B9, \"STATUS_COULD_NOT_INTERPRET\" },\n  { 0xC00000BA, \"STATUS_FILE_IS_A_DIRECTORY\" },\n  { 0xC00000BB, \"STATUS_NOT_SUPPORTED\" },\n  { 0xC00000BC, \"STATUS_REMOTE_NOT_LISTENING\" },\n  { 0xC00000BD, \"STATUS_DUPLICATE_NAME\" },\n  { 0xC00000BE, \"STATUS_BAD_NETWORK_PATH\" },\n  { 0xC00000BF, \"STATUS_NETWORK_BUSY\" },\n  { 0xC00000C0, \"STATUS_DEVICE_DOES_NOT_EXIST\" },\n  { 0xC00000C1, \"STATUS_TOO_MANY_COMMANDS\" },\n  { 0xC00000C2, \"STATUS_ADAPTER_HARDWARE_ERROR\" },\n  { 0xC00000C3, \"STATUS_INVALID_NETWORK_RESPONSE\" },\n  { 0xC00000C4, \"STATUS_UNEXPECTED_NETWORK_ERROR\" },\n  { 0xC00000C5, \"STATUS_BAD_REMOTE_ADAPTER\" },\n  { 0xC00000C6, \"STATUS_PRINT_QUEUE_FULL\" },\n  { 0xC00000C7, \"STATUS_NO_SPOOL_SPACE\" },\n  { 0xC00000C8, \"STATUS_PRINT_CANCELLED\" },\n  { 0xC00000C9, \"STATUS_NETWORK_NAME_DELETED\" },\n  { 0xC00000CA, \"STATUS_NETWORK_ACCESS_DENIED\" },\n  { 0xC00000CB, \"STATUS_BAD_DEVICE_TYPE\" },\n  { 0xC00000CC, \"STATUS_BAD_NETWORK_NAME\" },\n  { 0xC00000CD, \"STATUS_TOO_MANY_NAMES\" },\n  { 0xC00000CE, \"STATUS_TOO_MANY_SESSIONS\" },\n  { 0xC00000CF, \"STATUS_SHARING_PAUSED\" },\n  { 0xC00000D0, \"STATUS_REQUEST_NOT_ACCEPTED\" },\n  { 0xC00000D1, \"STATUS_REDIRECTOR_PAUSED\" },\n  { 0xC00000D2, \"STATUS_NET_WRITE_FAULT\" },\n  { 0xC00000D3, \"STATUS_PROFILING_AT_LIMIT\" },\n  { 0xC00000D4, \"STATUS_NOT_SAME_DEVICE\" },\n  { 0xC00000D5, \"STATUS_FILE_RENAMED\" },\n  { 0xC00000D6, \"STATUS_VIRTUAL_CIRCUIT_CLOSED\" },\n  { 0xC00000D7, \"STATUS_NO_SECURITY_ON_OBJECT\" },\n  { 0xC00000D8, \"STATUS_CANT_WAIT\" },\n  { 0xC00000D9, \"STATUS_PIPE_EMPTY\" },\n  { 0xC00000DA, \"STATUS_CANT_ACCESS_DOMAIN_INFO\" },\n  { 0xC00000DB, \"STATUS_CANT_TERMINATE_SELF\" },\n  { 0xC00000DC, \"STATUS_INVALID_SERVER_STATE\" },\n  { 0xC00000DD, \"STATUS_INVALID_DOMAIN_STATE\" },\n  { 0xC00000DE, \"STATUS_INVALID_DOMAIN_ROLE\" },\n  { 0xC00000DF, \"STATUS_NO_SUCH_DOMAIN\" },\n  { 0xC00000E0, \"STATUS_DOMAIN_EXISTS\" },\n  { 0xC00000E1, \"STATUS_DOMAIN_LIMIT_EXCEEDED\" },\n  { 0xC00000E2, \"STATUS_OPLOCK_NOT_GRANTED\" },\n  { 0xC00000E3, \"STATUS_INVALID_OPLOCK_PROTOCOL\" },\n  { 0xC00000E4, \"STATUS_INTERNAL_DB_CORRUPTION\" },\n  { 0xC00000E5, \"STATUS_INTERNAL_ERROR\" },\n  { 0xC00000E6, \"STATUS_GENERIC_NOT_MAPPED\" },\n  { 0xC00000E7, \"STATUS_BAD_DESCRIPTOR_FORMAT\" },\n  { 0xC00000E8, \"STATUS_INVALID_USER_BUFFER\" },\n  { 0xC00000E9, \"STATUS_UNEXPECTED_IO_ERROR\" },\n  { 0xC00000EA, \"STATUS_UNEXPECTED_MM_CREATE_ERR\" },\n  { 0xC00000EB, \"STATUS_UNEXPECTED_MM_MAP_ERROR\" },\n  { 0xC00000EC, \"STATUS_UNEXPECTED_MM_EXTEND_ERR\" },\n  { 0xC00000ED, \"STATUS_NOT_LOGON_PROCESS\" },\n  { 0xC00000EE, \"STATUS_LOGON_SESSION_EXISTS\" },\n  { 0xC00000EF, \"STATUS_INVALID_PARAMETER_1\" },\n  { 0xC00000F0, \"STATUS_INVALID_PARAMETER_2\" },\n  { 0xC00000F1, \"STATUS_INVALID_PARAMETER_3\" },\n  { 0xC00000F2, \"STATUS_INVALID_PARAMETER_4\" },\n  { 0xC00000F3, \"STATUS_INVALID_PARAMETER_5\" },\n  { 0xC00000F4, \"STATUS_INVALID_PARAMETER_6\" },\n  { 0xC00000F5, \"STATUS_INVALID_PARAMETER_7\" },\n  { 0xC00000F6, \"STATUS_INVALID_PARAMETER_8\" },\n  { 0xC00000F7, \"STATUS_INVALID_PARAMETER_9\" },\n  { 0xC00000F8, \"STATUS_INVALID_PARAMETER_10\" },\n  { 0xC00000F9, \"STATUS_INVALID_PARAMETER_11\" },\n  { 0xC00000FA, \"STATUS_INVALID_PARAMETER_12\" },\n  { 0xC00000FB, \"STATUS_REDIRECTOR_NOT_STARTED\" },\n  { 0xC00000FC, \"STATUS_REDIRECTOR_STARTED\" },\n  { 0xC00000FD, \"STATUS_STACK_OVERFLOW\" },\n  { 0xC00000FE, \"STATUS_NO_SUCH_PACKAGE\" },\n  { 0xC00000FF, \"STATUS_BAD_FUNCTION_TABLE\" },\n  { 0xC0000100, \"STATUS_VARIABLE_NOT_FOUND\" },\n  { 0xC0000101, \"STATUS_DIRECTORY_NOT_EMPTY\" },\n  { 0xC0000102, \"STATUS_FILE_CORRUPT_ERROR\" },\n  { 0xC0000103, \"STATUS_NOT_A_DIRECTORY\" },\n  { 0xC0000104, \"STATUS_BAD_LOGON_SESSION_STATE\" },\n  { 0xC0000105, \"STATUS_LOGON_SESSION_COLLISION\" },\n  { 0xC0000106, \"STATUS_NAME_TOO_LONG\" },\n  { 0xC0000107, \"STATUS_FILES_OPEN\" },\n  { 0xC0000108, \"STATUS_CONNECTION_IN_USE\" },\n  { 0xC0000109, \"STATUS_MESSAGE_NOT_FOUND\" },\n  { 0xC000010A, \"STATUS_PROCESS_IS_TERMINATING\" },\n  { 0xC000010B, \"STATUS_INVALID_LOGON_TYPE\" },\n  { 0xC000010C, \"STATUS_NO_GUID_TRANSLATION\" },\n  { 0xC000010D, \"STATUS_CANNOT_IMPERSONATE\" },\n  { 0xC000010E, \"STATUS_IMAGE_ALREADY_LOADED\" },\n  { 0xC000010F, \"STATUS_ABIOS_NOT_PRESENT\" },\n  { 0xC0000110, \"STATUS_ABIOS_LID_NOT_EXIST\" },\n  { 0xC0000111, \"STATUS_ABIOS_LID_ALREADY_OWNED\" },\n  { 0xC0000112, \"STATUS_ABIOS_NOT_LID_OWNER\" },\n  { 0xC0000113, \"STATUS_ABIOS_INVALID_COMMAND\" },\n  { 0xC0000114, \"STATUS_ABIOS_INVALID_LID\" },\n  { 0xC0000115, \"STATUS_ABIOS_SELECTOR_NOT_AVAILABLE\" },\n  { 0xC0000116, \"STATUS_ABIOS_INVALID_SELECTOR\" },\n  { 0xC0000117, \"STATUS_NO_LDT\" },\n  { 0xC0000118, \"STATUS_INVALID_LDT_SIZE\" },\n  { 0xC0000119, \"STATUS_INVALID_LDT_OFFSET\" },\n  { 0xC000011A, \"STATUS_INVALID_LDT_DESCRIPTOR\" },\n  { 0xC000011B, \"STATUS_INVALID_IMAGE_NE_FORMAT\" },\n  { 0xC000011C, \"STATUS_RXACT_INVALID_STATE\" },\n  { 0xC000011D, \"STATUS_RXACT_COMMIT_FAILURE\" },\n  { 0xC000011E, \"STATUS_MAPPED_FILE_SIZE_ZERO\" },\n  { 0xC000011F, \"STATUS_TOO_MANY_OPENED_FILES\" },\n  { 0xC0000120, \"STATUS_CANCELLED\" },\n  { 0xC0000121, \"STATUS_CANNOT_DELETE\" },\n  { 0xC0000122, \"STATUS_INVALID_COMPUTER_NAME\" },\n  { 0xC0000123, \"STATUS_FILE_DELETED\" },\n  { 0xC0000124, \"STATUS_SPECIAL_ACCOUNT\" },\n  { 0xC0000125, \"STATUS_SPECIAL_GROUP\" },\n  { 0xC0000126, \"STATUS_SPECIAL_USER\" },\n  { 0xC0000127, \"STATUS_MEMBERS_PRIMARY_GROUP\" },\n  { 0xC0000128, \"STATUS_FILE_CLOSED\" },\n  { 0xC0000129, \"STATUS_TOO_MANY_THREADS\" },\n  { 0xC000012A, \"STATUS_THREAD_NOT_IN_PROCESS\" },\n  { 0xC000012B, \"STATUS_TOKEN_ALREADY_IN_USE\" },\n  { 0xC000012C, \"STATUS_PAGEFILE_QUOTA_EXCEEDED\" },\n  { 0xC000012D, \"STATUS_COMMITMENT_LIMIT\" },\n  { 0xC000012E, \"STATUS_INVALID_IMAGE_LE_FORMAT\" },\n  { 0xC000012F, \"STATUS_INVALID_IMAGE_NOT_MZ\" },\n  { 0xC0000130, \"STATUS_INVALID_IMAGE_PROTECT\" },\n  { 0xC0000131, \"STATUS_INVALID_IMAGE_WIN_16\" },\n  { 0xC0000132, \"STATUS_LOGON_SERVER_CONFLICT\" },\n  { 0xC0000133, \"STATUS_TIME_DIFFERENCE_AT_DC\" },\n  { 0xC0000134, \"STATUS_SYNCHRONIZATION_REQUIRED\" },\n  { 0xC0000135, \"STATUS_DLL_NOT_FOUND\" },\n  { 0xC0000136, \"STATUS_OPEN_FAILED\" },\n  { 0xC0000137, \"STATUS_IO_PRIVILEGE_FAILED\" },\n  { 0xC0000138, \"STATUS_ORDINAL_NOT_FOUND\" },\n  { 0xC0000139, \"STATUS_ENTRYPOINT_NOT_FOUND\" },\n  { 0xC000013A, \"STATUS_CONTROL_C_EXIT\" },\n  { 0xC000013B, \"STATUS_LOCAL_DISCONNECT\" },\n  { 0xC000013C, \"STATUS_REMOTE_DISCONNECT\" },\n  { 0xC000013D, \"STATUS_REMOTE_RESOURCES\" },\n  { 0xC000013E, \"STATUS_LINK_FAILED\" },\n  { 0xC000013F, \"STATUS_LINK_TIMEOUT\" },\n  { 0xC0000140, \"STATUS_INVALID_CONNECTION\" },\n  { 0xC0000141, \"STATUS_INVALID_ADDRESS\" },\n  { 0xC0000142, \"STATUS_DLL_INIT_FAILED\" },\n  { 0xC0000143, \"STATUS_MISSING_SYSTEMFILE\" },\n  { 0xC0000144, \"STATUS_UNHANDLED_EXCEPTION\" },\n  { 0xC0000145, \"STATUS_APP_INIT_FAILURE\" },\n  { 0xC0000146, \"STATUS_PAGEFILE_CREATE_FAILED\" },\n  { 0xC0000147, \"STATUS_NO_PAGEFILE\" },\n  { 0xC0000148, \"STATUS_INVALID_LEVEL\" },\n  { 0xC0000149, \"STATUS_WRONG_PASSWORD_CORE\" },\n  { 0xC000014A, \"STATUS_ILLEGAL_FLOAT_CONTEXT\" },\n  { 0xC000014B, \"STATUS_PIPE_BROKEN\" },\n  { 0xC000014C, \"STATUS_REGISTRY_CORRUPT\" },\n  { 0xC000014D, \"STATUS_REGISTRY_IO_FAILED\" },\n  { 0xC000014E, \"STATUS_NO_EVENT_PAIR\" },\n  { 0xC000014F, \"STATUS_UNRECOGNIZED_VOLUME\" },\n  { 0xC0000150, \"STATUS_SERIAL_NO_DEVICE_INITED\" },\n  { 0xC0000151, \"STATUS_NO_SUCH_ALIAS\" },\n  { 0xC0000152, \"STATUS_MEMBER_NOT_IN_ALIAS\" },\n  { 0xC0000153, \"STATUS_MEMBER_IN_ALIAS\" },\n  { 0xC0000154, \"STATUS_ALIAS_EXISTS\" },\n  { 0xC0000155, \"STATUS_LOGON_NOT_GRANTED\" },\n  { 0xC0000156, \"STATUS_TOO_MANY_SECRETS\" },\n  { 0xC0000157, \"STATUS_SECRET_TOO_LONG\" },\n  { 0xC0000158, \"STATUS_INTERNAL_DB_ERROR\" },\n  { 0xC0000159, \"STATUS_FULLSCREEN_MODE\" },\n  { 0xC000015A, \"STATUS_TOO_MANY_CONTEXT_IDS\" },\n  { 0xC000015B, \"STATUS_LOGON_TYPE_NOT_GRANTED\" },\n  { 0xC000015C, \"STATUS_NOT_REGISTRY_FILE\" },\n  { 0xC000015D, \"STATUS_NT_CROSS_ENCRYPTION_REQUIRED\" },\n  { 0xC000015E, \"STATUS_DOMAIN_CTRLR_CONFIG_ERROR\" },\n  { 0xC000015F, \"STATUS_FT_MISSING_MEMBER\" },\n  { 0xC0000160, \"STATUS_ILL_FORMED_SERVICE_ENTRY\" },\n  { 0xC0000161, \"STATUS_ILLEGAL_CHARACTER\" },\n  { 0xC0000162, \"STATUS_UNMAPPABLE_CHARACTER\" },\n  { 0xC0000163, \"STATUS_UNDEFINED_CHARACTER\" },\n  { 0xC0000164, \"STATUS_FLOPPY_VOLUME\" },\n  { 0xC0000165, \"STATUS_FLOPPY_ID_MARK_NOT_FOUND\" },\n  { 0xC0000166, \"STATUS_FLOPPY_WRONG_CYLINDER\" },\n  { 0xC0000167, \"STATUS_FLOPPY_UNKNOWN_ERROR\" },\n  { 0xC0000168, \"STATUS_FLOPPY_BAD_REGISTERS\" },\n  { 0xC0000169, \"STATUS_DISK_RECALIBRATE_FAILED\" },\n  { 0xC000016A, \"STATUS_DISK_OPERATION_FAILED\" },\n  { 0xC000016B, \"STATUS_DISK_RESET_FAILED\" },\n  { 0xC000016C, \"STATUS_SHARED_IRQ_BUSY\" },\n  { 0xC000016D, \"STATUS_FT_ORPHANING\" },\n  { 0xC000016E, \"STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT\" },\n  { 0xC0000172, \"STATUS_PARTITION_FAILURE\" },\n  { 0xC0000173, \"STATUS_INVALID_BLOCK_LENGTH\" },\n  { 0xC0000174, \"STATUS_DEVICE_NOT_PARTITIONED\" },\n  { 0xC0000175, \"STATUS_UNABLE_TO_LOCK_MEDIA\" },\n  { 0xC0000176, \"STATUS_UNABLE_TO_UNLOAD_MEDIA\" },\n  { 0xC0000177, \"STATUS_EOM_OVERFLOW\" },\n  { 0xC0000178, \"STATUS_NO_MEDIA\" },\n  { 0xC000017A, \"STATUS_NO_SUCH_MEMBER\" },\n  { 0xC000017B, \"STATUS_INVALID_MEMBER\" },\n  { 0xC000017C, \"STATUS_KEY_DELETED\" },\n  { 0xC000017D, \"STATUS_NO_LOG_SPACE\" },\n  { 0xC000017E, \"STATUS_TOO_MANY_SIDS\" },\n  { 0xC000017F, \"STATUS_LM_CROSS_ENCRYPTION_REQUIRED\" },\n  { 0xC0000180, \"STATUS_KEY_HAS_CHILDREN\" },\n  { 0xC0000181, \"STATUS_CHILD_MUST_BE_VOLATILE\" },\n  { 0xC0000182, \"STATUS_DEVICE_CONFIGURATION_ERROR\" },\n  { 0xC0000183, \"STATUS_DRIVER_INTERNAL_ERROR\" },\n  { 0xC0000184, \"STATUS_INVALID_DEVICE_STATE\" },\n  { 0xC0000185, \"STATUS_IO_DEVICE_ERROR\" },\n  { 0xC0000186, \"STATUS_DEVICE_PROTOCOL_ERROR\" },\n  { 0xC0000187, \"STATUS_BACKUP_CONTROLLER\" },\n  { 0xC0000188, \"STATUS_LOG_FILE_FULL\" },\n  { 0xC0000189, \"STATUS_TOO_LATE\" },\n  { 0xC000018A, \"STATUS_NO_TRUST_LSA_SECRET\" },\n  { 0xC000018B, \"STATUS_NO_TRUST_SAM_ACCOUNT\" },\n  { 0xC000018C, \"STATUS_TRUSTED_DOMAIN_FAILURE\" },\n  { 0xC000018D, \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\" },\n  { 0xC000018E, \"STATUS_EVENTLOG_FILE_CORRUPT\" },\n  { 0xC000018F, \"STATUS_EVENTLOG_CANT_START\" },\n  { 0xC0000190, \"STATUS_TRUST_FAILURE\" },\n  { 0xC0000191, \"STATUS_MUTANT_LIMIT_EXCEEDED\" },\n  { 0xC0000192, \"STATUS_NETLOGON_NOT_STARTED\" },\n  { 0xC0000193, \"STATUS_ACCOUNT_EXPIRED\" },\n  { 0xC0000194, \"STATUS_POSSIBLE_DEADLOCK\" },\n  { 0xC0000195, \"STATUS_NETWORK_CREDENTIAL_CONFLICT\" },\n  { 0xC0000196, \"STATUS_REMOTE_SESSION_LIMIT\" },\n  { 0xC0000197, \"STATUS_EVENTLOG_FILE_CHANGED\" },\n  { 0xC0000198, \"STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT\" },\n  { 0xC0000199, \"STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT\" },\n  { 0xC000019A, \"STATUS_NOLOGON_SERVER_TRUST_ACCOUNT\" },\n  { 0xC000019B, \"STATUS_DOMAIN_TRUST_INCONSISTENT\" },\n  { 0xC000019C, \"STATUS_FS_DRIVER_REQUIRED\" },\n  { 0xC0000202, \"STATUS_NO_USER_SESSION_KEY\" },\n  { 0xC0000203, \"STATUS_USER_SESSION_DELETED\" },\n  { 0xC0000204, \"STATUS_RESOURCE_LANG_NOT_FOUND\" },\n  { 0xC0000205, \"STATUS_INSUFF_SERVER_RESOURCES\" },\n  { 0xC0000206, \"STATUS_INVALID_BUFFER_SIZE\" },\n  { 0xC0000207, \"STATUS_INVALID_ADDRESS_COMPONENT\" },\n  { 0xC0000208, \"STATUS_INVALID_ADDRESS_WILDCARD\" },\n  { 0xC0000209, \"STATUS_TOO_MANY_ADDRESSES\" },\n  { 0xC000020A, \"STATUS_ADDRESS_ALREADY_EXISTS\" },\n  { 0xC000020B, \"STATUS_ADDRESS_CLOSED\" },\n  { 0xC000020C, \"STATUS_CONNECTION_DISCONNECTED\" },\n  { 0xC000020D, \"STATUS_CONNECTION_RESET\" },\n  { 0xC000020E, \"STATUS_TOO_MANY_NODES\" },\n  { 0xC000020F, \"STATUS_TRANSACTION_ABORTED\" },\n  { 0xC0000210, \"STATUS_TRANSACTION_TIMED_OUT\" },\n  { 0xC0000211, \"STATUS_TRANSACTION_NO_RELEASE\" },\n  { 0xC0000212, \"STATUS_TRANSACTION_NO_MATCH\" },\n  { 0xC0000213, \"STATUS_TRANSACTION_RESPONDED\" },\n  { 0xC0000214, \"STATUS_TRANSACTION_INVALID_ID\" },\n  { 0xC0000215, \"STATUS_TRANSACTION_INVALID_TYPE\" },\n  { 0xC0000216, \"STATUS_NOT_SERVER_SESSION\" },\n  { 0xC0000217, \"STATUS_NOT_CLIENT_SESSION\" },\n  { 0xC0000218, \"STATUS_CANNOT_LOAD_REGISTRY_FILE\" },\n  { 0xC0000219, \"STATUS_DEBUG_ATTACH_FAILED\" },\n  { 0xC000021A, \"STATUS_SYSTEM_PROCESS_TERMINATED\" },\n  { 0xC000021B, \"STATUS_DATA_NOT_ACCEPTED\" },\n  { 0xC000021C, \"STATUS_NO_BROWSER_SERVERS_FOUND\" },\n  { 0xC000021D, \"STATUS_VDM_HARD_ERROR\" },\n  { 0xC000021E, \"STATUS_DRIVER_CANCEL_TIMEOUT\" },\n  { 0xC000021F, \"STATUS_REPLY_MESSAGE_MISMATCH\" },\n  { 0xC0000220, \"STATUS_MAPPED_ALIGNMENT\" },\n  { 0xC0000221, \"STATUS_IMAGE_CHECKSUM_MISMATCH\" },\n  { 0xC0000222, \"STATUS_LOST_WRITEBEHIND_DATA\" },\n  { 0xC0000223, \"STATUS_CLIENT_SERVER_PARAMETERS_INVALID\" },\n  { 0xC0000224, \"STATUS_PASSWORD_MUST_CHANGE\" },\n  { 0xC0000225, \"STATUS_NOT_FOUND\" },\n  { 0xC0000226, \"STATUS_NOT_TINY_STREAM\" },\n  { 0xC0000227, \"STATUS_RECOVERY_FAILURE\" },\n  { 0xC0000228, \"STATUS_STACK_OVERFLOW_READ\" },\n  { 0xC0000229, \"STATUS_FAIL_CHECK\" },\n  { 0xC000022A, \"STATUS_DUPLICATE_OBJECTID\" },\n  { 0xC000022B, \"STATUS_OBJECTID_EXISTS\" },\n  { 0xC000022C, \"STATUS_CONVERT_TO_LARGE\" },\n  { 0xC000022D, \"STATUS_RETRY\" },\n  { 0xC000022E, \"STATUS_FOUND_OUT_OF_SCOPE\" },\n  { 0xC000022F, \"STATUS_ALLOCATE_BUCKET\" },\n  { 0xC0000230, \"STATUS_PROPSET_NOT_FOUND\" },\n  { 0xC0000231, \"STATUS_MARSHALL_OVERFLOW\" },\n  { 0xC0000232, \"STATUS_INVALID_VARIANT\" },\n  { 0xC0000233, \"STATUS_DOMAIN_CONTROLLER_NOT_FOUND\" },\n  { 0xC0000234, \"STATUS_ACCOUNT_LOCKED_OUT\" },\n  { 0xC0000235, \"STATUS_HANDLE_NOT_CLOSABLE\" },\n  { 0xC0000236, \"STATUS_CONNECTION_REFUSED\" },\n  { 0xC0000237, \"STATUS_GRACEFUL_DISCONNECT\" },\n  { 0xC0000238, \"STATUS_ADDRESS_ALREADY_ASSOCIATED\" },\n  { 0xC0000239, \"STATUS_ADDRESS_NOT_ASSOCIATED\" },\n  { 0xC000023A, \"STATUS_CONNECTION_INVALID\" },\n  { 0xC000023B, \"STATUS_CONNECTION_ACTIVE\" },\n  { 0xC000023C, \"STATUS_NETWORK_UNREACHABLE\" },\n  { 0xC000023D, \"STATUS_HOST_UNREACHABLE\" },\n  { 0xC000023E, \"STATUS_PROTOCOL_UNREACHABLE\" },\n  { 0xC000023F, \"STATUS_PORT_UNREACHABLE\" },\n  { 0xC0000240, \"STATUS_REQUEST_ABORTED\" },\n  { 0xC0000241, \"STATUS_CONNECTION_ABORTED\" },\n  { 0xC0000242, \"STATUS_BAD_COMPRESSION_BUFFER\" },\n  { 0xC0000243, \"STATUS_USER_MAPPED_FILE\" },\n  { 0xC0000244, \"STATUS_AUDIT_FAILED\" },\n  { 0xC0000245, \"STATUS_TIMER_RESOLUTION_NOT_SET\" },\n  { 0xC0000246, \"STATUS_CONNECTION_COUNT_LIMIT\" },\n  { 0xC0000247, \"STATUS_LOGIN_TIME_RESTRICTION\" },\n  { 0xC0000248, \"STATUS_LOGIN_WKSTA_RESTRICTION\" },\n  { 0xC0000249, \"STATUS_IMAGE_MP_UP_MISMATCH\" },\n  { 0xC0000250, \"STATUS_INSUFFICIENT_LOGON_INFO\" },\n  { 0xC0000251, \"STATUS_BAD_DLL_ENTRYPOINT\" },\n  { 0xC0000252, \"STATUS_BAD_SERVICE_ENTRYPOINT\" },\n  { 0xC0000253, \"STATUS_LPC_REPLY_LOST\" },\n  { 0xC0000254, \"STATUS_IP_ADDRESS_CONFLICT1\" },\n  { 0xC0000255, \"STATUS_IP_ADDRESS_CONFLICT2\" },\n  { 0xC0000256, \"STATUS_REGISTRY_QUOTA_LIMIT\" },\n  { 0xC0000257, \"STATUS_PATH_NOT_COVERED\" },\n  { 0xC0000258, \"STATUS_NO_CALLBACK_ACTIVE\" },\n  { 0xC0000259, \"STATUS_LICENSE_QUOTA_EXCEEDED\" },\n  { 0xC000025A, \"STATUS_PWD_TOO_SHORT\" },\n  { 0xC000025B, \"STATUS_PWD_TOO_RECENT\" },\n  { 0xC000025C, \"STATUS_PWD_HISTORY_CONFLICT\" },\n  { 0xC000025E, \"STATUS_PLUGPLAY_NO_DEVICE\" },\n  { 0xC000025F, \"STATUS_UNSUPPORTED_COMPRESSION\" },\n  { 0xC0000260, \"STATUS_INVALID_HW_PROFILE\" },\n  { 0xC0000261, \"STATUS_INVALID_PLUGPLAY_DEVICE_PATH\" },\n  { 0xC0000262, \"STATUS_DRIVER_ORDINAL_NOT_FOUND\" },\n  { 0xC0000263, \"STATUS_DRIVER_ENTRYPOINT_NOT_FOUND\" },\n  { 0xC0000264, \"STATUS_RESOURCE_NOT_OWNED\" },\n  { 0xC0000265, \"STATUS_TOO_MANY_LINKS\" },\n  { 0xC0000266, \"STATUS_QUOTA_LIST_INCONSISTENT\" },\n  { 0xC0000267, \"STATUS_FILE_IS_OFFLINE\" },\n  { 0xC0000268, \"STATUS_EVALUATION_EXPIRATION\" },\n  { 0xC0000269, \"STATUS_ILLEGAL_DLL_RELOCATION\" },\n  { 0xC000026A, \"STATUS_LICENSE_VIOLATION\" },\n  { 0xC000026B, \"STATUS_DLL_INIT_FAILED_LOGOFF\" },\n  { 0xC000026C, \"STATUS_DRIVER_UNABLE_TO_LOAD\" },\n  { 0xC000026D, \"STATUS_DFS_UNAVAILABLE\" },\n  { 0xC000026E, \"STATUS_VOLUME_DISMOUNTED\" },\n  { 0xC000026F, \"STATUS_WX86_INTERNAL_ERROR\" },\n  { 0xC0000270, \"STATUS_WX86_FLOAT_STACK_CHECK\" },\n  { 0xC0000271, \"STATUS_VALIDATE_CONTINUE\" },\n  { 0xC0000272, \"STATUS_NO_MATCH\" },\n  { 0xC0000273, \"STATUS_NO_MORE_MATCHES\" },\n  { 0xC0000275, \"STATUS_NOT_A_REPARSE_POINT\" },\n  { 0xC0000276, \"STATUS_IO_REPARSE_TAG_INVALID\" },\n  { 0xC0000277, \"STATUS_IO_REPARSE_TAG_MISMATCH\" },\n  { 0xC0000278, \"STATUS_IO_REPARSE_DATA_INVALID\" },\n  { 0xC0000279, \"STATUS_IO_REPARSE_TAG_NOT_HANDLED\" },\n  { 0xC0000280, \"STATUS_REPARSE_POINT_NOT_RESOLVED\" },\n  { 0xC0000281, \"STATUS_DIRECTORY_IS_A_REPARSE_POINT\" },\n  { 0xC0000282, \"STATUS_RANGE_LIST_CONFLICT\" },\n  { 0xC0000283, \"STATUS_SOURCE_ELEMENT_EMPTY\" },\n  { 0xC0000284, \"STATUS_DESTINATION_ELEMENT_FULL\" },\n  { 0xC0000285, \"STATUS_ILLEGAL_ELEMENT_ADDRESS\" },\n  { 0xC0000286, \"STATUS_MAGAZINE_NOT_PRESENT\" },\n  { 0xC0000287, \"STATUS_REINITIALIZATION_NEEDED\" },\n  { 0x80000288, \"STATUS_DEVICE_REQUIRES_CLEANING\" },\n  { 0x80000289, \"STATUS_DEVICE_DOOR_OPEN\" },\n  { 0xC000028A, \"STATUS_ENCRYPTION_FAILED\" },\n  { 0xC000028B, \"STATUS_DECRYPTION_FAILED\" },\n  { 0xC000028C, \"STATUS_RANGE_NOT_FOUND\" },\n  { 0xC000028D, \"STATUS_NO_RECOVERY_POLICY\" },\n  { 0xC000028E, \"STATUS_NO_EFS\" },\n  { 0xC000028F, \"STATUS_WRONG_EFS\" },\n  { 0xC0000290, \"STATUS_NO_USER_KEYS\" },\n  { 0xC0000291, \"STATUS_FILE_NOT_ENCRYPTED\" },\n  { 0xC0000292, \"STATUS_NOT_EXPORT_FORMAT\" },\n  { 0xC0000293, \"STATUS_FILE_ENCRYPTED\" },\n  { 0x40000294, \"STATUS_WAKE_SYSTEM\" },\n  { 0xC0000295, \"STATUS_WMI_GUID_NOT_FOUND\" },\n  { 0xC0000296, \"STATUS_WMI_INSTANCE_NOT_FOUND\" },\n  { 0xC0000297, \"STATUS_WMI_ITEMID_NOT_FOUND\" },\n  { 0xC0000298, \"STATUS_WMI_TRY_AGAIN\" },\n  { 0xC0000299, \"STATUS_SHARED_POLICY\" },\n  { 0xC000029A, \"STATUS_POLICY_OBJECT_NOT_FOUND\" },\n  { 0xC000029B, \"STATUS_POLICY_ONLY_IN_DS\" },\n  { 0xC000029C, \"STATUS_VOLUME_NOT_UPGRADED\" },\n  { 0xC000029D, \"STATUS_REMOTE_STORAGE_NOT_ACTIVE\" },\n  { 0xC000029E, \"STATUS_REMOTE_STORAGE_MEDIA_ERROR\" },\n  { 0xC000029F, \"STATUS_NO_TRACKING_SERVICE\" },\n  { 0xC00002A0, \"STATUS_SERVER_SID_MISMATCH\" },\n  { 0xC00002A1, \"STATUS_DS_NO_ATTRIBUTE_OR_VALUE\" },\n  { 0xC00002A2, \"STATUS_DS_INVALID_ATTRIBUTE_SYNTAX\" },\n  { 0xC00002A3, \"STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED\" },\n  { 0xC00002A4, \"STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS\" },\n  { 0xC00002A5, \"STATUS_DS_BUSY\" },\n  { 0xC00002A6, \"STATUS_DS_UNAVAILABLE\" },\n  { 0xC00002A7, \"STATUS_DS_NO_RIDS_ALLOCATED\" },\n  { 0xC00002A8, \"STATUS_DS_NO_MORE_RIDS\" },\n  { 0xC00002A9, \"STATUS_DS_INCORRECT_ROLE_OWNER\" },\n  { 0xC00002AA, \"STATUS_DS_RIDMGR_INIT_ERROR\" },\n  { 0xC00002AB, \"STATUS_DS_OBJ_CLASS_VIOLATION\" },\n  { 0xC00002AC, \"STATUS_DS_CANT_ON_NON_LEAF\" },\n  { 0xC00002AD, \"STATUS_DS_CANT_ON_RDN\" },\n  { 0xC00002AE, \"STATUS_DS_CANT_MOD_OBJ_CLASS\" },\n  { 0xC00002AF, \"STATUS_DS_CROSS_DOM_MOVE_FAILED\" },\n  { 0xC00002B0, \"STATUS_DS_GC_NOT_AVAILABLE\" },\n  { 0xC00002B1, \"STATUS_DIRECTORY_SERVICE_REQUIRED\" },\n  { 0xC00002B2, \"STATUS_REPARSE_ATTRIBUTE_CONFLICT\" },\n  { 0xC00002B3, \"STATUS_CANT_ENABLE_DENY_ONLY\" },\n  { 0xC00002B4, \"STATUS_FLOAT_MULTIPLE_FAULTS\" },\n  { 0xC00002B5, \"STATUS_FLOAT_MULTIPLE_TRAPS\" },\n  { 0xC00002B6, \"STATUS_DEVICE_REMOVED\" },\n  { 0xC00002B7, \"STATUS_JOURNAL_DELETE_IN_PROGRESS\" },\n  { 0xC00002B8, \"STATUS_JOURNAL_NOT_ACTIVE\" },\n  { 0xC00002B9, \"STATUS_NOINTERFACE\" },\n  { 0xC00002C1, \"STATUS_DS_ADMIN_LIMIT_EXCEEDED\" },\n  { 0xC00002C2, \"STATUS_DRIVER_FAILED_SLEEP\" },\n  { 0xC00002C3, \"STATUS_MUTUAL_AUTHENTICATION_FAILED\" },\n  { 0xC00002C4, \"STATUS_CORRUPT_SYSTEM_FILE\" },\n  { 0xC00002C5, \"STATUS_DATATYPE_MISALIGNMENT_ERROR\" },\n  { 0xC00002C6, \"STATUS_WMI_READ_ONLY\" },\n  { 0xC00002C7, \"STATUS_WMI_SET_FAILURE\" },\n  { 0xC00002C8, \"STATUS_COMMITMENT_MINIMUM\" },\n  { 0xC00002C9, \"STATUS_REG_NAT_CONSUMPTION\" },\n  { 0xC00002CA, \"STATUS_TRANSPORT_FULL\" },\n  { 0xC00002CB, \"STATUS_DS_SAM_INIT_FAILURE\" },\n  { 0xC00002CC, \"STATUS_ONLY_IF_CONNECTED\" },\n  { 0xC00002CD, \"STATUS_DS_SENSITIVE_GROUP_VIOLATION\" },\n  { 0xC00002CE, \"STATUS_PNP_RESTART_ENUMERATION\" },\n  { 0xC00002CF, \"STATUS_JOURNAL_ENTRY_DELETED\" },\n  { 0xC00002D0, \"STATUS_DS_CANT_MOD_PRIMARYGROUPID\" },\n  { 0xC00002D1, \"STATUS_SYSTEM_IMAGE_BAD_SIGNATURE\" },\n  { 0xC00002D2, \"STATUS_PNP_REBOOT_REQUIRED\" },\n  { 0xC00002D3, \"STATUS_POWER_STATE_INVALID\" },\n  { 0xC00002D4, \"STATUS_DS_INVALID_GROUP_TYPE\" },\n  { 0xC00002D5, \"STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN\" },\n  { 0xC00002D6, \"STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN\" },\n  { 0xC00002D7, \"STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER\" },\n  { 0xC00002D8, \"STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER\" },\n  { 0xC00002D9, \"STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER\" },\n  { 0xC00002DA, \"STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER\" },\n  { 0xC00002DB, \"STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER\" },\n  { 0xC00002DC, \"STATUS_DS_HAVE_PRIMARY_MEMBERS\" },\n  { 0xC00002DD, \"STATUS_WMI_NOT_SUPPORTED\" },\n  { 0xC00002DE, \"STATUS_INSUFFICIENT_POWER\" },\n  { 0xC00002DF, \"STATUS_SAM_NEED_BOOTKEY_PASSWORD\" },\n  { 0xC00002E0, \"STATUS_SAM_NEED_BOOTKEY_FLOPPY\" },\n  { 0xC00002E1, \"STATUS_DS_CANT_START\" },\n  { 0xC00002E2, \"STATUS_DS_INIT_FAILURE\" },\n  { 0xC00002E3, \"STATUS_SAM_INIT_FAILURE\" },\n  { 0xC00002E4, \"STATUS_DS_GC_REQUIRED\" },\n  { 0xC00002E5, \"STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY\" },\n  { 0xC00002E6, \"STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS\" },\n  { 0xC00002E7, \"STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED\" },\n  { 0xC00002E8, \"STATUS_MULTIPLE_FAULT_VIOLATION\" },\n  { 0xC0000300, \"STATUS_NOT_SUPPORTED_ON_SBS\" },\n  { 0xC0009898, \"STATUS_WOW_ASSERTION\" },\n  { 0xC0020001, \"RPC_NT_INVALID_STRING_BINDING\" },\n  { 0xC0020002, \"RPC_NT_WRONG_KIND_OF_BINDING\" },\n  { 0xC0020003, \"RPC_NT_INVALID_BINDING\" },\n  { 0xC0020004, \"RPC_NT_PROTSEQ_NOT_SUPPORTED\" },\n  { 0xC0020005, \"RPC_NT_INVALID_RPC_PROTSEQ\" },\n  { 0xC0020006, \"RPC_NT_INVALID_STRING_UUID\" },\n  { 0xC0020007, \"RPC_NT_INVALID_ENDPOINT_FORMAT\" },\n  { 0xC0020008, \"RPC_NT_INVALID_NET_ADDR\" },\n  { 0xC0020009, \"RPC_NT_NO_ENDPOINT_FOUND\" },\n  { 0xC002000A, \"RPC_NT_INVALID_TIMEOUT\" },\n  { 0xC002000B, \"RPC_NT_OBJECT_NOT_FOUND\" },\n  { 0xC002000C, \"RPC_NT_ALREADY_REGISTERED\" },\n  { 0xC002000D, \"RPC_NT_TYPE_ALREADY_REGISTERED\" },\n  { 0xC002000E, \"RPC_NT_ALREADY_LISTENING\" },\n  { 0xC002000F, \"RPC_NT_NO_PROTSEQS_REGISTERED\" },\n  { 0xC0020010, \"RPC_NT_NOT_LISTENING\" },\n  { 0xC0020011, \"RPC_NT_UNKNOWN_MGR_TYPE\" },\n  { 0xC0020012, \"RPC_NT_UNKNOWN_IF\" },\n  { 0xC0020013, \"RPC_NT_NO_BINDINGS\" },\n  { 0xC0020014, \"RPC_NT_NO_PROTSEQS\" },\n  { 0xC0020015, \"RPC_NT_CANT_CREATE_ENDPOINT\" },\n  { 0xC0020016, \"RPC_NT_OUT_OF_RESOURCES\" },\n  { 0xC0020017, \"RPC_NT_SERVER_UNAVAILABLE\" },\n  { 0xC0020018, \"RPC_NT_SERVER_TOO_BUSY\" },\n  { 0xC0020019, \"RPC_NT_INVALID_NETWORK_OPTIONS\" },\n  { 0xC002001A, \"RPC_NT_NO_CALL_ACTIVE\" },\n  { 0xC002001B, \"RPC_NT_CALL_FAILED\" },\n  { 0xC002001C, \"RPC_NT_CALL_FAILED_DNE\" },\n  { 0xC002001D, \"RPC_NT_PROTOCOL_ERROR\" },\n  { 0xC002001F, \"RPC_NT_UNSUPPORTED_TRANS_SYN\" },\n  { 0xC0020021, \"RPC_NT_UNSUPPORTED_TYPE\" },\n  { 0xC0020022, \"RPC_NT_INVALID_TAG\" },\n  { 0xC0020023, \"RPC_NT_INVALID_BOUND\" },\n  { 0xC0020024, \"RPC_NT_NO_ENTRY_NAME\" },\n  { 0xC0020025, \"RPC_NT_INVALID_NAME_SYNTAX\" },\n  { 0xC0020026, \"RPC_NT_UNSUPPORTED_NAME_SYNTAX\" },\n  { 0xC0020028, \"RPC_NT_UUID_NO_ADDRESS\" },\n  { 0xC0020029, \"RPC_NT_DUPLICATE_ENDPOINT\" },\n  { 0xC002002A, \"RPC_NT_UNKNOWN_AUTHN_TYPE\" },\n  { 0xC002002B, \"RPC_NT_MAX_CALLS_TOO_SMALL\" },\n  { 0xC002002C, \"RPC_NT_STRING_TOO_LONG\" },\n  { 0xC002002D, \"RPC_NT_PROTSEQ_NOT_FOUND\" },\n  { 0xC002002E, \"RPC_NT_PROCNUM_OUT_OF_RANGE\" },\n  { 0xC002002F, \"RPC_NT_BINDING_HAS_NO_AUTH\" },\n  { 0xC0020030, \"RPC_NT_UNKNOWN_AUTHN_SERVICE\" },\n  { 0xC0020031, \"RPC_NT_UNKNOWN_AUTHN_LEVEL\" },\n  { 0xC0020032, \"RPC_NT_INVALID_AUTH_IDENTITY\" },\n  { 0xC0020033, \"RPC_NT_UNKNOWN_AUTHZ_SERVICE\" },\n  { 0xC0020034, \"EPT_NT_INVALID_ENTRY\" },\n  { 0xC0020035, \"EPT_NT_CANT_PERFORM_OP\" },\n  { 0xC0020036, \"EPT_NT_NOT_REGISTERED\" },\n  { 0xC0020037, \"RPC_NT_NOTHING_TO_EXPORT\" },\n  { 0xC0020038, \"RPC_NT_INCOMPLETE_NAME\" },\n  { 0xC0020039, \"RPC_NT_INVALID_VERS_OPTION\" },\n  { 0xC002003A, \"RPC_NT_NO_MORE_MEMBERS\" },\n  { 0xC002003B, \"RPC_NT_NOT_ALL_OBJS_UNEXPORTED\" },\n  { 0xC002003C, \"RPC_NT_INTERFACE_NOT_FOUND\" },\n  { 0xC002003D, \"RPC_NT_ENTRY_ALREADY_EXISTS\" },\n  { 0xC002003E, \"RPC_NT_ENTRY_NOT_FOUND\" },\n  { 0xC002003F, \"RPC_NT_NAME_SERVICE_UNAVAILABLE\" },\n  { 0xC0020040, \"RPC_NT_INVALID_NAF_ID\" },\n  { 0xC0020041, \"RPC_NT_CANNOT_SUPPORT\" },\n  { 0xC0020042, \"RPC_NT_NO_CONTEXT_AVAILABLE\" },\n  { 0xC0020043, \"RPC_NT_INTERNAL_ERROR\" },\n  { 0xC0020044, \"RPC_NT_ZERO_DIVIDE\" },\n  { 0xC0020045, \"RPC_NT_ADDRESS_ERROR\" },\n  { 0xC0020046, \"RPC_NT_FP_DIV_ZERO\" },\n  { 0xC0020047, \"RPC_NT_FP_UNDERFLOW\" },\n  { 0xC0020048, \"RPC_NT_FP_OVERFLOW\" },\n  { 0xC0021007, \"RPC_P_RECEIVE_ALERTED\" },\n  { 0xC0021008, \"RPC_P_CONNECTION_CLOSED\" },\n  { 0xC0021009, \"RPC_P_RECEIVE_FAILED\" },\n  { 0xC002100A, \"RPC_P_SEND_FAILED\" },\n  { 0xC002100B, \"RPC_P_TIMEOUT\" },\n  { 0xC002100C, \"RPC_P_SERVER_TRANSPORT_ERROR\" },\n  { 0xC002100E, \"RPC_P_EXCEPTION_OCCURED\" },\n  { 0xC0021012, \"RPC_P_CONNECTION_SHUTDOWN\" },\n  { 0xC0021015, \"RPC_P_THREAD_LISTENING\" },\n  { 0xC0030001, \"RPC_NT_NO_MORE_ENTRIES\" },\n  { 0xC0030002, \"RPC_NT_SS_CHAR_TRANS_OPEN_FAIL\" },\n  { 0xC0030003, \"RPC_NT_SS_CHAR_TRANS_SHORT_FILE\" },\n  { 0xC0030004, \"RPC_NT_SS_IN_NULL_CONTEXT\" },\n  { 0xC0030005, \"RPC_NT_SS_CONTEXT_MISMATCH\" },\n  { 0xC0030006, \"RPC_NT_SS_CONTEXT_DAMAGED\" },\n  { 0xC0030007, \"RPC_NT_SS_HANDLES_MISMATCH\" },\n  { 0xC0030008, \"RPC_NT_SS_CANNOT_GET_CALL_HANDLE\" },\n  { 0xC0030009, \"RPC_NT_NULL_REF_POINTER\" },\n  { 0xC003000A, \"RPC_NT_ENUM_VALUE_OUT_OF_RANGE\" },\n  { 0xC003000B, \"RPC_NT_BYTE_COUNT_TOO_SMALL\" },\n  { 0xC003000C, \"RPC_NT_BAD_STUB_DATA\" },\n  { 0xC0020049, \"RPC_NT_CALL_IN_PROGRESS\" },\n  { 0xC002004A, \"RPC_NT_NO_MORE_BINDINGS\" },\n  { 0xC002004B, \"RPC_NT_GROUP_MEMBER_NOT_FOUND\" },\n  { 0xC002004C, \"EPT_NT_CANT_CREATE\" },\n  { 0xC002004D, \"RPC_NT_INVALID_OBJECT\" },\n  { 0xC002004F, \"RPC_NT_NO_INTERFACES\" },\n  { 0xC0020050, \"RPC_NT_CALL_CANCELLED\" },\n  { 0xC0020051, \"RPC_NT_BINDING_INCOMPLETE\" },\n  { 0xC0020052, \"RPC_NT_COMM_FAILURE\" },\n  { 0xC0020053, \"RPC_NT_UNSUPPORTED_AUTHN_LEVEL\" },\n  { 0xC0020054, \"RPC_NT_NO_PRINC_NAME\" },\n  { 0xC0020055, \"RPC_NT_NOT_RPC_ERROR\" },\n  { 0x40020056, \"RPC_NT_UUID_LOCAL_ONLY\" },\n  { 0xC0020057, \"RPC_NT_SEC_PKG_ERROR\" },\n  { 0xC0020058, \"RPC_NT_NOT_CANCELLED\" },\n  { 0xC0030059, \"RPC_NT_INVALID_ES_ACTION\" },\n  { 0xC003005A, \"RPC_NT_WRONG_ES_VERSION\" },\n  { 0xC003005B, \"RPC_NT_WRONG_STUB_VERSION\" },\n  { 0xC003005C, \"RPC_NT_INVALID_PIPE_OBJECT\" },\n  { 0xC003005D, \"RPC_NT_INVALID_PIPE_OPERATION\" },\n  { 0xC003005E, \"RPC_NT_WRONG_PIPE_VERSION\" },\n  { 0x400200AF, \"RPC_NT_SEND_INCOMPLETE\" },\n  { 0,          NULL }\n};\n\n/*\n * return an NT error string from a SMB buffer\n */\nconst char *\nnt_errstr(uint32_t err)\n{\n    static char ret[128];\n    int i;\n\n    ret[0] = 0;\n\n    for (i = 0; nt_errors[i].name; i++) {\n\tif (err == nt_errors[i].code)\n\t    return nt_errors[i].name;\n    }\n\n    snprintf(ret, sizeof(ret), \"0x%08x\", err);\n    return ret;\n}\n"], "fixing_code": ["/*\n * Copyright (C) Andrew Tridgell 1995-1999\n *\n * This software may be distributed either under the terms of the\n * BSD-style license that accompanies tcpdump or the GNU GPL version 2\n * or later\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <netdissect-stdinc.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"netdissect.h\"\n#include \"extract.h\"\n#include \"smb.h\"\n\nstatic uint32_t stringlen;\nextern const u_char *startbuf;\n\n/*\n * interpret a 32 bit dos packed date/time to some parameters\n */\nstatic void\ninterpret_dos_date(uint32_t date, struct tm *tp)\n{\n    uint32_t p0, p1, p2, p3;\n\n    p0 = date & 0xFF;\n    p1 = ((date & 0xFF00) >> 8) & 0xFF;\n    p2 = ((date & 0xFF0000) >> 16) & 0xFF;\n    p3 = ((date & 0xFF000000) >> 24) & 0xFF;\n\n    tp->tm_sec = 2 * (p0 & 0x1F);\n    tp->tm_min = ((p0 >> 5) & 0xFF) + ((p1 & 0x7) << 3);\n    tp->tm_hour = (p1 >> 3) & 0xFF;\n    tp->tm_mday = (p2 & 0x1F);\n    tp->tm_mon = ((p2 >> 5) & 0xFF) + ((p3 & 0x1) << 3) - 1;\n    tp->tm_year = ((p3 >> 1) & 0xFF) + 80;\n}\n\n/*\n * common portion:\n * create a unix date from a dos date\n */\nstatic time_t\nint_unix_date(uint32_t dos_date)\n{\n    struct tm t;\n\n    if (dos_date == 0)\n\treturn(0);\n\n    interpret_dos_date(dos_date, &t);\n    t.tm_wday = 1;\n    t.tm_yday = 1;\n    t.tm_isdst = 0;\n\n    return (mktime(&t));\n}\n\n/*\n * create a unix date from a dos date\n * in network byte order\n */\nstatic time_t\nmake_unix_date(const u_char *date_ptr)\n{\n    uint32_t dos_date = 0;\n\n    dos_date = EXTRACT_LE_32BITS(date_ptr);\n\n    return int_unix_date(dos_date);\n}\n\n/*\n * create a unix date from a dos date\n * in halfword-swapped network byte order!\n */\nstatic time_t\nmake_unix_date2(const u_char *date_ptr)\n{\n    uint32_t x, x2;\n\n    x = EXTRACT_LE_32BITS(date_ptr);\n    x2 = ((x & 0xFFFF) << 16) | ((x & 0xFFFF0000) >> 16);\n    return int_unix_date(x2);\n}\n\n/*\n * interpret an 8 byte \"filetime\" structure to a time_t\n * It's originally in \"100ns units since jan 1st 1601\"\n */\nstatic time_t\ninterpret_long_date(const u_char *p)\n{\n    double d;\n    time_t ret;\n\n    /* this gives us seconds since jan 1st 1601 (approx) */\n    d = (EXTRACT_LE_32BITS(p + 4) * 256.0 + p[3]) * (1.0e-7 * (1 << 24));\n\n    /* now adjust by 369 years to make the secs since 1970 */\n    d -= 369.0 * 365.25 * 24 * 60 * 60;\n\n    /* and a fudge factor as we got it wrong by a few days */\n    d += (3 * 24 * 60 * 60 + 6 * 60 * 60 + 2);\n\n    if (d < 0)\n\treturn(0);\n\n    ret = (time_t)d;\n\n    return(ret);\n}\n\n/*\n * interpret the weird netbios \"name\". Return the name type, or -1 if\n * we run past the end of the buffer\n */\nstatic int\nname_interpret(netdissect_options *ndo,\n               const u_char *in, const u_char *maxbuf, char *out)\n{\n    int ret;\n    int len;\n\n    if (in >= maxbuf)\n\treturn(-1);\t/* name goes past the end of the buffer */\n    ND_TCHECK2(*in, 1);\n    len = (*in++) / 2;\n\n    *out=0;\n\n    if (len > 30 || len < 1)\n\treturn(0);\n\n    while (len--) {\n\tND_TCHECK2(*in, 2);\n\tif (in + 1 >= maxbuf)\n\t    return(-1);\t/* name goes past the end of the buffer */\n\tif (in[0] < 'A' || in[0] > 'P' || in[1] < 'A' || in[1] > 'P') {\n\t    *out = 0;\n\t    return(0);\n\t}\n\t*out = ((in[0] - 'A') << 4) + (in[1] - 'A');\n\tin += 2;\n\tout++;\n    }\n    *out = 0;\n    ret = out[-1];\n\n    return(ret);\n\ntrunc:\n    return(-1);\n}\n\n/*\n * find a pointer to a netbios name\n */\nstatic const u_char *\nname_ptr(netdissect_options *ndo,\n         const u_char *buf, int ofs, const u_char *maxbuf)\n{\n    const u_char *p;\n    u_char c;\n\n    p = buf + ofs;\n    if (p >= maxbuf)\n\treturn(NULL);\t/* name goes past the end of the buffer */\n    ND_TCHECK2(*p, 1);\n\n    c = *p;\n\n    /* XXX - this should use the same code that the DNS dissector does */\n    if ((c & 0xC0) == 0xC0) {\n\tuint16_t l;\n\n\tND_TCHECK2(*p, 2);\n\tif ((p + 1) >= maxbuf)\n\t    return(NULL);\t/* name goes past the end of the buffer */\n\tl = EXTRACT_16BITS(p) & 0x3FFF;\n\tif (l == 0) {\n\t    /* We have a pointer that points to itself. */\n\t    return(NULL);\n\t}\n\tp = buf + l;\n\tif (p >= maxbuf)\n\t    return(NULL);\t/* name goes past the end of the buffer */\n\tND_TCHECK2(*p, 1);\n    }\n    return(p);\n\ntrunc:\n    return(NULL);\t/* name goes past the end of the buffer */\n}\n\n/*\n * extract a netbios name from a buf\n */\nstatic int\nname_extract(netdissect_options *ndo,\n             const u_char *buf, int ofs, const u_char *maxbuf, char *name)\n{\n    const u_char *p = name_ptr(ndo, buf, ofs, maxbuf);\n    if (p == NULL)\n\treturn(-1);\t/* error (probably name going past end of buffer) */\n    name[0] = '\\0';\n    return(name_interpret(ndo, p, maxbuf, name));\n}\n\n\n/*\n * return the total storage length of a mangled name\n */\nstatic int\nname_len(netdissect_options *ndo,\n         const unsigned char *s, const unsigned char *maxbuf)\n{\n    const unsigned char *s0 = s;\n    unsigned char c;\n\n    if (s >= maxbuf)\n\treturn(-1);\t/* name goes past the end of the buffer */\n    ND_TCHECK2(*s, 1);\n    c = *s;\n    if ((c & 0xC0) == 0xC0)\n\treturn(2);\n    while (*s) {\n\tif (s >= maxbuf)\n\t    return(-1);\t/* name goes past the end of the buffer */\n\tND_TCHECK2(*s, 1);\n\ts += (*s) + 1;\n\tND_TCHECK2(*s, 1);\n    }\n    return(PTR_DIFF(s, s0) + 1);\n\ntrunc:\n    return(-1);\t/* name goes past the end of the buffer */\n}\n\nstatic void\nprint_asc(netdissect_options *ndo,\n          const unsigned char *buf, int len)\n{\n    int i;\n    for (i = 0; i < len; i++)\n        safeputchar(ndo, buf[i]);\n}\n\nstatic const char *\nname_type_str(int name_type)\n{\n    const char *f = NULL;\n\n    switch (name_type) {\n    case 0:    f = \"Workstation\"; break;\n    case 0x03: f = \"Client?\"; break;\n    case 0x20: f = \"Server\"; break;\n    case 0x1d: f = \"Master Browser\"; break;\n    case 0x1b: f = \"Domain Controller\"; break;\n    case 0x1e: f = \"Browser Server\"; break;\n    default:   f = \"Unknown\"; break;\n    }\n    return(f);\n}\n\nvoid\nsmb_print_data(netdissect_options *ndo, const unsigned char *buf, int len)\n{\n    int i = 0;\n\n    if (len <= 0)\n\treturn;\n    ND_PRINT((ndo, \"[%03X] \", i));\n    for (i = 0; i < len; /*nothing*/) {\n        ND_TCHECK(buf[i]);\n\tND_PRINT((ndo, \"%02X \", buf[i] & 0xff));\n\ti++;\n\tif (i%8 == 0)\n\t    ND_PRINT((ndo, \" \"));\n\tif (i % 16 == 0) {\n\t    print_asc(ndo, &buf[i - 16], 8);\n\t    ND_PRINT((ndo, \" \"));\n\t    print_asc(ndo, &buf[i - 8], 8);\n\t    ND_PRINT((ndo, \"\\n\"));\n\t    if (i < len)\n\t\tND_PRINT((ndo, \"[%03X] \", i));\n\t}\n    }\n    if (i % 16) {\n\tint n;\n\n\tn = 16 - (i % 16);\n\tND_PRINT((ndo, \" \"));\n\tif (n>8)\n\t    ND_PRINT((ndo, \" \"));\n\twhile (n--)\n\t    ND_PRINT((ndo, \"   \"));\n\n\tn = min(8, i % 16);\n\tprint_asc(ndo, &buf[i - (i % 16)], n);\n\tND_PRINT((ndo, \" \"));\n\tn = (i % 16) - n;\n\tif (n > 0)\n\t    print_asc(ndo, &buf[i - n], n);\n\tND_PRINT((ndo, \"\\n\"));\n    }\n    return;\n\ntrunc:\n    ND_PRINT((ndo, \"\\n\"));\n    ND_PRINT((ndo, \"WARNING: Short packet. Try increasing the snap length\\n\"));\n}\n\n\nstatic void\nwrite_bits(netdissect_options *ndo,\n           unsigned int val, const char *fmt)\n{\n    const char *p = fmt;\n    int i = 0;\n\n    while ((p = strchr(fmt, '|'))) {\n\tsize_t l = PTR_DIFF(p, fmt);\n\tif (l && (val & (1 << i)))\n\t    ND_PRINT((ndo, \"%.*s \", (int)l, fmt));\n\tfmt = p + 1;\n\ti++;\n    }\n}\n\n/* convert a UCS-2 string into an ASCII string */\n#define MAX_UNISTR_SIZE\t1000\nstatic const char *\nunistr(netdissect_options *ndo,\n       const u_char *s, uint32_t *len, int use_unicode)\n{\n    static char buf[MAX_UNISTR_SIZE+1];\n    size_t l = 0;\n    uint32_t strsize;\n    const u_char *sp;\n\n    if (use_unicode) {\n\t/*\n\t * Skip padding that puts the string on an even boundary.\n\t */\n\tif (((s - startbuf) % 2) != 0) {\n\t    ND_TCHECK(s[0]);\n\t    s++;\n\t}\n    }\n    if (*len == 0) {\n\t/*\n\t * Null-terminated string.\n\t */\n\tstrsize = 0;\n\tsp = s;\n\tif (!use_unicode) {\n\t    for (;;) {\n\t\tND_TCHECK(sp[0]);\n\t\t*len += 1;\n\t\tif (sp[0] == 0)\n\t\t    break;\n\t\tsp++;\n\t    }\n\t    strsize = *len - 1;\n\t} else {\n\t    for (;;) {\n\t\tND_TCHECK2(sp[0], 2);\n\t\t*len += 2;\n\t\tif (sp[0] == 0 && sp[1] == 0)\n\t\t    break;\n\t\tsp += 2;\n\t    }\n\t    strsize = *len - 2;\n\t}\n    } else {\n\t/*\n\t * Counted string.\n\t */\n\tstrsize = *len;\n    }\n    if (!use_unicode) {\n    \twhile (strsize != 0) {\n          ND_TCHECK(s[0]);\n\t    if (l >= MAX_UNISTR_SIZE)\n\t\tbreak;\n\t    if (ND_ISPRINT(s[0]))\n\t\tbuf[l] = s[0];\n\t    else {\n\t\tif (s[0] == 0)\n\t\t    break;\n\t\tbuf[l] = '.';\n\t    }\n\t    l++;\n\t    s++;\n\t    strsize--;\n\t}\n    } else {\n\twhile (strsize != 0) {\n\t    ND_TCHECK2(s[0], 2);\n\t    if (l >= MAX_UNISTR_SIZE)\n\t\tbreak;\n\t    if (s[1] == 0 && ND_ISPRINT(s[0])) {\n\t\t/* It's a printable ASCII character */\n\t\tbuf[l] = s[0];\n\t    } else {\n\t\t/* It's a non-ASCII character or a non-printable ASCII character */\n\t\tif (s[0] == 0 && s[1] == 0)\n\t\t    break;\n\t\tbuf[l] = '.';\n\t    }\n\t    l++;\n\t    s += 2;\n\t    if (strsize == 1)\n\t\tbreak;\n\t    strsize -= 2;\n\t}\n    }\n    buf[l] = 0;\n    return buf;\n\ntrunc:\n    return NULL;\n}\n\nstatic const u_char *\nsmb_fdata1(netdissect_options *ndo,\n           const u_char *buf, const char *fmt, const u_char *maxbuf,\n           int unicodestr)\n{\n    int reverse = 0;\n    const char *attrib_fmt = \"READONLY|HIDDEN|SYSTEM|VOLUME|DIR|ARCHIVE|\";\n\n    while (*fmt && buf<maxbuf) {\n\tswitch (*fmt) {\n\tcase 'a':\n\t    ND_TCHECK(buf[0]);\n\t    write_bits(ndo, buf[0], attrib_fmt);\n\t    buf++;\n\t    fmt++;\n\t    break;\n\n\tcase 'A':\n\t    ND_TCHECK2(buf[0], 2);\n\t    write_bits(ndo, EXTRACT_LE_16BITS(buf), attrib_fmt);\n\t    buf += 2;\n\t    fmt++;\n\t    break;\n\n\tcase '{':\n\t  {\n\t    char bitfmt[128];\n\t    char *p;\n\t    int l;\n\n\t    p = strchr(++fmt, '}');\n\t    l = PTR_DIFF(p, fmt);\n\n\t    if ((unsigned int)l > sizeof(bitfmt) - 1)\n\t\t    l = sizeof(bitfmt)-1;\n\n\t    strncpy(bitfmt, fmt, l);\n\t    bitfmt[l] = '\\0';\n\t    fmt = p + 1;\n\t    ND_TCHECK(buf[0]);\n\t    write_bits(ndo, buf[0], bitfmt);\n\t    buf++;\n\t    break;\n\t  }\n\n\tcase 'P':\n\t  {\n\t    int l = atoi(fmt + 1);\n\t    ND_TCHECK2(buf[0], l);\n\t    buf += l;\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'r':\n\t    reverse = !reverse;\n\t    fmt++;\n\t    break;\n\tcase 'b':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK(buf[0]);\n\t    x = buf[0];\n\t    ND_PRINT((ndo, \"%u (0x%x)\", x, x));\n\t    buf += 1;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'd':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 2);\n\t    x = reverse ? EXTRACT_16BITS(buf) :\n\t\t\t  EXTRACT_LE_16BITS(buf);\n\t    ND_PRINT((ndo, \"%d (0x%x)\", x, x));\n\t    buf += 2;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'D':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 4);\n\t    x = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t  EXTRACT_LE_32BITS(buf);\n\t    ND_PRINT((ndo, \"%d (0x%x)\", x, x));\n\t    buf += 4;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'L':\n\t  {\n\t    uint64_t x;\n\t    ND_TCHECK2(buf[0], 8);\n\t    x = reverse ? EXTRACT_64BITS(buf) :\n\t\t\t  EXTRACT_LE_64BITS(buf);\n\t    ND_PRINT((ndo, \"%\" PRIu64 \" (0x%\" PRIx64 \")\", x, x));\n\t    buf += 8;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'M':\n\t  {\n\t    /* Weird mixed-endian length values in 64-bit locks */\n\t    uint32_t x1, x2;\n\t    uint64_t x;\n\t    ND_TCHECK2(buf[0], 8);\n\t    x1 = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t   EXTRACT_LE_32BITS(buf);\n\t    x2 = reverse ? EXTRACT_32BITS(buf + 4) :\n\t\t\t   EXTRACT_LE_32BITS(buf + 4);\n\t    x = (((uint64_t)x1) << 32) | x2;\n\t    ND_PRINT((ndo, \"%\" PRIu64 \" (0x%\" PRIx64 \")\", x, x));\n\t    buf += 8;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'B':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK(buf[0]);\n\t    x = buf[0];\n\t    ND_PRINT((ndo, \"0x%X\", x));\n\t    buf += 1;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'w':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 2);\n\t    x = reverse ? EXTRACT_16BITS(buf) :\n\t\t\t  EXTRACT_LE_16BITS(buf);\n\t    ND_PRINT((ndo, \"0x%X\", x));\n\t    buf += 2;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'W':\n\t  {\n\t    unsigned int x;\n\t    ND_TCHECK2(buf[0], 4);\n\t    x = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t  EXTRACT_LE_32BITS(buf);\n\t    ND_PRINT((ndo, \"0x%X\", x));\n\t    buf += 4;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'l':\n\t  {\n\t    fmt++;\n\t    switch (*fmt) {\n\n\t    case 'b':\n\t\tND_TCHECK(buf[0]);\n\t\tstringlen = buf[0];\n\t\tND_PRINT((ndo, \"%u\", stringlen));\n\t\tbuf += 1;\n\t\tbreak;\n\n\t    case 'd':\n\t\tND_TCHECK2(buf[0], 2);\n\t\tstringlen = reverse ? EXTRACT_16BITS(buf) :\n\t\t\t\t      EXTRACT_LE_16BITS(buf);\n\t\tND_PRINT((ndo, \"%u\", stringlen));\n\t\tbuf += 2;\n\t\tbreak;\n\n\t    case 'D':\n\t\tND_TCHECK2(buf[0], 4);\n\t\tstringlen = reverse ? EXTRACT_32BITS(buf) :\n\t\t\t\t      EXTRACT_LE_32BITS(buf);\n\t\tND_PRINT((ndo, \"%u\", stringlen));\n\t\tbuf += 4;\n\t\tbreak;\n\t    }\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'S':\n\tcase 'R':\t/* like 'S', but always ASCII */\n\t  {\n\t    /*XXX unistr() */\n\t    const char *s;\n\t    uint32_t len;\n\n\t    len = 0;\n\t    s = unistr(ndo, buf, &len, (*fmt == 'R') ? 0 : unicodestr);\n\t    if (s == NULL)\n\t\tgoto trunc;\n\t    ND_PRINT((ndo, \"%s\", s));\n\t    buf += len;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'Z':\n\tcase 'Y':\t/* like 'Z', but always ASCII */\n\t  {\n\t    const char *s;\n\t    uint32_t len;\n\n\t    ND_TCHECK(*buf);\n\t    if (*buf != 4 && *buf != 2) {\n\t\tND_PRINT((ndo, \"Error! ASCIIZ buffer of type %u\", *buf));\n\t\treturn maxbuf;\t/* give up */\n\t    }\n\t    len = 0;\n\t    s = unistr(ndo, buf + 1, &len, (*fmt == 'Y') ? 0 : unicodestr);\n\t    if (s == NULL)\n\t\tgoto trunc;\n\t    ND_PRINT((ndo, \"%s\", s));\n\t    buf += len + 1;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 's':\n\t  {\n\t    int l = atoi(fmt + 1);\n\t    ND_TCHECK2(*buf, l);\n\t    ND_PRINT((ndo, \"%-*.*s\", l, l, buf));\n\t    buf += l;\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'c':\n\t  {\n\t    ND_TCHECK2(*buf, stringlen);\n\t    ND_PRINT((ndo, \"%-*.*s\", (int)stringlen, (int)stringlen, buf));\n\t    buf += stringlen;\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'C':\n\t  {\n\t    const char *s;\n\t    s = unistr(ndo, buf, &stringlen, unicodestr);\n\t    if (s == NULL)\n\t\tgoto trunc;\n\t    ND_PRINT((ndo, \"%s\", s));\n\t    buf += stringlen;\n\t    fmt++;\n\t    break;\n\t  }\n\tcase 'h':\n\t  {\n\t    int l = atoi(fmt + 1);\n\t    ND_TCHECK2(*buf, l);\n\t    while (l--)\n\t\tND_PRINT((ndo, \"%02x\", *buf++));\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'n':\n\t  {\n\t    int t = atoi(fmt+1);\n\t    char nbuf[255];\n\t    int name_type;\n\t    int len;\n\n\t    switch (t) {\n\t    case 1:\n\t\tname_type = name_extract(ndo, startbuf, PTR_DIFF(buf, startbuf),\n\t\t    maxbuf, nbuf);\n\t\tif (name_type < 0)\n\t\t    goto trunc;\n\t\tlen = name_len(ndo, buf, maxbuf);\n\t\tif (len < 0)\n\t\t    goto trunc;\n\t\tbuf += len;\n\t\tND_PRINT((ndo, \"%-15.15s NameType=0x%02X (%s)\", nbuf, name_type,\n\t\t    name_type_str(name_type)));\n\t\tbreak;\n\t    case 2:\n\t\tND_TCHECK(buf[15]);\n\t\tname_type = buf[15];\n\t\tND_PRINT((ndo, \"%-15.15s NameType=0x%02X (%s)\", buf, name_type,\n\t\t    name_type_str(name_type)));\n\t\tbuf += 16;\n\t\tbreak;\n\t    }\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tcase 'T':\n\t  {\n\t    time_t t;\n\t    struct tm *lt;\n\t    const char *tstring;\n\t    uint32_t x;\n\n\t    switch (atoi(fmt + 1)) {\n\t    case 1:\n\t\tND_TCHECK2(buf[0], 4);\n\t\tx = EXTRACT_LE_32BITS(buf);\n\t\tif (x == 0 || x == 0xFFFFFFFF)\n\t\t    t = 0;\n\t\telse\n\t\t    t = make_unix_date(buf);\n\t\tbuf += 4;\n\t\tbreak;\n\t    case 2:\n\t\tND_TCHECK2(buf[0], 4);\n\t\tx = EXTRACT_LE_32BITS(buf);\n\t\tif (x == 0 || x == 0xFFFFFFFF)\n\t\t    t = 0;\n\t\telse\n\t\t    t = make_unix_date2(buf);\n\t\tbuf += 4;\n\t\tbreak;\n\t    case 3:\n\t\tND_TCHECK2(buf[0], 8);\n\t\tt = interpret_long_date(buf);\n\t\tbuf += 8;\n\t\tbreak;\n\t    default:\n\t\tt = 0;\n\t\tbreak;\n\t    }\n\t    if (t != 0) {\n\t\tlt = localtime(&t);\n\t\tif (lt != NULL)\n\t\t    tstring = asctime(lt);\n\t\telse\n\t\t    tstring = \"(Can't convert time)\\n\";\n\t    } else\n\t\ttstring = \"NULL\\n\";\n\t    ND_PRINT((ndo, \"%s\", tstring));\n\t    fmt++;\n\t    while (isdigit((unsigned char)*fmt))\n\t\tfmt++;\n\t    break;\n\t  }\n\tdefault:\n\t    ND_PRINT((ndo, \"%c\", *fmt));\n\t    fmt++;\n\t    break;\n\t}\n    }\n\n    if (buf >= maxbuf && *fmt)\n\tND_PRINT((ndo, \"END OF BUFFER\\n\"));\n\n    return(buf);\n\ntrunc:\n    ND_PRINT((ndo, \"\\n\"));\n    ND_PRINT((ndo, \"WARNING: Short packet. Try increasing the snap length\\n\"));\n    return(NULL);\n}\n\nconst u_char *\nsmb_fdata(netdissect_options *ndo,\n          const u_char *buf, const char *fmt, const u_char *maxbuf,\n          int unicodestr)\n{\n    static int depth = 0;\n    char s[128];\n    char *p;\n\n    while (*fmt) {\n\tswitch (*fmt) {\n\tcase '*':\n\t    fmt++;\n\t    while (buf < maxbuf) {\n\t\tconst u_char *buf2;\n\t\tdepth++;\n\t\t/* Not sure how this relates with the protocol specification,\n\t\t * but in order to avoid stack exhaustion recurse at most that\n\t\t * many levels.\n\t\t */\n\t\tif (depth == 10)\n\t\t\tND_PRINT((ndo, \"(too many nested levels, not recursing)\"));\n\t\telse\n\t\t\tbuf2 = smb_fdata(ndo, buf, fmt, maxbuf, unicodestr);\n\t\tdepth--;\n\t\tif (buf2 == NULL)\n\t\t    return(NULL);\n\t\tif (buf2 == buf)\n\t\t    return(buf);\n\t\tbuf = buf2;\n\t    }\n\t    return(buf);\n\n\tcase '|':\n\t    fmt++;\n\t    if (buf >= maxbuf)\n\t\treturn(buf);\n\t    break;\n\n\tcase '%':\n\t    fmt++;\n\t    buf = maxbuf;\n\t    break;\n\n\tcase '#':\n\t    fmt++;\n\t    return(buf);\n\t    break;\n\n\tcase '[':\n\t    fmt++;\n\t    if (buf >= maxbuf)\n\t\treturn(buf);\n\t    memset(s, 0, sizeof(s));\n\t    p = strchr(fmt, ']');\n\t    if ((size_t)(p - fmt + 1) > sizeof(s)) {\n\t\t/* overrun */\n\t\treturn(buf);\n\t    }\n\t    strncpy(s, fmt, p - fmt);\n\t    s[p - fmt] = '\\0';\n\t    fmt = p + 1;\n\t    buf = smb_fdata1(ndo, buf, s, maxbuf, unicodestr);\n\t    if (buf == NULL)\n\t\treturn(NULL);\n\t    break;\n\n\tdefault:\n\t    ND_PRINT((ndo, \"%c\", *fmt));\n\t    fmt++;\n\t    break;\n\t}\n    }\n    if (!depth && buf < maxbuf) {\n\tsize_t len = PTR_DIFF(maxbuf, buf);\n\tND_PRINT((ndo, \"Data: (%lu bytes)\\n\", (unsigned long)len));\n\tsmb_print_data(ndo, buf, len);\n\treturn(buf + len);\n    }\n    return(buf);\n}\n\ntypedef struct {\n    const char *name;\n    int code;\n    const char *message;\n} err_code_struct;\n\n/* DOS Error Messages */\nstatic const err_code_struct dos_msgs[] = {\n    { \"ERRbadfunc\", 1, \"Invalid function.\" },\n    { \"ERRbadfile\", 2, \"File not found.\" },\n    { \"ERRbadpath\", 3, \"Directory invalid.\" },\n    { \"ERRnofids\", 4, \"No file descriptors available\" },\n    { \"ERRnoaccess\", 5, \"Access denied.\" },\n    { \"ERRbadfid\", 6, \"Invalid file handle.\" },\n    { \"ERRbadmcb\", 7, \"Memory control blocks destroyed.\" },\n    { \"ERRnomem\", 8, \"Insufficient server memory to perform the requested function.\" },\n    { \"ERRbadmem\", 9, \"Invalid memory block address.\" },\n    { \"ERRbadenv\", 10, \"Invalid environment.\" },\n    { \"ERRbadformat\", 11, \"Invalid format.\" },\n    { \"ERRbadaccess\", 12, \"Invalid open mode.\" },\n    { \"ERRbaddata\", 13, \"Invalid data.\" },\n    { \"ERR\", 14, \"reserved.\" },\n    { \"ERRbaddrive\", 15, \"Invalid drive specified.\" },\n    { \"ERRremcd\", 16, \"A Delete Directory request attempted to remove the server's current directory.\" },\n    { \"ERRdiffdevice\", 17, \"Not same device.\" },\n    { \"ERRnofiles\", 18, \"A File Search command can find no more files matching the specified criteria.\" },\n    { \"ERRbadshare\", 32, \"The sharing mode specified for an Open conflicts with existing FIDs on the file.\" },\n    { \"ERRlock\", 33, \"A Lock request conflicted with an existing lock or specified an invalid mode, or an Unlock requested attempted to remove a lock held by another process.\" },\n    { \"ERRfilexists\", 80, \"The file named in a Create Directory, Make New File or Link request already exists.\" },\n    { \"ERRbadpipe\", 230, \"Pipe invalid.\" },\n    { \"ERRpipebusy\", 231, \"All instances of the requested pipe are busy.\" },\n    { \"ERRpipeclosing\", 232, \"Pipe close in progress.\" },\n    { \"ERRnotconnected\", 233, \"No process on other end of pipe.\" },\n    { \"ERRmoredata\", 234, \"There is more data to be returned.\" },\n    { NULL, -1, NULL }\n };\n\n/* Server Error Messages */\nstatic const err_code_struct server_msgs[] = {\n    { \"ERRerror\", 1, \"Non-specific error code.\" },\n    { \"ERRbadpw\", 2, \"Bad password - name/password pair in a Tree Connect or Session Setup are invalid.\" },\n    { \"ERRbadtype\", 3, \"reserved.\" },\n    { \"ERRaccess\", 4, \"The requester does not have the necessary access rights within the specified context for the requested function. The context is defined by the TID or the UID.\" },\n    { \"ERRinvnid\", 5, \"The tree ID (TID) specified in a command was invalid.\" },\n    { \"ERRinvnetname\", 6, \"Invalid network name in tree connect.\" },\n    { \"ERRinvdevice\", 7, \"Invalid device - printer request made to non-printer connection or non-printer request made to printer connection.\" },\n    { \"ERRqfull\", 49, \"Print queue full (files) -- returned by open print file.\" },\n    { \"ERRqtoobig\", 50, \"Print queue full -- no space.\" },\n    { \"ERRqeof\", 51, \"EOF on print queue dump.\" },\n    { \"ERRinvpfid\", 52, \"Invalid print file FID.\" },\n    { \"ERRsmbcmd\", 64, \"The server did not recognize the command received.\" },\n    { \"ERRsrverror\", 65, \"The server encountered an internal error, e.g., system file unavailable.\" },\n    { \"ERRfilespecs\", 67, \"The file handle (FID) and pathname parameters contained an invalid combination of values.\" },\n    { \"ERRreserved\", 68, \"reserved.\" },\n    { \"ERRbadpermits\", 69, \"The access permissions specified for a file or directory are not a valid combination.  The server cannot set the requested attribute.\" },\n    { \"ERRreserved\", 70, \"reserved.\" },\n    { \"ERRsetattrmode\", 71, \"The attribute mode in the Set File Attribute request is invalid.\" },\n    { \"ERRpaused\", 81, \"Server is paused.\" },\n    { \"ERRmsgoff\", 82, \"Not receiving messages.\" },\n    { \"ERRnoroom\", 83, \"No room to buffer message.\" },\n    { \"ERRrmuns\", 87, \"Too many remote user names.\" },\n    { \"ERRtimeout\", 88, \"Operation timed out.\" },\n    { \"ERRnoresource\", 89, \"No resources currently available for request.\" },\n    { \"ERRtoomanyuids\", 90, \"Too many UIDs active on this session.\" },\n    { \"ERRbaduid\", 91, \"The UID is not known as a valid ID on this session.\" },\n    { \"ERRusempx\", 250, \"Temp unable to support Raw, use MPX mode.\" },\n    { \"ERRusestd\", 251, \"Temp unable to support Raw, use standard read/write.\" },\n    { \"ERRcontmpx\", 252, \"Continue in MPX mode.\" },\n    { \"ERRreserved\", 253, \"reserved.\" },\n    { \"ERRreserved\", 254, \"reserved.\" },\n    { \"ERRnosupport\", 0xFFFF, \"Function not supported.\" },\n    { NULL, -1, NULL }\n};\n\n/* Hard Error Messages */\nstatic const err_code_struct hard_msgs[] = {\n    { \"ERRnowrite\", 19, \"Attempt to write on write-protected diskette.\" },\n    { \"ERRbadunit\", 20, \"Unknown unit.\" },\n    { \"ERRnotready\", 21, \"Drive not ready.\" },\n    { \"ERRbadcmd\", 22, \"Unknown command.\" },\n    { \"ERRdata\", 23, \"Data error (CRC).\" },\n    { \"ERRbadreq\", 24, \"Bad request structure length.\" },\n    { \"ERRseek\", 25 , \"Seek error.\" },\n    { \"ERRbadmedia\", 26, \"Unknown media type.\" },\n    { \"ERRbadsector\", 27, \"Sector not found.\" },\n    { \"ERRnopaper\", 28, \"Printer out of paper.\" },\n    { \"ERRwrite\", 29, \"Write fault.\" },\n    { \"ERRread\", 30, \"Read fault.\" },\n    { \"ERRgeneral\", 31, \"General failure.\" },\n    { \"ERRbadshare\", 32, \"A open conflicts with an existing open.\" },\n    { \"ERRlock\", 33, \"A Lock request conflicted with an existing lock or specified an invalid mode, or an Unlock requested attempted to remove a lock held by another process.\" },\n    { \"ERRwrongdisk\", 34, \"The wrong disk was found in a drive.\" },\n    { \"ERRFCBUnavail\", 35, \"No FCBs are available to process request.\" },\n    { \"ERRsharebufexc\", 36, \"A sharing buffer has been exceeded.\" },\n    { NULL, -1, NULL }\n};\n\nstatic const struct {\n    int code;\n    const char *class;\n    const err_code_struct *err_msgs;\n} err_classes[] = {\n    { 0, \"SUCCESS\", NULL },\n    { 0x01, \"ERRDOS\", dos_msgs },\n    { 0x02, \"ERRSRV\", server_msgs },\n    { 0x03, \"ERRHRD\", hard_msgs },\n    { 0x04, \"ERRXOS\", NULL },\n    { 0xE1, \"ERRRMX1\", NULL },\n    { 0xE2, \"ERRRMX2\", NULL },\n    { 0xE3, \"ERRRMX3\", NULL },\n    { 0xFF, \"ERRCMD\", NULL },\n    { -1, NULL, NULL }\n};\n\n/*\n * return a SMB error string from a SMB buffer\n */\nchar *\nsmb_errstr(int class, int num)\n{\n    static char ret[128];\n    int i, j;\n\n    ret[0] = 0;\n\n    for (i = 0; err_classes[i].class; i++)\n\tif (err_classes[i].code == class) {\n\t    if (err_classes[i].err_msgs) {\n\t\tconst err_code_struct *err = err_classes[i].err_msgs;\n\t\tfor (j = 0; err[j].name; j++)\n\t\t    if (num == err[j].code) {\n\t\t\tsnprintf(ret, sizeof(ret), \"%s - %s (%s)\",\n\t\t\t    err_classes[i].class, err[j].name, err[j].message);\n\t\t\treturn ret;\n\t\t    }\n\t    }\n\n\t    snprintf(ret, sizeof(ret), \"%s - %d\", err_classes[i].class, num);\n\t    return ret;\n\t}\n\n    snprintf(ret, sizeof(ret), \"ERROR: Unknown error (%d,%d)\", class, num);\n    return(ret);\n}\n\ntypedef struct {\n    uint32_t code;\n    const char *name;\n} nt_err_code_struct;\n\n/*\n * NT Error codes\n */\nstatic const nt_err_code_struct nt_errors[] = {\n  { 0x00000000, \"STATUS_SUCCESS\" },\n  { 0x00000000, \"STATUS_WAIT_0\" },\n  { 0x00000001, \"STATUS_WAIT_1\" },\n  { 0x00000002, \"STATUS_WAIT_2\" },\n  { 0x00000003, \"STATUS_WAIT_3\" },\n  { 0x0000003F, \"STATUS_WAIT_63\" },\n  { 0x00000080, \"STATUS_ABANDONED\" },\n  { 0x00000080, \"STATUS_ABANDONED_WAIT_0\" },\n  { 0x000000BF, \"STATUS_ABANDONED_WAIT_63\" },\n  { 0x000000C0, \"STATUS_USER_APC\" },\n  { 0x00000100, \"STATUS_KERNEL_APC\" },\n  { 0x00000101, \"STATUS_ALERTED\" },\n  { 0x00000102, \"STATUS_TIMEOUT\" },\n  { 0x00000103, \"STATUS_PENDING\" },\n  { 0x00000104, \"STATUS_REPARSE\" },\n  { 0x00000105, \"STATUS_MORE_ENTRIES\" },\n  { 0x00000106, \"STATUS_NOT_ALL_ASSIGNED\" },\n  { 0x00000107, \"STATUS_SOME_NOT_MAPPED\" },\n  { 0x00000108, \"STATUS_OPLOCK_BREAK_IN_PROGRESS\" },\n  { 0x00000109, \"STATUS_VOLUME_MOUNTED\" },\n  { 0x0000010A, \"STATUS_RXACT_COMMITTED\" },\n  { 0x0000010B, \"STATUS_NOTIFY_CLEANUP\" },\n  { 0x0000010C, \"STATUS_NOTIFY_ENUM_DIR\" },\n  { 0x0000010D, \"STATUS_NO_QUOTAS_FOR_ACCOUNT\" },\n  { 0x0000010E, \"STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED\" },\n  { 0x00000110, \"STATUS_PAGE_FAULT_TRANSITION\" },\n  { 0x00000111, \"STATUS_PAGE_FAULT_DEMAND_ZERO\" },\n  { 0x00000112, \"STATUS_PAGE_FAULT_COPY_ON_WRITE\" },\n  { 0x00000113, \"STATUS_PAGE_FAULT_GUARD_PAGE\" },\n  { 0x00000114, \"STATUS_PAGE_FAULT_PAGING_FILE\" },\n  { 0x00000115, \"STATUS_CACHE_PAGE_LOCKED\" },\n  { 0x00000116, \"STATUS_CRASH_DUMP\" },\n  { 0x00000117, \"STATUS_BUFFER_ALL_ZEROS\" },\n  { 0x00000118, \"STATUS_REPARSE_OBJECT\" },\n  { 0x0000045C, \"STATUS_NO_SHUTDOWN_IN_PROGRESS\" },\n  { 0x40000000, \"STATUS_OBJECT_NAME_EXISTS\" },\n  { 0x40000001, \"STATUS_THREAD_WAS_SUSPENDED\" },\n  { 0x40000002, \"STATUS_WORKING_SET_LIMIT_RANGE\" },\n  { 0x40000003, \"STATUS_IMAGE_NOT_AT_BASE\" },\n  { 0x40000004, \"STATUS_RXACT_STATE_CREATED\" },\n  { 0x40000005, \"STATUS_SEGMENT_NOTIFICATION\" },\n  { 0x40000006, \"STATUS_LOCAL_USER_SESSION_KEY\" },\n  { 0x40000007, \"STATUS_BAD_CURRENT_DIRECTORY\" },\n  { 0x40000008, \"STATUS_SERIAL_MORE_WRITES\" },\n  { 0x40000009, \"STATUS_REGISTRY_RECOVERED\" },\n  { 0x4000000A, \"STATUS_FT_READ_RECOVERY_FROM_BACKUP\" },\n  { 0x4000000B, \"STATUS_FT_WRITE_RECOVERY\" },\n  { 0x4000000C, \"STATUS_SERIAL_COUNTER_TIMEOUT\" },\n  { 0x4000000D, \"STATUS_NULL_LM_PASSWORD\" },\n  { 0x4000000E, \"STATUS_IMAGE_MACHINE_TYPE_MISMATCH\" },\n  { 0x4000000F, \"STATUS_RECEIVE_PARTIAL\" },\n  { 0x40000010, \"STATUS_RECEIVE_EXPEDITED\" },\n  { 0x40000011, \"STATUS_RECEIVE_PARTIAL_EXPEDITED\" },\n  { 0x40000012, \"STATUS_EVENT_DONE\" },\n  { 0x40000013, \"STATUS_EVENT_PENDING\" },\n  { 0x40000014, \"STATUS_CHECKING_FILE_SYSTEM\" },\n  { 0x40000015, \"STATUS_FATAL_APP_EXIT\" },\n  { 0x40000016, \"STATUS_PREDEFINED_HANDLE\" },\n  { 0x40000017, \"STATUS_WAS_UNLOCKED\" },\n  { 0x40000018, \"STATUS_SERVICE_NOTIFICATION\" },\n  { 0x40000019, \"STATUS_WAS_LOCKED\" },\n  { 0x4000001A, \"STATUS_LOG_HARD_ERROR\" },\n  { 0x4000001B, \"STATUS_ALREADY_WIN32\" },\n  { 0x4000001C, \"STATUS_WX86_UNSIMULATE\" },\n  { 0x4000001D, \"STATUS_WX86_CONTINUE\" },\n  { 0x4000001E, \"STATUS_WX86_SINGLE_STEP\" },\n  { 0x4000001F, \"STATUS_WX86_BREAKPOINT\" },\n  { 0x40000020, \"STATUS_WX86_EXCEPTION_CONTINUE\" },\n  { 0x40000021, \"STATUS_WX86_EXCEPTION_LASTCHANCE\" },\n  { 0x40000022, \"STATUS_WX86_EXCEPTION_CHAIN\" },\n  { 0x40000023, \"STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE\" },\n  { 0x40000024, \"STATUS_NO_YIELD_PERFORMED\" },\n  { 0x40000025, \"STATUS_TIMER_RESUME_IGNORED\" },\n  { 0x80000001, \"STATUS_GUARD_PAGE_VIOLATION\" },\n  { 0x80000002, \"STATUS_DATATYPE_MISALIGNMENT\" },\n  { 0x80000003, \"STATUS_BREAKPOINT\" },\n  { 0x80000004, \"STATUS_SINGLE_STEP\" },\n  { 0x80000005, \"STATUS_BUFFER_OVERFLOW\" },\n  { 0x80000006, \"STATUS_NO_MORE_FILES\" },\n  { 0x80000007, \"STATUS_WAKE_SYSTEM_DEBUGGER\" },\n  { 0x8000000A, \"STATUS_HANDLES_CLOSED\" },\n  { 0x8000000B, \"STATUS_NO_INHERITANCE\" },\n  { 0x8000000C, \"STATUS_GUID_SUBSTITUTION_MADE\" },\n  { 0x8000000D, \"STATUS_PARTIAL_COPY\" },\n  { 0x8000000E, \"STATUS_DEVICE_PAPER_EMPTY\" },\n  { 0x8000000F, \"STATUS_DEVICE_POWERED_OFF\" },\n  { 0x80000010, \"STATUS_DEVICE_OFF_LINE\" },\n  { 0x80000011, \"STATUS_DEVICE_BUSY\" },\n  { 0x80000012, \"STATUS_NO_MORE_EAS\" },\n  { 0x80000013, \"STATUS_INVALID_EA_NAME\" },\n  { 0x80000014, \"STATUS_EA_LIST_INCONSISTENT\" },\n  { 0x80000015, \"STATUS_INVALID_EA_FLAG\" },\n  { 0x80000016, \"STATUS_VERIFY_REQUIRED\" },\n  { 0x80000017, \"STATUS_EXTRANEOUS_INFORMATION\" },\n  { 0x80000018, \"STATUS_RXACT_COMMIT_NECESSARY\" },\n  { 0x8000001A, \"STATUS_NO_MORE_ENTRIES\" },\n  { 0x8000001B, \"STATUS_FILEMARK_DETECTED\" },\n  { 0x8000001C, \"STATUS_MEDIA_CHANGED\" },\n  { 0x8000001D, \"STATUS_BUS_RESET\" },\n  { 0x8000001E, \"STATUS_END_OF_MEDIA\" },\n  { 0x8000001F, \"STATUS_BEGINNING_OF_MEDIA\" },\n  { 0x80000020, \"STATUS_MEDIA_CHECK\" },\n  { 0x80000021, \"STATUS_SETMARK_DETECTED\" },\n  { 0x80000022, \"STATUS_NO_DATA_DETECTED\" },\n  { 0x80000023, \"STATUS_REDIRECTOR_HAS_OPEN_HANDLES\" },\n  { 0x80000024, \"STATUS_SERVER_HAS_OPEN_HANDLES\" },\n  { 0x80000025, \"STATUS_ALREADY_DISCONNECTED\" },\n  { 0x80000026, \"STATUS_LONGJUMP\" },\n  { 0x80040111, \"MAPI_E_LOGON_FAILED\" },\n  { 0x80090300, \"SEC_E_INSUFFICIENT_MEMORY\" },\n  { 0x80090301, \"SEC_E_INVALID_HANDLE\" },\n  { 0x80090302, \"SEC_E_UNSUPPORTED_FUNCTION\" },\n  { 0x8009030B, \"SEC_E_NO_IMPERSONATION\" },\n  { 0x8009030D, \"SEC_E_UNKNOWN_CREDENTIALS\" },\n  { 0x8009030E, \"SEC_E_NO_CREDENTIALS\" },\n  { 0x8009030F, \"SEC_E_MESSAGE_ALTERED\" },\n  { 0x80090310, \"SEC_E_OUT_OF_SEQUENCE\" },\n  { 0x80090311, \"SEC_E_NO_AUTHENTICATING_AUTHORITY\" },\n  { 0xC0000001, \"STATUS_UNSUCCESSFUL\" },\n  { 0xC0000002, \"STATUS_NOT_IMPLEMENTED\" },\n  { 0xC0000003, \"STATUS_INVALID_INFO_CLASS\" },\n  { 0xC0000004, \"STATUS_INFO_LENGTH_MISMATCH\" },\n  { 0xC0000005, \"STATUS_ACCESS_VIOLATION\" },\n  { 0xC0000006, \"STATUS_IN_PAGE_ERROR\" },\n  { 0xC0000007, \"STATUS_PAGEFILE_QUOTA\" },\n  { 0xC0000008, \"STATUS_INVALID_HANDLE\" },\n  { 0xC0000009, \"STATUS_BAD_INITIAL_STACK\" },\n  { 0xC000000A, \"STATUS_BAD_INITIAL_PC\" },\n  { 0xC000000B, \"STATUS_INVALID_CID\" },\n  { 0xC000000C, \"STATUS_TIMER_NOT_CANCELED\" },\n  { 0xC000000D, \"STATUS_INVALID_PARAMETER\" },\n  { 0xC000000E, \"STATUS_NO_SUCH_DEVICE\" },\n  { 0xC000000F, \"STATUS_NO_SUCH_FILE\" },\n  { 0xC0000010, \"STATUS_INVALID_DEVICE_REQUEST\" },\n  { 0xC0000011, \"STATUS_END_OF_FILE\" },\n  { 0xC0000012, \"STATUS_WRONG_VOLUME\" },\n  { 0xC0000013, \"STATUS_NO_MEDIA_IN_DEVICE\" },\n  { 0xC0000014, \"STATUS_UNRECOGNIZED_MEDIA\" },\n  { 0xC0000015, \"STATUS_NONEXISTENT_SECTOR\" },\n  { 0xC0000016, \"STATUS_MORE_PROCESSING_REQUIRED\" },\n  { 0xC0000017, \"STATUS_NO_MEMORY\" },\n  { 0xC0000018, \"STATUS_CONFLICTING_ADDRESSES\" },\n  { 0xC0000019, \"STATUS_NOT_MAPPED_VIEW\" },\n  { 0xC000001A, \"STATUS_UNABLE_TO_FREE_VM\" },\n  { 0xC000001B, \"STATUS_UNABLE_TO_DELETE_SECTION\" },\n  { 0xC000001C, \"STATUS_INVALID_SYSTEM_SERVICE\" },\n  { 0xC000001D, \"STATUS_ILLEGAL_INSTRUCTION\" },\n  { 0xC000001E, \"STATUS_INVALID_LOCK_SEQUENCE\" },\n  { 0xC000001F, \"STATUS_INVALID_VIEW_SIZE\" },\n  { 0xC0000020, \"STATUS_INVALID_FILE_FOR_SECTION\" },\n  { 0xC0000021, \"STATUS_ALREADY_COMMITTED\" },\n  { 0xC0000022, \"STATUS_ACCESS_DENIED\" },\n  { 0xC0000023, \"STATUS_BUFFER_TOO_SMALL\" },\n  { 0xC0000024, \"STATUS_OBJECT_TYPE_MISMATCH\" },\n  { 0xC0000025, \"STATUS_NONCONTINUABLE_EXCEPTION\" },\n  { 0xC0000026, \"STATUS_INVALID_DISPOSITION\" },\n  { 0xC0000027, \"STATUS_UNWIND\" },\n  { 0xC0000028, \"STATUS_BAD_STACK\" },\n  { 0xC0000029, \"STATUS_INVALID_UNWIND_TARGET\" },\n  { 0xC000002A, \"STATUS_NOT_LOCKED\" },\n  { 0xC000002B, \"STATUS_PARITY_ERROR\" },\n  { 0xC000002C, \"STATUS_UNABLE_TO_DECOMMIT_VM\" },\n  { 0xC000002D, \"STATUS_NOT_COMMITTED\" },\n  { 0xC000002E, \"STATUS_INVALID_PORT_ATTRIBUTES\" },\n  { 0xC000002F, \"STATUS_PORT_MESSAGE_TOO_LONG\" },\n  { 0xC0000030, \"STATUS_INVALID_PARAMETER_MIX\" },\n  { 0xC0000031, \"STATUS_INVALID_QUOTA_LOWER\" },\n  { 0xC0000032, \"STATUS_DISK_CORRUPT_ERROR\" },\n  { 0xC0000033, \"STATUS_OBJECT_NAME_INVALID\" },\n  { 0xC0000034, \"STATUS_OBJECT_NAME_NOT_FOUND\" },\n  { 0xC0000035, \"STATUS_OBJECT_NAME_COLLISION\" },\n  { 0xC0000037, \"STATUS_PORT_DISCONNECTED\" },\n  { 0xC0000038, \"STATUS_DEVICE_ALREADY_ATTACHED\" },\n  { 0xC0000039, \"STATUS_OBJECT_PATH_INVALID\" },\n  { 0xC000003A, \"STATUS_OBJECT_PATH_NOT_FOUND\" },\n  { 0xC000003B, \"STATUS_OBJECT_PATH_SYNTAX_BAD\" },\n  { 0xC000003C, \"STATUS_DATA_OVERRUN\" },\n  { 0xC000003D, \"STATUS_DATA_LATE_ERROR\" },\n  { 0xC000003E, \"STATUS_DATA_ERROR\" },\n  { 0xC000003F, \"STATUS_CRC_ERROR\" },\n  { 0xC0000040, \"STATUS_SECTION_TOO_BIG\" },\n  { 0xC0000041, \"STATUS_PORT_CONNECTION_REFUSED\" },\n  { 0xC0000042, \"STATUS_INVALID_PORT_HANDLE\" },\n  { 0xC0000043, \"STATUS_SHARING_VIOLATION\" },\n  { 0xC0000044, \"STATUS_QUOTA_EXCEEDED\" },\n  { 0xC0000045, \"STATUS_INVALID_PAGE_PROTECTION\" },\n  { 0xC0000046, \"STATUS_MUTANT_NOT_OWNED\" },\n  { 0xC0000047, \"STATUS_SEMAPHORE_LIMIT_EXCEEDED\" },\n  { 0xC0000048, \"STATUS_PORT_ALREADY_SET\" },\n  { 0xC0000049, \"STATUS_SECTION_NOT_IMAGE\" },\n  { 0xC000004A, \"STATUS_SUSPEND_COUNT_EXCEEDED\" },\n  { 0xC000004B, \"STATUS_THREAD_IS_TERMINATING\" },\n  { 0xC000004C, \"STATUS_BAD_WORKING_SET_LIMIT\" },\n  { 0xC000004D, \"STATUS_INCOMPATIBLE_FILE_MAP\" },\n  { 0xC000004E, \"STATUS_SECTION_PROTECTION\" },\n  { 0xC000004F, \"STATUS_EAS_NOT_SUPPORTED\" },\n  { 0xC0000050, \"STATUS_EA_TOO_LARGE\" },\n  { 0xC0000051, \"STATUS_NONEXISTENT_EA_ENTRY\" },\n  { 0xC0000052, \"STATUS_NO_EAS_ON_FILE\" },\n  { 0xC0000053, \"STATUS_EA_CORRUPT_ERROR\" },\n  { 0xC0000054, \"STATUS_FILE_LOCK_CONFLICT\" },\n  { 0xC0000055, \"STATUS_LOCK_NOT_GRANTED\" },\n  { 0xC0000056, \"STATUS_DELETE_PENDING\" },\n  { 0xC0000057, \"STATUS_CTL_FILE_NOT_SUPPORTED\" },\n  { 0xC0000058, \"STATUS_UNKNOWN_REVISION\" },\n  { 0xC0000059, \"STATUS_REVISION_MISMATCH\" },\n  { 0xC000005A, \"STATUS_INVALID_OWNER\" },\n  { 0xC000005B, \"STATUS_INVALID_PRIMARY_GROUP\" },\n  { 0xC000005C, \"STATUS_NO_IMPERSONATION_TOKEN\" },\n  { 0xC000005D, \"STATUS_CANT_DISABLE_MANDATORY\" },\n  { 0xC000005E, \"STATUS_NO_LOGON_SERVERS\" },\n  { 0xC000005F, \"STATUS_NO_SUCH_LOGON_SESSION\" },\n  { 0xC0000060, \"STATUS_NO_SUCH_PRIVILEGE\" },\n  { 0xC0000061, \"STATUS_PRIVILEGE_NOT_HELD\" },\n  { 0xC0000062, \"STATUS_INVALID_ACCOUNT_NAME\" },\n  { 0xC0000063, \"STATUS_USER_EXISTS\" },\n  { 0xC0000064, \"STATUS_NO_SUCH_USER\" },\n  { 0xC0000065, \"STATUS_GROUP_EXISTS\" },\n  { 0xC0000066, \"STATUS_NO_SUCH_GROUP\" },\n  { 0xC0000067, \"STATUS_MEMBER_IN_GROUP\" },\n  { 0xC0000068, \"STATUS_MEMBER_NOT_IN_GROUP\" },\n  { 0xC0000069, \"STATUS_LAST_ADMIN\" },\n  { 0xC000006A, \"STATUS_WRONG_PASSWORD\" },\n  { 0xC000006B, \"STATUS_ILL_FORMED_PASSWORD\" },\n  { 0xC000006C, \"STATUS_PASSWORD_RESTRICTION\" },\n  { 0xC000006D, \"STATUS_LOGON_FAILURE\" },\n  { 0xC000006E, \"STATUS_ACCOUNT_RESTRICTION\" },\n  { 0xC000006F, \"STATUS_INVALID_LOGON_HOURS\" },\n  { 0xC0000070, \"STATUS_INVALID_WORKSTATION\" },\n  { 0xC0000071, \"STATUS_PASSWORD_EXPIRED\" },\n  { 0xC0000072, \"STATUS_ACCOUNT_DISABLED\" },\n  { 0xC0000073, \"STATUS_NONE_MAPPED\" },\n  { 0xC0000074, \"STATUS_TOO_MANY_LUIDS_REQUESTED\" },\n  { 0xC0000075, \"STATUS_LUIDS_EXHAUSTED\" },\n  { 0xC0000076, \"STATUS_INVALID_SUB_AUTHORITY\" },\n  { 0xC0000077, \"STATUS_INVALID_ACL\" },\n  { 0xC0000078, \"STATUS_INVALID_SID\" },\n  { 0xC0000079, \"STATUS_INVALID_SECURITY_DESCR\" },\n  { 0xC000007A, \"STATUS_PROCEDURE_NOT_FOUND\" },\n  { 0xC000007B, \"STATUS_INVALID_IMAGE_FORMAT\" },\n  { 0xC000007C, \"STATUS_NO_TOKEN\" },\n  { 0xC000007D, \"STATUS_BAD_INHERITANCE_ACL\" },\n  { 0xC000007E, \"STATUS_RANGE_NOT_LOCKED\" },\n  { 0xC000007F, \"STATUS_DISK_FULL\" },\n  { 0xC0000080, \"STATUS_SERVER_DISABLED\" },\n  { 0xC0000081, \"STATUS_SERVER_NOT_DISABLED\" },\n  { 0xC0000082, \"STATUS_TOO_MANY_GUIDS_REQUESTED\" },\n  { 0xC0000083, \"STATUS_GUIDS_EXHAUSTED\" },\n  { 0xC0000084, \"STATUS_INVALID_ID_AUTHORITY\" },\n  { 0xC0000085, \"STATUS_AGENTS_EXHAUSTED\" },\n  { 0xC0000086, \"STATUS_INVALID_VOLUME_LABEL\" },\n  { 0xC0000087, \"STATUS_SECTION_NOT_EXTENDED\" },\n  { 0xC0000088, \"STATUS_NOT_MAPPED_DATA\" },\n  { 0xC0000089, \"STATUS_RESOURCE_DATA_NOT_FOUND\" },\n  { 0xC000008A, \"STATUS_RESOURCE_TYPE_NOT_FOUND\" },\n  { 0xC000008B, \"STATUS_RESOURCE_NAME_NOT_FOUND\" },\n  { 0xC000008C, \"STATUS_ARRAY_BOUNDS_EXCEEDED\" },\n  { 0xC000008D, \"STATUS_FLOAT_DENORMAL_OPERAND\" },\n  { 0xC000008E, \"STATUS_FLOAT_DIVIDE_BY_ZERO\" },\n  { 0xC000008F, \"STATUS_FLOAT_INEXACT_RESULT\" },\n  { 0xC0000090, \"STATUS_FLOAT_INVALID_OPERATION\" },\n  { 0xC0000091, \"STATUS_FLOAT_OVERFLOW\" },\n  { 0xC0000092, \"STATUS_FLOAT_STACK_CHECK\" },\n  { 0xC0000093, \"STATUS_FLOAT_UNDERFLOW\" },\n  { 0xC0000094, \"STATUS_INTEGER_DIVIDE_BY_ZERO\" },\n  { 0xC0000095, \"STATUS_INTEGER_OVERFLOW\" },\n  { 0xC0000096, \"STATUS_PRIVILEGED_INSTRUCTION\" },\n  { 0xC0000097, \"STATUS_TOO_MANY_PAGING_FILES\" },\n  { 0xC0000098, \"STATUS_FILE_INVALID\" },\n  { 0xC0000099, \"STATUS_ALLOTTED_SPACE_EXCEEDED\" },\n  { 0xC000009A, \"STATUS_INSUFFICIENT_RESOURCES\" },\n  { 0xC000009B, \"STATUS_DFS_EXIT_PATH_FOUND\" },\n  { 0xC000009C, \"STATUS_DEVICE_DATA_ERROR\" },\n  { 0xC000009D, \"STATUS_DEVICE_NOT_CONNECTED\" },\n  { 0xC000009E, \"STATUS_DEVICE_POWER_FAILURE\" },\n  { 0xC000009F, \"STATUS_FREE_VM_NOT_AT_BASE\" },\n  { 0xC00000A0, \"STATUS_MEMORY_NOT_ALLOCATED\" },\n  { 0xC00000A1, \"STATUS_WORKING_SET_QUOTA\" },\n  { 0xC00000A2, \"STATUS_MEDIA_WRITE_PROTECTED\" },\n  { 0xC00000A3, \"STATUS_DEVICE_NOT_READY\" },\n  { 0xC00000A4, \"STATUS_INVALID_GROUP_ATTRIBUTES\" },\n  { 0xC00000A5, \"STATUS_BAD_IMPERSONATION_LEVEL\" },\n  { 0xC00000A6, \"STATUS_CANT_OPEN_ANONYMOUS\" },\n  { 0xC00000A7, \"STATUS_BAD_VALIDATION_CLASS\" },\n  { 0xC00000A8, \"STATUS_BAD_TOKEN_TYPE\" },\n  { 0xC00000A9, \"STATUS_BAD_MASTER_BOOT_RECORD\" },\n  { 0xC00000AA, \"STATUS_INSTRUCTION_MISALIGNMENT\" },\n  { 0xC00000AB, \"STATUS_INSTANCE_NOT_AVAILABLE\" },\n  { 0xC00000AC, \"STATUS_PIPE_NOT_AVAILABLE\" },\n  { 0xC00000AD, \"STATUS_INVALID_PIPE_STATE\" },\n  { 0xC00000AE, \"STATUS_PIPE_BUSY\" },\n  { 0xC00000AF, \"STATUS_ILLEGAL_FUNCTION\" },\n  { 0xC00000B0, \"STATUS_PIPE_DISCONNECTED\" },\n  { 0xC00000B1, \"STATUS_PIPE_CLOSING\" },\n  { 0xC00000B2, \"STATUS_PIPE_CONNECTED\" },\n  { 0xC00000B3, \"STATUS_PIPE_LISTENING\" },\n  { 0xC00000B4, \"STATUS_INVALID_READ_MODE\" },\n  { 0xC00000B5, \"STATUS_IO_TIMEOUT\" },\n  { 0xC00000B6, \"STATUS_FILE_FORCED_CLOSED\" },\n  { 0xC00000B7, \"STATUS_PROFILING_NOT_STARTED\" },\n  { 0xC00000B8, \"STATUS_PROFILING_NOT_STOPPED\" },\n  { 0xC00000B9, \"STATUS_COULD_NOT_INTERPRET\" },\n  { 0xC00000BA, \"STATUS_FILE_IS_A_DIRECTORY\" },\n  { 0xC00000BB, \"STATUS_NOT_SUPPORTED\" },\n  { 0xC00000BC, \"STATUS_REMOTE_NOT_LISTENING\" },\n  { 0xC00000BD, \"STATUS_DUPLICATE_NAME\" },\n  { 0xC00000BE, \"STATUS_BAD_NETWORK_PATH\" },\n  { 0xC00000BF, \"STATUS_NETWORK_BUSY\" },\n  { 0xC00000C0, \"STATUS_DEVICE_DOES_NOT_EXIST\" },\n  { 0xC00000C1, \"STATUS_TOO_MANY_COMMANDS\" },\n  { 0xC00000C2, \"STATUS_ADAPTER_HARDWARE_ERROR\" },\n  { 0xC00000C3, \"STATUS_INVALID_NETWORK_RESPONSE\" },\n  { 0xC00000C4, \"STATUS_UNEXPECTED_NETWORK_ERROR\" },\n  { 0xC00000C5, \"STATUS_BAD_REMOTE_ADAPTER\" },\n  { 0xC00000C6, \"STATUS_PRINT_QUEUE_FULL\" },\n  { 0xC00000C7, \"STATUS_NO_SPOOL_SPACE\" },\n  { 0xC00000C8, \"STATUS_PRINT_CANCELLED\" },\n  { 0xC00000C9, \"STATUS_NETWORK_NAME_DELETED\" },\n  { 0xC00000CA, \"STATUS_NETWORK_ACCESS_DENIED\" },\n  { 0xC00000CB, \"STATUS_BAD_DEVICE_TYPE\" },\n  { 0xC00000CC, \"STATUS_BAD_NETWORK_NAME\" },\n  { 0xC00000CD, \"STATUS_TOO_MANY_NAMES\" },\n  { 0xC00000CE, \"STATUS_TOO_MANY_SESSIONS\" },\n  { 0xC00000CF, \"STATUS_SHARING_PAUSED\" },\n  { 0xC00000D0, \"STATUS_REQUEST_NOT_ACCEPTED\" },\n  { 0xC00000D1, \"STATUS_REDIRECTOR_PAUSED\" },\n  { 0xC00000D2, \"STATUS_NET_WRITE_FAULT\" },\n  { 0xC00000D3, \"STATUS_PROFILING_AT_LIMIT\" },\n  { 0xC00000D4, \"STATUS_NOT_SAME_DEVICE\" },\n  { 0xC00000D5, \"STATUS_FILE_RENAMED\" },\n  { 0xC00000D6, \"STATUS_VIRTUAL_CIRCUIT_CLOSED\" },\n  { 0xC00000D7, \"STATUS_NO_SECURITY_ON_OBJECT\" },\n  { 0xC00000D8, \"STATUS_CANT_WAIT\" },\n  { 0xC00000D9, \"STATUS_PIPE_EMPTY\" },\n  { 0xC00000DA, \"STATUS_CANT_ACCESS_DOMAIN_INFO\" },\n  { 0xC00000DB, \"STATUS_CANT_TERMINATE_SELF\" },\n  { 0xC00000DC, \"STATUS_INVALID_SERVER_STATE\" },\n  { 0xC00000DD, \"STATUS_INVALID_DOMAIN_STATE\" },\n  { 0xC00000DE, \"STATUS_INVALID_DOMAIN_ROLE\" },\n  { 0xC00000DF, \"STATUS_NO_SUCH_DOMAIN\" },\n  { 0xC00000E0, \"STATUS_DOMAIN_EXISTS\" },\n  { 0xC00000E1, \"STATUS_DOMAIN_LIMIT_EXCEEDED\" },\n  { 0xC00000E2, \"STATUS_OPLOCK_NOT_GRANTED\" },\n  { 0xC00000E3, \"STATUS_INVALID_OPLOCK_PROTOCOL\" },\n  { 0xC00000E4, \"STATUS_INTERNAL_DB_CORRUPTION\" },\n  { 0xC00000E5, \"STATUS_INTERNAL_ERROR\" },\n  { 0xC00000E6, \"STATUS_GENERIC_NOT_MAPPED\" },\n  { 0xC00000E7, \"STATUS_BAD_DESCRIPTOR_FORMAT\" },\n  { 0xC00000E8, \"STATUS_INVALID_USER_BUFFER\" },\n  { 0xC00000E9, \"STATUS_UNEXPECTED_IO_ERROR\" },\n  { 0xC00000EA, \"STATUS_UNEXPECTED_MM_CREATE_ERR\" },\n  { 0xC00000EB, \"STATUS_UNEXPECTED_MM_MAP_ERROR\" },\n  { 0xC00000EC, \"STATUS_UNEXPECTED_MM_EXTEND_ERR\" },\n  { 0xC00000ED, \"STATUS_NOT_LOGON_PROCESS\" },\n  { 0xC00000EE, \"STATUS_LOGON_SESSION_EXISTS\" },\n  { 0xC00000EF, \"STATUS_INVALID_PARAMETER_1\" },\n  { 0xC00000F0, \"STATUS_INVALID_PARAMETER_2\" },\n  { 0xC00000F1, \"STATUS_INVALID_PARAMETER_3\" },\n  { 0xC00000F2, \"STATUS_INVALID_PARAMETER_4\" },\n  { 0xC00000F3, \"STATUS_INVALID_PARAMETER_5\" },\n  { 0xC00000F4, \"STATUS_INVALID_PARAMETER_6\" },\n  { 0xC00000F5, \"STATUS_INVALID_PARAMETER_7\" },\n  { 0xC00000F6, \"STATUS_INVALID_PARAMETER_8\" },\n  { 0xC00000F7, \"STATUS_INVALID_PARAMETER_9\" },\n  { 0xC00000F8, \"STATUS_INVALID_PARAMETER_10\" },\n  { 0xC00000F9, \"STATUS_INVALID_PARAMETER_11\" },\n  { 0xC00000FA, \"STATUS_INVALID_PARAMETER_12\" },\n  { 0xC00000FB, \"STATUS_REDIRECTOR_NOT_STARTED\" },\n  { 0xC00000FC, \"STATUS_REDIRECTOR_STARTED\" },\n  { 0xC00000FD, \"STATUS_STACK_OVERFLOW\" },\n  { 0xC00000FE, \"STATUS_NO_SUCH_PACKAGE\" },\n  { 0xC00000FF, \"STATUS_BAD_FUNCTION_TABLE\" },\n  { 0xC0000100, \"STATUS_VARIABLE_NOT_FOUND\" },\n  { 0xC0000101, \"STATUS_DIRECTORY_NOT_EMPTY\" },\n  { 0xC0000102, \"STATUS_FILE_CORRUPT_ERROR\" },\n  { 0xC0000103, \"STATUS_NOT_A_DIRECTORY\" },\n  { 0xC0000104, \"STATUS_BAD_LOGON_SESSION_STATE\" },\n  { 0xC0000105, \"STATUS_LOGON_SESSION_COLLISION\" },\n  { 0xC0000106, \"STATUS_NAME_TOO_LONG\" },\n  { 0xC0000107, \"STATUS_FILES_OPEN\" },\n  { 0xC0000108, \"STATUS_CONNECTION_IN_USE\" },\n  { 0xC0000109, \"STATUS_MESSAGE_NOT_FOUND\" },\n  { 0xC000010A, \"STATUS_PROCESS_IS_TERMINATING\" },\n  { 0xC000010B, \"STATUS_INVALID_LOGON_TYPE\" },\n  { 0xC000010C, \"STATUS_NO_GUID_TRANSLATION\" },\n  { 0xC000010D, \"STATUS_CANNOT_IMPERSONATE\" },\n  { 0xC000010E, \"STATUS_IMAGE_ALREADY_LOADED\" },\n  { 0xC000010F, \"STATUS_ABIOS_NOT_PRESENT\" },\n  { 0xC0000110, \"STATUS_ABIOS_LID_NOT_EXIST\" },\n  { 0xC0000111, \"STATUS_ABIOS_LID_ALREADY_OWNED\" },\n  { 0xC0000112, \"STATUS_ABIOS_NOT_LID_OWNER\" },\n  { 0xC0000113, \"STATUS_ABIOS_INVALID_COMMAND\" },\n  { 0xC0000114, \"STATUS_ABIOS_INVALID_LID\" },\n  { 0xC0000115, \"STATUS_ABIOS_SELECTOR_NOT_AVAILABLE\" },\n  { 0xC0000116, \"STATUS_ABIOS_INVALID_SELECTOR\" },\n  { 0xC0000117, \"STATUS_NO_LDT\" },\n  { 0xC0000118, \"STATUS_INVALID_LDT_SIZE\" },\n  { 0xC0000119, \"STATUS_INVALID_LDT_OFFSET\" },\n  { 0xC000011A, \"STATUS_INVALID_LDT_DESCRIPTOR\" },\n  { 0xC000011B, \"STATUS_INVALID_IMAGE_NE_FORMAT\" },\n  { 0xC000011C, \"STATUS_RXACT_INVALID_STATE\" },\n  { 0xC000011D, \"STATUS_RXACT_COMMIT_FAILURE\" },\n  { 0xC000011E, \"STATUS_MAPPED_FILE_SIZE_ZERO\" },\n  { 0xC000011F, \"STATUS_TOO_MANY_OPENED_FILES\" },\n  { 0xC0000120, \"STATUS_CANCELLED\" },\n  { 0xC0000121, \"STATUS_CANNOT_DELETE\" },\n  { 0xC0000122, \"STATUS_INVALID_COMPUTER_NAME\" },\n  { 0xC0000123, \"STATUS_FILE_DELETED\" },\n  { 0xC0000124, \"STATUS_SPECIAL_ACCOUNT\" },\n  { 0xC0000125, \"STATUS_SPECIAL_GROUP\" },\n  { 0xC0000126, \"STATUS_SPECIAL_USER\" },\n  { 0xC0000127, \"STATUS_MEMBERS_PRIMARY_GROUP\" },\n  { 0xC0000128, \"STATUS_FILE_CLOSED\" },\n  { 0xC0000129, \"STATUS_TOO_MANY_THREADS\" },\n  { 0xC000012A, \"STATUS_THREAD_NOT_IN_PROCESS\" },\n  { 0xC000012B, \"STATUS_TOKEN_ALREADY_IN_USE\" },\n  { 0xC000012C, \"STATUS_PAGEFILE_QUOTA_EXCEEDED\" },\n  { 0xC000012D, \"STATUS_COMMITMENT_LIMIT\" },\n  { 0xC000012E, \"STATUS_INVALID_IMAGE_LE_FORMAT\" },\n  { 0xC000012F, \"STATUS_INVALID_IMAGE_NOT_MZ\" },\n  { 0xC0000130, \"STATUS_INVALID_IMAGE_PROTECT\" },\n  { 0xC0000131, \"STATUS_INVALID_IMAGE_WIN_16\" },\n  { 0xC0000132, \"STATUS_LOGON_SERVER_CONFLICT\" },\n  { 0xC0000133, \"STATUS_TIME_DIFFERENCE_AT_DC\" },\n  { 0xC0000134, \"STATUS_SYNCHRONIZATION_REQUIRED\" },\n  { 0xC0000135, \"STATUS_DLL_NOT_FOUND\" },\n  { 0xC0000136, \"STATUS_OPEN_FAILED\" },\n  { 0xC0000137, \"STATUS_IO_PRIVILEGE_FAILED\" },\n  { 0xC0000138, \"STATUS_ORDINAL_NOT_FOUND\" },\n  { 0xC0000139, \"STATUS_ENTRYPOINT_NOT_FOUND\" },\n  { 0xC000013A, \"STATUS_CONTROL_C_EXIT\" },\n  { 0xC000013B, \"STATUS_LOCAL_DISCONNECT\" },\n  { 0xC000013C, \"STATUS_REMOTE_DISCONNECT\" },\n  { 0xC000013D, \"STATUS_REMOTE_RESOURCES\" },\n  { 0xC000013E, \"STATUS_LINK_FAILED\" },\n  { 0xC000013F, \"STATUS_LINK_TIMEOUT\" },\n  { 0xC0000140, \"STATUS_INVALID_CONNECTION\" },\n  { 0xC0000141, \"STATUS_INVALID_ADDRESS\" },\n  { 0xC0000142, \"STATUS_DLL_INIT_FAILED\" },\n  { 0xC0000143, \"STATUS_MISSING_SYSTEMFILE\" },\n  { 0xC0000144, \"STATUS_UNHANDLED_EXCEPTION\" },\n  { 0xC0000145, \"STATUS_APP_INIT_FAILURE\" },\n  { 0xC0000146, \"STATUS_PAGEFILE_CREATE_FAILED\" },\n  { 0xC0000147, \"STATUS_NO_PAGEFILE\" },\n  { 0xC0000148, \"STATUS_INVALID_LEVEL\" },\n  { 0xC0000149, \"STATUS_WRONG_PASSWORD_CORE\" },\n  { 0xC000014A, \"STATUS_ILLEGAL_FLOAT_CONTEXT\" },\n  { 0xC000014B, \"STATUS_PIPE_BROKEN\" },\n  { 0xC000014C, \"STATUS_REGISTRY_CORRUPT\" },\n  { 0xC000014D, \"STATUS_REGISTRY_IO_FAILED\" },\n  { 0xC000014E, \"STATUS_NO_EVENT_PAIR\" },\n  { 0xC000014F, \"STATUS_UNRECOGNIZED_VOLUME\" },\n  { 0xC0000150, \"STATUS_SERIAL_NO_DEVICE_INITED\" },\n  { 0xC0000151, \"STATUS_NO_SUCH_ALIAS\" },\n  { 0xC0000152, \"STATUS_MEMBER_NOT_IN_ALIAS\" },\n  { 0xC0000153, \"STATUS_MEMBER_IN_ALIAS\" },\n  { 0xC0000154, \"STATUS_ALIAS_EXISTS\" },\n  { 0xC0000155, \"STATUS_LOGON_NOT_GRANTED\" },\n  { 0xC0000156, \"STATUS_TOO_MANY_SECRETS\" },\n  { 0xC0000157, \"STATUS_SECRET_TOO_LONG\" },\n  { 0xC0000158, \"STATUS_INTERNAL_DB_ERROR\" },\n  { 0xC0000159, \"STATUS_FULLSCREEN_MODE\" },\n  { 0xC000015A, \"STATUS_TOO_MANY_CONTEXT_IDS\" },\n  { 0xC000015B, \"STATUS_LOGON_TYPE_NOT_GRANTED\" },\n  { 0xC000015C, \"STATUS_NOT_REGISTRY_FILE\" },\n  { 0xC000015D, \"STATUS_NT_CROSS_ENCRYPTION_REQUIRED\" },\n  { 0xC000015E, \"STATUS_DOMAIN_CTRLR_CONFIG_ERROR\" },\n  { 0xC000015F, \"STATUS_FT_MISSING_MEMBER\" },\n  { 0xC0000160, \"STATUS_ILL_FORMED_SERVICE_ENTRY\" },\n  { 0xC0000161, \"STATUS_ILLEGAL_CHARACTER\" },\n  { 0xC0000162, \"STATUS_UNMAPPABLE_CHARACTER\" },\n  { 0xC0000163, \"STATUS_UNDEFINED_CHARACTER\" },\n  { 0xC0000164, \"STATUS_FLOPPY_VOLUME\" },\n  { 0xC0000165, \"STATUS_FLOPPY_ID_MARK_NOT_FOUND\" },\n  { 0xC0000166, \"STATUS_FLOPPY_WRONG_CYLINDER\" },\n  { 0xC0000167, \"STATUS_FLOPPY_UNKNOWN_ERROR\" },\n  { 0xC0000168, \"STATUS_FLOPPY_BAD_REGISTERS\" },\n  { 0xC0000169, \"STATUS_DISK_RECALIBRATE_FAILED\" },\n  { 0xC000016A, \"STATUS_DISK_OPERATION_FAILED\" },\n  { 0xC000016B, \"STATUS_DISK_RESET_FAILED\" },\n  { 0xC000016C, \"STATUS_SHARED_IRQ_BUSY\" },\n  { 0xC000016D, \"STATUS_FT_ORPHANING\" },\n  { 0xC000016E, \"STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT\" },\n  { 0xC0000172, \"STATUS_PARTITION_FAILURE\" },\n  { 0xC0000173, \"STATUS_INVALID_BLOCK_LENGTH\" },\n  { 0xC0000174, \"STATUS_DEVICE_NOT_PARTITIONED\" },\n  { 0xC0000175, \"STATUS_UNABLE_TO_LOCK_MEDIA\" },\n  { 0xC0000176, \"STATUS_UNABLE_TO_UNLOAD_MEDIA\" },\n  { 0xC0000177, \"STATUS_EOM_OVERFLOW\" },\n  { 0xC0000178, \"STATUS_NO_MEDIA\" },\n  { 0xC000017A, \"STATUS_NO_SUCH_MEMBER\" },\n  { 0xC000017B, \"STATUS_INVALID_MEMBER\" },\n  { 0xC000017C, \"STATUS_KEY_DELETED\" },\n  { 0xC000017D, \"STATUS_NO_LOG_SPACE\" },\n  { 0xC000017E, \"STATUS_TOO_MANY_SIDS\" },\n  { 0xC000017F, \"STATUS_LM_CROSS_ENCRYPTION_REQUIRED\" },\n  { 0xC0000180, \"STATUS_KEY_HAS_CHILDREN\" },\n  { 0xC0000181, \"STATUS_CHILD_MUST_BE_VOLATILE\" },\n  { 0xC0000182, \"STATUS_DEVICE_CONFIGURATION_ERROR\" },\n  { 0xC0000183, \"STATUS_DRIVER_INTERNAL_ERROR\" },\n  { 0xC0000184, \"STATUS_INVALID_DEVICE_STATE\" },\n  { 0xC0000185, \"STATUS_IO_DEVICE_ERROR\" },\n  { 0xC0000186, \"STATUS_DEVICE_PROTOCOL_ERROR\" },\n  { 0xC0000187, \"STATUS_BACKUP_CONTROLLER\" },\n  { 0xC0000188, \"STATUS_LOG_FILE_FULL\" },\n  { 0xC0000189, \"STATUS_TOO_LATE\" },\n  { 0xC000018A, \"STATUS_NO_TRUST_LSA_SECRET\" },\n  { 0xC000018B, \"STATUS_NO_TRUST_SAM_ACCOUNT\" },\n  { 0xC000018C, \"STATUS_TRUSTED_DOMAIN_FAILURE\" },\n  { 0xC000018D, \"STATUS_TRUSTED_RELATIONSHIP_FAILURE\" },\n  { 0xC000018E, \"STATUS_EVENTLOG_FILE_CORRUPT\" },\n  { 0xC000018F, \"STATUS_EVENTLOG_CANT_START\" },\n  { 0xC0000190, \"STATUS_TRUST_FAILURE\" },\n  { 0xC0000191, \"STATUS_MUTANT_LIMIT_EXCEEDED\" },\n  { 0xC0000192, \"STATUS_NETLOGON_NOT_STARTED\" },\n  { 0xC0000193, \"STATUS_ACCOUNT_EXPIRED\" },\n  { 0xC0000194, \"STATUS_POSSIBLE_DEADLOCK\" },\n  { 0xC0000195, \"STATUS_NETWORK_CREDENTIAL_CONFLICT\" },\n  { 0xC0000196, \"STATUS_REMOTE_SESSION_LIMIT\" },\n  { 0xC0000197, \"STATUS_EVENTLOG_FILE_CHANGED\" },\n  { 0xC0000198, \"STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT\" },\n  { 0xC0000199, \"STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT\" },\n  { 0xC000019A, \"STATUS_NOLOGON_SERVER_TRUST_ACCOUNT\" },\n  { 0xC000019B, \"STATUS_DOMAIN_TRUST_INCONSISTENT\" },\n  { 0xC000019C, \"STATUS_FS_DRIVER_REQUIRED\" },\n  { 0xC0000202, \"STATUS_NO_USER_SESSION_KEY\" },\n  { 0xC0000203, \"STATUS_USER_SESSION_DELETED\" },\n  { 0xC0000204, \"STATUS_RESOURCE_LANG_NOT_FOUND\" },\n  { 0xC0000205, \"STATUS_INSUFF_SERVER_RESOURCES\" },\n  { 0xC0000206, \"STATUS_INVALID_BUFFER_SIZE\" },\n  { 0xC0000207, \"STATUS_INVALID_ADDRESS_COMPONENT\" },\n  { 0xC0000208, \"STATUS_INVALID_ADDRESS_WILDCARD\" },\n  { 0xC0000209, \"STATUS_TOO_MANY_ADDRESSES\" },\n  { 0xC000020A, \"STATUS_ADDRESS_ALREADY_EXISTS\" },\n  { 0xC000020B, \"STATUS_ADDRESS_CLOSED\" },\n  { 0xC000020C, \"STATUS_CONNECTION_DISCONNECTED\" },\n  { 0xC000020D, \"STATUS_CONNECTION_RESET\" },\n  { 0xC000020E, \"STATUS_TOO_MANY_NODES\" },\n  { 0xC000020F, \"STATUS_TRANSACTION_ABORTED\" },\n  { 0xC0000210, \"STATUS_TRANSACTION_TIMED_OUT\" },\n  { 0xC0000211, \"STATUS_TRANSACTION_NO_RELEASE\" },\n  { 0xC0000212, \"STATUS_TRANSACTION_NO_MATCH\" },\n  { 0xC0000213, \"STATUS_TRANSACTION_RESPONDED\" },\n  { 0xC0000214, \"STATUS_TRANSACTION_INVALID_ID\" },\n  { 0xC0000215, \"STATUS_TRANSACTION_INVALID_TYPE\" },\n  { 0xC0000216, \"STATUS_NOT_SERVER_SESSION\" },\n  { 0xC0000217, \"STATUS_NOT_CLIENT_SESSION\" },\n  { 0xC0000218, \"STATUS_CANNOT_LOAD_REGISTRY_FILE\" },\n  { 0xC0000219, \"STATUS_DEBUG_ATTACH_FAILED\" },\n  { 0xC000021A, \"STATUS_SYSTEM_PROCESS_TERMINATED\" },\n  { 0xC000021B, \"STATUS_DATA_NOT_ACCEPTED\" },\n  { 0xC000021C, \"STATUS_NO_BROWSER_SERVERS_FOUND\" },\n  { 0xC000021D, \"STATUS_VDM_HARD_ERROR\" },\n  { 0xC000021E, \"STATUS_DRIVER_CANCEL_TIMEOUT\" },\n  { 0xC000021F, \"STATUS_REPLY_MESSAGE_MISMATCH\" },\n  { 0xC0000220, \"STATUS_MAPPED_ALIGNMENT\" },\n  { 0xC0000221, \"STATUS_IMAGE_CHECKSUM_MISMATCH\" },\n  { 0xC0000222, \"STATUS_LOST_WRITEBEHIND_DATA\" },\n  { 0xC0000223, \"STATUS_CLIENT_SERVER_PARAMETERS_INVALID\" },\n  { 0xC0000224, \"STATUS_PASSWORD_MUST_CHANGE\" },\n  { 0xC0000225, \"STATUS_NOT_FOUND\" },\n  { 0xC0000226, \"STATUS_NOT_TINY_STREAM\" },\n  { 0xC0000227, \"STATUS_RECOVERY_FAILURE\" },\n  { 0xC0000228, \"STATUS_STACK_OVERFLOW_READ\" },\n  { 0xC0000229, \"STATUS_FAIL_CHECK\" },\n  { 0xC000022A, \"STATUS_DUPLICATE_OBJECTID\" },\n  { 0xC000022B, \"STATUS_OBJECTID_EXISTS\" },\n  { 0xC000022C, \"STATUS_CONVERT_TO_LARGE\" },\n  { 0xC000022D, \"STATUS_RETRY\" },\n  { 0xC000022E, \"STATUS_FOUND_OUT_OF_SCOPE\" },\n  { 0xC000022F, \"STATUS_ALLOCATE_BUCKET\" },\n  { 0xC0000230, \"STATUS_PROPSET_NOT_FOUND\" },\n  { 0xC0000231, \"STATUS_MARSHALL_OVERFLOW\" },\n  { 0xC0000232, \"STATUS_INVALID_VARIANT\" },\n  { 0xC0000233, \"STATUS_DOMAIN_CONTROLLER_NOT_FOUND\" },\n  { 0xC0000234, \"STATUS_ACCOUNT_LOCKED_OUT\" },\n  { 0xC0000235, \"STATUS_HANDLE_NOT_CLOSABLE\" },\n  { 0xC0000236, \"STATUS_CONNECTION_REFUSED\" },\n  { 0xC0000237, \"STATUS_GRACEFUL_DISCONNECT\" },\n  { 0xC0000238, \"STATUS_ADDRESS_ALREADY_ASSOCIATED\" },\n  { 0xC0000239, \"STATUS_ADDRESS_NOT_ASSOCIATED\" },\n  { 0xC000023A, \"STATUS_CONNECTION_INVALID\" },\n  { 0xC000023B, \"STATUS_CONNECTION_ACTIVE\" },\n  { 0xC000023C, \"STATUS_NETWORK_UNREACHABLE\" },\n  { 0xC000023D, \"STATUS_HOST_UNREACHABLE\" },\n  { 0xC000023E, \"STATUS_PROTOCOL_UNREACHABLE\" },\n  { 0xC000023F, \"STATUS_PORT_UNREACHABLE\" },\n  { 0xC0000240, \"STATUS_REQUEST_ABORTED\" },\n  { 0xC0000241, \"STATUS_CONNECTION_ABORTED\" },\n  { 0xC0000242, \"STATUS_BAD_COMPRESSION_BUFFER\" },\n  { 0xC0000243, \"STATUS_USER_MAPPED_FILE\" },\n  { 0xC0000244, \"STATUS_AUDIT_FAILED\" },\n  { 0xC0000245, \"STATUS_TIMER_RESOLUTION_NOT_SET\" },\n  { 0xC0000246, \"STATUS_CONNECTION_COUNT_LIMIT\" },\n  { 0xC0000247, \"STATUS_LOGIN_TIME_RESTRICTION\" },\n  { 0xC0000248, \"STATUS_LOGIN_WKSTA_RESTRICTION\" },\n  { 0xC0000249, \"STATUS_IMAGE_MP_UP_MISMATCH\" },\n  { 0xC0000250, \"STATUS_INSUFFICIENT_LOGON_INFO\" },\n  { 0xC0000251, \"STATUS_BAD_DLL_ENTRYPOINT\" },\n  { 0xC0000252, \"STATUS_BAD_SERVICE_ENTRYPOINT\" },\n  { 0xC0000253, \"STATUS_LPC_REPLY_LOST\" },\n  { 0xC0000254, \"STATUS_IP_ADDRESS_CONFLICT1\" },\n  { 0xC0000255, \"STATUS_IP_ADDRESS_CONFLICT2\" },\n  { 0xC0000256, \"STATUS_REGISTRY_QUOTA_LIMIT\" },\n  { 0xC0000257, \"STATUS_PATH_NOT_COVERED\" },\n  { 0xC0000258, \"STATUS_NO_CALLBACK_ACTIVE\" },\n  { 0xC0000259, \"STATUS_LICENSE_QUOTA_EXCEEDED\" },\n  { 0xC000025A, \"STATUS_PWD_TOO_SHORT\" },\n  { 0xC000025B, \"STATUS_PWD_TOO_RECENT\" },\n  { 0xC000025C, \"STATUS_PWD_HISTORY_CONFLICT\" },\n  { 0xC000025E, \"STATUS_PLUGPLAY_NO_DEVICE\" },\n  { 0xC000025F, \"STATUS_UNSUPPORTED_COMPRESSION\" },\n  { 0xC0000260, \"STATUS_INVALID_HW_PROFILE\" },\n  { 0xC0000261, \"STATUS_INVALID_PLUGPLAY_DEVICE_PATH\" },\n  { 0xC0000262, \"STATUS_DRIVER_ORDINAL_NOT_FOUND\" },\n  { 0xC0000263, \"STATUS_DRIVER_ENTRYPOINT_NOT_FOUND\" },\n  { 0xC0000264, \"STATUS_RESOURCE_NOT_OWNED\" },\n  { 0xC0000265, \"STATUS_TOO_MANY_LINKS\" },\n  { 0xC0000266, \"STATUS_QUOTA_LIST_INCONSISTENT\" },\n  { 0xC0000267, \"STATUS_FILE_IS_OFFLINE\" },\n  { 0xC0000268, \"STATUS_EVALUATION_EXPIRATION\" },\n  { 0xC0000269, \"STATUS_ILLEGAL_DLL_RELOCATION\" },\n  { 0xC000026A, \"STATUS_LICENSE_VIOLATION\" },\n  { 0xC000026B, \"STATUS_DLL_INIT_FAILED_LOGOFF\" },\n  { 0xC000026C, \"STATUS_DRIVER_UNABLE_TO_LOAD\" },\n  { 0xC000026D, \"STATUS_DFS_UNAVAILABLE\" },\n  { 0xC000026E, \"STATUS_VOLUME_DISMOUNTED\" },\n  { 0xC000026F, \"STATUS_WX86_INTERNAL_ERROR\" },\n  { 0xC0000270, \"STATUS_WX86_FLOAT_STACK_CHECK\" },\n  { 0xC0000271, \"STATUS_VALIDATE_CONTINUE\" },\n  { 0xC0000272, \"STATUS_NO_MATCH\" },\n  { 0xC0000273, \"STATUS_NO_MORE_MATCHES\" },\n  { 0xC0000275, \"STATUS_NOT_A_REPARSE_POINT\" },\n  { 0xC0000276, \"STATUS_IO_REPARSE_TAG_INVALID\" },\n  { 0xC0000277, \"STATUS_IO_REPARSE_TAG_MISMATCH\" },\n  { 0xC0000278, \"STATUS_IO_REPARSE_DATA_INVALID\" },\n  { 0xC0000279, \"STATUS_IO_REPARSE_TAG_NOT_HANDLED\" },\n  { 0xC0000280, \"STATUS_REPARSE_POINT_NOT_RESOLVED\" },\n  { 0xC0000281, \"STATUS_DIRECTORY_IS_A_REPARSE_POINT\" },\n  { 0xC0000282, \"STATUS_RANGE_LIST_CONFLICT\" },\n  { 0xC0000283, \"STATUS_SOURCE_ELEMENT_EMPTY\" },\n  { 0xC0000284, \"STATUS_DESTINATION_ELEMENT_FULL\" },\n  { 0xC0000285, \"STATUS_ILLEGAL_ELEMENT_ADDRESS\" },\n  { 0xC0000286, \"STATUS_MAGAZINE_NOT_PRESENT\" },\n  { 0xC0000287, \"STATUS_REINITIALIZATION_NEEDED\" },\n  { 0x80000288, \"STATUS_DEVICE_REQUIRES_CLEANING\" },\n  { 0x80000289, \"STATUS_DEVICE_DOOR_OPEN\" },\n  { 0xC000028A, \"STATUS_ENCRYPTION_FAILED\" },\n  { 0xC000028B, \"STATUS_DECRYPTION_FAILED\" },\n  { 0xC000028C, \"STATUS_RANGE_NOT_FOUND\" },\n  { 0xC000028D, \"STATUS_NO_RECOVERY_POLICY\" },\n  { 0xC000028E, \"STATUS_NO_EFS\" },\n  { 0xC000028F, \"STATUS_WRONG_EFS\" },\n  { 0xC0000290, \"STATUS_NO_USER_KEYS\" },\n  { 0xC0000291, \"STATUS_FILE_NOT_ENCRYPTED\" },\n  { 0xC0000292, \"STATUS_NOT_EXPORT_FORMAT\" },\n  { 0xC0000293, \"STATUS_FILE_ENCRYPTED\" },\n  { 0x40000294, \"STATUS_WAKE_SYSTEM\" },\n  { 0xC0000295, \"STATUS_WMI_GUID_NOT_FOUND\" },\n  { 0xC0000296, \"STATUS_WMI_INSTANCE_NOT_FOUND\" },\n  { 0xC0000297, \"STATUS_WMI_ITEMID_NOT_FOUND\" },\n  { 0xC0000298, \"STATUS_WMI_TRY_AGAIN\" },\n  { 0xC0000299, \"STATUS_SHARED_POLICY\" },\n  { 0xC000029A, \"STATUS_POLICY_OBJECT_NOT_FOUND\" },\n  { 0xC000029B, \"STATUS_POLICY_ONLY_IN_DS\" },\n  { 0xC000029C, \"STATUS_VOLUME_NOT_UPGRADED\" },\n  { 0xC000029D, \"STATUS_REMOTE_STORAGE_NOT_ACTIVE\" },\n  { 0xC000029E, \"STATUS_REMOTE_STORAGE_MEDIA_ERROR\" },\n  { 0xC000029F, \"STATUS_NO_TRACKING_SERVICE\" },\n  { 0xC00002A0, \"STATUS_SERVER_SID_MISMATCH\" },\n  { 0xC00002A1, \"STATUS_DS_NO_ATTRIBUTE_OR_VALUE\" },\n  { 0xC00002A2, \"STATUS_DS_INVALID_ATTRIBUTE_SYNTAX\" },\n  { 0xC00002A3, \"STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED\" },\n  { 0xC00002A4, \"STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS\" },\n  { 0xC00002A5, \"STATUS_DS_BUSY\" },\n  { 0xC00002A6, \"STATUS_DS_UNAVAILABLE\" },\n  { 0xC00002A7, \"STATUS_DS_NO_RIDS_ALLOCATED\" },\n  { 0xC00002A8, \"STATUS_DS_NO_MORE_RIDS\" },\n  { 0xC00002A9, \"STATUS_DS_INCORRECT_ROLE_OWNER\" },\n  { 0xC00002AA, \"STATUS_DS_RIDMGR_INIT_ERROR\" },\n  { 0xC00002AB, \"STATUS_DS_OBJ_CLASS_VIOLATION\" },\n  { 0xC00002AC, \"STATUS_DS_CANT_ON_NON_LEAF\" },\n  { 0xC00002AD, \"STATUS_DS_CANT_ON_RDN\" },\n  { 0xC00002AE, \"STATUS_DS_CANT_MOD_OBJ_CLASS\" },\n  { 0xC00002AF, \"STATUS_DS_CROSS_DOM_MOVE_FAILED\" },\n  { 0xC00002B0, \"STATUS_DS_GC_NOT_AVAILABLE\" },\n  { 0xC00002B1, \"STATUS_DIRECTORY_SERVICE_REQUIRED\" },\n  { 0xC00002B2, \"STATUS_REPARSE_ATTRIBUTE_CONFLICT\" },\n  { 0xC00002B3, \"STATUS_CANT_ENABLE_DENY_ONLY\" },\n  { 0xC00002B4, \"STATUS_FLOAT_MULTIPLE_FAULTS\" },\n  { 0xC00002B5, \"STATUS_FLOAT_MULTIPLE_TRAPS\" },\n  { 0xC00002B6, \"STATUS_DEVICE_REMOVED\" },\n  { 0xC00002B7, \"STATUS_JOURNAL_DELETE_IN_PROGRESS\" },\n  { 0xC00002B8, \"STATUS_JOURNAL_NOT_ACTIVE\" },\n  { 0xC00002B9, \"STATUS_NOINTERFACE\" },\n  { 0xC00002C1, \"STATUS_DS_ADMIN_LIMIT_EXCEEDED\" },\n  { 0xC00002C2, \"STATUS_DRIVER_FAILED_SLEEP\" },\n  { 0xC00002C3, \"STATUS_MUTUAL_AUTHENTICATION_FAILED\" },\n  { 0xC00002C4, \"STATUS_CORRUPT_SYSTEM_FILE\" },\n  { 0xC00002C5, \"STATUS_DATATYPE_MISALIGNMENT_ERROR\" },\n  { 0xC00002C6, \"STATUS_WMI_READ_ONLY\" },\n  { 0xC00002C7, \"STATUS_WMI_SET_FAILURE\" },\n  { 0xC00002C8, \"STATUS_COMMITMENT_MINIMUM\" },\n  { 0xC00002C9, \"STATUS_REG_NAT_CONSUMPTION\" },\n  { 0xC00002CA, \"STATUS_TRANSPORT_FULL\" },\n  { 0xC00002CB, \"STATUS_DS_SAM_INIT_FAILURE\" },\n  { 0xC00002CC, \"STATUS_ONLY_IF_CONNECTED\" },\n  { 0xC00002CD, \"STATUS_DS_SENSITIVE_GROUP_VIOLATION\" },\n  { 0xC00002CE, \"STATUS_PNP_RESTART_ENUMERATION\" },\n  { 0xC00002CF, \"STATUS_JOURNAL_ENTRY_DELETED\" },\n  { 0xC00002D0, \"STATUS_DS_CANT_MOD_PRIMARYGROUPID\" },\n  { 0xC00002D1, \"STATUS_SYSTEM_IMAGE_BAD_SIGNATURE\" },\n  { 0xC00002D2, \"STATUS_PNP_REBOOT_REQUIRED\" },\n  { 0xC00002D3, \"STATUS_POWER_STATE_INVALID\" },\n  { 0xC00002D4, \"STATUS_DS_INVALID_GROUP_TYPE\" },\n  { 0xC00002D5, \"STATUS_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN\" },\n  { 0xC00002D6, \"STATUS_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN\" },\n  { 0xC00002D7, \"STATUS_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER\" },\n  { 0xC00002D8, \"STATUS_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER\" },\n  { 0xC00002D9, \"STATUS_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER\" },\n  { 0xC00002DA, \"STATUS_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER\" },\n  { 0xC00002DB, \"STATUS_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER\" },\n  { 0xC00002DC, \"STATUS_DS_HAVE_PRIMARY_MEMBERS\" },\n  { 0xC00002DD, \"STATUS_WMI_NOT_SUPPORTED\" },\n  { 0xC00002DE, \"STATUS_INSUFFICIENT_POWER\" },\n  { 0xC00002DF, \"STATUS_SAM_NEED_BOOTKEY_PASSWORD\" },\n  { 0xC00002E0, \"STATUS_SAM_NEED_BOOTKEY_FLOPPY\" },\n  { 0xC00002E1, \"STATUS_DS_CANT_START\" },\n  { 0xC00002E2, \"STATUS_DS_INIT_FAILURE\" },\n  { 0xC00002E3, \"STATUS_SAM_INIT_FAILURE\" },\n  { 0xC00002E4, \"STATUS_DS_GC_REQUIRED\" },\n  { 0xC00002E5, \"STATUS_DS_LOCAL_MEMBER_OF_LOCAL_ONLY\" },\n  { 0xC00002E6, \"STATUS_DS_NO_FPO_IN_UNIVERSAL_GROUPS\" },\n  { 0xC00002E7, \"STATUS_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED\" },\n  { 0xC00002E8, \"STATUS_MULTIPLE_FAULT_VIOLATION\" },\n  { 0xC0000300, \"STATUS_NOT_SUPPORTED_ON_SBS\" },\n  { 0xC0009898, \"STATUS_WOW_ASSERTION\" },\n  { 0xC0020001, \"RPC_NT_INVALID_STRING_BINDING\" },\n  { 0xC0020002, \"RPC_NT_WRONG_KIND_OF_BINDING\" },\n  { 0xC0020003, \"RPC_NT_INVALID_BINDING\" },\n  { 0xC0020004, \"RPC_NT_PROTSEQ_NOT_SUPPORTED\" },\n  { 0xC0020005, \"RPC_NT_INVALID_RPC_PROTSEQ\" },\n  { 0xC0020006, \"RPC_NT_INVALID_STRING_UUID\" },\n  { 0xC0020007, \"RPC_NT_INVALID_ENDPOINT_FORMAT\" },\n  { 0xC0020008, \"RPC_NT_INVALID_NET_ADDR\" },\n  { 0xC0020009, \"RPC_NT_NO_ENDPOINT_FOUND\" },\n  { 0xC002000A, \"RPC_NT_INVALID_TIMEOUT\" },\n  { 0xC002000B, \"RPC_NT_OBJECT_NOT_FOUND\" },\n  { 0xC002000C, \"RPC_NT_ALREADY_REGISTERED\" },\n  { 0xC002000D, \"RPC_NT_TYPE_ALREADY_REGISTERED\" },\n  { 0xC002000E, \"RPC_NT_ALREADY_LISTENING\" },\n  { 0xC002000F, \"RPC_NT_NO_PROTSEQS_REGISTERED\" },\n  { 0xC0020010, \"RPC_NT_NOT_LISTENING\" },\n  { 0xC0020011, \"RPC_NT_UNKNOWN_MGR_TYPE\" },\n  { 0xC0020012, \"RPC_NT_UNKNOWN_IF\" },\n  { 0xC0020013, \"RPC_NT_NO_BINDINGS\" },\n  { 0xC0020014, \"RPC_NT_NO_PROTSEQS\" },\n  { 0xC0020015, \"RPC_NT_CANT_CREATE_ENDPOINT\" },\n  { 0xC0020016, \"RPC_NT_OUT_OF_RESOURCES\" },\n  { 0xC0020017, \"RPC_NT_SERVER_UNAVAILABLE\" },\n  { 0xC0020018, \"RPC_NT_SERVER_TOO_BUSY\" },\n  { 0xC0020019, \"RPC_NT_INVALID_NETWORK_OPTIONS\" },\n  { 0xC002001A, \"RPC_NT_NO_CALL_ACTIVE\" },\n  { 0xC002001B, \"RPC_NT_CALL_FAILED\" },\n  { 0xC002001C, \"RPC_NT_CALL_FAILED_DNE\" },\n  { 0xC002001D, \"RPC_NT_PROTOCOL_ERROR\" },\n  { 0xC002001F, \"RPC_NT_UNSUPPORTED_TRANS_SYN\" },\n  { 0xC0020021, \"RPC_NT_UNSUPPORTED_TYPE\" },\n  { 0xC0020022, \"RPC_NT_INVALID_TAG\" },\n  { 0xC0020023, \"RPC_NT_INVALID_BOUND\" },\n  { 0xC0020024, \"RPC_NT_NO_ENTRY_NAME\" },\n  { 0xC0020025, \"RPC_NT_INVALID_NAME_SYNTAX\" },\n  { 0xC0020026, \"RPC_NT_UNSUPPORTED_NAME_SYNTAX\" },\n  { 0xC0020028, \"RPC_NT_UUID_NO_ADDRESS\" },\n  { 0xC0020029, \"RPC_NT_DUPLICATE_ENDPOINT\" },\n  { 0xC002002A, \"RPC_NT_UNKNOWN_AUTHN_TYPE\" },\n  { 0xC002002B, \"RPC_NT_MAX_CALLS_TOO_SMALL\" },\n  { 0xC002002C, \"RPC_NT_STRING_TOO_LONG\" },\n  { 0xC002002D, \"RPC_NT_PROTSEQ_NOT_FOUND\" },\n  { 0xC002002E, \"RPC_NT_PROCNUM_OUT_OF_RANGE\" },\n  { 0xC002002F, \"RPC_NT_BINDING_HAS_NO_AUTH\" },\n  { 0xC0020030, \"RPC_NT_UNKNOWN_AUTHN_SERVICE\" },\n  { 0xC0020031, \"RPC_NT_UNKNOWN_AUTHN_LEVEL\" },\n  { 0xC0020032, \"RPC_NT_INVALID_AUTH_IDENTITY\" },\n  { 0xC0020033, \"RPC_NT_UNKNOWN_AUTHZ_SERVICE\" },\n  { 0xC0020034, \"EPT_NT_INVALID_ENTRY\" },\n  { 0xC0020035, \"EPT_NT_CANT_PERFORM_OP\" },\n  { 0xC0020036, \"EPT_NT_NOT_REGISTERED\" },\n  { 0xC0020037, \"RPC_NT_NOTHING_TO_EXPORT\" },\n  { 0xC0020038, \"RPC_NT_INCOMPLETE_NAME\" },\n  { 0xC0020039, \"RPC_NT_INVALID_VERS_OPTION\" },\n  { 0xC002003A, \"RPC_NT_NO_MORE_MEMBERS\" },\n  { 0xC002003B, \"RPC_NT_NOT_ALL_OBJS_UNEXPORTED\" },\n  { 0xC002003C, \"RPC_NT_INTERFACE_NOT_FOUND\" },\n  { 0xC002003D, \"RPC_NT_ENTRY_ALREADY_EXISTS\" },\n  { 0xC002003E, \"RPC_NT_ENTRY_NOT_FOUND\" },\n  { 0xC002003F, \"RPC_NT_NAME_SERVICE_UNAVAILABLE\" },\n  { 0xC0020040, \"RPC_NT_INVALID_NAF_ID\" },\n  { 0xC0020041, \"RPC_NT_CANNOT_SUPPORT\" },\n  { 0xC0020042, \"RPC_NT_NO_CONTEXT_AVAILABLE\" },\n  { 0xC0020043, \"RPC_NT_INTERNAL_ERROR\" },\n  { 0xC0020044, \"RPC_NT_ZERO_DIVIDE\" },\n  { 0xC0020045, \"RPC_NT_ADDRESS_ERROR\" },\n  { 0xC0020046, \"RPC_NT_FP_DIV_ZERO\" },\n  { 0xC0020047, \"RPC_NT_FP_UNDERFLOW\" },\n  { 0xC0020048, \"RPC_NT_FP_OVERFLOW\" },\n  { 0xC0021007, \"RPC_P_RECEIVE_ALERTED\" },\n  { 0xC0021008, \"RPC_P_CONNECTION_CLOSED\" },\n  { 0xC0021009, \"RPC_P_RECEIVE_FAILED\" },\n  { 0xC002100A, \"RPC_P_SEND_FAILED\" },\n  { 0xC002100B, \"RPC_P_TIMEOUT\" },\n  { 0xC002100C, \"RPC_P_SERVER_TRANSPORT_ERROR\" },\n  { 0xC002100E, \"RPC_P_EXCEPTION_OCCURED\" },\n  { 0xC0021012, \"RPC_P_CONNECTION_SHUTDOWN\" },\n  { 0xC0021015, \"RPC_P_THREAD_LISTENING\" },\n  { 0xC0030001, \"RPC_NT_NO_MORE_ENTRIES\" },\n  { 0xC0030002, \"RPC_NT_SS_CHAR_TRANS_OPEN_FAIL\" },\n  { 0xC0030003, \"RPC_NT_SS_CHAR_TRANS_SHORT_FILE\" },\n  { 0xC0030004, \"RPC_NT_SS_IN_NULL_CONTEXT\" },\n  { 0xC0030005, \"RPC_NT_SS_CONTEXT_MISMATCH\" },\n  { 0xC0030006, \"RPC_NT_SS_CONTEXT_DAMAGED\" },\n  { 0xC0030007, \"RPC_NT_SS_HANDLES_MISMATCH\" },\n  { 0xC0030008, \"RPC_NT_SS_CANNOT_GET_CALL_HANDLE\" },\n  { 0xC0030009, \"RPC_NT_NULL_REF_POINTER\" },\n  { 0xC003000A, \"RPC_NT_ENUM_VALUE_OUT_OF_RANGE\" },\n  { 0xC003000B, \"RPC_NT_BYTE_COUNT_TOO_SMALL\" },\n  { 0xC003000C, \"RPC_NT_BAD_STUB_DATA\" },\n  { 0xC0020049, \"RPC_NT_CALL_IN_PROGRESS\" },\n  { 0xC002004A, \"RPC_NT_NO_MORE_BINDINGS\" },\n  { 0xC002004B, \"RPC_NT_GROUP_MEMBER_NOT_FOUND\" },\n  { 0xC002004C, \"EPT_NT_CANT_CREATE\" },\n  { 0xC002004D, \"RPC_NT_INVALID_OBJECT\" },\n  { 0xC002004F, \"RPC_NT_NO_INTERFACES\" },\n  { 0xC0020050, \"RPC_NT_CALL_CANCELLED\" },\n  { 0xC0020051, \"RPC_NT_BINDING_INCOMPLETE\" },\n  { 0xC0020052, \"RPC_NT_COMM_FAILURE\" },\n  { 0xC0020053, \"RPC_NT_UNSUPPORTED_AUTHN_LEVEL\" },\n  { 0xC0020054, \"RPC_NT_NO_PRINC_NAME\" },\n  { 0xC0020055, \"RPC_NT_NOT_RPC_ERROR\" },\n  { 0x40020056, \"RPC_NT_UUID_LOCAL_ONLY\" },\n  { 0xC0020057, \"RPC_NT_SEC_PKG_ERROR\" },\n  { 0xC0020058, \"RPC_NT_NOT_CANCELLED\" },\n  { 0xC0030059, \"RPC_NT_INVALID_ES_ACTION\" },\n  { 0xC003005A, \"RPC_NT_WRONG_ES_VERSION\" },\n  { 0xC003005B, \"RPC_NT_WRONG_STUB_VERSION\" },\n  { 0xC003005C, \"RPC_NT_INVALID_PIPE_OBJECT\" },\n  { 0xC003005D, \"RPC_NT_INVALID_PIPE_OPERATION\" },\n  { 0xC003005E, \"RPC_NT_WRONG_PIPE_VERSION\" },\n  { 0x400200AF, \"RPC_NT_SEND_INCOMPLETE\" },\n  { 0,          NULL }\n};\n\n/*\n * return an NT error string from a SMB buffer\n */\nconst char *\nnt_errstr(uint32_t err)\n{\n    static char ret[128];\n    int i;\n\n    ret[0] = 0;\n\n    for (i = 0; nt_errors[i].name; i++) {\n\tif (err == nt_errors[i].code)\n\t    return nt_errors[i].name;\n    }\n\n    snprintf(ret, sizeof(ret), \"0x%08x\", err);\n    return ret;\n}\n"], "filenames": ["smbutil.c"], "buggy_code_start_loc": [810], "buggy_code_end_loc": [811], "fixing_code_start_loc": [810], "fixing_code_end_loc": [818], "type": "CWE-674", "message": "The SMB parser in tcpdump before 4.9.3 has stack exhaustion in smbutil.c:smb_fdata() via recursion.", "other": {"cve": {"id": "CVE-2018-16452", "sourceIdentifier": "cve@mitre.org", "published": "2019-10-03T16:15:12.803", "lastModified": "2019-10-11T23:15:13.150", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The SMB parser in tcpdump before 4.9.3 has stack exhaustion in smbutil.c:smb_fdata() via recursion."}, {"lang": "es", "value": "El analizador SMB en tcpdump versiones anteriores a 4.9.3, presenta un agotamiento de pila en smbutil.c:smb_fdata() mediante la recursividad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-674"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tcpdump:tcpdump:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.9.3", "matchCriteriaId": "CA59BD9C-6C0C-4584-A8CC-8C652E9D36AF"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-10/msg00050.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-10/msg00053.html", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2019/Dec/26", "source": "cve@mitre.org"}, {"url": "https://github.com/the-tcpdump-group/tcpdump/blob/tcpdump-4.9/CHANGES", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/the-tcpdump-group/tcpdump/commit/24182d959f661327525a20d9a94c98a8ec016778", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/10/msg00015.html", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/62XY42U6HY3H2APR5EHNWCZ7SAQNMMJN/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FNYXF3IY2X65IOD422SA6EQUULSGW7FN/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/R2UDPOSGVJQIYC33SQBXMDXHH4QDSDMU/", "source": "cve@mitre.org"}, {"url": "https://seclists.org/bugtraq/2019/Dec/23", "source": "cve@mitre.org"}, {"url": "https://seclists.org/bugtraq/2019/Oct/28", "source": "cve@mitre.org"}, {"url": "https://security.netapp.com/advisory/ntap-20200120-0001/", "source": "cve@mitre.org"}, {"url": "https://support.apple.com/kb/HT210788", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4252-1/", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/4252-2/", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2019/dsa-4547", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/24182d959f661327525a20d9a94c98a8ec016778"}}