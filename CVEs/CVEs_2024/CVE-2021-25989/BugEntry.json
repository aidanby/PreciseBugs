{"buggy_code": ["<% title t('groups.plural') %>\n<% page_new new_group_path %>\n\n<div class=\"subtitle\">\n  <%= t('groups.index.subtitle') %>\n</div>\n\n<% if @groups.any? %>\n  <div class=\"title\"><%= t('groups.index.joined_groups') %></div>\n  <div class=\"gridTwo\">\n    <% @groups.each do |group| %>\n      <div class=\"gridTwoItemBoxLight\">\n        <%= react_component('Story', html_options: html_options, props: {\n          name: group.name,\n          link: url_for(group),\n          actions: {\n            leave: user_can_leave?(group) ? {\n              name: t('common.actions.leave'),\n              link: group_membership_path(group_id: group.id, id: 'leave'),\n              dataConfirm: t('common.actions.confirm'),\n              dataMethod: 'delete'\n            } : nil,\n            edit: user_can_edit?(group) ? {\n              name: t('common.actions.edit'),\n              link: edit_group_path(group)\n            } : nil,\n            delete: user_can_delete?(group) ? {\n              name: t('common.actions.delete'),\n              link: url_for(group),\n              dataConfirm: t('common.actions.confirm'),\n              dataMethod: 'delete'\n            } : nil\n          }\n        }) %>\n      </div>\n    <% end %>\n  </div>\n<% else %>\n  <%= raw t('groups.index.instructions') %>\n  <div class=\"smallMarginTop\">\n    <div class=\"title\">\n      <%= t('pages.faq.group_question') %>\n    </div>\n    <%= raw t('pages.faq.group_answer', {\n      group: t('groups.singular')\n    }) %>\n  </div>\n<% end %>\n\n<% if @available_groups.any? %>\n  <div class=\"title\"><%= t('groups.index.available_groups') %></div>\n  <div class=\"gridTwo\">\n    <% @available_groups.each do |group| %>\n      <div class=\"gridTwoItemBoxLight\">\n        <%= react_component('Story', html_options: html_options, props: {\n          name: group.name,\n          link: url_for(group),\n          actions: {\n            join: {\n              name: t('common.actions.join'),\n              link: group_membership_path(group_id: group.id, id: 'join'),\n              dataMethod: 'post'\n            }\n          }\n        }) %>\n      </div>\n    <% end %>\n  </div>\n<% end %>\n", "// @flow\nimport LazyLoad from 'react-lazyload';\nimport React from 'react';\nimport css from './Avatar.scss';\n\nexport type Props = {\n  name?: string,\n  src?: string,\n  alt?: string,\n  small?: boolean,\n  large?: boolean,\n};\n\nconst displayImage = (alt: ?string, src: string) => (\n  <img alt={alt ?? ''} className={`${css.image}`} src={src} />\n);\n\nconst displayName = (name: string) => (\n  <div className={`${css.name} name`}>{name}</div>\n);\n\nconst getHeight = (small: ?boolean, large: ?boolean) => {\n  if (small) return 50;\n  if (large) return 150;\n  return 100;\n};\n\nexport const Avatar = (props: Props) => {\n  const {\n    name, alt, src, small, large,\n  } = props;\n  const height = getHeight(small, large);\n  return (\n    <div\n      className={`avatar ${css.avatar} ${large ? css.large : ''} ${small ? css.small : ''}`}\n    >\n      <LazyLoad height={height} offset={height} once tabIndex={0}>\n        {src ? (\n          displayImage(alt, src)\n        ) : (\n          <div className={css.image} aria-hidden />\n        )}\n      </LazyLoad>\n      {name && displayName(name)}\n    </div>\n  );\n};\n", "// @flow\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { init, exec } from 'pell';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLink } from '@fortawesome/free-solid-svg-icons';\nimport css from './InputTextarea.scss';\nimport inputCss from './Input.scss';\n\n// TODO (julianguyen): More tests after writing stubs for Pell editor\n\nconst handleResult = (type: string) => {\n  switch (type) {\n    case 'link': {\n      const url = window.prompt('URL');\n      if (url) exec('createLink', url);\n      break;\n    }\n    case 'olist':\n      exec('insertOrderedList');\n      break;\n    case 'ulist':\n      exec('insertUnorderedList');\n      break;\n    default:\n      exec(type);\n      break;\n  }\n  return false;\n};\n\nconst action = (type: string) => ({\n  name: type,\n  result: () => handleResult(type),\n});\n\nconst actions = [\n  action('bold'),\n  action('italic'),\n  action('underline'),\n  action('strikethrough'),\n  action('olist'),\n  action('ulist'),\n  {\n    ...action('link'),\n    icon: ReactDOMServer.renderToString(<FontAwesomeIcon icon={faLink} />),\n  },\n];\n\nconst classes = {\n  button: css.button,\n  selected: css.buttonSelected,\n  content: `editorContent ${css.content}`,\n};\n\nexport type Props = {\n  id: string,\n  name?: string,\n  value?: any,\n  required?: boolean,\n  hasError?: Function,\n  myRef?: any,\n  dark?: boolean,\n};\n\nexport function InputTextarea(props: Props) {\n  const {\n    id, name, value: propValue, required, hasError, myRef, dark,\n  } = props;\n  const [value, setValue] = useState<string>(propValue || '');\n  const editorRef = useRef(null);\n  const editor = useRef(null);\n\n  const onChange = (updatedValue: string) => {\n    setValue(updatedValue);\n  };\n\n  const onBlur = () => {\n    if (required && hasError) {\n      hasError(!value || value === '<p><br></p>');\n    }\n  };\n\n  const onFocus = () => {\n    if (required && hasError) {\n      hasError(false);\n    }\n    if (editorRef.current) {\n      editorRef.current.getElementsByClassName('editorContent')[0].focus();\n    }\n  };\n\n  const onPaste = (e) => {\n    e.preventDefault();\n\n    const text = (e.originalEvent || e).clipboardData.getData('text/plain') ?? '';\n\n    document.execCommand('insertHTML', false, text);\n  };\n\n  useEffect(() => {\n    if (editorRef.current) {\n      editor.current = init({\n        element: editorRef.current.getElementsByClassName('editor')[0],\n        onChange,\n        classes,\n        actions,\n      });\n      editor.current.content.innerHTML = value;\n    }\n  }, []);\n\n  return (\n    <div\n      id={id}\n      className={`${inputCss.default} ${dark ? css.dark : ''}`}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onPaste={onPaste}\n      tabIndex={0}\n      role=\"textbox\"\n      ref={editorRef}\n    >\n      <div className={`editor ${css.editor}`} />\n      <input\n        type=\"hidden\"\n        value={value}\n        name={name}\n        required={required}\n        ref={myRef}\n      />\n    </div>\n  );\n}\n"], "fixing_code": ["<% title t('groups.plural') %>\n<% page_new new_group_path %>\n\n<div class=\"subtitle\">\n  <%= t('groups.index.subtitle') %>\n</div>\n\n<% if @groups.any? %>\n  <div class=\"title\"><%= t('groups.index.joined_groups') %></div>\n  <div class=\"gridTwo\">\n    <% @groups.each do |group| %>\n      <div class=\"gridTwoItemBoxLight\">\n        <%= react_component('Story', html_options: html_options, props: {\n          name: group.name,\n          link: url_for(group),\n          actions: {\n            leave: user_can_leave?(group) ? {\n              name: t('common.actions.leave'),\n              link: group_membership_path(group_id: group.id, id: 'leave'),\n              dataConfirm: t('common.actions.confirm'),\n              dataMethod: 'delete'\n            } : nil,\n            edit: user_can_edit?(group) ? {\n              name: t('common.actions.edit'),\n              link: edit_group_path(group)\n            } : nil,\n            delete: user_can_delete?(group) ? {\n              name: t('common.actions.delete'),\n              link: url_for(group),\n              dataConfirm: t('common.actions.confirm'),\n              dataMethod: 'delete'\n            } : nil\n          }\n        }) %>\n      </div>\n    <% end %>\n  </div>\n<% else %>\n  <%= raw t('groups.index.instructions') %>\n  <div class=\"smallMarginTop\">\n    <div class=\"title\">\n      <%= t('pages.faq.group_question') %>\n    </div>\n    <%= raw t('pages.faq.group_answer', {\n      group: t('groups.singular')\n    }) %>\n  </div>\n<% end %>\n\n<% if @available_groups.any? %>\n  <div class=\"smallMarginTop\">\n    <div class=\"title\">\n      <%= t('groups.index.available_groups') %>\n    </div>\n    <div class=\"gridTwo\">\n      <% @available_groups.each do |group| %>\n        <div class=\"gridTwoItemBoxLight\">\n          <%= react_component('Story', html_options: html_options, props: {\n            name: group.name,\n            link: url_for(group),\n            actions: {\n              join: {\n                name: t('common.actions.join'),\n                link: group_membership_path(group_id: group.id, id: 'join'),\n                dataMethod: 'post'\n              }\n            }\n          }) %>\n        </div>\n      <% end %>\n    </div>\n  </div>\n<% end %>\n", "// @flow\nimport LazyLoad from 'react-lazyload';\nimport React from 'react';\nimport css from './Avatar.scss';\n\nexport type Props = {\n  name?: string,\n  src?: string,\n  alt?: string,\n  small?: boolean,\n  large?: boolean,\n};\n\nconst displayImage = (alt: ?string, src: string) => (\n  <img alt={alt ?? ''} className={`${css.image}`} src={src} />\n);\n\nconst displayName = (name: string) => (\n  <div className={`${css.name} name`}>{name}</div>\n);\n\nconst getHeight = (small: ?boolean, large: ?boolean) => {\n  if (small) return 50;\n  if (large) return 150;\n  return 100;\n};\n\nexport const Avatar = (props: Props) => {\n  const {\n    name, alt, src, small, large,\n  } = props;\n  const height = getHeight(small, large);\n  return (\n    <div\n      className={`avatar ${css.avatar} ${large ? css.large : ''} ${\n        small ? css.small : ''\n      }`}\n    >\n      <LazyLoad height={height} offset={height} once tabIndex={0}>\n        {src ? (\n          displayImage(alt, src)\n        ) : (\n          <div className={css.image} aria-hidden />\n        )}\n      </LazyLoad>\n      {name && displayName(name)}\n    </div>\n  );\n};\n", "// @flow\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sanitize } from 'dompurify';\nimport ReactDOMServer from 'react-dom/server';\nimport { init, exec } from 'pell';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLink } from '@fortawesome/free-solid-svg-icons';\nimport css from './InputTextarea.scss';\nimport inputCss from './Input.scss';\n\nconst handleResult = (type: string) => {\n  switch (type) {\n    case 'link': {\n      const url = window.prompt('URL');\n      if (url) exec('createLink', url);\n      break;\n    }\n    case 'olist':\n      exec('insertOrderedList');\n      break;\n    case 'ulist':\n      exec('insertUnorderedList');\n      break;\n    default:\n      exec(type);\n      break;\n  }\n  return false;\n};\n\nconst action = (type: string) => ({\n  name: type,\n  result: () => handleResult(type),\n});\n\nconst actions = [\n  action('bold'),\n  action('italic'),\n  action('underline'),\n  action('strikethrough'),\n  action('olist'),\n  action('ulist'),\n  {\n    ...action('link'),\n    icon: ReactDOMServer.renderToString(<FontAwesomeIcon icon={faLink} />),\n  },\n];\n\nconst classes = {\n  button: css.button,\n  selected: css.buttonSelected,\n  content: `editorContent ${css.content}`,\n};\n\nexport type Props = {\n  id: string,\n  name?: string,\n  value?: any,\n  required?: boolean,\n  hasError?: Function,\n  myRef?: any,\n  dark?: boolean,\n};\n\nexport function InputTextarea(props: Props) {\n  const {\n    id, name, value: propValue, required, hasError, myRef, dark,\n  } = props;\n  const [value, setValue] = useState<string>(sanitize(propValue) || '');\n  const editorRef = useRef(null);\n  const editor = useRef(null);\n\n  const onChange = (updatedValue: string) => {\n    setValue(sanitize(updatedValue));\n  };\n\n  const onBlur = () => {\n    if (required && hasError) {\n      hasError(!value || value === '<p><br></p>');\n    }\n  };\n\n  const onFocus = () => {\n    if (required && hasError) {\n      hasError(false);\n    }\n    if (editorRef.current) {\n      editorRef.current.getElementsByClassName('editorContent')[0].focus();\n    }\n  };\n\n  const onPaste = (e) => {\n    e.preventDefault();\n\n    const text = (e.originalEvent || e).clipboardData.getData('text/plain') ?? '';\n\n    document.execCommand('insertHTML', false, sanitize(text));\n  };\n\n  useEffect(() => {\n    if (editorRef.current) {\n      editor.current = init({\n        element: editorRef.current.getElementsByClassName('editor')[0],\n        onChange,\n        classes,\n        actions,\n      });\n      editor.current.content.innerHTML = value;\n    }\n  }, []);\n\n  return (\n    <div\n      id={id}\n      className={`${inputCss.default} ${dark ? css.dark : ''}`}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      onPaste={onPaste}\n      tabIndex={0}\n      role=\"textbox\"\n      ref={editorRef}\n    >\n      <div className={`editor ${css.editor}`} />\n      <input\n        type=\"hidden\"\n        value={value}\n        name={name}\n        required={required}\n        ref={myRef}\n      />\n    </div>\n  );\n}\n"], "filenames": ["app/views/groups/index.html.erb", "client/app/components/Avatar/index.jsx", "client/app/components/Input/InputTextarea.jsx"], "buggy_code_start_loc": [51, 35, 2], "buggy_code_end_loc": [68, 36, 99], "fixing_code_start_loc": [51, 35, 3], "fixing_code_end_loc": [72, 38, 98], "type": "CWE-79", "message": "In \u201cifme\u201d, versions 1.0.0 to v7.31.4 are vulnerable against stored XSS vulnerability in the markdown editor. It can be exploited by making a victim a Leader of a group which triggers the payload for them.", "other": {"cve": {"id": "CVE-2021-25989", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-12-29T09:15:09.267", "lastModified": "2022-01-06T20:27:54.957", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In \u201cifme\u201d, versions 1.0.0 to v7.31.4 are vulnerable against stored XSS vulnerability in the markdown editor. It can be exploited by making a victim a Leader of a group which triggers the payload for them."}, {"lang": "es", "value": "En \"ifme\", versiones 1.0.0 a v7.31.4, son vulnerables contra una vulnerabilidad de tipo XSS almacenada en el editor markdown. Puede ser explotada al hacer que la v\u00edctima sea l\u00edder de un grupo que desencadena una carga \u00fatil para ellos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:if-me:ifme:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndIncluding": "7.31.4", "matchCriteriaId": "BBBE8184-93D5-4631-8C5F-61E5A0A3CA3B"}]}]}], "references": [{"url": "https://github.com/ifmeorg/ifme/commit/df4986f0721a72779403d21d36c025fe95edffad", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25989", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ifmeorg/ifme/commit/df4986f0721a72779403d21d36c025fe95edffad"}}