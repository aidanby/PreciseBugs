{"buggy_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Defines the OpenofficeDocument class, which is meant as a conversion\n * tool from Office presentations (.ppt, .sxi, .odp, .pptx) to\n * learning paths.\n *\n * @package chamilo.learnpath\n *\n * @author  Eric Marguin <eric.marguin@dokeos.com>\n * @license GNU/GPL\n */\n\n/**\n * Defines the \"OpenofficePresentation\" child of class \"OpenofficeDocument\".\n */\nrequire_once 'openoffice_document.class.php';\n\nif (api_get_setting('search_enabled') == 'true') {\n    require_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n}\n\nclass OpenofficePresentation extends OpenofficeDocument\n{\n    public $take_slide_name;\n\n    public function __construct($take_slide_name = false, $course_code = null, $resource_id = null, $user_id = null)\n    {\n        $this->take_slide_name = $take_slide_name;\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    public function make_lp($files = [])\n    {\n        $_course = api_get_course_info();\n        $previous = 0;\n        $i = 0;\n\n        if (!is_dir($this->base_work_dir.$this->created_dir)) {\n            return false;\n        }\n        $dir = $this->created_dir;\n        if (substr($dir, -1, 1) !== '/') {\n            $dir .= '/';\n        }\n\n        foreach ($files as $file) {\n            /* '||' is used as separator between fields:\n                slide name (with accents) || file name (without accents) || all slide text (to be indexed).\n            */\n            list($slide_name, $file_name, $slide_body) = explode('||', $file);\n            // Filename is utf8 encoded, but when we decode, some chars are not translated (like quote &rsquo;).\n            // so we remove these chars by translating it in htmlentities and the reconvert it in want charset.\n            $slide_name = api_htmlentities($slide_name, ENT_COMPAT, $this->original_charset);\n            $slide_name = str_replace('&rsquo;', '\\'', $slide_name);\n            $slide_name = api_convert_encoding($slide_name, api_get_system_encoding(), $this->original_charset);\n            $slide_name = api_html_entity_decode($slide_name, ENT_COMPAT, api_get_system_encoding());\n\n            if ($this->take_slide_name === true) {\n                $slide_name = str_replace('_', ' ', $slide_name);\n                $slide_name = api_ucfirst($slide_name);\n            } else {\n                $slide_name = 'slide'.str_repeat('0', 2 - strlen($i)).$i;\n            }\n\n            if (!is_file($this->base_work_dir.$dir.$file_name) or filesize($this->base_work_dir.$dir.$file_name) == 0) {\n                continue;\n            }\n\n            $i++;\n            if (substr($file_name, -1, 1) == '/') {\n                $file_name = substr($file_name, 0, -1);\n            }\n            // Add the png to documents.\n            $document_id = add_document(\n                $_course,\n                $dir.urlencode($file_name),\n                'file',\n                filesize($this->base_work_dir.$dir.$file_name),\n                $slide_name\n            );\n\n            api_item_property_update(\n                $_course,\n                TOOL_DOCUMENT,\n                $document_id,\n                'DocumentAdded',\n                api_get_user_id(),\n                0,\n                0,\n                null,\n                null,\n                api_get_session_id()\n            );\n\n            // Generating the thumbnail.\n            $image = $this->base_work_dir.$dir.$file_name;\n\n            $pattern = '/(\\w+)\\.png$/';\n            $replacement = '${1}_thumb.png';\n            $thumb_name = preg_replace($pattern, $replacement, $file_name);\n\n            // Calculate thumbnail size.\n            $image_size = api_getimagesize($image);\n            $width = $image_size['width'];\n            $height = $image_size['height'];\n\n            $thumb_width = 300;\n            $thumb_height = floor($height * ($thumb_width / $width));\n\n            $my_new_image = new Image($image);\n            $my_new_image->resize($thumb_width, $thumb_height);\n            $my_new_image->send_image($this->base_work_dir.$dir.$thumb_name, -1, 'png');\n\n            // Adding the thumbnail to documents.\n            $document_id_thumb = add_document(\n                $_course,\n                $dir.urlencode($thumb_name),\n                'file',\n                filesize($this->base_work_dir.$dir.$thumb_name),\n                $slide_name\n            );\n\n            api_item_property_update(\n                $_course,\n                TOOL_THUMBNAIL,\n                $document_id_thumb,\n                'DocumentAdded',\n                api_get_user_id(),\n                0,\n                0\n            );\n\n            // Create an html file.\n            $html_file = $file_name.'.html';\n            $fp = fopen($this->base_work_dir.$dir.$html_file, 'w+');\n\n            if (substr($dir, 0, 1) != '/') {\n                $dir = '/'.$dir;\n            }\n            $slide_src = api_get_path(REL_COURSE_PATH).$_course['path'].'/document'.$dir.utf8_encode($file_name);\n            $slide_src = str_replace('\\/\\/', '/', $slide_src);\n            fwrite(\n                $fp,\n'<html>\n    <head>\n      <title>'.$slide_name.'</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <link href=\"'.api_get_path(WEB_PUBLIC_PATH).'assets/bootstrap/dist/css/bootstrap.min.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n    </head>\n    <body>\n        <img class=\"img-responsive\" alt=\"'.htmlspecialchars($slide_name.'\"', ENT_QUOTES).'\" src=\"'.$slide_src.'\" />\n    </body>\n</html>'\n            ); // This indentation is to make the generated html files to look well.\n\n            fclose($fp);\n            $document_id = add_document(\n                $_course,\n                $dir.urlencode($html_file),\n                'file',\n                filesize($this->base_work_dir.$dir.$html_file),\n                $slide_name\n            );\n\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $previous = $this->add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = intval($previous);\n                }\n            }\n            // Code for text indexing.\n            if (api_get_setting('search_enabled') == 'true') {\n                if (isset($_POST['index_document']) && $_POST['index_document']) {\n                    $di = new ChamiloIndexer();\n                    isset($_POST['language']) ? $lang = Database::escape_string($_POST['language']) : $lang = 'english';\n                    $di->connectDb(null, null, $lang);\n                    $ic_slide = new IndexableChunk();\n                    $ic_slide->addValue('title', $slide_name);\n                    $specific_fields = get_specific_field_list();\n                    $all_specific_terms = '';\n                    foreach ($specific_fields as $specific_field) {\n                        if (isset($_REQUEST[$specific_field['code']])) {\n                            $sterms = trim($_REQUEST[$specific_field['code']]);\n                            $all_specific_terms .= ' '.$sterms;\n                            if (!empty($sterms)) {\n                                $sterms = explode(',', $sterms);\n                                foreach ($sterms as $sterm) {\n                                    $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                }\n                            }\n                        }\n                    }\n                    $slide_body = $all_specific_terms.' '.$slide_body;\n                    $ic_slide->addValue('content', $slide_body);\n                    /* FIXME:  cidReq:lp_id:doc_id al indexar  */\n                    // Add a comment to say terms separated by commas.\n                    $courseid = api_get_course_id();\n                    $ic_slide->addCourseId($courseid);\n                    $ic_slide->addToolId(TOOL_LEARNPATH);\n                    $lp_id = $this->lp_id;\n                    $xapian_data = [\n                        SE_COURSE_ID => $courseid,\n                        SE_TOOL_ID => TOOL_LEARNPATH,\n                        SE_DATA => ['lp_id' => $lp_id, 'lp_item' => $previous, 'document_id' => $document_id],\n                        SE_USER => (int) api_get_user_id(),\n                    ];\n                    $ic_slide->xapian_data = serialize($xapian_data);\n                    $di->addChunk($ic_slide);\n                    // Index and return search engine document id.\n                    $did = $di->index();\n                    if ($did) {\n                        // Save it to db.\n                        $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                        $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                            VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                        $sql = sprintf($sql, $tbl_se_ref, api_get_course_id(), TOOL_LEARNPATH, $lp_id, $previous, $did);\n                        Database::query($sql);\n                    }\n                }\n            }\n        }\n    }\n\n    public function add_command_parameters()\n    {\n        if (empty($this->slide_width) || empty($this->slide_height)) {\n            list($w, $h) = explode('x', api_get_setting('service_ppt2lp', 'size'));\n\n            $this->slide_width = (int) $w;\n            $this->slide_height = (int) $h;\n        }\n\n        return ' -w '.$this->slide_width.' -h '.$this->slide_height.' -d oogie \"'\n            .Security::sanitizeExecParam($this->base_work_dir.'/'.$this->file_path)\n            .'\"  \"'\n            .Security::sanitizeExecParam($this->base_work_dir.$this->created_dir.'.html')\n            .'\"';\n    }\n\n    public function set_slide_size($width, $height)\n    {\n        $this->slide_width = (int) $width;\n        $this->slide_height = (int) $height;\n    }\n\n    public function add_docs_to_visio($files = [])\n    {\n        $_course = api_get_course_info();\n        foreach ($files as $file) {\n            // '||' is used as separator between slide name (with accents) and file name (without accents).\n            list($slide_name, $file_name) = explode('||', $file);\n            $slide_name = api_htmlentities($slide_name, ENT_COMPAT, $this->original_charset);\n            $slide_name = str_replace('&rsquo;', '\\'', $slide_name);\n            $slide_name = api_convert_encoding($slide_name, api_get_system_encoding(), $this->original_charset);\n            $slide_name = api_html_entity_decode($slide_name, ENT_COMPAT, api_get_system_encoding());\n            $did = add_document(\n                $_course,\n                $this->created_dir.'/'.urlencode($file_name),\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.'/'.$file_name),\n                $slide_name\n            );\n            if ($did) {\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $did,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    null,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n            }\n        }\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Defines the OpenofficeDocument class, which is meant as a conversion\n * tool from Office text documents (.doc, .sxw, .odt, .docx) to\n * learning paths.\n *\n * @package chamilo.learnpath\n *\n * @author  Eric Marguin <eric.marguin@dokeos.com>\n * @license GNU/GPL\n */\n\n/**\n * Defines the \"OpenofficeText\" child of class \"learnpath\".\n */\nrequire_once 'openoffice_document.class.php';\nif (api_get_setting('search_enabled') == 'true') {\n    require_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n}\n\n/**\n * @package chamilo.learnpath.OpenofficeDocument\n */\nclass OpenofficeText extends OpenofficeDocument\n{\n    public $split_steps;\n\n    /**\n     * Class constructor. Calls the parent class and initialises the local attribute split_steps.\n     *\n     * @param    bool    Whether to split steps (true) or make one large page (false)\n     * @param    string    Course code\n     * @param    int    Resource ID\n     * @param    int Creator user id\n     */\n    public function __construct(\n        $split_steps = false,\n        $course_code = null,\n        $resource_id = null,\n        $user_id = null\n    ) {\n        $this->split_steps = $split_steps;\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    /**\n     * Gets html pages and compose them into a learning path.\n     *\n     * @param    array    The files that will compose the generated learning path. Unused so far.\n     *\n     * @return bool False if file does not exit. Nothing otherwise.\n     */\n    public function make_lp($files = [])\n    {\n        $_course = api_get_course_info();\n        // We get a content where ||page_break|| indicates where the page is broken.\n        if (!file_exists($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html')) {\n            return false;\n        }\n        $content = file_get_contents($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        unlink($this->base_work_dir.'/'.$this->file_path);\n        unlink($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        // The file is utf8 encoded and it seems to make problems with special quotes.\n        // Then we htmlentities that, we replace these quotes and html_entity_decode that in good charset.\n        $charset = api_get_system_encoding();\n        $content = api_htmlentities($content, ENT_COMPAT, $this->original_charset);\n        $content = str_replace('&rsquo;', '\\'', $content);\n        $content = api_convert_encoding($content, $charset, $this->original_charset);\n        $content = str_replace($this->original_charset, $charset, $content);\n        $content = api_html_entity_decode($content, ENT_COMPAT, $charset);\n\n        // Set the path to pictures to absolute (so that it can be modified in fckeditor).\n        $content = preg_replace(\n            \"|src=\\\"([^\\\"]*)|i\",\n            \"src=\\\"\".api_get_path(REL_COURSE_PATH).$_course['path'].'/document'.$this->created_dir.\"/\\\\1\",\n            $content\n        );\n\n        list($header, $body) = explode('<BODY', $content);\n\n        $body = '<BODY'.$body;\n\n        // Remove font-family styles.\n        $header = preg_replace(\"|font\\-family[^;]*;|i\", '', $header);\n\n        // Chamilo styles.\n        $my_style = api_get_setting('stylesheets');\n        if (empty($my_style)) {\n            $my_style = 'chamilo';\n        }\n        $style_to_import = \"<style type=\\\"text/css\\\">\\r\\n\";\n        $style_to_import .= '@import \"'.api_get_path(WEB_CODE_PATH).'css/'.$my_style.'/default.css\";'.\"\\n\";\n        $style_to_import .= \"</style>\\r\\n\";\n        $header = preg_replace(\"|</head>|i\", \"\\r\\n$style_to_import\\r\\n\\\\0\", $header);\n\n        // Line break before and after picture.\n        $header = str_replace('p {', 'p {clear:both;', $header);\n\n        $header = str_replace('absolute', 'relative', $header);\n\n        switch ($this->split_steps) {\n            case 'per_page':\n                $this->dealPerPage($header, $body);\n                break;\n            case 'per_chapter':\n                $this->dealPerChapter($header, $body);\n                break;\n        }\n    }\n\n    /**\n     * Manages dir/chapter splitting.\n     *\n     * @param    string    Chapter header\n     * @param    string    Content\n     */\n    public function dealPerChapter($header, $content)\n    {\n        $_course = api_get_course_info();\n        $content = str_replace('||page_break||', '', $content);\n\n        // Get all the h1.\n        preg_match_all(\"|<h1[^>]*>([^(h1)+]*)</h1>|is\", $content, $matches_temp);\n\n        // Empty the fake chapters.\n        $new_index = 0;\n        for ($i = 0; $i < count($matches_temp[0]); $i++) {\n            if (trim($matches_temp[1][$i]) !== '') {\n                $matches[0][$new_index] = $matches_temp[0][$i];\n                $matches[1][$new_index] = $matches_temp[1][$i];\n                $new_index++;\n            }\n        }\n\n        // Add intro item.\n        $intro_content = substr($content, 0, strpos($content, $matches[0][0]));\n        $items_to_create[get_lang('Introduction')] = $intro_content;\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            if (empty($matches[1][$i])) {\n                continue;\n            }\n\n            $content = strstr($content, $matches[0][$i]);\n            if ($i + 1 !== count($matches[0])) {\n                $dir_content = substr($content, 0, strpos($content, $matches[0][$i + 1]));\n            } else {\n                $dir_content = $content;\n            }\n            $items_to_create[$matches[1][$i]] = $dir_content;\n        }\n\n        $i = 0;\n        foreach ($items_to_create as $item_title => $item_content) {\n            $i++;\n            $page_content = $this->format_page_content($header, $item_content);\n\n            $html_file = $this->created_dir.'-'.$i.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.'/'.$html_file,\n                'file',\n                filesize(\n                    $this->base_work_dir.$this->created_dir.'/'.$html_file\n                ),\n                $html_file\n            );\n\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = strip_tags(nl2br($item_title));\n                $slide_name = str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], '', $slide_name);\n                $slide_name = html_entity_decode($slide_name);\n                $previous = learnpath::add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = $previous;\n                }\n            }\n        }\n    }\n\n    /**\n     * Manages page splitting.\n     *\n     * @param    string    Page header\n     * @param    string    Page body\n     */\n    public function dealPerPage($header, $body)\n    {\n        $_course = api_get_course_info();\n        // Split document to pages.\n        $pages = explode('||page_break||', $body);\n\n        $first_item = 0;\n        foreach ($pages as $key => $page_content) {\n            // For every pages, we create a new file.\n            $key++;\n            $page_content = $this->format_page_content($header, $page_content, $this->base_work_dir.$this->created_dir);\n            $html_file = $this->created_dir.'-'.$key.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.$html_file,\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.$html_file),\n                $html_file\n            );\n\n            $slide_name = '';\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = 'Page '.str_repeat('0', 2 - strlen($key)).$key;\n                $previous = learnpath::add_item(0, $previous, 'document', $document_id, $slide_name, '');\n                if ($this->first_item == 0) {\n                    $this->first_item = $previous;\n                }\n                // Code for text indexing.\n                if (api_get_setting('search_enabled') == 'true') {\n                    if (isset($_POST['index_document']) && $_POST['index_document']) {\n                        //echo Display::return_message(print_r($_POST));\n                        $di = new ChamiloIndexer();\n                        isset($_POST['language']) ? $lang = Database::escape_string(\n                            $_POST['language']\n                        ) : $lang = 'english';\n                        $di->connectDb(null, null, $lang);\n                        $ic_slide = new IndexableChunk();\n                        $ic_slide->addValue('title', $slide_name);\n                        $specific_fields = get_specific_field_list();\n                        $all_specific_terms = '';\n                        foreach ($specific_fields as $specific_field) {\n                            if (isset($_REQUEST[$specific_field['code']])) {\n                                $sterms = trim($_REQUEST[$specific_field['code']]);\n                                $all_specific_terms .= ' '.$sterms;\n                                if (!empty($sterms)) {\n                                    $sterms = explode(',', $sterms);\n                                    foreach ($sterms as $sterm) {\n                                        $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                    }\n                                }\n                            }\n                        }\n                        $page_content = $all_specific_terms.' '.$page_content;\n                        $ic_slide->addValue('content', $page_content);\n                        // Add a comment to say terms separated by commas.\n                        $courseid = api_get_course_id();\n                        $ic_slide->addCourseId($courseid);\n                        $ic_slide->addToolId(TOOL_LEARNPATH);\n                        $lp_id = $this->lp_id;\n                        $xapian_data = [\n                            SE_COURSE_ID => $courseid,\n                            SE_TOOL_ID => TOOL_LEARNPATH,\n                            SE_DATA => ['lp_id' => $lp_id, 'lp_item' => $previous, 'document_id' => $document_id],\n                            SE_USER => (int) api_get_user_id(),\n                        ];\n                        $ic_slide->xapian_data = serialize($xapian_data);\n                        $di->addChunk($ic_slide);\n                        // Index and return search engine document id.\n                        $did = $di->index();\n                        if ($did) {\n                            // Save it to db.\n                            $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                            $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                                    VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                            $sql = sprintf(\n                                $sql,\n                                $tbl_se_ref,\n                                api_get_course_id(),\n                                TOOL_LEARNPATH,\n                                $lp_id,\n                                $previous,\n                                $did\n                            );\n                            Database::query($sql);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns additional Java command parameters.\n     *\n     * @return string The additional parameters to be used in the Java call\n     */\n    public function add_command_parameters()\n    {\n        return ' -d woogie \"'\n            .Security::sanitizeExecParam($this->base_work_dir.'/'.$this->file_path)\n            .'\"  \"'\n            .Security::sanitizeExecParam($this->base_work_dir.$this->created_dir.'/'.$this->file_name.'.html')\n            .'\"';\n    }\n\n    /**\n     * Formats a page content by reorganising the HTML code a little.\n     *\n     * @param    string    Page header\n     * @param    string    Page content\n     *\n     * @return string Formatted page content\n     */\n    public function format_page_content($header, $content)\n    {\n        // Limit the width of the doc.\n        list($max_width, $max_height) = explode('x', api_get_setting('service_ppt2lp', 'size'));\n\n        $content = preg_replace(\"|<body[^>]*>|i\", \"\\\\0\\r\\n<div style=\\\"width:\".$max_width.\"\\\">\", $content, -1, $count);\n        if ($count < 1) {\n            $content = '<body><div style=\"width:'.$max_width.'\">'.$content;\n        }\n\n        $content = preg_replace('|</body>|i', '</div>\\\\0', $content, -1, $count);\n        if ($count < 1) {\n            $content = $content.'</div></body>';\n        }\n\n        // Add the headers.\n        $content = $header.$content;\n\n        // Resize all the picture to the max_width-10\n        preg_match_all(\"|<img[^src]*src=\\\"([^\\\"]*)\\\"[^>]*>|i\", $content, $images);\n\n        foreach ($images[1] as $key => $image) {\n            // Check if the <img tag soon has a width attribute.\n            $defined_width = preg_match(\"|width=([^\\s]*)|i\", $images[0][$key], $img_width);\n            $img_width = $img_width[1];\n            if (!$defined_width) {\n                list($img_width, $img_height, $type) = getimagesize($this->base_work_dir.$this->created_dir.'/'.$image);\n\n                $new_width = $max_width - 10;\n                if ($img_width > $new_width) {\n                    $picture_resized = str_ireplace('<img', '<img width=\"'.$new_width.'\" ', $images[0][$key]);\n                    $content = str_replace($images[0][$key], $picture_resized, $content);\n                }\n            } elseif ($img_width > $max_width - 10) {\n                $picture_resized = str_ireplace('width='.$img_width, 'width=\"'.($max_width - 10).'\"', $images[0][$key]);\n                $content = str_replace($images[0][$key], $picture_resized, $content);\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Add documents to the visioconference (to be implemented).\n     */\n    public function add_docs_to_visio()\n    {\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Defines the OpenOfficeDocument class, which is meant as a conversion\n * tool from Office text documents (.doc, .sxw, .odt, .docx) to\n * learning paths.\n *\n * @package chamilo.learnpath\n *\n * @author  Eric Marguin <eric.marguin@dokeos.com>\n * @license GNU/GPL\n */\n/**\n * Defines the \"OpenOfficeTextDocument\" child of class \"learnpath\".\n */\nrequire_once 'openoffice_document.class.php';\nrequire_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n\n/**\n * @package chamilo.learnpath.openofficedocument\n */\nclass OpenOfficeTextDocument extends OpenofficeDocument\n{\n    public $split_steps;\n\n    /**\n     * Class constructor. Calls the parent class and initialises the local attribute split_steps.\n     *\n     * @param    bool    Whether to split steps (true) or make one large page (false)\n     * @param    string    Course code\n     * @param    int    Resource ID\n     * @param    int Creator user id\n     */\n    public function __construct(\n        $split_steps = false,\n        $course_code = null,\n        $resource_id = null,\n        $user_id = null\n    ) {\n        $this->split_steps = $split_steps;\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    /**\n     * Gets html pages and compose them into a learning path.\n     *\n     * @param    array    The files that will compose the generated learning path. Unused so far.\n     *\n     * @return bool False if file does not exit. Nothing otherwise.\n     */\n    public function make_lp($files = [])\n    {\n        $_course = api_get_course_info();\n        // We get a content where ||page_break|| indicates where the page is broken.\n        if (!file_exists($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html')) {\n            return false;\n        }\n        $content = file_get_contents($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        unlink($this->base_work_dir.'/'.$this->file_path);\n        unlink($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        // The file is utf8 encoded and it seems to make problems with special quotes.\n        // then we htmlentities that, we replace these quotes and html_entity_decode that in good charset.\n        $charset = api_get_system_encoding();\n        $content = api_htmlentities($content, ENT_COMPAT, $this->original_charset);\n        $content = str_replace('&rsquo;', '\\'', $content);\n        $content = api_convert_encoding($content, $charset, $this->original_charset);\n        $content = str_replace($this->original_charset, $charset, $content);\n        $content = api_html_entity_decode($content, ENT_COMPAT, $charset);\n\n        // Set the path to pictures to absolute (so that it can be modified in fckeditor).\n        $content = preg_replace(\"|src=\\\"([^\\\"]*)|i\", \"src=\\\"\".api_get_path(REL_COURSE_PATH).$_course['path'].'/document'.$this->created_dir.\"/\\\\1\", $content);\n\n        list($header, $body) = explode('<BODY', $content);\n\n        $body = '<BODY'.$body;\n\n        // Remove font-family styles.\n        $header = preg_replace(\"|font\\-family[^;]*;|i\", '', $header);\n\n        // Chamilo styles.\n        $my_style = api_get_setting('stylesheets');\n        if (empty($my_style)) {\n            $my_style = 'chamilo';\n        }\n        $style_to_import = \"<style type=\\\"text/css\\\">\\r\\n\";\n        $style_to_import .= '@import \"'.api_get_path(WEB_CODE_PATH).'css/'.$my_style.'/default.css\";'.\"\\n\";\n        $style_to_import .= \"</style>\\r\\n\";\n        $header = preg_replace(\"|</head>|i\", \"\\r\\n$style_to_import\\r\\n\\\\0\", $header);\n\n        // Line break before and after picture.\n        $header = str_replace('p {', 'p {clear:both;', $header);\n\n        $header = str_replace('absolute', 'relative', $header);\n\n        switch ($this->split_steps) {\n            case 'per_page':\n                $this->dealPerPage($header, $body);\n                break;\n            case 'per_chapter':\n                $this->dealPerChapter($header, $body);\n                break;\n        }\n    }\n\n    /**\n     * Manages dir/chapter splitting.\n     *\n     * @param    string    Chapter header\n     * @param    string    Content\n     */\n    public function dealPerChapter($header, $content)\n    {\n        $_course = api_get_course_info();\n        $content = str_replace('||page_break||', '', $content);\n\n        // Get all the h1.\n        preg_match_all(\"|<h1[^>]*>([^(h1)+]*)</h1>|is\", $content, $matches_temp);\n\n        // Empty the fake dir/chapters.\n        $new_index = 0;\n        for ($i = 0; $i < count($matches_temp[0]); $i++) {\n            if (trim($matches_temp[1][$i]) !== '') {\n                $matches[0][$new_index] = $matches_temp[0][$i];\n                $matches[1][$new_index] = $matches_temp[1][$i];\n                $new_index++;\n            }\n        }\n\n        // Add intro item.\n        $intro_content = api_substr($content, 0, api_strpos($content, $matches[0][0]));\n        $items_to_create[get_lang('Introduction')] = $intro_content;\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            if (empty($matches[1][$i])) {\n                continue;\n            }\n\n            $content = api_strstr($content, $matches[0][$i]);\n            if ($i + 1 !== count($matches[0])) {\n                $dir_content = api_substr($content, 0, api_strpos($content, $matches[0][$i + 1]));\n            } else {\n                $dir_content = $content;\n            }\n            $items_to_create[$matches[1][$i]] = $dir_content;\n        }\n\n        $i = 0;\n        $previous = 0; // @todo define this variable properly\n        foreach ($items_to_create as $item_title => $item_content) {\n            $i++;\n            $page_content = $this->format_page_content($header, $item_content);\n\n            $html_file = $this->created_dir.'-'.$i.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.'/'.$html_file,\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.'/'.$html_file),\n                $html_file\n            );\n\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = strip_tags(nl2br($item_title));\n                $slide_name = str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], '', $slide_name);\n                $slide_name = api_html_entity_decode($slide_name, ENT_COMPAT, api_get_system_encoding());\n                $previous = learnpath::add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = (int) $previous;\n                }\n            }\n        }\n    }\n\n    /**\n     * Manages page splitting.\n     *\n     * @param    string    Page header\n     * @param    string    Page body\n     */\n    public function dealPerPage($header, $body)\n    {\n        $_course = api_get_course_info();\n        // Split document to pages.\n        $pages = explode('||page_break||', $body);\n        foreach ($pages as $key => $page_content) {\n            // For every pages, we create a new file.\n            $key++;\n            $page_content = $this->format_page_content(\n                $header,\n                $page_content,\n                $this->base_work_dir.$this->created_dir\n            );\n            $html_file = $this->created_dir.'-'.$key.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.$html_file,\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.$html_file),\n                $html_file\n            );\n\n            $slide_name = '';\n            $previous = 0; // @todo define this variable properly\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = 'Page '.str_repeat('0', 2 - strlen($key)).$key;\n                $previous = learnpath::add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = (int) $previous;\n                }\n                // Code for text indexing.\n                if (isset($_POST['index_document']) && $_POST['index_document']) {\n                    //echo Display::return_message(print_r($_POST));\n                    $di = new ChamiloIndexer();\n                    isset($_POST['language']) ? $lang = Database::escape_string($_POST['language']) : $lang = 'english';\n                    $di->connectDb(null, null, $lang);\n                    $ic_slide = new IndexableChunk();\n                    $ic_slide->addValue('title', $slide_name);\n                    $specific_fields = get_specific_field_list();\n                    $all_specific_terms = '';\n                    foreach ($specific_fields as $specific_field) {\n                        if (isset($_REQUEST[$specific_field['code']])) {\n                            $sterms = trim($_REQUEST[$specific_field['code']]);\n                            $all_specific_terms .= ' '.$sterms;\n                            if (!empty($sterms)) {\n                                $sterms = explode(',', $sterms);\n                                foreach ($sterms as $sterm) {\n                                    $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                }\n                            }\n                        }\n                    }\n                    $page_content = $all_specific_terms.' '.$page_content;\n                    $ic_slide->addValue('content', $page_content);\n                    // Add a comment to say terms separated by commas.\n                    $courseid = api_get_course_id();\n                    $ic_slide->addCourseId($courseid);\n                    $ic_slide->addToolId(TOOL_LEARNPATH);\n                    $lp_id = $this->lp_id;\n                    $xapian_data = [\n                        SE_COURSE_ID => $courseid,\n                        SE_TOOL_ID => TOOL_LEARNPATH,\n                        SE_DATA => [\n                            'lp_id' => $lp_id,\n                            'lp_item' => $previous,\n                            'document_id' => $document_id,\n                        ],\n                        SE_USER => (int) api_get_user_id(),\n                    ];\n                    $ic_slide->xapian_data = serialize($xapian_data);\n                    $di->addChunk($ic_slide);\n                    // Index and return search engine document id.\n                    $did = $di->index();\n                    if ($did) {\n                        // Save it to db.\n                        $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                        $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                                VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                        $sql = sprintf(\n                            $sql,\n                            $tbl_se_ref,\n                            api_get_course_id(),\n                            TOOL_LEARNPATH,\n                            $lp_id,\n                            $previous,\n                            $did\n                        );\n                        Database::query($sql);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns additional Java command parameters.\n     *\n     * @return string The additional parameters to be used in the Java call\n     */\n    public function add_command_parameters()\n    {\n        return ' -d woogie \"'\n            .Security::sanitizeExecParam($this->base_work_dir.'/'.$this->file_path)\n            .'\"  \"'\n            .Security::sanitizeExecParam($this->base_work_dir.$this->created_dir.'/'.$this->file_name.'.html')\n            .'\"';\n    }\n\n    /**\n     * Formats a page content by reorganising the HTML code a little.\n     *\n     * @param    string    Page header\n     * @param    string    Page content\n     *\n     * @return string Formatted page content\n     */\n    public function format_page_content($header, $content)\n    {\n        // Limit the width of the doc.\n        list($max_width, $max_height) = explode('x', api_get_setting('service_ppt2lp', 'size'));\n\n        $content = preg_replace(\"|<body[^>]*>|i\", \"\\\\0\\r\\n<div style=\\\"width:\".$max_width.\"\\\">\", $content, -1, $count);\n        if ($count < 1) {\n            $content = '<body><div style=\"width:'.$max_width.'\">'.$content;\n        }\n\n        $content = preg_replace('|</body>|i', '</div>\\\\0', $content, -1, $count);\n        if ($count < 1) {\n            $content = $content.'</div></body>';\n        }\n\n        // Add the headers.\n        $content = $header.$content;\n\n        // Resize all the picture to the max_width-10\n        preg_match_all(\"|<img[^src]*src=\\\"([^\\\"]*)\\\"[^>]*>|i\", $content, $images);\n\n        foreach ($images[1] as $key => $image) {\n            // Check if the <img tag soon has a width attribute.\n            $defined_width = preg_match(\"|width=([^\\s]*)|i\", $images[0][$key], $img_width);\n            $img_width = $img_width[1];\n            if (!$defined_width) {\n                $image_size = api_getimagesize($this->base_work_dir.$this->created_dir.'/'.$image);\n                $img_width = $image_size['width'];\n                $img_height = $image_size['height'];\n\n                $new_width = $max_width - 10;\n                if ($img_width > $new_width) {\n                    $picture_resized = str_ireplace('<img', '<img width=\"'.$new_width.'\" ', $images[0][$key]);\n                    $content = str_replace($images[0][$key], $picture_resized, $content);\n                }\n            } elseif ($img_width > $max_width - 10) {\n                $picture_resized = str_ireplace(\n                    'width='.$img_width,\n                    'width=\"'.($max_width - 10).'\"',\n                    $images[0][$key]\n                );\n                $content = str_replace(\n                    $images[0][$key],\n                    $picture_resized,\n                    $content\n                );\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Add documents to the visioconference (to be implemented).\n     */\n    public function add_docs_to_visio()\n    {\n    }\n}\n"], "fixing_code": ["<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Defines the OpenofficeDocument class, which is meant as a conversion\n * tool from Office presentations (.ppt, .sxi, .odp, .pptx) to\n * learning paths.\n *\n * @package chamilo.learnpath\n *\n * @author  Eric Marguin <eric.marguin@dokeos.com>\n * @license GNU/GPL\n */\n\n/**\n * Defines the \"OpenofficePresentation\" child of class \"OpenofficeDocument\".\n */\nrequire_once 'openoffice_document.class.php';\n\nif (api_get_setting('search_enabled') == 'true') {\n    require_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n}\n\nclass OpenofficePresentation extends OpenofficeDocument\n{\n    public $take_slide_name;\n\n    public function __construct($take_slide_name = false, $course_code = null, $resource_id = null, $user_id = null)\n    {\n        $this->take_slide_name = $take_slide_name;\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    public function make_lp($files = [])\n    {\n        $_course = api_get_course_info();\n        $previous = 0;\n        $i = 0;\n\n        if (!is_dir($this->base_work_dir.$this->created_dir)) {\n            return false;\n        }\n        $dir = $this->created_dir;\n        if (substr($dir, -1, 1) !== '/') {\n            $dir .= '/';\n        }\n\n        foreach ($files as $file) {\n            /* '||' is used as separator between fields:\n                slide name (with accents) || file name (without accents) || all slide text (to be indexed).\n            */\n            list($slide_name, $file_name, $slide_body) = explode('||', $file);\n            // Filename is utf8 encoded, but when we decode, some chars are not translated (like quote &rsquo;).\n            // so we remove these chars by translating it in htmlentities and the reconvert it in want charset.\n            $slide_name = api_htmlentities($slide_name, ENT_COMPAT, $this->original_charset);\n            $slide_name = str_replace('&rsquo;', '\\'', $slide_name);\n            $slide_name = api_convert_encoding($slide_name, api_get_system_encoding(), $this->original_charset);\n            $slide_name = api_html_entity_decode($slide_name, ENT_COMPAT, api_get_system_encoding());\n\n            if ($this->take_slide_name === true) {\n                $slide_name = str_replace('_', ' ', $slide_name);\n                $slide_name = api_ucfirst($slide_name);\n            } else {\n                $slide_name = 'slide'.str_repeat('0', 2 - strlen($i)).$i;\n            }\n\n            if (!is_file($this->base_work_dir.$dir.$file_name) or filesize($this->base_work_dir.$dir.$file_name) == 0) {\n                continue;\n            }\n\n            $i++;\n            if (substr($file_name, -1, 1) == '/') {\n                $file_name = substr($file_name, 0, -1);\n            }\n            // Add the png to documents.\n            $document_id = add_document(\n                $_course,\n                $dir.urlencode($file_name),\n                'file',\n                filesize($this->base_work_dir.$dir.$file_name),\n                $slide_name\n            );\n\n            api_item_property_update(\n                $_course,\n                TOOL_DOCUMENT,\n                $document_id,\n                'DocumentAdded',\n                api_get_user_id(),\n                0,\n                0,\n                null,\n                null,\n                api_get_session_id()\n            );\n\n            // Generating the thumbnail.\n            $image = $this->base_work_dir.$dir.$file_name;\n\n            $pattern = '/(\\w+)\\.png$/';\n            $replacement = '${1}_thumb.png';\n            $thumb_name = preg_replace($pattern, $replacement, $file_name);\n\n            // Calculate thumbnail size.\n            $image_size = api_getimagesize($image);\n            $width = $image_size['width'];\n            $height = $image_size['height'];\n\n            $thumb_width = 300;\n            $thumb_height = floor($height * ($thumb_width / $width));\n\n            $my_new_image = new Image($image);\n            $my_new_image->resize($thumb_width, $thumb_height);\n            $my_new_image->send_image($this->base_work_dir.$dir.$thumb_name, -1, 'png');\n\n            // Adding the thumbnail to documents.\n            $document_id_thumb = add_document(\n                $_course,\n                $dir.urlencode($thumb_name),\n                'file',\n                filesize($this->base_work_dir.$dir.$thumb_name),\n                $slide_name\n            );\n\n            api_item_property_update(\n                $_course,\n                TOOL_THUMBNAIL,\n                $document_id_thumb,\n                'DocumentAdded',\n                api_get_user_id(),\n                0,\n                0\n            );\n\n            // Create an html file.\n            $html_file = $file_name.'.html';\n            $fp = fopen($this->base_work_dir.$dir.$html_file, 'w+');\n\n            if (substr($dir, 0, 1) != '/') {\n                $dir = '/'.$dir;\n            }\n            $slide_src = api_get_path(REL_COURSE_PATH).$_course['path'].'/document'.$dir.utf8_encode($file_name);\n            $slide_src = str_replace('\\/\\/', '/', $slide_src);\n            fwrite(\n                $fp,\n'<html>\n    <head>\n      <title>'.$slide_name.'</title>\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <link href=\"'.api_get_path(WEB_PUBLIC_PATH).'assets/bootstrap/dist/css/bootstrap.min.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" />\n    </head>\n    <body>\n        <img class=\"img-responsive\" alt=\"'.htmlspecialchars($slide_name.'\"', ENT_QUOTES).'\" src=\"'.$slide_src.'\" />\n    </body>\n</html>'\n            ); // This indentation is to make the generated html files to look well.\n\n            fclose($fp);\n            $document_id = add_document(\n                $_course,\n                $dir.urlencode($html_file),\n                'file',\n                filesize($this->base_work_dir.$dir.$html_file),\n                $slide_name\n            );\n\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $previous = $this->add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = intval($previous);\n                }\n            }\n            // Code for text indexing.\n            if (api_get_setting('search_enabled') == 'true') {\n                if (isset($_POST['index_document']) && $_POST['index_document']) {\n                    $di = new ChamiloIndexer();\n                    isset($_POST['language']) ? $lang = Database::escape_string($_POST['language']) : $lang = 'english';\n                    $di->connectDb(null, null, $lang);\n                    $ic_slide = new IndexableChunk();\n                    $ic_slide->addValue('title', $slide_name);\n                    $specific_fields = get_specific_field_list();\n                    $all_specific_terms = '';\n                    foreach ($specific_fields as $specific_field) {\n                        if (isset($_REQUEST[$specific_field['code']])) {\n                            $sterms = trim($_REQUEST[$specific_field['code']]);\n                            $all_specific_terms .= ' '.$sterms;\n                            if (!empty($sterms)) {\n                                $sterms = explode(',', $sterms);\n                                foreach ($sterms as $sterm) {\n                                    $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                }\n                            }\n                        }\n                    }\n                    $slide_body = $all_specific_terms.' '.$slide_body;\n                    $ic_slide->addValue('content', $slide_body);\n                    /* FIXME:  cidReq:lp_id:doc_id al indexar  */\n                    // Add a comment to say terms separated by commas.\n                    $courseid = api_get_course_id();\n                    $ic_slide->addCourseId($courseid);\n                    $ic_slide->addToolId(TOOL_LEARNPATH);\n                    $lp_id = $this->lp_id;\n                    $xapian_data = [\n                        SE_COURSE_ID => $courseid,\n                        SE_TOOL_ID => TOOL_LEARNPATH,\n                        SE_DATA => ['lp_id' => $lp_id, 'lp_item' => $previous, 'document_id' => $document_id],\n                        SE_USER => (int) api_get_user_id(),\n                    ];\n                    $ic_slide->xapian_data = serialize($xapian_data);\n                    $di->addChunk($ic_slide);\n                    // Index and return search engine document id.\n                    $did = $di->index();\n                    if ($did) {\n                        // Save it to db.\n                        $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                        $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                            VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                        $sql = sprintf($sql, $tbl_se_ref, api_get_course_id(), TOOL_LEARNPATH, $lp_id, $previous, $did);\n                        Database::query($sql);\n                    }\n                }\n            }\n        }\n    }\n\n    public function add_command_parameters()\n    {\n        if (empty($this->slide_width) || empty($this->slide_height)) {\n            list($w, $h) = explode('x', api_get_setting('service_ppt2lp', 'size'));\n\n            $this->slide_width = (int) $w;\n            $this->slide_height = (int) $h;\n        }\n\n        return ' -w '.$this->slide_width.' -h '.$this->slide_height.' -d oogie '\n            .Security::sanitizeExecParam($this->base_work_dir.'/'.$this->file_path)\n            .'  '\n            .Security::sanitizeExecParam($this->base_work_dir.$this->created_dir.'.html');\n    }\n\n    public function set_slide_size($width, $height)\n    {\n        $this->slide_width = (int) $width;\n        $this->slide_height = (int) $height;\n    }\n\n    public function add_docs_to_visio($files = [])\n    {\n        $_course = api_get_course_info();\n        foreach ($files as $file) {\n            // '||' is used as separator between slide name (with accents) and file name (without accents).\n            list($slide_name, $file_name) = explode('||', $file);\n            $slide_name = api_htmlentities($slide_name, ENT_COMPAT, $this->original_charset);\n            $slide_name = str_replace('&rsquo;', '\\'', $slide_name);\n            $slide_name = api_convert_encoding($slide_name, api_get_system_encoding(), $this->original_charset);\n            $slide_name = api_html_entity_decode($slide_name, ENT_COMPAT, api_get_system_encoding());\n            $did = add_document(\n                $_course,\n                $this->created_dir.'/'.urlencode($file_name),\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.'/'.$file_name),\n                $slide_name\n            );\n            if ($did) {\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $did,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    null,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n            }\n        }\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Defines the OpenofficeDocument class, which is meant as a conversion\n * tool from Office text documents (.doc, .sxw, .odt, .docx) to\n * learning paths.\n *\n * @package chamilo.learnpath\n *\n * @author  Eric Marguin <eric.marguin@dokeos.com>\n * @license GNU/GPL\n */\n\n/**\n * Defines the \"OpenofficeText\" child of class \"learnpath\".\n */\nrequire_once 'openoffice_document.class.php';\nif (api_get_setting('search_enabled') == 'true') {\n    require_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n}\n\n/**\n * @package chamilo.learnpath.OpenofficeDocument\n */\nclass OpenofficeText extends OpenofficeDocument\n{\n    public $split_steps;\n\n    /**\n     * Class constructor. Calls the parent class and initialises the local attribute split_steps.\n     *\n     * @param    bool    Whether to split steps (true) or make one large page (false)\n     * @param    string    Course code\n     * @param    int    Resource ID\n     * @param    int Creator user id\n     */\n    public function __construct(\n        $split_steps = false,\n        $course_code = null,\n        $resource_id = null,\n        $user_id = null\n    ) {\n        $this->split_steps = $split_steps;\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    /**\n     * Gets html pages and compose them into a learning path.\n     *\n     * @param    array    The files that will compose the generated learning path. Unused so far.\n     *\n     * @return bool False if file does not exit. Nothing otherwise.\n     */\n    public function make_lp($files = [])\n    {\n        $_course = api_get_course_info();\n        // We get a content where ||page_break|| indicates where the page is broken.\n        if (!file_exists($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html')) {\n            return false;\n        }\n        $content = file_get_contents($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        unlink($this->base_work_dir.'/'.$this->file_path);\n        unlink($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        // The file is utf8 encoded and it seems to make problems with special quotes.\n        // Then we htmlentities that, we replace these quotes and html_entity_decode that in good charset.\n        $charset = api_get_system_encoding();\n        $content = api_htmlentities($content, ENT_COMPAT, $this->original_charset);\n        $content = str_replace('&rsquo;', '\\'', $content);\n        $content = api_convert_encoding($content, $charset, $this->original_charset);\n        $content = str_replace($this->original_charset, $charset, $content);\n        $content = api_html_entity_decode($content, ENT_COMPAT, $charset);\n\n        // Set the path to pictures to absolute (so that it can be modified in fckeditor).\n        $content = preg_replace(\n            \"|src=\\\"([^\\\"]*)|i\",\n            \"src=\\\"\".api_get_path(REL_COURSE_PATH).$_course['path'].'/document'.$this->created_dir.\"/\\\\1\",\n            $content\n        );\n\n        list($header, $body) = explode('<BODY', $content);\n\n        $body = '<BODY'.$body;\n\n        // Remove font-family styles.\n        $header = preg_replace(\"|font\\-family[^;]*;|i\", '', $header);\n\n        // Chamilo styles.\n        $my_style = api_get_setting('stylesheets');\n        if (empty($my_style)) {\n            $my_style = 'chamilo';\n        }\n        $style_to_import = \"<style type=\\\"text/css\\\">\\r\\n\";\n        $style_to_import .= '@import \"'.api_get_path(WEB_CODE_PATH).'css/'.$my_style.'/default.css\";'.\"\\n\";\n        $style_to_import .= \"</style>\\r\\n\";\n        $header = preg_replace(\"|</head>|i\", \"\\r\\n$style_to_import\\r\\n\\\\0\", $header);\n\n        // Line break before and after picture.\n        $header = str_replace('p {', 'p {clear:both;', $header);\n\n        $header = str_replace('absolute', 'relative', $header);\n\n        switch ($this->split_steps) {\n            case 'per_page':\n                $this->dealPerPage($header, $body);\n                break;\n            case 'per_chapter':\n                $this->dealPerChapter($header, $body);\n                break;\n        }\n    }\n\n    /**\n     * Manages dir/chapter splitting.\n     *\n     * @param    string    Chapter header\n     * @param    string    Content\n     */\n    public function dealPerChapter($header, $content)\n    {\n        $_course = api_get_course_info();\n        $content = str_replace('||page_break||', '', $content);\n\n        // Get all the h1.\n        preg_match_all(\"|<h1[^>]*>([^(h1)+]*)</h1>|is\", $content, $matches_temp);\n\n        // Empty the fake chapters.\n        $new_index = 0;\n        for ($i = 0; $i < count($matches_temp[0]); $i++) {\n            if (trim($matches_temp[1][$i]) !== '') {\n                $matches[0][$new_index] = $matches_temp[0][$i];\n                $matches[1][$new_index] = $matches_temp[1][$i];\n                $new_index++;\n            }\n        }\n\n        // Add intro item.\n        $intro_content = substr($content, 0, strpos($content, $matches[0][0]));\n        $items_to_create[get_lang('Introduction')] = $intro_content;\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            if (empty($matches[1][$i])) {\n                continue;\n            }\n\n            $content = strstr($content, $matches[0][$i]);\n            if ($i + 1 !== count($matches[0])) {\n                $dir_content = substr($content, 0, strpos($content, $matches[0][$i + 1]));\n            } else {\n                $dir_content = $content;\n            }\n            $items_to_create[$matches[1][$i]] = $dir_content;\n        }\n\n        $i = 0;\n        foreach ($items_to_create as $item_title => $item_content) {\n            $i++;\n            $page_content = $this->format_page_content($header, $item_content);\n\n            $html_file = $this->created_dir.'-'.$i.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.'/'.$html_file,\n                'file',\n                filesize(\n                    $this->base_work_dir.$this->created_dir.'/'.$html_file\n                ),\n                $html_file\n            );\n\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = strip_tags(nl2br($item_title));\n                $slide_name = str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], '', $slide_name);\n                $slide_name = html_entity_decode($slide_name);\n                $previous = learnpath::add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = $previous;\n                }\n            }\n        }\n    }\n\n    /**\n     * Manages page splitting.\n     *\n     * @param    string    Page header\n     * @param    string    Page body\n     */\n    public function dealPerPage($header, $body)\n    {\n        $_course = api_get_course_info();\n        // Split document to pages.\n        $pages = explode('||page_break||', $body);\n\n        $first_item = 0;\n        foreach ($pages as $key => $page_content) {\n            // For every pages, we create a new file.\n            $key++;\n            $page_content = $this->format_page_content($header, $page_content, $this->base_work_dir.$this->created_dir);\n            $html_file = $this->created_dir.'-'.$key.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.$html_file,\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.$html_file),\n                $html_file\n            );\n\n            $slide_name = '';\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = 'Page '.str_repeat('0', 2 - strlen($key)).$key;\n                $previous = learnpath::add_item(0, $previous, 'document', $document_id, $slide_name, '');\n                if ($this->first_item == 0) {\n                    $this->first_item = $previous;\n                }\n                // Code for text indexing.\n                if (api_get_setting('search_enabled') == 'true') {\n                    if (isset($_POST['index_document']) && $_POST['index_document']) {\n                        //echo Display::return_message(print_r($_POST));\n                        $di = new ChamiloIndexer();\n                        isset($_POST['language']) ? $lang = Database::escape_string(\n                            $_POST['language']\n                        ) : $lang = 'english';\n                        $di->connectDb(null, null, $lang);\n                        $ic_slide = new IndexableChunk();\n                        $ic_slide->addValue('title', $slide_name);\n                        $specific_fields = get_specific_field_list();\n                        $all_specific_terms = '';\n                        foreach ($specific_fields as $specific_field) {\n                            if (isset($_REQUEST[$specific_field['code']])) {\n                                $sterms = trim($_REQUEST[$specific_field['code']]);\n                                $all_specific_terms .= ' '.$sterms;\n                                if (!empty($sterms)) {\n                                    $sterms = explode(',', $sterms);\n                                    foreach ($sterms as $sterm) {\n                                        $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                    }\n                                }\n                            }\n                        }\n                        $page_content = $all_specific_terms.' '.$page_content;\n                        $ic_slide->addValue('content', $page_content);\n                        // Add a comment to say terms separated by commas.\n                        $courseid = api_get_course_id();\n                        $ic_slide->addCourseId($courseid);\n                        $ic_slide->addToolId(TOOL_LEARNPATH);\n                        $lp_id = $this->lp_id;\n                        $xapian_data = [\n                            SE_COURSE_ID => $courseid,\n                            SE_TOOL_ID => TOOL_LEARNPATH,\n                            SE_DATA => ['lp_id' => $lp_id, 'lp_item' => $previous, 'document_id' => $document_id],\n                            SE_USER => (int) api_get_user_id(),\n                        ];\n                        $ic_slide->xapian_data = serialize($xapian_data);\n                        $di->addChunk($ic_slide);\n                        // Index and return search engine document id.\n                        $did = $di->index();\n                        if ($did) {\n                            // Save it to db.\n                            $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                            $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                                    VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                            $sql = sprintf(\n                                $sql,\n                                $tbl_se_ref,\n                                api_get_course_id(),\n                                TOOL_LEARNPATH,\n                                $lp_id,\n                                $previous,\n                                $did\n                            );\n                            Database::query($sql);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns additional Java command parameters.\n     *\n     * @return string The additional parameters to be used in the Java call\n     */\n    public function add_command_parameters()\n    {\n        return ' -d woogie '\n            .Security::sanitizeExecParam($this->base_work_dir.'/'.$this->file_path)\n            .'  '\n            .Security::sanitizeExecParam($this->base_work_dir.$this->created_dir.'/'.$this->file_name.'.html');\n    }\n\n    /**\n     * Formats a page content by reorganising the HTML code a little.\n     *\n     * @param    string    Page header\n     * @param    string    Page content\n     *\n     * @return string Formatted page content\n     */\n    public function format_page_content($header, $content)\n    {\n        // Limit the width of the doc.\n        list($max_width, $max_height) = explode('x', api_get_setting('service_ppt2lp', 'size'));\n\n        $content = preg_replace(\"|<body[^>]*>|i\", \"\\\\0\\r\\n<div style=\\\"width:\".$max_width.\"\\\">\", $content, -1, $count);\n        if ($count < 1) {\n            $content = '<body><div style=\"width:'.$max_width.'\">'.$content;\n        }\n\n        $content = preg_replace('|</body>|i', '</div>\\\\0', $content, -1, $count);\n        if ($count < 1) {\n            $content = $content.'</div></body>';\n        }\n\n        // Add the headers.\n        $content = $header.$content;\n\n        // Resize all the picture to the max_width-10\n        preg_match_all(\"|<img[^src]*src=\\\"([^\\\"]*)\\\"[^>]*>|i\", $content, $images);\n\n        foreach ($images[1] as $key => $image) {\n            // Check if the <img tag soon has a width attribute.\n            $defined_width = preg_match(\"|width=([^\\s]*)|i\", $images[0][$key], $img_width);\n            $img_width = $img_width[1];\n            if (!$defined_width) {\n                list($img_width, $img_height, $type) = getimagesize($this->base_work_dir.$this->created_dir.'/'.$image);\n\n                $new_width = $max_width - 10;\n                if ($img_width > $new_width) {\n                    $picture_resized = str_ireplace('<img', '<img width=\"'.$new_width.'\" ', $images[0][$key]);\n                    $content = str_replace($images[0][$key], $picture_resized, $content);\n                }\n            } elseif ($img_width > $max_width - 10) {\n                $picture_resized = str_ireplace('width='.$img_width, 'width=\"'.($max_width - 10).'\"', $images[0][$key]);\n                $content = str_replace($images[0][$key], $picture_resized, $content);\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Add documents to the visioconference (to be implemented).\n     */\n    public function add_docs_to_visio()\n    {\n    }\n}\n", "<?php\n/* For licensing terms, see /license.txt */\n\n/**\n * Defines the OpenOfficeDocument class, which is meant as a conversion\n * tool from Office text documents (.doc, .sxw, .odt, .docx) to\n * learning paths.\n *\n * @package chamilo.learnpath\n *\n * @author  Eric Marguin <eric.marguin@dokeos.com>\n * @license GNU/GPL\n */\n/**\n * Defines the \"OpenOfficeTextDocument\" child of class \"learnpath\".\n */\nrequire_once 'openoffice_document.class.php';\nrequire_once api_get_path(LIBRARY_PATH).'specific_fields_manager.lib.php';\n\n/**\n * @package chamilo.learnpath.openofficedocument\n */\nclass OpenOfficeTextDocument extends OpenofficeDocument\n{\n    public $split_steps;\n\n    /**\n     * Class constructor. Calls the parent class and initialises the local attribute split_steps.\n     *\n     * @param    bool    Whether to split steps (true) or make one large page (false)\n     * @param    string    Course code\n     * @param    int    Resource ID\n     * @param    int Creator user id\n     */\n    public function __construct(\n        $split_steps = false,\n        $course_code = null,\n        $resource_id = null,\n        $user_id = null\n    ) {\n        $this->split_steps = $split_steps;\n        parent::__construct($course_code, $resource_id, $user_id);\n    }\n\n    /**\n     * Gets html pages and compose them into a learning path.\n     *\n     * @param    array    The files that will compose the generated learning path. Unused so far.\n     *\n     * @return bool False if file does not exit. Nothing otherwise.\n     */\n    public function make_lp($files = [])\n    {\n        $_course = api_get_course_info();\n        // We get a content where ||page_break|| indicates where the page is broken.\n        if (!file_exists($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html')) {\n            return false;\n        }\n        $content = file_get_contents($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        unlink($this->base_work_dir.'/'.$this->file_path);\n        unlink($this->base_work_dir.'/'.$this->created_dir.'/'.$this->file_name.'.html');\n\n        // The file is utf8 encoded and it seems to make problems with special quotes.\n        // then we htmlentities that, we replace these quotes and html_entity_decode that in good charset.\n        $charset = api_get_system_encoding();\n        $content = api_htmlentities($content, ENT_COMPAT, $this->original_charset);\n        $content = str_replace('&rsquo;', '\\'', $content);\n        $content = api_convert_encoding($content, $charset, $this->original_charset);\n        $content = str_replace($this->original_charset, $charset, $content);\n        $content = api_html_entity_decode($content, ENT_COMPAT, $charset);\n\n        // Set the path to pictures to absolute (so that it can be modified in fckeditor).\n        $content = preg_replace(\"|src=\\\"([^\\\"]*)|i\", \"src=\\\"\".api_get_path(REL_COURSE_PATH).$_course['path'].'/document'.$this->created_dir.\"/\\\\1\", $content);\n\n        list($header, $body) = explode('<BODY', $content);\n\n        $body = '<BODY'.$body;\n\n        // Remove font-family styles.\n        $header = preg_replace(\"|font\\-family[^;]*;|i\", '', $header);\n\n        // Chamilo styles.\n        $my_style = api_get_setting('stylesheets');\n        if (empty($my_style)) {\n            $my_style = 'chamilo';\n        }\n        $style_to_import = \"<style type=\\\"text/css\\\">\\r\\n\";\n        $style_to_import .= '@import \"'.api_get_path(WEB_CODE_PATH).'css/'.$my_style.'/default.css\";'.\"\\n\";\n        $style_to_import .= \"</style>\\r\\n\";\n        $header = preg_replace(\"|</head>|i\", \"\\r\\n$style_to_import\\r\\n\\\\0\", $header);\n\n        // Line break before and after picture.\n        $header = str_replace('p {', 'p {clear:both;', $header);\n\n        $header = str_replace('absolute', 'relative', $header);\n\n        switch ($this->split_steps) {\n            case 'per_page':\n                $this->dealPerPage($header, $body);\n                break;\n            case 'per_chapter':\n                $this->dealPerChapter($header, $body);\n                break;\n        }\n    }\n\n    /**\n     * Manages dir/chapter splitting.\n     *\n     * @param    string    Chapter header\n     * @param    string    Content\n     */\n    public function dealPerChapter($header, $content)\n    {\n        $_course = api_get_course_info();\n        $content = str_replace('||page_break||', '', $content);\n\n        // Get all the h1.\n        preg_match_all(\"|<h1[^>]*>([^(h1)+]*)</h1>|is\", $content, $matches_temp);\n\n        // Empty the fake dir/chapters.\n        $new_index = 0;\n        for ($i = 0; $i < count($matches_temp[0]); $i++) {\n            if (trim($matches_temp[1][$i]) !== '') {\n                $matches[0][$new_index] = $matches_temp[0][$i];\n                $matches[1][$new_index] = $matches_temp[1][$i];\n                $new_index++;\n            }\n        }\n\n        // Add intro item.\n        $intro_content = api_substr($content, 0, api_strpos($content, $matches[0][0]));\n        $items_to_create[get_lang('Introduction')] = $intro_content;\n\n        for ($i = 0; $i < count($matches[0]); $i++) {\n            if (empty($matches[1][$i])) {\n                continue;\n            }\n\n            $content = api_strstr($content, $matches[0][$i]);\n            if ($i + 1 !== count($matches[0])) {\n                $dir_content = api_substr($content, 0, api_strpos($content, $matches[0][$i + 1]));\n            } else {\n                $dir_content = $content;\n            }\n            $items_to_create[$matches[1][$i]] = $dir_content;\n        }\n\n        $i = 0;\n        $previous = 0; // @todo define this variable properly\n        foreach ($items_to_create as $item_title => $item_content) {\n            $i++;\n            $page_content = $this->format_page_content($header, $item_content);\n\n            $html_file = $this->created_dir.'-'.$i.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.'/'.$html_file,\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.'/'.$html_file),\n                $html_file\n            );\n\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = strip_tags(nl2br($item_title));\n                $slide_name = str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], '', $slide_name);\n                $slide_name = api_html_entity_decode($slide_name, ENT_COMPAT, api_get_system_encoding());\n                $previous = learnpath::add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = (int) $previous;\n                }\n            }\n        }\n    }\n\n    /**\n     * Manages page splitting.\n     *\n     * @param    string    Page header\n     * @param    string    Page body\n     */\n    public function dealPerPage($header, $body)\n    {\n        $_course = api_get_course_info();\n        // Split document to pages.\n        $pages = explode('||page_break||', $body);\n        foreach ($pages as $key => $page_content) {\n            // For every pages, we create a new file.\n            $key++;\n            $page_content = $this->format_page_content(\n                $header,\n                $page_content,\n                $this->base_work_dir.$this->created_dir\n            );\n            $html_file = $this->created_dir.'-'.$key.'.html';\n            $handle = fopen($this->base_work_dir.$this->created_dir.'/'.$html_file, 'w+');\n            fwrite($handle, $page_content);\n            fclose($handle);\n\n            $document_id = add_document(\n                $_course,\n                $this->created_dir.$html_file,\n                'file',\n                filesize($this->base_work_dir.$this->created_dir.$html_file),\n                $html_file\n            );\n\n            $slide_name = '';\n            $previous = 0; // @todo define this variable properly\n            if ($document_id) {\n                // Put the document in item_property update.\n                api_item_property_update(\n                    $_course,\n                    TOOL_DOCUMENT,\n                    $document_id,\n                    'DocumentAdded',\n                    api_get_user_id(),\n                    0,\n                    0,\n                    null,\n                    null,\n                    api_get_session_id()\n                );\n\n                $infos = pathinfo($this->filepath);\n                $slide_name = 'Page '.str_repeat('0', 2 - strlen($key)).$key;\n                $previous = learnpath::add_item(\n                    0,\n                    $previous,\n                    'document',\n                    $document_id,\n                    $slide_name,\n                    ''\n                );\n                if ($this->first_item == 0) {\n                    $this->first_item = (int) $previous;\n                }\n                // Code for text indexing.\n                if (isset($_POST['index_document']) && $_POST['index_document']) {\n                    //echo Display::return_message(print_r($_POST));\n                    $di = new ChamiloIndexer();\n                    isset($_POST['language']) ? $lang = Database::escape_string($_POST['language']) : $lang = 'english';\n                    $di->connectDb(null, null, $lang);\n                    $ic_slide = new IndexableChunk();\n                    $ic_slide->addValue('title', $slide_name);\n                    $specific_fields = get_specific_field_list();\n                    $all_specific_terms = '';\n                    foreach ($specific_fields as $specific_field) {\n                        if (isset($_REQUEST[$specific_field['code']])) {\n                            $sterms = trim($_REQUEST[$specific_field['code']]);\n                            $all_specific_terms .= ' '.$sterms;\n                            if (!empty($sterms)) {\n                                $sterms = explode(',', $sterms);\n                                foreach ($sterms as $sterm) {\n                                    $ic_slide->addTerm(trim($sterm), $specific_field['code']);\n                                }\n                            }\n                        }\n                    }\n                    $page_content = $all_specific_terms.' '.$page_content;\n                    $ic_slide->addValue('content', $page_content);\n                    // Add a comment to say terms separated by commas.\n                    $courseid = api_get_course_id();\n                    $ic_slide->addCourseId($courseid);\n                    $ic_slide->addToolId(TOOL_LEARNPATH);\n                    $lp_id = $this->lp_id;\n                    $xapian_data = [\n                        SE_COURSE_ID => $courseid,\n                        SE_TOOL_ID => TOOL_LEARNPATH,\n                        SE_DATA => [\n                            'lp_id' => $lp_id,\n                            'lp_item' => $previous,\n                            'document_id' => $document_id,\n                        ],\n                        SE_USER => (int) api_get_user_id(),\n                    ];\n                    $ic_slide->xapian_data = serialize($xapian_data);\n                    $di->addChunk($ic_slide);\n                    // Index and return search engine document id.\n                    $did = $di->index();\n                    if ($did) {\n                        // Save it to db.\n                        $tbl_se_ref = Database::get_main_table(TABLE_MAIN_SEARCH_ENGINE_REF);\n                        $sql = 'INSERT INTO %s (id, course_code, tool_id, ref_id_high_level, ref_id_second_level, search_did)\n                                VALUES (NULL , \\'%s\\', \\'%s\\', %s, %s, %s)';\n                        $sql = sprintf(\n                            $sql,\n                            $tbl_se_ref,\n                            api_get_course_id(),\n                            TOOL_LEARNPATH,\n                            $lp_id,\n                            $previous,\n                            $did\n                        );\n                        Database::query($sql);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns additional Java command parameters.\n     *\n     * @return string The additional parameters to be used in the Java call\n     */\n    public function add_command_parameters()\n    {\n        return ' -d woogie '\n            .Security::sanitizeExecParam($this->base_work_dir.'/'.$this->file_path)\n            .'  '\n            .Security::sanitizeExecParam($this->base_work_dir.$this->created_dir.'/'.$this->file_name.'.html');\n    }\n\n    /**\n     * Formats a page content by reorganising the HTML code a little.\n     *\n     * @param    string    Page header\n     * @param    string    Page content\n     *\n     * @return string Formatted page content\n     */\n    public function format_page_content($header, $content)\n    {\n        // Limit the width of the doc.\n        list($max_width, $max_height) = explode('x', api_get_setting('service_ppt2lp', 'size'));\n\n        $content = preg_replace(\"|<body[^>]*>|i\", \"\\\\0\\r\\n<div style=\\\"width:\".$max_width.\"\\\">\", $content, -1, $count);\n        if ($count < 1) {\n            $content = '<body><div style=\"width:'.$max_width.'\">'.$content;\n        }\n\n        $content = preg_replace('|</body>|i', '</div>\\\\0', $content, -1, $count);\n        if ($count < 1) {\n            $content = $content.'</div></body>';\n        }\n\n        // Add the headers.\n        $content = $header.$content;\n\n        // Resize all the picture to the max_width-10\n        preg_match_all(\"|<img[^src]*src=\\\"([^\\\"]*)\\\"[^>]*>|i\", $content, $images);\n\n        foreach ($images[1] as $key => $image) {\n            // Check if the <img tag soon has a width attribute.\n            $defined_width = preg_match(\"|width=([^\\s]*)|i\", $images[0][$key], $img_width);\n            $img_width = $img_width[1];\n            if (!$defined_width) {\n                $image_size = api_getimagesize($this->base_work_dir.$this->created_dir.'/'.$image);\n                $img_width = $image_size['width'];\n                $img_height = $image_size['height'];\n\n                $new_width = $max_width - 10;\n                if ($img_width > $new_width) {\n                    $picture_resized = str_ireplace('<img', '<img width=\"'.$new_width.'\" ', $images[0][$key]);\n                    $content = str_replace($images[0][$key], $picture_resized, $content);\n                }\n            } elseif ($img_width > $max_width - 10) {\n                $picture_resized = str_ireplace(\n                    'width='.$img_width,\n                    'width=\"'.($max_width - 10).'\"',\n                    $images[0][$key]\n                );\n                $content = str_replace(\n                    $images[0][$key],\n                    $picture_resized,\n                    $content\n                );\n            }\n        }\n\n        return $content;\n    }\n\n    /**\n     * Add documents to the visioconference (to be implemented).\n     */\n    public function add_docs_to_visio()\n    {\n    }\n}\n"], "filenames": ["main/lp/openoffice_presentation.class.php", "main/lp/openoffice_text.class.php", "main/lp/openoffice_text_document.class.php"], "buggy_code_start_loc": [256, 334, 336], "buggy_code_end_loc": [261, 339, 341], "fixing_code_start_loc": [256, 334, 336], "fixing_code_end_loc": [260, 338, 340], "type": "CWE-78", "message": "Command injection in `main/lp/openoffice_presentation.class.php` in Chamilo LMS <= v1.11.24 allows users permitted to upload Learning Paths to obtain remote code execution via improper neutralisation of special characters.", "other": {"cve": {"id": "CVE-2023-4221", "sourceIdentifier": "info@starlabs.sg", "published": "2023-11-28T08:15:07.910", "lastModified": "2023-11-30T05:35:37.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Command injection in `main/lp/openoffice_presentation.class.php` in Chamilo LMS <= v1.11.24 allows users permitted to upload Learning Paths to obtain remote code execution via improper neutralisation of special characters."}, {"lang": "es", "value": "La inyecci\u00f3n de comandos en `main/lp/openoffice_presentation.class.php` en Chamilo LMS en versiones &lt;= 1.11.24 permite a los usuarios autorizados a cargar rutas de aprendizaje para obtener la ejecuci\u00f3n remota de c\u00f3digo mediante la neutralizaci\u00f3n inadecuada de caracteres especiales."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "info@starlabs.sg", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "info@starlabs.sg", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo_lms:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.11.24", "matchCriteriaId": "3CA5310C-E5B0-4369-BC5A-F56EBED72EBA"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/841a07396fed0ef27c5db13a1b700eac02754fc7", "source": "info@starlabs.sg", "tags": ["Patch"]}, {"url": "https://github.com/chamilo/chamilo-lms/commit/ed72914608d2a07ee2eb587c1a654480d08201db", "source": "info@starlabs.sg", "tags": ["Patch"]}, {"url": "https://starlabs.sg/advisories/23/23-4221", "source": "info@starlabs.sg", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://support.chamilo.org/projects/chamilo-18/wiki/security_issues#Issue-128-2023-09-04-Critical-impact-Moderate-risk-Authenticated-users-may-gain-unauthenticated-RCE-CVE-2023-4221CVE-2023-4222", "source": "info@starlabs.sg", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/841a07396fed0ef27c5db13a1b700eac02754fc7"}}