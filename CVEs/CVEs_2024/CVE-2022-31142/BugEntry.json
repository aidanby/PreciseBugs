{"buggy_code": ["'use strict'\n\nconst crypto = require('crypto')\nconst fp = require('fastify-plugin')\n\nconst defaultOptions = {\n  keys: [],\n  auth: undefined,\n  errorResponse (err) {\n    return { error: err.message }\n  },\n  contentType: undefined,\n  bearerType: 'Bearer'\n}\n\nfunction verifyBearerAuthFactory (options) {\n  const _options = Object.assign({}, defaultOptions, options)\n  if (_options.keys instanceof Set) _options.keys = Array.from(_options.keys)\n  const { keys, errorResponse, contentType, bearerType, auth, addHook = true, verifyErrorLogLevel = 'error' } = _options\n\n  return function verifyBearerAuth (request, reply, done) {\n    const header = request.raw.headers.authorization\n    if (!header) {\n      const noHeaderError = Error('missing authorization header')\n      if (verifyErrorLogLevel) request.log[verifyErrorLogLevel]('unauthorized: %s', noHeaderError.message)\n      if (contentType) reply.header('content-type', contentType)\n      reply.code(401)\n      if (!addHook) {\n        done(noHeaderError)\n        return\n      }\n      reply.send(errorResponse(noHeaderError))\n      return\n    }\n\n    const key = header.substring(bearerType.length).trim()\n    let retVal\n    // check if auth function is defined\n    if (auth && auth instanceof Function) {\n      try {\n        retVal = auth(key, request)\n        // catch any error from the user provided function\n      } catch (err) {\n        retVal = Promise.reject(err)\n      }\n    } else {\n      // if auth is not defined use keys\n      retVal = authenticate(keys, key)\n    }\n\n    const invalidKeyError = Error('invalid authorization header')\n\n    // retVal contains the result of the auth function if defined or the\n    // result of the key comparison.\n    // retVal is enclosed in a Promise.resolve to allow auth to be a normal\n    // function or an async funtion. If it returns a non-promise value it\n    // will be converted to a resolving promise. If it returns a promise it\n    // will be resolved.\n    Promise.resolve(retVal).then((val) => {\n      // if val is not truthy return 401\n      if (val === false) {\n        if (verifyErrorLogLevel) request.log[verifyErrorLogLevel]('unauthorized: %s', invalidKeyError.message)\n        if (contentType) reply.header('content-type', contentType)\n        reply.code(401)\n        if (!addHook) return done(invalidKeyError)\n        reply.send(errorResponse(invalidKeyError))\n        return\n      }\n      if (val === true) {\n        // if it fails down stream return the proper error\n        try {\n          done()\n        } catch (err) {\n          done(err)\n        }\n        return\n      }\n      const retErr = new Error('internal server error')\n      reply.code(500)\n      if (!addHook) return done(retErr)\n      reply.send(errorResponse(retErr))\n    }).catch((err) => {\n      const retErr = err instanceof Error ? err : Error(String(err))\n      reply.code(500)\n      if (!addHook) return done(retErr)\n      reply.send(errorResponse(retErr))\n    })\n  }\n}\n\nfunction authenticate (keys, key) {\n  return keys.findIndex((a) => compare(a, key)) !== -1\n}\n\n// perform constant-time comparison to prevent timing attacks\nfunction compare (a, b) {\n  try {\n    // may throw if they have different length, can't convert to Buffer, etc...\n    return crypto.timingSafeEqual(Buffer.from(a), Buffer.from(b))\n  } catch {\n    return false\n  }\n}\n\nfunction plugin (fastify, options, done) {\n  const defaultLogLevel = 'error'\n  options = Object.assign({ addHook: true, verifyErrorLogLevel: defaultLogLevel }, options)\n\n  if (!Object.hasOwnProperty.call(fastify.log, 'error') ||\n    (typeof fastify.log.error) !== 'function') options.verifyErrorLogLevel = null\n  if (options.verifyErrorLogLevel != null &&\n    (typeof options.verifyErrorLogLevel !== 'string' ||\n      !Object.hasOwnProperty.call(fastify.log, options.verifyErrorLogLevel) ||\n      (typeof fastify.log[options.verifyErrorLogLevel]) !== 'function'\n    )) {\n    const invalidLogLevelError = Error(`fastify.log does not have level '${options.verifyErrorLogLevel}'`)\n    done(invalidLogLevelError)\n  }\n\n  if (options.addHook === true) {\n    fastify.addHook('onRequest', verifyBearerAuthFactory(options))\n  } else {\n    fastify.decorate('verifyBearerAuthFactory', verifyBearerAuthFactory)\n    fastify.decorate('verifyBearerAuth', verifyBearerAuthFactory(options))\n  }\n\n  done()\n}\n\nmodule.exports = fp(plugin, {\n  fastify: '3.x',\n  name: 'fastify-bearer-auth'\n})\nmodule.exports.internals = { factory: verifyBearerAuthFactory }\n", "'use strict'\n\nconst tap = require('tap')\nconst test = tap.test\nconst fastify = require('fastify')()\nconst plugin = require('../')\n\nfastify.register(plugin, { addHook: false, keys: new Set(['123456']) })\n\ntest('verifyBearerAuth', (t) => {\n  t.plan(1)\n  fastify.ready(() => {\n    t.ok(fastify.verifyBearerAuth)\n  })\n})\n\ntest('verifyBearerAuthFactory', (t) => {\n  t.plan(1)\n  fastify.ready(() => {\n    t.ok(fastify.verifyBearerAuthFactory)\n  })\n})\n"], "fixing_code": ["'use strict'\n\nconst crypto = require('crypto')\nconst fp = require('fastify-plugin')\n\nconst defaultOptions = {\n  keys: [],\n  auth: undefined,\n  errorResponse (err) {\n    return { error: err.message }\n  },\n  contentType: undefined,\n  bearerType: 'Bearer'\n}\n\nfunction verifyBearerAuthFactory (options) {\n  const _options = Object.assign({}, defaultOptions, options)\n  if (_options.keys instanceof Set) _options.keys = Array.from(_options.keys)\n  const { keys, errorResponse, contentType, bearerType, auth, addHook = true, verifyErrorLogLevel = 'error' } = _options\n\n  for (let i = 0, il = keys.length; i < il; ++i) {\n    if (typeof keys[i] !== 'string') {\n      throw new Error('options.keys has to contain only string entries')\n    }\n    keys[i] = Buffer.from(keys[i])\n  }\n\n  return function verifyBearerAuth (request, reply, done) {\n    const header = request.raw.headers.authorization\n    if (!header) {\n      const noHeaderError = Error('missing authorization header')\n      if (verifyErrorLogLevel) request.log[verifyErrorLogLevel]('unauthorized: %s', noHeaderError.message)\n      if (contentType) reply.header('content-type', contentType)\n      reply.code(401)\n      if (!addHook) {\n        done(noHeaderError)\n        return\n      }\n      reply.send(errorResponse(noHeaderError))\n      return\n    }\n\n    const key = header.substring(bearerType.length).trim()\n    let retVal\n    // check if auth function is defined\n    if (auth && auth instanceof Function) {\n      try {\n        retVal = auth(key, request)\n        // catch any error from the user provided function\n      } catch (err) {\n        retVal = Promise.reject(err)\n      }\n    } else {\n      // if auth is not defined use keys\n      retVal = authenticate(keys, key)\n    }\n\n    const invalidKeyError = Error('invalid authorization header')\n\n    // retVal contains the result of the auth function if defined or the\n    // result of the key comparison.\n    // retVal is enclosed in a Promise.resolve to allow auth to be a normal\n    // function or an async funtion. If it returns a non-promise value it\n    // will be converted to a resolving promise. If it returns a promise it\n    // will be resolved.\n    Promise.resolve(retVal).then((val) => {\n      // if val is not truthy return 401\n      if (val === false) {\n        if (verifyErrorLogLevel) request.log[verifyErrorLogLevel]('unauthorized: %s', invalidKeyError.message)\n        if (contentType) reply.header('content-type', contentType)\n        reply.code(401)\n        if (!addHook) return done(invalidKeyError)\n        reply.send(errorResponse(invalidKeyError))\n        return\n      }\n      if (val === true) {\n        // if it fails down stream return the proper error\n        try {\n          done()\n        } catch (err) {\n          done(err)\n        }\n        return\n      }\n      const retErr = new Error('internal server error')\n      reply.code(500)\n      if (!addHook) return done(retErr)\n      reply.send(errorResponse(retErr))\n    }).catch((err) => {\n      const retErr = err instanceof Error ? err : Error(String(err))\n      reply.code(500)\n      if (!addHook) return done(retErr)\n      reply.send(errorResponse(retErr))\n    })\n  }\n}\n\nfunction authenticate (keys, key) {\n  const b = Buffer.from(key)\n  return keys.findIndex((a) => compare(a, b)) !== -1\n}\n\n// perform constant-time comparison to prevent timing attacks\nfunction compare (a, b) {\n  if (a.length !== b.length) {\n    // Delay return with cryptographically secure timing check.\n    crypto.timingSafeEqual(a, a)\n    return false\n  }\n\n  return crypto.timingSafeEqual(a, b)\n}\n\nfunction plugin (fastify, options, done) {\n  const defaultLogLevel = 'error'\n  options = Object.assign({ addHook: true, verifyErrorLogLevel: defaultLogLevel }, options)\n\n  if (!Object.hasOwnProperty.call(fastify.log, 'error') ||\n    (typeof fastify.log.error) !== 'function') options.verifyErrorLogLevel = null\n  if (options.verifyErrorLogLevel != null &&\n    (typeof options.verifyErrorLogLevel !== 'string' ||\n      !Object.hasOwnProperty.call(fastify.log, options.verifyErrorLogLevel) ||\n      (typeof fastify.log[options.verifyErrorLogLevel]) !== 'function'\n    )) {\n    const invalidLogLevelError = Error(`fastify.log does not have level '${options.verifyErrorLogLevel}'`)\n    done(invalidLogLevelError)\n  }\n\n  if (options.addHook === true) {\n    fastify.addHook('onRequest', verifyBearerAuthFactory(options))\n  } else {\n    fastify.decorate('verifyBearerAuthFactory', verifyBearerAuthFactory)\n    fastify.decorate('verifyBearerAuth', verifyBearerAuthFactory(options))\n  }\n\n  done()\n}\n\nmodule.exports = fp(plugin, {\n  fastify: '3.x',\n  name: 'fastify-bearer-auth'\n})\nmodule.exports.internals = { factory: verifyBearerAuthFactory }\n", "'use strict'\n\nconst tap = require('tap')\nconst test = tap.test\nconst fastify = require('fastify')()\nconst plugin = require('../')\n\nfastify.register(plugin, { addHook: false, keys: new Set(['123456']) })\n\ntest('verifyBearerAuth', (t) => {\n  t.plan(1)\n  fastify.ready(() => {\n    t.ok(fastify.verifyBearerAuth)\n  })\n})\n\ntest('verifyBearerAuthFactory', (t) => {\n  t.plan(1)\n  fastify.ready(() => {\n    t.ok(fastify.verifyBearerAuthFactory)\n  })\n})\n\ntest('verifyBearerAuthFactory', (t) => {\n  t.plan(1)\n  fastify.ready(() => {\n    const keys = { keys: new Set([123456]) }\n    t.throws(() => fastify.verifyBearerAuthFactory(keys), /keys has to contain only string entries/)\n  })\n})\n"], "filenames": ["plugin.js", "test/decorate.test.js"], "buggy_code_start_loc": [19, 22], "buggy_code_end_loc": [102, 22], "fixing_code_start_loc": [20, 23], "fixing_code_end_loc": [112, 31], "type": "CWE-203", "message": "@fastify/bearer-auth is a Fastify plugin to require bearer Authorization headers. @fastify/bearer-auth prior to versions 7.0.2 and 8.0.1 does not securely use crypto.timingSafeEqual. A malicious attacker could estimate the length of one valid bearer token. According to the corresponding RFC 6750, the bearer token has only base64 valid characters, reducing the range of characters for a brute force attack. Version 7.0.2 and 8.0.1 of @fastify/bearer-auth contain a patch. There are currently no known workarounds. The package fastify-bearer-auth, which covers versions 6.0.3 and prior, is also vulnerable starting at version 5.0.1. Users of fastify-bearer-auth should upgrade to a patched version of @fastify/bearer-auth.", "other": {"cve": {"id": "CVE-2022-31142", "sourceIdentifier": "security-advisories@github.com", "published": "2022-07-14T19:15:07.787", "lastModified": "2022-07-20T12:45:55.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "@fastify/bearer-auth is a Fastify plugin to require bearer Authorization headers. @fastify/bearer-auth prior to versions 7.0.2 and 8.0.1 does not securely use crypto.timingSafeEqual. A malicious attacker could estimate the length of one valid bearer token. According to the corresponding RFC 6750, the bearer token has only base64 valid characters, reducing the range of characters for a brute force attack. Version 7.0.2 and 8.0.1 of @fastify/bearer-auth contain a patch. There are currently no known workarounds. The package fastify-bearer-auth, which covers versions 6.0.3 and prior, is also vulnerable starting at version 5.0.1. Users of fastify-bearer-auth should upgrade to a patched version of @fastify/bearer-auth."}, {"lang": "es", "value": "fastify/bearer-auth es un plugin de Fastify para requerir encabezados de autorizaci\u00f3n de portador. fastify/bearer-auth versiones anteriores a 7.0.2 y 8.0.1, no usa de forma segura crypto.timingSafeEqual. Un atacante malicioso podr\u00eda estimar la longitud de un token de portador v\u00e1lido. Seg\u00fan el correspondiente RFC 6750, el token de portador s\u00f3lo presenta caracteres v\u00e1lidos en base64, reduciendo el rango de caracteres para un ataque de fuerza bruta. Las versiones 7.0.2 y 8.0.1 de fastify/bearer-auth contienen un parche. Actualmente no se presentan mitigaciones conocidas. El paquete fastify-bearer-auth, que cubre las versiones 6.0.3 y anteriores, tambi\u00e9n es vulnerable a partir de la versi\u00f3n 5.0.1. Los usuarios de fastify-bearer-auth deber\u00edan actualizar a una versi\u00f3n parcheada de fastify/bearer-auth"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-203"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-208"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fastify:bearer-auth:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "5.0.1", "versionEndExcluding": "7.0.2", "matchCriteriaId": "F4E6279F-FB08-4B50-8A0E-8A751098175F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fastify:bearer-auth:8.0.0:*:*:*:*:node.js:*:*", "matchCriteriaId": "BF0046AC-5EB0-4A58-B08F-3B8F3F7DA4C1"}]}]}], "references": [{"url": "https://github.com/fastify/fastify-bearer-auth/commit/0c468a616d7e56126dc468150f6a5a92e530b8e4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fastify/fastify-bearer-auth/commit/39353b15409ee99474545f615ffb16180cf3b716", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fastify/fastify-bearer-auth/commit/f921a0582dc83112039004a9b5041141b50c5b3f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fastify/fastify-bearer-auth/security/advisories/GHSA-376v-xgjx-7mfr", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://hackerone.com/reports/1633287", "source": "security-advisories@github.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fastify/fastify-bearer-auth/commit/0c468a616d7e56126dc468150f6a5a92e530b8e4"}}