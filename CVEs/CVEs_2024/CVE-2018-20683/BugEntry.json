{"buggy_code": ["#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nuse lib $ENV{GL_LIBDIR};\nuse Gitolite::Easy;\n\n=for admins\n\nBUNDLE SUPPORT\n\n    (1) For each repo in gitolite.conf for which you want bundle support (or\n        '@all', if you wish), add the following line:\n\n            option bundle       =   1\n\n        Or you can say:\n\n            option bundle.ttl   =   <number>\n\n        A bundle file that is more than <number> seconds old (default value\n        86400, i.e., 1 day) is recreated on the next bundle request.  Increase\n        this if your repo is not terribly active.\n\n        Note: a bundle file is also deleted and recreated if it contains a ref\n        that was then either deleted or rewound in the repo.  This is checked\n        on every invocation.\n\n    (2) Add 'rsync' to the ENABLE list in the rc file\n\n\nGENERIC RSYNC SUPPORT\n\n    TBD\n\n=cut\n\n=for usage\nrsync helper for gitolite\n\nBUNDLE SUPPORT\n\n    Admins: see src/commands/rsync for setup instructions\n\n    Users:\n        rsync -P git@host:repo.bundle .\n            # downloads a file called \"<basename of repo>.bundle\"; repeat as\n            # needed till the whole thing is downloaded\n        git clone repo.bundle repo\n        cd repo\n        git remote set-url origin git@host:repo\n        git fetch origin    # and maybe git pull, etc. to freshen the clone\n\nGENERIC RSYNC SUPPORT\n\n    TBD\n\n=cut\n\nusage() if not @ARGV or $ARGV[0] eq '-h';\n\n# rsync driver program.  Several things can be done later, but for now it\n# drives just the 'bundle' transfer.\n\nif ( $ENV{SSH_ORIGINAL_COMMAND} =~ /^rsync --server --sender (-[-\\w=.]+ )+\\. (\\S+)\\.bundle$/ ) {\n\n    my $repo = $2;\n    $repo =~ s/\\.git$//;\n\n    # all errors have the same message to avoid leaking info\n    can_read($repo) or _die \"you are not authorised\";\n    my %config = config( $repo, \"gitolite-options.bundle\" ) or _die \"you are not authorised\";\n\n    my $ttl = $config{'gitolite-options.bundle.ttl'} || 86400;    # in seconds (default 1 day)\n\n    my $bundle = bundle_create( $repo, $ttl );\n\n    $ENV{SSH_ORIGINAL_COMMAND} =~ s( \\S+\\.bundle)( $bundle);\n    trace( 1, \"rsync bundle\", $ENV{SSH_ORIGINAL_COMMAND} );\n    Gitolite::Common::_system( split ' ', $ENV{SSH_ORIGINAL_COMMAND} );\n    exit 0;\n}\n\n_warn \"invalid rsync command '$ENV{SSH_ORIGINAL_COMMAND}'\";\nusage();\n\n# ----------------------------------------------------------------------\n# helpers\n# ----------------------------------------------------------------------\n\nsub bundle_create {\n    my ( $repo, $ttl ) = @_;\n    my $bundle = \"$repo.bundle\";\n    $bundle =~ s(.*/)();\n    my $recreate = 0;\n\n    my ( %b, %r );\n    if ( -f $bundle ) {\n        %b = map { chomp; reverse split; } `git ls-remote --heads --tags $bundle`;\n        %r = map { chomp; reverse split; } `git ls-remote --heads --tags .`;\n\n        for my $ref ( sort keys %b ) {\n\n            my $mtime = ( stat $bundle )[9];\n            if ( time() - $mtime > $ttl ) {\n                trace( 1, \"bundle too old\" );\n                $recreate++;\n                last;\n            }\n\n            if ( not $r{$ref} ) {\n                trace( 1, \"ref '$ref' deleted in repo\" );\n                $recreate++;\n                last;\n            }\n\n            if ( $r{$ref} eq $b{$ref} ) {\n                # same on both sides; ignore\n                delete $r{$ref};\n                delete $b{$ref};\n                next;\n            }\n\n            `git rev-list --count --left-right $b{$ref}...$r{$ref}` =~ /^(\\d+)\\s+(\\d+)$/ or _die \"git too old\";\n            if ($1) {\n                trace( 1, \"ref '$ref' rewound in repo\" );\n                $recreate++;\n                last;\n            }\n\n        }\n\n    } else {\n        trace( 1, \"no bundle found\" );\n        $recreate++;\n    }\n\n    return $bundle if not $recreate;\n\n    trace( 1, \"creating bundle for '$repo'\" );\n    -f $bundle and ( unlink $bundle or die \"a horrible death\" );\n    system(\"git bundle create $bundle --branches --tags >&2\");\n\n    return $bundle;\n}\n\nsub trace {\n    Gitolite::Common::trace(@_);\n}\n"], "fixing_code": ["#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nuse lib $ENV{GL_LIBDIR};\nuse Gitolite::Easy;\n\n=for admins\n\nBUNDLE SUPPORT\n\n    (1) For each repo in gitolite.conf for which you want bundle support (or\n        '@all', if you wish), add the following line:\n\n            option bundle       =   1\n\n        Or you can say:\n\n            option bundle.ttl   =   <number>\n\n        A bundle file that is more than <number> seconds old (default value\n        86400, i.e., 1 day) is recreated on the next bundle request.  Increase\n        this if your repo is not terribly active.\n\n        Note: a bundle file is also deleted and recreated if it contains a ref\n        that was then either deleted or rewound in the repo.  This is checked\n        on every invocation.\n\n    (2) Add 'rsync' to the ENABLE list in the rc file\n\n=cut\n\n=for usage\nrsync helper for gitolite\n\nBUNDLE SUPPORT\n\n    Admins: see src/commands/rsync for setup instructions\n\n    Users:\n        rsync git@host:repo.bundle .\n            # downloads a file called \"<basename of repo>.bundle\"; repeat as\n            # needed till the whole thing is downloaded\n        git clone repo.bundle repo\n        cd repo\n        git remote set-url origin git@host:repo\n        git fetch origin    # and maybe git pull, etc. to freshen the clone\n\n    NOTE on options to the rsync command: you are only allowed to use the\n    \"-v\", \"-n\", \"-q\", and \"-P\" options.\n\n=cut\n\nusage() if not @ARGV or $ARGV[0] eq '-h';\n\n# rsync driver program.  Several things can be done later, but for now it\n# drives just the 'bundle' transfer.\n\nif ( $ENV{SSH_ORIGINAL_COMMAND} =~ /^rsync --server --sender (?:-[vn]*(?:e\\d*\\.\\w*)? )?\\. (\\S+)\\.bundle$/ ) {\n\n    my $repo = $1;\n    $repo =~ s/\\.git$//;\n\n    # all errors have the same message to avoid leaking info\n    can_read($repo) or _die \"you are not authorised\";\n    my %config = config( $repo, \"gitolite-options.bundle\" ) or _die \"you are not authorised\";\n\n    my $ttl = $config{'gitolite-options.bundle.ttl'} || 86400;    # in seconds (default 1 day)\n\n    my $bundle = bundle_create( $repo, $ttl );\n\n    $ENV{SSH_ORIGINAL_COMMAND} =~ s( \\S+\\.bundle)( $bundle);\n    trace( 1, \"rsync bundle\", $ENV{SSH_ORIGINAL_COMMAND} );\n    Gitolite::Common::_system( split ' ', $ENV{SSH_ORIGINAL_COMMAND} );\n    exit 0;\n}\n\n_warn \"Sorry, you are only allowed to use the '-v', '-n', '-q', and '-P' options.\";\nusage();\n\n# ----------------------------------------------------------------------\n# helpers\n# ----------------------------------------------------------------------\n\nsub bundle_create {\n    my ( $repo, $ttl ) = @_;\n    my $bundle = \"$repo.bundle\";\n    $bundle =~ s(.*/)();\n    my $recreate = 0;\n\n    my ( %b, %r );\n    if ( -f $bundle ) {\n        %b = map { chomp; reverse split; } `git ls-remote --heads --tags $bundle`;\n        %r = map { chomp; reverse split; } `git ls-remote --heads --tags .`;\n\n        for my $ref ( sort keys %b ) {\n\n            my $mtime = ( stat $bundle )[9];\n            if ( time() - $mtime > $ttl ) {\n                trace( 1, \"bundle too old\" );\n                $recreate++;\n                last;\n            }\n\n            if ( not $r{$ref} ) {\n                trace( 1, \"ref '$ref' deleted in repo\" );\n                $recreate++;\n                last;\n            }\n\n            if ( $r{$ref} eq $b{$ref} ) {\n                # same on both sides; ignore\n                delete $r{$ref};\n                delete $b{$ref};\n                next;\n            }\n\n            `git rev-list --count --left-right $b{$ref}...$r{$ref}` =~ /^(\\d+)\\s+(\\d+)$/ or _die \"git too old\";\n            if ($1) {\n                trace( 1, \"ref '$ref' rewound in repo\" );\n                $recreate++;\n                last;\n            }\n\n        }\n\n    } else {\n        trace( 1, \"no bundle found\" );\n        $recreate++;\n    }\n\n    return $bundle if not $recreate;\n\n    trace( 1, \"creating bundle for '$repo'\" );\n    -f $bundle and ( unlink $bundle or die \"a horrible death\" );\n    system(\"git bundle create $bundle --branches --tags >&2\");\n\n    return $bundle;\n}\n\nsub trace {\n    Gitolite::Common::trace(@_);\n}\n"], "filenames": ["src/commands/rsync"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [85], "fixing_code_start_loc": [30], "fixing_code_end_loc": [79], "type": "CWE-20", "message": "commands/rsync in Gitolite before 3.6.11, if .gitolite.rc enables rsync, mishandles the rsync command line, which allows attackers to have a \"bad\" impact by triggering use of an option other than -v, -n, -q, or -P.", "other": {"cve": {"id": "CVE-2018-20683", "sourceIdentifier": "cve@mitre.org", "published": "2019-01-10T01:29:00.237", "lastModified": "2019-02-15T17:54:56.010", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "commands/rsync in Gitolite before 3.6.11, if .gitolite.rc enables rsync, mishandles the rsync command line, which allows attackers to have a \"bad\" impact by triggering use of an option other than -v, -n, -q, or -P."}, {"lang": "es", "value": "commands/rsync en Gitolite, en versiones anteriores a la 3.6.11, si .gitolite.rc habilita rsync, gestiona de manera incorrecta la l\u00ednea de comandos de rsync, lo que permite que los atacantes provoquen un \"mal\" impacto desencadenando el uso de una opci\u00f3n diferente de -v, -n, -q o -P."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gitolite:gitolite:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.6.11", "matchCriteriaId": "28CA908F-A705-45C3-B4B8-A575E9265101"}]}]}], "references": [{"url": "https://bugs.debian.org/918849", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/sitaramc/gitolite/blob/master/CHANGELOG", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/sitaramc/gitolite/commit/5df2b817255ee919991da6c310239e08c8fcc1ae", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://groups.google.com/forum/#!topic/gitolite-announce/6xbjjmpLePQ", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sitaramc/gitolite/commit/5df2b817255ee919991da6c310239e08c8fcc1ae"}}