{"buggy_code": ["using OrchardCore.Infrastructure.Html;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public static partial class OrchardCoreBuilderExtensions\n    {\n        /// <summary>\n        /// Adds html script sanitization services.\n        /// </summary>\n        /// <param name=\"builder\">The <see cref=\"OrchardCoreBuilder\"/>.</param>\n        public static OrchardCoreBuilder AddHtmlSanitizer(this OrchardCoreBuilder builder)\n        {\n            builder.ConfigureServices(services =>\n            {\n                services.AddOptions<HtmlSanitizerOptions>();\n\n                services.ConfigureHtmlSanitizer((sanitizer) =>\n                {\n                    sanitizer.AllowedAttributes.Add(\"class\");\n                });\n\n                services.AddSingleton<IHtmlSanitizerService, HtmlSanitizerService>();\n            });\n\n            return builder;\n        }\n    }\n}\n", "# HTML Sanitizer\n\nAn HTML Sanitizer is available as part of the Orchard Core Infrastructure.\n\nThe Sanitizer cleans user input that could lead to XSS attacks.\n\nIt is used by default for the following parts and fields:\n\n- HTML Body Part\n- HTML Field\n- Markdown Body Part\n- Markdown Field\n\n!!! note\n    To disable sanitization on these fields disable the `Sanitize Html` option in the field or part settings.\n\n## Razor Helper\n\n`@Orchard.SanitizeHtml((string)Model.ContentItem.HtmlBodyPart.Html);`\n\n## Configuring the Sanitizer\n\nThe sanitizer is configurable using `IOptions<HtmlSanitizerOptions>` during service registration with a configuration \nextension method `ConfigureHtmlSanitizer`.\n\nBy default it allows css classes, but can be configured to accept other attributes.\n\nYou may call this extension method multiple times during the startup pipeline to alter configurations.\n\n```csharp\nservices\n    .AddOrchardCms()\n    .ConfigureServices(tenantServices =>\n        tenantServices.ConfigureHtmlSanitizer((sanitizer) =>\n            {\n                sanitizer.AllowedSchemes.Add(\"mailto\");\n            }));\n```\n\nRefer https://github.com/mganss/HtmlSanitizer for options.\n"], "fixing_code": ["using OrchardCore.Infrastructure.Html;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public static partial class OrchardCoreBuilderExtensions\n    {\n        /// <summary>\n        /// Adds html script sanitization services.\n        /// </summary>\n        /// <param name=\"builder\">The <see cref=\"OrchardCoreBuilder\"/>.</param>\n        public static OrchardCoreBuilder AddHtmlSanitizer(this OrchardCoreBuilder builder)\n        {\n            builder.ConfigureServices(services =>\n            {\n                services.AddOptions<HtmlSanitizerOptions>();\n\n                services.ConfigureHtmlSanitizer((sanitizer) =>\n                {\n                    sanitizer.AllowedAttributes.Add(\"class\");\n                    sanitizer.AllowedTags.Remove(\"form\");\n                });\n\n                services.AddSingleton<IHtmlSanitizerService, HtmlSanitizerService>();\n            });\n\n            return builder;\n        }\n    }\n}\n", "# HTML Sanitizer\n\nAn HTML Sanitizer is available as part of the Orchard Core Infrastructure.\n\nThe Sanitizer cleans user input that could lead to XSS attacks.\n\nIt is used by default for the following parts and fields:\n\n- HTML Body Part\n- HTML Field\n- Markdown Body Part\n- Markdown Field\n\n!!! note\n    To disable sanitization on these fields disable the `Sanitize Html` option in the field or part settings.\n\n## Razor Helper\n\n`@Orchard.SanitizeHtml((string)Model.ContentItem.HtmlBodyPart.Html);`\n\n\n## Defaults configuration\n\nThe elements sanitized by default are listed on this page: https://github.com/mganss/HtmlSanitizer#tags-allowed-by-default\n\nOrchard Core changes these defaults by:\n\n- allowing the attribute `class`\n- removing the tag `form`\n\n## Configuring the Sanitizer\n\nThe sanitizer is configurable using `IOptions<HtmlSanitizerOptions>` during service registration with a configuration \nextension method `ConfigureHtmlSanitizer`.\n\nYou may call this extension method multiple times during the startup pipeline to alter configurations.\n\n```csharp\nservices\n    .AddOrchardCms()\n    .ConfigureServices(tenantServices =>\n        tenantServices.ConfigureHtmlSanitizer((sanitizer) =>\n            {\n                sanitizer.AllowedSchemes.Add(\"mailto\");\n            }));\n```\n\nRefer https://github.com/mganss/HtmlSanitizer for options.\n"], "filenames": ["src/OrchardCore/OrchardCore.Infrastructure/Html/OrchardCoreBuilderExtensions.cs", "src/docs/reference/core/Sanitizer/README.md"], "buggy_code_start_loc": [19, 20], "buggy_code_end_loc": [19, 27], "fixing_code_start_loc": [20, 21], "fixing_code_end_loc": [21, 34], "type": "CWE-79", "message": "In OrchardCore rc1-11259 to v1.2.2 vulnerable to HTML injection, allow an authenticated user with an editor security role to inject a persistent HTML modal dialog component into the dashboard that will affect admin users.", "other": {"cve": {"id": "CVE-2022-32173", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-10-03T13:15:09.737", "lastModified": "2022-10-04T20:25:22.997", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In OrchardCore rc1-11259 to v1.2.2 vulnerable to HTML injection, allow an authenticated user with an editor security role to inject a persistent HTML modal dialog component into the dashboard that will affect admin users."}, {"lang": "es", "value": "En OrchardCore versiones rc1-11259 a v1.2.2, es vulnerable a una inyecci\u00f3n de HTML, lo que permite a un usuario autenticado con un rol de seguridad de editor inyectar un componente de di\u00e1logo modal HTML persistente en el tablero de instrumentos que afectar\u00e1 a usuarios administradores"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:orchardcore:orchardcore:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.0.1", "versionEndExcluding": "1.4.0", "matchCriteriaId": "D600A06B-A974-4B92-BB33-8F4E017DD973"}]}]}], "references": [{"url": "https://github.com/OrchardCMS/OrchardCore/commit/0163c88ddeaca39815d7e6e5ea1c8391085cc136", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.mend.io/vulnerability-database/CVE-2022-32173", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OrchardCMS/OrchardCore/commit/0163c88ddeaca39815d7e6e5ea1c8391085cc136"}}