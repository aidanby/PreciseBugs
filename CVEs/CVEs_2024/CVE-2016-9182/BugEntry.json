{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nabstract class expController {\n    protected $classname = ''; // full controller name w/ 'Controller' suffix\n    public $baseclassname = ''; // root controller name w/o 'Controller' suffix\n    public $classinfo = null; // holds reflection class of class\n//    public $module_name = '';       //FIXME not used and not actually set right index needed of -3 instead of -2 below\n//    protected $basemodel = null;    //FIXME never used, $basemodel_name replaced?\n    public $basemodel_name = ''; // holds classname of base model associated w/ this controller\n    public $model_table = ''; // holds table name for base model\n\n    public $useractions = array(); // available (displayed) user actions/methods for this module\n    public $remove_configs = array(); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    // $permissions used to restrict access to module's actions/methods\n    protected $permissions = array(  // standard set of permissions for all modules unless add'ed or remove'd\n        'manage'    => 'Manage',\n        'configure' => 'Configure',\n        'create'    => 'Create',\n        'edit'      => 'Edit',\n        'delete'    => 'Delete',\n    );\n    protected $m_permissions = array(  // standard set of actions requiring manage permission for all modules\n        'activate'  => 'Activate',\n        'approve'   => 'Approve',\n        'merge'     => 'Merge',\n        'rerank'    => 'ReRank',\n        'import'    => 'Import Items',\n        'export'    => 'Export Items'\n    );\n    protected $remove_permissions = array();  // $permissions not applicable for this module from above list\n    protected $add_permissions = array();  // additional $permissions processed and visible  for this module\n    protected $manage_permissions = array();  // additional actions requiring manage permission in addition to $m_permissions\n    public $requires_login = array();  // actions/methods which ONLY require user be logged in to access...$permissions take priority\n\n    public $filepath = ''; // location of this controller's files\n    public $viewpath = ''; // location of this controllers views; defaults to controller file location\n    public $relative_viewpath = ''; // relative location of controller's views\n    public $asset_path = ''; // location of this controller's assets; defaults to controller file location\n\n    public $config = array(); // holds module configuration settings\n    public $params = array(); // holds sanitized parameters passed to module\n    public $loc = null; // module location object\n\n    public $codequality = 'stable'; // code's level of stability\n\n    public $rss_is_podcast = false;\n\n    /**\n     * @param null  $src\n     * @param array $params\n     *\n     * @return expController\n     *\n     */\n    public function __construct($src = null, $params = array()) {\n        // setup some basic information about this class\n        $this->classinfo = new ReflectionClass($this);\n        $this->classname = $this->classinfo->getName();\n        $this->baseclassname = substr($this->classinfo->getName(), 0, -10);\n        $this->filepath = __realpath($this->classinfo->getFileName());\n\n        // figure out which \"module\" we belong to and setup view path information\n        $controllerpath = explode('/', $this->filepath);\n//        $this->module_name = $controllerpath[(count($controllerpath)-3)];\n\n        // set up the path to this module view files\n        array_pop($controllerpath); // remove 'controllers' from array\n        $controllerpath[count($controllerpath) - 1] = 'views';\n        array_push($controllerpath, $this->baseclassname);\n        $this->relative_viewpath = implode('/', array_slice($controllerpath, -3, 3));\n//        $this->viewpath = BASE.'framework/modules/'.$this->relative_viewpath;\n        //FIXME this requires we move the 'core' controllers into the modules folder or use this hack\n        $depth = array_search('core', $controllerpath);\n        if ($depth) {\n            $this->viewpath = BASE . 'framework/modules/' . $this->relative_viewpath;\n        } else {\n            $this->viewpath = implode('/', $controllerpath);\n        }\n\n        //grab the path to the module's assets\n        array_pop($controllerpath);\n        $controllerpath[count($controllerpath) - 1] = 'assets';\n//        $this->asset_path = PATH_RELATIVE.'framework/'.implode('/', array_slice($controllerpath, -3, 3)).\"/\";\n        $depth = array_search('framework', $controllerpath);  // is this a system file (or theme)?\n        if (!$depth) $depth = array_search('themes', $controllerpath);\n        $this->asset_path = PATH_RELATIVE . implode('/', array_slice($controllerpath, $depth)) . \"/\";\n\n        // figure out which model we're using and setup some info about it\n        if (empty($this->basemodel_name)) $this->basemodel_name = get_model_for_controller($this->classname);\n        $modelname = $this->basemodel_name;\n        if (class_exists($modelname)) {\n            $this->$modelname = new $modelname(null, false, false);\n            $this->model_table = $this->$modelname->tablename;\n        } else {\n            $this->basemodel_name = 'expRecord';\n            $this->$modelname = new expRecord(null, false, false);\n            $this->model_table = null;\n        }\n\n        // set the location data\n        $this->loc = expCore::makeLocation($this->baseclassname, $src, null);\n\n        // flag for needing approval check\n        if (ENABLE_WORKFLOW && $this->$modelname->supports_revisions) {\n            $uilevel = 99;\n            if (expSession::exists(\"uilevel\")) $uilevel = expSession::get(\"uilevel\");\n            if (!expPermissions::check('approve', $this->loc)) {\n                $this->$modelname->needs_approval = true;\n            } elseif ($uilevel == UILEVEL_PREVIEW && isset($uilevel)) {\n                $this->$modelname->needs_approval = true;  // 'preview' should provide a true preview\n            }\n        }\n\n        // get this controllers config data if there is any\n        $config = new expConfig($this->loc);\n        $this->config = $config->config;\n\n        $this->params = $params;\n        if (ENABLE_WORKFLOW)\n            $this->permissions = array_merge($this->permissions, array('approve'=>'Approval'));\n    }\n\n    /**\n     * name of module for backwards compat with old modules\n     *\n     * @return string\n     */\n    public function name() {\n        return static::displayname();\n    }\n\n    /**\n     * name of module\n     *\n     * @return string\n     */\n    public static function displayname() {\n        return gt(\"Exponent Base Controller\");\n    }\n\n    /**\n     * description of module\n     *\n     * @return string\n     */\n    public static function description() {\n        return gt(\"This is the base controller which most Exponent modules inherit their methods from.\");\n    }\n\n    /**\n     * author of module\n     *\n     * @return string\n     */\n    public static function author() {\n        return \"OIC Group, Inc\";\n    }\n\n    /**\n     * does module have sources available? or does it treat content globally\n     *\n     * @return bool\n     */\n    public static function hasSources() {\n        return true;\n    }\n\n    /**\n     * does module have views available?\n     *\n     * @return bool\n     */  //NOTE: Never used - equivalent to !empty ($this->useractions) via expModules::listUserRunnableControllers()?\n    public static function hasViews() {\n        return true;\n    }\n\n    /**\n     * does module have content (stored items) available?\n     *\n     * @return bool\n     */  //NOTE: Never used, better utilized/implemented as isSearchable()\n    public static function hasContent() {\n        return true;\n    }\n\n    /**\n     * does module support workflow?\n     *\n     * @return bool\n     */\n    public static function supportsWorkflow() {\n        return false;\n    }\n\n    /**\n     * is module content searchable? should it be added to search index?\n     *\n     * @return bool\n     */\n    public static function isSearchable() {\n        return false;\n    }\n\n    /**\n     * can this module import data?\n     *\n     * @return bool\n     */\n    public static function canImportData() {\n        return false;\n    }\n\n    /**\n     * can this module export data?\n     *\n     * @return bool\n     */\n    public static function canExportData() {\n        return false;\n    }\n\n    /**\n     * does this module require configuration?\n     *\n     * @return bool\n     */  //NOTE: Never Used\n    public static function requiresConfiguration() {\n        return false;\n    }\n\n    /**\n     * glue to make the view template aware of the module\n     * @deprecated\n     */\n    public function moduleSelfAwareness() {\n        assign_to_template(array(\n            'asset_path' => $this->asset_path,\n            'model_name' => $this->basemodel_name,\n            'table'      => $this->model_table,\n            'controller' => $this->baseclassname,\n            'config'     => $this->config\n        ));\n    }\n\n    /**\n     * default module view method for all items\n     */\n    public function showall() {\n        expHistory::set('viewable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => (isset($this->params['limit']) && $this->params['limit'] != '') ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * default module view method for all items with a specific tag\n     */\n    public function showall_by_tags() {\n        global $db;\n\n         // set history\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // get the tag being passed\n        $tag = new expTag(expString::escape($this->params['tag']));\n\n        // find all the id's of the portfolios for this module\n        $item_ids = $db->selectColumn($modelname, 'id', $this->aggregateWhereClause());\n\n        // find all the items that this tag is attached to\n        $items = $tag->findWhereAttachedTo($modelname);\n\n        // loop the items for this tag and find out which ones belong to this module\n        $items_by_tags = array();\n        foreach ($items as $item) {\n            if (in_array($item->id, $item_ids)) $items_by_tags[] = $item;\n        }\n\n        // create a pagination object for the model and render the action\n        $order = 'created_at DESC';\n        $page = new expPaginator(array(\n            'records'    => $items_by_tags,\n            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => $order,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'    => array(\n                gt('Title') => 'title'\n            ),\n        ));\n//        $page->records = expSorter::sort(array('array'=>$page->records, 'sortby'=>'rank', 'order'=>'ASC', 'ignore_case'=>true));\n        $page->records = expSorter::sort(array('array' => $page->records, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'items'       => $page->records,\n            'moduletitle' => ucfirst($modelname) . ' ' . gt('items tagged with') . ' \"' . expString::escape($this->params['tag']) . '\"',\n            'rank'        => ($order === 'rank') ? 1 : 0\n        ));\n    }\n\n    /**\n     * return all tags used by module's items\n     */\n    public function tags() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_tags = array();\n        foreach ($items as $item) {\n            foreach ($item->expTag as $tag) {\n                if (isset($used_tags[$tag->id])) {\n                    $used_tags[$tag->id]->count++;\n                } else {\n                    $exptag = new expTag($tag->id);\n                    $used_tags[$tag->id] = $exptag;\n                    $used_tags[$tag->id]->count = 1;\n                }\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_tags = array_slice($used_tags, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'hits') {\n            $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'tags' => $used_tags\n        ));\n    }\n\n    /**\n     * return all categories used by module's items\n     */\n    public function categories() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_cats = array();\n        $used_cats[0] = new stdClass();\n        $used_cats[0]->id = 0;\n        $used_cats[0]->title = !empty($this->config['uncat']) ? $this->config['uncat'] : gt('Not Categorized');\n        $used_cats[0]->count = 0;\n        foreach ($items as $item) {\n            if (!empty($item->expCat)) {\n                if (isset($used_cats[$item->expCat[0]->id])) {\n                    $used_cats[$item->expCat[0]->id]->count++;\n                } else {\n                    $expcat = new expCat($item->expCat[0]->id);\n                    $used_cats[$item->expCat[0]->id] = $expcat;\n                    $used_cats[$item->expCat[0]->id]->count = 1;\n                }\n            } else {\n                $used_cats[0]->count++;\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_cats = array_slice($used_cats, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'count') {\n            $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'cats' => $used_cats\n        ));\n    }\n\n    /**\n     * return all comments used by module's items\n     */\n    public function comments() {\n\t    expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all');\n        $all_comments = array();\n        // get all the blog comments\n        foreach ($items as $item) {\n            $more_comments = expCommentController::getComments(array('content_type'=>$modelname,'content_id'=>$item->id));\n            if (!empty($more_comments)) {\n                foreach ($more_comments as $next_comment) {\n                    $next_comment->ref = $item->title;\n                    $next_comment->sef_url = $item->sef_url;\n                }\n                $all_comments = array_merge($all_comments,$more_comments);\n            }\n        }\n        // sort then limit all the blog comments\n        $all_comments = expSorter::sort(array('array' => $all_comments, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n        $limit = (isset($this->config['headcount']) && $this->config['headcount'] != '') ? $this->config['headcount'] : 10;\n        $comments = array_slice($all_comments,0,$limit);\n\t    assign_to_template(array(\n            'comments'=>$comments,\n        ));\n\t}\n\n    /**\n     * default view for individual item\n     */\n    public function show() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // figure out if we're looking this up by id or title\n        $id = null;\n        if (isset($this->params['id'])) {\n            $id = $this->params['id'];\n        } elseif (isset($this->params['title'])) {\n            $id = expString::escape($this->params['title']);\n        }\n\n        $record = new $modelname($id);\n        if (empty($record->id))\n            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>$this->params['title']));\n\n        $config = expConfig::getConfig($record->location_data);\n        if (empty($this->config))\n            $this->config = $config;\n        if (empty($this->loc->src)) {\n            $r_loc = expUnserialize($record->location_data);\n            $this->loc = new stdClass();\n            $this->loc->src = $r_loc->src;\n        }\n\n        assign_to_template(array(\n            'record' => $record,\n            'config' => $config\n        ));\n    }\n\n    /**\n     * view the item by referring to its title\n     * @deprecated\n     */\n    public function showByTitle() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n        // first we'll check to see if this matches the sef_url field...if not then we'll look for the\n        // title field\n        $this->params['title'] = expString::escape($this->params['title']);  // escape title to prevent sql injection\n        $record = $this->$modelname->find('first', \"sef_url='\" . $this->params['title'] . \"'\");\n        if (!is_object($record)) {\n            $record = $this->$modelname->find('first', \"title='\" . $this->params['title'] . \"'\");\n        }\n        $this->loc = unserialize($record->location_data);\n\n        assign_to_template(array(\n            'record' => $record,\n        ));\n    }\n\n    /**\n     * view a random item\n     */\n    public function showRandom() {\n        expHistory::set('viewable', $this->params);\n        $where = static::hasSources() ? $this->aggregateWhereClause() : null;\n        $limit = isset($this->params['limit']) ? $this->params['limit'] : 1;\n        $order = 'RAND()';\n        assign_to_template(array(\n            'items' => $this->text->find('all', $where, $order, $limit)\n        ));\n    }\n\n    /**\n     * view items referenced by tags\n     * @deprecated\n     */\n    public function showByTags() {\n        global $db;\n\n        // set the history point for this action\n        expHistory::set('viewable', $this->params);\n\n        // setup some objects\n        $tagobj = new expTag();\n        $modelname = empty($this->params['model']) ? $this->basemodel_name : $this->params['model'];\n        $model = new $modelname();\n\n        // start building the sql query\n        $sql = 'SELECT DISTINCT m.id FROM ' . $db->prefix . $model->tablename . ' m ';\n        $sql .= 'JOIN ' . $db->prefix . $tagobj->attachable_table . ' ct ';\n        $sql .= 'ON m.id = ct.content_id WHERE (';\n        $first = true;\n\n        if (isset($this->params['tags'])) {\n            $tags = is_array($this->params['tags']) ? $this->params['tags'] : array($this->params['tags']);\n        } elseif (isset($this->config['expTags'])) {\n            $tags = $this->config['expTags'];\n        } else {\n            $tags = array();\n        }\n\n        foreach ($tags as $tagid) {\n            $sql .= ($first) ? 'exptags_id=' . intval($tagid) : ' OR exptags_id=' . intval($tagid);\n            $first = false;\n        }\n        $sql .= \") AND content_type='\" . $model->classname . \"'\";\n\n        // get the objects and render the template\n        $tag_assocs = $db->selectObjectsBySql($sql);\n        $records = array();\n        foreach ($tag_assocs as $assoc) {\n            $records[] = new $modelname($assoc->id);\n        }\n\n        assign_to_template(array(\n            'items' => $records\n        ));\n    }\n\n    /**\n     * create an item in this module\n     * @deprecated in favor of edit w/o id param\n     */\n    public function create() {\n        $args = array('controller' => $this->params['controller'], 'action' => 'edit');\n        //if (!empty($this->params['instance'])) $args['instance'] = $this->params['instance'];\n        if (!empty($this->params['src'])) $args['src'] = $this->params['src'];\n        redirect_to($args);\n    }\n\n    /**\n     * edit item in module, also used to copy items\n     */\n    public function edit() {\n        expHistory::set('editable', $this->params);\n        $taglist = expTag::getAllTags();\n        $modelname = $this->basemodel_name;\n//        $record = isset($this->params['id']) ? $this->$modelname->find($this->params['id']) : new $modelname($this->params);\n        if (isset($this->params['id'])) {\n            if (!isset($this->params['revision_id'])) {\n                $record = $this->$modelname->find($this->params['id']);\n            } else {\n                $currentrecord = $this->$modelname->find($this->params['id']);\n                $records = $this->$modelname->find('revisions', $this->$modelname->identifier . '=' . intval($this->params['id']) . ' AND revision_id=' . intval($this->params['revision_id']));\n                $record = $records[0];\n                $record->current_revision_id = $currentrecord->revision_id;\n            }\n        } else {\n            $record = new $modelname($this->params);\n        }\n        if (!empty($this->params['copy'])) {\n            $record->id = null;\n            if (isset($record->sef_url)) $record->sef_url = null;\n        }\n        assign_to_template(array(\n            'record'     => $record,\n//            'table'      => $this->$modelname->tablename,\n//            'controller' => $this->params['controller'],\n            'taglist'    => $taglist\n        ));\n    }\n\n    /**\n     * merge/move aggregated item into this module\n     */\n    public function merge() {\n        expHistory::set('editable', $this->params);\n        $modelname = $this->basemodel_name;\n        $record = $this->$modelname->find($this->params['id']);\n\n        $loc = expUnserialize($record->location_data);\n        $loc->src = $this->loc->src;\n        $record->location_data = serialize($loc);\n//        $this->$modelname->update($record);\n        $record->update();\n\n        expHistory::back();\n    }\n\n    /**\n     * update (save) item in module\n     */\n    public function update() {\n        global $db;\n\n        //check for and handle tags\n        if (array_key_exists('expTag', $this->params)) {\n            if (isset($this->params['id'])) {\n                $db->delete('content_expTags', 'content_type=\"' . (!empty($this->params['content_type']) ? $this->params['content_type'] : $this->basemodel_name) . '\" AND content_id=' . $this->params['id']);\n            }\n            $tags = explode(\",\", trim($this->params['expTag']));\n            unset($this->params['expTag']);\n\n            foreach ($tags as $tag) {\n                if (!empty($tag)) {\n                    $tag = strtolower(trim($tag));\n                    $tag = str_replace(array('\"', \"'\"), \"\", $tag); // strip double and single quotes\n                    if (!empty($tag)) {\n                        $expTag = new expTag($tag);\n                        if (empty($expTag->id))\n                            $expTag->update(array('title' => $tag));\n                        $this->params['expTag'][] = $expTag->id;\n                    }\n                }\n            }\n        }\n\n        //check for and handle cats\n        if (array_key_exists('expCat', $this->params) && !empty($this->params['expCat'])) {\n            $catid = $this->params['expCat'];\n            unset($this->params['expCat']);\n            $this->params['expCat'][] = $catid;\n        }\n\n        $modelname = $this->basemodel_name;\n        $this->$modelname->update($this->params);\n\n        if ($this->isSearchable()) {\n            $this->addContentToSearch($this->params);\n        }\n\n        // check for auto send facebook status\n        if (!empty($this->params['send_status'])) {\n            if ($this->classname == 'eventController') {\n                facebookController::postEvent(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                facebookController::postStatus(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for auto send tweet\n        if (!empty($this->params['send_tweet'])) {\n            if ($this->classname == 'eventController') {\n                twitterController::postEventTweet(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                twitterController::postTweet(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for eAlerts\n        if (!empty($this->params['send_ealerts'])) {\n            redirect_to(array('controller' => 'ealert', 'action' => 'send_confirm', 'model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'orig_controller' => expModules::getControllerName($this->classname)));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    /**\n     * delete item in module\n     */\n    public function delete() {\n        $modelname = $this->basemodel_name;\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the') . ' ' . $modelname . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $obj = new $modelname($this->params['id']);\n        $rows = $obj->delete();\n\n        // if this module is searchable lets delete spidered content\n        if ($this->isSearchable()) {\n            $search = new search();\n//            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->classname . \"'\");\n            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->baseclassname . \"'\");\n            if (!empty($content->id)) $content->delete();\n        }\n\n        expHistory::back();\n    }\n\n    /**\n     * rerank items in model\n     */\n    public function rerank() {\n        $modelname = $this->basemodel_name;\n        $obj = new $modelname($this->params['id']);\n        $obj->rerank($this->params['push']);\n        expHistory::back();\n    }\n\n    /**\n     * display module management view\n     */\n    public function manage() {\n        expHistory::set('manageable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => isset($this->params['limit']) ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * rerank module items, called from ddrerank\n     */\n    public function manage_ranks() {\n        $rank = 1;\n        foreach ($this->params['rerank'] as $id) {\n            $modelname = $this->params['model'];\n            $obj = new $modelname($id);\n            $obj->rank = $rank;\n            $obj->save(false, true);\n            $rank++;\n        }\n\n        if (!expJavascript::inAjaxAction())\n            redirect_to($this->params['lastpage']);\n    }\n\n    /**\n     * Configure the module\n     */\n    public function configure() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $views = expTemplate::get_config_templates($this, $this->loc);\n\n        // needed for aggregation list\n        $pullable_modules = expModules::listInstalledControllers($this->baseclassname, $this->loc);\n        $page = new expPaginator(array(\n            'records' => $pullable_modules,\n            'controller' => $this->loc->mod,\n            'action' => $this->params['action'],\n            'order'   => isset($this->params['order']) ? $this->params['order'] : 'section',\n            'dir'     => isset($this->params['dir']) ? $this->params['dir'] : '',\n            'page'    => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns' => array(\n                gt('Title') => 'title',\n                gt('Page')  => 'section'\n            ),\n        ));\n\n//        if (empty($this->params['hcview'])) {\n            $containerloc = expCore::makeLocation(expModules::getModuleName($this->loc->mod),$this->loc->src);\n            $container = $db->selectObject('container', \"internal='\" . serialize($containerloc) . \"'\");\n            if (empty($container)) {\n                $container = new stdClass();\n                $container->action = 'showall';\n            } else {\n                $container->internal = unserialize($container->internal);\n            }\n            if (empty($container->action)) {\n                $container->action = 'showall';\n            }\n//            expSession::clearAllUsersSessionCache('containermodule');\n\n//            $modules_list = expModules::getActiveModulesAndControllersList();\n//            foreach ($modules_list as $moduleclass) {\n//                $module = new $moduleclass();\n//\n//                // Get basic module meta info\n//                $mod = new stdClass();\n//                $mod->name = $module->name();\n//                $mod->author = $module->author();\n//                $mod->description = $module->description();\n//                if (isset($container->view) && $container->internal->mod == $moduleclass) {\n//                    $mod->defaultView = $container->view;\n//                } else $mod->defaultView = DEFAULT_VIEW;\n//\n//                // Get support flags\n//                $mod->supportsSources = ($module->hasSources() ? 1 : 0);\n//                $mod->supportsViews = ($module->hasViews() ? 1 : 0);\n//\n//                // Get a list of views\n//                $mod->views = expTemplate::listModuleViews($moduleclass);\n//                natsort($mod->views);\n//\n//                $modules[$moduleclass] = $mod;\n////       \t\t$mods[$moduleclass] = $module->name();\n//                //        $mods[$moduleclass] = $moduleclass::name();\n//            }\n\n//        array_multisort(array_map('strtolower', $mods), $mods);\n\n            $actions = $this->useractions;\n            $mod_views = array();\n            if (!empty($actions)) {\n                  // Language-ize the action names\n                foreach ($actions as $key => $value) {\n                    $actions[$key] = gt($value);\n                }\n                $mod_views = expTemplate::get_action_views($this->classname, $container->action, $actions[$container->action]);\n                if (count($mod_views) < 1) $mod_views[$container->action] = $actions[$container->action] . ' - Default View';\n            }\n\n            assign_to_template(array(\n                'container' => $container,\n                'actions'   => $actions,\n                'mod_views' => $mod_views,\n            ));\n//        } else {\n        if (!empty($this->params['hcview'])) {\n            // this must be a hard-coded module?\n            assign_to_template(array(\n                'hcview' => $this->params['hcview'],\n            ));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $folders = array();\n        $folders[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $folders[$cat->id] = $cat->title;\n        }\n\n        assign_to_template(array(\n//            'config'            => $this->config,  //FIXME already assigned in controllertemplate?\n            'page'              => $page, // needed for aggregation list\n            'views'             => $views,\n            'title'             =>static::displayname(),\n            'current_section'   => expSession::get('last_section'),\n//            'classname'         => $this->classname,  //FIXME $controller already assigned baseclassname (short vs long) in controllertemplate?\n            'viewpath'          => $this->viewpath,\n            'relative_viewpath' => $this->relative_viewpath,\n            'folders'           => $folders,\n        ));\n\n    }\n\n    /**\n     * save module configuration\n     */\n    public function saveconfig() {\n        global $db;\n\n        // update module title/action/view\n        if (!empty($this->params['container_id'])) {\n            $container = $db->selectObject('container', \"id=\" . $this->params['container_id']);\n            if (!empty($container)) {\n                $container->title = $this->params['moduletitle'];\n                $container->action = $this->params['actions'];\n                $container->view = $this->params['views'];\n                $container->is_private = $this->params['is_private'];\n                $db->updateObject($container, 'container');\n                expSession::clearAllUsersSessionCache('containermodule');\n            }\n            unset(\n                $this->params['container_id'],\n                $this->params['moduletitle'],\n                $this->params['modcntrol'],\n                $this->params['actions'],\n                $this->params['views'],\n                $this->params['actions'],\n                $this->params['is_private']\n            );\n        }\n\n        // create a new RSS object if enable is checked.\n        $params = $this->params;\n        if (!empty($this->params['enable_rss'])) {\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            $rssfeed = new expRss($params);\n            $rssfeed->update($params);\n            $this->params['feed_sef_url'] = $rssfeed->sef_url;\n        } else {\n            $rssfeed = new expRss($this->params);\n            $params['enable_rss'] = false;\n            if (empty($params['advertise']))\n                $params['advertise'] = false;\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            if (!empty($rssfeed->id)) { // do NOT create a new record, only update existing ones\n                $rssfeed->update($params);\n                $this->params['feed_sef_url'] = $rssfeed->sef_url;\n            }\n        }\n\n        // create a new eAlerts object if enable is checked.\n        if (!empty($this->params['enable_ealerts'])) {\n            $ealert = new expeAlerts($this->params);\n            $ealert->update($this->params);\n        }\n\n        // unset some unneeded params\n        unset(\n            $this->params['module'],\n            $this->params['controller'],\n            $this->params['src'],\n            $this->params['int'],\n            $this->params['id'],\n            $this->params['cid'],\n            $this->params['action'],\n            $this->params['PHPSESSID'],\n            $this->params['__utma'],\n            $this->params['__utmb'],\n            $this->params['__utmc'],\n            $this->params['__utmz'],\n            $this->params['__utmt'],\n            $this->params['__utmli'],\n            $this->params['__cfduid']\n        );\n\n        // setup and save the config\n        $config = new expConfig($this->loc);\n        $config->update(array('config' => $this->params));\n\n        flash('message', gt('Configuration updated'));\n        expHistory::back();\n    }\n\n    /**\n     * get the module's items in an rss feed format\n     *\n     * this function is very general and will most of the time need to be overwritten and customized\n     *\n     * @return array\n     */\n    public function getRSSContent($limit = 0) {\n        $class = new $this->basemodel_name;\n        $items = $class->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'created_at DESC', $limit);\n\n        //Convert the items to rss items\n        $rssitems = array();\n        foreach ($items as $key => $item) {\n            $rss_item = new FeedItem();\n            $rss_item->title = expString::convertSmartQuotes($item->title);\n            $rss_item->link = $rss_item->guid = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url));\n            $rss_item->description = expString::convertSmartQuotes($item->body);\n            $rss_item->author = user::getUserById($item->poster)->firstname . ' ' . user::getUserById($item->poster)->lastname;\n            $rss_item->authorEmail = user::getEmailById($item->poster);\n//            $rss_item->date = isset($item->publish_date) ? date(DATE_RSS, $item->publish_date) : date(DATE_RSS, $item->created_at);\n            $rss_item->date = isset($item->publish_date) ? $item->publish_date : $item->created_at;\n            if (!empty($item->expCat[0]->title)) $rss_item->category = array($item->expCat[0]->title);\n            $comment_count = expCommentController::countComments(array('content_id' => $item->id, 'content_type' => $this->basemodel_name));\n            if ($comment_count) {\n                $rss_item->comments = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url)) . '#exp-comments';\n//                $rss_item->commentsRSS = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n                $rss_item->commentsCount = $comment_count;\n            }\n            $rssitems[$key] = $rss_item;\n\n            if ($limit && count($rssitems) >= $limit)\n                break;\n        }\n        return $rssitems;\n    }\n\n    /**\n     * method to display an rss feed from this module\n     */\n    public function rss() {\n        require_once(BASE . 'external/feedcreator.class.php');\n\n        $id = isset($this->params['title']) ? expString::escape($this->params['title']) : (isset($this->params['id']) ? $this->params['id'] : null);\n        if (empty($id)) {\n            $module = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n            $id = array('module' => $module, 'src' => $this->params['src']);\n        }\n        $site_rss = new expRss($id);\n        if ($site_rss->enable_rss == true && !empty($site_rss->id)) {\n            $site_rss->title = empty($site_rss->title) ? gt('RSS for') . ' ' . URL_FULL : $site_rss->title;\n            $site_rss->feed_desc = empty($site_rss->feed_desc) ? gt('This is an RSS syndication from') . ' ' . HOSTNAME : $site_rss->feed_desc;\n//            if (isset($site_rss->rss_cachetime)) {\n//                $ttl = $site_rss->rss_cachetime;\n//            }\n            if ($site_rss->rss_cachetime == 0) {\n                $site_rss->rss_cachetime = 1440;\n            }\n\n            if (!empty($site_rss->itunes_cats)) {\n                $ic = explode(\";\", $site_rss->itunes_cats);\n                $x = 0;\n                $itunes_cats = array();\n                foreach ($ic as $cat) {\n                    $cat_sub = explode(\":\", $cat);\n                    $itunes_cats[$x]->category = $cat_sub[0];\n                    if (isset($cat_sub[1])) {\n                        $itunes_cats[$x]->subcategory = $cat_sub[1];\n                    }\n                    $x++;\n                }\n            }\n\n            // NO buffering from here on out or things break unexpectedly. - RAM\n            ob_end_clean();\n\n            header('Content-Type: ' . 'application/rss+xml');\n//            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n//            header('Content-Transfer-Encoding: binary');\n            header('Content-Encoding:');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n                header('Vary: User-Agent');\n            } else {\n                header('Pragma: no-cache');\n            }\n\n            if ($site_rss->rss_is_podcast) {\n                $feed_type = \"PODCAST\";\n            } else {\n                $feed_type = \"RSS2.0\";\n            }\n            $feed_cache = BASE . 'tmp/rsscache/' . $site_rss->sef_url . '.xml';\n\n            $rss = new UniversalFeedCreator();\n//            if (file_exists(THEME_ABSOLUTE . \"rss/feed.css\"))  // custom css style\n//                $rss->cssStyleSheet = THEME_RELATIVE . \"rss/feed.css\";\n            if (file_exists(THEME_ABSOLUTE . \"rss/feed.xsl\"))  // custom xml style\n                $rss->xslStyleSheet = THEME_RELATIVE . \"rss/feed.xsl\";\n            $rss->useCached($feed_type, $feed_cache, $site_rss->rss_cachetime);  // if cache exists output then redirect\n\n            $rss->title = $site_rss->title;\n            if (!empty($this->params['type']))\n                $rss->title .= ' ' . ucfirst($this->params['type']);\n            $rss->description = $site_rss->feed_desc;\n            $rss->image = new FeedImage();\n            $rss->image->url = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url : URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n            $rss->image->title = $site_rss->title;\n            $rss->image->link = URL_FULL;\n            //    $rss->image->width = 64;\n            //    $rss->image->height = 64;\n            $rss->ttl = $site_rss->rss_cachetime;\n            $rss->link = URL_FULL;\n            $rss->language = LOCALE;\n            $rss->syndicationURL = makeLink(array('module'=>$site_rss->module, 'src'=>$site_rss->src));\n            if ($site_rss->rss_is_podcast) {\n                $rss->itunes = new iTunes();\n                $rss->itunes->author = !empty($site_rss->feed_artist) ? $site_rss->feed_artist : ORGANIZATION_NAME;\n                $rss->itunes->image = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url :URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n                $rss->itunes->summary = $site_rss->feed_desc;\n                if (!empty($itunes_cats)) {\n                    $rss->itunes->category = $itunes_cats[0]->category;\n                    $rss->itunes->subcategory = $itunes_cats[0]->subcategory;\n                }\n                //\t\t$rss->itunes->explicit = 0;\n//                $rss->itunes->subtitle = $site_rss->title;\n                $rss->itunes->subtitle = $site_rss->feed_desc;\n                //\t\t$rss->itunes->keywords = 0;\n                $rss->itunes->owner_email = SMTP_FROMADDRESS;\n                $rss->itunes->owner_name = ORGANIZATION_NAME;\n            }\n\n            $pubDate = '';\n            $site_rss->params = $this->params;\n            foreach ($site_rss->getFeedItems($site_rss->rss_limit) as $item) {\n                if ($item->date > $pubDate) {\n                    $pubDate = $item->date;\n                }\n                $rss->addItem($item);\n            }\n            if (!empty($site_rss->rss_limit)) {\n                $rss->items = array_slice($rss->items, 0, $site_rss->rss_limit);\n            }\n            $rss->pubDate = $pubDate;\n\n//            echo $rss->createFeed($feed_type);\n            echo $rss->saveFeed($feed_type, $feed_cache, $site_rss->rss_cachetime);  // does redirect after updating cache\n        } else {\n            flash('notice', gt(\"This RSS feed is not available.\"));\n            expHistory::back();\n        }\n\n        //Read the file out directly\n        exit();\n    }\n\n    /**\n     * download a file attached to item\n     */\n    public function downloadfile() {\n        if (!isset($this->config['allowdownloads']) || $this->config['allowdownloads'] == true) {\n            //if ($db->selectObject('content_expFiles', 'content_type=\"'.$this->baseclassname.'\" AND expfiles_id='.$this->params['id']) != null) {\n            expFile::download($this->params['id']);\n            //}\n        } else {\n            flash('error', gt('Downloads have not been enabled for this file'));\n            expHistory::back();\n        }\n\n    }\n\n    /**\n     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n     *\n     * @return array\n     */\n    public function permissions() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->add_permissions);\n        return $perms;\n    }\n\n    /**\n     * permission functions to aggregate a module's permissions based on add/remove and manage permissions\n     *\n     * @return array\n     */\n    public function permissions_all() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->m_permissions, $this->add_permissions, $this->manage_permissions);\n        return $perms;\n    }\n\n    // create a psuedo global permission specific to the module; return true grants permission, false continues with other permission checks\n    public static function checkPermissions($permission, $location) {\n        return false;\n    }\n\n    /**\n     * get the model(s) associated with this module\n     *\n     * @return array\n     */\n    public function getModels() {\n        return isset($this->models) ? $this->models : array($this->basemodel_name);\n    }\n\n    /**\n     * type of items searched in the module\n     *\n     * @return string\n     */\n    public function searchName() {\n        return static::displayname();\n    }\n\n    /**\n     * category of items searched in the module\n     *\n     * @return string\n     */\n    public function searchCategory() {\n        return $this->basemodel_name;\n    }\n\n    /**\n     * add module items to search index\n     *\n     * @return int\n     */\n    public function addContentToSearch() {\n//        global $db, $router;\n        global $db;\n\n        $count = 0;\n        $model = new $this->basemodel_name(null, false, false);\n        $where = (!empty($this->params['id'])) ? 'id=' . $this->params['id'] : null;\n        $content = $db->selectArrays($model->tablename, $where);\n        foreach ($content as $cnt) {\n            $origid = $cnt['id'];\n            unset($cnt['id']);\n           //build the search record and save it.\n//            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->classname . \"'\";\n            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->baseclassname . \"'\";\n            $oldindex = $db->selectObject('search', $sql);\n            if (!empty($oldindex)) {\n                $search_record = new search($oldindex->id, false, false);\n                $search_record->update($cnt);\n            } else {\n                $search_record = new search($cnt, false, false);\n            }\n\n            //build the search record and save it.\n            $search_record->original_id = $origid;\n            $search_record->posted = empty($cnt['created_at']) ? null : $cnt['created_at'];\n            // get the location data for this content\n            if (isset($cnt['location_data']))\n                $loc = expUnserialize($cnt['location_data']);\n            $src = isset($loc->src) ? $loc->src : null;\n            if (!empty($cnt['sef_url'])) {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $cnt['sef_url'])));\n            } else {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'id' => $origid, 'src' => $src)));\n            }\n//\t        if (empty($search_record->title)) $search_record->title = 'Untitled';\n            $search_record->view_link = $link;\n//            $search_record->ref_module = $this->classname;\n            $search_record->ref_module = $this->baseclassname;\n            $search_record->category = $this->searchName();\n            $search_record->ref_type = $this->searchCategory();\n            $search_record->save();\n            $count++;\n        }\n\n        return $count;\n    }\n\n    /**\n     * additional check for display of search hit\n     *\n     * @param $record\n     *\n     * @return bool\n     */\n    public static function searchHit($record) {\n        return true;  // default is to display search hit\n    }\n\n    /**\n     * remove all module items from search index\n     */\n    public function delete_search() {\n        global $db;\n        // remove this modules entries from the search table.\n        if ($this->isSearchable()) {\n//            $where = \"ref_module='\" . $this->classname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n            $where = \"ref_module='\" . $this->baseclassname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n//            $test = $db->selectObjects('search', $where);\n            $db->delete('search', $where);\n        }\n    }\n\n    /**\n     * delete module and all its items for backwards compat with old modules\n     *\n     * @param $loc\n     */\n    public function delete_In($loc) {\n        $this->delete_instance($loc);\n    }\n\n    /**\n     * delete module, config, and all its items\n     * @param bool $loc\n     */\n    public function delete_instance($loc = false) {\n        $model = new $this->basemodel_name();\n        $where = 1;\n        if ($loc || static::hasSources())\n            $where = \"location_data='\" . serialize($this->loc) . \"'\";\n        $items = $model->find('all',$where);\n        foreach ($items as $item) {\n            $item->delete();  // model should delete attachments and other associated objects\n        }\n        $cfg = new expConfig($this->loc);\n        $cfg->delete();\n    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    public function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n        $modelname = $this->basemodel_name;\n\n        switch ($action) {\n            case 'showall':\n                $metainfo['title'] = gt(\"Showing\") . \" \" . static::displayname() . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            case 'show':\n            case 'showByTitle':\n                // look up the record.\n                if (isset($router->params['id']) || isset($router->params['title'])) {\n                    $lookup = isset($router->params['id']) ? $router->params['id'] : $router->params['title'];\n                    $object = new $modelname($lookup);\n                    // set the meta info\n                    if (!empty($object)) {\n                        if (!empty($object->body)) {\n                            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n                        } else {\n                            $desc = SITE_DESCRIPTION;\n                        }\n                        if (!empty($object->expTag)) {\n                            $keyw = '';\n                            foreach ($object->expTag as $tag) {\n                                if (!empty($keyw)) $keyw .= ', ';\n                                $keyw .= $tag->title;\n                            }\n                        } else {\n                            $keyw = SITE_KEYWORDS;\n                        }\n                        $metainfo['title'] = empty($object->meta_title) ? $object->title : $object->meta_title;\n                        $metainfo['keywords'] = empty($object->meta_keywords) ? $keyw : $object->meta_keywords;\n                        $metainfo['description'] = empty($object->meta_description) ? $desc : $object->meta_description;\n//                        $metainfo['canonical'] = empty($object->canonical) ? URL_FULL.substr($router->sefPath, 1) : $object->canonical;\n                        $metainfo['canonical'] = empty($object->canonical) ? $router->plainPath() : $object->canonical;\n                        $metainfo['noindex'] = empty($object->meta_noindex) ? false : $object->meta_noindex;\n                        $metainfo['nofollow'] = empty($object->meta_nofollow) ? false : $object->meta_nofollow;\n                        $metainfo['rich'] = $this->meta_rich($router->params, $object);\n                        $metainfo['fb'] = $this->meta_fb($router->params, $object, $metainfo['canonical']);\n                        $metainfo['tw'] = $this->meta_tw($router->params, $object, $metainfo['canonical']);\n                    }\n                    break;\n                }\n            default:\n                //check for a function in the controller called 'action'_meta and use it if so\n                $functionName = $action . \"_meta\";\n                $mod = new $this->classname;\n                if (method_exists($mod, $functionName)) {\n                    $metainfo = $mod->$functionName($router->params);\n                } else {\n                    $metainfo['title'] = static::displayname() . \" - \" . SITE_TITLE;\n                    $metainfo['keywords'] = SITE_KEYWORDS;\n                    $metainfo['description'] = SITE_DESCRIPTION;\n//                    $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n                    $metainfo['canonical'] = $router->plainPath();\n                }\n        }\n\n        return $metainfo;\n    }\n\n    /**\n     * Returns rich snippet PageMap meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_rich($request, $object) {\n        return null;\n    }\n\n    /**\n     * Returns Facebook og: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_fb($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * Returns Twitter twitter: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_tw($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_tags_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['tag'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $tag = $request['tag'];\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('tagged as') . ' ' . $tag;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = $request['tag'];\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_date_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['month'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $mk = mktime(0, 0, 0, $request['month'], 01, $request['year']);\n            $ts = strftime('%B, %Y', $mk);\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('written in') . ' ' . $ts;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = SITE_KEYWORDS;\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * approve module item\n     */\n    public function approve() {\n        $modelname = $this->basemodel_name;\n        $lookup = isset($this->params['id']) ? $this->params['id'] : $this->params['title'];\n        $object = new $modelname($lookup);\n        $object->approved = true;\n        $object->save(false, true);  // we don't want to add this approval as a new revision\n        expHistory::back();\n    }\n\n    /**\n     * The aggregateWhereClause function creates a sql where clause which also includes aggregated module content\n     *\n     * @param string $type\n     *\n     * @return string\n     */\n    public function aggregateWhereClause($type='') {\n        global $user;\n\n        $sql = '';\n\n        if (empty($this->config['add_source']) && !static::hasSources()) {\n            return $sql;\n        }\n\n        if (!empty($this->config['aggregate'])) $sql .= '(';\n\n        $sql .= \"location_data ='\" . serialize($this->loc) . \"'\";\n\n        if (!empty($this->config['aggregate'])) {\n            foreach ($this->config['aggregate'] as $src) {\n                $loc = expCore::makeLocation($this->baseclassname, $src);\n                $sql .= \" OR location_data ='\" . serialize($loc) . \"'\";\n            }\n\n            $sql .= ')';\n        }\n        $model = $this->basemodel_name;\n        if (ENABLE_WORKFLOW && $this->$model->needs_approval) {\n            if ($user->id) {\n                $sql .= ' AND (approved=1 OR poster=' . $user->id . ' OR editor=' . $user->id . ')';\n            } else {\n                $sql .= ' AND approved=1';\n            }\n        }\n\n        return $sql;\n    }\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n//Global Variables\n\n// expModules\n/**\n * Stores the list of available/active controllers\n * @var array $available_controllers\n * @name $available_controllers\n */\n$available_controllers = array();\n\n// expTheme\n/**\n * Stores the theme validation flags\n * @var array $validateTheme does theme have header & footer\n * @name $validateTheme\n */\n$validateTheme = array(\"headerinfo\"=>false,\"footerinfo\"=>false);\n/**\n * Stores the list of module scopes\n * @var array $module_scope\n * @name $module_scope\n */\n$module_scope = array();\n/**\n * Stores the theme framework\n * @var integer $framework\n * @name $framework\n */\n$framework = null;\n\n// expLang\n/**\n * Stores the list of language strings for the current language\n * @var array $cur_lang\n * @name $cur_lang\n */\n$cur_lang = array();\n/**\n * Stores the list of language strings for the default language (English - US)\n * @var array $default_lang\n * @name $default_lang\n */\n$default_lang = array();\n/**\n * Stores the list of language specific strings specific to the theme\n * @var array $custom_lang\n * @name $custom_lang\n */\n$custom_lang = array();\n/**\n * Stores the name of the default language file\n * @var array $default_lang_file\n * @name $default_lang_file\n */\n$default_lang_file = '';\n/**\n * Stores the name of the language file to be created\n * @var array $target_lang_file\n * @name $target_lang_file\n */\n$target_lang_file = '';\n\n// expDatabase\n/**\n * Stores the exponent database object\n * @var \\database $db the exponent database object\n * @name $db\n */\n$db = new stdClass();\n\n// expHistory\n/**\n * Stores the browsing history object\n * @var expHistory $history\n * @name $history\n */\n$history = new stdClass();\n\n// user model\n/**\n * Stores the current user object\n * @var user $user\n * @name $user\n */\n$user = new stdClass();\n/**\n * This global array belongs exclusively to the user model, and is used to cache\n * users as they are retrieved, to help out with performance when doing a lot of\n * work with user accounts and profile information.\n * @var array $SYS_USERS_CACHE\n * @name $SYS_USERS_CACHE\n */\n$SYS_USERS_CACHE = array();\n\n// expRouter\n/**\n * Stores the routing/link/url object\n * @var expRouter $router\n * @name $router\n */\n$router = new stdClass();\n/**\n * Stores the routing/link/url object\n * @var section $sectionObj\n * @name $sectionObj\n */\n$sectionObj = new stdClass();\n\n// expCore\n/**\n * Stores the list of sections/pages for the site\n * @var array $sections\n * @name $sections\n */\n$sections = array();\n// expPermissions\n/**\n * Stores the permission data for the current user.\n * This should not be modified by anything outside of the permissions subsystem.\n * @var array $exponent_permissions_r\n * @name $exponent_permissions_r\n */\n$exponent_permissions_r = array();\n\n// expJavascript\n/**\n * Stores the page's inline javascript code\n * @var array $js2foot\n * @name $js2foot\n */\n$js2foot = array();\n/**\n * Stores the yui3 javascript files list\n * @var array $yui3js\n * @name $yui3js\n */\n$yui3js = false;\n/**\n * Stores the jquery javascript files list\n * @var array $jqueryjs\n * @name $jqueryjs\n */\n$jqueryjs = array();\n/**\n * Stores the twitter bootstrap javascript file list\n * @var array $bootstrapjs\n * @name $bootstrapjs\n */\n$bootstrapjs = array();\n/**\n * Stores the 'other' javascript files list\n * @var array $expJS\n * @name $expJS\n */\n$expJS = array();\n\n// expCSS\n/**\n * Stores the user's less global variables\n * @var array $less_vars\n * @name $less_vars\n */\n$less_vars = array();\n/**\n * Stores the user's css files to load first\n * @var array $css_primer\n * @name $css_primer\n */\n$css_primer = array();\n/**\n * Stores the user's css core/system files\n * @var array $css_core\n * @name $css_core\n */\n$css_core = array();\n/**\n * Stores the user's css files\n * @var array $css_links\n * @name $css_links\n */\n$css_links = array();\n/**\n * Stores the user's css files\n * @var array $css_theme\n * @name $css_theme\n */\n$css_theme = array();\n/**\n * Stores the user's css files\n * @var array $css_inline\n * @name $css_inline\n */\n$css_inline = array();\n/**\n * Stores the user's css files\n * @var array $head_config\n * @name $head_config\n */\n$head_config = array();\n/**\n * Stores the user's css files\n * @var string $jsForHead\n * @name $jsForHead\n */\n$jsForHead = \"\";\n/**\n * Stores the user's css files\n * @var string $cssForHead\n * @name $cssForHead\n */\n$cssForHead = \"\";\n\n// expTemplate\n/**\n * Stores the global template\n * @var \\basetemplate $template\n * @name $template\n */\n$template = null;\n\n// expTimer\n/**\n * Stores the timer\n * @var expTimer $timer\n * @name $timer\n */\n$timer = null;\n\n// e-commerce\n/**\n * Stores the order\n * @var \\order $order\n * @name $order\n */\n$order = null;\n\n/**\n * Main module action/display logic/routine; initializes/checks controller before calling action/method\n *\n * @param array $parms\n * @return bool|mixed|string\n */\nfunction renderAction(array $parms=array()) {\n    global $user, $db;\n\n    //Get some info about the controller\n//    $baseControllerName = expModules::getControllerName($parms['controller']);\n    $fullControllerName = expModules::getControllerClassName($parms['controller']);\n    if (expModules::controllerExists($fullControllerName)) {\n        $controllerClass = new ReflectionClass($fullControllerName);\n    } else {\n        return sprintf(gt('The module \"%s\" was not found in the system'), $parms['controller']);\n    }\n\n    if (isset($parms['view'])) $parms['view'] = urldecode($parms['view']);\n    // Figure out the action to use...if the specified action doesn't exist then we look for the showall action.\n    if ($controllerClass->hasMethod($parms['action'])) {\n        $action = $parms['action'];\n        /* TODO:  Not sure if we need to check for private methods to be here. FJD\n\t\t$meth = $controllerClass->getMethod($action);\n        if ($meth->isPrivate()) expQueue::flashAndFlow('error', gt('The requested action could not be performed: Action not found'));*/\n    } elseif ($controllerClass->hasMethod('showall')) {\n        $parms['action'] = 'showall';\n        $action = 'showall';\n    } else {\n        expQueue::flashAndFlow('error', gt('The requested action could not be performed: Action not found'));\n    }\n\n    // initialize the controller.\n    $src = isset($parms['src']) ? $parms['src'] : null;\n    $controller = new $fullControllerName($src, $parms);\n\n    //Set up the correct template to use for this action\n    global $template;\n    $view = !empty($parms['view']) ? $parms['view'] : $action;\n    $template = expTemplate::get_template_for_action($controller, $view, $controller->loc);\n\n    //setup default model(s) for this controller's actions to use\n    foreach ($controller->getModels() as $model) {\n        $controller->$model = new $model(null,false,false);   //added null,false,false to reduce unnecessary queries. FJD\n        // flag for needing approval check\n        if ($controller->$model->supports_revisions && ENABLE_WORKFLOW) {\n            $uilevel = 99;\n            if (expSession::exists(\"uilevel\")) $uilevel = expSession::get(\"uilevel\");\n            if (!expPermissions::check('approve', $controller->loc)) {\n                $controller->$model->needs_approval = true;\n            } elseif (isset($uilevel) && $uilevel == UILEVEL_PREVIEW) {\n                $controller->$model->needs_approval = true;\n            }\n        }\n    }\n\n// FIXME this is now handled by the template class during get_template_for_action since it only sets template variables\n    // have the controller assign knowledge about itself to the template.\n    // this has to be done after the controller gets the template for its actions\n//    $controller->moduleSelfAwareness();\n\n    //if this controller is being called by a container then we should have a module title.\n    if (isset($parms['moduletitle'])) {\n        $template->assign('moduletitle', $parms['moduletitle']);\n    } else {\n        $title = new stdClass();\n        $title->mod = $controller->loc->mod;\n        $title->src = $controller->loc->src;\n        $title->int = '';\n        $template->assign('moduletitle', $db->selectValue('container', 'title', \"internal='\".serialize($title).\"'\"));\n    }\n\n    // check the perms for this action\n    $perms = $controller->permissions_all();\n\n    $common_action = null;\n    // action convention for controllers that manage more than one model (datatype).\n    // if you preface the name action name with a common crud action name we can check perms on\n    // it with the developer needing to specify any...better safe than sorry.\n    // i.e if the action is edit_mymodel it will be checked against the edit permission\n    if (stristr($parms['action'], '_'))\n        $parts = explode(\"_\", $parms['action']);\n    else\n        $parts = preg_split('/(?=[A-Z])/', $parms['action']);  // account for actions with camelCase action/perm such as editItem\n    $common_action = isset($parts[0]) ? $parts[0] : null;\n    // we have to treat the update permission a little different..it's tied to the create/edit\n    // permissions.  Really the only way this will fail will be if someone bypasses the perm check\n    // on the edit form somehow..like a hacker trying to bypass the form and just submit straight to\n    // the action. To safeguard, we'll catch if the action is update and change it either to create or\n    // edit depending on whether an id param is passed to. that should be sufficient.\n    if ($parms['action'] == 'update' || $common_action == 'update') {\n        $perm_action = (!isset($parms['id']) || $parms['id'] == 0) ? 'create' : 'edit';\n    } elseif (($parms['action'] == 'edit' || $common_action == 'edit') && (!isset($parms['id']) || $parms['id'] == 0)) {\n        $perm_action = 'create';\n    } elseif ($parms['action'] == 'saveconfig') {\n        $perm_action = 'configure';\n    } else {\n        $perm_action = $parms['action'];\n    }\n\n    // Here is where we check for ownership of an item and 'create' perm\n    if (($parms['action'] == 'edit' || $parms['action'] == 'update' || $parms['action'] == 'delete' ||\n        $common_action == 'edit' || $common_action == 'update' || $common_action == 'delete') && !empty($parms['id'])) {\n        $theaction = !empty($common_action) ? $common_action : $parms['action'];\n        $owner = $db->selectValue($model, 'poster', 'id=' . $parms['id']);\n        if ($owner == $user->id && !expPermissions::check($theaction, $controller->loc) && expPermissions::check('create', $controller->loc)) {\n            $perm_action = 'create';\n        }\n    }\n\n    if (!DISABLE_PRIVACY) {\n        // check to see if it's on a private page and we shouldn't see it\n        if ($perm_action == 'showall' || $perm_action == 'show' || $perm_action == 'downloadfile' || $common_action == 'showall' || $common_action == 'show' || $common_action == 'downloadfile') {\n            $loc = null;\n            if (!empty($parms['src'])) {\n                $loc = expCore::makeLocation($parms['controller'], $parms['src']);\n            } elseif (!empty($parms['id']) || !empty($parms['title']) || !empty($parms['sef_url'])) {\n                if (!empty($parms['id'])) {\n                    $record = new $controller->basemodel_name($parms['id']);\n                } elseif (!empty($parms['title'])) {\n                    $record = new $controller->basemodel_name($parms['title']);\n                } elseif (!empty($parms['sef_url'])) {\n                    $record = new $controller->basemodel_name($parms['sef_url']);\n                }\n                if (!empty($record->location_data)) $loc = expUnserialize($record->location_data);\n            }\n            if (!empty($loc)) {\n                $section = new section();\n                $sectionref = new sectionref();\n                $container = new container();\n                $secref = $sectionref->find('first',\"module='\".$parms['controller'].\"' AND source='\" . $loc->src . \"'\");\n                if (!empty($secref->section)) {\n                    $page = $section->find('first','id=' . $secref->section);  // only one page can have the section id#\n                    $module = $container->find('first',\"internal='\" . serialize($loc) . \"'\");  // only one container can have the internal == location\n                    if ($page !== null && $module !== null && !empty($page->id) && (empty($page->public) || !empty($module->is_private))) {\n                        // we've found the page and module/container and it's either a private page or private module\n                        if (!expPermissions::check('view',expCore::makeLocation('navigation', $page->id))) {\n                            if (expTheme::inAction()) {\n                                flash('error', gt(\"You don't have permission to view that item\"));\n                                notfoundController::handle_not_authorized();\n                                expHistory::returnTo('viewable');\n                            } else {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    //FIXME? if the assoc $perm doesn't exist, the 'action' will ALWAYS be allowed, e.g., default is to allow action\n    if (array_key_exists($perm_action, $perms)) {\n        if (!expPermissions::check($perm_action, $controller->loc)) {\n            if (expTheme::inAction()) {\n                flash('error', gt(\"You don't have permission to\").\" \".$perms[$perm_action]);\n                notfoundController::handle_not_authorized();\n                expHistory::returnTo('viewable');\n            } else {\n                return false;\n            }\n        }\n    } elseif (array_key_exists($common_action, $perms)) {\n        if (!expPermissions::check($common_action, $controller->loc)) {\n            if (expTheme::inAction()) {\n                flash('error', gt(\"You don't have permission to\").\" \".$perms[$common_action]);\n                notfoundController::handle_not_authorized();\n                expHistory::returnTo('viewable');\n            } else {\n                return false;\n            }\n        }\n    } elseif (array_key_exists($perm_action, $controller->requires_login)) {\n        // check if the action requires the user to at least be logged in\n        if (!$user->isLoggedIn()) {\n            $msg = empty($controller->requires_login[$perm_action]) ? gt(\"You must be logged in to perform this action\") : gt($controller->requires_login[$perm_action]);\n            flash('error', $msg);\n            notfoundController::handle_not_authorized();\n            expHistory::redirecto_login();\n        }\n    } elseif (array_key_exists($common_action, $controller->requires_login)) {\n        // check if the action requires the user to at least be logged in\n        if (!$user->isLoggedIn()) {\n            $msg = empty($controller->requires_login[$common_action]) ? gt(\"You must be logged in to perform this action\") : gt($controller->requires_login[$common_action]);\n            flash('error', $msg);\n            notfoundController::handle_not_authorized();\n            expHistory::redirecto_login();\n        }\n    }\n\n    // register this controllers permissions to the view for in view perm checks\n    $template->register_permissions(array_keys($perms), $controller->loc);\n\n    // globalizing $user inside all templates\n    $template->assign('user', $user);\n\n    // lastly, run the action which can also override the above assignments\n    $controller->$action();\n\n    if (empty($parms['no_output'])) {\n        $template->output();\n    } else {\n        $html = $template->render();\n        return $html;\n    }\n}\n\nfunction hotspot($source = null) {\n    if (!empty($source)) {\n        global $sectionObj;\n\n\t    //FIXME there is NO 'page' object and section has no _construct method\n        $page = new section($sectionObj->id);\n        $modules = $page->getModulesBySource($source);  //FIXME there is no getModulesBySource method anywhere\n        //eDebug($modules);exit();\n\n        foreach ($modules as $module) {\n            renderAction(array('controller'=>$module->type, 'action'=>$module->action, 'instance'=>$module->id));\n        }\n    }\n}\n\nfunction makeLink($params=array(), $secure=false) {\n    global $router;\n\n    if(!is_array($params) || count($params) == 0) return false;\n    $secure = empty($secure) ? false : true;\n    return $router->makeLink($params, false, $secure);\n}\n\nfunction redirect_to($params=array(), $secure=false) {\n    global $router;\n\n    $secure = empty($secure) ? false : true;\n    $link = (!is_array($params)) ? $params : $router->makeLink($params, false, $secure);\n    header(\"Location: \" . $link);\n    exit();\n}\n\nfunction flash($name, $msg) {\n    expQueue::flash($name, $msg);\n}\n\nfunction flashAndFlow($name, $msg) {\n    expQueue::flashAndFlow($name, $msg);\n}\n\n/**\n * Display the message queue\n *\n * @param null $name\n * @return bool|mixed|string\n */\nfunction show_msg_queue($name=null) {\n    return expQueue::show($name);\n}\n\n/**\n * Assign a variable to the current template\n *\n * @param array $vars\n * @return bool\n */\nfunction assign_to_template(array $vars=array()) {\n    global $template;\n\n    if (empty($template) || count($vars) == 0) return false;\n    foreach ($vars as $key=>$val) {\n        $template->assign($key, $val);\n    }\n}\n\nfunction get_model_for_controller($controller_name) {\n    //FIXME this works by making assumptions\n    $start_pos = stripos($controller_name, 'controller');\n    if ($start_pos === false) {\n        return false;\n    } else {\n        return substr($controller_name, 0, $start_pos);\n    }\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_common_template($view, $loc, $controllername='') {\n    return expTemplate::get_common_template($view, $loc, $controllername);\n\n    $controller = new stdClass();\n    $controller->baseclassname = empty($controllername) ? 'common' : $controllername;\n    $controller->loc = $loc;\n\n    $themepath = BASE . 'themes/' . DISPLAY_THEME . '/modules/common/views/' . $controllername . '/' . $view . '.tpl';\n    $basenewuipath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.newui.tpl';\n    $basepath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.tpl';\n\n    if (bs(true)) {\n        $basebstrap3path = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.bootstrap3.tpl';\n        $basebstrappath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.bootstrap.tpl';\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller, $themepath);\n        } elseif (bs3(true) && file_exists($basebstrap3path)) {\n            return new controllertemplate($controller, $basebstrap3path);\n        } elseif (file_exists($basebstrappath)) {\n            return new controllertemplate($controller, $basebstrappath);\n        } elseif(newui() && file_exists($basenewuipath)) {  //FIXME is this the correct sequence spot?\n            return new controllertemplate($controller,$basenewuipath);\n        } elseif (file_exists($basepath)) {\n            return new controllertemplate($controller, $basepath);\n        } else {\n            return new controllertemplate($controller, BASE.'framework/modules/common/views/scaffold/blank.tpl');\n        }\n    } else {\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller,$themepath);\n        } elseif (newui() && file_exists($basenewuipath)) {\n            return new controllertemplate($controller,$basenewuipath);\n        } elseif(file_exists($basepath)) {\n            return new controllertemplate($controller,$basepath);\n        } else {\n            return new controllertemplate($controller, BASE.'framework/modules/common/views/scaffold/blank.tpl');\n        }\n    }\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_config_templates($controller, $loc) {\n    return expTemplate::get_config_templates($controller, $loc);\n\n//    global $db;\n\n    // set paths we will search in for the view\n    $commonpaths = array(\n        BASE.'framework/modules/common/views/configure',\n        BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/configure',\n    );\n\n    $modpaths = array(\n        $controller->viewpath.'/configure',\n\t    BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n    );\n\n    // get the common configuration files\n    $common_views = expTemplate::find_config_views($commonpaths, $controller->remove_configs);\n    foreach ($common_views as $key=>$value) {\n        $common_views[$key]['name'] = gt($value['name']);\n    }\n    $moduleconfig = array();\n    if (!empty($common_views['module'])) $moduleconfig['module'] = $common_views['module'];\n    unset($common_views['module']);\n\n    // get the config views for the module\n    $module_views = expTemplate::find_config_views($modpaths);\n    foreach ($module_views as $key=>$value) {\n        $module_views[$key]['name'] = gt($value['name']);\n    }\n\n    // look for a config form for this module's current view\n//    $controller->loc->mod = expModules::getControllerClassName($controller->loc->mod);\n    //check to see if hcview was passed along, indicating a hard-coded module\n//    if (!empty($controller->params['hcview'])) {\n//        $viewname = $controller->params['hcview'];\n//    } else {\n//        $viewname = $db->selectValue('container', 'view', \"internal='\".serialize($controller->loc).\"'\");\n//    }\n//    $viewconfig = $viewname.'.config';\n//    foreach ($modpaths as $path) {\n//        if (file_exists($path.'/'.$viewconfig)) {\n//            $fileparts = explode('_', $viewname);\n//            if ($fileparts[0]=='show'||$fileparts[0]=='showall') array_shift($fileparts);\n//            $module_views[$viewname]['name'] = ucwords(implode(' ', $fileparts)).' '.gt('View Configuration');\n//            $module_views[$viewname]['file'] =$path.'/'.$viewconfig;\n//        }\n//    }\n\n    // sort the views highest to lowest by filename\n    // we are reverse sorting now so our array merge\n    // will overwrite property..we will run array_reverse\n    // when we're finished to get them back in the right order\n    krsort($common_views);\n    krsort($module_views);\n\n    if (!empty($moduleconfig)) $common_views = array_merge($common_views, $moduleconfig);\n    $views = array_merge($common_views, $module_views);\n    $views = array_reverse($views);\n\n    return $views;\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction find_config_views($paths=array(), $excludes=array()) {\n    return expTemplate::find_config_views($paths, $excludes);\n\n    $views = array();\n    foreach ($paths as $path) {\n        if (is_readable($path)) {\n            $dh = opendir($path);\n            while (($file = readdir($dh)) !== false) {\n                if (is_readable($path.'/'.$file) && substr($file, -4) == '.tpl' && substr($file, -14) != '.bootstrap.tpl' && substr($file, -15) != '.bootstrap3.tpl' && substr($file, -10) != '.newui.tpl') {\n                    $filename = substr($file, 0, -4);\n                    if (!in_array($filename, $excludes)) {\n                        $fileparts = explode('_', $filename);\n                        $views[$filename]['name'] = ucwords(implode(' ', $fileparts));\n                        $views[$filename]['file'] = $path.'/'.$file;\n                        if ((bs(true)) && file_exists($path.'/'.$filename.'.bootstrap.tpl')) {\n                            $views[$filename]['file'] = $path . '/' . $filename . '.bootstrap.tpl';\n                        }\n                        if (bs3() && file_exists($path.'/'.$filename.'.bootstrap3.tpl')) {\n                            $views[$filename]['file'] = $path.'/'.$filename.'.bootstrap3.tpl';\n                        }\n                        if (newui() && file_exists($path.'/'.$filename.'.newui.tpl')) {  //FIXME newui take priority\n                            $views[$filename]['file'] = $path.'/'.$filename.'.newui.tpl';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return $views;\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_template_for_action($controller, $action, $loc=null) {\n    expTemplate::get_template_for_action($controller, $action, $loc);\n\n    // set paths we will search in for the view\n    $themepath = BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/'.$action.'.tpl';\n    $basepath = $controller->viewpath.'/'.$action.'.tpl';\n    $newuithemepath = BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/'.$action.'.newui.tpl'; //FIXME shoudl there be a theme newui variation?\n    $basenewuipath = $controller->viewpath.'/'.$action.'.newui.tpl';\n\n    // the root action will be used if we don't find a view for this action and it is a derivative of\n    // action.  i.e. showall_by_tags would use the showall.tpl view if we do not have a view named\n    // showall_by_tags.tpl\n    $root_action = explode('_', $action);\n    $rootthemepath = BASE . 'themes/' . DISPLAY_THEME . '/modules/' . $controller->relative_viewpath . '/' . $root_action[0] . '.tpl';\n    $rootbasepath = $controller->viewpath . '/' . $root_action[0] . '.tpl';\n\n    if (newui()) {\n        if (file_exists($newuithemepath)) {\n            return new controllertemplate($controller, $newuithemepath);\n        } elseif (file_exists($basenewuipath)) {\n            return new controllertemplate($controller, $basenewuipath);\n        }\n    }\n    if (bs(true)) {\n        $rootbstrap3path = $controller->viewpath . '/' . $root_action[0] . '.bootstrap3.tpl';\n        $basebstrap3path = $controller->viewpath . '/' . $action . '.bootstrap3.tpl';\n        $rootbstrappath = $controller->viewpath . '/' . $root_action[0] . '.bootstrap.tpl';\n        $basebstrappath = $controller->viewpath . '/' . $action . '.bootstrap.tpl';\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller, $themepath);\n        } elseif (bs3(true) && file_exists($basebstrap3path)) {\n            return new controllertemplate($controller, $basebstrap3path);\n        } elseif (file_exists($basebstrappath)) {\n            return new controllertemplate($controller, $basebstrappath);\n        } elseif (file_exists($basepath)) {\n            return new controllertemplate($controller, $basepath);\n        } elseif ($root_action[0] != $action) {\n            if (file_exists($rootthemepath)) {\n                return new controllertemplate($controller, $rootthemepath);\n            } elseif (bs3(true) && file_exists($rootbstrap3path)) {\n                return new controllertemplate($controller, $rootbstrap3path);\n            } elseif (file_exists($rootbstrappath)) {\n                return new controllertemplate($controller, $rootbstrappath);\n            } elseif (file_exists($rootbasepath)) {\n                return new controllertemplate($controller, $rootbasepath);\n            }\n        }\n    } else {\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller, $themepath);\n        } elseif (file_exists($basepath)) {\n            return new controllertemplate($controller, $basepath);\n        } elseif ($root_action[0] != $action) {\n            if (file_exists($rootthemepath)) {\n                return new controllertemplate($controller, $rootthemepath);\n            } elseif (file_exists($rootbasepath)) {\n                return new controllertemplate($controller, $rootbasepath);\n            }\n        }\n    }\n\n    // if we get here it means there were no views for the this action to be found.\n    // we will check to see if we have a scaffolded version or else just grab a blank template.\n    if (file_exists(BASE . 'framework/modules/common/views/scaffold/' . $action . (newui()?'.newui':'') . '.tpl')) {\n        return new controllertemplate($controller, BASE . 'framework/modules/common/views/scaffold/' . $action . (newui()?'.newui':'') . '.tpl');\n    } else {\n        return new controllertemplate($controller, BASE . 'framework/modules/common/views/scaffold/blank.tpl');\n    }\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_action_views($ctl, $action, $human_readable) {\n    expTemplate::get_action_views($ctl, $action, $human_readable);\n\n    // setup the controller\n//    $controllerName = expModules::getControllerClassName($ctl);\n//    $controller = new $controllerName();\n    $controller = expModules::getController($ctl);\n\n    // set path information\n    $paths = array(\n        $controller->viewpath,\n        BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath,\n    );\n\n    $views = array();\n    foreach ($paths as $path) {\n        if (is_readable($path)) {\n            $dh = opendir($path);\n            while (($file = readdir($dh)) !== false) {\n                if (is_readable($path.'/'.$file) && substr($file, -4) == '.tpl' && substr($file, -14) != '.bootstrap.tpl' && substr($file, -15) != '.bootstrap3.tpl' && substr($file, -10) != '.newui.tpl') {\n                    $filename = substr($file, 0, -4);\n                    $fileparts = explode('_', $filename);\n                    if ($fileparts[0] == $action) {\n                        if (count($fileparts) == 1) {\n                            $views[$filename] = 'Default';\n                        } else {\n                            array_shift($fileparts); //shift the action name off the array of words\n                            $views[$filename] = ucwords(implode(' ', $fileparts));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Language-ize the views names\n    foreach ($views as $key=>$value) {\n        $views[$key] = gt($value);\n    }\n\n    return $views;\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_filedisplay_views() {\n    expTemplate::get_filedisplay_views();\n\n    $paths = array(\n        BASE.'framework/modules/common/views/file/',\n        BASE.'themes/'.DISPLAY_THEME.'modules/common/views/file/',\n    );\n\n    $views = array();\n    foreach ($paths as $path) {\n        if (is_readable($path)) {\n            $dh = opendir($path);\n            while (($file = readdir($dh)) !== false) {\n                if (is_readable($path.'/'.$file) && substr($file, -4) == '.tpl' && substr($file, -14) != '.bootstrap.tpl' && substr($file, -15) != '.bootstrap3.tpl' && substr($file, -10) != '.newui.tpl') {\n                    $filename = substr($file, 0, -4);\n                    $views[$filename] = gt($filename);\n                }\n            }\n        }\n    }\n\n    return $views;\n}\n\nfunction object2Array($object=null) {\n    $ret_array = array();\n    if(empty($object)) return $ret_array;\n\n    foreach($object as $key=>$value) {\n        $ret_array[$key] = $value;\n    }\n\n    return $ret_array;\n}\n\nfunction expUnserialize($serial_str) {\n    if ($serial_str === 'Array') return null;  // empty array string??\n    if (is_array($serial_str) || is_object($serial_str)) return $serial_str;  // already unserialized\n//    $out1 = @preg_replace('!s:(\\d+):\"(.*?)\";!se', \"'s:'.strlen('$2').':\\\"$2\\\";'\", $serial_str );\n    $out = preg_replace_callback(\n        '!s:(\\d+):\"(.*?)\";!s',\n        create_function ('$m',\n            '$m_new = str_replace(\\'\"\\',\\'\\\"\\',$m[2]);\n            return \"s:\".strlen($m_new).\\':\"\\'.$m_new.\\'\";\\';'\n        ),\n        $serial_str );\n//    if ($out1 !== $out) {\n//        eDebug('problem:<br>'.$out.'<br>'.$out1);\n//    }\n    $out2 = unserialize($out);\n    if (is_array($out2)) {\n        if (!empty($out2['moduledescription'])) {  // work-around for links in module descriptions\n            $out2['moduledescription'] = stripslashes($out2['moduledescription']);\n        }\n        if (!empty($out2['description'])) {  // work-around for links in forms descriptions\n            $out2['description'] = stripslashes($out2['description']);\n        }\n        if (!empty($out2['report_desc'])) {  // work-around for links in forms report descriptions\n            $out2['report_desc'] = stripslashes($out2['report_desc']);\n        }\n        if (!empty($out2['response'])) {  // work-around for links in forms response\n            $out2['response'] = stripslashes($out2['response']);\n        }\n        if (!empty($out2['auto_respond_body'])) {  // work-around for links in forms auto respond\n            $out2['auto_respond_body'] = stripslashes($out2['auto_respond_body']);\n        }\n    } elseif (is_object($out2) && get_class($out2) == 'htmlcontrol') {\n        $out2->html = stripslashes($out2->html);\n    }\n    return $out2;\n}\n\n/**\n *  callback when the buffer gets flushed. Any processing on the page output\n * just before it gets rendered to the screen should happen here.\n * @param $buffer\n * @param null $mode\n * @return mixed\n */\nfunction expProcessBuffer($buffer, $mode=null) {\n     global $jsForHead, $cssForHead;\n\n//     return (str_replace(\"<!-- MINIFY REPLACE -->\", $cssForHead.$jsForHead, $buffer));\n    return (str_replace(\"<!-- MINIFY REPLACE -->\", $cssForHead, $buffer));\n}\n\n/**\n * Ensure we have a valid html 'id' attribute\n *\n * @param $id\n * @return mixed\n */\nfunction createValidId($id, $value='') {\n    $badvals = array(\"[\", \"]\", \",\", \" \", \"'\", \"\\\"\", \"&\", \"#\", \"%\", \"@\", \"!\", \"$\", \"(\", \")\", \"{\", \"}\");  //FIXME do we need to update this to HTML5 and only include the space?\n    if (strpos($id, '[]') !== false)\n        $id .= $value;\n    $new_id = str_replace($badvals, \"_\", trim($id));\n    return $new_id;\n}\n\nfunction curPageURL() {\n    if (expJavascript::inAjaxAction()) {\n        $new_request = $_REQUEST;\n        unset($new_request['ajax_action']);\n        if ($new_request['controller'] == 'store' && $new_request['action'] == 'edit')\n            unset($new_request['view']);\n        $pageURL = makeLink($new_request);\n    } else {\n        $pageURL = 'http';\n        if (!empty($_SERVER[\"HTTPS\"]) && $_SERVER[\"HTTPS\"] == \"on\") {\n            $pageURL .= \"s\";\n        }\n        $pageURL .= \"://\";\n        if ($_SERVER[\"SERVER_PORT\"] != \"80\") {\n            $pageURL .= $_SERVER[\"SERVER_NAME\"] . \":\" . $_SERVER[\"SERVER_PORT\"] . $_SERVER[\"REQUEST_URI\"];\n        } else {\n            $pageURL .= $_SERVER[\"SERVER_NAME\"] . $_SERVER[\"REQUEST_URI\"];\n        }\n    }\n    return $pageURL;\n}\n\n/**\n * Return status of e-commerce\n */\nfunction ecom_active() {\n    global $db;\n\n    return ($db->selectValue('modstate', 'active', 'module=\"store\"') ||\n        $db->selectValue('modstate', 'active', 'module=\"eventregistration\"') ||\n        $db->selectValue('modstate', 'active', 'module=\"donation\"') || FORCE_ECOM);\n}\n\n/**\n * Return the current framework\n *\n * @return bool\n */\nfunction framework() {\n    global $framework;\n\n    return $framework;\n}\n\n/**\n * Is the current framework Bootstrap v2 based?\n *\n * @return bool\n */\nfunction bs2() {\n    global $framework;\n\n    if ($framework == 'bootstrap') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Is the current framework Bootstrap v3 based?\n *\n * @param bool $strict must be bootstrap3 and NOT newui\n * @return bool\n */\nfunction bs3($strict = false) {\n    global $framework;\n\n    if ($framework == 'bootstrap3') {\n        return true;\n    } elseif ($framework == 'newui' && !$strict) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Is the current framework Bootstrap based?\n *\n * @param bool $strict must be bootstrap 2 or 3 and NOT newui\n * @return bool\n */\nfunction bs($strict = false) {\n    global $framework;\n\n    if ($framework == 'bootstrap3' || $framework == 'bootstrap') {\n        return true;\n    } elseif ($framework == 'newui' && !$strict) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Is the current framework NEWUI and NOT a Bootstrap framework\n *\n * @return bool\n */\nfunction newui() {\n    global $framework;\n\n    if ($framework == 'newui') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction gt($s){\n    return expLang::gettext($s);\n}\n\nfunction glist($s){\n    if (is_array($s)) {\n        $list = array();\n        foreach ($s as $key=>$phrase) {\n            $list[$key] = expLang::gettext(trim($phrase));\n        }\n    } else {\n        $list = '';\n        $phrases = explode(\",\",$s);\n        foreach ($phrases as $key=>$phrase) {\n            if ($key) $list .= ',';\n            $list .= expLang::gettext(trim($phrase));\n        }\n    }\n    return $list;\n}\n\n/**\n * called from exponent.php as the ajax error handler\n *\n * @param $errno\n * @param $errstr\n * @param $errfile\n * @param $errline\n */\nfunction handleErrors($errno, $errstr, $errfile, $errline) {\n    if (DEVELOPMENT > 0 && AJAX_ERROR_REPORTING == 1) {\n        switch ($errno) {\n            case E_ERROR:\n            case E_USER_ERROR:\n                $msg = 'PHP Error('.$errno.'): ';\n            break;\n            case E_WARNING:\n            case E_USER_WARNING:\n                $msg = 'PHP Warning('.$errno.'): ';\n            break;\n            case E_NOTICE:\n            case E_USER_NOTICE:\n                $msg = 'PHP Notice('.$errno.'): ';\n                break;\n            default:\n                return;  // we really don't want other issues printed\n                $msg = 'PHP Issue('.$errno.'): ';\n            break;\n        }\n        $msg .= $errstr;\n        $msg .= !empty($errfile) ? ' in file '.$errfile : \"\";\n        $msg .= !empty($errline) ? ' on line '.$errline : \"\";\n        // send to the debug output\n        eDebug($msg);\n    }\n}\n\n/**\n * dumps the passed variable to screen/log, but only if in development mode\n *\n * @param mixed $var the variable to dump\n * @param bool $halt if set to true will halt execution\n * @param bool $disable_log if set to true will disable logging and force to screen\n * @return void\n */\nfunction eDebug($var, $halt=false, $disable_log=false){\n\tif (DEVELOPMENT) {\n        if (LOGGER && !$disable_log) {\n//            if(is_array($var) || is_object($var)) {\n//                $pvar = print_r($var, true);\n//            } else {\n//                $pvar = $var;\n//            }\n//            echo(\"<script>YUI(EXPONENT.YUI3_CONFIG).use('node', function(Y) {Y.log('\".json_encode($pvar).\"','info','exp')});;</script>\");\n            eLog($var, gt('DEBUG'));\n        } else {\n            if (file_exists(BASE . 'external/kint/Kint.class.php')) {\n                require_once BASE . 'external/kint/Kint.class.php';\n                d($var);  // kint\n            } else {\n                echo \"<pre>\";\n                print_r($var);\n                echo \"</pre>\";\n            }\n        }\n\n\t\tif ($halt) die();\n\t}\n}\n\n/**\n * dumps the passed variable to a log, but only if in development mode\n *\n * @param mixed $var the variable to log\n * @param string $type the type of entry to record\n * @param string $path the pathname for the log file\n * @param string $minlevel\n * @return void\n */\nfunction eLog($var, $type='', $path='', $minlevel='0') {\n\tif($type == '') { $type = \"INFO\"; }\n\tif($path == '') { $path = BASE . 'tmp/exponent.log'; }\n\tif (DEVELOPMENT >= $minlevel) {\n\t\tif (is_writable ($path) || !file_exists($path)) {\n\t\t\tif (!$log = fopen ($path, \"ab\")) {\n\t\t\t\teDebug(gt(\"Error opening log file for writing.\"), false, true);\n\t\t\t} else {\n                if(is_array($var) || is_object($var)) {\n//                    $pvar = print_r($var, true);\n                    $pvar = json_encode($var, true);  // json is easier to deal with as data\n                } else {\n                    $pvar = $var;\n                }\n\t\t\t\tif (fwrite ($log, $type . \": \" . $pvar . \"\\r\\n\") === FALSE) {\n\t\t\t\t\teDebug(gt(\"Error writing to log file\").\" (\".$path.\").\", false, true);\n\t\t\t\t}\n\t\t\t\tfclose ($log);\n\t\t\t}\n\t\t} else {\n\t\t\teDebug(gt(\"Log file\".\" (\".$path).\" \".gt(\"not writable.\"), false, true);\n\t\t}\n\t}\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expString\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n/** @define \"BASE\" \"../../..\" */\n\nclass expString {\n\n    /**\n     * Routine to convert string to UTF\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function convertUTF($string) {\n\t\treturn $string = str_replace('?', '', htmlspecialchars($string, ENT_IGNORE, 'UTF-8'));\n\t}\n\n    /**\n     * Routine to check if string is valid UTF string\n     *\n     * @static\n     * @param string $string\n     * @return bool\n     */\n\tstatic function validUTF($string) {\n\t\tif(!mb_check_encoding($string, 'UTF-8') OR !($string === mb_convert_encoding(mb_convert_encoding($string, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n    /**\n     * Routine to strip unreadable characters from string - ascii 32 to 126\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function onlyReadables($string) {\n        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {\n\t\t\t$chr = $string{$i};\n\t\t\t$ord = ord($chr);\n\t\t\tif ($ord<32 or $ord>126) {\n\t\t\t$chr = \"~\";\n\t\t\t$string{$i} = $chr;\n\t\t\t}\n\t\t}\n\t\treturn str_replace(\"~\", \"\", $string);\n\t}\n\n    /**\n     * Routine to\n     *\n     * @static\n     * @param string $str\n     * @param bool $unescape should the string also be unescaped?\n     * @return mixed|string\n     */\n\tstatic function parseAndTrim($str, $unescape=false) {\n        if (is_array($str)) {\n            $rst = array();\n            foreach ($str as $key=>$st) {\n                $rst[$key] = self::parseAndTrim($st, $unescape);\n            }\n            return $rst;\n        }\n\n        $str = str_replace(\"<br>\",\" \",$str);\n        $str = str_replace(\"</br>\",\" \",$str);\n        $str = str_replace(\"<br/>\",\" \",$str);\n        $str = str_replace(\"<br />\",\" \",$str);\n        $str = str_replace(\"\\r\\n\",\" \",$str);\n        $str = str_replace('\"',\"&quot;\",$str);\n        $str = str_replace(\"'\",\"&#39;\",$str);\n        $str = str_replace(\"\u2019\",\"&rsquo;\",$str);\n        $str = str_replace(\"\u2018\",\"&lsquo;\",$str);\n        $str = str_replace(\"\u00ae\",\"&#174;\",$str);\n        $str = str_replace(\"\u2013\",\"-\", $str);\n        $str = str_replace(\"\u2014\",\"&#151;\", $str);\n        $str = str_replace(\"\u201d\",\"&rdquo;\", $str);\n        $str = str_replace(\"\u201c\",\"&ldquo;\", $str);\n        $str = str_replace(\"\u00bc\",\"&#188;\",$str);\n        $str = str_replace(\"\u00bd\",\"&#189;\",$str);\n        $str = str_replace(\"\u00be\",\"&#190;\",$str);\n\t\t$str = str_replace(\"\u2122\",\"&trade;\", $str);\n\t\t$str = trim($str);\n\n        if ($unescape) {\n\t\t\t$str = stripcslashes($str);\n\t\t} else {\n\t        $str = addslashes($str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Routine to convert string to an XML safe string\n     *\n     * @static\n     * @param string $str\n     * @return string\n     */\n\tstatic function convertXMLFeedSafeChar($str) {\n\t\t$str = str_replace(\"<br>\",\"\",$str);\n        $str = str_replace(\"</br>\",\"\",$str);\n        $str = str_replace(\"<br/>\",\"\",$str);\n        $str = str_replace(\"<br />\",\"\",$str);\n        $str = str_replace(\"&quot;\",'\"',$str);\n        $str = str_replace(\"&#39;\",\"'\",$str);\n        $str = str_replace(\"&rsquo;\",\"'\",$str);\n        $str = str_replace(\"&lsquo;\",\"'\",$str);\n        $str = str_replace(\"&#174;\",\"\",$str);\n        $str = str_replace(\"\ufffd\",\"-\", $str);\n        $str = str_replace(\"\ufffd\",\"-\", $str);\n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&rdquo;\",'\"', $str);\n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&ldquo;\",'\"', $str);\n        $str = str_replace(\"\\r\\n\",\" \",$str);\n        $str = str_replace(\"\ufffd\",\" 1/4\",$str);\n        $str = str_replace(\"&#188;\",\" 1/4\", $str);\n        $str = str_replace(\"\ufffd\",\" 1/2\",$str);\n        $str = str_replace(\"&#189;\",\" 1/2\",$str);\n        $str = str_replace(\"\ufffd\",\" 3/4\",$str);\n        $str = str_replace(\"&#190;\",\" 3/4\",$str);\n        $str = str_replace(\"\ufffd\", \"(TM)\", $str);\n        $str = str_replace(\"&trade;\",\"(TM)\", $str);\n        $str = str_replace(\"&reg;\",\"(R)\", $str);\n        $str = str_replace(\"\ufffd\",\"(R)\",$str);\n        $str = str_replace(\"&\",\"&amp;\",$str);\n\t\t$str = str_replace(\">\",\"&gt;\",$str);\n        return trim($str);\n\t}\n\n    /**\n     * Routine to convert any smart quotes into normal quotes\n     *\n     * @param string $str\n     * @return string\n     */\n    public static function convertSmartQuotes($str) {\n    \t$find[] = '\ufffd';  // left side double smart quote\n    \t$find[] = '\ufffd';  // right side double smart quote\n    \t$find[] = '\ufffd';  // left side single smart quote\n    \t$find[] = '\ufffd';  // right side single smart quote\n    \t$find[] = '\ufffd';  // elipsis\n    \t$find[] = '\ufffd';  // em dash\n    \t$find[] = '\ufffd';  // en dash\n\n        $replace[] = '\"';\n       \t$replace[] = '\"';\n       \t$replace[] = \"'\";\n       \t$replace[] = \"'\";\n       \t$replace[] = \"...\";\n       \t$replace[] = \"-\";\n       \t$replace[] = \"-\";\n\n        $find[] = '\u201c';  // left side double smart quote\n        $find[] = '\u201d';  // right side double smart quote\n        $find[] = '\u2018';  // left side single smart quote\n        $find[] = '\u2019';  // right side single smart quote\n        $find[] = '\u2026';  // ellipsis\n        $find[] = '\u2014';  // em dash\n        $find[] = '\u2013';  // en dash\n\n        $replace[] = '\"';\n        $replace[] = '\"';\n        $replace[] = \"'\";\n        $replace[] = \"'\";\n        $replace[] = \"...\";\n        $replace[] = \"-\";\n        $replace[] = \"-\";\n\n//        $find[] = chr(145);\n//        $find[] = chr(146);\n//        $find[] = chr(147);\n//        $find[] = chr(148);\n//        $find[] = chr(150);\n//        $find[] = chr(151);\n//        $find[] = chr(133);\n//        $find[] = chr(149);\n//        $find[] = chr(11);\n//\n//        $replace[] = \"'\";\n//        $replace[] = \"'\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"-\";\n//        $replace[] = \"-\";\n//        $replace[] = \"...\";\n//        $replace[] = \"&bull;\";\n//        $replace[] = \"\\n\";\n\n    \treturn str_replace($find, $replace, $str);\n    }\n\n    /**\n     * Enhanced variation of strip_tags with 'invert' option to remove specific tags\n     *\n     * @param $text\n     * @param string $tags\n     * @param bool $invert\n     * @return mixed\n     */\n    public static function strip_tags_content($text, $tags = '', $invert = false)\n    {\n        preg_match_all('/<(.+?)[\\s]*\\/?[\\s]*>/si', trim($tags), $tags);\n        $tags = array_unique($tags[1]);\n\n        if (is_array($tags) AND count($tags) > 0) {\n            if ($invert == false) {\n                return preg_replace('@<(?!(?:' . implode('|', $tags) . ')\\b)(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n            } else {\n                return preg_replace('@<(' . implode('|', $tags) . ')\\b.*?>.*?</\\1>@si', '', $text);\n            }\n        } elseif ($invert == false) {\n            return preg_replace('@<(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n        }\n        return $text;\n    }\n\n    /**\\\n     * Replace any non-ascii character with its hex code with NO active db connection\n     */\n    public static function escape($value) {\n        global $db;\n\n        if ($db->havedb) {\n            return $db->escapeString($value);\n        }\n\n        $return = '';\n        for ($i = 0, $iMax = strlen($value); $i < $iMax; $i++) {\n            $char = $value[$i];\n            $ord = ord($char);\n            if($char !== \"'\" && $char !== \"\\\"\" && $char !== '\\\\' && $ord >= 32 && $ord <= 126)\n                $return .= $char;\n            else\n                $return .= '\\\\x' . dechex($ord);\n        }\n        return $return;\n    }\n\n    /**\n     * Summarize or short a long string\n     *\n     * @param        $string\n     * @param string $strtype\n     * @param string $type\n     *\n     * @return string\n     */\n    public static function summarize($string, $strtype='html', $type='para', $more='...') {\n        $sep = ($strtype == \"html\" ? array(\"</p>\", \"</div>\") : array(\"\\r\\n\", \"\\n\", \"\\r\"));\n        $origstring = $string;\n\n        switch ($type) {\n            case \"para\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes(strip_tags($string)),ENT_QUOTES));\n                return expString::convertSmartQuotes(strip_tags($string));\n                break;\n            case \"paralinks\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&#160;\",\" \",htmlspecialchars_decode(htmlentities(expString::convertSmartQuotes(strip_tags($string,'<a>')),ENT_QUOTES)));\n                return expString::convertSmartQuotes(strip_tags($string, '<a>'));\n                break;\n            case \"parapaged\":\n//               $s = '<div style=\"page-break-after: always;\"><span style=\"display: none;\">&nbsp;</span></div>';\n                $s = '<div style=\"page-break-after: always';\n                $para = explode($s, $string);\n                $string = $para[0];\n                return expString::convertSmartQuotes($string);\n                break;\n            case \"parahtml\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n                if (!empty($string)) {\n                    $isText = true;\n                    $ret = \"\";\n                    $i = 0;\n    //                    $currentChar = \"\";\n    //                    $lastSpacePosition = -1;\n    //                    $lastChar = \"\";\n                    $tagsArray = array();\n                    $currentTag = \"\";\n    //                    $tagLevel = 0;\n    //                    $noTagLength = strlen(strip_tags($string));\n\n                    // Parser loop\n                    for ($j = 0, $jMax = strlen($string); $j < $jMax; $j++) {\n\n                        $currentChar = substr($string, $j, 1);\n                        $ret .= $currentChar;\n\n                        // Lesser than event\n                        if ($currentChar == \"<\") $isText = false;\n\n                        // Character handler\n                        if ($isText) {\n\n                            // Memorize last space position\n                            if ($currentChar == \" \") {\n                                $lastSpacePosition = $j;\n                            } else {\n                                $lastChar = $currentChar;\n                            }\n\n                            $i++;\n                        } else {\n                            $currentTag .= $currentChar;\n                        }\n\n                        // Greater than event\n                        if ($currentChar == \">\") {\n                            $isText = true;\n\n                            // Opening tag handler\n                            if ((strpos($currentTag, \"<\") !== FALSE) &&\n                                (strpos($currentTag, \"/>\") === FALSE) &&\n                                (strpos($currentTag, \"</\") === FALSE)\n                            ) {\n\n                                // Tag has attribute(s)\n                                if (strpos($currentTag, \" \") !== FALSE) {\n                                    $currentTag = substr($currentTag, 1, strpos($currentTag, \" \") - 1);\n                                } else {\n                                    // Tag doesn't have attribute(s)\n                                    $currentTag = substr($currentTag, 1, -1);\n                                }\n\n                                array_push($tagsArray, $currentTag);\n\n                            } else if (strpos($currentTag, \"</\") !== FALSE) {\n                                array_pop($tagsArray);\n                            }\n\n                            $currentTag = \"\";\n                        }\n                    }\n                    // Cut HTML string at last space position\n                    //                if ($length < $noTagLength) {\n                    //                    if ($lastSpacePosition != -1) {\n                    //                        $ret = substr($string, 0, $lastSpacePosition);\n                    //                    } else {\n                    //                        $ret = substr($string, $j);\n                    //                    }\n                    //                }\n                    if (sizeof($tagsArray) != 0) {\n                        // Close broken XHTML elements\n                        while (sizeof($tagsArray) != 0) {\n                            if (sizeof($tagsArray) > 1) {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } // You may add more tags here to put the link and added text before the closing tag\n                            elseif ($aTag == 'p' || 'div') {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } else {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            }\n                        }\n                    }\n                }\n                return expString::convertSmartQuotes($string);\n                break;\n            default:\n                $words = explode(\" \", strip_tags($string));\n                $string = implode(\" \", array_slice($words, 0, $type + 0));\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes($string),ENT_QUOTES));\n                return expString::convertSmartQuotes($string);\n                break;\n        }\n    }\n\n    public static function parseAndTrimExport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\t\", \" \", $str);\n        $str = str_replace(\",\", \"\\,\", $str);\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n\n        if (!$isHTML) {\n            $str = str_replace('\\\"', \"&quot;\", $str);\n            $str = str_replace('\"', \"&quot;\", $str);\n        } else {\n            $str = str_replace('\"', '\"\"', $str);\n        }\n\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n//        global $db;\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\,\", \",\", $str);\n        $str = str_replace('\"\"', '\"', $str); //do this no matter what...in case someone added a quote in a non HTML field\n        if (!$isHTML) {\n            //if HTML, then leave the single quotes alone, otheriwse replace w/ special Char\n            $str = str_replace('\"', \"&quot;\", $str);\n        }\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n//        if (DB_ENGINE=='mysqli') {\n//\t        $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n//        } elseif(DB_ENGINE=='mysql') {\n//            $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n//        } else {\n//\t        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n//        }\n        $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function outputField($val, $eof = ',', $isHTML = false) {\n        $newVal = self::parseAndTrimExport($val, $isHTML);\n        if ($newVal != '') return '\"' . $newVal . '\"' . $eof;\n        else return $eof;\n    }\n\n    public static function stripLineEndings($val) {\n        return preg_replace('/\\r\\n/', ' ', trim($val));\n    }\n\n    /**\n     * Convert email html content to text\n     * Remove scripts, styles, tags, and convert <br> to newline\n     *\n     * @param $val\n     * @return mixed\n     */\n    public static function html2text($val) {\n        $val = preg_replace('/(<script[^>]*>.+?<\\/script>|<style[^>]*>.+?<\\/style>)/s', '', $val); // remove any script or style blocks\n        $val = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $val)));  // replace breaks with newlines\n        return $val;\n    }\n\n    /**\n     * Scrub input string for possible security issues.\n     *\n     * @static\n     * @param $data string\n     * @return string\n     */\n    public static function sanitize(&$data) {\n//        return $data;\n\n        if (is_array($data)) {\n            $saved_params = array();\n            if (!empty($data['controller']) && $data['controller'] == 'snippet') {\n                $saved_params['body'] = $data['body'];  // store snippet body\n            }\n            foreach ($data as $var=>$val) {\n//                $data[$var] = self::sanitize($val);\n                $data[$var] = self::xss_clean($val);\n            }\n            if (!empty($saved_params)) {\n                $data = array_merge($data, $saved_params);  // add stored snippet body\n            }\n        } else {\n            if (empty($data)) {\n                return $data;\n            }\n\n            $data = self::xss_clean($data);\n\n            //fixme orig exp method\n//            if(0) {\n//                // remove whitespaces and tags\n////            $data = strip_tags(trim($data));\n//                // remove whitespaces and script tags\n//                $data = self::strip_tags_content(trim($data), '<script>', true);\n////            $data = self::strip_tags_content(trim($data), '<iframe>', true);\n//\n//                // apply stripslashes if magic_quotes_gpc is enabled\n//                if (get_magic_quotes_gpc()) {\n//                    $data = stripslashes($data);\n//                }\n//\n//                $data = self::escape($data);\n//\n//                // re-escape newlines\n//                $data = str_replace(array('\\r', '\\n'), array(\"\\r\", \"\\n\"), $data);\n//            }\n        }\n        return $data;\n    }\n\n    // xss_clean //\n\n    /**\n  \t * Character set\n  \t *\n  \t * Will be overridden by the constructor.\n  \t *\n  \t * @var\tstring\n  \t */\n  \tpublic static $charset = 'UTF-8';\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Random Hash for protecting URLs.\n   \t *\n   \t * @var\tstring\n   \t */\n   \tprotected static $_xss_hash;\n\n    /**\n   \t * List of never allowed strings\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_str =\tarray(\n   \t\t'document.cookie'\t=> '[removed]',\n   \t\t'document.write'\t=> '[removed]',\n   \t\t'.parentNode'\t\t=> '[removed]',\n   \t\t'.innerHTML'\t\t=> '[removed]',\n   \t\t'-moz-binding'\t\t=> '[removed]',\n   \t\t'<!--'\t\t\t\t=> '&lt;!--',\n   \t\t'-->'\t\t\t\t=> '--&gt;',\n   \t\t'<![CDATA['\t\t\t=> '&lt;![CDATA[',\n   \t\t'<comment>'\t\t\t=> '&lt;comment&gt;'\n   \t);\n\n   \t/**\n   \t * List of never allowed regex replacements\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_regex = array(\n   \t\t'javascript\\s*:',\n   \t\t'(document|(document\\.)?window)\\.(location|on\\w*)',\n   \t\t'expression\\s*(\\(|&\\#40;)', // CSS and IE\n   \t\t'vbscript\\s*:', // IE, surprise!\n   \t\t'wscript\\s*:', // IE\n   \t\t'jscript\\s*:', // IE\n   \t\t'vbs\\s*:', // IE\n   \t\t'Redirect\\s+30\\d',\n   \t\t\"([\\\"'])?data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?\"\n   \t);\n\n    /**\n   \t * XSS Clean\n   \t *\n   \t * Sanitizes data so that Cross Site Scripting Hacks can be\n   \t * prevented.  This method does a fair amount of work but\n   \t * it is extremely thorough, designed to prevent even the\n   \t * most obscure XSS attempts.  Nothing is ever 100% foolproof,\n   \t * of course, but I haven't been able to get anything passed\n   \t * the filter.\n   \t *\n   \t * Note: Should only be used to deal with data upon submission.\n   \t *\t It's not something that should be used for general\n   \t *\t runtime processing.\n   \t *\n   \t * @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention\n   \t * \t\tBased in part on some code and ideas from Bitflux.\n   \t *\n   \t * @link\thttp://ha.ckers.org/xss.html\n   \t * \t\tTo help develop this script I used this great list of\n   \t *\t\tvulnerabilities along with a few other hacks I've\n   \t *\t\tharvested from examining vulnerabilities in other programs.\n   \t *\n   \t * @param\tstring|string[]\t$str\t\tInput data\n   \t * @param \tbool\t\t$is_image\tWhether the input is an image\n   \t * @return\tstring\n   \t */\n   \tpublic static function xss_clean($str, $is_image = FALSE)\n   \t{\n   \t\t// Is the string an array?\n   \t\tif (is_array($str))\n   \t\t{\n   \t\t\twhile (list($key) = each($str))\n   \t\t\t{\n                if (preg_match('/^[a-zA-Z0-9_\\x7f-\\xff]*$/', $key)) {  // check for valid array name\n                    $str[$key] = self::xss_clean($str[$key]);\n                } else {\n                    return null;\n                }\n   \t\t\t}\n\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\t// Remove Invisible Characters\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * URL Decode\n   \t\t *\n   \t\t * Just in case stuff like this is submitted:\n   \t\t *\n   \t\t * <a href=\"http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\">Google</a>\n   \t\t *\n   \t\t * Note: Use rawurldecode() so it does not remove plus signs\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$str = rawurldecode($str);\n   \t\t}\n   \t\twhile (preg_match('/%[0-9a-f]{2,}/i', $str));\n\n   \t\t/*\n   \t\t * Convert character entities to ASCII\n   \t\t *\n   \t\t * This permits our tests below to work reliably.\n   \t\t * We only convert entities that are within tags since\n   \t\t * these are the ones that will pose security problems.\n   \t\t */\n   \t\t$str = preg_replace_callback(\"/[^a-z0-9>]+[a-z0-9]+=([\\'\\\"]).*?\\\\1/si\", array('self', '_convert_attribute'), $str);\n   \t\t$str = preg_replace_callback('/<\\w+.*/si', array('self', '_decode_entity'), $str);\n\n   \t\t// Remove Invisible Characters Again!\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * Convert all tabs to spaces\n   \t\t *\n   \t\t * This prevents strings like this: ja\tvascript\n   \t\t * NOTE: we deal with spaces between characters later.\n   \t\t * NOTE: preg_replace was found to be amazingly slow here on\n   \t\t * large blocks of data, so we use str_replace.\n   \t\t */\n   \t\t$str = str_replace(\"\\t\", ' ', $str);\n\n   \t\t// Capture converted string for later comparison\n   \t\t$converted_string = $str;\n\n   \t\t// Remove Strings that are never allowed\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Makes PHP tags safe\n   \t\t *\n   \t\t * Note: XML tags are inadvertently replaced too:\n   \t\t *\n   \t\t * <?xml\n   \t\t *\n   \t\t * But it doesn't seem to pose a problem.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\t// Images have a tendency to have the PHP short opening and\n   \t\t\t// closing tags every so often so we skip those and only\n   \t\t\t// do the long opening tags.\n   \t\t\t$str = preg_replace('/<\\?(php)/i', '&lt;?\\\\1', $str);\n   \t\t}\n   \t\telse\n   \t\t{\n   \t\t\t$str = str_replace(array('<?', '?'.'>'), array('&lt;?', '?&gt;'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Compact any exploded words\n   \t\t *\n   \t\t * This corrects words like:  j a v a s c r i p t\n   \t\t * These words are compacted back to their correct state.\n   \t\t */\n   \t\t$words = array(\n   \t\t\t'javascript', 'expression', 'vbscript', 'jscript', 'wscript',\n   \t\t\t'vbs', 'script', 'base64', 'applet', 'alert', 'document',\n   \t\t\t'write', 'cookie', 'window', 'confirm', 'prompt', 'eval'\n   \t\t);\n\n   \t\tforeach ($words as $word)\n   \t\t{\n   \t\t\t$word = implode('\\s*', str_split($word)).'\\s*';\n\n   \t\t\t// We only want to do this when it is followed by a non-word character\n   \t\t\t// That way valid stuff like \"dealer to\" does not become \"dealerto\"\n   \t\t\t$str = preg_replace_callback('#('.substr($word, 0, -3).')(\\W)#is', array('self', '_compact_exploded_words'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Remove disallowed Javascript in links or img tags\n   \t\t * We used to do some version comparisons and use of stripos(),\n   \t\t * but it is dog slow compared to these simplified non-capturing\n   \t\t * preg_match(), especially if the pattern exists in the string\n   \t\t *\n   \t\t * Note: It was reported that not only space characters, but all in\n   \t\t * the following pattern can be parsed as separators between a tag name\n   \t\t * and its attributes: [\\d\\s\"\\'`;,\\/\\=\\(\\x00\\x0B\\x09\\x0C]\n   \t\t * ... however, remove_invisible_characters() above already strips the\n   \t\t * hex-encoded ones, so we'll skip them below.\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$original = $str;\n\n   \t\t\tif (preg_match('/<a/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<a[^a-z0-9>]+([^>]*?)(?:>|$)#si', array('self', '_js_link_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/<img/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<img[^a-z0-9]+([^>]*?)(?:\\s?/?>|$)#si', array('self', '_js_img_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/script|xss/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace('#</*(?:script|xss).*?>#si', '[removed]', $str);\n   \t\t\t}\n   \t\t}\n   \t\twhile ($original !== $str);\n   \t\tunset($original);\n\n   \t\t/*\n   \t\t * Sanitize naughty HTML elements\n   \t\t *\n   \t\t * If a tag containing any of the words in the list\n   \t\t * below is found, the tag gets converted to entities.\n   \t\t *\n   \t\t * So this: <blink>\n   \t\t * Becomes: &lt;blink&gt;\n   \t\t */\n   \t\t$pattern = '#'\n   \t\t\t.'<((?<slash>/*\\s*)(?<tagName>[a-z0-9]+)(?=[^a-z0-9]|$)' // tag start and name, followed by a non-tag character\n   \t\t\t.'[^\\s\\042\\047a-z0-9>/=]*' // a valid attribute character immediately after the tag would count as a separator\n   \t\t\t// optional attributes\n   \t\t\t.'(?<attributes>(?:[\\s\\042\\047/=]*' // non-attribute characters, excluding > (tag close) for obvious reasons\n   \t\t\t.'[^\\s\\042\\047>/=]+' // attribute characters\n   \t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=' // attribute-value separator\n   \t\t\t\t\t.'(?:[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*))' // single, double or non-quoted value\n   \t\t\t\t.')?' // end optional attribute-value group\n   \t\t\t.')*)' // end optional attributes group\n   \t\t\t.'[^>]*)(?<closeTag>\\>)?#isS';\n\n   \t\t// Note: It would be nice to optimize this for speed, BUT\n   \t\t//       only matching the naughty elements here results in\n   \t\t//       false positives and in turn - vulnerabilities!\n   \t\tdo\n   \t\t{\n   \t\t\t$old_str = $str;\n   \t\t\t$str = preg_replace_callback($pattern, array('self', '_sanitize_naughty_html'), $str);\n   \t\t}\n   \t\twhile ($old_str !== $str);\n   \t\tunset($old_str);\n\n   \t\t/*\n   \t\t * Sanitize naughty scripting elements\n   \t\t *\n   \t\t * Similar to above, only instead of looking for\n   \t\t * tags it looks for PHP and JavaScript commands\n   \t\t * that are disallowed. Rather than removing the\n   \t\t * code, it simply converts the parenthesis to entities\n   \t\t * rendering the code un-executable.\n   \t\t *\n   \t\t * For example:\teval('some code')\n   \t\t * Becomes:\teval&#40;'some code'&#41;\n   \t\t */\n   \t\t$str = preg_replace(\n   \t\t\t'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)#si',\n   \t\t\t'\\\\1\\\\2&#40;\\\\3&#41;',\n   \t\t\t$str\n   \t\t);\n\n   \t\t// Final clean up\n   \t\t// This adds a bit of extra precaution in case\n   \t\t// something got through the above filters\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Images are Handled in a Special Way\n   \t\t * - Essentially, we want to know that after all of the character\n   \t\t * conversion is done whether any unwanted, likely XSS, code was found.\n   \t\t * If not, we return TRUE, as the image is clean.\n   \t\t * However, if the string post-conversion does not matched the\n   \t\t * string post-removal of XSS, then it fails, as there was unwanted XSS\n   \t\t * code found and removed/changed during processing.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\treturn ($str === $converted_string);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Do Never Allowed\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param \tstring\n   \t * @return \tstring\n   \t */\n   \tprotected static function _do_never_allowed($str)\n   \t{\n   \t\t$str = str_replace(array_keys(self::$_never_allowed_str), self::$_never_allowed_str, $str);\n\n   \t\tforeach (self::$_never_allowed_regex as $regex)\n   \t\t{\n   \t\t\t$str = preg_replace('#'.$regex.'#is', '[removed]', $str);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n\t/**\n\t * Remove Invisible Characters\n\t *\n\t * This prevents sandwiching null characters\n\t * between ascii characters, like Java\\0script.\n\t *\n\t * @param\tstring\n\t * @param\tbool\n\t * @return\tstring\n\t */\n\tpublic static function remove_invisible_characters($str, $url_encoded = TRUE)\n\t{\n\t\t$non_displayables = array();\n\n\t\t// every control character except newline (dec 10),\n\t\t// carriage return (dec 13) and horizontal tab (dec 09)\n\t\tif ($url_encoded)\n\t\t{\n\t\t\t$non_displayables[] = '/%0[0-8bcef]/';\t// url encoded 00-08, 11, 12, 14, 15\n\t\t\t$non_displayables[] = '/%1[0-9a-f]/';\t// url encoded 16-31\n\t\t}\n\n\t\t$non_displayables[] = '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S';\t// 00-08, 11, 12, 14-31, 127\n\n\t\tdo\n\t\t{\n\t\t\t$str = preg_replace($non_displayables, '', $str, -1, $count);\n\t\t}\n\t\twhile ($count);\n\n\t\treturn $str;\n\t}\n\n    /**\n   \t * HTML Entity Decode Callback\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _decode_entity($match)\n   \t{\n   \t\t// Protect GET variables in URLs\n   \t\t// 901119URL5918AMP18930PROTECT8198\n   \t\t$match = preg_replace('|\\&([a-z\\_0-9\\-]+)\\=([a-z\\_0-9\\-/]+)|i', self::xss_hash().'\\\\1=\\\\2', $match[0]);\n\n   \t\t// Decode, then un-protect URL GET vars\n   \t\treturn str_replace(\n            self::xss_hash(),\n   \t\t\t'&',\n            self::entity_decode($match, self::$charset)\n   \t\t);\n   \t}\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Generates the XSS hash if needed and returns it.\n   \t *\n   \t * @see\t\tCI_Security::$_xss_hash\n   \t * @return\tstring\tXSS hash\n   \t */\n   \tpublic static function xss_hash()\n   \t{\n   \t\tif (self::$_xss_hash === NULL)\n   \t\t{\n   \t\t\t$rand = self::get_random_bytes(16);\n            self::$_xss_hash = ($rand === FALSE)\n   \t\t\t\t? md5(uniqid(mt_rand(), TRUE))\n   \t\t\t\t: bin2hex($rand);\n   \t\t}\n\n   \t\treturn self::$_xss_hash;\n   \t}\n\n    /**\n   \t * HTML Entities Decode\n   \t *\n   \t * A replacement for html_entity_decode()\n   \t *\n   \t * The reason we are not using html_entity_decode() by itself is because\n   \t * while it is not technically correct to leave out the semicolon\n   \t * at the end of an entity most browsers will still interpret the entity\n   \t * correctly. html_entity_decode() does not convert entities without\n   \t * semicolons, so we are left with our own little solution here. Bummer.\n   \t *\n   \t * @link\thttp://php.net/html-entity-decode\n   \t *\n   \t * @param\tstring\t$str\t\tInput\n   \t * @param\tstring\t$charset\tCharacter set\n   \t * @return\tstring\n   \t */\n   \tpublic static function entity_decode($str, $charset = NULL)\n   \t{\n   \t\tif (strpos($str, '&') === FALSE)\n   \t\t{\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\tstatic $_entities;\n\n   \t\tisset($charset) OR $charset = self::$charset;\n   \t\t$flag = expCore::is_php('5.4')\n   \t\t\t? ENT_COMPAT | ENT_HTML5\n   \t\t\t: ENT_COMPAT;\n\n   \t\tdo\n   \t\t{\n   \t\t\t$str_compare = $str;\n\n   \t\t\t// Decode standard entities, avoiding false positives\n   \t\t\tif (preg_match_all('/&[a-z]{2,}(?![a-z;])/i', $str, $matches))\n   \t\t\t{\n   \t\t\t\tif ( ! isset($_entities))\n   \t\t\t\t{\n   \t\t\t\t\t$_entities = array_map(\n   \t\t\t\t\t\t'strtolower',\n                        expCore::is_php('5.3.4')\n   \t\t\t\t\t\t\t? get_html_translation_table(HTML_ENTITIES, $flag, $charset)\n   \t\t\t\t\t\t\t: get_html_translation_table(HTML_ENTITIES, $flag)\n   \t\t\t\t\t);\n\n   \t\t\t\t\t// If we're not on PHP 5.4+, add the possibly dangerous HTML 5\n   \t\t\t\t\t// entities to the array manually\n   \t\t\t\t\tif ($flag === ENT_COMPAT)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$_entities[':'] = '&colon;';\n   \t\t\t\t\t\t$_entities['('] = '&lpar;';\n   \t\t\t\t\t\t$_entities[')'] = '&rpar;';\n   \t\t\t\t\t\t$_entities[\"\\n\"] = '&newline;';\n   \t\t\t\t\t\t$_entities[\"\\t\"] = '&tab;';\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$replace = array();\n   \t\t\t\t$matches = array_unique(array_map('strtolower', $matches[0]));\n   \t\t\t\tforeach ($matches as &$match)\n   \t\t\t\t{\n   \t\t\t\t\tif (($char = array_search($match.';', $_entities, TRUE)) !== FALSE)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$replace[$match] = $char;\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$str = str_ireplace(array_keys($replace), array_values($replace), $str);\n   \t\t\t}\n\n   \t\t\t// Decode numeric & UTF16 two byte entities\n   \t\t\t$str = html_entity_decode(\n   \t\t\t\tpreg_replace('/(&#(?:x0*[0-9a-f]{2,5}(?![0-9a-f;])|(?:0*\\d{2,4}(?![0-9;]))))/iS', '$1;', $str),\n   \t\t\t\t$flag,\n   \t\t\t\t$charset\n   \t\t\t);\n   \t\t}\n   \t\twhile ($str_compare !== $str);\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Get random bytes\n   \t *\n   \t * @param\tint\t$length\tOutput length\n   \t * @return\tstring\n   \t */\n   \tpublic static function get_random_bytes($length)\n   \t{\n   \t\tif (empty($length) OR ! ctype_digit((string) $length))\n   \t\t{\n   \t\t\treturn FALSE;\n   \t\t}\n\n        if (function_exists('random_bytes'))\n        {\n            try\n            {\n                // The cast is required to avoid TypeError\n                return random_bytes((int) $length);\n            }\n            catch (Exception $e)\n            {\n                // If random_bytes() can't do the job, we can't either ...\n                // There's no point in using fallbacks.\n                log_message('error', $e->getMessage());\n                return FALSE;\n            }\n        }\n\n   \t\t// Unfortunately, none of the following PRNGs is guaranteed to exist ...\n   \t\tif (defined('MCRYPT_DEV_URANDOM') && ($output = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM)) !== FALSE)\n   \t\t{\n   \t\t\treturn $output;\n   \t\t}\n\n\n   \t\tif (is_readable('/dev/urandom') && ($fp = fopen('/dev/urandom', 'rb')) !== FALSE)\n   \t\t{\n   \t\t\t// Try not to waste entropy ...\n            expCore::is_php('5.4') && stream_set_chunk_size($fp, $length);\n   \t\t\t$output = fread($fp, $length);\n   \t\t\tfclose($fp);\n   \t\t\tif ($output !== FALSE)\n   \t\t\t{\n   \t\t\t\treturn $output;\n   \t\t\t}\n   \t\t}\n\n   \t\tif (function_exists('openssl_random_pseudo_bytes'))\n   \t\t{\n   \t\t\treturn openssl_random_pseudo_bytes($length);\n   \t\t}\n\n   \t\treturn FALSE;\n   \t}\n\n    /**\n   \t * Attribute Conversion\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _convert_attribute($match)\n   \t{\n   \t\treturn str_replace(array('>', '<', '\\\\'), array('&gt;', '&lt;', '\\\\\\\\'), $match[0]);\n   \t}\n\n    /**\n   \t * Compact Exploded Words\n   \t *\n   \t * Callback method for xss_clean() to remove whitespace from\n   \t * things like 'j a v a s c r i p t'.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _compact_exploded_words($matches)\n   \t{\n   \t\treturn preg_replace('/\\s+/s', '', $matches[1]).$matches[2];\n   \t}\n\n    /**\n   \t * JS Link Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize links.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on link-heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_link_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#href=.*?(?:(?:alert|prompt|confirm)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|data\\s*:)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * JS Image Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize image tags.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on image tag heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_img_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#src=.*?(?:(?:alert|prompt|confirm|eval)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\s*,)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * Filter Attributes\n   \t *\n   \t * Filters tag attributes for consistency and safety.\n   \t *\n   \t * @used-by\tCI_Security::_js_img_removal()\n   \t * @used-by\tCI_Security::_js_link_removal()\n   \t * @param\tstring\t$str\n   \t * @return\tstring\n   \t */\n   \tprotected static function _filter_attributes($str)\n   \t{\n   \t\t$out = '';\n   \t\tif (preg_match_all('#\\s*[a-z\\-]+\\s*=\\s*(\\042|\\047)([^\\\\1]*?)\\\\1#is', $str, $matches))\n   \t\t{\n   \t\t\tforeach ($matches[0] as $match)\n   \t\t\t{\n   \t\t\t\t$out .= preg_replace('#/\\*.*?\\*/#s', '', $match);\n   \t\t\t}\n   \t\t}\n\n   \t\treturn $out;\n   \t}\n\n    /**\n   \t * Sanitize Naughty HTML\n   \t *\n   \t * Callback method for xss_clean() to remove naughty HTML elements.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _sanitize_naughty_html($matches)\n   \t{\n   \t\tstatic $naughty_tags    = array(\n   \t\t\t'alert', 'prompt', 'confirm', 'applet', 'audio', 'basefont', 'base', 'behavior', 'bgsound',\n   \t\t\t'blink', 'body', 'embed', 'expression', 'form', 'frameset', 'frame', 'head', 'html', 'ilayer',\n   \t\t\t'input', 'button', 'select', 'isindex', 'layer', 'link', 'meta', 'keygen', 'object',\n   \t\t\t'plaintext', 'script', 'textarea', 'title', 'math', 'video', 'svg', 'xml', 'xss'\n            //,'style', 'iframe'\n   \t\t);\n\n   \t\tstatic $evil_attributes = array(\n   \t\t\t'on\\w+', 'xmlns', 'formaction', 'form', 'xlink:href', 'FSCommand', 'seekSegmentTime'\n            //, 'style'\n   \t\t);\n\n   \t\t// First, escape unclosed tags\n   \t\tif (empty($matches['closeTag']))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1];\n   \t\t}\n   \t\t// Is the element that we caught naughty? If so, escape it\n   \t\telseif (in_array(strtolower($matches['tagName']), $naughty_tags, TRUE))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1].'&gt;';\n   \t\t}\n   \t\t// For other tags, see if their attributes are \"evil\" and strip those\n   \t\telseif (isset($matches['attributes']))\n   \t\t{\n   \t\t\t// We'll store the already fitlered attributes here\n   \t\t\t$attributes = array();\n\n   \t\t\t// Attribute-catching pattern\n   \t\t\t$attributes_pattern = '#'\n   \t\t\t\t.'(?<name>[^\\s\\042\\047>/=]+)' // attribute characters\n   \t\t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=(?<value>[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*)))' // attribute-value separator\n   \t\t\t\t.'#i';\n\n   \t\t\t// Blacklist pattern for evil attribute names\n   \t\t\t$is_evil_pattern = '#^('.implode('|', $evil_attributes).')$#i';\n\n   \t\t\t// Each iteration filters a single attribute\n   \t\t\tdo\n   \t\t\t{\n   \t\t\t\t// Strip any non-alpha characters that may preceed an attribute.\n   \t\t\t\t// Browsers often parse these incorrectly and that has been a\n   \t\t\t\t// of numerous XSS issues we've had.\n   \t\t\t\t$matches['attributes'] = preg_replace('#^[^a-z]+#i', '', $matches['attributes']);\n\n   \t\t\t\tif ( ! preg_match($attributes_pattern, $matches['attributes'], $attribute, PREG_OFFSET_CAPTURE))\n   \t\t\t\t{\n   \t\t\t\t\t// No (valid) attribute found? Discard everything else inside the tag\n   \t\t\t\t\tbreak;\n   \t\t\t\t}\n\n   \t\t\t\tif (\n   \t\t\t\t\t// Is it indeed an \"evil\" attribute?\n   \t\t\t\t\tpreg_match($is_evil_pattern, $attribute['name'][0])\n   \t\t\t\t\t// Or does it have an equals sign, but no value and not quoted? Strip that too!\n   \t\t\t\t\tOR (trim($attribute['value'][0]) === '')\n   \t\t\t\t)\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = 'xss=removed';\n   \t\t\t\t}\n   \t\t\t\telse\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = $attribute[0][0];\n   \t\t\t\t}\n\n   \t\t\t\t$matches['attributes'] = substr($matches['attributes'], $attribute[0][1] + strlen($attribute[0][0]));\n   \t\t\t}\n   \t\t\twhile ($matches['attributes'] !== '');\n\n   \t\t\t$attributes = empty($attributes)\n   \t\t\t\t? ''\n   \t\t\t\t: ' '.implode(' ', $attributes);\n   \t\t\treturn '<'.$matches['slash'].$matches['tagName'].$attributes.'>';\n   \t\t}\n\n   \t\treturn $matches[0];\n   \t}\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass fileController extends expController {\n    public $basemodel_name = \"expFile\";\n    protected $remove_permissions = array(\n        'delete'\n    );\n//    protected $manage_permissions = array(\n//        'picker'=>'Manage Files',\n//        'import'=>'Import',\n//        'export'=>'Export',\n//    );\n    public $requires_login = array(\n        'picker'=>'You must be logged in to perform this action',\n        'adder'=>'You must be logged in to perform this action',\n        'addit'=>'You must be logged in to perform this action',\n        'batchDelete'=>'You must be logged in to perform this action',\n        'createFolder'=>'You must be logged in to perform this action',\n        'deleter'=>'You must be logged in to perform this action',\n        'deleteit'=>'You must be logged in to perform this action',\n        'edit'=>'You must be logged in to perform this action',\n        'quickUpload'=>'You must be logged in to perform this action',\n        'upload'=>'You must be logged in to perform this action',\n        'uploader'=>'You must be logged in to perform this action',\n    );\n\n    static function displayname() { return gt(\"File Manager\"); }\n    static function description() { return gt(\"Add and manage Exponent Files\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n\n    public function manage_fixPaths() {\n        // fixes file directory issues when the old file class was used to save record\n        // where the trailing forward slash was not added. This simply checks to see\n        // if the trailing / is there, if not, it adds it.\n\n        $file = new expFile();\n        $files = $file->find('all');\n\n        foreach ($files as $key=>$file) {\n            if (substr($files[$key]->directory,-1,1)!=\"/\") {\n                $files[$key]->directory = $files[$key]->directory.'/';\n            }\n            $files[$key]->save();\n        }\n\n//        eDebug($files,true);\n    }\n\n    public function picker() {\n//        global $user;\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $jscatarray = array();\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $key=>$cat) {\n            $jscatarray[$key]['label'] = $cat->title;\n            $jscatarray[$key]['value'] = $cat->id;\n            $catarray[$cat->id] = $cat->title;\n        }\n        $jsuncat['label'] = 'Root';\n        $jsuncat['value'] = null;\n        array_unshift($jscatarray,$jsuncat);\n        $catarray['-1'] = 'All Folders';\n        if (strstr($this->params['update'],'?')) {\n            $update = explode('?',$this->params['update']);\n            if (!empty($update[0])) $this->params['update'] = $update[0];\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            'filter'=>!empty($this->params['filter'])?$this->params['filter']:null,\n            'cats'=>$catarray,\n            'jscats'=>json_encode($jscatarray)\n        ));\n    }\n\n    public function uploader() {\n        global $user;\n        //expHistory::set('manageable', $this->params);\n        flash('message',gt('Upload size limit').': '.ini_get('upload_max_filesize'));\n        if(intval(ini_get('upload_max_filesize'))!=intval(ini_get('post_max_size')) && $user->isAdmin()){\n            flash('error',gt('In order for the uploader to work correctly, \\'\"post_max_size\\' and \\'upload_max_filesize\\' within your php.ini file must match one another'));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $catarray[$cat->id] = $cat->title;\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            \"upload_size\"=>ini_get('upload_max_filesize'),\n            \"post_size\"=>ini_get('post_max_size'),\n            \"bmax\"=>intval(ini_get('upload_max_filesize')/1024*1000000000),\n            'cats'=>$catarray,\n        ));\n    }\n\n    /**\n     * Returns attached file view template configuration settings template\n     *\n     */\n    public function get_view_config() {\n        global $template;\n\n        if (!empty($this->params['view']) && (strpos($this->params['view'], '..') !== false || strpos($this->params['view'], '/') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        // set paths we will search in for the view\n        $paths = array(\n            BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/file/configure',\n            BASE.'framework/modules/common/views/file/configure',\n        );\n\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.tpl';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $ar = new expAjaxReply(200, 'ok');\n\t\t        $ar->send();\n            }\n        }\n    }\n\n    /**\n     * Returns view template configuration settings view template\n     *\n     */\n    public function get_module_view_config() {\n        global $template;\n\n        if (!empty($this->params['view']) && (strpos($this->params['view'], '..') !== false || strpos($this->params['view'], '/') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n//        $controller = new $this->params['mod'];\n        $controller = expModules::getController(expString::escape($this->params['mod']));\n        // set paths we will search in for the view\n        $paths = array(\n//            BASE.'themes/'.DISPLAY_THEME.'/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n//            BASE.'framework/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n            $controller->viewpath.'/configure',\n  \t        BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n        );\n\n        $config_found = false;\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.config';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $config_found = true;\n            }\n        }\n        $parts = explode('_', $this->params['view']);\n        if (!$config_found && ($this->params['view'] != $parts[0])) {\n            foreach ($paths as $path) {\n                $actview = $path.'/'.$parts[0].'.config';\n                if (is_readable($actview)) {\n                    if (bs(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    if (bs3(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap3.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    $template = new controllertemplate($this, $actview);\n                    $config_found = true;\n                }\n            }\n        }\n        if (!$config_found) {\n            echo \"<p>\".gt('There Are No View Specific Settings').\"</p>\";\n            $template = expTemplate::get_common_template('blank', null);\n        }\n\n//        expTemplate::get_config_template($this);\n        $ar = new expAjaxReply(200, 'ok');\n        $ar->send();\n    }\n\n    /**\n     * Get a file record by id or pathname and return it as JSON via Ajax\n     */\n    public function getFile() {\n        if (is_numeric($this->params['id'])) {\n            $file = new expFile($this->params['id']);\n        } else {\n            $efile = new expFile();\n            $path = str_replace(BASE, '', $this->params['id']);\n            $path = str_replace('\\\\', '/', $path);\n            $file = $efile->find('first','directory=\"'.dirname($path).'/'.'\" AND filename=\"'.basename($path).'\"');\n        }\n        $ar = new expAjaxReply(200, 'ok', $file);\n        $ar->send();\n    }\n\n    public function getFilesByJSON() {\n        global $user;\n\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get all\n        $startIndex = 0; // default start at 0\n//        $sort = null; // default don't sort\n//        $dir = 'asc'; // default sort dir is asc\n//        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if(strlen($this->params['results']) > 0) {\n            $results = intval($this->params['results']);\n        }\n\n        // Start at which record?\n        if(strlen($this->params['startIndex']) > 0) {\n            $startIndex = intval($this->params['startIndex']);\n        }\n\n        // Sorted?\n        if(strlen($this->params['sort']) > 0) {\n            if ($this->params['sort'] == 'cat') {\n                $sort = 'id';\n            } else {\n                $sort = expString::escape($this->params['sort']);\n            }\n//            if ($sort = 'id') $sort = 'filename';\n        }\n\n        // Sort dir?\n        if (($this->params['dir'] == 'false') || ($this->params['dir'] == 'desc') || ($this->params['dir'] == 'yui-dt-desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n        $totalrecords = 0;\n\n        if (!empty($this->params['query'])) {\n            $this->params['query'] = expString::escape($this->params['query']);\n            $filter = '';\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1) AND \";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= \"is_image=1 AND \";\n            }\n\n//            $this->params['query'] = expString::sanitize($this->params['query']);\n//            $totalrecords = $this->$modelname->find('count',\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\");\n//            $files = $this->$modelname->find('all',$filter.\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\".$imagesOnly,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all',$filter.\"(filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%')\",$sort.' '.$dir);\n\n            //FiXME we need to get all records then group by cat, then trim/paginate\n            $querycat = !empty($this->params['cat']) ? $this->params['cat'] : '0';\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                $filecat = !empty($file->expCat[0]->id) ? $file->expCat[0]->id : 0;\n                if (($querycat == $filecat || $querycat == -1)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n                        if (!empty($file->expCat[0]->title)) {\n                            $groupedfiles[$key]->cat = $file->expCat[0]->title;\n                            $groupedfiles[$key]->catid = $file->expCat[0]->id;\n                        }\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n        } else {\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1)\";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= !empty($filter) ? \" AND \" : \"\";\n                $filter .= \"is_image=1\";\n            }\n\n//            $totalrecords = $this->$modelname->find('count',$filter);\n//            $files = $this->$modelname->find('all',$filter,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all', $filter, $sort.' '.$dir);\n\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                if (empty($file->expCat[0]->title)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n    //                    $files[$key]->cat = $file->expCat[0]->title;\n    //                    $files[$key]->catid = $file->expCat[0]->id;\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    /**\n     * create a new virtual folder in response to an ajax request\n     * return updated list of virtual folders in response to an ajax request\n     */\n    public function createFolder() {\n        if (!empty($this->params['folder'])) {\n            $expcat = new expCat($this->params['folder']);\n            if (empty($expcat->id)) {\n                $expcat->module = 'file';\n                $expcat->title = $this->params['folder'];\n                $expcat->update();\n            }\n//            $this->params['module'] = 'file';\n//            $this->params['title'] = $this->params['folder'];\n//            parent::update();\n            $cats = $expcat->find('all','module=\"file\"','rank');\n            $catarray = array();\n            $catarray[] = 'Root Folder';\n            foreach ($cats as $cat) {\n                $catarray[$cat->id] = $cat->title;\n            }\n            echo json_encode($catarray);\n        }\n    }\n\n    public function delete() {\n//        global $db,$user;\n        global $user;\n\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->delete();\n            if (unlink($file->directory.$file->filename)) {\n                flash('message',$file->filename.' '.gt('was successfully deleted'));\n            } else {\n                flash('error',$file->filename.' '.gt('was deleted from the database, but could not be removed from the file system.'));\n            }\n        } else {\n            flash('error',$file->filename.' '.gt('wasn\\'t deleted because you don\\'t own the file.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function deleter() {\n//        global $db;\n\n        $notafile = array();\n//        $files = $db->selectObjects('expFiles',1);\n        foreach (expFile::selectAllFiles() as $file) {\n            if (!is_file(BASE.$file->directory.$file->filename)) {\n                $notafile[$file->id] = $file;\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notafile\n        ));\n    }\n\n    public function deleteit() {\n        global $user;\n        if (!empty($this->params['deleteit'])) {\n            foreach ($this->params['deleteit'] as $file) {\n                $delfile = new expFile($file);\n                if ($user->id==$delfile->poster || $user->isAdmin()) {\n                    $delfile->delete();\n                    flash('error',$delfile->filename.' '.gt('was deleted from the database.'));\n                }\n            }\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function batchDelete() {\n        global $user;\n\n        $error = false;\n//        if (get_magic_quotes_gpc()) $this->params['files'] = stripslashes($this->params['files']);  // magic quotes fix\n        $this->params['files'] = stripslashes($this->params['files']);\n        $files = json_decode($this->params['files']);\n        switch (json_last_error()) {  //FIXME json error checking/reporting, may no longer be needed\n            case JSON_ERROR_NONE:\n            break;\n            case JSON_ERROR_DEPTH:\n                $error = 'JSON - Maximum stack depth exceeded';\n            break;\n            case JSON_ERROR_STATE_MISMATCH:\n                $error = 'JSON - Underflow or the modes mismatch';\n            break;\n            case JSON_ERROR_CTRL_CHAR:\n                $error = 'JSON - Unexpected control character found';\n            break;\n            case JSON_ERROR_SYNTAX:\n                $error = 'JSON - Syntax error, malformed JSON';\n            break;\n            case JSON_ERROR_UTF8:\n                $error = 'JSON - Malformed UTF-8 characters, possibly incorrectly encoded';\n            break;\n            default:\n                $error = 'JSON - Unknown error';\n            break;\n        }\n\n        if (empty($error)) foreach ($files as $file) {\n            $delfile = new expFile($file->id);\n            if ($user->id==$delfile->poster || $user->isAdmin()) {\n                $delfile->delete();\n                unlink($delfile->directory.$delfile->filename);\n            } else {\n                $error = gt(\"you didn't have permission\");\n            }\n        }\n        if (!empty($error)) {\n            $ar = new expAjaxReply(300, gt(\"Some files were NOT deleted because\") . ' ' . $error);\n        } else {\n            $ar = new expAjaxReply(200, gt('Your files were deleted successfully'), $file);\n        }\n        $ar->send();\n    }\n\n    public function adder() {\n        global $db;\n\n        $notindb = array();\n        $allfiles = expFile::listFlat(BASE.'files',true,null,array(),BASE);\n        foreach ($allfiles as $path=>$file) {\n            if ($file[0] != '.') {\n//                $found = false;\n                $npath = preg_replace('/'.$file.'/','',$path, 1);\n//                $dbfiles = $db->selectObjects('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n                $dbfile = $db->selectObject('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n//                foreach ($dbfiles as $dbfile) {\n//                    if (!empty($dbfile)) $found = ($dbfile->directory == str_replace($file,'',$path));\n//                }\n//                if (!$found) {\n//                    $notindb[$path] = $file;\n//                }\n                if (empty($dbfile)) {\n                    $notindb[$path] = $file;\n                }\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notindb\n        ));\n    }\n\n    public function addit() {\n        foreach ($this->params['addit'] as $file) {\n            $newfile = new expFile(array('directory'=>dirname($file).'/','filename'=>basename($file)));\n            $newfile->posted = $newfile->last_accessed = filemtime($file);\n            $newfile->save();\n            flash('message',$newfile->filename.' '.gt('was added to the File Manager.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function upload() {\n\n        // upload the file, but don't save the record yet...\n        if ($this->params['resize'] != 'false') {\n            $maxwidth = $this->params['max_width'];\n        } else {\n            $maxwidth = null;\n        }\n        $file = expFile::fileUpload('Filedata',false,false,null,null,$maxwidth);\n        // since most likely this function will only get hit via flash in YUI Uploader\n        // and since Flash can't pass cookies, we lose the knowledge of our $user\n        // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n        // and then assign $user->id to $file->poster so we have an audit trail for the upload\n\n        if (is_object($file)) {\n            $resized = !empty($file->resized) ? true : false;\n            $user = new user($this->params['usrid']);\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($this->params['cat'])) {\n                $expcat = new expCat($this->params['cat']);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n\n            // a echo so YUI Uploader is notified of the function's completion\n            if ($resized) {\n                echo gt('File resized and then saved');\n            } else {\n                echo gt('File saved');\n            }\n        } else {\n            echo gt('File was NOT uploaded!');\n//            flash('error',gt('File was not uploaded!'));\n        }\n    }\n\n    public function quickUpload(){\n        global $user;\n\n        if (!empty($this->params['folder']) || (defined('QUICK_UPLOAD_FOLDER') && QUICK_UPLOAD_FOLDER != '' && QUICK_UPLOAD_FOLDER != 0)) {\n            // prevent attempt to place file somewhere other than /files folder\n            if (!empty($this->params['folder']) && strpos($this->params['folder'], '..') !== false) {\n                $ar = new expAjaxReply(300, gt(\"File was not uploaded!\"));\n                $ar->send();\n            }\n            if (SITE_FILE_MANAGER == 'picker') {\n                $quikFolder = !empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER;\n                $destDir = null;\n            } elseif (SITE_FILE_MANAGER == 'elfinder') {\n                $quikFolder = null;\n                $destDir = UPLOAD_DIRECTORY_RELATIVE . (!empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER) . '/';\n                // create folder if non-existant\n                expFile::makeDirectory($destDir);\n            }\n        } else {\n            $quikFolder = null;\n            $destDir = null;\n        }\n\n        //extensive suitability check before doing anything with the file...\n        if (isset($_SERVER['HTTP_X_FILE_NAME'])) {  //HTML5 XHR upload\n            $file = expFile::fileXHRUpload($_SERVER['HTTP_X_FILE_NAME'],false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($quikFolder)) {\n                $expcat = new expCat($quikFolder);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n            $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n            $ar->send();\n        } else {  //$_POST upload\n            if (($_FILES['uploadfile'] == \"none\") OR (empty($_FILES['uploadfile']['name'])) ) {\n                $message = gt(\"No file uploaded.\");\n            } else if ($_FILES['uploadfile'][\"size\"] == 0) {\n                $message = gt(\"The file is zero length.\");\n    //            } else if (($_FILES['upload'][\"type\"] != \"image/pjpeg\") AND ($_FILES['upload'][\"type\"] != \"image/jpeg\") AND ($_FILES['upload'][\"type\"] != \"image/png\")) {\n    //                $message = gt(\"The image must be in either JPG or PNG format. Please upload a JPG or PNG instead.\");\n            } else if (!is_uploaded_file($_FILES['uploadfile'][\"tmp_name\"])) {\n                $message = gt(\"You may be attempting to hack our server.\");\n            } else {\n                // upload the file, but don't save the record yet...\n                $file = expFile::fileUpload('uploadfile',false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n                // since most likely this function will only get hit via flash in YUI Uploader\n                // and since Flash can't pass cookies, we lose the knowledge of our $user\n                // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n                // and then assign $user->id to $file->poster so we have an audit trail for the upload\n                if (is_object($file)) {\n                    $file->poster = $user->id;\n                    $file->posted = $file->last_accessed = time();\n                    $file->save();\n                    if (!empty($quikFolder)) {\n                        $expcat = new expCat($quikFolder);\n                        $params['expCat'][0] = $expcat->id;\n                        $file->update($params);\n                    }\n                    $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n                } else {\n                    $ar = new expAjaxReply(300, gt(\"File was not uploaded!\").' - '.$file);\n                }\n                $ar->send();\n            }\n        }\n    }\n\n    public function editCat() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $expcat = new expCat($this->params['newValue']);\n            $params['expCat'][0] = $expcat->id;\n            $file->update($params);\n            $file->cat = $expcat->title;\n            $file->catid = $expcat->id;\n            $ar = new expAjaxReply(200, gt('Your Folder was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editTitle() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->title = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your title was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editAlt() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->alt = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your alt was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function editShare() {\n        global $user;\n        $file = new expFile($this->params['id']);\n\t\tif(!isset($this->params['newValue'])) {\n\t\t\t$this->params['newValue'] = 0;\n\t\t}\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->shared = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('This file is now shared.'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so it's not yours to share.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function import_eql() {\n    }\n\n    public  function import_eql_process() {\n        global $db;\n\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n            $errors = array();\n            expSession::clearAllUsersSessionCache();\n\n            // copy in deprecated definitions files to aid in import\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (!file_exists($dst . '/' . $file)) {\n                            copy($src . '/' . $file, $dst . '/' . $file);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            expFile::restoreDatabase($_FILES['file']['tmp_name'], $errors);\n\n            // now remove deprecated definitions files\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (file_exists($dst . '/' . $file)) {\n                            unlink($dst . '/' . $file);\n                        }\n                        // remove empty deprecated tables\n                        $table = substr($file, 0, -4);\n                        if ($db->tableIsEmpty($table)) {\n                            $db->dropTable($table);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            // update search index\n            searchController::spider();\n\n            // check to see if we need to install or upgrade the restored database\n            expVersion::checkVersion();\n\n            assign_to_template(\n                array(\n                    'success' => !count($errors),\n                    'errors' => $errors,\n                )\n            );\n        }\n    }\n\n    public static function getTables() {\n        global $db;\n\n        expDatabase::fix_table_names();\n        $tables = $db->getTables();\n        if (!function_exists('tmp_removePrefix')) {\n        \tfunction tmp_removePrefix($tbl) {\n        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n        \t\t// '_' character - that is automatically added by the database class.\n        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n        \t}\n        }\n        $tables = array_map('tmp_removePrefix',$tables);\n        usort($tables,'strnatcmp');\n        return $tables;\n    }\n\n    public function export_eql() {\n//        global $db, $user;\n        global $user;\n\n//        expDatabase::fix_table_names();\n//        $tables = $db->getTables();\n//        if (!function_exists('tmp_removePrefix')) {\n//        \tfunction tmp_removePrefix($tbl) {\n//        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n//        \t\t// '_' character - that is automatically added by the database class.\n//        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n//        \t}\n//        }\n//        $tables = array_map('tmp_removePrefix',$tables);\n//        usort($tables,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n            'tables' => self::getTables(),\n        ));\n    }\n\n    public function export_eql_process() {\n//        global $db;\n\n        if (!isset($this->params['tables'])) { // No checkboxes clicked so we'll dump all tables\n            $this->params['tables'] = self::getTables();\n            $this->params['tables'] = array_flip($this->params['tables']);\n        }\n//        \techo gt('You must choose at least one table to export.');\n//        } else { // All good\n        \t$filename = str_replace(\n        \t\tarray('__DOMAIN__','__DB__'),\n        \t\tarray(str_replace('.','_',HOSTNAME),DB_NAME),\n                $this->params['filename']);\n        \t$filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.eql');\n\n        \tob_end_clean();\n        \tob_start(\"ob_gzhandler\");\n\n        \tif (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n        \t\t$path = BASE . \"themes/\".DISPLAY_THEME.\"/sample.eql\";\n        \t\tif (!$eql = fopen ($path, \"w\")) {\n        \t\t\tflash('error',gt(\"Error opening eql file for writing\").\" \".$path);\n        \t\t} else {\n                    //TODO we need to write inside call passing $eql file pointer\n                    $eqlfile = expFile::dumpDatabase(array_keys($this->params['tables']));\n        \t\t\tif (fwrite ($eql, $eqlfile)  === FALSE) {\n        \t\t\t\tflash('error',gt(\"Error writing to eql file\").\" \".$path);\n        \t\t\t}\n        \t\t\tfclose ($eql);\n        \t\t\tflash('message',gt(\"Sample database (eql file) saved to\").\" '\".DISPLAY_THEME.\"' \".gt(\"theme\"));\n        \t\t\texpHistory::back();\n        \t\t}\n        \t} else {\n        \t\t// This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n        \t\t// 'application/octet-stream' is the registered IANA type but\n        \t\t//        MSIE and Opera seems to prefer 'application/octetstream'\n        \t\t$mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n        \t\theader('Content-Type: ' . $mime_type);\n        \t\theader('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        \t\t// IE need specific headers\n        \t\tif (EXPONENT_USER_BROWSER == 'IE') {\n        \t\t\theader('Content-Disposition: inline; filename=\"' . $filename . '\"');\n        \t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n        \t\t\theader('Pragma: public');\n        \t\t} else {\n        \t\t\theader('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n        \t\t\theader('Pragma: no-cache');\n        \t\t}\n                echo expFile::dumpDatabase(array_keys($this->params['tables']));  //FIXME we need to echo inside call\n        \t\texit; // Exit, since we are exporting\n        \t}\n//        }\n    }\n\n    public function import_files() {\n    }\n\n    public function import_files_process() {\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n        \t$basename = basename($_FILES['file']['name']);\n\n        \tinclude_once(BASE.'external/Tar.php');\n        \t$tar = new Archive_Tar($_FILES['file']['tmp_name'],'gz');\n\n        \t$dest_dir = BASE.'tmp/extensionuploads/'.uniqid('');\n        \t@mkdir($dest_dir,DIR_DEFAULT_MODE_STR);\n        \tif (!file_exists($dest_dir)) {\n        \t\techo gt('Unable to create temporary directory to extract files archive.');\n        \t} else {\n        \t\t$return = $tar->extract($dest_dir);\n        \t\tif (!$return) {\n        \t\t\techo '<br />'.gt('Error extracting TAR archive').'<br />';\n        \t\t} else if (!file_exists($dest_dir.'/files') || !is_dir($dest_dir.'/files')) {\n        \t\t\techo '<br />'.gt('Invalid archive format, no \\'/files\\' folder').'<br />';\n        \t\t} else {\n        \t\t\t// Show the form for specifying which mod types to 'extract'\n\n        \t\t\t$mods = array(); // Stores the mod classname, the files list, and the module's real name\n\n        \t\t\t$dh = opendir($dest_dir.'/files');\n        \t\t\twhile (($file = readdir($dh)) !== false) {\n        \t\t\t\tif ($file{0} != '.' && is_dir($dest_dir.'/files/'.$file)) {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\tarray_keys(expFile::listFlat($dest_dir.'/files/'.$file,1,null,array(),$dest_dir.'/files/'))\n        \t\t\t\t\t);\n        //\t\t\t\t\tif (class_exists($file)) {\n        //\t\t\t\t\t\t$mods[$file][0] = call_user_func(array($file,'name')); // $file is the class name of the module\n        //\t\t\t\t\t}\n        \t\t\t\t} elseif ($file != '.' && $file != '..') {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\t$file\n        \t\t\t\t\t);\n        \t\t\t\t}\n        \t\t\t}\n\n                    assign_to_template(array(\n                        'dest_dir' => $dest_dir,\n                        'file_data' => $mods,\n                    ));\n        \t\t}\n        \t}\n        }\n    }\n\n    public function import_files_extract() {\n        $dest_dir = $this->params['dest_dir'];\n        $files = array();\n        foreach (array_keys($this->params['mods']) as $file) {\n        \t$files[$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\tif (class_exists($mod)) {\n        //\t\t$files[$mod][0] = call_user_func(array($mod,'name'));\n        //\t}\n        //\tforeach (array_keys(expFile::listFlat($dest_dir.'/files',1,null,array(),$dest_dir.'/files/')) as $file) {\n        //\t\t$files[$mod][1][$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\t}\n        }\n\n        expSession::set('dest_dir',$dest_dir);\n        expSession::set('files_data',$files);\n\n        assign_to_template(array(\n            'files_data' => $files,\n        ));\n    }\n\n    public function import_files_finish() {\n        $dest_dir = expSession::get('dest_dir');\n        $files = expSession::get('files_data');\n        if (!file_exists(BASE.'files')) {\n        \tmkdir(BASE.'files',DIR_DEFAULT_MODE_STR);\n        }\n\n        $filecount = 0;\n        foreach (array_keys($files) as $file) {\n            expFile::copyDirectoryStructure($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \tcopy($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \t$filecount++;\n        }\n\n        expSession::un_set('dest_dir');\n        expSession::un_set('files_data');\n\n        expFile::removeDirectory($dest_dir);\n\n        assign_to_template(array(\n            'file_count' => $filecount,\n        ));\n    }\n\n    public function export_files() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['controller'],isset($this->params['src'])?$this->params['src']:null,isset($this->params['int'])?$this->params['int']:null);\n        //$mods = array();\n        //$dh = opendir(BASE.'files');\n        //while (($file = readdir($dh)) !== false) {\n        //\tif (is_dir(BASE.'files/'.$file) && $file{0} != '.' && class_exists($file)) {\n        //\t\t$mods[$file] = call_user_func(array($file,'name'));\n        //\t}\n        //}\n        //uasort($mods,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n        ));\n    }\n\n    public function export_files_process() {\n//        global $db;\n\n        //if (!isset($this->params['mods'])) {\n        //\techo gt('You must select at least one module to export files for.');\n        //\treturn;\n        //}\n\n        include_once(BASE.'external/Tar.php');\n\n        $files = array();\n        //foreach (array_keys($this->params['mods']) as $mod) {\n        //\tforeach ($db->selectObjects('file',\"directory LIKE 'files/\".$mod.\"%'\") as $file) {\n//            foreach ($db->selectObjects('expFiles',1) as $file) {\n        foreach (expFile::selectAllFiles() as $file) {\n            $files[] = BASE.$file->directory.$file->filename;\n        }\n        //}\n\n        $fname = tempnam(BASE.'/tmp','exporter_files_');\n        $tar = new Archive_Tar($fname,'gz');\n        $tar->createModify($files,'',BASE);\n\n        $filename = str_replace(\n            array('__DOMAIN__','__DB__'),\n            array(str_replace('.','_',HOSTNAME),DB_NAME),\n            $this->params['filename']);\n        $filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.tar.gz');\n\n        if (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n            copy($fname,BASE . \"themes/\".DISPLAY_THEME_REAL.\"/sample.tar.gz\");\n            unlink($fname);\n            flash('message',gt(\"Sample uploaded files archive saved to\").\" '\".DISPLAY_THEME_REAL.\"' \".gt(\"theme\"));\n            expHistory::back();\n        } else {\n            ob_end_clean();\n            // This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n            // 'application/octet-stream' is the registered IANA type but\n            //        MSIE and Opera seems to prefer 'application/octetstream'\n            $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n            header('Content-Type: ' . $mime_type);\n            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n            } else {\n                header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n                header('Pragma: no-cache');\n            }\n\n            $fh = fopen($fname,'rb');\n            while (!feof($fh)) {\n                echo fread($fh,8192);\n            }\n            fclose($fh);\n            unlink($fname);\n        }\n\n        exit(''); // Exit, since we are exporting.\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n\nclass formsController extends expController {\n    public $useractions = array(\n        'enterdata' => 'Input Records',\n        'showall'    => 'Show All Records',\n        'show'       => 'Show a Single Record',\n    );\n    protected $add_permissions = array(\n        'viewdata'  => \"View Data\",\n        'enter_data' => \"Enter Data\",  // slight naming variation to not fully restrict enterdata method\n    );\n    protected $manage_permissions = array(\n        'design' => 'Design Form',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n//        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n//    public $codequality = 'beta';\n\n    static function displayname() {\n        return gt(\"Forms\");\n    }\n\n    static function description() {\n        return gt(\"Allows the creation of forms that can be emailed, or even viewed if they are optionally stored in the database\");\n    }\n\n    static function author() {\n        return \"Dave Leffler\";\n    }\n\n    static function isSearchable() {\n        return false;\n    }\n\n    function searchName() {\n        return gt(\"Forms\");\n    }\n\n    function searchCategory() {\n        return gt('Form Data');\n    }\n\n    static function requiresConfiguration()\n    {\n        return true;\n    }\n\n    public function showall() {\n        if ((!empty($this->config['unrestrict_view']) || expPermissions::check('viewdata', $this->loc))) {\n            expHistory::set('viewable', $this->params);\n            $f = null;\n            if (!empty($this->config)) {\n                $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            } elseif (!empty($this->params['title'])) {\n                $f = $this->forms->find('first', 'sef_url=\"' . expString::escape($this->params['title']) . '\"');\n                $this->get_defaults($f);\n            } elseif (!empty($this->params['id'])) {\n                $f = $this->forms->find('first', 'id=' . $this->params['id']);\n                $this->get_defaults($f);\n            }\n\n            if (!empty($f)) {\n                if (empty($this->config['report_filter']) && empty($this->params['filter'])) {  // allow for param of 'filter' also\n                    $where = '1';\n                } elseif (!empty($this->params['filter'])) {\n                    $where = expString::escape($this->params['filter']);\n                } else {\n                    $where = $this->config['report_filter'];\n                }\n                $fc = new forms_control();\n                if (empty($this->config['column_names_list'])) {\n                    //define some default columns...\n                    $controls = $fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0 AND is_static = 0', 'rank');\n                    if (!empty($this->params['view']) && $this->params['view'] == 'showall_portfolio') {\n                        foreach ($controls as $control) {  // we need to output all columns for portfolio view\n                            $this->config['column_names_list'][] = $control->name;\n                        }\n                    } else {\n                        foreach (array_slice($controls, 0, 5) as $control) {  // default to only first 5 columns\n                            $this->config['column_names_list'][] = $control->name;\n                        }\n                    }\n                }\n\n                // pre-process records\n                $items = $f->selectRecordsArray($where);\n                $columns = array();\n                foreach ($this->config['column_names_list'] as $column_name) {\n                    if ($column_name == \"ip\") {\n//                        $columns[gt('IP Address')] = 'ip';\n                        $columns['ip'] = gt('IP Address');\n                    } elseif ($column_name == \"referrer\") {\n//                        $columns[gt('Referrer')] = 'referrer';\n                        $columns['referrer'] = gt('Referrer');\n                    } elseif ($column_name == \"location_data\") {\n//                        $columns[gt('Entry Point')] = 'location_data';\n                        $columns['location_data'] = gt('Entry Point');\n                    } elseif ($column_name == \"user_id\") {\n                        foreach ($items as $key => $item) {\n                            if ($item[$column_name] != 0) {\n                                $locUser = user::getUserById($item[$column_name]);\n                                $item[$column_name] = $locUser->username;\n                            } else {\n                                $item[$column_name] = '';\n                            }\n                            $items[$key] = $item;\n                        }\n//                        $columns[gt('Posted by')] = 'user_id';\n                        $columns['user_id'] = gt('Posted by');\n                    } elseif ($column_name == \"timestamp\") {\n                        foreach ($items as $key => $item) {\n                            $item[$column_name] = strftime(DISPLAY_DATETIME_FORMAT, $item[$column_name]);\n                            $items[$key] = $item;\n                        }\n//                        $columns[gt('Timestamp')] = 'timestamp';\n                        $columns['timestamp'] = gt('Timestamp');\n                    } else {\n                        $control = $fc->find('first', \"name='\" . $column_name . \"' AND forms_id=\" . $f->id, 'rank');\n                        if ($control) {\n                            $ctl = expUnserialize($control->data);\n                            $control_type = get_class($ctl);\n                            foreach ($items as $key => $item) {\n                                //We have to add special sorting for date time columns!!!\n                                $item[$column_name] = @call_user_func(\n                                    array($control_type, 'templateFormat'),\n                                    $item[$column_name],\n                                    $ctl\n                                );\n                                $items[$key] = $item;\n                            }\n//                            $columns[$control->caption] = $column_name;\n                            $columns[$column_name] = $control->caption;\n                        }\n                    }\n                }\n\n                $page = new expPaginator(\n                    array(\n                        'records' => $items,\n                        'where' => 1,\n//                'limit'   => (isset($this->params['limit']) && $this->params['limit'] != '') ? $this->params['limit'] : 10,\n                        'order' => (isset($this->params['order']) && $this->params['order'] != '') ? $this->params['order'] : (!empty($this->config['order']) ? $this->config['order'] : 'id'),\n                        'dir' => (isset($this->params['dir']) && $this->params['dir'] != '') ? $this->params['dir'] : (!empty($this->config['dir']) ? $this->config['dir'] : 'ASC'),\n                        'page' => (isset($this->params['page']) ? $this->params['page'] : 1),\n                        'controller' => $this->baseclassname,\n                        'action' => $this->params['action'],\n                        'src' => $this->loc->src,\n                        'columns' => $columns\n                    )\n                );\n\n                assign_to_template(\n                    array(\n//                \"backlink\"    => expHistory::getLastNotEditable(),\n                        \"backlink\" => expHistory::getLast('viewable'),\n                        \"f\" => $f,\n                        \"page\" => $page,\n                        \"title\" => !empty($this->config['report_name']) ? $this->config['report_name'] : '',\n                        \"description\" => !empty($this->config['report_desc']) ? $this->config['report_desc'] : null,\n                        \"filtered\" => !empty($this->config['report_filter']) ? $this->config['report_filter'] : ''\n                    )\n                );\n            }\n        } else {\n            assign_to_template(array(\n                \"error\" => 1,\n            ));\n        }\n    }\n\n    public function show() {\n        if (!empty($this->config['unrestrict_view']) || expPermissions::check('viewdata', $this->loc)) {\n            expHistory::set('viewable', $this->params);\n            $f = null;\n            if (!empty($this->config)) {\n                $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            } elseif (!empty($this->params['forms_id'])) {\n                $f = $this->forms->find('first', 'id=' . $this->params['forms_id']);\n            } elseif (!empty($this->params['title'])) {\n                $f = $this->forms->find('first', 'sef_url=\"' . expString::escape($this->params['title']) . '\"');\n                redirect_to(array('controller' => 'forms', 'action' => 'enterdata', 'forms_id' => $f->id));\n            }\n\n            if (!empty($f)) {\n                $fc = new forms_control();\n                $controls = $fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0 AND is_static = 0', 'rank');\n                $id = !empty($this->params['id']) ? $this->params['id'] : null;\n                $data = $f->getRecord($id);\n\n                $fields = array();\n                $captions = array();\n                if ($controls && $data) {\n                    foreach ($controls as $c) {\n                        $ctl = expUnserialize($c->data);\n                        $control_type = get_class($ctl);\n                        $name = $c->name;\n                        $fields[$name] = call_user_func(array($control_type, 'templateFormat'), $data->$name, $ctl);\n                        $captions[$name] = $c->caption;\n                    }\n\n                    // system added fields\n                    $captions['ip'] = gt('IP Address');\n                    $captions['timestamp'] = gt('Timestamp');\n                    $captions['user_id'] = gt('Posted by');\n                    $fields['ip'] = $data->ip;\n                    $fields['timestamp'] = strftime(DISPLAY_DATETIME_FORMAT, $data->timestamp);\n                    $locUser = user::getUserById($data->user_id);\n                    $fields['user_id'] = !empty($locUser->username) ? $locUser->username : '';\n\n                    // add a browse other records (next/prev) feature here\n                    $field = !empty($this->config['order']) ? $this->config['order'] : 'id';\n                    $data->next = $f->getRecord($field . ' > ' . $data->$field . ' ORDER BY ' . $field);\n                    if (!empty($data->next) && $data->next != $data->id) {\n                        assign_to_template(\n                            array(\n                                \"next\" => $data->next,\n                            )\n                        );\n                    }\n                    $data->prev = $f->getRecord($field . ' < ' . $data->$field . ' ORDER BY ' . $field . ' DESC');\n                    if (!empty($data->prev) && $data->prev != $data->id) {\n                        assign_to_template(\n                            array(\n                                \"prev\" => $data->prev,\n                            )\n                        );\n                    }\n                }\n\n                $count = $f->countRecords();\n                assign_to_template(\n                    array(\n                        //            \"backlink\"=>expHistory::getLastNotEditable(),\n    //                'backlink'    => expHistory::getLast('editable'),\n                        'backlink' => makeLink(expHistory::getBack(1)),\n                        \"f\" => $f,\n    //                \"record_id\"   => $this->params['id'],\n                        \"record_id\" => !empty($data->id) ? $data->id : null,\n                        \"title\" => !empty($this->config['report_name']) ? $this->config['report_name'] : gt(\n                            'Viewing Record'\n                        ),\n                        \"description\" => !empty($this->config['report_desc']) ? $this->config['report_desc'] : null,\n                        'fields' => $fields,\n                        'captions' => $captions,\n                        \"count\"       => $count,\n                        'is_email' => 0,\n                        \"css\" => file_get_contents(BASE . \"framework/core/assets/css/tables.css\"),\n                    )\n                );\n            }\n        } else {\n            assign_to_template(array(\n                \"error\" => 1,\n            ));\n        }\n    }\n\n    public function enter_data() {\n        $this->enterdata();\n    }\n\n    public function enterdata() {\n        if (empty($this->config['restrict_enter']) || expPermissions::check('enter_data', $this->loc)) {\n\n            global $user;\n\n            expHistory::set('viewable', $this->params);\n            $f = null;\n            if (!empty($this->config)) {\n                $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            } elseif (!empty($this->params['forms_id'])) {\n                $f = $this->forms->find('first', 'id=' . $this->params['forms_id']);\n                $this->get_defaults($f);\n            }\n\n            if (!empty($f)) {\n                $form = new form();\n                $form->id = $f->sef_url;\n                $form->horizontal = !empty($this->config['style']);\n                if (!empty($this->params['id'])) {\n                    $fc = new forms_control();\n                    $controls = $fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly = 0 AND is_static = 0','rank');\n                    $data = $f->getRecord($this->params['id']);\n                } else {\n                    if (!empty($f->forms_control)) {\n                        $controls = $f->forms_control;\n                    } else {\n                        $controls = array();\n                    }\n                    $data = expSession::get('forms_data_' . $f->id);\n                }\n                // display list of email addresses\n                if (!empty($this->config['select_email'])) {\n                    //Building Email List...\n                    $emaillist = array();\n                    if (!empty($this->config['user_list'])) foreach ($this->config['user_list'] as $c) {\n                        $u = user::getUserById($c);\n                        if (!empty($u->email)) {\n                            if (!empty($u->firstname) || !empty($u->lastname)) {\n                                $title = $u->firstname . ' ' . $u->lastname . ' ('. $u->email . ')';\n                            } else {\n                                $title = $u->username . ' ('. $u->email . ')';\n                            }\n                            $emaillist[$u->email] = $title;\n                        }\n                    }\n                    if (!empty($this->config['group_list'])) foreach ($this->config['group_list'] as $c) {\n//                        $grpusers = group::getUsersInGroup($c);\n//                        foreach ($grpusers as $u) {\n//                            $emaillist[] = $u->email;\n//                        }\n                        $g = group::getGroupById($c);\n                        $emaillist[$c] = $g->name;\n                    }\n                    if (!empty($this->config['address_list'])) foreach ($this->config['address_list'] as $c) {\n                        $emaillist[$c] = $c;\n                    }\n                    //This is an easy way to remove duplicates\n                    $emaillist = array_flip(array_flip($emaillist));\n                    $emaillist = array_map('trim', $emaillist);\n                    $emaillist = array_reverse($emaillist, true);\n                    if (empty($this->config['select_exclude_all']))\n                        $emaillist[0] = gt('All Addresses');\n                    $emaillist = array_reverse($emaillist, true);\n                    if (!empty($this->config['select_dropdown']))\n                        $form->register('email_dest', gt('Send Response to'), new dropdowncontrol('', $emaillist));\n                    else\n                        $form->register('email_dest', gt('Send Response to'), new radiogroupcontrol('', $emaillist));\n                }\n//                $paged = false;\n                foreach ($controls as $key=>$c) {\n                    $ctl = expUnserialize($c->data);\n                    $ctl->_id = $c->id;\n                    $ctl->_readonly = $c->is_readonly;\n                    $ctl->_ishidden = !empty($ctl->is_hidden) && empty($this->params['id']);  // hide it if entering new data\n                    if (!empty($this->params['id'])) {\n                        if ($c->is_readonly == 0) {\n                            $name = $c->name;\n                            if ($c->is_static == 0) {\n                                $ctl->default = $data->$name;\n                            }\n                        }\n                    } else {\n                        if (!empty($data[$c->name])) $ctl->default = $data[$c->name];\n                    }\n                    if ($key == 0) $ctl->focus = true;  // first control gets the focus\n                    $form->register($c->name, $c->caption, $ctl);\n//                    if (get_class($ctl) == 'pagecontrol') $paged = true;\n                }\n\n                // if we are editing an existing record we'll need to do recaptcha here since we won't call confirm_data\n                if (!empty($this->params['id'])) {\n                    $antispam = '';\n                    if (SITE_USE_ANTI_SPAM && ANTI_SPAM_CONTROL == 'recaptcha') {\n                        // make sure we have the proper config.\n                        if (!defined('RECAPTCHA_PUB_KEY')) {\n                            $antispam .= '<h2 style=\"color:red\">' . gt('reCaptcha configuration is missing the public key.') . '</h2>';\n                        }\n                        if ($user->isLoggedIn() && ANTI_SPAM_USERS_SKIP == 1) {\n                            // skip it for logged on users based on config\n                        } else {\n                            // include the library and show the form control\n//                            require_once(BASE . 'external/ReCaptcha/autoload.php');  //FIXME not sure we need this here\n                            $re_theme = (RECAPTCHA_THEME == 'dark') ? 'dark' : 'light';\n                            $antispam .= '<input type=\"hidden\" class=\"hiddenRecaptcha required\" name=\"hiddenRecaptcha\" id=\"hiddenRecaptcha\">';\n                            //create unique recaptcha blocks\n                            $randomNumber = mt_rand(10000000, 99999999);\n                            $antispam .= '<div class=\"g-recaptcha\" id=\"recaptcha-block-'.$randomNumber.'\" data-sitekey=\"' . RECAPTCHA_PUB_KEY . '\" data-theme=\"' . $re_theme . '\"></div>';\n//                            $antispam .= '<script type=\"text/javascript\" src=\"https://www.google.com/recaptcha/api.js?onload=myCallBack&render=explicit&hl=' . LOCALE . '\" async defer></script>';\n                            $antispam .= '<p>' . gt('Fill out the above security question to submit your form.') . '</p>';\n                        }\n                        $content = \"\n                            var captcha;\n                            var myCallBack = function() {\n                                var recaptchas = document.querySelectorAll('div[id^=recaptcha-block-]');\n                                for (i = 0; i < recaptchas.length; i++) {\n                                    captcha = grecaptcha.render(recaptchas[i].id, {\n                                      'sitekey' : '\" . RECAPTCHA_PUB_KEY . \"',\n                                      'theme'   : '\" . $re_theme . \"'\n                                    });\n                                }\n                            };\";\n                        expJavascript::pushToFoot(array(\n                            \"unique\"=>'recaptcha',\n                            \"content\"=>$content,\n                            \"src\"=>\"https://www.google.com/recaptcha/api.js?onload=myCallBack&render=explicit&hl=\" . LOCALE\n                         ));                    }\n                    $form->register(uniqid(''), '', new htmlcontrol($antispam));\n                }\n\n                if (empty($this->config['submitbtn'])) $this->config['submitbtn'] = gt('Submit');\n                if (!empty($this->params['id'])) {\n                    $cancel = gt('Cancel');\n                    $form->meta('action', 'submit_data');\n                    $form->meta('isedit', 1);\n                    $form->meta('data_id', $data->id);\n                    $form->location($this->loc);\n                    assign_to_template(array(\n                        'edit_mode' => 1,\n                    ));\n                } else {\n                    $cancel = '';\n                    $form->meta(\"action\", \"confirm_data\");\n                }\n                if (empty($this->config['submitbtn'])) $this->config['submitbtn'] = gt('Submit');\n                if (empty($this->config['resetbtn'])) $this->config['resetbtn'] = '';\n                $form->register(\"submit\", \"\", new buttongroupcontrol($this->config['submitbtn'], $this->config['resetbtn'], $cancel, 'finish'));\n\n                $form->meta(\"m\", $this->loc->mod);\n                $form->meta(\"s\", $this->loc->src);\n                $form->meta(\"i\", $this->loc->int);\n                $form->meta(\"id\", $f->id);\n                $formmsg = '';\n                $form->location(expCore::makeLocation(\"forms\", $this->loc->src, $this->loc->int));\n                if (count($controls) == 0) {\n                    $form->controls['submit']->disabled = true;\n                    $formmsg .= gt('This form is blank. Select \"Design Form\" to add input fields.') . '<br>';\n                } elseif (empty($f->is_saved) && empty($this->config['is_email'])) {\n                    $form->controls['submit']->disabled = true;\n                    $formmsg .= gt('There are no actions assigned to this form. Select \"Configure Settings\" then either select \"Email Form Data\" and/or \"Save Submissions to Database\".');\n                }\n                $count = $f->countRecords();\n                if ($formmsg) {\n                    flash('notice', $formmsg);\n                }\n                if (empty($this->config['description'])) $this->config['description'] = '';\n                assign_to_template(array(\n                    \"description\" => $this->config['description'],\n                    \"form_html\"   => $form->toHTML(),\n                    \"form\"        => $f,\n                    \"count\"       => $count,\n//                    'paged'       => $paged,\n                ));\n            }\n        } else {\n            assign_to_template(array(\n                \"error\" => 1,\n            ));\n        }\n    }\n\n    public function confirm_data() {\n        $f = new forms($this->params['id']);\n        $cols = $f->forms_control;\n        $counts = array();\n        $responses = array();\n        $captions = array();\n\n        foreach ($cols as $col) {\n            $newupload = false;\n            $coldef = expUnserialize($col->data);\n            $coldata = new ReflectionClass($coldef);\n            if (empty($coldef->is_hidden)) {\n                $coltype = $coldata->getName();\n                if ($coltype == 'uploadcontrol' && !empty($_FILES)) {\n                    $newupload = true;\n                    $value = call_user_func(array($coltype, 'parseData'), $col->name, $_FILES, true);\n                } else {\n                    $value = call_user_func(array($coltype, 'parseData'), $col->name, $this->params, true);\n                }\n                $value = call_user_func(array($coltype, 'templateFormat'), $value, $coldef);  // convert parsed value to user readable\n                //eDebug($value);\n//                $counts[$col->caption] = isset($counts[$col->caption]) ? $counts[$col->caption] + 1 : 1;\n//                $num = $counts[$col->caption] > 1 ? $counts[$col->caption] : '';\n\n                if (!empty($this->params[$col->name])) {\n//                if ($coltype == 'checkboxcontrol') {\n//                    $responses[$col->caption . $num] = gt('Yes');\n//                } else {\n//                    $responses[$col->caption . $num] = $value;\n                    $responses[$col->name] = $value;\n                    $captions[$col->name] = $col->caption;\n//                }\n                } else {\n                    if ($coltype == 'checkboxcontrol') {\n//                        $responses[$col->caption . $num] = gt('No');\n                        $responses[$col->name] = gt('No');\n                        $captions[$col->name] = $col->caption;\n                    } elseif ($coltype == 'datetimecontrol' || $coltype == 'calendarcontrol' || $coltype == 'popupdatetimecontrol') {\n//                        $responses[$col->name] = $value;\n                        $responses[$col->name] = $value;\n                        $captions[$col->name] = $col->caption;\n                    } elseif ($coltype == 'uploadcontrol') {\n                        if ($newupload) {\n                            $newfile = call_user_func(\n                                    array($coltype, 'moveFile'),\n                                    $col->name,\n                                    $_FILES,\n                                    true\n                                );\n                            if (!empty($newfile)) {\n                                $this->params[$col->name] = PATH_RELATIVE . $newfile;\n                            } else {\n                                $this->params[$col->name] = \"\";\n                            }\n                        }\n                        //            $value = call_user_func(array($coltype,'buildDownloadLink'),$this->params[$col->name],$_FILES[$col->name]['name'],true);\n                        //eDebug($value);\n//                        $responses[$col->caption . $num] = $_FILES[$col->name]['name'];\n//                        $responses[$col->name] = $_FILES[$col->name]['name'];\n//                        $responses[$col->name] = $this->params[$col->name];\n                        $responses[$col->name] = call_user_func(array($coltype, 'templateFormat'), $this->params[$col->name], null);  // convert parsed value to user readable\n                        $captions[$col->name] = $col->caption;\n                    } elseif ($coltype != 'htmlcontrol' && $coltype != 'pagecontrol') {\n//                        $responses[$col->caption . $num] = '';\n                        $responses[$col->name] = '';\n                        $captions[$col->name] = $col->caption;\n                    }\n                }\n            }\n        }\n\n        // remove some post data we don't want to pass thru to the form\n        unset(\n            $this->params['controller'],\n            $this->params['action'],\n            $this->params['view']\n        );\n        foreach ($this->params as $k => $v) {\n        //    $this->params[$k]=htmlentities(htmlspecialchars($v,ENT_COMPAT,LANG_CHARSET));\n            $this->params[$k] = htmlspecialchars($v, ENT_COMPAT, LANG_CHARSET);\n        }\n        expSession::set('forms_data_' . $this->params['id'], $this->params);\n\n        assign_to_template(array(\n            'responses'       => $responses,\n            'captions'        => $captions,\n            'postdata'        => $this->params,\n        ));\n    }\n\n    public function submit_data() {\n        // Check for form errors\n        $this->params['manual_redirect'] = true;\n        if (!expValidator::check_antispam($this->params)) {\n            flash('error', gt('Security Validation Failed'));\n            expHistory::back();\n        }\n\n        global $db, $user;\n        $f = new forms($this->params['id']);\n        $fc = new forms_control();\n        $controls = $fc->find('all', \"forms_id=\" . $f->id . \" AND is_readonly=0\",'rank');\n        $this->get_defaults($f);\n\n        $db_data = new stdClass();\n        $emailFields = array();\n        $captions = array();\n        $attachments = array();\n        foreach ($controls as $c) {\n            $ctl = expUnserialize($c->data);\n            $control_type = get_class($ctl);\n            $def = call_user_func(array($control_type, \"getFieldDefinition\"));\n            if ($def != null) {\n                $emailValue = htmlspecialchars_decode(call_user_func(array($control_type, 'parseData'), $c->name, $this->params, true));\n                $value = stripslashes(expString::escape($emailValue));\n\n                //eDebug($value);\n                $varname = $c->name;\n                $db_data->$varname = $value;\n        //        $fields[$c->name] = call_user_func(array($control_type,'templateFormat'),$value,$ctl);\n                if (!$ctl->is_hidden) {\n                    $emailFields[$c->name] = call_user_func(array($control_type, 'templateFormat'), $value, $ctl);\n                    $captions[$c->name] = $c->caption;\n                    if (strtolower($c->name) == \"email\" && expValidator::isValidEmail($value)) {\n                        $from = $value;\n                    }\n                    if (strtolower($c->name) == \"name\") {\n                        $from_name = $value;\n                    }\n                    if (get_class($ctl) == 'uploadcontrol') {\n                        $attachments[] = htmlspecialchars_decode($this->params[$c->name]);\n                    }\n                }\n            }\n        }\n\n        if (!isset($this->params['data_id']) || (isset($this->params['data_id']) && expPermissions::check(\"editdata\", $f->loc))) {\n            if (!empty($f->is_saved)) {\n                if (isset($this->params['data_id'])) {\n                    //if this is an edit we remove the record and insert a new one.\n                    $olddata = $f->getRecord($this->params['data_id']);\n                    $db_data->ip = $olddata->ip;\n                    $db_data->user_id = $olddata->user_id;\n                    $db_data->timestamp = $olddata->timestamp;\n                    $db_data->referrer = $olddata->referrer;\n                    $db_data->location_data = $olddata->location_data;\n                    $f->deleteRecord($this->params['data_id']);\n                } else {\n                    $db_data->ip = $_SERVER['REMOTE_ADDR'];\n                    if (expSession::loggedIn()) {\n                        $db_data->user_id = $user->id;\n                        $from = $user->email;\n                        $from_name = $user->firstname . \" \" . $user->lastname . \" (\" . $user->username . \")\";\n                    } else {\n                        $db_data->user_id = 0;\n                    }\n                    $db_data->timestamp = time();\n                    $referrer = $db->selectValue(\"sessionticket\", \"referrer\", \"ticket = '\" . expSession::getTicketString() . \"'\");\n                    $db_data->referrer = $referrer;\n                    $location_data = null;\n                    if (!empty($this->params['src'])) {\n                        $mod = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n                        expCore::makeLocation($mod,$this->params['src'],$this->params['int']);\n                    }\n                    $db_data->location_data = $location_data;\n                }\n                $f->insertRecord($db_data);\n            } else {\n                $referrer = $db->selectValue(\"sessionticket\", \"referrer\", \"ticket = '\" . expSession::getTicketString() . \"'\");\n            }\n\n            //Email stuff here...\n            //Don't send email if this is an edit.\n            if (!empty($this->config['is_email']) && !isset($this->params['data_id'])) {\n                //Building Email List...\n                $emaillist = array();\n                if (!empty($this->config['select_email']) && !empty($this->params['email_dest'])) {\n                    if (strval(intval($this->params['email_dest'])) == strval($this->params['email_dest'])) {\n                        foreach (group::getUsersInGroup($this->params['email_dest']) as $locUser) {\n                            if ($locUser->email != '') $emaillist[$locUser->email] = trim(user::getUserAttribution($locUser->id));\n                        }\n                    } else {\n                        $emaillist[] = $this->params['email_dest'];\n                    }\n                } else { // send to all form addressee's\n                    $emaillist = array();\n                    if (!empty($this->config['user_list'])) foreach ($this->config['user_list'] as $c) {\n                        $u = user::getUserById($c);\n                        $emaillist[$u->email] = trim(user::getUserAttribution($u->id));\n                    }\n                    if (!empty($this->config['group_list'])) foreach ($this->config['group_list'] as $c) {\n                        $grpusers = group::getUsersInGroup($c);\n                        foreach ($grpusers as $u) {\n                            $emaillist[$u->email] = trim(user::getUserAttribution($u->id));\n                        }\n                    }\n                    if (!empty($this->config['address_list'])) foreach ($this->config['address_list'] as $c) {\n                        $emaillist[] = $c;\n                    }\n                }\n                //This is an easy way to remove duplicates\n                $emaillist = array_flip(array_flip($emaillist));\n                $emaillist = array_map('trim', $emaillist);\n\n                if (empty($this->config['report_def'])) {\n                    $msgtemplate = expTemplate::get_template_for_action($this, 'email/default_report', $this->loc);\n\n                } else {\n                    $msgtemplate = expTemplate::get_template_for_action($this, 'email/custom_report', $this->loc);\n                    $msgtemplate->assign('template', $this->config['report_def']);\n                }\n                $msgtemplate->assign(\"fields\", $emailFields);\n                $msgtemplate->assign(\"captions\", $captions);\n                $msgtemplate->assign('title', $this->config['report_name']);\n                $msgtemplate->assign(\"is_email\", 1);\n                if (!empty($referrer)) $msgtemplate->assign(\"referrer\", $referrer);\n//                $emailText = $msgtemplate->render();\n//                $emailText = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $emailText)));\n                $msgtemplate->assign(\"css\", file_get_contents(BASE . \"framework/core/assets/css/tables.css\"));\n                $emailHtml = $msgtemplate->render();\n\n                if (empty($from)) {\n                    $from = trim(SMTP_FROMADDRESS);\n                }\n                if (empty($from_name)) {\n                    $from_name = trim(ORGANIZATION_NAME);\n                }\n                // $headers = array(\n                // \"MIME-Version\"=>\"1.0\",\n                // \"Content-type\"=>\"text/html; charset=\".LANG_CHARSET\n                // );\n                if (count($emaillist)) {\n                    $mail = new expMail();\n                    if (!empty($attachments)) {\n                        foreach ($attachments as $attachment) {\n                            if (!empty($attachment)) {\n                                if (strlen(PATH_RELATIVE) != 1)\n                                    $attachment = expFile::fixName(str_replace(PATH_RELATIVE, '', $attachment));  // strip relative path for links coming from templates\n                                if (file_exists(BASE . $attachment)) {\n//                                $relpath = str_replace(PATH_RELATIVE, '', BASE);\n//                            $finfo = finfo_open(FILEINFO_MIME_TYPE);\n//                            $ftype = finfo_file($finfo, $relpath . $attachment);\n//                            finfo_close($finfo);\n                                    $mail->attach_file_on_disk(BASE . $attachment, expFile::getMimeType($attachment));\n                                }\n                            }\n                        }\n                    }\n                    $mail->quickSend(array(\n                        //\t'headers'=>$headers,\n                        'html_message' => $emailHtml,\n//                        \"text_message\" => $emailText,\n                        \"text_message\" => expString::html2text($emailHtml),\n                        'to'           => $emaillist,\n                        'from'         => array(trim($from) => $from_name),\n                        'subject'      => $this->config['subject'],\n                    ));\n                }\n            }\n\n            if (!empty($this->config['is_auto_respond']) && !isset($this->params['data_id']) && !empty($db_data->email)) {\n                if (empty($from)) {\n                    $from = trim(SMTP_FROMADDRESS);\n                }\n                if (empty($from_name)) {\n                    $from_name = trim(ORGANIZATION_NAME);\n                }\n//                $headers = array(\n//                    \"MIME-Version\" => \"1.0\",\n//                    \"Content-type\" => \"text/html; charset=\" . LANG_CHARSET\n//                );\n\n//                $tmsg = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $this->config['auto_respond_body'])));\n//                if ($this->config['auto_respond_form'])\n//                    $tmsg .= \"\\n\" . $emailText;\n                $hmsg = $this->config['auto_respond_body'];\n                if (!empty($this->config['auto_respond_form']))\n                    $hmsg .= \"\\n\" . $emailHtml;\n                $mail = new expMail();\n                $mail->quickSend(array(\n//                    'headers'      => $headers,\n//                    \"text_message\" => $tmsg,\n                    'html_message' => $hmsg,\n                    \"text_message\" => expString::html2text($hmsg),\n                    'to'           => $db_data->email,\n                    'from'         => array(trim($from) => $from_name),\n                    'subject'      => $this->config['auto_respond_subject'],\n                ));\n            }\n\n            // clear the users post data from the session.\n            expSession::un_set('forms_data_' . $f->id);\n\n            //If is a new post show response, otherwise redirect to the flow.\n            if (!isset($this->params['data_id'])) {\n                if (empty($this->config['response'])) $this->config['response'] = gt('Thanks for your submission');\n                assign_to_template(array(\n                    \"backlink\"=>expHistory::getLastNotEditable(),\n                    \"response_html\"=>$this->config['response'],\n                ));\n            } else {\n                flash('message', gt('Record was updated!'));\n        //        expHistory::back();\n                expHistory::returnTo('editable');\n            }\n        }\n    }\n\n    /**\n     * delete item in saved data\n     *\n     */\n    function delete() {\n        if (empty($this->params['id']) || empty($this->params['forms_id'])) {\n            flash('error', gt('Missing id for the') . ' ' . gt('item') . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $f = new forms($this->params['forms_id']);\n        $f->deleteRecord($this->params['id']);\n\n        expHistory::back();\n    }\n\n    /**\n     * delete all items in saved data\n     *\n     */\n    function delete_records() {\n        if (empty($this->params['forms_id'])) {\n            flash('error', gt('Missing id for the') . ' ' . gt('form records') . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $f = new forms($this->params['forms_id']);\n        $recs = $f->getRecords();\n        foreach ($recs as $rec) {\n            $f->deleteRecord($rec->id);\n        }\n\n        flash('message', gt('All form records were deleted!'));\n        expHistory::back();\n    }\n\n    /**\n     * Manage site forms\n     *\n     */\n    public function manage() {\n        expHistory::set('manageable', $this->params);\n        $forms = $this->forms->find('all', 1);\n        foreach($forms as $key=>$f) {\n            if (!empty($f->table_name) && $f->tableExists() ) {\n                $forms[$key]->count = $f->countRecords();\n            }\n            $forms[$key]->control_count = count($f->forms_control);\n        }\n\n        assign_to_template(array(\n            'select' => !empty($this->params['select']),\n            'forms' => $forms\n        ));\n    }\n\n    /**\n     * Assign selected form to current module\n     *\n     */\n    public function activate() {\n        // assign new form assigned\n        $this->config['forms_id'] = $this->params['id'];\n        // set default settings for this form\n        $f = new forms($this->params['id']);\n        if (!empty($f->description)) $this->config['description'] = $f->description;\n        if (!empty($f->response)) $this->config['response'] = $f->response;\n        if (!empty($f->report_name)) $this->config['report_name'] = $f->report_name;\n        if (!empty($f->report_desc)) $this->config['report_desc'] = $f->report_desc;\n        if (!empty($f->column_names_list)) $this->config['column_names_list'] = $f->column_names_list;\n        if (!empty($f->report_def)) $this->config['report_def'] = $f->report_def;\n\n        // setup and save the config\n        $config = new expConfig($this->loc);\n        $config->update(array('config' => $this->config));\n\n        expHistory::back();\n    }\n\n    public function edit_form() {\n        expHistory::set('editable', $this->params);\n        if (!empty($this->params['id'])) {\n            $f = $this->forms->find('first', 'id=' . $this->params['id']);\n        } else {\n            $f = new forms();\n        }\n        $fields = array();\n        $column_names = array();\n        $cols = array();\n\n        if (!empty($f->column_names_list)) {\n            $cols = explode('|!|', $f->column_names_list);\n        }\n        $fc = new forms_control();\n        foreach ($fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0','rank') as $control) {\n            $ctl = expUnserialize($control->data);\n            $control_type = get_class($ctl);\n            $def = call_user_func(array($control_type, 'getFieldDefinition'));\n            if ($def != null) {\n                $fields[$control->name] = $control->caption;\n                if (in_array($control->name, $cols)) {\n                    $column_names[$control->name] = $control->caption;\n                }\n            }\n        }\n        $fields['ip'] = gt('IP Address');\n        if (in_array('ip', $cols)) $column_names['ip'] = gt('IP Address');\n        $fields['user_id'] = gt('Posted by');\n        if (in_array('user_id', $cols)) $column_names['user_id'] = gt('Posted by');\n        $fields['timestamp'] = gt('Timestamp');\n        if (in_array('timestamp', $cols)) $column_names['timestamp'] = gt('Timestamp');\n//        if (in_array('location_data', $cols)) $column_names['location_data'] = gt('Entry Point');\n\n        if (!empty($this->params['copy'])) {\n            $f->old_id = $f->id;\n            $f->id = null;\n            $f->sef_url = null;\n            $f->is_saved = false;\n            $f->table_name = null;\n        }\n        $fieldlist = '[';\n        if (isset($f->id)) {\n            $fc = new forms_control();\n            foreach ($fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0','rank') as $control) {\n                $ctl = expUnserialize($control->data);\n                $control_type = get_class($ctl);\n                $def = call_user_func(array($control_type, 'getFieldDefinition'));\n                if ($def != null) {\n                    $fields[$control->name] = $control->caption;\n                    if (in_array($control->name, $cols)) {\n                        $column_names[$control->name] = $control->caption;\n                    }\n                }\n                if ($control_type != 'pagecontrol' && $control_type != 'htmlcontrol') {\n                    $fieldlist .= '[\"{\\$fields[\\'' . $control->name . '\\']}\",\"' . $control->caption . '\",\"' . gt('Insert') . ' ' . $control->caption . ' ' . gt('Field') . '\"],';\n                }\n            }\n            $fields['ip'] = gt('IP Address');\n            if (in_array('ip', $cols)) $column_names['ip'] = gt('IP Address');\n            $fields['user_id'] = gt('Posted by');\n            if (in_array('user_id', $cols)) $column_names['user_id'] = gt('Posted by');\n            $fields['timestamp'] = gt('Timestamp');\n            if (in_array('timestamp', $cols)) $column_names['timestamp'] = gt('Timestamp');\n//            if (in_array('location_data', $cols)) $column_names['location_data'] = gt('Entry Point');\n        }\n        $fieldlist .= ']';\n\n        assign_to_template(array(\n            'column_names' => $column_names,\n            'fields'       => $fields,\n            'form'         => $f,\n            'fieldlist'    => $fieldlist,\n        ));\n    }\n\n    /**\n     * Updates the form\n     */\n    public function update_form() {\n        $this->forms->update($this->params);\n        if (!empty($this->params['old_id'])) {\n            // copy all the controls to the new form\n            $fc = new forms_control();\n            $controls = $fc->find('all','forms_id='.$this->params['old_id'],'rank');\n            foreach ($controls as $control) {\n                $control->id = null;\n                $control->forms_id = $this->forms->id;\n                $control->update();\n            }\n        }\n//        if (!empty($this->params['is_saved']) && empty($this->params['table_name'])) {\n        if (!empty($this->params['is_saved'])) {\n            // we are now saving data to the database and need to create it first\n//            $form = new forms($this->params['id']);\n            $this->params['table_name'] = $this->forms->updateTable();\n//            $this->params['_validate'] = false;  // we don't want a check for unique sef_name\n//            parent::update();  // now with a form tablename\n        }\n        expHistory::back();\n    }\n\n    public function delete_form() {\n        expHistory::set('editable', $this->params);\n        $modelname = $this->basemodel_name;\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the') . ' ' . $modelname . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n        $form = new $modelname($this->params['id']);\n\n        $form->delete();\n        expHistory::returnTo('manageable');\n    }\n\n    public function design_form() {\n        if (!empty($this->params['id'])) {\n            expHistory::set('editable', $this->params);\n            $f = new forms($this->params['id']);\n            $controls = $f->forms_control;\n\n            $form = new fakeform();\n            $form->horizontal = !empty($this->config['style']) ? $this->config['style'] : false;\n            if (isset($this->params['style']))\n                $form->horizontal = $this->params['style'];\n            foreach ($controls as $c) {\n                $ctl = expUnserialize($c->data);\n                $ctl->_id = $c->id;\n                $ctl->_readonly = $c->is_readonly;\n                $ctl->_controltype = get_class($ctl);\n                $form->register($c->name, $c->caption, $ctl);\n            }\n\n            $types = expTemplate::listControlTypes();\n            $types[\".break\"] = gt('Static - Spacer');\n            $types[\".line\"] = gt('Static - Horizontal Line');\n            uasort($types, \"strnatcmp\");\n            if (!bs3())\n                array_unshift($types, '[' . gt('Please Select' . ']'));\n\n            $forms_list = array();\n            $forms = $f->find('all', 1);\n            if (!empty($forms)) foreach ($forms as $frm) {\n                if ($frm->id != $f->id)\n                    $forms_list[$frm->id] = $frm->title;\n            }\n\n            assign_to_template(array(\n                'form'       => $f,\n                'forms_list' => $forms_list,\n                'form_html'  => $form->toHTML($f->id),\n                'backlink'   => expHistory::getLastNotEditable(),\n                'types'      => $types,\n                'style'      => $form->horizontal\n            ));\n        }\n    }\n\n    public function edit_control() {\n        $f = new forms($this->params['forms_id']);\n        if ($f) {\n            if (bs2()) {\n                expCSS::pushToHead(array(\n                    \"corecss\"=>\"forms-bootstrap\"\n                ));\n            } elseif (bs3()) {\n                expCSS::pushToHead(array(\n                    \"corecss\"=>\"forms-bootstrap3\"\n                ));\n            } else {\n                expCSS::pushToHead(array(\n                    \"corecss\" => \"forms\",\n                ));\n            }\n\n            if (isset($this->params['control_type']) && $this->params['control_type']{0} == \".\") {\n                // there is nothing to edit for these type controls, so add it then return\n                $htmlctl = new htmlcontrol();\n                $htmlctl->identifier = uniqid(\"\");\n                $htmlctl->caption = \"\";\n                if (!empty($this->params['rank']))\n                    $htmlctl->rank = $this->params['rank'];\n                switch ($this->params['control_type']) {\n                    case \".break\":\n                        $htmlctl->html = \"<br />\";\n                        break;\n                    case \".line\":\n                        $htmlctl->html = \"<hr size='1' />\";\n                        break;\n                }\n                $ctl = new forms_control();\n                $ctl->name = uniqid(\"\");\n                $ctl->caption = \"\";\n                $ctl->data = serialize($htmlctl);\n                $ctl->forms_id = $f->id;\n                $ctl->is_readonly = 1;\n                if (!empty($this->params['rank']))\n                    $ctl->rank = $this->params['rank'];\n                $ctl->update();\n                if (!expJavascript::inAjaxAction())\n                    expHistory::returnTo('editable');\n                else { // we need a graceful exit for inAjaxAction\n                    assign_to_template(array(\n                        'form_html' => ucfirst(substr($this->params['control_type'],1)) . ' ' . gt('control was added to form') . '<input type=\"hidden\" name=\"staticcontrol\" id=\"'.$ctl->id.'\" />',\n                        'type'      => 'static',\n                    ));\n                }\n            } else {\n                $control_type = \"\";\n                $ctl = null;\n                if (isset($this->params['id'])) {\n                    $control = new forms_control($this->params['id']);\n                    if ($control) {\n                        $ctl = expUnserialize($control->data);\n                        $ctl->identifier = $control->name;\n                        $ctl->caption = $control->caption;\n                        $ctl->id = $control->id;\n                        $control_type = get_class($ctl);\n                        $f->id = $control->forms_id;\n                    }\n                }\n                if ($control_type == \"\") $control_type = $this->params['control_type'];\n                $form = call_user_func(array($control_type, \"form\"), $ctl);\n                $form->location($this->loc);\n                if ($ctl) {\n                    if (isset($form->controls['identifier']->disabled)) $form->controls['identifier']->disabled = true;\n                    $form->meta(\"id\", $ctl->id);\n                    $form->meta(\"identifier\", $ctl->identifier);\n                }\n                $form->meta(\"action\", \"save_control\");\n//                $form->meta('control_type', $control_type);\n                $form->meta('forms_id', $f->id);\n                $types = expTemplate::listControlTypes();\n                $othertypes = expTemplate::listSimilarControlTypes($control_type);\n                if (count($othertypes) > 1) {\n                    $otherlist = new dropdowncontrol($control_type,$othertypes);\n                    $form->registerBefore('identifier','control_type',gt('Control Type'),$otherlist);\n                } else {\n                    $form->registerBefore('identifier','control_type',gt('Control Type'),new genericcontrol('hidden',$control_type));\n                }\n                assign_to_template(array(\n                    'form_html' => $form->toHTML(),\n                    'type'      => $types[$control_type],\n                    'is_edit'   => ($ctl == null ? 0 : 1),\n                ));\n            }\n        }\n    }\n\n    public function save_control() {\n        $f = new forms($this->params['forms_id']);\n        if ($f) {\n            $ctl = null;\n            $control = null;\n            // get previous data from existing control\n            if (isset($this->params['id'])) {\n                $control = new forms_control($this->params['id']);\n                if ($control) {\n                    $ctl = expUnserialize($control->data);\n                    $ctl->identifier = $control->name;\n                    $ctl->caption = $control->caption;\n                }\n            } else {\n                $control = new forms_control();\n            }\n\n            // update control with data from form\n//            $ctl1 = new $this->params['control_type']();\n//            $ctl1 = expCore::cast($ctl1,$ctl);\n            if (!empty($ctl)) {\n                $ctl1 = expCore::cast($ctl,$this->params['control_type']);\n            } else {\n                $ctl1 = $ctl;\n            }\n            if (call_user_func(array($this->params['control_type'], 'useGeneric')) == true) {\n                $ctl1 = call_user_func(array('genericcontrol', 'update'), $this->params, $ctl1);\n            } else {\n                $ctl1 = call_user_func(array($this->params['control_type'], 'update'), $this->params, $ctl1);\n            }\n            if (!empty($this->params['rank']))\n                $ctl1->rank = $this->params['rank'];\n\n            //lets make sure the name submitted by the user is not a duplicate. if so we will fail back to the form\n            if (!empty($control->id)) {\n                //FIXME change this to an expValidator call\n                $check = $control->getControl('name=\"' . $ctl1->identifier . '\" AND forms_id=' . $f->id . ' AND id != ' . $control->id);\n                if (!empty($check) && empty($this->params['id'])) {\n                    //expValidator::failAndReturnToForm(gt('A field with the same name already exists for this form'), $_$this->params\n                    flash('error', gt('A field by the name\").\" \"' . $ctl1->identifier . '\" \".gt(\"already exists on this form'));\n                    expHistory::returnTo('editable');\n                }\n            }\n\n            if ($ctl1 != null) {\n                $name = substr(preg_replace('/[^A-Za-z0-9]/', '_', $ctl1->identifier), 0, 20);\n                if (!isset($this->params['id']) && $control->countControls(\"name='\" . $name . \"' AND forms_id=\" . $this->params['forms_id']) > 0) {\n                    $this->params['_formError'] = gt('Identifier must be unique.');\n                    expSession::set('last_POST', $this->params);\n                } elseif ($name == 'id' || $name == 'ip' || $name == 'user_id' || $name == 'timestamp' || $name == 'location_data') {\n                    $this->params['_formError'] = sprintf(gt('Identifier cannot be \"%s\".'), $name);\n                    expSession::set('last_POST', $this->params);\n                } else {\n                    if (!isset($this->params['id'])) {\n                        $control->name = $name;\n                    }\n                    $control->caption = $ctl1->caption;\n                    $control->forms_id = $this->params['forms_id'];\n                    $control->is_static = (!empty($ctl1->is_static) ? $ctl1->is_static : 0);\n                    if (!empty($ctl1->pattern)) $ctl1->pattern = addslashes($ctl1->pattern);\n                    $control->data = serialize($ctl1);\n\n                    if (!empty($this->params['rank']))\n                        $control->rank = $this->params['rank'];\n                    if (!empty($control->id)) {\n                        $control->update();\n                    } else {\n                        $control->update();\n                        // reset summary report to all columns\n                        if (!$control->is_static) {\n                            $f->column_names_list = null;\n                            $f->update();\n                            //FIXME we also need to update any config column_names_list settings?\n                        }\n                    }\n                    $f->updateTable();\n                }\n            }\n        }\n        if (!expJavascript::inAjaxAction())\n            expHistory::returnTo('editable');\n        else {\n            echo $control->id;\n        }\n    }\n\n    public function delete_control() {\n        $ctl = null;\n        if (isset($this->params['id'])) {\n            $ctl = new forms_control($this->params['id']);\n        }\n\n        if ($ctl) {\n            $f = new forms($ctl->forms_id);\n            $ctl->delete();\n            $f->updateTable();\n            if (!expJavascript::inAjaxAction())\n                expHistory::returnTo('editable');\n        }\n    }\n\n    public function rerank_control() {\n        if (!empty($this->params['id'])) {\n            $fc = new forms_control($this->params['id']);\n            $fc->rerank_control($this->params['rank']);\n            // if we reranked a pagecontrol, we need to check/auto-correct the rank if needed\n            $fc->update(array('rank'=>$this->params['rank']));  // force auto-validation of ranks\n        }\n    }\n\n    /**\n     * Output a single control to an ajax request\n     */\n    public function build_control() {\n        if (!empty($this->params['id'])) {\n            $control = new forms_control($this->params['id']);\n            $form = new fakeform();\n            $form->horizontal = !empty($this->config['style']) ? $this->config['style'] : false;\n            $ctl = expUnserialize($control->data);\n            $ctl->_id = $control->id;\n            $ctl->_readonly = $control->is_readonly;\n            $ctl->_controltype = get_class($ctl);\n            if (isset($this->params['style']))\n                $form->horizontal = $this->params['style'];\n            $form->register($control->name, $control->caption, $ctl);\n            $form->style_form();\n            echo $form->controlToHTML($control->name);\n        }\n    }\n\n    function configure() {\n        $fields = array();\n        $column_names = array();\n        $cols = array();\n//        $forms_list = array();\n//        $forms = $this->forms->find('all', 1);\n//        if (!empty($forms)) foreach ($forms as $form) {\n//            $forms_list[$form->id] = $form->title;\n//        } else {\n//            $forms_list[0] = gt('You must select a form1');\n//        }\n        if (!empty($this->config['column_names_list'])) {\n            $cols = $this->config['column_names_list'];\n        }\n        $fieldlist = '[';\n        if (isset($this->config['forms_id'])) {\n            $fc = new forms_control();\n            foreach ($fc->find('all', 'forms_id=' . $this->config['forms_id'] . ' AND is_readonly=0','rank') as $control) {\n                $ctl = expUnserialize($control->data);\n                $control_type = get_class($ctl);\n                $def = call_user_func(array($control_type, 'getFieldDefinition'));\n                if ($def != null) {\n                    $fields[$control->name] = $control->caption;\n                    if (in_array($control->name, $cols)) {\n                        $column_names[$control->name] = $control->caption;\n                    }\n                }\n                if ($control_type != 'pagecontrol' && $control_type != 'htmlcontrol') {\n                    $fieldlist .= '[\"{\\$fields[\\'' . $control->name . '\\']}\",\"' . $control->caption . '\",\"' . gt('Insert') . ' ' . $control->caption . ' ' . gt('Field') . '\"],';\n                }\n            }\n            $fields['ip'] = gt('IP Address');\n            if (in_array('ip', $cols)) $column_names['ip'] = gt('IP Address');\n            $fields['user_id'] = gt('Posted by');\n            if (in_array('user_id', $cols)) $column_names['user_id'] = gt('Posted by');\n            $fields['timestamp'] = gt('Timestamp');\n            if (in_array('timestamp', $cols)) $column_names['timestamp'] = gt('Timestamp');\n//            if (in_array('location_data', $cols)) $column_names['location_data'] = gt('Entry Point');\n        }\n        $fieldlist .= ']';\n        $title = gt('No Form Assigned Yet!');\n        if (!empty($this->config['forms_id'])) {\n            $form = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            $this->config['is_saved'] = $form->is_saved;\n            $this->config['table_name'] = $form->table_name;\n            $title = $form->title;\n        }\n        assign_to_template(array(\n//            'forms_list'   => $forms_list,\n            'form_title'   => $title,\n            'column_names' => $column_names,\n            'fields'       => $fields,\n            'fieldlist'    => $fieldlist,\n        ));\n\n        parent::configure();\n    }\n\n    /**\n     * create a new default config array using the form defaults\n     */\n    private function get_defaults($form) {\n        if (empty($this->config)) { // NEVER overwrite an existing config\n            $this->config = array();\n            $config = get_object_vars($form);\n            if (!empty($config['column_names_list'])) {\n                $config['column_names_list'] = explode('|!|', $config['column_names_list']);  //fixme $form->column_names_list is a serialized array?\n            }\n            unset ($config['forms_control']);\n            $this->config = $config;\n        }\n    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n        $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => false, 'nofollow' => false);\n\n        // figure out what metadata to pass back based on the action we are in.\n        switch ($router->params['action']) {\n            case 'showall':\n                $metainfo['title'] = gt(\"Showing Form Records\") . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            case 'show':\n                $metainfo['title'] = gt(\"Showing Form Record\") . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            default:\n                $metainfo = parent::metainfo();\n        }\n        return $metainfo;\n    }\n\n    public function export_csv() {\n        if (!empty($this->params['id'])) {\n            $f = new forms($this->params['id']);\n            $this->get_defaults($f);  // fills $this->config with form defaults if needed\n            $items = $f->getRecords();\n\n            $fc = new forms_control();\n            //FIXME should we default to only 5 columns or all columns? and should we pick up modules columns ($this->config) or just form defaults ($f->)\n            //$f->column_names_list is a serialized array\n            //$this->config['column_names_list'] is an array\n            if ($this->config['column_names_list'] == '') {\n                //define some default columns...\n                $controls = $fc->find('all', \"forms_id=\" . $f->id . \" AND is_readonly = 0 AND is_static = 0\", \"rank\");\n//                foreach (array_slice($controls, 0, 5) as $control) {\n                foreach ($controls as $control) {\n//                    if ($this->config['column_names_list'] != '')\n//                        $this->config['column_names_list'] .= '|!|';\n//                    $this->config['column_names_list'] .= $control->name;\n                    $this->config['column_names_list'][$control->name] = $control->name;\n                }\n            }\n\n//            $rpt_columns2 = explode(\"|!|\", $this->config['column_names_list']);\n\n            $rpt_columns = array();\n            // popuplate field captions/labels\n            foreach ($this->config['column_names_list'] as $column) {\n                $control = $fc->find('first', \"forms_id=\" . $f->id . \" AND name = '\" . $column . \"' AND is_readonly = 0 AND is_static = 0\", \"rank\");\n                if (!empty($control)) {\n                    $rpt_columns[$control->name] = $control->caption;\n                } else {\n                    switch ($column) {\n                        case 'ip':\n                            $rpt_columns[$column] = gt('IP Address');\n                            break;\n                        case 'referrer':\n                            $rpt_columns[$column] = gt('Event ID');\n                            break;\n                        case 'user_id':\n                            $rpt_columns[$column] = gt('Posted by');\n                            break;\n                        case 'timestamp':\n                            $rpt_columns[$column] = gt('Timestamp');\n                            break;\n                    }\n                }\n            }\n\n            // populate field data\n            foreach ($rpt_columns as $column_name=>$column_caption) {\n                if ($column_name == \"ip\" || $column_name == \"referrer\" || $column_name == \"location_data\") {\n                } elseif ($column_name == \"user_id\") {\n                    foreach ($items as $key => $item) {\n                        if ($item->$column_name != 0) {\n                            $locUser = user::getUserById($item->$column_name);\n                            $item->$column_name = $locUser->username;\n                        } else {\n                            $item->$column_name = '';\n                        }\n                        $items[$key] = $item;\n                    }\n                } elseif ($column_name == \"timestamp\") {\n//                    $srt = $column_name . \"_srt\";\n                    foreach ($items as $key => $item) {\n//                        $item->$srt = $item->$column_name;\n                        $item->$column_name = strftime(\"%m/%d/%y %T\", $item->$column_name);  // needs to be in a machine readable format\n                        $items[$key] = $item;\n                    }\n                } else {\n                    $control = $fc->find('first', \"name='\" . $column_name . \"' AND forms_id=\" . $this->params['id'],'rank');\n                    if ($control) {\n//                        $ctl = unserialize($control->data);\n                        $ctl = expUnserialize($control->data);\n                        $control_type = get_class($ctl);\n//                        $srt = $column_name . \"_srt\";\n//                        $datadef = call_user_func(array($control_type, 'getFieldDefinition'));\n                        foreach ($items as $key => $item) {\n                            //We have to add special sorting for date time columns!!!\n//                            if (isset($datadef[DB_FIELD_TYPE]) && $datadef[DB_FIELD_TYPE] == DB_DEF_TIMESTAMP) {\n//                                $item->$srt = $item->$column_name;\n//                            }\n                            $item->$column_name = call_user_func(array($control_type, 'templateFormat'), $item->$column_name, $ctl);\n                            $items[$key] = $item;\n                        }\n                    }\n                }\n            }\n\n            if (LANG_CHARSET == 'UTF-8') {\n                $file = chr(0xEF) . chr(0xBB) . chr(0xBF); // add utf-8 signature to file to open appropriately in Excel, etc...\n            } else {\n                $file = \"\";\n            }\n\n            $file .= self::sql2csv($items, $rpt_columns);\n\n            // CREATE A TEMP FILE\n            $tmpfname = tempnam(getcwd(), \"rep\"); // Rig\n\n            $handle = fopen($tmpfname, \"w\");\n            fwrite($handle, $file);\n            fclose($handle);\n\n            if (file_exists($tmpfname)) {\n\n                ob_end_clean();\n\n                // This code was lifted from phpMyAdmin, but this is Open Source, right?\n                // 'application/octet-stream' is the registered IANA type but\n                //        MSIE and Opera seems to prefer 'application/octetstream'\n                // It seems that other headers I've added make IE prefer octet-stream again. - RAM\n\n                $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octet-stream;' : 'text/comma-separated-values;';\n                header('Content-Type: ' . $mime_type . ' charset=' . LANG_CHARSET . \"'\");\n                header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n                $filesize = filesize($tmpfname);\n                header('Content-length: ' . $filesize);\n                header('Content-Transfer-Encoding: binary');\n//                header('Content-Encoding:');\n                header('Content-Disposition: attachment; filename=\"report.csv\"');\n                if ($filesize) header('Content-length: ' . $filesize); // for some reason the webserver cant run stat on the files and this breaks.\n                // IE need specific headers\n                if (EXPONENT_USER_BROWSER == 'IE') {\n                    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                    header('Pragma: public');\n                    header('Vary: User-Agent');\n                } else {\n                    header('Pragma: no-cache');\n                }\n                //Read the file out directly\n                readfile($tmpfname);\n\n//                if (DEVELOPMENT == 0) exit();\n                unlink($tmpfname);\n                exit();\n            } else {\n                error_log(\"error file doesn't exist\", 0);\n            }\n        }\n//        expHistory::back();\n    }\n\n    /**\n     * This converts the sql statement into a nice CSV.\n     * We grab the items array which is stored funkily in the DB in an associative array when we pull it.\n     * So basically our aray looks like this:\n     *\n     * ITEMS\n     * {[id]=>myID, [Name]=>name, [Address]=>myaddr}\n     * {[id]=>myID1, [Name]=>name1, [Address]=>myaddr1}\n     * {[id]=>myID2, [Name]=>name2, [Address]=>myaddr2}\n     * {[id]=>myID3, [Name]=>name3, [Address]=>myaddr3}\n     * {[id]=>myID4, [Name]=>name4, [Address]=>myaddr4}\n     * {[id]=>myID5, [Name]=>name5, [Address]=>myaddr5}\n     *\n     * So by nature of the array, the keys are repetated in each line (id, name, etc)\n     * So if we want to make a header row, we just run through once at the beginning and\n     * use the array_keys function to strip out a functional header\n     *\n     * @param      $items\n     *\n     * @param null $rptcols\n     *\n     * @return string\n     */\n    public static function sql2csv($items, $rptcols = null) {\n        $str = \"\";\n        foreach ($rptcols as $individual_Header) {\n            if (!is_array($rptcols) || in_array($individual_Header, $rptcols)) $str .= $individual_Header . \",\";  //FIXME $individual_Header is ALWAYS in $rptcols?\n        }\n        $str .= \"\\r\\n\";\n        foreach ($items as $item) {\n            foreach ($rptcols as $key => $rowitem) {\n                if (!is_array($rptcols) || property_exists($item, $key)) {\n                    $rowitem = str_replace(\",\", \" \", $item->$key);\n                    $str .= $rowitem . \",\";\n                }\n            } //foreach rowitem\n            $str = substr($str, 0, strlen($str) - 1);\n            $str .= \"\\r\\n\";\n        } //end of foreach loop\n        return $str;\n    }\n\n    /**\n     * Export form, controls and optionally the data table\n     *\n     */\n    public function export_eql() {\n        assign_to_template(array(\n            \"id\" => $this->params['id'],\n        ));\n    }\n\n    /**\n     * Export form, controls and optionally the data table\n     *\n     */\n    public function export_eql_process() {\n        if (!empty($this->params['id'])) {\n            $f = new forms($this->params['id']);\n\n            $filename = preg_replace('/[^A-Za-z0-9_.-]/','-',$f->sef_url.'.eql');\n\n            ob_end_clean();\n            ob_start(\"ob_gzhandler\");\n\n            // This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n            // 'application/octet-stream' is the registered IANA type but\n            //        MSIE and Opera seems to prefer 'application/octetstream'\n            $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n            header('Content-Type: ' . $mime_type);\n            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n            } else {\n                header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n                header('Pragma: no-cache');\n            }\n            $tables = array(\n                'forms',\n                'forms_control'\n            );\n            if (!empty($this->params['include_data'])) {\n                $tables[] = 'forms_'.$f->table_name;\n            }\n            echo expFile::dumpDatabase($tables, 'Form', $this->params['id']);  //FIXME we need to echo inside call\n            exit; // Exit, since we are exporting\n        }\n//        expHistory::back();\n    }\n\n    /**\n     * Import form, controls and optionally the data table\n     *\n     */\n    public function import_eql() {\n    }\n\n    /**\n     * Import form, controls and optionally the data table\n     *\n     */\n    public function import_eql_process() {\n        $errors = array();\n\n        //FIXME check for duplicate form data table name before import?\n        expFile::restoreDatabase($_FILES['file']['tmp_name'], $errors, 'Form');\n\n        if (empty($errors)) {\n            flash('message',gt('Form was successfully imported'));\n        } else {\n            $message = gt('Form import encountered the following errors') . ':<br>';\n            foreach ($errors as $error) {\n                $message .= '* ' . $error . '<br>';\n            }\n            flash('error', $message);\n        }\n        expHistory::back();\n    }\n\n    public function import_csv() {\n        if (expFile::canCreate(BASE . \"tmp/test\") != SYS_FILES_SUCCESS) {\n            assign_to_template(array(\n                \"error\" => \"The /tmp directory is not writable.  Please contact your administrator.\",\n            ));\n        } else {\n            //Setup the arrays with the name/value pairs for the dropdown menus\n            $delimiterArray = Array(\n                ',' => gt('Comma'),\n                ';' => gt('Semicolon'),\n                ':' => gt('Colon'),\n                ' ' => gt('Space'));\n\n            $forms = $this->forms->find('all', 1);\n            $formslist = array();\n            $formslist[0] = gt('--Create a New Form--');\n            foreach ($forms as $aform) {\n                if (!empty($aform->is_saved)) {\n                    $formslist[$aform->id] = $aform->title;\n                    if (empty($formslist[$aform->id])) $formslist[$aform->id] = gt('Untitled');\n                }\n            }\n\n//            //Setup the meta data (hidden values)\n//            $form = new form();\n//            $form->meta(\"controller\", \"forms\");\n//            $form->meta(\"action\", \"import_csv_mapper\");\n//\n//            //Register the dropdown menus\n//            $form->register(\"delimiter\", gt('Delimiter Character'), new dropdowncontrol(\",\", $delimiterArray));\n//            $form->register(\"upload\", gt('CSV File to Upload'), new uploadcontrol());\n//            $form->register(\"use_header\", gt('First Row is a Header'), new checkboxcontrol(0, 0));\n//            $form->register(\"rowstart\", gt('Forms Data begins in Row'), new textcontrol(\"1\", 1, 0, 6));\n//            $form->register(\"forms_id\", gt('Target Form'), new dropdowncontrol(\"0\", $formslist));\n//            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n//                \"form_html\" => $form->tohtml(),\n                'delimiters' => $delimiterArray,\n                'forms_list' => $formslist,\n            ));\n        }\n    }\n\n    public function import_csv_mapper() {\n        //Check to make sure the user filled out the required input.\n        if (!is_numeric($this->params[\"rowstart\"])) {\n            unset($this->params[\"rowstart\"]);\n            $this->params['_formError'] = gt('The starting row must be a number.');\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit('Redirecting...');\n        }\n\n        if (!empty($this->params['forms_id'])) {\n            // if we are importing to an existing form, jump to that step\n            $this->import_csv_data_mapper();\n        } else {\n            //Get the temp directory to put the uploaded file\n            $directory = \"tmp\";\n\n            //Get the file save it to the temp directory\n            if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n                //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n                $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/'); //FIXME quick hack to remove file model\n                if ($file == null) {\n                    switch ($_FILES[\"upload\"][\"error\"]) {\n                        case UPLOAD_ERR_INI_SIZE:\n                        case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                            break;\n                        case UPLOAD_ERR_PARTIAL:\n                            $this->params['_formError'] = gt('The file was only partially uploaded.');\n                            break;\n                        case UPLOAD_ERR_NO_FILE:\n                            $this->params['_formError'] = gt('No file was uploaded.');\n                            break;\n                        default:\n                            $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                            break;\n                    }\n                    expSession::set(\"last_POST\", $this->params);\n                    header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                    exit(\"\");\n                }\n            }\n            /*\n            if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n                $this->params['_formError'] = \"File is not a delimited text file.\";\n                expSession::set(\"last_POST\",$this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n            */\n\n            //split the line into its columns\n            $headerinfo = null;\n            $line_end = ini_get('auto_detect_line_endings');\n            ini_set('auto_detect_line_endings',TRUE);\n            $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n            if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n            for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n                $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n                if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n            }\n            fclose($fh);\n            ini_set('auto_detect_line_endings',$line_end);\n\n            // get list of simple non-static controls if we are also creating a new form\n            $types = expTemplate::listControlTypes(false);\n            uasort($types, \"strnatcmp\");\n            $types = array_merge(array('none'=>gt('--Disregard this column--')),$types);\n\n            //Check to see if the line got split, otherwise throw an error\n            if ($lineInfo == null) {\n                $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            } else {\n                //Setup the meta data (hidden values)\n                $form = new form();\n                $form->meta(\"controller\", \"forms\");\n                $form->meta(\"action\", \"import_csv_form_prep\");  // we are creating a new form first\n    //            $form->meta(\"action\", \"import_csv_data\");  // we are importing into an existing form  //FIXME\n                $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n                $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n                $form->meta(\"use_header\", $this->params[\"use_header\"]);\n                $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n                for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                    if ($headerinfo != null) {\n                        $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n    //                    $label = str_replace('&', 'and', $headerinfo[$i]);\n    //                    $label = preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $label))));\n    //                    $form->register(\"name[$i]\", null, new genericcontrol('hidden',$label));\n                        $form->register(\"name[$i]\", null, new genericcontrol('hidden',$headerinfo[$i]));\n                    } else {\n                        $form->register(\"name[$i]\", null, new genericcontrol('hidden','Field'.$i));\n                        $title = $lineInfo[$i];\n                    }\n                    $form->register(\"data[$i]\", null, new genericcontrol('hidden',$lineInfo[$i]));\n                    $form->register(\"control[$i]\", $title, new dropdowncontrol(\"none\", $types));\n                }\n                $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n                assign_to_template(array(\n                    \"form_html\" => $form->tohtml(),\n                ));\n            }\n        }\n    }\n\n    public function import_csv_form_prep() {\n        $form = new form();\n        $form->meta(\"controller\", \"forms\");\n        $form->meta(\"action\", \"import_csv_form_add\");\n        $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n        $form->meta(\"filename\", $this->params[\"filename\"]);\n        $form->meta(\"use_header\", $this->params[\"use_header\"]);\n        $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n\n         // condense our responses to present form shell for confirmation\n        $form->register(\"title\", gt('Form Title'), new textcontrol(''));\n        $formcontrols = array();\n        foreach ($this->params['control'] as $key=>$control) {\n            if ($control != \"none\") {\n                $formcontrols[$key] = new stdClass();\n                $formcontrols[$key]->control = $control;\n                $label = str_replace('&', 'and', $this->params['name'][$key]);\n                $label = preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '_', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '_', $label))));\n                $formcontrols[$key]->name = $label;\n                $formcontrols[$key]->caption = $this->params['name'][$key];\n                $formcontrols[$key]->data = $this->params['data'][$key];\n            }\n        }\n\n        foreach ($formcontrols as $i=>$control) {\n            $form->register(\"column[$i]\", ucfirst($control->control) . ' ' . gt('Field Identifier') . ' (' . $control->caption . ' - ' . $control->data . ')', new textcontrol($control->name));\n            $form->register(\"control[$i]\", null, new genericcontrol('hidden',$control->control));\n            $form->register(\"caption[$i]\", null, new genericcontrol('hidden',$control->caption));\n            $form->register(\"data[$i]\", null, new genericcontrol('hidden',$control->data));\n        }\n\n        $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n        assign_to_template(array(\n            \"form_html\" => $form->tohtml(),\n        ));\n    }\n\n    public function import_csv_form_add() {\n\n        // create the form\n        $f = new forms();\n        $f->title = $this->params['title'];\n        $f->is_saved = true;\n        $f->update();\n\n        // create the form controls\n        foreach ($this->params['control'] as $key=>$control) {\n            $params = array();\n            $fc = new forms_control();\n            $this->params['column'][$key] = str_replace('&', 'and', $this->params['column'][$key]);\n            $this->params['column'][$key] = preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $this->params['column'][$key]))));\n            $fc->name = $params['identifier'] = $this->params['column'][$key];\n            $fc->caption = $params['caption'] = $this->params['caption'][$key];\n            $params['description'] = '';\n            if ($control == 'datetimecontrol') {\n                $params['showdate'] = $params['showtime'] = true;\n            }\n//            if ($control == 'htmlcontrol') {\n//                $params['html'] = $this->params['data'][$key];\n//            }\n            if ($control == 'radiogroupcontrol' || $control == 'dropdowncontrol') {\n                $params['default'] = $params['items'] = $this->params['data'][$key];\n            }\n            $fc->forms_id = $f->id;\n            $ctl = null;\n            $ctl = call_user_func(array($control, 'update'), $params, $ctl);\n            $fc->data = serialize($ctl);\n            $fc->update();\n        }\n\n        flash('notice', gt('New Form Created'));\n        $this->params['forms_id'] = $f->id;\n//        unset($this->params['caption']);\n        unset($this->params['control']);\n        $this->import_csv_data_display();\n    }\n\n    public function import_csv_data_mapper() {\n//        global $template;\n        //Get the temp directory to put the uploaded file\n        $directory = \"tmp\";\n\n        //Get the file save it to the temp directory\n        if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n            //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n            $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/'); //FIXME quick hack to remove file model\n            if ($file == null) {\n                switch ($_FILES[\"upload\"][\"error\"]) {\n                    case UPLOAD_ERR_INI_SIZE:\n                    case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                        break;\n                    case UPLOAD_ERR_PARTIAL:\n                        $this->params['_formError'] = gt('The file was only partially uploaded.');\n                        break;\n                    case UPLOAD_ERR_NO_FILE:\n                        $this->params['_formError'] = gt('No file was uploaded.');\n                        break;\n                    default:\n                        $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                        break;\n                }\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n        }\n        /*\n        if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n            $this->params['_formError'] = \"File is not a delimited text file.\";\n            expSession::set(\"last_POST\",$this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        }\n        */\n\n        //split the line into its columns\n        $headerinfo = null;\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n        if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n        for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n            $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n            if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n        }\n        fclose($fh);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        // pull in the form control definitions here\n        $f = new forms($this->params['forms_id']);\n        $fields = array(\n            \"none\"      => gt('--Disregard this column--'),\n        );\n        foreach ($f->forms_control as $control) {\n            $fields[$control->name] = $control->caption;\n        }\n\n        //Check to see if the line got split, otherwise throw an error\n        if ($lineInfo == null) {\n            $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        } else {\n            //Setup the meta data (hidden values)\n            $form = new form();\n            $form->meta(\"controller\", \"forms\");\n            $form->meta(\"action\", \"import_csv_data_display\");\n            $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n            $form->meta(\"use_header\", $this->params[\"use_header\"]);\n            $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n            $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n            $form->meta(\"forms_id\", $this->params[\"forms_id\"]);\n\n            for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                if ($headerinfo != null) {\n                    $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n                } else {\n                    $title = $lineInfo[$i];\n                }\n                $form->register(\"column[$i]\", $title, new dropdowncontrol(\"none\", $fields));\n            }\n            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n                \"form_html\" => $form->tohtml(),\n            ));\n        }\n    }\n\n    public function import_csv_data_display() {\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $record = array();\n        $records = array();\n        $linenum = 1;\n\n        // pull in the form control definitions here\n        $f = new forms($this->params['forms_id']);\n        $fields = array();\n        foreach ($f->forms_control as $control) {\n            $fields[$control->name] = $control->caption;\n        }\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n            if ($linenum >= $this->params[\"rowstart\"]) {\n                $i = 0;\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $record[$colname] = trim($field);\n                        $this->params['caption'][$i] = $fields[$colname];\n                    } else {\n                        unset($this->params['column'][$i]);\n                    }\n                    $i++;\n                }\n                $record['linenum'] = $linenum;\n                $records[] = $record;\n            }\n            $linenum++;\n        }\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        assign_to_template(array(\n            \"records\" => $records,\n            \"params\" => $this->params,\n        ));\n    }\n\n    public function import_csv_data_add() {\n        global $user;\n\n        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $recordsdone = 0;\n        $linenum = 1;\n        $f = new forms($this->params['forms_id']);\n        $f->updateTable();\n\n        $fields = array();\n        $multi_item_control_items = array();\n        $multi_item_control_ids = array();\n        foreach ($f->forms_control as $control) {\n            $fields[$control->name] = expUnserialize($control->data);\n            $ctltype = get_class($fields[$control->name]);\n            if (in_array($ctltype,array('radiogroupcontrol','dropdowncontrol'))) {\n                if (!array_key_exists($control->id,$multi_item_control_items)) {\n                    $multi_item_control_items[$control->name] = null;\n                    $multi_item_control_ids[$control->name] = $control->id;\n                }\n            }\n        }\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n            if ($linenum >= $this->params[\"rowstart\"] && in_array($linenum,$this->params['importrecord'])) {\n                $i = 0;\n                $db_data = new stdClass();\n                $db_data->ip = '';\n                $db_data->user_id = $user->id;\n                $db_data->timestamp = time();\n                $db_data->referrer = '';\n                $db_data->location_data = '';\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $control_type = get_class($fields[$colname]);\n                        $params[$colname] = $field;\n                        $def = call_user_func(array($control_type, \"getFieldDefinition\"));\n                        if (!empty($def)) {\n                            $db_data->$colname = call_user_func(array($control_type, 'convertData'), $colname, $params);\n                        }\n                        if (!empty($db_data->$colname) && array_key_exists($colname,$multi_item_control_items) && !in_array($db_data->$colname,$multi_item_control_items[$colname])) {\n                            $multi_item_control_items[$colname][] = $db_data->$colname;\n                        }\n                    }\n                    $i++;\n                }\n                $f->insertRecord($db_data);\n                $recordsdone++;\n            }\n            $linenum++;\n        }\n\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        // update multi-item forms controls\n        if (!empty($multi_item_control_ids)) {\n            foreach ($multi_item_control_ids as $key=>$control_id) {\n                $fc = new forms_control($control_id);\n                $ctl = expUnserialize($fc->data);\n                $ctl->items = $multi_item_control_items[$key];\n                $fc->data = serialize($ctl);\n                $fc->update();\n            }\n        }\n        unlink(BASE . $this->params[\"filename\"]);\n        flash('notice', $recordsdone.' '.gt('Records Imported'));\n        expHistory::back();\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n/**\n * @subpackage Controllers\n * @package    Modules\n */\nclass navigationController extends expController {\n    public $basemodel_name = 'section';\n    public $useractions = array(\n        'showall' => 'Show Navigation',\n        'breadcrumb' => 'Breadcrumb',\n    );\n    protected $remove_permissions = array(\n//        'configure',\n//        'create',\n//        'delete',\n//        'edit'\n    );\n    protected $add_permissions = array(\n        'manage'    => 'Manage',\n        'view'      => \"View Page\"\n    );\n    protected $manage_permissions = array(\n        'move'      => 'Move Page',\n        'remove'    => 'Remove Page',\n        'reparent'    => 'Reparent Page',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Navigation\"); }\n\n    static function description() { return gt(\"Places navigation links/menus on the page.\"); }\n\n    static function isSearchable() { return true; }\n\n    function searchName() { return gt('Webpage'); }\n\n    /**\n     * @param null $src\n     * @param array $params\n     *\n     */\n    function __construct($src = null, $params = array())\n    {\n        parent::__construct($src, $params);\n        if (!empty($params['id']))  // we normally throw out the $loc->int EXCEPT with navigation pages\n            $this->loc = expCore::makeLocation($this->baseclassname, $src, $params['id']);\n    }\n\n    public function showall() {\n        global $user, $sectionObj, $sections;\n\n        expHistory::set('viewable', $this->params);\n        $id      = $sectionObj->id;\n        $current = null;\n        // all we need to do is determine the current section\n        $navsections = $sections;\n        if ($sectionObj->parent == -1) {\n            $current = $sectionObj;\n        } else {\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        }\n        assign_to_template(array(\n            'sections'     => $navsections,\n            'current'      => $current,\n            'canManage'    => ((isset($user->is_acting_admin) && $user->is_acting_admin == 1) ? 1 : 0),\n        ));\n    }\n\n    public function breadcrumb() {\n        global $sectionObj;\n\n        expHistory::set('viewable', $this->params);\n        $id      = $sectionObj->id;\n        $current = null;\n        // Show not only the location of a page in the hierarchy but also the location of a standalone page\n        $current = new section($id);\n        if ($current->parent == -1) {  // standalone page\n            $navsections = section::levelTemplate(-1, 0);\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        } else {\n            $navsections = section::levelTemplate(0, 0);\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        }\n        assign_to_template(array(\n            'sections'     => $navsections,\n            'current'      => $current,\n        ));\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function navhierarchy($notyui=false) {\n        global $sections;\n\n        $json_array = array();\n        for ($i = 0, $iMax = count($sections); $i < $iMax; $i++) {\n            if ($sections[$i]->depth == 0) {\n                $obj = new stdClass();\n//   \t\t\t\t$obj->id = $sections[$i]->name.$sections[$i]->id;\n                $obj->id   = $sections[$i]->id;\n                $obj->text = $sections[$i]->name;\n                $obj->title = $sections[$i]->page_title;\n                $obj->description = $sections[$i]->description;\n                $obj->new_window = $sections[$i]->new_window;\n                $obj->expFile = $sections[$i]->expFile;\n                $obj->glyph = $sections[$i]->glyph;\n                $obj->glyph_only = $sections[$i]->glyph_only;\n                $obj->type = $sections[$i]->alias_type;\n                if ($sections[$i]->active == 1) {\n                    $obj->url = $sections[$i]->link;\n                    if ($obj->type == 1 && substr($obj->url, 0, 4) != 'http') {\n                        $obj->url = 'http://' . $obj->url;\n                    }\n                } else {\n                    $obj->url     = \"#\";\n                    $obj->onclick = \"onclick: { fn: return false }\";\n                }\n                if ($obj->type == 3) {  // mostly a hack instead of adding more table fields\n                    $obj->width = $sections[$i]->internal_id;\n                    $obj->class = $sections[$i]->external_link;\n                }\n                /*if ($sections[$i]->active == 1) {\n                    $obj->disabled = false;\n                } else {\n                    $obj->disabled = true;\n                }*/\n                //$obj->disabled = true;\n                $obj->itemdata = self::getChildren($i,$notyui);\n                $obj->maxitems = count($obj->itemdata);\n                $obj->maxdepth = 0;\n                foreach ($obj->itemdata as $menu) {\n                    if ($menu->maxdepth > $obj->maxdepth) $obj->maxdepth = $menu->maxdepth;\n                }\n            }\n            $json_array[] = $obj;\n        }\n        return $json_array;\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function navtojson() {\n        return json_encode(self::navhierarchy());\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function getChildren(&$i, $notyui=false) {\n        global $sections;\n\n        //\t\techo \"i=\".$i.\"<br>\";\n        if ($i + 1 == count($sections)) { // last entry\n            return array();\n        } elseif ($sections[$i]->depth == $sections[$i + 1]->depth) {\n            return array();\n        } else {\n            $ret_depth = $sections[$i]->depth;\n            $i++;\n            $ret_array = array();\n            for ($iMax = count($sections); $i < $iMax; $i++) {\n                // start setting up the objects to return\n                $obj       = new stdClass();\n                $obj->id   = $sections[$i]->id;\n                $obj->text = $sections[$i]->name;\n                $obj->title = $sections[$i]->page_title;\n                $obj->description = $sections[$i]->description;\n                $obj->new_window = $sections[$i]->new_window;\n                $obj->expFile = $sections[$i]->expFile;\n                $obj->glyph = $sections[$i]->glyph;\n                $obj->glyph_only = $sections[$i]->glyph_only;\n                $obj->depth = $sections[$i]->depth;\n                if ($sections[$i]->active == 1) {\n                    $obj->url = $sections[$i]->link;\n                    if ($sections[$i]->alias_type == 1 && substr($obj->url, 0, 4) != 'http') {\n                        $obj->url = 'http://' . $obj->url;\n                    }\n                } else {\n                    $obj->url     = \"#\";\n                    $obj->onclick = \"onclick: { fn: return false }\";\n                }\n                //echo \"i=\".$i.\"<br>\";\n                if (self::hasChildren($i)) {\n                    if ($notyui) {\n                        $obj->itemdata = self::getChildren($i,$notyui);\n                        $obj->maxitems = count($obj->itemdata);\n                        $obj->maxdepth = 0;\n                        foreach ($obj->itemdata as $menu) {\n                            if (!empty($menu->maxdepth)) {\n                                if ($menu->maxdepth > $obj->maxdepth) $obj->maxdepth = $menu->maxdepth;\n                            } else {\n                                if ($menu->depth > $obj->maxdepth) $obj->maxdepth = $menu->depth;\n                            }\n                        }\n                    } else {\n                        $obj->submenu     = new stdClass();\n                        $obj->submenu->id = $sections[$i]->name . $sections[$i]->id;\n                        //echo \"getting children of \".$sections[$i]->name;\n                        $obj->submenu->itemdata = self::getChildren($i,$notyui);\n                        $obj->maxitems = count($obj->submenu->itemdata);\n                        $obj->maxdepth = 0;\n                        foreach ($obj->submenu->itemdata as $menu) {\n                            if (!empty($menu->maxdepth)) {\n                                if ($menu->maxdepth > $obj->maxdepth) $obj->maxdepth = $menu->maxdepth;\n                            } else {\n                                if ($menu->depth > $obj->maxdepth) $obj->maxdepth = $menu->depth;\n                            }\n                        }\n                    }\n                    $ret_array[]            = $obj;\n                } else {\n                    $obj->maxdepth = $obj->depth;\n                    $ret_array[] = $obj;\n                }\n                if (($i + 1) >= count($sections) || $sections[$i + 1]->depth <= $ret_depth) {\n                    return $ret_array;\n                }\n            }\n            return array();\n        }\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function hasChildren($i) {\n        global $sections;\n\n        if (($i + 1) >= count($sections)) return false;\n        return ($sections[$i]->depth < $sections[$i + 1]->depth) ? true : false;\n    }\n\n    /** exdoc\n     * Creates a location object, based off of the three arguments passed, and returns it.\n     *\n     * @return array\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function initializeNavigation() {\n        $sections = section::levelTemplate(0, 0);\n        return $sections;\n    }\n\n    /**\n     * returns all the section's children\n     *\n     * @static\n     *\n     * @param int   $parent top level parent id\n     * @param int   $depth  variable to hold level of recursion\n     * @param array $parents\n     *\n     * @return array\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function levelTemplate($parent, $depth = 0, $parents = array()) {\n        global $user;\n\n        if ($parent != 0) $parents[] = $parent;\n        $nodes = array();\n        $cache = expSession::getCacheValue('navigation');\n        $sect = new section();\n        if (!isset($cache['kids'][$parent])) {\n            $kids = $sect->find('all','parent=' . $parent);\n            $cache['kids'][$parent] = $kids;\n            expSession::setCacheValue('navigation', $cache);\n        } else {\n            $kids = $cache['kids'][$parent];\n        }\n        $kids = expSorter::sort(array('array' => $kids, 'sortby' => 'rank', 'order' => 'ASC'));\n        for ($i = 0, $iMax = count($kids); $i < $iMax; $i++) {\n            $child = $kids[$i];\n            //foreach ($kids as $child) {\n            if ($child->public == 1 || expPermissions::check('view', expCore::makeLocation('navigation', '', $child->id))) {\n                $child->numParents    = count($parents);\n                $child->depth         = $depth;\n                $child->first         = ($i == 0 ? 1 : 0);\n                $child->last          = ($i == count($kids) - 1 ? 1 : 0);\n                $child->parents       = $parents;\n                $child->canManage     = (isset($user->is_acting_admin) && $user->is_acting_admin == 1 ? 1 : 0);\n                $child->canManageRank = $child->canManage;\n                if (!isset($child->sef_name)) {\n                    $child->sef_name = '';\n                }\n                // Generate the link attribute base on alias type.\n                if ($child->alias_type == 1) {\n                    // External link.  Set the link to the configured website URL.\n                    // This is guaranteed to be a full URL because of the\n                    // section::updateExternalAlias() method in models-1/section.php\n                    $child->link = $child->external_link;\n                } else if ($child->alias_type == 2) {\n                    // Internal link.\n                    // Need to check and see if the internal_id is pointing at an external link.\n//                    $dest = $db->selectObject('section', 'id=' . $child->internal_id);\n                    $dest = $sect->find('first','id=' . $child->internal_id);\n                    if (!empty($dest->alias_type) && $dest->alias_type == 1) {\n                        // This internal alias is pointing at an external alias.\n                        // Use the external_link of the destination section for the link\n                        $child->link = $dest->external_link;\n                    } else {\n                        // Pointing at a regular section.  This is guaranteed to be\n                        // a regular section because aliases cannot be turned into sections,\n                        // (and vice-versa) and because the section::updateInternalLink\n                        // does 'alias to alias' dereferencing before the section is saved\n                        // (see models-1/section.php)\n                        //added by Tyler to pull the descriptions through for the children view\n                        $child->description = !empty($dest->description) ? $dest->description : '';\n                        $child->link        = expCore::makeLink(array('section' => $child->internal_id));\n                    }\n                } else {\n                    // Normal link, alias_type == 0.  Just create the URL from the section's id.\n                    $child->link = expCore::makeLink(array('section' => $child->id), '', $child->sef_name);\n                }\n                //$child->numChildren = $db->countObjects('section','parent='.$child->id);\n                $nodes[] = $child;\n                $nodes   = array_merge($nodes, section::levelTemplate($child->id, $depth + 1, $parents));\n            }\n        }\n        return $nodes;\n    }\n\n    /**\n     * Returns a flat representation of the full site hierarchy.\n     *\n     * @param int    $parent         top level parent id\n     * @param int    $depth          variable to hold level of recursion\n     * @param array  $ignore_ids     array of pages to ignore\n     * @param bool   $full           include a 'top' level entry\n     * @param string $perm           permission level to build list\n     * @param bool   $addstandalones should we add the stand-alone pages also\n     * @param bool   $addinternalalias\n     *\n     * @return array\n     * @deprecated 2.3.4 moved to section model, HOWEVER still used in theme config\n     */\n    public static function levelDropdownControlArray($parent, $depth = 0, $ignore_ids = array(), $full = false, $perm = 'view', $addstandalones = false, $addinternalalias = true) {\n        global $db;\n\n        $ar = array();\n        if ($parent == 0 && $full) {\n            $ar[0] = '&lt;' . gt('Top of Hierarchy') . '&gt;';\n        }\n        if ($addinternalalias) {\n            $intalias = '';\n        } else {\n            $intalias = ' AND alias_type != 2';\n        }\n        $nodes = $db->selectObjects('section', 'parent=' . $parent . $intalias, 'rank');\n        foreach ($nodes as $node) {\n            if ((($perm == 'view' && $node->public == 1) || expPermissions::check($perm, expCore::makeLocation('navigation', '', $node->id))) && !in_array($node->id, $ignore_ids)) {\n                if ($node->active == 1) {\n                    $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . $node->name;\n                } else {\n                    $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . '(' . $node->name . ')';\n                }\n                $ar[$node->id] = $text;\n                foreach (self::levelDropdownControlArray($node->id, $depth + 1, $ignore_ids, $full, $perm, $addstandalones, $addinternalalias) as $id => $text) {\n                    $ar[$id] = $text;\n                }\n            }\n        }\n        if ($addstandalones && $parent == 0) {\n            $sections = $db->selectObjects('section', 'parent=-1');\n            foreach ($sections as $node) {\n                if ((($perm == 'view' && $node->public == 1) || expPermissions::check($perm, expCore::makeLocation('navigation', '', $node->id))) && !in_array($node->id, $ignore_ids)) {\n                    if ($node->active == 1) {\n                        $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . $node->name;\n                    } else {\n                        $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . '(' . $node->name . ')';\n                    }\n                    $ar[$node->id] = '(' . gt('Standalone') . ') ' . $text;\n                }\n            }\n//            $ar = array_merge($ar,$sections);\n        }\n        return $ar;\n    }\n\n    /**\n     * add all module items to search index\n     *\n     * @return int\n     */\n    function addContentToSearch() {\n        global $db;\n\n        //global $sections;\n        //\t\tglobal $router;\n//        $db->delete('search', \"ref_module='navigation' AND ref_type='section'\");\n        $db->delete('search', \"ref_module='\".$this->baseclassname.\"' AND ref_type='section'\");\n        // this now ensures we get internal pages, instead of relying on the global $sections, which does not.\n        $sections = $db->selectObjects('section', 'active=1');\n        foreach ($sections as $section) {\n            $search_record = new stdClass();\n//            $search_record->category = 'Webpages';\n//            $search_record->ref_module = 'navigationController';\n//            $search_record->ref_type = 'section';\n//            $search_record->ref_module  = $this->classname;\n            $search_record->ref_module  = $this->baseclassname;\n            $search_record->category    = $this->searchName();\n            $search_record->ref_type    = $this->searchCategory();\n            $search_record->original_id = $section->id;\n            $search_record->title       = $section->name;\n            //$search_record->view_link = $router->buildUrlByPageId($section->id);\n            $link = str_replace(URL_FULL, '', makeLink(array('section' => $section->id)));\n            if ($link . '/' == URL_FULL) $link = '';\n            $search_record->view_link = $link;\n            $search_record->body      = $section->description;\n            $search_record->keywords  = $section->keywords;\n            // now we're going to grab all the textmodules on this page and build the body for the page based off the content\n            // of all the text module added together.\n            $loc = expCore::makeLocation('text');\n            $controllername = 'text';\n            foreach ($db->selectObjects('sectionref', \"module='\" . $controllername . \"' AND section=\" . $section->id) as $module) {\n                $loc->src   = $module->source;\n//                $controller = new $controllername();\n                $controller = expModules::getController($controllername);\n                $textitems  = $db->selectObjects($controller->model_table, \"location_data='\" . serialize($loc) . \"'\");\n                foreach ($textitems as $textitem) {\n                    if (!empty($textitem)) {\n                        $search_record->body .= ' ' . search::removeHTML($textitem->body) . ' ';\n                        $search_record->keywords .= \" \" . $textitem->title;\n                    }\n                }\n            }\n            $db->insertObject($search_record, 'search');\n        }\n        return count($sections);\n    }\n\n    /**\n     * Retrieve either the entire hierarchy, or a subset of the hierarchy, as an array suitable for use\n     * in a dropdowncontrol.  This is used primarily by the section datatype for moving and adding\n     * sections to specific parts of the site hierarchy.\n     *\n     * @param int   $parent     The id of the subtree parent.  If passed as 0 (the default), the entire subtree is parsed.\n     * @param int   $depth\n     * @param int   $default\n     * @param array $ignore_ids a value-array of IDs to be ignored when generating the list.  This is used\n     *                          when moving a section, since a section cannot be made a subsection of itself or any of its subsections.\n     *\n     * @return string\n     */\n    function levelShowDropdown($parent, $depth = 0, $default = 0, $ignore_ids = array()) {\n        global $db;\n\n        $html = '';\n        $nodes = $db->selectObjects('section', 'parent=' . $parent, 'rank');\n//\t\t$nodes = expSorter::sort(array('array'=>$nodes,'sortby'=>'rank', 'order'=>'ASC'));\n        foreach ($nodes as $node) {\n            if (($node->public == 1 || expPermissions::check('view', expCore::makeLocation('navigation', '', $node->id))) && !in_array($node->id, $ignore_ids)) {\n                $html .= '<option value=\"' . $node->id . '\" ';\n                if ($default == $node->id) $html .= 'selected';\n                $html .= '>';\n                if ($node->active == 1) {\n                    $html .= str_pad('', $depth * 3, '.', STR_PAD_LEFT) . $node->name;\n                } else {\n                    $html .= str_pad('', $depth * 3, '.', STR_PAD_LEFT) . '(' . $node->name . ')';\n                }\n                $html .= '</option>';\n                $html .= self::levelShowDropdown($node->id, $depth + 1, $default, $ignore_ids);\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * recursively lists the template hierarchy\n     *\n     * @static\n     *\n     * @param int $parent top level parent id\n     * @param int $depth  variable to hold level of recursion\n     *\n     * @return array\n     * @deprecated 2.0.0 this only for deprecated templates\n     */\n    public static function getTemplateHierarchyFlat($parent, $depth = 1) {\n        global $db;\n\n        $arr  = array();\n        $kids = $db->selectObjects('section_template', 'parent=' . $parent, 'rank');\n//\t\t$kids = expSorter::sort(array('array'=>$kids,'sortby'=>'rank', 'order'=>'ASC'));\n        for ($i = 0, $iMax = count($kids); $i < $iMax; $i++) {\n            $page        = $kids[$i];\n            $page->depth = $depth;\n            $page->first = ($i == 0 ? 1 : 0);\n            $page->last  = ($i == count($kids) - 1 ? 1 : 0);\n            $arr[]       = $page;\n            $arr         = array_merge($arr, self::getTemplateHierarchyFlat($page->id, $depth + 1));\n        }\n        return $arr;\n    }\n\n    /**\n     * @deprecated 2.0.0 this only for deprecated templates\n     */\n    public static function process_section($section, $template) {\n        global $db;\n\n        if (!is_object($template)) {\n            $template          = $db->selectObject('section_template', 'id=' . $template);\n            $section->subtheme = $template->subtheme;\n            $db->updateObject($section, 'section');\n        }\n        $prefix = '@st' . $template->id;\n        $refs   = $db->selectObjects('sectionref', \"source LIKE '$prefix%'\");\n        // Copy all modules and content for this section\n        foreach ($refs as $ref) {\n            $src = substr($ref->source, strlen($prefix)) . $section->id;\n            if (call_user_func(array($ref->module, 'hasContent'))) {\n                $oloc = expCore::makeLocation($ref->module, $ref->source);\n                $nloc = expCore::makeLocation($ref->module, $src);\n                if ($ref->module != \"container\") {\n                    call_user_func(array($ref->module, 'copyContent'), $oloc, $nloc);\n                } else {\n                    call_user_func(array($ref->module, 'copyContent'), $oloc, $nloc, $section->id);\n                }\n            }\n        }\n        // Grab sub pages\n        foreach ($db->selectObjects('section_template', 'parent=' . $template->id) as $t) {\n            self::process_subsections($section, $t);\n        }\n\n    }\n\n    /**\n     * @deprecated 2.0.0 this only for deprecated templates\n     */\n    function process_subsections($parent_section, $subtpl) {\n        global $db, $router;\n\n        $section              = new stdClass();\n        $section->parent      = $parent_section->id;\n        $section->name        = $subtpl->name;\n        $section->sef_name    = $router->encode($section->name);\n        $section->subtheme    = $subtpl->subtheme;\n        $section->active      = $subtpl->active;\n        $section->public      = $subtpl->public;\n        $section->rank        = $subtpl->rank;\n        $section->page_title  = $subtpl->page_title;\n        $section->keywords    = $subtpl->keywords;\n        $section->description = $subtpl->description;\n        $section->id          = $db->insertObject($section, 'section');\n        self::process_section($section, $subtpl);\n    }\n\n    /**\n     * Delete page and send its contents to the recycle bin\n     *\n     * @param $parent\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function deleteLevel($parent) {\n        global $db;\n\n        $kids = $db->selectObjects('section', 'parent=' . $parent);\n        foreach ($kids as $kid) {\n            self::deleteLevel($kid->id);\n        }\n        $secrefs = $db->selectObjects('sectionref', 'section=' . $parent);\n        foreach ($secrefs as $secref) {\n            $loc = expCore::makeLocation($secref->module, $secref->source, $secref->internal);\n            recyclebin::sendToRecycleBin($loc, $parent);\n            //FIXME if we delete the module & sectionref the module completely disappears\n//            if (class_exists($secref->module)) {\n//                $modclass = $secref->module;\n//                //FIXME: more module/controller glue code\n//                if (expModules::controllerExists($modclass)) {\n//                    $modclass = expModules::getControllerClassName($modclass);\n//                    $mod = new $modclass($loc->src);\n//                    $mod->delete_instance();\n//                } else {\n//                    $mod = new $modclass();\n//                    $mod->deleteIn($loc);\n//                }\n//            }\n        }\n//        $db->delete('sectionref', 'section=' . $parent);\n        $db->delete('section', 'parent=' . $parent);\n    }\n\n    /**\n     * Move content page and its children to stand-alones\n     *\n     * @param $parent\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function removeLevel($parent) {\n        global $db;\n\n        $kids = $db->selectObjects('section', 'parent=' . $parent);\n        foreach ($kids as $kid) {\n            $kid->parent = -1;\n            $db->updateObject($kid, 'section');\n            self::removeLevel($kid->id);\n        }\n    }\n\n    /**\n     * Check for cascading page view permission, esp. if not public\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function canView($section) {\n        global $db;\n\n        if ($section == null) {\n            return false;\n        }\n        if ($section->public == 0) {\n            // Not a public section.  Check permissions.\n            return expPermissions::check('view', expCore::makeLocation('navigation', '', $section->id));\n        } else { // Is public.  check parents.\n            if ($section->parent <= 0) {\n                // Out of parents, and since we are still checking, we haven't hit a private section.\n                return true;\n            } else {\n                $s = $db->selectObject('section', 'id=' . $section->parent);\n                return self::canView($s);\n            }\n        }\n    }\n\n    /**\n     * Check to see if page is public with cascading\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function isPublic($s) {\n        if ($s == null) {\n            return false;\n        }\n        while ($s->public && $s->parent > 0) {\n            $s = new section($s->parent);\n        }\n        $lineage = (($s->public) ? 1 : 0);\n        return $lineage;\n    }\n\n    public static function canManageStandalones() {\n        global $user;\n\n        if ($user->isAdmin()) return true;\n        $standalones = section::levelTemplate(-1, 0);\n        //\t\t$canmanage = false;\n        foreach ($standalones as $standalone) {\n            $loc = expCore::makeLocation('navigation', '', $standalone->id);\n            if (expPermissions::check('manage', $loc)) return true;\n        }\n        return false;\n    }\n\n    /**\n     * Reassign permissions based on a check/change in menu/page hierarchy\n     *\n     * @static\n     *\n     * @param $id\n     */\n    public static function checkForSectionalAdmins($id) {\n        global $db;\n\n        $section = $db->selectObject('section', 'id=' . $id);\n        $branch  = section::levelTemplate($id, 0);\n        array_unshift($branch, $section);\n        $allusers  = array();\n        $allgroups = array();\n        while ($section->parent > 0) {\n            //\t\t\t$ploc = expCore::makeLocation('navigationController', null, $section);\n            $allusers  = array_merge($allusers, $db->selectColumn('userpermission', 'uid', \"permission='manage' AND module='navigation' AND internal=\" . $section->parent));\n            $allgroups = array_merge($allgroups, $db->selectColumn('grouppermission', 'gid', \"permission='manage' AND module='navigation' AND internal=\" . $section->parent));\n            $section   = $db->selectObject('section', 'id=' . $section->parent);\n        }\n        foreach ($branch as $section) {\n            $sloc = expCore::makeLocation('navigation', null, $section->id);\n            // remove any manage permissions for this page and it's children\n            // $db->delete('userpermission', \"module='navigationController' AND internal=\".$section->id);\n            // $db->delete('grouppermission', \"module='navigationController' AND internal=\".$section->id);\n            foreach ($allusers as $uid) {\n                $u = user::getUserById($uid);\n                expPermissions::grant($u, 'manage', $sloc);\n            }\n            foreach ($allgroups as $gid) {\n                $g = group::getGroupById($gid);\n                expPermissions::grantGroup($g, 'manage', $sloc);\n            }\n        }\n    }\n\n    function manage() {\n        global $db, $router, $user;\n\n        expHistory::set('manageable', $router->params);\n        assign_to_template(array(\n            'canManageStandalones' => self::canManageStandalones(),\n            'sasections'           => $db->selectObjects('section', 'parent=-1'),\n            'user'                 => $user,\n//            'canManagePagesets'    => $user->isAdmin(),\n//            'templates'            => $db->selectObjects('section_template', 'parent=0'),\n        ));\n    }\n\n    public function manage_sitemap() {\n        global $db, $user, $sectionObj, $sections;\n\n        expHistory::set('viewable', $this->params);\n        $id      = $sectionObj->id;\n        $current = null;\n        // all we need to do is determine the current section\n        $navsections = $sections;\n        if ($sectionObj->parent == -1) {\n            $current = $sectionObj;\n        } else {\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        }\n        assign_to_template(array(\n            'sasections'   => $db->selectObjects('section', 'parent=-1'),\n            'sections'     => $navsections,\n            'current'      => $current,\n            'canManage'    => ((isset($user->is_acting_admin) && $user->is_acting_admin == 1) ? 1 : 0),\n        ));\n    }\n\n    /**\n     * Ajax request for specific pages as json date to yui tree\n     */\n    public static function returnChildrenAsJSON() {\n        global $db;\n\n        //$nav = section::levelTemplate(intval($_REQUEST['id'], 0));\n        $id         = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;\n        $nav        = $db->selectObjects('section', 'parent=' . $id, 'rank');\n        //FIXME $manage_all is moot w/ cascading perms now?\n        $manage_all = false;\n        if (expPermissions::check('manage', expCore::makeLocation('navigation', '', $id))) {\n            $manage_all = true;\n        }\n        //FIXME recode to use foreach $key=>$value\n        $navcount = count($nav);\n        for ($i = 0; $i < $navcount; $i++) {\n            if ($manage_all || expPermissions::check('manage', expCore::makeLocation('navigation', '', $nav[$i]->id))) {\n                $nav[$i]->manage = 1;\n                $view = true;\n            } else {\n                $nav[$i]->manage = 0;\n                $view = $nav[$i]->public ? true : expPermissions::check('view', expCore::makeLocation('navigation', '', $nav[$i]->id));\n            }\n            $nav[$i]->link = expCore::makeLink(array('section' => $nav[$i]->id), '', $nav[$i]->sef_name);\n            if (!$view) unset($nav[$i]);\n        }\n        $nav= array_values($nav);\n//        $nav[$navcount - 1]->last = true;\n        if (count($nav)) $nav[count($nav) - 1]->last = true;\n//        echo expJavascript::ajaxReply(201, '', $nav);\n        $ar = new expAjaxReply(201, '', $nav);\n        $ar->send();\n    }\n\n    /**\n     * Ajax request for all pages as json date to jstree\n     */\n    public static function returnChildrenAsJSON2() {\n        global $db;\n\n        $icons = array(\n            0 => 'addpage',\n            1 => 'addextpage',\n            2 => 'addintpage',\n            3 => 'addfreeform',\n        );\n\n        $navs        = $db->selectObjects('section', 'parent!=-1', 'rank');\n        foreach ($navs as $i=>$nav) {\n            $navs[$i]->parent = $nav->parent?$nav->parent:'#';\n            $navs[$i]->text = $nav->name;\n            $navs[$i]->icon = $icons[$nav->alias_type];\n            if (!$nav->active) {\n                $navs[$i]->icon .= ' inactive';\n                $attr = new stdClass();\n                $attr->class = 'inactive';  // class to obscure elements\n                $navs[$i]->a_attr = $attr;\n            }\n            if (expPermissions::check('manage', expCore::makeLocation('navigation', '', $navs[$i]->id))) {\n                $navs[$i]->manage = 1;\n                $view = true;\n            } else {\n                $navs[$i]->manage = 0;\n                $navs[$i]->state->disabled = true;\n                $view = $navs[$i]->public ? true : expPermissions::check('view', expCore::makeLocation('navigation', '', $navs[$i]->id));\n            }\n            $navs[$i]->link = expCore::makeLink(array('section' => $navs[$i]->id), '', $navs[$i]->sef_name);\n            if (!$view) {\n//                unset($navs[$i]);  //FIXME this breaks jstree if we remove a parent and not the child\n                $attr = new stdClass();\n                $attr->class = 'hidden';  // bs3 class to hide elements\n                $navs[$i]->li_attr = $attr;\n            }\n        }\n        $navs= array_values($navs);\n//        header('Content-Type: application/json; charset=utf8');\n\t\techo json_encode($navs);\n//        echo expJavascript::ajaxReply(201, '', $navs);\n        exit;\n    }\n\n    /**\n     * Ajax function to reorder page hierarchy from yui tree control\n     */\n    public static function DragnDropReRank() {\n        global $db, $router;\n\n        $move   = $router->params['move'];\n        $target = $router->params['target'];\n        $type   = $router->params['type'];\n        $targSec = $db->selectObject(\"section\",\"id=\".$target);\n//        $targSec  = new section($target);\n        $check_id = $targSec->parent;\n        $moveSec = $db->selectObject(\"section\",\"id=\".$move);\n//        $moveSec = new section($move);\n\n        // dropped on top of page\n        if ($type == \"append\") {\n            //save the old parent in case we are changing the depth of the moving section\n            $oldParent = $moveSec->parent;\n            //assign the parent of the moving section to the ID of the target section\n            $moveSec->parent = $targSec->id;\n            //set the rank of the moving section to 0 since it will appear first in the new order\n            $moveSec->rank = 1;\n            //select all children currently of the parent we're about to append to\n            $targSecChildren = $db->selectObjects(\"section\", \"parent=\" . $targSec->id . \" ORDER BY rank\");\n            //update the ranks of the children to +1 higher to accommodate our new rank 0 section being moved in.\n            $newrank = 1;\n            foreach ($targSecChildren as $value) {\n                if ($value->id != $moveSec->id) {\n                    $value->rank = $newrank;\n                    $db->updateObject($value, 'section');\n                    $newrank++;\n                }\n            }\n            $db->updateObject($moveSec, 'section');\n            if ($oldParent != $moveSec->parent) {\n                //we need to re-rank the children of the parent that the miving section has just left\n                $childOfLastMove = $db->selectObjects(\"section\", \"parent=\" . $oldParent . \" ORDER BY rank\");\n                for ($i = 0, $iMax = count($childOfLastMove); $i < $iMax; $i++) {\n                    $childOfLastMove[$i]->rank = $i;\n                    $db->updateObject($childOfLastMove[$i], 'section');\n                }\n\n            }\n//            echo $moveSec->name . \" was appended to \" . $targSec->name;\n\n        } elseif ($type == \"after\") {  // dropped between (after) pages\n            if ($targSec->parent == $moveSec->parent) {\n                //are we moving up...\n                if ($targSec->rank < $moveSec->rank) {\n                    $moveSec->rank    = $targSec->rank + 1;\n                    $moveNextSiblings = $db->selectObjects(\"section\", \"id!=\" . $moveSec->id . \" AND parent=\" . $targSec->parent . \" AND rank>\" . $targSec->rank . \" ORDER BY rank\");\n                    $rerank           = $moveSec->rank + 1;\n                    foreach ($moveNextSiblings as $value) {\n                        if ($value->id != $moveSec->id) {\n                            $value->rank = $rerank;\n                            $db->updateObject($value, 'section');\n                            $rerank++;\n                        }\n                    }\n                    $db->updateObject($targSec, 'section');\n//                    $targSec->update();\n                    $db->updateObject($moveSec, 'section');\n//                    $moveSec->update();\n                    //or are we moving down...\n                } else {\n                    $targSec->rank        = $targSec->rank - 1;\n                    $moveSec->rank        = $targSec->rank + 1;\n                    $movePreviousSiblings = $db->selectObjects(\"section\", \"id!=\" . $moveSec->id . \" AND parent=\" . $targSec->parent . \" AND rank<=\" . $targSec->rank . \" ORDER BY rank\");\n                    $rerank               = 1;\n                    foreach ($movePreviousSiblings as $value) {\n                        if ($value->id != $moveSec->id) {\n                            $value->rank = $rerank;\n                            $db->updateObject($value, 'section');\n                            $rerank++;\n                        }\n                    }\n                    $db->updateObject($targSec, 'section');\n//                    $targSec->update();\n                    $db->updateObject($moveSec, 'section');\n//                    $moveSec->update();\n                }\n            } else {  // 'before', is this used?\n                //store ranks from the depth we're moving from.  Used to re-rank the level depth the moving section is moving from.\n                $oldRank   = $moveSec->rank;\n                $oldParent = $moveSec->parent;\n                //select all children of the target sections parent with a rank higher than it's own\n                $moveNextSiblings = $db->selectObjects(\"section\", \"parent=\" . $targSec->parent . \" AND rank>\" . $targSec->rank . \" ORDER BY rank\");\n                //update moving sections rank and parent\n                $moveSec->rank   = $targSec->rank + 1;\n                $moveSec->parent = $targSec->parent;\n                //$rerank=$moveSec->rank+1;\n                foreach ($moveNextSiblings as $value) {\n                    $value->rank = $value->rank + 1;\n                    $db->updateObject($value, 'section');\n                }\n                $db->updateObject($moveSec, 'section');\n                //handle re-ranking of previous parent\n                $oldSiblings = $db->selectObjects(\"section\", \"parent=\" . $oldParent . \" AND rank>\" . $oldRank . \" ORDER BY rank\");\n                $rerank      = 1;\n                foreach ($oldSiblings as $value) {\n                    if ($value->id != $moveSec->id) {\n                        $value->rank = $rerank;\n                        $db->updateObject($value, 'section');\n                        $rerank++;\n                    }\n                }\n                if ($oldParent != $moveSec->parent) {\n                    //we need to re-rank the children of the parent that the moving section has just left\n                    $childOfLastMove = $db->selectObjects(\"section\", \"parent=\" . $oldParent . \" ORDER BY rank\");\n                    for ($i = 0, $iMax = count($childOfLastMove); $i < $iMax; $i++) {\n                        $childOfLastMove[$i]->rank = $i;\n                        $db->updateObject($childOfLastMove[$i], 'section');\n                    }\n                }\n            }\n        }\n        self::checkForSectionalAdmins($move);\n        expSession::clearAllUsersSessionCache('navigation');\n    }\n\n    /**\n     * Ajax function to reorder page hierarchy from jstree control\n     */\n    public static function DragnDropReRank2() {\n        global $router, $db;\n\n        $id = $router->params['id'];\n        $page = new section($id);\n        $old_rank = $page->rank;\n        $old_parent = $page->parent;\n        $new_rank = $router->params['position'] + 1;  // rank\n        $new_parent = intval($router->params['parent']);\n\n        $db->decrement($page->tablename, 'rank', 1, 'rank>' . $old_rank . ' AND parent=' . $old_parent);  // close in hole\n        $db->increment($page->tablename, 'rank', 1, 'rank>=' . $new_rank . ' AND parent=' . $new_parent);  // make room\n\n        $params = array();\n        $params['parent'] = $new_parent;\n        $params['rank'] = $new_rank;\n        $page->update($params);\n\n        self::checkForSectionalAdmins($id);\n        expSession::clearAllUsersSessionCache('navigation');\n    }\n\n    function edit_section() {\n        global $db, $user;\n\n        $parent = new section($this->params['parent']);\n        if (empty($parent->id)) $parent->id = 0;\n        assign_to_template(array(\n            'haveStandalone'  => ($db->countObjects('section', 'parent=-1') && $parent->id >= 0),\n            'parent'          => $parent,\n            'isAdministrator' => $user->isAdmin(),\n        ));\n    }\n\n    function edit_contentpage() {\n        //FIXME we come here for new/edit content/standalone pages\n        // FIXME: Allow non-administrative users to manage certain parts of the section hierarchy.\n        //if ($user->is_acting_admin == 1 /*TODO: section admin*/) {\n//        $section = null;\n        $section = new stdClass();\n        if (isset($this->params['id'])) {\n            // Check to see if an id was passed in get.  If so, retrieve that section from\n            // the database, and perform an edit on it.\n            $section  = $this->section->find($this->params['id']);\n        } elseif (isset($this->params['parent'])) {\n            // The isset check is merely a precaution.  This action should\n            // ALWAYS be invoked with a parent or id value.\n            $section  = new section($this->params);\n        } else {\n            notfoundController::handle_not_found();\n            exit;\n        }\n        if (!empty($section->id)) {\n            $check_id = $section->id;\n        } else {\n            $check_id = $section->parent;\n        }\n        if (expPermissions::check('manage', expCore::makeLocation('navigation', '', $check_id))) {\n            if (empty($section->id)) {\n                $section->active = 1;\n                $section->public = 1;\n                if (!isset($section->parent)) {\n                    // This is another precaution.  The parent attribute\n                    // should ALWAYS be set by the caller.\n                    //FJD - if that's the case, then we should die.\n                    notfoundController::handle_not_authorized();\n                    exit;\n                    //$section->parent = 0;\n                }\n            }\n            assign_to_template(array(\n                'section' => $section,\n                'glyphs' => self::get_glyphs(),\n            ));\n        } else {  // User does not have permission to manage sections.  Throw a 403\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    private static function get_glyphs() {\n        if (bs()) {\n            require_once(BASE . 'external/font-awesome.class.php');\n            $fa = new Smk_FontAwesome;\n            if (bs3()) {\n                $icons = $fa->getArray(BASE . 'external/font-awesome4/css/font-awesome.css');\n                $icons = $fa->sortByName($icons);\n                return $fa->nameGlyph($icons);\n            } elseif (bs2()) {\n                expCSS::auto_compile_less(\n                    'external/font-awesome/less/font-awesome.less',\n                    'external/font-awesome/css/font-awesome.css'\n                ); // font-awesome is included within bootstrap2, but not as a separate .css file\n                $icons = $fa->getArray(BASE . 'external/font-awesome/css/font-awesome.css', 'icon-');\n                return $fa->nameGlyph($icons, 'icon-');\n            }\n        } else {\n            return array();\n        }\n    }\n\n    function edit_internalalias() {\n        $section = isset($this->params['id']) ? $this->section->find($this->params['id']) : new section($this->params);\n        if ($section->parent == -1) {\n            notfoundController::handle_not_found();\n            exit;\n        } // doesn't work for standalone pages\n        if (empty($section->id)) {\n            $section->public = 1;\n            if (!isset($section->parent)) {\n                // This is another precaution.  The parent attribute\n                // should ALWAYS be set by the caller.\n                //FJD - if that's the case, then we should die.\n                notfoundController::handle_not_authorized();\n                exit;\n                //$section->parent = 0;\n            }\n        }\n        assign_to_template(array(\n            'section' => $section,\n            'glyphs' => self::get_glyphs(),\n        ));\n    }\n\n    function edit_freeform() {\n        $section = isset($this->params['id']) ? $this->section->find($this->params['id']) : new section($this->params);\n        if ($section->parent == -1) {\n            notfoundController::handle_not_found();\n            exit;\n        } // doesn't work for standalone pages\n        if (empty($section->id)) {\n            $section->public = 1;\n            if (!isset($section->parent)) {\n                // This is another precaution.  The parent attribute\n                // should ALWAYS be set by the caller.\n                //FJD - if that's the case, then we should die.\n                notfoundController::handle_not_authorized();\n                exit;\n                //$section->parent = 0;\n            }\n        }\n        assign_to_template(array(\n            'section' => $section,\n            'glyphs' => self::get_glyphs(),\n        ));\n    }\n\n    function edit_externalalias() {\n        $section = isset($this->params['id']) ? $this->section->find($this->params['id']) : new section($this->params);\n        if ($section->parent == -1) {\n            notfoundController::handle_not_found();\n            exit;\n        } // doesn't work for standalone pages\n        if (empty($section->id)) {\n            $section->public = 1;\n            if (!isset($section->parent)) {\n                // This is another precaution.  The parent attribute\n                // should ALWAYS be set by the caller.\n                //FJD - if that's the case, then we should die.\n                notfoundController::handle_not_authorized();\n                exit;\n                //$section->parent = 0;\n            }\n        }\n        assign_to_template(array(\n            'section' => $section,\n            'glyphs' => self::get_glyphs(),\n        ));\n    }\n\n    function update() {\n        parent::update();\n        expSession::clearAllUsersSessionCache('navigation');\n    }\n\n    function move_standalone() {\n        expSession::clearAllUsersSessionCache('navigation');\n        assign_to_template(array(\n            'parent' => $this->params['parent'],\n        ));\n    }\n\n    /**\n     * Move standalone back to hierarchy\n     *\n     */\n    function reparent_standalone() {\n        $standalone = $this->section->find($this->params['page']);\n        if ($standalone) {\n            $standalone->parent = $this->params['parent'];\n            $standalone->update();\n            expSession::clearAllUsersSessionCache('navigation');\n            expHistory::back();\n        } else {\n            notfoundController::handle_not_found();\n        }\n    }\n\n    /**\n     * Move content page to standalones\n     *\n     */\n    function remove() {\n        global $db;\n\n        $section = $db->selectObject('section', 'id=' . $this->params['id']);\n        if ($section) {\n            section::removeLevel($section->id);\n            $db->decrement('section', 'rank', 1, 'rank > ' . $section->rank . ' AND parent=' . $section->parent);\n            $section->parent = -1;\n            $db->updateObject($section, 'section');\n            expSession::clearAllUsersSessionCache('navigation');\n            expHistory::back();\n        } else {\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    function delete_standalones() {\n        if (!empty($this->params['deleteit'])) {\n            foreach ($this->params['deleteit'] as $page) {\n                $section = new section(intval($page));\n                if ($section) {\n//                    self::deleteLevel($section->id);\n                    $section->delete();\n                }\n            }\n        }\n        expSession::clearAllUsersSessionCache('navigation');\n        expHistory::back();\n    }\n\n    /**\n     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n     *\n     * @return array\n     */\n    public function permissions() {\n        //set the permissions array\n        return $this->add_permissions;\n    }\n\n    // create a psuedo global manage pages permission\n    public static function checkPermissions($permission,$location) {\n        global $exponent_permissions_r, $router;\n\n        // only applies to the 'manage' method\n        if (empty($location->src) && empty($location->int) && ((!empty($router->params['action']) && $router->params['action'] == 'manage') || strpos($router->current_url, 'action=manage') !== false)) {\n            if (!empty($exponent_permissions_r['navigation'])) foreach ($exponent_permissions_r['navigation'] as $page) {\n                foreach ($page as $pageperm) {\n                    if (!empty($pageperm['manage'])) return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Rebuild the sectionref table as a list of modules on a page\n     * @deprecated 2.3.4 moved to sectionref model\n     */\n    public static function rebuild_sectionrefs() {\n        global $db;\n\n        // recursive run though all the nested containers\n        function scan_container($container_id, $page_id) {\n            global $db;\n\n            $containers = $db->selectObjects('container',\"external='\" . $container_id . \"'\");\n            $ret = '';\n            foreach ($containers as $container) {\n                $iLoc = expUnserialize($container->internal);\n                $newret = recyclebin::restoreFromRecycleBin($iLoc, $page_id);\n                if (!empty($newret)) $ret .= $newret . '<br>';\n                if ($iLoc->mod == 'container') {\n                    $ret .= scan_container($container->internal, $page_id);\n                }\n            }\n            return $ret;\n        }\n\n        // recursive run through all the nested pages\n        function scan_page($parent_id) {\n            global $db;\n\n            $sections = $db->selectObjects('section','parent=' . $parent_id);\n            $ret = '';\n            foreach ($sections as $page) {\n                $cLoc = serialize(expCore::makeLocation('container','@section' . $page->id));\n                $ret .= scan_container($cLoc, $page->id);\n                $ret .= scan_page($page->id);\n            }\n            return $ret;\n        }\n\n        // first remove duplicate records\n        $db->sql('DELETE FROM ' . $db->prefix . 'sectionref WHERE id NOT IN (SELECT * FROM (SELECT MIN(n.id) FROM ' . $db->prefix . 'sectionref n GROUP BY n.module, n.source) x)');\n        $ret = scan_page(0);  // the page hierarchy\n        $ret .= scan_page(-1);  // now the stand alone pages\n\n        // we need to get the non-main containers such as sidebars, footers, etc...\n        $hardcodedmods = $db->selectObjects('sectionref',\"refcount=1000 AND source NOT LIKE '%@section%' AND source NOT LIKE '%@random%'\");\n        foreach ($hardcodedmods as $hardcodedmod) {\n            if ($hardcodedmod->module == 'container') {\n                $page_id = intval(preg_replace('/\\D/', '', $hardcodedmod->source));\n                if (empty($page_id)) {\n                    $page_id = SITE_DEFAULT_SECTION;  // we'll default to the home page\n                }\n                $ret .= scan_container(serialize(expCore::makeLocation($hardcodedmod->module, $hardcodedmod->source)), $page_id);\n            } else {\n                $hardcodedmod->section = 0;  // this is a hard-coded non-container module\n                $db->updateObject($hardcodedmod, 'sectionref');\n            }\n        }\n\n        // mark modules in the recycle bin as section 0\n        $db->columnUpdate('sectionref', 'section', 0, \"refcount=0\");\n//        $recycledmods = $db->selectObjects('sectionref',\"refcount=0\");\n//        foreach ($recycledmods as $recycledmod) {\n//            $recycledmod->section = 0;  // this is a module in the recycle bin\n//            $db->updateObject($recycledmod, 'sectionref');\n//        }\n        return $ret;\n    }\n\n}\n\n?>\n", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass pixidouController extends expController {\n\tpublic $cacheDir = \"tmp/pixidou/\";\n    public $requires_login = array(\n        'editor'=>'You must be logged in to perform this action',\n        'exitEditor'=>'You must be logged in to perform this action',\n    );\n\n    static function displayname() { return gt(\"Pixidou Image Editor\"); }\n    static function description() { return gt(\"Add and manage Exponent Files\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n\n    static function hasSources()\n    {\n        return false;\n    }\n\n    function editor() {\n        global $user;\n\n        $file = new expFile($this->params['id']);\n\n        $canSaveOg = $user->id==$file->poster || $user->isSuperAdmin() ? 1 : 0 ;\n\t    if (file_exists(BASE . $file->directory . $file->filename)) {\n\t\t\t$file->copyToDirectory(BASE . $this->cacheDir);\n\t\t\tassign_to_template(array(\n                'image'=>$file,\n                'update'=>$this->params['update'],\n                'saveog'=>$canSaveOg\n            ));\n\t    } else {\n\t\t    flash('error', gt('The file') . ' \"' . BASE . $file->directory . $file->filename . '\" ' . gt('does not exist on the server.'));\n\t\t    redirect_to(array(\"controller\"=>'file', \"action\"=>'picker', \"ajax_action\"=>1, \"update\"=>$this->params['update'], \"filter\"=>$this->params['filter']));\n\t    }\n    }\n\n    public function exitEditor() {\n        // clean up parameters\n        $this->params['fid'] = intval($this->params['fid']);\n        if (!empty($this->params['cpi']) && strpos($this->params['cpi'], '..') !== false) {\n            $this->params['exitType'] = 'error';\n        }\n        switch ($this->params['exitType']) {\n            case 'saveAsCopy':\n                $oldimage = new expFile($this->params['fid']);\n                $copyname = expFile::resolveDuplicateFilename($oldimage->path);\n                copy(BASE . $this->cacheDir . \"/\" . $this->params['cpi'], $oldimage->directory . $copyname); //copy the edited file over to the files dir\n                $newFile = new expFile(array(\"filename\"=>$copyname)); //construct a new expFile\n                $newFile->directory = $oldimage->directory;\n                $newFile->title = $oldimage->title;\n                $newFile->shared = $oldimage->shared;\n                $newFile->mimetype = $oldimage->mimetype;\n                $newFile->posted = time();\n                $newFile->filesize = filesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                $resized = getimagesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                $newFile->image_width = $resized[0];\n                $newFile->image_height = $resized[1];\n                $newFile->alt = $oldimage->alt;\n                $newFile->is_image = $oldimage->is_image;\n                $newFile->save(); //Save it to the database\n\n                break;\n            case 'saveAsIs':\n                //eDebug($this->params,true);\n                $oldimage = new expFile($this->params['fid']);\n                $resized = getimagesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                $oldimage->image_width = $resized[0];\n                $oldimage->image_height = $resized[1];\n                $oldimage->save();\n                copy(BASE . $this->cacheDir . \"/\" . $this->params['cpi'], $oldimage->directory . $oldimage->filename); //copy the edited file over to the files dir\n                break;\n\n            default:\n                # code...\n                break;\n        }\n        // proper file types to look for\n        $types = array(\".jpg\", \".gif\", \".png\");\n\n        //Pixidou images directory, the editor's cache\n        $cachedir = BASE . $this->cacheDir;\n\n        if (is_dir($cachedir) && is_readable($cachedir) ) {\n            $dh = opendir($cachedir);\n            while (($tmpfile = readdir($dh)) !== false) {\n                if (in_array(substr($tmpfile, -4, 4), $types)) {\n                    $filename = $cachedir . $tmpfile;\n                    unlink($filename);\n                }\n            }\n        }\n\n        redirect_to(array(\"controller\"=>'file', \"action\"=>'picker', \"ajax_action\"=>1, \"update\"=>$this->params['update'], \"filter\"=>$this->params['filter']));\n    }\n\n}\n\n?>\n"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nabstract class expController {\n    protected $classname = ''; // full controller name w/ 'Controller' suffix\n    public $baseclassname = ''; // root controller name w/o 'Controller' suffix\n    public $classinfo = null; // holds reflection class of class\n//    public $module_name = '';       //FIXME not used and not actually set right index needed of -3 instead of -2 below\n//    protected $basemodel = null;    //FIXME never used, $basemodel_name replaced?\n    public $basemodel_name = ''; // holds classname of base model associated w/ this controller\n    public $model_table = ''; // holds table name for base model\n\n    public $useractions = array(); // available (displayed) user actions/methods for this module\n    public $remove_configs = array(); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n\n    // $permissions used to restrict access to module's actions/methods\n    protected $permissions = array(  // standard set of permissions for all modules unless add'ed or remove'd\n        'manage'    => 'Manage',\n        'configure' => 'Configure',\n        'create'    => 'Create',\n        'edit'      => 'Edit',\n        'delete'    => 'Delete',\n    );\n    protected $m_permissions = array(  // standard set of actions requiring manage permission for all modules\n        'activate'  => 'Activate',\n        'approve'   => 'Approve',\n        'merge'     => 'Merge',\n        'rerank'    => 'ReRank',\n        'import'    => 'Import Items',\n        'export'    => 'Export Items'\n    );\n    protected $remove_permissions = array();  // $permissions not applicable for this module from above list\n    protected $add_permissions = array();  // additional $permissions processed and visible  for this module\n    protected $manage_permissions = array();  // additional actions requiring manage permission in addition to $m_permissions\n    public $requires_login = array();  // actions/methods (lower case ONLY) which ONLY require user be logged in to access...$permissions take priority\n\n    public $filepath = ''; // location of this controller's files\n    public $viewpath = ''; // location of this controllers views; defaults to controller file location\n    public $relative_viewpath = ''; // relative location of controller's views\n    public $asset_path = ''; // location of this controller's assets; defaults to controller file location\n\n    public $config = array(); // holds module configuration settings\n    public $params = array(); // holds sanitized parameters passed to module\n    public $loc = null; // module location object\n\n    public $codequality = 'stable'; // code's level of stability\n\n    public $rss_is_podcast = false;\n\n    /**\n     * @param null  $src\n     * @param array $params\n     *\n     * @return expController\n     *\n     */\n    public function __construct($src = null, $params = array()) {\n        // setup some basic information about this class\n        $this->classinfo = new ReflectionClass($this);\n        $this->classname = $this->classinfo->getName();\n        $this->baseclassname = substr($this->classinfo->getName(), 0, -10);\n        $this->filepath = __realpath($this->classinfo->getFileName());\n\n        // figure out which \"module\" we belong to and setup view path information\n        $controllerpath = explode('/', $this->filepath);\n//        $this->module_name = $controllerpath[(count($controllerpath)-3)];\n\n        // set up the path to this module view files\n        array_pop($controllerpath); // remove 'controllers' from array\n        $controllerpath[count($controllerpath) - 1] = 'views';\n        array_push($controllerpath, $this->baseclassname);\n        $this->relative_viewpath = implode('/', array_slice($controllerpath, -3, 3));\n//        $this->viewpath = BASE.'framework/modules/'.$this->relative_viewpath;\n        //FIXME this requires we move the 'core' controllers into the modules folder or use this hack\n        $depth = array_search('core', $controllerpath);\n        if ($depth) {\n            $this->viewpath = BASE . 'framework/modules/' . $this->relative_viewpath;\n        } else {\n            $this->viewpath = implode('/', $controllerpath);\n        }\n\n        //grab the path to the module's assets\n        array_pop($controllerpath);\n        $controllerpath[count($controllerpath) - 1] = 'assets';\n//        $this->asset_path = PATH_RELATIVE.'framework/'.implode('/', array_slice($controllerpath, -3, 3)).\"/\";\n        $depth = array_search('framework', $controllerpath);  // is this a system file (or theme)?\n        if (!$depth) $depth = array_search('themes', $controllerpath);\n        $this->asset_path = PATH_RELATIVE . implode('/', array_slice($controllerpath, $depth)) . \"/\";\n\n        // figure out which model we're using and setup some info about it\n        if (empty($this->basemodel_name)) $this->basemodel_name = get_model_for_controller($this->classname);\n        $modelname = $this->basemodel_name;\n        if (class_exists($modelname)) {\n            $this->$modelname = new $modelname(null, false, false);\n            $this->model_table = $this->$modelname->tablename;\n        } else {\n            $this->basemodel_name = 'expRecord';\n            $this->$modelname = new expRecord(null, false, false);\n            $this->model_table = null;\n        }\n\n        // set the location data\n        $this->loc = expCore::makeLocation($this->baseclassname, $src, null);\n\n        // flag for needing approval check\n        if (ENABLE_WORKFLOW && $this->$modelname->supports_revisions) {\n            $uilevel = 99;\n            if (expSession::exists(\"uilevel\")) $uilevel = expSession::get(\"uilevel\");\n            if (!expPermissions::check('approve', $this->loc)) {\n                $this->$modelname->needs_approval = true;\n            } elseif ($uilevel == UILEVEL_PREVIEW && isset($uilevel)) {\n                $this->$modelname->needs_approval = true;  // 'preview' should provide a true preview\n            }\n        }\n\n        // get this controllers config data if there is any\n        $config = new expConfig($this->loc);\n        $this->config = $config->config;\n\n        $this->params = $params;\n        if (ENABLE_WORKFLOW)\n            $this->permissions = array_merge($this->permissions, array('approve'=>'Approval'));\n    }\n\n    /**\n     * name of module for backwards compat with old modules\n     *\n     * @return string\n     */\n    public function name() {\n        return static::displayname();\n    }\n\n    /**\n     * name of module\n     *\n     * @return string\n     */\n    public static function displayname() {\n        return gt(\"Exponent Base Controller\");\n    }\n\n    /**\n     * description of module\n     *\n     * @return string\n     */\n    public static function description() {\n        return gt(\"This is the base controller which most Exponent modules inherit their methods from.\");\n    }\n\n    /**\n     * author of module\n     *\n     * @return string\n     */\n    public static function author() {\n        return \"OIC Group, Inc\";\n    }\n\n    /**\n     * does module have sources available? or does it treat content globally\n     *\n     * @return bool\n     */\n    public static function hasSources() {\n        return true;\n    }\n\n    /**\n     * does module have views available?\n     *\n     * @return bool\n     */  //NOTE: Never used - equivalent to !empty ($this->useractions) via expModules::listUserRunnableControllers()?\n    public static function hasViews() {\n        return true;\n    }\n\n    /**\n     * does module have content (stored items) available?\n     *\n     * @return bool\n     */  //NOTE: Never used, better utilized/implemented as isSearchable()\n    public static function hasContent() {\n        return true;\n    }\n\n    /**\n     * does module support workflow?\n     *\n     * @return bool\n     */\n    public static function supportsWorkflow() {\n        return false;\n    }\n\n    /**\n     * is module content searchable? should it be added to search index?\n     *\n     * @return bool\n     */\n    public static function isSearchable() {\n        return false;\n    }\n\n    /**\n     * can this module import data?\n     *\n     * @return bool\n     */\n    public static function canImportData() {\n        return false;\n    }\n\n    /**\n     * can this module export data?\n     *\n     * @return bool\n     */\n    public static function canExportData() {\n        return false;\n    }\n\n    /**\n     * does this module require configuration?\n     *\n     * @return bool\n     */  //NOTE: Never Used\n    public static function requiresConfiguration() {\n        return false;\n    }\n\n    /**\n     * glue to make the view template aware of the module\n     * @deprecated\n     */\n    public function moduleSelfAwareness() {\n        assign_to_template(array(\n            'asset_path' => $this->asset_path,\n            'model_name' => $this->basemodel_name,\n            'table'      => $this->model_table,\n            'controller' => $this->baseclassname,\n            'config'     => $this->config\n        ));\n    }\n\n    /**\n     * default module view method for all items\n     */\n    public function showall() {\n        expHistory::set('viewable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => (isset($this->params['limit']) && $this->params['limit'] != '') ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * default module view method for all items with a specific tag\n     */\n    public function showall_by_tags() {\n        global $db;\n\n         // set history\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // get the tag being passed\n        $tag = new expTag(expString::escape($this->params['tag']));\n\n        // find all the id's of the portfolios for this module\n        $item_ids = $db->selectColumn($modelname, 'id', $this->aggregateWhereClause());\n\n        // find all the items that this tag is attached to\n        $items = $tag->findWhereAttachedTo($modelname);\n\n        // loop the items for this tag and find out which ones belong to this module\n        $items_by_tags = array();\n        foreach ($items as $item) {\n            if (in_array($item->id, $item_ids)) $items_by_tags[] = $item;\n        }\n\n        // create a pagination object for the model and render the action\n        $order = 'created_at DESC';\n        $page = new expPaginator(array(\n            'records'    => $items_by_tags,\n            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => $order,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'=>$this->loc->src,\n            'columns'    => array(\n                gt('Title') => 'title'\n            ),\n        ));\n//        $page->records = expSorter::sort(array('array'=>$page->records, 'sortby'=>'rank', 'order'=>'ASC', 'ignore_case'=>true));\n        $page->records = expSorter::sort(array('array' => $page->records, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n\n        assign_to_template(array(\n            'page'        => $page,\n            'items'       => $page->records,\n            'moduletitle' => ucfirst($modelname) . ' ' . gt('items tagged with') . ' \"' . expString::escape($this->params['tag']) . '\"',\n            'rank'        => ($order === 'rank') ? 1 : 0\n        ));\n    }\n\n    /**\n     * return all tags used by module's items\n     */\n    public function tags() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_tags = array();\n        foreach ($items as $item) {\n            foreach ($item->expTag as $tag) {\n                if (isset($used_tags[$tag->id])) {\n                    $used_tags[$tag->id]->count++;\n                } else {\n                    $exptag = new expTag($tag->id);\n                    $used_tags[$tag->id] = $exptag;\n                    $used_tags[$tag->id]->count = 1;\n                }\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_tags = expSorter::sort(array('array'=>$used_tags, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_tags = array_slice($used_tags, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'hits') {\n            $used_tags = expSorter::sort(array('array' => $used_tags, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'tags' => $used_tags\n        ));\n    }\n\n    /**\n     * return all categories used by module's items\n     */\n    public function categories() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all', $this->aggregateWhereClause());\n        $used_cats = array();\n        $used_cats[0] = new stdClass();\n        $used_cats[0]->id = 0;\n        $used_cats[0]->title = !empty($this->config['uncat']) ? $this->config['uncat'] : gt('Not Categorized');\n        $used_cats[0]->count = 0;\n        foreach ($items as $item) {\n            if (!empty($item->expCat)) {\n                if (isset($used_cats[$item->expCat[0]->id])) {\n                    $used_cats[$item->expCat[0]->id]->count++;\n                } else {\n                    $expcat = new expCat($item->expCat[0]->id);\n                    $used_cats[$item->expCat[0]->id] = $expcat;\n                    $used_cats[$item->expCat[0]->id]->count = 1;\n                }\n            } else {\n                $used_cats[0]->count++;\n            }\n        }\n\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats,'sortby'=>'title', 'order'=>'ASC', 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n//        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n//        $used_cats = expSorter::sort(array('array'=>$used_cats, 'order'=>$order, 'ignore_case'=>true, 'rank'=>($order==='rank')?1:0));\n        $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => 'count DESC', 'type' => 'a'));\n        if (!empty($this->config['limit'])) $used_cats = array_slice($used_cats, 0, $this->config['limit']);\n        $order = isset($this->config['order']) ? $this->config['order'] : 'title ASC';\n        if ($order != 'count') {\n            $used_cats = expSorter::sort(array('array' => $used_cats, 'order' => $order, 'ignore_case' => true, 'rank' => ($order === 'rank') ? 1 : 0));\n        }\n\n        assign_to_template(array(\n            'cats' => $used_cats\n        ));\n    }\n\n    /**\n     * return all comments used by module's items\n     */\n    public function comments() {\n\t    expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        $items = $this->$modelname->find('all');\n        $all_comments = array();\n        // get all the blog comments\n        foreach ($items as $item) {\n            $more_comments = expCommentController::getComments(array('content_type'=>$modelname,'content_id'=>$item->id));\n            if (!empty($more_comments)) {\n                foreach ($more_comments as $next_comment) {\n                    $next_comment->ref = $item->title;\n                    $next_comment->sef_url = $item->sef_url;\n                }\n                $all_comments = array_merge($all_comments,$more_comments);\n            }\n        }\n        // sort then limit all the blog comments\n        $all_comments = expSorter::sort(array('array' => $all_comments, 'sortby' => 'created_at', 'order' => 'DESC', 'ignore_case' => true));\n        $limit = (isset($this->config['headcount']) && $this->config['headcount'] != '') ? $this->config['headcount'] : 10;\n        $comments = array_slice($all_comments,0,$limit);\n\t    assign_to_template(array(\n            'comments'=>$comments,\n        ));\n\t}\n\n    /**\n     * default view for individual item\n     */\n    public function show() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n\n        // figure out if we're looking this up by id or title\n        $id = null;\n        if (isset($this->params['id'])) {\n            $id = $this->params['id'];\n        } elseif (isset($this->params['title'])) {\n            $id = expString::escape($this->params['title']);\n        }\n\n        $record = new $modelname($id);\n        if (empty($record->id))\n            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>$this->params['title']));\n\n        $config = expConfig::getConfig($record->location_data);\n        if (empty($this->config))\n            $this->config = $config;\n        if (empty($this->loc->src)) {\n            $r_loc = expUnserialize($record->location_data);\n            $this->loc = new stdClass();\n            $this->loc->src = $r_loc->src;\n        }\n\n        assign_to_template(array(\n            'record' => $record,\n            'config' => $config\n        ));\n    }\n\n    /**\n     * view the item by referring to its title\n     * @deprecated\n     */\n    public function showByTitle() {\n        expHistory::set('viewable', $this->params);\n        $modelname = $this->basemodel_name;\n        // first we'll check to see if this matches the sef_url field...if not then we'll look for the\n        // title field\n        $this->params['title'] = expString::escape($this->params['title']);  // escape title to prevent sql injection\n        $record = $this->$modelname->find('first', \"sef_url='\" . $this->params['title'] . \"'\");\n        if (!is_object($record)) {\n            $record = $this->$modelname->find('first', \"title='\" . $this->params['title'] . \"'\");\n        }\n        $this->loc = unserialize($record->location_data);\n\n        assign_to_template(array(\n            'record' => $record,\n        ));\n    }\n\n    /**\n     * view a random item\n     */\n    public function showRandom() {\n        expHistory::set('viewable', $this->params);\n        $where = static::hasSources() ? $this->aggregateWhereClause() : null;\n        $limit = isset($this->params['limit']) ? $this->params['limit'] : 1;\n        $order = 'RAND()';\n        assign_to_template(array(\n            'items' => $this->text->find('all', $where, $order, $limit)\n        ));\n    }\n\n    /**\n     * view items referenced by tags\n     * @deprecated\n     */\n    public function showByTags() {\n        global $db;\n\n        // set the history point for this action\n        expHistory::set('viewable', $this->params);\n\n        // setup some objects\n        $tagobj = new expTag();\n        $modelname = empty($this->params['model']) ? $this->basemodel_name : $this->params['model'];\n        $model = new $modelname();\n\n        // start building the sql query\n        $sql = 'SELECT DISTINCT m.id FROM ' . $db->prefix . $model->tablename . ' m ';\n        $sql .= 'JOIN ' . $db->prefix . $tagobj->attachable_table . ' ct ';\n        $sql .= 'ON m.id = ct.content_id WHERE (';\n        $first = true;\n\n        if (isset($this->params['tags'])) {\n            $tags = is_array($this->params['tags']) ? $this->params['tags'] : array($this->params['tags']);\n        } elseif (isset($this->config['expTags'])) {\n            $tags = $this->config['expTags'];\n        } else {\n            $tags = array();\n        }\n\n        foreach ($tags as $tagid) {\n            $sql .= ($first) ? 'exptags_id=' . intval($tagid) : ' OR exptags_id=' . intval($tagid);\n            $first = false;\n        }\n        $sql .= \") AND content_type='\" . $model->classname . \"'\";\n\n        // get the objects and render the template\n        $tag_assocs = $db->selectObjectsBySql($sql);\n        $records = array();\n        foreach ($tag_assocs as $assoc) {\n            $records[] = new $modelname($assoc->id);\n        }\n\n        assign_to_template(array(\n            'items' => $records\n        ));\n    }\n\n    /**\n     * create an item in this module\n     * @deprecated in favor of edit w/o id param\n     */\n    public function create() {\n        $args = array('controller' => $this->params['controller'], 'action' => 'edit');\n        //if (!empty($this->params['instance'])) $args['instance'] = $this->params['instance'];\n        if (!empty($this->params['src'])) $args['src'] = $this->params['src'];\n        redirect_to($args);\n    }\n\n    /**\n     * edit item in module, also used to copy items\n     */\n    public function edit() {\n        expHistory::set('editable', $this->params);\n        $taglist = expTag::getAllTags();\n        $modelname = $this->basemodel_name;\n//        $record = isset($this->params['id']) ? $this->$modelname->find($this->params['id']) : new $modelname($this->params);\n        if (isset($this->params['id'])) {\n            if (!isset($this->params['revision_id'])) {\n                $record = $this->$modelname->find($this->params['id']);\n            } else {\n                $currentrecord = $this->$modelname->find($this->params['id']);\n                $records = $this->$modelname->find('revisions', $this->$modelname->identifier . '=' . intval($this->params['id']) . ' AND revision_id=' . intval($this->params['revision_id']));\n                $record = $records[0];\n                $record->current_revision_id = $currentrecord->revision_id;\n            }\n        } else {\n            $record = new $modelname($this->params);\n        }\n        if (!empty($this->params['copy'])) {\n            $record->id = null;\n            if (isset($record->sef_url)) $record->sef_url = null;\n        }\n        assign_to_template(array(\n            'record'     => $record,\n//            'table'      => $this->$modelname->tablename,\n//            'controller' => $this->params['controller'],\n            'taglist'    => $taglist\n        ));\n    }\n\n    /**\n     * merge/move aggregated item into this module\n     */\n    public function merge() {\n        expHistory::set('editable', $this->params);\n        $modelname = $this->basemodel_name;\n        $record = $this->$modelname->find($this->params['id']);\n\n        $loc = expUnserialize($record->location_data);\n        $loc->src = $this->loc->src;\n        $record->location_data = serialize($loc);\n//        $this->$modelname->update($record);\n        $record->update();\n\n        expHistory::back();\n    }\n\n    /**\n     * update (save) item in module\n     */\n    public function update() {\n        global $db;\n\n        //check for and handle tags\n        if (array_key_exists('expTag', $this->params)) {\n            if (isset($this->params['id'])) {\n                $db->delete('content_expTags', 'content_type=\"' . (!empty($this->params['content_type']) ? $this->params['content_type'] : $this->basemodel_name) . '\" AND content_id=' . $this->params['id']);\n            }\n            $tags = explode(\",\", trim($this->params['expTag']));\n            unset($this->params['expTag']);\n\n            foreach ($tags as $tag) {\n                if (!empty($tag)) {\n                    $tag = strtolower(trim($tag));\n                    $tag = str_replace(array('\"', \"'\"), \"\", $tag); // strip double and single quotes\n                    if (!empty($tag)) {\n                        $expTag = new expTag($tag);\n                        if (empty($expTag->id))\n                            $expTag->update(array('title' => $tag));\n                        $this->params['expTag'][] = $expTag->id;\n                    }\n                }\n            }\n        }\n\n        //check for and handle cats\n        if (array_key_exists('expCat', $this->params) && !empty($this->params['expCat'])) {\n            $catid = $this->params['expCat'];\n            unset($this->params['expCat']);\n            $this->params['expCat'][] = $catid;\n        }\n\n        $modelname = $this->basemodel_name;\n        $this->$modelname->update($this->params);\n\n        if ($this->isSearchable()) {\n            $this->addContentToSearch($this->params);\n        }\n\n        // check for auto send facebook status\n        if (!empty($this->params['send_status'])) {\n            if ($this->classname == 'eventController') {\n                facebookController::postEvent(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                facebookController::postStatus(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for auto send tweet\n        if (!empty($this->params['send_tweet'])) {\n            if ($this->classname == 'eventController') {\n                twitterController::postEventTweet(\n                    array('model' => $modelname, 'id' => $this->params['date_id'], 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            } else {\n                twitterController::postTweet(\n                    array('model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'config' => $this->config, 'orig_controller' => expModules::getControllerName($this->classname))\n                );\n            }\n        }\n\n        // check for eAlerts\n        if (!empty($this->params['send_ealerts'])) {\n            redirect_to(array('controller' => 'ealert', 'action' => 'send_confirm', 'model' => $modelname, 'id' => $this->$modelname->id, 'src' => $this->loc->src, 'orig_controller' => expModules::getControllerName($this->classname)));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    /**\n     * delete item in module\n     */\n    public function delete() {\n        $modelname = $this->basemodel_name;\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the') . ' ' . $modelname . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $obj = new $modelname($this->params['id']);\n        $rows = $obj->delete();\n\n        // if this module is searchable lets delete spidered content\n        if ($this->isSearchable()) {\n            $search = new search();\n//            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->classname . \"'\");\n            $content = $search->find('first', 'original_id=' . $this->params['id'] . \" AND ref_module='\" . $this->baseclassname . \"'\");\n            if (!empty($content->id)) $content->delete();\n        }\n\n        expHistory::back();\n    }\n\n    /**\n     * rerank items in model\n     */\n    public function rerank() {\n        $modelname = $this->basemodel_name;\n        $obj = new $modelname($this->params['id']);\n        $obj->rerank($this->params['push']);\n        expHistory::back();\n    }\n\n    /**\n     * display module management view\n     */\n    public function manage() {\n        expHistory::set('manageable', $this->params);\n\n        $page = new expPaginator(array(\n            'model'      => $this->basemodel_name,\n            'where'      => static::hasSources() ? $this->aggregateWhereClause() : null,\n            'limit'      => isset($this->params['limit']) ? $this->params['limit'] : 10,\n            'order'      => isset($this->params['order']) ? $this->params['order'] : null,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n            'src'        => static::hasSources() == true ? $this->loc->src : null,\n            'columns'    => array(\n                gt('ID#')   => 'id',\n                gt('Title') => 'title',\n                gt('Body')  => 'body'\n            ),\n        ));\n\n        assign_to_template(array(\n            'page'  => $page,\n            'items' => $page->records\n        ));\n    }\n\n    /**\n     * rerank module items, called from ddrerank\n     */\n    public function manage_ranks() {\n        $rank = 1;\n        foreach ($this->params['rerank'] as $id) {\n            $modelname = $this->params['model'];\n            $obj = new $modelname($id);\n            $obj->rank = $rank;\n            $obj->save(false, true);\n            $rank++;\n        }\n\n        if (!expJavascript::inAjaxAction())\n            redirect_to($this->params['lastpage']);\n    }\n\n    /**\n     * Configure the module\n     */\n    public function configure() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $views = expTemplate::get_config_templates($this, $this->loc);\n\n        // needed for aggregation list\n        $pullable_modules = expModules::listInstalledControllers($this->baseclassname, $this->loc);\n        $page = new expPaginator(array(\n            'records' => $pullable_modules,\n            'controller' => $this->loc->mod,\n            'action' => $this->params['action'],\n            'order'   => isset($this->params['order']) ? $this->params['order'] : 'section',\n            'dir'     => isset($this->params['dir']) ? $this->params['dir'] : '',\n            'page'    => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns' => array(\n                gt('Title') => 'title',\n                gt('Page')  => 'section'\n            ),\n        ));\n\n//        if (empty($this->params['hcview'])) {\n            $containerloc = expCore::makeLocation(expModules::getModuleName($this->loc->mod),$this->loc->src);\n            $container = $db->selectObject('container', \"internal='\" . serialize($containerloc) . \"'\");\n            if (empty($container)) {\n                $container = new stdClass();\n                $container->action = 'showall';\n            } else {\n                $container->internal = unserialize($container->internal);\n            }\n            if (empty($container->action)) {\n                $container->action = 'showall';\n            }\n//            expSession::clearAllUsersSessionCache('containermodule');\n\n//            $modules_list = expModules::getActiveModulesAndControllersList();\n//            foreach ($modules_list as $moduleclass) {\n//                $module = new $moduleclass();\n//\n//                // Get basic module meta info\n//                $mod = new stdClass();\n//                $mod->name = $module->name();\n//                $mod->author = $module->author();\n//                $mod->description = $module->description();\n//                if (isset($container->view) && $container->internal->mod == $moduleclass) {\n//                    $mod->defaultView = $container->view;\n//                } else $mod->defaultView = DEFAULT_VIEW;\n//\n//                // Get support flags\n//                $mod->supportsSources = ($module->hasSources() ? 1 : 0);\n//                $mod->supportsViews = ($module->hasViews() ? 1 : 0);\n//\n//                // Get a list of views\n//                $mod->views = expTemplate::listModuleViews($moduleclass);\n//                natsort($mod->views);\n//\n//                $modules[$moduleclass] = $mod;\n////       \t\t$mods[$moduleclass] = $module->name();\n//                //        $mods[$moduleclass] = $moduleclass::name();\n//            }\n\n//        array_multisort(array_map('strtolower', $mods), $mods);\n\n            $actions = $this->useractions;\n            $mod_views = array();\n            if (!empty($actions)) {\n                  // Language-ize the action names\n                foreach ($actions as $key => $value) {\n                    $actions[$key] = gt($value);\n                }\n                $mod_views = expTemplate::get_action_views($this->classname, $container->action, $actions[$container->action]);\n                if (count($mod_views) < 1) $mod_views[$container->action] = $actions[$container->action] . ' - Default View';\n            }\n\n            assign_to_template(array(\n                'container' => $container,\n                'actions'   => $actions,\n                'mod_views' => $mod_views,\n            ));\n//        } else {\n        if (!empty($this->params['hcview'])) {\n            // this must be a hard-coded module?\n            assign_to_template(array(\n                'hcview' => $this->params['hcview'],\n            ));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $folders = array();\n        $folders[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $folders[$cat->id] = $cat->title;\n        }\n\n        assign_to_template(array(\n//            'config'            => $this->config,  //FIXME already assigned in controllertemplate?\n            'page'              => $page, // needed for aggregation list\n            'views'             => $views,\n            'title'             =>static::displayname(),\n            'current_section'   => expSession::get('last_section'),\n//            'classname'         => $this->classname,  //FIXME $controller already assigned baseclassname (short vs long) in controllertemplate?\n            'viewpath'          => $this->viewpath,\n            'relative_viewpath' => $this->relative_viewpath,\n            'folders'           => $folders,\n        ));\n\n    }\n\n    /**\n     * save module configuration\n     */\n    public function saveconfig() {\n        global $db;\n\n        // update module title/action/view\n        if (!empty($this->params['container_id'])) {\n            $container = $db->selectObject('container', \"id=\" . $this->params['container_id']);\n            if (!empty($container)) {\n                $container->title = $this->params['moduletitle'];\n                $container->action = $this->params['actions'];\n                $container->view = $this->params['views'];\n                $container->is_private = $this->params['is_private'];\n                $db->updateObject($container, 'container');\n                expSession::clearAllUsersSessionCache('containermodule');\n            }\n            unset(\n                $this->params['container_id'],\n                $this->params['moduletitle'],\n                $this->params['modcntrol'],\n                $this->params['actions'],\n                $this->params['views'],\n                $this->params['actions'],\n                $this->params['is_private']\n            );\n        }\n\n        // create a new RSS object if enable is checked.\n        $params = $this->params;\n        if (!empty($this->params['enable_rss'])) {\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            $rssfeed = new expRss($params);\n            $rssfeed->update($params);\n            $this->params['feed_sef_url'] = $rssfeed->sef_url;\n        } else {\n            $rssfeed = new expRss($this->params);\n            $params['enable_rss'] = false;\n            if (empty($params['advertise']))\n                $params['advertise'] = false;\n            $params['title'] = $params['feed_title'];\n            unset($params['feed_title']);\n            $params['sef_url'] = $params['feed_sef_url'];\n            unset($params['feed_sef_url']);\n            if (!empty($rssfeed->id)) { // do NOT create a new record, only update existing ones\n                $rssfeed->update($params);\n                $this->params['feed_sef_url'] = $rssfeed->sef_url;\n            }\n        }\n\n        // create a new eAlerts object if enable is checked.\n        if (!empty($this->params['enable_ealerts'])) {\n            $ealert = new expeAlerts($this->params);\n            $ealert->update($this->params);\n        }\n\n        // unset some unneeded params\n        unset(\n            $this->params['module'],\n            $this->params['controller'],\n            $this->params['src'],\n            $this->params['int'],\n            $this->params['id'],\n            $this->params['cid'],\n            $this->params['action'],\n            $this->params['PHPSESSID'],\n            $this->params['__utma'],\n            $this->params['__utmb'],\n            $this->params['__utmc'],\n            $this->params['__utmz'],\n            $this->params['__utmt'],\n            $this->params['__utmli'],\n            $this->params['__cfduid']\n        );\n\n        // setup and save the config\n        $config = new expConfig($this->loc);\n        $config->update(array('config' => $this->params));\n\n        flash('message', gt('Configuration updated'));\n        expHistory::back();\n    }\n\n    /**\n     * get the module's items in an rss feed format\n     *\n     * this function is very general and will most of the time need to be overwritten and customized\n     *\n     * @return array\n     */\n    public function getRSSContent($limit = 0) {\n        $class = new $this->basemodel_name;\n        $items = $class->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'created_at DESC', $limit);\n\n        //Convert the items to rss items\n        $rssitems = array();\n        foreach ($items as $key => $item) {\n            $rss_item = new FeedItem();\n            $rss_item->title = expString::convertSmartQuotes($item->title);\n            $rss_item->link = $rss_item->guid = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url));\n            $rss_item->description = expString::convertSmartQuotes($item->body);\n            $rss_item->author = user::getUserById($item->poster)->firstname . ' ' . user::getUserById($item->poster)->lastname;\n            $rss_item->authorEmail = user::getEmailById($item->poster);\n//            $rss_item->date = isset($item->publish_date) ? date(DATE_RSS, $item->publish_date) : date(DATE_RSS, $item->created_at);\n            $rss_item->date = isset($item->publish_date) ? $item->publish_date : $item->created_at;\n            if (!empty($item->expCat[0]->title)) $rss_item->category = array($item->expCat[0]->title);\n            $comment_count = expCommentController::countComments(array('content_id' => $item->id, 'content_type' => $this->basemodel_name));\n            if ($comment_count) {\n                $rss_item->comments = makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $item->sef_url)) . '#exp-comments';\n//                $rss_item->commentsRSS = makeLink(array('controller'=>$this->baseclassname, 'action'=>'show', 'title'=>$item->sef_url)).'#exp-comments';\n                $rss_item->commentsCount = $comment_count;\n            }\n            $rssitems[$key] = $rss_item;\n\n            if ($limit && count($rssitems) >= $limit)\n                break;\n        }\n        return $rssitems;\n    }\n\n    /**\n     * method to display an rss feed from this module\n     */\n    public function rss() {\n        require_once(BASE . 'external/feedcreator.class.php');\n\n        $id = isset($this->params['title']) ? expString::escape($this->params['title']) : (isset($this->params['id']) ? $this->params['id'] : null);\n        if (empty($id)) {\n            $module = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n            $id = array('module' => $module, 'src' => $this->params['src']);\n        }\n        $site_rss = new expRss($id);\n        if ($site_rss->enable_rss == true && !empty($site_rss->id)) {\n            $site_rss->title = empty($site_rss->title) ? gt('RSS for') . ' ' . URL_FULL : $site_rss->title;\n            $site_rss->feed_desc = empty($site_rss->feed_desc) ? gt('This is an RSS syndication from') . ' ' . HOSTNAME : $site_rss->feed_desc;\n//            if (isset($site_rss->rss_cachetime)) {\n//                $ttl = $site_rss->rss_cachetime;\n//            }\n            if ($site_rss->rss_cachetime == 0) {\n                $site_rss->rss_cachetime = 1440;\n            }\n\n            if (!empty($site_rss->itunes_cats)) {\n                $ic = explode(\";\", $site_rss->itunes_cats);\n                $x = 0;\n                $itunes_cats = array();\n                foreach ($ic as $cat) {\n                    $cat_sub = explode(\":\", $cat);\n                    $itunes_cats[$x]->category = $cat_sub[0];\n                    if (isset($cat_sub[1])) {\n                        $itunes_cats[$x]->subcategory = $cat_sub[1];\n                    }\n                    $x++;\n                }\n            }\n\n            // NO buffering from here on out or things break unexpectedly. - RAM\n            ob_end_clean();\n\n            header('Content-Type: ' . 'application/rss+xml');\n//            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n//            header('Content-Transfer-Encoding: binary');\n            header('Content-Encoding:');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n                header('Vary: User-Agent');\n            } else {\n                header('Pragma: no-cache');\n            }\n\n            if ($site_rss->rss_is_podcast) {\n                $feed_type = \"PODCAST\";\n            } else {\n                $feed_type = \"RSS2.0\";\n            }\n            $feed_cache = BASE . 'tmp/rsscache/' . $site_rss->sef_url . '.xml';\n\n            $rss = new UniversalFeedCreator();\n//            if (file_exists(THEME_ABSOLUTE . \"rss/feed.css\"))  // custom css style\n//                $rss->cssStyleSheet = THEME_RELATIVE . \"rss/feed.css\";\n            if (file_exists(THEME_ABSOLUTE . \"rss/feed.xsl\"))  // custom xml style\n                $rss->xslStyleSheet = THEME_RELATIVE . \"rss/feed.xsl\";\n            $rss->useCached($feed_type, $feed_cache, $site_rss->rss_cachetime);  // if cache exists output then redirect\n\n            $rss->title = $site_rss->title;\n            if (!empty($this->params['type']))\n                $rss->title .= ' ' . ucfirst($this->params['type']);\n            $rss->description = $site_rss->feed_desc;\n            $rss->image = new FeedImage();\n            $rss->image->url = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url : URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n            $rss->image->title = $site_rss->title;\n            $rss->image->link = URL_FULL;\n            //    $rss->image->width = 64;\n            //    $rss->image->height = 64;\n            $rss->ttl = $site_rss->rss_cachetime;\n            $rss->link = URL_FULL;\n            $rss->language = LOCALE;\n            $rss->syndicationURL = makeLink(array('module'=>$site_rss->module, 'src'=>$site_rss->src));\n            if ($site_rss->rss_is_podcast) {\n                $rss->itunes = new iTunes();\n                $rss->itunes->author = !empty($site_rss->feed_artist) ? $site_rss->feed_artist : ORGANIZATION_NAME;\n                $rss->itunes->image = !empty($site_rss->expFile['album'][0]) ? $site_rss->expFile['album'][0]->url :URL_FULL . 'themes/' . DISPLAY_THEME . '/images/logo.png';\n                $rss->itunes->summary = $site_rss->feed_desc;\n                if (!empty($itunes_cats)) {\n                    $rss->itunes->category = $itunes_cats[0]->category;\n                    $rss->itunes->subcategory = $itunes_cats[0]->subcategory;\n                }\n                //\t\t$rss->itunes->explicit = 0;\n//                $rss->itunes->subtitle = $site_rss->title;\n                $rss->itunes->subtitle = $site_rss->feed_desc;\n                //\t\t$rss->itunes->keywords = 0;\n                $rss->itunes->owner_email = SMTP_FROMADDRESS;\n                $rss->itunes->owner_name = ORGANIZATION_NAME;\n            }\n\n            $pubDate = '';\n            $site_rss->params = $this->params;\n            foreach ($site_rss->getFeedItems($site_rss->rss_limit) as $item) {\n                if ($item->date > $pubDate) {\n                    $pubDate = $item->date;\n                }\n                $rss->addItem($item);\n            }\n            if (!empty($site_rss->rss_limit)) {\n                $rss->items = array_slice($rss->items, 0, $site_rss->rss_limit);\n            }\n            $rss->pubDate = $pubDate;\n\n//            echo $rss->createFeed($feed_type);\n            echo $rss->saveFeed($feed_type, $feed_cache, $site_rss->rss_cachetime);  // does redirect after updating cache\n        } else {\n            flash('notice', gt(\"This RSS feed is not available.\"));\n            expHistory::back();\n        }\n\n        //Read the file out directly\n        exit();\n    }\n\n    /**\n     * download a file attached to item\n     */\n    public function downloadfile() {\n        if (!isset($this->config['allowdownloads']) || $this->config['allowdownloads'] == true) {\n            //if ($db->selectObject('content_expFiles', 'content_type=\"'.$this->baseclassname.'\" AND expfiles_id='.$this->params['id']) != null) {\n            expFile::download($this->params['id']);\n            //}\n        } else {\n            flash('error', gt('Downloads have not been enabled for this file'));\n            expHistory::back();\n        }\n\n    }\n\n    /**\n     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n     *\n     * @return array\n     */\n    public function permissions() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->add_permissions);\n        return $perms;\n    }\n\n    /**\n     * permission functions to aggregate a module's permissions based on add/remove and manage permissions\n     *\n     * @return array\n     */\n    public function permissions_all() {\n        //set the permissions array\n        $perms = array();\n        foreach ($this->permissions as $perm => $name) {\n            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n        }\n        $perms = array_merge($perms, $this->m_permissions, $this->add_permissions, $this->manage_permissions);\n        return $perms;\n    }\n\n    // create a psuedo global permission specific to the module; return true grants permission, false continues with other permission checks\n    public static function checkPermissions($permission, $location) {\n        return false;\n    }\n\n    /**\n     * get the model(s) associated with this module\n     *\n     * @return array\n     */\n    public function getModels() {\n        return isset($this->models) ? $this->models : array($this->basemodel_name);\n    }\n\n    /**\n     * type of items searched in the module\n     *\n     * @return string\n     */\n    public function searchName() {\n        return static::displayname();\n    }\n\n    /**\n     * category of items searched in the module\n     *\n     * @return string\n     */\n    public function searchCategory() {\n        return $this->basemodel_name;\n    }\n\n    /**\n     * add module items to search index\n     *\n     * @return int\n     */\n    public function addContentToSearch() {\n//        global $db, $router;\n        global $db;\n\n        $count = 0;\n        $model = new $this->basemodel_name(null, false, false);\n        $where = (!empty($this->params['id'])) ? 'id=' . $this->params['id'] : null;\n        $content = $db->selectArrays($model->tablename, $where);\n        foreach ($content as $cnt) {\n            $origid = $cnt['id'];\n            unset($cnt['id']);\n           //build the search record and save it.\n//            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->classname . \"'\";\n            $sql = \"original_id=\" . $origid . \" AND ref_module='\" . $this->baseclassname . \"'\";\n            $oldindex = $db->selectObject('search', $sql);\n            if (!empty($oldindex)) {\n                $search_record = new search($oldindex->id, false, false);\n                $search_record->update($cnt);\n            } else {\n                $search_record = new search($cnt, false, false);\n            }\n\n            //build the search record and save it.\n            $search_record->original_id = $origid;\n            $search_record->posted = empty($cnt['created_at']) ? null : $cnt['created_at'];\n            // get the location data for this content\n            if (isset($cnt['location_data']))\n                $loc = expUnserialize($cnt['location_data']);\n            $src = isset($loc->src) ? $loc->src : null;\n            if (!empty($cnt['sef_url'])) {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'title' => $cnt['sef_url'])));\n            } else {\n                $link = str_replace(URL_FULL, '', makeLink(array('controller' => $this->baseclassname, 'action' => 'show', 'id' => $origid, 'src' => $src)));\n            }\n//\t        if (empty($search_record->title)) $search_record->title = 'Untitled';\n            $search_record->view_link = $link;\n//            $search_record->ref_module = $this->classname;\n            $search_record->ref_module = $this->baseclassname;\n            $search_record->category = $this->searchName();\n            $search_record->ref_type = $this->searchCategory();\n            $search_record->save();\n            $count++;\n        }\n\n        return $count;\n    }\n\n    /**\n     * additional check for display of search hit\n     *\n     * @param $record\n     *\n     * @return bool\n     */\n    public static function searchHit($record) {\n        return true;  // default is to display search hit\n    }\n\n    /**\n     * remove all module items from search index\n     */\n    public function delete_search() {\n        global $db;\n        // remove this modules entries from the search table.\n        if ($this->isSearchable()) {\n//            $where = \"ref_module='\" . $this->classname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n            $where = \"ref_module='\" . $this->baseclassname . \"' AND location_data='\" . serialize($this->loc) . \"'\";\n//            $test = $db->selectObjects('search', $where);\n            $db->delete('search', $where);\n        }\n    }\n\n    /**\n     * delete module and all its items for backwards compat with old modules\n     *\n     * @param $loc\n     */\n    public function delete_In($loc) {\n        $this->delete_instance($loc);\n    }\n\n    /**\n     * delete module, config, and all its items\n     * @param bool $loc\n     */\n    public function delete_instance($loc = false) {\n        $model = new $this->basemodel_name();\n        $where = 1;\n        if ($loc || static::hasSources())\n            $where = \"location_data='\" . serialize($this->loc) . \"'\";\n        $items = $model->find('all',$where);\n        foreach ($items as $item) {\n            $item->delete();  // model should delete attachments and other associated objects\n        }\n        $cfg = new expConfig($this->loc);\n        $cfg->delete();\n    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    public function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action we are in.\n        $action = $router->params['action'];\n        $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n        $modelname = $this->basemodel_name;\n\n        switch ($action) {\n            case 'showall':\n                $metainfo['title'] = gt(\"Showing\") . \" \" . static::displayname() . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            case 'show':\n            case 'showByTitle':\n                // look up the record.\n                if (isset($router->params['id']) || isset($router->params['title'])) {\n                    $lookup = isset($router->params['id']) ? $router->params['id'] : $router->params['title'];\n                    $object = new $modelname($lookup);\n                    // set the meta info\n                    if (!empty($object)) {\n                        if (!empty($object->body)) {\n                            $desc = str_replace('\"',\"'\",expString::summarize($object->body,'html','para'));\n                        } else {\n                            $desc = SITE_DESCRIPTION;\n                        }\n                        if (!empty($object->expTag)) {\n                            $keyw = '';\n                            foreach ($object->expTag as $tag) {\n                                if (!empty($keyw)) $keyw .= ', ';\n                                $keyw .= $tag->title;\n                            }\n                        } else {\n                            $keyw = SITE_KEYWORDS;\n                        }\n                        $metainfo['title'] = empty($object->meta_title) ? $object->title : $object->meta_title;\n                        $metainfo['keywords'] = empty($object->meta_keywords) ? $keyw : $object->meta_keywords;\n                        $metainfo['description'] = empty($object->meta_description) ? $desc : $object->meta_description;\n//                        $metainfo['canonical'] = empty($object->canonical) ? URL_FULL.substr($router->sefPath, 1) : $object->canonical;\n                        $metainfo['canonical'] = empty($object->canonical) ? $router->plainPath() : $object->canonical;\n                        $metainfo['noindex'] = empty($object->meta_noindex) ? false : $object->meta_noindex;\n                        $metainfo['nofollow'] = empty($object->meta_nofollow) ? false : $object->meta_nofollow;\n                        $metainfo['rich'] = $this->meta_rich($router->params, $object);\n                        $metainfo['fb'] = $this->meta_fb($router->params, $object, $metainfo['canonical']);\n                        $metainfo['tw'] = $this->meta_tw($router->params, $object, $metainfo['canonical']);\n                    }\n                    break;\n                }\n            default:\n                //check for a function in the controller called 'action'_meta and use it if so\n                $functionName = $action . \"_meta\";\n                $mod = new $this->classname;\n                if (method_exists($mod, $functionName)) {\n                    $metainfo = $mod->$functionName($router->params);\n                } else {\n                    $metainfo['title'] = static::displayname() . \" - \" . SITE_TITLE;\n                    $metainfo['keywords'] = SITE_KEYWORDS;\n                    $metainfo['description'] = SITE_DESCRIPTION;\n//                    $metainfo['canonical'] = URL_FULL.substr($router->sefPath, 1);\n                    $metainfo['canonical'] = $router->plainPath();\n                }\n        }\n\n        return $metainfo;\n    }\n\n    /**\n     * Returns rich snippet PageMap meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return null\n     */\n    public function meta_rich($request, $object) {\n        return null;\n    }\n\n    /**\n     * Returns Facebook og: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_fb($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * Returns Twitter twitter: meta data\n     *\n     * @param $request\n     * @param $object\n     *\n     * @return array\n     */\n    public function meta_tw($request, $object, $canonical) {\n        return array();\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_tags_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['tag'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $tag = $request['tag'];\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('tagged as') . ' ' . $tag;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = $request['tag'];\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * action specific metainfo\n     *\n     * @param $request\n     * @return array\n     */\n    public function showall_by_date_meta($request) {\n        global $router;\n\n        // look up the record.\n        if (isset($request['month'])) {\n            $metainfo = array('title' => '', 'keywords' => '', 'description' => '', 'canonical' => '', 'noindex' => false, 'nofollow' => false);\n            $mk = mktime(0, 0, 0, $request['month'], 01, $request['year']);\n            $ts = strftime('%B, %Y', $mk);\n            // set the meta info\n            $metainfo['title'] = gt('Showing all') . ' ' . ucwords($this->basemodel_name) . ' ' . gt('written in') . ' ' . $ts;\n//            $metainfo['keywords'] = empty($object->meta_keywords) ? SITE_KEYWORDS : $object->meta_keywords; //FIXME $object not set\n            $metainfo['keywords'] = SITE_KEYWORDS;\n//            $metainfo['description'] = empty($object->meta_description) ? SITE_DESCRIPTION : $object->meta_description; //FIXME $object not set\n            $metainfo['description'] = SITE_DESCRIPTION;\n//            $metainfo['canonical'] = empty($object->canonical) ? URL_FULL . substr($router->sefPath, 1) : $object->canonical; //FIXME $object not set\n//            $metainfo['canonical'] = URL_FULL . substr($router->sefPath, 1);\n            $metainfo['canonical'] = $router->plainPath();\n            return $metainfo;\n        }\n        return null;\n    }\n\n    /**\n     * approve module item\n     */\n    public function approve() {\n        $modelname = $this->basemodel_name;\n        $lookup = isset($this->params['id']) ? $this->params['id'] : $this->params['title'];\n        $object = new $modelname($lookup);\n        $object->approved = true;\n        $object->save(false, true);  // we don't want to add this approval as a new revision\n        expHistory::back();\n    }\n\n    /**\n     * The aggregateWhereClause function creates a sql where clause which also includes aggregated module content\n     *\n     * @param string $type\n     *\n     * @return string\n     */\n    public function aggregateWhereClause($type='') {\n        global $user;\n\n        $sql = '';\n\n        if (empty($this->config['add_source']) && !static::hasSources()) {\n            return $sql;\n        }\n\n        if (!empty($this->config['aggregate'])) $sql .= '(';\n\n        $sql .= \"location_data ='\" . serialize($this->loc) . \"'\";\n\n        if (!empty($this->config['aggregate'])) {\n            foreach ($this->config['aggregate'] as $src) {\n                $loc = expCore::makeLocation($this->baseclassname, $src);\n                $sql .= \" OR location_data ='\" . serialize($loc) . \"'\";\n            }\n\n            $sql .= ')';\n        }\n        $model = $this->basemodel_name;\n        if (ENABLE_WORKFLOW && $this->$model->needs_approval) {\n            if ($user->id) {\n                $sql .= ' AND (approved=1 OR poster=' . $user->id . ' OR editor=' . $user->id . ')';\n            } else {\n                $sql .= ' AND approved=1';\n            }\n        }\n\n        return $sql;\n    }\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n//Global Variables\n\n// expModules\n/**\n * Stores the list of available/active controllers\n * @var array $available_controllers\n * @name $available_controllers\n */\n$available_controllers = array();\n\n// expTheme\n/**\n * Stores the theme validation flags\n * @var array $validateTheme does theme have header & footer\n * @name $validateTheme\n */\n$validateTheme = array(\"headerinfo\"=>false,\"footerinfo\"=>false);\n/**\n * Stores the list of module scopes\n * @var array $module_scope\n * @name $module_scope\n */\n$module_scope = array();\n/**\n * Stores the theme framework\n * @var integer $framework\n * @name $framework\n */\n$framework = null;\n\n// expLang\n/**\n * Stores the list of language strings for the current language\n * @var array $cur_lang\n * @name $cur_lang\n */\n$cur_lang = array();\n/**\n * Stores the list of language strings for the default language (English - US)\n * @var array $default_lang\n * @name $default_lang\n */\n$default_lang = array();\n/**\n * Stores the list of language specific strings specific to the theme\n * @var array $custom_lang\n * @name $custom_lang\n */\n$custom_lang = array();\n/**\n * Stores the name of the default language file\n * @var array $default_lang_file\n * @name $default_lang_file\n */\n$default_lang_file = '';\n/**\n * Stores the name of the language file to be created\n * @var array $target_lang_file\n * @name $target_lang_file\n */\n$target_lang_file = '';\n\n// expDatabase\n/**\n * Stores the exponent database object\n * @var \\database $db the exponent database object\n * @name $db\n */\n$db = new stdClass();\n\n// expHistory\n/**\n * Stores the browsing history object\n * @var expHistory $history\n * @name $history\n */\n$history = new stdClass();\n\n// user model\n/**\n * Stores the current user object\n * @var user $user\n * @name $user\n */\n$user = new stdClass();\n/**\n * This global array belongs exclusively to the user model, and is used to cache\n * users as they are retrieved, to help out with performance when doing a lot of\n * work with user accounts and profile information.\n * @var array $SYS_USERS_CACHE\n * @name $SYS_USERS_CACHE\n */\n$SYS_USERS_CACHE = array();\n\n// expRouter\n/**\n * Stores the routing/link/url object\n * @var expRouter $router\n * @name $router\n */\n$router = new stdClass();\n/**\n * Stores the routing/link/url object\n * @var section $sectionObj\n * @name $sectionObj\n */\n$sectionObj = new stdClass();\n\n// expCore\n/**\n * Stores the list of sections/pages for the site\n * @var array $sections\n * @name $sections\n */\n$sections = array();\n// expPermissions\n/**\n * Stores the permission data for the current user.\n * This should not be modified by anything outside of the permissions subsystem.\n * @var array $exponent_permissions_r\n * @name $exponent_permissions_r\n */\n$exponent_permissions_r = array();\n\n// expJavascript\n/**\n * Stores the page's inline javascript code\n * @var array $js2foot\n * @name $js2foot\n */\n$js2foot = array();\n/**\n * Stores the yui3 javascript files list\n * @var array $yui3js\n * @name $yui3js\n */\n$yui3js = false;\n/**\n * Stores the jquery javascript files list\n * @var array $jqueryjs\n * @name $jqueryjs\n */\n$jqueryjs = array();\n/**\n * Stores the twitter bootstrap javascript file list\n * @var array $bootstrapjs\n * @name $bootstrapjs\n */\n$bootstrapjs = array();\n/**\n * Stores the 'other' javascript files list\n * @var array $expJS\n * @name $expJS\n */\n$expJS = array();\n\n// expCSS\n/**\n * Stores the user's less global variables\n * @var array $less_vars\n * @name $less_vars\n */\n$less_vars = array();\n/**\n * Stores the user's css files to load first\n * @var array $css_primer\n * @name $css_primer\n */\n$css_primer = array();\n/**\n * Stores the user's css core/system files\n * @var array $css_core\n * @name $css_core\n */\n$css_core = array();\n/**\n * Stores the user's css files\n * @var array $css_links\n * @name $css_links\n */\n$css_links = array();\n/**\n * Stores the user's css files\n * @var array $css_theme\n * @name $css_theme\n */\n$css_theme = array();\n/**\n * Stores the user's css files\n * @var array $css_inline\n * @name $css_inline\n */\n$css_inline = array();\n/**\n * Stores the user's css files\n * @var array $head_config\n * @name $head_config\n */\n$head_config = array();\n/**\n * Stores the user's css files\n * @var string $jsForHead\n * @name $jsForHead\n */\n$jsForHead = \"\";\n/**\n * Stores the user's css files\n * @var string $cssForHead\n * @name $cssForHead\n */\n$cssForHead = \"\";\n\n// expTemplate\n/**\n * Stores the global template\n * @var \\basetemplate $template\n * @name $template\n */\n$template = null;\n\n// expTimer\n/**\n * Stores the timer\n * @var expTimer $timer\n * @name $timer\n */\n$timer = null;\n\n// e-commerce\n/**\n * Stores the order\n * @var \\order $order\n * @name $order\n */\n$order = null;\n\n/**\n * Main module action/display logic/routine; initializes/checks controller before calling action/method\n *\n * @param array $parms\n * @return bool|mixed|string\n */\nfunction renderAction(array $parms=array()) {\n    global $user, $db;\n\n    //Get some info about the controller\n//    $baseControllerName = expModules::getControllerName($parms['controller']);\n    $fullControllerName = expModules::getControllerClassName($parms['controller']);\n    if (expModules::controllerExists($fullControllerName)) {\n        $controllerClass = new ReflectionClass($fullControllerName);\n    } else {\n        return sprintf(gt('The module \"%s\" was not found in the system'), $parms['controller']);\n    }\n\n    if (isset($parms['view'])) $parms['view'] = urldecode($parms['view']);\n    // Figure out the action to use...if the specified action doesn't exist then we look for the showall action.\n    if ($controllerClass->hasMethod($parms['action'])) {\n        $action = $parms['action'];\n        /* TODO:  Not sure if we need to check for private methods to be here. FJD\n\t\t$meth = $controllerClass->getMethod($action);\n        if ($meth->isPrivate()) expQueue::flashAndFlow('error', gt('The requested action could not be performed: Action not found'));*/\n    } elseif ($controllerClass->hasMethod('showall')) {\n        //note every invalid command gets converted to 'showall'\n        $parms['action'] = 'showall';\n        $action = 'showall';\n    } else {\n        expQueue::flashAndFlow('error', gt('The requested action could not be performed: Action not found'));\n    }\n\n    // initialize the controller.\n    $src = isset($parms['src']) ? $parms['src'] : null;\n    $controller = new $fullControllerName($src, $parms);\n\n    //Set up the correct template to use for this action\n    global $template;\n    $view = !empty($parms['view']) ? $parms['view'] : $action;\n    $template = expTemplate::get_template_for_action($controller, $view, $controller->loc);\n\n    //setup default model(s) for this controller's actions to use\n    foreach ($controller->getModels() as $model) {\n        $controller->$model = new $model(null,false,false);   //added null,false,false to reduce unnecessary queries. FJD\n        // flag for needing approval check\n        if ($controller->$model->supports_revisions && ENABLE_WORKFLOW) {\n            $uilevel = 99;\n            if (expSession::exists(\"uilevel\")) $uilevel = expSession::get(\"uilevel\");\n            if (!expPermissions::check('approve', $controller->loc)) {\n                $controller->$model->needs_approval = true;\n            } elseif (isset($uilevel) && $uilevel == UILEVEL_PREVIEW) {\n                $controller->$model->needs_approval = true;\n            }\n        }\n    }\n\n// FIXME this is now handled by the template class during get_template_for_action since it only sets template variables\n    // have the controller assign knowledge about itself to the template.\n    // this has to be done after the controller gets the template for its actions\n//    $controller->moduleSelfAwareness();\n\n    //if this controller is being called by a container then we should have a module title.\n    if (isset($parms['moduletitle'])) {\n        $template->assign('moduletitle', $parms['moduletitle']);\n    } else {\n        $title = new stdClass();\n        $title->mod = $controller->loc->mod;\n        $title->src = $controller->loc->src;\n        $title->int = '';\n        $template->assign('moduletitle', $db->selectValue('container', 'title', \"internal='\".serialize($title).\"'\"));\n    }\n\n    // check the perms for this action\n    $perms = $controller->permissions_all();\n\n    $common_action = null;\n    // action convention for controllers that manage more than one model (datatype).\n    // if you preface the name action name with a common crud action name we can check perms on\n    // it with the developer needing to specify any...better safe than sorry.\n    // i.e if the action is edit_mymodel it will be checked against the edit permission\n    if (stristr($parms['action'], '_'))\n        $parts = explode(\"_\", $parms['action']);\n    else\n        $parts = preg_split('/(?=[A-Z])/', $parms['action']);  // account for actions with camelCase action/perm such as editItem\n    $common_action = isset($parts[0]) ? $parts[0] : null;\n    // we have to treat the update permission a little different..it's tied to the create/edit\n    // permissions.  Really the only way this will fail will be if someone bypasses the perm check\n    // on the edit form somehow..like a hacker trying to bypass the form and just submit straight to\n    // the action. To safeguard, we'll catch if the action is update and change it either to create or\n    // edit depending on whether an id param is passed to. that should be sufficient.\n    if ($parms['action'] == 'update' || $common_action == 'update') {\n        $perm_action = (!isset($parms['id']) || $parms['id'] == 0) ? 'create' : 'edit';\n    } elseif (($parms['action'] == 'edit' || $common_action == 'edit') && (!isset($parms['id']) || $parms['id'] == 0)) {\n        $perm_action = 'create';\n    } elseif ($parms['action'] == 'saveconfig') {\n        $perm_action = 'configure';\n    } else {\n        $perm_action = $parms['action'];\n    }\n\n    // Here is where we check for ownership of an item and 'create' perm\n    if (($parms['action'] == 'edit' || $parms['action'] == 'update' || $parms['action'] == 'delete' ||\n        $common_action == 'edit' || $common_action == 'update' || $common_action == 'delete') && !empty($parms['id'])) {\n        $theaction = !empty($common_action) ? $common_action : $parms['action'];\n        $owner = $db->selectValue($model, 'poster', 'id=' . $parms['id']);\n        if ($owner == $user->id && !expPermissions::check($theaction, $controller->loc) && expPermissions::check('create', $controller->loc)) {\n            $perm_action = 'create';\n        }\n    }\n\n    if (!DISABLE_PRIVACY) {\n        // check to see if it's on a private page and we shouldn't see it\n        if ($perm_action == 'showall' || $perm_action == 'show' || $perm_action == 'downloadfile' || $common_action == 'showall' || $common_action == 'show' || $common_action == 'downloadfile') {\n            $loc = null;\n            if (!empty($parms['src'])) {\n                $loc = expCore::makeLocation($parms['controller'], $parms['src']);\n            } elseif (!empty($parms['id']) || !empty($parms['title']) || !empty($parms['sef_url'])) {\n                if (!empty($parms['id'])) {\n                    $record = new $controller->basemodel_name($parms['id']);\n                } elseif (!empty($parms['title'])) {\n                    $record = new $controller->basemodel_name($parms['title']);\n                } elseif (!empty($parms['sef_url'])) {\n                    $record = new $controller->basemodel_name($parms['sef_url']);\n                }\n                if (!empty($record->location_data)) $loc = expUnserialize($record->location_data);\n            }\n            if (!empty($loc)) {\n                $section = new section();\n                $sectionref = new sectionref();\n                $container = new container();\n                $secref = $sectionref->find('first',\"module='\".$parms['controller'].\"' AND source='\" . $loc->src . \"'\");\n                if (!empty($secref->section)) {\n                    $page = $section->find('first','id=' . $secref->section);  // only one page can have the section id#\n                    $module = $container->find('first',\"internal='\" . serialize($loc) . \"'\");  // only one container can have the internal == location\n                    if ($page !== null && $module !== null && !empty($page->id) && (empty($page->public) || !empty($module->is_private))) {\n                        // we've found the page and module/container and it's either a private page or private module\n                        if (!expPermissions::check('view',expCore::makeLocation('navigation', $page->id))) {\n                            if (expTheme::inAction()) {\n                                flash('error', gt(\"You don't have permission to view that item\"));\n                                notfoundController::handle_not_authorized();\n                                expHistory::returnTo('viewable');\n                            } else {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // deal with lower case only to prevent hacking reflection function names\n    $lc_perms = array_change_key_case($perms);\n    $lc_perm_action = strtolower($perm_action);\n    $lc_common_action = strtolower($common_action);\n    //FIXME? if the assoc $perm doesn't exist, the 'action' will ALWAYS be allowed, e.g., default is to allow action\n    if (array_key_exists($lc_perm_action, $lc_perms)) {\n        if (!expPermissions::check($perm_action, $controller->loc)) {\n            if (expTheme::inAction()) {\n                flash('error', gt(\"You don't have permission to\").\" \".$lc_perms[$lc_perm_action]);\n                notfoundController::handle_not_authorized();\n                expHistory::returnTo('viewable');\n            } else {\n                return false;\n            }\n        }\n    } elseif (array_key_exists($lc_common_action, $lc_perms)) {\n        if (!expPermissions::check($common_action, $controller->loc)) {\n            if (expTheme::inAction()) {\n                flash('error', gt(\"You don't have permission to\").\" \".$lc_perms[$lc_common_action]);\n                notfoundController::handle_not_authorized();\n                expHistory::returnTo('viewable');\n            } else {\n                return false;\n            }\n        }\n    } elseif (array_key_exists($lc_perm_action, $controller->requires_login)) {\n        // check if the action requires the user to at least be logged in\n        if (!$user->isLoggedIn()) {\n            $msg = empty($controller->requires_login[$lc_perm_action]) ? gt(\"You must be logged in to perform this action\") : gt($controller->requires_login[$lc_perm_action]);\n            flash('error', $msg);\n            notfoundController::handle_not_authorized();\n            expHistory::redirecto_login();\n        }\n    } elseif (array_key_exists($lc_common_action, $controller->requires_login)) {\n        // check if the common action requires the user to at least be logged in\n        if (!$user->isLoggedIn()) {\n            $msg = empty($controller->requires_login[$lc_common_action]) ? gt(\"You must be logged in to perform this action\") : gt($controller->requires_login[$lc_common_action]);\n            flash('error', $msg);\n            notfoundController::handle_not_authorized();\n            expHistory::redirecto_login();\n        }\n    }\n\n    // register this controllers permissions to the view for in view perm checks\n    $template->register_permissions(array_keys($perms), $controller->loc);\n\n    // globalizing $user inside all templates\n    $template->assign('user', $user);\n\n    // lastly, run the action which can also override the above assignments\n    $controller->$action();\n\n    if (empty($parms['no_output'])) {\n        $template->output();\n    } else {\n        $html = $template->render();\n        return $html;\n    }\n}\n\nfunction hotspot($source = null) {\n    if (!empty($source)) {\n        global $sectionObj;\n\n\t    //FIXME there is NO 'page' object and section has no _construct method\n        $page = new section($sectionObj->id);\n        $modules = $page->getModulesBySource($source);  //FIXME there is no getModulesBySource method anywhere\n        //eDebug($modules);exit();\n\n        foreach ($modules as $module) {\n            renderAction(array('controller'=>$module->type, 'action'=>$module->action, 'instance'=>$module->id));\n        }\n    }\n}\n\nfunction makeLink($params=array(), $secure=false) {\n    global $router;\n\n    if(!is_array($params) || count($params) == 0) return false;\n    $secure = empty($secure) ? false : true;\n    return $router->makeLink($params, false, $secure);\n}\n\nfunction redirect_to($params=array(), $secure=false) {\n    global $router;\n\n    $secure = empty($secure) ? false : true;\n    $link = (!is_array($params)) ? $params : $router->makeLink($params, false, $secure);\n    header(\"Location: \" . $link);\n    exit();\n}\n\nfunction flash($name, $msg) {\n    expQueue::flash($name, $msg);\n}\n\nfunction flashAndFlow($name, $msg) {\n    expQueue::flashAndFlow($name, $msg);\n}\n\n/**\n * Display the message queue\n *\n * @param null $name\n * @return bool|mixed|string\n */\nfunction show_msg_queue($name=null) {\n    return expQueue::show($name);\n}\n\n/**\n * Assign a variable to the current template\n *\n * @param array $vars\n * @return bool\n */\nfunction assign_to_template(array $vars=array()) {\n    global $template;\n\n    if (empty($template) || count($vars) == 0) return false;\n    foreach ($vars as $key=>$val) {\n        $template->assign($key, $val);\n    }\n}\n\nfunction get_model_for_controller($controller_name) {\n    //FIXME this works by making assumptions\n    $start_pos = stripos($controller_name, 'controller');\n    if ($start_pos === false) {\n        return false;\n    } else {\n        return substr($controller_name, 0, $start_pos);\n    }\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_common_template($view, $loc, $controllername='') {\n    return expTemplate::get_common_template($view, $loc, $controllername);\n\n    $controller = new stdClass();\n    $controller->baseclassname = empty($controllername) ? 'common' : $controllername;\n    $controller->loc = $loc;\n\n    $themepath = BASE . 'themes/' . DISPLAY_THEME . '/modules/common/views/' . $controllername . '/' . $view . '.tpl';\n    $basenewuipath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.newui.tpl';\n    $basepath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.tpl';\n\n    if (bs(true)) {\n        $basebstrap3path = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.bootstrap3.tpl';\n        $basebstrappath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.bootstrap.tpl';\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller, $themepath);\n        } elseif (bs3(true) && file_exists($basebstrap3path)) {\n            return new controllertemplate($controller, $basebstrap3path);\n        } elseif (file_exists($basebstrappath)) {\n            return new controllertemplate($controller, $basebstrappath);\n        } elseif(newui() && file_exists($basenewuipath)) {  //FIXME is this the correct sequence spot?\n            return new controllertemplate($controller,$basenewuipath);\n        } elseif (file_exists($basepath)) {\n            return new controllertemplate($controller, $basepath);\n        } else {\n            return new controllertemplate($controller, BASE.'framework/modules/common/views/scaffold/blank.tpl');\n        }\n    } else {\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller,$themepath);\n        } elseif (newui() && file_exists($basenewuipath)) {\n            return new controllertemplate($controller,$basenewuipath);\n        } elseif(file_exists($basepath)) {\n            return new controllertemplate($controller,$basepath);\n        } else {\n            return new controllertemplate($controller, BASE.'framework/modules/common/views/scaffold/blank.tpl');\n        }\n    }\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_config_templates($controller, $loc) {\n    return expTemplate::get_config_templates($controller, $loc);\n\n//    global $db;\n\n    // set paths we will search in for the view\n    $commonpaths = array(\n        BASE.'framework/modules/common/views/configure',\n        BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/configure',\n    );\n\n    $modpaths = array(\n        $controller->viewpath.'/configure',\n\t    BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n    );\n\n    // get the common configuration files\n    $common_views = expTemplate::find_config_views($commonpaths, $controller->remove_configs);\n    foreach ($common_views as $key=>$value) {\n        $common_views[$key]['name'] = gt($value['name']);\n    }\n    $moduleconfig = array();\n    if (!empty($common_views['module'])) $moduleconfig['module'] = $common_views['module'];\n    unset($common_views['module']);\n\n    // get the config views for the module\n    $module_views = expTemplate::find_config_views($modpaths);\n    foreach ($module_views as $key=>$value) {\n        $module_views[$key]['name'] = gt($value['name']);\n    }\n\n    // look for a config form for this module's current view\n//    $controller->loc->mod = expModules::getControllerClassName($controller->loc->mod);\n    //check to see if hcview was passed along, indicating a hard-coded module\n//    if (!empty($controller->params['hcview'])) {\n//        $viewname = $controller->params['hcview'];\n//    } else {\n//        $viewname = $db->selectValue('container', 'view', \"internal='\".serialize($controller->loc).\"'\");\n//    }\n//    $viewconfig = $viewname.'.config';\n//    foreach ($modpaths as $path) {\n//        if (file_exists($path.'/'.$viewconfig)) {\n//            $fileparts = explode('_', $viewname);\n//            if ($fileparts[0]=='show'||$fileparts[0]=='showall') array_shift($fileparts);\n//            $module_views[$viewname]['name'] = ucwords(implode(' ', $fileparts)).' '.gt('View Configuration');\n//            $module_views[$viewname]['file'] =$path.'/'.$viewconfig;\n//        }\n//    }\n\n    // sort the views highest to lowest by filename\n    // we are reverse sorting now so our array merge\n    // will overwrite property..we will run array_reverse\n    // when we're finished to get them back in the right order\n    krsort($common_views);\n    krsort($module_views);\n\n    if (!empty($moduleconfig)) $common_views = array_merge($common_views, $moduleconfig);\n    $views = array_merge($common_views, $module_views);\n    $views = array_reverse($views);\n\n    return $views;\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction find_config_views($paths=array(), $excludes=array()) {\n    return expTemplate::find_config_views($paths, $excludes);\n\n    $views = array();\n    foreach ($paths as $path) {\n        if (is_readable($path)) {\n            $dh = opendir($path);\n            while (($file = readdir($dh)) !== false) {\n                if (is_readable($path.'/'.$file) && substr($file, -4) == '.tpl' && substr($file, -14) != '.bootstrap.tpl' && substr($file, -15) != '.bootstrap3.tpl' && substr($file, -10) != '.newui.tpl') {\n                    $filename = substr($file, 0, -4);\n                    if (!in_array($filename, $excludes)) {\n                        $fileparts = explode('_', $filename);\n                        $views[$filename]['name'] = ucwords(implode(' ', $fileparts));\n                        $views[$filename]['file'] = $path.'/'.$file;\n                        if ((bs(true)) && file_exists($path.'/'.$filename.'.bootstrap.tpl')) {\n                            $views[$filename]['file'] = $path . '/' . $filename . '.bootstrap.tpl';\n                        }\n                        if (bs3() && file_exists($path.'/'.$filename.'.bootstrap3.tpl')) {\n                            $views[$filename]['file'] = $path.'/'.$filename.'.bootstrap3.tpl';\n                        }\n                        if (newui() && file_exists($path.'/'.$filename.'.newui.tpl')) {  //FIXME newui take priority\n                            $views[$filename]['file'] = $path.'/'.$filename.'.newui.tpl';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return $views;\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_template_for_action($controller, $action, $loc=null) {\n    expTemplate::get_template_for_action($controller, $action, $loc);\n\n    // set paths we will search in for the view\n    $themepath = BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/'.$action.'.tpl';\n    $basepath = $controller->viewpath.'/'.$action.'.tpl';\n    $newuithemepath = BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/'.$action.'.newui.tpl'; //FIXME shoudl there be a theme newui variation?\n    $basenewuipath = $controller->viewpath.'/'.$action.'.newui.tpl';\n\n    // the root action will be used if we don't find a view for this action and it is a derivative of\n    // action.  i.e. showall_by_tags would use the showall.tpl view if we do not have a view named\n    // showall_by_tags.tpl\n    $root_action = explode('_', $action);\n    $rootthemepath = BASE . 'themes/' . DISPLAY_THEME . '/modules/' . $controller->relative_viewpath . '/' . $root_action[0] . '.tpl';\n    $rootbasepath = $controller->viewpath . '/' . $root_action[0] . '.tpl';\n\n    if (newui()) {\n        if (file_exists($newuithemepath)) {\n            return new controllertemplate($controller, $newuithemepath);\n        } elseif (file_exists($basenewuipath)) {\n            return new controllertemplate($controller, $basenewuipath);\n        }\n    }\n    if (bs(true)) {\n        $rootbstrap3path = $controller->viewpath . '/' . $root_action[0] . '.bootstrap3.tpl';\n        $basebstrap3path = $controller->viewpath . '/' . $action . '.bootstrap3.tpl';\n        $rootbstrappath = $controller->viewpath . '/' . $root_action[0] . '.bootstrap.tpl';\n        $basebstrappath = $controller->viewpath . '/' . $action . '.bootstrap.tpl';\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller, $themepath);\n        } elseif (bs3(true) && file_exists($basebstrap3path)) {\n            return new controllertemplate($controller, $basebstrap3path);\n        } elseif (file_exists($basebstrappath)) {\n            return new controllertemplate($controller, $basebstrappath);\n        } elseif (file_exists($basepath)) {\n            return new controllertemplate($controller, $basepath);\n        } elseif ($root_action[0] != $action) {\n            if (file_exists($rootthemepath)) {\n                return new controllertemplate($controller, $rootthemepath);\n            } elseif (bs3(true) && file_exists($rootbstrap3path)) {\n                return new controllertemplate($controller, $rootbstrap3path);\n            } elseif (file_exists($rootbstrappath)) {\n                return new controllertemplate($controller, $rootbstrappath);\n            } elseif (file_exists($rootbasepath)) {\n                return new controllertemplate($controller, $rootbasepath);\n            }\n        }\n    } else {\n        if (file_exists($themepath)) {\n            return new controllertemplate($controller, $themepath);\n        } elseif (file_exists($basepath)) {\n            return new controllertemplate($controller, $basepath);\n        } elseif ($root_action[0] != $action) {\n            if (file_exists($rootthemepath)) {\n                return new controllertemplate($controller, $rootthemepath);\n            } elseif (file_exists($rootbasepath)) {\n                return new controllertemplate($controller, $rootbasepath);\n            }\n        }\n    }\n\n    // if we get here it means there were no views for the this action to be found.\n    // we will check to see if we have a scaffolded version or else just grab a blank template.\n    if (file_exists(BASE . 'framework/modules/common/views/scaffold/' . $action . (newui()?'.newui':'') . '.tpl')) {\n        return new controllertemplate($controller, BASE . 'framework/modules/common/views/scaffold/' . $action . (newui()?'.newui':'') . '.tpl');\n    } else {\n        return new controllertemplate($controller, BASE . 'framework/modules/common/views/scaffold/blank.tpl');\n    }\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_action_views($ctl, $action, $human_readable) {\n    expTemplate::get_action_views($ctl, $action, $human_readable);\n\n    // setup the controller\n//    $controllerName = expModules::getControllerClassName($ctl);\n//    $controller = new $controllerName();\n    $controller = expModules::getController($ctl);\n\n    // set path information\n    $paths = array(\n        $controller->viewpath,\n        BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath,\n    );\n\n    $views = array();\n    foreach ($paths as $path) {\n        if (is_readable($path)) {\n            $dh = opendir($path);\n            while (($file = readdir($dh)) !== false) {\n                if (is_readable($path.'/'.$file) && substr($file, -4) == '.tpl' && substr($file, -14) != '.bootstrap.tpl' && substr($file, -15) != '.bootstrap3.tpl' && substr($file, -10) != '.newui.tpl') {\n                    $filename = substr($file, 0, -4);\n                    $fileparts = explode('_', $filename);\n                    if ($fileparts[0] == $action) {\n                        if (count($fileparts) == 1) {\n                            $views[$filename] = 'Default';\n                        } else {\n                            array_shift($fileparts); //shift the action name off the array of words\n                            $views[$filename] = ucwords(implode(' ', $fileparts));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Language-ize the views names\n    foreach ($views as $key=>$value) {\n        $views[$key] = gt($value);\n    }\n\n    return $views;\n}\n\n/**\n * @deprecated 2.3.3 moved to expTemplate subsystem\n */\nfunction get_filedisplay_views() {\n    expTemplate::get_filedisplay_views();\n\n    $paths = array(\n        BASE.'framework/modules/common/views/file/',\n        BASE.'themes/'.DISPLAY_THEME.'modules/common/views/file/',\n    );\n\n    $views = array();\n    foreach ($paths as $path) {\n        if (is_readable($path)) {\n            $dh = opendir($path);\n            while (($file = readdir($dh)) !== false) {\n                if (is_readable($path.'/'.$file) && substr($file, -4) == '.tpl' && substr($file, -14) != '.bootstrap.tpl' && substr($file, -15) != '.bootstrap3.tpl' && substr($file, -10) != '.newui.tpl') {\n                    $filename = substr($file, 0, -4);\n                    $views[$filename] = gt($filename);\n                }\n            }\n        }\n    }\n\n    return $views;\n}\n\nfunction object2Array($object=null) {\n    $ret_array = array();\n    if(empty($object)) return $ret_array;\n\n    foreach($object as $key=>$value) {\n        $ret_array[$key] = $value;\n    }\n\n    return $ret_array;\n}\n\nfunction expUnserialize($serial_str) {\n    if ($serial_str === 'Array') return null;  // empty array string??\n    if (is_array($serial_str) || is_object($serial_str)) return $serial_str;  // already unserialized\n//    $out1 = @preg_replace('!s:(\\d+):\"(.*?)\";!se', \"'s:'.strlen('$2').':\\\"$2\\\";'\", $serial_str );\n    $out = preg_replace_callback(\n        '!s:(\\d+):\"(.*?)\";!s',\n        create_function ('$m',\n            '$m_new = str_replace(\\'\"\\',\\'\\\"\\',$m[2]);\n            return \"s:\".strlen($m_new).\\':\"\\'.$m_new.\\'\";\\';'\n        ),\n        $serial_str );\n//    if ($out1 !== $out) {\n//        eDebug('problem:<br>'.$out.'<br>'.$out1);\n//    }\n    $out2 = unserialize($out);\n    if (is_array($out2)) {\n        if (!empty($out2['moduledescription'])) {  // work-around for links in module descriptions\n            $out2['moduledescription'] = stripslashes($out2['moduledescription']);\n        }\n        if (!empty($out2['description'])) {  // work-around for links in forms descriptions\n            $out2['description'] = stripslashes($out2['description']);\n        }\n        if (!empty($out2['report_desc'])) {  // work-around for links in forms report descriptions\n            $out2['report_desc'] = stripslashes($out2['report_desc']);\n        }\n        if (!empty($out2['response'])) {  // work-around for links in forms response\n            $out2['response'] = stripslashes($out2['response']);\n        }\n        if (!empty($out2['auto_respond_body'])) {  // work-around for links in forms auto respond\n            $out2['auto_respond_body'] = stripslashes($out2['auto_respond_body']);\n        }\n    } elseif (is_object($out2) && get_class($out2) == 'htmlcontrol') {\n        $out2->html = stripslashes($out2->html);\n    }\n    return $out2;\n}\n\n/**\n *  callback when the buffer gets flushed. Any processing on the page output\n * just before it gets rendered to the screen should happen here.\n * @param $buffer\n * @param null $mode\n * @return mixed\n */\nfunction expProcessBuffer($buffer, $mode=null) {\n     global $jsForHead, $cssForHead;\n\n//     return (str_replace(\"<!-- MINIFY REPLACE -->\", $cssForHead.$jsForHead, $buffer));\n    return (str_replace(\"<!-- MINIFY REPLACE -->\", $cssForHead, $buffer));\n}\n\n/**\n * Ensure we have a valid html 'id' attribute\n *\n * @param $id\n * @return mixed\n */\nfunction createValidId($id, $value='') {\n    $badvals = array(\"[\", \"]\", \",\", \" \", \"'\", \"\\\"\", \"&\", \"#\", \"%\", \"@\", \"!\", \"$\", \"(\", \")\", \"{\", \"}\");  //FIXME do we need to update this to HTML5 and only include the space?\n    if (strpos($id, '[]') !== false)\n        $id .= $value;\n    $new_id = str_replace($badvals, \"_\", trim($id));\n    return $new_id;\n}\n\nfunction curPageURL() {\n    if (expJavascript::inAjaxAction()) {\n        $new_request = $_REQUEST;\n        unset($new_request['ajax_action']);\n        if ($new_request['controller'] == 'store' && $new_request['action'] == 'edit')\n            unset($new_request['view']);\n        $pageURL = makeLink($new_request);\n    } else {\n        $pageURL = 'http';\n        if (!empty($_SERVER[\"HTTPS\"]) && $_SERVER[\"HTTPS\"] == \"on\") {\n            $pageURL .= \"s\";\n        }\n        $pageURL .= \"://\";\n        if ($_SERVER[\"SERVER_PORT\"] != \"80\") {\n            $pageURL .= $_SERVER[\"SERVER_NAME\"] . \":\" . $_SERVER[\"SERVER_PORT\"] . $_SERVER[\"REQUEST_URI\"];\n        } else {\n            $pageURL .= $_SERVER[\"SERVER_NAME\"] . $_SERVER[\"REQUEST_URI\"];\n        }\n    }\n    return $pageURL;\n}\n\n/**\n * Return status of e-commerce\n */\nfunction ecom_active() {\n    global $db;\n\n    return ($db->selectValue('modstate', 'active', 'module=\"store\"') ||\n        $db->selectValue('modstate', 'active', 'module=\"eventregistration\"') ||\n        $db->selectValue('modstate', 'active', 'module=\"donation\"') || FORCE_ECOM);\n}\n\n/**\n * Return the current framework\n *\n * @return bool\n */\nfunction framework() {\n    global $framework;\n\n    return $framework;\n}\n\n/**\n * Is the current framework Bootstrap v2 based?\n *\n * @return bool\n */\nfunction bs2() {\n    global $framework;\n\n    if ($framework == 'bootstrap') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Is the current framework Bootstrap v3 based?\n *\n * @param bool $strict must be bootstrap3 and NOT newui\n * @return bool\n */\nfunction bs3($strict = false) {\n    global $framework;\n\n    if ($framework == 'bootstrap3') {\n        return true;\n    } elseif ($framework == 'newui' && !$strict) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Is the current framework Bootstrap based?\n *\n * @param bool $strict must be bootstrap 2 or 3 and NOT newui\n * @return bool\n */\nfunction bs($strict = false) {\n    global $framework;\n\n    if ($framework == 'bootstrap3' || $framework == 'bootstrap') {\n        return true;\n    } elseif ($framework == 'newui' && !$strict) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Is the current framework NEWUI and NOT a Bootstrap framework\n *\n * @return bool\n */\nfunction newui() {\n    global $framework;\n\n    if ($framework == 'newui') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction gt($s){\n    return expLang::gettext($s);\n}\n\nfunction glist($s){\n    if (is_array($s)) {\n        $list = array();\n        foreach ($s as $key=>$phrase) {\n            $list[$key] = expLang::gettext(trim($phrase));\n        }\n    } else {\n        $list = '';\n        $phrases = explode(\",\",$s);\n        foreach ($phrases as $key=>$phrase) {\n            if ($key) $list .= ',';\n            $list .= expLang::gettext(trim($phrase));\n        }\n    }\n    return $list;\n}\n\n/**\n * called from exponent.php as the ajax error handler\n *\n * @param $errno\n * @param $errstr\n * @param $errfile\n * @param $errline\n */\nfunction handleErrors($errno, $errstr, $errfile, $errline) {\n    if (DEVELOPMENT > 0 && AJAX_ERROR_REPORTING == 1) {\n        switch ($errno) {\n            case E_ERROR:\n            case E_USER_ERROR:\n                $msg = 'PHP Error('.$errno.'): ';\n            break;\n            case E_WARNING:\n            case E_USER_WARNING:\n                $msg = 'PHP Warning('.$errno.'): ';\n            break;\n            case E_NOTICE:\n            case E_USER_NOTICE:\n                $msg = 'PHP Notice('.$errno.'): ';\n                break;\n            default:\n                return;  // we really don't want other issues printed\n                $msg = 'PHP Issue('.$errno.'): ';\n            break;\n        }\n        $msg .= $errstr;\n        $msg .= !empty($errfile) ? ' in file '.$errfile : \"\";\n        $msg .= !empty($errline) ? ' on line '.$errline : \"\";\n        // send to the debug output\n        eDebug($msg);\n    }\n}\n\n/**\n * dumps the passed variable to screen/log, but only if in development mode\n *\n * @param mixed $var the variable to dump\n * @param bool $halt if set to true will halt execution\n * @param bool $disable_log if set to true will disable logging and force to screen\n * @return void\n */\nfunction eDebug($var, $halt=false, $disable_log=false){\n\tif (DEVELOPMENT) {\n        if (LOGGER && !$disable_log) {\n//            if(is_array($var) || is_object($var)) {\n//                $pvar = print_r($var, true);\n//            } else {\n//                $pvar = $var;\n//            }\n//            echo(\"<script>YUI(EXPONENT.YUI3_CONFIG).use('node', function(Y) {Y.log('\".json_encode($pvar).\"','info','exp')});;</script>\");\n            eLog($var, gt('DEBUG'));\n        } else {\n            if (file_exists(BASE . 'external/kint/Kint.class.php')) {\n                require_once BASE . 'external/kint/Kint.class.php';\n                d($var);  // kint\n            } else {\n                echo \"<pre>\";\n                print_r($var);\n                echo \"</pre>\";\n            }\n        }\n\n\t\tif ($halt) die();\n\t}\n}\n\n/**\n * dumps the passed variable to a log, but only if in development mode\n *\n * @param mixed $var the variable to log\n * @param string $type the type of entry to record\n * @param string $path the pathname for the log file\n * @param string $minlevel\n * @return void\n */\nfunction eLog($var, $type='', $path='', $minlevel='0') {\n\tif($type == '') { $type = \"INFO\"; }\n\tif($path == '') { $path = BASE . 'tmp/exponent.log'; }\n\tif (DEVELOPMENT >= $minlevel) {\n\t\tif (is_writable ($path) || !file_exists($path)) {\n\t\t\tif (!$log = fopen ($path, \"ab\")) {\n\t\t\t\teDebug(gt(\"Error opening log file for writing.\"), false, true);\n\t\t\t} else {\n                if(is_array($var) || is_object($var)) {\n//                    $pvar = print_r($var, true);\n                    $pvar = json_encode($var, true);  // json is easier to deal with as data\n                } else {\n                    $pvar = $var;\n                }\n\t\t\t\tif (fwrite ($log, $type . \": \" . $pvar . \"\\r\\n\") === FALSE) {\n\t\t\t\t\teDebug(gt(\"Error writing to log file\").\" (\".$path.\").\", false, true);\n\t\t\t\t}\n\t\t\t\tfclose ($log);\n\t\t\t}\n\t\t} else {\n\t\t\teDebug(gt(\"Log file\".\" (\".$path).\" \".gt(\"not writable.\"), false, true);\n\t\t}\n\t}\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expString\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n/** @define \"BASE\" \"../../..\" */\n\nclass expString {\n\n    /**\n     * Routine to convert string to UTF\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function convertUTF($string) {\n\t\treturn $string = str_replace('?', '', htmlspecialchars($string, ENT_IGNORE, 'UTF-8'));\n\t}\n\n    /**\n     * Routine to check if string is valid UTF string\n     *\n     * @static\n     * @param string $string\n     * @return bool\n     */\n\tstatic function validUTF($string) {\n\t\tif(!mb_check_encoding($string, 'UTF-8') OR !($string === mb_convert_encoding(mb_convert_encoding($string, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n    /**\n     * Routine to strip unreadable characters from string - ascii 32 to 126\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function onlyReadables($string) {\n        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {\n\t\t\t$chr = $string{$i};\n\t\t\t$ord = ord($chr);\n\t\t\tif ($ord<32 or $ord>126) {\n\t\t\t$chr = \"~\";\n\t\t\t$string{$i} = $chr;\n\t\t\t}\n\t\t}\n\t\treturn str_replace(\"~\", \"\", $string);\n\t}\n\n    /**\n     * Routine to\n     *\n     * @static\n     * @param string $str\n     * @param bool $unescape should the string also be unescaped?\n     * @return mixed|string\n     */\n\tstatic function parseAndTrim($str, $unescape=false) {\n        if (is_array($str)) {\n            $rst = array();\n            foreach ($str as $key=>$st) {\n                $rst[$key] = self::parseAndTrim($st, $unescape);\n            }\n            return $rst;\n        }\n\n        $str = str_replace(\"<br>\",\" \",$str);\n        $str = str_replace(\"</br>\",\" \",$str);\n        $str = str_replace(\"<br/>\",\" \",$str);\n        $str = str_replace(\"<br />\",\" \",$str);\n        $str = str_replace(\"\\r\\n\",\" \",$str);\n        $str = str_replace('\"',\"&quot;\",$str);\n        $str = str_replace(\"'\",\"&#39;\",$str);\n        $str = str_replace(\"\u2019\",\"&rsquo;\",$str);\n        $str = str_replace(\"\u2018\",\"&lsquo;\",$str);\n        $str = str_replace(\"\u00ae\",\"&#174;\",$str);\n        $str = str_replace(\"\u2013\",\"-\", $str);\n        $str = str_replace(\"\u2014\",\"&#151;\", $str);\n        $str = str_replace(\"\u201d\",\"&rdquo;\", $str);\n        $str = str_replace(\"\u201c\",\"&ldquo;\", $str);\n        $str = str_replace(\"\u00bc\",\"&#188;\",$str);\n        $str = str_replace(\"\u00bd\",\"&#189;\",$str);\n        $str = str_replace(\"\u00be\",\"&#190;\",$str);\n\t\t$str = str_replace(\"\u2122\",\"&trade;\", $str);\n\t\t$str = trim($str);\n\n        if ($unescape) {\n\t\t\t$str = stripcslashes($str);\n\t\t} else {\n\t        $str = addslashes($str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Routine to convert string to an XML safe string\n     *\n     * @static\n     * @param string $str\n     * @return string\n     */\n\tstatic function convertXMLFeedSafeChar($str) {\n\t\t$str = str_replace(\"<br>\",\"\",$str);\n        $str = str_replace(\"</br>\",\"\",$str);\n        $str = str_replace(\"<br/>\",\"\",$str);\n        $str = str_replace(\"<br />\",\"\",$str);\n        $str = str_replace(\"&quot;\",'\"',$str);\n        $str = str_replace(\"&#39;\",\"'\",$str);\n        $str = str_replace(\"&rsquo;\",\"'\",$str);\n        $str = str_replace(\"&lsquo;\",\"'\",$str);\n        $str = str_replace(\"&#174;\",\"\",$str);\n        $str = str_replace(\"\ufffd\",\"-\", $str);\n        $str = str_replace(\"\ufffd\",\"-\", $str);\n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&rdquo;\",'\"', $str);\n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&ldquo;\",'\"', $str);\n        $str = str_replace(\"\\r\\n\",\" \",$str);\n        $str = str_replace(\"\ufffd\",\" 1/4\",$str);\n        $str = str_replace(\"&#188;\",\" 1/4\", $str);\n        $str = str_replace(\"\ufffd\",\" 1/2\",$str);\n        $str = str_replace(\"&#189;\",\" 1/2\",$str);\n        $str = str_replace(\"\ufffd\",\" 3/4\",$str);\n        $str = str_replace(\"&#190;\",\" 3/4\",$str);\n        $str = str_replace(\"\ufffd\", \"(TM)\", $str);\n        $str = str_replace(\"&trade;\",\"(TM)\", $str);\n        $str = str_replace(\"&reg;\",\"(R)\", $str);\n        $str = str_replace(\"\ufffd\",\"(R)\",$str);\n        $str = str_replace(\"&\",\"&amp;\",$str);\n\t\t$str = str_replace(\">\",\"&gt;\",$str);\n        return trim($str);\n\t}\n\n    /**\n     * Routine to convert any smart quotes into normal quotes\n     *\n     * @param string $str\n     * @return string\n     */\n    public static function convertSmartQuotes($str) {\n    \t$find[] = '\ufffd';  // left side double smart quote\n    \t$find[] = '\ufffd';  // right side double smart quote\n    \t$find[] = '\ufffd';  // left side single smart quote\n    \t$find[] = '\ufffd';  // right side single smart quote\n    \t$find[] = '\ufffd';  // elipsis\n    \t$find[] = '\ufffd';  // em dash\n    \t$find[] = '\ufffd';  // en dash\n\n        $replace[] = '\"';\n       \t$replace[] = '\"';\n       \t$replace[] = \"'\";\n       \t$replace[] = \"'\";\n       \t$replace[] = \"...\";\n       \t$replace[] = \"-\";\n       \t$replace[] = \"-\";\n\n        $find[] = '\u201c';  // left side double smart quote\n        $find[] = '\u201d';  // right side double smart quote\n        $find[] = '\u2018';  // left side single smart quote\n        $find[] = '\u2019';  // right side single smart quote\n        $find[] = '\u2026';  // ellipsis\n        $find[] = '\u2014';  // em dash\n        $find[] = '\u2013';  // en dash\n\n        $replace[] = '\"';\n        $replace[] = '\"';\n        $replace[] = \"'\";\n        $replace[] = \"'\";\n        $replace[] = \"...\";\n        $replace[] = \"-\";\n        $replace[] = \"-\";\n\n//        $find[] = chr(145);\n//        $find[] = chr(146);\n//        $find[] = chr(147);\n//        $find[] = chr(148);\n//        $find[] = chr(150);\n//        $find[] = chr(151);\n//        $find[] = chr(133);\n//        $find[] = chr(149);\n//        $find[] = chr(11);\n//\n//        $replace[] = \"'\";\n//        $replace[] = \"'\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"-\";\n//        $replace[] = \"-\";\n//        $replace[] = \"...\";\n//        $replace[] = \"&bull;\";\n//        $replace[] = \"\\n\";\n\n    \treturn str_replace($find, $replace, $str);\n    }\n\n    /**\n     * Enhanced variation of strip_tags with 'invert' option to remove specific tags\n     *\n     * @param $text\n     * @param string $tags\n     * @param bool $invert\n     * @return mixed\n     */\n    public static function strip_tags_content($text, $tags = '', $invert = false)\n    {\n        preg_match_all('/<(.+?)[\\s]*\\/?[\\s]*>/si', trim($tags), $tags);\n        $tags = array_unique($tags[1]);\n\n        if (is_array($tags) AND count($tags) > 0) {\n            if ($invert == false) {\n                return preg_replace('@<(?!(?:' . implode('|', $tags) . ')\\b)(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n            } else {\n                return preg_replace('@<(' . implode('|', $tags) . ')\\b.*?>.*?</\\1>@si', '', $text);\n            }\n        } elseif ($invert == false) {\n            return preg_replace('@<(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n        }\n        return $text;\n    }\n\n    /**\\\n     * Replace any non-ascii character with its hex code with NO active db connection\n     */\n    public static function escape($value) {\n        global $db;\n\n        if ($db->havedb) {\n            return $db->escapeString($value);\n        }\n\n        $return = '';\n        for ($i = 0, $iMax = strlen($value); $i < $iMax; $i++) {\n            $char = $value[$i];\n            $ord = ord($char);\n            if($char !== \"'\" && $char !== \"\\\"\" && $char !== '\\\\' && $ord >= 32 && $ord <= 126)\n                $return .= $char;\n            else\n                $return .= '\\\\x' . dechex($ord);\n        }\n        return $return;\n    }\n\n    /**\n     * Summarize or short a long string\n     *\n     * @param        $string\n     * @param string $strtype\n     * @param string $type\n     *\n     * @return string\n     */\n    public static function summarize($string, $strtype='html', $type='para', $more='...') {\n        $sep = ($strtype == \"html\" ? array(\"</p>\", \"</div>\") : array(\"\\r\\n\", \"\\n\", \"\\r\"));\n        $origstring = $string;\n\n        switch ($type) {\n            case \"para\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes(strip_tags($string)),ENT_QUOTES));\n                return expString::convertSmartQuotes(strip_tags($string));\n                break;\n            case \"paralinks\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&#160;\",\" \",htmlspecialchars_decode(htmlentities(expString::convertSmartQuotes(strip_tags($string,'<a>')),ENT_QUOTES)));\n                return expString::convertSmartQuotes(strip_tags($string, '<a>'));\n                break;\n            case \"parapaged\":\n//               $s = '<div style=\"page-break-after: always;\"><span style=\"display: none;\">&nbsp;</span></div>';\n                $s = '<div style=\"page-break-after: always';\n                $para = explode($s, $string);\n                $string = $para[0];\n                return expString::convertSmartQuotes($string);\n                break;\n            case \"parahtml\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n                if (!empty($string)) {\n                    $isText = true;\n                    $ret = \"\";\n                    $i = 0;\n    //                    $currentChar = \"\";\n    //                    $lastSpacePosition = -1;\n    //                    $lastChar = \"\";\n                    $tagsArray = array();\n                    $currentTag = \"\";\n    //                    $tagLevel = 0;\n    //                    $noTagLength = strlen(strip_tags($string));\n\n                    // Parser loop\n                    for ($j = 0, $jMax = strlen($string); $j < $jMax; $j++) {\n\n                        $currentChar = substr($string, $j, 1);\n                        $ret .= $currentChar;\n\n                        // Lesser than event\n                        if ($currentChar == \"<\") $isText = false;\n\n                        // Character handler\n                        if ($isText) {\n\n                            // Memorize last space position\n                            if ($currentChar == \" \") {\n                                $lastSpacePosition = $j;\n                            } else {\n                                $lastChar = $currentChar;\n                            }\n\n                            $i++;\n                        } else {\n                            $currentTag .= $currentChar;\n                        }\n\n                        // Greater than event\n                        if ($currentChar == \">\") {\n                            $isText = true;\n\n                            // Opening tag handler\n                            if ((strpos($currentTag, \"<\") !== FALSE) &&\n                                (strpos($currentTag, \"/>\") === FALSE) &&\n                                (strpos($currentTag, \"</\") === FALSE)\n                            ) {\n\n                                // Tag has attribute(s)\n                                if (strpos($currentTag, \" \") !== FALSE) {\n                                    $currentTag = substr($currentTag, 1, strpos($currentTag, \" \") - 1);\n                                } else {\n                                    // Tag doesn't have attribute(s)\n                                    $currentTag = substr($currentTag, 1, -1);\n                                }\n\n                                array_push($tagsArray, $currentTag);\n\n                            } else if (strpos($currentTag, \"</\") !== FALSE) {\n                                array_pop($tagsArray);\n                            }\n\n                            $currentTag = \"\";\n                        }\n                    }\n                    // Cut HTML string at last space position\n                    //                if ($length < $noTagLength) {\n                    //                    if ($lastSpacePosition != -1) {\n                    //                        $ret = substr($string, 0, $lastSpacePosition);\n                    //                    } else {\n                    //                        $ret = substr($string, $j);\n                    //                    }\n                    //                }\n                    if (sizeof($tagsArray) != 0) {\n                        // Close broken XHTML elements\n                        while (sizeof($tagsArray) != 0) {\n                            if (sizeof($tagsArray) > 1) {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } // You may add more tags here to put the link and added text before the closing tag\n                            elseif ($aTag == 'p' || 'div') {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } else {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            }\n                        }\n                    }\n                }\n                return expString::convertSmartQuotes($string);\n                break;\n            default:\n                $words = explode(\" \", strip_tags($string));\n                $string = implode(\" \", array_slice($words, 0, $type + 0));\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes($string),ENT_QUOTES));\n                return expString::convertSmartQuotes($string);\n                break;\n        }\n    }\n\n    public static function parseAndTrimExport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\t\", \" \", $str);\n        $str = str_replace(\",\", \"\\,\", $str);\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n\n        if (!$isHTML) {\n            $str = str_replace('\\\"', \"&quot;\", $str);\n            $str = str_replace('\"', \"&quot;\", $str);\n        } else {\n            $str = str_replace('\"', '\"\"', $str);\n        }\n\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n//        global $db;\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\,\", \",\", $str);\n        $str = str_replace('\"\"', '\"', $str); //do this no matter what...in case someone added a quote in a non HTML field\n        if (!$isHTML) {\n            //if HTML, then leave the single quotes alone, otheriwse replace w/ special Char\n            $str = str_replace('\"', \"&quot;\", $str);\n        }\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n//        if (DB_ENGINE=='mysqli') {\n//\t        $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n//        } elseif(DB_ENGINE=='mysql') {\n//            $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n//        } else {\n//\t        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n//        }\n        $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function outputField($val, $eof = ',', $isHTML = false) {\n        $newVal = self::parseAndTrimExport($val, $isHTML);\n        if ($newVal != '') return '\"' . $newVal . '\"' . $eof;\n        else return $eof;\n    }\n\n    public static function stripLineEndings($val) {\n        return preg_replace('/\\r\\n/', ' ', trim($val));\n    }\n\n    /**\n     * Convert email html content to text\n     * Remove scripts, styles, tags, and convert <br> to newline\n     *\n     * @param $val\n     * @return mixed\n     */\n    public static function html2text($val) {\n        $val = preg_replace('/(<script[^>]*>.+?<\\/script>|<style[^>]*>.+?<\\/style>)/s', '', $val); // remove any script or style blocks\n        $val = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $val)));  // replace breaks with newlines\n        return $val;\n    }\n\n    /**\n     * Scrub input string for possible security issues.\n     *\n     * @static\n     * @param $data string|array\n     * @return string|array\n     */\n    public static function sanitize(&$data) {\n//        return $data;\n\n        if (is_array($data)) {\n            $saved_params = array();\n            if (!empty($data['controller']) && $data['controller'] == 'snippet') {\n                $saved_params['body'] = $data['body'];  // store snippet body\n            }\n            foreach ($data as $var=>$val) {\n//                $data[$var] = self::sanitize($val);\n                $data[$var] = self::xss_clean($val);\n            }\n            if (!empty($saved_params)) {\n                $data = array_merge($data, $saved_params);  // add stored snippet body\n            }\n        } else {\n            if (empty($data)) {\n                return $data;\n            }\n\n            $data = self::xss_clean($data);\n\n            //fixme orig exp method\n//            if(0) {\n//                // remove whitespaces and tags\n////            $data = strip_tags(trim($data));\n//                // remove whitespaces and script tags\n//                $data = self::strip_tags_content(trim($data), '<script>', true);\n////            $data = self::strip_tags_content(trim($data), '<iframe>', true);\n//\n//                // apply stripslashes if magic_quotes_gpc is enabled\n//                if (get_magic_quotes_gpc()) {\n//                    $data = stripslashes($data);\n//                }\n//\n//                $data = self::escape($data);\n//\n//                // re-escape newlines\n//                $data = str_replace(array('\\r', '\\n'), array(\"\\r\", \"\\n\"), $data);\n//            }\n        }\n        return $data;\n    }\n\n    // xss_clean //\n\n    /**\n  \t * Character set\n  \t *\n  \t * Will be overridden by the constructor.\n  \t *\n  \t * @var\tstring\n  \t */\n  \tpublic static $charset = 'UTF-8';\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Random Hash for protecting URLs.\n   \t *\n   \t * @var\tstring\n   \t */\n   \tprotected static $_xss_hash;\n\n    /**\n   \t * List of never allowed strings\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_str =\tarray(\n   \t\t'document.cookie'\t=> '[removed]',\n   \t\t'document.write'\t=> '[removed]',\n   \t\t'.parentNode'\t\t=> '[removed]',\n   \t\t'.innerHTML'\t\t=> '[removed]',\n   \t\t'-moz-binding'\t\t=> '[removed]',\n   \t\t'<!--'\t\t\t\t=> '&lt;!--',\n   \t\t'-->'\t\t\t\t=> '--&gt;',\n   \t\t'<![CDATA['\t\t\t=> '&lt;![CDATA[',\n   \t\t'<comment>'\t\t\t=> '&lt;comment&gt;'\n   \t);\n\n   \t/**\n   \t * List of never allowed regex replacements\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_regex = array(\n   \t\t'javascript\\s*:',\n   \t\t'(document|(document\\.)?window)\\.(location|on\\w*)',\n   \t\t'expression\\s*(\\(|&\\#40;)', // CSS and IE\n   \t\t'vbscript\\s*:', // IE, surprise!\n   \t\t'wscript\\s*:', // IE\n   \t\t'jscript\\s*:', // IE\n   \t\t'vbs\\s*:', // IE\n   \t\t'Redirect\\s+30\\d',\n   \t\t\"([\\\"'])?data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?\"\n   \t);\n\n    /**\n   \t * XSS Clean\n   \t *\n   \t * Sanitizes data so that Cross Site Scripting Hacks can be\n   \t * prevented.  This method does a fair amount of work but\n   \t * it is extremely thorough, designed to prevent even the\n   \t * most obscure XSS attempts.  Nothing is ever 100% foolproof,\n   \t * of course, but I haven't been able to get anything passed\n   \t * the filter.\n   \t *\n   \t * Note: Should only be used to deal with data upon submission.\n   \t *\t It's not something that should be used for general\n   \t *\t runtime processing.\n   \t *\n   \t * @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention\n   \t * \t\tBased in part on some code and ideas from Bitflux.\n   \t *\n   \t * @link\thttp://ha.ckers.org/xss.html\n   \t * \t\tTo help develop this script I used this great list of\n   \t *\t\tvulnerabilities along with a few other hacks I've\n   \t *\t\tharvested from examining vulnerabilities in other programs.\n   \t *\n   \t * @param\tstring|string[]\t$str\t\tInput data\n   \t * @param \tbool\t\t$is_image\tWhether the input is an image\n   \t * @return\tstring\n   \t */\n   \tpublic static function xss_clean($str, $is_image = FALSE)\n   \t{\n   \t\t// Is the string an array?\n   \t\tif (is_array($str))\n   \t\t{\n   \t\t\twhile (list($key) = each($str))\n   \t\t\t{\n                if (preg_match('/^[a-zA-Z0-9_\\x7f-\\xff]*$/', $key)) {  // check for valid array name\n                    $str[$key] = self::xss_clean($str[$key]);\n                } else {\n                    return null;\n                }\n   \t\t\t}\n\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\t// Remove Invisible Characters\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * URL Decode\n   \t\t *\n   \t\t * Just in case stuff like this is submitted:\n   \t\t *\n   \t\t * <a href=\"http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\">Google</a>\n   \t\t *\n   \t\t * Note: Use rawurldecode() so it does not remove plus signs\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$str = rawurldecode($str);\n   \t\t}\n   \t\twhile (preg_match('/%[0-9a-f]{2,}/i', $str));\n\n   \t\t/*\n   \t\t * Convert character entities to ASCII\n   \t\t *\n   \t\t * This permits our tests below to work reliably.\n   \t\t * We only convert entities that are within tags since\n   \t\t * these are the ones that will pose security problems.\n   \t\t */\n   \t\t$str = preg_replace_callback(\"/[^a-z0-9>]+[a-z0-9]+=([\\'\\\"]).*?\\\\1/si\", array('self', '_convert_attribute'), $str);\n   \t\t$str = preg_replace_callback('/<\\w+.*/si', array('self', '_decode_entity'), $str);\n\n   \t\t// Remove Invisible Characters Again!\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * Convert all tabs to spaces\n   \t\t *\n   \t\t * This prevents strings like this: ja\tvascript\n   \t\t * NOTE: we deal with spaces between characters later.\n   \t\t * NOTE: preg_replace was found to be amazingly slow here on\n   \t\t * large blocks of data, so we use str_replace.\n   \t\t */\n   \t\t$str = str_replace(\"\\t\", ' ', $str);\n\n   \t\t// Capture converted string for later comparison\n   \t\t$converted_string = $str;\n\n   \t\t// Remove Strings that are never allowed\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Makes PHP tags safe\n   \t\t *\n   \t\t * Note: XML tags are inadvertently replaced too:\n   \t\t *\n   \t\t * <?xml\n   \t\t *\n   \t\t * But it doesn't seem to pose a problem.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\t// Images have a tendency to have the PHP short opening and\n   \t\t\t// closing tags every so often so we skip those and only\n   \t\t\t// do the long opening tags.\n   \t\t\t$str = preg_replace('/<\\?(php)/i', '&lt;?\\\\1', $str);\n   \t\t}\n   \t\telse\n   \t\t{\n   \t\t\t$str = str_replace(array('<?', '?'.'>'), array('&lt;?', '?&gt;'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Compact any exploded words\n   \t\t *\n   \t\t * This corrects words like:  j a v a s c r i p t\n   \t\t * These words are compacted back to their correct state.\n   \t\t */\n   \t\t$words = array(\n   \t\t\t'javascript', 'expression', 'vbscript', 'jscript', 'wscript',\n   \t\t\t'vbs', 'script', 'base64', 'applet', 'alert', 'document',\n   \t\t\t'write', 'cookie', 'window', 'confirm', 'prompt', 'eval'\n   \t\t);\n\n   \t\tforeach ($words as $word)\n   \t\t{\n   \t\t\t$word = implode('\\s*', str_split($word)).'\\s*';\n\n   \t\t\t// We only want to do this when it is followed by a non-word character\n   \t\t\t// That way valid stuff like \"dealer to\" does not become \"dealerto\"\n   \t\t\t$str = preg_replace_callback('#('.substr($word, 0, -3).')(\\W)#is', array('self', '_compact_exploded_words'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Remove disallowed Javascript in links or img tags\n   \t\t * We used to do some version comparisons and use of stripos(),\n   \t\t * but it is dog slow compared to these simplified non-capturing\n   \t\t * preg_match(), especially if the pattern exists in the string\n   \t\t *\n   \t\t * Note: It was reported that not only space characters, but all in\n   \t\t * the following pattern can be parsed as separators between a tag name\n   \t\t * and its attributes: [\\d\\s\"\\'`;,\\/\\=\\(\\x00\\x0B\\x09\\x0C]\n   \t\t * ... however, remove_invisible_characters() above already strips the\n   \t\t * hex-encoded ones, so we'll skip them below.\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$original = $str;\n\n   \t\t\tif (preg_match('/<a/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<a[^a-z0-9>]+([^>]*?)(?:>|$)#si', array('self', '_js_link_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/<img/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<img[^a-z0-9]+([^>]*?)(?:\\s?/?>|$)#si', array('self', '_js_img_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/script|xss/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace('#</*(?:script|xss).*?>#si', '[removed]', $str);\n   \t\t\t}\n   \t\t}\n   \t\twhile ($original !== $str);\n   \t\tunset($original);\n\n   \t\t/*\n   \t\t * Sanitize naughty HTML elements\n   \t\t *\n   \t\t * If a tag containing any of the words in the list\n   \t\t * below is found, the tag gets converted to entities.\n   \t\t *\n   \t\t * So this: <blink>\n   \t\t * Becomes: &lt;blink&gt;\n   \t\t */\n   \t\t$pattern = '#'\n   \t\t\t.'<((?<slash>/*\\s*)(?<tagName>[a-z0-9]+)(?=[^a-z0-9]|$)' // tag start and name, followed by a non-tag character\n   \t\t\t.'[^\\s\\042\\047a-z0-9>/=]*' // a valid attribute character immediately after the tag would count as a separator\n   \t\t\t// optional attributes\n   \t\t\t.'(?<attributes>(?:[\\s\\042\\047/=]*' // non-attribute characters, excluding > (tag close) for obvious reasons\n   \t\t\t.'[^\\s\\042\\047>/=]+' // attribute characters\n   \t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=' // attribute-value separator\n   \t\t\t\t\t.'(?:[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*))' // single, double or non-quoted value\n   \t\t\t\t.')?' // end optional attribute-value group\n   \t\t\t.')*)' // end optional attributes group\n   \t\t\t.'[^>]*)(?<closeTag>\\>)?#isS';\n\n   \t\t// Note: It would be nice to optimize this for speed, BUT\n   \t\t//       only matching the naughty elements here results in\n   \t\t//       false positives and in turn - vulnerabilities!\n   \t\tdo\n   \t\t{\n   \t\t\t$old_str = $str;\n   \t\t\t$str = preg_replace_callback($pattern, array('self', '_sanitize_naughty_html'), $str);\n   \t\t}\n   \t\twhile ($old_str !== $str);\n   \t\tunset($old_str);\n\n   \t\t/*\n   \t\t * Sanitize naughty scripting elements\n   \t\t *\n   \t\t * Similar to above, only instead of looking for\n   \t\t * tags it looks for PHP and JavaScript commands\n   \t\t * that are disallowed. Rather than removing the\n   \t\t * code, it simply converts the parenthesis to entities\n   \t\t * rendering the code un-executable.\n   \t\t *\n   \t\t * For example:\teval('some code')\n   \t\t * Becomes:\teval&#40;'some code'&#41;\n   \t\t */\n   \t\t$str = preg_replace(\n   \t\t\t'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)#si',\n   \t\t\t'\\\\1\\\\2&#40;\\\\3&#41;',\n   \t\t\t$str\n   \t\t);\n\n   \t\t// Final clean up\n   \t\t// This adds a bit of extra precaution in case\n   \t\t// something got through the above filters\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Images are Handled in a Special Way\n   \t\t * - Essentially, we want to know that after all of the character\n   \t\t * conversion is done whether any unwanted, likely XSS, code was found.\n   \t\t * If not, we return TRUE, as the image is clean.\n   \t\t * However, if the string post-conversion does not matched the\n   \t\t * string post-removal of XSS, then it fails, as there was unwanted XSS\n   \t\t * code found and removed/changed during processing.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\treturn ($str === $converted_string);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Do Never Allowed\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param \tstring\n   \t * @return \tstring\n   \t */\n   \tprotected static function _do_never_allowed($str)\n   \t{\n   \t\t$str = str_replace(array_keys(self::$_never_allowed_str), self::$_never_allowed_str, $str);\n\n   \t\tforeach (self::$_never_allowed_regex as $regex)\n   \t\t{\n   \t\t\t$str = preg_replace('#'.$regex.'#is', '[removed]', $str);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n\t/**\n\t * Remove Invisible Characters\n\t *\n\t * This prevents sandwiching null characters\n\t * between ascii characters, like Java\\0script.\n\t *\n\t * @param\tstring\n\t * @param\tbool\n\t * @return\tstring\n\t */\n\tpublic static function remove_invisible_characters($str, $url_encoded = TRUE)\n\t{\n\t\t$non_displayables = array();\n\n\t\t// every control character except newline (dec 10),\n\t\t// carriage return (dec 13) and horizontal tab (dec 09)\n\t\tif ($url_encoded)\n\t\t{\n\t\t\t$non_displayables[] = '/%0[0-8bcef]/';\t// url encoded 00-08, 11, 12, 14, 15\n\t\t\t$non_displayables[] = '/%1[0-9a-f]/';\t// url encoded 16-31\n\t\t}\n\n\t\t$non_displayables[] = '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S';\t// 00-08, 11, 12, 14-31, 127\n\n\t\tdo\n\t\t{\n\t\t\t$str = preg_replace($non_displayables, '', $str, -1, $count);\n\t\t}\n\t\twhile ($count);\n\n\t\treturn $str;\n\t}\n\n    /**\n   \t * HTML Entity Decode Callback\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _decode_entity($match)\n   \t{\n   \t\t// Protect GET variables in URLs\n   \t\t// 901119URL5918AMP18930PROTECT8198\n   \t\t$match = preg_replace('|\\&([a-z\\_0-9\\-]+)\\=([a-z\\_0-9\\-/]+)|i', self::xss_hash().'\\\\1=\\\\2', $match[0]);\n\n   \t\t// Decode, then un-protect URL GET vars\n   \t\treturn str_replace(\n            self::xss_hash(),\n   \t\t\t'&',\n            self::entity_decode($match, self::$charset)\n   \t\t);\n   \t}\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Generates the XSS hash if needed and returns it.\n   \t *\n   \t * @see\t\tCI_Security::$_xss_hash\n   \t * @return\tstring\tXSS hash\n   \t */\n   \tpublic static function xss_hash()\n   \t{\n   \t\tif (self::$_xss_hash === NULL)\n   \t\t{\n   \t\t\t$rand = self::get_random_bytes(16);\n            self::$_xss_hash = ($rand === FALSE)\n   \t\t\t\t? md5(uniqid(mt_rand(), TRUE))\n   \t\t\t\t: bin2hex($rand);\n   \t\t}\n\n   \t\treturn self::$_xss_hash;\n   \t}\n\n    /**\n   \t * HTML Entities Decode\n   \t *\n   \t * A replacement for html_entity_decode()\n   \t *\n   \t * The reason we are not using html_entity_decode() by itself is because\n   \t * while it is not technically correct to leave out the semicolon\n   \t * at the end of an entity most browsers will still interpret the entity\n   \t * correctly. html_entity_decode() does not convert entities without\n   \t * semicolons, so we are left with our own little solution here. Bummer.\n   \t *\n   \t * @link\thttp://php.net/html-entity-decode\n   \t *\n   \t * @param\tstring\t$str\t\tInput\n   \t * @param\tstring\t$charset\tCharacter set\n   \t * @return\tstring\n   \t */\n   \tpublic static function entity_decode($str, $charset = NULL)\n   \t{\n   \t\tif (strpos($str, '&') === FALSE)\n   \t\t{\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\tstatic $_entities;\n\n   \t\tisset($charset) OR $charset = self::$charset;\n   \t\t$flag = expCore::is_php('5.4')\n   \t\t\t? ENT_COMPAT | ENT_HTML5\n   \t\t\t: ENT_COMPAT;\n\n   \t\tdo\n   \t\t{\n   \t\t\t$str_compare = $str;\n\n   \t\t\t// Decode standard entities, avoiding false positives\n   \t\t\tif (preg_match_all('/&[a-z]{2,}(?![a-z;])/i', $str, $matches))\n   \t\t\t{\n   \t\t\t\tif ( ! isset($_entities))\n   \t\t\t\t{\n   \t\t\t\t\t$_entities = array_map(\n   \t\t\t\t\t\t'strtolower',\n                        expCore::is_php('5.3.4')\n   \t\t\t\t\t\t\t? get_html_translation_table(HTML_ENTITIES, $flag, $charset)\n   \t\t\t\t\t\t\t: get_html_translation_table(HTML_ENTITIES, $flag)\n   \t\t\t\t\t);\n\n   \t\t\t\t\t// If we're not on PHP 5.4+, add the possibly dangerous HTML 5\n   \t\t\t\t\t// entities to the array manually\n   \t\t\t\t\tif ($flag === ENT_COMPAT)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$_entities[':'] = '&colon;';\n   \t\t\t\t\t\t$_entities['('] = '&lpar;';\n   \t\t\t\t\t\t$_entities[')'] = '&rpar;';\n   \t\t\t\t\t\t$_entities[\"\\n\"] = '&newline;';\n   \t\t\t\t\t\t$_entities[\"\\t\"] = '&tab;';\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$replace = array();\n   \t\t\t\t$matches = array_unique(array_map('strtolower', $matches[0]));\n   \t\t\t\tforeach ($matches as &$match)\n   \t\t\t\t{\n   \t\t\t\t\tif (($char = array_search($match.';', $_entities, TRUE)) !== FALSE)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$replace[$match] = $char;\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$str = str_ireplace(array_keys($replace), array_values($replace), $str);\n   \t\t\t}\n\n   \t\t\t// Decode numeric & UTF16 two byte entities\n   \t\t\t$str = html_entity_decode(\n   \t\t\t\tpreg_replace('/(&#(?:x0*[0-9a-f]{2,5}(?![0-9a-f;])|(?:0*\\d{2,4}(?![0-9;]))))/iS', '$1;', $str),\n   \t\t\t\t$flag,\n   \t\t\t\t$charset\n   \t\t\t);\n   \t\t}\n   \t\twhile ($str_compare !== $str);\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Get random bytes\n   \t *\n   \t * @param\tint\t$length\tOutput length\n   \t * @return\tstring\n   \t */\n   \tpublic static function get_random_bytes($length)\n   \t{\n   \t\tif (empty($length) OR ! ctype_digit((string) $length))\n   \t\t{\n   \t\t\treturn FALSE;\n   \t\t}\n\n        if (function_exists('random_bytes'))\n        {\n            try\n            {\n                // The cast is required to avoid TypeError\n                return random_bytes((int) $length);\n            }\n            catch (Exception $e)\n            {\n                // If random_bytes() can't do the job, we can't either ...\n                // There's no point in using fallbacks.\n                log_message('error', $e->getMessage());\n                return FALSE;\n            }\n        }\n\n   \t\t// Unfortunately, none of the following PRNGs is guaranteed to exist ...\n   \t\tif (defined('MCRYPT_DEV_URANDOM') && ($output = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM)) !== FALSE)\n   \t\t{\n   \t\t\treturn $output;\n   \t\t}\n\n\n   \t\tif (is_readable('/dev/urandom') && ($fp = fopen('/dev/urandom', 'rb')) !== FALSE)\n   \t\t{\n   \t\t\t// Try not to waste entropy ...\n            expCore::is_php('5.4') && stream_set_chunk_size($fp, $length);\n   \t\t\t$output = fread($fp, $length);\n   \t\t\tfclose($fp);\n   \t\t\tif ($output !== FALSE)\n   \t\t\t{\n   \t\t\t\treturn $output;\n   \t\t\t}\n   \t\t}\n\n   \t\tif (function_exists('openssl_random_pseudo_bytes'))\n   \t\t{\n   \t\t\treturn openssl_random_pseudo_bytes($length);\n   \t\t}\n\n   \t\treturn FALSE;\n   \t}\n\n    /**\n   \t * Attribute Conversion\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _convert_attribute($match)\n   \t{\n   \t\treturn str_replace(array('>', '<', '\\\\'), array('&gt;', '&lt;', '\\\\\\\\'), $match[0]);\n   \t}\n\n    /**\n   \t * Compact Exploded Words\n   \t *\n   \t * Callback method for xss_clean() to remove whitespace from\n   \t * things like 'j a v a s c r i p t'.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _compact_exploded_words($matches)\n   \t{\n   \t\treturn preg_replace('/\\s+/s', '', $matches[1]).$matches[2];\n   \t}\n\n    /**\n   \t * JS Link Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize links.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on link-heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_link_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#href=.*?(?:(?:alert|prompt|confirm)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|data\\s*:)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * JS Image Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize image tags.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on image tag heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_img_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#src=.*?(?:(?:alert|prompt|confirm|eval)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\s*,)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * Filter Attributes\n   \t *\n   \t * Filters tag attributes for consistency and safety.\n   \t *\n   \t * @used-by\tCI_Security::_js_img_removal()\n   \t * @used-by\tCI_Security::_js_link_removal()\n   \t * @param\tstring\t$str\n   \t * @return\tstring\n   \t */\n   \tprotected static function _filter_attributes($str)\n   \t{\n   \t\t$out = '';\n   \t\tif (preg_match_all('#\\s*[a-z\\-]+\\s*=\\s*(\\042|\\047)([^\\\\1]*?)\\\\1#is', $str, $matches))\n   \t\t{\n   \t\t\tforeach ($matches[0] as $match)\n   \t\t\t{\n   \t\t\t\t$out .= preg_replace('#/\\*.*?\\*/#s', '', $match);\n   \t\t\t}\n   \t\t}\n\n   \t\treturn $out;\n   \t}\n\n    /**\n   \t * Sanitize Naughty HTML\n   \t *\n   \t * Callback method for xss_clean() to remove naughty HTML elements.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _sanitize_naughty_html($matches)\n   \t{\n   \t\tstatic $naughty_tags    = array(\n   \t\t\t'alert', 'prompt', 'confirm', 'applet', 'audio', 'basefont', 'base', 'behavior', 'bgsound',\n   \t\t\t'blink', 'body', 'embed', 'expression', 'form', 'frameset', 'frame', 'head', 'html', 'ilayer',\n   \t\t\t'input', 'button', 'select', 'isindex', 'layer', 'link', 'meta', 'keygen', 'object',\n   \t\t\t'plaintext', 'script', 'textarea', 'title', 'math', 'video', 'svg', 'xml', 'xss'\n            //,'style', 'iframe'\n   \t\t);\n\n   \t\tstatic $evil_attributes = array(\n   \t\t\t'on\\w+', 'xmlns', 'formaction', 'form', 'xlink:href', 'FSCommand', 'seekSegmentTime'\n            //, 'style'\n   \t\t);\n\n   \t\t// First, escape unclosed tags\n   \t\tif (empty($matches['closeTag']))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1];\n   \t\t}\n   \t\t// Is the element that we caught naughty? If so, escape it\n   \t\telseif (in_array(strtolower($matches['tagName']), $naughty_tags, TRUE))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1].'&gt;';\n   \t\t}\n   \t\t// For other tags, see if their attributes are \"evil\" and strip those\n   \t\telseif (isset($matches['attributes']))\n   \t\t{\n   \t\t\t// We'll store the already fitlered attributes here\n   \t\t\t$attributes = array();\n\n   \t\t\t// Attribute-catching pattern\n   \t\t\t$attributes_pattern = '#'\n   \t\t\t\t.'(?<name>[^\\s\\042\\047>/=]+)' // attribute characters\n   \t\t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=(?<value>[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*)))' // attribute-value separator\n   \t\t\t\t.'#i';\n\n   \t\t\t// Blacklist pattern for evil attribute names\n   \t\t\t$is_evil_pattern = '#^('.implode('|', $evil_attributes).')$#i';\n\n   \t\t\t// Each iteration filters a single attribute\n   \t\t\tdo\n   \t\t\t{\n   \t\t\t\t// Strip any non-alpha characters that may preceed an attribute.\n   \t\t\t\t// Browsers often parse these incorrectly and that has been a\n   \t\t\t\t// of numerous XSS issues we've had.\n   \t\t\t\t$matches['attributes'] = preg_replace('#^[^a-z]+#i', '', $matches['attributes']);\n\n   \t\t\t\tif ( ! preg_match($attributes_pattern, $matches['attributes'], $attribute, PREG_OFFSET_CAPTURE))\n   \t\t\t\t{\n   \t\t\t\t\t// No (valid) attribute found? Discard everything else inside the tag\n   \t\t\t\t\tbreak;\n   \t\t\t\t}\n\n   \t\t\t\tif (\n   \t\t\t\t\t// Is it indeed an \"evil\" attribute?\n   \t\t\t\t\tpreg_match($is_evil_pattern, $attribute['name'][0])\n   \t\t\t\t\t// Or does it have an equals sign, but no value and not quoted? Strip that too!\n   \t\t\t\t\tOR (trim($attribute['value'][0]) === '')\n   \t\t\t\t)\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = 'xss=removed';\n   \t\t\t\t}\n   \t\t\t\telse\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = $attribute[0][0];\n   \t\t\t\t}\n\n   \t\t\t\t$matches['attributes'] = substr($matches['attributes'], $attribute[0][1] + strlen($attribute[0][0]));\n   \t\t\t}\n   \t\t\twhile ($matches['attributes'] !== '');\n\n   \t\t\t$attributes = empty($attributes)\n   \t\t\t\t? ''\n   \t\t\t\t: ' '.implode(' ', $attributes);\n   \t\t\treturn '<'.$matches['slash'].$matches['tagName'].$attributes.'>';\n   \t\t}\n\n   \t\treturn $matches[0];\n   \t}\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass fileController extends expController {\n    public $basemodel_name = \"expFile\";\n    protected $remove_permissions = array(\n        'delete'\n    );\n//    protected $manage_permissions = array(\n//        'picker'=>'Manage Files',\n//        'import'=>'Import',\n//        'export'=>'Export',\n//    );\n    public $requires_login = array(\n        'picker'=>'You must be logged in to perform this action',\n        'adder'=>'You must be logged in to perform this action',\n        'addit'=>'You must be logged in to perform this action',\n        'batchdelete'=>'You must be logged in to perform this action',\n        'createfolder'=>'You must be logged in to perform this action',\n        'delete'=>'You must be logged in to perform this action',\n        'deleter'=>'You must be logged in to perform this action',\n        'deleteit'=>'You must be logged in to perform this action',\n        'edit'=>'You must be logged in to perform this action',\n        'quickupload'=>'You must be logged in to perform this action',\n        'upload'=>'You must be logged in to perform this action',\n        'uploader'=>'You must be logged in to perform this action',\n    );\n\n    static function displayname() { return gt(\"File Manager\"); }\n    static function description() { return gt(\"Add and manage Exponent Files\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n\n    public function manage_fixPaths() {\n        // fixes file directory issues when the old file class was used to save record\n        // where the trailing forward slash was not added. This simply checks to see\n        // if the trailing / is there, if not, it adds it.\n\n        $file = new expFile();\n        $files = $file->find('all');\n\n        foreach ($files as $key=>$file) {\n            if (substr($files[$key]->directory,-1,1)!=\"/\") {\n                $files[$key]->directory = $files[$key]->directory.'/';\n            }\n            $files[$key]->save();\n        }\n\n//        eDebug($files,true);\n    }\n\n    public function picker() {\n//        global $user;\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $jscatarray = array();\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $key=>$cat) {\n            $jscatarray[$key]['label'] = $cat->title;\n            $jscatarray[$key]['value'] = $cat->id;\n            $catarray[$cat->id] = $cat->title;\n        }\n        $jsuncat['label'] = 'Root';\n        $jsuncat['value'] = null;\n        array_unshift($jscatarray,$jsuncat);\n        $catarray['-1'] = 'All Folders';\n        if (strstr($this->params['update'],'?')) {\n            $update = explode('?',$this->params['update']);\n            if (!empty($update[0])) $this->params['update'] = $update[0];\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            'filter'=>!empty($this->params['filter'])?$this->params['filter']:null,\n            'cats'=>$catarray,\n            'jscats'=>json_encode($jscatarray)\n        ));\n    }\n\n    public function uploader() {\n        global $user;\n        //expHistory::set('manageable', $this->params);\n        flash('message',gt('Upload size limit').': '.ini_get('upload_max_filesize'));\n        if(intval(ini_get('upload_max_filesize'))!=intval(ini_get('post_max_size')) && $user->isAdmin()){\n            flash('error',gt('In order for the uploader to work correctly, \\'\"post_max_size\\' and \\'upload_max_filesize\\' within your php.ini file must match one another'));\n        }\n\n        $expcat = new expCat();\n        $cats = $expcat->find('all','module=\"file\"');\n        $catarray = array();\n        $catarray[] = 'Root Folder';\n        foreach ($cats as $cat) {\n            $catarray[$cat->id] = $cat->title;\n        }\n        assign_to_template(array(\n            'update'=>$this->params['update'],\n            \"upload_size\"=>ini_get('upload_max_filesize'),\n            \"post_size\"=>ini_get('post_max_size'),\n            \"bmax\"=>intval(ini_get('upload_max_filesize')/1024*1000000000),\n            'cats'=>$catarray,\n        ));\n    }\n\n    /**\n     * Returns attached file view template configuration settings template\n     *\n     */\n    public function get_view_config() {\n        global $template;\n\n        if (!empty($this->params['view']) && (strpos($this->params['view'], '..') !== false || strpos($this->params['view'], '/') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        // set paths we will search in for the view\n        $paths = array(\n            BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/file/configure',\n            BASE.'framework/modules/common/views/file/configure',\n        );\n\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.tpl';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.tpl';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $ar = new expAjaxReply(200, 'ok');\n\t\t        $ar->send();\n            }\n        }\n    }\n\n    /**\n     * Returns view template configuration settings view template\n     *\n     */\n    public function get_module_view_config() {\n        global $template;\n\n        if (!empty($this->params['view']) && (strpos($this->params['view'], '..') !== false || strpos($this->params['view'], '/') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n//        $controller = new $this->params['mod'];\n        $controller = expModules::getController(expString::escape($this->params['mod']));\n        // set paths we will search in for the view\n        $paths = array(\n//            BASE.'themes/'.DISPLAY_THEME.'/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n//            BASE.'framework/modules/'.$this->params['mod'].'/views/'.$this->params['mod'].'/configure',\n            $controller->viewpath.'/configure',\n  \t        BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n        );\n\n        $config_found = false;\n        foreach ($paths as $path) {\n            $view = $path.'/'.$this->params['view'].'.config';\n            if (is_readable($view)) {\n                if (bs(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                if (bs3(true)) {\n                    $bstrapview = $path.'/'.$this->params['view'].'.bootstrap3.config';\n                    if (file_exists($bstrapview)) {\n                        $view = $bstrapview;\n                    }\n                }\n                $template = new controllertemplate($this, $view);\n                $config_found = true;\n            }\n        }\n        $parts = explode('_', $this->params['view']);\n        if (!$config_found && ($this->params['view'] != $parts[0])) {\n            foreach ($paths as $path) {\n                $actview = $path.'/'.$parts[0].'.config';\n                if (is_readable($actview)) {\n                    if (bs(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    if (bs3(true)) {\n                        $bstrapview = $path . '/' . $actview . '.bootstrap3.config';\n                        if (file_exists($bstrapview)) {\n                            $actview = $bstrapview;\n                        }\n                    }\n                    $template = new controllertemplate($this, $actview);\n                    $config_found = true;\n                }\n            }\n        }\n        if (!$config_found) {\n            echo \"<p>\".gt('There Are No View Specific Settings').\"</p>\";\n            $template = expTemplate::get_common_template('blank', null);\n        }\n\n//        expTemplate::get_config_template($this);\n        $ar = new expAjaxReply(200, 'ok');\n        $ar->send();\n    }\n\n    /**\n     * Get a file record by id or pathname and return it as JSON via Ajax\n     */\n    public function getFile() {\n        if (is_numeric($this->params['id'])) {\n            $file = new expFile($this->params['id']);\n        } else {\n            $efile = new expFile();\n            $path = str_replace(BASE, '', $this->params['id']);\n            $path = str_replace('\\\\', '/', $path);\n            $file = $efile->find('first','directory=\"'.dirname($path).'/'.'\" AND filename=\"'.basename($path).'\"');\n        }\n        $ar = new expAjaxReply(200, 'ok', $file);\n        $ar->send();\n    }\n\n    public function getFilesByJSON() {\n        global $user;\n\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get all\n        $startIndex = 0; // default start at 0\n//        $sort = null; // default don't sort\n//        $dir = 'asc'; // default sort dir is asc\n//        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if(strlen($this->params['results']) > 0) {\n            $results = intval($this->params['results']);\n        }\n\n        // Start at which record?\n        if(strlen($this->params['startIndex']) > 0) {\n            $startIndex = intval($this->params['startIndex']);\n        }\n\n        // Sorted?\n        if(strlen($this->params['sort']) > 0) {\n            if ($this->params['sort'] == 'cat') {\n                $sort = 'id';\n            } else {\n                $sort = expString::escape($this->params['sort']);\n            }\n//            if ($sort = 'id') $sort = 'filename';\n        }\n\n        // Sort dir?\n        if (($this->params['dir'] == 'false') || ($this->params['dir'] == 'desc') || ($this->params['dir'] == 'yui-dt-desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n        $totalrecords = 0;\n\n        if (!empty($this->params['query'])) {\n            $this->params['query'] = expString::escape($this->params['query']);\n            $filter = '';\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1) AND \";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= \"is_image=1 AND \";\n            }\n\n//            $this->params['query'] = expString::sanitize($this->params['query']);\n//            $totalrecords = $this->$modelname->find('count',\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\");\n//            $files = $this->$modelname->find('all',$filter.\"filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%'\".$imagesOnly,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all',$filter.\"(filename LIKE '%\".$this->params['query'].\"%' OR title LIKE '%\".$this->params['query'].\"%' OR alt LIKE '%\".$this->params['query'].\"%')\",$sort.' '.$dir);\n\n            //FiXME we need to get all records then group by cat, then trim/paginate\n            $querycat = !empty($this->params['cat']) ? $this->params['cat'] : '0';\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                $filecat = !empty($file->expCat[0]->id) ? $file->expCat[0]->id : 0;\n                if (($querycat == $filecat || $querycat == -1)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n                        if (!empty($file->expCat[0]->title)) {\n                            $groupedfiles[$key]->cat = $file->expCat[0]->title;\n                            $groupedfiles[$key]->catid = $file->expCat[0]->id;\n                        }\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n        } else {\n            if (!$user->isAdmin()) {\n                $filter = \"(poster=\".$user->id.\" OR shared=1)\";\n            };\n//            if ($this->params['update']=='ck' || $this->params['update']=='tiny') {\n            if (!empty($this->params['filter']) && $this->params['filter'] == 'image') {\n                $filter .= !empty($filter) ? \" AND \" : \"\";\n                $filter .= \"is_image=1\";\n            }\n\n//            $totalrecords = $this->$modelname->find('count',$filter);\n//            $files = $this->$modelname->find('all',$filter,$sort.' '.$dir, $results, $startIndex);\n            $files = $this->$modelname->find('all', $filter, $sort.' '.$dir);\n\n            $groupedfiles = array();\n            foreach ($files as $key=>$file) {\n                if (empty($file->expCat[0]->title)) {\n                    $totalrecords++;\n                    if (count($groupedfiles) < ($startIndex + $results)) {\n                        $groupedfiles[$key] = $files[$key];\n    //                    $files[$key]->cat = $file->expCat[0]->title;\n    //                    $files[$key]->catid = $file->expCat[0]->id;\n                        $tmpusr = new user($file->poster);\n                        $groupedfiles[$key]->user = new stdClass();\n                        $groupedfiles[$key]->user->firstname = $tmpusr->firstname;\n                        $groupedfiles[$key]->user->lastname = $tmpusr->lastname;\n                        $groupedfiles[$key]->user->username = $tmpusr->username;\n                    }\n                }\n            }\n            $groupedfiles = array_values(array_filter($groupedfiles));\n            $files = array_slice($groupedfiles,$startIndex,$results);\n\n            $returnValue = array(\n                'recordsReturned'=>count($files),\n                'totalRecords'=>$totalrecords,\n                'startIndex'=>$startIndex,\n                'sort'=>$sort,\n                'dir'=>$dir,\n                'pageSize'=>$results,\n                'records'=>$files\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    /**\n     * create a new virtual folder in response to an ajax request\n     * return updated list of virtual folders in response to an ajax request\n     */\n    public function createFolder() {\n        if (!empty($this->params['folder'])) {\n            $expcat = new expCat($this->params['folder']);\n            if (empty($expcat->id)) {\n                $expcat->module = 'file';\n                $expcat->title = $this->params['folder'];\n                $expcat->update();\n            }\n//            $this->params['module'] = 'file';\n//            $this->params['title'] = $this->params['folder'];\n//            parent::update();\n            $cats = $expcat->find('all','module=\"file\"','rank');\n            $catarray = array();\n            $catarray[] = 'Root Folder';\n            foreach ($cats as $cat) {\n                $catarray[$cat->id] = $cat->title;\n            }\n            echo json_encode($catarray);\n        }\n    }\n\n    public function delete() {\n//        global $db,$user;\n        global $user;\n\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->delete();\n            if (unlink($file->directory.$file->filename)) {\n                flash('message',$file->filename.' '.gt('was successfully deleted'));\n            } else {\n                flash('error',$file->filename.' '.gt('was deleted from the database, but could not be removed from the file system.'));\n            }\n        } else {\n            flash('error',$file->filename.' '.gt('wasn\\'t deleted because you don\\'t own the file.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function deleter() {\n//        global $db;\n\n        $notafile = array();\n//        $files = $db->selectObjects('expFiles',1);\n        foreach (expFile::selectAllFiles() as $file) {\n            if (!is_file(BASE.$file->directory.$file->filename)) {\n                $notafile[$file->id] = $file;\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notafile\n        ));\n    }\n\n    public function deleteit() {\n        global $user;\n        if (!empty($this->params['deleteit'])) {\n            foreach ($this->params['deleteit'] as $file) {\n                $delfile = new expFile($file);\n                if ($user->id==$delfile->poster || $user->isAdmin()) {\n                    $delfile->delete();\n                    flash('error',$delfile->filename.' '.gt('was deleted from the database.'));\n                }\n            }\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function batchDelete() {\n        global $user;\n\n        $error = false;\n//        if (get_magic_quotes_gpc()) $this->params['files'] = stripslashes($this->params['files']);  // magic quotes fix\n        $this->params['files'] = stripslashes($this->params['files']);\n        $files = json_decode($this->params['files']);\n        switch (json_last_error()) {  //FIXME json error checking/reporting, may no longer be needed\n            case JSON_ERROR_NONE:\n            break;\n            case JSON_ERROR_DEPTH:\n                $error = 'JSON - Maximum stack depth exceeded';\n            break;\n            case JSON_ERROR_STATE_MISMATCH:\n                $error = 'JSON - Underflow or the modes mismatch';\n            break;\n            case JSON_ERROR_CTRL_CHAR:\n                $error = 'JSON - Unexpected control character found';\n            break;\n            case JSON_ERROR_SYNTAX:\n                $error = 'JSON - Syntax error, malformed JSON';\n            break;\n            case JSON_ERROR_UTF8:\n                $error = 'JSON - Malformed UTF-8 characters, possibly incorrectly encoded';\n            break;\n            default:\n                $error = 'JSON - Unknown error';\n            break;\n        }\n\n        if (empty($error)) foreach ($files as $file) {\n            $delfile = new expFile($file->id);\n            if ($user->id==$delfile->poster || $user->isAdmin()) {\n                $delfile->delete();\n                unlink($delfile->directory.$delfile->filename);\n            } else {\n                $error = gt(\"you didn't have permission\");\n            }\n        }\n        if (!empty($error)) {\n            $ar = new expAjaxReply(300, gt(\"Some files were NOT deleted because\") . ' ' . $error);\n        } else {\n            $ar = new expAjaxReply(200, gt('Your files were deleted successfully'), $file);\n        }\n        $ar->send();\n    }\n\n    public function adder() {\n        global $db;\n\n        $notindb = array();\n        $allfiles = expFile::listFlat(BASE.'files',true,null,array(),BASE);\n        foreach ($allfiles as $path=>$file) {\n            if ($file[0] != '.') {\n//                $found = false;\n                $npath = preg_replace('/'.$file.'/','',$path, 1);\n//                $dbfiles = $db->selectObjects('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n                $dbfile = $db->selectObject('expFiles',\"filename='\".$file.\"' AND directory='\".$npath.\"'\");\n//                foreach ($dbfiles as $dbfile) {\n//                    if (!empty($dbfile)) $found = ($dbfile->directory == str_replace($file,'',$path));\n//                }\n//                if (!$found) {\n//                    $notindb[$path] = $file;\n//                }\n                if (empty($dbfile)) {\n                    $notindb[$path] = $file;\n                }\n            }\n        }\n        assign_to_template(array(\n            'files'=>$notindb\n        ));\n    }\n\n    public function addit() {\n        foreach ($this->params['addit'] as $file) {\n            $newfile = new expFile(array('directory'=>dirname($file).'/','filename'=>basename($file)));\n            $newfile->posted = $newfile->last_accessed = filemtime($file);\n            $newfile->save();\n            flash('message',$newfile->filename.' '.gt('was added to the File Manager.'));\n        }\n        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n    }\n\n    public function upload() {\n\n        // upload the file, but don't save the record yet...\n        if ($this->params['resize'] != 'false') {\n            $maxwidth = $this->params['max_width'];\n        } else {\n            $maxwidth = null;\n        }\n        $file = expFile::fileUpload('Filedata',false,false,null,null,$maxwidth);\n        // since most likely this function will only get hit via flash in YUI Uploader\n        // and since Flash can't pass cookies, we lose the knowledge of our $user\n        // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n        // and then assign $user->id to $file->poster so we have an audit trail for the upload\n\n        if (is_object($file)) {\n            $resized = !empty($file->resized) ? true : false;\n            $user = new user($this->params['usrid']);\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($this->params['cat'])) {\n                $expcat = new expCat($this->params['cat']);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n\n            // a echo so YUI Uploader is notified of the function's completion\n            if ($resized) {\n                echo gt('File resized and then saved');\n            } else {\n                echo gt('File saved');\n            }\n        } else {\n            echo gt('File was NOT uploaded!');\n//            flash('error',gt('File was not uploaded!'));\n        }\n    }\n\n    public function quickUpload(){\n        global $user;\n\n        if (!empty($this->params['folder']) || (defined('QUICK_UPLOAD_FOLDER') && QUICK_UPLOAD_FOLDER != '' && QUICK_UPLOAD_FOLDER != 0)) {\n            // prevent attempt to place file somewhere other than /files folder\n            if (!empty($this->params['folder']) && strpos($this->params['folder'], '..') !== false) {\n                $ar = new expAjaxReply(300, gt(\"File was not uploaded!\"));\n                $ar->send();\n            }\n            if (SITE_FILE_MANAGER == 'picker') {\n                $quikFolder = !empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER;\n                $destDir = null;\n            } elseif (SITE_FILE_MANAGER == 'elfinder') {\n                $quikFolder = null;\n                $destDir = UPLOAD_DIRECTORY_RELATIVE . (!empty($this->params['folder']) ? $this->params['folder'] :QUICK_UPLOAD_FOLDER) . '/';\n                // create folder if non-existant\n                expFile::makeDirectory($destDir);\n            }\n        } else {\n            $quikFolder = null;\n            $destDir = null;\n        }\n\n        //extensive suitability check before doing anything with the file...\n        if (isset($_SERVER['HTTP_X_FILE_NAME'])) {  //HTML5 XHR upload\n            $file = expFile::fileXHRUpload($_SERVER['HTTP_X_FILE_NAME'],false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n            $file->poster = $user->id;\n            $file->posted = $file->last_accessed = time();\n            $file->save();\n            if (!empty($quikFolder)) {\n                $expcat = new expCat($quikFolder);\n                $params['expCat'][0] = $expcat->id;\n                $file->update($params);\n            }\n            $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n            $ar->send();\n        } else {  //$_POST upload\n            if (($_FILES['uploadfile'] == \"none\") OR (empty($_FILES['uploadfile']['name'])) ) {\n                $message = gt(\"No file uploaded.\");\n            } else if ($_FILES['uploadfile'][\"size\"] == 0) {\n                $message = gt(\"The file is zero length.\");\n    //            } else if (($_FILES['upload'][\"type\"] != \"image/pjpeg\") AND ($_FILES['upload'][\"type\"] != \"image/jpeg\") AND ($_FILES['upload'][\"type\"] != \"image/png\")) {\n    //                $message = gt(\"The image must be in either JPG or PNG format. Please upload a JPG or PNG instead.\");\n            } else if (!is_uploaded_file($_FILES['uploadfile'][\"tmp_name\"])) {\n                $message = gt(\"You may be attempting to hack our server.\");\n            } else {\n                // upload the file, but don't save the record yet...\n                $file = expFile::fileUpload('uploadfile',false,false,null,$destDir,intval(QUICK_UPLOAD_WIDTH));\n                // since most likely this function will only get hit via flash in YUI Uploader\n                // and since Flash can't pass cookies, we lose the knowledge of our $user\n                // so we're passing the user's ID in as $_POST data. We then instantiate a new $user,\n                // and then assign $user->id to $file->poster so we have an audit trail for the upload\n                if (is_object($file)) {\n                    $file->poster = $user->id;\n                    $file->posted = $file->last_accessed = time();\n                    $file->save();\n                    if (!empty($quikFolder)) {\n                        $expcat = new expCat($quikFolder);\n                        $params['expCat'][0] = $expcat->id;\n                        $file->update($params);\n                    }\n                    $ar = new expAjaxReply(200, gt('Your File was uploaded successfully'), $file->id);\n                } else {\n                    $ar = new expAjaxReply(300, gt(\"File was not uploaded!\").' - '.$file);\n                }\n                $ar->send();\n            }\n        }\n    }\n\n    public function editCat() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $expcat = new expCat($this->params['newValue']);\n            $params['expCat'][0] = $expcat->id;\n            $file->update($params);\n            $file->cat = $expcat->title;\n            $file->catid = $expcat->id;\n            $ar = new expAjaxReply(200, gt('Your Folder was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editTitle() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->title = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your title was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n    }\n\n    public function editAlt() {\n        global $user;\n        $file = new expFile($this->params['id']);\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->alt = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('Your alt was updated successfully'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function editShare() {\n        global $user;\n        $file = new expFile($this->params['id']);\n\t\tif(!isset($this->params['newValue'])) {\n\t\t\t$this->params['newValue'] = 0;\n\t\t}\n        if ($user->id==$file->poster || $user->isAdmin()) {\n            $file->shared = $this->params['newValue'];\n            $file->save();\n            $ar = new expAjaxReply(200, gt('This file is now shared.'), $file);\n        } else {\n            $ar = new expAjaxReply(300, gt(\"You didn't create this file, so it's not yours to share.\"));\n        }\n        $ar->send();\n        echo json_encode($file);  //FIXME we exit before hitting this\n    }\n\n    public function import_eql() {\n    }\n\n    public  function import_eql_process() {\n        global $db;\n\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n            $errors = array();\n            expSession::clearAllUsersSessionCache();\n\n            // copy in deprecated definitions files to aid in import\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (!file_exists($dst . '/' . $file)) {\n                            copy($src . '/' . $file, $dst . '/' . $file);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            expFile::restoreDatabase($_FILES['file']['tmp_name'], $errors);\n\n            // now remove deprecated definitions files\n            $src = BASE . \"install/old_definitions\";\n            $dst = BASE . \"framework/core/definitions\";\n            if (is_dir($src) && expUtil::isReallyWritable($dst)) {\n                $dir = opendir($src);\n                while (false !== ($file = readdir($dir))) {\n                    if (($file != '.') && ($file != '..')) {\n                        if (file_exists($dst . '/' . $file)) {\n                            unlink($dst . '/' . $file);\n                        }\n                        // remove empty deprecated tables\n                        $table = substr($file, 0, -4);\n                        if ($db->tableIsEmpty($table)) {\n                            $db->dropTable($table);\n                        }\n                    }\n                }\n                closedir($dir);\n            }\n\n            // update search index\n            searchController::spider();\n\n            // check to see if we need to install or upgrade the restored database\n            expVersion::checkVersion();\n\n            assign_to_template(\n                array(\n                    'success' => !count($errors),\n                    'errors' => $errors,\n                )\n            );\n        }\n    }\n\n    public static function getTables() {\n        global $db;\n\n        expDatabase::fix_table_names();\n        $tables = $db->getTables();\n        if (!function_exists('tmp_removePrefix')) {\n        \tfunction tmp_removePrefix($tbl) {\n        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n        \t\t// '_' character - that is automatically added by the database class.\n        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n        \t}\n        }\n        $tables = array_map('tmp_removePrefix',$tables);\n        usort($tables,'strnatcmp');\n        return $tables;\n    }\n\n    public function export_eql() {\n//        global $db, $user;\n        global $user;\n\n//        expDatabase::fix_table_names();\n//        $tables = $db->getTables();\n//        if (!function_exists('tmp_removePrefix')) {\n//        \tfunction tmp_removePrefix($tbl) {\n//        \t\t// we add 1, because DB_TABLE_PREFIX  no longer has the trailing\n//        \t\t// '_' character - that is automatically added by the database class.\n//        \t\treturn substr($tbl,strlen(DB_TABLE_PREFIX)+1);\n//        \t}\n//        }\n//        $tables = array_map('tmp_removePrefix',$tables);\n//        usort($tables,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n            'tables' => self::getTables(),\n        ));\n    }\n\n    public function export_eql_process() {\n//        global $db;\n\n        if (!isset($this->params['tables'])) { // No checkboxes clicked so we'll dump all tables\n            $this->params['tables'] = self::getTables();\n            $this->params['tables'] = array_flip($this->params['tables']);\n        }\n//        \techo gt('You must choose at least one table to export.');\n//        } else { // All good\n        \t$filename = str_replace(\n        \t\tarray('__DOMAIN__','__DB__'),\n        \t\tarray(str_replace('.','_',HOSTNAME),DB_NAME),\n                $this->params['filename']);\n        \t$filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.eql');\n\n        \tob_end_clean();\n        \tob_start(\"ob_gzhandler\");\n\n        \tif (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n        \t\t$path = BASE . \"themes/\".DISPLAY_THEME.\"/sample.eql\";\n        \t\tif (!$eql = fopen ($path, \"w\")) {\n        \t\t\tflash('error',gt(\"Error opening eql file for writing\").\" \".$path);\n        \t\t} else {\n                    //TODO we need to write inside call passing $eql file pointer\n                    $eqlfile = expFile::dumpDatabase(array_keys($this->params['tables']));\n        \t\t\tif (fwrite ($eql, $eqlfile)  === FALSE) {\n        \t\t\t\tflash('error',gt(\"Error writing to eql file\").\" \".$path);\n        \t\t\t}\n        \t\t\tfclose ($eql);\n        \t\t\tflash('message',gt(\"Sample database (eql file) saved to\").\" '\".DISPLAY_THEME.\"' \".gt(\"theme\"));\n        \t\t\texpHistory::back();\n        \t\t}\n        \t} else {\n        \t\t// This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n        \t\t// 'application/octet-stream' is the registered IANA type but\n        \t\t//        MSIE and Opera seems to prefer 'application/octetstream'\n        \t\t$mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n        \t\theader('Content-Type: ' . $mime_type);\n        \t\theader('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n        \t\t// IE need specific headers\n        \t\tif (EXPONENT_USER_BROWSER == 'IE') {\n        \t\t\theader('Content-Disposition: inline; filename=\"' . $filename . '\"');\n        \t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n        \t\t\theader('Pragma: public');\n        \t\t} else {\n        \t\t\theader('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n        \t\t\theader('Pragma: no-cache');\n        \t\t}\n                echo expFile::dumpDatabase(array_keys($this->params['tables']));  //FIXME we need to echo inside call\n        \t\texit; // Exit, since we are exporting\n        \t}\n//        }\n    }\n\n    public function import_files() {\n    }\n\n    public function import_files_process() {\n        if ($_FILES['file']['error'] != UPLOAD_ERR_OK) {\n        \tswitch($_FILES['file']['error']) {\n        \t\tcase UPLOAD_ERR_INI_SIZE:\n        \t\tcase UPLOAD_ERR_FORM_SIZE:\n        \t\t\techo gt('The file you uploaded exceeded the size limits for the server.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_PARTIAL:\n        \t\t\techo gt('The file you uploaded was only partially uploaded.').'<br />';\n        \t\t\tbreak;\n        \t\tcase UPLOAD_ERR_NO_FILE:\n        \t\t\techo gt('No file was uploaded.').'<br />';\n        \t\t\tbreak;\n        \t}\n        } else {\n        \t$basename = basename($_FILES['file']['name']);\n\n        \tinclude_once(BASE.'external/Tar.php');\n        \t$tar = new Archive_Tar($_FILES['file']['tmp_name'],'gz');\n\n        \t$dest_dir = BASE.'tmp/extensionuploads/'.uniqid('');\n        \t@mkdir($dest_dir,DIR_DEFAULT_MODE_STR);\n        \tif (!file_exists($dest_dir)) {\n        \t\techo gt('Unable to create temporary directory to extract files archive.');\n        \t} else {\n        \t\t$return = $tar->extract($dest_dir);\n        \t\tif (!$return) {\n        \t\t\techo '<br />'.gt('Error extracting TAR archive').'<br />';\n        \t\t} else if (!file_exists($dest_dir.'/files') || !is_dir($dest_dir.'/files')) {\n        \t\t\techo '<br />'.gt('Invalid archive format, no \\'/files\\' folder').'<br />';\n        \t\t} else {\n        \t\t\t// Show the form for specifying which mod types to 'extract'\n\n        \t\t\t$mods = array(); // Stores the mod classname, the files list, and the module's real name\n\n        \t\t\t$dh = opendir($dest_dir.'/files');\n        \t\t\twhile (($file = readdir($dh)) !== false) {\n        \t\t\t\tif ($file{0} != '.' && is_dir($dest_dir.'/files/'.$file)) {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\tarray_keys(expFile::listFlat($dest_dir.'/files/'.$file,1,null,array(),$dest_dir.'/files/'))\n        \t\t\t\t\t);\n        //\t\t\t\t\tif (class_exists($file)) {\n        //\t\t\t\t\t\t$mods[$file][0] = call_user_func(array($file,'name')); // $file is the class name of the module\n        //\t\t\t\t\t}\n        \t\t\t\t} elseif ($file != '.' && $file != '..') {\n        \t\t\t\t\t$mods[$file] = array(\n        \t\t\t\t\t\t'',\n        \t\t\t\t\t\t$file\n        \t\t\t\t\t);\n        \t\t\t\t}\n        \t\t\t}\n\n                    assign_to_template(array(\n                        'dest_dir' => $dest_dir,\n                        'file_data' => $mods,\n                    ));\n        \t\t}\n        \t}\n        }\n    }\n\n    public function import_files_extract() {\n        $dest_dir = $this->params['dest_dir'];\n        $files = array();\n        foreach (array_keys($this->params['mods']) as $file) {\n        \t$files[$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\tif (class_exists($mod)) {\n        //\t\t$files[$mod][0] = call_user_func(array($mod,'name'));\n        //\t}\n        //\tforeach (array_keys(expFile::listFlat($dest_dir.'/files',1,null,array(),$dest_dir.'/files/')) as $file) {\n        //\t\t$files[$mod][1][$file] = expFile::canCreate(BASE.'files/'.$file);\n        //\t}\n        }\n\n        expSession::set('dest_dir',$dest_dir);\n        expSession::set('files_data',$files);\n\n        assign_to_template(array(\n            'files_data' => $files,\n        ));\n    }\n\n    public function import_files_finish() {\n        $dest_dir = expSession::get('dest_dir');\n        $files = expSession::get('files_data');\n        if (!file_exists(BASE.'files')) {\n        \tmkdir(BASE.'files',DIR_DEFAULT_MODE_STR);\n        }\n\n        $filecount = 0;\n        foreach (array_keys($files) as $file) {\n            expFile::copyDirectoryStructure($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \tcopy($dest_dir.'/files/'.$file,BASE.'files/'.$file);\n        \t$filecount++;\n        }\n\n        expSession::un_set('dest_dir');\n        expSession::un_set('files_data');\n\n        expFile::removeDirectory($dest_dir);\n\n        assign_to_template(array(\n            'file_count' => $filecount,\n        ));\n    }\n\n    public function export_files() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['controller'],isset($this->params['src'])?$this->params['src']:null,isset($this->params['int'])?$this->params['int']:null);\n        //$mods = array();\n        //$dh = opendir(BASE.'files');\n        //while (($file = readdir($dh)) !== false) {\n        //\tif (is_dir(BASE.'files/'.$file) && $file{0} != '.' && class_exists($file)) {\n        //\t\t$mods[$file] = call_user_func(array($file,'name'));\n        //\t}\n        //}\n        //uasort($mods,'strnatcmp');\n\n        assign_to_template(array(\n            'user' => $user,\n        ));\n    }\n\n    public function export_files_process() {\n//        global $db;\n\n        //if (!isset($this->params['mods'])) {\n        //\techo gt('You must select at least one module to export files for.');\n        //\treturn;\n        //}\n\n        include_once(BASE.'external/Tar.php');\n\n        $files = array();\n        //foreach (array_keys($this->params['mods']) as $mod) {\n        //\tforeach ($db->selectObjects('file',\"directory LIKE 'files/\".$mod.\"%'\") as $file) {\n//            foreach ($db->selectObjects('expFiles',1) as $file) {\n        foreach (expFile::selectAllFiles() as $file) {\n            $files[] = BASE.$file->directory.$file->filename;\n        }\n        //}\n\n        $fname = tempnam(BASE.'/tmp','exporter_files_');\n        $tar = new Archive_Tar($fname,'gz');\n        $tar->createModify($files,'',BASE);\n\n        $filename = str_replace(\n            array('__DOMAIN__','__DB__'),\n            array(str_replace('.','_',HOSTNAME),DB_NAME),\n            $this->params['filename']);\n        $filename = preg_replace('/[^A-Za-z0-9_.-]/','-',strftime($filename,time()).'.tar.gz');\n\n        if (isset($this->params['save_sample'])) { // Save as a theme sample is checked off\n            copy($fname,BASE . \"themes/\".DISPLAY_THEME_REAL.\"/sample.tar.gz\");\n            unlink($fname);\n            flash('message',gt(\"Sample uploaded files archive saved to\").\" '\".DISPLAY_THEME_REAL.\"' \".gt(\"theme\"));\n            expHistory::back();\n        } else {\n            ob_end_clean();\n            // This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n            // 'application/octet-stream' is the registered IANA type but\n            //        MSIE and Opera seems to prefer 'application/octetstream'\n            $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n            header('Content-Type: ' . $mime_type);\n            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n            } else {\n                header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n                header('Pragma: no-cache');\n            }\n\n            $fh = fopen($fname,'rb');\n            while (!feof($fh)) {\n                echo fread($fh,8192);\n            }\n            fclose($fh);\n            unlink($fname);\n        }\n\n        exit(''); // Exit, since we are exporting.\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n\nclass formsController extends expController {\n    public $useractions = array(\n        'enterdata' => 'Input Records',\n        'showall'    => 'Show All Records',\n        'show'       => 'Show a Single Record',\n    );\n    protected $add_permissions = array(\n        'viewdata'  => \"View Data\",\n        'enter_data' => \"Enter Data\",  // slight naming variation to not fully restrict enterdata method\n    );\n    protected $manage_permissions = array(\n        'design' => 'Design Form',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n//        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n//    public $codequality = 'beta';\n\n    static function displayname() {\n        return gt(\"Forms\");\n    }\n\n    static function description() {\n        return gt(\"Allows the creation of forms that can be emailed, or even viewed if they are optionally stored in the database\");\n    }\n\n    static function author() {\n        return \"Dave Leffler\";\n    }\n\n    static function isSearchable() {\n        return false;\n    }\n\n    function searchName() {\n        return gt(\"Forms\");\n    }\n\n    function searchCategory() {\n        return gt('Form Data');\n    }\n\n    static function requiresConfiguration()\n    {\n        return true;\n    }\n\n    public function showall() {\n        if ((!empty($this->config['unrestrict_view']) || expPermissions::check('viewdata', $this->loc))) {\n            expHistory::set('viewable', $this->params);\n            $f = null;\n            if (!empty($this->config)) {\n                $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            } elseif (!empty($this->params['title'])) {\n                $f = $this->forms->find('first', 'sef_url=\"' . expString::escape($this->params['title']) . '\"');\n                $this->get_defaults($f);\n            } elseif (!empty($this->params['id'])) {\n                $f = $this->forms->find('first', 'id=' . $this->params['id']);\n                $this->get_defaults($f);\n            }\n\n            if (!empty($f)) {\n                if (empty($this->config['report_filter']) && empty($this->params['filter'])) {  // allow for param of 'filter' also\n                    $where = '1';\n                } elseif (!empty($this->params['filter'])) {\n                    $where = expString::escape($this->params['filter']);\n                } else {\n                    $where = $this->config['report_filter'];\n                }\n                $fc = new forms_control();\n                if (empty($this->config['column_names_list'])) {\n                    //define some default columns...\n                    $controls = $fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0 AND is_static = 0', 'rank');\n                    if (!empty($this->params['view']) && $this->params['view'] == 'showall_portfolio') {\n                        foreach ($controls as $control) {  // we need to output all columns for portfolio view\n                            $this->config['column_names_list'][] = $control->name;\n                        }\n                    } else {\n                        foreach (array_slice($controls, 0, 5) as $control) {  // default to only first 5 columns\n                            $this->config['column_names_list'][] = $control->name;\n                        }\n                    }\n                }\n\n                // pre-process records\n                $items = $f->selectRecordsArray($where);\n                $columns = array();\n                foreach ($this->config['column_names_list'] as $column_name) {\n                    if ($column_name == \"ip\") {\n//                        $columns[gt('IP Address')] = 'ip';\n                        $columns['ip'] = gt('IP Address');\n                    } elseif ($column_name == \"referrer\") {\n//                        $columns[gt('Referrer')] = 'referrer';\n                        $columns['referrer'] = gt('Referrer');\n                    } elseif ($column_name == \"location_data\") {\n//                        $columns[gt('Entry Point')] = 'location_data';\n                        $columns['location_data'] = gt('Entry Point');\n                    } elseif ($column_name == \"user_id\") {\n                        foreach ($items as $key => $item) {\n                            if ($item[$column_name] != 0) {\n                                $locUser = user::getUserById($item[$column_name]);\n                                $item[$column_name] = $locUser->username;\n                            } else {\n                                $item[$column_name] = '';\n                            }\n                            $items[$key] = $item;\n                        }\n//                        $columns[gt('Posted by')] = 'user_id';\n                        $columns['user_id'] = gt('Posted by');\n                    } elseif ($column_name == \"timestamp\") {\n                        foreach ($items as $key => $item) {\n                            $item[$column_name] = strftime(DISPLAY_DATETIME_FORMAT, $item[$column_name]);\n                            $items[$key] = $item;\n                        }\n//                        $columns[gt('Timestamp')] = 'timestamp';\n                        $columns['timestamp'] = gt('Timestamp');\n                    } else {\n                        $control = $fc->find('first', \"name='\" . $column_name . \"' AND forms_id=\" . $f->id, 'rank');\n                        if ($control) {\n                            $ctl = expUnserialize($control->data);\n                            $control_type = get_class($ctl);\n                            foreach ($items as $key => $item) {\n                                //We have to add special sorting for date time columns!!!\n                                $item[$column_name] = @call_user_func(\n                                    array($control_type, 'templateFormat'),\n                                    $item[$column_name],\n                                    $ctl\n                                );\n                                $items[$key] = $item;\n                            }\n//                            $columns[$control->caption] = $column_name;\n                            $columns[$column_name] = $control->caption;\n                        }\n                    }\n                }\n\n                $page = new expPaginator(\n                    array(\n                        'records' => $items,\n                        'where' => 1,\n//                'limit'   => (isset($this->params['limit']) && $this->params['limit'] != '') ? $this->params['limit'] : 10,\n                        'order' => (isset($this->params['order']) && $this->params['order'] != '') ? $this->params['order'] : (!empty($this->config['order']) ? $this->config['order'] : 'id'),\n                        'dir' => (isset($this->params['dir']) && $this->params['dir'] != '') ? $this->params['dir'] : (!empty($this->config['dir']) ? $this->config['dir'] : 'ASC'),\n                        'page' => (isset($this->params['page']) ? $this->params['page'] : 1),\n                        'controller' => $this->baseclassname,\n                        'action' => $this->params['action'],\n                        'src' => $this->loc->src,\n                        'columns' => $columns\n                    )\n                );\n\n                assign_to_template(\n                    array(\n//                \"backlink\"    => expHistory::getLastNotEditable(),\n                        \"backlink\" => expHistory::getLast('viewable'),\n                        \"f\" => $f,\n                        \"page\" => $page,\n                        \"title\" => !empty($this->config['report_name']) ? $this->config['report_name'] : '',\n                        \"description\" => !empty($this->config['report_desc']) ? $this->config['report_desc'] : null,\n                        \"filtered\" => !empty($this->config['report_filter']) ? $this->config['report_filter'] : ''\n                    )\n                );\n            }\n        } else {\n            assign_to_template(array(\n                \"error\" => 1,\n            ));\n        }\n    }\n\n    public function show() {\n        if (!empty($this->config['unrestrict_view']) || expPermissions::check('viewdata', $this->loc)) {\n            expHistory::set('viewable', $this->params);\n            $f = null;\n            if (!empty($this->config)) {\n                $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            } elseif (!empty($this->params['forms_id'])) {\n                $f = $this->forms->find('first', 'id=' . $this->params['forms_id']);\n            } elseif (!empty($this->params['title'])) {\n                $f = $this->forms->find('first', 'sef_url=\"' . expString::escape($this->params['title']) . '\"');\n                redirect_to(array('controller' => 'forms', 'action' => 'enterdata', 'forms_id' => $f->id));\n            }\n\n            if (!empty($f)) {\n                $fc = new forms_control();\n                $controls = $fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0 AND is_static = 0', 'rank');\n                $id = !empty($this->params['id']) ? $this->params['id'] : null;\n                $data = $f->getRecord($id);\n\n                $fields = array();\n                $captions = array();\n                if ($controls && $data) {\n                    foreach ($controls as $c) {\n                        $ctl = expUnserialize($c->data);\n                        $control_type = get_class($ctl);\n                        $name = $c->name;\n                        $fields[$name] = call_user_func(array($control_type, 'templateFormat'), $data->$name, $ctl);\n                        $captions[$name] = $c->caption;\n                    }\n\n                    // system added fields\n                    $captions['ip'] = gt('IP Address');\n                    $captions['timestamp'] = gt('Timestamp');\n                    $captions['user_id'] = gt('Posted by');\n                    $fields['ip'] = $data->ip;\n                    $fields['timestamp'] = strftime(DISPLAY_DATETIME_FORMAT, $data->timestamp);\n                    $locUser = user::getUserById($data->user_id);\n                    $fields['user_id'] = !empty($locUser->username) ? $locUser->username : '';\n\n                    // add a browse other records (next/prev) feature here\n                    $field = !empty($this->config['order']) ? $this->config['order'] : 'id';\n                    $data->next = $f->getRecord($field . ' > ' . $data->$field . ' ORDER BY ' . $field);\n                    if (!empty($data->next) && $data->next != $data->id) {\n                        assign_to_template(\n                            array(\n                                \"next\" => $data->next,\n                            )\n                        );\n                    }\n                    $data->prev = $f->getRecord($field . ' < ' . $data->$field . ' ORDER BY ' . $field . ' DESC');\n                    if (!empty($data->prev) && $data->prev != $data->id) {\n                        assign_to_template(\n                            array(\n                                \"prev\" => $data->prev,\n                            )\n                        );\n                    }\n                }\n\n                $count = $f->countRecords();\n                assign_to_template(\n                    array(\n                        //            \"backlink\"=>expHistory::getLastNotEditable(),\n    //                'backlink'    => expHistory::getLast('editable'),\n                        'backlink' => makeLink(expHistory::getBack(1)),\n                        \"f\" => $f,\n    //                \"record_id\"   => $this->params['id'],\n                        \"record_id\" => !empty($data->id) ? $data->id : null,\n                        \"title\" => !empty($this->config['report_name']) ? $this->config['report_name'] : gt(\n                            'Viewing Record'\n                        ),\n                        \"description\" => !empty($this->config['report_desc']) ? $this->config['report_desc'] : null,\n                        'fields' => $fields,\n                        'captions' => $captions,\n                        \"count\"       => $count,\n                        'is_email' => 0,\n                        \"css\" => file_get_contents(BASE . \"framework/core/assets/css/tables.css\"),\n                    )\n                );\n            }\n        } else {\n            assign_to_template(array(\n                \"error\" => 1,\n            ));\n        }\n    }\n\n    public function enter_data() {\n        $this->enterdata();\n    }\n\n    public function enterdata() {\n        if (empty($this->config['restrict_enter']) || expPermissions::check('enter_data', $this->loc)) {\n\n            global $user;\n\n            expHistory::set('viewable', $this->params);\n            $f = null;\n            if (!empty($this->config)) {\n                $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            } elseif (!empty($this->params['forms_id'])) {\n                $f = $this->forms->find('first', 'id=' . $this->params['forms_id']);\n                $this->get_defaults($f);\n            }\n\n            if (!empty($f)) {\n                $form = new form();\n                $form->id = $f->sef_url;\n                $form->horizontal = !empty($this->config['style']);\n                if (!empty($this->params['id'])) {\n                    $fc = new forms_control();\n                    $controls = $fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly = 0 AND is_static = 0','rank');\n                    $data = $f->getRecord($this->params['id']);\n                } else {\n                    if (!empty($f->forms_control)) {\n                        $controls = $f->forms_control;\n                    } else {\n                        $controls = array();\n                    }\n                    $data = expSession::get('forms_data_' . $f->id);\n                }\n                // display list of email addresses\n                if (!empty($this->config['select_email'])) {\n                    //Building Email List...\n                    $emaillist = array();\n                    if (!empty($this->config['user_list'])) foreach ($this->config['user_list'] as $c) {\n                        $u = user::getUserById($c);\n                        if (!empty($u->email)) {\n                            if (!empty($u->firstname) || !empty($u->lastname)) {\n                                $title = $u->firstname . ' ' . $u->lastname . ' ('. $u->email . ')';\n                            } else {\n                                $title = $u->username . ' ('. $u->email . ')';\n                            }\n                            $emaillist[$u->email] = $title;\n                        }\n                    }\n                    if (!empty($this->config['group_list'])) foreach ($this->config['group_list'] as $c) {\n//                        $grpusers = group::getUsersInGroup($c);\n//                        foreach ($grpusers as $u) {\n//                            $emaillist[] = $u->email;\n//                        }\n                        $g = group::getGroupById($c);\n                        $emaillist[$c] = $g->name;\n                    }\n                    if (!empty($this->config['address_list'])) foreach ($this->config['address_list'] as $c) {\n                        $emaillist[$c] = $c;\n                    }\n                    //This is an easy way to remove duplicates\n                    $emaillist = array_flip(array_flip($emaillist));\n                    $emaillist = array_map('trim', $emaillist);\n                    $emaillist = array_reverse($emaillist, true);\n                    if (empty($this->config['select_exclude_all']))\n                        $emaillist[0] = gt('All Addresses');\n                    $emaillist = array_reverse($emaillist, true);\n                    if (!empty($this->config['select_dropdown']))\n                        $form->register('email_dest', gt('Send Response to'), new dropdowncontrol('', $emaillist));\n                    else\n                        $form->register('email_dest', gt('Send Response to'), new radiogroupcontrol('', $emaillist));\n                }\n//                $paged = false;\n                foreach ($controls as $key=>$c) {\n                    $ctl = expUnserialize($c->data);\n                    $ctl->_id = $c->id;\n                    $ctl->_readonly = $c->is_readonly;\n                    $ctl->_ishidden = !empty($ctl->is_hidden) && empty($this->params['id']);  // hide it if entering new data\n                    if (!empty($this->params['id'])) {\n                        if ($c->is_readonly == 0) {\n                            $name = $c->name;\n                            if ($c->is_static == 0) {\n                                $ctl->default = $data->$name;\n                            }\n                        }\n                    } else {\n                        if (!empty($data[$c->name])) $ctl->default = $data[$c->name];\n                    }\n                    if ($key == 0) $ctl->focus = true;  // first control gets the focus\n                    $form->register($c->name, $c->caption, $ctl);\n//                    if (get_class($ctl) == 'pagecontrol') $paged = true;\n                }\n\n                // if we are editing an existing record we'll need to do recaptcha here since we won't call confirm_data\n                if (!empty($this->params['id'])) {\n                    $antispam = '';\n                    if (SITE_USE_ANTI_SPAM && ANTI_SPAM_CONTROL == 'recaptcha') {\n                        // make sure we have the proper config.\n                        if (!defined('RECAPTCHA_PUB_KEY')) {\n                            $antispam .= '<h2 style=\"color:red\">' . gt('reCaptcha configuration is missing the public key.') . '</h2>';\n                        }\n                        if ($user->isLoggedIn() && ANTI_SPAM_USERS_SKIP == 1) {\n                            // skip it for logged on users based on config\n                        } else {\n                            // include the library and show the form control\n//                            require_once(BASE . 'external/ReCaptcha/autoload.php');  //FIXME not sure we need this here\n                            $re_theme = (RECAPTCHA_THEME == 'dark') ? 'dark' : 'light';\n                            $antispam .= '<input type=\"hidden\" class=\"hiddenRecaptcha required\" name=\"hiddenRecaptcha\" id=\"hiddenRecaptcha\">';\n                            //create unique recaptcha blocks\n                            $randomNumber = mt_rand(10000000, 99999999);\n                            $antispam .= '<div class=\"g-recaptcha\" id=\"recaptcha-block-'.$randomNumber.'\" data-sitekey=\"' . RECAPTCHA_PUB_KEY . '\" data-theme=\"' . $re_theme . '\"></div>';\n//                            $antispam .= '<script type=\"text/javascript\" src=\"https://www.google.com/recaptcha/api.js?onload=myCallBack&render=explicit&hl=' . LOCALE . '\" async defer></script>';\n                            $antispam .= '<p>' . gt('Fill out the above security question to submit your form.') . '</p>';\n                        }\n                        $content = \"\n                            var captcha;\n                            var myCallBack = function() {\n                                var recaptchas = document.querySelectorAll('div[id^=recaptcha-block-]');\n                                for (i = 0; i < recaptchas.length; i++) {\n                                    captcha = grecaptcha.render(recaptchas[i].id, {\n                                      'sitekey' : '\" . RECAPTCHA_PUB_KEY . \"',\n                                      'theme'   : '\" . $re_theme . \"'\n                                    });\n                                }\n                            };\";\n                        expJavascript::pushToFoot(array(\n                            \"unique\"=>'recaptcha',\n                            \"content\"=>$content,\n                            \"src\"=>\"https://www.google.com/recaptcha/api.js?onload=myCallBack&render=explicit&hl=\" . LOCALE\n                         ));                    }\n                    $form->register(uniqid(''), '', new htmlcontrol($antispam));\n                }\n\n                if (empty($this->config['submitbtn'])) $this->config['submitbtn'] = gt('Submit');\n                if (!empty($this->params['id'])) {\n                    $cancel = gt('Cancel');\n                    $form->meta('action', 'submit_data');\n                    $form->meta('isedit', 1);\n                    $form->meta('data_id', $data->id);\n                    $form->location($this->loc);\n                    assign_to_template(array(\n                        'edit_mode' => 1,\n                    ));\n                } else {\n                    $cancel = '';\n                    $form->meta(\"action\", \"confirm_data\");\n                }\n                if (empty($this->config['submitbtn'])) $this->config['submitbtn'] = gt('Submit');\n                if (empty($this->config['resetbtn'])) $this->config['resetbtn'] = '';\n                $form->register(\"submit\", \"\", new buttongroupcontrol($this->config['submitbtn'], $this->config['resetbtn'], $cancel, 'finish'));\n\n                $form->meta(\"m\", $this->loc->mod);\n                $form->meta(\"s\", $this->loc->src);\n                $form->meta(\"i\", $this->loc->int);\n                $form->meta(\"id\", $f->id);\n                $formmsg = '';\n                $form->location(expCore::makeLocation(\"forms\", $this->loc->src, $this->loc->int));\n                if (count($controls) == 0) {\n                    $form->controls['submit']->disabled = true;\n                    $formmsg .= gt('This form is blank. Select \"Design Form\" to add input fields.') . '<br>';\n                } elseif (empty($f->is_saved) && empty($this->config['is_email'])) {\n                    $form->controls['submit']->disabled = true;\n                    $formmsg .= gt('There are no actions assigned to this form. Select \"Configure Settings\" then either select \"Email Form Data\" and/or \"Save Submissions to Database\".');\n                }\n                $count = $f->countRecords();\n                if ($formmsg) {\n                    flash('notice', $formmsg);\n                }\n                if (empty($this->config['description'])) $this->config['description'] = '';\n                assign_to_template(array(\n                    \"description\" => $this->config['description'],\n                    \"form_html\"   => $form->toHTML(),\n                    \"form\"        => $f,\n                    \"count\"       => $count,\n//                    'paged'       => $paged,\n                ));\n            }\n        } else {\n            assign_to_template(array(\n                \"error\" => 1,\n            ));\n        }\n    }\n\n    public function confirm_data() {\n        $f = new forms($this->params['id']);\n        $cols = $f->forms_control;\n        $counts = array();\n        $responses = array();\n        $captions = array();\n\n        foreach ($cols as $col) {\n            $newupload = false;\n            $coldef = expUnserialize($col->data);\n            $coldata = new ReflectionClass($coldef);\n            if (empty($coldef->is_hidden)) {\n                $coltype = $coldata->getName();\n                if ($coltype == 'uploadcontrol' && !empty($_FILES)) {\n                    $newupload = true;\n                    $value = call_user_func(array($coltype, 'parseData'), $col->name, $_FILES, true);\n                } else {\n                    $value = call_user_func(array($coltype, 'parseData'), $col->name, $this->params, true);\n                }\n                $value = call_user_func(array($coltype, 'templateFormat'), $value, $coldef);  // convert parsed value to user readable\n                //eDebug($value);\n//                $counts[$col->caption] = isset($counts[$col->caption]) ? $counts[$col->caption] + 1 : 1;\n//                $num = $counts[$col->caption] > 1 ? $counts[$col->caption] : '';\n\n                if (!empty($this->params[$col->name])) {\n//                if ($coltype == 'checkboxcontrol') {\n//                    $responses[$col->caption . $num] = gt('Yes');\n//                } else {\n//                    $responses[$col->caption . $num] = $value;\n                    $responses[$col->name] = $value;\n                    $captions[$col->name] = $col->caption;\n//                }\n                } else {\n                    if ($coltype == 'checkboxcontrol') {\n//                        $responses[$col->caption . $num] = gt('No');\n                        $responses[$col->name] = gt('No');\n                        $captions[$col->name] = $col->caption;\n                    } elseif ($coltype == 'datetimecontrol' || $coltype == 'calendarcontrol' || $coltype == 'popupdatetimecontrol') {\n//                        $responses[$col->name] = $value;\n                        $responses[$col->name] = $value;\n                        $captions[$col->name] = $col->caption;\n                    } elseif ($coltype == 'uploadcontrol') {\n                        if ($newupload) {\n                            $newfile = call_user_func(\n                                    array($coltype, 'moveFile'),\n                                    $col->name,\n                                    $_FILES,\n                                    true\n                                );\n                            if (!empty($newfile)) {\n                                $this->params[$col->name] = PATH_RELATIVE . $newfile;\n                            } else {\n                                $this->params[$col->name] = \"\";\n                            }\n                        }\n                        //            $value = call_user_func(array($coltype,'buildDownloadLink'),$this->params[$col->name],$_FILES[$col->name]['name'],true);\n                        //eDebug($value);\n//                        $responses[$col->caption . $num] = $_FILES[$col->name]['name'];\n//                        $responses[$col->name] = $_FILES[$col->name]['name'];\n//                        $responses[$col->name] = $this->params[$col->name];\n                        $responses[$col->name] = call_user_func(array($coltype, 'templateFormat'), $this->params[$col->name], null);  // convert parsed value to user readable\n                        $captions[$col->name] = $col->caption;\n                    } elseif ($coltype != 'htmlcontrol' && $coltype != 'pagecontrol') {\n//                        $responses[$col->caption . $num] = '';\n                        $responses[$col->name] = '';\n                        $captions[$col->name] = $col->caption;\n                    }\n                }\n            }\n        }\n\n        // remove some post data we don't want to pass thru to the form\n        unset(\n            $this->params['controller'],\n            $this->params['action'],\n            $this->params['view']\n        );\n        foreach ($this->params as $k => $v) {\n        //    $this->params[$k]=htmlentities(htmlspecialchars($v,ENT_COMPAT,LANG_CHARSET));\n            $this->params[$k] = htmlspecialchars($v, ENT_COMPAT, LANG_CHARSET);\n        }\n        expSession::set('forms_data_' . $this->params['id'], $this->params);\n\n        assign_to_template(array(\n            'responses'       => $responses,\n            'captions'        => $captions,\n            'postdata'        => $this->params,\n        ));\n    }\n\n    public function submit_data() {\n        // Check for form errors\n        $this->params['manual_redirect'] = true;\n        if (!expValidator::check_antispam($this->params)) {\n            flash('error', gt('Security Validation Failed'));\n            expHistory::back();\n        }\n\n        global $db, $user;\n        $f = new forms($this->params['id']);\n        $fc = new forms_control();\n        $controls = $fc->find('all', \"forms_id=\" . $f->id . \" AND is_readonly=0\",'rank');\n        $this->get_defaults($f);\n\n        $db_data = new stdClass();\n        $emailFields = array();\n        $captions = array();\n        $attachments = array();\n        foreach ($controls as $c) {\n            $ctl = expUnserialize($c->data);\n            $control_type = get_class($ctl);\n            $def = call_user_func(array($control_type, \"getFieldDefinition\"));\n            if ($def != null) {\n                $emailValue = htmlspecialchars_decode(call_user_func(array($control_type, 'parseData'), $c->name, $this->params, true));\n                $value = stripslashes(expString::escape($emailValue));\n\n                //eDebug($value);\n                $varname = $c->name;\n                $db_data->$varname = $value;\n        //        $fields[$c->name] = call_user_func(array($control_type,'templateFormat'),$value,$ctl);\n                if (!$ctl->is_hidden) {\n                    $emailFields[$c->name] = call_user_func(array($control_type, 'templateFormat'), $value, $ctl);\n                    $captions[$c->name] = $c->caption;\n                    if (strtolower($c->name) == \"email\" && expValidator::isValidEmail($value)) {\n                        $from = $value;\n                    }\n                    if (strtolower($c->name) == \"name\") {\n                        $from_name = $value;\n                    }\n                    if (get_class($ctl) == 'uploadcontrol') {\n                        $attachments[] = htmlspecialchars_decode($this->params[$c->name]);\n                    }\n                }\n            }\n        }\n\n        if (!isset($this->params['data_id']) || (isset($this->params['data_id']) && expPermissions::check(\"editdata\", $f->loc))) {\n            if (!empty($f->is_saved)) {\n                if (isset($this->params['data_id'])) {\n                    //if this is an edit we remove the record and insert a new one.\n                    $olddata = $f->getRecord($this->params['data_id']);\n                    $db_data->ip = $olddata->ip;\n                    $db_data->user_id = $olddata->user_id;\n                    $db_data->timestamp = $olddata->timestamp;\n                    $db_data->referrer = $olddata->referrer;\n                    $db_data->location_data = $olddata->location_data;\n                    $f->deleteRecord($this->params['data_id']);\n                } else {\n                    $db_data->ip = $_SERVER['REMOTE_ADDR'];\n                    if (expSession::loggedIn()) {\n                        $db_data->user_id = $user->id;\n                        $from = $user->email;\n                        $from_name = $user->firstname . \" \" . $user->lastname . \" (\" . $user->username . \")\";\n                    } else {\n                        $db_data->user_id = 0;\n                    }\n                    $db_data->timestamp = time();\n                    $referrer = $db->selectValue(\"sessionticket\", \"referrer\", \"ticket = '\" . expSession::getTicketString() . \"'\");\n                    $db_data->referrer = $referrer;\n                    $location_data = null;\n                    if (!empty($this->params['src'])) {\n                        $mod = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n                        expCore::makeLocation($mod,$this->params['src'],$this->params['int']);\n                    }\n                    $db_data->location_data = $location_data;\n                }\n                $f->insertRecord($db_data);\n            } else {\n                $referrer = $db->selectValue(\"sessionticket\", \"referrer\", \"ticket = '\" . expSession::getTicketString() . \"'\");\n            }\n\n            //Email stuff here...\n            //Don't send email if this is an edit.\n            if (!empty($this->config['is_email']) && !isset($this->params['data_id'])) {\n                //Building Email List...\n                $emaillist = array();\n                if (!empty($this->config['select_email']) && !empty($this->params['email_dest'])) {\n                    if (strval(intval($this->params['email_dest'])) == strval($this->params['email_dest'])) {\n                        foreach (group::getUsersInGroup($this->params['email_dest']) as $locUser) {\n                            if ($locUser->email != '') $emaillist[$locUser->email] = trim(user::getUserAttribution($locUser->id));\n                        }\n                    } else {\n                        $emaillist[] = $this->params['email_dest'];\n                    }\n                } else { // send to all form addressee's\n                    $emaillist = array();\n                    if (!empty($this->config['user_list'])) foreach ($this->config['user_list'] as $c) {\n                        $u = user::getUserById($c);\n                        $emaillist[$u->email] = trim(user::getUserAttribution($u->id));\n                    }\n                    if (!empty($this->config['group_list'])) foreach ($this->config['group_list'] as $c) {\n                        $grpusers = group::getUsersInGroup($c);\n                        foreach ($grpusers as $u) {\n                            $emaillist[$u->email] = trim(user::getUserAttribution($u->id));\n                        }\n                    }\n                    if (!empty($this->config['address_list'])) foreach ($this->config['address_list'] as $c) {\n                        $emaillist[] = $c;\n                    }\n                }\n                //This is an easy way to remove duplicates\n                $emaillist = array_flip(array_flip($emaillist));\n                $emaillist = array_map('trim', $emaillist);\n\n                if (empty($this->config['report_def'])) {\n                    $msgtemplate = expTemplate::get_template_for_action($this, 'email/default_report', $this->loc);\n\n                } else {\n                    $msgtemplate = expTemplate::get_template_for_action($this, 'email/custom_report', $this->loc);\n                    $msgtemplate->assign('template', $this->config['report_def']);\n                }\n                $msgtemplate->assign(\"fields\", $emailFields);\n                $msgtemplate->assign(\"captions\", $captions);\n                $msgtemplate->assign('title', $this->config['report_name']);\n                $msgtemplate->assign(\"is_email\", 1);\n                if (!empty($referrer)) $msgtemplate->assign(\"referrer\", $referrer);\n//                $emailText = $msgtemplate->render();\n//                $emailText = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $emailText)));\n                $msgtemplate->assign(\"css\", file_get_contents(BASE . \"framework/core/assets/css/tables.css\"));\n                $emailHtml = $msgtemplate->render();\n\n                if (empty($from)) {\n                    $from = trim(SMTP_FROMADDRESS);\n                }\n                if (empty($from_name)) {\n                    $from_name = trim(ORGANIZATION_NAME);\n                }\n                // $headers = array(\n                // \"MIME-Version\"=>\"1.0\",\n                // \"Content-type\"=>\"text/html; charset=\".LANG_CHARSET\n                // );\n                if (count($emaillist)) {\n                    $mail = new expMail();\n                    if (!empty($attachments)) {\n                        foreach ($attachments as $attachment) {\n                            if (!empty($attachment)) {\n                                if (strlen(PATH_RELATIVE) != 1)\n                                    $attachment = expFile::fixName(str_replace(PATH_RELATIVE, '', $attachment));  // strip relative path for links coming from templates\n                                if (file_exists(BASE . $attachment)) {\n//                                $relpath = str_replace(PATH_RELATIVE, '', BASE);\n//                            $finfo = finfo_open(FILEINFO_MIME_TYPE);\n//                            $ftype = finfo_file($finfo, $relpath . $attachment);\n//                            finfo_close($finfo);\n                                    $mail->attach_file_on_disk(BASE . $attachment, expFile::getMimeType($attachment));\n                                }\n                            }\n                        }\n                    }\n                    $mail->quickSend(array(\n                        //\t'headers'=>$headers,\n                        'html_message' => $emailHtml,\n//                        \"text_message\" => $emailText,\n                        \"text_message\" => expString::html2text($emailHtml),\n                        'to'           => $emaillist,\n                        'from'         => array(trim($from) => $from_name),\n                        'subject'      => $this->config['subject'],\n                    ));\n                }\n            }\n\n            if (!empty($this->config['is_auto_respond']) && !isset($this->params['data_id']) && !empty($db_data->email)) {\n                if (empty($from)) {\n                    $from = trim(SMTP_FROMADDRESS);\n                }\n                if (empty($from_name)) {\n                    $from_name = trim(ORGANIZATION_NAME);\n                }\n//                $headers = array(\n//                    \"MIME-Version\" => \"1.0\",\n//                    \"Content-type\" => \"text/html; charset=\" . LANG_CHARSET\n//                );\n\n//                $tmsg = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $this->config['auto_respond_body'])));\n//                if ($this->config['auto_respond_form'])\n//                    $tmsg .= \"\\n\" . $emailText;\n                $hmsg = $this->config['auto_respond_body'];\n                if (!empty($this->config['auto_respond_form']))\n                    $hmsg .= \"\\n\" . $emailHtml;\n                $mail = new expMail();\n                $mail->quickSend(array(\n//                    'headers'      => $headers,\n//                    \"text_message\" => $tmsg,\n                    'html_message' => $hmsg,\n                    \"text_message\" => expString::html2text($hmsg),\n                    'to'           => $db_data->email,\n                    'from'         => array(trim($from) => $from_name),\n                    'subject'      => $this->config['auto_respond_subject'],\n                ));\n            }\n\n            // clear the users post data from the session.\n            expSession::un_set('forms_data_' . $f->id);\n\n            //If is a new post show response, otherwise redirect to the flow.\n            if (!isset($this->params['data_id'])) {\n                if (empty($this->config['response'])) $this->config['response'] = gt('Thanks for your submission');\n                assign_to_template(array(\n                    \"backlink\"=>expHistory::getLastNotEditable(),\n                    \"response_html\"=>$this->config['response'],\n                ));\n            } else {\n                flash('message', gt('Record was updated!'));\n        //        expHistory::back();\n                expHistory::returnTo('editable');\n            }\n        }\n    }\n\n    /**\n     * delete item in saved data\n     *\n     */\n    function delete() {\n        if (empty($this->params['id']) || empty($this->params['forms_id'])) {\n            flash('error', gt('Missing id for the') . ' ' . gt('item') . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $f = new forms($this->params['forms_id']);\n        $f->deleteRecord($this->params['id']);\n\n        expHistory::back();\n    }\n\n    /**\n     * delete all items in saved data\n     *\n     */\n    function delete_records() {\n        if (empty($this->params['forms_id'])) {\n            flash('error', gt('Missing id for the') . ' ' . gt('form records') . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n\n        $f = new forms($this->params['forms_id']);\n        $recs = $f->getRecords();\n        foreach ($recs as $rec) {\n            $f->deleteRecord($rec->id);\n        }\n\n        flash('message', gt('All form records were deleted!'));\n        expHistory::back();\n    }\n\n    /**\n     * Manage site forms\n     *\n     */\n    public function manage() {\n        expHistory::set('manageable', $this->params);\n        $forms = $this->forms->find('all', 1);\n        foreach($forms as $key=>$f) {\n            if (!empty($f->table_name) && $f->tableExists() ) {\n                $forms[$key]->count = $f->countRecords();\n            }\n            $forms[$key]->control_count = count($f->forms_control);\n        }\n\n        assign_to_template(array(\n            'select' => !empty($this->params['select']),\n            'forms' => $forms\n        ));\n    }\n\n    /**\n     * Assign selected form to current module\n     *\n     */\n    public function activate() {\n        // assign new form assigned\n        $this->config['forms_id'] = $this->params['id'];\n        // set default settings for this form\n        $f = new forms($this->params['id']);\n        if (!empty($f->description)) $this->config['description'] = $f->description;\n        if (!empty($f->response)) $this->config['response'] = $f->response;\n        if (!empty($f->report_name)) $this->config['report_name'] = $f->report_name;\n        if (!empty($f->report_desc)) $this->config['report_desc'] = $f->report_desc;\n        if (!empty($f->column_names_list)) $this->config['column_names_list'] = $f->column_names_list;\n        if (!empty($f->report_def)) $this->config['report_def'] = $f->report_def;\n\n        // setup and save the config\n        $config = new expConfig($this->loc);\n        $config->update(array('config' => $this->config));\n\n        expHistory::back();\n    }\n\n    public function edit_form() {\n        expHistory::set('editable', $this->params);\n        if (!empty($this->params['id'])) {\n            $f = $this->forms->find('first', 'id=' . $this->params['id']);\n        } else {\n            $f = new forms();\n        }\n        $fields = array();\n        $column_names = array();\n        $cols = array();\n\n        if (!empty($f->column_names_list)) {\n            $cols = explode('|!|', $f->column_names_list);\n        }\n        $fc = new forms_control();\n        foreach ($fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0','rank') as $control) {\n            $ctl = expUnserialize($control->data);\n            $control_type = get_class($ctl);\n            $def = call_user_func(array($control_type, 'getFieldDefinition'));\n            if ($def != null) {\n                $fields[$control->name] = $control->caption;\n                if (in_array($control->name, $cols)) {\n                    $column_names[$control->name] = $control->caption;\n                }\n            }\n        }\n        $fields['ip'] = gt('IP Address');\n        if (in_array('ip', $cols)) $column_names['ip'] = gt('IP Address');\n        $fields['user_id'] = gt('Posted by');\n        if (in_array('user_id', $cols)) $column_names['user_id'] = gt('Posted by');\n        $fields['timestamp'] = gt('Timestamp');\n        if (in_array('timestamp', $cols)) $column_names['timestamp'] = gt('Timestamp');\n//        if (in_array('location_data', $cols)) $column_names['location_data'] = gt('Entry Point');\n\n        if (!empty($this->params['copy'])) {\n            $f->old_id = $f->id;\n            $f->id = null;\n            $f->sef_url = null;\n            $f->is_saved = false;\n            $f->table_name = null;\n        }\n        $fieldlist = '[';\n        if (isset($f->id)) {\n            $fc = new forms_control();\n            foreach ($fc->find('all', 'forms_id=' . $f->id . ' AND is_readonly=0','rank') as $control) {\n                $ctl = expUnserialize($control->data);\n                $control_type = get_class($ctl);\n                $def = call_user_func(array($control_type, 'getFieldDefinition'));\n                if ($def != null) {\n                    $fields[$control->name] = $control->caption;\n                    if (in_array($control->name, $cols)) {\n                        $column_names[$control->name] = $control->caption;\n                    }\n                }\n                if ($control_type != 'pagecontrol' && $control_type != 'htmlcontrol') {\n                    $fieldlist .= '[\"{\\$fields[\\'' . $control->name . '\\']}\",\"' . $control->caption . '\",\"' . gt('Insert') . ' ' . $control->caption . ' ' . gt('Field') . '\"],';\n                }\n            }\n            $fields['ip'] = gt('IP Address');\n            if (in_array('ip', $cols)) $column_names['ip'] = gt('IP Address');\n            $fields['user_id'] = gt('Posted by');\n            if (in_array('user_id', $cols)) $column_names['user_id'] = gt('Posted by');\n            $fields['timestamp'] = gt('Timestamp');\n            if (in_array('timestamp', $cols)) $column_names['timestamp'] = gt('Timestamp');\n//            if (in_array('location_data', $cols)) $column_names['location_data'] = gt('Entry Point');\n        }\n        $fieldlist .= ']';\n\n        assign_to_template(array(\n            'column_names' => $column_names,\n            'fields'       => $fields,\n            'form'         => $f,\n            'fieldlist'    => $fieldlist,\n        ));\n    }\n\n    /**\n     * Updates the form\n     */\n    public function update_form() {\n        $this->forms->update($this->params);\n        if (!empty($this->params['old_id'])) {\n            // copy all the controls to the new form\n            $fc = new forms_control();\n            $controls = $fc->find('all','forms_id='.$this->params['old_id'],'rank');\n            foreach ($controls as $control) {\n                $control->id = null;\n                $control->forms_id = $this->forms->id;\n                $control->update();\n            }\n        }\n//        if (!empty($this->params['is_saved']) && empty($this->params['table_name'])) {\n        if (!empty($this->params['is_saved'])) {\n            // we are now saving data to the database and need to create it first\n//            $form = new forms($this->params['id']);\n            $this->params['table_name'] = $this->forms->updateTable();\n//            $this->params['_validate'] = false;  // we don't want a check for unique sef_name\n//            parent::update();  // now with a form tablename\n        }\n        expHistory::back();\n    }\n\n    public function delete_form() {\n        expHistory::set('editable', $this->params);\n        $modelname = $this->basemodel_name;\n        if (empty($this->params['id'])) {\n            flash('error', gt('Missing id for the') . ' ' . $modelname . ' ' . gt('you would like to delete'));\n            expHistory::back();\n        }\n        $form = new $modelname($this->params['id']);\n\n        $form->delete();\n        expHistory::returnTo('manageable');\n    }\n\n    public function design_form() {\n        if (!empty($this->params['id'])) {\n            expHistory::set('editable', $this->params);\n            $f = new forms($this->params['id']);\n            $controls = $f->forms_control;\n\n            $form = new fakeform();\n            $form->horizontal = !empty($this->config['style']) ? $this->config['style'] : false;\n            if (isset($this->params['style']))\n                $form->horizontal = $this->params['style'];\n            foreach ($controls as $c) {\n                $ctl = expUnserialize($c->data);\n                $ctl->_id = $c->id;\n                $ctl->_readonly = $c->is_readonly;\n                $ctl->_controltype = get_class($ctl);\n                $form->register($c->name, $c->caption, $ctl);\n            }\n\n            $types = expTemplate::listControlTypes();\n            $types[\".break\"] = gt('Static - Spacer');\n            $types[\".line\"] = gt('Static - Horizontal Line');\n            uasort($types, \"strnatcmp\");\n            if (!bs3())\n                array_unshift($types, '[' . gt('Please Select' . ']'));\n\n            $forms_list = array();\n            $forms = $f->find('all', 1);\n            if (!empty($forms)) foreach ($forms as $frm) {\n                if ($frm->id != $f->id)\n                    $forms_list[$frm->id] = $frm->title;\n            }\n\n            assign_to_template(array(\n                'form'       => $f,\n                'forms_list' => $forms_list,\n                'form_html'  => $form->toHTML($f->id),\n                'backlink'   => expHistory::getLastNotEditable(),\n                'types'      => $types,\n                'style'      => $form->horizontal\n            ));\n        }\n    }\n\n    public function edit_control() {\n        $f = new forms($this->params['forms_id']);\n        if ($f) {\n            if (bs2()) {\n                expCSS::pushToHead(array(\n                    \"corecss\"=>\"forms-bootstrap\"\n                ));\n            } elseif (bs3()) {\n                expCSS::pushToHead(array(\n                    \"corecss\"=>\"forms-bootstrap3\"\n                ));\n            } else {\n                expCSS::pushToHead(array(\n                    \"corecss\" => \"forms\",\n                ));\n            }\n\n            if (isset($this->params['control_type']) && $this->params['control_type']{0} == \".\") {\n                // there is nothing to edit for these type controls, so add it then return\n                $htmlctl = new htmlcontrol();\n                $htmlctl->identifier = uniqid(\"\");\n                $htmlctl->caption = \"\";\n                if (!empty($this->params['rank']))\n                    $htmlctl->rank = $this->params['rank'];\n                switch ($this->params['control_type']) {\n                    case \".break\":\n                        $htmlctl->html = \"<br />\";\n                        break;\n                    case \".line\":\n                        $htmlctl->html = \"<hr size='1' />\";\n                        break;\n                }\n                $ctl = new forms_control();\n                $ctl->name = uniqid(\"\");\n                $ctl->caption = \"\";\n                $ctl->data = serialize($htmlctl);\n                $ctl->forms_id = $f->id;\n                $ctl->is_readonly = 1;\n                if (!empty($this->params['rank']))\n                    $ctl->rank = $this->params['rank'];\n                $ctl->update();\n                if (!expJavascript::inAjaxAction())\n                    expHistory::returnTo('editable');\n                else { // we need a graceful exit for inAjaxAction\n                    assign_to_template(array(\n                        'form_html' => ucfirst(substr($this->params['control_type'],1)) . ' ' . gt('control was added to form') . '<input type=\"hidden\" name=\"staticcontrol\" id=\"'.$ctl->id.'\" />',\n                        'type'      => 'static',\n                    ));\n                }\n            } else {\n                $control_type = \"\";\n                $ctl = null;\n                if (isset($this->params['id'])) {\n                    $control = new forms_control($this->params['id']);\n                    if ($control) {\n                        $ctl = expUnserialize($control->data);\n                        $ctl->identifier = $control->name;\n                        $ctl->caption = $control->caption;\n                        $ctl->id = $control->id;\n                        $control_type = get_class($ctl);\n                        $f->id = $control->forms_id;\n                    }\n                }\n                if ($control_type == \"\") $control_type = $this->params['control_type'];\n                $form = call_user_func(array($control_type, \"form\"), $ctl);\n                $form->location($this->loc);\n                if ($ctl) {\n                    if (isset($form->controls['identifier']->disabled)) $form->controls['identifier']->disabled = true;\n                    $form->meta(\"id\", $ctl->id);\n                    $form->meta(\"identifier\", $ctl->identifier);\n                }\n                $form->meta(\"action\", \"save_control\");\n//                $form->meta('control_type', $control_type);\n                $form->meta('forms_id', $f->id);\n                $types = expTemplate::listControlTypes();\n                $othertypes = expTemplate::listSimilarControlTypes($control_type);\n                if (count($othertypes) > 1) {\n                    $otherlist = new dropdowncontrol($control_type,$othertypes);\n                    $form->registerBefore('identifier','control_type',gt('Control Type'),$otherlist);\n                } else {\n                    $form->registerBefore('identifier','control_type',gt('Control Type'),new genericcontrol('hidden',$control_type));\n                }\n                assign_to_template(array(\n                    'form_html' => $form->toHTML(),\n                    'type'      => $types[$control_type],\n                    'is_edit'   => ($ctl == null ? 0 : 1),\n                ));\n            }\n        }\n    }\n\n    public function save_control() {\n        $f = new forms($this->params['forms_id']);\n        if ($f) {\n            $ctl = null;\n            $control = null;\n            // get previous data from existing control\n            if (isset($this->params['id'])) {\n                $control = new forms_control($this->params['id']);\n                if ($control) {\n                    $ctl = expUnserialize($control->data);\n                    $ctl->identifier = $control->name;\n                    $ctl->caption = $control->caption;\n                }\n            } else {\n                $control = new forms_control();\n            }\n\n            // update control with data from form\n//            $ctl1 = new $this->params['control_type']();\n//            $ctl1 = expCore::cast($ctl1,$ctl);\n            if (!empty($ctl)) {\n                $ctl1 = expCore::cast($ctl,$this->params['control_type']);\n            } else {\n                $ctl1 = $ctl;\n            }\n            if (call_user_func(array($this->params['control_type'], 'useGeneric')) == true) {\n                $ctl1 = call_user_func(array('genericcontrol', 'update'), $this->params, $ctl1);\n            } else {\n                $ctl1 = call_user_func(array($this->params['control_type'], 'update'), $this->params, $ctl1);\n            }\n            if (!empty($this->params['rank']))\n                $ctl1->rank = $this->params['rank'];\n\n            //lets make sure the name submitted by the user is not a duplicate. if so we will fail back to the form\n            if (!empty($control->id)) {\n                //FIXME change this to an expValidator call\n                $check = $control->getControl('name=\"' . $ctl1->identifier . '\" AND forms_id=' . $f->id . ' AND id != ' . $control->id);\n                if (!empty($check) && empty($this->params['id'])) {\n                    //expValidator::failAndReturnToForm(gt('A field with the same name already exists for this form'), $_$this->params\n                    flash('error', gt('A field by the name\").\" \"' . $ctl1->identifier . '\" \".gt(\"already exists on this form'));\n                    expHistory::returnTo('editable');\n                }\n            }\n\n            if ($ctl1 != null) {\n                $name = substr(preg_replace('/[^A-Za-z0-9]/', '_', $ctl1->identifier), 0, 20);\n                if (!isset($this->params['id']) && $control->countControls(\"name='\" . $name . \"' AND forms_id=\" . $this->params['forms_id']) > 0) {\n                    $this->params['_formError'] = gt('Identifier must be unique.');\n                    expSession::set('last_POST', $this->params);\n                } elseif ($name == 'id' || $name == 'ip' || $name == 'user_id' || $name == 'timestamp' || $name == 'location_data') {\n                    $this->params['_formError'] = sprintf(gt('Identifier cannot be \"%s\".'), $name);\n                    expSession::set('last_POST', $this->params);\n                } else {\n                    if (!isset($this->params['id'])) {\n                        $control->name = $name;\n                    }\n                    $control->caption = $ctl1->caption;\n                    $control->forms_id = $this->params['forms_id'];\n                    $control->is_static = (!empty($ctl1->is_static) ? $ctl1->is_static : 0);\n                    if (!empty($ctl1->pattern)) $ctl1->pattern = addslashes($ctl1->pattern);\n                    $control->data = serialize($ctl1);\n\n                    if (!empty($this->params['rank']))\n                        $control->rank = $this->params['rank'];\n                    if (!empty($control->id)) {\n                        $control->update();\n                    } else {\n                        $control->update();\n                        // reset summary report to all columns\n                        if (!$control->is_static) {\n                            $f->column_names_list = null;\n                            $f->update();\n                            //FIXME we also need to update any config column_names_list settings?\n                        }\n                    }\n                    $f->updateTable();\n                }\n            }\n        }\n        if (!expJavascript::inAjaxAction())\n            expHistory::returnTo('editable');\n        else {\n            echo $control->id;\n        }\n    }\n\n    public function delete_control() {\n        $ctl = null;\n        if (isset($this->params['id'])) {\n            $ctl = new forms_control($this->params['id']);\n        }\n\n        if ($ctl) {\n            $f = new forms($ctl->forms_id);\n            $ctl->delete();\n            $f->updateTable();\n            if (!expJavascript::inAjaxAction())\n                expHistory::returnTo('editable');\n        }\n    }\n\n    public function rerank_control() {\n        if (!empty($this->params['id'])) {\n            $fc = new forms_control($this->params['id']);\n            $fc->rerank_control($this->params['rank']);\n            // if we reranked a pagecontrol, we need to check/auto-correct the rank if needed\n            $fc->update(array('rank'=>$this->params['rank']));  // force auto-validation of ranks\n        }\n    }\n\n    /**\n     * Output a single control to an ajax request\n     */\n    public function build_control() {\n        if (!empty($this->params['id'])) {\n            $control = new forms_control($this->params['id']);\n            $form = new fakeform();\n            $form->horizontal = !empty($this->config['style']) ? $this->config['style'] : false;\n            $ctl = expUnserialize($control->data);\n            $ctl->_id = $control->id;\n            $ctl->_readonly = $control->is_readonly;\n            $ctl->_controltype = get_class($ctl);\n            if (isset($this->params['style']))\n                $form->horizontal = $this->params['style'];\n            $form->register($control->name, $control->caption, $ctl);\n            $form->style_form();\n            echo $form->controlToHTML($control->name);\n        }\n    }\n\n    function configure() {\n        $fields = array();\n        $column_names = array();\n        $cols = array();\n//        $forms_list = array();\n//        $forms = $this->forms->find('all', 1);\n//        if (!empty($forms)) foreach ($forms as $form) {\n//            $forms_list[$form->id] = $form->title;\n//        } else {\n//            $forms_list[0] = gt('You must select a form1');\n//        }\n        if (!empty($this->config['column_names_list'])) {\n            $cols = $this->config['column_names_list'];\n        }\n        $fieldlist = '[';\n        if (isset($this->config['forms_id'])) {\n            $fc = new forms_control();\n            foreach ($fc->find('all', 'forms_id=' . $this->config['forms_id'] . ' AND is_readonly=0','rank') as $control) {\n                $ctl = expUnserialize($control->data);\n                $control_type = get_class($ctl);\n                $def = call_user_func(array($control_type, 'getFieldDefinition'));\n                if ($def != null) {\n                    $fields[$control->name] = $control->caption;\n                    if (in_array($control->name, $cols)) {\n                        $column_names[$control->name] = $control->caption;\n                    }\n                }\n                if ($control_type != 'pagecontrol' && $control_type != 'htmlcontrol') {\n                    $fieldlist .= '[\"{\\$fields[\\'' . $control->name . '\\']}\",\"' . $control->caption . '\",\"' . gt('Insert') . ' ' . $control->caption . ' ' . gt('Field') . '\"],';\n                }\n            }\n            $fields['ip'] = gt('IP Address');\n            if (in_array('ip', $cols)) $column_names['ip'] = gt('IP Address');\n            $fields['user_id'] = gt('Posted by');\n            if (in_array('user_id', $cols)) $column_names['user_id'] = gt('Posted by');\n            $fields['timestamp'] = gt('Timestamp');\n            if (in_array('timestamp', $cols)) $column_names['timestamp'] = gt('Timestamp');\n//            if (in_array('location_data', $cols)) $column_names['location_data'] = gt('Entry Point');\n        }\n        $fieldlist .= ']';\n        $title = gt('No Form Assigned Yet!');\n        if (!empty($this->config['forms_id'])) {\n            $form = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n            $this->config['is_saved'] = $form->is_saved;\n            $this->config['table_name'] = $form->table_name;\n            $title = $form->title;\n        }\n        assign_to_template(array(\n//            'forms_list'   => $forms_list,\n            'form_title'   => $title,\n            'column_names' => $column_names,\n            'fields'       => $fields,\n            'fieldlist'    => $fieldlist,\n        ));\n\n        parent::configure();\n    }\n\n    /**\n     * create a new default config array using the form defaults\n     */\n    private function get_defaults($form) {\n        if (empty($this->config)) { // NEVER overwrite an existing config\n            $this->config = array();\n            $config = get_object_vars($form);\n            if (!empty($config['column_names_list'])) {\n                $config['column_names_list'] = explode('|!|', $config['column_names_list']);  //fixme $form->column_names_list is a serialized array?\n            }\n            unset ($config['forms_control']);\n            $this->config = $config;\n        }\n    }\n\n    /**\n     * get the metainfo for this module\n     *\n     * @return array\n     */\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n        $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => false, 'nofollow' => false);\n\n        // figure out what metadata to pass back based on the action we are in.\n        switch ($router->params['action']) {\n            case 'showall':\n                $metainfo['title'] = gt(\"Showing Form Records\") . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            case 'show':\n                $metainfo['title'] = gt(\"Showing Form Record\") . ' - ' . SITE_TITLE;\n                $metainfo['keywords'] = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n                break;\n            default:\n                $metainfo = parent::metainfo();\n        }\n        return $metainfo;\n    }\n\n    public function export_csv() {\n        if (!empty($this->params['id'])) {\n            $f = new forms($this->params['id']);\n            $this->get_defaults($f);  // fills $this->config with form defaults if needed\n            $items = $f->getRecords();\n\n            $fc = new forms_control();\n            //FIXME should we default to only 5 columns or all columns? and should we pick up modules columns ($this->config) or just form defaults ($f->)\n            //$f->column_names_list is a serialized array\n            //$this->config['column_names_list'] is an array\n            if ($this->config['column_names_list'] == '') {\n                //define some default columns...\n                $controls = $fc->find('all', \"forms_id=\" . $f->id . \" AND is_readonly = 0 AND is_static = 0\", \"rank\");\n//                foreach (array_slice($controls, 0, 5) as $control) {\n                foreach ($controls as $control) {\n//                    if ($this->config['column_names_list'] != '')\n//                        $this->config['column_names_list'] .= '|!|';\n//                    $this->config['column_names_list'] .= $control->name;\n                    $this->config['column_names_list'][$control->name] = $control->name;\n                }\n            }\n\n//            $rpt_columns2 = explode(\"|!|\", $this->config['column_names_list']);\n\n            $rpt_columns = array();\n            // popuplate field captions/labels\n            foreach ($this->config['column_names_list'] as $column) {\n                $control = $fc->find('first', \"forms_id=\" . $f->id . \" AND name = '\" . $column . \"' AND is_readonly = 0 AND is_static = 0\", \"rank\");\n                if (!empty($control)) {\n                    $rpt_columns[$control->name] = $control->caption;\n                } else {\n                    switch ($column) {\n                        case 'ip':\n                            $rpt_columns[$column] = gt('IP Address');\n                            break;\n                        case 'referrer':\n                            $rpt_columns[$column] = gt('Event ID');\n                            break;\n                        case 'user_id':\n                            $rpt_columns[$column] = gt('Posted by');\n                            break;\n                        case 'timestamp':\n                            $rpt_columns[$column] = gt('Timestamp');\n                            break;\n                    }\n                }\n            }\n\n            // populate field data\n            foreach ($rpt_columns as $column_name=>$column_caption) {\n                if ($column_name == \"ip\" || $column_name == \"referrer\" || $column_name == \"location_data\") {\n                } elseif ($column_name == \"user_id\") {\n                    foreach ($items as $key => $item) {\n                        if ($item->$column_name != 0) {\n                            $locUser = user::getUserById($item->$column_name);\n                            $item->$column_name = $locUser->username;\n                        } else {\n                            $item->$column_name = '';\n                        }\n                        $items[$key] = $item;\n                    }\n                } elseif ($column_name == \"timestamp\") {\n//                    $srt = $column_name . \"_srt\";\n                    foreach ($items as $key => $item) {\n//                        $item->$srt = $item->$column_name;\n                        $item->$column_name = strftime(\"%m/%d/%y %T\", $item->$column_name);  // needs to be in a machine readable format\n                        $items[$key] = $item;\n                    }\n                } else {\n                    $control = $fc->find('first', \"name='\" . $column_name . \"' AND forms_id=\" . $this->params['id'],'rank');\n                    if ($control) {\n//                        $ctl = unserialize($control->data);\n                        $ctl = expUnserialize($control->data);\n                        $control_type = get_class($ctl);\n//                        $srt = $column_name . \"_srt\";\n//                        $datadef = call_user_func(array($control_type, 'getFieldDefinition'));\n                        foreach ($items as $key => $item) {\n                            //We have to add special sorting for date time columns!!!\n//                            if (isset($datadef[DB_FIELD_TYPE]) && $datadef[DB_FIELD_TYPE] == DB_DEF_TIMESTAMP) {\n//                                $item->$srt = $item->$column_name;\n//                            }\n                            $item->$column_name = call_user_func(array($control_type, 'templateFormat'), $item->$column_name, $ctl);\n                            $items[$key] = $item;\n                        }\n                    }\n                }\n            }\n\n            if (LANG_CHARSET == 'UTF-8') {\n                $file = chr(0xEF) . chr(0xBB) . chr(0xBF); // add utf-8 signature to file to open appropriately in Excel, etc...\n            } else {\n                $file = \"\";\n            }\n\n            $file .= self::sql2csv($items, $rpt_columns);\n\n            // CREATE A TEMP FILE\n            $tmpfname = tempnam(getcwd(), \"rep\"); // Rig\n\n            $handle = fopen($tmpfname, \"w\");\n            fwrite($handle, $file);\n            fclose($handle);\n\n            if (file_exists($tmpfname)) {\n\n                ob_end_clean();\n\n                // This code was lifted from phpMyAdmin, but this is Open Source, right?\n                // 'application/octet-stream' is the registered IANA type but\n                //        MSIE and Opera seems to prefer 'application/octetstream'\n                // It seems that other headers I've added make IE prefer octet-stream again. - RAM\n\n                $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octet-stream;' : 'text/comma-separated-values;';\n                header('Content-Type: ' . $mime_type . ' charset=' . LANG_CHARSET . \"'\");\n                header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n                $filesize = filesize($tmpfname);\n                header('Content-length: ' . $filesize);\n                header('Content-Transfer-Encoding: binary');\n//                header('Content-Encoding:');\n                header('Content-Disposition: attachment; filename=\"report.csv\"');\n                if ($filesize) header('Content-length: ' . $filesize); // for some reason the webserver cant run stat on the files and this breaks.\n                // IE need specific headers\n                if (EXPONENT_USER_BROWSER == 'IE') {\n                    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                    header('Pragma: public');\n                    header('Vary: User-Agent');\n                } else {\n                    header('Pragma: no-cache');\n                }\n                //Read the file out directly\n                readfile($tmpfname);\n\n//                if (DEVELOPMENT == 0) exit();\n                unlink($tmpfname);\n                exit();\n            } else {\n                error_log(\"error file doesn't exist\", 0);\n            }\n        }\n//        expHistory::back();\n    }\n\n    /**\n     * This converts the sql statement into a nice CSV.\n     * We grab the items array which is stored funkily in the DB in an associative array when we pull it.\n     * So basically our aray looks like this:\n     *\n     * ITEMS\n     * {[id]=>myID, [Name]=>name, [Address]=>myaddr}\n     * {[id]=>myID1, [Name]=>name1, [Address]=>myaddr1}\n     * {[id]=>myID2, [Name]=>name2, [Address]=>myaddr2}\n     * {[id]=>myID3, [Name]=>name3, [Address]=>myaddr3}\n     * {[id]=>myID4, [Name]=>name4, [Address]=>myaddr4}\n     * {[id]=>myID5, [Name]=>name5, [Address]=>myaddr5}\n     *\n     * So by nature of the array, the keys are repetated in each line (id, name, etc)\n     * So if we want to make a header row, we just run through once at the beginning and\n     * use the array_keys function to strip out a functional header\n     *\n     * @param      $items\n     *\n     * @param array|null $rptcols\n     *\n     * @return string\n     */\n    public static function sql2csv($items, $rptcols = null) {\n        $str = \"\";\n        foreach ($rptcols as $individual_Header) {\n            if (!is_array($rptcols) || in_array($individual_Header, $rptcols)) $str .= $individual_Header . \",\";  //FIXME $individual_Header is ALWAYS in $rptcols?\n        }\n        $str .= \"\\r\\n\";\n        foreach ($items as $item) {\n            foreach ($rptcols as $key => $rowitem) {\n                if (!is_array($rptcols) || property_exists($item, $key)) {\n                    $rowitem = str_replace(\",\", \" \", $item->$key);\n                    $str .= $rowitem . \",\";\n                }\n            } //foreach rowitem\n            $str = substr($str, 0, strlen($str) - 1);\n            $str .= \"\\r\\n\";\n        } //end of foreach loop\n        return $str;\n    }\n\n    /**\n     * Export form, controls and optionally the data table\n     *\n     */\n    public function export_eql() {\n        assign_to_template(array(\n            \"id\" => $this->params['id'],\n        ));\n    }\n\n    /**\n     * Export form, controls and optionally the data table\n     *\n     */\n    public function export_eql_process() {\n        if (!empty($this->params['id'])) {\n            $f = new forms($this->params['id']);\n\n            $filename = preg_replace('/[^A-Za-z0-9_.-]/','-',$f->sef_url.'.eql');\n\n            ob_end_clean();\n            ob_start(\"ob_gzhandler\");\n\n            // This code was lifted from phpMyAdmin, but this is Open Source, right?\n\n            // 'application/octet-stream' is the registered IANA type but\n            //        MSIE and Opera seems to prefer 'application/octetstream'\n            $mime_type = (EXPONENT_USER_BROWSER == 'IE' || EXPONENT_USER_BROWSER == 'OPERA') ? 'application/octetstream' : 'application/octet-stream';\n\n            header('Content-Type: ' . $mime_type);\n            header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n            // IE need specific headers\n            if (EXPONENT_USER_BROWSER == 'IE') {\n                header('Content-Disposition: inline; filename=\"' . $filename . '\"');\n                header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n                header('Pragma: public');\n            } else {\n                header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n                header('Pragma: no-cache');\n            }\n            $tables = array(\n                'forms',\n                'forms_control'\n            );\n            if (!empty($this->params['include_data'])) {\n                $tables[] = 'forms_'.$f->table_name;\n            }\n            echo expFile::dumpDatabase($tables, 'Form', $this->params['id']);  //FIXME we need to echo inside call\n            exit; // Exit, since we are exporting\n        }\n//        expHistory::back();\n    }\n\n    /**\n     * Import form, controls and optionally the data table\n     *\n     */\n    public function import_eql() {\n    }\n\n    /**\n     * Import form, controls and optionally the data table\n     *\n     */\n    public function import_eql_process() {\n        $errors = array();\n\n        //FIXME check for duplicate form data table name before import?\n        expFile::restoreDatabase($_FILES['file']['tmp_name'], $errors, 'Form');\n\n        if (empty($errors)) {\n            flash('message',gt('Form was successfully imported'));\n        } else {\n            $message = gt('Form import encountered the following errors') . ':<br>';\n            foreach ($errors as $error) {\n                $message .= '* ' . $error . '<br>';\n            }\n            flash('error', $message);\n        }\n        expHistory::back();\n    }\n\n    public function import_csv() {\n        if (expFile::canCreate(BASE . \"tmp/test\") != SYS_FILES_SUCCESS) {\n            assign_to_template(array(\n                \"error\" => \"The /tmp directory is not writable.  Please contact your administrator.\",\n            ));\n        } else {\n            //Setup the arrays with the name/value pairs for the dropdown menus\n            $delimiterArray = Array(\n                ',' => gt('Comma'),\n                ';' => gt('Semicolon'),\n                ':' => gt('Colon'),\n                ' ' => gt('Space'));\n\n            $forms = $this->forms->find('all', 1);\n            $formslist = array();\n            $formslist[0] = gt('--Create a New Form--');\n            foreach ($forms as $aform) {\n                if (!empty($aform->is_saved)) {\n                    $formslist[$aform->id] = $aform->title;\n                    if (empty($formslist[$aform->id])) $formslist[$aform->id] = gt('Untitled');\n                }\n            }\n\n//            //Setup the meta data (hidden values)\n//            $form = new form();\n//            $form->meta(\"controller\", \"forms\");\n//            $form->meta(\"action\", \"import_csv_mapper\");\n//\n//            //Register the dropdown menus\n//            $form->register(\"delimiter\", gt('Delimiter Character'), new dropdowncontrol(\",\", $delimiterArray));\n//            $form->register(\"upload\", gt('CSV File to Upload'), new uploadcontrol());\n//            $form->register(\"use_header\", gt('First Row is a Header'), new checkboxcontrol(0, 0));\n//            $form->register(\"rowstart\", gt('Forms Data begins in Row'), new textcontrol(\"1\", 1, 0, 6));\n//            $form->register(\"forms_id\", gt('Target Form'), new dropdowncontrol(\"0\", $formslist));\n//            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n//                \"form_html\" => $form->tohtml(),\n                'delimiters' => $delimiterArray,\n                'forms_list' => $formslist,\n            ));\n        }\n    }\n\n    public function import_csv_mapper() {\n        //Check to make sure the user filled out the required input.\n        if (!is_numeric($this->params[\"rowstart\"])) {\n            unset($this->params[\"rowstart\"]);\n            $this->params['_formError'] = gt('The starting row must be a number.');\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit('Redirecting...');\n        }\n\n        if (!empty($this->params['forms_id'])) {\n            // if we are importing to an existing form, jump to that step\n            $this->import_csv_data_mapper();\n        } else {\n            //Get the temp directory to put the uploaded file\n            $directory = \"tmp\";\n\n            //Get the file save it to the temp directory\n            if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n                //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n                $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/'); //FIXME quick hack to remove file model\n                if ($file == null) {\n                    switch ($_FILES[\"upload\"][\"error\"]) {\n                        case UPLOAD_ERR_INI_SIZE:\n                        case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                            break;\n                        case UPLOAD_ERR_PARTIAL:\n                            $this->params['_formError'] = gt('The file was only partially uploaded.');\n                            break;\n                        case UPLOAD_ERR_NO_FILE:\n                            $this->params['_formError'] = gt('No file was uploaded.');\n                            break;\n                        default:\n                            $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                            break;\n                    }\n                    expSession::set(\"last_POST\", $this->params);\n                    header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                    exit(\"\");\n                }\n            }\n            /*\n            if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n                $this->params['_formError'] = \"File is not a delimited text file.\";\n                expSession::set(\"last_POST\",$this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n            */\n\n            //split the line into its columns\n            $headerinfo = null;\n            $line_end = ini_get('auto_detect_line_endings');\n            ini_set('auto_detect_line_endings',TRUE);\n            $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n            if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n            for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n                $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n                if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n            }\n            fclose($fh);\n            ini_set('auto_detect_line_endings',$line_end);\n\n            // get list of simple non-static controls if we are also creating a new form\n            $types = expTemplate::listControlTypes(false);\n            uasort($types, \"strnatcmp\");\n            $types = array_merge(array('none'=>gt('--Disregard this column--')),$types);\n\n            //Check to see if the line got split, otherwise throw an error\n            if ($lineInfo == null) {\n                $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            } else {\n                //Setup the meta data (hidden values)\n                $form = new form();\n                $form->meta(\"controller\", \"forms\");\n                $form->meta(\"action\", \"import_csv_form_prep\");  // we are creating a new form first\n    //            $form->meta(\"action\", \"import_csv_data\");  // we are importing into an existing form  //FIXME\n                $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n                $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n                $form->meta(\"use_header\", $this->params[\"use_header\"]);\n                $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n                for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                    if ($headerinfo != null) {\n                        $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n    //                    $label = str_replace('&', 'and', $headerinfo[$i]);\n    //                    $label = preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $label))));\n    //                    $form->register(\"name[$i]\", null, new genericcontrol('hidden',$label));\n                        $form->register(\"name[$i]\", null, new genericcontrol('hidden',$headerinfo[$i]));\n                    } else {\n                        $form->register(\"name[$i]\", null, new genericcontrol('hidden','Field'.$i));\n                        $title = $lineInfo[$i];\n                    }\n                    $form->register(\"data[$i]\", null, new genericcontrol('hidden',$lineInfo[$i]));\n                    $form->register(\"control[$i]\", $title, new dropdowncontrol(\"none\", $types));\n                }\n                $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n                assign_to_template(array(\n                    \"form_html\" => $form->tohtml(),\n                ));\n            }\n        }\n    }\n\n    public function import_csv_form_prep() {\n        $form = new form();\n        $form->meta(\"controller\", \"forms\");\n        $form->meta(\"action\", \"import_csv_form_add\");\n        $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n        $form->meta(\"filename\", $this->params[\"filename\"]);\n        $form->meta(\"use_header\", $this->params[\"use_header\"]);\n        $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n\n         // condense our responses to present form shell for confirmation\n        $form->register(\"title\", gt('Form Title'), new textcontrol(''));\n        $formcontrols = array();\n        foreach ($this->params['control'] as $key=>$control) {\n            if ($control != \"none\") {\n                $formcontrols[$key] = new stdClass();\n                $formcontrols[$key]->control = $control;\n                $label = str_replace('&', 'and', $this->params['name'][$key]);\n                $label = preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '_', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '_', $label))));\n                $formcontrols[$key]->name = $label;\n                $formcontrols[$key]->caption = $this->params['name'][$key];\n                $formcontrols[$key]->data = $this->params['data'][$key];\n            }\n        }\n\n        foreach ($formcontrols as $i=>$control) {\n            $form->register(\"column[$i]\", ucfirst($control->control) . ' ' . gt('Field Identifier') . ' (' . $control->caption . ' - ' . $control->data . ')', new textcontrol($control->name));\n            $form->register(\"control[$i]\", null, new genericcontrol('hidden',$control->control));\n            $form->register(\"caption[$i]\", null, new genericcontrol('hidden',$control->caption));\n            $form->register(\"data[$i]\", null, new genericcontrol('hidden',$control->data));\n        }\n\n        $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n        assign_to_template(array(\n            \"form_html\" => $form->tohtml(),\n        ));\n    }\n\n    public function import_csv_form_add() {\n\n        // create the form\n        $f = new forms();\n        $f->title = $this->params['title'];\n        $f->is_saved = true;\n        $f->update();\n\n        // create the form controls\n        foreach ($this->params['control'] as $key=>$control) {\n            $params = array();\n            $fc = new forms_control();\n            $this->params['column'][$key] = str_replace('&', 'and', $this->params['column'][$key]);\n            $this->params['column'][$key] = preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $this->params['column'][$key]))));\n            $fc->name = $params['identifier'] = $this->params['column'][$key];\n            $fc->caption = $params['caption'] = $this->params['caption'][$key];\n            $params['description'] = '';\n            if ($control == 'datetimecontrol') {\n                $params['showdate'] = $params['showtime'] = true;\n            }\n//            if ($control == 'htmlcontrol') {\n//                $params['html'] = $this->params['data'][$key];\n//            }\n            if ($control == 'radiogroupcontrol' || $control == 'dropdowncontrol') {\n                $params['default'] = $params['items'] = $this->params['data'][$key];\n            }\n            $fc->forms_id = $f->id;\n            $ctl = null;\n            $ctl = call_user_func(array($control, 'update'), $params, $ctl);\n            $fc->data = serialize($ctl);\n            $fc->update();\n        }\n\n        flash('notice', gt('New Form Created'));\n        $this->params['forms_id'] = $f->id;\n//        unset($this->params['caption']);\n        unset($this->params['control']);\n        $this->import_csv_data_display();\n    }\n\n    public function import_csv_data_mapper() {\n//        global $template;\n        //Get the temp directory to put the uploaded file\n        $directory = \"tmp\";\n\n        //Get the file save it to the temp directory\n        if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n            //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n            $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/'); //FIXME quick hack to remove file model\n            if ($file == null) {\n                switch ($_FILES[\"upload\"][\"error\"]) {\n                    case UPLOAD_ERR_INI_SIZE:\n                    case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                        break;\n                    case UPLOAD_ERR_PARTIAL:\n                        $this->params['_formError'] = gt('The file was only partially uploaded.');\n                        break;\n                    case UPLOAD_ERR_NO_FILE:\n                        $this->params['_formError'] = gt('No file was uploaded.');\n                        break;\n                    default:\n                        $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                        break;\n                }\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n        }\n        /*\n        if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n            $this->params['_formError'] = \"File is not a delimited text file.\";\n            expSession::set(\"last_POST\",$this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        }\n        */\n\n        //split the line into its columns\n        $headerinfo = null;\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n        if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n        for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n            $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n            if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n        }\n        fclose($fh);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        // pull in the form control definitions here\n        $f = new forms($this->params['forms_id']);\n        $fields = array(\n            \"none\"      => gt('--Disregard this column--'),\n        );\n        foreach ($f->forms_control as $control) {\n            $fields[$control->name] = $control->caption;\n        }\n\n        //Check to see if the line got split, otherwise throw an error\n        if ($lineInfo == null) {\n            $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        } else {\n            //Setup the meta data (hidden values)\n            $form = new form();\n            $form->meta(\"controller\", \"forms\");\n            $form->meta(\"action\", \"import_csv_data_display\");\n            $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n            $form->meta(\"use_header\", $this->params[\"use_header\"]);\n            $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n            $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n            $form->meta(\"forms_id\", $this->params[\"forms_id\"]);\n\n            for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                if ($headerinfo != null) {\n                    $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n                } else {\n                    $title = $lineInfo[$i];\n                }\n                $form->register(\"column[$i]\", $title, new dropdowncontrol(\"none\", $fields));\n            }\n            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n                \"form_html\" => $form->tohtml(),\n            ));\n        }\n    }\n\n    public function import_csv_data_display() {\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $record = array();\n        $records = array();\n        $linenum = 1;\n\n        // pull in the form control definitions here\n        $f = new forms($this->params['forms_id']);\n        $fields = array();\n        foreach ($f->forms_control as $control) {\n            $fields[$control->name] = $control->caption;\n        }\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n            if ($linenum >= $this->params[\"rowstart\"]) {\n                $i = 0;\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $record[$colname] = trim($field);\n                        $this->params['caption'][$i] = $fields[$colname];\n                    } else {\n                        unset($this->params['column'][$i]);\n                    }\n                    $i++;\n                }\n                $record['linenum'] = $linenum;\n                $records[] = $record;\n            }\n            $linenum++;\n        }\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        assign_to_template(array(\n            \"records\" => $records,\n            \"params\" => $this->params,\n        ));\n    }\n\n    public function import_csv_data_add() {\n        global $user;\n\n        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $recordsdone = 0;\n        $linenum = 1;\n        $f = new forms($this->params['forms_id']);\n        $f->updateTable();\n\n        $fields = array();\n        $multi_item_control_items = array();\n        $multi_item_control_ids = array();\n        foreach ($f->forms_control as $control) {\n            $fields[$control->name] = expUnserialize($control->data);\n            $ctltype = get_class($fields[$control->name]);\n            if (in_array($ctltype,array('radiogroupcontrol','dropdowncontrol'))) {\n                if (!array_key_exists($control->id,$multi_item_control_items)) {\n                    $multi_item_control_items[$control->name] = null;\n                    $multi_item_control_ids[$control->name] = $control->id;\n                }\n            }\n        }\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n            if ($linenum >= $this->params[\"rowstart\"] && in_array($linenum,$this->params['importrecord'])) {\n                $i = 0;\n                $db_data = new stdClass();\n                $db_data->ip = '';\n                $db_data->user_id = $user->id;\n                $db_data->timestamp = time();\n                $db_data->referrer = '';\n                $db_data->location_data = '';\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $control_type = get_class($fields[$colname]);\n                        $params[$colname] = $field;\n                        $def = call_user_func(array($control_type, \"getFieldDefinition\"));\n                        if (!empty($def)) {\n                            $db_data->$colname = call_user_func(array($control_type, 'convertData'), $colname, $params);\n                        }\n                        if (!empty($db_data->$colname) && array_key_exists($colname,$multi_item_control_items) && !in_array($db_data->$colname,$multi_item_control_items[$colname])) {\n                            $multi_item_control_items[$colname][] = $db_data->$colname;\n                        }\n                    }\n                    $i++;\n                }\n                $f->insertRecord($db_data);\n                $recordsdone++;\n            }\n            $linenum++;\n        }\n\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n\n        // update multi-item forms controls\n        if (!empty($multi_item_control_ids)) {\n            foreach ($multi_item_control_ids as $key=>$control_id) {\n                $fc = new forms_control($control_id);\n                $ctl = expUnserialize($fc->data);\n                $ctl->items = $multi_item_control_items[$key];\n                $fc->data = serialize($ctl);\n                $fc->update();\n            }\n        }\n        unlink(BASE . $this->params[\"filename\"]);\n        flash('notice', $recordsdone.' '.gt('Records Imported'));\n        expHistory::back();\n    }\n\n}\n\n?>", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n/**\n * @subpackage Controllers\n * @package    Modules\n */\nclass navigationController extends expController {\n    public $basemodel_name = 'section';\n    public $useractions = array(\n        'showall' => 'Show Navigation',\n        'breadcrumb' => 'Breadcrumb',\n    );\n//    protected $remove_permissions = array(\n//        'configure',\n//        'create',\n//        'delete',\n//        'edit'\n//    );\n    protected $add_permissions = array(\n        'manage'    => 'Manage',\n        'view'      => \"View Page\"\n    );\n    protected $manage_permissions = array(\n        'move'      => 'Move Page',\n        'remove'    => 'Remove Page',\n        'reparent'    => 'Reparent Page',\n    );\n    public $remove_configs = array(\n        'aggregation',\n        'categories',\n        'comments',\n        'ealerts',\n        'facebook',\n        'files',\n        'pagination',\n        'rss',\n        'tags',\n        'twitter',\n    );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n\n    static function displayname() { return gt(\"Navigation\"); }\n\n    static function description() { return gt(\"Places navigation links/menus on the page.\"); }\n\n    static function isSearchable() { return true; }\n\n    function searchName() { return gt('Webpage'); }\n\n    /**\n     * @param null $src\n     * @param array $params\n     *\n     */\n    function __construct($src = null, $params = array())\n    {\n        parent::__construct($src, $params);\n        if (!empty($params['id']))  // we normally throw out the $loc->int EXCEPT with navigation pages\n            $this->loc = expCore::makeLocation($this->baseclassname, $src, $params['id']);\n    }\n\n    public function showall() {\n        global $user, $sectionObj, $sections;\n\n        expHistory::set('viewable', $this->params);\n        $id      = $sectionObj->id;\n        $current = null;\n        // all we need to do is determine the current section\n        $navsections = $sections;\n        if ($sectionObj->parent == -1) {\n            $current = $sectionObj;\n        } else {\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        }\n        assign_to_template(array(\n            'sections'     => $navsections,\n            'current'      => $current,\n            'canManage'    => ((isset($user->is_acting_admin) && $user->is_acting_admin == 1) ? 1 : 0),\n        ));\n    }\n\n    public function breadcrumb() {\n        global $sectionObj;\n\n        expHistory::set('viewable', $this->params);\n        $id      = $sectionObj->id;\n        $current = null;\n        // Show not only the location of a page in the hierarchy but also the location of a standalone page\n        $current = new section($id);\n        if ($current->parent == -1) {  // standalone page\n            $navsections = section::levelTemplate(-1, 0);\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        } else {\n            $navsections = section::levelTemplate(0, 0);\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        }\n        assign_to_template(array(\n            'sections'     => $navsections,\n            'current'      => $current,\n        ));\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function navhierarchy($notyui=false) {\n        global $sections;\n\n        $json_array = array();\n        for ($i = 0, $iMax = count($sections); $i < $iMax; $i++) {\n            if ($sections[$i]->depth == 0) {\n                $obj = new stdClass();\n//   \t\t\t\t$obj->id = $sections[$i]->name.$sections[$i]->id;\n                $obj->id   = $sections[$i]->id;\n                $obj->text = $sections[$i]->name;\n                $obj->title = $sections[$i]->page_title;\n                $obj->description = $sections[$i]->description;\n                $obj->new_window = $sections[$i]->new_window;\n                $obj->expFile = $sections[$i]->expFile;\n                $obj->glyph = $sections[$i]->glyph;\n                $obj->glyph_only = $sections[$i]->glyph_only;\n                $obj->type = $sections[$i]->alias_type;\n                if ($sections[$i]->active == 1) {\n                    $obj->url = $sections[$i]->link;\n                    if ($obj->type == 1 && substr($obj->url, 0, 4) != 'http') {\n                        $obj->url = 'http://' . $obj->url;\n                    }\n                } else {\n                    $obj->url     = \"#\";\n                    $obj->onclick = \"onclick: { fn: return false }\";\n                }\n                if ($obj->type == 3) {  // mostly a hack instead of adding more table fields\n                    $obj->width = $sections[$i]->internal_id;\n                    $obj->class = $sections[$i]->external_link;\n                }\n                /*if ($sections[$i]->active == 1) {\n                    $obj->disabled = false;\n                } else {\n                    $obj->disabled = true;\n                }*/\n                //$obj->disabled = true;\n                $obj->itemdata = self::getChildren($i,$notyui);\n                $obj->maxitems = count($obj->itemdata);\n                $obj->maxdepth = 0;\n                foreach ($obj->itemdata as $menu) {\n                    if ($menu->maxdepth > $obj->maxdepth) $obj->maxdepth = $menu->maxdepth;\n                }\n            }\n            $json_array[] = $obj;\n        }\n        return $json_array;\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function navtojson() {\n        return json_encode(self::navhierarchy());\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function getChildren(&$i, $notyui=false) {\n        global $sections;\n\n        //\t\techo \"i=\".$i.\"<br>\";\n        if ($i + 1 == count($sections)) { // last entry\n            return array();\n        } elseif ($sections[$i]->depth == $sections[$i + 1]->depth) {\n            return array();\n        } else {\n            $ret_depth = $sections[$i]->depth;\n            $i++;\n            $ret_array = array();\n            for ($iMax = count($sections); $i < $iMax; $i++) {\n                // start setting up the objects to return\n                $obj       = new stdClass();\n                $obj->id   = $sections[$i]->id;\n                $obj->text = $sections[$i]->name;\n                $obj->title = $sections[$i]->page_title;\n                $obj->description = $sections[$i]->description;\n                $obj->new_window = $sections[$i]->new_window;\n                $obj->expFile = $sections[$i]->expFile;\n                $obj->glyph = $sections[$i]->glyph;\n                $obj->glyph_only = $sections[$i]->glyph_only;\n                $obj->depth = $sections[$i]->depth;\n                if ($sections[$i]->active == 1) {\n                    $obj->url = $sections[$i]->link;\n                    if ($sections[$i]->alias_type == 1 && substr($obj->url, 0, 4) != 'http') {\n                        $obj->url = 'http://' . $obj->url;\n                    }\n                } else {\n                    $obj->url     = \"#\";\n                    $obj->onclick = \"onclick: { fn: return false }\";\n                }\n                //echo \"i=\".$i.\"<br>\";\n                if (self::hasChildren($i)) {\n                    if ($notyui) {\n                        $obj->itemdata = self::getChildren($i,$notyui);\n                        $obj->maxitems = count($obj->itemdata);\n                        $obj->maxdepth = 0;\n                        foreach ($obj->itemdata as $menu) {\n                            if (!empty($menu->maxdepth)) {\n                                if ($menu->maxdepth > $obj->maxdepth) $obj->maxdepth = $menu->maxdepth;\n                            } else {\n                                if ($menu->depth > $obj->maxdepth) $obj->maxdepth = $menu->depth;\n                            }\n                        }\n                    } else {\n                        $obj->submenu     = new stdClass();\n                        $obj->submenu->id = $sections[$i]->name . $sections[$i]->id;\n                        //echo \"getting children of \".$sections[$i]->name;\n                        $obj->submenu->itemdata = self::getChildren($i,$notyui);\n                        $obj->maxitems = count($obj->submenu->itemdata);\n                        $obj->maxdepth = 0;\n                        foreach ($obj->submenu->itemdata as $menu) {\n                            if (!empty($menu->maxdepth)) {\n                                if ($menu->maxdepth > $obj->maxdepth) $obj->maxdepth = $menu->maxdepth;\n                            } else {\n                                if ($menu->depth > $obj->maxdepth) $obj->maxdepth = $menu->depth;\n                            }\n                        }\n                    }\n                    $ret_array[]            = $obj;\n                } else {\n                    $obj->maxdepth = $obj->depth;\n                    $ret_array[] = $obj;\n                }\n                if (($i + 1) >= count($sections) || $sections[$i + 1]->depth <= $ret_depth) {\n                    return $ret_array;\n                }\n            }\n            return array();\n        }\n    }\n\n    /**\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function hasChildren($i) {\n        global $sections;\n\n        if (($i + 1) >= count($sections)) return false;\n        return ($sections[$i]->depth < $sections[$i + 1]->depth) ? true : false;\n    }\n\n    /** exdoc\n     * Creates a location object, based off of the three arguments passed, and returns it.\n     *\n     * @return array\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function initializeNavigation() {\n        $sections = section::levelTemplate(0, 0);\n        return $sections;\n    }\n\n    /**\n     * returns all the section's children\n     *\n     * @static\n     *\n     * @param int   $parent top level parent id\n     * @param int   $depth  variable to hold level of recursion\n     * @param array $parents\n     *\n     * @return array\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function levelTemplate($parent, $depth = 0, $parents = array()) {\n        global $user;\n\n        if ($parent != 0) $parents[] = $parent;\n        $nodes = array();\n        $cache = expSession::getCacheValue('navigation');\n        $sect = new section();\n        if (!isset($cache['kids'][$parent])) {\n            $kids = $sect->find('all','parent=' . $parent);\n            $cache['kids'][$parent] = $kids;\n            expSession::setCacheValue('navigation', $cache);\n        } else {\n            $kids = $cache['kids'][$parent];\n        }\n        $kids = expSorter::sort(array('array' => $kids, 'sortby' => 'rank', 'order' => 'ASC'));\n        for ($i = 0, $iMax = count($kids); $i < $iMax; $i++) {\n            $child = $kids[$i];\n            //foreach ($kids as $child) {\n            if ($child->public == 1 || expPermissions::check('view', expCore::makeLocation('navigation', '', $child->id))) {\n                $child->numParents    = count($parents);\n                $child->depth         = $depth;\n                $child->first         = ($i == 0 ? 1 : 0);\n                $child->last          = ($i == count($kids) - 1 ? 1 : 0);\n                $child->parents       = $parents;\n                $child->canManage     = (isset($user->is_acting_admin) && $user->is_acting_admin == 1 ? 1 : 0);\n                $child->canManageRank = $child->canManage;\n                if (!isset($child->sef_name)) {\n                    $child->sef_name = '';\n                }\n                // Generate the link attribute base on alias type.\n                if ($child->alias_type == 1) {\n                    // External link.  Set the link to the configured website URL.\n                    // This is guaranteed to be a full URL because of the\n                    // section::updateExternalAlias() method in models-1/section.php\n                    $child->link = $child->external_link;\n                } else if ($child->alias_type == 2) {\n                    // Internal link.\n                    // Need to check and see if the internal_id is pointing at an external link.\n//                    $dest = $db->selectObject('section', 'id=' . $child->internal_id);\n                    $dest = $sect->find('first','id=' . $child->internal_id);\n                    if (!empty($dest->alias_type) && $dest->alias_type == 1) {\n                        // This internal alias is pointing at an external alias.\n                        // Use the external_link of the destination section for the link\n                        $child->link = $dest->external_link;\n                    } else {\n                        // Pointing at a regular section.  This is guaranteed to be\n                        // a regular section because aliases cannot be turned into sections,\n                        // (and vice-versa) and because the section::updateInternalLink\n                        // does 'alias to alias' dereferencing before the section is saved\n                        // (see models-1/section.php)\n                        //added by Tyler to pull the descriptions through for the children view\n                        $child->description = !empty($dest->description) ? $dest->description : '';\n                        $child->link        = expCore::makeLink(array('section' => $child->internal_id));\n                    }\n                } else {\n                    // Normal link, alias_type == 0.  Just create the URL from the section's id.\n                    $child->link = expCore::makeLink(array('section' => $child->id), '', $child->sef_name);\n                }\n                //$child->numChildren = $db->countObjects('section','parent='.$child->id);\n                $nodes[] = $child;\n                $nodes   = array_merge($nodes, section::levelTemplate($child->id, $depth + 1, $parents));\n            }\n        }\n        return $nodes;\n    }\n\n    /**\n     * Returns a flat representation of the full site hierarchy.\n     *\n     * @param int    $parent         top level parent id\n     * @param int    $depth          variable to hold level of recursion\n     * @param array  $ignore_ids     array of pages to ignore\n     * @param bool   $full           include a 'top' level entry\n     * @param string $perm           permission level to build list\n     * @param bool   $addstandalones should we add the stand-alone pages also\n     * @param bool   $addinternalalias\n     *\n     * @return array\n     * @deprecated 2.3.4 moved to section model, HOWEVER still used in theme config\n     */\n    public static function levelDropdownControlArray($parent, $depth = 0, $ignore_ids = array(), $full = false, $perm = 'view', $addstandalones = false, $addinternalalias = true) {\n        global $db;\n\n        $ar = array();\n        if ($parent == 0 && $full) {\n            $ar[0] = '&lt;' . gt('Top of Hierarchy') . '&gt;';\n        }\n        if ($addinternalalias) {\n            $intalias = '';\n        } else {\n            $intalias = ' AND alias_type != 2';\n        }\n        $nodes = $db->selectObjects('section', 'parent=' . $parent . $intalias, 'rank');\n        foreach ($nodes as $node) {\n            if ((($perm == 'view' && $node->public == 1) || expPermissions::check($perm, expCore::makeLocation('navigation', '', $node->id))) && !in_array($node->id, $ignore_ids)) {\n                if ($node->active == 1) {\n                    $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . $node->name;\n                } else {\n                    $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . '(' . $node->name . ')';\n                }\n                $ar[$node->id] = $text;\n                foreach (self::levelDropdownControlArray($node->id, $depth + 1, $ignore_ids, $full, $perm, $addstandalones, $addinternalalias) as $id => $text) {\n                    $ar[$id] = $text;\n                }\n            }\n        }\n        if ($addstandalones && $parent == 0) {\n            $sections = $db->selectObjects('section', 'parent=-1');\n            foreach ($sections as $node) {\n                if ((($perm == 'view' && $node->public == 1) || expPermissions::check($perm, expCore::makeLocation('navigation', '', $node->id))) && !in_array($node->id, $ignore_ids)) {\n                    if ($node->active == 1) {\n                        $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . $node->name;\n                    } else {\n                        $text = str_pad('', ($depth + ($full ? 1 : 0)) * 3, '.', STR_PAD_LEFT) . '(' . $node->name . ')';\n                    }\n                    $ar[$node->id] = '(' . gt('Standalone') . ') ' . $text;\n                }\n            }\n//            $ar = array_merge($ar,$sections);\n        }\n        return $ar;\n    }\n\n    /**\n     * add all module items to search index\n     *\n     * @return int\n     */\n    function addContentToSearch() {\n        global $db;\n\n        //global $sections;\n        //\t\tglobal $router;\n//        $db->delete('search', \"ref_module='navigation' AND ref_type='section'\");\n        $db->delete('search', \"ref_module='\".$this->baseclassname.\"' AND ref_type='section'\");\n        // this now ensures we get internal pages, instead of relying on the global $sections, which does not.\n        $sections = $db->selectObjects('section', 'active=1');\n        foreach ($sections as $section) {\n            $search_record = new stdClass();\n//            $search_record->category = 'Webpages';\n//            $search_record->ref_module = 'navigationController';\n//            $search_record->ref_type = 'section';\n//            $search_record->ref_module  = $this->classname;\n            $search_record->ref_module  = $this->baseclassname;\n            $search_record->category    = $this->searchName();\n            $search_record->ref_type    = $this->searchCategory();\n            $search_record->original_id = $section->id;\n            $search_record->title       = $section->name;\n            //$search_record->view_link = $router->buildUrlByPageId($section->id);\n            $link = str_replace(URL_FULL, '', makeLink(array('section' => $section->id)));\n            if ($link . '/' == URL_FULL) $link = '';\n            $search_record->view_link = $link;\n            $search_record->body      = $section->description;\n            $search_record->keywords  = $section->keywords;\n            // now we're going to grab all the textmodules on this page and build the body for the page based off the content\n            // of all the text module added together.\n            $loc = expCore::makeLocation('text');\n            $controllername = 'text';\n            foreach ($db->selectObjects('sectionref', \"module='\" . $controllername . \"' AND section=\" . $section->id) as $module) {\n                $loc->src   = $module->source;\n//                $controller = new $controllername();\n                $controller = expModules::getController($controllername);\n                $textitems  = $db->selectObjects($controller->model_table, \"location_data='\" . serialize($loc) . \"'\");\n                foreach ($textitems as $textitem) {\n                    if (!empty($textitem)) {\n                        $search_record->body .= ' ' . search::removeHTML($textitem->body) . ' ';\n                        $search_record->keywords .= \" \" . $textitem->title;\n                    }\n                }\n            }\n            $db->insertObject($search_record, 'search');\n        }\n        return count($sections);\n    }\n\n    /**\n     * Retrieve either the entire hierarchy, or a subset of the hierarchy, as an array suitable for use\n     * in a dropdowncontrol.  This is used primarily by the section datatype for moving and adding\n     * sections to specific parts of the site hierarchy.\n     *\n     * @param int   $parent     The id of the subtree parent.  If passed as 0 (the default), the entire subtree is parsed.\n     * @param int   $depth\n     * @param int   $default\n     * @param array $ignore_ids a value-array of IDs to be ignored when generating the list.  This is used\n     *                          when moving a section, since a section cannot be made a subsection of itself or any of its subsections.\n     *\n     * @return string\n     */\n    function levelShowDropdown($parent, $depth = 0, $default = 0, $ignore_ids = array()) {\n        global $db;\n\n        $html = '';\n        $nodes = $db->selectObjects('section', 'parent=' . $parent, 'rank');\n//\t\t$nodes = expSorter::sort(array('array'=>$nodes,'sortby'=>'rank', 'order'=>'ASC'));\n        foreach ($nodes as $node) {\n            if (($node->public == 1 || expPermissions::check('view', expCore::makeLocation('navigation', '', $node->id))) && !in_array($node->id, $ignore_ids)) {\n                $html .= '<option value=\"' . $node->id . '\" ';\n                if ($default == $node->id) $html .= 'selected';\n                $html .= '>';\n                if ($node->active == 1) {\n                    $html .= str_pad('', $depth * 3, '.', STR_PAD_LEFT) . $node->name;\n                } else {\n                    $html .= str_pad('', $depth * 3, '.', STR_PAD_LEFT) . '(' . $node->name . ')';\n                }\n                $html .= '</option>';\n                $html .= self::levelShowDropdown($node->id, $depth + 1, $default, $ignore_ids);\n            }\n        }\n        return $html;\n    }\n\n    /**\n     * recursively lists the template hierarchy\n     *\n     * @static\n     *\n     * @param int $parent top level parent id\n     * @param int $depth  variable to hold level of recursion\n     *\n     * @return array\n     * @deprecated 2.0.0 this only for deprecated templates\n     */\n    public static function getTemplateHierarchyFlat($parent, $depth = 1) {\n        global $db;\n\n        $arr  = array();\n        $kids = $db->selectObjects('section_template', 'parent=' . $parent, 'rank');\n//\t\t$kids = expSorter::sort(array('array'=>$kids,'sortby'=>'rank', 'order'=>'ASC'));\n        for ($i = 0, $iMax = count($kids); $i < $iMax; $i++) {\n            $page        = $kids[$i];\n            $page->depth = $depth;\n            $page->first = ($i == 0 ? 1 : 0);\n            $page->last  = ($i == count($kids) - 1 ? 1 : 0);\n            $arr[]       = $page;\n            $arr         = array_merge($arr, self::getTemplateHierarchyFlat($page->id, $depth + 1));\n        }\n        return $arr;\n    }\n\n    /**\n     * @deprecated 2.0.0 this only for deprecated templates\n     */\n    public static function process_section($section, $template) {\n        global $db;\n\n        if (!is_object($template)) {\n            $template          = $db->selectObject('section_template', 'id=' . $template);\n            $section->subtheme = $template->subtheme;\n            $db->updateObject($section, 'section');\n        }\n        $prefix = '@st' . $template->id;\n        $refs   = $db->selectObjects('sectionref', \"source LIKE '$prefix%'\");\n        // Copy all modules and content for this section\n        foreach ($refs as $ref) {\n            $src = substr($ref->source, strlen($prefix)) . $section->id;\n            if (call_user_func(array($ref->module, 'hasContent'))) {\n                $oloc = expCore::makeLocation($ref->module, $ref->source);\n                $nloc = expCore::makeLocation($ref->module, $src);\n                if ($ref->module != \"container\") {\n                    call_user_func(array($ref->module, 'copyContent'), $oloc, $nloc);\n                } else {\n                    call_user_func(array($ref->module, 'copyContent'), $oloc, $nloc, $section->id);\n                }\n            }\n        }\n        // Grab sub pages\n        foreach ($db->selectObjects('section_template', 'parent=' . $template->id) as $t) {\n            self::process_subsections($section, $t);\n        }\n\n    }\n\n    /**\n     * @deprecated 2.0.0 this only for deprecated templates\n     */\n    function process_subsections($parent_section, $subtpl) {\n        global $db, $router;\n\n        $section              = new stdClass();\n        $section->parent      = $parent_section->id;\n        $section->name        = $subtpl->name;\n        $section->sef_name    = $router->encode($section->name);\n        $section->subtheme    = $subtpl->subtheme;\n        $section->active      = $subtpl->active;\n        $section->public      = $subtpl->public;\n        $section->rank        = $subtpl->rank;\n        $section->page_title  = $subtpl->page_title;\n        $section->keywords    = $subtpl->keywords;\n        $section->description = $subtpl->description;\n        $section->id          = $db->insertObject($section, 'section');\n        self::process_section($section, $subtpl);\n    }\n\n    /**\n     * Delete page and send its contents to the recycle bin\n     *\n     * @param $parent\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function deleteLevel($parent) {\n        global $db;\n\n        $kids = $db->selectObjects('section', 'parent=' . $parent);\n        foreach ($kids as $kid) {\n            self::deleteLevel($kid->id);\n        }\n        $secrefs = $db->selectObjects('sectionref', 'section=' . $parent);\n        foreach ($secrefs as $secref) {\n            $loc = expCore::makeLocation($secref->module, $secref->source, $secref->internal);\n            recyclebin::sendToRecycleBin($loc, $parent);\n            //FIXME if we delete the module & sectionref the module completely disappears\n//            if (class_exists($secref->module)) {\n//                $modclass = $secref->module;\n//                //FIXME: more module/controller glue code\n//                if (expModules::controllerExists($modclass)) {\n//                    $modclass = expModules::getControllerClassName($modclass);\n//                    $mod = new $modclass($loc->src);\n//                    $mod->delete_instance();\n//                } else {\n//                    $mod = new $modclass();\n//                    $mod->deleteIn($loc);\n//                }\n//            }\n        }\n//        $db->delete('sectionref', 'section=' . $parent);\n        $db->delete('section', 'parent=' . $parent);\n    }\n\n    /**\n     * Move content page and its children to stand-alones\n     *\n     * @param $parent\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function removeLevel($parent) {\n        global $db;\n\n        $kids = $db->selectObjects('section', 'parent=' . $parent);\n        foreach ($kids as $kid) {\n            $kid->parent = -1;\n            $db->updateObject($kid, 'section');\n            self::removeLevel($kid->id);\n        }\n    }\n\n    /**\n     * Check for cascading page view permission, esp. if not public\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function canView($section) {\n        global $db;\n\n        if ($section == null) {\n            return false;\n        }\n        if ($section->public == 0) {\n            // Not a public section.  Check permissions.\n            return expPermissions::check('view', expCore::makeLocation('navigation', '', $section->id));\n        } else { // Is public.  check parents.\n            if ($section->parent <= 0) {\n                // Out of parents, and since we are still checking, we haven't hit a private section.\n                return true;\n            } else {\n                $s = $db->selectObject('section', 'id=' . $section->parent);\n                return self::canView($s);\n            }\n        }\n    }\n\n    /**\n     * Check to see if page is public with cascading\n     * @deprecated 2.3.4 moved to section model\n     */\n    public static function isPublic($s) {\n        if ($s == null) {\n            return false;\n        }\n        while ($s->public && $s->parent > 0) {\n            $s = new section($s->parent);\n        }\n        $lineage = (($s->public) ? 1 : 0);\n        return $lineage;\n    }\n\n    public static function canManageStandalones() {\n        global $user;\n\n        if ($user->isAdmin()) return true;\n        $standalones = section::levelTemplate(-1, 0);\n        //\t\t$canmanage = false;\n        foreach ($standalones as $standalone) {\n            $loc = expCore::makeLocation('navigation', '', $standalone->id);\n            if (expPermissions::check('manage', $loc)) return true;\n        }\n        return false;\n    }\n\n    /**\n     * Reassign permissions based on a check/change in menu/page hierarchy\n     *\n     * @static\n     *\n     * @param $id\n     */\n    public static function checkForSectionalAdmins($id) {\n        global $db;\n\n        $section = $db->selectObject('section', 'id=' . $id);\n        $branch  = section::levelTemplate($id, 0);\n        array_unshift($branch, $section);\n        $allusers  = array();\n        $allgroups = array();\n        while ($section->parent > 0) {\n            //\t\t\t$ploc = expCore::makeLocation('navigationController', null, $section);\n            $allusers  = array_merge($allusers, $db->selectColumn('userpermission', 'uid', \"permission='manage' AND module='navigation' AND internal=\" . $section->parent));\n            $allgroups = array_merge($allgroups, $db->selectColumn('grouppermission', 'gid', \"permission='manage' AND module='navigation' AND internal=\" . $section->parent));\n            $section   = $db->selectObject('section', 'id=' . $section->parent);\n        }\n        foreach ($branch as $section) {\n            $sloc = expCore::makeLocation('navigation', null, $section->id);\n            // remove any manage permissions for this page and it's children\n            // $db->delete('userpermission', \"module='navigationController' AND internal=\".$section->id);\n            // $db->delete('grouppermission', \"module='navigationController' AND internal=\".$section->id);\n            foreach ($allusers as $uid) {\n                $u = user::getUserById($uid);\n                expPermissions::grant($u, 'manage', $sloc);\n            }\n            foreach ($allgroups as $gid) {\n                $g = group::getGroupById($gid);\n                expPermissions::grantGroup($g, 'manage', $sloc);\n            }\n        }\n    }\n\n    function manage() {\n        global $db, $router, $user;\n\n        expHistory::set('manageable', $router->params);\n        assign_to_template(array(\n            'canManageStandalones' => self::canManageStandalones(),\n            'sasections'           => $db->selectObjects('section', 'parent=-1'),\n            'user'                 => $user,\n//            'canManagePagesets'    => $user->isAdmin(),\n//            'templates'            => $db->selectObjects('section_template', 'parent=0'),\n        ));\n    }\n\n    public function manage_sitemap() {\n        global $db, $user, $sectionObj, $sections;\n\n        expHistory::set('viewable', $this->params);\n        $id      = $sectionObj->id;\n        $current = null;\n        // all we need to do is determine the current section\n        $navsections = $sections;\n        if ($sectionObj->parent == -1) {\n            $current = $sectionObj;\n        } else {\n            foreach ($navsections as $section) {\n                if ($section->id == $id) {\n                    $current = $section;\n                    break;\n                }\n            }\n        }\n        assign_to_template(array(\n            'sasections'   => $db->selectObjects('section', 'parent=-1'),\n            'sections'     => $navsections,\n            'current'      => $current,\n            'canManage'    => ((isset($user->is_acting_admin) && $user->is_acting_admin == 1) ? 1 : 0),\n        ));\n    }\n\n    /**\n     * Ajax request for specific pages as json date to yui tree\n     */\n    public static function returnChildrenAsJSON() {\n        global $db;\n\n        //$nav = section::levelTemplate(intval($_REQUEST['id'], 0));\n        $id         = isset($_REQUEST['id']) ? intval($_REQUEST['id']) : 0;\n        $nav        = $db->selectObjects('section', 'parent=' . $id, 'rank');\n        //FIXME $manage_all is moot w/ cascading perms now?\n        $manage_all = false;\n        if (expPermissions::check('manage', expCore::makeLocation('navigation', '', $id))) {\n            $manage_all = true;\n        }\n        //FIXME recode to use foreach $key=>$value\n        $navcount = count($nav);\n        for ($i = 0; $i < $navcount; $i++) {\n            if ($manage_all || expPermissions::check('manage', expCore::makeLocation('navigation', '', $nav[$i]->id))) {\n                $nav[$i]->manage = 1;\n                $view = true;\n            } else {\n                $nav[$i]->manage = 0;\n                $view = $nav[$i]->public ? true : expPermissions::check('view', expCore::makeLocation('navigation', '', $nav[$i]->id));\n            }\n            $nav[$i]->link = expCore::makeLink(array('section' => $nav[$i]->id), '', $nav[$i]->sef_name);\n            if (!$view) unset($nav[$i]);\n        }\n        $nav= array_values($nav);\n//        $nav[$navcount - 1]->last = true;\n        if (count($nav)) $nav[count($nav) - 1]->last = true;\n//        echo expJavascript::ajaxReply(201, '', $nav);\n        $ar = new expAjaxReply(201, '', $nav);\n        $ar->send();\n    }\n\n    /**\n     * Ajax request for all pages as json date to jstree\n     */\n    public static function returnChildrenAsJSON2() {\n        global $db;\n\n        $icons = array(\n            0 => 'addpage',\n            1 => 'addextpage',\n            2 => 'addintpage',\n            3 => 'addfreeform',\n        );\n\n        $navs        = $db->selectObjects('section', 'parent!=-1', 'rank');\n        foreach ($navs as $i=>$nav) {\n            $navs[$i]->parent = $nav->parent?$nav->parent:'#';\n            $navs[$i]->text = $nav->name;\n            $navs[$i]->icon = $icons[$nav->alias_type];\n            if (!$nav->active) {\n                $navs[$i]->icon .= ' inactive';\n                $attr = new stdClass();\n                $attr->class = 'inactive';  // class to obscure elements\n                $navs[$i]->a_attr = $attr;\n            }\n            if (expPermissions::check('manage', expCore::makeLocation('navigation', '', $navs[$i]->id))) {\n                $navs[$i]->manage = 1;\n                $view = true;\n            } else {\n                $navs[$i]->manage = 0;\n                $navs[$i]->state->disabled = true;\n                $view = $navs[$i]->public ? true : expPermissions::check('view', expCore::makeLocation('navigation', '', $navs[$i]->id));\n            }\n            $navs[$i]->link = expCore::makeLink(array('section' => $navs[$i]->id), '', $navs[$i]->sef_name);\n            if (!$view) {\n//                unset($navs[$i]);  //FIXME this breaks jstree if we remove a parent and not the child\n                $attr = new stdClass();\n                $attr->class = 'hidden';  // bs3 class to hide elements\n                $navs[$i]->li_attr = $attr;\n            }\n        }\n        $navs= array_values($navs);\n//        header('Content-Type: application/json; charset=utf8');\n\t\techo json_encode($navs);\n//        echo expJavascript::ajaxReply(201, '', $navs);\n        exit;\n    }\n\n    /**\n     * Ajax function to reorder page hierarchy from yui tree control\n     */\n    public static function DragnDropReRank() {\n        global $db, $router;\n\n        $move   = $router->params['move'];\n        $target = $router->params['target'];\n        $type   = $router->params['type'];\n        $targSec = $db->selectObject(\"section\",\"id=\".$target);\n//        $targSec  = new section($target);\n        $check_id = $targSec->parent;\n        $moveSec = $db->selectObject(\"section\",\"id=\".$move);\n//        $moveSec = new section($move);\n\n        // dropped on top of page\n        if ($type == \"append\") {\n            //save the old parent in case we are changing the depth of the moving section\n            $oldParent = $moveSec->parent;\n            //assign the parent of the moving section to the ID of the target section\n            $moveSec->parent = $targSec->id;\n            //set the rank of the moving section to 0 since it will appear first in the new order\n            $moveSec->rank = 1;\n            //select all children currently of the parent we're about to append to\n            $targSecChildren = $db->selectObjects(\"section\", \"parent=\" . $targSec->id . \" ORDER BY rank\");\n            //update the ranks of the children to +1 higher to accommodate our new rank 0 section being moved in.\n            $newrank = 1;\n            foreach ($targSecChildren as $value) {\n                if ($value->id != $moveSec->id) {\n                    $value->rank = $newrank;\n                    $db->updateObject($value, 'section');\n                    $newrank++;\n                }\n            }\n            $db->updateObject($moveSec, 'section');\n            if ($oldParent != $moveSec->parent) {\n                //we need to re-rank the children of the parent that the miving section has just left\n                $childOfLastMove = $db->selectObjects(\"section\", \"parent=\" . $oldParent . \" ORDER BY rank\");\n                for ($i = 0, $iMax = count($childOfLastMove); $i < $iMax; $i++) {\n                    $childOfLastMove[$i]->rank = $i;\n                    $db->updateObject($childOfLastMove[$i], 'section');\n                }\n\n            }\n//            echo $moveSec->name . \" was appended to \" . $targSec->name;\n\n        } elseif ($type == \"after\") {  // dropped between (after) pages\n            if ($targSec->parent == $moveSec->parent) {\n                //are we moving up...\n                if ($targSec->rank < $moveSec->rank) {\n                    $moveSec->rank    = $targSec->rank + 1;\n                    $moveNextSiblings = $db->selectObjects(\"section\", \"id!=\" . $moveSec->id . \" AND parent=\" . $targSec->parent . \" AND rank>\" . $targSec->rank . \" ORDER BY rank\");\n                    $rerank           = $moveSec->rank + 1;\n                    foreach ($moveNextSiblings as $value) {\n                        if ($value->id != $moveSec->id) {\n                            $value->rank = $rerank;\n                            $db->updateObject($value, 'section');\n                            $rerank++;\n                        }\n                    }\n                    $db->updateObject($targSec, 'section');\n//                    $targSec->update();\n                    $db->updateObject($moveSec, 'section');\n//                    $moveSec->update();\n                    //or are we moving down...\n                } else {\n                    $targSec->rank        = $targSec->rank - 1;\n                    $moveSec->rank        = $targSec->rank + 1;\n                    $movePreviousSiblings = $db->selectObjects(\"section\", \"id!=\" . $moveSec->id . \" AND parent=\" . $targSec->parent . \" AND rank<=\" . $targSec->rank . \" ORDER BY rank\");\n                    $rerank               = 1;\n                    foreach ($movePreviousSiblings as $value) {\n                        if ($value->id != $moveSec->id) {\n                            $value->rank = $rerank;\n                            $db->updateObject($value, 'section');\n                            $rerank++;\n                        }\n                    }\n                    $db->updateObject($targSec, 'section');\n//                    $targSec->update();\n                    $db->updateObject($moveSec, 'section');\n//                    $moveSec->update();\n                }\n            } else {  // 'before', is this used?\n                //store ranks from the depth we're moving from.  Used to re-rank the level depth the moving section is moving from.\n                $oldRank   = $moveSec->rank;\n                $oldParent = $moveSec->parent;\n                //select all children of the target sections parent with a rank higher than it's own\n                $moveNextSiblings = $db->selectObjects(\"section\", \"parent=\" . $targSec->parent . \" AND rank>\" . $targSec->rank . \" ORDER BY rank\");\n                //update moving sections rank and parent\n                $moveSec->rank   = $targSec->rank + 1;\n                $moveSec->parent = $targSec->parent;\n                //$rerank=$moveSec->rank+1;\n                foreach ($moveNextSiblings as $value) {\n                    $value->rank = $value->rank + 1;\n                    $db->updateObject($value, 'section');\n                }\n                $db->updateObject($moveSec, 'section');\n                //handle re-ranking of previous parent\n                $oldSiblings = $db->selectObjects(\"section\", \"parent=\" . $oldParent . \" AND rank>\" . $oldRank . \" ORDER BY rank\");\n                $rerank      = 1;\n                foreach ($oldSiblings as $value) {\n                    if ($value->id != $moveSec->id) {\n                        $value->rank = $rerank;\n                        $db->updateObject($value, 'section');\n                        $rerank++;\n                    }\n                }\n                if ($oldParent != $moveSec->parent) {\n                    //we need to re-rank the children of the parent that the moving section has just left\n                    $childOfLastMove = $db->selectObjects(\"section\", \"parent=\" . $oldParent . \" ORDER BY rank\");\n                    for ($i = 0, $iMax = count($childOfLastMove); $i < $iMax; $i++) {\n                        $childOfLastMove[$i]->rank = $i;\n                        $db->updateObject($childOfLastMove[$i], 'section');\n                    }\n                }\n            }\n        }\n        self::checkForSectionalAdmins($move);\n        expSession::clearAllUsersSessionCache('navigation');\n    }\n\n    /**\n     * Ajax function to reorder page hierarchy from jstree control\n     */\n    public static function DragnDropReRank2() {\n        global $router, $db;\n\n        $id = $router->params['id'];\n        $page = new section($id);\n        $old_rank = $page->rank;\n        $old_parent = $page->parent;\n        $new_rank = $router->params['position'] + 1;  // rank\n        $new_parent = intval($router->params['parent']);\n\n        $db->decrement($page->tablename, 'rank', 1, 'rank>' . $old_rank . ' AND parent=' . $old_parent);  // close in hole\n        $db->increment($page->tablename, 'rank', 1, 'rank>=' . $new_rank . ' AND parent=' . $new_parent);  // make room\n\n        $params = array();\n        $params['parent'] = $new_parent;\n        $params['rank'] = $new_rank;\n        $page->update($params);\n\n        self::checkForSectionalAdmins($id);\n        expSession::clearAllUsersSessionCache('navigation');\n    }\n\n    function edit_section() {\n        global $db, $user;\n\n        $parent = new section($this->params['parent']);\n        if (empty($parent->id)) $parent->id = 0;\n        assign_to_template(array(\n            'haveStandalone'  => ($db->countObjects('section', 'parent=-1') && $parent->id >= 0),\n            'parent'          => $parent,\n            'isAdministrator' => $user->isAdmin(),\n        ));\n    }\n\n    function edit_contentpage() {\n        //FIXME we come here for new/edit content/standalone pages\n        // FIXME: Allow non-administrative users to manage certain parts of the section hierarchy.\n        //if ($user->is_acting_admin == 1 /*TODO: section admin*/) {\n//        $section = null;\n        $section = new stdClass();\n        if (isset($this->params['id'])) {\n            // Check to see if an id was passed in get.  If so, retrieve that section from\n            // the database, and perform an edit on it.\n            $section  = $this->section->find($this->params['id']);\n        } elseif (isset($this->params['parent'])) {\n            // The isset check is merely a precaution.  This action should\n            // ALWAYS be invoked with a parent or id value.\n            $section  = new section($this->params);\n        } else {\n            notfoundController::handle_not_found();\n            exit;\n        }\n        if (!empty($section->id)) {\n            $check_id = $section->id;\n        } else {\n            $check_id = $section->parent;\n        }\n        if (expPermissions::check('manage', expCore::makeLocation('navigation', '', $check_id))) {\n            if (empty($section->id)) {\n                $section->active = 1;\n                $section->public = 1;\n                if (!isset($section->parent)) {\n                    // This is another precaution.  The parent attribute\n                    // should ALWAYS be set by the caller.\n                    //FJD - if that's the case, then we should die.\n                    notfoundController::handle_not_authorized();\n                    exit;\n                    //$section->parent = 0;\n                }\n            }\n            assign_to_template(array(\n                'section' => $section,\n                'glyphs' => self::get_glyphs(),\n            ));\n        } else {  // User does not have permission to manage sections.  Throw a 403\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    private static function get_glyphs() {\n        if (bs()) {\n            require_once(BASE . 'external/font-awesome.class.php');\n            $fa = new Smk_FontAwesome;\n            if (bs3()) {\n                $icons = $fa->getArray(BASE . 'external/font-awesome4/css/font-awesome.css');\n                $icons = $fa->sortByName($icons);\n                return $fa->nameGlyph($icons);\n            } elseif (bs2()) {\n                expCSS::auto_compile_less(\n                    'external/font-awesome/less/font-awesome.less',\n                    'external/font-awesome/css/font-awesome.css'\n                ); // font-awesome is included within bootstrap2, but not as a separate .css file\n                $icons = $fa->getArray(BASE . 'external/font-awesome/css/font-awesome.css', 'icon-');\n                return $fa->nameGlyph($icons, 'icon-');\n            }\n        } else {\n            return array();\n        }\n    }\n\n    function edit_internalalias() {\n        $section = isset($this->params['id']) ? $this->section->find($this->params['id']) : new section($this->params);\n        if ($section->parent == -1) {\n            notfoundController::handle_not_found();\n            exit;\n        } // doesn't work for standalone pages\n        if (empty($section->id)) {\n            $section->public = 1;\n            if (!isset($section->parent)) {\n                // This is another precaution.  The parent attribute\n                // should ALWAYS be set by the caller.\n                //FJD - if that's the case, then we should die.\n                notfoundController::handle_not_authorized();\n                exit;\n                //$section->parent = 0;\n            }\n        }\n        assign_to_template(array(\n            'section' => $section,\n            'glyphs' => self::get_glyphs(),\n        ));\n    }\n\n    function edit_freeform() {\n        $section = isset($this->params['id']) ? $this->section->find($this->params['id']) : new section($this->params);\n        if ($section->parent == -1) {\n            notfoundController::handle_not_found();\n            exit;\n        } // doesn't work for standalone pages\n        if (empty($section->id)) {\n            $section->public = 1;\n            if (!isset($section->parent)) {\n                // This is another precaution.  The parent attribute\n                // should ALWAYS be set by the caller.\n                //FJD - if that's the case, then we should die.\n                notfoundController::handle_not_authorized();\n                exit;\n                //$section->parent = 0;\n            }\n        }\n        assign_to_template(array(\n            'section' => $section,\n            'glyphs' => self::get_glyphs(),\n        ));\n    }\n\n    function edit_externalalias() {\n        $section = isset($this->params['id']) ? $this->section->find($this->params['id']) : new section($this->params);\n        if ($section->parent == -1) {\n            notfoundController::handle_not_found();\n            exit;\n        } // doesn't work for standalone pages\n        if (empty($section->id)) {\n            $section->public = 1;\n            if (!isset($section->parent)) {\n                // This is another precaution.  The parent attribute\n                // should ALWAYS be set by the caller.\n                //FJD - if that's the case, then we should die.\n                notfoundController::handle_not_authorized();\n                exit;\n                //$section->parent = 0;\n            }\n        }\n        assign_to_template(array(\n            'section' => $section,\n            'glyphs' => self::get_glyphs(),\n        ));\n    }\n\n    function update() {\n        parent::update();\n        expSession::clearAllUsersSessionCache('navigation');\n    }\n\n    function move_standalone() {\n        expSession::clearAllUsersSessionCache('navigation');\n        assign_to_template(array(\n            'parent' => $this->params['parent'],\n        ));\n    }\n\n    /**\n     * Move standalone back to hierarchy\n     *\n     */\n    function reparent_standalone() {\n        $standalone = $this->section->find($this->params['page']);\n        if ($standalone) {\n            $standalone->parent = $this->params['parent'];\n            $standalone->update();\n            expSession::clearAllUsersSessionCache('navigation');\n            expHistory::back();\n        } else {\n            notfoundController::handle_not_found();\n        }\n    }\n\n    /**\n     * Move content page to standalones\n     *\n     */\n    function remove() {\n        global $db;\n\n        $section = $db->selectObject('section', 'id=' . $this->params['id']);\n        if ($section) {\n            section::removeLevel($section->id);\n            $db->decrement('section', 'rank', 1, 'rank > ' . $section->rank . ' AND parent=' . $section->parent);\n            $section->parent = -1;\n            $db->updateObject($section, 'section');\n            expSession::clearAllUsersSessionCache('navigation');\n            expHistory::back();\n        } else {\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    function delete_standalones() {\n        if (!empty($this->params['deleteit'])) {\n            foreach ($this->params['deleteit'] as $page) {\n                $section = new section(intval($page));\n                if ($section) {\n//                    self::deleteLevel($section->id);\n                    $section->delete();\n                }\n            }\n        }\n        expSession::clearAllUsersSessionCache('navigation');\n        expHistory::back();\n    }\n\n    /**\n     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n     *\n     * @return array\n     */\n    public function permissions() {\n        //set the permissions array\n        return $this->add_permissions;\n    }\n\n    // create a psuedo global manage pages permission\n    public static function checkPermissions($permission,$location) {\n        global $exponent_permissions_r, $router;\n\n        // only applies to the 'manage' method\n        if (empty($location->src) && empty($location->int) && ((!empty($router->params['action']) && $router->params['action'] == 'manage') || strpos($router->current_url, 'action=manage') !== false)) {\n            if (!empty($exponent_permissions_r['navigation'])) foreach ($exponent_permissions_r['navigation'] as $page) {\n                foreach ($page as $pageperm) {\n                    if (!empty($pageperm['manage'])) return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Rebuild the sectionref table as a list of modules on a page\n     * @deprecated 2.3.4 moved to sectionref model\n     */\n    public static function rebuild_sectionrefs() {\n        global $db;\n\n        // recursive run though all the nested containers\n        function scan_container($container_id, $page_id) {\n            global $db;\n\n            $containers = $db->selectObjects('container',\"external='\" . $container_id . \"'\");\n            $ret = '';\n            foreach ($containers as $container) {\n                $iLoc = expUnserialize($container->internal);\n                $newret = recyclebin::restoreFromRecycleBin($iLoc, $page_id);\n                if (!empty($newret)) $ret .= $newret . '<br>';\n                if ($iLoc->mod == 'container') {\n                    $ret .= scan_container($container->internal, $page_id);\n                }\n            }\n            return $ret;\n        }\n\n        // recursive run through all the nested pages\n        function scan_page($parent_id) {\n            global $db;\n\n            $sections = $db->selectObjects('section','parent=' . $parent_id);\n            $ret = '';\n            foreach ($sections as $page) {\n                $cLoc = serialize(expCore::makeLocation('container','@section' . $page->id));\n                $ret .= scan_container($cLoc, $page->id);\n                $ret .= scan_page($page->id);\n            }\n            return $ret;\n        }\n\n        // first remove duplicate records\n        $db->sql('DELETE FROM ' . $db->prefix . 'sectionref WHERE id NOT IN (SELECT * FROM (SELECT MIN(n.id) FROM ' . $db->prefix . 'sectionref n GROUP BY n.module, n.source) x)');\n        $ret = scan_page(0);  // the page hierarchy\n        $ret .= scan_page(-1);  // now the stand alone pages\n\n        // we need to get the non-main containers such as sidebars, footers, etc...\n        $hardcodedmods = $db->selectObjects('sectionref',\"refcount=1000 AND source NOT LIKE '%@section%' AND source NOT LIKE '%@random%'\");\n        foreach ($hardcodedmods as $hardcodedmod) {\n            if ($hardcodedmod->module == 'container') {\n                $page_id = intval(preg_replace('/\\D/', '', $hardcodedmod->source));\n                if (empty($page_id)) {\n                    $page_id = SITE_DEFAULT_SECTION;  // we'll default to the home page\n                }\n                $ret .= scan_container(serialize(expCore::makeLocation($hardcodedmod->module, $hardcodedmod->source)), $page_id);\n            } else {\n                $hardcodedmod->section = 0;  // this is a hard-coded non-container module\n                $db->updateObject($hardcodedmod, 'sectionref');\n            }\n        }\n\n        // mark modules in the recycle bin as section 0\n        $db->columnUpdate('sectionref', 'section', 0, \"refcount=0\");\n//        $recycledmods = $db->selectObjects('sectionref',\"refcount=0\");\n//        foreach ($recycledmods as $recycledmod) {\n//            $recycledmod->section = 0;  // this is a module in the recycle bin\n//            $db->updateObject($recycledmod, 'sectionref');\n//        }\n        return $ret;\n    }\n\n}\n\n?>\n", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package Modules\n */\n\nclass pixidouController extends expController {\n\tpublic $cacheDir = \"tmp/pixidou/\";\n    public $requires_login = array(\n        'editor'=>'You must be logged in to perform this action',\n        'exiteditor'=>'You must be logged in to perform this action',\n    );\n\n    static function displayname() { return gt(\"Pixidou Image Editor\"); }\n    static function description() { return gt(\"Add and manage Exponent Files\"); }\n    static function author() { return \"Phillip Ball - OIC Group, Inc\"; }\n\n    static function hasSources()\n    {\n        return false;\n    }\n\n    function editor() {\n        global $user;\n\n        $file = new expFile($this->params['id']);\n\n        $canSaveOg = $user->id==$file->poster || $user->isSuperAdmin() ? 1 : 0 ;\n\t    if (file_exists(BASE . $file->directory . $file->filename)) {\n\t\t\t$file->copyToDirectory(BASE . $this->cacheDir);\n\t\t\tassign_to_template(array(\n                'image'=>$file,\n                'update'=>$this->params['update'],\n                'saveog'=>$canSaveOg\n            ));\n\t    } else {\n\t\t    flash('error', gt('The file') . ' \"' . BASE . $file->directory . $file->filename . '\" ' . gt('does not exist on the server.'));\n\t\t    redirect_to(array(\"controller\"=>'file', \"action\"=>'picker', \"ajax_action\"=>1, \"update\"=>$this->params['update'], \"filter\"=>$this->params['filter']));\n\t    }\n    }\n\n    public function exitEditor() {\n        // clean up parameters\n        $this->params['fid'] = intval($this->params['fid']);\n        if (!empty($this->params['cpi']) && strpos($this->params['cpi'], '..') !== false) {\n            $this->params['exitType'] = 'error';\n        }\n        switch ($this->params['exitType']) {\n            case 'saveAsCopy':\n                $oldimage = new expFile($this->params['fid']);\n                $copyname = expFile::resolveDuplicateFilename($oldimage->path);\n                copy(BASE . $this->cacheDir . \"/\" . $this->params['cpi'], $oldimage->directory . $copyname); //copy the edited file over to the files dir\n                $newFile = new expFile(array(\"filename\"=>$copyname)); //construct a new expFile\n                $newFile->directory = $oldimage->directory;\n                $newFile->title = $oldimage->title;\n                $newFile->shared = $oldimage->shared;\n                $newFile->mimetype = $oldimage->mimetype;\n                $newFile->posted = time();\n                $newFile->filesize = filesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                $resized = getimagesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                $newFile->image_width = $resized[0];\n                $newFile->image_height = $resized[1];\n                $newFile->alt = $oldimage->alt;\n                $newFile->is_image = $oldimage->is_image;\n                $newFile->save(); //Save it to the database\n\n                break;\n            case 'saveAsIs':\n                //eDebug($this->params,true);\n                $oldimage = new expFile($this->params['fid']);\n                $resized = getimagesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                $oldimage->image_width = $resized[0];\n                $oldimage->image_height = $resized[1];\n                $oldimage->save();\n                copy(BASE . $this->cacheDir . \"/\" . $this->params['cpi'], $oldimage->directory . $oldimage->filename); //copy the edited file over to the files dir\n                break;\n\n            default:\n                # code...\n                break;\n        }\n        // proper file types to look for\n        $types = array(\".jpg\", \".gif\", \".png\");\n\n        //Pixidou images directory, the editor's cache\n        $cachedir = BASE . $this->cacheDir;\n\n        if (is_dir($cachedir) && is_readable($cachedir) ) {\n            $dh = opendir($cachedir);\n            while (($tmpfile = readdir($dh)) !== false) {\n                if (in_array(substr($tmpfile, -4, 4), $types)) {\n                    $filename = $cachedir . $tmpfile;\n                    unlink($filename);\n                }\n            }\n        }\n\n        redirect_to(array(\"controller\"=>'file', \"action\"=>'picker', \"ajax_action\"=>1, \"update\"=>$this->params['update'], \"filter\"=>$this->params['filter']));\n    }\n\n}\n\n?>\n"], "filenames": ["framework/core/controllers/expController.php", "framework/core/expFramework.php", "framework/core/subsystems/expString.php", "framework/modules/file/controllers/fileController.php", "framework/modules/forms/controllers/formsController.php", "framework/modules/navigation/controllers/navigationController.php", "framework/modules/pixidou/controllers/pixidouController.php"], "buggy_code_start_loc": [56, 279, 512, 38, 1503, 28, 28], "buggy_code_end_loc": [57, 438, 514, 44, 1504, 34, 29], "fixing_code_start_loc": [56, 280, 512, 38, 1503, 28, 28], "fixing_code_end_loc": [57, 443, 514, 45, 1504, 34, 29], "type": "CWE-284", "message": "Exponent CMS 2.4 uses PHP reflection to call a method of a controller class, and then uses the method name to check user permission. But, the method name in PHP reflection is case insensitive, and Exponent CMS permits undefined actions to execute by default, so an attacker can use a capitalized method name to bypass the permission check, e.g., controller=expHTMLEditor&action=preview&editor=ckeditor and controller=expHTMLEditor&action=Preview&editor=ckeditor. An anonymous user will be rejected for the former but can access the latter.", "other": {"cve": {"id": "CVE-2016-9182", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-04T10:59:01.333", "lastModified": "2016-11-29T18:37:37.863", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exponent CMS 2.4 uses PHP reflection to call a method of a controller class, and then uses the method name to check user permission. But, the method name in PHP reflection is case insensitive, and Exponent CMS permits undefined actions to execute by default, so an attacker can use a capitalized method name to bypass the permission check, e.g., controller=expHTMLEditor&action=preview&editor=ckeditor and controller=expHTMLEditor&action=Preview&editor=ckeditor. An anonymous user will be rejected for the former but can access the latter."}, {"lang": "es", "value": "Exponent CMS 2.4 utiliza reflexi\u00f3n PHP para llamar a un m\u00e9todo de una clase de controlador y luego utiliza el nombre del m\u00e9todo para comprobar el permiso de usuario. Pero el nombre del m\u00e9todo en una reflexi\u00f3n PHP es insensible a las may\u00fasculas y Exponent CMS permite acciones no definidas para ejecutar por defecto, de manera que un atacante puede utilizar nombre de m\u00e9todo capitalizado para eludir la verificaci\u00f3n de permiso, por ejemplo, controller=expHTMLEditor&action=preview&editor=ckeditor y controller=expHTMLEditor&action=Preview&editor=ckeditor. Un usuario an\u00f3nimo ser\u00e1 rechazado por el anterior pero puede acceder este \u00faltimo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFEAA82F-83B2-49B8-B860-2F18C3C66321"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94227", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/684d79424f768db8bb345d5c68aa2a886239492b", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/684d79424f768db8bb345d5c68aa2a886239492b"}}