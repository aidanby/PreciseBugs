{"buggy_code": ["# Changelog\n\nAll notable changes to Gogs are documented in this file.\n\n## 0.13.0+dev (`main`)\n\n### Added\n\n- An unlisted option is added when create or migrate a repository. Unlisted repositories are public but not being listed for users without direct access in the UI. [#5733](https://github.com/gogs/gogs/issues/5733)\n- New configuration option `[git.timeout] DIFF` for customizing operation timeout of `git diff`. [#6315](https://github.com/gogs/gogs/issues/6315)\n- New configuration option `[server] SSH_SERVER_MACS` for setting list of accepted MACs for connections to builtin SSH server. [#6434](https://github.com/gogs/gogs/issues/6434)\n- Support specifying custom schema for PostgreSQL. [#6695](https://github.com/gogs/gogs/pull/6695)\n- Support rendering Mermaid diagrams in Markdown. [#6776](https://github.com/gogs/gogs/pull/6776)\n- New languages support: Mongolian. [#6510](https://github.com/gogs/gogs/pull/6510)\n\n### Changed\n\n- The default branch has been changed to `main`. [#6285](https://github.com/gogs/gogs/pull/6285)\n- MSSQL as database backend is deprecated, installation page no longer shows it as an option. Existing installations and manually craft configuration file continue to work. [#6295](https://github.com/gogs/gogs/pull/6295)\n- Use [Task](https://github.com/go-task/task) as the build tool. [#6297](https://github.com/gogs/gogs/pull/6297)\n- The required Go version to compile source code changed to 1.16.\n- Access tokens are now stored using their SHA256 hashes instead of raw values. [#7008](https://github.com/gogs/gogs/pull/7008)\n\n### Fixed\n\n- _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)\n- _Security:_ Sanitize `DisplayName` in repository issue list. [#7009](https://github.com/gogs/gogs/pull/7009)\n- _Security:_ Path Traversal in file editor on Windows. [#7001](https://github.com/gogs/gogs/issues/7001)\n- Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)\n- Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)\n- Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)\n\n### Removed\n\n- \u26a0\ufe0f Migrations before 0.12 are removed, installations not on 0.12 should upgrade to it to run the migrations and then upgrade to 0.13.\n- Configuration section `[mailer]` is no longer used, please use `[email]`.\n- Configuration section `[service]` is no longer used, please use `[auth]`.\n- Configuration option `APP_NAME` is no longer used, please use `BRAND_NAME`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is no longer used, please use `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is no longer used, please use `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is no longer used, please use `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is no longer used, please use `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is no longer used, please use `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is no longer used, please use `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is no longer used, please use `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is no longer used, please use `[session] MAX_LIFE_TIME`.\n- Configuration option `[server] ROOT_URL` is no longer used, please use `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is no longer used, please use `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is no longer used, please use `[database] TYPE`.\n- Configuration option `[database] PASSWD` is no longer used, please use `[database] PASSWORD`.\n- Remove option to use Makefile as the build tool. [#6980](https://github.com/gogs/gogs/pull/6980)\n\n## 0.12.8\n\n### Changed\n\n- All users (including admins) need to use the configuration option `[security] LOCAL_NETWORK_ALLOWLIST` to allow repository migration and webhooks to be able to access local network addresses, which is a comma separated list of hostnames. [#6988](https://github.com/gogs/gogs/pull/6988)\n\n### Fixed\n\n- _Security:_ SSRF in webhook. [#6901](https://github.com/gogs/gogs/issues/6901)\n- _Security:_ XSS in cookies. [#6953](https://github.com/gogs/gogs/issues/6953)\n- _Security:_ OS Command Injection in file uploading. [#6968](https://github.com/gogs/gogs/issues/6968)\n- _Security:_ Remote Command Execution in file editing. [#6555](https://github.com/gogs/gogs/issues/6555)\n\n## 0.12.7\n\n### Fixed\n\n- _Security:_ Stored XSS in issues. [#6919](https://github.com/gogs/gogs/issues/6919)\n- Invalid character in `Access-Control-Allow-Credentials` response header. [#4983](https://github.com/gogs/gogs/issues/4983)\n- Mysterious `ssh: overflow reading version string` errors from builtin SSH server. [#6882](https://github.com/gogs/gogs/issues/6882)\n\n## 0.12.6\n\n### Fixed\n\n- _Security:_ Remote command execution in file uploading. [#6833](https://github.com/gogs/gogs/issues/6833)\n- _Regression:_ Unable to migrate repository from other local Git hosting. Added a new configuration option `[security] LOCAL_NETWORK_ALLOWLIST`, which is a comma separated list of hostnames that are explicitly allowed to be accessed within the local network. [#6841](https://github.com/gogs/gogs/issues/6841)\n- Slow start of Docker containers using NAS devices. [#6554](https://github.com/gogs/gogs/issues/6554)\n\n## 0.12.5\n\n### Fixed\n\n- _Security:_ Potential SSRF in repository migration. [#6754](https://github.com/gogs/gogs/issues/6754)\n- _Security:_ Improper PAM authorization handling. [#6810](https://github.com/gogs/gogs/issues/6810)\n\n## 0.12.4\n\n### Fixed\n\n- _Security:_ Potential SSRF attack by CRLF injection via repository migration. [#6413](https://github.com/gogs/gogs/issues/6413)\n- _Regression:_ Fixed smart links for issues stops rendering. [#6506](https://github.com/gogs/gogs/issues/6506)\n- Added `X-Frame-Options` header to prevent Clickjacking. [#6409](https://github.com/gogs/gogs/issues/6409)\n\n## 0.12.3\n\n### Fixed\n\n- _Regression:_ When running Gogs on Windows, push commits no longer fail on a daily basis with the error \"pre-receive hook declined\". [#6316](https://github.com/gogs/gogs/issues/6316)\n- Auto-linked commit SHAs now have correct links. [#6300](https://github.com/gogs/gogs/issues/6300)\n- Git LFS client (with version >= 2.5.0) wasn't able to upload files with known format (e.g. PNG, JPEG), and the server is expecting the HTTP Header `Content-Type` to be `application/octet-stream`. The server now tells the LFS client to always use `Content-Type: application/octet-stream` when upload files.\n\n## 0.12.2\n\n### Fixed\n\n- _Regression:_ Pages are correctly rendered when requesting `?go-get=1` for subdirectories. [#6314](https://github.com/gogs/gogs/issues/6314)\n- _Regression:_ Submodule with a relative path is linked correctly. [#6319](https://github.com/gogs/gogs/issues/6319)\n- Backup can be processed when `--target` is specified on Windows. [#6339](https://github.com/gogs/gogs/issues/6339)\n- Commit message contains keywords look like an issue reference no longer fails the push entirely. [#6289](https://github.com/gogs/gogs/issues/6289)\n\n## 0.12.1\n\n### Fixed\n\n- The `updated_at` field is now correctly updated when updates an issue. [#6209](https://github.com/gogs/gogs/issues/6209)\n- Fixed a regression which created `login_source.cfg` column to have `VARCHAR(255)` instead of `TEXT` in MySQL. [#6280](https://github.com/gogs/gogs/issues/6280)\n\n## 0.12.0\n\n### Added\n\n- Support for Git LFS, you can read documentation for both [user](https://github.com/gogs/gogs/blob/main/docs/user/lfs.md) and [admin](https://github.com/gogs/gogs/blob/main/docs/admin/lfs.md). [#1322](https://github.com/gogs/gogs/issues/1322)\n- Allow admin to remove observers from the repository. [#5803](https://github.com/gogs/gogs/pull/5803)\n- Use `Last-Modified` HTTP header for raw files. [#5811](https://github.com/gogs/gogs/issues/5811)\n- Support syntax highlighting for SAS code files (i.e. `.r`, `.sas`, `.tex`, `.yaml`). [#5856](https://github.com/gogs/gogs/pull/5856)\n- Able to fill in pull request title with a template. [#5901](https://github.com/gogs/gogs/pull/5901)\n- Able to override static files under `public/` directory, please refer to [documentation](https://gogs.io/docs/features/custom_template) for usage. [#5920](https://github.com/gogs/gogs/pull/5920)\n- New API endpoint `GET /admin/teams/:teamid/members` to list members of a team. [#5877](https://github.com/gogs/gogs/issues/5877)\n- Support backup with retention policy for Docker deployments. [#6140](https://github.com/gogs/gogs/pull/6140)\n\n### Changed\n\n- The organization profile page has changed to display at most 12 members. [#5506](https://github.com/gogs/gogs/issues/5506)\n- The required Go version to compile source code changed to 1.14.\n- All assets are now embedded into binary and served from memory by default. Set `[server] LOAD_ASSETS_FROM_DISK = true` to load them from disk. [#5920](https://github.com/gogs/gogs/pull/5920)\n- Application and Go versions are removed from page footer and only show in the admin dashboard.\n- Build tag for running as Windows Service has been changed from `miniwinsvc` to `minwinsvc`.\n- Configuration option `APP_NAME` is deprecated and will end support in 0.13.0, please start using `BRAND_NAME`.\n- Configuration option `[server] ROOT_URL` is deprecated and will end support in 0.13.0, please start using `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is deprecated and will end support in 0.13.0, please start using `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is deprecated and will end support in 0.13.0, please start using `[database] TYPE`.\n- Configuration option `[database] PASSWD` is deprecated and will end support in 0.13.0, please start using `[database] PASSWORD`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is deprecated and will end support in 0.13.0, please start using `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration section `[mailer]` is deprecated and will end support in 0.13.0, please start using `[email]`.\n- Configuration section `[service]` is deprecated and will end support in 0.13.0, please start using `[auth]`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is deprecated and will end support in 0.13.0, please start using `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is deprecated and will end support in 0.13.0, please start using `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is deprecated and will end support in 0.13.0, please start using `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is deprecated and will end support in 0.13.0, please start using `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is deprecated and will end support in 0.13.0, please start using `[session] MAX_LIFE_TIME`.\n- The name `-` is reserved and cannot be used for users or organizations.\n\n### Fixed\n\n- [Security] Potential open redirection with i18n.\n- [Security] Potential ability to delete files outside a repository.\n- [Security] Potential ability to set primary email on others' behalf from their verified emails.\n- [Security] Potential XSS attack via `.ipynb`. [#5170](https://github.com/gogs/gogs/issues/5170)\n- [Security] Potential SSRF attack via webhooks. [#5366](https://github.com/gogs/gogs/issues/5366)\n- [Security] Potential CSRF attack in admin panel. [#5367](https://github.com/gogs/gogs/issues/5367)\n- [Security] Potential stored XSS attack in some browsers. [#5397](https://github.com/gogs/gogs/issues/5397)\n- [Security] Potential RCE on mirror repositories. [#5767](https://github.com/gogs/gogs/issues/5767)\n- [Security] Potential XSS attack with raw markdown API. [#5907](https://github.com/gogs/gogs/pull/5907)\n- File both modified and renamed within a commit treated as separate files. [#5056](https://github.com/gogs/gogs/issues/5056)\n- Unable to restore the database backup to MySQL 8.0 with syntax error. [#5602](https://github.com/gogs/gogs/issues/5602)\n- Open/close milestone redirects to a 404 page. [#5677](https://github.com/gogs/gogs/issues/5677)\n- Disallow multiple tokens with same name. [#5587](https://github.com/gogs/gogs/issues/5587) [#5820](https://github.com/gogs/gogs/pull/5820)\n- Enable Federated Avatar Lookup could cause server to crash. [#5848](https://github.com/gogs/gogs/issues/5848)\n- Private repositories are hidden in the organization's view. [#5869](https://github.com/gogs/gogs/issues/5869)\n- Users have access to base repository cannot view commits in forks. [#5878](https://github.com/gogs/gogs/issues/5878)\n- Server error when changing email address in user settings page. [#5899](https://github.com/gogs/gogs/issues/5899)\n- Fall back to use RFC 3339 as time layout when misconfigured. [#6098](https://github.com/gogs/gogs/issues/6098)\n- Unable to update team with server error. [#6185](https://github.com/gogs/gogs/issues/6185)\n- Webhooks are not fired after push when `[service] REQUIRE_SIGNIN_VIEW = true`.\n- Files with identical content are randomly displayed one of them.\n\n### Removed\n\n- Configuration option `[other] SHOW_FOOTER_VERSION`\n- Configuration option `[server] STATIC_ROOT_PATH`\n- Configuration option `[repository] MIRROR_QUEUE_LENGTH`\n- Configuration option `[repository] PULL_REQUEST_QUEUE_LENGTH`\n- Configuration option `[session] ENABLE_SET_COOKIE`\n- Configuration option `[release.attachment] PATH`\n- Configuration option `[webhook] QUEUE_LENGTH`\n- Build tag `sqlite`, which means CGO is now required.\n\n---\n\n**Older change logs can be found on [GitHub](https://github.com/gogs/gogs/releases?after=v0.12.0).**\n", "// Copyright 2020 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage pathutil\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestClean(t *testing.T) {\n\ttests := []struct {\n\t\tpath    string\n\t\twantVal string\n\t}{\n\t\t{\n\t\t\tpath:    \"../../../readme.txt\",\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"a/../../../readme.txt\",\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"/../a/b/../c/../readme.txt\",\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"/a/readme.txt\",\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"/\",\n\t\t\twantVal: \"\",\n\t\t},\n\n\t\t{\n\t\t\tpath:    \"/a/b/c/readme.txt\",\n\t\t\twantVal: \"a/b/c/readme.txt\",\n\t\t},\n\n\t\t// Windows-specific\n\t\t{\n\t\t\tpath:    `..\\..\\..\\readme.txt`,\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `a\\..\\..\\..\\readme.txt`,\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `\\..\\a\\b\\..\\c\\..\\readme.txt`,\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `\\a\\readme.txt`,\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `..\\..\\..\\../README.md`,\n\t\t\twantVal: \"README.md\",\n\t\t},\n\t\t{\n\t\t\tpath:    `\\`,\n\t\t\twantVal: \"\",\n\t\t},\n\n\t\t{\n\t\t\tpath:    `\\a\\b\\c\\readme.txt`,\n\t\t\twantVal: `a/b/c/readme.txt`,\n\t\t},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(test.path, func(t *testing.T) {\n\t\t\tassert.Equal(t, test.wantVal, Clean(test.path))\n\t\t})\n\t}\n}\n", "// Copyright 2017 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage repo\n\nimport (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gopkg.in/macaron.v1\"\n\tlog \"unknwon.dev/clog/v2\"\n\n\t\"gogs.io/gogs/internal/auth\"\n\t\"gogs.io/gogs/internal/conf\"\n\t\"gogs.io/gogs/internal/db\"\n\t\"gogs.io/gogs/internal/lazyregexp\"\n\t\"gogs.io/gogs/internal/tool\"\n)\n\ntype HTTPContext struct {\n\t*macaron.Context\n\tOwnerName string\n\tOwnerSalt string\n\tRepoID    int64\n\tRepoName  string\n\tAuthUser  *db.User\n}\n\n// askCredentials responses HTTP header and status which informs client to provide credentials.\nfunc askCredentials(c *macaron.Context, status int, text string) {\n\tc.Header().Set(\"WWW-Authenticate\", \"Basic realm=\\\".\\\"\")\n\tc.Error(status, text)\n}\n\nfunc HTTPContexter() macaron.Handler {\n\treturn func(c *macaron.Context) {\n\t\tif len(conf.HTTP.AccessControlAllowOrigin) > 0 {\n\t\t\t// Set CORS headers for browser-based git clients\n\t\t\tc.Header().Set(\"Access-Control-Allow-Origin\", conf.HTTP.AccessControlAllowOrigin)\n\t\t\tc.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization, User-Agent\")\n\n\t\t\t// Handle preflight OPTIONS request\n\t\t\tif c.Req.Method == \"OPTIONS\" {\n\t\t\t\tc.Status(http.StatusOK)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\townerName := c.Params(\":username\")\n\t\trepoName := strings.TrimSuffix(c.Params(\":reponame\"), \".git\")\n\t\trepoName = strings.TrimSuffix(repoName, \".wiki\")\n\n\t\tisPull := c.Query(\"service\") == \"git-upload-pack\" ||\n\t\t\tstrings.HasSuffix(c.Req.URL.Path, \"git-upload-pack\") ||\n\t\t\tc.Req.Method == \"GET\"\n\n\t\towner, err := db.Users.GetByUsername(ownerName)\n\t\tif err != nil {\n\t\t\tif db.IsErrUserNotExist(err) {\n\t\t\t\tc.Status(http.StatusNotFound)\n\t\t\t} else {\n\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\tlog.Error(\"Failed to get user [name: %s]: %v\", ownerName, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\trepo, err := db.Repos.GetByName(owner.ID, repoName)\n\t\tif err != nil {\n\t\t\tif db.IsErrRepoNotExist(err) {\n\t\t\t\tc.Status(http.StatusNotFound)\n\t\t\t} else {\n\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\tlog.Error(\"Failed to get repository [owner_id: %d, name: %s]: %v\", owner.ID, repoName, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t// Authentication is not required for pulling from public repositories.\n\t\tif isPull && !repo.IsPrivate && !conf.Auth.RequireSigninView {\n\t\t\tc.Map(&HTTPContext{\n\t\t\t\tContext: c,\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// In case user requested a wrong URL and not intended to access Git objects.\n\t\taction := c.Params(\"*\")\n\t\tif !strings.Contains(action, \"git-\") &&\n\t\t\t!strings.Contains(action, \"info/\") &&\n\t\t\t!strings.Contains(action, \"HEAD\") &&\n\t\t\t!strings.Contains(action, \"objects/\") {\n\t\t\tc.Error(http.StatusBadRequest, fmt.Sprintf(\"Unrecognized action %q\", action))\n\t\t\treturn\n\t\t}\n\n\t\t// Handle HTTP Basic Authentication\n\t\tauthHead := c.Req.Header.Get(\"Authorization\")\n\t\tif authHead == \"\" {\n\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\treturn\n\t\t}\n\n\t\tauths := strings.Fields(authHead)\n\t\tif len(auths) != 2 || auths[0] != \"Basic\" {\n\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\treturn\n\t\t}\n\t\tauthUsername, authPassword, err := tool.BasicAuthDecode(auths[1])\n\t\tif err != nil {\n\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\treturn\n\t\t}\n\n\t\tauthUser, err := db.Users.Authenticate(authUsername, authPassword, -1)\n\t\tif err != nil && !auth.IsErrBadCredentials(err) {\n\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\tlog.Error(\"Failed to authenticate user [name: %s]: %v\", authUsername, err)\n\t\t\treturn\n\t\t}\n\n\t\t// If username and password combination failed, try again using username as a token.\n\t\tif authUser == nil {\n\t\t\ttoken, err := db.AccessTokens.GetBySHA1(c.Req.Context(), authUsername)\n\t\t\tif err != nil {\n\t\t\t\tif db.IsErrAccessTokenNotExist(err) {\n\t\t\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\t\t} else {\n\t\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\t\tlog.Error(\"Failed to get access token [sha: %s]: %v\", authUsername, err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = db.AccessTokens.Save(c.Req.Context(), token); err != nil {\n\t\t\t\tlog.Error(\"Failed to update access token: %v\", err)\n\t\t\t}\n\n\t\t\tauthUser, err = db.Users.GetByID(token.UserID)\n\t\t\tif err != nil {\n\t\t\t\t// Once we found token, we're supposed to find its related user,\n\t\t\t\t// thus any error is unexpected.\n\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\tlog.Error(\"Failed to get user [id: %d]: %v\", token.UserID, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t} else if authUser.IsEnabledTwoFactor() {\n\t\t\taskCredentials(c, http.StatusUnauthorized, `User with two-factor authentication enabled cannot perform HTTP/HTTPS operations via plain username and password\nPlease create and use personal access token on user settings page`)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Trace(\"[Git] Authenticated user: %s\", authUser.Name)\n\n\t\tmode := db.AccessModeWrite\n\t\tif isPull {\n\t\t\tmode = db.AccessModeRead\n\t\t}\n\t\tif !db.Perms.Authorize(authUser.ID, repo.ID, mode,\n\t\t\tdb.AccessModeOptions{\n\t\t\t\tOwnerID: repo.OwnerID,\n\t\t\t\tPrivate: repo.IsPrivate,\n\t\t\t},\n\t\t) {\n\t\t\taskCredentials(c, http.StatusForbidden, \"User permission denied\")\n\t\t\treturn\n\t\t}\n\n\t\tif !isPull && repo.IsMirror {\n\t\t\tc.Error(http.StatusForbidden, \"Mirror repository is read-only\")\n\t\t\treturn\n\t\t}\n\n\t\tc.Map(&HTTPContext{\n\t\t\tContext:   c,\n\t\t\tOwnerName: ownerName,\n\t\t\tOwnerSalt: owner.Salt,\n\t\t\tRepoID:    repo.ID,\n\t\t\tRepoName:  repoName,\n\t\t\tAuthUser:  authUser,\n\t\t})\n\t}\n}\n\ntype serviceHandler struct {\n\tw    http.ResponseWriter\n\tr    *http.Request\n\tdir  string\n\tfile string\n\n\tauthUser  *db.User\n\townerName string\n\townerSalt string\n\trepoID    int64\n\trepoName  string\n}\n\nfunc (h *serviceHandler) setHeaderNoCache() {\n\th.w.Header().Set(\"Expires\", \"Fri, 01 Jan 1980 00:00:00 GMT\")\n\th.w.Header().Set(\"Pragma\", \"no-cache\")\n\th.w.Header().Set(\"Cache-Control\", \"no-cache, max-age=0, must-revalidate\")\n}\n\nfunc (h *serviceHandler) setHeaderCacheForever() {\n\tnow := time.Now().Unix()\n\texpires := now + 31536000\n\th.w.Header().Set(\"Date\", fmt.Sprintf(\"%d\", now))\n\th.w.Header().Set(\"Expires\", fmt.Sprintf(\"%d\", expires))\n\th.w.Header().Set(\"Cache-Control\", \"public, max-age=31536000\")\n}\n\nfunc (h *serviceHandler) sendFile(contentType string) {\n\treqFile := path.Join(h.dir, h.file)\n\tfi, err := os.Stat(reqFile)\n\tif os.IsNotExist(err) {\n\t\th.w.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\th.w.Header().Set(\"Content-Type\", contentType)\n\th.w.Header().Set(\"Content-Length\", fmt.Sprintf(\"%d\", fi.Size()))\n\th.w.Header().Set(\"Last-Modified\", fi.ModTime().Format(http.TimeFormat))\n\thttp.ServeFile(h.w, h.r, reqFile)\n}\n\nfunc serviceRPC(h serviceHandler, service string) {\n\tdefer h.r.Body.Close()\n\n\tif h.r.Header.Get(\"Content-Type\") != fmt.Sprintf(\"application/x-git-%s-request\", service) {\n\t\th.w.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\th.w.Header().Set(\"Content-Type\", fmt.Sprintf(\"application/x-git-%s-result\", service))\n\n\tvar (\n\t\treqBody = h.r.Body\n\t\terr     error\n\t)\n\n\t// Handle GZIP\n\tif h.r.Header.Get(\"Content-Encoding\") == \"gzip\" {\n\t\treqBody, err = gzip.NewReader(reqBody)\n\t\tif err != nil {\n\t\t\tlog.Error(\"HTTP.Get: fail to create gzip reader: %v\", err)\n\t\t\th.w.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t}\n\n\tvar stderr bytes.Buffer\n\tcmd := exec.Command(\"git\", service, \"--stateless-rpc\", h.dir)\n\tif service == \"receive-pack\" {\n\t\tcmd.Env = append(os.Environ(), db.ComposeHookEnvs(db.ComposeHookEnvsOptions{\n\t\t\tAuthUser:  h.authUser,\n\t\t\tOwnerName: h.ownerName,\n\t\t\tOwnerSalt: h.ownerSalt,\n\t\t\tRepoID:    h.repoID,\n\t\t\tRepoName:  h.repoName,\n\t\t\tRepoPath:  h.dir,\n\t\t})...)\n\t}\n\tcmd.Dir = h.dir\n\tcmd.Stdout = h.w\n\tcmd.Stderr = &stderr\n\tcmd.Stdin = reqBody\n\tif err = cmd.Run(); err != nil {\n\t\tlog.Error(\"HTTP.serviceRPC: fail to serve RPC '%s': %v - %s\", service, err, stderr.String())\n\t\th.w.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n}\n\nfunc serviceUploadPack(h serviceHandler) {\n\tserviceRPC(h, \"upload-pack\")\n}\n\nfunc serviceReceivePack(h serviceHandler) {\n\tserviceRPC(h, \"receive-pack\")\n}\n\nfunc getServiceType(r *http.Request) string {\n\tserviceType := r.FormValue(\"service\")\n\tif !strings.HasPrefix(serviceType, \"git-\") {\n\t\treturn \"\"\n\t}\n\treturn strings.TrimPrefix(serviceType, \"git-\")\n}\n\n// FIXME: use process module\nfunc gitCommand(dir string, args ...string) []byte {\n\tcmd := exec.Command(\"git\", args...)\n\tcmd.Dir = dir\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\tlog.Error(fmt.Sprintf(\"Git: %v - %s\", err, out))\n\t}\n\treturn out\n}\n\nfunc updateServerInfo(dir string) []byte {\n\treturn gitCommand(dir, \"update-server-info\")\n}\n\nfunc packetWrite(str string) []byte {\n\ts := strconv.FormatInt(int64(len(str)+4), 16)\n\tif len(s)%4 != 0 {\n\t\ts = strings.Repeat(\"0\", 4-len(s)%4) + s\n\t}\n\treturn []byte(s + str)\n}\n\nfunc getInfoRefs(h serviceHandler) {\n\th.setHeaderNoCache()\n\tservice := getServiceType(h.r)\n\tif service != \"upload-pack\" && service != \"receive-pack\" {\n\t\tupdateServerInfo(h.dir)\n\t\th.sendFile(\"text/plain; charset=utf-8\")\n\t\treturn\n\t}\n\n\trefs := gitCommand(h.dir, service, \"--stateless-rpc\", \"--advertise-refs\", \".\")\n\th.w.Header().Set(\"Content-Type\", fmt.Sprintf(\"application/x-git-%s-advertisement\", service))\n\th.w.WriteHeader(http.StatusOK)\n\t_, _ = h.w.Write(packetWrite(\"# service=git-\" + service + \"\\n\"))\n\t_, _ = h.w.Write([]byte(\"0000\"))\n\t_, _ = h.w.Write(refs)\n}\n\nfunc getTextFile(h serviceHandler) {\n\th.setHeaderNoCache()\n\th.sendFile(\"text/plain\")\n}\n\nfunc getInfoPacks(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"text/plain; charset=utf-8\")\n}\n\nfunc getLooseObject(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"application/x-git-loose-object\")\n}\n\nfunc getPackFile(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"application/x-git-packed-objects\")\n}\n\nfunc getIdxFile(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"application/x-git-packed-objects-toc\")\n}\n\nvar routes = []struct {\n\tre      *lazyregexp.Regexp\n\tmethod  string\n\thandler func(serviceHandler)\n}{\n\t{lazyregexp.New(\"(.*?)/git-upload-pack$\"), \"POST\", serviceUploadPack},\n\t{lazyregexp.New(\"(.*?)/git-receive-pack$\"), \"POST\", serviceReceivePack},\n\t{lazyregexp.New(\"(.*?)/info/refs$\"), \"GET\", getInfoRefs},\n\t{lazyregexp.New(\"(.*?)/HEAD$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/info/alternates$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/info/http-alternates$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/info/packs$\"), \"GET\", getInfoPacks},\n\t{lazyregexp.New(\"(.*?)/objects/info/[^/]*$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/[0-9a-f]{2}/[0-9a-f]{38}$\"), \"GET\", getLooseObject},\n\t{lazyregexp.New(\"(.*?)/objects/pack/pack-[0-9a-f]{40}\\\\.pack$\"), \"GET\", getPackFile},\n\t{lazyregexp.New(\"(.*?)/objects/pack/pack-[0-9a-f]{40}\\\\.idx$\"), \"GET\", getIdxFile},\n}\n\nfunc getGitRepoPath(dir string) (string, error) {\n\tif !strings.HasSuffix(dir, \".git\") {\n\t\tdir += \".git\"\n\t}\n\n\tfilename := filepath.Join(conf.Repository.Root, dir)\n\tif _, err := os.Stat(filename); os.IsNotExist(err) {\n\t\treturn \"\", err\n\t}\n\n\treturn filename, nil\n}\n\nfunc HTTP(c *HTTPContext) {\n\tfor _, route := range routes {\n\t\treqPath := strings.ToLower(c.Req.URL.Path)\n\t\tm := route.re.FindStringSubmatch(reqPath)\n\t\tif m == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\t// We perform check here because route matched in cmd/web.go is wider than needed,\n\t\t// but we only want to output this message only if user is really trying to access\n\t\t// Git HTTP endpoints.\n\t\tif conf.Repository.DisableHTTPGit {\n\t\t\tc.Error(http.StatusForbidden, \"Interacting with repositories by HTTP protocol is disabled\")\n\t\t\treturn\n\t\t}\n\n\t\tif route.method != c.Req.Method {\n\t\t\tc.NotFound()\n\t\t\treturn\n\t\t}\n\n\t\tfile := strings.TrimPrefix(reqPath, m[1]+\"/\")\n\t\tdir, err := getGitRepoPath(m[1])\n\t\tif err != nil {\n\t\t\tlog.Warn(\"HTTP.getGitRepoPath: %v\", err)\n\t\t\tc.NotFound()\n\t\t\treturn\n\t\t}\n\n\t\troute.handler(serviceHandler{\n\t\t\tw:    c.Resp,\n\t\t\tr:    c.Req.Request,\n\t\t\tdir:  dir,\n\t\t\tfile: file,\n\n\t\t\tauthUser:  c.AuthUser,\n\t\t\townerName: c.OwnerName,\n\t\t\townerSalt: c.OwnerSalt,\n\t\t\trepoID:    c.RepoID,\n\t\t\trepoName:  c.RepoName,\n\t\t})\n\t\treturn\n\t}\n\n\tc.NotFound()\n}\n"], "fixing_code": ["# Changelog\n\nAll notable changes to Gogs are documented in this file.\n\n## 0.13.0+dev (`main`)\n\n### Added\n\n- An unlisted option is added when create or migrate a repository. Unlisted repositories are public but not being listed for users without direct access in the UI. [#5733](https://github.com/gogs/gogs/issues/5733)\n- New configuration option `[git.timeout] DIFF` for customizing operation timeout of `git diff`. [#6315](https://github.com/gogs/gogs/issues/6315)\n- New configuration option `[server] SSH_SERVER_MACS` for setting list of accepted MACs for connections to builtin SSH server. [#6434](https://github.com/gogs/gogs/issues/6434)\n- Support specifying custom schema for PostgreSQL. [#6695](https://github.com/gogs/gogs/pull/6695)\n- Support rendering Mermaid diagrams in Markdown. [#6776](https://github.com/gogs/gogs/pull/6776)\n- New languages support: Mongolian. [#6510](https://github.com/gogs/gogs/pull/6510)\n\n### Changed\n\n- The default branch has been changed to `main`. [#6285](https://github.com/gogs/gogs/pull/6285)\n- MSSQL as database backend is deprecated, installation page no longer shows it as an option. Existing installations and manually craft configuration file continue to work. [#6295](https://github.com/gogs/gogs/pull/6295)\n- Use [Task](https://github.com/go-task/task) as the build tool. [#6297](https://github.com/gogs/gogs/pull/6297)\n- The required Go version to compile source code changed to 1.16.\n- Access tokens are now stored using their SHA256 hashes instead of raw values. [#7008](https://github.com/gogs/gogs/pull/7008)\n\n### Fixed\n\n- _Security:_ OS Command Injection in file editor. [#7000](https://github.com/gogs/gogs/issues/7000)\n- _Security:_ Sanitize `DisplayName` in repository issue list. [#7009](https://github.com/gogs/gogs/pull/7009)\n- _Security:_ Path Traversal in file editor on Windows. [#7001](https://github.com/gogs/gogs/issues/7001)\n- _Security:_ Path Traversal in Git HTTP endpoints. [#7002](https://github.com/gogs/gogs/issues/7002)\n- Unable to use LDAP authentication on ARM machines. [#6761](https://github.com/gogs/gogs/issues/6761)\n- Unable to init repository during creation on Windows. [#6967](https://github.com/gogs/gogs/issues/6967)\n- Mysterious panic on `Value not found for type *repo.HTTPContext`. [#6963](https://github.com/gogs/gogs/issues/6963)\n\n### Removed\n\n- \u26a0\ufe0f Migrations before 0.12 are removed, installations not on 0.12 should upgrade to it to run the migrations and then upgrade to 0.13.\n- Configuration section `[mailer]` is no longer used, please use `[email]`.\n- Configuration section `[service]` is no longer used, please use `[auth]`.\n- Configuration option `APP_NAME` is no longer used, please use `BRAND_NAME`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is no longer used, please use `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is no longer used, please use `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is no longer used, please use `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is no longer used, please use `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is no longer used, please use `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is no longer used, please use `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is no longer used, please use `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is no longer used, please use `[session] MAX_LIFE_TIME`.\n- Configuration option `[server] ROOT_URL` is no longer used, please use `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is no longer used, please use `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is no longer used, please use `[database] TYPE`.\n- Configuration option `[database] PASSWD` is no longer used, please use `[database] PASSWORD`.\n- Remove option to use Makefile as the build tool. [#6980](https://github.com/gogs/gogs/pull/6980)\n\n## 0.12.8\n\n### Changed\n\n- All users (including admins) need to use the configuration option `[security] LOCAL_NETWORK_ALLOWLIST` to allow repository migration and webhooks to be able to access local network addresses, which is a comma separated list of hostnames. [#6988](https://github.com/gogs/gogs/pull/6988)\n\n### Fixed\n\n- _Security:_ SSRF in webhook. [#6901](https://github.com/gogs/gogs/issues/6901)\n- _Security:_ XSS in cookies. [#6953](https://github.com/gogs/gogs/issues/6953)\n- _Security:_ OS Command Injection in file uploading. [#6968](https://github.com/gogs/gogs/issues/6968)\n- _Security:_ Remote Command Execution in file editing. [#6555](https://github.com/gogs/gogs/issues/6555)\n\n## 0.12.7\n\n### Fixed\n\n- _Security:_ Stored XSS in issues. [#6919](https://github.com/gogs/gogs/issues/6919)\n- Invalid character in `Access-Control-Allow-Credentials` response header. [#4983](https://github.com/gogs/gogs/issues/4983)\n- Mysterious `ssh: overflow reading version string` errors from builtin SSH server. [#6882](https://github.com/gogs/gogs/issues/6882)\n\n## 0.12.6\n\n### Fixed\n\n- _Security:_ Remote command execution in file uploading. [#6833](https://github.com/gogs/gogs/issues/6833)\n- _Regression:_ Unable to migrate repository from other local Git hosting. Added a new configuration option `[security] LOCAL_NETWORK_ALLOWLIST`, which is a comma separated list of hostnames that are explicitly allowed to be accessed within the local network. [#6841](https://github.com/gogs/gogs/issues/6841)\n- Slow start of Docker containers using NAS devices. [#6554](https://github.com/gogs/gogs/issues/6554)\n\n## 0.12.5\n\n### Fixed\n\n- _Security:_ Potential SSRF in repository migration. [#6754](https://github.com/gogs/gogs/issues/6754)\n- _Security:_ Improper PAM authorization handling. [#6810](https://github.com/gogs/gogs/issues/6810)\n\n## 0.12.4\n\n### Fixed\n\n- _Security:_ Potential SSRF attack by CRLF injection via repository migration. [#6413](https://github.com/gogs/gogs/issues/6413)\n- _Regression:_ Fixed smart links for issues stops rendering. [#6506](https://github.com/gogs/gogs/issues/6506)\n- Added `X-Frame-Options` header to prevent Clickjacking. [#6409](https://github.com/gogs/gogs/issues/6409)\n\n## 0.12.3\n\n### Fixed\n\n- _Regression:_ When running Gogs on Windows, push commits no longer fail on a daily basis with the error \"pre-receive hook declined\". [#6316](https://github.com/gogs/gogs/issues/6316)\n- Auto-linked commit SHAs now have correct links. [#6300](https://github.com/gogs/gogs/issues/6300)\n- Git LFS client (with version >= 2.5.0) wasn't able to upload files with known format (e.g. PNG, JPEG), and the server is expecting the HTTP Header `Content-Type` to be `application/octet-stream`. The server now tells the LFS client to always use `Content-Type: application/octet-stream` when upload files.\n\n## 0.12.2\n\n### Fixed\n\n- _Regression:_ Pages are correctly rendered when requesting `?go-get=1` for subdirectories. [#6314](https://github.com/gogs/gogs/issues/6314)\n- _Regression:_ Submodule with a relative path is linked correctly. [#6319](https://github.com/gogs/gogs/issues/6319)\n- Backup can be processed when `--target` is specified on Windows. [#6339](https://github.com/gogs/gogs/issues/6339)\n- Commit message contains keywords look like an issue reference no longer fails the push entirely. [#6289](https://github.com/gogs/gogs/issues/6289)\n\n## 0.12.1\n\n### Fixed\n\n- The `updated_at` field is now correctly updated when updates an issue. [#6209](https://github.com/gogs/gogs/issues/6209)\n- Fixed a regression which created `login_source.cfg` column to have `VARCHAR(255)` instead of `TEXT` in MySQL. [#6280](https://github.com/gogs/gogs/issues/6280)\n\n## 0.12.0\n\n### Added\n\n- Support for Git LFS, you can read documentation for both [user](https://github.com/gogs/gogs/blob/main/docs/user/lfs.md) and [admin](https://github.com/gogs/gogs/blob/main/docs/admin/lfs.md). [#1322](https://github.com/gogs/gogs/issues/1322)\n- Allow admin to remove observers from the repository. [#5803](https://github.com/gogs/gogs/pull/5803)\n- Use `Last-Modified` HTTP header for raw files. [#5811](https://github.com/gogs/gogs/issues/5811)\n- Support syntax highlighting for SAS code files (i.e. `.r`, `.sas`, `.tex`, `.yaml`). [#5856](https://github.com/gogs/gogs/pull/5856)\n- Able to fill in pull request title with a template. [#5901](https://github.com/gogs/gogs/pull/5901)\n- Able to override static files under `public/` directory, please refer to [documentation](https://gogs.io/docs/features/custom_template) for usage. [#5920](https://github.com/gogs/gogs/pull/5920)\n- New API endpoint `GET /admin/teams/:teamid/members` to list members of a team. [#5877](https://github.com/gogs/gogs/issues/5877)\n- Support backup with retention policy for Docker deployments. [#6140](https://github.com/gogs/gogs/pull/6140)\n\n### Changed\n\n- The organization profile page has changed to display at most 12 members. [#5506](https://github.com/gogs/gogs/issues/5506)\n- The required Go version to compile source code changed to 1.14.\n- All assets are now embedded into binary and served from memory by default. Set `[server] LOAD_ASSETS_FROM_DISK = true` to load them from disk. [#5920](https://github.com/gogs/gogs/pull/5920)\n- Application and Go versions are removed from page footer and only show in the admin dashboard.\n- Build tag for running as Windows Service has been changed from `miniwinsvc` to `minwinsvc`.\n- Configuration option `APP_NAME` is deprecated and will end support in 0.13.0, please start using `BRAND_NAME`.\n- Configuration option `[server] ROOT_URL` is deprecated and will end support in 0.13.0, please start using `[server] EXTERNAL_URL`.\n- Configuration option `[server] LANDING_PAGE` is deprecated and will end support in 0.13.0, please start using `[server] LANDING_URL`.\n- Configuration option `[database] DB_TYPE` is deprecated and will end support in 0.13.0, please start using `[database] TYPE`.\n- Configuration option `[database] PASSWD` is deprecated and will end support in 0.13.0, please start using `[database] PASSWORD`.\n- Configuration option `[security] REVERSE_PROXY_AUTHENTICATION_USER` is deprecated and will end support in 0.13.0, please start using `[auth] REVERSE_PROXY_AUTHENTICATION_HEADER`.\n- Configuration section `[mailer]` is deprecated and will end support in 0.13.0, please start using `[email]`.\n- Configuration section `[service]` is deprecated and will end support in 0.13.0, please start using `[auth]`.\n- Configuration option `[auth] ACTIVE_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] ACTIVATE_CODE_LIVES`.\n- Configuration option `[auth] RESET_PASSWD_CODE_LIVE_MINUTES` is deprecated and will end support in 0.13.0, please start using `[auth] RESET_PASSWORD_CODE_LIVES`.\n- Configuration option `[auth] REGISTER_EMAIL_CONFIRM` is deprecated and will end support in 0.13.0, please start using `[auth] REQUIRE_EMAIL_CONFIRMATION`.\n- Configuration option `[auth] ENABLE_CAPTCHA` is deprecated and will end support in 0.13.0, please start using `[auth] ENABLE_REGISTRATION_CAPTCHA`.\n- Configuration option `[auth] ENABLE_NOTIFY_MAIL` is deprecated and will end support in 0.13.0, please start using `[user] ENABLE_EMAIL_NOTIFICATION`.\n- Configuration option `[session] GC_INTERVAL_TIME` is deprecated and will end support in 0.13.0, please start using `[session] GC_INTERVAL`.\n- Configuration option `[session] SESSION_LIFE_TIME` is deprecated and will end support in 0.13.0, please start using `[session] MAX_LIFE_TIME`.\n- The name `-` is reserved and cannot be used for users or organizations.\n\n### Fixed\n\n- [Security] Potential open redirection with i18n.\n- [Security] Potential ability to delete files outside a repository.\n- [Security] Potential ability to set primary email on others' behalf from their verified emails.\n- [Security] Potential XSS attack via `.ipynb`. [#5170](https://github.com/gogs/gogs/issues/5170)\n- [Security] Potential SSRF attack via webhooks. [#5366](https://github.com/gogs/gogs/issues/5366)\n- [Security] Potential CSRF attack in admin panel. [#5367](https://github.com/gogs/gogs/issues/5367)\n- [Security] Potential stored XSS attack in some browsers. [#5397](https://github.com/gogs/gogs/issues/5397)\n- [Security] Potential RCE on mirror repositories. [#5767](https://github.com/gogs/gogs/issues/5767)\n- [Security] Potential XSS attack with raw markdown API. [#5907](https://github.com/gogs/gogs/pull/5907)\n- File both modified and renamed within a commit treated as separate files. [#5056](https://github.com/gogs/gogs/issues/5056)\n- Unable to restore the database backup to MySQL 8.0 with syntax error. [#5602](https://github.com/gogs/gogs/issues/5602)\n- Open/close milestone redirects to a 404 page. [#5677](https://github.com/gogs/gogs/issues/5677)\n- Disallow multiple tokens with same name. [#5587](https://github.com/gogs/gogs/issues/5587) [#5820](https://github.com/gogs/gogs/pull/5820)\n- Enable Federated Avatar Lookup could cause server to crash. [#5848](https://github.com/gogs/gogs/issues/5848)\n- Private repositories are hidden in the organization's view. [#5869](https://github.com/gogs/gogs/issues/5869)\n- Users have access to base repository cannot view commits in forks. [#5878](https://github.com/gogs/gogs/issues/5878)\n- Server error when changing email address in user settings page. [#5899](https://github.com/gogs/gogs/issues/5899)\n- Fall back to use RFC 3339 as time layout when misconfigured. [#6098](https://github.com/gogs/gogs/issues/6098)\n- Unable to update team with server error. [#6185](https://github.com/gogs/gogs/issues/6185)\n- Webhooks are not fired after push when `[service] REQUIRE_SIGNIN_VIEW = true`.\n- Files with identical content are randomly displayed one of them.\n\n### Removed\n\n- Configuration option `[other] SHOW_FOOTER_VERSION`\n- Configuration option `[server] STATIC_ROOT_PATH`\n- Configuration option `[repository] MIRROR_QUEUE_LENGTH`\n- Configuration option `[repository] PULL_REQUEST_QUEUE_LENGTH`\n- Configuration option `[session] ENABLE_SET_COOKIE`\n- Configuration option `[release.attachment] PATH`\n- Configuration option `[webhook] QUEUE_LENGTH`\n- Build tag `sqlite`, which means CGO is now required.\n\n---\n\n**Older change logs can be found on [GitHub](https://github.com/gogs/gogs/releases?after=v0.12.0).**\n", "// Copyright 2020 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage pathutil\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestClean(t *testing.T) {\n\ttests := []struct {\n\t\tpath    string\n\t\twantVal string\n\t}{\n\t\t{\n\t\t\tpath:    \"../../../readme.txt\",\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"a/../../../readme.txt\",\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"/../a/b/../c/../readme.txt\",\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"../../objects/info/..\",\n\t\t\twantVal: \"objects\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"/a/readme.txt\",\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    \"/\",\n\t\t\twantVal: \"\",\n\t\t},\n\n\t\t{\n\t\t\tpath:    \"/a/b/c/readme.txt\",\n\t\t\twantVal: \"a/b/c/readme.txt\",\n\t\t},\n\n\t\t// Windows-specific\n\t\t{\n\t\t\tpath:    `..\\..\\..\\readme.txt`,\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `a\\..\\..\\..\\readme.txt`,\n\t\t\twantVal: \"readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `\\..\\a\\b\\..\\c\\..\\readme.txt`,\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `\\a\\readme.txt`,\n\t\t\twantVal: \"a/readme.txt\",\n\t\t},\n\t\t{\n\t\t\tpath:    `..\\..\\..\\../README.md`,\n\t\t\twantVal: \"README.md\",\n\t\t},\n\t\t{\n\t\t\tpath:    `\\`,\n\t\t\twantVal: \"\",\n\t\t},\n\n\t\t{\n\t\t\tpath:    `\\a\\b\\c\\readme.txt`,\n\t\t\twantVal: `a/b/c/readme.txt`,\n\t\t},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(test.path, func(t *testing.T) {\n\t\t\tassert.Equal(t, test.wantVal, Clean(test.path))\n\t\t})\n\t}\n}\n", "// Copyright 2017 The Gogs Authors. All rights reserved.\n// Use of this source code is governed by a MIT-style\n// license that can be found in the LICENSE file.\n\npackage repo\n\nimport (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gopkg.in/macaron.v1\"\n\tlog \"unknwon.dev/clog/v2\"\n\n\t\"gogs.io/gogs/internal/auth\"\n\t\"gogs.io/gogs/internal/conf\"\n\t\"gogs.io/gogs/internal/db\"\n\t\"gogs.io/gogs/internal/lazyregexp\"\n\t\"gogs.io/gogs/internal/pathutil\"\n\t\"gogs.io/gogs/internal/tool\"\n)\n\ntype HTTPContext struct {\n\t*macaron.Context\n\tOwnerName string\n\tOwnerSalt string\n\tRepoID    int64\n\tRepoName  string\n\tAuthUser  *db.User\n}\n\n// askCredentials responses HTTP header and status which informs client to provide credentials.\nfunc askCredentials(c *macaron.Context, status int, text string) {\n\tc.Header().Set(\"WWW-Authenticate\", \"Basic realm=\\\".\\\"\")\n\tc.Error(status, text)\n}\n\nfunc HTTPContexter() macaron.Handler {\n\treturn func(c *macaron.Context) {\n\t\tif len(conf.HTTP.AccessControlAllowOrigin) > 0 {\n\t\t\t// Set CORS headers for browser-based git clients\n\t\t\tc.Header().Set(\"Access-Control-Allow-Origin\", conf.HTTP.AccessControlAllowOrigin)\n\t\t\tc.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization, User-Agent\")\n\n\t\t\t// Handle preflight OPTIONS request\n\t\t\tif c.Req.Method == \"OPTIONS\" {\n\t\t\t\tc.Status(http.StatusOK)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\townerName := c.Params(\":username\")\n\t\trepoName := strings.TrimSuffix(c.Params(\":reponame\"), \".git\")\n\t\trepoName = strings.TrimSuffix(repoName, \".wiki\")\n\n\t\tisPull := c.Query(\"service\") == \"git-upload-pack\" ||\n\t\t\tstrings.HasSuffix(c.Req.URL.Path, \"git-upload-pack\") ||\n\t\t\tc.Req.Method == \"GET\"\n\n\t\towner, err := db.Users.GetByUsername(ownerName)\n\t\tif err != nil {\n\t\t\tif db.IsErrUserNotExist(err) {\n\t\t\t\tc.Status(http.StatusNotFound)\n\t\t\t} else {\n\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\tlog.Error(\"Failed to get user [name: %s]: %v\", ownerName, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\trepo, err := db.Repos.GetByName(owner.ID, repoName)\n\t\tif err != nil {\n\t\t\tif db.IsErrRepoNotExist(err) {\n\t\t\t\tc.Status(http.StatusNotFound)\n\t\t\t} else {\n\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\tlog.Error(\"Failed to get repository [owner_id: %d, name: %s]: %v\", owner.ID, repoName, err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t// Authentication is not required for pulling from public repositories.\n\t\tif isPull && !repo.IsPrivate && !conf.Auth.RequireSigninView {\n\t\t\tc.Map(&HTTPContext{\n\t\t\t\tContext: c,\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// In case user requested a wrong URL and not intended to access Git objects.\n\t\taction := c.Params(\"*\")\n\t\tif !strings.Contains(action, \"git-\") &&\n\t\t\t!strings.Contains(action, \"info/\") &&\n\t\t\t!strings.Contains(action, \"HEAD\") &&\n\t\t\t!strings.Contains(action, \"objects/\") {\n\t\t\tc.Error(http.StatusBadRequest, fmt.Sprintf(\"Unrecognized action %q\", action))\n\t\t\treturn\n\t\t}\n\n\t\t// Handle HTTP Basic Authentication\n\t\tauthHead := c.Req.Header.Get(\"Authorization\")\n\t\tif authHead == \"\" {\n\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\treturn\n\t\t}\n\n\t\tauths := strings.Fields(authHead)\n\t\tif len(auths) != 2 || auths[0] != \"Basic\" {\n\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\treturn\n\t\t}\n\t\tauthUsername, authPassword, err := tool.BasicAuthDecode(auths[1])\n\t\tif err != nil {\n\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\treturn\n\t\t}\n\n\t\tauthUser, err := db.Users.Authenticate(authUsername, authPassword, -1)\n\t\tif err != nil && !auth.IsErrBadCredentials(err) {\n\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\tlog.Error(\"Failed to authenticate user [name: %s]: %v\", authUsername, err)\n\t\t\treturn\n\t\t}\n\n\t\t// If username and password combination failed, try again using username as a token.\n\t\tif authUser == nil {\n\t\t\ttoken, err := db.AccessTokens.GetBySHA1(c.Req.Context(), authUsername)\n\t\t\tif err != nil {\n\t\t\t\tif db.IsErrAccessTokenNotExist(err) {\n\t\t\t\t\taskCredentials(c, http.StatusUnauthorized, \"\")\n\t\t\t\t} else {\n\t\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\t\tlog.Error(\"Failed to get access token [sha: %s]: %v\", authUsername, err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif err = db.AccessTokens.Save(c.Req.Context(), token); err != nil {\n\t\t\t\tlog.Error(\"Failed to update access token: %v\", err)\n\t\t\t}\n\n\t\t\tauthUser, err = db.Users.GetByID(token.UserID)\n\t\t\tif err != nil {\n\t\t\t\t// Once we found token, we're supposed to find its related user,\n\t\t\t\t// thus any error is unexpected.\n\t\t\t\tc.Status(http.StatusInternalServerError)\n\t\t\t\tlog.Error(\"Failed to get user [id: %d]: %v\", token.UserID, err)\n\t\t\t\treturn\n\t\t\t}\n\t\t} else if authUser.IsEnabledTwoFactor() {\n\t\t\taskCredentials(c, http.StatusUnauthorized, `User with two-factor authentication enabled cannot perform HTTP/HTTPS operations via plain username and password\nPlease create and use personal access token on user settings page`)\n\t\t\treturn\n\t\t}\n\n\t\tlog.Trace(\"[Git] Authenticated user: %s\", authUser.Name)\n\n\t\tmode := db.AccessModeWrite\n\t\tif isPull {\n\t\t\tmode = db.AccessModeRead\n\t\t}\n\t\tif !db.Perms.Authorize(authUser.ID, repo.ID, mode,\n\t\t\tdb.AccessModeOptions{\n\t\t\t\tOwnerID: repo.OwnerID,\n\t\t\t\tPrivate: repo.IsPrivate,\n\t\t\t},\n\t\t) {\n\t\t\taskCredentials(c, http.StatusForbidden, \"User permission denied\")\n\t\t\treturn\n\t\t}\n\n\t\tif !isPull && repo.IsMirror {\n\t\t\tc.Error(http.StatusForbidden, \"Mirror repository is read-only\")\n\t\t\treturn\n\t\t}\n\n\t\tc.Map(&HTTPContext{\n\t\t\tContext:   c,\n\t\t\tOwnerName: ownerName,\n\t\t\tOwnerSalt: owner.Salt,\n\t\t\tRepoID:    repo.ID,\n\t\t\tRepoName:  repoName,\n\t\t\tAuthUser:  authUser,\n\t\t})\n\t}\n}\n\ntype serviceHandler struct {\n\tw    http.ResponseWriter\n\tr    *http.Request\n\tdir  string\n\tfile string\n\n\tauthUser  *db.User\n\townerName string\n\townerSalt string\n\trepoID    int64\n\trepoName  string\n}\n\nfunc (h *serviceHandler) setHeaderNoCache() {\n\th.w.Header().Set(\"Expires\", \"Fri, 01 Jan 1980 00:00:00 GMT\")\n\th.w.Header().Set(\"Pragma\", \"no-cache\")\n\th.w.Header().Set(\"Cache-Control\", \"no-cache, max-age=0, must-revalidate\")\n}\n\nfunc (h *serviceHandler) setHeaderCacheForever() {\n\tnow := time.Now().Unix()\n\texpires := now + 31536000\n\th.w.Header().Set(\"Date\", fmt.Sprintf(\"%d\", now))\n\th.w.Header().Set(\"Expires\", fmt.Sprintf(\"%d\", expires))\n\th.w.Header().Set(\"Cache-Control\", \"public, max-age=31536000\")\n}\n\nfunc (h *serviceHandler) sendFile(contentType string) {\n\treqFile := path.Join(h.dir, h.file)\n\tfi, err := os.Stat(reqFile)\n\tif os.IsNotExist(err) {\n\t\th.w.WriteHeader(http.StatusNotFound)\n\t\treturn\n\t}\n\n\th.w.Header().Set(\"Content-Type\", contentType)\n\th.w.Header().Set(\"Content-Length\", fmt.Sprintf(\"%d\", fi.Size()))\n\th.w.Header().Set(\"Last-Modified\", fi.ModTime().Format(http.TimeFormat))\n\thttp.ServeFile(h.w, h.r, reqFile)\n}\n\nfunc serviceRPC(h serviceHandler, service string) {\n\tdefer h.r.Body.Close()\n\n\tif h.r.Header.Get(\"Content-Type\") != fmt.Sprintf(\"application/x-git-%s-request\", service) {\n\t\th.w.WriteHeader(http.StatusUnauthorized)\n\t\treturn\n\t}\n\th.w.Header().Set(\"Content-Type\", fmt.Sprintf(\"application/x-git-%s-result\", service))\n\n\tvar (\n\t\treqBody = h.r.Body\n\t\terr     error\n\t)\n\n\t// Handle GZIP\n\tif h.r.Header.Get(\"Content-Encoding\") == \"gzip\" {\n\t\treqBody, err = gzip.NewReader(reqBody)\n\t\tif err != nil {\n\t\t\tlog.Error(\"HTTP.Get: fail to create gzip reader: %v\", err)\n\t\t\th.w.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t}\n\n\tvar stderr bytes.Buffer\n\tcmd := exec.Command(\"git\", service, \"--stateless-rpc\", h.dir)\n\tif service == \"receive-pack\" {\n\t\tcmd.Env = append(os.Environ(), db.ComposeHookEnvs(db.ComposeHookEnvsOptions{\n\t\t\tAuthUser:  h.authUser,\n\t\t\tOwnerName: h.ownerName,\n\t\t\tOwnerSalt: h.ownerSalt,\n\t\t\tRepoID:    h.repoID,\n\t\t\tRepoName:  h.repoName,\n\t\t\tRepoPath:  h.dir,\n\t\t})...)\n\t}\n\tcmd.Dir = h.dir\n\tcmd.Stdout = h.w\n\tcmd.Stderr = &stderr\n\tcmd.Stdin = reqBody\n\tif err = cmd.Run(); err != nil {\n\t\tlog.Error(\"HTTP.serviceRPC: fail to serve RPC '%s': %v - %s\", service, err, stderr.String())\n\t\th.w.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n}\n\nfunc serviceUploadPack(h serviceHandler) {\n\tserviceRPC(h, \"upload-pack\")\n}\n\nfunc serviceReceivePack(h serviceHandler) {\n\tserviceRPC(h, \"receive-pack\")\n}\n\nfunc getServiceType(r *http.Request) string {\n\tserviceType := r.FormValue(\"service\")\n\tif !strings.HasPrefix(serviceType, \"git-\") {\n\t\treturn \"\"\n\t}\n\treturn strings.TrimPrefix(serviceType, \"git-\")\n}\n\n// FIXME: use process module\nfunc gitCommand(dir string, args ...string) []byte {\n\tcmd := exec.Command(\"git\", args...)\n\tcmd.Dir = dir\n\tout, err := cmd.Output()\n\tif err != nil {\n\t\tlog.Error(fmt.Sprintf(\"Git: %v - %s\", err, out))\n\t}\n\treturn out\n}\n\nfunc updateServerInfo(dir string) []byte {\n\treturn gitCommand(dir, \"update-server-info\")\n}\n\nfunc packetWrite(str string) []byte {\n\ts := strconv.FormatInt(int64(len(str)+4), 16)\n\tif len(s)%4 != 0 {\n\t\ts = strings.Repeat(\"0\", 4-len(s)%4) + s\n\t}\n\treturn []byte(s + str)\n}\n\nfunc getInfoRefs(h serviceHandler) {\n\th.setHeaderNoCache()\n\tservice := getServiceType(h.r)\n\tif service != \"upload-pack\" && service != \"receive-pack\" {\n\t\tupdateServerInfo(h.dir)\n\t\th.sendFile(\"text/plain; charset=utf-8\")\n\t\treturn\n\t}\n\n\trefs := gitCommand(h.dir, service, \"--stateless-rpc\", \"--advertise-refs\", \".\")\n\th.w.Header().Set(\"Content-Type\", fmt.Sprintf(\"application/x-git-%s-advertisement\", service))\n\th.w.WriteHeader(http.StatusOK)\n\t_, _ = h.w.Write(packetWrite(\"# service=git-\" + service + \"\\n\"))\n\t_, _ = h.w.Write([]byte(\"0000\"))\n\t_, _ = h.w.Write(refs)\n}\n\nfunc getTextFile(h serviceHandler) {\n\th.setHeaderNoCache()\n\th.sendFile(\"text/plain\")\n}\n\nfunc getInfoPacks(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"text/plain; charset=utf-8\")\n}\n\nfunc getLooseObject(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"application/x-git-loose-object\")\n}\n\nfunc getPackFile(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"application/x-git-packed-objects\")\n}\n\nfunc getIdxFile(h serviceHandler) {\n\th.setHeaderCacheForever()\n\th.sendFile(\"application/x-git-packed-objects-toc\")\n}\n\nvar routes = []struct {\n\tre      *lazyregexp.Regexp\n\tmethod  string\n\thandler func(serviceHandler)\n}{\n\t{lazyregexp.New(\"(.*?)/git-upload-pack$\"), \"POST\", serviceUploadPack},\n\t{lazyregexp.New(\"(.*?)/git-receive-pack$\"), \"POST\", serviceReceivePack},\n\t{lazyregexp.New(\"(.*?)/info/refs$\"), \"GET\", getInfoRefs},\n\t{lazyregexp.New(\"(.*?)/HEAD$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/info/alternates$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/info/http-alternates$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/info/packs$\"), \"GET\", getInfoPacks},\n\t{lazyregexp.New(\"(.*?)/objects/info/[^/]*$\"), \"GET\", getTextFile},\n\t{lazyregexp.New(\"(.*?)/objects/[0-9a-f]{2}/[0-9a-f]{38}$\"), \"GET\", getLooseObject},\n\t{lazyregexp.New(\"(.*?)/objects/pack/pack-[0-9a-f]{40}\\\\.pack$\"), \"GET\", getPackFile},\n\t{lazyregexp.New(\"(.*?)/objects/pack/pack-[0-9a-f]{40}\\\\.idx$\"), \"GET\", getIdxFile},\n}\n\nfunc getGitRepoPath(dir string) (string, error) {\n\tif !strings.HasSuffix(dir, \".git\") {\n\t\tdir += \".git\"\n\t}\n\n\tfilename := filepath.Join(conf.Repository.Root, dir)\n\tif _, err := os.Stat(filename); os.IsNotExist(err) {\n\t\treturn \"\", err\n\t}\n\n\treturn filename, nil\n}\n\nfunc HTTP(c *HTTPContext) {\n\tfor _, route := range routes {\n\t\treqPath := strings.ToLower(c.Req.URL.Path)\n\t\tm := route.re.FindStringSubmatch(reqPath)\n\t\tif m == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\t// We perform check here because route matched in cmd/web.go is wider than needed,\n\t\t// but we only want to output this message only if user is really trying to access\n\t\t// Git HTTP endpoints.\n\t\tif conf.Repository.DisableHTTPGit {\n\t\t\tc.Error(http.StatusForbidden, \"Interacting with repositories by HTTP protocol is disabled\")\n\t\t\treturn\n\t\t}\n\n\t\tif route.method != c.Req.Method {\n\t\t\tc.Error(http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\n\t\tcleaned := pathutil.Clean(m[1])\n\t\tif m[1] != \"/\"+cleaned {\n\t\t\tc.Error(http.StatusBadRequest, \"Request path contains suspicious characters\")\n\t\t\treturn\n\t\t}\n\n\t\tfile := strings.TrimPrefix(reqPath, cleaned)\n\t\tdir, err := getGitRepoPath(cleaned)\n\t\tif err != nil {\n\t\t\tlog.Warn(\"HTTP.getGitRepoPath: %v\", err)\n\t\t\tc.Error(http.StatusNotFound)\n\t\t\treturn\n\t\t}\n\n\t\troute.handler(serviceHandler{\n\t\t\tw:    c.Resp,\n\t\t\tr:    c.Req.Request,\n\t\t\tdir:  dir,\n\t\t\tfile: file,\n\n\t\t\tauthUser:  c.AuthUser,\n\t\t\townerName: c.OwnerName,\n\t\t\townerSalt: c.OwnerSalt,\n\t\t\trepoID:    c.RepoID,\n\t\t\trepoName:  c.RepoName,\n\t\t})\n\t\treturn\n\t}\n\n\tc.Error(http.StatusNotFound)\n}\n"], "filenames": ["CHANGELOG.md", "internal/pathutil/pathutil_test.go", "internal/route/repo/http.go"], "buggy_code_start_loc": [28, 28, 26], "buggy_code_end_loc": [28, 28, 440], "fixing_code_start_loc": [29, 29, 27], "fixing_code_end_loc": [30, 33, 447], "type": "CWE-22", "message": "Path Traversal in GitHub repository gogs/gogs prior to 0.12.9.", "other": {"cve": {"id": "CVE-2022-1993", "sourceIdentifier": "security@huntr.dev", "published": "2022-06-09T17:15:08.733", "lastModified": "2022-06-15T16:41:44.443", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Path Traversal in GitHub repository gogs/gogs prior to 0.12.9."}, {"lang": "es", "value": "Un Salto de Ruta en el repositorio de GitHub gogs/gogs versiones anteriores a 0.12.9"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gogs:gogs:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.12.9", "matchCriteriaId": "4DAD0C2A-2575-4160-90B2-D024A0A41B0A"}]}]}], "references": [{"url": "https://github.com/gogs/gogs/commit/9bf748b6c4c9a17d3aa77f6b9abcfae65451febf", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/22f9c074-cf60-4c67-b5c4-72fdf312609d", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gogs/gogs/commit/9bf748b6c4c9a17d3aa77f6b9abcfae65451febf"}}