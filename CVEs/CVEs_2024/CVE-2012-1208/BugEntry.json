{"buggy_code": ["<?php\n\n/*\n * This file is part of Fork CMS.\n *\n * For the full copyright and license information, please view the license\n * file that was distributed with this source code.\n */\n\n/**\n * This class implements a lot of functionality that can be extended by a specific action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseAction\n{\n\t/**\n\t * The current action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $action;\n\n\t/**\n\t * The parameters (urldecoded)\n\t *\n\t * @var\tarray\n\t */\n\tprotected $parameters = array();\n\n\t/**\n\t * The header object\n\t *\n\t * @var\tBackendHeader\n\t */\n\tprotected $header;\n\n\t/**\n\t * The current module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * A reference to the current template\n\t *\n\t * @var\tBackendTemplate\n\t */\n\tpublic $tpl;\n\n\t/**\n\t * A reference to the URL-instance\n\t *\n\t * @var\tBackendURL\n\t */\n\tpublic $URL;\n\n\t/**\n\t * The constructor will set some properties. It populates the parameter array with urldecoded\n\t * values for easy-use.\n\t */\n\tpublic function __construct()\n\t{\n\t\t// get objects from the reference so they are accessable from the action-object\n\t\t$this->tpl = Spoon::get('template');\n\t\t$this->URL = Spoon::get('url');\n\t\t$this->header = Spoon::get('header');\n\n\t\t// store the current module and action (we grab them from the URL)\n\t\t$this->setModule($this->URL->getModule());\n\t\t$this->setAction($this->URL->getAction());\n\n\t\t// populate the parameter array, we loop GET and urldecode the values for usage later on\n\t\tforeach((array) $_GET as $key => $value) $this->parameters[$key] = $value;\n\t}\n\n\t/**\n\t * Display, this wil output the template to the browser\n\t * If no template is specified we build the path form the current module and action\n\t *\n\t * @param string[optional] $template The template to use, if not provided it will be based on the action.\n\t */\n\tpublic function display($template = null)\n\t{\n\t\t// parse header\n\t\t$this->header->parse();\n\n\t\t/*\n\t\t * If no template is specified, we have to build the path ourself. The default template is\n\t\t * based on the name of the current action\n\t\t */\n\t\tif($template === null)\n\t\t{\n\t\t\t$template = BACKEND_MODULE_PATH . '/layout/templates/' . $this->URL->getAction() . '.tpl';\n\t\t}\n\n\t\t$this->tpl->display($template);\n\t}\n\n\t/**\n\t * Execute the action\n\t */\n\tpublic function execute()\n\t{\n\t\t// add jquery, we will need this in every action, so add it globally\n\t\t$this->header->addJS('jquery/jquery.js', 'core', false);\n\t\t$this->header->addJS('jquery/jquery.ui.js', 'core', false);\n\t\t$this->header->addJS('jquery/jquery.ui.dialog.patch.js', 'core');\n\t\t$this->header->addJS('jquery/jquery.tools.js', 'core', false);\n\t\t$this->header->addJS('jquery/jquery.backend.js', 'core');\n\n\t\t// add items that always need to be loaded\n\t\t$this->header->addJS('utils.js', 'core');\n\t\t$this->header->addJS('backend.js', 'core', false, true);\n\n\t\t// add module js\n\t\tif(SpoonFile::exists(BACKEND_MODULE_PATH . '/js/' . $this->getModule() . '.js'))\n\t\t{\n\t\t\t$this->header->addJS($this->getModule() . '.js', null, false, true);\n\t\t}\n\n\t\t// add action js\n\t\tif(SpoonFile::exists(BACKEND_MODULE_PATH . '/js/' . $this->getAction() . '.js'))\n\t\t{\n\t\t\t$this->header->addJS($this->getAction() . '.js', null, false, true);\n\t\t}\n\n\t\t// add core css files\n\t\t$this->header->addCSS('reset.css', 'core');\n\t\t$this->header->addCSS('jquery_ui/fork/jquery_ui.css', 'core', false, false);\n\t\t$this->header->addCSS('screen.css', 'core');\n\t\t$this->header->addCSS('debug.css', 'core');\n\n\t\t// add module specific css\n\t\tif(SpoonFile::exists(BACKEND_MODULE_PATH . '/layout/css/' . $this->getModule() . '.css'))\n\t\t{\n\t\t\t$this->header->addCSS($this->getModule() . '.css');\n\t\t}\n\n\t\t// store var so we don't have to call this function twice\n\t\t$var = $this->getParameter('var', 'array');\n\n\t\t// is there a report to show?\n\t\tif($this->getParameter('report') !== null)\n\t\t{\n\t\t\t// show the report\n\t\t\t$this->tpl->assign('report', true);\n\n\t\t\t// camelcase the string\n\t\t\t$messageName = SpoonFilter::toCamelCase($this->getParameter('report'), '-');\n\n\t\t\t// if we have data to use it will be passed as the var parameter\n\t\t\tif(!empty($var)) $this->tpl->assign('reportMessage', vsprintf(BL::msg($messageName), $var));\n\t\t\telse $this->tpl->assign('reportMessage', BL::msg($messageName));\n\n\t\t\t// highlight an element with the given id if needed\n\t\t\tif($this->getParameter('highlight')) $this->tpl->assign('highlight', $this->getParameter('highlight'));\n\t\t}\n\n\t\t// is there an error to show?\n\t\tif($this->getParameter('error') !== null)\n\t\t{\n\t\t\t// camelcase the string\n\t\t\t$errorName = SpoonFilter::toCamelCase($this->getParameter('error'), '-');\n\n\t\t\t// if we have data to use it will be passed as the var parameter\n\t\t\tif(!empty($var)) $this->tpl->assign('errorMessage', vsprintf(BL::err($errorName), $var));\n\t\t\telse $this->tpl->assign('errorMessage', BL::err($errorName));\n\t\t}\n\t}\n\n\t/**\n\t * Get the action\n\t *\n\t * @return string\n\t */\n\tpublic function getAction()\n\t{\n\t\treturn $this->action;\n\t}\n\n\t/**\n\t * Get the module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Get a parameter for a given key\n\t * The function will return null if the key is not available\n\t * By default we will cast the return value into a string, if you want something else specify it by passing the wanted type.\n\t *\n\t * @param string $key The name of the parameter.\n\t * @param string[optional] $type The return-type, possible values are: bool, boolean, int, integer, float, double, string, array.\n\t * @param mixed[optional] $defaultValue The value that should be returned if the key is not available.\n\t * @return mixed\n\t */\n\tpublic function getParameter($key, $type = 'string', $defaultValue = null)\n\t{\n\t\t$key = (string) $key;\n\n\t\t// parameter exists\n\t\tif(isset($this->parameters[$key]) && $this->parameters[$key] != '')\n\t\t{\n\t\t\treturn SpoonFilter::getValue($this->parameters[$key], null, null, $type);\n\t\t}\n\n\t\treturn $defaultValue;\n\t}\n\n\t/**\n\t * Parse to template\n\t */\n\tprotected function parse()\n\t{\n\n\t}\n\n\t/**\n\t * Redirect to a given URL\n\t *\n\t * @param string $URL The URL to redirect to.\n\t */\n\tpublic function redirect($URL)\n\t{\n\t\tSpoonHTTP::redirect(str_replace('&amp;', '&', (string) $URL));\n\t}\n\n\t/**\n\t * Set the action, for later use\n\t *\n\t * @param string $action The action to load.\n\t */\n\tprivate function setAction($action)\n\t{\n\t\t$this->action = (string) $action;\n\t}\n\n\t/**\n\t * Set the module, for later use\n\t *\n\t * @param string $module The module to load.\n\t */\n\tprivate function setModule($module)\n\t{\n\t\t$this->module = (string) $module;\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the index action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionIndex extends BackendBaseAction\n{\n\t/**\n\t * A datagrid instance\n\t *\n\t * @var\tBackendDataGridDB\n\t */\n\tprotected $dataGrid;\n\n\t/**\n\t * Execute the current action\n\t * This method will be overwriten in most of the actions, but still be called to add general stuff\n\t */\n\tpublic function execute()\n\t{\n\t\tparent::execute();\n\t}\n\n\t/**\n\t * Parse to template\n\t */\n\tprotected function parse()\n\t{\n\t\tparent::parse();\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the add action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionAdd extends BackendBaseAction\n{\n\t/**\n\t * The form instance\n\t *\n\t * @var\tBackendForm\n\t */\n\tprotected $frm;\n\n\t/**\n\t * The backends meta-object\n\t *\n\t * @var\tBackendMeta\n\t */\n\tprotected $meta;\n\n\t/**\n\t * Parse the form\n\t */\n\tprotected function parse()\n\t{\n\t\tparent::parse();\n\n\t\tif($this->frm) $this->frm->parse($this->tpl);\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the edit action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionEdit extends BackendBaseAction\n{\n\t/**\n\t * DataGrid with the revisions\n\t *\n\t * @var\tBackendDataGridDB\n\t */\n\tprotected $dgRevisions;\n\n\t/**\n\t * The form instance\n\t *\n\t * @var\tBackendForm\n\t */\n\tprotected $frm;\n\n\t/**\n\t * The id of the item to edit\n\t *\n\t * @var\tint\n\t */\n\tprotected $id;\n\n\t/**\n\t * The backends meta-object\n\t *\n\t * @var\tBackendMeta\n\t */\n\tprotected $meta;\n\n\t/**\n\t * The data of the item to edit\n\t *\n\t * @var\tarray\n\t */\n\tprotected $record;\n\n\t/**\n\t * Parse the form\n\t */\n\tprotected function parse()\n\t{\n\t\tparent::parse();\n\n\t\tif($this->frm) $this->frm->parse($this->tpl);\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the delete action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionDelete extends BackendBaseAction\n{\n\t/**\n\t * The id of the item to edit\n\t *\n\t * @var\tint\n\t */\n\tprotected $id;\n\n\t/**\n\t * The data of the item to edite\n\t *\n\t * @var\tarray\n\t */\n\tprotected $record;\n\n\t/**\n\t * Execute the current action\n\t * This method will be overwriten in most of the actions, but still be called to add general stuff\n\t */\n\tpublic function execute()\n\t{\n\t\tparent::parse();\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by a specific AJAX action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseAJAXAction\n{\n\tconst OK = 200;\n\tconst BAD_REQUEST = 400;\n\tconst FORBIDDEN = 403;\n\tconst ERROR = 500;\n\n\t/**\n\t * The current action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $action;\n\n\t/**\n\t * The current module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * The constructor will set some properties. It populates the parameter array with urldecoded values for easy-use.\n\t *\n\t * @param string $action The action to load.\n\t * @param string $module The module to load.\n\t */\n\tpublic function __construct($action, $module)\n\t{\n\t\t$this->setModule($module);\n\t\t$this->setAction($action);\n\t}\n\n\t/**\n\t * Execute the action\n\t */\n\tpublic function execute()\n\t{\n\t\t// this method will be overwritten by the children\n\t}\n\n\t/**\n\t * Get the action\n\t *\n\t * @return string\n\t */\n\tpublic function getAction()\n\t{\n\t\treturn $this->action;\n\t}\n\n\t/**\n\t * Get the module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Output an answer to the browser\n\t *\n\t * @param int $statusCode The status code for the response, use the available constants. (self::OK, self::BAD_REQUEST, self::FORBIDDEN, self::ERROR).\n\t * @param mixed[optional] $data The data to output.\n\t * @param string[optional] $message The text-message to send.\n\t */\n\tpublic function output($statusCode, $data = null, $message = null)\n\t{\n\t\t// redefine\n\t\t$statusCode = (int) $statusCode;\n\t\tif($message !== null) $message = (string) $message;\n\n\t\t// create response array\n\t\t$response = array('code' => $statusCode, 'data' => $data, 'message' => $message);\n\n\t\t// set correct headers\n\t\tSpoonHTTP::setHeadersByCode($statusCode);\n\t\tSpoonHTTP::setHeaders('content-type: application/json');\n\n\t\t// output JSON to the browser\n\t\techo json_encode($response);\n\t\texit;\n\t}\n\n\t/**\n\t * Set the action, for later use\n\t *\n\t * @param string $action The action to load.\n\t */\n\tprotected function setAction($action)\n\t{\n\t\t$this->action = (string) $action;\n\t}\n\n\t/**\n\t * Set the module, for later use\n\t *\n\t * @param string $module The module to load.\n\t */\n\tprotected function setModule($module)\n\t{\n\t\t$this->module = (string) $module;\n\t}\n}\n\n/**\n * This is the base-object for config-files. The module-specific config-files can extend the functionality from this class\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseConfig\n{\n\t/**\n\t * The default action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $defaultAction = 'index';\n\n\t/**\n\t * The disabled actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $disabledActions = array();\n\n\t/**\n\t * The disabled AJAX-actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $disabledAJAXActions = array();\n\n\t/**\n\t * The current loaded module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * All the possible actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $possibleActions = array();\n\n\t/**\n\t * All the possible AJAX actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $possibleAJAXActions = array();\n\n\t/**\n\t * @param string $module The module wherefor this is the configuration-file.\n\t */\n\tpublic function __construct($module)\n\t{\n\t\t$this->module = (string) $module;\n\n\t\t// require the model if it exists\n\t\tif(SpoonFile::exists(BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php'))\n\t\t{\n\t\t\trequire_once BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php';\n\t\t}\n\n\t\t// read the possible actions based on the files\n\t\t$this->setPossibleActions();\n\t}\n\n\t/**\n\t * Get the default action\n\t *\n\t * @return string\n\t */\n\tpublic function getDefaultAction()\n\t{\n\t\treturn $this->defaultAction;\n\t}\n\n\t/**\n\t * Get the current loaded module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Get the possible actions\n\t *\n\t * @return array\n\t */\n\tpublic function getPossibleActions()\n\t{\n\t\treturn $this->possibleActions;\n\t}\n\n\t/**\n\t * Get the possible AJAX actions\n\t *\n\t * @return array\n\t */\n\tpublic function getPossibleAJAXActions()\n\t{\n\t\treturn $this->possibleAJAXActions;\n\t}\n\n\t/**\n\t * Set the possible actions, based on files in folder\n\t * You can disable action in the config file. (Populate $disabledActions)\n\t */\n\tprotected function setPossibleActions()\n\t{\n\t\t// get filelist (only those with .php-extension)\n\t\t$actionFiles = (array) SpoonFile::getList(BACKEND_MODULE_PATH . '/actions', '/(.*).php/');\n\n\t\t// loop filelist\n\t\tforeach($actionFiles as $file)\n\t\t{\n\t\t\t// get action by removing the extension, actions should not contain spaces (use _ instead)\n\t\t\t$action = strtolower(str_replace('.php', '', $file));\n\n\t\t\t// if the action isn't disabled add it to the possible actions\n\t\t\tif(!in_array($action, $this->disabledActions)) $this->possibleActions[$file] = $action;\n\t\t}\n\n\t\t// get filelist (only those with .php-extension)\n\t\t$AJAXActionFiles = (array) SpoonFile::getList(BACKEND_MODULE_PATH . '/ajax', '/(.*).php/');\n\n\t\t// loop filelist\n\t\tforeach($AJAXActionFiles as $file)\n\t\t{\n\t\t\t// get action by removing the extension, actions should not contain spaces (use _ instead)\n\t\t\t$action = strtolower(str_replace('.php', '', $file));\n\n\t\t\t// if the action isn't disabled add it to the possible actions\n\t\t\tif(!in_array($action, $this->disabledAJAXActions)) $this->possibleAJAXActions[$file] = $action;\n\t\t}\n\t}\n}\n\n/**\n * This is the base-object for cronjobs. The module-specific cronjob-files can extend the functionality from this class\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n * @author Dieter Vanden Eynde <dieter.vandeneynde@netlash.com>\n */\nclass BackendBaseCronjob\n{\n\t/**\n\t * The current action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $action;\n\n\t/**\n\t * The current id\n\t *\n\t * @var\tint\n\t */\n\tprotected $id;\n\n\t/**\n\t * The current module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * @param string $action The action to load.\n\t * @param string $module The module to load.\n\t */\n\tpublic function __construct($action, $module)\n\t{\n\t\t// store the current module and action (we grab them from the URL)\n\t\t$this->setModule($module);\n\t\t$this->setAction($action);\n\t}\n\n\t/**\n\t * Clear/removed the busy file\n\t */\n\tprotected function clearBusyFile()\n\t{\n\t\t// build path\n\t\t$path = BACKEND_CACHE_PATH . '/cronjobs/' . $this->getId() . '.busy';\n\n\t\t// remove the file\n\t\tSpoonFile::delete($path);\n\t}\n\n\t/**\n\t * Execute the action\n\t */\n\tpublic function execute()\n\t{\n\t\t// check if model exists\n\t\tif(SpoonFile::exists(BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php'))\n\t\t{\n\t\t\t// the model exists, so we require it\n\t\t\trequire_once BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php';\n\t\t}\n\t}\n\n\t/**\n\t * Get the action\n\t *\n\t * @return string\n\t */\n\tpublic function getAction()\n\t{\n\t\treturn $this->action;\n\t}\n\n\t/**\n\t * Get the id\n\t *\n\t * @return int\n\t */\n\tpublic function getId()\n\t{\n\t\treturn strtolower($this->getModule() . '_' . $this->getAction());\n\t}\n\n\t/**\n\t * Get the module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Set the action, for later use\n\t *\n\t * @param string $action The action to load.\n\t */\n\tprotected function setAction($action)\n\t{\n\t\t$this->action = (string) $action;\n\t}\n\n\t/**\n\t * Set the busy file\n\t */\n\tprotected function setBusyFile()\n\t{\n\t\t// do not set busy file in debug mode\n\t\tif(SPOON_DEBUG) return;\n\n\t\t// build path\n\t\t$path = BACKEND_CACHE_PATH . '/cronjobs/' . $this->getId() . '.busy';\n\n\t\t// init var\n\t\t$isBusy = false;\n\n\t\t// does the busy file already exists.\n\t\tif(SpoonFile::exists($path))\n\t\t{\n\t\t\t$isBusy = true;\n\n\t\t\t// grab counter\n\t\t\t$counter = (int) SpoonFile::getContent($path);\n\n\t\t\t// check the counter\n\t\t\tif($counter > 9)\n\t\t\t{\n\t\t\t\t// build class name\n\t\t\t\t$className = 'Backend' . SpoonFilter::toCamelCase($this->getModule() . '_cronjob_' . $this->getAction());\n\n\t\t\t\t// notify user\n\t\t\t\tthrow new BackendException('Cronjob (' . $className . ') is still busy after 10 runs, check it out!');\n\t\t\t}\n\t\t}\n\n\t\t// set counter\n\t\telse $counter = 0;\n\n\t\t// increment counter\n\t\t$counter++;\n\n\t\t// store content\n\t\tSpoonFile::setContent($path, $counter, true, false);\n\n\t\t// if the cronjob is busy we should NOT proceed\n\t\tif($isBusy) exit;\n\t}\n\n\t/**\n\t * Set the module, for later use\n\t *\n\t * @param string $module The module to load.\n\t */\n\tprotected function setModule($module)\n\t{\n\t\t$this->module = (string) $module;\n\t}\n}\n\n/**\n * This is the base-object for widgets\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseWidget\n{\n\t/**\n\t * The column wherin the widget should be shown\n\t *\n\t * @var\tstring\n\t */\n\tprivate $column = 'left';\n\n\t/**\n\t * The header object\n\t *\n\t * @var\tBackendHeader\n\t */\n\tprotected $header;\n\n\t/**\n\t * The position in the column where the widget should be shown\n\t *\n\t * @var\tint\n\t */\n\tprivate $position;\n\n\t/**\n\t * Required rights needed for this widget.\n\t *\n\t * @var\tarray\n\t */\n\tprotected $rights = array();\n\n\t/**\n\t * The template to use\n\t *\n\t * @var\tstring\n\t */\n\tprivate $templatePath;\n\n\t/**\n\t * A reference to the current template\n\t *\n\t * @var\tBackendTemplate\n\t */\n\tpublic $tpl;\n\n\t/**\n\t * The constructor will set some properties, it populates the parameter array with urldecoded\n\t * values for ease of use.\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->tpl = Spoon::get('template');\n\t\t$this->header = Spoon::get('header');\n\t}\n\n\t/**\n\t * Display, this wil output the template to the browser\n\t * If no template is specified we build the path form the current module and action\n\t *\n\t * @param string[optional] $template The template to use.\n\t */\n\tprotected function display($template = null)\n\t{\n\t\tif($template !== null) $this->templatePath = (string) $template;\n\t}\n\n\t/**\n\t * Get the column\n\t *\n\t * @return string\n\t */\n\tpublic function getColumn()\n\t{\n\t\treturn $this->column;\n\t}\n\n\t/**\n\t * Get the position\n\t *\n\t * @return mixed\n\t */\n\tpublic function getPosition()\n\t{\n\t\treturn $this->position;\n\t}\n\n\t/**\n\t * Get the template path\n\t *\n\t * @return mixed\n\t */\n\tpublic function getTemplatePath()\n\t{\n\t\treturn $this->templatePath;\n\t}\n\n\t/**\n\t * Is this widget allowed for this user?\n\t *\n\t * @return bool\n\t */\n\tpublic function isAllowed()\n\t{\n\t\tforeach($this->rights as $rights)\n\t\t{\n\t\t\tlist($module, $action) = explode('/', $rights);\n\n\t\t\t// check action rights\n\t\t\tif(isset($module) && isset($action))\n\t\t\t{\n\t\t\t\tif(!BackendAuthentication::isAllowedAction($action, $module)) return false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set column for the widget\n\t *\n\t * @param string $column Possible values are: left, middle, right.\n\t */\n\tprotected function setColumn($column)\n\t{\n\t\t$allowedColumns = array('left', 'middle', 'right');\n\t\t$this->column = SpoonFilter::getValue((string) $column, $allowedColumns, 'left');\n\t}\n\n\t/**\n\t * Set the position for the widget\n\t *\n\t * @param int $position The position for the widget.\n\t */\n\tprotected function setPosition($position)\n\t{\n\t\t$this->position = (int) $position;\n\t}\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of Fork CMS.\n *\n * For the full copyright and license information, please view the license\n * file that was distributed with this source code.\n */\n\n/**\n * This class implements a lot of functionality that can be extended by a specific action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseAction\n{\n\t/**\n\t * The current action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $action;\n\n\t/**\n\t * The parameters (urldecoded)\n\t *\n\t * @var\tarray\n\t */\n\tprotected $parameters = array();\n\n\t/**\n\t * The header object\n\t *\n\t * @var\tBackendHeader\n\t */\n\tprotected $header;\n\n\t/**\n\t * The current module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * A reference to the current template\n\t *\n\t * @var\tBackendTemplate\n\t */\n\tpublic $tpl;\n\n\t/**\n\t * A reference to the URL-instance\n\t *\n\t * @var\tBackendURL\n\t */\n\tpublic $URL;\n\n\t/**\n\t * The constructor will set some properties. It populates the parameter array with urldecoded\n\t * values for easy-use.\n\t */\n\tpublic function __construct()\n\t{\n\t\t// get objects from the reference so they are accessable from the action-object\n\t\t$this->tpl = Spoon::get('template');\n\t\t$this->URL = Spoon::get('url');\n\t\t$this->header = Spoon::get('header');\n\n\t\t// store the current module and action (we grab them from the URL)\n\t\t$this->setModule($this->URL->getModule());\n\t\t$this->setAction($this->URL->getAction());\n\n\t\t// populate the parameter array, we loop GET and urldecode the values for usage later on\n\t\tforeach((array) $_GET as $key => $value) $this->parameters[$key] = $value;\n\t}\n\n\t/**\n\t * Display, this wil output the template to the browser\n\t * If no template is specified we build the path form the current module and action\n\t *\n\t * @param string[optional] $template The template to use, if not provided it will be based on the action.\n\t */\n\tpublic function display($template = null)\n\t{\n\t\t// parse header\n\t\t$this->header->parse();\n\n\t\t/*\n\t\t * If no template is specified, we have to build the path ourself. The default template is\n\t\t * based on the name of the current action\n\t\t */\n\t\tif($template === null)\n\t\t{\n\t\t\t$template = BACKEND_MODULE_PATH . '/layout/templates/' . $this->URL->getAction() . '.tpl';\n\t\t}\n\n\t\t$this->tpl->display($template);\n\t}\n\n\t/**\n\t * Execute the action\n\t */\n\tpublic function execute()\n\t{\n\t\t// add jquery, we will need this in every action, so add it globally\n\t\t$this->header->addJS('jquery/jquery.js', 'core', false);\n\t\t$this->header->addJS('jquery/jquery.ui.js', 'core', false);\n\t\t$this->header->addJS('jquery/jquery.ui.dialog.patch.js', 'core');\n\t\t$this->header->addJS('jquery/jquery.tools.js', 'core', false);\n\t\t$this->header->addJS('jquery/jquery.backend.js', 'core');\n\n\t\t// add items that always need to be loaded\n\t\t$this->header->addJS('utils.js', 'core');\n\t\t$this->header->addJS('backend.js', 'core', false, true);\n\n\t\t// add module js\n\t\tif(SpoonFile::exists(BACKEND_MODULE_PATH . '/js/' . $this->getModule() . '.js'))\n\t\t{\n\t\t\t$this->header->addJS($this->getModule() . '.js', null, false, true);\n\t\t}\n\n\t\t// add action js\n\t\tif(SpoonFile::exists(BACKEND_MODULE_PATH . '/js/' . $this->getAction() . '.js'))\n\t\t{\n\t\t\t$this->header->addJS($this->getAction() . '.js', null, false, true);\n\t\t}\n\n\t\t// add core css files\n\t\t$this->header->addCSS('reset.css', 'core');\n\t\t$this->header->addCSS('jquery_ui/fork/jquery_ui.css', 'core', false, false);\n\t\t$this->header->addCSS('screen.css', 'core');\n\t\t$this->header->addCSS('debug.css', 'core');\n\n\t\t// add module specific css\n\t\tif(SpoonFile::exists(BACKEND_MODULE_PATH . '/layout/css/' . $this->getModule() . '.css'))\n\t\t{\n\t\t\t$this->header->addCSS($this->getModule() . '.css');\n\t\t}\n\n\t\t// store var so we don't have to call this function twice\n\t\t$var = $this->getParameter('var', 'array');\n\n\t\t// is there a report to show?\n\t\tif($this->getParameter('report') !== null)\n\t\t{\n\t\t\t// show the report\n\t\t\t$this->tpl->assign('report', true);\n\n\t\t\t// camelcase the string\n\t\t\t$messageName = strip_tags(SpoonFilter::toCamelCase($this->getParameter('report'), '-'));\n\n\t\t\t// if we have data to use it will be passed as the var parameter\n\t\t\tif(!empty($var)) $this->tpl->assign('reportMessage', vsprintf(BL::msg($messageName), $var));\n\t\t\telse $this->tpl->assign('reportMessage', BL::msg($messageName));\n\n\t\t\t// highlight an element with the given id if needed\n\t\t\tif($this->getParameter('highlight')) $this->tpl->assign('highlight', $this->getParameter('highlight'));\n\t\t}\n\n\t\t// is there an error to show?\n\t\tif($this->getParameter('error') !== null)\n\t\t{\n\t\t\t// camelcase the string\n\t\t\t$errorName = SpoonFilter::toCamelCase($this->getParameter('error'), '-');\n\n\t\t\t// if we have data to use it will be passed as the var parameter\n\t\t\tif(!empty($var)) $this->tpl->assign('errorMessage', vsprintf(BL::err($errorName), $var));\n\t\t\telse $this->tpl->assign('errorMessage', BL::err($errorName));\n\t\t}\n\t}\n\n\t/**\n\t * Get the action\n\t *\n\t * @return string\n\t */\n\tpublic function getAction()\n\t{\n\t\treturn $this->action;\n\t}\n\n\t/**\n\t * Get the module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Get a parameter for a given key\n\t * The function will return null if the key is not available\n\t * By default we will cast the return value into a string, if you want something else specify it by passing the wanted type.\n\t *\n\t * @param string $key The name of the parameter.\n\t * @param string[optional] $type The return-type, possible values are: bool, boolean, int, integer, float, double, string, array.\n\t * @param mixed[optional] $defaultValue The value that should be returned if the key is not available.\n\t * @return mixed\n\t */\n\tpublic function getParameter($key, $type = 'string', $defaultValue = null)\n\t{\n\t\t$key = (string) $key;\n\n\t\t// parameter exists\n\t\tif(isset($this->parameters[$key]) && $this->parameters[$key] != '')\n\t\t{\n\t\t\treturn SpoonFilter::getValue($this->parameters[$key], null, null, $type);\n\t\t}\n\n\t\treturn $defaultValue;\n\t}\n\n\t/**\n\t * Parse to template\n\t */\n\tprotected function parse()\n\t{\n\n\t}\n\n\t/**\n\t * Redirect to a given URL\n\t *\n\t * @param string $URL The URL to redirect to.\n\t */\n\tpublic function redirect($URL)\n\t{\n\t\tSpoonHTTP::redirect(str_replace('&amp;', '&', (string) $URL));\n\t}\n\n\t/**\n\t * Set the action, for later use\n\t *\n\t * @param string $action The action to load.\n\t */\n\tprivate function setAction($action)\n\t{\n\t\t$this->action = (string) $action;\n\t}\n\n\t/**\n\t * Set the module, for later use\n\t *\n\t * @param string $module The module to load.\n\t */\n\tprivate function setModule($module)\n\t{\n\t\t$this->module = (string) $module;\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the index action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionIndex extends BackendBaseAction\n{\n\t/**\n\t * A datagrid instance\n\t *\n\t * @var\tBackendDataGridDB\n\t */\n\tprotected $dataGrid;\n\n\t/**\n\t * Execute the current action\n\t * This method will be overwriten in most of the actions, but still be called to add general stuff\n\t */\n\tpublic function execute()\n\t{\n\t\tparent::execute();\n\t}\n\n\t/**\n\t * Parse to template\n\t */\n\tprotected function parse()\n\t{\n\t\tparent::parse();\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the add action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionAdd extends BackendBaseAction\n{\n\t/**\n\t * The form instance\n\t *\n\t * @var\tBackendForm\n\t */\n\tprotected $frm;\n\n\t/**\n\t * The backends meta-object\n\t *\n\t * @var\tBackendMeta\n\t */\n\tprotected $meta;\n\n\t/**\n\t * Parse the form\n\t */\n\tprotected function parse()\n\t{\n\t\tparent::parse();\n\n\t\tif($this->frm) $this->frm->parse($this->tpl);\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the edit action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionEdit extends BackendBaseAction\n{\n\t/**\n\t * DataGrid with the revisions\n\t *\n\t * @var\tBackendDataGridDB\n\t */\n\tprotected $dgRevisions;\n\n\t/**\n\t * The form instance\n\t *\n\t * @var\tBackendForm\n\t */\n\tprotected $frm;\n\n\t/**\n\t * The id of the item to edit\n\t *\n\t * @var\tint\n\t */\n\tprotected $id;\n\n\t/**\n\t * The backends meta-object\n\t *\n\t * @var\tBackendMeta\n\t */\n\tprotected $meta;\n\n\t/**\n\t * The data of the item to edit\n\t *\n\t * @var\tarray\n\t */\n\tprotected $record;\n\n\t/**\n\t * Parse the form\n\t */\n\tprotected function parse()\n\t{\n\t\tparent::parse();\n\n\t\tif($this->frm) $this->frm->parse($this->tpl);\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by the real action.\n * In this case this is the base class for the delete action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseActionDelete extends BackendBaseAction\n{\n\t/**\n\t * The id of the item to edit\n\t *\n\t * @var\tint\n\t */\n\tprotected $id;\n\n\t/**\n\t * The data of the item to edite\n\t *\n\t * @var\tarray\n\t */\n\tprotected $record;\n\n\t/**\n\t * Execute the current action\n\t * This method will be overwriten in most of the actions, but still be called to add general stuff\n\t */\n\tpublic function execute()\n\t{\n\t\tparent::parse();\n\t}\n}\n\n/**\n * This class implements a lot of functionality that can be extended by a specific AJAX action\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseAJAXAction\n{\n\tconst OK = 200;\n\tconst BAD_REQUEST = 400;\n\tconst FORBIDDEN = 403;\n\tconst ERROR = 500;\n\n\t/**\n\t * The current action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $action;\n\n\t/**\n\t * The current module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * The constructor will set some properties. It populates the parameter array with urldecoded values for easy-use.\n\t *\n\t * @param string $action The action to load.\n\t * @param string $module The module to load.\n\t */\n\tpublic function __construct($action, $module)\n\t{\n\t\t$this->setModule($module);\n\t\t$this->setAction($action);\n\t}\n\n\t/**\n\t * Execute the action\n\t */\n\tpublic function execute()\n\t{\n\t\t// this method will be overwritten by the children\n\t}\n\n\t/**\n\t * Get the action\n\t *\n\t * @return string\n\t */\n\tpublic function getAction()\n\t{\n\t\treturn $this->action;\n\t}\n\n\t/**\n\t * Get the module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Output an answer to the browser\n\t *\n\t * @param int $statusCode The status code for the response, use the available constants. (self::OK, self::BAD_REQUEST, self::FORBIDDEN, self::ERROR).\n\t * @param mixed[optional] $data The data to output.\n\t * @param string[optional] $message The text-message to send.\n\t */\n\tpublic function output($statusCode, $data = null, $message = null)\n\t{\n\t\t// redefine\n\t\t$statusCode = (int) $statusCode;\n\t\tif($message !== null) $message = (string) $message;\n\n\t\t// create response array\n\t\t$response = array('code' => $statusCode, 'data' => $data, 'message' => $message);\n\n\t\t// set correct headers\n\t\tSpoonHTTP::setHeadersByCode($statusCode);\n\t\tSpoonHTTP::setHeaders('content-type: application/json');\n\n\t\t// output JSON to the browser\n\t\techo json_encode($response);\n\t\texit;\n\t}\n\n\t/**\n\t * Set the action, for later use\n\t *\n\t * @param string $action The action to load.\n\t */\n\tprotected function setAction($action)\n\t{\n\t\t$this->action = (string) $action;\n\t}\n\n\t/**\n\t * Set the module, for later use\n\t *\n\t * @param string $module The module to load.\n\t */\n\tprotected function setModule($module)\n\t{\n\t\t$this->module = (string) $module;\n\t}\n}\n\n/**\n * This is the base-object for config-files. The module-specific config-files can extend the functionality from this class\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseConfig\n{\n\t/**\n\t * The default action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $defaultAction = 'index';\n\n\t/**\n\t * The disabled actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $disabledActions = array();\n\n\t/**\n\t * The disabled AJAX-actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $disabledAJAXActions = array();\n\n\t/**\n\t * The current loaded module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * All the possible actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $possibleActions = array();\n\n\t/**\n\t * All the possible AJAX actions\n\t *\n\t * @var\tarray\n\t */\n\tprotected $possibleAJAXActions = array();\n\n\t/**\n\t * @param string $module The module wherefor this is the configuration-file.\n\t */\n\tpublic function __construct($module)\n\t{\n\t\t$this->module = (string) $module;\n\n\t\t// require the model if it exists\n\t\tif(SpoonFile::exists(BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php'))\n\t\t{\n\t\t\trequire_once BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php';\n\t\t}\n\n\t\t// read the possible actions based on the files\n\t\t$this->setPossibleActions();\n\t}\n\n\t/**\n\t * Get the default action\n\t *\n\t * @return string\n\t */\n\tpublic function getDefaultAction()\n\t{\n\t\treturn $this->defaultAction;\n\t}\n\n\t/**\n\t * Get the current loaded module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Get the possible actions\n\t *\n\t * @return array\n\t */\n\tpublic function getPossibleActions()\n\t{\n\t\treturn $this->possibleActions;\n\t}\n\n\t/**\n\t * Get the possible AJAX actions\n\t *\n\t * @return array\n\t */\n\tpublic function getPossibleAJAXActions()\n\t{\n\t\treturn $this->possibleAJAXActions;\n\t}\n\n\t/**\n\t * Set the possible actions, based on files in folder\n\t * You can disable action in the config file. (Populate $disabledActions)\n\t */\n\tprotected function setPossibleActions()\n\t{\n\t\t// get filelist (only those with .php-extension)\n\t\t$actionFiles = (array) SpoonFile::getList(BACKEND_MODULE_PATH . '/actions', '/(.*).php/');\n\n\t\t// loop filelist\n\t\tforeach($actionFiles as $file)\n\t\t{\n\t\t\t// get action by removing the extension, actions should not contain spaces (use _ instead)\n\t\t\t$action = strtolower(str_replace('.php', '', $file));\n\n\t\t\t// if the action isn't disabled add it to the possible actions\n\t\t\tif(!in_array($action, $this->disabledActions)) $this->possibleActions[$file] = $action;\n\t\t}\n\n\t\t// get filelist (only those with .php-extension)\n\t\t$AJAXActionFiles = (array) SpoonFile::getList(BACKEND_MODULE_PATH . '/ajax', '/(.*).php/');\n\n\t\t// loop filelist\n\t\tforeach($AJAXActionFiles as $file)\n\t\t{\n\t\t\t// get action by removing the extension, actions should not contain spaces (use _ instead)\n\t\t\t$action = strtolower(str_replace('.php', '', $file));\n\n\t\t\t// if the action isn't disabled add it to the possible actions\n\t\t\tif(!in_array($action, $this->disabledAJAXActions)) $this->possibleAJAXActions[$file] = $action;\n\t\t}\n\t}\n}\n\n/**\n * This is the base-object for cronjobs. The module-specific cronjob-files can extend the functionality from this class\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n * @author Dieter Vanden Eynde <dieter.vandeneynde@netlash.com>\n */\nclass BackendBaseCronjob\n{\n\t/**\n\t * The current action\n\t *\n\t * @var\tstring\n\t */\n\tprotected $action;\n\n\t/**\n\t * The current id\n\t *\n\t * @var\tint\n\t */\n\tprotected $id;\n\n\t/**\n\t * The current module\n\t *\n\t * @var\tstring\n\t */\n\tprotected $module;\n\n\t/**\n\t * @param string $action The action to load.\n\t * @param string $module The module to load.\n\t */\n\tpublic function __construct($action, $module)\n\t{\n\t\t// store the current module and action (we grab them from the URL)\n\t\t$this->setModule($module);\n\t\t$this->setAction($action);\n\t}\n\n\t/**\n\t * Clear/removed the busy file\n\t */\n\tprotected function clearBusyFile()\n\t{\n\t\t// build path\n\t\t$path = BACKEND_CACHE_PATH . '/cronjobs/' . $this->getId() . '.busy';\n\n\t\t// remove the file\n\t\tSpoonFile::delete($path);\n\t}\n\n\t/**\n\t * Execute the action\n\t */\n\tpublic function execute()\n\t{\n\t\t// check if model exists\n\t\tif(SpoonFile::exists(BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php'))\n\t\t{\n\t\t\t// the model exists, so we require it\n\t\t\trequire_once BACKEND_MODULES_PATH . '/' . $this->getModule() . '/engine/model.php';\n\t\t}\n\t}\n\n\t/**\n\t * Get the action\n\t *\n\t * @return string\n\t */\n\tpublic function getAction()\n\t{\n\t\treturn $this->action;\n\t}\n\n\t/**\n\t * Get the id\n\t *\n\t * @return int\n\t */\n\tpublic function getId()\n\t{\n\t\treturn strtolower($this->getModule() . '_' . $this->getAction());\n\t}\n\n\t/**\n\t * Get the module\n\t *\n\t * @return string\n\t */\n\tpublic function getModule()\n\t{\n\t\treturn $this->module;\n\t}\n\n\t/**\n\t * Set the action, for later use\n\t *\n\t * @param string $action The action to load.\n\t */\n\tprotected function setAction($action)\n\t{\n\t\t$this->action = (string) $action;\n\t}\n\n\t/**\n\t * Set the busy file\n\t */\n\tprotected function setBusyFile()\n\t{\n\t\t// do not set busy file in debug mode\n\t\tif(SPOON_DEBUG) return;\n\n\t\t// build path\n\t\t$path = BACKEND_CACHE_PATH . '/cronjobs/' . $this->getId() . '.busy';\n\n\t\t// init var\n\t\t$isBusy = false;\n\n\t\t// does the busy file already exists.\n\t\tif(SpoonFile::exists($path))\n\t\t{\n\t\t\t$isBusy = true;\n\n\t\t\t// grab counter\n\t\t\t$counter = (int) SpoonFile::getContent($path);\n\n\t\t\t// check the counter\n\t\t\tif($counter > 9)\n\t\t\t{\n\t\t\t\t// build class name\n\t\t\t\t$className = 'Backend' . SpoonFilter::toCamelCase($this->getModule() . '_cronjob_' . $this->getAction());\n\n\t\t\t\t// notify user\n\t\t\t\tthrow new BackendException('Cronjob (' . $className . ') is still busy after 10 runs, check it out!');\n\t\t\t}\n\t\t}\n\n\t\t// set counter\n\t\telse $counter = 0;\n\n\t\t// increment counter\n\t\t$counter++;\n\n\t\t// store content\n\t\tSpoonFile::setContent($path, $counter, true, false);\n\n\t\t// if the cronjob is busy we should NOT proceed\n\t\tif($isBusy) exit;\n\t}\n\n\t/**\n\t * Set the module, for later use\n\t *\n\t * @param string $module The module to load.\n\t */\n\tprotected function setModule($module)\n\t{\n\t\t$this->module = (string) $module;\n\t}\n}\n\n/**\n * This is the base-object for widgets\n *\n * @author Tijs Verkoyen <tijs@sumocoders.be>\n */\nclass BackendBaseWidget\n{\n\t/**\n\t * The column wherin the widget should be shown\n\t *\n\t * @var\tstring\n\t */\n\tprivate $column = 'left';\n\n\t/**\n\t * The header object\n\t *\n\t * @var\tBackendHeader\n\t */\n\tprotected $header;\n\n\t/**\n\t * The position in the column where the widget should be shown\n\t *\n\t * @var\tint\n\t */\n\tprivate $position;\n\n\t/**\n\t * Required rights needed for this widget.\n\t *\n\t * @var\tarray\n\t */\n\tprotected $rights = array();\n\n\t/**\n\t * The template to use\n\t *\n\t * @var\tstring\n\t */\n\tprivate $templatePath;\n\n\t/**\n\t * A reference to the current template\n\t *\n\t * @var\tBackendTemplate\n\t */\n\tpublic $tpl;\n\n\t/**\n\t * The constructor will set some properties, it populates the parameter array with urldecoded\n\t * values for ease of use.\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->tpl = Spoon::get('template');\n\t\t$this->header = Spoon::get('header');\n\t}\n\n\t/**\n\t * Display, this wil output the template to the browser\n\t * If no template is specified we build the path form the current module and action\n\t *\n\t * @param string[optional] $template The template to use.\n\t */\n\tprotected function display($template = null)\n\t{\n\t\tif($template !== null) $this->templatePath = (string) $template;\n\t}\n\n\t/**\n\t * Get the column\n\t *\n\t * @return string\n\t */\n\tpublic function getColumn()\n\t{\n\t\treturn $this->column;\n\t}\n\n\t/**\n\t * Get the position\n\t *\n\t * @return mixed\n\t */\n\tpublic function getPosition()\n\t{\n\t\treturn $this->position;\n\t}\n\n\t/**\n\t * Get the template path\n\t *\n\t * @return mixed\n\t */\n\tpublic function getTemplatePath()\n\t{\n\t\treturn $this->templatePath;\n\t}\n\n\t/**\n\t * Is this widget allowed for this user?\n\t *\n\t * @return bool\n\t */\n\tpublic function isAllowed()\n\t{\n\t\tforeach($this->rights as $rights)\n\t\t{\n\t\t\tlist($module, $action) = explode('/', $rights);\n\n\t\t\t// check action rights\n\t\t\tif(isset($module) && isset($action))\n\t\t\t{\n\t\t\t\tif(!BackendAuthentication::isAllowedAction($action, $module)) return false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set column for the widget\n\t *\n\t * @param string $column Possible values are: left, middle, right.\n\t */\n\tprotected function setColumn($column)\n\t{\n\t\t$allowedColumns = array('left', 'middle', 'right');\n\t\t$this->column = SpoonFilter::getValue((string) $column, $allowedColumns, 'left');\n\t}\n\n\t/**\n\t * Set the position for the widget\n\t *\n\t * @param int $position The position for the widget.\n\t */\n\tprotected function setPosition($position)\n\t{\n\t\t$this->position = (int) $position;\n\t}\n}\n"], "filenames": ["backend/core/engine/base.php"], "buggy_code_start_loc": [151], "buggy_code_end_loc": [152], "fixing_code_start_loc": [151], "fixing_code_end_loc": [152], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in backend/core/engine/base.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allow remote attackers to inject arbitrary web script or HTML via the (1) report parameter to blog/settings or (2) error parameter to users/index.", "other": {"cve": {"id": "CVE-2012-1208", "sourceIdentifier": "cve@mitre.org", "published": "2012-02-24T13:55:07.390", "lastModified": "2012-02-24T13:55:07.390", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in backend/core/engine/base.php in Fork CMS 3.2.4 and possibly other versions before 3.2.5 allow remote attackers to inject arbitrary web script or HTML via the (1) report parameter to blog/settings or (2) error parameter to users/index."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) en backend/core/engine/base.php en Fork CMS v3.2.4 y posiblemente otras versiones antes de v3.2.5, permiten a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de (1) el par\u00e1metro report en blog/settings y (2) el par\u00e1metro error en users/index."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fork-cms:fork_cms:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "23B9738D-A6BD-4D66-938C-05176D0A3DB6"}]}]}], "references": [{"url": "http://packetstormsecurity.org/files/109709/Fork-CMS-3.2.4-Cross-Site-Scripting-Local-File-Inclusion.html", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://www.fork-cms.com/blog/detail/fork-cms-3-2-5-released", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/51972", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://github.com/forkcms/forkcms/commit/8fa74dd3e2e32723cd121177dce6aeac37e29df6", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/forkcms/forkcms/commit/d65c083adc91c88d21bd9a0df4c2688df634c6ff", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/forkcms/forkcms/commit/df75e0797a6540c4d656969a2e7df7689603b2cf", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/forkcms/forkcms/commit/8fa74dd3e2e32723cd121177dce6aeac37e29df6"}}