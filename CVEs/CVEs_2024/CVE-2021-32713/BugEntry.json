{"buggy_code": ["/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\n/** @lends Ext.String */\n//{block name=\"extjs/overrides/string\"}\nExt.override(Ext.String, {\n    /**\n     * Return the text content of the element\n     *\n     * @returns string\n     */\n    getText: function(value) {\n        var me = this,\n            elementNode;\n\n        elementNode = document.createElement('div');\n        elementNode.innerHTML = value;\n\n        return me._getText([elementNode]);\n    },\n\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     *\n     * @param { Array|Element } elem\n     * @private\n     */\n    _getText: function(elem) {\n        var node,\n            ret = '',\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if (!nodeType) {\n            while ((node = elem[i++])) {\n                ret += this._getText(node);\n            }\n        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n            if (typeof elem.textContent === 'string') {\n                return elem.textContent;\n            } else {\n                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n                    ret += this._getText(elem);\n                }\n            }\n        } else if (nodeType === 3 || nodeType === 4) {\n            return elem.nodeValue;\n        }\n\n        return ret;\n    }\n});\n//{/block}", "/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n *\n * @category   Shopware\n * @package    Article\n * @subpackage Detail\n * @version    $Id$\n * @author shopware AG\n */\n\n/**\n * Shopware Controller - Detail\n * The detail controller handles all events of the detail page main form element and the sidebar.\n */\n//{namespace name=backend/article/view/main}\n//{block name=\"backend/article/controller/detail\"}\nExt.define('Shopware.apps.Article.controller.Detail', {\n\n    /**\n     * Extend from the standard ExtJS 4 controller\n     * @string\n     */\n    extend: 'Enlight.app.Controller',\n\n    stores: [\n        'Property'\n    ],\n\n    refs: [\n        { ref: 'mainWindow', selector: 'article-detail-window' },\n        { ref: 'baseFieldSet', selector: 'article-detail-window article-base-field-set' },\n        { ref: 'configurator', selector: 'article-detail-window article-variant-configurator' },\n        { ref: 'customerGroupCombo', selector: 'article-detail-window article-settings-field-set boxselect[name=avoidCustomerGroups]' },\n        { ref: 'variantListing', selector: 'article-detail-window article-variant-list' },\n        { ref: 'detailForm', selector: 'article-detail-window form[name=detail-form]' },\n        { ref: 'variantTab', selector: 'article-detail-window panel[name=variant-tab]' },\n        { ref: 'esdTab', selector: 'article-detail-window panel[name=esd-tab]' },\n        { ref: 'esdListing', selector: 'article-detail-window article-esd-list' },\n        { ref: 'propertyPanel', selector: 'article-properties-panel' },\n        { ref: 'propertyGrid', selector: 'article-detail-window grid[name=property-grid]' },\n        { ref: 'priceFieldSet', selector: 'article-detail-window article-prices-field-set' }\n    ],\n\n    snippets: {\n        disableVariantForbidden: {\n            title: '{s name=disable_variant_forbidden/title}Disable variants{/s}',\n            message: '{s name=disable_variant_forbidden/message}To disable variant support you must delete all non-main variants first{/s}',\n            error: '{s name=disable_variant_forbidden/error}An error occurred while disabling variant support{/s}'\n        },\n        growlMessage: '{s name=growl_message}Article{/s}',\n        existTitle: '{s name=sidebar/accessory/already_assigned_title}Already exists{/s}',\n        similar: {\n            exist: '{s name=sidebar/similar/already_assigned_message}The article [0] has been assigned as similar article!{/s}'\n        },\n        accessory: {\n            exist: '{s name=sidebar/accessory/already_assigned_message}The article [0] has been already assigned as accessory article!{/s}'\n        },\n        removeArticle: '{s name=article_remove/message}Are you sure you want to delete the article?{/s}',\n        alreadyExist: {\n            title: '{s name=category/already_exist/title}Failed{/s}',\n            message: '{s name=category/already_exist/message}Category: [0] has already been assigned{/s}'\n        },\n        saved: {\n            title: '{s name=article_saved/title}Successful{/s}',\n            message: '{s name=article_saved/message}Article [0] has been saved successfully{/s}',\n            noPriceGiven: '{s name=article_saved/no_price_given}Please insert a price for the first customer group.{/s}',\n            fieldsViolation: '{s name=article_saved/field_errors}The following fields are not valid: {/s}',\n            errorMessage: '{s name=article_saved/error_message}An error has occurred while saving the article:{/s}',\n            errorTitle: '{s name=article_saved/error_title}Error{/s}',\n            removeMessage: '{s name=article_removed/message}Article has been removed{/s}'\n        },\n        overwriteArticle: {\n            title: '{s name=overwriteArticle/title}Overwrite most recent changes{/s}',\n            message: '{s name=overwriteArticle/message}Do you really want to overwrite the latest changes?{/s}',\n        },\n    },\n\n    /**\n     * A template method that is called when your application boots.\n     * It is called before the Application's launch function is executed\n     * so gives a hook point to run any code before your Viewport is created.\n     *\n     * @params  - The main controller can handle a orderId parameter to open the order detail page directly\n     * @return void\n     */\n    init:function () {\n        var me = this;\n\n        me.control({\n            'article-detail-window': {\n                saveArticle: me.onSaveArticle,\n                cancel: me.onCancel\n            },\n            'article-detail-window article-base-field-set checkbox[name=isConfigurator]': {\n                change: me.onEnableConfigurator\n            },\n            'article-detail-window combo[name=filterGroupId]': {\n                change: me.onChangePropertyGroup\n            },\n            'article-detail-window article-resources-links': {\n                addLink: me.onAddLink,\n                removeLink: me.onRemoveLink\n            },\n            'article-detail-window article-resources-downloads': {\n                addDownload: me.onAddDownload,\n                removeDownload: me.onRemoveDownload\n            },\n            'article-detail-window article-actions-toolbar': {\n                articlePreview: me.onArticlePreview,\n                deleteArticle: me.onDeleteArticle,\n                duplicateArticle: me.onDuplicateArticle\n            },\n            'article-prices-field-set': {\n                priceTabChanged: me.onPriceTabChanged,\n                removePrice: me.onRemovePrice\n            },\n            'article-prices-field-set grid': {\n                edit: me.onAfterEditPrice,\n                beforeedit: me.onBeforeEditPrice\n            }\n        });\n\n        me.callParent(arguments);\n    },\n\n    /**\n     * Deprecated. Use onChangeConfigurator instead\n     * @param field\n     * @param newValue\n     */\n    onEnableConfigurator: function(field, newValue) {\n        this.onChangeConfigurator(field, newValue);\n    },\n\n    /**\n     * Event listener function of the configurator checkbox in the detail tab.\n     * Enables or disables the variant tab.\n     *\n     * @param field\n     * @param newValue\n     */\n    onChangeConfigurator: function(field, newValue) {\n        var me = this,\n            mainWindow = me.getMainWindow(),\n            article = me.subApplication.article,\n            variantTab = mainWindow.variantTab;\n\n        if (newValue === false && !Ext.isEmpty(article.get('id'))) {\n            var variantStore = me.getStore('Variant');\n            variantStore.getProxy().extraParams.articleId = article.get('id');\n\n            variantStore.load({\n                callback: function(records, operation, success) {\n                    if (success && records.length > 1) {\n                        Shopware.Notification.createGrowlMessage(me.snippets.disableVariantForbidden.title, me.snippets.disableVariantForbidden.message, me.snippets.growlMessage);\n                        field.setValue(true);\n                    } else if (!success) {\n                        Shopware.Notification.createGrowlMessage(me.snippets.disableVariantForbidden.title, me.snippets.disableVariantForbidden.error, me.snippets.growlMessage);\n                        field.setValue(true);\n                    }\n                }\n            });\n        }\n\n        if (me.subApplication.splitViewActive) {\n            variantTab.setDisabled(true)\n        } else {\n            variantTab.setDisabled((article.get('id') === null || newValue === false || article.get('configuratorSetId') === null));\n        }\n    },\n\n    /**\n     * Event listener function of the save button of the main window.\n     * Saves the current article\n     *\n     * @param { Object } win\n     * @param { Object } article\n     * @param { Object } options\n     * @return { Boolean|void }\n     */\n    onSaveArticle: function(win, article, options) {\n        var me = this, priceStore, lastFilter,\n            mainWindow = me.getMainWindow(),\n            form;\n\n        if (Ext.isEmpty(win)) {\n            mainWindow = me.getMainWindow();\n        } else {\n            mainWindow = win;\n        }\n\n        form = mainWindow.detailForm;\n\n        // First, check if the detail form panel is valid, otherwise return.\n        if ( !form.getForm().isValid() ) {\n            if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                options.callback(null, false, 'no_valid_form');\n            }\n            return;\n        }\n\n        priceStore = article.getPrice();\n\n        // Update the article record with the form data.\n        form.getForm().updateRecord(article);\n        article = me.prepareAvoidCustomerGroups(article);\n\n        if (!article.get('isConfigurator')) {\n            article.set('configuratorSetId', null);\n        }\n\n        // If supplierId is string we want to create a new supplier in our backend\n        var baseField = me.getBaseFieldSet();\n        var supplierId = baseField.supplierCombo.getModelData().supplierId;\n        var supplierNeedsReload = false;\n        if (typeof supplierId === \"string\") {\n            article.set('supplierName', supplierId);\n            supplierNeedsReload = true;\n        }\n\n        article.getConfiguratorSetStore = Ext.create('Ext.data.Store', { model: 'Shopware.apps.Article.model.ConfiguratorSet' });\n\n        // Save last price store filter to filter again after the article saved.\n        lastFilter = priceStore.filters.items;\n\n        priceStore.clearFilter();\n\n        if (article.getConfiguratorTemplateStore instanceof Ext.data.Store && article.getConfiguratorTemplateStore.getCount() > 0) {\n            var template = article.getConfiguratorTemplateStore.first();\n            if (template.getPrice() instanceof Ext.data.Store) {\n                template.getPrice().clearFilter();\n            }\n        }\n\n        if (!me.hasArticlePrice(priceStore)) {\n            priceStore.filter(lastFilter);\n            Shopware.Notification.createGrowlMessage(me.snippets.saved.errorTitle, me.snippets.saved.noPriceGiven, me.snippets.growlMessage);\n            if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                options.callback(null, false);\n            }\n            return false;\n        }\n\n        // Remove all prices with a clone flag.\n        me.removeClonedPrices(priceStore);\n        article.setDirty();\n        article.save({\n            success: function(record, operation) {\n\n                var newArticle = operation.getResultSet().records[0],\n                    message = Ext.String.format(me.snippets.saved.message, article.get('name'));\n\n                if (supplierNeedsReload) {\n                    mainWindow.supplierStore.filters.clear();\n                    mainWindow.supplierStore.load();\n                }\n\n                mainWindow.attributeForm.saveAttribute(newArticle.get('mainDetailId'));\n\n                me.prepareArticleProperties(record, function() {\n                    newArticle.getPrice().filter(lastFilter);\n                    me.reconfigureAssociationComponents(newArticle);\n                    Shopware.Notification.createGrowlMessage(me.snippets.saved.title, message, me.snippets.growlMessage);\n                    me.refreshArticleList();\n\n                    if (record.get('isConfigurator') && record.get('id')) {\n                        me.subApplication.getController('Variant').getVariantListing().getStore().reload();\n                    }\n\n                    if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                        options.callback(newArticle, true);\n                    }\n                });\n            },\n            failure: function(record, operation) {\n                var rawData = record.getProxy().getReader().rawData,\n                    fields = rawData.fields,\n                    message = rawData.message;\n\n                if (fields && fields.length > 0) {\n                    Shopware.Notification.createGrowlMessage(me.snippets.saved.errorTitle, me.snippets.saved.fieldsViolation, me.snippets.growlMessage);\n                } else {\n                    Shopware.Notification.createGrowlMessage(me.snippets.saved.errorTitle, me.snippets.saved.errorMessage + message, me.snippets.growlMessage);\n                }\n\n                priceStore.filter(lastFilter);\n                if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                    options.callback(null, false);\n                }\n\n                if (rawData.overwriteAble) {\n                    Ext.MessageBox.confirm(me.snippets.overwriteArticle.title, me.snippets.overwriteArticle.message, function (response) {\n                        if (response === 'yes') {\n                            record.set('changed', rawData.data[0].changed);\n                            me.onSaveArticle(win, article, options);\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /**\n     *\n     * @param priceStore\n     * @return Boolean\n     */\n    hasArticlePrice: function(priceStore) {\n        var me = this, priceExist = false;\n\n        var firstCustomerGroup = me.subApplication.firstCustomerGroup;\n\n        priceStore.each(function(price) {\n            if (price.get('customerGroupKey') === firstCustomerGroup.get('key') && price.get('price') > 0) {\n                priceExist = true;\n                return true;\n            }\n        });\n        return priceExist;\n    },\n\n    refreshArticleList: function() {\n        var me = this,\n            subApps = Shopware.app.Application.subApplications,\n            articleList = subApps.findBy(function(item) {\n                if(item.$className === 'Shopware.apps.ArticleList') {\n                    return true;\n                }\n            });\n        if(articleList) {\n            var grid = articleList.articleGrid,\n                selModel = grid.getSelectionModel(),\n                selection = selModel.getLastSelected();\n\n            articleList.articleStore.reload({\n                scope: me,\n                callback: function() {\n                    if (selection) {\n                        selModel.select(selection.index, false, true);\n                    }\n                }\n            });\n        }\n    },\n\n    prepareAvoidCustomerGroups: function(article) {\n        var me = this,\n            customerGroupCombo = me.getCustomerGroupCombo(),\n            store = customerGroupCombo.getStore();\n\n        var newStore = Ext.create('Ext.data.Store', { model: 'Shopware.apps.Base.model.CustomerGroup' });\n        newStore.add(customerGroupCombo.getValueRecords());\n        article.getCustomerGroupsStore = newStore;\n        return article;\n    },\n\n    /**\n     * Helper function to reload all components which uses the article association stores\n     * @param article\n     */\n    reconfigureAssociationComponents: function(article) {\n        var me = this,\n            mainWindow = me.getMainWindow(),\n            variantTab = mainWindow.variantTab,\n            esdTab = mainWindow.esdTab,\n            esdListing = me.getEsdListing(),\n            variantListing = me.getVariantListing(),\n            configurator = me.getConfigurator(),\n            priceFieldSet = me.getPriceFieldSet();\n\n\n        if (article === null && me.subApplication.article) {\n            me.reloadArticle(me.subApplication.article.get('id'));\n            return;\n        }\n        var baseField = mainWindow.down('article-base-field-set');\n        baseField.numberField.validationRequestParam = article.getMainDetail().first().get('id');\n\n        mainWindow.article = article;\n        me.subApplication.article = article;\n\n        mainWindow.detailForm.loadRecord(article);\n\n        me.loadPropertyStore(article);\n        me.getPropertyPanel().article = article;\n\n        esdTab.setDisabled(article.get('id') === null);\n        esdListing.esdStore.getProxy().extraParams.articleId = article.get('id');\n        esdListing.filteredStore.getProxy().extraParams.articleId = article.get('id');\n        esdListing.article = article;\n\n        if (me.subApplication.splitViewActive) {\n            variantTab.setDisabled(true);\n        } else {\n            variantTab.setDisabled(article.get('id') === null || article.get('isConfigurator') === false || article.get('configuratorSetId') === null);\n        }\n\n        var showAdditionalText = (variantTab.isDisabled()) ? !Ext.isEmpty(baseField.mainDetailAdditionalText.getValue(), false) : false;\n        baseField.mainDetailAdditionalText.setVisible(showAdditionalText);\n        variantListing.getStore().getProxy().extraParams.articleId = article.get('id');\n\n        configurator.articleConfiguratorSet = article.getConfiguratorSet().first();\n\n        priceFieldSet.priceStore = article.getPrice();\n        priceFieldSet.preparePriceStore();\n        Ext.each(priceFieldSet.priceGrids, function(grid) {\n            grid.reconfigure(article.getPrice());\n        });\n        priceFieldSet.tabPanel.setActiveTab(0);\n\n        // Reconfigure the article link listing\n        mainWindow.down('article-resources-links grid[name=link-listing]').reconfigure(article.getLink());\n\n        // Reconfigure the article download listing\n        mainWindow.down('article-resources-downloads grid[name=download-listing]').reconfigure(article.getDownload());\n\n        // Reconfigure the article accessory articles listing\n        mainWindow.down('article-crossselling-tab grid[name=accessory-listing]').reconfigure(article.getAccessory());\n\n        // Reconfigure the article similar articles listing\n        mainWindow.down('article-crossselling-tab grid[name=similar-listing]').reconfigure(article.getSimilar());\n\n        // Reconfigure the category listing in the category tab\n        mainWindow.down('container[name=category-tab] article-category-list').reconfigure(article.getCategory());\n\n        // Reconfigure the stream listing in the crossselling tab\n        mainWindow.down('article-crossselling-tab grid[name=streams-listing]').reconfigure(article.getStreams());\n\n        //reconfigure the seo category listing and the selection store of the listing\n        var seoListing = mainWindow.down('container[name=category-tab] article-category-seo-list');\n\n        seoListing.reconfigure(article.getSeoCategories());\n\n        seoListing.setCategoryStore(article.getCategory());\n\n        // Reconfigure the image listing\n        var imageListing = mainWindow.down('article-image-list dataview[name=image-listing]');\n        var listingComponent = mainWindow.down('article-image-list');\n        imageListing.bindStore(article.getMedia());\n        listingComponent.mediaStore = article.getMedia();\n\n        mainWindow.detailForm.getForm().isValid();\n    },\n\n    /**\n     * Helper function to reload the article data\n     *\n     * @param { Integer } articleId\n     */\n    reloadArticle: function(articleId) {\n        var me = this, lastFilter = null;\n\n        if (me.subApplication.article) {\n            lastFilter = me.subApplication.article.getPrice().filters.items;\n        }\n        // The batch store is responsible to load all required stores for the detail page in one request\n        me.batchStore = me.getStore('Batch');\n        me.batchStore.getProxy().extraParams.articleId = articleId;\n        me.batchStore.load({\n            callback: function(records, operation) {\n                var storeData = records[0];\n                // When store has been loaded use the first record as data array to create the required stores\n                if (operation.success === true) {\n                    // Prepare the associated stores to use them in the detail page\n                    var article = storeData.getArticle().first();\n                    me.subApplication.article = article;\n\n                    if (article) {\n                        if (lastFilter != null) {\n                            article.getPrice().filter(lastFilter);\n                        }\n                        me.reconfigureAssociationComponents(article);\n                    }\n                }\n            }\n        });\n    },\n\n    onCancel: function(win) {\n        win.destroy();\n    },\n\n    /**\n     * Event listener function which fired when the user clicks the duplicate button in the side bar.\n     */\n    onDuplicateArticle: function(article) {\n        var me = this,\n            detailRecord = me.getDetailForm().getRecord();\n\n        // Use the detailRecord for the id because article in split view mode can be outdated\n        if (!detailRecord || !detailRecord.get('id')) {\n            return;\n        }\n\n        Ext.Ajax.request({\n            url: '{url controller=\"article\" action=\"duplicateArticle\"}',\n            method: 'POST',\n            params: {\n                articleId: detailRecord.get('id')\n            },\n            success: function(response, opts) {\n                var operation = Ext.decode(response.responseText);\n                if (operation.success == true && operation.articleId) {\n                    Shopware.app.Application.addSubApplication({\n                        name: 'Shopware.apps.Article',\n                        action: 'detail',\n                        params: {\n                            needGenerate: operation.isConfigurator,\n                            articleId: operation.articleId\n                        }\n                    });\n\n                }\n            }\n        });\n\n    },\n\n    /**\n     * Event listener function which fired when the user clicks the delete button.\n     * @param article\n     */\n    onDeleteArticle: function(article) {\n        var me = this,\n            win = me.getMainWindow(),\n            articleModel = me.getDetailForm().getRecord();\n\n        // Use the model from the record because article in split view mode can be outdated\n        if (articleModel instanceof Ext.data.Model && articleModel.get('id') > 0) {\n            Ext.MessageBox.confirm(me.snippets.growlMessage, me.snippets.removeArticle , function (response) {\n                if ( response !== 'yes' ) {\n                    return;\n                }\n                articleModel.destroy({\n                    callback: function(operation) {\n                        Shopware.Notification.createGrowlMessage(me.snippets.saved.title, me.snippets.saved.removeMessage, me.snippets.growlMessage);\n                        win.destroy();\n                        me.refreshArticleList();\n                    }\n                });\n            });\n        }\n    },\n\n    /**\n     * Event will be fired when the user clicks the preview button.\n     */\n    onArticlePreview: function(article, combo) {\n        var me = this,\n            shopId = combo.getValue();\n\n        article = me.subApplication.article;\n\n        if (!(article instanceof Ext.data.Model) || !Ext.isNumeric(shopId)) {\n            return;\n        }\n\n        var url = '{url action=previewDetail}'\n            + '?shopId=' + shopId\n            + '&articleId=' + article.get('id');\n        window.open(url);\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the add link button.\n     * @event\n     * @param { Ext.grid.Panel } grid The link grid\n     * @param { Object } form The link record\n     */\n    onAddLink: function(grid, form) {\n        var me = this, model,\n            store = grid.getStore(),\n            values = form.getValues();\n\n        if (!form.getForm().isValid()) {\n            return;\n        }\n        if (form.getForm().getRecord()) {\n            model = form.getForm().getRecord();\n            form.getForm().updateRecord(model);\n        } else {\n            model = Ext.create('Shopware.apps.Article.model.Link', values);\n        }\n        store.add(model);\n        form.getForm().reset();\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the remove link action column.\n     * @event\n     * @param { Ext.grid.Panel } grid The link grid\n     * @param { Ext.data.Model } record The link record\n     */\n    onRemoveLink: function(grid, record) {\n        var me = this,\n            store = grid.getStore();\n\n        if (store instanceof Ext.data.Store && record instanceof Ext.data.Model) {\n            store.remove(record);\n        }\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the add download button.\n     *\n     * @event\n     * @param { Ext.grid.Panel } grid The download grid\n     * @param { Ext.data.Model } record The download record\n     */\n    onAddDownload: function(grid, form) {\n        var me = this, model,\n            store = grid.getStore(),\n            values = form.getValues();\n\n        if (!form.getForm().isValid()) {\n            return;\n        }\n        if (form.getForm().getRecord()) {\n            model = form.getForm().getRecord();\n            form.getForm().updateRecord(model);\n        } else {\n            model = Ext.create('Shopware.apps.Article.model.Download', values);\n        }\n        store.add(model);\n        form.getForm().reset();\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the remove download action column.\n     *\n     * @event\n     * @param { Ext.grid.Panel } grid The download grid\n     * @param { Ext.data.Model } record The download record\n     */\n    onRemoveDownload: function(grid, record) {\n        var me = this,\n            store = grid.getStore();\n\n        if (store instanceof Ext.data.Store && record instanceof Ext.data.Model) {\n            store.remove(record);\n        }\n    },\n\n    loadPropertyGrid: function(propertyGroupId) {\n        var me = this,\n            grid = me.getPropertyGrid(),\n            propertyStore = me.getStore('Property');\n\n        if (propertyGroupId) {\n            propertyStore.getProxy().extraParams.propertyGroupId = propertyGroupId;\n            propertyStore.load({\n                params: {\n                    articleId: me.subApplication.article.get('id')\n                }\n            });\n\n            grid.show();\n            return;\n        }\n        grid.hide();\n    },\n\n    loadPropertyStore: function(article) {\n        var me = this;\n\n        var filterGroupId = article.get('filterGroupId');\n        me.loadPropertyGrid(filterGroupId);\n    },\n\n    prepareArticleProperties: function(article, callback) {\n        var me = this,\n            propertyStore = me.getStore('Property'),\n            opts = {\n                callback: function () {\n                    if (Ext.isFunction(callback)) {\n                        callback();\n                    }\n                }\n            };\n\n        if(article.get('id')) {\n            propertyStore.getProxy().extraParams.articleId = article.get('id');\n        }\n        propertyStore.each(function(property) {\n            property.setDirty();\n        });\n\n        propertyStore[propertyStore.getUpdatedRecords().length ? 'save' : 'load'](opts);\n    },\n\n    /**\n     * Property set combo box changed => Toggle grid\n     */\n    onChangePropertyGroup: function (combo) {\n        var me = this,\n            grid = me.getPropertyGrid(),\n            record = me.subApplication.article;\n\n        if (combo.getValue() === null) {\n            record.set('filterGroupId', null);\n            grid.hide();\n        } else {\n            me.loadPropertyGrid(record.get('filterGroupId'));\n        }\n    },\n\n    /**\n     * Event listener function which fired when the user want to remove a price row.\n     *\n     * @param record\n     * @param view\n     * @param rowIndex\n     */\n    onRemovePrice: function(record, view, rowIndex) {\n        var me = this,\n            store = view.getStore(),\n            previousPrice = store.getAt(rowIndex-1);\n\n        if (rowIndex > 1) {\n            var column = view.panel.columns[view.panel.columns.length-1],\n                cell = view.getCell(previousPrice, column),\n                icon = Ext.get(cell.query('.x-action-col-icon'));\n\n            icon.removeCls('x-hidden');\n            icon.addCls('sprite-minus-circle-frame');\n        }\n\n        me.removeCloneFlag(store);\n        store.remove(record);\n        previousPrice.set('to', null);\n    },\n\n    /**\n     * Helper function to remove the cloned flag for the current customer group.\n     * @param store\n     */\n    removeCloneFlag: function(store) {\n        store.each(function(price) {\n            price.set('cloned', false);\n        });\n    },\n\n    /**\n     * Event listener function which fired when the user\n     * edit a column of the price grid.\n     * This function handles the calculation for the\n     * prices and discounts.\n     *\n     * @param editor\n     * @param event\n     */\n    onAfterEditPrice: function(editor, event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            nextRecord = store.getAt(event.rowIdx + 1),\n            row = Ext.get(event.row),\n            icon = Ext.get(row.query('.x-action-col-icon'));\n\n        me.removeCloneFlag(store);\n\n        // User changed the \"to\" field?\n        if ( event.field === 'to') {\n            // Check if the user insert a numeric to value\n            if (Ext.isNumeric(event.value)) {\n                icon.addCls('x-hidden');\n\n                // If this is the case we need to check if the current row is the last row.\n                if (!nextRecord) {\n                    // If the current row is the last row, we need to add a new row with \"to any\"\n                    var newRecord = Ext.create('Shopware.apps.Article.model.Price', {\n                        from: event.value + 1,\n                        customerGroupKey: record.get('customerGroupKey', null)\n                    });\n                    store.add(newRecord);\n                } else {\n                    // If the current row is not the last row we have to increase the from value of the next row\n                    nextRecord.set('from', event.value + 1);\n                }\n            } else {\n                icon.removeCls('x-hidden');\n                icon.addCls('sprite-minus-circle-frame');\n            }\n        } else if ( event.field === 'price') {\n           this.updatedPriceField(event);\n            // If the user has edit the percent column, we have to calculate the price\n        } else if (event.field === 'percent') {\n            this.updatedPercentField(event);\n        } else if (event.field === 'percentPseudo') {\n            this.updatedPseudoPercentField(event);\n        } else if (event.field === 'pseudoPrice') {\n            this.updatedPseudoPriceField(event);\n        }\n    },\n\n    /**\n     * Helper function to update related fields of percent\n     * @param event\n     */\n    updatedPercentField: function(event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            firstRecord = store.getAt(0),\n            firstPrice = firstRecord.get('price'),\n            price = record.get('price');\n\n        if (firstPrice === price) {\n            firstRecord.set('percent', null);\n        } else if(event.value > 0) {\n            price = firstPrice / 100 * (100 - event.value);\n            price = price.toFixed(2);\n            record.set('price', price);\n        }\n\n        // We need to trigger update on PriceField without copy&paste all that checks and updates\n        me.updatedPriceField(event);\n    },\n\n    /**\n     * Helper function to update related fields of price\n     *\n     * @param event\n     */\n    updatedPriceField: function(event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            firstRecord = store.getAt(0),\n            firstPrice = firstRecord.get('price'),\n            previousPrice = store.getAt(event.rowIdx -1),\n            price = record.get('price'),\n            percent,\n            pseudoPrice = record.get('pseudoPrice'),\n            percentPseudo = record.get('percentPseudo');\n\n        if(price && previousPrice && previousPrice.get('price') < price) {\n            record.set('price', previousPrice.get('price') - 0.01);\n            // We need to trigger update on PriceField without copy&paste all that checks and updates\n            me.updatedPriceField(event);\n        } else if(price && firstPrice > price) {\n            percent = (firstPrice - price) / firstPrice * 100;\n            percent = percent.toFixed(2);\n            record.set('percent', percent);\n        } else {\n            record.set('percent', null);\n        }\n\n        if(price && pseudoPrice > 0) {\n            percentPseudo = 100 - 100 / pseudoPrice * price;\n            percentPseudo = percentPseudo.toFixed(2);\n            record.set('percentPseudo', percentPseudo);\n        }\n    },\n\n    /**\n     * Helper function to update related fields of pseudoPercent\n     *\n     * @param event\n     */\n    updatedPseudoPercentField: function(event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            firstRecord = store.getAt(0),\n            firstPrice = firstRecord.get('price'),\n            price = record.get('price'),\n            pseudoPrice = record.get('pseudoPrice');\n\n        if(pseudoPrice > 0) {\n            // If the user enters 0 or nothing, the price has to be the pseudoPrice\n            if(!Ext.isNumeric(event.value) || event.value === 0) {\n                record.set('pseudoPrice', null);\n            } else if(event.value > 0) {\n                pseudoPrice = (price / (100 - event.value)) * 100;\n                pseudoPrice = pseudoPrice.toFixed(2);\n                record.set('pseudoPrice', pseudoPrice);\n            }\n\n            // We need to trigger update on PriceField without copy&paste all that checks and updates\n            me.updatedPriceField(event);\n        } else {\n            /**\n             * If the user enters a value when no pseudoPrice exists, we have to discard it\n             * because we strictly calculate by pseudoPrice - not revers by price\n             */\n            record.set('percentPseudo', 0);\n        }\n    },\n\n    /**\n     * Helper function to update related fields of pseudoPrice\n     *\n     * @param event\n     */\n    updatedPseudoPriceField: function(event) {\n        var me = this,\n            record = event.record,\n            price = record.get('price'),\n            percentPseudo = record.get('percentPseudo');\n\n        // If the user enters 0 or nothing, the percentPseudo has to be 0\n        if(!Ext.isNumeric(event.value) || event.value === 0) {\n            record.set('percentPseudo', 0);\n        } else if(event.value > 0) {\n            percentPseudo = 100 - (100 / event.value * price);\n            percentPseudo = percentPseudo.toFixed(2);\n            record.set('percentPseudo', percentPseudo);\n        }\n\n        // We need to trigger update on PriceField without copy&paste all that checks and updates\n        me.updatedPriceField(event);\n    },\n\n    /**\n     * Event listener function which fired when the user\n     * starts the edit of a price row.\n     *\n     * @param plugin\n     * @param event\n     * @return\n     */\n    onBeforeEditPrice: function(plugin, event) {\n        var store = event.grid.store,\n            maxValue = null,\n            minValue = 1,\n            price = event.record,\n            editor = event.column.getEditor(event.record),\n            previousPrice = store.getAt(event.rowIdx -1),\n            nextPrice = store.getAt(event.rowIdx + 1);\n\n        // Check if the current row is the last row\n        if ( event.field === 'to') {\n            // If the current row isn't the last row, we want to cancel the edit.\n            if (nextPrice) {\n                return false;\n            }\n            // Check if the current row has a previous row.\n            if (previousPrice) {\n                // If this is the case we have to set the min value for the \"to\" field\n                // +1 of the previous price\n                minValue = ~~(previousPrice.get('to') * 1) + 1;\n            }\n            editor.setMinValue(minValue);\n        }\n        // Check if the user want to edit the price field.\n        if ( event.field === \"price\" ) {\n            if (previousPrice && previousPrice.get('price') > 0) {\n                maxValue = previousPrice.get('price') - 0.01;\n            }\n            editor.setMaxValue(maxValue);\n        }\n    },\n\n    /**\n     * Removes the cloned prices of the article price store.\n     * @param priceStore\n     */\n    removeClonedPrices: function(priceStore) {\n        var toRemove = [];\n\n        priceStore.clearFilter();\n        priceStore.each(function(price) {\n            if (price instanceof Ext.data.Model && price.get('cloned')) {\n                toRemove.push(price);\n            }\n        });\n\n        priceStore.remove(toRemove);\n    },\n\n    /**\n     * Event will be fired when the user change the tab panel in the price field set.\n     *\n     * @event\n     * @param { Object } oldTab The previous tab panel\n     * @param { Object } newTab The clicked tab panel\n     * @param { Ext.data.Store } priceStore The price store\n     * @param { Array } customerGroupStore The price data of the first customer group.\n     */\n    onPriceTabChanged: function(oldTab, newTab, priceStore, customerGroupStore) {\n        var me = this,\n            toRemove = [],\n            firstGroupPrices = [],\n            customerGroup,\n            firstGroup = customerGroupStore.first();\n\n        customerGroup = newTab.customerGroup;\n        priceStore.clearFilter();\n\n        // First we remove all prices which have a cloned flag and save the prices of the first group.\n        priceStore.each(function(item) {\n            if (item instanceof Ext.data.Model && item.get('cloned')) {\n                toRemove.push(item);\n            }\n            if (item.get('customerGroupKey') === firstGroup.get('key')) {\n                firstGroupPrices.push(item);\n            }\n        });\n\n        // We have to collect the records, because if we remove the items in the for each,\n        // the store can't iterate the records correctly.\n        priceStore.remove(toRemove);\n\n        // Now we can filter the price store for the current customer group.\n        priceStore.filter({\n            filterFn: function(item) {\n                return item.get('customerGroupKey') === customerGroup.get('key');\n            }\n        });\n\n        // If the current customer group is the first/main customer group, we can return now.\n        if (customerGroup.get('id') === firstGroup.get('id')) {\n            return false;\n        }\n\n        // If no prices given for the current customer group, we have to copy the prices of the main customer group\n        if (priceStore.data.length === 0) {\n            priceStore.add(me.clonePrices(firstGroupPrices, customerGroup));\n        }\n    },\n\n    /**\n     * Clones the passed price array, sets the cloned flag for the cloned prices and\n     * sets the customer group equals the key of the passed group.\n     *\n     * @param firstGroupPrices\n     * @param customerGroup\n     */\n    clonePrices: function(firstGroupPrices, customerGroup) {\n        var me = this,\n            clonedPrices = [];\n\n        Ext.each(firstGroupPrices, function(price) {\n            var priceCopy = Ext.create('Shopware.apps.Article.model.Price', price.data);\n            priceCopy.set('customerGroupKey', customerGroup.get('key'));\n            priceCopy.set('cloned', true);\n            priceCopy.set('id', null);\n            clonedPrices.push(priceCopy);\n        });\n\n        return clonedPrices;\n    }\n});\n//{/block}\n", "/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n *\n * @category   Shopware\n * @package    Article\n * @subpackage Detail\n * @version    $Id$\n * @author shopware AG\n */\n\n/**\n * Shopware UI - Article detail window.\n * The detail window contains the definition of the base form and the element orientation within the form element.\n * The window passes the article record and the different stores to the form elements.\n *\n * @link http://www.shopware.de/\n * @license http://www.shopware.de/license\n * @package Article\n * @subpackage Detail\n */\n//{namespace name=backend/article/view/main}\n//{block name=\"backend/article/view/detail/window\"}\nExt.define('Shopware.apps.Article.view.detail.Window', {\n    /**\n     * Define that the order main window is an extension of the enlight application window\n     * @string\n     */\n    extend:'Enlight.app.Window',\n    /**\n     * Set base css class prefix and module individual css class for css styling\n     * @string\n     */\n    cls:Ext.baseCSSPrefix + 'article-detail-window',\n    /**\n     * List of short aliases for class names. Most useful for defining xtypes for widgets.\n     * @string\n     */\n    alias:'widget.article-detail-window',\n    /**\n     * Set no border for the window\n     * @boolean\n     */\n    border:false,\n    /**\n     * True to automatically show the component upon creation.\n     * @boolean\n     */\n    autoShow:true,\n    /**\n     * Set border layout for the window\n     * @string\n     */\n    layout:'fit',\n    /**\n     * Define window width\n     * @integer\n     */\n    width:'80%',\n    /**\n     * Define window height\n     * @integer\n     */\n    height:'90%',\n    /**\n     * True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window.\n     * @boolean\n     */\n    maximizable:true,\n\n    /**\n     * True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window.\n     * @boolean\n     */\n    minimizable:true,\n\n    /**\n     * A flag which causes the object to attempt to restore the state of internal properties from a saved state on startup.\n     */\n    stateful:false,\n\n    /**\n     * The unique id for this object to use for state management purposes.\n     */\n    stateId:'shopware-article-detail-window',\n\n    /**\n     * Contains all snippets for the component\n     * @object\n     */\n    snippets: {\n        titleGeneral: '{s name=window_title_general}Product details{/s}',\n        titleNew: '{s name=window_title}Article details: new article{/s}',\n        titleEdit:'{s name=window_title_edit}Article details : [0]{/s}',\n        formTab:'{s name=base_data}Base data{/s}',\n        categoryTab:'{s name=category_data}Categories{/s}',\n        imageTab:'{s name=image_tab}Images{/s}',\n        propertyTab:'{s name=property_tab}Properties{/s}',\n        variantTab:'{s name=variant_tab}Variants{/s}',\n        configuratorTab:'{s name=configurator_tab}Configurator{/s}',\n        linkTab:'{s name=link_tab}Links{/s}',\n        downloadTab:'{s name=download_tab}Downloads{/s}',\n        crossSellingTab:'{s name=cross_selling_tab}Cross-Selling{/s}',\n        esdTab:'{s name=esd_tab}ESD{/s}',\n        statisticTab:'{s name=statistic_tab}Statistics{/s}',\n        resourcesTab: '{s name=resources_tab}Resources{/s}',\n        save:'{s name=save_button}Save article{/s}',\n        cancel:'{s name=cancel_button}Cancel{/s}',\n        categoryNotice:'{s name=category/category_notice}Please select the category to which the product <strong>[0]</strong> is supposed to be assigned.{/s}',\n        categoryNoticeTitle:'{s name=category/category_assignment}Assign categories{/s}',\n        invalidPlugin: '{s name=window_invalid_plugin}The plugin [0] is not compatible with Shopware 4.1. Please uninstall the plugin or contact the provider regarding for a compatible version.{/s}',\n        descriptions: {\n            title:'{s name=detail/description/title}Description{/s}'\n        },\n        meta: {\n            title:'{s name=detail/meta/title}meta information{/s}',\n            metaTitle: {\n                label: '{s name=detail/meta/meta_title_label}Title{/s}',\n                support: '{s name=detail/meta/meta_title_support}Meta-Title for search engines{/s}'\n            },\n            description: {\n                label: '{s name=detail/meta/description_label}Short description{/s}',\n                support: '{s name=detail/meta/description_support}Short description for search engines, exports and overviews{/s}'\n            },\n            keywords: {\n                label: '{s name=detail/meta/keywords_label}Keywords{/s}',\n                support: '{s name=detail/meta/keywords_support}Meta keywords for search engines and intelligent search{/s}'\n            }\n        },\n        additional: {\n            title:'{s name=detail/additional_fields/title}Additional fields{/s}',\n            comment:'{s name=detail/additional_fields/comment}Comment{/s}',\n        },\n        basePrice: {\n            title:'{s name=detail/base_price/title}Base price calculation{/s}',\n            content:'{s name=detail/base_price/content}Content{/s}',\n            unit:'{s name=detail/base_price/unit}Unit{/s}',\n            basicUnit:'{s name=detail/base_price/basic_unit}Basic unit{/s}',\n            packingUnit:'{s name=detail/base_price/packing_unit}Packing unit{/s}',\n            empty:'{s name=empty}Please select...{/s}'\n        },\n        variant: {\n            listing: '{s name=variant/listing_tab}Listing{/s}',\n            configurator: '{s name=variant/configurator_tab}Configure variants{/s}',\n            settings: '{s name=variant/settings_tab}Settings{/s}',\n            button: {\n                listing: '{s name=variant/save_button_listing}Save variants{/s}',\n                settings: '{s name=variant/save_button_settings}Save settings{/s}',\n                configurator: '{s name=variant/save_button_configurator}Generate variants{/s}'\n            }\n        },\n        esd: {\n            button: {\n                save: '{s name=esd/save_button}Save ESD{/s}',\n                back: '{s name=esd/back_button}Back to overview{/s}'\n            }\n        },\n        variantTabTooltip: \"{s name=variant_tab/tooltip}Functionality isn't available in the split view mode.{/s}\"\n    },\n\n    /**\n     * The initComponent template method is an important initialization step for a Component.\n     * It is intended to be implemented by each subclass of Ext.Component to provide any needed constructor logic.\n     * The initComponent method of the class being created is called first,\n     * with each initComponent method up the hierarchy to Ext.Component being called thereafter.\n     * This makes it easy to implement and, if needed, override the constructor logic of the Component at any step in the hierarchy.\n     * The initComponent method must contain a call to callParent in order to ensure that the parent class' initComponent method is also called.\n     *\n     * @return void\n     */\n    initComponent:function () {\n        var me = this;\n        me.bbar = me.createToolbar();\n        me.registerEvents();\n        me.registerGlobalEvents();\n        me.callParent(arguments);\n        me.changeTitle();\n\n        // A incompatible plugin was found, throw a alert to inform the user.\n        if(me._invalidPlugin) {\n            Ext.MessageBox.alert(me.snippets.titleGeneral, Ext.String.format(me.snippets.invalidPlugin, '\"' + me['_invalidClassName'] + '\"'));\n        }\n\n        me.on('storesLoaded', me.onStoresLoaded, me);\n    },\n\n    registerGlobalEvents: function () {\n        Shopware.app.Application.on('assign-variant-image', this.onAssignImageToVariant, this);\n        Shopware.app.Application.on('grid-process-done', this.onProcessDone, this);\n    },\n\n    /**\n     * @param { Object } task\n     * @param { Ext.data.Model } record\n     * @param { Function } callback\n     */\n    onAssignImageToVariant: function (task, record, callback) {\n        this.fireEvent('assignVariantImage', task, record, callback);\n    },\n\n    /**\n     * @param { Shopware.window.Progress } progress\n     */\n    onProcessDone: function (progress) {\n        if (progress.name !== 'image-variants-progress-window') {\n            return;\n        }\n\n        this.fireEvent('gridProcessDone', progress);\n    },\n\n    /**\n     * Registers additional component events.\n     */\n    registerEvents: function() {\n        this.addEvents(\n            /**\n             * Event will be fired when the user clicks the save button.\n             *\n             * @event\n             * @param [object] The detail window\n             * @param [Ext.data.Model] The article record.\n             */\n            'saveArticle',\n            /**\n             * Event will be fired when the user clicks the cancel button.\n             *\n             * @event\n             * @param [object] The detail window\n             */\n            'cancel',\n\n            'storesLoaded'\n        );\n    },\n\n    /**\n     * Creates the main tab panel which displays the different tabs for the article sections.\n     * To extend the tab panel this function can be override.\n     *\n     * @return Ext.tab.Panel\n     */\n    createMainTabPanel: function() {\n        var me = this, tooltip = '';\n\n        if (me.subApp.splitViewActive) {\n            tooltip = me.snippets.variantTabTooltip;\n        }\n\n        me.categoryTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.categoryTab,\n            disabled: true,\n            layout: 'border',\n            name: 'category'\n        });\n\n        me.imageTab = Ext.create('Ext.container.Container', {\n            layout: {\n                type: 'vbox',\n                align: 'stretch'\n            },\n            title: me.snippets.imageTab,\n            name: 'image',\n            disabled: true,\n            cls: Ext.baseCSSPrefix + 'image-tab-container'\n        });\n\n        me.variantTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.variantTab,\n            disabled: true,\n            layout: 'fit',\n            name: 'variant-tab',\n            tabConfig: (me.subApp.splitViewActive) ? {\n                tooltip: tooltip,\n                tooltipType: Ext.isGecko ? 'title' : 'qtip'\n            } : { }\n        });\n\n        me.crossSellingTab = Ext.create('Ext.form.Panel', {\n            title: me.snippets.crossSellingTab,\n            disabled: true,\n            layout: 'fit',\n            deferredRender: true\n        });\n\n        me.propertiesTab = Ext.create('Ext.container.Container', {\n            disabled: true,\n            layout: 'fit',\n            name: 'properties-tab',\n            title: me.snippets.propertyTab,\n            items: [ me.createPropertiesFieldSet() ]\n        });\n\n        me.esdTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.esdTab,\n            disabled: true,\n            name: 'esd-tab',\n            layout: 'card',\n            deferredRender: true\n        });\n\n        me.statisticTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.statisticTab,\n            disabled: true,\n            name: 'statistic-tab',\n            layout: {\n                align: 'stretch',\n                padding: 10,\n                type: 'vbox'\n            }\n        });\n\n        me.resourcesTab = Ext.create('Ext.form.Panel', {\n            title: me.snippets.resourcesTab,\n            name: 'resources-tab',\n            disabled: true,\n            autoScroll: true,\n            bodyPadding: 10\n        });\n\n        return me.mainTab = Ext.create('Ext.tab.Panel', {\n            name: 'main-tab-panel',\n            items: [\n                me.createBaseTab(),\n                me.categoryTab,\n                me.imageTab,\n                me.variantTab,\n                me.propertiesTab,\n                me.crossSellingTab,\n                me.esdTab,\n                me.statisticTab,\n                me.resourcesTab\n            ]\n        });\n    },\n\n\n    /**\n     * Changes the title of the article detail window header and the footer button.\n     */\n    changeTitle: function() {\n        var me = this, title, footerButton;\n\n        title = me.snippets.titleNew;\n        if (me.article && me.article.get('id')>0) {\n            title = Ext.String.format(me.snippets.titleEdit, me.article.get('name'));\n        }\n        me.setTitle(title);\n\n        // Change the title of the footer button\n        if(me._toolbarBtn) {\n            footerButton = me._toolbarBtn;\n            footerButton.setText(title);\n        }\n    },\n\n    /**\n     * Creates the tab panel for the base data. Contains a form panel which allows the user\n     * to edit the selected record\n     * @return Ext.container.Container\n     */\n    createBaseTab: function() {\n        var me = this;\n\n        me.detailForm = Ext.create('Ext.form.Panel', {\n            region:'center',\n            name: 'detail-form',\n            bodyPadding: 10,\n            autoScroll: true,\n            defaults: {\n                labelWidth: 155\n            },\n            plugins: [{\n                ptype: 'translation',\n                pluginId: 'translation',\n                translationType: 'article',\n                translationMerge: false,\n                translationKey: null\n            }],\n            items: [\n                me.createBaseFieldSet(),\n                me.createPriceFieldSet(),\n                me.createDescriptionFieldSet(),\n                me.createMetaFieldSet(),\n                me.createBasePriceFieldSet(),\n                me.createSettingsFieldSet()\n            ],\n            dockedItems: [\n                me.createActionsToolbar()\n            ]\n        });\n\n        me.attributeForm = Ext.create('Shopware.attribute.Form', {\n            table: 's_articles_attributes',\n            allowTranslation: false,\n            fieldSetPadding: 0,\n            translationForm: me.detailForm\n        });\n        me.detailForm.add(me.attributeForm);\n\n        return me.detailContainer = Ext.create('Ext.container.Container', {\n            layout: 'fit',\n            name: 'main',\n            title: me.snippets.formTab,\n            items: [\n                me.detailForm\n            ]\n        });\n    },\n\n    /**\n     * Creates the field set for the article property configuration.\n     */\n    createPropertiesFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Properties');\n    },\n\n    /**\n     * Creates the field set for the article setting configuration.\n     */\n    createSettingsFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Settings');\n    },\n\n    /**\n     * Creates the toolbar for the article actions.\n     * @return Shopware.apps.Article.view.detail.Toolbar\n     */\n    createActionsToolbar: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Toolbar', {\n            subApp: this.subApp\n        });\n    },\n\n    /**\n     * Creates the base field set for the detail form.\n     * @return Shopware.apps.Article.view.detail.Base\n     */\n    createBaseFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Base');\n    },\n\n    /**\n     * Creates the field set for the article price configuration.\n     */\n    createPriceFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Prices');\n    },\n\n\n    /**\n     * Creates the field set for the article base price calculation.\n     * @return Ext.form.FieldSet\n     */\n    createBasePriceFieldSet: function() {\n        var me = this;\n\n        me.unitComboBox = Ext.create('Ext.form.field.ComboBox', {\n            name: 'mainDetail[unitId]',\n            queryMode: 'local',\n            fieldLabel: me.snippets.basePrice.unit,\n            emptyText: me.snippets.basePrice.empty,\n            displayField: 'name',\n            editable:false,\n            valueField: 'id',\n            labelWidth: 155,\n            anchor: '100%',\n            xtype: 'textfield'\n        });\n\n        return Ext.create('Ext.form.FieldSet', {\n            layout: 'anchor',\n            cls: Ext.baseCSSPrefix + 'article-base-price-field-set',\n            defaults: {\n                labelWidth: 155,\n                anchor: '100%',\n                xtype: 'textfield'\n            },\n            title: me.snippets.basePrice.title,\n            items: [\n                me.unitComboBox, {\n                    xtype: 'numberfield',\n                    submitLocaleSeparator: false,\n                    decimalPrecision: 4,\n                    name: 'mainDetail[purchaseUnit]',\n                    fieldLabel: me.snippets.basePrice.content\n                }, {\n                    xtype: 'numberfield',\n                    submitLocaleSeparator: false,\n                    name: 'mainDetail[referenceUnit]',\n                    decimalPrecision: 3,\n                    fieldLabel: me.snippets.basePrice.basicUnit\n                }, {\n                    name: 'mainDetail[packUnit]',\n                    translationName: 'packUnit',\n                    translatable: true,\n                    fieldLabel: me.snippets.basePrice.packingUnit\n                }\n            ]\n        });\n    },\n\n    /**\n     * Creates the description field set for the main form panel.\n     * Contains the keywords, short and long description.\n     * @return Ext.form.FieldSet\n     */\n    createDescriptionFieldSet: function() {\n        var me = this;\n\n        return Ext.create('Ext.form.FieldSet', {\n            layout: 'anchor',\n            cls: Ext.baseCSSPrefix + 'article-description-field-set',\n            defaults: {\n                labelWidth: 155,\n                anchor: '100%',\n                translatable: true,\n                xtype: 'textarea'\n            },\n            title: me.snippets.descriptions.title,\n            items: [\n                {\n                    xtype: 'tinymce',\n                    name: 'descriptionLong',\n                    margin: '0 0 15',\n                    cls: Ext.baseCSSPrefix + 'article-description-long',\n                    height: 100\n                }\n            ]\n        });\n    },\n\n    /**\n     * Creates the meta field set for the main form panel.\n     * Contains the keywords, and the short meta description\n     * @return Ext.form.FieldSet\n     */\n    createMetaFieldSet: function () {\n        var me = this;\n\n        return Ext.create('Ext.form.FieldSet', {\n            layout: 'anchor',\n            cls: Ext.baseCSSPrefix + 'article-meta-field-set',\n            defaults: {\n                labelWidth: 155,\n                anchor: '100%',\n                translatable: true,\n                xtype: 'textarea'\n            },\n            title: me.snippets.meta.title,\n            items: [\n                {\n                    xtype: 'textfield',\n                    name: 'metaTitle',\n                    fieldLabel: me.snippets.meta.metaTitle.label,\n                    supportText: me.snippets.meta.metaTitle.support\n                },\n                {\n                    name: 'description',\n                    height: 100,\n                    fieldLabel: me.snippets.meta.description.label,\n                    supportText: me.snippets.meta.description.support\n                },\n                {\n                    name: 'keywords',\n                    height: 100,\n                    fieldLabel: me.snippets.meta.keywords.label,\n                    supportText: me.snippets.meta.keywords.support\n                }\n            ]\n        });\n    },\n\n    /**\n     * Creates the tab panel tab for the category selection.\n     * @return Array\n     */\n    createCategoryTab: function() {\n        var me = this, rightContainer;\n\n        me.categoryTree = Ext.create('Shopware.apps.Article.view.category.Tree', {\n            store: me.categoryTreeStore,\n            region: 'west'\n        });\n\n        me.seoCategoryList = Ext.create('Shopware.apps.Article.view.category.Seo', {\n            flex: 1,\n            store: me.article.getSeoCategories(),\n            margin: 10,\n            autoScroll: true\n        });\n\n        me.seoCategoryList.setCategoryStore(me.article.getCategory());\n\n        me.categoryDropZone = Ext.create('Shopware.apps.Article.view.category.DropZone', {\n            height: 120,\n            autoScroll:true,\n            margin: 10\n        });\n\n        me.categoryList = Ext.create('Shopware.apps.Article.view.category.List', {\n            article: me.article,\n            flex: 1,\n            autoScroll:true,\n            margin: 10\n        });\n\n        rightContainer = Ext.create('Ext.container.Container', {\n            region: 'center',\n            bodyPadding: 10,\n            name: 'category-tab',\n            plain: true,\n            autoScroll:true,\n            layout: {\n                align: 'stretch',\n                type: 'vbox'\n            },\n            items: [\n                me.categoryDropZone, me.categoryList, me.seoCategoryList\n            ]\n        });\n\n        return [ me.categoryTree, rightContainer ];\n    },\n\n    /**\n     * Creates the image tab panel.\n     * @return Array\n     */\n    createImageTab: function() {\n        var me = this, topContainer;\n\n        me.imageList = Ext.create('Shopware.apps.Article.view.image.List', {\n            article: me.article,\n            flex: 5,\n            layout: {\n                anchor: '100%'\n            }\n        });\n\n        me.imageInfo = Ext.create('Shopware.apps.Article.view.image.Info', {\n            flex: 4,\n            margin: '0 0 0 10',\n            configuratorGroupStore: me.configuratorGroupStore\n        });\n\n        topContainer = Ext.create('Ext.container.Container', {\n            flex: 1,\n            padding: 10,\n            layout: {\n                type: 'hbox',\n                align: 'stretch'\n            },\n            items: [\n                me.imageList,\n                me.imageInfo\n            ]\n        });\n\n        return [ topContainer ];\n    },\n\n    /**\n     * Creates the window toolbar which docked bottom and contains the cancel and save button.\n     * @return Ext.toolbar.Toolbar\n     */\n    createToolbar: function() {\n        var me = this;\n\n        //create the save button which fire the save event, the save event is handled in the detail controller.\n        me.saveButton = Ext.create('Ext.button.Button', {\n            cls:'primary',\n            name: 'save-article-button',\n            text: me.snippets.save,\n            handler: function() {\n                me.fireEvent('saveArticle', me, me.article);\n            }\n        });\n\n        //creates the cancel button which fire the cancel event, the cancel event is handled in the detail controller.\n        me.cancelButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.cancel,\n            name: 'cancel-button',\n            cls: 'secondary',\n            handler: function() {\n                me.fireEvent('cancel', me, me.article);\n            }\n        });\n\n        //creates the global save button for the configurator\n        me.configuratorSaveButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.variant.button.configurator,\n            cls: 'primary',\n            hidden: true,\n            name: 'configurator-save-button',\n            handler: function() {\n                me.variantListing.fireEvent('createVariants', me.article);\n            }\n        });\n\n        //creates the global save button for the esd\n        me.esdSaveButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.esd.button.save,\n            cls: 'primary',\n            hidden: true,\n            name: 'esd-save-button',\n            handler: function() {\n                me.esdListing.fireEvent('saveEsd');\n            }\n        });\n\n        //creates the global save button for the esd\n        me.esdBackButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.esd.button.back,\n            cls: 'secondary',\n            hidden: true,\n            name: 'esd-back-button',\n            handler: function() {\n                me.esdListing.fireEvent('backToList');\n            }\n        });\n\n        //creates the toolbar with a spaces, the cancel and save button.\n        return Ext.create('Ext.toolbar.Toolbar', {\n            items: [\n                { xtype: 'tbfill' },\n                me.cancelButton,\n                /*{if {acl_is_allowed privilege=save}}*/\n                me.saveButton,\n                /*{/if}*/\n                me.configuratorSaveButton,\n                me.esdBackButton,\n                me.esdSaveButton\n            ]\n        });\n\n    },\n\n    /**\n     * Creates the variant tab panel which contains the configuration elements for the article variants and configurator.\n     * @return Ext.container.Container\n     */\n    createVariantTab: function() {\n        var me = this, listing, configurator;\n        listing = me.createVariantListingTab();\n        configurator = me.createVariantConfiguratorTab();\n\n        me.configuratorTab = Ext.create('Ext.tab.Panel', {\n            name: 'configurator-tab',\n            items: [\n                listing,\n                configurator\n            ],\n            margin: 10\n        });\n\n        return me.configuratorTab;\n    },\n\n\n    /**\n     * Creates the listing component for the variant tab.\n     * @return Ext.container.Container\n     */\n    createVariantListingTab: function() {\n        var me = this;\n\n        me.variantStore = Ext.create('Shopware.apps.Article.store.Variant');\n\n        if (me.article) {\n            me.variantStore.getProxy().extraParams.articleId = me.article.get('id');\n        }\n\n        me.variantListing = Ext.create('Shopware.apps.Article.view.variant.List', {\n            border: false,\n            store: me.variantStore\n        });\n\n        return Ext.create('Ext.container.Container', {\n            items: [ me.variantListing ],\n            layout: 'fit',\n            name: 'listing',\n            title: me.snippets.variant.listing\n        });\n    },\n\n    /**\n     * Creates the variant configurator for the variant tab panel.\n     * @return Ext.container.Container.\n     */\n    createVariantConfiguratorTab: function() {\n        var me = this;\n\n        return Ext.create('Shopware.apps.Article.view.variant.Configurator', {\n            title: me.snippets.variant.configurator,\n            article: me.article,\n            dependencyStore: me.dependencyStore,\n            priceVariationStore: me.priceVariationStore,\n            name: 'configurator',\n            configuratorGroupStore: me.configuratorGroupStore,\n            articleConfiguratorSet: me.articleConfiguratorSet\n        });\n    },\n\n    createCrossselingTab: function() {\n        var me = this;\n\n        return Ext.create('Shopware.apps.Article.view.crossselling.Tab', {\n            name: 'crossselling',\n            article: me.article\n        });\n    },\n\n    /**\n     * Creates the esd tab which contains the configuration for the esd options.\n     * @return Ext.container.Container\n     */\n    createEsdTab: function() {\n        var me = this;\n\n        var esdStore      = Ext.create('Shopware.apps.Article.store.Esd');\n        var filteredStore = Ext.create('Shopware.apps.Article.store.Esd');\n        esdStore.addListener('beforeload', function(store, records) {\n            filteredStore.load({\n                params: {\n                    filterCandidates: true\n                }\n            });\n        });\n        esdStore.getProxy().extraParams.articleId = me.article.get('id');\n        filteredStore.getProxy().extraParams.articleId = me.article.get('id');\n\n        me.esdListing = Ext.create('Shopware.apps.Article.view.esd.List', {\n            esdStore: esdStore,\n            filteredStore: filteredStore,\n            article: me.article\n        });\n\n        return me.esdListing;\n    },\n\n    /**\n     * Creates the statistic tab which contains a graph for the article sales.\n     * @return Array\n     */\n    createStatisticTab: function() {\n        var me = this;\n\n        var statisticStore = Ext.create('Shopware.apps.Article.store.Statistic');\n        var chartStore = Ext.create('Shopware.apps.Article.store.Statistic');\n\n        statisticStore.getProxy().extraParams.articleId = me.article.get('id');\n        chartStore.getProxy().extraParams.articleId = me.article.get('id');\n        chartStore.getProxy().extraParams.chart = true;\n\n        var list = Ext.create('Shopware.apps.Article.view.statistics.List', {\n            flex: 1,\n            article: me.article,\n            store: statisticStore\n        });\n\n        var chart = Ext.create('Shopware.apps.Article.view.statistics.Chart', {\n            height: 250,\n            flex: 1,\n            article: me.article,\n            store: chartStore\n        });\n\n        return [ chart, list ];\n    },\n\n    /**\n     * Creates the resources tab that contains the additional links\n     */\n    createResourcesTab: function() {\n        var me = this;\n\n        me.resourcesLinks = Ext.create('Shopware.apps.Article.view.resources.Links', {\n            article: me.article\n        });\n\n        me.resourcesDownloads = Ext.create('Shopware.apps.Article.view.resources.Downloads', {\n            article: me.article\n        });\n\n        return [ me.resourcesLinks, me.resourcesDownloads ]\n    },\n\n    onStoresLoaded: function(article, stores) {\n        var me = this;\n        me.article = article;\n\n        me.unitComboBox.bindStore(stores['unit']);\n        me.supplierStore = stores['suppliers'];\n        window.setTimeout(function() {\n            me.detailForm.loadRecord(me.article);\n        }, 10);\n\n        me.categoryTab.add(me.createCategoryTab());\n        me.categoryTab.setDisabled(false);\n\n        me.imageTab.add(me.createImageTab());\n        me.imageTab.setDisabled(false);\n\n        me.variantTab.add(me.createVariantTab());\n\n        me.crossSellingTab.add(me.createCrossselingTab());\n        me.crossSellingTab.setDisabled(false);\n\n        me.propertiesTab.setDisabled(false);\n\n        me.esdTab.add(me.createEsdTab());\n        me.esdTab.setDisabled((me.article.get('id') === null));\n\n        me.statisticTab.add(me.createStatisticTab());\n        me.statisticTab.setDisabled(me.article.get('id') === null);\n\n        me.resourcesTab.add(me.createResourcesTab());\n        me.resourcesTab.setDisabled(false);\n\n        me.variantListing.customerGroupStore = stores['customerGroups'];\n\n        me.attributeForm.loadAttribute(article.get('mainDetailId'));\n        me.attributeForm.disableForm(false);\n\n        if(me.subApp.splitViewActive) {\n            me.variantTab.setDisabled(true);\n        }\n    },\n\n    /**\n     * Helper method which is especially for third-party developers which want to to add an additional tab\n     * to the main tab panel which is used in the article module. he method provides an easy-to-use way to add a new tab\n     * and handles the event binding for further versions of Shopware.\n     *\n     * @example The following examples shows how to add a tab with a static content:\n     * <code>\n     * this.registerAdditionalTab({\n     *    title: 'Test-Tab',\n     *    tabConfig: { disabled: false },\n     *    contentFn: function(article, stores, eOpts) {\n     *       eOpts.tab.add({ xtype: 'panel', html: 'Tab-Content' });\n     *    }\n     * });\n     * </code>\n     *\n     * @throws Ext.Error - If no configuration object is passed the method raises an global Ext.Error\n     *         which kills the further processing of the method.\n     *\n     * @param  { Object } opts - Configuration object of the new tab\n     *         opts.title - { String } Title of the tab\n     *\n     *         opts.articleChangeFn - { Function } (optional) The callback method which will be triggered when\n     *         the article has been changed. The following parameters are passed to the callback function:\n     *             store - { Object } Instance of the `Shopware.apps.Article.store.Batch` which includes the\n     *             article data and all available associations which are used by the sub-components of this\n     *             component.\n     *             eOpts - { Object } Additional event parameters which are set by ExtJS. Please see the documentation\n     *             of Ext.util.Observable#addListener` method to see all available parameters.\n     *\n     *         opts.contentFn - { Function } The callback method which will be used to set the content of the tab.\n     *         The following parameters are passed to the callback function:\n     *             article - { Object } The article model, e.g. `Shopware.apps.Article.model.Article`\n     *             stores - { Object } All available stores of the article main window, which are used by it's sub-\n     *             compontents.\n     *             eOpts - { Object } Additional event parameters. The following custom paremeters are passed to the\n     *             function:\n     *                 tab - { Object } The newly created type\n     *                 config - { Object } The configuration object which was used to create the tab\n     *\n     *         opts.insertIndex - { Number } (optional) Numeric position (starting by 0) where the tab will be injected.\n     *         If the value is smaller than 0 or isn't passed, the tab will be inserted after the last available tab.\n     *\n     *         opts.tabConfig - { Object } (optional) Tab configuration of will be passsed in to create the tab\n     *         container. To modify the type of the created container, please use the second parameter `containerType`.\n     *\n     *         opts.scope - { Object } (optional) The scope which will be used in the callback methods `opts.contentFn`\n     *         and `opts.articleChangeFn`. If the parameter wasn't passed in, the scope will be set to this component,\n     *         e.g. `Shopware.apps.Article.view.detail.Window`.\n     *\n     * @param  { String } containerType (optional) - ExtJS component name which will be used as the\n     *         container for the tab content. The method supports full class names as well as\n     *         `xtypes`. If a class name is been used, class name needs to be in the namespace `Ext` or `Shopware`.\n     *         Default type is `Ext.container.Container`.\n     *\n     * @return { Boolean } - Truthy if the tab was sucessfully created, otherwise falsy.\n     */\n    registerAdditionalTab: function(opts, containerType) {\n        var me = this, tabPanel = me.mainTab, tabContainer, cfg = {}, articleChangeFn,\n            defaultOpts = {\n                'title': 'Tab',\n                'articleChangeFn': Ext.emptyFn,\n                'contentFn': Ext.emptyFn,\n                'insertIndex': -1,\n                'tabConfig': {\n                    'disabled': true,\n                    'layout': 'fit'\n                },\n                'scope': me\n            }, availableStores;\n\n        // We're having no options for the new tab, so raise an error...\n        if(!opts || opts.length) {\n            Ext.Error.raise({\n                sourceClass: me.$className,\n                sourceMethod: 'registerAdditionalTab',\n                msg: 'The method needs at least a configuration object as a first parameter which ' +\n                     'includes the name of the tab and the callback method which inserts the content into '+\n                     'the newly created tab. Please see the example usage.'\n            });\n            return false;\n        }\n\n        // Check if the user configuration includes an `contentFn` which creates the content of the tab\n        if(!opts || !opts.hasOwnProperty('contentFn')) {\n            Ext.Error.raise({\n                sourceClass: me.$className,\n                sourceMethod: 'registerAdditionalTab',\n                msg: 'The method needs a callback method named `contentFn`, which will be used to insert the content ' +\n                     'inserts the content of the newly created tab.'\n            });\n            return false;\n        }\n\n        // Modify the passed parameter(s)\n        if(containerType && !containerType.match(/^(Ext|Shopware)/)) {\n\n            // Support for passing a `xtype` for the containerType\n            containerType = Ext.ClassManager.getNameByAlias(containerType);\n        }\n        containerType = (containerType && containerType.length) ? containerType : 'Ext.container.Container';\n\n        // Merge the passed user configuration with our default configuration\n        cfg = Ext.merge(cfg, defaultOpts, opts);\n        articleChangeFn = cfg['articleChangeFn'];\n\n        // Create the tab container\n        tabContainer = Ext.create(containerType, Ext.apply(cfg.tabConfig, {\n            title: cfg.title\n        }));\n\n        // Add the tab container to the main tab panel\n        if(cfg.insertIndex >= 0) {\n            tabPanel.insert(cfg.insertIndex, tabContainer);\n        } else {\n            tabPanel.add(tabContainer);\n        }\n\n        // Collects the available stores to provide a constant API which is compatible with further versions.\n        // It doesn't look great but that is necessary to provide the goal...\n        availableStores = {\n            customerGroupStore: me.customerGroupStore,\n            shopStore: me.shopStore,\n            taxStore: me.taxStore,\n            supplierStore: me.supplierStore,\n            templateStore: me.templateStore,\n            dependencyStore: me.dependencyStore,\n            priceVariationStore: me.priceVariationStore,\n            unitStore: me.unitStore,\n            propertyStore: me.propertyStore,\n            priceGroupStore: me.priceGroupStore,\n            articleConfiguratorSet: me.articleConfiguratorSet,\n            categoryTreeStore: me.categoryTreeStore,\n            configuratorGroupStore: me.configuratorGroupStore\n        };\n\n        // Trigger the `contentFn` which sets the content of the tab container\n        me.on('storesLoaded', function() {\n            cfg['contentFn'].apply(cfg.scope, [ me.article, availableStores, { tab: tabContainer, config: cfg } ]);\n        });\n\n        // Bind event listener which triggers when the article store was changed\n        me.subApplication.on('ProductModule:storesChanged', articleChangeFn, cfg.scope, {\n            tab: tabContainer,\n            config: cfg\n        });\n\n        return true;\n    },\n\n    destroy: function () {\n        Shopware.app.Application.un('grid-process-done', this.onProcessDone, this);\n        Shopware.app.Application.un('assign-variant-image', this.onAssignImageToVariant, this);\n\n        this.callParent(arguments);\n    }\n});\n//{/block}\n", "{block name='frontend_detail_index_header'}\n    <header class=\"product--header\">\n        {block name='frontend_detail_index_header_inner'}\n            <div class=\"product--info\">\n                {block name='frontend_detail_index_product_info'}\n\n                    {* Product name *}\n                    {block name='frontend_detail_index_name'}\n                        <h1 class=\"product--title\" itemprop=\"name\">\n                            {$sArticle.articleName}\n                        </h1>\n                    {/block}\n\n                    {block name=\"frontend_detail_index_data_image\"}\n                        {foreach $sArticle.images as $image}\n                            <meta itemprop=\"image\" content=\"{$image.source}\"/>\n                        {/foreach}\n                    {/block}\n\n                    {block name=\"frontend_detail_index_data_ean\"}\n                        {if $sArticle.ean}\n                            {$eanLength = $sArticle.ean|strlen}\n                            {if $eanLength == 8}\n                                <meta itemprop=\"gtin8\" content=\"{$sArticle.ean}\"/>\n                            {elseif $eanLength == 12}\n                                <meta itemprop=\"gtin12\" content=\"{$sArticle.ean}\"/>\n                            {elseif $eanLength == 13}\n                                <meta itemprop=\"gtin13\" content=\"{$sArticle.ean}\"/>\n                            {elseif $eanLength == 14}\n                                <meta itemprop=\"gtin14\" content=\"{$sArticle.ean}\"/>\n                            {/if}\n                        {/if}\n                    {/block}\n\n                    {* Product - Supplier information *}\n                    {block name='frontend_detail_supplier_info'}\n                        {$productSupplierClasses = 'product--supplier'}\n                        {$imgSrc = $sArticle.supplierImg}\n                        {$imgSrcSet = ''}\n                        {if $sArticle.supplierMedia.thumbnails[0].source}\n                            {$imgSrc = $sArticle.supplierMedia.thumbnails[0].source}\n\n                            {if $sArticle.supplierMedia.thumbnails[0].retinaSource}\n                                {$retinaSource = $sArticle.supplierMedia.thumbnails[0].retinaSource}\n                                {$imgSrcSet = \"$imgSrc, $retinaSource 2x\"}\n                            {/if}\n\n                            {if $sArticle.supplierMedia.extension == 'svg'}\n                                {$productSupplierClasses = $productSupplierClasses|cat:' image--svg'}\n                            {/if}\n                        {/if}\n\n                        {if $imgSrc}\n                            <div class=\"{$productSupplierClasses}\">\n                                {s name=\"DetailDescriptionLinkInformation\" namespace=\"frontend/detail/description\" assign=\"snippetDetailDescriptionLinkInformation\"}{/s}\n                                <a href=\"{url controller='listing' action='manufacturer' sSupplier=$sArticle.supplierID}\"\n                                   title=\"{$snippetDetailDescriptionLinkInformation|escape}\"\n                                   class=\"product--supplier-link\">\n                                    <img src=\"{$imgSrc}\" {if !empty($imgSrcSet)}srcset=\"{$imgSrcSet}\" {/if} alt=\"{$sArticle.supplierName|escape}\">\n                                </a>\n                            </div>\n                        {/if}\n                    {/block}\n\n                    {* Product rating *}\n                    {block name=\"frontend_detail_comments_overview\"}\n                        {if !{config name=VoteDisable}}\n                            <div class=\"product--rating-container\">\n                                {s namespace=\"frontend/detail/actions\" name=\"DetailLinkReview\" assign=\"snippetDetailLinkReview\"}{/s}\n                                <a href=\"#product--publish-comment\" class=\"product--rating-link\" rel=\"nofollow\" title=\"{$snippetDetailLinkReview|escape}\">\n                                    {include file='frontend/_includes/rating.tpl' points=$sArticle.sVoteAverage.average type=\"aggregated\" count=$sArticle.sVoteAverage.count}\n                                </a>\n                            </div>\n                        {/if}\n                    {/block}\n                {/block}\n            </div>\n        {/block}\n    </header>\n{/block}\n", "{extends file='frontend/index/header.tpl'}\n\n{* Meta title *}\n{block name=\"frontend_index_header_title\"}{if $sArticle.metaTitle}{$sArticle.metaTitle|escapeHtml} | {{config name=sShopname}|escapeHtml}{else}{$sArticle.articleName} | {$smarty.block.parent}{/if}{/block}\n\n{* Meta opengraph tags *}\n{block name='frontend_index_header_meta_tags_opengraph'}\n    <meta property=\"og:type\" content=\"product\" />\n    <meta property=\"og:site_name\" content=\"{{config name=sShopname}|escapeHtml}\" />\n    <meta property=\"og:url\" content=\"{url sArticle=$sArticle.articleID title=$sArticle.articleName controller=detail}\" />\n    <meta property=\"og:title\" content=\"{$sArticle.articleName|escapeHtml}\" />\n    <meta property=\"og:description\" content=\"{$sArticle.description_long|strip_tags|trim|truncate:$SeoDescriptionMaxLength:'\u2026'|escapeHtml}\" />\n    <meta property=\"og:image\" content=\"{$sArticle.image.source}\" />\n\n    <meta property=\"product:brand\" content=\"{$sArticle.supplierName|escapeHtml}\" />\n    <meta property=\"product:price\" content=\"{$sArticle.price}\" />\n    <meta property=\"product:product_link\" content=\"{url sArticle=$sArticle.articleID title=$sArticle.articleName controller=detail}\" />\n\n    <meta name=\"twitter:card\" content=\"product\" />\n    <meta name=\"twitter:site\" content=\"{{config name=sShopname}|escapeHtml}\" />\n    <meta name=\"twitter:title\" content=\"{$sArticle.articleName|escapeHtml}\" />\n    <meta name=\"twitter:description\" content=\"{$sArticle.description_long|strip_tags|trim|truncate:$SeoDescriptionMaxLength:'\u2026'|escapeHtml}\" />\n    <meta name=\"twitter:image\" content=\"{$sArticle.image.source}\" />\n{/block}\n\n{* Keywords *}\n{block name=\"frontend_index_header_meta_keywords\"}{if $sArticle.keywords}{$sArticle.keywords|escapeHtml}{elseif $sArticle.sDescriptionKeywords}{$sArticle.sDescriptionKeywords|escapeHtml}{/if}{/block}\n\n{* Description *}\n{block name=\"frontend_index_header_meta_description\"}{if $sArticle.description}{$sArticle.description|escapeHtml}{else}{$sArticle.description_long|strip_tags|trim|escapeHtml}{/if}{/block}\n\n{* Canonical link *}\n{block name='frontend_index_header_canonical'}\n    <link rel=\"canonical\" href=\"{url sArticle=$sArticle.articleID title=$sArticle.articleName controller=detail}\" />\n{/block}\n", "{namespace name=\"frontend/detail/comment\"}\n\n{* Offcanvas buttons *}\n{block name='frontend_detail_rating_buttons_offcanvas'}\n    <div class=\"buttons--off-canvas\">\n        {block name='frontend_detail_rating_buttons_offcanvas_inner'}\n            {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\" assign=\"snippetOffcanvasCloseMenu\"}{/s}\n            <a href=\"#\" title=\"{$snippetOffcanvasCloseMenu|escape}\" class=\"close--off-canvas\">\n                <i class=\"icon--arrow-left\"></i>\n                {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\"}{/s}\n            </a>\n        {/block}\n    </div>\n{/block}\n\n<div class=\"content--product-reviews\" id=\"detail--product-reviews\">\n\n    {* Response save comment *}\n    {if $sAction == \"ratingAction\"}\n        {block name='frontend_detail_comment_error_messages'}\n            {if $sErrorFlag}\n                {if $sErrorFlag['sCaptcha']}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'error'}\n                    {s name=\"DetailCommentInfoFillOutCaptcha\" assign=\"content\"}{/s}\n                {else}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'error'}\n                    {s name=\"DetailCommentInfoFillOutFields\" assign=\"content\"}{/s}\n                {/if}\n            {else}\n                {if {config name=\"OptinVote\"} && !{$smarty.get.sConfirmation} && !{$userLoggedIn}}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'success'}\n                    {s name=\"DetailCommentInfoSuccessOptin\" assign=\"content\"}{/s}\n                {else}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'success'}\n                    {s name=\"DetailCommentInfoSuccess\" assign=\"content\"}{/s}\n                {/if}\n            {/if}\n\n            {include file=$file type=$type content=$content}\n        {/block}\n    {/if}\n\n    {* Review title *}\n    {block name=\"frontend_detail_tabs_rating_title\"}\n        <div class=\"content--title\">\n            {s name=\"DetailCommentHeader\"}{/s} \"{$sArticle.articleName}\"\n        </div>\n    {/block}\n\n    {* Display review *}\n    {if $sArticle.sVoteComments}\n        {foreach $sArticle.sVoteComments as $vote}\n\n            {* Review entry *}\n            {block name=\"frontend_detail_comment_block\"}\n                {include file=\"frontend/detail/comment/entry.tpl\" isLast=$vote@last}\n            {/block}\n\n            {* Review answer *}\n            {block name=\"frontend_detail_answer_block\"}\n                {if $vote.answer}\n                    {include file=\"frontend/detail/comment/answer.tpl\" isLast=$vote@last}\n                {/if}\n            {/block}\n        {/foreach}\n    {/if}\n\n    {* Publish product review *}\n    {block name='frontend_detail_comment_post'}\n        <div class=\"review--form-container\">\n            {include file=\"frontend/detail/comment/form.tpl\"}\n        </div>\n    {/block}\n</div>\n", "{namespace name=\"frontend/detail/description\"}\n\n{* Offcanvas buttons *}\n{block name='frontend_detail_description_buttons_offcanvas'}\n    <div class=\"buttons--off-canvas\">\n        {block name='frontend_detail_description_buttons_offcanvas_inner'}\n            {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\" assign=\"snippetOffcanvasCloseMenu\"}{/s}\n            <a href=\"#\" title=\"{$snippetOffcanvasCloseMenu|escape}\" class=\"close--off-canvas\">\n                <i class=\"icon--arrow-left\"></i>\n                {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\"}{/s}\n            </a>\n        {/block}\n    </div>\n{/block}\n\n{block name=\"frontend_detail_description\"}\n<div class=\"content--description\">\n\n    {* Headline *}\n    {block name='frontend_detail_description_title'}\n        <div class=\"content--title\">\n            {s name=\"DetailDescriptionHeader\"}{/s} \"{$sArticle.articleName}\"\n        </div>\n    {/block}\n\n    {* Product description *}\n    {block name='frontend_detail_description_text'}\n        <div class=\"product--description\" itemprop=\"description\">\n            {$sArticle.description_long}\n        </div>\n    {/block}\n\n    {* Properties *}\n    {block name='frontend_detail_description_properties'}\n        {if $sArticle.sProperties}\n            <div class=\"product--properties panel has--border\">\n                <table class=\"product--properties-table\">\n                    {foreach $sArticle.sProperties as $sProperty}\n                        <tr class=\"product--properties-row\">\n                            {* Property label *}\n                            {block name='frontend_detail_description_properties_label'}\n                                <td class=\"product--properties-label is--bold\">{$sProperty.name|escape}:</td>\n                            {/block}\n\n                            {* Property content *}\n                            {block name='frontend_detail_description_properties_content'}\n                                <td class=\"product--properties-value\">{$sProperty.value|escape}</td>\n                            {/block}\n                        </tr>\n                    {/foreach}\n                </table>\n            </div>\n        {/if}\n    {/block}\n\n    {* Product - Further links *}\n    {block name='frontend_detail_description_links'}\n\n        {* Further links title *}\n        {block name='frontend_detail_description_links_title'}\n            <div class=\"content--title\">\n                {s name=\"ArticleTipMoreInformation\"}{/s} \"{$sArticle.articleName}\"\n            </div>\n        {/block}\n\n        {* Links list *}\n        {block name='frontend_detail_description_links_list'}\n            <ul class=\"content--list list--unstyled\">\n                {block name='frontend_detail_actions_contact'}\n                    {if $sInquiry}\n                        <li class=\"list--entry\">\n                            {s name=\"DetailLinkContact\" namespace=\"frontend/detail/actions\" assign=\"snippetDetailLinkContact\"}{/s}\n                            <a href=\"{$sInquiry}\" rel=\"nofollow\" class=\"content--link link--contact\" title=\"{$snippetDetailLinkContact|escape}\">\n                                <i class=\"icon--arrow-right\"></i> {s name=\"DetailLinkContact\" namespace=\"frontend/detail/actions\"}{/s}\n                            </a>\n                        </li>\n                    {/if}\n                {/block}\n\n                {foreach $sArticle.sLinks as $information}\n                    {if $information.supplierSearch}\n\n                        {* Vendor landing page link *}\n                        {block name='frontend_detail_description_links_supplier'}\n                            <li class=\"list--entry\">\n                                {s name=\"DetailDescriptionLinkInformation\" assign=\"snippetDetailDescriptionLinkInformation\"}{/s}\n                                <a href=\"{url controller='listing' action='manufacturer' sSupplier=$sArticle.supplierID}\"\n                                   target=\"{$information.target}\"\n                                   class=\"content--link link--supplier\"\n                                   title=\"{$snippetDetailDescriptionLinkInformation|escape}\">\n\n                                    <i class=\"icon--arrow-right\"></i> {s name=\"DetailDescriptionLinkInformation\"}{/s}\n                                </a>\n                            </li>\n                        {/block}\n                    {else}\n\n                        {* Links which will be added throught the administration *}\n                        {block name='frontend_detail_description_links_link'}\n                            <li class=\"list--entry\">\n                                <a href=\"{$information.link}\"\n                                   target=\"{if $information.target}{$information.target}{else}_blank{/if}\"\n                                   class=\"content--link link--further-links\"\n                                   title=\"{$information.description|escapeHtml}\">\n                                    <i class=\"icon--arrow-right\"></i> {$information.description|escapeHtml}\n                                </a>\n                            </li>\n                        {/block}\n                    {/if}\n                {/foreach}\n            </ul>\n        {/block}\n    {/block}\n\n    {* Downloads *}\n    {block name='frontend_detail_description_downloads'}\n        {if $sArticle.sDownloads}\n\n            {* Downloads title *}\n            {block name='frontend_detail_description_downloads_title'}\n                <div class=\"content--title\">\n                    {s name=\"DetailDescriptionHeaderDownloads\"}{/s}\n                </div>\n            {/block}\n\n            {* Downloads list *}\n            {block name='frontend_detail_description_downloads_content'}\n                <ul class=\"content--list list--unstyled\">\n                    {foreach $sArticle.sDownloads as $download}\n                        {block name='frontend_detail_description_downloads_content_link'}\n                            <li class=\"list--entry\">\n                                {s name=\"DetailDescriptionLinkDownload\" assign=\"snippetDetailDescriptionLinkDownload\"}{/s}\n                                <a href=\"{$download.filename}\" target=\"_blank\" class=\"content--link link--download\" title=\"{$snippetDetailDescriptionLinkDownload|escape} {$download.description|escape}\">\n                                    <i class=\"icon--arrow-right\"></i> {s name=\"DetailDescriptionLinkDownload\"}{/s} {$download.description}\n                                </a>\n                            </li>\n                        {/block}\n                    {/foreach}\n                </ul>\n            {/block}\n        {/if}\n    {/block}\n\n    {* Comment - Item open text fields attr3 *}\n    {block name='frontend_detail_description_our_comment'}\n        {if $sArticle.attr3}\n\n            {* Comment title  *}\n            {block name='frontend_detail_description_our_comment_title'}\n                <div class=\"content--title\">\n                    {s name='DetailDescriptionComment'}{/s} \"{$sArticle.articleName}\"\n                </div>\n            {/block}\n\n            {block name='frontend_detail_description_our_comment_title_content'}\n                <blockquote class=\"content--quote\">{$sArticle.attr3}</blockquote>\n            {/block}\n        {/if}\n    {/block}\n</div>\n{/block}\n"], "fixing_code": ["/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\n/** @lends Ext.String */\n//{block name=\"extjs/overrides/string\"}\nExt.override(Ext.String, {\n    /**\n     * @var DOMParser _domParser\n     */\n    _domParser: new DOMParser(),\n\n    /**\n     * Return the text content of the element\n     *\n     * @returns string\n     */\n    getText: function(value) {\n        var me = this;\n\n        if (!value) {\n            return '';\n        }\n\n        var elementNodes = me._domParser\n            .parseFromString(Ext.String.format('<div>[0]</div>', value), \"text/html\")\n            .documentElement\n            .querySelectorAll('div');\n\n        return me._getText(elementNodes);\n    },\n\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     *\n     * @param { Array|Element } elem\n     * @private\n     */\n    _getText: function(elem) {\n        var node,\n            ret = '',\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if (!nodeType) {\n            while ((node = elem[i++])) {\n                ret += this._getText(node);\n            }\n        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n            if (typeof elem.textContent === 'string') {\n                return elem.textContent;\n            } else {\n                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n                    ret += this._getText(elem);\n                }\n            }\n        } else if (nodeType === 3 || nodeType === 4) {\n            return elem.nodeValue;\n        }\n\n        return ret;\n    }\n});\n//{/block}", "/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n *\n * @category   Shopware\n * @package    Article\n * @subpackage Detail\n * @version    $Id$\n * @author shopware AG\n */\n\n/**\n * Shopware Controller - Detail\n * The detail controller handles all events of the detail page main form element and the sidebar.\n */\n//{namespace name=backend/article/view/main}\n//{block name=\"backend/article/controller/detail\"}\nExt.define('Shopware.apps.Article.controller.Detail', {\n\n    /**\n     * Extend from the standard ExtJS 4 controller\n     * @string\n     */\n    extend: 'Enlight.app.Controller',\n\n    stores: [\n        'Property'\n    ],\n\n    refs: [\n        { ref: 'mainWindow', selector: 'article-detail-window' },\n        { ref: 'baseFieldSet', selector: 'article-detail-window article-base-field-set' },\n        { ref: 'configurator', selector: 'article-detail-window article-variant-configurator' },\n        { ref: 'customerGroupCombo', selector: 'article-detail-window article-settings-field-set boxselect[name=avoidCustomerGroups]' },\n        { ref: 'variantListing', selector: 'article-detail-window article-variant-list' },\n        { ref: 'detailForm', selector: 'article-detail-window form[name=detail-form]' },\n        { ref: 'variantTab', selector: 'article-detail-window panel[name=variant-tab]' },\n        { ref: 'esdTab', selector: 'article-detail-window panel[name=esd-tab]' },\n        { ref: 'esdListing', selector: 'article-detail-window article-esd-list' },\n        { ref: 'propertyPanel', selector: 'article-properties-panel' },\n        { ref: 'propertyGrid', selector: 'article-detail-window grid[name=property-grid]' },\n        { ref: 'priceFieldSet', selector: 'article-detail-window article-prices-field-set' }\n    ],\n\n    snippets: {\n        disableVariantForbidden: {\n            title: '{s name=disable_variant_forbidden/title}Disable variants{/s}',\n            message: '{s name=disable_variant_forbidden/message}To disable variant support you must delete all non-main variants first{/s}',\n            error: '{s name=disable_variant_forbidden/error}An error occurred while disabling variant support{/s}'\n        },\n        growlMessage: '{s name=growl_message}Article{/s}',\n        existTitle: '{s name=sidebar/accessory/already_assigned_title}Already exists{/s}',\n        similar: {\n            exist: '{s name=sidebar/similar/already_assigned_message}The article [0] has been assigned as similar article!{/s}'\n        },\n        accessory: {\n            exist: '{s name=sidebar/accessory/already_assigned_message}The article [0] has been already assigned as accessory article!{/s}'\n        },\n        removeArticle: '{s name=article_remove/message}Are you sure you want to delete the article?{/s}',\n        alreadyExist: {\n            title: '{s name=category/already_exist/title}Failed{/s}',\n            message: '{s name=category/already_exist/message}Category: [0] has already been assigned{/s}'\n        },\n        saved: {\n            title: '{s name=article_saved/title}Successful{/s}',\n            message: '{s name=article_saved/message}Article [0] has been saved successfully{/s}',\n            noPriceGiven: '{s name=article_saved/no_price_given}Please insert a price for the first customer group.{/s}',\n            fieldsViolation: '{s name=article_saved/field_errors}The following fields are not valid: {/s}',\n            errorMessage: '{s name=article_saved/error_message}An error has occurred while saving the article:{/s}',\n            errorTitle: '{s name=article_saved/error_title}Error{/s}',\n            removeMessage: '{s name=article_removed/message}Article has been removed{/s}'\n        },\n        overwriteArticle: {\n            title: '{s name=overwriteArticle/title}Overwrite most recent changes{/s}',\n            message: '{s name=overwriteArticle/message}Do you really want to overwrite the latest changes?{/s}',\n        },\n    },\n\n    /**\n     * A template method that is called when your application boots.\n     * It is called before the Application's launch function is executed\n     * so gives a hook point to run any code before your Viewport is created.\n     *\n     * @params  - The main controller can handle a orderId parameter to open the order detail page directly\n     * @return void\n     */\n    init:function () {\n        var me = this;\n\n        me.control({\n            'article-detail-window': {\n                saveArticle: me.onSaveArticle,\n                cancel: me.onCancel\n            },\n            'article-detail-window article-base-field-set checkbox[name=isConfigurator]': {\n                change: me.onEnableConfigurator\n            },\n            'article-detail-window combo[name=filterGroupId]': {\n                change: me.onChangePropertyGroup\n            },\n            'article-detail-window article-resources-links': {\n                addLink: me.onAddLink,\n                removeLink: me.onRemoveLink\n            },\n            'article-detail-window article-resources-downloads': {\n                addDownload: me.onAddDownload,\n                removeDownload: me.onRemoveDownload\n            },\n            'article-detail-window article-actions-toolbar': {\n                articlePreview: me.onArticlePreview,\n                deleteArticle: me.onDeleteArticle,\n                duplicateArticle: me.onDuplicateArticle\n            },\n            'article-prices-field-set': {\n                priceTabChanged: me.onPriceTabChanged,\n                removePrice: me.onRemovePrice\n            },\n            'article-prices-field-set grid': {\n                edit: me.onAfterEditPrice,\n                beforeedit: me.onBeforeEditPrice\n            }\n        });\n\n        me.callParent(arguments);\n    },\n\n    /**\n     * Deprecated. Use onChangeConfigurator instead\n     * @param field\n     * @param newValue\n     */\n    onEnableConfigurator: function(field, newValue) {\n        this.onChangeConfigurator(field, newValue);\n    },\n\n    /**\n     * Event listener function of the configurator checkbox in the detail tab.\n     * Enables or disables the variant tab.\n     *\n     * @param field\n     * @param newValue\n     */\n    onChangeConfigurator: function(field, newValue) {\n        var me = this,\n            mainWindow = me.getMainWindow(),\n            article = me.subApplication.article,\n            variantTab = mainWindow.variantTab;\n\n        if (newValue === false && !Ext.isEmpty(article.get('id'))) {\n            var variantStore = me.getStore('Variant');\n            variantStore.getProxy().extraParams.articleId = article.get('id');\n\n            variantStore.load({\n                callback: function(records, operation, success) {\n                    if (success && records.length > 1) {\n                        Shopware.Notification.createGrowlMessage(me.snippets.disableVariantForbidden.title, me.snippets.disableVariantForbidden.message, me.snippets.growlMessage);\n                        field.setValue(true);\n                    } else if (!success) {\n                        Shopware.Notification.createGrowlMessage(me.snippets.disableVariantForbidden.title, me.snippets.disableVariantForbidden.error, me.snippets.growlMessage);\n                        field.setValue(true);\n                    }\n                }\n            });\n        }\n\n        if (me.subApplication.splitViewActive) {\n            variantTab.setDisabled(true)\n        } else {\n            variantTab.setDisabled((article.get('id') === null || newValue === false || article.get('configuratorSetId') === null));\n        }\n    },\n\n    /**\n     * Event listener function of the save button of the main window.\n     * Saves the current article\n     *\n     * @param { Object } win\n     * @param { Object } article\n     * @param { Object } options\n     * @return { Boolean|void }\n     */\n    onSaveArticle: function(win, article, options) {\n        var me = this, priceStore, lastFilter,\n            mainWindow = me.getMainWindow(),\n            form;\n\n        if (Ext.isEmpty(win)) {\n            mainWindow = me.getMainWindow();\n        } else {\n            mainWindow = win;\n        }\n\n        form = mainWindow.detailForm;\n\n        // First, check if the detail form panel is valid, otherwise return.\n        if ( !form.getForm().isValid() ) {\n            if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                options.callback(null, false, 'no_valid_form');\n            }\n            return;\n        }\n\n        priceStore = article.getPrice();\n\n        // Update the article record with the form data.\n        form.getForm().updateRecord(article);\n        article = me.prepareAvoidCustomerGroups(article);\n\n        if (!article.get('isConfigurator')) {\n            article.set('configuratorSetId', null);\n        }\n\n        // If supplierId is string we want to create a new supplier in our backend\n        var baseField = me.getBaseFieldSet();\n        var supplierId = baseField.supplierCombo.getModelData().supplierId;\n        var supplierNeedsReload = false;\n        if (typeof supplierId === \"string\") {\n            article.set('supplierName', supplierId);\n            supplierNeedsReload = true;\n        }\n\n        article.getConfiguratorSetStore = Ext.create('Ext.data.Store', { model: 'Shopware.apps.Article.model.ConfiguratorSet' });\n\n        // Save last price store filter to filter again after the article saved.\n        lastFilter = priceStore.filters.items;\n\n        priceStore.clearFilter();\n\n        if (article.getConfiguratorTemplateStore instanceof Ext.data.Store && article.getConfiguratorTemplateStore.getCount() > 0) {\n            var template = article.getConfiguratorTemplateStore.first();\n            if (template.getPrice() instanceof Ext.data.Store) {\n                template.getPrice().clearFilter();\n            }\n        }\n\n        if (!me.hasArticlePrice(priceStore)) {\n            priceStore.filter(lastFilter);\n            Shopware.Notification.createGrowlMessage(me.snippets.saved.errorTitle, me.snippets.saved.noPriceGiven, me.snippets.growlMessage);\n            if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                options.callback(null, false);\n            }\n            return false;\n        }\n\n        // Remove all prices with a clone flag.\n        me.removeClonedPrices(priceStore);\n        article.setDirty();\n        article.save({\n            success: function(record, operation) {\n\n                var newArticle = operation.getResultSet().records[0],\n                    message = Ext.String.format(\n                        me.snippets.saved.message,\n                        Ext.String.htmlEncode(article.get('name'))\n                    );\n\n                if (supplierNeedsReload) {\n                    mainWindow.supplierStore.filters.clear();\n                    mainWindow.supplierStore.load();\n                }\n\n                mainWindow.attributeForm.saveAttribute(newArticle.get('mainDetailId'));\n\n                me.prepareArticleProperties(record, function() {\n                    newArticle.getPrice().filter(lastFilter);\n                    me.reconfigureAssociationComponents(newArticle);\n                    Shopware.Notification.createGrowlMessage(me.snippets.saved.title, message, me.snippets.growlMessage);\n                    me.refreshArticleList();\n\n                    if (record.get('isConfigurator') && record.get('id')) {\n                        me.subApplication.getController('Variant').getVariantListing().getStore().reload();\n                    }\n\n                    if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                        options.callback(newArticle, true);\n                    }\n                });\n            },\n            failure: function(record, operation) {\n                var rawData = record.getProxy().getReader().rawData,\n                    fields = rawData.fields,\n                    message = rawData.message;\n\n                if (fields && fields.length > 0) {\n                    Shopware.Notification.createGrowlMessage(me.snippets.saved.errorTitle, me.snippets.saved.fieldsViolation, me.snippets.growlMessage);\n                } else {\n                    Shopware.Notification.createGrowlMessage(me.snippets.saved.errorTitle, me.snippets.saved.errorMessage + message, me.snippets.growlMessage);\n                }\n\n                priceStore.filter(lastFilter);\n                if (options !== Ext.undefined && options !== null && Ext.isFunction(options.callback)) {\n                    options.callback(null, false);\n                }\n\n                if (rawData.overwriteAble) {\n                    Ext.MessageBox.confirm(me.snippets.overwriteArticle.title, me.snippets.overwriteArticle.message, function (response) {\n                        if (response === 'yes') {\n                            record.set('changed', rawData.data[0].changed);\n                            me.onSaveArticle(win, article, options);\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    /**\n     *\n     * @param priceStore\n     * @return Boolean\n     */\n    hasArticlePrice: function(priceStore) {\n        var me = this, priceExist = false;\n\n        var firstCustomerGroup = me.subApplication.firstCustomerGroup;\n\n        priceStore.each(function(price) {\n            if (price.get('customerGroupKey') === firstCustomerGroup.get('key') && price.get('price') > 0) {\n                priceExist = true;\n                return true;\n            }\n        });\n        return priceExist;\n    },\n\n    refreshArticleList: function() {\n        var me = this,\n            subApps = Shopware.app.Application.subApplications,\n            articleList = subApps.findBy(function(item) {\n                if(item.$className === 'Shopware.apps.ArticleList') {\n                    return true;\n                }\n            });\n        if(articleList) {\n            var grid = articleList.articleGrid,\n                selModel = grid.getSelectionModel(),\n                selection = selModel.getLastSelected();\n\n            articleList.articleStore.reload({\n                scope: me,\n                callback: function() {\n                    if (selection) {\n                        selModel.select(selection.index, false, true);\n                    }\n                }\n            });\n        }\n    },\n\n    prepareAvoidCustomerGroups: function(article) {\n        var me = this,\n            customerGroupCombo = me.getCustomerGroupCombo(),\n            store = customerGroupCombo.getStore();\n\n        var newStore = Ext.create('Ext.data.Store', { model: 'Shopware.apps.Base.model.CustomerGroup' });\n        newStore.add(customerGroupCombo.getValueRecords());\n        article.getCustomerGroupsStore = newStore;\n        return article;\n    },\n\n    /**\n     * Helper function to reload all components which uses the article association stores\n     * @param article\n     */\n    reconfigureAssociationComponents: function(article) {\n        var me = this,\n            mainWindow = me.getMainWindow(),\n            variantTab = mainWindow.variantTab,\n            esdTab = mainWindow.esdTab,\n            esdListing = me.getEsdListing(),\n            variantListing = me.getVariantListing(),\n            configurator = me.getConfigurator(),\n            priceFieldSet = me.getPriceFieldSet();\n\n\n        if (article === null && me.subApplication.article) {\n            me.reloadArticle(me.subApplication.article.get('id'));\n            return;\n        }\n        var baseField = mainWindow.down('article-base-field-set');\n        baseField.numberField.validationRequestParam = article.getMainDetail().first().get('id');\n\n        mainWindow.article = article;\n        me.subApplication.article = article;\n\n        mainWindow.detailForm.loadRecord(article);\n\n        me.loadPropertyStore(article);\n        me.getPropertyPanel().article = article;\n\n        esdTab.setDisabled(article.get('id') === null);\n        esdListing.esdStore.getProxy().extraParams.articleId = article.get('id');\n        esdListing.filteredStore.getProxy().extraParams.articleId = article.get('id');\n        esdListing.article = article;\n\n        if (me.subApplication.splitViewActive) {\n            variantTab.setDisabled(true);\n        } else {\n            variantTab.setDisabled(article.get('id') === null || article.get('isConfigurator') === false || article.get('configuratorSetId') === null);\n        }\n\n        var showAdditionalText = (variantTab.isDisabled()) ? !Ext.isEmpty(baseField.mainDetailAdditionalText.getValue(), false) : false;\n        baseField.mainDetailAdditionalText.setVisible(showAdditionalText);\n        variantListing.getStore().getProxy().extraParams.articleId = article.get('id');\n\n        configurator.articleConfiguratorSet = article.getConfiguratorSet().first();\n\n        priceFieldSet.priceStore = article.getPrice();\n        priceFieldSet.preparePriceStore();\n        Ext.each(priceFieldSet.priceGrids, function(grid) {\n            grid.reconfigure(article.getPrice());\n        });\n        priceFieldSet.tabPanel.setActiveTab(0);\n\n        // Reconfigure the article link listing\n        mainWindow.down('article-resources-links grid[name=link-listing]').reconfigure(article.getLink());\n\n        // Reconfigure the article download listing\n        mainWindow.down('article-resources-downloads grid[name=download-listing]').reconfigure(article.getDownload());\n\n        // Reconfigure the article accessory articles listing\n        mainWindow.down('article-crossselling-tab grid[name=accessory-listing]').reconfigure(article.getAccessory());\n\n        // Reconfigure the article similar articles listing\n        mainWindow.down('article-crossselling-tab grid[name=similar-listing]').reconfigure(article.getSimilar());\n\n        // Reconfigure the category listing in the category tab\n        mainWindow.down('container[name=category-tab] article-category-list').reconfigure(article.getCategory());\n\n        // Reconfigure the stream listing in the crossselling tab\n        mainWindow.down('article-crossselling-tab grid[name=streams-listing]').reconfigure(article.getStreams());\n\n        //reconfigure the seo category listing and the selection store of the listing\n        var seoListing = mainWindow.down('container[name=category-tab] article-category-seo-list');\n\n        seoListing.reconfigure(article.getSeoCategories());\n\n        seoListing.setCategoryStore(article.getCategory());\n\n        // Reconfigure the image listing\n        var imageListing = mainWindow.down('article-image-list dataview[name=image-listing]');\n        var listingComponent = mainWindow.down('article-image-list');\n        imageListing.bindStore(article.getMedia());\n        listingComponent.mediaStore = article.getMedia();\n\n        mainWindow.detailForm.getForm().isValid();\n    },\n\n    /**\n     * Helper function to reload the article data\n     *\n     * @param { Integer } articleId\n     */\n    reloadArticle: function(articleId) {\n        var me = this, lastFilter = null;\n\n        if (me.subApplication.article) {\n            lastFilter = me.subApplication.article.getPrice().filters.items;\n        }\n        // The batch store is responsible to load all required stores for the detail page in one request\n        me.batchStore = me.getStore('Batch');\n        me.batchStore.getProxy().extraParams.articleId = articleId;\n        me.batchStore.load({\n            callback: function(records, operation) {\n                var storeData = records[0];\n                // When store has been loaded use the first record as data array to create the required stores\n                if (operation.success === true) {\n                    // Prepare the associated stores to use them in the detail page\n                    var article = storeData.getArticle().first();\n                    me.subApplication.article = article;\n\n                    if (article) {\n                        if (lastFilter != null) {\n                            article.getPrice().filter(lastFilter);\n                        }\n                        me.reconfigureAssociationComponents(article);\n                    }\n                }\n            }\n        });\n    },\n\n    onCancel: function(win) {\n        win.destroy();\n    },\n\n    /**\n     * Event listener function which fired when the user clicks the duplicate button in the side bar.\n     */\n    onDuplicateArticle: function(article) {\n        var me = this,\n            detailRecord = me.getDetailForm().getRecord();\n\n        // Use the detailRecord for the id because article in split view mode can be outdated\n        if (!detailRecord || !detailRecord.get('id')) {\n            return;\n        }\n\n        Ext.Ajax.request({\n            url: '{url controller=\"article\" action=\"duplicateArticle\"}',\n            method: 'POST',\n            params: {\n                articleId: detailRecord.get('id')\n            },\n            success: function(response, opts) {\n                var operation = Ext.decode(response.responseText);\n                if (operation.success == true && operation.articleId) {\n                    Shopware.app.Application.addSubApplication({\n                        name: 'Shopware.apps.Article',\n                        action: 'detail',\n                        params: {\n                            needGenerate: operation.isConfigurator,\n                            articleId: operation.articleId\n                        }\n                    });\n\n                }\n            }\n        });\n\n    },\n\n    /**\n     * Event listener function which fired when the user clicks the delete button.\n     * @param article\n     */\n    onDeleteArticle: function(article) {\n        var me = this,\n            win = me.getMainWindow(),\n            articleModel = me.getDetailForm().getRecord();\n\n        // Use the model from the record because article in split view mode can be outdated\n        if (articleModel instanceof Ext.data.Model && articleModel.get('id') > 0) {\n            Ext.MessageBox.confirm(me.snippets.growlMessage, me.snippets.removeArticle , function (response) {\n                if ( response !== 'yes' ) {\n                    return;\n                }\n                articleModel.destroy({\n                    callback: function(operation) {\n                        Shopware.Notification.createGrowlMessage(me.snippets.saved.title, me.snippets.saved.removeMessage, me.snippets.growlMessage);\n                        win.destroy();\n                        me.refreshArticleList();\n                    }\n                });\n            });\n        }\n    },\n\n    /**\n     * Event will be fired when the user clicks the preview button.\n     */\n    onArticlePreview: function(article, combo) {\n        var me = this,\n            shopId = combo.getValue();\n\n        article = me.subApplication.article;\n\n        if (!(article instanceof Ext.data.Model) || !Ext.isNumeric(shopId)) {\n            return;\n        }\n\n        var url = '{url action=previewDetail}'\n            + '?shopId=' + shopId\n            + '&articleId=' + article.get('id');\n        window.open(url);\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the add link button.\n     * @event\n     * @param { Ext.grid.Panel } grid The link grid\n     * @param { Object } form The link record\n     */\n    onAddLink: function(grid, form) {\n        var me = this, model,\n            store = grid.getStore(),\n            values = form.getValues();\n\n        if (!form.getForm().isValid()) {\n            return;\n        }\n        if (form.getForm().getRecord()) {\n            model = form.getForm().getRecord();\n            form.getForm().updateRecord(model);\n        } else {\n            model = Ext.create('Shopware.apps.Article.model.Link', values);\n        }\n        store.add(model);\n        form.getForm().reset();\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the remove link action column.\n     * @event\n     * @param { Ext.grid.Panel } grid The link grid\n     * @param { Ext.data.Model } record The link record\n     */\n    onRemoveLink: function(grid, record) {\n        var me = this,\n            store = grid.getStore();\n\n        if (store instanceof Ext.data.Store && record instanceof Ext.data.Model) {\n            store.remove(record);\n        }\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the add download button.\n     *\n     * @event\n     * @param { Ext.grid.Panel } grid The download grid\n     * @param { Ext.data.Model } record The download record\n     */\n    onAddDownload: function(grid, form) {\n        var me = this, model,\n            store = grid.getStore(),\n            values = form.getValues();\n\n        if (!form.getForm().isValid()) {\n            return;\n        }\n        if (form.getForm().getRecord()) {\n            model = form.getForm().getRecord();\n            form.getForm().updateRecord(model);\n        } else {\n            model = Ext.create('Shopware.apps.Article.model.Download', values);\n        }\n        store.add(model);\n        form.getForm().reset();\n    },\n\n    /**\n     * Event listener function of the resources component.\n     * Fired when the user clicks the remove download action column.\n     *\n     * @event\n     * @param { Ext.grid.Panel } grid The download grid\n     * @param { Ext.data.Model } record The download record\n     */\n    onRemoveDownload: function(grid, record) {\n        var me = this,\n            store = grid.getStore();\n\n        if (store instanceof Ext.data.Store && record instanceof Ext.data.Model) {\n            store.remove(record);\n        }\n    },\n\n    loadPropertyGrid: function(propertyGroupId) {\n        var me = this,\n            grid = me.getPropertyGrid(),\n            propertyStore = me.getStore('Property');\n\n        if (propertyGroupId) {\n            propertyStore.getProxy().extraParams.propertyGroupId = propertyGroupId;\n            propertyStore.load({\n                params: {\n                    articleId: me.subApplication.article.get('id')\n                }\n            });\n\n            grid.show();\n            return;\n        }\n        grid.hide();\n    },\n\n    loadPropertyStore: function(article) {\n        var me = this;\n\n        var filterGroupId = article.get('filterGroupId');\n        me.loadPropertyGrid(filterGroupId);\n    },\n\n    prepareArticleProperties: function(article, callback) {\n        var me = this,\n            propertyStore = me.getStore('Property'),\n            opts = {\n                callback: function () {\n                    if (Ext.isFunction(callback)) {\n                        callback();\n                    }\n                }\n            };\n\n        if(article.get('id')) {\n            propertyStore.getProxy().extraParams.articleId = article.get('id');\n        }\n        propertyStore.each(function(property) {\n            property.setDirty();\n        });\n\n        propertyStore[propertyStore.getUpdatedRecords().length ? 'save' : 'load'](opts);\n    },\n\n    /**\n     * Property set combo box changed => Toggle grid\n     */\n    onChangePropertyGroup: function (combo) {\n        var me = this,\n            grid = me.getPropertyGrid(),\n            record = me.subApplication.article;\n\n        if (combo.getValue() === null) {\n            record.set('filterGroupId', null);\n            grid.hide();\n        } else {\n            me.loadPropertyGrid(record.get('filterGroupId'));\n        }\n    },\n\n    /**\n     * Event listener function which fired when the user want to remove a price row.\n     *\n     * @param record\n     * @param view\n     * @param rowIndex\n     */\n    onRemovePrice: function(record, view, rowIndex) {\n        var me = this,\n            store = view.getStore(),\n            previousPrice = store.getAt(rowIndex-1);\n\n        if (rowIndex > 1) {\n            var column = view.panel.columns[view.panel.columns.length-1],\n                cell = view.getCell(previousPrice, column),\n                icon = Ext.get(cell.query('.x-action-col-icon'));\n\n            icon.removeCls('x-hidden');\n            icon.addCls('sprite-minus-circle-frame');\n        }\n\n        me.removeCloneFlag(store);\n        store.remove(record);\n        previousPrice.set('to', null);\n    },\n\n    /**\n     * Helper function to remove the cloned flag for the current customer group.\n     * @param store\n     */\n    removeCloneFlag: function(store) {\n        store.each(function(price) {\n            price.set('cloned', false);\n        });\n    },\n\n    /**\n     * Event listener function which fired when the user\n     * edit a column of the price grid.\n     * This function handles the calculation for the\n     * prices and discounts.\n     *\n     * @param editor\n     * @param event\n     */\n    onAfterEditPrice: function(editor, event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            nextRecord = store.getAt(event.rowIdx + 1),\n            row = Ext.get(event.row),\n            icon = Ext.get(row.query('.x-action-col-icon'));\n\n        me.removeCloneFlag(store);\n\n        // User changed the \"to\" field?\n        if ( event.field === 'to') {\n            // Check if the user insert a numeric to value\n            if (Ext.isNumeric(event.value)) {\n                icon.addCls('x-hidden');\n\n                // If this is the case we need to check if the current row is the last row.\n                if (!nextRecord) {\n                    // If the current row is the last row, we need to add a new row with \"to any\"\n                    var newRecord = Ext.create('Shopware.apps.Article.model.Price', {\n                        from: event.value + 1,\n                        customerGroupKey: record.get('customerGroupKey', null)\n                    });\n                    store.add(newRecord);\n                } else {\n                    // If the current row is not the last row we have to increase the from value of the next row\n                    nextRecord.set('from', event.value + 1);\n                }\n            } else {\n                icon.removeCls('x-hidden');\n                icon.addCls('sprite-minus-circle-frame');\n            }\n        } else if ( event.field === 'price') {\n           this.updatedPriceField(event);\n            // If the user has edit the percent column, we have to calculate the price\n        } else if (event.field === 'percent') {\n            this.updatedPercentField(event);\n        } else if (event.field === 'percentPseudo') {\n            this.updatedPseudoPercentField(event);\n        } else if (event.field === 'pseudoPrice') {\n            this.updatedPseudoPriceField(event);\n        }\n    },\n\n    /**\n     * Helper function to update related fields of percent\n     * @param event\n     */\n    updatedPercentField: function(event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            firstRecord = store.getAt(0),\n            firstPrice = firstRecord.get('price'),\n            price = record.get('price');\n\n        if (firstPrice === price) {\n            firstRecord.set('percent', null);\n        } else if(event.value > 0) {\n            price = firstPrice / 100 * (100 - event.value);\n            price = price.toFixed(2);\n            record.set('price', price);\n        }\n\n        // We need to trigger update on PriceField without copy&paste all that checks and updates\n        me.updatedPriceField(event);\n    },\n\n    /**\n     * Helper function to update related fields of price\n     *\n     * @param event\n     */\n    updatedPriceField: function(event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            firstRecord = store.getAt(0),\n            firstPrice = firstRecord.get('price'),\n            previousPrice = store.getAt(event.rowIdx -1),\n            price = record.get('price'),\n            percent,\n            pseudoPrice = record.get('pseudoPrice'),\n            percentPseudo = record.get('percentPseudo');\n\n        if(price && previousPrice && previousPrice.get('price') < price) {\n            record.set('price', previousPrice.get('price') - 0.01);\n            // We need to trigger update on PriceField without copy&paste all that checks and updates\n            me.updatedPriceField(event);\n        } else if(price && firstPrice > price) {\n            percent = (firstPrice - price) / firstPrice * 100;\n            percent = percent.toFixed(2);\n            record.set('percent', percent);\n        } else {\n            record.set('percent', null);\n        }\n\n        if(price && pseudoPrice > 0) {\n            percentPseudo = 100 - 100 / pseudoPrice * price;\n            percentPseudo = percentPseudo.toFixed(2);\n            record.set('percentPseudo', percentPseudo);\n        }\n    },\n\n    /**\n     * Helper function to update related fields of pseudoPercent\n     *\n     * @param event\n     */\n    updatedPseudoPercentField: function(event) {\n        var me = this,\n            record = event.record,\n            store = event.grid.store,\n            firstRecord = store.getAt(0),\n            firstPrice = firstRecord.get('price'),\n            price = record.get('price'),\n            pseudoPrice = record.get('pseudoPrice');\n\n        if(pseudoPrice > 0) {\n            // If the user enters 0 or nothing, the price has to be the pseudoPrice\n            if(!Ext.isNumeric(event.value) || event.value === 0) {\n                record.set('pseudoPrice', null);\n            } else if(event.value > 0) {\n                pseudoPrice = (price / (100 - event.value)) * 100;\n                pseudoPrice = pseudoPrice.toFixed(2);\n                record.set('pseudoPrice', pseudoPrice);\n            }\n\n            // We need to trigger update on PriceField without copy&paste all that checks and updates\n            me.updatedPriceField(event);\n        } else {\n            /**\n             * If the user enters a value when no pseudoPrice exists, we have to discard it\n             * because we strictly calculate by pseudoPrice - not revers by price\n             */\n            record.set('percentPseudo', 0);\n        }\n    },\n\n    /**\n     * Helper function to update related fields of pseudoPrice\n     *\n     * @param event\n     */\n    updatedPseudoPriceField: function(event) {\n        var me = this,\n            record = event.record,\n            price = record.get('price'),\n            percentPseudo = record.get('percentPseudo');\n\n        // If the user enters 0 or nothing, the percentPseudo has to be 0\n        if(!Ext.isNumeric(event.value) || event.value === 0) {\n            record.set('percentPseudo', 0);\n        } else if(event.value > 0) {\n            percentPseudo = 100 - (100 / event.value * price);\n            percentPseudo = percentPseudo.toFixed(2);\n            record.set('percentPseudo', percentPseudo);\n        }\n\n        // We need to trigger update on PriceField without copy&paste all that checks and updates\n        me.updatedPriceField(event);\n    },\n\n    /**\n     * Event listener function which fired when the user\n     * starts the edit of a price row.\n     *\n     * @param plugin\n     * @param event\n     * @return\n     */\n    onBeforeEditPrice: function(plugin, event) {\n        var store = event.grid.store,\n            maxValue = null,\n            minValue = 1,\n            price = event.record,\n            editor = event.column.getEditor(event.record),\n            previousPrice = store.getAt(event.rowIdx -1),\n            nextPrice = store.getAt(event.rowIdx + 1);\n\n        // Check if the current row is the last row\n        if ( event.field === 'to') {\n            // If the current row isn't the last row, we want to cancel the edit.\n            if (nextPrice) {\n                return false;\n            }\n            // Check if the current row has a previous row.\n            if (previousPrice) {\n                // If this is the case we have to set the min value for the \"to\" field\n                // +1 of the previous price\n                minValue = ~~(previousPrice.get('to') * 1) + 1;\n            }\n            editor.setMinValue(minValue);\n        }\n        // Check if the user want to edit the price field.\n        if ( event.field === \"price\" ) {\n            if (previousPrice && previousPrice.get('price') > 0) {\n                maxValue = previousPrice.get('price') - 0.01;\n            }\n            editor.setMaxValue(maxValue);\n        }\n    },\n\n    /**\n     * Removes the cloned prices of the article price store.\n     * @param priceStore\n     */\n    removeClonedPrices: function(priceStore) {\n        var toRemove = [];\n\n        priceStore.clearFilter();\n        priceStore.each(function(price) {\n            if (price instanceof Ext.data.Model && price.get('cloned')) {\n                toRemove.push(price);\n            }\n        });\n\n        priceStore.remove(toRemove);\n    },\n\n    /**\n     * Event will be fired when the user change the tab panel in the price field set.\n     *\n     * @event\n     * @param { Object } oldTab The previous tab panel\n     * @param { Object } newTab The clicked tab panel\n     * @param { Ext.data.Store } priceStore The price store\n     * @param { Array } customerGroupStore The price data of the first customer group.\n     */\n    onPriceTabChanged: function(oldTab, newTab, priceStore, customerGroupStore) {\n        var me = this,\n            toRemove = [],\n            firstGroupPrices = [],\n            customerGroup,\n            firstGroup = customerGroupStore.first();\n\n        customerGroup = newTab.customerGroup;\n        priceStore.clearFilter();\n\n        // First we remove all prices which have a cloned flag and save the prices of the first group.\n        priceStore.each(function(item) {\n            if (item instanceof Ext.data.Model && item.get('cloned')) {\n                toRemove.push(item);\n            }\n            if (item.get('customerGroupKey') === firstGroup.get('key')) {\n                firstGroupPrices.push(item);\n            }\n        });\n\n        // We have to collect the records, because if we remove the items in the for each,\n        // the store can't iterate the records correctly.\n        priceStore.remove(toRemove);\n\n        // Now we can filter the price store for the current customer group.\n        priceStore.filter({\n            filterFn: function(item) {\n                return item.get('customerGroupKey') === customerGroup.get('key');\n            }\n        });\n\n        // If the current customer group is the first/main customer group, we can return now.\n        if (customerGroup.get('id') === firstGroup.get('id')) {\n            return false;\n        }\n\n        // If no prices given for the current customer group, we have to copy the prices of the main customer group\n        if (priceStore.data.length === 0) {\n            priceStore.add(me.clonePrices(firstGroupPrices, customerGroup));\n        }\n    },\n\n    /**\n     * Clones the passed price array, sets the cloned flag for the cloned prices and\n     * sets the customer group equals the key of the passed group.\n     *\n     * @param firstGroupPrices\n     * @param customerGroup\n     */\n    clonePrices: function(firstGroupPrices, customerGroup) {\n        var me = this,\n            clonedPrices = [];\n\n        Ext.each(firstGroupPrices, function(price) {\n            var priceCopy = Ext.create('Shopware.apps.Article.model.Price', price.data);\n            priceCopy.set('customerGroupKey', customerGroup.get('key'));\n            priceCopy.set('cloned', true);\n            priceCopy.set('id', null);\n            clonedPrices.push(priceCopy);\n        });\n\n        return clonedPrices;\n    }\n});\n//{/block}\n", "/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n *\n * @category   Shopware\n * @package    Article\n * @subpackage Detail\n * @version    $Id$\n * @author shopware AG\n */\n\n/**\n * Shopware UI - Article detail window.\n * The detail window contains the definition of the base form and the element orientation within the form element.\n * The window passes the article record and the different stores to the form elements.\n *\n * @link http://www.shopware.de/\n * @license http://www.shopware.de/license\n * @package Article\n * @subpackage Detail\n */\n//{namespace name=backend/article/view/main}\n//{block name=\"backend/article/view/detail/window\"}\nExt.define('Shopware.apps.Article.view.detail.Window', {\n    /**\n     * Define that the order main window is an extension of the enlight application window\n     * @string\n     */\n    extend:'Enlight.app.Window',\n    /**\n     * Set base css class prefix and module individual css class for css styling\n     * @string\n     */\n    cls:Ext.baseCSSPrefix + 'article-detail-window',\n    /**\n     * List of short aliases for class names. Most useful for defining xtypes for widgets.\n     * @string\n     */\n    alias:'widget.article-detail-window',\n    /**\n     * Set no border for the window\n     * @boolean\n     */\n    border:false,\n    /**\n     * True to automatically show the component upon creation.\n     * @boolean\n     */\n    autoShow:true,\n    /**\n     * Set border layout for the window\n     * @string\n     */\n    layout:'fit',\n    /**\n     * Define window width\n     * @integer\n     */\n    width:'80%',\n    /**\n     * Define window height\n     * @integer\n     */\n    height:'90%',\n    /**\n     * True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button and disallow maximizing the window.\n     * @boolean\n     */\n    maximizable:true,\n\n    /**\n     * True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button and disallow minimizing the window.\n     * @boolean\n     */\n    minimizable:true,\n\n    /**\n     * A flag which causes the object to attempt to restore the state of internal properties from a saved state on startup.\n     */\n    stateful:false,\n\n    /**\n     * The unique id for this object to use for state management purposes.\n     */\n    stateId:'shopware-article-detail-window',\n\n    /**\n     * Contains all snippets for the component\n     * @object\n     */\n    snippets: {\n        titleGeneral: '{s name=window_title_general}Product details{/s}',\n        titleNew: '{s name=window_title}Article details: new article{/s}',\n        titleEdit:'{s name=window_title_edit}Article details : [0]{/s}',\n        formTab:'{s name=base_data}Base data{/s}',\n        categoryTab:'{s name=category_data}Categories{/s}',\n        imageTab:'{s name=image_tab}Images{/s}',\n        propertyTab:'{s name=property_tab}Properties{/s}',\n        variantTab:'{s name=variant_tab}Variants{/s}',\n        configuratorTab:'{s name=configurator_tab}Configurator{/s}',\n        linkTab:'{s name=link_tab}Links{/s}',\n        downloadTab:'{s name=download_tab}Downloads{/s}',\n        crossSellingTab:'{s name=cross_selling_tab}Cross-Selling{/s}',\n        esdTab:'{s name=esd_tab}ESD{/s}',\n        statisticTab:'{s name=statistic_tab}Statistics{/s}',\n        resourcesTab: '{s name=resources_tab}Resources{/s}',\n        save:'{s name=save_button}Save article{/s}',\n        cancel:'{s name=cancel_button}Cancel{/s}',\n        categoryNotice:'{s name=category/category_notice}Please select the category to which the product <strong>[0]</strong> is supposed to be assigned.{/s}',\n        categoryNoticeTitle:'{s name=category/category_assignment}Assign categories{/s}',\n        invalidPlugin: '{s name=window_invalid_plugin}The plugin [0] is not compatible with Shopware 4.1. Please uninstall the plugin or contact the provider regarding for a compatible version.{/s}',\n        descriptions: {\n            title:'{s name=detail/description/title}Description{/s}'\n        },\n        meta: {\n            title:'{s name=detail/meta/title}meta information{/s}',\n            metaTitle: {\n                label: '{s name=detail/meta/meta_title_label}Title{/s}',\n                support: '{s name=detail/meta/meta_title_support}Meta-Title for search engines{/s}'\n            },\n            description: {\n                label: '{s name=detail/meta/description_label}Short description{/s}',\n                support: '{s name=detail/meta/description_support}Short description for search engines, exports and overviews{/s}'\n            },\n            keywords: {\n                label: '{s name=detail/meta/keywords_label}Keywords{/s}',\n                support: '{s name=detail/meta/keywords_support}Meta keywords for search engines and intelligent search{/s}'\n            }\n        },\n        additional: {\n            title:'{s name=detail/additional_fields/title}Additional fields{/s}',\n            comment:'{s name=detail/additional_fields/comment}Comment{/s}',\n        },\n        basePrice: {\n            title:'{s name=detail/base_price/title}Base price calculation{/s}',\n            content:'{s name=detail/base_price/content}Content{/s}',\n            unit:'{s name=detail/base_price/unit}Unit{/s}',\n            basicUnit:'{s name=detail/base_price/basic_unit}Basic unit{/s}',\n            packingUnit:'{s name=detail/base_price/packing_unit}Packing unit{/s}',\n            empty:'{s name=empty}Please select...{/s}'\n        },\n        variant: {\n            listing: '{s name=variant/listing_tab}Listing{/s}',\n            configurator: '{s name=variant/configurator_tab}Configure variants{/s}',\n            settings: '{s name=variant/settings_tab}Settings{/s}',\n            button: {\n                listing: '{s name=variant/save_button_listing}Save variants{/s}',\n                settings: '{s name=variant/save_button_settings}Save settings{/s}',\n                configurator: '{s name=variant/save_button_configurator}Generate variants{/s}'\n            }\n        },\n        esd: {\n            button: {\n                save: '{s name=esd/save_button}Save ESD{/s}',\n                back: '{s name=esd/back_button}Back to overview{/s}'\n            }\n        },\n        variantTabTooltip: \"{s name=variant_tab/tooltip}Functionality isn't available in the split view mode.{/s}\"\n    },\n\n    /**\n     * The initComponent template method is an important initialization step for a Component.\n     * It is intended to be implemented by each subclass of Ext.Component to provide any needed constructor logic.\n     * The initComponent method of the class being created is called first,\n     * with each initComponent method up the hierarchy to Ext.Component being called thereafter.\n     * This makes it easy to implement and, if needed, override the constructor logic of the Component at any step in the hierarchy.\n     * The initComponent method must contain a call to callParent in order to ensure that the parent class' initComponent method is also called.\n     *\n     * @return void\n     */\n    initComponent:function () {\n        var me = this;\n        me.bbar = me.createToolbar();\n        me.registerEvents();\n        me.registerGlobalEvents();\n        me.callParent(arguments);\n        me.changeTitle();\n\n        // A incompatible plugin was found, throw a alert to inform the user.\n        if(me._invalidPlugin) {\n            Ext.MessageBox.alert(me.snippets.titleGeneral, Ext.String.format(me.snippets.invalidPlugin, '\"' + me['_invalidClassName'] + '\"'));\n        }\n\n        me.on('storesLoaded', me.onStoresLoaded, me);\n    },\n\n    registerGlobalEvents: function () {\n        Shopware.app.Application.on('assign-variant-image', this.onAssignImageToVariant, this);\n        Shopware.app.Application.on('grid-process-done', this.onProcessDone, this);\n    },\n\n    /**\n     * @param { Object } task\n     * @param { Ext.data.Model } record\n     * @param { Function } callback\n     */\n    onAssignImageToVariant: function (task, record, callback) {\n        this.fireEvent('assignVariantImage', task, record, callback);\n    },\n\n    /**\n     * @param { Shopware.window.Progress } progress\n     */\n    onProcessDone: function (progress) {\n        if (progress.name !== 'image-variants-progress-window') {\n            return;\n        }\n\n        this.fireEvent('gridProcessDone', progress);\n    },\n\n    /**\n     * Registers additional component events.\n     */\n    registerEvents: function() {\n        this.addEvents(\n            /**\n             * Event will be fired when the user clicks the save button.\n             *\n             * @event\n             * @param [object] The detail window\n             * @param [Ext.data.Model] The article record.\n             */\n            'saveArticle',\n            /**\n             * Event will be fired when the user clicks the cancel button.\n             *\n             * @event\n             * @param [object] The detail window\n             */\n            'cancel',\n\n            'storesLoaded'\n        );\n    },\n\n    /**\n     * Creates the main tab panel which displays the different tabs for the article sections.\n     * To extend the tab panel this function can be override.\n     *\n     * @return Ext.tab.Panel\n     */\n    createMainTabPanel: function() {\n        var me = this, tooltip = '';\n\n        if (me.subApp.splitViewActive) {\n            tooltip = me.snippets.variantTabTooltip;\n        }\n\n        me.categoryTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.categoryTab,\n            disabled: true,\n            layout: 'border',\n            name: 'category'\n        });\n\n        me.imageTab = Ext.create('Ext.container.Container', {\n            layout: {\n                type: 'vbox',\n                align: 'stretch'\n            },\n            title: me.snippets.imageTab,\n            name: 'image',\n            disabled: true,\n            cls: Ext.baseCSSPrefix + 'image-tab-container'\n        });\n\n        me.variantTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.variantTab,\n            disabled: true,\n            layout: 'fit',\n            name: 'variant-tab',\n            tabConfig: (me.subApp.splitViewActive) ? {\n                tooltip: tooltip,\n                tooltipType: Ext.isGecko ? 'title' : 'qtip'\n            } : { }\n        });\n\n        me.crossSellingTab = Ext.create('Ext.form.Panel', {\n            title: me.snippets.crossSellingTab,\n            disabled: true,\n            layout: 'fit',\n            deferredRender: true\n        });\n\n        me.propertiesTab = Ext.create('Ext.container.Container', {\n            disabled: true,\n            layout: 'fit',\n            name: 'properties-tab',\n            title: me.snippets.propertyTab,\n            items: [ me.createPropertiesFieldSet() ]\n        });\n\n        me.esdTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.esdTab,\n            disabled: true,\n            name: 'esd-tab',\n            layout: 'card',\n            deferredRender: true\n        });\n\n        me.statisticTab = Ext.create('Ext.container.Container', {\n            title: me.snippets.statisticTab,\n            disabled: true,\n            name: 'statistic-tab',\n            layout: {\n                align: 'stretch',\n                padding: 10,\n                type: 'vbox'\n            }\n        });\n\n        me.resourcesTab = Ext.create('Ext.form.Panel', {\n            title: me.snippets.resourcesTab,\n            name: 'resources-tab',\n            disabled: true,\n            autoScroll: true,\n            bodyPadding: 10\n        });\n\n        return me.mainTab = Ext.create('Ext.tab.Panel', {\n            name: 'main-tab-panel',\n            items: [\n                me.createBaseTab(),\n                me.categoryTab,\n                me.imageTab,\n                me.variantTab,\n                me.propertiesTab,\n                me.crossSellingTab,\n                me.esdTab,\n                me.statisticTab,\n                me.resourcesTab\n            ]\n        });\n    },\n\n\n    /**\n     * Changes the title of the article detail window header and the footer button.\n     */\n    changeTitle: function() {\n        var me = this, title, footerButton;\n\n        title = me.snippets.titleNew;\n        if (me.article && me.article.get('id')>0) {\n            title = Ext.String.format(\n                me.snippets.titleEdit,\n                Ext.String.htmlEncode(me.article.get('name'))\n            );\n        }\n        me.setTitle(title);\n\n        // Change the title of the footer button\n        if(me._toolbarBtn) {\n            footerButton = me._toolbarBtn;\n            footerButton.setText(title);\n        }\n    },\n\n    /**\n     * Creates the tab panel for the base data. Contains a form panel which allows the user\n     * to edit the selected record\n     * @return Ext.container.Container\n     */\n    createBaseTab: function() {\n        var me = this;\n\n        me.detailForm = Ext.create('Ext.form.Panel', {\n            region:'center',\n            name: 'detail-form',\n            bodyPadding: 10,\n            autoScroll: true,\n            defaults: {\n                labelWidth: 155\n            },\n            plugins: [{\n                ptype: 'translation',\n                pluginId: 'translation',\n                translationType: 'article',\n                translationMerge: false,\n                translationKey: null\n            }],\n            items: [\n                me.createBaseFieldSet(),\n                me.createPriceFieldSet(),\n                me.createDescriptionFieldSet(),\n                me.createMetaFieldSet(),\n                me.createBasePriceFieldSet(),\n                me.createSettingsFieldSet()\n            ],\n            dockedItems: [\n                me.createActionsToolbar()\n            ]\n        });\n\n        me.attributeForm = Ext.create('Shopware.attribute.Form', {\n            table: 's_articles_attributes',\n            allowTranslation: false,\n            fieldSetPadding: 0,\n            translationForm: me.detailForm\n        });\n        me.detailForm.add(me.attributeForm);\n\n        return me.detailContainer = Ext.create('Ext.container.Container', {\n            layout: 'fit',\n            name: 'main',\n            title: me.snippets.formTab,\n            items: [\n                me.detailForm\n            ]\n        });\n    },\n\n    /**\n     * Creates the field set for the article property configuration.\n     */\n    createPropertiesFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Properties');\n    },\n\n    /**\n     * Creates the field set for the article setting configuration.\n     */\n    createSettingsFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Settings');\n    },\n\n    /**\n     * Creates the toolbar for the article actions.\n     * @return Shopware.apps.Article.view.detail.Toolbar\n     */\n    createActionsToolbar: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Toolbar', {\n            subApp: this.subApp\n        });\n    },\n\n    /**\n     * Creates the base field set for the detail form.\n     * @return Shopware.apps.Article.view.detail.Base\n     */\n    createBaseFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Base');\n    },\n\n    /**\n     * Creates the field set for the article price configuration.\n     */\n    createPriceFieldSet: function() {\n        return Ext.create('Shopware.apps.Article.view.detail.Prices');\n    },\n\n\n    /**\n     * Creates the field set for the article base price calculation.\n     * @return Ext.form.FieldSet\n     */\n    createBasePriceFieldSet: function() {\n        var me = this;\n\n        me.unitComboBox = Ext.create('Ext.form.field.ComboBox', {\n            name: 'mainDetail[unitId]',\n            queryMode: 'local',\n            fieldLabel: me.snippets.basePrice.unit,\n            emptyText: me.snippets.basePrice.empty,\n            displayField: 'name',\n            editable:false,\n            valueField: 'id',\n            labelWidth: 155,\n            anchor: '100%',\n            xtype: 'textfield'\n        });\n\n        return Ext.create('Ext.form.FieldSet', {\n            layout: 'anchor',\n            cls: Ext.baseCSSPrefix + 'article-base-price-field-set',\n            defaults: {\n                labelWidth: 155,\n                anchor: '100%',\n                xtype: 'textfield'\n            },\n            title: me.snippets.basePrice.title,\n            items: [\n                me.unitComboBox, {\n                    xtype: 'numberfield',\n                    submitLocaleSeparator: false,\n                    decimalPrecision: 4,\n                    name: 'mainDetail[purchaseUnit]',\n                    fieldLabel: me.snippets.basePrice.content\n                }, {\n                    xtype: 'numberfield',\n                    submitLocaleSeparator: false,\n                    name: 'mainDetail[referenceUnit]',\n                    decimalPrecision: 3,\n                    fieldLabel: me.snippets.basePrice.basicUnit\n                }, {\n                    name: 'mainDetail[packUnit]',\n                    translationName: 'packUnit',\n                    translatable: true,\n                    fieldLabel: me.snippets.basePrice.packingUnit\n                }\n            ]\n        });\n    },\n\n    /**\n     * Creates the description field set for the main form panel.\n     * Contains the keywords, short and long description.\n     * @return Ext.form.FieldSet\n     */\n    createDescriptionFieldSet: function() {\n        var me = this;\n\n        return Ext.create('Ext.form.FieldSet', {\n            layout: 'anchor',\n            cls: Ext.baseCSSPrefix + 'article-description-field-set',\n            defaults: {\n                labelWidth: 155,\n                anchor: '100%',\n                translatable: true,\n                xtype: 'textarea'\n            },\n            title: me.snippets.descriptions.title,\n            items: [\n                {\n                    xtype: 'tinymce',\n                    name: 'descriptionLong',\n                    margin: '0 0 15',\n                    cls: Ext.baseCSSPrefix + 'article-description-long',\n                    height: 100\n                }\n            ]\n        });\n    },\n\n    /**\n     * Creates the meta field set for the main form panel.\n     * Contains the keywords, and the short meta description\n     * @return Ext.form.FieldSet\n     */\n    createMetaFieldSet: function () {\n        var me = this;\n\n        return Ext.create('Ext.form.FieldSet', {\n            layout: 'anchor',\n            cls: Ext.baseCSSPrefix + 'article-meta-field-set',\n            defaults: {\n                labelWidth: 155,\n                anchor: '100%',\n                translatable: true,\n                xtype: 'textarea'\n            },\n            title: me.snippets.meta.title,\n            items: [\n                {\n                    xtype: 'textfield',\n                    name: 'metaTitle',\n                    fieldLabel: me.snippets.meta.metaTitle.label,\n                    supportText: me.snippets.meta.metaTitle.support\n                },\n                {\n                    name: 'description',\n                    height: 100,\n                    fieldLabel: me.snippets.meta.description.label,\n                    supportText: me.snippets.meta.description.support\n                },\n                {\n                    name: 'keywords',\n                    height: 100,\n                    fieldLabel: me.snippets.meta.keywords.label,\n                    supportText: me.snippets.meta.keywords.support\n                }\n            ]\n        });\n    },\n\n    /**\n     * Creates the tab panel tab for the category selection.\n     * @return Array\n     */\n    createCategoryTab: function() {\n        var me = this, rightContainer;\n\n        me.categoryTree = Ext.create('Shopware.apps.Article.view.category.Tree', {\n            store: me.categoryTreeStore,\n            region: 'west'\n        });\n\n        me.seoCategoryList = Ext.create('Shopware.apps.Article.view.category.Seo', {\n            flex: 1,\n            store: me.article.getSeoCategories(),\n            margin: 10,\n            autoScroll: true\n        });\n\n        me.seoCategoryList.setCategoryStore(me.article.getCategory());\n\n        me.categoryDropZone = Ext.create('Shopware.apps.Article.view.category.DropZone', {\n            height: 120,\n            autoScroll:true,\n            margin: 10\n        });\n\n        me.categoryList = Ext.create('Shopware.apps.Article.view.category.List', {\n            article: me.article,\n            flex: 1,\n            autoScroll:true,\n            margin: 10\n        });\n\n        rightContainer = Ext.create('Ext.container.Container', {\n            region: 'center',\n            bodyPadding: 10,\n            name: 'category-tab',\n            plain: true,\n            autoScroll:true,\n            layout: {\n                align: 'stretch',\n                type: 'vbox'\n            },\n            items: [\n                me.categoryDropZone, me.categoryList, me.seoCategoryList\n            ]\n        });\n\n        return [ me.categoryTree, rightContainer ];\n    },\n\n    /**\n     * Creates the image tab panel.\n     * @return Array\n     */\n    createImageTab: function() {\n        var me = this, topContainer;\n\n        me.imageList = Ext.create('Shopware.apps.Article.view.image.List', {\n            article: me.article,\n            flex: 5,\n            layout: {\n                anchor: '100%'\n            }\n        });\n\n        me.imageInfo = Ext.create('Shopware.apps.Article.view.image.Info', {\n            flex: 4,\n            margin: '0 0 0 10',\n            configuratorGroupStore: me.configuratorGroupStore\n        });\n\n        topContainer = Ext.create('Ext.container.Container', {\n            flex: 1,\n            padding: 10,\n            layout: {\n                type: 'hbox',\n                align: 'stretch'\n            },\n            items: [\n                me.imageList,\n                me.imageInfo\n            ]\n        });\n\n        return [ topContainer ];\n    },\n\n    /**\n     * Creates the window toolbar which docked bottom and contains the cancel and save button.\n     * @return Ext.toolbar.Toolbar\n     */\n    createToolbar: function() {\n        var me = this;\n\n        //create the save button which fire the save event, the save event is handled in the detail controller.\n        me.saveButton = Ext.create('Ext.button.Button', {\n            cls:'primary',\n            name: 'save-article-button',\n            text: me.snippets.save,\n            handler: function() {\n                me.fireEvent('saveArticle', me, me.article);\n            }\n        });\n\n        //creates the cancel button which fire the cancel event, the cancel event is handled in the detail controller.\n        me.cancelButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.cancel,\n            name: 'cancel-button',\n            cls: 'secondary',\n            handler: function() {\n                me.fireEvent('cancel', me, me.article);\n            }\n        });\n\n        //creates the global save button for the configurator\n        me.configuratorSaveButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.variant.button.configurator,\n            cls: 'primary',\n            hidden: true,\n            name: 'configurator-save-button',\n            handler: function() {\n                me.variantListing.fireEvent('createVariants', me.article);\n            }\n        });\n\n        //creates the global save button for the esd\n        me.esdSaveButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.esd.button.save,\n            cls: 'primary',\n            hidden: true,\n            name: 'esd-save-button',\n            handler: function() {\n                me.esdListing.fireEvent('saveEsd');\n            }\n        });\n\n        //creates the global save button for the esd\n        me.esdBackButton = Ext.create('Ext.button.Button', {\n            text: me.snippets.esd.button.back,\n            cls: 'secondary',\n            hidden: true,\n            name: 'esd-back-button',\n            handler: function() {\n                me.esdListing.fireEvent('backToList');\n            }\n        });\n\n        //creates the toolbar with a spaces, the cancel and save button.\n        return Ext.create('Ext.toolbar.Toolbar', {\n            items: [\n                { xtype: 'tbfill' },\n                me.cancelButton,\n                /*{if {acl_is_allowed privilege=save}}*/\n                me.saveButton,\n                /*{/if}*/\n                me.configuratorSaveButton,\n                me.esdBackButton,\n                me.esdSaveButton\n            ]\n        });\n\n    },\n\n    /**\n     * Creates the variant tab panel which contains the configuration elements for the article variants and configurator.\n     * @return Ext.container.Container\n     */\n    createVariantTab: function() {\n        var me = this, listing, configurator;\n        listing = me.createVariantListingTab();\n        configurator = me.createVariantConfiguratorTab();\n\n        me.configuratorTab = Ext.create('Ext.tab.Panel', {\n            name: 'configurator-tab',\n            items: [\n                listing,\n                configurator\n            ],\n            margin: 10\n        });\n\n        return me.configuratorTab;\n    },\n\n\n    /**\n     * Creates the listing component for the variant tab.\n     * @return Ext.container.Container\n     */\n    createVariantListingTab: function() {\n        var me = this;\n\n        me.variantStore = Ext.create('Shopware.apps.Article.store.Variant');\n\n        if (me.article) {\n            me.variantStore.getProxy().extraParams.articleId = me.article.get('id');\n        }\n\n        me.variantListing = Ext.create('Shopware.apps.Article.view.variant.List', {\n            border: false,\n            store: me.variantStore\n        });\n\n        return Ext.create('Ext.container.Container', {\n            items: [ me.variantListing ],\n            layout: 'fit',\n            name: 'listing',\n            title: me.snippets.variant.listing\n        });\n    },\n\n    /**\n     * Creates the variant configurator for the variant tab panel.\n     * @return Ext.container.Container.\n     */\n    createVariantConfiguratorTab: function() {\n        var me = this;\n\n        return Ext.create('Shopware.apps.Article.view.variant.Configurator', {\n            title: me.snippets.variant.configurator,\n            article: me.article,\n            dependencyStore: me.dependencyStore,\n            priceVariationStore: me.priceVariationStore,\n            name: 'configurator',\n            configuratorGroupStore: me.configuratorGroupStore,\n            articleConfiguratorSet: me.articleConfiguratorSet\n        });\n    },\n\n    createCrossselingTab: function() {\n        var me = this;\n\n        return Ext.create('Shopware.apps.Article.view.crossselling.Tab', {\n            name: 'crossselling',\n            article: me.article\n        });\n    },\n\n    /**\n     * Creates the esd tab which contains the configuration for the esd options.\n     * @return Ext.container.Container\n     */\n    createEsdTab: function() {\n        var me = this;\n\n        var esdStore      = Ext.create('Shopware.apps.Article.store.Esd');\n        var filteredStore = Ext.create('Shopware.apps.Article.store.Esd');\n        esdStore.addListener('beforeload', function(store, records) {\n            filteredStore.load({\n                params: {\n                    filterCandidates: true\n                }\n            });\n        });\n        esdStore.getProxy().extraParams.articleId = me.article.get('id');\n        filteredStore.getProxy().extraParams.articleId = me.article.get('id');\n\n        me.esdListing = Ext.create('Shopware.apps.Article.view.esd.List', {\n            esdStore: esdStore,\n            filteredStore: filteredStore,\n            article: me.article\n        });\n\n        return me.esdListing;\n    },\n\n    /**\n     * Creates the statistic tab which contains a graph for the article sales.\n     * @return Array\n     */\n    createStatisticTab: function() {\n        var me = this;\n\n        var statisticStore = Ext.create('Shopware.apps.Article.store.Statistic');\n        var chartStore = Ext.create('Shopware.apps.Article.store.Statistic');\n\n        statisticStore.getProxy().extraParams.articleId = me.article.get('id');\n        chartStore.getProxy().extraParams.articleId = me.article.get('id');\n        chartStore.getProxy().extraParams.chart = true;\n\n        var list = Ext.create('Shopware.apps.Article.view.statistics.List', {\n            flex: 1,\n            article: me.article,\n            store: statisticStore\n        });\n\n        var chart = Ext.create('Shopware.apps.Article.view.statistics.Chart', {\n            height: 250,\n            flex: 1,\n            article: me.article,\n            store: chartStore\n        });\n\n        return [ chart, list ];\n    },\n\n    /**\n     * Creates the resources tab that contains the additional links\n     */\n    createResourcesTab: function() {\n        var me = this;\n\n        me.resourcesLinks = Ext.create('Shopware.apps.Article.view.resources.Links', {\n            article: me.article\n        });\n\n        me.resourcesDownloads = Ext.create('Shopware.apps.Article.view.resources.Downloads', {\n            article: me.article\n        });\n\n        return [ me.resourcesLinks, me.resourcesDownloads ]\n    },\n\n    onStoresLoaded: function(article, stores) {\n        var me = this;\n        me.article = article;\n\n        me.unitComboBox.bindStore(stores['unit']);\n        me.supplierStore = stores['suppliers'];\n        window.setTimeout(function() {\n            me.detailForm.loadRecord(me.article);\n        }, 10);\n\n        me.categoryTab.add(me.createCategoryTab());\n        me.categoryTab.setDisabled(false);\n\n        me.imageTab.add(me.createImageTab());\n        me.imageTab.setDisabled(false);\n\n        me.variantTab.add(me.createVariantTab());\n\n        me.crossSellingTab.add(me.createCrossselingTab());\n        me.crossSellingTab.setDisabled(false);\n\n        me.propertiesTab.setDisabled(false);\n\n        me.esdTab.add(me.createEsdTab());\n        me.esdTab.setDisabled((me.article.get('id') === null));\n\n        me.statisticTab.add(me.createStatisticTab());\n        me.statisticTab.setDisabled(me.article.get('id') === null);\n\n        me.resourcesTab.add(me.createResourcesTab());\n        me.resourcesTab.setDisabled(false);\n\n        me.variantListing.customerGroupStore = stores['customerGroups'];\n\n        me.attributeForm.loadAttribute(article.get('mainDetailId'));\n        me.attributeForm.disableForm(false);\n\n        if(me.subApp.splitViewActive) {\n            me.variantTab.setDisabled(true);\n        }\n    },\n\n    /**\n     * Helper method which is especially for third-party developers which want to to add an additional tab\n     * to the main tab panel which is used in the article module. he method provides an easy-to-use way to add a new tab\n     * and handles the event binding for further versions of Shopware.\n     *\n     * @example The following examples shows how to add a tab with a static content:\n     * <code>\n     * this.registerAdditionalTab({\n     *    title: 'Test-Tab',\n     *    tabConfig: { disabled: false },\n     *    contentFn: function(article, stores, eOpts) {\n     *       eOpts.tab.add({ xtype: 'panel', html: 'Tab-Content' });\n     *    }\n     * });\n     * </code>\n     *\n     * @throws Ext.Error - If no configuration object is passed the method raises an global Ext.Error\n     *         which kills the further processing of the method.\n     *\n     * @param  { Object } opts - Configuration object of the new tab\n     *         opts.title - { String } Title of the tab\n     *\n     *         opts.articleChangeFn - { Function } (optional) The callback method which will be triggered when\n     *         the article has been changed. The following parameters are passed to the callback function:\n     *             store - { Object } Instance of the `Shopware.apps.Article.store.Batch` which includes the\n     *             article data and all available associations which are used by the sub-components of this\n     *             component.\n     *             eOpts - { Object } Additional event parameters which are set by ExtJS. Please see the documentation\n     *             of Ext.util.Observable#addListener` method to see all available parameters.\n     *\n     *         opts.contentFn - { Function } The callback method which will be used to set the content of the tab.\n     *         The following parameters are passed to the callback function:\n     *             article - { Object } The article model, e.g. `Shopware.apps.Article.model.Article`\n     *             stores - { Object } All available stores of the article main window, which are used by it's sub-\n     *             compontents.\n     *             eOpts - { Object } Additional event parameters. The following custom paremeters are passed to the\n     *             function:\n     *                 tab - { Object } The newly created type\n     *                 config - { Object } The configuration object which was used to create the tab\n     *\n     *         opts.insertIndex - { Number } (optional) Numeric position (starting by 0) where the tab will be injected.\n     *         If the value is smaller than 0 or isn't passed, the tab will be inserted after the last available tab.\n     *\n     *         opts.tabConfig - { Object } (optional) Tab configuration of will be passsed in to create the tab\n     *         container. To modify the type of the created container, please use the second parameter `containerType`.\n     *\n     *         opts.scope - { Object } (optional) The scope which will be used in the callback methods `opts.contentFn`\n     *         and `opts.articleChangeFn`. If the parameter wasn't passed in, the scope will be set to this component,\n     *         e.g. `Shopware.apps.Article.view.detail.Window`.\n     *\n     * @param  { String } containerType (optional) - ExtJS component name which will be used as the\n     *         container for the tab content. The method supports full class names as well as\n     *         `xtypes`. If a class name is been used, class name needs to be in the namespace `Ext` or `Shopware`.\n     *         Default type is `Ext.container.Container`.\n     *\n     * @return { Boolean } - Truthy if the tab was sucessfully created, otherwise falsy.\n     */\n    registerAdditionalTab: function(opts, containerType) {\n        var me = this, tabPanel = me.mainTab, tabContainer, cfg = {}, articleChangeFn,\n            defaultOpts = {\n                'title': 'Tab',\n                'articleChangeFn': Ext.emptyFn,\n                'contentFn': Ext.emptyFn,\n                'insertIndex': -1,\n                'tabConfig': {\n                    'disabled': true,\n                    'layout': 'fit'\n                },\n                'scope': me\n            }, availableStores;\n\n        // We're having no options for the new tab, so raise an error...\n        if(!opts || opts.length) {\n            Ext.Error.raise({\n                sourceClass: me.$className,\n                sourceMethod: 'registerAdditionalTab',\n                msg: 'The method needs at least a configuration object as a first parameter which ' +\n                     'includes the name of the tab and the callback method which inserts the content into '+\n                     'the newly created tab. Please see the example usage.'\n            });\n            return false;\n        }\n\n        // Check if the user configuration includes an `contentFn` which creates the content of the tab\n        if(!opts || !opts.hasOwnProperty('contentFn')) {\n            Ext.Error.raise({\n                sourceClass: me.$className,\n                sourceMethod: 'registerAdditionalTab',\n                msg: 'The method needs a callback method named `contentFn`, which will be used to insert the content ' +\n                     'inserts the content of the newly created tab.'\n            });\n            return false;\n        }\n\n        // Modify the passed parameter(s)\n        if(containerType && !containerType.match(/^(Ext|Shopware)/)) {\n\n            // Support for passing a `xtype` for the containerType\n            containerType = Ext.ClassManager.getNameByAlias(containerType);\n        }\n        containerType = (containerType && containerType.length) ? containerType : 'Ext.container.Container';\n\n        // Merge the passed user configuration with our default configuration\n        cfg = Ext.merge(cfg, defaultOpts, opts);\n        articleChangeFn = cfg['articleChangeFn'];\n\n        // Create the tab container\n        tabContainer = Ext.create(containerType, Ext.apply(cfg.tabConfig, {\n            title: cfg.title\n        }));\n\n        // Add the tab container to the main tab panel\n        if(cfg.insertIndex >= 0) {\n            tabPanel.insert(cfg.insertIndex, tabContainer);\n        } else {\n            tabPanel.add(tabContainer);\n        }\n\n        // Collects the available stores to provide a constant API which is compatible with further versions.\n        // It doesn't look great but that is necessary to provide the goal...\n        availableStores = {\n            customerGroupStore: me.customerGroupStore,\n            shopStore: me.shopStore,\n            taxStore: me.taxStore,\n            supplierStore: me.supplierStore,\n            templateStore: me.templateStore,\n            dependencyStore: me.dependencyStore,\n            priceVariationStore: me.priceVariationStore,\n            unitStore: me.unitStore,\n            propertyStore: me.propertyStore,\n            priceGroupStore: me.priceGroupStore,\n            articleConfiguratorSet: me.articleConfiguratorSet,\n            categoryTreeStore: me.categoryTreeStore,\n            configuratorGroupStore: me.configuratorGroupStore\n        };\n\n        // Trigger the `contentFn` which sets the content of the tab container\n        me.on('storesLoaded', function() {\n            cfg['contentFn'].apply(cfg.scope, [ me.article, availableStores, { tab: tabContainer, config: cfg } ]);\n        });\n\n        // Bind event listener which triggers when the article store was changed\n        me.subApplication.on('ProductModule:storesChanged', articleChangeFn, cfg.scope, {\n            tab: tabContainer,\n            config: cfg\n        });\n\n        return true;\n    },\n\n    destroy: function () {\n        Shopware.app.Application.un('grid-process-done', this.onProcessDone, this);\n        Shopware.app.Application.un('assign-variant-image', this.onAssignImageToVariant, this);\n\n        this.callParent(arguments);\n    }\n});\n//{/block}\n", "{block name='frontend_detail_index_header'}\n    <header class=\"product--header\">\n        {block name='frontend_detail_index_header_inner'}\n            <div class=\"product--info\">\n                {block name='frontend_detail_index_product_info'}\n\n                    {* Product name *}\n                    {block name='frontend_detail_index_name'}\n                        <h1 class=\"product--title\" itemprop=\"name\">\n                            {$sArticle.articleName|escape}\n                        </h1>\n                    {/block}\n\n                    {block name=\"frontend_detail_index_data_image\"}\n                        {foreach $sArticle.images as $image}\n                            <meta itemprop=\"image\" content=\"{$image.source}\"/>\n                        {/foreach}\n                    {/block}\n\n                    {block name=\"frontend_detail_index_data_ean\"}\n                        {if $sArticle.ean}\n                            {$eanLength = $sArticle.ean|strlen}\n                            {if $eanLength == 8}\n                                <meta itemprop=\"gtin8\" content=\"{$sArticle.ean}\"/>\n                            {elseif $eanLength == 12}\n                                <meta itemprop=\"gtin12\" content=\"{$sArticle.ean}\"/>\n                            {elseif $eanLength == 13}\n                                <meta itemprop=\"gtin13\" content=\"{$sArticle.ean}\"/>\n                            {elseif $eanLength == 14}\n                                <meta itemprop=\"gtin14\" content=\"{$sArticle.ean}\"/>\n                            {/if}\n                        {/if}\n                    {/block}\n\n                    {* Product - Supplier information *}\n                    {block name='frontend_detail_supplier_info'}\n                        {$productSupplierClasses = 'product--supplier'}\n                        {$imgSrc = $sArticle.supplierImg}\n                        {$imgSrcSet = ''}\n                        {if $sArticle.supplierMedia.thumbnails[0].source}\n                            {$imgSrc = $sArticle.supplierMedia.thumbnails[0].source}\n\n                            {if $sArticle.supplierMedia.thumbnails[0].retinaSource}\n                                {$retinaSource = $sArticle.supplierMedia.thumbnails[0].retinaSource}\n                                {$imgSrcSet = \"$imgSrc, $retinaSource 2x\"}\n                            {/if}\n\n                            {if $sArticle.supplierMedia.extension == 'svg'}\n                                {$productSupplierClasses = $productSupplierClasses|cat:' image--svg'}\n                            {/if}\n                        {/if}\n\n                        {if $imgSrc}\n                            <div class=\"{$productSupplierClasses}\">\n                                {s name=\"DetailDescriptionLinkInformation\" namespace=\"frontend/detail/description\" assign=\"snippetDetailDescriptionLinkInformation\"}{/s}\n                                <a href=\"{url controller='listing' action='manufacturer' sSupplier=$sArticle.supplierID}\"\n                                   title=\"{$snippetDetailDescriptionLinkInformation|escape}\"\n                                   class=\"product--supplier-link\">\n                                    <img src=\"{$imgSrc}\" {if !empty($imgSrcSet)}srcset=\"{$imgSrcSet}\" {/if} alt=\"{$sArticle.supplierName|escape}\">\n                                </a>\n                            </div>\n                        {/if}\n                    {/block}\n\n                    {* Product rating *}\n                    {block name=\"frontend_detail_comments_overview\"}\n                        {if !{config name=VoteDisable}}\n                            <div class=\"product--rating-container\">\n                                {s namespace=\"frontend/detail/actions\" name=\"DetailLinkReview\" assign=\"snippetDetailLinkReview\"}{/s}\n                                <a href=\"#product--publish-comment\" class=\"product--rating-link\" rel=\"nofollow\" title=\"{$snippetDetailLinkReview|escape}\">\n                                    {include file='frontend/_includes/rating.tpl' points=$sArticle.sVoteAverage.average type=\"aggregated\" count=$sArticle.sVoteAverage.count}\n                                </a>\n                            </div>\n                        {/if}\n                    {/block}\n                {/block}\n            </div>\n        {/block}\n    </header>\n{/block}\n", "{extends file='frontend/index/header.tpl'}\n\n{* Meta title *}\n{block name=\"frontend_index_header_title\"}{if $sArticle.metaTitle}{$sArticle.metaTitle|escapeHtml} | {{config name=sShopname}|escapeHtml}{else}{$sArticle.articleName|escape} | {$smarty.block.parent}{/if}{/block}\n\n{* Meta opengraph tags *}\n{block name='frontend_index_header_meta_tags_opengraph'}\n    <meta property=\"og:type\" content=\"product\" />\n    <meta property=\"og:site_name\" content=\"{{config name=sShopname}|escapeHtml}\" />\n    <meta property=\"og:url\" content=\"{url sArticle=$sArticle.articleID title=$sArticle.articleName controller=detail}\" />\n    <meta property=\"og:title\" content=\"{$sArticle.articleName|escapeHtml}\" />\n    <meta property=\"og:description\" content=\"{$sArticle.description_long|strip_tags|trim|truncate:$SeoDescriptionMaxLength:'\u2026'|escapeHtml}\" />\n    <meta property=\"og:image\" content=\"{$sArticle.image.source}\" />\n\n    <meta property=\"product:brand\" content=\"{$sArticle.supplierName|escapeHtml}\" />\n    <meta property=\"product:price\" content=\"{$sArticle.price}\" />\n    <meta property=\"product:product_link\" content=\"{url sArticle=$sArticle.articleID title=$sArticle.articleName controller=detail}\" />\n\n    <meta name=\"twitter:card\" content=\"product\" />\n    <meta name=\"twitter:site\" content=\"{{config name=sShopname}|escapeHtml}\" />\n    <meta name=\"twitter:title\" content=\"{$sArticle.articleName|escapeHtml}\" />\n    <meta name=\"twitter:description\" content=\"{$sArticle.description_long|strip_tags|trim|truncate:$SeoDescriptionMaxLength:'\u2026'|escapeHtml}\" />\n    <meta name=\"twitter:image\" content=\"{$sArticle.image.source}\" />\n{/block}\n\n{* Keywords *}\n{block name=\"frontend_index_header_meta_keywords\"}{if $sArticle.keywords}{$sArticle.keywords|escapeHtml}{elseif $sArticle.sDescriptionKeywords}{$sArticle.sDescriptionKeywords|escapeHtml}{/if}{/block}\n\n{* Description *}\n{block name=\"frontend_index_header_meta_description\"}{if $sArticle.description}{$sArticle.description|escapeHtml}{else}{$sArticle.description_long|strip_tags|trim|escapeHtml}{/if}{/block}\n\n{* Canonical link *}\n{block name='frontend_index_header_canonical'}\n    <link rel=\"canonical\" href=\"{url sArticle=$sArticle.articleID title=$sArticle.articleName controller=detail}\" />\n{/block}\n", "{namespace name=\"frontend/detail/comment\"}\n\n{* Offcanvas buttons *}\n{block name='frontend_detail_rating_buttons_offcanvas'}\n    <div class=\"buttons--off-canvas\">\n        {block name='frontend_detail_rating_buttons_offcanvas_inner'}\n            {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\" assign=\"snippetOffcanvasCloseMenu\"}{/s}\n            <a href=\"#\" title=\"{$snippetOffcanvasCloseMenu|escape}\" class=\"close--off-canvas\">\n                <i class=\"icon--arrow-left\"></i>\n                {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\"}{/s}\n            </a>\n        {/block}\n    </div>\n{/block}\n\n<div class=\"content--product-reviews\" id=\"detail--product-reviews\">\n\n    {* Response save comment *}\n    {if $sAction == \"ratingAction\"}\n        {block name='frontend_detail_comment_error_messages'}\n            {if $sErrorFlag}\n                {if $sErrorFlag['sCaptcha']}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'error'}\n                    {s name=\"DetailCommentInfoFillOutCaptcha\" assign=\"content\"}{/s}\n                {else}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'error'}\n                    {s name=\"DetailCommentInfoFillOutFields\" assign=\"content\"}{/s}\n                {/if}\n            {else}\n                {if {config name=\"OptinVote\"} && !{$smarty.get.sConfirmation} && !{$userLoggedIn}}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'success'}\n                    {s name=\"DetailCommentInfoSuccessOptin\" assign=\"content\"}{/s}\n                {else}\n                    {$file = 'frontend/_includes/messages.tpl'}\n                    {$type = 'success'}\n                    {s name=\"DetailCommentInfoSuccess\" assign=\"content\"}{/s}\n                {/if}\n            {/if}\n\n            {include file=$file type=$type content=$content}\n        {/block}\n    {/if}\n\n    {* Review title *}\n    {block name=\"frontend_detail_tabs_rating_title\"}\n        <div class=\"content--title\">\n            {s name=\"DetailCommentHeader\"}{/s} \"{$sArticle.articleName|escape}\"\n        </div>\n    {/block}\n\n    {* Display review *}\n    {if $sArticle.sVoteComments}\n        {foreach $sArticle.sVoteComments as $vote}\n\n            {* Review entry *}\n            {block name=\"frontend_detail_comment_block\"}\n                {include file=\"frontend/detail/comment/entry.tpl\" isLast=$vote@last}\n            {/block}\n\n            {* Review answer *}\n            {block name=\"frontend_detail_answer_block\"}\n                {if $vote.answer}\n                    {include file=\"frontend/detail/comment/answer.tpl\" isLast=$vote@last}\n                {/if}\n            {/block}\n        {/foreach}\n    {/if}\n\n    {* Publish product review *}\n    {block name='frontend_detail_comment_post'}\n        <div class=\"review--form-container\">\n            {include file=\"frontend/detail/comment/form.tpl\"}\n        </div>\n    {/block}\n</div>\n", "{namespace name=\"frontend/detail/description\"}\n\n{* Offcanvas buttons *}\n{block name='frontend_detail_description_buttons_offcanvas'}\n    <div class=\"buttons--off-canvas\">\n        {block name='frontend_detail_description_buttons_offcanvas_inner'}\n            {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\" assign=\"snippetOffcanvasCloseMenu\"}{/s}\n            <a href=\"#\" title=\"{$snippetOffcanvasCloseMenu|escape}\" class=\"close--off-canvas\">\n                <i class=\"icon--arrow-left\"></i>\n                {s name=\"OffcanvasCloseMenu\" namespace=\"frontend/detail/description\"}{/s}\n            </a>\n        {/block}\n    </div>\n{/block}\n\n{block name=\"frontend_detail_description\"}\n<div class=\"content--description\">\n\n    {* Headline *}\n    {block name='frontend_detail_description_title'}\n        <div class=\"content--title\">\n            {s name=\"DetailDescriptionHeader\"}{/s} \"{$sArticle.articleName|escape}\"\n        </div>\n    {/block}\n\n    {* Product description *}\n    {block name='frontend_detail_description_text'}\n        <div class=\"product--description\" itemprop=\"description\">\n            {$sArticle.description_long}\n        </div>\n    {/block}\n\n    {* Properties *}\n    {block name='frontend_detail_description_properties'}\n        {if $sArticle.sProperties}\n            <div class=\"product--properties panel has--border\">\n                <table class=\"product--properties-table\">\n                    {foreach $sArticle.sProperties as $sProperty}\n                        <tr class=\"product--properties-row\">\n                            {* Property label *}\n                            {block name='frontend_detail_description_properties_label'}\n                                <td class=\"product--properties-label is--bold\">{$sProperty.name|escape}:</td>\n                            {/block}\n\n                            {* Property content *}\n                            {block name='frontend_detail_description_properties_content'}\n                                <td class=\"product--properties-value\">{$sProperty.value|escape}</td>\n                            {/block}\n                        </tr>\n                    {/foreach}\n                </table>\n            </div>\n        {/if}\n    {/block}\n\n    {* Product - Further links *}\n    {block name='frontend_detail_description_links'}\n\n        {* Further links title *}\n        {block name='frontend_detail_description_links_title'}\n            <div class=\"content--title\">\n                {s name=\"ArticleTipMoreInformation\"}{/s} \"{$sArticle.articleName|escape}\"\n            </div>\n        {/block}\n\n        {* Links list *}\n        {block name='frontend_detail_description_links_list'}\n            <ul class=\"content--list list--unstyled\">\n                {block name='frontend_detail_actions_contact'}\n                    {if $sInquiry}\n                        <li class=\"list--entry\">\n                            {s name=\"DetailLinkContact\" namespace=\"frontend/detail/actions\" assign=\"snippetDetailLinkContact\"}{/s}\n                            <a href=\"{$sInquiry}\" rel=\"nofollow\" class=\"content--link link--contact\" title=\"{$snippetDetailLinkContact|escape}\">\n                                <i class=\"icon--arrow-right\"></i> {s name=\"DetailLinkContact\" namespace=\"frontend/detail/actions\"}{/s}\n                            </a>\n                        </li>\n                    {/if}\n                {/block}\n\n                {foreach $sArticle.sLinks as $information}\n                    {if $information.supplierSearch}\n\n                        {* Vendor landing page link *}\n                        {block name='frontend_detail_description_links_supplier'}\n                            <li class=\"list--entry\">\n                                {s name=\"DetailDescriptionLinkInformation\" assign=\"snippetDetailDescriptionLinkInformation\"}{/s}\n                                <a href=\"{url controller='listing' action='manufacturer' sSupplier=$sArticle.supplierID}\"\n                                   target=\"{$information.target}\"\n                                   class=\"content--link link--supplier\"\n                                   title=\"{$snippetDetailDescriptionLinkInformation|escape}\">\n\n                                    <i class=\"icon--arrow-right\"></i> {s name=\"DetailDescriptionLinkInformation\"}{/s}\n                                </a>\n                            </li>\n                        {/block}\n                    {else}\n\n                        {* Links which will be added throught the administration *}\n                        {block name='frontend_detail_description_links_link'}\n                            <li class=\"list--entry\">\n                                <a href=\"{$information.link}\"\n                                   target=\"{if $information.target}{$information.target}{else}_blank{/if}\"\n                                   class=\"content--link link--further-links\"\n                                   title=\"{$information.description|escapeHtml}\">\n                                    <i class=\"icon--arrow-right\"></i> {$information.description|escapeHtml}\n                                </a>\n                            </li>\n                        {/block}\n                    {/if}\n                {/foreach}\n            </ul>\n        {/block}\n    {/block}\n\n    {* Downloads *}\n    {block name='frontend_detail_description_downloads'}\n        {if $sArticle.sDownloads}\n\n            {* Downloads title *}\n            {block name='frontend_detail_description_downloads_title'}\n                <div class=\"content--title\">\n                    {s name=\"DetailDescriptionHeaderDownloads\"}{/s}\n                </div>\n            {/block}\n\n            {* Downloads list *}\n            {block name='frontend_detail_description_downloads_content'}\n                <ul class=\"content--list list--unstyled\">\n                    {foreach $sArticle.sDownloads as $download}\n                        {block name='frontend_detail_description_downloads_content_link'}\n                            <li class=\"list--entry\">\n                                {s name=\"DetailDescriptionLinkDownload\" assign=\"snippetDetailDescriptionLinkDownload\"}{/s}\n                                <a href=\"{$download.filename}\" target=\"_blank\" class=\"content--link link--download\" title=\"{$snippetDetailDescriptionLinkDownload|escape} {$download.description|escape}\">\n                                    <i class=\"icon--arrow-right\"></i> {s name=\"DetailDescriptionLinkDownload\"}{/s} {$download.description}\n                                </a>\n                            </li>\n                        {/block}\n                    {/foreach}\n                </ul>\n            {/block}\n        {/if}\n    {/block}\n\n    {* Comment - Item open text fields attr3 *}\n    {block name='frontend_detail_description_our_comment'}\n        {if $sArticle.attr3}\n\n            {* Comment title  *}\n            {block name='frontend_detail_description_our_comment_title'}\n                <div class=\"content--title\">\n                    {s name='DetailDescriptionComment'}{/s} \"{$sArticle.articleName|escape}\"\n                </div>\n            {/block}\n\n            {block name='frontend_detail_description_our_comment_title_content'}\n                <blockquote class=\"content--quote\">{$sArticle.attr3}</blockquote>\n            {/block}\n        {/if}\n    {/block}\n</div>\n{/block}\n"], "filenames": ["engine/Library/ExtJs/overrides/Ext.String.js", "themes/Backend/ExtJs/backend/article/controller/detail.js", "themes/Backend/ExtJs/backend/article/view/detail/window.js", "themes/Frontend/Bare/frontend/detail/content/header.tpl", "themes/Frontend/Bare/frontend/detail/header.tpl", "themes/Frontend/Bare/frontend/detail/tabs/comment.tpl", "themes/Frontend/Bare/frontend/detail/tabs/description.tpl"], "buggy_code_start_loc": [27, 270, 364, 10, 4, 50, 22], "buggy_code_end_loc": [40, 271, 365, 11, 5, 51, 152], "fixing_code_start_loc": [28, 270, 364, 10, 4, 50, 22], "fixing_code_end_loc": [50, 274, 368, 11, 5, 51, 152], "type": "CWE-79", "message": "Shopware is an open source eCommerce platform. Versions prior to 5.6.10 suffer from an authenticated stored XSS in administration vulnerability. Users are recommend to update to the version 5.6.10. You can get the update to 5.6.10 regularly via the Auto-Updater or directly via the download overview.", "other": {"cve": {"id": "CVE-2021-32713", "sourceIdentifier": "security-advisories@github.com", "published": "2021-06-24T21:15:07.917", "lastModified": "2021-07-01T19:36:34.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source eCommerce platform. Versions prior to 5.6.10 suffer from an authenticated stored XSS in administration vulnerability. Users are recommend to update to the version 5.6.10. You can get the update to 5.6.10 regularly via the Auto-Updater or directly via the download overview."}, {"lang": "es", "value": "Shopware es una plataforma de comercio electr\u00f3nico de c\u00f3digo abierto. Unas versiones anteriores a 5.6.10 sufren una vulnerabilidad de tipo XSS almacenado autentificado en la administraci\u00f3n. Se recomienda a usuarios actualizar a versi\u00f3n 5.6.10. Puede obtener la actualizaci\u00f3n a versi\u00f3n 5.6.10 regularmente por medio del Auto-Updater o directamente por medio del resumen de descargas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.6.10", "matchCriteriaId": "123208B1-959D-462E-A523-A4AFD3CD875A"}]}]}], "references": [{"url": "https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-05-2021", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/shopware/shopware/commit/a0850ffbc6f581a8eb8425cc2bf77a0715e21e12", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/shopware/security/advisories/GHSA-f6p7-8xfw-fjqq", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/shopware/commit/a0850ffbc6f581a8eb8425cc2bf77a0715e21e12"}}