{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\nimport javax.script.ScriptContext;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.csrf.CSRFToken;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.util.Util;\n\n/**\n * Create document action.\n *\n * @version $Id$\n * @since 2.4M2\n */\n@Component\n@Named(\"create\")\n@Singleton\npublic class CreateAction extends XWikiAction\n{\n    /**\n     * The name of the create.vm template to render.\n     */\n    private static final String CREATE_TEMPLATE = \"create\";\n\n    /**\n     * The name of the parent parameter.\n     */\n    private static final String PARENT = \"parent\";\n\n    /**\n     * The name of the space reference parameter.\n     */\n    private static final String SPACE_REFERENCE = \"spaceReference\";\n\n    /**\n     * The name parameter.\n     */\n    private static final String NAME = \"name\";\n\n    /**\n     * The name of the template field inside the template provider, or the template parameter which can be sent\n     * directly, without passing through the template provider.\n     */\n    private static final String TEMPLATE = \"template\";\n\n    /**\n     * Internal name for a flag determining if we are creating a Nested Space or a terminal document.\n     */\n    private static final String IS_SPACE = \"isSpace\";\n\n    /**\n     * Space homepage document name.\n     */\n    private static final String WEBHOME = \"WebHome\";\n\n    /**\n     * Local entity reference serializer hint.\n     */\n    private static final String LOCAL_SERIALIZER_HINT = \"local\";\n\n    /**\n     * The action to perform when creating a new page from a template.\n     *\n     * @version $Id$\n     */\n    private enum ActionOnCreate\n    {\n        /**\n         * Go to edit mode without saving.\n         */\n        EDIT(\"edit\"),\n\n        /**\n         * Save and then go to edit mode.\n         */\n        SAVE_AND_EDIT(\"saveandedit\"),\n\n        /**\n         * Save and then go to view mode.\n         */\n        SAVE_AND_VIEW(\"saveandview\");\n\n        private static final Map<String, ActionOnCreate> BY_ACTION = new HashMap<>();\n\n        static {\n            for (ActionOnCreate actionOnCreate : values()) {\n                BY_ACTION.put(actionOnCreate.action, actionOnCreate);\n            }\n        }\n\n        private final String action;\n\n        ActionOnCreate(String action)\n        {\n            this.action = action;\n        }\n\n        public static ActionOnCreate valueOfAction(String action)\n        {\n            return BY_ACTION.get(action);\n        }\n    }\n\n    /**\n     * Default constructor.\n     */\n    public CreateAction()\n    {\n        this.waitForXWikiInitialization = false;\n    }\n\n    @Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        CreateActionRequestHandler handler = new CreateActionRequestHandler(context);\n\n        // Read the request and extract the passed information.\n        handler.processRequest();\n\n        // Save the determined values so we have them available in the action template.\n        ScriptContext scontext = getCurrentScriptContext();\n        scontext.setAttribute(SPACE_REFERENCE, handler.getSpaceReference(), ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(NAME, handler.getName(), ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(IS_SPACE, handler.isSpace(), ScriptContext.ENGINE_SCOPE);\n        // put the available templates on the context, for the .vm to not compute them again\n        scontext.setAttribute(\"availableTemplateProviders\", handler.getAvailableTemplateProviders(),\n            ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(\"recommendedTemplateProviders\", handler.getRecommendedTemplateProviders(),\n            ScriptContext.ENGINE_SCOPE);\n\n        DocumentReference newDocumentReference = handler.getNewDocumentReference();\n        if (newDocumentReference == null) {\n            // There is information still missing, go back to the template and fill it.\n            return CREATE_TEMPLATE;\n        }\n\n        // Check if the creation in the spaceReference is allowed.\n        if (!handler.isTemplateProviderAllowedToCreateInCurrentSpace()) {\n            // The selected template provider is not usable in the selected location. Go back to the template and pick\n            // something else.\n            return CREATE_TEMPLATE;\n        }\n\n        // Checking the rights to create the new document.\n        // Note: Note checking the logical spaceReference, but the space of the final actual document reference, since\n        // that is where we are creating the new document.\n        checkRights(newDocumentReference.getLastSpaceReference(), context);\n\n        // Check if the document to create already exists and if it respects the name strategy\n        XWikiDocument newDocument = context.getWiki().getDocument(newDocumentReference, context);\n        if (handler.isDocumentAlreadyExisting(newDocument) || handler.isDocumentPathTooLong(newDocumentReference)\n            || !this.isEntityReferenceNameValid(newDocumentReference)) {\n            return CREATE_TEMPLATE;\n        }\n\n        // Verify if the \"type\" of document to create has been set, even if we currently do not use it in the action.\n        // The goal is let the user be able to chose it, which have some consequences in the UI (thanks to javascript).\n        // See: https://jira.xwiki.org/browse/XWIKI-12580\n        // Note: we do not need the \"type\" if we have a template provider: the type of the new document will be the type\n        // of the template.\n        // TODO: handle this type in doCreate() that we call above (see: https://jira.xwiki.org/browse/XWIKI-12585).\n        if (StringUtils.isBlank(handler.getType()) && !handler.hasTemplate()) {\n            return CREATE_TEMPLATE;\n        }\n\n        // create is finally valid, can be executed\n        doCreate(context, newDocument, handler.isSpace(), handler.getTemplateProvider());\n\n        return null;\n    }\n\n    /**\n     * @param context the XWiki context\n     * @param spaceReference the reference of the space where the new document will be created\n     * @throws XWikiException in case the permission to create a new document in the specified space is denied\n     */\n    private void checkRights(SpaceReference spaceReference, XWikiContext context) throws XWikiException\n    {\n        ContextualAuthorizationManager authManager = Utils.getComponent(ContextualAuthorizationManager.class);\n        if (!authManager.hasAccess(Right.EDIT, spaceReference)) {\n            Object[] args = { spaceReference.toString(), context.getUser() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"The creation of a document into the space {0} has been denied to user {1}\", null, args);\n        }\n    }\n\n    /**\n     * Actually executes the create, after all preconditions have been verified.\n     *\n     * @param context the context of this action\n     * @param newDocument the document to be created\n     * @param isSpace whether the document is a space webhome or a page\n     * @param templateProvider the template provider to create from\n     * @throws XWikiException in case anything goes wrong accessing xwiki documents\n     */\n    private void doCreate(XWikiContext context, XWikiDocument newDocument, boolean isSpace, BaseObject templateProvider)\n        throws XWikiException\n    {\n        XWikiRequest request = context.getRequest();\n        XWikiDocument doc = context.getDoc();\n\n        String parent = getParent(request, doc, isSpace, context);\n\n        // get the title of the page to create, as specified in the parameters\n        String title = getTitle(request, newDocument, isSpace);\n\n        // get the template from the template parameter, to allow creation directly from template, without\n        // forcing to create a template provider for each template creation\n        String template = getTemplate(templateProvider, request);\n\n        // Read from the template provide the action to perform when creating the page.\n        ActionOnCreate actionOnCreate = getActionOnCreate(templateProvider);\n\n        String action = null;\n        if (actionOnCreate == ActionOnCreate.SAVE_AND_EDIT) {\n            initAndSaveDocument(context, newDocument, title, template, parent);\n            action = newDocument.getDefaultEditMode(context);\n        } else {\n            action = actionOnCreate == ActionOnCreate.SAVE_AND_VIEW ? \"save\" : getEditMode(template, context);\n        }\n\n        // Perform a redirection to the selected action of the document to create.\n        String redirectParams = getRedirectParameters(parent, title, template, actionOnCreate);\n        String redirectURL = newDocument.getURL(action, redirectParams, context);\n        redirectURL = context.getResponse().encodeRedirectURL(redirectURL);\n        if (context.getRequest().getParameterMap().containsKey(\"ajax\")) {\n            // If this template is displayed from a modal popup, send a header in the response notifying that a\n            // redirect must be performed in the calling page.\n            context.getResponse().setHeader(\"redirect\", redirectURL);\n        } else {\n            // Perform the redirect\n            sendRedirect(context.getResponse(), redirectURL);\n        }\n    }\n\n    /**\n     * Initialize and save the new document before editing it. Follow the steps done by the Save action.\n     * \n     * @param context the XWiki context\n     * @param newDocument the document being created\n     * @param title the document title\n     * @param template the template to copy\n     * @param parent the parent document\n     * @throws XWikiException if copying the template or saving the document fails\n     */\n    private void initAndSaveDocument(XWikiContext context, XWikiDocument newDocument, String title, String template,\n        String parent) throws XWikiException\n    {\n        XWiki xwiki = context.getWiki();\n\n        // Set the locale and default locale, considering that we're creating the original version of the document\n        // (not a translation).\n        newDocument.setLocale(Locale.ROOT);\n        if (newDocument.getDefaultLocale() == Locale.ROOT) {\n            newDocument.setDefaultLocale(xwiki.getLocalePreference(context));\n        }\n\n        // Copy the template.\n        readFromTemplate(newDocument, template, context);\n\n        // Set the parent field.\n        if (!StringUtils.isEmpty(parent)) {\n            DocumentReference parentReference = getCurrentMixedDocumentReferenceResolver().resolve(parent);\n            newDocument.setParentReference(parentReference);\n        }\n\n        // Set the document title\n        if (title != null) {\n            newDocument.setTitle(title);\n        }\n\n        // Set the author and creator.\n        DocumentReference currentUserReference = context.getUserReference();\n        newDocument.setAuthorReference(currentUserReference);\n        newDocument.setCreatorReference(currentUserReference);\n\n        // Make sure the user is allowed to make this modification\n        xwiki.checkSavingDocument(currentUserReference, newDocument, context);\n\n        xwiki.saveDocument(newDocument, context);\n    }\n\n    private String getRedirectParameters(String parent, String title, String template, ActionOnCreate actionOnCreate)\n    {\n        if (actionOnCreate == ActionOnCreate.SAVE_AND_EDIT) {\n            // We don't need to pass any parameters because the document is saved before the redirect using the\n            // parameter values.\n            return null;\n        }\n\n        String redirectParams = \"template=\" + Util.encodeURI(template, null);\n        if (parent != null) {\n            redirectParams += \"&parent=\" + Util.encodeURI(parent, null);\n        }\n        if (title != null) {\n            redirectParams += \"&title=\" + Util.encodeURI(title, null);\n        }\n        // Both the save and the edit action might require a CSRF token\n        CSRFToken csrf = Utils.getComponent(CSRFToken.class);\n        redirectParams += \"&form_token=\" + Util.encodeURI(csrf.getToken(), null);\n\n        return redirectParams;\n    }\n\n    /**\n     * @param templateProvider the set template provider, if any\n     * @param request the request on which to fallback\n     * @return the string reference of the document to use as template or {@code \"\"} if none set\n     */\n    private String getTemplate(BaseObject templateProvider, XWikiRequest request)\n    {\n        String result = \"\";\n\n        if (templateProvider != null) {\n            result = templateProvider.getStringValue(TEMPLATE);\n        } else if (request.getParameter(TEMPLATE) != null) {\n            result = request.getParameter(TEMPLATE);\n        }\n\n        return result;\n    }\n\n    /**\n     * @param request the current request for which this action is executed\n     * @param doc the current document\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @param context the XWiki context\n     * @return the serialized reference of the parent to create the document for\n     */\n    private String getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)\n    {\n        // This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n        // If a parent parameter is passed, use it to set the parent when creating the new Page or Space.\n        // If no parent parameter was passed:\n        // * use the current document\n        // ** if we're creating a new page and if the current document exists or\n        // * use the Main space's WebHome\n        // ** if we're creating a new page and the current document does not exist.\n        String parent = request.getParameter(PARENT);\n        if (StringUtils.isEmpty(parent)) {\n            EntityReferenceSerializer<String> localSerializer =\n                Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, LOCAL_SERIALIZER_HINT);\n\n            if (doc.isNew()) {\n                // Use the Main space's WebHome.\n                Provider<DocumentReference> defaultDocumentReferenceProvider =\n                    Utils.getComponent(DocumentReference.TYPE_PROVIDER);\n\n                DocumentReference parentRef =\n                    defaultDocumentReferenceProvider.get().setWikiReference(context.getWikiReference());\n\n                parent = localSerializer.serialize(parentRef);\n            } else {\n                // Use the current document.\n                DocumentReference parentRef = doc.getDocumentReference();\n\n                parent = localSerializer.serialize(parentRef);\n            }\n        }\n\n        return parent;\n    }\n\n    /**\n     * @param request the current request for which this action is executed\n     * @param newDocument the document to be created\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @return the title of the page to be created. If no request parameter is set, the page name is returned for a new\n     *         page and the space name is returned for a new space\n     */\n    private String getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)\n    {\n        String title = request.getParameter(\"title\");\n        if (StringUtils.isEmpty(title)) {\n            if (isSpace) {\n                title = newDocument.getDocumentReference().getLastSpaceReference().getName();\n            } else {\n                title = newDocument.getDocumentReference().getName();\n                // Avoid WebHome titles for pages that are really space homepages.\n                if (WEBHOME.equals(title)) {\n                    title = newDocument.getDocumentReference().getLastSpaceReference().getName();\n                }\n            }\n        }\n\n        return title;\n    }\n\n    /**\n     * @param templateProvider the template provider for this creation\n     * @return {@code true} if the created document should be saved on create, before editing, {@code false} otherwise\n     */\n    private ActionOnCreate getActionOnCreate(BaseObject templateProvider)\n    {\n        if (templateProvider != null) {\n            String action = templateProvider.getStringValue(\"action\");\n            ActionOnCreate actionOnCreate = ActionOnCreate.valueOfAction(action);\n            if (actionOnCreate != null) {\n                return actionOnCreate;\n            }\n        }\n\n        // Default action when creating a page from a template.\n        return ActionOnCreate.EDIT;\n    }\n\n    /**\n     * @param template the template to create document from\n     * @param context the context of the current request\n     * @return the default edit mode for a document created from the passed template\n     * @throws XWikiException in case something goes wrong accessing template document\n     */\n    private String getEditMode(String template, XWikiContext context)\n        throws XWikiException\n    {\n        // Determine the edit action (edit/inline) for the newly created document, if a template is passed it is\n        // used to determine the action. Default is 'edit'.\n        String editAction = ActionOnCreate.EDIT.name().toLowerCase();\n        XWiki xwiki = context.getWiki();\n        if (!StringUtils.isEmpty(template)) {\n            DocumentReference templateReference = getCurrentMixedDocumentReferenceResolver().resolve(template);\n            if (xwiki.exists(templateReference, context)) {\n                editAction = xwiki.getDocument(templateReference, context).getDefaultEditMode(context);\n            }\n        }\n\n        return editAction;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\n\nimport javax.inject.Provider;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.csrf.CSRFToken;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.query.Query;\nimport org.xwiki.query.QueryManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for {@link com.xpn.xwiki.web.CreateAction}.\n *\n * @version $Id$\n * @since 7.2M1\n */\n@ComponentList\n@ReferenceComponentList\n@OldcoreTest\nclass CreateActionTest\n{\n    @InjectMockitoOldcore\n    MockitoOldcore oldcore;\n\n    XWikiURLFactory mockURLFactory;\n\n    @InjectMockComponents\n    CreateAction action;\n\n    @MockComponent\n    private CSRFToken csrfToken;\n\n    XWikiContext context;\n\n    XWikiRequest mockRequest;\n\n    XWikiResponse mockResponse;\n\n    Query mockTemplateProvidersQuery;\n\n    @BeforeEach\n    public void beforeEach() throws Exception\n    {\n        this.context = this.oldcore.getXWikiContext();\n\n        Utils.setComponentManager(this.oldcore.getMocker());\n\n        QueryManager mockSecureQueryManager =\n            this.oldcore.getMocker().registerMockComponent((Type) QueryManager.class, \"secure\");\n\n        this.mockTemplateProvidersQuery = mock(Query.class);\n        when(mockSecureQueryManager.createQuery(any(), any())).thenReturn(this.mockTemplateProvidersQuery);\n        when(this.mockTemplateProvidersQuery.execute()).thenReturn(Collections.emptyList());\n\n        when(this.oldcore.getMockContextualAuthorizationManager().hasAccess(any(Right.class),\n            any(EntityReference.class))).thenReturn(true);\n\n        Provider<DocumentReference> mockDocumentReferenceProvider =\n            this.oldcore.getMocker().registerMockComponent(DocumentReference.TYPE_PROVIDER);\n        when(mockDocumentReferenceProvider.get())\n            .thenReturn(new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\"));\n\n        this.mockURLFactory = mock(XWikiURLFactory.class);\n        this.context.setURLFactory(this.mockURLFactory);\n\n        this.mockRequest = mock(XWikiRequest.class);\n        this.context.setRequest(this.mockRequest);\n\n        this.mockResponse = mock(XWikiResponse.class);\n        this.context.setResponse(this.mockResponse);\n\n        when(this.mockRequest.get(\"type\")).thenReturn(\"plain\");\n\n        this.oldcore.getMocker().registerMockComponent(ObservationManager.class);\n    }\n\n    @Test\n    void newDocumentFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void newDocumentButNonTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token432\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Pass the tocreate=nonterminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentFromURLWhenNoType() throws Exception\n    {\n        // No type has been set by the user\n        when(mockRequest.get(\"type\")).thenReturn(null);\n\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertEquals(\"create\", result);\n    }\n\n    @Test\n    void newDocumentWebHomeTopLevelFromURL() throws Exception\n    {\n        // new document = xwiki:X.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4234\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: The title is not \"WebHome\", but \"X\" (the space's name) to avoid exposing \"WebHome\" in the UI.\n        verify(mockURLFactory).createURL(\"X\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token34342\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: The bebavior is the same for both a top level space and a child space WebHome.\n        // Note2: The title is not \"WebHome\", but \"Y\" (the space's name) to avoid exposing \"WebHome\" in the UI.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeButTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4234343\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Pass the tocreate=terminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y instead of X.Y.WebHome because the tocreate parameter says \"terminal\".\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Pass the tocreate=terminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // Note: We can not create the \"X\" terminal document, since it is already at the top level of the hierarchy and\n        // none was able to be deducted from the given information. The user needs to specify more info in order to\n        // continue.\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void existingDocumentFromUINoName() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Just landed on the create page or submitted with no values (no name) specified.\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void existingDocumentFromUI() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token424345\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome since we default to non-terminal documents.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUICheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42124343\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X.Y&name=Z\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Z\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.Z.WebHome since we default to non-terminal documents.\n        verify(mockURLFactory).createURL(\"X.Y.Z\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Z&form_token=\" + csrfTokenValue, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentTerminalFromUI() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token424334466\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&tocreate=terminal\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y instead of X.Y.WebHome because the tocreate parameter says \"terminal\".\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentTerminalFromUICheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token429988\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X.Y&name=Z&tocreate=termina\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Z\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.Z instead of X.Y.Z.WebHome because the tocreate parameter says \"terminal\".\n        verify(mockURLFactory).createURL(\"X.Y\", \"Z\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Z&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentTerminalFromUIButAlreadyExisting() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        // Mock it as existing in the DB as well with non-empty content\n        oldcore.getDocuments().put(new DocumentReference(documentReference, Locale.ROOT), document);\n        when(document.getContent()).thenReturn(\"Some non-empty content\");\n\n        // Submit from the UI spaceReference=X&name=Y&tocreate=terminal\n        // No diference if it was a non-terminal document, just easier to mock since we already have Main.WebHome set\n        // up.\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"Main\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"WebHome\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void notExistingDocumentFromUIButNameTooLong() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(10);\n        context.setDoc(document);\n\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"Main\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Foo123456789\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void notExistingDocumentFromUIButSpaceTooLong() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(10);\n        context.setDoc(document);\n\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"1.3.5.7.9.11\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Foo\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void existingDocumentFromUITopLevelDocument() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42009\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI name=Y\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome since we default to non-terminal documents.\n        verify(mockURLFactory).createURL(\"Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    /*\n     * Deprecated parameters\n     */\n\n    @Test\n    void existingDocumentFromUIDeprecated() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4233311\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI space=X&page=Y\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"page\")).thenReturn(\"Y\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y since the deprecated parameters were creating terminal documents by default.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentFromUIDeprecatedCheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token422112455\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI space=X.Y&page=Z\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"page\")).thenReturn(\"Z\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: The space parameter was previously considered as space name, not space reference, so it is escaped.\n        // Note2: We are creating X\\.Y.Z since the deprecated parameters were creating terminal documents by default.\n        verify(mockURLFactory).createURL(\"X\\\\.Y\", \"Z\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Z&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentNonTerminalFromUIDeprecated() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42778900\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI space=X&tocreate=space\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.WebHome because the tocreate parameter says \"space\".\n        verify(mockURLFactory).createURL(\"X\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentNonTerminalFromUIDeprecatedIgnoringPage() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4344119982\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI space=X&page=Y&tocreate=space\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"page\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.WebHome instead of X.Y because the tocreate parameter says \"space\" and the page\n        // parameter is ignored.\n        verify(mockURLFactory).createURL(\"X\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentNonTerminalFromUIDeprecatedCheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token425553\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI space=X.Y&tocreate=space\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: The space parameter was previously considered as space name, not space reference, so it is escaped.\n        // Note2: We are creating X\\.Y.WebHome because the tocreate parameter says \"space\".\n        verify(mockURLFactory).createURL(\"X\\\\.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X.Y&form_token=\" + csrfTokenValue, null,\n            \"xwiki\", context);\n    }\n\n    /*\n     * Template providers\n     */\n\n    @Test\n    void existingDocumentFromUITemplateProviderExistingButNoneSelected() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(\"XWiki.MyTemplateProvider\",\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList());\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces) throws Exception\n    {\n        mockExistingTemplateProviders(fullName, resolvedDocumentReference, allowedSpaces, false);\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces, Boolean terminal) throws Exception\n    {\n        mockExistingTemplateProviders(fullName, resolvedDocumentReference, allowedSpaces, terminal, null);\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces, Boolean terminal, String type) throws Exception\n    {\n        mockExistingTemplateProviders(fullName, resolvedDocumentReference, allowedSpaces, terminal, type, null);\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces, Boolean terminal, String type, String action) throws Exception\n    {\n        DocumentReference templateProviderClassReference =\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"TemplateProviderClass\");\n\n        // Mock to return at least 1 existing template provider\n        when(mockTemplateProvidersQuery.execute()).thenReturn(new ArrayList<Object>(Arrays.asList(fullName)));\n\n        // Mock the template document as existing.\n        XWikiDocument templateProviderDocument = mock(XWikiDocument.class);\n        when(templateProviderDocument.getDocumentReference()).thenReturn(resolvedDocumentReference);\n        oldcore.getDocuments().put(new DocumentReference(resolvedDocumentReference, Locale.ROOT),\n            templateProviderDocument);\n        // Mock the provider object (template + spaces properties)\n        BaseObject templateProviderObject = mock(BaseObject.class);\n        when(templateProviderObject.getListValue(\"creationRestrictions\")).thenReturn(allowedSpaces);\n        String templateDocumentFullName = fullName.substring(0, fullName.indexOf(\"Provider\"));\n        when(templateProviderObject.getStringValue(\"template\")).thenReturn(templateDocumentFullName);\n        if (terminal != null) {\n            when(templateProviderObject.getIntValue(\"terminal\", -1)).thenReturn(terminal ? 1 : 0);\n        } else {\n            when(templateProviderObject.getIntValue(\"terminal\", -1)).thenReturn(-1);\n        }\n        if (type != null) {\n            when(templateProviderObject.getStringValue(\"type\")).thenReturn(type);\n        }\n        if (action != null) {\n            when(templateProviderObject.getStringValue(\"action\")).thenReturn(action);\n        }\n        when(templateProviderDocument.getXObject(templateProviderClassReference)).thenReturn(templateProviderObject);\n\n        // Mock the template document as existing\n        String templateDocumentName =\n            resolvedDocumentReference.getName().substring(0, resolvedDocumentReference.getName().indexOf(\"Provider\"));\n        DocumentReference templateDocumentReference =\n            new DocumentReference(templateDocumentName, new SpaceReference(resolvedDocumentReference.getParent()));\n        mockTemplateDocumentExisting(templateDocumentFullName, templateDocumentReference);\n    }\n\n    /**\n     * @param templateDocumentFullName\n     * @param templateDocumentReference\n     * @throws XWikiException\n     */\n    private void mockTemplateDocumentExisting(String templateDocumentFullName,\n        DocumentReference templateDocumentReference) throws XWikiException\n    {\n        XWikiDocument templateDocument = mock(XWikiDocument.class);\n        when(templateDocument.getDocumentReference()).thenReturn(templateDocumentReference);\n        when(templateDocument.getDefaultEditMode(context)).thenReturn(\"edit\");\n        oldcore.getDocuments().put(new DocumentReference(templateDocumentReference, Locale.ROOT), templateDocument);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecified() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42008766\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList());\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y and using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedRestrictionExists() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42557783\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that allows usage in target space.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Arrays.asList(\"X\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: We are allowed to create anything under space X, be it a terminal or a non-terminal document.\n        // Note2: We are creating X.Y and using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedRestrictionExistsOnParentSpace() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4221098\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X.Y.Z&name=W&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X.Y.Z\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"W\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that allows usage in one of the target space's parents (top level in this\n        // case).\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Arrays.asList(\"X\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: We are allowed to create anything under space X or its children, be it a terminal or a non-terminal\n        // document\n        // Note2: We are creating X.Y.Z.W and using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X.Y.Z.W\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=W&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedButNotAllowed() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"),\n            Arrays.asList(\"AnythingButX\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference =\n            new DocumentReference(\"Y\", new SpaceReference(\"X\", new WikiReference(\"xwiki\")));\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"),\n            Arrays.asList(\"AnythingButX\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"),\n            Arrays.asList(\"AnythingButX\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42988733\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverriddenFromUIToNonTerminal() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4222113555\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal even if the template provider says otherwise.\n        // Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4200983331\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenFromUITerminal() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42234456\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateSpecified() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n\n        context.setDoc(document);\n        String csrfTokenValue = \"token4298833\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&template=XWiki.MyTemplate\n        String templateDocumentFullName = \"XWiki.MyTemplate\";\n        DocumentReference templateDocumentReference =\n            new DocumentReference(\"MyTemplate\", Arrays.asList(\"XWiki\"), \"xwiki\");\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"template\")).thenReturn(\"XWiki.MyTemplate\");\n\n        // Mock the passed template document as existing.\n        mockTemplateDocumentExisting(templateDocumentFullName, templateDocumentReference);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome and using the template specified in the request.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4244112\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFromUIToNonTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token422555987\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal, even if the template provider says otherwise.\n        // Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token424111553\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal and using a template, as specified in the\n        // template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenFromUIToTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42008733\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal, even if the template provider says otherwise.\n        // Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token423366\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"page\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal, since the template provider did not specify a \"terminal\"\n        // property and it used the old \"page\" type instead. Also using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButOverriddenFromUIToNonTerminal()\n        throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token4265677398\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"page\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal, since even if the template provider did not\n        // specify a \"terminal\" property and it used the old \"page\" type, the UI explicitly asked for a non-terminal\n        // document. Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token421198337\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome as non-terminal, since the template provider does not specify a \"terminal\"\n        // property and we fallback on the \"type\" property's value. Also using the template extracted from the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOverridenFromUIToTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token429866333\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y as terminal, since it is overriden from the UI, regardless of any backwards\n        // compatibility resolutions. Also using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedWithSaveAndEdit() throws Exception\n    {\n        // Mock the document to create.\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.getDocumentReferenceWithLocale()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        when(document.getDefaultEditMode(this.context)).thenReturn(\"edit\");\n        when(document.getDefaultLocale()).thenReturn(Locale.ROOT);\n        when(document.clone()).thenReturn(document);\n\n        // Mock the XWiki context.\n        when(this.context.getWiki().getLocalePreference(this.context)).thenReturn(Locale.FRENCH);\n        when(this.context.getWiki().getDocument(documentReference, this.context)).thenReturn(document);\n        this.context.setDoc(document);\n        DocumentReference userReference = new DocumentReference(\"xwiki\", \"Users\", \"Alice\");\n        this.context.setUserReference(userReference);\n\n        // Mock the creation request.\n        when(this.mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(this.mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(this.mockRequest.getParameter(\"title\")).thenReturn(\"Yippee\");\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(this.mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock the template provider.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"page\", \"saveandedit\");\n\n        // Run the create action.\n        assertNull(this.action.render(this.context));\n\n        verify(document).setLocale(Locale.ROOT);\n        verify(document).setDefaultLocale(Locale.FRENCH);\n        verify(document).readFromTemplate(new DocumentReference(\"xwiki\", \"XWiki\", \"MyTemplate\"), this.context);\n        verify(document).setTitle(\"Yippee\");\n        verify(document).setCreatorReference(userReference);\n        verify(document).setAuthorReference(userReference);\n        verify(this.context.getWiki()).saveDocument(document, this.context);\n    }\n}\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n## ---------------------------------------------------------------------------------------------------------\n## This template is called by the create action which binds some context variables as it executes, based on\n## the request and the current document. These variables can be used in this template:\n## * $spaceReference - the space reference of the new document, read from the \"spaceReference\" parameter\n## * $name - the name to use for the new document, read from the \"name\" parameter\n## * $isSpace - true if we are creating a non-terminal document ($name is the space name), false if we are\n##              creating a terminal document ($name is the document name). Determined by the create action\n## * $availableTemplateProviders - list of template provider documents available from the current space\n##\n## Note: Make sure to use these bindings instead of directly using the request parameters, as the bindings\n## also consider backwards compatibility and convert older \"space\" and \"page\" parameters if they are passed.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n## If a parent parameter is passed, use it to set the parent when creating the new page.\n## If no parent parameter was passed, the create action will determine it to be the current document if it\n## exists or the Main space's webhome if the current document does not exist.\n## ---------------------------------------------------------------------------------------------------------\n#set ($parent = \"$!request.getParameter('parent')\")\n\n## ---------------------------------------------------------------------------------------------------------\n## This parent can be passed a title for the document to create (using the \"title\" parameter).\n## The title is used to automatically compute a page name, which can then be customized by the user.\n## If no title is given, the page name (if set) will be used as title.\n## ---------------------------------------------------------------------------------------------------------\n#if (\"$!request.title\" != '')\n  #set ($title = \"$!request.title\")\n#else\n  #set ($title = \"$!{escapetool.velocity($name)}\")\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Get the passed template provider, if any\n## ---------------------------------------------------------------------------------------------------------\n#set($templateProvider = \"$!request.templateprovider\")\n## Get the template as well, since in case template provider is missing, template should be used, \n## to allow creation from template directly, without necessarily going through template provider.\n#set($template = \"$!request.template\")\n\n## ---------------------------------------------------------------------------------------------------------\n## If there was an exception creating the page because of invalid space, notify. \n## Should set the other variables only if there is no exception. Otherwise, if there's an exception other than the \n## 11016 one, nothing will be displayed, depending on the other passed parameters.\n## ---------------------------------------------------------------------------------------------------------\n#set($exception = $createException)\n## check if the exception is about the non-allowed spaces for template\n#if(\"$!exception\" != '' && $exception.code == 11016)\n  <div class=\"box errormessage\">\n    #set($allowedSpaces = $createAllowedSpaces)\n    #if ($allowedSpaces.size() == 1)\n      $services.localization.render('core.create.template.allowedspace.inline', [$templateProvider, $allowedSpaces.get(0)])\n    #else\n      $services.localization.render('core.create.template.allowedspaces.inline', [$templateProvider, $allowedSpaces.toString()])\n    #end\n  </div>\n#end\n## check if the exception is about the document which already exists\n#if(\"$!exception\" != '' && $exception.code == 11002)\n  <div class='box errormessage'>\n      ## Use the 'existingDocumentReference' context binding set by the create action for this case.\n      $services.localization.render('core.create.page.error.docalreadyexists',\n        [\"${existingDocumentReference}\",\n         $xwiki.getURL($existingDocumentReference, 'view', ''),\n         $xwiki.getURL($existingDocumentReference, 'edit', '')\n        ]\n      )\n  </div>\n#end\n## check if the exception is about the document name being invalid\n#if(\"$!exception\" != '' && $exception.code == 11018)\n<div class='box errormessage'>\n  ## Use the 'invalidNameReference' context binding set by the create action for this case.\n  $services.localization.render('entitynamevalidation.create.invalidname', [$invalidNameReference])\n</div>\n#end\n\n## check if the exception is about the document having a path too long\n#template('hierarchy_macros.vm')\n#if(\"$!exception\" != '' && $exception.code == 11017)\n  #set ($options = {})\n  #set ($documentReference = $services.model.resolveDocument($tooLongPath))\n  <div class='box errormessage'>\n      $services.localization.render('core.create.page.error.docpathtoolong',\n        [\"<p>#hierarchy($documentReference, $options)</p>\",\n          $doc.getLocalReferenceMaxLength(),\n          $tooLongPath.length()\n        ]\n      )\n  </div>\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Determine if we need to do extra checks for a deprecated, pre-NestedSpaces request to create a space.\n## ---------------------------------------------------------------------------------------------------------\n#set ($deprecatedSpaceCreate = \"$!request.tocreate\" == 'space')\n\n## ---------------------------------------------------------------------------------------------------------\n## Note: The list of available template providers is computed in the action and set on the context under\n## the \"availableTemplateProviders\" binding.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro for displaying the available types and templates and changing target space rules accordingly\n## ---------------------------------------------------------------------------------------------------------\n#macro (displayTypes)\n  #if ($template == '')\n    #set ($blankTerminalState = !$isSpace)\n    #set ($options = [\n      { \n        'name': $services.localization.render('core.create.type.default'),\n        'options': [\n          {\n            'name': $services.localization.render('core.create.type.blank'),\n            'value': 'blank',\n            'description': $services.localization.render('core.create.type.blank.description'),\n            'icon': 'file-white',\n            'data': {\n              'type': 'blank',\n              'terminal' : \"$blankTerminalState\"\n            }\n          }\n        ]\n      }])\n    #if ($xwiki.exists($services.model.createDocumentReference('', 'XWiki', 'OfficeImporter')) && $services.officemanager.isConnected())\n      ## TODO: handle this use case with an extension point\n      #set ($discard = $options[0].options.add({\n        'name': $services.localization.render('office.createForm.type.name'),\n        'value': 'office',\n        'description': $services.localization.render('office.createForm.type.description'),\n        'icon': 'file-word',\n        'data': {\n          'type':'office'\n        }\n      }))\n    #end\n    #if (!$availableTemplateProviders.isEmpty())\n      #set ($templateOptions = [])\n      #set ($discard = $options.add({'name': $services.localization.render('core.create.type.templates'), 'options': $templateOptions}))\n      #foreach($tpdoc in $availableTemplateProviders)\n        #set ($tpobj = $tpdoc.getObject('XWiki.TemplateProviderClass'))\n        #set ($tpdocRef = $services.model.serialize($tpdoc.documentReference, 'local'))\n        ##\n        ## Extract and save in data-* attributes list of allowed spaces to be used in the JavaScript validation of the spaceReference input.\n        ##\n        #set($jsAllowedSpacesArray = '[]')## Reset any previous value\n        #set($allowedSpaces = $tpobj.getValue('creationRestrictions'))\n        #if($allowedSpaces.size() == 0)\n          ## Backwards compatibility for Template Providers created before 8.3M2.\n          #set($allowedSpaces = $tpobj.getValue('spaces'))\n        #end\n        ## Reset to an empty list when no restrictions are set.\n        #if (\"$!allowedSpaces\" == '')\n          #set ($allowedSpaces = [])\n        #end\n        #if($allowedSpaces.size() > 0)\n          #set($jsAllowedSpacesArray = $jsontool.serialize($allowedSpaces))\n        #end\n        ## Compute the error message.\n        #set ($templateProviderName = $services.localization.render($tpobj.getValue('name')))\n        #if($allowedSpaces.isEmpty())\n          #set($message = '')\n        #elseif($allowedSpaces.size() == 1)\n          #set($message = $services.localization.render('core.create.template.allowedspace.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #else\n          #set($message = $services.localization.render('core.create.template.allowedspaces.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #end\n        ##\n        ## Determine if the creation restrictions are just suggestions\n        ##\n        #set ($restrictionsAreSuggestions = ($tpobj.getValue('creationRestrictionsAreSuggestions') == 1))\n        ##\n        ## Determine if it's a terminal page template\n        ##\n        #set ($isTerminalProvider = $tpobj.getValue('terminal'))\n        ## Check if this is an old template provider that has not been migrated (the 'type' property has not been\n        ## replaced by the 'terminal' property).\n        #set ($type = $tpobj.getValue('type'))\n        #if (\"$!isTerminalProvider\" == '' && (\"$!type\" != '' || $type == ''))\n          ## This must be an old template provider because the 'terminal' property is not set (or it was set to '---'\n          ## from the UI) and the 'type' property is still present.\n          #if ($type == 'space')\n            #set ($isTerminalProvider = false)\n          #else\n            ## 'page' or '' both resolve to true, for backwards compatibility reasons.\n            #set ($isTerminalProvider = true)\n          #end\n        #else\n          #set ($isTerminalProvider = ($isTerminalProvider == 1))\n        #end\n        ##\n        ## Display the template provider field option in the form.\n        ##\n        #set ($inputId = \"xwiki-create-form-${foreach.count}\")\n        #set ($icon = $tpobj.getValue('icon'))\n        #if (\"$!icon\" == '')\n          #set($icon = 'file-white')\n        #end\n        #set ($discard = $templateOptions.add({\n          'name': $services.localization.render($tpobj.getValue('name')),\n          'value': \"$tpdocRef\",\n          'description': $services.localization.render($tpobj.getValue('description')),\n          'icon': $icon,\n          'data': {\n            'allowed-spaces': $jsAllowedSpacesArray,\n            'allowed-spaces-message': $message,\n            'restrictions-are-suggestions': $restrictionsAreSuggestions,\n            'type': 'template',\n            'terminal' : $isTerminalProvider\n          }\n        }))\n      #end\n    #end\n    <dt>\n      <label>$services.localization.render('core.create.type')</label>\n      <span class=\"xHint\">$escapetool.xml($services.localization.render('core.create.type.hint'))</span>\n    </dt>\n    #set ($defaultValue = $request.type)\n    #if (\"$!defaultValue\" == '')\n      #if ($recommendedTemplateProviders.size() > 0)\n        #set ($defaultValue = $services.model.serialize($recommendedTemplateProviders[0].documentReference, 'local'))\n      #else\n        #set ($defaultValue = 'blank')\n      #end\n    #end\n    <dd>#xwikiSelect('type', $options, $defaultValue, false, 'xwiki-select-adaptable-medium page-type', '', true)</dd>\n  #else\n    <input type=\"hidden\" name=\"template\" value=\"$escapetool.xml($template)\" />\n  #end\n#end\n#set ($discard = $xwiki.jsfx.use('js/xwiki/create.js', {'forceSkinAction': true}))\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro used to extract a wiki's homepage reference.\n## ---------------------------------------------------------------------------------------------------------\n#macro (getWikiHomePageReference $wiki $return)\n  #set ($_wikiHomePageReference = $services.wiki.getById($wiki).mainPageReference)\n  #if (!$_wikiHomePageReference)\n    #set ($wikiReference = $services.model.createWikiReference($wiki))\n    #set ($_wikiHomePageReference = $services.model.resolveDocument('', 'default', $wikiReference))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $_wikiHomePageReference)\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Display the form.\n## ---------------------------------------------------------------------------------------------------------\n## FIXME: Using the 'container' class when displayed in an ajax call by clicking on a Wanted Link so that it looks good (proper margins) in the popup.\n<form action=\"$doc.getURL('create')\" method=\"post\" id=\"create\" class=\"xform #if($request.ajax)container#end\">\n  <fieldset>\n\n  ## Deprecated: Pass along any received page parent.\n  <input type='hidden' name='parent' value=\"$!{escapetool.xml($parent)}\"/>\n\n  ## The \"templateprovider\" field is needed by the CreateAction, even empty.\n  ## By the past, it was \"xwiki/create.js\" which created this field, but it was causing problems when the user sent the\n  ## form before the JavaScript code was executed.\n  <input type=\"hidden\" name=\"templateprovider\" id=\"templateprovider\" value=\"\" />\n\n  <div class='row'>\n    ## Hide the first column when displayed in an AJAX call by clicking on a Wanted Link (because we know the target\n    ## location from the link reference) or when the current document is new (because the create action uses the location\n    ## of the current document as target in this case).\n    #if (!$request.ajax && !$doc.isNew())\n      ## Determine the parent reference for the new document.\n      #set ($parentReference = $spaceReference)\n      #if (!$parentReference)\n        ## No parent reference specified.\n        ## We keep this code although we tested above that the current document is not new because in the future we may\n        ## want to support changing the target location even if the current document is new.\n        #if ($doc.isNew())\n          ## Encourage the user to create the current document.\n          #set ($parentReference = $doc.documentReference.parent)\n          #if ($doc.documentReference.name == 'WebHome')\n            #set ($parentReference = $parentReference.parent)\n          #end\n        #else\n          #getWikiHomePageReference($doc.wiki $homeReference)\n          #if ($doc.documentReference.equals($homeReference) || $deprecatedSpaceCreate)\n            ## Encourage the user to create top level documents from the home page.\n            #set ($parentReference = $doc.documentReference.wikiReference)\n          #else\n            ## Encourage the user to create a child or sibling of the current document.\n            #set ($parentReference = $doc.documentReference.lastSpaceReference)\n          #end\n        #end\n      #end\n\n      ## Display the location picker.\n      <div class='col-xs-12 col-lg-6'>\n        #template('locationPicker_macros.vm')\n        #locationPicker({\n          'id': 'target',\n          'title': {\n            'label': 'core.create.title',\n            'hint': 'core.create.title.hint',\n            'name': 'title',\n            'value': $title,\n            'placeholder': 'core.create.name.placeholder'\n          },\n          'preview': {\n            'label': 'core.create.locationPreview.label',\n            'hint': 'core.create.locationPreview.hint'\n          },\n          'parent': {\n            'label': 'core.create.spaceReference.label',\n            'hint': 'core.create.spaceReference.hint',\n            'name': 'spaceReference',\n            'reference': $parentReference,\n            'placeholder': 'core.create.spaceReference.placeholder'\n          },\n          'name': {\n            'label': 'core.create.name.label',\n            'hint': 'core.create.name.hint',\n            'name': 'name',\n            'value': $name,\n            'placeholder': 'core.create.name.placeholder'\n          }\n        })\n      </div>\n    #else\n      ## First column is hidden.\n      ## Pass along the known values as hidden inputs.\n      ##\n      <input type='hidden' name='title' value=\"$!{escapetool.xml($title)}\"/>\n      <input type='hidden' id='name' name='name' value=\"$!{escapetool.xml($name)}\" />\n      #set ($spaceReferenceLocalString = $services.model.serialize($spaceReference, 'local'))\n      <input type='hidden' id='spaceReference' name='spaceReference' value=\"$!{escapetool.xml($spaceReferenceLocalString)}\" />\n    #end\n    ## FIXME: When displayed in an ajax call by clicking on a Wanted Link, the responsive classes consider the calling document (large screen)\n    ## as the viewport and not the popup (small screen), so we can not use them since they create problems instead of fixing them.\n    <div class='#if(!$request.ajax)col-xs-12 col-lg-6#end'>\n      <dl>\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Page type\n        ## ---------------------------------------------------------------------------------------------------------\n        #displayTypes()\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Terminal page - Advanced users\n        ## ---------------------------------------------------------------------------------------------------------\n        #set ($hidden = '')\n        #if (!($isAdvancedUser || $isSuperAdmin) || $deprecatedSpaceCreate)\n          #set ($hidden = 'hidden')\n        #end\n        <dt class=\"$hidden\">\n          <input type=\"checkbox\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" #if(!$isSpace)checked=\"checked\"#end/>\n          <label for=\"terminal\">$services.localization.render('core.create.terminal.label')</label>\n          ## Hidden input used to ensure that an unchecked terminal checkbox means non-terminal and that the default is not used by mistake.\n          <input type=\"hidden\" name=\"tocreate\" value=\"nonterminal\" />\n        </dt>\n        <dd class=\"$hidden\">\n          <span class=\"xHint\">$services.localization.render('core.create.terminal.hint')</span>\n        </dd>\n      </dl>\n    </div>\n  </div>\n\n  <div class='buttons'>\n    <span class='buttonwrapper'>\n      <input type='submit' class='button' value=\"$services.localization.render('create')\"/>\n    </span>\n    <span class=\"buttonwrapper\">\n      <a class=\"secondary button\" href=\"$doc.getURL()\">$services.localization.render('cancel')</a>\n    </span>\n  </div>\n\n  </fieldset>\n</form>\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Singleton;\nimport javax.script.ScriptContext;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.xwiki.component.annotation.Component;\nimport org.xwiki.csrf.CSRFToken;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReferenceSerializer;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.security.authorization.ContextualAuthorizationManager;\nimport org.xwiki.security.authorization.Right;\n\nimport com.xpn.xwiki.XWiki;\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.util.Util;\n\n/**\n * Create document action.\n *\n * @version $Id$\n * @since 2.4M2\n */\n@Component\n@Named(\"create\")\n@Singleton\npublic class CreateAction extends XWikiAction\n{\n    /**\n     * The name of the create.vm template to render.\n     */\n    private static final String CREATE_TEMPLATE = \"create\";\n\n    /**\n     * The name of the parent parameter.\n     */\n    private static final String PARENT = \"parent\";\n\n    /**\n     * The name of the space reference parameter.\n     */\n    private static final String SPACE_REFERENCE = \"spaceReference\";\n\n    /**\n     * The name parameter.\n     */\n    private static final String NAME = \"name\";\n\n    /**\n     * The name of the template field inside the template provider, or the template parameter which can be sent\n     * directly, without passing through the template provider.\n     */\n    private static final String TEMPLATE = \"template\";\n\n    /**\n     * Internal name for a flag determining if we are creating a Nested Space or a terminal document.\n     */\n    private static final String IS_SPACE = \"isSpace\";\n\n    /**\n     * Space homepage document name.\n     */\n    private static final String WEBHOME = \"WebHome\";\n\n    /**\n     * Local entity reference serializer hint.\n     */\n    private static final String LOCAL_SERIALIZER_HINT = \"local\";\n\n    @Inject\n    private CSRFToken csrf;\n\n    /**\n     * The action to perform when creating a new page from a template.\n     *\n     * @version $Id$\n     */\n    private enum ActionOnCreate\n    {\n        /**\n         * Go to edit mode without saving.\n         */\n        EDIT(\"edit\"),\n\n        /**\n         * Save and then go to edit mode.\n         */\n        SAVE_AND_EDIT(\"saveandedit\"),\n\n        /**\n         * Save and then go to view mode.\n         */\n        SAVE_AND_VIEW(\"saveandview\");\n\n        private static final Map<String, ActionOnCreate> BY_ACTION = new HashMap<>();\n\n        static {\n            for (ActionOnCreate actionOnCreate : values()) {\n                BY_ACTION.put(actionOnCreate.action, actionOnCreate);\n            }\n        }\n\n        private final String action;\n\n        ActionOnCreate(String action)\n        {\n            this.action = action;\n        }\n\n        public static ActionOnCreate valueOfAction(String action)\n        {\n            return BY_ACTION.get(action);\n        }\n    }\n\n    /**\n     * Default constructor.\n     */\n    public CreateAction()\n    {\n        this.waitForXWikiInitialization = false;\n    }\n\n    @Override\n    public String render(XWikiContext context) throws XWikiException\n    {\n        CreateActionRequestHandler handler = new CreateActionRequestHandler(context);\n\n        // Read the request and extract the passed information.\n        handler.processRequest();\n\n        // Save the determined values so we have them available in the action template.\n        ScriptContext scontext = getCurrentScriptContext();\n        scontext.setAttribute(SPACE_REFERENCE, handler.getSpaceReference(), ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(NAME, handler.getName(), ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(IS_SPACE, handler.isSpace(), ScriptContext.ENGINE_SCOPE);\n        // put the available templates on the context, for the .vm to not compute them again\n        scontext.setAttribute(\"availableTemplateProviders\", handler.getAvailableTemplateProviders(),\n            ScriptContext.ENGINE_SCOPE);\n        scontext.setAttribute(\"recommendedTemplateProviders\", handler.getRecommendedTemplateProviders(),\n            ScriptContext.ENGINE_SCOPE);\n\n        DocumentReference newDocumentReference = handler.getNewDocumentReference();\n        if (newDocumentReference == null) {\n            // There is information still missing, go back to the template and fill it.\n            return CREATE_TEMPLATE;\n        }\n\n        // Check if the creation in the spaceReference is allowed.\n        if (!handler.isTemplateProviderAllowedToCreateInCurrentSpace()) {\n            // The selected template provider is not usable in the selected location. Go back to the template and pick\n            // something else.\n            return CREATE_TEMPLATE;\n        }\n\n        // Checking the rights to create the new document.\n        // Note: Note checking the logical spaceReference, but the space of the final actual document reference, since\n        // that is where we are creating the new document.\n        checkRights(newDocumentReference.getLastSpaceReference(), context);\n\n        // Check if the document to create already exists and if it respects the name strategy\n        // Also check the CSRF token.\n        XWikiDocument newDocument = context.getWiki().getDocument(newDocumentReference, context);\n        if (handler.isDocumentAlreadyExisting(newDocument) || handler.isDocumentPathTooLong(newDocumentReference)\n            || !this.isEntityReferenceNameValid(newDocumentReference)\n            || !this.csrf.isTokenValid(context.getRequest().getParameter(\"form_token\")))\n        {\n            return CREATE_TEMPLATE;\n        }\n\n        // Verify if the \"type\" of document to create has been set, even if we currently do not use it in the action.\n        // The goal is let the user be able to chose it, which have some consequences in the UI (thanks to javascript).\n        // See: https://jira.xwiki.org/browse/XWIKI-12580\n        // Note: we do not need the \"type\" if we have a template provider: the type of the new document will be the type\n        // of the template.\n        // TODO: handle this type in doCreate() that we call above (see: https://jira.xwiki.org/browse/XWIKI-12585).\n        if (StringUtils.isBlank(handler.getType()) && !handler.hasTemplate()) {\n            return CREATE_TEMPLATE;\n        }\n\n        // create is finally valid, can be executed\n        doCreate(context, newDocument, handler.isSpace(), handler.getTemplateProvider());\n\n        return null;\n    }\n\n    /**\n     * @param context the XWiki context\n     * @param spaceReference the reference of the space where the new document will be created\n     * @throws XWikiException in case the permission to create a new document in the specified space is denied\n     */\n    private void checkRights(SpaceReference spaceReference, XWikiContext context) throws XWikiException\n    {\n        ContextualAuthorizationManager authManager = Utils.getComponent(ContextualAuthorizationManager.class);\n        if (!authManager.hasAccess(Right.EDIT, spaceReference)) {\n            Object[] args = { spaceReference.toString(), context.getUser() };\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"The creation of a document into the space {0} has been denied to user {1}\", null, args);\n        }\n    }\n\n    /**\n     * Actually executes the create, after all preconditions have been verified.\n     *\n     * @param context the context of this action\n     * @param newDocument the document to be created\n     * @param isSpace whether the document is a space webhome or a page\n     * @param templateProvider the template provider to create from\n     * @throws XWikiException in case anything goes wrong accessing xwiki documents\n     */\n    private void doCreate(XWikiContext context, XWikiDocument newDocument, boolean isSpace, BaseObject templateProvider)\n        throws XWikiException\n    {\n        XWikiRequest request = context.getRequest();\n        XWikiDocument doc = context.getDoc();\n\n        String parent = getParent(request, doc, isSpace, context);\n\n        // get the title of the page to create, as specified in the parameters\n        String title = getTitle(request, newDocument, isSpace);\n\n        // get the template from the template parameter, to allow creation directly from template, without\n        // forcing to create a template provider for each template creation\n        String template = getTemplate(templateProvider, request);\n\n        // Read from the template provide the action to perform when creating the page.\n        ActionOnCreate actionOnCreate = getActionOnCreate(templateProvider);\n\n        String action = null;\n        if (actionOnCreate == ActionOnCreate.SAVE_AND_EDIT) {\n            initAndSaveDocument(context, newDocument, title, template, parent);\n            action = newDocument.getDefaultEditMode(context);\n        } else {\n            action = actionOnCreate == ActionOnCreate.SAVE_AND_VIEW ? \"save\" : getEditMode(template, context);\n        }\n\n        // Perform a redirection to the selected action of the document to create.\n        String redirectParams = getRedirectParameters(parent, title, template, actionOnCreate);\n        String redirectURL = newDocument.getURL(action, redirectParams, context);\n        redirectURL = context.getResponse().encodeRedirectURL(redirectURL);\n        if (context.getRequest().getParameterMap().containsKey(\"ajax\")) {\n            // If this template is displayed from a modal popup, send a header in the response notifying that a\n            // redirect must be performed in the calling page.\n            context.getResponse().setHeader(\"redirect\", redirectURL);\n        } else {\n            // Perform the redirect\n            sendRedirect(context.getResponse(), redirectURL);\n        }\n    }\n\n    /**\n     * Initialize and save the new document before editing it. Follow the steps done by the Save action.\n     * \n     * @param context the XWiki context\n     * @param newDocument the document being created\n     * @param title the document title\n     * @param template the template to copy\n     * @param parent the parent document\n     * @throws XWikiException if copying the template or saving the document fails\n     */\n    private void initAndSaveDocument(XWikiContext context, XWikiDocument newDocument, String title, String template,\n        String parent) throws XWikiException\n    {\n        XWiki xwiki = context.getWiki();\n\n        // Set the locale and default locale, considering that we're creating the original version of the document\n        // (not a translation).\n        newDocument.setLocale(Locale.ROOT);\n        if (newDocument.getDefaultLocale() == Locale.ROOT) {\n            newDocument.setDefaultLocale(xwiki.getLocalePreference(context));\n        }\n\n        // Copy the template.\n        readFromTemplate(newDocument, template, context);\n\n        // Set the parent field.\n        if (!StringUtils.isEmpty(parent)) {\n            DocumentReference parentReference = getCurrentMixedDocumentReferenceResolver().resolve(parent);\n            newDocument.setParentReference(parentReference);\n        }\n\n        // Set the document title\n        if (title != null) {\n            newDocument.setTitle(title);\n        }\n\n        // Set the author and creator.\n        DocumentReference currentUserReference = context.getUserReference();\n        newDocument.setAuthorReference(currentUserReference);\n        newDocument.setCreatorReference(currentUserReference);\n\n        // Make sure the user is allowed to make this modification\n        xwiki.checkSavingDocument(currentUserReference, newDocument, context);\n\n        xwiki.saveDocument(newDocument, context);\n    }\n\n    private String getRedirectParameters(String parent, String title, String template, ActionOnCreate actionOnCreate)\n    {\n        if (actionOnCreate == ActionOnCreate.SAVE_AND_EDIT) {\n            // We don't need to pass any parameters because the document is saved before the redirect using the\n            // parameter values.\n            return null;\n        }\n\n        String redirectParams = \"template=\" + Util.encodeURI(template, null);\n        if (parent != null) {\n            redirectParams += \"&parent=\" + Util.encodeURI(parent, null);\n        }\n        if (title != null) {\n            redirectParams += \"&title=\" + Util.encodeURI(title, null);\n        }\n        // Both the save and the edit action might require a CSRF token\n        redirectParams += \"&form_token=\" + Util.encodeURI(this.csrf.getToken(), null);\n\n        return redirectParams;\n    }\n\n    /**\n     * @param templateProvider the set template provider, if any\n     * @param request the request on which to fallback\n     * @return the string reference of the document to use as template or {@code \"\"} if none set\n     */\n    private String getTemplate(BaseObject templateProvider, XWikiRequest request)\n    {\n        String result = \"\";\n\n        if (templateProvider != null) {\n            result = templateProvider.getStringValue(TEMPLATE);\n        } else if (request.getParameter(TEMPLATE) != null) {\n            result = request.getParameter(TEMPLATE);\n        }\n\n        return result;\n    }\n\n    /**\n     * @param request the current request for which this action is executed\n     * @param doc the current document\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @param context the XWiki context\n     * @return the serialized reference of the parent to create the document for\n     */\n    private String getParent(XWikiRequest request, XWikiDocument doc, boolean isSpace, XWikiContext context)\n    {\n        // This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n        // If a parent parameter is passed, use it to set the parent when creating the new Page or Space.\n        // If no parent parameter was passed:\n        // * use the current document\n        // ** if we're creating a new page and if the current document exists or\n        // * use the Main space's WebHome\n        // ** if we're creating a new page and the current document does not exist.\n        String parent = request.getParameter(PARENT);\n        if (StringUtils.isEmpty(parent)) {\n            EntityReferenceSerializer<String> localSerializer =\n                Utils.getComponent(EntityReferenceSerializer.TYPE_STRING, LOCAL_SERIALIZER_HINT);\n\n            if (doc.isNew()) {\n                // Use the Main space's WebHome.\n                Provider<DocumentReference> defaultDocumentReferenceProvider =\n                    Utils.getComponent(DocumentReference.TYPE_PROVIDER);\n\n                DocumentReference parentRef =\n                    defaultDocumentReferenceProvider.get().setWikiReference(context.getWikiReference());\n\n                parent = localSerializer.serialize(parentRef);\n            } else {\n                // Use the current document.\n                DocumentReference parentRef = doc.getDocumentReference();\n\n                parent = localSerializer.serialize(parentRef);\n            }\n        }\n\n        return parent;\n    }\n\n    /**\n     * @param request the current request for which this action is executed\n     * @param newDocument the document to be created\n     * @param isSpace {@code true} if the request is to create a space, {@code false} if a page should be created\n     * @return the title of the page to be created. If no request parameter is set, the page name is returned for a new\n     *         page and the space name is returned for a new space\n     */\n    private String getTitle(XWikiRequest request, XWikiDocument newDocument, boolean isSpace)\n    {\n        String title = request.getParameter(\"title\");\n        if (StringUtils.isEmpty(title)) {\n            if (isSpace) {\n                title = newDocument.getDocumentReference().getLastSpaceReference().getName();\n            } else {\n                title = newDocument.getDocumentReference().getName();\n                // Avoid WebHome titles for pages that are really space homepages.\n                if (WEBHOME.equals(title)) {\n                    title = newDocument.getDocumentReference().getLastSpaceReference().getName();\n                }\n            }\n        }\n\n        return title;\n    }\n\n    /**\n     * @param templateProvider the template provider for this creation\n     * @return {@code true} if the created document should be saved on create, before editing, {@code false} otherwise\n     */\n    private ActionOnCreate getActionOnCreate(BaseObject templateProvider)\n    {\n        if (templateProvider != null) {\n            String action = templateProvider.getStringValue(\"action\");\n            ActionOnCreate actionOnCreate = ActionOnCreate.valueOfAction(action);\n            if (actionOnCreate != null) {\n                return actionOnCreate;\n            }\n        }\n\n        // Default action when creating a page from a template.\n        return ActionOnCreate.EDIT;\n    }\n\n    /**\n     * @param template the template to create document from\n     * @param context the context of the current request\n     * @return the default edit mode for a document created from the passed template\n     * @throws XWikiException in case something goes wrong accessing template document\n     */\n    private String getEditMode(String template, XWikiContext context)\n        throws XWikiException\n    {\n        // Determine the edit action (edit/inline) for the newly created document, if a template is passed it is\n        // used to determine the action. Default is 'edit'.\n        String editAction = ActionOnCreate.EDIT.name().toLowerCase();\n        XWiki xwiki = context.getWiki();\n        if (!StringUtils.isEmpty(template)) {\n            DocumentReference templateReference = getCurrentMixedDocumentReferenceResolver().resolve(template);\n            if (xwiki.exists(templateReference, context)) {\n                editAction = xwiki.getDocument(templateReference, context).getDefaultEditMode(context);\n            }\n        }\n\n        return editAction;\n    }\n}\n", "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.web;\n\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\n\nimport javax.inject.Provider;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.csrf.CSRFToken;\nimport org.xwiki.model.reference.DocumentReference;\nimport org.xwiki.model.reference.EntityReference;\nimport org.xwiki.model.reference.SpaceReference;\nimport org.xwiki.model.reference.WikiReference;\nimport org.xwiki.observation.ObservationManager;\nimport org.xwiki.query.Query;\nimport org.xwiki.query.QueryManager;\nimport org.xwiki.security.authorization.Right;\nimport org.xwiki.test.annotation.ComponentList;\nimport org.xwiki.test.junit5.mockito.InjectMockComponents;\nimport org.xwiki.test.junit5.mockito.MockComponent;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.test.MockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.InjectMockitoOldcore;\nimport com.xpn.xwiki.test.junit5.mockito.OldcoreTest;\nimport com.xpn.xwiki.test.reference.ReferenceComponentList;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n/**\n * Unit tests for {@link com.xpn.xwiki.web.CreateAction}.\n *\n * @version $Id$\n * @since 7.2M1\n */\n@ComponentList\n@ReferenceComponentList\n@OldcoreTest\nclass CreateActionTest\n{\n    private static final String CSRF_TOKEN_VALUE = \"token4234343\";\n\n    @InjectMockitoOldcore\n    MockitoOldcore oldcore;\n\n    XWikiURLFactory mockURLFactory;\n\n    @InjectMockComponents\n    CreateAction action;\n\n    @MockComponent\n    private CSRFToken csrfToken;\n\n    XWikiContext context;\n\n    XWikiRequest mockRequest;\n\n    XWikiResponse mockResponse;\n\n    Query mockTemplateProvidersQuery;\n\n    @BeforeEach\n    public void beforeEach() throws Exception\n    {\n        this.context = this.oldcore.getXWikiContext();\n\n        Utils.setComponentManager(this.oldcore.getMocker());\n\n        QueryManager mockSecureQueryManager =\n            this.oldcore.getMocker().registerMockComponent((Type) QueryManager.class, \"secure\");\n\n        this.mockTemplateProvidersQuery = mock(Query.class);\n        when(mockSecureQueryManager.createQuery(any(), any())).thenReturn(this.mockTemplateProvidersQuery);\n        when(this.mockTemplateProvidersQuery.execute()).thenReturn(Collections.emptyList());\n\n        when(this.oldcore.getMockContextualAuthorizationManager().hasAccess(any(Right.class),\n            any(EntityReference.class))).thenReturn(true);\n\n        Provider<DocumentReference> mockDocumentReferenceProvider =\n            this.oldcore.getMocker().registerMockComponent(DocumentReference.TYPE_PROVIDER);\n        when(mockDocumentReferenceProvider.get())\n            .thenReturn(new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\"));\n\n        this.mockURLFactory = mock(XWikiURLFactory.class);\n        this.context.setURLFactory(this.mockURLFactory);\n\n        this.mockRequest = mock(XWikiRequest.class);\n        this.context.setRequest(this.mockRequest);\n\n        this.mockResponse = mock(XWikiResponse.class);\n        this.context.setResponse(this.mockResponse);\n\n        when(this.mockRequest.get(\"type\")).thenReturn(\"plain\");\n\n        this.oldcore.getMocker().registerMockComponent(ObservationManager.class);\n\n        when(this.csrfToken.getToken()).thenReturn(CSRF_TOKEN_VALUE);\n        when(this.csrfToken.isTokenValid(CSRF_TOKEN_VALUE)).thenReturn(true);\n        when(this.mockRequest.getParameter(\"form_token\")).thenReturn(CSRF_TOKEN_VALUE);\n    }\n\n    @Test\n    void newDocumentFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void newDocumentFromURLWithInvalidToken() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        this.context.setDoc(document);\n\n        // Submit an invalid token\n        when(this.mockRequest.getParameter(\"form_token\")).thenReturn(\"fakeToken\");\n\n        // Run the action\n        String result = this.action.render(this.context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to re-submit with the\n        // form token.\n        assertEquals(\"create\", result);\n\n        // Verify that we got until the token validation.\n        verify(this.csrfToken).isTokenValid(\"fakeToken\");\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(this.mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(),\n            any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentButNonTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Pass the tocreate=nonterminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Verify that the token has been validated.\n        verify(this.csrfToken).isTokenValid(CSRF_TOKEN_VALUE);\n\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentFromURLWhenNoType() throws Exception\n    {\n        // No type has been set by the user\n        when(mockRequest.get(\"type\")).thenReturn(null);\n\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertEquals(\"create\", result);\n    }\n\n    @Test\n    void newDocumentWebHomeTopLevelFromURL() throws Exception\n    {\n        // new document = xwiki:X.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: The title is not \"WebHome\", but \"X\" (the space's name) to avoid exposing \"WebHome\" in the UI.\n        verify(mockURLFactory).createURL(\"X\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: The bebavior is the same for both a top level space and a child space WebHome.\n        // Note2: The title is not \"WebHome\", but \"Y\" (the space's name) to avoid exposing \"WebHome\" in the UI.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeButTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Pass the tocreate=terminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y instead of X.Y.WebHome because the tocreate parameter says \"terminal\".\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception\n    {\n        // new document = xwiki:X.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Pass the tocreate=terminal request parameter\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // Note: We can not create the \"X\" terminal document, since it is already at the top level of the hierarchy and\n        // none was able to be deducted from the given information. The user needs to specify more info in order to\n        // continue.\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void existingDocumentFromUINoName() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Just landed on the create page or submitted with no values (no name) specified.\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void existingDocumentFromUI() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome since we default to non-terminal documents.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUICheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X.Y&name=Z\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Z\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.Z.WebHome since we default to non-terminal documents.\n        verify(mockURLFactory).createURL(\"X.Y.Z\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Z&form_token=\" + CSRF_TOKEN_VALUE, null,\n            \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentTerminalFromUI() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&tocreate=terminal\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y instead of X.Y.WebHome because the tocreate parameter says \"terminal\".\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentTerminalFromUICheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X.Y&name=Z&tocreate=termina\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Z\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.Z instead of X.Y.Z.WebHome because the tocreate parameter says \"terminal\".\n        verify(mockURLFactory).createURL(\"X.Y\", \"Z\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Z&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentTerminalFromUIButAlreadyExisting() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        // Mock it as existing in the DB as well with non-empty content\n        oldcore.getDocuments().put(new DocumentReference(documentReference, Locale.ROOT), document);\n        when(document.getContent()).thenReturn(\"Some non-empty content\");\n\n        // Submit from the UI spaceReference=X&name=Y&tocreate=terminal\n        // No diference if it was a non-terminal document, just easier to mock since we already have Main.WebHome set\n        // up.\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"Main\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"WebHome\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_NOT_EMPTY, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void notExistingDocumentFromUIButNameTooLong() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(10);\n        context.setDoc(document);\n\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"Main\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Foo123456789\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void notExistingDocumentFromUIButSpaceTooLong() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(10);\n        context.setDoc(document);\n\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"1.3.5.7.9.11\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Foo\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_DOCUMENT_PATH_TOO_LONG, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void existingDocumentFromUITopLevelDocument() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI name=Y\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome since we default to non-terminal documents.\n        verify(mockURLFactory).createURL(\"Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    /*\n     * Deprecated parameters\n     */\n\n    @Test\n    void existingDocumentFromUIDeprecated() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI space=X&page=Y\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"page\")).thenReturn(\"Y\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y since the deprecated parameters were creating terminal documents by default.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentFromUIDeprecatedCheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI space=X.Y&page=Z\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"page\")).thenReturn(\"Z\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: The space parameter was previously considered as space name, not space reference, so it is escaped.\n        // Note2: We are creating X\\.Y.Z since the deprecated parameters were creating terminal documents by default.\n        verify(mockURLFactory).createURL(\"X\\\\.Y\", \"Z\", \"edit\",\n            \"template=&parent=Main.WebHome&title=Z&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentNonTerminalFromUIDeprecated() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI space=X&tocreate=space\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.WebHome because the tocreate parameter says \"space\".\n        verify(mockURLFactory).createURL(\"X\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentNonTerminalFromUIDeprecatedIgnoringPage() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI space=X&page=Y&tocreate=space\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"page\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.WebHome instead of X.Y because the tocreate parameter says \"space\" and the page\n        // parameter is ignored.\n        verify(mockURLFactory).createURL(\"X\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentNonTerminalFromUIDeprecatedCheckEscaping() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI space=X.Y&tocreate=space\n        when(mockRequest.getParameter(\"space\")).thenReturn(\"X.Y\");\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: The space parameter was previously considered as space name, not space reference, so it is escaped.\n        // Note2: We are creating X\\.Y.WebHome because the tocreate parameter says \"space\".\n        verify(mockURLFactory).createURL(\"X\\\\.Y\", \"WebHome\", \"edit\",\n            \"template=&parent=Main.WebHome&title=X.Y&form_token=\" + CSRF_TOKEN_VALUE, null,\n            \"xwiki\", context);\n    }\n\n    /*\n     * Template providers\n     */\n\n    @Test\n    void existingDocumentFromUITemplateProviderExistingButNoneSelected() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(\"XWiki.MyTemplateProvider\",\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList());\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to enter the missing values.\n        assertEquals(\"create\", result);\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces) throws Exception\n    {\n        mockExistingTemplateProviders(fullName, resolvedDocumentReference, allowedSpaces, false);\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces, Boolean terminal) throws Exception\n    {\n        mockExistingTemplateProviders(fullName, resolvedDocumentReference, allowedSpaces, terminal, null);\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces, Boolean terminal, String type) throws Exception\n    {\n        mockExistingTemplateProviders(fullName, resolvedDocumentReference, allowedSpaces, terminal, type, null);\n    }\n\n    /**\n     * Mocks 1 existing template provider.\n     * <p>\n     * Note: Calling it multiple times does not add multiple providers.\n     */\n    private void mockExistingTemplateProviders(String fullName, DocumentReference resolvedDocumentReference,\n        List<String> allowedSpaces, Boolean terminal, String type, String action) throws Exception\n    {\n        DocumentReference templateProviderClassReference =\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"TemplateProviderClass\");\n\n        // Mock to return at least 1 existing template provider\n        when(mockTemplateProvidersQuery.execute()).thenReturn(new ArrayList<Object>(Arrays.asList(fullName)));\n\n        // Mock the template document as existing.\n        XWikiDocument templateProviderDocument = mock(XWikiDocument.class);\n        when(templateProviderDocument.getDocumentReference()).thenReturn(resolvedDocumentReference);\n        oldcore.getDocuments().put(new DocumentReference(resolvedDocumentReference, Locale.ROOT),\n            templateProviderDocument);\n        // Mock the provider object (template + spaces properties)\n        BaseObject templateProviderObject = mock(BaseObject.class);\n        when(templateProviderObject.getListValue(\"creationRestrictions\")).thenReturn(allowedSpaces);\n        String templateDocumentFullName = fullName.substring(0, fullName.indexOf(\"Provider\"));\n        when(templateProviderObject.getStringValue(\"template\")).thenReturn(templateDocumentFullName);\n        if (terminal != null) {\n            when(templateProviderObject.getIntValue(\"terminal\", -1)).thenReturn(terminal ? 1 : 0);\n        } else {\n            when(templateProviderObject.getIntValue(\"terminal\", -1)).thenReturn(-1);\n        }\n        if (type != null) {\n            when(templateProviderObject.getStringValue(\"type\")).thenReturn(type);\n        }\n        if (action != null) {\n            when(templateProviderObject.getStringValue(\"action\")).thenReturn(action);\n        }\n        when(templateProviderDocument.getXObject(templateProviderClassReference)).thenReturn(templateProviderObject);\n\n        // Mock the template document as existing\n        String templateDocumentName =\n            resolvedDocumentReference.getName().substring(0, resolvedDocumentReference.getName().indexOf(\"Provider\"));\n        DocumentReference templateDocumentReference =\n            new DocumentReference(templateDocumentName, new SpaceReference(resolvedDocumentReference.getParent()));\n        mockTemplateDocumentExisting(templateDocumentFullName, templateDocumentReference);\n    }\n\n    /**\n     * @param templateDocumentFullName\n     * @param templateDocumentReference\n     * @throws XWikiException\n     */\n    private void mockTemplateDocumentExisting(String templateDocumentFullName,\n        DocumentReference templateDocumentReference) throws XWikiException\n    {\n        XWikiDocument templateDocument = mock(XWikiDocument.class);\n        when(templateDocument.getDocumentReference()).thenReturn(templateDocumentReference);\n        when(templateDocument.getDefaultEditMode(context)).thenReturn(\"edit\");\n        oldcore.getDocuments().put(new DocumentReference(templateDocumentReference, Locale.ROOT), templateDocument);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecified() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList());\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y and using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE, null, \"xwiki\",\n            context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedRestrictionExists() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n        String csrfTokenValue = \"token42557783\";\n        when(this.csrfToken.getToken()).thenReturn(csrfTokenValue);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that allows usage in target space.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Arrays.asList(\"X\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: We are allowed to create anything under space X, be it a terminal or a non-terminal document.\n        // Note2: We are creating X.Y and using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + csrfTokenValue,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedRestrictionExistsOnParentSpace() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X.Y.Z&name=W&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X.Y.Z\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"W\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that allows usage in one of the target space's parents (top level in this\n        // case).\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Arrays.asList(\"X\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note1: We are allowed to create anything under space X or its children, be it a terminal or a non-terminal\n        // document\n        // Note2: We are creating X.Y.Z.W and using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X.Y.Z.W\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=W&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedButNotAllowed() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"),\n            Arrays.asList(\"AnythingButX\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference =\n            new DocumentReference(\"Y\", new SpaceReference(\"X\", new WikiReference(\"xwiki\")));\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"),\n            Arrays.asList(\"AnythingButX\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"),\n            Arrays.asList(\"AnythingButX\"));\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify that the create template is rendered, so the UI is displayed for the user to see the error.\n        assertEquals(\"create\", result);\n\n        // Check that the exception is properly set in the context for the UI to display.\n        XWikiException exception = (XWikiException) this.oldcore.getScriptContext().getAttribute(\"createException\");\n        assertNotNull(exception);\n        assertEquals(XWikiException.ERROR_XWIKI_APP_TEMPLATE_NOT_AVAILABLE, exception.getCode());\n\n        // We should not get this far so no redirect should be done, just the template will be rendered.\n        verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(), any(), any(XWikiContext.class));\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverriddenFromUIToNonTerminal() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal even if the template provider says otherwise.\n        // Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenFromUITerminal() throws Exception\n    {\n        // new document = xwiki:X.Y\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateSpecified() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&template=XWiki.MyTemplate\n        String templateDocumentFullName = \"XWiki.MyTemplate\";\n        DocumentReference templateDocumentReference =\n            new DocumentReference(\"MyTemplate\", Arrays.asList(\"XWiki\"), \"xwiki\");\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"template\")).thenReturn(\"XWiki.MyTemplate\");\n\n        // Mock the passed template document as existing.\n        mockTemplateDocumentExisting(templateDocumentFullName, templateDocumentReference);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome and using the template specified in the request.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal and using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFromUIToNonTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            true);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal, even if the template provider says otherwise.\n        // Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal and using a template, as specified in the\n        // template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenFromUIToTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        String spaceReferenceString = \"X\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(spaceReferenceString);\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Mock 1 existing template provider that creates terminal documents.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(),\n            false);\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal, even if the template provider says otherwise.\n        // Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"page\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y as terminal, since the template provider did not specify a \"terminal\"\n        // property and it used the old \"page\" type instead. Also using a template, as specified in the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButOverriddenFromUIToNonTerminal()\n        throws Exception\n    {\n        // new document = xwiki:X.Y.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"X\", \"Y\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Specifying a template provider in the URL: templateprovider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"nonterminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"page\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating the document X.Y.WebHome as non-terminal, since even if the template provider did not\n        // specify a \"terminal\" property and it used the old \"page\" type, the UI explicitly asked for a non-terminal\n        // document. Also using a template, as specified in the template provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y.WebHome as non-terminal, since the template provider does not specify a \"terminal\"\n        // property and we fallback on the \"type\" property's value. Also using the template extracted from the template\n        // provider.\n        verify(mockURLFactory).createURL(\"X.Y\", \"WebHome\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOverridenFromUIToTerminal() throws Exception\n    {\n        // current document = xwiki:Main.WebHome\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", Arrays.asList(\"Main\"), \"WebHome\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(false);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        context.setDoc(document);\n\n        // Submit from the UI spaceReference=X&name=Y&templateProvider=XWiki.MyTemplateProvider\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n        when(mockRequest.getParameter(\"tocreate\")).thenReturn(\"terminal\");\n\n        // Mock 1 existing template provider\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"space\");\n\n        // Run the action\n        String result = action.render(context);\n\n        // The tests are below this line!\n\n        // Verify null is returned (this means the response has been returned)\n        assertNull(result);\n\n        // Note: We are creating X.Y as terminal, since it is overriden from the UI, regardless of any backwards\n        // compatibility resolutions. Also using the template extracted from the template provider.\n        verify(mockURLFactory).createURL(\"X\", \"Y\", \"edit\",\n            \"template=XWiki.MyTemplate&parent=Main.WebHome&title=Y&form_token=\" + CSRF_TOKEN_VALUE,\n            null, \"xwiki\", context);\n    }\n\n    @Test\n    void newDocumentWebHomeFromURLTemplateProviderSpecifiedWithSaveAndEdit() throws Exception\n    {\n        // Mock the document to create.\n        DocumentReference documentReference = new DocumentReference(\"xwiki\", \"X\", \"Y\");\n        XWikiDocument document = mock(XWikiDocument.class);\n        when(document.getDocumentReference()).thenReturn(documentReference);\n        when(document.getDocumentReferenceWithLocale()).thenReturn(documentReference);\n        when(document.isNew()).thenReturn(true);\n        when(document.getLocalReferenceMaxLength()).thenReturn(255);\n        when(document.getDefaultEditMode(this.context)).thenReturn(\"edit\");\n        when(document.getDefaultLocale()).thenReturn(Locale.ROOT);\n        when(document.clone()).thenReturn(document);\n\n        // Mock the XWiki context.\n        when(this.context.getWiki().getLocalePreference(this.context)).thenReturn(Locale.FRENCH);\n        when(this.context.getWiki().getDocument(documentReference, this.context)).thenReturn(document);\n        this.context.setDoc(document);\n        DocumentReference userReference = new DocumentReference(\"xwiki\", \"Users\", \"Alice\");\n        this.context.setUserReference(userReference);\n\n        // Mock the creation request.\n        when(this.mockRequest.getParameter(\"spaceReference\")).thenReturn(\"X\");\n        when(this.mockRequest.getParameter(\"name\")).thenReturn(\"Y\");\n        when(this.mockRequest.getParameter(\"title\")).thenReturn(\"Yippee\");\n        String templateProviderFullName = \"XWiki.MyTemplateProvider\";\n        when(this.mockRequest.getParameter(\"templateprovider\")).thenReturn(templateProviderFullName);\n\n        // Mock the template provider.\n        mockExistingTemplateProviders(templateProviderFullName,\n            new DocumentReference(\"xwiki\", Arrays.asList(\"XWiki\"), \"MyTemplateProvider\"), Collections.emptyList(), null,\n            \"page\", \"saveandedit\");\n\n        // Run the create action.\n        assertNull(this.action.render(this.context));\n\n        verify(document).setLocale(Locale.ROOT);\n        verify(document).setDefaultLocale(Locale.FRENCH);\n        verify(document).readFromTemplate(new DocumentReference(\"xwiki\", \"XWiki\", \"MyTemplate\"), this.context);\n        verify(document).setTitle(\"Yippee\");\n        verify(document).setCreatorReference(userReference);\n        verify(document).setAuthorReference(userReference);\n        verify(this.context.getWiki()).saveDocument(document, this.context);\n    }\n}\n", "## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n## ---------------------------------------------------------------------------------------------------------\n## This template is called by the create action which binds some context variables as it executes, based on\n## the request and the current document. These variables can be used in this template:\n## * $spaceReference - the space reference of the new document, read from the \"spaceReference\" parameter\n## * $name - the name to use for the new document, read from the \"name\" parameter\n## * $isSpace - true if we are creating a non-terminal document ($name is the space name), false if we are\n##              creating a terminal document ($name is the document name). Determined by the create action\n## * $availableTemplateProviders - list of template provider documents available from the current space\n##\n## Note: Make sure to use these bindings instead of directly using the request parameters, as the bindings\n## also consider backwards compatibility and convert older \"space\" and \"page\" parameters if they are passed.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## This template can be passed a parent document reference in parameter (using the \"parent\" parameter).\n## If a parent parameter is passed, use it to set the parent when creating the new page.\n## If no parent parameter was passed, the create action will determine it to be the current document if it\n## exists or the Main space's webhome if the current document does not exist.\n## ---------------------------------------------------------------------------------------------------------\n#set ($parent = \"$!request.getParameter('parent')\")\n\n## ---------------------------------------------------------------------------------------------------------\n## This parent can be passed a title for the document to create (using the \"title\" parameter).\n## The title is used to automatically compute a page name, which can then be customized by the user.\n## If no title is given, the page name (if set) will be used as title.\n## ---------------------------------------------------------------------------------------------------------\n#if (\"$!request.title\" != '')\n  #set ($title = \"$!request.title\")\n#else\n  #set ($title = \"$!{escapetool.velocity($name)}\")\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Get the passed template provider, if any\n## ---------------------------------------------------------------------------------------------------------\n#set($templateProvider = \"$!request.templateprovider\")\n## Get the template as well, since in case template provider is missing, template should be used, \n## to allow creation from template directly, without necessarily going through template provider.\n#set($template = \"$!request.template\")\n\n## ---------------------------------------------------------------------------------------------------------\n## If there was an exception creating the page because of invalid space, notify. \n## Should set the other variables only if there is no exception. Otherwise, if there's an exception other than the \n## 11016 one, nothing will be displayed, depending on the other passed parameters.\n## ---------------------------------------------------------------------------------------------------------\n#set($exception = $createException)\n## check if the exception is about the non-allowed spaces for template\n#if(\"$!exception\" != '' && $exception.code == 11016)\n  <div class=\"box errormessage\">\n    #set($allowedSpaces = $createAllowedSpaces)\n    #if ($allowedSpaces.size() == 1)\n      $services.localization.render('core.create.template.allowedspace.inline', [$templateProvider, $allowedSpaces.get(0)])\n    #else\n      $services.localization.render('core.create.template.allowedspaces.inline', [$templateProvider, $allowedSpaces.toString()])\n    #end\n  </div>\n#end\n## check if the exception is about the document which already exists\n#if(\"$!exception\" != '' && $exception.code == 11002)\n  <div class='box errormessage'>\n      ## Use the 'existingDocumentReference' context binding set by the create action for this case.\n      $services.localization.render('core.create.page.error.docalreadyexists',\n        [\"${existingDocumentReference}\",\n         $xwiki.getURL($existingDocumentReference, 'view', ''),\n         $xwiki.getURL($existingDocumentReference, 'edit', '')\n        ]\n      )\n  </div>\n#end\n## check if the exception is about the document name being invalid\n#if(\"$!exception\" != '' && $exception.code == 11018)\n<div class='box errormessage'>\n  ## Use the 'invalidNameReference' context binding set by the create action for this case.\n  $services.localization.render('entitynamevalidation.create.invalidname', [$invalidNameReference])\n</div>\n#end\n\n## check if the exception is about the document having a path too long\n#template('hierarchy_macros.vm')\n#if(\"$!exception\" != '' && $exception.code == 11017)\n  #set ($options = {})\n  #set ($documentReference = $services.model.resolveDocument($tooLongPath))\n  <div class='box errormessage'>\n      $services.localization.render('core.create.page.error.docpathtoolong',\n        [\"<p>#hierarchy($documentReference, $options)</p>\",\n          $doc.getLocalReferenceMaxLength(),\n          $tooLongPath.length()\n        ]\n      )\n  </div>\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Determine if we need to do extra checks for a deprecated, pre-NestedSpaces request to create a space.\n## ---------------------------------------------------------------------------------------------------------\n#set ($deprecatedSpaceCreate = \"$!request.tocreate\" == 'space')\n\n## ---------------------------------------------------------------------------------------------------------\n## Note: The list of available template providers is computed in the action and set on the context under\n## the \"availableTemplateProviders\" binding.\n## ---------------------------------------------------------------------------------------------------------\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro for displaying the available types and templates and changing target space rules accordingly\n## ---------------------------------------------------------------------------------------------------------\n#macro (displayTypes)\n  #if ($template == '')\n    #set ($blankTerminalState = !$isSpace)\n    #set ($options = [\n      { \n        'name': $services.localization.render('core.create.type.default'),\n        'options': [\n          {\n            'name': $services.localization.render('core.create.type.blank'),\n            'value': 'blank',\n            'description': $services.localization.render('core.create.type.blank.description'),\n            'icon': 'file-white',\n            'data': {\n              'type': 'blank',\n              'terminal' : \"$blankTerminalState\"\n            }\n          }\n        ]\n      }])\n    #if ($xwiki.exists($services.model.createDocumentReference('', 'XWiki', 'OfficeImporter')) && $services.officemanager.isConnected())\n      ## TODO: handle this use case with an extension point\n      #set ($discard = $options[0].options.add({\n        'name': $services.localization.render('office.createForm.type.name'),\n        'value': 'office',\n        'description': $services.localization.render('office.createForm.type.description'),\n        'icon': 'file-word',\n        'data': {\n          'type':'office'\n        }\n      }))\n    #end\n    #if (!$availableTemplateProviders.isEmpty())\n      #set ($templateOptions = [])\n      #set ($discard = $options.add({'name': $services.localization.render('core.create.type.templates'), 'options': $templateOptions}))\n      #foreach($tpdoc in $availableTemplateProviders)\n        #set ($tpobj = $tpdoc.getObject('XWiki.TemplateProviderClass'))\n        #set ($tpdocRef = $services.model.serialize($tpdoc.documentReference, 'local'))\n        ##\n        ## Extract and save in data-* attributes list of allowed spaces to be used in the JavaScript validation of the spaceReference input.\n        ##\n        #set($jsAllowedSpacesArray = '[]')## Reset any previous value\n        #set($allowedSpaces = $tpobj.getValue('creationRestrictions'))\n        #if($allowedSpaces.size() == 0)\n          ## Backwards compatibility for Template Providers created before 8.3M2.\n          #set($allowedSpaces = $tpobj.getValue('spaces'))\n        #end\n        ## Reset to an empty list when no restrictions are set.\n        #if (\"$!allowedSpaces\" == '')\n          #set ($allowedSpaces = [])\n        #end\n        #if($allowedSpaces.size() > 0)\n          #set($jsAllowedSpacesArray = $jsontool.serialize($allowedSpaces))\n        #end\n        ## Compute the error message.\n        #set ($templateProviderName = $services.localization.render($tpobj.getValue('name')))\n        #if($allowedSpaces.isEmpty())\n          #set($message = '')\n        #elseif($allowedSpaces.size() == 1)\n          #set($message = $services.localization.render('core.create.template.allowedspace.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #else\n          #set($message = $services.localization.render('core.create.template.allowedspaces.inline', [$templateProviderName, $jsAllowedSpacesArray]))\n        #end\n        ##\n        ## Determine if the creation restrictions are just suggestions\n        ##\n        #set ($restrictionsAreSuggestions = ($tpobj.getValue('creationRestrictionsAreSuggestions') == 1))\n        ##\n        ## Determine if it's a terminal page template\n        ##\n        #set ($isTerminalProvider = $tpobj.getValue('terminal'))\n        ## Check if this is an old template provider that has not been migrated (the 'type' property has not been\n        ## replaced by the 'terminal' property).\n        #set ($type = $tpobj.getValue('type'))\n        #if (\"$!isTerminalProvider\" == '' && (\"$!type\" != '' || $type == ''))\n          ## This must be an old template provider because the 'terminal' property is not set (or it was set to '---'\n          ## from the UI) and the 'type' property is still present.\n          #if ($type == 'space')\n            #set ($isTerminalProvider = false)\n          #else\n            ## 'page' or '' both resolve to true, for backwards compatibility reasons.\n            #set ($isTerminalProvider = true)\n          #end\n        #else\n          #set ($isTerminalProvider = ($isTerminalProvider == 1))\n        #end\n        ##\n        ## Display the template provider field option in the form.\n        ##\n        #set ($inputId = \"xwiki-create-form-${foreach.count}\")\n        #set ($icon = $tpobj.getValue('icon'))\n        #if (\"$!icon\" == '')\n          #set($icon = 'file-white')\n        #end\n        #set ($discard = $templateOptions.add({\n          'name': $services.localization.render($tpobj.getValue('name')),\n          'value': \"$tpdocRef\",\n          'description': $services.localization.render($tpobj.getValue('description')),\n          'icon': $icon,\n          'data': {\n            'allowed-spaces': $jsAllowedSpacesArray,\n            'allowed-spaces-message': $message,\n            'restrictions-are-suggestions': $restrictionsAreSuggestions,\n            'type': 'template',\n            'terminal' : $isTerminalProvider\n          }\n        }))\n      #end\n    #end\n    <dt>\n      <label>$services.localization.render('core.create.type')</label>\n      <span class=\"xHint\">$escapetool.xml($services.localization.render('core.create.type.hint'))</span>\n    </dt>\n    #set ($defaultValue = $request.type)\n    #if (\"$!defaultValue\" == '')\n      #if ($recommendedTemplateProviders.size() > 0)\n        #set ($defaultValue = $services.model.serialize($recommendedTemplateProviders[0].documentReference, 'local'))\n      #else\n        #set ($defaultValue = 'blank')\n      #end\n    #end\n    <dd>#xwikiSelect('type', $options, $defaultValue, false, 'xwiki-select-adaptable-medium page-type', '', true)</dd>\n  #else\n    <input type=\"hidden\" name=\"template\" value=\"$escapetool.xml($template)\" />\n  #end\n#end\n#set ($discard = $xwiki.jsfx.use('js/xwiki/create.js', {'forceSkinAction': true}))\n\n## ---------------------------------------------------------------------------------------------------------\n## Macro used to extract a wiki's homepage reference.\n## ---------------------------------------------------------------------------------------------------------\n#macro (getWikiHomePageReference $wiki $return)\n  #set ($_wikiHomePageReference = $services.wiki.getById($wiki).mainPageReference)\n  #if (!$_wikiHomePageReference)\n    #set ($wikiReference = $services.model.createWikiReference($wiki))\n    #set ($_wikiHomePageReference = $services.model.resolveDocument('', 'default', $wikiReference))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $_wikiHomePageReference)\n#end\n\n## ---------------------------------------------------------------------------------------------------------\n## Display the form.\n## ---------------------------------------------------------------------------------------------------------\n## FIXME: Using the 'container' class when displayed in an ajax call by clicking on a Wanted Link so that it looks good (proper margins) in the popup.\n<form action=\"$doc.getURL('create')\" method=\"post\" id=\"create\" class=\"xform #if($request.ajax)container#end\">\n  <fieldset>\n\n  ## Deprecated: Pass along any received page parent.\n  <input type='hidden' name='parent' value=\"$!{escapetool.xml($parent)}\"/>\n\n  ## The \"templateprovider\" field is needed by the CreateAction, even empty.\n  ## By the past, it was \"xwiki/create.js\" which created this field, but it was causing problems when the user sent the\n  ## form before the JavaScript code was executed.\n  <input type=\"hidden\" name=\"templateprovider\" id=\"templateprovider\" value=\"\" />\n  <input type=\"hidden\" name=\"form_token\" value=\"$!{escapetool.xml($services.csrf.getToken())}\"/>\n\n  <div class='row'>\n    ## Hide the first column when displayed in an AJAX call by clicking on a Wanted Link (because we know the target\n    ## location from the link reference) or when the current document is new (because the create action uses the location\n    ## of the current document as target in this case).\n    #if (!$request.ajax && !$doc.isNew())\n      ## Determine the parent reference for the new document.\n      #set ($parentReference = $spaceReference)\n      #if (!$parentReference)\n        ## No parent reference specified.\n        ## We keep this code although we tested above that the current document is not new because in the future we may\n        ## want to support changing the target location even if the current document is new.\n        #if ($doc.isNew())\n          ## Encourage the user to create the current document.\n          #set ($parentReference = $doc.documentReference.parent)\n          #if ($doc.documentReference.name == 'WebHome')\n            #set ($parentReference = $parentReference.parent)\n          #end\n        #else\n          #getWikiHomePageReference($doc.wiki $homeReference)\n          #if ($doc.documentReference.equals($homeReference) || $deprecatedSpaceCreate)\n            ## Encourage the user to create top level documents from the home page.\n            #set ($parentReference = $doc.documentReference.wikiReference)\n          #else\n            ## Encourage the user to create a child or sibling of the current document.\n            #set ($parentReference = $doc.documentReference.lastSpaceReference)\n          #end\n        #end\n      #end\n\n      ## Display the location picker.\n      <div class='col-xs-12 col-lg-6'>\n        #template('locationPicker_macros.vm')\n        #locationPicker({\n          'id': 'target',\n          'title': {\n            'label': 'core.create.title',\n            'hint': 'core.create.title.hint',\n            'name': 'title',\n            'value': $title,\n            'placeholder': 'core.create.name.placeholder'\n          },\n          'preview': {\n            'label': 'core.create.locationPreview.label',\n            'hint': 'core.create.locationPreview.hint'\n          },\n          'parent': {\n            'label': 'core.create.spaceReference.label',\n            'hint': 'core.create.spaceReference.hint',\n            'name': 'spaceReference',\n            'reference': $parentReference,\n            'placeholder': 'core.create.spaceReference.placeholder'\n          },\n          'name': {\n            'label': 'core.create.name.label',\n            'hint': 'core.create.name.hint',\n            'name': 'name',\n            'value': $name,\n            'placeholder': 'core.create.name.placeholder'\n          }\n        })\n      </div>\n    #else\n      ## First column is hidden.\n      ## Pass along the known values as hidden inputs.\n      ##\n      <input type='hidden' name='title' value=\"$!{escapetool.xml($title)}\"/>\n      <input type='hidden' id='name' name='name' value=\"$!{escapetool.xml($name)}\" />\n      #set ($spaceReferenceLocalString = $services.model.serialize($spaceReference, 'local'))\n      <input type='hidden' id='spaceReference' name='spaceReference' value=\"$!{escapetool.xml($spaceReferenceLocalString)}\" />\n    #end\n    ## FIXME: When displayed in an ajax call by clicking on a Wanted Link, the responsive classes consider the calling document (large screen)\n    ## as the viewport and not the popup (small screen), so we can not use them since they create problems instead of fixing them.\n    <div class='#if(!$request.ajax)col-xs-12 col-lg-6#end'>\n      <dl>\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Page type\n        ## ---------------------------------------------------------------------------------------------------------\n        #displayTypes()\n        ## ---------------------------------------------------------------------------------------------------------\n        ## Terminal page - Advanced users\n        ## ---------------------------------------------------------------------------------------------------------\n        #set ($hidden = '')\n        #if (!($isAdvancedUser || $isSuperAdmin) || $deprecatedSpaceCreate)\n          #set ($hidden = 'hidden')\n        #end\n        <dt class=\"$hidden\">\n          <input type=\"checkbox\" id=\"terminal\" name=\"tocreate\" value=\"terminal\" #if(!$isSpace)checked=\"checked\"#end/>\n          <label for=\"terminal\">$services.localization.render('core.create.terminal.label')</label>\n          ## Hidden input used to ensure that an unchecked terminal checkbox means non-terminal and that the default is not used by mistake.\n          <input type=\"hidden\" name=\"tocreate\" value=\"nonterminal\" />\n        </dt>\n        <dd class=\"$hidden\">\n          <span class=\"xHint\">$services.localization.render('core.create.terminal.hint')</span>\n        </dd>\n      </dl>\n    </div>\n  </div>\n\n  <div class='buttons'>\n    <span class='buttonwrapper'>\n      <input type='submit' class='button' value=\"$services.localization.render('create')\"/>\n    </span>\n    <span class=\"buttonwrapper\">\n      <a class=\"secondary button\" href=\"$doc.getURL()\">$services.localization.render('cancel')</a>\n    </span>\n  </div>\n\n  </fieldset>\n</form>\n"], "filenames": ["xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/web/CreateAction.java", "xwiki-platform-core/xwiki-platform-oldcore/src/test/java/com/xpn/xwiki/web/CreateActionTest.java", "xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/createinline.vm"], "buggy_code_start_loc": [25, 74, 278], "buggy_code_end_loc": [339, 1631, 278], "fixing_code_start_loc": [26, 75, 279], "fixing_code_end_loc": [345, 1611, 280], "type": "CWE-352", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. The create action is vulnerable to a CSRF attack, allowing script and thus remote code execution when targeting a user with script/programming right, thus compromising the confidentiality, integrity and availability of the whole XWiki installation. When a user with script right views this image and a log message `ERROR foo - Script executed!` appears in the log, the XWiki installation is vulnerable. This has been patched in XWiki 14.10.9 and 15.4RC1 by requiring a CSRF token for the actual page creation.", "other": {"cve": {"id": "CVE-2023-40572", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-24T02:15:09.643", "lastModified": "2023-09-01T17:07:35.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. The create action is vulnerable to a CSRF attack, allowing script and thus remote code execution when targeting a user with script/programming right, thus compromising the confidentiality, integrity and availability of the whole XWiki installation. When a user with script right views this image and a log message `ERROR foo - Script executed!` appears in the log, the XWiki installation is vulnerable. This has been patched in XWiki 14.10.9 and 15.4RC1 by requiring a CSRF token for the actual page creation."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionEndExcluding": "14.10.9", "matchCriteriaId": "11425A73-EEF4-4856-832E-B60154EC09EE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.0:-:*:*:*:*:*:*", "matchCriteriaId": "99329652-2907-4903-AAB1-1038F225C020"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "88E41345-F81E-401A-BD67-66AF4B3925D4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.1:-:*:*:*:*:*:*", "matchCriteriaId": "5D121BDB-D7C5-4B79-A904-3C4A76F38E6A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "67322CAC-1F17-4453-BC7F-4262E436E307"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.2:-:*:*:*:*:*:*", "matchCriteriaId": "047E048F-AB46-41FD-A074-2EC1D036DC92"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.2:rc1:*:*:*:*:*:*", "matchCriteriaId": "355FF62B-1086-4F15-8CBC-33906F4A3589"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.3:-:*:*:*:*:*:*", "matchCriteriaId": "D64558D4-26CC-44ED-9DDC-56979E569DA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:15.3:rc1:*:*:*:*:*:*", "matchCriteriaId": "82B5066C-4F5D-4F7F-9EE3-9A926321F16A"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/4b20528808d0c311290b0d9ab2cfc44063380ef7", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-4f8m-7h83-9f6m", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20849", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/4b20528808d0c311290b0d9ab2cfc44063380ef7"}}