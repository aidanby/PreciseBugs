{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.document.doctypes\");\npimcore.settings.document.doctypes = Class.create({\n\n    initialize: function () {\n\n        this.getTabPanel();\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_document_types\");\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_document_types\",\n                title: t(\"document_types\"),\n                iconCls: \"pimcore_icon_doctypes\",\n                border: false,\n                layout: \"fit\",\n                closable: true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_document_types\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"document_types\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor: function () {\n\n        this.store = pimcore.globalmanager.get(\"document_types_store\");\n\n        var typesColumns = [\n            {\n                text: t(\"name\"),\n                flex: 100,\n                sortable: true,\n                dataIndex: 'name',\n                editor: new Ext.form.TextField({})\n            },\n            {\n                text: t(\"group\"),\n                flex: 100,\n                sortable: true,\n                dataIndex: 'group',\n                editor: new Ext.form.TextField({})\n            },\n            {\n                text: t(\"controller\"),\n                flex: 200,\n                sortable: true,\n                dataIndex: 'controller',\n                editor: new Ext.form.ComboBox({\n                    store: new Ext.data.JsonStore({\n                        autoDestroy: true,\n                        autoLoad: true,\n                        proxy: {\n                            type: 'ajax',\n                            batchActions: false,\n                            url: Routing.generate('pimcore_admin_misc_getavailablecontroller_references'),\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'data'\n                            }\n                        },\n                        fields: [\"name\"]\n                    }),\n                    triggerAction: \"all\",\n                    typeAhead: true,\n                    queryMode: \"local\",\n                    anyMatch: true,\n                    editable: true,\n                    forceSelection: false,\n                    displayField: 'name',\n                    valueField: 'name',\n                    matchFieldWidth: false,\n                    listConfig: {\n                        maxWidth: 400\n                    }\n                })\n            },\n            {\n                text: t(\"template\"),\n                flex: 50,\n                sortable: true,\n                dataIndex: 'template',\n                editor: new Ext.form.ComboBox({\n                    store: new Ext.data.Store({\n                        autoDestroy: true,\n                        proxy: {\n                            type: 'ajax',\n                            url: Routing.generate('pimcore_admin_misc_getavailabletemplates'),\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'data'\n                            }\n                        },\n                        fields: [\"path\"]\n                    }),\n                    queryMode: 'local',\n                    triggerAction: \"all\",\n                    displayField: 'path',\n                    valueField: 'path',\n                    matchFieldWidth: false,\n                    listConfig: {\n                        maxWidth: 400\n                    }\n                })\n            },\n            {\n                text: t(\"type\"),\n                flex: 50,\n                sortable: true,\n                dataIndex: 'type',\n                editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [\"page\", \"snippet\", \"email\", \"newsletter\", \"printpage\", \"printcontainer\"]\n                })\n            },\n            {\n                text: t(\"priority\"),\n                flex: 50,\n                sortable: true,\n                dataIndex: 'priority',\n                editor: new Ext.form.ComboBox({\n                    store: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                    mode: \"local\",\n                    editable: false,\n                    triggerAction: \"all\"\n                })\n            },\n            {\n                xtype: 'checkcolumn',\n                text: t(\"static\"),\n                dataIndex: 'staticGeneratorEnabled',\n                width: 50,\n                renderer: function (value, metaData, record) {\n                    return (record.get('type') !== \"page\") ? '' : this.defaultRenderer(value, metaData);\n                },\n                listeners: {\n                    beforecheckchange: function (el, rowIndex, checked, record, eOpts) {\n                        if(!record.data.writeable) {\n                            pimcore.helpers.showNotification(t(\"info\"), t(\"config_not_writeable\"), \"info\");\n                            return false;\n                        }\n                        if (this.store.getAt(rowIndex).get(\"type\") !== \"page\") {\n                            record.set('staticGeneratorEnabled', false);\n                            return false;\n                        }\n                    }.bind(this),\n                    checkChange: function (column, rowIndex, checked, eOpts) {\n                        var record = this.store.getAt(rowIndex);\n                        record.set('staticGeneratorEnabled', checked);\n                    }.bind(this)\n                }\n            },\n            {\n                text: t(\"creationDate\"),\n                sortable: true,\n                dataIndex: 'creationDate',\n                editable: false,\n                width: 130,\n                hidden: true,\n                renderer: function (d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                text: t(\"modificationDate\"),\n                sortable: true,\n                dataIndex: 'modificationDate',\n                editable: false,\n                width: 130,\n                hidden: true,\n                renderer: function (d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    getClass: function (v, meta, rec) {\n                        var klass = \"pimcore_action_column \";\n                        if (rec.data.writeable) {\n                            klass += \"pimcore_icon_minus\";\n                        }\n                        return klass;\n                    },\n                    tooltip: t('delete'),\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('document_type'), data.data.name, function () {\n                            grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            }, {\n                xtype: 'actioncolumn',\n                menuText: t('translate'),\n                width: 30,\n                items: [{\n                    tooltip: t('translate'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/collaboration.svg\",\n                    handler: function (grid, rowIndex) {\n                        var rec = grid.getStore().getAt(rowIndex);\n                        try {\n                            pimcore.globalmanager.get(\"translationdomainmanager\").activate(rec.data.name);\n                        }\n                        catch (e) {\n                            pimcore.globalmanager.add(\"translationdomainmanager\",\n                                new pimcore.settings.translation.domain(\"admin\",rec.data.name));\n                        }\n                    }.bind(this)\n                }]\n            }\n        ];\n\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function (editor, context, eOpts) {\n                    if (!context.record.data.writeable) {\n                        return false;\n                    }\n                }\n            }\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            bodyCls: \"pimcore_editable_grid\",\n            store: this.store,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            columnLines: true,\n            trackMouseOver: true,\n            stripeRows: true,\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.rowEditing\n            ],\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\",\n                        disabled: !pimcore.settings['document-types-writeable']\n                    }\n                ]\n            },\n            viewConfig: {\n                forceFit: true,\n                getRowClass: function (record, rowIndex) {\n                    return record.data.writeable ? '' : 'pimcore_grid_row_disabled';\n                }\n            }\n        });\n\n        const prepareDocumentTypesGrid = new CustomEvent(pimcore.events.prepareDocumentTypesGrid, {\n            detail: {\n                grid: this.grid,\n                object: this\n            }\n        });\n\n        document.dispatchEvent(prepareDocumentTypesGrid);\n\n        return this.grid;\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            name: t('new_document_type'),\n            type: \"page\"\n        });\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.document.doctypes\");\npimcore.settings.document.doctypes = Class.create({\n\n    initialize: function () {\n\n        this.getTabPanel();\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_document_types\");\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_document_types\",\n                title: t(\"document_types\"),\n                iconCls: \"pimcore_icon_doctypes\",\n                border: false,\n                layout: \"fit\",\n                closable: true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_document_types\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"document_types\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor: function () {\n\n        this.store = pimcore.globalmanager.get(\"document_types_store\");\n\n        var typesColumns = [\n            {\n                text: t(\"name\"),\n                flex: 100,\n                sortable: true,\n                dataIndex: 'name',\n                editor: new Ext.form.TextField({})\n            },\n            {\n                text: t(\"group\"),\n                flex: 100,\n                sortable: true,\n                dataIndex: 'group',\n                editor: new Ext.form.TextField({})\n            },\n            {\n                text: t(\"controller\"),\n                flex: 200,\n                sortable: true,\n                dataIndex: 'controller',\n                editor: new Ext.form.ComboBox({\n                    store: new Ext.data.JsonStore({\n                        autoDestroy: true,\n                        autoLoad: true,\n                        proxy: {\n                            type: 'ajax',\n                            batchActions: false,\n                            url: Routing.generate('pimcore_admin_misc_getavailablecontroller_references'),\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'data'\n                            }\n                        },\n                        fields: [\"name\"]\n                    }),\n                    triggerAction: \"all\",\n                    typeAhead: true,\n                    queryMode: \"local\",\n                    anyMatch: true,\n                    editable: true,\n                    forceSelection: false,\n                    displayField: 'name',\n                    valueField: 'name',\n                    matchFieldWidth: false,\n                    listConfig: {\n                        maxWidth: 400\n                    }\n                })\n            },\n            {\n                text: t(\"template\"),\n                flex: 50,\n                sortable: true,\n                dataIndex: 'template',\n                editor: new Ext.form.ComboBox({\n                    store: new Ext.data.Store({\n                        autoDestroy: true,\n                        proxy: {\n                            type: 'ajax',\n                            url: Routing.generate('pimcore_admin_misc_getavailabletemplates'),\n                            reader: {\n                                type: 'json',\n                                rootProperty: 'data'\n                            }\n                        },\n                        fields: [\"path\"]\n                    }),\n                    queryMode: 'local',\n                    triggerAction: \"all\",\n                    displayField: 'path',\n                    valueField: 'path',\n                    matchFieldWidth: false,\n                    listConfig: {\n                        maxWidth: 400\n                    }\n                })\n            },\n            {\n                text: t(\"type\"),\n                flex: 50,\n                sortable: true,\n                dataIndex: 'type',\n                editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [\"page\", \"snippet\", \"email\", \"newsletter\", \"printpage\", \"printcontainer\"]\n                })\n            },\n            {\n                text: t(\"priority\"),\n                flex: 50,\n                sortable: true,\n                dataIndex: 'priority',\n                editor: new Ext.form.ComboBox({\n                    store: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                    mode: \"local\",\n                    editable: false,\n                    triggerAction: \"all\"\n                })\n            },\n            {\n                xtype: 'checkcolumn',\n                text: t(\"static\"),\n                dataIndex: 'staticGeneratorEnabled',\n                width: 50,\n                renderer: function (value, metaData, record) {\n                    return (record.get('type') !== \"page\") ? '' : this.defaultRenderer(value, metaData);\n                },\n                listeners: {\n                    beforecheckchange: function (el, rowIndex, checked, record, eOpts) {\n                        if(!record.data.writeable) {\n                            pimcore.helpers.showNotification(t(\"info\"), t(\"config_not_writeable\"), \"info\");\n                            return false;\n                        }\n                        if (this.store.getAt(rowIndex).get(\"type\") !== \"page\") {\n                            record.set('staticGeneratorEnabled', false);\n                            return false;\n                        }\n                    }.bind(this),\n                    checkChange: function (column, rowIndex, checked, eOpts) {\n                        var record = this.store.getAt(rowIndex);\n                        record.set('staticGeneratorEnabled', checked);\n                    }.bind(this)\n                }\n            },\n            {\n                text: t(\"creationDate\"),\n                sortable: true,\n                dataIndex: 'creationDate',\n                editable: false,\n                width: 130,\n                hidden: true,\n                renderer: function (d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                text: t(\"modificationDate\"),\n                sortable: true,\n                dataIndex: 'modificationDate',\n                editable: false,\n                width: 130,\n                hidden: true,\n                renderer: function (d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    getClass: function (v, meta, rec) {\n                        var klass = \"pimcore_action_column \";\n                        if (rec.data.writeable) {\n                            klass += \"pimcore_icon_minus\";\n                        }\n                        return klass;\n                    },\n                    tooltip: t('delete'),\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('document_type'),\n                            Ext.util.Format.htmlEncode(data.data.name),\n                            function () {\n                                grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            }, {\n                xtype: 'actioncolumn',\n                menuText: t('translate'),\n                width: 30,\n                items: [{\n                    tooltip: t('translate'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/collaboration.svg\",\n                    handler: function (grid, rowIndex) {\n                        var rec = grid.getStore().getAt(rowIndex);\n                        try {\n                            pimcore.globalmanager.get(\"translationdomainmanager\").activate(rec.data.name);\n                        }\n                        catch (e) {\n                            pimcore.globalmanager.add(\"translationdomainmanager\",\n                                new pimcore.settings.translation.domain(\"admin\",rec.data.name));\n                        }\n                    }.bind(this)\n                }]\n            }\n        ];\n\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function (editor, context, eOpts) {\n                    if (!context.record.data.writeable) {\n                        return false;\n                    }\n                }\n            }\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            bodyCls: \"pimcore_editable_grid\",\n            store: this.store,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            columnLines: true,\n            trackMouseOver: true,\n            stripeRows: true,\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.rowEditing\n            ],\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\",\n                        disabled: !pimcore.settings['document-types-writeable']\n                    }\n                ]\n            },\n            viewConfig: {\n                forceFit: true,\n                getRowClass: function (record, rowIndex) {\n                    return record.data.writeable ? '' : 'pimcore_grid_row_disabled';\n                }\n            }\n        });\n\n        const prepareDocumentTypesGrid = new CustomEvent(pimcore.events.prepareDocumentTypesGrid, {\n            detail: {\n                grid: this.grid,\n                object: this\n            }\n        });\n\n        document.dispatchEvent(prepareDocumentTypesGrid);\n\n        return this.grid;\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            name: t('new_document_type'),\n            type: \"page\"\n        });\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/docTypes.js"], "buggy_code_start_loc": [231], "buggy_code_end_loc": [233], "fixing_code_start_loc": [231], "fixing_code_end_loc": [235], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.19.", "other": {"cve": {"id": "CVE-2023-1429", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-16T12:15:11.187", "lastModified": "2023-03-22T18:07:30.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.19."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.19", "matchCriteriaId": "9F355AEC-329F-43D1-A3D7-44C2481A1999"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/7588c336edb24050656111b89d69e69cc9feb5f5", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e0829fea-e458-47b8-84a3-a74476d9638f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/7588c336edb24050656111b89d69e69cc9feb5f5"}}