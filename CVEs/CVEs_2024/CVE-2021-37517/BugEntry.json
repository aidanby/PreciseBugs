{"buggy_code": ["<?php\n/* Copyright (C) 2002-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2020 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2018 Regis Houssin        <regis.houssin@inodbox.com>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011      Herve Prot           <herve.prot@symeos.com>\n * Copyright (C) 2012-2018 Juanjo Menent        <jmenent@2byte.es>\n * Copyright (C) 2013      Florian Henry        <florian.henry@open-concept.pro>\n * Copyright (C) 2013-2016 Alexandre Spangaro   <aspangaro@open-dsi.fr>\n * Copyright (C) 2015-2017 Jean-Fran\u00e7ois Ferry  <jfefe@aternatik.fr>\n * Copyright (C) 2015      Ari Elbaz (elarifr)  <github@accedinfo.com>\n * Copyright (C) 2015-2018 Charlene Benke       <charlie@patas-monkey.com>\n * Copyright (C) 2016      Rapha\u00ebl Doursenaud   <rdoursenaud@gpcsolutions.fr>\n * Copyright (C) 2018-2021  Fr\u00e9d\u00e9ric France     <frederic.france@netlogic.fr>\n * Copyright (C) 2018       David Beniamine     <David.Beniamine@Tetras-Libre.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/card.php\n *       \\brief      Tab of user card\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/usergroup.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/usergroups.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formadmin.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\nif (!empty($conf->ldap->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/ldap.class.php';\n}\nif (!empty($conf->adherent->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n}\nif (!empty($conf->categorie->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n}\nif (!empty($conf->stock->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/product/class/html.formproduct.class.php';\n}\n\n$id = GETPOST('id', 'int');\n$action\t\t= GETPOST('action', 'aZ09');\n$mode = GETPOST('mode', 'alpha');\n$confirm\t= GETPOST('confirm', 'alpha');\n$group = GETPOST(\"group\", \"int\", 3);\n$cancel\t\t= GETPOST('cancel', 'alpha');\n$contextpage = GETPOST('contextpage', 'aZ') ?GETPOST('contextpage', 'aZ') : 'useracard'; // To manage different context of search\n\n$dateemployment = dol_mktime(0, 0, 0, GETPOST('dateemploymentmonth', 'int'), GETPOST('dateemploymentday', 'int'), GETPOST('dateemploymentyear', 'int'));\n$dateemploymentend = dol_mktime(0, 0, 0, GETPOST('dateemploymentendmonth', 'int'), GETPOST('dateemploymentendday', 'int'), GETPOST('dateemploymentendyear', 'int'));\n$datestartvalidity = dol_mktime(0, 0, 0, GETPOST('datestartvaliditymonth', 'int'), GETPOST('datestartvalidityday', 'int'), GETPOST('datestartvalidityyear', 'int'));\n$dateendvalidity = dol_mktime(0, 0, 0, GETPOST('dateendvaliditymonth', 'int'), GETPOST('dateendvalidityday', 'int'), GETPOST('dateendvalidityyear', 'int'));\n$dateofbirth = dol_mktime(0, 0, 0, GETPOST('dateofbirthmonth', 'int'), GETPOST('dateofbirthday', 'int'), GETPOST('dateofbirthyear', 'int'));\n\n// Define value to know what current user can do on users\n$canadduser = (!empty($user->admin) || $user->rights->user->user->creer);\n$canreaduser = (!empty($user->admin) || $user->rights->user->user->lire);\n$canedituser = (!empty($user->admin) || $user->rights->user->user->creer);\n$candisableuser = (!empty($user->admin) || $user->rights->user->user->supprimer);\n$canreadgroup = $canreaduser;\n$caneditgroup = $canedituser;\nif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS)) {\n\t$canreadgroup = (!empty($user->admin) || $user->rights->user->group_advance->read);\n\t$caneditgroup = (!empty($user->admin) || $user->rights->user->group_advance->write);\n}\n\n$childids = $user->getAllChildIds(1);\t// For later, test on salary visibility\n\n// Define value to know what current user can do on properties of edited user\nif ($id) {\n\t// $user is the current logged user, $id is the user we want to edit\n\t$caneditfield = ((($user->id == $id) && $user->rights->user->self->creer)\n\t|| (($user->id != $id) && $user->rights->user->user->creer));\n\t$caneditpassword = ((($user->id == $id) && $user->rights->user->self->password)\n\t|| (($user->id != $id) && $user->rights->user->user->password));\n}\n\n// Security check\n$socid = 0;\nif ($user->socid > 0) {\n\t$socid = $user->socid;\n}\n$feature2 = 'user';\n$result = restrictedArea($user, 'user', $id, 'user', $feature2);\n\nif ($user->id <> $id && !$canreaduser) {\n\taccessforbidden();\n}\n\n// Load translation files required by page\n$langs->loadLangs(array('users', 'companies', 'ldap', 'admin', 'hrm', 'stocks', 'other'));\n\n$object = new User($db);\n$extrafields = new ExtraFields($db);\n\n// fetch optionals attributes and labels\n$extrafields->fetch_name_optionals_label($object->table_element);\n\n$socialnetworks = getArrayOfSocialNetworks();\n\n// Initialize technical object to manage hooks. Note that conf->hooks_modules contains array\n$hookmanager->initHooks(array('usercard', 'globalcard'));\n\n$error = 0;\n\n\n/**\n * Actions\n */\n\n$parameters = array('id' => $id, 'socid' => $socid, 'group' => $group, 'caneditgroup' => $caneditgroup);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\nif (empty($reshook)) {\n\tif ($action == 'confirm_disable' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id != $user->id) {\t\t// A user can't disable itself\n\t\t\t$object->fetch($id);\n\t\t\tif ($object->admin && empty($user->admin)) {\n\t\t\t\t// If user to delete is an admin user and if logged user is not admin, we deny the operation.\n\t\t\t\t$error++;\n\t\t\t\tsetEventMessages($langs->trans(\"OnlyAdminUsersCanDisableAdminUsers\"), null, 'errors');\n\t\t\t} else {\n\t\t\t\t$object->setstatus(0);\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'confirm_enable' && $confirm == \"yes\" && $candisableuser) {\n\t\t$error = 0;\n\n\t\tif ($id != $user->id) {\n\t\t\t$object->fetch($id);\n\n\t\t\tif (!empty($conf->file->main_limit_users)) {\n\t\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$object->setstatus(1);\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'confirm_delete' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id != $user->id) {\n\t\t\tif (!GETPOSTISSET('token')) {\n\t\t\t\tprint 'Error, token required for this critical operation';\n\t\t\t\texit;\n\t\t\t}\n\n\t\t\t$object = new User($db);\n\t\t\t$object->fetch($id);\n\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t$result = $object->delete($user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\tsetEventMessages($langs->trans(\"ErrorUserCannotBeDelete\"), null, 'errors');\n\t\t\t} else {\n\t\t\t\tsetEventMessages($langs->trans(\"RecordDeleted\"), null);\n\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/user/list.php?restore_lastsearch_values=1\");\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action Add user\n\tif ($action == 'add' && $canadduser) {\n\t\t$error = 0;\n\n\t\tif (!GETPOST(\"lastname\")) {\n\t\t\t$error++;\n\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\"; // Go back to create page\n\t\t}\n\t\tif (!GETPOST(\"login\")) {\n\t\t\t$error++;\n\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\"; // Go back to create page\n\t\t}\n\n\t\tif (!empty($conf->file->main_limit_users)) { // If option to limit users is set\n\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t$error++;\n\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t$action = \"create\"; // Go back to create page\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->civility_code = GETPOST(\"civility_code\", 'aZ09');\n\t\t\t$object->lastname = GETPOST(\"lastname\", 'alphanohtml');\n\t\t\t$object->firstname = GETPOST(\"firstname\", 'alphanohtml');\n\t\t\t$object->login = GETPOST(\"login\", 'alphanohtml');\n\t\t\t$object->api_key = GETPOST(\"api_key\", 'alphanohtml');\n\t\t\t$object->gender = GETPOST(\"gender\", 'aZ09');\n\t\t\t$object->admin = GETPOST(\"admin\", 'int');\n\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\n\t\t\t//$object->skype = GETPOST(\"skype\", 'alphanohtml');\n\t\t\t//$object->twitter = GETPOST(\"twitter\", 'alphanohtml');\n\t\t\t//$object->facebook = GETPOST(\"facebook\", 'alphanohtml');\n\t\t\t//$object->linkedin = GETPOST(\"linkedin\", 'alphanohtml');\n\t\t\tif (!empty($conf->socialnetworks->enabled)) {\n\t\t\t\t$object->socialnetworks = array();\n\t\t\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t\t\tif (GETPOST($key, 'alphanohtml')) {\n\t\t\t\t\t\t$object->socialnetworks[$key] = GETPOST($key, 'alphanohtml');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alphanohtml'));\n\t\t\t$object->job = GETPOST(\"job\", 'alphanohtml');\n\t\t\t$object->signature = GETPOST(\"signature\", 'restricthtml');\n\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\", 'alphanohtml');\n\t\t\t$object->note = GETPOST(\"note\", 'restricthtml');\n\t\t\t$object->note_private = GETPOST(\"note\", 'restricthtml');\n\t\t\t$object->ldap_sid = GETPOST(\"ldap_sid\", 'alphanohtml');\n\t\t\t$object->fk_user = GETPOST(\"fk_user\", 'int') > 0 ? GETPOST(\"fk_user\", 'int') : 0;\n\t\t\t$object->fk_user_expense_validator = GETPOST(\"fk_user_expense_validator\", 'int') > 0 ? GETPOST(\"fk_user_expense_validator\", 'int') : 0;\n\t\t\t$object->fk_user_holiday_validator = GETPOST(\"fk_user_holiday_validator\", 'int') > 0 ? GETPOST(\"fk_user_holiday_validator\", 'int') : 0;\n\t\t\t$object->employee = GETPOST('employee', 'alphanohtml');\n\n\t\t\t$object->thm = GETPOST(\"thm\", 'alphanohtml') != '' ? GETPOST(\"thm\", 'alphanohtml') : '';\n\t\t\t$object->thm = price2num($object->thm);\n\t\t\t$object->tjm = GETPOST(\"tjm\", 'alphanohtml') != '' ? GETPOST(\"tjm\", 'alphanohtml') : '';\n\t\t\t$object->tjm = price2num($object->tjm);\n\t\t\t$object->salary = GETPOST(\"salary\", 'alphanohtml') != '' ? GETPOST(\"salary\", 'alphanohtml') : '';\n\t\t\t$object->salary = price2num($object->salary);\n\t\t\t$object->salaryextra = GETPOST(\"salaryextra\", 'alphanohtml') != '' ? GETPOST(\"salaryextra\", 'alphanohtml') : '';\n\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\", 'alphanohtml') != '' ? GETPOST(\"weeklyhours\", 'alphanohtml') : '';\n\n\t\t\t$object->color = GETPOST(\"color\", 'alphanohtml') != '' ? GETPOST(\"color\", 'alphanohtml') : '';\n\n\t\t\t$object->dateemployment = $dateemployment;\n\t\t\t$object->dateemploymentend = $dateemploymentend;\n\t\t\t$object->datestartvalidity = $datestartvalidity;\n\t\t\t$object->dateendvalidity = $dateendvalidity;\n\t\t\t$object->birth = $dateofbirth;\n\n\t\t\t$object->fk_warehouse = GETPOST('fk_warehouse', 'int');\n\n\t\t\t$object->lang = GETPOST('default_lang', 'aZ09');\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t// Set entity property\n\t\t\t$entity = GETPOST('entity', 'int');\n\t\t\tif (!empty($conf->multicompany->enabled)) {\n\t\t\t\tif (GETPOST('superadmin', 'int')) {\n\t\t\t\t\t$object->entity = 0;\n\t\t\t\t} else {\n\t\t\t\t\tif (!empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t\t\t$object->entity = 1; // all users are forced into master entity\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t/*if ($user->admin && $user->entity == 0 && GETPOST(\"admin\",'alpha'))\n\t\t\t\t{\n\t\t\t\t}*/\n\t\t\t}\n\n\t\t\t$db->begin();\n\n\t\t\t$id = $object->create($user);\n\t\t\tif ($id > 0) {\n\t\t\t\tif (GETPOST('password')) {\n\t\t\t\t\t$object->setPassword($user, GETPOST('password'));\n\t\t\t\t}\n\t\t\t\tif (!empty($conf->categorie->enabled)) {\n\t\t\t\t\t// Categories association\n\t\t\t\t\t$usercats = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($usercats);\n\t\t\t\t}\n\t\t\t\t$db->commit();\n\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t$db->rollback();\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t$action = \"create\"; // Go back to create page\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action add usergroup\n\tif (($action == 'addgroup' || $action == 'removegroup') && $caneditgroup) {\n\t\tif ($group) {\n\t\t\t$editgroup = new UserGroup($db);\n\t\t\t$editgroup->fetch($group);\n\t\t\t$editgroup->oldcopy = clone $editgroup;\n\n\t\t\t$object->fetch($id);\n\t\t\tif ($action == 'addgroup') {\n\t\t\t\t$result = $object->SetInGroup($group, $editgroup->entity);\n\t\t\t}\n\t\t\tif ($action == 'removegroup') {\n\t\t\t\t$result = $object->RemoveFromGroup($group, $editgroup->entity);\n\t\t\t}\n\n\t\t\tif ($result > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'update' && !$cancel) {\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\tif ($caneditfield) {    // Case we can edit all field\n\t\t\t$error = 0;\n\n\t\t\tif (!GETPOST(\"lastname\", 'alpha')) {\n\t\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\"; // Go back to create page\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\tif (!GETPOST(\"login\", 'alpha')) {\n\t\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\"; // Go back to create page\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t$db->begin();\n\n\t\t\t\t$object->civility_code = GETPOST(\"civility_code\", 'aZ09');\n\t\t\t\t$object->lastname = GETPOST(\"lastname\", 'alphanohtml');\n\t\t\t\t$object->firstname = GETPOST(\"firstname\", 'alphanohtml');\n\t\t\t\t$object->login = GETPOST(\"login\", 'alphanohtml');\n\t\t\t\t$object->gender = GETPOST(\"gender\", 'aZ09');\n\t\t\t\t$object->pass = GETPOST(\"password\", 'none');\n\t\t\t\t$object->api_key = (GETPOST(\"api_key\", 'alphanohtml')) ? GETPOST(\"api_key\", 'alphanohtml') : $object->api_key;\n\t\t\t\tif (!empty($user->admin)) {\n\t\t\t\t\t$object->admin = GETPOST(\"admin\", \"int\"); // admin flag can only be set/unset by an admin user. A test is also done later when forging sql request\n\t\t\t\t}\n\t\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\t\t\t\t//$object->skype = GETPOST(\"skype\", 'alphanohtml');\n\t\t\t\t//$object->twitter = GETPOST(\"twitter\", 'alphanohtml');\n\t\t\t\t//$object->facebook = GETPOST(\"facebook\", 'alphanohtml');\n\t\t\t\t//$object->linkedin = GETPOST(\"linkedin\", 'alphanohtml');\n\t\t\t\tif (!empty($conf->socialnetworks->enabled)) {\n\t\t\t\t\t$object->socialnetworks = array();\n\t\t\t\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t\t\t\tif (GETPOST($key, 'alphanohtml')) {\n\t\t\t\t\t\t\t$object->socialnetworks[$key] = GETPOST($key, 'alphanohtml');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alphanohtml'));\n\t\t\t\t$object->job = GETPOST(\"job\", 'alphanohtml');\n\t\t\t\t$object->signature = GETPOST(\"signature\", 'restricthtml');\n\t\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\", 'alphanohtml');\n\t\t\t\t$object->openid = GETPOST(\"openid\", 'alphanohtml');\n\t\t\t\t$object->fk_user = GETPOST(\"fk_user\", 'int') > 0 ? GETPOST(\"fk_user\", 'int') : 0;\n\t\t\t\t$object->fk_user_expense_validator = GETPOST(\"fk_user_expense_validator\", 'int') > 0 ? GETPOST(\"fk_user_expense_validator\", 'int') : 0;\n\t\t\t\t$object->fk_user_holiday_validator = GETPOST(\"fk_user_holiday_validator\", 'int') > 0 ? GETPOST(\"fk_user_holiday_validator\", 'int') : 0;\n\t\t\t\t$object->employee = GETPOST('employee', 'int');\n\n\t\t\t\t$object->thm = GETPOST(\"thm\", 'alphanohtml') != '' ? GETPOST(\"thm\", 'alphanohtml') : '';\n\t\t\t\t$object->thm = price2num($object->thm);\n\t\t\t\t$object->tjm = GETPOST(\"tjm\", 'alphanohtml') != '' ? GETPOST(\"tjm\", 'alphanohtml') : '';\n\t\t\t\t$object->thm = price2num($object->thm);\n\t\t\t\t$object->salary = GETPOST(\"salary\", 'alphanohtml') != '' ? GETPOST(\"salary\", 'alphanohtml') : '';\n\t\t\t\t$object->salary = price2num($object->salary);\n\t\t\t\t$object->salaryextra = GETPOST(\"salaryextra\", 'alphanohtml') != '' ? GETPOST(\"salaryextra\", 'alphanohtml') : '';\n\t\t\t\t$object->salaryextra = price2num($object->salaryextra);\n\t\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\", 'alphanohtml') != '' ? GETPOST(\"weeklyhours\", 'alphanohtml') : '';\n\t\t\t\t$object->weeklyhours = price2num($object->weeklyhours);\n\n\t\t\t\t$object->color = GETPOST(\"color\", 'alphanohtml') != '' ? GETPOST(\"color\", 'alphanohtml') : '';\n\t\t\t\t$object->dateemployment = $dateemployment;\n\t\t\t\t$object->dateemploymentend = $dateemploymentend;\n\t\t\t\t$object->datestartvalidity = $datestartvalidity;\n\t\t\t\t$object->dateendvalidity = $dateendvalidity;\n\t\t\t\t$object->birth = $dateofbirth;\n\n\t\t\t\tif (!empty($conf->stock->enabled)) {\n\t\t\t\t\t$object->fk_warehouse = GETPOST('fk_warehouse', 'int');\n\t\t\t\t}\n\n\t\t\t\t$object->lang = GETPOST('default_lang', 'aZ09');\n\n\t\t\t\t// Do we update also ->entity ?\n\t\t\t\tif (!empty($conf->multicompany->enabled)) {\t// If multicompany is not enabled, we never update the entity of a user.\n\t\t\t\t\tif (!empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t\t\t$object->entity = 1; // all users are in master entity\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// A user should not be able to move a user into another entity. Only superadmin should be able to do this.\n\t\t\t\t\t\tif ($user->entity == 0 && $user->admin) {\n\t\t\t\t\t\t\tif (GETPOST(\"superadmin\")) {\n\t\t\t\t\t\t\t\t// We try to set the user as superadmin.\n\t\t\t\t\t\t\t\t$object->entity = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// We try to change the entity of user\n\t\t\t\t\t\t\t\t$object->entity = (GETPOSTISSET('entity') ? GETPOSTINT('entity') : $object->entity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\tif (GETPOST('deletephoto')) {\n\t\t\t\t\t$object->photo = '';\n\t\t\t\t}\n\t\t\t\tif (!empty($_FILES['photo']['name'])) {\n\t\t\t\t\t$isimage = image_format_supported($_FILES['photo']['name']);\n\t\t\t\t\tif ($isimage > 0) {\n\t\t\t\t\t\t$object->photo = dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorBadImageFormat\"), null, 'errors');\n\t\t\t\t\t\tdol_syslog($langs->transnoentities(\"ErrorBadImageFormat\"), LOG_INFO);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error) {\n\t\t\t\t\t$ret = $object->update($user);\n\t\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\tif ($db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS') {\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorLoginAlreadyExists\", $object->login), null, 'errors');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && GETPOSTISSET('contactid')) {\n\t\t\t\t\t$contactid = GETPOST('contactid', 'int');\n\t\t\t\t\t$socid = GETPOST('socid', 'int');\n\n\t\t\t\t\tif ($contactid > 0) {\t// The 'contactid' is used inpriority over the 'socid'\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($contactid);\n\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=\".((int) $contactid);\n\t\t\t\t\t\tif (!empty($contact->socid)) {\n\t\t\t\t\t\t\t$sql .= \", fk_soc=\".((int) $contact->socid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t} elseif ($socid > 0) {\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=NULL, fk_soc=\".((int) $socid);\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=NULL, fk_soc=NULL\";\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t}\n\t\t\t\t\tdol_syslog(\"usercard::update\", LOG_DEBUG);\n\t\t\t\t\t$resql = $db->query($sql);\n\t\t\t\t\tif (!$resql) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\tsetEventMessages($db->lasterror(), null, 'errors');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tif (GETPOST('deletephoto') && $object->oldcopy->photo) {\n\t\t\t\t\t\t$fileimg = $conf->user->dir_output.'/'.get_exdir(0, 0, 0, 0, $object, 'user').$object->oldcopy->photo;\n\t\t\t\t\t\t$dirthumbs = $conf->user->dir_output.'/'.get_exdir(0, 0, 0, 0, $object, 'user').'/thumbs';\n\t\t\t\t\t\tdol_delete_file($fileimg);\n\t\t\t\t\t\tdol_delete_dir_recursive($dirthumbs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($_FILES['photo']['tmp_name']) && trim($_FILES['photo']['tmp_name'])) {\n\t\t\t\t\t\t$dir = $conf->user->dir_output.'/'.get_exdir(0, 0, 0, 1, $object, 'user');\n\n\t\t\t\t\t\tdol_mkdir($dir);\n\n\t\t\t\t\t\tif (@is_dir($dir)) {\n\t\t\t\t\t\t\t$newfile = $dir.'/'.dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t\t\t\t$result = dol_move_uploaded_file($_FILES['photo']['tmp_name'], $newfile, 1, 0, $_FILES['photo']['error']);\n\n\t\t\t\t\t\t\tif (!$result > 0) {\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSaveFile\"), null, 'errors');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Create thumbs\n\t\t\t\t\t\t\t\t$object->addThumbs($newfile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToCreateDir\", $dir), $mesgs, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\t// Then we add the associated categories\n\t\t\t\t\t$categories = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($categories);\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tsetEventMessages($langs->trans(\"UserModified\"), null, 'mesgs');\n\t\t\t\t\t$db->commit();\n\n\t\t\t\t\t$login = $_SESSION[\"dol_login\"];\n\t\t\t\t\tif ($login && $login == $object->oldcopy->login && $object->oldcopy->login != $object->login) {    // Current user has changed its login\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\tsetEventMessages($langs->transnoentitiesnoconv(\"WarningYourLoginWasModifiedPleaseLogin\"), null, 'warnings');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$db->rollback();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($caneditpassword) {    // Case we can edit only password\n\t\t\t\tdol_syslog(\"Not allowed to change fields, only password\");\n\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\tif (GETPOST(\"password\", \"none\")) {\t// If pass is empty, we do not change it.\n\t\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t\t$ret = $object->setPassword($user, GETPOST(\"password\", \"none\"));\n\t\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Change password with a new generated one\n\tif ((($action == 'confirm_password' && $confirm == 'yes')\n\t\t\t|| ($action == 'confirm_passwordsend' && $confirm == 'yes')) && $caneditpassword\n\t) {\n\t\t$object->fetch($id);\n\n\t\t$newpassword = $object->setPassword($user, '');\n\t\tif ($newpassword < 0) {\n\t\t\t// Echec\n\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSetNewPassword\"), null, 'errors');\n\t\t} else {\n\t\t\t// Succes\n\t\t\tif ($action == 'confirm_passwordsend' && $confirm == 'yes') {\n\t\t\t\tif ($object->send_password($user, $newpassword) > 0) {\n\t\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedAndSentTo\", $object->email), null, 'mesgs');\n\t\t\t\t} else {\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedTo\", $newpassword), null, 'warnings');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action initialisation donnees depuis record LDAP\n\tif ($action == 'adduserldap' && $canadduser) {\n\t\t$selecteduser = GETPOST('users');\n\n\t\t$required_fields = array(\n\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t);\n\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0) {\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields = array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t$ldapusers = $ldap->getRecords($selecteduser, $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields);\n\t\t\t//print_r($ldapusers);\n\n\t\t\tif (is_array($ldapusers)) {\n\t\t\t\tforeach ($ldapusers as $key => $attribute) {\n\t\t\t\t\t$ldap_lastname = $attribute[$conf->global->LDAP_FIELD_NAME];\n\t\t\t\t\t$ldap_firstname = $attribute[$conf->global->LDAP_FIELD_FIRSTNAME];\n\t\t\t\t\t$ldap_login = $attribute[$conf->global->LDAP_FIELD_LOGIN];\n\t\t\t\t\t$ldap_loginsmb = $attribute[$conf->global->LDAP_FIELD_LOGIN_SAMBA];\n\t\t\t\t\t$ldap_pass = $attribute[$conf->global->LDAP_FIELD_PASSWORD];\n\t\t\t\t\t$ldap_pass_crypted = $attribute[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED];\n\t\t\t\t\t$ldap_phone = $attribute[$conf->global->LDAP_FIELD_PHONE];\n\t\t\t\t\t$ldap_fax = $attribute[$conf->global->LDAP_FIELD_FAX];\n\t\t\t\t\t$ldap_mobile = $attribute[$conf->global->LDAP_FIELD_MOBILE];\n\t\t\t\t\t$ldap_social['skype'] = $attribute[$conf->global->LDAP_FIELD_SKYPE];\n\t\t\t\t\t$ldap_social['twitter'] = $attribute[$conf->global->LDAP_FIELD_TWITTER];\n\t\t\t\t\t$ldap_social['facebook'] = $attribute[$conf->global->LDAP_FIELD_FACEBOOK];\n\t\t\t\t\t$ldap_social['linkedin'] = $attribute[$conf->global->LDAP_FIELD_LINKEDIN];\n\t\t\t\t\t$ldap_mail = $attribute[$conf->global->LDAP_FIELD_MAIL];\n\t\t\t\t\t$ldap_sid = $attribute[$conf->global->LDAP_FIELD_SID];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\t}\n\n\t// Actions to send emails\n\t$triggersendname = 'USER_SENTBYMAIL';\n\t$paramname = 'id'; // Name of param key to open the card\n\t$mode = 'emailfromuser';\n\t$trackid = 'use'.$id;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_sendmails.inc.php';\n\n\t// Actions to build doc\n\t$upload_dir = $conf->user->dir_output;\n\t$permissiontoadd = $user->rights->user->user->creer;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n}\n\n\n/*\n * View\n */\n\n$form = new Form($db);\n$formother = new FormOther($db);\n$formcompany = new FormCompany($db);\n$formadmin = new FormAdmin($db);\n$formfile = new FormFile($db);\nif (!empty($conf->stock->enabled)) {\n\t$formproduct = new FormProduct($db);\n}\n\nllxHeader('', $langs->trans(\"UserCard\"));\n\nif ($action == 'create' || $action == 'adduserldap') {\n\tprint load_fiche_titre($langs->trans(\"NewUser\"), '', 'user');\n\n\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"CreateInternalUserDesc\").\"</span><br>\\n\";\n\tprint \"<br>\";\n\n\n\tif (!empty($conf->ldap->enabled) && (isset($conf->global->LDAP_SYNCHRO_ACTIVE) && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr')) {\n\t\t// Show form to add an account from LDAP if sync LDAP -> Dolibarr is set\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0) {\n\t\t\t$required_fields = array(\n\t\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t\t$conf->global->LDAP_FIELD_FULLNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t\t);\n\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields = array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t// Get from LDAP database an array of results\n\t\t\t$ldapusers = $ldap->getRecords('*', $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields, 1);\n\n\t\t\tif (is_array($ldapusers)) {\n\t\t\t\t$liste = array();\n\t\t\t\tforeach ($ldapusers as $key => $ldapuser) {\n\t\t\t\t\t// Define the label string for this user\n\t\t\t\t\t$label = '';\n\t\t\t\t\tforeach ($required_fields as $value) {\n\t\t\t\t\t\tif ($value === $conf->global->LDAP_FIELD_PASSWORD || $value === $conf->global->LDAP_FIELD_PASSWORD_CRYPTED) {\n\t\t\t\t\t\t\t$label .= $value.\"=******* \";\n\t\t\t\t\t\t} elseif ($value) {\n\t\t\t\t\t\t\t$label .= $value.\"=\".$ldapuser[$value].\" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$liste[$key] = $label;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t}\n\t\t} else {\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\n\t\t// If user list is full, we show drop-down list\n\t\tprint \"\\n\\n<!-- Form liste LDAP debut -->\\n\";\n\n\t\tprint '<form name=\"add_user_ldap\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"post\">';\n\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\tprint '<table class=\"border centpercent\"><tr>';\n\t\tprint '<td width=\"160\">';\n\t\tprint $langs->trans(\"LDAPUsers\");\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input type=\"hidden\" name=\"action\" value=\"adduserldap\">';\n\t\tif (is_array($liste) && count($liste)) {\n\t\t\tprint $form->selectarray('users', $liste, '', 1, 0, 0, '', 0, 0, 0, '', 'maxwidth500');\n\t\t\tprint ajax_combobox('users');\n\t\t}\n\t\tprint '</td><td class=\"center\">';\n\t\tprint '<input type=\"submit\" class=\"button\" value=\"'.dol_escape_htmltag($langs->trans('Get')).'\"'.(count($liste) ? '' : ' disabled').'>';\n\t\tprint '</td></tr></table>';\n\t\tprint '</form>';\n\n\t\tprint \"\\n<!-- Form liste LDAP fin -->\\n\\n\";\n\t\tprint '<br>';\n\t}\n\n\n\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'\" method=\"POST\" name=\"createuser\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\tif (!empty($ldap_sid)) {\n\t\tprint '<input type=\"hidden\" name=\"ldap_sid\" value=\"'.dol_escape_htmltag($ldap_sid).'\">';\n\t}\n\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n\n\tprint dol_get_fiche_head('', '', '', 0, '');\n\n\tprint dol_set_focus('#lastname');\n\n\tprint '<table class=\"border centpercent\">';\n\n\t// Civility\n\tprint '<tr><td><label for=\"civility_code\">'.$langs->trans(\"UserTitle\").'</label></td><td colspan=\"3\">';\n\tprint $formcompany->select_civility(GETPOSTISSET(\"civility_code\") ? GETPOST(\"civility_code\", 'aZ09') : $object->civility_code, 'civility_code');\n\tprint '</td></tr>';\n\n\t// Lastname\n\tprint '<tr>';\n\tprint '<td class=\"titlefieldcreate\"><span class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</span></td>';\n\tprint '<td>';\n\tif (!empty($ldap_lastname)) {\n\t\tprint '<input type=\"hidden\" id=\"lastname\" name=\"lastname\" value=\"'.dol_escape_htmltag($ldap_lastname).'\">';\n\t\tprint $ldap_lastname;\n\t} else {\n\t\tprint '<input class=\"minwidth100\" type=\"text\" id=\"lastname\" name=\"lastname\" value=\"'.dol_escape_htmltag(GETPOST('lastname', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Firstname\n\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td>';\n\tprint '<td>';\n\tif (!empty($ldap_firstname)) {\n\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.dol_escape_htmltag($ldap_firstname).'\">';\n\t\tprint $ldap_firstname;\n\t} else {\n\t\tprint '<input class=\"minwidth100\" type=\"text\" name=\"firstname\" value=\"'.dol_escape_htmltag(GETPOST('firstname', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Login\n\tprint '<tr><td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\tprint '<td>';\n\tif (!empty($ldap_login)) {\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.dol_escape_htmltag($ldap_login).'\">';\n\t\tprint $ldap_login;\n\t} elseif (!empty($ldap_loginsmb)) {\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.dol_escape_htmltag($ldap_loginsmb).'\">';\n\t\tprint $ldap_loginsmb;\n\t} else {\n\t\tprint '<input class=\"maxwidth200\" maxsize=\"24\" type=\"text\" name=\"login\" value=\"'.dol_escape_htmltag(GETPOST('login', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t$generated_password = '';\n\tif (empty($ldap_sid)) {    // ldap_sid is for activedirectory\n\t\t$generated_password = getRandomPassword(false);\n\t}\n\t$password = (GETPOSTISSET('password') ?GETPOST('password') : $generated_password);\n\n\t// Administrator\n\tif (!empty($user->admin)) {\n\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\tprint '<td>';\n\t\tprint $form->selectyesno('admin', GETPOST('admin'), 1);\n\n\t\tif (!empty($conf->multicompany->enabled) && !$user->entity) {\n\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\tprint '<script type=\"text/javascript\">\n                            $(function() {\n                                $(\"select[name=admin]\").change(function() {\n                                     if ( $(this).val() == 0 ) {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", true)\n                                            .prop(\"checked\", false);\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                     } else {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", false);\n                                     }\n                                });\n                                $(\"input[name=superadmin]\").change(function() {\n                                    if ( $(this).is(\":checked\") ) {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", true);\n                                    } else {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                    }\n                                });\n                            });\n                    </script>';\n\t\t\t}\n\t\t\t$checked = (GETPOST('superadmin', 'int') ? ' checked' : '');\n\t\t\t$disabled = (GETPOST('superadmin', 'int') ? '' : ' disabled');\n\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" id=\"superadmin\" value=\"1\"'.$checked.$disabled.' /> <label for=\"superadmin\">'.$langs->trans(\"SuperAdministrator\").'</span>';\n\t\t}\n\t\tprint \"</td></tr>\\n\";\n\t}\n\n\t// Gender\n\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\tprint '<td>';\n\t$arraygender = array('man'=>$langs->trans(\"Genderman\"), 'woman'=>$langs->trans(\"Genderwoman\"), 'other'=>$langs->trans(\"Genderother\"));\n\tprint $form->selectarray('gender', $arraygender, GETPOST('gender'), 1);\n\tprint '</td></tr>';\n\n\t// Employee\n\t$defaultemployee = '1';\n\tprint '<tr>';\n\tprint '<td>'.$langs->trans('Employee').'</td><td>';\n\tprint '<input type=\"checkbox\" name=\"employee\" value=\"1\"'.(GETPOST('employee') == '1' ? ' checked=\"checked\"' : ($defaultemployee ? ' checked=\"checked\"' : '')).'>';\n\t//print $form->selectyesno(\"employee\", (GETPOST('employee') != '' ?GETPOST('employee') : $defaultemployee), 1);\n\tprint '</td></tr>';\n\n\t// Hierarchy\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Expense report validator\n\tif (!empty($conf->expensereport->enabled)) {\n\t\tprint '<tr><td class=\"titlefieldcreate\">';\n\t\t$text = $langs->trans(\"ForceUserExpenseValidator\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_expense_validator, 'fk_user_expense_validator', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// Holiday request validator\n\tif (!empty($conf->holiday->enabled)) {\n\t\tprint '<tr><td class=\"titlefieldcreate\">';\n\t\t$text = $langs->trans(\"ForceUserHolidayValidator\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_holiday_validator, 'fk_user_holiday_validator', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// External user\n\tprint '<tr><td>'.$langs->trans(\"ExternalUser\").' ?</td>';\n\tprint '<td>';\n\tprint $form->textwithpicto($langs->trans(\"Internal\"), $langs->trans(\"InternalExternalDesc\"), 1, 'help', '', 0, 2);\n\tprint '</td></tr>';\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// Date validity\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"RangeOfLoginValidity\").'</td>';\n\tprint '<td>';\n\tprint $form->selectDate($datestartvalidity, 'datestartvalidity', 0, 0, 1, 'formdatestartvalidity', 1, 1);\n\n\tprint ' &nbsp; ';\n\n\tprint $form->selectDate($dateendvalidity, 'dateendvalidity', 0, 0, 1, 'formdateendvalidity', 1, 0);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Password\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Password\").'</td>';\n\tprint '<td>';\n\t$valuetoshow = '';\n\tif (preg_match('/ldap/', $dolibarr_main_authentication)) {\n\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t}\n\tif (preg_match('/http/', $dolibarr_main_authentication)) {\n\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').$langs->trans(\"HTTPBasicPassword\");\n\t}\n\tif (preg_match('/dolibarr/', $dolibarr_main_authentication)) {\n\t\tif (!empty($ldap_pass)) {\t// For very old system comaptibilty. Now clear password can't be viewed from LDAP read\n\t\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').'<input type=\"hidden\" name=\"password\" value=\"'.$ldap_pass.'\">'; // Dolibarr password is preffiled with LDAP known password\n\t\t\t$valuetoshow .= preg_replace('/./i', '*', $ldap_pass);\n\t\t} else {\n\t\t\t// We do not use a field password but a field text to show new password to use.\n\t\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').'<input size=\"30\" maxsize=\"32\" type=\"text\" name=\"password\" value=\"'.$password.'\" autocomplete=\"new-password\">';\n\t\t}\n\t}\n\n\t// Other form for user password\n\t$parameters = array('valuetoshow' => $valuetoshow, 'password' => $password);\n\t$reshook = $hookmanager->executeHooks('printUserPasswordField', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tif ($reshook > 0) {\n\t\t$valuetoshow = $hookmanager->resPrint; // to replace\n\t} else {\n\t\t$valuetoshow .= $hookmanager->resPrint; // to add\n\t}\n\n\tprint $valuetoshow;\n\tprint '</td></tr>';\n\n\tif (!empty($conf->api->enabled)) {\n\t\t// API key\n\t\t//$generated_password = getRandomPassword(false);\n\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input class=\"minwidth300\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.GETPOST('api_key', 'alphanohtml').'\" autocomplete=\"off\">';\n\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\t}\n\t\tprint '</td></tr>';\n\t} else {\n\t\t// PARTIAL WORKAROUND\n\t\t$generated_fake_api_key = getRandomPassword(false);\n\t\tprint '<input type=\"hidden\" name=\"api_key\" value=\"'.$generated_fake_api_key.'\">';\n\t}\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// Address\n\tprint '<tr><td class=\"tdtop titlefieldcreate\">'.$form->editfieldkey('Address', 'address', '', $object, 0).'</td>';\n\tprint '<td><textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\tprint $object->address;\n\tprint '</textarea></td></tr>';\n\n\t// Zip\n\tprint '<tr><td>'.$form->editfieldkey('Zip', 'zipcode', '', $object, 0).'</td><td>';\n\tprint $formcompany->select_ziptown($object->zip, 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\tprint '</td></tr>';\n\n\t// Town\n\tprint '<tr><td>'.$form->editfieldkey('Town', 'town', '', $object, 0).'</td><td>';\n\tprint $formcompany->select_ziptown($object->town, 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\tprint '</td></tr>';\n\n\t// Country\n\tprint '<tr><td>'.$form->editfieldkey('Country', 'selectcountry_id', '', $object, 0).'</td><td class=\"maxwidthonsmartphone\">';\n\tprint img_picto('', 'country', 'class=\"paddingrightonly\"');\n\tprint $form->select_country((GETPOST('country_id') != '' ?GETPOST('country_id') : $object->country_id));\n\tif ($user->admin) {\n\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t}\n\tprint '</td></tr>';\n\n\t// State\n\tif (empty($conf->global->USER_DISABLE_STATE)) {\n\t\tprint '<tr><td>'.$form->editfieldkey('State', 'state_id', '', $object, 0).'</td><td class=\"maxwidthonsmartphone\">';\n\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\tprint $formcompany->select_state($object->state_id, $object->country_code, 'state_id');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Tel\n\tprint '<tr><td>'.$langs->trans(\"PhonePro\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_phoning');\n\tif (!empty($ldap_phone)) {\n\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.dol_escape_htmltag($ldap_phone).'\">';\n\t\tprint $ldap_phone;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"office_phone\" value=\"'.dol_escape_htmltag(GETPOST('office_phone', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Tel portable\n\tprint '<tr><td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_phoning_mobile');\n\tif (!empty($ldap_mobile)) {\n\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.dol_escape_htmltag($ldap_mobile).'\">';\n\t\tprint $ldap_mobile;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"user_mobile\" value=\"'.dol_escape_htmltag(GETPOST('user_mobile', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Fax\n\tprint '<tr><td>'.$langs->trans(\"Fax\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_phoning_fax');\n\tif (!empty($ldap_fax)) {\n\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.dol_escape_htmltag($ldap_fax).'\">';\n\t\tprint $ldap_fax;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"office_fax\" value=\"'.dol_escape_htmltag(GETPOST('office_fax', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// EMail\n\tprint '<tr><td'.(!empty($conf->global->USER_MAIL_REQUIRED) ? ' class=\"fieldrequired\"' : '').'>'.$langs->trans(\"EMail\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_email');\n\tif (!empty($ldap_mail)) {\n\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.dol_escape_htmltag($ldap_mail).'\">';\n\t\tprint $ldap_mail;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"email\" class=\"maxwidth500 widthcentpercentminusx\" value=\"'.dol_escape_htmltag(GETPOST('email', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\tif (!empty($conf->socialnetworks->enabled)) {\n\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\tif ($value['active']) {\n\t\t\t\tprint '<tr><td>'.$langs->trans($value['label']).'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($value['icon'])) {\n\t\t\t\t\tprint '<span class=\"fa '.$value['icon'].'\"></span>';\n\t\t\t\t}\n\t\t\t\tif (!empty($ldap_social[$key])) {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$ldap_social[$key].'\">';\n\t\t\t\t\tprint $ldap_social[$key];\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"'.$key.'\" value=\"'.GETPOST($key, 'alphanohtml').'\">';\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\t// if social network is not active but value exist we do not want to loose it\n\t\t\t\tif (!empty($ldap_social[$key])) {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$ldap_social[$key].'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.GETPOST($key, 'alphanohtml').'\">';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Accountancy code\n\tif (!empty($conf->accounting->enabled)) {\n\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input type=\"text\" name=\"accountancy_code\" value=\"'.dol_escape_htmltag(GETPOST('accountancy_code', 'alphanohtml')).'\">';\n\t\tprint '</td></tr>';\n\t}\n\n\t// User color\n\tif (!empty($conf->agenda->enabled)) {\n\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\tprint '<td>';\n\t\tprint $formother->selectColor(GETPOSTISSET('color') ?GETPOST('color', 'alphanohtml') : $object->color, 'color', null, 1, '', 'hideifnotset');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Categories\n\tif (!empty($conf->categorie->enabled) && !empty($user->rights->categorie->lire)) {\n\t\tprint '<tr><td>'.$form->editfieldkey('Categories', 'usercats', '', $object, 0).'</td><td colspan=\"3\">';\n\t\t$cate_arbo = $form->select_all_categories('user', null, 'parent', null, null, 1);\n\t\tprint img_picto('', 'category').$form->multiselectarray('usercats', $cate_arbo, GETPOST('usercats', 'array'), null, null, null, null, '90%');\n\t\tprint \"</td></tr>\";\n\t}\n\n\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\tprint '<tr><td>'.$form->editfieldkey('DefaultLang', 'default_lang', '', $object, 0, 'string', '', 0, 0, 'id', $langs->trans(\"WarningNotLangOfInterface\", $langs->transnoentitiesnoconv(\"UserGUISetup\"))).'</td>';\n\t\tprint '<td colspan=\"3\" class=\"maxwidthonsmartphone\">'.\"\\n\";\n\t\tprint img_picto('', 'language').$formadmin->select_language(GETPOST('default_lang', 'alpha') ?GETPOST('default_lang', 'alpha') : ($object->lang ? $object->lang : ''), 'default_lang', 0, 0, 1, 0, 0, 'maxwidth200onsmartphone');\n\t\tprint '</td>';\n\t\tprint '</tr>';\n\t}\n\n\t// Multicompany\n\tif (!empty($conf->multicompany->enabled) && is_object($mc)) {\n\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\tif (!method_exists($mc, 'formObjectOptions')) {\n\t\t\tif (empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && !$user->entity) {\t// condition must be same for create and edit mode\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t\t\t\t print \"<td>\".$mc->select_entities($conf->entity);\n\t\t\t\t print \"</td></tr>\\n\";\n\t\t\t} else {\n\t\t\t\t print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t}\n\t\t}\n\t}\n\n\t// Other attributes\n\t$parameters = array('colspan' => ' colspan=\"3\"');\n\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_add.tpl.php';\n\n\t// Note\n\tprint '<tr><td class=\"tdtop\">';\n\tprint $langs->trans(\"Note\");\n\tprint '</td><td>';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor = new DolEditor('note', GETPOSTISSET('note') ? GETPOST('note', 'restricthtml') : '', '', 120, 'dolibarr_notes', '', false, true, getDolGlobalString('FCKEDITOR_ENABLE_SOCIETE'), ROWS_3, '90%');\n\t$doleditor->Create();\n\tprint \"</td></tr>\\n\";\n\n\t// Signature\n\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\tprint '<td class=\"wordbreak\">';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor = new DolEditor('signature', GETPOST('signature', 'restricthtml'), '', 138, 'dolibarr_notes', 'In', true, true, empty($conf->global->FCKEDITOR_ENABLE_USERSIGN) ? 0 : 1, ROWS_4, '90%');\n\tprint $doleditor->Create(1);\n\tprint '</td></tr>';\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t// Default warehouse\n\tif (!empty($conf->stock->enabled) && !empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER)) {\n\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\tprint $formproduct->selectWarehouses($object->fk_warehouse, 'fk_warehouse', 'warehouseopen', 1);\n\t\tprint '</td></tr>';\n\t}\n\n\t// Position/Job\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\tprint '<td>';\n\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"job\" value=\"'.dol_escape_htmltag(GETPOST('job', 'alphanohtml')).'\">';\n\tprint '</td></tr>';\n\n\tif ((!empty($conf->salaries->enabled) && !empty($user->rights->salaries->read) && in_array($id, $childids))\n\t\t|| (!empty($conf->salaries->enabled) && !empty($user->rights->salaries->readall))\n\t\t|| (!empty($conf->hrm->enabled) && !empty($user->rights->hrm->employee->read))) {\n\t\t$langs->load(\"salaries\");\n\n\t\t// THM\n\t\tprint '<tr><td>';\n\t\t$text = $langs->trans(\"THM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.dol_escape_htmltag(GETPOST('thm')).'\"> '.$langs->getCurrencySymbol($conf->currency);\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// TJM\n\t\tprint '<tr><td>';\n\t\t$text = $langs->trans(\"TJM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.dol_escape_htmltag(GETPOST('tjm')).'\"> '.$langs->getCurrencySymbol($conf->currency);\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// Salary\n\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\tprint '<td>';\n\t\tprint img_picto('', 'salary', 'class=\"pictofixedwidth paddingright\"').'<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.dol_escape_htmltag(GETPOST('salary')).'\"> '.$langs->getCurrencySymbol($conf->currency);\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// Weeklyhours\n\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\tprint '<td>';\n\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.dol_escape_htmltag(GETPOST('weeklyhours')).'\">';\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date employment\n\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\tprint '<td>';\n\tprint $form->selectDate($dateemployment, 'dateemployment', 0, 0, 1, 'formdateemployment', 1, 1);\n\n\tprint ' - ';\n\n\tprint $form->selectDate($dateemploymentend, 'dateemploymentend', 0, 0, 1, 'formdateemploymentend', 1, 0);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date birth\n\tprint '<tr><td>'.$langs->trans(\"DateOfBirth\").'</td>';\n\tprint '<td>';\n\tprint $form->selectDate($dateofbirth, 'dateofbirth', 0, 0, 1, 'createuser', 1, 0);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\tprint \"</table>\\n\";\n\n\tprint dol_get_fiche_end();\n\n\tprint '<div class=\"center\">';\n\tprint '<input class=\"button\" value=\"'.$langs->trans(\"CreateUser\").'\" name=\"create\" type=\"submit\">';\n\t//print '&nbsp; &nbsp; &nbsp;';\n\t//print '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button button-cancel\" type=\"submit\" name=\"cancel\">';\n\tprint '</div>';\n\n\tprint \"</form>\";\n} else {\n\t// View and edit mode\n\tif ($id > 0) {\n\t\t$res = $object->fetch($id, '', '', 1);\n\t\tif ($res < 0) {\n\t\t\tdol_print_error($db, $object->error);\n\t\t\texit;\n\t\t}\n\t\t$res = $object->fetch_optionals();\n\n\t\t// Check if user has rights\n\t\tif (empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t$object->getrights();\n\t\t\tif (empty($object->nb_rights) && $object->statut != 0 && empty($object->admin)) {\n\t\t\t\tsetEventMessages($langs->trans('UserHasNoPermissions'), null, 'warnings');\n\t\t\t}\n\t\t}\n\n\t\t// Connexion ldap\n\t\t// pour recuperer passDoNotExpire et userChangePassNextLogon\n\t\tif (!empty($conf->ldap->enabled) && !empty($object->ldap_sid)) {\n\t\t\t$ldap = new Ldap();\n\t\t\t$result = $ldap->connect_bind();\n\t\t\tif ($result > 0) {\n\t\t\t\t$userSearchFilter = '('.$conf->global->LDAP_FILTER_CONNECTION.'('.$ldap->getUserIdentifier().'='.$object->login.'))';\n\t\t\t\t$entries = $ldap->fetch($object->login, $userSearchFilter);\n\t\t\t\tif (!$entries) {\n\t\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t\t}\n\n\t\t\t\t$passDoNotExpire = 0;\n\t\t\t\t$userChangePassNextLogon = 0;\n\t\t\t\t$userDisabled = 0;\n\t\t\t\t$statutUACF = '';\n\n\t\t\t\t// Check options of user account\n\t\t\t\tif (count($ldap->uacf) > 0) {\n\t\t\t\t\tforeach ($ldap->uacf as $key => $statut) {\n\t\t\t\t\t\tif ($key == 65536) {\n\t\t\t\t\t\t\t$passDoNotExpire = 1;\n\t\t\t\t\t\t\t$statutUACF = $statut;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$userDisabled = 1;\n\t\t\t\t\t$statutUACF = \"ACCOUNTDISABLE\";\n\t\t\t\t}\n\n\t\t\t\tif ($ldap->pwdlastset == 0) {\n\t\t\t\t\t$userChangePassNextLogon = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show tabs\n\t\tif ($mode == 'employee') { // For HRM module development\n\t\t\t$title = $langs->trans(\"Employee\");\n\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/hrm/employee/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t} else {\n\t\t\t$title = $langs->trans(\"User\");\n\t\t\t$linkback = '';\n\n\t\t\tif ($user->rights->user->user->lire || $user->admin) {\n\t\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/user/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t\t}\n\t\t}\n\n\t\t$head = user_prepare_head($object);\n\n\t\t/*\n\t\t * Confirmation reinitialisation mot de passe\n\t\t */\n\t\tif ($action == 'password') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"ReinitPassword\"), $langs->trans(\"ConfirmReinitPassword\", $object->login), \"confirm_password\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirmation envoi mot de passe\n\t\t */\n\t\tif ($action == 'passwordsend') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"SendNewPassword\"), $langs->trans(\"ConfirmSendNewPassword\", $object->login), \"confirm_passwordsend\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirm deactivation\n\t\t */\n\t\tif ($action == 'disable') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"DisableAUser\"), $langs->trans(\"ConfirmDisableUser\", $object->login), \"confirm_disable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirm activation\n\t\t */\n\t\tif ($action == 'enable') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"EnableAUser\"), $langs->trans(\"ConfirmEnableUser\", $object->login), \"confirm_enable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirmation suppression\n\t\t */\n\t\tif ($action == 'delete') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"DeleteAUser\"), $langs->trans(\"ConfirmDeleteUser\", $object->login), \"confirm_delete\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Fiche en mode visu\n\t\t */\n\t\tif ($action != 'edit') {\n\t\t\tprint dol_get_fiche_head($head, 'user', $title, -1, 'user');\n\n\t\t\tdol_banner_tab($object, 'id', $linkback, $user->rights->user->user->lire || $user->admin);\n\n\t\t\tprint '<div class=\"fichecenter\">';\n\t\t\tprint '<div class=\"fichehalfleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t\t\t// Login\n\t\t\tprint '<tr><td class=\"titlefieldmiddle\">'.$langs->trans(\"Login\").'</td>';\n\t\t\tif (!empty($object->ldap_sid) && $object->statut == 0) {\n\t\t\t\tprint '<td class=\"error\">'.$langs->trans(\"LoginAccountDisableInDolibarr\").'</td>';\n\t\t\t} else {\n\t\t\t\tprint '<td>'.showValueWithClipboardCPButton($object->login).'</td>';\n\t\t\t}\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td><td>';\n\t\t\tif (!empty($conf->multicompany->enabled) && $object->admin && !$object->entity) {\n\t\t\t\tprint $form->textwithpicto(yn($object->admin), $langs->trans(\"SuperAdministratorDesc\"), 1, \"superadmin\");\n\t\t\t} elseif ($object->admin) {\n\t\t\t\tprint $form->textwithpicto(yn($object->admin), $langs->trans(\"AdministratorDesc\"), 1, \"admin\");\n\t\t\t} else {\n\t\t\t\tprint yn($object->admin);\n\t\t\t}\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Type\n\t\t\tprint '<tr><td>';\n\t\t\t$text = $langs->trans(\"Type\");\n\t\t\tprint $form->textwithpicto($text, $langs->trans(\"InternalExternalDesc\"));\n\t\t\tprint '</td><td>';\n\t\t\t$type = $langs->trans(\"Internal\");\n\t\t\tif ($object->socid > 0) {\n\t\t\t\t$type = $langs->trans(\"External\");\n\t\t\t}\n\t\t\tprint '<span class=\"badgeneutral\">';\n\t\t\tprint $type;\n\t\t\tif ($object->ldap_sid) {\n\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t}\n\t\t\tprint '</span>';\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Ldap sid\n\t\t\tif ($object->ldap_sid) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Type\").'</td><td>';\n\t\t\t\tprint $langs->trans(\"DomainUser\", $ldap->domainFQDN);\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Employee\n\t\t\tprint '<tr><td>'.$langs->trans(\"Employee\").'</td><td colspan=\"2\">';\n\t\t\tprint '<input type=\"checkbox\" disabled name=\"employee\" value=\"1\"'.($object->employee ? ' checked=\"checked\"' : '').'>';\n\t\t\t//print yn($object->employee);\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// TODO Move this into tab RH, visible when salarie or RH is visible (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Hierarchy\n\t\t\tprint '<tr><td>'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif (empty($object->fk_user)) {\n\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"None\").'</span>';\n\t\t\t} else {\n\t\t\t\t$huser = new User($db);\n\t\t\t\tif ($object->fk_user > 0) {\n\t\t\t\t\t$huser->fetch($object->fk_user);\n\t\t\t\t\tprint $huser->getNomUrl(1);\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"None\").'</span>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Expense report validator\n\t\t\tif (!empty($conf->expensereport->enabled)) {\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"ForceUserExpenseValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($object->fk_user_expense_validator)) {\n\t\t\t\t\t$evuser = new User($db);\n\t\t\t\t\t$evuser->fetch($object->fk_user_expense_validator);\n\t\t\t\t\tprint $evuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Holiday request validator\n\t\t\tif (!empty($conf->holiday->enabled)) {\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"ForceUserHolidayValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($object->fk_user_holiday_validator)) {\n\t\t\t\t\t$hvuser = new User($db);\n\t\t\t\t\t$hvuser->fetch($object->fk_user_holiday_validator);\n\t\t\t\t\tprint $hvuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Default warehouse\n\t\t\tif (!empty($conf->stock->enabled) && !empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER)) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tif ($object->fk_warehouse > 0) {\n\t\t\t\t\t$warehousestatic = new Entrepot($db);\n\t\t\t\t\t$warehousestatic->fetch($object->fk_warehouse);\n\t\t\t\t\tprint $warehousestatic->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td>'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>'.dol_escape_htmltag($object->job).'</td>';\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\tif ((!empty($conf->salaries->enabled) && !empty($user->rights->salaries->read) && in_array($id, $childids))\n\t\t\t\t|| (!empty($conf->salaries->enabled) && !empty($user->rights->salaries->readall))\n\t\t\t\t|| (!empty($conf->hrm->enabled) && !empty($user->rights->hrm->employee->read))) {\n\t\t\t\t// Even a superior can't see this info of its subordinates wihtout $user->rights->salaries->read and $user->rights->hrm->employee->read (setting/viewing is reserverd to HR people).\n\t\t\t\t// However, he can see the valuation of timesheet of its subordinates even without these permissions.\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->thm != '' ?price($object->thm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->tjm != '' ?price($object->tjm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->salary != '' ? img_picto('', 'salary', 'class=\"pictofixedwidth paddingright\"').'<span class=\"amount\">'.price($object->salary, '', $langs, 1, -1, -1, $conf->currency) : '').'</span>';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint price2num($object->weeklyhours);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateOfEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->dateemployment) {\n\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"FromDate\").'</span> ';\n\t\t\t\tprint dol_print_date($object->dateemployment, 'day');\n\t\t\t}\n\t\t\tif ($object->dateemploymentend) {\n\t\t\t\tprint '<span class=\"opacitymedium\"> - '.$langs->trans(\"To\").'</span> ';\n\t\t\t\tprint dol_print_date($object->dateemploymentend, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date of birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateOfBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint dol_print_date($object->birth, 'day');\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Accountancy code\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>'.$object->accountancy_code.'</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '</div>';\n\t\t\tprint '<div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\n\t\t\tprint '<table class=\"border tableforfield centpercent\">';\n\n\t\t\t// Color user\n\t\t\tif (!empty($conf->agenda->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $formother->showColor($object->color, '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Categories\n\t\t\tif (!empty($conf->categorie->enabled) && !empty($user->rights->categorie->lire)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Categories\").'</td>';\n\t\t\t\tprint '<td colspan=\"3\">';\n\t\t\t\tprint $form->showCategories($object->id, Categorie::TYPE_USER, 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Default language\n\t\t\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\t\t\t$langs->load(\"languages\");\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\tprint $form->textwithpicto($langs->trans(\"DefaultLang\"), $langs->trans(\"WarningNotLangOfInterface\", $langs->transnoentitiesnoconv(\"UserGUISetup\")));\n\t\t\t\tprint '</td><td>';\n\t\t\t\t//$s=picto_from_langcode($object->default_lang);\n\t\t\t\t//print ($s?$s.' ':'');\n\t\t\t\t$labellang = ($object->lang ? $langs->trans('Language_'.$object->lang) : '');\n\t\t\t\tprint $labellang;\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/', $conf->file->main_authentication) && !empty($conf->global->MAIN_OPENIDURL_PERUSER)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>'.$object->openid.'</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Multicompany\n\t\t\tif (!empty($conf->multicompany->enabled) && is_object($mc)) {\n\t\t\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\t\t\tif (!method_exists($mc, 'formObjectOptions')) {\n\t\t\t\t\tif (!empty($conf->multicompany->enabled) && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && !$user->entity) {\n\t\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Entity\").'</td><td>';\n\t\t\t\t\t\tif (empty($object->entity)) {\n\t\t\t\t\t\t\tprint $langs->trans(\"AllEntities\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$mc->getInfo($object->entity);\n\t\t\t\t\t\t\tprint $mc->label;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_view.tpl.php';\n\n\t\t\t// Company / Contact\n\t\t\tif (!empty($conf->societe->enabled)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\t$s = '';\n\t\t\t\tif (isset($object->socid) && $object->socid > 0) {\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tif ($societe->id > 0) {\n\t\t\t\t\t\t$s .= $societe->getNomUrl(1, '');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$s .= '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"ThisUserIsNot\").'</span>';\n\t\t\t\t}\n\t\t\t\tif (!empty($object->contact_id)) {\n\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t$contact->fetch($object->contact_id);\n\t\t\t\t\tif ($contact->id > 0) {\n\t\t\t\t\t\tif ($object->socid > 0 && $s) {\n\t\t\t\t\t\t\t$s .= ' / ';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$s .= '<br>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$s .= $contact->getNomUrl(1, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint $s;\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (!empty($conf->adherent->enabled)) {\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member) {\n\t\t\t\t\t$adh = new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref = $adh->getFullname($langs); // Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(-1);\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"UserNotLinkedToMember\").'</span>';\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans('Signature').'</td><td class=\"wordbreak\">';\n\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\t// VCard\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"VCard\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/user/vcard.php?id='.$object->id.'\">';\n\t\t\tprint img_picto($langs->trans(\"Download\"), 'vcard.png', 'class=\"paddingrightonly\"');\n\t\t\tprint $langs->trans(\"Download\");\n\t\t\tprint '</a>';\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\tprint \"</table>\\n\";\n\n\t\t\t// Credentials\n\t\t\tprint '<div class=\"div-table-responsive-no-min\">';\n\t\t\tprint '<table class=\"border tableforfield margintable centpercent\">';\n\t\t\tprint '<tr class=\"liste_titre\"><td class=\"liste_titre\">';\n\t\t\tprint img_picto('', 'security', 'class=\"paddingleft pictofixedwidth\"').$langs->trans(\"Credentials\");\n\t\t\tprint '</td>';\n\t\t\tprint '<td class=\"liste_titre\"></td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Date login validity\n\t\t\tprint '<tr><td>'.$langs->trans(\"RangeOfLoginValidity\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->datestartvalidity) {\n\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"FromDate\").'</span> ';\n\t\t\t\tprint dol_print_date($object->datestartvalidity, 'day');\n\t\t\t}\n\t\t\tif ($object->dateendvalidity) {\n\t\t\t\tprint '<span class=\"opacitymedium\"> - '.$langs->trans(\"To\").'</span> ';\n\t\t\t\tprint dol_print_date($object->dateendvalidity, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Password\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Password\").'</td>';\n\n\t\t\tprint '<td class=\"wordbreak\">';\n\t\t\t$valuetoshow = '';\n\t\t\tif (preg_match('/ldap/', $dolibarr_main_authentication)) {\n\t\t\t\tif (!empty($object->ldap_sid)) {\n\t\t\t\t\tif ($passDoNotExpire) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"LdapUacf_\".$statutUACF);\n\t\t\t\t\t} elseif ($userChangePassNextLogon) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<span class=\"warning\">'.$langs->trans(\"UserMustChangePassNextLogon\", $ldap->domainFQDN).'</span>';\n\t\t\t\t\t} elseif ($userDisabled) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<span class=\"warning\">'.$langs->trans(\"LdapUacf_\".$statutUACF, $ldap->domainFQDN).'</span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (preg_match('/http/', $dolibarr_main_authentication)) {\n\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"HTTPBasicPassword\");\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/', $dolibarr_main_authentication)) {\n\t\t\t\tif ($object->pass) {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '');\n\t\t\t\t\t$valuetoshow .= '<span class=\"opacitymedium\">'.$langs->trans(\"Hidden\").'</span>';\n\t\t\t\t} else {\n\t\t\t\t\tif ($user->admin && $user->id == $object->id) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '');\n\t\t\t\t\t\t//$valuetoshow .= '<span class=\"opacitymedium\">'.$langs->trans(\"Crypted\").' - </span>';\n\t\t\t\t\t\t$valuetoshow .= '<span class=\"opacitymedium\">'.$langs->trans(\"Hidden\").'</span>';\n\t\t\t\t\t\t// TODO Add a feature to reveal the hash\n\t\t\t\t\t\t$valuetoshow .= '<!-- Crypted into '.$object->pass_indatabase_crypted.' -->';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<span class=\"opacitymedium\">'.$langs->trans(\"Hidden\").'</span>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters = array('valuetoshow' => $valuetoshow);\n\t\t\t$reshook = $hookmanager->executeHooks('printUserPasswordField', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$valuetoshow = $hookmanager->resPrint; // to replace\n\t\t\t} else {\n\t\t\t\t$valuetoshow .= $hookmanager->resPrint; // to add\n\t\t\t}\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td>\";\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// API key\n\t\t\tif (!empty($conf->api->enabled) && ($user->id == $id || $user->admin)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($object->api_key)) {\n\t\t\t\t\tprint '<span class=\"opacitymedium\">';\n\t\t\t\t\tprint showValueWithClipboardCPButton($object->api_key, 1, $langs->trans(\"Hidden\"));\t\t// TODO Add an option to also reveal the hash, not only copy paste\n\t\t\t\t\tprint '</span>';\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"LastConnexion\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->datepreviouslogin) {\n\t\t\t\tprint dol_print_date($object->datepreviouslogin, \"dayhour\").' <span class=\"opacitymedium\">('.$langs->trans(\"Previous\").')</span>, ';\n\t\t\t}\n\t\t\tif ($object->datelastlogin) {\n\t\t\t\tprint dol_print_date($object->datelastlogin, \"dayhour\").' <span class=\"opacitymedium\">('.$langs->trans(\"Current\").')</span>';\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '</table></div>';\n\n\t\t\tprint '</div>';\n\n\t\t\tprint '</div></div>';\n\t\t\tprint '<div style=\"clear:both\"></div>';\n\n\n\t\t\tprint dol_get_fiche_end();\n\n\n\t\t\t/*\n\t\t\t * Buttons actions\n\t\t\t */\n\n\t\t\tprint '<div class=\"tabsAction\">';\n\n\t\t\t$parameters = array();\n\t\t\t$reshook = $hookmanager->executeHooks('addMoreActionsButtons', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tif (empty($reshook)) {\n\t\t\t\tif (empty($user->socid)) {\n\t\t\t\t\tif (!empty($object->email)) {\n\t\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action=presend&mode=init#formmailbeforetitle\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($caneditfield && (empty($conf->multicompany->enabled) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tif (!empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED)) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"DisabledInMonoUserMode\")).'\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t} elseif ($caneditpassword && !$object->ldap_sid &&\n\t\t\t\t(empty($conf->multicompany->enabled) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"EditPassword\").'</a></div>';\n\t\t\t\t}\n\n\t\t\t\t// Si on a un gestionnaire de generation de mot de passe actif\n\t\t\t\tif ($conf->global->USER_PASSWORD_GENERATED != 'none') {\n\t\t\t\t\tif ($object->statut == 0) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t} elseif (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=password\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($object->statut == 0) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t} elseif (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\t\tif ($object->email) {\n\t\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=passwordsend\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Enable user\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 0 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action=enable&token='.newToken().'\">'.$langs->trans(\"Reactivate\").'</a></div>';\n\t\t\t\t}\n\t\t\t\t// Disable user\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 1 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=disable&id='.$object->id.'&token='.newToken().'\">'.$langs->trans(\"DisableUser\").'</a></div>';\n\t\t\t\t} else {\n\t\t\t\t\tif ($user->id == $id) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.$langs->trans(\"CantDisableYourself\").'\">'.$langs->trans(\"DisableUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Delete\n\t\t\t\tif ($user->id <> $id && $candisableuser &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tif ($user->admin || !$object->admin) { // If user edited is admin, delete is possible on for an admin\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=delete&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"MustBeAdminToDeleteOtherAdmin\")).'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint \"</div>\\n\";\n\n\n\n\t\t\t//Select mail models is same action as presend\n\t\t\tif (GETPOST('modelselected')) {\n\t\t\t\t$action = 'presend';\n\t\t\t}\n\n\t\t\t// Presend form\n\t\t\t$modelmail = 'user';\n\t\t\t$defaulttopic = 'Information';\n\t\t\t$diroutput = $conf->user->dir_output;\n\t\t\t$trackid = 'use'.$object->id;\n\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/card_presend.tpl.php';\n\n\t\t\tif ($action != 'presend' && $action != 'send') {\n\t\t\t\t/*\n\t\t\t\t * List of groups of user\n\t\t\t\t */\n\n\t\t\t\tif ($canreadgroup) {\n\t\t\t\t\tprint '<!-- Group section -->'.\"\\n\";\n\n\t\t\t\t\tprint load_fiche_titre($langs->trans(\"ListOfGroupsForUser\"), '', '');\n\n\t\t\t\t\t// On selectionne les groupes auquel fait parti le user\n\t\t\t\t\t$exclude = array();\n\n\t\t\t\t\t$usergroup = new UserGroup($db);\n\t\t\t\t\t$groupslist = $usergroup->listGroupsForUser($object->id);\n\n\t\t\t\t\tif (!empty($groupslist)) {\n\t\t\t\t\t\tforeach ($groupslist as $groupforuser) {\n\t\t\t\t\t\t\t$exclude[] = $groupforuser->id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Other form for add user to group\n\t\t\t\t\t$parameters = array('caneditgroup' => $caneditgroup, 'groupslist' => $groupslist, 'exclude' => $exclude);\n\t\t\t\t\t$reshook = $hookmanager->executeHooks('formAddUserToGroup', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\t\t\tprint $hookmanager->resPrint;\n\n\t\t\t\t\tif (empty($reshook)) {\n\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$id.'\" method=\"POST\">'.\"\\n\";\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\" />';\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"addgroup\" />';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprint '<table class=\"noborder centpercent\">'.\"\\n\";\n\t\t\t\t\t\tprint '<tr class=\"liste_titre\"><th class=\"liste_titre\">'.$langs->trans(\"Groups\").'</th>'.\"\\n\";\n\t\t\t\t\t\tprint '<th class=\"liste_titre right\">';\n\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\tprint $form->select_dolgroups('', 'group', 1, $exclude, 0, '', '', $object->entity);\n\t\t\t\t\t\t\tprint ' &nbsp; ';\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t\t\t\t\tprint '<input type=\"submit\" class=\"button buttongen\" value=\"'.$langs->trans(\"Add\").'\" />';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</th></tr>'.\"\\n\";\n\n\t\t\t\t\t\t// List of groups of user\n\t\t\t\t\t\tif (!empty($groupslist)) {\n\t\t\t\t\t\t\tforeach ($groupslist as $group) {\n\t\t\t\t\t\t\t\tprint '<tr class=\"oddeven\">';\n\t\t\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\t\t\tprint $group->getNomUrl(1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tprint img_object($langs->trans(\"ShowGroup\"), \"group\").' '.$group->name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint '</td>';\n\t\t\t\t\t\t\t\tprint '<td class=\"right\">';\n\t\t\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\t\t\tprint '<a href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=removegroup&amp;group='.$group->id.'\">';\n\t\t\t\t\t\t\t\t\tprint img_picto($langs->trans(\"RemoveFromGroup\"), 'unlink');\n\t\t\t\t\t\t\t\t\tprint '</a>';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tprint \"&nbsp;\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprint '<tr class=\"oddeven\"><td colspan=\"3\" class=\"opacitymedium\">'.$langs->trans(\"None\").'</td></tr>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprint \"</table>\";\n\n\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\tprint '</form>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint \"<br>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Card in edit mode\n\t\t */\n\t\tif ($action == 'edit' && ($canedituser || $caneditfield || $caneditpassword || ($user->id == $object->id))) {\n\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\" method=\"POST\" name=\"updateuser\" enctype=\"multipart/form-data\">';\n\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$object->entity.'\">';\n\n\t\t\tprint dol_get_fiche_head($head, 'user', $title, 0, 'user');\n\n\t\t\tprint '<table class=\"border centpercent\">';\n\n\t\t\t// Ref/ID\n\t\t\tif (!empty($conf->global->MAIN_SHOW_TECHNICAL_ID)) {\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"Ref\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $object->id;\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\n\t\t\t// Civility\n\t\t\tprint '<tr><td class=\"titlefieldcreate\"><label for=\"civility_code\">'.$langs->trans(\"UserTitle\").'</label></td><td colspan=\"3\">';\n\t\t\tprint $formcompany->select_civility(GETPOSTISSET(\"civility_code\") ? GETPOST(\"civility_code\", 'aZ09') : $object->civility_code, 'civility_code');\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Lastname\n\t\t\tprint \"<tr>\";\n\t\t\tprint '<td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Lastname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid) {\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t\tprint $object->lastname;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Firstname\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Firstname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid) {\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t\tprint $object->firstname;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Login\n\t\t\tprint \"<tr>\".'<td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\t\t\tprint '<td>';\n\t\t\tif ($user->admin && !$object->ldap_sid) {\n\t\t\t\tprint '<input maxlength=\"50\" type=\"text\" class=\"flat\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t\tprint $object->login;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\t\tif ($object->socid > 0) {\n\t\t\t\t$langs->load(\"admin\");\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">'.yn($object->admin);\n\t\t\t\tprint ' ('.$langs->trans(\"ExternalUser\").')';\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\tprint '<td>';\n\t\t\t\t$nbAdmin = $user->getNbOfUsers('active', '', 1);\n\t\t\t\t$nbSuperAdmin = $user->getNbOfUsers('active', 'superadmin', 1);\n\t\t\t\t//var_dump($nbAdmin);\n\t\t\t\t//var_dump($nbSuperAdmin);\n\t\t\t\tif ($user->admin\t\t\t\t\t\t\t\t// Need to be admin to allow downgrade of an admin\n\t\t\t\t&& ($user->id != $object->id)                   // Don't downgrade ourself\n\t\t\t\t&& (\n\t\t\t\t\t(empty($conf->multicompany->enabled) && $nbAdmin >= 1)\n\t\t\t\t\t|| (!empty($conf->multicompany->enabled) && (($object->entity > 0 || ($user->entity == 0 && $object->entity == 0)) || $nbSuperAdmin > 1))    // Don't downgrade a superadmin if alone\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tprint $form->selectyesno('admin', $object->admin, 1);\n\n\t\t\t\t\tif (!empty($conf->multicompany->enabled) && !$user->entity) {\n\t\t\t\t\t\tif ($conf->use_javascript_ajax) {\n\t\t\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t\t\tvar admin = $(\"select[name=admin]\").val();\n\t\t\t\t\t\t\t\t\t\tif (admin == 0) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif ($(\"input[name=superadmin]\").is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\tif ( $(this).is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t</script>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$checked = (($object->admin && !$object->entity) ? ' checked' : '');\n\t\t\t\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" id=\"superadmin\" value=\"1\"'.$checked.' /> <label for=\"superadmin\">'.$langs->trans(\"SuperAdministrator\").'</span>';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$yn = yn($object->admin);\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"superadmin\" value=\"'.(empty($object->entity) ? 1 : 0).'\">';\n\t\t\t\t\tif (!empty($conf->multicompany->enabled) && empty($object->entity)) {\n\t\t\t\t\t\tprint $form->textwithpicto($yn, $langs->trans(\"DontDowngradeSuperAdmin\"), 1, 'warning');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint $yn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Gender\n\t\t\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\t\t\tprint '<td>';\n\t\t\t$arraygender = array('man'=>$langs->trans(\"Genderman\"), 'woman'=>$langs->trans(\"Genderwoman\"), 'other'=>$langs->trans(\"Genderother\"));\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectarray('gender', $arraygender, GETPOSTISSET('gender') ?GETPOST('gender') : $object->gender, 1);\n\t\t\t} else {\n\t\t\t\tprint $arraygender[$object->gender];\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Employee\n\t\t\tprint '<tr>';\n\t\t\tprint '<td>'.$form->editfieldkey('Employee', 'employee', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<input type=\"checkbox\" name=\"employee\" value=\"1\"'.($object->employee ? ' checked=\"checked\"' : '').'>';\n\t\t\t\t//print $form->selectyesno(\"employee\", $object->employee, 1);\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"checkbox\" name=\"employee\" disabled value=\"1\"'.($object->employee ? ' checked=\"checked\"' : '').'>';\n\t\t\t\t/*if ($object->employee) {\n\t\t\t\t\tprint $langs->trans(\"Yes\");\n\t\t\t\t} else {\n\t\t\t\t\tprint $langs->trans(\"No\");\n\t\t\t\t}*/\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Hierarchy\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'widthcentpercentminusx maxwidth300');\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"fk_user\" value=\"'.$object->fk_user.'\">';\n\t\t\t\t$huser = new User($db);\n\t\t\t\t$huser->fetch($object->fk_user);\n\t\t\t\tprint $huser->getNomUrl(1);\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Expense report validator\n\t\t\tif (!empty($conf->expensereport->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\t$text = $langs->trans(\"ForceUserExpenseValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_expense_validator, 'fk_user_expense_validator', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'widthcentpercentminusx maxwidth300');\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"fk_user_expense_validator\" value=\"'.$object->fk_user_expense_validator.'\">';\n\t\t\t\t\t$evuser = new User($db);\n\t\t\t\t\t$evuser->fetch($object->fk_user_expense_validator);\n\t\t\t\t\tprint $evuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Holiday request validator\n\t\t\tif (!empty($conf->holiday->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\t$text = $langs->trans(\"ForceUserHolidayValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_holiday_validator, 'fk_user_holiday_validator', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'widthcentpercentminusx maxwidth300');\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"fk_user_holiday_validator\" value=\"'.$object->fk_user_holiday_validator.'\">';\n\t\t\t\t\t$hvuser = new User($db);\n\t\t\t\t\t$hvuser->fetch($object->fk_user_holiday_validator);\n\t\t\t\t\tprint $hvuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// External user ?\n\t\t\tprint '<tr><td>'.$langs->trans(\"ExternalUser\").' ?</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($user->id == $object->id || !$user->admin) {\n\t\t\t\t// Read mode\n\t\t\t\t$type = $langs->trans(\"Internal\");\n\t\t\t\tif ($object->socid) {\n\t\t\t\t\t$type = $langs->trans(\"External\");\n\t\t\t\t}\n\t\t\t\tprint $form->textwithpicto($type, $langs->trans(\"InternalExternalDesc\"));\n\t\t\t\tif ($object->ldap_sid) {\n\t\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select mode\n\t\t\t\t$type = 0;\n\t\t\t\tif ($object->contact_id) {\n\t\t\t\t\t$type = $object->contact_id;\n\t\t\t\t}\n\n\t\t\t\tif ($object->socid > 0 && !($object->contact_id > 0)) {\t// external user but no link to a contact\n\t\t\t\t\tprint img_picto('', 'company').$form->select_company($object->socid, 'socid', '', '&nbsp;');\n\t\t\t\t\tprint img_picto('', 'contact').$form->selectcontacts(0, 0, 'contactid', 1, '', '', 1, '', false, 1);\n\t\t\t\t\tif ($object->ldap_sid) {\n\t\t\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t\t\t}\n\t\t\t\t} elseif ($object->socid > 0 && $object->contact_id > 0) {\t// external user with a link to a contact\n\t\t\t\t\tprint img_picto('', 'company').$form->select_company(0, 'socid', '', '&nbsp;'); // We keep thirdparty empty, contact is already set\n\t\t\t\t\tprint img_picto('', 'contact').$form->selectcontacts(0, $object->contact_id, 'contactid', 1, '', '', 1, '', false, 1);\n\t\t\t\t\tif ($object->ldap_sid) {\n\t\t\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t\t\t}\n\t\t\t\t} else {\t// $object->socid is not > 0 here\n\t\t\t\t\tprint img_picto('', 'company').$form->select_company(0, 'socid', '', '&nbsp;'); // We keep thirdparty empty, contact is already set\n\t\t\t\t\tprint img_picto('', 'contact').$form->selectcontacts(0, 0, 'contactid', 1, '', '', 1, '', false, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// Date access validity\n\t\t\tprint '<tr><td>'.$langs->trans(\"RangeOfLoginValidity\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($datestartvalidity ? $datestartvalidity : $object->datestartvalidity, 'datestartvalidity', 0, 0, 1, 'formdatestartvalidity', 1, 1, 0, '', '', '', '', 1, '', '');\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->datestartvalidity, 'day');\n\t\t\t}\n\n\t\t\t/*if ($datestartvalidity && $dateendvalidity) {\n\t\t\t\tprint ' - ';\n\t\t\t}*/\n\t\t\tprint ' &nbsp; ';\n\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($dateendvalidity ? $datendevalidity : $object->dateendvalidity, 'dateendvalidity', 0, 0, 1, 'formdateendvalidity', 1, 0, 0, '', '', '', '', 1, '', '');\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->dateendvalidity, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Pass\n\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"Password\").'</td>';\n\t\t\tprint '<td>';\n\t\t\t$valuetoshow = '';\n\t\t\tif (preg_match('/ldap/', $dolibarr_main_authentication)) {\n\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t}\n\t\t\tif (preg_match('/http/', $dolibarr_main_authentication)) {\n\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$form->textwithpicto($text, $langs->trans(\"DolibarrInHttpAuthenticationSoPasswordUseless\", $dolibarr_main_authentication), 1, 'warning');\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/', $dolibarr_main_authentication)) {\n\t\t\t\tif ($caneditpassword) {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<input maxlength=\"32\" type=\"password\" class=\"flat\" name=\"password\" value=\"'.$object->pass.'\" autocomplete=\"new-password\">';\n\t\t\t\t} else {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').preg_replace('/./i', '*', $object->pass);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters = array('valuetoshow' => $valuetoshow, 'caneditpassword' => $caneditpassword);\n\t\t\t$reshook = $hookmanager->executeHooks('printUserPasswordField', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$valuetoshow = $hookmanager->resPrint; // to replace\n\t\t\t} else {\n\t\t\t\t$valuetoshow .= $hookmanager->resPrint; // to add\n\t\t\t}\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\t// API key\n\t\t\tif (!empty($conf->api->enabled) && ($user->id == $id || $user->admin)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input class=\"minwidth300\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.$object->api_key.'\" autocomplete=\"off\">';\n\t\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// Address\n\t\t\tprint '<tr><td class=\"tdtop titlefieldcreate\">'.$form->editfieldkey('Address', 'address', '', $object, 0).'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\t\t\t}\n\t\t\tprint $object->address;\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '</textarea>';\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Zip\n\t\t\tprint '<tr><td>'.$form->editfieldkey('Zip', 'zipcode', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $formcompany->select_ziptown($object->zip, 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\t\t} else {\n\t\t\t\tprint $object->zip;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Town\n\t\t\tprint '<tr><td>'.$form->editfieldkey('Town', 'town', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $formcompany->select_ziptown($object->town, 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\t\t} else {\n\t\t\t\tprint $object->town;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Country\n\t\t\tprint '<tr><td>'.$form->editfieldkey('Country', 'selectcounty_id', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->select_country((GETPOST('country_id') != '' ?GETPOST('country_id') : $object->country_id), 'country_id');\n\t\t\t\tif ($user->admin) {\n\t\t\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$countrylabel = getCountry($object->country_id, '0');\n\t\t\t\tprint $countrylabel;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// State\n\t\t\tif (empty($conf->global->USER_DISABLE_STATE)) {\n\t\t\t\tprint '<tr><td class=\"tdoverflow\">'.$form->editfieldkey('State', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\t\t\t\tprint $formcompany->select_state($object->state_id, $object->country_code, 'state_id');\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->state_label;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Tel pro\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhonePro\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'phoning', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input type=\"text\" name=\"office_phone\" class=\"flat maxwidth200\" value=\"'.$object->office_phone.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.$object->office_phone.'\">';\n\t\t\t\tprint $object->office_phone;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Tel mobile\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'phoning_mobile', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input type=\"text\" name=\"user_mobile\" class=\"flat maxwidth200\" value=\"'.$object->user_mobile.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$object->user_mobile.'\">';\n\t\t\t\tprint $object->user_mobile;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Fax\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Fax\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'phoning_fax', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input type=\"text\" name=\"office_fax\" class=\"flat maxwidth200\" value=\"'.$object->office_fax.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.$object->office_fax.'\">';\n\t\t\t\tprint $object->office_fax;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// EMail\n\t\t\tprint \"<tr>\".'<td'.(!empty($conf->global->USER_MAIL_REQUIRED) ? ' class=\"fieldrequired\"' : '').'>'.$langs->trans(\"EMail\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'object_email', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input class=\"minwidth100 maxwidth500 widthcentpercentminusx\" type=\"text\" name=\"email\" class=\"flat\" value=\"'.$object->email.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.$object->email.'\">';\n\t\t\t\tprint $object->email;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\tif (!empty($conf->socialnetworks->enabled)) {\n\t\t\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t\t\tif ($value['active']) {\n\t\t\t\t\t\tprint '<tr><td>'.$langs->trans($value['label']).'</td>';\n\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\tif (!empty($value['icon'])) {\n\t\t\t\t\t\t\tprint '<span class=\"fa '.$value['icon'].' pictofixedwidth\"></span>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\t\t\t\tprint '<input type=\"text\" name=\"'.$key.'\" class=\"flat maxwidth200\" value=\"'.$object->socialnetworks[$key].'\">';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$object->socialnetworks[$key].'\">';\n\t\t\t\t\t\t\tprint $object->socialnetworks[$key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if social network is not active but value exist we do not want to loose it\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$object->socialnetworks[$key].'\">';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// OpenID url\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/', $conf->file->main_authentication) && !empty($conf->global->MAIN_OPENIDURL_PERUSER)) {\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input class=\"minwidth100\" type=\"url\" name=\"openid\" class=\"flat\" value=\"'.$object->openid.'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"openid\" value=\"'.$object->openid.'\">';\n\t\t\t\t\tprint $object->openid;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\t\t\t// Accountancy code\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tprint \"<tr>\";\n\t\t\t\tprint '<td class=\"titlefieldcreate\">'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input type=\"text\" class=\"flat maxwidth300\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t\tprint $object->accountancy_code;\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\";\n\t\t\t}\n\n\t\t\t// User color\n\t\t\tif (!empty($conf->agenda->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint $formother->selectColor(GETPOSTISSET('color') ?GETPOST('color', 'alphanohtml') : $object->color, 'color', null, 1, '', 'hideifnotset');\n\t\t\t\t} else {\n\t\t\t\t\tprint $formother->showColor($object->color, '');\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Photo\n\t\t\tprint '<tr>';\n\t\t\tprint '<td class=\"titlefieldcreate\">'.$langs->trans(\"Photo\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->showphoto('userphoto', $object, 60, 0, $caneditfield, 'photowithmargin', 'small', 1, 0, 'user', 1);\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Categories\n\t\t\tif (!empty($conf->categorie->enabled) && !empty($user->rights->categorie->lire)) {\n\t\t\t\tprint '<tr><td>'.$form->editfieldkey('Categories', 'usercats', '', $object, 0).'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint img_picto('', 'category', 'class=\"pictofixedwidth\"');\n\t\t\t\t$cate_arbo = $form->select_all_categories(Categorie::TYPE_USER, null, null, null, null, 1);\n\t\t\t\t$c = new Categorie($db);\n\t\t\t\t$cats = $c->containing($object->id, Categorie::TYPE_USER);\n\t\t\t\tforeach ($cats as $cat) {\n\t\t\t\t\t$arrayselected[] = $cat->id;\n\t\t\t\t}\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint $form->multiselectarray('usercats', $cate_arbo, $arrayselected, '', 0, '', 0, '90%');\n\t\t\t\t} else {\n\t\t\t\t\tprint $form->showCategories($object->id, Categorie::TYPE_USER, 1);\n\t\t\t\t}\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Default language\n\t\t\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\t\t\tprint '<tr><td>'.$form->editfieldkey('DefaultLang', 'default_lang', '', $object, 0, 'string', '', 0, 0, 'id', $langs->trans(\"WarningNotLangOfInterface\", $langs->transnoentitiesnoconv(\"UserGUISetup\"))).'</td><td colspan=\"3\">'.\"\\n\";\n\t\t\t\tprint img_picto('', 'language', 'class=\"pictofixedwidth\"').$formadmin->select_language($object->lang, 'default_lang', 0, null, '1', 0, 0, 'widthcentpercentminusx maxwidth300');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\n\t\t\t// Status\n\t\t\tprint '<tr><td>'.$langs->trans(\"Status\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $object->getLibStatut(4);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Company / Contact\n\t\t\tif (!empty($conf->societe->enabled)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->socid > 0) {\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tprint $societe->getNomUrl(1, '');\n\t\t\t\t\tif ($object->contact_id) {\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($object->contact_id);\n\t\t\t\t\t\tprint ' / <a href=\"'.DOL_URL_ROOT.'/contact/card.php?id='.$object->contact_id.'\">'.img_object($langs->trans(\"ShowContact\"), 'contact').' '.dol_trunc($contact->getFullName($langs), 32).'</a>';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"ThisUserIsNot\").'</span>';\n\t\t\t\t}\n\t\t\t\tprint ' <span class=\"opacitymedium hideonsmartphone\">('.$langs->trans(\"UseTypeFieldToChange\").')</span>';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (!empty($conf->adherent->enabled)) {\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member) {\n\t\t\t\t\t$adh = new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref = $adh->login; // Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(1);\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"UserNotLinkedToMember\").'</span>';\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Multicompany\n\t\t\t// TODO check if user not linked with the current entity before change entity (thirdparty, invoice, etc.) !!\n\t\t\tif (!empty($conf->multicompany->enabled) && is_object($mc)) {\n\t\t\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\t\t\tif (!method_exists($mc, 'formObjectOptions')) {\n\t\t\t\t\tif (empty($conf->multicompany->transverse_mode) && $conf->entity == 1 && $user->admin && !$user->entity) {\n\t\t\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t\t\t\t\t\tprint \"<td>\".$mc->select_entities($object->entity, 'entity', '', 0, 1, false, false, 1); // last parameter 1 means, show also a choice 0=>'all entities'\n\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters = array('colspan' => ' colspan=\"2\"');\n\t\t\t//include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_edit.tpl.php';\t\t// We do not use common tpl here because we need a special test on $caneditfield\n\t\t\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tprint $hookmanager->resPrint;\n\t\t\tif (empty($reshook)) {\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint $object->showOptionals($extrafields, 'edit');\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->showOptionals($extrafields, 'view');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t\t\t\t$doleditor = new DolEditor('signature', $object->signature, '', 138, 'dolibarr_notes', 'In', false, true, empty($conf->global->FCKEDITOR_ENABLE_USERSIGN) ? 0 : 1, ROWS_4, '90%');\n\t\t\t\tprint $doleditor->Create(1);\n\t\t\t} else {\n\t\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '<hr>';\n\n\n\t\t\tprint '<table class=\"border centpercent\">';\n\n\n\t\t\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Default warehouse\n\t\t\tif (!empty($conf->stock->enabled) && !empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tprint $formproduct->selectWarehouses($object->fk_warehouse, 'fk_warehouse', 'warehouseopen', 1);\n\t\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/product/stock/card.php?action=create&amp;backtopage='.urlencode($_SERVER['PHP_SELF'].'?id='.$object->id.'&action=edit').'\"><span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddWarehouse\").'\"></span></a>';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<input type=\"text\" class=\"minwidth300 maxwidth500\" name=\"job\" value=\"'.dol_escape_htmltag($object->job).'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"job\" value=\"'.dol_escape_htmltag($object->job).'\">';\n\t\t\t\tprint dol_escape_htmltag($object->job);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\tif ((!empty($conf->salaries->enabled) && !empty($user->rights->salaries->read) && in_array($id, $childids))\n\t\t\t\t|| (!empty($conf->salaries->enabled) && !empty($user->rights->salaries->readall))\n\t\t\t\t|| (!empty($conf->hrm->enabled) && !empty($user->rights->hrm->employee->read))) {\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.price2num(GETPOST('thm') ?GETPOST('thm') : $object->thm).'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint ($object->thm != '' ?price($object->thm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.price2num(GETPOST('tjm') ?GETPOST('tjm') : $object->tjm).'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint ($object->tjm != '' ?price($object->tjm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint img_picto('', 'salary', 'class=\"pictofixedwidth paddingright\"').'<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.price2num(GETPOST('salary') ?GETPOST('salary') : $object->salary).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.price2num(GETPOST('weeklyhours') ?GETPOST('weeklyhours') : $object->weeklyhours).'\">';\n\t\t\t} else {\n\t\t\t\tprint price2num($object->weeklyhours);\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($dateemployment ? $dateemployment : $object->dateemployment, 'dateemployment', 0, 0, 1, 'formdateemployment', 1, 1);\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->dateemployment, 'day');\n\t\t\t}\n\n\t\t\tif ($dateemployment && $dateemploymentend) {\n\t\t\t\tprint ' - ';\n\t\t\t}\n\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($dateemploymentend ? $dateemploymentend : $object->dateemploymentend, 'dateemploymentend', 0, 0, 1, 'formdateemploymentend', 1, 0);\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->dateemploymentend, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateOfBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\techo $form->selectDate($dateofbirth ? $dateofbirth : $object->birth, 'dateofbirth', 0, 0, 1, 'updateuser', 1, 0);\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->birth, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '</table>';\n\n\t\t\tprint dol_get_fiche_end();\n\n\t\t\tprint '<div class=\"center\">';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Save\").'\" class=\"button button-save\" type=\"submit\" name=\"save\">';\n\t\t\tprint '&nbsp; &nbsp; &nbsp;';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button button-cancel\" type=\"submit\" name=\"cancel\">';\n\t\t\tprint '</div>';\n\n\t\t\tprint '</form>';\n\t\t}\n\n\t\tif ($action != 'edit' && $action != 'presend') {\n\t\t\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\n\t\t\t// Generated documents\n\t\t\t$filename = dol_sanitizeFileName($object->ref);\n\t\t\t$filedir = $conf->user->dir_output.\"/\".dol_sanitizeFileName($object->ref);\n\t\t\t$urlsource = $_SERVER[\"PHP_SELF\"].\"?id=\".$object->id;\n\t\t\t$genallowed = $user->rights->user->user->lire;\n\t\t\t$delallowed = $user->rights->user->user->creer;\n\n\t\t\tprint $formfile->showdocuments('user', $filename, $filedir, $urlsource, $genallowed, $delallowed, $object->model_pdf, 1, 0, 0, 28, 0, '', 0, '', empty($soc->default_lang) ? '' : $soc->default_lang);\n\t\t\t$somethingshown = $formfile->numoffiles;\n\n\t\t\t// Show links to link elements\n\t\t\t$linktoelem = $form->showLinkToObjectBlock($object, null, null);\n\t\t\t$somethingshown = $form->showLinkedObjectBlock($object, $linktoelem);\n\n\t\t\tprint '</div><div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\t// List of actions on element\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/html.formactions.class.php';\n\t\t\t$formactions = new FormActions($db);\n\t\t\t$somethingshown = $formactions->showactions($object, 'user', $socid, 1);\n\n\t\t\tprint '</div></div></div>';\n\t\t}\n\n\t\tif (!empty($conf->ldap->enabled) && !empty($object->ldap_sid)) {\n\t\t\t$ldap->close();\n\t\t}\n\t}\n}\n\nif (!empty($conf->api->enabled) && !empty($conf->use_javascript_ajax)) {\n\tprint \"\\n\".'<script type=\"text/javascript\">';\n\tprint '$(document).ready(function () {\n            $(\"#generate_api_key\").click(function() {\n                $.get( \"'.DOL_URL_ROOT.'/core/ajax/security.php\", {\n                    action: \\'getrandompassword\\',\n                    generic: true\n                },\n                function(token) {\n                    $(\"#api_key\").val(token);\n                });\n            });\n    });';\n\tprint '</script>';\n}\n\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (c) 2002-2007  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (c) 2002-2003  Jean-Louis Bergamo      <jlb@j1b.org>\n * Copyright (c) 2004-2012  Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2004       Sebastien Di Cintio     <sdicintio@ressource-toi.org>\n * Copyright (C) 2004       Benoit Mortier          <benoit.mortier@opensides.be>\n * Copyright (C) 2005-2017  Regis Houssin           <regis.houssin@inodbox.com>\n * Copyright (C) 2005       Lionel Cousteix         <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011       Herve Prot              <herve.prot@symeos.com>\n * Copyright (C) 2013-2019  Philippe Grand          <philippe.grand@atoo-net.com>\n * Copyright (C) 2013-2015  Alexandre Spangaro      <aspangaro@open-dsi.fr>\n * Copyright (C) 2015       Marcos Garc\u00eda           <marcosgdf@gmail.com>\n * Copyright (C) 2018       charlene Benke          <charlie@patas-monkey.com>\n * Copyright (C) 2018       Nicolas ZABOURI         <info@inovea-conseil.com>\n * Copyright (C) 2019-2020  Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n * Copyright (C) 2019       Abbes Bahfir            <dolipar@dolipar.org>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/user/class/user.class.php\n *\t\\brief      File of class to manage users\n *  \\ingroup\tcore\n */\n\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/usergroup.class.php';\n\n/**\n *\tClass to manage Dolibarr users\n */\nclass User extends CommonObject\n{\n\t/**\n\t * @var string ID to identify managed object\n\t */\n\tpublic $element = 'user';\n\n\t/**\n\t * @var string Name of table without prefix where object is stored\n\t */\n\tpublic $table_element = 'user';\n\n\t/**\n\t * @var string Field with ID of parent key if this field has a parent\n\t */\n\tpublic $fk_element = 'fk_user';\n\n\t/**\n\t * 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\t * @var int\n\t */\n\tpublic $ismultientitymanaged = 1;\n\n\t/**\n\t * @var string picto\n\t */\n\tpublic $picto = 'user';\n\n\tpublic $id = 0;\n\tpublic $statut;\n\tpublic $ldap_sid;\n\tpublic $search_sid;\n\tpublic $employee;\n\tpublic $civility_code;\n\n\t/**\n\t * @var string gender\n\t */\n\tpublic $gender;\n\tpublic $birth;\n\n\t/**\n\t * @var string email\n\t */\n\tpublic $email;\n\n\t/**\n\t * @var string personal email\n\t */\n\tpublic $personal_email;\n\n\t/**\n\t * @var array array of socialnetworks\n\t */\n\tpublic $socialnetworks;\n\n\t/**\n\t * @var string skype account\n\t * @deprecated\n\t */\n\tpublic $skype;\n\n\t/**\n\t * @var string twitter account\n\t * @deprecated\n\t */\n\tpublic $twitter;\n\n\t/**\n\t * @var string facebook account\n\t * @deprecated\n\t */\n\tpublic $facebook;\n\n\t/**\n\t * @var string linkedin account\n\t * @deprecated\n\t */\n\tpublic $linkedin;\n\n\t/**\n\t * @var string job position\n\t */\n\tpublic $job;\n\n\t/**\n\t * @var string user signature\n\t */\n\tpublic $signature;\n\n\t/**\n\t * @var string Address\n\t */\n\tpublic $address;\n\n\t/**\n\t * @var string zip code\n\t */\n\tpublic $zip;\n\n\t/**\n\t * @var string town\n\t */\n\tpublic $town;\n\tpublic $state_id; // The state/department\n\tpublic $state_code;\n\tpublic $state;\n\n\t/**\n\t * @var string office phone\n\t */\n\tpublic $office_phone;\n\n\t/**\n\t * @var string office fax\n\t */\n\tpublic $office_fax;\n\n\t/**\n\t * @var string phone mobile\n\t */\n\tpublic $user_mobile;\n\n\t/**\n\t * @var string personal phone mobile\n\t */\n\tpublic $personal_mobile;\n\n\t/**\n\t * @var int 1 if admin 0 if standard user\n\t */\n\tpublic $admin;\n\n\t/**\n\t * @var string user login\n\t */\n\tpublic $login;\n\n\t/**\n\t * @var string user apikey\n\t */\n\tpublic $api_key;\n\n\t/**\n\t * @var int Entity\n\t */\n\tpublic $entity;\n\n\t/**\n\t * @var string Clear password in memory\n\t */\n\tpublic $pass;\n\n\t/**\n\t * @var string Clear password in database (defined if DATABASE_PWD_ENCRYPTED=0)\n\t */\n\tpublic $pass_indatabase;\n\n\t/**\n\t * @var string Encrypted password in database (always defined)\n\t */\n\tpublic $pass_indatabase_crypted;\n\n\t/**\n\t * @var string Temporary password\n\t */\n\tpublic $pass_temp;\n\n\t/**\n\t * Date creation record (datec)\n\t *\n\t * @var integer\n\t */\n\tpublic $datec;\n\n\t/**\n\t * Date modification record (tms)\n\t *\n\t * @var integer\n\t */\n\tpublic $datem;\n\n\t/**\n\t * @var int If this is defined, it is an external user\n\t */\n\tpublic $socid;\n\n\t/**\n\t * @var int If this is defined, it is a user created from a contact\n\t */\n\tpublic $contact_id;\n\n\t/**\n\t * @var int ID\n\t */\n\tpublic $fk_member;\n\n\t/**\n\t * @var int User ID of supervisor\n\t */\n\tpublic $fk_user;\n\n\t/**\n\t * @var int User ID of expense validator\n\t */\n\tpublic $fk_user_expense_validator;\n\n\t/**\n\t * @var int User ID of holidays validator\n\t */\n\tpublic $fk_user_holiday_validator;\n\n\t/**\n\t * @string clicktodial url\n\t */\n\tpublic $clicktodial_url;\n\n\t/**\n\t * @var string clicktodial login\n\t */\n\tpublic $clicktodial_login;\n\n\t/**\n\t * @var string clicktodial password\n\t */\n\tpublic $clicktodial_password;\n\n\t/**\n\t * @var string clicktodial poste\n\t */\n\tpublic $clicktodial_poste;\n\n\tpublic $datelastlogin;\n\tpublic $datepreviouslogin;\n\tpublic $datestartvalidity;\n\tpublic $dateendvalidity;\n\n\t/**\n\t * @var string photo filename\n\t */\n\tpublic $photo;\n\tpublic $lang;\n\n\t/**\n\t * @var stdClass Class of permissions user->rights->permx\n\t */\n\tpublic $rights;\n\n\t/**\n\t * @var int  All permissions are loaded\n\t */\n\tpublic $all_permissions_are_loaded;\n\n\t/**\n\t * @var int Number of rights granted to the user\n\t */\n\tpublic $nb_rights;\n\n\t/**\n\t * @var array\tTo store list of groups of user (used by API /info for example)\n\t */\n\tpublic $user_group_list;\n\n\t/**\n\t * @var array Cache array of already loaded permissions\n\t */\n\tprivate $_tab_loaded = array();\n\n\t/**\n\t * @var stdClass To store personal config\n\t */\n\tpublic $conf;\n\tpublic $default_values; // To store default values for user\n\tpublic $lastsearch_values_tmp; // To store current search criterias for user\n\tpublic $lastsearch_values; // To store last saved search criterias for user\n\n\tpublic $users = array(); // To store all tree of users hierarchy\n\tpublic $parentof; // To store an array of all parents for all ids.\n\tprivate $cache_childids; // Cache array of already loaded childs\n\n\tpublic $accountancy_code; // Accountancy code in prevision of the complete accountancy module\n\n\tpublic $thm; // Average cost of employee - Used for valuation of time spent\n\tpublic $tjm; // Average cost of employee\n\n\tpublic $salary; // Monthly salary       - Denormalized value from llx_user_employment\n\tpublic $salaryextra; // Monthly salary extra - Denormalized value from llx_user_employment\n\tpublic $weeklyhours; // Weekly hours         - Denormalized value from llx_user_employment\n\n\t/**\n\t * @var string Define background color for user in agenda\n\t */\n\tpublic $color;\n\n\tpublic $dateemployment; // Define date of employment by company\n\tpublic $dateemploymentend; // Define date of employment end by company\n\n\tpublic $default_c_exp_tax_cat;\n\tpublic $default_range;\n\n\t/**\n\t *@var int id of warehouse\n\t */\n\tpublic $fk_warehouse;\n\n\tpublic $fields = array(\n\t\t'rowid'=>array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'index'=>1, 'position'=>1, 'comment'=>'Id'),\n\t\t'lastname'=>array('type'=>'varchar(50)', 'label'=>'Name', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>1, 'index'=>1, 'position'=>20, 'searchall'=>1),\n\t\t'firstname'=>array('type'=>'varchar(50)', 'label'=>'Name', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>1, 'index'=>1, 'position'=>10, 'searchall'=>1),\n\t);\n\n\n\tconst STATUS_DISABLED = 0;\n\tconst STATUS_ENABLED = 1;\n\n\n\n\t/**\n\t *    Constructor of the class\n\t *\n\t *    @param   DoliDb  $db     Database handler\n\t */\n\tpublic function __construct($db)\n\t{\n\t\t$this->db = $db;\n\n\t\t// User preference\n\t\t$this->liste_limit = 0;\n\t\t$this->clicktodial_loaded = 0;\n\n\t\t// For cache usage\n\t\t$this->all_permissions_are_loaded = 0;\n\t\t$this->nb_rights = 0;\n\n\t\t// Force some default values\n\t\t$this->admin = 0;\n\t\t$this->employee = 1;\n\n\t\t$this->conf = new stdClass();\n\t\t$this->rights = new stdClass();\n\t\t$this->rights->user = new stdClass();\n\t\t$this->rights->user->user = new stdClass();\n\t\t$this->rights->user->self = new stdClass();\n\t}\n\n\t/**\n\t *\tLoad a user from database with its id or ref (login).\n\t *  This function does not load permissions, only user properties. Use getrights() for this just after the fetch.\n\t *\n\t *\t@param\tint\t\t$id\t\t       \t\tIf defined, id to used for search\n\t * \t@param  string\t$login       \t\tIf defined, login to used for search\n\t *\t@param  string\t$sid\t\t\t\tIf defined, sid to used for search\n\t * \t@param\tint\t\t$loadpersonalconf\t1=also load personal conf of user (in $user->conf->xxx), 0=do not load personal conf.\n\t *  @param  int     $entity             If a value is >= 0, we force the search on a specific entity. If -1, means search depens on default setup.\n\t *  @param\tint\t\t$email       \t\tIf defined, email to used for search\n\t * \t@return\tint\t\t\t\t\t\t\t<0 if KO, 0 not found, >0 if OK\n\t */\n\tpublic function fetch($id = '', $login = '', $sid = '', $loadpersonalconf = 0, $entity = -1, $email = '')\n\t{\n\t\tglobal $conf, $user;\n\n\t\t// Clean parameters\n\t\t$login = trim($login);\n\n\t\t// Get user\n\t\t$sql = \"SELECT u.rowid, u.lastname, u.firstname, u.employee, u.gender, u.civility as civility_code, u.birth, u.email, u.personal_email, u.job,\";\n\t\t$sql .= \" u.socialnetworks,\";\n\t\t$sql .= \" u.signature, u.office_phone, u.office_fax, u.user_mobile, u.personal_mobile,\";\n\t\t$sql .= \" u.address, u.zip, u.town, u.fk_state as state_id, u.fk_country as country_id,\";\n\t\t$sql .= \" u.admin, u.login, u.note as note_private, u.note_public,\";\n\t\t$sql .= \" u.pass, u.pass_crypted, u.pass_temp, u.api_key,\";\n\t\t$sql .= \" u.fk_soc, u.fk_socpeople, u.fk_member, u.fk_user, u.ldap_sid, u.fk_user_expense_validator, u.fk_user_holiday_validator,\";\n\t\t$sql .= \" u.statut, u.lang, u.entity,\";\n\t\t$sql .= \" u.datec as datec,\";\n\t\t$sql .= \" u.tms as datem,\";\n\t\t$sql .= \" u.datelastlogin as datel,\";\n\t\t$sql .= \" u.datepreviouslogin as datep,\";\n\t\t$sql .= \" u.datelastpassvalidation,\";\n\t\t$sql .= \" u.datestartvalidity,\";\n\t\t$sql .= \" u.dateendvalidity,\";\n\t\t$sql .= \" u.photo as photo,\";\n\t\t$sql .= \" u.openid as openid,\";\n\t\t$sql .= \" u.accountancy_code,\";\n\t\t$sql .= \" u.thm,\";\n\t\t$sql .= \" u.tjm,\";\n\t\t$sql .= \" u.salary,\";\n\t\t$sql .= \" u.salaryextra,\";\n\t\t$sql .= \" u.weeklyhours,\";\n\t\t$sql .= \" u.color,\";\n\t\t$sql .= \" u.dateemployment, u.dateemploymentend,\";\n\t\t$sql .= \" u.fk_warehouse,\";\n\t\t$sql .= \" u.ref_ext,\";\n\t\t$sql .= \" u.default_range, u.default_c_exp_tax_cat,\"; // Expense report default mode\n\t\t$sql .= \" c.code as country_code, c.label as country,\";\n\t\t$sql .= \" d.code_departement as state_code, d.nom as state\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_country as c ON u.fk_country = c.rowid\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_departements as d ON u.fk_state = d.rowid\";\n\n\t\tif ($entity < 0) {\n\t\t\tif ((empty($conf->multicompany->enabled) || empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) && (!empty($user->entity))) {\n\t\t\t\t$sql .= \" WHERE u.entity IN (0, \".((int) $conf->entity).\")\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" WHERE u.entity IS NOT NULL\"; // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\t}\n\t\t} else {\n\t\t\t// The fetch was forced on an entity\n\t\t\tif (!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t$sql .= \" WHERE u.entity IS NOT NULL\"; // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\t} else {\n\t\t\t\t$sql .= \" WHERE u.entity IN (0, \".((int) (($entity != '' && $entity >= 0) ? $entity : $conf->entity)).\")\"; // search in entity provided in parameter\n\t\t\t}\n\t\t}\n\n\t\tif ($sid) {    // permet une recherche du user par son SID ActiveDirectory ou Samba\n\t\t\t$sql .= \" AND (u.ldap_sid = '\".$this->db->escape($sid).\"' OR u.login = '\".$this->db->escape($login).\"') LIMIT 1\";\n\t\t} elseif ($login) {\n\t\t\t$sql .= \" AND u.login = '\".$this->db->escape($login).\"'\";\n\t\t} elseif ($email) {\n\t\t\t$sql .= \" AND u.email = '\".$this->db->escape($email).\"'\";\n\t\t} else {\n\t\t\t$sql .= \" AND u.rowid = \".((int) $id);\n\t\t}\n\t\t$sql .= \" ORDER BY u.entity ASC\"; // Avoid random result when there is 2 login in 2 different entities\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\tif ($obj) {\n\t\t\t\t$this->id = $obj->rowid;\n\t\t\t\t$this->ref = $obj->rowid;\n\n\t\t\t\t$this->ref_ext = $obj->ref_ext;\n\n\t\t\t\t$this->ldap_sid = $obj->ldap_sid;\n\t\t\t\t$this->civility_code = $obj->civility_code;\n\t\t\t\t$this->lastname = $obj->lastname;\n\t\t\t\t$this->firstname = $obj->firstname;\n\n\t\t\t\t$this->employee = $obj->employee;\n\n\t\t\t\t$this->login = $obj->login;\n\t\t\t\t$this->gender       = $obj->gender;\n\t\t\t\t$this->birth        = $this->db->jdate($obj->birth);\n\t\t\t\t$this->pass_indatabase = $obj->pass;\n\t\t\t\t$this->pass_indatabase_crypted = $obj->pass_crypted;\n\t\t\t\t$this->pass = $obj->pass;\n\t\t\t\t$this->pass_temp\t= $obj->pass_temp;\n\t\t\t\t$this->api_key = $obj->api_key;\n\n\t\t\t\t$this->address \t\t= $obj->address;\n\t\t\t\t$this->zip \t\t\t= $obj->zip;\n\t\t\t\t$this->town \t\t= $obj->town;\n\n\t\t\t\t$this->country_id = $obj->country_id;\n\t\t\t\t$this->country_code = $obj->country_id ? $obj->country_code : '';\n\t\t\t\t//$this->country = $obj->country_id?($langs->trans('Country'.$obj->country_code)!='Country'.$obj->country_code?$langs->transnoentities('Country'.$obj->country_code):$obj->country):'';\n\n\t\t\t\t$this->state_id     = $obj->state_id;\n\t\t\t\t$this->state_code   = $obj->state_code;\n\t\t\t\t$this->state        = ($obj->state != '-' ? $obj->state : '');\n\n\t\t\t\t$this->office_phone\t= $obj->office_phone;\n\t\t\t\t$this->office_fax   = $obj->office_fax;\n\t\t\t\t$this->user_mobile  = $obj->user_mobile;\n\t\t\t\t$this->personal_mobile = $obj->personal_mobile;\n\t\t\t\t$this->email = $obj->email;\n\t\t\t\t$this->personal_email = $obj->personal_email;\n\t\t\t\t$this->socialnetworks = (array) json_decode($obj->socialnetworks, true);\n\t\t\t\t$this->job = $obj->job;\n\t\t\t\t$this->signature = $obj->signature;\n\t\t\t\t$this->admin\t\t= $obj->admin;\n\t\t\t\t$this->note_public = $obj->note_public;\n\t\t\t\t$this->note_private = $obj->note_private;\n\t\t\t\t$this->note\t\t\t= $obj->note_private;\n\t\t\t\t$this->statut\t\t= $obj->statut;\n\t\t\t\t$this->photo\t\t= $obj->photo;\n\t\t\t\t$this->openid\t\t= $obj->openid;\n\t\t\t\t$this->lang\t\t\t= $obj->lang;\n\t\t\t\t$this->entity\t\t= $obj->entity;\n\t\t\t\t$this->accountancy_code = $obj->accountancy_code;\n\t\t\t\t$this->thm\t\t\t= $obj->thm;\n\t\t\t\t$this->tjm\t\t\t= $obj->tjm;\n\t\t\t\t$this->salary = $obj->salary;\n\t\t\t\t$this->salaryextra = $obj->salaryextra;\n\t\t\t\t$this->weeklyhours = $obj->weeklyhours;\n\t\t\t\t$this->color = $obj->color;\n\t\t\t\t$this->dateemployment = $this->db->jdate($obj->dateemployment);\n\t\t\t\t$this->dateemploymentend = $this->db->jdate($obj->dateemploymentend);\n\n\t\t\t\t$this->datec\t\t\t\t= $this->db->jdate($obj->datec);\n\t\t\t\t$this->datem\t\t\t\t= $this->db->jdate($obj->datem);\n\t\t\t\t$this->datelastlogin = $this->db->jdate($obj->datel);\n\t\t\t\t$this->datepreviouslogin = $this->db->jdate($obj->datep);\n\t\t\t\t$this->datestartvalidity = $this->db->jdate($obj->datestartvalidity);\n\t\t\t\t$this->dateendvalidity = $this->db->jdate($obj->dateendvalidity);\n\n\t\t\t\t$this->socid                = $obj->fk_soc;\n\t\t\t\t$this->contact_id           = $obj->fk_socpeople;\n\t\t\t\t$this->fk_member            = $obj->fk_member;\n\t\t\t\t$this->fk_user = $obj->fk_user;\n\t\t\t\t$this->fk_user_expense_validator = $obj->fk_user_expense_validator;\n\t\t\t\t$this->fk_user_holiday_validator = $obj->fk_user_holiday_validator;\n\n\t\t\t\t$this->default_range = $obj->default_range;\n\t\t\t\t$this->default_c_exp_tax_cat = $obj->default_c_exp_tax_cat;\n\t\t\t\t$this->fk_warehouse = $obj->fk_warehouse;\n\n\t\t\t\t// Protection when module multicompany was set, admin was set to first entity and then, the module was disabled,\n\t\t\t\t// in such case, this admin user must be admin for ALL entities.\n\t\t\t\tif (empty($conf->multicompany->enabled) && $this->admin && $this->entity == 1) {\n\t\t\t\t\t$this->entity = 0;\n\t\t\t\t}\n\n\t\t\t\t// Retrieve all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t$this->db->free($result);\n\t\t\t} else {\n\t\t\t\t$this->error = \"USERNOTFOUND\";\n\t\t\t\tdol_syslog(get_class($this).\"::fetch user not found\", LOG_DEBUG);\n\n\t\t\t\t$this->db->free($result);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\n\t\t// To get back the global configuration unique to the user\n\t\tif ($loadpersonalconf) {\n\t\t\t// Load user->conf for user\n\t\t\t$sql = \"SELECT param, value FROM \".MAIN_DB_PREFIX.\"user_param\";\n\t\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\t\t\t$sql .= \" AND entity = \".$conf->entity;\n\t\t\t//dol_syslog(get_class($this).'::fetch load personalized conf', LOG_DEBUG);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t$p = (!empty($obj->param) ? $obj->param : '');\n\t\t\t\t\tif (!empty($p)) {\n\t\t\t\t\t\t$this->conf->$p = $obj->value;\n\t\t\t\t\t}\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\treturn -2;\n\t\t\t}\n\n\t\t\t$result = $this->loadDefaultValues();\n\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Load default values from database table into property ->default_values\n\t *\n\t *  @return int\t\t\t\t\t\t> 0 if OK, < 0 if KO\n\t */\n\tpublic function loadDefaultValues()\n\t{\n\t\tglobal $conf;\n\t\tif (!empty($conf->global->MAIN_ENABLE_DEFAULT_VALUES)) {\n\t\t\t// Load user->default_values for user. TODO Save this in memcached ?\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/defaultvalues.class.php';\n\n\t\t\t$defaultValues = new DefaultValues($this->db);\n\t\t\t$result = $defaultValues->fetchAll('', '', 0, 0, array('t.user_id'=>array(0, $this->id), 'entity'=>array((isset($this->entity) ? $this->entity : $conf->entity), $conf->entity)));\t// User 0 (all) + me (if defined)\n\n\t\t\tif (!is_array($result) && $result < 0) {\n\t\t\t\tsetEventMessages($defaultValues->error, $defaultValues->errors, 'errors');\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t} elseif (count($result) > 0) {\n\t\t\t\tforeach ($result as $defval) {\n\t\t\t\t\tif (!empty($defval->page) && !empty($defval->type) && !empty($defval->param)) {\n\t\t\t\t\t\t$pagewithoutquerystring = $defval->page;\n\t\t\t\t\t\t$pagequeries = '';\n\t\t\t\t\t\t$reg = array();\n\t\t\t\t\t\tif (preg_match('/^([^\\?]+)\\?(.*)$/', $pagewithoutquerystring, $reg)) {    // There is query param\n\t\t\t\t\t\t\t$pagewithoutquerystring = $reg[1];\n\t\t\t\t\t\t\t$pagequeries = $reg[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->default_values[$pagewithoutquerystring][$defval->type][$pagequeries ? $pagequeries : '_noquery_'][$defval->param] = $defval->value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!empty($this->default_values)) {\n\t\t\t\tforeach ($this->default_values as $a => $b) {\n\t\t\t\t\tforeach ($b as $c => $d) {\n\t\t\t\t\t\tkrsort($this->default_values[$a][$c]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Add a right to the user\n\t *\n\t * \t@param\tint\t\t$rid\t\t\tId of permission to add or 0 to add several permissions\n\t *  @param  string\t$allmodule\t\tAdd all permissions of module $allmodule or 'allmodules' to include all modules.\n\t *  @param  string\t$allperms\t\tAdd all permissions of module $allmodule, subperms $allperms only or '' to include all permissions.\n\t *  @param\tint\t\t$entity\t\t\tEntity to use\n\t *  @param  int\t    $notrigger\t\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int\t\t\t\t\t\t> 0 if OK, < 0 if KO\n\t *  @see\tclearrights(), delrights(), getrights()\n\t */\n\tpublic function addrights($rid, $allmodule = '', $allperms = '', $entity = 0, $notrigger = 0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$entity = (!empty($entity) ? $entity : $conf->entity);\n\n\t\tdol_syslog(get_class($this).\"::addrights $rid, $allmodule, $allperms, $entity\");\n\t\t$error = 0;\n\t\t$whereforadd = '';\n\n\t\t$this->db->begin();\n\n\t\tif (!empty($rid)) {\n\t\t\t$module = $perms = $subperms = '';\n\n\t\t\t// Si on a demande ajout d'un droit en particulier, on recupere les caracteristiques (module, perms et subperms) de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE id = \".((int) $rid);\n\t\t\t$sql .= \" AND entity = \".((int) $entity);\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\t$whereforadd = \"id=\".((int) $rid);\n\t\t\t// Ajout des droits induits\n\t\t\tif (!empty($subperms)) {\n\t\t\t\t$whereforadd .= \" OR (module='\".$this->db->escape($module).\"' AND perms='\".$this->db->escape($perms).\"' AND (subperms='lire' OR subperms='read'))\";\n\t\t\t} elseif (!empty($perms)) {\n\t\t\t\t$whereforadd .= \" OR (module='\".$this->db->escape($module).\"' AND (perms='lire' OR perms='read') AND subperms IS NULL)\";\n\t\t\t}\n\t\t} else {\n\t\t\t// On a pas demande un droit en particulier mais une liste de droits\n\t\t\t// sur la base d'un nom de module de de perms\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\tif (!empty($allmodule)) {\n\t\t\t\tif ($allmodule == 'allmodules') {\n\t\t\t\t\t$whereforadd = 'allmodules';\n\t\t\t\t} else {\n\t\t\t\t\t$whereforadd = \"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\t\t\tif (!empty($allperms)) {\n\t\t\t\t\t\t$whereforadd .= \" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add automatically other permission using the criteria whereforadd\n\t\tif (!empty($whereforadd)) {\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE entity = \".$entity;\n\t\t\tif (!empty($whereforadd) && $whereforadd != 'allmodules') {\n\t\t\t\t$sql .= \" AND \".$whereforadd;\n\t\t\t}\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id.\" AND fk_id=\".$nid.\" AND entity = \".$entity;\n\t\t\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (entity, fk_user, fk_id) VALUES (\".$entity.\", \".$this->id.\", \".$nid.\")\";\n\t\t\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (!$error && !$notrigger) {\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsAdd\").($rid ? ' (id='.$rid.')' : ''));\n\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t} else {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Remove a right to the user\n\t *\n\t *  @param\tint\t\t$rid        Id du droit a retirer\n\t *  @param  string\t$allmodule  Retirer tous les droits du module allmodule\n\t *  @param  string\t$allperms   Retirer tous les droits du module allmodule, perms allperms\n\t *  @param\tint\t\t$entity\t\tEntity to use\n\t *  @param  int\t    $notrigger\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int         \t\t> 0 if OK, < 0 if OK\n\t *  @see\tclearrights(), addrights(), getrights()\n\t */\n\tpublic function delrights($rid, $allmodule = '', $allperms = '', $entity = 0, $notrigger = 0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$error = 0;\n\t\t$wherefordel = '';\n\t\t$entity = (!empty($entity) ? $entity : $conf->entity);\n\n\t\t$this->db->begin();\n\n\t\tif (!empty($rid)) {\n\t\t\t$module = $perms = $subperms = '';\n\n\t\t\t// Si on a demande supression d'un droit en particulier, on recupere\n\t\t\t// les caracteristiques module, perms et subperms de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE id = '\".$this->db->escape($rid).\"'\";\n\t\t\t$sql .= \" AND entity = \".$entity;\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\t$wherefordel = \"id=\".((int) $rid);\n\t\t\t// Suppression des droits induits\n\t\t\tif ($subperms == 'lire' || $subperms == 'read') {\n\t\t\t\t$wherefordel .= \" OR (module='\".$this->db->escape($module).\"' AND perms='\".$this->db->escape($perms).\"' AND subperms IS NOT NULL)\";\n\t\t\t}\n\t\t\tif ($perms == 'lire' || $perms == 'read') {\n\t\t\t\t$wherefordel .= \" OR (module='\".$this->db->escape($module).\"')\";\n\t\t\t}\n\t\t} else {\n\t\t\t// On a demande suppression d'un droit sur la base d'un nom de module ou perms\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\tif (!empty($allmodule)) {\n\t\t\t\tif ($allmodule == 'allmodules') {\n\t\t\t\t\t$wherefordel = 'allmodules';\n\t\t\t\t} else {\n\t\t\t\t\t$wherefordel = \"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\t\t\tif (!empty($allperms)) {\n\t\t\t\t\t\t$wherefordel .= \" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Suppression des droits selon critere defini dans wherefordel\n\t\tif (!empty($wherefordel)) {\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE entity = \".$entity;\n\t\t\tif (!empty($wherefordel) && $wherefordel != 'allmodules') {\n\t\t\t\t$sql .= \" AND \".$wherefordel;\n\t\t\t}\n\n\t\t\t// avoid admin can remove his own important rights\n\t\t\tif ($this->admin == 1) {\n\t\t\t\t$sql .= \" AND id NOT IN (251, 252, 253, 254, 255, 256)\"; // other users rights\n\t\t\t\t$sql .= \" AND id NOT IN (341, 342, 343, 344)\"; // own rights\n\t\t\t\t$sql .= \" AND id NOT IN (351, 352, 353, 354)\"; // groups rights\n\t\t\t\t$sql .= \" AND id NOT IN (358)\"; // user export\n\t\t\t}\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights\";\n\t\t\t\t\t$sql .= \" WHERE fk_user = \".$this->id.\" AND fk_id = \".((int) $nid);\n\t\t\t\t\t$sql .= \" AND entity = \".$entity;\n\t\t\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (!$error && !$notrigger) {\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsDelete\").($rid ? ' (id='.$rid.')' : ''));\n\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t} else {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Clear all permissions array of user\n\t *\n\t *  @return\tvoid\n\t *  @see\tgetrights()\n\t */\n\tpublic function clearrights()\n\t{\n\t\tdol_syslog(get_class($this).\"::clearrights reset user->rights\");\n\t\t$this->rights = null;\n\t\t$this->nb_rights = 0;\n\t\t$this->all_permissions_are_loaded = 0;\n\t\t$this->_tab_loaded = array();\n\t}\n\n\n\t/**\n\t *\tLoad permissions granted to user into object user\n\t *\n\t *\t@param  string\t$moduletag\t\tLimit permission for a particular module ('' by default means load all permissions)\n\t *  @param\tint\t\t$forcereload\tForce reload of permissions even if they were already loaded (ignore cache)\n\t *\t@return\tvoid\n\t *  @see\tclearrights(), delrights(), addrights()\n\t */\n\tpublic function getrights($moduletag = '', $forcereload = 0)\n\t{\n\t\tglobal $conf;\n\n\t\tif (empty($forcereload)) {\n\t\t\tif ($moduletag && isset($this->_tab_loaded[$moduletag]) && $this->_tab_loaded[$moduletag]) {\n\t\t\t\t// Rights for this module are already loaded, so we leave\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!empty($this->all_permissions_are_loaded)) {\n\t\t\t\t// We already loaded all rights for this user, so we leave\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Get permission of users + Get permissions of groups\n\n\t\t// First user permissions\n\t\t$sql = \"SELECT DISTINCT r.module, r.perms, r.subperms\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user_rights as ur\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql .= \" WHERE r.id = ur.fk_id\";\n\t\tif (!empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY)) {\n\t\t\t$sql .= \" AND r.entity IN (0,\".(!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) ? \"1,\" : \"\").$conf->entity.\")\";\n\t\t} else {\n\t\t\t$sql .= \" AND ur.entity = \".((int) $conf->entity);\n\t\t}\n\t\t$sql .= \" AND ur.fk_user= \".((int) $this->id);\n\t\t$sql .= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) {\n\t\t\t$sql .= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\n\t\t\t\t\tif (!empty($perms)) {\n\t\t\t\t\t\tif (!isset($this->rights) || !is_object($this->rights)) {\n\t\t\t\t\t\t\t$this->rights = new stdClass(); // For avoid error\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($module)) {\n\t\t\t\t\t\t\tif (!isset($this->rights->$module) || !is_object($this->rights->$module)) {\n\t\t\t\t\t\t\t\t$this->rights->$module = new stdClass();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!empty($subperms)) {\n\t\t\t\t\t\t\t\tif (!isset($this->rights->$module->$perms) || !is_object($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms->$subperms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->rights->$module->$perms = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// Now permissions of groups\n\t\t$sql = \"SELECT DISTINCT r.module, r.perms, r.subperms\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"usergroup_rights as gr,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"usergroup_user as gu,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql .= \" WHERE r.id = gr.fk_id\";\n\t\tif (!empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY)) {\n\t\t\tif (!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t$sql .= \" AND gu.entity IN (0,\".$conf->entity.\")\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" AND r.entity = \".$conf->entity;\n\t\t\t}\n\t\t} else {\n\t\t\t$sql .= \" AND gr.entity = \".$conf->entity;\n\t\t\t$sql .= \" AND gu.entity = \".$conf->entity;\n\t\t\t$sql .= \" AND r.entity = \".$conf->entity;\n\t\t}\n\t\t$sql .= \" AND gr.fk_usergroup = gu.fk_usergroup\";\n\t\t$sql .= \" AND gu.fk_user = \".$this->id;\n\t\t$sql .= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) {\n\t\t\t$sql .= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\n\t\t\t\t\tif (!empty($perms)) {\n\t\t\t\t\t\tif (!isset($this->rights) || !is_object($this->rights)) {\n\t\t\t\t\t\t\t$this->rights = new stdClass(); // For avoid error\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($module)) {\n\t\t\t\t\t\t\tif (!isset($this->rights->$module) || !is_object($this->rights->$module)) {\n\t\t\t\t\t\t\t\t$this->rights->$module = new stdClass();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!empty($subperms)) {\n\t\t\t\t\t\t\t\tif (!isset($this->rights->$module->$perms) || !is_object($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms->$subperms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// if we have already define a subperm like this $this->rights->$module->level1->level2 with llx_user_rights, we don't want override level1 because the level2 can be not define on user group\n\t\t\t\t\t\t\t\tif (!isset($this->rights->$module->$perms) || !is_object($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->rights->$module->$perms = 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// For backward compatibility\n\t\tif (isset($this->rights->propale) && !isset($this->rights->propal)) {\n\t\t\t$this->rights->propal = $this->rights->propale;\n\t\t}\n\t\tif (isset($this->rights->propal) && !isset($this->rights->propale)) {\n\t\t\t$this->rights->propale = $this->rights->propal;\n\t\t}\n\n\t\tif (!$moduletag) {\n\t\t\t// Si module etait non defini, alors on a tout charge, on peut donc considerer\n\t\t\t// que les droits sont en cache (car tous charges) pour cet instance de user\n\t\t\t$this->all_permissions_are_loaded = 1;\n\t\t} else {\n\t\t\t// If module defined, we flag it as loaded into cache\n\t\t\t$this->_tab_loaded[$moduletag] = 1;\n\t\t}\n\t}\n\n\t/**\n\t *  Change status of a user\n\t *\n\t *\t@param\tint\t\t$status\t\tStatus to set\n\t *  @return int     \t\t\t<0 if KO, 0 if nothing is done, >0 if OK\n\t */\n\tpublic function setstatus($status)\n\t{\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error = 0;\n\n\t\t// Check parameters\n\t\tif ($this->statut == $status) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t// Save in database\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" SET statut = \".((int) $status);\n\t\t$sql .= \" WHERE rowid = \".((int) $this->id);\n\t\t$result = $this->db->query($sql);\n\n\t\tdol_syslog(get_class($this).\"::setstatus\", LOG_DEBUG);\n\t\tif ($result) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_ENABLEDISABLE', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t} else {\n\t\t\t$this->status = $status;\n\t\t\t$this->statut = $status;\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param int[]|int $categories Category or categories IDs\n\t * @return void\n\t */\n\tpublic function setCategories($categories)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n\t\treturn parent::setCategoriesCommon($categories, Categorie::TYPE_USER);\n\t}\n\n\t/**\n\t *  Delete the user\n\t *\n\t *\t@param\t\tUser\t$user\tUser than delete\n\t * \t@return\t\tint\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function delete(User $user)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$this->fetch($this->id);\n\n\t\tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\n\t\t// Remove rights\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id;\n\n\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// Remove group\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user WHERE fk_user  = \".$this->id;\n\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// Remove params\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_param WHERE fk_user  = \".$this->id;\n\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// If contact, remove link\n\t\tif ($this->contact_id > 0) {\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"socpeople SET fk_user_creat = null WHERE rowid = \".((int) $this->contact_id);\n\t\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\t\t}\n\n\t\t// Remove extrafields\n\t\tif (!$error) {\n\t\t\t$result = $this->deleteExtraFields();\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t\t}\n\t\t}\n\n\t\t// Remove user\n\t\tif (!$error) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user WHERE rowid = \".$this->id;\n\t\t\tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_DELETE', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a user into database\n\t *\n\t *  @param\tUser\t$user        \tObjet user doing creation\n\t *  @param  int\t\t$notrigger\t\t1=do not execute triggers, 0 otherwise\n\t *  @return int\t\t\t         \t<0 if KO, id of created user if OK\n\t */\n\tpublic function create($user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\t\tglobal $mysoc;\n\n\t\t// Clean parameters\n\t\t$this->setUpperOrLowerCase();\n\n\t\t$this->civility_code = trim($this->civility_code);\n\t\t$this->login = trim($this->login);\n\t\tif (!isset($this->entity)) {\n\t\t\t$this->entity = $conf->entity; // If not defined, we use default value\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::create login=\".$this->login.\", user=\".(is_object($user) ? $user->id : ''), LOG_DEBUG);\n\n\t\t// Check parameters\n\t\tif (!empty($conf->global->USER_MAIL_REQUIRED) && !isValidEMail($this->email)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\", $this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Login\"));\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->datec = dol_now();\n\n\t\t$error = 0;\n\t\t$this->db->begin();\n\n\t\t// Check if login already exists in same entity or into entity 0.\n\t\tif ($this->login) {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND login = '\".$this->db->escape($this->login).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorLoginAlreadyExists\", $this->login);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -6;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resqltochecklogin);\n\t\t\t}\n\t\t}\n\t\tif ($this->email !== '') {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND email = '\".$this->db->escape($this->email).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorEmailAlreadyExists\", $this->email);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -6;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resqltochecklogin);\n\t\t\t}\n\t\t}\n\n\t\t// Insert into database\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user (datec, login, ldap_sid, entity)\";\n\t\t$sql .= \" VALUES('\".$this->db->idate($this->datec).\"','\".$this->db->escape($this->login).\"','\".$this->db->escape($this->ldap_sid).\"',\".$this->db->escape($this->entity).\")\";\n\t\t$result = $this->db->query($sql);\n\n\t\tdol_syslog(get_class($this).\"::create\", LOG_DEBUG);\n\t\tif ($result) {\n\t\t\t$this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"user\");\n\n\t\t\t// Set default rights\n\t\t\tif ($this->set_default_rights() < 0) {\n\t\t\t\t$this->error = 'ErrorFailedToSetDefaultRightOfUser';\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -5;\n\t\t\t}\n\n\t\t\tif (!empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER) && !empty($conf->global->STOCK_USERSTOCK_AUTOCREATE)) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\t\t\t\t$langs->load(\"stocks\");\n\t\t\t\t$entrepot = new Entrepot($this->db);\n\t\t\t\t$entrepot->label = $langs->trans(\"PersonalStock\", $this->getFullName($langs));\n\t\t\t\t$entrepot->libelle = $entrepot->label; // For backward compatibility\n\t\t\t\t$entrepot->description = $langs->trans(\"ThisWarehouseIsPersonalStock\", $this->getFullName($langs));\n\t\t\t\t$entrepot->statut = 1;\n\t\t\t\t$entrepot->country_id = $mysoc->country_id;\n\t\t\t\t$warehouseid = $entrepot->create($user);\n\n\t\t\t\t$this->fk_warehouse = $warehouseid;\n\t\t\t}\n\n\t\t\t// Update minor fields\n\t\t\t$result = $this->update($user, 1, 1);\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -4;\n\t\t\t}\n\n\t\t\tif (!$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t} else {\n\t\t\t\t//$this->error=$interface->error;\n\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Create a user from a contact object. User will be internal but if contact is linked to a third party, user will be external\n\t *\n\t *  @param\tContact\t$contact    Object for source contact\n\t * \t@param  string\t$login      Login to force\n\t *  @param  string\t$password   Password to force\n\t *  @return int \t\t\t\t<0 if error, if OK returns id of created user\n\t */\n\tpublic function create_from_contact($contact, $login = '', $password = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $langs;\n\n\t\t$error = 0;\n\n\t\t// Define parameters\n\t\t$this->admin = 0;\n\t\t$this->civility_code = $contact->civility_code;\n\t\t$this->lastname = $contact->lastname;\n\t\t$this->firstname = $contact->firstname;\n\t\t$this->gender = $contact->gender;\n\t\t$this->email = $contact->email;\n\t\t$this->socialnetworks = $contact->socialnetworks;\n\t\t$this->office_phone = $contact->phone_pro;\n\t\t$this->office_fax = $contact->fax;\n\t\t$this->user_mobile = $contact->phone_mobile;\n\t\t$this->address = $contact->address;\n\t\t$this->zip = $contact->zip;\n\t\t$this->town = $contact->town;\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->state_id = $contact->state_id;\n\t\t$this->country_id = $contact->country_id;\n\t\t$this->employee = 0;\n\n\t\tif (empty($login)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\t\t\t$login = dol_buildlogin($contact->lastname, $contact->firstname);\n\t\t}\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Create user and set $this->id. Trigger is disabled because executed later.\n\t\t$result = $this->create($user, 1);\n\t\tif ($result > 0) {\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql .= \" SET fk_socpeople=\".((int) $contact->id);\n\t\t\t$sql .= \", civility='\".$this->db->escape($contact->civility_code).\"'\";\n\t\t\tif ($contact->socid > 0) {\n\t\t\t\t$sql .= \", fk_soc=\".((int) $contact->socid);\n\t\t\t}\n\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t$resql = $this->db->query($sql);\n\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact\", LOG_DEBUG);\n\t\t\tif ($resql) {\n\t\t\t\t$this->context['createfromcontact'] = 'createfromcontact';\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++; $this->db->rollback(); return -1;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->error();\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\t// $this->error deja positionne\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact - 0\");\n\n\t\t\t$this->db->rollback();\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Create a user into database from a member object.\n\t *  If $member->fk_soc is set, it will be an external user.\n\t *\n\t *  @param\tAdherent\t\t$member\t\tObject member source\n\t * \t@param\tstring\t\t\t$login\t\tLogin to force\n\t *  @return int\t\t\t\t\t\t\t<0 if KO, if OK, return id of created account\n\t */\n\tpublic function create_from_member($member, $login = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $langs;\n\n\t\t// Set properties on new user\n\t\t$this->admin = 0;\n\t\t$this->civility_code = $member->civility_id;\n\t\t$this->lastname     = $member->lastname;\n\t\t$this->firstname    = $member->firstname;\n\t\t$this->gender\t\t= $member->gender;\n\t\t$this->email        = $member->email;\n\t\t$this->fk_member    = $member->id;\n\t\t$this->address      = $member->address;\n\t\t$this->zip          = $member->zip;\n\t\t$this->town         = $member->town;\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->state_id     = $member->state_id;\n\t\t$this->country_id   = $member->country_id;\n\t\t$this->socialnetworks = $member->socialnetworks;\n\n\t\t$this->pass         = $member->pass;\n\t\t$this->pass_crypted = $member->pass_indatabase_crypted;\n\n\t\tif (empty($login)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\t\t\t$login = dol_buildlogin($member->lastname, $member->firstname);\n\t\t}\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Create and set $this->id\n\t\t$result = $this->create($user);\n\t\tif ($result > 0) {\n\t\t\tif (!empty($this->pass)) {\t// If a clear password was received (this situation should not happen anymore now), we use it to save it into database\n\t\t\t\t$newpass = $this->setPassword($user, $this->pass);\n\t\t\t\tif (is_numeric($newpass) && $newpass < 0) {\n\t\t\t\t\t$result = -2;\n\t\t\t\t}\n\t\t\t} elseif (!empty($this->pass_crypted)) {\t// If a crypted password is already known, we save it directly into database because the previous create did not save it.\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t$sql .= \" SET pass_crypted = '\".$this->db->escape($this->pass_crypted).\"'\";\n\t\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif (!$resql) {\n\t\t\t\t\t$result = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($result > 0 && $member->fk_soc) {\t// If member is linked to a thirdparty\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t$sql .= \" SET fk_soc=\".((int) $member->fk_soc);\n\t\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t\tdol_syslog(get_class($this).\"::create_from_member\", LOG_DEBUG);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif ($resql) {\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->id;\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($result > 0) {\n\t\t\t$this->db->commit();\n\t\t\treturn $this->id;\n\t\t} else {\n\t\t\t// $this->error deja positionne\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Assign rights by default\n\t *\n\t *    @return     integer erreur <0, si ok renvoi le nbre de droits par defaut positionnes\n\t */\n\tpublic function set_default_rights()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$rd = array();\n\t\t$num = 0;\n\t\t$sql = \"SELECT id FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t$sql .= \" WHERE bydefault = 1\";\n\t\t$sql .= \" AND entity = \".$conf->entity;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$row = $this->db->fetch_row($resql);\n\t\t\t\t$rd[$i] = $row[0];\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\t\t$i = 0;\n\t\twhile ($i < $num) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = $this->id AND fk_id=$rd[$i]\";\n\t\t\t$result = $this->db->query($sql);\n\n\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (fk_user, fk_id) VALUES ($this->id, $rd[$i])\";\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif (!$result) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\n\t\treturn $i;\n\t}\n\n\t/**\n\t *  \tUpdate a user into database (and also password if this->pass is defined)\n\t *\n\t *\t\t@param\tUser\t$user\t\t\t\tUser making update\n\t *    \t@param  int\t\t$notrigger\t\t\t1=do not execute triggers, 0 by default\n\t *\t\t@param\tint\t\t$nosyncmember\t\t0=Synchronize linked member (standard info), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosyncmemberpass\t0=Synchronize linked member (password), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosynccontact\t\t0=Synchronize linked contact, 1=Do not synchronize linked contact\n\t *    \t@return int \t\t        \t\t<0 if KO, >=0 if OK\n\t */\n\tpublic function update($user, $notrigger = 0, $nosyncmember = 0, $nosyncmemberpass = 0, $nosynccontact = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$nbrowsaffected = 0;\n\t\t$error = 0;\n\n\t\tdol_syslog(get_class($this).\"::update notrigger=\".$notrigger.\", nosyncmember=\".$nosyncmember.\", nosyncmemberpass=\".$nosyncmemberpass);\n\n\t\t// Clean parameters\n\t\t$this->civility_code = trim($this->civility_code);\n\t\t$this->lastname     = trim($this->lastname);\n\t\t$this->firstname    = trim($this->firstname);\n\t\t$this->employee    \t= $this->employee ? $this->employee : 0;\n\t\t$this->login        = trim($this->login);\n\t\t$this->gender       = trim($this->gender);\n\t\t$this->pass         = trim($this->pass);\n\t\t$this->api_key      = trim($this->api_key);\n\t\t$this->address = $this->address ? trim($this->address) : trim($this->address);\n\t\t$this->zip = $this->zip ? trim($this->zip) : trim($this->zip);\n\t\t$this->town = $this->town ? trim($this->town) : trim($this->town);\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->state_id = trim($this->state_id);\n\t\t$this->country_id = ($this->country_id > 0) ? $this->country_id : 0;\n\t\t$this->office_phone = trim($this->office_phone);\n\t\t$this->office_fax   = trim($this->office_fax);\n\t\t$this->user_mobile  = trim($this->user_mobile);\n\t\t$this->personal_mobile = trim($this->personal_mobile);\n\t\t$this->email        = trim($this->email);\n\t\t$this->personal_email = trim($this->personal_email);\n\n\t\t$this->job = trim($this->job);\n\t\t$this->signature    = trim($this->signature);\n\t\t$this->note_public  = trim($this->note_public);\n\t\t$this->note_private = trim($this->note_private);\n\t\t$this->openid       = trim(empty($this->openid) ? '' : $this->openid); // Avoid warning\n\t\t$this->admin        = $this->admin ? $this->admin : 0;\n\t\t$this->address = empty($this->address) ? '' : $this->address;\n\t\t$this->zip\t\t\t= empty($this->zip) ? '' : $this->zip;\n\t\t$this->town = empty($this->town) ? '' : $this->town;\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->accountancy_code = trim($this->accountancy_code);\n\t\t$this->color = empty($this->color) ? '' : $this->color;\n\t\t$this->dateemployment = empty($this->dateemployment) ? '' : $this->dateemployment;\n\t\t$this->dateemploymentend = empty($this->dateemploymentend) ? '' : $this->dateemploymentend;\n\t\t$this->datestartvalidity = empty($this->datestartvalidity) ? '' : $this->datestartvalidity;\n\t\t$this->dateendvalidity = empty($this->dateendvalidity) ? '' : $this->dateendvalidity;\n\t\t$this->birth        = trim($this->birth);\n\t\t$this->fk_warehouse = (int) $this->fk_warehouse;\n\n\t\t// Check parameters\n\t\tif (!empty($conf->global->USER_MAIL_REQUIRED) && !isValidEMail($this->email)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\", $this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\", 'Login');\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t// Check if login already exists in same entity or into entity 0.\n\t\tif (!empty($this->oldcopy) && $this->oldcopy->login != $this->login) {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND login = '\".$this->db->escape($this->login).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorLoginAlreadyExists\", $this->login);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!empty($this->oldcopy) && $this->email !== '' && $this->oldcopy->email != $this->email) {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND email = '\".$this->db->escape($this->email).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorEmailAlreadyExists\", $this->email);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update datas\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql .= \" civility = '\".$this->db->escape($this->civility_code).\"'\";\n\t\t$sql .= \", lastname = '\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql .= \", firstname = '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql .= \", employee = \".(int) $this->employee;\n\t\t$sql .= \", login = '\".$this->db->escape($this->login).\"'\";\n\t\t$sql .= \", api_key = \".($this->api_key ? \"'\".$this->db->escape($this->api_key).\"'\" : \"null\");\n\t\t$sql .= \", gender = \".($this->gender != -1 ? \"'\".$this->db->escape($this->gender).\"'\" : \"null\"); // 'man' or 'woman'\n\t\t$sql .= \", birth=\".(strval($this->birth) != '' ? \"'\".$this->db->idate($this->birth).\"'\" : 'null');\n\t\tif (!empty($user->admin)) {\n\t\t\t$sql .= \", admin = \".(int) $this->admin; // admin flag can be set/unset only by an admin user\n\t\t}\n\t\t$sql .= \", address = '\".$this->db->escape($this->address).\"'\";\n\t\t$sql .= \", zip = '\".$this->db->escape($this->zip).\"'\";\n\t\t$sql .= \", town = '\".$this->db->escape($this->town).\"'\";\n\t\t$sql .= \", fk_state = \".((!empty($this->state_id) && $this->state_id > 0) ? \"'\".$this->db->escape($this->state_id).\"'\" : \"null\");\n\t\t$sql .= \", fk_country = \".((!empty($this->country_id) && $this->country_id > 0) ? \"'\".$this->db->escape($this->country_id).\"'\" : \"null\");\n\t\t$sql .= \", office_phone = '\".$this->db->escape($this->office_phone).\"'\";\n\t\t$sql .= \", office_fax = '\".$this->db->escape($this->office_fax).\"'\";\n\t\t$sql .= \", user_mobile = '\".$this->db->escape($this->user_mobile).\"'\";\n\t\t$sql .= \", personal_mobile = '\".$this->db->escape($this->personal_mobile).\"'\";\n\t\t$sql .= \", email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql .= \", personal_email = '\".$this->db->escape($this->personal_email).\"'\";\n\t\t$sql .= \", socialnetworks = '\".$this->db->escape(json_encode($this->socialnetworks)).\"'\";\n\t\t$sql .= \", job = '\".$this->db->escape($this->job).\"'\";\n\t\t$sql .= \", signature = '\".$this->db->escape($this->signature).\"'\";\n\t\t$sql .= \", accountancy_code = '\".$this->db->escape($this->accountancy_code).\"'\";\n\t\t$sql .= \", color = '\".$this->db->escape($this->color).\"'\";\n\t\t$sql .= \", dateemployment=\".(strval($this->dateemployment) != '' ? \"'\".$this->db->idate($this->dateemployment).\"'\" : 'null');\n\t\t$sql .= \", dateemploymentend=\".(strval($this->dateemploymentend) != '' ? \"'\".$this->db->idate($this->dateemploymentend).\"'\" : 'null');\n\t\t$sql .= \", datestartvalidity=\".(strval($this->datestartvalidity) != '' ? \"'\".$this->db->idate($this->datestartvalidity).\"'\" : 'null');\n\t\t$sql .= \", dateendvalidity=\".(strval($this->dateendvalidity) != '' ? \"'\".$this->db->idate($this->dateendvalidity).\"'\" : 'null');\n\t\t$sql .= \", note = '\".$this->db->escape($this->note_private).\"'\";\n\t\t$sql .= \", note_public = '\".$this->db->escape($this->note_public).\"'\";\n\t\t$sql .= \", photo = \".($this->photo ? \"'\".$this->db->escape($this->photo).\"'\" : \"null\");\n\t\t$sql .= \", openid = \".($this->openid ? \"'\".$this->db->escape($this->openid).\"'\" : \"null\");\n\t\t$sql .= \", fk_user = \".($this->fk_user > 0 ? \"'\".$this->db->escape($this->fk_user).\"'\" : \"null\");\n\t\t$sql .= \", fk_user_expense_validator = \".($this->fk_user_expense_validator > 0 ? \"'\".$this->db->escape($this->fk_user_expense_validator).\"'\" : \"null\");\n\t\t$sql .= \", fk_user_holiday_validator = \".($this->fk_user_holiday_validator > 0 ? \"'\".$this->db->escape($this->fk_user_holiday_validator).\"'\" : \"null\");\n\t\tif (isset($this->thm) || $this->thm != '') {\n\t\t\t$sql .= \", thm= \".($this->thm != '' ? \"'\".$this->db->escape($this->thm).\"'\" : \"null\");\n\t\t}\n\t\tif (isset($this->tjm) || $this->tjm != '') {\n\t\t\t$sql .= \", tjm= \".($this->tjm != '' ? \"'\".$this->db->escape($this->tjm).\"'\" : \"null\");\n\t\t}\n\t\tif (isset($this->salary) || $this->salary != '') {\n\t\t\t$sql .= \", salary= \".($this->salary != '' ? \"'\".$this->db->escape($this->salary).\"'\" : \"null\");\n\t\t}\n\t\tif (isset($this->salaryextra) || $this->salaryextra != '') {\n\t\t\t$sql .= \", salaryextra= \".($this->salaryextra != '' ? \"'\".$this->db->escape($this->salaryextra).\"'\" : \"null\");\n\t\t}\n\t\t$sql .= \", weeklyhours= \".($this->weeklyhours != '' ? \"'\".$this->db->escape($this->weeklyhours).\"'\" : \"null\");\n\t\t$sql .= \", entity = \".((int) $this->entity);\n\t\t$sql .= \", default_range = \".($this->default_range > 0 ? $this->default_range : 'null');\n\t\t$sql .= \", default_c_exp_tax_cat = \".($this->default_c_exp_tax_cat > 0 ? $this->default_c_exp_tax_cat : 'null');\n\t\t$sql .= \", fk_warehouse = \".($this->fk_warehouse > 0 ? $this->fk_warehouse : \"null\");\n\t\t$sql .= \", lang = \".($this->lang ? \"'\".$this->db->escape($this->lang).\"'\" : \"null\");\n\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$nbrowsaffected += $this->db->affected_rows($resql);\n\n\t\t\t// Update password\n\t\t\tif (!empty($this->pass)) {\n\t\t\t\tif ($this->pass != $this->pass_indatabase && $this->pass != $this->pass_indatabase_crypted) {\n\t\t\t\t\t// Si mot de passe saisi et different de celui en base\n\t\t\t\t\t$result = $this->setPassword($user, $this->pass, 0, $notrigger, $nosyncmemberpass);\n\t\t\t\t\tif (!$nbrowsaffected) {\n\t\t\t\t\t\t$nbrowsaffected++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If user is linked to a member, remove old link to this member\n\t\t\tif ($this->fk_member > 0) {\n\t\t\t\tdol_syslog(get_class($this).\"::update remove link with member. We will recreate it later\", LOG_DEBUG);\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member = NULL where fk_member = \".((int) $this->fk_member);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif (!$resql) {\n\t\t\t\t\t$this->error = $this->db->error(); $this->db->rollback(); return -5;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Set link to user\n\t\t\tdol_syslog(get_class($this).\"::update set link with member\", LOG_DEBUG);\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member =\".($this->fk_member > 0 ? ((int) $this->fk_member) : 'null').\" where rowid = \".((int) $this->id);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (!$resql) {\n\t\t\t\t$this->error = $this->db->error(); $this->db->rollback(); return -5;\n\t\t\t}\n\n\t\t\tif ($nbrowsaffected) {\t// If something has changed in data\n\t\t\t\tif ($this->fk_member > 0 && !$nosyncmember) {\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a member. We try to update member too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t// This user is linked with a member, so we also update member information\n\t\t\t\t\t// if this is an update.\n\t\t\t\t\t$adh = new Adherent($this->db);\n\t\t\t\t\t$result = $adh->fetch($this->fk_member);\n\n\t\t\t\t\tif ($result > 0) {\n\t\t\t\t\t\t$adh->civility_code = $this->civility_code;\n\t\t\t\t\t\t$adh->firstname = $this->firstname;\n\t\t\t\t\t\t$adh->lastname = $this->lastname;\n\t\t\t\t\t\t$adh->login = $this->login;\n\t\t\t\t\t\t$adh->gender = $this->gender;\n\t\t\t\t\t\t$adh->birth = $this->birth;\n\n\t\t\t\t\t\t$adh->pass = $this->pass;\n\n\t\t\t\t\t\t//$adh->societe = (empty($adh->societe) && $this->societe_id ? $this->societe_id : $adh->societe);\n\n\t\t\t\t\t\t$adh->address = $this->address;\n\t\t\t\t\t\t$adh->town = $this->town;\n\t\t\t\t\t\t$adh->zip = $this->zip;\n\t\t\t\t\t\t$adh->state_id = $this->state_id;\n\t\t\t\t\t\t$adh->country_id = $this->country_id;\n\n\t\t\t\t\t\t$adh->email = $this->email;\n\n\t\t\t\t\t\t$adh->socialnetworks = $this->socialnetworks;\n\n\t\t\t\t\t\t$adh->phone = $this->office_phone;\n\t\t\t\t\t\t$adh->phone_mobile = $this->user_mobile;\n\n\t\t\t\t\t\t$adh->user_id = $this->id;\n\t\t\t\t\t\t$adh->user_login = $this->login;\n\n\t\t\t\t\t\t$result = $adh->update($user, 0, 1, 0);\n\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t\t$this->errors = $adh->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} elseif ($result < 0) {\n\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t$this->errors = $adh->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($this->contact_id > 0 && !$nosynccontact) {\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a contact. We try to update contact too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\n\n\t\t\t\t\t// This user is linked with a contact, so we also update contact information if this is an update.\n\t\t\t\t\t$tmpobj = new Contact($this->db);\n\t\t\t\t\t$result = $tmpobj->fetch($this->contact_id);\n\n\t\t\t\t\tif ($result >= 0) {\n\t\t\t\t\t\t$tmpobj->civility_code = $this->civility_code;\n\t\t\t\t\t\t$tmpobj->firstname = $this->firstname;\n\t\t\t\t\t\t$tmpobj->lastname = $this->lastname;\n\t\t\t\t\t\t$tmpobj->login = $this->login;\n\t\t\t\t\t\t$tmpobj->gender = $this->gender;\n\t\t\t\t\t\t$tmpobj->birth = $this->birth;\n\n\t\t\t\t\t\t//$tmpobj->pass=$this->pass;\n\n\t\t\t\t\t\t//$tmpobj->societe=(empty($tmpobj->societe) && $this->societe_id ? $this->societe_id : $tmpobj->societe);\n\n\t\t\t\t\t\t$tmpobj->email = $this->email;\n\n\t\t\t\t\t\t$tmpobj->socialnetworks = $this->socialnetworks;\n\n\t\t\t\t\t\t$tmpobj->phone_pro = $this->office_phone;\n\t\t\t\t\t\t$tmpobj->phone_mobile = $this->user_mobile;\n\t\t\t\t\t\t$tmpobj->fax = $this->office_fax;\n\n\t\t\t\t\t\t$tmpobj->address = $this->address;\n\t\t\t\t\t\t$tmpobj->town = $this->town;\n\t\t\t\t\t\t$tmpobj->zip = $this->zip;\n\t\t\t\t\t\t$tmpobj->state_id = $this->state_id;\n\t\t\t\t\t\t$tmpobj->country_id = $this->country_id;\n\n\t\t\t\t\t\t$tmpobj->user_id = $this->id;\n\t\t\t\t\t\t$tmpobj->user_login = $this->login;\n\n\t\t\t\t\t\t$result = $tmpobj->update($tmpobj->id, $user, 0, 'update', 1);\n\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t$this->error = $tmpobj->error;\n\t\t\t\t\t\t\t$this->errors = $tmpobj->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->error = $tmpobj->error;\n\t\t\t\t\t\t$this->errors = $tmpobj->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$action = 'update';\n\n\t\t\t// Actions on extra fields\n\t\t\tif (!$error) {\n\t\t\t\t$result = $this->insertExtraFields();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $nbrowsaffected;\n\t\t\t} else {\n\t\t\t\tdol_syslog(get_class($this).\"::update error=\".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Mise a jour en base de la date de derniere connexion d'un utilisateur\n\t *  Fonction appelee lors d'une nouvelle connexion\n\t *\n\t *  @return int     <0 si echec, >=0 si ok\n\t */\n\tpublic function update_last_login_date()\n\t{\n\t\t// phpcs:enable\n\t\t$now = dol_now();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql .= \" datepreviouslogin = datelastlogin,\";\n\t\t$sql .= \" datelastlogin = '\".$this->db->idate($now).\"',\";\n\t\t$sql .= \" tms = tms\"; // La date de derniere modif doit changer sauf pour la mise a jour de date de derniere connexion\n\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_last_login_date user->id=\".$this->id.\" \".$sql, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$this->datepreviouslogin = $this->datelastlogin;\n\t\t\t$this->datelastlogin = $now;\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Change password of a user\n\t *\n\t *  @param\tUser\t$user             \t\tObject user of user requesting the change (not the user for who we change the password). May be unknown.\n\t *  @param  string\t$password         \t\tNew password, in clear text or already encrypted (to generate if not provided)\n\t *\t@param\tint\t\t$changelater\t\t\t0=Default, 1=Save password into pass_temp to change password only after clicking on confirm email\n\t *\t@param\tint\t\t$notrigger\t\t\t\t1=Does not launch triggers\n\t *\t@param\tint\t\t$nosyncmember\t        Do not synchronize linked member\n\t *  @param\tint\t\t$passwordalreadycrypted 0=Value is cleartext password, 1=Value is crypted value.\n\t *  @return string \t\t\t          \t\tIf OK return clear password, 0 if no change, < 0 if error\n\t */\n\tpublic function setPassword($user, $password = '', $changelater = 0, $notrigger = 0, $nosyncmember = 0, $passwordalreadycrypted = 0)\n\t{\n\t\tglobal $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\n\t\t$error = 0;\n\n\t\tdol_syslog(get_class($this).\"::setPassword user=\".$user->id.\" password=\".preg_replace('/./i', '*', $password).\" changelater=\".$changelater.\" notrigger=\".$notrigger.\" nosyncmember=\".$nosyncmember, LOG_DEBUG);\n\n\t\t// If new password not provided, we generate one\n\t\tif (!$password) {\n\t\t\t$password = getRandomPassword(false);\n\t\t}\n\n\t\t// Crypt password\n\t\tif (empty($passwordalreadycrypted)) {\n\t\t\t$password_crypted = dol_hash($password);\n\t\t}\n\n\t\t// Update password\n\t\tif (!$changelater) {\n\t\t\tif (!is_object($this->oldcopy)) {\n\t\t\t\t$this->oldcopy = clone $this;\n\t\t\t}\n\n\t\t\t$this->db->begin();\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql .= \" SET pass_crypted = '\".$this->db->escape($password_crypted).\"',\";\n\t\t\t$sql .= \" pass_temp = null\";\n\t\t\tif (!empty($conf->global->DATABASE_PWD_ENCRYPTED)) {\n\t\t\t\t$sql .= \", pass = null\";\n\t\t\t} else {\n\t\t\t\t$sql .= \", pass = '\".$this->db->escape($password).\"'\";\n\t\t\t}\n\t\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG);\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\tif ($this->db->affected_rows($result)) {\n\t\t\t\t\t$this->pass = $password;\n\t\t\t\t\t$this->pass_indatabase = $password;\n\t\t\t\t\t$this->pass_indatabase_crypted = $password_crypted;\n\n\t\t\t\t\tif ($this->fk_member && !$nosyncmember) {\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t\t// This user is linked with a member, so we also update members informations\n\t\t\t\t\t\t// if this is an update.\n\t\t\t\t\t\t$adh = new Adherent($this->db);\n\t\t\t\t\t\t$result = $adh->fetch($this->fk_member);\n\n\t\t\t\t\t\tif ($result >= 0) {\n\t\t\t\t\t\t\t$result = $adh->setPassword($user, $this->pass, (empty($conf->global->DATABASE_PWD_ENCRYPTED) ? 0 : 1), 1); // Cryptage non gere dans module adherent\n\t\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword notrigger=\".$notrigger.\" error=\".$error, LOG_DEBUG);\n\n\t\t\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t\t\t// Call trigger\n\t\t\t\t\t\t$result = $this->call_trigger('USER_NEW_PASSWORD', $user);\n\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t$error++; $this->db->rollback(); return -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// End call triggers\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->pass;\n\t\t\t\t} else {\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\t// We store password in password temporary field.\n\t\t\t// After receiving confirmation link, we will erase and store it in pass_crypted\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql .= \" SET pass_temp = '\".$this->db->escape($password).\"'\";\n\t\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG); // No log\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\treturn $password;\n\t\t\t} else {\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Send new password by email\n\t *\n\t *  @param\tUser\t$user           Object user that send the email (not the user we send too)\n\t *  @param\tstring\t$password       New password\n\t *\t@param\tint\t\t$changelater\t0=Send clear passwod into email, 1=Change password only after clicking on confirm email. @todo Add method 2 = Send link to reset password\n\t *  @return int \t\t            < 0 si erreur, > 0 si ok\n\t */\n\tpublic function send_password($user, $password = '', $changelater = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs, $mysoc;\n\t\tglobal $dolibarr_main_url_root;\n\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/CMailFile.class.php';\n\n\t\t$msgishtml = 0;\n\n\t\t// Define $msg\n\t\t$mesg = '';\n\n\t\t$outputlangs = new Translate(\"\", $conf);\n\n\t\tif (isset($this->conf->MAIN_LANG_DEFAULT)\n\t\t\t&& $this->conf->MAIN_LANG_DEFAULT != 'auto') {\t// If user has defined its own language (rare because in most cases, auto is used)\n\t\t\t\t$outputlangs->getDefaultLang($this->conf->MAIN_LANG_DEFAULT);\n\t\t}\n\n\t\tif ($this->conf->MAIN_LANG_DEFAULT) {\n\t\t\t$outputlangs->setDefaultLang($this->conf->MAIN_LANG_DEFAULT);\n\t\t} else {\t// If user has not defined its own language, we used current language\n\t\t\t$outputlangs = $langs;\n\t\t}\n\n\t\t// Load translation files required by the page\n\t\t$outputlangs->loadLangs(array(\"main\", \"errors\", \"users\", \"other\"));\n\n\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\t}\n\n\t\t$subject = '['.$mysoc->name.'] '.$outputlangs->transnoentitiesnoconv(\"SubjectNewPassword\", $appli);\n\n\t\t// Define $urlwithroot\n\t\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\n\t\tif (!$changelater) {\n\t\t\t$url = $urlwithroot.'/';\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\".\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"NewKeyIs\").\" :\\n\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"Login\").\" = \".$this->login.\"\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"Password\").\" = \".$password.\"\\n\\n\";\n\t\t\t$mesg .= \"\\n\";\n\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"ClickHereToGoTo\", $appli).': '.$url.\"\\n\\n\";\n\t\t\t$mesg .= \"--\\n\";\n\t\t\t$mesg .= $user->getFullName($outputlangs); // Username that send the email (not the user for who we want to reset password)\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is off, url=\".$url);\n\t\t} else {\n\t\t\tglobal $dolibarr_main_instance_unique_id;\n\n\t\t\t//print $password.'-'.$this->id.'-'.$dolibarr_main_instance_unique_id;\n\t\t\t$url = $urlwithroot.'/user/passwordforgotten.php?action=validatenewpassword';\n\t\t\t$url .= '&username='.urlencode($this->login).\"&passworduidhash=\".urlencode(dol_hash($password.'-'.$this->id.'-'.$dolibarr_main_instance_unique_id));\n\n\t\t\t$msgishtml = 1;\n\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\"<br>\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"NewKeyWillBe\").\" :<br>\\n<br>\\n\";\n\t\t\t$mesg .= '<strong>'.$outputlangs->transnoentitiesnoconv(\"Login\").\"</strong> = \".$this->login.\"<br>\\n\";\n\t\t\t$mesg .= '<strong>'.$outputlangs->transnoentitiesnoconv(\"Password\").\"</strong> = \".$password.\"<br>\\n<br>\\n\";\n\t\t\t$mesg .= \"<br>\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"YouMustClickToChange\").\" :<br>\\n\";\n\t\t\t$mesg .= '<a href=\"'.$url.'\" rel=\"noopener\">'.$outputlangs->transnoentitiesnoconv(\"ConfirmPasswordChange\").'</a>'.\"<br>\\n<br>\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"ForgetIfNothing\").\"<br>\\n<br>\\n\";\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is on, url=\".$url);\n\t\t}\n\n\t\t$trackid = 'use'.$this->id;\n\n\t\t$mailfile = new CMailFile(\n\t\t\t$subject,\n\t\t\t$this->email,\n\t\t\t$conf->global->MAIN_MAIL_EMAIL_FROM,\n\t\t\t$mesg,\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\t'',\n\t\t\t'',\n\t\t\t0,\n\t\t\t$msgishtml,\n\t\t\t'',\n\t\t\t'',\n\t\t\t$trackid\n\t\t\t);\n\n\t\tif ($mailfile->sendfile()) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$langs->trans(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFailedToSendPassword\").' '.$mailfile->error;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \t\tRenvoie la derniere erreur fonctionnelle de manipulation de l'objet\n\t *\n\t * \t\t@return    string      chaine erreur\n\t */\n\tpublic function error()\n\t{\n\t\treturn $this->error;\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Read clicktodial information for user\n\t *\n\t *  @return int <0 if KO, >0 if OK\n\t */\n\tpublic function fetch_clicktodial()\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"SELECT url, login, pass, poste \";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user_clicktodial as u\";\n\t\t$sql .= \" WHERE u.fk_user = \".$this->id;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->num_rows($resql)) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->clicktodial_url = $obj->url;\n\t\t\t\t$this->clicktodial_login = $obj->login;\n\t\t\t\t$this->clicktodial_password = $obj->pass;\n\t\t\t\t$this->clicktodial_poste = $obj->poste;\n\t\t\t}\n\n\t\t\t$this->clicktodial_loaded = 1; // Data loaded (found or not)\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Update clicktodial info\n\t *\n\t *  @return\tint  <0 if KO, >0 if OK\n\t */\n\tpublic function update_clicktodial()\n\t{\n\t\t// phpcs:enable\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" (fk_user,url,login,pass,poste)\";\n\t\t$sql .= \" VALUES (\".$this->id;\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_url).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_login).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_password).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_poste).\"')\";\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Add user into a group\n\t *\n\t *  @param\tint\t\t$group      Id of group\n\t *  @param  int\t\t$entity     Entity\n\t *  @param  int\t\t$notrigger  Disable triggers\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function SetInGroup($group, $entity, $notrigger = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql .= \" WHERE fk_user  = \".$this->id;\n\t\t$sql .= \" AND fk_usergroup = \".((int) $group);\n\t\t$sql .= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"usergroup_user (entity, fk_user, fk_usergroup)\";\n\t\t$sql .= \" VALUES (\".$entity.\",\".$this->id.\",\".$group.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t$this->newgroupid = $group; // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserSetInGroup\"), 'newgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\tdol_syslog(get_class($this).\"::SetInGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Remove a user from a group\n\t *\n\t *  @param\tint   \t$group       Id of group\n\t *  @param  int\t\t$entity      Entity\n\t *  @param  int\t\t$notrigger   Disable triggers\n\t *  @return int  \t\t\t     <0 if KO, >0 if OK\n\t */\n\tpublic function RemoveFromGroup($group, $entity, $notrigger = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql .= \" WHERE fk_user  = \".$this->id;\n\t\t$sql .= \" AND fk_usergroup = \".((int) $group);\n\t\t$sql .= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t$this->oldgroupid = $group; // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserRemovedFromGroup\"), 'oldgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\tdol_syslog(get_class($this).\"::RemoveFromGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return a link with photo\n\t * \tUse this->id,this->photo\n\t *\n\t *\t@param\tint\t\t$width\t\t\tWidth of image\n\t *\t@param\tint\t\t$height\t\t\tHeight of image\n\t *  @param\tstring\t$cssclass\t\tForce a css class\n\t * \t@param\tstring\t$imagesize\t\t'mini', 'small' or '' (original)\n\t *\t@return\tstring\t\t\t\t\tString with URL link\n\t */\n\tpublic function getPhotoUrl($width, $height, $cssclass = '', $imagesize = '')\n\t{\n\t\t$result = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$result .= Form::showphoto('userphoto', $this, $width, $height, 0, $cssclass, $imagesize);\n\t\t$result .= '</a>';\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return a link to the user card (with optionaly the picto)\n\t * \tUse this->id,this->lastname, this->firstname\n\t *\n\t *\t@param\tint\t\t$withpictoimg\t\t\t\tInclude picto in link (0=No picto, 1=Include picto into link, 2=Only picto, -1=Include photo into link, -2=Only picto photo, -3=Only photo very small)\n\t *\t@param\tstring\t$option\t\t\t\t\t\tOn what the link point to ('leave', 'accountancy', 'nolink', )\n\t *  @param  integer $infologin      \t\t\t0=Add default info tooltip, 1=Add complete info tooltip, -1=No info tooltip\n\t *  @param\tinteger\t$notooltip\t\t\t\t\t1=Disable tooltip on picto and name\n\t *  @param\tint\t\t$maxlen\t\t\t\t\t\tMax length of visible user name\n\t *  @param\tint\t\t$hidethirdpartylogo\t\t\tHide logo of thirdparty if user is external user\n\t *  @param  string  $mode               \t\t''=Show firstname and lastname, 'firstname'=Show only firstname, 'firstelselast'=Show firstname or lastname if not defined, 'login'=Show login\n\t *  @param  string  $morecss            \t\tAdd more css on link\n\t *  @param  int     $save_lastsearch_value    \t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\tstring\t\t\t\t\t\t\t\tString with URL\n\t */\n\tpublic function getNomUrl($withpictoimg = 0, $option = '', $infologin = 0, $notooltip = 0, $maxlen = 24, $hidethirdpartylogo = 0, $mode = '', $morecss = '', $save_lastsearch_value = -1)\n\t{\n\t\tglobal $langs, $conf, $db, $hookmanager, $user;\n\t\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\t\tglobal $menumanager;\n\n\t\tif (!$user->rights->user->user->lire && $user->id != $this->id) {\n\t\t\t$option = 'nolink';\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && $withpictoimg) {\n\t\t\t$withpictoimg = 0;\n\t\t}\n\n\t\t$result = ''; $label = '';\n\t\t$companylink = '';\n\n\t\tif (!empty($this->photo)) {\n\t\t\t$label .= '<div class=\"photointooltip\">';\n\t\t\t$label .= Form::showphoto('userphoto', $this, 0, 60, 0, 'photowithmargin photologintooltip', 'small', 0, 1); // Force height to 60 so we total height of tooltip can be calculated and collision can be managed\n\t\t\t$label .= '</div><div style=\"clear: both;\"></div>';\n\t\t}\n\n\t\t// Info Login\n\t\t$label .= '<div class=\"centpercent\">';\n\t\t$label .= img_picto('', $this->picto).' <u class=\"paddingrightonly\">'.$langs->trans(\"User\").'</u>';\n\t\t$label .= ' '.$this->getLibStatut(4);\n\t\t$label .= '<br><b>'.$langs->trans('Name').':</b> '.dol_string_nohtmltag($this->getFullName($langs, ''));\n\t\tif (!empty($this->login)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('Login').':</b> '.dol_string_nohtmltag($this->login);\n\t\t}\n\t\tif (!empty($this->job)) {\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Job\").':</b> '.dol_string_nohtmltag($this->job);\n\t\t}\n\t\t$label .= '<br><b>'.$langs->trans(\"Email\").':</b> '.dol_string_nohtmltag($this->email);\n\t\tif (!empty($this->office_phone) || !empty($this->office_fax) || !empty($this->fax)) {\n\t\t\t$phonelist = array();\n\t\t\tif ($this->office_phone) {\n\t\t\t\t$phonelist[] = dol_print_phone($this->office_phone, $this->country_code, $this->id, 0, '', '&nbsp', 'phone');\n\t\t\t}\n\t\t\tif ($this->office_fax) {\n\t\t\t\t$phonelist[] = dol_print_phone($this->office_fax, $this->country_code, $this->id, 0, '', '&nbsp', 'fax');\n\t\t\t}\n\t\t\tif ($this->user_mobile) {\n\t\t\t\t$phonelist[] = dol_print_phone($this->user_mobile, $this->country_code, $this->id, 0, '', '&nbsp', 'mobile');\n\t\t\t}\n\t\t\t$label .= '<br><b>'.$langs->trans('Phone').':</b> '.implode('&nbsp;', $phonelist);\n\t\t}\n\t\tif (!empty($this->admin)) {\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Administrator\").'</b>: '.yn($this->admin);\n\t\t}\n\t\tif (!empty($this->accountancy_code) || $option == 'accountancy') {\n\t\t\t$label .= '<br><b>'.$langs->trans(\"AccountancyCode\").'</b>: '.$this->accountancy_code;\n\t\t}\n\t\t$company = '';\n\t\tif (!empty($this->socid)) {\t// Add thirdparty for external users\n\t\t\t$thirdpartystatic = new Societe($db);\n\t\t\t$thirdpartystatic->fetch($this->socid);\n\t\t\tif (empty($hidethirdpartylogo)) {\n\t\t\t\t$companylink = ' '.$thirdpartystatic->getNomUrl(2, (($option == 'nolink') ? 'nolink' : '')); // picto only of company\n\t\t\t}\n\t\t\t$company = ' ('.$langs->trans(\"Company\").': '.dol_string_nohtmltag($thirdpartystatic->name).')';\n\t\t}\n\t\t$type = ($this->socid ? $langs->trans(\"External\").$company : $langs->trans(\"Internal\"));\n\t\t$label .= '<br><b>'.$langs->trans(\"Type\").':</b> '.dol_string_nohtmltag($type);\n\t\t$label .= '</div>';\n\t\tif ($infologin > 0) {\n\t\t\t$label .= '<br>';\n\t\t\t$label .= '<br><u>'.$langs->trans(\"Session\").'</u>';\n\t\t\t$label .= '<br><b>'.$langs->trans(\"IPAddress\").'</b>: '.dol_string_nohtmltag(getUserRemoteIP());\n\t\t\tif (!empty($conf->global->MAIN_MODULE_MULTICOMPANY)) {\n\t\t\t\t$label .= '<br><b>'.$langs->trans(\"ConnectedOnMultiCompany\").':</b> '.$conf->entity.' (User entity '.$this->entity.')';\n\t\t\t}\n\t\t\t$label .= '<br><b>'.$langs->trans(\"AuthenticationMode\").':</b> '.dol_string_nohtmltag($_SESSION[\"dol_authmode\"].(empty($dolibarr_main_demo) ? '' : ' (demo)'));\n\t\t\t$label .= '<br><b>'.$langs->trans(\"ConnectedSince\").':</b> '.dol_print_date($this->datelastlogin, \"dayhour\", 'tzuser');\n\t\t\t$label .= '<br><b>'.$langs->trans(\"PreviousConnexion\").':</b> '.dol_print_date($this->datepreviouslogin, \"dayhour\", 'tzuser');\n\t\t\t$label .= '<br><b>'.$langs->trans(\"CurrentTheme\").':</b> '.dol_string_nohtmltag($conf->theme);\n\t\t\t$label .= '<br><b>'.$langs->trans(\"CurrentMenuManager\").':</b> '.dol_string_nohtmltag($menumanager->name);\n\t\t\t$s = picto_from_langcode($langs->getDefaultLang());\n\t\t\t$label .= '<br><b>'.$langs->trans(\"CurrentUserLanguage\").':</b> '.dol_string_nohtmltag(($s ? $s.' ' : '').$langs->getDefaultLang());\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Browser\").':</b> '.dol_string_nohtmltag($conf->browser->name.($conf->browser->version ? ' '.$conf->browser->version : '').' ('.$_SERVER['HTTP_USER_AGENT'].')');\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Layout\").':</b> '.dol_string_nohtmltag($conf->browser->layout);\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Screen\").':</b> '.dol_string_nohtmltag($_SESSION['dol_screenwidth'].' x '.$_SESSION['dol_screenheight']);\n\t\t\tif ($conf->browser->layout == 'phone') {\n\t\t\t\t$label .= '<br><b>'.$langs->trans(\"Phone\").':</b> '.$langs->trans(\"Yes\");\n\t\t\t}\n\t\t\tif (!empty($_SESSION[\"disablemodules\"])) {\n\t\t\t\t$label .= '<br><b>'.$langs->trans(\"DisabledModules\").':</b> <br>'.dol_string_nohtmltag(join(', ', explode(',', $_SESSION[\"disablemodules\"])));\n\t\t\t}\n\t\t}\n\t\tif ($infologin < 0) {\n\t\t\t$label = '';\n\t\t}\n\n\t\t$url = DOL_URL_ROOT.'/user/card.php?id='.$this->id;\n\t\tif ($option == 'leave') {\n\t\t\t$url = DOL_URL_ROOT.'/holiday/list.php?id='.$this->id;\n\t\t}\n\n\t\tif ($option != 'nolink') {\n\t\t\t// Add param to save lastsearch_values or not\n\t\t\t$add_save_lastsearch_values = ($save_lastsearch_value == 1 ? 1 : 0);\n\t\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/', $_SERVER[\"PHP_SELF\"])) {\n\t\t\t\t$add_save_lastsearch_values = 1;\n\t\t\t}\n\t\t\tif ($add_save_lastsearch_values) {\n\t\t\t\t$url .= '&save_lastsearch_values=1';\n\t\t\t}\n\t\t}\n\n\t\t$linkstart = '<a href=\"'.$url.'\"';\n\t\t$linkclose = \"\";\n\t\tif (empty($notooltip)) {\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$langs->load(\"users\");\n\t\t\t\t$label = $langs->trans(\"ShowUser\");\n\t\t\t\t$linkclose .= ' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t}\n\t\t\t$linkclose .= ' title=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t$linkclose .= ' class=\"classfortooltip'.($morecss ? ' '.$morecss : '').'\"';\n\n\t\t\t/*\n\t\t\t $hookmanager->initHooks(array('userdao'));\n\t\t\t $parameters=array('id'=>$this->id);\n\t\t\t $reshook=$hookmanager->executeHooks('getnomurltooltip',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\t\t if ($reshook > 0) $linkclose = $hookmanager->resPrint;\n\t\t\t */\n\t\t}\n\n\t\t$linkstart .= $linkclose.'>';\n\t\t$linkend = '</a>';\n\n\t\t//if ($withpictoimg == -1) $result.='<div class=\"nowrap\">';\n\t\t$result .= (($option == 'nolink') ? '' : $linkstart);\n\t\tif ($withpictoimg) {\n\t\t\t$paddafterimage = '';\n\t\t\tif (abs($withpictoimg) == 1) {\n\t\t\t\t$paddafterimage = 'style=\"margin-'.($langs->trans(\"DIRECTION\") == 'rtl' ? 'left' : 'right').': 3px;\"';\n\t\t\t}\n\t\t\t// Only picto\n\t\t\tif ($withpictoimg > 0) {\n\t\t\t\t$picto = '<!-- picto user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\">'.img_object('', 'user', $paddafterimage.' '.($notooltip ? '' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1).'</span>';\n\t\t\t} else {\n\t\t\t\t// Picto must be a photo\n\t\t\t\t$picto = '<!-- picto photo user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\"'.($paddafterimage ? ' '.$paddafterimage : '').'>'.Form::showphoto('userphoto', $this, 0, 0, 0, 'userphoto'.($withpictoimg == -3 ? 'small' : ''), 'mini', 0, 1).'</span>';\n\t\t\t}\n\t\t\t$result .= $picto;\n\t\t}\n\t\tif ($withpictoimg > -2 && $withpictoimg != 2) {\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$result .= '<span class=\"nopadding usertext'.((!isset($this->statut) || $this->statut) ? '' : ' strikefordisabled').($morecss ? ' '.$morecss : '').'\">';\n\t\t\t}\n\t\t\tif ($mode == 'login') {\n\t\t\t\t$result .= dol_string_nohtmltag(dol_trunc($this->login, $maxlen));\n\t\t\t} else {\n\t\t\t\t$result .= dol_string_nohtmltag($this->getFullName($langs, '', ($mode == 'firstelselast' ? 3 : ($mode == 'firstname' ? 2 : -1)), $maxlen));\n\t\t\t}\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$result .= '</span>';\n\t\t\t}\n\t\t}\n\t\t$result .= (($option == 'nolink') ? '' : $linkend);\n\t\t//if ($withpictoimg == -1) $result.='</div>';\n\n\t\t$result .= $companylink;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('userdao'));\n\t\t$parameters = array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook = $hookmanager->executeHooks('getNomUrl', $parameters, $this, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) {\n\t\t\t$result = $hookmanager->resPrint;\n\t\t} else {\n\t\t\t$result .= $hookmanager->resPrint;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return clickable link of login (eventualy with picto)\n\t *\n\t *\t@param\tint\t\t$withpictoimg\t\tInclude picto into link\n\t *\t@param\tstring\t$option\t\t\t\tOn what the link point to ('leave', 'accountancy', 'nolink', )\n\t *  @param\tinteger\t$notooltip\t\t\t1=Disable tooltip on picto and name\n\t *  @param  string  $morecss       \t\tAdd more css on link\n\t *\t@return\tstring\t\t\t\t\t\tString with URL\n\t */\n\tpublic function getLoginUrl($withpictoimg = 0, $option = '', $notooltip = 0, $morecss = '')\n\t{\n\t\tglobal $langs, $user;\n\n\t\t$result = '';\n\n\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$linkend = '</a>';\n\n\t\t//Check user's rights to see an other user\n\t\tif ((!$user->rights->user->user->lire && $this->id != $user->id)) {\n\t\t\t$option = 'nolink';\n\t\t}\n\n\t\tif ($option == 'xxx') {\n\t\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t\t$linkend = '</a>';\n\t\t}\n\n\t\tif ($option == 'nolink') {\n\t\t\t$linkstart = '';\n\t\t\t$linkend = '';\n\t\t}\n\n\t\t$result .= $linkstart;\n\t\tif ($withpictoimg) {\n\t\t\t$paddafterimage = '';\n\t\t\tif (abs($withpictoimg) == 1) {\n\t\t\t\t$paddafterimage = 'style=\"margin-'.($langs->trans(\"DIRECTION\") == 'rtl' ? 'left' : 'right').': 3px;\"';\n\t\t\t}\n\t\t\t// Only picto\n\t\t\tif ($withpictoimg > 0) {\n\t\t\t\t$picto = '<!-- picto user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\">'.img_object('', 'user', $paddafterimage.' '.($notooltip ? '' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1).'</span>';\n\t\t\t} else {\n\t\t\t\t// Picto must be a photo\n\t\t\t\t$picto = '<!-- picto photo user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\"'.($paddafterimage ? ' '.$paddafterimage : '').'>'.Form::showphoto('userphoto', $this, 0, 0, 0, 'userphoto'.($withpictoimg == -3 ? 'small' : ''), 'mini', 0, 1).'</span>';\n\t\t\t}\n\t\t\t$result .= $picto;\n\t\t}\n\t\t$result .= $this->login;\n\t\t$result .= $linkend;\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return the label of the status of user (active, inactive)\n\t *\n\t *  @param  int\t\t$mode          0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return\tstring \t\t\t       Label of status\n\t */\n\tpublic function getLibStatut($mode = 0)\n\t{\n\t\treturn $this->LibStatut($this->statut, $mode);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return the label of a status of user (active, inactive)\n\t *\n\t *  @param  int     $status         Id status\n\t *  @param  int\t\t$mode           0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return string                  Label of status\n\t */\n\tpublic function LibStatut($status, $mode = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $langs;\n\n\t\tif (empty($this->labelStatus) || empty($this->labelStatusShort)) {\n\t\t\tglobal $langs;\n\t\t\t//$langs->load(\"mymodule\");\n\t\t\t$this->labelStatus[self::STATUS_ENABLED] = $langs->trans('Enabled');\n\t\t\t$this->labelStatus[self::STATUS_DISABLED] = $langs->trans('Disabled');\n\t\t\t$this->labelStatusShort[self::STATUS_ENABLED] = $langs->trans('Enabled');\n\t\t\t$this->labelStatusShort[self::STATUS_DISABLED] = $langs->trans('Disabled');\n\t\t}\n\n\t\t$statusType = 'status5';\n\t\tif ($status == self::STATUS_ENABLED) {\n\t\t\t$statusType = 'status4';\n\t\t}\n\n\t\treturn dolGetStatus($this->labelStatus[$status], $this->labelStatusShort[$status], '', $statusType, $mode);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.PublicUnderscore\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tRetourne chaine DN complete dans l'annuaire LDAP pour l'objet\n\t *\n\t *\t@param\tarray\t$info\t\tInfo array loaded by _load_ldap_info\n\t *\t@param\tint\t\t$mode\t\t0=Return full DN (uid=qqq,ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t1=Return parent (ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t2=Return key only (RDN) (uid=qqq)\n\t *\t@return\tstring\t\t\t\tDN\n\t */\n\tpublic function _load_ldap_dn($info, $mode = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\t$dn = '';\n\t\tif ($mode == 0) {\n\t\t\t$dn = $conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS].\",\".$conf->global->LDAP_USER_DN;\n\t\t} elseif ($mode == 1) {\n\t\t\t$dn = $conf->global->LDAP_USER_DN;\n\t\t} elseif ($mode == 2) {\n\t\t\t$dn = $conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS];\n\t\t}\n\t\treturn $dn;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.PublicUnderscore\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tInitialize the info array (array of LDAP values) that will be used to call LDAP functions\n\t *\n\t *\t@return\t\tarray\t\tTableau info des attributs\n\t */\n\tpublic function _load_ldap_info()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs;\n\n\t\t$info = array();\n\n\t\t$socialnetworks = getArrayOfSocialNetworks();\n\n\t\t$keymodified = false;\n\n\t\t// Object classes\n\t\t$info[\"objectclass\"] = explode(',', $conf->global->LDAP_USER_OBJECT_CLASS);\n\n\t\t$this->fullname = $this->getFullName($langs);\n\n\t\t// Possible LDAP KEY (constname => varname)\n\t\t$ldapkey = array(\n\t\t\t'LDAP_FIELD_FULLNAME'\t=> 'fullname',\n\t\t\t'LDAP_FIELD_NAME'\t\t=> 'lastname',\n\t\t\t'LDAP_FIELD_FIRSTNAME'\t=> 'firstname',\n\t\t\t'LDAP_FIELD_LOGIN'\t\t=> 'login',\n\t\t\t'LDAP_FIELD_LOGIN_SAMBA'=> 'login',\n\t\t\t'LDAP_FIELD_PHONE'\t\t=> 'office_phone',\n\t\t\t'LDAP_FIELD_MOBILE'\t\t=> 'user_mobile',\n\t\t\t'LDAP_FIELD_FAX'\t\t=> 'office_fax',\n\t\t\t'LDAP_FIELD_MAIL'\t\t=> 'email',\n\t\t\t'LDAP_FIELD_SID'\t\t=> 'ldap_sid',\n\t\t);\n\n\t\t// Champs\n\t\tforeach ($ldapkey as $constname => $varname) {\n\t\t\tif (!empty($this->$varname) && !empty($conf->global->$constname)) {\n\t\t\t\t$info[$conf->global->$constname] = $this->$varname;\n\n\t\t\t\t// Check if it is the LDAP key and if its value has been changed\n\t\t\t\tif (!empty($conf->global->LDAP_KEY_USERS) && $conf->global->LDAP_KEY_USERS == $conf->global->$constname) {\n\t\t\t\t\tif (!empty($this->oldcopy) && $this->$varname != $this->oldcopy->$varname) {\n\t\t\t\t\t\t$keymodified = true; // For check if LDAP key has been modified\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\tif ($this->socialnetworks[$value['label']] && !empty($conf->global->{'LDAP_FIELD_'.strtoupper($value['label'])})) {\n\t\t\t\t$info[$conf->global->{'LDAP_FIELD_'.strtoupper($value['label'])}] = $this->socialnetworks[$value['label']];\n\t\t\t}\n\t\t}\n\t\tif ($this->address && !empty($conf->global->LDAP_FIELD_ADDRESS)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_ADDRESS] = $this->address;\n\t\t}\n\t\tif ($this->zip && !empty($conf->global->LDAP_FIELD_ZIP)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_ZIP] = $this->zip;\n\t\t}\n\t\tif ($this->town && !empty($conf->global->LDAP_FIELD_TOWN)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_TOWN] = $this->town;\n\t\t}\n\t\tif ($this->note_public && !empty($conf->global->LDAP_FIELD_DESCRIPTION)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_DESCRIPTION] = dol_string_nohtmltag($this->note_public, 2);\n\t\t}\n\t\tif ($this->socid > 0) {\n\t\t\t$soc = new Societe($this->db);\n\t\t\t$soc->fetch($this->socid);\n\n\t\t\t$info[$conf->global->LDAP_FIELD_COMPANY] = $soc->name;\n\t\t\tif ($soc->client == 1) {\n\t\t\t\t$info[\"businessCategory\"] = \"Customers\";\n\t\t\t}\n\t\t\tif ($soc->client == 2) {\n\t\t\t\t$info[\"businessCategory\"] = \"Prospects\";\n\t\t\t}\n\t\t\tif ($soc->fournisseur == 1) {\n\t\t\t\t$info[\"businessCategory\"] = \"Suppliers\";\n\t\t\t}\n\t\t}\n\n\t\t// When password is modified\n\t\tif (!empty($this->pass)) {\n\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD)) {\n\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass; // this->pass = mot de passe non crypte\n\t\t\t}\n\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED)) {\n\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass, 4); // Create OpenLDAP MD5 password (TODO add type of encryption)\n\t\t\t}\n\t\t} elseif ($conf->global->LDAP_SERVER_PROTOCOLVERSION !== '3') {\n\t\t\t// Set LDAP password if possible\n\t\t\t// If ldap key is modified and LDAPv3 we use ldap_rename function for avoid lose encrypt password\n\t\t\tif (!empty($conf->global->DATABASE_PWD_ENCRYPTED)) {\n\t\t\t\t// Just for the default MD5 !\n\t\t\t\tif (empty($conf->global->MAIN_SECURITY_HASH_ALGO)) {\n\t\t\t\t\tif ($this->pass_indatabase_crypted && !empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED)) {\n\t\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase_crypted, 5); // Create OpenLDAP MD5 password from Dolibarr MD5 password\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} elseif (!empty($this->pass_indatabase)) {\n\t\t\t\t// Use $this->pass_indatabase value if exists\n\t\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD)) {\n\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass_indatabase; // $this->pass_indatabase = mot de passe non crypte\n\t\t\t\t}\n\t\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED)) {\n\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase, 4); // md5 for OpenLdap TODO add type of encryption\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($conf->global->LDAP_SERVER_TYPE == 'egroupware') {\n\t\t\t$info[\"objectclass\"][4] = \"phpgwContact\"; // compatibilite egroupware\n\n\t\t\t$info['uidnumber'] = $this->id;\n\n\t\t\t$info['phpgwTz'] = 0;\n\t\t\t$info['phpgwMailType'] = 'INTERNET';\n\t\t\t$info['phpgwMailHomeType'] = 'INTERNET';\n\n\t\t\t$info[\"phpgwContactTypeId\"] = 'n';\n\t\t\t$info[\"phpgwContactCatId\"] = 0;\n\t\t\t$info[\"phpgwContactAccess\"] = \"public\";\n\n\t\t\tif (dol_strlen($this->egroupware_id) == 0) {\n\t\t\t\t$this->egroupware_id = 1;\n\t\t\t}\n\n\t\t\t$info[\"phpgwContactOwner\"] = $this->egroupware_id;\n\n\t\t\tif ($this->email) {\n\t\t\t\t$info[\"rfc822Mailbox\"] = $this->email;\n\t\t\t}\n\t\t\tif ($this->phone_mobile) {\n\t\t\t\t$info[\"phpgwCellTelephoneNumber\"] = $this->phone_mobile;\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($conf->global->LDAP_FIELD_USERID)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_USERID] = $this->id;\n\t\t}\n\t\tif (!empty($conf->global->LDAP_FIELD_GROUPID)) {\n\t\t\t$usergroup = new UserGroup($this->db);\n\t\t\t$groupslist = $usergroup->listGroupsForUser($this->id);\n\t\t\t$info[$conf->global->LDAP_FIELD_GROUPID] = '65534';\n\t\t\tif (!empty($groupslist)) {\n\t\t\t\tforeach ($groupslist as $groupforuser) {\n\t\t\t\t\t$info[$conf->global->LDAP_FIELD_GROUPID] = $groupforuser->id; //Select first group in list\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!empty($conf->global->LDAP_FIELD_HOMEDIRECTORY) && !empty($conf->global->LDAP_FIELD_HOMEDIRECTORYPREFIX)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_HOMEDIRECTORY] = \"{$conf->global->LDAP_FIELD_HOMEDIRECTORYPREFIX}/$this->login\";\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *\tid must be 0 if object instance is a specimen.\n\t *\n\t *  @return\tint\n\t */\n\tpublic function initAsSpecimen()\n\t{\n\t\tglobal $user, $langs;\n\n\t\t$now = dol_now();\n\n\t\t// Initialise parametres\n\t\t$this->id = 0;\n\t\t$this->ref = 'SPECIMEN';\n\t\t$this->specimen = 1;\n\n\t\t$this->lastname = 'DOLIBARR';\n\t\t$this->firstname = 'SPECIMEN';\n\t\t$this->gender = 'man';\n\t\t$this->note_public = 'This is a note public';\n\t\t$this->note_private = 'This is a note private';\n\t\t$this->email = 'email@specimen.com';\n\t\t$this->personal_email = 'personalemail@specimen.com';\n\t\t$this->socialnetworks = array(\n\t\t\t'skype' => 'skypepseudo',\n\t\t\t'twitter' => 'twitterpseudo',\n\t\t\t'facebook' => 'facebookpseudo',\n\t\t\t'linkedin' => 'linkedinpseudo',\n\t\t);\n\t\t$this->office_phone = '0999999999';\n\t\t$this->office_fax = '0999999998';\n\t\t$this->user_mobile = '0999999997';\n\t\t$this->personal_mobile = '0999999996';\n\t\t$this->admin = 0;\n\t\t$this->login = 'dolibspec';\n\t\t$this->pass = 'dolibspec';\n\t\t//$this->pass_indatabase='dolibspec';\t\t\t\t\t\t\t\t\tSet after a fetch\n\t\t//$this->pass_indatabase_crypted='e80ca5a88c892b0aaaf7e154853bccab';\tSet after a fetch\n\t\t$this->datec = $now;\n\t\t$this->datem = $now;\n\n\t\t$this->datelastlogin = $now;\n\t\t$this->datepreviouslogin = $now;\n\t\t$this->statut = 1;\n\n\t\t$this->entity = 1;\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Load info of user object\n\t *\n\t *  @param  int\t\t$id     Id of user to load\n\t *  @return\tvoid\n\t */\n\tpublic function info($id)\n\t{\n\t\t$sql = \"SELECT u.rowid, u.login as ref, u.datec,\";\n\t\t$sql .= \" u.tms as date_modification, u.entity\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql .= \" WHERE u.rowid = \".((int) $id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif ($this->db->num_rows($result)) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->id = $obj->rowid;\n\n\t\t\t\t$this->ref = (!$obj->ref) ? $obj->rowid : $obj->ref;\n\t\t\t\t$this->date_creation = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->date_modification);\n\t\t\t\t$this->entity = $obj->entity;\n\t\t\t}\n\n\t\t\t$this->db->free($result);\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\n\t/**\n\t *    Return number of mass Emailing received by this contacts with its email\n\t *\n\t *    @return       int     Number of EMailings\n\t */\n\tpublic function getNbOfEMailings()\n\t{\n\t\t$sql = \"SELECT count(mc.email) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mailing_cibles as mc\";\n\t\t$sql .= \" WHERE mc.email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql .= \" AND mc.statut NOT IN (-1,0)\"; // -1 erreur, 0 non envoye, 1 envoye avec succes\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb = $obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Return number of existing users\n\t *\n\t *  @param\tstring\t$limitTo\tLimit to '' or 'active'\n\t *  @param\tstring\t$option\t\t'superadmin' = return for entity 0 only\n\t *  @param\tint\t\t$admin\t\tFilter on admin tag\n\t *  @return int  \t\t\t\tNumber of users\n\t */\n\tpublic function getNbOfUsers($limitTo, $option = '', $admin = -1)\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT count(rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\tif ($option == 'superadmin') {\n\t\t\t$sql .= \" WHERE entity = 0\";\n\t\t} else {\n\t\t\t$sql .= \" WHERE entity IN (\".getEntity('user', 0).\")\";\n\t\t\tif ($limitTo == 'active') {\n\t\t\t\t$sql .= \" AND statut = 1\";\n\t\t\t}\n\t\t}\n\t\tif ($admin >= 0) {\n\t\t\t$sql .= \" AND admin = \".(int) $admin;\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb = (int) $obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Update user using data from the LDAP\n\t *\n\t *  @param\tObject\t$ldapuser\tLadp User\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function update_ldap2dolibarr(&$ldapuser)\n\t{\n\t\t// phpcs:enable\n\t\t// TODO: Voir pourquoi le update met \u00e0 jour avec toutes les valeurs vide (global $user \u00e9crase ?)\n\t\tglobal $user, $conf;\n\n\t\t$socialnetworks = getArrayOfSocialNetworks();\n\n\t\t$this->firstname = $ldapuser->{$conf->global->LDAP_FIELD_FIRSTNAME};\n\t\t$this->lastname = $ldapuser->{$conf->global->LDAP_FIELD_NAME};\n\t\t$this->login = $ldapuser->{$conf->global->LDAP_FIELD_LOGIN};\n\t\t$this->pass = $ldapuser->{$conf->global->LDAP_FIELD_PASSWORD};\n\t\t$this->pass_indatabase_crypted = $ldapuser->{$conf->global->LDAP_FIELD_PASSWORD_CRYPTED};\n\n\t\t$this->office_phone = $ldapuser->{$conf->global->LDAP_FIELD_PHONE};\n\t\t$this->user_mobile = $ldapuser->{$conf->global->LDAP_FIELD_MOBILE};\n\t\t$this->office_fax = $ldapuser->{$conf->global->LDAP_FIELD_FAX};\n\t\t$this->email = $ldapuser->{$conf->global->LDAP_FIELD_MAIL};\n\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t$tmpkey = 'LDAP_FIELD_'.strtoupper($value['label']);\n\t\t\t$this->socialnetworks[$value['label']] = $ldapuser->{$conf->global->$tmpkey};\n\t\t}\n\t\t$this->ldap_sid = $ldapuser->{$conf->global->LDAP_FIELD_SID};\n\n\t\t$this->job = $ldapuser->{$conf->global->LDAP_FIELD_TITLE};\n\t\t$this->note_public = $ldapuser->{$conf->global->LDAP_FIELD_DESCRIPTION};\n\n\t\t$result = $this->update($user);\n\n\t\tdol_syslog(get_class($this).\"::update_ldap2dolibarr result=\".$result, LOG_DEBUG);\n\n\t\treturn $result;\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return and array with all instanciated first level children users of current user\n\t *\n\t * @return\tUser[]|int\n\t * @see getAllChildIds()\n\t */\n\tpublic function get_children()\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"SELECT rowid FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::get_children sql=\".$sql, LOG_DEBUG);\n\t\t$res = $this->db->query($sql);\n\t\tif ($res) {\n\t\t\t$users = array();\n\t\t\twhile ($rec = $this->db->fetch_array($res)) {\n\t\t\t\t$user = new User($this->db);\n\t\t\t\t$user->fetch($rec['rowid']);\n\t\t\t\t$users[] = $user;\n\t\t\t}\n\t\t\treturn $users;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Load this->parentof that is array(id_son=>id_parent, ...)\n\t *\n\t *  @return     int     <0 if KO, >0 if OK\n\t */\n\tprivate function loadParentOf()\n\t{\n\t\tglobal $conf;\n\n\t\t$this->parentof = array();\n\n\t\t// Load array[child]=parent\n\t\t$sql = \"SELECT fk_user as id_parent, rowid as id_son\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" WHERE fk_user <> 0\";\n\t\t$sql .= \" AND entity IN (\".getEntity('user').\")\";\n\n\t\tdol_syslog(get_class($this).\"::loadParentOf\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->parentof[$obj->id_son] = $obj->id_parent;\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * \tBuild the hierarchy/tree of users into an array.\n\t *\tSet and return this->users that is an array sorted according to tree with arrays of:\n\t *\t\t\t\tid = id user\n\t *\t\t\t\tlastname\n\t *\t\t\t\tfirstname\n\t *\t\t\t\tfullname = nom avec chemin complet du user\n\t *\t\t\t\tfullpath = chemin complet compose des id: \"_grandparentid_parentid_id\"\n\t *\n\t *  @param      int\t\t$deleteafterid      Removed all users including the leaf $deleteafterid (and all its child) in user tree.\n\t *  @param\t\tstring\t$filter\t\t\t\tSQL filter on users. This parameter must not come from user intput.\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of users $this->users. Note: $this->parentof is also set.\n\t */\n\tpublic function get_full_tree($deleteafterid = 0, $filter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\t\tglobal $hookmanager;\n\n\t\t// Actions hooked (by external module)\n\t\t$hookmanager->initHooks(array('userdao'));\n\n\t\t$this->users = array();\n\n\t\t// Init this->parentof that is array(id_son=>id_parent, ...)\n\t\t$this->loadParentOf();\n\n\t\t// Init $this->users array\n\t\t$sql = \"SELECT DISTINCT u.rowid, u.firstname, u.lastname, u.fk_user, u.fk_soc, u.login, u.email, u.gender, u.admin, u.statut, u.photo, u.entity\"; // Distinct reduce pb with old tables with duplicates\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t// Add fields from hooks\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('printUserListWhere', $parameters); // Note that $action and $object may have been modified by hook\n\t\tif ($reshook > 0) {\n\t\t\t$sql .= $hookmanager->resPrint;\n\t\t} else {\n\t\t\t$sql .= \" WHERE u.entity IN (\".getEntity('user').\")\";\n\t\t}\n\t\tif ($filter) {\n\t\t\t$sql .= \" AND \".$filter;\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree get user list\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->users[$obj->rowid]['rowid'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['id'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['fk_user'] = $obj->fk_user;\n\t\t\t\t$this->users[$obj->rowid]['fk_soc'] = $obj->fk_soc;\n\t\t\t\t$this->users[$obj->rowid]['firstname'] = $obj->firstname;\n\t\t\t\t$this->users[$obj->rowid]['lastname'] = $obj->lastname;\n\t\t\t\t$this->users[$obj->rowid]['login'] = $obj->login;\n\t\t\t\t$this->users[$obj->rowid]['statut'] = $obj->statut;\n\t\t\t\t$this->users[$obj->rowid]['entity'] = $obj->entity;\n\t\t\t\t$this->users[$obj->rowid]['email'] = $obj->email;\n\t\t\t\t$this->users[$obj->rowid]['gender'] = $obj->gender;\n\t\t\t\t$this->users[$obj->rowid]['admin'] = $obj->admin;\n\t\t\t\t$this->users[$obj->rowid]['photo'] = $obj->photo;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\t// We add the fullpath property to each elements of first level (no parent exists)\n\t\tdol_syslog(get_class($this).\"::get_full_tree call to build_path_from_id_user\", LOG_DEBUG);\n\t\tforeach ($this->users as $key => $val) {\n\t\t\t$result = $this->build_path_from_id_user($key, 0); // Process a branch from the root user key (this user has no parent)\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = 'ErrorLoopInHierarchy';\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\t// Exclude leaf including $deleteafterid from tree\n\t\tif ($deleteafterid) {\n\t\t\t//print \"Look to discard user \".$deleteafterid.\"\\n\";\n\t\t\t$keyfilter1 = '^'.$deleteafterid.'$';\n\t\t\t$keyfilter2 = '_'.$deleteafterid.'$';\n\t\t\t$keyfilter3 = '^'.$deleteafterid.'_';\n\t\t\t$keyfilter4 = '_'.$deleteafterid.'_';\n\t\t\tforeach ($this->users as $key => $val) {\n\t\t\t\tif (preg_match('/'.$keyfilter1.'/', $val['fullpath']) || preg_match('/'.$keyfilter2.'/', $val['fullpath'])\n\t\t\t\t\t|| preg_match('/'.$keyfilter3.'/', $val['fullpath']) || preg_match('/'.$keyfilter4.'/', $val['fullpath'])) {\n\t\t\t\t\t\tunset($this->users[$key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree dol_sort_array\", LOG_DEBUG);\n\t\t$this->users = dol_sort_array($this->users, 'fullname', 'asc', true, false);\n\n\t\t//var_dump($this->users);\n\n\t\treturn $this->users;\n\t}\n\n\t/**\n\t * \tReturn list of all child users id in herarchy (all sublevels).\n\t *  Note: Calling this function also reset full list of users into $this->users.\n\t *\n\t *  @param      int      $addcurrentuser    1=Add also current user id to the list.\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of user id lower than user (all levels under user). This overwrite this->users.\n\t *  @see get_children()\n\t */\n\tpublic function getAllChildIds($addcurrentuser = 0)\n\t{\n\t\t$childids = array();\n\n\t\tif (isset($this->cache_childids[$this->id])) {\n\t\t\t$childids = $this->cache_childids[$this->id];\n\t\t} else {\n\t\t\t// Init this->users\n\t\t\t$this->get_full_tree();\n\n\t\t\t$idtoscan = $this->id;\n\n\t\t\tdol_syslog(\"Build childid for id = \".$idtoscan);\n\t\t\tforeach ($this->users as $id => $val) {\n\t\t\t\t//var_dump($val['fullpath']);\n\t\t\t\tif (preg_match('/_'.$idtoscan.'_/', $val['fullpath'])) {\n\t\t\t\t\t$childids[$val['id']] = $val['id'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->cache_childids[$this->id] = $childids;\n\n\t\tif ($addcurrentuser) {\n\t\t\t$childids[$this->id] = $this->id;\n\t\t}\n\n\t\treturn $childids;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tFor user id_user and its childs available in this->users, define property fullpath and fullname.\n\t *  Function called by get_full_tree().\n\t *\n\t * \t@param\t\tint\t\t$id_user\t\tid_user entry to update\n\t * \t@param\t\tint\t\t$protection\t\tDeep counter to avoid infinite loop (no more required, a protection is added with array useridfound)\n\t *\t@return\t\tint                     < 0 if KO (infinit loop), >= 0 if OK\n\t */\n\tpublic function build_path_from_id_user($id_user, $protection = 0)\n\t{\n\t\t// phpcs:enable\n\t\t//dol_syslog(get_class($this).\"::build_path_from_id_user id_user=\".$id_user.\" protection=\".$protection, LOG_DEBUG);\n\n\t\tif (!empty($this->users[$id_user]['fullpath'])) {\n\t\t\t// Already defined\n\t\t\tdol_syslog(get_class($this).\"::build_path_from_id_user fullpath and fullname already defined\", LOG_WARNING);\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Define fullpath and fullname\n\t\t$this->users[$id_user]['fullpath'] = '_'.$id_user;\n\t\t$this->users[$id_user]['fullname'] = $this->users[$id_user]['lastname'];\n\t\t$i = 0; $cursor_user = $id_user;\n\n\t\t$useridfound = array($id_user);\n\t\twhile (!empty($this->parentof[$cursor_user]) && !empty($this->users[$this->parentof[$cursor_user]])) {\n\t\t\tif (in_array($this->parentof[$cursor_user], $useridfound)) {\n\t\t\t\tdol_syslog(\"The hierarchy of user has a recursive loop\", LOG_WARNING);\n\t\t\t\treturn -1; // Should not happen. Protection against looping hierarchy\n\t\t\t}\n\t\t\t$useridfound[] = $this->parentof[$cursor_user];\n\t\t\t$this->users[$id_user]['fullpath'] = '_'.$this->parentof[$cursor_user].$this->users[$id_user]['fullpath'];\n\t\t\t$this->users[$id_user]['fullname'] = $this->users[$this->parentof[$cursor_user]]['lastname'].' >> '.$this->users[$id_user]['fullname'];\n\t\t\t$i++; $cursor_user = $this->parentof[$cursor_user];\n\t\t}\n\n\t\t// We count number of _ to have level\n\t\t$this->users[$id_user]['level'] = dol_strlen(preg_replace('/[^_]/i', '', $this->users[$id_user]['fullpath']));\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param DoliDB $db Database handler\n\t * @param int $origin_id Old thirdparty id\n\t * @param int $dest_id New thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'user',\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *      Load metrics this->nb for dashboard\n\t *\n\t *      @return     int         <0 if KO, >0 if OK\n\t */\n\tpublic function load_state_board()\n\t{\n\t\t// phpcs:enable\n\n\t\t$this->nb = array();\n\n\t\t$sql = \"SELECT count(u.rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql .= \" WHERE u.statut > 0\";\n\t\t//$sql.= \" AND employee != 0\";\n\t\t$sql .= \" AND u.entity IN (\".getEntity('user').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->nb[\"users\"] = $obj->nb;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * \t@param\t    string\t\t$modele\t\t\tForce model to use ('' to not force)\n\t * \t@param\t\tTranslate\t$outputlangs\tObject langs to use for output\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n\t *  @param   null|array  $moreparams     Array to provide more information\n\t * \t@return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails = 0, $hidedesc = 0, $hideref = 0, $moreparams = null)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$langs->load(\"user\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (!dol_strlen($modele)) {\n\t\t\tif (!empty($conf->global->USER_ADDON_PDF)) {\n\t\t\t\t$modele = $conf->global->USER_ADDON_PDF;\n\t\t\t} else {\n\t\t\t\t$modele = 'bluesky';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/user/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref, $moreparams);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return property of user from its id\n\t *\n\t *  @param\tint\t\t$rowid      id of contact\n\t *  @param  string\t$mode       'email' or 'mobile'\n\t *  @return string  \t\t\tEmail of user with format: \"Full name <email>\"\n\t */\n\tpublic function user_get_property($rowid, $mode)\n\t{\n\t\t// phpcs:enable\n\t\t$user_property = '';\n\n\t\tif (empty($rowid)) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$sql = \"SELECT rowid, email, user_mobile, civility, lastname, firstname\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" WHERE rowid = \".((int) $rowid);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$nump = $this->db->num_rows($resql);\n\n\t\t\tif ($nump) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($mode == 'email') {\n\t\t\t\t\t$user_property = dolGetFirstLastname($obj->firstname, $obj->lastname).\" <\".$obj->email.\">\";\n\t\t\t\t} elseif ($mode == 'mobile') {\n\t\t\t\t\t$user_property = $obj->user_mobile;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $user_property;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\t/**\n\t *\tLoad all objects into $this->users\n\t *\n\t *  @param\tstring\t\t$sortorder\t\tsort order\n\t *  @param\tstring\t\t$sortfield\t\tsort field\n\t *  @param\tint\t\t\t$limit\t\t\tlimit page\n\t *  @param\tint\t\t\t$offset\t\t\tpage\n\t *  @param\tarray\t\t$filter\t\t\tFilter array. Example array('field'=>'valueforlike', 'customurl'=>...)\n\t *  @param  string      $filtermode\t\tFilter mode (AND or OR)\n\t *  @param  bool        $entityfilter\tActivate entity filter\n\t *  @return int\t\t\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function fetchAll($sortorder = '', $sortfield = '', $limit = 0, $offset = 0, $filter = array(), $filtermode = 'AND', $entityfilter = false)\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT t.rowid\";\n\t\t$sql .= ' FROM '.MAIN_DB_PREFIX.$this->table_element.' as t ';\n\n\t\tif ($entityfilter) {\n\t\t\tif (!empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\tif (!empty($user->admin) && empty($user->entity) && $conf->entity == 1) {\n\t\t\t\t\t$sql .= \" WHERE t.entity IS NOT NULL\"; // Show all users\n\t\t\t\t} else {\n\t\t\t\t\t$sql .= \",\".MAIN_DB_PREFIX.\"usergroup_user as ug\";\n\t\t\t\t\t$sql .= \" WHERE ((ug.fk_user = t.rowid\";\n\t\t\t\t\t$sql .= \" AND ug.entity IN (\".getEntity('user').\"))\";\n\t\t\t\t\t$sql .= \" OR t.entity = 0)\"; // Show always superadmin\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$sql .= \" WHERE t.entity IN (\".getEntity('user').\")\";\n\t\t\t}\n\t\t} else {\n\t\t\t$sql .= \" WHERE 1 = 1\";\n\t\t}\n\n\t\t// Manage filter\n\t\t$sqlwhere = array();\n\t\tif (!empty($filter)) {\n\t\t\tforeach ($filter as $key => $value) {\n\t\t\t\tif ($key == 't.rowid') {\n\t\t\t\t\t$sqlwhere[] = $key.'='.$value;\n\t\t\t\t} elseif (strpos($key, 'date') !== false) {\n\t\t\t\t\t$sqlwhere[] = $key.' = \\''.$this->db->idate($value).'\\'';\n\t\t\t\t} elseif ($key == 'customsql') {\n\t\t\t\t\t$sqlwhere[] = $value;\n\t\t\t\t} else {\n\t\t\t\t\t$sqlwhere[] = $key.' LIKE \\'%'.$this->db->escape($value).'%\\'';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (count($sqlwhere) > 0) {\n\t\t\t$sql .= ' AND ('.implode(' '.$filtermode.' ', $sqlwhere).')';\n\t\t}\n\t\t$sql .= $this->db->order($sortfield, $sortorder);\n\t\tif ($limit) {\n\t\t\t$sql .= $this->db->plimit($limit + 1, $offset);\n\t\t}\n\n\t\tdol_syslog(__METHOD__, LOG_DEBUG);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$this->users = array();\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\tif ($num) {\n\t\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t\t$line = new self($this->db);\n\t\t\t\t\t$result = $line->fetch($obj->rowid);\n\t\t\t\t\tif ($result > 0 && !empty($line->id)) {\n\t\t\t\t\t\t$this->users[$obj->rowid] = clone $line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\treturn $num;\n\t\t} else {\n\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Cache the SQL results of the function \"findUserIdByEmail($email)\"\n\t *\n\t * NOTE: findUserIdByEmailCache[...] === -1 means not found in database\n\t *\n\t * @var array\n\t */\n\tprivate $findUserIdByEmailCache;\n\n\t/**\n\t * Find a user by the given e-mail and return it's user id when found\n\t *\n\t * NOTE:\n\t * Use AGENDA_DISABLE_EXACT_USER_EMAIL_COMPARE_FOR_EXTERNAL_CALENDAR\n\t * to disable exact e-mail search\n\t *\n\t * @param string\t$email\tThe full e-mail (or a part of a e-mail)\n\t * @return int\t\t\t\t<0 = user was not found, >0 = The id of the user\n\t */\n\tpublic function findUserIdByEmail($email)\n\t{\n\t\tif ($this->findUserIdByEmailCache[$email]) {\n\t\t\treturn $this->findUserIdByEmailCache[$email];\n\t\t}\n\n\t\t$this->findUserIdByEmailCache[$email] = -1;\n\n\t\tglobal $conf;\n\n\t\t$sql = 'SELECT rowid';\n\t\t$sql .= ' FROM '.MAIN_DB_PREFIX.'user';\n\n\t\tif (!empty($conf->global->AGENDA_DISABLE_EXACT_USER_EMAIL_COMPARE_FOR_EXTERNAL_CALENDAR)) {\n\t\t\t$sql .= ' WHERE email LIKE \"%'.$email.'%\"';\n\t\t} else {\n\t\t\t$sql .= ' WHERE email = \"'.$email.'\"';\n\t\t}\n\n\t\t$sql .= ' LIMIT 1';\n\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$obj = $this->db->fetch_object($resql);\n\t\tif (!$obj) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->findUserIdByEmailCache[$email] = (int) $obj->rowid;\n\n\t\treturn $this->findUserIdByEmailCache[$email];\n\t}\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2002-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2002-2003 Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2020 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Eric Seigne          <eric.seigne@ryxeo.com>\n * Copyright (C) 2005-2018 Regis Houssin        <regis.houssin@inodbox.com>\n * Copyright (C) 2005      Lionel Cousteix      <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011      Herve Prot           <herve.prot@symeos.com>\n * Copyright (C) 2012-2018 Juanjo Menent        <jmenent@2byte.es>\n * Copyright (C) 2013      Florian Henry        <florian.henry@open-concept.pro>\n * Copyright (C) 2013-2016 Alexandre Spangaro   <aspangaro@open-dsi.fr>\n * Copyright (C) 2015-2017 Jean-Fran\u00e7ois Ferry  <jfefe@aternatik.fr>\n * Copyright (C) 2015      Ari Elbaz (elarifr)  <github@accedinfo.com>\n * Copyright (C) 2015-2018 Charlene Benke       <charlie@patas-monkey.com>\n * Copyright (C) 2016      Rapha\u00ebl Doursenaud   <rdoursenaud@gpcsolutions.fr>\n * Copyright (C) 2018-2021  Fr\u00e9d\u00e9ric France     <frederic.france@netlogic.fr>\n * Copyright (C) 2018       David Beniamine     <David.Beniamine@Tetras-Libre.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *       \\file       htdocs/user/card.php\n *       \\brief      Tab of user card\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/user.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/usergroup.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/images.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/usergroups.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formadmin.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\nif (!empty($conf->ldap->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/ldap.class.php';\n}\nif (!empty($conf->adherent->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n}\nif (!empty($conf->categorie->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n}\nif (!empty($conf->stock->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/product/class/html.formproduct.class.php';\n}\n\n$id = GETPOST('id', 'int');\n$action\t\t= GETPOST('action', 'aZ09');\n$mode = GETPOST('mode', 'alpha');\n$confirm\t= GETPOST('confirm', 'alpha');\n$group = GETPOST(\"group\", \"int\", 3);\n$cancel\t\t= GETPOST('cancel', 'alpha');\n$contextpage = GETPOST('contextpage', 'aZ') ?GETPOST('contextpage', 'aZ') : 'useracard'; // To manage different context of search\n\n$dateemployment = dol_mktime(0, 0, 0, GETPOST('dateemploymentmonth', 'int'), GETPOST('dateemploymentday', 'int'), GETPOST('dateemploymentyear', 'int'));\n$dateemploymentend = dol_mktime(0, 0, 0, GETPOST('dateemploymentendmonth', 'int'), GETPOST('dateemploymentendday', 'int'), GETPOST('dateemploymentendyear', 'int'));\n$datestartvalidity = dol_mktime(0, 0, 0, GETPOST('datestartvaliditymonth', 'int'), GETPOST('datestartvalidityday', 'int'), GETPOST('datestartvalidityyear', 'int'));\n$dateendvalidity = dol_mktime(0, 0, 0, GETPOST('dateendvaliditymonth', 'int'), GETPOST('dateendvalidityday', 'int'), GETPOST('dateendvalidityyear', 'int'));\n$dateofbirth = dol_mktime(0, 0, 0, GETPOST('dateofbirthmonth', 'int'), GETPOST('dateofbirthday', 'int'), GETPOST('dateofbirthyear', 'int'));\n\n// Define value to know what current user can do on users\n$canadduser = (!empty($user->admin) || $user->rights->user->user->creer);\n$canreaduser = (!empty($user->admin) || $user->rights->user->user->lire);\n$canedituser = (!empty($user->admin) || $user->rights->user->user->creer);\n$candisableuser = (!empty($user->admin) || $user->rights->user->user->supprimer);\n$canreadgroup = $canreaduser;\n$caneditgroup = $canedituser;\nif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS)) {\n\t$canreadgroup = (!empty($user->admin) || $user->rights->user->group_advance->read);\n\t$caneditgroup = (!empty($user->admin) || $user->rights->user->group_advance->write);\n}\n\n$childids = $user->getAllChildIds(1);\t// For later, test on salary visibility\n\n// Define value to know what current user can do on properties of edited user\nif ($id) {\n\t// $user is the current logged user, $id is the user we want to edit\n\t$caneditfield = ((($user->id == $id) && $user->rights->user->self->creer)\n\t|| (($user->id != $id) && $user->rights->user->user->creer));\n\t$caneditpassword = ((($user->id == $id) && $user->rights->user->self->password)\n\t|| (($user->id != $id) && $user->rights->user->user->password));\n}\n\n// Security check\n$socid = 0;\nif ($user->socid > 0) {\n\t$socid = $user->socid;\n}\n$feature2 = 'user';\n$result = restrictedArea($user, 'user', $id, 'user', $feature2);\n\nif ($user->id <> $id && !$canreaduser) {\n\taccessforbidden();\n}\n\n// Load translation files required by page\n$langs->loadLangs(array('users', 'companies', 'ldap', 'admin', 'hrm', 'stocks', 'other'));\n\n$object = new User($db);\n$extrafields = new ExtraFields($db);\n\n// fetch optionals attributes and labels\n$extrafields->fetch_name_optionals_label($object->table_element);\n\n$socialnetworks = getArrayOfSocialNetworks();\n\n// Initialize technical object to manage hooks. Note that conf->hooks_modules contains array\n$hookmanager->initHooks(array('usercard', 'globalcard'));\n\n$error = 0;\n\n\n/**\n * Actions\n */\n\n$parameters = array('id' => $id, 'socid' => $socid, 'group' => $group, 'caneditgroup' => $caneditgroup);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\nif (empty($reshook)) {\n\tif ($action == 'confirm_disable' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id != $user->id) {\t\t// A user can't disable itself\n\t\t\t$object->fetch($id);\n\t\t\tif ($object->admin && empty($user->admin)) {\n\t\t\t\t// If user to delete is an admin user and if logged user is not admin, we deny the operation.\n\t\t\t\t$error++;\n\t\t\t\tsetEventMessages($langs->trans(\"OnlyAdminUsersCanDisableAdminUsers\"), null, 'errors');\n\t\t\t} else {\n\t\t\t\t$object->setstatus(0);\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'confirm_enable' && $confirm == \"yes\" && $candisableuser) {\n\t\t$error = 0;\n\n\t\tif ($id != $user->id) {\n\t\t\t$object->fetch($id);\n\n\t\t\tif (!empty($conf->file->main_limit_users)) {\n\t\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t\t$error++;\n\t\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$object->setstatus(1);\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'confirm_delete' && $confirm == \"yes\" && $candisableuser) {\n\t\tif ($id != $user->id) {\n\t\t\tif (!GETPOSTISSET('token')) {\n\t\t\t\tprint 'Error, token required for this critical operation';\n\t\t\t\texit;\n\t\t\t}\n\n\t\t\t$object = new User($db);\n\t\t\t$object->fetch($id);\n\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t$result = $object->delete($user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\tsetEventMessages($langs->trans(\"ErrorUserCannotBeDelete\"), null, 'errors');\n\t\t\t} else {\n\t\t\t\tsetEventMessages($langs->trans(\"RecordDeleted\"), null);\n\t\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/user/list.php?restore_lastsearch_values=1\");\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action Add user\n\tif ($action == 'add' && $canadduser) {\n\t\t$error = 0;\n\n\t\tif (!GETPOST(\"lastname\")) {\n\t\t\t$error++;\n\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\"; // Go back to create page\n\t\t}\n\t\tif (!GETPOST(\"login\")) {\n\t\t\t$error++;\n\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t$action = \"create\"; // Go back to create page\n\t\t}\n\n\t\tif (!empty($conf->file->main_limit_users)) { // If option to limit users is set\n\t\t\t$nb = $object->getNbOfUsers(\"active\");\n\t\t\tif ($nb >= $conf->file->main_limit_users) {\n\t\t\t\t$error++;\n\t\t\t\tsetEventMessages($langs->trans(\"YourQuotaOfUsersIsReached\"), null, 'errors');\n\t\t\t\t$action = \"create\"; // Go back to create page\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->civility_code = GETPOST(\"civility_code\", 'aZ09');\n\t\t\t$object->lastname = GETPOST(\"lastname\", 'alphanohtml');\n\t\t\t$object->firstname = GETPOST(\"firstname\", 'alphanohtml');\n\t\t\t$object->login = GETPOST(\"login\", 'alphanohtml');\n\t\t\t$object->api_key = GETPOST(\"api_key\", 'alphanohtml');\n\t\t\t$object->gender = GETPOST(\"gender\", 'aZ09');\n\t\t\t$object->admin = GETPOST(\"admin\", 'int');\n\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\n\t\t\t//$object->skype = GETPOST(\"skype\", 'alphanohtml');\n\t\t\t//$object->twitter = GETPOST(\"twitter\", 'alphanohtml');\n\t\t\t//$object->facebook = GETPOST(\"facebook\", 'alphanohtml');\n\t\t\t//$object->linkedin = GETPOST(\"linkedin\", 'alphanohtml');\n\t\t\tif (!empty($conf->socialnetworks->enabled)) {\n\t\t\t\t$object->socialnetworks = array();\n\t\t\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t\t\tif (GETPOST($key, 'alphanohtml')) {\n\t\t\t\t\t\t$object->socialnetworks[$key] = GETPOST($key, 'alphanohtml');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alphanohtml'));\n\t\t\t$object->job = GETPOST(\"job\", 'alphanohtml');\n\t\t\t$object->signature = GETPOST(\"signature\", 'restricthtml');\n\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\", 'alphanohtml');\n\t\t\t$object->note = GETPOST(\"note\", 'restricthtml');\n\t\t\t$object->note_private = GETPOST(\"note\", 'restricthtml');\n\t\t\t$object->ldap_sid = GETPOST(\"ldap_sid\", 'alphanohtml');\n\t\t\t$object->fk_user = GETPOST(\"fk_user\", 'int') > 0 ? GETPOST(\"fk_user\", 'int') : 0;\n\t\t\t$object->fk_user_expense_validator = GETPOST(\"fk_user_expense_validator\", 'int') > 0 ? GETPOST(\"fk_user_expense_validator\", 'int') : 0;\n\t\t\t$object->fk_user_holiday_validator = GETPOST(\"fk_user_holiday_validator\", 'int') > 0 ? GETPOST(\"fk_user_holiday_validator\", 'int') : 0;\n\t\t\t$object->employee = GETPOST('employee', 'alphanohtml');\n\n\t\t\t$object->thm = GETPOST(\"thm\", 'alphanohtml') != '' ? GETPOST(\"thm\", 'alphanohtml') : '';\n\t\t\t$object->thm = price2num($object->thm);\n\t\t\t$object->tjm = GETPOST(\"tjm\", 'alphanohtml') != '' ? GETPOST(\"tjm\", 'alphanohtml') : '';\n\t\t\t$object->tjm = price2num($object->tjm);\n\t\t\t$object->salary = GETPOST(\"salary\", 'alphanohtml') != '' ? GETPOST(\"salary\", 'alphanohtml') : '';\n\t\t\t$object->salary = price2num($object->salary);\n\t\t\t$object->salaryextra = GETPOST(\"salaryextra\", 'alphanohtml') != '' ? GETPOST(\"salaryextra\", 'alphanohtml') : '';\n\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\", 'alphanohtml') != '' ? GETPOST(\"weeklyhours\", 'alphanohtml') : '';\n\n\t\t\t$object->color = GETPOST(\"color\", 'alphanohtml') != '' ? GETPOST(\"color\", 'alphanohtml') : '';\n\n\t\t\t$object->dateemployment = $dateemployment;\n\t\t\t$object->dateemploymentend = $dateemploymentend;\n\t\t\t$object->datestartvalidity = $datestartvalidity;\n\t\t\t$object->dateendvalidity = $dateendvalidity;\n\t\t\t$object->birth = $dateofbirth;\n\n\t\t\t$object->fk_warehouse = GETPOST('fk_warehouse', 'int');\n\n\t\t\t$object->lang = GETPOST('default_lang', 'aZ09');\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t// Set entity property\n\t\t\t$entity = GETPOST('entity', 'int');\n\t\t\tif (!empty($conf->multicompany->enabled)) {\n\t\t\t\tif (GETPOST('superadmin', 'int')) {\n\t\t\t\t\t$object->entity = 0;\n\t\t\t\t} else {\n\t\t\t\t\tif (!empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t\t\t$object->entity = 1; // all users are forced into master entity\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$object->entity = ($entity == '' ? 1 : $entity);\n\t\t\t\t/*if ($user->admin && $user->entity == 0 && GETPOST(\"admin\",'alpha'))\n\t\t\t\t{\n\t\t\t\t}*/\n\t\t\t}\n\n\t\t\t$db->begin();\n\n\t\t\t$id = $object->create($user);\n\t\t\tif ($id > 0) {\n\t\t\t\tif (GETPOST('password', 'none')) {\n\t\t\t\t\t$object->setPassword($user, GETPOST('password','none'));\n\t\t\t\t}\n\t\t\t\tif (!empty($conf->categorie->enabled)) {\n\t\t\t\t\t// Categories association\n\t\t\t\t\t$usercats = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($usercats);\n\t\t\t\t}\n\t\t\t\t$db->commit();\n\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t$db->rollback();\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t$action = \"create\"; // Go back to create page\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action add usergroup\n\tif (($action == 'addgroup' || $action == 'removegroup') && $caneditgroup) {\n\t\tif ($group) {\n\t\t\t$editgroup = new UserGroup($db);\n\t\t\t$editgroup->fetch($group);\n\t\t\t$editgroup->oldcopy = clone $editgroup;\n\n\t\t\t$object->fetch($id);\n\t\t\tif ($action == 'addgroup') {\n\t\t\t\t$result = $object->SetInGroup($group, $editgroup->entity);\n\t\t\t}\n\t\t\tif ($action == 'removegroup') {\n\t\t\t\t$result = $object->RemoveFromGroup($group, $editgroup->entity);\n\t\t\t}\n\n\t\t\tif ($result > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$id);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($action == 'update' && !$cancel) {\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\tif ($caneditfield) {    // Case we can edit all field\n\t\t\t$error = 0;\n\n\t\t\tif (!GETPOST(\"lastname\", 'alpha')) {\n\t\t\t\tsetEventMessages($langs->trans(\"NameNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\"; // Go back to create page\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\tif (!GETPOST(\"login\", 'alpha')) {\n\t\t\t\tsetEventMessages($langs->trans(\"LoginNotDefined\"), null, 'errors');\n\t\t\t\t$action = \"edit\"; // Go back to create page\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t$db->begin();\n\n\t\t\t\t$object->civility_code = GETPOST(\"civility_code\", 'aZ09');\n\t\t\t\t$object->lastname = GETPOST(\"lastname\", 'alphanohtml');\n\t\t\t\t$object->firstname = GETPOST(\"firstname\", 'alphanohtml');\n\t\t\t\t$object->login = GETPOST(\"login\", 'alphanohtml');\n\t\t\t\t$object->gender = GETPOST(\"gender\", 'aZ09');\n\t\t\t\t$object->pass = GETPOST(\"password\", 'none');\n\t\t\t\t$object->api_key = (GETPOST(\"api_key\", 'alphanohtml')) ? GETPOST(\"api_key\", 'alphanohtml') : $object->api_key;\n\t\t\t\tif (!empty($user->admin)) {\n\t\t\t\t\t$object->admin = GETPOST(\"admin\", \"int\"); // admin flag can only be set/unset by an admin user. A test is also done later when forging sql request\n\t\t\t\t}\n\t\t\t\t$object->address = GETPOST('address', 'alphanohtml');\n\t\t\t\t$object->zip = GETPOST('zipcode', 'alphanohtml');\n\t\t\t\t$object->town = GETPOST('town', 'alphanohtml');\n\t\t\t\t$object->country_id = GETPOST('country_id', 'int');\n\t\t\t\t$object->state_id = GETPOST('state_id', 'int');\n\t\t\t\t$object->office_phone = GETPOST(\"office_phone\", 'alphanohtml');\n\t\t\t\t$object->office_fax = GETPOST(\"office_fax\", 'alphanohtml');\n\t\t\t\t$object->user_mobile = GETPOST(\"user_mobile\", 'alphanohtml');\n\t\t\t\t//$object->skype = GETPOST(\"skype\", 'alphanohtml');\n\t\t\t\t//$object->twitter = GETPOST(\"twitter\", 'alphanohtml');\n\t\t\t\t//$object->facebook = GETPOST(\"facebook\", 'alphanohtml');\n\t\t\t\t//$object->linkedin = GETPOST(\"linkedin\", 'alphanohtml');\n\t\t\t\tif (!empty($conf->socialnetworks->enabled)) {\n\t\t\t\t\t$object->socialnetworks = array();\n\t\t\t\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t\t\t\tif (GETPOST($key, 'alphanohtml')) {\n\t\t\t\t\t\t\t$object->socialnetworks[$key] = GETPOST($key, 'alphanohtml');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$object->email = preg_replace('/\\s+/', '', GETPOST(\"email\", 'alphanohtml'));\n\t\t\t\t$object->job = GETPOST(\"job\", 'alphanohtml');\n\t\t\t\t$object->signature = GETPOST(\"signature\", 'restricthtml');\n\t\t\t\t$object->accountancy_code = GETPOST(\"accountancy_code\", 'alphanohtml');\n\t\t\t\t$object->openid = GETPOST(\"openid\", 'alphanohtml');\n\t\t\t\t$object->fk_user = GETPOST(\"fk_user\", 'int') > 0 ? GETPOST(\"fk_user\", 'int') : 0;\n\t\t\t\t$object->fk_user_expense_validator = GETPOST(\"fk_user_expense_validator\", 'int') > 0 ? GETPOST(\"fk_user_expense_validator\", 'int') : 0;\n\t\t\t\t$object->fk_user_holiday_validator = GETPOST(\"fk_user_holiday_validator\", 'int') > 0 ? GETPOST(\"fk_user_holiday_validator\", 'int') : 0;\n\t\t\t\t$object->employee = GETPOST('employee', 'int');\n\n\t\t\t\t$object->thm = GETPOST(\"thm\", 'alphanohtml') != '' ? GETPOST(\"thm\", 'alphanohtml') : '';\n\t\t\t\t$object->thm = price2num($object->thm);\n\t\t\t\t$object->tjm = GETPOST(\"tjm\", 'alphanohtml') != '' ? GETPOST(\"tjm\", 'alphanohtml') : '';\n\t\t\t\t$object->thm = price2num($object->thm);\n\t\t\t\t$object->salary = GETPOST(\"salary\", 'alphanohtml') != '' ? GETPOST(\"salary\", 'alphanohtml') : '';\n\t\t\t\t$object->salary = price2num($object->salary);\n\t\t\t\t$object->salaryextra = GETPOST(\"salaryextra\", 'alphanohtml') != '' ? GETPOST(\"salaryextra\", 'alphanohtml') : '';\n\t\t\t\t$object->salaryextra = price2num($object->salaryextra);\n\t\t\t\t$object->weeklyhours = GETPOST(\"weeklyhours\", 'alphanohtml') != '' ? GETPOST(\"weeklyhours\", 'alphanohtml') : '';\n\t\t\t\t$object->weeklyhours = price2num($object->weeklyhours);\n\n\t\t\t\t$object->color = GETPOST(\"color\", 'alphanohtml') != '' ? GETPOST(\"color\", 'alphanohtml') : '';\n\t\t\t\t$object->dateemployment = $dateemployment;\n\t\t\t\t$object->dateemploymentend = $dateemploymentend;\n\t\t\t\t$object->datestartvalidity = $datestartvalidity;\n\t\t\t\t$object->dateendvalidity = $dateendvalidity;\n\t\t\t\t$object->birth = $dateofbirth;\n\n\t\t\t\tif (!empty($conf->stock->enabled)) {\n\t\t\t\t\t$object->fk_warehouse = GETPOST('fk_warehouse', 'int');\n\t\t\t\t}\n\n\t\t\t\t$object->lang = GETPOST('default_lang', 'aZ09');\n\n\t\t\t\t// Do we update also ->entity ?\n\t\t\t\tif (!empty($conf->multicompany->enabled)) {\t// If multicompany is not enabled, we never update the entity of a user.\n\t\t\t\t\tif (!empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t\t\t$object->entity = 1; // all users are in master entity\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// A user should not be able to move a user into another entity. Only superadmin should be able to do this.\n\t\t\t\t\t\tif ($user->entity == 0 && $user->admin) {\n\t\t\t\t\t\t\tif (GETPOST(\"superadmin\")) {\n\t\t\t\t\t\t\t\t// We try to set the user as superadmin.\n\t\t\t\t\t\t\t\t$object->entity = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// We try to change the entity of user\n\t\t\t\t\t\t\t\t$object->entity = (GETPOSTISSET('entity') ? GETPOSTINT('entity') : $object->entity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\tif (GETPOST('deletephoto')) {\n\t\t\t\t\t$object->photo = '';\n\t\t\t\t}\n\t\t\t\tif (!empty($_FILES['photo']['name'])) {\n\t\t\t\t\t$isimage = image_format_supported($_FILES['photo']['name']);\n\t\t\t\t\tif ($isimage > 0) {\n\t\t\t\t\t\t$object->photo = dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorBadImageFormat\"), null, 'errors');\n\t\t\t\t\t\tdol_syslog($langs->transnoentities(\"ErrorBadImageFormat\"), LOG_INFO);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error) {\n\t\t\t\t\t$ret = $object->update($user);\n\t\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\tif ($db->errno() == 'DB_ERROR_RECORD_ALREADY_EXISTS') {\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorLoginAlreadyExists\", $object->login), null, 'errors');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && GETPOSTISSET('contactid')) {\n\t\t\t\t\t$contactid = GETPOST('contactid', 'int');\n\t\t\t\t\t$socid = GETPOST('socid', 'int');\n\n\t\t\t\t\tif ($contactid > 0) {\t// The 'contactid' is used inpriority over the 'socid'\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($contactid);\n\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=\".((int) $contactid);\n\t\t\t\t\t\tif (!empty($contact->socid)) {\n\t\t\t\t\t\t\t$sql .= \", fk_soc=\".((int) $contact->socid);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t} elseif ($socid > 0) {\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=NULL, fk_soc=\".((int) $socid);\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t\t\t$sql .= \" SET fk_socpeople=NULL, fk_soc=NULL\";\n\t\t\t\t\t\t$sql .= \" WHERE rowid=\".$object->id;\n\t\t\t\t\t}\n\t\t\t\t\tdol_syslog(\"usercard::update\", LOG_DEBUG);\n\t\t\t\t\t$resql = $db->query($sql);\n\t\t\t\t\tif (!$resql) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\tsetEventMessages($db->lasterror(), null, 'errors');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tif (GETPOST('deletephoto') && $object->oldcopy->photo) {\n\t\t\t\t\t\t$fileimg = $conf->user->dir_output.'/'.get_exdir(0, 0, 0, 0, $object, 'user').$object->oldcopy->photo;\n\t\t\t\t\t\t$dirthumbs = $conf->user->dir_output.'/'.get_exdir(0, 0, 0, 0, $object, 'user').'/thumbs';\n\t\t\t\t\t\tdol_delete_file($fileimg);\n\t\t\t\t\t\tdol_delete_dir_recursive($dirthumbs);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($_FILES['photo']['tmp_name']) && trim($_FILES['photo']['tmp_name'])) {\n\t\t\t\t\t\t$dir = $conf->user->dir_output.'/'.get_exdir(0, 0, 0, 1, $object, 'user');\n\n\t\t\t\t\t\tdol_mkdir($dir);\n\n\t\t\t\t\t\tif (@is_dir($dir)) {\n\t\t\t\t\t\t\t$newfile = $dir.'/'.dol_sanitizeFileName($_FILES['photo']['name']);\n\t\t\t\t\t\t\t$result = dol_move_uploaded_file($_FILES['photo']['tmp_name'], $newfile, 1, 0, $_FILES['photo']['error']);\n\n\t\t\t\t\t\t\tif (!$result > 0) {\n\t\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSaveFile\"), null, 'errors');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Create thumbs\n\t\t\t\t\t\t\t\t$object->addThumbs($newfile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToCreateDir\", $dir), $mesgs, 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\t// Then we add the associated categories\n\t\t\t\t\t$categories = GETPOST('usercats', 'array');\n\t\t\t\t\t$object->setCategories($categories);\n\t\t\t\t}\n\n\t\t\t\tif (!$error && !count($object->errors)) {\n\t\t\t\t\tsetEventMessages($langs->trans(\"UserModified\"), null, 'mesgs');\n\t\t\t\t\t$db->commit();\n\n\t\t\t\t\t$login = $_SESSION[\"dol_login\"];\n\t\t\t\t\tif ($login && $login == $object->oldcopy->login && $object->oldcopy->login != $object->login) {    // Current user has changed its login\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t\tsetEventMessages($langs->transnoentitiesnoconv(\"WarningYourLoginWasModifiedPleaseLogin\"), null, 'warnings');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$db->rollback();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($caneditpassword) {    // Case we can edit only password\n\t\t\t\tdol_syslog(\"Not allowed to change fields, only password\");\n\n\t\t\t\t$object->fetch($id);\n\n\t\t\t\tif (GETPOST(\"password\", \"none\")) {\t// If pass is empty, we do not change it.\n\t\t\t\t\t$object->oldcopy = clone $object;\n\n\t\t\t\t\t$ret = $object->setPassword($user, GETPOST(\"password\", \"none\"));\n\t\t\t\t\tif ($ret < 0) {\n\t\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Change password with a new generated one\n\tif ((($action == 'confirm_password' && $confirm == 'yes')\n\t\t\t|| ($action == 'confirm_passwordsend' && $confirm == 'yes')) && $caneditpassword\n\t) {\n\t\t$object->fetch($id);\n\n\t\t$newpassword = $object->setPassword($user, '');\n\t\tif ($newpassword < 0) {\n\t\t\t// Echec\n\t\t\tsetEventMessages($langs->trans(\"ErrorFailedToSetNewPassword\"), null, 'errors');\n\t\t} else {\n\t\t\t// Succes\n\t\t\tif ($action == 'confirm_passwordsend' && $confirm == 'yes') {\n\t\t\t\tif ($object->send_password($user, $newpassword) > 0) {\n\t\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedAndSentTo\", $object->email), null, 'mesgs');\n\t\t\t\t} else {\n\t\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetEventMessages($langs->trans(\"PasswordChangedTo\", $newpassword), null, 'warnings');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action initialisation donnees depuis record LDAP\n\tif ($action == 'adduserldap' && $canadduser) {\n\t\t$selecteduser = GETPOST('users');\n\n\t\t$required_fields = array(\n\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t);\n\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0) {\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields = array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t$ldapusers = $ldap->getRecords($selecteduser, $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields);\n\t\t\t//print_r($ldapusers);\n\n\t\t\tif (is_array($ldapusers)) {\n\t\t\t\tforeach ($ldapusers as $key => $attribute) {\n\t\t\t\t\t$ldap_lastname = $attribute[$conf->global->LDAP_FIELD_NAME];\n\t\t\t\t\t$ldap_firstname = $attribute[$conf->global->LDAP_FIELD_FIRSTNAME];\n\t\t\t\t\t$ldap_login = $attribute[$conf->global->LDAP_FIELD_LOGIN];\n\t\t\t\t\t$ldap_loginsmb = $attribute[$conf->global->LDAP_FIELD_LOGIN_SAMBA];\n\t\t\t\t\t$ldap_pass = $attribute[$conf->global->LDAP_FIELD_PASSWORD];\n\t\t\t\t\t$ldap_pass_crypted = $attribute[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED];\n\t\t\t\t\t$ldap_phone = $attribute[$conf->global->LDAP_FIELD_PHONE];\n\t\t\t\t\t$ldap_fax = $attribute[$conf->global->LDAP_FIELD_FAX];\n\t\t\t\t\t$ldap_mobile = $attribute[$conf->global->LDAP_FIELD_MOBILE];\n\t\t\t\t\t$ldap_social['skype'] = $attribute[$conf->global->LDAP_FIELD_SKYPE];\n\t\t\t\t\t$ldap_social['twitter'] = $attribute[$conf->global->LDAP_FIELD_TWITTER];\n\t\t\t\t\t$ldap_social['facebook'] = $attribute[$conf->global->LDAP_FIELD_FACEBOOK];\n\t\t\t\t\t$ldap_social['linkedin'] = $attribute[$conf->global->LDAP_FIELD_LINKEDIN];\n\t\t\t\t\t$ldap_mail = $attribute[$conf->global->LDAP_FIELD_MAIL];\n\t\t\t\t\t$ldap_sid = $attribute[$conf->global->LDAP_FIELD_SID];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\t}\n\n\t// Actions to send emails\n\t$triggersendname = 'USER_SENTBYMAIL';\n\t$paramname = 'id'; // Name of param key to open the card\n\t$mode = 'emailfromuser';\n\t$trackid = 'use'.$id;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_sendmails.inc.php';\n\n\t// Actions to build doc\n\t$upload_dir = $conf->user->dir_output;\n\t$permissiontoadd = $user->rights->user->user->creer;\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n}\n\n\n/*\n * View\n */\n\n$form = new Form($db);\n$formother = new FormOther($db);\n$formcompany = new FormCompany($db);\n$formadmin = new FormAdmin($db);\n$formfile = new FormFile($db);\nif (!empty($conf->stock->enabled)) {\n\t$formproduct = new FormProduct($db);\n}\n\nllxHeader('', $langs->trans(\"UserCard\"));\n\nif ($action == 'create' || $action == 'adduserldap') {\n\tprint load_fiche_titre($langs->trans(\"NewUser\"), '', 'user');\n\n\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"CreateInternalUserDesc\").\"</span><br>\\n\";\n\tprint \"<br>\";\n\n\n\tif (!empty($conf->ldap->enabled) && (isset($conf->global->LDAP_SYNCHRO_ACTIVE) && $conf->global->LDAP_SYNCHRO_ACTIVE == 'ldap2dolibarr')) {\n\t\t// Show form to add an account from LDAP if sync LDAP -> Dolibarr is set\n\t\t$ldap = new Ldap();\n\t\t$result = $ldap->connect_bind();\n\t\tif ($result >= 0) {\n\t\t\t$required_fields = array(\n\t\t\t\t$conf->global->LDAP_KEY_USERS,\n\t\t\t\t$conf->global->LDAP_FIELD_FULLNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_NAME,\n\t\t\t\t$conf->global->LDAP_FIELD_FIRSTNAME,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN,\n\t\t\t\t$conf->global->LDAP_FIELD_LOGIN_SAMBA,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD,\n\t\t\t\t$conf->global->LDAP_FIELD_PASSWORD_CRYPTED,\n\t\t\t\t$conf->global->LDAP_FIELD_PHONE,\n\t\t\t\t$conf->global->LDAP_FIELD_FAX,\n\t\t\t\t$conf->global->LDAP_FIELD_MOBILE,\n\t\t\t\t$conf->global->LDAP_FIELD_SKYPE,\n\t\t\t\t$conf->global->LDAP_FIELD_MAIL,\n\t\t\t\t$conf->global->LDAP_FIELD_TITLE,\n\t\t\t\t$conf->global->LDAP_FIELD_DESCRIPTION,\n\t\t\t\t$conf->global->LDAP_FIELD_SID\n\t\t\t);\n\n\t\t\t// Remove from required_fields all entries not configured in LDAP (empty) and duplicated\n\t\t\t$required_fields = array_unique(array_values(array_filter($required_fields, \"dol_validElement\")));\n\n\t\t\t// Get from LDAP database an array of results\n\t\t\t$ldapusers = $ldap->getRecords('*', $conf->global->LDAP_USER_DN, $conf->global->LDAP_KEY_USERS, $required_fields, 1);\n\n\t\t\tif (is_array($ldapusers)) {\n\t\t\t\t$liste = array();\n\t\t\t\tforeach ($ldapusers as $key => $ldapuser) {\n\t\t\t\t\t// Define the label string for this user\n\t\t\t\t\t$label = '';\n\t\t\t\t\tforeach ($required_fields as $value) {\n\t\t\t\t\t\tif ($value === $conf->global->LDAP_FIELD_PASSWORD || $value === $conf->global->LDAP_FIELD_PASSWORD_CRYPTED) {\n\t\t\t\t\t\t\t$label .= $value.\"=******* \";\n\t\t\t\t\t\t} elseif ($value) {\n\t\t\t\t\t\t\t$label .= $value.\"=\".$ldapuser[$value].\" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$liste[$key] = $label;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t}\n\t\t} else {\n\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t}\n\n\t\t// If user list is full, we show drop-down list\n\t\tprint \"\\n\\n<!-- Form liste LDAP debut -->\\n\";\n\n\t\tprint '<form name=\"add_user_ldap\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"post\">';\n\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\tprint '<table class=\"border centpercent\"><tr>';\n\t\tprint '<td width=\"160\">';\n\t\tprint $langs->trans(\"LDAPUsers\");\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input type=\"hidden\" name=\"action\" value=\"adduserldap\">';\n\t\tif (is_array($liste) && count($liste)) {\n\t\t\tprint $form->selectarray('users', $liste, '', 1, 0, 0, '', 0, 0, 0, '', 'maxwidth500');\n\t\t\tprint ajax_combobox('users');\n\t\t}\n\t\tprint '</td><td class=\"center\">';\n\t\tprint '<input type=\"submit\" class=\"button\" value=\"'.dol_escape_htmltag($langs->trans('Get')).'\"'.(count($liste) ? '' : ' disabled').'>';\n\t\tprint '</td></tr></table>';\n\t\tprint '</form>';\n\n\t\tprint \"\\n<!-- Form liste LDAP fin -->\\n\\n\";\n\t\tprint '<br>';\n\t}\n\n\n\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'\" method=\"POST\" name=\"createuser\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\tif (!empty($ldap_sid)) {\n\t\tprint '<input type=\"hidden\" name=\"ldap_sid\" value=\"'.dol_escape_htmltag($ldap_sid).'\">';\n\t}\n\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\">';\n\n\tprint dol_get_fiche_head('', '', '', 0, '');\n\n\tprint dol_set_focus('#lastname');\n\n\tprint '<table class=\"border centpercent\">';\n\n\t// Civility\n\tprint '<tr><td><label for=\"civility_code\">'.$langs->trans(\"UserTitle\").'</label></td><td colspan=\"3\">';\n\tprint $formcompany->select_civility(GETPOSTISSET(\"civility_code\") ? GETPOST(\"civility_code\", 'aZ09') : $object->civility_code, 'civility_code');\n\tprint '</td></tr>';\n\n\t// Lastname\n\tprint '<tr>';\n\tprint '<td class=\"titlefieldcreate\"><span class=\"fieldrequired\">'.$langs->trans(\"Lastname\").'</span></td>';\n\tprint '<td>';\n\tif (!empty($ldap_lastname)) {\n\t\tprint '<input type=\"hidden\" id=\"lastname\" name=\"lastname\" value=\"'.dol_escape_htmltag($ldap_lastname).'\">';\n\t\tprint $ldap_lastname;\n\t} else {\n\t\tprint '<input class=\"minwidth100\" type=\"text\" id=\"lastname\" name=\"lastname\" value=\"'.dol_escape_htmltag(GETPOST('lastname', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Firstname\n\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td>';\n\tprint '<td>';\n\tif (!empty($ldap_firstname)) {\n\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.dol_escape_htmltag($ldap_firstname).'\">';\n\t\tprint $ldap_firstname;\n\t} else {\n\t\tprint '<input class=\"minwidth100\" type=\"text\" name=\"firstname\" value=\"'.dol_escape_htmltag(GETPOST('firstname', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Login\n\tprint '<tr><td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\tprint '<td>';\n\tif (!empty($ldap_login)) {\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.dol_escape_htmltag($ldap_login).'\">';\n\t\tprint $ldap_login;\n\t} elseif (!empty($ldap_loginsmb)) {\n\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.dol_escape_htmltag($ldap_loginsmb).'\">';\n\t\tprint $ldap_loginsmb;\n\t} else {\n\t\tprint '<input class=\"maxwidth200\" maxsize=\"24\" type=\"text\" name=\"login\" value=\"'.dol_escape_htmltag(GETPOST('login', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t$generated_password = '';\n\tif (empty($ldap_sid)) {    // ldap_sid is for activedirectory\n\t\t$generated_password = getRandomPassword(false);\n\t}\n\t$password = (GETPOSTISSET('password') ?GETPOST('password') : $generated_password);\n\n\t// Administrator\n\tif (!empty($user->admin)) {\n\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\tprint '<td>';\n\t\tprint $form->selectyesno('admin', GETPOST('admin'), 1);\n\n\t\tif (!empty($conf->multicompany->enabled) && !$user->entity) {\n\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\tprint '<script type=\"text/javascript\">\n                            $(function() {\n                                $(\"select[name=admin]\").change(function() {\n                                     if ( $(this).val() == 0 ) {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", true)\n                                            .prop(\"checked\", false);\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                     } else {\n                                        $(\"input[name=superadmin]\")\n                                            .prop(\"disabled\", false);\n                                     }\n                                });\n                                $(\"input[name=superadmin]\").change(function() {\n                                    if ( $(this).is(\":checked\") ) {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", true);\n                                    } else {\n                                        $(\"select[name=entity]\")\n                                            .prop(\"disabled\", false);\n                                    }\n                                });\n                            });\n                    </script>';\n\t\t\t}\n\t\t\t$checked = (GETPOST('superadmin', 'int') ? ' checked' : '');\n\t\t\t$disabled = (GETPOST('superadmin', 'int') ? '' : ' disabled');\n\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" id=\"superadmin\" value=\"1\"'.$checked.$disabled.' /> <label for=\"superadmin\">'.$langs->trans(\"SuperAdministrator\").'</span>';\n\t\t}\n\t\tprint \"</td></tr>\\n\";\n\t}\n\n\t// Gender\n\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\tprint '<td>';\n\t$arraygender = array('man'=>$langs->trans(\"Genderman\"), 'woman'=>$langs->trans(\"Genderwoman\"), 'other'=>$langs->trans(\"Genderother\"));\n\tprint $form->selectarray('gender', $arraygender, GETPOST('gender'), 1);\n\tprint '</td></tr>';\n\n\t// Employee\n\t$defaultemployee = '1';\n\tprint '<tr>';\n\tprint '<td>'.$langs->trans('Employee').'</td><td>';\n\tprint '<input type=\"checkbox\" name=\"employee\" value=\"1\"'.(GETPOST('employee') == '1' ? ' checked=\"checked\"' : ($defaultemployee ? ' checked=\"checked\"' : '')).'>';\n\t//print $form->selectyesno(\"employee\", (GETPOST('employee') != '' ?GETPOST('employee') : $defaultemployee), 1);\n\tprint '</td></tr>';\n\n\t// Hierarchy\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Expense report validator\n\tif (!empty($conf->expensereport->enabled)) {\n\t\tprint '<tr><td class=\"titlefieldcreate\">';\n\t\t$text = $langs->trans(\"ForceUserExpenseValidator\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_expense_validator, 'fk_user_expense_validator', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// Holiday request validator\n\tif (!empty($conf->holiday->enabled)) {\n\t\tprint '<tr><td class=\"titlefieldcreate\">';\n\t\t$text = $langs->trans(\"ForceUserHolidayValidator\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_holiday_validator, 'fk_user_holiday_validator', 1, array($object->id), 0, '', 0, $conf->entity, 0, 0, '', 0, '', 'maxwidth300');\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// External user\n\tprint '<tr><td>'.$langs->trans(\"ExternalUser\").' ?</td>';\n\tprint '<td>';\n\tprint $form->textwithpicto($langs->trans(\"Internal\"), $langs->trans(\"InternalExternalDesc\"), 1, 'help', '', 0, 2);\n\tprint '</td></tr>';\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// Date validity\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"RangeOfLoginValidity\").'</td>';\n\tprint '<td>';\n\tprint $form->selectDate($datestartvalidity, 'datestartvalidity', 0, 0, 1, 'formdatestartvalidity', 1, 1);\n\n\tprint ' &nbsp; ';\n\n\tprint $form->selectDate($dateendvalidity, 'dateendvalidity', 0, 0, 1, 'formdateendvalidity', 1, 0);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Password\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"Password\").'</td>';\n\tprint '<td>';\n\t$valuetoshow = '';\n\tif (preg_match('/ldap/', $dolibarr_main_authentication)) {\n\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t}\n\tif (preg_match('/http/', $dolibarr_main_authentication)) {\n\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').$langs->trans(\"HTTPBasicPassword\");\n\t}\n\tif (preg_match('/dolibarr/', $dolibarr_main_authentication)) {\n\t\tif (!empty($ldap_pass)) {\t// For very old system comaptibilty. Now clear password can't be viewed from LDAP read\n\t\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').'<input type=\"hidden\" name=\"password\" value=\"'.$ldap_pass.'\">'; // Dolibarr password is preffiled with LDAP known password\n\t\t\t$valuetoshow .= preg_replace('/./i', '*', $ldap_pass);\n\t\t} else {\n\t\t\t// We do not use a field password but a field text to show new password to use.\n\t\t\t$valuetoshow .= ($valuetoshow ? ', ' : '').'<input size=\"30\" maxsize=\"32\" type=\"text\" name=\"password\" value=\"'.$password.'\" autocomplete=\"new-password\">';\n\t\t}\n\t}\n\n\t// Other form for user password\n\t$parameters = array('valuetoshow' => $valuetoshow, 'password' => $password);\n\t$reshook = $hookmanager->executeHooks('printUserPasswordField', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tif ($reshook > 0) {\n\t\t$valuetoshow = $hookmanager->resPrint; // to replace\n\t} else {\n\t\t$valuetoshow .= $hookmanager->resPrint; // to add\n\t}\n\n\tprint $valuetoshow;\n\tprint '</td></tr>';\n\n\tif (!empty($conf->api->enabled)) {\n\t\t// API key\n\t\t//$generated_password = getRandomPassword(false);\n\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input class=\"minwidth300\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.GETPOST('api_key', 'alphanohtml').'\" autocomplete=\"off\">';\n\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\t}\n\t\tprint '</td></tr>';\n\t} else {\n\t\t// PARTIAL WORKAROUND\n\t\t$generated_fake_api_key = getRandomPassword(false);\n\t\tprint '<input type=\"hidden\" name=\"api_key\" value=\"'.$generated_fake_api_key.'\">';\n\t}\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// Address\n\tprint '<tr><td class=\"tdtop titlefieldcreate\">'.$form->editfieldkey('Address', 'address', '', $object, 0).'</td>';\n\tprint '<td><textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\tprint $object->address;\n\tprint '</textarea></td></tr>';\n\n\t// Zip\n\tprint '<tr><td>'.$form->editfieldkey('Zip', 'zipcode', '', $object, 0).'</td><td>';\n\tprint $formcompany->select_ziptown($object->zip, 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\tprint '</td></tr>';\n\n\t// Town\n\tprint '<tr><td>'.$form->editfieldkey('Town', 'town', '', $object, 0).'</td><td>';\n\tprint $formcompany->select_ziptown($object->town, 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\tprint '</td></tr>';\n\n\t// Country\n\tprint '<tr><td>'.$form->editfieldkey('Country', 'selectcountry_id', '', $object, 0).'</td><td class=\"maxwidthonsmartphone\">';\n\tprint img_picto('', 'country', 'class=\"paddingrightonly\"');\n\tprint $form->select_country((GETPOST('country_id') != '' ?GETPOST('country_id') : $object->country_id));\n\tif ($user->admin) {\n\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t}\n\tprint '</td></tr>';\n\n\t// State\n\tif (empty($conf->global->USER_DISABLE_STATE)) {\n\t\tprint '<tr><td>'.$form->editfieldkey('State', 'state_id', '', $object, 0).'</td><td class=\"maxwidthonsmartphone\">';\n\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\tprint $formcompany->select_state($object->state_id, $object->country_code, 'state_id');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Tel\n\tprint '<tr><td>'.$langs->trans(\"PhonePro\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_phoning');\n\tif (!empty($ldap_phone)) {\n\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.dol_escape_htmltag($ldap_phone).'\">';\n\t\tprint $ldap_phone;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"office_phone\" value=\"'.dol_escape_htmltag(GETPOST('office_phone', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Tel portable\n\tprint '<tr><td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_phoning_mobile');\n\tif (!empty($ldap_mobile)) {\n\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.dol_escape_htmltag($ldap_mobile).'\">';\n\t\tprint $ldap_mobile;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"user_mobile\" value=\"'.dol_escape_htmltag(GETPOST('user_mobile', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// Fax\n\tprint '<tr><td>'.$langs->trans(\"Fax\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_phoning_fax');\n\tif (!empty($ldap_fax)) {\n\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.dol_escape_htmltag($ldap_fax).'\">';\n\t\tprint $ldap_fax;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"office_fax\" value=\"'.dol_escape_htmltag(GETPOST('office_fax', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\t// EMail\n\tprint '<tr><td'.(!empty($conf->global->USER_MAIL_REQUIRED) ? ' class=\"fieldrequired\"' : '').'>'.$langs->trans(\"EMail\").'</td>';\n\tprint '<td>';\n\tprint img_picto('', 'object_email');\n\tif (!empty($ldap_mail)) {\n\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.dol_escape_htmltag($ldap_mail).'\">';\n\t\tprint $ldap_mail;\n\t} else {\n\t\tprint '<input type=\"text\" name=\"email\" class=\"maxwidth500 widthcentpercentminusx\" value=\"'.dol_escape_htmltag(GETPOST('email', 'alphanohtml')).'\">';\n\t}\n\tprint '</td></tr>';\n\n\tif (!empty($conf->socialnetworks->enabled)) {\n\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\tif ($value['active']) {\n\t\t\t\tprint '<tr><td>'.$langs->trans($value['label']).'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($value['icon'])) {\n\t\t\t\t\tprint '<span class=\"fa '.$value['icon'].'\"></span>';\n\t\t\t\t}\n\t\t\t\tif (!empty($ldap_social[$key])) {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$ldap_social[$key].'\">';\n\t\t\t\t\tprint $ldap_social[$key];\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"'.$key.'\" value=\"'.GETPOST($key, 'alphanohtml').'\">';\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\t// if social network is not active but value exist we do not want to loose it\n\t\t\t\tif (!empty($ldap_social[$key])) {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$ldap_social[$key].'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.GETPOST($key, 'alphanohtml').'\">';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Accountancy code\n\tif (!empty($conf->accounting->enabled)) {\n\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\tprint '<td>';\n\t\tprint '<input type=\"text\" name=\"accountancy_code\" value=\"'.dol_escape_htmltag(GETPOST('accountancy_code', 'alphanohtml')).'\">';\n\t\tprint '</td></tr>';\n\t}\n\n\t// User color\n\tif (!empty($conf->agenda->enabled)) {\n\t\tprint '<tr><td>'.$langs->trans(\"ColorUser\").'</td>';\n\t\tprint '<td>';\n\t\tprint $formother->selectColor(GETPOSTISSET('color') ?GETPOST('color', 'alphanohtml') : $object->color, 'color', null, 1, '', 'hideifnotset');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Categories\n\tif (!empty($conf->categorie->enabled) && !empty($user->rights->categorie->lire)) {\n\t\tprint '<tr><td>'.$form->editfieldkey('Categories', 'usercats', '', $object, 0).'</td><td colspan=\"3\">';\n\t\t$cate_arbo = $form->select_all_categories('user', null, 'parent', null, null, 1);\n\t\tprint img_picto('', 'category').$form->multiselectarray('usercats', $cate_arbo, GETPOST('usercats', 'array'), null, null, null, null, '90%');\n\t\tprint \"</td></tr>\";\n\t}\n\n\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\tprint '<tr><td>'.$form->editfieldkey('DefaultLang', 'default_lang', '', $object, 0, 'string', '', 0, 0, 'id', $langs->trans(\"WarningNotLangOfInterface\", $langs->transnoentitiesnoconv(\"UserGUISetup\"))).'</td>';\n\t\tprint '<td colspan=\"3\" class=\"maxwidthonsmartphone\">'.\"\\n\";\n\t\tprint img_picto('', 'language').$formadmin->select_language(GETPOST('default_lang', 'alpha') ?GETPOST('default_lang', 'alpha') : ($object->lang ? $object->lang : ''), 'default_lang', 0, 0, 1, 0, 0, 'maxwidth200onsmartphone');\n\t\tprint '</td>';\n\t\tprint '</tr>';\n\t}\n\n\t// Multicompany\n\tif (!empty($conf->multicompany->enabled) && is_object($mc)) {\n\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\tif (!method_exists($mc, 'formObjectOptions')) {\n\t\t\tif (empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && !$user->entity) {\t// condition must be same for create and edit mode\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t\t\t\t print \"<td>\".$mc->select_entities($conf->entity);\n\t\t\t\t print \"</td></tr>\\n\";\n\t\t\t} else {\n\t\t\t\t print '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t}\n\t\t}\n\t}\n\n\t// Other attributes\n\t$parameters = array('colspan' => ' colspan=\"3\"');\n\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_add.tpl.php';\n\n\t// Note\n\tprint '<tr><td class=\"tdtop\">';\n\tprint $langs->trans(\"Note\");\n\tprint '</td><td>';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor = new DolEditor('note', GETPOSTISSET('note') ? GETPOST('note', 'restricthtml') : '', '', 120, 'dolibarr_notes', '', false, true, getDolGlobalString('FCKEDITOR_ENABLE_SOCIETE'), ROWS_3, '90%');\n\t$doleditor->Create();\n\tprint \"</td></tr>\\n\";\n\n\t// Signature\n\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\tprint '<td class=\"wordbreak\">';\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t$doleditor = new DolEditor('signature', GETPOST('signature', 'restricthtml'), '', 138, 'dolibarr_notes', 'In', true, true, empty($conf->global->FCKEDITOR_ENABLE_USERSIGN) ? 0 : 1, ROWS_4, '90%');\n\tprint $doleditor->Create(1);\n\tprint '</td></tr>';\n\n\n\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t// Default warehouse\n\tif (!empty($conf->stock->enabled) && !empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER)) {\n\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\tprint $formproduct->selectWarehouses($object->fk_warehouse, 'fk_warehouse', 'warehouseopen', 1);\n\t\tprint '</td></tr>';\n\t}\n\n\t// Position/Job\n\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\tprint '<td>';\n\tprint '<input class=\"maxwidth200\" type=\"text\" name=\"job\" value=\"'.dol_escape_htmltag(GETPOST('job', 'alphanohtml')).'\">';\n\tprint '</td></tr>';\n\n\tif ((!empty($conf->salaries->enabled) && !empty($user->rights->salaries->read) && in_array($id, $childids))\n\t\t|| (!empty($conf->salaries->enabled) && !empty($user->rights->salaries->readall))\n\t\t|| (!empty($conf->hrm->enabled) && !empty($user->rights->hrm->employee->read))) {\n\t\t$langs->load(\"salaries\");\n\n\t\t// THM\n\t\tprint '<tr><td>';\n\t\t$text = $langs->trans(\"THM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.dol_escape_htmltag(GETPOST('thm')).'\"> '.$langs->getCurrencySymbol($conf->currency);\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// TJM\n\t\tprint '<tr><td>';\n\t\t$text = $langs->trans(\"TJM\");\n\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\tprint '</td>';\n\t\tprint '<td>';\n\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.dol_escape_htmltag(GETPOST('tjm')).'\"> '.$langs->getCurrencySymbol($conf->currency);\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\n\t\t// Salary\n\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\tprint '<td>';\n\t\tprint img_picto('', 'salary', 'class=\"pictofixedwidth paddingright\"').'<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.dol_escape_htmltag(GETPOST('salary')).'\"> '.$langs->getCurrencySymbol($conf->currency);\n\t\tprint '</td>';\n\t\tprint \"</tr>\\n\";\n\t}\n\n\t// Weeklyhours\n\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\tprint '<td>';\n\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.dol_escape_htmltag(GETPOST('weeklyhours')).'\">';\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date employment\n\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\tprint '<td>';\n\tprint $form->selectDate($dateemployment, 'dateemployment', 0, 0, 1, 'formdateemployment', 1, 1);\n\n\tprint ' - ';\n\n\tprint $form->selectDate($dateemploymentend, 'dateemploymentend', 0, 0, 1, 'formdateemploymentend', 1, 0);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\t// Date birth\n\tprint '<tr><td>'.$langs->trans(\"DateOfBirth\").'</td>';\n\tprint '<td>';\n\tprint $form->selectDate($dateofbirth, 'dateofbirth', 0, 0, 1, 'createuser', 1, 0);\n\tprint '</td>';\n\tprint \"</tr>\\n\";\n\n\tprint \"</table>\\n\";\n\n\tprint dol_get_fiche_end();\n\n\tprint '<div class=\"center\">';\n\tprint '<input class=\"button\" value=\"'.$langs->trans(\"CreateUser\").'\" name=\"create\" type=\"submit\">';\n\t//print '&nbsp; &nbsp; &nbsp;';\n\t//print '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button button-cancel\" type=\"submit\" name=\"cancel\">';\n\tprint '</div>';\n\n\tprint \"</form>\";\n} else {\n\t// View and edit mode\n\tif ($id > 0) {\n\t\t$res = $object->fetch($id, '', '', 1);\n\t\tif ($res < 0) {\n\t\t\tdol_print_error($db, $object->error);\n\t\t\texit;\n\t\t}\n\t\t$res = $object->fetch_optionals();\n\n\t\t// Check if user has rights\n\t\tif (empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t$object->getrights();\n\t\t\tif (empty($object->nb_rights) && $object->statut != 0 && empty($object->admin)) {\n\t\t\t\tsetEventMessages($langs->trans('UserHasNoPermissions'), null, 'warnings');\n\t\t\t}\n\t\t}\n\n\t\t// Connexion ldap\n\t\t// pour recuperer passDoNotExpire et userChangePassNextLogon\n\t\tif (!empty($conf->ldap->enabled) && !empty($object->ldap_sid)) {\n\t\t\t$ldap = new Ldap();\n\t\t\t$result = $ldap->connect_bind();\n\t\t\tif ($result > 0) {\n\t\t\t\t$userSearchFilter = '('.$conf->global->LDAP_FILTER_CONNECTION.'('.$ldap->getUserIdentifier().'='.$object->login.'))';\n\t\t\t\t$entries = $ldap->fetch($object->login, $userSearchFilter);\n\t\t\t\tif (!$entries) {\n\t\t\t\t\tsetEventMessages($ldap->error, $ldap->errors, 'errors');\n\t\t\t\t}\n\n\t\t\t\t$passDoNotExpire = 0;\n\t\t\t\t$userChangePassNextLogon = 0;\n\t\t\t\t$userDisabled = 0;\n\t\t\t\t$statutUACF = '';\n\n\t\t\t\t// Check options of user account\n\t\t\t\tif (count($ldap->uacf) > 0) {\n\t\t\t\t\tforeach ($ldap->uacf as $key => $statut) {\n\t\t\t\t\t\tif ($key == 65536) {\n\t\t\t\t\t\t\t$passDoNotExpire = 1;\n\t\t\t\t\t\t\t$statutUACF = $statut;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$userDisabled = 1;\n\t\t\t\t\t$statutUACF = \"ACCOUNTDISABLE\";\n\t\t\t\t}\n\n\t\t\t\tif ($ldap->pwdlastset == 0) {\n\t\t\t\t\t$userChangePassNextLogon = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Show tabs\n\t\tif ($mode == 'employee') { // For HRM module development\n\t\t\t$title = $langs->trans(\"Employee\");\n\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/hrm/employee/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t} else {\n\t\t\t$title = $langs->trans(\"User\");\n\t\t\t$linkback = '';\n\n\t\t\tif ($user->rights->user->user->lire || $user->admin) {\n\t\t\t\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/user/list.php?restore_lastsearch_values=1\">'.$langs->trans(\"BackToList\").'</a>';\n\t\t\t}\n\t\t}\n\n\t\t$head = user_prepare_head($object);\n\n\t\t/*\n\t\t * Confirmation reinitialisation mot de passe\n\t\t */\n\t\tif ($action == 'password') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"ReinitPassword\"), $langs->trans(\"ConfirmReinitPassword\", $object->login), \"confirm_password\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirmation envoi mot de passe\n\t\t */\n\t\tif ($action == 'passwordsend') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"SendNewPassword\"), $langs->trans(\"ConfirmSendNewPassword\", $object->login), \"confirm_passwordsend\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirm deactivation\n\t\t */\n\t\tif ($action == 'disable') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"DisableAUser\"), $langs->trans(\"ConfirmDisableUser\", $object->login), \"confirm_disable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirm activation\n\t\t */\n\t\tif ($action == 'enable') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"EnableAUser\"), $langs->trans(\"ConfirmEnableUser\", $object->login), \"confirm_enable\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Confirmation suppression\n\t\t */\n\t\tif ($action == 'delete') {\n\t\t\tprint $form->formconfirm($_SERVER['PHP_SELF'].\"?id=$object->id\", $langs->trans(\"DeleteAUser\"), $langs->trans(\"ConfirmDeleteUser\", $object->login), \"confirm_delete\", '', 0, 1);\n\t\t}\n\n\t\t/*\n\t\t * Fiche en mode visu\n\t\t */\n\t\tif ($action != 'edit') {\n\t\t\tprint dol_get_fiche_head($head, 'user', $title, -1, 'user');\n\n\t\t\tdol_banner_tab($object, 'id', $linkback, $user->rights->user->user->lire || $user->admin);\n\n\t\t\tprint '<div class=\"fichecenter\">';\n\t\t\tprint '<div class=\"fichehalfleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\t\t\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t\t\t// Login\n\t\t\tprint '<tr><td class=\"titlefieldmiddle\">'.$langs->trans(\"Login\").'</td>';\n\t\t\tif (!empty($object->ldap_sid) && $object->statut == 0) {\n\t\t\t\tprint '<td class=\"error\">'.$langs->trans(\"LoginAccountDisableInDolibarr\").'</td>';\n\t\t\t} else {\n\t\t\t\tprint '<td>'.showValueWithClipboardCPButton($object->login).'</td>';\n\t\t\t}\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td><td>';\n\t\t\tif (!empty($conf->multicompany->enabled) && $object->admin && !$object->entity) {\n\t\t\t\tprint $form->textwithpicto(yn($object->admin), $langs->trans(\"SuperAdministratorDesc\"), 1, \"superadmin\");\n\t\t\t} elseif ($object->admin) {\n\t\t\t\tprint $form->textwithpicto(yn($object->admin), $langs->trans(\"AdministratorDesc\"), 1, \"admin\");\n\t\t\t} else {\n\t\t\t\tprint yn($object->admin);\n\t\t\t}\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Type\n\t\t\tprint '<tr><td>';\n\t\t\t$text = $langs->trans(\"Type\");\n\t\t\tprint $form->textwithpicto($text, $langs->trans(\"InternalExternalDesc\"));\n\t\t\tprint '</td><td>';\n\t\t\t$type = $langs->trans(\"Internal\");\n\t\t\tif ($object->socid > 0) {\n\t\t\t\t$type = $langs->trans(\"External\");\n\t\t\t}\n\t\t\tprint '<span class=\"badgeneutral\">';\n\t\t\tprint $type;\n\t\t\tif ($object->ldap_sid) {\n\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t}\n\t\t\tprint '</span>';\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// Ldap sid\n\t\t\tif ($object->ldap_sid) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Type\").'</td><td>';\n\t\t\t\tprint $langs->trans(\"DomainUser\", $ldap->domainFQDN);\n\t\t\t\tprint '</td></tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Employee\n\t\t\tprint '<tr><td>'.$langs->trans(\"Employee\").'</td><td colspan=\"2\">';\n\t\t\tprint '<input type=\"checkbox\" disabled name=\"employee\" value=\"1\"'.($object->employee ? ' checked=\"checked\"' : '').'>';\n\t\t\t//print yn($object->employee);\n\t\t\tprint '</td></tr>'.\"\\n\";\n\n\t\t\t// TODO Move this into tab RH, visible when salarie or RH is visible (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Hierarchy\n\t\t\tprint '<tr><td>'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif (empty($object->fk_user)) {\n\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"None\").'</span>';\n\t\t\t} else {\n\t\t\t\t$huser = new User($db);\n\t\t\t\tif ($object->fk_user > 0) {\n\t\t\t\t\t$huser->fetch($object->fk_user);\n\t\t\t\t\tprint $huser->getNomUrl(1);\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"None\").'</span>';\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Expense report validator\n\t\t\tif (!empty($conf->expensereport->enabled)) {\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"ForceUserExpenseValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($object->fk_user_expense_validator)) {\n\t\t\t\t\t$evuser = new User($db);\n\t\t\t\t\t$evuser->fetch($object->fk_user_expense_validator);\n\t\t\t\t\tprint $evuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Holiday request validator\n\t\t\tif (!empty($conf->holiday->enabled)) {\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"ForceUserHolidayValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($object->fk_user_holiday_validator)) {\n\t\t\t\t\t$hvuser = new User($db);\n\t\t\t\t\t$hvuser->fetch($object->fk_user_holiday_validator);\n\t\t\t\t\tprint $hvuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Default warehouse\n\t\t\tif (!empty($conf->stock->enabled) && !empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER)) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tif ($object->fk_warehouse > 0) {\n\t\t\t\t\t$warehousestatic = new Entrepot($db);\n\t\t\t\t\t$warehousestatic->fetch($object->fk_warehouse);\n\t\t\t\t\tprint $warehousestatic->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td>'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>'.dol_escape_htmltag($object->job).'</td>';\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\tif ((!empty($conf->salaries->enabled) && !empty($user->rights->salaries->read) && in_array($id, $childids))\n\t\t\t\t|| (!empty($conf->salaries->enabled) && !empty($user->rights->salaries->readall))\n\t\t\t\t|| (!empty($conf->hrm->enabled) && !empty($user->rights->hrm->employee->read))) {\n\t\t\t\t// Even a superior can't see this info of its subordinates wihtout $user->rights->salaries->read and $user->rights->hrm->employee->read (setting/viewing is reserverd to HR people).\n\t\t\t\t// However, he can see the valuation of timesheet of its subordinates even without these permissions.\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->thm != '' ?price($object->thm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classtjm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->tjm != '' ?price($object->tjm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint ($object->salary != '' ? img_picto('', 'salary', 'class=\"pictofixedwidth paddingright\"').'<span class=\"amount\">'.price($object->salary, '', $langs, 1, -1, -1, $conf->currency) : '').'</span>';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint price2num($object->weeklyhours);\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateOfEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->dateemployment) {\n\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"FromDate\").'</span> ';\n\t\t\t\tprint dol_print_date($object->dateemployment, 'day');\n\t\t\t}\n\t\t\tif ($object->dateemploymentend) {\n\t\t\t\tprint '<span class=\"opacitymedium\"> - '.$langs->trans(\"To\").'</span> ';\n\t\t\t\tprint dol_print_date($object->dateemploymentend, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date of birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateOfBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint dol_print_date($object->birth, 'day');\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Accountancy code\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>'.$object->accountancy_code.'</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '</div>';\n\t\t\tprint '<div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\tprint '<div class=\"underbanner clearboth\"></div>';\n\n\t\t\tprint '<table class=\"border tableforfield centpercent\">';\n\n\t\t\t// Color user\n\t\t\tif (!empty($conf->agenda->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $formother->showColor($object->color, '');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Categories\n\t\t\tif (!empty($conf->categorie->enabled) && !empty($user->rights->categorie->lire)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Categories\").'</td>';\n\t\t\t\tprint '<td colspan=\"3\">';\n\t\t\t\tprint $form->showCategories($object->id, Categorie::TYPE_USER, 1);\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Default language\n\t\t\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\t\t\t$langs->load(\"languages\");\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\tprint $form->textwithpicto($langs->trans(\"DefaultLang\"), $langs->trans(\"WarningNotLangOfInterface\", $langs->transnoentitiesnoconv(\"UserGUISetup\")));\n\t\t\t\tprint '</td><td>';\n\t\t\t\t//$s=picto_from_langcode($object->default_lang);\n\t\t\t\t//print ($s?$s.' ':'');\n\t\t\t\t$labellang = ($object->lang ? $langs->trans('Language_'.$object->lang) : '');\n\t\t\t\tprint $labellang;\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/', $conf->file->main_authentication) && !empty($conf->global->MAIN_OPENIDURL_PERUSER)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>'.$object->openid.'</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Multicompany\n\t\t\tif (!empty($conf->multicompany->enabled) && is_object($mc)) {\n\t\t\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\t\t\tif (!method_exists($mc, 'formObjectOptions')) {\n\t\t\t\t\tif (!empty($conf->multicompany->enabled) && empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) && $conf->entity == 1 && $user->admin && !$user->entity) {\n\t\t\t\t\t\tprint '<tr><td>'.$langs->trans(\"Entity\").'</td><td>';\n\t\t\t\t\t\tif (empty($object->entity)) {\n\t\t\t\t\t\t\tprint $langs->trans(\"AllEntities\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$mc->getInfo($object->entity);\n\t\t\t\t\t\t\tprint $mc->label;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_view.tpl.php';\n\n\t\t\t// Company / Contact\n\t\t\tif (!empty($conf->societe->enabled)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\t$s = '';\n\t\t\t\tif (isset($object->socid) && $object->socid > 0) {\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tif ($societe->id > 0) {\n\t\t\t\t\t\t$s .= $societe->getNomUrl(1, '');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$s .= '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"ThisUserIsNot\").'</span>';\n\t\t\t\t}\n\t\t\t\tif (!empty($object->contact_id)) {\n\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t$contact->fetch($object->contact_id);\n\t\t\t\t\tif ($contact->id > 0) {\n\t\t\t\t\t\tif ($object->socid > 0 && $s) {\n\t\t\t\t\t\t\t$s .= ' / ';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$s .= '<br>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$s .= $contact->getNomUrl(1, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint $s;\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (!empty($conf->adherent->enabled)) {\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member) {\n\t\t\t\t\t$adh = new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref = $adh->getFullname($langs); // Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(-1);\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"UserNotLinkedToMember\").'</span>';\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans('Signature').'</td><td class=\"wordbreak\">';\n\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\t// VCard\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"VCard\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/user/vcard.php?id='.$object->id.'\">';\n\t\t\tprint img_picto($langs->trans(\"Download\"), 'vcard.png', 'class=\"paddingrightonly\"');\n\t\t\tprint $langs->trans(\"Download\");\n\t\t\tprint '</a>';\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\tprint \"</table>\\n\";\n\n\t\t\t// Credentials\n\t\t\tprint '<div class=\"div-table-responsive-no-min\">';\n\t\t\tprint '<table class=\"border tableforfield margintable centpercent\">';\n\t\t\tprint '<tr class=\"liste_titre\"><td class=\"liste_titre\">';\n\t\t\tprint img_picto('', 'security', 'class=\"paddingleft pictofixedwidth\"').$langs->trans(\"Credentials\");\n\t\t\tprint '</td>';\n\t\t\tprint '<td class=\"liste_titre\"></td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Date login validity\n\t\t\tprint '<tr><td>'.$langs->trans(\"RangeOfLoginValidity\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->datestartvalidity) {\n\t\t\t\tprint '<span class=\"opacitymedium\">'.$langs->trans(\"FromDate\").'</span> ';\n\t\t\t\tprint dol_print_date($object->datestartvalidity, 'day');\n\t\t\t}\n\t\t\tif ($object->dateendvalidity) {\n\t\t\t\tprint '<span class=\"opacitymedium\"> - '.$langs->trans(\"To\").'</span> ';\n\t\t\t\tprint dol_print_date($object->dateendvalidity, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Password\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Password\").'</td>';\n\n\t\t\tprint '<td class=\"wordbreak\">';\n\t\t\t$valuetoshow = '';\n\t\t\tif (preg_match('/ldap/', $dolibarr_main_authentication)) {\n\t\t\t\tif (!empty($object->ldap_sid)) {\n\t\t\t\t\tif ($passDoNotExpire) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"LdapUacf_\".$statutUACF);\n\t\t\t\t\t} elseif ($userChangePassNextLogon) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<span class=\"warning\">'.$langs->trans(\"UserMustChangePassNextLogon\", $ldap->domainFQDN).'</span>';\n\t\t\t\t\t} elseif ($userDisabled) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<span class=\"warning\">'.$langs->trans(\"LdapUacf_\".$statutUACF, $ldap->domainFQDN).'</span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (preg_match('/http/', $dolibarr_main_authentication)) {\n\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"HTTPBasicPassword\");\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/', $dolibarr_main_authentication)) {\n\t\t\t\tif ($object->pass) {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '');\n\t\t\t\t\t$valuetoshow .= '<span class=\"opacitymedium\">'.$langs->trans(\"Hidden\").'</span>';\n\t\t\t\t} else {\n\t\t\t\t\tif ($user->admin && $user->id == $object->id) {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '');\n\t\t\t\t\t\t//$valuetoshow .= '<span class=\"opacitymedium\">'.$langs->trans(\"Crypted\").' - </span>';\n\t\t\t\t\t\t$valuetoshow .= '<span class=\"opacitymedium\">'.$langs->trans(\"Hidden\").'</span>';\n\t\t\t\t\t\t// TODO Add a feature to reveal the hash\n\t\t\t\t\t\t$valuetoshow .= '<!-- Crypted into '.$object->pass_indatabase_crypted.' -->';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<span class=\"opacitymedium\">'.$langs->trans(\"Hidden\").'</span>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters = array('valuetoshow' => $valuetoshow);\n\t\t\t$reshook = $hookmanager->executeHooks('printUserPasswordField', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$valuetoshow = $hookmanager->resPrint; // to replace\n\t\t\t} else {\n\t\t\t\t$valuetoshow .= $hookmanager->resPrint; // to add\n\t\t\t}\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td>\";\n\t\t\tprint '</tr>'.\"\\n\";\n\n\t\t\t// API key\n\t\t\tif (!empty($conf->api->enabled) && ($user->id == $id || $user->admin)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif (!empty($object->api_key)) {\n\t\t\t\t\tprint '<span class=\"opacitymedium\">';\n\t\t\t\t\tprint showValueWithClipboardCPButton($object->api_key, 1, $langs->trans(\"Hidden\"));\t\t// TODO Add an option to also reveal the hash, not only copy paste\n\t\t\t\t\tprint '</span>';\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"LastConnexion\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($object->datepreviouslogin) {\n\t\t\t\tprint dol_print_date($object->datepreviouslogin, \"dayhour\").' <span class=\"opacitymedium\">('.$langs->trans(\"Previous\").')</span>, ';\n\t\t\t}\n\t\t\tif ($object->datelastlogin) {\n\t\t\t\tprint dol_print_date($object->datelastlogin, \"dayhour\").' <span class=\"opacitymedium\">('.$langs->trans(\"Current\").')</span>';\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '</table></div>';\n\n\t\t\tprint '</div>';\n\n\t\t\tprint '</div></div>';\n\t\t\tprint '<div style=\"clear:both\"></div>';\n\n\n\t\t\tprint dol_get_fiche_end();\n\n\n\t\t\t/*\n\t\t\t * Buttons actions\n\t\t\t */\n\n\t\t\tprint '<div class=\"tabsAction\">';\n\n\t\t\t$parameters = array();\n\t\t\t$reshook = $hookmanager->executeHooks('addMoreActionsButtons', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tif (empty($reshook)) {\n\t\t\t\tif (empty($user->socid)) {\n\t\t\t\t\tif (!empty($object->email)) {\n\t\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action=presend&mode=init#formmailbeforetitle\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$langs->load(\"mails\");\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans('SendMail').'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($caneditfield && (empty($conf->multicompany->enabled) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tif (!empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED)) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"DisabledInMonoUserMode\")).'\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"Modify\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t} elseif ($caneditpassword && !$object->ldap_sid &&\n\t\t\t\t(empty($conf->multicompany->enabled) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=edit\">'.$langs->trans(\"EditPassword\").'</a></div>';\n\t\t\t\t}\n\n\t\t\t\t// Si on a un gestionnaire de generation de mot de passe actif\n\t\t\t\tif ($conf->global->USER_PASSWORD_GENERATED != 'none') {\n\t\t\t\t\tif ($object->statut == 0) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t} elseif (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=password\">'.$langs->trans(\"ReinitPassword\").'</a></div>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($object->statut == 0) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"UserDisabled\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t} elseif (($user->id != $id && $caneditpassword) && $object->login && !$object->ldap_sid &&\n\t\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\t\tif ($object->email) {\n\t\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=passwordsend\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"NoEMail\")).'\">'.$langs->trans(\"SendNewPassword\").'</a></div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Enable user\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 0 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action=enable&token='.newToken().'\">'.$langs->trans(\"Reactivate\").'</a></div>';\n\t\t\t\t}\n\t\t\t\t// Disable user\n\t\t\t\tif ($user->id <> $id && $candisableuser && $object->statut == 1 &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=disable&id='.$object->id.'&token='.newToken().'\">'.$langs->trans(\"DisableUser\").'</a></div>';\n\t\t\t\t} else {\n\t\t\t\t\tif ($user->id == $id) {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.$langs->trans(\"CantDisableYourself\").'\">'.$langs->trans(\"DisableUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Delete\n\t\t\t\tif ($user->id <> $id && $candisableuser &&\n\t\t\t\t((empty($conf->multicompany->enabled) && $object->entity == $user->entity) || !$user->entity || ($object->entity == $conf->entity) || ($conf->global->MULTICOMPANY_TRANSVERSE_MODE && $conf->entity == 1))) {\n\t\t\t\t\tif ($user->admin || !$object->admin) { // If user edited is admin, delete is possible on for an admin\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"'.$_SERVER['PHP_SELF'].'?action=delete&token='.newToken().'&id='.$object->id.'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\" title=\"'.dol_escape_htmltag($langs->trans(\"MustBeAdminToDeleteOtherAdmin\")).'\">'.$langs->trans(\"DeleteUser\").'</a></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprint \"</div>\\n\";\n\n\n\n\t\t\t//Select mail models is same action as presend\n\t\t\tif (GETPOST('modelselected')) {\n\t\t\t\t$action = 'presend';\n\t\t\t}\n\n\t\t\t// Presend form\n\t\t\t$modelmail = 'user';\n\t\t\t$defaulttopic = 'Information';\n\t\t\t$diroutput = $conf->user->dir_output;\n\t\t\t$trackid = 'use'.$object->id;\n\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/card_presend.tpl.php';\n\n\t\t\tif ($action != 'presend' && $action != 'send') {\n\t\t\t\t/*\n\t\t\t\t * List of groups of user\n\t\t\t\t */\n\n\t\t\t\tif ($canreadgroup) {\n\t\t\t\t\tprint '<!-- Group section -->'.\"\\n\";\n\n\t\t\t\t\tprint load_fiche_titre($langs->trans(\"ListOfGroupsForUser\"), '', '');\n\n\t\t\t\t\t// On selectionne les groupes auquel fait parti le user\n\t\t\t\t\t$exclude = array();\n\n\t\t\t\t\t$usergroup = new UserGroup($db);\n\t\t\t\t\t$groupslist = $usergroup->listGroupsForUser($object->id);\n\n\t\t\t\t\tif (!empty($groupslist)) {\n\t\t\t\t\t\tforeach ($groupslist as $groupforuser) {\n\t\t\t\t\t\t\t$exclude[] = $groupforuser->id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Other form for add user to group\n\t\t\t\t\t$parameters = array('caneditgroup' => $caneditgroup, 'groupslist' => $groupslist, 'exclude' => $exclude);\n\t\t\t\t\t$reshook = $hookmanager->executeHooks('formAddUserToGroup', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\t\t\tprint $hookmanager->resPrint;\n\n\t\t\t\t\tif (empty($reshook)) {\n\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$id.'\" method=\"POST\">'.\"\\n\";\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\" />';\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"addgroup\" />';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprint '<table class=\"noborder centpercent\">'.\"\\n\";\n\t\t\t\t\t\tprint '<tr class=\"liste_titre\"><th class=\"liste_titre\">'.$langs->trans(\"Groups\").'</th>'.\"\\n\";\n\t\t\t\t\t\tprint '<th class=\"liste_titre right\">';\n\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\tprint $form->select_dolgroups('', 'group', 1, $exclude, 0, '', '', $object->entity);\n\t\t\t\t\t\t\tprint ' &nbsp; ';\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t\t\t\t\tprint '<input type=\"submit\" class=\"button buttongen\" value=\"'.$langs->trans(\"Add\").'\" />';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</th></tr>'.\"\\n\";\n\n\t\t\t\t\t\t// List of groups of user\n\t\t\t\t\t\tif (!empty($groupslist)) {\n\t\t\t\t\t\t\tforeach ($groupslist as $group) {\n\t\t\t\t\t\t\t\tprint '<tr class=\"oddeven\">';\n\t\t\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\t\t\tprint $group->getNomUrl(1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tprint img_object($langs->trans(\"ShowGroup\"), \"group\").' '.$group->name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint '</td>';\n\t\t\t\t\t\t\t\tprint '<td class=\"right\">';\n\t\t\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\t\t\tprint '<a href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&amp;action=removegroup&amp;group='.$group->id.'\">';\n\t\t\t\t\t\t\t\t\tprint img_picto($langs->trans(\"RemoveFromGroup\"), 'unlink');\n\t\t\t\t\t\t\t\t\tprint '</a>';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tprint \"&nbsp;\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprint '<tr class=\"oddeven\"><td colspan=\"3\" class=\"opacitymedium\">'.$langs->trans(\"None\").'</td></tr>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprint \"</table>\";\n\n\t\t\t\t\t\tif ($caneditgroup) {\n\t\t\t\t\t\t\tprint '</form>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint \"<br>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * Card in edit mode\n\t\t */\n\t\tif ($action == 'edit' && ($canedituser || $caneditfield || $caneditpassword || ($user->id == $object->id))) {\n\t\t\tprint '<form action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\" method=\"POST\" name=\"updateuser\" enctype=\"multipart/form-data\">';\n\t\t\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$object->entity.'\">';\n\n\t\t\tprint dol_get_fiche_head($head, 'user', $title, 0, 'user');\n\n\t\t\tprint '<table class=\"border centpercent\">';\n\n\t\t\t// Ref/ID\n\t\t\tif (!empty($conf->global->MAIN_SHOW_TECHNICAL_ID)) {\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"Ref\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint $object->id;\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\n\t\t\t// Civility\n\t\t\tprint '<tr><td class=\"titlefieldcreate\"><label for=\"civility_code\">'.$langs->trans(\"UserTitle\").'</label></td><td colspan=\"3\">';\n\t\t\tprint $formcompany->select_civility(GETPOSTISSET(\"civility_code\") ? GETPOST(\"civility_code\", 'aZ09') : $object->civility_code, 'civility_code');\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Lastname\n\t\t\tprint \"<tr>\";\n\t\t\tprint '<td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Lastname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid) {\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"lastname\" value=\"'.$object->lastname.'\">';\n\t\t\t\tprint $object->lastname;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Firstname\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Firstname\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield && !$object->ldap_sid) {\n\t\t\t\tprint '<input class=\"minwidth100\" type=\"text\" class=\"flat\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"firstname\" value=\"'.$object->firstname.'\">';\n\t\t\t\tprint $object->firstname;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Login\n\t\t\tprint \"<tr>\".'<td><span class=\"fieldrequired\">'.$langs->trans(\"Login\").'</span></td>';\n\t\t\tprint '<td>';\n\t\t\tif ($user->admin && !$object->ldap_sid) {\n\t\t\t\tprint '<input maxlength=\"50\" type=\"text\" class=\"flat\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"login\" value=\"'.$object->login.'\">';\n\t\t\t\tprint $object->login;\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Administrator\n\t\t\tprint '<tr><td>'.$langs->trans(\"Administrator\").'</td>';\n\t\t\tif ($object->socid > 0) {\n\t\t\t\t$langs->load(\"admin\");\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">'.yn($object->admin);\n\t\t\t\tprint ' ('.$langs->trans(\"ExternalUser\").')';\n\t\t\t\tprint '</td></tr>';\n\t\t\t} else {\n\t\t\t\tprint '<td>';\n\t\t\t\t$nbAdmin = $user->getNbOfUsers('active', '', 1);\n\t\t\t\t$nbSuperAdmin = $user->getNbOfUsers('active', 'superadmin', 1);\n\t\t\t\t//var_dump($nbAdmin);\n\t\t\t\t//var_dump($nbSuperAdmin);\n\t\t\t\tif ($user->admin\t\t\t\t\t\t\t\t// Need to be admin to allow downgrade of an admin\n\t\t\t\t&& ($user->id != $object->id)                   // Don't downgrade ourself\n\t\t\t\t&& (\n\t\t\t\t\t(empty($conf->multicompany->enabled) && $nbAdmin >= 1)\n\t\t\t\t\t|| (!empty($conf->multicompany->enabled) && (($object->entity > 0 || ($user->entity == 0 && $object->entity == 0)) || $nbSuperAdmin > 1))    // Don't downgrade a superadmin if alone\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tprint $form->selectyesno('admin', $object->admin, 1);\n\n\t\t\t\t\tif (!empty($conf->multicompany->enabled) && !$user->entity) {\n\t\t\t\t\t\tif ($conf->use_javascript_ajax) {\n\t\t\t\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t\t\t\t\t\t$(function() {\n\t\t\t\t\t\t\t\t\t\tvar admin = $(\"select[name=admin]\").val();\n\t\t\t\t\t\t\t\t\t\tif (admin == 0) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif ($(\"input[name=superadmin]\").is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$(\"select[name=admin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\t if ( $(this).val() == 0 ) {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"checked\", false);\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t } else {\n\t\t\t\t\t\t\t\t\t\t\t \t$(\"input[name=superadmin]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t$(\"input[name=superadmin]\").change(function() {\n\t\t\t\t\t\t\t\t\t\t\tif ( $(this).is(\":checked\")) {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", true);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t$(\"select[name=entity]\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t.prop(\"disabled\", false);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t</script>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$checked = (($object->admin && !$object->entity) ? ' checked' : '');\n\t\t\t\t\t\tprint '<input type=\"checkbox\" name=\"superadmin\" id=\"superadmin\" value=\"1\"'.$checked.' /> <label for=\"superadmin\">'.$langs->trans(\"SuperAdministrator\").'</span>';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$yn = yn($object->admin);\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"admin\" value=\"'.$object->admin.'\">';\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"superadmin\" value=\"'.(empty($object->entity) ? 1 : 0).'\">';\n\t\t\t\t\tif (!empty($conf->multicompany->enabled) && empty($object->entity)) {\n\t\t\t\t\t\tprint $form->textwithpicto($yn, $langs->trans(\"DontDowngradeSuperAdmin\"), 1, 'warning');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint $yn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Gender\n\t\t\tprint '<tr><td>'.$langs->trans(\"Gender\").'</td>';\n\t\t\tprint '<td>';\n\t\t\t$arraygender = array('man'=>$langs->trans(\"Genderman\"), 'woman'=>$langs->trans(\"Genderwoman\"), 'other'=>$langs->trans(\"Genderother\"));\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectarray('gender', $arraygender, GETPOSTISSET('gender') ?GETPOST('gender') : $object->gender, 1);\n\t\t\t} else {\n\t\t\t\tprint $arraygender[$object->gender];\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Employee\n\t\t\tprint '<tr>';\n\t\t\tprint '<td>'.$form->editfieldkey('Employee', 'employee', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<input type=\"checkbox\" name=\"employee\" value=\"1\"'.($object->employee ? ' checked=\"checked\"' : '').'>';\n\t\t\t\t//print $form->selectyesno(\"employee\", $object->employee, 1);\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"checkbox\" name=\"employee\" disabled value=\"1\"'.($object->employee ? ' checked=\"checked\"' : '').'>';\n\t\t\t\t/*if ($object->employee) {\n\t\t\t\t\tprint $langs->trans(\"Yes\");\n\t\t\t\t} else {\n\t\t\t\t\tprint $langs->trans(\"No\");\n\t\t\t\t}*/\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Hierarchy\n\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"HierarchicalResponsible\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user, 'fk_user', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'widthcentpercentminusx maxwidth300');\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"fk_user\" value=\"'.$object->fk_user.'\">';\n\t\t\t\t$huser = new User($db);\n\t\t\t\t$huser->fetch($object->fk_user);\n\t\t\t\tprint $huser->getNomUrl(1);\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Expense report validator\n\t\t\tif (!empty($conf->expensereport->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\t$text = $langs->trans(\"ForceUserExpenseValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_expense_validator, 'fk_user_expense_validator', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'widthcentpercentminusx maxwidth300');\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"fk_user_expense_validator\" value=\"'.$object->fk_user_expense_validator.'\">';\n\t\t\t\t\t$evuser = new User($db);\n\t\t\t\t\t$evuser->fetch($object->fk_user_expense_validator);\n\t\t\t\t\tprint $evuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Holiday request validator\n\t\t\tif (!empty($conf->holiday->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">';\n\t\t\t\t$text = $langs->trans(\"ForceUserHolidayValidator\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"ValidatorIsSupervisorByDefault\"), 1, 'help');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint img_picto('', 'user').$form->select_dolusers($object->fk_user_holiday_validator, 'fk_user_holiday_validator', 1, array($object->id), 0, '', 0, $object->entity, 0, 0, '', 0, '', 'widthcentpercentminusx maxwidth300');\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"fk_user_holiday_validator\" value=\"'.$object->fk_user_holiday_validator.'\">';\n\t\t\t\t\t$hvuser = new User($db);\n\t\t\t\t\t$hvuser->fetch($object->fk_user_holiday_validator);\n\t\t\t\t\tprint $hvuser->getNomUrl(1);\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// External user ?\n\t\t\tprint '<tr><td>'.$langs->trans(\"ExternalUser\").' ?</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($user->id == $object->id || !$user->admin) {\n\t\t\t\t// Read mode\n\t\t\t\t$type = $langs->trans(\"Internal\");\n\t\t\t\tif ($object->socid) {\n\t\t\t\t\t$type = $langs->trans(\"External\");\n\t\t\t\t}\n\t\t\t\tprint $form->textwithpicto($type, $langs->trans(\"InternalExternalDesc\"));\n\t\t\t\tif ($object->ldap_sid) {\n\t\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Select mode\n\t\t\t\t$type = 0;\n\t\t\t\tif ($object->contact_id) {\n\t\t\t\t\t$type = $object->contact_id;\n\t\t\t\t}\n\n\t\t\t\tif ($object->socid > 0 && !($object->contact_id > 0)) {\t// external user but no link to a contact\n\t\t\t\t\tprint img_picto('', 'company').$form->select_company($object->socid, 'socid', '', '&nbsp;');\n\t\t\t\t\tprint img_picto('', 'contact').$form->selectcontacts(0, 0, 'contactid', 1, '', '', 1, '', false, 1);\n\t\t\t\t\tif ($object->ldap_sid) {\n\t\t\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t\t\t}\n\t\t\t\t} elseif ($object->socid > 0 && $object->contact_id > 0) {\t// external user with a link to a contact\n\t\t\t\t\tprint img_picto('', 'company').$form->select_company(0, 'socid', '', '&nbsp;'); // We keep thirdparty empty, contact is already set\n\t\t\t\t\tprint img_picto('', 'contact').$form->selectcontacts(0, $object->contact_id, 'contactid', 1, '', '', 1, '', false, 1);\n\t\t\t\t\tif ($object->ldap_sid) {\n\t\t\t\t\t\tprint ' ('.$langs->trans(\"DomainUser\").')';\n\t\t\t\t\t}\n\t\t\t\t} else {\t// $object->socid is not > 0 here\n\t\t\t\t\tprint img_picto('', 'company').$form->select_company(0, 'socid', '', '&nbsp;'); // We keep thirdparty empty, contact is already set\n\t\t\t\t\tprint img_picto('', 'contact').$form->selectcontacts(0, 0, 'contactid', 1, '', '', 1, '', false, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// Date access validity\n\t\t\tprint '<tr><td>'.$langs->trans(\"RangeOfLoginValidity\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($datestartvalidity ? $datestartvalidity : $object->datestartvalidity, 'datestartvalidity', 0, 0, 1, 'formdatestartvalidity', 1, 1, 0, '', '', '', '', 1, '', '');\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->datestartvalidity, 'day');\n\t\t\t}\n\n\t\t\t/*if ($datestartvalidity && $dateendvalidity) {\n\t\t\t\tprint ' - ';\n\t\t\t}*/\n\t\t\tprint ' &nbsp; ';\n\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($dateendvalidity ? $datendevalidity : $object->dateendvalidity, 'dateendvalidity', 0, 0, 1, 'formdateendvalidity', 1, 0, 0, '', '', '', '', 1, '', '');\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->dateendvalidity, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Pass\n\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"Password\").'</td>';\n\t\t\tprint '<td>';\n\t\t\t$valuetoshow = '';\n\t\t\tif (preg_match('/ldap/', $dolibarr_main_authentication)) {\n\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$langs->trans(\"PasswordOfUserInLDAP\");\n\t\t\t}\n\t\t\tif (preg_match('/http/', $dolibarr_main_authentication)) {\n\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').$form->textwithpicto($text, $langs->trans(\"DolibarrInHttpAuthenticationSoPasswordUseless\", $dolibarr_main_authentication), 1, 'warning');\n\t\t\t}\n\t\t\tif (preg_match('/dolibarr/', $dolibarr_main_authentication)) {\n\t\t\t\tif ($caneditpassword) {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').'<input maxlength=\"32\" type=\"password\" class=\"flat\" name=\"password\" value=\"'.$object->pass.'\" autocomplete=\"new-password\">';\n\t\t\t\t} else {\n\t\t\t\t\t$valuetoshow .= ($valuetoshow ? (' '.$langs->trans(\"or\").' ') : '').preg_replace('/./i', '*', $object->pass);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other form for user password\n\t\t\t$parameters = array('valuetoshow' => $valuetoshow, 'caneditpassword' => $caneditpassword);\n\t\t\t$reshook = $hookmanager->executeHooks('printUserPasswordField', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tif ($reshook > 0) {\n\t\t\t\t$valuetoshow = $hookmanager->resPrint; // to replace\n\t\t\t} else {\n\t\t\t\t$valuetoshow .= $hookmanager->resPrint; // to add\n\t\t\t}\n\n\t\t\tprint $valuetoshow;\n\t\t\tprint \"</td></tr>\\n\";\n\n\t\t\t// API key\n\t\t\tif (!empty($conf->api->enabled) && ($user->id == $id || $user->admin)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"ApiKey\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint '<input class=\"minwidth300\" maxsize=\"32\" type=\"text\" id=\"api_key\" name=\"api_key\" value=\"'.$object->api_key.'\" autocomplete=\"off\">';\n\t\t\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\t\t\tprint '&nbsp;'.img_picto($langs->trans('Generate'), 'refresh', 'id=\"generate_api_key\" class=\"linkobject\"');\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\n\t\t\t// Address\n\t\t\tprint '<tr><td class=\"tdtop titlefieldcreate\">'.$form->editfieldkey('Address', 'address', '', $object, 0).'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<textarea name=\"address\" id=\"address\" class=\"quatrevingtpercent\" rows=\"3\" wrap=\"soft\">';\n\t\t\t}\n\t\t\tprint $object->address;\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '</textarea>';\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Zip\n\t\t\tprint '<tr><td>'.$form->editfieldkey('Zip', 'zipcode', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $formcompany->select_ziptown($object->zip, 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\t\t} else {\n\t\t\t\tprint $object->zip;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Town\n\t\t\tprint '<tr><td>'.$form->editfieldkey('Town', 'town', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $formcompany->select_ziptown($object->town, 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\t\t} else {\n\t\t\t\tprint $object->town;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Country\n\t\t\tprint '<tr><td>'.$form->editfieldkey('Country', 'selectcounty_id', '', $object, 0).'</td><td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->select_country((GETPOST('country_id') != '' ?GETPOST('country_id') : $object->country_id), 'country_id');\n\t\t\t\tif ($user->admin) {\n\t\t\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$countrylabel = getCountry($object->country_id, '0');\n\t\t\t\tprint $countrylabel;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// State\n\t\t\tif (empty($conf->global->USER_DISABLE_STATE)) {\n\t\t\t\tprint '<tr><td class=\"tdoverflow\">'.$form->editfieldkey('State', 'state_id', '', $object, 0).'</td><td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint img_picto('', 'state', 'class=\"pictofixedwidth\"');\n\t\t\t\t\tprint $formcompany->select_state($object->state_id, $object->country_code, 'state_id');\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->state_label;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Tel pro\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhonePro\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'phoning', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input type=\"text\" name=\"office_phone\" class=\"flat maxwidth200\" value=\"'.$object->office_phone.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_phone\" value=\"'.$object->office_phone.'\">';\n\t\t\t\tprint $object->office_phone;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Tel mobile\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"PhoneMobile\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'phoning_mobile', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input type=\"text\" name=\"user_mobile\" class=\"flat maxwidth200\" value=\"'.$object->user_mobile.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"user_mobile\" value=\"'.$object->user_mobile.'\">';\n\t\t\t\tprint $object->user_mobile;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Fax\n\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Fax\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'phoning_fax', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input type=\"text\" name=\"office_fax\" class=\"flat maxwidth200\" value=\"'.$object->office_fax.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"office_fax\" value=\"'.$object->office_fax.'\">';\n\t\t\t\tprint $object->office_fax;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\t// EMail\n\t\t\tprint \"<tr>\".'<td'.(!empty($conf->global->USER_MAIL_REQUIRED) ? ' class=\"fieldrequired\"' : '').'>'.$langs->trans(\"EMail\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint img_picto('', 'object_email', 'class=\"pictofixedwidth\"');\n\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\tprint '<input class=\"minwidth100 maxwidth500 widthcentpercentminusx\" type=\"text\" name=\"email\" class=\"flat\" value=\"'.$object->email.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"email\" value=\"'.$object->email.'\">';\n\t\t\t\tprint $object->email;\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\tif (!empty($conf->socialnetworks->enabled)) {\n\t\t\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t\t\tif ($value['active']) {\n\t\t\t\t\t\tprint '<tr><td>'.$langs->trans($value['label']).'</td>';\n\t\t\t\t\t\tprint '<td>';\n\t\t\t\t\t\tif (!empty($value['icon'])) {\n\t\t\t\t\t\t\tprint '<span class=\"fa '.$value['icon'].' pictofixedwidth\"></span>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($caneditfield && empty($object->ldap_sid)) {\n\t\t\t\t\t\t\tprint '<input type=\"text\" name=\"'.$key.'\" class=\"flat maxwidth200\" value=\"'.$object->socialnetworks[$key].'\">';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$object->socialnetworks[$key].'\">';\n\t\t\t\t\t\t\tprint $object->socialnetworks[$key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '</td></tr>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if social network is not active but value exist we do not want to loose it\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"'.$key.'\" value=\"'.$object->socialnetworks[$key].'\">';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// OpenID url\n\t\t\tif (isset($conf->file->main_authentication) && preg_match('/openid/', $conf->file->main_authentication) && !empty($conf->global->MAIN_OPENIDURL_PERUSER)) {\n\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"OpenIDURL\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input class=\"minwidth100\" type=\"url\" name=\"openid\" class=\"flat\" value=\"'.$object->openid.'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"openid\" value=\"'.$object->openid.'\">';\n\t\t\t\t\tprint $object->openid;\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\tprint '</table><hr><table class=\"border centpercent\">';\n\n\t\t\t// Accountancy code\n\t\t\tif (!empty($conf->accounting->enabled)) {\n\t\t\t\tprint \"<tr>\";\n\t\t\t\tprint '<td class=\"titlefieldcreate\">'.$langs->trans(\"AccountancyCode\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input type=\"text\" class=\"flat maxwidth300\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint '<input type=\"hidden\" name=\"accountancy_code\" value=\"'.$object->accountancy_code.'\">';\n\t\t\t\t\tprint $object->accountancy_code;\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\";\n\t\t\t}\n\n\t\t\t// User color\n\t\t\tif (!empty($conf->agenda->enabled)) {\n\t\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"ColorUser\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint $formother->selectColor(GETPOSTISSET('color') ?GETPOST('color', 'alphanohtml') : $object->color, 'color', null, 1, '', 'hideifnotset');\n\t\t\t\t} else {\n\t\t\t\t\tprint $formother->showColor($object->color, '');\n\t\t\t\t}\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Photo\n\t\t\tprint '<tr>';\n\t\t\tprint '<td class=\"titlefieldcreate\">'.$langs->trans(\"Photo\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->showphoto('userphoto', $object, 60, 0, $caneditfield, 'photowithmargin', 'small', 1, 0, 'user', 1);\n\t\t\tprint '</td>';\n\t\t\tprint '</tr>';\n\n\t\t\t// Categories\n\t\t\tif (!empty($conf->categorie->enabled) && !empty($user->rights->categorie->lire)) {\n\t\t\t\tprint '<tr><td>'.$form->editfieldkey('Categories', 'usercats', '', $object, 0).'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint img_picto('', 'category', 'class=\"pictofixedwidth\"');\n\t\t\t\t$cate_arbo = $form->select_all_categories(Categorie::TYPE_USER, null, null, null, null, 1);\n\t\t\t\t$c = new Categorie($db);\n\t\t\t\t$cats = $c->containing($object->id, Categorie::TYPE_USER);\n\t\t\t\tforeach ($cats as $cat) {\n\t\t\t\t\t$arrayselected[] = $cat->id;\n\t\t\t\t}\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint $form->multiselectarray('usercats', $cate_arbo, $arrayselected, '', 0, '', 0, '90%');\n\t\t\t\t} else {\n\t\t\t\t\tprint $form->showCategories($object->id, Categorie::TYPE_USER, 1);\n\t\t\t\t}\n\t\t\t\tprint \"</td></tr>\";\n\t\t\t}\n\n\t\t\t// Default language\n\t\t\tif (!empty($conf->global->MAIN_MULTILANGS)) {\n\t\t\t\tprint '<tr><td>'.$form->editfieldkey('DefaultLang', 'default_lang', '', $object, 0, 'string', '', 0, 0, 'id', $langs->trans(\"WarningNotLangOfInterface\", $langs->transnoentitiesnoconv(\"UserGUISetup\"))).'</td><td colspan=\"3\">'.\"\\n\";\n\t\t\t\tprint img_picto('', 'language', 'class=\"pictofixedwidth\"').$formadmin->select_language($object->lang, 'default_lang', 0, null, '1', 0, 0, 'widthcentpercentminusx maxwidth300');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '</tr>';\n\t\t\t}\n\n\t\t\t// Status\n\t\t\tprint '<tr><td>'.$langs->trans(\"Status\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $object->getLibStatut(4);\n\t\t\tprint '</td></tr>';\n\n\t\t\t// Company / Contact\n\t\t\tif (!empty($conf->societe->enabled)) {\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkToCompanyContact\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->socid > 0) {\n\t\t\t\t\t$societe = new Societe($db);\n\t\t\t\t\t$societe->fetch($object->socid);\n\t\t\t\t\tprint $societe->getNomUrl(1, '');\n\t\t\t\t\tif ($object->contact_id) {\n\t\t\t\t\t\t$contact = new Contact($db);\n\t\t\t\t\t\t$contact->fetch($object->contact_id);\n\t\t\t\t\t\tprint ' / <a href=\"'.DOL_URL_ROOT.'/contact/card.php?id='.$object->contact_id.'\">'.img_object($langs->trans(\"ShowContact\"), 'contact').' '.dol_trunc($contact->getFullName($langs), 32).'</a>';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"ThisUserIsNot\").'</span>';\n\t\t\t\t}\n\t\t\t\tprint ' <span class=\"opacitymedium hideonsmartphone\">('.$langs->trans(\"UseTypeFieldToChange\").')</span>';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Module Adherent\n\t\t\tif (!empty($conf->adherent->enabled)) {\n\t\t\t\t$langs->load(\"members\");\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"LinkedToDolibarrMember\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($object->fk_member) {\n\t\t\t\t\t$adh = new Adherent($db);\n\t\t\t\t\t$adh->fetch($object->fk_member);\n\t\t\t\t\t$adh->ref = $adh->login; // Force to show login instead of id\n\t\t\t\t\tprint $adh->getNomUrl(1);\n\t\t\t\t} else {\n\t\t\t\t\tprint '<span class=\"opacitymedium hideonsmartphone\">'.$langs->trans(\"UserNotLinkedToMember\").'</span>';\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Multicompany\n\t\t\t// TODO check if user not linked with the current entity before change entity (thirdparty, invoice, etc.) !!\n\t\t\tif (!empty($conf->multicompany->enabled) && is_object($mc)) {\n\t\t\t\t// This is now done with hook formObjectOptions. Keep this code for backward compatibility with old multicompany module\n\t\t\t\tif (!method_exists($mc, 'formObjectOptions')) {\n\t\t\t\t\tif (empty($conf->multicompany->transverse_mode) && $conf->entity == 1 && $user->admin && !$user->entity) {\n\t\t\t\t\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Entity\").'</td>';\n\t\t\t\t\t\tprint \"<td>\".$mc->select_entities($object->entity, 'entity', '', 0, 1, false, false, 1); // last parameter 1 means, show also a choice 0=>'all entities'\n\t\t\t\t\t\tprint \"</td></tr>\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<input type=\"hidden\" name=\"entity\" value=\"'.$conf->entity.'\" />';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Other attributes\n\t\t\t$parameters = array('colspan' => ' colspan=\"2\"');\n\t\t\t//include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_edit.tpl.php';\t\t// We do not use common tpl here because we need a special test on $caneditfield\n\t\t\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\t\tprint $hookmanager->resPrint;\n\t\t\tif (empty($reshook)) {\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint $object->showOptionals($extrafields, 'edit');\n\t\t\t\t} else {\n\t\t\t\t\tprint $object->showOptionals($extrafields, 'view');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Signature\n\t\t\tprint '<tr><td class=\"tdtop\">'.$langs->trans(\"Signature\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\t\t\t\t$doleditor = new DolEditor('signature', $object->signature, '', 138, 'dolibarr_notes', 'In', false, true, empty($conf->global->FCKEDITOR_ENABLE_USERSIGN) ? 0 : 1, ROWS_4, '90%');\n\t\t\t\tprint $doleditor->Create(1);\n\t\t\t} else {\n\t\t\t\tprint dol_htmlentitiesbr($object->signature);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\n\t\t\tprint '</table>';\n\n\t\t\tprint '<hr>';\n\n\n\t\t\tprint '<table class=\"border centpercent\">';\n\n\n\t\t\t// TODO Move this into tab RH (HierarchicalResponsible must be on both tab)\n\n\t\t\t// Default warehouse\n\t\t\tif (!empty($conf->stock->enabled) && !empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER)) {\n\t\t\t\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"DefaultWarehouse\").'</td><td>';\n\t\t\t\tprint $formproduct->selectWarehouses($object->fk_warehouse, 'fk_warehouse', 'warehouseopen', 1);\n\t\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/product/stock/card.php?action=create&amp;backtopage='.urlencode($_SERVER['PHP_SELF'].'?id='.$object->id.'&action=edit').'\"><span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddWarehouse\").'\"></span></a>';\n\t\t\t\tprint '</td></tr>';\n\t\t\t}\n\n\t\t\t// Position/Job\n\t\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans(\"PostOrFunction\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<input type=\"text\" class=\"minwidth300 maxwidth500\" name=\"job\" value=\"'.dol_escape_htmltag($object->job).'\">';\n\t\t\t} else {\n\t\t\t\tprint '<input type=\"hidden\" name=\"job\" value=\"'.dol_escape_htmltag($object->job).'\">';\n\t\t\t\tprint dol_escape_htmltag($object->job);\n\t\t\t}\n\t\t\tprint '</td></tr>';\n\n\t\t\tif ((!empty($conf->salaries->enabled) && !empty($user->rights->salaries->read) && in_array($id, $childids))\n\t\t\t\t|| (!empty($conf->salaries->enabled) && !empty($user->rights->salaries->readall))\n\t\t\t\t|| (!empty($conf->hrm->enabled) && !empty($user->rights->hrm->employee->read))) {\n\t\t\t\t$langs->load(\"salaries\");\n\n\t\t\t\t// THM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"THM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"THMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"thm\" value=\"'.price2num(GETPOST('thm') ?GETPOST('thm') : $object->thm).'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint ($object->thm != '' ?price($object->thm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// TJM\n\t\t\t\tprint '<tr><td>';\n\t\t\t\t$text = $langs->trans(\"TJM\");\n\t\t\t\tprint $form->textwithpicto($text, $langs->trans(\"TJMDescription\"), 1, 'help', 'classthm');\n\t\t\t\tprint '</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tif ($caneditfield) {\n\t\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"tjm\" value=\"'.price2num(GETPOST('tjm') ?GETPOST('tjm') : $object->tjm).'\">';\n\t\t\t\t} else {\n\t\t\t\t\tprint ($object->tjm != '' ?price($object->tjm, '', $langs, 1, -1, -1, $conf->currency) : '');\n\t\t\t\t}\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\n\t\t\t\t// Salary\n\t\t\t\tprint '<tr><td>'.$langs->trans(\"Salary\").'</td>';\n\t\t\t\tprint '<td>';\n\t\t\t\tprint img_picto('', 'salary', 'class=\"pictofixedwidth paddingright\"').'<input size=\"8\" type=\"text\" name=\"salary\" value=\"'.price2num(GETPOST('salary') ?GETPOST('salary') : $object->salary).'\">';\n\t\t\t\tprint '</td>';\n\t\t\t\tprint \"</tr>\\n\";\n\t\t\t}\n\n\t\t\t// Weeklyhours\n\t\t\tprint '<tr><td>'.$langs->trans(\"WeeklyHours\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint '<input size=\"8\" type=\"text\" name=\"weeklyhours\" value=\"'.price2num(GETPOST('weeklyhours') ?GETPOST('weeklyhours') : $object->weeklyhours).'\">';\n\t\t\t} else {\n\t\t\t\tprint price2num($object->weeklyhours);\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date employment\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateEmployment\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($dateemployment ? $dateemployment : $object->dateemployment, 'dateemployment', 0, 0, 1, 'formdateemployment', 1, 1);\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->dateemployment, 'day');\n\t\t\t}\n\n\t\t\tif ($dateemployment && $dateemploymentend) {\n\t\t\t\tprint ' - ';\n\t\t\t}\n\n\t\t\tif ($caneditfield) {\n\t\t\t\tprint $form->selectDate($dateemploymentend ? $dateemploymentend : $object->dateemploymentend, 'dateemploymentend', 0, 0, 1, 'formdateemploymentend', 1, 0);\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->dateemploymentend, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\t// Date birth\n\t\t\tprint '<tr><td>'.$langs->trans(\"DateOfBirth\").'</td>';\n\t\t\tprint '<td>';\n\t\t\tif ($caneditfield) {\n\t\t\t\techo $form->selectDate($dateofbirth ? $dateofbirth : $object->birth, 'dateofbirth', 0, 0, 1, 'updateuser', 1, 0);\n\t\t\t} else {\n\t\t\t\tprint dol_print_date($object->birth, 'day');\n\t\t\t}\n\t\t\tprint '</td>';\n\t\t\tprint \"</tr>\\n\";\n\n\t\t\tprint '</table>';\n\n\t\t\tprint dol_get_fiche_end();\n\n\t\t\tprint '<div class=\"center\">';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Save\").'\" class=\"button button-save\" type=\"submit\" name=\"save\">';\n\t\t\tprint '&nbsp; &nbsp; &nbsp;';\n\t\t\tprint '<input value=\"'.$langs->trans(\"Cancel\").'\" class=\"button button-cancel\" type=\"submit\" name=\"cancel\">';\n\t\t\tprint '</div>';\n\n\t\t\tprint '</form>';\n\t\t}\n\n\t\tif ($action != 'edit' && $action != 'presend') {\n\t\t\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\n\t\t\t// Generated documents\n\t\t\t$filename = dol_sanitizeFileName($object->ref);\n\t\t\t$filedir = $conf->user->dir_output.\"/\".dol_sanitizeFileName($object->ref);\n\t\t\t$urlsource = $_SERVER[\"PHP_SELF\"].\"?id=\".$object->id;\n\t\t\t$genallowed = $user->rights->user->user->lire;\n\t\t\t$delallowed = $user->rights->user->user->creer;\n\n\t\t\tprint $formfile->showdocuments('user', $filename, $filedir, $urlsource, $genallowed, $delallowed, $object->model_pdf, 1, 0, 0, 28, 0, '', 0, '', empty($soc->default_lang) ? '' : $soc->default_lang);\n\t\t\t$somethingshown = $formfile->numoffiles;\n\n\t\t\t// Show links to link elements\n\t\t\t$linktoelem = $form->showLinkToObjectBlock($object, null, null);\n\t\t\t$somethingshown = $form->showLinkedObjectBlock($object, $linktoelem);\n\n\t\t\tprint '</div><div class=\"fichehalfright\"><div class=\"ficheaddleft\">';\n\n\t\t\t// List of actions on element\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/html.formactions.class.php';\n\t\t\t$formactions = new FormActions($db);\n\t\t\t$somethingshown = $formactions->showactions($object, 'user', $socid, 1);\n\n\t\t\tprint '</div></div></div>';\n\t\t}\n\n\t\tif (!empty($conf->ldap->enabled) && !empty($object->ldap_sid)) {\n\t\t\t$ldap->close();\n\t\t}\n\t}\n}\n\nif (!empty($conf->api->enabled) && !empty($conf->use_javascript_ajax)) {\n\tprint \"\\n\".'<script type=\"text/javascript\">';\n\tprint '$(document).ready(function () {\n            $(\"#generate_api_key\").click(function() {\n                $.get( \"'.DOL_URL_ROOT.'/core/ajax/security.php\", {\n                    action: \\'getrandompassword\\',\n                    generic: true\n                },\n                function(token) {\n                    $(\"#api_key\").val(token);\n                });\n            });\n    });';\n\tprint '</script>';\n}\n\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (c) 2002-2007  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (c) 2002-2003  Jean-Louis Bergamo      <jlb@j1b.org>\n * Copyright (c) 2004-2012  Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2004       Sebastien Di Cintio     <sdicintio@ressource-toi.org>\n * Copyright (C) 2004       Benoit Mortier          <benoit.mortier@opensides.be>\n * Copyright (C) 2005-2017  Regis Houssin           <regis.houssin@inodbox.com>\n * Copyright (C) 2005       Lionel Cousteix         <etm_ltd@tiscali.co.uk>\n * Copyright (C) 2011       Herve Prot              <herve.prot@symeos.com>\n * Copyright (C) 2013-2019  Philippe Grand          <philippe.grand@atoo-net.com>\n * Copyright (C) 2013-2015  Alexandre Spangaro      <aspangaro@open-dsi.fr>\n * Copyright (C) 2015       Marcos Garc\u00eda           <marcosgdf@gmail.com>\n * Copyright (C) 2018       charlene Benke          <charlie@patas-monkey.com>\n * Copyright (C) 2018       Nicolas ZABOURI         <info@inovea-conseil.com>\n * Copyright (C) 2019-2020  Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n * Copyright (C) 2019       Abbes Bahfir            <dolipar@dolipar.org>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/user/class/user.class.php\n *\t\\brief      File of class to manage users\n *  \\ingroup\tcore\n */\n\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/user/class/usergroup.class.php';\n\n/**\n *\tClass to manage Dolibarr users\n */\nclass User extends CommonObject\n{\n\t/**\n\t * @var string ID to identify managed object\n\t */\n\tpublic $element = 'user';\n\n\t/**\n\t * @var string Name of table without prefix where object is stored\n\t */\n\tpublic $table_element = 'user';\n\n\t/**\n\t * @var string Field with ID of parent key if this field has a parent\n\t */\n\tpublic $fk_element = 'fk_user';\n\n\t/**\n\t * 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\t * @var int\n\t */\n\tpublic $ismultientitymanaged = 1;\n\n\t/**\n\t * @var string picto\n\t */\n\tpublic $picto = 'user';\n\n\tpublic $id = 0;\n\tpublic $statut;\n\tpublic $ldap_sid;\n\tpublic $search_sid;\n\tpublic $employee;\n\tpublic $civility_code;\n\n\t/**\n\t * @var string gender\n\t */\n\tpublic $gender;\n\tpublic $birth;\n\n\t/**\n\t * @var string email\n\t */\n\tpublic $email;\n\n\t/**\n\t * @var string personal email\n\t */\n\tpublic $personal_email;\n\n\t/**\n\t * @var array array of socialnetworks\n\t */\n\tpublic $socialnetworks;\n\n\t/**\n\t * @var string skype account\n\t * @deprecated\n\t */\n\tpublic $skype;\n\n\t/**\n\t * @var string twitter account\n\t * @deprecated\n\t */\n\tpublic $twitter;\n\n\t/**\n\t * @var string facebook account\n\t * @deprecated\n\t */\n\tpublic $facebook;\n\n\t/**\n\t * @var string linkedin account\n\t * @deprecated\n\t */\n\tpublic $linkedin;\n\n\t/**\n\t * @var string job position\n\t */\n\tpublic $job;\n\n\t/**\n\t * @var string user signature\n\t */\n\tpublic $signature;\n\n\t/**\n\t * @var string Address\n\t */\n\tpublic $address;\n\n\t/**\n\t * @var string zip code\n\t */\n\tpublic $zip;\n\n\t/**\n\t * @var string town\n\t */\n\tpublic $town;\n\tpublic $state_id; // The state/department\n\tpublic $state_code;\n\tpublic $state;\n\n\t/**\n\t * @var string office phone\n\t */\n\tpublic $office_phone;\n\n\t/**\n\t * @var string office fax\n\t */\n\tpublic $office_fax;\n\n\t/**\n\t * @var string phone mobile\n\t */\n\tpublic $user_mobile;\n\n\t/**\n\t * @var string personal phone mobile\n\t */\n\tpublic $personal_mobile;\n\n\t/**\n\t * @var int 1 if admin 0 if standard user\n\t */\n\tpublic $admin;\n\n\t/**\n\t * @var string user login\n\t */\n\tpublic $login;\n\n\t/**\n\t * @var string user apikey\n\t */\n\tpublic $api_key;\n\n\t/**\n\t * @var int Entity\n\t */\n\tpublic $entity;\n\n\t/**\n\t * @var string Clear password in memory\n\t */\n\tpublic $pass;\n\n\t/**\n\t * @var string Clear password in database (defined if DATABASE_PWD_ENCRYPTED=0)\n\t */\n\tpublic $pass_indatabase;\n\n\t/**\n\t * @var string Encrypted password in database (always defined)\n\t */\n\tpublic $pass_indatabase_crypted;\n\n\t/**\n\t * @var string Temporary password\n\t */\n\tpublic $pass_temp;\n\n\t/**\n\t * Date creation record (datec)\n\t *\n\t * @var integer\n\t */\n\tpublic $datec;\n\n\t/**\n\t * Date modification record (tms)\n\t *\n\t * @var integer\n\t */\n\tpublic $datem;\n\n\t/**\n\t * @var int If this is defined, it is an external user\n\t */\n\tpublic $socid;\n\n\t/**\n\t * @var int If this is defined, it is a user created from a contact\n\t */\n\tpublic $contact_id;\n\n\t/**\n\t * @var int ID\n\t */\n\tpublic $fk_member;\n\n\t/**\n\t * @var int User ID of supervisor\n\t */\n\tpublic $fk_user;\n\n\t/**\n\t * @var int User ID of expense validator\n\t */\n\tpublic $fk_user_expense_validator;\n\n\t/**\n\t * @var int User ID of holidays validator\n\t */\n\tpublic $fk_user_holiday_validator;\n\n\t/**\n\t * @string clicktodial url\n\t */\n\tpublic $clicktodial_url;\n\n\t/**\n\t * @var string clicktodial login\n\t */\n\tpublic $clicktodial_login;\n\n\t/**\n\t * @var string clicktodial password\n\t */\n\tpublic $clicktodial_password;\n\n\t/**\n\t * @var string clicktodial poste\n\t */\n\tpublic $clicktodial_poste;\n\n\tpublic $datelastlogin;\n\tpublic $datepreviouslogin;\n\tpublic $datestartvalidity;\n\tpublic $dateendvalidity;\n\n\t/**\n\t * @var string photo filename\n\t */\n\tpublic $photo;\n\tpublic $lang;\n\n\t/**\n\t * @var stdClass Class of permissions user->rights->permx\n\t */\n\tpublic $rights;\n\n\t/**\n\t * @var int  All permissions are loaded\n\t */\n\tpublic $all_permissions_are_loaded;\n\n\t/**\n\t * @var int Number of rights granted to the user\n\t */\n\tpublic $nb_rights;\n\n\t/**\n\t * @var array\tTo store list of groups of user (used by API /info for example)\n\t */\n\tpublic $user_group_list;\n\n\t/**\n\t * @var array Cache array of already loaded permissions\n\t */\n\tprivate $_tab_loaded = array();\n\n\t/**\n\t * @var stdClass To store personal config\n\t */\n\tpublic $conf;\n\tpublic $default_values; // To store default values for user\n\tpublic $lastsearch_values_tmp; // To store current search criterias for user\n\tpublic $lastsearch_values; // To store last saved search criterias for user\n\n\tpublic $users = array(); // To store all tree of users hierarchy\n\tpublic $parentof; // To store an array of all parents for all ids.\n\tprivate $cache_childids; // Cache array of already loaded childs\n\n\tpublic $accountancy_code; // Accountancy code in prevision of the complete accountancy module\n\n\tpublic $thm; // Average cost of employee - Used for valuation of time spent\n\tpublic $tjm; // Average cost of employee\n\n\tpublic $salary; // Monthly salary       - Denormalized value from llx_user_employment\n\tpublic $salaryextra; // Monthly salary extra - Denormalized value from llx_user_employment\n\tpublic $weeklyhours; // Weekly hours         - Denormalized value from llx_user_employment\n\n\t/**\n\t * @var string Define background color for user in agenda\n\t */\n\tpublic $color;\n\n\tpublic $dateemployment; // Define date of employment by company\n\tpublic $dateemploymentend; // Define date of employment end by company\n\n\tpublic $default_c_exp_tax_cat;\n\tpublic $default_range;\n\n\t/**\n\t *@var int id of warehouse\n\t */\n\tpublic $fk_warehouse;\n\n\tpublic $fields = array(\n\t\t'rowid'=>array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>1, 'visible'=>-2, 'notnull'=>1, 'index'=>1, 'position'=>1, 'comment'=>'Id'),\n\t\t'lastname'=>array('type'=>'varchar(50)', 'label'=>'Name', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>1, 'index'=>1, 'position'=>20, 'searchall'=>1),\n\t\t'firstname'=>array('type'=>'varchar(50)', 'label'=>'Name', 'enabled'=>1, 'visible'=>1, 'notnull'=>1, 'showoncombobox'=>1, 'index'=>1, 'position'=>10, 'searchall'=>1),\n\t);\n\n\n\tconst STATUS_DISABLED = 0;\n\tconst STATUS_ENABLED = 1;\n\n\n\n\t/**\n\t *    Constructor of the class\n\t *\n\t *    @param   DoliDb  $db     Database handler\n\t */\n\tpublic function __construct($db)\n\t{\n\t\t$this->db = $db;\n\n\t\t// User preference\n\t\t$this->liste_limit = 0;\n\t\t$this->clicktodial_loaded = 0;\n\n\t\t// For cache usage\n\t\t$this->all_permissions_are_loaded = 0;\n\t\t$this->nb_rights = 0;\n\n\t\t// Force some default values\n\t\t$this->admin = 0;\n\t\t$this->employee = 1;\n\n\t\t$this->conf = new stdClass();\n\t\t$this->rights = new stdClass();\n\t\t$this->rights->user = new stdClass();\n\t\t$this->rights->user->user = new stdClass();\n\t\t$this->rights->user->self = new stdClass();\n\t}\n\n\t/**\n\t *\tLoad a user from database with its id or ref (login).\n\t *  This function does not load permissions, only user properties. Use getrights() for this just after the fetch.\n\t *\n\t *\t@param\tint\t\t$id\t\t       \t\tIf defined, id to used for search\n\t * \t@param  string\t$login       \t\tIf defined, login to used for search\n\t *\t@param  string\t$sid\t\t\t\tIf defined, sid to used for search\n\t * \t@param\tint\t\t$loadpersonalconf\t1=also load personal conf of user (in $user->conf->xxx), 0=do not load personal conf.\n\t *  @param  int     $entity             If a value is >= 0, we force the search on a specific entity. If -1, means search depens on default setup.\n\t *  @param\tint\t\t$email       \t\tIf defined, email to used for search\n\t * \t@return\tint\t\t\t\t\t\t\t<0 if KO, 0 not found, >0 if OK\n\t */\n\tpublic function fetch($id = '', $login = '', $sid = '', $loadpersonalconf = 0, $entity = -1, $email = '')\n\t{\n\t\tglobal $conf, $user;\n\n\t\t// Clean parameters\n\t\t$login = trim($login);\n\n\t\t// Get user\n\t\t$sql = \"SELECT u.rowid, u.lastname, u.firstname, u.employee, u.gender, u.civility as civility_code, u.birth, u.email, u.personal_email, u.job,\";\n\t\t$sql .= \" u.socialnetworks,\";\n\t\t$sql .= \" u.signature, u.office_phone, u.office_fax, u.user_mobile, u.personal_mobile,\";\n\t\t$sql .= \" u.address, u.zip, u.town, u.fk_state as state_id, u.fk_country as country_id,\";\n\t\t$sql .= \" u.admin, u.login, u.note as note_private, u.note_public,\";\n\t\t$sql .= \" u.pass, u.pass_crypted, u.pass_temp, u.api_key,\";\n\t\t$sql .= \" u.fk_soc, u.fk_socpeople, u.fk_member, u.fk_user, u.ldap_sid, u.fk_user_expense_validator, u.fk_user_holiday_validator,\";\n\t\t$sql .= \" u.statut, u.lang, u.entity,\";\n\t\t$sql .= \" u.datec as datec,\";\n\t\t$sql .= \" u.tms as datem,\";\n\t\t$sql .= \" u.datelastlogin as datel,\";\n\t\t$sql .= \" u.datepreviouslogin as datep,\";\n\t\t$sql .= \" u.datelastpassvalidation,\";\n\t\t$sql .= \" u.datestartvalidity,\";\n\t\t$sql .= \" u.dateendvalidity,\";\n\t\t$sql .= \" u.photo as photo,\";\n\t\t$sql .= \" u.openid as openid,\";\n\t\t$sql .= \" u.accountancy_code,\";\n\t\t$sql .= \" u.thm,\";\n\t\t$sql .= \" u.tjm,\";\n\t\t$sql .= \" u.salary,\";\n\t\t$sql .= \" u.salaryextra,\";\n\t\t$sql .= \" u.weeklyhours,\";\n\t\t$sql .= \" u.color,\";\n\t\t$sql .= \" u.dateemployment, u.dateemploymentend,\";\n\t\t$sql .= \" u.fk_warehouse,\";\n\t\t$sql .= \" u.ref_ext,\";\n\t\t$sql .= \" u.default_range, u.default_c_exp_tax_cat,\"; // Expense report default mode\n\t\t$sql .= \" c.code as country_code, c.label as country,\";\n\t\t$sql .= \" d.code_departement as state_code, d.nom as state\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_country as c ON u.fk_country = c.rowid\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_departements as d ON u.fk_state = d.rowid\";\n\n\t\tif ($entity < 0) {\n\t\t\tif ((empty($conf->multicompany->enabled) || empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) && (!empty($user->entity))) {\n\t\t\t\t$sql .= \" WHERE u.entity IN (0, \".((int) $conf->entity).\")\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" WHERE u.entity IS NOT NULL\"; // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\t}\n\t\t} else {\n\t\t\t// The fetch was forced on an entity\n\t\t\tif (!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t$sql .= \" WHERE u.entity IS NOT NULL\"; // multicompany is on in transverse mode or user making fetch is on entity 0, so user is allowed to fetch anywhere into database\n\t\t\t} else {\n\t\t\t\t$sql .= \" WHERE u.entity IN (0, \".((int) (($entity != '' && $entity >= 0) ? $entity : $conf->entity)).\")\"; // search in entity provided in parameter\n\t\t\t}\n\t\t}\n\n\t\tif ($sid) {    // permet une recherche du user par son SID ActiveDirectory ou Samba\n\t\t\t$sql .= \" AND (u.ldap_sid = '\".$this->db->escape($sid).\"' OR u.login = '\".$this->db->escape($login).\"') LIMIT 1\";\n\t\t} elseif ($login) {\n\t\t\t$sql .= \" AND u.login = '\".$this->db->escape($login).\"'\";\n\t\t} elseif ($email) {\n\t\t\t$sql .= \" AND u.email = '\".$this->db->escape($email).\"'\";\n\t\t} else {\n\t\t\t$sql .= \" AND u.rowid = \".((int) $id);\n\t\t}\n\t\t$sql .= \" ORDER BY u.entity ASC\"; // Avoid random result when there is 2 login in 2 different entities\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\tif ($obj) {\n\t\t\t\t$this->id = $obj->rowid;\n\t\t\t\t$this->ref = $obj->rowid;\n\n\t\t\t\t$this->ref_ext = $obj->ref_ext;\n\n\t\t\t\t$this->ldap_sid = $obj->ldap_sid;\n\t\t\t\t$this->civility_code = $obj->civility_code;\n\t\t\t\t$this->lastname = $obj->lastname;\n\t\t\t\t$this->firstname = $obj->firstname;\n\n\t\t\t\t$this->employee = $obj->employee;\n\n\t\t\t\t$this->login = $obj->login;\n\t\t\t\t$this->gender       = $obj->gender;\n\t\t\t\t$this->birth        = $this->db->jdate($obj->birth);\n\t\t\t\t$this->pass_indatabase = $obj->pass;\n\t\t\t\t$this->pass_indatabase_crypted = $obj->pass_crypted;\n\t\t\t\t$this->pass = $obj->pass;\n\t\t\t\t$this->pass_temp\t= $obj->pass_temp;\n\t\t\t\t$this->api_key = $obj->api_key;\n\n\t\t\t\t$this->address \t\t= $obj->address;\n\t\t\t\t$this->zip \t\t\t= $obj->zip;\n\t\t\t\t$this->town \t\t= $obj->town;\n\n\t\t\t\t$this->country_id = $obj->country_id;\n\t\t\t\t$this->country_code = $obj->country_id ? $obj->country_code : '';\n\t\t\t\t//$this->country = $obj->country_id?($langs->trans('Country'.$obj->country_code)!='Country'.$obj->country_code?$langs->transnoentities('Country'.$obj->country_code):$obj->country):'';\n\n\t\t\t\t$this->state_id     = $obj->state_id;\n\t\t\t\t$this->state_code   = $obj->state_code;\n\t\t\t\t$this->state        = ($obj->state != '-' ? $obj->state : '');\n\n\t\t\t\t$this->office_phone\t= $obj->office_phone;\n\t\t\t\t$this->office_fax   = $obj->office_fax;\n\t\t\t\t$this->user_mobile  = $obj->user_mobile;\n\t\t\t\t$this->personal_mobile = $obj->personal_mobile;\n\t\t\t\t$this->email = $obj->email;\n\t\t\t\t$this->personal_email = $obj->personal_email;\n\t\t\t\t$this->socialnetworks = (array) json_decode($obj->socialnetworks, true);\n\t\t\t\t$this->job = $obj->job;\n\t\t\t\t$this->signature = $obj->signature;\n\t\t\t\t$this->admin\t\t= $obj->admin;\n\t\t\t\t$this->note_public = $obj->note_public;\n\t\t\t\t$this->note_private = $obj->note_private;\n\t\t\t\t$this->note\t\t\t= $obj->note_private;\n\t\t\t\t$this->statut\t\t= $obj->statut;\n\t\t\t\t$this->photo\t\t= $obj->photo;\n\t\t\t\t$this->openid\t\t= $obj->openid;\n\t\t\t\t$this->lang\t\t\t= $obj->lang;\n\t\t\t\t$this->entity\t\t= $obj->entity;\n\t\t\t\t$this->accountancy_code = $obj->accountancy_code;\n\t\t\t\t$this->thm\t\t\t= $obj->thm;\n\t\t\t\t$this->tjm\t\t\t= $obj->tjm;\n\t\t\t\t$this->salary = $obj->salary;\n\t\t\t\t$this->salaryextra = $obj->salaryextra;\n\t\t\t\t$this->weeklyhours = $obj->weeklyhours;\n\t\t\t\t$this->color = $obj->color;\n\t\t\t\t$this->dateemployment = $this->db->jdate($obj->dateemployment);\n\t\t\t\t$this->dateemploymentend = $this->db->jdate($obj->dateemploymentend);\n\n\t\t\t\t$this->datec\t\t\t\t= $this->db->jdate($obj->datec);\n\t\t\t\t$this->datem\t\t\t\t= $this->db->jdate($obj->datem);\n\t\t\t\t$this->datelastlogin = $this->db->jdate($obj->datel);\n\t\t\t\t$this->datepreviouslogin = $this->db->jdate($obj->datep);\n\t\t\t\t$this->datestartvalidity = $this->db->jdate($obj->datestartvalidity);\n\t\t\t\t$this->dateendvalidity = $this->db->jdate($obj->dateendvalidity);\n\n\t\t\t\t$this->socid                = $obj->fk_soc;\n\t\t\t\t$this->contact_id           = $obj->fk_socpeople;\n\t\t\t\t$this->fk_member            = $obj->fk_member;\n\t\t\t\t$this->fk_user = $obj->fk_user;\n\t\t\t\t$this->fk_user_expense_validator = $obj->fk_user_expense_validator;\n\t\t\t\t$this->fk_user_holiday_validator = $obj->fk_user_holiday_validator;\n\n\t\t\t\t$this->default_range = $obj->default_range;\n\t\t\t\t$this->default_c_exp_tax_cat = $obj->default_c_exp_tax_cat;\n\t\t\t\t$this->fk_warehouse = $obj->fk_warehouse;\n\n\t\t\t\t// Protection when module multicompany was set, admin was set to first entity and then, the module was disabled,\n\t\t\t\t// in such case, this admin user must be admin for ALL entities.\n\t\t\t\tif (empty($conf->multicompany->enabled) && $this->admin && $this->entity == 1) {\n\t\t\t\t\t$this->entity = 0;\n\t\t\t\t}\n\n\t\t\t\t// Retrieve all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\n\t\t\t\t$this->db->free($result);\n\t\t\t} else {\n\t\t\t\t$this->error = \"USERNOTFOUND\";\n\t\t\t\tdol_syslog(get_class($this).\"::fetch user not found\", LOG_DEBUG);\n\n\t\t\t\t$this->db->free($result);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\n\t\t// To get back the global configuration unique to the user\n\t\tif ($loadpersonalconf) {\n\t\t\t// Load user->conf for user\n\t\t\t$sql = \"SELECT param, value FROM \".MAIN_DB_PREFIX.\"user_param\";\n\t\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\t\t\t$sql .= \" AND entity = \".$conf->entity;\n\t\t\t//dol_syslog(get_class($this).'::fetch load personalized conf', LOG_DEBUG);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif ($resql) {\n\t\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t\t\t$p = (!empty($obj->param) ? $obj->param : '');\n\t\t\t\t\tif (!empty($p)) {\n\t\t\t\t\t\t$this->conf->$p = $obj->value;\n\t\t\t\t\t}\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\treturn -2;\n\t\t\t}\n\n\t\t\t$result = $this->loadDefaultValues();\n\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Load default values from database table into property ->default_values\n\t *\n\t *  @return int\t\t\t\t\t\t> 0 if OK, < 0 if KO\n\t */\n\tpublic function loadDefaultValues()\n\t{\n\t\tglobal $conf;\n\t\tif (!empty($conf->global->MAIN_ENABLE_DEFAULT_VALUES)) {\n\t\t\t// Load user->default_values for user. TODO Save this in memcached ?\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/defaultvalues.class.php';\n\n\t\t\t$defaultValues = new DefaultValues($this->db);\n\t\t\t$result = $defaultValues->fetchAll('', '', 0, 0, array('t.user_id'=>array(0, $this->id), 'entity'=>array((isset($this->entity) ? $this->entity : $conf->entity), $conf->entity)));\t// User 0 (all) + me (if defined)\n\n\t\t\tif (!is_array($result) && $result < 0) {\n\t\t\t\tsetEventMessages($defaultValues->error, $defaultValues->errors, 'errors');\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t} elseif (count($result) > 0) {\n\t\t\t\tforeach ($result as $defval) {\n\t\t\t\t\tif (!empty($defval->page) && !empty($defval->type) && !empty($defval->param)) {\n\t\t\t\t\t\t$pagewithoutquerystring = $defval->page;\n\t\t\t\t\t\t$pagequeries = '';\n\t\t\t\t\t\t$reg = array();\n\t\t\t\t\t\tif (preg_match('/^([^\\?]+)\\?(.*)$/', $pagewithoutquerystring, $reg)) {    // There is query param\n\t\t\t\t\t\t\t$pagewithoutquerystring = $reg[1];\n\t\t\t\t\t\t\t$pagequeries = $reg[2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->default_values[$pagewithoutquerystring][$defval->type][$pagequeries ? $pagequeries : '_noquery_'][$defval->param] = $defval->value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!empty($this->default_values)) {\n\t\t\t\tforeach ($this->default_values as $a => $b) {\n\t\t\t\t\tforeach ($b as $c => $d) {\n\t\t\t\t\t\tkrsort($this->default_values[$a][$c]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Add a right to the user\n\t *\n\t * \t@param\tint\t\t$rid\t\t\tId of permission to add or 0 to add several permissions\n\t *  @param  string\t$allmodule\t\tAdd all permissions of module $allmodule or 'allmodules' to include all modules.\n\t *  @param  string\t$allperms\t\tAdd all permissions of module $allmodule, subperms $allperms only or '' to include all permissions.\n\t *  @param\tint\t\t$entity\t\t\tEntity to use\n\t *  @param  int\t    $notrigger\t\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int\t\t\t\t\t\t> 0 if OK, < 0 if KO\n\t *  @see\tclearrights(), delrights(), getrights()\n\t */\n\tpublic function addrights($rid, $allmodule = '', $allperms = '', $entity = 0, $notrigger = 0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$entity = (!empty($entity) ? $entity : $conf->entity);\n\n\t\tdol_syslog(get_class($this).\"::addrights $rid, $allmodule, $allperms, $entity\");\n\t\t$error = 0;\n\t\t$whereforadd = '';\n\n\t\t$this->db->begin();\n\n\t\tif (!empty($rid)) {\n\t\t\t$module = $perms = $subperms = '';\n\n\t\t\t// Si on a demande ajout d'un droit en particulier, on recupere les caracteristiques (module, perms et subperms) de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE id = \".((int) $rid);\n\t\t\t$sql .= \" AND entity = \".((int) $entity);\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\t$whereforadd = \"id=\".((int) $rid);\n\t\t\t// Ajout des droits induits\n\t\t\tif (!empty($subperms)) {\n\t\t\t\t$whereforadd .= \" OR (module='\".$this->db->escape($module).\"' AND perms='\".$this->db->escape($perms).\"' AND (subperms='lire' OR subperms='read'))\";\n\t\t\t} elseif (!empty($perms)) {\n\t\t\t\t$whereforadd .= \" OR (module='\".$this->db->escape($module).\"' AND (perms='lire' OR perms='read') AND subperms IS NULL)\";\n\t\t\t}\n\t\t} else {\n\t\t\t// On a pas demande un droit en particulier mais une liste de droits\n\t\t\t// sur la base d'un nom de module de de perms\n\t\t\t// Where pour la liste des droits a ajouter\n\t\t\tif (!empty($allmodule)) {\n\t\t\t\tif ($allmodule == 'allmodules') {\n\t\t\t\t\t$whereforadd = 'allmodules';\n\t\t\t\t} else {\n\t\t\t\t\t$whereforadd = \"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\t\t\tif (!empty($allperms)) {\n\t\t\t\t\t\t$whereforadd .= \" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add automatically other permission using the criteria whereforadd\n\t\tif (!empty($whereforadd)) {\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE entity = \".$entity;\n\t\t\tif (!empty($whereforadd) && $whereforadd != 'allmodules') {\n\t\t\t\t$sql .= \" AND \".$whereforadd;\n\t\t\t}\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id.\" AND fk_id=\".$nid.\" AND entity = \".$entity;\n\t\t\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (entity, fk_user, fk_id) VALUES (\".$entity.\", \".$this->id.\", \".$nid.\")\";\n\t\t\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (!$error && !$notrigger) {\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsAdd\").($rid ? ' (id='.$rid.')' : ''));\n\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t} else {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Remove a right to the user\n\t *\n\t *  @param\tint\t\t$rid        Id du droit a retirer\n\t *  @param  string\t$allmodule  Retirer tous les droits du module allmodule\n\t *  @param  string\t$allperms   Retirer tous les droits du module allmodule, perms allperms\n\t *  @param\tint\t\t$entity\t\tEntity to use\n\t *  @param  int\t    $notrigger\t1=Does not execute triggers, 0=Execute triggers\n\t *  @return int         \t\t> 0 if OK, < 0 if OK\n\t *  @see\tclearrights(), addrights(), getrights()\n\t */\n\tpublic function delrights($rid, $allmodule = '', $allperms = '', $entity = 0, $notrigger = 0)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$error = 0;\n\t\t$wherefordel = '';\n\t\t$entity = (!empty($entity) ? $entity : $conf->entity);\n\n\t\t$this->db->begin();\n\n\t\tif (!empty($rid)) {\n\t\t\t$module = $perms = $subperms = '';\n\n\t\t\t// Si on a demande supression d'un droit en particulier, on recupere\n\t\t\t// les caracteristiques module, perms et subperms de ce droit.\n\t\t\t$sql = \"SELECT module, perms, subperms\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE id = '\".$this->db->escape($rid).\"'\";\n\t\t\t$sql .= \" AND entity = \".$entity;\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\t$wherefordel = \"id=\".((int) $rid);\n\t\t\t// Suppression des droits induits\n\t\t\tif ($subperms == 'lire' || $subperms == 'read') {\n\t\t\t\t$wherefordel .= \" OR (module='\".$this->db->escape($module).\"' AND perms='\".$this->db->escape($perms).\"' AND subperms IS NOT NULL)\";\n\t\t\t}\n\t\t\tif ($perms == 'lire' || $perms == 'read') {\n\t\t\t\t$wherefordel .= \" OR (module='\".$this->db->escape($module).\"')\";\n\t\t\t}\n\t\t} else {\n\t\t\t// On a demande suppression d'un droit sur la base d'un nom de module ou perms\n\t\t\t// Where pour la liste des droits a supprimer\n\t\t\tif (!empty($allmodule)) {\n\t\t\t\tif ($allmodule == 'allmodules') {\n\t\t\t\t\t$wherefordel = 'allmodules';\n\t\t\t\t} else {\n\t\t\t\t\t$wherefordel = \"module='\".$this->db->escape($allmodule).\"'\";\n\t\t\t\t\tif (!empty($allperms)) {\n\t\t\t\t\t\t$wherefordel .= \" AND perms='\".$this->db->escape($allperms).\"'\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Suppression des droits selon critere defini dans wherefordel\n\t\tif (!empty($wherefordel)) {\n\t\t\t//print \"$module-$perms-$subperms\";\n\t\t\t$sql = \"SELECT id\";\n\t\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t\t$sql .= \" WHERE entity = \".$entity;\n\t\t\tif (!empty($wherefordel) && $wherefordel != 'allmodules') {\n\t\t\t\t$sql .= \" AND \".$wherefordel;\n\t\t\t}\n\n\t\t\t// avoid admin can remove his own important rights\n\t\t\tif ($this->admin == 1) {\n\t\t\t\t$sql .= \" AND id NOT IN (251, 252, 253, 254, 255, 256)\"; // other users rights\n\t\t\t\t$sql .= \" AND id NOT IN (341, 342, 343, 344)\"; // own rights\n\t\t\t\t$sql .= \" AND id NOT IN (351, 352, 353, 354)\"; // groups rights\n\t\t\t\t$sql .= \" AND id NOT IN (358)\"; // user export\n\t\t\t}\n\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\t$num = $this->db->num_rows($result);\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($i < $num) {\n\t\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t\t$nid = $obj->id;\n\n\t\t\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights\";\n\t\t\t\t\t$sql .= \" WHERE fk_user = \".$this->id.\" AND fk_id = \".((int) $nid);\n\t\t\t\t\t$sql .= \" AND entity = \".$entity;\n\t\t\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$error++;\n\t\t\t\tdol_print_error($this->db);\n\t\t\t}\n\t\t}\n\n\t\tif (!$error && !$notrigger) {\n\t\t\t$langs->load(\"other\");\n\t\t\t$this->context = array('audit'=>$langs->trans(\"PermissionsDelete\").($rid ? ' (id='.$rid.')' : ''));\n\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t} else {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Clear all permissions array of user\n\t *\n\t *  @return\tvoid\n\t *  @see\tgetrights()\n\t */\n\tpublic function clearrights()\n\t{\n\t\tdol_syslog(get_class($this).\"::clearrights reset user->rights\");\n\t\t$this->rights = null;\n\t\t$this->nb_rights = 0;\n\t\t$this->all_permissions_are_loaded = 0;\n\t\t$this->_tab_loaded = array();\n\t}\n\n\n\t/**\n\t *\tLoad permissions granted to user into object user\n\t *\n\t *\t@param  string\t$moduletag\t\tLimit permission for a particular module ('' by default means load all permissions)\n\t *  @param\tint\t\t$forcereload\tForce reload of permissions even if they were already loaded (ignore cache)\n\t *\t@return\tvoid\n\t *  @see\tclearrights(), delrights(), addrights()\n\t */\n\tpublic function getrights($moduletag = '', $forcereload = 0)\n\t{\n\t\tglobal $conf;\n\n\t\tif (empty($forcereload)) {\n\t\t\tif ($moduletag && isset($this->_tab_loaded[$moduletag]) && $this->_tab_loaded[$moduletag]) {\n\t\t\t\t// Rights for this module are already loaded, so we leave\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!empty($this->all_permissions_are_loaded)) {\n\t\t\t\t// We already loaded all rights for this user, so we leave\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Get permission of users + Get permissions of groups\n\n\t\t// First user permissions\n\t\t$sql = \"SELECT DISTINCT r.module, r.perms, r.subperms\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user_rights as ur\";\n\t\t$sql .= \", \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql .= \" WHERE r.id = ur.fk_id\";\n\t\tif (!empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY)) {\n\t\t\t$sql .= \" AND r.entity IN (0,\".(!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE) ? \"1,\" : \"\").$conf->entity.\")\";\n\t\t} else {\n\t\t\t$sql .= \" AND ur.entity = \".((int) $conf->entity);\n\t\t}\n\t\t$sql .= \" AND ur.fk_user= \".((int) $this->id);\n\t\t$sql .= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) {\n\t\t\t$sql .= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\n\t\t\t\t\tif (!empty($perms)) {\n\t\t\t\t\t\tif (!isset($this->rights) || !is_object($this->rights)) {\n\t\t\t\t\t\t\t$this->rights = new stdClass(); // For avoid error\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($module)) {\n\t\t\t\t\t\t\tif (!isset($this->rights->$module) || !is_object($this->rights->$module)) {\n\t\t\t\t\t\t\t\t$this->rights->$module = new stdClass();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!empty($subperms)) {\n\t\t\t\t\t\t\t\tif (!isset($this->rights->$module->$perms) || !is_object($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms->$subperms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->rights->$module->$perms = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// Now permissions of groups\n\t\t$sql = \"SELECT DISTINCT r.module, r.perms, r.subperms\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"usergroup_rights as gr,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"usergroup_user as gu,\";\n\t\t$sql .= \" \".MAIN_DB_PREFIX.\"rights_def as r\";\n\t\t$sql .= \" WHERE r.id = gr.fk_id\";\n\t\tif (!empty($conf->global->MULTICOMPANY_BACKWARD_COMPATIBILITY)) {\n\t\t\tif (!empty($conf->multicompany->enabled) && !empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\t$sql .= \" AND gu.entity IN (0,\".$conf->entity.\")\";\n\t\t\t} else {\n\t\t\t\t$sql .= \" AND r.entity = \".$conf->entity;\n\t\t\t}\n\t\t} else {\n\t\t\t$sql .= \" AND gr.entity = \".$conf->entity;\n\t\t\t$sql .= \" AND gu.entity = \".$conf->entity;\n\t\t\t$sql .= \" AND r.entity = \".$conf->entity;\n\t\t}\n\t\t$sql .= \" AND gr.fk_usergroup = gu.fk_usergroup\";\n\t\t$sql .= \" AND gu.fk_user = \".$this->id;\n\t\t$sql .= \" AND r.perms IS NOT NULL\";\n\t\tif ($moduletag) {\n\t\t\t$sql .= \" AND r.module = '\".$this->db->escape($moduletag).\"'\";\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($obj) {\n\t\t\t\t\t$module = $obj->module;\n\t\t\t\t\t$perms = $obj->perms;\n\t\t\t\t\t$subperms = $obj->subperms;\n\n\t\t\t\t\tif (!empty($perms)) {\n\t\t\t\t\t\tif (!isset($this->rights) || !is_object($this->rights)) {\n\t\t\t\t\t\t\t$this->rights = new stdClass(); // For avoid error\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($module)) {\n\t\t\t\t\t\t\tif (!isset($this->rights->$module) || !is_object($this->rights->$module)) {\n\t\t\t\t\t\t\t\t$this->rights->$module = new stdClass();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!empty($subperms)) {\n\t\t\t\t\t\t\t\tif (!isset($this->rights->$module->$perms) || !is_object($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->rights->$module->$perms = new stdClass();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms->$subperms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$this->rights->$module->$perms->$subperms = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (empty($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->nb_rights++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// if we have already define a subperm like this $this->rights->$module->level1->level2 with llx_user_rights, we don't want override level1 because the level2 can be not define on user group\n\t\t\t\t\t\t\t\tif (!isset($this->rights->$module->$perms) || !is_object($this->rights->$module->$perms)) {\n\t\t\t\t\t\t\t\t\t$this->rights->$module->$perms = 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\n\t\t// For backward compatibility\n\t\tif (isset($this->rights->propale) && !isset($this->rights->propal)) {\n\t\t\t$this->rights->propal = $this->rights->propale;\n\t\t}\n\t\tif (isset($this->rights->propal) && !isset($this->rights->propale)) {\n\t\t\t$this->rights->propale = $this->rights->propal;\n\t\t}\n\n\t\tif (!$moduletag) {\n\t\t\t// Si module etait non defini, alors on a tout charge, on peut donc considerer\n\t\t\t// que les droits sont en cache (car tous charges) pour cet instance de user\n\t\t\t$this->all_permissions_are_loaded = 1;\n\t\t} else {\n\t\t\t// If module defined, we flag it as loaded into cache\n\t\t\t$this->_tab_loaded[$moduletag] = 1;\n\t\t}\n\t}\n\n\t/**\n\t *  Change status of a user\n\t *\n\t *\t@param\tint\t\t$status\t\tStatus to set\n\t *  @return int     \t\t\t<0 if KO, 0 if nothing is done, >0 if OK\n\t */\n\tpublic function setstatus($status)\n\t{\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error = 0;\n\n\t\t// Check parameters\n\t\tif ($this->statut == $status) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t// Save in database\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" SET statut = \".((int) $status);\n\t\t$sql .= \" WHERE rowid = \".((int) $this->id);\n\t\t$result = $this->db->query($sql);\n\n\t\tdol_syslog(get_class($this).\"::setstatus\", LOG_DEBUG);\n\t\tif ($result) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_ENABLEDISABLE', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$this->db->rollback();\n\t\t\treturn -$error;\n\t\t} else {\n\t\t\t$this->status = $status;\n\t\t\t$this->statut = $status;\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Sets object to supplied categories.\n\t *\n\t * Deletes object from existing categories not supplied.\n\t * Adds it to non existing supplied categories.\n\t * Existing categories are left untouch.\n\t *\n\t * @param int[]|int $categories Category or categories IDs\n\t * @return void\n\t */\n\tpublic function setCategories($categories)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/categories/class/categorie.class.php';\n\t\treturn parent::setCategoriesCommon($categories, Categorie::TYPE_USER);\n\t}\n\n\t/**\n\t *  Delete the user\n\t *\n\t *\t@param\t\tUser\t$user\tUser than delete\n\t * \t@return\t\tint\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function delete(User $user)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$this->fetch($this->id);\n\n\t\tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\n\t\t// Remove rights\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = \".$this->id;\n\n\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// Remove group\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user WHERE fk_user  = \".$this->id;\n\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// Remove params\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_param WHERE fk_user  = \".$this->id;\n\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\t// If contact, remove link\n\t\tif ($this->contact_id > 0) {\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"socpeople SET fk_user_creat = null WHERE rowid = \".((int) $this->contact_id);\n\t\t\tif (!$error && !$this->db->query($sql)) {\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\t\t}\n\n\t\t// Remove extrafields\n\t\tif (!$error) {\n\t\t\t$result = $this->deleteExtraFields();\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t\tdol_syslog(get_class($this).\"::delete error -4 \".$this->error, LOG_ERR);\n\t\t\t}\n\t\t}\n\n\t\t// Remove user\n\t\tif (!$error) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user WHERE rowid = \".$this->id;\n\t\t\tdol_syslog(get_class($this).\"::delete\", LOG_DEBUG);\n\t\t\tif (!$this->db->query($sql)) {\n\t\t\t\t$error++;\n\t\t\t\t$this->error = $this->db->lasterror();\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('USER_DELETE', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a user into database\n\t *\n\t *  @param\tUser\t$user        \tObjet user doing creation\n\t *  @param  int\t\t$notrigger\t\t1=do not execute triggers, 0 otherwise\n\t *  @return int\t\t\t         \t<0 if KO, id of created user if OK\n\t */\n\tpublic function create($user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\t\tglobal $mysoc;\n\n\t\t// Clean parameters\n\t\t$this->setUpperOrLowerCase();\n\n\t\t$this->civility_code = trim($this->civility_code);\n\t\t$this->login = trim($this->login);\n\t\tif (!isset($this->entity)) {\n\t\t\t$this->entity = $conf->entity; // If not defined, we use default value\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::create login=\".$this->login.\", user=\".(is_object($user) ? $user->id : ''), LOG_DEBUG);\n\n\t\t// Check parameters\n\t\tif (!empty($conf->global->USER_MAIL_REQUIRED) && !isValidEMail($this->email)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\", $this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Login\"));\n\t\t\treturn -1;\n\t\t} elseif (preg_match('/[,@<>\"\\']/', $this->login)) {\n\t\t    $langs->load(\"errors\");\n\t\t    $this->error = $langs->trans(\"ErrorBadCharIntoLoginName\");\n\t\t    return -1;\n\t\t}\n\n\t\t$this->datec = dol_now();\n\n\t\t$error = 0;\n\t\t$this->db->begin();\n\n\t\t// Check if login already exists in same entity or into entity 0.\n\t\tif ($this->login) {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND login = '\".$this->db->escape($this->login).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorLoginAlreadyExists\", $this->login);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -6;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resqltochecklogin);\n\t\t\t}\n\t\t}\n\t\tif ($this->email !== '') {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND email = '\".$this->db->escape($this->email).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorEmailAlreadyExists\", $this->email);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -6;\n\t\t\t\t}\n\t\t\t\t$this->db->free($resqltochecklogin);\n\t\t\t}\n\t\t}\n\n\t\t// Insert into database\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user (datec, login, ldap_sid, entity)\";\n\t\t$sql .= \" VALUES('\".$this->db->idate($this->datec).\"','\".$this->db->escape($this->login).\"','\".$this->db->escape($this->ldap_sid).\"',\".$this->db->escape($this->entity).\")\";\n\t\t$result = $this->db->query($sql);\n\n\t\tdol_syslog(get_class($this).\"::create\", LOG_DEBUG);\n\t\tif ($result) {\n\t\t\t$this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"user\");\n\n\t\t\t// Set default rights\n\t\t\tif ($this->set_default_rights() < 0) {\n\t\t\t\t$this->error = 'ErrorFailedToSetDefaultRightOfUser';\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -5;\n\t\t\t}\n\n\t\t\tif (!empty($conf->global->MAIN_DEFAULT_WAREHOUSE_USER) && !empty($conf->global->STOCK_USERSTOCK_AUTOCREATE)) {\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/product/stock/class/entrepot.class.php';\n\t\t\t\t$langs->load(\"stocks\");\n\t\t\t\t$entrepot = new Entrepot($this->db);\n\t\t\t\t$entrepot->label = $langs->trans(\"PersonalStock\", $this->getFullName($langs));\n\t\t\t\t$entrepot->libelle = $entrepot->label; // For backward compatibility\n\t\t\t\t$entrepot->description = $langs->trans(\"ThisWarehouseIsPersonalStock\", $this->getFullName($langs));\n\t\t\t\t$entrepot->statut = 1;\n\t\t\t\t$entrepot->country_id = $mysoc->country_id;\n\t\t\t\t$warehouseid = $entrepot->create($user);\n\n\t\t\t\t$this->fk_warehouse = $warehouseid;\n\t\t\t}\n\n\t\t\t// Update minor fields\n\t\t\t$result = $this->update($user, 1, 1);\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -4;\n\t\t\t}\n\n\t\t\tif (!$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t} else {\n\t\t\t\t//$this->error=$interface->error;\n\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Create a user from a contact object. User will be internal but if contact is linked to a third party, user will be external\n\t *\n\t *  @param\tContact\t$contact    Object for source contact\n\t * \t@param  string\t$login      Login to force\n\t *  @param  string\t$password   Password to force\n\t *  @return int \t\t\t\t<0 if error, if OK returns id of created user\n\t */\n\tpublic function create_from_contact($contact, $login = '', $password = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $langs;\n\n\t\t$error = 0;\n\n\t\t// Define parameters\n\t\t$this->admin = 0;\n\t\t$this->civility_code = $contact->civility_code;\n\t\t$this->lastname = $contact->lastname;\n\t\t$this->firstname = $contact->firstname;\n\t\t$this->gender = $contact->gender;\n\t\t$this->email = $contact->email;\n\t\t$this->socialnetworks = $contact->socialnetworks;\n\t\t$this->office_phone = $contact->phone_pro;\n\t\t$this->office_fax = $contact->fax;\n\t\t$this->user_mobile = $contact->phone_mobile;\n\t\t$this->address = $contact->address;\n\t\t$this->zip = $contact->zip;\n\t\t$this->town = $contact->town;\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->state_id = $contact->state_id;\n\t\t$this->country_id = $contact->country_id;\n\t\t$this->employee = 0;\n\n\t\tif (empty($login)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\t\t\t$login = dol_buildlogin($contact->lastname, $contact->firstname);\n\t\t}\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Create user and set $this->id. Trigger is disabled because executed later.\n\t\t$result = $this->create($user, 1);\n\t\tif ($result > 0) {\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql .= \" SET fk_socpeople=\".((int) $contact->id);\n\t\t\t$sql .= \", civility='\".$this->db->escape($contact->civility_code).\"'\";\n\t\t\tif ($contact->socid > 0) {\n\t\t\t\t$sql .= \", fk_soc=\".((int) $contact->socid);\n\t\t\t}\n\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t$resql = $this->db->query($sql);\n\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact\", LOG_DEBUG);\n\t\t\tif ($resql) {\n\t\t\t\t$this->context['createfromcontact'] = 'createfromcontact';\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++; $this->db->rollback(); return -1;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $this->id;\n\t\t\t} else {\n\t\t\t\t$this->error = $this->db->error();\n\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\t// $this->error deja positionne\n\t\t\tdol_syslog(get_class($this).\"::create_from_contact - 0\");\n\n\t\t\t$this->db->rollback();\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Create a user into database from a member object.\n\t *  If $member->fk_soc is set, it will be an external user.\n\t *\n\t *  @param\tAdherent\t\t$member\t\tObject member source\n\t * \t@param\tstring\t\t\t$login\t\tLogin to force\n\t *  @return int\t\t\t\t\t\t\t<0 if KO, if OK, return id of created account\n\t */\n\tpublic function create_from_member($member, $login = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user, $langs;\n\n\t\t// Set properties on new user\n\t\t$this->admin = 0;\n\t\t$this->civility_code = $member->civility_id;\n\t\t$this->lastname     = $member->lastname;\n\t\t$this->firstname    = $member->firstname;\n\t\t$this->gender\t\t= $member->gender;\n\t\t$this->email        = $member->email;\n\t\t$this->fk_member    = $member->id;\n\t\t$this->address      = $member->address;\n\t\t$this->zip          = $member->zip;\n\t\t$this->town         = $member->town;\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->state_id     = $member->state_id;\n\t\t$this->country_id   = $member->country_id;\n\t\t$this->socialnetworks = $member->socialnetworks;\n\n\t\t$this->pass         = $member->pass;\n\t\t$this->pass_crypted = $member->pass_indatabase_crypted;\n\n\t\tif (empty($login)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\t\t\t$login = dol_buildlogin($member->lastname, $member->firstname);\n\t\t}\n\t\t$this->login = $login;\n\n\t\t$this->db->begin();\n\n\t\t// Create and set $this->id\n\t\t$result = $this->create($user);\n\t\tif ($result > 0) {\n\t\t\tif (!empty($this->pass)) {\t// If a clear password was received (this situation should not happen anymore now), we use it to save it into database\n\t\t\t\t$newpass = $this->setPassword($user, $this->pass);\n\t\t\t\tif (is_numeric($newpass) && $newpass < 0) {\n\t\t\t\t\t$result = -2;\n\t\t\t\t}\n\t\t\t} elseif (!empty($this->pass_crypted)) {\t// If a crypted password is already known, we save it directly into database because the previous create did not save it.\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t$sql .= \" SET pass_crypted = '\".$this->db->escape($this->pass_crypted).\"'\";\n\t\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif (!$resql) {\n\t\t\t\t\t$result = -1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($result > 0 && $member->fk_soc) {\t// If member is linked to a thirdparty\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t\t$sql .= \" SET fk_soc=\".((int) $member->fk_soc);\n\t\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t\tdol_syslog(get_class($this).\"::create_from_member\", LOG_DEBUG);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif ($resql) {\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->id;\n\t\t\t\t} else {\n\t\t\t\t\t$this->error = $this->db->lasterror();\n\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($result > 0) {\n\t\t\t$this->db->commit();\n\t\t\treturn $this->id;\n\t\t} else {\n\t\t\t// $this->error deja positionne\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Assign rights by default\n\t *\n\t *    @return     integer erreur <0, si ok renvoi le nbre de droits par defaut positionnes\n\t */\n\tpublic function set_default_rights()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$rd = array();\n\t\t$num = 0;\n\t\t$sql = \"SELECT id FROM \".MAIN_DB_PREFIX.\"rights_def\";\n\t\t$sql .= \" WHERE bydefault = 1\";\n\t\t$sql .= \" AND entity = \".$conf->entity;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num) {\n\t\t\t\t$row = $this->db->fetch_row($resql);\n\t\t\t\t$rd[$i] = $row[0];\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t}\n\t\t$i = 0;\n\t\twhile ($i < $num) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_rights WHERE fk_user = $this->id AND fk_id=$rd[$i]\";\n\t\t\t$result = $this->db->query($sql);\n\n\t\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_rights (fk_user, fk_id) VALUES ($this->id, $rd[$i])\";\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif (!$result) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\n\t\treturn $i;\n\t}\n\n\t/**\n\t *  \tUpdate a user into database (and also password if this->pass is defined)\n\t *\n\t *\t\t@param\tUser\t$user\t\t\t\tUser making update\n\t *    \t@param  int\t\t$notrigger\t\t\t1=do not execute triggers, 0 by default\n\t *\t\t@param\tint\t\t$nosyncmember\t\t0=Synchronize linked member (standard info), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosyncmemberpass\t0=Synchronize linked member (password), 1=Do not synchronize linked member\n\t *\t\t@param\tint\t\t$nosynccontact\t\t0=Synchronize linked contact, 1=Do not synchronize linked contact\n\t *    \t@return int \t\t        \t\t<0 if KO, >=0 if OK\n\t */\n\tpublic function update($user, $notrigger = 0, $nosyncmember = 0, $nosyncmemberpass = 0, $nosynccontact = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$nbrowsaffected = 0;\n\t\t$error = 0;\n\n\t\tdol_syslog(get_class($this).\"::update notrigger=\".$notrigger.\", nosyncmember=\".$nosyncmember.\", nosyncmemberpass=\".$nosyncmemberpass);\n\n\t\t// Clean parameters\n\t\t$this->civility_code = trim($this->civility_code);\n\t\t$this->lastname     = trim($this->lastname);\n\t\t$this->firstname    = trim($this->firstname);\n\t\t$this->employee    \t= $this->employee ? $this->employee : 0;\n\t\t$this->login        = trim($this->login);\n\t\t$this->gender       = trim($this->gender);\n\t\t$this->pass         = trim($this->pass);\n\t\t$this->api_key      = trim($this->api_key);\n\t\t$this->address = $this->address ? trim($this->address) : trim($this->address);\n\t\t$this->zip = $this->zip ? trim($this->zip) : trim($this->zip);\n\t\t$this->town = $this->town ? trim($this->town) : trim($this->town);\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->state_id = trim($this->state_id);\n\t\t$this->country_id = ($this->country_id > 0) ? $this->country_id : 0;\n\t\t$this->office_phone = trim($this->office_phone);\n\t\t$this->office_fax   = trim($this->office_fax);\n\t\t$this->user_mobile  = trim($this->user_mobile);\n\t\t$this->personal_mobile = trim($this->personal_mobile);\n\t\t$this->email        = trim($this->email);\n\t\t$this->personal_email = trim($this->personal_email);\n\n\t\t$this->job = trim($this->job);\n\t\t$this->signature    = trim($this->signature);\n\t\t$this->note_public  = trim($this->note_public);\n\t\t$this->note_private = trim($this->note_private);\n\t\t$this->openid       = trim(empty($this->openid) ? '' : $this->openid); // Avoid warning\n\t\t$this->admin        = $this->admin ? $this->admin : 0;\n\t\t$this->address = empty($this->address) ? '' : $this->address;\n\t\t$this->zip\t\t\t= empty($this->zip) ? '' : $this->zip;\n\t\t$this->town = empty($this->town) ? '' : $this->town;\n\t\t$this->setUpperOrLowerCase();\n\t\t$this->accountancy_code = trim($this->accountancy_code);\n\t\t$this->color = empty($this->color) ? '' : $this->color;\n\t\t$this->dateemployment = empty($this->dateemployment) ? '' : $this->dateemployment;\n\t\t$this->dateemploymentend = empty($this->dateemploymentend) ? '' : $this->dateemploymentend;\n\t\t$this->datestartvalidity = empty($this->datestartvalidity) ? '' : $this->datestartvalidity;\n\t\t$this->dateendvalidity = empty($this->dateendvalidity) ? '' : $this->dateendvalidity;\n\t\t$this->birth        = trim($this->birth);\n\t\t$this->fk_warehouse = (int) $this->fk_warehouse;\n\n\t\t// Check parameters\n\t\tif (!empty($conf->global->USER_MAIL_REQUIRED) && !isValidEMail($this->email)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorBadEMail\", $this->email);\n\t\t\treturn -1;\n\t\t}\n\t\tif (empty($this->login)) {\n\t\t\t$langs->load(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFieldRequired\", 'Login');\n\t\t\treturn -1;\n\t\t} elseif (preg_match('/[,@<>\"\\']/', $this->login)) {\n\t\t    $langs->load(\"errors\");\n\t\t    $this->error = $langs->trans(\"ErrorBadCharIntoLoginName\");\n\t\t    return -1;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t// Check if login already exists in same entity or into entity 0.\n\t\tif (!empty($this->oldcopy) && $this->oldcopy->login != $this->login) {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND login = '\".$this->db->escape($this->login).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorLoginAlreadyExists\", $this->login);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!empty($this->oldcopy) && $this->email !== '' && $this->oldcopy->email != $this->email) {\n\t\t\t$sqltochecklogin = \"SELECT COUNT(*) as nb FROM \".MAIN_DB_PREFIX.\"user WHERE entity IN (\".$this->db->sanitize((int) $this->entity).\", 0) AND email = '\".$this->db->escape($this->email).\"'\";\n\t\t\t$resqltochecklogin = $this->db->query($sqltochecklogin);\n\t\t\tif ($resqltochecklogin) {\n\t\t\t\t$objtochecklogin = $this->db->fetch_object($resqltochecklogin);\n\t\t\t\tif ($objtochecklogin && $objtochecklogin->nb > 0) {\n\t\t\t\t\t$langs->load(\"errors\");\n\t\t\t\t\t$this->error = $langs->trans(\"ErrorEmailAlreadyExists\", $this->email);\n\t\t\t\t\tdol_syslog(get_class($this).\"::create \".$this->error, LOG_DEBUG);\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update datas\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql .= \" civility = '\".$this->db->escape($this->civility_code).\"'\";\n\t\t$sql .= \", lastname = '\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql .= \", firstname = '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql .= \", employee = \".(int) $this->employee;\n\t\t$sql .= \", login = '\".$this->db->escape($this->login).\"'\";\n\t\t$sql .= \", api_key = \".($this->api_key ? \"'\".$this->db->escape($this->api_key).\"'\" : \"null\");\n\t\t$sql .= \", gender = \".($this->gender != -1 ? \"'\".$this->db->escape($this->gender).\"'\" : \"null\"); // 'man' or 'woman'\n\t\t$sql .= \", birth=\".(strval($this->birth) != '' ? \"'\".$this->db->idate($this->birth).\"'\" : 'null');\n\t\tif (!empty($user->admin)) {\n\t\t\t$sql .= \", admin = \".(int) $this->admin; // admin flag can be set/unset only by an admin user\n\t\t}\n\t\t$sql .= \", address = '\".$this->db->escape($this->address).\"'\";\n\t\t$sql .= \", zip = '\".$this->db->escape($this->zip).\"'\";\n\t\t$sql .= \", town = '\".$this->db->escape($this->town).\"'\";\n\t\t$sql .= \", fk_state = \".((!empty($this->state_id) && $this->state_id > 0) ? \"'\".$this->db->escape($this->state_id).\"'\" : \"null\");\n\t\t$sql .= \", fk_country = \".((!empty($this->country_id) && $this->country_id > 0) ? \"'\".$this->db->escape($this->country_id).\"'\" : \"null\");\n\t\t$sql .= \", office_phone = '\".$this->db->escape($this->office_phone).\"'\";\n\t\t$sql .= \", office_fax = '\".$this->db->escape($this->office_fax).\"'\";\n\t\t$sql .= \", user_mobile = '\".$this->db->escape($this->user_mobile).\"'\";\n\t\t$sql .= \", personal_mobile = '\".$this->db->escape($this->personal_mobile).\"'\";\n\t\t$sql .= \", email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql .= \", personal_email = '\".$this->db->escape($this->personal_email).\"'\";\n\t\t$sql .= \", socialnetworks = '\".$this->db->escape(json_encode($this->socialnetworks)).\"'\";\n\t\t$sql .= \", job = '\".$this->db->escape($this->job).\"'\";\n\t\t$sql .= \", signature = '\".$this->db->escape($this->signature).\"'\";\n\t\t$sql .= \", accountancy_code = '\".$this->db->escape($this->accountancy_code).\"'\";\n\t\t$sql .= \", color = '\".$this->db->escape($this->color).\"'\";\n\t\t$sql .= \", dateemployment=\".(strval($this->dateemployment) != '' ? \"'\".$this->db->idate($this->dateemployment).\"'\" : 'null');\n\t\t$sql .= \", dateemploymentend=\".(strval($this->dateemploymentend) != '' ? \"'\".$this->db->idate($this->dateemploymentend).\"'\" : 'null');\n\t\t$sql .= \", datestartvalidity=\".(strval($this->datestartvalidity) != '' ? \"'\".$this->db->idate($this->datestartvalidity).\"'\" : 'null');\n\t\t$sql .= \", dateendvalidity=\".(strval($this->dateendvalidity) != '' ? \"'\".$this->db->idate($this->dateendvalidity).\"'\" : 'null');\n\t\t$sql .= \", note = '\".$this->db->escape($this->note_private).\"'\";\n\t\t$sql .= \", note_public = '\".$this->db->escape($this->note_public).\"'\";\n\t\t$sql .= \", photo = \".($this->photo ? \"'\".$this->db->escape($this->photo).\"'\" : \"null\");\n\t\t$sql .= \", openid = \".($this->openid ? \"'\".$this->db->escape($this->openid).\"'\" : \"null\");\n\t\t$sql .= \", fk_user = \".($this->fk_user > 0 ? \"'\".$this->db->escape($this->fk_user).\"'\" : \"null\");\n\t\t$sql .= \", fk_user_expense_validator = \".($this->fk_user_expense_validator > 0 ? \"'\".$this->db->escape($this->fk_user_expense_validator).\"'\" : \"null\");\n\t\t$sql .= \", fk_user_holiday_validator = \".($this->fk_user_holiday_validator > 0 ? \"'\".$this->db->escape($this->fk_user_holiday_validator).\"'\" : \"null\");\n\t\tif (isset($this->thm) || $this->thm != '') {\n\t\t\t$sql .= \", thm= \".($this->thm != '' ? \"'\".$this->db->escape($this->thm).\"'\" : \"null\");\n\t\t}\n\t\tif (isset($this->tjm) || $this->tjm != '') {\n\t\t\t$sql .= \", tjm= \".($this->tjm != '' ? \"'\".$this->db->escape($this->tjm).\"'\" : \"null\");\n\t\t}\n\t\tif (isset($this->salary) || $this->salary != '') {\n\t\t\t$sql .= \", salary= \".($this->salary != '' ? \"'\".$this->db->escape($this->salary).\"'\" : \"null\");\n\t\t}\n\t\tif (isset($this->salaryextra) || $this->salaryextra != '') {\n\t\t\t$sql .= \", salaryextra= \".($this->salaryextra != '' ? \"'\".$this->db->escape($this->salaryextra).\"'\" : \"null\");\n\t\t}\n\t\t$sql .= \", weeklyhours= \".($this->weeklyhours != '' ? \"'\".$this->db->escape($this->weeklyhours).\"'\" : \"null\");\n\t\t$sql .= \", entity = \".((int) $this->entity);\n\t\t$sql .= \", default_range = \".($this->default_range > 0 ? $this->default_range : 'null');\n\t\t$sql .= \", default_c_exp_tax_cat = \".($this->default_c_exp_tax_cat > 0 ? $this->default_c_exp_tax_cat : 'null');\n\t\t$sql .= \", fk_warehouse = \".($this->fk_warehouse > 0 ? $this->fk_warehouse : \"null\");\n\t\t$sql .= \", lang = \".($this->lang ? \"'\".$this->db->escape($this->lang).\"'\" : \"null\");\n\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$nbrowsaffected += $this->db->affected_rows($resql);\n\n\t\t\t// Update password\n\t\t\tif (!empty($this->pass)) {\n\t\t\t\tif ($this->pass != $this->pass_indatabase && $this->pass != $this->pass_indatabase_crypted) {\n\t\t\t\t\t// Si mot de passe saisi et different de celui en base\n\t\t\t\t\t$result = $this->setPassword($user, $this->pass, 0, $notrigger, $nosyncmemberpass);\n\t\t\t\t\tif (!$nbrowsaffected) {\n\t\t\t\t\t\t$nbrowsaffected++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If user is linked to a member, remove old link to this member\n\t\t\tif ($this->fk_member > 0) {\n\t\t\t\tdol_syslog(get_class($this).\"::update remove link with member. We will recreate it later\", LOG_DEBUG);\n\t\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member = NULL where fk_member = \".((int) $this->fk_member);\n\t\t\t\t$resql = $this->db->query($sql);\n\t\t\t\tif (!$resql) {\n\t\t\t\t\t$this->error = $this->db->error(); $this->db->rollback(); return -5;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Set link to user\n\t\t\tdol_syslog(get_class($this).\"::update set link with member\", LOG_DEBUG);\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET fk_member =\".($this->fk_member > 0 ? ((int) $this->fk_member) : 'null').\" where rowid = \".((int) $this->id);\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (!$resql) {\n\t\t\t\t$this->error = $this->db->error(); $this->db->rollback(); return -5;\n\t\t\t}\n\n\t\t\tif ($nbrowsaffected) {\t// If something has changed in data\n\t\t\t\tif ($this->fk_member > 0 && !$nosyncmember) {\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a member. We try to update member too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t// This user is linked with a member, so we also update member information\n\t\t\t\t\t// if this is an update.\n\t\t\t\t\t$adh = new Adherent($this->db);\n\t\t\t\t\t$result = $adh->fetch($this->fk_member);\n\n\t\t\t\t\tif ($result > 0) {\n\t\t\t\t\t\t$adh->civility_code = $this->civility_code;\n\t\t\t\t\t\t$adh->firstname = $this->firstname;\n\t\t\t\t\t\t$adh->lastname = $this->lastname;\n\t\t\t\t\t\t$adh->login = $this->login;\n\t\t\t\t\t\t$adh->gender = $this->gender;\n\t\t\t\t\t\t$adh->birth = $this->birth;\n\n\t\t\t\t\t\t$adh->pass = $this->pass;\n\n\t\t\t\t\t\t//$adh->societe = (empty($adh->societe) && $this->societe_id ? $this->societe_id : $adh->societe);\n\n\t\t\t\t\t\t$adh->address = $this->address;\n\t\t\t\t\t\t$adh->town = $this->town;\n\t\t\t\t\t\t$adh->zip = $this->zip;\n\t\t\t\t\t\t$adh->state_id = $this->state_id;\n\t\t\t\t\t\t$adh->country_id = $this->country_id;\n\n\t\t\t\t\t\t$adh->email = $this->email;\n\n\t\t\t\t\t\t$adh->socialnetworks = $this->socialnetworks;\n\n\t\t\t\t\t\t$adh->phone = $this->office_phone;\n\t\t\t\t\t\t$adh->phone_mobile = $this->user_mobile;\n\n\t\t\t\t\t\t$adh->user_id = $this->id;\n\t\t\t\t\t\t$adh->user_login = $this->login;\n\n\t\t\t\t\t\t$result = $adh->update($user, 0, 1, 0);\n\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t\t$this->errors = $adh->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} elseif ($result < 0) {\n\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t$this->errors = $adh->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($this->contact_id > 0 && !$nosynccontact) {\n\t\t\t\t\tdol_syslog(get_class($this).\"::update user is linked with a contact. We try to update contact too.\", LOG_DEBUG);\n\n\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/contact/class/contact.class.php';\n\n\t\t\t\t\t// This user is linked with a contact, so we also update contact information if this is an update.\n\t\t\t\t\t$tmpobj = new Contact($this->db);\n\t\t\t\t\t$result = $tmpobj->fetch($this->contact_id);\n\n\t\t\t\t\tif ($result >= 0) {\n\t\t\t\t\t\t$tmpobj->civility_code = $this->civility_code;\n\t\t\t\t\t\t$tmpobj->firstname = $this->firstname;\n\t\t\t\t\t\t$tmpobj->lastname = $this->lastname;\n\t\t\t\t\t\t$tmpobj->login = $this->login;\n\t\t\t\t\t\t$tmpobj->gender = $this->gender;\n\t\t\t\t\t\t$tmpobj->birth = $this->birth;\n\n\t\t\t\t\t\t//$tmpobj->pass=$this->pass;\n\n\t\t\t\t\t\t//$tmpobj->societe=(empty($tmpobj->societe) && $this->societe_id ? $this->societe_id : $tmpobj->societe);\n\n\t\t\t\t\t\t$tmpobj->email = $this->email;\n\n\t\t\t\t\t\t$tmpobj->socialnetworks = $this->socialnetworks;\n\n\t\t\t\t\t\t$tmpobj->phone_pro = $this->office_phone;\n\t\t\t\t\t\t$tmpobj->phone_mobile = $this->user_mobile;\n\t\t\t\t\t\t$tmpobj->fax = $this->office_fax;\n\n\t\t\t\t\t\t$tmpobj->address = $this->address;\n\t\t\t\t\t\t$tmpobj->town = $this->town;\n\t\t\t\t\t\t$tmpobj->zip = $this->zip;\n\t\t\t\t\t\t$tmpobj->state_id = $this->state_id;\n\t\t\t\t\t\t$tmpobj->country_id = $this->country_id;\n\n\t\t\t\t\t\t$tmpobj->user_id = $this->id;\n\t\t\t\t\t\t$tmpobj->user_login = $this->login;\n\n\t\t\t\t\t\t$result = $tmpobj->update($tmpobj->id, $user, 0, 'update', 1);\n\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t$this->error = $tmpobj->error;\n\t\t\t\t\t\t\t$this->errors = $tmpobj->errors;\n\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::update error after calling adh->update to sync it with user: \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->error = $tmpobj->error;\n\t\t\t\t\t\t$this->errors = $tmpobj->errors;\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$action = 'update';\n\n\t\t\t// Actions on extra fields\n\t\t\tif (!$error) {\n\t\t\t\t$result = $this->insertExtraFields();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn $nbrowsaffected;\n\t\t\t} else {\n\t\t\t\tdol_syslog(get_class($this).\"::update error=\".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -2;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Mise a jour en base de la date de derniere connexion d'un utilisateur\n\t *  Fonction appelee lors d'une nouvelle connexion\n\t *\n\t *  @return int     <0 si echec, >=0 si ok\n\t */\n\tpublic function update_last_login_date()\n\t{\n\t\t// phpcs:enable\n\t\t$now = dol_now();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user SET\";\n\t\t$sql .= \" datepreviouslogin = datelastlogin,\";\n\t\t$sql .= \" datelastlogin = '\".$this->db->idate($now).\"',\";\n\t\t$sql .= \" tms = tms\"; // La date de derniere modif doit changer sauf pour la mise a jour de date de derniere connexion\n\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::update_last_login_date user->id=\".$this->id.\" \".$sql, LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$this->datepreviouslogin = $this->datelastlogin;\n\t\t\t$this->datelastlogin = $now;\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror().' sql='.$sql;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Change password of a user\n\t *\n\t *  @param\tUser\t$user             \t\tObject user of user requesting the change (not the user for who we change the password). May be unknown.\n\t *  @param  string\t$password         \t\tNew password, in clear text or already encrypted (to generate if not provided)\n\t *\t@param\tint\t\t$changelater\t\t\t0=Default, 1=Save password into pass_temp to change password only after clicking on confirm email\n\t *\t@param\tint\t\t$notrigger\t\t\t\t1=Does not launch triggers\n\t *\t@param\tint\t\t$nosyncmember\t        Do not synchronize linked member\n\t *  @param\tint\t\t$passwordalreadycrypted 0=Value is cleartext password, 1=Value is crypted value.\n\t *  @return string \t\t\t          \t\tIf OK return clear password, 0 if no change, < 0 if error\n\t */\n\tpublic function setPassword($user, $password = '', $changelater = 0, $notrigger = 0, $nosyncmember = 0, $passwordalreadycrypted = 0)\n\t{\n\t\tglobal $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\n\t\t$error = 0;\n\n\t\tdol_syslog(get_class($this).\"::setPassword user=\".$user->id.\" password=\".preg_replace('/./i', '*', $password).\" changelater=\".$changelater.\" notrigger=\".$notrigger.\" nosyncmember=\".$nosyncmember, LOG_DEBUG);\n\n\t\t// If new password not provided, we generate one\n\t\tif (!$password) {\n\t\t\t$password = getRandomPassword(false);\n\t\t}\n\n\t\t// Crypt password\n\t\tif (empty($passwordalreadycrypted)) {\n\t\t\t$password_crypted = dol_hash($password);\n\t\t}\n\n\t\t// Update password\n\t\tif (!$changelater) {\n\t\t\tif (!is_object($this->oldcopy)) {\n\t\t\t\t$this->oldcopy = clone $this;\n\t\t\t}\n\n\t\t\t$this->db->begin();\n\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql .= \" SET pass_crypted = '\".$this->db->escape($password_crypted).\"',\";\n\t\t\t$sql .= \" pass_temp = null\";\n\t\t\tif (!empty($conf->global->DATABASE_PWD_ENCRYPTED)) {\n\t\t\t\t$sql .= \", pass = null\";\n\t\t\t} else {\n\t\t\t\t$sql .= \", pass = '\".$this->db->escape($password).\"'\";\n\t\t\t}\n\t\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG);\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\tif ($this->db->affected_rows($result)) {\n\t\t\t\t\t$this->pass = $password;\n\t\t\t\t\t$this->pass_indatabase = $password;\n\t\t\t\t\t$this->pass_indatabase_crypted = $password_crypted;\n\n\t\t\t\t\tif ($this->fk_member && !$nosyncmember) {\n\t\t\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/adherents/class/adherent.class.php';\n\n\t\t\t\t\t\t// This user is linked with a member, so we also update members informations\n\t\t\t\t\t\t// if this is an update.\n\t\t\t\t\t\t$adh = new Adherent($this->db);\n\t\t\t\t\t\t$result = $adh->fetch($this->fk_member);\n\n\t\t\t\t\t\tif ($result >= 0) {\n\t\t\t\t\t\t\t$result = $adh->setPassword($user, $this->pass, (empty($conf->global->DATABASE_PWD_ENCRYPTED) ? 0 : 1), 1); // Cryptage non gere dans module adherent\n\t\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword \".$this->error, LOG_ERR);\n\t\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->error = $adh->error;\n\t\t\t\t\t\t\t$error++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tdol_syslog(get_class($this).\"::setPassword notrigger=\".$notrigger.\" error=\".$error, LOG_DEBUG);\n\n\t\t\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t\t\t// Call trigger\n\t\t\t\t\t\t$result = $this->call_trigger('USER_NEW_PASSWORD', $user);\n\t\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t\t$error++; $this->db->rollback(); return -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// End call triggers\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->db->commit();\n\t\t\t\t\treturn $this->pass;\n\t\t\t\t} else {\n\t\t\t\t\t$this->db->rollback();\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\t// We store password in password temporary field.\n\t\t\t// After receiving confirmation link, we will erase and store it in pass_crypted\n\t\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"user\";\n\t\t\t$sql .= \" SET pass_temp = '\".$this->db->escape($password).\"'\";\n\t\t\t$sql .= \" WHERE rowid = \".$this->id;\n\n\t\t\tdol_syslog(get_class($this).\"::setPassword\", LOG_DEBUG); // No log\n\t\t\t$result = $this->db->query($sql);\n\t\t\tif ($result) {\n\t\t\t\treturn $password;\n\t\t\t} else {\n\t\t\t\tdol_print_error($this->db);\n\t\t\t\treturn -3;\n\t\t\t}\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Send new password by email\n\t *\n\t *  @param\tUser\t$user           Object user that send the email (not the user we send too)\n\t *  @param\tstring\t$password       New password\n\t *\t@param\tint\t\t$changelater\t0=Send clear passwod into email, 1=Change password only after clicking on confirm email. @todo Add method 2 = Send link to reset password\n\t *  @return int \t\t            < 0 si erreur, > 0 si ok\n\t */\n\tpublic function send_password($user, $password = '', $changelater = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs, $mysoc;\n\t\tglobal $dolibarr_main_url_root;\n\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/class/CMailFile.class.php';\n\n\t\t$msgishtml = 0;\n\n\t\t// Define $msg\n\t\t$mesg = '';\n\n\t\t$outputlangs = new Translate(\"\", $conf);\n\n\t\tif (isset($this->conf->MAIN_LANG_DEFAULT)\n\t\t\t&& $this->conf->MAIN_LANG_DEFAULT != 'auto') {\t// If user has defined its own language (rare because in most cases, auto is used)\n\t\t\t\t$outputlangs->getDefaultLang($this->conf->MAIN_LANG_DEFAULT);\n\t\t}\n\n\t\tif ($this->conf->MAIN_LANG_DEFAULT) {\n\t\t\t$outputlangs->setDefaultLang($this->conf->MAIN_LANG_DEFAULT);\n\t\t} else {\t// If user has not defined its own language, we used current language\n\t\t\t$outputlangs = $langs;\n\t\t}\n\n\t\t// Load translation files required by the page\n\t\t$outputlangs->loadLangs(array(\"main\", \"errors\", \"users\", \"other\"));\n\n\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\t}\n\n\t\t$subject = '['.$mysoc->name.'] '.$outputlangs->transnoentitiesnoconv(\"SubjectNewPassword\", $appli);\n\n\t\t// Define $urlwithroot\n\t\t$urlwithouturlroot = preg_replace('/'.preg_quote(DOL_URL_ROOT, '/').'$/i', '', trim($dolibarr_main_url_root));\n\t\t$urlwithroot = $urlwithouturlroot.DOL_URL_ROOT; // This is to use external domain name found into config file\n\n\t\tif (!$changelater) {\n\t\t\t$url = $urlwithroot.'/';\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\".\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"NewKeyIs\").\" :\\n\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"Login\").\" = \".$this->login.\"\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"Password\").\" = \".$password.\"\\n\\n\";\n\t\t\t$mesg .= \"\\n\";\n\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"ClickHereToGoTo\", $appli).': '.$url.\"\\n\\n\";\n\t\t\t$mesg .= \"--\\n\";\n\t\t\t$mesg .= $user->getFullName($outputlangs); // Username that send the email (not the user for who we want to reset password)\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is off, url=\".$url);\n\t\t} else {\n\t\t\tglobal $dolibarr_main_instance_unique_id;\n\n\t\t\t//print $password.'-'.$this->id.'-'.$dolibarr_main_instance_unique_id;\n\t\t\t$url = $urlwithroot.'/user/passwordforgotten.php?action=validatenewpassword';\n\t\t\t$url .= '&username='.urlencode($this->login).\"&passworduidhash=\".urlencode(dol_hash($password.'-'.$this->id.'-'.$dolibarr_main_instance_unique_id));\n\n\t\t\t$msgishtml = 1;\n\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"RequestToResetPasswordReceived\").\"<br>\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"NewKeyWillBe\").\" :<br>\\n<br>\\n\";\n\t\t\t$mesg .= '<strong>'.$outputlangs->transnoentitiesnoconv(\"Login\").\"</strong> = \".$this->login.\"<br>\\n\";\n\t\t\t$mesg .= '<strong>'.$outputlangs->transnoentitiesnoconv(\"Password\").\"</strong> = \".$password.\"<br>\\n<br>\\n\";\n\t\t\t$mesg .= \"<br>\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"YouMustClickToChange\").\" :<br>\\n\";\n\t\t\t$mesg .= '<a href=\"'.$url.'\" rel=\"noopener\">'.$outputlangs->transnoentitiesnoconv(\"ConfirmPasswordChange\").'</a>'.\"<br>\\n<br>\\n\";\n\t\t\t$mesg .= $outputlangs->transnoentitiesnoconv(\"ForgetIfNothing\").\"<br>\\n<br>\\n\";\n\n\t\t\tdol_syslog(get_class($this).\"::send_password changelater is on, url=\".$url);\n\t\t}\n\n\t\t$trackid = 'use'.$this->id;\n\n\t\t$mailfile = new CMailFile(\n\t\t\t$subject,\n\t\t\t$this->email,\n\t\t\t$conf->global->MAIN_MAIL_EMAIL_FROM,\n\t\t\t$mesg,\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\tarray(),\n\t\t\t'',\n\t\t\t'',\n\t\t\t0,\n\t\t\t$msgishtml,\n\t\t\t'',\n\t\t\t'',\n\t\t\t$trackid\n\t\t\t);\n\n\t\tif ($mailfile->sendfile()) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$langs->trans(\"errors\");\n\t\t\t$this->error = $langs->trans(\"ErrorFailedToSendPassword\").' '.$mailfile->error;\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * \t\tRenvoie la derniere erreur fonctionnelle de manipulation de l'objet\n\t *\n\t * \t\t@return    string      chaine erreur\n\t */\n\tpublic function error()\n\t{\n\t\treturn $this->error;\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Read clicktodial information for user\n\t *\n\t *  @return int <0 if KO, >0 if OK\n\t */\n\tpublic function fetch_clicktodial()\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"SELECT url, login, pass, poste \";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user_clicktodial as u\";\n\t\t$sql .= \" WHERE u.fk_user = \".$this->id;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->num_rows($resql)) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->clicktodial_url = $obj->url;\n\t\t\t\t$this->clicktodial_login = $obj->login;\n\t\t\t\t$this->clicktodial_password = $obj->pass;\n\t\t\t\t$this->clicktodial_poste = $obj->poste;\n\t\t\t}\n\n\t\t\t$this->clicktodial_loaded = 1; // Data loaded (found or not)\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Update clicktodial info\n\t *\n\t *  @return\tint  <0 if KO, >0 if OK\n\t */\n\tpublic function update_clicktodial()\n\t{\n\t\t// phpcs:enable\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"user_clicktodial\";\n\t\t$sql .= \" (fk_user,url,login,pass,poste)\";\n\t\t$sql .= \" VALUES (\".$this->id;\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_url).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_login).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_password).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->clicktodial_poste).\"')\";\n\n\t\tdol_syslog(get_class($this).'::update_clicktodial', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Add user into a group\n\t *\n\t *  @param\tint\t\t$group      Id of group\n\t *  @param  int\t\t$entity     Entity\n\t *  @param  int\t\t$notrigger  Disable triggers\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function SetInGroup($group, $entity, $notrigger = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql .= \" WHERE fk_user  = \".$this->id;\n\t\t$sql .= \" AND fk_usergroup = \".((int) $group);\n\t\t$sql .= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"usergroup_user (entity, fk_user, fk_usergroup)\";\n\t\t$sql .= \" VALUES (\".$entity.\",\".$this->id.\",\".$group.\")\";\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t$this->newgroupid = $group; // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserSetInGroup\"), 'newgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\tdol_syslog(get_class($this).\"::SetInGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Remove a user from a group\n\t *\n\t *  @param\tint   \t$group       Id of group\n\t *  @param  int\t\t$entity      Entity\n\t *  @param  int\t\t$notrigger   Disable triggers\n\t *  @return int  \t\t\t     <0 if KO, >0 if OK\n\t */\n\tpublic function RemoveFromGroup($group, $entity, $notrigger = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs, $user;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"usergroup_user\";\n\t\t$sql .= \" WHERE fk_user  = \".$this->id;\n\t\t$sql .= \" AND fk_usergroup = \".((int) $group);\n\t\t$sql .= \" AND entity = \".$entity;\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif (!$error && !$notrigger) {\n\t\t\t\t$this->oldgroupid = $group; // deprecated. Remove this.\n\t\t\t\t$this->context = array('audit'=>$langs->trans(\"UserRemovedFromGroup\"), 'oldgroupid'=>$group);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('USER_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\tdol_syslog(get_class($this).\"::RemoveFromGroup \".$this->error, LOG_ERR);\n\t\t\t\t$this->db->rollback();\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Return a link with photo\n\t * \tUse this->id,this->photo\n\t *\n\t *\t@param\tint\t\t$width\t\t\tWidth of image\n\t *\t@param\tint\t\t$height\t\t\tHeight of image\n\t *  @param\tstring\t$cssclass\t\tForce a css class\n\t * \t@param\tstring\t$imagesize\t\t'mini', 'small' or '' (original)\n\t *\t@return\tstring\t\t\t\t\tString with URL link\n\t */\n\tpublic function getPhotoUrl($width, $height, $cssclass = '', $imagesize = '')\n\t{\n\t\t$result = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$result .= Form::showphoto('userphoto', $this, $width, $height, 0, $cssclass, $imagesize);\n\t\t$result .= '</a>';\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return a link to the user card (with optionaly the picto)\n\t * \tUse this->id,this->lastname, this->firstname\n\t *\n\t *\t@param\tint\t\t$withpictoimg\t\t\t\tInclude picto in link (0=No picto, 1=Include picto into link, 2=Only picto, -1=Include photo into link, -2=Only picto photo, -3=Only photo very small)\n\t *\t@param\tstring\t$option\t\t\t\t\t\tOn what the link point to ('leave', 'accountancy', 'nolink', )\n\t *  @param  integer $infologin      \t\t\t0=Add default info tooltip, 1=Add complete info tooltip, -1=No info tooltip\n\t *  @param\tinteger\t$notooltip\t\t\t\t\t1=Disable tooltip on picto and name\n\t *  @param\tint\t\t$maxlen\t\t\t\t\t\tMax length of visible user name\n\t *  @param\tint\t\t$hidethirdpartylogo\t\t\tHide logo of thirdparty if user is external user\n\t *  @param  string  $mode               \t\t''=Show firstname and lastname, 'firstname'=Show only firstname, 'firstelselast'=Show firstname or lastname if not defined, 'login'=Show login\n\t *  @param  string  $morecss            \t\tAdd more css on link\n\t *  @param  int     $save_lastsearch_value    \t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\tstring\t\t\t\t\t\t\t\tString with URL\n\t */\n\tpublic function getNomUrl($withpictoimg = 0, $option = '', $infologin = 0, $notooltip = 0, $maxlen = 24, $hidethirdpartylogo = 0, $mode = '', $morecss = '', $save_lastsearch_value = -1)\n\t{\n\t\tglobal $langs, $conf, $db, $hookmanager, $user;\n\t\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\t\tglobal $menumanager;\n\n\t\tif (!$user->rights->user->user->lire && $user->id != $this->id) {\n\t\t\t$option = 'nolink';\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && $withpictoimg) {\n\t\t\t$withpictoimg = 0;\n\t\t}\n\n\t\t$result = ''; $label = '';\n\t\t$companylink = '';\n\n\t\tif (!empty($this->photo)) {\n\t\t\t$label .= '<div class=\"photointooltip\">';\n\t\t\t$label .= Form::showphoto('userphoto', $this, 0, 60, 0, 'photowithmargin photologintooltip', 'small', 0, 1); // Force height to 60 so we total height of tooltip can be calculated and collision can be managed\n\t\t\t$label .= '</div><div style=\"clear: both;\"></div>';\n\t\t}\n\n\t\t// Info Login\n\t\t$label .= '<div class=\"centpercent\">';\n\t\t$label .= img_picto('', $this->picto).' <u class=\"paddingrightonly\">'.$langs->trans(\"User\").'</u>';\n\t\t$label .= ' '.$this->getLibStatut(4);\n\t\t$label .= '<br><b>'.$langs->trans('Name').':</b> '.dol_string_nohtmltag($this->getFullName($langs, ''));\n\t\tif (!empty($this->login)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('Login').':</b> '.dol_string_nohtmltag($this->login);\n\t\t}\n\t\tif (!empty($this->job)) {\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Job\").':</b> '.dol_string_nohtmltag($this->job);\n\t\t}\n\t\t$label .= '<br><b>'.$langs->trans(\"Email\").':</b> '.dol_string_nohtmltag($this->email);\n\t\tif (!empty($this->office_phone) || !empty($this->office_fax) || !empty($this->fax)) {\n\t\t\t$phonelist = array();\n\t\t\tif ($this->office_phone) {\n\t\t\t\t$phonelist[] = dol_print_phone($this->office_phone, $this->country_code, $this->id, 0, '', '&nbsp', 'phone');\n\t\t\t}\n\t\t\tif ($this->office_fax) {\n\t\t\t\t$phonelist[] = dol_print_phone($this->office_fax, $this->country_code, $this->id, 0, '', '&nbsp', 'fax');\n\t\t\t}\n\t\t\tif ($this->user_mobile) {\n\t\t\t\t$phonelist[] = dol_print_phone($this->user_mobile, $this->country_code, $this->id, 0, '', '&nbsp', 'mobile');\n\t\t\t}\n\t\t\t$label .= '<br><b>'.$langs->trans('Phone').':</b> '.implode('&nbsp;', $phonelist);\n\t\t}\n\t\tif (!empty($this->admin)) {\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Administrator\").'</b>: '.yn($this->admin);\n\t\t}\n\t\tif (!empty($this->accountancy_code) || $option == 'accountancy') {\n\t\t\t$label .= '<br><b>'.$langs->trans(\"AccountancyCode\").'</b>: '.$this->accountancy_code;\n\t\t}\n\t\t$company = '';\n\t\tif (!empty($this->socid)) {\t// Add thirdparty for external users\n\t\t\t$thirdpartystatic = new Societe($db);\n\t\t\t$thirdpartystatic->fetch($this->socid);\n\t\t\tif (empty($hidethirdpartylogo)) {\n\t\t\t\t$companylink = ' '.$thirdpartystatic->getNomUrl(2, (($option == 'nolink') ? 'nolink' : '')); // picto only of company\n\t\t\t}\n\t\t\t$company = ' ('.$langs->trans(\"Company\").': '.dol_string_nohtmltag($thirdpartystatic->name).')';\n\t\t}\n\t\t$type = ($this->socid ? $langs->trans(\"External\").$company : $langs->trans(\"Internal\"));\n\t\t$label .= '<br><b>'.$langs->trans(\"Type\").':</b> '.dol_string_nohtmltag($type);\n\t\t$label .= '</div>';\n\t\tif ($infologin > 0) {\n\t\t\t$label .= '<br>';\n\t\t\t$label .= '<br><u>'.$langs->trans(\"Session\").'</u>';\n\t\t\t$label .= '<br><b>'.$langs->trans(\"IPAddress\").'</b>: '.dol_string_nohtmltag(getUserRemoteIP());\n\t\t\tif (!empty($conf->global->MAIN_MODULE_MULTICOMPANY)) {\n\t\t\t\t$label .= '<br><b>'.$langs->trans(\"ConnectedOnMultiCompany\").':</b> '.$conf->entity.' (User entity '.$this->entity.')';\n\t\t\t}\n\t\t\t$label .= '<br><b>'.$langs->trans(\"AuthenticationMode\").':</b> '.dol_string_nohtmltag($_SESSION[\"dol_authmode\"].(empty($dolibarr_main_demo) ? '' : ' (demo)'));\n\t\t\t$label .= '<br><b>'.$langs->trans(\"ConnectedSince\").':</b> '.dol_print_date($this->datelastlogin, \"dayhour\", 'tzuser');\n\t\t\t$label .= '<br><b>'.$langs->trans(\"PreviousConnexion\").':</b> '.dol_print_date($this->datepreviouslogin, \"dayhour\", 'tzuser');\n\t\t\t$label .= '<br><b>'.$langs->trans(\"CurrentTheme\").':</b> '.dol_string_nohtmltag($conf->theme);\n\t\t\t$label .= '<br><b>'.$langs->trans(\"CurrentMenuManager\").':</b> '.dol_string_nohtmltag($menumanager->name);\n\t\t\t$s = picto_from_langcode($langs->getDefaultLang());\n\t\t\t$label .= '<br><b>'.$langs->trans(\"CurrentUserLanguage\").':</b> '.dol_string_nohtmltag(($s ? $s.' ' : '').$langs->getDefaultLang());\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Browser\").':</b> '.dol_string_nohtmltag($conf->browser->name.($conf->browser->version ? ' '.$conf->browser->version : '').' ('.$_SERVER['HTTP_USER_AGENT'].')');\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Layout\").':</b> '.dol_string_nohtmltag($conf->browser->layout);\n\t\t\t$label .= '<br><b>'.$langs->trans(\"Screen\").':</b> '.dol_string_nohtmltag($_SESSION['dol_screenwidth'].' x '.$_SESSION['dol_screenheight']);\n\t\t\tif ($conf->browser->layout == 'phone') {\n\t\t\t\t$label .= '<br><b>'.$langs->trans(\"Phone\").':</b> '.$langs->trans(\"Yes\");\n\t\t\t}\n\t\t\tif (!empty($_SESSION[\"disablemodules\"])) {\n\t\t\t\t$label .= '<br><b>'.$langs->trans(\"DisabledModules\").':</b> <br>'.dol_string_nohtmltag(join(', ', explode(',', $_SESSION[\"disablemodules\"])));\n\t\t\t}\n\t\t}\n\t\tif ($infologin < 0) {\n\t\t\t$label = '';\n\t\t}\n\n\t\t$url = DOL_URL_ROOT.'/user/card.php?id='.$this->id;\n\t\tif ($option == 'leave') {\n\t\t\t$url = DOL_URL_ROOT.'/holiday/list.php?id='.$this->id;\n\t\t}\n\n\t\tif ($option != 'nolink') {\n\t\t\t// Add param to save lastsearch_values or not\n\t\t\t$add_save_lastsearch_values = ($save_lastsearch_value == 1 ? 1 : 0);\n\t\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/', $_SERVER[\"PHP_SELF\"])) {\n\t\t\t\t$add_save_lastsearch_values = 1;\n\t\t\t}\n\t\t\tif ($add_save_lastsearch_values) {\n\t\t\t\t$url .= '&save_lastsearch_values=1';\n\t\t\t}\n\t\t}\n\n\t\t$linkstart = '<a href=\"'.$url.'\"';\n\t\t$linkclose = \"\";\n\t\tif (empty($notooltip)) {\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$langs->load(\"users\");\n\t\t\t\t$label = $langs->trans(\"ShowUser\");\n\t\t\t\t$linkclose .= ' alt=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t}\n\t\t\t$linkclose .= ' title=\"'.dol_escape_htmltag($label, 1).'\"';\n\t\t\t$linkclose .= ' class=\"classfortooltip'.($morecss ? ' '.$morecss : '').'\"';\n\n\t\t\t/*\n\t\t\t $hookmanager->initHooks(array('userdao'));\n\t\t\t $parameters=array('id'=>$this->id);\n\t\t\t $reshook=$hookmanager->executeHooks('getnomurltooltip',$parameters,$this,$action);    // Note that $action and $object may have been modified by some hooks\n\t\t\t if ($reshook > 0) $linkclose = $hookmanager->resPrint;\n\t\t\t */\n\t\t}\n\n\t\t$linkstart .= $linkclose.'>';\n\t\t$linkend = '</a>';\n\n\t\t//if ($withpictoimg == -1) $result.='<div class=\"nowrap\">';\n\t\t$result .= (($option == 'nolink') ? '' : $linkstart);\n\t\tif ($withpictoimg) {\n\t\t\t$paddafterimage = '';\n\t\t\tif (abs($withpictoimg) == 1) {\n\t\t\t\t$paddafterimage = 'style=\"margin-'.($langs->trans(\"DIRECTION\") == 'rtl' ? 'left' : 'right').': 3px;\"';\n\t\t\t}\n\t\t\t// Only picto\n\t\t\tif ($withpictoimg > 0) {\n\t\t\t\t$picto = '<!-- picto user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\">'.img_object('', 'user', $paddafterimage.' '.($notooltip ? '' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1).'</span>';\n\t\t\t} else {\n\t\t\t\t// Picto must be a photo\n\t\t\t\t$picto = '<!-- picto photo user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\"'.($paddafterimage ? ' '.$paddafterimage : '').'>'.Form::showphoto('userphoto', $this, 0, 0, 0, 'userphoto'.($withpictoimg == -3 ? 'small' : ''), 'mini', 0, 1).'</span>';\n\t\t\t}\n\t\t\t$result .= $picto;\n\t\t}\n\t\tif ($withpictoimg > -2 && $withpictoimg != 2) {\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$result .= '<span class=\"nopadding usertext'.((!isset($this->statut) || $this->statut) ? '' : ' strikefordisabled').($morecss ? ' '.$morecss : '').'\">';\n\t\t\t}\n\t\t\tif ($mode == 'login') {\n\t\t\t\t$result .= dol_string_nohtmltag(dol_trunc($this->login, $maxlen));\n\t\t\t} else {\n\t\t\t\t$result .= dol_string_nohtmltag($this->getFullName($langs, '', ($mode == 'firstelselast' ? 3 : ($mode == 'firstname' ? 2 : -1)), $maxlen));\n\t\t\t}\n\t\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t\t$result .= '</span>';\n\t\t\t}\n\t\t}\n\t\t$result .= (($option == 'nolink') ? '' : $linkend);\n\t\t//if ($withpictoimg == -1) $result.='</div>';\n\n\t\t$result .= $companylink;\n\n\t\tglobal $action;\n\t\t$hookmanager->initHooks(array('userdao'));\n\t\t$parameters = array('id'=>$this->id, 'getnomurl'=>$result);\n\t\t$reshook = $hookmanager->executeHooks('getNomUrl', $parameters, $this, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) {\n\t\t\t$result = $hookmanager->resPrint;\n\t\t} else {\n\t\t\t$result .= $hookmanager->resPrint;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return clickable link of login (eventualy with picto)\n\t *\n\t *\t@param\tint\t\t$withpictoimg\t\tInclude picto into link\n\t *\t@param\tstring\t$option\t\t\t\tOn what the link point to ('leave', 'accountancy', 'nolink', )\n\t *  @param\tinteger\t$notooltip\t\t\t1=Disable tooltip on picto and name\n\t *  @param  string  $morecss       \t\tAdd more css on link\n\t *\t@return\tstring\t\t\t\t\t\tString with URL\n\t */\n\tpublic function getLoginUrl($withpictoimg = 0, $option = '', $notooltip = 0, $morecss = '')\n\t{\n\t\tglobal $langs, $user;\n\n\t\t$result = '';\n\n\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t$linkend = '</a>';\n\n\t\t//Check user's rights to see an other user\n\t\tif ((!$user->rights->user->user->lire && $this->id != $user->id)) {\n\t\t\t$option = 'nolink';\n\t\t}\n\n\t\tif ($option == 'xxx') {\n\t\t\t$linkstart = '<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$this->id.'\">';\n\t\t\t$linkend = '</a>';\n\t\t}\n\n\t\tif ($option == 'nolink') {\n\t\t\t$linkstart = '';\n\t\t\t$linkend = '';\n\t\t}\n\n\t\t$result .= $linkstart;\n\t\tif ($withpictoimg) {\n\t\t\t$paddafterimage = '';\n\t\t\tif (abs($withpictoimg) == 1) {\n\t\t\t\t$paddafterimage = 'style=\"margin-'.($langs->trans(\"DIRECTION\") == 'rtl' ? 'left' : 'right').': 3px;\"';\n\t\t\t}\n\t\t\t// Only picto\n\t\t\tif ($withpictoimg > 0) {\n\t\t\t\t$picto = '<!-- picto user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\">'.img_object('', 'user', $paddafterimage.' '.($notooltip ? '' : 'class=\"paddingright classfortooltip\"'), 0, 0, $notooltip ? 0 : 1).'</span>';\n\t\t\t} else {\n\t\t\t\t// Picto must be a photo\n\t\t\t\t$picto = '<!-- picto photo user --><span class=\"nopadding userimg'.($morecss ? ' '.$morecss : '').'\"'.($paddafterimage ? ' '.$paddafterimage : '').'>'.Form::showphoto('userphoto', $this, 0, 0, 0, 'userphoto'.($withpictoimg == -3 ? 'small' : ''), 'mini', 0, 1).'</span>';\n\t\t\t}\n\t\t\t$result .= $picto;\n\t\t}\n\t\t$result .= $this->login;\n\t\t$result .= $linkend;\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t *  Return the label of the status of user (active, inactive)\n\t *\n\t *  @param  int\t\t$mode          0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return\tstring \t\t\t       Label of status\n\t */\n\tpublic function getLibStatut($mode = 0)\n\t{\n\t\treturn $this->LibStatut($this->statut, $mode);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return the label of a status of user (active, inactive)\n\t *\n\t *  @param  int     $status         Id status\n\t *  @param  int\t\t$mode           0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return string                  Label of status\n\t */\n\tpublic function LibStatut($status, $mode = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $langs;\n\n\t\tif (empty($this->labelStatus) || empty($this->labelStatusShort)) {\n\t\t\tglobal $langs;\n\t\t\t//$langs->load(\"mymodule\");\n\t\t\t$this->labelStatus[self::STATUS_ENABLED] = $langs->trans('Enabled');\n\t\t\t$this->labelStatus[self::STATUS_DISABLED] = $langs->trans('Disabled');\n\t\t\t$this->labelStatusShort[self::STATUS_ENABLED] = $langs->trans('Enabled');\n\t\t\t$this->labelStatusShort[self::STATUS_DISABLED] = $langs->trans('Disabled');\n\t\t}\n\n\t\t$statusType = 'status5';\n\t\tif ($status == self::STATUS_ENABLED) {\n\t\t\t$statusType = 'status4';\n\t\t}\n\n\t\treturn dolGetStatus($this->labelStatus[$status], $this->labelStatusShort[$status], '', $statusType, $mode);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.PublicUnderscore\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tRetourne chaine DN complete dans l'annuaire LDAP pour l'objet\n\t *\n\t *\t@param\tarray\t$info\t\tInfo array loaded by _load_ldap_info\n\t *\t@param\tint\t\t$mode\t\t0=Return full DN (uid=qqq,ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t1=Return parent (ou=xxx,dc=aaa,dc=bbb)\n\t *\t\t\t\t\t\t\t\t2=Return key only (RDN) (uid=qqq)\n\t *\t@return\tstring\t\t\t\tDN\n\t */\n\tpublic function _load_ldap_dn($info, $mode = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\t\t$dn = '';\n\t\tif ($mode == 0) {\n\t\t\t$dn = $conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS].\",\".$conf->global->LDAP_USER_DN;\n\t\t} elseif ($mode == 1) {\n\t\t\t$dn = $conf->global->LDAP_USER_DN;\n\t\t} elseif ($mode == 2) {\n\t\t\t$dn = $conf->global->LDAP_KEY_USERS.\"=\".$info[$conf->global->LDAP_KEY_USERS];\n\t\t}\n\t\treturn $dn;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.PublicUnderscore\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tInitialize the info array (array of LDAP values) that will be used to call LDAP functions\n\t *\n\t *\t@return\t\tarray\t\tTableau info des attributs\n\t */\n\tpublic function _load_ldap_info()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $langs;\n\n\t\t$info = array();\n\n\t\t$socialnetworks = getArrayOfSocialNetworks();\n\n\t\t$keymodified = false;\n\n\t\t// Object classes\n\t\t$info[\"objectclass\"] = explode(',', $conf->global->LDAP_USER_OBJECT_CLASS);\n\n\t\t$this->fullname = $this->getFullName($langs);\n\n\t\t// Possible LDAP KEY (constname => varname)\n\t\t$ldapkey = array(\n\t\t\t'LDAP_FIELD_FULLNAME'\t=> 'fullname',\n\t\t\t'LDAP_FIELD_NAME'\t\t=> 'lastname',\n\t\t\t'LDAP_FIELD_FIRSTNAME'\t=> 'firstname',\n\t\t\t'LDAP_FIELD_LOGIN'\t\t=> 'login',\n\t\t\t'LDAP_FIELD_LOGIN_SAMBA'=> 'login',\n\t\t\t'LDAP_FIELD_PHONE'\t\t=> 'office_phone',\n\t\t\t'LDAP_FIELD_MOBILE'\t\t=> 'user_mobile',\n\t\t\t'LDAP_FIELD_FAX'\t\t=> 'office_fax',\n\t\t\t'LDAP_FIELD_MAIL'\t\t=> 'email',\n\t\t\t'LDAP_FIELD_SID'\t\t=> 'ldap_sid',\n\t\t);\n\n\t\t// Champs\n\t\tforeach ($ldapkey as $constname => $varname) {\n\t\t\tif (!empty($this->$varname) && !empty($conf->global->$constname)) {\n\t\t\t\t$info[$conf->global->$constname] = $this->$varname;\n\n\t\t\t\t// Check if it is the LDAP key and if its value has been changed\n\t\t\t\tif (!empty($conf->global->LDAP_KEY_USERS) && $conf->global->LDAP_KEY_USERS == $conf->global->$constname) {\n\t\t\t\t\tif (!empty($this->oldcopy) && $this->$varname != $this->oldcopy->$varname) {\n\t\t\t\t\t\t$keymodified = true; // For check if LDAP key has been modified\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\tif ($this->socialnetworks[$value['label']] && !empty($conf->global->{'LDAP_FIELD_'.strtoupper($value['label'])})) {\n\t\t\t\t$info[$conf->global->{'LDAP_FIELD_'.strtoupper($value['label'])}] = $this->socialnetworks[$value['label']];\n\t\t\t}\n\t\t}\n\t\tif ($this->address && !empty($conf->global->LDAP_FIELD_ADDRESS)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_ADDRESS] = $this->address;\n\t\t}\n\t\tif ($this->zip && !empty($conf->global->LDAP_FIELD_ZIP)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_ZIP] = $this->zip;\n\t\t}\n\t\tif ($this->town && !empty($conf->global->LDAP_FIELD_TOWN)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_TOWN] = $this->town;\n\t\t}\n\t\tif ($this->note_public && !empty($conf->global->LDAP_FIELD_DESCRIPTION)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_DESCRIPTION] = dol_string_nohtmltag($this->note_public, 2);\n\t\t}\n\t\tif ($this->socid > 0) {\n\t\t\t$soc = new Societe($this->db);\n\t\t\t$soc->fetch($this->socid);\n\n\t\t\t$info[$conf->global->LDAP_FIELD_COMPANY] = $soc->name;\n\t\t\tif ($soc->client == 1) {\n\t\t\t\t$info[\"businessCategory\"] = \"Customers\";\n\t\t\t}\n\t\t\tif ($soc->client == 2) {\n\t\t\t\t$info[\"businessCategory\"] = \"Prospects\";\n\t\t\t}\n\t\t\tif ($soc->fournisseur == 1) {\n\t\t\t\t$info[\"businessCategory\"] = \"Suppliers\";\n\t\t\t}\n\t\t}\n\n\t\t// When password is modified\n\t\tif (!empty($this->pass)) {\n\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD)) {\n\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass; // this->pass = mot de passe non crypte\n\t\t\t}\n\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED)) {\n\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass, 4); // Create OpenLDAP MD5 password (TODO add type of encryption)\n\t\t\t}\n\t\t} elseif ($conf->global->LDAP_SERVER_PROTOCOLVERSION !== '3') {\n\t\t\t// Set LDAP password if possible\n\t\t\t// If ldap key is modified and LDAPv3 we use ldap_rename function for avoid lose encrypt password\n\t\t\tif (!empty($conf->global->DATABASE_PWD_ENCRYPTED)) {\n\t\t\t\t// Just for the default MD5 !\n\t\t\t\tif (empty($conf->global->MAIN_SECURITY_HASH_ALGO)) {\n\t\t\t\t\tif ($this->pass_indatabase_crypted && !empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED)) {\n\t\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase_crypted, 5); // Create OpenLDAP MD5 password from Dolibarr MD5 password\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} elseif (!empty($this->pass_indatabase)) {\n\t\t\t\t// Use $this->pass_indatabase value if exists\n\t\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD)) {\n\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD] = $this->pass_indatabase; // $this->pass_indatabase = mot de passe non crypte\n\t\t\t\t}\n\t\t\t\tif (!empty($conf->global->LDAP_FIELD_PASSWORD_CRYPTED)) {\n\t\t\t\t\t$info[$conf->global->LDAP_FIELD_PASSWORD_CRYPTED] = dol_hash($this->pass_indatabase, 4); // md5 for OpenLdap TODO add type of encryption\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($conf->global->LDAP_SERVER_TYPE == 'egroupware') {\n\t\t\t$info[\"objectclass\"][4] = \"phpgwContact\"; // compatibilite egroupware\n\n\t\t\t$info['uidnumber'] = $this->id;\n\n\t\t\t$info['phpgwTz'] = 0;\n\t\t\t$info['phpgwMailType'] = 'INTERNET';\n\t\t\t$info['phpgwMailHomeType'] = 'INTERNET';\n\n\t\t\t$info[\"phpgwContactTypeId\"] = 'n';\n\t\t\t$info[\"phpgwContactCatId\"] = 0;\n\t\t\t$info[\"phpgwContactAccess\"] = \"public\";\n\n\t\t\tif (dol_strlen($this->egroupware_id) == 0) {\n\t\t\t\t$this->egroupware_id = 1;\n\t\t\t}\n\n\t\t\t$info[\"phpgwContactOwner\"] = $this->egroupware_id;\n\n\t\t\tif ($this->email) {\n\t\t\t\t$info[\"rfc822Mailbox\"] = $this->email;\n\t\t\t}\n\t\t\tif ($this->phone_mobile) {\n\t\t\t\t$info[\"phpgwCellTelephoneNumber\"] = $this->phone_mobile;\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($conf->global->LDAP_FIELD_USERID)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_USERID] = $this->id;\n\t\t}\n\t\tif (!empty($conf->global->LDAP_FIELD_GROUPID)) {\n\t\t\t$usergroup = new UserGroup($this->db);\n\t\t\t$groupslist = $usergroup->listGroupsForUser($this->id);\n\t\t\t$info[$conf->global->LDAP_FIELD_GROUPID] = '65534';\n\t\t\tif (!empty($groupslist)) {\n\t\t\t\tforeach ($groupslist as $groupforuser) {\n\t\t\t\t\t$info[$conf->global->LDAP_FIELD_GROUPID] = $groupforuser->id; //Select first group in list\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!empty($conf->global->LDAP_FIELD_HOMEDIRECTORY) && !empty($conf->global->LDAP_FIELD_HOMEDIRECTORYPREFIX)) {\n\t\t\t$info[$conf->global->LDAP_FIELD_HOMEDIRECTORY] = \"{$conf->global->LDAP_FIELD_HOMEDIRECTORYPREFIX}/$this->login\";\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *\tid must be 0 if object instance is a specimen.\n\t *\n\t *  @return\tint\n\t */\n\tpublic function initAsSpecimen()\n\t{\n\t\tglobal $user, $langs;\n\n\t\t$now = dol_now();\n\n\t\t// Initialise parametres\n\t\t$this->id = 0;\n\t\t$this->ref = 'SPECIMEN';\n\t\t$this->specimen = 1;\n\n\t\t$this->lastname = 'DOLIBARR';\n\t\t$this->firstname = 'SPECIMEN';\n\t\t$this->gender = 'man';\n\t\t$this->note_public = 'This is a note public';\n\t\t$this->note_private = 'This is a note private';\n\t\t$this->email = 'email@specimen.com';\n\t\t$this->personal_email = 'personalemail@specimen.com';\n\t\t$this->socialnetworks = array(\n\t\t\t'skype' => 'skypepseudo',\n\t\t\t'twitter' => 'twitterpseudo',\n\t\t\t'facebook' => 'facebookpseudo',\n\t\t\t'linkedin' => 'linkedinpseudo',\n\t\t);\n\t\t$this->office_phone = '0999999999';\n\t\t$this->office_fax = '0999999998';\n\t\t$this->user_mobile = '0999999997';\n\t\t$this->personal_mobile = '0999999996';\n\t\t$this->admin = 0;\n\t\t$this->login = 'dolibspec';\n\t\t$this->pass = 'dolibspec';\n\t\t//$this->pass_indatabase='dolibspec';\t\t\t\t\t\t\t\t\tSet after a fetch\n\t\t//$this->pass_indatabase_crypted='e80ca5a88c892b0aaaf7e154853bccab';\tSet after a fetch\n\t\t$this->datec = $now;\n\t\t$this->datem = $now;\n\n\t\t$this->datelastlogin = $now;\n\t\t$this->datepreviouslogin = $now;\n\t\t$this->statut = 1;\n\n\t\t$this->entity = 1;\n\t\treturn 1;\n\t}\n\n\t/**\n\t *  Load info of user object\n\t *\n\t *  @param  int\t\t$id     Id of user to load\n\t *  @return\tvoid\n\t */\n\tpublic function info($id)\n\t{\n\t\t$sql = \"SELECT u.rowid, u.login as ref, u.datec,\";\n\t\t$sql .= \" u.tms as date_modification, u.entity\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql .= \" WHERE u.rowid = \".((int) $id);\n\n\t\t$result = $this->db->query($sql);\n\t\tif ($result) {\n\t\t\tif ($this->db->num_rows($result)) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\n\t\t\t\t$this->id = $obj->rowid;\n\n\t\t\t\t$this->ref = (!$obj->ref) ? $obj->rowid : $obj->ref;\n\t\t\t\t$this->date_creation = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->date_modification);\n\t\t\t\t$this->entity = $obj->entity;\n\t\t\t}\n\n\t\t\t$this->db->free($result);\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\n\t/**\n\t *    Return number of mass Emailing received by this contacts with its email\n\t *\n\t *    @return       int     Number of EMailings\n\t */\n\tpublic function getNbOfEMailings()\n\t{\n\t\t$sql = \"SELECT count(mc.email) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"mailing_cibles as mc\";\n\t\t$sql .= \" WHERE mc.email = '\".$this->db->escape($this->email).\"'\";\n\t\t$sql .= \" AND mc.statut NOT IN (-1,0)\"; // -1 erreur, 0 non envoye, 1 envoye avec succes\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb = $obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t} else {\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Return number of existing users\n\t *\n\t *  @param\tstring\t$limitTo\tLimit to '' or 'active'\n\t *  @param\tstring\t$option\t\t'superadmin' = return for entity 0 only\n\t *  @param\tint\t\t$admin\t\tFilter on admin tag\n\t *  @return int  \t\t\t\tNumber of users\n\t */\n\tpublic function getNbOfUsers($limitTo, $option = '', $admin = -1)\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT count(rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\tif ($option == 'superadmin') {\n\t\t\t$sql .= \" WHERE entity = 0\";\n\t\t} else {\n\t\t\t$sql .= \" WHERE entity IN (\".getEntity('user', 0).\")\";\n\t\t\tif ($limitTo == 'active') {\n\t\t\t\t$sql .= \" AND statut = 1\";\n\t\t\t}\n\t\t}\n\t\tif ($admin >= 0) {\n\t\t\t$sql .= \" AND admin = \".(int) $admin;\n\t\t}\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$nb = (int) $obj->nb;\n\n\t\t\t$this->db->free($resql);\n\t\t\treturn $nb;\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Update user using data from the LDAP\n\t *\n\t *  @param\tObject\t$ldapuser\tLadp User\n\t *  @return int  \t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function update_ldap2dolibarr(&$ldapuser)\n\t{\n\t\t// phpcs:enable\n\t\t// TODO: Voir pourquoi le update met \u00e0 jour avec toutes les valeurs vide (global $user \u00e9crase ?)\n\t\tglobal $user, $conf;\n\n\t\t$socialnetworks = getArrayOfSocialNetworks();\n\n\t\t$this->firstname = $ldapuser->{$conf->global->LDAP_FIELD_FIRSTNAME};\n\t\t$this->lastname = $ldapuser->{$conf->global->LDAP_FIELD_NAME};\n\t\t$this->login = $ldapuser->{$conf->global->LDAP_FIELD_LOGIN};\n\t\t$this->pass = $ldapuser->{$conf->global->LDAP_FIELD_PASSWORD};\n\t\t$this->pass_indatabase_crypted = $ldapuser->{$conf->global->LDAP_FIELD_PASSWORD_CRYPTED};\n\n\t\t$this->office_phone = $ldapuser->{$conf->global->LDAP_FIELD_PHONE};\n\t\t$this->user_mobile = $ldapuser->{$conf->global->LDAP_FIELD_MOBILE};\n\t\t$this->office_fax = $ldapuser->{$conf->global->LDAP_FIELD_FAX};\n\t\t$this->email = $ldapuser->{$conf->global->LDAP_FIELD_MAIL};\n\t\tforeach ($socialnetworks as $key => $value) {\n\t\t\t$tmpkey = 'LDAP_FIELD_'.strtoupper($value['label']);\n\t\t\t$this->socialnetworks[$value['label']] = $ldapuser->{$conf->global->$tmpkey};\n\t\t}\n\t\t$this->ldap_sid = $ldapuser->{$conf->global->LDAP_FIELD_SID};\n\n\t\t$this->job = $ldapuser->{$conf->global->LDAP_FIELD_TITLE};\n\t\t$this->note_public = $ldapuser->{$conf->global->LDAP_FIELD_DESCRIPTION};\n\n\t\t$result = $this->update($user);\n\n\t\tdol_syslog(get_class($this).\"::update_ldap2dolibarr result=\".$result, LOG_DEBUG);\n\n\t\treturn $result;\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * Return and array with all instanciated first level children users of current user\n\t *\n\t * @return\tUser[]|int\n\t * @see getAllChildIds()\n\t */\n\tpublic function get_children()\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"SELECT rowid FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" WHERE fk_user = \".$this->id;\n\n\t\tdol_syslog(get_class($this).\"::get_children sql=\".$sql, LOG_DEBUG);\n\t\t$res = $this->db->query($sql);\n\t\tif ($res) {\n\t\t\t$users = array();\n\t\t\twhile ($rec = $this->db->fetch_array($res)) {\n\t\t\t\t$user = new User($this->db);\n\t\t\t\t$user->fetch($rec['rowid']);\n\t\t\t\t$users[] = $user;\n\t\t\t}\n\t\t\treturn $users;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t *  Load this->parentof that is array(id_son=>id_parent, ...)\n\t *\n\t *  @return     int     <0 if KO, >0 if OK\n\t */\n\tprivate function loadParentOf()\n\t{\n\t\tglobal $conf;\n\n\t\t$this->parentof = array();\n\n\t\t// Load array[child]=parent\n\t\t$sql = \"SELECT fk_user as id_parent, rowid as id_son\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" WHERE fk_user <> 0\";\n\t\t$sql .= \" AND entity IN (\".getEntity('user').\")\";\n\n\t\tdol_syslog(get_class($this).\"::loadParentOf\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->parentof[$obj->id_son] = $obj->id_parent;\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t * \tBuild the hierarchy/tree of users into an array.\n\t *\tSet and return this->users that is an array sorted according to tree with arrays of:\n\t *\t\t\t\tid = id user\n\t *\t\t\t\tlastname\n\t *\t\t\t\tfirstname\n\t *\t\t\t\tfullname = nom avec chemin complet du user\n\t *\t\t\t\tfullpath = chemin complet compose des id: \"_grandparentid_parentid_id\"\n\t *\n\t *  @param      int\t\t$deleteafterid      Removed all users including the leaf $deleteafterid (and all its child) in user tree.\n\t *  @param\t\tstring\t$filter\t\t\t\tSQL filter on users. This parameter must not come from user intput.\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of users $this->users. Note: $this->parentof is also set.\n\t */\n\tpublic function get_full_tree($deleteafterid = 0, $filter = '')\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf, $user;\n\t\tglobal $hookmanager;\n\n\t\t// Actions hooked (by external module)\n\t\t$hookmanager->initHooks(array('userdao'));\n\n\t\t$this->users = array();\n\n\t\t// Init this->parentof that is array(id_son=>id_parent, ...)\n\t\t$this->loadParentOf();\n\n\t\t// Init $this->users array\n\t\t$sql = \"SELECT DISTINCT u.rowid, u.firstname, u.lastname, u.fk_user, u.fk_soc, u.login, u.email, u.gender, u.admin, u.statut, u.photo, u.entity\"; // Distinct reduce pb with old tables with duplicates\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t// Add fields from hooks\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('printUserListWhere', $parameters); // Note that $action and $object may have been modified by hook\n\t\tif ($reshook > 0) {\n\t\t\t$sql .= $hookmanager->resPrint;\n\t\t} else {\n\t\t\t$sql .= \" WHERE u.entity IN (\".getEntity('user').\")\";\n\t\t}\n\t\tif ($filter) {\n\t\t\t$sql .= \" AND \".$filter;\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree get user list\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$i = 0;\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->users[$obj->rowid]['rowid'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['id'] = $obj->rowid;\n\t\t\t\t$this->users[$obj->rowid]['fk_user'] = $obj->fk_user;\n\t\t\t\t$this->users[$obj->rowid]['fk_soc'] = $obj->fk_soc;\n\t\t\t\t$this->users[$obj->rowid]['firstname'] = $obj->firstname;\n\t\t\t\t$this->users[$obj->rowid]['lastname'] = $obj->lastname;\n\t\t\t\t$this->users[$obj->rowid]['login'] = $obj->login;\n\t\t\t\t$this->users[$obj->rowid]['statut'] = $obj->statut;\n\t\t\t\t$this->users[$obj->rowid]['entity'] = $obj->entity;\n\t\t\t\t$this->users[$obj->rowid]['email'] = $obj->email;\n\t\t\t\t$this->users[$obj->rowid]['gender'] = $obj->gender;\n\t\t\t\t$this->users[$obj->rowid]['admin'] = $obj->admin;\n\t\t\t\t$this->users[$obj->rowid]['photo'] = $obj->photo;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\n\t\t// We add the fullpath property to each elements of first level (no parent exists)\n\t\tdol_syslog(get_class($this).\"::get_full_tree call to build_path_from_id_user\", LOG_DEBUG);\n\t\tforeach ($this->users as $key => $val) {\n\t\t\t$result = $this->build_path_from_id_user($key, 0); // Process a branch from the root user key (this user has no parent)\n\t\t\tif ($result < 0) {\n\t\t\t\t$this->error = 'ErrorLoopInHierarchy';\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\t// Exclude leaf including $deleteafterid from tree\n\t\tif ($deleteafterid) {\n\t\t\t//print \"Look to discard user \".$deleteafterid.\"\\n\";\n\t\t\t$keyfilter1 = '^'.$deleteafterid.'$';\n\t\t\t$keyfilter2 = '_'.$deleteafterid.'$';\n\t\t\t$keyfilter3 = '^'.$deleteafterid.'_';\n\t\t\t$keyfilter4 = '_'.$deleteafterid.'_';\n\t\t\tforeach ($this->users as $key => $val) {\n\t\t\t\tif (preg_match('/'.$keyfilter1.'/', $val['fullpath']) || preg_match('/'.$keyfilter2.'/', $val['fullpath'])\n\t\t\t\t\t|| preg_match('/'.$keyfilter3.'/', $val['fullpath']) || preg_match('/'.$keyfilter4.'/', $val['fullpath'])) {\n\t\t\t\t\t\tunset($this->users[$key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::get_full_tree dol_sort_array\", LOG_DEBUG);\n\t\t$this->users = dol_sort_array($this->users, 'fullname', 'asc', true, false);\n\n\t\t//var_dump($this->users);\n\n\t\treturn $this->users;\n\t}\n\n\t/**\n\t * \tReturn list of all child users id in herarchy (all sublevels).\n\t *  Note: Calling this function also reset full list of users into $this->users.\n\t *\n\t *  @param      int      $addcurrentuser    1=Add also current user id to the list.\n\t *\t@return\t\tarray\t\t      \t\t  \tArray of user id lower than user (all levels under user). This overwrite this->users.\n\t *  @see get_children()\n\t */\n\tpublic function getAllChildIds($addcurrentuser = 0)\n\t{\n\t\t$childids = array();\n\n\t\tif (isset($this->cache_childids[$this->id])) {\n\t\t\t$childids = $this->cache_childids[$this->id];\n\t\t} else {\n\t\t\t// Init this->users\n\t\t\t$this->get_full_tree();\n\n\t\t\t$idtoscan = $this->id;\n\n\t\t\tdol_syslog(\"Build childid for id = \".$idtoscan);\n\t\t\tforeach ($this->users as $id => $val) {\n\t\t\t\t//var_dump($val['fullpath']);\n\t\t\t\tif (preg_match('/_'.$idtoscan.'_/', $val['fullpath'])) {\n\t\t\t\t\t$childids[$val['id']] = $val['id'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->cache_childids[$this->id] = $childids;\n\n\t\tif ($addcurrentuser) {\n\t\t\t$childids[$this->id] = $this->id;\n\t\t}\n\n\t\treturn $childids;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tFor user id_user and its childs available in this->users, define property fullpath and fullname.\n\t *  Function called by get_full_tree().\n\t *\n\t * \t@param\t\tint\t\t$id_user\t\tid_user entry to update\n\t * \t@param\t\tint\t\t$protection\t\tDeep counter to avoid infinite loop (no more required, a protection is added with array useridfound)\n\t *\t@return\t\tint                     < 0 if KO (infinit loop), >= 0 if OK\n\t */\n\tpublic function build_path_from_id_user($id_user, $protection = 0)\n\t{\n\t\t// phpcs:enable\n\t\t//dol_syslog(get_class($this).\"::build_path_from_id_user id_user=\".$id_user.\" protection=\".$protection, LOG_DEBUG);\n\n\t\tif (!empty($this->users[$id_user]['fullpath'])) {\n\t\t\t// Already defined\n\t\t\tdol_syslog(get_class($this).\"::build_path_from_id_user fullpath and fullname already defined\", LOG_WARNING);\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Define fullpath and fullname\n\t\t$this->users[$id_user]['fullpath'] = '_'.$id_user;\n\t\t$this->users[$id_user]['fullname'] = $this->users[$id_user]['lastname'];\n\t\t$i = 0; $cursor_user = $id_user;\n\n\t\t$useridfound = array($id_user);\n\t\twhile (!empty($this->parentof[$cursor_user]) && !empty($this->users[$this->parentof[$cursor_user]])) {\n\t\t\tif (in_array($this->parentof[$cursor_user], $useridfound)) {\n\t\t\t\tdol_syslog(\"The hierarchy of user has a recursive loop\", LOG_WARNING);\n\t\t\t\treturn -1; // Should not happen. Protection against looping hierarchy\n\t\t\t}\n\t\t\t$useridfound[] = $this->parentof[$cursor_user];\n\t\t\t$this->users[$id_user]['fullpath'] = '_'.$this->parentof[$cursor_user].$this->users[$id_user]['fullpath'];\n\t\t\t$this->users[$id_user]['fullname'] = $this->users[$this->parentof[$cursor_user]]['lastname'].' >> '.$this->users[$id_user]['fullname'];\n\t\t\t$i++; $cursor_user = $this->parentof[$cursor_user];\n\t\t}\n\n\t\t// We count number of _ to have level\n\t\t$this->users[$id_user]['level'] = dol_strlen(preg_replace('/[^_]/i', '', $this->users[$id_user]['fullpath']));\n\n\t\treturn 1;\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param DoliDB $db Database handler\n\t * @param int $origin_id Old thirdparty id\n\t * @param int $dest_id New thirdparty id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'user',\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *      Load metrics this->nb for dashboard\n\t *\n\t *      @return     int         <0 if KO, >0 if OK\n\t */\n\tpublic function load_state_board()\n\t{\n\t\t// phpcs:enable\n\n\t\t$this->nb = array();\n\n\t\t$sql = \"SELECT count(u.rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user as u\";\n\t\t$sql .= \" WHERE u.statut > 0\";\n\t\t//$sql.= \" AND employee != 0\";\n\t\t$sql .= \" AND u.entity IN (\".getEntity('user').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->nb[\"users\"] = $obj->nb;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t * \t@param\t    string\t\t$modele\t\t\tForce model to use ('' to not force)\n\t * \t@param\t\tTranslate\t$outputlangs\tObject langs to use for output\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n\t *  @param   null|array  $moreparams     Array to provide more information\n\t * \t@return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails = 0, $hidedesc = 0, $hideref = 0, $moreparams = null)\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$langs->load(\"user\");\n\n\t\t// Positionne le modele sur le nom du modele a utiliser\n\t\tif (!dol_strlen($modele)) {\n\t\t\tif (!empty($conf->global->USER_ADDON_PDF)) {\n\t\t\t\t$modele = $conf->global->USER_ADDON_PDF;\n\t\t\t} else {\n\t\t\t\t$modele = 'bluesky';\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/user/doc/\";\n\n\t\treturn $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref, $moreparams);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return property of user from its id\n\t *\n\t *  @param\tint\t\t$rowid      id of contact\n\t *  @param  string\t$mode       'email' or 'mobile'\n\t *  @return string  \t\t\tEmail of user with format: \"Full name <email>\"\n\t */\n\tpublic function user_get_property($rowid, $mode)\n\t{\n\t\t// phpcs:enable\n\t\t$user_property = '';\n\n\t\tif (empty($rowid)) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$sql = \"SELECT rowid, email, user_mobile, civility, lastname, firstname\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"user\";\n\t\t$sql .= \" WHERE rowid = \".((int) $rowid);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$nump = $this->db->num_rows($resql);\n\n\t\t\tif ($nump) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\tif ($mode == 'email') {\n\t\t\t\t\t$user_property = dolGetFirstLastname($obj->firstname, $obj->lastname).\" <\".$obj->email.\">\";\n\t\t\t\t} elseif ($mode == 'mobile') {\n\t\t\t\t\t$user_property = $obj->user_mobile;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $user_property;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\t/**\n\t *\tLoad all objects into $this->users\n\t *\n\t *  @param\tstring\t\t$sortorder\t\tsort order\n\t *  @param\tstring\t\t$sortfield\t\tsort field\n\t *  @param\tint\t\t\t$limit\t\t\tlimit page\n\t *  @param\tint\t\t\t$offset\t\t\tpage\n\t *  @param\tarray\t\t$filter\t\t\tFilter array. Example array('field'=>'valueforlike', 'customurl'=>...)\n\t *  @param  string      $filtermode\t\tFilter mode (AND or OR)\n\t *  @param  bool        $entityfilter\tActivate entity filter\n\t *  @return int\t\t\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function fetchAll($sortorder = '', $sortfield = '', $limit = 0, $offset = 0, $filter = array(), $filtermode = 'AND', $entityfilter = false)\n\t{\n\t\tglobal $conf, $user;\n\n\t\t$sql = \"SELECT t.rowid\";\n\t\t$sql .= ' FROM '.MAIN_DB_PREFIX.$this->table_element.' as t ';\n\n\t\tif ($entityfilter) {\n\t\t\tif (!empty($conf->global->MULTICOMPANY_TRANSVERSE_MODE)) {\n\t\t\t\tif (!empty($user->admin) && empty($user->entity) && $conf->entity == 1) {\n\t\t\t\t\t$sql .= \" WHERE t.entity IS NOT NULL\"; // Show all users\n\t\t\t\t} else {\n\t\t\t\t\t$sql .= \",\".MAIN_DB_PREFIX.\"usergroup_user as ug\";\n\t\t\t\t\t$sql .= \" WHERE ((ug.fk_user = t.rowid\";\n\t\t\t\t\t$sql .= \" AND ug.entity IN (\".getEntity('user').\"))\";\n\t\t\t\t\t$sql .= \" OR t.entity = 0)\"; // Show always superadmin\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$sql .= \" WHERE t.entity IN (\".getEntity('user').\")\";\n\t\t\t}\n\t\t} else {\n\t\t\t$sql .= \" WHERE 1 = 1\";\n\t\t}\n\n\t\t// Manage filter\n\t\t$sqlwhere = array();\n\t\tif (!empty($filter)) {\n\t\t\tforeach ($filter as $key => $value) {\n\t\t\t\tif ($key == 't.rowid') {\n\t\t\t\t\t$sqlwhere[] = $key.'='.$value;\n\t\t\t\t} elseif (strpos($key, 'date') !== false) {\n\t\t\t\t\t$sqlwhere[] = $key.' = \\''.$this->db->idate($value).'\\'';\n\t\t\t\t} elseif ($key == 'customsql') {\n\t\t\t\t\t$sqlwhere[] = $value;\n\t\t\t\t} else {\n\t\t\t\t\t$sqlwhere[] = $key.' LIKE \\'%'.$this->db->escape($value).'%\\'';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (count($sqlwhere) > 0) {\n\t\t\t$sql .= ' AND ('.implode(' '.$filtermode.' ', $sqlwhere).')';\n\t\t}\n\t\t$sql .= $this->db->order($sortfield, $sortorder);\n\t\tif ($limit) {\n\t\t\t$sql .= $this->db->plimit($limit + 1, $offset);\n\t\t}\n\n\t\tdol_syslog(__METHOD__, LOG_DEBUG);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$this->users = array();\n\t\t\t$num = $this->db->num_rows($resql);\n\t\t\tif ($num) {\n\t\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t\t$line = new self($this->db);\n\t\t\t\t\t$result = $line->fetch($obj->rowid);\n\t\t\t\t\tif ($result > 0 && !empty($line->id)) {\n\t\t\t\t\t\t$this->users[$obj->rowid] = clone $line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->db->free($resql);\n\t\t\t}\n\t\t\treturn $num;\n\t\t} else {\n\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Cache the SQL results of the function \"findUserIdByEmail($email)\"\n\t *\n\t * NOTE: findUserIdByEmailCache[...] === -1 means not found in database\n\t *\n\t * @var array\n\t */\n\tprivate $findUserIdByEmailCache;\n\n\t/**\n\t * Find a user by the given e-mail and return it's user id when found\n\t *\n\t * NOTE:\n\t * Use AGENDA_DISABLE_EXACT_USER_EMAIL_COMPARE_FOR_EXTERNAL_CALENDAR\n\t * to disable exact e-mail search\n\t *\n\t * @param string\t$email\tThe full e-mail (or a part of a e-mail)\n\t * @return int\t\t\t\t<0 = user was not found, >0 = The id of the user\n\t */\n\tpublic function findUserIdByEmail($email)\n\t{\n\t\tif ($this->findUserIdByEmailCache[$email]) {\n\t\t\treturn $this->findUserIdByEmailCache[$email];\n\t\t}\n\n\t\t$this->findUserIdByEmailCache[$email] = -1;\n\n\t\tglobal $conf;\n\n\t\t$sql = 'SELECT rowid';\n\t\t$sql .= ' FROM '.MAIN_DB_PREFIX.'user';\n\n\t\tif (!empty($conf->global->AGENDA_DISABLE_EXACT_USER_EMAIL_COMPARE_FOR_EXTERNAL_CALENDAR)) {\n\t\t\t$sql .= ' WHERE email LIKE \"%'.$email.'%\"';\n\t\t} else {\n\t\t\t$sql .= ' WHERE email = \"'.$email.'\"';\n\t\t}\n\n\t\t$sql .= ' LIMIT 1';\n\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$obj = $this->db->fetch_object($resql);\n\t\tif (!$obj) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->findUserIdByEmailCache[$email] = (int) $obj->rowid;\n\n\t\treturn $this->findUserIdByEmailCache[$email];\n\t}\n}\n"], "filenames": ["htdocs/user/card.php", "htdocs/user/class/user.class.php"], "buggy_code_start_loc": [317, 1282], "buggy_code_end_loc": [319, 1671], "fixing_code_start_loc": [317, 1283], "fixing_code_end_loc": [319, 1680], "type": "CWE-863", "message": "An Access Control vulnerability exists in Dolibarr ERP/CRM 13.0.2, fixed version is 14.0.0,in the forgot-password function becuase the application allows email addresses as usernames, which can cause a Denial of Service.", "other": {"cve": {"id": "CVE-2021-37517", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-31T19:15:08.060", "lastModified": "2022-04-11T15:32:53.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An Access Control vulnerability exists in Dolibarr ERP/CRM 13.0.2, fixed version is 14.0.0,in the forgot-password function becuase the application allows email addresses as usernames, which can cause a Denial of Service."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de control de acceso en Dolibarr ERP/CRM versi\u00f3n 13.0.2, la versi\u00f3n corregida es la 14.0.0, en la funci\u00f3n forgot-password porque la aplicaci\u00f3n permite direcciones de correo electr\u00f3nico como nombres de usuario, lo que puede causar una Denegaci\u00f3n de Servicio"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:13.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "1CC5DADA-7518-4BA3-A4E4-8672E3BB5901"}]}]}], "references": [{"url": "https://github.com/Dolibarr/dolibarr/commit/b57eb8284e830e30eefb26e3c5ede076ea24037c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/b57eb8284e830e30eefb26e3c5ede076ea24037c"}}