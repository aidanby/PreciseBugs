{"buggy_code": ["/**\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n *\n * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n * graphic logo is a trademark of OpenMRS Inc.\n */\npackage org.openmrs.module.adminui.page.controller.systemadmin.accounts;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Collections;\n\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.openmrs.OpenmrsObject;\nimport org.openmrs.Person;\nimport org.openmrs.PersonName;\nimport org.openmrs.Role;\nimport org.openmrs.User;\nimport org.openmrs.api.APIException;\nimport org.openmrs.api.AdministrationService;\nimport org.openmrs.api.UserService;\nimport org.openmrs.api.context.Context;\nimport org.openmrs.messagesource.MessageSourceService;\nimport org.openmrs.module.adminui.AdminUiConstants;\nimport org.openmrs.module.adminui.account.Account;\nimport org.openmrs.module.adminui.account.AccountService;\nimport org.openmrs.module.adminui.account.AdminUiAccountValidator;\nimport org.openmrs.module.appframework.domain.Extension;\nimport org.openmrs.module.appframework.service.AppFrameworkService;\nimport org.openmrs.module.providermanagement.Provider;\nimport org.openmrs.module.providermanagement.ProviderRole;\nimport org.openmrs.module.providermanagement.api.ProviderManagementService;\nimport org.openmrs.module.uicommons.UiCommonsConstants;\nimport org.openmrs.module.uicommons.util.InfoErrorMessageUtil;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.annotation.BindParams;\nimport org.openmrs.ui.framework.annotation.MethodParam;\nimport org.openmrs.ui.framework.annotation.SpringBean;\nimport org.openmrs.ui.framework.page.PageModel;\nimport org.openmrs.util.OpenmrsConstants;\nimport org.springframework.validation.BeanPropertyBindingResult;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.openmrs.PersonAttributeType;\nimport org.openmrs.PersonAttribute;\n\n/**\n * This controller only handles requests to create a new account and doesn't support editing\n */\npublic class AccountPageController {\n\t\n\tprotected final Log log = LogFactory.getLog(getClass());\n\t\n\tpublic Account getAccount(@RequestParam(value = \"personId\", required = false) Person person) {\n\t\t\n\t\tAccount account;\n\t\t\n\t\tif (person == null) {\n\t\t\taccount = new Account(new Person());\n\t\t} else {\n\t\t\taccount = new Account(person);\n\t\t\tif (account == null) {\n\t\t\t\tthrow new APIException(\"Failed to find user account matching person with id:\" + person.getPersonId());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn account;\n\t}\n\t\n\t/**\n\t * @param model\n\t * @param account\n\t * @param accountService\n\t * @param providerManagementService\n\t */\n\tpublic void get(PageModel model, @MethodParam(\"getAccount\") Account account,\n\t                @SpringBean(\"adminAccountService\") AccountService accountService,\n\t                @SpringBean(\"adminService\") AdministrationService administrationService,\n\t                @SpringBean(\"providerManagementService\") ProviderManagementService providerManagementService,\n\t\t\t\t\tUiUtils uu,\n\t\t\t\t\t@SpringBean(\"appFrameworkService\") AppFrameworkService appFrameworkService)\n\t    throws IOException {\n\t\t\n\t\tsetModelAttributes(model, account, null, accountService, administrationService, providerManagementService, uu, appFrameworkService);\n\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(model, account, null);\n\t\t}\n\t}\n\t\n\t/**\n\t * @param account\n\t * @param messageSourceService\n\t * @param accountService\n\t * @param administrationService\n\t * @param providerManagementService\n\t * @param accountValidator\n\t * @param model\n\t * @param request\n\t * @return\n\t */\n\tpublic String post(PageModel model, @MethodParam(\"getAccount\") @BindParams Account account, @BindParams User user,\n\t                   @BindParams OtherAccountData otherAccountData, @SpringBean(\"userService\") UserService userService,\n\t                   @SpringBean(\"messageSourceService\") MessageSourceService messageSourceService,\n\t                   @SpringBean(\"adminAccountService\") AccountService accountService,\n\t                   @SpringBean(\"adminService\") AdministrationService administrationService,\n\t                   @SpringBean(\"adminUiAccountValidator\") AdminUiAccountValidator accountValidator,\n\t                   @SpringBean(\"providerManagementService\") ProviderManagementService providerManagementService,\n\t\t\t\t\t   @SpringBean(\"appFrameworkService\") AppFrameworkService appFrameworkService,\n\t                   HttpServletRequest request, UiUtils uu) throws IOException {\n\t\t\n\t\tErrors errors = new BeanPropertyBindingResult(account, \"account\");\n\n        List<Extension> customUserPropertyEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        for(Extension ext : customUserPropertyEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"userProperty\")) {\n                String userPropertyName = ext.getExtensionParams().get(\"userPropertyName\").toString();\n                String[] parameterValues = parameterMap.get(userPropertyName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    String parameterValue;\n                    if (userPropertyName == \"locationUuid\") {\n                    \tparameterValue = String.join(\",\", parameterValues);\n                    } else {\n                        if (parameterValues.length > 1) {\n                            log.warn(\"Multiple userProperty for a single user type not supported, ignoring extra values\");\n                        }\n                        parameterValue = parameterValues[0];\n                    }\n                    if (userPropertyName != null && parameterValue != null) {\n                        user.setUserProperty(userPropertyName, parameterValue);\n                    }\n                }\n            }\n        }\n\n        List<Extension> customPersonAttributeEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n        for(Extension ext : customPersonAttributeEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"personAttribute\")) {\n                String formFiledName = ext.getExtensionParams().get(\"formFieldName\").toString();\n                String personAttributeTypeUuid = ext.getExtensionParams().get(\"uuid\").toString();\n                String[] parameterValues = parameterMap.get(formFiledName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    if (parameterValues.length > 1) {\n                        log.warn(\"Multiple values for a single person attribute type not supported, ignoring extra values\");\n                    }\n                    String parameterValue = parameterValues[0];\n                    if (parameterValue != null) {\n                        PersonAttributeType personAttributeByUuid = Context.getPersonService()\n                                .getPersonAttributeTypeByUuid(personAttributeTypeUuid);\n                        if (personAttributeByUuid != null) {\n                            PersonAttribute attribute = new PersonAttribute(personAttributeByUuid, parameterValue);\n                            account.getPerson().addAttribute(attribute);\n                        }\n                    }\n                }\n            }\n        }\n\n\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t//The StringToRoleConverter emrapi for some reason is taking precedence over the\n\t\t\t//one in uiframework module and it doesn't get role by uuid, so we have to do this\n\t\t\tuser.addRole(userService.getRoleByUuid(request.getParameter(\"privilegeLevel\")));\n\t\t\tString[] uuids = request.getParameterValues(\"capabilities\");\n\t\t\tif (uuids != null) {\n\t\t\t\tfor (String uuid : uuids) {\n\t\t\t\t\tuser.addRole(userService.getRoleByUuid(uuid));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString forcePassword = otherAccountData.getForceChangePassword() ? \"true\" : \"false\";\n\t\t\tuser.setUserProperty(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, forcePassword);\n\t\t\taccount.addUserAccount(user);\n\t\t}\n\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\tProvider provider = new Provider();\n\t\t\tprovider.setIdentifier(request.getParameter(\"identifier\"));\n\t\t\tprovider.setProviderRole(providerManagementService.getProviderRoleByUuid(request.getParameter(\"providerRole\")));\n\t\t\taccount.addProviderAccount(provider);\n\t\t}\n\t\t\n\t\taccountValidator.validate(account, errors);\n\t\t\n\t\tif (!errors.hasErrors()) {\n\t\t\ttry {\n\t\t\t\taccount.setPassword(user, otherAccountData.getPassword());\n\t\t\t\taccountService.saveAccount(account);\n\t\t\t\tInfoErrorMessageUtil.flashInfoMessage(request.getSession(), \"adminui.account.saved\");\n\t\t\t\treturn \"redirect:/adminui/systemadmin/accounts/manageAccounts.page\";\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\terrors.reject(\"adminui.account.error.save.fail\");\n\t\t\t\t//If the person, provider or user account had been flushed we need to unset the ids because\n\t\t\t\t//they actually don't exist in the DB otherwise the logic in the GSP will see the ids and\n\t\t\t\t//think we are editing and things will break\n\t\t\t\taccount.getPerson().setId(null);\n\t\t\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\t\t\taccount.getProviderAccounts().get(0).setProviderId(null);\n\t\t\t\t}\n\t\t\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t\t\taccount.getUserAccounts().get(0).setUserId(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetModelAttributes(model, account, otherAccountData, accountService, administrationService,\n\t\t    providerManagementService, uu, appFrameworkService);\n\t\t\n\t\tsendErrorMessage(errors, model, messageSourceService, request);\n\t\t\n\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(model, account, otherAccountData);\n\t\t}\n\t\t\n\t\treturn \"systemadmin/accounts/account\";\n\t\t\n\t}\n\t\n\tpublic void setModelAttributes(PageModel model, Account account, OtherAccountData otherAccountData,\n\t                               AccountService accountService, AdministrationService administrationService,\n\t                               ProviderManagementService providerManagementService, UiUtils uu,\n\t\t\t\t\t\t\t\t   AppFrameworkService appFrameworkService) throws IOException {\n\n\t\tmodel.addAttribute(\"account\", account);\n\t\tBoolean forcePasswordChange = null;\n\t\tif (otherAccountData == null) {\n\t\t\totherAccountData = new OtherAccountData();\n\t\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\t\t//Default value when creating a new account otherwise we need to read the DB for each user\n\t\t\t\tforcePasswordChange = true;\n\t\t\t}\n\t\t} else {\n\t\t\t//other account data is not null only when we are sending\n\t\t\t//the user back to the form, so we need to get what they\n\t\t\t//had previously selected\n\t\t\tforcePasswordChange = otherAccountData.getForceChangePassword();\n\t\t}\n\t\t\n\t\tmodel.addAttribute(\"otherAccountData\", otherAccountData);\n\t\tList<Role> capabilities = accountService.getAllCapabilities();\n\t\tmodel.addAttribute(\"capabilities\", accountService.getAllCapabilities());\n\t\tList<Role> privilegeLevels = accountService.getAllPrivilegeLevels();\n\t\tmodel.addAttribute(\"privilegeLevels\", privilegeLevels);\n\t\tString privilegeLevelPrefix = AdminUiConstants.ROLE_PREFIX_PRIVILEGE_LEVEL;\n\t\tString rolePrefix = AdminUiConstants.ROLE_PREFIX_CAPABILITY;\n\t\tmodel.addAttribute(\"privilegeLevelPrefix\", privilegeLevelPrefix);\n\t\tmodel.addAttribute(\"rolePrefix\", rolePrefix);\n\t\tmodel.addAttribute(\"allowedLocales\", administrationService.getAllowedLocales());\n\t\tList<ProviderRole> providerRoles = providerManagementService.getAllProviderRoles(false);\n\t\tmodel.addAttribute(\"providerRoles\", providerRoles);\n\n\t\tList<Extension> customPersonAttributeEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n\t\tCollections.sort(customPersonAttributeEditFragments);\n\t\tmodel.addAttribute(\"customPersonAttributeEditFragments\", customPersonAttributeEditFragments);\n\t\tList<Extension> customPersonAttributeViewFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeViewFragment\");\n\t\tCollections.sort(customPersonAttributeViewFragments);\n\t\tmodel.addAttribute(\"customPersonAttributeViewFragments\", customPersonAttributeViewFragments);\n\n\t\tList<Extension> customUserPropertyEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n\t\tCollections.sort(customUserPropertyEditFragments);\n\t\tmodel.addAttribute(\"customUserPropertyEditFragments\", customUserPropertyEditFragments);\n\t\tList<Extension> customUserPropertyViewFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyViewFragment\");\n\t\tCollections.sort(customUserPropertyViewFragments);\n\t\tmodel.addAttribute(\"customUserPropertyViewFragments\", customUserPropertyViewFragments);\n\n\t\tMap<String, Integer> propertyMaxLengthMap = new HashMap<String, Integer>();\n\t\tpropertyMaxLengthMap.put(\"familyName\",\n\t\t    administrationService.getMaximumPropertyLength(PersonName.class, \"family_name\"));\n\t\tpropertyMaxLengthMap\n\t\t        .put(\"givenName\", administrationService.getMaximumPropertyLength(PersonName.class, \"given_name\"));\n\t\tpropertyMaxLengthMap.put(\"identifier\", administrationService.getMaximumPropertyLength(Provider.class, \"identifier\"));\n\t\tpropertyMaxLengthMap.put(\"username\", administrationService.getMaximumPropertyLength(User.class, \"username\"));\n\t\tpropertyMaxLengthMap.put(\"password\", administrationService.getMaximumPropertyLength(User.class, \"password\"));\n\t\tmodel.addAttribute(\"propertyMaxLengthMap\", propertyMaxLengthMap);\n\t\tmodel.addAttribute(\"passwordMinLength\",\n\t\t    administrationService.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_MINIMUM_LENGTH, \"8\"));\n\t\t\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSimpleObject so = new SimpleObject();\n\t\tfor (Role cap : capabilities) {\n\t\t\tString str = uu.format(cap);\n\t\t\tso.put(cap.getUuid(), str.substring(str.indexOf(rolePrefix) + rolePrefix.length()));\n\t\t}\n\t\tmodel.addAttribute(\"capabilitiesJson\", mapper.writeValueAsString(so));\n\t\tso = new SimpleObject();\n\t\tfor (Role role : privilegeLevels) {\n\t\t\tString str = uu.format(role);\n\t\t\tso.put(role.getUuid(), str.substring(str.indexOf(privilegeLevelPrefix) + privilegeLevelPrefix.length()));\n\t\t}\n\t\tmodel.addAttribute(\"privilegeLevelsJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tif (account.getPerson().getPersonId() != null) {\n\t\t\taccount.getProviderAccounts().add(new Provider());\n\t\t\taccount.getUserAccounts().add(new User());\n\t\t}\n\t\tso = new SimpleObject();\n\t\tfor (User user : account.getUserAccounts()) {\n\t\t\tSimpleObject simpleUser = new SimpleObject();\n\t\t\tsimpleUser.put(\"username\", user.getUsername());\n\t\t\tsimpleUser.put(\"systemId\", user.getSystemId());\n\t\t\tsimpleUser.put(\"privilegeLevel\", account.getPrivilegeLevel(user) != null ? account.getPrivilegeLevel(user)\n\t\t\t        .getUuid() : \"\");\n\t\t\tSimpleObject userProperties = new SimpleObject();\n\t\t\tboolean force;\n\t\t\tif (forcePasswordChange != null) {\n\t\t\t\tforce = forcePasswordChange;\n\t\t\t} else {\n\t\t\t\t//Default to force password change for a new account to be added otherwise get DB value\n\t\t\t\tforce = (user.getUserId() == null) ? true : account.isSupposedToChangePassword(user);\n\t\t\t}\n\t\t\tuserProperties.put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, force);\n\t\t\tfor(Extension ext : customUserPropertyViewFragments) {\n\t\t\t\tif (ext.getExtensionParams().get(\"type\").equals(\"userProperty\")) {\n\t\t\t\t\tString userPropertyName = ext.getExtensionParams().get(\"userPropertyName\").toString();\n\t\t\t\t\tuserProperties.put(userPropertyName, user.getUserProperty(userPropertyName));\n\t\t\t\t}\n\t\t\t}\n\t\t\tsimpleUser.put(\"userProperties\", userProperties);\n\t\t\tsimpleUser.put(\"retired\", user.getRetired());\n\t\t\t\n\t\t\tSimpleObject simpleUserCapabilities = new SimpleObject();\n\t\t\tSet<Role> userCapabilities = account.getCapabilities(user);\n\t\t\tfor (Role cap : capabilities) {\n\t\t\t\tsimpleUserCapabilities.put(cap.getUuid(), userCapabilities.contains(cap));\n\t\t\t}\n\t\t\tsimpleUser.put(\"capabilities\", simpleUserCapabilities);\n\t\t\t\n\t\t\tso.put(user.getUuid(), simpleUser);\n\t\t}\n\t\tmodel.addAttribute(\"uuidAndUserMapJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tso = new SimpleObject();\n\t\tfor (ProviderRole pr : providerRoles) {\n\t\t\tso.put(pr.getUuid(), uu.format(pr));\n\t\t}\n\t\tmodel.addAttribute(\"providerRolesJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tso = new SimpleObject();\n\t\tfor (OpenmrsObject o : account.getProviderAccounts()) {\n\t\t\tProvider p = (Provider) o;\n\t\t\tSimpleObject simpleProvider = new SimpleObject();\n\t\t\tsimpleProvider.put(\"uuid\", p.getUuid());\n\t\t\tsimpleProvider.put(\"identifier\", p.getIdentifier());\n\t\t\tsimpleProvider.put(\"providerRole\", (p.getProviderRole() != null) ? p.getProviderRole().getUuid() : \"\");\n\t\t\tsimpleProvider.put(\"retired\", p.isRetired());\n\t\t\t\n\t\t\tso.put(p.getUuid(), simpleProvider);\n\t\t}\n\t\tmodel.addAttribute(\"uuidAndProviderJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tso = new SimpleObject();\n\t\tso.put(\"savedChanges\", uu.message(\"adminui.savedChanges\"));\n\t\tso.put(\"saved\", uu.message(\"adminui.saved\"));\n\t\tso.put(\"retired\", uu.message(\"adminui.retired\"));\n\t\tso.put(\"restored\", uu.message(\"adminui.restored\"));\n\t\tso.put(\"changedByOn\", uu.message(\"adminui.changedByOn\"));\n\t\tso.put(\"auditInfoFail\", uu.message(\"adminui.getAuditInfo.fail\"));\n\n\t\tso = new SimpleObject();\n\t\tfor(Extension ext : customPersonAttributeEditFragments) {\n\t\t\tObject type = ext.getExtensionParams().get(\"type\");\n\t\t\tObject personAttributeTypeUuid = ext.getExtensionParams().get(\"uuid\");\n\t\t\tPerson person = account.getPerson();\n\t\t\tif (person != null && type != null && personAttributeTypeUuid != null &&\n\t\t\t\t\ttype.toString().equals(\"personAttribute\")) {\n\t\t\t\tString formFieldName = ext.getExtensionParams().get(\"formFieldName\").toString();\n\t\t\t\tPersonAttribute personAttribute = person.getAttribute(Context.getPersonService()\n\t\t\t\t\t\t.getPersonAttributeTypeByUuid(personAttributeTypeUuid.toString()));\n\t\t\t\tif(personAttribute != null) {\n\t\t\t\t\tString personAttributeUuid = personAttribute.getUuid();\n\t\t\t\t\tSimpleObject personAttributeInfo = new SimpleObject();\n\t\t\t\t\tpersonAttributeInfo.put(\"formFieldName\", formFieldName);\n\t\t\t\t\tpersonAttributeInfo.put(\"personAttributeUuid\", personAttributeUuid);\n\t\t\t\t\tso.put(\"personAttributeInfo\", personAttributeInfo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmodel.addAttribute(\"customPersonAttributeJson\", mapper.writeValueAsString(so));\n\n\t\tmodel.addAttribute(\"messages\", mapper.writeValueAsString(so));\n\t}\n\t\n\tprivate void sendErrorMessage(Errors errors, PageModel model, MessageSourceService mss, HttpServletRequest request) {\n\t\tmodel.addAttribute(\"errors\", errors);\n\t\tStringBuffer errorMessage = new StringBuffer(mss.getMessage(\"error.failed.validation\"));\n\t\terrorMessage.append(\"<ul>\");\n\t\tfor (ObjectError error : errors.getAllErrors()) {\n\t\t\terrorMessage.append(\"<li>\");\n\t\t\terrorMessage.append(mss.getMessage(error.getCode(), error.getArguments(), error.getDefaultMessage(), null));\n\t\t\terrorMessage.append(\"</li>\");\n\t\t}\n\t\terrorMessage.append(\"</ul>\");\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_ERROR_MESSAGE, errorMessage.toString());\n\t}\n\t\n\tprivate void setJsonFormData(PageModel model, Account account, OtherAccountData otherAccountData) throws IOException {\n\t\t\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSimpleObject simplePerson = new SimpleObject();\n\t\tsimplePerson.put(\"familyName\", account.getFamilyName());\n\t\tsimplePerson.put(\"givenName\", account.getGivenName());\n\t\tsimplePerson.put(\"gender\", account.getGender() != null ? account.getGender() : \"\");\n\t\tmodel.addAttribute(\"personJson\", mapper.writeValueAsString(simplePerson));\n\t\t\n\t\tSimpleObject simpleUser = new SimpleObject();\n\t\tSimpleObject simpleProvider = new SimpleObject();\n\t\tif (otherAccountData != null) {\n\t\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t\tUser u = account.getUserAccounts().get(0);\n\t\t\t\tsimpleUser.put(\"username\", u.getUsername());\n\t\t\t\tsimpleUser.put(\"privilegeLevel\", account.getPrivilegeLevel(u).getUuid());\n\t\t\t\tSimpleObject userProperties = new SimpleObject();\n\t\t\t\tuserProperties\n\t\t\t\t        .put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, otherAccountData.getForceChangePassword());\n\t\t\t\tsimpleUser.put(\"userProperties\", userProperties);\n\t\t\t\tSimpleObject simpleUserCapabilities = new SimpleObject();\n\t\t\t\tfor (Role cap : account.getCapabilities(u)) {\n\t\t\t\t\tsimpleUserCapabilities.put(cap.getUuid(), true);\n\t\t\t\t}\n\t\t\t\tsimpleUser.put(\"capabilities\", simpleUserCapabilities);\n\t\t\t}\n\t\t\t\n\t\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\t\tProvider prov = (Provider) account.getProviderAccounts().get(0);\n\t\t\t\tsimpleProvider.put(\"identifier\", prov.getIdentifier());\n\t\t\t\tsimpleProvider.put(\"providerRole\", prov.getProviderRole().getUuid());\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.addAttribute(\"userJson\", mapper.writeValueAsString(simpleUser));\n\t\tmodel.addAttribute(\"providerJson\", mapper.writeValueAsString(simpleProvider));\n\t}\n\t\n}\n"], "fixing_code": ["/**\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n *\n * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n * graphic logo is a trademark of OpenMRS Inc.\n */\npackage org.openmrs.module.adminui.page.controller.systemadmin.accounts;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Collections;\n\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.openmrs.OpenmrsObject;\nimport org.openmrs.Person;\nimport org.openmrs.PersonName;\nimport org.openmrs.Role;\nimport org.openmrs.User;\nimport org.openmrs.api.APIException;\nimport org.openmrs.api.AdministrationService;\nimport org.openmrs.api.UserService;\nimport org.openmrs.api.context.Context;\nimport org.openmrs.messagesource.MessageSourceService;\nimport org.openmrs.module.adminui.AdminUiConstants;\nimport org.openmrs.module.adminui.account.Account;\nimport org.openmrs.module.adminui.account.AccountService;\nimport org.openmrs.module.adminui.account.AdminUiAccountValidator;\nimport org.openmrs.module.appframework.domain.Extension;\nimport org.openmrs.module.appframework.service.AppFrameworkService;\nimport org.openmrs.module.providermanagement.Provider;\nimport org.openmrs.module.providermanagement.ProviderRole;\nimport org.openmrs.module.providermanagement.api.ProviderManagementService;\nimport org.openmrs.module.uicommons.UiCommonsConstants;\nimport org.openmrs.module.uicommons.util.InfoErrorMessageUtil;\nimport org.openmrs.ui.framework.SimpleObject;\nimport org.openmrs.ui.framework.UiUtils;\nimport org.openmrs.ui.framework.annotation.BindParams;\nimport org.openmrs.ui.framework.annotation.MethodParam;\nimport org.openmrs.ui.framework.annotation.SpringBean;\nimport org.openmrs.ui.framework.page.PageModel;\nimport org.openmrs.util.OpenmrsConstants;\nimport org.springframework.validation.BeanPropertyBindingResult;\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.openmrs.PersonAttributeType;\nimport org.openmrs.PersonAttribute;\n\n/**\n * This controller only handles requests to create a new account and doesn't support editing\n */\npublic class AccountPageController {\n\t\n\tprotected final Log log = LogFactory.getLog(getClass());\n\t\n\tpublic Account getAccount(@RequestParam(value = \"personId\", required = false) Person person) {\n\t\t\n\t\tAccount account;\n\t\t\n\t\tif (person == null) {\n\t\t\taccount = new Account(new Person());\n\t\t} else {\n\t\t\taccount = new Account(person);\n\t\t\tif (account == null) {\n\t\t\t\tthrow new APIException(\"Failed to find user account matching person with id:\" + person.getPersonId());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn account;\n\t}\n\t\n\t/**\n\t * @param model\n\t * @param account\n\t * @param accountService\n\t * @param providerManagementService\n\t */\n\tpublic void get(PageModel model, @MethodParam(\"getAccount\") Account account,\n\t                @SpringBean(\"adminAccountService\") AccountService accountService,\n\t                @SpringBean(\"adminService\") AdministrationService administrationService,\n\t                @SpringBean(\"providerManagementService\") ProviderManagementService providerManagementService,\n\t\t\t\t\tUiUtils uu,\n\t\t\t\t\t@SpringBean(\"appFrameworkService\") AppFrameworkService appFrameworkService)\n\t    throws IOException {\n\t\t\n\t\tsetModelAttributes(model, account, null, accountService, administrationService, providerManagementService, uu, appFrameworkService);\n\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(model, account, null, uu);\n\t\t}\n\t}\n\t\n\t/**\n\t * @param account\n\t * @param messageSourceService\n\t * @param accountService\n\t * @param administrationService\n\t * @param providerManagementService\n\t * @param accountValidator\n\t * @param model\n\t * @param request\n\t * @return\n\t */\n\tpublic String post(PageModel model, @MethodParam(\"getAccount\") @BindParams Account account, @BindParams User user,\n\t                   @BindParams OtherAccountData otherAccountData, @SpringBean(\"userService\") UserService userService,\n\t                   @SpringBean(\"messageSourceService\") MessageSourceService messageSourceService,\n\t                   @SpringBean(\"adminAccountService\") AccountService accountService,\n\t                   @SpringBean(\"adminService\") AdministrationService administrationService,\n\t                   @SpringBean(\"adminUiAccountValidator\") AdminUiAccountValidator accountValidator,\n\t                   @SpringBean(\"providerManagementService\") ProviderManagementService providerManagementService,\n\t\t\t\t\t   @SpringBean(\"appFrameworkService\") AppFrameworkService appFrameworkService,\n\t                   HttpServletRequest request, UiUtils uu) throws IOException {\n\t\t\n\t\tErrors errors = new BeanPropertyBindingResult(account, \"account\");\n\n        List<Extension> customUserPropertyEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        for(Extension ext : customUserPropertyEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"userProperty\")) {\n                String userPropertyName = ext.getExtensionParams().get(\"userPropertyName\").toString();\n                String[] parameterValues = parameterMap.get(userPropertyName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    String parameterValue;\n                    if (userPropertyName == \"locationUuid\") {\n                    \tparameterValue = String.join(\",\", parameterValues);\n                    } else {\n                        if (parameterValues.length > 1) {\n                            log.warn(\"Multiple userProperty for a single user type not supported, ignoring extra values\");\n                        }\n                        parameterValue = parameterValues[0];\n                    }\n                    if (userPropertyName != null && parameterValue != null) {\n                        user.setUserProperty(userPropertyName, parameterValue);\n                    }\n                }\n            }\n        }\n\n        List<Extension> customPersonAttributeEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n        for(Extension ext : customPersonAttributeEditFragments) {\n            if (StringUtils.equals(ext.getExtensionParams().get(\"type\").toString(), \"personAttribute\")) {\n                String formFiledName = ext.getExtensionParams().get(\"formFieldName\").toString();\n                String personAttributeTypeUuid = ext.getExtensionParams().get(\"uuid\").toString();\n                String[] parameterValues = parameterMap.get(formFiledName);\n                if (parameterValues != null && parameterValues.length > 0) {\n                    if (parameterValues.length > 1) {\n                        log.warn(\"Multiple values for a single person attribute type not supported, ignoring extra values\");\n                    }\n                    String parameterValue = parameterValues[0];\n                    if (parameterValue != null) {\n                        PersonAttributeType personAttributeByUuid = Context.getPersonService()\n                                .getPersonAttributeTypeByUuid(personAttributeTypeUuid);\n                        if (personAttributeByUuid != null) {\n                            PersonAttribute attribute = new PersonAttribute(personAttributeByUuid, parameterValue);\n                            account.getPerson().addAttribute(attribute);\n                        }\n                    }\n                }\n            }\n        }\n\n\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t//The StringToRoleConverter emrapi for some reason is taking precedence over the\n\t\t\t//one in uiframework module and it doesn't get role by uuid, so we have to do this\n\t\t\tuser.addRole(userService.getRoleByUuid(request.getParameter(\"privilegeLevel\")));\n\t\t\tString[] uuids = request.getParameterValues(\"capabilities\");\n\t\t\tif (uuids != null) {\n\t\t\t\tfor (String uuid : uuids) {\n\t\t\t\t\tuser.addRole(userService.getRoleByUuid(uuid));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString forcePassword = otherAccountData.getForceChangePassword() ? \"true\" : \"false\";\n\t\t\tuser.setUserProperty(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, forcePassword);\n\t\t\taccount.addUserAccount(user);\n\t\t}\n\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\tProvider provider = new Provider();\n\t\t\tprovider.setIdentifier(request.getParameter(\"identifier\"));\n\t\t\tprovider.setProviderRole(providerManagementService.getProviderRoleByUuid(request.getParameter(\"providerRole\")));\n\t\t\taccount.addProviderAccount(provider);\n\t\t}\n\t\t\n\t\taccountValidator.validate(account, errors);\n\t\t\n\t\tif (!errors.hasErrors()) {\n\t\t\ttry {\n\t\t\t\taccount.setPassword(user, otherAccountData.getPassword());\n\t\t\t\taccountService.saveAccount(account);\n\t\t\t\tInfoErrorMessageUtil.flashInfoMessage(request.getSession(), \"adminui.account.saved\");\n\t\t\t\treturn \"redirect:/adminui/systemadmin/accounts/manageAccounts.page\";\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\terrors.reject(\"adminui.account.error.save.fail\");\n\t\t\t\t//If the person, provider or user account had been flushed we need to unset the ids because\n\t\t\t\t//they actually don't exist in the DB otherwise the logic in the GSP will see the ids and\n\t\t\t\t//think we are editing and things will break\n\t\t\t\taccount.getPerson().setId(null);\n\t\t\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\t\t\taccount.getProviderAccounts().get(0).setProviderId(null);\n\t\t\t\t}\n\t\t\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t\t\taccount.getUserAccounts().get(0).setUserId(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetModelAttributes(model, account, otherAccountData, accountService, administrationService,\n\t\t    providerManagementService, uu, appFrameworkService);\n\t\t\n\t\tsendErrorMessage(errors, model, messageSourceService, request);\n\t\t\n\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\tsetJsonFormData(model, account, otherAccountData, uu);\n\t\t}\n\t\t\n\t\treturn \"systemadmin/accounts/account\";\n\t\t\n\t}\n\t\n\tpublic void setModelAttributes(PageModel model, Account account, OtherAccountData otherAccountData,\n\t                               AccountService accountService, AdministrationService administrationService,\n\t                               ProviderManagementService providerManagementService, UiUtils uu,\n\t\t\t\t\t\t\t\t   AppFrameworkService appFrameworkService) throws IOException {\n\n\t\tmodel.addAttribute(\"account\", account);\n\t\tBoolean forcePasswordChange = null;\n\t\tif (otherAccountData == null) {\n\t\t\totherAccountData = new OtherAccountData();\n\t\t\tif (account.getPerson().getPersonId() == null) {\n\t\t\t\t//Default value when creating a new account otherwise we need to read the DB for each user\n\t\t\t\tforcePasswordChange = true;\n\t\t\t}\n\t\t} else {\n\t\t\t//other account data is not null only when we are sending\n\t\t\t//the user back to the form, so we need to get what they\n\t\t\t//had previously selected\n\t\t\tforcePasswordChange = otherAccountData.getForceChangePassword();\n\t\t}\n\t\t\n\t\tmodel.addAttribute(\"otherAccountData\", otherAccountData);\n\t\tList<Role> capabilities = accountService.getAllCapabilities();\n\t\tmodel.addAttribute(\"capabilities\", accountService.getAllCapabilities());\n\t\tList<Role> privilegeLevels = accountService.getAllPrivilegeLevels();\n\t\tmodel.addAttribute(\"privilegeLevels\", privilegeLevels);\n\t\tString privilegeLevelPrefix = AdminUiConstants.ROLE_PREFIX_PRIVILEGE_LEVEL;\n\t\tString rolePrefix = AdminUiConstants.ROLE_PREFIX_CAPABILITY;\n\t\tmodel.addAttribute(\"privilegeLevelPrefix\", privilegeLevelPrefix);\n\t\tmodel.addAttribute(\"rolePrefix\", rolePrefix);\n\t\tmodel.addAttribute(\"allowedLocales\", administrationService.getAllowedLocales());\n\t\tList<ProviderRole> providerRoles = providerManagementService.getAllProviderRoles(false);\n\t\tmodel.addAttribute(\"providerRoles\", providerRoles);\n\n\t\tList<Extension> customPersonAttributeEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeEditFragment\");\n\t\tCollections.sort(customPersonAttributeEditFragments);\n\t\tmodel.addAttribute(\"customPersonAttributeEditFragments\", customPersonAttributeEditFragments);\n\t\tList<Extension> customPersonAttributeViewFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.personAttributeViewFragment\");\n\t\tCollections.sort(customPersonAttributeViewFragments);\n\t\tmodel.addAttribute(\"customPersonAttributeViewFragments\", customPersonAttributeViewFragments);\n\n\t\tList<Extension> customUserPropertyEditFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyEditFragment\");\n\t\tCollections.sort(customUserPropertyEditFragments);\n\t\tmodel.addAttribute(\"customUserPropertyEditFragments\", customUserPropertyEditFragments);\n\t\tList<Extension> customUserPropertyViewFragments =\n\t\t\t\tappFrameworkService.getExtensionsForCurrentUser(\"userAccount.userPropertyViewFragment\");\n\t\tCollections.sort(customUserPropertyViewFragments);\n\t\tmodel.addAttribute(\"customUserPropertyViewFragments\", customUserPropertyViewFragments);\n\n\t\tMap<String, Integer> propertyMaxLengthMap = new HashMap<String, Integer>();\n\t\tpropertyMaxLengthMap.put(\"familyName\",\n\t\t    administrationService.getMaximumPropertyLength(PersonName.class, \"family_name\"));\n\t\tpropertyMaxLengthMap\n\t\t        .put(\"givenName\", administrationService.getMaximumPropertyLength(PersonName.class, \"given_name\"));\n\t\tpropertyMaxLengthMap.put(\"identifier\", administrationService.getMaximumPropertyLength(Provider.class, \"identifier\"));\n\t\tpropertyMaxLengthMap.put(\"username\", administrationService.getMaximumPropertyLength(User.class, \"username\"));\n\t\tpropertyMaxLengthMap.put(\"password\", administrationService.getMaximumPropertyLength(User.class, \"password\"));\n\t\tmodel.addAttribute(\"propertyMaxLengthMap\", propertyMaxLengthMap);\n\t\tmodel.addAttribute(\"passwordMinLength\",\n\t\t    administrationService.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_MINIMUM_LENGTH, \"8\"));\n\t\t\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSimpleObject so = new SimpleObject();\n\t\tfor (Role cap : capabilities) {\n\t\t\tString str = uu.format(cap);\n\t\t\tso.put(cap.getUuid(), str.substring(str.indexOf(rolePrefix) + rolePrefix.length()));\n\t\t}\n\t\tmodel.addAttribute(\"capabilitiesJson\", mapper.writeValueAsString(so));\n\t\tso = new SimpleObject();\n\t\tfor (Role role : privilegeLevels) {\n\t\t\tString str = uu.format(role);\n\t\t\tso.put(role.getUuid(), str.substring(str.indexOf(privilegeLevelPrefix) + privilegeLevelPrefix.length()));\n\t\t}\n\t\tmodel.addAttribute(\"privilegeLevelsJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tif (account.getPerson().getPersonId() != null) {\n\t\t\taccount.getProviderAccounts().add(new Provider());\n\t\t\taccount.getUserAccounts().add(new User());\n\t\t}\n\t\tso = new SimpleObject();\n\t\tfor (User user : account.getUserAccounts()) {\n\t\t\tSimpleObject simpleUser = new SimpleObject();\n\t\t\tsimpleUser.put(\"username\", user.getUsername());\n\t\t\tsimpleUser.put(\"systemId\", user.getSystemId());\n\t\t\tsimpleUser.put(\"privilegeLevel\", account.getPrivilegeLevel(user) != null ? account.getPrivilegeLevel(user)\n\t\t\t        .getUuid() : \"\");\n\t\t\tSimpleObject userProperties = new SimpleObject();\n\t\t\tboolean force;\n\t\t\tif (forcePasswordChange != null) {\n\t\t\t\tforce = forcePasswordChange;\n\t\t\t} else {\n\t\t\t\t//Default to force password change for a new account to be added otherwise get DB value\n\t\t\t\tforce = (user.getUserId() == null) ? true : account.isSupposedToChangePassword(user);\n\t\t\t}\n\t\t\tuserProperties.put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, force);\n\t\t\tfor(Extension ext : customUserPropertyViewFragments) {\n\t\t\t\tif (ext.getExtensionParams().get(\"type\").equals(\"userProperty\")) {\n\t\t\t\t\tString userPropertyName = ext.getExtensionParams().get(\"userPropertyName\").toString();\n\t\t\t\t\tuserProperties.put(userPropertyName, user.getUserProperty(userPropertyName));\n\t\t\t\t}\n\t\t\t}\n\t\t\tsimpleUser.put(\"userProperties\", userProperties);\n\t\t\tsimpleUser.put(\"retired\", user.getRetired());\n\t\t\t\n\t\t\tSimpleObject simpleUserCapabilities = new SimpleObject();\n\t\t\tSet<Role> userCapabilities = account.getCapabilities(user);\n\t\t\tfor (Role cap : capabilities) {\n\t\t\t\tsimpleUserCapabilities.put(cap.getUuid(), userCapabilities.contains(cap));\n\t\t\t}\n\t\t\tsimpleUser.put(\"capabilities\", simpleUserCapabilities);\n\t\t\t\n\t\t\tso.put(user.getUuid(), simpleUser);\n\t\t}\n\t\tmodel.addAttribute(\"uuidAndUserMapJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tso = new SimpleObject();\n\t\tfor (ProviderRole pr : providerRoles) {\n\t\t\tso.put(pr.getUuid(), uu.format(pr));\n\t\t}\n\t\tmodel.addAttribute(\"providerRolesJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tso = new SimpleObject();\n\t\tfor (OpenmrsObject o : account.getProviderAccounts()) {\n\t\t\tProvider p = (Provider) o;\n\t\t\tSimpleObject simpleProvider = new SimpleObject();\n\t\t\tsimpleProvider.put(\"uuid\", p.getUuid());\n\t\t\tsimpleProvider.put(\"identifier\", p.getIdentifier());\n\t\t\tsimpleProvider.put(\"providerRole\", (p.getProviderRole() != null) ? p.getProviderRole().getUuid() : \"\");\n\t\t\tsimpleProvider.put(\"retired\", p.isRetired());\n\t\t\t\n\t\t\tso.put(p.getUuid(), simpleProvider);\n\t\t}\n\t\tmodel.addAttribute(\"uuidAndProviderJson\", mapper.writeValueAsString(so));\n\t\t\n\t\tso = new SimpleObject();\n\t\tso.put(\"savedChanges\", uu.message(\"adminui.savedChanges\"));\n\t\tso.put(\"saved\", uu.message(\"adminui.saved\"));\n\t\tso.put(\"retired\", uu.message(\"adminui.retired\"));\n\t\tso.put(\"restored\", uu.message(\"adminui.restored\"));\n\t\tso.put(\"changedByOn\", uu.message(\"adminui.changedByOn\"));\n\t\tso.put(\"auditInfoFail\", uu.message(\"adminui.getAuditInfo.fail\"));\n\n\t\tso = new SimpleObject();\n\t\tfor(Extension ext : customPersonAttributeEditFragments) {\n\t\t\tObject type = ext.getExtensionParams().get(\"type\");\n\t\t\tObject personAttributeTypeUuid = ext.getExtensionParams().get(\"uuid\");\n\t\t\tPerson person = account.getPerson();\n\t\t\tif (person != null && type != null && personAttributeTypeUuid != null &&\n\t\t\t\t\ttype.toString().equals(\"personAttribute\")) {\n\t\t\t\tString formFieldName = ext.getExtensionParams().get(\"formFieldName\").toString();\n\t\t\t\tPersonAttribute personAttribute = person.getAttribute(Context.getPersonService()\n\t\t\t\t\t\t.getPersonAttributeTypeByUuid(personAttributeTypeUuid.toString()));\n\t\t\t\tif(personAttribute != null) {\n\t\t\t\t\tString personAttributeUuid = personAttribute.getUuid();\n\t\t\t\t\tSimpleObject personAttributeInfo = new SimpleObject();\n\t\t\t\t\tpersonAttributeInfo.put(\"formFieldName\", formFieldName);\n\t\t\t\t\tpersonAttributeInfo.put(\"personAttributeUuid\", personAttributeUuid);\n\t\t\t\t\tso.put(\"personAttributeInfo\", personAttributeInfo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmodel.addAttribute(\"customPersonAttributeJson\", mapper.writeValueAsString(so));\n\n\t\tmodel.addAttribute(\"messages\", mapper.writeValueAsString(so));\n\t}\n\t\n\tprivate void sendErrorMessage(Errors errors, PageModel model, MessageSourceService mss, HttpServletRequest request) {\n\t\tmodel.addAttribute(\"errors\", errors);\n\t\tStringBuffer errorMessage = new StringBuffer(mss.getMessage(\"error.failed.validation\"));\n\t\terrorMessage.append(\"<ul>\");\n\t\tfor (ObjectError error : errors.getAllErrors()) {\n\t\t\terrorMessage.append(\"<li>\");\n\t\t\terrorMessage.append(mss.getMessage(error.getCode(), error.getArguments(), error.getDefaultMessage(), null));\n\t\t\terrorMessage.append(\"</li>\");\n\t\t}\n\t\terrorMessage.append(\"</ul>\");\n\t\trequest.getSession().setAttribute(UiCommonsConstants.SESSION_ATTRIBUTE_ERROR_MESSAGE, errorMessage.toString());\n\t}\n\t\n\tprivate void setJsonFormData(PageModel model, Account account, OtherAccountData otherAccountData, UiUtils uu) throws IOException {\n\t\t\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tSimpleObject simplePerson = new SimpleObject();\n\t\tsimplePerson.put(\"familyName\", uu.encodeHtml(account.getFamilyName()));\n\t\tsimplePerson.put(\"givenName\", uu.encodeHtml(account.getGivenName()));\n\t\tsimplePerson.put(\"gender\", uu.encodeHtml(account.getGender()) != null ? uu.encodeHtml(account.getGender()) : \"\");\n\t\tmodel.addAttribute(\"personJson\", mapper.writeValueAsString(simplePerson));\n\t\t\n\t\tSimpleObject simpleUser = new SimpleObject();\n\t\tSimpleObject simpleProvider = new SimpleObject();\n\t\tif (otherAccountData != null) {\n\t\t\tif (otherAccountData.getAddUserAccount()) {\n\t\t\t\tUser u = account.getUserAccounts().get(0);\n\t\t\t\tsimpleUser.put(\"username\", uu.encodeHtml(u.getUsername()));\n\t\t\t\tsimpleUser.put(\"privilegeLevel\", account.getPrivilegeLevel(u).getUuid());\n\t\t\t\tSimpleObject userProperties = new SimpleObject();\n\t\t\t\tuserProperties\n\t\t\t\t        .put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD, otherAccountData.getForceChangePassword());\n\t\t\t\tsimpleUser.put(\"userProperties\", userProperties);\n\t\t\t\tSimpleObject simpleUserCapabilities = new SimpleObject();\n\t\t\t\tfor (Role cap : account.getCapabilities(u)) {\n\t\t\t\t\tsimpleUserCapabilities.put(cap.getUuid(), true);\n\t\t\t\t}\n\t\t\t\tsimpleUser.put(\"capabilities\", simpleUserCapabilities);\n\t\t\t}\n\t\t\t\n\t\t\tif (otherAccountData.getAddProviderAccount()) {\n\t\t\t\tProvider prov = (Provider) account.getProviderAccounts().get(0);\n\t\t\t\tsimpleProvider.put(\"identifier\", prov.getIdentifier());\n\t\t\t\tsimpleProvider.put(\"providerRole\", prov.getProviderRole().getUuid());\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.addAttribute(\"userJson\", mapper.writeValueAsString(simpleUser));\n\t\tmodel.addAttribute(\"providerJson\", mapper.writeValueAsString(simpleProvider));\n\t}\n\t\n}\n"], "filenames": ["omod/src/main/java/org/openmrs/module/adminui/page/controller/systemadmin/accounts/AccountPageController.java"], "buggy_code_start_loc": [98], "buggy_code_end_loc": [428], "fixing_code_start_loc": [98], "fixing_code_end_loc": [428], "type": "CWE-79", "message": "A vulnerability classified as problematic has been found in OpenMRS Admin UI Module up to 1.4.x. Affected is the function sendErrorMessage of the file omod/src/main/java/org/openmrs/module/adminui/page/controller/systemadmin/accounts/AccountPageController.java of the component Account Setup Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.5.0 is able to address this issue. The name of the patch is 702fbfdac7c4418f23bb5f6452482b4a88020061. It is recommended to upgrade the affected component. VDB-216918 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36636", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-27T23:15:10.507", "lastModified": "2023-01-06T02:29:58.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in OpenMRS Admin UI Module up to 1.4.x. Affected is the function sendErrorMessage of the file omod/src/main/java/org/openmrs/module/adminui/page/controller/systemadmin/accounts/AccountPageController.java of the component Account Setup Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.5.0 is able to address this issue. The name of the patch is 702fbfdac7c4418f23bb5f6452482b4a88020061. It is recommended to upgrade the affected component. VDB-216918 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:admin_ui_module:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.0", "matchCriteriaId": "0B7CFC86-260A-4398-8E4D-B98FEBD22902"}]}]}], "references": [{"url": "https://github.com/openmrs/openmrs-module-adminui/commit/702fbfdac7c4418f23bb5f6452482b4a88020061", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-module-adminui/pull/57", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-module-adminui/releases/tag/1.5.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216918", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216918", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openmrs/openmrs-module-adminui/commit/702fbfdac7c4418f23bb5f6452482b4a88020061"}}