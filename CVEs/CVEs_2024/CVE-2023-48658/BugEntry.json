{"buggy_code": ["<?php\n/**\n * Application model for Cake.\n *\n * This file is application-wide model file. You can put all\n * application-wide model-related methods here.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       app.Model\n * @since         CakePHP(tm) v 0.2.9\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\n */\n\nApp::uses('Model', 'Model');\nApp::uses('LogableBehavior', 'Assets.models/behaviors');\nApp::uses('RandomTool', 'Tools');\nApp::uses('FileAccessTool', 'Tools');\nApp::uses('JsonTool', 'Tools');\nApp::uses('RedisTool', 'Tools');\nApp::uses('BetterCakeEventManager', 'Tools');\n\nclass AppModel extends Model\n{\n    /** @var PubSubTool */\n    private static $loadedPubSubTool;\n\n    /** @var KafkaPubTool */\n    private $loadedKafkaPubTool;\n\n    /** @var BackgroundJobsTool */\n    private static $loadedBackgroundJobsTool;\n\n    private $__profiler = array();\n\n    /** @var AttachmentTool|null */\n    private $attachmentTool;\n\n    /** @var Workflow|null */\n    private $Workflow;\n\n    // deprecated, use $db_changes\n    // major -> minor -> hotfix -> requires_logout\n    const OLD_DB_CHANGES = array(\n        2 => array(\n            4 => array(\n                18 => false, 19 => false, 20 => false, 25 => false, 27 => false,\n                32 => false, 33 => true, 38 => true, 39 => true, 40 => false,\n                42 => false, 44 => false, 45 => false, 49 => true, 50 => false,\n                51 => false, 52 => false, 55 => true, 56 => true, 57 => true,\n                58 => false, 59 => false, 60 => false, 61 => false, 62 => false,\n                63 => false, 64 => false, 65 => false, 66 => false, 67 => true,\n                68 => false, 69 => false, 71 => false, 72 => false, 73 => false,\n                75 => false, 77 => false, 78 => false, 79 => false, 80 => false,\n                81 => false, 82 => false, 83 => false, 84 => false, 85 => false,\n                86 => false, 87 => false\n            )\n        )\n    );\n\n    const DB_CHANGES = array(\n        1 => false, 2 => false, 3 => false, 4 => true, 5 => false, 6 => false,\n        7 => false, 8 => false, 9 => false, 10 => false, 11 => false, 12 => false,\n        13 => false, 14 => false, 15 => false, 18 => false, 19 => false, 20 => false,\n        21 => false, 22 => false, 23 => false, 24 => false, 25 => false, 26 => false,\n        27 => false, 28 => false, 29 => false, 30 => false, 31 => false, 32 => false,\n        33 => false, 34 => false, 35 => false, 36 => false, 37 => false, 38 => false,\n        39 => false, 40 => false, 41 => false, 42 => false, 43 => false, 44 => false,\n        45 => false, 46 => false, 47 => false, 48 => false, 49 => false, 50 => false,\n        51 => false, 52 => false, 53 => false, 54 => false, 55 => false, 56 => false,\n        57 => false, 58 => false, 59 => false, 60 => false, 61 => false, 62 => false,\n        63 => true, 64 => false, 65 => false, 66 => false, 67 => false, 68 => false,\n        69 => false, 70 => false, 71 => true, 72 => true, 73 => false, 74 => false,\n        75 => false, 76 => true, 77 => false, 78 => false, 79 => false, 80 => false,\n        81 => false, 82 => false, 83 => false, 84 => false, 85 => false, 86 => false,\n        87 => false, 88 => false, 89 => false, 90 => false, 91 => false, 92 => false,\n        93 => false, 94 => false, 95 => true, 96 => false, 97 => true, 98 => false,\n        99 => false, 100 => false, 101 => false, 102 => false, 103 => false, 104 => false,\n        105 => false, 106 => false, 107 => false, 108 => false, 109 => false, 110 => false,\n        111 => false, 112 => false, 113 => true, 114 => false, 115 => false\n    );\n\n    const ADVANCED_UPDATES_DESCRIPTION = array(\n        'seenOnAttributeAndObject' => array(\n            'title' => 'First seen/Last seen Attribute table',\n            'description' => 'Update the Attribute table to support first_seen and last_seen feature, with a microsecond resolution.',\n            'liveOff' => true, # should the instance be offline for users other than site_admin\n            'recommendBackup' => true, # should the update recommend backup\n            'exitOnError' => false, # should the update exit on error\n            'requirements' => 'MySQL version must be >= 5.6', # message stating the requirements necessary for the update\n            'record' => false, # should the update success be saved in the admin_table\n            // 'preUpdate' => 'seenOnAttributeAndObjectPreUpdate', # Function to execute before the update. If it throws an error, it cancels the update\n            'url' => '/servers/updateDatabase/seenOnAttributeAndObject/' # url pointing to the funcion performing the update\n        ),\n    );\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n        $this->findMethods['column'] = true;\n        if (in_array('phar', stream_get_wrappers(), true)) {\n            stream_wrapper_unregister('phar');\n        }\n    }\n\n    public function isAcceptedDatabaseError($errorMessage)\n    {\n        if ($this->isMysql()) {\n            $errorDuplicateColumn = 'SQLSTATE[42S21]: Column already exists: 1060 Duplicate column name';\n            $errorDuplicateIndex = 'SQLSTATE[42000]: Syntax error or access violation: 1061 Duplicate key name';\n            $errorDropIndex = \"/SQLSTATE\\[42000\\]: Syntax error or access violation: 1091 Can't DROP '[\\w]+'; check that column\\/key exists/\";\n            $isAccepted = substr($errorMessage, 0, strlen($errorDuplicateColumn)) === $errorDuplicateColumn ||\n                            substr($errorMessage, 0, strlen($errorDuplicateIndex)) === $errorDuplicateIndex ||\n                            preg_match($errorDropIndex, $errorMessage) !== 0;\n        } else {\n            $errorDuplicateColumn = '/ERROR:  column \"[\\w]+\" specified more than once/';\n            $errorDuplicateIndex = '/ERROR: relation \"[\\w]+\" already exists/';\n            $errorDropIndex = '/ERROR: index \"[\\w]+\" does not exist/';\n            $isAccepted = preg_match($errorDuplicateColumn, $errorMessage) !== 0 ||\n                            preg_match($errorDuplicateIndex, $errorMessage) !== 0 ||\n                            preg_match($errorDropIndex, $errorMessage) !== 0;\n        }\n        return $isAccepted;\n    }\n\n    // Generic update script\n    // add special cases where the upgrade does more than just update the DB\n    // this could become useful in the future\n    public function updateMISP($command)\n    {\n        $dbUpdateSuccess = false;\n        switch ($command) {\n            case '2.4.20':\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                //deprecated\n                //$this->ShadowAttribute = ClassRegistry::init('ShadowAttribute');\n                //$this->ShadowAttribute->upgradeToProposalCorrelation();\n                break;\n            case '2.4.25':\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $newFeeds = array(\n                    array('provider' => 'CIRCL', 'name' => 'CIRCL OSINT Feed', 'url' => 'https://www.circl.lu/doc/misp/feed-osint', 'enabled' => 0),\n                );\n                $this->__addNewFeeds($newFeeds);\n                break;\n            case '2.4.27':\n                $newFeeds = array(\n                    array('provider' => 'Botvrij.eu', 'name' => 'The Botvrij.eu Data','url' => 'https://www.botvrij.eu/data/feed-osint', 'enabled' => 0)\n                );\n                $this->__addNewFeeds($newFeeds);\n                break;\n            case '2.4.49':\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->SharingGroup = ClassRegistry::init('SharingGroup');\n                $this->SharingGroup->correctSyncedSharingGroups();\n                $this->SharingGroup->updateRoaming();\n                break;\n            case '2.4.55':\n                $dbUpdateSuccess = $this->updateDatabase('addSightings');\n                break;\n            case '2.4.66':\n                $dbUpdateSuccess = $this->updateDatabase('2.4.66');\n                $this->cleanCacheFiles();\n                $this->Sighting = Classregistry::init('Sighting');\n                $this->Sighting->addUuids();\n                break;\n            case '2.4.67':\n                $dbUpdateSuccess = $this->updateDatabase('2.4.67');\n                $this->Sighting = Classregistry::init('Sighting');\n                $this->Sighting->addUuids();\n                $this->Sighting->deleteAll(array('NOT' => array('Sighting.type' => array(0, 1, 2))));\n                break;\n            case '2.4.71':\n                $this->OrgBlocklist = Classregistry::init('OrgBlocklist');\n                $values = array(\n                    array('org_uuid' => '58d38339-7b24-4386-b4b4-4c0f950d210f', 'org_name' => 'Setec Astrononomy', 'comment' => 'default example'),\n                    array('org_uuid' => '58d38326-eda8-443a-9fa8-4e12950d210f', 'org_name' => 'Acme Finance', 'comment' => 'default example')\n                );\n                foreach ($values as $value) {\n                    $found = $this->OrgBlocklist->find('first', array('conditions' => array('org_uuid' => $value['org_uuid']), 'recursive' => -1));\n                    if (empty($found)) {\n                        $this->OrgBlocklist->create();\n                        $this->OrgBlocklist->save($value);\n                    }\n                }\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                break;\n            case '2.4.86':\n                $this->MispObject = Classregistry::init('MispObject');\n                $this->MispObject->removeOrphanedObjects();\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                break;\n            case 5:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->Feed = Classregistry::init('Feed');\n                $this->Feed->setEnableFeedCachingDefaults();\n                break;\n            case 8:\n                $this->Server = Classregistry::init('Server');\n                $this->Server->restartWorkers();\n                break;\n            case 10:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->Role = Classregistry::init('Role');\n                $this->Role->setPublishZmq();\n                break;\n            case 12:\n                $this->__forceSettings();\n                break;\n            case 23:\n                $this->__bumpReferences();\n                break;\n            case 34:\n                $this->__fixServerPullPushRules();\n                break;\n            case 38:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->__addServerPriority();\n                break;\n            case 46:\n                $dbUpdateSuccess = $this->updateDatabase('seenOnAttributeAndObject');\n                break;\n            case 48:\n                $dbUpdateSuccess = $this->__generateCorrelations();\n                break;\n            case 89:\n                $this->__retireOldCorrelationEngine();\n                $dbUpdateSuccess = true;\n                break;\n            case 90:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->Workflow = Classregistry::init('Workflow');\n                $this->Workflow->enableDefaultModules();\n                break;\n            case 91:\n                $existing_index = $this->query(\n                    \"SHOW INDEX FROM default_correlations WHERE Key_name = 'unique_correlation';\"\n                );\n                if (empty($existing_index)) {\n                    // If there are duplicate entries, the query creating the `unique_correlation` index will result in an integrity constraint violation.\n                    // The query below cleans up potential duplicates before creating the constraint.\n                    $this->removeDuplicateCorrelationEntries('default_correlations');\n                    $this->query(\n                        \"ALTER TABLE default_correlations\n                        ADD CONSTRAINT unique_correlation\n                        UNIQUE KEY(attribute_id, 1_attribute_id, value_id);\"\n                    );\n                }\n                $existing_index = $this->query(\n                    \"SHOW INDEX FROM no_acl_correlations WHERE Key_name = 'unique_correlation';\"\n                );\n                if (empty($existing_index)) {\n                    $this->removeDuplicateCorrelationEntries('no_acl_correlations');\n                    $this->query(\n                        \"ALTER TABLE no_acl_correlations\n                        ADD CONSTRAINT unique_correlation\n                        UNIQUE KEY(attribute_id, 1_attribute_id, value_id);\"\n                    );\n                }\n                $dbUpdateSuccess = true;\n                break;\n            case 96:\n                $this->removeDuplicatedUUIDs();\n                $dbUpdateSuccess = $this->updateDatabase('createUUIDsConstraints');\n                break;\n            default:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                break;\n        }\n        return $dbUpdateSuccess;\n    }\n\n    private function __addServerPriority()\n    {\n        $this->Server = ClassRegistry::init('Server');\n        $this->Server->reprioritise();\n        return true;\n    }\n\n    private function __addNewFeeds($feeds)\n    {\n        $this->Feed = ClassRegistry::init('Feed');\n        $this->Log = ClassRegistry::init('Log');\n        $feedNames = array();\n        foreach ($feeds as $feed) {\n            $feedNames[] = $feed['name'];\n        }\n        $feedNames = implode(', ', $feedNames);\n        $result = $this->Feed->addDefaultFeeds($feeds);\n        $this->Log->create();\n        $entry = array(\n            'org' => 'SYSTEM',\n            'model' => 'Server',\n            'model_id' => 0,\n            'email' => 'SYSTEM',\n            'action' => 'update_database',\n            'user_id' => 0,\n            'title' => 'Added new default feeds.'\n        );\n        if ($result) {\n            $entry['change'] = 'Feeds added: ' . $feedNames;\n        } else {\n            $entry['change'] = 'Tried adding new feeds but something went wrong.';\n        }\n        $this->Log->save($entry);\n    }\n\n    // SQL scripts for updates\n    public function updateDatabase($command)\n    {\n        $this->Log = ClassRegistry::init('Log');\n\n        $liveOff = false;\n        $exitOnError = false;\n        if (isset(self::ADVANCED_UPDATES_DESCRIPTION[$command])) {\n            $liveOff = isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['liveOff']) ? self::ADVANCED_UPDATES_DESCRIPTION[$command]['liveOff'] : $liveOff;\n            $exitOnError = isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['exitOnError']) ? self::ADVANCED_UPDATES_DESCRIPTION[$command]['exitOnError'] : $exitOnError;\n        }\n\n        $sqlArray = array();\n        $indexArray = array();\n        $clean = true;\n        switch ($command) {\n            case 'extendServerOrganizationLength':\n                $sqlArray[] = 'ALTER TABLE `servers` MODIFY COLUMN `organization` varchar(255) NOT NULL;';\n                break;\n            case 'convertLogFieldsToText':\n                $sqlArray[] = 'ALTER TABLE `logs` MODIFY COLUMN `title` text, MODIFY COLUMN `change` text;';\n                break;\n            case 'addEventBlacklists':\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `event_blacklists` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event_uuid` varchar(40) COLLATE utf8_bin NOT NULL, `created` datetime NOT NULL, PRIMARY KEY (`id`), `event_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL, `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL, `event_orgc` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                break;\n            case 'addOrgBlacklists':\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `org_blacklists` ( `id` int(11) NOT NULL AUTO_INCREMENT, `org_uuid` varchar(40) COLLATE utf8_bin NOT NULL, `created` datetime NOT NULL, PRIMARY KEY (`id`), `org_name` varchar(255) COLLATE utf8_bin NOT NULL, `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                break;\n            case 'addEventBlacklistsContext':\n                $sqlArray[] = 'ALTER TABLE  `event_blacklists` ADD  `event_orgc` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL , ADD  `event_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL, ADD `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL;';\n                break;\n            case 'addSightings':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS sightings (\n                id int(11) NOT NULL AUTO_INCREMENT,\n                attribute_id int(11) NOT NULL,\n                event_id int(11) NOT NULL,\n                org_id int(11) NOT NULL,\n                date_sighting bigint(20) NOT NULL,\n                PRIMARY KEY (id),\n                INDEX attribute_id (attribute_id),\n                INDEX event_id (event_id),\n                INDEX org_id (org_id)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n                break;\n            case 'makeAttributeUUIDsUnique':\n                $this->__dropIndex('attributes', 'uuid');\n                $sqlArray[] = 'ALTER TABLE `attributes` ADD UNIQUE (uuid);';\n                break;\n            case 'makeEventUUIDsUnique':\n                $this->__dropIndex('events', 'uuid');\n                $sqlArray[] = 'ALTER TABLE `events` ADD UNIQUE (uuid);';\n                break;\n            case 'cleanSessionTable':\n                $sqlArray[] = 'DELETE FROM cake_sessions WHERE expires < ' . time() . ';';\n                $clean = false;\n                break;\n            case 'destroyAllSessions':\n                $sqlArray[] = 'DELETE FROM cake_sessions;';\n                $clean = false;\n                break;\n            case 'addIPLogging':\n                $sqlArray[] = 'ALTER TABLE `logs` ADD  `ip` varchar(45) COLLATE utf8_bin DEFAULT NULL;';\n                break;\n            case 'addCustomAuth':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `external_auth_required` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `users` ADD `external_auth_key` text COLLATE utf8_bin;';\n                break;\n            case 'x24betaupdates':\n                $sqlArray = array();\n                $sqlArray[] = \"ALTER TABLE `shadow_attributes` ADD  `proposal_to_delete` tinyint(1) NOT NULL DEFAULT 0;\";\n\n                $sqlArray[] = 'ALTER TABLE `logs` MODIFY  `change` text COLLATE utf8_bin NOT NULL;';\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxonomies` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `namespace` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `version` int(11) NOT NULL,\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxonomy_entries` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `taxonomy_predicate_id` int(11) NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `expanded` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    KEY `taxonomy_predicate_id` (`taxonomy_predicate_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxonomy_predicates` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `taxonomy_id` int(11) NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `expanded` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    KEY `taxonomy_id` (`taxonomy_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $sqlArray[] = 'ALTER TABLE `jobs` ADD  `org` text COLLATE utf8_bin NOT NULL;';\n\n                $sqlArray[] = 'ALTER TABLE  `servers` ADD  `name` varchar(255) NOT NULL;';\n\n                $sqlArray[] = 'ALTER TABLE  `sharing_groups` ADD  `sync_user_id` INT( 11 ) NOT NULL DEFAULT \\'0\\' AFTER `org_id`;';\n\n                $sqlArray[] = 'ALTER TABLE `users` ADD  `disabled` BOOLEAN NOT NULL;';\n                $sqlArray[] = 'ALTER TABLE `users` ADD  `expiration` datetime DEFAULT NULL;';\n\n                $sqlArray[] = 'UPDATE `roles` SET `perm_template` = 1 WHERE `perm_site_admin` = 1 OR `perm_admin` = 1;';\n                $sqlArray[] = 'UPDATE `roles` SET `perm_sharing_group` = 1 WHERE `perm_site_admin` = 1 OR `perm_sync` = 1;';\n\n                //create indexes\n                break;\n            case 'indexTables':\n                $fieldsToIndex = array(\n                    'attributes' => array(array('value1', 'INDEX', '255'), array('value2', 'INDEX', '255'), array('event_id', 'INDEX'), array('sharing_group_id', 'INDEX'), array('uuid', 'INDEX')),\n                    'correlations' =>  array(array('org_id', 'INDEX'), array('event_id', 'INDEX'), array('attribute_id', 'INDEX'), array('sharing_group_id', 'INDEX'), array('1_event_id', 'INDEX'), array('1_attribute_id', 'INDEX'), array('a_sharing_group_id', 'INDEX'), array('value', 'FULLTEXT')),\n                    'events' => array(array('info', 'FULLTEXT'), array('sharing_group_id', 'INDEX'), array('org_id', 'INDEX'), array('orgc_id', 'INDEX'), array('uuid', 'INDEX')),\n                    'event_tags' => array(array('event_id', 'INDEX'), array('tag_id', 'INDEX')),\n                    'organisations' => array(array('uuid', 'INDEX'), array('name', 'FULLTEXT')),\n                    'posts' => array(array('post_id', 'INDEX'), array('thread_id', 'INDEX')),\n                    'shadow_attributes' => array(array('value1', 'INDEX', '255'), array('value2', 'INDEX', '255'), array('old_id', 'INDEX'), array('event_id', 'INDEX'), array('uuid', 'INDEX'), array('event_org_id', 'INDEX'), array('event_uuid', 'INDEX')),\n                    'sharing_groups' => array(array('org_id', 'INDEX'), array('sync_user_id', 'INDEX'), array('uuid', 'INDEX'), array('organisation_uuid', 'INDEX')),\n                    'sharing_group_orgs' => array(array('sharing_group_id', 'INDEX'), array('org_id', 'INDEX')),\n                    'sharing_group_servers' => array(array('sharing_group_id', 'INDEX'), array('server_id', 'INDEX')),\n                    'servers' => array(array('org_id', 'INDEX'), array('remote_org_id', 'INDEX')),\n                    'tags' => array(array('name', 'FULLTEXT')),\n                    'threads' => array(array('user_id', 'INDEX'), array('event_id', 'INDEX'), array('org_id', 'INDEX'), array('sharing_group_id', 'INDEX')),\n                    'users' => array(array('org_id', 'INDEX'), array('server_id', 'INDEX'), array('email', 'INDEX')),\n                );\n\n                $version = $this->query('select version();');\n                $version = $version[0][0]['version()'];\n                $version = explode('.', $version);\n                $version[0] = intval($version[0]);\n                $version[1] = intval($version[1]);\n                $downgrade = true;\n                if ($version[0] > 5 || ($version[0] == 5 && $version[1] > 5)) {\n                    $downgrade = false;\n                }\n\n                // keep the fulltext for now, we can change it later to actually use it once we require MySQL 5.6 / or if we decide to move some tables to MyISAM\n\n                foreach ($fieldsToIndex as $table => $fields) {\n                    $downgradeThis = false;\n                    $table_data = $this->query(\"SHOW TABLE STATUS WHERE Name = '\" . $table . \"'\");\n                    if ($downgrade && $table_data[0]['TABLES']['Engine'] !== 'MyISAM') {\n                        $downgradeThis = true;\n                    }\n                    foreach ($fields as $field) {\n                        $extra = '';\n                        $this->__dropIndex($table, $field[0]);\n                        if (isset($field[2])) {\n                            $extra = ' (' . $field[2] . ')';\n                        }\n                        $sqlArray[] = 'ALTER TABLE `' . $table . '` ADD ' . ($downgradeThis ? 'INDEX' : $field[1]) . ' `' . $field[0] . '` (`' . $field[0] . '`' . $extra . ');';\n                    }\n                }\n                break;\n            case 'adminTable':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `admin_settings` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `setting` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"INSERT INTO `admin_settings` (`setting`, `value`) VALUES ('db_version', '2.4.0');\";\n                break;\n            case '2.4.18':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `current_login` INT(11) DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ADD `last_login` INT(11) DEFAULT 0;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `event_delegations` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `requester_org_id` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `message` text,\n                    `distribution` tinyint(4) NOT NULL DEFAULT  '-1',\n                    `sharing_group_id` int(11),\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `event_id` (`event_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.19':\n                $sqlArray[] = \"DELETE FROM `shadow_attributes` WHERE `event_uuid` = '';\";\n                break;\n            case '2.4.20':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `shadow_attribute_correlations` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `value` text NOT NULL,\n                    `distribution` tinyint(4) NOT NULL,\n                    `a_distribution` tinyint(4) NOT NULL,\n                    `sharing_group_id` int(11),\n                    `a_sharing_group_id` int(11),\n                    `attribute_id` int(11) NOT NULL,\n                    `1_shadow_attribute_id` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `1_event_id` int(11) NOT NULL,\n                    `info` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `attribute_id` (`attribute_id`),\n                    KEY `a_sharing_group_id` (`a_sharing_group_id`),\n                    KEY `event_id` (`event_id`),\n                    KEY `1_event_id` (`event_id`),\n                    KEY `sharing_group_id` (`sharing_group_id`),\n                    KEY `1_shadow_attribute_id` (`1_shadow_attribute_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.25':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `feeds` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `provider` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `url` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `rules` text COLLATE utf8_bin NOT NULL,\n                    `enabled` BOOLEAN NOT NULL,\n                    `distribution` tinyint(4) NOT NULL,\n                    `sharing_group_id` int(11) NOT NULL,\n                    `tag_id` int(11) NOT NULL,\n                    `default` tinyint(1) NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.32':\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_tag_editor` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'UPDATE `roles` SET `perm_tag_editor` = 1 WHERE `perm_tagger` = 1;';\n                break;\n            case '2.4.33':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `force_logout` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case '2.4.38':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `warninglists` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT 'string',\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `version` int(11) NOT NULL DEFAULT 1,\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    `warninglist_entry_count` int(11) unsigned DEFAULT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `warninglist_entries` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `value` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                    `warninglist_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `warninglist_types` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `warninglist_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.39':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `certif_public` longtext COLLATE utf8_bin AFTER `gpgkey`;\";\n                $sqlArray[] = 'ALTER TABLE `logs` MODIFY COLUMN `title` text, MODIFY COLUMN `change` text;';\n                break;\n            case '2.4.40':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `favourite_tags` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `tag_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `tag_id` (`tag_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.42':\n                $sqlArray[] = \"ALTER TABLE `attributes` ADD `deleted` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case '2.4.44':\n                $sqlArray[] = \"UPDATE `servers` SET `url` = TRIM(TRAILING '/' FROM `url`);\";\n                break;\n            case '2.4.45':\n                $sqlArray[] = 'ALTER TABLE `users` CHANGE `newsread` `newsread` int(11) unsigned;';\n                $sqlArray[] = 'UPDATE `users` SET `newsread` = 0;';\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `news` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `message` text COLLATE utf8_bin NOT NULL,\n                    `title` text COLLATE utf8_bin NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `date_created` int(11) unsigned NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.49':\n                // table: users\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `server_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `autoalert` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `invited_by` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `nids_sid` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `termsaccepted` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `role_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `change_pw` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `contactalert` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `disabled` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` MODIFY `authkey` varchar(40) COLLATE utf8_bin DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `users` MODIFY `gpgkey` longtext COLLATE utf8_bin;\";\n                // table: events\n                $sqlArray[] = \"ALTER TABLE `events` ALTER COLUMN `publish_timestamp` SET DEFAULT 0;\";\n                // table: jobs\n                $sqlArray[] = \"ALTER TABLE `jobs` ALTER COLUMN `org_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `jobs` MODIFY `process_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                // table: organisations\n                $sqlArray[] = \"ALTER TABLE `organisations` ALTER COLUMN `created_by` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `organisations` MODIFY `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL;\"; // https://github.com/MISP/MISP/pull/1260\n                // table: logs\n                $sqlArray[] = \"ALTER TABLE `logs` MODIFY `title` text CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `logs` MODIFY `change` text CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `logs` MODIFY `description` text CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                // table: servers\n                $sqlArray[] = \"ALTER TABLE `servers` DROP `lastfetchedid`;\"; // git commit hash d4c393897e8666fbbf04443a97d60c508700f5b4\n                $sqlArray[] = \"ALTER TABLE `servers` MODIFY `cert_file` varchar(255) COLLATE utf8_bin DEFAULT NULL;\";\n                // table: feeds\n                $sqlArray[] = \"ALTER TABLE `feeds` ALTER COLUMN `sharing_group_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `feeds` ALTER COLUMN `tag_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `feeds` MODIFY `rules` text COLLATE utf8_bin DEFAULT NULL;\";\n                // DB changes to support https://github.com/MISP/MISP/pull/1334\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_delegate` tinyint(1) NOT NULL DEFAULT 0 AFTER `perm_publish`;\";\n                $sqlArray[] = \"UPDATE `roles` SET `perm_delegate` = 1 WHERE `perm_publish` = 1;\";\n                // DB changes to solve https://github.com/MISP/MISP/issues/1354\n                $sqlArray[] = \"ALTER TABLE `taxonomy_entries` MODIFY `expanded` text COLLATE utf8_bin;\";\n                $sqlArray[] = \"ALTER TABLE `taxonomy_predicates` MODIFY `expanded` text COLLATE utf8_bin;\";\n                // Sharing group propagate to instances freely setting\n                $sqlArray[] = \"ALTER TABLE `sharing_groups` ADD `roaming` tinyint(1) NOT NULL DEFAULT 0;\";\n                // table: shadow_attributes\n                $sqlArray[] = \"ALTER TABLE `shadow_attributes` MODIFY `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL;\";\n                // table: tasks\n                $sqlArray[] = \"ALTER TABLE `tasks` CHANGE `job_id` `process_id` varchar(32) DEFAULT NULL;\";\n                // Adding tag org restrictions\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `org_id` int(11) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `tags` ADD INDEX `org_id` (`org_id`);';\n                $this->__dropIndex('tags', 'org_id');\n                break;\n            case '2.4.50':\n                $sqlArray[] = 'ALTER TABLE `cake_sessions` ADD INDEX `expires` (`expires`);';\n                $sqlArray[] = \"ALTER TABLE `users` ADD `certif_public` longtext COLLATE utf8_bin AFTER `gpgkey`;\";\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `client_cert_file` varchar(255) COLLATE utf8_bin DEFAULT NULL;\";\n                $this->__dropIndex('cake_sessions', 'expires');\n                break;\n            case '2.4.51':\n                $sqlArray[] = 'ALTER TABLE `servers` ADD `internal` tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `roles` ADD `default_role` tinyint(1) NOT NULL DEFAULT 0;';\n                break;\n            case '2.4.52':\n                $sqlArray[] = \"ALTER TABLE feeds ADD source_format varchar(255) COLLATE utf8_bin DEFAULT 'misp';\";\n                $sqlArray[] = 'ALTER TABLE feeds ADD fixed_event tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD delta_merge tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD event_id int(11) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD publish tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD override_ids tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = \"ALTER TABLE feeds ADD settings text NOT NULL DEFAULT '';\";\n                break;\n            case '2.4.56':\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxies (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `version` varchar(255) COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxies', 'name');\n                $this->__addIndex('galaxies', 'uuid');\n                $this->__addIndex('galaxies', 'type');\n\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxy_clusters (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `tag_name` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `galaxy_id` int(11) NOT NULL,\n                    `source` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `authors` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxy_clusters', 'value', 255);\n                $this->__addIndex('galaxy_clusters', 'tag_name');\n                $this->__addIndex('galaxy_clusters', 'uuid');\n                $this->__addIndex('galaxy_clusters', 'type');\n\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxy_elements (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `galaxy_cluster_id` int(11) NOT NULL,\n                    `key` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxy_elements', 'key');\n                $this->__addIndex('galaxy_elements', 'value', 255);\n\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxy_reference (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `galaxy_cluster_id` int(11) NOT NULL,\n                    `referenced_galaxy_cluster_id` int(11) NOT NULL,\n                    `referenced_galaxy_cluster_uuid` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `referenced_galaxy_cluster_type` text COLLATE utf8_bin NOT NULL,\n                    `referenced_galaxy_cluster_value` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxy_reference', 'galaxy_cluster_id');\n                $this->__addIndex('galaxy_reference', 'referenced_galaxy_cluster_id');\n                $this->__addIndex('galaxy_reference', 'referenced_galaxy_cluster_value', 255);\n                $this->__addIndex('galaxy_reference', 'referenced_galaxy_cluster_type', 255);\n\n                break;\n            case '2.4.57':\n                $sqlArray[] = 'ALTER TABLE tags ADD hide_tag tinyint(1) NOT NULL DEFAULT 0;';\n                // new indeces to match the changes in #1766\n                $this->__dropIndex('correlations', '1_event_id');\n                $this->__addIndex('correlations', '1_event_id');\n                $this->__addIndex('warninglist_entries', 'warninglist_id');\n                break;\n            case '2.4.58':\n                $sqlArray[] = \"ALTER TABLE `events` ADD `disable_correlation` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `attributes` ADD `disable_correlation` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case '2.4.59':\n                $sqlArray[] = \"ALTER TABLE taxonomy_entries ADD colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '';\";\n                $sqlArray[] = \"ALTER TABLE taxonomy_predicates ADD colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '';\";\n                break;\n            case '2.4.60':\n                if ($this->isMysql()) {\n                    $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `attribute_tags` (\n                                `id` int(11) NOT NULL AUTO_INCREMENT,\n                                `attribute_id` int(11) NOT NULL,\n                                `event_id` int(11) NOT NULL,\n                                `tag_id` int(11) NOT NULL,\n                                PRIMARY KEY (`id`)\n                            ) ENGINE=InnoDB DEFAULT CHARSET=utf8;';\n                    $sqlArray[] = 'ALTER TABLE `attribute_tags` ADD INDEX `attribute_id` (`attribute_id`);';\n                    $sqlArray[] = 'ALTER TABLE `attribute_tags` ADD INDEX `event_id` (`event_id`);';\n                    $sqlArray[] = 'ALTER TABLE `attribute_tags` ADD INDEX `tag_id` (`tag_id`);';\n                } else {\n                    $sqlArray[] = 'CREATE TABLE IF NOT EXISTS attribute_tags (\n                                id bigserial NOT NULL,\n                                attribute_id bigint NOT NULL,\n                                event_id bigint NOT NULL,\n                                tag_id bigint NOT NULL,\n                                PRIMARY KEY (id)\n                            );';\n                    $sqlArray[] = 'CREATE INDEX idx_attribute_tags_attribute_id ON attribute_tags (attribute_id);';\n                    $sqlArray[] = 'CREATE INDEX idx_attribute_tags_event_id ON attribute_tags (event_id);';\n                    $sqlArray[] = 'CREATE INDEX idx_attribute_tags_tag_id ON attribute_tags (tag_id);';\n                }\n                break;\n            case '2.4.61':\n                $sqlArray[] = 'ALTER TABLE feeds ADD input_source varchar(255) COLLATE utf8_bin NOT NULL DEFAULT \"network\";';\n                $sqlArray[] = 'ALTER TABLE feeds ADD delete_local_file tinyint(1) DEFAULT 0;';\n                $indexArray[] = array('feeds', 'input_source');\n                break;\n            case '2.4.62':\n                $sqlArray[] = 'ALTER TABLE logs CHANGE `org` `org` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE logs CHANGE `email` `email` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE logs CHANGE `change` `change` text COLLATE utf8_bin NOT NULL DEFAULT \"\";';\n                break;\n            case '2.4.63':\n                $sqlArray[] = 'ALTER TABLE events DROP COLUMN org;';\n                $sqlArray[] = 'ALTER TABLE events DROP COLUMN orgc;';\n                $sqlArray[] = 'ALTER TABLE event_blacklists CHANGE comment comment TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci;';\n                break;\n            case '2.4.64':\n                $indexArray[] = array('feeds', 'input_source');\n                $indexArray[] = array('attributes', 'value1', 255);\n                $indexArray[] = array('attributes', 'value2', 255);\n                $indexArray[] = array('attributes', 'type');\n                $indexArray[] = array('galaxy_reference', 'galaxy_cluster_id');\n                $indexArray[] = array('galaxy_reference', 'referenced_galaxy_cluster_id');\n                $indexArray[] = array('galaxy_reference', 'referenced_galaxy_cluster_value', 255);\n                $indexArray[] = array('galaxy_reference', 'referenced_galaxy_cluster_type', 255);\n                $indexArray[] = array('correlations', '1_event_id');\n                $indexArray[] = array('warninglist_entries', 'warninglist_id');\n                $indexArray[] = array('galaxy_clusters', 'value', 255);\n                $indexArray[] = array('galaxy_clusters', 'tag_name');\n                $indexArray[] = array('galaxy_clusters', 'uuid');\n                $indexArray[] = array('galaxy_clusters', 'type');\n                $indexArray[] = array('galaxies', 'name');\n                $indexArray[] = array('galaxies', 'uuid');\n                $indexArray[] = array('galaxies', 'type');\n                break;\n            case '2.4.65':\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `enabled` `enabled` tinyint(1) DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `default` `default` tinyint(1) DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `distribution` `distribution` tinyint(4) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `sharing_group_id` `sharing_group_id` int(11) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE attributes CHANGE `comment` `comment` text COLLATE utf8_bin;';\n                break;\n            case '2.4.66':\n                $sqlArray[] = 'ALTER TABLE shadow_attributes CHANGE old_id old_id int(11) DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE sightings ADD COLUMN uuid varchar(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE sightings ADD COLUMN source varchar(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE sightings ADD COLUMN type int(11) DEFAULT 0;';\n                $indexArray[] = array('sightings', 'uuid');\n                $indexArray[] = array('sightings', 'source');\n                $indexArray[] = array('sightings', 'type');\n                $indexArray[] = array('attributes', 'category');\n                $indexArray[] = array('shadow_attributes', 'category');\n                $indexArray[] = array('shadow_attributes', 'type');\n                break;\n            case '2.4.67':\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_sighting` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'UPDATE `roles` SET `perm_sighting` = 1 WHERE `perm_add` = 1;';\n                break;\n            case '2.4.68':\n                $sqlArray[] = 'ALTER TABLE events CHANGE attribute_count attribute_count int(11) unsigned DEFAULT 0;';\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `event_blacklists` (\n                  `id` int(11) NOT NULL AUTO_INCREMENT,\n                  `event_uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                  `created` datetime NOT NULL,\n                  `event_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                  `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                  `event_orgc` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n                  PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                $indexArray[] = array('event_blacklists', 'event_uuid');\n                $indexArray[] = array('event_blacklists', 'event_orgc');\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `org_blacklists` (\n                  `id` int(11) NOT NULL AUTO_INCREMENT,\n                  `org_uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                  `created` datetime NOT NULL,\n                  `org_name` varchar(255) COLLATE utf8_bin NOT NULL,\n                  `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                  PRIMARY KEY (`id`),\n                  INDEX `org_uuid` (`org_uuid`),\n                  INDEX `org_name` (`org_name`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                $indexArray[] = array('org_blacklists', 'org_uuid');\n                $indexArray[] = array('org_blacklists', 'org_name');\n                $sqlArray[] = \"ALTER TABLE shadow_attributes CHANGE proposal_to_delete proposal_to_delete BOOLEAN DEFAULT 0\";\n                $sqlArray[] = \"ALTER TABLE taxonomy_predicates CHANGE colour colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin;\";\n                $sqlArray[] = \"ALTER TABLE taxonomy_entries CHANGE colour colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin;\";\n                break;\n            case '2.4.69':\n                $sqlArray[] = \"ALTER TABLE taxonomy_entries CHANGE colour colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin;\";\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_created bigint(20);\";\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_modified bigint(20);\";\n                break;\n            case '2.4.71':\n                $sqlArray[] = \"UPDATE attributes SET comment = '' WHERE comment is NULL;\";\n                $sqlArray[] = \"ALTER TABLE attributes CHANGE comment comment text COLLATE utf8_bin NOT NULL;\";\n                break;\n            case '2.4.72':\n                $sqlArray[] = 'ALTER TABLE feeds ADD lookup_visible tinyint(1) DEFAULT 0;';\n                break;\n            case '2.4.73':\n                $sqlArray[] = 'ALTER TABLE `servers` ADD `unpublish_event` tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `servers` ADD `publish_without_email` tinyint(1) NOT NULL DEFAULT 0;';\n                break;\n            case '2.4.75':\n                $this->__dropIndex('attributes', 'value1');\n                $this->__dropIndex('attributes', 'value2');\n                $this->__addIndex('attributes', 'value1', 255);\n                $this->__addIndex('attributes', 'value2', 255);\n                break;\n            case '2.4.77':\n                $sqlArray[] = 'ALTER TABLE `users` CHANGE `password` `password` VARCHAR(255) COLLATE utf8_bin NOT NULL;';\n                break;\n            case '2.4.78':\n                $sqlArray[] = \"ALTER TABLE galaxy_clusters ADD COLUMN version int(11) DEFAULT 0;\";\n                $this->__addIndex('galaxy_clusters', 'version');\n                $this->__addIndex('galaxy_clusters', 'galaxy_id');\n                $this->__addIndex('galaxy_elements', 'galaxy_cluster_id');\n                break;\n            case '2.4.80':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS objects (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `meta-category` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `description` text CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `template_uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `template_version` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `distribution` tinyint(4) NOT NULL DEFAULT 0,\n                    `sharing_group_id` int(11),\n                    `comment` text COLLATE utf8_bin NOT NULL,\n                    `deleted` TINYINT(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`),\n                    INDEX `template_uuid` (`template_uuid`),\n                    INDEX `template_version` (`template_version`),\n                    INDEX `meta-category` (`meta-category`),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `timestamp` (`timestamp`),\n                    INDEX `distribution` (`distribution`),\n                    INDEX `sharing_group_id` (`sharing_group_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_references (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `object_id` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `object_uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `referenced_uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `referenced_id` int(11) NOT NULL,\n                    `referenced_type` int(11) NOT NULL DEFAULT 0,\n                    `relationship_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `comment` text COLLATE utf8_bin NOT NULL,\n                    `deleted` TINYINT(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `object_uuid` (`object_uuid`),\n                  INDEX `referenced_uuid` (`referenced_uuid`),\n                  INDEX `timestamp` (`timestamp`),\n                  INDEX `object_id` (`object_id`),\n                  INDEX `referenced_id` (`referenced_id`),\n                  INDEX `relationship_type` (`relationship_type`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_relationships (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `version` int(11) NOT NULL,\n                    `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `format` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_templates (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `meta-category` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `description` text COLLATE utf8_bin,\n                    `version` int(11) NOT NULL,\n                    `requirements` text COLLATE utf8_bin,\n                    `fixed` tinyint(1) NOT NULL DEFAULT 0,\n                    `active` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `name` (`name`),\n                    INDEX `meta-category` (`meta-category`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_template_elements (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `object_template_id` int(11) NOT NULL,\n                    `object_relation` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `ui-priority` int(11) NOT NULL,\n                    `categories` text COLLATE utf8_bin,\n                    `sane_default` text COLLATE utf8_bin,\n                    `values_list` text COLLATE utf8_bin,\n                    `description` text COLLATE utf8_bin,\n                    `disable_correlation` tinyint(1) NOT NULL DEFAULT 0,\n                    `multiple` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `object_relation` (`object_relation`),\n                    INDEX `type` (`type`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = 'ALTER TABLE `logs` CHANGE `model` `model` VARCHAR(80) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL;';\n                $sqlArray[] = 'ALTER TABLE `logs` CHANGE `action` `action` VARCHAR(80) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL;';\n\n                $sqlArray[] = 'ALTER TABLE attributes ADD object_id int(11) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE attributes ADD object_relation varchar(255) COLLATE utf8_bin;';\n\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_object_template` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'UPDATE `roles` SET `perm_object_template` = 1 WHERE `perm_site_admin` = 1;';\n\n                $indexArray[] = array('attributes', 'object_id');\n                $indexArray[] = array('attributes', 'object_relation');\n                break;\n            case '2.4.81':\n                $sqlArray[] = 'ALTER TABLE `galaxy_clusters` ADD `version` INT NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `galaxies` ADD `icon` VARCHAR(255) COLLATE utf8_bin DEFAULT \"\";';\n                break;\n            case '2.4.82':\n                $sqlArray[] = \"ALTER TABLE organisations ADD restricted_to_domain text COLLATE utf8_bin;\";\n                break;\n            case '2.4.83':\n                $sqlArray[] = \"ALTER TABLE object_template_elements CHANGE `disable_correlation` `disable_correlation` text COLLATE utf8_bin;\";\n                break;\n            case '2.4.84':\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `user_id` int(11) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `tags` ADD INDEX `user_id` (`user_id`);';\n                break;\n            case '2.4.85':\n                $sqlArray[] = \"ALTER TABLE `shadow_attributes` ADD `disable_correlation` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE object_template_elements CHANGE `disable_correlation` `disable_correlation` text COLLATE utf8_bin;\";\n                // yes, this may look stupid as hell to index a boolean flag - but thanks to the stupidity of MySQL/MariaDB this will\n                // stop blocking other indexes to be used in queries where we also tests for the deleted flag.\n                $indexArray[] = array('attributes', 'deleted');\n                break;\n            case '2.4.86':\n                break;\n            case '2.4.87':\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `headers` TEXT COLLATE utf8_bin;\";\n                break;\n            case 1:\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `user_id` int(11) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `tags` ADD INDEX `user_id` (`user_id`);';\n                break;\n            case 2:\n            // rerun missing db entries\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_created bigint(20);\";\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_modified bigint(20);\";\n                break;\n            case 3:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `fuzzy_correlate_ssdeep` (\n                                            `id` int(11) NOT NULL AUTO_INCREMENT,\n                                            `chunk` varchar(12) NOT NULL,\n                                            `attribute_id` int(11) NOT NULL,\n                                            PRIMARY KEY (`id`)\n                                            ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $this->__addIndex('fuzzy_correlate_ssdeep', 'chunk');\n                $this->__addIndex('fuzzy_correlate_ssdeep', 'attribute_id');\n                break;\n            case 4:\n                $sqlArray[] = 'ALTER TABLE `roles` ADD `memory_limit` VARCHAR(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE `roles` ADD `max_execution_time` VARCHAR(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `restricted_to_site_admin` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 5:\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `caching_enabled` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 6:\n                $sqlArray[] = \"ALTER TABLE `events` ADD `extends_uuid` varchar(40) COLLATE utf8_bin DEFAULT '';\";\n                $indexArray[] = array('events', 'extends_uuid');\n                break;\n            case 7:\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `noticelists` (\n                        `id` int(11) NOT NULL AUTO_INCREMENT,\n                        `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n                        `expanded_name` text COLLATE utf8_unicode_ci NOT NULL,\n                        `ref` text COLLATE utf8_unicode_ci,\n                        `geographical_area` varchar(255) COLLATE utf8_unicode_ci,\n                        `version` int(11) NOT NULL DEFAULT 1,\n                        `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                        PRIMARY KEY (`id`),\n                        INDEX `name` (`name`),\n                        INDEX `geographical_area` (`geographical_area`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;';\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `noticelist_entries` (\n                        `id` int(11) NOT NULL AUTO_INCREMENT,\n                        `noticelist_id` int(11) NOT NULL,\n                        `data` text COLLATE utf8_unicode_ci NOT NULL,\n                        PRIMARY KEY (`id`),\n                        INDEX `noticelist_id` (`noticelist_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;';\n            break;\n            case 9:\n                $sqlArray[] = 'ALTER TABLE galaxies ADD namespace varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT \"misp\";';\n                $indexArray[] = array('galaxies', 'namespace');\n                break;\n            case 10:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_publish_zmq` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 11:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_locks (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `event_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 12:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `skip_proxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 13:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_graph (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `event_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `network_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `network_json` MEDIUMTEXT NOT NULL,\n                    `preview_img` MEDIUMTEXT,\n                    PRIMARY KEY (id),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 14:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `user_settings` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `setting` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    INDEX `setting` (`setting`),\n                    INDEX `user_id` (`user_id`),\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 15:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_graph (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `event_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `network_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `network_json` MEDIUMTEXT NOT NULL,\n                    `preview_img` MEDIUMTEXT,\n                    PRIMARY KEY (id),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 18:\n                $sqlArray[] = 'ALTER TABLE `taxonomy_predicates` ADD COLUMN description text CHARACTER SET UTF8 collate utf8_bin;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_entries` ADD COLUMN description text CHARACTER SET UTF8 collate utf8_bin;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_predicates` ADD COLUMN exclusive tinyint(1) DEFAULT 0;';\n                break;\n            case 19:\n                $sqlArray[] = 'ALTER TABLE `taxonomies` ADD COLUMN exclusive tinyint(1) DEFAULT 0;';\n                break;\n            case 20:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `skip_proxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 21:\n                $sqlArray[] = 'ALTER TABLE `tags` ADD COLUMN numerical_value int(11) NULL;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_predicates` ADD COLUMN numerical_value int(11) NULL;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_entries` ADD COLUMN numerical_value int(11) NULL;';\n                break;\n            case 22:\n                $sqlArray[] = 'ALTER TABLE `object_references` MODIFY `deleted` tinyint(1) NOT NULL default 0;';\n                break;\n            case 24:\n                $this->GalaxyCluster = ClassRegistry::init('GalaxyCluster');\n                if (empty($this->GalaxyCluster->schema('collection_uuid'))) {\n                    $sqlArray[] = 'ALTER TABLE `galaxy_clusters` CHANGE `uuid` `collection_uuid` varchar(255) COLLATE utf8_bin NOT NULL;';\n                    $sqlArray[] = 'ALTER TABLE `galaxy_clusters` ADD COLUMN `uuid` varchar(255) COLLATE utf8_bin NOT NULL default \\'\\';';\n                }\n                break;\n            case 25:\n                $this->__dropIndex('galaxy_clusters', 'uuid');\n                $this->__addIndex('galaxy_clusters', 'uuid');\n                $this->__addIndex('galaxy_clusters', 'collection_uuid');\n                break;\n            case 26:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS tag_collections (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n                    `description` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                    `all_orgs` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS tag_collection_tags (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `tag_collection_id` int(11) NOT NULL,\n                    `tag_id` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `uuid` (`tag_collection_id`),\n                    INDEX `user_id` (`tag_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 27:\n                $sqlArray[] = 'ALTER TABLE `tags` CHANGE `org_id` `org_id` int(11) NOT NULL DEFAULT 0;';\n                break;\n            case 28:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `caching_enabled` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 29:\n                $sqlArray[] = \"ALTER TABLE `galaxies` ADD `kill_chain_order` text NOT NULL;\";\n                break;\n            case 30:\n                $sqlArray[] = \"ALTER TABLE `galaxies` MODIFY COLUMN `kill_chain_order` text\";\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `force_to_ids` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 31:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `rest_client_histories` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `headers` text,\n                    `body` text,\n                    `url` text,\n                    `http_method` varchar(255),\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `use_full_path` tinyint(1) DEFAULT 0,\n                    `show_result` tinyint(1) DEFAULT 0,\n                    `skip_ssl` tinyint(1) DEFAULT 0,\n                    `outcome` int(11) NOT NULL,\n                    `bookmark` tinyint(1) NOT NULL DEFAUlT 0,\n                    `bookmark_name` varchar(255) NULL DEFAULT '',\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `user_id` (`user_id`),\n                    KEY `timestamp` (`timestamp`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 32:\n                $sqlArray[] = \"ALTER TABLE `taxonomies` ADD `required` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 33:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_publish_kafka` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 35:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `notification_logs` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `type` (`type`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n                    break;\n            case 36:\n                $sqlArray[] = \"ALTER TABLE `event_tags` ADD `local` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `attribute_tags` ADD `local` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 37:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS decaying_models (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `parameters` text,\n                    `attribute_types` text,\n                    `description` text,\n                    `org_id` int(11),\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    `all_orgs` tinyint(1) NOT NULL DEFAULT 1,\n                    `ref` text COLLATE utf8_unicode_ci,\n                    `formula` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `version` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `default` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `name` (`name`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `enabled` (`enabled`),\n                    INDEX `all_orgs` (`all_orgs`),\n                    INDEX `version` (`version`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS decaying_model_mappings (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `attribute_type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `model_id` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `model_id` (`model_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_decaying` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"UPDATE `roles` SET `perm_decaying`=1 WHERE `perm_sighting`=1;\";\n                break;\n            case 38:\n                $sqlArray[] = \"ALTER TABLE servers ADD  priority int(11) NOT NULL DEFAULT 0;\";\n                $indexArray[] = array('servers', 'priority');\n                break;\n            case 39:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS user_settings (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `setting` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text,\n                    `user_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `key` (`key`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 40:\n                $sqlArray[] = \"ALTER TABLE `user_settings` ADD `timestamp` int(11) NOT NULL;\";\n                $indexArray[] = array('user_settings', 'timestamp');\n                break;\n            case 41:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `enforce_rate_limit` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `rate_limit_count` int(11) NOT NULL DEFAULT 0;\";\n                break;\n            case 42:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS sightingdbs (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) NOT NULL,\n                    `description` text,\n                    `owner` varchar(255) DEFAULT '',\n                    `host` varchar(255) DEFAULT 'http://localhost',\n                    `port` int(11) DEFAULT 9999,\n                    `timestamp` int(11) NOT NULL,\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    `skip_proxy` tinyint(1) NOT NULL DEFAULT 0,\n                    `ssl_skip_verification` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`),\n                    INDEX `owner` (`owner`),\n                    INDEX `host` (`host`),\n                    INDEX `port` (`port`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS sightingdb_orgs (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `sightingdb_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `sightingdb_id` (`sightingdb_id`),\n                    INDEX `org_id` (`org_id`)\n                ) ENGINE=InnoDB;\";\n                break;\n            case 43:\n                $sqlArray[] = \"ALTER TABLE sightingdbs ADD namespace varchar(255) DEFAULT '';\";\n                break;\n            case 44:\n                $sqlArray[] = \"ALTER TABLE object_template_elements CHANGE `disable_correlation` `disable_correlation` tinyint(1);\";\n                break;\n            case 45:\n                $sqlArray[] = \"ALTER TABLE `events` ADD `sighting_timestamp` int(11) NOT NULL DEFAULT 0 AFTER `publish_timestamp`;\";\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `push_sightings` tinyint(1) NOT NULL DEFAULT 0 AFTER `pull`;\";\n                break;\n            case 47:\n                $this->__addIndex('tags', 'numerical_value');\n                $this->__addIndex('taxonomy_predicates', 'numerical_value');\n                $this->__addIndex('taxonomy_entries', 'numerical_value');\n                break;\n            case 49:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS dashboards (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `name` varchar(191) NOT NULL,\n                    `description` text,\n                    `default` tinyint(1) NOT NULL DEFAULT 0,\n                    `selectable` tinyint(1) NOT NULL DEFAULT 0,\n                    `user_id` int(11) NOT NULL DEFAULT 0,\n                    `restrict_to_org_id` int(11) NOT NULL DEFAULT 0,\n                    `restrict_to_role_id` int(11) NOT NULL DEFAULT 0,\n                    `restrict_to_permission_flag` varchar(191) NOT NULL DEFAULT '',\n                    `value` text,\n                    `timestamp` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `restrict_to_org_id` (`restrict_to_org_id`),\n                    INDEX `restrict_to_permission_flag` (`restrict_to_permission_flag`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 50:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS inbox (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `title` varchar(191) NOT NULL,\n                    `type` varchar(191) NOT NULL,\n                    `ip` varchar(191) NOT NULL,\n                    `user_agent` text,\n                    `user_agent_sha256` varchar(64) NOT NULL,\n                    `comment` text,\n                    `deleted` tinyint(1) NOT NULL DEFAULT 0,\n                    `timestamp` int(11) NOT NULL,\n                    `store_as_file` tinyint(1) NOT NULL DEFAULT 0,\n                    `data` longtext,\n                    PRIMARY KEY (id),\n                    INDEX `title` (`title`),\n                    INDEX `type` (`type`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `user_agent_sha256` (`user_agent_sha256`),\n                    INDEX `ip` (`ip`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 51:\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `orgc_id` int(11) NOT NULL DEFAULT 0\";\n                $indexArray[] = array('feeds', 'orgc_id');\n                break;\n            case 52:\n                if (!empty($this->query(\"SHOW COLUMNS FROM `admin_settings` LIKE 'key';\"))) {\n                    $sqlArray[] = \"ALTER TABLE admin_settings CHANGE `key` `setting` varchar(255) COLLATE utf8_bin NOT NULL;\";\n                    $indexArray[] = array('admin_settings', 'setting');\n                }\n                break;\n            case 53:\n                if (!empty($this->query(\"SHOW COLUMNS FROM `user_settings` LIKE 'key';\"))) {\n                    $sqlArray[] = \"ALTER TABLE user_settings CHANGE `key` `setting` varchar(255) COLLATE utf8_bin NOT NULL;\";\n                    $indexArray[] = array('user_settings', 'setting');\n                }\n                break;\n            case 54:\n                $sqlArray[] = \"ALTER TABLE `sightingdbs` MODIFY `timestamp` int(11) NOT NULL DEFAULT 0;\";\n                break;\n            case 55:\n                // index is not used in any SQL query\n                $this->__dropIndex('correlations', 'value');\n                // these index can be theoretically used, but probably just in very rare occasion\n                $this->__dropIndex('correlations', 'org_id');\n                $this->__dropIndex('correlations', 'sharing_group_id');\n                $this->__dropIndex('correlations', 'a_sharing_group_id');\n                break;\n            case 56:\n                //rename tables\n                $sqlArray[] = \"RENAME TABLE `org_blacklists` TO `org_blocklists`;\";\n                $sqlArray[] = \"RENAME TABLE `event_blacklists` TO `event_blocklists`;\";\n                $sqlArray[] = \"RENAME TABLE `whitelist` TO `allowedlist`;\";\n                break;\n            case 57:\n                $sqlArray[] = sprintf(\"INSERT INTO `admin_settings` (`setting`, `value`) VALUES ('fix_login', %s);\", time());\n                break;\n            case 58:\n                $sqlArray[] = \"ALTER TABLE `warninglists` MODIFY COLUMN `warninglist_entry_count` int(11) unsigned NOT NULL DEFAULT 0;\";\n                break;\n            case 59:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_reports (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                    `event_id` int(11) NOT NULL,\n                    `name` varchar(255) NOT NULL,\n                    `content` text,\n                    `distribution` tinyint(4) NOT NULL DEFAULT 0,\n                    `sharing_group_id` int(11),\n                    `timestamp` int(11) NOT NULL,\n                    `deleted` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    CONSTRAINT u_uuid UNIQUE (uuid),\n                    INDEX `name` (`name`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 60:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `attachment_scans` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `type` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `attribute_id` int(11) NOT NULL,\n                    `infected` tinyint(1) NOT NULL,\n                    `malware_name`  varchar(191) NULL,\n                    `timestamp` int(11) NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `index` (`type`, `attribute_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 61:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `auth_keys` (\n                    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8mb4_unicode_ci NOT NULL,\n                    `authkey` varchar(72) CHARACTER SET ascii DEFAULT NULL,\n                    `authkey_start` varchar(4) CHARACTER SET ascii DEFAULT NULL,\n                    `authkey_end` varchar(4) CHARACTER SET ascii DEFAULT NULL,\n                    `created` int(10) unsigned NOT NULL,\n                    `expiration` int(10) unsigned NOT NULL,\n                    `user_id` int(10) unsigned NOT NULL,\n                    `comment` text COLLATE utf8mb4_unicode_ci,\n                    PRIMARY KEY (`id`),\n                    KEY `authkey_start` (`authkey_start`),\n                    KEY `authkey_end` (`authkey_end`),\n                    KEY `created` (`created`),\n                    KEY `expiration` (`expiration`),\n                    KEY `user_id` (`user_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 62:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `authkey` varchar(72) CHARACTER SET ascii NOT NULL\";\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `authkey_start` varchar(4) CHARACTER SET ascii NOT NULL\";\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `authkey_end` varchar(4) CHARACTER SET ascii NOT NULL\";\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `comment` text COLLATE utf8mb4_unicode_ci\";\n                $sqlArray[] = \"ALTER TABLE `attachment_scans` MODIFY COLUMN `malware_name` varchar(191) NULL\";\n                break;\n            case 63:\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `distribution` tinyint(4) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `sharing_group_id` int(11);\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `org_id` int(11) NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `orgc_id` int(11) NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `default` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `locked` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `extends_uuid` varchar(40) COLLATE utf8_bin DEFAULT '';\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `extends_version` int(11) DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `published` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `deleted` TINYINT(1) NOT NULL DEFAULT 0\";\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_galaxy_editor` tinyint(1) NOT NULL DEFAULT 0;\";\n\n                $sqlArray[] = \"UPDATE `roles` SET `perm_galaxy_editor`=1 WHERE `perm_tag_editor`=1;\";\n                $sqlArray[] = \"UPDATE `galaxy_clusters` SET `distribution`=3, `default`=1 WHERE `org_id`=0;\";\n\n                $sqlArray[] = \"ALTER TABLE `galaxy_reference` RENAME `galaxy_cluster_relations`;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `galaxy_cluster_uuid` varchar(40) COLLATE utf8_bin NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `distribution` tinyint(4) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `sharing_group_id` int(11);\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `default` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` DROP COLUMN `referenced_galaxy_cluster_value`;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `galaxy_cluster_relation_tags` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `galaxy_cluster_relation_id` int(11) NOT NULL,\n                    `tag_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `is_galaxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `is_custom_galaxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"UPDATE `tags` SET `is_galaxy`=1 WHERE `name` LIKE 'misp-galaxy:%';\";\n                $sqlArray[] = \"UPDATE `tags` SET `is_custom_galaxy`=1 WHERE `name` REGEXP '^misp-galaxy:[^:=\\\"]+=\\\"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\\"$';\";\n\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `push_galaxy_clusters` tinyint(1) NOT NULL DEFAULT 0 AFTER `push_sightings`;\";\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `pull_galaxy_clusters` tinyint(1) NOT NULL DEFAULT 0 AFTER `push_galaxy_clusters`;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `galaxy_cluster_blocklists` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `cluster_uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `created` datetime NOT NULL,\n                    `cluster_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                    `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `cluster_orgc` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $indexArray[] = array('galaxy_clusters', 'org_id');\n                $indexArray[] = array('galaxy_clusters', 'orgc_id');\n                $indexArray[] = array('galaxy_clusters', 'sharing_group_id');\n                $indexArray[] = array('galaxy_clusters', 'extends_uuid');\n                $indexArray[] = array('galaxy_clusters', 'extends_version');\n                $indexArray[] = array('galaxy_clusters', 'default');\n                $indexArray[] = array('galaxy_cluster_relations', 'galaxy_cluster_uuid');\n                $indexArray[] = array('galaxy_cluster_relations', 'sharing_group_id');\n                $indexArray[] = array('galaxy_cluster_relations', 'default');\n                $indexArray[] = array('galaxy_cluster_relation_tags', 'galaxy_cluster_relation_id');\n                $indexArray[] = array('galaxy_cluster_relation_tags', 'tag_id');\n                $indexArray[] = array('galaxy_cluster_blocklists', 'cluster_uuid');\n                $indexArray[] = array('galaxy_cluster_blocklists', 'cluster_orgc');\n                break;\n            case 64:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `cerebrates` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(191) NOT NULL,\n                    `url` varchar(255) NOT NULL,\n                    `authkey` varchar(40) CHARACTER SET ascii COLLATE ascii_general_ci NULL,\n                    `open` tinyint(1) DEFAULT 0,\n                    `org_id` int(11) NOT NULL,\n                    `pull_orgs` tinyint(1) DEFAULT 0,\n                    `pull_sharing_groups` tinyint(1) DEFAULT 0,\n                    `self_signed` tinyint(1) DEFAULT 0,\n                    `cert_file` varchar(255) DEFAULT NULL,\n                    `client_cert_file` varchar(255) DEFAULT NULL,\n                    `internal` tinyint(1) NOT NULL DEFAULT 0,\n                    `skip_proxy` tinyint(1) NOT NULL DEFAULT 0,\n                    `description` text,\n                    PRIMARY KEY (`id`),\n                    KEY `url` (`url`),\n                    KEY `org_id` (`org_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 65:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `correlation_exclusions` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `value` text NOT NULL,\n                    `from_json` tinyint(1) default 0,\n                    PRIMARY KEY (`id`),\n                    UNIQUE INDEX `value` (`value`(191))\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 66:\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` MODIFY COLUMN `tag_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '';\";\n                $indexArray[] = ['event_reports', 'event_id'];\n                break;\n            case 67:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` ADD `allowed_ips` text DEFAULT NULL;\";\n                break;\n            case 68:\n                $sqlArray[] = \"ALTER TABLE `correlation_exclusions` ADD `comment` text DEFAULT NULL;\";\n                break;\n            case 69:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `audit_logs` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `created` datetime NOT NULL,\n                      `user_id` int(11) NOT NULL,\n                      `org_id` int(11) NOT NULL,\n                      `authkey_id` int(11) DEFAULT NULL,\n                      `ip` varbinary(16) DEFAULT NULL,\n                      `request_type` tinyint NOT NULL,\n                      `request_id` varchar(255) DEFAULT NULL,\n                      `action` varchar(20) NOT NULL,\n                      `model` varchar(80) NOT NULL,\n                      `model_id` int(11) NOT NULL,\n                      `model_title` text DEFAULT NULL,\n                      `event_id` int(11) NULL,\n                      `change` blob,\n                      PRIMARY KEY (`id`),\n                      INDEX `event_id` (`event_id`),\n                      INDEX `model_id` (`model_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 70:\n                $sqlArray[] = \"ALTER TABLE `galaxies` ADD `enabled` tinyint(1) NOT NULL DEFAULT 1 AFTER `namespace`;\";\n                break;\n            case 71:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_warninglist` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `warninglist_entries` ADD `comment` text DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `warninglists` ADD `default` tinyint(1) NOT NULL DEFAULT 1, ADD `category` varchar(20) NOT NULL DEFAULT 'false_positive', DROP COLUMN `warninglist_entry_count`\";\n                break;\n            case 72:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` ADD `read_only` tinyint(1) NOT NULL DEFAULT 0 AFTER `expiration`;\";\n                break;\n            case 73:\n                $this->__dropIndex('user_settings', 'timestamp'); // index is not used\n                $sqlArray[] = \"ALTER TABLE `user_settings` ADD UNIQUE INDEX `unique_setting` (`user_id`, `setting`)\";\n                break;\n            case 74:\n                $sqlArray[] = \"ALTER TABLE `users` MODIFY COLUMN `change_pw` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 75:\n                $this->__addIndex('object_references', 'event_id');\n                $this->__dropIndex('object_references', 'timestamp');\n                $this->__dropIndex('object_references', 'source_uuid');\n                $this->__dropIndex('object_references', 'relationship_type');\n                $this->__dropIndex('object_references', 'referenced_uuid');\n                break;\n            case 76:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `system_settings` (\n                      `setting` varchar(255) NOT NULL,\n                      `value` blob NOT NULL,\n                      PRIMARY KEY (`setting`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                $sqlArray[] = \"ALTER TABLE `servers` MODIFY COLUMN `authkey` VARBINARY(255) NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `cerebrates` MODIFY COLUMN `authkey` VARBINARY(255) NOT NULL;\";\n                break;\n            case 77:\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `local_only` tinyint(1) NOT NULL DEFAULT 0 AFTER `is_custom_galaxy`;\";\n                $sqlArray[] = \"ALTER TABLE `galaxies` ADD `local_only` tinyint(1) NOT NULL DEFAULT 0 AFTER `enabled`;\";\n                break;\n            case 78:\n                $sqlArray[] = \"ALTER TABLE `jobs` MODIFY COLUMN `process_id` varchar(36) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                break;\n            case 79:\n                $sqlArray[] = \"ALTER TABLE `users` ADD `sub` varchar(255) NULL DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `users` ADD UNIQUE INDEX `sub` (`sub`);\";\n                break;\n            case 80:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `sharing_group_blueprints` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `user_id` int(11) NOT NULL,\n                      `org_id` int(11) NOT NULL,\n                      `sharing_group_id` int(11),\n                      `rules` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `org_id` (`org_id`),\n                      INDEX `sharing_group_id` (`sharing_group_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 81:\n                $fields = ['nationality', 'sector', 'type', 'name'];\n                foreach ($fields as $field) {\n                    $sqlArray[] = sprintf(\"UPDATE organisations SET %s = '' WHERE %s IS NULL;\", $field, $field);\n                    $sqlArray[] = sprintf(\"ALTER table organisations MODIFY %s varchar(255) NOT NULL DEFAULT '';\", $field);\n                }\n                break;\n            case 82:\n                $sqlArray[] = sprintf(\"ALTER table organisations MODIFY description text;\");\n                break;\n            case 83:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `sharing_group_blueprints` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `user_id` int(11) NOT NULL,\n                      `org_id` int(11) NOT NULL,\n                      `sharing_group_id` int(11),\n                      `rules` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `org_id` (`org_id`),\n                      INDEX `sharing_group_id` (`sharing_group_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 84:\n                $sqlArray[] = sprintf(\"ALTER table events add `protected` tinyint(1);\");\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `cryptographic_keys` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                      `type` varchar(40) COLLATE utf8_bin NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `parent_id` int(11) NOT NULL,\n                      `parent_type` varchar(40) COLLATE utf8_bin NOT NULL,\n                      `key_data` text,\n                      `revoked` tinyint(1) NOT NULL DEFAULT 0,\n                      `fingerprint` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `type` (`type`),\n                      INDEX `parent_id` (`parent_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 85:\n                $this->__addIndex('cryptographic_keys', 'parent_type');\n                $this->__addIndex('cryptographic_keys', 'fingerprint');\n                break;\n            case 86:\n                $this->__addIndex('attributes', 'timestamp');\n                break;\n            case 87:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `no_acl_correlations` (\n                    `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                    `attribute_id` int(10) UNSIGNED NOT NULL,\n                    `1_attribute_id` int(10) UNSIGNED NOT NULL,\n                    `event_id` int(10) UNSIGNED NOT NULL,\n                    `1_event_id` int(10) UNSIGNED NOT NULL,\n                    `value_id` int(10) UNSIGNED NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `1_event_id` (`1_event_id`),\n                    INDEX `attribute_id` (`attribute_id`),\n                    INDEX `1_attribute_id` (`1_attribute_id`),\n                    INDEX `value_id` (`value_id`)\n                  ) ENGINE=InnoDB;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `default_correlations` (\n                    `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                    `attribute_id` int(10) UNSIGNED NOT NULL,\n                    `object_id` int(10) UNSIGNED NOT NULL,\n                    `event_id` int(10) UNSIGNED NOT NULL,\n                    `org_id` int(10) UNSIGNED NOT NULL,\n                    `distribution` tinyint(4) NOT NULL,\n                    `object_distribution` tinyint(4) NOT NULL,\n                    `event_distribution` tinyint(4) NOT NULL,\n                    `sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `object_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `event_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `1_attribute_id` int(10) UNSIGNED NOT NULL,\n                    `1_object_id` int(10) UNSIGNED NOT NULL,\n                    `1_event_id` int(10) UNSIGNED NOT NULL,\n                    `1_org_id` int(10) UNSIGNED NOT NULL,\n                    `1_distribution` tinyint(4) NOT NULL,\n                    `1_object_distribution` tinyint(4) NOT NULL,\n                    `1_event_distribution` tinyint(4) NOT NULL,\n                    `1_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `1_object_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `1_event_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `value_id` int(10) UNSIGNED NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `attribute_id` (`attribute_id`),\n                    INDEX `object_id` (`object_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `distribution` (`distribution`),\n                    INDEX `object_distribution` (`object_distribution`),\n                    INDEX `event_distribution` (`event_distribution`),\n                    INDEX `sharing_group_id` (`sharing_group_id`),\n                    INDEX `object_sharing_group_id` (`object_sharing_group_id`),\n                    INDEX `event_sharing_group_id` (`event_sharing_group_id`),\n                    INDEX `1_event_id` (`1_event_id`),\n                    INDEX `1_attribute_id` (`1_attribute_id`),\n                    INDEX `1_object_id` (`1_object_id`),\n                    INDEX `1_org_id` (`1_org_id`),\n                    INDEX `1_distribution` (`1_distribution`),\n                    INDEX `1_object_distribution` (`1_object_distribution`),\n                    INDEX `1_event_distribution` (`1_event_distribution`),\n                    INDEX `1_sharing_group_id` (`1_sharing_group_id`),\n                    INDEX `1_object_sharing_group_id` (`1_object_sharing_group_id`),\n                    INDEX `1_event_sharing_group_id` (`1_event_sharing_group_id`),\n                    INDEX `value_id` (`value_id`)\n                  ) ENGINE=InnoDB;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `correlation_values` (\n                    `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                    `value` varchar(191) NOT NULL,\n                    PRIMARY KEY (`id`),\n                    UNIQUE KEY `value` (`value`(191))\n                  ) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `over_correlating_values` (\n                `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                `value` text,\n                `occurrence` int(10) UNSIGNED NULL,\n                PRIMARY KEY (`id`),\n                UNIQUE KEY `value` (`value`(191)),\n                INDEX `occurrence` (`occurrence`)\n                ) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 88:\n                $sqlArray[] = 'ALTER TABLE `users` ADD `external_auth_required` tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `users` ADD `external_auth_key` text COLLATE utf8_bin;';\n                break;\n            case 90:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `workflows` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `description` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                      `counter` int(11) NOT NULL DEFAULT 0,\n                      `trigger_id` varchar(191) COLLATE utf8_bin NOT NULL,\n                      `debug_enabled` tinyint(1) NOT NULL DEFAULT 0,\n                      `data` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `timestamp` (`timestamp`),\n                      INDEX `trigger_id` (`trigger_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `workflow_blueprints` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `description` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `default` tinyint(1) NOT NULL DEFAULT 0,\n                      `data` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `timestamp` (`timestamp`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                    break;\n            case 92:\n                $sqlArray[] = \"ALTER TABLE users ADD `last_api_access` INT(11) DEFAULT 0;\";\n                break;\n            case 93:\n                $this->__dropIndex('default_correlations', 'distribution');\n                $this->__dropIndex('default_correlations', 'object_distribution');\n                $this->__dropIndex('default_correlations', 'event_distribution');\n                $this->__dropIndex('default_correlations', 'sharing_group_id');\n                $this->__dropIndex('default_correlations', 'object_sharing_group_id');\n                $this->__dropIndex('default_correlations', 'event_sharing_group_id');\n                $this->__dropIndex('default_correlations', 'org_id');\n                $this->__dropIndex('default_correlations', '1_distribution');\n                $this->__dropIndex('default_correlations', '1_object_distribution');\n                $this->__dropIndex('default_correlations', '1_event_distribution');\n                $this->__dropIndex('default_correlations', '1_sharing_group_id');\n                $this->__dropIndex('default_correlations', '1_object_sharing_group_id');\n                $this->__dropIndex('default_correlations', '1_event_sharing_group_id');\n                $this->__dropIndex('default_correlations', '1_org_id');\n                break;\n            case 94:\n                $sqlArray[] = \"UPDATE `over_correlating_values` SET `value` = SUBSTR(`value`, 1, 191);\"; // truncate then migrate\n                $sqlArray[] = \"ALTER TABLE `over_correlating_values` MODIFY `value` varchar(191) NOT NULL;\";\n                break;\n            case 95:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `remove_missing_tags` tinyint(1) NOT NULL DEFAULT 0 AFTER `skip_proxy`;\";\n                break;\n            case 97:\n                $sqlArray[] = \"ALTER TABLE `users`\n                    ADD COLUMN `notification_daily`     tinyint(1) NOT NULL DEFAULT 0,\n                    ADD COLUMN `notification_weekly`    tinyint(1) NOT NULL DEFAULT 0,\n                    ADD COLUMN `notification_monthly`   tinyint(1) NOT NULL DEFAULT 0\n                ;\";\n                break;\n            case 98:\n                $this->__addIndex('object_template_elements', 'object_template_id');\n                break;\n            case 99: \n                $sqlArray[] = \"ALTER TABLE `event_tags` ADD `relationship_type` varchar(191) NULL DEFAULT '';\";\n                $sqlArray[] = \"ALTER TABLE `attribute_tags` ADD `relationship_type` varchar(191) NULL DEFAULT '';\";\n                break;\n            case 100:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `access_logs` (\n                  `id` int(11) NOT NULL AUTO_INCREMENT,\n                  `created` datetime(4) NOT NULL,\n                  `user_id` int(11) NOT NULL,\n                  `org_id` int(11) NOT NULL,\n                  `authkey_id` int(11) DEFAULT NULL,\n                  `ip` varbinary(16) DEFAULT NULL,\n                  `request_method` tinyint NOT NULL,\n                  `user_agent` varchar(255) DEFAULT NULL,\n                  `request_id` varchar(255) DEFAULT NULL,\n                  `controller` varchar(20) NOT NULL,\n                  `action` varchar(20) NOT NULL,\n                  `url` varchar(255) NOT NULL,\n                  `request` blob,\n                  `response_code` smallint NOT NULL,  \n                  `memory_usage` int(11) NOT NULL,\n                  `duration` int(11) NOT NULL,\n                  `query_count` int(11) NOT NULL,\n                  PRIMARY KEY (`id`),\n                  INDEX `user_id` (`user_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 101:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxii_servers` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                    `name` varchar(191) NOT NULL,\n                    `owner` varchar(191) NOT NULL,\n                    `baseurl` varchar(191) NOT NULL,\n                    `api_root` varchar(191) NOT NULL DEFAULT 0,\n                    `description` text,\n                    `filters` text,\n                    `api_key` varchar(255)COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `name` (`name`),\n                    INDEX `baseurl` (`baseurl`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 102:\n                $sqlArray[] = \"UPDATE roles SET perm_audit = 1;\";\n                break;\n            case 103:\n                $sqlArray[] = \"ALTER TABLE `taxonomies` ADD `highlighted` tinyint(1) DEFAULT 0;\";\n                break;\n            case 104:\n                $sqlArray[] = \"ALTER TABLE `access_logs` ADD `query_log` blob DEFAULT NULL\";\n                break;\n            case 105:\n                // set a default role if there is none\n                if (!$this->AdminSetting->getSetting('default_role')) {\n                    $role = ClassRegistry::init('Role')->findByName('User');\n                    if ($role) {\n                        $sqlArray[] = \"INSERT INTO `admin_settings` (setting, value) VALUES ('default_role', '\".$role['Role']['id'].\"');\";\n                    } else {\n                        // there is no role called User, do nothing\n                    }\n                }\n                break;\n            case 106:\n                $sqlArray[] = \"ALTER TABLE `taxii_servers` MODIFY `baseurl` varchar(191) NOT NULL;\";\n                break;\n            case 107:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` ADD `unique_ips` text COLLATE utf8mb4_unicode_ci\";\n                break;\n            case 108:\n                $sqlArray[] = \"ALTER TABLE `workflows` MODIFY `data` LONGTEXT;\";\n                break;\n            case 109:\n                $sqlArray[] = \"UPDATE `over_correlating_values` SET `value` = LOWER(`value`) COLLATE utf8mb4_unicode_ci;\";\n                break;\n            case 110:\n                $sqlArray[] = \"ALTER TABLE `users` ADD `totp` varchar(255) DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `users` ADD `hotp_counter` int(11) DEFAULT NULL;\";\n                break;\n            case 111:\n                $sqlArray[] = \"ALTER TABLE `taxii_servers` ADD `collection` varchar(40) CHARACTER SET ascii DEFAULT NULL;\";\n                break;\n            case 112:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_view_feed_correlations` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 113:\n                // we only want to update the existing roles - going forward the default is still 0\n                // Also, we want to execute it as a separate update to ensure that cache clearing is done correctly\n                $this->cleanCacheFiles();\n                $sqlArray[] = \"UPDATE roles SET perm_view_feed_correlations = 1;\";\n                break;\n            case 114:\n                $indexArray[] = ['object_references', 'uuid'];\n                break;\n            case 115:\n                $sqlArray[] = \"ALTER TABLE `users` ADD COLUMN `last_pw_change` BIGINT(20) NULL DEFAULT NULL;\";\n                $sqlArray[] = \"UPDATE `users` SET last_pw_change=date_modified WHERE last_pw_change IS NULL\";\n                break;\n            case 'fixNonEmptySharingGroupID':\n                $sqlArray[] = 'UPDATE `events` SET `sharing_group_id` = 0 WHERE `distribution` != 4;';\n                $sqlArray[] = 'UPDATE `attributes` SET `sharing_group_id` = 0 WHERE `distribution` != 4;';\n                break;\n            case 'cleanupAfterUpgrade':\n                $sqlArray[] = 'ALTER TABLE `events` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `events` DROP `orgc`;';\n                $sqlArray[] = 'ALTER TABLE `correlations` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `jobs` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `servers` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `servers` DROP `organization`;';\n                $sqlArray[] = 'ALTER TABLE `shadow_attributes` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `shadow_attributes` DROP `event_org`;';\n                $sqlArray[] = 'ALTER TABLE `threads` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `users` DROP `org`;';\n                break;\n            case 'seenOnAttributeAndObject':\n                $sqlArray[] =\n                    \"ALTER TABLE `attributes`\n                        DROP INDEX uuid,\n                        DROP INDEX event_id,\n                        DROP INDEX sharing_group_id,\n                        DROP INDEX type,\n                        DROP INDEX category,\n                        DROP INDEX value1,\n                        DROP INDEX value2,\n                        DROP INDEX object_id,\n                        DROP INDEX object_relation;\n                    \";\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX deleted\"; // deleted index may not be present\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX comment\"; // for replayability\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX first_seen\"; // for replayability\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX last_seen\"; // for replayability\n                $sqlArray[] =\n                    \"ALTER TABLE `attributes`\n                        ADD COLUMN `first_seen` BIGINT(20) NULL DEFAULT NULL,\n                        ADD COLUMN `last_seen` BIGINT(20) NULL DEFAULT NULL,\n                        MODIFY comment TEXT COLLATE utf8_unicode_ci\n                    ;\";\n                $indexArray[] = array('attributes', 'uuid');\n                $indexArray[] = array('attributes', 'event_id');\n                $indexArray[] = array('attributes', 'sharing_group_id');\n                $indexArray[] = array('attributes', 'type');\n                $indexArray[] = array('attributes', 'category');\n                $indexArray[] = array('attributes', 'value1', 255);\n                $indexArray[] = array('attributes', 'value2', 255);\n                $indexArray[] = array('attributes', 'object_id');\n                $indexArray[] = array('attributes', 'object_relation');\n                $indexArray[] = array('attributes', 'deleted');\n                $indexArray[] = array('attributes', 'first_seen');\n                $indexArray[] = array('attributes', 'last_seen');\n                $sqlArray[] = \"\n                    ALTER TABLE `objects`\n                        ADD `first_seen` BIGINT(20) NULL DEFAULT NULL,\n                        ADD `last_seen` BIGINT(20) NULL DEFAULT NULL,\n                        MODIFY comment TEXT COLLATE utf8_unicode_ci\n                    ;\";\n                $indexArray[] = array('objects', 'first_seen');\n                $indexArray[] = array('objects', 'last_seen');\n                $sqlArray[] = \"\n                    ALTER TABLE `shadow_attributes`\n                        ADD `first_seen` BIGINT(20) NULL DEFAULT NULL,\n                        ADD `last_seen` BIGINT(20) NULL DEFAULT NULL,\n                        MODIFY comment TEXT COLLATE utf8_unicode_ci\n                    ;\";\n                $indexArray[] = array('shadow_attributes', 'first_seen');\n                $indexArray[] = array('shadow_attributes', 'last_seen');\n                break;\n            case 'createUUIDsConstraints':\n                $tables_to_check = ['events', 'attributes', 'objects', 'sightings', 'dashboards', 'inbox', 'organisations', 'tag_collections'];\n                foreach ($tables_to_check as $table) {\n                    if (!$this->__checkIndexExists($table, 'uuid', true)) {\n                        $this->__dropIndex($table, 'uuid');\n                        $this->__addIndex($table, 'uuid', null, true);\n                    }\n                }\n                break;\n            default:\n                return false;\n        }\n\n        // switch MISP instance live to false\n        if ($liveOff) {\n            $this->setLive(false);\n        }\n        $sql_update_count = count($sqlArray);\n        $index_update_count = count($indexArray);\n        $total_update_count = $sql_update_count + $index_update_count;\n        $this->__setUpdateProgress(0, $total_update_count, $command);\n        $str_index_array = array();\n        foreach ($indexArray as $toIndex) {\n            $str_index_array[] = __('Indexing %s -> %s', $toIndex[0], $toIndex[1]);\n        }\n        $this->__setUpdateCmdMessages(array_merge($sqlArray, $str_index_array));\n        $flagStop = false;\n        $errorCount = 0;\n\n        // execute test before update. Exit if it fails\n        if (isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['preUpdate'])) {\n            $function_name = self::ADVANCED_UPDATES_DESCRIPTION[$command]['preUpdate'];\n            try {\n                $this->{$function_name}();\n            } catch (Exception $e) {\n                $this->__setPreUpdateTestState(false);\n                $this->__setUpdateProgress(0, false);\n                $this->__setUpdateResMessages(0, __('Issues executing the pre-update test `%s`. The returned error is: %s', $function_name, $e->getMessage()) . PHP_EOL);\n                $this->__setUpdateError(0);\n                $errorCount++;\n                $exitOnError = true;\n                $flagStop = true;\n            }\n        }\n\n        if (!$flagStop) {\n            $this->__setPreUpdateTestState(true);\n            foreach ($sqlArray as $i => $sql) {\n                try {\n                    $this->__setUpdateProgress($i, false);\n                    $this->query($sql);\n                    $this->Log->create();\n                    $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_database',\n                        'user_id' => 0,\n                        'title' => __('Successfully executed the SQL query for ') . $command,\n                        'change' => __('The executed SQL query was: %s', $sql),\n                    ));\n                    $this->__setUpdateResMessages($i, __('Successfully executed the SQL query for %s', $command));\n                } catch (Exception $e) {\n                    $errorMessage = $e->getMessage();\n                    $this->Log->create();\n                    $logMessage = array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_database',\n                        'user_id' => 0,\n                        'title' => __('Issues executing the SQL query for %s', $command),\n                        'change' => __('The executed SQL query was: ') . $sql . PHP_EOL . __(' The returned error is: ') . $errorMessage\n                    );\n                    $this->__setUpdateResMessages($i, __('Issues executing the SQL query for `%s`. The returned error is: ' . PHP_EOL . '%s', $command, $errorMessage));\n                    if (!$this->isAcceptedDatabaseError($errorMessage)) {\n                        $this->__setUpdateError($i);\n                        $errorCount++;\n                        if ($exitOnError) {\n                            $flagStop = true;\n                            break;\n                        }\n                    } else {\n                        $logMessage['change'] = $logMessage['change'] . PHP_EOL . __('However, as this error is allowed, the update went through.');\n                    }\n                    $this->Log->save($logMessage);\n                }\n            }\n        }\n        if (!$flagStop) {\n            if (!empty($indexArray)) {\n                if ($clean) {\n                    $this->cleanCacheFiles();\n                }\n                foreach ($indexArray as $i => $iA) {\n                    $this->__setUpdateProgress(count($sqlArray)+$i, false);\n                    if (isset($iA[2])) {\n                        $indexSuccess = $this->__addIndex($iA[0], $iA[1], $iA[2]);\n                    } else {\n                        $indexSuccess = $this->__addIndex($iA[0], $iA[1]);\n                    }\n                    if ($indexSuccess['success']) {\n                        $this->__setUpdateResMessages(count($sqlArray)+$i, __('Successfully indexed %s -> %s', $iA[0], $iA[1]));\n                    } else {\n                        $this->__setUpdateResMessages(count($sqlArray)+$i, sprintf('%s %s %s %s',\n                            __('Failed to add index'),\n                            sprintf('%s -> %s', $iA[0], $iA[1]),\n                            __('The returned error is:') . PHP_EOL,\n                            $indexSuccess['errorMessage']\n                        ));\n                        $this->__setUpdateError(count($sqlArray)+$i);\n                    }\n                }\n            }\n            $this->__setUpdateProgress(count($sqlArray) + count($indexArray), false);\n         }\n        if ($clean) {\n            $this->cleanCacheFiles();\n        }\n        if ($liveOff) {\n            $this->setLive(true);\n        }\n        if (!$flagStop && $errorCount == 0) {\n            $this->__postUpdate($command);\n        }\n        if ($flagStop && $errorCount > 0) {\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => 'SYSTEM',\n                'model' => 'Server',\n                'model_id' => 0,\n                'email' => 'SYSTEM',\n                'action' => 'update_database',\n                'user_id' => 0,\n                'title' => __('Issues executing the SQL query for %s', $command),\n                'change' => __('Database updates stopped as some errors occurred and the stop flag is enabled.')\n            ));\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Set if misp is live in redis or in config file as fallback\n     * @param bool $isLive\n     */\n    private function setLive($isLive)\n    {\n        try {\n            $redis = $this->setupRedisWithException();\n            if ($isLive) {\n                $redis->del('misp:live');\n            } else {\n                $redis->set('misp:live', '0');\n            }\n        } catch (Exception $e) {\n            // pass\n        }\n\n        if (!isset($this->Server)) {\n            $this->Server = ClassRegistry::init('Server');\n        }\n        $this->Server->serverSettingsSaveValue('MISP.live', $isLive);\n    }\n\n    /**\n     * Check whether the adminSetting should be updated after the update.\n     * @param string $command\n     * @return void\n     */\n    private function __postUpdate($command)\n    {\n        if (isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['record'])) {\n            if (self::ADVANCED_UPDATES_DESCRIPTION[$command]['record']) {\n                $this->AdminSetting->changeSetting($command, 1);\n            }\n        }\n    }\n\n    private function __dropIndex($table, $field)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $indexCheckResult = array();\n        if ($this->isMysql()) {\n            $indexCheck = \"SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE table_schema=DATABASE() AND table_name='\" . $table . \"' AND index_name LIKE '\" . $field . \"%';\";\n            $indexCheckResult = $this->query($indexCheck);\n        } else {\n            $pgIndexName = 'idx_' . $table . '_' . $field;\n            $indexCheckResult[] = array('STATISTICS' => array('INDEX_NAME' => $pgIndexName));\n        }\n        foreach ($indexCheckResult as $icr) {\n            if ($this->isMysql()) {\n                $dropIndex = 'ALTER TABLE ' . $table . ' DROP INDEX ' . $icr['STATISTICS']['INDEX_NAME'] . ';';\n            } else {\n                $dropIndex = 'DROP INDEX IF EXISTS ' . $icr['STATISTICS']['INDEX_NAME'] . ';';\n            }\n            $result = true;\n            try {\n                $this->query($dropIndex);\n            } catch (Exception $e) {\n                $result = false;\n            }\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => 'SYSTEM',\n                'model' => 'Server',\n                'model_id' => 0,\n                'email' => 'SYSTEM',\n                'action' => 'update_database',\n                'user_id' => 0,\n                'title' => ($result ? 'Removed index ' : 'Failed to remove index ') . $icr['STATISTICS']['INDEX_NAME'] . ' from ' . $table,\n                'change' => ($result ? 'Removed index ' : 'Failed to remove index ') . $icr['STATISTICS']['INDEX_NAME'] . ' from ' . $table,\n            ));\n        }\n    }\n\n    private function __addIndex($table, $field, $length = null, $unique = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $index = $unique ? 'UNIQUE INDEX' : 'INDEX';\n        if (!$this->isMysql()) {\n            $addIndex = \"CREATE $index idx_\" . $table . \"_\" . $field . \" ON \" . $table . \" (\" . $field . \");\";\n        } else {\n            if (!$length) {\n                $addIndex = \"ALTER TABLE `\" . $table . \"` ADD $index `\" . $field . \"` (`\" . $field . \"`);\";\n            } else {\n                $addIndex = \"ALTER TABLE `\" . $table . \"` ADD $index `\" . $field . \"` (`\" . $field . \"`(\" . $length . \"));\";\n            }\n        }\n        $result = true;\n        $duplicate = false;\n        $errorMessage = '';\n        try {\n            $this->query($addIndex);\n        } catch (Exception $e) {\n            $duplicate = strpos($e->getMessage(), '1061') !== false;\n            $errorMessage = $e->getMessage();\n            $result = false;\n        }\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => 'SYSTEM',\n            'model' => 'Server',\n            'model_id' => 0,\n            'email' => 'SYSTEM',\n            'action' => 'update_database',\n            'user_id' => 0,\n            'title' => ($result ? 'Added index ' : 'Failed to add index ') . $field . ' to ' . $table . ($duplicate ? ' (index already set)' : $errorMessage),\n            'change' => ($result ? 'Added index ' : 'Failed to add index ') . $field . ' to ' . $table . ($duplicate ? ' (index already set)' : $errorMessage),\n        ));\n        $additionResult = array('success' => $result || $duplicate);\n        if (!$result) {\n            $additionResult['errorMessage'] = $errorMessage;\n        }\n        return $additionResult;\n    }\n\n    private function __checkIndexExists($table, $column_name, $is_unique = false): bool\n    {\n        $query = sprintf(\n            'SHOW INDEX FROM %s WHERE Column_name = \\'%s\\' and Non_unique = %s;',\n            $table,\n            $column_name,\n            !empty($is_unique) ? '0' : '1'\n        );\n        $existing_index = $this->query($query);\n        return !empty($existing_index);\n    }\n\n    public function cleanCacheFiles()\n    {\n        Cache::clear();\n        Cache::clear(false, '_cake_core_');\n        Cache::clear(false, '_cake_model_');\n        clearCache();\n\n        $files = glob(CACHE . 'models' . DS . 'myapp*');\n        $files = array_merge($files, glob(CACHE . 'persistent' . DS . 'myapp*'));\n        foreach ($files as $file) {\n            if (is_file($file)) {\n                unlink($file);\n            }\n        }\n        return true;\n    }\n\n    public function validateAuthkey($value)\n    {\n        if (empty($value['authkey'])) {\n            return 'Empty authkey found. Make sure you set the 40 character long authkey.';\n        }\n        if (!preg_match('/[a-z0-9]{40}/i', $value['authkey'])) {\n            return 'The authkey has to be exactly 40 characters long and consist of alphanumeric characters.';\n        }\n        return true;\n    }\n\n    // alternative to the build in notempty/notblank validation functions, compatible with cakephp <= 2.6 and cakephp and cakephp >= 2.7\n    public function valueNotEmpty($value)\n    {\n        $field = array_keys($value)[0];\n        $value = trim($value[$field]);\n        if (!empty($value)) {\n            return true;\n        }\n        return ucfirst($field) . ' cannot be empty.';\n    }\n\n    public function valueIsJson($value)\n    {\n        $value = array_values($value)[0];\n        if (!JsonTool::isValid($value)) {\n            return __('Invalid JSON.');\n        }\n        return true;\n    }\n\n    public function valueIsID($value)\n    {\n        $field = array_keys($value)[0];\n        if (!is_numeric($value[$field]) || $value[$field] < 0) {\n            return 'Invalid ' . ucfirst($field) . ' ID';\n        }\n        return true;\n    }\n\n    public function stringNotEmpty($value)\n    {\n        $field = array_keys($value)[0];\n        $value = trim($value[$field]);\n        if (!isset($value) || ($value == false && $value !== \"0\")) {\n            return ucfirst($field) . ' cannot be empty.';\n        }\n        return true;\n    }\n\n    // Try to create a table with a BIGINT(20)\n    public function seenOnAttributeAndObjectPreUpdate()\n    {\n        $sqlArray[] = \"CREATE TABLE IF NOT EXISTS testtable (\n            `testfield` BIGINT(6) NULL DEFAULT NULL\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n        try {\n            foreach($sqlArray as $i => $sql) {\n                $this->query($sql);\n            }\n        } catch (Exception $e) {\n            throw new Exception('Pre update test failed: ' . PHP_EOL . $sql . PHP_EOL . ' The returned error is: ' . $e->getMessage());\n        }\n        // clean up\n        $sqlArray[] = \"DROP TABLE testtable;\";\n        foreach($sqlArray as $i => $sql) {\n            $this->query($sql);\n        }\n    }\n\n    public function runUpdates($verbose = false, $useWorker = true, $processId = false)\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $this->Job = ClassRegistry::init('Job');\n\n        $db = ConnectionManager::getDataSource('default');\n        $tables = $db->listSources();\n        $requiresLogout = false;\n        // if we don't even have an admin table, time to create it.\n        if (!in_array('admin_settings', $tables, true)) {\n            $this->updateDatabase('adminTable');\n            $requiresLogout = true;\n        } else {\n            $this->__runCleanDB();\n            $db_version = $this->AdminSetting->find('all', [\n                'conditions' => array('setting' => 'db_version'),\n                'fields' => ['id', 'value'],\n            ]);\n            if (count($db_version) > 1) {\n                // we ran into a bug where we have more than one db_version entry. This bug happened in some rare circumstances around 2.4.50-2.4.57\n                foreach ($db_version as $k => $v) {\n                    if ($k > 0) {\n                        $this->AdminSetting->delete($v['AdminSetting']['id']);\n                    }\n                }\n            }\n            $db_version = $db_version[0];\n            $updates = $this->findUpgrades($db_version['AdminSetting']['value']);\n            if ($processId) {\n                $job = $this->Job->find('first', array(\n                    'conditions' => array('Job.id' => $processId)\n                ));\n            } else {\n                $job = null;\n            }\n            if (!empty($updates)) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Server = ClassRegistry::init('Server');\n                // Exit if updates are locked.\n                // This is not as reliable as a real lock implementation\n                // However, as all updates are re-playable, there is no harm if they\n                // get played multiple time. The purpose of this lightweight lock\n                // is only to limit the load.\n                if ($this->isUpdateLocked()) { // prevent creation of useless workers\n                    $this->Log->create();\n                    $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_db_worker',\n                        'user_id' => 0,\n                        'title' => __('Issues executing run_updates'),\n                        'change' => __('Database updates are locked. Make sure that you have an update worker running. If you do, it might be related to an update\\'s execution repeatedly failing or still being in progress.')\n                    ));\n                    if (!empty($job)) { // if multiple prio worker is enabled, want to mark them as done\n                        $job['Job']['progress'] = 100;\n                        $job['Job']['message'] = __('Update done');\n                       $this->Job->save($job);\n                    }\n                    return true;\n                }\n\n                // restart this function by a worker\n                if ($useWorker && Configure::read('MISP.background_jobs')) {\n                    $workerIssueCount = 0;\n                    $workerDiagnostic = $this->Server->workerDiagnostics($workerIssueCount);\n                    if (isset($workerDiagnostic['update']['ok']) && $workerDiagnostic['update']['ok']) {\n                        $workerType = 'update';\n                    } else { // update worker not running, doing the update inline\n                        return $this->runUpdates($verbose, false);\n                    }\n\n                    /** @var Job $job */\n                    $job = ClassRegistry::init('Job');\n                    $jobId = $job->createJob(\n                            'SYSTEM',\n                            Job::WORKER_UPDATE,\n                            'run_updates',\n                            'command: ' . implode(',', $updates),\n                            'Updating.'\n                        );\n\n                    $this->getBackgroundJobsTool()->enqueue(\n                        BackgroundJobsTool::UPDATE_QUEUE,\n                        BackgroundJobsTool::CMD_ADMIN,\n                        [\n                            'runUpdates',\n                            $jobId\n                        ],\n                        true,\n                        $jobId\n                    );\n\n                    return true;\n                }\n\n                // See comment above for `isUpdateLocked()`\n                // prevent continuation of job if worker was already spawned\n                // (could happens if multiple prio workers are up)\n                if ($this->isUpdateLocked()) {\n                    $this->Log->create();\n                    $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_db_worker',\n                        'user_id' => 0,\n                        'title' => __('Issues executing run_updates'),\n                        'change' => __('Updates are locked. Stopping worker gracefully')\n                    ));\n                    if (!empty($job)) {\n                        $job['Job']['progress'] = 100;\n                        $job['Job']['message'] = __('Update done');\n                        $this->Job->save($job);\n                    }\n                    return true;\n                }\n                $this->changeLockState(time());\n                $this->__resetUpdateProgress();\n\n                $update_done = 0;\n                foreach ($updates as $update => $temp) {\n                    if ($verbose) {\n                        echo str_pad('Executing ' . $update, 30, '.');\n                    }\n                    if (!empty($job)) {\n                        $job['Job']['progress'] = floor($update_done / count($updates) * 100);\n                        $job['Job']['message'] = __('Running update %s', $update);\n                        $this->Job->save($job);\n                    }\n                    $dbUpdateSuccess = $this->updateMISP($update);\n                    if ($temp) {\n                        $requiresLogout = true;\n                    }\n                    if ($dbUpdateSuccess) {\n                        $db_version['AdminSetting']['value'] = $update;\n                        $this->AdminSetting->save($db_version);\n                        $this->resetUpdateFailNumber();\n                    } else {\n                        $this->__increaseUpdateFailNumber();\n                    }\n                    if ($verbose) {\n                        echo \"\\033[32mDone\\033[0m\" . PHP_EOL;\n                    }\n                    $update_done++;\n                }\n                if (!empty($job)) {\n                    $job['Job']['message'] = __('Update done');\n                }\n                $this->changeLockState(false);\n                $this->__queueCleanDB();\n            } else {\n                if (!empty($job)) {\n                    $job['Job']['message'] = __('Update done in another worker. Gracefully stopping.');\n                }\n            }\n            // mark current worker as done, as well as queued workers than manages to pass the locks\n            // (happens if user hit reload before first worker start its job)\n            if (!empty($job)) {\n                $job['Job']['progress'] = 100;\n                $this->Job->save($job);\n            }\n        }\n        if ($requiresLogout) {\n            $this->refreshSessions();\n        }\n        return true;\n    }\n\n    /**\n     * Update date_modified for all users, this will ensure that all users will refresh their session data.\n     */\n    private function refreshSessions()\n    {\n        $this->User = ClassRegistry::init('User');\n        $this->User->updateAll(['date_modified' => time()]);\n    }\n\n    private function __setUpdateProgress($current, $total=false, $toward_db_version=false)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['current'] = $current;\n        if ($total !== false) {\n            $updateProgress['total'] = $total;\n        } else {\n            $now = new DateTime();\n            $updateProgress['time']['started'][$current] = $now->format('Y-m-d H:i:s');\n        }\n        if ($toward_db_version !== false) {\n            $updateProgress['toward_db_version'] = $toward_db_version;\n        }\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setPreUpdateTestState($state)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['preTestSuccess'] = $state;\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setUpdateError($index)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['failed_num'][] = $index;\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __getEmptyUpdateMessage()\n    {\n        return array(\n            'commands' => array(),\n            'results' => array(),\n            'time' => array('started' => array(), 'elapsed' => array()),\n            'current' => '',\n            'total' => '',\n            'failed_num' => array(),\n            'toward_db_version' => ''\n        );\n    }\n\n    private function __resetUpdateProgress()\n    {\n        $updateProgress = $this->__getEmptyUpdateMessage();\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setUpdateCmdMessages($messages)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['commands'] = $messages;\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setUpdateResMessages($index, $message)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['results'][$index] = $message;\n        $temp = new DateTime();\n        $diff = $temp->diff(new DateTime($updateProgress['time']['started'][$index]));\n        $updateProgress['time']['elapsed'][$index] = $diff->format('%H:%I:%S');\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    public function getUpdateProgress()\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $updateProgress = $this->AdminSetting->getSetting('update_progress');\n        if ($updateProgress !== false) {\n            $updateProgress = json_decode($updateProgress, true);\n        } else {\n            $updateProgress = $this->__getEmptyUpdateMessage();\n        }\n        foreach($updateProgress as $setting => $value) {\n            if (!is_array($value)) {\n                if (is_numeric($value)) {\n                    $value = intval($value);\n                }\n            }\n            $updateProgress[$setting] = $value;\n        }\n        return $updateProgress;\n    }\n\n    private function __saveUpdateProgress($updateProgress)\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $data = json_encode($updateProgress);\n        $this->AdminSetting->changeSetting('update_progress', $data);\n    }\n\n    public function changeLockState($locked)\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $this->AdminSetting->changeSetting('update_locked', $locked);\n    }\n\n    private function getUpdateLockState()\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $locked = $this->AdminSetting->getSetting('update_locked');\n        return is_null($locked) ? false : $locked;\n    }\n\n    public function getLockRemainingTime()\n    {\n        $lockState = $this->getUpdateLockState();\n        if ($lockState !== false && $lockState !== '') {\n            // if lock is old, still allows the update\n            // This can be useful if the update process crashes\n            $diffSec = time() - intval($lockState);\n            if (Configure::read('MISP.updateTimeThreshold')) {\n                $updateWaitThreshold = intval(Configure::read('MISP.updateTimeThreshold'));\n            } else {\n                $this->Server = ClassRegistry::init('Server');\n                $updateWaitThreshold = intval($this->Server->serverSettings['MISP']['updateTimeThreshold']['value']);\n            }\n            $remainingTime = $updateWaitThreshold - $diffSec;\n            return $remainingTime > 0 ? $remainingTime : 0;\n        } else {\n            return 0;\n        }\n    }\n\n    public function isUpdateLocked()\n    {\n        $remainingTime = $this->getLockRemainingTime();\n        $failThresholdReached = $this->UpdateFailNumberReached();\n        return $remainingTime > 0 || $failThresholdReached;\n    }\n\n    private function getUpdateFailNumber()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $updateFailNumber = $this->AdminSetting->getSetting('update_fail_number');\n        return ($updateFailNumber !== false && $updateFailNumber !== '') ? $updateFailNumber : 0;\n    }\n\n    public function resetUpdateFailNumber()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $this->AdminSetting->changeSetting('update_fail_number', 0);\n    }\n\n    private function __increaseUpdateFailNumber()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $updateFailNumber = $this->AdminSetting->getSetting('update_fail_number');\n        $this->AdminSetting->changeSetting('update_fail_number', $updateFailNumber+1);\n    }\n\n    public function UpdateFailNumberReached()\n    {\n        return $this->getUpdateFailNumber() > 3;\n    }\n\n    private function __queueCleanDB()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $cleanDB = $this->AdminSetting->find('first', array('conditions' => array('setting' => 'clean_db')));\n        if (empty($cleanDB)) {\n            $this->AdminSetting->create();\n            $cleanDB = array('AdminSetting' => array('setting' => 'clean_db', 'value' => 1));\n        } else {\n            $cleanDB['AdminSetting']['value'] = 1;\n        }\n        $this->AdminSetting->save($cleanDB);\n    }\n\n    private function __runCleanDB()\n    {\n        $cleanDB = $this->AdminSetting->getSetting('clean_db');\n        if ($cleanDB === false || $cleanDB == 1) {\n            $this->cleanCacheFiles();\n            $this->AdminSetting->changeSetting('clean_db', 0);\n        }\n    }\n\n    /**\n     * @param string $db_version\n     * @return array\n     */\n    protected function findUpgrades($db_version)\n    {\n        $updates = array();\n        if (strpos($db_version, '.')) {\n            $version = explode('.', $db_version);\n            foreach (self::OLD_DB_CHANGES as $major => $rest) {\n                if ($major < $version[0]) {\n                    continue;\n                } elseif ($major == $version[0]) {\n                    foreach ($rest as $minor => $hotfixes) {\n                        if ($minor < $version[1]) {\n                            continue;\n                        } elseif ($minor == $version[1]) {\n                            foreach ($hotfixes as $hotfix => $requiresLogout) {\n                                if ($hotfix > $version[2]) {\n                                    $updates[$major . '.' . $minor . '.' . $hotfix] = $requiresLogout;\n                                }\n                            }\n                        } else {\n                            foreach ($hotfixes as $hotfix => $requiresLogout) {\n                                $updates[$major . '.' . $minor . '.' . $hotfix] = $requiresLogout;\n                            }\n                        }\n                    }\n                }\n            }\n            $db_version = 0;\n        }\n        foreach (self::DB_CHANGES as $db_change => $requiresLogout) {\n            if ($db_version < $db_change) {\n                $updates[$db_change] = $requiresLogout;\n            }\n        }\n        return $updates;\n    }\n\n    private function __generateCorrelations()\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            /** @var Job $job */\n            $job = ClassRegistry::init('Job');\n            $jobId = $job->createJob(\n                'SYSTEM',\n                Job::WORKER_DEFAULT,\n                'generate correlation',\n                'All attributes',\n                'Job created.'\n            );\n\n            $this->getBackgroundJobsTool()->enqueue(\n                BackgroundJobsTool::DEFAULT_QUEUE,\n                BackgroundJobsTool::CMD_ADMIN,\n                [\n                    'jobGenerateCorrelation',\n                    $jobId\n                ],\n                true,\n                $jobId\n            );\n\n        }\n        return true;\n    }\n\n    private function removeDuplicatedUUIDs()\n    {\n        $removedResults = array(\n            'Event' => $this->removeDuplicateEventUUIDs(),\n            'Attribute' => $this->removeDuplicateAttributeUUIDs(),\n            'Object' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('MispObject'), 'timestamp'),\n            'Sighting' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('Sighting'), 'date_sighting'),\n            'Dashboard' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('Dashboard'), 'timestamp'),\n            'Inbox' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('Inbox'), 'timestamp'),\n            'TagCollection' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('TagCollection')),\n            // 'GalaxyCluster' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('GalaxyCluster')),\n        );\n        $this->Log->createLogEntry('SYSTEM', 'update_database', 'Server', 0, __('Removed duplicated UUIDs'), __('Event: %s, Attribute: %s, Object: %s, Sighting: %s, Dashboard: %s, Inbox: %s, TagCollection: %s', h($removedResults['Event']), h($removedResults['Attribute']), h($removedResults['Object']), h($removedResults['Sighting']), h($removedResults['Dashboard']), h($removedResults['Inbox']), h($removedResults['TagCollection'])));\n    }\n\n    private function __removeDuplicateUUIDsGeneric($model, $sort_by=false): int\n    {\n        $className = get_class($model);\n        $alias = $model->alias;\n        $this->Log = ClassRegistry::init('Log');\n        $duplicates = $model->find('all', array(\n            'fields' => array('uuid', 'count(uuid) as occurrence'),\n            'recursive' => -1,\n            'group' => array('uuid HAVING occurrence > 1'),\n        ));\n        $counter = 0;\n        foreach ($duplicates as $duplicate) {\n            $options = [\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate[$alias]['uuid']),\n            ];\n            if (!empty($sort_by)) {\n                $options['order'] = \"$sort_by DESC\";\n            }\n            $fetched_duplicates = $model->find('all', $options);\n            unset($fetched_duplicates[0]);\n            foreach ($fetched_duplicates as $fetched_duplicate) {\n                $model->delete($fetched_duplicate[$alias]['id']);\n                $this->Log->createLogEntry('SYSTEM', 'delete', $className, $fetched_duplicate[$alias]['id'], __('Removed %s (%s)', $className, $fetched_duplicate[$alias]['id']), __('%s\\'s UUID duplicated (%s)', $className, $fetched_duplicate[$alias]['uuid']));\n                $counter++;\n            }\n        }\n        return $counter;\n    }\n\n    private function removeDuplicateAttributeUUIDs()\n    {\n        $this->Attribute = ClassRegistry::init('Attribute');\n        $this->Log = ClassRegistry::init('Log');\n        $duplicates = $this->Attribute->find('all', array(\n            'fields' => array('Attribute.uuid', 'count(Attribute.uuid) as occurrence'),\n            'recursive' => -1,\n            'group' => array('Attribute.uuid HAVING occurrence > 1'),\n            'order' => false,\n        ));\n        $counter = 0;\n        foreach ($duplicates as $duplicate) {\n            $attributes = $this->Attribute->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate['Attribute']['uuid']),\n                'contain' => array(\n                    'AttributeTag' => array(\n                        'fields' => array('tag_id')\n                    )\n                ),\n                'order' => 'timestamp DESC',\n            ));\n            $tagIDsOfFirstAttribute = Hash::extract($attributes[0]['AttributeTag'], '{n}.tag_id');\n            $eventIDOfFirstAttribute = $attributes[0]['Attribute']['event_id'];\n            unset($attributes[0]);\n            foreach ($attributes as $attribute) {\n                $tagIDs = Hash::extract($attribute['AttributeTag'], '{n}.tag_id');\n                $logTag = false;\n                $logEventID = false;\n                if (empty(array_diff($tagIDs, $tagIDsOfFirstAttribute))) {\n                    $logTag = true;\n                }\n                if ($eventIDOfFirstAttribute != $attribute['Attribute']['event_id']) {\n                    $logEventID = true;\n                }\n                $success = $this->Attribute->delete($attribute['Attribute']['id']);\n                if (empty($success)) {\n                    $this->Log->createLogEntry('SYSTEM', 'delete', 'Attribute', $attribute['Attribute']['id'], __('Could not remove attribute (%s)', $attribute['Attribute']['id']), __('Deletion was rejected.'));\n                    continue;\n                }\n                $logMessage = __('Attribute\\'s UUID duplicated (%s).', $attribute['Attribute']['uuid']);\n                if ($logEventID) {\n                    $logMessage .= __(' Was part of another event_id (%s) than the one that was kept (%s).', $attribute['Attribute']['event_id'], $eventIDOfFirstAttribute);\n                } else if ($logTag) {\n                    $logMessage .= __(' Tag IDs attached [%s]', implode($tagIDs));\n                } else {\n                }\n                $this->Log->createLogEntry('SYSTEM', 'delete', 'Attribute', $attribute['Attribute']['id'], __('Removed attribute (%s)', $attribute['Attribute']['id']), $logMessage);\n                $counter++;\n            }\n        }\n        return $counter;\n    }\n\n    private function removeDuplicateEventUUIDs()\n    {\n        $this->Event = ClassRegistry::init('Event');\n        $this->Log = ClassRegistry::init('Log');\n        $duplicates = $this->Event->find('all', array(\n                'fields' => array('Event.uuid', 'count(Event.uuid) as occurrence'),\n                'recursive' => -1,\n                'group' => array('Event.uuid HAVING occurrence > 1'),\n        ));\n        $counter = 0;\n\n        // load this so we can remove the blocklist item that will be created, this is the one case when we do not want it.\n        if (Configure::read('MISP.enableEventBlocklisting') !== false) {\n            $this->EventBlocklist = ClassRegistry::init('EventBlocklist');\n        }\n\n        foreach ($duplicates as $duplicate) {\n            $events = $this->Event->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate['Event']['uuid']),\n                'order' => 'timestamp DESC',\n            ));\n            unset($events[0]);\n            foreach ($events as $event) {\n                $uuid = $event['Event']['uuid'];\n                $this->Event->delete($event['Event']['id']);\n                $this->Log->createLogEntry('SYSTEM', 'delete', 'Event', $event['Event']['id'], __('Removed event (%s)', $event['Event']['id']), __('Event\\'s UUID duplicated (%s)', $event['Event']['uuid']));\n                $counter++;\n                // remove the blocklist entry that we just created with the event deletion, if the feature is enabled\n                // We do not want to block the UUID, since we just deleted a copy\n                if (Configure::read('MISP.enableEventBlocklisting') !== false) {\n                    $this->EventBlocklist->deleteAll(array('EventBlocklist.event_uuid' => $uuid));\n                }\n            }\n        }\n        return $counter;\n    }\n\n    public function checkFilename($filename)\n    {\n        return preg_match('@^([a-z0-9_.]+[a-z0-9_.\\- ]*[a-z0-9_.\\-]|[a-z0-9_.])+$@i', $filename);\n    }\n\n    /**\n     * Similar method as `setupRedis`, but this method throw exception if Redis cannot be reached.\n     * @return Redis\n     * @throws Exception\n     * @deprecated\n     */\n    public function setupRedisWithException()\n    {\n        return RedisTool::init();\n    }\n\n    /**\n     * Method for backward compatibility.\n     * @deprecated\n     * @see AppModel::setupRedisWithException\n     * @return bool|Redis\n     */\n    public function setupRedis()\n    {\n        try {\n            return RedisTool::init();\n        } catch (Exception $e) {\n            return false;\n        }\n    }\n\n    public function getKafkaPubTool()\n    {\n        if (!$this->loadedKafkaPubTool) {\n            App::uses('KafkaPubTool', 'Tools');\n            $kafkaPubTool = new KafkaPubTool();\n            $rdkafkaIni = Configure::read('Plugin.Kafka_rdkafka_config');\n            $rdkafkaIni = mb_ereg_replace(\"/\\:\\/\\//\", '', $rdkafkaIni);\n            $kafkaConf = array();\n            if (!empty($rdkafkaIni)) {\n                $kafkaConf = parse_ini_file($rdkafkaIni);\n            }\n            $brokers = Configure::read('Plugin.Kafka_brokers');\n            $kafkaPubTool->initTool($brokers, $kafkaConf);\n            $this->loadedKafkaPubTool = $kafkaPubTool;\n        }\n        return $this->loadedKafkaPubTool;\n    }\n\n    public function publishKafkaNotification($topicName, $data, $action = false)\n    {\n        $kafkaTopic = $this->kafkaTopic($topicName);\n        if ($kafkaTopic) {\n            $this->getKafkaPubTool()->publishJson($kafkaTopic, $data, $action);\n        }\n    }\n\n    /**\n     * @return PubSubTool\n     */\n    public function getPubSubTool()\n    {\n        if (!self::$loadedPubSubTool) {\n            App::uses('PubSubTool', 'Tools');\n            $pubSubTool = new PubSubTool();\n            $pubSubTool->initTool();\n            self::$loadedPubSubTool = $pubSubTool;\n        }\n        return self::$loadedPubSubTool;\n    }\n\n    /**\n     * @return BackgroundJobsTool\n     */\n    public function getBackgroundJobsTool(): BackgroundJobsTool\n    {\n        if (!self::$loadedBackgroundJobsTool) {\n            App::uses('BackgroundJobsTool', 'Tools');\n\n            // TODO: remove after CakeResque is deprecated\n            $settings = ['enabled' => false];\n            if (Configure::read('SimpleBackgroundJobs.enabled')) {\n                $settings = Configure::read('SimpleBackgroundJobs');\n            }\n\n            $backgroundJobsTool = new BackgroundJobsTool($settings);\n            self::$loadedBackgroundJobsTool = $backgroundJobsTool;\n        }\n        return self::$loadedBackgroundJobsTool;\n    }\n\n    /**\n     * Generate a generic subquery - options needs to include conditions\n     *\n     * @param AppModel $model\n     * @param array $options\n     * @param string $lookupKey\n     * @param bool $negation\n     * @return string[]\n     */\n    protected function subQueryGenerator(AppModel $model, array $options, $lookupKey, $negation = false)\n    {\n        $defaults = array(\n            'fields' => array('*'),\n            'table' => $model->table,\n            'alias' => $model->alias,\n            'limit' => null,\n            'offset' => null,\n            'joins' => array(),\n            'conditions' => array(),\n            'group' => false,\n            'recursive' => -1\n        );\n        $params = array();\n        foreach ($defaults as $key => $defaultValue) {\n            if (isset($options[$key])) {\n                $params[$key] = $options[$key];\n            } else {\n                $params[$key] = $defaultValue;\n            }\n        }\n        $db = $model->getDataSource();\n        $subQuery = $db->buildStatement($params, $model);\n        if ($negation) {\n            $subQuery = $lookupKey . ' NOT IN (' . $subQuery . ') ';\n        } else {\n            $subQuery = $lookupKey . ' IN (' . $subQuery . ') ';\n        }\n        return [$subQuery];\n    }\n\n    /**\n     * Returns estimated number of table rows\n     * @return int\n     */\n    public function tableRows()\n    {\n        $rows = $this->query(\"SELECT TABLE_ROWS FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{$this->table}';\");\n        return $rows[0]['TABLES']['TABLE_ROWS'];\n    }\n\n    // start a benchmark run for the given bench name\n    public function benchmarkInit($name = 'default')\n    {\n        $this->__profiler[$name]['start'] = microtime(true);\n        if (empty($this->__profiler[$name]['memory_start'])) {\n            $this->__profiler[$name]['memory_start'] = memory_get_usage();\n        }\n        return true;\n    }\n\n    // calculate the duration from the init time to the current point in execution. Aggregate flagged executions will increment the duration instead of just setting it\n    public function benchmark($name = 'default', $aggregate = false, $memory_chart = false)\n    {\n        if (!empty($this->__profiler[$name]['start'])) {\n            if ($aggregate) {\n                if (!isset($this->__profiler[$name]['duration'])) {\n                    $this->__profiler[$name]['duration'] = 0;\n                }\n                if (!isset($this->__profiler[$name]['executions'])) {\n                    $this->__profiler[$name]['executions'] = 0;\n                }\n                $this->__profiler[$name]['duration'] += microtime(true) - $this->__profiler[$name]['start'];\n                $this->__profiler[$name]['executions']++;\n                $currentUsage = memory_get_usage();\n                if ($memory_chart) {\n                    $this->__profiler[$name]['memory_chart'][] = $currentUsage - $this->__profiler[$name]['memory_start'];\n                }\n                if (\n                    empty($this->__profiler[$name]['memory_peak']) ||\n                    $this->__profiler[$name]['memory_peak'] < ($currentUsage - $this->__profiler[$name]['memory_start'])\n                ) {\n                    $this->__profiler[$name]['memory_peak'] = $currentUsage - $this->__profiler[$name]['memory_start'];\n                }\n            } else {\n                $this->__profiler[$name]['memory_peak'] = memory_get_usage() - $this->__profiler[$name]['memory_start'];\n                $this->__profiler[$name]['duration'] = microtime(true) - $this->__profiler[$name]['start'];\n            }\n        }\n        return true;\n    }\n\n    // return the results of the benchmark(s). If no name is set all benchmark results are returned in an array.\n    public function benchmarkResult($name = false)\n    {\n        if ($name) {\n            return array($name => $this->__profiler[$name]['duration']);\n        } else {\n            $results = array();\n            foreach ($this->__profiler as $name => $benchmark) {\n                if (!empty($benchmark['duration'])) {\n                    $results[$name] = $benchmark;\n                    unset($results[$name]['start']);\n                    unset($results[$name]['memory_start']);\n                }\n            }\n            return $results;\n        }\n    }\n\n    public function benchmarkCustomAdd($valueToAdd = 0, $name = 'default', $customName = 'custom')\n    {\n        if (empty($this->__profiler[$name]['custom'][$customName])) {\n            $this->__profiler[$name]['custom'][$customName] = 0;\n        }\n        $this->__profiler[$name]['custom'][$customName] += $valueToAdd;\n    }\n\n    private function __forceSettings()\n    {\n        $settingsToForce = array(\n            'Session.autoRegenerate' => false,\n            'Session.checkAgent' => false\n        );\n        $server = ClassRegistry::init('Server');\n        foreach ($settingsToForce as $setting => $value) {\n            $server->serverSettingsSaveValue($setting, $value);\n        }\n        return true;\n    }\n\n    public function setupHttpSocket($server, $HttpSocket = null, $timeout = false)\n    {\n        if (empty($HttpSocket)) {\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            $HttpSocket = $syncTool->setupHttpSocket($server, $timeout);\n        }\n        return $HttpSocket;\n    }\n\n    /**\n     * @param array $server\n     * @param string $model\n     * @return array[]\n     * @throws JsonException\n     */\n    public function setupSyncRequest(array $server, $model = 'Server')\n    {\n        $version = implode('.', $this->checkMISPVersion());\n        $commit = $this->checkMIPSCommit();\n\n        $authkey = $server[$model]['authkey'];\n        App::uses('EncryptedValue', 'Tools');\n        if (EncryptedValue::isEncrypted($authkey)) {\n            $authkey = (string)new EncryptedValue($authkey);\n        }\n\n        return array(\n            'header' => array(\n                'Authorization' => $authkey,\n                'Accept' => 'application/json',\n                'Content-Type' => 'application/json',\n                'User-Agent' => 'MISP ' . $version . (empty($commit) ? '' : ' - #' . $commit),\n            )\n        );\n    }\n\n    /**\n     * Returns MISP version from VERSION.json file as array with major, minor and hotfix keys.\n     *\n     * @return array\n     * @throws JsonException\n     */\n    public function checkMISPVersion()\n    {\n        static $versionArray;\n        if ($versionArray === null) {\n            $content = FileAccessTool::readFromFile(ROOT . DS . 'VERSION.json');\n            $versionArray = JsonTool::decode($content);\n        }\n        return $versionArray;\n    }\n\n    /**\n     * Returns MISP commit hash.\n     *\n     * @return false|string\n     */\n    public function checkMIPSCommit()\n    {\n        static $commit;\n        if ($commit === null) {\n            App::uses('GitTool', 'Tools');\n            try {\n                $commit = GitTool::currentCommit();\n            } catch (Exception $e) {\n                $this->logException('Could not get current git commit', $e, LOG_NOTICE);\n                $commit = false;\n            }\n        }\n        return $commit;\n    }\n\n    // take filters in the {\"OR\" => [foo], \"NOT\" => [bar]} format along with conditions and set the conditions\n    public function generic_add_filter($conditions, &$filter, $keys)\n    {\n        $operator_composition = array(\n            'NOT' => 'AND',\n            'OR' => 'OR',\n            'AND' => 'AND'\n        );\n        if (!is_array($keys)) {\n            $keys = array($keys);\n        }\n        if (!isset($filter['OR']) && !isset($filter['AND']) && !isset($filter['NOT'])) {\n            return $conditions;\n        }\n        foreach ($filter as $operator => $filters) {\n            $temp = array();\n            if (!is_array($filters)) {\n                $filters = array($filters);\n            }\n            foreach ($filters as $f) {\n                if ($f === -1) {\n                    foreach ($keys as $key) {\n                        $temp['OR'][$key][] = -1;\n                    }\n                    continue;\n                }\n                // split the filter params into two lists, one for substring searches one for exact ones\n                if (is_string($f) && ($f[strlen($f) - 1] === '%' || $f[0] === '%')) {\n                    foreach ($keys as $key) {\n                        if ($operator === 'NOT') {\n                            $temp[] = array($key . ' NOT LIKE' => $f);\n                        } else {\n                            $temp[] = array($key . ' LIKE' => $f);\n                            $temp[] = array($key => $f);\n                        }\n                    }\n                } else {\n                    foreach ($keys as $key) {\n                        if ($operator === 'NOT') {\n                            $temp[$key . ' !='][] = $f;\n                        } else {\n                            $temp['OR'][$key][] = $f;\n                        }\n                    }\n                }\n            }\n            $conditions['AND'][] = array($operator_composition[$operator] => $temp);\n            if ($operator !== 'NOT') {\n                unset($filter[$operator]);\n            }\n        }\n        return $conditions;\n    }\n\n    /*\n     * Get filters in one of the following formats:\n     * [foo, bar]\n     * [\"OR\" => [foo, bar], \"NOT\" => [baz]]\n     * \"foo\"\n     * \"foo&&bar&&!baz\"\n     * and convert it into the same format [\"OR\" => [foo, bar], \"NOT\" => [baz]]\n     */\n    public function convert_filters($filter)\n    {\n        if (!is_array($filter)) {\n            $temp = explode('&&', $filter);\n            $filter = array();\n            foreach ($temp as $f) {\n                $f = strval($f);\n                if ($f !== '') {\n                    if ($f[0] === '!') {\n                        $filter['NOT'][] = substr($f, 1);\n                    } else {\n                        $filter['OR'][] = $f;\n                    }\n                }\n            }\n            return $filter;\n        }\n        if (!isset($filter['OR']) && !isset($filter['NOT']) && !isset($filter['AND'])) {\n            $temp = array();\n            foreach ($filter as $param) {\n                $param = strval($param);\n                if (!empty($param)) {\n                    if ($param[0] === '!') {\n                        $temp['NOT'][] = substr($param, 1);\n                    } else {\n                        $temp['OR'][] = $param;\n                    }\n                }\n            }\n            $filter = $temp;\n        }\n        return $filter;\n    }\n\n    protected function convert_to_memory_limit_to_mb($val)\n    {\n        $val = trim($val);\n        if ($val == -1) {\n            // default to 8GB if no limit is set\n            return 8 * 1024;\n        }\n        $unit = $val[strlen($val)-1];\n        if (is_numeric($unit)) {\n            $unit = 'b';\n        } else {\n            $val = intval($val);\n        }\n        $unit = strtolower($unit);\n        switch ($unit) {\n            case 'g':\n                $val *= 1024;\n                // no break\n            case 'm':\n                $val *= 1024;\n                // no break\n            case 'k':\n                $val *= 1024;\n        }\n        return $val / (1024 * 1024);\n    }\n\n    private function __bumpReferences()\n    {\n        $this->Event = ClassRegistry::init('Event');\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $existingSetting = $this->AdminSetting->find('first', array(\n            'conditions' => array('AdminSetting.setting' => 'update_23')\n        ));\n        if (empty($existingSetting)) {\n            $this->AdminSetting->create();\n            $data = array(\n                'setting' => 'update_23',\n                'value' => 1\n            );\n            $this->AdminSetting->save($data);\n            $references = $this->Event->Object->ObjectReference->find('list', array(\n                'recursive' => -1,\n                'fields' => array('ObjectReference.event_id', 'ObjectReference.event_id'),\n                'group' => array('ObjectReference.event_id')\n            ));\n            $event_ids = array();\n            $object_ids = array();\n            foreach ($references as $reference) {\n                $event = $this->Event->find('first', array(\n                    'conditions' => array(\n                        'Event.id' => $reference,\n                        'Event.locked' => 0\n                    ),\n                    'recursive' => -1,\n                    'fields' => array('Event.id', 'Event.locked')\n                ));\n                if (!empty($event)) {\n                    $event_ids[] = $event['Event']['id'];\n                    $event_references = $this->Event->Object->ObjectReference->find('list', array(\n                        'conditions' => array('ObjectReference.event_id' => $reference),\n                        'recursive' => -1,\n                        'fields' => array('ObjectReference.object_id', 'ObjectReference.object_id')\n                    ));\n                    $object_ids = array_merge($object_ids, array_values($event_references));\n                }\n            }\n            if (!empty($object_ids)) {\n                $this->Event->Object->updateAll(\n                    array(\n                    'Object.timestamp' => 'Object.timestamp + 1'\n                    ),\n                    array('Object.id' => $object_ids)\n                );\n                $this->Event->updateAll(\n                    array(\n                    'Event.timestamp' => 'Event.timestamp + 1'\n                    ),\n                    array('Event.id' => $event_ids)\n                );\n            }\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $entry = array(\n                'org' => 'SYSTEM',\n                'model' => 'Server',\n                'model_id' => 0,\n                'email' => 'SYSTEM',\n                'action' => 'update_database',\n                'user_id' => 0,\n                'title' => 'Bumped the timestamps of locked events containing object references.',\n                'change' => sprintf('Event timestamps updated: %s; Object timestamps updated: %s', count($event_ids), count($object_ids))\n            );\n            $this->Log->save($entry);\n        }\n        return true;\n    }\n\n    public function generateRandomFileName()\n    {\n        return (new RandomTool())->random_str(false, 12);\n    }\n\n    /**\n     * @param string|int $delta\n     * @return int Timestamp\n     */\n    public function resolveTimeDelta($delta)\n    {\n        if (is_numeric($delta)) {\n            return (int)$delta;\n        }\n\n        $multiplierArray = ['d' => 86400, 'h' => 3600, 'm' => 60, 's' => 1];\n        $lastChar = strtolower(substr($delta, -1));\n        if (!is_numeric($lastChar) && isset($multiplierArray[$lastChar])) {\n            $multiplier = $multiplierArray[$lastChar];\n            $timeDelta = substr($delta, 0, -1);\n            if (!is_numeric($timeDelta)) {\n                $this->log('Invalid time filter format ' . $delta, LOG_NOTICE);\n                return time() + 1;\n            }\n            return time() - ($timeDelta * $multiplier);\n        }\n\n        $time = strtotime($delta);\n        if ($time !== false) {\n            return $time;\n        }\n\n        $this->log('Invalid time filter format ' . $delta, LOG_NOTICE);\n        return time() + 1;\n    }\n\n    private function __fixServerPullPushRules()\n    {\n        $this->Server = ClassRegistry::init('Server');\n        $servers = $this->Server->find('all', array('recursive' => -1));\n        foreach ($servers as $server) {\n            $changed = false;\n            if (empty($server['Server']['pull_rules'])) {\n                $server['Server']['pull_rules'] = '[]';\n                $changed = true;\n            }\n            if (empty($server['Server']['push_rules'])) {\n                $server['Server']['push_rules'] = '[]';\n                $changed = true;\n            }\n            if ($changed) {\n                $this->Server->save($server);\n            }\n        }\n    }\n\n    /**\n     * Optimised version of CakePHP _findList method when just one or two fields are set from same model\n     * @param string $state\n     * @param array $query\n     * @param array $results\n     * @return array\n     */\n    protected function _findList($state, $query, $results = [])\n    {\n        if ($state === 'before') {\n            return parent::_findList($state, $query, $results);\n        }\n\n        if (empty($results)) {\n            return [];\n        }\n\n        if ($query['list']['groupPath'] === null) {\n            $keyPath = explode('.', $query['list']['keyPath']);\n            $valuePath = explode('.', $query['list']['valuePath']);\n            if ($keyPath[1] === $valuePath[1]) { // same model\n                return array_column(array_column($results, $keyPath[1]), $valuePath[2], $keyPath[2]);\n            }\n        }\n\n        return parent::_findList($state, $query, $results);\n    }\n\n    /**\n     * Find method that allows to fetch just one column from database.\n     * @param $state\n     * @param $query\n     * @param array $results\n     * @return array\n     * @throws InvalidArgumentException\n     */\n    protected function _findColumn($state, $query, $results = array())\n    {\n        if ($state === 'before') {\n            if (isset($query['fields']) && is_array($query['fields']) && count($query['fields']) === 1) {\n                if (strpos($query['fields'][0], '.') === false) {\n                    $query['fields'][0] = $this->alias . '.' . $query['fields'][0];\n                }\n\n                $query['column'] = $query['fields'][0];\n                if (isset($query['unique']) && $query['unique']) {\n                    $query['fields'] = array(\"DISTINCT {$query['fields'][0]}\");\n                } else {\n                    $query['fields'] = array($query['fields'][0]);\n                }\n            } else if (!isset($query['fields'])) {\n                throw new InvalidArgumentException(\"This method requires `fields` option defined.\");\n            } else {\n                throw new InvalidArgumentException(\"Invalid number of column, expected one, \" . count($query['fields']) . \" given\");\n            }\n\n            if (!isset($query['recursive'])) {\n                $query['recursive'] = -1;\n            }\n\n            return $query;\n        }\n\n        // Faster version of `Hash::extract`\n        foreach (explode('.', $query['column']) as $part) {\n            $results = array_column($results, $part);\n        }\n        return $results;\n    }\n\n    /**\n     * @param string $field\n     * @param AppModel $model\n     * @param array $conditions\n     */\n    public function addCountField($field, AppModel $model, array $conditions)\n    {\n        $db = $this->getDataSource();\n        $subQuery = $db->buildStatement(\n            array(\n                'fields'     => ['COUNT(*)'],\n                'table'      => $db->fullTableName($model),\n                'alias'      => $model->alias,\n                'conditions' => $conditions,\n            ),\n            $model\n        );\n        $this->virtualFields[$field] = $subQuery;\n    }\n\n    /**\n     * Log exception with backtrace and with nested exceptions.\n     *\n     * @param string $message\n     * @param Exception $exception\n     * @param int $type\n     * @return bool\n     */\n    protected function logException($message, Exception $exception, $type = LOG_ERR)\n    {\n        // If Sentry is installed, send exception to Sentry\n        if (function_exists('\\Sentry\\captureException') && $type === LOG_ERR) {\n            \\Sentry\\captureException($exception);\n        }\n\n        $message .= \"\\n\";\n\n        do {\n            $message .= sprintf(\"[%s] %s\", get_class($exception), $exception->getMessage());\n            $message .= \"\\nStack Trace:\\n\" . $exception->getTraceAsString();\n            $exception = $exception->getPrevious();\n        } while ($exception !== null);\n\n        return $this->log($message, $type);\n    }\n\n    /**\n     * Decodes JSON string and throws exception if string is not valid JSON or if is not array.\n     *\n     * @param string $json\n     * @return array\n     * @throws JsonException\n     * @throws UnexpectedValueException\n     * @deprecated\n     */\n    protected function jsonDecode($json)\n    {\n        return JsonTool::decodeArray($json);\n    }\n\n    /**\n     * Faster version of default `hasAny` method\n     * @param array|null $conditions\n     * @return bool\n     */\n    public function hasAny($conditions = null)\n    {\n        return (bool)$this->find('first', [\n            'fields' => [$this->alias . '.' . $this->primaryKey],\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'callbacks' => false,\n            'order' => [], // disable order\n        ]);\n    }\n\n    /**\n     * Faster version of original `isUnique` method\n     * {@inheritDoc}\n     */\n    public function isUnique($fields, $or = true)\n    {\n        if (is_array($or)) {\n            $isRule = (\n                array_key_exists('rule', $or) &&\n                array_key_exists('required', $or) &&\n                array_key_exists('message', $or)\n            );\n            if (!$isRule) {\n                $args = func_get_args();\n                $fields = $args[1];\n                $or = isset($args[2]) ? $args[2] : true;\n            }\n        }\n        if (!is_array($fields)) {\n            $fields = func_get_args();\n            $fieldCount = count($fields) - 1;\n            if (is_bool($fields[$fieldCount])) {\n                $or = $fields[$fieldCount];\n                unset($fields[$fieldCount]);\n            }\n        }\n\n        foreach ($fields as $field => $value) {\n            if (is_numeric($field)) {\n                unset($fields[$field]);\n\n                $field = $value;\n                $value = null;\n                if (isset($this->data[$this->alias][$field])) {\n                    $value = $this->data[$this->alias][$field];\n                }\n            }\n\n            if (strpos($field, '.') === false) {\n                unset($fields[$field]);\n                $fields[$this->alias . '.' . $field] = $value;\n            }\n        }\n\n        if ($or) {\n            $fields = array('or' => $fields);\n        }\n\n        if (!empty($this->id)) {\n            $fields[$this->alias . '.' . $this->primaryKey . ' !='] = $this->id;\n        }\n\n        return !$this->hasAny($fields);\n    }\n\n    /**\n     * Faster version of original `exists` method\n     * {@inheritDoc}\n     */\n    public function exists($id = null)\n    {\n        if ($id === null) {\n            $id = $this->getID();\n        }\n\n        if ($id === false || $this->useTable === false) {\n            return false;\n        }\n\n        return $this->hasAny([$this->alias . '.' . $this->primaryKey => $id]);\n    }\n\n    /**\n     * @param int $value Timestamp in microseconds\n     * @return string\n     */\n    protected function microTimestampToIso($value)\n    {\n        $sec = (int)($value / 1000000);\n        $micro = $value % 1000000;\n        $micro = str_pad($micro, 6, \"0\", STR_PAD_LEFT);\n        return DateTime::createFromFormat('U.u', \"$sec.$micro\")->format('Y-m-d\\TH:i:s.uP');\n    }\n\n    /**\n     * @return AttachmentTool\n     */\n    protected function loadAttachmentTool()\n    {\n        if ($this->attachmentTool === null) {\n            $this->attachmentTool = new AttachmentTool();\n        }\n\n        return $this->attachmentTool;\n    }\n\n    /**\n     * @return AttachmentScan\n     */\n    protected function loadAttachmentScan()\n    {\n        if ($this->AttachmentScan === null) {\n            $this->AttachmentScan = ClassRegistry::init('AttachmentScan');\n        }\n\n        return $this->AttachmentScan;\n    }\n\n    /**\n     * @return Log\n     */\n    protected function loadLog()\n    {\n        if (!isset($this->Log)) {\n            $this->Log = ClassRegistry::init('Log');\n        }\n        return $this->Log;\n    }\n\n    /**\n     * @param string $name\n     * @return string|null Null when Kafka is not enabled, topic is not enabled or topic is not defined\n     */\n    protected function kafkaTopic($name)\n    {\n        static $kafkaEnabled;\n        if ($kafkaEnabled === null) {\n            $kafkaEnabled = (bool)Configure::read('Plugin.Kafka_enable');\n        }\n        if ($kafkaEnabled) {\n            if (!Configure::read(\"Plugin.Kafka_{$name}_notifications_enable\")) {\n                return null;\n            }\n            return Configure::read(\"Plugin.Kafka_{$name}_notifications_topic\") ?: null;\n        }\n        return null;\n    }\n\n    /**\n     * @param string $name\n     * @return bool\n     */\n    protected function pubToZmq($name)\n    {\n        static $zmqEnabled;\n        if ($zmqEnabled === null) {\n            $zmqEnabled = (bool)Configure::read('Plugin.ZeroMQ_enable');\n        }\n        if ($zmqEnabled) {\n            return Configure::read(\"Plugin.ZeroMQ_{$name}_notifications_enable\");\n        }\n        return false;\n    }\n\n    /**\n     * @return bool Returns true if database is MySQL/Mariadb, false for PostgreSQL\n     */\n    protected function isMysql()\n    {\n        $dataSource = ConnectionManager::getDataSource('default');\n        $dataSourceName = $dataSource->config['datasource'];\n        return $dataSourceName === 'Database/Mysql' || $dataSourceName === 'Database/MysqlObserver' || $dataSourceName === 'Database/MysqlExtended' || $dataSource instanceof Mysql;\n    }\n\n    /**\n     * executeTrigger\n     *\n     * @param string $trigger_id\n     * @param array $data Data to be passed to the workflow\n     * @param array $blockingErrors Errors will be appened if any\n     * @param array $logging If the execution failure should be logged\n     * @return boolean If the execution for the blocking path was a success\n     */\n    protected function executeTrigger($trigger_id, array $data=[], array &$blockingErrors=[], array $logging=[]): bool\n    {\n        if ($this->isTriggerCallable($trigger_id)) {\n           $success = $this->Workflow->executeWorkflowForTriggerRouter($trigger_id, $data, $blockingErrors, $logging);\n           if (!empty($logging) && empty($success)) {\n                $logging['message'] = !empty($logging['message']) ? $logging['message'] : __('Error while executing workflow.');\n                $errorMessage = implode(', ', $blockingErrors);\n                $this->loadLog()->createLogEntry('SYSTEM', $logging['action'], $logging['model'], $logging['id'], $logging['message'], __('Returned message: %s', $errorMessage));\n           }\n           return $success;\n        }\n        return true;\n    }\n\n    protected function isTriggerCallable($trigger_id): bool\n    {\n        static $workflowEnabled;\n        if ($workflowEnabled === null) {\n            $workflowEnabled = (bool)Configure::read('Plugin.Workflow_enable');\n        }\n\n        if (!$workflowEnabled) {\n            return false;\n        }\n\n        if ($this->Workflow === null) {\n            $this->Workflow = ClassRegistry::init('Workflow');\n        }\n        return $this->Workflow->checkTriggerEnabled($trigger_id) &&\n            $this->Workflow->checkTriggerListenedTo($trigger_id);\n    }\n\n    /**\n     * Use different CakeEventManager to fix memory leak\n     * @return CakeEventManager\n     */\n    public function getEventManager()\n    {\n        if (empty($this->_eventManager)) {\n            $this->_eventManager = new BetterCakeEventManager();\n            $this->_eventManager->attach($this->Behaviors);\n            $this->_eventManager->attach($this);\n        }\n        return $this->_eventManager;\n    }\n\n    private function __retireOldCorrelationEngine($user = null)\n    {\n        if ($user === null) {\n            $user = [\n                'id' => 0,\n                'email' => 'SYSTEM',\n                'Organisation' => [\n                    'name' => 'SYSTEM'\n                ]\n            ];\n        }\n        $this->Correlation = ClassRegistry::init('Correlation');\n        $this->Attribute = ClassRegistry::init('Attribute');\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Correlation->truncate($user, 'Legacy');\n            $this->Attribute->generateCorrelation();\n        } else {\n            $job = ClassRegistry::init('Job');\n            $jobId = $job->createJob(\n                'SYSTEM',\n                Job::WORKER_DEFAULT,\n                'truncate table',\n                $this->Correlation->validEngines['Legacy'],\n                'Job created.'\n            );\n            $this->getBackgroundJobsTool()->enqueue(\n                BackgroundJobsTool::DEFAULT_QUEUE,\n                BackgroundJobsTool::CMD_ADMIN,\n                [\n                    'truncateTable',\n                    0,\n                    'Legacy',\n                    $jobId\n                ],\n                true,\n                $jobId\n            );\n            $jobId = $job->createJob(\n                'SYSTEM',\n                Job::WORKER_DEFAULT,\n                'generate correlation',\n                'All attributes',\n                'Job created.'\n            );\n\n            $this->getBackgroundJobsTool()->enqueue(\n                BackgroundJobsTool::DEFAULT_QUEUE,\n                BackgroundJobsTool::CMD_ADMIN,\n                [\n                    'jobGenerateCorrelation',\n                    $jobId\n                ],\n                true,\n                $jobId\n            );\n        }\n    }\n\n    public function removeDuplicateCorrelationEntries($table_name = 'default_correlations')\n    {\n        // If there are duplicate entries, the query creating the `unique_correlation` index will result in an integrity constraint violation.\n        // The query below cleans up potential duplicates before creating the constraint.\n        return $this->query(\"\n            DELETE FROM `$table_name` WHERE id in (\n                SELECT m_id FROM (\n                    SELECT MAX(corr_a.id) as m_id, CONCAT(corr_a.attribute_id, \\\" - \\\", corr_a.1_attribute_id, \\\" - \\\", corr_a.value_id) as uniq FROM `$table_name` corr_a\n                    INNER JOIN `$table_name` corr_b on corr_a.attribute_id = corr_b.attribute_id\n                    WHERE\n                        corr_a.attribute_id = corr_b.attribute_id AND\n                        corr_a.1_attribute_id = corr_b.1_attribute_id AND\n                        corr_a.value_id = corr_b.value_id AND\n                        corr_a.id <> corr_b.id\n                    GROUP BY uniq\n                ) as c\n            );\n        \");\n    }\n\n    public function findOrder($order, $order_model, $valid_order_fields)\n    {\n        if (!is_array($order)) {\n            $order_rules = explode(' ', strtolower($order));\n            $order_field = explode('.', $order_rules[0]);\n            $order_field = end($order_field);\n            if (in_array($order_field, $valid_order_fields)) {\n                $direction = 'asc';\n                if (!empty($order_rules[1]) && trim($order_rules[1]) === 'desc') {\n                    $direction = 'desc';\n                }\n            } else {\n                return null;\n            }\n            return $order_model . '.' . $order_field . ' ' . $direction;\n        }\n        return null;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function _remoteIp()\n    {\n        $ipHeader = Configure::read('MISP.log_client_ip_header') ?: null;\n        if ($ipHeader && isset($_SERVER[$ipHeader])) {\n            return trim($_SERVER[$ipHeader]);\n        }\n        return $_SERVER['REMOTE_ADDR'] ?? null;\n    }\n\n    public function find($type = 'first', $query = array()) {\n        if (!empty($query['order']) && $this->validOrderClause($query['order']) === false) {\n            throw new InvalidArgumentException('Invalid order clause');\n        }\n\n        return parent::find($type, $query);\n    }\n\n    private function validOrderClause($order){\n        $pattern = '/^[\\w\\_\\-\\.\\(\\) ]+$/';\n        if(is_string($order) && preg_match($pattern, $order)){\n            return true;\n        }\n\n        if (is_array($order)) {\n            foreach ($order as $key => $value) {\n                if (is_string($key) && is_string($value) && preg_match($pattern, $key) && in_array(strtolower($value), ['asc', 'desc'])) {\n                    return true;\n                }\n                if(is_numeric($key) && is_string($value) && preg_match($pattern, $value)){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Application model for Cake.\n *\n * This file is application-wide model file. You can put all\n * application-wide model-related methods here.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       app.Model\n * @since         CakePHP(tm) v 0.2.9\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\n */\n\nApp::uses('Model', 'Model');\nApp::uses('LogableBehavior', 'Assets.models/behaviors');\nApp::uses('RandomTool', 'Tools');\nApp::uses('FileAccessTool', 'Tools');\nApp::uses('JsonTool', 'Tools');\nApp::uses('RedisTool', 'Tools');\nApp::uses('BetterCakeEventManager', 'Tools');\n\nclass AppModel extends Model\n{\n    /** @var PubSubTool */\n    private static $loadedPubSubTool;\n\n    /** @var KafkaPubTool */\n    private $loadedKafkaPubTool;\n\n    /** @var BackgroundJobsTool */\n    private static $loadedBackgroundJobsTool;\n\n    private $__profiler = array();\n\n    /** @var AttachmentTool|null */\n    private $attachmentTool;\n\n    /** @var Workflow|null */\n    private $Workflow;\n\n    // deprecated, use $db_changes\n    // major -> minor -> hotfix -> requires_logout\n    const OLD_DB_CHANGES = array(\n        2 => array(\n            4 => array(\n                18 => false, 19 => false, 20 => false, 25 => false, 27 => false,\n                32 => false, 33 => true, 38 => true, 39 => true, 40 => false,\n                42 => false, 44 => false, 45 => false, 49 => true, 50 => false,\n                51 => false, 52 => false, 55 => true, 56 => true, 57 => true,\n                58 => false, 59 => false, 60 => false, 61 => false, 62 => false,\n                63 => false, 64 => false, 65 => false, 66 => false, 67 => true,\n                68 => false, 69 => false, 71 => false, 72 => false, 73 => false,\n                75 => false, 77 => false, 78 => false, 79 => false, 80 => false,\n                81 => false, 82 => false, 83 => false, 84 => false, 85 => false,\n                86 => false, 87 => false\n            )\n        )\n    );\n\n    const DB_CHANGES = array(\n        1 => false, 2 => false, 3 => false, 4 => true, 5 => false, 6 => false,\n        7 => false, 8 => false, 9 => false, 10 => false, 11 => false, 12 => false,\n        13 => false, 14 => false, 15 => false, 18 => false, 19 => false, 20 => false,\n        21 => false, 22 => false, 23 => false, 24 => false, 25 => false, 26 => false,\n        27 => false, 28 => false, 29 => false, 30 => false, 31 => false, 32 => false,\n        33 => false, 34 => false, 35 => false, 36 => false, 37 => false, 38 => false,\n        39 => false, 40 => false, 41 => false, 42 => false, 43 => false, 44 => false,\n        45 => false, 46 => false, 47 => false, 48 => false, 49 => false, 50 => false,\n        51 => false, 52 => false, 53 => false, 54 => false, 55 => false, 56 => false,\n        57 => false, 58 => false, 59 => false, 60 => false, 61 => false, 62 => false,\n        63 => true, 64 => false, 65 => false, 66 => false, 67 => false, 68 => false,\n        69 => false, 70 => false, 71 => true, 72 => true, 73 => false, 74 => false,\n        75 => false, 76 => true, 77 => false, 78 => false, 79 => false, 80 => false,\n        81 => false, 82 => false, 83 => false, 84 => false, 85 => false, 86 => false,\n        87 => false, 88 => false, 89 => false, 90 => false, 91 => false, 92 => false,\n        93 => false, 94 => false, 95 => true, 96 => false, 97 => true, 98 => false,\n        99 => false, 100 => false, 101 => false, 102 => false, 103 => false, 104 => false,\n        105 => false, 106 => false, 107 => false, 108 => false, 109 => false, 110 => false,\n        111 => false, 112 => false, 113 => true, 114 => false, 115 => false\n    );\n\n    const ADVANCED_UPDATES_DESCRIPTION = array(\n        'seenOnAttributeAndObject' => array(\n            'title' => 'First seen/Last seen Attribute table',\n            'description' => 'Update the Attribute table to support first_seen and last_seen feature, with a microsecond resolution.',\n            'liveOff' => true, # should the instance be offline for users other than site_admin\n            'recommendBackup' => true, # should the update recommend backup\n            'exitOnError' => false, # should the update exit on error\n            'requirements' => 'MySQL version must be >= 5.6', # message stating the requirements necessary for the update\n            'record' => false, # should the update success be saved in the admin_table\n            // 'preUpdate' => 'seenOnAttributeAndObjectPreUpdate', # Function to execute before the update. If it throws an error, it cancels the update\n            'url' => '/servers/updateDatabase/seenOnAttributeAndObject/' # url pointing to the funcion performing the update\n        ),\n    );\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n        $this->findMethods['column'] = true;\n        if (in_array('phar', stream_get_wrappers(), true)) {\n            stream_wrapper_unregister('phar');\n        }\n    }\n\n    public function isAcceptedDatabaseError($errorMessage)\n    {\n        if ($this->isMysql()) {\n            $errorDuplicateColumn = 'SQLSTATE[42S21]: Column already exists: 1060 Duplicate column name';\n            $errorDuplicateIndex = 'SQLSTATE[42000]: Syntax error or access violation: 1061 Duplicate key name';\n            $errorDropIndex = \"/SQLSTATE\\[42000\\]: Syntax error or access violation: 1091 Can't DROP '[\\w]+'; check that column\\/key exists/\";\n            $isAccepted = substr($errorMessage, 0, strlen($errorDuplicateColumn)) === $errorDuplicateColumn ||\n                            substr($errorMessage, 0, strlen($errorDuplicateIndex)) === $errorDuplicateIndex ||\n                            preg_match($errorDropIndex, $errorMessage) !== 0;\n        } else {\n            $errorDuplicateColumn = '/ERROR:  column \"[\\w]+\" specified more than once/';\n            $errorDuplicateIndex = '/ERROR: relation \"[\\w]+\" already exists/';\n            $errorDropIndex = '/ERROR: index \"[\\w]+\" does not exist/';\n            $isAccepted = preg_match($errorDuplicateColumn, $errorMessage) !== 0 ||\n                            preg_match($errorDuplicateIndex, $errorMessage) !== 0 ||\n                            preg_match($errorDropIndex, $errorMessage) !== 0;\n        }\n        return $isAccepted;\n    }\n\n    // Generic update script\n    // add special cases where the upgrade does more than just update the DB\n    // this could become useful in the future\n    public function updateMISP($command)\n    {\n        $dbUpdateSuccess = false;\n        switch ($command) {\n            case '2.4.20':\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                //deprecated\n                //$this->ShadowAttribute = ClassRegistry::init('ShadowAttribute');\n                //$this->ShadowAttribute->upgradeToProposalCorrelation();\n                break;\n            case '2.4.25':\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $newFeeds = array(\n                    array('provider' => 'CIRCL', 'name' => 'CIRCL OSINT Feed', 'url' => 'https://www.circl.lu/doc/misp/feed-osint', 'enabled' => 0),\n                );\n                $this->__addNewFeeds($newFeeds);\n                break;\n            case '2.4.27':\n                $newFeeds = array(\n                    array('provider' => 'Botvrij.eu', 'name' => 'The Botvrij.eu Data','url' => 'https://www.botvrij.eu/data/feed-osint', 'enabled' => 0)\n                );\n                $this->__addNewFeeds($newFeeds);\n                break;\n            case '2.4.49':\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->SharingGroup = ClassRegistry::init('SharingGroup');\n                $this->SharingGroup->correctSyncedSharingGroups();\n                $this->SharingGroup->updateRoaming();\n                break;\n            case '2.4.55':\n                $dbUpdateSuccess = $this->updateDatabase('addSightings');\n                break;\n            case '2.4.66':\n                $dbUpdateSuccess = $this->updateDatabase('2.4.66');\n                $this->cleanCacheFiles();\n                $this->Sighting = Classregistry::init('Sighting');\n                $this->Sighting->addUuids();\n                break;\n            case '2.4.67':\n                $dbUpdateSuccess = $this->updateDatabase('2.4.67');\n                $this->Sighting = Classregistry::init('Sighting');\n                $this->Sighting->addUuids();\n                $this->Sighting->deleteAll(array('NOT' => array('Sighting.type' => array(0, 1, 2))));\n                break;\n            case '2.4.71':\n                $this->OrgBlocklist = Classregistry::init('OrgBlocklist');\n                $values = array(\n                    array('org_uuid' => '58d38339-7b24-4386-b4b4-4c0f950d210f', 'org_name' => 'Setec Astrononomy', 'comment' => 'default example'),\n                    array('org_uuid' => '58d38326-eda8-443a-9fa8-4e12950d210f', 'org_name' => 'Acme Finance', 'comment' => 'default example')\n                );\n                foreach ($values as $value) {\n                    $found = $this->OrgBlocklist->find('first', array('conditions' => array('org_uuid' => $value['org_uuid']), 'recursive' => -1));\n                    if (empty($found)) {\n                        $this->OrgBlocklist->create();\n                        $this->OrgBlocklist->save($value);\n                    }\n                }\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                break;\n            case '2.4.86':\n                $this->MispObject = Classregistry::init('MispObject');\n                $this->MispObject->removeOrphanedObjects();\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                break;\n            case 5:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->Feed = Classregistry::init('Feed');\n                $this->Feed->setEnableFeedCachingDefaults();\n                break;\n            case 8:\n                $this->Server = Classregistry::init('Server');\n                $this->Server->restartWorkers();\n                break;\n            case 10:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->Role = Classregistry::init('Role');\n                $this->Role->setPublishZmq();\n                break;\n            case 12:\n                $this->__forceSettings();\n                break;\n            case 23:\n                $this->__bumpReferences();\n                break;\n            case 34:\n                $this->__fixServerPullPushRules();\n                break;\n            case 38:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->__addServerPriority();\n                break;\n            case 46:\n                $dbUpdateSuccess = $this->updateDatabase('seenOnAttributeAndObject');\n                break;\n            case 48:\n                $dbUpdateSuccess = $this->__generateCorrelations();\n                break;\n            case 89:\n                $this->__retireOldCorrelationEngine();\n                $dbUpdateSuccess = true;\n                break;\n            case 90:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                $this->Workflow = Classregistry::init('Workflow');\n                $this->Workflow->enableDefaultModules();\n                break;\n            case 91:\n                $existing_index = $this->query(\n                    \"SHOW INDEX FROM default_correlations WHERE Key_name = 'unique_correlation';\"\n                );\n                if (empty($existing_index)) {\n                    // If there are duplicate entries, the query creating the `unique_correlation` index will result in an integrity constraint violation.\n                    // The query below cleans up potential duplicates before creating the constraint.\n                    $this->removeDuplicateCorrelationEntries('default_correlations');\n                    $this->query(\n                        \"ALTER TABLE default_correlations\n                        ADD CONSTRAINT unique_correlation\n                        UNIQUE KEY(attribute_id, 1_attribute_id, value_id);\"\n                    );\n                }\n                $existing_index = $this->query(\n                    \"SHOW INDEX FROM no_acl_correlations WHERE Key_name = 'unique_correlation';\"\n                );\n                if (empty($existing_index)) {\n                    $this->removeDuplicateCorrelationEntries('no_acl_correlations');\n                    $this->query(\n                        \"ALTER TABLE no_acl_correlations\n                        ADD CONSTRAINT unique_correlation\n                        UNIQUE KEY(attribute_id, 1_attribute_id, value_id);\"\n                    );\n                }\n                $dbUpdateSuccess = true;\n                break;\n            case 96:\n                $this->removeDuplicatedUUIDs();\n                $dbUpdateSuccess = $this->updateDatabase('createUUIDsConstraints');\n                break;\n            default:\n                $dbUpdateSuccess = $this->updateDatabase($command);\n                break;\n        }\n        return $dbUpdateSuccess;\n    }\n\n    private function __addServerPriority()\n    {\n        $this->Server = ClassRegistry::init('Server');\n        $this->Server->reprioritise();\n        return true;\n    }\n\n    private function __addNewFeeds($feeds)\n    {\n        $this->Feed = ClassRegistry::init('Feed');\n        $this->Log = ClassRegistry::init('Log');\n        $feedNames = array();\n        foreach ($feeds as $feed) {\n            $feedNames[] = $feed['name'];\n        }\n        $feedNames = implode(', ', $feedNames);\n        $result = $this->Feed->addDefaultFeeds($feeds);\n        $this->Log->create();\n        $entry = array(\n            'org' => 'SYSTEM',\n            'model' => 'Server',\n            'model_id' => 0,\n            'email' => 'SYSTEM',\n            'action' => 'update_database',\n            'user_id' => 0,\n            'title' => 'Added new default feeds.'\n        );\n        if ($result) {\n            $entry['change'] = 'Feeds added: ' . $feedNames;\n        } else {\n            $entry['change'] = 'Tried adding new feeds but something went wrong.';\n        }\n        $this->Log->save($entry);\n    }\n\n    // SQL scripts for updates\n    public function updateDatabase($command)\n    {\n        $this->Log = ClassRegistry::init('Log');\n\n        $liveOff = false;\n        $exitOnError = false;\n        if (isset(self::ADVANCED_UPDATES_DESCRIPTION[$command])) {\n            $liveOff = isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['liveOff']) ? self::ADVANCED_UPDATES_DESCRIPTION[$command]['liveOff'] : $liveOff;\n            $exitOnError = isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['exitOnError']) ? self::ADVANCED_UPDATES_DESCRIPTION[$command]['exitOnError'] : $exitOnError;\n        }\n\n        $sqlArray = array();\n        $indexArray = array();\n        $clean = true;\n        switch ($command) {\n            case 'extendServerOrganizationLength':\n                $sqlArray[] = 'ALTER TABLE `servers` MODIFY COLUMN `organization` varchar(255) NOT NULL;';\n                break;\n            case 'convertLogFieldsToText':\n                $sqlArray[] = 'ALTER TABLE `logs` MODIFY COLUMN `title` text, MODIFY COLUMN `change` text;';\n                break;\n            case 'addEventBlacklists':\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `event_blacklists` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event_uuid` varchar(40) COLLATE utf8_bin NOT NULL, `created` datetime NOT NULL, PRIMARY KEY (`id`), `event_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL, `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL, `event_orgc` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                break;\n            case 'addOrgBlacklists':\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `org_blacklists` ( `id` int(11) NOT NULL AUTO_INCREMENT, `org_uuid` varchar(40) COLLATE utf8_bin NOT NULL, `created` datetime NOT NULL, PRIMARY KEY (`id`), `org_name` varchar(255) COLLATE utf8_bin NOT NULL, `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                break;\n            case 'addEventBlacklistsContext':\n                $sqlArray[] = 'ALTER TABLE  `event_blacklists` ADD  `event_orgc` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL , ADD  `event_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL, ADD `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL;';\n                break;\n            case 'addSightings':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS sightings (\n                id int(11) NOT NULL AUTO_INCREMENT,\n                attribute_id int(11) NOT NULL,\n                event_id int(11) NOT NULL,\n                org_id int(11) NOT NULL,\n                date_sighting bigint(20) NOT NULL,\n                PRIMARY KEY (id),\n                INDEX attribute_id (attribute_id),\n                INDEX event_id (event_id),\n                INDEX org_id (org_id)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n                break;\n            case 'makeAttributeUUIDsUnique':\n                $this->__dropIndex('attributes', 'uuid');\n                $sqlArray[] = 'ALTER TABLE `attributes` ADD UNIQUE (uuid);';\n                break;\n            case 'makeEventUUIDsUnique':\n                $this->__dropIndex('events', 'uuid');\n                $sqlArray[] = 'ALTER TABLE `events` ADD UNIQUE (uuid);';\n                break;\n            case 'cleanSessionTable':\n                $sqlArray[] = 'DELETE FROM cake_sessions WHERE expires < ' . time() . ';';\n                $clean = false;\n                break;\n            case 'destroyAllSessions':\n                $sqlArray[] = 'DELETE FROM cake_sessions;';\n                $clean = false;\n                break;\n            case 'addIPLogging':\n                $sqlArray[] = 'ALTER TABLE `logs` ADD  `ip` varchar(45) COLLATE utf8_bin DEFAULT NULL;';\n                break;\n            case 'addCustomAuth':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `external_auth_required` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `users` ADD `external_auth_key` text COLLATE utf8_bin;';\n                break;\n            case 'x24betaupdates':\n                $sqlArray = array();\n                $sqlArray[] = \"ALTER TABLE `shadow_attributes` ADD  `proposal_to_delete` tinyint(1) NOT NULL DEFAULT 0;\";\n\n                $sqlArray[] = 'ALTER TABLE `logs` MODIFY  `change` text COLLATE utf8_bin NOT NULL;';\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxonomies` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `namespace` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `version` int(11) NOT NULL,\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxonomy_entries` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `taxonomy_predicate_id` int(11) NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `expanded` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    KEY `taxonomy_predicate_id` (`taxonomy_predicate_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxonomy_predicates` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `taxonomy_id` int(11) NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `expanded` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    KEY `taxonomy_id` (`taxonomy_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $sqlArray[] = 'ALTER TABLE `jobs` ADD  `org` text COLLATE utf8_bin NOT NULL;';\n\n                $sqlArray[] = 'ALTER TABLE  `servers` ADD  `name` varchar(255) NOT NULL;';\n\n                $sqlArray[] = 'ALTER TABLE  `sharing_groups` ADD  `sync_user_id` INT( 11 ) NOT NULL DEFAULT \\'0\\' AFTER `org_id`;';\n\n                $sqlArray[] = 'ALTER TABLE `users` ADD  `disabled` BOOLEAN NOT NULL;';\n                $sqlArray[] = 'ALTER TABLE `users` ADD  `expiration` datetime DEFAULT NULL;';\n\n                $sqlArray[] = 'UPDATE `roles` SET `perm_template` = 1 WHERE `perm_site_admin` = 1 OR `perm_admin` = 1;';\n                $sqlArray[] = 'UPDATE `roles` SET `perm_sharing_group` = 1 WHERE `perm_site_admin` = 1 OR `perm_sync` = 1;';\n\n                //create indexes\n                break;\n            case 'indexTables':\n                $fieldsToIndex = array(\n                    'attributes' => array(array('value1', 'INDEX', '255'), array('value2', 'INDEX', '255'), array('event_id', 'INDEX'), array('sharing_group_id', 'INDEX'), array('uuid', 'INDEX')),\n                    'correlations' =>  array(array('org_id', 'INDEX'), array('event_id', 'INDEX'), array('attribute_id', 'INDEX'), array('sharing_group_id', 'INDEX'), array('1_event_id', 'INDEX'), array('1_attribute_id', 'INDEX'), array('a_sharing_group_id', 'INDEX'), array('value', 'FULLTEXT')),\n                    'events' => array(array('info', 'FULLTEXT'), array('sharing_group_id', 'INDEX'), array('org_id', 'INDEX'), array('orgc_id', 'INDEX'), array('uuid', 'INDEX')),\n                    'event_tags' => array(array('event_id', 'INDEX'), array('tag_id', 'INDEX')),\n                    'organisations' => array(array('uuid', 'INDEX'), array('name', 'FULLTEXT')),\n                    'posts' => array(array('post_id', 'INDEX'), array('thread_id', 'INDEX')),\n                    'shadow_attributes' => array(array('value1', 'INDEX', '255'), array('value2', 'INDEX', '255'), array('old_id', 'INDEX'), array('event_id', 'INDEX'), array('uuid', 'INDEX'), array('event_org_id', 'INDEX'), array('event_uuid', 'INDEX')),\n                    'sharing_groups' => array(array('org_id', 'INDEX'), array('sync_user_id', 'INDEX'), array('uuid', 'INDEX'), array('organisation_uuid', 'INDEX')),\n                    'sharing_group_orgs' => array(array('sharing_group_id', 'INDEX'), array('org_id', 'INDEX')),\n                    'sharing_group_servers' => array(array('sharing_group_id', 'INDEX'), array('server_id', 'INDEX')),\n                    'servers' => array(array('org_id', 'INDEX'), array('remote_org_id', 'INDEX')),\n                    'tags' => array(array('name', 'FULLTEXT')),\n                    'threads' => array(array('user_id', 'INDEX'), array('event_id', 'INDEX'), array('org_id', 'INDEX'), array('sharing_group_id', 'INDEX')),\n                    'users' => array(array('org_id', 'INDEX'), array('server_id', 'INDEX'), array('email', 'INDEX')),\n                );\n\n                $version = $this->query('select version();');\n                $version = $version[0][0]['version()'];\n                $version = explode('.', $version);\n                $version[0] = intval($version[0]);\n                $version[1] = intval($version[1]);\n                $downgrade = true;\n                if ($version[0] > 5 || ($version[0] == 5 && $version[1] > 5)) {\n                    $downgrade = false;\n                }\n\n                // keep the fulltext for now, we can change it later to actually use it once we require MySQL 5.6 / or if we decide to move some tables to MyISAM\n\n                foreach ($fieldsToIndex as $table => $fields) {\n                    $downgradeThis = false;\n                    $table_data = $this->query(\"SHOW TABLE STATUS WHERE Name = '\" . $table . \"'\");\n                    if ($downgrade && $table_data[0]['TABLES']['Engine'] !== 'MyISAM') {\n                        $downgradeThis = true;\n                    }\n                    foreach ($fields as $field) {\n                        $extra = '';\n                        $this->__dropIndex($table, $field[0]);\n                        if (isset($field[2])) {\n                            $extra = ' (' . $field[2] . ')';\n                        }\n                        $sqlArray[] = 'ALTER TABLE `' . $table . '` ADD ' . ($downgradeThis ? 'INDEX' : $field[1]) . ' `' . $field[0] . '` (`' . $field[0] . '`' . $extra . ');';\n                    }\n                }\n                break;\n            case 'adminTable':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `admin_settings` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `setting` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"INSERT INTO `admin_settings` (`setting`, `value`) VALUES ('db_version', '2.4.0');\";\n                break;\n            case '2.4.18':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `current_login` INT(11) DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ADD `last_login` INT(11) DEFAULT 0;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `event_delegations` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `requester_org_id` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `message` text,\n                    `distribution` tinyint(4) NOT NULL DEFAULT  '-1',\n                    `sharing_group_id` int(11),\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `event_id` (`event_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.19':\n                $sqlArray[] = \"DELETE FROM `shadow_attributes` WHERE `event_uuid` = '';\";\n                break;\n            case '2.4.20':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `shadow_attribute_correlations` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `value` text NOT NULL,\n                    `distribution` tinyint(4) NOT NULL,\n                    `a_distribution` tinyint(4) NOT NULL,\n                    `sharing_group_id` int(11),\n                    `a_sharing_group_id` int(11),\n                    `attribute_id` int(11) NOT NULL,\n                    `1_shadow_attribute_id` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `1_event_id` int(11) NOT NULL,\n                    `info` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `attribute_id` (`attribute_id`),\n                    KEY `a_sharing_group_id` (`a_sharing_group_id`),\n                    KEY `event_id` (`event_id`),\n                    KEY `1_event_id` (`event_id`),\n                    KEY `sharing_group_id` (`sharing_group_id`),\n                    KEY `1_shadow_attribute_id` (`1_shadow_attribute_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.25':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `feeds` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `provider` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `url` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `rules` text COLLATE utf8_bin NOT NULL,\n                    `enabled` BOOLEAN NOT NULL,\n                    `distribution` tinyint(4) NOT NULL,\n                    `sharing_group_id` int(11) NOT NULL,\n                    `tag_id` int(11) NOT NULL,\n                    `default` tinyint(1) NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.32':\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_tag_editor` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'UPDATE `roles` SET `perm_tag_editor` = 1 WHERE `perm_tagger` = 1;';\n                break;\n            case '2.4.33':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `force_logout` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case '2.4.38':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `warninglists` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT 'string',\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `version` int(11) NOT NULL DEFAULT 1,\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    `warninglist_entry_count` int(11) unsigned DEFAULT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `warninglist_entries` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `value` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                    `warninglist_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `warninglist_types` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `warninglist_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.39':\n                $sqlArray[] = \"ALTER TABLE `users` ADD `certif_public` longtext COLLATE utf8_bin AFTER `gpgkey`;\";\n                $sqlArray[] = 'ALTER TABLE `logs` MODIFY COLUMN `title` text, MODIFY COLUMN `change` text;';\n                break;\n            case '2.4.40':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `favourite_tags` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `tag_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `tag_id` (`tag_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.42':\n                $sqlArray[] = \"ALTER TABLE `attributes` ADD `deleted` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case '2.4.44':\n                $sqlArray[] = \"UPDATE `servers` SET `url` = TRIM(TRAILING '/' FROM `url`);\";\n                break;\n            case '2.4.45':\n                $sqlArray[] = 'ALTER TABLE `users` CHANGE `newsread` `newsread` int(11) unsigned;';\n                $sqlArray[] = 'UPDATE `users` SET `newsread` = 0;';\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `news` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `message` text COLLATE utf8_bin NOT NULL,\n                    `title` text COLLATE utf8_bin NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `date_created` int(11) unsigned NOT NULL,\n                    PRIMARY KEY (`id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case '2.4.49':\n                // table: users\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `server_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `autoalert` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `invited_by` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `nids_sid` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `termsaccepted` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `role_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `change_pw` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `contactalert` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` ALTER COLUMN `disabled` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `users` MODIFY `authkey` varchar(40) COLLATE utf8_bin DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `users` MODIFY `gpgkey` longtext COLLATE utf8_bin;\";\n                // table: events\n                $sqlArray[] = \"ALTER TABLE `events` ALTER COLUMN `publish_timestamp` SET DEFAULT 0;\";\n                // table: jobs\n                $sqlArray[] = \"ALTER TABLE `jobs` ALTER COLUMN `org_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `jobs` MODIFY `process_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                // table: organisations\n                $sqlArray[] = \"ALTER TABLE `organisations` ALTER COLUMN `created_by` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `organisations` MODIFY `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL;\"; // https://github.com/MISP/MISP/pull/1260\n                // table: logs\n                $sqlArray[] = \"ALTER TABLE `logs` MODIFY `title` text CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `logs` MODIFY `change` text CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `logs` MODIFY `description` text CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                // table: servers\n                $sqlArray[] = \"ALTER TABLE `servers` DROP `lastfetchedid`;\"; // git commit hash d4c393897e8666fbbf04443a97d60c508700f5b4\n                $sqlArray[] = \"ALTER TABLE `servers` MODIFY `cert_file` varchar(255) COLLATE utf8_bin DEFAULT NULL;\";\n                // table: feeds\n                $sqlArray[] = \"ALTER TABLE `feeds` ALTER COLUMN `sharing_group_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `feeds` ALTER COLUMN `tag_id` SET DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `feeds` MODIFY `rules` text COLLATE utf8_bin DEFAULT NULL;\";\n                // DB changes to support https://github.com/MISP/MISP/pull/1334\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_delegate` tinyint(1) NOT NULL DEFAULT 0 AFTER `perm_publish`;\";\n                $sqlArray[] = \"UPDATE `roles` SET `perm_delegate` = 1 WHERE `perm_publish` = 1;\";\n                // DB changes to solve https://github.com/MISP/MISP/issues/1354\n                $sqlArray[] = \"ALTER TABLE `taxonomy_entries` MODIFY `expanded` text COLLATE utf8_bin;\";\n                $sqlArray[] = \"ALTER TABLE `taxonomy_predicates` MODIFY `expanded` text COLLATE utf8_bin;\";\n                // Sharing group propagate to instances freely setting\n                $sqlArray[] = \"ALTER TABLE `sharing_groups` ADD `roaming` tinyint(1) NOT NULL DEFAULT 0;\";\n                // table: shadow_attributes\n                $sqlArray[] = \"ALTER TABLE `shadow_attributes` MODIFY `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL;\";\n                // table: tasks\n                $sqlArray[] = \"ALTER TABLE `tasks` CHANGE `job_id` `process_id` varchar(32) DEFAULT NULL;\";\n                // Adding tag org restrictions\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `org_id` int(11) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `tags` ADD INDEX `org_id` (`org_id`);';\n                $this->__dropIndex('tags', 'org_id');\n                break;\n            case '2.4.50':\n                $sqlArray[] = 'ALTER TABLE `cake_sessions` ADD INDEX `expires` (`expires`);';\n                $sqlArray[] = \"ALTER TABLE `users` ADD `certif_public` longtext COLLATE utf8_bin AFTER `gpgkey`;\";\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `client_cert_file` varchar(255) COLLATE utf8_bin DEFAULT NULL;\";\n                $this->__dropIndex('cake_sessions', 'expires');\n                break;\n            case '2.4.51':\n                $sqlArray[] = 'ALTER TABLE `servers` ADD `internal` tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `roles` ADD `default_role` tinyint(1) NOT NULL DEFAULT 0;';\n                break;\n            case '2.4.52':\n                $sqlArray[] = \"ALTER TABLE feeds ADD source_format varchar(255) COLLATE utf8_bin DEFAULT 'misp';\";\n                $sqlArray[] = 'ALTER TABLE feeds ADD fixed_event tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD delta_merge tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD event_id int(11) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD publish tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds ADD override_ids tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = \"ALTER TABLE feeds ADD settings text NOT NULL DEFAULT '';\";\n                break;\n            case '2.4.56':\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxies (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `version` varchar(255) COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxies', 'name');\n                $this->__addIndex('galaxies', 'uuid');\n                $this->__addIndex('galaxies', 'type');\n\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxy_clusters (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `tag_name` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `galaxy_id` int(11) NOT NULL,\n                    `source` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `authors` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxy_clusters', 'value', 255);\n                $this->__addIndex('galaxy_clusters', 'tag_name');\n                $this->__addIndex('galaxy_clusters', 'uuid');\n                $this->__addIndex('galaxy_clusters', 'type');\n\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxy_elements (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `galaxy_cluster_id` int(11) NOT NULL,\n                    `key` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxy_elements', 'key');\n                $this->__addIndex('galaxy_elements', 'value', 255);\n\n                $sqlArray[] =\n                    \"CREATE TABLE IF NOT EXISTS galaxy_reference (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `galaxy_cluster_id` int(11) NOT NULL,\n                    `referenced_galaxy_cluster_id` int(11) NOT NULL,\n                    `referenced_galaxy_cluster_uuid` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `referenced_galaxy_cluster_type` text COLLATE utf8_bin NOT NULL,\n                    `referenced_galaxy_cluster_value` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $this->__addIndex('galaxy_reference', 'galaxy_cluster_id');\n                $this->__addIndex('galaxy_reference', 'referenced_galaxy_cluster_id');\n                $this->__addIndex('galaxy_reference', 'referenced_galaxy_cluster_value', 255);\n                $this->__addIndex('galaxy_reference', 'referenced_galaxy_cluster_type', 255);\n\n                break;\n            case '2.4.57':\n                $sqlArray[] = 'ALTER TABLE tags ADD hide_tag tinyint(1) NOT NULL DEFAULT 0;';\n                // new indeces to match the changes in #1766\n                $this->__dropIndex('correlations', '1_event_id');\n                $this->__addIndex('correlations', '1_event_id');\n                $this->__addIndex('warninglist_entries', 'warninglist_id');\n                break;\n            case '2.4.58':\n                $sqlArray[] = \"ALTER TABLE `events` ADD `disable_correlation` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `attributes` ADD `disable_correlation` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case '2.4.59':\n                $sqlArray[] = \"ALTER TABLE taxonomy_entries ADD colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '';\";\n                $sqlArray[] = \"ALTER TABLE taxonomy_predicates ADD colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '';\";\n                break;\n            case '2.4.60':\n                if ($this->isMysql()) {\n                    $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `attribute_tags` (\n                                `id` int(11) NOT NULL AUTO_INCREMENT,\n                                `attribute_id` int(11) NOT NULL,\n                                `event_id` int(11) NOT NULL,\n                                `tag_id` int(11) NOT NULL,\n                                PRIMARY KEY (`id`)\n                            ) ENGINE=InnoDB DEFAULT CHARSET=utf8;';\n                    $sqlArray[] = 'ALTER TABLE `attribute_tags` ADD INDEX `attribute_id` (`attribute_id`);';\n                    $sqlArray[] = 'ALTER TABLE `attribute_tags` ADD INDEX `event_id` (`event_id`);';\n                    $sqlArray[] = 'ALTER TABLE `attribute_tags` ADD INDEX `tag_id` (`tag_id`);';\n                } else {\n                    $sqlArray[] = 'CREATE TABLE IF NOT EXISTS attribute_tags (\n                                id bigserial NOT NULL,\n                                attribute_id bigint NOT NULL,\n                                event_id bigint NOT NULL,\n                                tag_id bigint NOT NULL,\n                                PRIMARY KEY (id)\n                            );';\n                    $sqlArray[] = 'CREATE INDEX idx_attribute_tags_attribute_id ON attribute_tags (attribute_id);';\n                    $sqlArray[] = 'CREATE INDEX idx_attribute_tags_event_id ON attribute_tags (event_id);';\n                    $sqlArray[] = 'CREATE INDEX idx_attribute_tags_tag_id ON attribute_tags (tag_id);';\n                }\n                break;\n            case '2.4.61':\n                $sqlArray[] = 'ALTER TABLE feeds ADD input_source varchar(255) COLLATE utf8_bin NOT NULL DEFAULT \"network\";';\n                $sqlArray[] = 'ALTER TABLE feeds ADD delete_local_file tinyint(1) DEFAULT 0;';\n                $indexArray[] = array('feeds', 'input_source');\n                break;\n            case '2.4.62':\n                $sqlArray[] = 'ALTER TABLE logs CHANGE `org` `org` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE logs CHANGE `email` `email` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE logs CHANGE `change` `change` text COLLATE utf8_bin NOT NULL DEFAULT \"\";';\n                break;\n            case '2.4.63':\n                $sqlArray[] = 'ALTER TABLE events DROP COLUMN org;';\n                $sqlArray[] = 'ALTER TABLE events DROP COLUMN orgc;';\n                $sqlArray[] = 'ALTER TABLE event_blacklists CHANGE comment comment TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci;';\n                break;\n            case '2.4.64':\n                $indexArray[] = array('feeds', 'input_source');\n                $indexArray[] = array('attributes', 'value1', 255);\n                $indexArray[] = array('attributes', 'value2', 255);\n                $indexArray[] = array('attributes', 'type');\n                $indexArray[] = array('galaxy_reference', 'galaxy_cluster_id');\n                $indexArray[] = array('galaxy_reference', 'referenced_galaxy_cluster_id');\n                $indexArray[] = array('galaxy_reference', 'referenced_galaxy_cluster_value', 255);\n                $indexArray[] = array('galaxy_reference', 'referenced_galaxy_cluster_type', 255);\n                $indexArray[] = array('correlations', '1_event_id');\n                $indexArray[] = array('warninglist_entries', 'warninglist_id');\n                $indexArray[] = array('galaxy_clusters', 'value', 255);\n                $indexArray[] = array('galaxy_clusters', 'tag_name');\n                $indexArray[] = array('galaxy_clusters', 'uuid');\n                $indexArray[] = array('galaxy_clusters', 'type');\n                $indexArray[] = array('galaxies', 'name');\n                $indexArray[] = array('galaxies', 'uuid');\n                $indexArray[] = array('galaxies', 'type');\n                break;\n            case '2.4.65':\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `enabled` `enabled` tinyint(1) DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `default` `default` tinyint(1) DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `distribution` `distribution` tinyint(4) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE feeds CHANGE `sharing_group_id` `sharing_group_id` int(11) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE attributes CHANGE `comment` `comment` text COLLATE utf8_bin;';\n                break;\n            case '2.4.66':\n                $sqlArray[] = 'ALTER TABLE shadow_attributes CHANGE old_id old_id int(11) DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE sightings ADD COLUMN uuid varchar(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE sightings ADD COLUMN source varchar(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE sightings ADD COLUMN type int(11) DEFAULT 0;';\n                $indexArray[] = array('sightings', 'uuid');\n                $indexArray[] = array('sightings', 'source');\n                $indexArray[] = array('sightings', 'type');\n                $indexArray[] = array('attributes', 'category');\n                $indexArray[] = array('shadow_attributes', 'category');\n                $indexArray[] = array('shadow_attributes', 'type');\n                break;\n            case '2.4.67':\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_sighting` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'UPDATE `roles` SET `perm_sighting` = 1 WHERE `perm_add` = 1;';\n                break;\n            case '2.4.68':\n                $sqlArray[] = 'ALTER TABLE events CHANGE attribute_count attribute_count int(11) unsigned DEFAULT 0;';\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `event_blacklists` (\n                  `id` int(11) NOT NULL AUTO_INCREMENT,\n                  `event_uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                  `created` datetime NOT NULL,\n                  `event_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                  `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                  `event_orgc` VARCHAR( 255 ) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n                  PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                $indexArray[] = array('event_blacklists', 'event_uuid');\n                $indexArray[] = array('event_blacklists', 'event_orgc');\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `org_blacklists` (\n                  `id` int(11) NOT NULL AUTO_INCREMENT,\n                  `org_uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                  `created` datetime NOT NULL,\n                  `org_name` varchar(255) COLLATE utf8_bin NOT NULL,\n                  `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                  PRIMARY KEY (`id`),\n                  INDEX `org_uuid` (`org_uuid`),\n                  INDEX `org_name` (`org_name`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;';\n                $indexArray[] = array('org_blacklists', 'org_uuid');\n                $indexArray[] = array('org_blacklists', 'org_name');\n                $sqlArray[] = \"ALTER TABLE shadow_attributes CHANGE proposal_to_delete proposal_to_delete BOOLEAN DEFAULT 0\";\n                $sqlArray[] = \"ALTER TABLE taxonomy_predicates CHANGE colour colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin;\";\n                $sqlArray[] = \"ALTER TABLE taxonomy_entries CHANGE colour colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin;\";\n                break;\n            case '2.4.69':\n                $sqlArray[] = \"ALTER TABLE taxonomy_entries CHANGE colour colour varchar(7) CHARACTER SET utf8 COLLATE utf8_bin;\";\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_created bigint(20);\";\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_modified bigint(20);\";\n                break;\n            case '2.4.71':\n                $sqlArray[] = \"UPDATE attributes SET comment = '' WHERE comment is NULL;\";\n                $sqlArray[] = \"ALTER TABLE attributes CHANGE comment comment text COLLATE utf8_bin NOT NULL;\";\n                break;\n            case '2.4.72':\n                $sqlArray[] = 'ALTER TABLE feeds ADD lookup_visible tinyint(1) DEFAULT 0;';\n                break;\n            case '2.4.73':\n                $sqlArray[] = 'ALTER TABLE `servers` ADD `unpublish_event` tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `servers` ADD `publish_without_email` tinyint(1) NOT NULL DEFAULT 0;';\n                break;\n            case '2.4.75':\n                $this->__dropIndex('attributes', 'value1');\n                $this->__dropIndex('attributes', 'value2');\n                $this->__addIndex('attributes', 'value1', 255);\n                $this->__addIndex('attributes', 'value2', 255);\n                break;\n            case '2.4.77':\n                $sqlArray[] = 'ALTER TABLE `users` CHANGE `password` `password` VARCHAR(255) COLLATE utf8_bin NOT NULL;';\n                break;\n            case '2.4.78':\n                $sqlArray[] = \"ALTER TABLE galaxy_clusters ADD COLUMN version int(11) DEFAULT 0;\";\n                $this->__addIndex('galaxy_clusters', 'version');\n                $this->__addIndex('galaxy_clusters', 'galaxy_id');\n                $this->__addIndex('galaxy_elements', 'galaxy_cluster_id');\n                break;\n            case '2.4.80':\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS objects (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `meta-category` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `description` text CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `template_uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `template_version` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `distribution` tinyint(4) NOT NULL DEFAULT 0,\n                    `sharing_group_id` int(11),\n                    `comment` text COLLATE utf8_bin NOT NULL,\n                    `deleted` TINYINT(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`),\n                    INDEX `template_uuid` (`template_uuid`),\n                    INDEX `template_version` (`template_version`),\n                    INDEX `meta-category` (`meta-category`),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `timestamp` (`timestamp`),\n                    INDEX `distribution` (`distribution`),\n                    INDEX `sharing_group_id` (`sharing_group_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_references (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `object_id` int(11) NOT NULL,\n                    `event_id` int(11) NOT NULL,\n                    `object_uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `referenced_uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `referenced_id` int(11) NOT NULL,\n                    `referenced_type` int(11) NOT NULL DEFAULT 0,\n                    `relationship_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `comment` text COLLATE utf8_bin NOT NULL,\n                    `deleted` TINYINT(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `object_uuid` (`object_uuid`),\n                  INDEX `referenced_uuid` (`referenced_uuid`),\n                  INDEX `timestamp` (`timestamp`),\n                  INDEX `object_id` (`object_id`),\n                  INDEX `referenced_id` (`referenced_id`),\n                  INDEX `relationship_type` (`relationship_type`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_relationships (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `version` int(11) NOT NULL,\n                    `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `description` text COLLATE utf8_bin NOT NULL,\n                    `format` text COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_templates (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `meta-category` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `description` text COLLATE utf8_bin,\n                    `version` int(11) NOT NULL,\n                    `requirements` text COLLATE utf8_bin,\n                    `fixed` tinyint(1) NOT NULL DEFAULT 0,\n                    `active` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `name` (`name`),\n                    INDEX `meta-category` (`meta-category`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS object_template_elements (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `object_template_id` int(11) NOT NULL,\n                    `object_relation` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `ui-priority` int(11) NOT NULL,\n                    `categories` text COLLATE utf8_bin,\n                    `sane_default` text COLLATE utf8_bin,\n                    `values_list` text COLLATE utf8_bin,\n                    `description` text COLLATE utf8_bin,\n                    `disable_correlation` tinyint(1) NOT NULL DEFAULT 0,\n                    `multiple` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `object_relation` (`object_relation`),\n                    INDEX `type` (`type`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = 'ALTER TABLE `logs` CHANGE `model` `model` VARCHAR(80) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL;';\n                $sqlArray[] = 'ALTER TABLE `logs` CHANGE `action` `action` VARCHAR(80) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL;';\n\n                $sqlArray[] = 'ALTER TABLE attributes ADD object_id int(11) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE attributes ADD object_relation varchar(255) COLLATE utf8_bin;';\n\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_object_template` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'UPDATE `roles` SET `perm_object_template` = 1 WHERE `perm_site_admin` = 1;';\n\n                $indexArray[] = array('attributes', 'object_id');\n                $indexArray[] = array('attributes', 'object_relation');\n                break;\n            case '2.4.81':\n                $sqlArray[] = 'ALTER TABLE `galaxy_clusters` ADD `version` INT NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `galaxies` ADD `icon` VARCHAR(255) COLLATE utf8_bin DEFAULT \"\";';\n                break;\n            case '2.4.82':\n                $sqlArray[] = \"ALTER TABLE organisations ADD restricted_to_domain text COLLATE utf8_bin;\";\n                break;\n            case '2.4.83':\n                $sqlArray[] = \"ALTER TABLE object_template_elements CHANGE `disable_correlation` `disable_correlation` text COLLATE utf8_bin;\";\n                break;\n            case '2.4.84':\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `user_id` int(11) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `tags` ADD INDEX `user_id` (`user_id`);';\n                break;\n            case '2.4.85':\n                $sqlArray[] = \"ALTER TABLE `shadow_attributes` ADD `disable_correlation` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE object_template_elements CHANGE `disable_correlation` `disable_correlation` text COLLATE utf8_bin;\";\n                // yes, this may look stupid as hell to index a boolean flag - but thanks to the stupidity of MySQL/MariaDB this will\n                // stop blocking other indexes to be used in queries where we also tests for the deleted flag.\n                $indexArray[] = array('attributes', 'deleted');\n                break;\n            case '2.4.86':\n                break;\n            case '2.4.87':\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `headers` TEXT COLLATE utf8_bin;\";\n                break;\n            case 1:\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `user_id` int(11) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = 'ALTER TABLE `tags` ADD INDEX `user_id` (`user_id`);';\n                break;\n            case 2:\n            // rerun missing db entries\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_created bigint(20);\";\n                $sqlArray[] = \"ALTER TABLE users ADD COLUMN date_modified bigint(20);\";\n                break;\n            case 3:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `fuzzy_correlate_ssdeep` (\n                                            `id` int(11) NOT NULL AUTO_INCREMENT,\n                                            `chunk` varchar(12) NOT NULL,\n                                            `attribute_id` int(11) NOT NULL,\n                                            PRIMARY KEY (`id`)\n                                            ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $this->__addIndex('fuzzy_correlate_ssdeep', 'chunk');\n                $this->__addIndex('fuzzy_correlate_ssdeep', 'attribute_id');\n                break;\n            case 4:\n                $sqlArray[] = 'ALTER TABLE `roles` ADD `memory_limit` VARCHAR(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = 'ALTER TABLE `roles` ADD `max_execution_time` VARCHAR(255) COLLATE utf8_bin DEFAULT \"\";';\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `restricted_to_site_admin` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 5:\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `caching_enabled` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 6:\n                $sqlArray[] = \"ALTER TABLE `events` ADD `extends_uuid` varchar(40) COLLATE utf8_bin DEFAULT '';\";\n                $indexArray[] = array('events', 'extends_uuid');\n                break;\n            case 7:\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `noticelists` (\n                        `id` int(11) NOT NULL AUTO_INCREMENT,\n                        `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n                        `expanded_name` text COLLATE utf8_unicode_ci NOT NULL,\n                        `ref` text COLLATE utf8_unicode_ci,\n                        `geographical_area` varchar(255) COLLATE utf8_unicode_ci,\n                        `version` int(11) NOT NULL DEFAULT 1,\n                        `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                        PRIMARY KEY (`id`),\n                        INDEX `name` (`name`),\n                        INDEX `geographical_area` (`geographical_area`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;';\n                $sqlArray[] = 'CREATE TABLE IF NOT EXISTS `noticelist_entries` (\n                        `id` int(11) NOT NULL AUTO_INCREMENT,\n                        `noticelist_id` int(11) NOT NULL,\n                        `data` text COLLATE utf8_unicode_ci NOT NULL,\n                        PRIMARY KEY (`id`),\n                        INDEX `noticelist_id` (`noticelist_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;';\n            break;\n            case 9:\n                $sqlArray[] = 'ALTER TABLE galaxies ADD namespace varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT \"misp\";';\n                $indexArray[] = array('galaxies', 'namespace');\n                break;\n            case 10:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_publish_zmq` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 11:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_locks (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `event_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 12:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `skip_proxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 13:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_graph (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `event_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `network_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `network_json` MEDIUMTEXT NOT NULL,\n                    `preview_img` MEDIUMTEXT,\n                    PRIMARY KEY (id),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 14:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `user_settings` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `setting` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text COLLATE utf8_bin NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    INDEX `setting` (`setting`),\n                    INDEX `user_id` (`user_id`),\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 15:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_graph (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `event_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `network_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `network_json` MEDIUMTEXT NOT NULL,\n                    `preview_img` MEDIUMTEXT,\n                    PRIMARY KEY (id),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 18:\n                $sqlArray[] = 'ALTER TABLE `taxonomy_predicates` ADD COLUMN description text CHARACTER SET UTF8 collate utf8_bin;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_entries` ADD COLUMN description text CHARACTER SET UTF8 collate utf8_bin;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_predicates` ADD COLUMN exclusive tinyint(1) DEFAULT 0;';\n                break;\n            case 19:\n                $sqlArray[] = 'ALTER TABLE `taxonomies` ADD COLUMN exclusive tinyint(1) DEFAULT 0;';\n                break;\n            case 20:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `skip_proxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 21:\n                $sqlArray[] = 'ALTER TABLE `tags` ADD COLUMN numerical_value int(11) NULL;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_predicates` ADD COLUMN numerical_value int(11) NULL;';\n                $sqlArray[] = 'ALTER TABLE `taxonomy_entries` ADD COLUMN numerical_value int(11) NULL;';\n                break;\n            case 22:\n                $sqlArray[] = 'ALTER TABLE `object_references` MODIFY `deleted` tinyint(1) NOT NULL default 0;';\n                break;\n            case 24:\n                $this->GalaxyCluster = ClassRegistry::init('GalaxyCluster');\n                if (empty($this->GalaxyCluster->schema('collection_uuid'))) {\n                    $sqlArray[] = 'ALTER TABLE `galaxy_clusters` CHANGE `uuid` `collection_uuid` varchar(255) COLLATE utf8_bin NOT NULL;';\n                    $sqlArray[] = 'ALTER TABLE `galaxy_clusters` ADD COLUMN `uuid` varchar(255) COLLATE utf8_bin NOT NULL default \\'\\';';\n                }\n                break;\n            case 25:\n                $this->__dropIndex('galaxy_clusters', 'uuid');\n                $this->__addIndex('galaxy_clusters', 'uuid');\n                $this->__addIndex('galaxy_clusters', 'collection_uuid');\n                break;\n            case 26:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS tag_collections (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    `name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n                    `description` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                    `all_orgs` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `org_id` (`org_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS tag_collection_tags (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `tag_collection_id` int(11) NOT NULL,\n                    `tag_id` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `uuid` (`tag_collection_id`),\n                    INDEX `user_id` (`tag_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 27:\n                $sqlArray[] = 'ALTER TABLE `tags` CHANGE `org_id` `org_id` int(11) NOT NULL DEFAULT 0;';\n                break;\n            case 28:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `caching_enabled` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 29:\n                $sqlArray[] = \"ALTER TABLE `galaxies` ADD `kill_chain_order` text NOT NULL;\";\n                break;\n            case 30:\n                $sqlArray[] = \"ALTER TABLE `galaxies` MODIFY COLUMN `kill_chain_order` text\";\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `force_to_ids` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 31:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `rest_client_histories` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `user_id` int(11) NOT NULL,\n                    `headers` text,\n                    `body` text,\n                    `url` text,\n                    `http_method` varchar(255),\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    `use_full_path` tinyint(1) DEFAULT 0,\n                    `show_result` tinyint(1) DEFAULT 0,\n                    `skip_ssl` tinyint(1) DEFAULT 0,\n                    `outcome` int(11) NOT NULL,\n                    `bookmark` tinyint(1) NOT NULL DEFAUlT 0,\n                    `bookmark_name` varchar(255) NULL DEFAULT '',\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `user_id` (`user_id`),\n                    KEY `timestamp` (`timestamp`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                break;\n            case 32:\n                $sqlArray[] = \"ALTER TABLE `taxonomies` ADD `required` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 33:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_publish_kafka` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 35:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `notification_logs` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `org_id` int(11) NOT NULL,\n                    `type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `timestamp` int(11) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (`id`),\n                    KEY `org_id` (`org_id`),\n                    KEY `type` (`type`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n                    break;\n            case 36:\n                $sqlArray[] = \"ALTER TABLE `event_tags` ADD `local` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `attribute_tags` ADD `local` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 37:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS decaying_models (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin DEFAULT NULL,\n                    `name` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `parameters` text,\n                    `attribute_types` text,\n                    `description` text,\n                    `org_id` int(11),\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    `all_orgs` tinyint(1) NOT NULL DEFAULT 1,\n                    `ref` text COLLATE utf8_unicode_ci,\n                    `formula` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `version` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                    `default` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `name` (`name`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `enabled` (`enabled`),\n                    INDEX `all_orgs` (`all_orgs`),\n                    INDEX `version` (`version`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS decaying_model_mappings (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `attribute_type` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `model_id` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `model_id` (`model_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_decaying` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"UPDATE `roles` SET `perm_decaying`=1 WHERE `perm_sighting`=1;\";\n                break;\n            case 38:\n                $sqlArray[] = \"ALTER TABLE servers ADD  priority int(11) NOT NULL DEFAULT 0;\";\n                $indexArray[] = array('servers', 'priority');\n                break;\n            case 39:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS user_settings (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `setting` varchar(255) COLLATE utf8_bin NOT NULL,\n                    `value` text,\n                    `user_id` int(11) NOT NULL,\n                    `timestamp` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `key` (`key`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 40:\n                $sqlArray[] = \"ALTER TABLE `user_settings` ADD `timestamp` int(11) NOT NULL;\";\n                $indexArray[] = array('user_settings', 'timestamp');\n                break;\n            case 41:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `enforce_rate_limit` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `rate_limit_count` int(11) NOT NULL DEFAULT 0;\";\n                break;\n            case 42:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS sightingdbs (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(255) NOT NULL,\n                    `description` text,\n                    `owner` varchar(255) DEFAULT '',\n                    `host` varchar(255) DEFAULT 'http://localhost',\n                    `port` int(11) DEFAULT 9999,\n                    `timestamp` int(11) NOT NULL,\n                    `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                    `skip_proxy` tinyint(1) NOT NULL DEFAULT 0,\n                    `ssl_skip_verification` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`),\n                    INDEX `owner` (`owner`),\n                    INDEX `host` (`host`),\n                    INDEX `port` (`port`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS sightingdb_orgs (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `sightingdb_id` int(11) NOT NULL,\n                    `org_id` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `sightingdb_id` (`sightingdb_id`),\n                    INDEX `org_id` (`org_id`)\n                ) ENGINE=InnoDB;\";\n                break;\n            case 43:\n                $sqlArray[] = \"ALTER TABLE sightingdbs ADD namespace varchar(255) DEFAULT '';\";\n                break;\n            case 44:\n                $sqlArray[] = \"ALTER TABLE object_template_elements CHANGE `disable_correlation` `disable_correlation` tinyint(1);\";\n                break;\n            case 45:\n                $sqlArray[] = \"ALTER TABLE `events` ADD `sighting_timestamp` int(11) NOT NULL DEFAULT 0 AFTER `publish_timestamp`;\";\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `push_sightings` tinyint(1) NOT NULL DEFAULT 0 AFTER `pull`;\";\n                break;\n            case 47:\n                $this->__addIndex('tags', 'numerical_value');\n                $this->__addIndex('taxonomy_predicates', 'numerical_value');\n                $this->__addIndex('taxonomy_entries', 'numerical_value');\n                break;\n            case 49:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS dashboards (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `name` varchar(191) NOT NULL,\n                    `description` text,\n                    `default` tinyint(1) NOT NULL DEFAULT 0,\n                    `selectable` tinyint(1) NOT NULL DEFAULT 0,\n                    `user_id` int(11) NOT NULL DEFAULT 0,\n                    `restrict_to_org_id` int(11) NOT NULL DEFAULT 0,\n                    `restrict_to_role_id` int(11) NOT NULL DEFAULT 0,\n                    `restrict_to_permission_flag` varchar(191) NOT NULL DEFAULT '',\n                    `value` text,\n                    `timestamp` int(11) NOT NULL,\n                    PRIMARY KEY (id),\n                    INDEX `name` (`name`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `user_id` (`user_id`),\n                    INDEX `restrict_to_org_id` (`restrict_to_org_id`),\n                    INDEX `restrict_to_permission_flag` (`restrict_to_permission_flag`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 50:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS inbox (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `title` varchar(191) NOT NULL,\n                    `type` varchar(191) NOT NULL,\n                    `ip` varchar(191) NOT NULL,\n                    `user_agent` text,\n                    `user_agent_sha256` varchar(64) NOT NULL,\n                    `comment` text,\n                    `deleted` tinyint(1) NOT NULL DEFAULT 0,\n                    `timestamp` int(11) NOT NULL,\n                    `store_as_file` tinyint(1) NOT NULL DEFAULT 0,\n                    `data` longtext,\n                    PRIMARY KEY (id),\n                    INDEX `title` (`title`),\n                    INDEX `type` (`type`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `user_agent_sha256` (`user_agent_sha256`),\n                    INDEX `ip` (`ip`),\n                    INDEX `timestamp` (`timestamp`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 51:\n                $sqlArray[] = \"ALTER TABLE `feeds` ADD `orgc_id` int(11) NOT NULL DEFAULT 0\";\n                $indexArray[] = array('feeds', 'orgc_id');\n                break;\n            case 52:\n                if (!empty($this->query(\"SHOW COLUMNS FROM `admin_settings` LIKE 'key';\"))) {\n                    $sqlArray[] = \"ALTER TABLE admin_settings CHANGE `key` `setting` varchar(255) COLLATE utf8_bin NOT NULL;\";\n                    $indexArray[] = array('admin_settings', 'setting');\n                }\n                break;\n            case 53:\n                if (!empty($this->query(\"SHOW COLUMNS FROM `user_settings` LIKE 'key';\"))) {\n                    $sqlArray[] = \"ALTER TABLE user_settings CHANGE `key` `setting` varchar(255) COLLATE utf8_bin NOT NULL;\";\n                    $indexArray[] = array('user_settings', 'setting');\n                }\n                break;\n            case 54:\n                $sqlArray[] = \"ALTER TABLE `sightingdbs` MODIFY `timestamp` int(11) NOT NULL DEFAULT 0;\";\n                break;\n            case 55:\n                // index is not used in any SQL query\n                $this->__dropIndex('correlations', 'value');\n                // these index can be theoretically used, but probably just in very rare occasion\n                $this->__dropIndex('correlations', 'org_id');\n                $this->__dropIndex('correlations', 'sharing_group_id');\n                $this->__dropIndex('correlations', 'a_sharing_group_id');\n                break;\n            case 56:\n                //rename tables\n                $sqlArray[] = \"RENAME TABLE `org_blacklists` TO `org_blocklists`;\";\n                $sqlArray[] = \"RENAME TABLE `event_blacklists` TO `event_blocklists`;\";\n                $sqlArray[] = \"RENAME TABLE `whitelist` TO `allowedlist`;\";\n                break;\n            case 57:\n                $sqlArray[] = sprintf(\"INSERT INTO `admin_settings` (`setting`, `value`) VALUES ('fix_login', %s);\", time());\n                break;\n            case 58:\n                $sqlArray[] = \"ALTER TABLE `warninglists` MODIFY COLUMN `warninglist_entry_count` int(11) unsigned NOT NULL DEFAULT 0;\";\n                break;\n            case 59:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS event_reports (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                    `event_id` int(11) NOT NULL,\n                    `name` varchar(255) NOT NULL,\n                    `content` text,\n                    `distribution` tinyint(4) NOT NULL DEFAULT 0,\n                    `sharing_group_id` int(11),\n                    `timestamp` int(11) NOT NULL,\n                    `deleted` tinyint(1) NOT NULL DEFAULT 0,\n                    PRIMARY KEY (id),\n                    CONSTRAINT u_uuid UNIQUE (uuid),\n                    INDEX `name` (`name`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 60:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `attachment_scans` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `type` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `attribute_id` int(11) NOT NULL,\n                    `infected` tinyint(1) NOT NULL,\n                    `malware_name`  varchar(191) NULL,\n                    `timestamp` int(11) NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `index` (`type`, `attribute_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\";\n                break;\n            case 61:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `auth_keys` (\n                    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8mb4_unicode_ci NOT NULL,\n                    `authkey` varchar(72) CHARACTER SET ascii DEFAULT NULL,\n                    `authkey_start` varchar(4) CHARACTER SET ascii DEFAULT NULL,\n                    `authkey_end` varchar(4) CHARACTER SET ascii DEFAULT NULL,\n                    `created` int(10) unsigned NOT NULL,\n                    `expiration` int(10) unsigned NOT NULL,\n                    `user_id` int(10) unsigned NOT NULL,\n                    `comment` text COLLATE utf8mb4_unicode_ci,\n                    PRIMARY KEY (`id`),\n                    KEY `authkey_start` (`authkey_start`),\n                    KEY `authkey_end` (`authkey_end`),\n                    KEY `created` (`created`),\n                    KEY `expiration` (`expiration`),\n                    KEY `user_id` (`user_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 62:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `authkey` varchar(72) CHARACTER SET ascii NOT NULL\";\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `authkey_start` varchar(4) CHARACTER SET ascii NOT NULL\";\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `authkey_end` varchar(4) CHARACTER SET ascii NOT NULL\";\n                $sqlArray[] = \"ALTER TABLE `auth_keys` MODIFY COLUMN `comment` text COLLATE utf8mb4_unicode_ci\";\n                $sqlArray[] = \"ALTER TABLE `attachment_scans` MODIFY COLUMN `malware_name` varchar(191) NULL\";\n                break;\n            case 63:\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `distribution` tinyint(4) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `sharing_group_id` int(11);\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `org_id` int(11) NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `orgc_id` int(11) NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `default` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `locked` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `extends_uuid` varchar(40) COLLATE utf8_bin DEFAULT '';\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `extends_version` int(11) DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `published` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` ADD `deleted` TINYINT(1) NOT NULL DEFAULT 0\";\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_galaxy_editor` tinyint(1) NOT NULL DEFAULT 0;\";\n\n                $sqlArray[] = \"UPDATE `roles` SET `perm_galaxy_editor`=1 WHERE `perm_tag_editor`=1;\";\n                $sqlArray[] = \"UPDATE `galaxy_clusters` SET `distribution`=3, `default`=1 WHERE `org_id`=0;\";\n\n                $sqlArray[] = \"ALTER TABLE `galaxy_reference` RENAME `galaxy_cluster_relations`;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `galaxy_cluster_uuid` varchar(40) COLLATE utf8_bin NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `distribution` tinyint(4) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `sharing_group_id` int(11);\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` ADD `default` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `galaxy_cluster_relations` DROP COLUMN `referenced_galaxy_cluster_value`;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `galaxy_cluster_relation_tags` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `galaxy_cluster_relation_id` int(11) NOT NULL,\n                    `tag_id` int(11) NOT NULL,\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `is_galaxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `is_custom_galaxy` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"UPDATE `tags` SET `is_galaxy`=1 WHERE `name` LIKE 'misp-galaxy:%';\";\n                $sqlArray[] = \"UPDATE `tags` SET `is_custom_galaxy`=1 WHERE `name` REGEXP '^misp-galaxy:[^:=\\\"]+=\\\"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\\"$';\";\n\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `push_galaxy_clusters` tinyint(1) NOT NULL DEFAULT 0 AFTER `push_sightings`;\";\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `pull_galaxy_clusters` tinyint(1) NOT NULL DEFAULT 0 AFTER `push_galaxy_clusters`;\";\n\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `galaxy_cluster_blocklists` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `cluster_uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                    `created` datetime NOT NULL,\n                    `cluster_info` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n                    `comment` TEXT CHARACTER SET utf8 COLLATE utf8_unicode_ci,\n                    `cluster_orgc` VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\";\n\n                $indexArray[] = array('galaxy_clusters', 'org_id');\n                $indexArray[] = array('galaxy_clusters', 'orgc_id');\n                $indexArray[] = array('galaxy_clusters', 'sharing_group_id');\n                $indexArray[] = array('galaxy_clusters', 'extends_uuid');\n                $indexArray[] = array('galaxy_clusters', 'extends_version');\n                $indexArray[] = array('galaxy_clusters', 'default');\n                $indexArray[] = array('galaxy_cluster_relations', 'galaxy_cluster_uuid');\n                $indexArray[] = array('galaxy_cluster_relations', 'sharing_group_id');\n                $indexArray[] = array('galaxy_cluster_relations', 'default');\n                $indexArray[] = array('galaxy_cluster_relation_tags', 'galaxy_cluster_relation_id');\n                $indexArray[] = array('galaxy_cluster_relation_tags', 'tag_id');\n                $indexArray[] = array('galaxy_cluster_blocklists', 'cluster_uuid');\n                $indexArray[] = array('galaxy_cluster_blocklists', 'cluster_orgc');\n                break;\n            case 64:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `cerebrates` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `name` varchar(191) NOT NULL,\n                    `url` varchar(255) NOT NULL,\n                    `authkey` varchar(40) CHARACTER SET ascii COLLATE ascii_general_ci NULL,\n                    `open` tinyint(1) DEFAULT 0,\n                    `org_id` int(11) NOT NULL,\n                    `pull_orgs` tinyint(1) DEFAULT 0,\n                    `pull_sharing_groups` tinyint(1) DEFAULT 0,\n                    `self_signed` tinyint(1) DEFAULT 0,\n                    `cert_file` varchar(255) DEFAULT NULL,\n                    `client_cert_file` varchar(255) DEFAULT NULL,\n                    `internal` tinyint(1) NOT NULL DEFAULT 0,\n                    `skip_proxy` tinyint(1) NOT NULL DEFAULT 0,\n                    `description` text,\n                    PRIMARY KEY (`id`),\n                    KEY `url` (`url`),\n                    KEY `org_id` (`org_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 65:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `correlation_exclusions` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `value` text NOT NULL,\n                    `from_json` tinyint(1) default 0,\n                    PRIMARY KEY (`id`),\n                    UNIQUE INDEX `value` (`value`(191))\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 66:\n                $sqlArray[] = \"ALTER TABLE `galaxy_clusters` MODIFY COLUMN `tag_name` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '';\";\n                $indexArray[] = ['event_reports', 'event_id'];\n                break;\n            case 67:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` ADD `allowed_ips` text DEFAULT NULL;\";\n                break;\n            case 68:\n                $sqlArray[] = \"ALTER TABLE `correlation_exclusions` ADD `comment` text DEFAULT NULL;\";\n                break;\n            case 69:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `audit_logs` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `created` datetime NOT NULL,\n                      `user_id` int(11) NOT NULL,\n                      `org_id` int(11) NOT NULL,\n                      `authkey_id` int(11) DEFAULT NULL,\n                      `ip` varbinary(16) DEFAULT NULL,\n                      `request_type` tinyint NOT NULL,\n                      `request_id` varchar(255) DEFAULT NULL,\n                      `action` varchar(20) NOT NULL,\n                      `model` varchar(80) NOT NULL,\n                      `model_id` int(11) NOT NULL,\n                      `model_title` text DEFAULT NULL,\n                      `event_id` int(11) NULL,\n                      `change` blob,\n                      PRIMARY KEY (`id`),\n                      INDEX `event_id` (`event_id`),\n                      INDEX `model_id` (`model_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 70:\n                $sqlArray[] = \"ALTER TABLE `galaxies` ADD `enabled` tinyint(1) NOT NULL DEFAULT 1 AFTER `namespace`;\";\n                break;\n            case 71:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_warninglist` tinyint(1) NOT NULL DEFAULT 0;\";\n                $sqlArray[] = \"ALTER TABLE `warninglist_entries` ADD `comment` text DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `warninglists` ADD `default` tinyint(1) NOT NULL DEFAULT 1, ADD `category` varchar(20) NOT NULL DEFAULT 'false_positive', DROP COLUMN `warninglist_entry_count`\";\n                break;\n            case 72:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` ADD `read_only` tinyint(1) NOT NULL DEFAULT 0 AFTER `expiration`;\";\n                break;\n            case 73:\n                $this->__dropIndex('user_settings', 'timestamp'); // index is not used\n                $sqlArray[] = \"ALTER TABLE `user_settings` ADD UNIQUE INDEX `unique_setting` (`user_id`, `setting`)\";\n                break;\n            case 74:\n                $sqlArray[] = \"ALTER TABLE `users` MODIFY COLUMN `change_pw` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 75:\n                $this->__addIndex('object_references', 'event_id');\n                $this->__dropIndex('object_references', 'timestamp');\n                $this->__dropIndex('object_references', 'source_uuid');\n                $this->__dropIndex('object_references', 'relationship_type');\n                $this->__dropIndex('object_references', 'referenced_uuid');\n                break;\n            case 76:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `system_settings` (\n                      `setting` varchar(255) NOT NULL,\n                      `value` blob NOT NULL,\n                      PRIMARY KEY (`setting`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                $sqlArray[] = \"ALTER TABLE `servers` MODIFY COLUMN `authkey` VARBINARY(255) NOT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `cerebrates` MODIFY COLUMN `authkey` VARBINARY(255) NOT NULL;\";\n                break;\n            case 77:\n                $sqlArray[] = \"ALTER TABLE `tags` ADD `local_only` tinyint(1) NOT NULL DEFAULT 0 AFTER `is_custom_galaxy`;\";\n                $sqlArray[] = \"ALTER TABLE `galaxies` ADD `local_only` tinyint(1) NOT NULL DEFAULT 0 AFTER `enabled`;\";\n                break;\n            case 78:\n                $sqlArray[] = \"ALTER TABLE `jobs` MODIFY COLUMN `process_id` varchar(36) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL;\";\n                break;\n            case 79:\n                $sqlArray[] = \"ALTER TABLE `users` ADD `sub` varchar(255) NULL DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `users` ADD UNIQUE INDEX `sub` (`sub`);\";\n                break;\n            case 80:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `sharing_group_blueprints` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `user_id` int(11) NOT NULL,\n                      `org_id` int(11) NOT NULL,\n                      `sharing_group_id` int(11),\n                      `rules` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `org_id` (`org_id`),\n                      INDEX `sharing_group_id` (`sharing_group_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 81:\n                $fields = ['nationality', 'sector', 'type', 'name'];\n                foreach ($fields as $field) {\n                    $sqlArray[] = sprintf(\"UPDATE organisations SET %s = '' WHERE %s IS NULL;\", $field, $field);\n                    $sqlArray[] = sprintf(\"ALTER table organisations MODIFY %s varchar(255) NOT NULL DEFAULT '';\", $field);\n                }\n                break;\n            case 82:\n                $sqlArray[] = sprintf(\"ALTER table organisations MODIFY description text;\");\n                break;\n            case 83:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `sharing_group_blueprints` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `user_id` int(11) NOT NULL,\n                      `org_id` int(11) NOT NULL,\n                      `sharing_group_id` int(11),\n                      `rules` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `org_id` (`org_id`),\n                      INDEX `sharing_group_id` (`sharing_group_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 84:\n                $sqlArray[] = sprintf(\"ALTER table events add `protected` tinyint(1);\");\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `cryptographic_keys` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL,\n                      `type` varchar(40) COLLATE utf8_bin NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `parent_id` int(11) NOT NULL,\n                      `parent_type` varchar(40) COLLATE utf8_bin NOT NULL,\n                      `key_data` text,\n                      `revoked` tinyint(1) NOT NULL DEFAULT 0,\n                      `fingerprint` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT '',\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `type` (`type`),\n                      INDEX `parent_id` (`parent_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 85:\n                $this->__addIndex('cryptographic_keys', 'parent_type');\n                $this->__addIndex('cryptographic_keys', 'fingerprint');\n                break;\n            case 86:\n                $this->__addIndex('attributes', 'timestamp');\n                break;\n            case 87:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `no_acl_correlations` (\n                    `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                    `attribute_id` int(10) UNSIGNED NOT NULL,\n                    `1_attribute_id` int(10) UNSIGNED NOT NULL,\n                    `event_id` int(10) UNSIGNED NOT NULL,\n                    `1_event_id` int(10) UNSIGNED NOT NULL,\n                    `value_id` int(10) UNSIGNED NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `1_event_id` (`1_event_id`),\n                    INDEX `attribute_id` (`attribute_id`),\n                    INDEX `1_attribute_id` (`1_attribute_id`),\n                    INDEX `value_id` (`value_id`)\n                  ) ENGINE=InnoDB;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `default_correlations` (\n                    `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                    `attribute_id` int(10) UNSIGNED NOT NULL,\n                    `object_id` int(10) UNSIGNED NOT NULL,\n                    `event_id` int(10) UNSIGNED NOT NULL,\n                    `org_id` int(10) UNSIGNED NOT NULL,\n                    `distribution` tinyint(4) NOT NULL,\n                    `object_distribution` tinyint(4) NOT NULL,\n                    `event_distribution` tinyint(4) NOT NULL,\n                    `sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `object_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `event_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `1_attribute_id` int(10) UNSIGNED NOT NULL,\n                    `1_object_id` int(10) UNSIGNED NOT NULL,\n                    `1_event_id` int(10) UNSIGNED NOT NULL,\n                    `1_org_id` int(10) UNSIGNED NOT NULL,\n                    `1_distribution` tinyint(4) NOT NULL,\n                    `1_object_distribution` tinyint(4) NOT NULL,\n                    `1_event_distribution` tinyint(4) NOT NULL,\n                    `1_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `1_object_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `1_event_sharing_group_id` int(10) UNSIGNED NOT NULL DEFAULT 0,\n                    `value_id` int(10) UNSIGNED NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `event_id` (`event_id`),\n                    INDEX `attribute_id` (`attribute_id`),\n                    INDEX `object_id` (`object_id`),\n                    INDEX `org_id` (`org_id`),\n                    INDEX `distribution` (`distribution`),\n                    INDEX `object_distribution` (`object_distribution`),\n                    INDEX `event_distribution` (`event_distribution`),\n                    INDEX `sharing_group_id` (`sharing_group_id`),\n                    INDEX `object_sharing_group_id` (`object_sharing_group_id`),\n                    INDEX `event_sharing_group_id` (`event_sharing_group_id`),\n                    INDEX `1_event_id` (`1_event_id`),\n                    INDEX `1_attribute_id` (`1_attribute_id`),\n                    INDEX `1_object_id` (`1_object_id`),\n                    INDEX `1_org_id` (`1_org_id`),\n                    INDEX `1_distribution` (`1_distribution`),\n                    INDEX `1_object_distribution` (`1_object_distribution`),\n                    INDEX `1_event_distribution` (`1_event_distribution`),\n                    INDEX `1_sharing_group_id` (`1_sharing_group_id`),\n                    INDEX `1_object_sharing_group_id` (`1_object_sharing_group_id`),\n                    INDEX `1_event_sharing_group_id` (`1_event_sharing_group_id`),\n                    INDEX `value_id` (`value_id`)\n                  ) ENGINE=InnoDB;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `correlation_values` (\n                    `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                    `value` varchar(191) NOT NULL,\n                    PRIMARY KEY (`id`),\n                    UNIQUE KEY `value` (`value`(191))\n                  ) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `over_correlating_values` (\n                `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n                `value` text,\n                `occurrence` int(10) UNSIGNED NULL,\n                PRIMARY KEY (`id`),\n                UNIQUE KEY `value` (`value`(191)),\n                INDEX `occurrence` (`occurrence`)\n                ) ENGINE=InnoDB CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 88:\n                $sqlArray[] = 'ALTER TABLE `users` ADD `external_auth_required` tinyint(1) NOT NULL DEFAULT 0;';\n                $sqlArray[] = 'ALTER TABLE `users` ADD `external_auth_key` text COLLATE utf8_bin;';\n                break;\n            case 90:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `workflows` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `description` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `enabled` tinyint(1) NOT NULL DEFAULT 0,\n                      `counter` int(11) NOT NULL DEFAULT 0,\n                      `trigger_id` varchar(191) COLLATE utf8_bin NOT NULL,\n                      `debug_enabled` tinyint(1) NOT NULL DEFAULT 0,\n                      `data` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `timestamp` (`timestamp`),\n                      INDEX `trigger_id` (`trigger_id`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `workflow_blueprints` (\n                      `id` int(11) NOT NULL AUTO_INCREMENT,\n                      `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                      `name` varchar(191) NOT NULL,\n                      `description` varchar(191) NOT NULL,\n                      `timestamp` int(11) NOT NULL DEFAULT 0,\n                      `default` tinyint(1) NOT NULL DEFAULT 0,\n                      `data` text,\n                      PRIMARY KEY (`id`),\n                      INDEX `uuid` (`uuid`),\n                      INDEX `name` (`name`),\n                      INDEX `timestamp` (`timestamp`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                    break;\n            case 92:\n                $sqlArray[] = \"ALTER TABLE users ADD `last_api_access` INT(11) DEFAULT 0;\";\n                break;\n            case 93:\n                $this->__dropIndex('default_correlations', 'distribution');\n                $this->__dropIndex('default_correlations', 'object_distribution');\n                $this->__dropIndex('default_correlations', 'event_distribution');\n                $this->__dropIndex('default_correlations', 'sharing_group_id');\n                $this->__dropIndex('default_correlations', 'object_sharing_group_id');\n                $this->__dropIndex('default_correlations', 'event_sharing_group_id');\n                $this->__dropIndex('default_correlations', 'org_id');\n                $this->__dropIndex('default_correlations', '1_distribution');\n                $this->__dropIndex('default_correlations', '1_object_distribution');\n                $this->__dropIndex('default_correlations', '1_event_distribution');\n                $this->__dropIndex('default_correlations', '1_sharing_group_id');\n                $this->__dropIndex('default_correlations', '1_object_sharing_group_id');\n                $this->__dropIndex('default_correlations', '1_event_sharing_group_id');\n                $this->__dropIndex('default_correlations', '1_org_id');\n                break;\n            case 94:\n                $sqlArray[] = \"UPDATE `over_correlating_values` SET `value` = SUBSTR(`value`, 1, 191);\"; // truncate then migrate\n                $sqlArray[] = \"ALTER TABLE `over_correlating_values` MODIFY `value` varchar(191) NOT NULL;\";\n                break;\n            case 95:\n                $sqlArray[] = \"ALTER TABLE `servers` ADD `remove_missing_tags` tinyint(1) NOT NULL DEFAULT 0 AFTER `skip_proxy`;\";\n                break;\n            case 97:\n                $sqlArray[] = \"ALTER TABLE `users`\n                    ADD COLUMN `notification_daily`     tinyint(1) NOT NULL DEFAULT 0,\n                    ADD COLUMN `notification_weekly`    tinyint(1) NOT NULL DEFAULT 0,\n                    ADD COLUMN `notification_monthly`   tinyint(1) NOT NULL DEFAULT 0\n                ;\";\n                break;\n            case 98:\n                $this->__addIndex('object_template_elements', 'object_template_id');\n                break;\n            case 99: \n                $sqlArray[] = \"ALTER TABLE `event_tags` ADD `relationship_type` varchar(191) NULL DEFAULT '';\";\n                $sqlArray[] = \"ALTER TABLE `attribute_tags` ADD `relationship_type` varchar(191) NULL DEFAULT '';\";\n                break;\n            case 100:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `access_logs` (\n                  `id` int(11) NOT NULL AUTO_INCREMENT,\n                  `created` datetime(4) NOT NULL,\n                  `user_id` int(11) NOT NULL,\n                  `org_id` int(11) NOT NULL,\n                  `authkey_id` int(11) DEFAULT NULL,\n                  `ip` varbinary(16) DEFAULT NULL,\n                  `request_method` tinyint NOT NULL,\n                  `user_agent` varchar(255) DEFAULT NULL,\n                  `request_id` varchar(255) DEFAULT NULL,\n                  `controller` varchar(20) NOT NULL,\n                  `action` varchar(20) NOT NULL,\n                  `url` varchar(255) NOT NULL,\n                  `request` blob,\n                  `response_code` smallint NOT NULL,  \n                  `memory_usage` int(11) NOT NULL,\n                  `duration` int(11) NOT NULL,\n                  `query_count` int(11) NOT NULL,\n                  PRIMARY KEY (`id`),\n                  INDEX `user_id` (`user_id`)\n                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 101:\n                $sqlArray[] = \"CREATE TABLE IF NOT EXISTS `taxii_servers` (\n                    `id` int(11) NOT NULL AUTO_INCREMENT,\n                    `uuid` varchar(40) COLLATE utf8_bin NOT NULL ,\n                    `name` varchar(191) NOT NULL,\n                    `owner` varchar(191) NOT NULL,\n                    `baseurl` varchar(191) NOT NULL,\n                    `api_root` varchar(191) NOT NULL DEFAULT 0,\n                    `description` text,\n                    `filters` text,\n                    `api_key` varchar(255)COLLATE utf8_bin NOT NULL,\n                    PRIMARY KEY (`id`),\n                    INDEX `uuid` (`uuid`),\n                    INDEX `name` (`name`),\n                    INDEX `baseurl` (`baseurl`)\n                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\";\n                break;\n            case 102:\n                $sqlArray[] = \"UPDATE roles SET perm_audit = 1;\";\n                break;\n            case 103:\n                $sqlArray[] = \"ALTER TABLE `taxonomies` ADD `highlighted` tinyint(1) DEFAULT 0;\";\n                break;\n            case 104:\n                $sqlArray[] = \"ALTER TABLE `access_logs` ADD `query_log` blob DEFAULT NULL\";\n                break;\n            case 105:\n                // set a default role if there is none\n                if (!$this->AdminSetting->getSetting('default_role')) {\n                    $role = ClassRegistry::init('Role')->findByName('User');\n                    if ($role) {\n                        $sqlArray[] = \"INSERT INTO `admin_settings` (setting, value) VALUES ('default_role', '\".$role['Role']['id'].\"');\";\n                    } else {\n                        // there is no role called User, do nothing\n                    }\n                }\n                break;\n            case 106:\n                $sqlArray[] = \"ALTER TABLE `taxii_servers` MODIFY `baseurl` varchar(191) NOT NULL;\";\n                break;\n            case 107:\n                $sqlArray[] = \"ALTER TABLE `auth_keys` ADD `unique_ips` text COLLATE utf8mb4_unicode_ci\";\n                break;\n            case 108:\n                $sqlArray[] = \"ALTER TABLE `workflows` MODIFY `data` LONGTEXT;\";\n                break;\n            case 109:\n                $sqlArray[] = \"UPDATE `over_correlating_values` SET `value` = LOWER(`value`) COLLATE utf8mb4_unicode_ci;\";\n                break;\n            case 110:\n                $sqlArray[] = \"ALTER TABLE `users` ADD `totp` varchar(255) DEFAULT NULL;\";\n                $sqlArray[] = \"ALTER TABLE `users` ADD `hotp_counter` int(11) DEFAULT NULL;\";\n                break;\n            case 111:\n                $sqlArray[] = \"ALTER TABLE `taxii_servers` ADD `collection` varchar(40) CHARACTER SET ascii DEFAULT NULL;\";\n                break;\n            case 112:\n                $sqlArray[] = \"ALTER TABLE `roles` ADD `perm_view_feed_correlations` tinyint(1) NOT NULL DEFAULT 0;\";\n                break;\n            case 113:\n                // we only want to update the existing roles - going forward the default is still 0\n                // Also, we want to execute it as a separate update to ensure that cache clearing is done correctly\n                $this->cleanCacheFiles();\n                $sqlArray[] = \"UPDATE roles SET perm_view_feed_correlations = 1;\";\n                break;\n            case 114:\n                $indexArray[] = ['object_references', 'uuid'];\n                break;\n            case 115:\n                $sqlArray[] = \"ALTER TABLE `users` ADD COLUMN `last_pw_change` BIGINT(20) NULL DEFAULT NULL;\";\n                $sqlArray[] = \"UPDATE `users` SET last_pw_change=date_modified WHERE last_pw_change IS NULL\";\n                break;\n            case 'fixNonEmptySharingGroupID':\n                $sqlArray[] = 'UPDATE `events` SET `sharing_group_id` = 0 WHERE `distribution` != 4;';\n                $sqlArray[] = 'UPDATE `attributes` SET `sharing_group_id` = 0 WHERE `distribution` != 4;';\n                break;\n            case 'cleanupAfterUpgrade':\n                $sqlArray[] = 'ALTER TABLE `events` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `events` DROP `orgc`;';\n                $sqlArray[] = 'ALTER TABLE `correlations` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `jobs` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `servers` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `servers` DROP `organization`;';\n                $sqlArray[] = 'ALTER TABLE `shadow_attributes` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `shadow_attributes` DROP `event_org`;';\n                $sqlArray[] = 'ALTER TABLE `threads` DROP `org`;';\n                $sqlArray[] = 'ALTER TABLE `users` DROP `org`;';\n                break;\n            case 'seenOnAttributeAndObject':\n                $sqlArray[] =\n                    \"ALTER TABLE `attributes`\n                        DROP INDEX uuid,\n                        DROP INDEX event_id,\n                        DROP INDEX sharing_group_id,\n                        DROP INDEX type,\n                        DROP INDEX category,\n                        DROP INDEX value1,\n                        DROP INDEX value2,\n                        DROP INDEX object_id,\n                        DROP INDEX object_relation;\n                    \";\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX deleted\"; // deleted index may not be present\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX comment\"; // for replayability\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX first_seen\"; // for replayability\n                $sqlArray[] = \"ALTER TABLE `attributes` DROP INDEX last_seen\"; // for replayability\n                $sqlArray[] =\n                    \"ALTER TABLE `attributes`\n                        ADD COLUMN `first_seen` BIGINT(20) NULL DEFAULT NULL,\n                        ADD COLUMN `last_seen` BIGINT(20) NULL DEFAULT NULL,\n                        MODIFY comment TEXT COLLATE utf8_unicode_ci\n                    ;\";\n                $indexArray[] = array('attributes', 'uuid');\n                $indexArray[] = array('attributes', 'event_id');\n                $indexArray[] = array('attributes', 'sharing_group_id');\n                $indexArray[] = array('attributes', 'type');\n                $indexArray[] = array('attributes', 'category');\n                $indexArray[] = array('attributes', 'value1', 255);\n                $indexArray[] = array('attributes', 'value2', 255);\n                $indexArray[] = array('attributes', 'object_id');\n                $indexArray[] = array('attributes', 'object_relation');\n                $indexArray[] = array('attributes', 'deleted');\n                $indexArray[] = array('attributes', 'first_seen');\n                $indexArray[] = array('attributes', 'last_seen');\n                $sqlArray[] = \"\n                    ALTER TABLE `objects`\n                        ADD `first_seen` BIGINT(20) NULL DEFAULT NULL,\n                        ADD `last_seen` BIGINT(20) NULL DEFAULT NULL,\n                        MODIFY comment TEXT COLLATE utf8_unicode_ci\n                    ;\";\n                $indexArray[] = array('objects', 'first_seen');\n                $indexArray[] = array('objects', 'last_seen');\n                $sqlArray[] = \"\n                    ALTER TABLE `shadow_attributes`\n                        ADD `first_seen` BIGINT(20) NULL DEFAULT NULL,\n                        ADD `last_seen` BIGINT(20) NULL DEFAULT NULL,\n                        MODIFY comment TEXT COLLATE utf8_unicode_ci\n                    ;\";\n                $indexArray[] = array('shadow_attributes', 'first_seen');\n                $indexArray[] = array('shadow_attributes', 'last_seen');\n                break;\n            case 'createUUIDsConstraints':\n                $tables_to_check = ['events', 'attributes', 'objects', 'sightings', 'dashboards', 'inbox', 'organisations', 'tag_collections'];\n                foreach ($tables_to_check as $table) {\n                    if (!$this->__checkIndexExists($table, 'uuid', true)) {\n                        $this->__dropIndex($table, 'uuid');\n                        $this->__addIndex($table, 'uuid', null, true);\n                    }\n                }\n                break;\n            default:\n                return false;\n        }\n\n        // switch MISP instance live to false\n        if ($liveOff) {\n            $this->setLive(false);\n        }\n        $sql_update_count = count($sqlArray);\n        $index_update_count = count($indexArray);\n        $total_update_count = $sql_update_count + $index_update_count;\n        $this->__setUpdateProgress(0, $total_update_count, $command);\n        $str_index_array = array();\n        foreach ($indexArray as $toIndex) {\n            $str_index_array[] = __('Indexing %s -> %s', $toIndex[0], $toIndex[1]);\n        }\n        $this->__setUpdateCmdMessages(array_merge($sqlArray, $str_index_array));\n        $flagStop = false;\n        $errorCount = 0;\n\n        // execute test before update. Exit if it fails\n        if (isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['preUpdate'])) {\n            $function_name = self::ADVANCED_UPDATES_DESCRIPTION[$command]['preUpdate'];\n            try {\n                $this->{$function_name}();\n            } catch (Exception $e) {\n                $this->__setPreUpdateTestState(false);\n                $this->__setUpdateProgress(0, false);\n                $this->__setUpdateResMessages(0, __('Issues executing the pre-update test `%s`. The returned error is: %s', $function_name, $e->getMessage()) . PHP_EOL);\n                $this->__setUpdateError(0);\n                $errorCount++;\n                $exitOnError = true;\n                $flagStop = true;\n            }\n        }\n\n        if (!$flagStop) {\n            $this->__setPreUpdateTestState(true);\n            foreach ($sqlArray as $i => $sql) {\n                try {\n                    $this->__setUpdateProgress($i, false);\n                    $this->query($sql);\n                    $this->Log->create();\n                    $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_database',\n                        'user_id' => 0,\n                        'title' => __('Successfully executed the SQL query for ') . $command,\n                        'change' => __('The executed SQL query was: %s', $sql),\n                    ));\n                    $this->__setUpdateResMessages($i, __('Successfully executed the SQL query for %s', $command));\n                } catch (Exception $e) {\n                    $errorMessage = $e->getMessage();\n                    $this->Log->create();\n                    $logMessage = array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_database',\n                        'user_id' => 0,\n                        'title' => __('Issues executing the SQL query for %s', $command),\n                        'change' => __('The executed SQL query was: ') . $sql . PHP_EOL . __(' The returned error is: ') . $errorMessage\n                    );\n                    $this->__setUpdateResMessages($i, __('Issues executing the SQL query for `%s`. The returned error is: ' . PHP_EOL . '%s', $command, $errorMessage));\n                    if (!$this->isAcceptedDatabaseError($errorMessage)) {\n                        $this->__setUpdateError($i);\n                        $errorCount++;\n                        if ($exitOnError) {\n                            $flagStop = true;\n                            break;\n                        }\n                    } else {\n                        $logMessage['change'] = $logMessage['change'] . PHP_EOL . __('However, as this error is allowed, the update went through.');\n                    }\n                    $this->Log->save($logMessage);\n                }\n            }\n        }\n        if (!$flagStop) {\n            if (!empty($indexArray)) {\n                if ($clean) {\n                    $this->cleanCacheFiles();\n                }\n                foreach ($indexArray as $i => $iA) {\n                    $this->__setUpdateProgress(count($sqlArray)+$i, false);\n                    if (isset($iA[2])) {\n                        $indexSuccess = $this->__addIndex($iA[0], $iA[1], $iA[2]);\n                    } else {\n                        $indexSuccess = $this->__addIndex($iA[0], $iA[1]);\n                    }\n                    if ($indexSuccess['success']) {\n                        $this->__setUpdateResMessages(count($sqlArray)+$i, __('Successfully indexed %s -> %s', $iA[0], $iA[1]));\n                    } else {\n                        $this->__setUpdateResMessages(count($sqlArray)+$i, sprintf('%s %s %s %s',\n                            __('Failed to add index'),\n                            sprintf('%s -> %s', $iA[0], $iA[1]),\n                            __('The returned error is:') . PHP_EOL,\n                            $indexSuccess['errorMessage']\n                        ));\n                        $this->__setUpdateError(count($sqlArray)+$i);\n                    }\n                }\n            }\n            $this->__setUpdateProgress(count($sqlArray) + count($indexArray), false);\n         }\n        if ($clean) {\n            $this->cleanCacheFiles();\n        }\n        if ($liveOff) {\n            $this->setLive(true);\n        }\n        if (!$flagStop && $errorCount == 0) {\n            $this->__postUpdate($command);\n        }\n        if ($flagStop && $errorCount > 0) {\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => 'SYSTEM',\n                'model' => 'Server',\n                'model_id' => 0,\n                'email' => 'SYSTEM',\n                'action' => 'update_database',\n                'user_id' => 0,\n                'title' => __('Issues executing the SQL query for %s', $command),\n                'change' => __('Database updates stopped as some errors occurred and the stop flag is enabled.')\n            ));\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Set if misp is live in redis or in config file as fallback\n     * @param bool $isLive\n     */\n    private function setLive($isLive)\n    {\n        try {\n            $redis = $this->setupRedisWithException();\n            if ($isLive) {\n                $redis->del('misp:live');\n            } else {\n                $redis->set('misp:live', '0');\n            }\n        } catch (Exception $e) {\n            // pass\n        }\n\n        if (!isset($this->Server)) {\n            $this->Server = ClassRegistry::init('Server');\n        }\n        $this->Server->serverSettingsSaveValue('MISP.live', $isLive);\n    }\n\n    /**\n     * Check whether the adminSetting should be updated after the update.\n     * @param string $command\n     * @return void\n     */\n    private function __postUpdate($command)\n    {\n        if (isset(self::ADVANCED_UPDATES_DESCRIPTION[$command]['record'])) {\n            if (self::ADVANCED_UPDATES_DESCRIPTION[$command]['record']) {\n                $this->AdminSetting->changeSetting($command, 1);\n            }\n        }\n    }\n\n    private function __dropIndex($table, $field)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $indexCheckResult = array();\n        if ($this->isMysql()) {\n            $indexCheck = \"SELECT INDEX_NAME FROM INFORMATION_SCHEMA.STATISTICS WHERE table_schema=DATABASE() AND table_name='\" . $table . \"' AND index_name LIKE '\" . $field . \"%';\";\n            $indexCheckResult = $this->query($indexCheck);\n        } else {\n            $pgIndexName = 'idx_' . $table . '_' . $field;\n            $indexCheckResult[] = array('STATISTICS' => array('INDEX_NAME' => $pgIndexName));\n        }\n        foreach ($indexCheckResult as $icr) {\n            if ($this->isMysql()) {\n                $dropIndex = 'ALTER TABLE ' . $table . ' DROP INDEX ' . $icr['STATISTICS']['INDEX_NAME'] . ';';\n            } else {\n                $dropIndex = 'DROP INDEX IF EXISTS ' . $icr['STATISTICS']['INDEX_NAME'] . ';';\n            }\n            $result = true;\n            try {\n                $this->query($dropIndex);\n            } catch (Exception $e) {\n                $result = false;\n            }\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => 'SYSTEM',\n                'model' => 'Server',\n                'model_id' => 0,\n                'email' => 'SYSTEM',\n                'action' => 'update_database',\n                'user_id' => 0,\n                'title' => ($result ? 'Removed index ' : 'Failed to remove index ') . $icr['STATISTICS']['INDEX_NAME'] . ' from ' . $table,\n                'change' => ($result ? 'Removed index ' : 'Failed to remove index ') . $icr['STATISTICS']['INDEX_NAME'] . ' from ' . $table,\n            ));\n        }\n    }\n\n    private function __addIndex($table, $field, $length = null, $unique = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $index = $unique ? 'UNIQUE INDEX' : 'INDEX';\n        if (!$this->isMysql()) {\n            $addIndex = \"CREATE $index idx_\" . $table . \"_\" . $field . \" ON \" . $table . \" (\" . $field . \");\";\n        } else {\n            if (!$length) {\n                $addIndex = \"ALTER TABLE `\" . $table . \"` ADD $index `\" . $field . \"` (`\" . $field . \"`);\";\n            } else {\n                $addIndex = \"ALTER TABLE `\" . $table . \"` ADD $index `\" . $field . \"` (`\" . $field . \"`(\" . $length . \"));\";\n            }\n        }\n        $result = true;\n        $duplicate = false;\n        $errorMessage = '';\n        try {\n            $this->query($addIndex);\n        } catch (Exception $e) {\n            $duplicate = strpos($e->getMessage(), '1061') !== false;\n            $errorMessage = $e->getMessage();\n            $result = false;\n        }\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => 'SYSTEM',\n            'model' => 'Server',\n            'model_id' => 0,\n            'email' => 'SYSTEM',\n            'action' => 'update_database',\n            'user_id' => 0,\n            'title' => ($result ? 'Added index ' : 'Failed to add index ') . $field . ' to ' . $table . ($duplicate ? ' (index already set)' : $errorMessage),\n            'change' => ($result ? 'Added index ' : 'Failed to add index ') . $field . ' to ' . $table . ($duplicate ? ' (index already set)' : $errorMessage),\n        ));\n        $additionResult = array('success' => $result || $duplicate);\n        if (!$result) {\n            $additionResult['errorMessage'] = $errorMessage;\n        }\n        return $additionResult;\n    }\n\n    private function __checkIndexExists($table, $column_name, $is_unique = false): bool\n    {\n        $query = sprintf(\n            'SHOW INDEX FROM %s WHERE Column_name = \\'%s\\' and Non_unique = %s;',\n            $table,\n            $column_name,\n            !empty($is_unique) ? '0' : '1'\n        );\n        $existing_index = $this->query($query);\n        return !empty($existing_index);\n    }\n\n    public function cleanCacheFiles()\n    {\n        Cache::clear();\n        Cache::clear(false, '_cake_core_');\n        Cache::clear(false, '_cake_model_');\n        clearCache();\n\n        $files = glob(CACHE . 'models' . DS . 'myapp*');\n        $files = array_merge($files, glob(CACHE . 'persistent' . DS . 'myapp*'));\n        foreach ($files as $file) {\n            if (is_file($file)) {\n                unlink($file);\n            }\n        }\n        return true;\n    }\n\n    public function validateAuthkey($value)\n    {\n        if (empty($value['authkey'])) {\n            return 'Empty authkey found. Make sure you set the 40 character long authkey.';\n        }\n        if (!preg_match('/[a-z0-9]{40}/i', $value['authkey'])) {\n            return 'The authkey has to be exactly 40 characters long and consist of alphanumeric characters.';\n        }\n        return true;\n    }\n\n    // alternative to the build in notempty/notblank validation functions, compatible with cakephp <= 2.6 and cakephp and cakephp >= 2.7\n    public function valueNotEmpty($value)\n    {\n        $field = array_keys($value)[0];\n        $value = trim($value[$field]);\n        if (!empty($value)) {\n            return true;\n        }\n        return ucfirst($field) . ' cannot be empty.';\n    }\n\n    public function valueIsJson($value)\n    {\n        $value = array_values($value)[0];\n        if (!JsonTool::isValid($value)) {\n            return __('Invalid JSON.');\n        }\n        return true;\n    }\n\n    public function valueIsID($value)\n    {\n        $field = array_keys($value)[0];\n        if (!is_numeric($value[$field]) || $value[$field] < 0) {\n            return 'Invalid ' . ucfirst($field) . ' ID';\n        }\n        return true;\n    }\n\n    public function stringNotEmpty($value)\n    {\n        $field = array_keys($value)[0];\n        $value = trim($value[$field]);\n        if (!isset($value) || ($value == false && $value !== \"0\")) {\n            return ucfirst($field) . ' cannot be empty.';\n        }\n        return true;\n    }\n\n    // Try to create a table with a BIGINT(20)\n    public function seenOnAttributeAndObjectPreUpdate()\n    {\n        $sqlArray[] = \"CREATE TABLE IF NOT EXISTS testtable (\n            `testfield` BIGINT(6) NULL DEFAULT NULL\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n        try {\n            foreach($sqlArray as $i => $sql) {\n                $this->query($sql);\n            }\n        } catch (Exception $e) {\n            throw new Exception('Pre update test failed: ' . PHP_EOL . $sql . PHP_EOL . ' The returned error is: ' . $e->getMessage());\n        }\n        // clean up\n        $sqlArray[] = \"DROP TABLE testtable;\";\n        foreach($sqlArray as $i => $sql) {\n            $this->query($sql);\n        }\n    }\n\n    public function runUpdates($verbose = false, $useWorker = true, $processId = false)\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $this->Job = ClassRegistry::init('Job');\n\n        $db = ConnectionManager::getDataSource('default');\n        $tables = $db->listSources();\n        $requiresLogout = false;\n        // if we don't even have an admin table, time to create it.\n        if (!in_array('admin_settings', $tables, true)) {\n            $this->updateDatabase('adminTable');\n            $requiresLogout = true;\n        } else {\n            $this->__runCleanDB();\n            $db_version = $this->AdminSetting->find('all', [\n                'conditions' => array('setting' => 'db_version'),\n                'fields' => ['id', 'value'],\n            ]);\n            if (count($db_version) > 1) {\n                // we ran into a bug where we have more than one db_version entry. This bug happened in some rare circumstances around 2.4.50-2.4.57\n                foreach ($db_version as $k => $v) {\n                    if ($k > 0) {\n                        $this->AdminSetting->delete($v['AdminSetting']['id']);\n                    }\n                }\n            }\n            $db_version = $db_version[0];\n            $updates = $this->findUpgrades($db_version['AdminSetting']['value']);\n            if ($processId) {\n                $job = $this->Job->find('first', array(\n                    'conditions' => array('Job.id' => $processId)\n                ));\n            } else {\n                $job = null;\n            }\n            if (!empty($updates)) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Server = ClassRegistry::init('Server');\n                // Exit if updates are locked.\n                // This is not as reliable as a real lock implementation\n                // However, as all updates are re-playable, there is no harm if they\n                // get played multiple time. The purpose of this lightweight lock\n                // is only to limit the load.\n                if ($this->isUpdateLocked()) { // prevent creation of useless workers\n                    $this->Log->create();\n                    $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_db_worker',\n                        'user_id' => 0,\n                        'title' => __('Issues executing run_updates'),\n                        'change' => __('Database updates are locked. Make sure that you have an update worker running. If you do, it might be related to an update\\'s execution repeatedly failing or still being in progress.')\n                    ));\n                    if (!empty($job)) { // if multiple prio worker is enabled, want to mark them as done\n                        $job['Job']['progress'] = 100;\n                        $job['Job']['message'] = __('Update done');\n                       $this->Job->save($job);\n                    }\n                    return true;\n                }\n\n                // restart this function by a worker\n                if ($useWorker && Configure::read('MISP.background_jobs')) {\n                    $workerIssueCount = 0;\n                    $workerDiagnostic = $this->Server->workerDiagnostics($workerIssueCount);\n                    if (isset($workerDiagnostic['update']['ok']) && $workerDiagnostic['update']['ok']) {\n                        $workerType = 'update';\n                    } else { // update worker not running, doing the update inline\n                        return $this->runUpdates($verbose, false);\n                    }\n\n                    /** @var Job $job */\n                    $job = ClassRegistry::init('Job');\n                    $jobId = $job->createJob(\n                            'SYSTEM',\n                            Job::WORKER_UPDATE,\n                            'run_updates',\n                            'command: ' . implode(',', $updates),\n                            'Updating.'\n                        );\n\n                    $this->getBackgroundJobsTool()->enqueue(\n                        BackgroundJobsTool::UPDATE_QUEUE,\n                        BackgroundJobsTool::CMD_ADMIN,\n                        [\n                            'runUpdates',\n                            $jobId\n                        ],\n                        true,\n                        $jobId\n                    );\n\n                    return true;\n                }\n\n                // See comment above for `isUpdateLocked()`\n                // prevent continuation of job if worker was already spawned\n                // (could happens if multiple prio workers are up)\n                if ($this->isUpdateLocked()) {\n                    $this->Log->create();\n                    $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => 'SYSTEM',\n                        'action' => 'update_db_worker',\n                        'user_id' => 0,\n                        'title' => __('Issues executing run_updates'),\n                        'change' => __('Updates are locked. Stopping worker gracefully')\n                    ));\n                    if (!empty($job)) {\n                        $job['Job']['progress'] = 100;\n                        $job['Job']['message'] = __('Update done');\n                        $this->Job->save($job);\n                    }\n                    return true;\n                }\n                $this->changeLockState(time());\n                $this->__resetUpdateProgress();\n\n                $update_done = 0;\n                foreach ($updates as $update => $temp) {\n                    if ($verbose) {\n                        echo str_pad('Executing ' . $update, 30, '.');\n                    }\n                    if (!empty($job)) {\n                        $job['Job']['progress'] = floor($update_done / count($updates) * 100);\n                        $job['Job']['message'] = __('Running update %s', $update);\n                        $this->Job->save($job);\n                    }\n                    $dbUpdateSuccess = $this->updateMISP($update);\n                    if ($temp) {\n                        $requiresLogout = true;\n                    }\n                    if ($dbUpdateSuccess) {\n                        $db_version['AdminSetting']['value'] = $update;\n                        $this->AdminSetting->save($db_version);\n                        $this->resetUpdateFailNumber();\n                    } else {\n                        $this->__increaseUpdateFailNumber();\n                    }\n                    if ($verbose) {\n                        echo \"\\033[32mDone\\033[0m\" . PHP_EOL;\n                    }\n                    $update_done++;\n                }\n                if (!empty($job)) {\n                    $job['Job']['message'] = __('Update done');\n                }\n                $this->changeLockState(false);\n                $this->__queueCleanDB();\n            } else {\n                if (!empty($job)) {\n                    $job['Job']['message'] = __('Update done in another worker. Gracefully stopping.');\n                }\n            }\n            // mark current worker as done, as well as queued workers than manages to pass the locks\n            // (happens if user hit reload before first worker start its job)\n            if (!empty($job)) {\n                $job['Job']['progress'] = 100;\n                $this->Job->save($job);\n            }\n        }\n        if ($requiresLogout) {\n            $this->refreshSessions();\n        }\n        return true;\n    }\n\n    /**\n     * Update date_modified for all users, this will ensure that all users will refresh their session data.\n     */\n    private function refreshSessions()\n    {\n        $this->User = ClassRegistry::init('User');\n        $this->User->updateAll(['date_modified' => time()]);\n    }\n\n    private function __setUpdateProgress($current, $total=false, $toward_db_version=false)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['current'] = $current;\n        if ($total !== false) {\n            $updateProgress['total'] = $total;\n        } else {\n            $now = new DateTime();\n            $updateProgress['time']['started'][$current] = $now->format('Y-m-d H:i:s');\n        }\n        if ($toward_db_version !== false) {\n            $updateProgress['toward_db_version'] = $toward_db_version;\n        }\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setPreUpdateTestState($state)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['preTestSuccess'] = $state;\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setUpdateError($index)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['failed_num'][] = $index;\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __getEmptyUpdateMessage()\n    {\n        return array(\n            'commands' => array(),\n            'results' => array(),\n            'time' => array('started' => array(), 'elapsed' => array()),\n            'current' => '',\n            'total' => '',\n            'failed_num' => array(),\n            'toward_db_version' => ''\n        );\n    }\n\n    private function __resetUpdateProgress()\n    {\n        $updateProgress = $this->__getEmptyUpdateMessage();\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setUpdateCmdMessages($messages)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['commands'] = $messages;\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    private function __setUpdateResMessages($index, $message)\n    {\n        $updateProgress = $this->getUpdateProgress();\n        $updateProgress['results'][$index] = $message;\n        $temp = new DateTime();\n        $diff = $temp->diff(new DateTime($updateProgress['time']['started'][$index]));\n        $updateProgress['time']['elapsed'][$index] = $diff->format('%H:%I:%S');\n        $this->__saveUpdateProgress($updateProgress);\n    }\n\n    public function getUpdateProgress()\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $updateProgress = $this->AdminSetting->getSetting('update_progress');\n        if ($updateProgress !== false) {\n            $updateProgress = json_decode($updateProgress, true);\n        } else {\n            $updateProgress = $this->__getEmptyUpdateMessage();\n        }\n        foreach($updateProgress as $setting => $value) {\n            if (!is_array($value)) {\n                if (is_numeric($value)) {\n                    $value = intval($value);\n                }\n            }\n            $updateProgress[$setting] = $value;\n        }\n        return $updateProgress;\n    }\n\n    private function __saveUpdateProgress($updateProgress)\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $data = json_encode($updateProgress);\n        $this->AdminSetting->changeSetting('update_progress', $data);\n    }\n\n    public function changeLockState($locked)\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $this->AdminSetting->changeSetting('update_locked', $locked);\n    }\n\n    private function getUpdateLockState()\n    {\n        if (!isset($this->AdminSetting)) {\n            $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        }\n        $locked = $this->AdminSetting->getSetting('update_locked');\n        return is_null($locked) ? false : $locked;\n    }\n\n    public function getLockRemainingTime()\n    {\n        $lockState = $this->getUpdateLockState();\n        if ($lockState !== false && $lockState !== '') {\n            // if lock is old, still allows the update\n            // This can be useful if the update process crashes\n            $diffSec = time() - intval($lockState);\n            if (Configure::read('MISP.updateTimeThreshold')) {\n                $updateWaitThreshold = intval(Configure::read('MISP.updateTimeThreshold'));\n            } else {\n                $this->Server = ClassRegistry::init('Server');\n                $updateWaitThreshold = intval($this->Server->serverSettings['MISP']['updateTimeThreshold']['value']);\n            }\n            $remainingTime = $updateWaitThreshold - $diffSec;\n            return $remainingTime > 0 ? $remainingTime : 0;\n        } else {\n            return 0;\n        }\n    }\n\n    public function isUpdateLocked()\n    {\n        $remainingTime = $this->getLockRemainingTime();\n        $failThresholdReached = $this->UpdateFailNumberReached();\n        return $remainingTime > 0 || $failThresholdReached;\n    }\n\n    private function getUpdateFailNumber()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $updateFailNumber = $this->AdminSetting->getSetting('update_fail_number');\n        return ($updateFailNumber !== false && $updateFailNumber !== '') ? $updateFailNumber : 0;\n    }\n\n    public function resetUpdateFailNumber()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $this->AdminSetting->changeSetting('update_fail_number', 0);\n    }\n\n    private function __increaseUpdateFailNumber()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $updateFailNumber = $this->AdminSetting->getSetting('update_fail_number');\n        $this->AdminSetting->changeSetting('update_fail_number', $updateFailNumber+1);\n    }\n\n    public function UpdateFailNumberReached()\n    {\n        return $this->getUpdateFailNumber() > 3;\n    }\n\n    private function __queueCleanDB()\n    {\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $cleanDB = $this->AdminSetting->find('first', array('conditions' => array('setting' => 'clean_db')));\n        if (empty($cleanDB)) {\n            $this->AdminSetting->create();\n            $cleanDB = array('AdminSetting' => array('setting' => 'clean_db', 'value' => 1));\n        } else {\n            $cleanDB['AdminSetting']['value'] = 1;\n        }\n        $this->AdminSetting->save($cleanDB);\n    }\n\n    private function __runCleanDB()\n    {\n        $cleanDB = $this->AdminSetting->getSetting('clean_db');\n        if ($cleanDB === false || $cleanDB == 1) {\n            $this->cleanCacheFiles();\n            $this->AdminSetting->changeSetting('clean_db', 0);\n        }\n    }\n\n    /**\n     * @param string $db_version\n     * @return array\n     */\n    protected function findUpgrades($db_version)\n    {\n        $updates = array();\n        if (strpos($db_version, '.')) {\n            $version = explode('.', $db_version);\n            foreach (self::OLD_DB_CHANGES as $major => $rest) {\n                if ($major < $version[0]) {\n                    continue;\n                } elseif ($major == $version[0]) {\n                    foreach ($rest as $minor => $hotfixes) {\n                        if ($minor < $version[1]) {\n                            continue;\n                        } elseif ($minor == $version[1]) {\n                            foreach ($hotfixes as $hotfix => $requiresLogout) {\n                                if ($hotfix > $version[2]) {\n                                    $updates[$major . '.' . $minor . '.' . $hotfix] = $requiresLogout;\n                                }\n                            }\n                        } else {\n                            foreach ($hotfixes as $hotfix => $requiresLogout) {\n                                $updates[$major . '.' . $minor . '.' . $hotfix] = $requiresLogout;\n                            }\n                        }\n                    }\n                }\n            }\n            $db_version = 0;\n        }\n        foreach (self::DB_CHANGES as $db_change => $requiresLogout) {\n            if ($db_version < $db_change) {\n                $updates[$db_change] = $requiresLogout;\n            }\n        }\n        return $updates;\n    }\n\n    private function __generateCorrelations()\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            /** @var Job $job */\n            $job = ClassRegistry::init('Job');\n            $jobId = $job->createJob(\n                'SYSTEM',\n                Job::WORKER_DEFAULT,\n                'generate correlation',\n                'All attributes',\n                'Job created.'\n            );\n\n            $this->getBackgroundJobsTool()->enqueue(\n                BackgroundJobsTool::DEFAULT_QUEUE,\n                BackgroundJobsTool::CMD_ADMIN,\n                [\n                    'jobGenerateCorrelation',\n                    $jobId\n                ],\n                true,\n                $jobId\n            );\n\n        }\n        return true;\n    }\n\n    private function removeDuplicatedUUIDs()\n    {\n        $removedResults = array(\n            'Event' => $this->removeDuplicateEventUUIDs(),\n            'Attribute' => $this->removeDuplicateAttributeUUIDs(),\n            'Object' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('MispObject'), 'timestamp'),\n            'Sighting' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('Sighting'), 'date_sighting'),\n            'Dashboard' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('Dashboard'), 'timestamp'),\n            'Inbox' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('Inbox'), 'timestamp'),\n            'TagCollection' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('TagCollection')),\n            // 'GalaxyCluster' => $this->__removeDuplicateUUIDsGeneric(ClassRegistry::init('GalaxyCluster')),\n        );\n        $this->Log->createLogEntry('SYSTEM', 'update_database', 'Server', 0, __('Removed duplicated UUIDs'), __('Event: %s, Attribute: %s, Object: %s, Sighting: %s, Dashboard: %s, Inbox: %s, TagCollection: %s', h($removedResults['Event']), h($removedResults['Attribute']), h($removedResults['Object']), h($removedResults['Sighting']), h($removedResults['Dashboard']), h($removedResults['Inbox']), h($removedResults['TagCollection'])));\n    }\n\n    private function __removeDuplicateUUIDsGeneric($model, $sort_by=false): int\n    {\n        $className = get_class($model);\n        $alias = $model->alias;\n        $this->Log = ClassRegistry::init('Log');\n        $duplicates = $model->find('all', array(\n            'fields' => array('uuid', 'count(uuid) as occurrence'),\n            'recursive' => -1,\n            'group' => array('uuid HAVING occurrence > 1'),\n        ));\n        $counter = 0;\n        foreach ($duplicates as $duplicate) {\n            $options = [\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate[$alias]['uuid']),\n            ];\n            if (!empty($sort_by)) {\n                $options['order'] = \"$sort_by DESC\";\n            }\n            $fetched_duplicates = $model->find('all', $options);\n            unset($fetched_duplicates[0]);\n            foreach ($fetched_duplicates as $fetched_duplicate) {\n                $model->delete($fetched_duplicate[$alias]['id']);\n                $this->Log->createLogEntry('SYSTEM', 'delete', $className, $fetched_duplicate[$alias]['id'], __('Removed %s (%s)', $className, $fetched_duplicate[$alias]['id']), __('%s\\'s UUID duplicated (%s)', $className, $fetched_duplicate[$alias]['uuid']));\n                $counter++;\n            }\n        }\n        return $counter;\n    }\n\n    private function removeDuplicateAttributeUUIDs()\n    {\n        $this->Attribute = ClassRegistry::init('Attribute');\n        $this->Log = ClassRegistry::init('Log');\n        $duplicates = $this->Attribute->find('all', array(\n            'fields' => array('Attribute.uuid', 'count(Attribute.uuid) as occurrence'),\n            'recursive' => -1,\n            'group' => array('Attribute.uuid HAVING occurrence > 1'),\n            'order' => false,\n        ));\n        $counter = 0;\n        foreach ($duplicates as $duplicate) {\n            $attributes = $this->Attribute->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate['Attribute']['uuid']),\n                'contain' => array(\n                    'AttributeTag' => array(\n                        'fields' => array('tag_id')\n                    )\n                ),\n                'order' => 'timestamp DESC',\n            ));\n            $tagIDsOfFirstAttribute = Hash::extract($attributes[0]['AttributeTag'], '{n}.tag_id');\n            $eventIDOfFirstAttribute = $attributes[0]['Attribute']['event_id'];\n            unset($attributes[0]);\n            foreach ($attributes as $attribute) {\n                $tagIDs = Hash::extract($attribute['AttributeTag'], '{n}.tag_id');\n                $logTag = false;\n                $logEventID = false;\n                if (empty(array_diff($tagIDs, $tagIDsOfFirstAttribute))) {\n                    $logTag = true;\n                }\n                if ($eventIDOfFirstAttribute != $attribute['Attribute']['event_id']) {\n                    $logEventID = true;\n                }\n                $success = $this->Attribute->delete($attribute['Attribute']['id']);\n                if (empty($success)) {\n                    $this->Log->createLogEntry('SYSTEM', 'delete', 'Attribute', $attribute['Attribute']['id'], __('Could not remove attribute (%s)', $attribute['Attribute']['id']), __('Deletion was rejected.'));\n                    continue;\n                }\n                $logMessage = __('Attribute\\'s UUID duplicated (%s).', $attribute['Attribute']['uuid']);\n                if ($logEventID) {\n                    $logMessage .= __(' Was part of another event_id (%s) than the one that was kept (%s).', $attribute['Attribute']['event_id'], $eventIDOfFirstAttribute);\n                } else if ($logTag) {\n                    $logMessage .= __(' Tag IDs attached [%s]', implode($tagIDs));\n                } else {\n                }\n                $this->Log->createLogEntry('SYSTEM', 'delete', 'Attribute', $attribute['Attribute']['id'], __('Removed attribute (%s)', $attribute['Attribute']['id']), $logMessage);\n                $counter++;\n            }\n        }\n        return $counter;\n    }\n\n    private function removeDuplicateEventUUIDs()\n    {\n        $this->Event = ClassRegistry::init('Event');\n        $this->Log = ClassRegistry::init('Log');\n        $duplicates = $this->Event->find('all', array(\n                'fields' => array('Event.uuid', 'count(Event.uuid) as occurrence'),\n                'recursive' => -1,\n                'group' => array('Event.uuid HAVING occurrence > 1'),\n        ));\n        $counter = 0;\n\n        // load this so we can remove the blocklist item that will be created, this is the one case when we do not want it.\n        if (Configure::read('MISP.enableEventBlocklisting') !== false) {\n            $this->EventBlocklist = ClassRegistry::init('EventBlocklist');\n        }\n\n        foreach ($duplicates as $duplicate) {\n            $events = $this->Event->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('uuid' => $duplicate['Event']['uuid']),\n                'order' => 'timestamp DESC',\n            ));\n            unset($events[0]);\n            foreach ($events as $event) {\n                $uuid = $event['Event']['uuid'];\n                $this->Event->delete($event['Event']['id']);\n                $this->Log->createLogEntry('SYSTEM', 'delete', 'Event', $event['Event']['id'], __('Removed event (%s)', $event['Event']['id']), __('Event\\'s UUID duplicated (%s)', $event['Event']['uuid']));\n                $counter++;\n                // remove the blocklist entry that we just created with the event deletion, if the feature is enabled\n                // We do not want to block the UUID, since we just deleted a copy\n                if (Configure::read('MISP.enableEventBlocklisting') !== false) {\n                    $this->EventBlocklist->deleteAll(array('EventBlocklist.event_uuid' => $uuid));\n                }\n            }\n        }\n        return $counter;\n    }\n\n    public function checkFilename($filename)\n    {\n        return preg_match('@^([a-z0-9_.]+[a-z0-9_.\\- ]*[a-z0-9_.\\-]|[a-z0-9_.])+$@i', $filename);\n    }\n\n    /**\n     * Similar method as `setupRedis`, but this method throw exception if Redis cannot be reached.\n     * @return Redis\n     * @throws Exception\n     * @deprecated\n     */\n    public function setupRedisWithException()\n    {\n        return RedisTool::init();\n    }\n\n    /**\n     * Method for backward compatibility.\n     * @deprecated\n     * @see AppModel::setupRedisWithException\n     * @return bool|Redis\n     */\n    public function setupRedis()\n    {\n        try {\n            return RedisTool::init();\n        } catch (Exception $e) {\n            return false;\n        }\n    }\n\n    public function getKafkaPubTool()\n    {\n        if (!$this->loadedKafkaPubTool) {\n            App::uses('KafkaPubTool', 'Tools');\n            $kafkaPubTool = new KafkaPubTool();\n            $rdkafkaIni = Configure::read('Plugin.Kafka_rdkafka_config');\n            $rdkafkaIni = mb_ereg_replace(\"/\\:\\/\\//\", '', $rdkafkaIni);\n            $kafkaConf = array();\n            if (!empty($rdkafkaIni)) {\n                $kafkaConf = parse_ini_file($rdkafkaIni);\n            }\n            $brokers = Configure::read('Plugin.Kafka_brokers');\n            $kafkaPubTool->initTool($brokers, $kafkaConf);\n            $this->loadedKafkaPubTool = $kafkaPubTool;\n        }\n        return $this->loadedKafkaPubTool;\n    }\n\n    public function publishKafkaNotification($topicName, $data, $action = false)\n    {\n        $kafkaTopic = $this->kafkaTopic($topicName);\n        if ($kafkaTopic) {\n            $this->getKafkaPubTool()->publishJson($kafkaTopic, $data, $action);\n        }\n    }\n\n    /**\n     * @return PubSubTool\n     */\n    public function getPubSubTool()\n    {\n        if (!self::$loadedPubSubTool) {\n            App::uses('PubSubTool', 'Tools');\n            $pubSubTool = new PubSubTool();\n            $pubSubTool->initTool();\n            self::$loadedPubSubTool = $pubSubTool;\n        }\n        return self::$loadedPubSubTool;\n    }\n\n    /**\n     * @return BackgroundJobsTool\n     */\n    public function getBackgroundJobsTool(): BackgroundJobsTool\n    {\n        if (!self::$loadedBackgroundJobsTool) {\n            App::uses('BackgroundJobsTool', 'Tools');\n\n            // TODO: remove after CakeResque is deprecated\n            $settings = ['enabled' => false];\n            if (Configure::read('SimpleBackgroundJobs.enabled')) {\n                $settings = Configure::read('SimpleBackgroundJobs');\n            }\n\n            $backgroundJobsTool = new BackgroundJobsTool($settings);\n            self::$loadedBackgroundJobsTool = $backgroundJobsTool;\n        }\n        return self::$loadedBackgroundJobsTool;\n    }\n\n    /**\n     * Generate a generic subquery - options needs to include conditions\n     *\n     * @param AppModel $model\n     * @param array $options\n     * @param string $lookupKey\n     * @param bool $negation\n     * @return string[]\n     */\n    protected function subQueryGenerator(AppModel $model, array $options, $lookupKey, $negation = false)\n    {\n        $defaults = array(\n            'fields' => array('*'),\n            'table' => $model->table,\n            'alias' => $model->alias,\n            'limit' => null,\n            'offset' => null,\n            'joins' => array(),\n            'conditions' => array(),\n            'group' => false,\n            'recursive' => -1\n        );\n        $params = array();\n        foreach ($defaults as $key => $defaultValue) {\n            if (isset($options[$key])) {\n                $params[$key] = $options[$key];\n            } else {\n                $params[$key] = $defaultValue;\n            }\n        }\n        $db = $model->getDataSource();\n        $subQuery = $db->buildStatement($params, $model);\n        if ($negation) {\n            $subQuery = $lookupKey . ' NOT IN (' . $subQuery . ') ';\n        } else {\n            $subQuery = $lookupKey . ' IN (' . $subQuery . ') ';\n        }\n        return [$subQuery];\n    }\n\n    /**\n     * Returns estimated number of table rows\n     * @return int\n     */\n    public function tableRows()\n    {\n        $rows = $this->query(\"SELECT TABLE_ROWS FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{$this->table}';\");\n        return $rows[0]['TABLES']['TABLE_ROWS'];\n    }\n\n    // start a benchmark run for the given bench name\n    public function benchmarkInit($name = 'default')\n    {\n        $this->__profiler[$name]['start'] = microtime(true);\n        if (empty($this->__profiler[$name]['memory_start'])) {\n            $this->__profiler[$name]['memory_start'] = memory_get_usage();\n        }\n        return true;\n    }\n\n    // calculate the duration from the init time to the current point in execution. Aggregate flagged executions will increment the duration instead of just setting it\n    public function benchmark($name = 'default', $aggregate = false, $memory_chart = false)\n    {\n        if (!empty($this->__profiler[$name]['start'])) {\n            if ($aggregate) {\n                if (!isset($this->__profiler[$name]['duration'])) {\n                    $this->__profiler[$name]['duration'] = 0;\n                }\n                if (!isset($this->__profiler[$name]['executions'])) {\n                    $this->__profiler[$name]['executions'] = 0;\n                }\n                $this->__profiler[$name]['duration'] += microtime(true) - $this->__profiler[$name]['start'];\n                $this->__profiler[$name]['executions']++;\n                $currentUsage = memory_get_usage();\n                if ($memory_chart) {\n                    $this->__profiler[$name]['memory_chart'][] = $currentUsage - $this->__profiler[$name]['memory_start'];\n                }\n                if (\n                    empty($this->__profiler[$name]['memory_peak']) ||\n                    $this->__profiler[$name]['memory_peak'] < ($currentUsage - $this->__profiler[$name]['memory_start'])\n                ) {\n                    $this->__profiler[$name]['memory_peak'] = $currentUsage - $this->__profiler[$name]['memory_start'];\n                }\n            } else {\n                $this->__profiler[$name]['memory_peak'] = memory_get_usage() - $this->__profiler[$name]['memory_start'];\n                $this->__profiler[$name]['duration'] = microtime(true) - $this->__profiler[$name]['start'];\n            }\n        }\n        return true;\n    }\n\n    // return the results of the benchmark(s). If no name is set all benchmark results are returned in an array.\n    public function benchmarkResult($name = false)\n    {\n        if ($name) {\n            return array($name => $this->__profiler[$name]['duration']);\n        } else {\n            $results = array();\n            foreach ($this->__profiler as $name => $benchmark) {\n                if (!empty($benchmark['duration'])) {\n                    $results[$name] = $benchmark;\n                    unset($results[$name]['start']);\n                    unset($results[$name]['memory_start']);\n                }\n            }\n            return $results;\n        }\n    }\n\n    public function benchmarkCustomAdd($valueToAdd = 0, $name = 'default', $customName = 'custom')\n    {\n        if (empty($this->__profiler[$name]['custom'][$customName])) {\n            $this->__profiler[$name]['custom'][$customName] = 0;\n        }\n        $this->__profiler[$name]['custom'][$customName] += $valueToAdd;\n    }\n\n    private function __forceSettings()\n    {\n        $settingsToForce = array(\n            'Session.autoRegenerate' => false,\n            'Session.checkAgent' => false\n        );\n        $server = ClassRegistry::init('Server');\n        foreach ($settingsToForce as $setting => $value) {\n            $server->serverSettingsSaveValue($setting, $value);\n        }\n        return true;\n    }\n\n    public function setupHttpSocket($server, $HttpSocket = null, $timeout = false)\n    {\n        if (empty($HttpSocket)) {\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            $HttpSocket = $syncTool->setupHttpSocket($server, $timeout);\n        }\n        return $HttpSocket;\n    }\n\n    /**\n     * @param array $server\n     * @param string $model\n     * @return array[]\n     * @throws JsonException\n     */\n    public function setupSyncRequest(array $server, $model = 'Server')\n    {\n        $version = implode('.', $this->checkMISPVersion());\n        $commit = $this->checkMIPSCommit();\n\n        $authkey = $server[$model]['authkey'];\n        App::uses('EncryptedValue', 'Tools');\n        if (EncryptedValue::isEncrypted($authkey)) {\n            $authkey = (string)new EncryptedValue($authkey);\n        }\n\n        return array(\n            'header' => array(\n                'Authorization' => $authkey,\n                'Accept' => 'application/json',\n                'Content-Type' => 'application/json',\n                'User-Agent' => 'MISP ' . $version . (empty($commit) ? '' : ' - #' . $commit),\n            )\n        );\n    }\n\n    /**\n     * Returns MISP version from VERSION.json file as array with major, minor and hotfix keys.\n     *\n     * @return array\n     * @throws JsonException\n     */\n    public function checkMISPVersion()\n    {\n        static $versionArray;\n        if ($versionArray === null) {\n            $content = FileAccessTool::readFromFile(ROOT . DS . 'VERSION.json');\n            $versionArray = JsonTool::decode($content);\n        }\n        return $versionArray;\n    }\n\n    /**\n     * Returns MISP commit hash.\n     *\n     * @return false|string\n     */\n    public function checkMIPSCommit()\n    {\n        static $commit;\n        if ($commit === null) {\n            App::uses('GitTool', 'Tools');\n            try {\n                $commit = GitTool::currentCommit();\n            } catch (Exception $e) {\n                $this->logException('Could not get current git commit', $e, LOG_NOTICE);\n                $commit = false;\n            }\n        }\n        return $commit;\n    }\n\n    // take filters in the {\"OR\" => [foo], \"NOT\" => [bar]} format along with conditions and set the conditions\n    public function generic_add_filter($conditions, &$filter, $keys)\n    {\n        $operator_composition = array(\n            'NOT' => 'AND',\n            'OR' => 'OR',\n            'AND' => 'AND'\n        );\n        if (!is_array($keys)) {\n            $keys = array($keys);\n        }\n        if (!isset($filter['OR']) && !isset($filter['AND']) && !isset($filter['NOT'])) {\n            return $conditions;\n        }\n        foreach ($filter as $operator => $filters) {\n            $temp = array();\n            if (!is_array($filters)) {\n                $filters = array($filters);\n            }\n            foreach ($filters as $f) {\n                if ($f === -1) {\n                    foreach ($keys as $key) {\n                        $temp['OR'][$key][] = -1;\n                    }\n                    continue;\n                }\n                // split the filter params into two lists, one for substring searches one for exact ones\n                if (is_string($f) && ($f[strlen($f) - 1] === '%' || $f[0] === '%')) {\n                    foreach ($keys as $key) {\n                        if ($operator === 'NOT') {\n                            $temp[] = array($key . ' NOT LIKE' => $f);\n                        } else {\n                            $temp[] = array($key . ' LIKE' => $f);\n                            $temp[] = array($key => $f);\n                        }\n                    }\n                } else {\n                    foreach ($keys as $key) {\n                        if ($operator === 'NOT') {\n                            $temp[$key . ' !='][] = $f;\n                        } else {\n                            $temp['OR'][$key][] = $f;\n                        }\n                    }\n                }\n            }\n            $conditions['AND'][] = array($operator_composition[$operator] => $temp);\n            if ($operator !== 'NOT') {\n                unset($filter[$operator]);\n            }\n        }\n        return $conditions;\n    }\n\n    /*\n     * Get filters in one of the following formats:\n     * [foo, bar]\n     * [\"OR\" => [foo, bar], \"NOT\" => [baz]]\n     * \"foo\"\n     * \"foo&&bar&&!baz\"\n     * and convert it into the same format [\"OR\" => [foo, bar], \"NOT\" => [baz]]\n     */\n    public function convert_filters($filter)\n    {\n        if (!is_array($filter)) {\n            $temp = explode('&&', $filter);\n            $filter = array();\n            foreach ($temp as $f) {\n                $f = strval($f);\n                if ($f !== '') {\n                    if ($f[0] === '!') {\n                        $filter['NOT'][] = substr($f, 1);\n                    } else {\n                        $filter['OR'][] = $f;\n                    }\n                }\n            }\n            return $filter;\n        }\n        if (!isset($filter['OR']) && !isset($filter['NOT']) && !isset($filter['AND'])) {\n            $temp = array();\n            foreach ($filter as $param) {\n                $param = strval($param);\n                if (!empty($param)) {\n                    if ($param[0] === '!') {\n                        $temp['NOT'][] = substr($param, 1);\n                    } else {\n                        $temp['OR'][] = $param;\n                    }\n                }\n            }\n            $filter = $temp;\n        }\n        return $filter;\n    }\n\n    protected function convert_to_memory_limit_to_mb($val)\n    {\n        $val = trim($val);\n        if ($val == -1) {\n            // default to 8GB if no limit is set\n            return 8 * 1024;\n        }\n        $unit = $val[strlen($val)-1];\n        if (is_numeric($unit)) {\n            $unit = 'b';\n        } else {\n            $val = intval($val);\n        }\n        $unit = strtolower($unit);\n        switch ($unit) {\n            case 'g':\n                $val *= 1024;\n                // no break\n            case 'm':\n                $val *= 1024;\n                // no break\n            case 'k':\n                $val *= 1024;\n        }\n        return $val / (1024 * 1024);\n    }\n\n    private function __bumpReferences()\n    {\n        $this->Event = ClassRegistry::init('Event');\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $existingSetting = $this->AdminSetting->find('first', array(\n            'conditions' => array('AdminSetting.setting' => 'update_23')\n        ));\n        if (empty($existingSetting)) {\n            $this->AdminSetting->create();\n            $data = array(\n                'setting' => 'update_23',\n                'value' => 1\n            );\n            $this->AdminSetting->save($data);\n            $references = $this->Event->Object->ObjectReference->find('list', array(\n                'recursive' => -1,\n                'fields' => array('ObjectReference.event_id', 'ObjectReference.event_id'),\n                'group' => array('ObjectReference.event_id')\n            ));\n            $event_ids = array();\n            $object_ids = array();\n            foreach ($references as $reference) {\n                $event = $this->Event->find('first', array(\n                    'conditions' => array(\n                        'Event.id' => $reference,\n                        'Event.locked' => 0\n                    ),\n                    'recursive' => -1,\n                    'fields' => array('Event.id', 'Event.locked')\n                ));\n                if (!empty($event)) {\n                    $event_ids[] = $event['Event']['id'];\n                    $event_references = $this->Event->Object->ObjectReference->find('list', array(\n                        'conditions' => array('ObjectReference.event_id' => $reference),\n                        'recursive' => -1,\n                        'fields' => array('ObjectReference.object_id', 'ObjectReference.object_id')\n                    ));\n                    $object_ids = array_merge($object_ids, array_values($event_references));\n                }\n            }\n            if (!empty($object_ids)) {\n                $this->Event->Object->updateAll(\n                    array(\n                    'Object.timestamp' => 'Object.timestamp + 1'\n                    ),\n                    array('Object.id' => $object_ids)\n                );\n                $this->Event->updateAll(\n                    array(\n                    'Event.timestamp' => 'Event.timestamp + 1'\n                    ),\n                    array('Event.id' => $event_ids)\n                );\n            }\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $entry = array(\n                'org' => 'SYSTEM',\n                'model' => 'Server',\n                'model_id' => 0,\n                'email' => 'SYSTEM',\n                'action' => 'update_database',\n                'user_id' => 0,\n                'title' => 'Bumped the timestamps of locked events containing object references.',\n                'change' => sprintf('Event timestamps updated: %s; Object timestamps updated: %s', count($event_ids), count($object_ids))\n            );\n            $this->Log->save($entry);\n        }\n        return true;\n    }\n\n    public function generateRandomFileName()\n    {\n        return (new RandomTool())->random_str(false, 12);\n    }\n\n    /**\n     * @param string|int $delta\n     * @return int Timestamp\n     */\n    public function resolveTimeDelta($delta)\n    {\n        if (is_numeric($delta)) {\n            return (int)$delta;\n        }\n\n        $multiplierArray = ['d' => 86400, 'h' => 3600, 'm' => 60, 's' => 1];\n        $lastChar = strtolower(substr($delta, -1));\n        if (!is_numeric($lastChar) && isset($multiplierArray[$lastChar])) {\n            $multiplier = $multiplierArray[$lastChar];\n            $timeDelta = substr($delta, 0, -1);\n            if (!is_numeric($timeDelta)) {\n                $this->log('Invalid time filter format ' . $delta, LOG_NOTICE);\n                return time() + 1;\n            }\n            return time() - ($timeDelta * $multiplier);\n        }\n\n        $time = strtotime($delta);\n        if ($time !== false) {\n            return $time;\n        }\n\n        $this->log('Invalid time filter format ' . $delta, LOG_NOTICE);\n        return time() + 1;\n    }\n\n    private function __fixServerPullPushRules()\n    {\n        $this->Server = ClassRegistry::init('Server');\n        $servers = $this->Server->find('all', array('recursive' => -1));\n        foreach ($servers as $server) {\n            $changed = false;\n            if (empty($server['Server']['pull_rules'])) {\n                $server['Server']['pull_rules'] = '[]';\n                $changed = true;\n            }\n            if (empty($server['Server']['push_rules'])) {\n                $server['Server']['push_rules'] = '[]';\n                $changed = true;\n            }\n            if ($changed) {\n                $this->Server->save($server);\n            }\n        }\n    }\n\n    /**\n     * Optimised version of CakePHP _findList method when just one or two fields are set from same model\n     * @param string $state\n     * @param array $query\n     * @param array $results\n     * @return array\n     */\n    protected function _findList($state, $query, $results = [])\n    {\n        if ($state === 'before') {\n            return parent::_findList($state, $query, $results);\n        }\n\n        if (empty($results)) {\n            return [];\n        }\n\n        if ($query['list']['groupPath'] === null) {\n            $keyPath = explode('.', $query['list']['keyPath']);\n            $valuePath = explode('.', $query['list']['valuePath']);\n            if ($keyPath[1] === $valuePath[1]) { // same model\n                return array_column(array_column($results, $keyPath[1]), $valuePath[2], $keyPath[2]);\n            }\n        }\n\n        return parent::_findList($state, $query, $results);\n    }\n\n    /**\n     * Find method that allows to fetch just one column from database.\n     * @param $state\n     * @param $query\n     * @param array $results\n     * @return array\n     * @throws InvalidArgumentException\n     */\n    protected function _findColumn($state, $query, $results = array())\n    {\n        if ($state === 'before') {\n            if (isset($query['fields']) && is_array($query['fields']) && count($query['fields']) === 1) {\n                if (strpos($query['fields'][0], '.') === false) {\n                    $query['fields'][0] = $this->alias . '.' . $query['fields'][0];\n                }\n\n                $query['column'] = $query['fields'][0];\n                if (isset($query['unique']) && $query['unique']) {\n                    $query['fields'] = array(\"DISTINCT {$query['fields'][0]}\");\n                } else {\n                    $query['fields'] = array($query['fields'][0]);\n                }\n            } else if (!isset($query['fields'])) {\n                throw new InvalidArgumentException(\"This method requires `fields` option defined.\");\n            } else {\n                throw new InvalidArgumentException(\"Invalid number of column, expected one, \" . count($query['fields']) . \" given\");\n            }\n\n            if (!isset($query['recursive'])) {\n                $query['recursive'] = -1;\n            }\n\n            return $query;\n        }\n\n        // Faster version of `Hash::extract`\n        foreach (explode('.', $query['column']) as $part) {\n            $results = array_column($results, $part);\n        }\n        return $results;\n    }\n\n    /**\n     * @param string $field\n     * @param AppModel $model\n     * @param array $conditions\n     */\n    public function addCountField($field, AppModel $model, array $conditions)\n    {\n        $db = $this->getDataSource();\n        $subQuery = $db->buildStatement(\n            array(\n                'fields'     => ['COUNT(*)'],\n                'table'      => $db->fullTableName($model),\n                'alias'      => $model->alias,\n                'conditions' => $conditions,\n            ),\n            $model\n        );\n        $this->virtualFields[$field] = $subQuery;\n    }\n\n    /**\n     * Log exception with backtrace and with nested exceptions.\n     *\n     * @param string $message\n     * @param Exception $exception\n     * @param int $type\n     * @return bool\n     */\n    protected function logException($message, Exception $exception, $type = LOG_ERR)\n    {\n        // If Sentry is installed, send exception to Sentry\n        if (function_exists('\\Sentry\\captureException') && $type === LOG_ERR) {\n            \\Sentry\\captureException($exception);\n        }\n\n        $message .= \"\\n\";\n\n        do {\n            $message .= sprintf(\"[%s] %s\", get_class($exception), $exception->getMessage());\n            $message .= \"\\nStack Trace:\\n\" . $exception->getTraceAsString();\n            $exception = $exception->getPrevious();\n        } while ($exception !== null);\n\n        return $this->log($message, $type);\n    }\n\n    /**\n     * Decodes JSON string and throws exception if string is not valid JSON or if is not array.\n     *\n     * @param string $json\n     * @return array\n     * @throws JsonException\n     * @throws UnexpectedValueException\n     * @deprecated\n     */\n    protected function jsonDecode($json)\n    {\n        return JsonTool::decodeArray($json);\n    }\n\n    /**\n     * Faster version of default `hasAny` method\n     * @param array|null $conditions\n     * @return bool\n     */\n    public function hasAny($conditions = null)\n    {\n        return (bool)$this->find('first', [\n            'fields' => [$this->alias . '.' . $this->primaryKey],\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'callbacks' => false,\n            'order' => [], // disable order\n        ]);\n    }\n\n    /**\n     * Faster version of original `isUnique` method\n     * {@inheritDoc}\n     */\n    public function isUnique($fields, $or = true)\n    {\n        if (is_array($or)) {\n            $isRule = (\n                array_key_exists('rule', $or) &&\n                array_key_exists('required', $or) &&\n                array_key_exists('message', $or)\n            );\n            if (!$isRule) {\n                $args = func_get_args();\n                $fields = $args[1];\n                $or = isset($args[2]) ? $args[2] : true;\n            }\n        }\n        if (!is_array($fields)) {\n            $fields = func_get_args();\n            $fieldCount = count($fields) - 1;\n            if (is_bool($fields[$fieldCount])) {\n                $or = $fields[$fieldCount];\n                unset($fields[$fieldCount]);\n            }\n        }\n\n        foreach ($fields as $field => $value) {\n            if (is_numeric($field)) {\n                unset($fields[$field]);\n\n                $field = $value;\n                $value = null;\n                if (isset($this->data[$this->alias][$field])) {\n                    $value = $this->data[$this->alias][$field];\n                }\n            }\n\n            if (strpos($field, '.') === false) {\n                unset($fields[$field]);\n                $fields[$this->alias . '.' . $field] = $value;\n            }\n        }\n\n        if ($or) {\n            $fields = array('or' => $fields);\n        }\n\n        if (!empty($this->id)) {\n            $fields[$this->alias . '.' . $this->primaryKey . ' !='] = $this->id;\n        }\n\n        return !$this->hasAny($fields);\n    }\n\n    /**\n     * Faster version of original `exists` method\n     * {@inheritDoc}\n     */\n    public function exists($id = null)\n    {\n        if ($id === null) {\n            $id = $this->getID();\n        }\n\n        if ($id === false || $this->useTable === false) {\n            return false;\n        }\n\n        return $this->hasAny([$this->alias . '.' . $this->primaryKey => $id]);\n    }\n\n    /**\n     * @param int $value Timestamp in microseconds\n     * @return string\n     */\n    protected function microTimestampToIso($value)\n    {\n        $sec = (int)($value / 1000000);\n        $micro = $value % 1000000;\n        $micro = str_pad($micro, 6, \"0\", STR_PAD_LEFT);\n        return DateTime::createFromFormat('U.u', \"$sec.$micro\")->format('Y-m-d\\TH:i:s.uP');\n    }\n\n    /**\n     * @return AttachmentTool\n     */\n    protected function loadAttachmentTool()\n    {\n        if ($this->attachmentTool === null) {\n            $this->attachmentTool = new AttachmentTool();\n        }\n\n        return $this->attachmentTool;\n    }\n\n    /**\n     * @return AttachmentScan\n     */\n    protected function loadAttachmentScan()\n    {\n        if ($this->AttachmentScan === null) {\n            $this->AttachmentScan = ClassRegistry::init('AttachmentScan');\n        }\n\n        return $this->AttachmentScan;\n    }\n\n    /**\n     * @return Log\n     */\n    protected function loadLog()\n    {\n        if (!isset($this->Log)) {\n            $this->Log = ClassRegistry::init('Log');\n        }\n        return $this->Log;\n    }\n\n    /**\n     * @param string $name\n     * @return string|null Null when Kafka is not enabled, topic is not enabled or topic is not defined\n     */\n    protected function kafkaTopic($name)\n    {\n        static $kafkaEnabled;\n        if ($kafkaEnabled === null) {\n            $kafkaEnabled = (bool)Configure::read('Plugin.Kafka_enable');\n        }\n        if ($kafkaEnabled) {\n            if (!Configure::read(\"Plugin.Kafka_{$name}_notifications_enable\")) {\n                return null;\n            }\n            return Configure::read(\"Plugin.Kafka_{$name}_notifications_topic\") ?: null;\n        }\n        return null;\n    }\n\n    /**\n     * @param string $name\n     * @return bool\n     */\n    protected function pubToZmq($name)\n    {\n        static $zmqEnabled;\n        if ($zmqEnabled === null) {\n            $zmqEnabled = (bool)Configure::read('Plugin.ZeroMQ_enable');\n        }\n        if ($zmqEnabled) {\n            return Configure::read(\"Plugin.ZeroMQ_{$name}_notifications_enable\");\n        }\n        return false;\n    }\n\n    /**\n     * @return bool Returns true if database is MySQL/Mariadb, false for PostgreSQL\n     */\n    protected function isMysql()\n    {\n        $dataSource = ConnectionManager::getDataSource('default');\n        $dataSourceName = $dataSource->config['datasource'];\n        return $dataSourceName === 'Database/Mysql' || $dataSourceName === 'Database/MysqlObserver' || $dataSourceName === 'Database/MysqlExtended' || $dataSource instanceof Mysql;\n    }\n\n    /**\n     * executeTrigger\n     *\n     * @param string $trigger_id\n     * @param array $data Data to be passed to the workflow\n     * @param array $blockingErrors Errors will be appened if any\n     * @param array $logging If the execution failure should be logged\n     * @return boolean If the execution for the blocking path was a success\n     */\n    protected function executeTrigger($trigger_id, array $data=[], array &$blockingErrors=[], array $logging=[]): bool\n    {\n        if ($this->isTriggerCallable($trigger_id)) {\n           $success = $this->Workflow->executeWorkflowForTriggerRouter($trigger_id, $data, $blockingErrors, $logging);\n           if (!empty($logging) && empty($success)) {\n                $logging['message'] = !empty($logging['message']) ? $logging['message'] : __('Error while executing workflow.');\n                $errorMessage = implode(', ', $blockingErrors);\n                $this->loadLog()->createLogEntry('SYSTEM', $logging['action'], $logging['model'], $logging['id'], $logging['message'], __('Returned message: %s', $errorMessage));\n           }\n           return $success;\n        }\n        return true;\n    }\n\n    protected function isTriggerCallable($trigger_id): bool\n    {\n        static $workflowEnabled;\n        if ($workflowEnabled === null) {\n            $workflowEnabled = (bool)Configure::read('Plugin.Workflow_enable');\n        }\n\n        if (!$workflowEnabled) {\n            return false;\n        }\n\n        if ($this->Workflow === null) {\n            $this->Workflow = ClassRegistry::init('Workflow');\n        }\n        return $this->Workflow->checkTriggerEnabled($trigger_id) &&\n            $this->Workflow->checkTriggerListenedTo($trigger_id);\n    }\n\n    /**\n     * Use different CakeEventManager to fix memory leak\n     * @return CakeEventManager\n     */\n    public function getEventManager()\n    {\n        if (empty($this->_eventManager)) {\n            $this->_eventManager = new BetterCakeEventManager();\n            $this->_eventManager->attach($this->Behaviors);\n            $this->_eventManager->attach($this);\n        }\n        return $this->_eventManager;\n    }\n\n    private function __retireOldCorrelationEngine($user = null)\n    {\n        if ($user === null) {\n            $user = [\n                'id' => 0,\n                'email' => 'SYSTEM',\n                'Organisation' => [\n                    'name' => 'SYSTEM'\n                ]\n            ];\n        }\n        $this->Correlation = ClassRegistry::init('Correlation');\n        $this->Attribute = ClassRegistry::init('Attribute');\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Correlation->truncate($user, 'Legacy');\n            $this->Attribute->generateCorrelation();\n        } else {\n            $job = ClassRegistry::init('Job');\n            $jobId = $job->createJob(\n                'SYSTEM',\n                Job::WORKER_DEFAULT,\n                'truncate table',\n                $this->Correlation->validEngines['Legacy'],\n                'Job created.'\n            );\n            $this->getBackgroundJobsTool()->enqueue(\n                BackgroundJobsTool::DEFAULT_QUEUE,\n                BackgroundJobsTool::CMD_ADMIN,\n                [\n                    'truncateTable',\n                    0,\n                    'Legacy',\n                    $jobId\n                ],\n                true,\n                $jobId\n            );\n            $jobId = $job->createJob(\n                'SYSTEM',\n                Job::WORKER_DEFAULT,\n                'generate correlation',\n                'All attributes',\n                'Job created.'\n            );\n\n            $this->getBackgroundJobsTool()->enqueue(\n                BackgroundJobsTool::DEFAULT_QUEUE,\n                BackgroundJobsTool::CMD_ADMIN,\n                [\n                    'jobGenerateCorrelation',\n                    $jobId\n                ],\n                true,\n                $jobId\n            );\n        }\n    }\n\n    public function removeDuplicateCorrelationEntries($table_name = 'default_correlations')\n    {\n        // If there are duplicate entries, the query creating the `unique_correlation` index will result in an integrity constraint violation.\n        // The query below cleans up potential duplicates before creating the constraint.\n        return $this->query(\"\n            DELETE FROM `$table_name` WHERE id in (\n                SELECT m_id FROM (\n                    SELECT MAX(corr_a.id) as m_id, CONCAT(corr_a.attribute_id, \\\" - \\\", corr_a.1_attribute_id, \\\" - \\\", corr_a.value_id) as uniq FROM `$table_name` corr_a\n                    INNER JOIN `$table_name` corr_b on corr_a.attribute_id = corr_b.attribute_id\n                    WHERE\n                        corr_a.attribute_id = corr_b.attribute_id AND\n                        corr_a.1_attribute_id = corr_b.1_attribute_id AND\n                        corr_a.value_id = corr_b.value_id AND\n                        corr_a.id <> corr_b.id\n                    GROUP BY uniq\n                ) as c\n            );\n        \");\n    }\n\n    public function findOrder($order, $order_model, $valid_order_fields)\n    {\n        if (!is_array($order)) {\n            $order_rules = explode(' ', strtolower($order));\n            $order_field = explode('.', $order_rules[0]);\n            $order_field = end($order_field);\n            if (in_array($order_field, $valid_order_fields)) {\n                $direction = 'asc';\n                if (!empty($order_rules[1]) && trim($order_rules[1]) === 'desc') {\n                    $direction = 'desc';\n                }\n            } else {\n                return null;\n            }\n            return $order_model . '.' . $order_field . ' ' . $direction;\n        }\n        return null;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function _remoteIp()\n    {\n        $ipHeader = Configure::read('MISP.log_client_ip_header') ?: null;\n        if ($ipHeader && isset($_SERVER[$ipHeader])) {\n            return trim($_SERVER[$ipHeader]);\n        }\n        return $_SERVER['REMOTE_ADDR'] ?? null;\n    }\n\n    public function find($type = 'first', $query = array()) {\n        if (!empty($query['order']) && $this->validOrderClause($query['order']) === false) {\n            throw new InvalidArgumentException('Invalid order clause');\n        }\n\n        return parent::find($type, $query);\n    }\n\n    private function validOrderClause($order){\n        $pattern = '/^[\\w\\_\\-\\.\\(\\) ]+$/';\n        if(is_string($order) && preg_match($pattern, $order)){\n            return true;\n        }\n\n        if (is_array($order)) {\n            foreach ($order as $key => $value) {\n                if (is_string($key) && is_string($value) && preg_match($pattern, $key) && in_array(strtolower($value), ['asc', 'desc'])) {\n                    return true;\n                }\n                if(is_numeric($key) && is_string($value) && preg_match($pattern, $value)){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public function checkParam($param)\n    {\n        return preg_match('/^[\\w\\_\\-\\. ]+$/', $param);\n    }\n}\n"], "filenames": ["app/Model/AppModel.php"], "buggy_code_start_loc": [4023], "buggy_code_end_loc": [4023], "fixing_code_start_loc": [4024], "fixing_code_end_loc": [4029], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in MISP before 2.4.176. app/Model/AppModel.php lacks a checkParam function for alphanumerics, underscore, dash, period, and space.", "other": {"cve": {"id": "CVE-2023-48658", "sourceIdentifier": "cve@mitre.org", "published": "2023-11-17T05:15:12.793", "lastModified": "2024-01-10T00:15:45.780", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP before 2.4.176. app/Model/AppModel.php lacks a checkParam function for alphanumerics, underscore, dash, period, and space."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en MISP antes de la versi\u00f3n 2.4.176. app/Model/AppModel.php carece de una funci\u00f3n checkParam para caracteres alfanum\u00e9ricos, guiones bajos, guiones, puntos y espacios."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp-project:malware_information_sharing_platform:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.176", "matchCriteriaId": "2BBA7CBC-4331-4A5C-A738-3AC216AFC03A"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/168621521b57b2437331174186f84a6aa3e71f0d", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.175...v2.4.176", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Release Notes"]}, {"url": "https://zigrin.com/advisories/misp-time-based-sql-injection-in-logs-index/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/168621521b57b2437331174186f84a6aa3e71f0d"}}