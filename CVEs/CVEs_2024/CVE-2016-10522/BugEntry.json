{"buggy_code": ["require 'rails_admin/abstract_model'\n\nmodule RailsAdmin\n  class ModelNotFound < ::StandardError\n  end\n\n  class ObjectNotFound < ::StandardError\n  end\n\n  class ActionNotAllowed < ::StandardError\n  end\n\n  class ApplicationController < Config.parent_controller.constantize\n    before_action :_authenticate!\n    before_action :_authorize!\n    before_action :_audit!\n\n    helper_method :_current_user, :_get_plugin_name\n\n    attr_reader :object, :model_config, :abstract_model, :authorization_adapter\n\n    def get_model\n      @model_name = to_model_name(params[:model_name])\n      raise(RailsAdmin::ModelNotFound) unless (@abstract_model = RailsAdmin::AbstractModel.new(@model_name))\n      raise(RailsAdmin::ModelNotFound) if (@model_config = @abstract_model.config).excluded?\n      @properties = @abstract_model.properties\n    end\n\n    def get_object\n      raise(RailsAdmin::ObjectNotFound) unless (@object = @abstract_model.get(params[:id]))\n    end\n\n    def to_model_name(param)\n      param.split('~').collect(&:camelize).join('::')\n    end\n\n    def _current_user\n      instance_eval(&RailsAdmin::Config.current_user_method)\n    end\n\n  private\n\n    def _get_plugin_name\n      @plugin_name_array ||= [RailsAdmin.config.main_app_name.is_a?(Proc) ? instance_eval(&RailsAdmin.config.main_app_name) : RailsAdmin.config.main_app_name].flatten\n    end\n\n    def _authenticate!\n      instance_eval(&RailsAdmin::Config.authenticate_with)\n    end\n\n    def _authorize!\n      instance_eval(&RailsAdmin::Config.authorize_with)\n    end\n\n    def _audit!\n      instance_eval(&RailsAdmin::Config.audit_with)\n    end\n\n    def rails_admin_controller?\n      true\n    end\n\n    rescue_from RailsAdmin::ObjectNotFound do\n      flash[:error] = I18n.t('admin.flash.object_not_found', model: @model_name, id: params[:id])\n      params[:action] = 'index'\n      @status_code = :not_found\n      index\n    end\n\n    rescue_from RailsAdmin::ModelNotFound do\n      flash[:error] = I18n.t('admin.flash.model_not_found', model: @model_name)\n      params[:action] = 'dashboard'\n      @status_code = :not_found\n      dashboard\n    end\n  end\nend\n", "require 'spec_helper'\n\ndescribe RailsAdmin, type: :request do\n  subject { page }\n\n  before do\n    RailsAdmin::Config.authenticate_with { warden.authenticate! scope: :user }\n    RailsAdmin::Config.current_user_method(&:current_user)\n    login_as User.create(\n      email: 'username@example.com',\n      password: 'password',\n    )\n  end\n\n  # A common mistake for translators is to forget to change the YAML file's\n  # root key from en to their own locale (as people tend to use the English\n  # file as template for a new translation).\n  describe 'localization' do\n    it 'defaults to English' do\n      RailsAdmin.config.included_models = []\n      visit dashboard_path\n\n      is_expected.to have_content('Site Administration')\n      is_expected.to have_content('Dashboard')\n    end\n  end\n\n  describe 'html head' do\n    before { visit dashboard_path }\n\n    # Note: the [href^=\"/asset... syntax matches the start of a value. The reason\n    # we just do that is to avoid being confused by rails' asset_ids.\n    it 'loads stylesheets in header' do\n      is_expected.to have_selector('head link[href^=\"/assets/rails_admin/rails_admin\"][href$=\".css\"]', visible: false)\n    end\n\n    it 'loads javascript files in body' do\n      is_expected.to have_selector('head script[src^=\"/assets/rails_admin/rails_admin\"][src$=\".js\"]', visible: false)\n    end\n  end\n\n  describe 'hidden fields with default values' do\n    before do\n      RailsAdmin.config Player do\n        include_all_fields\n        edit do\n          field :name, :hidden do\n            default_value do\n              bindings[:view]._current_user.email\n            end\n          end\n        end\n      end\n    end\n\n    it 'shows up with default value, hidden' do\n      visit new_path(model_name: 'player')\n      is_expected.to have_selector(\"#player_name[type=hidden][value='username@example.com']\", visible: false)\n      is_expected.not_to have_selector(\"#player_name[type=hidden][value='toto@example.com']\", visible: false)\n    end\n\n    it 'does not show label' do\n      is_expected.not_to have_selector('label', text: 'Name')\n    end\n\n    it 'does not show help block' do\n      is_expected.not_to have_xpath(\"id('player_name')/../p[@class='help-block']\")\n    end\n  end\n\n  describe '_current_user' do # https://github.com/sferik/rails_admin/issues/549\n    it 'is accessible from the list view' do\n      RailsAdmin.config Player do\n        list do\n          field :name do\n            visible do\n              bindings[:view]._current_user.email == 'username@example.com'\n            end\n          end\n\n          field :team do\n            visible do\n              bindings[:view]._current_user.email == 'foo@example.com'\n            end\n          end\n        end\n      end\n\n      visit index_path(model_name: 'player')\n      is_expected.to have_selector('.header.name_field')\n      is_expected.not_to have_selector('.header.team_field')\n    end\n  end\n\n  describe 'polymorphic associations' do\n    before :each do\n      @team = FactoryGirl.create :team\n      @comment = FactoryGirl.create :comment, commentable: @team\n    end\n\n    it 'works like belongs to associations in the list view' do\n      visit index_path(model_name: 'comment')\n\n      is_expected.to have_content(@team.name)\n    end\n\n    it 'is editable' do\n      visit edit_path(model_name: 'comment', id: @comment.id)\n\n      is_expected.to have_selector('select#comment_commentable_type')\n      is_expected.to have_selector('select#comment_commentable_id')\n    end\n\n    it 'is visible in the owning end' do\n      visit edit_path(model_name: 'team', id: @team.id)\n\n      is_expected.to have_selector('select#team_comment_ids')\n    end\n  end\n\n  describe 'secondary navigation' do\n    it 'has Gravatar image' do\n      visit dashboard_path\n      is_expected.to have_selector('ul.navbar-right img[src*=\"gravatar.com\"]')\n    end\n\n    it \"does not show Gravatar when user doesn't have email method\" do\n      allow_any_instance_of(User).to receive(:respond_to?).and_return(true)\n      allow_any_instance_of(User).to receive(:respond_to?).with(:email).and_return(false)\n      allow_any_instance_of(User).to receive(:respond_to?).with(:devise_scope).and_return(false)\n      visit dashboard_path\n      is_expected.not_to have_selector('ul.nav.pull-right li img')\n    end\n\n    it 'does not cause error when email is nil' do\n      allow_any_instance_of(User).to receive(:email).and_return(nil)\n      visit dashboard_path\n      is_expected.to have_selector('body.rails_admin')\n    end\n\n    it 'shows a log out link' do\n      visit dashboard_path\n      is_expected.to have_content 'Log out'\n    end\n\n    it 'has label-danger class on log out link' do\n      visit dashboard_path\n      is_expected.to have_selector('.label-danger')\n    end\n  end\nend\n"], "fixing_code": ["require 'rails_admin/abstract_model'\n\nmodule RailsAdmin\n  class ModelNotFound < ::StandardError\n  end\n\n  class ObjectNotFound < ::StandardError\n  end\n\n  class ActionNotAllowed < ::StandardError\n  end\n\n  class ApplicationController < Config.parent_controller.constantize\n    protect_from_forgery with: :exception\n\n    before_action :_authenticate!\n    before_action :_authorize!\n    before_action :_audit!\n\n    helper_method :_current_user, :_get_plugin_name\n\n    attr_reader :object, :model_config, :abstract_model, :authorization_adapter\n\n    def get_model\n      @model_name = to_model_name(params[:model_name])\n      raise(RailsAdmin::ModelNotFound) unless (@abstract_model = RailsAdmin::AbstractModel.new(@model_name))\n      raise(RailsAdmin::ModelNotFound) if (@model_config = @abstract_model.config).excluded?\n      @properties = @abstract_model.properties\n    end\n\n    def get_object\n      raise(RailsAdmin::ObjectNotFound) unless (@object = @abstract_model.get(params[:id]))\n    end\n\n    def to_model_name(param)\n      param.split('~').collect(&:camelize).join('::')\n    end\n\n    def _current_user\n      instance_eval(&RailsAdmin::Config.current_user_method)\n    end\n\n  private\n\n    def _get_plugin_name\n      @plugin_name_array ||= [RailsAdmin.config.main_app_name.is_a?(Proc) ? instance_eval(&RailsAdmin.config.main_app_name) : RailsAdmin.config.main_app_name].flatten\n    end\n\n    def _authenticate!\n      instance_eval(&RailsAdmin::Config.authenticate_with)\n    end\n\n    def _authorize!\n      instance_eval(&RailsAdmin::Config.authorize_with)\n    end\n\n    def _audit!\n      instance_eval(&RailsAdmin::Config.audit_with)\n    end\n\n    def rails_admin_controller?\n      true\n    end\n\n    rescue_from RailsAdmin::ObjectNotFound do\n      flash[:error] = I18n.t('admin.flash.object_not_found', model: @model_name, id: params[:id])\n      params[:action] = 'index'\n      @status_code = :not_found\n      index\n    end\n\n    rescue_from RailsAdmin::ModelNotFound do\n      flash[:error] = I18n.t('admin.flash.model_not_found', model: @model_name)\n      params[:action] = 'dashboard'\n      @status_code = :not_found\n      dashboard\n    end\n  end\nend\n", "require 'spec_helper'\n\ndescribe RailsAdmin, type: :request do\n  subject { page }\n\n  before do\n    RailsAdmin::Config.authenticate_with { warden.authenticate! scope: :user }\n    RailsAdmin::Config.current_user_method(&:current_user)\n    login_as User.create(\n      email: 'username@example.com',\n      password: 'password',\n    )\n  end\n\n  # A common mistake for translators is to forget to change the YAML file's\n  # root key from en to their own locale (as people tend to use the English\n  # file as template for a new translation).\n  describe 'localization' do\n    it 'defaults to English' do\n      RailsAdmin.config.included_models = []\n      visit dashboard_path\n\n      is_expected.to have_content('Site Administration')\n      is_expected.to have_content('Dashboard')\n    end\n  end\n\n  describe 'html head' do\n    before { visit dashboard_path }\n\n    # Note: the [href^=\"/asset... syntax matches the start of a value. The reason\n    # we just do that is to avoid being confused by rails' asset_ids.\n    it 'loads stylesheets in header' do\n      is_expected.to have_selector('head link[href^=\"/assets/rails_admin/rails_admin\"][href$=\".css\"]', visible: false)\n    end\n\n    it 'loads javascript files in body' do\n      is_expected.to have_selector('head script[src^=\"/assets/rails_admin/rails_admin\"][src$=\".js\"]', visible: false)\n    end\n  end\n\n  describe 'hidden fields with default values' do\n    before do\n      RailsAdmin.config Player do\n        include_all_fields\n        edit do\n          field :name, :hidden do\n            default_value do\n              bindings[:view]._current_user.email\n            end\n          end\n        end\n      end\n    end\n\n    it 'shows up with default value, hidden' do\n      visit new_path(model_name: 'player')\n      is_expected.to have_selector(\"#player_name[type=hidden][value='username@example.com']\", visible: false)\n      is_expected.not_to have_selector(\"#player_name[type=hidden][value='toto@example.com']\", visible: false)\n    end\n\n    it 'does not show label' do\n      is_expected.not_to have_selector('label', text: 'Name')\n    end\n\n    it 'does not show help block' do\n      is_expected.not_to have_xpath(\"id('player_name')/../p[@class='help-block']\")\n    end\n  end\n\n  describe '_current_user' do # https://github.com/sferik/rails_admin/issues/549\n    it 'is accessible from the list view' do\n      RailsAdmin.config Player do\n        list do\n          field :name do\n            visible do\n              bindings[:view]._current_user.email == 'username@example.com'\n            end\n          end\n\n          field :team do\n            visible do\n              bindings[:view]._current_user.email == 'foo@example.com'\n            end\n          end\n        end\n      end\n\n      visit index_path(model_name: 'player')\n      is_expected.to have_selector('.header.name_field')\n      is_expected.not_to have_selector('.header.team_field')\n    end\n  end\n\n  describe 'polymorphic associations' do\n    before :each do\n      @team = FactoryGirl.create :team\n      @comment = FactoryGirl.create :comment, commentable: @team\n    end\n\n    it 'works like belongs to associations in the list view' do\n      visit index_path(model_name: 'comment')\n\n      is_expected.to have_content(@team.name)\n    end\n\n    it 'is editable' do\n      visit edit_path(model_name: 'comment', id: @comment.id)\n\n      is_expected.to have_selector('select#comment_commentable_type')\n      is_expected.to have_selector('select#comment_commentable_id')\n    end\n\n    it 'is visible in the owning end' do\n      visit edit_path(model_name: 'team', id: @team.id)\n\n      is_expected.to have_selector('select#team_comment_ids')\n    end\n  end\n\n  describe 'secondary navigation' do\n    it 'has Gravatar image' do\n      visit dashboard_path\n      is_expected.to have_selector('ul.navbar-right img[src*=\"gravatar.com\"]')\n    end\n\n    it \"does not show Gravatar when user doesn't have email method\" do\n      allow_any_instance_of(User).to receive(:respond_to?).and_return(true)\n      allow_any_instance_of(User).to receive(:respond_to?).with(:email).and_return(false)\n      allow_any_instance_of(User).to receive(:respond_to?).with(:devise_scope).and_return(false)\n      visit dashboard_path\n      is_expected.not_to have_selector('ul.nav.pull-right li img')\n    end\n\n    it 'does not cause error when email is nil' do\n      allow_any_instance_of(User).to receive(:email).and_return(nil)\n      visit dashboard_path\n      is_expected.to have_selector('body.rails_admin')\n    end\n\n    it 'shows a log out link' do\n      visit dashboard_path\n      is_expected.to have_content 'Log out'\n    end\n\n    it 'has label-danger class on log out link' do\n      visit dashboard_path\n      is_expected.to have_selector('.label-danger')\n    end\n  end\n\n  describe 'CSRF protection' do\n    before do\n      allow_any_instance_of(ActionController::Base).to receive(:protect_against_forgery?).and_return(true)\n    end\n\n    it 'is enforced' do\n      visit new_path(model_name: 'league')\n      fill_in 'league[name]', with: 'National league'\n      find('input[name=\"authenticity_token\"]', visible: false).set(\"invalid token\")\n      expect { click_button 'Save' }.to raise_error ActionController::InvalidAuthenticityToken\n    end\n  end\nend\n"], "filenames": ["app/controllers/rails_admin/application_controller.rb", "spec/integration/rails_admin_spec.rb"], "buggy_code_start_loc": [13, 150], "buggy_code_end_loc": [13, 150], "fixing_code_start_loc": [14, 151], "fixing_code_end_loc": [16, 164], "type": "CWE-352", "message": "rails_admin ruby gem <v1.1.1 is vulnerable to cross-site request forgery (CSRF) attacks. Non-GET methods were not validating CSRF tokens and, as a result, an attacker could hypothetically gain access to the application administrative endpoints exposed by the gem.", "other": {"cve": {"id": "CVE-2016-10522", "sourceIdentifier": "support@hackerone.com", "published": "2018-07-05T16:29:00.250", "lastModified": "2019-10-09T23:16:42.263", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "rails_admin ruby gem <v1.1.1 is vulnerable to cross-site request forgery (CSRF) attacks. Non-GET methods were not validating CSRF tokens and, as a result, an attacker could hypothetically gain access to the application administrative endpoints exposed by the gem."}, {"lang": "es", "value": "La gema de ruby rails_admin ruby gem en versiones anteriores a la v1.1.1 es vulnerable a ataques de Cross-Site Request Forgery (CSRF). Los m\u00e9todos non-GET no validaban los tokens CSRF y, como resultado, un atacante podr\u00eda obtener acceso a los endpoints administrativos de la aplicaci\u00f3n expuestos por la gema."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rails_admin_project:rails_admin:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "1.1.1", "matchCriteriaId": "889808ED-D6A0-43BC-B039-F888B330AE2C"}]}]}], "references": [{"url": "https://github.com/sferik/rails_admin/commit/b13e879eb93b661204e9fb5e55f7afa4f397537a", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.sourceclear.com/blog/Rails_admin-Vulnerability-Disclosure/", "source": "support@hackerone.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://www.sourceclear.com/registry/security/cross-site-request-forgery-csrf-/ruby/sid-3173", "source": "support@hackerone.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sferik/rails_admin/commit/b13e879eb93b661204e9fb5e55f7afa4f397537a"}}