{"buggy_code": ["class apache::certs (\n    $hostname = $::certs::node_fqdn,\n    $generate = $::certs::generate,\n    $regenerate = $::certs::regenerate,\n    $deploy   = $::certs::deploy,\n    $ca       = $::certs::default_ca,\n    $apache_ssl_cert = '/etc/pki/tls/certs/katello-node.crt',\n    $apache_ssl_key = '/etc/pki/tls/private/katello-node.key'\n  ) {\n\n  cert { \"${::certs::node_fqdn}-ssl\":\n    hostname    => $::certs::node_fqdn,\n    ensure      => present,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => $::certs::org,\n    org_unit    => $::certs::org_unit,\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate    => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    include apache\n    include apache::ssl\n\n    pubkey { $apache_ssl_cert:\n      ensure => present,\n      cert => Cert[\"${::certs::node_fqdn}-ssl\"]\n    } ~>\n    privkey { $apache_ssl_key:\n      ensure => present,\n      cert => Cert[\"${::certs::node_fqdn}-ssl\"]\n    }\n\n    file { \"${apache::params::configdir}/ssl.conf\":\n      content => template(\"apache/ssl.conf.erb\"),\n      mode   => '0644',\n      owner  => 'root',\n      group  => 'root',\n      require => [Pubkey[$apache_ssl_cert], Privkey[$apache_ssl_key]],\n      notify => Exec['reload-apache'],\n    }\n  }\n}\n", "require 'fileutils'\nmodule Puppet::Provider::KatelloSslTool\n\n  class Cert < Puppet::Provider\n\n    initvars\n\n    commands :rpm => 'rpm'\n    commands :yum => 'yum'\n    commands :katello_ssl_tool_command => 'katello-ssl-tool'\n\n    def exists?\n      ! generate? && ! deploy?\n    end\n\n    def create\n      generate! if generate?\n      deploy!   if deploy?\n    end\n\n    def self.details(cert_name)\n      details = { :pubkey  => pubkey(cert_name),\n                  :privkey   => privkey(cert_name) }\n\n      passphrase_file = passphrase_file(cert_name)\n      if File.exists?(passphrase_file)\n        details[:passphrase] = File.read(passphrase_file).chomp\n      end\n\n      return details\n    end\n\n    def self.pubkey(name)\n      # TODO: just temporarily until we have this changes in katello installer as well\n      if name == 'candlepin-ca'\n        '/usr/share/katello/candlepin-cert.crt'\n      else\n        target_path(\"certs/#{name}.crt\")\n      end\n    end\n\n    def self.privkey(name)\n      # TODO: just temporarily until we have this changes in katello installer as well\n      if name == 'candlepin-ca'\n        build_path('candlepin-cert.key')\n      else\n        target_path(\"private/#{name}.key\")\n      end\n    end\n\n    def self.passphrase_file(name)\n      # TODO: just temporarily until we have this changes in katello installer as well\n      if name == 'candlepin-ca'\n        '/etc/katello/candlepin_ca_password-file'\n      else\n        build_path(\"#{name}.pwd\")\n      end\n    end\n\n    protected\n\n    def katello_ssl_tool(*args)\n      Dir.chdir('/root') do\n        katello_ssl_tool_command(*args)\n      end\n    end\n\n    def generate?\n      return false unless resource[:generate]\n      return true if resource[:regenerate]\n      return files_to_generate.any? { |file| ! File.exist?(file) }\n    end\n\n    def files_to_generate\n      [rpmfile]\n    end\n\n    def deploy?\n      return false unless resource[:deploy]\n      return true if resource[:regenerate]\n      return true if files_to_deploy.any? { |file| ! File.exist?(file) }\n      return true if new_version_available?\n    end\n\n    def files_to_deploy\n      [pubkey, privkey]\n    end\n\n    def deploy!\n      if File.exists?(rpmfile)\n        # the rpm is available locally on the file system\n        rpm('-Uvh', '--force', rpmfile)\n      else\n        # we search the rpm in yum repo\n        yum(\"install\", \"-y\", rpmfile_base_name)\n      end\n    end\n\n    def new_version_available?\n      if File.exists?(rpmfile)\n        current_version = version_from_name(`rpm -q #{rpmfile_base_name}`)\n        latest_version = version_from_name(`rpm -pq #{rpmfile}`)\n        (latest_version <=> current_version) > 0\n      else\n        `yum check-update #{rpmfile_base_name} &>/dev/null`\n        $?.exitstatus == 100\n      end\n    end\n\n    def version_from_name(rpmname)\n      rpmname.scan(/\\d+/).map(&:to_i)\n    end\n\n    def common_args\n      [ '--set-country', resource[:country],\n       '--set-state', resource[:state],\n       '--set-city', resource[:city],\n       '--set-org', resource[:org],\n       '--set-org-unit', resource[:org_unit],\n       '--set-email', resource[:email],\n       '--cert-expiration', resource[:expiration]]\n    end\n\n    def rpmfile\n      rpmfile = Dir[self.build_path(\"#{rpmfile_base_name}*.noarch.rpm\")].max_by do |file|\n        version_from_name(file)\n      end\n      rpmfile ||= self.build_path(\"#{rpmfile_base_name}.noarch.rpm\")\n      return rpmfile\n    end\n\n    def rpmfile_base_name\n      resource[:name]\n    end\n\n    def pubkey\n      self.class.pubkey(resource[:name])\n    end\n\n    def privkey\n      self.class.privkey(resource[:name])\n    end\n\n    def passphrase_file\n      self.class.passphrase_file(resource[:name])\n    end\n\n    def full_path(file_name)\n      self.class.full_path(file_name)\n    end\n\n    def self.target_path(file_name = nil)\n      File.join(\"/etc/pki/tls\", file_name)\n    end\n\n    def build_path(file_name)\n      self.class.build_path(file_name)\n    end\n\n    def self.build_path(file_name = nil)\n      File.join(\"/root/ssl-build\", file_name)\n    end\n\n  end\n\n  class CertFile < Puppet::Provider\n\n    include Puppet::Util::Checksums\n\n    initvars\n\n    def exists?\n      return false unless File.exists?(resource[:path])\n      checksum(expected_content) == checksum(current_content)\n    end\n\n    def create\n      File.open(resource[:path], \"w\") { |f| f << expected_content }\n    end\n\n    protected\n\n    def expected_content\n      File.read(source_path)\n    end\n\n    def current_content\n      File.read(resource[:path])\n    end\n\n\n    def checksum(content)\n      md5(content)\n    end\n\n    # what path to copy from\n    def source_path\n      raise NotImplementedError\n    end\n\n    def cert_details\n      return @cert_details if defined? @cert_details\n      if cert_resource = @resource[:cert]\n        name = cert_resource.to_hash[:name]\n        @cert_details = Puppet::Provider::KatelloSslTool::Cert.details(name)\n      else\n        raise 'Cert was not specified'\n      end\n    end\n\n  end\n\nend\n", "require File.expand_path('../../katello_ssl_tool', __FILE__)\n\nPuppet::Type.type(:privkey).provide(:katello_ssl_tool, :parent => Puppet::Provider::KatelloSslTool::CertFile) do\n\n  protected\n\n  def source_path\n    cert_details[:privkey]\n  end\n\nend\n", "class kafo::foreman_certs (\n    $hostname    = $::certs::node_fqdn,\n    $generate    = $::certs::generate,\n    $regenerate  = $::certs::regenerate,\n    $deploy      = $::certs::deploy,\n    $ca          = $::certs::default_ca,\n    $client_cert = $::kafo::params::foreman_client_cert,\n    $client_key  = $::kafo::params::foreman_client_key,\n    $client_ca   = $::kafo::params::foreman_client_ca\n  ) {\n\n  # cert for authentication of puppetmaster against foreman\n  cert { \"${::kafo::foreman_certs::hostname}-foreman-client\":\n    hostname    => $::kafo::foreman_certs::hostname,\n    purpose     => client,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => 'FOREMAN',\n    org_unit    => 'PUPPET',\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate    => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    pubkey { $client_cert:\n      cert => Cert[\"${::kafo::foreman_certs::hostname}-foreman-client\"],\n    }\n\n    privkey { $client_key:\n      cert => Cert[\"${::kafo::foreman_certs::hostname}-foreman-client\"],\n    } ->\n\n    file { $client_key:\n      owner => \"foreman\",\n      mode => \"400\"\n    }\n\n    pubkey { $client_ca:\n      cert => $ca,\n    }\n  }\n}\n", "class kafo::foreman_proxy_certs (\n    $hostname   = $::certs::node_fqdn,\n    $generate   = $::certs::generate,\n    $regenerate = $::certs::regenerate,\n    $deploy     = $::certs::deploy,\n    $ca         = $::certs::default_ca,\n    $proxy_cert = $::kafo::params::foreman_proxy_cert,\n    $proxy_key  = $::kafo::params::foreman_proxy_key,\n    $proxy_ca   = $::kafo::params::foreman_proxy_ca\n  ) {\n\n  # cert for ssl of foreman-proxy\n  cert { \"${::kafo::foreman_proxy_certs::hostname}-foreman-proxy\":\n    hostname    => $::kafo::foreman_proxy_certs::hostname,\n    purpose     => server,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => 'FOREMAN',\n    org_unit    => 'SMART_PROXY',\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate  => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    pubkey { $proxy_cert:\n      cert => Cert[\"${::kafo::foreman_proxy_certs::hostname}-foreman-proxy\"],\n    }\n\n    privkey { $proxy_key:\n      cert => Cert[\"${::kafo::foreman_proxy_certs::hostname}-foreman-proxy\"],\n    } ->\n\n    file { $proxy_key:\n      owner => \"foreman-proxy\",\n      mode  => \"400\"\n    }\n\n    pubkey { $proxy_ca:\n      cert => $ca,\n    }\n  }\n}\n", "class kafo::puppet_certs (\n    $hostname    = $::certs::node_fqdn,\n    $generate    = $::certs::generate,\n    $regenerate  = $::certs::regenerate,\n    $deploy      = $::certs::deploy,\n    $ca          = $::certs::default_ca,\n    $client_cert = $::kafo::params::puppet_client_cert,\n    $client_key  = $::kafo::params::puppet_client_key,\n    $client_ca   = $::kafo::params::puppet_client_ca\n  ) {\n\n  # cert for authentication of puppetmaster against foreman\n  cert { \"${::kafo::puppet_certs::hostname}-puppet-client\":\n    hostname    => $::kafo::puppet_certs::hostname,\n    purpose     => client,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => 'FOREMAN',\n    org_unit    => 'PUPPET',\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate  => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    pubkey { $client_cert:\n      cert => Cert[\"${::kafo::puppet_certs::hostname}-puppet-client\"],\n    }\n\n    privkey { $client_key:\n      cert => Cert[\"${::kafo::puppet_certs::hostname}-puppet-client\"],\n    } ->\n\n    file { $client_key:\n      owner => \"puppet\",\n      mode => \"400\"\n    }\n\n    pubkey { $client_ca:\n      cert => $ca,\n    }\n  }\n}\n"], "fixing_code": ["class apache::certs (\n    $hostname = $::certs::node_fqdn,\n    $generate = $::certs::generate,\n    $regenerate = $::certs::regenerate,\n    $deploy   = $::certs::deploy,\n    $ca       = $::certs::default_ca,\n    $apache_ssl_cert = '/etc/pki/tls/certs/katello-node.crt',\n    $apache_ssl_key = '/etc/pki/tls/private/katello-node.key'\n  ) {\n\n  cert { \"${::certs::node_fqdn}-ssl\":\n    hostname    => $::certs::node_fqdn,\n    ensure      => present,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => $::certs::org,\n    org_unit    => $::certs::org_unit,\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate    => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    include apache\n    include apache::ssl\n\n    pubkey { $apache_ssl_cert:\n      ensure => present,\n      cert => Cert[\"${::certs::node_fqdn}-ssl\"]\n    } ~>\n    privkey { $apache_ssl_key:\n      ensure => present,\n      cert => Cert[\"${::certs::node_fqdn}-ssl\"]\n    } ->\n    file { $apache_ssl_key:\n      owner => $apache::params::user,\n      group => $apache::params::group,\n      mode  => '0400';\n    }\n\n    file { \"${apache::params::configdir}/ssl.conf\":\n      content => template(\"apache/ssl.conf.erb\"),\n      mode   => '0644',\n      owner  => 'root',\n      group  => 'root',\n      require => [Pubkey[$apache_ssl_cert], Privkey[$apache_ssl_key]],\n      notify => Exec['reload-apache'],\n    }\n  }\n}\n", "require 'fileutils'\nmodule Puppet::Provider::KatelloSslTool\n\n  class Cert < Puppet::Provider\n\n    initvars\n\n    commands :rpm => 'rpm'\n    commands :yum => 'yum'\n    commands :katello_ssl_tool_command => 'katello-ssl-tool'\n\n    def exists?\n      ! generate? && ! deploy?\n    end\n\n    def create\n      generate! if generate?\n      deploy!   if deploy?\n    end\n\n    def self.details(cert_name)\n      details = { :pubkey  => pubkey(cert_name),\n                  :privkey   => privkey(cert_name) }\n\n      passphrase_file = passphrase_file(cert_name)\n      if File.exists?(passphrase_file)\n        details[:passphrase] = File.read(passphrase_file).chomp\n      end\n\n      return details\n    end\n\n    def self.pubkey(name)\n      # TODO: just temporarily until we have this changes in katello installer as well\n      if name == 'candlepin-ca'\n        '/usr/share/katello/candlepin-cert.crt'\n      else\n        target_path(\"certs/#{name}.crt\")\n      end\n    end\n\n    def self.privkey(name)\n      # TODO: just temporarily until we have this changes in katello installer as well\n      if name == 'candlepin-ca'\n        build_path('candlepin-cert.key')\n      else\n        target_path(\"private/#{name}.key\")\n      end\n    end\n\n    def self.passphrase_file(name)\n      # TODO: just temporarily until we have this changes in katello installer as well\n      if name == 'candlepin-ca'\n        '/etc/katello/candlepin_ca_password-file'\n      else\n        build_path(\"#{name}.pwd\")\n      end\n    end\n\n    protected\n\n    def katello_ssl_tool(*args)\n      Dir.chdir('/root') do\n        katello_ssl_tool_command(*args)\n      end\n    end\n\n    def generate?\n      return false unless resource[:generate]\n      return true if resource[:regenerate]\n      return files_to_generate.any? { |file| ! File.exist?(file) }\n    end\n\n    def files_to_generate\n      [rpmfile]\n    end\n\n    def deploy?\n      return false unless resource[:deploy]\n      return true if resource[:regenerate]\n      return true if files_to_deploy.any? { |file| ! File.exist?(file) }\n      return true if new_version_available?\n    end\n\n    def files_to_deploy\n      [pubkey, privkey]\n    end\n\n    def deploy!\n      if File.exists?(rpmfile)\n        # the rpm is available locally on the file system\n        rpm('-Uvh', '--force', rpmfile)\n      else\n        # we search the rpm in yum repo\n        yum(\"install\", \"-y\", rpmfile_base_name)\n      end\n    end\n\n    def new_version_available?\n      if File.exists?(rpmfile)\n        current_version = version_from_name(`rpm -q #{rpmfile_base_name}`)\n        latest_version = version_from_name(`rpm -pq #{rpmfile}`)\n        (latest_version <=> current_version) > 0\n      else\n        `yum check-update #{rpmfile_base_name} &>/dev/null`\n        $?.exitstatus == 100\n      end\n    end\n\n    def version_from_name(rpmname)\n      rpmname.scan(/\\d+/).map(&:to_i)\n    end\n\n    def common_args\n      [ '--set-country', resource[:country],\n       '--set-state', resource[:state],\n       '--set-city', resource[:city],\n       '--set-org', resource[:org],\n       '--set-org-unit', resource[:org_unit],\n       '--set-email', resource[:email],\n       '--cert-expiration', resource[:expiration]]\n    end\n\n    def rpmfile\n      rpmfile = Dir[self.build_path(\"#{rpmfile_base_name}*.noarch.rpm\")].max_by do |file|\n        version_from_name(file)\n      end\n      rpmfile ||= self.build_path(\"#{rpmfile_base_name}.noarch.rpm\")\n      return rpmfile\n    end\n\n    def rpmfile_base_name\n      resource[:name]\n    end\n\n    def pubkey\n      self.class.pubkey(resource[:name])\n    end\n\n    def privkey\n      self.class.privkey(resource[:name])\n    end\n\n    def passphrase_file\n      self.class.passphrase_file(resource[:name])\n    end\n\n    def full_path(file_name)\n      self.class.full_path(file_name)\n    end\n\n    def self.target_path(file_name = nil)\n      File.join(\"/etc/pki/tls\", file_name)\n    end\n\n    def build_path(file_name)\n      self.class.build_path(file_name)\n    end\n\n    def self.build_path(file_name = nil)\n      File.join(\"/root/ssl-build\", file_name)\n    end\n\n  end\n\n  class CertFile < Puppet::Provider\n\n    include Puppet::Util::Checksums\n\n    initvars\n\n    def exists?\n      return false unless File.exists?(resource[:path])\n      checksum(expected_content) == checksum(current_content)\n    end\n\n    def create\n      File.open(resource[:path], \"w\", mode) { |f| f << expected_content }\n    end\n\n    protected\n\n    def expected_content\n      File.read(source_path)\n    end\n\n    def current_content\n      File.read(resource[:path])\n    end\n\n\n    def checksum(content)\n      md5(content)\n    end\n\n    # what path to copy from\n    def source_path\n      raise NotImplementedError\n    end\n\n    def mode\n      0644\n    end\n\n    def cert_details\n      return @cert_details if defined? @cert_details\n      if cert_resource = @resource[:cert]\n        name = cert_resource.to_hash[:name]\n        @cert_details = Puppet::Provider::KatelloSslTool::Cert.details(name)\n      else\n        raise 'Cert was not specified'\n      end\n    end\n\n  end\n\nend\n", "require File.expand_path('../../katello_ssl_tool', __FILE__)\n\nPuppet::Type.type(:privkey).provide(:katello_ssl_tool, :parent => Puppet::Provider::KatelloSslTool::CertFile) do\n\n  protected\n\n  def source_path\n    cert_details[:privkey]\n  end\n\n  def mode\n    0400\n  end\n\nend\n", "class kafo::foreman_certs (\n    $hostname    = $::certs::node_fqdn,\n    $generate    = $::certs::generate,\n    $regenerate  = $::certs::regenerate,\n    $deploy      = $::certs::deploy,\n    $ca          = $::certs::default_ca,\n    $client_cert = $::kafo::params::foreman_client_cert,\n    $client_key  = $::kafo::params::foreman_client_key,\n    $client_ca   = $::kafo::params::foreman_client_ca\n  ) {\n\n  # cert for authentication of puppetmaster against foreman\n  cert { \"${::kafo::foreman_certs::hostname}-foreman-client\":\n    hostname    => $::kafo::foreman_certs::hostname,\n    purpose     => client,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => 'FOREMAN',\n    org_unit    => 'PUPPET',\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate    => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    pubkey { $client_cert:\n      cert => Cert[\"${::kafo::foreman_certs::hostname}-foreman-client\"],\n    }\n\n    privkey { $client_key:\n      cert => Cert[\"${::kafo::foreman_certs::hostname}-foreman-client\"],\n    } ->\n\n    file { $client_key:\n      owner => \"foreman\",\n      mode => \"0400\"\n    }\n\n    pubkey { $client_ca:\n      cert => $ca,\n    }\n  }\n}\n", "class kafo::foreman_proxy_certs (\n    $hostname   = $::certs::node_fqdn,\n    $generate   = $::certs::generate,\n    $regenerate = $::certs::regenerate,\n    $deploy     = $::certs::deploy,\n    $ca         = $::certs::default_ca,\n    $proxy_cert = $::kafo::params::foreman_proxy_cert,\n    $proxy_key  = $::kafo::params::foreman_proxy_key,\n    $proxy_ca   = $::kafo::params::foreman_proxy_ca\n  ) {\n\n  # cert for ssl of foreman-proxy\n  cert { \"${::kafo::foreman_proxy_certs::hostname}-foreman-proxy\":\n    hostname    => $::kafo::foreman_proxy_certs::hostname,\n    purpose     => server,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => 'FOREMAN',\n    org_unit    => 'SMART_PROXY',\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate  => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    pubkey { $proxy_cert:\n      cert => Cert[\"${::kafo::foreman_proxy_certs::hostname}-foreman-proxy\"],\n    }\n\n    privkey { $proxy_key:\n      cert => Cert[\"${::kafo::foreman_proxy_certs::hostname}-foreman-proxy\"],\n    } ->\n\n    file { $proxy_key:\n      owner => \"foreman-proxy\",\n      mode  => \"0400\"\n    }\n\n    pubkey { $proxy_ca:\n      cert => $ca,\n    }\n  }\n}\n", "class kafo::puppet_certs (\n    $hostname    = $::certs::node_fqdn,\n    $generate    = $::certs::generate,\n    $regenerate  = $::certs::regenerate,\n    $deploy      = $::certs::deploy,\n    $ca          = $::certs::default_ca,\n    $client_cert = $::kafo::params::puppet_client_cert,\n    $client_key  = $::kafo::params::puppet_client_key,\n    $client_ca   = $::kafo::params::puppet_client_ca\n  ) {\n\n  # cert for authentication of puppetmaster against foreman\n  cert { \"${::kafo::puppet_certs::hostname}-puppet-client\":\n    hostname    => $::kafo::puppet_certs::hostname,\n    purpose     => client,\n    country     => $::certs::country,\n    state       => $::certs::state,\n    city        => $::certs::sity,\n    org         => 'FOREMAN',\n    org_unit    => 'PUPPET',\n    expiration  => $::certs::expiration,\n    ca          => $ca,\n    generate    => $generate,\n    regenerate  => $regenerate,\n    deploy      => $deploy,\n  }\n\n  if $deploy {\n    pubkey { $client_cert:\n      cert => Cert[\"${::kafo::puppet_certs::hostname}-puppet-client\"],\n    }\n\n    privkey { $client_key:\n      cert => Cert[\"${::kafo::puppet_certs::hostname}-puppet-client\"],\n    } ->\n\n    file { $client_key:\n      owner => \"puppet\",\n      mode => \"0400\"\n    }\n\n    pubkey { $client_ca:\n      cert => $ca,\n    }\n  }\n}\n"], "filenames": ["modules/apache/manifests/certs.pp", "modules/certs/lib/puppet/provider/katello_ssl_tool.rb", "modules/certs/lib/puppet/provider/privkey/katello_ssl_tool.rb", "modules/kafo/manifests/foreman_certs.pp", "modules/kafo/manifests/foreman_proxy_certs.pp", "modules/kafo/manifests/puppet_certs.pp"], "buggy_code_start_loc": [36, 178, 10, 39, 39, 39], "buggy_code_end_loc": [36, 198, 10, 40, 40, 40], "fixing_code_start_loc": [37, 178, 11, 39, 39, 39], "fixing_code_end_loc": [42, 203, 15, 40, 40, 40], "type": "CWE-264", "message": "Katello Installer before 0.0.18 uses world-readable permissions for /etc/pki/tls/private/katello-node.key when deploying a child Pulp node, which allows local users to obtain the private key by reading the file.", "other": {"cve": {"id": "CVE-2013-4455", "sourceIdentifier": "secalert@redhat.com", "published": "2014-05-14T19:55:09.763", "lastModified": "2014-05-15T13:11:16.933", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Katello Installer before 0.0.18 uses world-readable permissions for /etc/pki/tls/private/katello-node.key when deploying a child Pulp node, which allows local users to obtain the private key by reading the file."}, {"lang": "es", "value": "Katello Installer anterior a 0.0.18 utiliza permisos de lectura universal para /etc/pki/tls/private/katello-node.key cuando despliega un nodo hijo Pulp, lo que permite a usuarios locales obtener la clave privada mediante la lectura del archivo."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.0.17", "matchCriteriaId": "8FC24C67-DE6B-45A9-A597-3B67757D72FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "B7AB795A-DC5F-4A06-A7A3-33D65A58C675"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "2C8037C5-42AE-4DCA-A611-34BF5F45862D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "A9AC44CF-E374-466F-B73A-2FC8064BAC1B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "74CC65CF-DEA7-4D57-AC96-53F162AAB734"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "20476D6F-E8A0-4AD6-AA44-15C7CE4B777D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "D23C03FA-9FD5-4362-A7C5-3B871EF87CBC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "1CB6A4D0-C7D5-49EB-AFEE-60EF5EDFDE5F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "582A83AC-5FDB-44F7-A590-39ADE8530AEE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "EF7A952F-1433-453E-88A5-9DC56474C93B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "81B71AEE-FE63-4923-B4AC-3B9F04C21BBA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "2B79A1D7-F812-497C-BEEB-8BEE4B7217E0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "1E36B8E6-0C88-4FCF-98CC-BE27322CB3F4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "E035B07F-5202-4740-9025-CAAC79DCFDB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "61D9F310-2DEC-4DE8-B08E-5A693AE43DD0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "D9E5D444-4630-40F9-A93B-9A30AC92C65A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:katello:katello_installer:0.0.16:*:*:*:*:*:*:*", "matchCriteriaId": "B4646C4E-B4CC-4BC7-A5A7-FA936C4724BA"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1021784", "source": "secalert@redhat.com"}, {"url": "https://github.com/Katello/katello-installer/commit/15e01086bcb3f5d42525730e8b162bca11bec85e", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/Katello/katello-installer/commit/15e01086bcb3f5d42525730e8b162bca11bec85e"}}