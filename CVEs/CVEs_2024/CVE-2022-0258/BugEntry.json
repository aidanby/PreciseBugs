{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\LayoutDefinitionEnrichmentInterface;\nuse Pimcore\\Model\\DataObject\\Classificationstore;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/classificationstore\")\n *\n * @internal\n */\nclass ClassificationstoreController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * Delete collection with the group-relations\n     *\n     * @Route(\"/delete-collection\", name=\"pimcore_admin_dataobject_classificationstore_deletecollection\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $configRelations = new Classificationstore\\CollectionGroupRelation\\Listing();\n        $configRelations->setCondition('colId = ?', $id);\n        $list = $configRelations->load();\n        foreach ($list as $item) {\n            $item->delete();\n        }\n\n        $config = Classificationstore\\CollectionConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-collection-relation\", name=\"pimcore_admin_dataobject_classificationstore_deletecollectionrelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionRelationAction(Request $request)\n    {\n        $colId = $request->get('colId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\CollectionGroupRelation();\n        $config->setColId($colId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-relation\", name=\"pimcore_admin_dataobject_classificationstore_deleterelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteRelationAction(Request $request)\n    {\n        $keyId = $request->get('keyId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\KeyGroupRelation();\n        $config->setKeyId($keyId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-group\", name=\"pimcore_admin_dataobject_classificationstore_deletegroup\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteGroupAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\GroupConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/create-group\", name=\"pimcore_admin_dataobject_classificationstore_creategroup\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createGroupAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\GroupConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\GroupConfig();\n            $config->setStoreId($storeId);\n            $config->setName($name);\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n        } else {\n            return $this->adminJson(['success' => false, 'id' => $config->getName(), 'message' => 'classificationstore_error_group_exists_msg']);\n        }\n    }\n\n    /**\n     * @Route(\"/create-store\", name=\"pimcore_admin_dataobject_classificationstore_createstore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function createStoreAction(Request $request)\n    {\n        $name = $request->get('name');\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n\n        if (!$config) {\n            $config = new Classificationstore\\StoreConfig();\n            $config->setName($name);\n            $config->save();\n        } else {\n            throw new \\Exception('Store with the given name exists');\n        }\n\n        return $this->adminJson(['success' => true, 'storeId' => $config->getId()]);\n    }\n\n    /**\n     * @Route(\"/create-collection\", name=\"pimcore_admin_dataobject_classificationstore_createcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCollectionAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\CollectionConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\CollectionConfig();\n            $config->setName($name);\n            $config->setStoreId($storeId);\n            $config->save();\n        }\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collectionsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = $request->get('limit') ? $request->get('limit') : 15;\n\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $storeIdFromDefinition = 0;\n        $allowedCollectionIds = [];\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $db = \\Pimcore\\Db::get();\n                $query = 'select * from classificationstore_collectionrelations where groupId in (' . implode(',', $allowedGroupIds) .')';\n                $relationList = $db->fetchAll($query);\n\n                if (is_array($relationList)) {\n                    foreach ($relationList as $item) {\n                        $allowedCollectionIds[] = $item['colId'];\n                    }\n                }\n            }\n\n            $storeIdFromDefinition = $fd->getStoreId();\n        }\n\n        $list = new Classificationstore\\CollectionConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        $storeId = $request->get('storeId');\n        $storeId = $storeId ? $storeId : $storeIdFromDefinition;\n\n        $conditionParts[] = ' (storeId = ' . $db->quote($storeId) . ')';\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($allowedCollectionIds) {\n            $conditionParts[] = ' id in (' . implode(',', $allowedCollectionIds) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collections\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\CollectionConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('sort')) {\n            $orderKey = $request->get('sort');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $list = new Classificationstore\\GroupConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($request->get('storeId')) {\n            $conditionParts[] = '(storeId = ' . $db->quote($request->get('storeId')) . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $conditionParts[] = 'ID in (' . implode(',', $allowedGroupIds) . ')';\n            }\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsaction\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\GroupConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelationsget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsGetAction(Request $request)\n    {\n        $mapping = ['groupName' => 'name', 'groupDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'sorter';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\CollectionGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $condition = '';\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n\n            $count = 0;\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                if ($count > 0) {\n                    $condition .= ' AND ';\n                }\n                $count++;\n                $fieldname = $mapping[$f->field];\n                $condition .= $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $colId = $request->get('colId');\n        if ($condition) {\n            $condition = '( ' . $condition . ' ) AND';\n        }\n        $condition .= ' colId = ' . $list->quote($colId);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $item = [\n                'colId' => $config->getColId(),\n                'groupId' => $config->getGroupId(),\n                'groupName' => $config->getName(),\n                'groupDescription' => $config->getDescription(),\n                'id' => $config->getColId() . '-' . $config->getGroupId(),\n                'sorter' => (int) $config->getSorter(),\n            ];\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            if (count($data) == count($data, 1)) {\n                $data = [$data];\n            }\n\n            foreach ($data as &$row) {\n                $colId = $row['colId'];\n                $groupId = $row['groupId'];\n                $sorter = $row['sorter'];\n\n                $config = new Classificationstore\\CollectionGroupRelation();\n                $config->setGroupId($groupId);\n                $config->setColId($colId);\n                $config->setSorter((int) $sorter);\n\n                $config->save();\n\n                $row['id'] = $config->getColId() . '-' . $config->getGroupId();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/list-stores\", name=\"pimcore_admin_dataobject_classificationstore_liststores\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function listStoresAction()\n    {\n        $storeConfigs = [];\n        $storeConfigListing = new Classificationstore\\StoreConfig\\Listing();\n        $storeConfigListing->load();\n\n        foreach ($storeConfigListing as $storeConfig) {\n            $storeConfigs[] = $storeConfig->getObjectVars();\n        }\n\n        return $this->adminJson($storeConfigs);\n    }\n\n    /**\n     * @Route(\"/search-relations\", name=\"pimcore_admin_dataobject_classificationstore_searchrelations\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchRelationsAction(Request $request)\n    {\n        $db = Db::get();\n\n        $storeId = $request->get('storeId');\n\n        $mapping = [\n            'groupName' => DataObject\\Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS .'.name',\n            'keyName' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS .'.name',\n            'keyDescription' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS. '.description',\n        ];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            if ($orderKey == 'keyName') {\n                $orderKey = 'name';\n            }\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->property];\n                $conditionParts[] = $fieldname . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $conditionParts[] = '  groupId IN (select id from classificationstore_groups where storeId = ' . $db->quote($storeId) . ')';\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '('\n                . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.description LIKE ' . $db->quote('%' . $searchfilter . '%') . ')';\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n        $list->setResolveGroupName(1);\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($list->getList() as $config) {\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => $config->getSorter(),\n            ];\n\n            $groupConfig = Classificationstore\\GroupConfig::getById($config->getGroupId());\n            if ($groupConfig) {\n                $item['groupName'] = $groupConfig->getName();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relationsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsActionGet(Request $request)\n    {\n        $mapping = ['keyName' => 'name', 'keyDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n        $relationIds = $request->get('relationIds');\n\n        if ($relationIds) {\n            $relationIds = json_decode($relationIds, true);\n        }\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        } elseif (is_array($relationIds)) {\n            $limit = count($relationIds);\n        }\n\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->field];\n                $conditionParts[] = $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if (!$request->get('relationIds')) {\n            $groupId = $request->get('groupId');\n            $conditionParts[] = ' groupId = ' . $list->quote($groupId);\n        }\n\n        if ($relationIds) {\n            $relationParts = [];\n\n            foreach ($relationIds as $relationId) {\n                $keyId = $relationId['keyId'];\n                $groupId = $relationId['groupId'];\n                $relationParts[] = '(keyId = ' . $list->quote($keyId) . ' AND groupId = ' . $list->quote($groupId) . ')';\n            }\n\n            $conditionParts[] = '(' . implode(' OR ', $relationParts) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $type = $config->getType();\n            $definition = json_decode($config->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n            DataObject\\Service::enrichLayoutDefinition($definition);\n\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => (int) $config->getSorter(),\n                'layout' => $definition,\n                'mandatory' => $config->isMandatory(),\n            ];\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $keyId = $data['keyId'];\n            $groupId = $data['groupId'];\n            $sorter = $data['sorter'];\n            $mandatory = $data['mandatory'];\n\n            $config = new Classificationstore\\KeyGroupRelation();\n            $config->setGroupId($groupId);\n            $config->setKeyId($keyId);\n            $config->setSorter($sorter);\n            $config->setMandatory($mandatory);\n\n            $config->save();\n            $data['id'] = $config->getGroupId() . '-' . $config->getKeyId();\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/add-collections\", name=\"pimcore_admin_dataobject_classificationstore_addcollections\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCollectionsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('collectionIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n        $data = [];\n\n        if ($ids) {\n            $db = \\Pimcore\\Db::get();\n            $mappedData = [];\n            $groupsData = $db->fetchAll('select * from classificationstore_groups g, classificationstore_collectionrelations c where colId IN (:ids) and g.id = c.groupId', [\n                'ids' => implode(',', array_filter($ids, 'intval')),\n            ]);\n\n            foreach ($groupsData as $groupData) {\n                $mappedData[$groupData['id']] = $groupData;\n            }\n\n            $groupIdList = [];\n            $groupId = null;\n\n            $allowedGroupIds = null;\n\n            if ($request->get('oid')) {\n                $object = DataObject\\Concrete::getById($request->get('oid'));\n                $class = $object->getClass();\n                /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n                $fd = $class->getFieldDefinition($request->get('fieldname'));\n                $allowedGroupIds = $fd->getAllowedGroupIds();\n            }\n\n            foreach ($groupsData as $groupItem) {\n                $groupId = $groupItem['groupId'];\n                if (!$allowedGroupIds || in_array($groupId, $allowedGroupIds)) {\n                    $groupIdList[] = $groupId;\n                }\n            }\n\n            if ($groupIdList) {\n                $groupList = new Classificationstore\\GroupConfig\\Listing();\n                $groupCondition = 'id in (' . implode(',', $groupIdList) . ')';\n                $groupList->setCondition($groupCondition);\n\n                $groupList = $groupList->load();\n\n                $keyCondition = 'groupId in (' . implode(',', $groupIdList) . ')';\n\n                $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n                $keyList->setCondition($keyCondition);\n                $keyList->setOrderKey(['sorter', 'id']);\n                $keyList->setOrder(['ASC', 'ASC']);\n                $keyList = $keyList->load();\n\n                foreach ($groupList as $groupData) {\n                    $data[$groupData->getId()] = [\n                        'name' => $groupData->getName(),\n                        'id' => $groupData->getId(),\n                        'description' => $groupData->getDescription(),\n                        'keys' => [],\n                        'sorter' => intval($mappedData[$groupData->getId()]['sorter']),\n                        'collectionId' => $mappedData[$groupId]['colId'],\n                    ];\n                }\n\n                foreach ($keyList as $keyData) {\n                    $groupId = $keyData->getGroupId();\n\n                    $keyList = $data[$groupId]['keys'];\n                    $type = $keyData->getType();\n                    $definition = json_decode($keyData->getDefinition());\n                    $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n                    if (method_exists($definition, '__wakeup')) {\n                        $definition->__wakeup();\n                    }\n\n                    $context['object'] = $object;\n                    $context['class'] = $object ? $object->getClass() : null;\n                    $context['ownerType'] = 'classificationstore';\n                    $context['ownerName'] = $fieldname;\n                    $context['keyId'] = $keyData->getKeyId();\n                    $context['groupId'] = $groupId;\n                    $context['keyDefinition'] = $definition;\n\n                    //TODO Pimcore 11: remove method_exists BC layer\n                    if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                        if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                            trigger_deprecation('pimcore/pimcore', '10.1',\n                                'Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                                'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class);\n                        }\n                        $definition = $definition->enrichLayoutDefinition($object, $context);\n                    }\n\n                    $keyList[] = [\n                        'name' => $keyData->getName(),\n                        'id' => $keyData->getKeyId(),\n                        'description' => $keyData->getDescription(),\n                        'definition' => $definition,\n                    ];\n                    $data[$groupId]['keys'] = $keyList;\n                }\n            }\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/add-groups\", name=\"pimcore_admin_dataobject_classificationstore_addgroups\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addGroupsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('groupIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n\n        $keyCondition = 'groupId in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n        $keyList->setCondition($keyCondition, $ids);\n        $keyList->setOrderKey(['sorter', 'id']);\n        $keyList->setOrder(['ASC', 'ASC']);\n        $keyList = $keyList->load();\n\n        $groupCondition = 'id in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $groupList = new Classificationstore\\GroupConfig\\Listing();\n        $groupList->setCondition($groupCondition, $ids);\n        $groupList->setOrder('ASC');\n        $groupList->setOrderKey('id');\n        $groupList = $groupList->load();\n\n        $data = [];\n\n        foreach ($groupList as $groupData) {\n            $data[$groupData->getId()] = [\n                'name' => $groupData->getName(),\n                'id' => $groupData->getId(),\n                'description' => $groupData->getDescription(),\n                'keys' => [],\n            ];\n        }\n\n        foreach ($keyList as $keyData) {\n            $groupId = $keyData->getGroupId();\n\n            $keyList = $data[$groupId]['keys'];\n            $type = $keyData->getType();\n            $definition = json_decode($keyData->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n            if (method_exists($definition, '__wakeup')) {\n                $definition->__wakeup();\n            }\n\n            $context['object'] = $object;\n            $context['class'] = $object ? $object->getClass() : null;\n            $context['ownerType'] = 'classificationstore';\n            $context['ownerName'] = $fieldname;\n            $context['keyId'] = $keyData->getKeyId();\n            $context['groupId'] = $groupId;\n            $context['keyDefinition'] = $definition;\n\n            //TODO Pimcore 11: remove method_exists BC layer\n            if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                    trigger_deprecation('pimcore/pimcore', '10.1',\n                        sprintf('Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                        'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class));\n                }\n                $definition = $definition->enrichLayoutDefinition($object, $context);\n            }\n\n            $keyList[] = [\n                'name' => $keyData->getName(),\n                'id' => $keyData->getKeyId(),\n                'description' => $keyData->getDescription(),\n                'definition' => $definition,\n            ];\n            $data[$groupId]['keys'] = $keyList;\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_propertiesget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesGetAction(Request $request)\n    {\n        $storeId = $request->get('storeId');\n        $frameName = $request->get('frameName');\n        $db = \\Pimcore\\Db::get();\n\n        $conditionParts = [];\n\n        if ($frameName) {\n            $keyCriteria = ' FALSE ';\n            $frameConfig = Classificationstore\\CollectionConfig::getByName($frameName, $storeId);\n            if ($frameConfig) {\n                // get all keys within that collection / frame\n                $frameId = $frameConfig->getId();\n                $groupList = new Classificationstore\\CollectionGroupRelation\\Listing();\n                $groupList->setCondition('colId = ' . $db->quote($frameId));\n                $groupList = $groupList->load();\n                $groupIdList = [];\n                foreach ($groupList as $groupEntry) {\n                    $groupIdList[] = $groupEntry->getGroupId();\n                }\n\n                if ($groupIdList) {\n                    $keyIdList = new Classificationstore\\KeyGroupRelation\\Listing();\n                    $keyIdList->setCondition('groupId in (' . implode(',', $groupIdList) . ')');\n                    $keyIdList = $keyIdList->load();\n                    if ($keyIdList) {\n                        $keyIds = [];\n                        foreach ($keyIdList as $keyEntry) {\n                            $keyIds[] = $keyEntry->getKeyId();\n                        }\n\n                        $keyCriteria = ' id in (' . implode(',', $keyIds) . ')';\n                    }\n                }\n            }\n\n            $conditionParts[] = $keyCriteria;\n        }\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyConfig\\Listing();\n\n        if ($limit > 0 && !$request->get('groupIds') && !$request->get('keyIds')) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($storeId) {\n            $conditionParts[] = '(storeId = ' . $storeId . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        if ($request->get('groupIds') || $request->get('keyIds')) {\n            $db = Db::get();\n\n            if ($request->get('groupIds')) {\n                $ids = $this->decodeJson($request->get('groupIds'));\n                $col = 'group';\n            } else {\n                $ids = $this->decodeJson($request->get('keyIds'));\n                $col = 'id';\n            }\n\n            $condition = $db->quoteIdentifier($col) . ' IN (';\n            $count = 0;\n            foreach ($ids as $theId) {\n                if ($count > 0) {\n                    $condition .= ',';\n                }\n                $condition .= $theId;\n                $count++;\n            }\n\n            $condition .= ')';\n            $list->setCondition($condition);\n        }\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $item = $this->getConfigItem($config);\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_properties\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\KeyConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    if (method_exists($config, $setter)) {\n                        $config->$setter($value);\n                    }\n                }\n            }\n\n            $config->save();\n            $item = $this->getConfigItem($config);\n\n            return $this->adminJson(['success' => true, 'data' => $item]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param Classificationstore\\KeyConfig $config\n     *\n     * @return array\n     */\n    protected function getConfigItem($config)\n    {\n        $name = $config->getName();\n\n        $groupDescription = null;\n        $item = [\n            'storeId' => $config->getStoreId(),\n            'id' => $config->getId(),\n            'name' => $name,\n            'description' => $config->getDescription(),\n            'type' => $config->getType() ? $config->getType() : 'input',\n            'definition' => $config->getDefinition(),\n        ];\n\n        if ($config->getDefinition()) {\n            $definition = json_decode($config->getDefinition(), true);\n            if ($definition) {\n                $item['title'] = $definition['title'];\n            }\n        }\n\n        if ($config->getCreationDate()) {\n            $item['creationDate'] = $config->getCreationDate();\n        }\n\n        if ($config->getModificationDate()) {\n            $item['modificationDate'] = $config->getModificationDate();\n        }\n\n        return $item;\n    }\n\n    /**\n     * @Route(\"/add-property\", name=\"pimcore_admin_dataobject_classificationstore_addproperty\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addPropertyAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n\n        $definition = [\n            'fieldtype' => 'input',\n            'name' => $name,\n            'title' => $name,\n            'datatype' => 'data',\n        ];\n        $config = new Classificationstore\\KeyConfig();\n        $config->setName($name);\n        $config->setTitle($name);\n        $config->setType('input');\n        $config->setStoreId($storeId);\n        $config->setEnabled(1);\n        $config->setDefinition(json_encode($definition));\n        $config->save();\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete-property\", name=\"pimcore_admin_dataobject_classificationstore_deleteproperty\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deletePropertyAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\KeyConfig::getById($id);\n        //        $config->delete();\n        $config->setEnabled(false);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/edit-store\", name=\"pimcore_admin_dataobject_classificationstore_editstore\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function editStoreAction(Request $request)\n    {\n        $id = $request->get('id');\n        $data = json_decode($request->get('data'), true);\n\n        $name = $data['name'];\n        if (!$name) {\n            throw new \\Exception('Name must not be empty');\n        }\n\n        $description = $data['description'];\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n        if ($config && $config->getId() != $id) {\n            throw new \\Exception('There is already a config with the same name');\n        }\n\n        $config = Classificationstore\\StoreConfig::getById($id);\n\n        if (!$config) {\n            throw new \\Exception('Configuration does not exist');\n        }\n\n        $config->setName($name);\n        $config->setDescription($description);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/storetree\", name=\"pimcore_admin_dataobject_classificationstore_storetree\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function storetreeAction(Request $request)\n    {\n        $result = [];\n        $list = new Classificationstore\\StoreConfig\\Listing();\n        $list = $list->load();\n        foreach ($list as $item) {\n            $resultItem = [\n                'id' => $item->getId(),\n                'text' => htmlspecialchars($item->getName(), ENT_QUOTES),\n                'expandable' => false,\n                'leaf' => true,\n                'expanded' => true,\n                'description' => htmlspecialchars($item->getDescription(), ENT_QUOTES),\n                'iconCls' => 'pimcore_icon_classificationstore',\n            ];\n\n            $resultItem['qtitle'] = 'ID: ' . $item->getId();\n\n            if ($item->getDescription()) {\n            }\n            $resultItem['qtip'] = $item->getDescription() ? htmlspecialchars($item->getDescription(), ENT_QUOTES) : ' ';\n            $result[] = $resultItem;\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-page\", name=\"pimcore_admin_dataobject_classificationstore_getpage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPageAction(Request $request)\n    {\n        $tableSuffix = $request->get('table');\n        if (!in_arrayi($tableSuffix, ['keys', 'groups'])) {\n            $tableSuffix = 'keys';\n        }\n\n        $table = 'classificationstore_' . $tableSuffix;\n        $db = \\Pimcore\\Db::get();\n        $id = (int) $request->get('id');\n        $storeId = (int) $request->get('storeId');\n        $pageSize = (int) $request->get('pageSize');\n\n        if ($request->get('sortKey')) {\n            $sortKey = $request->get('sortKey');\n            $sortDir = $request->get('sortDir');\n        } else {\n            $sortKey = 'name';\n            $sortDir = 'ASC';\n        }\n\n        if (!in_arrayi($sortDir, ['DESC', 'ASC'])) {\n            $sortDir = 'DESC';\n        }\n\n        if (!in_arrayi($sortKey, ['name', 'title', 'description', 'id', 'type', 'creationDate', 'modificationDate', 'enabled', 'parentId', 'storeId'])) {\n            $sortKey = 'name';\n        }\n\n        $sorter = ' order by `' . $sortKey .  '` ' . $sortDir;\n\n        if ($table == 'keys') {\n            $query = '\n                select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                    select * from (\n                        select @rownum := @rownum + 1 as pos,  id, name, `type`\n                        from `' . $table . '`\n                        where enabled = 1 and storeId = ' . $storeId . $sorter . '\n                      ) all_rows) item where id = ' . $id . ';';\n        } else {\n            $query = '\n            select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                select * from (\n                    select @rownum := @rownum + 1 as pos,  id, name\n                    from `' . $table . '`\n                    where storeId = ' . $storeId . $sorter . '\n                  ) all_rows) item where id = ' .  $id . ';';\n        }\n\n        $db->query('select @rownum := 0;');\n        $result = $db->fetchAll($query);\n\n        $page = (int) $result[0]['page'] ;\n\n        return $this->adminJson(['success' => true, 'page' => $page]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        $unrestrictedActions = ['collectionsActionGet', 'groupsActionGet', 'relationsActionGet', 'addGroupsAction', 'addCollectionsAction', 'searchRelationsAction'];\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\LayoutDefinitionEnrichmentInterface;\nuse Pimcore\\Model\\DataObject\\Classificationstore;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/classificationstore\")\n *\n * @internal\n */\nclass ClassificationstoreController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * Delete collection with the group-relations\n     *\n     * @Route(\"/delete-collection\", name=\"pimcore_admin_dataobject_classificationstore_deletecollection\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $configRelations = new Classificationstore\\CollectionGroupRelation\\Listing();\n        $configRelations->setCondition('colId = ?', $id);\n        $list = $configRelations->load();\n        foreach ($list as $item) {\n            $item->delete();\n        }\n\n        $config = Classificationstore\\CollectionConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-collection-relation\", name=\"pimcore_admin_dataobject_classificationstore_deletecollectionrelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCollectionRelationAction(Request $request)\n    {\n        $colId = $request->get('colId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\CollectionGroupRelation();\n        $config->setColId($colId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-relation\", name=\"pimcore_admin_dataobject_classificationstore_deleterelation\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteRelationAction(Request $request)\n    {\n        $keyId = $request->get('keyId');\n        $groupId = $request->get('groupId');\n\n        $config = new Classificationstore\\KeyGroupRelation();\n        $config->setKeyId($keyId);\n        $config->setGroupId($groupId);\n\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/delete-group\", name=\"pimcore_admin_dataobject_classificationstore_deletegroup\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteGroupAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\GroupConfig::getById($id);\n        $config->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/create-group\", name=\"pimcore_admin_dataobject_classificationstore_creategroup\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createGroupAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\GroupConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\GroupConfig();\n            $config->setStoreId($storeId);\n            $config->setName($name);\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n        } else {\n            return $this->adminJson(['success' => false, 'id' => $config->getName(), 'message' => 'classificationstore_error_group_exists_msg']);\n        }\n    }\n\n    /**\n     * @Route(\"/create-store\", name=\"pimcore_admin_dataobject_classificationstore_createstore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function createStoreAction(Request $request)\n    {\n        $name = $request->get('name');\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n\n        if (!$config) {\n            $config = new Classificationstore\\StoreConfig();\n            $config->setName($name);\n            $config->save();\n        } else {\n            throw new \\Exception('Store with the given name exists');\n        }\n\n        return $this->adminJson(['success' => true, 'storeId' => $config->getId()]);\n    }\n\n    /**\n     * @Route(\"/create-collection\", name=\"pimcore_admin_dataobject_classificationstore_createcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCollectionAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n        $config = Classificationstore\\CollectionConfig::getByName($name, $storeId);\n\n        if (!$config) {\n            $config = new Classificationstore\\CollectionConfig();\n            $config->setName($name);\n            $config->setStoreId($storeId);\n            $config->save();\n        }\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collectionsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = $request->get('limit') ? $request->get('limit') : 15;\n\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $storeIdFromDefinition = 0;\n        $allowedCollectionIds = [];\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $db = \\Pimcore\\Db::get();\n                $query = 'select * from classificationstore_collectionrelations where groupId in (' . implode(',', $allowedGroupIds) .')';\n                $relationList = $db->fetchAll($query);\n\n                if (is_array($relationList)) {\n                    foreach ($relationList as $item) {\n                        $allowedCollectionIds[] = $item['colId'];\n                    }\n                }\n            }\n\n            $storeIdFromDefinition = $fd->getStoreId();\n        }\n\n        $list = new Classificationstore\\CollectionConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        $storeId = $request->get('storeId');\n        $storeId = $storeId ? $storeId : $storeIdFromDefinition;\n\n        $conditionParts[] = ' (storeId = ' . $db->quote($storeId) . ')';\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($allowedCollectionIds) {\n            $conditionParts[] = ' id in (' . implode(',', $allowedCollectionIds) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collections\", name=\"pimcore_admin_dataobject_classificationstore_collections\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\CollectionConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsActionGet(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        if ($request->get('sort')) {\n            $orderKey = $request->get('sort');\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        $list = new Classificationstore\\GroupConfig\\Listing();\n\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n        $db = Db::get();\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($request->get('storeId')) {\n            $conditionParts[] = '(storeId = ' . $db->quote($request->get('storeId')) . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if ($request->get('oid')) {\n            $object = DataObject\\Concrete::getById($request->get('oid'));\n            $class = $object->getClass();\n            /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n            $fd = $class->getFieldDefinition($request->get('fieldname'));\n            $allowedGroupIds = $fd->getAllowedGroupIds();\n\n            if ($allowedGroupIds) {\n                $conditionParts[] = 'ID in (' . implode(',', $allowedGroupIds) . ')';\n            }\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $name = $config->getName();\n            if (!$name) {\n                $name = 'EMPTY';\n            }\n            $item = [\n                'storeId' => $config->getStoreId(),\n                'id' => $config->getId(),\n                'name' => $name,\n                'description' => $config->getDescription(),\n            ];\n            if ($config->getCreationDate()) {\n                $item['creationDate'] = $config->getCreationDate();\n            }\n\n            if ($config->getModificationDate()) {\n                $item['modificationDate'] = $config->getModificationDate();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/groups\", name=\"pimcore_admin_dataobject_classificationstore_groupsaction\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function groupsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\GroupConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    $config->$setter($value);\n                }\n            }\n\n            $config->save();\n\n            return $this->adminJson(['success' => true, 'data' => $config]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelationsget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsGetAction(Request $request)\n    {\n        $mapping = ['groupName' => 'name', 'groupDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'sorter';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\CollectionGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $condition = '';\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n\n            $count = 0;\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                if ($count > 0) {\n                    $condition .= ' AND ';\n                }\n                $count++;\n                $fieldname = $mapping[$f->field];\n                $condition .= $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $colId = $request->get('colId');\n        if ($condition) {\n            $condition = '( ' . $condition . ' ) AND';\n        }\n        $condition .= ' colId = ' . $list->quote($colId);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $item = [\n                'colId' => $config->getColId(),\n                'groupId' => $config->getGroupId(),\n                'groupName' => $config->getName(),\n                'groupDescription' => $config->getDescription(),\n                'id' => $config->getColId() . '-' . $config->getGroupId(),\n                'sorter' => (int) $config->getSorter(),\n            ];\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/collection-relations\", name=\"pimcore_admin_dataobject_classificationstore_collectionrelations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function collectionRelationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            if (count($data) == count($data, 1)) {\n                $data = [$data];\n            }\n\n            foreach ($data as &$row) {\n                $colId = $row['colId'];\n                $groupId = $row['groupId'];\n                $sorter = $row['sorter'];\n\n                $config = new Classificationstore\\CollectionGroupRelation();\n                $config->setGroupId($groupId);\n                $config->setColId($colId);\n                $config->setSorter((int) $sorter);\n\n                $config->save();\n\n                $row['id'] = $config->getColId() . '-' . $config->getGroupId();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/list-stores\", name=\"pimcore_admin_dataobject_classificationstore_liststores\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function listStoresAction()\n    {\n        $storeConfigs = [];\n        $storeConfigListing = new Classificationstore\\StoreConfig\\Listing();\n        $storeConfigListing->load();\n\n        foreach ($storeConfigListing as $storeConfig) {\n            $storeConfigs[] = $storeConfig->getObjectVars();\n        }\n\n        return $this->adminJson($storeConfigs);\n    }\n\n    /**\n     * @Route(\"/search-relations\", name=\"pimcore_admin_dataobject_classificationstore_searchrelations\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchRelationsAction(Request $request)\n    {\n        $db = Db::get();\n\n        $storeId = $request->get('storeId');\n\n        $mapping = [\n            'groupName' => DataObject\\Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS .'.name',\n            'keyName' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS .'.name',\n            'keyDescription' => DataObject\\Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS. '.description',\n        ];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            if ($orderKey == 'keyName') {\n                $orderKey = 'name';\n            }\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->property];\n                $conditionParts[] = $fieldname . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        $conditionParts[] = '  groupId IN (select id from classificationstore_groups where storeId = ' . $db->quote($storeId) . ')';\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '('\n                . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\GroupConfig\\Dao::TABLE_NAME_GROUPS . '.name LIKE ' . $db->quote('%' . $searchfilter . '%')\n                . ' OR ' . Classificationstore\\KeyConfig\\Dao::TABLE_NAME_KEYS . '.description LIKE ' . $db->quote('%' . $searchfilter . '%') . ')';\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n        $list->setResolveGroupName(1);\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($list->getList() as $config) {\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => $config->getSorter(),\n            ];\n\n            $groupConfig = Classificationstore\\GroupConfig::getById($config->getGroupId());\n            if ($groupConfig) {\n                $item['groupName'] = $groupConfig->getName();\n            }\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relationsactionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsActionGet(Request $request)\n    {\n        $mapping = ['keyName' => 'name', 'keyDescription' => 'description'];\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n        $relationIds = $request->get('relationIds');\n\n        if ($relationIds) {\n            $relationIds = json_decode($relationIds, true);\n        }\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        } elseif (is_array($relationIds)) {\n            $limit = count($relationIds);\n        }\n\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyGroupRelation\\Listing();\n\n        if ($limit > 0) {\n            $list->setLimit($limit);\n        }\n\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n        $conditionParts = [];\n\n        if ($request->get('filter')) {\n            $db = Db::get();\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $fieldname = $mapping[$f->field];\n                $conditionParts[] = $db->quoteIdentifier($fieldname) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n\n        if (!$request->get('relationIds')) {\n            $groupId = $request->get('groupId');\n            $conditionParts[] = ' groupId = ' . $list->quote($groupId);\n        }\n\n        if ($relationIds) {\n            $relationParts = [];\n\n            foreach ($relationIds as $relationId) {\n                $keyId = $relationId['keyId'];\n                $groupId = $relationId['groupId'];\n                $relationParts[] = '(keyId = ' . $list->quote($keyId) . ' AND groupId = ' . $list->quote($groupId) . ')';\n            }\n\n            $conditionParts[] = '(' . implode(' OR ', $relationParts) . ')';\n        }\n\n        $condition = implode(' AND ', $conditionParts);\n\n        $list->setCondition($condition);\n\n        $listItems = $list->load();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($listItems as $config) {\n            $type = $config->getType();\n            $definition = json_decode($config->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n            DataObject\\Service::enrichLayoutDefinition($definition);\n\n            $item = [\n                'keyId' => $config->getKeyId(),\n                'groupId' => $config->getGroupId(),\n                'keyName' => $config->getName(),\n                'keyDescription' => $config->getDescription(),\n                'id' => $config->getGroupId() . '-' . $config->getKeyId(),\n                'sorter' => (int) $config->getSorter(),\n                'layout' => $definition,\n                'mandatory' => $config->isMandatory(),\n            ];\n\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/relations\", name=\"pimcore_admin_dataobject_classificationstore_relations\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function relationsAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $keyId = $data['keyId'];\n            $groupId = $data['groupId'];\n            $sorter = $data['sorter'];\n            $mandatory = $data['mandatory'];\n\n            $config = new Classificationstore\\KeyGroupRelation();\n            $config->setGroupId($groupId);\n            $config->setKeyId($keyId);\n            $config->setSorter($sorter);\n            $config->setMandatory($mandatory);\n\n            $config->save();\n            $data['id'] = $config->getGroupId() . '-' . $config->getKeyId();\n\n            return $this->adminJson(['success' => true, 'data' => $data]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/add-collections\", name=\"pimcore_admin_dataobject_classificationstore_addcollections\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCollectionsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('collectionIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n        $data = [];\n\n        if ($ids) {\n            $db = \\Pimcore\\Db::get();\n            $mappedData = [];\n            $groupsData = $db->fetchAll('select * from classificationstore_groups g, classificationstore_collectionrelations c where colId IN (:ids) and g.id = c.groupId', [\n                'ids' => implode(',', array_filter($ids, 'intval')),\n            ]);\n\n            foreach ($groupsData as $groupData) {\n                $mappedData[$groupData['id']] = $groupData;\n            }\n\n            $groupIdList = [];\n            $groupId = null;\n\n            $allowedGroupIds = null;\n\n            if ($request->get('oid')) {\n                $object = DataObject\\Concrete::getById($request->get('oid'));\n                $class = $object->getClass();\n                /** @var DataObject\\ClassDefinition\\Data\\Classificationstore $fd */\n                $fd = $class->getFieldDefinition($request->get('fieldname'));\n                $allowedGroupIds = $fd->getAllowedGroupIds();\n            }\n\n            foreach ($groupsData as $groupItem) {\n                $groupId = $groupItem['groupId'];\n                if (!$allowedGroupIds || in_array($groupId, $allowedGroupIds)) {\n                    $groupIdList[] = $groupId;\n                }\n            }\n\n            if ($groupIdList) {\n                $groupList = new Classificationstore\\GroupConfig\\Listing();\n                $groupCondition = 'id in (' . implode(',', $groupIdList) . ')';\n                $groupList->setCondition($groupCondition);\n\n                $groupList = $groupList->load();\n\n                $keyCondition = 'groupId in (' . implode(',', $groupIdList) . ')';\n\n                $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n                $keyList->setCondition($keyCondition);\n                $keyList->setOrderKey(['sorter', 'id']);\n                $keyList->setOrder(['ASC', 'ASC']);\n                $keyList = $keyList->load();\n\n                foreach ($groupList as $groupData) {\n                    $data[$groupData->getId()] = [\n                        'name' => $groupData->getName(),\n                        'id' => $groupData->getId(),\n                        'description' => $groupData->getDescription(),\n                        'keys' => [],\n                        'sorter' => intval($mappedData[$groupData->getId()]['sorter']),\n                        'collectionId' => $mappedData[$groupId]['colId'],\n                    ];\n                }\n\n                foreach ($keyList as $keyData) {\n                    $groupId = $keyData->getGroupId();\n\n                    $keyList = $data[$groupId]['keys'];\n                    $type = $keyData->getType();\n                    $definition = json_decode($keyData->getDefinition());\n                    $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n                    if (method_exists($definition, '__wakeup')) {\n                        $definition->__wakeup();\n                    }\n\n                    $context['object'] = $object;\n                    $context['class'] = $object ? $object->getClass() : null;\n                    $context['ownerType'] = 'classificationstore';\n                    $context['ownerName'] = $fieldname;\n                    $context['keyId'] = $keyData->getKeyId();\n                    $context['groupId'] = $groupId;\n                    $context['keyDefinition'] = $definition;\n\n                    //TODO Pimcore 11: remove method_exists BC layer\n                    if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                        if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                            trigger_deprecation('pimcore/pimcore', '10.1',\n                                'Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                                'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class);\n                        }\n                        $definition = $definition->enrichLayoutDefinition($object, $context);\n                    }\n\n                    $keyList[] = [\n                        'name' => $keyData->getName(),\n                        'id' => $keyData->getKeyId(),\n                        'description' => $keyData->getDescription(),\n                        'definition' => $definition,\n                    ];\n                    $data[$groupId]['keys'] = $keyList;\n                }\n            }\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/add-groups\", name=\"pimcore_admin_dataobject_classificationstore_addgroups\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addGroupsAction(Request $request)\n    {\n        $this->checkPermission('objects');\n\n        $ids = $this->decodeJson($request->get('groupIds'));\n        $oid = $request->get('oid');\n        $object = DataObject\\Concrete::getById($oid);\n        $fieldname = $request->get('fieldname');\n\n        $keyCondition = 'groupId in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $keyList = new Classificationstore\\KeyGroupRelation\\Listing();\n        $keyList->setCondition($keyCondition, $ids);\n        $keyList->setOrderKey(['sorter', 'id']);\n        $keyList->setOrder(['ASC', 'ASC']);\n        $keyList = $keyList->load();\n\n        $groupCondition = 'id in (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n\n        $groupList = new Classificationstore\\GroupConfig\\Listing();\n        $groupList->setCondition($groupCondition, $ids);\n        $groupList->setOrder('ASC');\n        $groupList->setOrderKey('id');\n        $groupList = $groupList->load();\n\n        $data = [];\n\n        foreach ($groupList as $groupData) {\n            $data[$groupData->getId()] = [\n                'name' => $groupData->getName(),\n                'id' => $groupData->getId(),\n                'description' => $groupData->getDescription(),\n                'keys' => [],\n            ];\n        }\n\n        foreach ($keyList as $keyData) {\n            $groupId = $keyData->getGroupId();\n\n            $keyList = $data[$groupId]['keys'];\n            $type = $keyData->getType();\n            $definition = json_decode($keyData->getDefinition());\n            $definition = \\Pimcore\\Model\\DataObject\\Classificationstore\\Service::getFieldDefinitionFromJson($definition, $type);\n\n            if (method_exists($definition, '__wakeup')) {\n                $definition->__wakeup();\n            }\n\n            $context['object'] = $object;\n            $context['class'] = $object ? $object->getClass() : null;\n            $context['ownerType'] = 'classificationstore';\n            $context['ownerName'] = $fieldname;\n            $context['keyId'] = $keyData->getKeyId();\n            $context['groupId'] = $groupId;\n            $context['keyDefinition'] = $definition;\n\n            //TODO Pimcore 11: remove method_exists BC layer\n            if ($definition instanceof LayoutDefinitionEnrichmentInterface || method_exists($definition, 'enrichLayoutDefinition')) {\n                if (!$definition instanceof LayoutDefinitionEnrichmentInterface) {\n                    trigger_deprecation('pimcore/pimcore', '10.1',\n                        sprintf('Usage of method_exists is deprecated since version 10.1 and will be removed in Pimcore 11.' .\n                        'Implement the %s interface instead.', LayoutDefinitionEnrichmentInterface::class));\n                }\n                $definition = $definition->enrichLayoutDefinition($object, $context);\n            }\n\n            $keyList[] = [\n                'name' => $keyData->getName(),\n                'id' => $keyData->getKeyId(),\n                'description' => $keyData->getDescription(),\n                'definition' => $definition,\n            ];\n            $data[$groupId]['keys'] = $keyList;\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_propertiesget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesGetAction(Request $request)\n    {\n        $storeId = $request->get('storeId');\n        $frameName = $request->get('frameName');\n        $db = \\Pimcore\\Db::get();\n\n        $conditionParts = [];\n\n        if ($frameName) {\n            $keyCriteria = ' FALSE ';\n            $frameConfig = Classificationstore\\CollectionConfig::getByName($frameName, $storeId);\n            if ($frameConfig) {\n                // get all keys within that collection / frame\n                $frameId = $frameConfig->getId();\n                $groupList = new Classificationstore\\CollectionGroupRelation\\Listing();\n                $groupList->setCondition('colId = ' . $db->quote($frameId));\n                $groupList = $groupList->load();\n                $groupIdList = [];\n                foreach ($groupList as $groupEntry) {\n                    $groupIdList[] = $groupEntry->getGroupId();\n                }\n\n                if ($groupIdList) {\n                    $keyIdList = new Classificationstore\\KeyGroupRelation\\Listing();\n                    $keyIdList->setCondition('groupId in (' . implode(',', $groupIdList) . ')');\n                    $keyIdList = $keyIdList->load();\n                    if ($keyIdList) {\n                        $keyIds = [];\n                        foreach ($keyIdList as $keyEntry) {\n                            $keyIds[] = $keyEntry->getKeyId();\n                        }\n\n                        $keyCriteria = ' id in (' . implode(',', $keyIds) . ')';\n                    }\n                }\n            }\n\n            $conditionParts[] = $keyCriteria;\n        }\n\n        $start = 0;\n        $limit = 15;\n        $orderKey = 'name';\n        $order = 'ASC';\n\n        if ($request->get('dir')) {\n            $order = $request->get('dir');\n        }\n\n        $allParams = array_merge($request->request->all(), $request->query->all());\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings($allParams);\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $orderKey = $sortingSettings['orderKey'];\n            $order = $sortingSettings['order'];\n        }\n\n        if ($request->get('overrideSort') == 'true') {\n            $orderKey = 'id';\n            $order = 'DESC';\n        }\n\n        if ($request->get('limit')) {\n            $limit = $request->get('limit');\n        }\n        if ($request->get('start')) {\n            $start = $request->get('start');\n        }\n\n        $list = new Classificationstore\\KeyConfig\\Listing();\n\n        if ($limit > 0 && !$request->get('groupIds') && !$request->get('keyIds')) {\n            $list->setLimit($limit);\n        }\n        $list->setOffset($start);\n        $list->setOrder($order);\n        $list->setOrderKey($orderKey);\n\n        $searchfilter = $request->get('searchfilter');\n        if ($searchfilter) {\n            $conditionParts[] = '(name LIKE ' . $db->quote('%' . $searchfilter . '%') . ' OR description LIKE ' . $db->quote('%'. $searchfilter . '%') . ')';\n        }\n\n        if ($storeId) {\n            $conditionParts[] = '(storeId = '. $db->quote($storeId) . ')';\n        }\n\n        if ($request->get('filter')) {\n            $filterString = $request->get('filter');\n            $filters = json_decode($filterString);\n            /** @var \\stdClass $f */\n            foreach ($filters as $f) {\n                if (!isset($f->value)) {\n                    continue;\n                }\n\n                $conditionParts[] = $db->quoteIdentifier($f->property) . ' LIKE ' . $db->quote('%' . $f->value . '%');\n            }\n        }\n        $condition = implode(' AND ', $conditionParts);\n        $list->setCondition($condition);\n\n        if ($request->get('groupIds') || $request->get('keyIds')) {\n            $db = Db::get();\n\n            if ($request->get('groupIds')) {\n                $ids = $this->decodeJson($request->get('groupIds'));\n                $col = 'group';\n            } else {\n                $ids = $this->decodeJson($request->get('keyIds'));\n                $col = 'id';\n            }\n\n            $condition = $db->quoteIdentifier($col) . ' IN (';\n            $count = 0;\n            foreach ($ids as $theId) {\n                if ($count > 0) {\n                    $condition .= ',';\n                }\n                $condition .= $theId;\n                $count++;\n            }\n\n            $condition .= ')';\n            $list->setCondition($condition);\n        }\n\n        $list->load();\n        $configList = $list->getList();\n\n        $rootElement = [];\n\n        $data = [];\n        foreach ($configList as $config) {\n            $item = $this->getConfigItem($config);\n            $data[] = $item;\n        }\n        $rootElement['data'] = $data;\n        $rootElement['success'] = true;\n        $rootElement['total'] = $list->getTotalCount();\n\n        return $this->adminJson($rootElement);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_dataobject_classificationstore_properties\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $dataParam = $request->get('data');\n            $data = $this->decodeJson($dataParam);\n\n            $id = $data['id'];\n            $config = Classificationstore\\KeyConfig::getById($id);\n\n            foreach ($data as $key => $value) {\n                if ($key != 'id') {\n                    $setter = 'set' . $key;\n                    if (method_exists($config, $setter)) {\n                        $config->$setter($value);\n                    }\n                }\n            }\n\n            $config->save();\n            $item = $this->getConfigItem($config);\n\n            return $this->adminJson(['success' => true, 'data' => $item]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param Classificationstore\\KeyConfig $config\n     *\n     * @return array\n     */\n    protected function getConfigItem($config)\n    {\n        $name = $config->getName();\n\n        $groupDescription = null;\n        $item = [\n            'storeId' => $config->getStoreId(),\n            'id' => $config->getId(),\n            'name' => $name,\n            'description' => $config->getDescription(),\n            'type' => $config->getType() ? $config->getType() : 'input',\n            'definition' => $config->getDefinition(),\n        ];\n\n        if ($config->getDefinition()) {\n            $definition = json_decode($config->getDefinition(), true);\n            if ($definition) {\n                $item['title'] = $definition['title'];\n            }\n        }\n\n        if ($config->getCreationDate()) {\n            $item['creationDate'] = $config->getCreationDate();\n        }\n\n        if ($config->getModificationDate()) {\n            $item['modificationDate'] = $config->getModificationDate();\n        }\n\n        return $item;\n    }\n\n    /**\n     * @Route(\"/add-property\", name=\"pimcore_admin_dataobject_classificationstore_addproperty\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addPropertyAction(Request $request)\n    {\n        $name = $request->get('name');\n        $storeId = $request->get('storeId');\n\n        $definition = [\n            'fieldtype' => 'input',\n            'name' => $name,\n            'title' => $name,\n            'datatype' => 'data',\n        ];\n        $config = new Classificationstore\\KeyConfig();\n        $config->setName($name);\n        $config->setTitle($name);\n        $config->setType('input');\n        $config->setStoreId($storeId);\n        $config->setEnabled(1);\n        $config->setDefinition(json_encode($definition));\n        $config->save();\n\n        return $this->adminJson(['success' => true, 'id' => $config->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete-property\", name=\"pimcore_admin_dataobject_classificationstore_deleteproperty\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deletePropertyAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        $config = Classificationstore\\KeyConfig::getById($id);\n        //        $config->delete();\n        $config->setEnabled(false);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/edit-store\", name=\"pimcore_admin_dataobject_classificationstore_editstore\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function editStoreAction(Request $request)\n    {\n        $id = $request->get('id');\n        $data = json_decode($request->get('data'), true);\n\n        $name = $data['name'];\n        if (!$name) {\n            throw new \\Exception('Name must not be empty');\n        }\n\n        $description = $data['description'];\n\n        $config = Classificationstore\\StoreConfig::getByName($name);\n        if ($config && $config->getId() != $id) {\n            throw new \\Exception('There is already a config with the same name');\n        }\n\n        $config = Classificationstore\\StoreConfig::getById($id);\n\n        if (!$config) {\n            throw new \\Exception('Configuration does not exist');\n        }\n\n        $config->setName($name);\n        $config->setDescription($description);\n        $config->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/storetree\", name=\"pimcore_admin_dataobject_classificationstore_storetree\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function storetreeAction(Request $request)\n    {\n        $result = [];\n        $list = new Classificationstore\\StoreConfig\\Listing();\n        $list = $list->load();\n        foreach ($list as $item) {\n            $resultItem = [\n                'id' => $item->getId(),\n                'text' => htmlspecialchars($item->getName(), ENT_QUOTES),\n                'expandable' => false,\n                'leaf' => true,\n                'expanded' => true,\n                'description' => htmlspecialchars($item->getDescription(), ENT_QUOTES),\n                'iconCls' => 'pimcore_icon_classificationstore',\n            ];\n\n            $resultItem['qtitle'] = 'ID: ' . $item->getId();\n\n            if ($item->getDescription()) {\n            }\n            $resultItem['qtip'] = $item->getDescription() ? htmlspecialchars($item->getDescription(), ENT_QUOTES) : ' ';\n            $result[] = $resultItem;\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-page\", name=\"pimcore_admin_dataobject_classificationstore_getpage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPageAction(Request $request)\n    {\n        $tableSuffix = $request->get('table');\n        if (!in_arrayi($tableSuffix, ['keys', 'groups'])) {\n            $tableSuffix = 'keys';\n        }\n\n        $table = 'classificationstore_' . $tableSuffix;\n        $db = \\Pimcore\\Db::get();\n        $id = (int) $request->get('id');\n        $storeId = (int) $request->get('storeId');\n        $pageSize = (int) $request->get('pageSize');\n\n        if ($request->get('sortKey')) {\n            $sortKey = $request->get('sortKey');\n            $sortDir = $request->get('sortDir');\n        } else {\n            $sortKey = 'name';\n            $sortDir = 'ASC';\n        }\n\n        if (!in_arrayi($sortDir, ['DESC', 'ASC'])) {\n            $sortDir = 'DESC';\n        }\n\n        if (!in_arrayi($sortKey, ['name', 'title', 'description', 'id', 'type', 'creationDate', 'modificationDate', 'enabled', 'parentId', 'storeId'])) {\n            $sortKey = 'name';\n        }\n\n        $sorter = ' order by `' . $sortKey .  '` ' . $sortDir;\n\n        if ($table == 'keys') {\n            $query = '\n                select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                    select * from (\n                        select @rownum := @rownum + 1 as pos,  id, name, `type`\n                        from `' . $table . '`\n                        where enabled = 1 and storeId = ' . $storeId . $sorter . '\n                      ) all_rows) item where id = ' . $id . ';';\n        } else {\n            $query = '\n            select *, (item.pos - 1)/ ' . $pageSize . ' + 1  as page from (\n                select * from (\n                    select @rownum := @rownum + 1 as pos,  id, name\n                    from `' . $table . '`\n                    where storeId = ' . $storeId . $sorter . '\n                  ) all_rows) item where id = ' .  $id . ';';\n        }\n\n        $db->query('select @rownum := 0;');\n        $result = $db->fetchAll($query);\n\n        $page = (int) $result[0]['page'] ;\n\n        return $this->adminJson(['success' => true, 'page' => $page]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        $unrestrictedActions = ['collectionsActionGet', 'groupsActionGet', 'relationsActionGet', 'addGroupsAction', 'addCollectionsAction', 'searchRelationsAction'];\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php"], "buggy_code_start_loc": [1245], "buggy_code_end_loc": [1246], "fixing_code_start_loc": [1245], "fixing_code_end_loc": [1246], "type": "CWE-89", "message": "pimcore is vulnerable to Improper Neutralization of Special Elements used in an SQL Command", "other": {"cve": {"id": "CVE-2022-0258", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-17T16:15:07.713", "lastModified": "2022-01-25T20:32:49.687", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pimcore is vulnerable to Improper Neutralization of Special Elements used in an SQL Command"}, {"lang": "es", "value": "pimcore es vulnerable a una Neutralizaci\u00f3n Inapropiada de Elementos Especiales usados en un Comando SQL"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.8", "matchCriteriaId": "5AC8F67B-4157-4F41-B0C7-EBD7FA95553F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/66281c12479dc01a06258d8533eaddfb1770d5bd", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0df891e4-6412-4d9a-a9b7-d9df50311802", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/66281c12479dc01a06258d8533eaddfb1770d5bd"}}