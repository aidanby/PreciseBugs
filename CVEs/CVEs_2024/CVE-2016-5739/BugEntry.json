{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Used to render the header of PMA's pages\n *\n * @package PhpMyAdmin\n */\nnamespace PMA\\libraries;\n\nuse PMA\\libraries\\navigation\\Navigation;\n\nrequire_once 'libraries/js_escape.lib.php';\nrequire_once 'libraries/url_generating.lib.php';\n\n/**\n * Class used to output the HTTP and HTML headers\n *\n * @package PhpMyAdmin\n */\nclass Header\n{\n    /**\n     * Scripts instance\n     *\n     * @access private\n     * @var Scripts\n     */\n    private $_scripts;\n    /**\n     * PMA\\libraries\\Console instance\n     *\n     * @access private\n     * @var Console\n     */\n    private $_console;\n    /**\n     * Menu instance\n     *\n     * @access private\n     * @var Menu\n     */\n    private $_menu;\n    /**\n     * Whether to offer the option of importing user settings\n     *\n     * @access private\n     * @var bool\n     */\n    private $_userprefsOfferImport;\n    /**\n     * The page title\n     *\n     * @access private\n     * @var string\n     */\n    private $_title;\n    /**\n     * The value for the id attribute for the body tag\n     *\n     * @access private\n     * @var string\n     */\n    private $_bodyId;\n    /**\n     * Whether to show the top menu\n     *\n     * @access private\n     * @var bool\n     */\n    private $_menuEnabled;\n    /**\n     * Whether to show the warnings\n     *\n     * @access private\n     * @var bool\n     */\n    private $_warningsEnabled;\n    /**\n     * Whether the page is in 'print view' mode\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isPrintView;\n    /**\n     * Whether we are servicing an ajax request.\n     * We can't simply use $GLOBALS['is_ajax_request']\n     * here since it may have not been initialised yet.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjax;\n    /**\n     * Whether to display anything\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isEnabled;\n    /**\n     * Whether the HTTP headers (and possibly some HTML)\n     * have already been sent to the browser\n     *\n     * @access private\n     * @var bool\n     */\n    private $_headerIsSent;\n\n    /**\n     * Creates a new class instance\n     */\n    public function __construct()\n    {\n        $this->_isEnabled = true;\n        $this->_isAjax = false;\n        $this->_bodyId = '';\n        $this->_title  = '';\n        $this->_console = new Console();\n        $db = ! empty($GLOBALS['db']) ? $GLOBALS['db'] : '';\n        $table = ! empty($GLOBALS['table']) ? $GLOBALS['table'] : '';\n        $this->_menu   = new Menu(\n            $GLOBALS['server'],\n            $db,\n            $table\n        );\n        $this->_menuEnabled = true;\n        $this->_warningsEnabled = true;\n        $this->_isPrintView = false;\n        $this->_scripts     = new Scripts();\n        $this->_addDefaultScripts();\n        $this->_headerIsSent = false;\n        // if database storage for user preferences is transient,\n        // offer to load exported settings from localStorage\n        // (detection will be done in JavaScript)\n        $this->_userprefsOfferImport = false;\n        if ($GLOBALS['PMA_Config']->get('user_preferences') == 'session'\n            && ! isset($_SESSION['userprefs_autoload'])\n        ) {\n            $this->_userprefsOfferImport = true;\n        }\n    }\n\n    /**\n     * Loads common scripts\n     *\n     * @return void\n     */\n    private function _addDefaultScripts()\n    {\n        // Localised strings\n        $params = array('lang' => $GLOBALS['lang']);\n        if (isset($GLOBALS['db'])) {\n            $params['db'] = $GLOBALS['db'];\n        }\n        $this->_scripts->addFile('jquery/jquery-2.1.4.min.js');\n        $this->_scripts->addFile(\n            'whitelist.php' . PMA_URL_getCommon($params), false, true\n        );\n        $this->_scripts->addFile('sprintf.js');\n        $this->_scripts->addFile('ajax.js');\n        $this->_scripts->addFile('keyhandler.js');\n        $this->_scripts->addFile('jquery/jquery-ui-1.11.4.min.js');\n        $this->_scripts->addFile('jquery/jquery.cookie.js');\n        $this->_scripts->addFile('jquery/jquery.mousewheel.js');\n        $this->_scripts->addFile('jquery/jquery.event.drag-2.2.js');\n        $this->_scripts->addFile('jquery/jquery-ui-timepicker-addon.js');\n        $this->_scripts->addFile('jquery/jquery.ba-hashchange-1.3.js');\n        $this->_scripts->addFile('jquery/jquery.debounce-1.0.5.js');\n        $this->_scripts->addFile('menu-resizer.js');\n\n        // Cross-framing protection\n        if ($GLOBALS['cfg']['AllowThirdPartyFraming'] === false) {\n            $this->_scripts->addFile('cross_framing_protection.js');\n        }\n\n        $this->_scripts->addFile('rte.js');\n        if ($GLOBALS['cfg']['SendErrorReports'] !== 'never') {\n            $this->_scripts->addFile('tracekit/tracekit.js');\n            $this->_scripts->addFile('error_report.js');\n        }\n\n        // Here would not be a good place to add CodeMirror because\n        // the user preferences have not been merged at this point\n\n        $this->_scripts->addFile('messages.php' . PMA_URL_getCommon($params));\n        // Append the theme id to this url to invalidate\n        // the cache on a theme change. Though this might be\n        // unavailable for fatal errors.\n        if (isset($_SESSION['PMA_Theme'])) {\n            $theme_id = urlencode($_SESSION['PMA_Theme']->getId());\n        } else {\n            $theme_id = 'default';\n        }\n        $this->_scripts->addFile(\n            'get_image.js.php?theme=' . $theme_id\n        );\n        $this->_scripts->addFile('config.js');\n        $this->_scripts->addFile('doclinks.js');\n        $this->_scripts->addFile('functions.js');\n        $this->_scripts->addFile('navigation.js');\n        $this->_scripts->addFile('indexes.js');\n        $this->_scripts->addFile('common.js');\n        $this->_scripts->addFile('page_settings.js');\n        $this->_scripts->addCode($this->getJsParamsCode());\n    }\n\n    /**\n     * Returns, as an array, a list of parameters\n     * used on the client side\n     *\n     * @return array\n     */\n    public function getJsParams()\n    {\n        $db = ! empty($GLOBALS['db']) ? $GLOBALS['db'] : '';\n        $table = ! empty($GLOBALS['table']) ? $GLOBALS['table'] : '';\n        $pftext = ! empty($_SESSION['tmpval']['pftext'])\n            ? $_SESSION['tmpval']['pftext'] : '';\n\n        // not sure when this happens, but it happens\n        if (! isset($GLOBALS['collation_connection'])) {\n            $GLOBALS['collation_connection'] = 'utf8_general_ci';\n        }\n\n        $params = array(\n            'common_query' => PMA_URL_getCommon(array(), 'text'),\n            'opendb_url' => Util::getScriptNameForOption(\n                $GLOBALS['cfg']['DefaultTabDatabase'], 'database'\n            ),\n            'safari_browser' => PMA_USR_BROWSER_AGENT == 'SAFARI' ? 1 : 0,\n            'collation_connection' => $GLOBALS['collation_connection'],\n            'lang' => $GLOBALS['lang'],\n            'server' => $GLOBALS['server'],\n            'table' => $table,\n            'db'    => $db,\n            'token' => $_SESSION[' PMA_token '],\n            'text_dir' => $GLOBALS['text_dir'],\n            'show_databases_navigation_as_tree' => $GLOBALS['cfg']['ShowDatabasesNavigationAsTree'],\n            'pma_text_default_tab' => Util::getTitleForTarget(\n                $GLOBALS['cfg']['DefaultTabTable']\n            ),\n            'pma_text_left_default_tab' => Util::getTitleForTarget(\n                $GLOBALS['cfg']['NavigationTreeDefaultTabTable']\n            ),\n            'pma_text_left_default_tab2' => Util::getTitleForTarget(\n                $GLOBALS['cfg']['NavigationTreeDefaultTabTable2']\n            ),\n            'LimitChars' => $GLOBALS['cfg']['LimitChars'],\n            'pftext' => $pftext,\n            'confirm' => $GLOBALS['cfg']['Confirm'],\n            'LoginCookieValidity' => $GLOBALS['cfg']['LoginCookieValidity'],\n            'logged_in' => isset($GLOBALS['userlink']) ? true : false,\n            'PMA_VERSION' => PMA_VERSION\n        );\n        if (isset($GLOBALS['cfg']['Server'])\n            && isset($GLOBALS['cfg']['Server']['auth_type'])\n        ) {\n            $params['auth_type'] = $GLOBALS['cfg']['Server']['auth_type'];\n        }\n\n        return $params;\n    }\n\n    /**\n     * Returns, as a string, a list of parameters\n     * used on the client side\n     *\n     * @return string\n     */\n    public function getJsParamsCode()\n    {\n        $params = $this->getJsParams();\n        foreach ($params as $key => $value) {\n            $params[$key] = $key . ':\"' . PMA_escapeJsString($value) . '\"';\n        }\n        return 'PMA_commonParams.setAll({' . implode(',', $params) . '});';\n    }\n\n    /**\n     * Disables the rendering of the header\n     *\n     * @return void\n     */\n    public function disable()\n    {\n        $this->_isEnabled = false;\n    }\n\n    /**\n     * Set the ajax flag to indicate whether\n     * we are servicing an ajax request\n     *\n     * @param bool $isAjax Whether we are servicing an ajax request\n     *\n     * @return void\n     */\n    public function setAjax($isAjax)\n    {\n        $this->_isAjax = (boolean) $isAjax;\n        $this->_console->setAjax($isAjax);\n    }\n\n    /**\n     * Returns the Scripts object\n     *\n     * @return Scripts object\n     */\n    public function getScripts()\n    {\n        return $this->_scripts;\n    }\n\n    /**\n     * Returns the Menu object\n     *\n     * @return Menu object\n     */\n    public function getMenu()\n    {\n        return $this->_menu;\n    }\n\n    /**\n     * Setter for the ID attribute in the BODY tag\n     *\n     * @param string $id Value for the ID attribute\n     *\n     * @return void\n     */\n    public function setBodyId($id)\n    {\n        $this->_bodyId = htmlspecialchars($id);\n    }\n\n    /**\n     * Setter for the title of the page\n     *\n     * @param string $title New title\n     *\n     * @return void\n     */\n    public function setTitle($title)\n    {\n        $this->_title = htmlspecialchars($title);\n    }\n\n    /**\n     * Disables the display of the top menu\n     *\n     * @return void\n     */\n    public function disableMenuAndConsole()\n    {\n        $this->_menuEnabled = false;\n        $this->_console->disable();\n    }\n\n    /**\n     * Disables the display of the top menu\n     *\n     * @return void\n     */\n    public function disableWarnings()\n    {\n        $this->_warningsEnabled = false;\n    }\n\n    /**\n     * Turns on 'print view' mode\n     *\n     * @return void\n     */\n    public function enablePrintView()\n    {\n        $this->disableMenuAndConsole();\n        $this->setTitle(__('Print view') . ' - phpMyAdmin ' . PMA_VERSION);\n        $this->_isPrintView = true;\n    }\n\n    /**\n     * Generates the header\n     *\n     * @return string The header\n     */\n    public function getDisplay()\n    {\n        $retval = '';\n        if (! $this->_headerIsSent) {\n            if (! $this->_isAjax && $this->_isEnabled) {\n                $this->sendHttpHeaders();\n                $retval .= $this->_getHtmlStart();\n                $retval .= $this->_getMetaTags();\n                $retval .= $this->_getLinkTags();\n                $retval .= $this->getTitleTag();\n\n                // The user preferences have been merged at this point\n                // so we can conditionally add CodeMirror\n                if ($GLOBALS['cfg']['CodemirrorEnable']) {\n                    $this->_scripts->addFile('codemirror/lib/codemirror.js');\n                    $this->_scripts->addFile('codemirror/mode/sql/sql.js');\n                    $this->_scripts->addFile('codemirror/addon/runmode/runmode.js');\n                    $this->_scripts->addFile('codemirror/addon/hint/show-hint.js');\n                    $this->_scripts->addFile('codemirror/addon/hint/sql-hint.js');\n                    if ($GLOBALS['cfg']['LintEnable']) {\n                        $this->_scripts->addFile('codemirror/addon/lint/lint.js');\n                        $this->_scripts->addFile(\n                            'codemirror/addon/lint/sql-lint.js'\n                        );\n                    }\n                }\n                $this->_scripts->addCode(\n                    'ConsoleEnterExecutes='\n                    . ($GLOBALS['cfg']['ConsoleEnterExecutes'] ? 'true' : 'false')\n                );\n                $this->_scripts->addFiles($this->_console->getScripts());\n                if ($this->_userprefsOfferImport) {\n                    $this->_scripts->addFile('config.js');\n                }\n                $retval .= $this->_scripts->getDisplay();\n                $retval .= '<noscript>';\n                $retval .= '<style>html{display:block}</style>';\n                $retval .= '</noscript>';\n                $retval .= $this->_getBodyStart();\n                if ($this->_menuEnabled && $GLOBALS['server'] > 0) {\n                    $nav = new Navigation();\n                    $retval .= $nav->getDisplay();\n                }\n                // Include possible custom headers\n                if (file_exists(CUSTOM_HEADER_FILE)) {\n                    $retval .= '<div id=\"pma_header\">';\n                    ob_start();\n                    include CUSTOM_HEADER_FILE;\n                    $retval .= ob_get_contents();\n                    ob_end_clean();\n                    $retval .= '</div>';\n                }\n                // offer to load user preferences from localStorage\n                if ($this->_userprefsOfferImport) {\n                    include_once './libraries/user_preferences.lib.php';\n                    $retval .= PMA_userprefsAutoloadGetHeader();\n                }\n                // pass configuration for hint tooltip display\n                // (to be used by PMA_tooltip() in js/functions.js)\n                if (! $GLOBALS['cfg']['ShowHint']) {\n                    $retval .= '<span id=\"no_hint\" class=\"hide\"></span>';\n                }\n                $retval .= $this->_getWarnings();\n                if ($this->_menuEnabled && $GLOBALS['server'] > 0) {\n                    $retval .= $this->_menu->getDisplay();\n                    $retval .= '<span id=\"page_nav_icons\">';\n                    $retval .= '<span id=\"lock_page_icon\"></span>';\n                    $retval .= '<span id=\"page_settings_icon\">'\n                        . Util::getImage(\n                            's_cog.png',\n                            __('Page-related settings')\n                        )\n                        . '</span>';\n                    $retval .= sprintf(\n                        '<a id=\"goto_pagetop\" href=\"#\">%s</a>',\n                        Util::getImage(\n                            's_top.png',\n                            __('Click on the bar to scroll to top of page')\n                        )\n                    );\n                    $retval .= '</span>';\n                }\n                $retval .= $this->_console->getDisplay();\n                $retval .= '<div id=\"page_content\">';\n                $retval .= $this->getMessage();\n            }\n            if ($this->_isEnabled && empty($_REQUEST['recent_table'])) {\n                $retval .= $this->_addRecentTable(\n                    $GLOBALS['db'],\n                    $GLOBALS['table']\n                );\n            }\n        }\n        return $retval;\n    }\n\n    /**\n     * Returns the message to be displayed at the top of\n     * the page, including the executed SQL query, if any.\n     *\n     * @return string\n     */\n    public function getMessage()\n    {\n        $retval = '';\n        $message = '';\n        if (! empty($GLOBALS['message'])) {\n            $message = $GLOBALS['message'];\n            unset($GLOBALS['message']);\n        } else if (! empty($_REQUEST['message'])) {\n            $message = $_REQUEST['message'];\n        }\n        if (! empty($message)) {\n            if (isset($GLOBALS['buffer_message'])) {\n                $buffer_message = $GLOBALS['buffer_message'];\n            }\n            $retval .= Util::getMessage($message);\n            if (isset($buffer_message)) {\n                $GLOBALS['buffer_message'] = $buffer_message;\n            }\n        }\n        return $retval;\n    }\n\n    /**\n     * Sends out the HTTP headers\n     *\n     * @return void\n     */\n    public function sendHttpHeaders()\n    {\n        if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n            return;\n        }\n        $map_tile_urls = ' *.tile.openstreetmap.org';\n\n        /**\n         * Sends http headers\n         */\n        $GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';\n        if (!empty($GLOBALS['cfg']['CaptchaLoginPrivateKey'])\n            && !empty($GLOBALS['cfg']['CaptchaLoginPublicKey'])\n        ) {\n            $captcha_url\n                = ' https://apis.google.com https://www.google.com/recaptcha/'\n                . ' https://www.gstatic.com/recaptcha/ https://ssl.gstatic.com/ ';\n        } else {\n            $captcha_url = '';\n        }\n        /* Prevent against ClickJacking by disabling framing */\n        if (! $GLOBALS['cfg']['AllowThirdPartyFraming']) {\n            header(\n                'X-Frame-Options: DENY'\n            );\n        }\n        header(\n            \"Content-Security-Policy: default-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \"script-src 'self' 'unsafe-inline' 'unsafe-eval' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \";\"\n            . \"style-src 'self' 'unsafe-inline' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow']\n            . \";\"\n            . \"img-src 'self' data: \"\n            . $GLOBALS['cfg']['CSPAllow']\n            . $map_tile_urls\n            . $captcha_url\n            . \";\"\n        );\n        header(\n            \"X-Content-Security-Policy: default-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \"options inline-script eval-script;\"\n            . \"img-src 'self' data: \"\n            . $GLOBALS['cfg']['CSPAllow']\n            . $map_tile_urls\n            . $captcha_url\n            . \";\"\n        );\n        header(\n            \"X-WebKit-CSP: default-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \"script-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow']\n            . \" 'unsafe-inline' 'unsafe-eval';\"\n            . \"style-src 'self' 'unsafe-inline' \"\n            . $captcha_url\n            . ';'\n            . \"img-src 'self' data: \"\n            . $GLOBALS['cfg']['CSPAllow']\n            . $map_tile_urls\n            . $captcha_url\n            . \";\"\n        );\n        // Re-enable possible disabled XSS filters\n        // see https://www.owasp.org/index.php/List_of_useful_HTTP_headers\n        header(\n            'X-XSS-Protection: 1; mode=block'\n        );\n        // \"nosniff\", prevents Internet Explorer and Google Chrome from MIME-sniffing\n        // a response away from the declared content-type\n        // see https://www.owasp.org/index.php/List_of_useful_HTTP_headers\n        header(\n            'X-Content-Type-Options: nosniff'\n        );\n        // Adobe cross-domain-policies\n        // see http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\n        header(\n            'X-Permitted-Cross-Domain-Policies: none'\n        );\n        PMA_noCacheHeader();\n        if (! defined('IS_TRANSFORMATION_WRAPPER')) {\n            // Define the charset to be used\n            header('Content-Type: text/html; charset=utf-8');\n        }\n        $this->_headerIsSent = true;\n    }\n\n    /**\n     * Returns the DOCTYPE and the start HTML tag\n     *\n     * @return string DOCTYPE and HTML tags\n     */\n    private function _getHtmlStart()\n    {\n        $lang = $GLOBALS['lang'];\n        $dir  = $GLOBALS['text_dir'];\n\n        $retval  = \"<!DOCTYPE HTML>\";\n        $retval .= \"<html lang='$lang' dir='$dir' class='\";\n        $retval .= mb_strtolower(PMA_USR_BROWSER_AGENT) . \" \";\n        $retval .= mb_strtolower(PMA_USR_BROWSER_AGENT)\n            . intval(PMA_USR_BROWSER_VER) . \"'>\";\n        $retval .= '<head>';\n\n        return $retval;\n    }\n\n    /**\n     * Returns the META tags\n     *\n     * @return string the META tags\n     */\n    private function _getMetaTags()\n    {\n        $retval  = '<meta charset=\"utf-8\" />';\n        $retval .= '<meta name=\"robots\" content=\"noindex,nofollow\" />';\n        $retval .= '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">';\n        if (! $GLOBALS['cfg']['AllowThirdPartyFraming']) {\n            $retval .= '<style id=\"cfs-style\">html{display: none;}</style>';\n        }\n        return $retval;\n    }\n\n    /**\n     * Returns the LINK tags for the favicon and the stylesheets\n     *\n     * @return string the LINK tags\n     */\n    private function _getLinkTags()\n    {\n        $retval = '<link rel=\"icon\" href=\"favicon.ico\" '\n            . 'type=\"image/x-icon\" />'\n            . '<link rel=\"shortcut icon\" href=\"favicon.ico\" '\n            . 'type=\"image/x-icon\" />';\n        // stylesheets\n        $basedir    = defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : '';\n        $theme_id   = $GLOBALS['PMA_Config']->getThemeUniqueValue();\n        $theme_path = $GLOBALS['pmaThemePath'];\n        $v          = self::getVersionParameter();\n\n        if ($this->_isPrintView) {\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'print.css?' . $v . '\" />';\n        } else {\n            // load jQuery's CSS prior to our theme's CSS, to let the theme\n            // override jQuery's CSS\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $theme_path . '/jquery/jquery-ui-1.11.4.css\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'js/codemirror/lib/codemirror.css?' . $v . '\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'js/codemirror/addon/hint/show-hint.css?' . $v . '\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'js/codemirror/addon/lint/lint.css?' . $v . '\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'phpmyadmin.css.php?'\n                . 'nocache=' . $theme_id . $GLOBALS['text_dir'] . '\" />';\n            // load Print view's CSS last, so that it overrides all other CSS while\n            // 'printing'\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $theme_path . '/css/printview.css?' . $v . '\" media=\"print\" id=\"printcss\"/>';\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Returns the TITLE tag\n     *\n     * @return string the TITLE tag\n     */\n    public function getTitleTag()\n    {\n        $retval  = \"<title>\";\n        $retval .= $this->_getPageTitle();\n        $retval .= \"</title>\";\n        return $retval;\n    }\n\n    /**\n     * If the page is missing the title, this function\n     * will set it to something reasonable\n     *\n     * @return string\n     */\n    private function _getPageTitle()\n    {\n        if (empty($this->_title)) {\n            if ($GLOBALS['server'] > 0) {\n                if (! empty($GLOBALS['table'])) {\n                    $temp_title = $GLOBALS['cfg']['TitleTable'];\n                } else if (! empty($GLOBALS['db'])) {\n                    $temp_title = $GLOBALS['cfg']['TitleDatabase'];\n                } elseif (! empty($GLOBALS['cfg']['Server']['host'])) {\n                    $temp_title = $GLOBALS['cfg']['TitleServer'];\n                } else {\n                    $temp_title = $GLOBALS['cfg']['TitleDefault'];\n                }\n                $this->_title = htmlspecialchars(\n                    Util::expandUserString($temp_title)\n                );\n            } else {\n                $this->_title = 'phpMyAdmin';\n            }\n        }\n        return $this->_title;\n    }\n\n    /**\n     * Returns the close tag to the HEAD\n     * and the start tag for the BODY\n     *\n     * @return string HEAD and BODY tags\n     */\n    private function _getBodyStart()\n    {\n        $retval = \"</head><body\";\n        if (! empty($this->_bodyId)) {\n            $retval .= \" id='\" . $this->_bodyId . \"'\";\n        }\n        $retval .= \">\";\n        return $retval;\n    }\n\n    /**\n     * Returns some warnings to be displayed at the top of the page\n     *\n     * @return string The warnings\n     */\n    private function _getWarnings()\n    {\n        $retval = '';\n        if ($this->_warningsEnabled) {\n            $retval .= \"<noscript>\";\n            $retval .= Message::error(\n                __(\"Javascript must be enabled past this point!\")\n            )->getDisplay();\n            $retval .= \"</noscript>\";\n        }\n        return $retval;\n    }\n\n    /**\n     * Add recently used table and reload the navigation.\n     *\n     * @param string $db    Database name where the table is located.\n     * @param string $table The table name\n     *\n     * @return string\n     */\n    private function _addRecentTable($db, $table)\n    {\n        $retval = '';\n        if ($this->_menuEnabled\n            && mb_strlen($table)\n            && $GLOBALS['cfg']['NumRecentTables'] > 0\n        ) {\n            $tmp_result = RecentFavoriteTable::getInstance('recent')\n                              ->add($db, $table);\n            if ($tmp_result === true) {\n                $retval = RecentFavoriteTable::getHtmlUpdateRecentTables();\n            } else {\n                $error  = $tmp_result;\n                $retval = $error->getDisplay();\n            }\n        }\n        return $retval;\n    }\n\n    /**\n     * Returns the phpMyAdmin version to be appended to the url to avoid caching\n     * between versions\n     *\n     * @return string urlenocded pma version as a parameter\n     */\n    public static function getVersionParameter()\n    {\n        return \"v=\" . urlencode(PMA_VERSION);\n    }\n}\n\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Used to render the header of PMA's pages\n *\n * @package PhpMyAdmin\n */\nnamespace PMA\\libraries;\n\nuse PMA\\libraries\\navigation\\Navigation;\n\nrequire_once 'libraries/js_escape.lib.php';\nrequire_once 'libraries/url_generating.lib.php';\n\n/**\n * Class used to output the HTTP and HTML headers\n *\n * @package PhpMyAdmin\n */\nclass Header\n{\n    /**\n     * Scripts instance\n     *\n     * @access private\n     * @var Scripts\n     */\n    private $_scripts;\n    /**\n     * PMA\\libraries\\Console instance\n     *\n     * @access private\n     * @var Console\n     */\n    private $_console;\n    /**\n     * Menu instance\n     *\n     * @access private\n     * @var Menu\n     */\n    private $_menu;\n    /**\n     * Whether to offer the option of importing user settings\n     *\n     * @access private\n     * @var bool\n     */\n    private $_userprefsOfferImport;\n    /**\n     * The page title\n     *\n     * @access private\n     * @var string\n     */\n    private $_title;\n    /**\n     * The value for the id attribute for the body tag\n     *\n     * @access private\n     * @var string\n     */\n    private $_bodyId;\n    /**\n     * Whether to show the top menu\n     *\n     * @access private\n     * @var bool\n     */\n    private $_menuEnabled;\n    /**\n     * Whether to show the warnings\n     *\n     * @access private\n     * @var bool\n     */\n    private $_warningsEnabled;\n    /**\n     * Whether the page is in 'print view' mode\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isPrintView;\n    /**\n     * Whether we are servicing an ajax request.\n     * We can't simply use $GLOBALS['is_ajax_request']\n     * here since it may have not been initialised yet.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjax;\n    /**\n     * Whether to display anything\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isEnabled;\n    /**\n     * Whether the HTTP headers (and possibly some HTML)\n     * have already been sent to the browser\n     *\n     * @access private\n     * @var bool\n     */\n    private $_headerIsSent;\n\n    /**\n     * Creates a new class instance\n     */\n    public function __construct()\n    {\n        $this->_isEnabled = true;\n        $this->_isAjax = false;\n        $this->_bodyId = '';\n        $this->_title  = '';\n        $this->_console = new Console();\n        $db = ! empty($GLOBALS['db']) ? $GLOBALS['db'] : '';\n        $table = ! empty($GLOBALS['table']) ? $GLOBALS['table'] : '';\n        $this->_menu   = new Menu(\n            $GLOBALS['server'],\n            $db,\n            $table\n        );\n        $this->_menuEnabled = true;\n        $this->_warningsEnabled = true;\n        $this->_isPrintView = false;\n        $this->_scripts     = new Scripts();\n        $this->_addDefaultScripts();\n        $this->_headerIsSent = false;\n        // if database storage for user preferences is transient,\n        // offer to load exported settings from localStorage\n        // (detection will be done in JavaScript)\n        $this->_userprefsOfferImport = false;\n        if ($GLOBALS['PMA_Config']->get('user_preferences') == 'session'\n            && ! isset($_SESSION['userprefs_autoload'])\n        ) {\n            $this->_userprefsOfferImport = true;\n        }\n    }\n\n    /**\n     * Loads common scripts\n     *\n     * @return void\n     */\n    private function _addDefaultScripts()\n    {\n        // Localised strings\n        $params = array('lang' => $GLOBALS['lang']);\n        if (isset($GLOBALS['db'])) {\n            $params['db'] = $GLOBALS['db'];\n        }\n        $this->_scripts->addFile('jquery/jquery-2.1.4.min.js');\n        $this->_scripts->addFile(\n            'whitelist.php' . PMA_URL_getCommon($params), false, true\n        );\n        $this->_scripts->addFile('sprintf.js');\n        $this->_scripts->addFile('ajax.js');\n        $this->_scripts->addFile('keyhandler.js');\n        $this->_scripts->addFile('jquery/jquery-ui-1.11.4.min.js');\n        $this->_scripts->addFile('jquery/jquery.cookie.js');\n        $this->_scripts->addFile('jquery/jquery.mousewheel.js');\n        $this->_scripts->addFile('jquery/jquery.event.drag-2.2.js');\n        $this->_scripts->addFile('jquery/jquery-ui-timepicker-addon.js');\n        $this->_scripts->addFile('jquery/jquery.ba-hashchange-1.3.js');\n        $this->_scripts->addFile('jquery/jquery.debounce-1.0.5.js');\n        $this->_scripts->addFile('menu-resizer.js');\n\n        // Cross-framing protection\n        if ($GLOBALS['cfg']['AllowThirdPartyFraming'] === false) {\n            $this->_scripts->addFile('cross_framing_protection.js');\n        }\n\n        $this->_scripts->addFile('rte.js');\n        if ($GLOBALS['cfg']['SendErrorReports'] !== 'never') {\n            $this->_scripts->addFile('tracekit/tracekit.js');\n            $this->_scripts->addFile('error_report.js');\n        }\n\n        // Here would not be a good place to add CodeMirror because\n        // the user preferences have not been merged at this point\n\n        $this->_scripts->addFile('messages.php' . PMA_URL_getCommon($params));\n        // Append the theme id to this url to invalidate\n        // the cache on a theme change. Though this might be\n        // unavailable for fatal errors.\n        if (isset($_SESSION['PMA_Theme'])) {\n            $theme_id = urlencode($_SESSION['PMA_Theme']->getId());\n        } else {\n            $theme_id = 'default';\n        }\n        $this->_scripts->addFile(\n            'get_image.js.php?theme=' . $theme_id\n        );\n        $this->_scripts->addFile('config.js');\n        $this->_scripts->addFile('doclinks.js');\n        $this->_scripts->addFile('functions.js');\n        $this->_scripts->addFile('navigation.js');\n        $this->_scripts->addFile('indexes.js');\n        $this->_scripts->addFile('common.js');\n        $this->_scripts->addFile('page_settings.js');\n        $this->_scripts->addCode($this->getJsParamsCode());\n    }\n\n    /**\n     * Returns, as an array, a list of parameters\n     * used on the client side\n     *\n     * @return array\n     */\n    public function getJsParams()\n    {\n        $db = ! empty($GLOBALS['db']) ? $GLOBALS['db'] : '';\n        $table = ! empty($GLOBALS['table']) ? $GLOBALS['table'] : '';\n        $pftext = ! empty($_SESSION['tmpval']['pftext'])\n            ? $_SESSION['tmpval']['pftext'] : '';\n\n        // not sure when this happens, but it happens\n        if (! isset($GLOBALS['collation_connection'])) {\n            $GLOBALS['collation_connection'] = 'utf8_general_ci';\n        }\n\n        $params = array(\n            'common_query' => PMA_URL_getCommon(array(), 'text'),\n            'opendb_url' => Util::getScriptNameForOption(\n                $GLOBALS['cfg']['DefaultTabDatabase'], 'database'\n            ),\n            'safari_browser' => PMA_USR_BROWSER_AGENT == 'SAFARI' ? 1 : 0,\n            'collation_connection' => $GLOBALS['collation_connection'],\n            'lang' => $GLOBALS['lang'],\n            'server' => $GLOBALS['server'],\n            'table' => $table,\n            'db'    => $db,\n            'token' => $_SESSION[' PMA_token '],\n            'text_dir' => $GLOBALS['text_dir'],\n            'show_databases_navigation_as_tree' => $GLOBALS['cfg']['ShowDatabasesNavigationAsTree'],\n            'pma_text_default_tab' => Util::getTitleForTarget(\n                $GLOBALS['cfg']['DefaultTabTable']\n            ),\n            'pma_text_left_default_tab' => Util::getTitleForTarget(\n                $GLOBALS['cfg']['NavigationTreeDefaultTabTable']\n            ),\n            'pma_text_left_default_tab2' => Util::getTitleForTarget(\n                $GLOBALS['cfg']['NavigationTreeDefaultTabTable2']\n            ),\n            'LimitChars' => $GLOBALS['cfg']['LimitChars'],\n            'pftext' => $pftext,\n            'confirm' => $GLOBALS['cfg']['Confirm'],\n            'LoginCookieValidity' => $GLOBALS['cfg']['LoginCookieValidity'],\n            'logged_in' => isset($GLOBALS['userlink']) ? true : false,\n            'PMA_VERSION' => PMA_VERSION\n        );\n        if (isset($GLOBALS['cfg']['Server'])\n            && isset($GLOBALS['cfg']['Server']['auth_type'])\n        ) {\n            $params['auth_type'] = $GLOBALS['cfg']['Server']['auth_type'];\n        }\n\n        return $params;\n    }\n\n    /**\n     * Returns, as a string, a list of parameters\n     * used on the client side\n     *\n     * @return string\n     */\n    public function getJsParamsCode()\n    {\n        $params = $this->getJsParams();\n        foreach ($params as $key => $value) {\n            $params[$key] = $key . ':\"' . PMA_escapeJsString($value) . '\"';\n        }\n        return 'PMA_commonParams.setAll({' . implode(',', $params) . '});';\n    }\n\n    /**\n     * Disables the rendering of the header\n     *\n     * @return void\n     */\n    public function disable()\n    {\n        $this->_isEnabled = false;\n    }\n\n    /**\n     * Set the ajax flag to indicate whether\n     * we are servicing an ajax request\n     *\n     * @param bool $isAjax Whether we are servicing an ajax request\n     *\n     * @return void\n     */\n    public function setAjax($isAjax)\n    {\n        $this->_isAjax = (boolean) $isAjax;\n        $this->_console->setAjax($isAjax);\n    }\n\n    /**\n     * Returns the Scripts object\n     *\n     * @return Scripts object\n     */\n    public function getScripts()\n    {\n        return $this->_scripts;\n    }\n\n    /**\n     * Returns the Menu object\n     *\n     * @return Menu object\n     */\n    public function getMenu()\n    {\n        return $this->_menu;\n    }\n\n    /**\n     * Setter for the ID attribute in the BODY tag\n     *\n     * @param string $id Value for the ID attribute\n     *\n     * @return void\n     */\n    public function setBodyId($id)\n    {\n        $this->_bodyId = htmlspecialchars($id);\n    }\n\n    /**\n     * Setter for the title of the page\n     *\n     * @param string $title New title\n     *\n     * @return void\n     */\n    public function setTitle($title)\n    {\n        $this->_title = htmlspecialchars($title);\n    }\n\n    /**\n     * Disables the display of the top menu\n     *\n     * @return void\n     */\n    public function disableMenuAndConsole()\n    {\n        $this->_menuEnabled = false;\n        $this->_console->disable();\n    }\n\n    /**\n     * Disables the display of the top menu\n     *\n     * @return void\n     */\n    public function disableWarnings()\n    {\n        $this->_warningsEnabled = false;\n    }\n\n    /**\n     * Turns on 'print view' mode\n     *\n     * @return void\n     */\n    public function enablePrintView()\n    {\n        $this->disableMenuAndConsole();\n        $this->setTitle(__('Print view') . ' - phpMyAdmin ' . PMA_VERSION);\n        $this->_isPrintView = true;\n    }\n\n    /**\n     * Generates the header\n     *\n     * @return string The header\n     */\n    public function getDisplay()\n    {\n        $retval = '';\n        if (! $this->_headerIsSent) {\n            if (! $this->_isAjax && $this->_isEnabled) {\n                $this->sendHttpHeaders();\n                $retval .= $this->_getHtmlStart();\n                $retval .= $this->_getMetaTags();\n                $retval .= $this->_getLinkTags();\n                $retval .= $this->getTitleTag();\n\n                // The user preferences have been merged at this point\n                // so we can conditionally add CodeMirror\n                if ($GLOBALS['cfg']['CodemirrorEnable']) {\n                    $this->_scripts->addFile('codemirror/lib/codemirror.js');\n                    $this->_scripts->addFile('codemirror/mode/sql/sql.js');\n                    $this->_scripts->addFile('codemirror/addon/runmode/runmode.js');\n                    $this->_scripts->addFile('codemirror/addon/hint/show-hint.js');\n                    $this->_scripts->addFile('codemirror/addon/hint/sql-hint.js');\n                    if ($GLOBALS['cfg']['LintEnable']) {\n                        $this->_scripts->addFile('codemirror/addon/lint/lint.js');\n                        $this->_scripts->addFile(\n                            'codemirror/addon/lint/sql-lint.js'\n                        );\n                    }\n                }\n                $this->_scripts->addCode(\n                    'ConsoleEnterExecutes='\n                    . ($GLOBALS['cfg']['ConsoleEnterExecutes'] ? 'true' : 'false')\n                );\n                $this->_scripts->addFiles($this->_console->getScripts());\n                if ($this->_userprefsOfferImport) {\n                    $this->_scripts->addFile('config.js');\n                }\n                $retval .= $this->_scripts->getDisplay();\n                $retval .= '<noscript>';\n                $retval .= '<style>html{display:block}</style>';\n                $retval .= '</noscript>';\n                $retval .= $this->_getBodyStart();\n                if ($this->_menuEnabled && $GLOBALS['server'] > 0) {\n                    $nav = new Navigation();\n                    $retval .= $nav->getDisplay();\n                }\n                // Include possible custom headers\n                if (file_exists(CUSTOM_HEADER_FILE)) {\n                    $retval .= '<div id=\"pma_header\">';\n                    ob_start();\n                    include CUSTOM_HEADER_FILE;\n                    $retval .= ob_get_contents();\n                    ob_end_clean();\n                    $retval .= '</div>';\n                }\n                // offer to load user preferences from localStorage\n                if ($this->_userprefsOfferImport) {\n                    include_once './libraries/user_preferences.lib.php';\n                    $retval .= PMA_userprefsAutoloadGetHeader();\n                }\n                // pass configuration for hint tooltip display\n                // (to be used by PMA_tooltip() in js/functions.js)\n                if (! $GLOBALS['cfg']['ShowHint']) {\n                    $retval .= '<span id=\"no_hint\" class=\"hide\"></span>';\n                }\n                $retval .= $this->_getWarnings();\n                if ($this->_menuEnabled && $GLOBALS['server'] > 0) {\n                    $retval .= $this->_menu->getDisplay();\n                    $retval .= '<span id=\"page_nav_icons\">';\n                    $retval .= '<span id=\"lock_page_icon\"></span>';\n                    $retval .= '<span id=\"page_settings_icon\">'\n                        . Util::getImage(\n                            's_cog.png',\n                            __('Page-related settings')\n                        )\n                        . '</span>';\n                    $retval .= sprintf(\n                        '<a id=\"goto_pagetop\" href=\"#\">%s</a>',\n                        Util::getImage(\n                            's_top.png',\n                            __('Click on the bar to scroll to top of page')\n                        )\n                    );\n                    $retval .= '</span>';\n                }\n                $retval .= $this->_console->getDisplay();\n                $retval .= '<div id=\"page_content\">';\n                $retval .= $this->getMessage();\n            }\n            if ($this->_isEnabled && empty($_REQUEST['recent_table'])) {\n                $retval .= $this->_addRecentTable(\n                    $GLOBALS['db'],\n                    $GLOBALS['table']\n                );\n            }\n        }\n        return $retval;\n    }\n\n    /**\n     * Returns the message to be displayed at the top of\n     * the page, including the executed SQL query, if any.\n     *\n     * @return string\n     */\n    public function getMessage()\n    {\n        $retval = '';\n        $message = '';\n        if (! empty($GLOBALS['message'])) {\n            $message = $GLOBALS['message'];\n            unset($GLOBALS['message']);\n        } else if (! empty($_REQUEST['message'])) {\n            $message = $_REQUEST['message'];\n        }\n        if (! empty($message)) {\n            if (isset($GLOBALS['buffer_message'])) {\n                $buffer_message = $GLOBALS['buffer_message'];\n            }\n            $retval .= Util::getMessage($message);\n            if (isset($buffer_message)) {\n                $GLOBALS['buffer_message'] = $buffer_message;\n            }\n        }\n        return $retval;\n    }\n\n    /**\n     * Sends out the HTTP headers\n     *\n     * @return void\n     */\n    public function sendHttpHeaders()\n    {\n        if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n            return;\n        }\n        $map_tile_urls = ' *.tile.openstreetmap.org';\n\n        /**\n         * Sends http headers\n         */\n        $GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';\n        if (!empty($GLOBALS['cfg']['CaptchaLoginPrivateKey'])\n            && !empty($GLOBALS['cfg']['CaptchaLoginPublicKey'])\n        ) {\n            $captcha_url\n                = ' https://apis.google.com https://www.google.com/recaptcha/'\n                . ' https://www.gstatic.com/recaptcha/ https://ssl.gstatic.com/ ';\n        } else {\n            $captcha_url = '';\n        }\n        /* Prevent against ClickJacking by disabling framing */\n        if (! $GLOBALS['cfg']['AllowThirdPartyFraming']) {\n            header(\n                'X-Frame-Options: DENY'\n            );\n        }\n        header(\n            \"Content-Security-Policy: default-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \"script-src 'self' 'unsafe-inline' 'unsafe-eval' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \";\"\n            . \"style-src 'self' 'unsafe-inline' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow']\n            . \";\"\n            . \"referrer no-referrer;\"\n            . \"img-src 'self' data: \"\n            . $GLOBALS['cfg']['CSPAllow']\n            . $map_tile_urls\n            . $captcha_url\n            . \";\"\n        );\n        header(\n            \"X-Content-Security-Policy: default-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \"options inline-script eval-script;\"\n            . \"referrer no-referrer;\"\n            . \"img-src 'self' data: \"\n            . $GLOBALS['cfg']['CSPAllow']\n            . $map_tile_urls\n            . $captcha_url\n            . \";\"\n        );\n        header(\n            \"X-WebKit-CSP: default-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow'] . ';'\n            . \"script-src 'self' \"\n            . $captcha_url\n            . $GLOBALS['cfg']['CSPAllow']\n            . \" 'unsafe-inline' 'unsafe-eval';\"\n            . \"referrer no-referrer;\"\n            . \"style-src 'self' 'unsafe-inline' \"\n            . $captcha_url\n            . ';'\n            . \"img-src 'self' data: \"\n            . $GLOBALS['cfg']['CSPAllow']\n            . $map_tile_urls\n            . $captcha_url\n            . \";\"\n        );\n        // Re-enable possible disabled XSS filters\n        // see https://www.owasp.org/index.php/List_of_useful_HTTP_headers\n        header(\n            'X-XSS-Protection: 1; mode=block'\n        );\n        // \"nosniff\", prevents Internet Explorer and Google Chrome from MIME-sniffing\n        // a response away from the declared content-type\n        // see https://www.owasp.org/index.php/List_of_useful_HTTP_headers\n        header(\n            'X-Content-Type-Options: nosniff'\n        );\n        // Adobe cross-domain-policies\n        // see http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html\n        header(\n            'X-Permitted-Cross-Domain-Policies: none'\n        );\n        PMA_noCacheHeader();\n        if (! defined('IS_TRANSFORMATION_WRAPPER')) {\n            // Define the charset to be used\n            header('Content-Type: text/html; charset=utf-8');\n        }\n        $this->_headerIsSent = true;\n    }\n\n    /**\n     * Returns the DOCTYPE and the start HTML tag\n     *\n     * @return string DOCTYPE and HTML tags\n     */\n    private function _getHtmlStart()\n    {\n        $lang = $GLOBALS['lang'];\n        $dir  = $GLOBALS['text_dir'];\n\n        $retval  = \"<!DOCTYPE HTML>\";\n        $retval .= \"<html lang='$lang' dir='$dir' class='\";\n        $retval .= mb_strtolower(PMA_USR_BROWSER_AGENT) . \" \";\n        $retval .= mb_strtolower(PMA_USR_BROWSER_AGENT)\n            . intval(PMA_USR_BROWSER_VER) . \"'>\";\n        $retval .= '<head>';\n\n        return $retval;\n    }\n\n    /**\n     * Returns the META tags\n     *\n     * @return string the META tags\n     */\n    private function _getMetaTags()\n    {\n        $retval  = '<meta charset=\"utf-8\" />';\n        $retval .= '<meta name=\"referrer\" content=\"none\" />';\n        $retval .= '<meta name=\"robots\" content=\"noindex,nofollow\" />';\n        $retval .= '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">';\n        if (! $GLOBALS['cfg']['AllowThirdPartyFraming']) {\n            $retval .= '<style id=\"cfs-style\">html{display: none;}</style>';\n        }\n        return $retval;\n    }\n\n    /**\n     * Returns the LINK tags for the favicon and the stylesheets\n     *\n     * @return string the LINK tags\n     */\n    private function _getLinkTags()\n    {\n        $retval = '<link rel=\"icon\" href=\"favicon.ico\" '\n            . 'type=\"image/x-icon\" />'\n            . '<link rel=\"shortcut icon\" href=\"favicon.ico\" '\n            . 'type=\"image/x-icon\" />';\n        // stylesheets\n        $basedir    = defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : '';\n        $theme_id   = $GLOBALS['PMA_Config']->getThemeUniqueValue();\n        $theme_path = $GLOBALS['pmaThemePath'];\n        $v          = self::getVersionParameter();\n\n        if ($this->_isPrintView) {\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'print.css?' . $v . '\" />';\n        } else {\n            // load jQuery's CSS prior to our theme's CSS, to let the theme\n            // override jQuery's CSS\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $theme_path . '/jquery/jquery-ui-1.11.4.css\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'js/codemirror/lib/codemirror.css?' . $v . '\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'js/codemirror/addon/hint/show-hint.css?' . $v . '\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'js/codemirror/addon/lint/lint.css?' . $v . '\" />';\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $basedir . 'phpmyadmin.css.php?'\n                . 'nocache=' . $theme_id . $GLOBALS['text_dir'] . '\" />';\n            // load Print view's CSS last, so that it overrides all other CSS while\n            // 'printing'\n            $retval .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'\n                . $theme_path . '/css/printview.css?' . $v . '\" media=\"print\" id=\"printcss\"/>';\n        }\n\n        return $retval;\n    }\n\n    /**\n     * Returns the TITLE tag\n     *\n     * @return string the TITLE tag\n     */\n    public function getTitleTag()\n    {\n        $retval  = \"<title>\";\n        $retval .= $this->_getPageTitle();\n        $retval .= \"</title>\";\n        return $retval;\n    }\n\n    /**\n     * If the page is missing the title, this function\n     * will set it to something reasonable\n     *\n     * @return string\n     */\n    private function _getPageTitle()\n    {\n        if (empty($this->_title)) {\n            if ($GLOBALS['server'] > 0) {\n                if (! empty($GLOBALS['table'])) {\n                    $temp_title = $GLOBALS['cfg']['TitleTable'];\n                } else if (! empty($GLOBALS['db'])) {\n                    $temp_title = $GLOBALS['cfg']['TitleDatabase'];\n                } elseif (! empty($GLOBALS['cfg']['Server']['host'])) {\n                    $temp_title = $GLOBALS['cfg']['TitleServer'];\n                } else {\n                    $temp_title = $GLOBALS['cfg']['TitleDefault'];\n                }\n                $this->_title = htmlspecialchars(\n                    Util::expandUserString($temp_title)\n                );\n            } else {\n                $this->_title = 'phpMyAdmin';\n            }\n        }\n        return $this->_title;\n    }\n\n    /**\n     * Returns the close tag to the HEAD\n     * and the start tag for the BODY\n     *\n     * @return string HEAD and BODY tags\n     */\n    private function _getBodyStart()\n    {\n        $retval = \"</head><body\";\n        if (! empty($this->_bodyId)) {\n            $retval .= \" id='\" . $this->_bodyId . \"'\";\n        }\n        $retval .= \">\";\n        return $retval;\n    }\n\n    /**\n     * Returns some warnings to be displayed at the top of the page\n     *\n     * @return string The warnings\n     */\n    private function _getWarnings()\n    {\n        $retval = '';\n        if ($this->_warningsEnabled) {\n            $retval .= \"<noscript>\";\n            $retval .= Message::error(\n                __(\"Javascript must be enabled past this point!\")\n            )->getDisplay();\n            $retval .= \"</noscript>\";\n        }\n        return $retval;\n    }\n\n    /**\n     * Add recently used table and reload the navigation.\n     *\n     * @param string $db    Database name where the table is located.\n     * @param string $table The table name\n     *\n     * @return string\n     */\n    private function _addRecentTable($db, $table)\n    {\n        $retval = '';\n        if ($this->_menuEnabled\n            && mb_strlen($table)\n            && $GLOBALS['cfg']['NumRecentTables'] > 0\n        ) {\n            $tmp_result = RecentFavoriteTable::getInstance('recent')\n                              ->add($db, $table);\n            if ($tmp_result === true) {\n                $retval = RecentFavoriteTable::getHtmlUpdateRecentTables();\n            } else {\n                $error  = $tmp_result;\n                $retval = $error->getDisplay();\n            }\n        }\n        return $retval;\n    }\n\n    /**\n     * Returns the phpMyAdmin version to be appended to the url to avoid caching\n     * between versions\n     *\n     * @return string urlenocded pma version as a parameter\n     */\n    public static function getVersionParameter()\n    {\n        return \"v=\" . urlencode(PMA_VERSION);\n    }\n}\n\n"], "filenames": ["libraries/Header.php"], "buggy_code_start_loc": [552], "buggy_code_end_loc": [638], "fixing_code_start_loc": [553], "fixing_code_end_loc": [643], "type": "CWE-200", "message": "The Transformation implementation in phpMyAdmin 4.0.x before 4.0.10.16, 4.4.x before 4.4.15.7, and 4.6.x before 4.6.3 does not use the no-referrer Content Security Policy (CSP) protection mechanism, which makes it easier for remote attackers to conduct CSRF attacks by reading an authentication token in a Referer header, related to libraries/Header.php.", "other": {"cve": {"id": "CVE-2016-5739", "sourceIdentifier": "cve@mitre.org", "published": "2016-07-03T01:59:25.970", "lastModified": "2018-10-30T16:27:35.843", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The Transformation implementation in phpMyAdmin 4.0.x before 4.0.10.16, 4.4.x before 4.4.15.7, and 4.6.x before 4.6.3 does not use the no-referrer Content Security Policy (CSP) protection mechanism, which makes it easier for remote attackers to conduct CSRF attacks by reading an authentication token in a Referer header, related to libraries/Header.php."}, {"lang": "es", "value": "La implementaci\u00f3n de Transformation en phpMyAdmin 4.0.x en versiones anteriores a 4.0.10.16, 4.4.x en versiones anteriores a 4.4.15.7 y 4.6.x en versiones anteriores a 4.6.3 no usa el mecanismo de protecci\u00f3n no-referrer Content Security Policy (CSP), lo que facilita a atacantes remotos llevar a cabo ataques CSRF leyendo un token autenticado en una cabecera Referer, relacionado con libraries/Header.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.4:*:*:*:*:*:*:*", "matchCriteriaId": "4BED20D9-C571-4BC5-9A54-450A364C6E43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.5:*:*:*:*:*:*:*", "matchCriteriaId": "2A2B646D-DDFC-4CB2-B7F4-0C33AF18D14F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.6:*:*:*:*:*:*:*", "matchCriteriaId": "9CBF68B2-2BCF-4EEB-8A7C-D83DCAF1AFB4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "C641F362-D37D-47CB-BE6C-36E5F116F844"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "A0EA8819-70F8-48DC-8667-6CF25E7D9C53"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "DD2796DA-3E74-4765-90D1-783849C7A44C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "4024DA77-BFE4-48C6-A2AF-46003071BDE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "85631B69-7060-42D1-AE24-466BA10EB390"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "E62EDC79-47AA-4CED-AB7F-1E4D158EB653"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F06DC95-76B1-4E24-A55F-1358A25ED0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CA76CB4-6167-446A-8D4F-6D5B38046334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "B8D28655-7F37-474D-A4E2-772AF24B94E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "1FA1951E-BD85-42BF-BF7F-79A14D165914"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "0D08BEE8-5ACF-438D-9F06-86C6227C9A5F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "58DD0910-DBBA-4858-B9B1-FA93D08323D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "50DA8EBE-52AA-45A5-A5FB-75AF84E415E4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "DC8D93A3-8997-4EB9-A411-74B296D1341F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "6E5A81B2-E16F-4AE2-9691-92D3E8A25CCB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "0245AF2D-F856-4CAA-A830-36D43026D1E4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "00BD9E52-A6BB-48BB-9FEE-D0272AD9B6DA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "C69E253E-157D-45BA-A977-079A49F74A72"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "6325E2AE-BB86-4953-AA9E-0433C00B096E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "3C54B828-8B23-4C62-907E-8EE7E757B721"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.2:*:*:*:*:*:*:*", "matchCriteriaId": "02DD18C8-172B-41CD-87DD-58BDEC0D9418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "10666E30-D98A-47A9-881A-B281066F0EC8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.4:*:*:*:*:*:*:*", "matchCriteriaId": "3993826B-CA66-4BC2-8E1B-06CF9230B214"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "14928F51-761E-4FCA-B13C-A11530C7FC46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "DB761644-20F5-4E0D-B301-7809EAECA813"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "896439D0-6C98-44A6-8C9D-0D57D57782D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "978B828C-1FCB-4386-B685-5BEE5A8A500C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "51A3261B-23BE-42D7-8A52-AE2E8C274A3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "F0B7EA51-27EC-4884-8D60-FB9477D2B91A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "D6C9F2CC-778B-4604-B463-7A1D3FB8B9C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "4B20C44D-0EF1-48F2-B0AA-C8FF0BD9E252"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.13:*:*:*:*:*:*:*", "matchCriteriaId": "40F85FEC-427E-487D-997E-7EE359475876"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.14:*:*:*:*:*:*:*", "matchCriteriaId": "2C825978-7E00-4C20-A806-0B968AA589AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.15:*:*:*:*:*:*:*", "matchCriteriaId": "34986C36-1C93-4DA8-A4C2-0CB8B24BAD3E"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00113.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00114.html", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2016/dsa-3627", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/91389", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/1e5716cb96d46efc305381ae0da08e73fe340f05", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/2f4950828ec241e8cbdcf13090c2582a6fa620cb", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://security.gentoo.org/glsa/201701-32", "source": "cve@mitre.org"}, {"url": "https://www.phpmyadmin.net/security/PMASA-2016-28/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/1e5716cb96d46efc305381ae0da08e73fe340f05"}}