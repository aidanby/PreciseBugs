{"buggy_code": ["<?php\n# *** LICENSE ***\n# This file is part of BlogoText.\n# https://github.com/BlogoText/blogotext/\n#\n# 2006      Frederic Nassar.\n# 2010-2016 Timo Van Neerden.\n# 2016-.... Micka\u00ebl Schoentgen and the community.\n#\n# BlogoText is free software.\n# You can redistribute it under the terms of the MIT / X11 Licence.\n# *** LICENSE ***\n\n/**\n *\n */\nfunction titre_url($title)\n{\n    return trim(diacritique($title), '-');\n}\n\n/**\n *\n */\nfunction diacritique($texte)\n{\n    $texte = strip_tags($texte);\n    $texte = html_entity_decode($texte, ENT_QUOTES, 'UTF-8'); // &eacute => \u00e9 ; \u00e9 => \u00e9 ; (uniformize)\n    $texte = htmlentities($texte, ENT_QUOTES, 'UTF-8'); // \u00e9 => &eacute;\n    $texte = preg_replace('#&(.)(acute|grave|circ|uml|cedil|tilde|ring|slash|caron);#', '$1', $texte); // &eacute => e\n    $texte = preg_replace('#(\\t|\\n|\\r)#', ' ', $texte); // \\n, \\r => spaces\n    $texte = preg_replace('#&([a-z]{2})lig;#i', '$1', $texte); // \u0153 => oe ; \u00e6 => ae\n    $texte = preg_replace('#&[\\w\\#]*;#U', '', $texte); // remove other entities like &quote, &nbsp.\n    $texte = preg_replace('#[^\\w -]#U', '', $texte); // keep only ciffers, letters, spaces, hyphens.\n    $texte = strtolower($texte); // to lower case\n    $texte = preg_replace('#[ ]+#', '-', $texte); // spaces => hyphens\n    return $texte;\n}\n\n/**\n *\n */\nfunction parse_texte_paragraphs($texte)\n{\n    // trims empty lines at begining and end of raw texte\n    $texte_formate = preg_replace('#^(\\r|\\n|<br>|<br/>|<br />){0,}(.*?)(\\r|<br>|<br/>|<br />){0,}$#s', '$2', $texte);\n    // trick to make <hr/> elements be recognized by parser\n    $texte_formate = preg_replace('#<hr */?>#is', '<hr></hr>', $texte);\n    $block_elements = 'address|article|aside|audio|blockquote|canvas|dd|li|div|[oud]l|fieldset|fig(caption|ure)|footer|form|h[1-6]|header|hgroup|hr|main|nav|noscript|output|p|pre|prebtcode|section|table|thead|tbody|tfoot|tr|td|video';\n\n    $texte_final = '';\n    $finished = false;\n    // if text begins with block-element, remove it and goes on\n    while ($finished === false) {\n        $matches = array();\n        // we have a block element\n        if (preg_match('#^<('.$block_elements.') ?.*?>(.*?)</(\\1)>#s', $texte_formate, $matches)) {\n            // extract the block element\n            $texte_retire = $matches[0];\n            // parses inner text for nl2br()\n            $texte_nl2br = \"\\n\".nl2br($texte_retire).\"\\n\";\n            // removes <br/> that follow a block (ie: <block><br> \u2192 <block>) and add it to the final text\n            $texte_final .= preg_replace('#(</?('.$block_elements.') ?.*?>)(<br ?/?>)(\\n?\\r?)#s', '$1$3$5', $texte_nl2br);\n            // saves the remaining text\n            $texte_restant = preg_replace('#^<('.$block_elements.') ?.*?>(.*?)</(\\1)>#s', '', $texte_formate, 1);\n            // again, removes empty lines+spaces at begin or end TODO : save the lines to make multiple \"<br/>\" spaces\u00a0(??)\n            $texte_restant = preg_replace('#^(\\r|\\n|<br>|<br/>|<br />){0,}(.*?)(\\r|<br>|<br/>|<br />){0,}$#s', '$2', $texte_restant);\n            // if no matches for block elements, we are finished\n            $finished = (strlen($texte_retire) === 0) ? true : false;\n        } else {\n            // we have an inline element (or text)\n            // grep the text until newline OR new block element do AND set it in <p></p>\n            $texte_restant = preg_replace('#^(.*?)(\\r\\r|<('.$block_elements.') ?.*?>)#s', '$2', $texte_formate, 1);\n            // saves the text we just \"greped\"\n            $texte_retire = trim(substr($texte_formate, 0, -strlen($texte_restant)));\n            // IF greped text is empty: no text or no further block element (or new line)\n            if (strlen($texte_retire) === 0) {\n                // remaining text is NOT empty : keep it in a <p></p>\n                if (strlen($texte_restant) !== 0) {\n                    $texte_final .= \"\\n\".'<p>'.nl2br($texte_restant).'</p>'.\"\\n\";\n                }\n                // since the entire remaining text is in a new <p></p>, we are finished\n                $finished = true;\n\n            // FI IF greped text is not empty: keep it in a new <p></p>.\n            } else {\n                $texte_final .= \"\\n\".'<p>'.nl2br($texte_retire).'</p>'.\"\\n\";\n            }\n        }\n\n        //  again, removes empty lines+spaces at begin or end\n        $texte_restant = preg_replace('#^(\\r|\\n|<br>|<br/>|<br />){0,}(.*?)(\\r|<br>|<br/>|<br />){0,}$#s', '$2', $texte_restant);\n        // loops on the text, to find the next element.\n        $texte_formate = $texte_restant;\n    }\n    // retransforms <hr/>\n    $texte_final = preg_replace('#<hr></hr>#', '<hr/>', $texte_final);\n    return $texte_final;\n}\n\n/**\n *\n */\nfunction parse_texte_code($texte, $code_before)\n{\n    if ($code_before) {\n        preg_match_all('#<prebtcode( data-language=\"\\w+\")?></prebtcode>#s', $texte, $code_after, PREG_SET_ORDER);\n        foreach ($code_before as $i => $code) {\n            $pos = strpos($texte, $code_after[$i][0]);\n            if ($pos !== false) {\n                 $texte = substr_replace($texte, '<pre'.((isset($code_after[$i][1])) ? $code_after[$i][1] : '').'><code>'.htmlspecialchars(htmlspecialchars_decode($code_before[$i][3])).'</code></pre>', $pos, strlen($code_after[$i][0]));\n            }\n        }\n    }\n    return $texte;\n}\n\n/**\n * used by markup()\n * convert a BBCode link to HTML <a>\n * with a check on URL\n *\n * @params array $matches, array from preg_replace_callback\n * @return string\n */\nfunction markup_clean_href($matches)\n{\n    // var_dump($matches);\n    $allowed = array('http://', 'https://', 'ftp://');\n    // if not a valid url, return the string\n    if ((\n            !filter_var($matches['2'], FILTER_VALIDATE_URL)\n         || !preg_match('#^('.join('|', $allowed).')#i', $matches['2'])\n        )\n     && !preg_match('/^#[\\w-_]+$/i', $matches['2']) // allowing [text|#look-at_this]\n    ) {\n        return $matches['0'];\n    }\n    // handle different case\n    if (empty(trim($matches['1']))) {\n        return $matches['1'].'<a href=\"'.$matches['2'].'\">'.$matches['2'].'</a>';\n    } else {\n        return '<a href=\"'.$matches['2'].'\">'.$matches['1'].'</a>';\n    }\n}\n\n/**\n * convert text with BBCode (more or less BBCode) to HTML\n *\n * @params string $text\n * @return string\n */\nfunction markup($text)\n{\n    $text = preg_replace('#\\[([^|]+)\\|(\\s*javascript.*)\\]#i', '$1', $text);\n    $text = preg_replace(\"/(\\r\\n|\\r\\n\\r|\\n|\\n\\r|\\r)/\", \"\\r\", $text);\n    $tofind = array(\n        // /* regex URL     */ '#([^\"\\[\\]|])((http|ftp)s?://([^\"\\'\\[\\]<>\\s\\)\\(]+))#i',\n        // /* a href        */ '#\\[([^[]+)\\|([^[]+)\\]#',\n        /* strong        */ '#\\[b\\](.*?)\\[/b\\]#s',\n        /* italic        */ '#\\[i\\](.*?)\\[/i\\]#s',\n        /* strike        */ '#\\[s\\](.*?)\\[/s\\]#s',\n        /* underline     */ '#\\[u\\](.*?)\\[/u\\]#s',\n        /* quote         */ '#\\[quote\\](.*?)\\[/quote\\]#s',\n        /* code          */ '#\\[code\\]\\[/code\\]#s',\n        /* code=language */ '#\\[code=(\\w+)\\]\\[/code\\]#s',\n    );\n    $toreplace = array(\n        // /* regex URL     */ '$1<a href=\"$2\">$2</a>',\n        // /* a href        */ '<a href=\"$2\">$1</a>',\n        /* strong        */ '<b>$1</b>',\n        /* italic        */ '<em>$1</em>',\n        /* strike        */ '<del>$1</del>',\n        /* underline     */ '<u>$1</u>',\n        /* quote         */ '<blockquote>$1</blockquote>'.\"\\r\",\n        /* code          */ '<prebtcode></prebtcode>'.\"\\r\",\n        /* code=language */ '<prebtcode data-language=\"$1\"></prebtcode>'.\"\\r\",\n    );\n\n    preg_match_all('#\\[code(=(\\w+))?\\](.*?)\\[/code\\]#s', $text, $code_contents, PREG_SET_ORDER);\n    $texte_formate = preg_replace('#\\[code(=(\\w+))?\\](.*?)\\[/code\\]#s', '[code$1][/code]', $text);\n    $texte_formate = preg_replace($tofind, $toreplace, $texte_formate);\n    $texte_formate = preg_replace_callback('#([^\"\\[\\]|])((http|ftp)s?://([^\"\\'\\[\\]<>\\s\\)\\(]+))#i', 'markup_clean_href', $texte_formate);\n    $texte_formate = preg_replace_callback('#\\[([^[]+)\\|([^[]+)\\]#', 'markup_clean_href', $texte_formate);\n    $texte_formate = parse_texte_paragraphs($texte_formate);\n    $texte_formate = parse_texte_code($texte_formate, $code_contents);\n\n    return $texte_formate;\n}\n\n/**\n *\n */\nfunction date_formate($id, $format_force = '')\n{\n    $retour = '';\n    $date = decode_id($id);\n        $jour_l = jour_en_lettres($date['jour'], $date['mois'], $date['annee']);\n        $mois_l = mois_en_lettres($date['mois']);\n        $format = array (\n            $date['jour'].'/'.$date['mois'].'/'.$date['annee'],          // 14/01/1983\n            $date['mois'].'/'.$date['jour'].'/'.$date['annee'],          // 01/14/1983\n            $date['jour'].' '.$mois_l.' '.$date['annee'],                // 14 janvier 1983\n            $jour_l.' '.$date['jour'].' '.$mois_l.' '.$date['annee'],    // vendredi 14 janvier 1983\n            $jour_l.' '.$date['jour'].' '.$mois_l,                       // vendredi 14 janvier\n            $mois_l.' '.$date['jour'].', '.$date['annee'],               // janvier 14, 1983\n            $jour_l.', '.$mois_l.' '.$date['jour'].', '.$date['annee'],  // vendredi, janvier 14, 1983\n            $date['annee'].'-'.$date['mois'].'-'.$date['jour'],          // 1983-01-14\n            substr($jour_l, 0, 3).'. '.$date['jour'].' '.$mois_l,        // ven. 14 janvier\n        );\n\n    if ($format_force != '') {\n        $retour = $format[$format_force];\n    } else {\n        $retour = $format[$GLOBALS['format_date']];\n    }\n    return ucfirst($retour);\n}\n\n/**\n *\n */\nfunction heure_formate($id)\n{\n    $date = decode_id($id);\n    $timestamp = mktime($date['heure'], $date['minutes'], $date['secondes'], $date['mois'], $date['jour'], $date['annee']);\n    $format = array (\n        'H:i:s',    // 23:56:04\n        'H:i',      // 23:56\n        'h:i:s A',  // 11:56:04 PM\n        'h:i A',    // 11:56 PM\n    );\n    return date($format[$GLOBALS['format_heure']], $timestamp);\n}\n\n/**\n *\n */\nfunction date_formate_iso($id)\n{\n    $date = decode_id($id);\n    $timestamp = mktime($date['heure'], $date['minutes'], $date['secondes'], $date['mois'], $date['jour'], $date['annee']);\n    $date_iso = date('c', $timestamp);\n    return $date_iso;\n}\n\n/**\n *\n */\nfunction en_lettres($captchavalue)\n{\n    return $GLOBALS['lang'][strval($captchavalue)];\n}\n\n/**\n *\n */\nfunction jour_en_lettres($jour, $mois, $annee)\n{\n    $date = date('w', mktime(0, 0, 0, $mois, $jour, $annee));\n    switch ($date) {\n        case 0:\n            return $GLOBALS['lang']['dimanche'];\n        break;\n        case 1:\n            return $GLOBALS['lang']['lundi'];\n        break;\n        case 2:\n            return $GLOBALS['lang']['mardi'];\n        break;\n        case 3:\n            return $GLOBALS['lang']['mercredi'];\n        break;\n        case 4:\n            return $GLOBALS['lang']['jeudi'];\n        break;\n        case 5:\n            return $GLOBALS['lang']['vendredi'];\n        break;\n        case 6:\n            return $GLOBALS['lang']['samedi'];\n        break;\n    }\n    return $nom;\n}\n\n/**\n *\n */\nfunction mois_en_lettres($numero, $abbrv = 0)\n{\n    if ($abbrv == 1) {\n        switch ($numero) {\n            case '01':\n                return $GLOBALS['lang']['janv.'];\n            break;\n            case '02':\n                return $GLOBALS['lang']['fev.'];\n            break;\n            case '03':\n                return $GLOBALS['lang']['mars.'];\n            break;\n            case '04':\n                return $GLOBALS['lang']['avr.'];\n            break;\n            case '05':\n                return $GLOBALS['lang']['mai.'];\n            break;\n            case '06':\n                return $GLOBALS['lang']['juin.'];\n            break;\n            case '07':\n                return $GLOBALS['lang']['juil.'];\n            break;\n            case '08':\n                return $GLOBALS['lang']['aout.'];\n            break;\n            case '09':\n                return $GLOBALS['lang']['sept.'];\n            break;\n            case '10':\n                return $GLOBALS['lang']['oct.'];\n            break;\n            case '11':\n                return $GLOBALS['lang']['nov.'];\n            break;\n            case '12':\n                return $GLOBALS['lang']['dec.'];\n            break;\n        }\n    } else {\n        switch ($numero) {\n            case '01':\n                return $GLOBALS['lang']['janvier'];\n            break;\n            case '02':\n                return $GLOBALS['lang']['fevrier'];\n            break;\n            case '03':\n                return $GLOBALS['lang']['mars'];\n            break;\n            case '04':\n                return $GLOBALS['lang']['avril'];\n            break;\n            case '05':\n                return $GLOBALS['lang']['mai'];\n            break;\n            case '06':\n                return $GLOBALS['lang']['juin'];\n            break;\n            case '07':\n                return $GLOBALS['lang']['juillet'];\n            break;\n            case '08':\n                return $GLOBALS['lang']['aout'];\n            break;\n            case '09':\n                return $GLOBALS['lang']['septembre'];\n            break;\n            case '10':\n                return $GLOBALS['lang']['octobre'];\n            break;\n            case '11':\n                return $GLOBALS['lang']['novembre'];\n            break;\n            case '12':\n                return $GLOBALS['lang']['decembre'];\n            break;\n        }\n    }\n}\n\n/**\n *\n */\nfunction nombre_objets($nb, $type)\n{\n    switch ($nb) {\n        case 0:\n            return $GLOBALS['lang']['note_no_'.$type];\n        case 1:\n            return $nb.' '.$GLOBALS['lang']['label_'.$type];\n        default:\n            return $nb.' '.$GLOBALS['lang']['label_'.$type.'s'];\n    }\n}\n"], "fixing_code": ["<?php\n# *** LICENSE ***\n# This file is part of BlogoText.\n# https://github.com/BlogoText/blogotext/\n#\n# 2006      Frederic Nassar.\n# 2010-2016 Timo Van Neerden.\n# 2016-.... Micka\u00ebl Schoentgen and the community.\n#\n# BlogoText is free software.\n# You can redistribute it under the terms of the MIT / X11 Licence.\n# *** LICENSE ***\n\n/**\n *\n */\nfunction titre_url($title)\n{\n    return trim(diacritique($title), '-');\n}\n\n/**\n *\n */\nfunction diacritique($texte)\n{\n    $texte = strip_tags($texte);\n    $texte = html_entity_decode($texte, ENT_QUOTES, 'UTF-8'); // &eacute => \u00e9 ; \u00e9 => \u00e9 ; (uniformize)\n    $texte = htmlentities($texte, ENT_QUOTES, 'UTF-8'); // \u00e9 => &eacute;\n    $texte = preg_replace('#&(.)(acute|grave|circ|uml|cedil|tilde|ring|slash|caron);#', '$1', $texte); // &eacute => e\n    $texte = preg_replace('#(\\t|\\n|\\r)#', ' ', $texte); // \\n, \\r => spaces\n    $texte = preg_replace('#&([a-z]{2})lig;#i', '$1', $texte); // \u0153 => oe ; \u00e6 => ae\n    $texte = preg_replace('#&[\\w\\#]*;#U', '', $texte); // remove other entities like &quote, &nbsp.\n    $texte = preg_replace('#[^\\w -]#U', '', $texte); // keep only ciffers, letters, spaces, hyphens.\n    $texte = strtolower($texte); // to lower case\n    $texte = preg_replace('#[ ]+#', '-', $texte); // spaces => hyphens\n    return $texte;\n}\n\n/**\n *\n */\nfunction parse_texte_paragraphs($texte)\n{\n    // trims empty lines at begining and end of raw texte\n    $texte_formate = preg_replace('#^(\\r|\\n|<br>|<br/>|<br />){0,}(.*?)(\\r|<br>|<br/>|<br />){0,}$#s', '$2', $texte);\n    // trick to make <hr/> elements be recognized by parser\n    $texte_formate = preg_replace('#<hr */?>#is', '<hr></hr>', $texte);\n    $block_elements = 'address|article|aside|audio|blockquote|canvas|dd|li|div|[oud]l|fieldset|fig(caption|ure)|footer|form|h[1-6]|header|hgroup|hr|main|nav|noscript|output|p|pre|prebtcode|section|table|thead|tbody|tfoot|tr|td|video';\n\n    $texte_final = '';\n    $finished = false;\n    // if text begins with block-element, remove it and goes on\n    while ($finished === false) {\n        $matches = array();\n        // we have a block element\n        if (preg_match('#^<('.$block_elements.') ?.*?>(.*?)</(\\1)>#s', $texte_formate, $matches)) {\n            // extract the block element\n            $texte_retire = $matches[0];\n            // parses inner text for nl2br()\n            $texte_nl2br = \"\\n\".nl2br($texte_retire).\"\\n\";\n            // removes <br/> that follow a block (ie: <block><br> \u2192 <block>) and add it to the final text\n            $texte_final .= preg_replace('#(</?('.$block_elements.') ?.*?>)(<br ?/?>)(\\n?\\r?)#s', '$1$3$5', $texte_nl2br);\n            // saves the remaining text\n            $texte_restant = preg_replace('#^<('.$block_elements.') ?.*?>(.*?)</(\\1)>#s', '', $texte_formate, 1);\n            // again, removes empty lines+spaces at begin or end TODO : save the lines to make multiple \"<br/>\" spaces\u00a0(??)\n            $texte_restant = preg_replace('#^(\\r|\\n|<br>|<br/>|<br />){0,}(.*?)(\\r|<br>|<br/>|<br />){0,}$#s', '$2', $texte_restant);\n            // if no matches for block elements, we are finished\n            $finished = (strlen($texte_retire) === 0) ? true : false;\n        } else {\n            // we have an inline element (or text)\n            // grep the text until newline OR new block element do AND set it in <p></p>\n            $texte_restant = preg_replace('#^(.*?)(\\r\\r|<('.$block_elements.') ?.*?>)#s', '$2', $texte_formate, 1);\n            // saves the text we just \"greped\"\n            $texte_retire = trim(substr($texte_formate, 0, -strlen($texte_restant)));\n            // IF greped text is empty: no text or no further block element (or new line)\n            if (strlen($texte_retire) === 0) {\n                // remaining text is NOT empty : keep it in a <p></p>\n                if (strlen($texte_restant) !== 0) {\n                    $texte_final .= \"\\n\".'<p>'.nl2br($texte_restant).'</p>'.\"\\n\";\n                }\n                // since the entire remaining text is in a new <p></p>, we are finished\n                $finished = true;\n\n            // FI IF greped text is not empty: keep it in a new <p></p>.\n            } else {\n                $texte_final .= \"\\n\".'<p>'.nl2br($texte_retire).'</p>'.\"\\n\";\n            }\n        }\n\n        //  again, removes empty lines+spaces at begin or end\n        $texte_restant = preg_replace('#^(\\r|\\n|<br>|<br/>|<br />){0,}(.*?)(\\r|<br>|<br/>|<br />){0,}$#s', '$2', $texte_restant);\n        // loops on the text, to find the next element.\n        $texte_formate = $texte_restant;\n    }\n    // retransforms <hr/>\n    $texte_final = preg_replace('#<hr></hr>#', '<hr/>', $texte_final);\n    return $texte_final;\n}\n\n/**\n *\n */\nfunction parse_texte_code($texte, $code_before)\n{\n    if ($code_before) {\n        preg_match_all('#<prebtcode( data-language=\"\\w+\")?></prebtcode>#s', $texte, $code_after, PREG_SET_ORDER);\n        foreach ($code_before as $i => $code) {\n            $pos = strpos($texte, $code_after[$i][0]);\n            if ($pos !== false) {\n                 $texte = substr_replace($texte, '<pre'.((isset($code_after[$i][1])) ? $code_after[$i][1] : '').'><code>'.htmlspecialchars(htmlspecialchars_decode($code_before[$i][3])).'</code></pre>', $pos, strlen($code_after[$i][0]));\n            }\n        }\n    }\n    return $texte;\n}\n\n/**\n * used by markup()\n * convert a BBCode link to HTML <a>\n * with a check on URL\n *\n * @params array $matches, array from preg_replace_callback\n * @return string\n *\n * dirty fix, to do : review the htmlspecialchars policy before this function\n */\nfunction markup_clean_href($matches)\n{\n    $allowed = array('http://', 'https://', 'ftp://');\n\n    // remove the filter, currentlty doesn't work without working/reformating the submitted url, idn & others stuff...\n    // !filter_var($matches['2'], FILTER_VALIDATE_URL) || \n\n    // encode < > \", ' allowed in url\n    $matches['2'] = htmlspecialchars(htmlspecialchars_decode($matches['2']), ENT_COMPAT);\n\n    // if not a valid url, return the string\n    if (!preg_match('#^('.join('|', $allowed).')#i', $matches['2'])\n     && !preg_match('/^#[\\w-_]+$/i', $matches['2']) // allowing [text|#look-at_this]\n    ) {\n        return $matches['0'];\n    }\n    // handle different case\n    if (empty(trim($matches['1']))) {\n        return $matches['1'].'<a href=\"'.$matches['2'].'\">'.$matches['2'].'</a>';\n    } else {\n        return '<a href=\"'.$matches['2'].'\">'.$matches['1'].'</a>';\n    }\n}\n\n/**\n * convert text with BBCode (more or less BBCode) to HTML\n *\n * @params string $text\n * @return string\n */\nfunction markup($text)\n{\n    $text = preg_replace('#\\[([^|]+)\\|(\\s*javascript.*)\\]#i', '$1', $text);\n    $text = preg_replace(\"/(\\r\\n|\\r\\n\\r|\\n|\\n\\r|\\r)/\", \"\\r\", $text);\n    $tofind = array(\n        // /* regex URL     */ '#([^\"\\[\\]|])((http|ftp)s?://([^\"\\'\\[\\]<>\\s\\)\\(]+))#i',\n        // /* a href        */ '#\\[([^[]+)\\|([^[]+)\\]#',\n        /* strong        */ '#\\[b\\](.*?)\\[/b\\]#s',\n        /* italic        */ '#\\[i\\](.*?)\\[/i\\]#s',\n        /* strike        */ '#\\[s\\](.*?)\\[/s\\]#s',\n        /* underline     */ '#\\[u\\](.*?)\\[/u\\]#s',\n        /* quote         */ '#\\[quote\\](.*?)\\[/quote\\]#s',\n        /* code          */ '#\\[code\\]\\[/code\\]#s',\n        /* code=language */ '#\\[code=(\\w+)\\]\\[/code\\]#s',\n    );\n    $toreplace = array(\n        // /* regex URL     */ '$1<a href=\"$2\">$2</a>',\n        // /* a href        */ '<a href=\"$2\">$1</a>',\n        /* strong        */ '<b>$1</b>',\n        /* italic        */ '<em>$1</em>',\n        /* strike        */ '<del>$1</del>',\n        /* underline     */ '<u>$1</u>',\n        /* quote         */ '<blockquote>$1</blockquote>'.\"\\r\",\n        /* code          */ '<prebtcode></prebtcode>'.\"\\r\",\n        /* code=language */ '<prebtcode data-language=\"$1\"></prebtcode>'.\"\\r\",\n    );\n\n    preg_match_all('#\\[code(=(\\w+))?\\](.*?)\\[/code\\]#s', $text, $code_contents, PREG_SET_ORDER);\n    $texte_formate = preg_replace('#\\[code(=(\\w+))?\\](.*?)\\[/code\\]#s', '[code$1][/code]', $text);\n    $texte_formate = preg_replace($tofind, $toreplace, $texte_formate);\n    $texte_formate = preg_replace_callback('#([^\"\\[\\]|])((http|ftp)s?://([^\"\\'\\[\\]<>\\s\\)\\(]+))#i', 'markup_clean_href', $texte_formate);\n    $texte_formate = preg_replace_callback('#\\[([^[]+)\\|([^[]+)\\]#', 'markup_clean_href', $texte_formate);\n    $texte_formate = parse_texte_paragraphs($texte_formate);\n    $texte_formate = parse_texte_code($texte_formate, $code_contents);\n\n    return $texte_formate;\n}\n\n/**\n *\n */\nfunction date_formate($id, $format_force = '')\n{\n    $retour = '';\n    $date = decode_id($id);\n        $jour_l = jour_en_lettres($date['jour'], $date['mois'], $date['annee']);\n        $mois_l = mois_en_lettres($date['mois']);\n        $format = array (\n            $date['jour'].'/'.$date['mois'].'/'.$date['annee'],          // 14/01/1983\n            $date['mois'].'/'.$date['jour'].'/'.$date['annee'],          // 01/14/1983\n            $date['jour'].' '.$mois_l.' '.$date['annee'],                // 14 janvier 1983\n            $jour_l.' '.$date['jour'].' '.$mois_l.' '.$date['annee'],    // vendredi 14 janvier 1983\n            $jour_l.' '.$date['jour'].' '.$mois_l,                       // vendredi 14 janvier\n            $mois_l.' '.$date['jour'].', '.$date['annee'],               // janvier 14, 1983\n            $jour_l.', '.$mois_l.' '.$date['jour'].', '.$date['annee'],  // vendredi, janvier 14, 1983\n            $date['annee'].'-'.$date['mois'].'-'.$date['jour'],          // 1983-01-14\n            substr($jour_l, 0, 3).'. '.$date['jour'].' '.$mois_l,        // ven. 14 janvier\n        );\n\n    if ($format_force != '') {\n        $retour = $format[$format_force];\n    } else {\n        $retour = $format[$GLOBALS['format_date']];\n    }\n    return ucfirst($retour);\n}\n\n/**\n *\n */\nfunction heure_formate($id)\n{\n    $date = decode_id($id);\n    $timestamp = mktime($date['heure'], $date['minutes'], $date['secondes'], $date['mois'], $date['jour'], $date['annee']);\n    $format = array (\n        'H:i:s',    // 23:56:04\n        'H:i',      // 23:56\n        'h:i:s A',  // 11:56:04 PM\n        'h:i A',    // 11:56 PM\n    );\n    return date($format[$GLOBALS['format_heure']], $timestamp);\n}\n\n/**\n *\n */\nfunction date_formate_iso($id)\n{\n    $date = decode_id($id);\n    $timestamp = mktime($date['heure'], $date['minutes'], $date['secondes'], $date['mois'], $date['jour'], $date['annee']);\n    $date_iso = date('c', $timestamp);\n    return $date_iso;\n}\n\n/**\n *\n */\nfunction en_lettres($captchavalue)\n{\n    return $GLOBALS['lang'][strval($captchavalue)];\n}\n\n/**\n *\n */\nfunction jour_en_lettres($jour, $mois, $annee)\n{\n    $date = date('w', mktime(0, 0, 0, $mois, $jour, $annee));\n    switch ($date) {\n        case 0:\n            return $GLOBALS['lang']['dimanche'];\n        break;\n        case 1:\n            return $GLOBALS['lang']['lundi'];\n        break;\n        case 2:\n            return $GLOBALS['lang']['mardi'];\n        break;\n        case 3:\n            return $GLOBALS['lang']['mercredi'];\n        break;\n        case 4:\n            return $GLOBALS['lang']['jeudi'];\n        break;\n        case 5:\n            return $GLOBALS['lang']['vendredi'];\n        break;\n        case 6:\n            return $GLOBALS['lang']['samedi'];\n        break;\n    }\n    return $nom;\n}\n\n/**\n *\n */\nfunction mois_en_lettres($numero, $abbrv = 0)\n{\n    if ($abbrv == 1) {\n        switch ($numero) {\n            case '01':\n                return $GLOBALS['lang']['janv.'];\n            break;\n            case '02':\n                return $GLOBALS['lang']['fev.'];\n            break;\n            case '03':\n                return $GLOBALS['lang']['mars.'];\n            break;\n            case '04':\n                return $GLOBALS['lang']['avr.'];\n            break;\n            case '05':\n                return $GLOBALS['lang']['mai.'];\n            break;\n            case '06':\n                return $GLOBALS['lang']['juin.'];\n            break;\n            case '07':\n                return $GLOBALS['lang']['juil.'];\n            break;\n            case '08':\n                return $GLOBALS['lang']['aout.'];\n            break;\n            case '09':\n                return $GLOBALS['lang']['sept.'];\n            break;\n            case '10':\n                return $GLOBALS['lang']['oct.'];\n            break;\n            case '11':\n                return $GLOBALS['lang']['nov.'];\n            break;\n            case '12':\n                return $GLOBALS['lang']['dec.'];\n            break;\n        }\n    } else {\n        switch ($numero) {\n            case '01':\n                return $GLOBALS['lang']['janvier'];\n            break;\n            case '02':\n                return $GLOBALS['lang']['fevrier'];\n            break;\n            case '03':\n                return $GLOBALS['lang']['mars'];\n            break;\n            case '04':\n                return $GLOBALS['lang']['avril'];\n            break;\n            case '05':\n                return $GLOBALS['lang']['mai'];\n            break;\n            case '06':\n                return $GLOBALS['lang']['juin'];\n            break;\n            case '07':\n                return $GLOBALS['lang']['juillet'];\n            break;\n            case '08':\n                return $GLOBALS['lang']['aout'];\n            break;\n            case '09':\n                return $GLOBALS['lang']['septembre'];\n            break;\n            case '10':\n                return $GLOBALS['lang']['octobre'];\n            break;\n            case '11':\n                return $GLOBALS['lang']['novembre'];\n            break;\n            case '12':\n                return $GLOBALS['lang']['decembre'];\n            break;\n        }\n    }\n}\n\n/**\n *\n */\nfunction nombre_objets($nb, $type)\n{\n    switch ($nb) {\n        case 0:\n            return $GLOBALS['lang']['note_no_'.$type];\n        case 1:\n            return $nb.' '.$GLOBALS['lang']['label_'.$type];\n        default:\n            return $nb.' '.$GLOBALS['lang']['label_'.$type.'s'];\n    }\n}\n"], "filenames": ["inc/conv.php"], "buggy_code_start_loc": [124], "buggy_code_end_loc": [135], "fixing_code_start_loc": [125], "fixing_code_end_loc": [140], "type": "CWE-79", "message": "Cross site scripting (XSS) vulnerability in the markup_clean_href function in inc/conv.php in BlogoText through 3.7.6 allows remote attackers to inject arbitrary JavaScript via a comment.", "other": {"cve": {"id": "CVE-2017-17792", "sourceIdentifier": "cve@mitre.org", "published": "2017-12-20T09:29:01.537", "lastModified": "2018-01-04T18:57:53.547", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross site scripting (XSS) vulnerability in the markup_clean_href function in inc/conv.php in BlogoText through 3.7.6 allows remote attackers to inject arbitrary JavaScript via a comment."}, {"lang": "es", "value": "Vulnerabilidad Cross-Site Scripting (XSS) en la funci\u00f3n markup_clean_href en inc/conv.php en BlogoText hasta la versi\u00f3n 3.7.6 permite que los atacantes remotos inyecten c\u00f3digo JavaScript arbitrario mediante un comentario."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:blogotext_project:blogotext:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.7.6", "matchCriteriaId": "D0375519-1423-42DC-BFF4-8250FEDDF0E8"}]}]}], "references": [{"url": "https://github.com/BlogoText/blogotext/commit/7c6f74e43008b2397160775696c67acbab87911d", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/BlogoText/blogotext/issues/345", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/BlogoText/blogotext/commit/7c6f74e43008b2397160775696c67acbab87911d"}}