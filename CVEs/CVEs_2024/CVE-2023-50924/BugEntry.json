{"buggy_code": ["<?php\n\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftsFilter;\nuse Engelsystem\\ShiftsFilterRenderer;\nuse Engelsystem\\ValidationResult;\nuse Illuminate\\Database\\Query\\JoinClause;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Text for Angeltype related links.\n *\n * @return string\n */\nfunction angeltypes_title()\n{\n    return __('Angeltypes');\n}\n\n/**\n * Route angeltype actions.\n *\n * @return array\n */\nfunction angeltypes_controller()\n{\n    $action = strip_request_item('action', 'list');\n\n    return match ($action) {\n        'view'   => angeltype_controller(),\n        'edit'   => angeltype_edit_controller(),\n        'delete' => angeltype_delete_controller(),\n        'list'   => angeltypes_list_controller(),\n        default  => angeltypes_list_controller(),\n    };\n}\n\n/**\n * Path to angeltype view.\n *\n * @param int   $angeltype_id AngelType id\n * @param array $params       additional params\n * @return string\n */\nfunction angeltype_link($angeltype_id, $params = [])\n{\n    $params = array_merge(['action' => 'view', 'angeltype_id' => $angeltype_id], $params);\n    return page_link_to('angeltypes', $params);\n}\n\n/**\n * Delete an Angeltype.\n *\n * @return array\n */\nfunction angeltype_delete_controller()\n{\n    if (!auth()->can('admin_angel_types')) {\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType::findOrFail(request()->input('angeltype_id'));\n\n    if (request()->hasPostData('delete')) {\n        $angeltype->delete();\n        engelsystem_log('Deleted angeltype: ' . AngelType_name_render($angeltype, true));\n        success(sprintf(__('Angeltype %s deleted.'), $angeltype->name));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    return [\n        sprintf(__('Delete angeltype %s'), $angeltype->name),\n        AngelType_delete_view($angeltype),\n    ];\n}\n\n/**\n * Change an Angeltype.\n *\n * @return array\n */\nfunction angeltype_edit_controller()\n{\n    // In supporter mode only allow to modify description\n    $supporter_mode = !auth()->can('admin_angel_types');\n    $request = request();\n\n    if ($request->has('angeltype_id')) {\n        // Edit existing angeltype\n        $angeltype = AngelType::findOrFail($request->input('angeltype_id'));\n\n        if (!auth()->user()?->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n            throw_redirect(page_link_to('angeltypes'));\n        }\n    } else {\n        // New angeltype\n        if ($supporter_mode) {\n            // Supporters aren't allowed to create new angeltypes.\n            throw_redirect(page_link_to('angeltypes'));\n        }\n        $angeltype = new AngelType();\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (!$supporter_mode) {\n            if ($request->has('name')) {\n                $result = AngelType_validate_name($request->postData('name'), $angeltype);\n                $angeltype->name = $result->getValue();\n                if (!$result->isValid()) {\n                    $valid = false;\n                    error(__('Please check the name. Maybe it already exists.'));\n                }\n            }\n\n            $angeltype->restricted = $request->has('restricted');\n            $angeltype->no_self_signup = $request->has('no_self_signup');\n            $angeltype->show_on_dashboard = $request->has('show_on_dashboard');\n            $angeltype->hide_register = $request->has('hide_register');\n\n            $angeltype->requires_driver_license = $request->has('requires_driver_license');\n            $angeltype->requires_ifsg_certificate = $request->has('requires_ifsg_certificate');\n        }\n\n        $angeltype->description = strip_request_item_nl('description', $angeltype->description);\n\n        $angeltype->contact_name = strip_request_item('contact_name', $angeltype->contact_name);\n        $angeltype->contact_dect = strip_request_item('contact_dect', $angeltype->contact_dect) ?: '';\n        $angeltype->contact_email = strip_request_item('contact_email', $angeltype->contact_email);\n\n        if ($valid) {\n            $angeltype->save();\n\n            success('Angel type saved.');\n            engelsystem_log(\n                'Saved angeltype: ' . $angeltype->name . ($angeltype->restricted ? ', restricted' : '')\n                . ($angeltype->no_self_signup ? ', no_self_signup' : '')\n                . ($angeltype->requires_driver_license ? ', requires driver license' : '') . ', '\n                . ($angeltype->requires_ifsg_certificate ? ', requires ifsg certificate' : '') . ', '\n                . $angeltype->contact_name . ', '\n                . $angeltype->contact_dect . ', '\n                . $angeltype->contact_email . ', '\n                . $angeltype->show_on_dashboard . ', '\n                . $angeltype->hide_register\n            );\n            throw_redirect(angeltype_link($angeltype->id));\n        }\n    }\n\n    return [\n        sprintf(__('Edit %s'), $angeltype->name),\n        AngelType_edit_view($angeltype, $supporter_mode),\n    ];\n}\n\n/**\n * View details of a given angeltype.\n *\n * @return array\n */\nfunction angeltype_controller()\n{\n    $user = auth()->user();\n\n    if (!auth()->can('angeltypes')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    $angeltype = AngelType::findOrFail(request()->input('angeltype_id'));\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::whereUserId($user->id)->where('angel_type_id', $angeltype->id)->first();\n    $members = $angeltype->userAngelTypes->sortBy('name', SORT_NATURAL | SORT_FLAG_CASE);\n    $days = angeltype_controller_shiftsFilterDays($angeltype);\n    $shiftsFilter = angeltype_controller_shiftsFilter($angeltype, $days);\n    if (request()->input('showFilledShifts')) {\n        $shiftsFilter->setFilled([ShiftsFilter::FILLED_FREE, ShiftsFilter::FILLED_FILLED]);\n    }\n\n    $shiftsFilterRenderer = new ShiftsFilterRenderer($shiftsFilter);\n    $shiftsFilterRenderer->enableDaySelection($days);\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n    $request = request();\n    $tab = 0;\n\n    if ($request->has('shifts_filter_day') || $request->has('showShiftsTab')) {\n        $tab = 1;\n    }\n\n    $isSupporter = !is_null($user_angeltype) && $user_angeltype->supporter;\n    return [\n        sprintf(__('Team %s'), $angeltype->name),\n        AngelType_view(\n            $angeltype,\n            $members,\n            $user_angeltype,\n            auth()->can('admin_user_angeltypes') || $isSupporter,\n            auth()->can('admin_angel_types'),\n            $isSupporter,\n            $user->license,\n            $user,\n            $shiftsFilterRenderer,\n            $shiftCalendarRenderer,\n            $tab\n        ),\n    ];\n}\n\n/**\n * On which days do shifts for this angeltype occur? Needed for shiftCalendar.\n *\n * @param AngelType $angeltype\n * @return array\n */\nfunction angeltype_controller_shiftsFilterDays(AngelType $angeltype)\n{\n    $all_shifts = Shifts_by_angeltype($angeltype);\n    $days = [];\n    foreach ($all_shifts as $shift) {\n        $day = Carbon::make($shift['start'])->format('Y-m-d');\n        $dayFormatted = Carbon::make($shift['start'])->format(__('Y-m-d'));\n        if (!isset($days[$day])) {\n            $days[$day] = $dayFormatted;\n        }\n    }\n    ksort($days);\n    return $days;\n}\n\n/**\n * Sets up the shift filter for the angeltype.\n *\n * @param AngelType $angeltype\n * @param array     $days\n * @return ShiftsFilter\n */\nfunction angeltype_controller_shiftsFilter(AngelType $angeltype, $days)\n{\n    $request = request();\n    $roomIds = Room::query()\n        ->select('id')\n        ->pluck('id')\n        ->toArray();\n    $shiftsFilter = new ShiftsFilter(\n        auth()->can('user_shifts_admin'),\n        $roomIds,\n        [$angeltype->id]\n    );\n    $selected_day = date('Y-m-d');\n    if (!empty($days) && !isset($days[$selected_day])) {\n        $selected_day = array_key_first($days);\n    }\n    if ($request->input('shifts_filter_day')) {\n        $selected_day = $request->input('shifts_filter_day');\n    }\n    $shiftsFilter->setStartTime(parse_date('Y-m-d H:i', $selected_day . ' 00:00'));\n    $shiftsFilter->setEndTime(parse_date('Y-m-d H:i', $selected_day . ' 23:59'));\n\n    return $shiftsFilter;\n}\n\n/**\n * View a list of all angeltypes.\n *\n * @return array\n */\nfunction angeltypes_list_controller()\n{\n    $user = auth()->user();\n\n    if (!auth()->can('angeltypes')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    $angeltypes = AngelTypes_with_user($user->id);\n    foreach ($angeltypes as $angeltype) {\n        $actions = [\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n                icon('eye') . __('view'),\n                'btn-sm'\n            ),\n        ];\n\n        if (auth()->can('admin_angel_types')) {\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype->id]),\n                icon('pencil') . __('edit'),\n                'btn-sm'\n            );\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype->id]),\n                icon('trash') . __('delete'),\n                'btn-sm'\n            );\n        }\n\n        $angeltype->membership = AngelType_render_membership($angeltype);\n        if (!empty($angeltype->user_angel_type_id)) {\n            $actions[] = button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $angeltype->user_angel_type_id]\n                ),\n                icon('box-arrow-right') . __('leave'),\n                'btn-sm'\n            );\n        } else {\n            $actions[] = button(\n                page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype->id]),\n                icon('box-arrow-in-right') . __('join'),\n                'btn-sm'\n            );\n        }\n\n        $angeltype->is_restricted = $angeltype->restricted ? icon('mortarboard-fill') : '';\n        $angeltype->no_self_signup_allowed = $angeltype->no_self_signup ? '' : icon('pencil-square');\n\n        $angeltype->name = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id])\n            . '\">'\n            . $angeltype->name\n            . '</a>';\n\n        $angeltype->actions = table_buttons($actions);\n    }\n\n    return [\n        angeltypes_title(),\n        AngelTypes_list_view($angeltypes, auth()->can('admin_angel_types')),\n    ];\n}\n\n/**\n * Validates a name for angeltypes.\n * Returns ValidationResult containing validation success and validated name.\n *\n * @param string    $name Wanted name for the angeltype\n * @param AngelType $angeltype The angeltype the name is for\n *\n * @return ValidationResult result and validated name\n */\nfunction AngelType_validate_name($name, AngelType $angeltype)\n{\n    $name = strip_item($name);\n    if ($name == '') {\n        return new ValidationResult(false, '');\n    }\n    if ($angeltype->id) {\n        $valid = AngelType::whereName($name)\n                ->where('id', '!=', $angeltype->id)\n                ->count() == 0;\n        return new ValidationResult($valid, $name);\n    }\n\n    $valid = AngelType::whereName($name)->count() == 0;\n    return new ValidationResult($valid, $name);\n}\n\n/**\n * Returns all angeltypes and subscription state to each of them for given user.\n *\n * @param int $userId\n * @return Collection|AngelType[]\n */\nfunction AngelTypes_with_user($userId): Collection\n{\n    return AngelType::query()\n        ->select([\n            'angel_types.*',\n            'user_angel_type.id AS user_angel_type_id',\n            'user_angel_type.confirm_user_id',\n            'user_angel_type.supporter',\n        ])\n        ->leftJoin('user_angel_type', function (JoinClause $join) use ($userId) {\n            $join->on('angel_types.id', 'user_angel_type.angel_type_id');\n            $join->where('user_angel_type.user_id', $userId);\n        })\n        ->get();\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\ShiftsFilter;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n * Room controllers for managing everything room related.\n */\n\n/**\n * View a room with its shifts.\n *\n * @return array\n */\nfunction room_controller(): array\n{\n    if (!auth()->can('view_rooms')) {\n        throw_redirect(page_link_to());\n    }\n\n    $request = request();\n    $room = load_room();\n\n    $all_shifts = $room->shifts->sortBy('start');\n    $days = [];\n    foreach ($all_shifts as $shift) {\n        $day = $shift->start->format('Y-m-d');\n        if (!isset($days[$day])) {\n            $days[$day] = $shift->start->format(__('Y-m-d'));\n        }\n    }\n\n    $shiftsFilter = new ShiftsFilter(\n        true,\n        [$room->id],\n        AngelType::query()->get('id')->pluck('id')->toArray()\n    );\n    $selected_day = date('Y-m-d');\n    if (!empty($days) && !isset($days[$selected_day])) {\n        $selected_day = array_key_first($days);\n    }\n    if ($request->input('shifts_filter_day')) {\n        $selected_day = $request->input('shifts_filter_day');\n    }\n    $shiftsFilter->setStartTime(parse_date('Y-m-d H:i', $selected_day . ' 00:00'));\n    $shiftsFilter->setEndTime(parse_date('Y-m-d H:i', $selected_day . ' 23:59'));\n\n    $shiftsFilterRenderer = new ShiftsFilterRenderer($shiftsFilter);\n    $shiftsFilterRenderer->enableDaySelection($days);\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n\n    return [\n        $room->name,\n        Room_view($room, $shiftsFilterRenderer, $shiftCalendarRenderer),\n    ];\n}\n\n/**\n * Dispatch different room actions.\n *\n * @return array\n */\nfunction rooms_controller(): array\n{\n    $request = request();\n    $action = $request->input('action');\n    if (!$request->has('action')) {\n        $action = 'list';\n    }\n\n    return match ($action) {\n        'view'  => room_controller(),\n        'list'  => throw_redirect(page_link_to('admin/rooms')),\n        default => throw_redirect(page_link_to('admin/rooms')),\n    };\n}\n\n/**\n * @param Room $room\n * @return string\n */\nfunction room_link(Room $room)\n{\n    return page_link_to('rooms', ['action' => 'view', 'room_id' => $room->id]);\n}\n\n/**\n * Loads room by request param room_id\n *\n * @return Room\n */\nfunction load_room()\n{\n    if (!test_request_int('room_id')) {\n        throw_redirect(page_link_to());\n    }\n\n    $room = Room::find(request()->input('room_id'));\n    if (!$room) {\n        throw_redirect(page_link_to());\n    }\n\n    return $room;\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Shifts\\NeededAngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\ScheduleShift;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Engelsystem\\Models\\Shifts\\ShiftSignupStatus;\nuse Engelsystem\\ShiftSignupState;\n\n/**\n * @param array|Shift $shift\n * @return string\n */\nfunction shift_link($shift)\n{\n    $parameters = ['action' => 'view'];\n    if (isset($shift['shift_id']) || isset($shift['id'])) {\n        $parameters['shift_id'] = $shift['shift_id'] ?? $shift['id'];\n    }\n\n    return page_link_to('shifts', $parameters);\n}\n\n/**\n * @param Shift $shift\n * @return string\n */\nfunction shift_delete_link(Shift $shift)\n{\n    return page_link_to('user_shifts', ['delete_shift' => $shift->id]);\n}\n\n/**\n * @param Shift $shift\n * @return string\n */\nfunction shift_edit_link(Shift $shift)\n{\n    return page_link_to('user_shifts', ['edit_shift' => $shift->id]);\n}\n\n/**\n * Edit a single shift.\n *\n * @return string\n */\nfunction shift_edit_controller()\n{\n    $valid = true;\n    $request = request();\n\n    if (!auth()->can('admin_shifts')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    if (!$request->has('edit_shift') || !test_request_int('edit_shift')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('edit_shift');\n\n    $shift = Shift::findOrFail($shift_id);\n    if (ScheduleShift::whereShiftId($shift->id)->first()) {\n        warning(__(\n            'This shift was imported from a schedule so some changes will be overwritten with the next import.'\n        ));\n    }\n\n    $rooms = [];\n    foreach (Room::orderBy('name')->get() as $room) {\n        $rooms[$room->id] = $room->name;\n    }\n    $angeltypes = AngelType::all()->pluck('name', 'id')->toArray();\n    $shifttypes = ShiftType::all()->pluck('name', 'id')->toArray();\n\n    $needed_angel_types = collect(NeededAngelTypes_by_shift($shift_id))->pluck('count', 'angel_type_id')->toArray();\n    foreach (array_keys($angeltypes) as $angeltype_id) {\n        if (!isset($needed_angel_types[$angeltype_id])) {\n            $needed_angel_types[$angeltype_id] = 0;\n        }\n    }\n\n    $shifttype_id = $shift->shift_type_id;\n    $title = $shift->title;\n    $description = $shift->description;\n    $rid = $shift->room_id;\n    $start = $shift->start;\n    $end = $shift->end;\n\n    if ($request->hasPostData('submit')) {\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n        $description = strip_request_item_nl('description');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($rooms[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            error(__('Please select a room.'));\n        }\n\n        if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n            $shifttype_id = $request->input('shifttype_id');\n        } else {\n            $valid = false;\n            error(__('Please select a shifttype.'));\n        }\n\n        if ($request->has('start') && $tmp = DateTime::createFromFormat('Y-m-d H:i', $request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please enter a valid starting time for the shifts.'));\n        }\n\n        if ($request->has('end') && $tmp = DateTime::createFromFormat('Y-m-d H:i', $request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please enter a valid ending time for the shifts.'));\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            error(__('The ending time has to be after the starting time.'));\n        }\n\n        foreach ($needed_angel_types as $needed_angeltype_id => $count) {\n            $needed_angel_types[$needed_angeltype_id] = 0;\n\n            $queryKey = 'angeltype_count_' . $needed_angeltype_id;\n            if ($request->has($queryKey)) {\n                if (test_request_int($queryKey)) {\n                    $needed_angel_types[$needed_angeltype_id] = trim($request->input($queryKey));\n                } else {\n                    $valid = false;\n                    error(sprintf(\n                        __('Please check your input for needed angels of type %s.'),\n                        $angeltypes[$needed_angeltype_id]\n                    ));\n                }\n            }\n        }\n\n        if ($valid) {\n            $oldShift = Shift::find($shift->id);\n\n            $shift->shift_type_id = $shifttype_id;\n            $shift->title = $title;\n            $shift->description = $description;\n            $shift->room_id = $rid;\n            $shift->start = $start;\n            $shift->end = $end;\n            $shift->updatedBy()->associate(auth()->user());\n            $shift->save();\n\n            mail_shift_change($oldShift, $shift);\n\n            NeededAngelType::whereShiftId($shift_id)->delete();\n            $needed_angel_types_info = [];\n            foreach ($needed_angel_types as $type_id => $count) {\n                $angeltype = AngelType::find($type_id);\n                if (!empty($angeltype) && $count > 0) {\n                    $neededAngelType = new NeededAngelType();\n                    $neededAngelType->shift()->associate($shift);\n                    $neededAngelType->angel_type_id = $type_id;\n                    $neededAngelType->count = $count;\n                    $neededAngelType->save();\n\n                    $needed_angel_types_info[] = $angeltypes[$type_id] . ': ' . $count;\n                }\n            }\n\n            engelsystem_log(\n                'Updated shift \\'' . $shifttypes[$shifttype_id] . ', ' . $title\n                . '\\' from ' . $start->format('Y-m-d H:i')\n                . ' to ' . $end->format('Y-m-d H:i')\n                . ' with angel types ' . join(', ', $needed_angel_types_info)\n                . ' and description ' . $description\n            );\n            success(__('Shift updated.'));\n\n            throw_redirect(shift_link($shift));\n        }\n    }\n\n    $angel_types_spinner = '';\n    foreach ($angeltypes as $angeltype_id => $angeltype_name) {\n        $angel_types_spinner .= form_spinner(\n            'angeltype_count_' . $angeltype_id,\n            $angeltype_name,\n            $needed_angel_types[$angeltype_id]\n        );\n    }\n\n    return page_with_title(\n        shifts_title(),\n        [\n            msg(),\n            '<noscript>'\n            . info(__('This page is much more comfortable with javascript.'), true)\n            . '</noscript>',\n            form([\n                form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                form_text('title', __('Title'), $title),\n                form_select('rid', __('Room:'), $rooms, $rid),\n                form_text('start', __('Start:'), $start->format('Y-m-d H:i')),\n                form_text('end', __('End:'), $end->format('Y-m-d H:i')),\n                form_textarea('description', __('Additional description'), $description),\n                form_info('', __('This description is for single shifts, otherwise please use the description in shift type.')),\n                '<h2>' . __('Needed angels') . '</h2>',\n                $angel_types_spinner,\n                form_submit('submit', __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * @return string\n */\nfunction shift_delete_controller()\n{\n    $request = request();\n\n    if (!auth()->can('user_shifts_admin')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht komplett l\u00f6schen (nur f\u00fcr admins/user mit user_shifts_admin privileg)\n    if (!$request->has('delete_shift') || !preg_match('/^\\d+$/', $request->input('delete_shift'))) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('delete_shift');\n\n    $shift = Shift($shift_id);\n    if (empty($shift)) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht l\u00f6schen best\u00e4tigt\n    if ($request->hasPostData('delete')) {\n        foreach ($shift->shiftEntries as $entry) {\n            event('shift.entry.deleting', [\n                'user'       => $entry->user,\n                'start'      => $shift->start,\n                'end'        => $shift->end,\n                'name'       => $shift->shiftType->name,\n                'title'      => $shift->title,\n                'type'       => $entry->angelType->name,\n                'room'       => $shift->room,\n                'freeloaded' => $entry->freeloaded,\n            ]);\n        }\n\n        $shift->delete();\n\n        engelsystem_log(\n            'Deleted shift ' . $shift->title . ': ' . $shift->shiftType->name\n            . ' from ' . $shift->start->format('Y-m-d H:i')\n            . ' to ' . $shift->end->format('Y-m-d H:i')\n        );\n        success(__('Shift deleted.'));\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    return page_with_title(shifts_title(), [\n        error(sprintf(\n            __('Do you want to delete the shift %s from %s to %s?'),\n            $shift->shiftType->name,\n            $shift->start->format(__('Y-m-d H:i')),\n            $shift->end->format(__('H:i'))\n        ), true),\n        form([\n            form_hidden('delete_shift', $shift->id),\n            form_submit('delete', __('delete')),\n        ]),\n    ]);\n}\n\n/**\n * @return array\n */\nfunction shift_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!auth()->can('user_shifts')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    if (!$request->has('shift_id')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    $shift = Shift($request->input('shift_id'));\n    if (empty($shift)) {\n        error(__('Shift could not be found.'));\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    $shifttype = $shift->shiftType;\n    $room = $shift->room;\n    /** @var AngelType[] $angeltypes */\n    $angeltypes = AngelType::all();\n    $user_shifts = Shifts_by_user($user->id);\n\n    $shift_signup_state = new ShiftSignupState(ShiftSignupStatus::OCCUPIED, 0);\n    foreach ($angeltypes as $angeltype) {\n        $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n        if (empty($needed_angeltype)) {\n            continue;\n        }\n\n        $shift_entries = $shift->shiftEntries()\n            ->where('angel_type_id', $angeltype->id)\n            ->get();\n        $needed_angeltype = (new AngelType())->forceFill($needed_angeltype);\n\n        $angeltype_signup_state = Shift_signup_allowed(\n            $user,\n            $shift,\n            $angeltype,\n            null,\n            $user_shifts,\n            $needed_angeltype,\n            $shift_entries\n        );\n        $shift_signup_state->combineWith($angeltype_signup_state);\n        $angeltype->shift_signup_state = $angeltype_signup_state;\n    }\n\n    return [\n        $shift->shiftType->name,\n        Shift_view($shift, $shifttype, $room, $angeltypes, $shift_signup_state),\n    ];\n}\n\n/**\n * @return array\n */\nfunction shifts_controller()\n{\n    $request = request();\n    if (!$request->has('action')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    return match ($request->input('action')) {\n        'view' => shift_controller(),\n        'next' => shift_next_controller(), // throws redirect\n        default => throw_redirect(page_link_to('/')),\n    };\n}\n\n/**\n * Redirects the user to his next shift.\n */\nfunction shift_next_controller()\n{\n    if (!auth()->can('user_shifts')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    $upcoming_shifts = ShiftEntries_upcoming_for_user(auth()->user());\n\n    if (!$upcoming_shifts->isEmpty()) {\n        throw_redirect(shift_link($upcoming_shifts[0]->shift));\n    }\n\n    throw_redirect(page_link_to('user_shifts'));\n}\n", "<?php\n\nuse Engelsystem\\Models\\Shifts\\ShiftType;\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction shifttype_link(ShiftType $shifttype)\n{\n    return page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype->id]);\n}\n\n/**\n * Delete a shifttype.\n *\n * @return array\n */\nfunction shifttype_delete_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        throw_redirect(page_link_to('shifttypes'));\n    }\n\n    $shifttype = ShiftType::findOrFail($request->input('shifttype_id'));\n    if ($request->hasPostData('delete')) {\n        engelsystem_log('Deleted shifttype ' . $shifttype->name);\n        success(sprintf(__('Shifttype %s deleted.'), $shifttype->name));\n\n        $shifttype->delete();\n        throw_redirect(page_link_to('shifttypes'));\n    }\n\n    return [\n        sprintf(__('Delete shifttype %s'), $shifttype->name),\n        ShiftType_delete_view($shifttype),\n    ];\n}\n\n/**\n * Edit or create shift type.\n *\n * @return array\n */\nfunction shifttype_edit_controller()\n{\n    $shifttype_id = null;\n    $name = '';\n    $description = '';\n\n    $request = request();\n\n    if ($request->has('shifttype_id')) {\n        $shifttype = ShiftType::findOrFail($request->input('shifttype_id'));\n        $shifttype_id = $shifttype->id;\n        $name = $shifttype->name;\n        $description = $shifttype->description;\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('name') && $request->input('name') != '') {\n            $name = strip_request_item('name');\n        } else {\n            $valid = false;\n            error(__('Please enter a name.'));\n        }\n\n        if ($request->has('description')) {\n            $description = strip_request_item_nl('description');\n        }\n\n        if ($valid) {\n            $shiftType = ShiftType::findOrNew($shifttype_id);\n            $shiftType->name = $name;\n            $shiftType->description = $description;\n            $shiftType->save();\n\n            if ($shifttype_id) {\n                engelsystem_log('Updated shifttype ' . $name);\n                success(__('Updated shifttype.'));\n            } else {\n                $shifttype_id = $shiftType->id;\n\n                engelsystem_log('Created shifttype ' . $name);\n                success(__('Created shifttype.'));\n            }\n\n            throw_redirect(page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype_id]));\n        }\n    }\n\n    return [\n        shifttypes_title(),\n        ShiftType_edit_view($name, $description, $shifttype_id),\n    ];\n}\n\n/**\n * @return array\n */\nfunction shifttype_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        throw_redirect(page_link_to('shifttypes'));\n    }\n    $shifttype = ShiftType::findOrFail($request->input('shifttype_id'));\n\n    return [\n        $shifttype->name,\n        ShiftType_view($shifttype),\n    ];\n}\n\n/**\n * List all shift types.\n *\n * @return array\n */\nfunction shifttypes_list_controller()\n{\n    $shifttypes = ShiftType::all()->sortBy('name', SORT_NATURAL | SORT_FLAG_CASE);\n\n    return [\n        shifttypes_title(),\n        ShiftTypes_list_view($shifttypes),\n    ];\n}\n\n/**\n * Text for shift type related links.\n *\n * @return string\n */\nfunction shifttypes_title()\n{\n    return __('Shifttypes');\n}\n\n/**\n * Route shift type actions\n *\n * @return array\n */\nfunction shifttypes_controller()\n{\n    $request = request();\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    return match ($action) {\n        'view'   => shifttype_controller(),\n        'edit'   => shifttype_edit_controller(),\n        'delete' => shifttype_delete_controller(),\n        'list'   => shifttypes_list_controller(),\n        default  => shifttypes_list_controller(),\n    };\n}\n", "<?php\n\nuse Engelsystem\\Mail\\EngelsystemMailer;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\UserAngelType;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\n/**\n * Display a hint for team/angeltype supporters if there are unconfirmed users for his angeltype.\n *\n * @return string|null\n */\nfunction user_angeltypes_unconfirmed_hint()\n{\n    $restrictedSupportedAngelTypes = auth()\n        ->user()\n        ->userAngelTypes()\n        ->wherePivot('supporter', true)\n        ->where('restricted', true)\n        ->get();\n\n    /** @var Collection|UserAngelType[] $unconfirmed_user_angeltypes */\n    $unconfirmed_user_angeltypes = UserAngelType::query()\n        ->with('AngelType')\n        ->select(['user_angel_type.*', UserAngelType::query()->raw('count(angel_type_id) as users_count')])\n        ->whereIn('angel_type_id', $restrictedSupportedAngelTypes->pluck('id')->toArray())\n        ->whereNull('confirm_user_id')\n        ->groupBy('angel_type_id')\n        ->get();\n\n    if (!$unconfirmed_user_angeltypes->count()) {\n        return null;\n    }\n\n    $unconfirmed_links = [];\n    foreach ($unconfirmed_user_angeltypes as $user_angeltype) {\n        $unconfirmed_links[] = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $user_angeltype->angel_type_id])\n            . '\">' . $user_angeltype->angelType->name\n            . ' (+' . $user_angeltype->count . ')'\n            . '</a>';\n    }\n\n    $count = $unconfirmed_user_angeltypes->count();\n    return\n        _e(\n            'There is %d unconfirmed angeltype.',\n            'There are %d unconfirmed angeltypes.',\n            $count,\n            [$count]\n        )\n        . ' ' . __('Angel types which need approvals:')\n        . ' ' . join(', ', $unconfirmed_links);\n}\n\n/**\n * Remove all unconfirmed users from a specific angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_delete_all_controller(): array\n{\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType::findOrFail($request->input('angeltype_id'));\n    if (!auth()->user()->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n        error(__('You are not allowed to delete all users for this angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('deny_all')) {\n        UserAngelType::whereAngelTypeId($angeltype->id)\n            ->whereNull('confirm_user_id')\n            ->delete();\n\n        engelsystem_log(sprintf('Denied all users for angeltype %s', AngelType_name_render($angeltype, true)));\n        success(sprintf(__('Denied all users for angeltype %s.'), $angeltype->name));\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Deny all users'),\n        UserAngelTypes_delete_all_view($angeltype),\n    ];\n}\n\n/**\n * Confirm all unconfirmed users for an angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_confirm_all_controller(): array\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType::findOrFail($request->input('angeltype_id'));\n    if (!auth()->can('admin_user_angeltypes') && !$user->isAngelTypeSupporter($angeltype)) {\n        error(__('You are not allowed to confirm all users for this angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('confirm_all')) {\n        /** @var Collection|User[] $users */\n        $users = $angeltype->userAngelTypes()->wherePivot('confirm_user_id', '=', null)->get();\n        UserAngelType::whereAngelTypeId($angeltype->id)\n            ->whereNull('confirm_user_id')\n            ->update(['confirm_user_id' => $user->id]);\n\n        engelsystem_log(sprintf('Confirmed all users for angeltype %s', AngelType_name_render($angeltype, true)));\n        success(sprintf(__('Confirmed all users for angeltype %s.'), $angeltype->name));\n\n        foreach ($users as $user) {\n            user_angeltype_confirm_email($user, $angeltype);\n        }\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Confirm all users'),\n        UserAngelTypes_confirm_all_view($angeltype),\n    ];\n}\n\n/**\n * Confirm a user for an angeltype.\n *\n * @return array\n */\nfunction user_angeltype_confirm_controller(): array\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::findOrFail($request->input('user_angeltype_id'));\n    $angeltype = $user_angeltype->angelType;\n    if (!$user->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n        error(__('You are not allowed to confirm this users angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = $user_angeltype->user;\n    if ($request->hasPostData('confirm_user')) {\n        $user_angeltype->confirmUser()->associate($user);\n        $user_angeltype->save();\n\n        engelsystem_log(sprintf(\n            '%s confirmed for angeltype %s',\n            User_Nick_render($user_source, true),\n            AngelType_name_render($angeltype, true)\n        ));\n        success(sprintf(__('%s confirmed for angeltype %s.'), $user_source->displayName, $angeltype->name));\n\n        user_angeltype_confirm_email($user_source, $angeltype);\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Confirm angeltype for user'),\n        UserAngelType_confirm_view($user_angeltype, $user_source, $angeltype),\n    ];\n}\n\nfunction user_angeltype_confirm_email(User $user, AngelType $angeltype): void\n{\n    if (!$user->settings->email_shiftinfo) {\n        return;\n    }\n\n    try {\n        /** @var EngelsystemMailer $mailer */\n        $mailer = app(EngelsystemMailer::class);\n        $mailer->sendViewTranslated(\n            $user,\n            'notification.angeltype.confirmed',\n            'emails/angeltype-confirmed',\n            ['name' => $angeltype->name, 'angeltype' => $angeltype, 'username' => $user->displayName]\n        );\n    } catch (TransportException $e) {\n        /** @var LoggerInterface $logger */\n        $logger = app('logger');\n        $logger->error(\n            'Unable to send email \"{title}\" to user {user} with {exception}',\n            ['title' => __('notification.angeltype.confirmed'), 'user' => $user->name, 'exception' => $e]\n        );\n    }\n}\n\nfunction user_angeltype_add_email(User $user, AngelType $angeltype): void\n{\n    if (!$user->settings->email_shiftinfo || $user->id == auth()->user()->id) {\n        return;\n    }\n\n    try {\n        /** @var EngelsystemMailer $mailer */\n        $mailer = app(EngelsystemMailer::class);\n        $mailer->sendViewTranslated(\n            $user,\n            'notification.angeltype.added',\n            'emails/angeltype-added',\n            ['name' => $angeltype->name, 'angeltype' => $angeltype, 'username' => $user->displayName]\n        );\n    } catch (TransportException $e) {\n        /** @var LoggerInterface $logger */\n        $logger = app('logger');\n        $logger->error(\n            'Unable to send email \"{title}\" to user {user} with {exception}',\n            ['title' => __('notification.angeltype.added'), 'user' => $user->name, 'exception' => $e]\n        );\n    }\n}\n\n/**\n * Remove a user from an Angeltype.\n *\n * @return array\n */\nfunction user_angeltype_delete_controller(): array\n{\n    $request = request();\n    $user = auth()->user();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::findOrFail($request->input('user_angeltype_id'));\n    $angeltype = $user_angeltype->angelType;\n    $user_source = $user_angeltype->user;\n    if (\n        $user->id != $user_angeltype->user_id\n        && !$user->isAngelTypeSupporter($angeltype)\n        && !auth()->can('admin_user_angeltypes')\n    ) {\n        error(__('You are not allowed to delete this users angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('delete')) {\n        $user_angeltype->delete();\n\n        engelsystem_log(sprintf('User %s removed from %s.', User_Nick_render($user_source, true), $angeltype->name));\n        success(sprintf(__('User %s removed from %s.'), $user_source->displayName, $angeltype->name));\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Remove angeltype'),\n        UserAngelType_delete_view($user_angeltype, $user_source, $angeltype),\n    ];\n}\n\n/**\n * Update an UserAngelType.\n *\n * @return array\n */\nfunction user_angeltype_update_controller(): array\n{\n    $supporter = false;\n    $request = request();\n\n    if (!auth()->can('admin_angel_types')) {\n        error(__('You are not allowed to set supporter rights.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('supporter') && preg_match('/^[01]$/', $request->input('supporter'))) {\n        $supporter = $request->input('supporter') == '1';\n    } else {\n        error(__('No supporter update given.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::findOrFail($request->input('user_angeltype_id'));\n    $angeltype = $user_angeltype->angelType;\n    $user_source = $user_angeltype->user;\n\n    if ($request->hasPostData('submit')) {\n        $user_angeltype->supporter = $supporter;\n        $user_angeltype->save();\n\n        $msg = $supporter\n            ? __('Added supporter rights for %s to %s.')\n            : __('Removed supporter rights for %s from %s.');\n        engelsystem_log(sprintf(\n            $msg,\n            AngelType_name_render($angeltype, true),\n            User_Nick_render($user_source, true)\n        ));\n        success(sprintf($msg, $angeltype->name, $user_source->displayName));\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        $supporter ? __('Add supporter rights') : __('Remove supporter rights'),\n        UserAngelType_update_view($user_angeltype, $user_source, $angeltype, $supporter),\n    ];\n}\n\n/**\n * User joining an Angeltype (Or supporter doing this for him).\n *\n * @return array\n */\nfunction user_angeltype_add_controller(): array\n{\n    $angeltype = AngelType::findOrFail(request()->input('angeltype_id'));\n\n    // User is joining by itself\n    if (!auth()->user()->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n        return user_angeltype_join_controller($angeltype);\n    }\n\n    // Allow to add any user\n\n    // Default selection\n    $user_source = auth()->user();\n\n    // Load possible users, that are not in the angeltype already\n    $users_source = Users_by_angeltype_inverted($angeltype);\n\n    $request = request();\n    if ($request->hasPostData('submit')) {\n        $user_source = load_user();\n\n        if (!$angeltype->userAngelTypes()->wherePivot('user_id', $user_source->id)->exists()) {\n            $userAngelType = new UserAngelType();\n            $userAngelType->user()->associate($user_source);\n            $userAngelType->angelType()->associate($angeltype);\n            $userAngelType->save();\n\n            engelsystem_log(sprintf(\n                'User %s added to %s.',\n                User_Nick_render($user_source, true),\n                AngelType_name_render($angeltype, true)\n            ));\n            success(sprintf(__('User %s added to %s.'), $user_source->displayName, $angeltype->name));\n\n            if ($request->hasPostData('auto_confirm_user')) {\n                $userAngelType->confirmUser()->associate($user_source);\n                $userAngelType->save();\n\n                engelsystem_log(sprintf(\n                    'User %s confirmed as %s.',\n                    User_Nick_render($user_source, true),\n                    AngelType_name_render($angeltype, true)\n                ));\n            }\n\n            user_angeltype_add_email($user_source, $angeltype);\n\n            throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n        }\n    }\n\n    return [\n        __('Add user to angeltype'),\n        UserAngelType_add_view($angeltype, $users_source, $user_source->id),\n    ];\n}\n\n/**\n * A user joins an angeltype.\n *\n * @param AngelType $angeltype\n * @return array\n */\nfunction user_angeltype_join_controller(AngelType $angeltype)\n{\n    $user = auth()->user();\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::whereUserId($user->id)->where('angel_type_id', $angeltype->id)->first();\n    if (!empty($user_angeltype)) {\n        error(sprintf(__('You are already a %s.'), $angeltype->name));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $request = request();\n    if ($request->hasPostData('submit')) {\n        $userAngelType = new UserAngelType();\n        $userAngelType->user()->associate($user);\n        $userAngelType->angelType()->associate($angeltype);\n        $userAngelType->save();\n\n        engelsystem_log(sprintf(\n            'User %s joined %s.',\n            User_Nick_render($user, true),\n            AngelType_name_render($angeltype, true)\n        ));\n        success(sprintf(__('You joined %s.'), $angeltype->name));\n\n        if (auth()->can('admin_user_angeltypes') && $request->hasPostData('auto_confirm_user')) {\n            $userAngelType->confirmUser()->associate($user);\n            $userAngelType->save();\n\n            engelsystem_log(sprintf(\n                'User %s confirmed as %s.',\n                User_Nick_render($user, true),\n                AngelType_name_render($angeltype, true)\n            ));\n        }\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        sprintf(__('Become a %s'), $angeltype->name),\n        UserAngelType_join_view($user, $angeltype),\n    ];\n}\n\n/**\n * Route UserAngelType actions.\n *\n * @return array\n */\nfunction user_angeltypes_controller(): array\n{\n    $request = request();\n    if (!$request->has('action')) {\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    return match ($request->input('action')) {\n        'delete_all'  => user_angeltypes_delete_all_controller(),\n        'confirm_all' => user_angeltypes_confirm_all_controller(),\n        'confirm'     => user_angeltype_confirm_controller(),\n        'delete'      => user_angeltype_delete_controller(),\n        'update'      => user_angeltype_update_controller(),\n        'add'         => user_angeltype_add_controller(),\n        default       => throw_redirect(page_link_to('angeltyps')),\n    };\n}\n", "<?php\n\nuse Engelsystem\\Database\\Db;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilter;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Str;\n\n/**\n * Route user actions.\n *\n * @return array\n */\nfunction users_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$user) {\n        throw_redirect(page_link_to());\n    }\n\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    return match ($action) {\n        'view'          => user_controller(),\n        'delete'        => user_delete_controller(),\n        'edit_vouchers' => user_edit_vouchers_controller(),\n        'list'          => users_list_controller(),\n        default         => users_list_controller(),\n    };\n}\n\n/**\n * Delete a user, requires to enter own password for reasons.\n *\n * @return array\n */\nfunction user_delete_controller()\n{\n    $user = auth()->user();\n    $auth = auth();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->query->get('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (!auth()->can('admin_user')) {\n        throw_redirect(page_link_to());\n    }\n\n    // You cannot delete yourself\n    if ($user->id == $user_source->id) {\n        error(__('You cannot delete yourself.'));\n        throw_redirect(user_link($user->id));\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (\n            !(\n            $request->has('password')\n            && $auth->verifyPassword($user, $request->postData('password'))\n            )\n        ) {\n            $valid = false;\n            error(__('auth.password.error'));\n        }\n\n        if ($valid) {\n            // Load data before user deletion to prevent errors when displaying\n            $user_source->load(['contact', 'personalData', 'settings', 'state']);\n            $user_source->delete();\n\n            mail_user_delete($user_source);\n            success(__('User deleted.'));\n            engelsystem_log(sprintf('Deleted %s', User_Nick_render($user_source, true)));\n\n            throw_redirect(users_link());\n        }\n    }\n\n    return [\n        sprintf(__('Delete %s'), $user_source->displayName),\n        User_delete_view($user_source),\n    ];\n}\n\n/**\n * @return string\n */\nfunction users_link()\n{\n    return page_link_to('users');\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_edit_link($userId)\n{\n    return page_link_to('admin_user', ['user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_delete_link($userId)\n{\n    return page_link_to('users', ['action' => 'delete', 'user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_link($userId)\n{\n    return page_link_to('users', ['action' => 'view', 'user_id' => $userId]);\n}\n\n/**\n * @return array\n */\nfunction user_edit_vouchers_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (\n        (!auth()->can('admin_user') && !auth()->can('voucher.edit'))\n        || !config('enable_voucher')\n    ) {\n        throw_redirect(page_link_to());\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        $vouchers = '';\n        if (\n            $request->has('vouchers')\n            && test_request_int('vouchers')\n            && trim($request->input('vouchers')) >= 0\n        ) {\n            $vouchers = trim($request->input('vouchers'));\n        } else {\n            $valid = false;\n            error(__('Please enter a valid number of vouchers.'));\n        }\n\n        if ($valid) {\n            $user_source->state->got_voucher = $vouchers;\n            $user_source->state->save();\n\n            success(__('Saved the number of vouchers.'));\n            engelsystem_log(User_Nick_render($user_source, true) . ': ' . sprintf(\n                'Got %s vouchers',\n                $user_source->state->got_voucher\n            ));\n\n            throw_redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        sprintf(__('%s\\'s vouchers'), $user_source->displayName),\n        User_edit_vouchers_view($user_source),\n    ];\n}\n\n/**\n * @return array\n */\nfunction user_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    $user_source = $user;\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n        if (!$user_source) {\n            error(__('User not found.'));\n            throw_redirect(page_link_to('/'));\n        }\n    }\n\n    $shifts = Shifts_by_user($user_source->id, auth()->can('user_shifts_admin'));\n    foreach ($shifts as $shift) {\n        // TODO: Move queries to model\n        $shift->needed_angeltypes = Db::select(\n            '\n            SELECT DISTINCT `angel_types`.*\n            FROM `shift_entries`\n            JOIN `angel_types` ON `shift_entries`.`angel_type_id`=`angel_types`.`id`\n            WHERE `shift_entries`.`shift_id` = ?\n            ORDER BY `angel_types`.`name`\n            ',\n            [$shift->id]\n        );\n        $neededAngeltypes = $shift->needed_angeltypes;\n        foreach ($neededAngeltypes as &$needed_angeltype) {\n            $needed_angeltype['users'] = Db::select(\n                '\n                    SELECT `shift_entries`.`freeloaded`, `users`.*\n                    FROM `shift_entries`\n                    JOIN `users` ON `shift_entries`.`user_id`=`users`.`id`\n                    WHERE `shift_entries`.`shift_id` = ?\n                    AND `shift_entries`.`angel_type_id` = ?\n                ',\n                [$shift->id, $needed_angeltype['id']]\n            );\n        }\n        $shift->needed_angeltypes = $neededAngeltypes;\n    }\n\n    if (empty($user_source->api_key)) {\n        User_reset_api_key($user_source, false);\n    }\n\n    if ($user_source->state->force_active) {\n        $tshirt_score = __('Enough');\n    } else {\n        $tshirt_score = sprintf('%.2f', User_tshirt_score($user_source->id)) . '&nbsp;h';\n    }\n\n    return [\n        $user_source->displayName,\n        User_view(\n            $user_source,\n            auth()->can('admin_user'),\n            $user_source->isFreeloader(),\n            $user_source->userAngelTypes,\n            $user_source->groups,\n            $shifts,\n            $user->id == $user_source->id,\n            $tshirt_score,\n            auth()->can('admin_active'),\n            auth()->can('admin_user_worklog'),\n            UserWorkLogsForUser($user_source->id)\n        ),\n    ];\n}\n\n/**\n * List all users.\n *\n * @return array\n */\nfunction users_list_controller()\n{\n    $request = request();\n\n    if (!auth()->can('admin_user')) {\n        throw_redirect(page_link_to());\n    }\n\n    $order_by = 'name';\n    if (\n        $request->has('OrderBy') && in_array($request->input('OrderBy'), [\n            'name',\n            'first_name',\n            'last_name',\n            'dect',\n            'arrived',\n            'got_voucher',\n            'freeloads',\n            'active',\n            'force_active',\n            'got_shirt',\n            'shirt_size',\n            'planned_arrival_date',\n            'planned_departure_date',\n            'last_login_at',\n        ])\n    ) {\n        $order_by = $request->input('OrderBy');\n    }\n\n    /** @var User[]|Collection $users */\n    $users = User::with(['contact', 'personalData', 'state'])\n        ->orderBy('name')\n        ->get();\n    foreach ($users as $user) {\n        $user->setAttribute(\n            'freeloads',\n            $user->shiftEntries()\n                ->where('freeloaded', true)\n                ->count()\n        );\n    }\n\n    $users = $users->sortBy(function (User $user) use ($order_by) {\n        $userData = $user->toArray();\n        $data = [];\n        array_walk_recursive($userData, function ($value, $key) use (&$data) {\n            $data[$key] = $value;\n        });\n\n        return isset($data[$order_by]) ? Str::lower($data[$order_by]) : null;\n    });\n\n    return [\n        __('All users'),\n        Users_view(\n            $users,\n            $order_by,\n            State::whereArrived(true)->count(),\n            State::whereActive(true)->count(),\n            State::whereForceActive(true)->count(),\n            ShiftEntry::whereFreeloaded(true)->count(),\n            State::whereGotShirt(true)->count(),\n            State::query()->sum('got_voucher')\n        ),\n    ];\n}\n\n/**\n * Loads a user from param user_id.\n *\n * @return User\n */\nfunction load_user()\n{\n    $request = request();\n    if (!$request->has('user_id')) {\n        throw_redirect(page_link_to());\n    }\n\n    $user = User::find($request->input('user_id'));\n    if (!$user) {\n        error(__('User doesn\\'t exist.'));\n        throw_redirect(page_link_to());\n    }\n\n    return $user;\n}\n\n/**\n * @param ShiftsFilter $shiftsFilter\n * @return ShiftCalendarRenderer\n */\nfunction shiftCalendarRendererByShiftFilter(ShiftsFilter $shiftsFilter)\n{\n    $shifts = Shifts_by_ShiftsFilter($shiftsFilter);\n    $needed_angeltypes_source = NeededAngeltypes_by_ShiftsFilter($shiftsFilter);\n    $shift_entries_source = ShiftEntries_by_ShiftsFilter($shiftsFilter);\n\n    $needed_angeltypes = [];\n    /** @var ShiftEntry[][] $shift_entries */\n    $shift_entries = [];\n    foreach ($shifts as $shift) {\n        $needed_angeltypes[$shift->id] = [];\n        $shift_entries[$shift->id] = [];\n    }\n\n    foreach ($shift_entries_source as $shift_entry) {\n        if (isset($shift_entries[$shift_entry->shift_id])) {\n            $shift_entries[$shift_entry->shift_id][] = $shift_entry;\n        }\n    }\n\n    foreach ($needed_angeltypes_source as $needed_angeltype) {\n        if (isset($needed_angeltypes[$needed_angeltype['shift_id']])) {\n            $needed_angeltypes[$needed_angeltype['shift_id']][] = $needed_angeltype;\n        }\n    }\n\n    unset($needed_angeltypes_source);\n    unset($shift_entries_source);\n\n    if (\n        in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled())\n        && in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n    ) {\n        return new ShiftCalendarRenderer($shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n    }\n\n    $filtered_shifts = [];\n    foreach ($shifts as $shift) {\n        $needed_angels_count = 0;\n        foreach ($needed_angeltypes[$shift->id] as $needed_angeltype) {\n            $taken = 0;\n\n            if (\n                !in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n                && !in_array($needed_angeltype['angel_type_id'], $shiftsFilter->getTypes())\n            ) {\n                continue;\n            }\n\n            foreach ($shift_entries[$shift->id] as $shift_entry) {\n                if (\n                    $needed_angeltype['angel_type_id'] == $shift_entry->angel_type_id\n                    && !$shift_entry->freeloaded\n                ) {\n                    $taken++;\n                }\n            }\n\n            $needed_angels_count += max(0, $needed_angeltype['count'] - $taken);\n        }\n\n        if (\n            in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled())\n            && $needed_angels_count > 0\n        ) {\n            $filtered_shifts[] = $shift;\n        }\n\n        if (\n            in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n            && $needed_angels_count == 0\n        ) {\n            $filtered_shifts[] = $shift;\n        }\n    }\n\n    return new ShiftCalendarRenderer($filtered_shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n}\n", "<?php\n\n/**\n * Bootstrap application\n */\n\nuse Engelsystem\\Http\\UrlGeneratorInterface;\n\nrequire __DIR__ . '/application.php';\n\n\n/**\n * Include legacy code\n */\nrequire __DIR__ . '/includes.php';\n\n\n/**\n * Check for maintenance\n */\n/** @var \\Engelsystem\\Application $app */\nif ($app->get('config')->get('maintenance')) {\n    http_response_code(503);\n    $url = $app->get(UrlGeneratorInterface::class);\n    $maintenance = file_get_contents(__DIR__ . '/../resources/views/layouts/maintenance.html');\n    $maintenance = str_replace('%APP_NAME%', $app->get('config')->get('app_name'), $maintenance);\n    $maintenance = str_replace('%ASSETS_PATH%', $url->to(''), $maintenance);\n    echo $maintenance;\n    die();\n}\n", "<?php\n\nuse Engelsystem\\Controllers\\NotificationType;\n\n/**\n * Returns messages from session and removes them from the stack by rendering the messages twig template\n * @return string\n * @see \\Engelsystem\\Controllers\\HasUserNotifications\n */\nfunction msg()\n{\n    return view('layouts/parts/messages.twig');\n}\n\n/**\n * Renders an information message\n *\n * @param string $msg\n * @param bool   $immediately\n * @return string\n */\nfunction info($msg, $immediately = false)\n{\n    return alert(NotificationType::INFORMATION, $msg, $immediately);\n}\n\n/**\n * Renders a warning message\n *\n * @param string $msg\n * @param bool   $immediately\n * @return string\n */\nfunction warning($msg, $immediately = false)\n{\n    return alert(NotificationType::WARNING, $msg, $immediately);\n}\n\n/**\n * Renders an error message\n *\n * @param string $msg\n * @param bool   $immediately\n * @return string\n */\nfunction error($msg, $immediately = false)\n{\n    return alert(NotificationType::ERROR, $msg, $immediately);\n}\n\n/**\n * Renders a success message\n *\n * @param string $msg\n * @param bool   $immediately\n * @return string\n */\nfunction success($msg, $immediately = false)\n{\n    return alert(NotificationType::MESSAGE, $msg, $immediately);\n}\n\n/**\n * Renders an alert message with the given alert-* class or sets it in session\n *\n * @see \\Engelsystem\\Controllers\\HasUserNotifications\n *\n * @param NotificationType $type\n * @param string           $msg\n * @param bool             $immediately\n * @return string\n */\nfunction alert(NotificationType $type, $msg, $immediately = false)\n{\n    if (empty($msg)) {\n        return '';\n    }\n\n    if ($immediately) {\n        $type = str_replace(\n            [\n                NotificationType::ERROR->value,\n                NotificationType::WARNING->value,\n                NotificationType::INFORMATION->value,\n                NotificationType::MESSAGE->value,\n            ],\n            ['danger', 'warning', 'info', 'success'],\n            $type->value\n        );\n        return '<div class=\"alert alert-' . $type . '\" role=\"alert\">' . $msg . '</div>';\n    }\n\n    $type = 'messages.' . $type->value;\n    $session = session();\n    $messages = $session->get($type, []);\n    $messages[] = $msg;\n    $session->set($type, $messages);\n\n    return '';\n}\n", "<?php\n\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Query\\JoinClause;\n\n/**\n * @return string\n */\nfunction admin_free_title()\n{\n    return __('Free angels');\n}\n\n/**\n * @return string\n */\nfunction admin_free()\n{\n    $request = request();\n\n    $search = '';\n    if ($request->has('search')) {\n        $search = strip_request_item('search');\n    }\n\n    /** @var AngelType[]|Collection $angel_types_source */\n    $angel_types_source = AngelType::all(['id', 'name']);\n    $angel_types = [\n        '' => __('All'),\n    ];\n    foreach ($angel_types_source as $angel_type) {\n        $angel_types[$angel_type->id] = $angel_type->name;\n    }\n\n    $angelType = $request->input('angeltype', '');\n\n    /** @var User[] $users */\n    $users = [];\n    if ($request->has('submit')) {\n        $query = User::with('personalData')\n            ->select('users.*')\n            ->leftJoin('shift_entries', 'users.id', 'shift_entries.user_id')\n            ->leftJoin('users_state', 'users.id', 'users_state.user_id')\n            ->leftJoin('shifts', function ($join) {\n                /** @var JoinClause $join */\n                $join->on('shift_entries.shift_id', '=', 'shifts.id')\n                    ->where('shifts.start', '<', Carbon::now())\n                    ->where('shifts.end', '>', Carbon::now());\n            })\n            ->where('users_state.arrived', '=', 1)\n            ->whereNull('shifts.id')\n            ->orderBy('users.name')\n            ->groupBy('users.id');\n\n        if (!empty($angelType)) {\n            $query->join('user_angel_type', function ($join) use ($angelType) {\n                /** @var JoinClause $join */\n                $join->on('user_angel_type.user_id', '=', 'users.id')\n                    ->where('user_angel_type.angel_type_id', '=', $angelType);\n            });\n\n            $query->join('angel_types', function ($join) {\n                /** @var JoinClause $join */\n                $join->on('user_angel_type.angel_type_id', '=', 'angel_types.id')\n                    ->whereNotNull('user_angel_type.confirm_user_id')\n                    ->orWhere('angel_types.restricted', '=', '0');\n            });\n        }\n\n        $users = $query->get();\n    }\n\n    $free_users_table = [];\n    if ($search == '') {\n        $tokens = [];\n    } else {\n        $tokens = explode(' ', $search);\n    }\n    foreach ($users as $usr) {\n        if (count($tokens) > 0) {\n            $match = false;\n            $index = join('', $usr->attributesToArray());\n            foreach ($tokens as $token) {\n                $token = trim($token);\n                if (!empty($token) && stristr($index, $token)) {\n                    $match = true;\n                    break;\n                }\n            }\n            if (!$match) {\n                continue;\n            }\n        }\n\n        $email = $usr->contact->email ?: $usr->email;\n        $free_users_table[] = [\n            'name'        => User_Nick_render($usr) . User_Pronoun_render($usr),\n            'shift_state' => User_shift_state_render($usr),\n            'last_shift'  => User_last_shift_render($usr),\n            'dect'        => sprintf('<a href=\"tel:%s\">%1$s</a>', $usr->contact->dect),\n            'email'       => $usr->settings->email_human\n                ? sprintf('<a href=\"mailto:%s\">%1$s</a>', $email)\n                : icon('eye-slash'),\n            'actions'     =>\n                auth()->can('admin_user')\n                    ? button(page_link_to('admin_user', ['id' => $usr->id]), icon('pencil') . __('edit'), 'btn-sm')\n                    : '',\n        ];\n    }\n    return page_with_title(admin_free_title(), [\n        form([\n            div('row', [\n                div('col-md-12 form-inline', [\n                    div('row', [\n                        form_text('search', __('Search'), $search, null, null, null, 'col'),\n                        form_select('angeltype', __('Angeltype'), $angel_types, $angelType, '', 'col'),\n                        form_submit('submit', __('Search')),\n                    ]),\n                ]),\n            ]),\n        ]),\n        table([\n            'name'        => __('Name'),\n            'shift_state' => __('Next shift'),\n            'last_shift'  => __('Last shift'),\n            'dect'        => __('DECT'),\n            'email'       => __('E-Mail'),\n            'actions'     => '',\n        ], $free_users_table),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\Privilege;\nuse Illuminate\\Database\\Query\\JoinClause;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @return string\n */\nfunction admin_groups_title()\n{\n    return __('Grouprights');\n}\n\n/**\n * @return string\n */\nfunction admin_groups()\n{\n    $html = '';\n    $request = request();\n    /** @var Group[]|Collection $groups */\n    $groups = Group::query()->orderBy('name')->get();\n\n    if (!$request->has('action')) {\n        $groups_table = [];\n        foreach ($groups as $group) {\n            /** @var Privilege[]|Collection $privileges */\n            $privileges = $group->privileges()->orderBy('name')->get();\n            $privileges_html = [];\n\n            foreach ($privileges as $privilege) {\n                $privileges_html[] = $privilege['name'];\n            }\n\n            $groups_table[] = [\n                'name'       => $group->name,\n                'privileges' => join(', ', $privileges_html),\n                'actions'    => button(\n                    page_link_to(\n                        'admin_groups',\n                        ['action' => 'edit', 'id' => $group->id]\n                    ),\n                    icon('pencil') . __('edit'),\n                    'btn-sm'\n                ),\n            ];\n        }\n\n        return page_with_title(admin_groups_title(), [\n            table([\n                'name'       => __('Name'),\n                'privileges' => __('Privileges'),\n                'actions'    => '',\n            ], $groups_table),\n        ]);\n    } else {\n        switch ($request->input('action')) {\n            case 'edit':\n                if ($request->has('id')) {\n                    $group_id = (int) $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                /** @var Group|null $group */\n                $group = Group::find($group_id);\n                if (!empty($group)) {\n                    $privileges = groupPrivilegesWithSelected($group);\n                    $privileges_form = [];\n                    foreach ($privileges as $privilege) {\n                        $privileges_form[] = form_checkbox(\n                            'privileges[]',\n                            $privilege->description . ' (' . $privilege->name . ')',\n                            $privilege->selected != '',\n                            $privilege->id,\n                            'privilege-' . $privilege->name\n                        );\n                    }\n\n                    $privileges_form[] = form_submit('submit', __('Save'));\n                    $html .= page_with_title(__('Edit group') . ' ' . $group->name, [\n                        form(\n                            $privileges_form,\n                            page_link_to('admin_groups', ['action' => 'save', 'id' => $group->id])\n                        ),\n                    ]);\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n\n            case 'save':\n                if (\n                    $request->has('id')\n                    && $request->hasPostData('submit')\n                ) {\n                    $group_id = (int) $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                /** @var Group|null $group */\n                $group = Group::find($group_id);\n                $privileges = $request->request->all('privileges');\n                if (!empty($group)) {\n                    $group->privileges()->detach();\n                    $privilege_names = [];\n                    foreach ($privileges as $privilege) {\n                        $privilege = Privilege::find($privilege);\n                        if ($privilege) {\n                            $group->privileges()->attach($privilege);\n                            $privilege_names[] = $privilege->name;\n                        }\n                    }\n                    engelsystem_log(\n                        'Group privileges of group ' . $group->name\n                        . ' edited: ' . join(', ', $privilege_names)\n                    );\n                    throw_redirect(page_link_to('admin_groups'));\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n        }\n    }\n    return $html;\n}\n\n/**\n * @param Group $group\n * @return Collection|Privilege[]\n */\nfunction groupPrivilegesWithSelected(Group $group): Collection\n{\n    return Privilege::query()\n        ->join('group_privileges', function ($query) use ($group) {\n            /** @var JoinClause $query */\n            $query\n                ->where('privileges.id', '=', $query->raw('group_privileges.privilege_id'))\n                ->where('group_privileges.group_id', $group->id)\n            ;\n        }, null, null, 'left outer')\n        ->orderBy('name')\n        ->get([\n            'privileges.*',\n            'group_privileges.group_id as selected',\n        ]);\n}\n", "<?php\n\nuse Engelsystem\\Database\\Db;\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Http\\Exceptions\\HttpForbidden;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\NeededAngelType;\nuse Engelsystem\\Models\\Shifts\\Schedule;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Str;\n\n/**\n * @return string\n */\nfunction admin_shifts_title()\n{\n    return __('Create shifts');\n}\n\n/**\n * Assistent zum Anlegen mehrerer neuer Schichten\n *\n * @return string\n */\nfunction admin_shifts()\n{\n    $valid = true;\n    $request = request();\n    $session = session();\n    $start = Carbon::createFromDateTime(date('Y-m-d') . 'T00:00');\n    $end = $start;\n    $mode = 'multi';\n    $angelmode = 'manually';\n    $length = '';\n    $change_hours = [];\n    $title = '';\n    $shifttype_id = null;\n    $description = null;\n    // When true: creates a shift beginning at the last shift change hour and ending at the first shift change hour\n    $shift_over_midnight = true;\n\n    // Locations laden\n    $rooms = Room::orderBy('name')->get();\n    $room_array = $rooms->pluck('name', 'id')->toArray();\n\n    // Load angeltypes\n    /** @var AngelType[] $types */\n    $types = AngelType::all();\n    $needed_angel_types = [];\n    foreach ($types as $type) {\n        $needed_angel_types[$type->id] = 0;\n    }\n\n    // Load shift types\n    /** @var ShiftType[]|Collection $shifttypes_source */\n    $shifttypes_source = ShiftType::all();\n    $shifttypes = [];\n    foreach ($shifttypes_source as $shifttype) {\n        $shifttypes[$shifttype->id] = $shifttype->name;\n    }\n\n    if ($request->has('preview') || $request->has('back')) {\n        if ($request->has('shifttype_id')) {\n            $shifttype = ShiftType::find($request->input('shifttype_id'));\n            if (empty($shifttype)) {\n                $valid = false;\n                error(__('Please select a shift type.'));\n            } else {\n                $shifttype_id = $request->input('shifttype_id');\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a shift type.'));\n        }\n\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n\n        // Beschreibung der Schicht, darf leer sein\n        $description = strip_request_item_nl('description');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($room_array[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            $rid = $rooms->first()->id;\n            error(__('Please select a location.'));\n        }\n\n        if ($request->has('start') && $tmp = Carbon::createFromDateTime($request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select a start time.'));\n        }\n\n        if ($request->has('end') && $tmp = Carbon::createFromDateTime($request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select an end time.'));\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            error(__('The shifts end has to be after its start.'));\n        }\n\n        if ($request->has('mode')) {\n            if ($request->input('mode') == 'single') {\n                $mode = 'single';\n            } elseif ($request->input('mode') == 'multi') {\n                if ($request->has('length') && preg_match('/^\\d+$/', trim($request->input('length')))) {\n                    $mode = 'multi';\n                    $length = trim($request->input('length'));\n                } else {\n                    $valid = false;\n                    error(__('Please enter a shift duration in minutes.'));\n                }\n            } elseif ($request->input('mode') == 'variable') {\n                if (\n                    $request->has('change_hours')\n                    && preg_match(\n                        '/^(\\d{1,2}(:\\d{2})?(,|$))+$/',\n                        trim(str_replace(' ', '', $request->input('change_hours')))\n                    )\n                ) {\n                    $mode = 'variable';\n                    $change_hours = array_map(\n                        'trim',\n                        explode(',', $request->input('change_hours'))\n                    );\n                    // Fehlende Minutenangaben erg\u00e4nzen, 24 Uhr -> 00 Uhr\n                    array_walk($change_hours, function (&$value) use ($valid) {\n                        // Add minutes\n                        if (!preg_match('/^(\\d{1,2}):\\d{2}$/', $value)) {\n                            $value .= ':00';\n                        }\n                        // Add 0 before low hours\n                        if (preg_match('/^\\d:\\d{2}$/', $value)) {\n                            $value = '0' . $value;\n                        }\n                        // Fix 24:00\n                        if ($value == '24:00') {\n                            $value = '00:00';\n                        }\n                    });\n                    // Ensure valid time in change hours\n                    foreach ($change_hours as $change_hour) {\n                        if (!preg_match('/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/', $change_hour)) {\n                            $valid = false;\n                            error(sprintf(__('Please validate the change hour %s. It should be between 00:00 and 24:00.'), $change_hour));\n                        }\n                    }\n                    $change_hours = array_unique($change_hours);\n                } else {\n                    $valid = false;\n                    error(__('Please split the shift-change hours by colons.'));\n                }\n                $shift_over_midnight = $request->has('shift_over_midnight')\n                    && $request->input('shift_over_midnight') != 'false';\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a mode.'));\n        }\n\n        if ($request->has('angelmode')) {\n            if ($request->input('angelmode') == 'location') {\n                $angelmode = 'location';\n            } elseif ($request->input('angelmode') == 'manually') {\n                foreach ($types as $type) {\n                    if (preg_match('/^\\d+$/', trim($request->input('angeltype_count_' . $type->id, 0)))) {\n                        $needed_angel_types[$type->id] = trim($request->input('angeltype_count_' . $type->id, 0));\n                    } else {\n                        $valid = false;\n                        error(sprintf(__('Please check the needed angels for team %s.'), $type->name));\n                    }\n                }\n\n                if (array_sum($needed_angel_types) == 0) {\n                    $valid = false;\n                    error(__('There are 0 angels needed. Please enter the amounts of needed angels.'));\n                }\n            } else {\n                $valid = false;\n                error(__('Please select a mode for needed angels.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please select needed angels.'));\n        }\n\n        // Beim Zur\u00fcck-Knopf das Formular zeigen\n        if ($request->has('back')) {\n            $valid = false;\n        }\n\n        // Alle Eingaben in Ordnung\n        if ($valid) {\n            if ($angelmode == 'location') {\n                $needed_angel_types = NeededAngelType::whereRoomId($rid)\n                        ->pluck('count', 'angel_type_id')\n                        ->toArray() + $needed_angel_types;\n            }\n\n            $shifts = [];\n            if ($mode == 'single') {\n                $shifts[] = [\n                    'start'         => $start,\n                    'end'           => $end,\n                    'room_id'       => $rid,\n                    'title'         => $title,\n                    'shift_type_id' => $shifttype_id,\n                    'description'   => $description,\n                ];\n            } elseif ($mode == 'multi') {\n                $shift_start = $start;\n                do {\n                    $shift_end = (clone $shift_start)->addSeconds((int) $length * 60);\n\n                    if ($shift_end > $end) {\n                        $shift_end = $end;\n                    }\n                    if ($shift_start >= $shift_end) {\n                        break;\n                    }\n\n                    $shifts[] = [\n                        'start'         => $shift_start,\n                        'end'           => $shift_end,\n                        'room_id'       => $rid,\n                        'title'         => $title,\n                        'shift_type_id' => $shifttype_id,\n                        'description'   => $description,\n                    ];\n\n                    $shift_start = $shift_end;\n                } while ($shift_end < $end);\n            } elseif ($mode == 'variable') {\n                // Alle Tage durchgehen\n                $end_day = Carbon::createFromDatetime($end->format('Y-m-d') . ' 00:00');\n                $day = Carbon::createFromDatetime($start->format('Y-m-d') . ' 00:00');\n                do {\n                    // Alle Schichtwechselstunden durchgehen\n                    for ($i = 0; $i < count($change_hours); $i++) {\n                        $start_hour = $change_hours[$i];\n                        if (isset($change_hours[$i + 1])) {\n                            // Normales Intervall zwischen zwei Schichtwechselstunden\n                            $end_hour = $change_hours[$i + 1];\n                        } elseif ($shift_over_midnight && $day != $end_day) {\n                            // Letzte Schichtwechselstunde: Wenn eine 24h Abdeckung gew\u00fcnscht ist,\n                            // hier die erste Schichtwechselstunde als Ende einsetzen\n                            $end_hour = $change_hours[0];\n                        } else {\n                            // Letzte Schichtwechselstunde: Keine Schicht erstellen\n                            break;\n                        }\n\n                        $interval_start = Carbon::createFromDatetime($day->format('Y-m-d') . ' ' . $start_hour);\n                        if (str_replace(':', '', $end_hour) < str_replace(':', '', $start_hour)) {\n                            // Endstunde kleiner Startstunde? Dann sind wir im n\u00e4chsten Tag gelandet\n                            $interval_end = Carbon::createFromDatetime(date('Y-m-d', $day->timestamp + 36 * 60 * 60) . ' ' . $end_hour);\n                        } else {\n                            // Endstunde ist noch im selben Tag\n                            $interval_end = Carbon::createFromDatetime($day->format('Y-m-d', $day) . ' ' . $end_hour);\n                        }\n\n                        // Liegt das Intervall vor dem Startzeitpunkt -> \u00dcberspringen\n                        if ($interval_end <= $start) {\n                            continue;\n                        }\n\n                        // Liegt das Intervall nach dem Endzeitpunkt -> \u00dcberspringen\n                        if ($interval_start >= $end) {\n                            continue;\n                        }\n\n                        // Liegt nur der Schichtstart vor dem Startzeitpunkt -> Startzeitpunkt \u00fcbernehmen\n                        if ($interval_start < $start) {\n                            $interval_start = $start;\n                        }\n\n                        // Liegt nur das Schichtende nach dem Endzeitpunkt -> Endzeitpunkt \u00fcbernehmen\n                        if ($interval_end > $end) {\n                            $interval_end = $end;\n                        }\n\n                        // Intervall f\u00fcr Schicht hinzuf\u00fcgen\n                        $shifts[] = [\n                            'start'         => $interval_start,\n                            'end'           => $interval_end,\n                            'room_id'       => $rid,\n                            'title'         => $title,\n                            'shift_type_id' => $shifttype_id,\n                            'description'   => $description,\n                        ];\n                    }\n\n                    $day = Carbon::createFromDatetime(date('Y-m-d', $day->timestamp + 36 * 60 * 60) . ' 00:00');\n                } while ($day <= $end_day);\n\n                usort($shifts, function ($a, $b) {\n                    return $a['start'] < $b['start'] ? -1 : 1;\n                });\n            }\n\n            $shifts_table = [];\n            foreach ($shifts as $shift) {\n                /** @var Carbon $start */\n                $start = $shift['start'];\n                /** @var Carbon $end */\n                $end = $shift['end'];\n                $shifts_table_entry = [\n                    'timeslot'      =>\n                        icon('clock-history') . ' '\n                        . $start->format(__('Y-m-d H:i'))\n                        . ' - '\n                        . '<span title=\"' . $end->format(__('Y-m-d')) . '\">'\n                        . $end->format(__('H:i'))\n                        . '</span>'\n                        . ', ' . round($end->copy()->diffInMinutes($start) / 60, 2) . 'h'\n                        . '<br>'\n                        . Room_name_render(Room::find($shift['room_id'])),\n                    'title'         =>\n                        ShiftType_name_render(ShiftType::find($shifttype_id))\n                        . ($shift['title'] ? '<br />' . $shift['title'] : ''),\n                    'needed_angels' => '',\n                ];\n                foreach ($types as $type) {\n                    if (isset($needed_angel_types[$type->id]) && $needed_angel_types[$type->id] > 0) {\n                        $shifts_table_entry['needed_angels'] .= '<b>' . AngelType_name_render($type) . ':</b> '\n                            . $needed_angel_types[$type->id] . '<br />';\n                    }\n                }\n                $shifts_table[] = $shifts_table_entry;\n            }\n\n            // F\u00fcrs Anlegen zwischenspeichern:\n            $session->set('admin_shifts_shifts', $shifts);\n            $session->set('admin_shifts_types', $needed_angel_types);\n\n            $hidden_types = '';\n            foreach ($needed_angel_types as $type_id => $count) {\n                $hidden_types .= form_hidden('angeltype_count_' . $type_id, $count);\n            }\n\n            // Number of Shifts that will be created (if over 100 its danger-red)\n            $shiftsCount = count($shifts_table);\n            $shiftsCreationHint = __('Number of shifts: %s', [$shiftsCount]);\n            if ($shiftsCount >= 100) {\n                $shiftsCreationHint = '<span class=\"text-danger\">' . $shiftsCreationHint . '</span>';\n            }\n\n            return page_with_title(__('Preview'), [\n                form([\n                    $hidden_types,\n                    form_hidden('shifttype_id', $shifttype_id),\n                    form_hidden('description', $description),\n                    form_hidden('title', $title),\n                    form_hidden('rid', $rid),\n                    form_hidden('start', $request->input('start')),\n                    form_hidden('end', $request->input('end')),\n                    form_hidden('mode', $mode),\n                    form_hidden('length', $length),\n                    form_hidden('change_hours', implode(', ', $change_hours)),\n                    form_hidden('angelmode', $angelmode),\n                    form_hidden('shift_over_midnight', $shift_over_midnight ? 'true' : 'false'),\n                    form_submit('back', icon('chevron-left') . __('back')),\n                    $shiftsCreationHint,\n                    table([\n                        'timeslot'      => __('Time and location'),\n                        'title'         => __('Type and title'),\n                        'needed_angels' => __('Needed angels'),\n                    ], $shifts_table),\n                    form_submit('submit', icon('save') . __('Save')),\n                ]),\n            ]);\n        }\n    } elseif ($request->hasPostData('submit')) {\n        if (\n            !is_array($session->get('admin_shifts_shifts'))\n            || !is_array($session->get('admin_shifts_types'))\n        ) {\n            throw_redirect(page_link_to('admin_shifts'));\n        }\n\n        $transactionId = Str::uuid();\n        foreach ($session->get('admin_shifts_shifts', []) as $shift) {\n            $shift = new Shift($shift);\n            $shift->url = '';\n            $shift->transaction_id = $transactionId;\n            $shift->createdBy()->associate(auth()->user());\n            $shift->save();\n\n            engelsystem_log(\n                'Shift created: ' . $shifttypes[$shift->shift_type_id]\n                . ' with title ' . $shift->title\n                . ' with description ' . $shift->description\n                . ' from ' . $shift->start->format('Y-m-d H:i')\n                . ' to ' . $shift->end->format('Y-m-d H:i')\n                . ', transaction: ' . $transactionId\n            );\n\n            $needed_angel_types_info = [];\n            foreach ($session->get('admin_shifts_types', []) as $type_id => $count) {\n                $angel_type_source = AngelType::find($type_id);\n                if (!empty($angel_type_source) && $count > 0) {\n                    $neededAngelType = new NeededAngelType();\n                    $neededAngelType->shift()->associate($shift);\n                    $neededAngelType->angelType()->associate($angel_type_source);\n                    $neededAngelType->count = $count;\n                    $neededAngelType->save();\n\n                    $needed_angel_types_info[] = $angel_type_source->name . ': ' . $count;\n                }\n            }\n            engelsystem_log('Shift needs following angel types: ' . join(', ', $needed_angel_types_info));\n        }\n\n        success('Shifts created.');\n        throw_redirect(page_link_to('admin_shifts'));\n    } else {\n        $session->remove('admin_shifts_shifts');\n        $session->remove('admin_shifts_types');\n    }\n\n    $rid = null;\n    if ($request->has('rid')) {\n        $rid = $request->input('rid');\n    }\n    $angel_types = '';\n    foreach ($types as $type) {\n        $angel_types .= '<div class=\"col-sm-6 col-md-8 col-lg-6 col-xl-4 col-xxl-3\">'\n            . form_spinner(\n                'angeltype_count_' . $type->id,\n                $type->name,\n                $needed_angel_types[$type->id],\n                [\n                    'radio-name'  => 'angelmode',\n                    'radio-value' => 'manually',\n                ]\n            )\n            . '</div>';\n    }\n\n    return page_with_title(\n        admin_shifts_title() . ' ' . sprintf(\n            '<a href=\"%s\">%s</a>',\n            page_link_to('admin_shifts_history'),\n            icon('clock-history')\n        ),\n        [\n            msg(),\n            form([\n                div('row', [\n                    div('col-md-6 col-xl-5', [\n                        form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                        form_text('title', __('Title'), $title),\n                        form_select('rid', __('Room'), $room_array, $rid),\n                    ]),\n                    div('col-md-6 col-xl-7', [\n                        form_textarea('description', __('Additional description'), $description),\n                        __('This description is for single shifts, otherwise please use the description in shift type.'),\n                    ]),\n                ]),\n                div('row', [\n                    div('col-md-6 col-xl-5', [\n                        div('row', [\n                            div('col-lg-6', [\n                                form_datetime(\n                                    'start',\n                                    __('Start'),\n                                    $request->has('start')\n                                        ? Carbon::createFromDatetime($request->input('start'))\n                                        : $start\n                                ),\n                            ]),\n                            div('col-lg-6', [\n                                form_datetime(\n                                    'end',\n                                    __('End'),\n                                    $request->has('end')\n                                        ? Carbon::createFromDatetime($request->input('end'))\n                                        : $end\n                                ),\n                            ]),\n                        ]),\n                        form_info(__('Mode')),\n                        form_radio('mode', __('Create one shift'), $mode == 'single', 'single'),\n                        form_radio('mode', __('Create multiple shifts'), $mode == 'multi', 'multi'),\n                        form_text(\n                            'length',\n                            __('Length'),\n                            $request->has('length')\n                                ? $request->input('length')\n                                : '120',\n                            false,\n                            null,\n                            null,\n                            '',\n                            [\n                                'radio-name'  => 'mode',\n                                'radio-value' => 'multi',\n                            ]\n                        ),\n                        form_radio(\n                            'mode',\n                            __('Create multiple shifts with variable length'),\n                            $mode == 'variable',\n                            'variable'\n                        ),\n                        form_text(\n                            'change_hours',\n                            __('Shift change hours'),\n                            $request->has('change_hours')\n                                ? ($change_hours ? implode(', ', $change_hours) : $request->input('change_hours'))\n                                : '00, 04, 08, 10, 12, 14, 16, 18, 20, 22',\n                            false,\n                            null,\n                            null,\n                            '',\n                            [\n                                'radio-name'  => 'mode',\n                                'radio-value' => 'variable',\n                            ]\n                        ),\n                        form_checkbox(\n                            'shift_over_midnight',\n                            __('Create a shift over midnight.'),\n                            $shift_over_midnight\n                        ),\n                    ]),\n                    div('col-md-6 col-xl-7', [\n                        form_info(__('Needed angels')),\n                        form_radio(\n                            'angelmode',\n                            __('Take needed angels from room settings'),\n                            $angelmode == 'location',\n                            'location'\n                        ),\n                        form_radio(\n                            'angelmode',\n                            __('The following angels are needed'),\n                            $angelmode == 'manually',\n                            'manually'\n                        ),\n                        div('row', [\n                            $angel_types,\n                        ]),\n                    ]),\n                ]),\n                form_submit('preview', icon('search') . __('Preview')),\n            ]),\n        ]\n    );\n}\n\nfunction admin_shifts_history_title(): string\n{\n    return __('Shifts history');\n}\n\n/**\n * Display shifts transaction history\n *\n * @return string\n */\nfunction admin_shifts_history(): string\n{\n    if (!auth()->can('admin_shifts')) {\n        throw new HttpForbidden();\n    }\n\n    $request = request();\n    $transactionId = $request->postData('transaction_id');\n    if ($request->hasPostData('delete') && $transactionId) {\n        $shifts = Shift::whereTransactionId($transactionId)->get();\n\n        engelsystem_log('Deleting ' . count($shifts) . ' shifts (transaction id ' . $transactionId . ')');\n\n        foreach ($shifts as $shift) {\n            $shift = Shift($shift);\n            foreach ($shift->shiftEntries as $entry) {\n                event('shift.entry.deleting', [\n                    'user'       => $entry->user,\n                    'start'      => $shift->start,\n                    'end'        => $shift->end,\n                    'name'       => $shift->shiftType->name,\n                    'title'      => $shift->title,\n                    'type'       => $entry->angelType->name,\n                    'room'       => $shift->room,\n                    'freeloaded' => $entry->freeloaded,\n                ]);\n            }\n\n            $shift->delete();\n\n            engelsystem_log(\n                'Deleted shift ' . $shift->title . ' / ' . $shift->shiftType->name\n                . ' from ' . $shift->start->format('Y-m-d H:i')\n                . ' to ' . $shift->end->format('Y-m-d H:i')\n            );\n        }\n\n        success(sprintf(__('%s shifts deleted.'), count($shifts)));\n        throw_redirect(page_link_to('admin_shifts_history'));\n    }\n\n    $schedules = Schedule::all()->pluck('name', 'id')->toArray();\n    $shiftsData = Db::select('\n        SELECT\n            s.transaction_id,\n            s.title,\n            schedule_shift.schedule_id,\n            COUNT(s.id) AS count,\n            MIN(s.start) AS start,\n            MAX(s.end) AS end,\n            s.created_by AS user_id,\n            MAX(s.created_at) AS created_at\n        FROM shifts AS s\n        LEFT JOIN schedule_shift on schedule_shift.shift_id = s.id\n        WHERE s.transaction_id IS NOT NULL\n        GROUP BY s.transaction_id\n        ORDER BY created_at DESC\n    ');\n\n    foreach ($shiftsData as &$shiftData) {\n        $shiftData['title'] = $shiftData['schedule_id'] ? __('shifts_history.schedule', [$schedules[$shiftData['schedule_id']]]) : $shiftData['title'];\n        $shiftData['user'] = User_Nick_render(User::find($shiftData['user_id']));\n        $shiftData['start'] = Carbon::make($shiftData['start'])->format(__('Y-m-d H:i'));\n        $shiftData['end'] = Carbon::make($shiftData['end'])->format(__('Y-m-d H:i'));\n        $shiftData['created_at'] = Carbon::make($shiftData['created_at'])->format(__('Y-m-d H:i'));\n        $shiftData['actions'] = form([\n            form_hidden('transaction_id', $shiftData['transaction_id']),\n            form_submit('delete', icon('trash') . __('delete all'), 'btn-sm', true, 'danger'),\n        ]);\n    }\n\n    return page_with_title(admin_shifts_history_title(), [\n        msg(),\n        table([\n            'transaction_id' => __('ID'),\n            'title'          => __('Title'),\n            'count'          => __('Count'),\n            'start'          => __('Start'),\n            'end'            => __('End'),\n            'user'           => __('User'),\n            'created_at'     => __('Created'),\n            'actions'        => '',\n        ], $shiftsData),\n    ], true);\n}\n", "<?php\n\nuse Engelsystem\\Config\\GoodieType;\nuse Engelsystem\\Http\\Validation\\Rules\\Username;\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Query\\JoinClause;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @return string\n */\nfunction admin_user_title()\n{\n    return __('All Angels');\n}\n\n/**\n * @return string\n */\nfunction admin_user()\n{\n    $user = auth()->user();\n    $tshirt_sizes = config('tshirt_sizes');\n    $request = request();\n    $html = '';\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n\n    if (!$request->has('id')) {\n        throw_redirect(users_link());\n    }\n\n    $user_id = $request->input('id');\n    if (!$request->has('action')) {\n        $user_source = User::find($user_id);\n        if (!$user_source) {\n            error(__('This user does not exist.'));\n            throw_redirect(users_link());\n        }\n\n        $html .= __('Here you can change the user entry. Under the item \\'Arrived\\' the angel is marked as present, a yes at Active means that the angel was active.');\n        if ($goodie_enabled) {\n            if ($goodie_tshirt) {\n                $html .= ' ' . __('If the angel is active, it can claim a T-shirt. If T-shirt is set to \\'Yes\\', the angel already got their T-shirt.');\n            } else {\n                $html .= ' ' . __('If the angel is active, it can claim a goodie. If goodie is set to \\'Yes\\', the angel already got their goodie.');\n            }\n        }\n        $html .= '<br /><br />';\n        $html .= '<form action=\"'\n            . page_link_to('admin_user', ['action' => 'save', 'id' => $user_id])\n            . '\" method=\"post\">' . \"\\n\";\n        $html .= form_csrf();\n        $html .= '<table>' . \"\\n\";\n        $html .= '<input type=\"hidden\" name=\"Type\" value=\"Normal\">' . \"\\n\";\n        $html .= '<tr><td>' . \"\\n\";\n        $html .= '<table>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Nickname') . '</td><td>' . '<input size=\"40\" name=\"eNick\" value=\"' . $user_source->name . '\" class=\"form-control\" maxlength=\"24\"></td></tr>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Last login') . '</td><td><p class=\"help-block\">'\n            . ($user_source->last_login_at ? $user_source->last_login_at->format(__('Y-m-d H:i')) : '-')\n            . '</p></td></tr>' . \"\\n\";\n        if (config('enable_user_name')) {\n            $html .= '  <tr><td>' . __('Prename') . '</td><td>' . '<input size=\"40\" name=\"eName\" value=\"' . $user_source->personalData->last_name . '\" class=\"form-control\" maxlength=\"64\"></td></tr>' . \"\\n\";\n            $html .= '  <tr><td>' . __('Last name') . '</td><td>' . '<input size=\"40\" name=\"eVorname\" value=\"' . $user_source->personalData->first_name . '\" class=\"form-control\" maxlength=\"64\"></td></tr>' . \"\\n\";\n        }\n        $html .= '  <tr><td>' . __('Mobile') . '</td><td>' . '<input type= \"tel\" size=\"40\" name=\"eHandy\" value=\"' . $user_source->contact->mobile . '\" class=\"form-control\" maxlength=\"40\"></td></tr>' . \"\\n\";\n        if (config('enable_dect')) {\n            $html .= '  <tr><td>' . __('DECT') . '</td><td>' . '<input size=\"40\" name=\"eDECT\" value=\"' . $user_source->contact->dect . '\" class=\"form-control\" maxlength=\"40\"></td></tr>' . \"\\n\";\n        }\n        if ($user_source->settings->email_human) {\n            $html .= '  <tr><td>' . __('settings.profile.email') . '</td><td>' . '<input type=\"email\" size=\"40\" name=\"eemail\" value=\"' . $user_source->email . '\" class=\"form-control\" maxlength=\"254\"></td></tr>' . \"\\n\";\n        }\n        if ($goodie_tshirt) {\n            $html .= '  <tr><td>' . __('user.shirt_size') . '</td><td>'\n                . html_select_key(\n                    'size',\n                    'eSize',\n                    $tshirt_sizes,\n                    $user_source->personalData->shirt_size,\n                    __('form.select_placeholder')\n                )\n                . '</td></tr>' . \"\\n\";\n        }\n\n        $options = [\n            '1' => __('Yes'),\n            '0' => __('No'),\n        ];\n\n        // Gekommen?\n        $html .= '  <tr><td>' . __('Arrived') . '</td><td>' . \"\\n\";\n        if ($user_source->state->arrived) {\n            $html .= __('Yes');\n        } else {\n            $html .= __('No');\n        }\n        $html .= '</td></tr>' . \"\\n\";\n\n        // Aktiv?\n        $html .= '  <tr><td>' . __('user.active') . '</td><td>' . \"\\n\";\n        $html .= html_options('eAktiv', $options, $user_source->state->active) . '</td></tr>' . \"\\n\";\n\n        // Aktiv erzwingen\n        if (auth()->can('admin_active')) {\n            $html .= '  <tr><td>' . __('Force active') . '</td><td>' . \"\\n\";\n            $html .= html_options('force_active', $options, $user_source->state->force_active) . '</td></tr>' . \"\\n\";\n        }\n\n        if ($goodie_enabled) {\n            // T-Shirt bekommen?\n            if ($goodie_tshirt) {\n                $html .= '  <tr><td>' . __('T-Shirt') . '</td><td>' . \"\\n\";\n            } else {\n                $html .= '  <tr><td>' . __('Goodie') . '</td><td>' . \"\\n\";\n            }\n            $html .= html_options('eTshirt', $options, $user_source->state->got_shirt) . '</td></tr>' . \"\\n\";\n        }\n        $html .= '</table>' . \"\\n\" . '</td><td></td></tr>';\n\n        $html .= '</td></tr>' . \"\\n\";\n        $html .= '</table>' . \"\\n\" . '<br />' . \"\\n\";\n        $html .= '<button type=\"submit\" class=\"btn btn-primary\">' . __('form.save') . '</button>' . \"\\n\";\n        $html .= '</form>';\n\n        $html .= '<hr />';\n\n        $html .= form_info('', __('Please visit the angeltypes page or the users profile to manage the users angeltypes.'));\n\n        $html .= ' ' . __('Here you can reset the password of this angel:') . '<form action=\"'\n            . page_link_to('admin_user', ['action' => 'change_pw', 'id' => $user_id])\n            . '\" method=\"post\">' . \"\\n\";\n        $html .= form_csrf();\n        $html .= '<table>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Password') . '</td><td>' . '<input type=\"password\" size=\"40\" name=\"new_pw\" value=\"\" class=\"form-control\" autocomplete=\"new-password\"></td></tr>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Confirm password') . '</td><td>' . '<input type=\"password\" size=\"40\" name=\"new_pw2\" value=\"\" class=\"form-control\" autocomplete=\"new-password\"></td></tr>' . \"\\n\";\n\n        $html .= '</table>' . \"\\n\" . '<br />' . \"\\n\";\n        $html .= '<button type=\"submit\" class=\"btn btn-primary\">' . __('form.save') . '</button>' . \"\\n\";\n        $html .= '</form>';\n\n        $html .= '<hr />';\n\n        /** @var Group $my_highest_group */\n        $my_highest_group = $user->groups()->orderByDesc('id')->first();\n        if (!empty($my_highest_group)) {\n            $my_highest_group = $my_highest_group->id;\n        }\n\n        $angel_highest_group = $user_source->groups()->orderByDesc('id')->first();\n        if (!empty($angel_highest_group)) {\n            $angel_highest_group = $angel_highest_group->id;\n        }\n\n        if (\n            ($user_id != $user->id || auth()->can('admin_groups'))\n            && ($my_highest_group >= $angel_highest_group || is_null($angel_highest_group))\n        ) {\n            $html .= __('Here you can define the user groups of the angel:') . '<form action=\"'\n                . page_link_to('admin_user', ['action' => 'save_groups', 'id' => $user_id])\n                . '\" method=\"post\">' . \"\\n\";\n            $html .= form_csrf();\n            $html .= '<div>';\n\n            $groups = changeableGroups($my_highest_group, $user_id);\n            foreach ($groups as $group) {\n                $html .= '<div class=\"form-check\">'\n                    . '<input class=\"form-check-input\" type=\"checkbox\" id=\"' . $group->id . '\" name=\"groups[]\" value=\"' . $group->id . '\" '\n                    . ($group->selected ? ' checked=\"checked\"' : '')\n                    . ' /><label class=\"form-check-label\" for=\"' . $group->id . '\">' . $group->name . '</label></div>';\n            }\n\n            $html .= '</div><br>';\n\n            $html .= '<button type=\"submit\" class=\"btn btn-primary\">' . __('form.save') . '</button>' . \"\\n\";\n            $html .= '</form>';\n\n            $html .= '<hr />';\n        }\n\n        $html .= buttons([\n            button(user_delete_link($user_source->id), icon('trash') . __('delete'), 'btn-danger'),\n        ]);\n\n        $html .= '<hr>';\n    } else {\n        switch ($request->input('action')) {\n            case 'save_groups':\n                $angel = User::findOrFail($user_id);\n                if ($angel->id != $user->id || auth()->can('admin_groups')) {\n                    /** @var Group $my_highest_group */\n                    $my_highest_group = $user->groups()->orderByDesc('id')->first();\n                    /** @var Group $angel_highest_group */\n                    $angel_highest_group = $angel->groups()->orderByDesc('id')->first();\n\n                    if (\n                        $my_highest_group\n                        && (\n                            empty($angel_highest_group)\n                            || ($my_highest_group->id >= $angel_highest_group->id)\n                        )\n                    ) {\n                        $groups_source = changeableGroups($my_highest_group->id, $angel->id);\n                        $groups = [];\n                        $groupList = [];\n                        foreach ($groups_source as $group) {\n                            $groups[$group->id] = $group;\n                            $groupList[] = $group->id;\n                        }\n\n                        $groupsRequest = $request->input('groups');\n                        if (!is_array($groupsRequest)) {\n                            $groupsRequest = [];\n                        }\n\n                        $angel->groups()->detach();\n                        $user_groups_info = [];\n                        foreach ($groupsRequest as $group) {\n                            if (in_array($group, $groupList)) {\n                                $group = $groups[$group];\n                                $angel->groups()->attach($group);\n                                $user_groups_info[] = $group->name;\n                            }\n                        }\n                        engelsystem_log(\n                            'Set groups of ' . User_Nick_render($angel, true) . ' to: '\n                            . join(', ', $user_groups_info)\n                        );\n                        $html .= success(__('User groups saved.'), true);\n                    } else {\n                        $html .= error(__('You cannot edit angels with more rights.'), true);\n                    }\n                } else {\n                    $html .= error(__('You cannot edit your own rights.'), true);\n                }\n                break;\n\n            case 'save':\n                $force_active = $user->state->force_active;\n                $user_source = User::find($user_id);\n                if (auth()->can('admin_active')) {\n                    $force_active = $request->input('force_active');\n                }\n                if ($user_source->settings->email_human) {\n                    $user_source->email = $request->postData('eemail');\n                }\n\n                $nick = trim($request->get('eNick'));\n                $nickValid = (new Username())->validate($nick);\n\n                if ($nickValid) {\n                    $user_source->name = $nick;\n                }\n                $user_source->save();\n\n                if (config('enable_user_name')) {\n                    $user_source->personalData->first_name = $request->postData('eVorname');\n                    $user_source->personalData->last_name = $request->postData('eName');\n                }\n                if ($goodie_tshirt) {\n                    $user_source->personalData->shirt_size = $request->postData('eSize');\n                }\n                $user_source->personalData->save();\n\n                $user_source->contact->mobile = $request->postData('eHandy');\n                $user_source->contact->dect = $request->postData('eDECT');\n                $user_source->contact->save();\n\n                if ($goodie_enabled) {\n                    $user_source->state->got_shirt = $request->postData('eTshirt');\n                }\n                $user_source->state->active = $request->postData('eAktiv');\n                $user_source->state->force_active = $force_active;\n                $user_source->state->save();\n\n                engelsystem_log(\n                    'Updated user: ' . $user_source->name . ' (' . $user_source->id . ')'\n                    . ($goodie_tshirt ? ', t-shirt: ' : '' . $user_source->personalData->shirt_size)\n                    . ', active: ' . $user_source->state->active\n                    . ', force-active: ' . $user_source->state->force_active\n                    . ($goodie_tshirt ? ', tshirt: ' : ', goodie: ' . $user_source->state->got_shirt)\n                );\n                $html .= success(__('Changes were saved.') . \"\\n\", true);\n                break;\n\n            case 'change_pw':\n                if (\n                    $request->postData('new_pw') != ''\n                    && $request->postData('new_pw') == $request->postData('new_pw2')\n                ) {\n                    $user_source = User::find($user_id);\n                    auth()->setPassword($user_source, $request->postData('new_pw'));\n                    engelsystem_log('Set new password for ' . User_Nick_render($user_source, true));\n                    $html .= success(__('Password reset done.'), true);\n                } else {\n                    $html .= error(\n                        __('The entries must match and must not be empty!'),\n                        true\n                    );\n                }\n                break;\n        }\n    }\n\n    return page_with_title(__('Edit user'), [\n        $html,\n    ]);\n}\n\n/**\n * @param $myHighestGroup\n * @param $angelId\n * @return Collection|Group[]\n */\nfunction changeableGroups($myHighestGroup, $angelId): Collection\n{\n    return Group::query()\n        ->where('groups.id', '<=', $myHighestGroup)\n        ->join('users_groups', function ($query) use ($angelId) {\n            /** @var JoinClause $query */\n            $query->where('users_groups.group_id', '=', $query->raw('groups.id'))\n                ->where('users_groups.user_id', $angelId);\n        }, null, null, 'left outer')\n        ->orderBy('name')\n        ->get([\n            'groups.*',\n            'users_groups.group_id as selected',\n        ]);\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Database\\Database;\nuse Engelsystem\\Events\\Listener\\OAuth2;\nuse Engelsystem\\Config\\GoodieType;\nuse Engelsystem\\Http\\Validation\\Rules\\Username;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\OAuth;\nuse Engelsystem\\Models\\User\\Contact;\nuse Engelsystem\\Models\\User\\PersonalData;\nuse Engelsystem\\Models\\User\\Settings;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Connection;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\n/**\n * @return string\n */\nfunction register_title()\n{\n    return __('Register');\n}\n\n/**\n * Engel registrieren\n *\n * @return string\n */\nfunction guest_register()\n{\n    $authUser = auth()->user();\n    $tshirt_sizes = config('tshirt_sizes');\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $enable_user_name = config('enable_user_name');\n    $enable_dect = config('enable_dect');\n    $enable_planned_arrival = config('enable_planned_arrival');\n    $min_password_length = config('min_password_length');\n    $enable_password = config('enable_password');\n    $enable_pronoun = config('enable_pronoun');\n    $enable_mobile_show = config('enable_mobile_show');\n    $config = config();\n    $request = request();\n    $session = session();\n    /** @var Connection $db */\n    $db = app(Database::class)->getConnection();\n    $is_oauth = $session->has('oauth2_connect_provider');\n\n    $msg = '';\n    $nick = '';\n    $lastName = '';\n    $preName = '';\n    $dect = '';\n    $mobile = '';\n    $mobile_show = false;\n    $email = '';\n    $pronoun = '';\n    $email_shiftinfo = false;\n    $email_by_human_allowed = false;\n    $email_messages = false;\n    $email_news = false;\n    $email_goody = false;\n    $tshirt_size = '';\n    $password_hash = '';\n    $selected_angel_types = [];\n    $planned_arrival_date = null;\n\n    /** @var AngelType[]|Collection $angel_types_source */\n    $angel_types_source = AngelType::all();\n    $angel_types = [];\n    if (!empty($session->get('oauth2_groups'))) {\n        /** @var OAuth2 $oauth */\n        $oauth = app()->get(OAuth2::class);\n        $ssoTeams = $oauth->getSsoTeams($session->get('oauth2_connect_provider'));\n        foreach ($ssoTeams as $name => $team) {\n            if (in_array($name, $session->get('oauth2_groups'))) {\n                $selected_angel_types[] = $team['id'];\n            }\n        }\n    }\n    foreach ($angel_types_source as $angel_type) {\n        if ($angel_type->hide_register) {\n            continue;\n        }\n        $angel_types[$angel_type->id] = $angel_type->name\n            . ($angel_type->restricted ? ' (' . __('Requires introduction') . ')' : '');\n        if (!$angel_type->restricted) {\n            $selected_angel_types[] = $angel_type->id;\n        }\n    }\n\n    $oauth_enable_password = $session->get('oauth2_enable_password');\n    if (!is_null($oauth_enable_password)) {\n        $enable_password = $oauth_enable_password;\n    }\n\n    if (\n        !auth()->can('register') // No registration permission\n        // Not authenticated and\n        || (!$authUser && !config('registration_enabled') && !$session->get('oauth2_allow_registration')) // Registration disabled\n        || (!$authUser && !$enable_password && !$is_oauth) // Password disabled and not oauth\n    ) {\n        error(__('Registration is disabled.'));\n\n        return page_with_title(register_title(), [\n            msg(),\n        ]);\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('username')) {\n            $nick = trim($request->get('username'));\n            $nickValid = (new Username())->validate($nick);\n\n            if (!$nickValid) {\n                $valid = false;\n                $msg .= error(sprintf(\n                    __('Please enter a valid nick.') . ' ' . __('Use up to 24 letters, numbers or connecting punctuations for your nickname.'),\n                    $nick\n                ), true);\n            }\n            if (User::whereName($nick)->count() > 0) {\n                $valid = false;\n                $msg .= error(sprintf(__('Your nick \"%s\" already exists.'), htmlspecialchars($nick)), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter a nickname.'), true);\n        }\n\n        if ($request->has('mobile_show') && $enable_mobile_show) {\n            $mobile_show = true;\n        }\n\n        if ($request->has('email') && strlen(strip_request_item('email')) > 0) {\n            $email = strip_request_item('email');\n            if (!check_email($email)) {\n                $valid = false;\n                $msg .= error(__('E-mail address is not correct.'), true);\n            }\n            if (User::whereEmail($email)->first()) {\n                $valid = false;\n                $msg .= error(__('E-mail address is already used by another user.'), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter your e-mail.'), true);\n        }\n\n        if ($request->has('email_shiftinfo')) {\n            $email_shiftinfo = true;\n        }\n\n        if ($request->has('email_by_human_allowed')) {\n            $email_by_human_allowed = true;\n        }\n\n        if ($request->has('email_messages')) {\n            $email_messages = true;\n        }\n\n        if ($request->has('email_news')) {\n            $email_news = true;\n        }\n\n        if ($request->has('email_goody')) {\n            $email_goody = true;\n        }\n\n        if ($goodie_tshirt) {\n            if ($request->has('tshirt_size') && isset($tshirt_sizes[$request->input('tshirt_size')])) {\n                $tshirt_size = $request->input('tshirt_size');\n            } else {\n                $valid = false;\n                $msg .= error(__('Please select your shirt size.'), true);\n            }\n        }\n\n        if ($enable_password && $request->has('password') && strlen($request->postData('password')) >= $min_password_length) {\n            if ($request->postData('password') != $request->postData('password2')) {\n                $valid = false;\n                $msg .= error(__('Your passwords don\\'t match.'), true);\n            }\n        } elseif ($enable_password) {\n            $valid = false;\n            $msg .= error(sprintf(\n                __('Your password is too short (please use at least %s characters).'),\n                $min_password_length\n            ), true);\n        }\n\n        if ($request->has('planned_arrival_date') && $enable_planned_arrival) {\n            $tmp = parse_date('Y-m-d H:i', $request->input('planned_arrival_date') . ' 00:00');\n            $result = User_validate_planned_arrival_date($tmp);\n            $planned_arrival_date = $result->getValue();\n            if (!$result->isValid()) {\n                $valid = false;\n                error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n            }\n        } elseif ($enable_planned_arrival) {\n            $valid = false;\n            error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n        }\n\n        $selected_angel_types = [];\n        foreach (array_keys($angel_types) as $angel_type_id) {\n            if ($request->has('angel_types_' . $angel_type_id)) {\n                $selected_angel_types[] = $angel_type_id;\n            }\n        }\n\n        // Trivia\n        if ($enable_user_name && $request->has('lastname')) {\n            $lastName = strip_request_item('lastname');\n        }\n        if ($enable_user_name && $request->has('prename')) {\n            $preName = strip_request_item('prename');\n        }\n        if ($enable_pronoun && $request->has('pronoun')) {\n            $pronoun = strip_request_item('pronoun');\n        }\n        if ($enable_dect && $request->has('dect')) {\n            if (strlen(strip_request_item('dect')) <= 40) {\n                $dect = strip_request_item('dect');\n            } else {\n                $valid = false;\n                error(__('For dect numbers are only 40 digits allowed.'));\n            }\n        }\n        if ($request->has('mobile')) {\n            $mobile = strip_request_item('mobile');\n        }\n\n        if ($valid) {\n            // Safeguard against partially created user data\n            $db->beginTransaction();\n\n            $user = new User([\n                'name'          => $nick,\n                'password'      => $password_hash,\n                'email'         => $email,\n                'api_key'       => '',\n                'last_login_at' => null,\n            ]);\n            $user->save();\n\n            $contact = new Contact([\n                'dect'   => $dect,\n                'mobile' => $mobile,\n            ]);\n            $contact->user()\n                ->associate($user)\n                ->save();\n\n            $personalData = new PersonalData([\n                'first_name'           => $preName,\n                'last_name'            => $lastName,\n                'pronoun'              => $pronoun,\n                'shirt_size'           => $tshirt_size,\n                'planned_arrival_date' => $enable_planned_arrival ? Carbon::createFromTimestamp($planned_arrival_date) : null,\n            ]);\n            $personalData->user()\n                ->associate($user)\n                ->save();\n\n            $settings = new Settings([\n                'language'        => $session->get('locale'),\n                'theme'           => config('theme'),\n                'email_human'     => $email_by_human_allowed,\n                'email_messages'  => $email_messages,\n                'email_goody'     => $email_goody,\n                'email_shiftinfo' => $email_shiftinfo,\n                'email_news'      => $email_news,\n                'mobile_show'     => $mobile_show,\n            ]);\n            $settings->user()\n                ->associate($user)\n                ->save();\n\n            $state = new State([]);\n            if (config('autoarrive')) {\n                $state->arrived = true;\n                $state->arrival_date = new Carbon();\n            }\n            $state->user()\n                ->associate($user)\n                ->save();\n\n            if ($session->has('oauth2_connect_provider') && $session->has('oauth2_user_id')) {\n                $oauth = new OAuth([\n                    'provider'      => $session->get('oauth2_connect_provider'),\n                    'identifier'    => $session->get('oauth2_user_id'),\n                    'access_token'  => $session->get('oauth2_access_token'),\n                    'refresh_token' => $session->get('oauth2_refresh_token'),\n                    'expires_at'    => $session->get('oauth2_expires_at'),\n                ]);\n                $oauth->user()\n                    ->associate($user)\n                    ->save();\n\n                $session->remove('oauth2_connect_provider');\n                $session->remove('oauth2_user_id');\n                $session->remove('oauth2_access_token');\n                $session->remove('oauth2_refresh_token');\n                $session->remove('oauth2_expires_at');\n            }\n\n            // Assign user-group and set password\n            $defaultGroup = Group::find(auth()->getDefaultRole());\n            $user->groups()->attach($defaultGroup);\n            if ($enable_password) {\n                auth()->setPassword($user, $request->postData('password'));\n            }\n\n            // Assign angel-types\n            $user_angel_types_info = [];\n            foreach ($selected_angel_types as $selected_angel_type_id) {\n                $angelType = AngelType::findOrFail($selected_angel_type_id);\n                $user->userAngelTypes()->attach($angelType);\n                $user_angel_types_info[] = $angelType->name;\n            }\n\n            // Commit complete user data\n            $db->commit();\n\n            engelsystem_log(\n                'User ' . User_Nick_render($user, true)\n                . ' signed up as: ' . join(', ', $user_angel_types_info)\n            );\n            success(__('Angel registration successful!'));\n\n            // User is already logged in - that means a supporter has registered an angel. Return to register page.\n            if ($authUser) {\n                throw_redirect(page_link_to('register'));\n            }\n\n            // If a welcome message is present, display it on the next page\n            if ($config->get('welcome_msg')) {\n                $session->set('show_welcome', true);\n            }\n\n            // Login the user\n            if ($user->oauth->count()) {\n                /** @var OAuth $provider */\n                $provider = $user->oauth->first();\n                throw_redirect(url('/oauth/' . $provider->provider));\n            }\n\n            throw_redirect(page_link_to('/'));\n        }\n    }\n\n    $buildup_start_date = time();\n    $teardown_end_date = null;\n    if ($buildup = $config->get('buildup_start')) {\n        /** @var Carbon $buildup */\n        $buildup_start_date = $buildup->getTimestamp();\n    }\n\n    if ($teardown = $config->get('teardown_end')) {\n        /** @var Carbon $teardown */\n        $teardown_end_date = $teardown->getTimestamp();\n    }\n\n    $form_data = $session->get('form_data');\n    $session->remove('form_data');\n    if (!$nick && !empty($form_data['name'])) {\n        $nick = $form_data['name'];\n    }\n\n    if (!$email && !empty($form_data['email'])) {\n        $email = $form_data['email'];\n    }\n\n    if (!$preName && !empty($form_data['first_name'])) {\n        $preName = $form_data['first_name'];\n    }\n\n    if (!$lastName && !empty($form_data['last_name'])) {\n        $lastName = $form_data['last_name'];\n    }\n\n    return page_with_title(register_title(), [\n        __('By completing this form you\\'re registering as a Chaos-Angel. This script will create you an account in the angel task scheduler.'),\n        form_info(entry_required() . ' = ' . __('Entry required!')),\n        $msg,\n        msg(),\n        form([\n            div('row', [\n                div('col', [\n                    form_text(\n                        'username',\n                        __('Nick') . ' ' . entry_required(),\n                        $nick,\n                        false,\n                        24,\n                        'nickname'\n                    ),\n                    form_info(\n                        '',\n                        __('Use up to 24 letters, numbers or connecting punctuations for your nickname.')\n                    ),\n                ]),\n\n                $enable_pronoun ? div('col', [\n                    form_text('pronoun', __('Pronoun'), $pronoun, false, 15),\n                ]) : '',\n            ]),\n\n            $enable_user_name ? div('row', [\n                div('col', [\n                    form_text('prename', __('First name'), $preName, false, 64, 'given-name'),\n                ]),\n                div('col', [\n                    form_text('lastname', __('Last name'), $lastName, false, 64, 'family-name'),\n                ]),\n            ]) : '',\n\n            div('row', [\n                div('col', [\n                    form_email(\n                        'email',\n                        __('E-Mail') . ' ' . entry_required(),\n                        $email,\n                        false,\n                        'email',\n                        254\n                    ),\n                    form_checkbox(\n                        'email_shiftinfo',\n                        __(\n                            'settings.profile.email_shiftinfo',\n                            [config('app_name')]\n                        ),\n                        $email_shiftinfo\n                    ),\n                    form_checkbox(\n                        'email_news',\n                        __('Notify me of new news'),\n                        $email_news\n                    ),\n                    form_checkbox(\n                        'email_messages',\n                        __('settings.profile.email_messages'),\n                        $email_messages\n                    ),\n                    form_checkbox(\n                        'email_by_human_allowed',\n                        __('Allow heaven angels to contact you by e-mail.'),\n                        $email_by_human_allowed\n                    ),\n                    $goodie_enabled ?\n                        form_checkbox(\n                            'email_goody',\n                            __('To receive vouchers, give consent that nick, email address, worked hours and shirt size will be stored until the next similar event.')\n                            . (config('privacy_email') ? ' ' . __('To withdraw your approval, send an email to <a href=\"mailto:%s\">%1$s</a>.', [config('privacy_email')]) : ''),\n                            $email_goody\n                        ) : '',\n                ]),\n\n                $enable_dect ? div('col', [\n                    form_text('dect', __('DECT'), $dect, false, 40, 'tel-local'),\n                ]) : '',\n\n                div('col', [\n                    form_text('mobile', __('Mobile'), $mobile, false, 40, 'tel-national'),\n                    $enable_mobile_show ? form_checkbox(\n                        'mobile_show',\n                        __('Show mobile number to other users to contact me'),\n                        $mobile_show\n                    ) : '',\n                ]),\n            ]),\n\n            div('row', [\n                $enable_password ? div('col', [\n                    form_password('password', __('Password') . ' ' . entry_required(), 'new-password'),\n                ]) : '',\n\n                $enable_planned_arrival ? div('col', [\n                    form_date(\n                        'planned_arrival_date',\n                        __('Planned date of arrival') . ' ' . entry_required(),\n                        $planned_arrival_date,\n                        $buildup_start_date,\n                        $teardown_end_date\n                    ),\n                ]) : '',\n            ]),\n\n            div('row', [\n                $enable_password ? div('col', [\n                    form_password('password2', __('Confirm password') . ' ' . entry_required(), 'new-password'),\n                ]) : '',\n\n                div('col', [\n                    $goodie_tshirt ? form_select(\n                        'tshirt_size',\n                        __('Shirt size') . ' ' . entry_required(),\n                        $tshirt_sizes,\n                        $tshirt_size,\n                        __('form.select_placeholder')\n                    ) : '',\n                ]),\n            ]),\n\n            div('row', [\n                div('col', [\n                    form_checkboxes(\n                        'angel_types',\n                        __('What do you want to do?') . sprintf(\n                            ' (<a href=\"%s\">%s</a>)',\n                            url('/angeltypes/about'),\n                            __('Description of job types')\n                        ),\n                        $angel_types,\n                        $selected_angel_types\n                    ),\n                    form_info(\n                        '',\n                        __('Some angel types have to be confirmed later by a supporter at an introduction meeting. You can change your selection in the options section.')\n                    ),\n                ]),\n            ]),\n\n            form_submit('submit', __('Register')),\n        ]),\n    ]);\n}\n\n/**\n * @return string\n */\nfunction entry_required()\n{\n    return icon('exclamation-triangle', 'text-info');\n}\n", "<?php\n\nuse Engelsystem\\Database\\Db;\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\NeededAngelType;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftsFilter;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection as EloquentCollection;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @return string\n */\nfunction shifts_title()\n{\n    return __('Shifts');\n}\n\n/**\n * Start different controllers for deleting shifts and shift_entries, edit shifts and add shift entries.\n * FIXME:\n * Transform into shift controller and shift entry controller.\n * Split actions into shift edit, shift delete, shift entry edit, shift entry delete\n * Introduce simpler and beautiful actions for shift entry join/leave for users\n *\n * @return string\n */\nfunction user_shifts()\n{\n    $request = request();\n\n    if (auth()->user()->isFreeloader()) {\n        throw_redirect(page_link_to('user_myshifts'));\n    }\n\n    if ($request->has('edit_shift')) {\n        return shift_edit_controller();\n    } elseif ($request->has('delete_shift')) {\n        return shift_delete_controller();\n    }\n    return view_user_shifts();\n}\n\n/**\n * Helper function that updates the start and end time from request data.\n * Use update_ShiftsFilter().\n *\n * @param ShiftsFilter $shiftsFilter The shiftfilter to update.\n * @param string[]     $days\n */\nfunction update_ShiftsFilter_timerange(ShiftsFilter $shiftsFilter, $days)\n{\n    $start_time = $shiftsFilter->getStartTime();\n    if (is_null($start_time)) {\n        $now = (new DateTime())->format('Y-m-d');\n        $first_day = DateTime::createFromFormat(\n            'Y-m-d',\n            in_array($now, $days) ? $now : ($days[0] ?? (new DateTime())->format('Y-m-d'))\n        )->getTimestamp();\n        if (time() < $first_day) {\n            $start_time = $first_day;\n        } else {\n            $start_time = time();\n        }\n    }\n\n    $end_time = $shiftsFilter->getEndTime();\n    if (is_null($end_time)) {\n        $end_time = $start_time + 24 * 60 * 60;\n        $end = Carbon::createFromTimestamp($end_time);\n        if (!in_array($end->format('Y-m-d'), $days)) {\n            $end->startOfDay()->subSecond(); // the day before\n            $end_time = $end->timestamp;\n        }\n    }\n\n    $shiftsFilter->setStartTime(check_request_datetime(\n        'start_day',\n        'start_time',\n        $days,\n        $start_time\n    ));\n    $shiftsFilter->setEndTime(check_request_datetime(\n        'end_day',\n        'end_time',\n        $days,\n        $end_time\n    ));\n\n    if ($shiftsFilter->getStartTime() > $shiftsFilter->getEndTime()) {\n        $shiftsFilter->setEndTime($shiftsFilter->getStartTime() + 24 * 60 * 60);\n    }\n}\n\n/**\n * Update given ShiftsFilter with filter params from user input\n *\n * @param ShiftsFilter $shiftsFilter The shifts filter to update from request data\n * @param boolean      $user_shifts_admin Has the user user_shift_admin privilege?\n * @param string[]     $days An array of available filter days\n */\nfunction update_ShiftsFilter(ShiftsFilter $shiftsFilter, $user_shifts_admin, $days)\n{\n    $shiftsFilter->setUserShiftsAdmin($user_shifts_admin);\n    $shiftsFilter->setFilled(check_request_int_array('filled', $shiftsFilter->getFilled()));\n    $shiftsFilter->setRooms(check_request_int_array('rooms', $shiftsFilter->getRooms()));\n    $shiftsFilter->setTypes(check_request_int_array('types', $shiftsFilter->getTypes()));\n    update_ShiftsFilter_timerange($shiftsFilter, $days);\n}\n\n/**\n * @return Room[]|Collection\n */\nfunction load_rooms(bool $onlyWithActiveShifts = false)\n{\n    $rooms = Room::orderBy('name');\n\n    if ($onlyWithActiveShifts) {\n        $roomIdsFromAngelType = NeededAngelType::query()\n            ->whereNotNull('room_id')\n            ->select('room_id');\n\n        $roomIdsFromShift = Shift::query()\n            ->leftJoin('needed_angel_types', 'shifts.id', 'needed_angel_types.shift_id')\n            ->whereNotNull('needed_angel_types.shift_id')\n            ->select('shifts.room_id');\n\n        $rooms->whereIn('id', $roomIdsFromAngelType)\n            ->orWhereIn('id', $roomIdsFromShift);\n    }\n\n    $rooms = $rooms->get();\n\n    if ($rooms->isEmpty()) {\n        error(__('The administration has not configured any rooms yet.'));\n        throw_redirect(page_link_to('/'));\n    }\n\n    return $rooms;\n}\n\n/**\n * @return array\n */\nfunction load_days()\n{\n    $days = (new Collection(Db::select(\n        '\n                SELECT DISTINCT DATE(`start`) AS `id`, DATE(`start`) AS `name`\n                FROM `shifts`\n                ORDER BY `id`, `name`\n            '\n    )))\n        ->pluck('id')\n        ->toArray();\n\n    if (empty($days)) {\n        error(__('The administration has not configured any shifts yet.'));\n        // Do not try to redirect to the current page\n        if (config('home_site') != 'user_shifts') {\n            throw_redirect(page_link_to('/'));\n        }\n    }\n    return $days;\n}\n\n/**\n * @return array[]|false\n */\nfunction load_types()\n{\n    $user = auth()->user();\n\n    if (!AngelType::count()) {\n        error(__('The administration has not configured any angeltypes yet - or you are not subscribed to any angeltype.'));\n        throw_redirect(page_link_to('/'));\n    }\n\n    $types = Db::select(\n        '\n            SELECT\n                `angel_types`.`id`,\n                `angel_types`.`name`,\n                (\n                    `angel_types`.`restricted`=0\n                    OR (\n                        NOT `user_angel_type`.`confirm_user_id` IS NULL\n                        OR `user_angel_type`.`id` IS NULL\n                    )\n                ) AS `enabled`\n            FROM `angel_types`\n            LEFT JOIN `user_angel_type`\n                ON (\n                    `user_angel_type`.`angel_type_id`=`angel_types`.`id`\n                    AND `user_angel_type`.`user_id`=?\n                )\n            ORDER BY `angel_types`.`name`\n        ',\n        [\n            $user->id,\n        ]\n    );\n\n    if (empty($types)) {\n        return unrestricted_angeltypes();\n    }\n\n    return $types;\n}\n\n/**\n * @return array[]\n */\nfunction unrestricted_angeltypes()\n{\n    return AngelType::whereRestricted(0)->get(['id', 'name'])->toArray();\n}\n\n/**\n * @return string\n */\nfunction view_user_shifts()\n{\n    $user = auth()->user();\n\n    $session = session();\n    $days = load_days();\n    $rooms = load_rooms(true);\n    $types = load_types();\n    $ownAngelTypes = [];\n\n    /** @var EloquentCollection|UserAngelType[] $userAngelTypes */\n    $userAngelTypes = UserAngelType::whereUserId($user->id)\n        ->leftJoin('angel_types', 'user_angel_type.angel_type_id', 'angel_types.id')\n        ->where(function (Builder $query) {\n            $query->whereNotNull('user_angel_type.confirm_user_id')\n                ->orWhere('angel_types.restricted', false);\n        })\n        ->get();\n    foreach ($userAngelTypes as $type) {\n        $ownAngelTypes[] = $type->angel_type_id;\n    }\n\n    if (!$session->has('shifts-filter')) {\n        $room_ids = $rooms->pluck('id')->toArray();\n        $shiftsFilter = new ShiftsFilter(auth()->can('user_shifts_admin'), $room_ids, $ownAngelTypes);\n        $session->set('shifts-filter', $shiftsFilter->sessionExport());\n    }\n\n    $shiftsFilter = new ShiftsFilter();\n    $shiftsFilter->sessionImport($session->get('shifts-filter'));\n    update_ShiftsFilter($shiftsFilter, auth()->can('user_shifts_admin'), $days);\n    $session->set('shifts-filter', $shiftsFilter->sessionExport());\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n\n    if (empty($user->api_key)) {\n        User_reset_api_key($user, false);\n    }\n\n    $filled = [\n        [\n            'id'   => '1',\n            'name' => __('occupied'),\n        ],\n        [\n            'id'   => '0',\n            'name' => __('free'),\n        ],\n    ];\n    $start_day = $shiftsFilter->getStart()->format('Y-m-d');\n    $start_time = $shiftsFilter->getStart()->format('H:i');\n    $end_day = $shiftsFilter->getEnd()->format('Y-m-d');\n    $end_time = $shiftsFilter->getEnd()->format('H:i');\n\n    if (config('signup_requires_arrival') && !$user->state->arrived) {\n        info(render_user_arrived_hint());\n    }\n\n    $formattedDays = collect($days)->map(function ($value) {\n        return Carbon::make($value)->format(__('Y-m-d'));\n    })->toArray();\n\n    return page([\n        div('col-md-12', [\n            msg(),\n            view(__DIR__ . '/../../resources/views/pages/user-shifts.html', [\n                'title'         => shifts_title(),\n                'room_select'   => make_select(\n                    $rooms,\n                    $shiftsFilter->getRooms(),\n                    'rooms',\n                    icon('pin-map-fill') . __('Rooms')\n                ),\n                'start_select'  => html_select_key(\n                    'start_day',\n                    'start_day',\n                    array_combine($days, $formattedDays),\n                    $start_day\n                ),\n                'start_time'    => $start_time,\n                'end_select'    => html_select_key(\n                    'end_day',\n                    'end_day',\n                    array_combine($days, $formattedDays),\n                    $end_day\n                ),\n                'end_time'      => $end_time,\n                'type_select'   => make_select(\n                    $types,\n                    $shiftsFilter->getTypes(),\n                    'types',\n                    icon('person-lines-fill') . __('Angeltypes') . '<sup>1</sup>',\n                    $ownAngelTypes\n                ),\n                'filled_select' => make_select(\n                    $filled,\n                    $shiftsFilter->getFilled(),\n                    'filled',\n                    icon('person-fill-slash') . __('Occupancy')\n                ),\n                'task_notice'   =>\n                    '<sup>1</sup>'\n                    . __('The tasks shown here are influenced by the angeltypes you joined already!')\n                    . ' <a href=\"' . url('/angeltypes/about') . '\">'\n                    . __('Description of the jobs.')\n                    . '</a>',\n                'shifts_table'  => msg() . $shiftCalendarRenderer->render(),\n                'ical_text'     => div('mt-3', ical_hint()),\n                'filter'        => __('Filter'),\n                'filter_toggle' => __('shifts.filter.toggle'),\n                'set_yesterday' => __('Yesterday'),\n                'set_today'     => __('Today'),\n                'set_tomorrow'  => __('Tomorrow'),\n                'set_last_8h'   => __('last 8h'),\n                'set_last_4h'   => __('last 4h'),\n                'set_next_4h'   => __('next 4h'),\n                'set_next_8h'   => __('next 8h'),\n                'buttons'       => button(\n                    public_dashboard_link(),\n                    icon('speedometer2') . __('Public Dashboard')\n                ),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Returns a hint for the user how the ical feature works.\n *\n * @return string\n */\nfunction ical_hint()\n{\n    $user = auth()->user();\n    if (!auth()->can('ical')) {\n        return '';\n    }\n\n    return heading(__('iCal export and API') . ' ' . button_help('user/ical'), 2)\n        . '<p>' . sprintf(\n            __('Export your own shifts. <a href=\"%s\">iCal format</a> or <a href=\"%s\">JSON format</a> available (please keep secret, otherwise <a href=\"%s\">reset the api key</a>).'),\n            page_link_to('ical', ['key' => $user->api_key]),\n            page_link_to('shifts_json_export', ['key' => $user->api_key]),\n            page_link_to('user_myshifts', ['reset' => 1])\n        )\n        . ' <button class=\"btn btn-sm btn-danger\" type=\"button\"\n            data-bs-toggle=\"collapse\" data-bs-target=\"#collapseApiKey\"\n            aria-expanded=\"false\" aria-controls=\"collapseApiKey\">\n            ' . __('Show API Key') . '\n            </button>'\n        . '</p>'\n        . '<p id=\"collapseApiKey\" class=\"collapse\"><code>' . $user->api_key . '</code></p>';\n}\n\n/**\n * @param array $array\n * @return array\n */\nfunction get_ids_from_array($array)\n{\n    return $array['id'];\n}\n\n/**\n * @param array  $items\n * @param array  $selected\n * @param string $name\n * @param string $title\n * @param int[]  $ownSelect\n * @return string\n */\nfunction make_select($items, $selected, $name, $title = null, $ownSelect = [])\n{\n    $html = '';\n    if (isset($title)) {\n        $html .= '<h4>' . $title . '</h4>' . \"\\n\";\n    }\n\n    $buttons = [\n        button_checkbox_selection($name, __('All'), 'true'),\n        button_checkbox_selection($name, __('None'), 'false'),\n    ];\n    if (count($ownSelect) > 0) {\n        $buttons[] = button_checkbox_selection($name, __('Own'), json_encode($ownSelect));\n    }\n\n    $html .= buttons($buttons);\n    $html .= '<div id=\"selection_' . $name . '\" class=\"mb-3 selection ' . $name . '\">' . \"\\n\";\n\n    $htmlItems = [];\n    foreach ($items as $i) {\n        $id = $name . '_' . $i['id'];\n        $htmlItems[] = '<div class=\"form-check\">'\n            . '<input class=\"form-check-input\" type=\"checkbox\" id=\"' . $id . '\" name=\"' . $name . '[]\" value=\"' . $i['id'] . '\" '\n            . (in_array($i['id'], $selected) ? ' checked=\"checked\"' : '')\n            . '><label class=\"form-check-label\" for=\"' . $id . '\">' . $i['name'] . '</label>'\n            . (!isset($i['enabled']) || $i['enabled'] ? '' : icon('mortarboard-fill'))\n            . '</div>';\n    }\n    $html .= implode(\"\\n\", $htmlItems);\n\n    $html .= '</div>' . \"\\n\";\n    $html .= buttons($buttons);\n\n    return $html;\n}\n", "<?php\n\n// Methods to build a html form.\nuse Carbon\\Carbon;\n\n/**\n * Renders a hidden input\n *\n * @param string $name  Name of the input\n * @param string $value The value\n * @return string rendered html\n */\nfunction form_hidden($name, $value)\n{\n    return '<input type=\"hidden\" name=\"' . $name . '\" value=\"' . htmlspecialchars((string) $value) . '\" />';\n}\n\n/**\n * Rendert ein Zahlenfeld mit Buttons zum verstellen\n *\n * @param string $name\n * @param string $label\n * @param int    $value\n * @param array  $data_attributes\n * @return string\n */\nfunction form_spinner(string $name, string $label, int $value, array $data_attributes = [])\n{\n    $id = 'spinner-' . $name;\n    $attr = '';\n    foreach ($data_attributes as $attr_key => $attr_value) {\n        $attr .= ' data-' . $attr_key . '=\"' . $attr_value . '\"';\n    }\n\n    return form_element($label, '\n        <div class=\"input-group\">\n            <input id=\"' . $id . '\" class=\"form-control\" type=\"number\" min=\"0\" step=\"1\" name=\"' . $name . '\" value=\"' . $value . '\"' . $attr . ' />\n            <button class=\"btn btn-secondary spinner-down\" type=\"button\" data-input-id=\"' . $id . '\"' . $attr . '>\n                ' . icon('dash-lg') . '\n            </button>\n            <button class=\"btn btn-secondary spinner-up\" type=\"button\" data-input-id=\"' . $id . '\"' . $attr . '>\n                ' . icon('plus-lg') . '\n            </button>\n        </div>\n        ', $id);\n}\n\n/**\n * Render a bootstrap datepicker\n *\n * @param string $name       Name of the parameter\n * @param string $label      Label\n * @param int|Carbon $value  Unix Timestamp\n * @param string $start_date Earliest possible date\n * @param string $end_date\n * @return string HTML\n */\nfunction form_date($name, $label, $value, $start_date = '', $end_date = '')\n{\n    $dom_id = $name . '-date';\n    $value = ($value instanceof Carbon) ? $value->getTimestamp() : $value;\n    $value = is_numeric($value) ? date('Y-m-d', $value) : '';\n    $start_date = is_numeric($start_date) ? date('Y-m-d', $start_date) : '';\n    $end_date = is_numeric($end_date) ? date('Y-m-d', $end_date) : '';\n\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"' . $dom_id . '\" type=\"date\" placeholder=\"YYYY-MM-DD\" pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" min=\"' . $start_date . '\" max=\"' . $end_date . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars((string) $value) . '\" autocomplete=\"off\">',\n        $dom_id\n    );\n}\n\n/**\n * Render a bootstrap datepicker\n *\n * @param string $name  Name of the parameter\n * @param string $label\n * @param mixed $value\n *\n * @return string HTML\n */\nfunction form_datetime(string $name, string $label, $value)\n{\n    $dom_id = $name . '-datetime';\n    if ($value) {\n        $value = ($value instanceof Carbon) ? $value : Carbon::createFromTimestamp($value);\n    }\n\n    return form_element($label, sprintf('\n        <input class=\"form-control\" id=\"%s\" type=\"datetime-local\"\n            pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2} ([01][0-9]|2[0-3]):[0-5][0-9]\" placeholder=\"YYYY-MM-DD HH:MM\"\n            name=\"%s\" value=\"%s\" autocomplete=\"off\">\n    ', $dom_id, $name, htmlspecialchars($value ? $value->format('Y-m-d H:i') : '')), $dom_id);\n}\n\n/**\n * Rendert eine Liste von Checkboxen f\u00fcr ein Formular\n *\n * @param string $name     Die Namen der Checkboxen werden aus name_key gebildet\n * @param string $label    Die Beschriftung der Liste\n * @param array  $items    Array mit den einzelnen Checkboxen\n * @param array  $selected Array mit den Keys, die ausgew\u00e4hlt sind\n * @return string\n */\nfunction form_checkboxes($name, $label, $items, $selected)\n{\n    $html = form_element($label, '');\n    foreach ($items as $key => $item) {\n        $html .= form_checkbox($name . '_' . $key, $item, in_array($key, $selected));\n    }\n    return $html;\n}\n\n/**\n * Rendert eine Checkbox\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @param string $html_id\n * @return string\n */\nfunction form_checkbox($name, $label, $selected, $value = 'checked', $html_id = null)\n{\n    if (is_null($html_id)) {\n        $html_id = $name;\n    }\n\n    return '<div class=\"form-check\">'\n        . '<input class=\"form-check-input\" type=\"checkbox\" id=\"' . $html_id . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars((string) $value) . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' /><label class=\"form-check-label\" for=\"' . $html_id . '\">'\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Radio\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @return string\n */\nfunction form_radio($name, $label, $selected, $value)\n{\n    $value = htmlspecialchars((string) $value);\n    $id = preg_replace('/\\s/', '-', $name . '_' . $value);\n\n    return '<div class=\"form-check\">'\n        . '<input class=\"form-check-input\" type=\"radio\" id=\"' . $id . '\" name=\"' . $name . '\" value=\"' . $value . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' />'\n        . '<label class=\"form-check-label\" for=\"' . $id . '\">'\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Infotext in das Formular\n *\n * @param string $label\n * @param string $text\n * @return string\n */\nfunction form_info($label, $text = '')\n{\n    if ($label == '') {\n        return '<span class=\"help-block\">' . icon('info-circle') . $text . '</span>';\n    }\n    if ($text == '') {\n        return '<h4>' . $label . '</h4>';\n    }\n    return form_element($label, '<p class=\"form-control-static\">' . $text . '</p>');\n}\n\n/**\n * Rendert den Absenden-Button eines Formulars\n *\n * @param string $name\n * @param string $label\n * @param string $class\n * @param bool   $wrapForm\n * @param string $buttonType\n * @return string\n */\nfunction form_submit($name, $label, $class = '', $wrapForm = true, $buttonType = 'primary')\n{\n    $button = '<button class=\"btn btn-' . $buttonType . ($class ? ' ' . $class : '') . '\" type=\"submit\" name=\"' . $name . '\">'\n        . $label\n        . '</button>';\n\n    if (!$wrapForm) {\n        return $button;\n    }\n\n    return form_element(\n        null,\n        $button\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string      $name\n * @param string      $label\n * @param string      $value\n * @param bool        $disabled\n * @param int|null    $maxlength\n * @param string|null $autocomplete\n * @param string|null $class\n * @param array       $data_attributes\n * @return string\n */\nfunction form_text($name, $label, $value, $disabled = false, $maxlength = null, $autocomplete = null, $class = '', $data_attributes = [])\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    $maxlength = $maxlength ? ' maxlength=' . (int) $maxlength : '';\n    $autocomplete = $autocomplete ? ' autocomplete=\"' . $autocomplete . '\"' : '';\n    $attr = '';\n    foreach ($data_attributes as $attr_key => $attr_value) {\n        $attr .= ' data-' . $attr_key . '=\"' . $attr_value . '\"';\n    }\n\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars((string) $value) . '\"' . $maxlength . $disabled . $autocomplete . $attr . '/>',\n        'form_' . $name,\n        $class\n    );\n}\n\n/**\n * Renders a text input with placeholder instead of label.\n *\n * @param string  $name        Input name\n * @param string  $placeholder Placeholder\n * @param string  $value       The value\n * @param boolean $disabled    Is the field enabled?\n * @return string\n */\nfunction form_text_placeholder($name, $placeholder, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        '',\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars((string) $value) . '\" placeholder=\"' . $placeholder\n        . '\" ' . $disabled . '/>'\n    );\n}\n\n/**\n * Rendert ein Formular-Emailfeld\n *\n * @param string      $name\n * @param string      $label\n * @param string      $value\n * @param bool        $disabled\n * @param string|null $autocomplete\n * @param int|null    $maxlength\n *\n * @return string\n */\nfunction form_email($name, $label, $value, $disabled = false, $autocomplete = null, $maxlength = null)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    $autocomplete = $autocomplete ? ' autocomplete=\"' . $autocomplete . '\"' : '';\n    $maxlength = $maxlength ? ' maxlength=' . (int) $maxlength : '';\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"email\" name=\"' . $name . '\" value=\"'\n        . htmlspecialchars((string) $value) . '\" ' . $disabled . $autocomplete . $maxlength . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Dateifeld\n *\n * @param string $name\n * @param string $label\n * @return string\n */\nfunction form_file($name, $label)\n{\n    return form_element(\n        $label,\n        sprintf('<input id=\"form_%1$s\" type=\"file\" name=\"%1$s\" />', $name),\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Passwortfeld\n *\n * @param string $name\n * @param string $label\n * @param string $autocomplete\n * @param bool   $disabled\n * @return string\n */\nfunction form_password($name, $label, $autocomplete, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        sprintf(\n            '<input class=\"form-control\" id=\"form_%1$s\" type=\"password\" name=\"%1$s\" minlength=\"%2$s\" value=\"\" autocomplete=\"%3$s\"%4$s/>',\n            $name,\n            config('min_password_length'),\n            $autocomplete,\n            $disabled\n        ),\n        'form_' . $name\n    );\n}\n\n/**\n * Renders a password input with placeholder instead of label.\n *\n * @param string $name\n * @param string $placeholder\n * @param bool   $disabled\n * @return string\n */\nfunction form_password_placeholder($name, $placeholder, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        '',\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"password\" name=\"'\n        . $name . '\" value=\"\" placeholder=\"' . $placeholder . '\" ' . $disabled . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_textarea($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<textarea rows=\"5\" class=\"form-control\" id=\"form_' . $name . '\" name=\"'\n        . $name . '\" ' . $disabled . '>' . htmlspecialchars((string) $value) . '</textarea>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Auswahlfeld\n *\n * @param string   $name\n * @param string   $label\n * @param string[] $values\n * @param string   $selected\n * @param string   $selectText\n * @param string   $class\n * @return string\n */\nfunction form_select($name, $label, $values, $selected, $selectText = '', $class = '')\n{\n    return form_element(\n        $label,\n        html_select_key('form_' . $name, $name, $values, $selected, $selectText),\n        'form_' . $name,\n        $class\n    );\n}\n\n/**\n * Rendert ein Formular-Element\n *\n * @param string $label\n * @param string $input\n * @param string $for\n * @param string $class\n * @return string\n */\nfunction form_element($label, $input, $for = '', $class = '')\n{\n    $class = $class ? ' ' . $class : '';\n\n    if (empty($label)) {\n        return '<div class=\"mb-3' . $class . '\">' . $input . '</div>';\n    }\n\n    return '<div class=\"mb-3' . $class . '\">'\n        . '<label class=\"form-label\" for=\"' . $for . '\">' . $label . '</label>'\n        . $input\n        . '</div>';\n}\n\n/**\n * Rendert ein Formular\n *\n * @param string[] $elements\n * @param string   $action\n * @param bool     $inline\n * @return string\n */\nfunction form($elements, $action = '', $inline = false, $btnGroup = false)\n{\n    return '<form action=\"' . $action . '\" enctype=\"multipart/form-data\" method=\"post\"'\n        . ($btnGroup ? ' class=\"btn-group\"' : '')\n        . ($inline ? ' style=\"float:left\"' : '') . '>'\n        . join($elements)\n        . form_csrf()\n        . '</form>';\n}\n\n/**\n * @return string\n */\nfunction form_csrf()\n{\n    return form_hidden('_token', session()->get('_token'));\n}\n\n/**\n * @param string   $name\n * @param string[] $options\n * @param string   $selected\n * @return string\n */\nfunction html_options($name, $options, $selected = '')\n{\n    $html = '';\n    foreach ($options as $value => $label) {\n        $html .= '<div class=\"form-check form-check-inline\">'\n            . '<input class=\"form-check-input\" type=\"radio\" id=\"' . $name . '_' . $value . '\" name=\"' . $name . '\"'\n            . ($value == $selected ? ' checked=\"checked\"' : '') . ' value=\"' . $value . '\" />'\n            . '<label class=\"form-check-label\" for=\"' . $name . '_' . $value . '\">' . $label . '</label>'\n            . '</div>';\n    }\n\n    return $html;\n}\n\n/**\n * @param string   $dom_id\n * @param string   $name\n * @param string[] $rows\n * @param string   $selected\n * @param string   $selectText\n * @return string\n */\nfunction html_select_key($dom_id, $name, $rows, $selected, $selectText = '')\n{\n    $html = '<select class=\"form-control\" id=\"' . $dom_id . '\" name=\"' . $name . '\">';\n    if (!empty($selectText)) {\n        $html .= '<option value=\"\">' . $selectText . '</option>';\n    }\n    foreach ($rows as $key => $row) {\n        if (($key == $selected) || ($row === $selected)) {\n            $html .= '<option value=\"' . $key . '\" selected=\"selected\">' . $row . '</option>';\n        } else {\n            $html .= '<option value=\"' . $key . '\">' . $row . '</option>';\n        }\n    }\n    $html .= '</select>';\n    return $html;\n}\n", "<?php\n\nuse Engelsystem\\Models\\Question;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\UserHintsRenderer;\n\n/**\n * @param string $page\n * @param array  $parameters get parameters\n * @return string\n */\nfunction page_link_to($page = '', $parameters = [])\n{\n    $page = str_replace('_', '-', $page);\n    return url($page, $parameters);\n}\n\n/**\n * Render the user hints\n *\n * @return string\n */\nfunction header_render_hints()\n{\n    $user = auth()->user();\n\n    if ($user) {\n        $hints_renderer = new UserHintsRenderer();\n\n        $hints_renderer->addHint(admin_new_questions());\n        $hints_renderer->addHint(user_angeltypes_unconfirmed_hint());\n        $hints_renderer->addHint(render_user_departure_date_hint());\n        $hints_renderer->addHint(user_driver_license_required_hint());\n        $hints_renderer->addHint(user_ifsg_certificate_required_hint());\n\n        // Important hints:\n        $hints_renderer->addHint(render_user_freeloader_hint(), true);\n        $hints_renderer->addHint(render_user_arrived_hint(), true);\n        $hints_renderer->addHint(render_user_tshirt_hint(), true);\n        $hints_renderer->addHint(render_user_dect_hint(), true);\n\n        return $hints_renderer->render();\n    }\n\n    return '';\n}\n\n/**\n * Returns the path of the current path with underscores instead of hyphens\n *\n * @return string\n */\nfunction current_page()\n{\n    return request()->query->get('p') ?: str_replace('-', '_', request()->path());\n}\n\n/**\n * @return string\n */\nfunction make_navigation()\n{\n    $page = current_page();\n    $menu = [];\n    $pages = [\n        'news'           => __('News'),\n        'meetings'       => [__('Meetings'), 'user_meetings'],\n        'user_shifts'    => __('Shifts'),\n        'angeltypes'     => __('Angeltypes'),\n        'questions'      => [__('Ask the Heaven'), 'question.add'],\n    ];\n\n    foreach ($pages as $menu_page => $options) {\n        if (!menu_is_allowed($menu_page, $options)) {\n            continue;\n        }\n\n        $title = ((array) $options)[0];\n        $menu[] = toolbar_item_link(page_link_to($menu_page), '', $title, $menu_page == $page);\n    }\n\n    $menu = make_room_navigation($menu);\n\n    $admin_menu = [];\n    $admin_pages = [\n        // path              => name\n        // path              => [name, permission]\n        'admin_arrive'       => 'Arrive angels',\n        'admin_active'       => 'Active angels',\n        'users'              => ['All Angels', 'admin_user'],\n        'admin_free'         => 'Free angels',\n        'admin/questions'    => ['Answer questions', 'question.edit'],\n        'shifttypes'         => 'Shifttypes',\n        'admin_shifts'       => 'Create shifts',\n        'admin/rooms'        => ['room.rooms', 'admin_rooms'],\n        'admin_groups'       => 'Grouprights',\n        'admin/schedule'     => ['schedule.import', 'schedule.import'],\n        'admin/logs'         => ['log.log', 'admin_log'],\n        'admin_event_config' => 'Event config',\n    ];\n\n    if (config('autoarrive')) {\n        unset($admin_pages['admin_arrive']);\n    }\n\n    foreach ($admin_pages as $menu_page => $options) {\n        if (!menu_is_allowed($menu_page, $options)) {\n            continue;\n        }\n\n        $title = ((array) $options)[0];\n        $admin_menu[] = toolbar_dropdown_item(\n            page_link_to($menu_page),\n            __($title),\n            $menu_page == $page\n        );\n    }\n\n    if (count($admin_menu) > 0) {\n        $menu[] = toolbar_dropdown(__('Admin'), $admin_menu);\n    }\n\n    return join(\"\\n\", $menu);\n}\n\n/**\n * @param string          $page\n * @param string|string[] $options\n *\n * @return bool\n */\nfunction menu_is_allowed(string $page, $options)\n{\n    $options = (array) $options;\n    $permissions = $page;\n\n    if (isset($options[1])) {\n        $permissions = $options[1];\n    }\n\n    return auth()->can($permissions);\n}\n\n/**\n * Adds room navigation to the given menu.\n *\n * @param string[] $menu Rendered menu\n * @return string[]\n */\nfunction make_room_navigation($menu)\n{\n    if (!auth()->can('view_rooms')) {\n        return $menu;\n    }\n\n    // Get a list of all rooms\n    $rooms = Room::orderBy('name')->get();\n    $room_menu = [];\n    if (auth()->can('admin_rooms')) {\n        $room_menu[] = toolbar_dropdown_item(page_link_to('admin/rooms'), __('Manage rooms'), false, 'list');\n    }\n    if (count($room_menu) > 0) {\n        $room_menu[] = toolbar_dropdown_item_divider();\n    }\n    foreach ($rooms as $room) {\n        $room_menu[] = toolbar_dropdown_item(room_link($room), $room->name, false, 'pin-map-fill');\n    }\n    if (count($room_menu) > 0) {\n        $menu[] = toolbar_dropdown(__('Rooms'), $room_menu);\n    }\n    return $menu;\n}\n\n/**\n * Renders language selection.\n *\n * @return array\n */\nfunction make_language_select()\n{\n    $request = app('request');\n    $activeLocale = session()->get('locale');\n\n    $items = [];\n    foreach (config('locales') as $locale => $name) {\n        $url = url($request->getPathInfo(), [...$request->getQueryParams(), 'set-locale' => $locale]);\n\n        $items[] = toolbar_dropdown_item(\n            htmlspecialchars($url),\n            $name,\n            $locale == $activeLocale\n        );\n    }\n    return $items;\n}\n\n/**\n * Renders a hint for new questions to answer.\n *\n * @return string|null\n */\nfunction admin_new_questions()\n{\n    if (!auth()->can('question.edit') || current_page() == 'admin/questions') {\n        return null;\n    }\n\n    $unanswered_questions = Question::unanswered()->count();\n    if (!$unanswered_questions) {\n        return null;\n    }\n\n    return '<a href=\"' . page_link_to('/admin/questions') . '\">'\n        . __('There are unanswered questions!')\n        . '</a>';\n}\n", "<?php\n\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Http\\Exceptions\\HttpTemporaryRedirect;\nuse Engelsystem\\Models\\BaseModel;\nuse Engelsystem\\ValidationResult;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Provide page/request helper functions\n */\n\n/**\n * Parse a date from da day and a time textfield.\n *\n * @param string   $date_name     Name of the textfield containing the day (format Y-m-d)\n * @param string   $time_name     Name of the textfield containing the time (format H:i)\n * @param string[] $allowed_days  List of allowed days in format Y-m-d\n * @param int      $default_value Default value unix timestamp\n * @return int|null\n */\nfunction check_request_datetime($date_name, $time_name, $allowed_days, $default_value)\n{\n    $time = date('H:i', $default_value);\n    $day = date('Y-m-d', $default_value);\n    $request = request();\n\n    if ($request->has($time_name) && preg_match('#^\\d{1,2}:\\d\\d$#', trim($request->input($time_name)))) {\n        $time = trim($request->input($time_name));\n    }\n\n    if ($request->has($date_name) && in_array($request->input($date_name), $allowed_days)) {\n        $day = $request->input($date_name);\n    }\n\n    return parse_date('Y-m-d H:i', $day . ' ' . $time);\n}\n\n/**\n * Parse a date into unix timestamp\n *\n * @param string $pattern The date pattern (i.e. Y-m-d H:i)\n * @param string $value   The string to parse\n * @return int|null The parsed unix timestamp\n */\nfunction parse_date($pattern, $value)\n{\n    $datetime = DateTime::createFromFormat($pattern, trim($value));\n    if (!$datetime) {\n        return null;\n    }\n\n    return $datetime->getTimestamp();\n}\n\n/**\n * Leitet den Browser an die \u00fcbergebene URL weiter und h\u00e4lt das Script an.\n *\n * @param string $url\n */\nfunction throw_redirect($url)\n{\n    throw new HttpTemporaryRedirect($url);\n}\n\n/**\n * Echoes given output and dies.\n *\n * @param string $output String to display\n */\nfunction raw_output($output = '')\n{\n    echo $output;\n    die();\n}\n\n/**\n * Helper function for transforming list of entities into array for select boxes.\n *\n * @param array|Collection $data       The data array\n * @param string           $key_name   name of the column to use as id/key\n * @param string           $value_name name of the column to use as displayed value\n *\n * @return array|Collection\n */\nfunction select_array($data, $key_name, $value_name)\n{\n    if ($data instanceof Collection) {\n        return $data->mapWithKeys(function (BaseModel $model) use ($key_name, $value_name) {\n            return [$model->{$key_name} => $model->{$value_name}];\n        });\n    }\n\n    $return = [];\n    foreach ($data as $value) {\n        $return[$value[$key_name]] = $value[$value_name];\n    }\n    return $return;\n}\n\n/**\n * Returns an int[] from given request param name.\n *\n * @param string $name    Name of the request param\n * @param array  $default Default return value, if param is not set\n * @return array\n */\nfunction check_request_int_array($name, $default = [])\n{\n    $request = request();\n    if ($request->has($name) && is_array($request->input($name))) {\n        return array_filter($request->input($name), 'is_numeric');\n    }\n    return $default;\n}\n\n/**\n * Checks if given request item (name) can be parsed to a date.\n * If not parsable, given error message is put into msg() and null is returned.\n *\n * @param string $name          to be parsed into a date.\n * @param string $error_message the error message displayed if $input is not parsable\n * @param bool   $null_allowed  is a null value allowed?\n * @param bool   $time_allowed  is time allowed?\n * @return ValidationResult containing the parsed date\n */\nfunction check_request_date($name, $error_message = null, $null_allowed = false, $time_allowed = false)\n{\n    $request = request();\n    if (!$request->has($name)) {\n        return new ValidationResult($null_allowed, null);\n    }\n    return check_date($request->input($name), $error_message, $null_allowed, $time_allowed);\n}\n\n/**\n * Checks if given string can be parsed to a date.\n * If not parsable, given error message is put into msg() and null is returned.\n *\n * @param string $input         String to be parsed into a date.\n * @param string $error_message the error message displayed if $input is not parsable\n * @param bool   $null_allowed  is a null value allowed?\n * @param bool   $time_allowed  is time allowed?\n * @return ValidationResult containing the parsed date\n */\nfunction check_date($input, $error_message = null, $null_allowed = false, $time_allowed = false)\n{\n    $trimmed_input = trim((string) $input);\n\n    try {\n        if ($time_allowed) {\n            $time = Carbon::createFromDatetime($trimmed_input);\n        } else {\n            $time = Carbon::createFromFormat('Y-m-d', $trimmed_input);\n        }\n    } catch (InvalidArgumentException $e) {\n        $time = null;\n    }\n\n    if ($time) {\n        return new ValidationResult(true, $time);\n    }\n\n    if ($null_allowed) {\n        return new ValidationResult(true, null);\n    }\n\n    error($error_message);\n    return new ValidationResult(false, null);\n}\n\n/**\n * Returns REQUEST value filtered or default value (null) if not set.\n *\n * @param string $name\n * @param string|null $default_value\n * @return mixed|null\n */\nfunction strip_request_item($name, $default_value = null)\n{\n    $request = request();\n    if ($request->has($name)) {\n        return strip_item($request->input($name));\n    }\n    return $default_value;\n}\n\n/**\n * Returns REQUEST value or default value (null) if not set.\n *\n * @param string $name\n * @param string|null $default_value\n * @return mixed|null\n */\nfunction strip_request_tags($name, $default_value = null)\n{\n    $request = request();\n    if ($request->has($name)) {\n        return strip_tags($request->input($name));\n    }\n\n    return $default_value;\n}\n\n/**\n * Testet, ob der angegebene REQUEST Wert ein Integer ist, bzw.\n * eine ID sein k\u00f6nnte.\n *\n * @param string $name\n * @return int|false\n */\nfunction test_request_int($name)\n{\n    $input = request()->input($name);\n    if (is_null($input)) {\n        return false;\n    }\n\n    return preg_match('/^\\d+$/', $input);\n}\n\n/**\n * Gibt den gefilterten REQUEST Wert mit Zeilenumbr\u00fcchen zur\u00fcck\n *\n * @param string $name\n * @param mixed  $default_value\n * @return mixed\n */\nfunction strip_request_item_nl($name, $default_value = null)\n{\n    $request = request();\n    if ($request->has($name)) {\n        // Only allow letters, symbols, punctuation, separators, numbers and newlines without html tags\n        return preg_replace(\n            \"/([^\\p{L}\\p{S}\\p{P}\\p{Z}\\p{N}+\\n]+)/ui\",\n            '',\n            strip_tags($request->input($name))\n        );\n    }\n    return $default_value;\n}\n\n/**\n * Entfernt unerw\u00fcnschte Zeichen\n *\n * @param string $item\n * @return string\n */\nfunction strip_item($item)\n{\n    // Only allow letters, symbols, punctuation, separators and numbers without html tags\n    return preg_replace('/([^\\p{L}\\p{S}\\p{P}\\p{Z}\\p{N}+]+)/ui', '', strip_tags($item));\n}\n\n/**\n * Validates an email address with support for IDN domain names.\n *\n * @param string $email\n * @return bool\n */\nfunction check_email($email)\n{\n    // Convert the domain part from idn to ascii\n    if (substr_count($email, '@') == 1) {\n        list($name, $domain) = explode('@', $email);\n        $domain = idn_to_ascii($domain, IDNA_DEFAULT, INTL_IDNA_VARIANT_UTS46);\n        $email = $name . '@' . $domain;\n    }\n    return (bool) filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n", "<?php\n\nuse Illuminate\\Support\\Str;\n\n/**\n * Render a stat for dashborad (big number with label).\n * If no style given, style is danger if number > 0, and success if number == 0.\n *\n * @param string $label\n * @param string $number\n * @param string $style default, warning, danger or success. Optional.\n * @return string\n */\nfunction stats($label, $number, $style = null)\n{\n    if (empty($style)) {\n        if ($number > 0) {\n            $style = 'danger';\n        } else {\n            $style = 'success';\n        }\n    }\n    return div('col stats text-' . $style, [\n        $label,\n        div('number', [\n            $number,\n        ]),\n    ]);\n}\n\n/**\n * Renders tabs from the array. Array key is tab name, array value is tab content.\n *\n * @param array $tabs\n * @param int   $selected The selected tab, default 0\n * @return string HTML\n */\nfunction tabs($tabs, $selected = 0)\n{\n    $tab_header = [];\n    $tab_content = [];\n    foreach ($tabs as $header => $content) {\n        $active = false;\n        $id = $header;\n        $href = '#' . $id;\n        if (count($tab_header) == $selected) {\n            $active = true;\n        }\n        if (is_array($content)) {\n            $href = $content['href'];\n            $content = null;\n            $id = null;\n        }\n        $tab_header[] = '<li role=\"presentation\" class=\"nav-item\">\n                <a href=\"' . $href . '\" class=\"nav-link' . ($active ? ' active' : '') . '\" role=\"tab\"'\n            . ($id ? ' id=\"' . $id . '-tab\"' : '')\n            . ($id ? ' aria-controls=\"' . $id . '\" data-bs-target=\"#' . $id . '\" data-bs-toggle=\"tab\" role=\"tab\"' : '')\n            . ($id && $active ? ' aria-selected=\"true\"' : ' aria-selected=\"false\"')\n            . '>'\n            . $header . '</a></li>';\n        $tab_content[] = $content\n            ? '<div role=\"tabpanel\" class=\"tab-pane' . ($active ? ' show active' : '') . '\" id=\"' . $id . '\"'\n            . ' aria-labelledby=\"' . $id . '-tab\"'\n            . '>'\n            . $content\n            . '</div>'\n            : '';\n    }\n    return div('', [\n        '<ul class=\"nav nav-tabs mb-3\" role=\"tablist\">' . join($tab_header) . '</ul>',\n        '<div class=\"tab-content\">' . join($tab_content) . '</div>',\n    ]);\n}\n\n/**\n * Display muted (grey) text.\n *\n * @param string $text\n * @return string\n */\nfunction mute($text)\n{\n    return '<span class=\"text-muted\">' . $text . '</span>';\n}\n\n/**\n * Renders a bootstrap label with given content and class.\n *\n * @param string $content The text\n * @param string $class default, primary, info, success, warning, danger\n * @return string\n */\nfunction badge($content, $class = 'default')\n{\n    return '<span class=\"badge rounded-pill bg-' . $class . '\">' . $content . '</span>';\n}\n\n/**\n * @param int    $valuemin\n * @param int    $valuemax\n * @param int    $valuenow\n * @param string $class\n * @param string $content\n * @return string\n */\nfunction progress_bar($valuemin, $valuemax, $valuenow, $class = '', $content = '')\n{\n    return '<div class=\"progress\">'\n        . '<div class=\"progress-bar ' . $class . '\" role=\"progressbar\" '\n        . 'aria-valuenow=\"' . $valuenow . '\" aria-valuemin=\"' . $valuemin . '\" aria-valuemax=\"' . $valuemax . '\" '\n        . 'style=\"width: ' . floor(($valuenow - $valuemin) * 100 / ($valuemax - $valuemin)) . '%\"'\n        . '>'\n        . $content\n        . '</div>'\n        . '</div>';\n}\n\n/**\n * Render bootstrap icon\n *\n * @param string $icon_name\n * @param string $class\n * @return string\n */\nfunction icon(string $icon_name, string $class = ''): string\n{\n    return ' <span class=\"bi bi-' . $icon_name . ($class ? ' ' . $class : '') . '\"></span> ';\n}\n\n/**\n * Renders a tick or a cross by given boolean\n *\n * @param boolean $boolean\n * @return string\n */\nfunction icon_bool($boolean)\n{\n    return '<span class=\"text-' . ($boolean ? 'success' : 'danger') . '\">'\n        . icon($boolean ? 'check-lg' : 'x-lg')\n        . '</span>';\n}\n\n/**\n * @param string $class\n * @param array  $content\n * @param string $dom_id\n * @return string\n */\nfunction div($class, $content = [], $dom_id = '')\n{\n    if (is_array($content)) {\n        $content = join(\"\\n\", $content);\n    }\n    $dom_id = $dom_id != '' ? ' id=\"' . $dom_id . '\"' : '';\n    return '<div' . $dom_id . ' class=\"' . $class . '\">' . $content . '</div>';\n}\n\n/**\n * @param string $content\n * @param int    $number\n * @return string\n */\nfunction heading($content, $number = 1)\n{\n    return '<h' . $number . '>' . $content . '</h' . $number . '>';\n}\n\n/**\n * @param string[] $items\n * @return string\n */\nfunction toolbar_pills($items)\n{\n    return '<ul class=\"nav nav-pills\">' . join(\"\\n\", $items) . '</ul>';\n}\n\n/**\n * Render a link for a toolbar.\n *\n * @param string $href\n * @param string $icon\n * @param string $label\n * @param bool   $active\n * @return string\n */\nfunction toolbar_item_link($href, $icon, $label, $active = false)\n{\n    return '<li class=\"nav-item\">'\n        . '<a class=\"nav-link ' . ($active ? 'active\" aria-current=\"page\"' : '\"') . ' href=\"' . $href . '\">'\n        . ($icon != '' ? '<span class=\"bi bi-' . $icon . '\"></span> ' : '')\n        . $label\n        . '</a>'\n        . '</li>';\n}\n\nfunction toolbar_dropdown_item(string $href, string $label, bool $active, string $icon = null): string\n{\n    return strtr(\n        '<li><a class=\"dropdown-item{active}\"{aria} href=\"{href}\">{icon} {label}</a></li>',\n        [\n            '{href}'   => $href,\n            '{icon}'   => $icon === null ? '' : '<i class=\"bi bi-' . $icon . '\"></i>',\n            '{label}'  => $label,\n            '{active}' => $active ? ' active' : '',\n            '{aria}' => $active ? ' aria-current=\"page\"' : '',\n        ]\n    );\n}\n\nfunction toolbar_dropdown_item_divider(): string\n{\n    return '<li><hr class=\"dropdown-divider\"></li>';\n}\n\n/**\n * @param string $label\n * @param array  $submenu\n * @param bool   $active\n * @return string\n */\nfunction toolbar_dropdown($label, $submenu, $active = false): string\n{\n    $template = <<<EOT\n<li class=\"nav-item dropdown\">\n    <a class=\"nav-link dropdown-toggle{class}\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n        {label}\n    </a>\n    <ul class=\"dropdown-menu\">\n        {submenu}\n    </ul>\n</li>\nEOT;\n\n    return strtr(\n        $template,\n        [\n            '{class}'   => $active ? ' active' : '',\n            '{label}'   => $label,\n            '{submenu}' => join(\"\\n\", $submenu),\n        ]\n    );\n}\n\n/**\n * Generiert HTML Code f\u00fcr eine \"Seite\".\n * F\u00fcgt dazu die \u00fcbergebenen Elemente zusammen.\n *\n * @param string[] $elements\n * @return string\n */\nfunction page($elements)\n{\n    return join($elements);\n}\n\n/**\n * Generiert HTML Code f\u00fcr eine \"Seite\" mit zentraler \u00dcberschrift\n * F\u00fcgt dazu die \u00fcbergebenen Elemente zusammen.\n *\n * @param string   $title\n * @param string[] $elements\n * @param bool     $container\n * @return string\n */\nfunction page_with_title($title, $elements, bool $container = false)\n{\n    if ($container) {\n        $html = '<div class=\"container\">';\n    } else {\n        $html = '<div class=\"col-md-12\">';\n    }\n    return $html . '<h1>' . $title . '</h1>' . join($elements) . '</div>';\n}\n\n/**\n * Renders a description based on the data arrays key and values as label an description.\n *\n * @param array $data\n * @return string\n */\nfunction description($data)\n{\n    $elements = [];\n    foreach ($data as $label => $description) {\n        if (!empty($label) && !empty($description)) {\n            $elements[] = '<dt class=\"col-sm-1\">' . $label . '</dt><dd class=\"col-sm-11\">' . $description . '</dd>';\n        }\n    }\n    return '<dl class=\"row\">' . join($elements) . '</dl>';\n}\n\n/**\n * Rendert eine Datentabelle\n *\n * @param array|string        $columns\n * @param array[]|ArrayAccess $rows_raw\n * @param bool                $data\n * @return string\n */\nfunction table($columns, $rows_raw, $data = true)\n{\n    // If only one column is given\n    if (!is_array($columns)) {\n        $rows = [];\n        foreach ($rows_raw as $row) {\n            $rows[] = [\n                'col' => $row,\n            ];\n        }\n        return render_table([\n            'col' => $columns,\n        ], $rows, $data);\n    }\n\n    return render_table($columns, $rows_raw, $data);\n}\n\n/**\n * Helper for rendering a html-table.\n * use table()\n *\n * @param string[] $columns\n * @param array[]  $rows\n * @param bool     $data\n * @return string\n */\nfunction render_table($columns, $rows, $data = true)\n{\n    if (count($rows) == 0) {\n        return info(__('No data found.'), true);\n    }\n\n    $html = '<table class=\"table table-striped' . ($data ? ' data' : '') . '\">';\n    $html .= '<thead><tr>';\n    foreach ($columns as $key => $column) {\n        $html .= '<th class=\"column_' . $key . '\">' . $column . '</th>';\n    }\n    $html .= '</tr></thead>';\n    $html .= '<tbody>';\n    foreach ($rows as $row) {\n        $html .= '<tr>';\n        foreach ($columns as $key => $column) {\n            $value = '&nbsp;';\n            if (isset($row[$key])) {\n                $value = $row[$key];\n            }\n            $html .= '<td class=\"column_' . $key . '\">' . $value . '</td>';\n        }\n        $html .= '</tr>';\n    }\n    $html .= '</tbody>';\n    $html .= '</table>';\n    return $html;\n}\n\n/**\n * Rendert einen Knopf\n *\n * @param string $href\n * @param string $label\n * @param string $class\n * @param string $id\n * @return string\n */\nfunction button($href, $label, $class = '', $id = '')\n{\n    if (!Str::contains(str_replace(['btn-sm', 'btn-xl'], '', $class), 'btn-')) {\n        $class = 'btn-secondary' . ($class ? ' ' . $class : '');\n    }\n\n    $idAttribute = $id ? 'id=\"' . $id . '\"' : '';\n\n    return '<a ' . $idAttribute . ' href=\"' . $href . '\" class=\"btn ' . $class . '\">' . $label . '</a>';\n}\n\n/**\n * Renders a button to select corresponding checkboxes\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @return string\n */\nfunction button_checkbox_selection($name, $label, $value)\n{\n    return '<button type=\"button\" class=\"btn btn-secondary d-print-none checkbox-selection\" '\n        . 'data-id=\"selection_' . $name . '\" data-value=\"' . $value . '\">' . $label . '</button>';\n}\n\n/**\n * Renders a button with an icon\n *\n * @param string $href\n * @param string $icon\n * @param string $class\n *\n * @return string\n */\nfunction button_icon($href, $icon, $class = '')\n{\n    return button($href, icon($icon), $class);\n}\n\n/**\n * Rendert einen Knopf, der zur Hilfe eines bestimmten Themas f\u00fchrt.\n *\n * @param string $topic documentation resource (like user/), is appended to documentation url.\n * @return string\n */\nfunction button_help($topic = '')\n{\n    return button(config('documentation_url') . $topic, icon('question-circle'), 'btn-sm');\n}\n\n/**\n * Rendert eine Toolbar mit Kn\u00f6pfen\n *\n * @param array $buttons\n * @return string\n */\nfunction buttons($buttons = [])\n{\n    return '<div class=\"mb-3\">' . table_buttons($buttons) . '</div>';\n}\n\n/**\n * @param array $buttons\n * @return string\n */\nfunction table_buttons($buttons = [], $additionalClass = '')\n{\n    return '<div class=\"btn-group ' . $additionalClass . '\" role=\"group\">' . join('', $buttons) . '</div>';\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\License;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilterRenderer;\nuse Illuminate\\Support\\Collection;\n\n/**\n * AngelTypes\n */\n\n/**\n * Renders the angeltypes name as link.\n *\n * @param AngelType $angeltype\n * @param bool      $plain\n * @return string\n */\nfunction AngelType_name_render(AngelType $angeltype, $plain = false)\n{\n    if ($plain) {\n        return sprintf('%s (%u)', $angeltype->name, $angeltype->id);\n    }\n\n    return '<a href=\"' . angeltype_link($angeltype->id) . '\">'\n        . ($angeltype->restricted ? icon('mortarboard-fill') : '') . $angeltype->name\n        . '</a>';\n}\n\n/**\n * Render angeltype membership state\n *\n * @param AngelType $user_angeltype UserAngelType and AngelType\n * @return string\n */\nfunction AngelType_render_membership(AngelType $user_angeltype)\n{\n    if (!empty($user_angeltype->user_angel_type_id)) {\n        if ($user_angeltype->restricted) {\n            if (empty($user_angeltype->confirm_user_id)) {\n                return icon('mortarboard-fill') . __('Unconfirmed');\n            } elseif ($user_angeltype->supporter) {\n                return icon_bool(true) . __('Supporter');\n            }\n            return icon_bool(true) . __('Member');\n        } elseif ($user_angeltype->supporter) {\n            return icon_bool(true) . __('Supporter');\n        }\n        return icon_bool(true) . __('Member');\n    }\n    return icon_bool(false);\n}\n\n/**\n * @param AngelType $angeltype\n * @return string\n */\nfunction AngelType_delete_view(AngelType $angeltype)\n{\n    return page_with_title(sprintf(__('Delete angeltype %s'), $angeltype->name), [\n        info(sprintf(__('Do you want to delete angeltype %s?'), $angeltype->name), true),\n        form([\n            buttons([\n                button(page_link_to('angeltypes'), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('trash') . __('delete'), 'btn-danger', false),\n            ]),\n        ]),\n    ], true);\n}\n\n/**\n * Render angeltype edit form.\n *\n * @param AngelType $angeltype The angeltype to edit\n * @param boolean   $supporter_mode Is the user a supporter of this angeltype?\n * @return string\n */\nfunction AngelType_edit_view(AngelType $angeltype, bool $supporter_mode)\n{\n    return page_with_title(sprintf(__('Edit %s'), $angeltype->name), [\n        buttons([\n            button(page_link_to('angeltypes'), icon('person-lines-fill') . __('Angeltypes'), 'back'),\n        ]),\n        msg(),\n        form([\n            $supporter_mode\n                ? form_info(__('Name'), $angeltype->name)\n                : form_text('name', __('Name'), $angeltype->name),\n            $supporter_mode\n                ? form_info(__('Requires introduction'), $angeltype->restricted ? __('Yes') : __('No'))\n                : form_checkbox('restricted', __('Requires introduction'), $angeltype->restricted),\n            form_info(\n                '',\n                __('Angel types which require introduction can only be used by an angel if enabled by a supporter (double opt-in).')\n            ),\n            $supporter_mode\n                ? form_info(__('No Self Sign Up allowed'), $angeltype->no_self_signup ? __('Yes') : __('No'))\n                : form_checkbox('no_self_signup', __('No Self Sign Up allowed'), $angeltype->no_self_signup),\n            $supporter_mode ?\n                form_info(\n                    __('Requires driver license'),\n                    $angeltype->requires_driver_license\n                        ? __('Yes')\n                        : __('No')\n                ) :\n                form_checkbox(\n                    'requires_driver_license',\n                    __('Requires driver license'),\n                    $angeltype->requires_driver_license\n                ),\n            $supporter_mode && config('ifsg_enabled') ?\n                form_info(\n                    __('angeltype.ifsg.required'),\n                    $angeltype->requires_ifsg_certificate\n                        ? __('Yes')\n                        : __('No')\n                ) :\n                form_checkbox(\n                    'requires_ifsg_certificate',\n                    __('angeltype.ifsg.required'),\n                    $angeltype->requires_ifsg_certificate\n                ),\n            $supporter_mode\n                ? form_info(__('Show on dashboard'), $angeltype->show_on_dashboard ? __('Yes') : __('No'))\n                : form_checkbox('show_on_dashboard', __('Show on dashboard'), $angeltype->show_on_dashboard),\n            $supporter_mode\n                ? form_info(__('Hide at Registration'), $angeltype->hide_register ? __('Yes') : __('No'))\n                : form_checkbox('hide_register', __('Hide at Registration'), $angeltype->hide_register),\n            form_textarea('description', __('Description'), $angeltype->description),\n            form_info('', __('Please use markdown for the description.')),\n            heading(__('Contact'), 3),\n            form_info(\n                '',\n                __('Primary contact person/desk for user questions.')\n            ),\n            form_text('contact_name', __('Name'), $angeltype->contact_name),\n            config('enable_dect') ? form_text('contact_dect', __('DECT'), $angeltype->contact_dect) : '',\n            form_text('contact_email', __('E-Mail'), $angeltype->contact_email),\n            form_submit('submit', __('Save')),\n        ]),\n    ]);\n}\n\n/**\n * Renders the buttons for the angeltype view.\n *\n * @param AngelType          $angeltype\n * @param UserAngelType|null $user_angeltype\n * @param bool               $admin_angeltypes\n * @param bool               $supporter\n * @param License            $user_driver_license\n * @param User|null          $user\n * @return string\n */\nfunction AngelType_view_buttons(\n    AngelType $angeltype,\n    ?UserAngelType $user_angeltype,\n    $admin_angeltypes,\n    $supporter,\n    $user_driver_license,\n    $user\n) {\n    $buttons = [\n        button(page_link_to('angeltypes'), icon('person-lines-fill') . __('Angeltypes'), 'back'),\n    ];\n\n    if ($angeltype->requires_driver_license) {\n        $buttons[] = button(\n            user_driver_license_edit_link($user),\n            icon('person-vcard') . __('my driving license')\n        );\n    }\n    if (config('isfg_enabled') && $angeltype->requires_ifsg_certificate) {\n        $buttons[] = button(\n            url('/settings/certificates'),\n            icon('card-checklist') . __('angeltype.ifsg.own')\n        );\n    }\n\n    if (is_null($user_angeltype)) {\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype->id]),\n            icon('box-arrow-in-right') . __('join'),\n            'add'\n        );\n    } else {\n        if ($angeltype->requires_driver_license && !$user_driver_license->wantsToDrive()) {\n            error(__('This angeltype requires a driver license. Please enter your driver license information!'));\n        }\n\n        if (\n            config('ifsg_enabled') && $angeltype->requires_ifsg_certificate && !(\n            $user->license->ifsg_certificate_light || $user->license->ifsg_certificate\n            )\n        ) {\n            error(__('angeltype.ifsg.required.info'));\n        }\n\n        if ($angeltype->restricted && !$user_angeltype->confirm_user_id) {\n            error(sprintf(\n                __('You are unconfirmed for this angeltype. Please go to the introduction for %s to get confirmed.'),\n                $angeltype->name\n            ));\n        }\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype->id]),\n            icon('box-arrow-right') . __('leave')\n        );\n    }\n\n    if ($admin_angeltypes || $supporter) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype->id]),\n            icon('pencil') . __('edit')\n        );\n    }\n    if ($admin_angeltypes) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype->id]),\n            icon('trash') . __('delete')\n        );\n    }\n\n    return buttons($buttons);\n}\n\n/**\n * Renders and sorts the members of an angeltype into supporters, members and unconfirmed members.\n *\n * @param AngelType $angeltype\n * @param User[]    $members\n * @param bool      $admin_user_angeltypes\n * @param bool      $admin_angeltypes\n * @return array [supporters, members, unconfirmed members]\n */\nfunction AngelType_view_members(AngelType $angeltype, $members, $admin_user_angeltypes, $admin_angeltypes)\n{\n    $supporters = [];\n    $members_confirmed = [];\n    $members_unconfirmed = [];\n    foreach ($members as $member) {\n        $member->name = User_Nick_render($member) . User_Pronoun_render($member);\n        if (config('enable_dect')) {\n            $member['dect'] = $member->contact->dect;\n        }\n        if ($angeltype->requires_driver_license) {\n            $member['wants_to_drive'] = icon_bool($member->license->wantsToDrive());\n            $member['has_car'] = icon_bool($member->license->has_car);\n            $member['has_license_car'] = icon_bool($member->license->drive_car);\n            $member['has_license_3_5t_transporter'] = icon_bool($member->license->drive_3_5t);\n            $member['has_license_7_5t_truck'] = icon_bool($member->license->drive_7_5t);\n            $member['has_license_12t_truck'] = icon_bool($member->license->drive_12t);\n            $member['has_license_forklift'] = icon_bool($member->license->drive_forklift);\n        }\n        if ($angeltype->requires_ifsg_certificate && config('ifsg_enabled')) {\n            $member['ifsg_certificate'] = icon_bool($member->license->ifsg_certificate);\n            if (config('ifsg_light_enabled')) {\n                $member['ifsg_certificate_light'] = icon_bool($member->license->ifsg_certificate_light);\n            }\n        }\n\n        if ($angeltype->restricted && empty($member->pivot->confirm_user_id)) {\n            $member['actions'] = table_buttons([\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'confirm', 'user_angeltype_id' => $member->pivot->id]\n                    ),\n                    __('confirm'),\n                    'btn-sm'\n                ),\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'delete', 'user_angeltype_id' => $member->pivot->id]\n                    ),\n                    __('deny'),\n                    'btn-sm'\n                ),\n            ]);\n            $members_unconfirmed[] = $member;\n        } elseif ($member->pivot->supporter) {\n            if ($admin_angeltypes) {\n                $member['actions'] = table_buttons([\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'update',\n                            'user_angeltype_id' => $member->pivot->id,\n                            'supporter'         => 0,\n                        ]),\n                        icon('person-fill-down') . __('Remove supporter rights'),\n                        'btn-sm'\n                    ),\n                ]);\n            } else {\n                $member['actions'] = '';\n            }\n            $supporters[] = $member;\n        } else {\n            if ($admin_user_angeltypes) {\n                $member['actions'] = table_buttons([\n                    $admin_angeltypes ?\n                        button(\n                            page_link_to('user_angeltypes', [\n                                'action'            => 'update',\n                                'user_angeltype_id' => $member->pivot->id,\n                                'supporter'         => 1,\n                            ]),\n                            icon('person-fill-up') . __('Add supporter rights'),\n                            'btn-sm'\n                        ) :\n                        '',\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'delete',\n                            'user_angeltype_id' => $member->pivot->id,\n                        ]),\n                        icon('trash') . __('remove'),\n                        'btn-sm'\n                    ),\n                ]);\n            }\n            $members_confirmed[] = $member;\n        }\n    }\n\n    return [\n        $supporters,\n        $members_confirmed,\n        $members_unconfirmed,\n    ];\n}\n\n/**\n * Creates the needed member table headers according to given rights and settings from the angeltype.\n *\n * @param AngelType $angeltype\n * @param bool      $supporter\n * @param bool      $admin_angeltypes\n * @return array\n */\nfunction AngelType_view_table_headers(AngelType $angeltype, $supporter, $admin_angeltypes)\n{\n    $headers = [\n        'name'    => __('Nick'),\n    ];\n\n    if (config('enable_dect')) {\n        $headers['dect'] = __('DECT');\n    }\n\n    if ($angeltype->requires_driver_license && ($supporter || $admin_angeltypes)) {\n        $headers = array_merge($headers, [\n            'wants_to_drive'               => __('Driver'),\n            'has_car'                      => __('Has car'),\n            'has_license_car'              => __('Car'),\n            'has_license_3_5t_transporter' => __('3,5t Transporter'),\n            'has_license_7_5t_truck'       => __('7,5t Truck'),\n            'has_license_12t_truck'        => __('12t Truck'),\n            'has_license_forklift'         => __('Forklift'),\n        ]);\n    }\n\n    if (config('ifsg_enabled') && $angeltype->requires_ifsg_certificate && ($supporter || $admin_angeltypes)) {\n        if (config('ifsg_light_enabled')) {\n            $headers['ifsg_certificate_light'] = __('ifsg.certificate_light');\n        }\n        $headers['ifsg_certificate'] = __('ifsg.certificate');\n    }\n\n    $headers['actions'] = '';\n\n    return $headers;\n}\n\n/**\n * Render an angeltype page containing the member lists.\n *\n * @param AngelType             $angeltype\n * @param User[]                $members\n * @param UserAngelType|null    $user_angeltype\n * @param bool                  $admin_user_angeltypes\n * @param bool                  $admin_angeltypes\n * @param bool                  $supporter\n * @param License               $user_driver_license\n * @param User                  $user\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @param int                   $tab The selected tab\n * @return string\n */\nfunction AngelType_view(\n    AngelType $angeltype,\n    $members,\n    ?UserAngelType $user_angeltype,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter,\n    $user_driver_license,\n    $user,\n    ShiftsFilterRenderer $shiftsFilterRenderer,\n    ShiftCalendarRenderer $shiftCalendarRenderer,\n    $tab\n) {\n    return page_with_title(sprintf(__('Team %s'), $angeltype->name), [\n        AngelType_view_buttons($angeltype, $user_angeltype, $admin_angeltypes, $supporter, $user_driver_license, $user),\n        msg(),\n        tabs([\n            __('Info')   => AngelType_view_info(\n                $angeltype,\n                $members,\n                $admin_user_angeltypes,\n                $admin_angeltypes,\n                $supporter\n            ),\n            __('Shifts') => AngelType_view_shifts(\n                $angeltype,\n                $shiftsFilterRenderer,\n                $shiftCalendarRenderer\n            ),\n        ], $tab),\n    ], true);\n}\n\n/**\n * @param AngelType             $angeltype\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @return string HTML\n */\nfunction AngelType_view_shifts(AngelType $angeltype, $shiftsFilterRenderer, $shiftCalendarRenderer)\n{\n    $shifts = $shiftsFilterRenderer->render(page_link_to('angeltypes', [\n        'action'       => 'view',\n        'angeltype_id' => $angeltype->id,\n    ]), ['type' => $angeltype->id]);\n    $shifts .= $shiftCalendarRenderer->render();\n\n    return div('first', $shifts);\n}\n\n/**\n * @param AngelType $angeltype\n * @param User[]    $members\n * @param bool      $admin_user_angeltypes\n * @param bool      $admin_angeltypes\n * @param bool      $supporter\n * @return string HTML\n */\nfunction AngelType_view_info(\n    AngelType $angeltype,\n    $members,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter\n) {\n    $info = [];\n    if ($angeltype->hasContactInfo()) {\n        $info[] = AngelTypes_render_contact_info($angeltype);\n    }\n\n    $info[] = '<h3>' . __('Description') . '</h3>';\n    $parsedown = new Parsedown();\n    if ($angeltype->description != '') {\n        $info[] = $parsedown->parse($angeltype->description);\n    }\n\n    list($supporters, $members_confirmed, $members_unconfirmed) = AngelType_view_members(\n        $angeltype,\n        $members,\n        $admin_user_angeltypes,\n        $admin_angeltypes\n    );\n    $table_headers = AngelType_view_table_headers($angeltype, $supporter, $admin_angeltypes);\n\n    if (count($supporters) > 0) {\n        $info[] = '<h3>' . __('Supporters') . '</h3>';\n        $info[] = table($table_headers, $supporters);\n    }\n\n    if (count($members_confirmed) > 0) {\n        $members_confirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_confirmed),\n            'actions' => '',\n        ];\n    }\n\n    if (count($members_unconfirmed) > 0) {\n        $members_unconfirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_unconfirmed),\n            'actions' => '',\n        ];\n    }\n\n    $info[] = '<h3>' . __('Members') . '</h3>';\n    if ($admin_user_angeltypes) {\n        $info[] = buttons([\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'add', 'angeltype_id' => $angeltype->id]\n                ),\n                __('Add'),\n                'add'\n            ),\n        ]);\n    }\n    $info[] = table($table_headers, $members_confirmed);\n\n    if ($admin_user_angeltypes && $angeltype->restricted && count($members_unconfirmed) > 0) {\n        $info[] = '<h3>' . __('Unconfirmed') . '</h3>';\n        $info[] = buttons([\n            button(\n                page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype->id]),\n                icon('check-lg') . __('confirm all')\n            ),\n            button(\n                page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype->id]),\n                icon('trash') . __('deny all')\n            ),\n        ]);\n        $info[] = table($table_headers, $members_unconfirmed);\n    }\n\n    return join($info);\n}\n\n/**\n * Renders the contact info\n *\n * @param AngelType $angeltype\n * @return string HTML\n */\nfunction AngelTypes_render_contact_info(AngelType $angeltype)\n{\n    $info = [\n        __('Name')   => [$angeltype->contact_name, $angeltype->contact_name],\n        __('DECT')   => config('enable_dect') ? [sprintf('<a href=\"tel:%s\">%1$s</a>', $angeltype->contact_dect), $angeltype->contact_dect] : null,\n        __('E-Mail') => [sprintf('<a href=\"mailto:%s\">%1$s</a>', $angeltype->contact_email), $angeltype->contact_email],\n    ];\n    $contactInfo = [];\n    foreach ($info as $name => $data) {\n        if (!empty($data[1])) {\n            $contactInfo[$name] = $data[0];\n        }\n    }\n\n    return heading(__('Contact'), 3) . description($contactInfo);\n}\n\n/**\n * Display the list of angeltypes.\n *\n * @param AngelType[]|Collection $angeltypes\n * @param bool                   $admin_angeltypes\n * @return string\n */\nfunction AngelTypes_list_view($angeltypes, bool $admin_angeltypes)\n{\n    return page_with_title(angeltypes_title(), [\n        msg(),\n        buttons([\n            $admin_angeltypes\n                ? button(page_link_to('angeltypes', ['action' => 'edit']), __('New angeltype'), 'add')\n                : '',\n            button(url('/angeltypes/about'), __('angeltypes.about')),\n        ]),\n        table([\n            'name'                   => __('Name'),\n            'is_restricted'          => icon('mortarboard-fill') . __('Requires introduction'),\n            'no_self_signup_allowed' => icon('pencil-square') . __('Self Sign Up Allowed'),\n            'membership'             => __('Membership'),\n            'actions'                => '',\n        ], $angeltypes),\n    ], true);\n}\n", "<?php\n\nuse Engelsystem\\Helpers\\DayOfEvent;\nuse Engelsystem\\Models\\News;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Public dashboard (formerly known as angel news hub)\n *\n * @param array             $stats\n * @param array[]           $free_shifts\n * @param News[]|Collection $important_news\n * @return string\n */\nfunction public_dashboard_view($stats, $free_shifts, $important_news)\n{\n    $needed_angels = '';\n    $news = '';\n    if ($important_news->isNotEmpty()) {\n        $first_news = $important_news->first();\n        $news = div('alert alert-warning text-center', [\n            '<a href=\"' . url('/news/' . $first_news->id) . '\"><strong>' . $first_news->title . '</strong></a>',\n        ]);\n    }\n\n    if (count($free_shifts) > 0) {\n        $shift_panels = [\n            '<div class=\"row\">',\n        ];\n        foreach ($free_shifts as $i => $shift) {\n            $shift_panels[] = public_dashboard_shift_render($shift);\n            if ($i % 4 == 3) {\n                $shift_panels[] = '</div><div class=\"row\">';\n            }\n        }\n        $shift_panels[] = '</div>';\n        $needed_angels = div('first', [\n            div('col-md-12', [\n                heading(__('Needed angels:')),\n            ]),\n            div('container-fluid', [\n                join($shift_panels),\n            ]),\n        ]);\n    }\n\n    $stats =  [\n        stats(__('Angels needed in the next 3 hrs'), $stats['needed-3-hours']),\n        stats(__('Angels needed for nightshifts'), $stats['needed-night']),\n        stats(__('Angels currently working'), $stats['angels-working'], 'default'),\n        stats(__('Hours to be worked'), $stats['hours-to-work'], 'default'),\n    ];\n\n    $dayOfEvent = DayOfEvent::get();\n\n    if (config('enable_show_day_of_event') && $dayOfEvent !== null) {\n        $stats[] = stats(__('dashboard.day'), $dayOfEvent, 'default');\n    }\n\n    $isFiltered = request()->get('filtered');\n    $filter = collect(session()->get('shifts-filter'))->only(['rooms', 'types'])->toArray();\n    return page([\n        div('wrapper', [\n            div('public-dashboard', [\n                div('first row', $stats, 'statistics'),\n                $news,\n                $needed_angels,\n            ], 'public-dashboard'),\n        ]),\n        div('first col-md-12 text-center', [buttons([\n            button(\n                '#',\n                icon('fullscreen') . __('Fullscreen'),\n                '',\n                'dashboard-fullscreen'\n            ),\n            auth()->user() ? button(\n                public_dashboard_link($isFiltered ? [] : ['filtered' => 1] + $filter),\n                icon('filter') . ($isFiltered ? __('All') : __('Filtered'))\n            ) : '',\n        ])], 'fullscreen-button'),\n    ]);\n}\n\n/**\n * Renders a single shift panel for a dashboard shift with needed angels\n *\n * @param array $shift\n * @return string\n */\nfunction public_dashboard_shift_render($shift)\n{\n    $panel_body = icon('clock-history') . $shift['start'] . ' - ' . $shift['end'];\n    $panel_body .= ' (' . $shift['duration'] . '&nbsp;h)';\n\n    $panel_body .= '<br>' . icon('list-task') . $shift['shifttype_name'];\n    if (!empty($shift['title'])) {\n        $panel_body .= ' (' . $shift['title'] . ')';\n    }\n\n    $panel_body .= '<br>' . icon('pin-map-fill') . $shift['room_name'];\n\n    foreach ($shift['needed_angels'] as $needed_angels) {\n        $panel_body .= '<br>' . icon('person')\n            . '<span class=\"text-' . $shift['style'] . '\">'\n            . $needed_angels['need'] . ' &times; ' . $needed_angels['angeltype_name']\n            . '</span>';\n    }\n\n    $type = 'bg-dark';\n    if (theme_type() == 'light') {\n        $type = 'bg-light';\n    }\n\n    return div('col-md-3 mb-3', [\n        div('dashboard-card card border-' . $shift['style'] . ' ' . $type, [\n            div('card-body', [\n                '<a class=\"card-link\" href=\"' . shift_link($shift) . '\"></a>',\n                $panel_body,\n            ]),\n        ]),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n *\n * @param Room                  $room\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @return string\n */\nfunction Room_view(Room $room, ShiftsFilterRenderer $shiftsFilterRenderer, ShiftCalendarRenderer $shiftCalendarRenderer)\n{\n    $user = auth()->user();\n\n    $assignNotice = '';\n    if (config('signup_requires_arrival') && !$user->state->arrived) {\n        $assignNotice = info(render_user_arrived_hint(), true);\n    }\n\n    $description = '';\n    if ($room->description) {\n        $description = '<h3>' . __('Description') . '</h3>';\n        $parsedown = new Parsedown();\n        $description .= $parsedown->parse($room->description);\n    }\n\n    $dect = '';\n    if (config('enable_dect') && $room->dect) {\n        $dect = heading(__('Contact'), 3)\n            . description([__('DECT') => sprintf('<a href=\"tel:%s\">%1$s</a>', $room->dect)]);\n    }\n\n    $tabs = [];\n    if ($room->map_url) {\n        $tabs[__('Map')] = sprintf(\n            '<div class=\"map\">'\n            . '<iframe style=\"width: 100%%; min-height: 400px; border: 0 none;\" src=\"%s\"></iframe>'\n            . '</div>',\n            $room->map_url\n        );\n    }\n\n    $tabs[__('Shifts')] = div('first', [\n        $shiftsFilterRenderer->render(page_link_to('rooms', [\n            'action'  => 'view',\n            'room_id' => $room->id,\n        ]), ['rooms' => [$room->id]]),\n        $shiftCalendarRenderer->render(),\n    ]);\n\n    $selected_tab = 0;\n    $request = request();\n    if ($request->has('shifts_filter_day')) {\n        $selected_tab = count($tabs) - 1;\n    }\n\n    return page_with_title(icon('pin-map-fill') . $room->name, [\n        $assignNotice,\n        auth()->can('admin_rooms') ? buttons([\n            button(\n                page_link_to('admin/rooms/edit/' . $room->id),\n                icon('pencil') . __('edit')\n            ),\n        ]) : '',\n        $dect,\n        $description,\n        tabs($tabs, $selected_tab),\n    ], true);\n}\n\n/**\n *\n * @param Room $room\n * @return string\n */\nfunction Room_name_render(Room $room)\n{\n    if (auth()->can('view_rooms')) {\n        return '<a href=\"' . room_link($room) . '\">' . icon('pin-map-fill') . $room->name . '</a>';\n    }\n\n    return icon('pin-map-fill') . $room->name;\n}\n", "<?php\n\nnamespace Engelsystem;\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\Shifts\\ShiftSignupStatus;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Support\\Collection;\n\nuse function theme_type;\n\n/**\n * Renders a single shift for the shift calendar\n */\nclass ShiftCalendarShiftRenderer\n{\n    /**\n     * Renders a shift\n     *\n     * @param Shift                   $shift The shift to render\n     * @param array[]                 $needed_angeltypes\n     * @param ShiftEntry[]|Collection $shift_entries\n     * @param User                    $user The user who is viewing the shift calendar\n     * @return array\n     */\n    public function render(Shift $shift, $needed_angeltypes, $shift_entries, $user)\n    {\n        $info_text = '';\n        if ($shift->title != '') {\n            $info_text = icon('info-circle') . $shift->title . '<br>';\n        }\n        list($shift_signup_state, $shifts_row) = $this->renderShiftNeededAngeltypes(\n            $shift,\n            $needed_angeltypes,\n            $shift_entries,\n            $user\n        );\n\n        $class = $this->classForSignupState($shift_signup_state);\n\n        $blocks = ceil(($shift->end->timestamp - $shift->start->timestamp) / ShiftCalendarRenderer::SECONDS_PER_ROW);\n        $blocks = max(1, $blocks);\n\n        $room = $shift->room;\n\n        return [\n            $blocks,\n            div(\n                'shift-card\" style=\"height: '\n                . ($blocks * ShiftCalendarRenderer::BLOCK_HEIGHT - ShiftCalendarRenderer::MARGIN)\n                . 'px;',\n                div(\n                    'shift card bg-' . $class,\n                    [\n                        $this->renderShiftHead($shift, $class, $shift_signup_state->getFreeEntries()),\n                        div('card-body ' . $this->classBg(), [\n                            $info_text,\n                            Room_name_render($room),\n                        ]),\n                        $shifts_row,\n                    ]\n                )\n            ),\n        ];\n    }\n\n    /**\n     * @param ShiftSignupState $shiftSignupState\n     * @return string\n     */\n    private function classForSignupState(ShiftSignupState $shiftSignupState)\n    {\n        return match ($shiftSignupState->getState()) {\n            ShiftSignupStatus::ADMIN, ShiftSignupStatus::OCCUPIED => 'success',\n            ShiftSignupStatus::SIGNED_UP => 'primary',\n            ShiftSignupStatus::NOT_ARRIVED, ShiftSignupStatus::NOT_YET, ShiftSignupStatus::SHIFT_ENDED => 'secondary',\n            ShiftSignupStatus::ANGELTYPE, ShiftSignupStatus::COLLIDES => 'warning',\n            ShiftSignupStatus::FREE => 'danger',\n            default => 'light',\n        };\n    }\n\n    /**\n     * @param Shift                   $shift\n     * @param array[]                 $needed_angeltypes\n     * @param ShiftEntry[]|Collection $shift_entries\n     * @param User                    $user\n     * @return array\n     */\n    private function renderShiftNeededAngeltypes(Shift $shift, $needed_angeltypes, $shift_entries, $user)\n    {\n        $shift_entries_filtered = [];\n        foreach ($needed_angeltypes as $needed_angeltype) {\n            $shift_entries_filtered[$needed_angeltype['id']] = [];\n        }\n        foreach ($shift_entries as $shift_entry) {\n            $shift_entries_filtered[$shift_entry->angel_type_id][] = $shift_entry;\n        }\n\n        $html = '';\n        /** @var ShiftSignupState $shift_signup_state */\n        $shift_signup_state = null;\n        foreach ($needed_angeltypes as $angeltype) {\n            if ($angeltype['count'] > 0 || count($shift_entries_filtered[$angeltype['id']]) > 0) {\n                list($angeltype_signup_state, $angeltype_html) = $this->renderShiftNeededAngeltype(\n                    $shift,\n                    $shift_entries_filtered[$angeltype['id']],\n                    $angeltype,\n                    $user\n                );\n                if (is_null($shift_signup_state)) {\n                    $shift_signup_state = $angeltype_signup_state;\n                } else {\n                    $shift_signup_state->combineWith($angeltype_signup_state);\n                }\n                $html .= $angeltype_html;\n            }\n        }\n        if (is_null($shift_signup_state)) {\n            $shift_signup_state = new ShiftSignupState(ShiftSignupStatus::SHIFT_ENDED, 0);\n        }\n\n        if (auth()->can('user_shifts_admin')) {\n            $html .= '<li class=\"list-group-item d-flex align-items-center ' . $this->classBg() . '\">';\n            $html .= button(\n                shift_entry_create_link_admin($shift),\n                icon('plus-lg') . __('Add more angels'),\n                'btn-sm'\n            );\n            $html .= '</li>';\n        }\n        if ($html != '') {\n            return [\n                $shift_signup_state,\n                '<ul class=\"list-group list-group-flush\">' . $html . '</ul>',\n            ];\n        }\n\n        return [\n            $shift_signup_state,\n            '',\n        ];\n    }\n\n    /**\n     * Renders a list entry containing the needed angels for an angeltype\n     *\n     * @param Shift                   $shift The shift which is rendered\n     * @param ShiftEntry[]|Collection $shift_entries\n     * @param array                   $angeltype The angeltype, containing information about needed angeltypes\n     *                           and already signed up angels\n     * @param User                    $user The user who is viewing the shift calendar\n     * @return array\n     */\n    private function renderShiftNeededAngeltype(Shift $shift, $shift_entries, $angeltype, $user)\n    {\n        $angeltype = (new AngelType())->forceFill($angeltype);\n        $entry_list = [];\n        foreach ($shift_entries as $entry) {\n            $class = $entry->freeloaded ? 'text-decoration-line-through' : '';\n            $entry_list[] = '<span class=\"text-nowrap ' . $class . '\">' . User_Nick_render($entry->user) . '</span>';\n        }\n        $shift_signup_state = Shift_signup_allowed(\n            $user,\n            $shift,\n            $angeltype,\n            null,\n            null,\n            $angeltype,\n            $shift_entries\n        );\n        $freeEntriesCount = $shift_signup_state->getFreeEntries();\n        $inner_text = _e('%d helper needed', '%d helpers needed', $freeEntriesCount, [$freeEntriesCount]);\n\n        $entry = match ($shift_signup_state->getState()) {\n            // When admin or free display a link + button for sign up\n            ShiftSignupStatus::ADMIN, ShiftSignupStatus::FREE =>\n                '<a class=\"me-1 text-nowrap\" href=\"'\n                . shift_entry_create_link($shift, $angeltype)\n                . '\">'\n                . $inner_text\n                . '</a> '\n                . button(\n                    shift_entry_create_link($shift, $angeltype),\n                    __('Sign up'),\n                    'btn-sm btn-primary text-nowrap d-print-none'\n                ),\n            // No link and add a text hint, when the shift ended\n            ShiftSignupStatus::SHIFT_ENDED => $inner_text . ' (' . __('ended') . ')',\n            // No link and add a text hint, when the shift ended\n            ShiftSignupStatus::NOT_ARRIVED => $inner_text . ' (' . __('please arrive for signup') . ')',\n            ShiftSignupStatus::NOT_YET => $inner_text . ' (' . __('not yet') . ')',\n            ShiftSignupStatus::ANGELTYPE => $angeltype->restricted\n                // User has to be confirmed on the angeltype first\n                ? $inner_text . icon('mortarboard-fill')\n                // Add link to join the angeltype first\n                : $inner_text . '<br />'\n                . button(\n                    page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype->id]),\n                    sprintf(__('Become %s'), $angeltype->name),\n                    'btn-sm'\n                ),\n            // Shift collides or user is already signed up: No signup allowed\n            ShiftSignupStatus::COLLIDES, ShiftSignupStatus::SIGNED_UP => $inner_text,\n            // Shift is full\n            ShiftSignupStatus::OCCUPIED => null,\n            default => null,\n        };\n        if (!is_null($entry)) {\n            $entry_list[] = $entry;\n        }\n\n        $shifts_row = '<li class=\"list-group-item d-flex flex-wrap align-items-center ' . $this->classBg() . '\">';\n        $shifts_row .= '<strong class=\"me-1\">' . AngelType_name_render($angeltype) . ':</strong> ';\n        $shifts_row .= join(', ', $entry_list);\n        $shifts_row .= '</li>';\n        return [\n            $shift_signup_state,\n            $shifts_row,\n        ];\n    }\n\n    /**\n     * Return the corresponding bg class\n     *\n     * @return string\n     */\n    private function classBg(): string\n    {\n        if (theme_type() === 'light') {\n            return 'bg-white';\n        }\n\n        return 'bg-dark';\n    }\n\n    /**\n     * Renders the shift header\n     *\n     * @param Shift  $shift The shift\n     * @param string $class The shift state class\n     * @return string\n     */\n    private function renderShiftHead(Shift $shift, $class, $needed_angeltypes_count)\n    {\n        $header_buttons = '';\n        if (auth()->can('admin_shifts')) {\n            $header_buttons = '<div class=\"ms-auto d-print-none\">' . table_buttons([\n                    button(\n                        page_link_to('user_shifts', ['edit_shift' => $shift->id]),\n                        icon('pencil'),\n                        'btn-' . $class . ' btn-sm border-light text-white'\n                    ),\n                    button(\n                        page_link_to('user_shifts', ['delete_shift' => $shift->id]),\n                        icon('trash'),\n                        'btn-' . $class . ' btn-sm border-light text-white'\n                    ),\n                ]) . '</div>';\n        }\n        $shift_heading = $shift->start->format('H:i') . ' &dash; '\n            . $shift->end->format('H:i') . ' &mdash; '\n            . $shift->shiftType->name;\n\n        if ($needed_angeltypes_count > 0) {\n            $shift_heading = '<span class=\"badge bg-light text-danger me-1\">' . $needed_angeltypes_count . '</span> ' . $shift_heading;\n        }\n\n        return div('card-header d-flex align-items-center', [\n            '<a class=\"d-flex align-items-center text-white\" href=\"' . shift_link($shift) . '\">' . $shift_heading . '</a>',\n            $header_buttons,\n        ]);\n    }\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Sign off from a user from a shift with admin permissions, asking for ack.\n *\n * @param Shift $shift\n * @param AngelType $angeltype\n * @param User  $signoff_user\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view_admin(Shift $shift, AngelType $angeltype, User $signoff_user)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off %s from shift %s from %s to %s as %s?'),\n            User_Nick_render($signoff_user),\n            $shift->shiftType->name,\n            $shift->start->format(__('Y-m-d H:i')),\n            $shift->end->format(__('Y-m-d H:i')),\n            $angeltype->name\n        ), true),\n        form([\n            buttons([\n                button(user_link($signoff_user->id), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('trash') . __('sign off'), 'btn-danger', false),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Sign off from a shift, asking for ack.\n *\n * @param Shift $shift\n * @param AngelType $angeltype\n * @param User $signoff_user\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view(Shift $shift, AngelType $angeltype, User $signoff_user)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off from your shift %s from %s to %s as %s?'),\n            $shift->shiftType->name,\n            $shift->start->format(__('Y-m-d H:i')),\n            $shift->end->format(__('Y-m-d H:i')),\n            $angeltype->name\n        ), true),\n\n        form([\n            buttons([\n                button(user_link($signoff_user->id), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('trash') . __('delete'), 'btn-danger', false),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Title for deleting a shift entry.\n */\nfunction ShiftEntry_delete_title()\n{\n    return __('Shift sign off');\n}\n\n/**\n * Admin puts user into shift.\n *\n * @param Shift     $shift\n * @param Room      $room\n * @param AngelType $angeltype\n * @param array     $angeltypes_select\n * @param User      $signup_user\n * @param array     $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_admin(\n    Shift $shift,\n    Room $room,\n    AngelType $angeltype,\n    $angeltypes_select,\n    $signup_user,\n    $users_select\n) {\n    $start = $shift->start->format(__('Y-m-d H:i'));\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . $shift->shiftType->name\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(__('Do you want to sign up the following user for this shift?'), true),\n            form([\n                form_select('angeltype_id', __('Angeltype'), $angeltypes_select, $angeltype->id),\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', icon('check-lg') . __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * Supporter puts user into shift.\n *\n * @param Shift $shift\n * @param Room  $room\n * @param AngelType $angeltype\n * @param User  $signup_user\n * @param array $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_supporter(Shift $shift, Room $room, AngelType $angeltype, $signup_user, $users_select)\n{\n    $start = $shift->start->format(__('Y-m-d H:i'));\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . $shift->shiftType->name\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(\n                __('Do you want to sign up the following user for this shift as %s?'),\n                $angeltype->name\n            ), true),\n            form([\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', icon('check-lg') . __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * User joining a shift.\n *\n * @param Shift  $shift\n * @param Room   $room\n * @param AngelType  $angeltype\n * @param string $comment\n * @return string\n */\nfunction ShiftEntry_create_view_user(Shift $shift, Room $room, AngelType $angeltype, $comment)\n{\n    $start = $shift->start->format(__('Y-m-d H:i'));\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . $shift->shiftType->name\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(__('Do you want to sign up for this shift as %s?'), $angeltype->name), true),\n            form([\n                form_textarea('comment', __('Comment (for your eyes only):'), $comment),\n                form_submit('submit', icon('check-lg') . __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * Title for creating a shift entry.\n */\nfunction ShiftEntry_create_title()\n{\n    return __('Shift signup');\n}\n\n/**\n * Display form for adding/editing a shift entry.\n *\n * @param User   $angel\n * @param string $date\n * @param string $location\n * @param string $title\n * @param string $type\n * @param string $comment\n * @param bool   $freeloaded\n * @param string $freeloaded_comment\n * @param bool   $user_admin_shifts\n * @return string\n */\nfunction ShiftEntry_edit_view(\n    $angel,\n    $date,\n    $location,\n    $title,\n    $type,\n    $comment,\n    $freeloaded,\n    $freeloaded_comment,\n    $user_admin_shifts = false\n) {\n    $freeload_form = [];\n    if ($user_admin_shifts) {\n        $freeload_form = [\n            form_checkbox('freeloaded', __('Freeloaded'), $freeloaded),\n            form_textarea(\n                'freeloaded_comment',\n                __('Freeload comment (Only for shift coordination):'),\n                $freeloaded_comment\n            ),\n        ];\n    }\n\n    if ($angel->id == auth()->user()->id) {\n        $comment = form_textarea('comment', __('Comment (for your eyes only):'), $comment);\n    } else {\n        $comment = '';\n    }\n\n    return page_with_title(__('Edit shift entry'), [\n        msg(),\n        form([\n            form_info(__('Angel:'), User_Nick_render($angel)),\n            form_info(__('Date, Duration:'), $date),\n            form_info(__('Location:'), $location),\n            form_info(__('Title:'), $title),\n            form_info(__('Type:'), $type),\n            $comment,\n            join('', $freeload_form),\n            form_submit('submit', __('Save')),\n        ]),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction ShiftType_name_render(ShiftType $shifttype)\n{\n    if (auth()->can('shifttypes')) {\n        return '<a href=\"' . shifttype_link($shifttype) . '\">' . $shifttype->name . '</a>';\n    }\n    return $shifttype->name;\n}\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction ShiftType_delete_view(ShiftType $shifttype)\n{\n    return page_with_title(sprintf(__('Delete shifttype %s'), $shifttype->name), [\n        info(sprintf(__('Do you want to delete shifttype %s?'), $shifttype->name), true),\n        form([\n            buttons([\n                button(page_link_to('shifttypes'), icon('x-lg') . __('cancel')),\n                form_submit(\n                    'delete',\n                    icon('trash') . __('delete'),\n                    'btn-danger',\n                    false\n                ),\n            ]),\n        ]),\n    ], true);\n}\n\n/**\n * @param string $name\n * @param string $description\n * @param int    $shifttype_id\n * @return string\n */\nfunction ShiftType_edit_view($name, $description, $shifttype_id)\n{\n    return page_with_title($shifttype_id ? __('Edit shifttype') : __('Create shifttype'), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back'),\n        ]),\n        form([\n            form_text('name', __('Name'), $name),\n            form_textarea('description', __('Description'), $description),\n            form_info('', __('Please use markdown for the description.')),\n            form_submit('submit', __('Save')),\n        ]),\n    ], true);\n}\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction ShiftType_view(ShiftType $shifttype)\n{\n    $parsedown = new Parsedown();\n    $title = $shifttype->name;\n    return page_with_title($title, [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back'),\n            button(\n                page_link_to('shifttypes', ['action' => 'edit', 'shifttype_id' => $shifttype->id]),\n                icon('pencil') . __('edit')\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype->id]),\n                icon('trash') . __('delete'),\n            ),\n        ]),\n        heading(__('Description'), 2),\n        $parsedown->parse($shifttype->description),\n    ], true);\n}\n\n/**\n * @param ShiftType[]|array[]|Collection $shifttypes\n * @return string\n */\nfunction ShiftTypes_list_view($shifttypes)\n{\n    foreach ($shifttypes as $shifttype) {\n        $shifttype->name = '<a href=\"'\n            . page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype->id])\n            . '\">'\n            . $shifttype->name\n            . '</a>';\n        $shifttype->actions = table_buttons([\n            button(\n                page_link_to(\n                    'shifttypes',\n                    ['action' => 'edit', 'shifttype_id' => $shifttype->id]\n                ),\n                icon('pencil') . __('edit'),\n                'btn-sm'\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype->id]),\n                icon('trash') . __('delete'),\n                'btn-sm'\n            ),\n        ]);\n    }\n\n    return page_with_title(shifttypes_title(), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes', ['action' => 'edit']), __('New shifttype'), 'add'),\n        ]),\n        table([\n            'name'    => __('Name'),\n            'actions' => '',\n        ], $shifttypes),\n    ], true);\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Engelsystem\\Models\\Shifts\\ShiftSignupStatus;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftSignupState;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Renders the basic shift view header.\n *\n * @param Shift $shift\n * @param Room  $room\n * @return string HTML\n */\nfunction Shift_view_header(Shift $shift, Room $room)\n{\n    return div('row', [\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('Title') . '</h4>',\n            '<p class=\"lead\">'\n            . ($shift->url != ''\n                ? '<a href=\"' . $shift->url . '\">' . $shift->title . '</a>'\n                : $shift->title)\n            . '</p>',\n        ]),\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('Start') . '</h4>',\n            '<p class=\"lead' . (time() >= $shift->start->timestamp ? ' text-success' : '') . '\">',\n            icon('calendar-event') . $shift->start->format(__('Y-m-d')),\n            '<br />',\n            icon('clock') . $shift->start->format('H:i'),\n            '</p>',\n        ]),\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('End') . '</h4>',\n            '<p class=\"lead' . (time() >= $shift->end->timestamp ? ' text-success' : '') . '\">',\n            icon('calendar-event') . $shift->end->format(__('Y-m-d')),\n            '<br />',\n            icon('clock') . $shift->end->format('H:i'),\n            '</p>',\n        ]),\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('Location') . '</h4>',\n            '<p class=\"lead\">' . Room_name_render($room) . '</p>',\n        ]),\n    ]);\n}\n\n/**\n * @param Shift $shift\n * @return string\n */\nfunction Shift_editor_info_render(Shift $shift)\n{\n    $info = [];\n    if (!empty($shift->created_by)) {\n        $info[] = sprintf(\n            icon('plus-lg') . __('created at %s by %s'),\n            $shift->created_at->format(__('Y-m-d H:i')),\n            User_Nick_render($shift->createdBy)\n        );\n    }\n    if (!empty($shift->updated_by)) {\n        $info[] = sprintf(\n            icon('pencil') . __('edited at %s by %s'),\n            $shift->updated_at->format(__('Y-m-d H:i')),\n            User_Nick_render($shift->updatedBy)\n        );\n    }\n    return join('<br />', $info);\n}\n\n/**\n * @param Shift     $shift\n * @param AngelType $angeltype\n * @return string\n */\nfunction Shift_signup_button_render(Shift $shift, AngelType $angeltype)\n{\n    /** @var UserAngelType|null $user_angeltype */\n    $user_angeltype = UserAngelType::whereUserId(auth()->user()->id)\n        ->where('angel_type_id', $angeltype->id)\n        ->first();\n\n    if (\n        $angeltype->shift_signup_state?->isSignupAllowed()\n        || auth()->user()->isAngelTypeSupporter($angeltype)\n        || auth()->can('admin_user_angeltypes')\n    ) {\n        return button(shift_entry_create_link($shift, $angeltype), __('Sign up'));\n    } elseif (empty($user_angeltype)) {\n        return button(\n            page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n            sprintf(\n                __('Become %s'),\n                $angeltype->name\n            )\n        );\n    }\n\n    return '';\n}\n\n/**\n * @param Shift                  $shift\n * @param ShiftType              $shifttype\n * @param Room                   $room\n * @param AngelType[]|Collection $angeltypes_source\n * @param ShiftSignupState       $shift_signup_state\n * @return string\n */\nfunction Shift_view(Shift $shift, ShiftType $shifttype, Room $room, $angeltypes_source, ShiftSignupState $shift_signup_state)\n{\n    $shift_admin = auth()->can('admin_shifts');\n    $user_shift_admin = auth()->can('user_shifts_admin');\n    $admin_rooms = auth()->can('admin_rooms');\n    $admin_shifttypes = auth()->can('shifttypes');\n\n    $parsedown = new Parsedown();\n\n    $angeltypes = [];\n    foreach ($angeltypes_source as $angeltype) {\n        $angeltypes[$angeltype->id] = $angeltype;\n    }\n\n    $needed_angels = '';\n    $neededAngels = new Collection($shift->neededAngels);\n    foreach ($neededAngels as $needed_angeltype) {\n        $needed_angels .= Shift_view_render_needed_angeltype($needed_angeltype, $angeltypes, $shift, $user_shift_admin);\n    }\n\n    $shiftEntry = $shift->shiftEntries;\n    foreach ($shiftEntry->groupBy('angel_type_id') as $angelTypes) {\n        /** @var Collection $angelTypes */\n        $type = $angelTypes->first()['angel_type_id'];\n        if (!$neededAngels->where('angel_type_id', $type)->first()) {\n            $needed_angels .= Shift_view_render_needed_angeltype([\n                'angel_type_id' => $type,\n                'count'         => 0,\n                'restricted'    => true,\n                'taken'         => $angelTypes->count(),\n            ], $angeltypes, $shift, $user_shift_admin);\n        }\n    }\n\n    $content = [msg()];\n\n    if ($shift_signup_state->getState() === ShiftSignupStatus::COLLIDES) {\n        $content[] = info(__('This shift collides with one of your shifts.'), true);\n    }\n\n    if ($shift_signup_state->getState() === ShiftSignupStatus::SIGNED_UP) {\n        $content[] = info(__('You are signed up for this shift.'), true);\n    }\n\n    if (config('signup_advance_hours') && $shift->start->timestamp > time() + config('signup_advance_hours') * 3600) {\n        $content[] = info(sprintf(\n            __('This shift is in the far future and becomes available for signup at %s.'),\n            date(__('Y-m-d H:i'), $shift->start->timestamp - config('signup_advance_hours') * 3600)\n        ), true);\n    }\n\n    $buttons = [];\n    if ($shift_admin || $admin_shifttypes || $admin_rooms) {\n        $buttons = [\n            $shift_admin ? button(shift_edit_link($shift), icon('pencil') . __('edit')) : '',\n            $shift_admin ? button(shift_delete_link($shift), icon('trash') . __('delete')) : '',\n            $admin_shifttypes ? button(shifttype_link($shifttype), $shifttype->name) : '',\n            $admin_rooms ? button(room_link($room), icon('pin-map-fill') . $room->name) : '',\n        ];\n    }\n    $buttons[] = button(user_link(auth()->user()->id), '<span class=\"icon-icon_angel\"></span> ' . __('My shifts'));\n    $content[] = buttons($buttons);\n\n    $content[] = Shift_view_header($shift, $room);\n    $content[] = div('row', [\n        div('col-sm-6', [\n            '<h2>' . __('Needed angels') . '</h2>',\n            '<div class=\"list-group\">' . $needed_angels . '</div>',\n        ]),\n        div('col-sm-6', [\n            '<h2>' . __('Description') . '</h2>',\n            $parsedown->parse($shifttype->description),\n            $parsedown->parse($shift->description),\n        ]),\n    ]);\n\n    if ($shift_admin) {\n        $content[] = Shift_editor_info_render($shift);\n    }\n\n    $start = $shift->start->format(__('Y-m-d H:i'));\n\n    return page_with_title(\n        $shift->shiftType->name . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        $content\n    );\n}\n\n/**\n * @param array                  $needed_angeltype\n * @param AngelType[]|Collection $angeltypes\n * @param Shift                  $shift\n * @param bool                   $user_shift_admin\n * @return string\n */\nfunction Shift_view_render_needed_angeltype($needed_angeltype, $angeltypes, Shift $shift, $user_shift_admin)\n{\n    $angeltype = $angeltypes[$needed_angeltype['angel_type_id']];\n    $angeltype_supporter = auth()->user()->isAngelTypeSupporter($angeltype)\n        || auth()->can('admin_user_angeltypes');\n\n    $needed_angels = '';\n\n    $class = 'progress-bar-warning';\n    if ($needed_angeltype['taken'] == 0) {\n        $class = 'progress-bar-danger';\n    }\n    if ($needed_angeltype['taken'] >= $needed_angeltype['count']) {\n        $class = 'progress-bar-success';\n    }\n    $needed_angels .= '<div class=\"list-group-item\">';\n\n    $needed_angels .= '<div class=\"float-end m-3\">' . Shift_signup_button_render($shift, $angeltype) . '</div>';\n\n    $needed_angels .= '<h3>' . AngelType_name_render($angeltype) . '</h3>';\n    $bar_max = max($needed_angeltype['count'] * 10, $needed_angeltype['taken'] * 10, 10);\n    $bar_value = max($bar_max / 10, $needed_angeltype['taken'] * 10);\n    $needed_angels .= progress_bar(\n        0,\n        $bar_max,\n        $bar_value,\n        $class,\n        $needed_angeltype['taken'] . ' / ' . $needed_angeltype['count']\n    );\n\n    $angels = [];\n    foreach ($shift->shiftEntries as $shift_entry) {\n        if ($shift_entry->angel_type_id == $needed_angeltype['angel_type_id']) {\n            $angels[] = Shift_view_render_shift_entry($shift_entry, $user_shift_admin, $angeltype_supporter, $shift);\n        }\n    }\n\n    $needed_angels .= join(', ', $angels);\n    $needed_angels .= '</div>';\n\n    return $needed_angels;\n}\n\n/**\n * @param ShiftEntry $shift_entry\n * @param bool  $user_shift_admin\n * @param bool  $angeltype_supporter\n * @param Shift $shift\n * @return string\n */\nfunction Shift_view_render_shift_entry(ShiftEntry $shift_entry, $user_shift_admin, $angeltype_supporter, Shift $shift)\n{\n    $entry = User_Nick_render($shift_entry->user);\n    if ($shift_entry->freeloaded) {\n        $entry = '<del>' . $entry . '</del>';\n    }\n    $isUser = $shift_entry->user_id == auth()->user()->id;\n    if ($user_shift_admin || $angeltype_supporter || $isUser) {\n        $entry .= ' <div class=\"btn-group m-1\">';\n        if ($user_shift_admin || $isUser) {\n            $entry .= button_icon(\n                page_link_to('user_myshifts', ['edit' => $shift_entry->id, 'id' => $shift_entry->user_id]),\n                'pencil',\n                'btn-sm'\n            );\n        }\n        $angeltype = $shift_entry->angelType;\n        $disabled = Shift_signout_allowed($shift, $angeltype, $shift_entry->user_id) ? '' : ' btn-disabled';\n        $entry .= button_icon(shift_entry_delete_link($shift_entry), 'trash', 'btn-sm' . $disabled);\n        $entry .= '</div>';\n    }\n    return $entry;\n}\n\n/**\n * Calc shift length in format 12:23h.\n *\n * @param Shift $shift\n * @return string\n */\nfunction shift_length(Shift $shift)\n{\n    $length = floor(($shift->end->timestamp - $shift->start->timestamp) / (60 * 60)) . ':';\n    $length .= str_pad(\n        (($shift->end->timestamp - $shift->start->timestamp) % (60 * 60)) / 60,\n        2,\n        '0',\n        STR_PAD_LEFT\n    );\n    $length .= 'h';\n    return $length;\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\UserAngelType;\n\n/**\n * @param UserAngelType $user_angeltype\n * @param User          $user\n * @param AngelType     $angeltype\n * @param bool          $supporter\n * @return string\n */\nfunction UserAngelType_update_view(UserAngelType $user_angeltype, User $user, AngelType $angeltype, bool $supporter)\n{\n    return page_with_title($supporter ? __('Add supporter rights') : __('Remove supporter rights'), [\n        msg(),\n        info(sprintf(\n            $supporter\n                ? __('Do you really want to add supporter rights for %s to %s?')\n                : __('Do you really want to remove supporter rights for %s from %s?'),\n            $angeltype->name,\n            $user->displayName\n        ), true),\n        form([\n            buttons([\n                button(\n                    page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n                    icon('x-lg') . __('cancel')\n                ),\n                form_submit('submit', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', [\n            'action'            => 'update',\n            'user_angeltype_id' => $user_angeltype->id,\n            'supporter'         => ($supporter ? '1' : '0'),\n        ])),\n    ]);\n}\n\n/**\n * @param AngelType $angeltype\n * @return string\n */\nfunction UserAngelTypes_delete_all_view(AngelType $angeltype)\n{\n    return page_with_title(__('Deny all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to deny all users for %s?'), $angeltype->name), true),\n        form([\n            buttons([\n                button(\n                    page_link_to(\n                        'angeltypes',\n                        ['action' => 'view', 'angeltype_id' => $angeltype->id]\n                    ),\n                    icon('x-lg') . __('cancel')\n                ),\n                form_submit('deny_all', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype->id])),\n    ]);\n}\n\n/**\n * @param AngelType $angeltype\n * @return string\n */\nfunction UserAngelTypes_confirm_all_view(AngelType $angeltype)\n{\n    return page_with_title(__('Confirm all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to confirm all users for %s?'), $angeltype->name), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('confirm_all', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype->id])),\n    ]);\n}\n\n/**\n * @param UserAngelType $user_angeltype\n * @param User          $user\n * @param AngelType     $angeltype\n * @return string\n */\nfunction UserAngelType_confirm_view(UserAngelType $user_angeltype, User $user, AngelType $angeltype)\n{\n    return page_with_title(__('Confirm angeltype for user'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to confirm %s for %s?'),\n            $user->displayName,\n            $angeltype->name\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('confirm_user', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'confirm', 'user_angeltype_id' => $user_angeltype->id])),\n    ]);\n}\n\n/**\n * @param UserAngelType $user_angeltype\n * @param User          $user\n * @param AngelType     $angeltype\n * @return string\n */\nfunction UserAngelType_delete_view(UserAngelType $user_angeltype, User $user, AngelType $angeltype)\n{\n    return page_with_title(__('Remove angeltype'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to delete %s from %s?'),\n            $user->displayName,\n            $angeltype->name\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype->id])),\n    ], true);\n}\n\n/**\n * @param AngelType $angeltype\n * @param User[]    $users_source\n * @param int       $user_id\n * @return string\n */\nfunction UserAngelType_add_view(AngelType $angeltype, $users_source, $user_id)\n{\n    $users = [];\n    foreach ($users_source as $user_source) {\n        $users[$user_source->id] = User_Nick_render($user_source);\n    }\n\n    return page_with_title(__('Add user to angeltype'), [\n        msg(),\n        buttons([\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n                __('back'),\n                'back'\n            ),\n        ]),\n        form([\n            form_info(__('Angeltype'), $angeltype->name),\n            form_checkbox('auto_confirm_user', __('Confirm user'), true),\n            form_select('user_id', __('User'), $users, $user_id),\n            form_submit('submit', __('Add')),\n        ]),\n    ]);\n}\n\n/**\n * @param User      $user\n * @param AngelType $angeltype\n * @return string\n */\nfunction UserAngelType_join_view($user, AngelType $angeltype)\n{\n    return page_with_title(sprintf(__('Become a %s'), $angeltype->name), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to add %s to %s?'),\n            $user->displayName,\n            $angeltype->name\n        ), true),\n        form([\n            auth()->can('admin_user_angeltypes') ? form_checkbox('auto_confirm_user', __('Confirm user'), true) : '',\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('submit', icon('check-lg') . __('save'), 'btn-primary', false),\n            ]),\n        ], page_link_to(\n            'user_angeltypes',\n            ['action' => 'add', 'angeltype_id' => $angeltype->id, 'user_id' => $user->id]\n        )),\n    ]);\n}\n", "<?php\n\nnamespace Engelsystem;\n\nclass UserHintsRenderer\n{\n    /** @var string[] */\n    private $hints = [];\n\n    private $important = false;\n\n    /**\n     * Add a hint to the list, if its not null and a not empty string.\n     *\n     * @param string  $hint      The hint\n     * @param boolean $important Is the hint important?\n     */\n    public function addHint($hint, $important = false)\n    {\n        if (!empty($hint)) {\n            if ($important) {\n                $this->important = true;\n                $this->hints[] = error($hint, true);\n            } else {\n                $this->hints[] = info($hint, true);\n            }\n        }\n    }\n\n    /**\n     * Render the added hints to a popover for the toolbar.\n     *\n     * @return string\n     */\n    public function render()\n    {\n        if (count($this->hints) > 0) {\n            $class_hint = $this->important ? 'danger' : 'info';\n            $icon = $this->important ? 'exclamation-triangle' : 'info-circle';\n            $data_bs_attributes = [\n                'toggle'       => 'popover',\n                'container'    => 'body',\n                'placement'    => 'bottom',\n                'custom-class' => 'popover--userhints',\n                'html'         => 'true',\n                'content'      => htmlspecialchars(join('', $this->hints)),\n            ];\n            $attr = '';\n            foreach ($data_bs_attributes as $attr_key => $attr_value) {\n                $attr .= ' data-bs-' . $attr_key . '=\"' . $attr_value . '\"';\n            }\n\n            return '<li class=\"nav-item nav-item--userhints d-flex align-items-center bg-' . $class_hint . '\">'\n                . '<a class=\"nav-link dropdown-toggle text-light\" href=\"#\" role=\"button\"' . $attr . '>'\n                . icon($icon)\n                . '</a>'\n                . '</li>';\n        }\n\n        return '';\n    }\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Config\\GoodieType;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\Worklog;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Str;\n\n/**\n * Gui for deleting user with password field.\n *\n * @param User $user\n * @return string\n */\nfunction User_delete_view($user)\n{\n    return page_with_title(sprintf(__('Delete %s'), User_Nick_render($user)), [\n        msg(),\n        buttons([\n            button(user_edit_link($user->id), icon('chevron-left') . __('back')),\n        ]),\n        error(\n            __('Do you really want to delete the user including all his shifts and every other piece of his data?'),\n            true\n        ),\n        form([\n            form_password('password', __('Your password'), 'current-password'),\n            form_submit('submit', __('Delete')),\n        ]),\n    ]);\n}\n\n/**\n * View for editing the number of given vouchers\n *\n * @param User $user\n * @return string\n */\nfunction User_edit_vouchers_view($user)\n{\n    return page_with_title(sprintf(__('%s\\'s vouchers'), User_Nick_render($user)), [\n        msg(),\n        buttons([\n            button(user_link($user->id), icon('chevron-left') . __('back')),\n        ]),\n        info(sprintf(\n            $user->state->force_active\n                ? __('Angel can receive another %d vouchers and is FA.')\n                : __('Angel can receive another %d vouchers.'),\n            User_get_eligable_voucher_count($user)\n        ), true),\n        form(\n            [\n                form_spinner('vouchers', __('Number of vouchers given out'), $user->state->got_voucher),\n                form_submit('submit', __('Save')),\n            ],\n            page_link_to('users', ['action' => 'edit_vouchers', 'user_id' => $user->id])\n        ),\n    ]);\n}\n\n/**\n * @param User[] $users\n * @param string $order_by\n * @param int    $arrived_count\n * @param int    $active_count\n * @param int    $force_active_count\n * @param int    $freeloads_count\n * @param int    $tshirts_count\n * @param int    $voucher_count\n * @return string\n */\nfunction Users_view(\n    $users,\n    $order_by,\n    $arrived_count,\n    $active_count,\n    $force_active_count,\n    $freeloads_count,\n    $tshirts_count,\n    $voucher_count\n) {\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $usersList = [];\n    foreach ($users as $user) {\n        $u = [];\n        $u['name'] = User_Nick_render($user) . User_Pronoun_render($user);\n        $u['first_name'] = $user->personalData->first_name;\n        $u['last_name'] = $user->personalData->last_name;\n        $u['dect'] = sprintf('<a href=\"tel:%s\">%1$s</a>', $user->contact->dect);\n        $u['arrived'] = icon_bool($user->state->arrived);\n        if (config('enable_voucher')) {\n            $u['got_voucher'] = $user->state->got_voucher;\n        }\n        $u['freeloads'] = $user->getAttribute('freeloads');\n        $u['active'] = icon_bool($user->state->active);\n        $u['force_active'] = icon_bool($user->state->force_active);\n        if ($goodie_enabled) {\n            $u['got_shirt'] = icon_bool($user->state->got_shirt);\n            if ($goodie_tshirt) {\n                $u['shirt_size'] = $user->personalData->shirt_size;\n            }\n        }\n        $u['arrival_date'] = $user->personalData->planned_arrival_date\n            ? $user->personalData->planned_arrival_date->format(__('Y-m-d')) : '';\n        $u['departure_date'] = $user->personalData->planned_departure_date\n            ? $user->personalData->planned_departure_date->format(__('Y-m-d')) : '';\n        $u['last_login_at'] = $user->last_login_at ? $user->last_login_at->format(__('m/d/Y h:i a')) : '';\n        $u['actions'] = table_buttons([\n            button_icon(page_link_to('admin_user', ['id' => $user->id]), 'pencil', 'btn-sm'),\n        ]);\n        $usersList[] = $u;\n    }\n    $usersList[] = [\n        'name'         => '<strong>' . __('Sum') . '</strong>',\n        'arrived'      => $arrived_count,\n        'got_voucher'  => $voucher_count,\n        'active'       => $active_count,\n        'force_active' => $force_active_count,\n        'freeloads'    => $freeloads_count,\n        'got_shirt'    => $tshirts_count,\n        'actions'      => '<strong>' . count($usersList) . '</strong>',\n    ];\n\n    $user_table_headers = [];\n\n    if (!config('display_full_name')) {\n        $user_table_headers['name'] = Users_table_header_link('name', __('Nick'), $order_by);\n    }\n    if (config('enable_user_name')) {\n        $user_table_headers['first_name'] = Users_table_header_link('first_name', __('Prename'), $order_by);\n        $user_table_headers['last_name'] = Users_table_header_link('last_name', __('Name'), $order_by);\n    }\n    if (config('enable_dect')) {\n        $user_table_headers['dect'] = Users_table_header_link('dect', __('DECT'), $order_by);\n    }\n    $user_table_headers['arrived'] = Users_table_header_link('arrived', __('Arrived'), $order_by);\n    if (config('enable_voucher')) {\n        $user_table_headers['got_voucher'] = Users_table_header_link('got_voucher', __('Voucher'), $order_by);\n    }\n    $user_table_headers['freeloads'] = Users_table_header_link('freeloads', __('Freeloads'), $order_by);\n    $user_table_headers['active'] = Users_table_header_link('active', __('Active'), $order_by);\n    $user_table_headers['force_active'] = Users_table_header_link('force_active', __('Forced'), $order_by);\n    if ($goodie_enabled) {\n        if ($goodie_tshirt) {\n            $user_table_headers['got_shirt'] = Users_table_header_link('got_shirt', __('T-Shirt'), $order_by);\n            $user_table_headers['shirt_size'] = Users_table_header_link('shirt_size', __('Size'), $order_by);\n        } else {\n            $user_table_headers['got_shirt'] = Users_table_header_link('got_shirt', __('Goodie'), $order_by);\n        }\n    }\n    $user_table_headers['arrival_date'] = Users_table_header_link(\n        'planned_arrival_date',\n        __('Planned arrival'),\n        $order_by\n    );\n    $user_table_headers['departure_date'] = Users_table_header_link(\n        'planned_departure_date',\n        __('Planned departure'),\n        $order_by\n    );\n    $user_table_headers['last_login_at'] = Users_table_header_link('last_login_at', __('Last login'), $order_by);\n    $user_table_headers['actions'] = '';\n\n    foreach (config('disabled_user_view_columns') ?? [] as $key) {\n        unset($user_table_headers[$key]);\n    }\n\n    return page_with_title(__('All users'), [\n        msg(),\n        buttons([\n            button(page_link_to('register'), icon('plus-lg') . __('New user')),\n        ]),\n        table($user_table_headers, $usersList),\n    ]);\n}\n\n/**\n * @param string $column\n * @param string $label\n * @param string $order_by\n * @return string\n */\nfunction Users_table_header_link($column, $label, $order_by)\n{\n    return '<a href=\"'\n        . page_link_to('users', ['OrderBy' => $column])\n        . '\">'\n        . $label . ($order_by == $column ? ' <span class=\"caret\"></span>' : '')\n        . '</a>';\n}\n\n/**\n * @param User $user\n * @return string|false\n */\nfunction User_shift_state_render($user)\n{\n    if (!$user->state->arrived) {\n        return '';\n    }\n\n    $upcoming_shifts = ShiftEntries_upcoming_for_user($user);\n    if ($upcoming_shifts->isEmpty()) {\n        return '<span class=\"text-success\">' . __('Free') . '</span>';\n    }\n\n    /** @var ShiftEntry $nextShiftEntry */\n    $nextShiftEntry = $upcoming_shifts->first();\n\n    $start = $nextShiftEntry->shift->start;\n    $end = $nextShiftEntry->shift->end;\n    $startFormat = $start->format(__('Y-m-d H:i'));\n    $endFormat = $end->format(__('Y-m-d H:i'));\n    $startTimestamp = $start->timestamp;\n    $endTimestamp = $end->timestamp;\n\n    if ($startTimestamp > time()) {\n        if ($startTimestamp - time() > 3600) {\n            return '<span class=\"text-success\" title=\"' . $startFormat . '\" data-countdown-ts=\"' . $startTimestamp . '\">'\n                . __('Next shift %c')\n                . '</span>';\n        }\n        return '<span class=\"text-warning\" title=\"' . $startFormat . '\" data-countdown-ts=\"' . $startTimestamp . '\">'\n            . __('Next shift %c')\n            . '</span>';\n    }\n\n    $halfway = ($startTimestamp + $endTimestamp) / 2;\n    if (time() < $halfway) {\n        return '<span class=\"text-danger\" title=\"' . $startFormat . '\" data-countdown-ts=\"' . $startTimestamp . '\">'\n            . __('Shift started %c')\n            . '</span>';\n    }\n\n    return '<span class=\"text-danger\" title=\"' . $endFormat . '\" data-countdown-ts=\"' . $endTimestamp . '\">'\n        . __('Shift ends %c')\n        . '</span>';\n}\n\nfunction User_last_shift_render($user)\n{\n    if (!$user->state->arrived) {\n        return '';\n    }\n\n    $last_shifts = ShiftEntries_finished_by_user($user);\n    if ($last_shifts->isEmpty()) {\n        return '';\n    }\n\n    /** @var ShiftEntry $lastShiftEntry */\n    $lastShiftEntry = $last_shifts->first();\n    $end = $lastShiftEntry->shift->end;\n\n    return '<span title=\"' . $end->format(__('Y-m-d H:i')) . '\" data-countdown-ts=\"' . $end->timestamp . '\">'\n        . __('Shift ended %c')\n        . '</span>';\n}\n\n/**\n * @param array $needed_angel_type\n * @return string\n */\nfunction User_view_shiftentries($needed_angel_type)\n{\n    $shift_info = '<br><b><a href=\"'\n        . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $needed_angel_type['id']])\n        . '\">' . $needed_angel_type['name'] . '</a>:</b> ';\n\n    $shift_entries = [];\n    foreach ($needed_angel_type['users'] as $user_shift) {\n        $member = User_Nick_render($user_shift);\n        if ($user_shift['freeloaded']) {\n            $member = '<del>' . $member . '</del>';\n        }\n\n        $shift_entries[] = $member;\n    }\n    $shift_info .= join(', ', $shift_entries);\n\n    return $shift_info;\n}\n\n/**\n * Helper that renders a shift line for user view\n *\n * @param Shift $shift\n * @param User  $user_source\n * @param bool  $its_me\n * @return array\n */\nfunction User_view_myshift(Shift $shift, $user_source, $its_me)\n{\n    $shift_info = '<a href=\"' . shift_link($shift) . '\">' . $shift->shiftType->name . '</a>';\n    if ($shift->title) {\n        $shift_info .= '<br /><a href=\"' . shift_link($shift) . '\">' . $shift->title . '</a>';\n    }\n    foreach ($shift->needed_angeltypes as $needed_angel_type) {\n        $shift_info .= User_view_shiftentries($needed_angel_type);\n    }\n\n    $myshift = [\n        'date'       => icon('calendar-event')\n            . $shift->start->format(__('Y-m-d')) . '<br>'\n            . icon('clock-history') . $shift->start->format('H:i')\n            . ' - '\n            . $shift->end->format(__('H:i')),\n        'duration'   => sprintf('%.2f', ($shift->end->timestamp - $shift->start->timestamp) / 3600) . '&nbsp;h',\n        'room'       => Room_name_render($shift->room),\n        'shift_info' => $shift_info,\n        'comment'    => '',\n    ];\n\n    if ($its_me) {\n        $myshift['comment'] = $shift->user_comment;\n    }\n\n    if ($shift->freeloaded) {\n        $myshift['duration'] = '<p class=\"text-danger\">'\n            . sprintf('%.2f', -($shift->end->timestamp - $shift->start->timestamp) / 3600 * 2) . '&nbsp;h'\n            . '</p>';\n        if (auth()->can('user_shifts_admin')) {\n            $myshift['comment'] .= '<br />'\n                . '<p class=\"text-danger\">' . __('Freeloaded') . ': ' . $shift->freeloaded_comment . '</p>';\n        } else {\n            $myshift['comment'] .= '<br /><p class=\"text-danger\">' . __('Freeloaded') . '</p>';\n        }\n    }\n\n    $myshift['actions'] = [\n        button(shift_link($shift), icon('eye') . __('view'), 'btn-sm'),\n    ];\n    if ($its_me || auth()->can('user_shifts_admin')) {\n        $myshift['actions'][] = button(\n            page_link_to('user_myshifts', ['edit' => $shift->shift_entry_id, 'id' => $user_source->id]),\n            icon('pencil') . __('edit'),\n            'btn-sm'\n        );\n    }\n\n    if (Shift_signout_allowed($shift, (new AngelType())->forceFill(['id' => $shift->angel_type_id]), $user_source->id)) {\n        $myshift['actions'][] = button(\n            shift_entry_delete_link($shift),\n            icon('trash') . __('sign off'),\n            'btn-sm'\n        );\n    }\n    $myshift['actions'] = table_buttons($myshift['actions']);\n\n    return $myshift;\n}\n\n/**\n * Helper that prepares the shift table for user view\n *\n * @param Shift[]|Collection   $shifts\n * @param User                 $user_source\n * @param bool                 $its_me\n * @param int                  $tshirt_score\n * @param bool                 $tshirt_admin\n * @param Worklog[]|Collection $user_worklogs\n * @param bool                 $admin_user_worklog_privilege\n *\n * @return array\n */\nfunction User_view_myshifts(\n    $shifts,\n    $user_source,\n    $its_me,\n    $tshirt_score,\n    $tshirt_admin,\n    $user_worklogs,\n    $admin_user_worklog_privilege\n) {\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $myshifts_table = [];\n    $timeSum = 0;\n    foreach ($shifts as $shift) {\n        $key = $shift->start->timestamp . '-shift-' . $shift->shift_entry_id . $shift->id;\n        $myshifts_table[$key] = User_view_myshift($shift, $user_source, $its_me);\n\n        if (!$shift->freeloaded) {\n            $timeSum += ($shift->end->timestamp - $shift->start->timestamp);\n        }\n    }\n\n    foreach ($user_worklogs as $worklog) {\n        $key = $worklog->worked_at->timestamp . '-worklog-' . $worklog->id;\n        $myshifts_table[$key] = User_view_worklog($worklog, $admin_user_worklog_privilege);\n        $timeSum += $worklog->hours * 3600;\n    }\n\n    if (count($myshifts_table) > 0) {\n        ksort($myshifts_table);\n        $myshifts_table[] = [\n            'date'       => '<b>' . __('Sum:') . '</b>',\n            'duration'   => '<b>' . sprintf('%.2f', round($timeSum / 3600, 2)) . '&nbsp;h</b>',\n            'room'       => '',\n            'shift_info' => '',\n            'comment'    => '',\n            'actions'    => '',\n        ];\n        if ($goodie_enabled && ($its_me || $tshirt_admin)) {\n            $myshifts_table[] = [\n                'date'       => '<b>' . ($goodie_tshirt ? __('Your t-shirt score') : __('Your goodie score')) . '&trade;:</b>',\n                'duration'   => '<b>' . $tshirt_score . '</b>',\n                'room'       => '',\n                'shift_info' => '',\n                'comment'    => '',\n                'actions'    => '',\n            ];\n        }\n    }\n    return $myshifts_table;\n}\n\n/**\n * Renders table entry for user work log\n *\n * @param Worklog $worklog\n * @param bool    $admin_user_worklog_privilege\n * @return array\n */\nfunction User_view_worklog(Worklog $worklog, $admin_user_worklog_privilege)\n{\n    $actions = '';\n    if ($admin_user_worklog_privilege) {\n        $actions = table_buttons([\n            button(\n                url('/admin/user/' . $worklog->user->id . '/worklog/' . $worklog->id),\n                icon('pencil') . __('edit'),\n                'btn-sm'\n            ),\n            button(\n                url('/admin/user/' . $worklog->user->id . '/worklog/' . $worklog->id . '/delete'),\n                icon('trash') . __('delete'),\n                'btn-sm'\n            ),\n        ]);\n    }\n\n    return [\n        'date'       => icon('calendar-event') . date(__('Y-m-d'), $worklog->worked_at->timestamp),\n        'duration'   => sprintf('%.2f', $worklog->hours) . ' h',\n        'room'       => '',\n        'shift_info' => __('Work log entry'),\n        'comment'    => $worklog->comment . '<br>'\n            . sprintf(\n                __('Added by %s at %s'),\n                User_Nick_render($worklog->creator),\n                $worklog->created_at->format(__('Y-m-d H:i'))\n            ),\n        'actions'    => $actions,\n    ];\n}\n\n/**\n * Renders view for a single user\n *\n * @param User                 $user_source\n * @param bool                 $admin_user_privilege\n * @param bool                 $freeloader\n * @param AngelType[]          $user_angeltypes\n * @param Group[]              $user_groups\n * @param Shift[]|Collection   $shifts\n * @param bool                 $its_me\n * @param int                  $tshirt_score\n * @param bool                 $tshirt_admin\n * @param bool                 $admin_user_worklog_privilege\n * @param Worklog[]|Collection $user_worklogs\n *\n * @return string\n */\nfunction User_view(\n    $user_source,\n    $admin_user_privilege,\n    $freeloader,\n    $user_angeltypes,\n    $user_groups,\n    $shifts,\n    $its_me,\n    $tshirt_score,\n    $tshirt_admin,\n    $admin_user_worklog_privilege,\n    $user_worklogs\n) {\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $auth = auth();\n    $nightShiftsConfig = config('night_shifts');\n    $user_name = htmlspecialchars(\n        $user_source->personalData->first_name\n    ) . ' ' . htmlspecialchars($user_source->personalData->last_name);\n    $myshifts_table = '';\n    if ($its_me || $admin_user_privilege || $tshirt_admin) {\n        $my_shifts = User_view_myshifts(\n            $shifts,\n            $user_source,\n            $its_me,\n            $tshirt_score,\n            $tshirt_admin,\n            $user_worklogs,\n            $admin_user_worklog_privilege\n        );\n        if (count($my_shifts) > 0) {\n            $myshifts_table = div('table-responsive', table([\n                'date'       => __('Day &amp; time'),\n                'duration'   => __('Duration'),\n                'room'       => __('Location'),\n                'shift_info' => __('Name &amp; workmates'),\n                'comment'    => __('Comment'),\n                'actions'    => __('Action'),\n            ], $my_shifts));\n        } elseif ($user_source->state->force_active) {\n            $myshifts_table = success(__('You have done enough.'), true);\n        }\n    }\n\n    $needs_drivers_license = false;\n    foreach ($user_angeltypes as $angeltype) {\n        $needs_drivers_license = $needs_drivers_license || $angeltype->requires_driver_license;\n    }\n\n    $needs_ifsg_certificate = false;\n    foreach ($user_angeltypes as $angeltype) {\n        $needs_ifsg_certificate = $needs_ifsg_certificate || $angeltype->requires_ifsg_certificate;\n    }\n\n    return page_with_title(\n        '<span class=\"icon-icon_angel\"></span> '\n        . (\n        (config('enable_pronoun') && $user_source->personalData->pronoun)\n            ? '<small>' . htmlspecialchars($user_source->personalData->pronoun) . '</small> '\n            : ''\n        )\n        . htmlspecialchars($user_source->name)\n        . (config('enable_user_name') ? ' <small>' . $user_name . '</small>' : ''),\n        [\n            msg(),\n            div('row', [\n                div('col-md-12', [\n                    table_buttons([\n                        $auth->can('user.edit.shirt') && $goodie_enabled ? button(\n                            url('/admin/user/' . $user_source->id . '/goodie'),\n                            icon('person') . ($goodie_tshirt ? __('Shirt') : __('Goodie'))\n                        ) : '',\n                        $admin_user_privilege ? button(\n                            page_link_to('admin_user', ['id' => $user_source->id]),\n                            icon('pencil') . __('edit')\n                        ) : '',\n                        $admin_user_privilege || ($its_me && $needs_drivers_license) ? button(\n                            user_driver_license_edit_link($user_source),\n                            icon('person-vcard') . __('driving license')\n                        ) : '',\n                        config('ifsg_enabled') && ($admin_user_privilege || ($its_me && $needs_ifsg_certificate)) ? button(\n                            page_link_to('settings/certificates'),\n                            icon('card-checklist') . __('ifsg.certificate')\n                        ) : '',\n                        (($admin_user_privilege || $auth->can('admin_arrive')) && !$user_source->state->arrived) ?\n                            form([\n                                form_hidden('action', 'arrived'),\n                                form_hidden('user', $user_source->id),\n                                form_submit('submit', __('arrived'), '', false),\n                            ], page_link_to('admin_arrive'), true) : '',\n                        ($admin_user_privilege || $auth->can('voucher.edit')) && config('enable_voucher') ?\n                            button(\n                                page_link_to(\n                                    'users',\n                                    ['action' => 'edit_vouchers', 'user_id' => $user_source->id]\n                                ),\n                                icon('valentine') . __('Vouchers')\n                            )\n                            : '',\n                        $admin_user_worklog_privilege ? button(\n                            url('/admin/user/' . $user_source->id . '/worklog'),\n                            icon('clock-history') . __('worklog.add')\n                        ) : '',\n                    ], 'mb-2'),\n                    $its_me ? table_buttons([\n                        button(\n                            page_link_to('settings/profile'),\n                            icon('person-fill-gear') . __('Settings')\n                        ),\n                        $auth->can('ical') ? button(\n                            page_link_to('ical', ['key' => $user_source->api_key]),\n                            icon('calendar-week') . __('iCal Export')\n                        ) : '',\n                        $auth->can('shifts_json_export') ? button(\n                            page_link_to('shifts_json_export', ['key' => $user_source->api_key]),\n                            icon('braces') . __('JSON Export')\n                        ) : '',\n                        (\n                            $auth->can('shifts_json_export')\n                            || $auth->can('ical')\n                            || $auth->can('atom')\n                        ) ? button(\n                            page_link_to('user_myshifts', ['reset' => 1]),\n                            icon('arrow-repeat') . __('Reset API key')\n                        ) : '',\n                    ], 'mb-2') : '',\n                ]),\n            ]),\n            div('row user-info', [\n                div('col-md-2', [\n                    config('enable_dect') && $user_source->contact->dect ?\n                        heading(\n                            icon('phone')\n                            . ' <a href=\"tel:' . $user_source->contact->dect . '\">'\n                            . $user_source->contact->dect\n                            . '</a>'\n                        )\n                        : '',\n                    config('enable_mobile_show') && $user_source->contact->mobile ?\n                        $user_source->settings->mobile_show ?\n                            heading(\n                                icon('phone')\n                                . ' <a href=\"tel:' . $user_source->contact->mobile . '\">'\n                                . $user_source->contact->mobile\n                                . '</a>'\n                            )\n                            : ''\n                        : '',\n                    $auth->can('user_messages') ?\n                        heading(\n                            '<a href=\"' . page_link_to('/messages/' . $user_source->id) . '\">'\n                            . icon('envelope')\n                            . '</a>'\n                        )\n                        : '',\n                ]),\n                User_view_state($admin_user_privilege, $freeloader, $user_source),\n                User_angeltypes_render($user_angeltypes),\n                User_groups_render($user_groups),\n                $admin_user_privilege ? User_oauth_render($user_source) : '',\n            ]),\n            ($its_me || $admin_user_privilege) ? '<h2>' . __('Shifts') . '</h2>' : '',\n            $myshifts_table,\n            ($its_me && $nightShiftsConfig['enabled'] && $goodie_enabled) ? info(\n                icon('info-circle') . sprintf(\n                    __('Your night shifts between %d and %d am count twice.'),\n                    $nightShiftsConfig['start'],\n                    $nightShiftsConfig['end']\n                ),\n                true\n            ) : '',\n            $its_me && count($shifts) == 0\n                ? error(sprintf(\n                    __('Go to the <a href=\"%s\">shifts table</a> to sign yourself up for some shifts.'),\n                    page_link_to('user_shifts')\n                ), true)\n                : '',\n            $its_me ? ical_hint() : '',\n        ]\n    );\n}\n\n/**\n * Render the state section of user view\n *\n * @param bool $admin_user_privilege\n * @param bool $freeloader\n * @param User $user_source\n * @return string\n */\nfunction User_view_state($admin_user_privilege, $freeloader, $user_source)\n{\n    if ($admin_user_privilege) {\n        $state = User_view_state_admin($freeloader, $user_source);\n    } else {\n        $state = User_view_state_user($user_source);\n    }\n\n    return div('col-md-2', [\n        heading(__('User state'), 4),\n        join('<br>', $state),\n    ]);\n}\n\n/**\n * Render the state section of user view for users.\n *\n * @param User $user_source\n * @return array\n */\nfunction User_view_state_user($user_source)\n{\n    $state = [\n        User_shift_state_render($user_source),\n    ];\n\n    if ($user_source->state->arrived) {\n        $state[] = '<span class=\"text-success\">' . icon('house') . __('Arrived') . '</span>';\n    } else {\n        $state[] = '<span class=\"text-danger\">' . __('Not arrived') . '</span>';\n    }\n\n    return $state;\n}\n\n\n/**\n * Render the state section of user view for admins.\n *\n * @param bool $freeloader\n * @param User $user_source\n * @return array\n */\nfunction User_view_state_admin($freeloader, $user_source)\n{\n    $state = [];\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n\n    if ($freeloader) {\n        $state[] = '<span class=\"text-danger\">' . icon('exclamation-circle') . __('Freeloader') . '</span>';\n    }\n\n    $state[] = User_shift_state_render($user_source);\n\n    if ($user_source->state->arrived) {\n        $state[] = '<span class=\"text-success\">' . icon('house')\n            . sprintf(\n                __('Arrived at %s'),\n                $user_source->state->arrival_date ? $user_source->state->arrival_date->format(__('Y-m-d')) : ''\n            )\n            . '</span>';\n\n        if ($user_source->state->force_active) {\n            $state[] = '<span class=\"text-success\">' . __('Active (forced)') . '</span>';\n        } elseif ($user_source->state->active) {\n            $state[] = '<span class=\"text-success\">' . __('Active') . '</span>';\n        }\n        if ($user_source->state->got_shirt && $goodie_enabled) {\n            $state[] = '<span class=\"text-success\">' . ($goodie_tshirt ? __('T-Shirt') : __('Goodie')) . '</span>';\n        }\n    } else {\n        $arrivalDate = $user_source->personalData->planned_arrival_date;\n        $state[] = '<span class=\"text-danger\">'\n            . ($arrivalDate ? sprintf(\n                __('Not arrived (Planned: %s)'),\n                $arrivalDate->format(__('Y-m-d'))\n            ) : __('Not arrived'))\n            . '</span>';\n    }\n\n    if (config('enable_voucher')) {\n        $voucherCount = $user_source->state->got_voucher;\n        $availableCount = $voucherCount + User_get_eligable_voucher_count($user_source);\n        $availableCount = max($voucherCount, $availableCount);\n        if ($user_source->state->got_voucher > 0) {\n            $state[] = '<span class=\"text-success\">'\n                . icon('valentine')\n                . __('Got %s of %s vouchers', [$voucherCount, $availableCount])\n                . '</span>';\n        } else {\n            $state[] = '<span class=\"text-danger\">'\n                . __('Got no vouchers')\n                . ($availableCount ? ' (' . __('out of %s', [$availableCount]) . ')' : '')\n                . '</span>';\n        }\n    }\n\n    return $state;\n}\n\n/**\n * @param AngelType[] $user_angeltypes\n * @return string\n */\nfunction User_angeltypes_render($user_angeltypes)\n{\n    $output = [];\n    foreach ($user_angeltypes as $angeltype) {\n        $class = 'text-success';\n        if ($angeltype->restricted && !$angeltype->pivot->confirm_user_id) {\n            $class = 'text-warning';\n        }\n        $output[] = '<a href=\"' . angeltype_link($angeltype->id) . '\" class=\"' . $class . '\">'\n            . ($angeltype->pivot->supporter ? icon('patch-check') : '') . $angeltype->name\n            . '</a>';\n    }\n    return div('col-md-2', [\n        heading(__('Angeltypes'), 4),\n        join('<br>', $output),\n    ]);\n}\n\n/**\n * @param Group[] $user_groups\n * @return string\n */\nfunction User_groups_render($user_groups)\n{\n    $output = [];\n    foreach ($user_groups as $group) {\n        $output[] = __($group->name);\n    }\n\n    return div('col-md-2', [\n        '<h4>' . __('Rights') . '</h4>',\n        join('<br>', $output),\n    ]);\n}\n\n/**\n * @param User $user\n * @return string\n */\nfunction User_oauth_render(User $user)\n{\n    $config = config('oauth');\n\n    $output = [];\n    foreach ($user->oauth as $oauth) {\n        $output[] = __(\n            isset($config[$oauth->provider]['name'])\n                ? $config[$oauth->provider]['name']\n                : Str::ucfirst($oauth->provider)\n        );\n    }\n\n    if (!$output) {\n        return '';\n    }\n\n    return div('col-md-2', [\n        heading(__('OAuth'), 4),\n        join('<br>', $output),\n    ]);\n}\n\n/**\n * Render a user nickname.\n *\n * @param array|User $user\n * @param bool       $plain\n * @return string\n */\nfunction User_Nick_render($user, $plain = false)\n{\n    if (is_array($user)) {\n        $user = (new User())->forceFill($user);\n    }\n\n    if ($plain) {\n        return sprintf('%s (%u)', $user->displayName, $user->id);\n    }\n\n    return render_profile_link(\n        '<span class=\"icon-icon_angel\"></span> ' . htmlspecialchars($user->displayName) . '</a>',\n        $user->id,\n        ($user->state->arrived ? '' : 'text-muted')\n    );\n}\n\n/**\n * Format the user pronoun\n *\n * @param User $user\n * @return string\n */\nfunction User_Pronoun_render(User $user): string\n{\n    if (!config('enable_pronoun') || !$user->personalData->pronoun) {\n        return '';\n    }\n\n    return ' (' . htmlspecialchars($user->personalData->pronoun) . ')';\n}\n\n/**\n * @param string $text\n * @param int    $user_id\n * @param string $class\n * @return string\n */\nfunction render_profile_link($text, $user_id = null, $class = '')\n{\n    $profile_link = page_link_to('settings/profile');\n    if (!is_null($user_id)) {\n        $profile_link = page_link_to('users', ['action' => 'view', 'user_id' => $user_id]);\n    }\n\n    return sprintf(\n        '<a class=\"%s\" href=\"%s\">%s</a>',\n        $class,\n        $profile_link,\n        $text\n    );\n}\n\n/**\n * @return string|null\n */\nfunction render_user_departure_date_hint()\n{\n    if (config('enable_planned_arrival') && !auth()->user()->personalData->planned_departure_date) {\n        $text = __('Please enter your planned date of departure on your settings page to give us a feeling for teardown capacities.');\n        return render_profile_link($text, null, 'text-danger');\n    }\n\n    return null;\n}\n\n/**\n * @return string|null\n */\nfunction render_user_freeloader_hint()\n{\n    if (auth()->user()->isFreeloader()) {\n        return sprintf(\n            __('You freeloaded at least %s shifts. Shift signup is locked. Please go to heavens desk to be unlocked again.'),\n            config('max_freeloadable_shifts')\n        );\n    }\n\n    return null;\n}\n\n/**\n * Hinweis f\u00fcr Engel, die noch nicht angekommen sind\n *\n * @return string|null\n */\nfunction render_user_arrived_hint()\n{\n    if (config('signup_requires_arrival') && !auth()->user()->state->arrived) {\n        /** @var Carbon $buildup */\n        $buildup = config('buildup_start');\n        if (!empty($buildup) && $buildup->lessThan(new Carbon())) {\n            return __('You are not marked as arrived. Please go to heaven\\'s desk, get your angel badge and/or tell them that you arrived already.');\n        }\n    }\n\n    return null;\n}\n\n/**\n * @return string|null\n */\nfunction render_user_tshirt_hint()\n{\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    if ($goodie_tshirt && !auth()->user()->personalData->shirt_size) {\n        $text = __('You need to specify a tshirt size in your settings!');\n        return render_profile_link($text);\n    }\n\n    return null;\n}\n\n/**\n * @return string|null\n */\nfunction render_user_dect_hint()\n{\n    $user = auth()->user();\n    if ($user->state->arrived && config('enable_dect') && !$user->contact->dect) {\n        $text = __('You need to specify a DECT phone number in your settings! If you don\\'t have a DECT phone, just enter \\'-\\'.');\n        return render_profile_link($text);\n    }\n\n    return null;\n}\n", "{% extends \"emails/mail.twig\" %}\n\n{% set url=url('/angeltypes', {'action': 'view', 'angeltype_id': angeltype.id}) %}\n\n{% block introduction %}\n{{ __('notification.angeltype.added.introduction', [angeltype.name, url])|raw }}\n{% endblock %}\n\n{% block message %}\n{{ __('notification.angeltype.added.text', [angeltype.name, url])|raw }}\n{% endblock %}\n", "{% extends \"emails/mail.twig\" %}\n\n{% set url=url('/angeltypes', {'action': 'view', 'angeltype_id': angeltype.id}) %}\n\n{% block introduction %}\n{{ __('notification.angeltype.confirmed.introduction', [angeltype.name, url])|raw }}\n{% endblock %}\n\n{% block message %}\n{{ __('notification.angeltype.confirmed.text', [angeltype.name, url])|raw }}\n{% endblock %}\n", "{% extends \"layouts/app.twig\" %}\n{% import 'macros/base.twig' as m %}\n\n{% block title %}{{ __('login.login') }}{% endblock %}\n\n{% block content %}\n    <div class=\"col-md-12\">\n        <div class=\"row mb-3 mt-5\">\n            <div class=\"col-sm-12 text-center\" id=\"welcome-title\">\n                <h2>{{ __('Welcome to the %s!', [config('name') ~ m.angel() ~ (config('app_name')|upper) ])|raw }}</h2>\n            </div>\n        </div>\n\n        <div class=\"row mb-3\">\n            {% for name,date in {\n                (__('Buildup starts')): config('buildup_start'),\n                (__('Event starts')): config('event_start'),\n                (__('Event ends')): config('event_end'),\n                (__('Teardown ends')): config('teardown_end')\n            } | filter(date => date) %}\n                {% if date > date() %}\n                    <div class=\"col-sm-3 text-center d-none d-sm-block\">\n                        <h4>{{ name }}</h4>\n                        <div class=\"h2 text-body\" title=\"{{ date.format(__('Y-m-d H:i')) }}\" data-countdown-ts=\"{{ date.getTimestamp() }}\">%c</div>\n                        <small>{{ date.format(__('Y-m-d')) }}</small>\n                    </div>\n                {% endif %}\n            {% endfor %}\n        </div>\n\n        <div class=\"row mb-5\">\n            <div class=\"col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n                <div class=\"card {{ m.type_bg_class() }}\">\n                    <div class=\"card-body\">\n                        {% include 'layouts/parts/messages.twig' %}\n\n                        {% if session_get('show_welcome', false) %}\n                            {{ m.alert(config('welcome_msg') | md, null, true) }}\n                        {% endif %}\n\n                        <form action=\"\" enctype=\"multipart/form-data\" method=\"post\">\n                            {{ csrf() }}\n                            <div class=\"mb-3\">\n                                <div class=\"input-group input-group-lg\">\n                                    <span class=\"input-group-text {{ m.type_text_class() }}\">\n                                        {{ m.angel }}\n                                    </span>\n                                    <input\n                                        class=\"form-control\"\n                                        id=\"form_nick\"\n                                        type=\"text\"\n                                        name=\"login\"\n                                        value=\"\"\n                                        placeholder=\"{{ __('Nick') }}\"\n                                        autofocus>\n                                </div>\n                            </div>\n\n                            <div class=\"mb-3\">\n                                <div class=\"input-group input-group-lg\">\n                                    <span class=\"input-group-text {{ m.type_text_class() }}\">\n                                        <i class=\"bi bi-key\"></i>\n                                    </span>\n                                    <input\n                                        class=\"form-control\" id=\"form_password\" type=\"password\"\n                                        name=\"password\" value=\"\" placeholder=\"{{ __('Password') }}\" autocomplete=\"current-password\"\n                                    >\n                                </div>\n                            </div>\n\n                            <div class=\"mb-3 text-center\">\n                                <button class=\"btn btn-primary btn-lg btn-block\" type=\"submit\" name=\"submit\">\n                                    {{ __('login.login') }}\n                                </button>\n                            </div>\n\n                            {%  if config('oauth') is not empty %}\n                                <div class=\"row\">\n                                    <div class=\"mb-3 btn-group\">\n                                        {% for name,config in config('oauth') %}\n                                            <a href=\"{{ url('oauth/' ~ name) }}\" class=\"btn btn-primary btn-lg{% if config.hidden|default(false) %} d-none{% endif %}\">\n                                                {{ __(\n                                                    'oauth.login-using-provider',\n                                                    [__(config.name|default(name|capitalize))]\n                                                ) }}\n                                            </a>\n                                        {% endfor %}\n                                    </div>\n                                </div>\n                            {% endif %}\n\n                            <div class=\"text-center\">\n                                <a href=\"{{ url('/password/reset') }}\" class=\"\">\n                                    {{ __('I forgot my password') }}\n                                </a>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mb-5\">\n            <div class=\"col-sm-6 text-center\">\n                <h2>{{ __('Register') }}</h2>\n                {% if has_permission_to('register') and config('registration_enabled') %}\n                    {% if config('enable_password') %}\n                        <p>{{ __('Please sign up, if you want to help us!') }}</p>\n                        <a href=\"{{ url('register') }}\" class=\"btn btn-primary\">{{ __('Register') }} &raquo;</a>\n                    {% else %}\n                        <p>{{ __('Registration is only available via external login.') }}</p>\n                    {% endif %}\n                {% else %}\n                    {{ m.alert(__('Registration is disabled.'), 'danger') }}\n                {% endif %}\n            </div>\n\n            <div class=\"col-sm-6 text-center\">\n                <h2>{{ __('What can I do?') }}</h2>\n                <p>{{ __('Please read about the jobs you can do to help us.') }}</p>\n                <a href=\"{{ url('/angeltypes/about') }}\" class=\"btn btn-primary\">\n                    {{ __('angeltypes.about') }} &raquo;\n                </a>\n            </div>\n\n            <div class=\"col-md-12 text-center\">\n                {{ m.icon('info-circle') }} {{ __('Please note: You have to activate cookies!') }}\n            </div>\n        </div>\n    </div>\n{% endblock %}\n"], "fixing_code": ["<?php\n\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftsFilter;\nuse Engelsystem\\ShiftsFilterRenderer;\nuse Engelsystem\\ValidationResult;\nuse Illuminate\\Database\\Query\\JoinClause;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Text for Angeltype related links.\n *\n * @return string\n */\nfunction angeltypes_title()\n{\n    return __('Angeltypes');\n}\n\n/**\n * Route angeltype actions.\n *\n * @return array\n */\nfunction angeltypes_controller()\n{\n    $action = strip_request_item('action', 'list');\n\n    return match ($action) {\n        'view'   => angeltype_controller(),\n        'edit'   => angeltype_edit_controller(),\n        'delete' => angeltype_delete_controller(),\n        'list'   => angeltypes_list_controller(),\n        default  => angeltypes_list_controller(),\n    };\n}\n\n/**\n * Path to angeltype view.\n *\n * @param int   $angeltype_id AngelType id\n * @param array $params       additional params\n * @return string\n */\nfunction angeltype_link($angeltype_id, $params = [])\n{\n    $params = array_merge(['action' => 'view', 'angeltype_id' => $angeltype_id], $params);\n    return page_link_to('angeltypes', $params);\n}\n\n/**\n * Delete an Angeltype.\n *\n * @return array\n */\nfunction angeltype_delete_controller()\n{\n    if (!auth()->can('admin_angel_types')) {\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType::findOrFail(request()->input('angeltype_id'));\n\n    if (request()->hasPostData('delete')) {\n        $angeltype->delete();\n        engelsystem_log('Deleted angeltype: ' . AngelType_name_render($angeltype, true));\n        success(sprintf(__('Angeltype %s deleted.'), $angeltype->name));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    return [\n        sprintf(__('Delete angeltype %s'), htmlspecialchars($angeltype->name)),\n        AngelType_delete_view($angeltype),\n    ];\n}\n\n/**\n * Change an Angeltype.\n *\n * @return array\n */\nfunction angeltype_edit_controller()\n{\n    // In supporter mode only allow to modify description\n    $supporter_mode = !auth()->can('admin_angel_types');\n    $request = request();\n\n    if ($request->has('angeltype_id')) {\n        // Edit existing angeltype\n        $angeltype = AngelType::findOrFail($request->input('angeltype_id'));\n\n        if (!auth()->user()?->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n            throw_redirect(page_link_to('angeltypes'));\n        }\n    } else {\n        // New angeltype\n        if ($supporter_mode) {\n            // Supporters aren't allowed to create new angeltypes.\n            throw_redirect(page_link_to('angeltypes'));\n        }\n        $angeltype = new AngelType();\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (!$supporter_mode) {\n            if ($request->has('name')) {\n                $result = AngelType_validate_name($request->postData('name'), $angeltype);\n                $angeltype->name = $result->getValue();\n                if (!$result->isValid()) {\n                    $valid = false;\n                    error(__('Please check the name. Maybe it already exists.'));\n                }\n            }\n\n            $angeltype->restricted = $request->has('restricted');\n            $angeltype->no_self_signup = $request->has('no_self_signup');\n            $angeltype->show_on_dashboard = $request->has('show_on_dashboard');\n            $angeltype->hide_register = $request->has('hide_register');\n\n            $angeltype->requires_driver_license = $request->has('requires_driver_license');\n            $angeltype->requires_ifsg_certificate = $request->has('requires_ifsg_certificate');\n        }\n\n        $angeltype->description = strip_request_item_nl('description', $angeltype->description);\n\n        $angeltype->contact_name = strip_request_item('contact_name', $angeltype->contact_name);\n        $angeltype->contact_dect = strip_request_item('contact_dect', $angeltype->contact_dect) ?: '';\n        $angeltype->contact_email = strip_request_item('contact_email', $angeltype->contact_email);\n\n        if ($valid) {\n            $angeltype->save();\n\n            success('Angel type saved.');\n            engelsystem_log(\n                'Saved angeltype: ' . $angeltype->name . ($angeltype->restricted ? ', restricted' : '')\n                . ($angeltype->no_self_signup ? ', no_self_signup' : '')\n                . ($angeltype->requires_driver_license ? ', requires driver license' : '') . ', '\n                . ($angeltype->requires_ifsg_certificate ? ', requires ifsg certificate' : '') . ', '\n                . $angeltype->contact_name . ', '\n                . $angeltype->contact_dect . ', '\n                . $angeltype->contact_email . ', '\n                . $angeltype->show_on_dashboard . ', '\n                . $angeltype->hide_register\n            );\n            throw_redirect(angeltype_link($angeltype->id));\n        }\n    }\n\n    return [\n        sprintf(__('Edit %s'), htmlspecialchars((string) $angeltype->name)),\n        AngelType_edit_view($angeltype, $supporter_mode),\n    ];\n}\n\n/**\n * View details of a given angeltype.\n *\n * @return array\n */\nfunction angeltype_controller()\n{\n    $user = auth()->user();\n\n    if (!auth()->can('angeltypes')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    $angeltype = AngelType::findOrFail(request()->input('angeltype_id'));\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::whereUserId($user->id)->where('angel_type_id', $angeltype->id)->first();\n    $members = $angeltype->userAngelTypes->sortBy('name', SORT_NATURAL | SORT_FLAG_CASE);\n    $days = angeltype_controller_shiftsFilterDays($angeltype);\n    $shiftsFilter = angeltype_controller_shiftsFilter($angeltype, $days);\n    if (request()->input('showFilledShifts')) {\n        $shiftsFilter->setFilled([ShiftsFilter::FILLED_FREE, ShiftsFilter::FILLED_FILLED]);\n    }\n\n    $shiftsFilterRenderer = new ShiftsFilterRenderer($shiftsFilter);\n    $shiftsFilterRenderer->enableDaySelection($days);\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n    $request = request();\n    $tab = 0;\n\n    if ($request->has('shifts_filter_day') || $request->has('showShiftsTab')) {\n        $tab = 1;\n    }\n\n    $isSupporter = !is_null($user_angeltype) && $user_angeltype->supporter;\n    return [\n        sprintf(__('Team %s'), htmlspecialchars($angeltype->name)),\n        AngelType_view(\n            $angeltype,\n            $members,\n            $user_angeltype,\n            auth()->can('admin_user_angeltypes') || $isSupporter,\n            auth()->can('admin_angel_types'),\n            $isSupporter,\n            $user->license,\n            $user,\n            $shiftsFilterRenderer,\n            $shiftCalendarRenderer,\n            $tab\n        ),\n    ];\n}\n\n/**\n * On which days do shifts for this angeltype occur? Needed for shiftCalendar.\n *\n * @param AngelType $angeltype\n * @return array\n */\nfunction angeltype_controller_shiftsFilterDays(AngelType $angeltype)\n{\n    $all_shifts = Shifts_by_angeltype($angeltype);\n    $days = [];\n    foreach ($all_shifts as $shift) {\n        $day = Carbon::make($shift['start'])->format('Y-m-d');\n        $dayFormatted = Carbon::make($shift['start'])->format(__('Y-m-d'));\n        if (!isset($days[$day])) {\n            $days[$day] = $dayFormatted;\n        }\n    }\n    ksort($days);\n    return $days;\n}\n\n/**\n * Sets up the shift filter for the angeltype.\n *\n * @param AngelType $angeltype\n * @param array     $days\n * @return ShiftsFilter\n */\nfunction angeltype_controller_shiftsFilter(AngelType $angeltype, $days)\n{\n    $request = request();\n    $roomIds = Room::query()\n        ->select('id')\n        ->pluck('id')\n        ->toArray();\n    $shiftsFilter = new ShiftsFilter(\n        auth()->can('user_shifts_admin'),\n        $roomIds,\n        [$angeltype->id]\n    );\n    $selected_day = date('Y-m-d');\n    if (!empty($days) && !isset($days[$selected_day])) {\n        $selected_day = array_key_first($days);\n    }\n    if ($request->input('shifts_filter_day')) {\n        $selected_day = $request->input('shifts_filter_day');\n    }\n    $shiftsFilter->setStartTime(parse_date('Y-m-d H:i', $selected_day . ' 00:00'));\n    $shiftsFilter->setEndTime(parse_date('Y-m-d H:i', $selected_day . ' 23:59'));\n\n    return $shiftsFilter;\n}\n\n/**\n * View a list of all angeltypes.\n *\n * @return array\n */\nfunction angeltypes_list_controller()\n{\n    $user = auth()->user();\n\n    if (!auth()->can('angeltypes')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    $angeltypes = AngelTypes_with_user($user->id);\n    foreach ($angeltypes as $angeltype) {\n        $actions = [\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n                icon('eye') . __('view'),\n                'btn-sm'\n            ),\n        ];\n\n        if (auth()->can('admin_angel_types')) {\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype->id]),\n                icon('pencil') . __('edit'),\n                'btn-sm'\n            );\n            $actions[] = button(\n                page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype->id]),\n                icon('trash') . __('delete'),\n                'btn-sm'\n            );\n        }\n\n        $angeltype->membership = AngelType_render_membership($angeltype);\n        if (!empty($angeltype->user_angel_type_id)) {\n            $actions[] = button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'delete', 'user_angeltype_id' => $angeltype->user_angel_type_id]\n                ),\n                icon('box-arrow-right') . __('leave'),\n                'btn-sm'\n            );\n        } else {\n            $actions[] = button(\n                page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype->id]),\n                icon('box-arrow-in-right') . __('join'),\n                'btn-sm'\n            );\n        }\n\n        $angeltype->is_restricted = $angeltype->restricted ? icon('mortarboard-fill') : '';\n        $angeltype->no_self_signup_allowed = $angeltype->no_self_signup ? '' : icon('pencil-square');\n\n        $angeltype->name = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id])\n            . '\">'\n            . htmlspecialchars($angeltype->name)\n            . '</a>';\n\n        $angeltype->actions = table_buttons($actions);\n    }\n\n    return [\n        angeltypes_title(),\n        AngelTypes_list_view($angeltypes, auth()->can('admin_angel_types')),\n    ];\n}\n\n/**\n * Validates a name for angeltypes.\n * Returns ValidationResult containing validation success and validated name.\n *\n * @param string    $name Wanted name for the angeltype\n * @param AngelType $angeltype The angeltype the name is for\n *\n * @return ValidationResult result and validated name\n */\nfunction AngelType_validate_name($name, AngelType $angeltype)\n{\n    $name = strip_item($name);\n    if ($name == '') {\n        return new ValidationResult(false, '');\n    }\n    if ($angeltype->id) {\n        $valid = AngelType::whereName($name)\n                ->where('id', '!=', $angeltype->id)\n                ->count() == 0;\n        return new ValidationResult($valid, $name);\n    }\n\n    $valid = AngelType::whereName($name)->count() == 0;\n    return new ValidationResult($valid, $name);\n}\n\n/**\n * Returns all angeltypes and subscription state to each of them for given user.\n *\n * @param int $userId\n * @return Collection|AngelType[]\n */\nfunction AngelTypes_with_user($userId): Collection\n{\n    return AngelType::query()\n        ->select([\n            'angel_types.*',\n            'user_angel_type.id AS user_angel_type_id',\n            'user_angel_type.confirm_user_id',\n            'user_angel_type.supporter',\n        ])\n        ->leftJoin('user_angel_type', function (JoinClause $join) use ($userId) {\n            $join->on('angel_types.id', 'user_angel_type.angel_type_id');\n            $join->where('user_angel_type.user_id', $userId);\n        })\n        ->get();\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\ShiftsFilter;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n * Room controllers for managing everything room related.\n */\n\n/**\n * View a room with its shifts.\n *\n * @return array\n */\nfunction room_controller(): array\n{\n    if (!auth()->can('view_rooms')) {\n        throw_redirect(page_link_to());\n    }\n\n    $request = request();\n    $room = load_room();\n\n    $all_shifts = $room->shifts->sortBy('start');\n    $days = [];\n    foreach ($all_shifts as $shift) {\n        $day = $shift->start->format('Y-m-d');\n        if (!isset($days[$day])) {\n            $days[$day] = $shift->start->format(__('Y-m-d'));\n        }\n    }\n\n    $shiftsFilter = new ShiftsFilter(\n        true,\n        [$room->id],\n        AngelType::query()->get('id')->pluck('id')->toArray()\n    );\n    $selected_day = date('Y-m-d');\n    if (!empty($days) && !isset($days[$selected_day])) {\n        $selected_day = array_key_first($days);\n    }\n    if ($request->input('shifts_filter_day')) {\n        $selected_day = $request->input('shifts_filter_day');\n    }\n    $shiftsFilter->setStartTime(parse_date('Y-m-d H:i', $selected_day . ' 00:00'));\n    $shiftsFilter->setEndTime(parse_date('Y-m-d H:i', $selected_day . ' 23:59'));\n\n    $shiftsFilterRenderer = new ShiftsFilterRenderer($shiftsFilter);\n    $shiftsFilterRenderer->enableDaySelection($days);\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n\n    return [\n        htmlspecialchars($room->name),\n        Room_view($room, $shiftsFilterRenderer, $shiftCalendarRenderer),\n    ];\n}\n\n/**\n * Dispatch different room actions.\n *\n * @return array\n */\nfunction rooms_controller(): array\n{\n    $request = request();\n    $action = $request->input('action');\n    if (!$request->has('action')) {\n        $action = 'list';\n    }\n\n    return match ($action) {\n        'view'  => room_controller(),\n        'list'  => throw_redirect(page_link_to('admin/rooms')),\n        default => throw_redirect(page_link_to('admin/rooms')),\n    };\n}\n\n/**\n * @param Room $room\n * @return string\n */\nfunction room_link(Room $room)\n{\n    return page_link_to('rooms', ['action' => 'view', 'room_id' => $room->id]);\n}\n\n/**\n * Loads room by request param room_id\n *\n * @return Room\n */\nfunction load_room()\n{\n    if (!test_request_int('room_id')) {\n        throw_redirect(page_link_to());\n    }\n\n    $room = Room::find(request()->input('room_id'));\n    if (!$room) {\n        throw_redirect(page_link_to());\n    }\n\n    return $room;\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Shifts\\NeededAngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\ScheduleShift;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Engelsystem\\Models\\Shifts\\ShiftSignupStatus;\nuse Engelsystem\\ShiftSignupState;\n\n/**\n * @param array|Shift $shift\n * @return string\n */\nfunction shift_link($shift)\n{\n    $parameters = ['action' => 'view'];\n    if (isset($shift['shift_id']) || isset($shift['id'])) {\n        $parameters['shift_id'] = $shift['shift_id'] ?? $shift['id'];\n    }\n\n    return page_link_to('shifts', $parameters);\n}\n\n/**\n * @param Shift $shift\n * @return string\n */\nfunction shift_delete_link(Shift $shift)\n{\n    return page_link_to('user_shifts', ['delete_shift' => $shift->id]);\n}\n\n/**\n * @param Shift $shift\n * @return string\n */\nfunction shift_edit_link(Shift $shift)\n{\n    return page_link_to('user_shifts', ['edit_shift' => $shift->id]);\n}\n\n/**\n * Edit a single shift.\n *\n * @return string\n */\nfunction shift_edit_controller()\n{\n    $valid = true;\n    $request = request();\n\n    if (!auth()->can('admin_shifts')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    if (!$request->has('edit_shift') || !test_request_int('edit_shift')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('edit_shift');\n\n    $shift = Shift::findOrFail($shift_id);\n    if (ScheduleShift::whereShiftId($shift->id)->first()) {\n        warning(__(\n            'This shift was imported from a schedule so some changes will be overwritten with the next import.'\n        ));\n    }\n\n    $rooms = [];\n    foreach (Room::orderBy('name')->get() as $room) {\n        $rooms[$room->id] = $room->name;\n    }\n    $angeltypes = AngelType::all()->pluck('name', 'id')->toArray();\n    $shifttypes = ShiftType::all()->pluck('name', 'id')->toArray();\n\n    $needed_angel_types = collect(NeededAngelTypes_by_shift($shift_id))->pluck('count', 'angel_type_id')->toArray();\n    foreach (array_keys($angeltypes) as $angeltype_id) {\n        if (!isset($needed_angel_types[$angeltype_id])) {\n            $needed_angel_types[$angeltype_id] = 0;\n        }\n    }\n\n    $shifttype_id = $shift->shift_type_id;\n    $title = $shift->title;\n    $description = $shift->description;\n    $rid = $shift->room_id;\n    $start = $shift->start;\n    $end = $shift->end;\n\n    if ($request->hasPostData('submit')) {\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n        $description = strip_request_item_nl('description');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($rooms[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            error(__('Please select a room.'));\n        }\n\n        if ($request->has('shifttype_id') && isset($shifttypes[$request->input('shifttype_id')])) {\n            $shifttype_id = $request->input('shifttype_id');\n        } else {\n            $valid = false;\n            error(__('Please select a shifttype.'));\n        }\n\n        if ($request->has('start') && $tmp = DateTime::createFromFormat('Y-m-d H:i', $request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please enter a valid starting time for the shifts.'));\n        }\n\n        if ($request->has('end') && $tmp = DateTime::createFromFormat('Y-m-d H:i', $request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please enter a valid ending time for the shifts.'));\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            error(__('The ending time has to be after the starting time.'));\n        }\n\n        foreach ($needed_angel_types as $needed_angeltype_id => $count) {\n            $needed_angel_types[$needed_angeltype_id] = 0;\n\n            $queryKey = 'angeltype_count_' . $needed_angeltype_id;\n            if ($request->has($queryKey)) {\n                if (test_request_int($queryKey)) {\n                    $needed_angel_types[$needed_angeltype_id] = trim($request->input($queryKey));\n                } else {\n                    $valid = false;\n                    error(sprintf(\n                        __('Please check your input for needed angels of type %s.'),\n                        $angeltypes[$needed_angeltype_id]\n                    ));\n                }\n            }\n        }\n\n        if ($valid) {\n            $oldShift = Shift::find($shift->id);\n\n            $shift->shift_type_id = $shifttype_id;\n            $shift->title = $title;\n            $shift->description = $description;\n            $shift->room_id = $rid;\n            $shift->start = $start;\n            $shift->end = $end;\n            $shift->updatedBy()->associate(auth()->user());\n            $shift->save();\n\n            mail_shift_change($oldShift, $shift);\n\n            NeededAngelType::whereShiftId($shift_id)->delete();\n            $needed_angel_types_info = [];\n            foreach ($needed_angel_types as $type_id => $count) {\n                $angeltype = AngelType::find($type_id);\n                if (!empty($angeltype) && $count > 0) {\n                    $neededAngelType = new NeededAngelType();\n                    $neededAngelType->shift()->associate($shift);\n                    $neededAngelType->angel_type_id = $type_id;\n                    $neededAngelType->count = $count;\n                    $neededAngelType->save();\n\n                    $needed_angel_types_info[] = $angeltypes[$type_id] . ': ' . $count;\n                }\n            }\n\n            engelsystem_log(\n                'Updated shift \\'' . $shifttypes[$shifttype_id] . ', ' . $title\n                . '\\' from ' . $start->format('Y-m-d H:i')\n                . ' to ' . $end->format('Y-m-d H:i')\n                . ' with angel types ' . join(', ', $needed_angel_types_info)\n                . ' and description ' . $description\n            );\n            success(__('Shift updated.'));\n\n            throw_redirect(shift_link($shift));\n        }\n    }\n\n    $angel_types_spinner = '';\n    foreach ($angeltypes as $angeltype_id => $angeltype_name) {\n        $angel_types_spinner .= form_spinner(\n            'angeltype_count_' . $angeltype_id,\n            htmlspecialchars($angeltype_name),\n            $needed_angel_types[$angeltype_id]\n        );\n    }\n\n    return page_with_title(\n        shifts_title(),\n        [\n            msg(),\n            '<noscript>'\n            . info(__('This page is much more comfortable with javascript.'), true)\n            . '</noscript>',\n            form([\n                form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                form_text('title', __('Title'), $title),\n                form_select('rid', __('Room:'), $rooms, $rid),\n                form_text('start', __('Start:'), $start->format('Y-m-d H:i')),\n                form_text('end', __('End:'), $end->format('Y-m-d H:i')),\n                form_textarea('description', __('Additional description'), $description),\n                form_info(\n                    '',\n                    __('This description is for single shifts, otherwise please use the description in shift type.')\n                ),\n                '<h2>' . __('Needed angels') . '</h2>',\n                $angel_types_spinner,\n                form_submit('submit', __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * @return string\n */\nfunction shift_delete_controller()\n{\n    $request = request();\n\n    if (!auth()->can('user_shifts_admin')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht komplett l\u00f6schen (nur f\u00fcr admins/user mit user_shifts_admin privileg)\n    if (!$request->has('delete_shift') || !preg_match('/^\\d+$/', $request->input('delete_shift'))) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n    $shift_id = $request->input('delete_shift');\n\n    $shift = Shift($shift_id);\n    if (empty($shift)) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    // Schicht l\u00f6schen best\u00e4tigt\n    if ($request->hasPostData('delete')) {\n        foreach ($shift->shiftEntries as $entry) {\n            event('shift.entry.deleting', [\n                'user'       => $entry->user,\n                'start'      => $shift->start,\n                'end'        => $shift->end,\n                'name'       => $shift->shiftType->name,\n                'title'      => $shift->title,\n                'type'       => $entry->angelType->name,\n                'room'       => $shift->room,\n                'freeloaded' => $entry->freeloaded,\n            ]);\n        }\n\n        $shift->delete();\n\n        engelsystem_log(\n            'Deleted shift ' . $shift->title . ': ' . $shift->shiftType->name\n            . ' from ' . $shift->start->format('Y-m-d H:i')\n            . ' to ' . $shift->end->format('Y-m-d H:i')\n        );\n        success(__('Shift deleted.'));\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    return page_with_title(shifts_title(), [\n        error(sprintf(\n            __('Do you want to delete the shift %s from %s to %s?'),\n            $shift->shiftType->name,\n            $shift->start->format(__('Y-m-d H:i')),\n            $shift->end->format(__('H:i'))\n        ), true),\n        form([\n            form_hidden('delete_shift', $shift->id),\n            form_submit('delete', __('delete')),\n        ]),\n    ]);\n}\n\n/**\n * @return array\n */\nfunction shift_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!auth()->can('user_shifts')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    if (!$request->has('shift_id')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    $shift = Shift($request->input('shift_id'));\n    if (empty($shift)) {\n        error(__('Shift could not be found.'));\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    $shifttype = $shift->shiftType;\n    $room = $shift->room;\n    /** @var AngelType[] $angeltypes */\n    $angeltypes = AngelType::all();\n    $user_shifts = Shifts_by_user($user->id);\n\n    $shift_signup_state = new ShiftSignupState(ShiftSignupStatus::OCCUPIED, 0);\n    foreach ($angeltypes as $angeltype) {\n        $needed_angeltype = NeededAngeltype_by_Shift_and_Angeltype($shift, $angeltype);\n        if (empty($needed_angeltype)) {\n            continue;\n        }\n\n        $shift_entries = $shift->shiftEntries()\n            ->where('angel_type_id', $angeltype->id)\n            ->get();\n        $needed_angeltype = (new AngelType())->forceFill($needed_angeltype);\n\n        $angeltype_signup_state = Shift_signup_allowed(\n            $user,\n            $shift,\n            $angeltype,\n            null,\n            $user_shifts,\n            $needed_angeltype,\n            $shift_entries\n        );\n        $shift_signup_state->combineWith($angeltype_signup_state);\n        $angeltype->shift_signup_state = $angeltype_signup_state;\n    }\n\n    return [\n        htmlspecialchars($shift->shiftType->name),\n        Shift_view($shift, $shifttype, $room, $angeltypes, $shift_signup_state),\n    ];\n}\n\n/**\n * @return array\n */\nfunction shifts_controller()\n{\n    $request = request();\n    if (!$request->has('action')) {\n        throw_redirect(page_link_to('user_shifts'));\n    }\n\n    return match ($request->input('action')) {\n        'view' => shift_controller(),\n        'next' => shift_next_controller(), // throws redirect\n        default => throw_redirect(page_link_to('/')),\n    };\n}\n\n/**\n * Redirects the user to his next shift.\n */\nfunction shift_next_controller()\n{\n    if (!auth()->can('user_shifts')) {\n        throw_redirect(page_link_to('/'));\n    }\n\n    $upcoming_shifts = ShiftEntries_upcoming_for_user(auth()->user());\n\n    if (!$upcoming_shifts->isEmpty()) {\n        throw_redirect(shift_link($upcoming_shifts[0]->shift));\n    }\n\n    throw_redirect(page_link_to('user_shifts'));\n}\n", "<?php\n\nuse Engelsystem\\Models\\Shifts\\ShiftType;\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction shifttype_link(ShiftType $shifttype)\n{\n    return page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype->id]);\n}\n\n/**\n * Delete a shifttype.\n *\n * @return array\n */\nfunction shifttype_delete_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        throw_redirect(page_link_to('shifttypes'));\n    }\n\n    $shifttype = ShiftType::findOrFail($request->input('shifttype_id'));\n    if ($request->hasPostData('delete')) {\n        engelsystem_log('Deleted shifttype ' . $shifttype->name);\n        success(sprintf(__('Shifttype %s deleted.'), $shifttype->name));\n\n        $shifttype->delete();\n        throw_redirect(page_link_to('shifttypes'));\n    }\n\n    return [\n        sprintf(__('Delete shifttype %s'), htmlspecialchars($shifttype->name)),\n        ShiftType_delete_view($shifttype),\n    ];\n}\n\n/**\n * Edit or create shift type.\n *\n * @return array\n */\nfunction shifttype_edit_controller()\n{\n    $shifttype_id = null;\n    $name = '';\n    $description = '';\n\n    $request = request();\n\n    if ($request->has('shifttype_id')) {\n        $shifttype = ShiftType::findOrFail($request->input('shifttype_id'));\n        $shifttype_id = $shifttype->id;\n        $name = $shifttype->name;\n        $description = $shifttype->description;\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('name') && $request->input('name') != '') {\n            $name = strip_request_item('name');\n        } else {\n            $valid = false;\n            error(__('Please enter a name.'));\n        }\n\n        if ($request->has('description')) {\n            $description = strip_request_item_nl('description');\n        }\n\n        if ($valid) {\n            $shiftType = ShiftType::findOrNew($shifttype_id);\n            $shiftType->name = $name;\n            $shiftType->description = $description;\n            $shiftType->save();\n\n            if ($shifttype_id) {\n                engelsystem_log('Updated shifttype ' . $name);\n                success(__('Updated shifttype.'));\n            } else {\n                $shifttype_id = $shiftType->id;\n\n                engelsystem_log('Created shifttype ' . $name);\n                success(__('Created shifttype.'));\n            }\n\n            throw_redirect(page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype_id]));\n        }\n    }\n\n    return [\n        shifttypes_title(),\n        ShiftType_edit_view($name, $description, $shifttype_id),\n    ];\n}\n\n/**\n * @return array\n */\nfunction shifttype_controller()\n{\n    $request = request();\n    if (!$request->has('shifttype_id')) {\n        throw_redirect(page_link_to('shifttypes'));\n    }\n    $shifttype = ShiftType::findOrFail($request->input('shifttype_id'));\n\n    return [\n        htmlspecialchars($shifttype->name),\n        ShiftType_view($shifttype),\n    ];\n}\n\n/**\n * List all shift types.\n *\n * @return array\n */\nfunction shifttypes_list_controller()\n{\n    $shifttypes = ShiftType::all()->sortBy('name', SORT_NATURAL | SORT_FLAG_CASE);\n\n    return [\n        shifttypes_title(),\n        ShiftTypes_list_view($shifttypes),\n    ];\n}\n\n/**\n * Text for shift type related links.\n *\n * @return string\n */\nfunction shifttypes_title()\n{\n    return __('Shifttypes');\n}\n\n/**\n * Route shift type actions\n *\n * @return array\n */\nfunction shifttypes_controller()\n{\n    $request = request();\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    return match ($action) {\n        'view'   => shifttype_controller(),\n        'edit'   => shifttype_edit_controller(),\n        'delete' => shifttype_delete_controller(),\n        'list'   => shifttypes_list_controller(),\n        default  => shifttypes_list_controller(),\n    };\n}\n", "<?php\n\nuse Engelsystem\\Mail\\EngelsystemMailer;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\UserAngelType;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Mailer\\Exception\\TransportException;\n\n/**\n * Display a hint for team/angeltype supporters if there are unconfirmed users for his angeltype.\n *\n * @return string|null\n */\nfunction user_angeltypes_unconfirmed_hint()\n{\n    $restrictedSupportedAngelTypes = auth()\n        ->user()\n        ->userAngelTypes()\n        ->wherePivot('supporter', true)\n        ->where('restricted', true)\n        ->get();\n\n    /** @var Collection|UserAngelType[] $unconfirmed_user_angeltypes */\n    $unconfirmed_user_angeltypes = UserAngelType::query()\n        ->with('AngelType')\n        ->select(['user_angel_type.*', UserAngelType::query()->raw('count(angel_type_id) as users_count')])\n        ->whereIn('angel_type_id', $restrictedSupportedAngelTypes->pluck('id')->toArray())\n        ->whereNull('confirm_user_id')\n        ->groupBy('angel_type_id')\n        ->get();\n\n    if (!$unconfirmed_user_angeltypes->count()) {\n        return null;\n    }\n\n    $unconfirmed_links = [];\n    foreach ($unconfirmed_user_angeltypes as $user_angeltype) {\n        $unconfirmed_links[] = '<a href=\"'\n            . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $user_angeltype->angel_type_id])\n            . '\">' . htmlspecialchars($user_angeltype->angelType->name)\n            . ' (+' . $user_angeltype->count . ')'\n            . '</a>';\n    }\n\n    $count = $unconfirmed_user_angeltypes->count();\n    return\n        _e(\n            'There is %d unconfirmed angeltype.',\n            'There are %d unconfirmed angeltypes.',\n            $count,\n            [$count]\n        )\n        . ' ' . __('Angel types which need approvals:')\n        . ' ' . join(', ', $unconfirmed_links);\n}\n\n/**\n * Remove all unconfirmed users from a specific angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_delete_all_controller(): array\n{\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType::findOrFail($request->input('angeltype_id'));\n    if (!auth()->user()->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n        error(__('You are not allowed to delete all users for this angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('deny_all')) {\n        UserAngelType::whereAngelTypeId($angeltype->id)\n            ->whereNull('confirm_user_id')\n            ->delete();\n\n        engelsystem_log(sprintf('Denied all users for angeltype %s', AngelType_name_render($angeltype, true)));\n        success(sprintf(__('Denied all users for angeltype %s.'), $angeltype->name));\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Deny all users'),\n        UserAngelTypes_delete_all_view($angeltype),\n    ];\n}\n\n/**\n * Confirm all unconfirmed users for an angeltype.\n *\n * @return array\n */\nfunction user_angeltypes_confirm_all_controller(): array\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('angeltype_id')) {\n        error(__('Angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $angeltype = AngelType::findOrFail($request->input('angeltype_id'));\n    if (!auth()->can('admin_user_angeltypes') && !$user->isAngelTypeSupporter($angeltype)) {\n        error(__('You are not allowed to confirm all users for this angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('confirm_all')) {\n        /** @var Collection|User[] $users */\n        $users = $angeltype->userAngelTypes()->wherePivot('confirm_user_id', '=', null)->get();\n        UserAngelType::whereAngelTypeId($angeltype->id)\n            ->whereNull('confirm_user_id')\n            ->update(['confirm_user_id' => $user->id]);\n\n        engelsystem_log(sprintf('Confirmed all users for angeltype %s', AngelType_name_render($angeltype, true)));\n        success(sprintf(__('Confirmed all users for angeltype %s.'), $angeltype->name));\n\n        foreach ($users as $user) {\n            user_angeltype_confirm_email($user, $angeltype);\n        }\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Confirm all users'),\n        UserAngelTypes_confirm_all_view($angeltype),\n    ];\n}\n\n/**\n * Confirm a user for an angeltype.\n *\n * @return array\n */\nfunction user_angeltype_confirm_controller(): array\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::findOrFail($request->input('user_angeltype_id'));\n    $angeltype = $user_angeltype->angelType;\n    if (!$user->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n        error(__('You are not allowed to confirm this users angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $user_source = $user_angeltype->user;\n    if ($request->hasPostData('confirm_user')) {\n        $user_angeltype->confirmUser()->associate($user);\n        $user_angeltype->save();\n\n        engelsystem_log(sprintf(\n            '%s confirmed for angeltype %s',\n            User_Nick_render($user_source, true),\n            AngelType_name_render($angeltype, true)\n        ));\n        success(sprintf(__('%s confirmed for angeltype %s.'), $user_source->displayName, $angeltype->name));\n\n        user_angeltype_confirm_email($user_source, $angeltype);\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Confirm angeltype for user'),\n        UserAngelType_confirm_view($user_angeltype, $user_source, $angeltype),\n    ];\n}\n\nfunction user_angeltype_confirm_email(User $user, AngelType $angeltype): void\n{\n    if (!$user->settings->email_shiftinfo) {\n        return;\n    }\n\n    try {\n        /** @var EngelsystemMailer $mailer */\n        $mailer = app(EngelsystemMailer::class);\n        $mailer->sendViewTranslated(\n            $user,\n            'notification.angeltype.confirmed',\n            'emails/angeltype-confirmed',\n            ['name' => $angeltype->name, 'angeltype' => $angeltype, 'username' => $user->displayName]\n        );\n    } catch (TransportException $e) {\n        /** @var LoggerInterface $logger */\n        $logger = app('logger');\n        $logger->error(\n            'Unable to send email \"{title}\" to user {user} with {exception}',\n            ['title' => __('notification.angeltype.confirmed'), 'user' => $user->name, 'exception' => $e]\n        );\n    }\n}\n\nfunction user_angeltype_add_email(User $user, AngelType $angeltype): void\n{\n    if (!$user->settings->email_shiftinfo || $user->id == auth()->user()->id) {\n        return;\n    }\n\n    try {\n        /** @var EngelsystemMailer $mailer */\n        $mailer = app(EngelsystemMailer::class);\n        $mailer->sendViewTranslated(\n            $user,\n            'notification.angeltype.added',\n            'emails/angeltype-added',\n            ['name' => $angeltype->name, 'angeltype' => $angeltype, 'username' => $user->displayName]\n        );\n    } catch (TransportException $e) {\n        /** @var LoggerInterface $logger */\n        $logger = app('logger');\n        $logger->error(\n            'Unable to send email \"{title}\" to user {user} with {exception}',\n            ['title' => __('notification.angeltype.added'), 'user' => $user->name, 'exception' => $e]\n        );\n    }\n}\n\n/**\n * Remove a user from an Angeltype.\n *\n * @return array\n */\nfunction user_angeltype_delete_controller(): array\n{\n    $request = request();\n    $user = auth()->user();\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::findOrFail($request->input('user_angeltype_id'));\n    $angeltype = $user_angeltype->angelType;\n    $user_source = $user_angeltype->user;\n    if (\n        $user->id != $user_angeltype->user_id\n        && !$user->isAngelTypeSupporter($angeltype)\n        && !auth()->can('admin_user_angeltypes')\n    ) {\n        error(__('You are not allowed to delete this users angeltype.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->hasPostData('delete')) {\n        $user_angeltype->delete();\n\n        engelsystem_log(sprintf('User %s removed from %s.', User_Nick_render($user_source, true), $angeltype->name));\n        success(sprintf(__('User %s removed from %s.'), $user_source->displayName, $angeltype->name));\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        __('Remove angeltype'),\n        UserAngelType_delete_view($user_angeltype, $user_source, $angeltype),\n    ];\n}\n\n/**\n * Update an UserAngelType.\n *\n * @return array\n */\nfunction user_angeltype_update_controller(): array\n{\n    $supporter = false;\n    $request = request();\n\n    if (!auth()->can('admin_angel_types')) {\n        error(__('You are not allowed to set supporter rights.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if (!$request->has('user_angeltype_id')) {\n        error(__('User angeltype doesn\\'t exist.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    if ($request->has('supporter') && preg_match('/^[01]$/', $request->input('supporter'))) {\n        $supporter = $request->input('supporter') == '1';\n    } else {\n        error(__('No supporter update given.'));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::findOrFail($request->input('user_angeltype_id'));\n    $angeltype = $user_angeltype->angelType;\n    $user_source = $user_angeltype->user;\n\n    if ($request->hasPostData('submit')) {\n        $user_angeltype->supporter = $supporter;\n        $user_angeltype->save();\n\n        $msg = $supporter\n            ? __('Added supporter rights for %s to %s.')\n            : __('Removed supporter rights for %s from %s.');\n        engelsystem_log(sprintf(\n            $msg,\n            AngelType_name_render($angeltype, true),\n            User_Nick_render($user_source, true)\n        ));\n        success(sprintf($msg, $angeltype->name, $user_source->displayName));\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        $supporter ? __('Add supporter rights') : __('Remove supporter rights'),\n        UserAngelType_update_view($user_angeltype, $user_source, $angeltype, $supporter),\n    ];\n}\n\n/**\n * User joining an Angeltype (Or supporter doing this for him).\n *\n * @return array\n */\nfunction user_angeltype_add_controller(): array\n{\n    $angeltype = AngelType::findOrFail(request()->input('angeltype_id'));\n\n    // User is joining by itself\n    if (!auth()->user()->isAngelTypeSupporter($angeltype) && !auth()->can('admin_user_angeltypes')) {\n        return user_angeltype_join_controller($angeltype);\n    }\n\n    // Allow to add any user\n\n    // Default selection\n    $user_source = auth()->user();\n\n    // Load possible users, that are not in the angeltype already\n    $users_source = Users_by_angeltype_inverted($angeltype);\n\n    $request = request();\n    if ($request->hasPostData('submit')) {\n        $user_source = load_user();\n\n        if (!$angeltype->userAngelTypes()->wherePivot('user_id', $user_source->id)->exists()) {\n            $userAngelType = new UserAngelType();\n            $userAngelType->user()->associate($user_source);\n            $userAngelType->angelType()->associate($angeltype);\n            $userAngelType->save();\n\n            engelsystem_log(sprintf(\n                'User %s added to %s.',\n                User_Nick_render($user_source, true),\n                AngelType_name_render($angeltype, true)\n            ));\n            success(sprintf(__('User %s added to %s.'), $user_source->displayName, $angeltype->name));\n\n            if ($request->hasPostData('auto_confirm_user')) {\n                $userAngelType->confirmUser()->associate($user_source);\n                $userAngelType->save();\n\n                engelsystem_log(sprintf(\n                    'User %s confirmed as %s.',\n                    User_Nick_render($user_source, true),\n                    AngelType_name_render($angeltype, true)\n                ));\n            }\n\n            user_angeltype_add_email($user_source, $angeltype);\n\n            throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n        }\n    }\n\n    return [\n        __('Add user to angeltype'),\n        UserAngelType_add_view($angeltype, $users_source, $user_source->id),\n    ];\n}\n\n/**\n * A user joins an angeltype.\n *\n * @param AngelType $angeltype\n * @return array\n */\nfunction user_angeltype_join_controller(AngelType $angeltype)\n{\n    $user = auth()->user();\n\n    /** @var UserAngelType $user_angeltype */\n    $user_angeltype = UserAngelType::whereUserId($user->id)->where('angel_type_id', $angeltype->id)->first();\n    if (!empty($user_angeltype)) {\n        error(sprintf(__('You are already a %s.'), $angeltype->name));\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    $request = request();\n    if ($request->hasPostData('submit')) {\n        $userAngelType = new UserAngelType();\n        $userAngelType->user()->associate($user);\n        $userAngelType->angelType()->associate($angeltype);\n        $userAngelType->save();\n\n        engelsystem_log(sprintf(\n            'User %s joined %s.',\n            User_Nick_render($user, true),\n            AngelType_name_render($angeltype, true)\n        ));\n        success(sprintf(__('You joined %s.'), $angeltype->name));\n\n        if (auth()->can('admin_user_angeltypes') && $request->hasPostData('auto_confirm_user')) {\n            $userAngelType->confirmUser()->associate($user);\n            $userAngelType->save();\n\n            engelsystem_log(sprintf(\n                'User %s confirmed as %s.',\n                User_Nick_render($user, true),\n                AngelType_name_render($angeltype, true)\n            ));\n        }\n\n        throw_redirect(page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]));\n    }\n\n    return [\n        sprintf(__('Become a %s'), htmlspecialchars($angeltype->name)),\n        UserAngelType_join_view($user, $angeltype),\n    ];\n}\n\n/**\n * Route UserAngelType actions.\n *\n * @return array\n */\nfunction user_angeltypes_controller(): array\n{\n    $request = request();\n    if (!$request->has('action')) {\n        throw_redirect(page_link_to('angeltypes'));\n    }\n\n    return match ($request->input('action')) {\n        'delete_all'  => user_angeltypes_delete_all_controller(),\n        'confirm_all' => user_angeltypes_confirm_all_controller(),\n        'confirm'     => user_angeltype_confirm_controller(),\n        'delete'      => user_angeltype_delete_controller(),\n        'update'      => user_angeltype_update_controller(),\n        'add'         => user_angeltype_add_controller(),\n        default       => throw_redirect(page_link_to('angeltyps')),\n    };\n}\n", "<?php\n\nuse Engelsystem\\Database\\Db;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilter;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Str;\n\n/**\n * Route user actions.\n *\n * @return array\n */\nfunction users_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if (!$user) {\n        throw_redirect(page_link_to());\n    }\n\n    $action = 'list';\n    if ($request->has('action')) {\n        $action = $request->input('action');\n    }\n\n    return match ($action) {\n        'view'          => user_controller(),\n        'delete'        => user_delete_controller(),\n        'edit_vouchers' => user_edit_vouchers_controller(),\n        'list'          => users_list_controller(),\n        default         => users_list_controller(),\n    };\n}\n\n/**\n * Delete a user, requires to enter own password for reasons.\n *\n * @return array\n */\nfunction user_delete_controller()\n{\n    $user = auth()->user();\n    $auth = auth();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->query->get('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (!auth()->can('admin_user')) {\n        throw_redirect(page_link_to());\n    }\n\n    // You cannot delete yourself\n    if ($user->id == $user_source->id) {\n        error(__('You cannot delete yourself.'));\n        throw_redirect(user_link($user->id));\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if (\n            !(\n            $request->has('password')\n            && $auth->verifyPassword($user, $request->postData('password'))\n            )\n        ) {\n            $valid = false;\n            error(__('auth.password.error'));\n        }\n\n        if ($valid) {\n            // Load data before user deletion to prevent errors when displaying\n            $user_source->load(['contact', 'personalData', 'settings', 'state']);\n            $user_source->delete();\n\n            mail_user_delete($user_source);\n            success(__('User deleted.'));\n            engelsystem_log(sprintf('Deleted %s', User_Nick_render($user_source, true)));\n\n            throw_redirect(users_link());\n        }\n    }\n\n    return [\n        sprintf(__('Delete %s'), htmlspecialchars($user_source->displayName)),\n        User_delete_view($user_source),\n    ];\n}\n\n/**\n * @return string\n */\nfunction users_link()\n{\n    return page_link_to('users');\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_edit_link($userId)\n{\n    return page_link_to('admin_user', ['user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_delete_link($userId)\n{\n    return page_link_to('users', ['action' => 'delete', 'user_id' => $userId]);\n}\n\n/**\n * @param int $userId\n * @return string\n */\nfunction user_link($userId)\n{\n    return page_link_to('users', ['action' => 'view', 'user_id' => $userId]);\n}\n\n/**\n * @return array\n */\nfunction user_edit_vouchers_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n    } else {\n        $user_source = $user;\n    }\n\n    if (\n        (!auth()->can('admin_user') && !auth()->can('voucher.edit'))\n        || !config('enable_voucher')\n    ) {\n        throw_redirect(page_link_to());\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        $vouchers = '';\n        if (\n            $request->has('vouchers')\n            && test_request_int('vouchers')\n            && trim($request->input('vouchers')) >= 0\n        ) {\n            $vouchers = trim($request->input('vouchers'));\n        } else {\n            $valid = false;\n            error(__('Please enter a valid number of vouchers.'));\n        }\n\n        if ($valid) {\n            $user_source->state->got_voucher = $vouchers;\n            $user_source->state->save();\n\n            success(__('Saved the number of vouchers.'));\n            engelsystem_log(User_Nick_render($user_source, true) . ': ' . sprintf(\n                'Got %s vouchers',\n                $user_source->state->got_voucher\n            ));\n\n            throw_redirect(user_link($user_source->id));\n        }\n    }\n\n    return [\n        sprintf(__('%s\\'s vouchers'), htmlspecialchars($user_source->displayName)),\n        User_edit_vouchers_view($user_source),\n    ];\n}\n\n/**\n * @return array\n */\nfunction user_controller()\n{\n    $user = auth()->user();\n    $request = request();\n\n    $user_source = $user;\n    if ($request->has('user_id')) {\n        $user_source = User::find($request->input('user_id'));\n        if (!$user_source) {\n            error(__('User not found.'));\n            throw_redirect(page_link_to('/'));\n        }\n    }\n\n    $shifts = Shifts_by_user($user_source->id, auth()->can('user_shifts_admin'));\n    foreach ($shifts as $shift) {\n        // TODO: Move queries to model\n        $shift->needed_angeltypes = Db::select(\n            '\n            SELECT DISTINCT `angel_types`.*\n            FROM `shift_entries`\n            JOIN `angel_types` ON `shift_entries`.`angel_type_id`=`angel_types`.`id`\n            WHERE `shift_entries`.`shift_id` = ?\n            ORDER BY `angel_types`.`name`\n            ',\n            [$shift->id]\n        );\n        $neededAngeltypes = $shift->needed_angeltypes;\n        foreach ($neededAngeltypes as &$needed_angeltype) {\n            $needed_angeltype['users'] = Db::select(\n                '\n                    SELECT `shift_entries`.`freeloaded`, `users`.*\n                    FROM `shift_entries`\n                    JOIN `users` ON `shift_entries`.`user_id`=`users`.`id`\n                    WHERE `shift_entries`.`shift_id` = ?\n                    AND `shift_entries`.`angel_type_id` = ?\n                ',\n                [$shift->id, $needed_angeltype['id']]\n            );\n        }\n        $shift->needed_angeltypes = $neededAngeltypes;\n    }\n\n    if (empty($user_source->api_key)) {\n        User_reset_api_key($user_source, false);\n    }\n\n    if ($user_source->state->force_active) {\n        $tshirt_score = __('Enough');\n    } else {\n        $tshirt_score = sprintf('%.2f', User_tshirt_score($user_source->id)) . '&nbsp;h';\n    }\n\n    return [\n        htmlspecialchars($user_source->displayName),\n        User_view(\n            $user_source,\n            auth()->can('admin_user'),\n            $user_source->isFreeloader(),\n            $user_source->userAngelTypes,\n            $user_source->groups,\n            $shifts,\n            $user->id == $user_source->id,\n            $tshirt_score,\n            auth()->can('admin_active'),\n            auth()->can('admin_user_worklog'),\n            UserWorkLogsForUser($user_source->id)\n        ),\n    ];\n}\n\n/**\n * List all users.\n *\n * @return array\n */\nfunction users_list_controller()\n{\n    $request = request();\n\n    if (!auth()->can('admin_user')) {\n        throw_redirect(page_link_to());\n    }\n\n    $order_by = 'name';\n    if (\n        $request->has('OrderBy') && in_array($request->input('OrderBy'), [\n            'name',\n            'first_name',\n            'last_name',\n            'dect',\n            'arrived',\n            'got_voucher',\n            'freeloads',\n            'active',\n            'force_active',\n            'got_shirt',\n            'shirt_size',\n            'planned_arrival_date',\n            'planned_departure_date',\n            'last_login_at',\n        ])\n    ) {\n        $order_by = $request->input('OrderBy');\n    }\n\n    /** @var User[]|Collection $users */\n    $users = User::with(['contact', 'personalData', 'state'])\n        ->orderBy('name')\n        ->get();\n    foreach ($users as $user) {\n        $user->setAttribute(\n            'freeloads',\n            $user->shiftEntries()\n                ->where('freeloaded', true)\n                ->count()\n        );\n    }\n\n    $users = $users->sortBy(function (User $user) use ($order_by) {\n        $userData = $user->toArray();\n        $data = [];\n        array_walk_recursive($userData, function ($value, $key) use (&$data) {\n            $data[$key] = $value;\n        });\n\n        return isset($data[$order_by]) ? Str::lower($data[$order_by]) : null;\n    });\n\n    return [\n        __('All users'),\n        Users_view(\n            $users,\n            $order_by,\n            State::whereArrived(true)->count(),\n            State::whereActive(true)->count(),\n            State::whereForceActive(true)->count(),\n            ShiftEntry::whereFreeloaded(true)->count(),\n            State::whereGotShirt(true)->count(),\n            State::query()->sum('got_voucher')\n        ),\n    ];\n}\n\n/**\n * Loads a user from param user_id.\n *\n * @return User\n */\nfunction load_user()\n{\n    $request = request();\n    if (!$request->has('user_id')) {\n        throw_redirect(page_link_to());\n    }\n\n    $user = User::find($request->input('user_id'));\n    if (!$user) {\n        error(__('User doesn\\'t exist.'));\n        throw_redirect(page_link_to());\n    }\n\n    return $user;\n}\n\n/**\n * @param ShiftsFilter $shiftsFilter\n * @return ShiftCalendarRenderer\n */\nfunction shiftCalendarRendererByShiftFilter(ShiftsFilter $shiftsFilter)\n{\n    $shifts = Shifts_by_ShiftsFilter($shiftsFilter);\n    $needed_angeltypes_source = NeededAngeltypes_by_ShiftsFilter($shiftsFilter);\n    $shift_entries_source = ShiftEntries_by_ShiftsFilter($shiftsFilter);\n\n    $needed_angeltypes = [];\n    /** @var ShiftEntry[][] $shift_entries */\n    $shift_entries = [];\n    foreach ($shifts as $shift) {\n        $needed_angeltypes[$shift->id] = [];\n        $shift_entries[$shift->id] = [];\n    }\n\n    foreach ($shift_entries_source as $shift_entry) {\n        if (isset($shift_entries[$shift_entry->shift_id])) {\n            $shift_entries[$shift_entry->shift_id][] = $shift_entry;\n        }\n    }\n\n    foreach ($needed_angeltypes_source as $needed_angeltype) {\n        if (isset($needed_angeltypes[$needed_angeltype['shift_id']])) {\n            $needed_angeltypes[$needed_angeltype['shift_id']][] = $needed_angeltype;\n        }\n    }\n\n    unset($needed_angeltypes_source);\n    unset($shift_entries_source);\n\n    if (\n        in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled())\n        && in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n    ) {\n        return new ShiftCalendarRenderer($shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n    }\n\n    $filtered_shifts = [];\n    foreach ($shifts as $shift) {\n        $needed_angels_count = 0;\n        foreach ($needed_angeltypes[$shift->id] as $needed_angeltype) {\n            $taken = 0;\n\n            if (\n                !in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n                && !in_array($needed_angeltype['angel_type_id'], $shiftsFilter->getTypes())\n            ) {\n                continue;\n            }\n\n            foreach ($shift_entries[$shift->id] as $shift_entry) {\n                if (\n                    $needed_angeltype['angel_type_id'] == $shift_entry->angel_type_id\n                    && !$shift_entry->freeloaded\n                ) {\n                    $taken++;\n                }\n            }\n\n            $needed_angels_count += max(0, $needed_angeltype['count'] - $taken);\n        }\n\n        if (\n            in_array(ShiftsFilter::FILLED_FREE, $shiftsFilter->getFilled())\n            && $needed_angels_count > 0\n        ) {\n            $filtered_shifts[] = $shift;\n        }\n\n        if (\n            in_array(ShiftsFilter::FILLED_FILLED, $shiftsFilter->getFilled())\n            && $needed_angels_count == 0\n        ) {\n            $filtered_shifts[] = $shift;\n        }\n    }\n\n    return new ShiftCalendarRenderer($filtered_shifts, $needed_angeltypes, $shift_entries, $shiftsFilter);\n}\n", "<?php\n\n/**\n * Bootstrap application\n */\n\nuse Engelsystem\\Http\\UrlGeneratorInterface;\n\nrequire __DIR__ . '/application.php';\n\n\n/**\n * Include legacy code\n */\nrequire __DIR__ . '/includes.php';\n\n\n/**\n * Check for maintenance\n */\n/** @var \\Engelsystem\\Application $app */\nif ($app->get('config')->get('maintenance')) {\n    http_response_code(503);\n    $url = $app->get(UrlGeneratorInterface::class);\n    $maintenance = file_get_contents(__DIR__ . '/../resources/views/layouts/maintenance.html');\n    $maintenance = str_replace('%APP_NAME%', htmlspecialchars($app->get('config')->get('app_name')), $maintenance);\n    $maintenance = str_replace('%ASSETS_PATH%', $url->to(''), $maintenance);\n    echo $maintenance;\n    die();\n}\n", "<?php\n\nuse Engelsystem\\Controllers\\NotificationType;\n\n/**\n * Returns messages from session and removes them from the stack by rendering the messages twig template\n * @return string\n * @see \\Engelsystem\\Controllers\\HasUserNotifications\n */\nfunction msg()\n{\n    return view('layouts/parts/messages.twig');\n}\n\n/**\n * Renders an information message\n *\n * @param string $msg\n * @param bool   $immediately\n * @param bool   $immediatelyRaw\n * @return string\n */\nfunction info($msg, $immediately = false, $immediatelyRaw = false)\n{\n    return alert(NotificationType::INFORMATION, $msg, $immediately, $immediatelyRaw);\n}\n\n/**\n * Renders a warning message\n *\n * @param string $msg\n * @param bool   $immediately\n * @param bool   $immediatelyRaw\n * @return string\n */\nfunction warning($msg, $immediately = false, $immediatelyRaw = false)\n{\n    return alert(NotificationType::WARNING, $msg, $immediately, $immediatelyRaw);\n}\n\n/**\n * Renders an error message\n *\n * @param string $msg\n * @param bool   $immediately\n * @param bool   $immediatelyRaw\n * @return string\n */\nfunction error($msg, $immediately = false, $immediatelyRaw = false)\n{\n    return alert(NotificationType::ERROR, $msg, $immediately, $immediatelyRaw);\n}\n\n/**\n * Renders a success message\n *\n * @param string $msg\n * @param bool   $immediately\n * @param bool   $immediatelyRaw\n * @return string\n */\nfunction success($msg, $immediately = false, $immediatelyRaw = false)\n{\n    return alert(NotificationType::MESSAGE, $msg, $immediately, $immediatelyRaw);\n}\n\n/**\n * Renders an alert message with the given alert-* class or sets it in session\n *\n * @param NotificationType $type\n * @param string           $msg\n * @param bool             $immediately\n * @param bool             $immediatelyRaw\n * @return string\n *\n * @see \\Engelsystem\\Controllers\\HasUserNotifications\n *\n */\nfunction alert(NotificationType $type, $msg, $immediately = false, $immediatelyRaw = false)\n{\n    if (empty($msg)) {\n        return '';\n    }\n\n    if ($immediately) {\n        $type = str_replace(\n            [\n                NotificationType::ERROR->value,\n                NotificationType::WARNING->value,\n                NotificationType::INFORMATION->value,\n                NotificationType::MESSAGE->value,\n            ],\n            ['danger', 'warning', 'info', 'success'],\n            $type->value\n        );\n        $msg = $immediatelyRaw ? $msg : htmlspecialchars($msg);\n        return '<div class=\"alert alert-' . $type . '\" role=\"alert\">' . $msg . '</div>';\n    }\n\n    $type = 'messages.' . $type->value;\n    $session = session();\n    $messages = $session->get($type, []);\n    $messages[] = $msg;\n    $session->set($type, $messages);\n\n    return '';\n}\n", "<?php\n\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Query\\JoinClause;\n\n/**\n * @return string\n */\nfunction admin_free_title()\n{\n    return __('Free angels');\n}\n\n/**\n * @return string\n */\nfunction admin_free()\n{\n    $request = request();\n\n    $search = '';\n    if ($request->has('search')) {\n        $search = strip_request_item('search');\n    }\n\n    /** @var AngelType[]|Collection $angel_types_source */\n    $angel_types_source = AngelType::all(['id', 'name']);\n    $angel_types = [\n        '' => __('All'),\n    ];\n    foreach ($angel_types_source as $angel_type) {\n        $angel_types[$angel_type->id] = $angel_type->name;\n    }\n\n    $angelType = $request->input('angeltype', '');\n\n    /** @var User[] $users */\n    $users = [];\n    if ($request->has('submit')) {\n        $query = User::with('personalData')\n            ->select('users.*')\n            ->leftJoin('shift_entries', 'users.id', 'shift_entries.user_id')\n            ->leftJoin('users_state', 'users.id', 'users_state.user_id')\n            ->leftJoin('shifts', function ($join) {\n                /** @var JoinClause $join */\n                $join->on('shift_entries.shift_id', '=', 'shifts.id')\n                    ->where('shifts.start', '<', Carbon::now())\n                    ->where('shifts.end', '>', Carbon::now());\n            })\n            ->where('users_state.arrived', '=', 1)\n            ->whereNull('shifts.id')\n            ->orderBy('users.name')\n            ->groupBy('users.id');\n\n        if (!empty($angelType)) {\n            $query->join('user_angel_type', function ($join) use ($angelType) {\n                /** @var JoinClause $join */\n                $join->on('user_angel_type.user_id', '=', 'users.id')\n                    ->where('user_angel_type.angel_type_id', '=', $angelType);\n            });\n\n            $query->join('angel_types', function ($join) {\n                /** @var JoinClause $join */\n                $join->on('user_angel_type.angel_type_id', '=', 'angel_types.id')\n                    ->whereNotNull('user_angel_type.confirm_user_id')\n                    ->orWhere('angel_types.restricted', '=', '0');\n            });\n        }\n\n        $users = $query->get();\n    }\n\n    $free_users_table = [];\n    if ($search == '') {\n        $tokens = [];\n    } else {\n        $tokens = explode(' ', $search);\n    }\n    foreach ($users as $usr) {\n        if (count($tokens) > 0) {\n            $match = false;\n            $index = join('', $usr->attributesToArray());\n            foreach ($tokens as $token) {\n                $token = trim($token);\n                if (!empty($token) && stristr($index, $token)) {\n                    $match = true;\n                    break;\n                }\n            }\n            if (!$match) {\n                continue;\n            }\n        }\n\n        $email = $usr->contact->email ?: $usr->email;\n        $free_users_table[] = [\n            'name'        => User_Nick_render($usr) . User_Pronoun_render($usr),\n            'shift_state' => User_shift_state_render($usr),\n            'last_shift'  => User_last_shift_render($usr),\n            'dect'        => sprintf('<a href=\"tel:%s\">%1$s</a>', htmlspecialchars((string) $usr->contact->dect)),\n            'email'       => $usr->settings->email_human\n                ? sprintf('<a href=\"mailto:%s\">%1$s</a>', htmlspecialchars((string) $email))\n                : icon('eye-slash'),\n            'actions'     =>\n                auth()->can('admin_user')\n                    ? button(page_link_to('admin_user', ['id' => $usr->id]), icon('pencil') . __('edit'), 'btn-sm')\n                    : '',\n        ];\n    }\n    return page_with_title(admin_free_title(), [\n        form([\n            div('row', [\n                div('col-md-12 form-inline', [\n                    div('row', [\n                        form_text('search', __('Search'), $search, null, null, null, 'col'),\n                        form_select('angeltype', __('Angeltype'), $angel_types, $angelType, '', 'col'),\n                        form_submit('submit', __('Search')),\n                    ]),\n                ]),\n            ]),\n        ]),\n        table([\n            'name'        => __('Name'),\n            'shift_state' => __('Next shift'),\n            'last_shift'  => __('Last shift'),\n            'dect'        => __('DECT'),\n            'email'       => __('E-Mail'),\n            'actions'     => '',\n        ], $free_users_table),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\Privilege;\nuse Illuminate\\Database\\Query\\JoinClause;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @return string\n */\nfunction admin_groups_title()\n{\n    return __('Grouprights');\n}\n\n/**\n * @return string\n */\nfunction admin_groups()\n{\n    $html = '';\n    $request = request();\n    /** @var Group[]|Collection $groups */\n    $groups = Group::query()->orderBy('name')->get();\n\n    if (!$request->has('action')) {\n        $groups_table = [];\n        foreach ($groups as $group) {\n            /** @var Privilege[]|Collection $privileges */\n            $privileges = $group->privileges()->orderBy('name')->get();\n            $privileges_html = [];\n\n            foreach ($privileges as $privilege) {\n                $privileges_html[] = htmlspecialchars($privilege['name']);\n            }\n\n            $groups_table[] = [\n                'name'       => htmlspecialchars($group->name),\n                'privileges' => join(', ', $privileges_html),\n                'actions'    => button(\n                    page_link_to(\n                        'admin_groups',\n                        ['action' => 'edit', 'id' => $group->id]\n                    ),\n                    icon('pencil') . __('edit'),\n                    'btn-sm'\n                ),\n            ];\n        }\n\n        return page_with_title(admin_groups_title(), [\n            table([\n                'name'       => __('Name'),\n                'privileges' => __('Privileges'),\n                'actions'    => '',\n            ], $groups_table),\n        ]);\n    } else {\n        switch ($request->input('action')) {\n            case 'edit':\n                if ($request->has('id')) {\n                    $group_id = (int) $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                /** @var Group|null $group */\n                $group = Group::find($group_id);\n                if (!empty($group)) {\n                    $privileges = groupPrivilegesWithSelected($group);\n                    $privileges_form = [];\n                    foreach ($privileges as $privilege) {\n                        $privileges_form[] = form_checkbox(\n                            'privileges[]',\n                            htmlspecialchars($privilege->description . ' (' . $privilege->name . ')'),\n                            $privilege->selected != '',\n                            $privilege->id,\n                            'privilege-' . htmlspecialchars($privilege->name)\n                        );\n                    }\n\n                    $privileges_form[] = form_submit('submit', __('Save'));\n                    $html .= page_with_title(__('Edit group') . ' ' . htmlspecialchars($group->name), [\n                        form(\n                            $privileges_form,\n                            page_link_to('admin_groups', ['action' => 'save', 'id' => $group->id])\n                        ),\n                    ]);\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n\n            case 'save':\n                if (\n                    $request->has('id')\n                    && $request->hasPostData('submit')\n                ) {\n                    $group_id = (int) $request->input('id');\n                } else {\n                    return error('Incomplete call, missing Groups ID.', true);\n                }\n\n                /** @var Group|null $group */\n                $group = Group::find($group_id);\n                $privileges = $request->request->all('privileges');\n                if (!empty($group)) {\n                    $group->privileges()->detach();\n                    $privilege_names = [];\n                    foreach ($privileges as $privilege) {\n                        $privilege = Privilege::find($privilege);\n                        if ($privilege) {\n                            $group->privileges()->attach($privilege);\n                            $privilege_names[] = $privilege->name;\n                        }\n                    }\n                    engelsystem_log(\n                        'Group privileges of group ' . $group->name\n                        . ' edited: ' . join(', ', $privilege_names)\n                    );\n                    throw_redirect(page_link_to('admin_groups'));\n                } else {\n                    return error('No Group found.', true);\n                }\n                break;\n        }\n    }\n    return $html;\n}\n\n/**\n * @param Group $group\n * @return Collection|Privilege[]\n */\nfunction groupPrivilegesWithSelected(Group $group): Collection\n{\n    return Privilege::query()\n        ->join('group_privileges', function ($query) use ($group) {\n            /** @var JoinClause $query */\n            $query\n                ->where('privileges.id', '=', $query->raw('group_privileges.privilege_id'))\n                ->where('group_privileges.group_id', $group->id)\n            ;\n        }, null, null, 'left outer')\n        ->orderBy('name')\n        ->get([\n            'privileges.*',\n            'group_privileges.group_id as selected',\n        ]);\n}\n", "<?php\n\nuse Engelsystem\\Database\\Db;\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Http\\Exceptions\\HttpForbidden;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\NeededAngelType;\nuse Engelsystem\\Models\\Shifts\\Schedule;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Str;\n\n/**\n * @return string\n */\nfunction admin_shifts_title()\n{\n    return __('Create shifts');\n}\n\n/**\n * Assistent zum Anlegen mehrerer neuer Schichten\n *\n * @return string\n */\nfunction admin_shifts()\n{\n    $valid = true;\n    $request = request();\n    $session = session();\n    $start = Carbon::createFromDateTime(date('Y-m-d') . 'T00:00');\n    $end = $start;\n    $mode = 'multi';\n    $angelmode = 'manually';\n    $length = '';\n    $change_hours = [];\n    $title = '';\n    $shifttype_id = null;\n    $description = null;\n    // When true: creates a shift beginning at the last shift change hour and ending at the first shift change hour\n    $shift_over_midnight = true;\n\n    // Locations laden\n    $rooms = Room::orderBy('name')->get();\n    $room_array = $rooms->pluck('name', 'id')->toArray();\n\n    // Load angeltypes\n    /** @var AngelType[] $types */\n    $types = AngelType::all();\n    $needed_angel_types = [];\n    foreach ($types as $type) {\n        $needed_angel_types[$type->id] = 0;\n    }\n\n    // Load shift types\n    /** @var ShiftType[]|Collection $shifttypes_source */\n    $shifttypes_source = ShiftType::all();\n    $shifttypes = [];\n    foreach ($shifttypes_source as $shifttype) {\n        $shifttypes[$shifttype->id] = $shifttype->name;\n    }\n\n    if ($request->has('preview') || $request->has('back')) {\n        if ($request->has('shifttype_id')) {\n            $shifttype = ShiftType::find($request->input('shifttype_id'));\n            if (empty($shifttype)) {\n                $valid = false;\n                error(__('Please select a shift type.'));\n            } else {\n                $shifttype_id = $request->input('shifttype_id');\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a shift type.'));\n        }\n\n        // Name/Bezeichnung der Schicht, darf leer sein\n        $title = strip_request_item('title');\n\n        // Beschreibung der Schicht, darf leer sein\n        $description = strip_request_item_nl('description');\n\n        // Auswahl der sichtbaren Locations f\u00fcr die Schichten\n        if (\n            $request->has('rid')\n            && preg_match('/^\\d+$/', $request->input('rid'))\n            && isset($room_array[$request->input('rid')])\n        ) {\n            $rid = $request->input('rid');\n        } else {\n            $valid = false;\n            $rid = $rooms->first()->id;\n            error(__('Please select a location.'));\n        }\n\n        if ($request->has('start') && $tmp = Carbon::createFromDateTime($request->input('start'))) {\n            $start = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select a start time.'));\n        }\n\n        if ($request->has('end') && $tmp = Carbon::createFromDateTime($request->input('end'))) {\n            $end = $tmp;\n        } else {\n            $valid = false;\n            error(__('Please select an end time.'));\n        }\n\n        if ($start >= $end) {\n            $valid = false;\n            error(__('The shifts end has to be after its start.'));\n        }\n\n        if ($request->has('mode')) {\n            if ($request->input('mode') == 'single') {\n                $mode = 'single';\n            } elseif ($request->input('mode') == 'multi') {\n                if ($request->has('length') && preg_match('/^\\d+$/', trim($request->input('length')))) {\n                    $mode = 'multi';\n                    $length = trim($request->input('length'));\n                } else {\n                    $valid = false;\n                    error(__('Please enter a shift duration in minutes.'));\n                }\n            } elseif ($request->input('mode') == 'variable') {\n                if (\n                    $request->has('change_hours')\n                    && preg_match(\n                        '/^(\\d{1,2}(:\\d{2})?(,|$))+$/',\n                        trim(str_replace(' ', '', $request->input('change_hours')))\n                    )\n                ) {\n                    $mode = 'variable';\n                    $change_hours = array_map(\n                        'trim',\n                        explode(',', $request->input('change_hours'))\n                    );\n                    // Fehlende Minutenangaben erg\u00e4nzen, 24 Uhr -> 00 Uhr\n                    array_walk($change_hours, function (&$value) use ($valid) {\n                        // Add minutes\n                        if (!preg_match('/^(\\d{1,2}):\\d{2}$/', $value)) {\n                            $value .= ':00';\n                        }\n                        // Add 0 before low hours\n                        if (preg_match('/^\\d:\\d{2}$/', $value)) {\n                            $value = '0' . $value;\n                        }\n                        // Fix 24:00\n                        if ($value == '24:00') {\n                            $value = '00:00';\n                        }\n                    });\n                    // Ensure valid time in change hours\n                    foreach ($change_hours as $change_hour) {\n                        if (!preg_match('/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/', $change_hour)) {\n                            $valid = false;\n                            error(sprintf(__('Please validate the change hour %s. It should be between 00:00 and 24:00.'), $change_hour));\n                        }\n                    }\n                    $change_hours = array_unique($change_hours);\n                } else {\n                    $valid = false;\n                    error(__('Please split the shift-change hours by colons.'));\n                }\n                $shift_over_midnight = $request->has('shift_over_midnight')\n                    && $request->input('shift_over_midnight') != 'false';\n            }\n        } else {\n            $valid = false;\n            error(__('Please select a mode.'));\n        }\n\n        if ($request->has('angelmode')) {\n            if ($request->input('angelmode') == 'location') {\n                $angelmode = 'location';\n            } elseif ($request->input('angelmode') == 'manually') {\n                foreach ($types as $type) {\n                    if (preg_match('/^\\d+$/', trim($request->input('angeltype_count_' . $type->id, 0)))) {\n                        $needed_angel_types[$type->id] = trim($request->input('angeltype_count_' . $type->id, 0));\n                    } else {\n                        $valid = false;\n                        error(sprintf(__('Please check the needed angels for team %s.'), $type->name));\n                    }\n                }\n\n                if (array_sum($needed_angel_types) == 0) {\n                    $valid = false;\n                    error(__('There are 0 angels needed. Please enter the amounts of needed angels.'));\n                }\n            } else {\n                $valid = false;\n                error(__('Please select a mode for needed angels.'));\n            }\n        } else {\n            $valid = false;\n            error(__('Please select needed angels.'));\n        }\n\n        // Beim Zur\u00fcck-Knopf das Formular zeigen\n        if ($request->has('back')) {\n            $valid = false;\n        }\n\n        // Alle Eingaben in Ordnung\n        if ($valid) {\n            if ($angelmode == 'location') {\n                $needed_angel_types = NeededAngelType::whereRoomId($rid)\n                        ->pluck('count', 'angel_type_id')\n                        ->toArray() + $needed_angel_types;\n            }\n\n            $shifts = [];\n            if ($mode == 'single') {\n                $shifts[] = [\n                    'start'         => $start,\n                    'end'           => $end,\n                    'room_id'       => $rid,\n                    'title'         => $title,\n                    'shift_type_id' => $shifttype_id,\n                    'description'   => $description,\n                ];\n            } elseif ($mode == 'multi') {\n                $shift_start = $start;\n                do {\n                    $shift_end = (clone $shift_start)->addSeconds((int) $length * 60);\n\n                    if ($shift_end > $end) {\n                        $shift_end = $end;\n                    }\n                    if ($shift_start >= $shift_end) {\n                        break;\n                    }\n\n                    $shifts[] = [\n                        'start'         => $shift_start,\n                        'end'           => $shift_end,\n                        'room_id'       => $rid,\n                        'title'         => $title,\n                        'shift_type_id' => $shifttype_id,\n                        'description'   => $description,\n                    ];\n\n                    $shift_start = $shift_end;\n                } while ($shift_end < $end);\n            } elseif ($mode == 'variable') {\n                // Alle Tage durchgehen\n                $end_day = Carbon::createFromDatetime($end->format('Y-m-d') . ' 00:00');\n                $day = Carbon::createFromDatetime($start->format('Y-m-d') . ' 00:00');\n                do {\n                    // Alle Schichtwechselstunden durchgehen\n                    for ($i = 0; $i < count($change_hours); $i++) {\n                        $start_hour = $change_hours[$i];\n                        if (isset($change_hours[$i + 1])) {\n                            // Normales Intervall zwischen zwei Schichtwechselstunden\n                            $end_hour = $change_hours[$i + 1];\n                        } elseif ($shift_over_midnight && $day != $end_day) {\n                            // Letzte Schichtwechselstunde: Wenn eine 24h Abdeckung gew\u00fcnscht ist,\n                            // hier die erste Schichtwechselstunde als Ende einsetzen\n                            $end_hour = $change_hours[0];\n                        } else {\n                            // Letzte Schichtwechselstunde: Keine Schicht erstellen\n                            break;\n                        }\n\n                        $interval_start = Carbon::createFromDatetime($day->format('Y-m-d') . ' ' . $start_hour);\n                        if (str_replace(':', '', $end_hour) < str_replace(':', '', $start_hour)) {\n                            // Endstunde kleiner Startstunde? Dann sind wir im n\u00e4chsten Tag gelandet\n                            $interval_end = Carbon::createFromDatetime(date('Y-m-d', $day->timestamp + 36 * 60 * 60) . ' ' . $end_hour);\n                        } else {\n                            // Endstunde ist noch im selben Tag\n                            $interval_end = Carbon::createFromDatetime($day->format('Y-m-d', $day) . ' ' . $end_hour);\n                        }\n\n                        // Liegt das Intervall vor dem Startzeitpunkt -> \u00dcberspringen\n                        if ($interval_end <= $start) {\n                            continue;\n                        }\n\n                        // Liegt das Intervall nach dem Endzeitpunkt -> \u00dcberspringen\n                        if ($interval_start >= $end) {\n                            continue;\n                        }\n\n                        // Liegt nur der Schichtstart vor dem Startzeitpunkt -> Startzeitpunkt \u00fcbernehmen\n                        if ($interval_start < $start) {\n                            $interval_start = $start;\n                        }\n\n                        // Liegt nur das Schichtende nach dem Endzeitpunkt -> Endzeitpunkt \u00fcbernehmen\n                        if ($interval_end > $end) {\n                            $interval_end = $end;\n                        }\n\n                        // Intervall f\u00fcr Schicht hinzuf\u00fcgen\n                        $shifts[] = [\n                            'start'         => $interval_start,\n                            'end'           => $interval_end,\n                            'room_id'       => $rid,\n                            'title'         => $title,\n                            'shift_type_id' => $shifttype_id,\n                            'description'   => $description,\n                        ];\n                    }\n\n                    $day = Carbon::createFromDatetime(date('Y-m-d', $day->timestamp + 36 * 60 * 60) . ' 00:00');\n                } while ($day <= $end_day);\n\n                usort($shifts, function ($a, $b) {\n                    return $a['start'] < $b['start'] ? -1 : 1;\n                });\n            }\n\n            $shifts_table = [];\n            foreach ($shifts as $shift) {\n                /** @var Carbon $start */\n                $start = $shift['start'];\n                /** @var Carbon $end */\n                $end = $shift['end'];\n                $shifts_table_entry = [\n                    'timeslot'      =>\n                        icon('clock-history') . ' '\n                        . $start->format(__('Y-m-d H:i'))\n                        . ' - '\n                        . '<span title=\"' . $end->format(__('Y-m-d')) . '\">'\n                        . $end->format(__('H:i'))\n                        . '</span>'\n                        . ', ' . round($end->copy()->diffInMinutes($start) / 60, 2) . 'h'\n                        . '<br>'\n                        . Room_name_render(Room::find($shift['room_id'])),\n                    'title'         =>\n                        ShiftType_name_render(ShiftType::find($shifttype_id))\n                        . ($shift['title'] ? '<br />' . htmlspecialchars($shift['title']) : ''),\n                    'needed_angels' => '',\n                ];\n                foreach ($types as $type) {\n                    if (isset($needed_angel_types[$type->id]) && $needed_angel_types[$type->id] > 0) {\n                        $shifts_table_entry['needed_angels'] .= '<b>' . AngelType_name_render($type) . ':</b> '\n                            . $needed_angel_types[$type->id] . '<br />';\n                    }\n                }\n                $shifts_table[] = $shifts_table_entry;\n            }\n\n            // F\u00fcrs Anlegen zwischenspeichern:\n            $session->set('admin_shifts_shifts', $shifts);\n            $session->set('admin_shifts_types', $needed_angel_types);\n\n            $hidden_types = '';\n            foreach ($needed_angel_types as $type_id => $count) {\n                $hidden_types .= form_hidden('angeltype_count_' . $type_id, $count);\n            }\n\n            // Number of Shifts that will be created (if over 100 its danger-red)\n            $shiftsCount = count($shifts_table);\n            $shiftsCreationHint = __('Number of shifts: %s', [$shiftsCount]);\n            if ($shiftsCount >= 100) {\n                $shiftsCreationHint = '<span class=\"text-danger\">' . $shiftsCreationHint . '</span>';\n            }\n\n            return page_with_title(__('Preview'), [\n                form([\n                    $hidden_types,\n                    form_hidden('shifttype_id', $shifttype_id),\n                    form_hidden('description', $description),\n                    form_hidden('title', $title),\n                    form_hidden('rid', $rid),\n                    form_hidden('start', $request->input('start')),\n                    form_hidden('end', $request->input('end')),\n                    form_hidden('mode', $mode),\n                    form_hidden('length', $length),\n                    form_hidden('change_hours', implode(', ', $change_hours)),\n                    form_hidden('angelmode', $angelmode),\n                    form_hidden('shift_over_midnight', $shift_over_midnight ? 'true' : 'false'),\n                    form_submit('back', icon('chevron-left') . __('back')),\n                    $shiftsCreationHint,\n                    table([\n                        'timeslot'      => __('Time and location'),\n                        'title'         => __('Type and title'),\n                        'needed_angels' => __('Needed angels'),\n                    ], $shifts_table),\n                    form_submit('submit', icon('save') . __('Save')),\n                ]),\n            ]);\n        }\n    } elseif ($request->hasPostData('submit')) {\n        if (\n            !is_array($session->get('admin_shifts_shifts'))\n            || !is_array($session->get('admin_shifts_types'))\n        ) {\n            throw_redirect(page_link_to('admin_shifts'));\n        }\n\n        $transactionId = Str::uuid();\n        foreach ($session->get('admin_shifts_shifts', []) as $shift) {\n            $shift = new Shift($shift);\n            $shift->url = '';\n            $shift->transaction_id = $transactionId;\n            $shift->createdBy()->associate(auth()->user());\n            $shift->save();\n\n            engelsystem_log(\n                'Shift created: ' . $shifttypes[$shift->shift_type_id]\n                . ' with title ' . $shift->title\n                . ' with description ' . $shift->description\n                . ' from ' . $shift->start->format('Y-m-d H:i')\n                . ' to ' . $shift->end->format('Y-m-d H:i')\n                . ', transaction: ' . $transactionId\n            );\n\n            $needed_angel_types_info = [];\n            foreach ($session->get('admin_shifts_types', []) as $type_id => $count) {\n                $angel_type_source = AngelType::find($type_id);\n                if (!empty($angel_type_source) && $count > 0) {\n                    $neededAngelType = new NeededAngelType();\n                    $neededAngelType->shift()->associate($shift);\n                    $neededAngelType->angelType()->associate($angel_type_source);\n                    $neededAngelType->count = $count;\n                    $neededAngelType->save();\n\n                    $needed_angel_types_info[] = $angel_type_source->name . ': ' . $count;\n                }\n            }\n            engelsystem_log('Shift needs following angel types: ' . join(', ', $needed_angel_types_info));\n        }\n\n        success('Shifts created.');\n        throw_redirect(page_link_to('admin_shifts'));\n    } else {\n        $session->remove('admin_shifts_shifts');\n        $session->remove('admin_shifts_types');\n    }\n\n    $rid = null;\n    if ($request->has('rid')) {\n        $rid = $request->input('rid');\n    }\n    $angel_types = '';\n    foreach ($types as $type) {\n        $angel_types .= '<div class=\"col-sm-6 col-md-8 col-lg-6 col-xl-4 col-xxl-3\">'\n            . form_spinner(\n                'angeltype_count_' . $type->id,\n                htmlspecialchars($type->name),\n                $needed_angel_types[$type->id],\n                [\n                    'radio-name'  => 'angelmode',\n                    'radio-value' => 'manually',\n                ]\n            )\n            . '</div>';\n    }\n\n    return page_with_title(\n        admin_shifts_title() . ' ' . sprintf(\n            '<a href=\"%s\">%s</a>',\n            page_link_to('admin_shifts_history'),\n            icon('clock-history')\n        ),\n        [\n            msg(),\n            form([\n                div('row', [\n                    div('col-md-6 col-xl-5', [\n                        form_select('shifttype_id', __('Shifttype'), $shifttypes, $shifttype_id),\n                        form_text('title', __('Title'), $title),\n                        form_select('rid', __('Room'), $room_array, $rid),\n                    ]),\n                    div('col-md-6 col-xl-7', [\n                        form_textarea('description', __('Additional description'), $description),\n                        __('This description is for single shifts, otherwise please use the description in shift type.'),\n                    ]),\n                ]),\n                div('row', [\n                    div('col-md-6 col-xl-5', [\n                        div('row', [\n                            div('col-lg-6', [\n                                form_datetime(\n                                    'start',\n                                    __('Start'),\n                                    $request->has('start')\n                                        ? Carbon::createFromDatetime($request->input('start'))\n                                        : $start\n                                ),\n                            ]),\n                            div('col-lg-6', [\n                                form_datetime(\n                                    'end',\n                                    __('End'),\n                                    $request->has('end')\n                                        ? Carbon::createFromDatetime($request->input('end'))\n                                        : $end\n                                ),\n                            ]),\n                        ]),\n                        form_info(__('Mode')),\n                        form_radio('mode', __('Create one shift'), $mode == 'single', 'single'),\n                        form_radio('mode', __('Create multiple shifts'), $mode == 'multi', 'multi'),\n                        form_text(\n                            'length',\n                            __('Length'),\n                            $request->has('length')\n                                ? $request->input('length')\n                                : '120',\n                            false,\n                            null,\n                            null,\n                            '',\n                            [\n                                'radio-name'  => 'mode',\n                                'radio-value' => 'multi',\n                            ]\n                        ),\n                        form_radio(\n                            'mode',\n                            __('Create multiple shifts with variable length'),\n                            $mode == 'variable',\n                            'variable'\n                        ),\n                        form_text(\n                            'change_hours',\n                            __('Shift change hours'),\n                            $request->has('change_hours')\n                                ? ($change_hours ? implode(', ', $change_hours) : $request->input('change_hours'))\n                                : '00, 04, 08, 10, 12, 14, 16, 18, 20, 22',\n                            false,\n                            null,\n                            null,\n                            '',\n                            [\n                                'radio-name'  => 'mode',\n                                'radio-value' => 'variable',\n                            ]\n                        ),\n                        form_checkbox(\n                            'shift_over_midnight',\n                            __('Create a shift over midnight.'),\n                            $shift_over_midnight\n                        ),\n                    ]),\n                    div('col-md-6 col-xl-7', [\n                        form_info(__('Needed angels')),\n                        form_radio(\n                            'angelmode',\n                            __('Take needed angels from room settings'),\n                            $angelmode == 'location',\n                            'location'\n                        ),\n                        form_radio(\n                            'angelmode',\n                            __('The following angels are needed'),\n                            $angelmode == 'manually',\n                            'manually'\n                        ),\n                        div('row', [\n                            $angel_types,\n                        ]),\n                    ]),\n                ]),\n                form_submit('preview', icon('search') . __('Preview')),\n            ]),\n        ]\n    );\n}\n\nfunction admin_shifts_history_title(): string\n{\n    return __('Shifts history');\n}\n\n/**\n * Display shifts transaction history\n *\n * @return string\n */\nfunction admin_shifts_history(): string\n{\n    if (!auth()->can('admin_shifts')) {\n        throw new HttpForbidden();\n    }\n\n    $request = request();\n    $transactionId = $request->postData('transaction_id');\n    if ($request->hasPostData('delete') && $transactionId) {\n        $shifts = Shift::whereTransactionId($transactionId)->get();\n\n        engelsystem_log('Deleting ' . count($shifts) . ' shifts (transaction id ' . $transactionId . ')');\n\n        foreach ($shifts as $shift) {\n            $shift = Shift($shift);\n            foreach ($shift->shiftEntries as $entry) {\n                event('shift.entry.deleting', [\n                    'user'       => $entry->user,\n                    'start'      => $shift->start,\n                    'end'        => $shift->end,\n                    'name'       => $shift->shiftType->name,\n                    'title'      => $shift->title,\n                    'type'       => $entry->angelType->name,\n                    'room'       => $shift->room,\n                    'freeloaded' => $entry->freeloaded,\n                ]);\n            }\n\n            $shift->delete();\n\n            engelsystem_log(\n                'Deleted shift ' . $shift->title . ' / ' . $shift->shiftType->name\n                . ' from ' . $shift->start->format('Y-m-d H:i')\n                . ' to ' . $shift->end->format('Y-m-d H:i')\n            );\n        }\n\n        success(sprintf(__('%s shifts deleted.'), count($shifts)));\n        throw_redirect(page_link_to('admin_shifts_history'));\n    }\n\n    $schedules = Schedule::all()->pluck('name', 'id')->toArray();\n    $shiftsData = Db::select('\n        SELECT\n            s.transaction_id,\n            s.title,\n            schedule_shift.schedule_id,\n            COUNT(s.id) AS count,\n            MIN(s.start) AS start,\n            MAX(s.end) AS end,\n            s.created_by AS user_id,\n            MAX(s.created_at) AS created_at\n        FROM shifts AS s\n        LEFT JOIN schedule_shift on schedule_shift.shift_id = s.id\n        WHERE s.transaction_id IS NOT NULL\n        GROUP BY s.transaction_id\n        ORDER BY created_at DESC\n    ');\n\n    foreach ($shiftsData as &$shiftData) {\n        $shiftData['title'] = $shiftData['schedule_id'] ? __('shifts_history.schedule', [$schedules[$shiftData['schedule_id']]]) : $shiftData['title'];\n        $shiftData['user'] = User_Nick_render(User::find($shiftData['user_id']));\n        $shiftData['start'] = Carbon::make($shiftData['start'])->format(__('Y-m-d H:i'));\n        $shiftData['end'] = Carbon::make($shiftData['end'])->format(__('Y-m-d H:i'));\n        $shiftData['created_at'] = Carbon::make($shiftData['created_at'])->format(__('Y-m-d H:i'));\n        $shiftData['actions'] = form([\n            form_hidden('transaction_id', $shiftData['transaction_id']),\n            form_submit('delete', icon('trash') . __('delete all'), 'btn-sm', true, 'danger'),\n        ]);\n    }\n\n    return page_with_title(admin_shifts_history_title(), [\n        msg(),\n        table([\n            'transaction_id' => __('ID'),\n            'title'          => __('Title'),\n            'count'          => __('Count'),\n            'start'          => __('Start'),\n            'end'            => __('End'),\n            'user'           => __('User'),\n            'created_at'     => __('Created'),\n            'actions'        => '',\n        ], $shiftsData),\n    ], true);\n}\n", "<?php\n\nuse Engelsystem\\Config\\GoodieType;\nuse Engelsystem\\Http\\Validation\\Rules\\Username;\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Query\\JoinClause;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @return string\n */\nfunction admin_user_title()\n{\n    return __('All Angels');\n}\n\n/**\n * @return string\n */\nfunction admin_user()\n{\n    $user = auth()->user();\n    $tshirt_sizes = config('tshirt_sizes');\n    $request = request();\n    $html = '';\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n\n    if (!$request->has('id')) {\n        throw_redirect(users_link());\n    }\n\n    $user_id = $request->input('id');\n    if (!$request->has('action')) {\n        $user_source = User::find($user_id);\n        if (!$user_source) {\n            error(__('This user does not exist.'));\n            throw_redirect(users_link());\n        }\n\n        $html .= __('Here you can change the user entry. Under the item \\'Arrived\\' the angel is marked as present, a yes at Active means that the angel was active.');\n        if ($goodie_enabled) {\n            if ($goodie_tshirt) {\n                $html .= ' ' . __('If the angel is active, it can claim a T-shirt. If T-shirt is set to \\'Yes\\', the angel already got their T-shirt.');\n            } else {\n                $html .= ' ' . __('If the angel is active, it can claim a goodie. If goodie is set to \\'Yes\\', the angel already got their goodie.');\n            }\n        }\n        $html .= '<br><br>';\n        $html .= '<form action=\"'\n            . page_link_to('admin_user', ['action' => 'save', 'id' => $user_id])\n            . '\" method=\"post\">' . \"\\n\";\n        $html .= form_csrf();\n        $html .= '<table>' . \"\\n\";\n        $html .= '<input type=\"hidden\" name=\"Type\" value=\"Normal\">' . \"\\n\";\n        $html .= '<tr><td>' . \"\\n\";\n        $html .= '<table>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Nickname') . '</td><td>'\n            . '<input size=\"40\" name=\"eNick\" value=\"' . htmlspecialchars($user_source->name) . '\" class=\"form-control\" maxlength=\"24\">'\n            . '</td></tr>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Last login') . '</td><td><p class=\"help-block\">'\n            . ($user_source->last_login_at ? $user_source->last_login_at->format(__('Y-m-d H:i')) : '-')\n            . '</p></td></tr>' . \"\\n\";\n        if (config('enable_user_name')) {\n            $html .= '  <tr><td>' . __('Prename') . '</td><td>'\n                . '<input size=\"40\" name=\"eName\" value=\"' . htmlspecialchars((string) $user_source->personalData->last_name) . '\" class=\"form-control\" maxlength=\"64\">'\n                . '</td></tr>' . \"\\n\";\n            $html .= '  <tr><td>' . __('Last name') . '</td><td>'\n                . '<input size=\"40\" name=\"eVorname\" value=\"' . htmlspecialchars((string) $user_source->personalData->first_name) . '\" class=\"form-control\" maxlength=\"64\">'\n                . '</td></tr>' . \"\\n\";\n        }\n        $html .= '  <tr><td>' . __('Mobile') . '</td><td>'\n            . '<input type= \"tel\" size=\"40\" name=\"eHandy\" value=\"' . htmlspecialchars((string) $user_source->contact->mobile) . '\" class=\"form-control\" maxlength=\"40\">'\n            . '</td></tr>' . \"\\n\";\n        if (config('enable_dect')) {\n            $html .= '  <tr><td>' . __('DECT') . '</td><td>'\n                . '<input size=\"40\" name=\"eDECT\" value=\"' . htmlspecialchars((string) $user_source->contact->dect) . '\" class=\"form-control\" maxlength=\"40\">'\n                . '</td></tr>' . \"\\n\";\n        }\n        if ($user_source->settings->email_human) {\n            $html .= '  <tr><td>' . __('settings.profile.email') . '</td><td>'\n                . '<input type=\"email\" size=\"40\" name=\"eemail\" value=\"' . htmlspecialchars($user_source->email) . '\" class=\"form-control\" maxlength=\"254\">'\n                . '</td></tr>' . \"\\n\";\n        }\n        if ($goodie_tshirt) {\n            $html .= '  <tr><td>' . __('user.shirt_size') . '</td><td>'\n                . html_select_key(\n                    'size',\n                    'eSize',\n                    $tshirt_sizes,\n                    $user_source->personalData->shirt_size,\n                    __('form.select_placeholder')\n                )\n                . '</td></tr>' . \"\\n\";\n        }\n\n        $options = [\n            '1' => __('Yes'),\n            '0' => __('No'),\n        ];\n\n        // Gekommen?\n        $html .= '  <tr><td>' . __('Arrived') . '</td><td>' . \"\\n\";\n        if ($user_source->state->arrived) {\n            $html .= __('Yes');\n        } else {\n            $html .= __('No');\n        }\n        $html .= '</td></tr>' . \"\\n\";\n\n        // Aktiv?\n        $html .= '  <tr><td>' . __('user.active') . '</td><td>' . \"\\n\";\n        $html .= html_options('eAktiv', $options, $user_source->state->active) . '</td></tr>' . \"\\n\";\n\n        // Aktiv erzwingen\n        if (auth()->can('admin_active')) {\n            $html .= '  <tr><td>' . __('Force active') . '</td><td>' . \"\\n\";\n            $html .= html_options('force_active', $options, $user_source->state->force_active) . '</td></tr>' . \"\\n\";\n        }\n\n        if ($goodie_enabled) {\n            // T-Shirt bekommen?\n            if ($goodie_tshirt) {\n                $html .= '  <tr><td>' . __('T-Shirt') . '</td><td>' . \"\\n\";\n            } else {\n                $html .= '  <tr><td>' . __('Goodie') . '</td><td>' . \"\\n\";\n            }\n            $html .= html_options('eTshirt', $options, $user_source->state->got_shirt) . '</td></tr>' . \"\\n\";\n        }\n        $html .= '</table>' . \"\\n\" . '</td><td></td></tr>';\n\n        $html .= '</td></tr>' . \"\\n\";\n        $html .= '</table>' . \"\\n\" . '<br>' . \"\\n\";\n        $html .= '<button type=\"submit\" class=\"btn btn-primary\">' . __('form.save') . '</button>' . \"\\n\";\n        $html .= '</form>';\n\n        $html .= '<hr>';\n\n        $html .= form_info('', __('Please visit the angeltypes page or the users profile to manage the users angeltypes.'));\n\n        $html .= ' ' . __('Here you can reset the password of this angel:') . '<form action=\"'\n            . page_link_to('admin_user', ['action' => 'change_pw', 'id' => $user_id])\n            . '\" method=\"post\">' . \"\\n\";\n        $html .= form_csrf();\n        $html .= '<table>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Password') . '</td><td>'\n            . '<input type=\"password\" size=\"40\" name=\"new_pw\" value=\"\" class=\"form-control\" autocomplete=\"new-password\">'\n            . '</td></tr>' . \"\\n\";\n        $html .= '  <tr><td>' . __('Confirm password') . '</td><td>'\n            . '<input type=\"password\" size=\"40\" name=\"new_pw2\" value=\"\" class=\"form-control\" autocomplete=\"new-password\">'\n            . '</td></tr>' . \"\\n\";\n\n        $html .= '</table>' . \"\\n\" . '<br>' . \"\\n\";\n        $html .= '<button type=\"submit\" class=\"btn btn-primary\">' . __('form.save') . '</button>' . \"\\n\";\n        $html .= '</form>';\n\n        $html .= '<hr>';\n\n        /** @var Group $my_highest_group */\n        $my_highest_group = $user->groups()->orderByDesc('id')->first();\n        if (!empty($my_highest_group)) {\n            $my_highest_group = $my_highest_group->id;\n        }\n\n        $angel_highest_group = $user_source->groups()->orderByDesc('id')->first();\n        if (!empty($angel_highest_group)) {\n            $angel_highest_group = $angel_highest_group->id;\n        }\n\n        if (\n            ($user_id != $user->id || auth()->can('admin_groups'))\n            && ($my_highest_group >= $angel_highest_group || is_null($angel_highest_group))\n        ) {\n            $html .= __('Here you can define the user groups of the angel:') . '<form action=\"'\n                . page_link_to('admin_user', ['action' => 'save_groups', 'id' => $user_id])\n                . '\" method=\"post\">' . \"\\n\";\n            $html .= form_csrf();\n            $html .= '<div>';\n\n            $groups = changeableGroups($my_highest_group, $user_id);\n            foreach ($groups as $group) {\n                $html .= '<div class=\"form-check\">'\n                    . '<input class=\"form-check-input\" type=\"checkbox\" id=\"' . $group->id . '\" name=\"groups[]\" value=\"' . $group->id . '\" '\n                    . ($group->selected ? ' checked=\"checked\"' : '')\n                    . ' /><label class=\"form-check-label\" for=\"' . $group->id . '\">'\n                    . htmlspecialchars($group->name)\n                    . '</label></div>';\n            }\n\n            $html .= '</div><br>';\n\n            $html .= '<button type=\"submit\" class=\"btn btn-primary\">' . __('form.save') . '</button>' . \"\\n\";\n            $html .= '</form>';\n\n            $html .= '<hr>';\n        }\n\n        $html .= buttons([\n            button(user_delete_link($user_source->id), icon('trash') . __('delete'), 'btn-danger'),\n        ]);\n\n        $html .= '<hr>';\n    } else {\n        switch ($request->input('action')) {\n            case 'save_groups':\n                $angel = User::findOrFail($user_id);\n                if ($angel->id != $user->id || auth()->can('admin_groups')) {\n                    /** @var Group $my_highest_group */\n                    $my_highest_group = $user->groups()->orderByDesc('id')->first();\n                    /** @var Group $angel_highest_group */\n                    $angel_highest_group = $angel->groups()->orderByDesc('id')->first();\n\n                    if (\n                        $my_highest_group\n                        && (\n                            empty($angel_highest_group)\n                            || ($my_highest_group->id >= $angel_highest_group->id)\n                        )\n                    ) {\n                        $groups_source = changeableGroups($my_highest_group->id, $angel->id);\n                        $groups = [];\n                        $groupList = [];\n                        foreach ($groups_source as $group) {\n                            $groups[$group->id] = $group;\n                            $groupList[] = $group->id;\n                        }\n\n                        $groupsRequest = $request->input('groups');\n                        if (!is_array($groupsRequest)) {\n                            $groupsRequest = [];\n                        }\n\n                        $angel->groups()->detach();\n                        $user_groups_info = [];\n                        foreach ($groupsRequest as $group) {\n                            if (in_array($group, $groupList)) {\n                                $group = $groups[$group];\n                                $angel->groups()->attach($group);\n                                $user_groups_info[] = $group->name;\n                            }\n                        }\n                        engelsystem_log(\n                            'Set groups of ' . User_Nick_render($angel, true) . ' to: '\n                            . join(', ', $user_groups_info)\n                        );\n                        $html .= success(__('User groups saved.'), true);\n                    } else {\n                        $html .= error(__('You cannot edit angels with more rights.'), true);\n                    }\n                } else {\n                    $html .= error(__('You cannot edit your own rights.'), true);\n                }\n                break;\n\n            case 'save':\n                $force_active = $user->state->force_active;\n                $user_source = User::find($user_id);\n                if (auth()->can('admin_active')) {\n                    $force_active = $request->input('force_active');\n                }\n                if ($user_source->settings->email_human) {\n                    $user_source->email = $request->postData('eemail');\n                }\n\n                $nick = trim($request->get('eNick'));\n                $nickValid = (new Username())->validate($nick);\n\n                if ($nickValid) {\n                    $user_source->name = $nick;\n                }\n                $user_source->save();\n\n                if (config('enable_user_name')) {\n                    $user_source->personalData->first_name = $request->postData('eVorname');\n                    $user_source->personalData->last_name = $request->postData('eName');\n                }\n                if ($goodie_tshirt) {\n                    $user_source->personalData->shirt_size = $request->postData('eSize');\n                }\n                $user_source->personalData->save();\n\n                $user_source->contact->mobile = $request->postData('eHandy');\n                $user_source->contact->dect = $request->postData('eDECT');\n                $user_source->contact->save();\n\n                if ($goodie_enabled) {\n                    $user_source->state->got_shirt = $request->postData('eTshirt');\n                }\n                $user_source->state->active = $request->postData('eAktiv');\n                $user_source->state->force_active = $force_active;\n                $user_source->state->save();\n\n                engelsystem_log(\n                    'Updated user: ' . $user_source->name . ' (' . $user_source->id . ')'\n                    . ($goodie_tshirt ? ', t-shirt: ' : '' . $user_source->personalData->shirt_size)\n                    . ', active: ' . $user_source->state->active\n                    . ', force-active: ' . $user_source->state->force_active\n                    . ($goodie_tshirt ? ', tshirt: ' : ', goodie: ' . $user_source->state->got_shirt)\n                );\n                $html .= success(__('Changes were saved.') . \"\\n\", true);\n                break;\n\n            case 'change_pw':\n                if (\n                    $request->postData('new_pw') != ''\n                    && $request->postData('new_pw') == $request->postData('new_pw2')\n                ) {\n                    $user_source = User::find($user_id);\n                    auth()->setPassword($user_source, $request->postData('new_pw'));\n                    engelsystem_log('Set new password for ' . User_Nick_render($user_source, true));\n                    $html .= success(__('Password reset done.'), true);\n                } else {\n                    $html .= error(\n                        __('The entries must match and must not be empty!'),\n                        true\n                    );\n                }\n                break;\n        }\n    }\n\n    return page_with_title(__('Edit user'), [\n        $html,\n    ]);\n}\n\n/**\n * @param $myHighestGroup\n * @param $angelId\n * @return Collection|Group[]\n */\nfunction changeableGroups($myHighestGroup, $angelId): Collection\n{\n    return Group::query()\n        ->where('groups.id', '<=', $myHighestGroup)\n        ->join('users_groups', function ($query) use ($angelId) {\n            /** @var JoinClause $query */\n            $query->where('users_groups.group_id', '=', $query->raw('groups.id'))\n                ->where('users_groups.user_id', $angelId);\n        }, null, null, 'left outer')\n        ->orderBy('name')\n        ->get([\n            'groups.*',\n            'users_groups.group_id as selected',\n        ]);\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Database\\Database;\nuse Engelsystem\\Events\\Listener\\OAuth2;\nuse Engelsystem\\Config\\GoodieType;\nuse Engelsystem\\Http\\Validation\\Rules\\Username;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\OAuth;\nuse Engelsystem\\Models\\User\\Contact;\nuse Engelsystem\\Models\\User\\PersonalData;\nuse Engelsystem\\Models\\User\\Settings;\nuse Engelsystem\\Models\\User\\State;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Database\\Connection;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\n/**\n * @return string\n */\nfunction register_title()\n{\n    return __('Register');\n}\n\n/**\n * Engel registrieren\n *\n * @return string\n */\nfunction guest_register()\n{\n    $authUser = auth()->user();\n    $tshirt_sizes = config('tshirt_sizes');\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $enable_user_name = config('enable_user_name');\n    $enable_dect = config('enable_dect');\n    $enable_planned_arrival = config('enable_planned_arrival');\n    $min_password_length = config('min_password_length');\n    $enable_password = config('enable_password');\n    $enable_pronoun = config('enable_pronoun');\n    $enable_mobile_show = config('enable_mobile_show');\n    $config = config();\n    $request = request();\n    $session = session();\n    /** @var Connection $db */\n    $db = app(Database::class)->getConnection();\n    $is_oauth = $session->has('oauth2_connect_provider');\n\n    $msg = '';\n    $nick = '';\n    $lastName = '';\n    $preName = '';\n    $dect = '';\n    $mobile = '';\n    $mobile_show = false;\n    $email = '';\n    $pronoun = '';\n    $email_shiftinfo = false;\n    $email_by_human_allowed = false;\n    $email_messages = false;\n    $email_news = false;\n    $email_goody = false;\n    $tshirt_size = '';\n    $password_hash = '';\n    $selected_angel_types = [];\n    $planned_arrival_date = null;\n\n    /** @var AngelType[]|Collection $angel_types_source */\n    $angel_types_source = AngelType::all();\n    $angel_types = [];\n    if (!empty($session->get('oauth2_groups'))) {\n        /** @var OAuth2 $oauth */\n        $oauth = app()->get(OAuth2::class);\n        $ssoTeams = $oauth->getSsoTeams($session->get('oauth2_connect_provider'));\n        foreach ($ssoTeams as $name => $team) {\n            if (in_array($name, $session->get('oauth2_groups'))) {\n                $selected_angel_types[] = $team['id'];\n            }\n        }\n    }\n    foreach ($angel_types_source as $angel_type) {\n        if ($angel_type->hide_register) {\n            continue;\n        }\n        $angel_types[$angel_type->id] = htmlspecialchars($angel_type->name)\n            . ($angel_type->restricted ? ' (' . __('Requires introduction') . ')' : '');\n        if (!$angel_type->restricted) {\n            $selected_angel_types[] = $angel_type->id;\n        }\n    }\n\n    $oauth_enable_password = $session->get('oauth2_enable_password');\n    if (!is_null($oauth_enable_password)) {\n        $enable_password = $oauth_enable_password;\n    }\n\n    if (\n        !auth()->can('register') // No registration permission\n        // Not authenticated and\n        || (!$authUser && !config('registration_enabled') && !$session->get('oauth2_allow_registration')) // Registration disabled\n        || (!$authUser && !$enable_password && !$is_oauth) // Password disabled and not oauth\n    ) {\n        error(__('Registration is disabled.'));\n\n        return page_with_title(register_title(), [\n            msg(),\n        ]);\n    }\n\n    if ($request->hasPostData('submit')) {\n        $valid = true;\n\n        if ($request->has('username')) {\n            $nick = trim($request->get('username'));\n            $nickValid = (new Username())->validate($nick);\n\n            if (!$nickValid) {\n                $valid = false;\n                $msg .= error(sprintf(\n                    __('Please enter a valid nick.') . ' ' . __('Use up to 24 letters, numbers or connecting punctuations for your nickname.'),\n                    $nick\n                ), true);\n            }\n            if (User::whereName($nick)->count() > 0) {\n                $valid = false;\n                $msg .= error(sprintf(__('Your nick \"%s\" already exists.'), htmlspecialchars($nick)), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter a nickname.'), true);\n        }\n\n        if ($request->has('mobile_show') && $enable_mobile_show) {\n            $mobile_show = true;\n        }\n\n        if ($request->has('email') && strlen(strip_request_item('email')) > 0) {\n            $email = strip_request_item('email');\n            if (!check_email($email)) {\n                $valid = false;\n                $msg .= error(__('E-mail address is not correct.'), true);\n            }\n            if (User::whereEmail($email)->first()) {\n                $valid = false;\n                $msg .= error(__('E-mail address is already used by another user.'), true);\n            }\n        } else {\n            $valid = false;\n            $msg .= error(__('Please enter your e-mail.'), true);\n        }\n\n        if ($request->has('email_shiftinfo')) {\n            $email_shiftinfo = true;\n        }\n\n        if ($request->has('email_by_human_allowed')) {\n            $email_by_human_allowed = true;\n        }\n\n        if ($request->has('email_messages')) {\n            $email_messages = true;\n        }\n\n        if ($request->has('email_news')) {\n            $email_news = true;\n        }\n\n        if ($request->has('email_goody')) {\n            $email_goody = true;\n        }\n\n        if ($goodie_tshirt) {\n            if ($request->has('tshirt_size') && isset($tshirt_sizes[$request->input('tshirt_size')])) {\n                $tshirt_size = $request->input('tshirt_size');\n            } else {\n                $valid = false;\n                $msg .= error(__('Please select your shirt size.'), true);\n            }\n        }\n\n        if ($enable_password && $request->has('password') && strlen($request->postData('password')) >= $min_password_length) {\n            if ($request->postData('password') != $request->postData('password2')) {\n                $valid = false;\n                $msg .= error(__('Your passwords don\\'t match.'), true);\n            }\n        } elseif ($enable_password) {\n            $valid = false;\n            $msg .= error(sprintf(\n                __('Your password is too short (please use at least %s characters).'),\n                $min_password_length\n            ), true);\n        }\n\n        if ($request->has('planned_arrival_date') && $enable_planned_arrival) {\n            $tmp = parse_date('Y-m-d H:i', $request->input('planned_arrival_date') . ' 00:00');\n            $result = User_validate_planned_arrival_date($tmp);\n            $planned_arrival_date = $result->getValue();\n            if (!$result->isValid()) {\n                $valid = false;\n                error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n            }\n        } elseif ($enable_planned_arrival) {\n            $valid = false;\n            error(__('Please enter your planned date of arrival. It should be after the buildup start date and before teardown end date.'));\n        }\n\n        $selected_angel_types = [];\n        foreach (array_keys($angel_types) as $angel_type_id) {\n            if ($request->has('angel_types_' . $angel_type_id)) {\n                $selected_angel_types[] = $angel_type_id;\n            }\n        }\n\n        // Trivia\n        if ($enable_user_name && $request->has('lastname')) {\n            $lastName = strip_request_item('lastname');\n        }\n        if ($enable_user_name && $request->has('prename')) {\n            $preName = strip_request_item('prename');\n        }\n        if ($enable_pronoun && $request->has('pronoun')) {\n            $pronoun = strip_request_item('pronoun');\n        }\n        if ($enable_dect && $request->has('dect')) {\n            if (strlen(strip_request_item('dect')) <= 40) {\n                $dect = strip_request_item('dect');\n            } else {\n                $valid = false;\n                error(__('For dect numbers are only 40 digits allowed.'));\n            }\n        }\n        if ($request->has('mobile')) {\n            $mobile = strip_request_item('mobile');\n        }\n\n        if ($valid) {\n            // Safeguard against partially created user data\n            $db->beginTransaction();\n\n            $user = new User([\n                'name'          => $nick,\n                'password'      => $password_hash,\n                'email'         => $email,\n                'api_key'       => '',\n                'last_login_at' => null,\n            ]);\n            $user->save();\n\n            $contact = new Contact([\n                'dect'   => $dect,\n                'mobile' => $mobile,\n            ]);\n            $contact->user()\n                ->associate($user)\n                ->save();\n\n            $personalData = new PersonalData([\n                'first_name'           => $preName,\n                'last_name'            => $lastName,\n                'pronoun'              => $pronoun,\n                'shirt_size'           => $tshirt_size,\n                'planned_arrival_date' => $enable_planned_arrival ? Carbon::createFromTimestamp($planned_arrival_date) : null,\n            ]);\n            $personalData->user()\n                ->associate($user)\n                ->save();\n\n            $settings = new Settings([\n                'language'        => $session->get('locale'),\n                'theme'           => config('theme'),\n                'email_human'     => $email_by_human_allowed,\n                'email_messages'  => $email_messages,\n                'email_goody'     => $email_goody,\n                'email_shiftinfo' => $email_shiftinfo,\n                'email_news'      => $email_news,\n                'mobile_show'     => $mobile_show,\n            ]);\n            $settings->user()\n                ->associate($user)\n                ->save();\n\n            $state = new State([]);\n            if (config('autoarrive')) {\n                $state->arrived = true;\n                $state->arrival_date = new Carbon();\n            }\n            $state->user()\n                ->associate($user)\n                ->save();\n\n            if ($session->has('oauth2_connect_provider') && $session->has('oauth2_user_id')) {\n                $oauth = new OAuth([\n                    'provider'      => $session->get('oauth2_connect_provider'),\n                    'identifier'    => $session->get('oauth2_user_id'),\n                    'access_token'  => $session->get('oauth2_access_token'),\n                    'refresh_token' => $session->get('oauth2_refresh_token'),\n                    'expires_at'    => $session->get('oauth2_expires_at'),\n                ]);\n                $oauth->user()\n                    ->associate($user)\n                    ->save();\n\n                $session->remove('oauth2_connect_provider');\n                $session->remove('oauth2_user_id');\n                $session->remove('oauth2_access_token');\n                $session->remove('oauth2_refresh_token');\n                $session->remove('oauth2_expires_at');\n            }\n\n            // Assign user-group and set password\n            $defaultGroup = Group::find(auth()->getDefaultRole());\n            $user->groups()->attach($defaultGroup);\n            if ($enable_password) {\n                auth()->setPassword($user, $request->postData('password'));\n            }\n\n            // Assign angel-types\n            $user_angel_types_info = [];\n            foreach ($selected_angel_types as $selected_angel_type_id) {\n                $angelType = AngelType::findOrFail($selected_angel_type_id);\n                $user->userAngelTypes()->attach($angelType);\n                $user_angel_types_info[] = $angelType->name;\n            }\n\n            // Commit complete user data\n            $db->commit();\n\n            engelsystem_log(\n                'User ' . User_Nick_render($user, true)\n                . ' signed up as: ' . join(', ', $user_angel_types_info)\n            );\n            success(__('Angel registration successful!'));\n\n            // User is already logged in - that means a supporter has registered an angel. Return to register page.\n            if ($authUser) {\n                throw_redirect(page_link_to('register'));\n            }\n\n            // If a welcome message is present, display it on the next page\n            if ($config->get('welcome_msg')) {\n                $session->set('show_welcome', true);\n            }\n\n            // Login the user\n            if ($user->oauth->count()) {\n                /** @var OAuth $provider */\n                $provider = $user->oauth->first();\n                throw_redirect(url('/oauth/' . $provider->provider));\n            }\n\n            throw_redirect(page_link_to('/'));\n        }\n    }\n\n    $buildup_start_date = time();\n    $teardown_end_date = null;\n    if ($buildup = $config->get('buildup_start')) {\n        /** @var Carbon $buildup */\n        $buildup_start_date = $buildup->getTimestamp();\n    }\n\n    if ($teardown = $config->get('teardown_end')) {\n        /** @var Carbon $teardown */\n        $teardown_end_date = $teardown->getTimestamp();\n    }\n\n    $form_data = $session->get('form_data');\n    $session->remove('form_data');\n    if (!$nick && !empty($form_data['name'])) {\n        $nick = $form_data['name'];\n    }\n\n    if (!$email && !empty($form_data['email'])) {\n        $email = $form_data['email'];\n    }\n\n    if (!$preName && !empty($form_data['first_name'])) {\n        $preName = $form_data['first_name'];\n    }\n\n    if (!$lastName && !empty($form_data['last_name'])) {\n        $lastName = $form_data['last_name'];\n    }\n\n    return page_with_title(register_title(), [\n        __('By completing this form you\\'re registering as a Chaos-Angel. This script will create you an account in the angel task scheduler.'),\n        form_info(entry_required() . ' = ' . __('Entry required!')),\n        $msg,\n        msg(),\n        form([\n            div('row', [\n                div('col', [\n                    form_text(\n                        'username',\n                        __('Nick') . ' ' . entry_required(),\n                        $nick,\n                        false,\n                        24,\n                        'nickname'\n                    ),\n                    form_info(\n                        '',\n                        __('Use up to 24 letters, numbers or connecting punctuations for your nickname.')\n                    ),\n                ]),\n\n                $enable_pronoun ? div('col', [\n                    form_text('pronoun', __('Pronoun'), $pronoun, false, 15),\n                ]) : '',\n            ]),\n\n            $enable_user_name ? div('row', [\n                div('col', [\n                    form_text('prename', __('First name'), $preName, false, 64, 'given-name'),\n                ]),\n                div('col', [\n                    form_text('lastname', __('Last name'), $lastName, false, 64, 'family-name'),\n                ]),\n            ]) : '',\n\n            div('row', [\n                div('col', [\n                    form_email(\n                        'email',\n                        __('E-Mail') . ' ' . entry_required(),\n                        $email,\n                        false,\n                        'email',\n                        254\n                    ),\n                    form_checkbox(\n                        'email_shiftinfo',\n                        __(\n                            'settings.profile.email_shiftinfo',\n                            [htmlspecialchars(config('app_name'))]\n                        ),\n                        $email_shiftinfo\n                    ),\n                    form_checkbox(\n                        'email_news',\n                        __('Notify me of new news'),\n                        $email_news\n                    ),\n                    form_checkbox(\n                        'email_messages',\n                        __('settings.profile.email_messages'),\n                        $email_messages\n                    ),\n                    form_checkbox(\n                        'email_by_human_allowed',\n                        __('Allow heaven angels to contact you by e-mail.'),\n                        $email_by_human_allowed\n                    ),\n                    $goodie_enabled ?\n                        form_checkbox(\n                            'email_goody',\n                            __('To receive vouchers, give consent that nick, email address, worked hours and shirt size will be stored until the next similar event.')\n                            . (config('privacy_email') ? ' ' . __('To withdraw your approval, send an email to <a href=\"mailto:%s\">%1$s</a>.', [htmlspecialchars(config('privacy_email'))]) : ''),\n                            $email_goody\n                        ) : '',\n                ]),\n\n                $enable_dect ? div('col', [\n                    form_text('dect', __('DECT'), $dect, false, 40, 'tel-local'),\n                ]) : '',\n\n                div('col', [\n                    form_text('mobile', __('Mobile'), $mobile, false, 40, 'tel-national'),\n                    $enable_mobile_show ? form_checkbox(\n                        'mobile_show',\n                        __('Show mobile number to other users to contact me'),\n                        $mobile_show\n                    ) : '',\n                ]),\n            ]),\n\n            div('row', [\n                $enable_password ? div('col', [\n                    form_password('password', __('Password') . ' ' . entry_required(), 'new-password'),\n                ]) : '',\n\n                $enable_planned_arrival ? div('col', [\n                    form_date(\n                        'planned_arrival_date',\n                        __('Planned date of arrival') . ' ' . entry_required(),\n                        $planned_arrival_date,\n                        $buildup_start_date,\n                        $teardown_end_date\n                    ),\n                ]) : '',\n            ]),\n\n            div('row', [\n                $enable_password ? div('col', [\n                    form_password('password2', __('Confirm password') . ' ' . entry_required(), 'new-password'),\n                ]) : '',\n\n                div('col', [\n                    $goodie_tshirt ? form_select(\n                        'tshirt_size',\n                        __('Shirt size') . ' ' . entry_required(),\n                        $tshirt_sizes,\n                        $tshirt_size,\n                        __('form.select_placeholder')\n                    ) : '',\n                ]),\n            ]),\n\n            div('row', [\n                div('col', [\n                    form_checkboxes(\n                        'angel_types',\n                        __('What do you want to do?') . sprintf(\n                            ' (<a href=\"%s\">%s</a>)',\n                            url('/angeltypes/about'),\n                            __('Description of job types')\n                        ),\n                        $angel_types,\n                        $selected_angel_types\n                    ),\n                    form_info(\n                        '',\n                        __('Some angel types have to be confirmed later by a supporter at an introduction meeting. You can change your selection in the options section.')\n                    ),\n                ]),\n            ]),\n\n            form_submit('submit', __('Register')),\n        ]),\n    ]);\n}\n\n/**\n * @return string\n */\nfunction entry_required()\n{\n    return icon('exclamation-triangle', 'text-info');\n}\n", "<?php\n\nuse Engelsystem\\Database\\Db;\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\NeededAngelType;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftsFilter;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection as EloquentCollection;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @return string\n */\nfunction shifts_title()\n{\n    return __('Shifts');\n}\n\n/**\n * Start different controllers for deleting shifts and shift_entries, edit shifts and add shift entries.\n * FIXME:\n * Transform into shift controller and shift entry controller.\n * Split actions into shift edit, shift delete, shift entry edit, shift entry delete\n * Introduce simpler and beautiful actions for shift entry join/leave for users\n *\n * @return string\n */\nfunction user_shifts()\n{\n    $request = request();\n\n    if (auth()->user()->isFreeloader()) {\n        throw_redirect(page_link_to('user_myshifts'));\n    }\n\n    if ($request->has('edit_shift')) {\n        return shift_edit_controller();\n    } elseif ($request->has('delete_shift')) {\n        return shift_delete_controller();\n    }\n    return view_user_shifts();\n}\n\n/**\n * Helper function that updates the start and end time from request data.\n * Use update_ShiftsFilter().\n *\n * @param ShiftsFilter $shiftsFilter The shiftfilter to update.\n * @param string[]     $days\n */\nfunction update_ShiftsFilter_timerange(ShiftsFilter $shiftsFilter, $days)\n{\n    $start_time = $shiftsFilter->getStartTime();\n    if (is_null($start_time)) {\n        $now = (new DateTime())->format('Y-m-d');\n        $first_day = DateTime::createFromFormat(\n            'Y-m-d',\n            in_array($now, $days) ? $now : ($days[0] ?? (new DateTime())->format('Y-m-d'))\n        )->getTimestamp();\n        if (time() < $first_day) {\n            $start_time = $first_day;\n        } else {\n            $start_time = time();\n        }\n    }\n\n    $end_time = $shiftsFilter->getEndTime();\n    if (is_null($end_time)) {\n        $end_time = $start_time + 24 * 60 * 60;\n        $end = Carbon::createFromTimestamp($end_time);\n        if (!in_array($end->format('Y-m-d'), $days)) {\n            $end->startOfDay()->subSecond(); // the day before\n            $end_time = $end->timestamp;\n        }\n    }\n\n    $shiftsFilter->setStartTime(check_request_datetime(\n        'start_day',\n        'start_time',\n        $days,\n        $start_time\n    ));\n    $shiftsFilter->setEndTime(check_request_datetime(\n        'end_day',\n        'end_time',\n        $days,\n        $end_time\n    ));\n\n    if ($shiftsFilter->getStartTime() > $shiftsFilter->getEndTime()) {\n        $shiftsFilter->setEndTime($shiftsFilter->getStartTime() + 24 * 60 * 60);\n    }\n}\n\n/**\n * Update given ShiftsFilter with filter params from user input\n *\n * @param ShiftsFilter $shiftsFilter The shifts filter to update from request data\n * @param boolean      $user_shifts_admin Has the user user_shift_admin privilege?\n * @param string[]     $days An array of available filter days\n */\nfunction update_ShiftsFilter(ShiftsFilter $shiftsFilter, $user_shifts_admin, $days)\n{\n    $shiftsFilter->setUserShiftsAdmin($user_shifts_admin);\n    $shiftsFilter->setFilled(check_request_int_array('filled', $shiftsFilter->getFilled()));\n    $shiftsFilter->setRooms(check_request_int_array('rooms', $shiftsFilter->getRooms()));\n    $shiftsFilter->setTypes(check_request_int_array('types', $shiftsFilter->getTypes()));\n    update_ShiftsFilter_timerange($shiftsFilter, $days);\n}\n\n/**\n * @return Room[]|Collection\n */\nfunction load_rooms(bool $onlyWithActiveShifts = false)\n{\n    $rooms = Room::orderBy('name');\n\n    if ($onlyWithActiveShifts) {\n        $roomIdsFromAngelType = NeededAngelType::query()\n            ->whereNotNull('room_id')\n            ->select('room_id');\n\n        $roomIdsFromShift = Shift::query()\n            ->leftJoin('needed_angel_types', 'shifts.id', 'needed_angel_types.shift_id')\n            ->whereNotNull('needed_angel_types.shift_id')\n            ->select('shifts.room_id');\n\n        $rooms->whereIn('id', $roomIdsFromAngelType)\n            ->orWhereIn('id', $roomIdsFromShift);\n    }\n\n    $rooms = $rooms->get();\n\n    if ($rooms->isEmpty()) {\n        error(__('The administration has not configured any rooms yet.'));\n        throw_redirect(page_link_to('/'));\n    }\n\n    return $rooms;\n}\n\n/**\n * @return array\n */\nfunction load_days()\n{\n    $days = (new Collection(Db::select(\n        '\n                SELECT DISTINCT DATE(`start`) AS `id`, DATE(`start`) AS `name`\n                FROM `shifts`\n                ORDER BY `id`, `name`\n            '\n    )))\n        ->pluck('id')\n        ->toArray();\n\n    if (empty($days)) {\n        error(__('The administration has not configured any shifts yet.'));\n        // Do not try to redirect to the current page\n        if (config('home_site') != 'user_shifts') {\n            throw_redirect(page_link_to('/'));\n        }\n    }\n    return $days;\n}\n\n/**\n * @return array[]|false\n */\nfunction load_types()\n{\n    $user = auth()->user();\n\n    if (!AngelType::count()) {\n        error(__('The administration has not configured any angeltypes yet - or you are not subscribed to any angeltype.'));\n        throw_redirect(page_link_to('/'));\n    }\n\n    $types = Db::select(\n        '\n            SELECT\n                `angel_types`.`id`,\n                `angel_types`.`name`,\n                (\n                    `angel_types`.`restricted`=0\n                    OR (\n                        NOT `user_angel_type`.`confirm_user_id` IS NULL\n                        OR `user_angel_type`.`id` IS NULL\n                    )\n                ) AS `enabled`\n            FROM `angel_types`\n            LEFT JOIN `user_angel_type`\n                ON (\n                    `user_angel_type`.`angel_type_id`=`angel_types`.`id`\n                    AND `user_angel_type`.`user_id`=?\n                )\n            ORDER BY `angel_types`.`name`\n        ',\n        [\n            $user->id,\n        ]\n    );\n\n    if (empty($types)) {\n        return unrestricted_angeltypes();\n    }\n\n    return $types;\n}\n\n/**\n * @return array[]\n */\nfunction unrestricted_angeltypes()\n{\n    return AngelType::whereRestricted(0)->get(['id', 'name'])->toArray();\n}\n\n/**\n * @return string\n */\nfunction view_user_shifts()\n{\n    $user = auth()->user();\n\n    $session = session();\n    $days = load_days();\n    $rooms = load_rooms(true);\n    $types = load_types();\n    $ownAngelTypes = [];\n\n    /** @var EloquentCollection|UserAngelType[] $userAngelTypes */\n    $userAngelTypes = UserAngelType::whereUserId($user->id)\n        ->leftJoin('angel_types', 'user_angel_type.angel_type_id', 'angel_types.id')\n        ->where(function (Builder $query) {\n            $query->whereNotNull('user_angel_type.confirm_user_id')\n                ->orWhere('angel_types.restricted', false);\n        })\n        ->get();\n    foreach ($userAngelTypes as $type) {\n        $ownAngelTypes[] = $type->angel_type_id;\n    }\n\n    if (!$session->has('shifts-filter')) {\n        $room_ids = $rooms->pluck('id')->toArray();\n        $shiftsFilter = new ShiftsFilter(auth()->can('user_shifts_admin'), $room_ids, $ownAngelTypes);\n        $session->set('shifts-filter', $shiftsFilter->sessionExport());\n    }\n\n    $shiftsFilter = new ShiftsFilter();\n    $shiftsFilter->sessionImport($session->get('shifts-filter'));\n    update_ShiftsFilter($shiftsFilter, auth()->can('user_shifts_admin'), $days);\n    $session->set('shifts-filter', $shiftsFilter->sessionExport());\n\n    $shiftCalendarRenderer = shiftCalendarRendererByShiftFilter($shiftsFilter);\n\n    if (empty($user->api_key)) {\n        User_reset_api_key($user, false);\n    }\n\n    $filled = [\n        [\n            'id'   => '1',\n            'name' => __('occupied'),\n        ],\n        [\n            'id'   => '0',\n            'name' => __('free'),\n        ],\n    ];\n    $start_day = $shiftsFilter->getStart()->format('Y-m-d');\n    $start_time = $shiftsFilter->getStart()->format('H:i');\n    $end_day = $shiftsFilter->getEnd()->format('Y-m-d');\n    $end_time = $shiftsFilter->getEnd()->format('H:i');\n\n    if (config('signup_requires_arrival') && !$user->state->arrived) {\n        info(render_user_arrived_hint());\n    }\n\n    $formattedDays = collect($days)->map(function ($value) {\n        return Carbon::make($value)->format(__('Y-m-d'));\n    })->toArray();\n\n    return page([\n        div('col-md-12', [\n            msg(),\n            view(__DIR__ . '/../../resources/views/pages/user-shifts.html', [\n                'title'         => shifts_title(),\n                'room_select'   => make_select(\n                    $rooms,\n                    $shiftsFilter->getRooms(),\n                    'rooms',\n                    icon('pin-map-fill') . __('Rooms')\n                ),\n                'start_select'  => html_select_key(\n                    'start_day',\n                    'start_day',\n                    array_combine($days, $formattedDays),\n                    $start_day\n                ),\n                'start_time'    => $start_time,\n                'end_select'    => html_select_key(\n                    'end_day',\n                    'end_day',\n                    array_combine($days, $formattedDays),\n                    $end_day\n                ),\n                'end_time'      => $end_time,\n                'type_select'   => make_select(\n                    $types,\n                    $shiftsFilter->getTypes(),\n                    'types',\n                    icon('person-lines-fill') . __('Angeltypes') . '<sup>1</sup>',\n                    $ownAngelTypes\n                ),\n                'filled_select' => make_select(\n                    $filled,\n                    $shiftsFilter->getFilled(),\n                    'filled',\n                    icon('person-fill-slash') . __('Occupancy')\n                ),\n                'task_notice'   =>\n                    '<sup>1</sup>'\n                    . __('The tasks shown here are influenced by the angeltypes you joined already!')\n                    . ' <a href=\"' . url('/angeltypes/about') . '\">'\n                    . __('Description of the jobs.')\n                    . '</a>',\n                'shifts_table'  => msg() . $shiftCalendarRenderer->render(),\n                'ical_text'     => div('mt-3', ical_hint()),\n                'filter'        => __('Filter'),\n                'filter_toggle' => __('shifts.filter.toggle'),\n                'set_yesterday' => __('Yesterday'),\n                'set_today'     => __('Today'),\n                'set_tomorrow'  => __('Tomorrow'),\n                'set_last_8h'   => __('last 8h'),\n                'set_last_4h'   => __('last 4h'),\n                'set_next_4h'   => __('next 4h'),\n                'set_next_8h'   => __('next 8h'),\n                'buttons'       => button(\n                    public_dashboard_link(),\n                    icon('speedometer2') . __('Public Dashboard')\n                ),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Returns a hint for the user how the ical feature works.\n *\n * @return string\n */\nfunction ical_hint()\n{\n    $user = auth()->user();\n    if (!auth()->can('ical')) {\n        return '';\n    }\n\n    return heading(__('iCal export and API') . ' ' . button_help('user/ical'), 2)\n        . '<p>' . sprintf(\n            __('Export your own shifts. <a href=\"%s\">iCal format</a> or <a href=\"%s\">JSON format</a> available (please keep secret, otherwise <a href=\"%s\">reset the api key</a>).'),\n            page_link_to('ical', ['key' => $user->api_key]),\n            page_link_to('shifts_json_export', ['key' => $user->api_key]),\n            page_link_to('user_myshifts', ['reset' => 1])\n        )\n        . ' <button class=\"btn btn-sm btn-danger\" type=\"button\"\n            data-bs-toggle=\"collapse\" data-bs-target=\"#collapseApiKey\"\n            aria-expanded=\"false\" aria-controls=\"collapseApiKey\">\n            ' . __('Show API Key') . '\n            </button>'\n        . '</p>'\n        . '<p id=\"collapseApiKey\" class=\"collapse\"><code>' . $user->api_key . '</code></p>';\n}\n\n/**\n * @param array  $items\n * @param array  $selected\n * @param string $name\n * @param string $title\n * @param int[]  $ownSelect\n * @return string\n */\nfunction make_select($items, $selected, $name, $title = null, $ownSelect = [])\n{\n    $html = '';\n    if (isset($title)) {\n        $html .= '<h4>' . $title . '</h4>' . \"\\n\";\n    }\n\n    $buttons = [\n        button_checkbox_selection($name, __('All'), 'true'),\n        button_checkbox_selection($name, __('None'), 'false'),\n    ];\n    if (count($ownSelect) > 0) {\n        $buttons[] = button_checkbox_selection($name, __('Own'), json_encode($ownSelect));\n    }\n\n    $html .= buttons($buttons);\n    $html .= '<div id=\"selection_' . $name . '\" class=\"mb-3 selection ' . $name . '\">' . \"\\n\";\n\n    $htmlItems = [];\n    foreach ($items as $i) {\n        $id = $name . '_' . $i['id'];\n        $htmlItems[] = '<div class=\"form-check\">'\n            . '<input class=\"form-check-input\" type=\"checkbox\" id=\"' . $id . '\" name=\"' . $name . '[]\" value=\"' . $i['id'] . '\" '\n            . (in_array($i['id'], $selected) ? ' checked=\"checked\"' : '')\n            . '><label class=\"form-check-label\" for=\"' . $id . '\">' . htmlspecialchars($i['name']) . '</label>'\n            . (!isset($i['enabled']) || $i['enabled'] ? '' : icon('mortarboard-fill'))\n            . '</div>';\n    }\n    $html .= implode(\"\\n\", $htmlItems);\n\n    $html .= '</div>' . \"\\n\";\n    $html .= buttons($buttons);\n\n    return $html;\n}\n", "<?php\n\n// Methods to build a html form.\nuse Carbon\\Carbon;\n\n/**\n * Renders a hidden input\n *\n * @param string $name  Name of the input\n * @param string $value The value\n * @return string rendered html\n */\nfunction form_hidden($name, $value)\n{\n    return '<input type=\"hidden\" name=\"' . $name . '\" value=\"' . htmlspecialchars((string) $value) . '\" />';\n}\n\n/**\n * Rendert ein Zahlenfeld mit Buttons zum verstellen\n *\n * @param string $name\n * @param string $label\n * @param int    $value\n * @param array  $data_attributes\n * @return string\n */\nfunction form_spinner(string $name, string $label, int $value, array $data_attributes = [])\n{\n    $id = 'spinner-' . $name;\n    $attr = '';\n    foreach ($data_attributes as $attr_key => $attr_value) {\n        $attr .= ' data-' . $attr_key . '=\"' . $attr_value . '\"';\n    }\n\n    return form_element($label, '\n        <div class=\"input-group\">\n            <input id=\"' . $id . '\" class=\"form-control\" type=\"number\" min=\"0\" step=\"1\" name=\"' . $name . '\" value=\"' . $value . '\"' . $attr . ' />\n            <button class=\"btn btn-secondary spinner-down\" type=\"button\" data-input-id=\"' . $id . '\"' . $attr . '>\n                ' . icon('dash-lg') . '\n            </button>\n            <button class=\"btn btn-secondary spinner-up\" type=\"button\" data-input-id=\"' . $id . '\"' . $attr . '>\n                ' . icon('plus-lg') . '\n            </button>\n        </div>\n        ', $id);\n}\n\n/**\n * Render a bootstrap datepicker\n *\n * @param string $name       Name of the parameter\n * @param string $label      Label\n * @param int|Carbon $value  Unix Timestamp\n * @param string $start_date Earliest possible date\n * @param string $end_date\n * @return string HTML\n */\nfunction form_date($name, $label, $value, $start_date = '', $end_date = '')\n{\n    $dom_id = $name . '-date';\n    $value = ($value instanceof Carbon) ? $value->getTimestamp() : $value;\n    $value = is_numeric($value) ? date('Y-m-d', $value) : '';\n    $start_date = is_numeric($start_date) ? date('Y-m-d', $start_date) : '';\n    $end_date = is_numeric($end_date) ? date('Y-m-d', $end_date) : '';\n\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"' . $dom_id . '\" type=\"date\" placeholder=\"YYYY-MM-DD\" pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" min=\"' . $start_date . '\" max=\"' . $end_date . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars((string) $value) . '\" autocomplete=\"off\">',\n        $dom_id\n    );\n}\n\n/**\n * Render a bootstrap datepicker\n *\n * @param string $name  Name of the parameter\n * @param string $label\n * @param mixed $value\n *\n * @return string HTML\n */\nfunction form_datetime(string $name, string $label, $value)\n{\n    $dom_id = $name . '-datetime';\n    if ($value) {\n        $value = ($value instanceof Carbon) ? $value : Carbon::createFromTimestamp($value);\n    }\n\n    return form_element($label, sprintf('\n        <input class=\"form-control\" id=\"%s\" type=\"datetime-local\"\n            pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2} ([01][0-9]|2[0-3]):[0-5][0-9]\" placeholder=\"YYYY-MM-DD HH:MM\"\n            name=\"%s\" value=\"%s\" autocomplete=\"off\">\n    ', $dom_id, $name, htmlspecialchars($value ? $value->format('Y-m-d H:i') : '')), $dom_id);\n}\n\n/**\n * Rendert eine Liste von Checkboxen f\u00fcr ein Formular\n *\n * @param string $name     Die Namen der Checkboxen werden aus name_key gebildet\n * @param string $label    Die Beschriftung der Liste\n * @param array  $items    Array mit den einzelnen Checkboxen\n * @param array  $selected Array mit den Keys, die ausgew\u00e4hlt sind\n * @return string\n */\nfunction form_checkboxes($name, $label, $items, $selected)\n{\n    $html = form_element($label, '');\n    foreach ($items as $key => $item) {\n        $html .= form_checkbox($name . '_' . $key, $item, in_array($key, $selected));\n    }\n    return $html;\n}\n\n/**\n * Rendert eine Checkbox\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @param string $html_id\n * @return string\n */\nfunction form_checkbox($name, $label, $selected, $value = 'checked', $html_id = null)\n{\n    if (is_null($html_id)) {\n        $html_id = $name;\n    }\n\n    return '<div class=\"form-check\">'\n        . '<input class=\"form-check-input\" type=\"checkbox\" id=\"' . $html_id . '\" '\n        . 'name=\"' . htmlspecialchars($name) . '\" value=\"' . $value . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' /><label class=\"form-check-label\" for=\"' . $html_id . '\">'\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Renders a radio button\n *\n * @param string $name\n * @param string $label\n * @param string $selected\n * @param string $value\n * @return string\n */\nfunction form_radio($name, $label, $selected, $value)\n{\n    $value = htmlspecialchars((string) $value);\n    $id = preg_replace('/\\s/', '-', $name . '_' . $value);\n\n    return '<div class=\"form-check\">'\n        . '<input class=\"form-check-input\" type=\"radio\" id=\"' . $id . '\" name=\"' . $name . '\" value=\"' . $value . '\" '\n        . ($selected ? ' checked=\"checked\"' : '') . ' />'\n        . '<label class=\"form-check-label\" for=\"' . $id . '\">'\n        . $label\n        . '</label></div>';\n}\n\n/**\n * Rendert einen Infotext in das Formular\n *\n * @param string $label\n * @param string $text\n * @return string\n */\nfunction form_info($label, $text = '')\n{\n    if ($label == '') {\n        return '<span class=\"help-block\">' . icon('info-circle') . $text . '</span>';\n    }\n    if ($text == '') {\n        return '<h4>' . $label . '</h4>';\n    }\n    return form_element($label, '<p class=\"form-control-static\">' . $text . '</p>');\n}\n\n/**\n * Rendert den Absenden-Button eines Formulars\n *\n * @param string $name\n * @param string $label\n * @param string $class\n * @param bool   $wrapForm\n * @param string $buttonType\n * @return string\n */\nfunction form_submit($name, $label, $class = '', $wrapForm = true, $buttonType = 'primary')\n{\n    $button = '<button class=\"btn btn-' . $buttonType . ($class ? ' ' . $class : '') . '\" type=\"submit\" name=\"' . $name . '\">'\n        . $label\n        . '</button>';\n\n    if (!$wrapForm) {\n        return $button;\n    }\n\n    return form_element(\n        null,\n        $button\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string      $name\n * @param string      $label\n * @param string      $value\n * @param bool        $disabled\n * @param int|null    $maxlength\n * @param string|null $autocomplete\n * @param string|null $class\n * @param array       $data_attributes\n * @return string\n */\nfunction form_text($name, $label, $value, $disabled = false, $maxlength = null, $autocomplete = null, $class = '', $data_attributes = [])\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    $maxlength = $maxlength ? ' maxlength=' . (int) $maxlength : '';\n    $autocomplete = $autocomplete ? ' autocomplete=\"' . $autocomplete . '\"' : '';\n    $attr = '';\n    foreach ($data_attributes as $attr_key => $attr_value) {\n        $attr .= ' data-' . $attr_key . '=\"' . $attr_value . '\"';\n    }\n\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"text\" name=\"' . $name\n        . '\" value=\"' . htmlspecialchars((string) $value) . '\"' . $maxlength . $disabled . $autocomplete . $attr . '/>',\n        'form_' . $name,\n        $class\n    );\n}\n\n/**\n * Rendert ein Formular-Emailfeld\n *\n * @param string      $name\n * @param string      $label\n * @param string      $value\n * @param bool        $disabled\n * @param string|null $autocomplete\n * @param int|null    $maxlength\n *\n * @return string\n */\nfunction form_email($name, $label, $value, $disabled = false, $autocomplete = null, $maxlength = null)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    $autocomplete = $autocomplete ? ' autocomplete=\"' . $autocomplete . '\"' : '';\n    $maxlength = $maxlength ? ' maxlength=' . (int) $maxlength : '';\n    return form_element(\n        $label,\n        '<input class=\"form-control\" id=\"form_' . $name . '\" type=\"email\" name=\"' . $name . '\" value=\"'\n        . htmlspecialchars((string) $value) . '\" ' . $disabled . $autocomplete . $maxlength . '/>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Passwortfeld\n *\n * @param string $name\n * @param string $label\n * @param string $autocomplete\n * @param bool   $disabled\n * @return string\n */\nfunction form_password($name, $label, $autocomplete, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        sprintf(\n            '<input class=\"form-control\" id=\"form_%1$s\" type=\"password\" name=\"%1$s\" minlength=\"%2$s\" value=\"\" autocomplete=\"%3$s\" %4$s>',\n            $name,\n            config('min_password_length'),\n            $autocomplete,\n            $disabled\n        ),\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Textfeld\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @param bool   $disabled\n * @return string\n */\nfunction form_textarea($name, $label, $value, $disabled = false)\n{\n    $disabled = $disabled ? ' disabled=\"disabled\"' : '';\n    return form_element(\n        $label,\n        '<textarea rows=\"5\" class=\"form-control\" id=\"form_' . $name . '\" name=\"'\n        . $name . '\" ' . $disabled . '>' . htmlspecialchars((string) $value) . '</textarea>',\n        'form_' . $name\n    );\n}\n\n/**\n * Rendert ein Formular-Auswahlfeld\n *\n * @param string   $name\n * @param string   $label\n * @param string[] $values\n * @param string   $selected\n * @param string   $selectText\n * @param string   $class\n * @return string\n */\nfunction form_select($name, $label, $values, $selected, $selectText = '', $class = '')\n{\n    return form_element(\n        $label,\n        html_select_key('form_' . $name, $name, $values, $selected, $selectText),\n        'form_' . $name,\n        $class\n    );\n}\n\n/**\n * Rendert ein Formular-Element\n *\n * @param string $label\n * @param string $input\n * @param string $for\n * @param string $class\n * @return string\n */\nfunction form_element($label, $input, $for = '', $class = '')\n{\n    $class = $class ? ' ' . $class : '';\n\n    if (empty($label)) {\n        return '<div class=\"mb-3' . $class . '\">' . $input . '</div>';\n    }\n\n    return '<div class=\"mb-3' . $class . '\">'\n        . '<label class=\"form-label\" for=\"' . $for . '\">' . $label . '</label>'\n        . $input\n        . '</div>';\n}\n\n/**\n * Rendert ein Formular\n *\n * @param string[] $elements\n * @param string   $action\n * @param bool     $inline\n * @return string\n */\nfunction form($elements, $action = '', $inline = false, $btnGroup = false)\n{\n    return '<form action=\"' . $action . '\" enctype=\"multipart/form-data\" method=\"post\"'\n        . ($btnGroup ? ' class=\"btn-group\"' : '')\n        . ($inline ? ' style=\"float:left\"' : '') . '>'\n        . join($elements)\n        . form_csrf()\n        . '</form>';\n}\n\n/**\n * @return string\n */\nfunction form_csrf()\n{\n    return form_hidden('_token', session()->get('_token'));\n}\n\n/**\n * @param string   $name\n * @param string[] $options\n * @param string   $selected\n * @return string\n */\nfunction html_options($name, $options, $selected = '')\n{\n    $html = '';\n    foreach ($options as $value => $label) {\n        $html .= '<div class=\"form-check form-check-inline\">'\n            . '<input class=\"form-check-input\" type=\"radio\" id=\"' . $name . '_' . $value . '\" name=\"' . $name . '\"'\n            . ($value == $selected ? ' checked=\"checked\"' : '') . ' value=\"' . $value . '\" />'\n            . '<label class=\"form-check-label\" for=\"' . $name . '_' . $value . '\">' . $label . '</label>'\n            . '</div>';\n    }\n\n    return $html;\n}\n\n/**\n * @param string   $dom_id\n * @param string   $name\n * @param string[] $rows\n * @param string   $selected\n * @param string   $selectText\n * @return string\n */\nfunction html_select_key($dom_id, $name, $rows, $selected, $selectText = '')\n{\n    $html = '<select class=\"form-control\" id=\"' . $dom_id . '\" name=\"' . $name . '\">';\n    if (!empty($selectText)) {\n        $html .= '<option value=\"\">' . $selectText . '</option>';\n    }\n    foreach ($rows as $key => $row) {\n        if (($key == $selected) || ($row === $selected)) {\n            $html .= '<option value=\"' . htmlspecialchars($key) . '\" selected=\"selected\">'\n                . htmlspecialchars($row)\n                . '</option>';\n        } else {\n            $html .= '<option value=\"' . htmlspecialchars($key) . '\">'\n                . htmlspecialchars($row)\n                . '</option>';\n        }\n    }\n    $html .= '</select>';\n    return $html;\n}\n", "<?php\n\nuse Engelsystem\\Models\\Question;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\UserHintsRenderer;\n\n/**\n * @param string $page\n * @param array  $parameters get parameters\n * @return string\n */\nfunction page_link_to($page = '', $parameters = [])\n{\n    $page = str_replace('_', '-', $page);\n    return url($page, $parameters);\n}\n\n/**\n * Render the user hints\n *\n * @return string\n */\nfunction header_render_hints()\n{\n    $user = auth()->user();\n\n    if ($user) {\n        $hints_renderer = new UserHintsRenderer();\n\n        $hints_renderer->addHint(admin_new_questions());\n        $hints_renderer->addHint(user_angeltypes_unconfirmed_hint());\n        $hints_renderer->addHint(render_user_departure_date_hint());\n        $hints_renderer->addHint(user_driver_license_required_hint());\n        $hints_renderer->addHint(user_ifsg_certificate_required_hint());\n\n        // Important hints:\n        $hints_renderer->addHint(render_user_freeloader_hint(), true);\n        $hints_renderer->addHint(render_user_arrived_hint(), true);\n        $hints_renderer->addHint(render_user_tshirt_hint(), true);\n        $hints_renderer->addHint(render_user_dect_hint(), true);\n\n        return $hints_renderer->render();\n    }\n\n    return '';\n}\n\n/**\n * Returns the path of the current path with underscores instead of hyphens\n *\n * @return string\n */\nfunction current_page()\n{\n    return request()->query->get('p') ?: str_replace('-', '_', request()->path());\n}\n\n/**\n * @return string\n */\nfunction make_navigation()\n{\n    $page = current_page();\n    $menu = [];\n    $pages = [\n        'news'           => __('News'),\n        'meetings'       => [__('Meetings'), 'user_meetings'],\n        'user_shifts'    => __('Shifts'),\n        'angeltypes'     => __('Angeltypes'),\n        'questions'      => [__('Ask the Heaven'), 'question.add'],\n    ];\n\n    foreach ($pages as $menu_page => $options) {\n        if (!menu_is_allowed($menu_page, $options)) {\n            continue;\n        }\n\n        $title = ((array) $options)[0];\n        $menu[] = toolbar_item_link(\n            page_link_to($menu_page),\n            '',\n            $title,\n            $menu_page == $page\n        );\n    }\n\n    $menu = make_room_navigation($menu);\n\n    $admin_menu = [];\n    $admin_pages = [\n        // Examples:\n        // path              => name,\n        // path              => [name, permission],\n\n        'admin_arrive'       => 'Arrive angels',\n        'admin_active'       => 'Active angels',\n        'users'              => ['All Angels', 'admin_user'],\n        'admin_free'         => 'Free angels',\n        'admin/questions'    => ['Answer questions', 'question.edit'],\n        'shifttypes'         => 'Shifttypes',\n        'admin_shifts'       => 'Create shifts',\n        'admin/rooms'        => ['room.rooms', 'admin_rooms'],\n        'admin_groups'       => 'Grouprights',\n        'admin/schedule'     => ['schedule.import', 'schedule.import'],\n        'admin/logs'         => ['log.log', 'admin_log'],\n        'admin_event_config' => 'Event config',\n    ];\n\n    if (config('autoarrive')) {\n        unset($admin_pages['admin_arrive']);\n    }\n\n    foreach ($admin_pages as $menu_page => $options) {\n        if (!menu_is_allowed($menu_page, $options)) {\n            continue;\n        }\n\n        $title = ((array) $options)[0];\n        $admin_menu[] = toolbar_dropdown_item(\n            page_link_to($menu_page),\n            htmlspecialchars(__($title)),\n            $menu_page == $page\n        );\n    }\n\n    if (count($admin_menu) > 0) {\n        $menu[] = toolbar_dropdown(__('Admin'), $admin_menu);\n    }\n\n    return join(\"\\n\", $menu);\n}\n\n/**\n * @param string          $page\n * @param string|string[] $options\n *\n * @return bool\n */\nfunction menu_is_allowed(string $page, $options)\n{\n    $options = (array) $options;\n    $permissions = $page;\n\n    if (isset($options[1])) {\n        $permissions = $options[1];\n    }\n\n    return auth()->can($permissions);\n}\n\n/**\n * Adds room navigation to the given menu.\n *\n * @param string[] $menu Rendered menu\n * @return string[]\n */\nfunction make_room_navigation($menu)\n{\n    if (!auth()->can('view_rooms')) {\n        return $menu;\n    }\n\n    // Get a list of all rooms\n    $rooms = Room::orderBy('name')->get();\n    $room_menu = [];\n    if (auth()->can('admin_rooms')) {\n        $room_menu[] = toolbar_dropdown_item(page_link_to('admin/rooms'), __('Manage rooms'), false, 'list');\n    }\n    if (count($room_menu) > 0) {\n        $room_menu[] = toolbar_dropdown_item_divider();\n    }\n    foreach ($rooms as $room) {\n        $room_menu[] = toolbar_dropdown_item(room_link($room), $room->name, false, 'pin-map-fill');\n    }\n    if (count($room_menu) > 0) {\n        $menu[] = toolbar_dropdown(__('Rooms'), $room_menu);\n    }\n    return $menu;\n}\n\n/**\n * Renders language selection.\n *\n * @return array\n */\nfunction make_language_select()\n{\n    $request = app('request');\n    $activeLocale = session()->get('locale');\n\n    $items = [];\n    foreach (config('locales') as $locale => $name) {\n        $url = url($request->getPathInfo(), [...$request->getQueryParams(), 'set-locale' => $locale]);\n\n        $items[] = toolbar_dropdown_item(\n            htmlspecialchars($url),\n            $name,\n            $locale == $activeLocale\n        );\n    }\n    return $items;\n}\n\n/**\n * Renders a hint for new questions to answer.\n *\n * @return string|null\n */\nfunction admin_new_questions()\n{\n    if (!auth()->can('question.edit') || current_page() == 'admin/questions') {\n        return null;\n    }\n\n    $unanswered_questions = Question::unanswered()->count();\n    if (!$unanswered_questions) {\n        return null;\n    }\n\n    return '<a href=\"' . page_link_to('/admin/questions') . '\">'\n        . __('There are unanswered questions!')\n        . '</a>';\n}\n", "<?php\n\nuse Engelsystem\\Helpers\\Carbon;\nuse Engelsystem\\Http\\Exceptions\\HttpTemporaryRedirect;\nuse Engelsystem\\ValidationResult;\n\n/**\n * Provide page/request helper functions\n */\n\n/**\n * Parse a date from da day and a time textfield.\n *\n * @param string   $date_name     Name of the textfield containing the day (format Y-m-d)\n * @param string   $time_name     Name of the textfield containing the time (format H:i)\n * @param string[] $allowed_days  List of allowed days in format Y-m-d\n * @param int      $default_value Default value unix timestamp\n * @return int|null\n */\nfunction check_request_datetime($date_name, $time_name, $allowed_days, $default_value)\n{\n    $time = date('H:i', $default_value);\n    $day = date('Y-m-d', $default_value);\n    $request = request();\n\n    if ($request->has($time_name) && preg_match('#^\\d{1,2}:\\d\\d$#', trim($request->input($time_name)))) {\n        $time = trim($request->input($time_name));\n    }\n\n    if ($request->has($date_name) && in_array($request->input($date_name), $allowed_days)) {\n        $day = $request->input($date_name);\n    }\n\n    return parse_date('Y-m-d H:i', $day . ' ' . $time);\n}\n\n/**\n * Parse a date into unix timestamp\n *\n * @param string $pattern The date pattern (i.e. Y-m-d H:i)\n * @param string $value   The string to parse\n * @return int|null The parsed unix timestamp\n */\nfunction parse_date($pattern, $value)\n{\n    $datetime = DateTime::createFromFormat($pattern, trim($value));\n    if (!$datetime) {\n        return null;\n    }\n\n    return $datetime->getTimestamp();\n}\n\n/**\n * Leitet den Browser an die \u00fcbergebene URL weiter und h\u00e4lt das Script an.\n *\n * @param string $url\n */\nfunction throw_redirect($url)\n{\n    throw new HttpTemporaryRedirect($url);\n}\n\n/**\n * Returns an int[] from given request param name.\n *\n * @param string $name    Name of the request param\n * @param array  $default Default return value, if param is not set\n * @return array\n */\nfunction check_request_int_array($name, $default = [])\n{\n    $request = request();\n    if ($request->has($name) && is_array($request->input($name))) {\n        return array_filter($request->input($name), 'is_numeric');\n    }\n    return $default;\n}\n\n/**\n * Checks if given request item (name) can be parsed to a date.\n * If not parsable, given error message is put into msg() and null is returned.\n *\n * @param string $name          to be parsed into a date.\n * @param string $error_message the error message displayed if $input is not parsable\n * @param bool   $null_allowed  is a null value allowed?\n * @param bool   $time_allowed  is time allowed?\n * @return ValidationResult containing the parsed date\n */\nfunction check_request_date($name, $error_message = null, $null_allowed = false, $time_allowed = false)\n{\n    $request = request();\n    if (!$request->has($name)) {\n        return new ValidationResult($null_allowed, null);\n    }\n    return check_date($request->input($name), $error_message, $null_allowed, $time_allowed);\n}\n\n/**\n * Checks if given string can be parsed to a date.\n * If not parsable, given error message is put into msg() and null is returned.\n *\n * @param string $input         String to be parsed into a date.\n * @param string $error_message the error message displayed if $input is not parsable\n * @param bool   $null_allowed  is a null value allowed?\n * @param bool   $time_allowed  is time allowed?\n * @return ValidationResult containing the parsed date\n */\nfunction check_date($input, $error_message = null, $null_allowed = false, $time_allowed = false)\n{\n    $trimmed_input = trim((string) $input);\n\n    try {\n        if ($time_allowed) {\n            $time = Carbon::createFromDatetime($trimmed_input);\n        } else {\n            $time = Carbon::createFromFormat('Y-m-d', $trimmed_input);\n        }\n    } catch (InvalidArgumentException $e) {\n        $time = null;\n    }\n\n    if ($time) {\n        return new ValidationResult(true, $time);\n    }\n\n    if ($null_allowed) {\n        return new ValidationResult(true, null);\n    }\n\n    error($error_message);\n    return new ValidationResult(false, null);\n}\n\n/**\n * Returns REQUEST value filtered or default value (null) if not set.\n *\n * @param string $name\n * @param string|null $default_value\n * @return mixed|null\n */\nfunction strip_request_item($name, $default_value = null)\n{\n    $request = request();\n    if ($request->has($name)) {\n        return strip_item($request->input($name));\n    }\n    return $default_value;\n}\n\n/**\n * Testet, ob der angegebene REQUEST Wert ein Integer ist, bzw.\n * eine ID sein k\u00f6nnte.\n *\n * @param string $name\n * @return int|false\n */\nfunction test_request_int($name)\n{\n    $input = request()->input($name);\n    if (is_null($input)) {\n        return false;\n    }\n\n    return preg_match('/^\\d+$/', $input);\n}\n\n/**\n * Gibt den gefilterten REQUEST Wert mit Zeilenumbr\u00fcchen zur\u00fcck\n *\n * @param string $name\n * @param mixed  $default_value\n * @return mixed\n */\nfunction strip_request_item_nl($name, $default_value = null)\n{\n    $request = request();\n    if ($request->has($name)) {\n        // Only allow letters, symbols, punctuation, separators, numbers and newlines without html tags\n        return preg_replace(\n            \"/([^\\p{L}\\p{S}\\p{P}\\p{Z}\\p{N}+\\n]+)/ui\",\n            '',\n            strip_tags($request->input($name))\n        );\n    }\n    return $default_value;\n}\n\n/**\n * Entfernt unerw\u00fcnschte Zeichen\n *\n * @param string $item\n * @return string\n */\nfunction strip_item($item)\n{\n    // Only allow letters, symbols, punctuation, separators and numbers without html tags\n    return preg_replace('/([^\\p{L}\\p{S}\\p{P}\\p{Z}\\p{N}+]+)/ui', '', strip_tags($item));\n}\n\n/**\n * Validates an email address with support for IDN domain names.\n *\n * @param string $email\n * @return bool\n */\nfunction check_email($email)\n{\n    // Convert the domain part from idn to ascii\n    if (substr_count($email, '@') == 1) {\n        list($name, $domain) = explode('@', $email);\n        $domain = idn_to_ascii($domain, IDNA_DEFAULT, INTL_IDNA_VARIANT_UTS46);\n        $email = $name . '@' . $domain;\n    }\n    return (bool) filter_var($email, FILTER_VALIDATE_EMAIL);\n}\n", "<?php\n\nuse Illuminate\\Support\\Str;\n\n/**\n * Render a stat for dashborad (big number with label).\n * If no style given, style is danger if number > 0, and success if number == 0.\n *\n * @param string $label\n * @param string $number\n * @param string $style default, warning, danger or success. Optional.\n * @return string\n */\nfunction stats($label, $number, $style = null)\n{\n    if (empty($style)) {\n        if ($number > 0) {\n            $style = 'danger';\n        } else {\n            $style = 'success';\n        }\n    }\n    return div('col stats text-' . $style, [\n        $label,\n        div('number', [\n            $number,\n        ]),\n    ]);\n}\n\n/**\n * Renders tabs from the array. Array key is tab name, array value is tab content.\n *\n * @param array $tabs\n * @param int   $selected The selected tab, default 0\n * @return string HTML\n */\nfunction tabs($tabs, $selected = 0)\n{\n    $tab_header = [];\n    $tab_content = [];\n    foreach ($tabs as $header => $content) {\n        $active = false;\n        $id = $header;\n        $href = '#' . $id;\n        if (count($tab_header) == $selected) {\n            $active = true;\n        }\n        if (is_array($content)) {\n            $href = $content['href'];\n            $content = null;\n            $id = null;\n        }\n        $tab_header[] = '<li role=\"presentation\" class=\"nav-item\">\n                <a href=\"' . $href . '\" class=\"nav-link' . ($active ? ' active' : '') . '\" role=\"tab\"'\n            . ($id ? ' id=\"' . $id . '-tab\"' : '')\n            . ($id ? ' aria-controls=\"' . $id . '\" data-bs-target=\"#' . $id . '\" data-bs-toggle=\"tab\" role=\"tab\"' : '')\n            . ($id && $active ? ' aria-selected=\"true\"' : ' aria-selected=\"false\"')\n            . '>'\n            . $header . '</a></li>';\n        $tab_content[] = $content\n            ? '<div role=\"tabpanel\" class=\"tab-pane' . ($active ? ' show active' : '') . '\" id=\"' . $id . '\"'\n            . ' aria-labelledby=\"' . $id . '-tab\"'\n            . '>'\n            . $content\n            . '</div>'\n            : '';\n    }\n    return div('', [\n        '<ul class=\"nav nav-tabs mb-3\" role=\"tablist\">' . join($tab_header) . '</ul>',\n        '<div class=\"tab-content\">' . join($tab_content) . '</div>',\n    ]);\n}\n\n/**\n * Renders a bootstrap label with given content and class.\n *\n * @param string $content The text\n * @param string $class default, primary, info, success, warning, danger\n * @return string\n */\nfunction badge($content, $class = 'default')\n{\n    return '<span class=\"badge rounded-pill bg-' . $class . '\">' . $content . '</span>';\n}\n\n/**\n * @param int    $valuemin\n * @param int    $valuemax\n * @param int    $valuenow\n * @param string $class\n * @param string $content\n * @return string\n */\nfunction progress_bar($valuemin, $valuemax, $valuenow, $class = '', $content = '')\n{\n    return '<div class=\"progress\">'\n        . '<div class=\"progress-bar ' . $class . '\" role=\"progressbar\" '\n        . 'aria-valuenow=\"' . $valuenow . '\" aria-valuemin=\"' . $valuemin . '\" aria-valuemax=\"' . $valuemax . '\" '\n        . 'style=\"width: ' . floor(($valuenow - $valuemin) * 100 / ($valuemax - $valuemin)) . '%\"'\n        . '>'\n        . $content\n        . '</div>'\n        . '</div>';\n}\n\n/**\n * Render bootstrap icon\n *\n * @param string $icon_name\n * @param string $class\n * @return string\n */\nfunction icon(string $icon_name, string $class = ''): string\n{\n    return ' <span class=\"bi bi-' . $icon_name . ($class ? ' ' . $class : '') . '\"></span> ';\n}\n\n/**\n * Renders a tick or a cross by given boolean\n *\n * @param boolean $boolean\n * @return string\n */\nfunction icon_bool($boolean)\n{\n    return '<span class=\"text-' . ($boolean ? 'success' : 'danger') . '\">'\n        . icon($boolean ? 'check-lg' : 'x-lg')\n        . '</span>';\n}\n\n/**\n * @param string $class\n * @param array  $content\n * @param string $dom_id\n * @return string\n */\nfunction div($class, $content = [], $dom_id = '')\n{\n    if (is_array($content)) {\n        $content = join(\"\\n\", $content);\n    }\n    $dom_id = $dom_id != '' ? ' id=\"' . $dom_id . '\"' : '';\n    return '<div' . $dom_id . ' class=\"' . $class . '\">' . $content . '</div>';\n}\n\n/**\n * @param string $content\n * @param int    $number\n * @return string\n */\nfunction heading($content, $number = 1)\n{\n    return '<h' . $number . '>' . $content . '</h' . $number . '>';\n}\n\n/**\n * @param string[] $items\n * @return string\n */\nfunction toolbar_pills($items)\n{\n    return '<ul class=\"nav nav-pills\">' . join(\"\\n\", $items) . '</ul>';\n}\n\n/**\n * Render a link for a toolbar.\n *\n * @param string $href\n * @param string $icon\n * @param string $label\n * @param bool   $active\n * @return string\n */\nfunction toolbar_item_link($href, $icon, $label, $active = false)\n{\n    return '<li class=\"nav-item\">'\n        . '<a class=\"nav-link ' . ($active ? 'active\" aria-current=\"page\"' : '\"') . ' href=\"' . $href . '\">'\n        . ($icon != '' ? '<span class=\"bi bi-' . $icon . '\"></span> ' : '')\n        . htmlspecialchars($label)\n        . '</a>'\n        . '</li>';\n}\n\nfunction toolbar_dropdown_item(string $href, string $label, bool $active, string $icon = null): string\n{\n    return strtr(\n        '<li><a class=\"dropdown-item{active}\" {aria} href=\"{href}\">{icon} {label}</a></li>',\n        [\n            '{href}'   => $href,\n            '{icon}'   => $icon === null ? '' : '<i class=\"bi bi-' . $icon . '\"></i>',\n            '{label}'  => htmlspecialchars($label),\n            '{active}' => $active ? ' active' : '',\n            '{aria}' => $active ? ' aria-current=\"page\"' : '',\n        ]\n    );\n}\n\nfunction toolbar_dropdown_item_divider(): string\n{\n    return '<li><hr class=\"dropdown-divider\"></li>';\n}\n\n/**\n * @param string $label\n * @param array  $submenu\n * @param bool   $active\n * @return string\n */\nfunction toolbar_dropdown($label, $submenu, $active = false): string\n{\n    $template = <<<EOT\n<li class=\"nav-item dropdown\">\n    <a class=\"nav-link dropdown-toggle{class}\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n        {label}\n    </a>\n    <ul class=\"dropdown-menu\">\n        {submenu}\n    </ul>\n</li>\nEOT;\n\n    return strtr(\n        $template,\n        [\n            '{class}'   => $active ? ' active' : '',\n            '{label}'   => htmlspecialchars($label),\n            '{submenu}' => join(\"\\n\", $submenu),\n        ]\n    );\n}\n\n/**\n * Generiert HTML Code f\u00fcr eine \"Seite\".\n * F\u00fcgt dazu die \u00fcbergebenen Elemente zusammen.\n *\n * @param string[] $elements\n * @return string\n */\nfunction page($elements)\n{\n    return join($elements);\n}\n\n/**\n * Generiert HTML Code f\u00fcr eine \"Seite\" mit zentraler \u00dcberschrift\n * F\u00fcgt dazu die \u00fcbergebenen Elemente zusammen.\n *\n * @param string   $title\n * @param string[] $elements\n * @param bool     $container\n * @return string\n */\nfunction page_with_title($title, $elements, bool $container = false)\n{\n    if ($container) {\n        $html = '<div class=\"container\">';\n    } else {\n        $html = '<div class=\"col-md-12\">';\n    }\n    return $html . '<h1>' . $title . '</h1>' . join($elements) . '</div>';\n}\n\n/**\n * Renders a description based on the data arrays key and values as label an description.\n *\n * @param array $data\n * @return string\n */\nfunction description($data)\n{\n    $elements = [];\n    foreach ($data as $label => $description) {\n        if (!empty($label) && !empty($description)) {\n            $elements[] = '<dt class=\"col-sm-1\">' . $label . '</dt><dd class=\"col-sm-11\">' . $description . '</dd>';\n        }\n    }\n    return '<dl class=\"row\">' . join($elements) . '</dl>';\n}\n\n/**\n * Rendert eine Datentabelle\n *\n * @param array|string        $columns\n * @param array[]|ArrayAccess $rows_raw\n * @param bool                $data\n * @return string\n */\nfunction table($columns, $rows_raw, $data = true)\n{\n    // If only one column is given\n    if (!is_array($columns)) {\n        $rows = [];\n        foreach ($rows_raw as $row) {\n            $rows[] = [\n                'col' => $row,\n            ];\n        }\n        return render_table([\n            'col' => $columns,\n        ], $rows, $data);\n    }\n\n    return render_table($columns, $rows_raw, $data);\n}\n\n/**\n * Helper for rendering a html-table.\n * use table()\n *\n * @param string[] $columns\n * @param array[]  $rows\n * @param bool     $data\n * @return string\n */\nfunction render_table($columns, $rows, $data = true)\n{\n    if (count($rows) == 0) {\n        return info(__('No data found.'), true);\n    }\n\n    $html = '<table class=\"table table-striped' . ($data ? ' data' : '') . '\">';\n    $html .= '<thead><tr>';\n    foreach ($columns as $key => $column) {\n        $html .= '<th class=\"column_' . $key . '\">' . $column . '</th>';\n    }\n    $html .= '</tr></thead>';\n    $html .= '<tbody>';\n    foreach ($rows as $row) {\n        $html .= '<tr>';\n        foreach ($columns as $key => $column) {\n            $value = '&nbsp;';\n            if (isset($row[$key])) {\n                $value = $row[$key];\n            }\n            $html .= '<td class=\"column_' . $key . '\">' . $value . '</td>';\n        }\n        $html .= '</tr>';\n    }\n    $html .= '</tbody>';\n    $html .= '</table>';\n    return $html;\n}\n\n/**\n * Rendert einen Knopf\n *\n * @param string $href\n * @param string $label\n * @param string $class\n * @param string $id\n * @return string\n */\nfunction button($href, $label, $class = '', $id = '')\n{\n    if (!Str::contains(str_replace(['btn-sm', 'btn-xl'], '', $class), 'btn-')) {\n        $class = 'btn-secondary' . ($class ? ' ' . $class : '');\n    }\n\n    $idAttribute = $id ? 'id=\"' . $id . '\"' : '';\n\n    return '<a ' . $idAttribute . ' href=\"' . $href . '\" class=\"btn ' . $class . '\">' . $label . '</a>';\n}\n\n/**\n * Renders a button to select corresponding checkboxes\n *\n * @param string $name\n * @param string $label\n * @param string $value\n * @return string\n */\nfunction button_checkbox_selection($name, $label, $value)\n{\n    return '<button type=\"button\" class=\"btn btn-secondary d-print-none checkbox-selection\" '\n        . 'data-id=\"selection_' . $name . '\" data-value=\"' . $value . '\">' . $label . '</button>';\n}\n\n/**\n * Renders a button with an icon\n *\n * @param string $href\n * @param string $icon\n * @param string $class\n *\n * @return string\n */\nfunction button_icon($href, $icon, $class = '')\n{\n    return button($href, icon($icon), $class);\n}\n\n/**\n * Rendert einen Knopf, der zur Hilfe eines bestimmten Themas f\u00fchrt.\n *\n * @param string $topic documentation resource (like user/), is appended to documentation url.\n * @return string\n */\nfunction button_help($topic = '')\n{\n    return button(config('documentation_url') . $topic, icon('question-circle'), 'btn-sm');\n}\n\n/**\n * Rendert eine Toolbar mit Kn\u00f6pfen\n *\n * @param array $buttons\n * @return string\n */\nfunction buttons($buttons = [])\n{\n    return '<div class=\"mb-3\">' . table_buttons($buttons) . '</div>';\n}\n\n/**\n * @param array $buttons\n * @return string\n */\nfunction table_buttons($buttons = [], $additionalClass = '')\n{\n    return '<div class=\"btn-group ' . $additionalClass . '\" role=\"group\">' . join('', $buttons) . '</div>';\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\License;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilterRenderer;\nuse Illuminate\\Support\\Collection;\n\n/**\n * AngelTypes\n */\n\n/**\n * Renders the angeltypes name as link.\n *\n * @param AngelType $angeltype\n * @param bool      $plain\n * @return string\n */\nfunction AngelType_name_render(AngelType $angeltype, $plain = false)\n{\n    if ($plain) {\n        return sprintf('%s (%u)', $angeltype->name, $angeltype->id);\n    }\n\n    return '<a href=\"' . angeltype_link($angeltype->id) . '\">'\n        . ($angeltype->restricted ? icon('mortarboard-fill') : '') . htmlspecialchars($angeltype->name)\n        . '</a>';\n}\n\n/**\n * Render angeltype membership state\n *\n * @param AngelType $user_angeltype UserAngelType and AngelType\n * @return string\n */\nfunction AngelType_render_membership(AngelType $user_angeltype)\n{\n    if (!empty($user_angeltype->user_angel_type_id)) {\n        if ($user_angeltype->restricted) {\n            if (empty($user_angeltype->confirm_user_id)) {\n                return icon('mortarboard-fill') . __('Unconfirmed');\n            } elseif ($user_angeltype->supporter) {\n                return icon_bool(true) . __('Supporter');\n            }\n            return icon_bool(true) . __('Member');\n        } elseif ($user_angeltype->supporter) {\n            return icon_bool(true) . __('Supporter');\n        }\n        return icon_bool(true) . __('Member');\n    }\n    return icon_bool(false);\n}\n\n/**\n * @param AngelType $angeltype\n * @return string\n */\nfunction AngelType_delete_view(AngelType $angeltype)\n{\n    return page_with_title(sprintf(__('Delete angeltype %s'), htmlspecialchars($angeltype->name)), [\n        info(sprintf(__('Do you want to delete angeltype %s?'), $angeltype->name), true),\n        form([\n            buttons([\n                button(page_link_to('angeltypes'), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('trash') . __('delete'), 'btn-danger', false),\n            ]),\n        ]),\n    ], true);\n}\n\n/**\n * Render angeltype edit form.\n *\n * @param AngelType $angeltype The angeltype to edit\n * @param boolean   $supporter_mode Is the user a supporter of this angeltype?\n * @return string\n */\nfunction AngelType_edit_view(AngelType $angeltype, bool $supporter_mode)\n{\n    return page_with_title(sprintf(__('Edit %s'), htmlspecialchars((string) $angeltype->name)), [\n        buttons([\n            button(page_link_to('angeltypes'), icon('person-lines-fill') . __('Angeltypes'), 'back'),\n        ]),\n        msg(),\n        form([\n            $supporter_mode\n                ? form_info(__('Name'), htmlspecialchars($angeltype->name))\n                : form_text('name', __('Name'), $angeltype->name),\n            $supporter_mode\n                ? form_info(__('Requires introduction'), $angeltype->restricted ? __('Yes') : __('No'))\n                : form_checkbox('restricted', __('Requires introduction'), $angeltype->restricted),\n            form_info(\n                '',\n                __('Angel types which require introduction can only be used by an angel if enabled by a supporter (double opt-in).')\n            ),\n            $supporter_mode\n                ? form_info(__('No Self Sign Up allowed'), $angeltype->no_self_signup ? __('Yes') : __('No'))\n                : form_checkbox('no_self_signup', __('No Self Sign Up allowed'), $angeltype->no_self_signup),\n            $supporter_mode ?\n                form_info(\n                    __('Requires driver license'),\n                    $angeltype->requires_driver_license\n                        ? __('Yes')\n                        : __('No')\n                ) :\n                form_checkbox(\n                    'requires_driver_license',\n                    __('Requires driver license'),\n                    $angeltype->requires_driver_license\n                ),\n            $supporter_mode && config('ifsg_enabled') ?\n                form_info(\n                    __('angeltype.ifsg.required'),\n                    $angeltype->requires_ifsg_certificate\n                        ? __('Yes')\n                        : __('No')\n                ) :\n                form_checkbox(\n                    'requires_ifsg_certificate',\n                    __('angeltype.ifsg.required'),\n                    $angeltype->requires_ifsg_certificate\n                ),\n            $supporter_mode\n                ? form_info(__('Show on dashboard'), $angeltype->show_on_dashboard ? __('Yes') : __('No'))\n                : form_checkbox('show_on_dashboard', __('Show on dashboard'), $angeltype->show_on_dashboard),\n            $supporter_mode\n                ? form_info(__('Hide at Registration'), $angeltype->hide_register ? __('Yes') : __('No'))\n                : form_checkbox('hide_register', __('Hide at Registration'), $angeltype->hide_register),\n            form_textarea('description', __('Description'), $angeltype->description),\n            form_info('', __('Please use markdown for the description.')),\n            heading(__('Contact'), 3),\n            form_info(\n                '',\n                __('Primary contact person/desk for user questions.')\n            ),\n            form_text('contact_name', __('Name'), $angeltype->contact_name),\n            config('enable_dect') ? form_text('contact_dect', __('DECT'), $angeltype->contact_dect) : '',\n            form_text('contact_email', __('E-Mail'), $angeltype->contact_email),\n            form_submit('submit', __('Save')),\n        ]),\n    ]);\n}\n\n/**\n * Renders the buttons for the angeltype view.\n *\n * @param AngelType          $angeltype\n * @param UserAngelType|null $user_angeltype\n * @param bool               $admin_angeltypes\n * @param bool               $supporter\n * @param License            $user_driver_license\n * @param User|null          $user\n * @return string\n */\nfunction AngelType_view_buttons(\n    AngelType $angeltype,\n    ?UserAngelType $user_angeltype,\n    $admin_angeltypes,\n    $supporter,\n    $user_driver_license,\n    $user\n) {\n    $buttons = [\n        button(page_link_to('angeltypes'), icon('person-lines-fill') . __('Angeltypes'), 'back'),\n    ];\n\n    if ($angeltype->requires_driver_license) {\n        $buttons[] = button(\n            user_driver_license_edit_link($user),\n            icon('person-vcard') . __('my driving license')\n        );\n    }\n    if (config('isfg_enabled') && $angeltype->requires_ifsg_certificate) {\n        $buttons[] = button(\n            url('/settings/certificates'),\n            icon('card-checklist') . __('angeltype.ifsg.own')\n        );\n    }\n\n    if (is_null($user_angeltype)) {\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype->id]),\n            icon('box-arrow-in-right') . __('join'),\n            'add'\n        );\n    } else {\n        if ($angeltype->requires_driver_license && !$user_driver_license->wantsToDrive()) {\n            error(__('This angeltype requires a driver license. Please enter your driver license information!'));\n        }\n\n        if (\n            config('ifsg_enabled') && $angeltype->requires_ifsg_certificate && !(\n            $user->license->ifsg_certificate_light || $user->license->ifsg_certificate\n            )\n        ) {\n            error(__('angeltype.ifsg.required.info'));\n        }\n\n        if ($angeltype->restricted && !$user_angeltype->confirm_user_id) {\n            error(sprintf(\n                __('You are unconfirmed for this angeltype. Please go to the introduction for %s to get confirmed.'),\n                $angeltype->name\n            ));\n        }\n        $buttons[] = button(\n            page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype->id]),\n            icon('box-arrow-right') . __('leave')\n        );\n    }\n\n    if ($admin_angeltypes || $supporter) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'edit', 'angeltype_id' => $angeltype->id]),\n            icon('pencil') . __('edit')\n        );\n    }\n    if ($admin_angeltypes) {\n        $buttons[] = button(\n            page_link_to('angeltypes', ['action' => 'delete', 'angeltype_id' => $angeltype->id]),\n            icon('trash') . __('delete')\n        );\n    }\n\n    return buttons($buttons);\n}\n\n/**\n * Renders and sorts the members of an angeltype into supporters, members and unconfirmed members.\n *\n * @param AngelType $angeltype\n * @param User[]    $members\n * @param bool      $admin_user_angeltypes\n * @param bool      $admin_angeltypes\n * @return array [supporters, members, unconfirmed members]\n */\nfunction AngelType_view_members(AngelType $angeltype, $members, $admin_user_angeltypes, $admin_angeltypes)\n{\n    $supporters = [];\n    $members_confirmed = [];\n    $members_unconfirmed = [];\n    foreach ($members as $member) {\n        $member->name = User_Nick_render($member) . User_Pronoun_render($member);\n        if (config('enable_dect')) {\n            $member['dect'] = htmlspecialchars((string) $member->contact->dect);\n        }\n        if ($angeltype->requires_driver_license) {\n            $member['wants_to_drive'] = icon_bool($member->license->wantsToDrive());\n            $member['has_car'] = icon_bool($member->license->has_car);\n            $member['has_license_car'] = icon_bool($member->license->drive_car);\n            $member['has_license_3_5t_transporter'] = icon_bool($member->license->drive_3_5t);\n            $member['has_license_7_5t_truck'] = icon_bool($member->license->drive_7_5t);\n            $member['has_license_12t_truck'] = icon_bool($member->license->drive_12t);\n            $member['has_license_forklift'] = icon_bool($member->license->drive_forklift);\n        }\n        if ($angeltype->requires_ifsg_certificate && config('ifsg_enabled')) {\n            $member['ifsg_certificate'] = icon_bool($member->license->ifsg_certificate);\n            if (config('ifsg_light_enabled')) {\n                $member['ifsg_certificate_light'] = icon_bool($member->license->ifsg_certificate_light);\n            }\n        }\n\n        if ($angeltype->restricted && empty($member->pivot->confirm_user_id)) {\n            $member['actions'] = table_buttons([\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'confirm', 'user_angeltype_id' => $member->pivot->id]\n                    ),\n                    __('confirm'),\n                    'btn-sm'\n                ),\n                button(\n                    page_link_to(\n                        'user_angeltypes',\n                        ['action' => 'delete', 'user_angeltype_id' => $member->pivot->id]\n                    ),\n                    __('deny'),\n                    'btn-sm'\n                ),\n            ]);\n            $members_unconfirmed[] = $member;\n        } elseif ($member->pivot->supporter) {\n            if ($admin_angeltypes) {\n                $member['actions'] = table_buttons([\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'update',\n                            'user_angeltype_id' => $member->pivot->id,\n                            'supporter'         => 0,\n                        ]),\n                        icon('person-fill-down') . __('Remove supporter rights'),\n                        'btn-sm'\n                    ),\n                ]);\n            } else {\n                $member['actions'] = '';\n            }\n            $supporters[] = $member;\n        } else {\n            if ($admin_user_angeltypes) {\n                $member['actions'] = table_buttons([\n                    $admin_angeltypes ?\n                        button(\n                            page_link_to('user_angeltypes', [\n                                'action'            => 'update',\n                                'user_angeltype_id' => $member->pivot->id,\n                                'supporter'         => 1,\n                            ]),\n                            icon('person-fill-up') . __('Add supporter rights'),\n                            'btn-sm'\n                        ) :\n                        '',\n                    button(\n                        page_link_to('user_angeltypes', [\n                            'action'            => 'delete',\n                            'user_angeltype_id' => $member->pivot->id,\n                        ]),\n                        icon('trash') . __('remove'),\n                        'btn-sm'\n                    ),\n                ]);\n            }\n            $members_confirmed[] = $member;\n        }\n    }\n\n    return [\n        $supporters,\n        $members_confirmed,\n        $members_unconfirmed,\n    ];\n}\n\n/**\n * Creates the needed member table headers according to given rights and settings from the angeltype.\n *\n * @param AngelType $angeltype\n * @param bool      $supporter\n * @param bool      $admin_angeltypes\n * @return array\n */\nfunction AngelType_view_table_headers(AngelType $angeltype, $supporter, $admin_angeltypes)\n{\n    $headers = [\n        'name'    => __('Nick'),\n    ];\n\n    if (config('enable_dect')) {\n        $headers['dect'] = __('DECT');\n    }\n\n    if ($angeltype->requires_driver_license && ($supporter || $admin_angeltypes)) {\n        $headers = array_merge($headers, [\n            'wants_to_drive'               => __('Driver'),\n            'has_car'                      => __('Has car'),\n            'has_license_car'              => __('Car'),\n            'has_license_3_5t_transporter' => __('3,5t Transporter'),\n            'has_license_7_5t_truck'       => __('7,5t Truck'),\n            'has_license_12t_truck'        => __('12t Truck'),\n            'has_license_forklift'         => __('Forklift'),\n        ]);\n    }\n\n    if (config('ifsg_enabled') && $angeltype->requires_ifsg_certificate && ($supporter || $admin_angeltypes)) {\n        if (config('ifsg_light_enabled')) {\n            $headers['ifsg_certificate_light'] = __('ifsg.certificate_light');\n        }\n        $headers['ifsg_certificate'] = __('ifsg.certificate');\n    }\n\n    $headers['actions'] = '';\n\n    return $headers;\n}\n\n/**\n * Render an angeltype page containing the member lists.\n *\n * @param AngelType             $angeltype\n * @param User[]                $members\n * @param UserAngelType|null    $user_angeltype\n * @param bool                  $admin_user_angeltypes\n * @param bool                  $admin_angeltypes\n * @param bool                  $supporter\n * @param License               $user_driver_license\n * @param User                  $user\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @param int                   $tab The selected tab\n * @return string\n */\nfunction AngelType_view(\n    AngelType $angeltype,\n    $members,\n    ?UserAngelType $user_angeltype,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter,\n    $user_driver_license,\n    $user,\n    ShiftsFilterRenderer $shiftsFilterRenderer,\n    ShiftCalendarRenderer $shiftCalendarRenderer,\n    $tab\n) {\n    return page_with_title(sprintf(__('Team %s'), htmlspecialchars($angeltype->name)), [\n        AngelType_view_buttons($angeltype, $user_angeltype, $admin_angeltypes, $supporter, $user_driver_license, $user),\n        msg(),\n        tabs([\n            __('Info')   => AngelType_view_info(\n                $angeltype,\n                $members,\n                $admin_user_angeltypes,\n                $admin_angeltypes,\n                $supporter\n            ),\n            __('Shifts') => AngelType_view_shifts(\n                $angeltype,\n                $shiftsFilterRenderer,\n                $shiftCalendarRenderer\n            ),\n        ], $tab),\n    ], true);\n}\n\n/**\n * @param AngelType             $angeltype\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @return string HTML\n */\nfunction AngelType_view_shifts(AngelType $angeltype, $shiftsFilterRenderer, $shiftCalendarRenderer)\n{\n    $shifts = $shiftsFilterRenderer->render(page_link_to('angeltypes', [\n        'action'       => 'view',\n        'angeltype_id' => $angeltype->id,\n    ]), ['type' => $angeltype->id]);\n    $shifts .= $shiftCalendarRenderer->render();\n\n    return div('first', $shifts);\n}\n\n/**\n * @param AngelType $angeltype\n * @param User[]    $members\n * @param bool      $admin_user_angeltypes\n * @param bool      $admin_angeltypes\n * @param bool      $supporter\n * @return string HTML\n */\nfunction AngelType_view_info(\n    AngelType $angeltype,\n    $members,\n    $admin_user_angeltypes,\n    $admin_angeltypes,\n    $supporter\n) {\n    $info = [];\n    if ($angeltype->hasContactInfo()) {\n        $info[] = AngelTypes_render_contact_info($angeltype);\n    }\n\n    $info[] = '<h3>' . __('Description') . '</h3>';\n    $parsedown = new Parsedown();\n    if ($angeltype->description != '') {\n        $info[] = $parsedown->parse(htmlspecialchars($angeltype->description));\n    }\n\n    list($supporters, $members_confirmed, $members_unconfirmed) = AngelType_view_members(\n        $angeltype,\n        $members,\n        $admin_user_angeltypes,\n        $admin_angeltypes\n    );\n    $table_headers = AngelType_view_table_headers($angeltype, $supporter, $admin_angeltypes);\n\n    if (count($supporters) > 0) {\n        $info[] = '<h3>' . __('Supporters') . '</h3>';\n        $info[] = table($table_headers, $supporters);\n    }\n\n    if (count($members_confirmed) > 0) {\n        $members_confirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_confirmed),\n            'actions' => '',\n        ];\n    }\n\n    if (count($members_unconfirmed) > 0) {\n        $members_unconfirmed[] = [\n            'name'    => __('Sum'),\n            'dect'    => count($members_unconfirmed),\n            'actions' => '',\n        ];\n    }\n\n    $info[] = '<h3>' . __('Members') . '</h3>';\n    if ($admin_user_angeltypes) {\n        $info[] = buttons([\n            button(\n                page_link_to(\n                    'user_angeltypes',\n                    ['action' => 'add', 'angeltype_id' => $angeltype->id]\n                ),\n                __('Add'),\n                'add'\n            ),\n        ]);\n    }\n    $info[] = table($table_headers, $members_confirmed);\n\n    if ($admin_user_angeltypes && $angeltype->restricted && count($members_unconfirmed) > 0) {\n        $info[] = '<h3>' . __('Unconfirmed') . '</h3>';\n        $info[] = buttons([\n            button(\n                page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype->id]),\n                icon('check-lg') . __('confirm all')\n            ),\n            button(\n                page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype->id]),\n                icon('trash') . __('deny all')\n            ),\n        ]);\n        $info[] = table($table_headers, $members_unconfirmed);\n    }\n\n    return join($info);\n}\n\n/**\n * Renders the contact info\n *\n * @param AngelType $angeltype\n * @return string HTML\n */\nfunction AngelTypes_render_contact_info(AngelType $angeltype)\n{\n    $info = [\n        __('Name')  => [\n            htmlspecialchars($angeltype->contact_name),\n            htmlspecialchars($angeltype->contact_name),\n        ],\n        __('DECT')  => config('enable_dect')\n            ? [\n                sprintf('<a href=\"tel:%s\">%1$s</a>', htmlspecialchars($angeltype->contact_dect)),\n                htmlspecialchars($angeltype->contact_dect),\n            ]\n            : null,\n        __('E-Mail') => [\n            sprintf('<a href=\"mailto:%s\">%1$s</a>', htmlspecialchars($angeltype->contact_email)),\n            htmlspecialchars($angeltype->contact_email),\n        ],\n    ];\n    $contactInfo = [];\n    foreach ($info as $name => $data) {\n        if (!empty($data[1])) {\n            $contactInfo[$name] = $data[0];\n        }\n    }\n\n    return heading(__('Contact'), 3) . description($contactInfo);\n}\n\n/**\n * Display the list of angeltypes.\n *\n * @param AngelType[]|Collection $angeltypes\n * @param bool                   $admin_angeltypes\n * @return string\n */\nfunction AngelTypes_list_view($angeltypes, bool $admin_angeltypes)\n{\n    return page_with_title(angeltypes_title(), [\n        msg(),\n        buttons([\n            $admin_angeltypes\n                ? button(page_link_to('angeltypes', ['action' => 'edit']), __('New angeltype'), 'add')\n                : '',\n            button(url('/angeltypes/about'), __('angeltypes.about')),\n        ]),\n        table([\n            'name'                   => __('Name'),\n            'is_restricted'          => icon('mortarboard-fill') . __('Requires introduction'),\n            'no_self_signup_allowed' => icon('pencil-square') . __('Self Sign Up Allowed'),\n            'membership'             => __('Membership'),\n            'actions'                => '',\n        ], $angeltypes),\n    ], true);\n}\n", "<?php\n\nuse Engelsystem\\Helpers\\DayOfEvent;\nuse Engelsystem\\Models\\News;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Public dashboard (formerly known as angel news hub)\n *\n * @param array             $stats\n * @param array[]           $free_shifts\n * @param News[]|Collection $important_news\n * @return string\n */\nfunction public_dashboard_view($stats, $free_shifts, $important_news)\n{\n    $needed_angels = '';\n    $news = '';\n    if ($important_news->isNotEmpty()) {\n        $first_news = $important_news->first();\n        $news = div('alert alert-warning text-center', [\n            '<a href=\"' . url('/news/' . $first_news->id) . '\">'\n            . '<strong>' . htmlspecialchars($first_news->title) . '</strong>'\n            . '</a>',\n        ]);\n    }\n\n    if (count($free_shifts) > 0) {\n        $shift_panels = [\n            '<div class=\"row\">',\n        ];\n        foreach ($free_shifts as $i => $shift) {\n            $shift_panels[] = public_dashboard_shift_render($shift);\n            if ($i % 4 == 3) {\n                $shift_panels[] = '</div><div class=\"row\">';\n            }\n        }\n        $shift_panels[] = '</div>';\n        $needed_angels = div('first', [\n            div('col-md-12', [\n                heading(__('Needed angels:')),\n            ]),\n            div('container-fluid', [\n                join($shift_panels),\n            ]),\n        ]);\n    }\n\n    $stats =  [\n        stats(__('Angels needed in the next 3 hrs'), $stats['needed-3-hours']),\n        stats(__('Angels needed for nightshifts'), $stats['needed-night']),\n        stats(__('Angels currently working'), $stats['angels-working'], 'default'),\n        stats(__('Hours to be worked'), $stats['hours-to-work'], 'default'),\n    ];\n\n    $dayOfEvent = DayOfEvent::get();\n\n    if (config('enable_show_day_of_event') && $dayOfEvent !== null) {\n        $stats[] = stats(__('dashboard.day'), $dayOfEvent, 'default');\n    }\n\n    $isFiltered = request()->get('filtered');\n    $filter = collect(session()->get('shifts-filter'))->only(['rooms', 'types'])->toArray();\n    return page([\n        div('wrapper', [\n            div('public-dashboard', [\n                div('first row', $stats, 'statistics'),\n                $news,\n                $needed_angels,\n            ], 'public-dashboard'),\n        ]),\n        div('first col-md-12 text-center', [buttons([\n            button(\n                '#',\n                icon('fullscreen') . __('Fullscreen'),\n                '',\n                'dashboard-fullscreen'\n            ),\n            auth()->user() ? button(\n                public_dashboard_link($isFiltered ? [] : ['filtered' => 1] + $filter),\n                icon('filter') . ($isFiltered ? __('All') : __('Filtered'))\n            ) : '',\n        ])], 'fullscreen-button'),\n    ]);\n}\n\n/**\n * Renders a single shift panel for a dashboard shift with needed angels\n *\n * @param array $shift\n * @return string\n */\nfunction public_dashboard_shift_render($shift)\n{\n    $panel_body = icon('clock-history') . $shift['start'] . ' - ' . $shift['end'];\n    $panel_body .= ' (' . $shift['duration'] . '&nbsp;h)';\n\n    $panel_body .= '<br>' . icon('list-task') . htmlspecialchars($shift['shifttype_name']);\n    if (!empty($shift['title'])) {\n        $panel_body .= ' (' . htmlspecialchars($shift['title']) . ')';\n    }\n\n    $panel_body .= '<br>' . icon('pin-map-fill') . htmlspecialchars($shift['room_name']);\n\n    foreach ($shift['needed_angels'] as $needed_angels) {\n        $panel_body .= '<br>' . icon('person')\n            . '<span class=\"text-' . $shift['style'] . '\">'\n            . $needed_angels['need'] . ' &times; ' . htmlspecialchars($needed_angels['angeltype_name'])\n            . '</span>';\n    }\n\n    $type = 'bg-dark';\n    if (theme_type() == 'light') {\n        $type = 'bg-light';\n    }\n\n    return div('col-md-3 mb-3', [\n        div('dashboard-card card border-' . $shift['style'] . ' ' . $type, [\n            div('card-body', [\n                '<a class=\"card-link\" href=\"' . shift_link($shift) . '\"></a>',\n                $panel_body,\n            ]),\n        ]),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\ShiftCalendarRenderer;\nuse Engelsystem\\ShiftsFilterRenderer;\n\n/**\n *\n * @param Room                  $room\n * @param ShiftsFilterRenderer  $shiftsFilterRenderer\n * @param ShiftCalendarRenderer $shiftCalendarRenderer\n * @return string\n */\nfunction Room_view(Room $room, ShiftsFilterRenderer $shiftsFilterRenderer, ShiftCalendarRenderer $shiftCalendarRenderer)\n{\n    $user = auth()->user();\n\n    $assignNotice = '';\n    if (config('signup_requires_arrival') && !$user->state->arrived) {\n        $assignNotice = info(render_user_arrived_hint(), true);\n    }\n\n    $description = '';\n    if ($room->description) {\n        $description = '<h3>' . __('Description') . '</h3>';\n        $parsedown = new Parsedown();\n        $description .= $parsedown->parse(htmlspecialchars($room->description));\n    }\n\n    $dect = '';\n    if (config('enable_dect') && $room->dect) {\n        $dect = heading(__('Contact'), 3)\n            . description([__('DECT') => sprintf('<a href=\"tel:%s\">%1$s</a>', htmlspecialchars($room->dect))]);\n    }\n\n    $tabs = [];\n    if ($room->map_url) {\n        $tabs[__('Map')] = sprintf(\n            '<div class=\"map\">'\n            . '<iframe style=\"width: 100%%; min-height: 400px; border: 0 none;\" src=\"%s\"></iframe>'\n            . '</div>',\n            htmlspecialchars($room->map_url)\n        );\n    }\n\n    $tabs[__('Shifts')] = div('first', [\n        $shiftsFilterRenderer->render(page_link_to('rooms', [\n            'action'  => 'view',\n            'room_id' => $room->id,\n        ]), ['rooms' => [$room->id]]),\n        $shiftCalendarRenderer->render(),\n    ]);\n\n    $selected_tab = 0;\n    $request = request();\n    if ($request->has('shifts_filter_day')) {\n        $selected_tab = count($tabs) - 1;\n    }\n\n    return page_with_title(icon('pin-map-fill') . htmlspecialchars($room->name), [\n        $assignNotice,\n        auth()->can('admin_rooms') ? buttons([\n            button(\n                page_link_to('admin/rooms/edit/' . $room->id),\n                icon('pencil') . __('edit')\n            ),\n        ]) : '',\n        $dect,\n        $description,\n        tabs($tabs, $selected_tab),\n    ], true);\n}\n\n/**\n *\n * @param Room $room\n * @return string\n */\nfunction Room_name_render(Room $room)\n{\n    if (auth()->can('view_rooms')) {\n        return '<a href=\"' . room_link($room) . '\">' . icon('pin-map-fill') . htmlspecialchars($room->name) . '</a>';\n    }\n\n    return icon('pin-map-fill') . htmlspecialchars($room->name);\n}\n", "<?php\n\nnamespace Engelsystem;\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\Shifts\\ShiftSignupStatus;\nuse Engelsystem\\Models\\User\\User;\nuse Illuminate\\Support\\Collection;\n\nuse function theme_type;\n\n/**\n * Renders a single shift for the shift calendar\n */\nclass ShiftCalendarShiftRenderer\n{\n    /**\n     * Renders a shift\n     *\n     * @param Shift                   $shift The shift to render\n     * @param array[]                 $needed_angeltypes\n     * @param ShiftEntry[]|Collection $shift_entries\n     * @param User                    $user The user who is viewing the shift calendar\n     * @return array\n     */\n    public function render(Shift $shift, $needed_angeltypes, $shift_entries, $user)\n    {\n        $info_text = '';\n        if ($shift->title != '') {\n            $info_text = icon('info-circle') . htmlspecialchars($shift->title) . '<br>';\n        }\n        list($shift_signup_state, $shifts_row) = $this->renderShiftNeededAngeltypes(\n            $shift,\n            $needed_angeltypes,\n            $shift_entries,\n            $user\n        );\n\n        $class = $this->classForSignupState($shift_signup_state);\n\n        $blocks = ceil(($shift->end->timestamp - $shift->start->timestamp) / ShiftCalendarRenderer::SECONDS_PER_ROW);\n        $blocks = max(1, $blocks);\n\n        $room = $shift->room;\n\n        return [\n            $blocks,\n            div(\n                'shift-card\" style=\"height: '\n                . ($blocks * ShiftCalendarRenderer::BLOCK_HEIGHT - ShiftCalendarRenderer::MARGIN)\n                . 'px;',\n                div(\n                    'shift card bg-' . $class,\n                    [\n                        $this->renderShiftHead($shift, $class, $shift_signup_state->getFreeEntries()),\n                        div('card-body ' . $this->classBg(), [\n                            $info_text,\n                            Room_name_render($room),\n                        ]),\n                        $shifts_row,\n                    ]\n                )\n            ),\n        ];\n    }\n\n    /**\n     * @param ShiftSignupState $shiftSignupState\n     * @return string\n     */\n    private function classForSignupState(ShiftSignupState $shiftSignupState)\n    {\n        return match ($shiftSignupState->getState()) {\n            ShiftSignupStatus::ADMIN, ShiftSignupStatus::OCCUPIED => 'success',\n            ShiftSignupStatus::SIGNED_UP => 'primary',\n            ShiftSignupStatus::NOT_ARRIVED, ShiftSignupStatus::NOT_YET, ShiftSignupStatus::SHIFT_ENDED => 'secondary',\n            ShiftSignupStatus::ANGELTYPE, ShiftSignupStatus::COLLIDES => 'warning',\n            ShiftSignupStatus::FREE => 'danger',\n            default => 'light',\n        };\n    }\n\n    /**\n     * @param Shift                   $shift\n     * @param array[]                 $needed_angeltypes\n     * @param ShiftEntry[]|Collection $shift_entries\n     * @param User                    $user\n     * @return array\n     */\n    private function renderShiftNeededAngeltypes(Shift $shift, $needed_angeltypes, $shift_entries, $user)\n    {\n        $shift_entries_filtered = [];\n        foreach ($needed_angeltypes as $needed_angeltype) {\n            $shift_entries_filtered[$needed_angeltype['id']] = [];\n        }\n        foreach ($shift_entries as $shift_entry) {\n            $shift_entries_filtered[$shift_entry->angel_type_id][] = $shift_entry;\n        }\n\n        $html = '';\n        /** @var ShiftSignupState $shift_signup_state */\n        $shift_signup_state = null;\n        foreach ($needed_angeltypes as $angeltype) {\n            if ($angeltype['count'] > 0 || count($shift_entries_filtered[$angeltype['id']]) > 0) {\n                list($angeltype_signup_state, $angeltype_html) = $this->renderShiftNeededAngeltype(\n                    $shift,\n                    $shift_entries_filtered[$angeltype['id']],\n                    $angeltype,\n                    $user\n                );\n                if (is_null($shift_signup_state)) {\n                    $shift_signup_state = $angeltype_signup_state;\n                } else {\n                    $shift_signup_state->combineWith($angeltype_signup_state);\n                }\n                $html .= $angeltype_html;\n            }\n        }\n        if (is_null($shift_signup_state)) {\n            $shift_signup_state = new ShiftSignupState(ShiftSignupStatus::SHIFT_ENDED, 0);\n        }\n\n        if (auth()->can('user_shifts_admin')) {\n            $html .= '<li class=\"list-group-item d-flex align-items-center ' . $this->classBg() . '\">';\n            $html .= button(\n                shift_entry_create_link_admin($shift),\n                icon('plus-lg') . __('Add more angels'),\n                'btn-sm'\n            );\n            $html .= '</li>';\n        }\n        if ($html != '') {\n            return [\n                $shift_signup_state,\n                '<ul class=\"list-group list-group-flush\">' . $html . '</ul>',\n            ];\n        }\n\n        return [\n            $shift_signup_state,\n            '',\n        ];\n    }\n\n    /**\n     * Renders a list entry containing the needed angels for an angeltype\n     *\n     * @param Shift                   $shift The shift which is rendered\n     * @param ShiftEntry[]|Collection $shift_entries\n     * @param array                   $angeltype The angeltype, containing information about needed angeltypes\n     *                           and already signed up angels\n     * @param User                    $user The user who is viewing the shift calendar\n     * @return array\n     */\n    private function renderShiftNeededAngeltype(Shift $shift, $shift_entries, $angeltype, $user)\n    {\n        $angeltype = (new AngelType())->forceFill($angeltype);\n        $entry_list = [];\n        foreach ($shift_entries as $entry) {\n            $class = $entry->freeloaded ? 'text-decoration-line-through' : '';\n            $entry_list[] = '<span class=\"text-nowrap ' . $class . '\">' . User_Nick_render($entry->user) . '</span>';\n        }\n        $shift_signup_state = Shift_signup_allowed(\n            $user,\n            $shift,\n            $angeltype,\n            null,\n            null,\n            $angeltype,\n            $shift_entries\n        );\n        $freeEntriesCount = $shift_signup_state->getFreeEntries();\n        $inner_text = _e('%d helper needed', '%d helpers needed', $freeEntriesCount, [$freeEntriesCount]);\n\n        $entry = match ($shift_signup_state->getState()) {\n            // When admin or free display a link + button for sign up\n            ShiftSignupStatus::ADMIN, ShiftSignupStatus::FREE =>\n                '<a class=\"me-1 text-nowrap\" href=\"'\n                . shift_entry_create_link($shift, $angeltype)\n                . '\">'\n                . $inner_text\n                . '</a> '\n                . button(\n                    shift_entry_create_link($shift, $angeltype),\n                    __('Sign up'),\n                    'btn-sm btn-primary text-nowrap d-print-none'\n                ),\n            // No link and add a text hint, when the shift ended\n            ShiftSignupStatus::SHIFT_ENDED => $inner_text . ' (' . __('ended') . ')',\n            // No link and add a text hint, when the shift ended\n            ShiftSignupStatus::NOT_ARRIVED => $inner_text . ' (' . __('please arrive for signup') . ')',\n            ShiftSignupStatus::NOT_YET => $inner_text . ' (' . __('not yet') . ')',\n            ShiftSignupStatus::ANGELTYPE => $angeltype->restricted\n                // User has to be confirmed on the angeltype first\n                ? $inner_text . icon('mortarboard-fill')\n                // Add link to join the angeltype first\n                : $inner_text . '<br />'\n                . button(\n                    page_link_to('user_angeltypes', ['action' => 'add', 'angeltype_id' => $angeltype->id]),\n                    sprintf(__('Become %s'), htmlspecialchars($angeltype->name)),\n                    'btn-sm'\n                ),\n            // Shift collides or user is already signed up: No signup allowed\n            ShiftSignupStatus::COLLIDES, ShiftSignupStatus::SIGNED_UP => $inner_text,\n            // Shift is full\n            ShiftSignupStatus::OCCUPIED => null,\n            default => null,\n        };\n        if (!is_null($entry)) {\n            $entry_list[] = $entry;\n        }\n\n        $shifts_row = '<li class=\"list-group-item d-flex flex-wrap align-items-center ' . $this->classBg() . '\">';\n        $shifts_row .= '<strong class=\"me-1\">' . AngelType_name_render($angeltype) . ':</strong> ';\n        $shifts_row .= join(', ', $entry_list);\n        $shifts_row .= '</li>';\n        return [\n            $shift_signup_state,\n            $shifts_row,\n        ];\n    }\n\n    /**\n     * Return the corresponding bg class\n     *\n     * @return string\n     */\n    private function classBg(): string\n    {\n        if (theme_type() === 'light') {\n            return 'bg-white';\n        }\n\n        return 'bg-dark';\n    }\n\n    /**\n     * Renders the shift header\n     *\n     * @param Shift  $shift The shift\n     * @param string $class The shift state class\n     * @return string\n     */\n    private function renderShiftHead(Shift $shift, $class, $needed_angeltypes_count)\n    {\n        $header_buttons = '';\n        if (auth()->can('admin_shifts')) {\n            $header_buttons = '<div class=\"ms-auto d-print-none\">' . table_buttons([\n                    button(\n                        page_link_to('user_shifts', ['edit_shift' => $shift->id]),\n                        icon('pencil'),\n                        'btn-' . $class . ' btn-sm border-light text-white'\n                    ),\n                    button(\n                        page_link_to('user_shifts', ['delete_shift' => $shift->id]),\n                        icon('trash'),\n                        'btn-' . $class . ' btn-sm border-light text-white'\n                    ),\n                ]) . '</div>';\n        }\n        $shift_heading = $shift->start->format('H:i') . ' &dash; '\n            . $shift->end->format('H:i') . ' &mdash; '\n            . htmlspecialchars($shift->shiftType->name);\n\n        if ($needed_angeltypes_count > 0) {\n            $shift_heading = '<span class=\"badge bg-light text-danger me-1\">' . $needed_angeltypes_count . '</span> ' . $shift_heading;\n        }\n\n        return div('card-header d-flex align-items-center', [\n            '<a class=\"d-flex align-items-center text-white\" href=\"' . shift_link($shift) . '\">' . $shift_heading . '</a>',\n            $header_buttons,\n        ]);\n    }\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\User\\User;\n\n/**\n * Sign off from a user from a shift with admin permissions, asking for ack.\n *\n * @param Shift $shift\n * @param AngelType $angeltype\n * @param User  $signoff_user\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view_admin(Shift $shift, AngelType $angeltype, User $signoff_user)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off %s from shift %s from %s to %s as %s?'),\n            $signoff_user->displayName,\n            $shift->shiftType->name,\n            $shift->start->format(__('Y-m-d H:i')),\n            $shift->end->format(__('Y-m-d H:i')),\n            $angeltype->name\n        ), true),\n        form([\n            buttons([\n                button(user_link($signoff_user->id), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('trash') . __('sign off'), 'btn-danger', false),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Sign off from a shift, asking for ack.\n *\n * @param Shift $shift\n * @param AngelType $angeltype\n * @param User $signoff_user\n *\n * @return string HTML\n */\nfunction ShiftEntry_delete_view(Shift $shift, AngelType $angeltype, User $signoff_user)\n{\n    return page_with_title(ShiftEntry_delete_title(), [\n        info(sprintf(\n            __('Do you want to sign off from your shift %s from %s to %s as %s?'),\n            $shift->shiftType->name,\n            $shift->start->format(__('Y-m-d H:i')),\n            $shift->end->format(__('Y-m-d H:i')),\n            $angeltype->name\n        ), true),\n\n        form([\n            buttons([\n                button(user_link($signoff_user->id), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('trash') . __('delete'), 'btn-danger', false),\n            ]),\n        ]),\n    ]);\n}\n\n/**\n * Title for deleting a shift entry.\n */\nfunction ShiftEntry_delete_title()\n{\n    return __('Shift sign off');\n}\n\n/**\n * Admin puts user into shift.\n *\n * @param Shift     $shift\n * @param Room      $room\n * @param AngelType $angeltype\n * @param array     $angeltypes_select\n * @param User      $signup_user\n * @param array     $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_admin(\n    Shift $shift,\n    Room $room,\n    AngelType $angeltype,\n    $angeltypes_select,\n    $signup_user,\n    $users_select\n) {\n    $start = $shift->start->format(__('Y-m-d H:i'));\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . htmlspecialchars($shift->shiftType->name)\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(__('Do you want to sign up the following user for this shift?'), true),\n            form([\n                form_select('angeltype_id', __('Angeltype'), $angeltypes_select, $angeltype->id),\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', icon('check-lg') . __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * Supporter puts user into shift.\n *\n * @param Shift $shift\n * @param Room  $room\n * @param AngelType $angeltype\n * @param User  $signup_user\n * @param array $users_select\n * @return string\n */\nfunction ShiftEntry_create_view_supporter(Shift $shift, Room $room, AngelType $angeltype, $signup_user, $users_select)\n{\n    $start = $shift->start->format(__('Y-m-d H:i'));\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . htmlspecialchars($shift->shiftType->name)\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(\n                __('Do you want to sign up the following user for this shift as %s?'),\n                $angeltype->name\n            ), true),\n            form([\n                form_select('user_id', __('User'), $users_select, $signup_user->id),\n                form_submit('submit', icon('check-lg') . __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * User joining a shift.\n *\n * @param Shift  $shift\n * @param Room   $room\n * @param AngelType  $angeltype\n * @param string $comment\n * @return string\n */\nfunction ShiftEntry_create_view_user(Shift $shift, Room $room, AngelType $angeltype, $comment)\n{\n    $start = $shift->start->format(__('Y-m-d H:i'));\n    return page_with_title(\n        ShiftEntry_create_title() . ': ' . htmlspecialchars($shift->shiftType->name)\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        [\n            Shift_view_header($shift, $room),\n            info(sprintf(__('Do you want to sign up for this shift as %s?'), $angeltype->name), true),\n            form([\n                form_textarea('comment', __('Comment (for your eyes only):'), $comment),\n                form_submit('submit', icon('check-lg') . __('Save')),\n            ]),\n        ]\n    );\n}\n\n/**\n * Title for creating a shift entry.\n */\nfunction ShiftEntry_create_title()\n{\n    return __('Shift signup');\n}\n\n/**\n * Display form for adding/editing a shift entry.\n *\n * @param User   $angel\n * @param string $date\n * @param string $location\n * @param string $title\n * @param string $type\n * @param string $comment\n * @param bool   $freeloaded\n * @param string $freeloaded_comment\n * @param bool   $user_admin_shifts\n * @return string\n */\nfunction ShiftEntry_edit_view(\n    $angel,\n    $date,\n    $location,\n    $title,\n    $type,\n    $comment,\n    $freeloaded,\n    $freeloaded_comment,\n    $user_admin_shifts = false\n) {\n    $freeload_form = [];\n    if ($user_admin_shifts) {\n        $freeload_form = [\n            form_checkbox('freeloaded', __('Freeloaded'), $freeloaded),\n            form_textarea(\n                'freeloaded_comment',\n                __('Freeload comment (Only for shift coordination):'),\n                $freeloaded_comment\n            ),\n        ];\n    }\n\n    if ($angel->id == auth()->user()->id) {\n        $comment = form_textarea('comment', __('Comment (for your eyes only):'), $comment);\n    } else {\n        $comment = '';\n    }\n\n    return page_with_title(__('Edit shift entry'), [\n        msg(),\n        form([\n            form_info(__('Angel:'), User_Nick_render($angel)),\n            form_info(__('Date, Duration:'), $date),\n            form_info(__('Location:'), htmlspecialchars($location)),\n            form_info(__('Title:'), htmlspecialchars($title)),\n            form_info(__('Type:'), htmlspecialchars($type)),\n            $comment,\n            join('', $freeload_form),\n            form_submit('submit', __('Save')),\n        ]),\n    ]);\n}\n", "<?php\n\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Illuminate\\Support\\Collection;\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction ShiftType_name_render(ShiftType $shifttype)\n{\n    if (auth()->can('shifttypes')) {\n        return '<a href=\"' . shifttype_link($shifttype) . '\">' . htmlspecialchars($shifttype->name) . '</a>';\n    }\n    return $shifttype->name;\n}\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction ShiftType_delete_view(ShiftType $shifttype)\n{\n    return page_with_title(sprintf(__('Delete shifttype %s'), htmlspecialchars($shifttype->name)), [\n        info(sprintf(__('Do you want to delete shifttype %s?'), $shifttype->name), true),\n        form([\n            buttons([\n                button(page_link_to('shifttypes'), icon('x-lg') . __('cancel')),\n                form_submit(\n                    'delete',\n                    icon('trash') . __('delete'),\n                    'btn-danger',\n                    false\n                ),\n            ]),\n        ]),\n    ], true);\n}\n\n/**\n * @param string $name\n * @param string $description\n * @param int    $shifttype_id\n * @return string\n */\nfunction ShiftType_edit_view($name, $description, $shifttype_id)\n{\n    return page_with_title($shifttype_id ? __('Edit shifttype') : __('Create shifttype'), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back'),\n        ]),\n        form([\n            form_text('name', __('Name'), $name),\n            form_textarea('description', __('Description'), $description),\n            form_info('', __('Please use markdown for the description.')),\n            form_submit('submit', __('Save')),\n        ]),\n    ], true);\n}\n\n/**\n * @param ShiftType $shifttype\n * @return string\n */\nfunction ShiftType_view(ShiftType $shifttype)\n{\n    $parsedown = new Parsedown();\n    $title = $shifttype->name;\n    return page_with_title(htmlspecialchars($title), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes'), shifttypes_title(), 'back'),\n            button(\n                page_link_to('shifttypes', ['action' => 'edit', 'shifttype_id' => $shifttype->id]),\n                icon('pencil') . __('edit')\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype->id]),\n                icon('trash') . __('delete'),\n            ),\n        ]),\n        heading(__('Description'), 2),\n        $parsedown->parse(htmlspecialchars($shifttype->description)),\n    ], true);\n}\n\n/**\n * @param ShiftType[]|array[]|Collection $shifttypes\n * @return string\n */\nfunction ShiftTypes_list_view($shifttypes)\n{\n    foreach ($shifttypes as $shifttype) {\n        $shifttype->name = '<a href=\"'\n            . page_link_to('shifttypes', ['action' => 'view', 'shifttype_id' => $shifttype->id])\n            . '\">'\n            . htmlspecialchars($shifttype->name)\n            . '</a>';\n        $shifttype->actions = table_buttons([\n            button(\n                page_link_to(\n                    'shifttypes',\n                    ['action' => 'edit', 'shifttype_id' => $shifttype->id]\n                ),\n                icon('pencil') . __('edit'),\n                'btn-sm'\n            ),\n            button(\n                page_link_to('shifttypes', ['action' => 'delete', 'shifttype_id' => $shifttype->id]),\n                icon('trash') . __('delete'),\n                'btn-sm'\n            ),\n        ]);\n    }\n\n    return page_with_title(shifttypes_title(), [\n        msg(),\n        buttons([\n            button(page_link_to('shifttypes', ['action' => 'edit']), __('New shifttype'), 'add'),\n        ]),\n        table([\n            'name'    => __('Name'),\n            'actions' => '',\n        ], $shifttypes),\n    ], true);\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Room;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\Shifts\\ShiftType;\nuse Engelsystem\\Models\\Shifts\\ShiftSignupStatus;\nuse Engelsystem\\Models\\UserAngelType;\nuse Engelsystem\\ShiftSignupState;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Renders the basic shift view header.\n *\n * @param Shift $shift\n * @param Room  $room\n * @return string HTML\n */\nfunction Shift_view_header(Shift $shift, Room $room)\n{\n    return div('row', [\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('Title') . '</h4>',\n            '<p class=\"lead\">'\n            . ($shift->url != ''\n                ? '<a href=\"' . htmlspecialchars($shift->url) . '\">' . htmlspecialchars($shift->title) . '</a>'\n                : htmlspecialchars($shift->title))\n            . '</p>',\n        ]),\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('Start') . '</h4>',\n            '<p class=\"lead' . (time() >= $shift->start->timestamp ? ' text-success' : '') . '\">',\n            icon('calendar-event') . $shift->start->format(__('Y-m-d')),\n            '<br />',\n            icon('clock') . $shift->start->format('H:i'),\n            '</p>',\n        ]),\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('End') . '</h4>',\n            '<p class=\"lead' . (time() >= $shift->end->timestamp ? ' text-success' : '') . '\">',\n            icon('calendar-event') . $shift->end->format(__('Y-m-d')),\n            '<br />',\n            icon('clock') . $shift->end->format('H:i'),\n            '</p>',\n        ]),\n        div('col-sm-3 col-xs-6', [\n            '<h4>' . __('Location') . '</h4>',\n            '<p class=\"lead\">' . Room_name_render($room) . '</p>',\n        ]),\n    ]);\n}\n\n/**\n * @param Shift $shift\n * @return string\n */\nfunction Shift_editor_info_render(Shift $shift)\n{\n    $info = [];\n    if (!empty($shift->created_by)) {\n        $info[] = sprintf(\n            icon('plus-lg') . __('created at %s by %s'),\n            $shift->created_at->format(__('Y-m-d H:i')),\n            User_Nick_render($shift->createdBy)\n        );\n    }\n    if (!empty($shift->updated_by)) {\n        $info[] = sprintf(\n            icon('pencil') . __('edited at %s by %s'),\n            $shift->updated_at->format(__('Y-m-d H:i')),\n            User_Nick_render($shift->updatedBy)\n        );\n    }\n    return join('<br />', $info);\n}\n\n/**\n * @param Shift     $shift\n * @param AngelType $angeltype\n * @return string\n */\nfunction Shift_signup_button_render(Shift $shift, AngelType $angeltype)\n{\n    /** @var UserAngelType|null $user_angeltype */\n    $user_angeltype = UserAngelType::whereUserId(auth()->user()->id)\n        ->where('angel_type_id', $angeltype->id)\n        ->first();\n\n    if (\n        $angeltype->shift_signup_state?->isSignupAllowed()\n        || auth()->user()->isAngelTypeSupporter($angeltype)\n        || auth()->can('admin_user_angeltypes')\n    ) {\n        return button(shift_entry_create_link($shift, $angeltype), __('Sign up'));\n    } elseif (empty($user_angeltype)) {\n        return button(\n            page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n            sprintf(\n                __('Become %s'),\n                htmlspecialchars($angeltype->name)\n            )\n        );\n    }\n\n    return '';\n}\n\n/**\n * @param Shift                  $shift\n * @param ShiftType              $shifttype\n * @param Room                   $room\n * @param AngelType[]|Collection $angeltypes_source\n * @param ShiftSignupState       $shift_signup_state\n * @return string\n */\nfunction Shift_view(Shift $shift, ShiftType $shifttype, Room $room, $angeltypes_source, ShiftSignupState $shift_signup_state)\n{\n    $shift_admin = auth()->can('admin_shifts');\n    $user_shift_admin = auth()->can('user_shifts_admin');\n    $admin_rooms = auth()->can('admin_rooms');\n    $admin_shifttypes = auth()->can('shifttypes');\n\n    $parsedown = new Parsedown();\n\n    $angeltypes = [];\n    foreach ($angeltypes_source as $angeltype) {\n        $angeltypes[$angeltype->id] = $angeltype;\n    }\n\n    $needed_angels = '';\n    $neededAngels = new Collection($shift->neededAngels);\n    foreach ($neededAngels as $needed_angeltype) {\n        $needed_angels .= Shift_view_render_needed_angeltype($needed_angeltype, $angeltypes, $shift, $user_shift_admin);\n    }\n\n    $shiftEntry = $shift->shiftEntries;\n    foreach ($shiftEntry->groupBy('angel_type_id') as $angelTypes) {\n        /** @var Collection $angelTypes */\n        $type = $angelTypes->first()['angel_type_id'];\n        if (!$neededAngels->where('angel_type_id', $type)->first()) {\n            $needed_angels .= Shift_view_render_needed_angeltype([\n                'angel_type_id' => $type,\n                'count'         => 0,\n                'restricted'    => true,\n                'taken'         => $angelTypes->count(),\n            ], $angeltypes, $shift, $user_shift_admin);\n        }\n    }\n\n    $content = [msg()];\n\n    if ($shift_signup_state->getState() === ShiftSignupStatus::COLLIDES) {\n        $content[] = info(__('This shift collides with one of your shifts.'), true);\n    }\n\n    if ($shift_signup_state->getState() === ShiftSignupStatus::SIGNED_UP) {\n        $content[] = info(__('You are signed up for this shift.'), true);\n    }\n\n    if (config('signup_advance_hours') && $shift->start->timestamp > time() + config('signup_advance_hours') * 3600) {\n        $content[] = info(sprintf(\n            __('This shift is in the far future and becomes available for signup at %s.'),\n            date(__('Y-m-d H:i'), $shift->start->timestamp - config('signup_advance_hours') * 3600)\n        ), true);\n    }\n\n    $buttons = [];\n    if ($shift_admin || $admin_shifttypes || $admin_rooms) {\n        $buttons = [\n            $shift_admin ? button(shift_edit_link($shift), icon('pencil') . __('edit')) : '',\n            $shift_admin ? button(shift_delete_link($shift), icon('trash') . __('delete')) : '',\n            $admin_shifttypes\n                ? button(shifttype_link($shifttype), htmlspecialchars($shifttype->name))\n                : '',\n            $admin_rooms\n                ? button(\n                    room_link($room),\n                    icon('pin-map-fill') . htmlspecialchars($room->name)\n                )\n                : '',\n        ];\n    }\n    $buttons[] = button(user_link(auth()->user()->id), '<span class=\"icon-icon_angel\"></span> ' . __('My shifts'));\n    $content[] = buttons($buttons);\n\n    $content[] = Shift_view_header($shift, $room);\n    $content[] = div('row', [\n        div('col-sm-6', [\n            '<h2>' . __('Needed angels') . '</h2>',\n            '<div class=\"list-group\">' . $needed_angels . '</div>',\n        ]),\n        div('col-sm-6', [\n            '<h2>' . __('Description') . '</h2>',\n            $parsedown->parse(htmlspecialchars($shifttype->description)),\n            $parsedown->parse(htmlspecialchars($shift->description)),\n        ]),\n    ]);\n\n    if ($shift_admin) {\n        $content[] = Shift_editor_info_render($shift);\n    }\n\n    $start = $shift->start->format(__('Y-m-d H:i'));\n\n    return page_with_title(\n        htmlspecialchars($shift->shiftType->name)\n        . ' <small title=\"' . $start . '\" data-countdown-ts=\"' . $shift->start->timestamp . '\">%c</small>',\n        $content\n    );\n}\n\n/**\n * @param array                  $needed_angeltype\n * @param AngelType[]|Collection $angeltypes\n * @param Shift                  $shift\n * @param bool                   $user_shift_admin\n * @return string\n */\nfunction Shift_view_render_needed_angeltype($needed_angeltype, $angeltypes, Shift $shift, $user_shift_admin)\n{\n    $angeltype = $angeltypes[$needed_angeltype['angel_type_id']];\n    $angeltype_supporter = auth()->user()->isAngelTypeSupporter($angeltype)\n        || auth()->can('admin_user_angeltypes');\n\n    $needed_angels = '';\n\n    $class = 'progress-bar-warning';\n    if ($needed_angeltype['taken'] == 0) {\n        $class = 'progress-bar-danger';\n    }\n    if ($needed_angeltype['taken'] >= $needed_angeltype['count']) {\n        $class = 'progress-bar-success';\n    }\n    $needed_angels .= '<div class=\"list-group-item\">';\n\n    $needed_angels .= '<div class=\"float-end m-3\">' . Shift_signup_button_render($shift, $angeltype) . '</div>';\n\n    $needed_angels .= '<h3>' . AngelType_name_render($angeltype) . '</h3>';\n    $bar_max = max($needed_angeltype['count'] * 10, $needed_angeltype['taken'] * 10, 10);\n    $bar_value = max($bar_max / 10, $needed_angeltype['taken'] * 10);\n    $needed_angels .= progress_bar(\n        0,\n        $bar_max,\n        $bar_value,\n        $class,\n        $needed_angeltype['taken'] . ' / ' . $needed_angeltype['count']\n    );\n\n    $angels = [];\n    foreach ($shift->shiftEntries as $shift_entry) {\n        if ($shift_entry->angel_type_id == $needed_angeltype['angel_type_id']) {\n            $angels[] = Shift_view_render_shift_entry($shift_entry, $user_shift_admin, $angeltype_supporter, $shift);\n        }\n    }\n\n    $needed_angels .= join(', ', $angels);\n    $needed_angels .= '</div>';\n\n    return $needed_angels;\n}\n\n/**\n * @param ShiftEntry $shift_entry\n * @param bool  $user_shift_admin\n * @param bool  $angeltype_supporter\n * @param Shift $shift\n * @return string\n */\nfunction Shift_view_render_shift_entry(ShiftEntry $shift_entry, $user_shift_admin, $angeltype_supporter, Shift $shift)\n{\n    $entry = User_Nick_render($shift_entry->user);\n    if ($shift_entry->freeloaded) {\n        $entry = '<del>' . $entry . '</del>';\n    }\n    $isUser = $shift_entry->user_id == auth()->user()->id;\n    if ($user_shift_admin || $angeltype_supporter || $isUser) {\n        $entry .= ' <div class=\"btn-group m-1\">';\n        if ($user_shift_admin || $isUser) {\n            $entry .= button_icon(\n                page_link_to('user_myshifts', ['edit' => $shift_entry->id, 'id' => $shift_entry->user_id]),\n                'pencil',\n                'btn-sm'\n            );\n        }\n        $angeltype = $shift_entry->angelType;\n        $disabled = Shift_signout_allowed($shift, $angeltype, $shift_entry->user_id) ? '' : ' btn-disabled';\n        $entry .= button_icon(shift_entry_delete_link($shift_entry), 'trash', 'btn-sm' . $disabled);\n        $entry .= '</div>';\n    }\n    return $entry;\n}\n\n/**\n * Calc shift length in format 12:23h.\n *\n * @param Shift $shift\n * @return string\n */\nfunction shift_length(Shift $shift)\n{\n    $length = floor(($shift->end->timestamp - $shift->start->timestamp) / (60 * 60)) . ':';\n    $length .= str_pad(\n        (($shift->end->timestamp - $shift->start->timestamp) % (60 * 60)) / 60,\n        2,\n        '0',\n        STR_PAD_LEFT\n    );\n    $length .= 'h';\n    return $length;\n}\n", "<?php\n\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\UserAngelType;\n\n/**\n * @param UserAngelType $user_angeltype\n * @param User          $user\n * @param AngelType     $angeltype\n * @param bool          $supporter\n * @return string\n */\nfunction UserAngelType_update_view(UserAngelType $user_angeltype, User $user, AngelType $angeltype, bool $supporter)\n{\n    return page_with_title($supporter ? __('Add supporter rights') : __('Remove supporter rights'), [\n        msg(),\n        info(sprintf(\n            $supporter\n                ? __('Do you really want to add supporter rights for %s to %s?')\n                : __('Do you really want to remove supporter rights for %s from %s?'),\n            $angeltype->name,\n            $user->displayName\n        ), true),\n        form([\n            buttons([\n                button(\n                    page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n                    icon('x-lg') . __('cancel')\n                ),\n                form_submit('submit', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', [\n            'action'            => 'update',\n            'user_angeltype_id' => $user_angeltype->id,\n            'supporter'         => ($supporter ? '1' : '0'),\n        ])),\n    ]);\n}\n\n/**\n * @param AngelType $angeltype\n * @return string\n */\nfunction UserAngelTypes_delete_all_view(AngelType $angeltype)\n{\n    return page_with_title(__('Deny all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to deny all users for %s?'), $angeltype->name), true),\n        form([\n            buttons([\n                button(\n                    page_link_to(\n                        'angeltypes',\n                        ['action' => 'view', 'angeltype_id' => $angeltype->id]\n                    ),\n                    icon('x-lg') . __('cancel')\n                ),\n                form_submit('deny_all', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'delete_all', 'angeltype_id' => $angeltype->id])),\n    ]);\n}\n\n/**\n * @param AngelType $angeltype\n * @return string\n */\nfunction UserAngelTypes_confirm_all_view(AngelType $angeltype)\n{\n    return page_with_title(__('Confirm all users'), [\n        msg(),\n        info(sprintf(__('Do you really want to confirm all users for %s?'), $angeltype->name), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('confirm_all', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'confirm_all', 'angeltype_id' => $angeltype->id])),\n    ]);\n}\n\n/**\n * @param UserAngelType $user_angeltype\n * @param User          $user\n * @param AngelType     $angeltype\n * @return string\n */\nfunction UserAngelType_confirm_view(UserAngelType $user_angeltype, User $user, AngelType $angeltype)\n{\n    return page_with_title(__('Confirm angeltype for user'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to confirm %s for %s?'),\n            $user->displayName,\n            $angeltype->name\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('confirm_user', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'confirm', 'user_angeltype_id' => $user_angeltype->id])),\n    ]);\n}\n\n/**\n * @param UserAngelType $user_angeltype\n * @param User          $user\n * @param AngelType     $angeltype\n * @return string\n */\nfunction UserAngelType_delete_view(UserAngelType $user_angeltype, User $user, AngelType $angeltype)\n{\n    return page_with_title(__('Remove angeltype'), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to delete %s from %s?'),\n            $user->displayName,\n            $angeltype->name\n        ), true),\n        form([\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('delete', icon('check-lg') . __('yes'), 'btn-primary', false),\n            ]),\n        ], page_link_to('user_angeltypes', ['action' => 'delete', 'user_angeltype_id' => $user_angeltype->id])),\n    ], true);\n}\n\n/**\n * @param AngelType $angeltype\n * @param User[]    $users_source\n * @param int       $user_id\n * @return string\n */\nfunction UserAngelType_add_view(AngelType $angeltype, $users_source, $user_id)\n{\n    $users = [];\n    foreach ($users_source as $user_source) {\n        $users[$user_source->id] = $user_source->displayName;\n    }\n\n    return page_with_title(__('Add user to angeltype'), [\n        msg(),\n        buttons([\n            button(\n                page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $angeltype->id]),\n                __('back'),\n                'back'\n            ),\n        ]),\n        form([\n            form_info(__('Angeltype'), htmlspecialchars($angeltype->name)),\n            form_checkbox('auto_confirm_user', __('Confirm user'), true),\n            form_select('user_id', __('User'), $users, $user_id),\n            form_submit('submit', __('Add')),\n        ]),\n    ]);\n}\n\n/**\n * @param User      $user\n * @param AngelType $angeltype\n * @return string\n */\nfunction UserAngelType_join_view($user, AngelType $angeltype)\n{\n    return page_with_title(sprintf(__('Become a %s'), htmlspecialchars($angeltype->name)), [\n        msg(),\n        info(sprintf(\n            __('Do you really want to add %s to %s?'),\n            $user->displayName,\n            $angeltype->name\n        ), true),\n        form([\n            auth()->can('admin_user_angeltypes') ? form_checkbox('auto_confirm_user', __('Confirm user'), true) : '',\n            buttons([\n                button(angeltype_link($angeltype->id), icon('x-lg') . __('cancel')),\n                form_submit('submit', icon('check-lg') . __('save'), 'btn-primary', false),\n            ]),\n        ], page_link_to(\n            'user_angeltypes',\n            ['action' => 'add', 'angeltype_id' => $angeltype->id, 'user_id' => $user->id]\n        )),\n    ]);\n}\n", "<?php\n\nnamespace Engelsystem;\n\nclass UserHintsRenderer\n{\n    /** @var string[] */\n    private $hints = [];\n\n    private $important = false;\n\n    /**\n     * Add a hint to the list, if its not null and a not empty string.\n     *\n     * @param string  $hint      The hint\n     * @param boolean $important Is the hint important?\n     */\n    public function addHint($hint, $important = false)\n    {\n        if (!empty($hint)) {\n            if ($important) {\n                $this->important = true;\n                $this->hints[] = error($hint, true, true);\n            } else {\n                $this->hints[] = info($hint, true, true);\n            }\n        }\n    }\n\n    /**\n     * Render the added hints to a popover for the toolbar.\n     *\n     * @return string\n     */\n    public function render()\n    {\n        if (count($this->hints) > 0) {\n            $class_hint = $this->important ? 'danger' : 'info';\n            $icon = $this->important ? 'exclamation-triangle' : 'info-circle';\n            $data_bs_attributes = [\n                'toggle'       => 'popover',\n                'container'    => 'body',\n                'placement'    => 'bottom',\n                'custom-class' => 'popover--userhints',\n                'html'         => 'true',\n                'content'      => htmlspecialchars(join('', $this->hints)),\n            ];\n            $attr = '';\n            foreach ($data_bs_attributes as $attr_key => $attr_value) {\n                $attr .= ' data-bs-' . $attr_key . '=\"' . $attr_value . '\"';\n            }\n\n            return '<li class=\"nav-item nav-item--userhints d-flex align-items-center bg-' . $class_hint . '\">'\n                . '<a class=\"nav-link dropdown-toggle text-light\" href=\"#\" role=\"button\"' . $attr . '>'\n                . icon($icon)\n                . '</a>'\n                . '</li>';\n        }\n\n        return '';\n    }\n}\n", "<?php\n\nuse Carbon\\Carbon;\nuse Engelsystem\\Config\\GoodieType;\nuse Engelsystem\\Models\\AngelType;\nuse Engelsystem\\Models\\Group;\nuse Engelsystem\\Models\\Shifts\\Shift;\nuse Engelsystem\\Models\\Shifts\\ShiftEntry;\nuse Engelsystem\\Models\\User\\User;\nuse Engelsystem\\Models\\Worklog;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Str;\n\n/**\n * Gui for deleting user with password field.\n *\n * @param User $user\n * @return string\n */\nfunction User_delete_view($user)\n{\n    return page_with_title(sprintf(__('Delete %s'), User_Nick_render($user)), [\n        msg(),\n        buttons([\n            button(user_edit_link($user->id), icon('chevron-left') . __('back')),\n        ]),\n        error(\n            __('Do you really want to delete the user including all his shifts and every other piece of his data?'),\n            true\n        ),\n        form([\n            form_password('password', __('Your password'), 'current-password'),\n            form_submit('submit', __('Delete')),\n        ]),\n    ]);\n}\n\n/**\n * View for editing the number of given vouchers\n *\n * @param User $user\n * @return string\n */\nfunction User_edit_vouchers_view($user)\n{\n    return page_with_title(sprintf(__('%s\\'s vouchers'), User_Nick_render($user)), [\n        msg(),\n        buttons([\n            button(user_link($user->id), icon('chevron-left') . __('back')),\n        ]),\n        info(sprintf(\n            $user->state->force_active\n                ? __('Angel can receive another %d vouchers and is FA.')\n                : __('Angel can receive another %d vouchers.'),\n            User_get_eligable_voucher_count($user)\n        ), true),\n        form(\n            [\n                form_spinner('vouchers', __('Number of vouchers given out'), $user->state->got_voucher),\n                form_submit('submit', __('Save')),\n            ],\n            page_link_to('users', ['action' => 'edit_vouchers', 'user_id' => $user->id])\n        ),\n    ]);\n}\n\n/**\n * @param User[] $users\n * @param string $order_by\n * @param int    $arrived_count\n * @param int    $active_count\n * @param int    $force_active_count\n * @param int    $freeloads_count\n * @param int    $tshirts_count\n * @param int    $voucher_count\n * @return string\n */\nfunction Users_view(\n    $users,\n    $order_by,\n    $arrived_count,\n    $active_count,\n    $force_active_count,\n    $freeloads_count,\n    $tshirts_count,\n    $voucher_count\n) {\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $usersList = [];\n    foreach ($users as $user) {\n        $u = [];\n        $u['name'] = User_Nick_render($user) . User_Pronoun_render($user);\n        $u['first_name'] = htmlspecialchars((string) $user->personalData->first_name);\n        $u['last_name'] = htmlspecialchars((string) $user->personalData->last_name);\n        $u['dect'] = sprintf('<a href=\"tel:%s\">%1$s</a>', htmlspecialchars((string) $user->contact->dect));\n        $u['arrived'] = icon_bool($user->state->arrived);\n        if (config('enable_voucher')) {\n            $u['got_voucher'] = $user->state->got_voucher;\n        }\n        $u['freeloads'] = $user->getAttribute('freeloads');\n        $u['active'] = icon_bool($user->state->active);\n        $u['force_active'] = icon_bool($user->state->force_active);\n        if ($goodie_enabled) {\n            $u['got_shirt'] = icon_bool($user->state->got_shirt);\n            if ($goodie_tshirt) {\n                $u['shirt_size'] = $user->personalData->shirt_size;\n            }\n        }\n        $u['arrival_date'] = $user->personalData->planned_arrival_date\n            ? $user->personalData->planned_arrival_date->format(__('Y-m-d')) : '';\n        $u['departure_date'] = $user->personalData->planned_departure_date\n            ? $user->personalData->planned_departure_date->format(__('Y-m-d')) : '';\n        $u['last_login_at'] = $user->last_login_at ? $user->last_login_at->format(__('m/d/Y h:i a')) : '';\n        $u['actions'] = table_buttons([\n            button_icon(page_link_to('admin_user', ['id' => $user->id]), 'pencil', 'btn-sm'),\n        ]);\n        $usersList[] = $u;\n    }\n    $usersList[] = [\n        'name'         => '<strong>' . __('Sum') . '</strong>',\n        'arrived'      => $arrived_count,\n        'got_voucher'  => $voucher_count,\n        'active'       => $active_count,\n        'force_active' => $force_active_count,\n        'freeloads'    => $freeloads_count,\n        'got_shirt'    => $tshirts_count,\n        'actions'      => '<strong>' . count($usersList) . '</strong>',\n    ];\n\n    $user_table_headers = [];\n\n    if (!config('display_full_name')) {\n        $user_table_headers['name'] = Users_table_header_link('name', __('Nick'), $order_by);\n    }\n    if (config('enable_user_name')) {\n        $user_table_headers['first_name'] = Users_table_header_link('first_name', __('Prename'), $order_by);\n        $user_table_headers['last_name'] = Users_table_header_link('last_name', __('Name'), $order_by);\n    }\n    if (config('enable_dect')) {\n        $user_table_headers['dect'] = Users_table_header_link('dect', __('DECT'), $order_by);\n    }\n    $user_table_headers['arrived'] = Users_table_header_link('arrived', __('Arrived'), $order_by);\n    if (config('enable_voucher')) {\n        $user_table_headers['got_voucher'] = Users_table_header_link('got_voucher', __('Voucher'), $order_by);\n    }\n    $user_table_headers['freeloads'] = Users_table_header_link('freeloads', __('Freeloads'), $order_by);\n    $user_table_headers['active'] = Users_table_header_link('active', __('Active'), $order_by);\n    $user_table_headers['force_active'] = Users_table_header_link('force_active', __('Forced'), $order_by);\n    if ($goodie_enabled) {\n        if ($goodie_tshirt) {\n            $user_table_headers['got_shirt'] = Users_table_header_link('got_shirt', __('T-Shirt'), $order_by);\n            $user_table_headers['shirt_size'] = Users_table_header_link('shirt_size', __('Size'), $order_by);\n        } else {\n            $user_table_headers['got_shirt'] = Users_table_header_link('got_shirt', __('Goodie'), $order_by);\n        }\n    }\n    $user_table_headers['arrival_date'] = Users_table_header_link(\n        'planned_arrival_date',\n        __('Planned arrival'),\n        $order_by\n    );\n    $user_table_headers['departure_date'] = Users_table_header_link(\n        'planned_departure_date',\n        __('Planned departure'),\n        $order_by\n    );\n    $user_table_headers['last_login_at'] = Users_table_header_link('last_login_at', __('Last login'), $order_by);\n    $user_table_headers['actions'] = '';\n\n    foreach (config('disabled_user_view_columns') ?? [] as $key) {\n        unset($user_table_headers[$key]);\n    }\n\n    return page_with_title(__('All users'), [\n        msg(),\n        buttons([\n            button(page_link_to('register'), icon('plus-lg') . __('New user')),\n        ]),\n        table($user_table_headers, $usersList),\n    ]);\n}\n\n/**\n * @param string $column\n * @param string $label\n * @param string $order_by\n * @return string\n */\nfunction Users_table_header_link($column, $label, $order_by)\n{\n    return '<a href=\"'\n        . page_link_to('users', ['OrderBy' => $column])\n        . '\">'\n        . $label . ($order_by == $column ? ' <span class=\"caret\"></span>' : '')\n        . '</a>';\n}\n\n/**\n * @param User $user\n * @return string|false\n */\nfunction User_shift_state_render($user)\n{\n    if (!$user->state->arrived) {\n        return '';\n    }\n\n    $upcoming_shifts = ShiftEntries_upcoming_for_user($user);\n    if ($upcoming_shifts->isEmpty()) {\n        return '<span class=\"text-success\">' . __('Free') . '</span>';\n    }\n\n    /** @var ShiftEntry $nextShiftEntry */\n    $nextShiftEntry = $upcoming_shifts->first();\n\n    $start = $nextShiftEntry->shift->start;\n    $end = $nextShiftEntry->shift->end;\n    $startFormat = $start->format(__('Y-m-d H:i'));\n    $endFormat = $end->format(__('Y-m-d H:i'));\n    $startTimestamp = $start->timestamp;\n    $endTimestamp = $end->timestamp;\n\n    if ($startTimestamp > time()) {\n        if ($startTimestamp - time() > 3600) {\n            return '<span class=\"text-success\" title=\"' . $startFormat . '\" data-countdown-ts=\"' . $startTimestamp . '\">'\n                . __('Next shift %c')\n                . '</span>';\n        }\n        return '<span class=\"text-warning\" title=\"' . $startFormat . '\" data-countdown-ts=\"' . $startTimestamp . '\">'\n            . __('Next shift %c')\n            . '</span>';\n    }\n\n    $halfway = ($startTimestamp + $endTimestamp) / 2;\n    if (time() < $halfway) {\n        return '<span class=\"text-danger\" title=\"' . $startFormat . '\" data-countdown-ts=\"' . $startTimestamp . '\">'\n            . __('Shift started %c')\n            . '</span>';\n    }\n\n    return '<span class=\"text-danger\" title=\"' . $endFormat . '\" data-countdown-ts=\"' . $endTimestamp . '\">'\n        . __('Shift ends %c')\n        . '</span>';\n}\n\nfunction User_last_shift_render($user)\n{\n    if (!$user->state->arrived) {\n        return '';\n    }\n\n    $last_shifts = ShiftEntries_finished_by_user($user);\n    if ($last_shifts->isEmpty()) {\n        return '';\n    }\n\n    /** @var ShiftEntry $lastShiftEntry */\n    $lastShiftEntry = $last_shifts->first();\n    $end = $lastShiftEntry->shift->end;\n\n    return '<span title=\"' . $end->format(__('Y-m-d H:i')) . '\" data-countdown-ts=\"' . $end->timestamp . '\">'\n        . __('Shift ended %c')\n        . '</span>';\n}\n\n/**\n * @param array $needed_angel_type\n * @return string\n */\nfunction User_view_shiftentries($needed_angel_type)\n{\n    $shift_info = '<br><b><a href=\"'\n        . page_link_to('angeltypes', ['action' => 'view', 'angeltype_id' => $needed_angel_type['id']])\n        . '\">' . htmlspecialchars($needed_angel_type['name']) . '</a>:</b> ';\n\n    $shift_entries = [];\n    foreach ($needed_angel_type['users'] as $user_shift) {\n        $member = User_Nick_render($user_shift);\n        if ($user_shift['freeloaded']) {\n            $member = '<del>' . $member . '</del>';\n        }\n\n        $shift_entries[] = $member;\n    }\n    $shift_info .= join(', ', $shift_entries);\n\n    return $shift_info;\n}\n\n/**\n * Helper that renders a shift line for user view\n *\n * @param Shift $shift\n * @param User  $user_source\n * @param bool  $its_me\n * @return array\n */\nfunction User_view_myshift(Shift $shift, $user_source, $its_me)\n{\n    $shift_info = '<a href=\"' . shift_link($shift) . '\">' . htmlspecialchars($shift->shiftType->name) . '</a>';\n    if ($shift->title) {\n        $shift_info .= '<br /><a href=\"' . shift_link($shift) . '\">' . htmlspecialchars($shift->title) . '</a>';\n    }\n    foreach ($shift->needed_angeltypes as $needed_angel_type) {\n        $shift_info .= User_view_shiftentries($needed_angel_type);\n    }\n\n    $myshift = [\n        'date'       => icon('calendar-event')\n            . $shift->start->format(__('Y-m-d')) . '<br>'\n            . icon('clock-history') . $shift->start->format('H:i')\n            . ' - '\n            . $shift->end->format(__('H:i')),\n        'duration'   => sprintf('%.2f', ($shift->end->timestamp - $shift->start->timestamp) / 3600) . '&nbsp;h',\n        'room'       => Room_name_render($shift->room),\n        'shift_info' => $shift_info,\n        'comment'    => '',\n    ];\n\n    if ($its_me) {\n        $myshift['comment'] = htmlspecialchars($shift->user_comment);\n    }\n\n    if ($shift->freeloaded) {\n        $myshift['duration'] = '<p class=\"text-danger\">'\n            . sprintf('%.2f', -($shift->end->timestamp - $shift->start->timestamp) / 3600 * 2) . '&nbsp;h'\n            . '</p>';\n        if (auth()->can('user_shifts_admin')) {\n            $myshift['comment'] .= '<br />'\n                . '<p class=\"text-danger\">'\n                . __('Freeloaded') . ': ' . htmlspecialchars($shift->freeloaded_comment)\n                . '</p>';\n        } else {\n            $myshift['comment'] .= '<br /><p class=\"text-danger\">' . __('Freeloaded') . '</p>';\n        }\n    }\n\n    $myshift['actions'] = [\n        button(shift_link($shift), icon('eye') . __('view'), 'btn-sm'),\n    ];\n    if ($its_me || auth()->can('user_shifts_admin')) {\n        $myshift['actions'][] = button(\n            page_link_to('user_myshifts', ['edit' => $shift->shift_entry_id, 'id' => $user_source->id]),\n            icon('pencil') . __('edit'),\n            'btn-sm'\n        );\n    }\n\n    if (Shift_signout_allowed($shift, (new AngelType())->forceFill(['id' => $shift->angel_type_id]), $user_source->id)) {\n        $myshift['actions'][] = button(\n            shift_entry_delete_link($shift),\n            icon('trash') . __('sign off'),\n            'btn-sm'\n        );\n    }\n    $myshift['actions'] = table_buttons($myshift['actions']);\n\n    return $myshift;\n}\n\n/**\n * Helper that prepares the shift table for user view\n *\n * @param Shift[]|Collection   $shifts\n * @param User                 $user_source\n * @param bool                 $its_me\n * @param int                  $tshirt_score\n * @param bool                 $tshirt_admin\n * @param Worklog[]|Collection $user_worklogs\n * @param bool                 $admin_user_worklog_privilege\n *\n * @return array\n */\nfunction User_view_myshifts(\n    $shifts,\n    $user_source,\n    $its_me,\n    $tshirt_score,\n    $tshirt_admin,\n    $user_worklogs,\n    $admin_user_worklog_privilege\n) {\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $myshifts_table = [];\n    $timeSum = 0;\n    foreach ($shifts as $shift) {\n        $key = $shift->start->timestamp . '-shift-' . $shift->shift_entry_id . $shift->id;\n        $myshifts_table[$key] = User_view_myshift($shift, $user_source, $its_me);\n\n        if (!$shift->freeloaded) {\n            $timeSum += ($shift->end->timestamp - $shift->start->timestamp);\n        }\n    }\n\n    foreach ($user_worklogs as $worklog) {\n        $key = $worklog->worked_at->timestamp . '-worklog-' . $worklog->id;\n        $myshifts_table[$key] = User_view_worklog($worklog, $admin_user_worklog_privilege);\n        $timeSum += $worklog->hours * 3600;\n    }\n\n    if (count($myshifts_table) > 0) {\n        ksort($myshifts_table);\n        $myshifts_table[] = [\n            'date'       => '<b>' . __('Sum:') . '</b>',\n            'duration'   => '<b>' . sprintf('%.2f', round($timeSum / 3600, 2)) . '&nbsp;h</b>',\n            'room'       => '',\n            'shift_info' => '',\n            'comment'    => '',\n            'actions'    => '',\n        ];\n        if ($goodie_enabled && ($its_me || $tshirt_admin)) {\n            $myshifts_table[] = [\n                'date'       => '<b>' . ($goodie_tshirt ? __('Your t-shirt score') : __('Your goodie score')) . '&trade;:</b>',\n                'duration'   => '<b>' . $tshirt_score . '</b>',\n                'room'       => '',\n                'shift_info' => '',\n                'comment'    => '',\n                'actions'    => '',\n            ];\n        }\n    }\n    return $myshifts_table;\n}\n\n/**\n * Renders table entry for user work log\n *\n * @param Worklog $worklog\n * @param bool    $admin_user_worklog_privilege\n * @return array\n */\nfunction User_view_worklog(Worklog $worklog, $admin_user_worklog_privilege)\n{\n    $actions = '';\n    if ($admin_user_worklog_privilege) {\n        $actions = table_buttons([\n            button(\n                url('/admin/user/' . $worklog->user->id . '/worklog/' . $worklog->id),\n                icon('pencil') . __('edit'),\n                'btn-sm'\n            ),\n            button(\n                url('/admin/user/' . $worklog->user->id . '/worklog/' . $worklog->id . '/delete'),\n                icon('trash') . __('delete'),\n                'btn-sm'\n            ),\n        ]);\n    }\n\n    return [\n        'date'       => icon('calendar-event') . date(__('Y-m-d'), $worklog->worked_at->timestamp),\n        'duration'   => sprintf('%.2f', $worklog->hours) . ' h',\n        'room'       => '',\n        'shift_info' => __('Work log entry'),\n        'comment'    => htmlspecialchars($worklog->comment) . '<br>'\n            . sprintf(\n                __('Added by %s at %s'),\n                User_Nick_render($worklog->creator),\n                $worklog->created_at->format(__('Y-m-d H:i'))\n            ),\n        'actions'    => $actions,\n    ];\n}\n\n/**\n * Renders view for a single user\n *\n * @param User                 $user_source\n * @param bool                 $admin_user_privilege\n * @param bool                 $freeloader\n * @param AngelType[]          $user_angeltypes\n * @param Group[]              $user_groups\n * @param Shift[]|Collection   $shifts\n * @param bool                 $its_me\n * @param int                  $tshirt_score\n * @param bool                 $tshirt_admin\n * @param bool                 $admin_user_worklog_privilege\n * @param Worklog[]|Collection $user_worklogs\n *\n * @return string\n */\nfunction User_view(\n    $user_source,\n    $admin_user_privilege,\n    $freeloader,\n    $user_angeltypes,\n    $user_groups,\n    $shifts,\n    $its_me,\n    $tshirt_score,\n    $tshirt_admin,\n    $admin_user_worklog_privilege,\n    $user_worklogs\n) {\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    $auth = auth();\n    $nightShiftsConfig = config('night_shifts');\n    $user_name = htmlspecialchars(\n        $user_source->personalData->first_name\n    ) . ' ' . htmlspecialchars($user_source->personalData->last_name);\n    $myshifts_table = '';\n    if ($its_me || $admin_user_privilege || $tshirt_admin) {\n        $my_shifts = User_view_myshifts(\n            $shifts,\n            $user_source,\n            $its_me,\n            $tshirt_score,\n            $tshirt_admin,\n            $user_worklogs,\n            $admin_user_worklog_privilege\n        );\n        if (count($my_shifts) > 0) {\n            $myshifts_table = div('table-responsive', table([\n                'date'       => __('Day &amp; time'),\n                'duration'   => __('Duration'),\n                'room'       => __('Location'),\n                'shift_info' => __('Name &amp; workmates'),\n                'comment'    => __('Comment'),\n                'actions'    => __('Action'),\n            ], $my_shifts));\n        } elseif ($user_source->state->force_active) {\n            $myshifts_table = success(__('You have done enough.'), true);\n        }\n    }\n\n    $needs_drivers_license = false;\n    foreach ($user_angeltypes as $angeltype) {\n        $needs_drivers_license = $needs_drivers_license || $angeltype->requires_driver_license;\n    }\n\n    $needs_ifsg_certificate = false;\n    foreach ($user_angeltypes as $angeltype) {\n        $needs_ifsg_certificate = $needs_ifsg_certificate || $angeltype->requires_ifsg_certificate;\n    }\n\n    return page_with_title(\n        '<span class=\"icon-icon_angel\"></span> '\n        . (\n        (config('enable_pronoun') && $user_source->personalData->pronoun)\n            ? '<small>' . htmlspecialchars($user_source->personalData->pronoun) . '</small> '\n            : ''\n        )\n        . htmlspecialchars($user_source->name)\n        . (config('enable_user_name') ? ' <small>' . $user_name . '</small>' : ''),\n        [\n            msg(),\n            div('row', [\n                div('col-md-12', [\n                    table_buttons([\n                        $auth->can('user.edit.shirt') && $goodie_enabled ? button(\n                            url('/admin/user/' . $user_source->id . '/goodie'),\n                            icon('person') . ($goodie_tshirt ? __('Shirt') : __('Goodie'))\n                        ) : '',\n                        $admin_user_privilege ? button(\n                            page_link_to('admin_user', ['id' => $user_source->id]),\n                            icon('pencil') . __('edit')\n                        ) : '',\n                        $admin_user_privilege || ($its_me && $needs_drivers_license) ? button(\n                            user_driver_license_edit_link($user_source),\n                            icon('person-vcard') . __('driving license')\n                        ) : '',\n                        config('ifsg_enabled') && ($admin_user_privilege || ($its_me && $needs_ifsg_certificate)) ? button(\n                            page_link_to('settings/certificates'),\n                            icon('card-checklist') . __('ifsg.certificate')\n                        ) : '',\n                        (($admin_user_privilege || $auth->can('admin_arrive')) && !$user_source->state->arrived) ?\n                            form([\n                                form_hidden('action', 'arrived'),\n                                form_hidden('user', $user_source->id),\n                                form_submit('submit', __('arrived'), '', false),\n                            ], page_link_to('admin_arrive'), true) : '',\n                        ($admin_user_privilege || $auth->can('voucher.edit')) && config('enable_voucher') ?\n                            button(\n                                page_link_to(\n                                    'users',\n                                    ['action' => 'edit_vouchers', 'user_id' => $user_source->id]\n                                ),\n                                icon('valentine') . __('Vouchers')\n                            )\n                            : '',\n                        $admin_user_worklog_privilege ? button(\n                            url('/admin/user/' . $user_source->id . '/worklog'),\n                            icon('clock-history') . __('worklog.add')\n                        ) : '',\n                    ], 'mb-2'),\n                    $its_me ? table_buttons([\n                        button(\n                            page_link_to('settings/profile'),\n                            icon('person-fill-gear') . __('Settings')\n                        ),\n                        $auth->can('ical') ? button(\n                            page_link_to('ical', ['key' => $user_source->api_key]),\n                            icon('calendar-week') . __('iCal Export')\n                        ) : '',\n                        $auth->can('shifts_json_export') ? button(\n                            page_link_to('shifts_json_export', ['key' => $user_source->api_key]),\n                            icon('braces') . __('JSON Export')\n                        ) : '',\n                        (\n                            $auth->can('shifts_json_export')\n                            || $auth->can('ical')\n                            || $auth->can('atom')\n                        ) ? button(\n                            page_link_to('user_myshifts', ['reset' => 1]),\n                            icon('arrow-repeat') . __('Reset API key')\n                        ) : '',\n                    ], 'mb-2') : '',\n                ]),\n            ]),\n            div('row user-info', [\n                div('col-md-2', [\n                    config('enable_dect') && $user_source->contact->dect ?\n                        heading(\n                            icon('phone')\n                            . ' <a href=\"tel:' . htmlspecialchars($user_source->contact->dect) . '\">'\n                            . htmlspecialchars($user_source->contact->dect)\n                            . '</a>'\n                        )\n                        : '',\n                    config('enable_mobile_show') && $user_source->contact->mobile ?\n                        $user_source->settings->mobile_show ?\n                            heading(\n                                icon('phone')\n                                . ' <a href=\"tel:' . htmlspecialchars($user_source->contact->mobile) . '\">'\n                                . htmlspecialchars($user_source->contact->mobile)\n                                . '</a>'\n                            )\n                            : ''\n                        : '',\n                    $auth->can('user_messages') ?\n                        heading(\n                            '<a href=\"' . page_link_to('/messages/' . $user_source->id) . '\">'\n                            . icon('envelope')\n                            . '</a>'\n                        )\n                        : '',\n                ]),\n                User_view_state($admin_user_privilege, $freeloader, $user_source),\n                User_angeltypes_render($user_angeltypes),\n                User_groups_render($user_groups),\n                $admin_user_privilege ? User_oauth_render($user_source) : '',\n            ]),\n            ($its_me || $admin_user_privilege) ? '<h2>' . __('Shifts') . '</h2>' : '',\n            $myshifts_table,\n            ($its_me && $nightShiftsConfig['enabled'] && $goodie_enabled) ? info(\n                sprintf(\n                    icon('info-circle') . __('Your night shifts between %d and %d am count twice.'),\n                    $nightShiftsConfig['start'],\n                    $nightShiftsConfig['end']\n                ),\n                true,\n                true\n            ) : '',\n            $its_me && count($shifts) == 0\n                ? error(sprintf(\n                    __('Go to the <a href=\"%s\">shifts table</a> to sign yourself up for some shifts.'),\n                    page_link_to('user_shifts')\n                ), true, true)\n                : '',\n            $its_me ? ical_hint() : '',\n        ]\n    );\n}\n\n/**\n * Render the state section of user view\n *\n * @param bool $admin_user_privilege\n * @param bool $freeloader\n * @param User $user_source\n * @return string\n */\nfunction User_view_state($admin_user_privilege, $freeloader, $user_source)\n{\n    if ($admin_user_privilege) {\n        $state = User_view_state_admin($freeloader, $user_source);\n    } else {\n        $state = User_view_state_user($user_source);\n    }\n\n    return div('col-md-2', [\n        heading(__('User state'), 4),\n        join('<br>', $state),\n    ]);\n}\n\n/**\n * Render the state section of user view for users.\n *\n * @param User $user_source\n * @return array\n */\nfunction User_view_state_user($user_source)\n{\n    $state = [\n        User_shift_state_render($user_source),\n    ];\n\n    if ($user_source->state->arrived) {\n        $state[] = '<span class=\"text-success\">' . icon('house') . __('Arrived') . '</span>';\n    } else {\n        $state[] = '<span class=\"text-danger\">' . __('Not arrived') . '</span>';\n    }\n\n    return $state;\n}\n\n\n/**\n * Render the state section of user view for admins.\n *\n * @param bool $freeloader\n * @param User $user_source\n * @return array\n */\nfunction User_view_state_admin($freeloader, $user_source)\n{\n    $state = [];\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_enabled = $goodie !== GoodieType::None;\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n\n    if ($freeloader) {\n        $state[] = '<span class=\"text-danger\">' . icon('exclamation-circle') . __('Freeloader') . '</span>';\n    }\n\n    $state[] = User_shift_state_render($user_source);\n\n    if ($user_source->state->arrived) {\n        $state[] = '<span class=\"text-success\">' . icon('house')\n            . sprintf(\n                __('Arrived at %s'),\n                $user_source->state->arrival_date ? $user_source->state->arrival_date->format(__('Y-m-d')) : ''\n            )\n            . '</span>';\n\n        if ($user_source->state->force_active) {\n            $state[] = '<span class=\"text-success\">' . __('Active (forced)') . '</span>';\n        } elseif ($user_source->state->active) {\n            $state[] = '<span class=\"text-success\">' . __('Active') . '</span>';\n        }\n        if ($user_source->state->got_shirt && $goodie_enabled) {\n            $state[] = '<span class=\"text-success\">' . ($goodie_tshirt ? __('T-Shirt') : __('Goodie')) . '</span>';\n        }\n    } else {\n        $arrivalDate = $user_source->personalData->planned_arrival_date;\n        $state[] = '<span class=\"text-danger\">'\n            . ($arrivalDate ? sprintf(\n                __('Not arrived (Planned: %s)'),\n                $arrivalDate->format(__('Y-m-d'))\n            ) : __('Not arrived'))\n            . '</span>';\n    }\n\n    if (config('enable_voucher')) {\n        $voucherCount = $user_source->state->got_voucher;\n        $availableCount = $voucherCount + User_get_eligable_voucher_count($user_source);\n        $availableCount = max($voucherCount, $availableCount);\n        if ($user_source->state->got_voucher > 0) {\n            $state[] = '<span class=\"text-success\">'\n                . icon('valentine')\n                . __('Got %s of %s vouchers', [$voucherCount, $availableCount])\n                . '</span>';\n        } else {\n            $state[] = '<span class=\"text-danger\">'\n                . __('Got no vouchers')\n                . ($availableCount ? ' (' . __('out of %s', [$availableCount]) . ')' : '')\n                . '</span>';\n        }\n    }\n\n    return $state;\n}\n\n/**\n * @param AngelType[] $user_angeltypes\n * @return string\n */\nfunction User_angeltypes_render($user_angeltypes)\n{\n    $output = [];\n    foreach ($user_angeltypes as $angeltype) {\n        $class = 'text-success';\n        if ($angeltype->restricted && !$angeltype->pivot->confirm_user_id) {\n            $class = 'text-warning';\n        }\n        $output[] = '<a href=\"' . angeltype_link($angeltype->id) . '\" class=\"' . $class . '\">'\n            . ($angeltype->pivot->supporter ? icon('patch-check') : '') . htmlspecialchars($angeltype->name)\n            . '</a>';\n    }\n    return div('col-md-2', [\n        heading(__('Angeltypes'), 4),\n        join('<br>', $output),\n    ]);\n}\n\n/**\n * @param Group[] $user_groups\n * @return string\n */\nfunction User_groups_render($user_groups)\n{\n    $output = [];\n    foreach ($user_groups as $group) {\n        $output[] = __(htmlspecialchars($group->name));\n    }\n\n    return div('col-md-2', [\n        '<h4>' . __('Rights') . '</h4>',\n        join('<br>', $output),\n    ]);\n}\n\n/**\n * @param User $user\n * @return string\n */\nfunction User_oauth_render(User $user)\n{\n    $config = config('oauth');\n\n    $output = [];\n    foreach ($user->oauth as $oauth) {\n        $output[] = __(\n            htmlspecialchars(\n                isset($config[$oauth->provider]['name'])\n                    ? $config[$oauth->provider]['name']\n                    : Str::ucfirst($oauth->provider)\n            )\n        );\n    }\n\n    if (!$output) {\n        return '';\n    }\n\n    return div('col-md-2', [\n        heading(__('OAuth'), 4),\n        join('<br>', $output),\n    ]);\n}\n\n/**\n * Render a user nickname.\n *\n * @param array|User $user\n * @param bool       $plain\n * @return string\n */\nfunction User_Nick_render($user, $plain = false)\n{\n    if (is_array($user)) {\n        $user = (new User())->forceFill($user);\n    }\n\n    if ($plain) {\n        return sprintf('%s (%u)', $user->displayName, $user->id);\n    }\n\n    return render_profile_link(\n        '<span class=\"icon-icon_angel\"></span> ' . htmlspecialchars($user->displayName) . '</a>',\n        $user->id,\n        ($user->state->arrived ? '' : 'text-muted')\n    );\n}\n\n/**\n * Format the user pronoun\n *\n * @param User $user\n * @return string\n */\nfunction User_Pronoun_render(User $user): string\n{\n    if (!config('enable_pronoun') || !$user->personalData->pronoun) {\n        return '';\n    }\n\n    return ' (' . htmlspecialchars($user->personalData->pronoun) . ')';\n}\n\n/**\n * @param string $text\n * @param int    $user_id\n * @param string $class\n * @return string\n */\nfunction render_profile_link($text, $user_id = null, $class = '')\n{\n    $profile_link = page_link_to('settings/profile');\n    if (!is_null($user_id)) {\n        $profile_link = page_link_to('users', ['action' => 'view', 'user_id' => $user_id]);\n    }\n\n    return sprintf(\n        '<a class=\"%s\" href=\"%s\">%s</a>',\n        $class,\n        $profile_link,\n        $text\n    );\n}\n\n/**\n * @return string|null\n */\nfunction render_user_departure_date_hint()\n{\n    if (config('enable_planned_arrival') && !auth()->user()->personalData->planned_departure_date) {\n        $text = __('Please enter your planned date of departure on your settings page to give us a feeling for teardown capacities.');\n        return render_profile_link($text, null, 'text-danger');\n    }\n\n    return null;\n}\n\n/**\n * @return string|null\n */\nfunction render_user_freeloader_hint()\n{\n    if (auth()->user()->isFreeloader()) {\n        return sprintf(\n            __('You freeloaded at least %s shifts. Shift signup is locked. Please go to heavens desk to be unlocked again.'),\n            config('max_freeloadable_shifts')\n        );\n    }\n\n    return null;\n}\n\n/**\n * Hinweis f\u00fcr Engel, die noch nicht angekommen sind\n *\n * @return string|null\n */\nfunction render_user_arrived_hint()\n{\n    if (config('signup_requires_arrival') && !auth()->user()->state->arrived) {\n        /** @var Carbon $buildup */\n        $buildup = config('buildup_start');\n        if (!empty($buildup) && $buildup->lessThan(new Carbon())) {\n            return __('You are not marked as arrived. Please go to heaven\\'s desk, get your angel badge and/or tell them that you arrived already.');\n        }\n    }\n\n    return null;\n}\n\n/**\n * @return string|null\n */\nfunction render_user_tshirt_hint()\n{\n    $goodie = GoodieType::from(config('goodie_type'));\n    $goodie_tshirt = $goodie === GoodieType::Tshirt;\n    if ($goodie_tshirt && !auth()->user()->personalData->shirt_size) {\n        $text = __('You need to specify a tshirt size in your settings!');\n        return render_profile_link($text);\n    }\n\n    return null;\n}\n\n/**\n * @return string|null\n */\nfunction render_user_dect_hint()\n{\n    $user = auth()->user();\n    if (\n        $user->state->arrived\n        && config('enable_dect') && !$user->contact->dect\n    ) {\n        $text = __('You need to specify a DECT phone number in your settings! If you don\\'t have a DECT phone, just enter \\'-\\'.');\n        return render_profile_link($text);\n    }\n\n    return null;\n}\n", "{% extends \"emails/mail.twig\" %}\n\n{% set url=url('/angeltypes', {'action': 'view', 'angeltype_id': angeltype.id}) %}\n\n{% block introduction %}\n{{ __('notification.angeltype.added.introduction', [angeltype.name|e, url])|raw }}\n{% endblock %}\n\n{% block message %}\n{{ __('notification.angeltype.added.text', [angeltype.name|e, url])|raw }}\n{% endblock %}\n", "{% extends \"emails/mail.twig\" %}\n\n{% set url=url('/angeltypes', {'action': 'view', 'angeltype_id': angeltype.id}) %}\n\n{% block introduction %}\n{{ __('notification.angeltype.confirmed.introduction', [angeltype.name|e, url])|raw }}\n{% endblock %}\n\n{% block message %}\n{{ __('notification.angeltype.confirmed.text', [angeltype.name|e, url])|raw }}\n{% endblock %}\n", "{% extends \"layouts/app.twig\" %}\n{% import 'macros/base.twig' as m %}\n\n{% block title %}{{ __('login.login') }}{% endblock %}\n\n{% block content %}\n    <div class=\"col-md-12\">\n        <div class=\"row mb-3 mt-5\">\n            <div class=\"col-sm-12 text-center\" id=\"welcome-title\">\n                <h2>{{ __('Welcome to the %s!', [config('name')|e ~ m.angel() ~ (config('app_name')|upper|e) ])|raw }}</h2>\n            </div>\n        </div>\n\n        <div class=\"row mb-3\">\n            {% for name,date in {\n                (__('Buildup starts')): config('buildup_start'),\n                (__('Event starts')): config('event_start'),\n                (__('Event ends')): config('event_end'),\n                (__('Teardown ends')): config('teardown_end')\n            } | filter(date => date) %}\n                {% if date > date() %}\n                    <div class=\"col-sm-3 text-center d-none d-sm-block\">\n                        <h4>{{ name }}</h4>\n                        <div class=\"h2 text-body\" title=\"{{ date.format(__('Y-m-d H:i')) }}\" data-countdown-ts=\"{{ date.getTimestamp() }}\">%c</div>\n                        <small>{{ date.format(__('Y-m-d')) }}</small>\n                    </div>\n                {% endif %}\n            {% endfor %}\n        </div>\n\n        <div class=\"row mb-5\">\n            <div class=\"col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n                <div class=\"card {{ m.type_bg_class() }}\">\n                    <div class=\"card-body\">\n                        {% include 'layouts/parts/messages.twig' %}\n\n                        {% if session_get('show_welcome', false) %}\n                            {{ m.alert(config('welcome_msg') | md, null, true) }}\n                        {% endif %}\n\n                        <form action=\"\" enctype=\"multipart/form-data\" method=\"post\">\n                            {{ csrf() }}\n                            <div class=\"mb-3\">\n                                <div class=\"input-group input-group-lg\">\n                                    <span class=\"input-group-text {{ m.type_text_class() }}\">\n                                        {{ m.angel }}\n                                    </span>\n                                    <input\n                                        class=\"form-control\"\n                                        id=\"form_nick\"\n                                        type=\"text\"\n                                        name=\"login\"\n                                        value=\"\"\n                                        placeholder=\"{{ __('Nick') }}\"\n                                        autofocus>\n                                </div>\n                            </div>\n\n                            <div class=\"mb-3\">\n                                <div class=\"input-group input-group-lg\">\n                                    <span class=\"input-group-text {{ m.type_text_class() }}\">\n                                        <i class=\"bi bi-key\"></i>\n                                    </span>\n                                    <input\n                                        class=\"form-control\" id=\"form_password\" type=\"password\"\n                                        name=\"password\" value=\"\" placeholder=\"{{ __('Password') }}\" autocomplete=\"current-password\"\n                                    >\n                                </div>\n                            </div>\n\n                            <div class=\"mb-3 text-center\">\n                                <button class=\"btn btn-primary btn-lg btn-block\" type=\"submit\" name=\"submit\">\n                                    {{ __('login.login') }}\n                                </button>\n                            </div>\n\n                            {%  if config('oauth') is not empty %}\n                                <div class=\"row\">\n                                    <div class=\"mb-3 btn-group\">\n                                        {% for name,config in config('oauth') %}\n                                            <a href=\"{{ url('oauth/' ~ name) }}\" class=\"btn btn-primary btn-lg{% if config.hidden|default(false) %} d-none{% endif %}\">\n                                                {{ __(\n                                                    'oauth.login-using-provider',\n                                                    [__(config.name|default(name|capitalize))]\n                                                ) }}\n                                            </a>\n                                        {% endfor %}\n                                    </div>\n                                </div>\n                            {% endif %}\n\n                            <div class=\"text-center\">\n                                <a href=\"{{ url('/password/reset') }}\" class=\"\">\n                                    {{ __('I forgot my password') }}\n                                </a>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row mb-5\">\n            <div class=\"col-sm-6 text-center\">\n                <h2>{{ __('Register') }}</h2>\n                {% if has_permission_to('register') and config('registration_enabled') %}\n                    {% if config('enable_password') %}\n                        <p>{{ __('Please sign up, if you want to help us!') }}</p>\n                        <a href=\"{{ url('register') }}\" class=\"btn btn-primary\">{{ __('Register') }} &raquo;</a>\n                    {% else %}\n                        <p>{{ __('Registration is only available via external login.') }}</p>\n                    {% endif %}\n                {% else %}\n                    {{ m.alert(__('Registration is disabled.'), 'danger') }}\n                {% endif %}\n            </div>\n\n            <div class=\"col-sm-6 text-center\">\n                <h2>{{ __('What can I do?') }}</h2>\n                <p>{{ __('Please read about the jobs you can do to help us.') }}</p>\n                <a href=\"{{ url('/angeltypes/about') }}\" class=\"btn btn-primary\">\n                    {{ __('angeltypes.about') }} &raquo;\n                </a>\n            </div>\n\n            <div class=\"col-md-12 text-center\">\n                {{ m.icon('info-circle') }} {{ __('Please note: You have to activate cookies!') }}\n            </div>\n        </div>\n    </div>\n{% endblock %}\n"], "filenames": ["includes/controller/angeltypes_controller.php", "includes/controller/rooms_controller.php", "includes/controller/shifts_controller.php", "includes/controller/shifttypes_controller.php", "includes/controller/user_angeltypes_controller.php", "includes/controller/users_controller.php", "includes/engelsystem.php", "includes/helper/message_helper.php", "includes/pages/admin_free.php", "includes/pages/admin_groups.php", "includes/pages/admin_shifts.php", "includes/pages/admin_user.php", "includes/pages/guest_login.php", "includes/pages/user_shifts.php", "includes/sys_form.php", "includes/sys_menu.php", "includes/sys_page.php", "includes/sys_template.php", "includes/view/AngelTypes_view.php", "includes/view/PublicDashboard_view.php", "includes/view/Rooms_view.php", "includes/view/ShiftCalendarShiftRenderer.php", "includes/view/ShiftEntry_view.php", "includes/view/ShiftTypes_view.php", "includes/view/Shifts_view.php", "includes/view/UserAngelTypes_view.php", "includes/view/UserHintsRenderer.php", "includes/view/User_view.php", "resources/views/emails/angeltype-added.twig", "resources/views/emails/angeltype-confirmed.twig", "resources/views/pages/login.twig"], "buggy_code_start_loc": [75, 56, 197, 36, 42, 94, 26, 19, 103, 34, 336, 51, 89, 381, 131, 79, 5, 76, 29, 22, 27, 32, 22, 13, 27, 141, 23, 95, 6, 6, 10], "buggy_code_end_loc": [327, 57, 342, 114, 442, 248, 27, 89, 106, 84, 447, 180, 463, 422, 469, 115, 206, 239, 545, 107, 86, 266, 224, 99, 201, 170, 26, 972, 11, 11, 11], "fixing_code_start_loc": [75, 56, 197, 36, 42, 94, 26, 20, 103, 34, 336, 51, 89, 380, 131, 79, 4, 75, 29, 22, 27, 32, 22, 13, 27, 141, 23, 95, 6, 6, 10], "fixing_code_end_loc": [327, 57, 345, 114, 442, 248, 27, 97, 106, 84, 447, 198, 463, 413, 419, 122, 151, 228, 556, 109, 86, 266, 224, 99, 209, 170, 26, 980, 11, 11, 11], "type": "CWE-79", "message": "Englesystem is a shift planning system for chaos events. Engelsystem prior to v3.4.1 performed insufficient validation of user supplied data for the DECT number, mobile number, and work-log comment fields. The values of those fields would be displayed in corresponding log overviews, allowing the injection and execution of Javascript code in another user's context. This vulnerability enables an authenticated user to inject Javascript into other user's sessions. The injected JS will be executed during normal usage of the system when viewing, e.g., overview pages. This issue has been fixed in version 3.4.1.", "other": {"cve": {"id": "CVE-2023-50924", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-22T21:15:08.370", "lastModified": "2024-01-05T12:09:54.470", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Englesystem is a shift planning system for chaos events. Engelsystem prior to v3.4.1 performed insufficient validation of user supplied data for the DECT number, mobile number, and work-log comment fields. The values of those fields would be displayed in corresponding log overviews, allowing the injection and execution of Javascript code in another user's context. This vulnerability enables an authenticated user to inject Javascript into other user's sessions. The injected JS will be executed during normal usage of the system when viewing, e.g., overview pages. This issue has been fixed in version 3.4.1."}, {"lang": "es", "value": "Englesystem es un sistema de planificaci\u00f3n de turnos para eventos de caos. Engelsystem anterior a v3.4.1 realizaba una validaci\u00f3n insuficiente de los datos proporcionados por el usuario para los campos de DECT number, mobile number y work-log comment fields. Los valores de esos campos se mostrar\u00edan en las descripciones generales de registros correspondientes, lo que permitir\u00eda la inyecci\u00f3n y ejecuci\u00f3n de c\u00f3digo Javascript en el contexto de otro usuario. Esta vulnerabilidad permite a un usuario autenticado inyectar Javascript en las sesiones de otros usuarios. El JS inyectado se ejecutar\u00e1 durante el uso normal del sistema al visualizar, por ejemplo, p\u00e1ginas de descripci\u00f3n general. Este problema se solucion\u00f3 en la versi\u00f3n 3.4.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:engelsystem:engelsystem:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.4.1", "matchCriteriaId": "7FFE9236-E9EA-4C61-908B-D8F668F22099"}]}]}], "references": [{"url": "https://github.com/engelsystem/engelsystem/commit/efda1ffc1ce59f02a7d237d9087adea26e73ec5f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/engelsystem/engelsystem/security/advisories/GHSA-p5ch-rrpm-wvhm", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/engelsystem/engelsystem/commit/efda1ffc1ce59f02a7d237d9087adea26e73ec5f"}}