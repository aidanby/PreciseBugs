{"buggy_code": ["<?php if (!defined('APPLICATION')) exit();\n/*\nCopyright 2008, 2009 Vanilla Forums Inc.\nThis file is part of Garden.\nGarden is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nGarden is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with Garden.  If not, see <http://www.gnu.org/licenses/>.\nContact Vanilla Forums Inc. at support [at] vanillaforums [dot] com\n*/\n/**\n * Utility Controller\n *\n * @package Dashboard\n */\n \n/**\n * Perform miscellaneous operations for Dashboard.\n *\n * @since 2.0.0\n * @package Dashboard\n */\nclass UtilityController extends DashboardController {\n   /** @var array Models to automatically instantiate. */\n   public $Uses = array('Form');\n   \n   /**\n    * Redirect to another page.\n    * @since 2.0.18b4\n    */\n   public function Redirect() {\n      $Args = func_get_args();\n      $Path = $this->Request->Path();\n      if (count($Args) > 0) {\n         if (in_array($Args[0], array('http', 'https'))) {\n            $Protocal = array_shift($Args);\n         } else {\n            $Protocal = 'http';\n         }\n         $Url = $Protocal.'://'.implode($Args, '/');\n      } else {\n         $Url = Url('/', TRUE);\n      }\n      \n      $Get = $this->Request->Get();\n      if (count($Get) > 0) {\n         $Query = '?'.http_build_query($Get);\n      } else {\n         $Query = '';\n      }\n      \n      Redirect($Url.$Query);\n   }\n   \n   /**\n    * Set the sort order for data on an arbitrary database table.\n    *\n    * Expect post values TransientKey, Target (redirect URL), Table (database table name),\n    * and TableID (an array of sort order => unique ID).\n    *\n    * @since 2.0.0\n    * @access public\n    */\n   public function Sort() {\n      $Session = Gdn::Session();\n      $TransientKey = GetPostValue('TransientKey', '');\n      $Target = GetPostValue('Target', '');\n      if ($Session->ValidateTransientKey($TransientKey)) {\n         $TableID = GetPostValue('TableID', FALSE);\n         if ($TableID) {\n            $Rows = GetPostValue($TableID, FALSE);\n            if (is_array($Rows)) {\n               try {\n                  $Table = str_replace('Table', '', $TableID);\n                  $TableModel = new Gdn_Model($Table);\n                  foreach ($Rows as $Sort => $ID) {\n                     $TableModel->Update(array('Sort' => $Sort), array($Table.'ID' => $ID));\n                  }\n               } catch (Exception $ex) {\n                  $this->Form->AddError($ex->getMessage());\n               }\n            }\n         }\n      }\n      if ($this->DeliveryType() != DELIVERY_TYPE_BOOL)\n         Redirect($Target);\n         \n      $this->Render();\n   }\n   \n   /**\n    * Allows the setting of data into one of two serialized data columns on the\n    * user table: Preferences and Attributes. \n    *\n    * The method expects \"Name\" & \"Value\" to be in the $_POST collection. This method always \n    * saves to the row of the user id performing this action (ie. $Session->UserID). The\n    * type of property column being saved should be specified in the url:\n    * i.e. /dashboard/utility/set/preference/name/value/transientKey\n    * or /dashboard/utility/set/attribute/name/value/transientKey\n    *\n    * @since 2.0.0\n    * @access public\n    * @param string $UserPropertyColumn The type of value being saved: preference or attribute.\n    * @param string $Name The name of the property being saved.\n    * @param string $Value The value of the property being saved.\n    * @param string $TransientKey A unique transient key to authenticate that the user intended to perform this action.\n    */\n   public function Set($UserPropertyColumn = '', $Name = '', $Value = '', $TransientKey = '') {\n      $this->_DeliveryType = DELIVERY_TYPE_BOOL;\n      $Session = Gdn::Session();\n      $Success = FALSE;\n      if (\n         in_array($UserPropertyColumn, array('preference', 'attribute'))\n         && $Name != ''\n         && $Value != ''\n         && $Session->UserID > 0\n         && $Session->ValidateTransientKey($TransientKey)\n      ) {\n         $UserModel = Gdn::Factory(\"UserModel\");\n         $Method = $UserPropertyColumn == 'preference' ? 'SavePreference' : 'SaveAttribute';\n         $Success = $UserModel->$Method($Session->UserID, $Name, $Value) ? 'TRUE' : 'FALSE';\n      }\n      \n      if (!$Success)\n         $this->Form->AddError('ErrorBool');\n      \n      // Redirect back where the user came from if necessary\n      if ($this->_DeliveryType == DELIVERY_TYPE_ALL)\n         Redirect($_SERVER['HTTP_REFERER']);\n      else\n         $this->Render();\n   }\n   \n   /**\n    * Update database structure based on current definitions in each app's structure.php file.\n    *\n    * @since 2.0.?\n    * @access public\n    * @param string $AppName Unique app name or 'all' (default).\n    * @param int $CaptureOnly Whether to list changes rather than execture (0 or 1).\n    * @param int $Drop Whether to drop first (0 or 1).\n    * @param int $Explicit Whether to force to only columns currently listed (0 or 1).\n    */\n   public function Structure($AppName = 'all', $CaptureOnly = '1', $Drop = '0', $Explicit = '0') {\n      $this->Permission('Garden.Settings.Manage');\n      $Files = array();\n      $AppName = $AppName == '' ? 'all': $AppName;\n      if ($AppName == 'all') {\n\t\t\t// Load all application structure files.\n\t\t\t$ApplicationManager = new Gdn_ApplicationManager();\n\t\t\t$Apps = $ApplicationManager->EnabledApplications();\n\t\t\t$AppNames = ConsolidateArrayValuesByKey($Apps, 'Folder');\n\t\t\tforeach ($AppNames as $AppName) {\n\t\t\t\t$Files[] = CombinePaths(array(PATH_APPLICATIONS, $AppName, 'settings', 'structure.php'), DS);\n\t\t\t}\n\t\t\t$AppName = 'all';\n      } else {\n\t\t\t // Load that specific application structure file.\n         $Files[] = CombinePaths(array(PATH_APPLICATIONS, $AppName, 'settings', 'structure.php'), DS);\n      }\n      $Validation = new Gdn_Validation();\n      $Database = Gdn::Database();\n      $Drop = $Drop == '0' ? FALSE : TRUE;\n      $Explicit = $Explicit == '0' ? FALSE : TRUE;\n      $CaptureOnly = !($CaptureOnly == '0');\n      $Structure = Gdn::Structure();\n      $Structure->CaptureOnly = $CaptureOnly;\n      $SQL = Gdn::SQL();\n      $SQL->CaptureModifications = $CaptureOnly;\n      $this->SetData('CaptureOnly', $Structure->CaptureOnly);\n      $this->SetData('Drop', $Drop);\n      $this->SetData('Explicit', $Explicit);\n      $this->SetData('ApplicationName', $AppName);\n      $this->SetData('Status', '');\n      $FoundStructureFile = FALSE;\n      foreach ($Files as $File) {\n         if (file_exists($File)) {\n\t\t\t   $FoundStructureFile = TRUE;\n\t\t\t   try {\n\t\t\t      include($File);\n\t\t\t   } catch (Exception $Ex) {\n\t\t\t      $this->Form->AddError($Ex);\n\t\t\t   }\n\t\t\t}\n      }\n\n      // Run the structure of all of the plugins.\n      $Plugins = Gdn::PluginManager()->EnabledPlugins();\n      foreach ($Plugins as $PluginKey => $Plugin) {\n         $PluginInstance = Gdn::PluginManager()->GetPluginInstance($PluginKey, Gdn_PluginManager::ACCESS_PLUGINNAME);\n         if (method_exists($PluginInstance, 'Structure'))\n            $PluginInstance->Structure();\n      }\n\n      if (property_exists($Structure->Database, 'CapturedSql'))\n         $this->SetData('CapturedSql', (array)$Structure->Database->CapturedSql);\n      else\n         $this->SetData('CapturedSql', array());\n\n      if ($this->Form->ErrorCount() == 0 && !$CaptureOnly && $FoundStructureFile)\n         $this->SetData('Status', 'The structure was successfully executed.');\n\n\t\t$this->AddSideMenu('dashboard/settings/configure');\n      $this->AddCssFile('admin.css');\n      $this->SetData('Title', T('Database Structure Upgrades'));\n      $this->Render();\n   }\n   \n   /**\n    * Run a structure update on the database.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function Update() {\n      // Check for permission or flood control.\n      // These settings are loaded/saved to the database because we don't want the config file storing non/config information.\n      $Now = time();\n      $LastTime = Gdn::Get('Garden.Update.LastTimestamp', 0);\n\n      if ($LastTime + (60 * 60 * 24) > $Now) {\n         // Check for flood control.\n         $Count = Gdn::Get('Garden.Update.Count', 0) + 1;\n         if ($Count > 5) {\n            if (!Gdn::Session()->CheckPermission('Garden.Settings.Manage')) {\n               // We are only allowing an update of 5 times every 24 hours.\n               throw PermissionException();\n            }\n         }\n      } else {\n         $Count = 1;\n      }\n      Gdn::Set('Garden.Update.LastTimestamp', $Now);\n      Gdn::Set('Garden.Update.Count', $Count);\n      \n      try {\n         // Run the structure.\n         $UpdateModel = new UpdateModel();\n         $UpdateModel->RunStructure();\n         $this->SetData('Success', TRUE);\n      } catch (Exception $Ex) {\n         $this->SetData('Success', FALSE);\n      }\n      \n      if (Gdn::Session()->CheckPermission('Garden.Settings.Manage')) {\n         SaveToConfig('Garden.Version', APPLICATION_VERSION);\n      }\n      \n      if ($Target = $this->Request->Get('Target')) {\n         Redirect($Target);\n      }\n\n      $this->MasterView = 'empty';\n      $this->CssClass = 'Home';\n      $this->Render();\n   }\n   \n   /**\n    * Because people try this a lot and get confused.\n    *\n    * @since 2.0.18\n    * @access public\n    */\n   public function Upgrade() {\n      $this->Update();\n   }\n   \n   /**\n    * Signs of life.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function Alive() {\n      $this->SetData('Success', TRUE);\n      $this->MasterView = 'empty';\n      $this->CssClass = 'Home';\n      $this->Render();\n   }\n   \n   /**\n    * Because you cannot send xmlhttprequests across domains, we need to use\n    * a proxy to check for updates.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function UpdateProxy() {\n      $Fields = $_POST;\n      foreach ($Fields as $Field => $Value) {\n         if (get_magic_quotes_gpc()) {\n            if (is_array($Value)) {\n               $Count = count($Value);\n               for ($i = 0; $i < $Count; ++$i) {\n                  $Value[$i] = stripslashes($Value[$i]);\n               }\n            } else {\n               $Value = stripslashes($Value);\n            }\n            $Fields[$Field] = $Value;\n         }\n      }\n      \n\t\t$UpdateCheckUrl = C('Garden.UpdateCheckUrl', 'http://vanillaforums.org/addons/update');\n      echo ProxyRequest($UpdateCheckUrl.'?'.http_build_query($Fields));\n      $Database = Gdn::Database();\n      $Database->CloseConnection();\n   }\n   \n   /**\n    * What the mothership said about update availability.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function UpdateResponse() {\n      // Get the message, response, and transientkey\n      $Messages = TrueStripSlashes(GetValue('Messages', $_POST));\n      $Response = TrueStripSlashes(GetValue('Response', $_POST));\n      $TransientKey = GetIncomingValue('TransientKey', '');\n      \n      // If the key validates\n      $Session = Gdn::Session();\n      if ($Session->ValidateTransientKey($TransientKey)) {\n         // If messages wasn't empty\n         if ($Messages != '') {\n            // Unserialize them & save them if necessary\n            $Messages = Gdn_Format::Unserialize($Messages);\n            if (is_array($Messages)) {\n               $MessageModel = new MessageModel();\n               foreach ($Messages as $Message) {\n                  // Check to see if it already exists, and if not, add it.\n                  if (is_object($Message))\n                     $Message = Gdn_Format::ObjectAsArray($Message);\n\n                  $Content = ArrayValue('Content', $Message, '');\n                  if ($Content != '') {\n                     $Data = $MessageModel->GetWhere(array('Content' => $Content));\n                     if ($Data->NumRows() == 0) {\n                        $MessageModel->Save(array(\n                           'Content' => $Content,\n                           'AllowDismiss' => ArrayValue('AllowDismiss', $Message, '1'),\n                           'Enabled' => ArrayValue('Enabled', $Message, '1'),\n                           'Application' => ArrayValue('Application', $Message, 'Dashboard'),\n                           'Controller' => ArrayValue('Controller', $Message, 'Settings'),\n                           'Method' => ArrayValue('Method', $Message, ''),\n                           'AssetTarget' => ArrayValue('AssetTarget', $Message, 'Content'),\n                           'CssClass' => ArrayValue('CssClass', $Message, '')\n                        ));\n                     }\n                  }\n               }\n            }\n         }\n\n         // Save some info to the configuration file\n         $Save = array();\n\n         // If the response wasn't empty, save it in the config\n         if ($Response != '')\n            $Save['Garden.RequiredUpdates'] = Gdn_Format::Unserialize($Response);\n      \n         // Record the current update check time in the config.\n         $Save['Garden.UpdateCheckDate'] = time();\n         SaveToConfig($Save);\n      }\n   }\n   \n   /**\n    * Set the user's timezone (hour offset).\n    *\n    * @since 2.0.0\n    * @access public\n    * @param string $ClientDate Client-reported datetime.\n    * @param string $TransientKey Security token.\n    */\n   public function SetClientHour($ClientDate = '', $TransientKey = '') {\n      $this->_DeliveryType = DELIVERY_TYPE_BOOL;\n      $Session = Gdn::Session();\n      $Success = FALSE;\n\n      $ClientTimestamp = Gdn_Format::ToTimestamp($ClientDate);\n\n      if (\n\t\t\tis_numeric($ClientTimestamp)\n\t\t\t&& $Session->UserID > 0\n         && $Session->ValidateTransientKey($TransientKey)\n      ) {\n         $UserModel = Gdn::UserModel();\n\t\t\t$HourOffset = $ClientTimestamp - time();\n         $HourOffset = round($HourOffset / 3600);\n         \n\t\t\t$UserModel->SetField($Session->UserID, 'HourOffset', $HourOffset);\n\t\t\t$Success = TRUE;\n      }\n         \n      $this->Render();\n   }\n\t\n\t/**\n    * Grab a feed from the mothership.\n    *\n    * @since 2.0.?\n    * @access public\n    * @param string $Type Type of feed.\n    * @param int $Length Number of items to get.\n    * @param string $FeedFormat How we want it (valid formats are 'normal' or 'sexy'. OK, not really).\n    */\n\tpublic function GetFeed($Type = 'news', $Length = 5, $FeedFormat = 'normal') {\n\t\techo file_get_contents('http://vanillaforums.org/vforg/home/getfeed/'.$Type.'/'.$Length.'/'.$FeedFormat.'/?DeliveryType=VIEW');\n\t\t$this->DeliveryType(DELIVERY_TYPE_NONE);\n      $this->Render();\n\t}\n}", "<?php\ndefine('APPLICATION', 'Vanilla');\ndefine('APPLICATION_VERSION', '2.0.18.5');\n/*\nCopyright 2008, 2009 Vanilla Forums Inc.\nThis file is part of Garden.\nGarden is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nGarden is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with Garden.  If not, see <http://www.gnu.org/licenses/>.\nContact Vanilla Forums Inc. at support [at] vanillaforums [dot] com\n*/\n\n// Report and track all errors.\nerror_reporting(E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR);\nini_set('display_errors', 'on');\nini_set('track_errors', 1);\n\nob_start();\n\n// 0. Start profiling if requested in the querystring\nif (isset($_GET['xhprof']) && $_GET['xhprof'] == 'yes')\n   define('PROFILER', TRUE);\n\nif (defined('PROFILER') && PROFILER) {\n   $ProfileWhat = 0;\n   \n   if (isset($_GET['memory']) && $_GET['memory'] == 'yes')\n      $ProfileWhat += XHPROF_FLAGS_MEMORY;\n   \n   if (isset($_GET['cpu']) && $_GET['cpu'] == 'yes')\n      $ProfileWhat += XHPROF_FLAGS_CPU;\n   \n   xhprof_enable($ProfileWhat);\n}\n\n// 1. Define the constants we need to get going.\ndefine('DS', '/');\ndefine('PATH_ROOT', dirname(__FILE__));\n\n// 2. Include the bootstrap to configure the framework.\nrequire_once(PATH_ROOT.'/bootstrap.php');\n\n// 3. Create and configure the dispatcher.\n// TIM: Removed this change temporarily for .com hosting\n// Gdn::Authenticator()->StartAuthenticator();\n$Dispatcher = Gdn::Dispatcher();\n\n$EnabledApplications = Gdn::ApplicationManager()->EnabledApplicationFolders();\n$Dispatcher->EnabledApplicationFolders($EnabledApplications);\n$Dispatcher->PassProperty('EnabledApplications', $EnabledApplications);\n\n// 4. Process the request.\n$Dispatcher->Dispatch();\n$Dispatcher->Cleanup();\n\n// 5. Finish profiling and save results to disk, if requested\nif (defined('PROFILER') && PROFILER) {\n   $xhprof_data = xhprof_disable();\n   \n   if (is_null($XHPROF_ROOT))\n      die(\"Unable to save XHProf data. \\$XHPROF_ROOT not defined in index.php\");\n\n   if (is_null($XHPROF_SERVER_NAME))\n      die(\"Unable to save XHProf data. \\$XHPROF_SERVER_NAME not defined in index.php\");\n   \n   //\n   // Saving the XHProf run\n   // using the default implementation of iXHProfRuns.\n   //\n   include_once(\"{$XHPROF_ROOT}/xhprof_lib/utils/xhprof_lib.php\");\n   include_once(\"{$XHPROF_ROOT}/xhprof_lib/utils/xhprof_runs.php\");\n\n   $xhprof_runs = new XHProfRuns_Default();\n   $xhprof_namespace = 'vanilla';\n\n   // Save the run under a namespace              \n   //\n   // **NOTE**:\n   // By default save_run() will automatically generate a unique\n   // run id for you. [You can override that behavior by passing\n   // a run id (optional arg) to the save_run() method instead.]\n   //\n   $run_id = $xhprof_runs->save_run($xhprof_data, $xhprof_namespace);\n\n   echo \"http://{$XHPROF_SERVER_NAME}/index.php?run={$run_id}&source={$xhprof_namespace}\\n\";\n\n}\n"], "fixing_code": ["<?php if (!defined('APPLICATION')) exit();\n/*\nCopyright 2008, 2009 Vanilla Forums Inc.\nThis file is part of Garden.\nGarden is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nGarden is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with Garden.  If not, see <http://www.gnu.org/licenses/>.\nContact Vanilla Forums Inc. at support [at] vanillaforums [dot] com\n*/\n/**\n * Utility Controller\n *\n * @package Dashboard\n */\n \n/**\n * Perform miscellaneous operations for Dashboard.\n *\n * @since 2.0.0\n * @package Dashboard\n */\nclass UtilityController extends DashboardController {\n   /** @var array Models to automatically instantiate. */\n   public $Uses = array('Form');\n   \n   /**\n    * Redirect to another page.\n    * @since 2.0.18b4\n    */\n   public function Redirect() {\n      $Args = func_get_args();\n      $Path = $this->Request->Path();\n      if (count($Args) > 0) {\n         if (in_array($Args[0], array('http', 'https'))) {\n            $Protocal = array_shift($Args);\n         } else {\n            $Protocal = 'http';\n         }\n         $Url = $Protocal.'://'.implode($Args, '/');\n      } else {\n         $Url = Url('/', TRUE);\n      }\n      \n      $Get = $this->Request->Get();\n      if (count($Get) > 0) {\n         $Query = '?'.http_build_query($Get);\n      } else {\n         $Query = '';\n      }\n      \n      Redirect($Url.$Query);\n   }\n   \n   /**\n    * Set the sort order for data on an arbitrary database table.\n    *\n    * Expect post values TransientKey, Target (redirect URL), Table (database table name),\n    * and TableID (an array of sort order => unique ID).\n    *\n    * @since 2.0.0\n    * @access public\n    */\n   public function Sort() {\n      $Session = Gdn::Session();\n      $TransientKey = GetPostValue('TransientKey', '');\n      $Target = GetPostValue('Target', '');\n      if ($Session->ValidateTransientKey($TransientKey)) {\n         $TableID = GetPostValue('TableID', FALSE);\n         if ($TableID) {\n            $Rows = GetPostValue($TableID, FALSE);\n            if (is_array($Rows)) {\n               try {\n                  $Table = str_replace('Table', '', $TableID);\n                  $TableModel = new Gdn_Model($Table);\n                  foreach ($Rows as $Sort => $ID) {\n                     $TableModel->Update(array('Sort' => $Sort), array($Table.'ID' => $ID));\n                  }\n               } catch (Exception $ex) {\n                  $this->Form->AddError($ex->getMessage());\n               }\n            }\n         }\n      }\n      if ($this->DeliveryType() != DELIVERY_TYPE_BOOL)\n         Redirect($Target);\n         \n      $this->Render();\n   }\n   \n   /**\n    * Allows the setting of data into one of two serialized data columns on the\n    * user table: Preferences and Attributes. \n    *\n    * The method expects \"Name\" & \"Value\" to be in the $_POST collection. This method always \n    * saves to the row of the user id performing this action (ie. $Session->UserID). The\n    * type of property column being saved should be specified in the url:\n    * i.e. /dashboard/utility/set/preference/name/value/transientKey\n    * or /dashboard/utility/set/attribute/name/value/transientKey\n    *\n    * @since 2.0.0\n    * @access public\n    * @param string $UserPropertyColumn The type of value being saved: preference or attribute.\n    * @param string $Name The name of the property being saved.\n    * @param string $Value The value of the property being saved.\n    * @param string $TransientKey A unique transient key to authenticate that the user intended to perform this action.\n    */\n   public function Set($UserPropertyColumn = '', $Name = '', $Value = '', $TransientKey = '') {\n      $this->_DeliveryType = DELIVERY_TYPE_BOOL;\n      $Session = Gdn::Session();\n      $Success = FALSE;\n      if (\n         in_array($UserPropertyColumn, array('preference', 'attribute'))\n         && $Name != ''\n         && $Value != ''\n         && $Session->UserID > 0\n         && $Session->ValidateTransientKey($TransientKey)\n      ) {\n         $UserModel = Gdn::Factory(\"UserModel\");\n         $Method = $UserPropertyColumn == 'preference' ? 'SavePreference' : 'SaveAttribute';\n         $Success = $UserModel->$Method($Session->UserID, $Name, $Value) ? 'TRUE' : 'FALSE';\n      }\n      \n      if (!$Success)\n         $this->Form->AddError('ErrorBool');\n      \n      // Redirect back where the user came from if necessary\n      if ($this->_DeliveryType == DELIVERY_TYPE_ALL)\n         Redirect($_SERVER['HTTP_REFERER']);\n      else\n         $this->Render();\n   }\n   \n   /**\n    * Update database structure based on current definitions in each app's structure.php file.\n    *\n    * @since 2.0.?\n    * @access public\n    * @param string $AppName Unique app name or 'all' (default).\n    * @param int $CaptureOnly Whether to list changes rather than execture (0 or 1).\n    * @param int $Drop Whether to drop first (0 or 1).\n    * @param int $Explicit Whether to force to only columns currently listed (0 or 1).\n    */\n   public function Structure($AppName = 'all', $CaptureOnly = '1', $Drop = '0', $Explicit = '0') {\n      $this->Permission('Garden.Settings.Manage');\n      $Files = array();\n      $AppName = $AppName == '' ? 'all': $AppName;\n      if ($AppName == 'all') {\n\t\t\t// Load all application structure files.\n\t\t\t$ApplicationManager = new Gdn_ApplicationManager();\n\t\t\t$Apps = $ApplicationManager->EnabledApplications();\n\t\t\t$AppNames = ConsolidateArrayValuesByKey($Apps, 'Folder');\n\t\t\tforeach ($AppNames as $AppName) {\n\t\t\t\t$Files[] = CombinePaths(array(PATH_APPLICATIONS, $AppName, 'settings', 'structure.php'), DS);\n\t\t\t}\n\t\t\t$AppName = 'all';\n      } else {\n\t\t\t // Load that specific application structure file.\n         $Files[] = CombinePaths(array(PATH_APPLICATIONS, $AppName, 'settings', 'structure.php'), DS);\n      }\n      $Validation = new Gdn_Validation();\n      $Database = Gdn::Database();\n      $Drop = $Drop == '0' ? FALSE : TRUE;\n      $Explicit = $Explicit == '0' ? FALSE : TRUE;\n      $CaptureOnly = !($CaptureOnly == '0');\n      $Structure = Gdn::Structure();\n      $Structure->CaptureOnly = $CaptureOnly;\n      $SQL = Gdn::SQL();\n      $SQL->CaptureModifications = $CaptureOnly;\n      $this->SetData('CaptureOnly', $Structure->CaptureOnly);\n      $this->SetData('Drop', $Drop);\n      $this->SetData('Explicit', $Explicit);\n      $this->SetData('ApplicationName', $AppName);\n      $this->SetData('Status', '');\n      $FoundStructureFile = FALSE;\n      foreach ($Files as $File) {\n         if (file_exists($File)) {\n\t\t\t   $FoundStructureFile = TRUE;\n\t\t\t   try {\n\t\t\t      include($File);\n\t\t\t   } catch (Exception $Ex) {\n\t\t\t      $this->Form->AddError($Ex);\n\t\t\t   }\n\t\t\t}\n      }\n\n      // Run the structure of all of the plugins.\n      $Plugins = Gdn::PluginManager()->EnabledPlugins();\n      foreach ($Plugins as $PluginKey => $Plugin) {\n         $PluginInstance = Gdn::PluginManager()->GetPluginInstance($PluginKey, Gdn_PluginManager::ACCESS_PLUGINNAME);\n         if (method_exists($PluginInstance, 'Structure'))\n            $PluginInstance->Structure();\n      }\n\n      if (property_exists($Structure->Database, 'CapturedSql'))\n         $this->SetData('CapturedSql', (array)$Structure->Database->CapturedSql);\n      else\n         $this->SetData('CapturedSql', array());\n\n      if ($this->Form->ErrorCount() == 0 && !$CaptureOnly && $FoundStructureFile)\n         $this->SetData('Status', 'The structure was successfully executed.');\n\n\t\t$this->AddSideMenu('dashboard/settings/configure');\n      $this->AddCssFile('admin.css');\n      $this->SetData('Title', T('Database Structure Upgrades'));\n      $this->Render();\n   }\n   \n   /**\n    * Run a structure update on the database.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function Update() {\n      // Check for permission or flood control.\n      // These settings are loaded/saved to the database because we don't want the config file storing non/config information.\n      $Now = time();\n      $LastTime = Gdn::Get('Garden.Update.LastTimestamp', 0);\n\n      if ($LastTime + (60 * 60 * 24) > $Now) {\n         // Check for flood control.\n         $Count = Gdn::Get('Garden.Update.Count', 0) + 1;\n         if ($Count > 5) {\n            if (!Gdn::Session()->CheckPermission('Garden.Settings.Manage')) {\n               // We are only allowing an update of 5 times every 24 hours.\n               throw PermissionException();\n            }\n         }\n      } else {\n         $Count = 1;\n      }\n      Gdn::Set('Garden.Update.LastTimestamp', $Now);\n      Gdn::Set('Garden.Update.Count', $Count);\n      \n      try {\n         // Run the structure.\n         $UpdateModel = new UpdateModel();\n         $UpdateModel->RunStructure();\n         $this->SetData('Success', TRUE);\n      } catch (Exception $Ex) {\n         $this->SetData('Success', FALSE);\n      }\n      \n      if (Gdn::Session()->CheckPermission('Garden.Settings.Manage')) {\n         SaveToConfig('Garden.Version', APPLICATION_VERSION);\n      }\n      \n      if ($Target = $this->Request->Get('Target')) {\n         Redirect($Target);\n      }\n\n      $this->MasterView = 'empty';\n      $this->CssClass = 'Home';\n      $this->Render();\n   }\n   \n   /**\n    * Because people try this a lot and get confused.\n    *\n    * @since 2.0.18\n    * @access public\n    */\n   public function Upgrade() {\n      $this->Update();\n   }\n   \n   /**\n    * Signs of life.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function Alive() {\n      $this->SetData('Success', TRUE);\n      $this->MasterView = 'empty';\n      $this->CssClass = 'Home';\n      $this->Render();\n   }\n   \n   /**\n    * Because you cannot send xmlhttprequests across domains, we need to use\n    * a proxy to check for updates.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function UpdateProxy() {\n      $Fields = $_POST;\n      foreach ($Fields as $Field => $Value) {\n         if (get_magic_quotes_gpc()) {\n            if (is_array($Value)) {\n               $Count = count($Value);\n               for ($i = 0; $i < $Count; ++$i) {\n                  $Value[$i] = stripslashes($Value[$i]);\n               }\n            } else {\n               $Value = stripslashes($Value);\n            }\n            $Fields[$Field] = $Value;\n         }\n      }\n      \n\t\t$UpdateCheckUrl = C('Garden.UpdateCheckUrl', 'http://vanillaforums.org/addons/update');\n      echo ProxyRequest($UpdateCheckUrl.'?'.http_build_query($Fields));\n      $Database = Gdn::Database();\n      $Database->CloseConnection();\n   }\n   \n   /**\n    * What the mothership said about update availability.\n    *\n    * @since 2.0.?\n    * @access public\n    */\n   public function UpdateResponse() {\n      // Get the message, response, and transientkey\n      $Response = TrueStripSlashes(GetValue('Response', $_POST));\n      $TransientKey = GetIncomingValue('TransientKey', '');\n      \n      // If the key validates\n      $Session = Gdn::Session();\n      if ($Session->ValidateTransientKey($TransientKey)) {\n         // Save some info to the configuration file\n         $Save = array();\n\n         // If the response wasn't empty, save it in the config\n         if ($Response != '')\n            $Save['Garden.RequiredUpdates'] = @json_decode($Response);\n      \n         // Record the current update check time in the config.\n         $Save['Garden.UpdateCheckDate'] = time();\n         SaveToConfig($Save);\n      }\n   }\n   \n   /**\n    * Set the user's timezone (hour offset).\n    *\n    * @since 2.0.0\n    * @access public\n    * @param string $ClientDate Client-reported datetime.\n    * @param string $TransientKey Security token.\n    */\n   public function SetClientHour($ClientDate = '', $TransientKey = '') {\n      $this->_DeliveryType = DELIVERY_TYPE_BOOL;\n      $Session = Gdn::Session();\n      $Success = FALSE;\n\n      $ClientTimestamp = Gdn_Format::ToTimestamp($ClientDate);\n\n      if (\n\t\t\tis_numeric($ClientTimestamp)\n\t\t\t&& $Session->UserID > 0\n         && $Session->ValidateTransientKey($TransientKey)\n      ) {\n         $UserModel = Gdn::UserModel();\n\t\t\t$HourOffset = $ClientTimestamp - time();\n         $HourOffset = round($HourOffset / 3600);\n         \n\t\t\t$UserModel->SetField($Session->UserID, 'HourOffset', $HourOffset);\n\t\t\t$Success = TRUE;\n      }\n         \n      $this->Render();\n   }\n\t\n\t/**\n    * Grab a feed from the mothership.\n    *\n    * @since 2.0.?\n    * @access public\n    * @param string $Type Type of feed.\n    * @param int $Length Number of items to get.\n    * @param string $FeedFormat How we want it (valid formats are 'normal' or 'sexy'. OK, not really).\n    */\n\tpublic function GetFeed($Type = 'news', $Length = 5, $FeedFormat = 'normal') {\n\t\techo file_get_contents('http://vanillaforums.org/vforg/home/getfeed/'.$Type.'/'.$Length.'/'.$FeedFormat.'/?DeliveryType=VIEW');\n\t\t$this->DeliveryType(DELIVERY_TYPE_NONE);\n      $this->Render();\n\t}\n}", "<?php\ndefine('APPLICATION', 'Vanilla');\ndefine('APPLICATION_VERSION', '2.0.18.6');\n/*\nCopyright 2008, 2009 Vanilla Forums Inc.\nThis file is part of Garden.\nGarden is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\nGarden is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\nYou should have received a copy of the GNU General Public License along with Garden.  If not, see <http://www.gnu.org/licenses/>.\nContact Vanilla Forums Inc. at support [at] vanillaforums [dot] com\n*/\n\n// Report and track all errors.\nerror_reporting(E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR);\nini_set('display_errors', 'on');\nini_set('track_errors', 1);\n\nob_start();\n\n// 0. Start profiling if requested in the querystring\nif (isset($_GET['xhprof']) && $_GET['xhprof'] == 'yes')\n   define('PROFILER', TRUE);\n\nif (defined('PROFILER') && PROFILER) {\n   $ProfileWhat = 0;\n   \n   if (isset($_GET['memory']) && $_GET['memory'] == 'yes')\n      $ProfileWhat += XHPROF_FLAGS_MEMORY;\n   \n   if (isset($_GET['cpu']) && $_GET['cpu'] == 'yes')\n      $ProfileWhat += XHPROF_FLAGS_CPU;\n   \n   xhprof_enable($ProfileWhat);\n}\n\n// 1. Define the constants we need to get going.\ndefine('DS', '/');\ndefine('PATH_ROOT', dirname(__FILE__));\n\n// 2. Include the bootstrap to configure the framework.\nrequire_once(PATH_ROOT.'/bootstrap.php');\n\n// 3. Create and configure the dispatcher.\n// TIM: Removed this change temporarily for .com hosting\n// Gdn::Authenticator()->StartAuthenticator();\n$Dispatcher = Gdn::Dispatcher();\n\n$EnabledApplications = Gdn::ApplicationManager()->EnabledApplicationFolders();\n$Dispatcher->EnabledApplicationFolders($EnabledApplications);\n$Dispatcher->PassProperty('EnabledApplications', $EnabledApplications);\n\n// 4. Process the request.\n$Dispatcher->Dispatch();\n$Dispatcher->Cleanup();\n\n// 5. Finish profiling and save results to disk, if requested\nif (defined('PROFILER') && PROFILER) {\n   $xhprof_data = xhprof_disable();\n   \n   if (is_null($XHPROF_ROOT))\n      die(\"Unable to save XHProf data. \\$XHPROF_ROOT not defined in index.php\");\n\n   if (is_null($XHPROF_SERVER_NAME))\n      die(\"Unable to save XHProf data. \\$XHPROF_SERVER_NAME not defined in index.php\");\n   \n   //\n   // Saving the XHProf run\n   // using the default implementation of iXHProfRuns.\n   //\n   include_once(\"{$XHPROF_ROOT}/xhprof_lib/utils/xhprof_lib.php\");\n   include_once(\"{$XHPROF_ROOT}/xhprof_lib/utils/xhprof_runs.php\");\n\n   $xhprof_runs = new XHProfRuns_Default();\n   $xhprof_namespace = 'vanilla';\n\n   // Save the run under a namespace              \n   //\n   // **NOTE**:\n   // By default save_run() will automatically generate a unique\n   // run id for you. [You can override that behavior by passing\n   // a run id (optional arg) to the save_run() method instead.]\n   //\n   $run_id = $xhprof_runs->save_run($xhprof_data, $xhprof_namespace);\n\n   echo \"http://{$XHPROF_SERVER_NAME}/index.php?run={$run_id}&source={$xhprof_namespace}\\n\";\n\n}\n"], "filenames": ["applications/dashboard/controllers/class.utilitycontroller.php", "index.php"], "buggy_code_start_loc": [317, 3], "buggy_code_end_loc": [361, 4], "fixing_code_start_loc": [316, 3], "fixing_code_end_loc": [329, 4], "type": "NVD-CWE-noinfo", "message": "Unspecified vulnerability in the update check in Vanilla Forums before 2.0.18.8 has unspecified impact and remote attack vectors, related to \"object injection.\"", "other": {"cve": {"id": "CVE-2013-3528", "sourceIdentifier": "cve@mitre.org", "published": "2013-05-10T21:55:02.543", "lastModified": "2020-06-04T13:16:43.630", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Unspecified vulnerability in the update check in Vanilla Forums before 2.0.18.8 has unspecified impact and remote attack vectors, related to \"object injection.\""}, {"lang": "es", "value": "Vulnerabilidad no especificada en la comprobaci\u00f3n de actualizaci\u00f3n de Vanilla Forums versi\u00f3n anterior a v2.0.18.8 tiene un impacto no especificado y vectores de ataque remoto, relacionada con \"object injection\"."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.0.18.7", "matchCriteriaId": "90C021CD-A177-4654-B621-F36CACC4ABF9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "DE1BDD28-B3D5-4CEF-B718-AEDB1BB85478"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "13A31A31-3D82-47B5-9FAE-4FCAD23E9FCA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "41C2DCAF-E514-473F-BA2F-0EEE9AE634D7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "A5F1392F-711D-4C0E-94C7-4467E50E9212"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "69041BD4-FE5A-4B02-BD1B-CEFA9604FE57"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "C77AE762-2955-447D-826B-D5DC2F62BE7C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "D7365AC0-3C35-43D4-AC8E-F64EEC0061F1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "49E55ABC-15E7-4002-9BE4-CF1F1A5EFB17"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "4AF565C5-1A0E-4C19-9354-FFBFA454B457"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "3B31A038-7B6A-43EB-B525-EF9CBB5F81C7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "57E4F91A-ED9A-4B98-80FF-6621237C285C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "0F3E2758-F9D3-46C5-9D32-FF284B91DA92"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "27D49ACC-7D32-422F-916A-8B37512CA0FB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "2F2BCC4D-DA3D-4EFE-A607-D03FCC7491E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "FC6FAD04-0DF7-4D32-8604-52A5C6C4C15E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.16:*:*:*:*:*:*:*", "matchCriteriaId": "EF88B68F-D781-41D3-92DD-672C432BA763"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.16.1:*:*:*:*:*:*:*", "matchCriteriaId": "04C9B20F-E0E0-4A67-BF20-651655B88AAD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17:*:*:*:*:*:*:*", "matchCriteriaId": "158E0328-3C61-4C95-B197-DE813DD0F810"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.1:*:*:*:*:*:*:*", "matchCriteriaId": "585F5145-1342-4EAD-A9F9-065A9694D227"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.2:*:*:*:*:*:*:*", "matchCriteriaId": "42800B41-380A-462A-8B21-9E014910D680"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.3:*:*:*:*:*:*:*", "matchCriteriaId": "DB2B4009-09C3-49DD-AC10-D0D8F1CBE91A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.4:*:*:*:*:*:*:*", "matchCriteriaId": "229FB439-E8BD-411B-B3B9-EF8A7EF20947"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.5:*:*:*:*:*:*:*", "matchCriteriaId": "1C979A25-6BFF-4269-AE58-30363A45735F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.6:*:*:*:*:*:*:*", "matchCriteriaId": "E6A9B704-61C1-4E6C-A3A1-9149E2A80B61"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.7:*:*:*:*:*:*:*", "matchCriteriaId": "03EF7909-A01B-430D-903E-225E0A7335FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.8:*:*:*:*:*:*:*", "matchCriteriaId": "9D0ECC55-B2E5-433D-AA95-0E901B6D0343"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.9:*:*:*:*:*:*:*", "matchCriteriaId": "3A800CA9-F408-45EA-8D11-F24F23E457D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.17.10:*:*:*:*:*:*:*", "matchCriteriaId": "9D65A488-2B65-42B9-B610-19AA705351AC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:*:*:*:*:*:*:*", "matchCriteriaId": "ED6C8E5D-1085-4D1F-820F-73A0F1D66481"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:alpha3:*:*:*:*:*:*", "matchCriteriaId": "E1E17588-DD2D-453D-BAC2-FB468D3CBDB1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:beta1:*:*:*:*:*:*", "matchCriteriaId": "7ECCCE34-CC7F-4B2D-9A6B-9FBC37F572A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:beta2:*:*:*:*:*:*", "matchCriteriaId": "CE042198-0481-489B-A8EA-545367169659"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:beta4:*:*:*:*:*:*", "matchCriteriaId": "D521F90F-0F93-4E64-B43A-B4188532BE33"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:rc1:*:*:*:*:*:*", "matchCriteriaId": "59936633-D176-4F25-B349-87F461C00B82"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:rc2:*:*:*:*:*:*", "matchCriteriaId": "355C6F2A-88FB-44CF-82E3-AEF60F9CA8AC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18:rc3:*:*:*:*:*:*", "matchCriteriaId": "0B1AFB55-42FF-40EF-8BEB-11CDE65FBDDC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18.1:*:*:*:*:*:*:*", "matchCriteriaId": "94086F8C-5F24-4D95-9B20-10719C562ABF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18.3:*:*:*:*:*:*:*", "matchCriteriaId": "F8BBE95A-1EF7-44F6-B94F-FD01E48CEF3C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18.4:*:*:*:*:*:*:*", "matchCriteriaId": "E6B3F737-B681-4EA4-8EFA-96C5AA855A62"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18.5:*:*:*:*:*:*:*", "matchCriteriaId": "51A30B2C-0C0A-49C8-ABAB-FD192C298018"}, {"vulnerable": true, "criteria": "cpe:2.3:a:vanillaforums:vanilla:2.0.18.6:*:*:*:*:*:*:*", "matchCriteriaId": "D7FC9FEC-2B38-4808-9A72-57AAFA4B09CE"}]}]}], "references": [{"url": "http://vanillaforums.org/discussion/23339/security-update-vanilla-2-0-18-7", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/84167", "source": "cve@mitre.org"}, {"url": "https://github.com/vanillaforums/Garden/commit/b9a10dabb15c697347bfa7baef69a6e211b2f804", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/vanillaforums/Garden/commit/b9a10dabb15c697347bfa7baef69a6e211b2f804"}}