{"buggy_code": ["require('dotenv').config()\nconst { exec } = require(\"child_process\");\nconst { RichEmbed, Message } = require(\"discord.js\");\nmodule.exports = {\n  name: \"npm\",\n  args: true,\n  usage: \"<query>\",\n  aliases: [\"pnpm\"],\n  description: \"search a package on npm\",\n/**\n  * @param { Message } message \n  * @param { Array<string> } args\n */\n  execute: async (message, args) => {\n    message.channel.startTyping();\n    message.channel.send(\n      `Searching \\`${args\n        .join(\" \")\n        .replace(/\\n/g, \" \")}\\` on ${message.client.emojis.get(\n         process.env.NPM_EMOJI_ID\n        )}...`,\n      { disableEveryone: true }\n    );\n    exec(\n      `npm search ${args.join(\" \").replace(/\\n/g, \" \")} -json -l`,\n      async (er, so, se) => {\n        if (so) {\n          const res = JSON.parse(so).map(\n            (x, index) => `${index + 1}. ${x.name}`\n          );\n          message.channel\n            .send(\n              \"Type the number to see the details (10 seconds)\\n\" +\n              res.join(\"\\n\"),\n              { code: \"xl\", split: true }\n            )\n            .then(m => {\n              message.channel\n                .createMessageCollector(\n                  x => x.author.id === message.author.id && parseInt(x.content),\n                  { maxMatches: 1, time: 10000 }\n                )\n                .on(\"collect\", msg => {\n                  const choice = parseInt(msg.content) - 1;\n                  if (!JSON.parse(so)[choice])\n                    return message.reply(\"out of range.\");\n                  const result = JSON.parse(so)[choice];\n                  const embed = new RichEmbed()\n                    .setColor(\"#ff0000\")\n                    .setTitle(result.name)\n                  if (result.links)\n                    embed.setURL(result.links.npm)\n                  embed\n                    .setAuthor(\n                      \"npm\",\n                      \"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"\n                    )\n                    .addField(\"Last update\", result.date)\n                    .addField(\"Version\", result.version)\n                    .addField(\"Scope\", result.scope)\n                    .setDescription(\n                      result.description + `\\`\\`\\`npm i ${result.name}\\`\\`\\``\n                    );\n                  if (result.keywords)\n                    embed.addField(\"Keywords\", result.keywords.join(\",\"));\n                  if (result.author)\n                    embed.addField(\"Author\", `${result.author.name}`);\n                  if (result.maintainers)\n                    embed.addField(\n                      \"Maintainers\",\n                      result.maintainers\n                        .map(x => x.name || x.username)\n                        .join(\",\")\n                    );\n                  if (result.contributors) embed.addField(\n                    \"Contributors\",\n                    result.contributors\n                      .map(x => x.name || x.username)\n                      .join(\",\")\n                  );\n                  const data = [];\n                  for (const key of Object.keys(result.links || {})) {\n                    data.push(`${key}: ${result.links[key]}`);\n                  }\n                  embed.addField(\"Links\", data.join(\"\\n\") || \"N/A\");\n                  message.channel.send(embed);\n                });\n            });\n        }\n        if (se) await message.channel.send(se, { code: \"xl\", split: true });\n        message.channel.stopTyping();\n      }\n    );\n  }\n};\n"], "fixing_code": ["require('dotenv').config()\nconst { exec } = require(\"child_process\");\nconst { RichEmbed, Message } = require(\"discord.js\");\nconst { escape } = require(\"querystring\")\nconst fetch = require(\"node-fetch\")\nmodule.exports = {\n  name: \"npm\",\n  args: true,\n  usage: \"<query>\",\n  aliases: [\"pnpm\"],\n  description: \"search a package on npm\",\n/**\n  * @param { Message } message \n  * @param { Array<string> } args\n */\n  execute: async (message, args) => {\n    message.channel.startTyping();\n    message.channel.send(\n      `Searching \\`${args\n        .join(\" \")\n        .replace(/\\n/g, \" \")}\\` on ${message.client.emojis.get(\n         process.env.NPM_EMOJI_ID\n        )}...`,\n      { disableEveryone: true }\n    );\n    const response = await fetch(\"https://www.npmjs.com/search/suggestions?q=\" + escape(args.join(\" \"))).then(r => r.json())\n       const res = response.map(\n            (x, index) => `${index + 1}. ${x.name}`\n          );\n          message.channel\n            .send(\n              \"Type the number to see the details (10 seconds)\\n\" +\n              res.join(\"\\n\"),\n              { code: \"xl\", split: true }\n            )\n            .then(m => {\n              message.channel\n                .createMessageCollector(\n                  x => x.author.id === message.author.id && parseInt(x.content),\n                  { maxMatches: 1, time: 10000 }\n                )\n                .on(\"collect\", msg => {\n                  const choice = parseInt(msg.content) - 1;\n                  if (!response[choice])\n                    return message.reply(\"out of range.\");\n                  const result = response[choice];\n                  const embed = new RichEmbed()\n                    .setColor(\"#ff0000\")\n                    .setTitle(result.name)\n                  if (result.links)\n                    embed.setURL(result.links.npm)\n                  embed\n                    .setAuthor(\n                      \"npm\",\n                      \"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"\n                    )\n                    .addField(\"Last update\", result.date)\n                    .addField(\"Version\", result.version)\n                    .addField(\"Scope\", result.scope)\n                    .setDescription(\n                      result.description + `\\`\\`\\`npm i ${result.name}\\`\\`\\``\n                    );\n                  if (result.keywords)\n                    embed.addField(\"Keywords\", result.keywords.join(\",\"));\n                  if (result.author)\n                    embed.addField(\"Author\", `${result.author.name}`);\n                  if (result.maintainers)\n                    embed.addField(\n                      \"Maintainers\",\n                      result.maintainers\n                        .map(x => x.name || x.username)\n                        .join(\",\")\n                    );\n                  if (result.contributors) embed.addField(\n                    \"Contributors\",\n                    result.contributors\n                      .map(x => x.name || x.username)\n                      .join(\",\")\n                  );\n                  const data = [];\n                  for (const key of Object.keys(result.links || {})) {\n                    data.push(`${key}: ${result.links[key]}`);\n                  }\n                  embed.addField(\"Links\", data.join(\"\\n\") || \"N/A\");\n                  message.channel.send(embed);\n                });\n            });\n            message.channel.stopTyping();\n        }\n  }\n"], "filenames": ["commands/npm.js"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [96], "fixing_code_start_loc": [4], "fixing_code_end_loc": [90], "type": "CWE-78", "message": "In Nick Chan Bot before version 1.0.0-beta there is a vulnerability in the `npm` command which is part of this software package. This allows arbitrary shell execution,which can compromise the bot This is patched in version 1.0.0-beta", "other": {"cve": {"id": "CVE-2020-5282", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-25T19:15:15.980", "lastModified": "2020-04-09T13:56:08.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Nick Chan Bot before version 1.0.0-beta there is a vulnerability in the `npm` command which is part of this software package. This allows arbitrary shell execution,which can compromise the bot This is patched in version 1.0.0-beta"}, {"lang": "es", "value": "En Nick Chan Bot versiones anteriores a 1.0.0-beta, se presenta una vulnerabilidad en el comando \"npm\" el cual es parte de este paquete de software. Esto permite una ejecuci\u00f3n de shell arbitraria, lo que puede comprometer al bot. Esto se parche\u00f3 en la versi\u00f3n 1.0.0-beta."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 0.8, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nick_chan_bot_project:nick_chan_bot:1.0.0:beta_pre_11:*:*:*:*:*:*", "matchCriteriaId": "11AC2378-8131-44F0-8347-5BEBEABC4A99"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nick_chan_bot_project:nick_chan_bot:1.0.0:beta_pre_7:*:*:*:*:*:*", "matchCriteriaId": "91A429D2-B851-4611-866D-CD39841C4119"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nick_chan_bot_project:nick_chan_bot:1.0.0:beta_pre_8:*:*:*:*:*:*", "matchCriteriaId": "5EC0F894-0755-49AD-ADB5-B410838E0E22"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nick_chan_bot_project:nick_chan_bot:1.0.0:beta_pre_9:*:*:*:*:*:*", "matchCriteriaId": "1BB1D112-3880-410B-8E30-D66F9956FC13"}]}]}], "references": [{"url": "https://github.com/Assfugil/nickchanbot/commit/d7dc87523fc8bb6babbf8d636c339193b236a3ba", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Assfugil/nickchanbot/security/advisories/GHSA-8xwp-r7pj-cgw3", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Assfugil/nickchanbot/commit/d7dc87523fc8bb6babbf8d636c339193b236a3ba"}}