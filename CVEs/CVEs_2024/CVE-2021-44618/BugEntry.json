{"buggy_code": ["<?php\n/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\nnamespace nystudio107\\seomatic\\helpers;\n\nuse nystudio107\\seomatic\\Seomatic;\n\nuse Craft;\nuse craft\\errors\\SiteNotFoundException;\nuse craft\\helpers\\UrlHelper as CraftUrlHelper;\n\nuse yii\\base\\Exception;\n\n/**\n * @author    nystudio107\n * @package   Seomatic\n * @since     3.0.0\n */\nclass UrlHelper extends CraftUrlHelper\n{\n    // Public Static Properties\n    // =========================================================================\n\n    // Public Static Methods\n    // =========================================================================\n\n    /**\n     * @inheritDoc\n     */\n    public static function siteUrl(string $path = '', $params = null, string $scheme = null, int $siteId = null): string\n    {\n        $siteUrl = Seomatic::$settings->siteUrlOverride;\n        if (!empty($siteUrl)) {\n            $siteUrl = MetaValue::parseString($siteUrl);\n            // Extract out just the path part\n            $parts = self::decomposeUrl($path);\n            $path = $parts['path'].$parts['suffix'];\n            $url = rtrim($siteUrl, '/').'/'.ltrim($path, '/');\n            // Handle trailing slashes properly for generated URLs\n            $generalConfig = Craft::$app->getConfig()->getGeneral();\n            if ($generalConfig->addTrailingSlashesToUrls && !preg_match('/\\.[^\\/]+$/', $url)) {\n                $url = rtrim($url, '/') . '/';\n            }\n            if (!$generalConfig->addTrailingSlashesToUrls) {\n                $url = rtrim($url, '/');\n            }\n\n            return $url;\n        }\n\n        return parent::siteUrl($path, $params, $scheme, $siteId);\n    }\n\n    /**\n     * Return the page trigger and the value of the page trigger (null if it doesn't exist)\n     *\n     * @return array\n     */\n    public static function pageTriggerValue(): array\n    {\n        $pageTrigger = Craft::$app->getConfig()->getGeneral()->pageTrigger;\n        if (!\\is_string($pageTrigger) || $pageTrigger === '') {\n            $pageTrigger = 'p';\n        }\n        // Is this query string-based pagination?\n        if ($pageTrigger[0] === '?') {\n            $pageTrigger = trim($pageTrigger, '?=');\n        }\n        // Avoid conflict with the path param\n        $pathParam = Craft::$app->getConfig()->getGeneral()->pathParam;\n        if ($pageTrigger === $pathParam) {\n            $pageTrigger = $pathParam === 'p' ? 'pg' : 'p';\n        }\n        $pageTriggerValue = Craft::$app->getRequest()->getParam($pageTrigger);\n\n        return [$pageTrigger, $pageTriggerValue];\n    }\n\n    /**\n     * Return an absolute URL with protocol that curl will be happy with\n     *\n     * @param string $url\n     *\n     * @return string\n     */\n    public static function absoluteUrlWithProtocol($url): string\n    {\n        // Make this a full URL\n        if (!self::isAbsoluteUrl($url)) {\n            $protocol = 'http';\n            if (isset($_SERVER['HTTPS']) && (strcasecmp($_SERVER['HTTPS'], 'on') === 0 || $_SERVER['HTTPS'] == 1)\n                || isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && strcasecmp($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') === 0\n            ) {\n                $protocol = 'https';\n            }\n            if (self::isProtocolRelativeUrl($url)) {\n                try {\n                    $url = self::urlWithScheme($url, $protocol);\n                } catch (SiteNotFoundException $e) {\n                    Craft::error($e->getMessage(), __METHOD__);\n                }\n            } else {\n                try {\n                    $url = self::siteUrl($url, null, $protocol);\n                    if (self::isProtocolRelativeUrl($url)) {\n                        $url = self::urlWithScheme($url, $protocol);\n                    }\n                } catch (Exception $e) {\n                    Craft::error($e->getMessage(), __METHOD__);\n                }\n            }\n        }\n        // Ensure that any spaces in the URL are encoded\n        $url = str_replace(' ', '%20', $url);\n\n        // Handle trailing slashes properly for generated URLs\n        $generalConfig = Craft::$app->getConfig()->getGeneral();\n        if ($generalConfig->addTrailingSlashesToUrls && !preg_match('/\\.[^\\/]+$/', $url)) {\n            $url = rtrim($url, '/') . '/';\n        }\n        if (!$generalConfig->addTrailingSlashesToUrls) {\n            $url = rtrim($url, '/');\n        }\n\n        return $url;\n    }\n\n    /**\n     * Return whether this URL has a sub-directory as part of it\n     *\n     * @param string $url\n     * @return bool\n     */\n    public static function urlHasSubDir(string $url): bool\n    {\n        return !empty(parse_url(trim($url, '/'), PHP_URL_PATH));\n    }\n\n    // Protected Methods\n    // =========================================================================\n\n    /**\n     * Decompose a url into a prefix, path, and suffix\n     *\n     * @param $pathOrUrl\n     *\n     * @return array\n     */\n    protected static function decomposeUrl($pathOrUrl): array\n    {\n        $result = array();\n\n        if (filter_var($pathOrUrl, FILTER_VALIDATE_URL)) {\n            $url_parts = parse_url($pathOrUrl);\n            $result['prefix'] = $url_parts['scheme'] . '://' . $url_parts['host'];\n            $result['path'] = $url_parts['path'];\n            $result['suffix'] = '';\n            $result['suffix'] .= empty($url_parts['query']) ? '' : '?' . $url_parts['query'];\n            $result['suffix'] .= empty($url_parts['fragment']) ? '' : '#' . $url_parts['fragment'];\n        } else {\n            $result['prefix'] = '';\n            $result['path'] = $pathOrUrl;\n            $result['suffix'] = '';\n        }\n\n        return $result;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\nnamespace nystudio107\\seomatic\\helpers;\n\nuse nystudio107\\seomatic\\Seomatic;\n\nuse Craft;\nuse craft\\errors\\SiteNotFoundException;\nuse craft\\helpers\\UrlHelper as CraftUrlHelper;\n\nuse yii\\base\\Exception;\n\n/**\n * @author    nystudio107\n * @package   Seomatic\n * @since     3.0.0\n */\nclass UrlHelper extends CraftUrlHelper\n{\n    // Public Static Properties\n    // =========================================================================\n\n    // Public Static Methods\n    // =========================================================================\n\n    /**\n     * @inheritDoc\n     */\n    public static function siteUrl(string $path = '', $params = null, string $scheme = null, int $siteId = null): string\n    {\n        $siteUrl = Seomatic::$settings->siteUrlOverride;\n        if (!empty($siteUrl)) {\n            $siteUrl = MetaValue::parseString($siteUrl);\n            // Extract out just the path part\n            $parts = self::decomposeUrl($path);\n            $path = $parts['path'].$parts['suffix'];\n            $url = rtrim($siteUrl, '/').'/'.ltrim($path, '/');\n            // Handle trailing slashes properly for generated URLs\n            $generalConfig = Craft::$app->getConfig()->getGeneral();\n            if ($generalConfig->addTrailingSlashesToUrls && !preg_match('/\\.[^\\/]+$/', $url)) {\n                $url = rtrim($url, '/') . '/';\n            }\n            if (!$generalConfig->addTrailingSlashesToUrls) {\n                $url = rtrim($url, '/');\n            }\n\n            return $url;\n        }\n\n        return DynamicMeta::sanitizeUrl(parent::siteUrl($path, $params, $scheme, $siteId));\n    }\n\n    /**\n     * Return the page trigger and the value of the page trigger (null if it doesn't exist)\n     *\n     * @return array\n     */\n    public static function pageTriggerValue(): array\n    {\n        $pageTrigger = Craft::$app->getConfig()->getGeneral()->pageTrigger;\n        if (!\\is_string($pageTrigger) || $pageTrigger === '') {\n            $pageTrigger = 'p';\n        }\n        // Is this query string-based pagination?\n        if ($pageTrigger[0] === '?') {\n            $pageTrigger = trim($pageTrigger, '?=');\n        }\n        // Avoid conflict with the path param\n        $pathParam = Craft::$app->getConfig()->getGeneral()->pathParam;\n        if ($pageTrigger === $pathParam) {\n            $pageTrigger = $pathParam === 'p' ? 'pg' : 'p';\n        }\n        $pageTriggerValue = Craft::$app->getRequest()->getParam($pageTrigger);\n\n        return [$pageTrigger, $pageTriggerValue];\n    }\n\n    /**\n     * Return an absolute URL with protocol that curl will be happy with\n     *\n     * @param string $url\n     *\n     * @return string\n     */\n    public static function absoluteUrlWithProtocol($url): string\n    {\n        // Make this a full URL\n        if (!self::isAbsoluteUrl($url)) {\n            $protocol = 'http';\n            if (isset($_SERVER['HTTPS']) && (strcasecmp($_SERVER['HTTPS'], 'on') === 0 || $_SERVER['HTTPS'] == 1)\n                || isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && strcasecmp($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') === 0\n            ) {\n                $protocol = 'https';\n            }\n            if (self::isProtocolRelativeUrl($url)) {\n                try {\n                    $url = self::urlWithScheme($url, $protocol);\n                } catch (SiteNotFoundException $e) {\n                    Craft::error($e->getMessage(), __METHOD__);\n                }\n            } else {\n                try {\n                    $url = self::siteUrl($url, null, $protocol);\n                    if (self::isProtocolRelativeUrl($url)) {\n                        $url = self::urlWithScheme($url, $protocol);\n                    }\n                } catch (Exception $e) {\n                    Craft::error($e->getMessage(), __METHOD__);\n                }\n            }\n        }\n        // Ensure that any spaces in the URL are encoded\n        $url = str_replace(' ', '%20', $url);\n\n        // Handle trailing slashes properly for generated URLs\n        $generalConfig = Craft::$app->getConfig()->getGeneral();\n        if ($generalConfig->addTrailingSlashesToUrls && !preg_match('/\\.[^\\/]+$/', $url)) {\n            $url = rtrim($url, '/') . '/';\n        }\n        if (!$generalConfig->addTrailingSlashesToUrls) {\n            $url = rtrim($url, '/');\n        }\n\n        return DynamicMeta::sanitizeUrl($url);\n    }\n\n    /**\n     * Return whether this URL has a sub-directory as part of it\n     *\n     * @param string $url\n     * @return bool\n     */\n    public static function urlHasSubDir(string $url): bool\n    {\n        return !empty(parse_url(trim($url, '/'), PHP_URL_PATH));\n    }\n\n    // Protected Methods\n    // =========================================================================\n\n    /**\n     * Decompose a url into a prefix, path, and suffix\n     *\n     * @param $pathOrUrl\n     *\n     * @return array\n     */\n    protected static function decomposeUrl($pathOrUrl): array\n    {\n        $result = array();\n\n        if (filter_var($pathOrUrl, FILTER_VALIDATE_URL)) {\n            $url_parts = parse_url($pathOrUrl);\n            $result['prefix'] = $url_parts['scheme'] . '://' . $url_parts['host'];\n            $result['path'] = $url_parts['path'];\n            $result['suffix'] = '';\n            $result['suffix'] .= empty($url_parts['query']) ? '' : '?' . $url_parts['query'];\n            $result['suffix'] .= empty($url_parts['fragment']) ? '' : '#' . $url_parts['fragment'];\n        } else {\n            $result['prefix'] = '';\n            $result['path'] = $pathOrUrl;\n            $result['suffix'] = '';\n        }\n\n        return $result;\n    }\n}\n"], "filenames": ["src/helpers/UrlHelper.php"], "buggy_code_start_loc": [59], "buggy_code_end_loc": [134], "fixing_code_start_loc": [59], "fixing_code_end_loc": [134], "type": "CWE-94", "message": "A Server-side Template Injection (SSTI) vulnerability exists in Nystudio107 Seomatic 3.4.12 in src/helpers/UrlHelper.php via the host header.", "other": {"cve": {"id": "CVE-2021-44618", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-11T16:15:07.523", "lastModified": "2022-03-18T15:31:37.203", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Server-side Template Injection (SSTI) vulnerability exists in Nystudio107 Seomatic 3.4.12 in src/helpers/UrlHelper.php via the host header."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de Inyecci\u00f3n de Plantillas del Lado del Servidor (SSTI) en Nystudio107 Seomatic versi\u00f3n 3.4.12, en el archivo src/helpers/UrlHelper.php por medio del encabezado host"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nystudio107:seomatic:3.4.12:*:*:*:*:craft_cms:*:*", "matchCriteriaId": "EBB98600-DDD8-45E2-A898-14728DC8A0BD"}]}]}], "references": [{"url": "https://github.com/nystudio107/craft-seomatic/commit/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nystudio107/craft-seomatic/releases/tag/3.4.12", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nystudio107/craft-seomatic/commit/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469"}}