{"buggy_code": ["\"\"\"\nForm Widget classes specific to the Django admin site.\n\"\"\"\nfrom __future__ import unicode_literals\n\nimport copy\n\nfrom django import forms\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.core.urlresolvers import reverse\nfrom django.forms.widgets import RadioFieldRenderer\nfrom django.forms.util import flatatt\nfrom django.utils.html import escape, format_html, format_html_join, smart_urlquote\nfrom django.utils.text import Truncator\nfrom django.utils.translation import ugettext as _\nfrom django.utils.safestring import mark_safe\nfrom django.utils.encoding import force_text\nfrom django.utils import six\n\n\nclass FilteredSelectMultiple(forms.SelectMultiple):\n    \"\"\"\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    \"\"\"\n    @property\n    def media(self):\n        js = [\"core.js\", \"SelectBox.js\", \"SelectFilter2.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n        self.verbose_name = verbose_name\n        self.is_stacked = is_stacked\n        super(FilteredSelectMultiple, self).__init__(attrs, choices)\n\n    def render(self, name, value, attrs=None, choices=()):\n        if attrs is None:\n            attrs = {}\n        attrs['class'] = 'selectfilter'\n        if self.is_stacked:\n            attrs['class'] += 'stacked'\n        output = [super(FilteredSelectMultiple, self).render(name, value, attrs, choices)]\n        output.append('<script type=\"text/javascript\">addEvent(window, \"load\", function(e) {')\n        # TODO: \"id_\" is hard-coded here. This should instead use the correct\n        # API to determine the ID dynamically.\n        output.append('SelectFilter.init(\"id_%s\", \"%s\", %s, \"%s\"); });</script>\\n'\n            % (name, self.verbose_name.replace('\"', '\\\\\"'), int(self.is_stacked), static('admin/')))\n        return mark_safe(''.join(output))\n\nclass AdminDateWidget(forms.DateInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vDateField', 'size': '10'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminDateWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminTimeWidget(forms.TimeInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vTimeField', 'size': '8'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTimeWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminSplitDateTime(forms.SplitDateTimeWidget):\n    \"\"\"\n    A SplitDateTime Widget that has some admin-specific styling.\n    \"\"\"\n    def __init__(self, attrs=None):\n        widgets = [AdminDateWidget, AdminTimeWidget]\n        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n        # we want to define widgets.\n        forms.MultiWidget.__init__(self, widgets, attrs)\n\n    def format_output(self, rendered_widgets):\n        return format_html('<p class=\"datetime\">{0} {1}<br />{2} {3}</p>',\n                           _('Date:'), rendered_widgets[0],\n                           _('Time:'), rendered_widgets[1])\n\nclass AdminRadioFieldRenderer(RadioFieldRenderer):\n    def render(self):\n        \"\"\"Outputs a <ul> for this set of radio fields.\"\"\"\n        return format_html('<ul{0}>\\n{1}\\n</ul>',\n                           flatatt(self.attrs),\n                           format_html_join('\\n', '<li>{0}</li>',\n                                            ((force_text(w),) for w in self)))\n\nclass AdminRadioSelect(forms.RadioSelect):\n    renderer = AdminRadioFieldRenderer\n\nclass AdminFileWidget(forms.ClearableFileInput):\n    template_with_initial = ('<p class=\"file-upload\">%s</p>'\n                            % forms.ClearableFileInput.template_with_initial)\n    template_with_clear = ('<span class=\"clearable-file-input\">%s</span>'\n                           % forms.ClearableFileInput.template_with_clear)\n\ndef url_params_from_lookup_dict(lookups):\n    \"\"\"\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    \"\"\"\n    params = {}\n    if lookups and hasattr(lookups, 'items'):\n        items = []\n        for k, v in lookups.items():\n            if isinstance(v, (tuple, list)):\n                v = ','.join([str(x) for x in v])\n            elif isinstance(v, bool):\n                # See django.db.fields.BooleanField.get_prep_lookup\n                v = ('0', '1')[v]\n            else:\n                v = six.text_type(v)\n            items.append((k, v))\n        params.update(dict(items))\n    return params\n\nclass ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super(ForeignKeyRawIdWidget, self).__init__(attrs)\n\n    def render(self, name, value, attrs=None):\n        rel_to = self.rel.to\n        if attrs is None:\n            attrs = {}\n        extra = []\n        if rel_to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            related_url = reverse('admin:%s_%s_changelist' %\n                                    (rel_to._meta.app_label,\n                                    rel_to._meta.module_name),\n                                    current_app=self.admin_site.name)\n\n            params = self.url_parameters()\n            if params:\n                url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])\n            else:\n                url = ''\n            if \"class\" not in attrs:\n                attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.\n            # TODO: \"lookup_id_\" is hard-coded here. This should instead use\n            # the correct API to determine the ID dynamically.\n            extra.append('<a href=\"%s%s\" class=\"related-lookup\" id=\"lookup_id_%s\" onclick=\"return showRelatedObjectLookupPopup(this);\"> '\n                            % (related_url, url, name))\n            extra.append('<img src=\"%s\" width=\"16\" height=\"16\" alt=\"%s\" /></a>'\n                            % (static('admin/img/selector-search.gif'), _('Lookup')))\n        output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra\n        if value:\n            output.append(self.label_for_value(value))\n        return mark_safe(''.join(output))\n\n    def base_url_parameters(self):\n        return url_params_from_lookup_dict(self.rel.limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.to._default_manager.using(self.db).get(**{key: value})\n            return '&nbsp;<strong>%s</strong>' % escape(Truncator(obj).words(14, truncate='...'))\n        except (ValueError, self.rel.to.DoesNotExist):\n            return ''\n\nclass ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n    def render(self, name, value, attrs=None):\n        if attrs is None:\n            attrs = {}\n        if self.rel.to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            attrs['class'] = 'vManyToManyRawIdAdminField'\n        if value:\n            value = ','.join([force_text(v) for v in value])\n        else:\n            value = ''\n        return super(ManyToManyRawIdWidget, self).render(name, value, attrs)\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_for_value(self, value):\n        return ''\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(',')\n\n    def _has_changed(self, initial, data):\n        if initial is None:\n            initial = []\n        if data is None:\n            data = []\n        if len(initial) != len(data):\n            return True\n        for pk1, pk2 in zip(initial, data):\n            if force_text(pk1) != force_text(pk2):\n                return True\n        return False\n\nclass RelatedFieldWidgetWrapper(forms.Widget):\n    \"\"\"\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    \"\"\"\n    def __init__(self, widget, rel, admin_site, can_add_related=None):\n        self.is_hidden = widget.is_hidden\n        self.needs_multipart_form = widget.needs_multipart_form\n        self.attrs = widget.attrs\n        self.choices = widget.choices\n        self.widget = widget\n        self.rel = rel\n        # Backwards compatible check for whether a user can add related\n        # objects.\n        if can_add_related is None:\n            can_add_related = rel.to in admin_site._registry\n        self.can_add_related = can_add_related\n        # so we can check if the related object is registered with this AdminSite\n        self.admin_site = admin_site\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.widget = copy.deepcopy(self.widget, memo)\n        obj.attrs = self.widget.attrs\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def media(self):\n        return self.widget.media\n\n    def render(self, name, value, *args, **kwargs):\n        rel_to = self.rel.to\n        info = (rel_to._meta.app_label, rel_to._meta.object_name.lower())\n        self.widget.choices = self.choices\n        output = [self.widget.render(name, value, *args, **kwargs)]\n        if self.can_add_related:\n            related_url = reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)\n            # TODO: \"add_id_\" is hard-coded here. This should instead use the\n            # correct API to determine the ID dynamically.\n            output.append('<a href=\"%s\" class=\"add-another\" id=\"add_id_%s\" onclick=\"return showAddAnotherPopup(this);\"> '\n                          % (related_url, name))\n            output.append('<img src=\"%s\" width=\"10\" height=\"10\" alt=\"%s\"/></a>'\n                          % (static('admin/img/icon_addlink.gif'), _('Add Another')))\n        return mark_safe(''.join(output))\n\n    def build_attrs(self, extra_attrs=None, **kwargs):\n        \"Helper function for building an attribute dictionary.\"\n        self.attrs = self.widget.build_attrs(extra_attrs=None, **kwargs)\n        return self.attrs\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def _has_changed(self, initial, data):\n        return self.widget._has_changed(initial, data)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)\n\nclass AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vLargeTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextareaWidget, self).__init__(attrs=final_attrs)\n\nclass AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextInputWidget, self).__init__(attrs=final_attrs)\n\nclass AdminURLFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vURLField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminURLFieldWidget, self).__init__(attrs=final_attrs)\n\n    def render(self, name, value, attrs=None):\n        html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n        if value:\n            value = force_text(self._format_value(value))\n            final_attrs = {'href': mark_safe(smart_urlquote(value))}\n            html = format_html(\n                '<p class=\"url\">{0} <a {1}>{2}</a><br />{3} {4}</p>',\n                _('Currently:'), flatatt(final_attrs), value,\n                _('Change:'), html\n            )\n        return html\n\n\nclass AdminIntegerFieldWidget(forms.TextInput):\n    class_name = 'vIntegerField'\n\n    def __init__(self, attrs=None):\n        final_attrs = {'class': self.class_name}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminIntegerFieldWidget, self).__init__(attrs=final_attrs)\n\nclass AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = 'vBigIntegerField'\n\nclass AdminCommaSeparatedIntegerFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vCommaSeparatedIntegerField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminCommaSeparatedIntegerFieldWidget, self).__init__(attrs=final_attrs)\n", "# encoding: utf-8\nfrom __future__ import absolute_import, unicode_literals\n\nfrom datetime import datetime\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import admin\nfrom django.contrib.admin import widgets\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom django.db.models import CharField, DateField\nfrom django.test import TestCase as DjangoTestCase\nfrom django.test.utils import override_settings\nfrom django.utils import translation\nfrom django.utils.html import conditional_escape\nfrom django.utils.unittest import TestCase\n\nfrom . import models\nfrom .widgetadmin import site as widget_admin_site\n\n\nadmin_static_prefix = lambda: {\n    'ADMIN_STATIC_PREFIX': \"%sadmin/\" % settings.STATIC_URL,\n}\n\nclass AdminFormfieldForDBFieldTests(TestCase):\n    \"\"\"\n    Tests for correct behavior of ModelAdmin.formfield_for_dbfield\n    \"\"\"\n\n    def assertFormfield(self, model, fieldname, widgetclass, **admin_overrides):\n        \"\"\"\n        Helper to call formfield_for_dbfield for a given model and field name\n        and verify that the returned formfield is appropriate.\n        \"\"\"\n        # Override any settings on the model admin\n        class MyModelAdmin(admin.ModelAdmin):\n            pass\n        for k in admin_overrides:\n            setattr(MyModelAdmin, k, admin_overrides[k])\n\n        # Construct the admin, and ask it for a formfield\n        ma = MyModelAdmin(model, admin.site)\n        ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=None)\n\n        # \"unwrap\" the widget wrapper, if needed\n        if isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper):\n            widget = ff.widget.widget\n        else:\n            widget = ff.widget\n\n        # Check that we got a field of the right type\n        self.assertTrue(\n            isinstance(widget, widgetclass),\n            \"Wrong widget for %s.%s: expected %s, got %s\" % \\\n                (model.__class__.__name__, fieldname, widgetclass, type(widget))\n        )\n\n        # Return the formfield so that other tests can continue\n        return ff\n\n    def testDateField(self):\n        self.assertFormfield(models.Event, 'start_date', widgets.AdminDateWidget)\n\n    def testDateTimeField(self):\n        self.assertFormfield(models.Member, 'birthdate', widgets.AdminSplitDateTime)\n\n    def testTimeField(self):\n        self.assertFormfield(models.Event, 'start_time', widgets.AdminTimeWidget)\n\n    def testTextField(self):\n        self.assertFormfield(models.Event, 'description', widgets.AdminTextareaWidget)\n\n    def testURLField(self):\n        self.assertFormfield(models.Event, 'link', widgets.AdminURLFieldWidget)\n\n    def testIntegerField(self):\n        self.assertFormfield(models.Event, 'min_age', widgets.AdminIntegerFieldWidget)\n\n    def testCharField(self):\n        self.assertFormfield(models.Member, 'name', widgets.AdminTextInputWidget)\n\n    def testFileField(self):\n        self.assertFormfield(models.Album, 'cover_art', widgets.AdminFileWidget)\n\n    def testForeignKey(self):\n        self.assertFormfield(models.Event, 'band', forms.Select)\n\n    def testRawIDForeignKey(self):\n        self.assertFormfield(models.Event, 'band', widgets.ForeignKeyRawIdWidget,\n                             raw_id_fields=['band'])\n\n    def testRadioFieldsForeignKey(self):\n        ff = self.assertFormfield(models.Event, 'band', widgets.AdminRadioSelect,\n                                  radio_fields={'band':admin.VERTICAL})\n        self.assertEqual(ff.empty_label, None)\n\n    def testManyToMany(self):\n        self.assertFormfield(models.Band, 'members', forms.SelectMultiple)\n\n    def testRawIDManyTOMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.ManyToManyRawIdWidget,\n                             raw_id_fields=['members'])\n\n    def testFilteredManyToMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.FilteredSelectMultiple,\n                             filter_vertical=['members'])\n\n    def testFormfieldOverrides(self):\n        self.assertFormfield(models.Event, 'start_date', forms.TextInput,\n                             formfield_overrides={DateField: {'widget': forms.TextInput}})\n\n    def testFormfieldOverridesWidgetInstances(self):\n        \"\"\"\n        Test that widget instances in formfield_overrides are not shared between\n        different fields. (#19423)\n        \"\"\"\n        class BandAdmin(admin.ModelAdmin):\n            formfield_overrides = {\n                CharField: {'widget': forms.TextInput(attrs={'size':'10'})}\n            }\n        ma = BandAdmin(models.Band, admin.site)\n        f1 = ma.formfield_for_dbfield(models.Band._meta.get_field('name'), request=None)\n        f2 = ma.formfield_for_dbfield(models.Band._meta.get_field('style'), request=None)\n        self.assertNotEqual(f1.widget, f2.widget)\n        self.assertEqual(f1.widget.attrs['maxlength'], '100')\n        self.assertEqual(f2.widget.attrs['maxlength'], '20')\n        self.assertEqual(f2.widget.attrs['size'], '10')\n\n    def testFieldWithChoices(self):\n        self.assertFormfield(models.Member, 'gender', forms.Select)\n\n    def testChoicesWithRadioFields(self):\n        self.assertFormfield(models.Member, 'gender', widgets.AdminRadioSelect,\n                             radio_fields={'gender':admin.VERTICAL})\n\n    def testInheritance(self):\n        self.assertFormfield(models.Album, 'backside_art', widgets.AdminFileWidget)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminFormfieldForDBFieldWithRequestTests(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n\n    def testFilterChoicesByRequestUser(self):\n        \"\"\"\n        Ensure the user can only see their own cars in the foreign key dropdown.\n        \"\"\"\n        self.client.login(username=\"super\", password=\"secret\")\n        response = self.client.get(\"/widget_admin/admin_widgets/cartire/add/\")\n        self.assertNotContains(response, \"BMW M3\")\n        self.assertContains(response, \"Volkswagon Passat\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyWidgetChangeList(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_changelist_foreignkey(self):\n        response = self.client.get('%s/admin_widgets/car/' % self.admin_root)\n        self.assertContains(response, '%s/auth/user/add/' % self.admin_root)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyRawIdWidget(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_nonexistent_target_id(self):\n        band = models.Band.objects.create(name='Bogey Blues')\n        pk = band.pk\n        band.delete()\n        post_data = {\n            \"band\": '%s' % pk,\n        }\n        # Try posting with a non-existent pk in a raw id field: this\n        # should result in an error message, not a server exception.\n        response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n            post_data)\n        self.assertContains(response,\n            'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_invalid_target_id(self):\n\n        for test_str in ('I\u00f1t\u00ebrn\u00e2ti\u00f4n\u00e0liz\u00e6ti\u00f8n', \"1234'\", -1234):\n            # This should result in an error message, not a server exception.\n            response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n                {\"band\": test_str})\n\n            self.assertContains(response,\n                'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_url_params_from_lookup_dict_any_iterable(self):\n        lookup1 = widgets.url_params_from_lookup_dict({'color__in': ('red', 'blue')})\n        lookup2 = widgets.url_params_from_lookup_dict({'color__in': ['red', 'blue']})\n        self.assertEqual(lookup1, {'color__in': 'red,blue'})\n        self.assertEqual(lookup1, lookup2)\n\n\nclass FilteredSelectMultipleWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.FilteredSelectMultiple('test', False)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilter\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 0, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\n    def test_stacked_render(self):\n        w = widgets.FilteredSelectMultiple('test', True)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilterstacked\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 1, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\nclass AdminDateWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminDateWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test\" size=\"10\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminDateWidget(attrs={'size': 20, 'class': 'myDateField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"myDateField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminTimeWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminTimeWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test\" size=\"8\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminTimeWidget(attrs={'size': 20, 'class': 'myTimeField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"myTimeField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminSplitDateTimeWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminSplitDateTime()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<p class=\"datetime\">Date: <input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Time: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n        )\n\n    def test_localization(self):\n        w = widgets.AdminSplitDateTime()\n\n        with self.settings(USE_L10N=True):\n            with translation.override('de-at'):\n                w.is_localized = True\n                self.assertHTMLEqual(\n                    conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n                    '<p class=\"datetime\">Datum: <input value=\"01.12.2007\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Zeit: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n                )\n\n\nclass AdminURLWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', '')),\n            '<input class=\"vURLField\" name=\"test\" type=\"text\" />'\n        )\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example.com')),\n            '<p class=\"url\">Currently:<a href=\"http://example.com\">http://example.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example.com\" /></p>'\n        )\n\n    def test_render_idn(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com')),\n            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com\">http://example-\u00e4\u00fc\u00f6.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example-\u00e4\u00fc\u00f6.com\" /></p>'\n        )\n\n    def test_render_quoting(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example.com/<sometag>some text</sometag>')),\n            '<p class=\"url\">Currently:<a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example.com/<sometag>some text</sometag>\" /></p>'\n        )\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>')),\n            '<p class=\"url\">Currently:<a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>\" /></p>'\n        )\n\n\nclass AdminFileWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        album = band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n\n        w = widgets.AdminFileWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', album.cover_art)),\n            '<p class=\"file-upload\">Currently: <a href=\"%(STORAGE_URL)salbums/hybrid_theory.jpg\">albums\\hybrid_theory.jpg</a> <span class=\"clearable-file-input\"><input type=\"checkbox\" name=\"test-clear\" id=\"test-clear_id\" /> <label for=\"test-clear_id\">Clear</label></span><br />Change: <input type=\"file\" name=\"test\" /></p>' % { 'STORAGE_URL': default_storage.url('') },\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', SimpleUploadedFile('test', b'content'))),\n            '<input type=\"file\" name=\"test\" />',\n        )\n\n\nclass ForeignKeyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n        rel = models.Album._meta.get_field('band').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', band.pk, attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(bandpk)s\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/band/?t=id\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Linkin Park</strong>' % dict(admin_static_prefix(), bandpk=band.pk)\n        )\n\n    def test_relations_to_non_primary_key(self):\n        # Check that ForeignKeyRawIdWidget works with fields which aren't\n        # related to the model's primary key.\n        apple = models.Inventory.objects.create(barcode=86, name='Apple')\n        models.Inventory.objects.create(barcode=22, name='Pear')\n        core = models.Inventory.objects.create(\n            barcode=87, name='Core', parent=apple\n        )\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            w.render('test', core.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"86\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Apple</strong>' % admin_static_prefix()\n        )\n\n    def test_fk_related_model_not_in_admin(self):\n        # FK to a model not registered with admin site. Raw ID widget should\n        # have no magnifying glass link. See #16542\n        big_honeycomb = models.Honeycomb.objects.create(location='Old tree')\n        big_honeycomb.bee_set.create()\n        rel = models.Bee._meta.get_field('honeycomb').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('honeycomb_widget', big_honeycomb.pk, attrs={})),\n            '<input type=\"text\" name=\"honeycomb_widget\" value=\"%(hcombpk)s\" />&nbsp;<strong>Honeycomb object</strong>' % {'hcombpk': big_honeycomb.pk}\n        )\n\n    def test_fk_to_self_model_not_in_admin(self):\n        # FK to self, not registered with admin site. Raw ID widget should have\n        # no magnifying glass link. See #16542\n        subject1 = models.Individual.objects.create(name='Subject #1')\n        models.Individual.objects.create(name='Child', parent=subject1)\n        rel = models.Individual._meta.get_field('parent').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('individual_widget', subject1.pk, attrs={})),\n            '<input type=\"text\" name=\"individual_widget\" value=\"%(subj1pk)s\" />&nbsp;<strong>Individual object</strong>' % {'subj1pk': subject1.pk}\n        )\n\n    def test_proper_manager_for_label_lookup(self):\n        # see #9258\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n\n        hidden = models.Inventory.objects.create(\n            barcode=93, name='Hidden', hidden=True\n        )\n        child_of_hidden = models.Inventory.objects.create(\n            barcode=94, name='Child of hidden', parent=hidden\n        )\n        self.assertHTMLEqual(\n            w.render('test', child_of_hidden.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"93\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Hidden</strong>' % admin_static_prefix()\n        )\n\n\nclass ManyToManyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n\n        m1 = models.Member.objects.create(name='Chester')\n        m2 = models.Member.objects.create(name='Mike')\n        band.members.add(m1, m2)\n        rel = models.Band._meta.get_field('members').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk, m2.pk], attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s,%(m2pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"/static/admin/img/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk, m2pk=m2.pk)\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk])),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk)\n        )\n\n        self.assertEqual(w._has_changed(None, None), False)\n        self.assertEqual(w._has_changed([], None), False)\n        self.assertEqual(w._has_changed(None, ['1']), True)\n        self.assertEqual(w._has_changed([1, 2], ['1', '2']), False)\n        self.assertEqual(w._has_changed([1, 2], ['1']), True)\n        self.assertEqual(w._has_changed([1, 2], ['1', '3']), True)\n\n    def test_m2m_related_model_not_in_admin(self):\n        # M2M relationship with model not registered with admin site. Raw ID\n        # widget should have no magnifying glass link. See #16542\n        consultor1 = models.Advisor.objects.create(name='Rockstar Techie')\n\n        c1 = models.Company.objects.create(name='Doodle')\n        c2 = models.Company.objects.create(name='Pear')\n        consultor1.companies.add(c1, c2)\n        rel = models.Advisor._meta.get_field('companies').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget1', [c1.pk, c2.pk], attrs={})),\n            '<input type=\"text\" name=\"company_widget1\" value=\"%(c1pk)s,%(c2pk)s\" />' % {'c1pk': c1.pk, 'c2pk': c2.pk}\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget2', [c1.pk])),\n            '<input type=\"text\" name=\"company_widget2\" value=\"%(c1pk)s\" />' % {'c1pk': c1.pk}\n        )\n\nclass RelatedFieldWidgetWrapperTests(DjangoTestCase):\n    def test_no_can_add_related(self):\n        rel = models.Individual._meta.get_field('parent').rel\n        w = widgets.AdminRadioSelect()\n        # Used to fail with a name error.\n        w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site)\n        self.assertFalse(w.can_add_related)\n\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass DateTimePickerSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"regressiontests.admin_widgets.urls\"\n\n    def test_show_hide_date_time_picker_widgets(self):\n        \"\"\"\n        Ensure that pressing the ESC key closes the date and time picker\n        widgets.\n        Refs #17064.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        # Open a page that has a date and time picker widgets\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/admin_widgets/member/add/'))\n\n        # First, with the date picker widget ---------------------------------\n        # Check that the date picker is hidden\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n        # Click the calendar icon\n        self.selenium.find_element_by_id('calendarlink0').click()\n        # Check that the date picker is visible\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the date picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n\n        # Then, with the time picker widget ----------------------------------\n        # Check that the time picker is hidden\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n        # Click the time icon\n        self.selenium.find_element_by_id('clocklink0').click()\n        # Check that the time picker is visible\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the time picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n\nclass DateTimePickerSeleniumChromeTests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass DateTimePickerSeleniumIETests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass HorizontalVerticalFilterSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"regressiontests.admin_widgets.urls\"\n\n    def setUp(self):\n        self.lisa = models.Student.objects.create(name='Lisa')\n        self.john = models.Student.objects.create(name='John')\n        self.bob = models.Student.objects.create(name='Bob')\n        self.peter = models.Student.objects.create(name='Peter')\n        self.jenny = models.Student.objects.create(name='Jenny')\n        self.jason = models.Student.objects.create(name='Jason')\n        self.cliff = models.Student.objects.create(name='Cliff')\n        self.arthur = models.Student.objects.create(name='Arthur')\n        self.school = models.School.objects.create(name='School of Awesome')\n        super(HorizontalVerticalFilterSeleniumFirefoxTests, self).setUp()\n\n    def assertActiveButtons(self, mode, field_name, choose, remove,\n                             choose_all=None, remove_all=None):\n        choose_link = '#id_%s_add_link' % field_name\n        choose_all_link = '#id_%s_add_all_link' % field_name\n        remove_link = '#id_%s_remove_link' % field_name\n        remove_all_link = '#id_%s_remove_all_link' % field_name\n        self.assertEqual(self.has_css_class(choose_link, 'active'), choose)\n        self.assertEqual(self.has_css_class(remove_link, 'active'), remove)\n        if mode == 'horizontal':\n            self.assertEqual(self.has_css_class(choose_all_link, 'active'), choose_all)\n            self.assertEqual(self.has_css_class(remove_all_link, 'active'), remove_all)\n\n    def execute_basic_operations(self, mode, field_name):\n        from_box = '#id_%s_from' % field_name\n        to_box = '#id_%s_to' % field_name\n        choose_link = 'id_%s_add_link' % field_name\n        choose_all_link = 'id_%s_add_all_link' % field_name\n        remove_link = 'id_%s_remove_link' % field_name\n        remove_all_link = 'id_%s_remove_all_link' % field_name\n\n        # Initial positions ---------------------------------------------------\n        self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id)])\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        # Click 'Choose all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(choose_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Choose all' button in vertical mode, so individually\n            # select all options and click 'Choose'.\n            for option in self.selenium.find_elements_by_css_selector(from_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(choose_link).click()\n        self.assertSelectOptions(from_box, [])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertActiveButtons(mode, field_name, False, False, False, True)\n\n        # Click 'Remove all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(remove_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Remove all' button in vertical mode, so individually\n            # select all options and click 'Remove'.\n            for option in self.selenium.find_elements_by_css_selector(to_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(remove_link).click()\n        self.assertSelectOptions(from_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box, [])\n        self.assertActiveButtons(mode, field_name, False, False, True, False)\n\n        # Choose some options ------------------------------------------------\n        self.get_select_option(from_box, str(self.lisa.id)).click()\n        self.get_select_option(from_box, str(self.jason.id)).click()\n        self.get_select_option(from_box, str(self.bob.id)).click()\n        self.get_select_option(from_box, str(self.john.id)).click()\n        self.assertActiveButtons(mode, field_name, True, False, True, False)\n        self.selenium.find_element_by_id(choose_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.bob.id),\n                         str(self.jason.id), str(self.john.id)])\n\n        # Remove some options -------------------------------------------------\n        self.get_select_option(to_box, str(self.lisa.id)).click()\n        self.get_select_option(to_box, str(self.bob.id)).click()\n        self.assertActiveButtons(mode, field_name, False, True, True, True)\n        self.selenium.find_element_by_id(remove_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id)])\n\n        # Choose some more options --------------------------------------------\n        self.get_select_option(from_box, str(self.arthur.id)).click()\n        self.get_select_option(from_box, str(self.cliff.id)).click()\n        self.selenium.find_element_by_id(choose_link).click()\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id),\n                         str(self.arthur.id), str(self.cliff.id)])\n\n    def test_basic(self):\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n        self.wait_page_loaded()\n        self.execute_basic_operations('vertical', 'students')\n        self.execute_basic_operations('horizontal', 'alumni')\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id)  # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n\n    def test_filter(self):\n        \"\"\"\n        Ensure that typing in the search box filters out options displayed in\n        the 'from' box.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n\n        for field_name in ['students', 'alumni']:\n            from_box = '#id_%s_from' % field_name\n            to_box = '#id_%s_to' % field_name\n            choose_link = '#id_%s_add_link' % field_name\n            remove_link = '#id_%s_remove_link' % field_name\n            input = self.selenium.find_element_by_css_selector('#id_%s_input' % field_name)\n\n            # Initial values\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # Typing in some characters filters out non-matching options\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys('R')\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n\n            # Clearing the text box makes the other options reappear\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # -----------------------------------------------------------------\n            # Check that chosing a filtered option sends it properly to the\n            # 'to' box.\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            self.get_select_option(from_box, str(self.jason.id)).click()\n            self.selenium.find_element_by_css_selector(choose_link).click()\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.jason.id)])\n\n            self.get_select_option(to_box, str(self.lisa.id)).click()\n            self.selenium.find_element_by_css_selector(remove_link).click()\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n            input.send_keys([Keys.BACK_SPACE]) # Clear text box\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.john.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id) # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.jason, self.peter])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.jason, self.peter])\n\nclass HorizontalVerticalFilterSeleniumChromeTests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass HorizontalVerticalFilterSeleniumIETests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n"], "fixing_code": ["\"\"\"\nForm Widget classes specific to the Django admin site.\n\"\"\"\nfrom __future__ import unicode_literals\n\nimport copy\n\nfrom django import forms\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.core.urlresolvers import reverse\nfrom django.forms.widgets import RadioFieldRenderer\nfrom django.forms.util import flatatt\nfrom django.utils.html import escape, format_html, format_html_join, smart_urlquote\nfrom django.utils.text import Truncator\nfrom django.utils.translation import ugettext as _\nfrom django.utils.safestring import mark_safe\nfrom django.utils.encoding import force_text\nfrom django.utils import six\n\n\nclass FilteredSelectMultiple(forms.SelectMultiple):\n    \"\"\"\n    A SelectMultiple with a JavaScript filter interface.\n\n    Note that the resulting JavaScript assumes that the jsi18n\n    catalog has been loaded in the page\n    \"\"\"\n    @property\n    def media(self):\n        js = [\"core.js\", \"SelectBox.js\", \"SelectFilter2.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, verbose_name, is_stacked, attrs=None, choices=()):\n        self.verbose_name = verbose_name\n        self.is_stacked = is_stacked\n        super(FilteredSelectMultiple, self).__init__(attrs, choices)\n\n    def render(self, name, value, attrs=None, choices=()):\n        if attrs is None:\n            attrs = {}\n        attrs['class'] = 'selectfilter'\n        if self.is_stacked:\n            attrs['class'] += 'stacked'\n        output = [super(FilteredSelectMultiple, self).render(name, value, attrs, choices)]\n        output.append('<script type=\"text/javascript\">addEvent(window, \"load\", function(e) {')\n        # TODO: \"id_\" is hard-coded here. This should instead use the correct\n        # API to determine the ID dynamically.\n        output.append('SelectFilter.init(\"id_%s\", \"%s\", %s, \"%s\"); });</script>\\n'\n            % (name, self.verbose_name.replace('\"', '\\\\\"'), int(self.is_stacked), static('admin/')))\n        return mark_safe(''.join(output))\n\nclass AdminDateWidget(forms.DateInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vDateField', 'size': '10'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminDateWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminTimeWidget(forms.TimeInput):\n\n    @property\n    def media(self):\n        js = [\"calendar.js\", \"admin/DateTimeShortcuts.js\"]\n        return forms.Media(js=[static(\"admin/js/%s\" % path) for path in js])\n\n    def __init__(self, attrs=None, format=None):\n        final_attrs = {'class': 'vTimeField', 'size': '8'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTimeWidget, self).__init__(attrs=final_attrs, format=format)\n\nclass AdminSplitDateTime(forms.SplitDateTimeWidget):\n    \"\"\"\n    A SplitDateTime Widget that has some admin-specific styling.\n    \"\"\"\n    def __init__(self, attrs=None):\n        widgets = [AdminDateWidget, AdminTimeWidget]\n        # Note that we're calling MultiWidget, not SplitDateTimeWidget, because\n        # we want to define widgets.\n        forms.MultiWidget.__init__(self, widgets, attrs)\n\n    def format_output(self, rendered_widgets):\n        return format_html('<p class=\"datetime\">{0} {1}<br />{2} {3}</p>',\n                           _('Date:'), rendered_widgets[0],\n                           _('Time:'), rendered_widgets[1])\n\nclass AdminRadioFieldRenderer(RadioFieldRenderer):\n    def render(self):\n        \"\"\"Outputs a <ul> for this set of radio fields.\"\"\"\n        return format_html('<ul{0}>\\n{1}\\n</ul>',\n                           flatatt(self.attrs),\n                           format_html_join('\\n', '<li>{0}</li>',\n                                            ((force_text(w),) for w in self)))\n\nclass AdminRadioSelect(forms.RadioSelect):\n    renderer = AdminRadioFieldRenderer\n\nclass AdminFileWidget(forms.ClearableFileInput):\n    template_with_initial = ('<p class=\"file-upload\">%s</p>'\n                            % forms.ClearableFileInput.template_with_initial)\n    template_with_clear = ('<span class=\"clearable-file-input\">%s</span>'\n                           % forms.ClearableFileInput.template_with_clear)\n\ndef url_params_from_lookup_dict(lookups):\n    \"\"\"\n    Converts the type of lookups specified in a ForeignKey limit_choices_to\n    attribute to a dictionary of query parameters\n    \"\"\"\n    params = {}\n    if lookups and hasattr(lookups, 'items'):\n        items = []\n        for k, v in lookups.items():\n            if isinstance(v, (tuple, list)):\n                v = ','.join([str(x) for x in v])\n            elif isinstance(v, bool):\n                # See django.db.fields.BooleanField.get_prep_lookup\n                v = ('0', '1')[v]\n            else:\n                v = six.text_type(v)\n            items.append((k, v))\n        params.update(dict(items))\n    return params\n\nclass ForeignKeyRawIdWidget(forms.TextInput):\n    \"\"\"\n    A Widget for displaying ForeignKeys in the \"raw_id\" interface rather than\n    in a <select> box.\n    \"\"\"\n    def __init__(self, rel, admin_site, attrs=None, using=None):\n        self.rel = rel\n        self.admin_site = admin_site\n        self.db = using\n        super(ForeignKeyRawIdWidget, self).__init__(attrs)\n\n    def render(self, name, value, attrs=None):\n        rel_to = self.rel.to\n        if attrs is None:\n            attrs = {}\n        extra = []\n        if rel_to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            related_url = reverse('admin:%s_%s_changelist' %\n                                    (rel_to._meta.app_label,\n                                    rel_to._meta.module_name),\n                                    current_app=self.admin_site.name)\n\n            params = self.url_parameters()\n            if params:\n                url = '?' + '&amp;'.join(['%s=%s' % (k, v) for k, v in params.items()])\n            else:\n                url = ''\n            if \"class\" not in attrs:\n                attrs['class'] = 'vForeignKeyRawIdAdminField' # The JavaScript code looks for this hook.\n            # TODO: \"lookup_id_\" is hard-coded here. This should instead use\n            # the correct API to determine the ID dynamically.\n            extra.append('<a href=\"%s%s\" class=\"related-lookup\" id=\"lookup_id_%s\" onclick=\"return showRelatedObjectLookupPopup(this);\"> '\n                            % (related_url, url, name))\n            extra.append('<img src=\"%s\" width=\"16\" height=\"16\" alt=\"%s\" /></a>'\n                            % (static('admin/img/selector-search.gif'), _('Lookup')))\n        output = [super(ForeignKeyRawIdWidget, self).render(name, value, attrs)] + extra\n        if value:\n            output.append(self.label_for_value(value))\n        return mark_safe(''.join(output))\n\n    def base_url_parameters(self):\n        return url_params_from_lookup_dict(self.rel.limit_choices_to)\n\n    def url_parameters(self):\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        params = self.base_url_parameters()\n        params.update({TO_FIELD_VAR: self.rel.get_related_field().name})\n        return params\n\n    def label_for_value(self, value):\n        key = self.rel.get_related_field().name\n        try:\n            obj = self.rel.to._default_manager.using(self.db).get(**{key: value})\n            return '&nbsp;<strong>%s</strong>' % escape(Truncator(obj).words(14, truncate='...'))\n        except (ValueError, self.rel.to.DoesNotExist):\n            return ''\n\nclass ManyToManyRawIdWidget(ForeignKeyRawIdWidget):\n    \"\"\"\n    A Widget for displaying ManyToMany ids in the \"raw_id\" interface rather than\n    in a <select multiple> box.\n    \"\"\"\n    def render(self, name, value, attrs=None):\n        if attrs is None:\n            attrs = {}\n        if self.rel.to in self.admin_site._registry:\n            # The related object is registered with the same AdminSite\n            attrs['class'] = 'vManyToManyRawIdAdminField'\n        if value:\n            value = ','.join([force_text(v) for v in value])\n        else:\n            value = ''\n        return super(ManyToManyRawIdWidget, self).render(name, value, attrs)\n\n    def url_parameters(self):\n        return self.base_url_parameters()\n\n    def label_for_value(self, value):\n        return ''\n\n    def value_from_datadict(self, data, files, name):\n        value = data.get(name)\n        if value:\n            return value.split(',')\n\n    def _has_changed(self, initial, data):\n        if initial is None:\n            initial = []\n        if data is None:\n            data = []\n        if len(initial) != len(data):\n            return True\n        for pk1, pk2 in zip(initial, data):\n            if force_text(pk1) != force_text(pk2):\n                return True\n        return False\n\nclass RelatedFieldWidgetWrapper(forms.Widget):\n    \"\"\"\n    This class is a wrapper to a given widget to add the add icon for the\n    admin interface.\n    \"\"\"\n    def __init__(self, widget, rel, admin_site, can_add_related=None):\n        self.is_hidden = widget.is_hidden\n        self.needs_multipart_form = widget.needs_multipart_form\n        self.attrs = widget.attrs\n        self.choices = widget.choices\n        self.widget = widget\n        self.rel = rel\n        # Backwards compatible check for whether a user can add related\n        # objects.\n        if can_add_related is None:\n            can_add_related = rel.to in admin_site._registry\n        self.can_add_related = can_add_related\n        # so we can check if the related object is registered with this AdminSite\n        self.admin_site = admin_site\n\n    def __deepcopy__(self, memo):\n        obj = copy.copy(self)\n        obj.widget = copy.deepcopy(self.widget, memo)\n        obj.attrs = self.widget.attrs\n        memo[id(self)] = obj\n        return obj\n\n    @property\n    def media(self):\n        return self.widget.media\n\n    def render(self, name, value, *args, **kwargs):\n        rel_to = self.rel.to\n        info = (rel_to._meta.app_label, rel_to._meta.object_name.lower())\n        self.widget.choices = self.choices\n        output = [self.widget.render(name, value, *args, **kwargs)]\n        if self.can_add_related:\n            related_url = reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)\n            # TODO: \"add_id_\" is hard-coded here. This should instead use the\n            # correct API to determine the ID dynamically.\n            output.append('<a href=\"%s\" class=\"add-another\" id=\"add_id_%s\" onclick=\"return showAddAnotherPopup(this);\"> '\n                          % (related_url, name))\n            output.append('<img src=\"%s\" width=\"10\" height=\"10\" alt=\"%s\"/></a>'\n                          % (static('admin/img/icon_addlink.gif'), _('Add Another')))\n        return mark_safe(''.join(output))\n\n    def build_attrs(self, extra_attrs=None, **kwargs):\n        \"Helper function for building an attribute dictionary.\"\n        self.attrs = self.widget.build_attrs(extra_attrs=None, **kwargs)\n        return self.attrs\n\n    def value_from_datadict(self, data, files, name):\n        return self.widget.value_from_datadict(data, files, name)\n\n    def _has_changed(self, initial, data):\n        return self.widget._has_changed(initial, data)\n\n    def id_for_label(self, id_):\n        return self.widget.id_for_label(id_)\n\nclass AdminTextareaWidget(forms.Textarea):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vLargeTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextareaWidget, self).__init__(attrs=final_attrs)\n\nclass AdminTextInputWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vTextField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminTextInputWidget, self).__init__(attrs=final_attrs)\n\nclass AdminURLFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vURLField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminURLFieldWidget, self).__init__(attrs=final_attrs)\n\n    def render(self, name, value, attrs=None):\n        html = super(AdminURLFieldWidget, self).render(name, value, attrs)\n        if value:\n            value = force_text(self._format_value(value))\n            final_attrs = {'href': smart_urlquote(value)}\n            html = format_html(\n                '<p class=\"url\">{0} <a{1}>{2}</a><br />{3} {4}</p>',\n                _('Currently:'), flatatt(final_attrs), value,\n                _('Change:'), html\n            )\n        return html\n\n\nclass AdminIntegerFieldWidget(forms.TextInput):\n    class_name = 'vIntegerField'\n\n    def __init__(self, attrs=None):\n        final_attrs = {'class': self.class_name}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminIntegerFieldWidget, self).__init__(attrs=final_attrs)\n\nclass AdminBigIntegerFieldWidget(AdminIntegerFieldWidget):\n    class_name = 'vBigIntegerField'\n\nclass AdminCommaSeparatedIntegerFieldWidget(forms.TextInput):\n    def __init__(self, attrs=None):\n        final_attrs = {'class': 'vCommaSeparatedIntegerField'}\n        if attrs is not None:\n            final_attrs.update(attrs)\n        super(AdminCommaSeparatedIntegerFieldWidget, self).__init__(attrs=final_attrs)\n", "# encoding: utf-8\nfrom __future__ import absolute_import, unicode_literals\n\nfrom datetime import datetime\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import admin\nfrom django.contrib.admin import widgets\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import SimpleUploadedFile\nfrom django.db.models import CharField, DateField\nfrom django.test import TestCase as DjangoTestCase\nfrom django.test.utils import override_settings\nfrom django.utils import translation\nfrom django.utils.html import conditional_escape\nfrom django.utils.unittest import TestCase\n\nfrom . import models\nfrom .widgetadmin import site as widget_admin_site\n\n\nadmin_static_prefix = lambda: {\n    'ADMIN_STATIC_PREFIX': \"%sadmin/\" % settings.STATIC_URL,\n}\n\nclass AdminFormfieldForDBFieldTests(TestCase):\n    \"\"\"\n    Tests for correct behavior of ModelAdmin.formfield_for_dbfield\n    \"\"\"\n\n    def assertFormfield(self, model, fieldname, widgetclass, **admin_overrides):\n        \"\"\"\n        Helper to call formfield_for_dbfield for a given model and field name\n        and verify that the returned formfield is appropriate.\n        \"\"\"\n        # Override any settings on the model admin\n        class MyModelAdmin(admin.ModelAdmin):\n            pass\n        for k in admin_overrides:\n            setattr(MyModelAdmin, k, admin_overrides[k])\n\n        # Construct the admin, and ask it for a formfield\n        ma = MyModelAdmin(model, admin.site)\n        ff = ma.formfield_for_dbfield(model._meta.get_field(fieldname), request=None)\n\n        # \"unwrap\" the widget wrapper, if needed\n        if isinstance(ff.widget, widgets.RelatedFieldWidgetWrapper):\n            widget = ff.widget.widget\n        else:\n            widget = ff.widget\n\n        # Check that we got a field of the right type\n        self.assertTrue(\n            isinstance(widget, widgetclass),\n            \"Wrong widget for %s.%s: expected %s, got %s\" % \\\n                (model.__class__.__name__, fieldname, widgetclass, type(widget))\n        )\n\n        # Return the formfield so that other tests can continue\n        return ff\n\n    def testDateField(self):\n        self.assertFormfield(models.Event, 'start_date', widgets.AdminDateWidget)\n\n    def testDateTimeField(self):\n        self.assertFormfield(models.Member, 'birthdate', widgets.AdminSplitDateTime)\n\n    def testTimeField(self):\n        self.assertFormfield(models.Event, 'start_time', widgets.AdminTimeWidget)\n\n    def testTextField(self):\n        self.assertFormfield(models.Event, 'description', widgets.AdminTextareaWidget)\n\n    def testURLField(self):\n        self.assertFormfield(models.Event, 'link', widgets.AdminURLFieldWidget)\n\n    def testIntegerField(self):\n        self.assertFormfield(models.Event, 'min_age', widgets.AdminIntegerFieldWidget)\n\n    def testCharField(self):\n        self.assertFormfield(models.Member, 'name', widgets.AdminTextInputWidget)\n\n    def testFileField(self):\n        self.assertFormfield(models.Album, 'cover_art', widgets.AdminFileWidget)\n\n    def testForeignKey(self):\n        self.assertFormfield(models.Event, 'band', forms.Select)\n\n    def testRawIDForeignKey(self):\n        self.assertFormfield(models.Event, 'band', widgets.ForeignKeyRawIdWidget,\n                             raw_id_fields=['band'])\n\n    def testRadioFieldsForeignKey(self):\n        ff = self.assertFormfield(models.Event, 'band', widgets.AdminRadioSelect,\n                                  radio_fields={'band':admin.VERTICAL})\n        self.assertEqual(ff.empty_label, None)\n\n    def testManyToMany(self):\n        self.assertFormfield(models.Band, 'members', forms.SelectMultiple)\n\n    def testRawIDManyTOMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.ManyToManyRawIdWidget,\n                             raw_id_fields=['members'])\n\n    def testFilteredManyToMany(self):\n        self.assertFormfield(models.Band, 'members', widgets.FilteredSelectMultiple,\n                             filter_vertical=['members'])\n\n    def testFormfieldOverrides(self):\n        self.assertFormfield(models.Event, 'start_date', forms.TextInput,\n                             formfield_overrides={DateField: {'widget': forms.TextInput}})\n\n    def testFormfieldOverridesWidgetInstances(self):\n        \"\"\"\n        Test that widget instances in formfield_overrides are not shared between\n        different fields. (#19423)\n        \"\"\"\n        class BandAdmin(admin.ModelAdmin):\n            formfield_overrides = {\n                CharField: {'widget': forms.TextInput(attrs={'size':'10'})}\n            }\n        ma = BandAdmin(models.Band, admin.site)\n        f1 = ma.formfield_for_dbfield(models.Band._meta.get_field('name'), request=None)\n        f2 = ma.formfield_for_dbfield(models.Band._meta.get_field('style'), request=None)\n        self.assertNotEqual(f1.widget, f2.widget)\n        self.assertEqual(f1.widget.attrs['maxlength'], '100')\n        self.assertEqual(f2.widget.attrs['maxlength'], '20')\n        self.assertEqual(f2.widget.attrs['size'], '10')\n\n    def testFieldWithChoices(self):\n        self.assertFormfield(models.Member, 'gender', forms.Select)\n\n    def testChoicesWithRadioFields(self):\n        self.assertFormfield(models.Member, 'gender', widgets.AdminRadioSelect,\n                             radio_fields={'gender':admin.VERTICAL})\n\n    def testInheritance(self):\n        self.assertFormfield(models.Album, 'backside_art', widgets.AdminFileWidget)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminFormfieldForDBFieldWithRequestTests(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n\n    def testFilterChoicesByRequestUser(self):\n        \"\"\"\n        Ensure the user can only see their own cars in the foreign key dropdown.\n        \"\"\"\n        self.client.login(username=\"super\", password=\"secret\")\n        response = self.client.get(\"/widget_admin/admin_widgets/cartire/add/\")\n        self.assertNotContains(response, \"BMW M3\")\n        self.assertContains(response, \"Volkswagon Passat\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyWidgetChangeList(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_changelist_foreignkey(self):\n        response = self.client.get('%s/admin_widgets/car/' % self.admin_root)\n        self.assertContains(response, '%s/auth/user/add/' % self.admin_root)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminForeignKeyRawIdWidget(DjangoTestCase):\n    fixtures = [\"admin-widgets-users.xml\"]\n    admin_root = '/widget_admin'\n\n    def setUp(self):\n        self.client.login(username=\"super\", password=\"secret\")\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_nonexistent_target_id(self):\n        band = models.Band.objects.create(name='Bogey Blues')\n        pk = band.pk\n        band.delete()\n        post_data = {\n            \"band\": '%s' % pk,\n        }\n        # Try posting with a non-existent pk in a raw id field: this\n        # should result in an error message, not a server exception.\n        response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n            post_data)\n        self.assertContains(response,\n            'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_invalid_target_id(self):\n\n        for test_str in ('I\u00f1t\u00ebrn\u00e2ti\u00f4n\u00e0liz\u00e6ti\u00f8n', \"1234'\", -1234):\n            # This should result in an error message, not a server exception.\n            response = self.client.post('%s/admin_widgets/event/add/' % self.admin_root,\n                {\"band\": test_str})\n\n            self.assertContains(response,\n                'Select a valid choice. That choice is not one of the available choices.')\n\n    def test_url_params_from_lookup_dict_any_iterable(self):\n        lookup1 = widgets.url_params_from_lookup_dict({'color__in': ('red', 'blue')})\n        lookup2 = widgets.url_params_from_lookup_dict({'color__in': ['red', 'blue']})\n        self.assertEqual(lookup1, {'color__in': 'red,blue'})\n        self.assertEqual(lookup1, lookup2)\n\n\nclass FilteredSelectMultipleWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.FilteredSelectMultiple('test', False)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilter\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 0, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\n    def test_stacked_render(self):\n        w = widgets.FilteredSelectMultiple('test', True)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'test')),\n            '<select multiple=\"multiple\" name=\"test\" class=\"selectfilterstacked\">\\n</select><script type=\"text/javascript\">addEvent(window, \"load\", function(e) {SelectFilter.init(\"id_test\", \"test\", 1, \"%(ADMIN_STATIC_PREFIX)s\"); });</script>\\n' % admin_static_prefix()\n        )\n\nclass AdminDateWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminDateWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test\" size=\"10\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminDateWidget(attrs={'size': 20, 'class': 'myDateField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"2007-12-01\" type=\"text\" class=\"myDateField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminTimeWidgetTest(DjangoTestCase):\n    def test_attrs(self):\n        \"\"\"\n        Ensure that user-supplied attrs are used.\n        Refs #12073.\n        \"\"\"\n        w = widgets.AdminTimeWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test\" size=\"8\" />',\n        )\n        # pass attrs to widget\n        w = widgets.AdminTimeWidget(attrs={'size': 20, 'class': 'myTimeField'})\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<input value=\"09:30:00\" type=\"text\" class=\"myTimeField\" name=\"test\" size=\"20\" />',\n        )\n\nclass AdminSplitDateTimeWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminSplitDateTime()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n            '<p class=\"datetime\">Date: <input value=\"2007-12-01\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Time: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n        )\n\n    def test_localization(self):\n        w = widgets.AdminSplitDateTime()\n\n        with self.settings(USE_L10N=True):\n            with translation.override('de-at'):\n                w.is_localized = True\n                self.assertHTMLEqual(\n                    conditional_escape(w.render('test', datetime(2007, 12, 1, 9, 30))),\n                    '<p class=\"datetime\">Datum: <input value=\"01.12.2007\" type=\"text\" class=\"vDateField\" name=\"test_0\" size=\"10\" /><br />Zeit: <input value=\"09:30:00\" type=\"text\" class=\"vTimeField\" name=\"test_1\" size=\"8\" /></p>',\n                )\n\n\nclass AdminURLWidgetTest(DjangoTestCase):\n    def test_render(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', '')),\n            '<input class=\"vURLField\" name=\"test\" type=\"text\" />'\n        )\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example.com')),\n            '<p class=\"url\">Currently:<a href=\"http://example.com\">http://example.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example.com\" /></p>'\n        )\n\n    def test_render_idn(self):\n        w = widgets.AdminURLFieldWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', 'http://example-\u00e4\u00fc\u00f6.com')),\n            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com\">http://example-\u00e4\u00fc\u00f6.com</a><br />Change:<input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example-\u00e4\u00fc\u00f6.com\" /></p>'\n        )\n\n    def test_render_quoting(self):\n        # WARNING: Don't use assertHTMLEqual in that testcase!\n        # assertHTMLEqual will get rid of some escapes which are tested here!\n        w = widgets.AdminURLFieldWidget()\n        self.assertEqual(\n            w.render('test', 'http://example.com/<sometag>some text</sometag>'),\n            '<p class=\"url\">Currently: <a href=\"http://example.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n        )\n        self.assertEqual(\n            w.render('test', 'http://example-\u00e4\u00fc\u00f6.com/<sometag>some text</sometag>'),\n            '<p class=\"url\">Currently: <a href=\"http://xn--example--7za4pnc.com/%3Csometag%3Esome%20text%3C/sometag%3E\">http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://example-\u00e4\u00fc\u00f6.com/&lt;sometag&gt;some text&lt;/sometag&gt;\" /></p>'\n        )\n        self.assertEqual(\n            w.render('test', 'http://www.example.com/%C3%A4\"><script>alert(\"XSS!\")</script>\"'),\n            '<p class=\"url\">Currently: <a href=\"http://www.example.com/%C3%A4%22%3E%3Cscript%3Ealert(%22XSS!%22)%3C/script%3E%22\">http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;</a><br />Change: <input class=\"vURLField\" name=\"test\" type=\"text\" value=\"http://www.example.com/%C3%A4&quot;&gt;&lt;script&gt;alert(&quot;XSS!&quot;)&lt;/script&gt;&quot;\" /></p>'\n        )\n\n\nclass AdminFileWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        album = band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n\n        w = widgets.AdminFileWidget()\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', album.cover_art)),\n            '<p class=\"file-upload\">Currently: <a href=\"%(STORAGE_URL)salbums/hybrid_theory.jpg\">albums\\hybrid_theory.jpg</a> <span class=\"clearable-file-input\"><input type=\"checkbox\" name=\"test-clear\" id=\"test-clear_id\" /> <label for=\"test-clear_id\">Clear</label></span><br />Change: <input type=\"file\" name=\"test\" /></p>' % { 'STORAGE_URL': default_storage.url('') },\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', SimpleUploadedFile('test', b'content'))),\n            '<input type=\"file\" name=\"test\" />',\n        )\n\n\nclass ForeignKeyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n        band.album_set.create(\n            name='Hybrid Theory', cover_art=r'albums\\hybrid_theory.jpg'\n        )\n        rel = models.Album._meta.get_field('band').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', band.pk, attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(bandpk)s\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/band/?t=id\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Linkin Park</strong>' % dict(admin_static_prefix(), bandpk=band.pk)\n        )\n\n    def test_relations_to_non_primary_key(self):\n        # Check that ForeignKeyRawIdWidget works with fields which aren't\n        # related to the model's primary key.\n        apple = models.Inventory.objects.create(barcode=86, name='Apple')\n        models.Inventory.objects.create(barcode=22, name='Pear')\n        core = models.Inventory.objects.create(\n            barcode=87, name='Core', parent=apple\n        )\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            w.render('test', core.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"86\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Apple</strong>' % admin_static_prefix()\n        )\n\n    def test_fk_related_model_not_in_admin(self):\n        # FK to a model not registered with admin site. Raw ID widget should\n        # have no magnifying glass link. See #16542\n        big_honeycomb = models.Honeycomb.objects.create(location='Old tree')\n        big_honeycomb.bee_set.create()\n        rel = models.Bee._meta.get_field('honeycomb').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('honeycomb_widget', big_honeycomb.pk, attrs={})),\n            '<input type=\"text\" name=\"honeycomb_widget\" value=\"%(hcombpk)s\" />&nbsp;<strong>Honeycomb object</strong>' % {'hcombpk': big_honeycomb.pk}\n        )\n\n    def test_fk_to_self_model_not_in_admin(self):\n        # FK to self, not registered with admin site. Raw ID widget should have\n        # no magnifying glass link. See #16542\n        subject1 = models.Individual.objects.create(name='Subject #1')\n        models.Individual.objects.create(name='Child', parent=subject1)\n        rel = models.Individual._meta.get_field('parent').rel\n\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('individual_widget', subject1.pk, attrs={})),\n            '<input type=\"text\" name=\"individual_widget\" value=\"%(subj1pk)s\" />&nbsp;<strong>Individual object</strong>' % {'subj1pk': subject1.pk}\n        )\n\n    def test_proper_manager_for_label_lookup(self):\n        # see #9258\n        rel = models.Inventory._meta.get_field('parent').rel\n        w = widgets.ForeignKeyRawIdWidget(rel, widget_admin_site)\n\n        hidden = models.Inventory.objects.create(\n            barcode=93, name='Hidden', hidden=True\n        )\n        child_of_hidden = models.Inventory.objects.create(\n            barcode=94, name='Child of hidden', parent=hidden\n        )\n        self.assertHTMLEqual(\n            w.render('test', child_of_hidden.parent_id, attrs={}),\n            '<input type=\"text\" name=\"test\" value=\"93\" class=\"vForeignKeyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/inventory/?t=barcode\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>&nbsp;<strong>Hidden</strong>' % admin_static_prefix()\n        )\n\n\nclass ManyToManyRawIdWidgetTest(DjangoTestCase):\n    def test_render(self):\n        band = models.Band.objects.create(name='Linkin Park')\n\n        m1 = models.Member.objects.create(name='Chester')\n        m2 = models.Member.objects.create(name='Mike')\n        band.members.add(m1, m2)\n        rel = models.Band._meta.get_field('members').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk, m2.pk], attrs={})),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s,%(m2pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"/static/admin/img/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk, m2pk=m2.pk)\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('test', [m1.pk])),\n            '<input type=\"text\" name=\"test\" value=\"%(m1pk)s\" class=\"vManyToManyRawIdAdminField\" /><a href=\"/widget_admin/admin_widgets/member/\" class=\"related-lookup\" id=\"lookup_id_test\" onclick=\"return showRelatedObjectLookupPopup(this);\"> <img src=\"%(ADMIN_STATIC_PREFIX)simg/selector-search.gif\" width=\"16\" height=\"16\" alt=\"Lookup\" /></a>' % dict(admin_static_prefix(), m1pk=m1.pk)\n        )\n\n        self.assertEqual(w._has_changed(None, None), False)\n        self.assertEqual(w._has_changed([], None), False)\n        self.assertEqual(w._has_changed(None, ['1']), True)\n        self.assertEqual(w._has_changed([1, 2], ['1', '2']), False)\n        self.assertEqual(w._has_changed([1, 2], ['1']), True)\n        self.assertEqual(w._has_changed([1, 2], ['1', '3']), True)\n\n    def test_m2m_related_model_not_in_admin(self):\n        # M2M relationship with model not registered with admin site. Raw ID\n        # widget should have no magnifying glass link. See #16542\n        consultor1 = models.Advisor.objects.create(name='Rockstar Techie')\n\n        c1 = models.Company.objects.create(name='Doodle')\n        c2 = models.Company.objects.create(name='Pear')\n        consultor1.companies.add(c1, c2)\n        rel = models.Advisor._meta.get_field('companies').rel\n\n        w = widgets.ManyToManyRawIdWidget(rel, widget_admin_site)\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget1', [c1.pk, c2.pk], attrs={})),\n            '<input type=\"text\" name=\"company_widget1\" value=\"%(c1pk)s,%(c2pk)s\" />' % {'c1pk': c1.pk, 'c2pk': c2.pk}\n        )\n\n        self.assertHTMLEqual(\n            conditional_escape(w.render('company_widget2', [c1.pk])),\n            '<input type=\"text\" name=\"company_widget2\" value=\"%(c1pk)s\" />' % {'c1pk': c1.pk}\n        )\n\nclass RelatedFieldWidgetWrapperTests(DjangoTestCase):\n    def test_no_can_add_related(self):\n        rel = models.Individual._meta.get_field('parent').rel\n        w = widgets.AdminRadioSelect()\n        # Used to fail with a name error.\n        w = widgets.RelatedFieldWidgetWrapper(w, rel, widget_admin_site)\n        self.assertFalse(w.can_add_related)\n\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass DateTimePickerSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"regressiontests.admin_widgets.urls\"\n\n    def test_show_hide_date_time_picker_widgets(self):\n        \"\"\"\n        Ensure that pressing the ESC key closes the date and time picker\n        widgets.\n        Refs #17064.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        # Open a page that has a date and time picker widgets\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/admin_widgets/member/add/'))\n\n        # First, with the date picker widget ---------------------------------\n        # Check that the date picker is hidden\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n        # Click the calendar icon\n        self.selenium.find_element_by_id('calendarlink0').click()\n        # Check that the date picker is visible\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the date picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#calendarbox0', 'display'), 'none')\n\n        # Then, with the time picker widget ----------------------------------\n        # Check that the time picker is hidden\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n        # Click the time icon\n        self.selenium.find_element_by_id('clocklink0').click()\n        # Check that the time picker is visible\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'block')\n        # Press the ESC key\n        self.selenium.find_element_by_tag_name('body').send_keys([Keys.ESCAPE])\n        # Check that the time picker is hidden again\n        self.assertEqual(\n            self.get_css_value('#clockbox0', 'display'), 'none')\n\nclass DateTimePickerSeleniumChromeTests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass DateTimePickerSeleniumIETests(DateTimePickerSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass HorizontalVerticalFilterSeleniumFirefoxTests(AdminSeleniumWebDriverTestCase):\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n    fixtures = ['admin-widgets-users.xml']\n    urls = \"regressiontests.admin_widgets.urls\"\n\n    def setUp(self):\n        self.lisa = models.Student.objects.create(name='Lisa')\n        self.john = models.Student.objects.create(name='John')\n        self.bob = models.Student.objects.create(name='Bob')\n        self.peter = models.Student.objects.create(name='Peter')\n        self.jenny = models.Student.objects.create(name='Jenny')\n        self.jason = models.Student.objects.create(name='Jason')\n        self.cliff = models.Student.objects.create(name='Cliff')\n        self.arthur = models.Student.objects.create(name='Arthur')\n        self.school = models.School.objects.create(name='School of Awesome')\n        super(HorizontalVerticalFilterSeleniumFirefoxTests, self).setUp()\n\n    def assertActiveButtons(self, mode, field_name, choose, remove,\n                             choose_all=None, remove_all=None):\n        choose_link = '#id_%s_add_link' % field_name\n        choose_all_link = '#id_%s_add_all_link' % field_name\n        remove_link = '#id_%s_remove_link' % field_name\n        remove_all_link = '#id_%s_remove_all_link' % field_name\n        self.assertEqual(self.has_css_class(choose_link, 'active'), choose)\n        self.assertEqual(self.has_css_class(remove_link, 'active'), remove)\n        if mode == 'horizontal':\n            self.assertEqual(self.has_css_class(choose_all_link, 'active'), choose_all)\n            self.assertEqual(self.has_css_class(remove_all_link, 'active'), remove_all)\n\n    def execute_basic_operations(self, mode, field_name):\n        from_box = '#id_%s_from' % field_name\n        to_box = '#id_%s_to' % field_name\n        choose_link = 'id_%s_add_link' % field_name\n        choose_all_link = 'id_%s_add_all_link' % field_name\n        remove_link = 'id_%s_remove_link' % field_name\n        remove_all_link = 'id_%s_remove_all_link' % field_name\n\n        # Initial positions ---------------------------------------------------\n        self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id)])\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        # Click 'Choose all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(choose_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Choose all' button in vertical mode, so individually\n            # select all options and click 'Choose'.\n            for option in self.selenium.find_elements_by_css_selector(from_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(choose_link).click()\n        self.assertSelectOptions(from_box, [])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertActiveButtons(mode, field_name, False, False, False, True)\n\n        # Click 'Remove all' --------------------------------------------------\n        if mode == 'horizontal':\n            self.selenium.find_element_by_id(remove_all_link).click()\n        elif mode == 'vertical':\n            # There 's no 'Remove all' button in vertical mode, so individually\n            # select all options and click 'Remove'.\n            for option in self.selenium.find_elements_by_css_selector(to_box + ' > option'):\n                option.click()\n            self.selenium.find_element_by_id(remove_link).click()\n        self.assertSelectOptions(from_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n        self.assertSelectOptions(to_box, [])\n        self.assertActiveButtons(mode, field_name, False, False, True, False)\n\n        # Choose some options ------------------------------------------------\n        self.get_select_option(from_box, str(self.lisa.id)).click()\n        self.get_select_option(from_box, str(self.jason.id)).click()\n        self.get_select_option(from_box, str(self.bob.id)).click()\n        self.get_select_option(from_box, str(self.john.id)).click()\n        self.assertActiveButtons(mode, field_name, True, False, True, False)\n        self.selenium.find_element_by_id(choose_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.bob.id),\n                         str(self.jason.id), str(self.john.id)])\n\n        # Remove some options -------------------------------------------------\n        self.get_select_option(to_box, str(self.lisa.id)).click()\n        self.get_select_option(to_box, str(self.bob.id)).click()\n        self.assertActiveButtons(mode, field_name, False, True, True, True)\n        self.selenium.find_element_by_id(remove_link).click()\n        self.assertActiveButtons(mode, field_name, False, False, True, True)\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.arthur.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id)])\n\n        # Choose some more options --------------------------------------------\n        self.get_select_option(from_box, str(self.arthur.id)).click()\n        self.get_select_option(from_box, str(self.cliff.id)).click()\n        self.selenium.find_element_by_id(choose_link).click()\n\n        self.assertSelectOptions(from_box,\n                        [str(self.peter.id), str(self.jenny.id),\n                         str(self.lisa.id), str(self.bob.id)])\n        self.assertSelectOptions(to_box,\n                        [str(self.jason.id), str(self.john.id),\n                         str(self.arthur.id), str(self.cliff.id)])\n\n    def test_basic(self):\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n        self.wait_page_loaded()\n        self.execute_basic_operations('vertical', 'students')\n        self.execute_basic_operations('horizontal', 'alumni')\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id)  # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.arthur, self.cliff, self.jason, self.john])\n\n    def test_filter(self):\n        \"\"\"\n        Ensure that typing in the search box filters out options displayed in\n        the 'from' box.\n        \"\"\"\n        from selenium.webdriver.common.keys import Keys\n\n        self.school.students = [self.lisa, self.peter]\n        self.school.alumni = [self.lisa, self.peter]\n        self.school.save()\n\n        self.admin_login(username='super', password='secret', login_url='/')\n        self.selenium.get(\n            '%s%s' % (self.live_server_url, '/admin_widgets/school/%s/' % self.school.id))\n\n\n        for field_name in ['students', 'alumni']:\n            from_box = '#id_%s_from' % field_name\n            to_box = '#id_%s_to' % field_name\n            choose_link = '#id_%s_add_link' % field_name\n            remove_link = '#id_%s_remove_link' % field_name\n            input = self.selenium.find_element_by_css_selector('#id_%s_input' % field_name)\n\n            # Initial values\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # Typing in some characters filters out non-matching options\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys('R')\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n\n            # Clearing the text box makes the other options reappear\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            input.send_keys([Keys.BACK_SPACE])\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jason.id),\n                         str(self.jenny.id), str(self.john.id)])\n\n            # -----------------------------------------------------------------\n            # Check that chosing a filtered option sends it properly to the\n            # 'to' box.\n            input.send_keys('a')\n            self.assertSelectOptions(from_box, [str(self.arthur.id), str(self.jason.id)])\n            self.get_select_option(from_box, str(self.jason.id)).click()\n            self.selenium.find_element_by_css_selector(choose_link).click()\n            self.assertSelectOptions(from_box, [str(self.arthur.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.lisa.id), str(self.peter.id),\n                         str(self.jason.id)])\n\n            self.get_select_option(to_box, str(self.lisa.id)).click()\n            self.selenium.find_element_by_css_selector(remove_link).click()\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n            input.send_keys([Keys.BACK_SPACE]) # Clear text box\n            self.assertSelectOptions(from_box,\n                        [str(self.arthur.id), str(self.bob.id),\n                         str(self.cliff.id), str(self.jenny.id),\n                         str(self.john.id), str(self.lisa.id)])\n            self.assertSelectOptions(to_box,\n                        [str(self.peter.id), str(self.jason.id)])\n\n        # Save and check that everything is properly stored in the database ---\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.school = models.School.objects.get(id=self.school.id) # Reload from database\n        self.assertEqual(list(self.school.students.all()),\n                         [self.jason, self.peter])\n        self.assertEqual(list(self.school.alumni.all()),\n                         [self.jason, self.peter])\n\nclass HorizontalVerticalFilterSeleniumChromeTests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\nclass HorizontalVerticalFilterSeleniumIETests(HorizontalVerticalFilterSeleniumFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n"], "filenames": ["django/contrib/admin/widgets.py", "tests/regressiontests/admin_widgets/tests.py"], "buggy_code_start_loc": [313, 302], "buggy_code_end_loc": [316, 314], "fixing_code_start_loc": [313, 302], "fixing_code_end_loc": [316, 320], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the AdminURLFieldWidget widget in contrib/admin/widgets.py in Django 1.5.x before 1.5.2 and 1.6.x before 1.6 beta 2 allows remote attackers to inject arbitrary web script or HTML via a URLField.", "other": {"cve": {"id": "CVE-2013-4249", "sourceIdentifier": "secalert@redhat.com", "published": "2013-10-04T17:55:09.807", "lastModified": "2017-08-29T01:33:36.620", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the AdminURLFieldWidget widget in contrib/admin/widgets.py in Django 1.5.x before 1.5.2 and 1.6.x before 1.6 beta 2 allows remote attackers to inject arbitrary web script or HTML via a URLField."}, {"lang": "es", "value": "Vulnerabilidad de XSS en el widget AdminURLFieldWidget en contrib/admin/widgets.py de Django 1.5.x anterior a la versi\u00f3n 1.5.2 y 1.6.x anterior a 1.6 beta 2 permite a atacantes remotos inyectar script web arbitrario o HTML a trav\u00e9s de una URLField."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5:*:*:*:*:*:*:*", "matchCriteriaId": "CCDB4B76-6541-4405-B74C-3EEAF84A04E1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5:alpha:*:*:*:*:*:*", "matchCriteriaId": "8A26B113-8D22-46E5-92C3-12134A68A21E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5:beta:*:*:*:*:*:*", "matchCriteriaId": "0D99FB28-08F3-45B4-8C04-90074FBC2457"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4E2A29CC-A92B-4EC1-8225-408A5048C033"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6:beta1:*:*:*:*:*:*", "matchCriteriaId": "A83451BD-1D67-4A7F-A62C-F597E51FCC21"}]}]}], "references": [{"url": "http://seclists.org/oss-sec/2013/q3/369", "source": "secalert@redhat.com"}, {"url": "http://seclists.org/oss-sec/2013/q3/411", "source": "secalert@redhat.com"}, {"url": "http://www.securitytracker.com/id/1028915", "source": "secalert@redhat.com"}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/86438", "source": "secalert@redhat.com"}, {"url": "https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/django/django/commit/cbe6d5568f4f5053ed7228ca3c3d0cce77cf9560", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78"}}