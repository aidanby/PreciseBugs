{"buggy_code": ["<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Product\\SalesChannel\\Review;\n\nuse OpenApi\\Annotations as OA;\nuse Shopware\\Core\\Checkout\\Customer\\CustomerEntity;\nuse Shopware\\Core\\Content\\Product\\Exception\\ReviewNotActiveExeption;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExists;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExists;\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\nuse Shopware\\Core\\Framework\\Routing\\Annotation\\LoginRequired;\nuse Shopware\\Core\\Framework\\Routing\\Annotation\\RouteScope;\nuse Shopware\\Core\\Framework\\Routing\\Annotation\\Since;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\DataBag;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\nuse Shopware\\Core\\Framework\\Validation\\DataValidationDefinition;\nuse Shopware\\Core\\Framework\\Validation\\DataValidator;\nuse Shopware\\Core\\Framework\\Validation\\Exception\\ConstraintViolationException;\nuse Shopware\\Core\\System\\SalesChannel\\NoContentResponse;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Validator\\Constraints\\GreaterThanOrEqual;\nuse Symfony\\Component\\Validator\\Constraints\\Length;\nuse Symfony\\Component\\Validator\\Constraints\\LessThanOrEqual;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\n\n/**\n * @RouteScope(scopes={\"store-api\"})\n */\nclass ProductReviewSaveRoute extends AbstractProductReviewSaveRoute\n{\n    /**\n     * @var EntityRepositoryInterface\n     */\n    private $repository;\n\n    /**\n     * @var DataValidator\n     */\n    private $validator;\n\n    /**\n     * @var SystemConfigService\n     */\n    private $config;\n\n    public function __construct(\n        EntityRepositoryInterface $reviewRepository,\n        DataValidator $validator,\n        SystemConfigService $config\n    ) {\n        $this->repository = $reviewRepository;\n        $this->validator = $validator;\n        $this->config = $config;\n    }\n\n    public function getDecorated(): AbstractProductReviewSaveRoute\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    /**\n     * @Since(\"6.3.2.0\")\n     * @OA\\Post(\n     *      path=\"/product/{productId}/review\",\n     *      summary=\"Save a product review\",\n     *      description=\"Saves a review for a product. Reviews have to be activated in the settings.\",\n     *      operationId=\"saveProductReview\",\n     *      tags={\"Store API\",\"Product\"},\n     *      @OA\\Parameter(\n     *          name=\"productId\",\n     *          description=\"Identifier of the product which is reviewed.\",\n     *          @OA\\Schema(type=\"string\", pattern=\"^[0-9a-f]{32}$\"),\n     *          in=\"path\",\n     *          required=true\n     *      ),\n     *      @OA\\RequestBody(\n     *          @OA\\JsonContent(\n     *              required={\n     *                  \"title\",\n     *                  \"content\",\n     *                  \"points\"\n     *              },\n     *              @OA\\Property(\n     *                  property=\"name\",\n     *                  type=\"string\",\n     *                  description=\"The name of the review author. If not set, the first name of the customer is chosen.\"\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"email\",\n     *                  type=\"string\",\n     *                  description=\"The email address of the review author. If not set, the email of the customer is chosen.\"\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"title\",\n     *                  description=\"The title of the review.\",\n     *                  @OA\\Schema(type=\"string\", required=true, minLength=5)\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"content\",\n     *                  description=\"The content of review.\",\n     *                  @OA\\Schema(type=\"string\", required=true, minLength=40)\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"points\",\n     *                  description=\"The review rating for the product.\",\n     *                  @OA\\Schema(type=\"integer\", required=true, minimum=1, maximum=5)\n     *              ),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=\"200\",\n     *          description=\"Success response indicating the review was saved successfuly.\"\n     *     )\n     * )\n     * @LoginRequired()\n     * @Route(\"/store-api/product/{productId}/review\", name=\"store-api.product-review.save\", methods={\"POST\"})\n     */\n    public function save(string $productId, RequestDataBag $data, SalesChannelContext $context): NoContentResponse\n    {\n        $this->checkReviewsActive($context);\n\n        /** @var CustomerEntity $customer */\n        $customer = $context->getCustomer();\n\n        $languageId = $context->getContext()->getLanguageId();\n        $salesChannelId = $context->getSalesChannel()->getId();\n\n        $customerId = $customer->getId();\n\n        if (!$data->has('name')) {\n            $data->set('name', $customer->getFirstName());\n        }\n\n        if (!$data->has('email')) {\n            $data->set('email', $customer->getEmail());\n        }\n\n        $data->set('customerId', $customerId);\n        $data->set('productId', $productId);\n        $this->validate($data, $context->getContext());\n\n        $review = [\n            'productId' => $productId,\n            'customerId' => $customerId,\n            'salesChannelId' => $salesChannelId,\n            'languageId' => $languageId,\n            'externalUser' => $data->get('name'),\n            'externalEmail' => $data->get('email'),\n            'title' => $data->get('title'),\n            'content' => $data->get('content'),\n            'points' => $data->get('points'),\n            'status' => false,\n        ];\n\n        if ($data->get('id')) {\n            $review['id'] = $data->get('id');\n        }\n\n        $this->repository->upsert([$review], $context->getContext());\n\n        return new NoContentResponse();\n    }\n\n    private function validate(DataBag $data, Context $context): void\n    {\n        $definition = new DataValidationDefinition('product.create_rating');\n\n        $definition->add('name', new NotBlank());\n        $definition->add('title', new NotBlank(), new Length(['min' => 5]));\n        $definition->add('content', new NotBlank(), new Length(['min' => 40]));\n\n        $definition->add('points', new GreaterThanOrEqual(1), new LessThanOrEqual(5));\n\n        if ($data->get('id')) {\n            $criteria = new Criteria();\n            $criteria->addFilter(new EqualsFilter('customerId', $data->get('customerId')));\n            $criteria->addFilter(new EqualsFilter('id', $data->get('id')));\n\n            $definition->add('id', new EntityExists([\n                'entity' => 'product_review',\n                'context' => $context,\n            ]));\n        } else {\n            $criteria = new Criteria();\n            $criteria->addFilter(new EqualsFilter('customerId', $data->get('customerId')));\n            $criteria->addFilter(new EqualsFilter('productId', $data->get('productId')));\n\n            $definition->add('customerId', new EntityNotExists([\n                'entity' => 'product_review',\n                'context' => $context,\n                'criteria' => $criteria,\n            ]));\n        }\n\n        $this->validator->validate($data->all(), $definition);\n\n        $violations = $this->validator->getViolations($data->all(), $definition);\n\n        if (!$violations->count()) {\n            return;\n        }\n\n        throw new ConstraintViolationException($violations, $data->all());\n    }\n\n    /**\n     * @throws ReviewNotActiveExeption\n     */\n    private function checkReviewsActive(SalesChannelContext $context): void\n    {\n        $showReview = $this->config->get('core.listing.showReview', $context->getSalesChannel()->getId());\n\n        if (!$showReview) {\n            throw new ReviewNotActiveExeption();\n        }\n    }\n}\n", "<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Test\\Product\\SalesChannel\\Review;\n\nuse Doctrine\\DBAL\\Connection;\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Core\\Checkout\\Test\\Payment\\Handler\\V630\\SyncTestPaymentHandler;\nuse Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelApiTestBehaviour;\nuse Shopware\\Core\\Framework\\Test\\TestDataCollection;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\n\n/**\n * @group store-api\n */\nclass ProductReviewSaveRouteTest extends TestCase\n{\n    use IntegrationTestBehaviour;\n    use SalesChannelApiTestBehaviour;\n\n    /**\n     * @var \\Symfony\\Bundle\\FrameworkBundle\\KernelBrowser\n     */\n    private $browser;\n\n    /**\n     * @var TestDataCollection\n     */\n    private $ids;\n\n    protected function setUp(): void\n    {\n        $this->ids = new TestDataCollection(Context::createDefaultContext());\n\n        $this->createData();\n\n        $this->browser = $this->createCustomSalesChannelBrowser([\n            'id' => $this->ids->create('sales-channel'),\n        ]);\n\n        $this->setVisibilities();\n    }\n\n    public function testRequiresLogin(): void\n    {\n        $this->browser->request('POST', $this->getUrl());\n\n        $response = $this->browser->getResponse();\n\n        static::assertEquals(403, $response->getStatusCode());\n\n        $response = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals($response['errors'][0]['code'], 'CHECKOUT__CUSTOMER_NOT_LOGGED_IN');\n    }\n\n    public function testCreate(): void\n    {\n        $this->login();\n\n        $this->assertReviewCount(0);\n\n        $this->browser->request('POST', $this->getUrl(), [\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n\n        $response = $this->browser->getResponse();\n        $content = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals(204, $response->getStatusCode(), print_r($content, true));\n\n        $this->assertReviewCount(1);\n    }\n\n    public function testUpdate(): void\n    {\n        $this->login();\n\n        $this->assertReviewCount(0);\n\n        $id = Uuid::randomHex();\n\n        $this->browser->request('POST', $this->getUrl(), [\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n\n        $response = $this->browser->getResponse();\n        $content = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals(204, $response->getStatusCode(), print_r($content, true));\n\n        $this->assertReviewCount(1);\n\n        $this->browser->request('POST', $this->getUrl(), [\n            'id' => $id,\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n        $this->assertReviewCount(1);\n    }\n\n    public function testValidation(): void\n    {\n        $this->login();\n\n        $this->browser->request('POST', $this->getUrl());\n\n        $response = $this->browser->getResponse();\n\n        static::assertEquals(400, $response->getStatusCode());\n\n        $response = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals($response['errors'][0]['source']['pointer'], '/title');\n        static::assertEquals($response['errors'][1]['source']['pointer'], '/content');\n    }\n\n    private function assertReviewCount(int $expected): void\n    {\n        $count = $this->getContainer()\n            ->get(Connection::class)\n            ->fetchColumn('SELECT COUNT(*) FROM product_review WHERE product_id = :id', ['id' => Uuid::fromHexToBytes($this->ids->get('product'))]);\n\n        static::assertEquals($expected, $count);\n    }\n\n    private function login(): void\n    {\n        $email = Uuid::randomHex() . '@example.com';\n        $this->createCustomer('shopware', $email);\n\n        $this->browser\n            ->request(\n                'POST',\n                '/store-api/account/login',\n                [\n                    'email' => $email,\n                    'password' => 'shopware',\n                ]\n            );\n\n        $response = json_decode($this->browser->getResponse()->getContent(), true);\n\n        $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);\n    }\n\n    private function createCustomer(string $password, ?string $email = null): string\n    {\n        $customerId = Uuid::randomHex();\n        $addressId = Uuid::randomHex();\n\n        $this->getContainer()->get('customer.repository')->create([\n            [\n                'id' => $customerId,\n                'salesChannelId' => Defaults::SALES_CHANNEL,\n                'defaultShippingAddress' => [\n                    'id' => $addressId,\n                    'firstName' => 'Max',\n                    'lastName' => 'Mustermann',\n                    'street' => 'Musterstra\u00dfe 1',\n                    'city' => 'Scho\u00f6ppingen',\n                    'zipcode' => '12345',\n                    'salutationId' => $this->getValidSalutationId(),\n                    'countryId' => $this->getValidCountryId(),\n                ],\n                'defaultBillingAddressId' => $addressId,\n                'defaultPaymentMethod' => [\n                    'name' => 'Invoice',\n                    'active' => true,\n                    'description' => 'Default payment method',\n                    'handlerIdentifier' => SyncTestPaymentHandler::class,\n                    'availabilityRule' => [\n                        'id' => Uuid::randomHex(),\n                        'name' => 'true',\n                        'priority' => 0,\n                        'conditions' => [\n                            [\n                                'type' => 'cartCartAmount',\n                                'value' => [\n                                    'operator' => '>=',\n                                    'amount' => 0,\n                                ],\n                            ],\n                        ],\n                    ],\n                    'salesChannels' => [\n                        [\n                            'id' => Defaults::SALES_CHANNEL,\n                        ],\n                    ],\n                ],\n                'groupId' => Defaults::FALLBACK_CUSTOMER_GROUP,\n                'email' => $email,\n                'password' => $password,\n                'firstName' => 'Fooo',\n                'lastName' => 'Barr',\n                'salutationId' => $this->getValidSalutationId(),\n                'customerNumber' => '12345',\n            ],\n        ], $this->ids->context);\n\n        return $customerId;\n    }\n\n    private function createData(): void\n    {\n        $product = [\n            'id' => $this->ids->create('product'),\n            'manufacturer' => ['id' => $this->ids->create('manufacturer-'), 'name' => 'test-'],\n            'productNumber' => $this->ids->get('product'),\n            'name' => 'test',\n            'stock' => 10,\n            'price' => [\n                ['currencyId' => Defaults::CURRENCY, 'gross' => 15, 'net' => 10, 'linked' => false],\n            ],\n            'tax' => ['name' => 'test', 'taxRate' => 15],\n            'active' => true,\n        ];\n\n        $this->getContainer()->get('product.repository')\n            ->create([$product], Context::createDefaultContext());\n    }\n\n    private function setVisibilities(): void\n    {\n        $update = [\n            [\n                'id' => $this->ids->get('product'),\n                'visibilities' => [\n                    ['salesChannelId' => $this->ids->get('sales-channel'), 'visibility' => ProductVisibilityDefinition::VISIBILITY_ALL],\n                ],\n            ],\n        ];\n        $this->getContainer()->get('product.repository')\n            ->update($update, $this->ids->context);\n    }\n\n    private function getUrl()\n    {\n        return '/store-api/product/' . $this->ids->get('product') . '/review';\n    }\n}\n"], "fixing_code": ["<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Product\\SalesChannel\\Review;\n\nuse OpenApi\\Annotations as OA;\nuse Shopware\\Core\\Checkout\\Customer\\CustomerEntity;\nuse Shopware\\Core\\Content\\Product\\Exception\\ReviewNotActiveExeption;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExists;\nuse Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExists;\nuse Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\nuse Shopware\\Core\\Framework\\Routing\\Annotation\\LoginRequired;\nuse Shopware\\Core\\Framework\\Routing\\Annotation\\RouteScope;\nuse Shopware\\Core\\Framework\\Routing\\Annotation\\Since;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\DataBag;\nuse Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\nuse Shopware\\Core\\Framework\\Validation\\DataValidationDefinition;\nuse Shopware\\Core\\Framework\\Validation\\DataValidator;\nuse Shopware\\Core\\Framework\\Validation\\Exception\\ConstraintViolationException;\nuse Shopware\\Core\\System\\SalesChannel\\NoContentResponse;\nuse Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\nuse Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Validator\\Constraints\\GreaterThanOrEqual;\nuse Symfony\\Component\\Validator\\Constraints\\Length;\nuse Symfony\\Component\\Validator\\Constraints\\LessThanOrEqual;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\n\n/**\n * @RouteScope(scopes={\"store-api\"})\n */\nclass ProductReviewSaveRoute extends AbstractProductReviewSaveRoute\n{\n    /**\n     * @var EntityRepositoryInterface\n     */\n    private $repository;\n\n    /**\n     * @var DataValidator\n     */\n    private $validator;\n\n    /**\n     * @var SystemConfigService\n     */\n    private $config;\n\n    public function __construct(\n        EntityRepositoryInterface $reviewRepository,\n        DataValidator $validator,\n        SystemConfigService $config\n    ) {\n        $this->repository = $reviewRepository;\n        $this->validator = $validator;\n        $this->config = $config;\n    }\n\n    public function getDecorated(): AbstractProductReviewSaveRoute\n    {\n        throw new DecorationPatternException(self::class);\n    }\n\n    /**\n     * @Since(\"6.3.2.0\")\n     * @OA\\Post(\n     *      path=\"/product/{productId}/review\",\n     *      summary=\"Save a product review\",\n     *      description=\"Saves a review for a product. Reviews have to be activated in the settings.\",\n     *      operationId=\"saveProductReview\",\n     *      tags={\"Store API\",\"Product\"},\n     *      @OA\\Parameter(\n     *          name=\"productId\",\n     *          description=\"Identifier of the product which is reviewed.\",\n     *          @OA\\Schema(type=\"string\", pattern=\"^[0-9a-f]{32}$\"),\n     *          in=\"path\",\n     *          required=true\n     *      ),\n     *      @OA\\RequestBody(\n     *          @OA\\JsonContent(\n     *              required={\n     *                  \"title\",\n     *                  \"content\",\n     *                  \"points\"\n     *              },\n     *              @OA\\Property(\n     *                  property=\"name\",\n     *                  type=\"string\",\n     *                  description=\"The name of the review author. If not set, the first name of the customer is chosen.\"\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"email\",\n     *                  type=\"string\",\n     *                  description=\"The email address of the review author. If not set, the email of the customer is chosen.\"\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"title\",\n     *                  description=\"The title of the review.\",\n     *                  @OA\\Schema(type=\"string\", required=true, minLength=5)\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"content\",\n     *                  description=\"The content of review.\",\n     *                  @OA\\Schema(type=\"string\", required=true, minLength=40)\n     *              ),\n     *              @OA\\Property(\n     *                  property=\"points\",\n     *                  description=\"The review rating for the product.\",\n     *                  @OA\\Schema(type=\"integer\", required=true, minimum=1, maximum=5)\n     *              ),\n     *          )\n     *      ),\n     *      @OA\\Response(\n     *          response=\"200\",\n     *          description=\"Success response indicating the review was saved successfuly.\"\n     *     )\n     * )\n     * @LoginRequired()\n     * @Route(\"/store-api/product/{productId}/review\", name=\"store-api.product-review.save\", methods={\"POST\"})\n     */\n    public function save(string $productId, RequestDataBag $data, SalesChannelContext $context): NoContentResponse\n    {\n        $this->checkReviewsActive($context);\n\n        /** @var CustomerEntity $customer */\n        $customer = $context->getCustomer();\n\n        $languageId = $context->getContext()->getLanguageId();\n        $salesChannelId = $context->getSalesChannel()->getId();\n\n        $customerId = $customer->getId();\n\n        if (!$data->has('name')) {\n            $data->set('name', $customer->getFirstName());\n        }\n\n        if (!$data->has('email')) {\n            $data->set('email', $customer->getEmail());\n        }\n\n        $data->set('customerId', $customerId);\n        $data->set('productId', $productId);\n        $this->validate($data, $context->getContext());\n\n        $review = [\n            'productId' => $productId,\n            'customerId' => $customerId,\n            'salesChannelId' => $salesChannelId,\n            'languageId' => $languageId,\n            'externalUser' => $data->get('name'),\n            'externalEmail' => $data->get('email'),\n            'title' => $data->get('title'),\n            'content' => $data->get('content'),\n            'points' => $data->get('points'),\n            'status' => false,\n        ];\n\n        if ($data->get('id')) {\n            $review['id'] = $data->get('id');\n        }\n\n        $this->repository->upsert([$review], $context->getContext());\n\n        return new NoContentResponse();\n    }\n\n    private function validate(DataBag $data, Context $context): void\n    {\n        $definition = new DataValidationDefinition('product.create_rating');\n\n        $definition->add('name', new NotBlank());\n        $definition->add('title', new NotBlank(), new Length(['min' => 5]));\n        $definition->add('content', new NotBlank(), new Length(['min' => 40]));\n\n        $definition->add('points', new GreaterThanOrEqual(1), new LessThanOrEqual(5));\n\n        if ($data->get('id')) {\n            $criteria = new Criteria();\n            $criteria->addFilter(new EqualsFilter('customerId', $data->get('customerId')));\n            $criteria->addFilter(new EqualsFilter('id', $data->get('id')));\n\n            $definition->add('id', new EntityExists([\n                'entity' => 'product_review',\n                'context' => $context,\n                'criteria' => $criteria,\n            ]));\n        } else {\n            $criteria = new Criteria();\n            $criteria->addFilter(new EqualsFilter('customerId', $data->get('customerId')));\n            $criteria->addFilter(new EqualsFilter('productId', $data->get('productId')));\n\n            $definition->add('customerId', new EntityNotExists([\n                'entity' => 'product_review',\n                'context' => $context,\n                'criteria' => $criteria,\n            ]));\n        }\n\n        $this->validator->validate($data->all(), $definition);\n\n        $violations = $this->validator->getViolations($data->all(), $definition);\n\n        if (!$violations->count()) {\n            return;\n        }\n\n        throw new ConstraintViolationException($violations, $data->all());\n    }\n\n    /**\n     * @throws ReviewNotActiveExeption\n     */\n    private function checkReviewsActive(SalesChannelContext $context): void\n    {\n        $showReview = $this->config->get('core.listing.showReview', $context->getSalesChannel()->getId());\n\n        if (!$showReview) {\n            throw new ReviewNotActiveExeption();\n        }\n    }\n}\n", "<?php declare(strict_types=1);\n\nnamespace Shopware\\Core\\Content\\Test\\Product\\SalesChannel\\Review;\n\nuse Doctrine\\DBAL\\Connection;\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Core\\Checkout\\Test\\Payment\\Handler\\V630\\SyncTestPaymentHandler;\nuse Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition;\nuse Shopware\\Core\\Defaults;\nuse Shopware\\Core\\Framework\\Context;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\nuse Shopware\\Core\\Framework\\Test\\TestCaseBase\\SalesChannelApiTestBehaviour;\nuse Shopware\\Core\\Framework\\Test\\TestDataCollection;\nuse Shopware\\Core\\Framework\\Uuid\\Uuid;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * @group store-api\n */\nclass ProductReviewSaveRouteTest extends TestCase\n{\n    use IntegrationTestBehaviour;\n    use SalesChannelApiTestBehaviour;\n\n    /**\n     * @var \\Symfony\\Bundle\\FrameworkBundle\\KernelBrowser\n     */\n    private $browser;\n\n    /**\n     * @var TestDataCollection\n     */\n    private $ids;\n\n    protected function setUp(): void\n    {\n        $this->ids = new TestDataCollection(Context::createDefaultContext());\n\n        $this->createData();\n\n        $this->browser = $this->createCustomSalesChannelBrowser([\n            'id' => $this->ids->create('sales-channel'),\n        ]);\n\n        $this->setVisibilities();\n    }\n\n    public function testRequiresLogin(): void\n    {\n        $this->browser->request('POST', $this->getUrl());\n\n        $response = $this->browser->getResponse();\n\n        static::assertEquals(403, $response->getStatusCode());\n\n        $response = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals($response['errors'][0]['code'], 'CHECKOUT__CUSTOMER_NOT_LOGGED_IN');\n    }\n\n    public function testCreate(): void\n    {\n        $this->login();\n\n        $this->assertReviewCount(0);\n\n        $this->browser->request('POST', $this->getUrl(), [\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n\n        $response = $this->browser->getResponse();\n        $content = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals(204, $response->getStatusCode(), print_r($content, true));\n\n        $this->assertReviewCount(1);\n    }\n\n    public function testUpdate(): void\n    {\n        $this->login();\n\n        $this->assertReviewCount(0);\n\n        $id = Uuid::randomHex();\n\n        $this->browser->request('POST', $this->getUrl(), [\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n\n        $response = $this->browser->getResponse();\n        $content = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals(204, $response->getStatusCode(), print_r($content, true));\n\n        $this->assertReviewCount(1);\n\n        $this->browser->request('POST', $this->getUrl(), [\n            'id' => $id,\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n        $this->assertReviewCount(1);\n    }\n\n    public function testValidation(): void\n    {\n        $this->login();\n\n        $this->browser->request('POST', $this->getUrl());\n\n        $response = $this->browser->getResponse();\n\n        static::assertEquals(400, $response->getStatusCode());\n\n        $response = json_decode($this->browser->getResponse()->getContent(), true);\n\n        static::assertEquals($response['errors'][0]['source']['pointer'], '/title');\n        static::assertEquals($response['errors'][1]['source']['pointer'], '/content');\n    }\n\n    public function testCustomerValidation(): void\n    {\n        $this->login();\n\n        $this->assertReviewCount(0);\n\n        $id = Uuid::randomHex();\n\n        // Create review\n        $this->browser->request('POST', $this->getUrl(), [\n            'id' => $id,\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n\n        // Re-login as another user\n        $this->login();\n\n        // Try to use the id from previous review which is not attached to this customer\n        $this->browser->request('POST', $this->getUrl(), [\n            'id' => $id,\n            'title' => 'Lorem ipsum dolor sit amet',\n            'content' => 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna',\n        ]);\n\n        $response = $this->browser->getResponse();\n\n        static::assertSame(Response::HTTP_BAD_REQUEST, $response->getStatusCode());\n        $content = json_decode($response->getContent(), true);\n\n        static::assertSame('VIOLATION::ENTITY_DOES_NOT_EXISTS', $content['errors'][0]['code']);\n    }\n\n    private function assertReviewCount(int $expected): void\n    {\n        $count = $this->getContainer()\n            ->get(Connection::class)\n            ->fetchColumn('SELECT COUNT(*) FROM product_review WHERE product_id = :id', ['id' => Uuid::fromHexToBytes($this->ids->get('product'))]);\n\n        static::assertEquals($expected, $count);\n    }\n\n    private function login(): void\n    {\n        $email = Uuid::randomHex() . '@example.com';\n        $this->createCustomer('shopware', $email);\n\n        $this->browser\n            ->request(\n                'POST',\n                '/store-api/account/login',\n                [\n                    'email' => $email,\n                    'password' => 'shopware',\n                ]\n            );\n\n        $response = json_decode($this->browser->getResponse()->getContent(), true);\n\n        $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);\n    }\n\n    private function createCustomer(string $password, ?string $email = null): string\n    {\n        $customerId = Uuid::randomHex();\n        $addressId = Uuid::randomHex();\n\n        $this->getContainer()->get('customer.repository')->create([\n            [\n                'id' => $customerId,\n                'salesChannelId' => Defaults::SALES_CHANNEL,\n                'defaultShippingAddress' => [\n                    'id' => $addressId,\n                    'firstName' => 'Max',\n                    'lastName' => 'Mustermann',\n                    'street' => 'Musterstra\u00dfe 1',\n                    'city' => 'Scho\u00f6ppingen',\n                    'zipcode' => '12345',\n                    'salutationId' => $this->getValidSalutationId(),\n                    'countryId' => $this->getValidCountryId(),\n                ],\n                'defaultBillingAddressId' => $addressId,\n                'defaultPaymentMethod' => [\n                    'name' => 'Invoice',\n                    'active' => true,\n                    'description' => 'Default payment method',\n                    'handlerIdentifier' => SyncTestPaymentHandler::class,\n                    'availabilityRule' => [\n                        'id' => Uuid::randomHex(),\n                        'name' => 'true',\n                        'priority' => 0,\n                        'conditions' => [\n                            [\n                                'type' => 'cartCartAmount',\n                                'value' => [\n                                    'operator' => '>=',\n                                    'amount' => 0,\n                                ],\n                            ],\n                        ],\n                    ],\n                    'salesChannels' => [\n                        [\n                            'id' => Defaults::SALES_CHANNEL,\n                        ],\n                    ],\n                ],\n                'groupId' => Defaults::FALLBACK_CUSTOMER_GROUP,\n                'email' => $email,\n                'password' => $password,\n                'firstName' => 'Fooo',\n                'lastName' => 'Barr',\n                'salutationId' => $this->getValidSalutationId(),\n                'customerNumber' => '12345',\n            ],\n        ], $this->ids->context);\n\n        return $customerId;\n    }\n\n    private function createData(): void\n    {\n        $product = [\n            'id' => $this->ids->create('product'),\n            'manufacturer' => ['id' => $this->ids->create('manufacturer-'), 'name' => 'test-'],\n            'productNumber' => $this->ids->get('product'),\n            'name' => 'test',\n            'stock' => 10,\n            'price' => [\n                ['currencyId' => Defaults::CURRENCY, 'gross' => 15, 'net' => 10, 'linked' => false],\n            ],\n            'tax' => ['name' => 'test', 'taxRate' => 15],\n            'active' => true,\n        ];\n\n        $this->getContainer()->get('product.repository')\n            ->create([$product], Context::createDefaultContext());\n    }\n\n    private function setVisibilities(): void\n    {\n        $update = [\n            [\n                'id' => $this->ids->get('product'),\n                'visibilities' => [\n                    ['salesChannelId' => $this->ids->get('sales-channel'), 'visibility' => ProductVisibilityDefinition::VISIBILITY_ALL],\n                ],\n            ],\n        ];\n        $this->getContainer()->get('product.repository')\n            ->update($update, $this->ids->context);\n    }\n\n    private function getUrl()\n    {\n        return '/store-api/product/' . $this->ids->get('product') . '/review';\n    }\n}\n"], "filenames": ["src/Core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php", "src/Core/Content/Test/Product/SalesChannel/Review/ProductReviewSaveRouteTest.php"], "buggy_code_start_loc": [187, 14], "buggy_code_end_loc": [187, 120], "fixing_code_start_loc": [188, 15], "fixing_code_end_loc": [189, 155], "type": "NVD-CWE-noinfo", "message": "Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a vulnerability that allows manipulation of product reviews via API. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.", "other": {"cve": {"id": "CVE-2021-37707", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-16T19:15:15.783", "lastModified": "2021-08-24T12:55:53.650", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a vulnerability that allows manipulation of product reviews via API. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin."}, {"lang": "es", "value": "Shopware es una plataforma de comercio electr\u00f3nico de c\u00f3digo abierto. Las versiones anteriores a la 6.4.3.1 contienen una vulnerabilidad que permite manipular las rese\u00f1as de los productos a trav\u00e9s de la API. La versi\u00f3n 6.4.3.1 contiene un parche. Como soluci\u00f3n para las versiones anteriores de 6.1, 6.2 y 6.3, tambi\u00e9n est\u00e1n disponibles las medidas de seguridad correspondientes a trav\u00e9s de un plugin."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.1.0", "versionEndExcluding": "6.4.3.1", "matchCriteriaId": "1F2C185B-D9D1-420C-8F6A-F22DEEFECD9E"}]}]}], "references": [{"url": "https://github.com/shopware/platform/commit/912b96de3b839c6c5525c98cbb58f537c2d838be", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/platform/security/advisories/GHSA-9f8f-574q-8jmf", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/platform/commit/912b96de3b839c6c5525c98cbb58f537c2d838be"}}