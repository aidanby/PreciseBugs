{"buggy_code": ["<?php\n# MantisConnect - A webservice interface to Mantis Bug Tracker\n# Copyright (C) 2004-2013  Victor Boctor - vboctor@users.sourceforge.net\n# This program is distributed under dual licensing.  These include\n# GPL and a commercial licenses.  Victor Boctor reserves the right to\n# change the license of future releases.\n# See docs/ folder for more details\n\n# Check if the current user can download attachments for the specified bug.\nfunction mci_file_can_download_bug_attachments( $p_bug_id, $p_user_id ) {\n\t$t_can_download = access_has_bug_level( config_get( 'download_attachments_threshold' ), $p_bug_id );\n\tif( $t_can_download ) {\n\t\treturn true;\n\t}\n\n\t$t_reported_by_me = bug_is_user_reporter( $p_bug_id, $p_user_id );\n\treturn( $t_reported_by_me && config_get( 'allow_download_own_attachments' ) );\n}\n\n# Read a local file and return its content.\nfunction mci_file_read_local( $p_diskfile ) {\n\t$t_handle = fopen( $p_diskfile, \"r\" );\n\t$t_content = fread( $t_handle, filesize( $p_diskfile ) );\n\tfclose( $t_handle );\n\treturn $t_content;\n}\n\n# Write a local file.\nfunction mci_file_write_local( $p_diskfile, $p_content ) {\n\t$t_handle = fopen( $p_diskfile, \"w\" );\n\tfwrite( $t_handle, $p_content );\n\tfclose( $t_handle );\n}\n\nfunction mci_file_add( $p_id, $p_name, $p_content, $p_file_type, $p_table, $p_title = '', $p_desc = '', $p_user_id = null ) {\n\tif( !file_type_check( $p_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client',  'File type not allowed.' );\n\t}\n\tif( !file_is_name_unique( $p_name, $p_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Duplicate filename.' );\n\t}\n\n\t$t_file_size = strlen( $p_content );\n\t$t_max_file_size = (int) min( ini_get_number( 'upload_max_filesize' ), ini_get_number( 'post_max_size' ), config_get( 'max_file_size' ) );\n\tif( $t_file_size > $t_max_file_size ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client',  'File is too big.' );\n\t}\n\n\tif( 'bug' == $p_table ) {\n\t\t$t_project_id = bug_get_field( $p_id, 'project_id' );\n\t\t$t_id = (int)$p_id;\n\t\t$t_issue_id = bug_format_id( $p_id );\n\t} else {\n\t\t$t_project_id = $p_id;\n\t\t$t_id = $t_project_id;\n\t\t$t_issue_id = 0;\n\t}\n\n\tif( $p_user_id === null ) {\n\t\t$p_user_id = auth_get_current_user_id();\n\t}\n\n\tif( $t_project_id == ALL_PROJECTS ) {\n\t\t$t_file_path = config_get( 'absolute_path_default_upload_folder' );\n\t} else {\n\t\t$t_file_path = project_get_field( $t_project_id, 'file_path' );\n\t\tif( is_blank( $t_file_path ) ) {\n\t\t\t$t_file_path = config_get( 'absolute_path_default_upload_folder' );\n\t\t}\n\t}\n\n\t$t_file_hash = ( 'bug' == $p_table ) ? $t_issue_id : config_get( 'document_files_prefix' ) . '-' . $t_project_id;\n\t$t_unique_name = file_generate_unique_name( $t_file_hash . '-' . $p_name, $t_file_path );\n\t$t_disk_file_name = $t_file_path . $t_unique_name;\n\n\t$t_method = config_get( 'file_upload_method' );\n\n\tswitch( $t_method ) {\n\t\tcase FTP:\n\t\tcase DISK:\n\t\t\tif( !file_exists( $t_file_path ) || !is_dir( $t_file_path ) || !is_writable( $t_file_path ) || !is_readable( $t_file_path ) ) {\n\t\t\t\treturn SoapObjectsFactory::newSoapFault( 'Server', \"Upload folder '{$t_file_path}' doesn't exist.\");\n\t\t\t}\n\n\t\t\tfile_ensure_valid_upload_path( $t_file_path );\n\n\t\t\tif( !file_exists( $t_disk_file_name ) ) {\n\t\t\t\tmci_file_write_local( $t_disk_file_name, $p_content );\n\n\t\t\t\tif( FTP == $t_method ) {\n\t\t\t\t\t$conn_id = file_ftp_connect();\n\t\t\t\t\tfile_ftp_put( $conn_id, $t_disk_file_name, $t_disk_file_name );\n\t\t\t\t\tfile_ftp_disconnect( $conn_id );\n\t\t\t\t\tfile_delete_local( $t_disk_file_name );\n\t\t\t\t} else {\n\t\t\t\t\tchmod( $t_disk_file_name, config_get( 'attachments_file_permissions' ) );\n\t\t\t\t}\n\n\t\t\t\t$c_content = \"''\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DATABASE:\n\t\t\t$c_content = db_prepare_binary_string( $p_content );\n\t\t\tbreak;\n\t}\n\n\t$t_file_table = db_get_table( 'mantis_' . $p_table . '_file_table' );\n\t$t_id_col = $p_table . \"_id\";\n\n\t$query = \"INSERT INTO $t_file_table\n\t\t\t\t( $t_id_col, title, description, diskfile, filename, folder, filesize, file_type, date_added, content, user_id )\n\t\tVALUES\n\t\t\t\t( \" . db_param() . \", \" . db_param() . \", \" . db_param() . \", \"\n\t\t\t\t    . db_param() . \", \" . db_param() . \", \" . db_param() . \", \"\n\t\t\t\t    . db_param() . \", \" . db_param() . \", \" . db_param() . \", \"\n\t\t\t\t    . db_param() . \", \" . db_param() . \" )\";\n\tdb_query_bound( $query, Array(\n\t\t$t_id,\n\t\t$p_title,\n\t\t$p_desc,\n\t\t$t_unique_name,\n\t\t$p_name,\n\t\t$t_file_path,\n\t\t$t_file_size,\n\t\t$p_file_type,\n\t\tdb_now(),\n\t\t$c_content,\n\t\t(int)$p_user_id,\n\t) );\n\n\t# get attachment id\n\t$t_attachment_id = db_insert_id( $t_file_table );\n\n\tif( 'bug' == $p_table ) {\n\t\t# bump the last_updated date\n\t\t$result = bug_update_date( $t_issue_id );\n\n\t\t# add history entry\n\t\thistory_log_event_special( $t_issue_id, FILE_ADDED, $p_name );\n\t}\n\n\treturn $t_attachment_id;\n}\n\n/**\n * Returns the attachment contents\n *\n * @param int $p_file_id\n * @param string $p_type The file type, bug or doc\n * @param int $p_user_id\n * @return string|soap_fault the string contents, or a soap_fault\n */\nfunction mci_file_get( $p_file_id, $p_type, $p_user_id ) {\n\n\t# we handle the case where the file is attached to a bug\n\t# or attached to a project as a project doc.\n\t$query = '';\n\tswitch( $p_type ) {\n\t\tcase 'bug':\n\t\t\t$t_bug_file_table = db_get_table( 'mantis_bug_file_table' );\n\t\t\t$query = \"SELECT *\n\t\t\t\tFROM $t_bug_file_table\n\t\t\t\tWHERE id='$p_file_id'\";\n\t\t\tbreak;\n\t\tcase 'doc':\n\t\t\t$t_project_file_table = db_get_table( 'mantis_project_file_table' );\n\t\t\t$query = \"SELECT *\n\t\t\t\tFROM $t_project_file_table\n\t\t\t\tWHERE id='$p_file_id'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn SoapObjectsFactory::newSoapFault( 'Server', 'Invalid file type '.$p_type. ' .' );\n\t}\n\n\t$result = db_query( $query );\n\n\tif ( $result->EOF ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Unable to find an attachment with type ' . $p_type. ' and id ' . $p_file_id . ' .' );\n\t}\n\n\t$row = db_fetch_array( $result );\n\n\tif ( $p_type == 'doc' ) {\n\t\t$t_project_id = $row['project_id'];\n\t} else if ( $p_type == 'bug' ) {\n\t\t$t_bug_id = $row['bug_id'];\n\t\t$t_project_id = bug_get_field( $t_bug_id, 'project_id' );\n\t}\n\n\t$t_diskfile = file_normalize_attachment_path( $row['diskfile'], $t_project_id );\n\t$t_content = $row['content'];\n\n\t# Check access rights\n\tswitch( $p_type ) {\n\t\tcase 'bug':\n\t\t\tif( !mci_file_can_download_bug_attachments( $t_bug_id, $p_user_id ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $p_user_id );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'doc':\n\t\t\t# Check if project documentation feature is enabled.\n\t\t\tif( OFF == config_get( 'enable_project_documentation' ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $p_user_id );\n\t\t\t}\n\t\t\tif( !access_has_project_level( config_get( 'view_proj_doc_threshold' ), $t_project_id, $p_user_id ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $p_user_id );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\t# dump file content to the connection.\n\tswitch( config_get( 'file_upload_method' ) ) {\n\t\tcase DISK:\n\t\t\tif( file_exists( $t_diskfile ) ) {\n\t\t\t\treturn mci_file_read_local( $t_diskfile ) ;\n\t\t\t} else {\n\t\t\t\treturn SoapObjectsFactory::newSoapFault(  'Client', 'Unable to find an attachment with type ' . $p_type. ' and id ' . $p_file_id . ' .' );\n\t\t\t}\n\t\tcase FTP:\n\t\t\tif( file_exists( $t_diskfile ) ) {\n\t\t\t\treturn mci_file_read_local( $t_diskfile );\n\t\t\t} else {\n\t\t\t\t$ftp = file_ftp_connect();\n\t\t\t\tfile_ftp_get( $ftp, $t_diskfile, $t_diskfile );\n\t\t\t\tfile_ftp_disconnect( $ftp );\n\t\t\t\treturn mci_file_read_local( $t_diskfile );\n\t\t\t}\n\t\tdefault:\n\t\t\treturn $t_content;\n\t}\n}\n"], "fixing_code": ["<?php\n# MantisConnect - A webservice interface to Mantis Bug Tracker\n# Copyright (C) 2004-2013  Victor Boctor - vboctor@users.sourceforge.net\n# This program is distributed under dual licensing.  These include\n# GPL and a commercial licenses.  Victor Boctor reserves the right to\n# change the license of future releases.\n# See docs/ folder for more details\n\n# Check if the current user can download attachments for the specified bug.\nfunction mci_file_can_download_bug_attachments( $p_bug_id, $p_user_id ) {\n\t$t_can_download = access_has_bug_level( config_get( 'download_attachments_threshold' ), $p_bug_id );\n\tif( $t_can_download ) {\n\t\treturn true;\n\t}\n\n\t$t_reported_by_me = bug_is_user_reporter( $p_bug_id, $p_user_id );\n\treturn( $t_reported_by_me && config_get( 'allow_download_own_attachments' ) );\n}\n\n# Read a local file and return its content.\nfunction mci_file_read_local( $p_diskfile ) {\n\t$t_handle = fopen( $p_diskfile, \"r\" );\n\t$t_content = fread( $t_handle, filesize( $p_diskfile ) );\n\tfclose( $t_handle );\n\treturn $t_content;\n}\n\n# Write a local file.\nfunction mci_file_write_local( $p_diskfile, $p_content ) {\n\t$t_handle = fopen( $p_diskfile, \"w\" );\n\tfwrite( $t_handle, $p_content );\n\tfclose( $t_handle );\n}\n\nfunction mci_file_add( $p_id, $p_name, $p_content, $p_file_type, $p_table, $p_title = '', $p_desc = '', $p_user_id = null ) {\n\tif( !file_type_check( $p_name ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client',  'File type not allowed.' );\n\t}\n\tif( !file_is_name_unique( $p_name, $p_id ) ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Duplicate filename.' );\n\t}\n\n\t$t_file_size = strlen( $p_content );\n\t$t_max_file_size = (int) min( ini_get_number( 'upload_max_filesize' ), ini_get_number( 'post_max_size' ), config_get( 'max_file_size' ) );\n\tif( $t_file_size > $t_max_file_size ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client',  'File is too big.' );\n\t}\n\n\tif( 'bug' == $p_table ) {\n\t\t$t_project_id = bug_get_field( $p_id, 'project_id' );\n\t\t$t_id = (int)$p_id;\n\t\t$t_issue_id = bug_format_id( $p_id );\n\t} else {\n\t\t$t_project_id = $p_id;\n\t\t$t_id = $t_project_id;\n\t\t$t_issue_id = 0;\n\t}\n\n\tif( $p_user_id === null ) {\n\t\t$p_user_id = auth_get_current_user_id();\n\t}\n\n\tif( $t_project_id == ALL_PROJECTS ) {\n\t\t$t_file_path = config_get( 'absolute_path_default_upload_folder' );\n\t} else {\n\t\t$t_file_path = project_get_field( $t_project_id, 'file_path' );\n\t\tif( is_blank( $t_file_path ) ) {\n\t\t\t$t_file_path = config_get( 'absolute_path_default_upload_folder' );\n\t\t}\n\t}\n\n\t$t_file_hash = ( 'bug' == $p_table ) ? $t_issue_id : config_get( 'document_files_prefix' ) . '-' . $t_project_id;\n\t$t_unique_name = file_generate_unique_name( $t_file_hash . '-' . $p_name, $t_file_path );\n\t$t_disk_file_name = $t_file_path . $t_unique_name;\n\n\t$t_method = config_get( 'file_upload_method' );\n\n\tswitch( $t_method ) {\n\t\tcase FTP:\n\t\tcase DISK:\n\t\t\tif( !file_exists( $t_file_path ) || !is_dir( $t_file_path ) || !is_writable( $t_file_path ) || !is_readable( $t_file_path ) ) {\n\t\t\t\treturn SoapObjectsFactory::newSoapFault( 'Server', \"Upload folder '{$t_file_path}' doesn't exist.\");\n\t\t\t}\n\n\t\t\tfile_ensure_valid_upload_path( $t_file_path );\n\n\t\t\tif( !file_exists( $t_disk_file_name ) ) {\n\t\t\t\tmci_file_write_local( $t_disk_file_name, $p_content );\n\n\t\t\t\tif( FTP == $t_method ) {\n\t\t\t\t\t$conn_id = file_ftp_connect();\n\t\t\t\t\tfile_ftp_put( $conn_id, $t_disk_file_name, $t_disk_file_name );\n\t\t\t\t\tfile_ftp_disconnect( $conn_id );\n\t\t\t\t\tfile_delete_local( $t_disk_file_name );\n\t\t\t\t} else {\n\t\t\t\t\tchmod( $t_disk_file_name, config_get( 'attachments_file_permissions' ) );\n\t\t\t\t}\n\n\t\t\t\t$c_content = \"''\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase DATABASE:\n\t\t\t$c_content = db_prepare_binary_string( $p_content );\n\t\t\tbreak;\n\t}\n\n\t$t_file_table = db_get_table( 'mantis_' . $p_table . '_file_table' );\n\t$t_id_col = $p_table . \"_id\";\n\n\t$query = \"INSERT INTO $t_file_table\n\t\t\t\t( $t_id_col, title, description, diskfile, filename, folder, filesize, file_type, date_added, content, user_id )\n\t\tVALUES\n\t\t\t\t( \" . db_param() . \", \" . db_param() . \", \" . db_param() . \", \"\n\t\t\t\t    . db_param() . \", \" . db_param() . \", \" . db_param() . \", \"\n\t\t\t\t    . db_param() . \", \" . db_param() . \", \" . db_param() . \", \"\n\t\t\t\t    . db_param() . \", \" . db_param() . \" )\";\n\tdb_query_bound( $query, Array(\n\t\t$t_id,\n\t\t$p_title,\n\t\t$p_desc,\n\t\t$t_unique_name,\n\t\t$p_name,\n\t\t$t_file_path,\n\t\t$t_file_size,\n\t\t$p_file_type,\n\t\tdb_now(),\n\t\t$c_content,\n\t\t(int)$p_user_id,\n\t) );\n\n\t# get attachment id\n\t$t_attachment_id = db_insert_id( $t_file_table );\n\n\tif( 'bug' == $p_table ) {\n\t\t# bump the last_updated date\n\t\t$result = bug_update_date( $t_issue_id );\n\n\t\t# add history entry\n\t\thistory_log_event_special( $t_issue_id, FILE_ADDED, $p_name );\n\t}\n\n\treturn $t_attachment_id;\n}\n\n/**\n * Returns the attachment contents\n *\n * @param int $p_file_id\n * @param string $p_type The file type, bug or doc\n * @param int $p_user_id\n * @return string|soap_fault the string contents, or a soap_fault\n */\nfunction mci_file_get( $p_file_id, $p_type, $p_user_id ) {\n\n\t# we handle the case where the file is attached to a bug\n\t# or attached to a project as a project doc.\n\t$t_query = '';\n\tswitch( $p_type ) {\n\t\tcase 'bug':\n\t\t\t$t_bug_file_table = db_get_table( 'mantis_bug_file_table' );\n\t\t\t$t_query = \"SELECT * FROM $t_bug_file_table WHERE id=\" . db_param();\n\t\t\tbreak;\n\t\tcase 'doc':\n\t\t\t$t_project_file_table = db_get_table( 'mantis_project_file_table' );\n\t\t\t$t_query = \"SELECT * FROM $t_project_file_table WHERE id=\" . db_param();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn SoapObjectsFactory::newSoapFault( 'Server', 'Invalid file type '.$p_type. ' .' );\n\t}\n\n\t$result = db_query_bound( $t_query, array( $p_file_id ) );\n\n\tif ( $result->EOF ) {\n\t\treturn SoapObjectsFactory::newSoapFault( 'Client', 'Unable to find an attachment with type ' . $p_type. ' and id ' . $p_file_id . ' .' );\n\t}\n\n\t$row = db_fetch_array( $result );\n\n\tif ( $p_type == 'doc' ) {\n\t\t$t_project_id = $row['project_id'];\n\t} else if ( $p_type == 'bug' ) {\n\t\t$t_bug_id = $row['bug_id'];\n\t\t$t_project_id = bug_get_field( $t_bug_id, 'project_id' );\n\t}\n\n\t$t_diskfile = file_normalize_attachment_path( $row['diskfile'], $t_project_id );\n\t$t_content = $row['content'];\n\n\t# Check access rights\n\tswitch( $p_type ) {\n\t\tcase 'bug':\n\t\t\tif( !mci_file_can_download_bug_attachments( $t_bug_id, $p_user_id ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $p_user_id );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'doc':\n\t\t\t# Check if project documentation feature is enabled.\n\t\t\tif( OFF == config_get( 'enable_project_documentation' ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $p_user_id );\n\t\t\t}\n\t\t\tif( !access_has_project_level( config_get( 'view_proj_doc_threshold' ), $t_project_id, $p_user_id ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $p_user_id );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\t# dump file content to the connection.\n\tswitch( config_get( 'file_upload_method' ) ) {\n\t\tcase DISK:\n\t\t\tif( file_exists( $t_diskfile ) ) {\n\t\t\t\treturn mci_file_read_local( $t_diskfile ) ;\n\t\t\t} else {\n\t\t\t\treturn SoapObjectsFactory::newSoapFault(  'Client', 'Unable to find an attachment with type ' . $p_type. ' and id ' . $p_file_id . ' .' );\n\t\t\t}\n\t\tcase FTP:\n\t\t\tif( file_exists( $t_diskfile ) ) {\n\t\t\t\treturn mci_file_read_local( $t_diskfile );\n\t\t\t} else {\n\t\t\t\t$ftp = file_ftp_connect();\n\t\t\t\tfile_ftp_get( $ftp, $t_diskfile, $t_diskfile );\n\t\t\t\tfile_ftp_disconnect( $ftp );\n\t\t\t\treturn mci_file_read_local( $t_diskfile );\n\t\t\t}\n\t\tdefault:\n\t\t\treturn $t_content;\n\t}\n}\n"], "filenames": ["api/soap/mc_file_api.php"], "buggy_code_start_loc": [157], "buggy_code_end_loc": [176], "fixing_code_start_loc": [157], "fixing_code_end_loc": [172], "type": "CWE-89", "message": "SQL injection vulnerability in the mci_file_get function in api/soap/mc_file_api.php in MantisBT before 1.2.16 allows remote attackers to execute arbitrary SQL commands via a crafted envelope tag in a mc_issue_attachment_get SOAP request.", "other": {"cve": {"id": "CVE-2014-1608", "sourceIdentifier": "cve@mitre.org", "published": "2014-03-18T17:03:00.467", "lastModified": "2021-01-12T18:05:59.507", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in the mci_file_get function in api/soap/mc_file_api.php in MantisBT before 1.2.16 allows remote attackers to execute arbitrary SQL commands via a crafted envelope tag in a mc_issue_attachment_get SOAP request."}, {"lang": "es", "value": "Vulnerabilidad de inyecci\u00f3n SQL en la funci\u00f3n mci_file_get en api/soap/mc_file_api.php en MantisBT anterior a 1.2.16 permite a atacantes remotos ejecutar comandos SQL arbitrarios a trav\u00e9s de una etiqueta envolvente manipulada en una solicitud mc_issue_attachment_get SOAP."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.15", "matchCriteriaId": "ED59DEDF-08A2-4BEB-9DE3-0205CA2D69B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFF77ABF-0A03-437A-B241-1EF2BBB83D24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "9DA2615A-CD65-4765-AB0A-D72C2BEB00F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "7D09CC46-DFA2-408D-8720-05C23E73C859"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "3461212B-A96B-4D38-A722-84E7418C2A7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "7B6DEE14-744B-4DE4-BDCF-E4E4D37F70A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "D4462BEE-39B6-47BD-B08F-5BE1FD918221"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "5F096CD6-534E-4ABF-B2DF-D4B55B8C5F6A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "A66AB537-6FBA-4A51-B10C-BF61F54BC01B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "A50835BF-D28B-47FF-81F0-C34D95D6F2E9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "BA0EB9A6-1DFD-4C17-A002-0899DA252A56"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "BBA33285-3EE7-43FD-8347-E7D9A18DC134"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "8827C2B4-EBEC-4D64-9AC8-07A048467F40"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "1F32DFF4-6448-46FD-9358-4FB1C310EC2E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.8:*:*:*:*:*:*:*", "matchCriteriaId": "20328CE4-0488-43B8-AA64-A6CB2230C74C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.9:*:*:*:*:*:*:*", "matchCriteriaId": "0BDEB950-D3F4-4B96-B456-B8441DC403D9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.10:*:*:*:*:*:*:*", "matchCriteriaId": "FE69E6A6-8CD2-4C8A-A30A-CB0A04AC539F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.11:*:*:*:*:*:*:*", "matchCriteriaId": "D464F7CF-A156-4EE5-BB59-6C759448EB23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.13:*:*:*:*:*:*:*", "matchCriteriaId": "5F1BFB72-CDD6-466E-ACAD-EA442D11C22F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.14:*:*:*:*:*:*:*", "matchCriteriaId": "DD11DD1B-EC1C-48F4-B4C6-1CF6A0F80970"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}]}]}], "references": [{"url": "http://secunia.com/advisories/61432", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2014/dsa-3030", "source": "cve@mitre.org"}, {"url": "http://www.mantisbt.org/bugs/view.php?id=16879", "source": "cve@mitre.org"}, {"url": "http://www.ocert.org/advisories/ocert-2014-001.html", "source": "cve@mitre.org", "tags": ["US Government Resource"]}, {"url": "http://www.securityfocus.com/bid/65445", "source": "cve@mitre.org"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1063111", "source": "cve@mitre.org"}, {"url": "https://github.com/mantisbt/mantisbt/commit/00b4c17088fa56594d85fe46b6c6057bb3421102", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/00b4c17088fa56594d85fe46b6c6057bb3421102"}}