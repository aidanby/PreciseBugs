{"buggy_code": ["<?php\n\nnamespace Widget;\n\nuse Typecho\\Common;\nuse Typecho\\Config;\nuse Typecho\\Cookie;\nuse Typecho\\Db;\nuse Typecho\\Db\\Query;\nuse Typecho\\Feed;\nuse Typecho\\Router;\nuse Typecho\\Widget\\Exception as WidgetException;\nuse Typecho\\Widget\\Helper\\PageNavigator;\nuse Typecho\\Widget\\Helper\\PageNavigator\\Classic;\nuse Typecho\\Widget\\Helper\\PageNavigator\\Box;\nuse Widget\\Base\\Contents;\nuse Widget\\Base\\Metas;\nuse Widget\\Comments\\Ping;\nuse Widget\\Comments\\Recent;\nuse Widget\\Contents\\Attachment\\Related;\nuse Widget\\Contents\\Related\\Author;\nuse Widget\\Metas\\Category\\Rows;\n\nif (!defined('__TYPECHO_ROOT_DIR__')) {\n    exit;\n}\n\n/**\n * \u5185\u5bb9\u7684\u6587\u7ae0\u57fa\u7c7b\n * \u5b9a\u4e49\u7684css\u7c7b\n * p.more:\u9605\u8bfb\u5168\u6587\u94fe\u63a5\u6240\u5c5e\u6bb5\u843d\n *\n * @package Widget\n */\nclass Archive extends Contents\n{\n    /**\n     * \u8c03\u7528\u7684\u98ce\u683c\u6587\u4ef6\n     *\n     * @var string\n     */\n    private $themeFile;\n\n    /**\n     * \u98ce\u683c\u76ee\u5f55\n     *\n     * @var string\n     */\n    private $themeDir;\n\n    /**\n     * \u5206\u9875\u8ba1\u7b97\u5bf9\u8c61\n     *\n     * @var Query\n     */\n    private $countSql;\n\n    /**\n     * \u6240\u6709\u6587\u7ae0\u4e2a\u6570\n     *\n     * @var integer\n     */\n    private $total = false;\n\n    /**\n     * \u6807\u8bb0\u662f\u5426\u4e3a\u4ece\u5916\u90e8\u8c03\u7528\n     *\n     * @var boolean\n     */\n    private $invokeFromOutside = false;\n\n    /**\n     * \u662f\u5426\u7531\u805a\u5408\u8c03\u7528\n     *\n     * @var boolean\n     */\n    private $invokeByFeed = false;\n\n    /**\n     * \u5f53\u524d\u9875\n     *\n     * @var integer\n     */\n    private $currentPage;\n\n    /**\n     * \u751f\u6210\u5206\u9875\u7684\u5185\u5bb9\n     *\n     * @var array\n     */\n    private $pageRow = [];\n\n    /**\n     * \u805a\u5408\u5668\u5bf9\u8c61\n     *\n     * @var Feed\n     */\n    private $feed;\n\n    /**\n     * RSS 2.0\u805a\u5408\u5730\u5740\n     *\n     * @var string\n     */\n    private $feedUrl;\n\n    /**\n     * RSS 1.0\u805a\u5408\u5730\u5740\n     *\n     * @var string\n     */\n    private $feedRssUrl;\n\n    /**\n     * ATOM \u805a\u5408\u5730\u5740\n     *\n     * @var string\n     */\n    private $feedAtomUrl;\n\n    /**\n     * \u672c\u9875\u5173\u952e\u5b57\n     *\n     * @var string\n     */\n    private $keywords;\n\n    /**\n     * \u672c\u9875\u63cf\u8ff0\n     *\n     * @var string\n     */\n    private $description;\n\n    /**\n     * \u805a\u5408\u7c7b\u578b\n     *\n     * @var string\n     */\n    private $feedType;\n\n    /**\n     * \u805a\u5408\u7c7b\u578b\n     *\n     * @var string\n     */\n    private $feedContentType;\n\n    /**\n     * \u5f53\u524dfeed\u5730\u5740\n     *\n     * @var string\n     */\n    private $currentFeedUrl;\n\n    /**\n     * \u5f52\u6863\u6807\u9898\n     *\n     * @var string\n     */\n    private $archiveTitle = null;\n\n    /**\n     * \u5f52\u6863\u5730\u5740\n     *\n     * @var string|null\n     */\n    private $archiveUrl = null;\n\n    /**\n     * \u5f52\u6863\u7c7b\u578b\n     *\n     * @var string\n     */\n    private $archiveType = 'index';\n\n    /**\n     * \u662f\u5426\u4e3a\u5355\u4e00\u5f52\u6863\n     *\n     * @var string\n     */\n    private $archiveSingle = false;\n\n    /**\n     * \u662f\u5426\u4e3a\u81ea\u5b9a\u4e49\u9996\u9875, \u4e3b\u8981\u4e3a\u4e86\u6807\u8bb0\u81ea\u5b9a\u4e49\u9996\u9875\u7684\u60c5\u51b5\n     *\n     * (default value: false)\n     *\n     * @var boolean\n     * @access private\n     */\n    private $makeSinglePageAsFrontPage = false;\n\n    /**\n     * \u5f52\u6863\u7f29\u7565\u540d\n     *\n     * @access private\n     * @var string\n     */\n    private $archiveSlug;\n\n    /**\n     * \u8bbe\u7f6e\u5206\u9875\u5bf9\u8c61\n     *\n     * @access private\n     * @var PageNavigator\n     */\n    private $pageNav;\n\n    /**\n     * @param Config $parameter\n     * @throws \\Exception\n     */\n    protected function initParameter(Config $parameter)\n    {\n        $parameter->setDefault([\n            'pageSize'       => $this->options->pageSize,\n            'type'           => null,\n            'checkPermalink' => true,\n            'preview'        => false\n        ]);\n\n        /** \u7528\u4e8e\u5224\u65ad\u662f\u8def\u7531\u8c03\u7528\u8fd8\u662f\u5916\u90e8\u8c03\u7528 */\n        if (null == $parameter->type) {\n            $parameter->type = Router::$current;\n        } else {\n            $this->invokeFromOutside = true;\n        }\n\n        /** \u7528\u4e8e\u5224\u65ad\u662f\u5426\u4e3afeed\u8c03\u7528 */\n        if ($parameter->isFeed) {\n            $this->invokeByFeed = true;\n        }\n\n        /** \u521d\u59cb\u5316\u76ae\u80a4\u8def\u5f84 */\n        $this->themeDir = rtrim($this->options->themeFile($this->options->theme), '/') . '/';\n\n        /** \u5904\u7406feed\u6a21\u5f0f **/\n        if ('feed' == $parameter->type) {\n            $this->currentFeedUrl = '';\n\n            /** \u5224\u65ad\u805a\u5408\u7c7b\u578b */\n            switch (true) {\n                case 0 === strpos($this->request->feed, '/rss/') || '/rss' == $this->request->feed:\n                    /** \u5982\u679c\u662fRSS1\u6807\u51c6 */\n                    $this->request->feed = substr($this->request->feed, 4);\n                    $this->feedType = Feed::RSS1;\n                    $this->currentFeedUrl = $this->options->feedRssUrl;\n                    $this->feedContentType = 'application/rdf+xml';\n                    break;\n                case 0 === strpos($this->request->feed, '/atom/') || '/atom' == $this->request->feed:\n                    /** \u5982\u679c\u662fATOM\u6807\u51c6 */\n                    $this->request->feed = substr($this->request->feed, 5);\n                    $this->feedType = Feed::ATOM1;\n                    $this->currentFeedUrl = $this->options->feedAtomUrl;\n                    $this->feedContentType = 'application/atom+xml';\n                    break;\n                default:\n                    $this->feedType = Feed::RSS2;\n                    $this->currentFeedUrl = $this->options->feedUrl;\n                    $this->feedContentType = 'application/rss+xml';\n                    break;\n            }\n\n            $feedQuery = $this->request->feed;\n            //$parameter->type = Router::$current;\n            //$this->request->setParams($params);\n\n            if ('/comments/' == $feedQuery || '/comments' == $feedQuery) {\n                /** \u4e13\u4e3afeed\u4f7f\u7528\u7684hack */\n                $parameter->type = 'comments';\n                $this->options->feedUrl = $this->options->commentsFeedUrl;\n                $this->options->feedRssUrl = $this->options->commentsFeedRssUrl;\n                $this->options->feedAtomUrl = $this->options->commentsFeedAtomUrl;\n            } else {\n                $matched = Router::match($this->request->feed, 'pageSize=10&isFeed=1');\n                if ($matched instanceof Archive) {\n                    $this->import($matched);\n                } else {\n                    throw new WidgetException(_t('\u805a\u5408\u9875\u4e0d\u5b58\u5728'), 404);\n                }\n            }\n\n            /** \u521d\u59cb\u5316\u805a\u5408\u5668 */\n            $this->setFeed(new Feed(Common::VERSION, $this->feedType, $this->options->charset, _t('zh-CN')));\n\n            /** \u9ed8\u8ba4\u8f93\u51fa10\u5219\u6587\u7ae0 **/\n            $parameter->pageSize = 10;\n        }\n    }\n\n    /**\n     * \u589e\u52a0\u6807\u9898\n     * @param string $archiveTitle \u6807\u9898\n     */\n    public function addArchiveTitle(string $archiveTitle)\n    {\n        $current = $this->getArchiveTitle();\n        $current[] = $archiveTitle;\n        $this->setArchiveTitle($current);\n    }\n\n    /**\n     * @return string\n     */\n    public function getArchiveTitle(): ?string\n    {\n        return $this->archiveTitle;\n    }\n\n    /**\n     * @param string $archiveTitle the $archiveTitle to set\n     */\n    public function setArchiveTitle(string $archiveTitle)\n    {\n        $this->archiveTitle = $archiveTitle;\n    }\n\n    /**\n     * \u83b7\u53d6\u5206\u9875\u5bf9\u8c61\n     * @return array\n     */\n    public function getPageRow(): array\n    {\n        return $this->pageRow;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5206\u9875\u5bf9\u8c61\n     * @param array $pageRow\n     */\n    public function setPageRow(array $pageRow)\n    {\n        $this->pageRow = $pageRow;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveSlug(): ?string\n    {\n        return $this->archiveSlug;\n    }\n\n    /**\n     * @param string $archiveSlug the $archiveSlug to set\n     */\n    public function setArchiveSlug(string $archiveSlug)\n    {\n        $this->archiveSlug = $archiveSlug;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveSingle(): ?string\n    {\n        return $this->archiveSingle;\n    }\n\n    /**\n     * @param string $archiveSingle the $archiveSingle to set\n     */\n    public function setArchiveSingle(string $archiveSingle)\n    {\n        $this->archiveSingle = $archiveSingle;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveType(): ?string\n    {\n        return $this->archiveType;\n    }\n\n    /**\n     * @param string $archiveType the $archiveType to set\n     */\n    public function setArchiveType(string $archiveType)\n    {\n        $this->archiveType = $archiveType;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveUrl(): ?string\n    {\n        return $this->archiveUrl;\n    }\n\n    /**\n     * @param string|null $archiveUrl\n     */\n    public function setArchiveUrl(?string $archiveUrl): void\n    {\n        $this->archiveUrl = $archiveUrl;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getFeedType(): ?string\n    {\n        return $this->feedType;\n    }\n\n    /**\n     * @param string $feedType the $feedType to set\n     */\n    public function setFeedType(string $feedType)\n    {\n        $this->feedType = $feedType;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    /**\n     * @param string $description the $description to set\n     */\n    public function setDescription(string $description)\n    {\n        $this->description = $description;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getKeywords(): ?string\n    {\n        return $this->keywords;\n    }\n\n    /**\n     * @param string $keywords the $keywords to set\n     */\n    public function setKeywords(string $keywords)\n    {\n        $this->keywords = $keywords;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFeedAtomUrl(): string\n    {\n        return $this->feedAtomUrl;\n    }\n\n    /**\n     * @param string $feedAtomUrl the $feedAtomUrl to set\n     */\n    public function setFeedAtomUrl(string $feedAtomUrl)\n    {\n        $this->feedAtomUrl = $feedAtomUrl;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFeedRssUrl(): string\n    {\n        return $this->feedRssUrl;\n    }\n\n    /**\n     * @param string $feedRssUrl the $feedRssUrl to set\n     */\n    public function setFeedRssUrl(string $feedRssUrl)\n    {\n        $this->feedRssUrl = $feedRssUrl;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFeedUrl(): string\n    {\n        return $this->feedUrl;\n    }\n\n    /**\n     * @param string $feedUrl the $feedUrl to set\n     */\n    public function setFeedUrl(string $feedUrl)\n    {\n        $this->feedUrl = $feedUrl;\n    }\n\n    /**\n     * @return Feed\n     */\n    public function getFeed(): Feed\n    {\n        return $this->feed;\n    }\n\n    /**\n     * @param Feed $feed the $feed to set\n     */\n    public function setFeed(Feed $feed)\n    {\n        $this->feed = $feed;\n    }\n\n    /**\n     * @return Query|null\n     */\n    public function getCountSql(): ?Query\n    {\n        return $this->countSql;\n    }\n\n    /**\n     * @param Query $countSql the $countSql to set\n     */\n    public function setCountSql($countSql)\n    {\n        $this->countSql = $countSql;\n    }\n\n    /**\n     * @return int\n     */\n    public function getCurrentPage(): int\n    {\n        return $this->currentPage;\n    }\n\n    /**\n     * _currentPage\n     *\n     * @return int\n     */\n    public function ____currentPage(): int\n    {\n        return $this->getCurrentPage();\n    }\n\n    /**\n     * \u83b7\u53d6\u9875\u6570\n     *\n     * @return integer\n     */\n    public function getTotalPage(): int\n    {\n        return ceil($this->getTotal() / $this->parameter->pageSize);\n    }\n\n    /**\n     * @return int\n     * @throws Db\\Exception\n     */\n    public function getTotal(): int\n    {\n        if (false === $this->total) {\n            $this->total = $this->size($this->countSql);\n        }\n\n        return $this->total;\n    }\n\n    /**\n     * @param int $total the $total to set\n     */\n    public function setTotal(int $total)\n    {\n        $this->total = $total;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getThemeFile(): ?string\n    {\n        return $this->themeFile;\n    }\n\n    /**\n     * @param string $themeFile the $themeFile to set\n     */\n    public function setThemeFile(string $themeFile)\n    {\n        $this->themeFile = $themeFile;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getThemeDir(): ?string\n    {\n        return $this->themeDir;\n    }\n\n    /**\n     * @param string $themeDir the $themeDir to set\n     */\n    public function setThemeDir(string $themeDir)\n    {\n        $this->themeDir = $themeDir;\n    }\n\n    /**\n     * \u6267\u884c\u51fd\u6570\n     */\n    public function execute()\n    {\n        /** \u907f\u514d\u91cd\u590d\u53d6\u6570\u636e */\n        if ($this->have()) {\n            return;\n        }\n\n        $handles = [\n            'index'              => 'indexHandle',\n            'index_page'         => 'indexHandle',\n            'archive'            => 'archiveEmptyHandle',\n            'archive_page'       => 'archiveEmptyHandle',\n            404                  => 'error404Handle',\n            'single'             => 'singleHandle',\n            'page'               => 'singleHandle',\n            'post'               => 'singleHandle',\n            'attachment'         => 'singleHandle',\n            'comment_page'       => 'singleHandle',\n            'category'           => 'categoryHandle',\n            'category_page'      => 'categoryHandle',\n            'tag'                => 'tagHandle',\n            'tag_page'           => 'tagHandle',\n            'author'             => 'authorHandle',\n            'author_page'        => 'authorHandle',\n            'archive_year'       => 'dateHandle',\n            'archive_year_page'  => 'dateHandle',\n            'archive_month'      => 'dateHandle',\n            'archive_month_page' => 'dateHandle',\n            'archive_day'        => 'dateHandle',\n            'archive_day_page'   => 'dateHandle',\n            'search'             => 'searchHandle',\n            'search_page'        => 'searchHandle'\n        ];\n\n        /** \u5904\u7406\u641c\u7d22\u7ed3\u679c\u8df3\u8f6c */\n        if (isset($this->request->s)) {\n            $filterKeywords = $this->request->filter('search')->s;\n\n            /** \u8df3\u8f6c\u5230\u641c\u7d22\u9875 */\n            if (null != $filterKeywords) {\n                $this->response->redirect(\n                    Router::url('search', ['keywords' => urlencode($filterKeywords)], $this->options->index)\n                );\n            }\n        }\n\n        /** \u81ea\u5b9a\u4e49\u9996\u9875\u529f\u80fd */\n        $frontPage = $this->options->frontPage;\n        if (!$this->invokeByFeed && ('index' == $this->parameter->type || 'index_page' == $this->parameter->type)) {\n            //\u663e\u793a\u67d0\u4e2a\u9875\u9762\n            if (0 === strpos($frontPage, 'page:')) {\n                // \u5bf9\u67d0\u4e9b\u53d8\u91cf\u505ahack\n                $this->request->setParam('cid', intval(substr($frontPage, 5)));\n                $this->parameter->type = 'page';\n                $this->makeSinglePageAsFrontPage = true;\n            } elseif (0 === strpos($frontPage, 'file:')) {\n                // \u663e\u793a\u67d0\u4e2a\u6587\u4ef6\n                $this->setThemeFile(substr($frontPage, 5));\n                return;\n            }\n        }\n\n        if ('recent' != $frontPage && $this->options->frontArchive) {\n            $handles['archive'] = 'indexHandle';\n            $handles['archive_page'] = 'indexHandle';\n            $this->archiveType = 'front';\n        }\n\n        /** \u521d\u59cb\u5316\u5206\u9875\u53d8\u91cf */\n        $this->currentPage = $this->request->filter('int')->page ?? 1;\n        $hasPushed = false;\n\n        /** select\u521d\u59cb\u5316 */\n        $select = self::pluginHandle()->trigger($selectPlugged)->select($this);\n\n        /** \u5b9a\u65f6\u53d1\u5e03\u529f\u80fd */\n        if (!$selectPlugged) {\n            if ($this->parameter->preview) {\n                $select = $this->select();\n            } else {\n                if ('post' == $this->parameter->type || 'page' == $this->parameter->type) {\n                    if ($this->user->hasLogin()) {\n                        $select = $this->select()->where(\n                            'table.contents.status = ? OR table.contents.status = ? \n                                OR (table.contents.status = ? AND table.contents.authorId = ?)',\n                            'publish',\n                            'hidden',\n                            'private',\n                            $this->user->uid\n                        );\n                    } else {\n                        $select = $this->select()->where(\n                            'table.contents.status = ? OR table.contents.status = ?',\n                            'publish',\n                            'hidden'\n                        );\n                    }\n                } else {\n                    if ($this->user->hasLogin()) {\n                        $select = $this->select()->where(\n                            'table.contents.status = ? OR (table.contents.status = ? AND table.contents.authorId = ?)',\n                            'publish',\n                            'private',\n                            $this->user->uid\n                        );\n                    } else {\n                        $select = $this->select()->where('table.contents.status = ?', 'publish');\n                    }\n                }\n                $select->where('table.contents.created < ?', $this->options->time);\n            }\n        }\n\n        /** handle\u521d\u59cb\u5316 */\n        self::pluginHandle()->handleInit($this, $select);\n\n        /** \u521d\u59cb\u5316\u5176\u5b83\u53d8\u91cf */\n        $this->feedUrl = $this->options->feedUrl;\n        $this->feedRssUrl = $this->options->feedRssUrl;\n        $this->feedAtomUrl = $this->options->feedAtomUrl;\n        $this->keywords = $this->options->keywords;\n        $this->description = $this->options->description;\n        $this->archiveUrl = $this->options->siteUrl;\n\n        if (isset($handles[$this->parameter->type])) {\n            $handle = $handles[$this->parameter->type];\n            $this->{$handle}($select, $hasPushed);\n        } else {\n            $hasPushed = self::pluginHandle()->handle($this->parameter->type, $this, $select);\n        }\n\n        /** \u521d\u59cb\u5316\u76ae\u80a4\u51fd\u6570 */\n        $functionsFile = $this->themeDir . 'functions.php';\n        if (\n            (!$this->invokeFromOutside || $this->parameter->type == 404 || $this->parameter->preview)\n            && file_exists($functionsFile)\n        ) {\n            require_once $functionsFile;\n            if (function_exists('themeInit')) {\n                themeInit($this);\n            }\n        }\n\n        /** \u5982\u679c\u5df2\u7ecf\u63d0\u524d\u538b\u5165\u5219\u76f4\u63a5\u8fd4\u56de */\n        if ($hasPushed) {\n            return;\n        }\n\n        /** \u4ec5\u8f93\u51fa\u6587\u7ae0 */\n        $this->countSql = clone $select;\n\n        $select->order('table.contents.created', Db::SORT_DESC)\n            ->page($this->currentPage, $this->parameter->pageSize);\n        $this->query($select);\n\n        /** \u5904\u7406\u8d85\u51fa\u5206\u9875\u7684\u60c5\u51b5 */\n        if ($this->currentPage > 1 && !$this->have()) {\n            throw new WidgetException(_t('\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u5b58\u5728'), 404);\n        }\n    }\n\n    /**\n     * \u91cd\u8f7dselect\n     *\n     * @return Query\n     * @throws Db\\Exception\n     */\n    public function select(): Query\n    {\n        if ($this->invokeByFeed) {\n            // \u5bf9feed\u8f93\u51fa\u52a0\u5165\u9650\u5236\u6761\u4ef6\n            return parent::select()->where('table.contents.allowFeed = ?', 1)\n                ->where(\"table.contents.password IS NULL OR table.contents.password = ''\");\n        } else {\n            return parent::select();\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u6587\u7ae0\u5185\u5bb9\n     *\n     * @param string $more \u6587\u7ae0\u622a\u53d6\u540e\u7f00\n     */\n    public function content($more = null)\n    {\n        parent::content($this->is('single') ? false : $more);\n    }\n\n    /**\n     * \u8f93\u51fa\u5206\u9875\n     *\n     * @param string $prev \u4e0a\u4e00\u9875\u6587\u5b57\n     * @param string $next \u4e0b\u4e00\u9875\u6587\u5b57\n     * @param int $splitPage \u5206\u5272\u8303\u56f4\n     * @param string $splitWord \u5206\u5272\u5b57\u7b26\n     * @param string|array $template \u5c55\u73b0\u914d\u7f6e\u4fe1\u606f\n     * @throws Db\\Exception|WidgetException\n     */\n    public function pageNav(\n        string $prev = '&laquo;',\n        string $next = '&raquo;',\n        int $splitPage = 3,\n        string $splitWord = '...',\n        $template = ''\n    ) {\n        if ($this->have()) {\n            $hasNav = false;\n            $default = [\n                'wrapTag'   => 'ol',\n                'wrapClass' => 'page-navigator'\n            ];\n\n            if (is_string($template)) {\n                parse_str($template, $config);\n            } else {\n                $config = $template ?: [];\n            }\n\n            $template = array_merge($default, $config);\n            $total = $this->getTotal();\n            $query = Router::url(\n                $this->parameter->type .\n                (false === strpos($this->parameter->type, '_page') ? '_page' : null),\n                $this->pageRow,\n                $this->options->index\n            );\n\n            self::pluginHandle()->trigger($hasNav)->pageNav(\n                $this->currentPage,\n                $total,\n                $this->parameter->pageSize,\n                $prev,\n                $next,\n                $splitPage,\n                $splitWord,\n                $template,\n                $query\n            );\n\n            if (!$hasNav && $total > $this->parameter->pageSize) {\n                /** \u4f7f\u7528\u76d2\u72b6\u5206\u9875 */\n                $nav = new Box(\n                    $total,\n                    $this->currentPage,\n                    $this->parameter->pageSize,\n                    $query\n                );\n\n                echo '<' . $template['wrapTag'] . (empty($template['wrapClass'])\n                        ? '' : ' class=\"' . $template['wrapClass'] . '\"') . '>';\n                $nav->render($prev, $next, $splitPage, $splitWord, $template);\n                echo '</' . $template['wrapTag'] . '>';\n            }\n        }\n    }\n\n    /**\n     * \u524d\u4e00\u9875\n     *\n     * @param string $word \u94fe\u63a5\u6807\u9898\n     * @param string $page \u9875\u9762\u94fe\u63a5\n     * @throws Db\\Exception|WidgetException\n     */\n    public function pageLink(string $word = '&laquo; Previous Entries', string $page = 'prev')\n    {\n        if ($this->have()) {\n            if (empty($this->pageNav)) {\n                $query = Router::url(\n                    $this->parameter->type .\n                    (false === strpos($this->parameter->type, '_page') ? '_page' : null),\n                    $this->pageRow,\n                    $this->options->index\n                );\n\n                /** \u4f7f\u7528\u76d2\u72b6\u5206\u9875 */\n                $this->pageNav = new Classic(\n                    $this->getTotal(),\n                    $this->currentPage,\n                    $this->parameter->pageSize,\n                    $query\n                );\n            }\n\n            $this->pageNav->{$page}($word);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u8bc4\u8bba\u5f52\u6863\u5bf9\u8c61\n     *\n     * @access public\n     * @return \\Widget\\Comments\\Archive\n     */\n    public function comments(): \\Widget\\Comments\\Archive\n    {\n        $parameter = [\n            'parentId'      => $this->hidden ? 0 : $this->cid,\n            'parentContent' => $this->row,\n            'respondId'     => $this->respondId,\n            'commentPage'   => $this->request->filter('int')->commentPage,\n            'allowComment'  => $this->allow('comment')\n        ];\n\n        return \\Widget\\Comments\\Archive::alloc($parameter);\n    }\n\n    /**\n     * \u83b7\u53d6\u56de\u54cd\u5f52\u6863\u5bf9\u8c61\n     *\n     * @return Ping\n     */\n    public function pings(): Ping\n    {\n        return Ping::alloc([\n            'parentId'      => $this->hidden ? 0 : $this->cid,\n            'parentContent' => $this->row,\n            'allowPing'     => $this->allow('ping')\n        ]);\n    }\n\n    /**\n     * \u83b7\u53d6\u9644\u4ef6\u5bf9\u8c61\n     *\n     * @param integer $limit \u6700\u5927\u4e2a\u6570\n     * @param integer $offset \u91cd\u65b0\n     * @return Related\n     */\n    public function attachments(int $limit = 0, int $offset = 0): Related\n    {\n        return Related::allocWithAlias($this->cid . '-' . uniqid(), [\n            'parentId' => $this->cid,\n            'limit'    => $limit,\n            'offset'   => $offset\n        ]);\n    }\n\n    /**\n     * \u663e\u793a\u4e0b\u4e00\u4e2a\u5185\u5bb9\u7684\u6807\u9898\u94fe\u63a5\n     *\n     * @param string $format \u683c\u5f0f\n     * @param string|null $default \u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u7bc7,\u663e\u793a\u7684\u9ed8\u8ba4\u6587\u5b57\n     * @param array $custom \u5b9a\u5236\u5316\u6837\u5f0f\n     */\n    public function theNext(string $format = '%s', ?string $default = null, array $custom = [])\n    {\n        $content = $this->db->fetchRow($this->select()->where(\n            'table.contents.created > ? AND table.contents.created < ?',\n            $this->created,\n            $this->options->time\n        )\n            ->where('table.contents.status = ?', 'publish')\n            ->where('table.contents.type = ?', $this->type)\n            ->where(\"table.contents.password IS NULL OR table.contents.password = ''\")\n            ->order('table.contents.created', Db::SORT_ASC)\n            ->limit(1));\n\n        if ($content) {\n            $content = $this->filter($content);\n            $default = [\n                'title'    => null,\n                'tagClass' => null\n            ];\n            $custom = array_merge($default, $custom);\n            extract($custom);\n\n            $linkText = empty($title) ? $content['title'] : $title;\n            $linkClass = empty($tagClass) ? '' : 'class=\"' . $tagClass . '\" ';\n            $link = '<a ' . $linkClass . 'href=\"' . $content['permalink']\n                . '\" title=\"' . $content['title'] . '\">' . $linkText . '</a>';\n\n            printf($format, $link);\n        } else {\n            echo $default;\n        }\n    }\n\n    /**\n     * \u663e\u793a\u4e0a\u4e00\u4e2a\u5185\u5bb9\u7684\u6807\u9898\u94fe\u63a5\n     *\n     * @access public\n     * @param string $format \u683c\u5f0f\n     * @param string $default \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u7bc7,\u663e\u793a\u7684\u9ed8\u8ba4\u6587\u5b57\n     * @param array $custom \u5b9a\u5236\u5316\u6837\u5f0f\n     * @return void\n     */\n    public function thePrev($format = '%s', $default = null, $custom = [])\n    {\n        $content = $this->db->fetchRow($this->select()->where('table.contents.created < ?', $this->created)\n            ->where('table.contents.status = ?', 'publish')\n            ->where('table.contents.type = ?', $this->type)\n            ->where(\"table.contents.password IS NULL OR table.contents.password = ''\")\n            ->order('table.contents.created', Db::SORT_DESC)\n            ->limit(1));\n\n        if ($content) {\n            $content = $this->filter($content);\n            $default = [\n                'title'    => null,\n                'tagClass' => null\n            ];\n            $custom = array_merge($default, $custom);\n            extract($custom);\n\n            $linkText = empty($title) ? $content['title'] : $title;\n            $linkClass = empty($tagClass) ? '' : 'class=\"' . $tagClass . '\" ';\n            $link = '<a ' . $linkClass . 'href=\"' . $content['permalink'] . '\" title=\"' . $content['title'] . '\">' . $linkText . '</a>';\n\n            printf($format, $link);\n        } else {\n            echo $default;\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5173\u8054\u5185\u5bb9\u7ec4\u4ef6\n     *\n     * @param integer $limit \u8f93\u51fa\u6570\u91cf\n     * @param string|null $type \u5173\u8054\u7c7b\u578b\n     * @return Contents\n     */\n    public function related(int $limit = 5, ?string $type = null): Contents\n    {\n        $type = strtolower($type);\n\n        switch ($type) {\n            case 'author':\n                /** \u5982\u679c\u8bbf\u95ee\u6743\u9650\u88ab\u8bbe\u7f6e\u4e3a\u7981\u6b62,\u5219tag\u4f1a\u88ab\u7f6e\u4e3a\u7a7a */\n                return Author::alloc(\n                    ['cid' => $this->cid, 'type' => $this->type, 'author' => $this->author->uid, 'limit' => $limit]\n                );\n            default:\n                /** \u5982\u679c\u8bbf\u95ee\u6743\u9650\u88ab\u8bbe\u7f6e\u4e3a\u7981\u6b62,\u5219tag\u4f1a\u88ab\u7f6e\u4e3a\u7a7a */\n                return \\Widget\\Contents\\Related::alloc(\n                    ['cid' => $this->cid, 'type' => $this->type, 'tags' => $this->tags, 'limit' => $limit]\n                );\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u5934\u90e8\u5143\u6570\u636e\n     *\n     * @param string|null $rule \u89c4\u5219\n     */\n    public function header(?string $rule = null)\n    {\n        $rules = [];\n        $allows = [\n            'description'  => htmlspecialchars($this->description ?? ''),\n            'keywords'     => htmlspecialchars($this->keywords ?? ''),\n            'generator'    => $this->options->generator,\n            'template'     => $this->options->theme,\n            'pingback'     => $this->options->xmlRpcUrl,\n            'xmlrpc'       => $this->options->xmlRpcUrl . '?rsd',\n            'wlw'          => $this->options->xmlRpcUrl . '?wlw',\n            'rss2'         => $this->feedUrl,\n            'rss1'         => $this->feedRssUrl,\n            'commentReply' => 1,\n            'antiSpam'     => 1,\n            'atom'         => $this->feedAtomUrl\n        ];\n\n        /** \u5934\u90e8\u662f\u5426\u8f93\u51fa\u805a\u5408 */\n        $allowFeed = !$this->is('single') || $this->allow('feed') || $this->makeSinglePageAsFrontPage;\n\n        if (!empty($rule)) {\n            parse_str($rule, $rules);\n            $allows = array_merge($allows, $rules);\n        }\n\n        $allows = self::pluginHandle()->headerOptions($allows, $this);\n        $title = (empty($this->archiveTitle) ? '' : $this->archiveTitle . ' &raquo; ') . $this->options->title;\n\n        $header = '';\n        if (!empty($allows['description'])) {\n            $header .= '<meta name=\"description\" content=\"' . $allows['description'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['keywords'])) {\n            $header .= '<meta name=\"keywords\" content=\"' . $allows['keywords'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['generator'])) {\n            $header .= '<meta name=\"generator\" content=\"' . $allows['generator'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['template'])) {\n            $header .= '<meta name=\"template\" content=\"' . $allows['template'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['pingback']) && 2 == $this->options->allowXmlRpc) {\n            $header .= '<link rel=\"pingback\" href=\"' . $allows['pingback'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['xmlrpc']) && 0 < $this->options->allowXmlRpc) {\n            $header .= '<link rel=\"EditURI\" type=\"application/rsd+xml\" title=\"RSD\" href=\"'\n                . $allows['xmlrpc'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['wlw']) && 0 < $this->options->allowXmlRpc) {\n            $header .= '<link rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\" href=\"'\n                . $allows['wlw'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['rss2']) && $allowFeed) {\n            $header .= '<link rel=\"alternate\" type=\"application/rss+xml\" title=\"'\n                . $title . ' &raquo; RSS 2.0\" href=\"' . $allows['rss2'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['rss1']) && $allowFeed) {\n            $header .= '<link rel=\"alternate\" type=\"application/rdf+xml\" title=\"'\n                . $title . ' &raquo; RSS 1.0\" href=\"' . $allows['rss1'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['atom']) && $allowFeed) {\n            $header .= '<link rel=\"alternate\" type=\"application/atom+xml\" title=\"'\n                . $title . ' &raquo; ATOM 1.0\" href=\"' . $allows['atom'] . '\" />' . \"\\n\";\n        }\n\n        if ($this->options->commentsThreaded && $this->is('single')) {\n            if ('' != $allows['commentReply']) {\n                if (1 == $allows['commentReply']) {\n                    $header .= \"<script type=\\\"text/javascript\\\">\n(function () {\n    window.TypechoComment = {\n        dom : function (id) {\n            return document.getElementById(id);\n        },\n    \n        create : function (tag, attr) {\n            var el = document.createElement(tag);\n        \n            for (var key in attr) {\n                el.setAttribute(key, attr[key]);\n            }\n        \n            return el;\n        },\n\n        reply : function (cid, coid) {\n            var comment = this.dom(cid), parent = comment.parentNode,\n                response = this.dom('\" . $this->respondId . \"'), input = this.dom('comment-parent'),\n                form = 'form' == response.tagName ? response : response.getElementsByTagName('form')[0],\n                textarea = response.getElementsByTagName('textarea')[0];\n\n            if (null == input) {\n                input = this.create('input', {\n                    'type' : 'hidden',\n                    'name' : 'parent',\n                    'id'   : 'comment-parent'\n                });\n\n                form.appendChild(input);\n            }\n\n            input.setAttribute('value', coid);\n\n            if (null == this.dom('comment-form-place-holder')) {\n                var holder = this.create('div', {\n                    'id' : 'comment-form-place-holder'\n                });\n\n                response.parentNode.insertBefore(holder, response);\n            }\n\n            comment.appendChild(response);\n            this.dom('cancel-comment-reply-link').style.display = '';\n\n            if (null != textarea && 'text' == textarea.name) {\n                textarea.focus();\n            }\n\n            return false;\n        },\n\n        cancelReply : function () {\n            var response = this.dom('{$this->respondId}'),\n            holder = this.dom('comment-form-place-holder'), input = this.dom('comment-parent');\n\n            if (null != input) {\n                input.parentNode.removeChild(input);\n            }\n\n            if (null == holder) {\n                return true;\n            }\n\n            this.dom('cancel-comment-reply-link').style.display = 'none';\n            holder.parentNode.insertBefore(response, holder);\n            return false;\n        }\n    };\n})();\n</script>\n\";\n                } else {\n                    $header .= '<script src=\"' . $allows['commentReply'] . '\" type=\"text/javascript\"></script>';\n                }\n            }\n        }\n\n        /** \u53cd\u5783\u573e\u8bbe\u7f6e */\n        if ($this->options->commentsAntiSpam && $this->is('single')) {\n            if ('' != $allows['antiSpam']) {\n                if (1 == $allows['antiSpam']) {\n                    $header .= \"<script type=\\\"text/javascript\\\">\n(function () {\n    var event = document.addEventListener ? {\n        add: 'addEventListener',\n        triggers: ['scroll', 'mousemove', 'keyup', 'touchstart'],\n        load: 'DOMContentLoaded'\n    } : {\n        add: 'attachEvent',\n        triggers: ['onfocus', 'onmousemove', 'onkeyup', 'ontouchstart'],\n        load: 'onload'\n    }, added = false;\n\n    document[event.add](event.load, function () {\n        var r = document.getElementById('{$this->respondId}'),\n            input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = '_';\n        input.value = \" . Common::shuffleScriptVar($this->security->getToken($this->request->getRequestUrl())) . \"\n\n        if (null != r) {\n            var forms = r.getElementsByTagName('form');\n            if (forms.length > 0) {\n                function append() {\n                    if (!added) {\n                        forms[0].appendChild(input);\n                        added = true;\n                    }\n                }\n            \n                for (var i = 0; i < event.triggers.length; i ++) {\n                    var trigger = event.triggers[i];\n                    document[event.add](trigger, append);\n                    window[event.add](trigger, append);\n                }\n            }\n        }\n    });\n})();\n</script>\";\n                } else {\n                    $header .= '<script src=\"' . $allows['antiSpam'] . '\" type=\"text/javascript\"></script>';\n                }\n            }\n        }\n\n        /** \u8f93\u51faheader */\n        echo $header;\n\n        /** \u63d2\u4ef6\u652f\u6301 */\n        self::pluginHandle()->header($header, $this);\n    }\n\n    /**\n     * \u652f\u6301\u9875\u811a\u81ea\u5b9a\u4e49\n     */\n    public function footer()\n    {\n        self::pluginHandle()->footer($this);\n    }\n\n    /**\n     * \u8f93\u51facookie\u8bb0\u5fc6\u522b\u540d\n     *\n     * @param string $cookieName \u5df2\u7ecf\u8bb0\u5fc6\u7684cookie\u540d\u79f0\n     * @param boolean $return \u662f\u5426\u8fd4\u56de\n     * @return string|void\n     */\n    public function remember(string $cookieName, bool $return = false)\n    {\n        $cookieName = strtolower($cookieName);\n        if (!in_array($cookieName, ['author', 'mail', 'url'])) {\n            return '';\n        }\n\n        $value = Cookie::get('__typecho_remember_' . $cookieName);\n        if ($return) {\n            return $value;\n        } else {\n            echo htmlspecialchars($value ?? '');\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u5f52\u6863\u6807\u9898\n     *\n     * @param mixed $defines\n     * @param string $before\n     * @param string $end\n     */\n    public function archiveTitle($defines = null, string $before = ' &raquo; ', string $end = '')\n    {\n        if ($this->archiveTitle) {\n            $define = '%s';\n            if (is_array($defines) && !empty($defines[$this->archiveType])) {\n                $define = $defines[$this->archiveType];\n            }\n\n            echo $before . sprintf($define, $this->archiveTitle) . $end;\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u5173\u952e\u5b57\n     *\n     * @param string $split\n     * @param string $default\n     */\n    public function keywords(string $split = ',', string $default = '')\n    {\n        echo empty($this->keywords) ? $default : str_replace(',', $split, htmlspecialchars($this->keywords ?? ''));\n    }\n\n    /**\n     * \u83b7\u53d6\u4e3b\u9898\u6587\u4ef6\n     *\n     * @param string $fileName \u4e3b\u9898\u6587\u4ef6\n     */\n    public function need(string $fileName)\n    {\n        require $this->themeDir . $fileName;\n    }\n\n    /**\n     * \u8f93\u51fa\u89c6\u56fe\n     * @throws WidgetException\n     */\n    public function render()\n    {\n        /** \u5904\u7406\u9759\u6001\u94fe\u63a5\u8df3\u8f6c */\n        $this->checkPermalink();\n\n        /** \u6dfb\u52a0Pingback */\n        if (2 == $this->options->allowXmlRpc) {\n            $this->response->setHeader('X-Pingback', $this->options->xmlRpcUrl);\n        }\n        $validated = false;\n\n        //~ \u81ea\u5b9a\u4e49\u6a21\u677f\n        if (!empty($this->themeFile)) {\n            if (file_exists($this->themeDir . $this->themeFile)) {\n                $validated = true;\n            }\n        }\n\n        if (!$validated && !empty($this->archiveType)) {\n            //~ \u9996\u5148\u627e\u5177\u4f53\u8def\u5f84, \u6bd4\u5982 category/default.php\n            if (!$validated && !empty($this->archiveSlug)) {\n                $themeFile = $this->archiveType . '/' . $this->archiveSlug . '.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n\n            //~ \u7136\u540e\u627e\u5f52\u6863\u7c7b\u578b\u8def\u5f84, \u6bd4\u5982 category.php\n            if (!$validated) {\n                $themeFile = $this->archiveType . '.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n\n            //\u9488\u5bf9attachment\u7684hook\n            if (!$validated && 'attachment' == $this->archiveType) {\n                if (file_exists($this->themeDir . 'page.php')) {\n                    $this->themeFile = 'page.php';\n                    $validated = true;\n                } elseif (file_exists($this->themeDir . 'post.php')) {\n                    $this->themeFile = 'post.php';\n                    $validated = true;\n                }\n            }\n\n            //~ \u6700\u540e\u627e\u5f52\u6863\u8def\u5f84, \u6bd4\u5982 archive.php \u6216\u8005 single.php\n            if (!$validated && 'index' != $this->archiveType && 'front' != $this->archiveType) {\n                $themeFile = $this->archiveSingle ? 'single.php' : 'archive.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n\n            if (!$validated) {\n                $themeFile = 'index.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n        }\n\n        /** \u6587\u4ef6\u4e0d\u5b58\u5728 */\n        if (!$validated) {\n            throw new WidgetException(_t('\u6587\u4ef6\u4e0d\u5b58\u5728'), 500);\n        }\n\n        /** \u6302\u63a5\u63d2\u4ef6 */\n        self::pluginHandle()->beforeRender($this);\n\n        /** \u8f93\u51fa\u6a21\u677f */\n        require_once $this->themeDir . $this->themeFile;\n\n        /** \u6302\u63a5\u63d2\u4ef6 */\n        self::pluginHandle()->afterRender($this);\n    }\n\n    /**\n     * \u8f93\u51fafeed\n     *\n     * @throws WidgetException\n     */\n    public function feed()\n    {\n        if ($this->feedType == Feed::RSS1) {\n            $feedUrl = $this->feedRssUrl;\n        } elseif ($this->feedType == Feed::ATOM1) {\n            $feedUrl = $this->feedAtomUrl;\n        } else {\n            $feedUrl = $this->feedUrl;\n        }\n\n        $this->checkPermalink($feedUrl);\n\n        $this->feed->setSubTitle($this->description);\n        $this->feed->setFeedUrl($feedUrl);\n        $this->feed->setBaseUrl($this->archiveUrl);\n\n        if ($this->is('single') || 'comments' == $this->parameter->type) {\n            $this->feed->setTitle(_t(\n                '%s \u7684\u8bc4\u8bba',\n                $this->options->title . ($this->archiveTitle ? ' - ' . $this->archiveTitle : null)\n            ));\n\n            if ('comments' == $this->parameter->type) {\n                $comments = Recent::alloc('pageSize=10');\n            } else {\n                $comments = Recent::alloc('pageSize=10&parentId=' . $this->cid);\n            }\n\n            while ($comments->next()) {\n                $suffix = self::pluginHandle()->trigger($plugged)->commentFeedItem($this->feedType, $comments);\n                if (!$plugged) {\n                    $suffix = null;\n                }\n\n                $this->feed->addItem([\n                    'title'   => $comments->author,\n                    'content' => $comments->content,\n                    'date'    => $comments->created,\n                    'link'    => $comments->permalink,\n                    'author'  => (object)[\n                        'screenName' => $comments->author,\n                        'url'        => $comments->url,\n                        'mail'       => $comments->mail\n                    ],\n                    'excerpt' => strip_tags($comments->content),\n                    'suffix'  => $suffix\n                ]);\n            }\n        } else {\n            $this->feed->setTitle($this->options->title . ($this->archiveTitle ? ' - ' . $this->archiveTitle : null));\n\n            while ($this->next()) {\n                $suffix = self::pluginHandle()->trigger($plugged)->feedItem($this->feedType, $this);\n                if (!$plugged) {\n                    $suffix = null;\n                }\n\n                $feedUrl = '';\n                if (Feed::RSS2 == $this->feedType) {\n                    $feedUrl = $this->feedUrl;\n                } elseif (Feed::RSS1 == $this->feedType) {\n                    $feedUrl = $this->feedRssUrl;\n                } elseif (Feed::ATOM1 == $this->feedType) {\n                    $feedUrl = $this->feedAtomUrl;\n                }\n\n                $this->feed->addItem([\n                    'title'           => $this->title,\n                    'content'         => $this->options->feedFullText ? $this->content\n                        : (false !== strpos($this->text, '<!--more-->') ? $this->excerpt .\n                            \"<p class=\\\"more\\\"><a href=\\\"{$this->permalink}\\\" title=\\\"{$this->title}\\\">[...]</a></p>\"\n                            : $this->content),\n                    'date'            => $this->created,\n                    'link'            => $this->permalink,\n                    'author'          => $this->author,\n                    'excerpt'         => $this->___description(),\n                    'comments'        => $this->commentsNum,\n                    'commentsFeedUrl' => $feedUrl,\n                    'suffix'          => $suffix\n                ]);\n            }\n        }\n\n        $this->response->setContentType($this->feedContentType);\n        echo (string) $this->feed;\n    }\n\n    /**\n     * \u5224\u65ad\u5f52\u6863\u7c7b\u578b\u548c\u540d\u79f0\n     *\n     * @access public\n     * @param string $archiveType \u5f52\u6863\u7c7b\u578b\n     * @param string|null $archiveSlug \u5f52\u6863\u540d\u79f0\n     * @return boolean\n     */\n    public function is(string $archiveType, ?string $archiveSlug = null)\n    {\n        return ($archiveType == $this->archiveType ||\n                (($this->archiveSingle ? 'single' : 'archive') == $archiveType && 'index' != $this->archiveType) ||\n                ('index' == $archiveType && $this->makeSinglePageAsFrontPage))\n            && (empty($archiveSlug) || $archiveSlug == $this->archiveSlug);\n    }\n\n    /**\n     * \u63d0\u4ea4\u67e5\u8be2\n     *\n     * @param mixed $select \u67e5\u8be2\u5bf9\u8c61\n     * @throws Db\\Exception\n     */\n    public function query($select)\n    {\n        self::pluginHandle()->trigger($queryPlugged)->query($this, $select);\n        if (!$queryPlugged) {\n            $this->db->fetchAll($select, [$this, 'push']);\n        }\n    }\n\n    /**\n     * \u8bc4\u8bba\u5730\u5740\n     *\n     * @return string\n     */\n    protected function ___commentUrl(): string\n    {\n        /** \u751f\u6210\u53cd\u9988\u5730\u5740 */\n        /** \u8bc4\u8bba */\n        $commentUrl = parent::___commentUrl();\n\n        //\u4e0d\u4f9d\u8d56js\u7684\u7236\u7ea7\u8bc4\u8bba\n        $reply = $this->request->filter('int')->replyTo;\n        if ($reply && $this->is('single')) {\n            $commentUrl .= '?parent=' . $reply;\n        }\n\n        return $commentUrl;\n    }\n\n    /**\n     * \u5bfc\u5165\u5bf9\u8c61\n     *\n     * @param Archive $widget \u9700\u8981\u5bfc\u5165\u7684\u5bf9\u8c61\n     */\n    private function import(Archive $widget)\n    {\n        $currentProperties = get_object_vars($this);\n\n        foreach ($currentProperties as $name => $value) {\n            if (false !== strpos('|request|response|parameter|feed|feedType|currentFeedUrl|', '|' . $name . '|')) {\n                continue;\n            }\n\n            if (isset($widget->{$name})) {\n                $this->{$name} = $widget->{$name};\n            } else {\n                $method = ucfirst($name);\n                $setMethod = 'set' . $method;\n                $getMethod = 'get' . $method;\n\n                if (\n                    method_exists($this, $setMethod)\n                    && method_exists($widget, $getMethod)\n                ) {\n                    $value = $widget->{$getMethod}();\n\n                    if ($value !== null) {\n                        $this->{$setMethod}($widget->{$getMethod}());\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u68c0\u67e5\u94fe\u63a5\u662f\u5426\u6b63\u786e\n     *\n     * @param string|null $permalink\n     */\n    private function checkPermalink(?string $permalink = null)\n    {\n        if (!isset($permalink)) {\n            $type = $this->parameter->type;\n\n            if (\n                in_array($type, ['index', 'comment_page', 404])\n                || $this->makeSinglePageAsFrontPage    // \u81ea\u5b9a\u4e49\u9996\u9875\u4e0d\u5904\u7406\n                || !$this->parameter->checkPermalink\n            ) { // \u5f3a\u5236\u5173\u95ed\n                return;\n            }\n\n            if ($this->archiveSingle) {\n                $permalink = $this->permalink;\n            } else {\n                $value = array_merge($this->pageRow, [\n                    'page' => $this->currentPage\n                ]);\n\n                $path = Router::url($type, $value);\n                $permalink = Common::url($path, $this->options->index);\n            }\n        }\n\n        $requestUrl = $this->request->getRequestUrl();\n\n        $src = parse_url($permalink);\n        $target = parse_url($requestUrl);\n\n        if ($src['host'] != $target['host'] || urldecode($src['path']) != urldecode($target['path'])) {\n            $this->response->redirect($permalink, true);\n        }\n    }\n\n    /**\n     * \u5904\u7406index\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     */\n    private function indexHandle(Query $select, bool &$hasPushed)\n    {\n        $select->where('table.contents.type = ?', 'post');\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->indexHandle($this, $select);\n    }\n\n    /**\n     * \u9ed8\u8ba4\u7684\u975e\u9996\u9875\u5f52\u6863\u5904\u7406\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException\n     */\n    private function archiveEmptyHandle(Query $select, bool &$hasPushed)\n    {\n        throw new WidgetException(_t('\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u5b58\u5728'), 404);\n    }\n\n    /**\n     * 404\u9875\u9762\u5904\u7406\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     */\n    private function error404Handle(Query $select, bool &$hasPushed)\n    {\n        /** \u8bbe\u7f6eheader */\n        $this->response->setStatus(404);\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = _t('\u9875\u9762\u6ca1\u627e\u5230');\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'archive';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = 404;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u6a21\u677f */\n        $this->themeFile = '404.php';\n\n        /** \u8bbe\u7f6e\u5355\u4e00\u5f52\u6863\u7c7b\u578b */\n        $this->archiveSingle = false;\n\n        $hasPushed = true;\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->error404Handle($this, $select);\n    }\n\n    /**\n     * \u72ec\u7acb\u9875\u5904\u7406\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function singleHandle(Query $select, bool &$hasPushed)\n    {\n        if ('comment_page' == $this->parameter->type) {\n            $params = [];\n            $matched = Router::match($this->request->permalink);\n\n            if ($matched && $matched instanceof Archive && $matched->is('single')) {\n                $this->import($matched);\n                $hasPushed = true;\n                return;\n            }\n        }\n\n        /** \u5c06\u8fd9\u4e24\u4e2a\u8bbe\u7f6e\u63d0\u524d\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5728\u8c03\u7528query\u7684plugin\u65f6\u53ef\u4ee5\u5728\u63d2\u4ef6\u4e2d\u4f7f\u7528is\u5224\u65ad\u521d\u6b65\u5f52\u6863\u7c7b\u578b */\n        /** \u5982\u679c\u9700\u8981\u66f4\u7ec6\u5224\u65ad\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528singleHandle\u6765\u5b9e\u73b0 */\n        $this->archiveSingle = true;\n\n        /** \u9ed8\u8ba4\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'single';\n\n        /** \u5339\u914d\u7c7b\u578b */\n\n        if ('single' != $this->parameter->type) {\n            $select->where('table.contents.type = ?', $this->parameter->type);\n        }\n\n        /** \u5982\u679c\u662f\u5355\u7bc7\u6587\u7ae0\u6216\u72ec\u7acb\u9875\u9762 */\n        if (isset($this->request->cid)) {\n            $select->where('table.contents.cid = ?', $this->request->filter('int')->cid);\n        }\n\n        /** \u5339\u914d\u7f29\u7565\u540d */\n        if (isset($this->request->slug) && !$this->parameter->preview) {\n            $select->where('table.contents.slug = ?', $this->request->slug);\n        }\n\n        /** \u5339\u914d\u65f6\u95f4 */\n        if (isset($this->request->year) && !$this->parameter->preview) {\n            $year = $this->request->filter('int')->year;\n\n            $fromMonth = 1;\n            $toMonth = 12;\n\n            $fromDay = 1;\n            $toDay = 31;\n\n            if (isset($this->request->month)) {\n                $fromMonth = $this->request->filter('int')->month;\n                $toMonth = $fromMonth;\n\n                $fromDay = 1;\n                $toDay = date('t', mktime(0, 0, 0, $toMonth, 1, $year));\n\n                if (isset($this->request->day)) {\n                    $fromDay = $this->request->filter('int')->day;\n                    $toDay = $fromDay;\n                }\n            }\n\n            /** \u83b7\u53d6\u8d77\u59cbGMT\u65f6\u95f4\u7684unix\u65f6\u95f4\u6233 */\n            $from = mktime(0, 0, 0, $fromMonth, $fromDay, $year)\n                - $this->options->timezone + $this->options->serverTimezone;\n            $to = mktime(23, 59, 59, $toMonth, $toDay, $year)\n                - $this->options->timezone + $this->options->serverTimezone;\n            $select->where('table.contents.created >= ? AND table.contents.created < ?', $from, $to);\n        }\n\n        /** \u4fdd\u5b58\u5bc6\u7801\u81f3cookie */\n        $isPasswordPosted = false;\n\n        if (\n            $this->request->isPost()\n            && isset($this->request->protectPassword)\n            && !$this->parameter->preview\n        ) {\n            $this->security->protect();\n            Cookie::set(\n                'protectPassword_' . $this->request->filter('int')->protectCID,\n                $this->request->protectPassword\n            );\n\n            $isPasswordPosted = true;\n        }\n\n        /** \u5339\u914d\u7c7b\u578b */\n        $select->limit(1);\n        $this->query($select);\n\n        if (\n            !$this->have()\n            || (isset($this->request->category)\n                && $this->category != $this->request->category && !$this->parameter->preview)\n            || (isset($this->request->directory)\n                && $this->request->directory != implode('/', $this->directory) && !$this->parameter->preview)\n        ) {\n            if (!$this->invokeFromOutside) {\n                /** \u5bf9\u6ca1\u6709\u7d22\u5f15\u60c5\u51b5\u4e0b\u7684\u5224\u65ad */\n                throw new WidgetException(_t('\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u5b58\u5728'), 404);\n            } else {\n                $hasPushed = true;\n                return;\n            }\n        }\n\n        /** \u5bc6\u7801\u8868\u5355\u5224\u65ad\u903b\u8f91 */\n        if ($isPasswordPosted && $this->hidden) {\n            throw new WidgetException(_t('\u5bf9\u4e0d\u8d77,\u60a8\u8f93\u5165\u7684\u5bc6\u7801\u9519\u8bef'), 403);\n        }\n\n        /** \u8bbe\u7f6e\u6a21\u677f */\n        if ($this->template) {\n            /** \u5e94\u7528\u81ea\u5b9a\u4e49\u6a21\u677f */\n            $this->themeFile = $this->template;\n        }\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n\n        //\u5bf9\u81ea\u5b9a\u4e49\u9996\u9875\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\n        if (!$this->makeSinglePageAsFrontPage) {\n            $this->feedUrl = $this->row['feedUrl'];\n\n            /** RSS 1.0 */\n            $this->feedRssUrl = $this->row['feedRssUrl'];\n\n            /** ATOM 1.0 */\n            $this->feedAtomUrl = $this->row['feedAtomUrl'];\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = $this->title;\n\n            /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n            $this->keywords = implode(',', array_column($this->tags, 'name'));\n\n            /** \u8bbe\u7f6e\u63cf\u8ff0 */\n            $this->description = $this->___description();\n        }\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        [$this->archiveType] = explode('_', $this->type);\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = ('post' == $this->type || 'attachment' == $this->type) ? $this->cid : $this->slug;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $this->permalink;\n\n        /** \u8bbe\u7f6e403\u5934 */\n        if ($this->hidden) {\n            $this->response->setStatus(403);\n        }\n\n        $hasPushed = true;\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->singleHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u5206\u7c7b\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function categoryHandle(Query $select, bool &$hasPushed)\n    {\n        /** \u5982\u679c\u662f\u5206\u7c7b */\n        $categorySelect = $this->db->select()\n            ->from('table.metas')\n            ->where('type = ?', 'category')\n            ->limit(1);\n\n        if (isset($this->request->mid)) {\n            $categorySelect->where('mid = ?', $this->request->filter('int')->mid);\n        }\n\n        if (isset($this->request->slug)) {\n            $categorySelect->where('slug = ?', $this->request->slug);\n        }\n\n        if (isset($this->request->directory)) {\n            $directory = explode('/', $this->request->directory);\n            $categorySelect->where('slug = ?', $directory[count($directory) - 1]);\n        }\n\n        $category = $this->db->fetchRow($categorySelect);\n        if (empty($category)) {\n            throw new WidgetException(_t('\u5206\u7c7b\u4e0d\u5b58\u5728'), 404);\n        }\n\n        $categoryListWidget = Rows::alloc('current=' . $category['mid']);\n        $category = $categoryListWidget->filter($category);\n\n        if (isset($directory) && ($this->request->directory != implode('/', $category['directory']))) {\n            throw new WidgetException(_t('\u7236\u7ea7\u5206\u7c7b\u4e0d\u5b58\u5728'), 404);\n        }\n\n        $children = $categoryListWidget->getAllChildren($category['mid']);\n        $children[] = $category['mid'];\n\n        /** fix sql92 by 70 */\n        $select->join('table.relationships', 'table.contents.cid = table.relationships.cid')\n            ->where('table.relationships.mid IN ?', $children)\n            ->where('table.contents.type = ?', 'post')\n            ->group('table.contents.cid');\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = array_merge($category, [\n            'slug'      => urlencode($category['slug']),\n            'directory' => implode('/', array_map('urlencode', $category['directory']))\n        ]);\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $category['name'];\n\n        /** \u8bbe\u7f6e\u63cf\u8ff0 */\n        $this->description = $category['description'];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = $category['feedUrl'];\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = $category['feedRssUrl'];\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = $category['feedAtomUrl'];\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $category['name'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'category';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $category['slug'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $category['permalink'];\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->categoryHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u6807\u7b7e\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function tagHandle(Query $select, bool &$hasPushed)\n    {\n        $tagSelect = $this->db->select()->from('table.metas')\n            ->where('type = ?', 'tag')->limit(1);\n\n        if (isset($this->request->mid)) {\n            $tagSelect->where('mid = ?', $this->request->filter('int')->mid);\n        }\n\n        if (isset($this->request->slug)) {\n            $tagSelect->where('slug = ?', $this->request->slug);\n        }\n\n        /** \u5982\u679c\u662f\u6807\u7b7e */\n        $tag = $this->db->fetchRow(\n            $tagSelect,\n            [Metas::alloc(), 'filter']\n        );\n\n        if (!$tag) {\n            throw new WidgetException(_t('\u6807\u7b7e\u4e0d\u5b58\u5728'), 404);\n        }\n\n        /** fix sql92 by 70 */\n        $select->join('table.relationships', 'table.contents.cid = table.relationships.cid')\n            ->where('table.relationships.mid = ?', $tag['mid'])\n            ->where('table.contents.type = ?', 'post');\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = array_merge($tag, [\n            'slug' => urlencode($tag['slug'])\n        ]);\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $tag['name'];\n\n        /** \u8bbe\u7f6e\u63cf\u8ff0 */\n        $this->description = $tag['description'];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = $tag['feedUrl'];\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = $tag['feedRssUrl'];\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = $tag['feedAtomUrl'];\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $tag['name'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'tag';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $tag['slug'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $tag['permalink'];\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->tagHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u4f5c\u8005\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function authorHandle(Query $select, bool &$hasPushed)\n    {\n        $uid = $this->request->filter('int')->uid;\n\n        $author = $this->db->fetchRow(\n            $this->db->select()->from('table.users')\n            ->where('uid = ?', $uid),\n            [User::alloc(), 'filter']\n        );\n\n        if (!$author) {\n            throw new WidgetException(_t('\u4f5c\u8005\u4e0d\u5b58\u5728'), 404);\n        }\n\n        $select->where('table.contents.authorId = ?', $uid)\n            ->where('table.contents.type = ?', 'post');\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = $author;\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $author['screenName'];\n\n        /** \u8bbe\u7f6e\u63cf\u8ff0 */\n        $this->description = $author['screenName'];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = $author['feedUrl'];\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = $author['feedRssUrl'];\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = $author['feedAtomUrl'];\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $author['screenName'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'author';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $author['uid'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $author['permalink'];\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->authorHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u65e5\u671f\n     *\n     * @access private\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @return void\n     */\n    private function dateHandle(Query $select, &$hasPushed)\n    {\n        /** \u5982\u679c\u662f\u6309\u65e5\u671f\u5f52\u6863 */\n        $year = $this->request->filter('int')->year;\n        $month = $this->request->filter('int')->month;\n        $day = $this->request->filter('int')->day;\n\n        if (!empty($year) && !empty($month) && !empty($day)) {\n\n            /** \u5982\u679c\u6309\u65e5\u5f52\u6863 */\n            $from = mktime(0, 0, 0, $month, $day, $year);\n            $to = mktime(23, 59, 59, $month, $day, $year);\n\n            /** \u5f52\u6863\u7f29\u7565\u540d */\n            $this->archiveSlug = 'day';\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = _t('%d\u5e74%d\u6708%d\u65e5', $year, $month, $day);\n        } elseif (!empty($year) && !empty($month)) {\n\n            /** \u5982\u679c\u6309\u6708\u5f52\u6863 */\n            $from = mktime(0, 0, 0, $month, 1, $year);\n            $to = mktime(23, 59, 59, $month, date('t', $from), $year);\n\n            /** \u5f52\u6863\u7f29\u7565\u540d */\n            $this->archiveSlug = 'month';\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = _t('%d\u5e74%d\u6708', $year, $month);\n        } elseif (!empty($year)) {\n\n            /** \u5982\u679c\u6309\u5e74\u5f52\u6863 */\n            $from = mktime(0, 0, 0, 1, 1, $year);\n            $to = mktime(23, 59, 59, 12, 31, $year);\n\n            /** \u5f52\u6863\u7f29\u7565\u540d */\n            $this->archiveSlug = 'year';\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = _t('%d\u5e74', $year);\n        }\n\n        $select->where('table.contents.created >= ?', $from - $this->options->timezone + $this->options->serverTimezone)\n            ->where('table.contents.created <= ?', $to - $this->options->timezone + $this->options->serverTimezone)\n            ->where('table.contents.type = ?', 'post');\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'date';\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        $value = [\n            'year' => $year,\n            'month' => str_pad($month, 2, '0', STR_PAD_LEFT),\n            'day' => str_pad($day, 2, '0', STR_PAD_LEFT)\n        ];\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = $value;\n\n        /** \u83b7\u53d6\u5f53\u524d\u8def\u7531,\u8fc7\u6ee4\u6389\u7ffb\u9875\u60c5\u51b5 */\n        $currentRoute = str_replace('_page', '', $this->parameter->type);\n\n        /** RSS 2.0 */\n        $this->feedUrl = Router::url($currentRoute, $value, $this->options->feedUrl);\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = Router::url($currentRoute, $value, $this->options->feedRssUrl);\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = Router::url($currentRoute, $value, $this->options->feedAtomUrl);\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = Router::url($currentRoute, $value, $this->options->index);\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->dateHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u641c\u7d22\n     *\n     * @access private\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @return void\n     */\n    private function searchHandle(Query $select, &$hasPushed)\n    {\n        /** \u589e\u52a0\u81ea\u5b9a\u4e49\u641c\u7d22\u5f15\u64ce\u63a5\u53e3 */\n        //~ fix issue 40\n        $keywords = $this->request->filter('url', 'search')->keywords;\n        self::pluginHandle()->trigger($hasPushed)->search($keywords, $this);\n\n        if (!$hasPushed) {\n            $searchQuery = '%' . str_replace(' ', '%', $keywords) . '%';\n\n            /** \u641c\u7d22\u65e0\u6cd5\u8fdb\u5165\u9690\u79c1\u9879\u4fdd\u62a4\u5f52\u6863 */\n            if ($this->user->hasLogin()) {\n                //~ fix issue 941\n                $select->where(\"table.contents.password IS NULL\n                 OR table.contents.password = '' OR table.contents.authorId = ?\", $this->user->uid);\n            } else {\n                $select->where(\"table.contents.password IS NULL OR table.contents.password = ''\");\n            }\n\n            $op = $this->db->getAdapter()->getDriver() == 'pgsql' ? 'ILIKE' : 'LIKE';\n\n            $select->where(\"table.contents.title {$op} ? OR table.contents.text {$op} ?\", $searchQuery, $searchQuery)\n                ->where('table.contents.type = ?', 'post');\n        }\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $keywords;\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = ['keywords' => urlencode($keywords)];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = Router::url('search', ['keywords' => $keywords], $this->options->feedUrl);\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = Router::url('search', ['keywords' => $keywords], $this->options->feedAtomUrl);\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = Router::url('search', ['keywords' => $keywords], $this->options->feedAtomUrl);\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $keywords;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'search';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $keywords;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = Router::url('search', ['keywords' => $keywords], $this->options->index);\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->searchHandle($this, $select);\n    }\n}\n", "<?php\n\nnamespace Widget;\n\nuse Typecho\\Common;\nuse Widget\\Plugins\\Config;\nuse Widget\\Themes\\Files;\nuse Widget\\Users\\Edit as UsersEdit;\nuse Widget\\Contents\\Attachment\\Edit as AttachmentEdit;\nuse Widget\\Contents\\Post\\Edit as PostEdit;\nuse Widget\\Contents\\Page\\Edit as PageEdit;\nuse Widget\\Contents\\Post\\Admin as PostAdmin;\nuse Widget\\Comments\\Admin as CommentsAdmin;\nuse Widget\\Metas\\Category\\Admin as CategoryAdmin;\nuse Widget\\Metas\\Category\\Edit as CategoryEdit;\nuse Widget\\Metas\\Tag\\Admin as TagAdmin;\n\nif (!defined('__TYPECHO_ROOT_DIR__')) {\n    exit;\n}\n\n/**\n * \u540e\u53f0\u83dc\u5355\u663e\u793a\n *\n * @package Widget\n */\nclass Menu extends Base\n{\n    /**\n     * \u5f53\u524d\u83dc\u5355\u6807\u9898\n     * @var string\n     */\n    public $title;\n\n    /**\n     * \u5f53\u524d\u589e\u52a0\u9879\u76ee\u94fe\u63a5\n     * @var string\n     */\n    public $addLink;\n\n    /**\n     * \u7236\u83dc\u5355\u5217\u8868\n     *\n     * @var array\n     */\n    private $menu = [];\n\n    /**\n     * \u5f53\u524d\u7236\u83dc\u5355\n     *\n     * @var integer\n     */\n    private $currentParent = 1;\n\n    /**\n     * \u5f53\u524d\u5b50\u83dc\u5355\n     *\n     * @var integer\n     */\n    private $currentChild = 0;\n\n    /**\n     * \u5f53\u524d\u9875\u9762\n     *\n     * @var string\n     */\n    private $currentUrl;\n\n    /**\n     * \u6267\u884c\u51fd\u6570,\u521d\u59cb\u5316\u83dc\u5355\n     */\n    public function execute()\n    {\n        $parentNodes = [null, _t('\u63a7\u5236\u53f0'), _t('\u64b0\u5199'), _t('\u7ba1\u7406'), _t('\u8bbe\u7f6e')];\n\n        $childNodes = [\n            [\n                [_t('\u767b\u5f55'), _t('\u767b\u5f55\u5230%s', $this->options->title), 'login.php', 'visitor'],\n                [_t('\u6ce8\u518c'), _t('\u6ce8\u518c\u5230%s', $this->options->title), 'register.php', 'visitor']\n            ],\n            [\n                [_t('\u6982\u8981'), _t('\u7f51\u7ad9\u6982\u8981'), 'index.php', 'subscriber'],\n                [_t('\u4e2a\u4eba\u8bbe\u7f6e'), _t('\u4e2a\u4eba\u8bbe\u7f6e'), 'profile.php', 'subscriber'],\n                [_t('\u63d2\u4ef6'), _t('\u63d2\u4ef6\u7ba1\u7406'), 'plugins.php', 'administrator'],\n                [[Config::class, 'getMenuTitle'], [Config::class, 'getMenuTitle'], 'options-plugin.php?config=', 'administrator', true],\n                [_t('\u5916\u89c2'), _t('\u7f51\u7ad9\u5916\u89c2'), 'themes.php', 'administrator'],\n                [[Files::class, 'getMenuTitle'], [Files::class, 'getMenuTitle'], 'theme-editor.php', 'administrator', true],\n                [_t('\u8bbe\u7f6e\u5916\u89c2'), _t('\u8bbe\u7f6e\u5916\u89c2'), 'options-theme.php', 'administrator', true],\n                [_t('\u5907\u4efd'), _t('\u5907\u4efd'), 'backup.php', 'administrator'],\n                [_t('\u5347\u7ea7'), _t('\u5347\u7ea7\u7a0b\u5e8f'), 'upgrade.php', 'administrator', true],\n                [_t('\u6b22\u8fce'), _t('\u6b22\u8fce\u4f7f\u7528'), 'welcome.php', 'subscriber', true]\n            ],\n            [\n                [_t('\u64b0\u5199\u6587\u7ae0'), _t('\u64b0\u5199\u65b0\u6587\u7ae0'), 'write-post.php', 'contributor'],\n                [[PostEdit::class, 'getMenuTitle'], [PostEdit::class, 'getMenuTitle'], 'write-post.php?cid=', 'contributor', true],\n                [_t('\u521b\u5efa\u9875\u9762'), _t('\u521b\u5efa\u65b0\u9875\u9762'), 'write-page.php', 'editor'],\n                [[PageEdit::class, 'getMenuTitle'], [PageEdit::class, 'getMenuTitle'], 'write-page.php?cid=', 'editor', true],\n            ],\n            [\n                [_t('\u6587\u7ae0'), _t('\u7ba1\u7406\u6587\u7ae0'), 'manage-posts.php', 'contributor', false, 'write-post.php'],\n                [[PostAdmin::class, 'getMenuTitle'], [PostAdmin::class, 'getMenuTitle'], 'manage-posts.php?uid=', 'contributor', true],\n                [_t('\u72ec\u7acb\u9875\u9762'), _t('\u7ba1\u7406\u72ec\u7acb\u9875\u9762'), 'manage-pages.php', 'editor', false, 'write-page.php'],\n                [_t('\u8bc4\u8bba'), _t('\u7ba1\u7406\u8bc4\u8bba'), 'manage-comments.php', 'contributor'],\n                [[CommentsAdmin::class, 'getMenuTitle'], [CommentsAdmin::class, 'getMenuTitle'], 'manage-comments.php?cid=', 'contributor', true],\n                [_t('\u5206\u7c7b'), _t('\u7ba1\u7406\u5206\u7c7b'), 'manage-categories.php', 'editor', false, 'category.php'],\n                [_t('\u65b0\u589e\u5206\u7c7b'), _t('\u65b0\u589e\u5206\u7c7b'), 'category.php', 'editor', true],\n                [[CategoryAdmin::class, 'getMenuTitle'], [CategoryAdmin::class, 'getMenuTitle'], 'manage-categories.php?parent=', 'editor', true, [CategoryAdmin::class, 'getAddLink']],\n                [[CategoryEdit::class, 'getMenuTitle'], [CategoryEdit::class, 'getMenuTitle'], 'category.php?mid=', 'editor', true],\n                [[CategoryEdit::class, 'getMenuTitle'], [CategoryEdit::class, 'getMenuTitle'], 'category.php?parent=', 'editor', true],\n                [_t('\u6807\u7b7e'), _t('\u7ba1\u7406\u6807\u7b7e'), 'manage-tags.php', 'editor'],\n                [[TagAdmin::class, 'getMenuTitle'], [TagAdmin::class, 'getMenuTitle'], 'manage-tags.php?mid=', 'editor', true],\n                [_t('\u6587\u4ef6'), _t('\u7ba1\u7406\u6587\u4ef6'), 'manage-medias.php', 'editor'],\n                [[AttachmentEdit::class, 'getMenuTitle'], [AttachmentEdit::class, 'getMenuTitle'], 'media.php?cid=', 'contributor', true],\n                [_t('\u7528\u6237'), _t('\u7ba1\u7406\u7528\u6237'), 'manage-users.php', 'administrator', false, 'user.php'],\n                [_t('\u65b0\u589e\u7528\u6237'), _t('\u65b0\u589e\u7528\u6237'), 'user.php', 'administrator', true],\n                [[UsersEdit::class, 'getMenuTitle'], [UsersEdit::class, 'getMenuTitle'], 'user.php?uid=', 'administrator', true],\n            ],\n            [\n                [_t('\u57fa\u672c'), _t('\u57fa\u672c\u8bbe\u7f6e'), 'options-general.php', 'administrator'],\n                [_t('\u8bc4\u8bba'), _t('\u8bc4\u8bba\u8bbe\u7f6e'), 'options-discussion.php', 'administrator'],\n                [_t('\u9605\u8bfb'), _t('\u9605\u8bfb\u8bbe\u7f6e'), 'options-reading.php', 'administrator'],\n                [_t('\u6c38\u4e45\u94fe\u63a5'), _t('\u6c38\u4e45\u94fe\u63a5\u8bbe\u7f6e'), 'options-permalink.php', 'administrator'],\n            ]\n        ];\n\n        /** \u83b7\u53d6\u6269\u5c55\u83dc\u5355 */\n        $panelTable = unserialize($this->options->panelTable);\n        $extendingParentMenu = empty($panelTable['parent']) ? [] : $panelTable['parent'];\n        $extendingChildMenu = empty($panelTable['child']) ? [] : $panelTable['child'];\n        $currentUrl = $this->request->makeUriByRequest();\n        $adminUrl = $this->options->adminUrl;\n        $menu = [];\n        $defaultChildeNode = [null, null, null, 'administrator', false, null];\n\n        $currentUrlParts = parse_url($currentUrl);\n        $currentUrlParams = [];\n        if (!empty($currentUrlParts['query'])) {\n            parse_str($currentUrlParts['query'], $currentUrlParams);\n        }\n\n        if ('/' == $currentUrlParts['path'][strlen($currentUrlParts['path']) - 1]) {\n            $currentUrlParts['path'] .= 'index.php';\n        }\n\n        foreach ($extendingParentMenu as $key => $val) {\n            $parentNodes[10 + $key] = $val;\n        }\n\n        foreach ($extendingChildMenu as $key => $val) {\n            $childNodes[$key] = array_merge($childNodes[$key] ?? [], $val);\n        }\n\n        foreach ($parentNodes as $key => $parentNode) {\n            // this is a simple struct than before\n            $children = [];\n            $showedChildrenCount = 0;\n            $firstUrl = null;\n\n            foreach ($childNodes[$key] as $inKey => $childNode) {\n                // magic merge\n                $childNode += $defaultChildeNode;\n                [$name, $title, $url, $access] = $childNode;\n\n                $hidden = $childNode[4] ?? false;\n                $addLink = $childNode[5] ?? null;\n\n                // \u4fdd\u5b58\u6700\u539f\u59cb\u7684hidden\u4fe1\u606f\n                $orgHidden = $hidden;\n\n                // parse url\n                $url = Common::url($url, $adminUrl);\n\n                // compare url\n                $urlParts = parse_url($url);\n                $urlParams = [];\n                if (!empty($urlParts['query'])) {\n                    parse_str($urlParts['query'], $urlParams);\n                }\n\n                $validate = true;\n                if ($urlParts['path'] != $currentUrlParts['path']) {\n                    $validate = false;\n                } else {\n                    foreach ($urlParams as $paramName => $paramValue) {\n                        if (!isset($currentUrlParams[$paramName])) {\n                            $validate = false;\n                            break;\n                        }\n                    }\n                }\n\n                if (\n                    $validate\n                    && basename($urlParts['path']) == 'extending.php'\n                    && !empty($currentUrlParams['panel']) && !empty($urlParams['panel'])\n                    && $urlParams['panel'] != $currentUrlParams['panel']\n                ) {\n                    $validate = false;\n                }\n\n                if ($hidden && $validate) {\n                    $hidden = false;\n                }\n\n                if (!$hidden && !$this->user->pass($access, true)) {\n                    $hidden = true;\n                }\n\n                if (!$hidden) {\n                    $showedChildrenCount++;\n\n                    if (empty($firstUrl)) {\n                        $firstUrl = $url;\n                    }\n\n                    if (is_array($name)) {\n                        [$widget, $method] = $name;\n                        $name = self::widget($widget)->$method();\n                    }\n\n                    if (is_array($title)) {\n                        [$widget, $method] = $title;\n                        $title = self::widget($widget)->$method();\n                    }\n\n                    if (is_array($addLink)) {\n                        [$widget, $method] = $addLink;\n                        $addLink = self::widget($widget)->$method();\n                    }\n                }\n\n                if ($validate) {\n                    if ('visitor' != $access) {\n                        $this->user->pass($access);\n                    }\n\n                    $this->currentParent = $key;\n                    $this->currentChild = $inKey;\n                    $this->title = $title;\n                    $this->addLink = $addLink ? Common::url($addLink, $adminUrl) : null;\n                }\n\n                $children[$inKey] = [\n                    $name,\n                    $title,\n                    $url,\n                    $access,\n                    $hidden,\n                    $addLink,\n                    $orgHidden\n                ];\n            }\n\n            $menu[$key] = [$parentNode, $showedChildrenCount > 0, $firstUrl, $children];\n        }\n\n        $this->menu = $menu;\n        $this->currentUrl = $currentUrl;\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u83dc\u5355\n     *\n     * @return array\n     */\n    public function getCurrentMenu(): ?array\n    {\n        return $this->currentParent > 0 ? $this->menu[$this->currentParent][3][$this->currentChild] : null;\n    }\n\n    /**\n     * \u8f93\u51fa\u7236\u7ea7\u83dc\u5355\n     */\n    public function output($class = 'focus', $childClass = 'focus')\n    {\n        foreach ($this->menu as $key => $node) {\n            if (!$node[1] || !$key) {\n                continue;\n            }\n\n            echo \"<ul class=\\\"root\" . ($key == $this->currentParent ? ' ' . $class : null)\n                . \"\\\"><li class=\\\"parent\\\"><a href=\\\"{$node[2]}\\\">{$node[0]}</a>\"\n                . \"</li><ul class=\\\"child\\\">\";\n\n            $last = 0;\n            foreach ($node[3] as $inKey => $inNode) {\n                if (!$inNode[4]) {\n                    $last = $inKey;\n                }\n            }\n\n            foreach ($node[3] as $inKey => $inNode) {\n                if ($inNode[4]) {\n                    continue;\n                }\n\n                $classes = [];\n                if ($key == $this->currentParent && $inKey == $this->currentChild) {\n                    $classes[] = $childClass;\n                } elseif ($inNode[6]) {\n                    continue;\n                }\n\n                if ($inKey == $last) {\n                    $classes[] = 'last';\n                }\n\n                echo \"<li\" . (!empty($classes) ? ' class=\"' . implode(' ', $classes) . '\"' : null) . \"><a href=\\\"\"\n                    . ($key == $this->currentParent && $inKey == $this->currentChild ? $this->currentUrl : $inNode[2])\n                    . \"\\\">{$inNode[0]}</a></li>\";\n            }\n\n            echo \"</ul></ul>\";\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Widget;\n\nuse Typecho\\Common;\nuse Typecho\\Config;\nuse Typecho\\Cookie;\nuse Typecho\\Db;\nuse Typecho\\Db\\Query;\nuse Typecho\\Feed;\nuse Typecho\\Router;\nuse Typecho\\Widget\\Exception as WidgetException;\nuse Typecho\\Widget\\Helper\\PageNavigator;\nuse Typecho\\Widget\\Helper\\PageNavigator\\Classic;\nuse Typecho\\Widget\\Helper\\PageNavigator\\Box;\nuse Widget\\Base\\Contents;\nuse Widget\\Base\\Metas;\nuse Widget\\Comments\\Ping;\nuse Widget\\Comments\\Recent;\nuse Widget\\Contents\\Attachment\\Related;\nuse Widget\\Contents\\Related\\Author;\nuse Widget\\Metas\\Category\\Rows;\n\nif (!defined('__TYPECHO_ROOT_DIR__')) {\n    exit;\n}\n\n/**\n * \u5185\u5bb9\u7684\u6587\u7ae0\u57fa\u7c7b\n * \u5b9a\u4e49\u7684css\u7c7b\n * p.more:\u9605\u8bfb\u5168\u6587\u94fe\u63a5\u6240\u5c5e\u6bb5\u843d\n *\n * @package Widget\n */\nclass Archive extends Contents\n{\n    /**\n     * \u8c03\u7528\u7684\u98ce\u683c\u6587\u4ef6\n     *\n     * @var string\n     */\n    private $themeFile;\n\n    /**\n     * \u98ce\u683c\u76ee\u5f55\n     *\n     * @var string\n     */\n    private $themeDir;\n\n    /**\n     * \u5206\u9875\u8ba1\u7b97\u5bf9\u8c61\n     *\n     * @var Query\n     */\n    private $countSql;\n\n    /**\n     * \u6240\u6709\u6587\u7ae0\u4e2a\u6570\n     *\n     * @var integer\n     */\n    private $total = false;\n\n    /**\n     * \u6807\u8bb0\u662f\u5426\u4e3a\u4ece\u5916\u90e8\u8c03\u7528\n     *\n     * @var boolean\n     */\n    private $invokeFromOutside = false;\n\n    /**\n     * \u662f\u5426\u7531\u805a\u5408\u8c03\u7528\n     *\n     * @var boolean\n     */\n    private $invokeByFeed = false;\n\n    /**\n     * \u5f53\u524d\u9875\n     *\n     * @var integer\n     */\n    private $currentPage;\n\n    /**\n     * \u751f\u6210\u5206\u9875\u7684\u5185\u5bb9\n     *\n     * @var array\n     */\n    private $pageRow = [];\n\n    /**\n     * \u805a\u5408\u5668\u5bf9\u8c61\n     *\n     * @var Feed\n     */\n    private $feed;\n\n    /**\n     * RSS 2.0\u805a\u5408\u5730\u5740\n     *\n     * @var string\n     */\n    private $feedUrl;\n\n    /**\n     * RSS 1.0\u805a\u5408\u5730\u5740\n     *\n     * @var string\n     */\n    private $feedRssUrl;\n\n    /**\n     * ATOM \u805a\u5408\u5730\u5740\n     *\n     * @var string\n     */\n    private $feedAtomUrl;\n\n    /**\n     * \u672c\u9875\u5173\u952e\u5b57\n     *\n     * @var string\n     */\n    private $keywords;\n\n    /**\n     * \u672c\u9875\u63cf\u8ff0\n     *\n     * @var string\n     */\n    private $description;\n\n    /**\n     * \u805a\u5408\u7c7b\u578b\n     *\n     * @var string\n     */\n    private $feedType;\n\n    /**\n     * \u805a\u5408\u7c7b\u578b\n     *\n     * @var string\n     */\n    private $feedContentType;\n\n    /**\n     * \u5f53\u524dfeed\u5730\u5740\n     *\n     * @var string\n     */\n    private $currentFeedUrl;\n\n    /**\n     * \u5f52\u6863\u6807\u9898\n     *\n     * @var string\n     */\n    private $archiveTitle = null;\n\n    /**\n     * \u5f52\u6863\u5730\u5740\n     *\n     * @var string|null\n     */\n    private $archiveUrl = null;\n\n    /**\n     * \u5f52\u6863\u7c7b\u578b\n     *\n     * @var string\n     */\n    private $archiveType = 'index';\n\n    /**\n     * \u662f\u5426\u4e3a\u5355\u4e00\u5f52\u6863\n     *\n     * @var string\n     */\n    private $archiveSingle = false;\n\n    /**\n     * \u662f\u5426\u4e3a\u81ea\u5b9a\u4e49\u9996\u9875, \u4e3b\u8981\u4e3a\u4e86\u6807\u8bb0\u81ea\u5b9a\u4e49\u9996\u9875\u7684\u60c5\u51b5\n     *\n     * (default value: false)\n     *\n     * @var boolean\n     * @access private\n     */\n    private $makeSinglePageAsFrontPage = false;\n\n    /**\n     * \u5f52\u6863\u7f29\u7565\u540d\n     *\n     * @access private\n     * @var string\n     */\n    private $archiveSlug;\n\n    /**\n     * \u8bbe\u7f6e\u5206\u9875\u5bf9\u8c61\n     *\n     * @access private\n     * @var PageNavigator\n     */\n    private $pageNav;\n\n    /**\n     * @param Config $parameter\n     * @throws \\Exception\n     */\n    protected function initParameter(Config $parameter)\n    {\n        $parameter->setDefault([\n            'pageSize'       => $this->options->pageSize,\n            'type'           => null,\n            'checkPermalink' => true,\n            'preview'        => false\n        ]);\n\n        /** \u7528\u4e8e\u5224\u65ad\u662f\u8def\u7531\u8c03\u7528\u8fd8\u662f\u5916\u90e8\u8c03\u7528 */\n        if (null == $parameter->type) {\n            $parameter->type = Router::$current;\n        } else {\n            $this->invokeFromOutside = true;\n        }\n\n        /** \u7528\u4e8e\u5224\u65ad\u662f\u5426\u4e3afeed\u8c03\u7528 */\n        if ($parameter->isFeed) {\n            $this->invokeByFeed = true;\n        }\n\n        /** \u521d\u59cb\u5316\u76ae\u80a4\u8def\u5f84 */\n        $this->themeDir = rtrim($this->options->themeFile($this->options->theme), '/') . '/';\n\n        /** \u5904\u7406feed\u6a21\u5f0f **/\n        if ('feed' == $parameter->type) {\n            $this->currentFeedUrl = '';\n\n            /** \u5224\u65ad\u805a\u5408\u7c7b\u578b */\n            switch (true) {\n                case 0 === strpos($this->request->feed, '/rss/') || '/rss' == $this->request->feed:\n                    /** \u5982\u679c\u662fRSS1\u6807\u51c6 */\n                    $this->request->feed = substr($this->request->feed, 4);\n                    $this->feedType = Feed::RSS1;\n                    $this->currentFeedUrl = $this->options->feedRssUrl;\n                    $this->feedContentType = 'application/rdf+xml';\n                    break;\n                case 0 === strpos($this->request->feed, '/atom/') || '/atom' == $this->request->feed:\n                    /** \u5982\u679c\u662fATOM\u6807\u51c6 */\n                    $this->request->feed = substr($this->request->feed, 5);\n                    $this->feedType = Feed::ATOM1;\n                    $this->currentFeedUrl = $this->options->feedAtomUrl;\n                    $this->feedContentType = 'application/atom+xml';\n                    break;\n                default:\n                    $this->feedType = Feed::RSS2;\n                    $this->currentFeedUrl = $this->options->feedUrl;\n                    $this->feedContentType = 'application/rss+xml';\n                    break;\n            }\n\n            $feedQuery = $this->request->feed;\n            //$parameter->type = Router::$current;\n            //$this->request->setParams($params);\n\n            if ('/comments/' == $feedQuery || '/comments' == $feedQuery) {\n                /** \u4e13\u4e3afeed\u4f7f\u7528\u7684hack */\n                $parameter->type = 'comments';\n                $this->options->feedUrl = $this->options->commentsFeedUrl;\n                $this->options->feedRssUrl = $this->options->commentsFeedRssUrl;\n                $this->options->feedAtomUrl = $this->options->commentsFeedAtomUrl;\n            } else {\n                $matched = Router::match($this->request->feed, 'pageSize=10&isFeed=1');\n                if ($matched instanceof Archive) {\n                    $this->import($matched);\n                } else {\n                    throw new WidgetException(_t('\u805a\u5408\u9875\u4e0d\u5b58\u5728'), 404);\n                }\n            }\n\n            /** \u521d\u59cb\u5316\u805a\u5408\u5668 */\n            $this->setFeed(new Feed(Common::VERSION, $this->feedType, $this->options->charset, _t('zh-CN')));\n\n            /** \u9ed8\u8ba4\u8f93\u51fa10\u5219\u6587\u7ae0 **/\n            $parameter->pageSize = 10;\n        }\n    }\n\n    /**\n     * \u589e\u52a0\u6807\u9898\n     * @param string $archiveTitle \u6807\u9898\n     */\n    public function addArchiveTitle(string $archiveTitle)\n    {\n        $current = $this->getArchiveTitle();\n        $current[] = $archiveTitle;\n        $this->setArchiveTitle($current);\n    }\n\n    /**\n     * @return string\n     */\n    public function getArchiveTitle(): ?string\n    {\n        return $this->archiveTitle;\n    }\n\n    /**\n     * @param string $archiveTitle the $archiveTitle to set\n     */\n    public function setArchiveTitle(string $archiveTitle)\n    {\n        $this->archiveTitle = $archiveTitle;\n    }\n\n    /**\n     * \u83b7\u53d6\u5206\u9875\u5bf9\u8c61\n     * @return array\n     */\n    public function getPageRow(): array\n    {\n        return $this->pageRow;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5206\u9875\u5bf9\u8c61\n     * @param array $pageRow\n     */\n    public function setPageRow(array $pageRow)\n    {\n        $this->pageRow = $pageRow;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveSlug(): ?string\n    {\n        return $this->archiveSlug;\n    }\n\n    /**\n     * @param string $archiveSlug the $archiveSlug to set\n     */\n    public function setArchiveSlug(string $archiveSlug)\n    {\n        $this->archiveSlug = $archiveSlug;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveSingle(): ?string\n    {\n        return $this->archiveSingle;\n    }\n\n    /**\n     * @param string $archiveSingle the $archiveSingle to set\n     */\n    public function setArchiveSingle(string $archiveSingle)\n    {\n        $this->archiveSingle = $archiveSingle;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveType(): ?string\n    {\n        return $this->archiveType;\n    }\n\n    /**\n     * @param string $archiveType the $archiveType to set\n     */\n    public function setArchiveType(string $archiveType)\n    {\n        $this->archiveType = $archiveType;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getArchiveUrl(): ?string\n    {\n        return $this->archiveUrl;\n    }\n\n    /**\n     * @param string|null $archiveUrl\n     */\n    public function setArchiveUrl(?string $archiveUrl): void\n    {\n        $this->archiveUrl = $archiveUrl;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getFeedType(): ?string\n    {\n        return $this->feedType;\n    }\n\n    /**\n     * @param string $feedType the $feedType to set\n     */\n    public function setFeedType(string $feedType)\n    {\n        $this->feedType = $feedType;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getDescription(): ?string\n    {\n        return $this->description;\n    }\n\n    /**\n     * @param string $description the $description to set\n     */\n    public function setDescription(string $description)\n    {\n        $this->description = $description;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getKeywords(): ?string\n    {\n        return $this->keywords;\n    }\n\n    /**\n     * @param string $keywords the $keywords to set\n     */\n    public function setKeywords(string $keywords)\n    {\n        $this->keywords = $keywords;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFeedAtomUrl(): string\n    {\n        return $this->feedAtomUrl;\n    }\n\n    /**\n     * @param string $feedAtomUrl the $feedAtomUrl to set\n     */\n    public function setFeedAtomUrl(string $feedAtomUrl)\n    {\n        $this->feedAtomUrl = $feedAtomUrl;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFeedRssUrl(): string\n    {\n        return $this->feedRssUrl;\n    }\n\n    /**\n     * @param string $feedRssUrl the $feedRssUrl to set\n     */\n    public function setFeedRssUrl(string $feedRssUrl)\n    {\n        $this->feedRssUrl = $feedRssUrl;\n    }\n\n    /**\n     * @return string\n     */\n    public function getFeedUrl(): string\n    {\n        return $this->feedUrl;\n    }\n\n    /**\n     * @param string $feedUrl the $feedUrl to set\n     */\n    public function setFeedUrl(string $feedUrl)\n    {\n        $this->feedUrl = $feedUrl;\n    }\n\n    /**\n     * @return Feed\n     */\n    public function getFeed(): Feed\n    {\n        return $this->feed;\n    }\n\n    /**\n     * @param Feed $feed the $feed to set\n     */\n    public function setFeed(Feed $feed)\n    {\n        $this->feed = $feed;\n    }\n\n    /**\n     * @return Query|null\n     */\n    public function getCountSql(): ?Query\n    {\n        return $this->countSql;\n    }\n\n    /**\n     * @param Query $countSql the $countSql to set\n     */\n    public function setCountSql($countSql)\n    {\n        $this->countSql = $countSql;\n    }\n\n    /**\n     * @return int\n     */\n    public function getCurrentPage(): int\n    {\n        return $this->currentPage;\n    }\n\n    /**\n     * _currentPage\n     *\n     * @return int\n     */\n    public function ____currentPage(): int\n    {\n        return $this->getCurrentPage();\n    }\n\n    /**\n     * \u83b7\u53d6\u9875\u6570\n     *\n     * @return integer\n     */\n    public function getTotalPage(): int\n    {\n        return ceil($this->getTotal() / $this->parameter->pageSize);\n    }\n\n    /**\n     * @return int\n     * @throws Db\\Exception\n     */\n    public function getTotal(): int\n    {\n        if (false === $this->total) {\n            $this->total = $this->size($this->countSql);\n        }\n\n        return $this->total;\n    }\n\n    /**\n     * @param int $total the $total to set\n     */\n    public function setTotal(int $total)\n    {\n        $this->total = $total;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getThemeFile(): ?string\n    {\n        return $this->themeFile;\n    }\n\n    /**\n     * @param string $themeFile the $themeFile to set\n     */\n    public function setThemeFile(string $themeFile)\n    {\n        $this->themeFile = $themeFile;\n    }\n\n    /**\n     * @return string|null\n     */\n    public function getThemeDir(): ?string\n    {\n        return $this->themeDir;\n    }\n\n    /**\n     * @param string $themeDir the $themeDir to set\n     */\n    public function setThemeDir(string $themeDir)\n    {\n        $this->themeDir = $themeDir;\n    }\n\n    /**\n     * \u6267\u884c\u51fd\u6570\n     */\n    public function execute()\n    {\n        /** \u907f\u514d\u91cd\u590d\u53d6\u6570\u636e */\n        if ($this->have()) {\n            return;\n        }\n\n        $handles = [\n            'index'              => 'indexHandle',\n            'index_page'         => 'indexHandle',\n            'archive'            => 'archiveEmptyHandle',\n            'archive_page'       => 'archiveEmptyHandle',\n            404                  => 'error404Handle',\n            'single'             => 'singleHandle',\n            'page'               => 'singleHandle',\n            'post'               => 'singleHandle',\n            'attachment'         => 'singleHandle',\n            'comment_page'       => 'singleHandle',\n            'category'           => 'categoryHandle',\n            'category_page'      => 'categoryHandle',\n            'tag'                => 'tagHandle',\n            'tag_page'           => 'tagHandle',\n            'author'             => 'authorHandle',\n            'author_page'        => 'authorHandle',\n            'archive_year'       => 'dateHandle',\n            'archive_year_page'  => 'dateHandle',\n            'archive_month'      => 'dateHandle',\n            'archive_month_page' => 'dateHandle',\n            'archive_day'        => 'dateHandle',\n            'archive_day_page'   => 'dateHandle',\n            'search'             => 'searchHandle',\n            'search_page'        => 'searchHandle'\n        ];\n\n        /** \u5904\u7406\u641c\u7d22\u7ed3\u679c\u8df3\u8f6c */\n        if (isset($this->request->s)) {\n            $filterKeywords = $this->request->filter('search')->get('s');\n\n            /** \u8df3\u8f6c\u5230\u641c\u7d22\u9875 */\n            if (null != $filterKeywords) {\n                $this->response->redirect(\n                    Router::url('search', ['keywords' => urlencode($filterKeywords)], $this->options->index)\n                );\n            }\n        }\n\n        /** \u81ea\u5b9a\u4e49\u9996\u9875\u529f\u80fd */\n        $frontPage = $this->options->frontPage;\n        if (!$this->invokeByFeed && ('index' == $this->parameter->type || 'index_page' == $this->parameter->type)) {\n            //\u663e\u793a\u67d0\u4e2a\u9875\u9762\n            if (0 === strpos($frontPage, 'page:')) {\n                // \u5bf9\u67d0\u4e9b\u53d8\u91cf\u505ahack\n                $this->request->setParam('cid', intval(substr($frontPage, 5)));\n                $this->parameter->type = 'page';\n                $this->makeSinglePageAsFrontPage = true;\n            } elseif (0 === strpos($frontPage, 'file:')) {\n                // \u663e\u793a\u67d0\u4e2a\u6587\u4ef6\n                $this->setThemeFile(substr($frontPage, 5));\n                return;\n            }\n        }\n\n        if ('recent' != $frontPage && $this->options->frontArchive) {\n            $handles['archive'] = 'indexHandle';\n            $handles['archive_page'] = 'indexHandle';\n            $this->archiveType = 'front';\n        }\n\n        /** \u521d\u59cb\u5316\u5206\u9875\u53d8\u91cf */\n        $this->currentPage = $this->request->filter('int')->page ?? 1;\n        $hasPushed = false;\n\n        /** select\u521d\u59cb\u5316 */\n        $select = self::pluginHandle()->trigger($selectPlugged)->select($this);\n\n        /** \u5b9a\u65f6\u53d1\u5e03\u529f\u80fd */\n        if (!$selectPlugged) {\n            if ($this->parameter->preview) {\n                $select = $this->select();\n            } else {\n                if ('post' == $this->parameter->type || 'page' == $this->parameter->type) {\n                    if ($this->user->hasLogin()) {\n                        $select = $this->select()->where(\n                            'table.contents.status = ? OR table.contents.status = ? \n                                OR (table.contents.status = ? AND table.contents.authorId = ?)',\n                            'publish',\n                            'hidden',\n                            'private',\n                            $this->user->uid\n                        );\n                    } else {\n                        $select = $this->select()->where(\n                            'table.contents.status = ? OR table.contents.status = ?',\n                            'publish',\n                            'hidden'\n                        );\n                    }\n                } else {\n                    if ($this->user->hasLogin()) {\n                        $select = $this->select()->where(\n                            'table.contents.status = ? OR (table.contents.status = ? AND table.contents.authorId = ?)',\n                            'publish',\n                            'private',\n                            $this->user->uid\n                        );\n                    } else {\n                        $select = $this->select()->where('table.contents.status = ?', 'publish');\n                    }\n                }\n                $select->where('table.contents.created < ?', $this->options->time);\n            }\n        }\n\n        /** handle\u521d\u59cb\u5316 */\n        self::pluginHandle()->handleInit($this, $select);\n\n        /** \u521d\u59cb\u5316\u5176\u5b83\u53d8\u91cf */\n        $this->feedUrl = $this->options->feedUrl;\n        $this->feedRssUrl = $this->options->feedRssUrl;\n        $this->feedAtomUrl = $this->options->feedAtomUrl;\n        $this->keywords = $this->options->keywords;\n        $this->description = $this->options->description;\n        $this->archiveUrl = $this->options->siteUrl;\n\n        if (isset($handles[$this->parameter->type])) {\n            $handle = $handles[$this->parameter->type];\n            $this->{$handle}($select, $hasPushed);\n        } else {\n            $hasPushed = self::pluginHandle()->handle($this->parameter->type, $this, $select);\n        }\n\n        /** \u521d\u59cb\u5316\u76ae\u80a4\u51fd\u6570 */\n        $functionsFile = $this->themeDir . 'functions.php';\n        if (\n            (!$this->invokeFromOutside || $this->parameter->type == 404 || $this->parameter->preview)\n            && file_exists($functionsFile)\n        ) {\n            require_once $functionsFile;\n            if (function_exists('themeInit')) {\n                themeInit($this);\n            }\n        }\n\n        /** \u5982\u679c\u5df2\u7ecf\u63d0\u524d\u538b\u5165\u5219\u76f4\u63a5\u8fd4\u56de */\n        if ($hasPushed) {\n            return;\n        }\n\n        /** \u4ec5\u8f93\u51fa\u6587\u7ae0 */\n        $this->countSql = clone $select;\n\n        $select->order('table.contents.created', Db::SORT_DESC)\n            ->page($this->currentPage, $this->parameter->pageSize);\n        $this->query($select);\n\n        /** \u5904\u7406\u8d85\u51fa\u5206\u9875\u7684\u60c5\u51b5 */\n        if ($this->currentPage > 1 && !$this->have()) {\n            throw new WidgetException(_t('\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u5b58\u5728'), 404);\n        }\n    }\n\n    /**\n     * \u91cd\u8f7dselect\n     *\n     * @return Query\n     * @throws Db\\Exception\n     */\n    public function select(): Query\n    {\n        if ($this->invokeByFeed) {\n            // \u5bf9feed\u8f93\u51fa\u52a0\u5165\u9650\u5236\u6761\u4ef6\n            return parent::select()->where('table.contents.allowFeed = ?', 1)\n                ->where(\"table.contents.password IS NULL OR table.contents.password = ''\");\n        } else {\n            return parent::select();\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u6587\u7ae0\u5185\u5bb9\n     *\n     * @param string $more \u6587\u7ae0\u622a\u53d6\u540e\u7f00\n     */\n    public function content($more = null)\n    {\n        parent::content($this->is('single') ? false : $more);\n    }\n\n    /**\n     * \u8f93\u51fa\u5206\u9875\n     *\n     * @param string $prev \u4e0a\u4e00\u9875\u6587\u5b57\n     * @param string $next \u4e0b\u4e00\u9875\u6587\u5b57\n     * @param int $splitPage \u5206\u5272\u8303\u56f4\n     * @param string $splitWord \u5206\u5272\u5b57\u7b26\n     * @param string|array $template \u5c55\u73b0\u914d\u7f6e\u4fe1\u606f\n     * @throws Db\\Exception|WidgetException\n     */\n    public function pageNav(\n        string $prev = '&laquo;',\n        string $next = '&raquo;',\n        int $splitPage = 3,\n        string $splitWord = '...',\n        $template = ''\n    ) {\n        if ($this->have()) {\n            $hasNav = false;\n            $default = [\n                'wrapTag'   => 'ol',\n                'wrapClass' => 'page-navigator'\n            ];\n\n            if (is_string($template)) {\n                parse_str($template, $config);\n            } else {\n                $config = $template ?: [];\n            }\n\n            $template = array_merge($default, $config);\n            $total = $this->getTotal();\n            $query = Router::url(\n                $this->parameter->type .\n                (false === strpos($this->parameter->type, '_page') ? '_page' : null),\n                $this->pageRow,\n                $this->options->index\n            );\n\n            self::pluginHandle()->trigger($hasNav)->pageNav(\n                $this->currentPage,\n                $total,\n                $this->parameter->pageSize,\n                $prev,\n                $next,\n                $splitPage,\n                $splitWord,\n                $template,\n                $query\n            );\n\n            if (!$hasNav && $total > $this->parameter->pageSize) {\n                /** \u4f7f\u7528\u76d2\u72b6\u5206\u9875 */\n                $nav = new Box(\n                    $total,\n                    $this->currentPage,\n                    $this->parameter->pageSize,\n                    $query\n                );\n\n                echo '<' . $template['wrapTag'] . (empty($template['wrapClass'])\n                        ? '' : ' class=\"' . $template['wrapClass'] . '\"') . '>';\n                $nav->render($prev, $next, $splitPage, $splitWord, $template);\n                echo '</' . $template['wrapTag'] . '>';\n            }\n        }\n    }\n\n    /**\n     * \u524d\u4e00\u9875\n     *\n     * @param string $word \u94fe\u63a5\u6807\u9898\n     * @param string $page \u9875\u9762\u94fe\u63a5\n     * @throws Db\\Exception|WidgetException\n     */\n    public function pageLink(string $word = '&laquo; Previous Entries', string $page = 'prev')\n    {\n        if ($this->have()) {\n            if (empty($this->pageNav)) {\n                $query = Router::url(\n                    $this->parameter->type .\n                    (false === strpos($this->parameter->type, '_page') ? '_page' : null),\n                    $this->pageRow,\n                    $this->options->index\n                );\n\n                /** \u4f7f\u7528\u76d2\u72b6\u5206\u9875 */\n                $this->pageNav = new Classic(\n                    $this->getTotal(),\n                    $this->currentPage,\n                    $this->parameter->pageSize,\n                    $query\n                );\n            }\n\n            $this->pageNav->{$page}($word);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u8bc4\u8bba\u5f52\u6863\u5bf9\u8c61\n     *\n     * @access public\n     * @return \\Widget\\Comments\\Archive\n     */\n    public function comments(): \\Widget\\Comments\\Archive\n    {\n        $parameter = [\n            'parentId'      => $this->hidden ? 0 : $this->cid,\n            'parentContent' => $this->row,\n            'respondId'     => $this->respondId,\n            'commentPage'   => $this->request->filter('int')->commentPage,\n            'allowComment'  => $this->allow('comment')\n        ];\n\n        return \\Widget\\Comments\\Archive::alloc($parameter);\n    }\n\n    /**\n     * \u83b7\u53d6\u56de\u54cd\u5f52\u6863\u5bf9\u8c61\n     *\n     * @return Ping\n     */\n    public function pings(): Ping\n    {\n        return Ping::alloc([\n            'parentId'      => $this->hidden ? 0 : $this->cid,\n            'parentContent' => $this->row,\n            'allowPing'     => $this->allow('ping')\n        ]);\n    }\n\n    /**\n     * \u83b7\u53d6\u9644\u4ef6\u5bf9\u8c61\n     *\n     * @param integer $limit \u6700\u5927\u4e2a\u6570\n     * @param integer $offset \u91cd\u65b0\n     * @return Related\n     */\n    public function attachments(int $limit = 0, int $offset = 0): Related\n    {\n        return Related::allocWithAlias($this->cid . '-' . uniqid(), [\n            'parentId' => $this->cid,\n            'limit'    => $limit,\n            'offset'   => $offset\n        ]);\n    }\n\n    /**\n     * \u663e\u793a\u4e0b\u4e00\u4e2a\u5185\u5bb9\u7684\u6807\u9898\u94fe\u63a5\n     *\n     * @param string $format \u683c\u5f0f\n     * @param string|null $default \u5982\u679c\u6ca1\u6709\u4e0b\u4e00\u7bc7,\u663e\u793a\u7684\u9ed8\u8ba4\u6587\u5b57\n     * @param array $custom \u5b9a\u5236\u5316\u6837\u5f0f\n     */\n    public function theNext(string $format = '%s', ?string $default = null, array $custom = [])\n    {\n        $content = $this->db->fetchRow($this->select()->where(\n            'table.contents.created > ? AND table.contents.created < ?',\n            $this->created,\n            $this->options->time\n        )\n            ->where('table.contents.status = ?', 'publish')\n            ->where('table.contents.type = ?', $this->type)\n            ->where(\"table.contents.password IS NULL OR table.contents.password = ''\")\n            ->order('table.contents.created', Db::SORT_ASC)\n            ->limit(1));\n\n        if ($content) {\n            $content = $this->filter($content);\n            $default = [\n                'title'    => null,\n                'tagClass' => null\n            ];\n            $custom = array_merge($default, $custom);\n            extract($custom);\n\n            $linkText = empty($title) ? $content['title'] : $title;\n            $linkClass = empty($tagClass) ? '' : 'class=\"' . $tagClass . '\" ';\n            $link = '<a ' . $linkClass . 'href=\"' . $content['permalink']\n                . '\" title=\"' . $content['title'] . '\">' . $linkText . '</a>';\n\n            printf($format, $link);\n        } else {\n            echo $default;\n        }\n    }\n\n    /**\n     * \u663e\u793a\u4e0a\u4e00\u4e2a\u5185\u5bb9\u7684\u6807\u9898\u94fe\u63a5\n     *\n     * @access public\n     * @param string $format \u683c\u5f0f\n     * @param string $default \u5982\u679c\u6ca1\u6709\u4e0a\u4e00\u7bc7,\u663e\u793a\u7684\u9ed8\u8ba4\u6587\u5b57\n     * @param array $custom \u5b9a\u5236\u5316\u6837\u5f0f\n     * @return void\n     */\n    public function thePrev($format = '%s', $default = null, $custom = [])\n    {\n        $content = $this->db->fetchRow($this->select()->where('table.contents.created < ?', $this->created)\n            ->where('table.contents.status = ?', 'publish')\n            ->where('table.contents.type = ?', $this->type)\n            ->where(\"table.contents.password IS NULL OR table.contents.password = ''\")\n            ->order('table.contents.created', Db::SORT_DESC)\n            ->limit(1));\n\n        if ($content) {\n            $content = $this->filter($content);\n            $default = [\n                'title'    => null,\n                'tagClass' => null\n            ];\n            $custom = array_merge($default, $custom);\n            extract($custom);\n\n            $linkText = empty($title) ? $content['title'] : $title;\n            $linkClass = empty($tagClass) ? '' : 'class=\"' . $tagClass . '\" ';\n            $link = '<a ' . $linkClass . 'href=\"' . $content['permalink'] . '\" title=\"' . $content['title'] . '\">' . $linkText . '</a>';\n\n            printf($format, $link);\n        } else {\n            echo $default;\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5173\u8054\u5185\u5bb9\u7ec4\u4ef6\n     *\n     * @param integer $limit \u8f93\u51fa\u6570\u91cf\n     * @param string|null $type \u5173\u8054\u7c7b\u578b\n     * @return Contents\n     */\n    public function related(int $limit = 5, ?string $type = null): Contents\n    {\n        $type = strtolower($type);\n\n        switch ($type) {\n            case 'author':\n                /** \u5982\u679c\u8bbf\u95ee\u6743\u9650\u88ab\u8bbe\u7f6e\u4e3a\u7981\u6b62,\u5219tag\u4f1a\u88ab\u7f6e\u4e3a\u7a7a */\n                return Author::alloc(\n                    ['cid' => $this->cid, 'type' => $this->type, 'author' => $this->author->uid, 'limit' => $limit]\n                );\n            default:\n                /** \u5982\u679c\u8bbf\u95ee\u6743\u9650\u88ab\u8bbe\u7f6e\u4e3a\u7981\u6b62,\u5219tag\u4f1a\u88ab\u7f6e\u4e3a\u7a7a */\n                return \\Widget\\Contents\\Related::alloc(\n                    ['cid' => $this->cid, 'type' => $this->type, 'tags' => $this->tags, 'limit' => $limit]\n                );\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u5934\u90e8\u5143\u6570\u636e\n     *\n     * @param string|null $rule \u89c4\u5219\n     */\n    public function header(?string $rule = null)\n    {\n        $rules = [];\n        $allows = [\n            'description'  => htmlspecialchars($this->description ?? ''),\n            'keywords'     => htmlspecialchars($this->keywords ?? ''),\n            'generator'    => $this->options->generator,\n            'template'     => $this->options->theme,\n            'pingback'     => $this->options->xmlRpcUrl,\n            'xmlrpc'       => $this->options->xmlRpcUrl . '?rsd',\n            'wlw'          => $this->options->xmlRpcUrl . '?wlw',\n            'rss2'         => $this->feedUrl,\n            'rss1'         => $this->feedRssUrl,\n            'commentReply' => 1,\n            'antiSpam'     => 1,\n            'atom'         => $this->feedAtomUrl\n        ];\n\n        /** \u5934\u90e8\u662f\u5426\u8f93\u51fa\u805a\u5408 */\n        $allowFeed = !$this->is('single') || $this->allow('feed') || $this->makeSinglePageAsFrontPage;\n\n        if (!empty($rule)) {\n            parse_str($rule, $rules);\n            $allows = array_merge($allows, $rules);\n        }\n\n        $allows = self::pluginHandle()->headerOptions($allows, $this);\n        $title = (empty($this->archiveTitle) ? '' : $this->archiveTitle . ' &raquo; ') . $this->options->title;\n\n        $header = '';\n        if (!empty($allows['description'])) {\n            $header .= '<meta name=\"description\" content=\"' . $allows['description'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['keywords'])) {\n            $header .= '<meta name=\"keywords\" content=\"' . $allows['keywords'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['generator'])) {\n            $header .= '<meta name=\"generator\" content=\"' . $allows['generator'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['template'])) {\n            $header .= '<meta name=\"template\" content=\"' . $allows['template'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['pingback']) && 2 == $this->options->allowXmlRpc) {\n            $header .= '<link rel=\"pingback\" href=\"' . $allows['pingback'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['xmlrpc']) && 0 < $this->options->allowXmlRpc) {\n            $header .= '<link rel=\"EditURI\" type=\"application/rsd+xml\" title=\"RSD\" href=\"'\n                . $allows['xmlrpc'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['wlw']) && 0 < $this->options->allowXmlRpc) {\n            $header .= '<link rel=\"wlwmanifest\" type=\"application/wlwmanifest+xml\" href=\"'\n                . $allows['wlw'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['rss2']) && $allowFeed) {\n            $header .= '<link rel=\"alternate\" type=\"application/rss+xml\" title=\"'\n                . $title . ' &raquo; RSS 2.0\" href=\"' . $allows['rss2'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['rss1']) && $allowFeed) {\n            $header .= '<link rel=\"alternate\" type=\"application/rdf+xml\" title=\"'\n                . $title . ' &raquo; RSS 1.0\" href=\"' . $allows['rss1'] . '\" />' . \"\\n\";\n        }\n\n        if (!empty($allows['atom']) && $allowFeed) {\n            $header .= '<link rel=\"alternate\" type=\"application/atom+xml\" title=\"'\n                . $title . ' &raquo; ATOM 1.0\" href=\"' . $allows['atom'] . '\" />' . \"\\n\";\n        }\n\n        if ($this->options->commentsThreaded && $this->is('single')) {\n            if ('' != $allows['commentReply']) {\n                if (1 == $allows['commentReply']) {\n                    $header .= \"<script type=\\\"text/javascript\\\">\n(function () {\n    window.TypechoComment = {\n        dom : function (id) {\n            return document.getElementById(id);\n        },\n    \n        create : function (tag, attr) {\n            var el = document.createElement(tag);\n        \n            for (var key in attr) {\n                el.setAttribute(key, attr[key]);\n            }\n        \n            return el;\n        },\n\n        reply : function (cid, coid) {\n            var comment = this.dom(cid), parent = comment.parentNode,\n                response = this.dom('\" . $this->respondId . \"'), input = this.dom('comment-parent'),\n                form = 'form' == response.tagName ? response : response.getElementsByTagName('form')[0],\n                textarea = response.getElementsByTagName('textarea')[0];\n\n            if (null == input) {\n                input = this.create('input', {\n                    'type' : 'hidden',\n                    'name' : 'parent',\n                    'id'   : 'comment-parent'\n                });\n\n                form.appendChild(input);\n            }\n\n            input.setAttribute('value', coid);\n\n            if (null == this.dom('comment-form-place-holder')) {\n                var holder = this.create('div', {\n                    'id' : 'comment-form-place-holder'\n                });\n\n                response.parentNode.insertBefore(holder, response);\n            }\n\n            comment.appendChild(response);\n            this.dom('cancel-comment-reply-link').style.display = '';\n\n            if (null != textarea && 'text' == textarea.name) {\n                textarea.focus();\n            }\n\n            return false;\n        },\n\n        cancelReply : function () {\n            var response = this.dom('{$this->respondId}'),\n            holder = this.dom('comment-form-place-holder'), input = this.dom('comment-parent');\n\n            if (null != input) {\n                input.parentNode.removeChild(input);\n            }\n\n            if (null == holder) {\n                return true;\n            }\n\n            this.dom('cancel-comment-reply-link').style.display = 'none';\n            holder.parentNode.insertBefore(response, holder);\n            return false;\n        }\n    };\n})();\n</script>\n\";\n                } else {\n                    $header .= '<script src=\"' . $allows['commentReply'] . '\" type=\"text/javascript\"></script>';\n                }\n            }\n        }\n\n        /** \u53cd\u5783\u573e\u8bbe\u7f6e */\n        if ($this->options->commentsAntiSpam && $this->is('single')) {\n            if ('' != $allows['antiSpam']) {\n                if (1 == $allows['antiSpam']) {\n                    $header .= \"<script type=\\\"text/javascript\\\">\n(function () {\n    var event = document.addEventListener ? {\n        add: 'addEventListener',\n        triggers: ['scroll', 'mousemove', 'keyup', 'touchstart'],\n        load: 'DOMContentLoaded'\n    } : {\n        add: 'attachEvent',\n        triggers: ['onfocus', 'onmousemove', 'onkeyup', 'ontouchstart'],\n        load: 'onload'\n    }, added = false;\n\n    document[event.add](event.load, function () {\n        var r = document.getElementById('{$this->respondId}'),\n            input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = '_';\n        input.value = \" . Common::shuffleScriptVar($this->security->getToken($this->request->getRequestUrl())) . \"\n\n        if (null != r) {\n            var forms = r.getElementsByTagName('form');\n            if (forms.length > 0) {\n                function append() {\n                    if (!added) {\n                        forms[0].appendChild(input);\n                        added = true;\n                    }\n                }\n            \n                for (var i = 0; i < event.triggers.length; i ++) {\n                    var trigger = event.triggers[i];\n                    document[event.add](trigger, append);\n                    window[event.add](trigger, append);\n                }\n            }\n        }\n    });\n})();\n</script>\";\n                } else {\n                    $header .= '<script src=\"' . $allows['antiSpam'] . '\" type=\"text/javascript\"></script>';\n                }\n            }\n        }\n\n        /** \u8f93\u51faheader */\n        echo $header;\n\n        /** \u63d2\u4ef6\u652f\u6301 */\n        self::pluginHandle()->header($header, $this);\n    }\n\n    /**\n     * \u652f\u6301\u9875\u811a\u81ea\u5b9a\u4e49\n     */\n    public function footer()\n    {\n        self::pluginHandle()->footer($this);\n    }\n\n    /**\n     * \u8f93\u51facookie\u8bb0\u5fc6\u522b\u540d\n     *\n     * @param string $cookieName \u5df2\u7ecf\u8bb0\u5fc6\u7684cookie\u540d\u79f0\n     * @param boolean $return \u662f\u5426\u8fd4\u56de\n     * @return string|void\n     */\n    public function remember(string $cookieName, bool $return = false)\n    {\n        $cookieName = strtolower($cookieName);\n        if (!in_array($cookieName, ['author', 'mail', 'url'])) {\n            return '';\n        }\n\n        $value = Cookie::get('__typecho_remember_' . $cookieName);\n        if ($return) {\n            return $value;\n        } else {\n            echo htmlspecialchars($value ?? '');\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u5f52\u6863\u6807\u9898\n     *\n     * @param mixed $defines\n     * @param string $before\n     * @param string $end\n     */\n    public function archiveTitle($defines = null, string $before = ' &raquo; ', string $end = '')\n    {\n        if ($this->archiveTitle) {\n            $define = '%s';\n            if (is_array($defines) && !empty($defines[$this->archiveType])) {\n                $define = $defines[$this->archiveType];\n            }\n\n            echo $before . sprintf($define, $this->archiveTitle) . $end;\n        }\n    }\n\n    /**\n     * \u8f93\u51fa\u5173\u952e\u5b57\n     *\n     * @param string $split\n     * @param string $default\n     */\n    public function keywords(string $split = ',', string $default = '')\n    {\n        echo empty($this->keywords) ? $default : str_replace(',', $split, htmlspecialchars($this->keywords ?? ''));\n    }\n\n    /**\n     * \u83b7\u53d6\u4e3b\u9898\u6587\u4ef6\n     *\n     * @param string $fileName \u4e3b\u9898\u6587\u4ef6\n     */\n    public function need(string $fileName)\n    {\n        require $this->themeDir . $fileName;\n    }\n\n    /**\n     * \u8f93\u51fa\u89c6\u56fe\n     * @throws WidgetException\n     */\n    public function render()\n    {\n        /** \u5904\u7406\u9759\u6001\u94fe\u63a5\u8df3\u8f6c */\n        $this->checkPermalink();\n\n        /** \u6dfb\u52a0Pingback */\n        if (2 == $this->options->allowXmlRpc) {\n            $this->response->setHeader('X-Pingback', $this->options->xmlRpcUrl);\n        }\n        $validated = false;\n\n        //~ \u81ea\u5b9a\u4e49\u6a21\u677f\n        if (!empty($this->themeFile)) {\n            if (file_exists($this->themeDir . $this->themeFile)) {\n                $validated = true;\n            }\n        }\n\n        if (!$validated && !empty($this->archiveType)) {\n            //~ \u9996\u5148\u627e\u5177\u4f53\u8def\u5f84, \u6bd4\u5982 category/default.php\n            if (!$validated && !empty($this->archiveSlug)) {\n                $themeFile = $this->archiveType . '/' . $this->archiveSlug . '.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n\n            //~ \u7136\u540e\u627e\u5f52\u6863\u7c7b\u578b\u8def\u5f84, \u6bd4\u5982 category.php\n            if (!$validated) {\n                $themeFile = $this->archiveType . '.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n\n            //\u9488\u5bf9attachment\u7684hook\n            if (!$validated && 'attachment' == $this->archiveType) {\n                if (file_exists($this->themeDir . 'page.php')) {\n                    $this->themeFile = 'page.php';\n                    $validated = true;\n                } elseif (file_exists($this->themeDir . 'post.php')) {\n                    $this->themeFile = 'post.php';\n                    $validated = true;\n                }\n            }\n\n            //~ \u6700\u540e\u627e\u5f52\u6863\u8def\u5f84, \u6bd4\u5982 archive.php \u6216\u8005 single.php\n            if (!$validated && 'index' != $this->archiveType && 'front' != $this->archiveType) {\n                $themeFile = $this->archiveSingle ? 'single.php' : 'archive.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n\n            if (!$validated) {\n                $themeFile = 'index.php';\n                if (file_exists($this->themeDir . $themeFile)) {\n                    $this->themeFile = $themeFile;\n                    $validated = true;\n                }\n            }\n        }\n\n        /** \u6587\u4ef6\u4e0d\u5b58\u5728 */\n        if (!$validated) {\n            throw new WidgetException(_t('\u6587\u4ef6\u4e0d\u5b58\u5728'), 500);\n        }\n\n        /** \u6302\u63a5\u63d2\u4ef6 */\n        self::pluginHandle()->beforeRender($this);\n\n        /** \u8f93\u51fa\u6a21\u677f */\n        require_once $this->themeDir . $this->themeFile;\n\n        /** \u6302\u63a5\u63d2\u4ef6 */\n        self::pluginHandle()->afterRender($this);\n    }\n\n    /**\n     * \u8f93\u51fafeed\n     *\n     * @throws WidgetException\n     */\n    public function feed()\n    {\n        if ($this->feedType == Feed::RSS1) {\n            $feedUrl = $this->feedRssUrl;\n        } elseif ($this->feedType == Feed::ATOM1) {\n            $feedUrl = $this->feedAtomUrl;\n        } else {\n            $feedUrl = $this->feedUrl;\n        }\n\n        $this->checkPermalink($feedUrl);\n\n        $this->feed->setSubTitle($this->description);\n        $this->feed->setFeedUrl($feedUrl);\n        $this->feed->setBaseUrl($this->archiveUrl);\n\n        if ($this->is('single') || 'comments' == $this->parameter->type) {\n            $this->feed->setTitle(_t(\n                '%s \u7684\u8bc4\u8bba',\n                $this->options->title . ($this->archiveTitle ? ' - ' . $this->archiveTitle : null)\n            ));\n\n            if ('comments' == $this->parameter->type) {\n                $comments = Recent::alloc('pageSize=10');\n            } else {\n                $comments = Recent::alloc('pageSize=10&parentId=' . $this->cid);\n            }\n\n            while ($comments->next()) {\n                $suffix = self::pluginHandle()->trigger($plugged)->commentFeedItem($this->feedType, $comments);\n                if (!$plugged) {\n                    $suffix = null;\n                }\n\n                $this->feed->addItem([\n                    'title'   => $comments->author,\n                    'content' => $comments->content,\n                    'date'    => $comments->created,\n                    'link'    => $comments->permalink,\n                    'author'  => (object)[\n                        'screenName' => $comments->author,\n                        'url'        => $comments->url,\n                        'mail'       => $comments->mail\n                    ],\n                    'excerpt' => strip_tags($comments->content),\n                    'suffix'  => $suffix\n                ]);\n            }\n        } else {\n            $this->feed->setTitle($this->options->title . ($this->archiveTitle ? ' - ' . $this->archiveTitle : null));\n\n            while ($this->next()) {\n                $suffix = self::pluginHandle()->trigger($plugged)->feedItem($this->feedType, $this);\n                if (!$plugged) {\n                    $suffix = null;\n                }\n\n                $feedUrl = '';\n                if (Feed::RSS2 == $this->feedType) {\n                    $feedUrl = $this->feedUrl;\n                } elseif (Feed::RSS1 == $this->feedType) {\n                    $feedUrl = $this->feedRssUrl;\n                } elseif (Feed::ATOM1 == $this->feedType) {\n                    $feedUrl = $this->feedAtomUrl;\n                }\n\n                $this->feed->addItem([\n                    'title'           => $this->title,\n                    'content'         => $this->options->feedFullText ? $this->content\n                        : (false !== strpos($this->text, '<!--more-->') ? $this->excerpt .\n                            \"<p class=\\\"more\\\"><a href=\\\"{$this->permalink}\\\" title=\\\"{$this->title}\\\">[...]</a></p>\"\n                            : $this->content),\n                    'date'            => $this->created,\n                    'link'            => $this->permalink,\n                    'author'          => $this->author,\n                    'excerpt'         => $this->___description(),\n                    'comments'        => $this->commentsNum,\n                    'commentsFeedUrl' => $feedUrl,\n                    'suffix'          => $suffix\n                ]);\n            }\n        }\n\n        $this->response->setContentType($this->feedContentType);\n        echo (string) $this->feed;\n    }\n\n    /**\n     * \u5224\u65ad\u5f52\u6863\u7c7b\u578b\u548c\u540d\u79f0\n     *\n     * @access public\n     * @param string $archiveType \u5f52\u6863\u7c7b\u578b\n     * @param string|null $archiveSlug \u5f52\u6863\u540d\u79f0\n     * @return boolean\n     */\n    public function is(string $archiveType, ?string $archiveSlug = null)\n    {\n        return ($archiveType == $this->archiveType ||\n                (($this->archiveSingle ? 'single' : 'archive') == $archiveType && 'index' != $this->archiveType) ||\n                ('index' == $archiveType && $this->makeSinglePageAsFrontPage))\n            && (empty($archiveSlug) || $archiveSlug == $this->archiveSlug);\n    }\n\n    /**\n     * \u63d0\u4ea4\u67e5\u8be2\n     *\n     * @param mixed $select \u67e5\u8be2\u5bf9\u8c61\n     * @throws Db\\Exception\n     */\n    public function query($select)\n    {\n        self::pluginHandle()->trigger($queryPlugged)->query($this, $select);\n        if (!$queryPlugged) {\n            $this->db->fetchAll($select, [$this, 'push']);\n        }\n    }\n\n    /**\n     * \u8bc4\u8bba\u5730\u5740\n     *\n     * @return string\n     */\n    protected function ___commentUrl(): string\n    {\n        /** \u751f\u6210\u53cd\u9988\u5730\u5740 */\n        /** \u8bc4\u8bba */\n        $commentUrl = parent::___commentUrl();\n\n        //\u4e0d\u4f9d\u8d56js\u7684\u7236\u7ea7\u8bc4\u8bba\n        $reply = $this->request->filter('int')->replyTo;\n        if ($reply && $this->is('single')) {\n            $commentUrl .= '?parent=' . $reply;\n        }\n\n        return $commentUrl;\n    }\n\n    /**\n     * \u5bfc\u5165\u5bf9\u8c61\n     *\n     * @param Archive $widget \u9700\u8981\u5bfc\u5165\u7684\u5bf9\u8c61\n     */\n    private function import(Archive $widget)\n    {\n        $currentProperties = get_object_vars($this);\n\n        foreach ($currentProperties as $name => $value) {\n            if (false !== strpos('|request|response|parameter|feed|feedType|currentFeedUrl|', '|' . $name . '|')) {\n                continue;\n            }\n\n            if (isset($widget->{$name})) {\n                $this->{$name} = $widget->{$name};\n            } else {\n                $method = ucfirst($name);\n                $setMethod = 'set' . $method;\n                $getMethod = 'get' . $method;\n\n                if (\n                    method_exists($this, $setMethod)\n                    && method_exists($widget, $getMethod)\n                ) {\n                    $value = $widget->{$getMethod}();\n\n                    if ($value !== null) {\n                        $this->{$setMethod}($widget->{$getMethod}());\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u68c0\u67e5\u94fe\u63a5\u662f\u5426\u6b63\u786e\n     *\n     * @param string|null $permalink\n     */\n    private function checkPermalink(?string $permalink = null)\n    {\n        if (!isset($permalink)) {\n            $type = $this->parameter->type;\n\n            if (\n                in_array($type, ['index', 'comment_page', 404])\n                || $this->makeSinglePageAsFrontPage    // \u81ea\u5b9a\u4e49\u9996\u9875\u4e0d\u5904\u7406\n                || !$this->parameter->checkPermalink\n            ) { // \u5f3a\u5236\u5173\u95ed\n                return;\n            }\n\n            if ($this->archiveSingle) {\n                $permalink = $this->permalink;\n            } else {\n                $value = array_merge($this->pageRow, [\n                    'page' => $this->currentPage\n                ]);\n\n                $path = Router::url($type, $value);\n                $permalink = Common::url($path, $this->options->index);\n            }\n        }\n\n        $requestUrl = $this->request->getRequestUrl();\n\n        $src = parse_url($permalink);\n        $target = parse_url($requestUrl);\n\n        if ($src['host'] != $target['host'] || urldecode($src['path']) != urldecode($target['path'])) {\n            $this->response->redirect($permalink, true);\n        }\n    }\n\n    /**\n     * \u5904\u7406index\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     */\n    private function indexHandle(Query $select, bool &$hasPushed)\n    {\n        $select->where('table.contents.type = ?', 'post');\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->indexHandle($this, $select);\n    }\n\n    /**\n     * \u9ed8\u8ba4\u7684\u975e\u9996\u9875\u5f52\u6863\u5904\u7406\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException\n     */\n    private function archiveEmptyHandle(Query $select, bool &$hasPushed)\n    {\n        throw new WidgetException(_t('\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u5b58\u5728'), 404);\n    }\n\n    /**\n     * 404\u9875\u9762\u5904\u7406\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     */\n    private function error404Handle(Query $select, bool &$hasPushed)\n    {\n        /** \u8bbe\u7f6eheader */\n        $this->response->setStatus(404);\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = _t('\u9875\u9762\u6ca1\u627e\u5230');\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'archive';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = 404;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u6a21\u677f */\n        $this->themeFile = '404.php';\n\n        /** \u8bbe\u7f6e\u5355\u4e00\u5f52\u6863\u7c7b\u578b */\n        $this->archiveSingle = false;\n\n        $hasPushed = true;\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->error404Handle($this, $select);\n    }\n\n    /**\n     * \u72ec\u7acb\u9875\u5904\u7406\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function singleHandle(Query $select, bool &$hasPushed)\n    {\n        if ('comment_page' == $this->parameter->type) {\n            $params = [];\n            $matched = Router::match($this->request->permalink);\n\n            if ($matched && $matched instanceof Archive && $matched->is('single')) {\n                $this->import($matched);\n                $hasPushed = true;\n                return;\n            }\n        }\n\n        /** \u5c06\u8fd9\u4e24\u4e2a\u8bbe\u7f6e\u63d0\u524d\u662f\u4e3a\u4e86\u4fdd\u8bc1\u5728\u8c03\u7528query\u7684plugin\u65f6\u53ef\u4ee5\u5728\u63d2\u4ef6\u4e2d\u4f7f\u7528is\u5224\u65ad\u521d\u6b65\u5f52\u6863\u7c7b\u578b */\n        /** \u5982\u679c\u9700\u8981\u66f4\u7ec6\u5224\u65ad\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528singleHandle\u6765\u5b9e\u73b0 */\n        $this->archiveSingle = true;\n\n        /** \u9ed8\u8ba4\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'single';\n\n        /** \u5339\u914d\u7c7b\u578b */\n\n        if ('single' != $this->parameter->type) {\n            $select->where('table.contents.type = ?', $this->parameter->type);\n        }\n\n        /** \u5982\u679c\u662f\u5355\u7bc7\u6587\u7ae0\u6216\u72ec\u7acb\u9875\u9762 */\n        if (isset($this->request->cid)) {\n            $select->where('table.contents.cid = ?', $this->request->filter('int')->cid);\n        }\n\n        /** \u5339\u914d\u7f29\u7565\u540d */\n        if (isset($this->request->slug) && !$this->parameter->preview) {\n            $select->where('table.contents.slug = ?', $this->request->slug);\n        }\n\n        /** \u5339\u914d\u65f6\u95f4 */\n        if (isset($this->request->year) && !$this->parameter->preview) {\n            $year = $this->request->filter('int')->year;\n\n            $fromMonth = 1;\n            $toMonth = 12;\n\n            $fromDay = 1;\n            $toDay = 31;\n\n            if (isset($this->request->month)) {\n                $fromMonth = $this->request->filter('int')->month;\n                $toMonth = $fromMonth;\n\n                $fromDay = 1;\n                $toDay = date('t', mktime(0, 0, 0, $toMonth, 1, $year));\n\n                if (isset($this->request->day)) {\n                    $fromDay = $this->request->filter('int')->day;\n                    $toDay = $fromDay;\n                }\n            }\n\n            /** \u83b7\u53d6\u8d77\u59cbGMT\u65f6\u95f4\u7684unix\u65f6\u95f4\u6233 */\n            $from = mktime(0, 0, 0, $fromMonth, $fromDay, $year)\n                - $this->options->timezone + $this->options->serverTimezone;\n            $to = mktime(23, 59, 59, $toMonth, $toDay, $year)\n                - $this->options->timezone + $this->options->serverTimezone;\n            $select->where('table.contents.created >= ? AND table.contents.created < ?', $from, $to);\n        }\n\n        /** \u4fdd\u5b58\u5bc6\u7801\u81f3cookie */\n        $isPasswordPosted = false;\n\n        if (\n            $this->request->isPost()\n            && isset($this->request->protectPassword)\n            && !$this->parameter->preview\n        ) {\n            $this->security->protect();\n            Cookie::set(\n                'protectPassword_' . $this->request->filter('int')->protectCID,\n                $this->request->protectPassword\n            );\n\n            $isPasswordPosted = true;\n        }\n\n        /** \u5339\u914d\u7c7b\u578b */\n        $select->limit(1);\n        $this->query($select);\n\n        if (\n            !$this->have()\n            || (isset($this->request->category)\n                && $this->category != $this->request->category && !$this->parameter->preview)\n            || (isset($this->request->directory)\n                && $this->request->directory != implode('/', $this->directory) && !$this->parameter->preview)\n        ) {\n            if (!$this->invokeFromOutside) {\n                /** \u5bf9\u6ca1\u6709\u7d22\u5f15\u60c5\u51b5\u4e0b\u7684\u5224\u65ad */\n                throw new WidgetException(_t('\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u5b58\u5728'), 404);\n            } else {\n                $hasPushed = true;\n                return;\n            }\n        }\n\n        /** \u5bc6\u7801\u8868\u5355\u5224\u65ad\u903b\u8f91 */\n        if ($isPasswordPosted && $this->hidden) {\n            throw new WidgetException(_t('\u5bf9\u4e0d\u8d77,\u60a8\u8f93\u5165\u7684\u5bc6\u7801\u9519\u8bef'), 403);\n        }\n\n        /** \u8bbe\u7f6e\u6a21\u677f */\n        if ($this->template) {\n            /** \u5e94\u7528\u81ea\u5b9a\u4e49\u6a21\u677f */\n            $this->themeFile = $this->template;\n        }\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n\n        //\u5bf9\u81ea\u5b9a\u4e49\u9996\u9875\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\n        if (!$this->makeSinglePageAsFrontPage) {\n            $this->feedUrl = $this->row['feedUrl'];\n\n            /** RSS 1.0 */\n            $this->feedRssUrl = $this->row['feedRssUrl'];\n\n            /** ATOM 1.0 */\n            $this->feedAtomUrl = $this->row['feedAtomUrl'];\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = $this->title;\n\n            /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n            $this->keywords = implode(',', array_column($this->tags, 'name'));\n\n            /** \u8bbe\u7f6e\u63cf\u8ff0 */\n            $this->description = $this->___description();\n        }\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        [$this->archiveType] = explode('_', $this->type);\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = ('post' == $this->type || 'attachment' == $this->type) ? $this->cid : $this->slug;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $this->permalink;\n\n        /** \u8bbe\u7f6e403\u5934 */\n        if ($this->hidden) {\n            $this->response->setStatus(403);\n        }\n\n        $hasPushed = true;\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->singleHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u5206\u7c7b\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function categoryHandle(Query $select, bool &$hasPushed)\n    {\n        /** \u5982\u679c\u662f\u5206\u7c7b */\n        $categorySelect = $this->db->select()\n            ->from('table.metas')\n            ->where('type = ?', 'category')\n            ->limit(1);\n\n        if (isset($this->request->mid)) {\n            $categorySelect->where('mid = ?', $this->request->filter('int')->mid);\n        }\n\n        if (isset($this->request->slug)) {\n            $categorySelect->where('slug = ?', $this->request->slug);\n        }\n\n        if (isset($this->request->directory)) {\n            $directory = explode('/', $this->request->directory);\n            $categorySelect->where('slug = ?', $directory[count($directory) - 1]);\n        }\n\n        $category = $this->db->fetchRow($categorySelect);\n        if (empty($category)) {\n            throw new WidgetException(_t('\u5206\u7c7b\u4e0d\u5b58\u5728'), 404);\n        }\n\n        $categoryListWidget = Rows::alloc('current=' . $category['mid']);\n        $category = $categoryListWidget->filter($category);\n\n        if (isset($directory) && ($this->request->directory != implode('/', $category['directory']))) {\n            throw new WidgetException(_t('\u7236\u7ea7\u5206\u7c7b\u4e0d\u5b58\u5728'), 404);\n        }\n\n        $children = $categoryListWidget->getAllChildren($category['mid']);\n        $children[] = $category['mid'];\n\n        /** fix sql92 by 70 */\n        $select->join('table.relationships', 'table.contents.cid = table.relationships.cid')\n            ->where('table.relationships.mid IN ?', $children)\n            ->where('table.contents.type = ?', 'post')\n            ->group('table.contents.cid');\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = array_merge($category, [\n            'slug'      => urlencode($category['slug']),\n            'directory' => implode('/', array_map('urlencode', $category['directory']))\n        ]);\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $category['name'];\n\n        /** \u8bbe\u7f6e\u63cf\u8ff0 */\n        $this->description = $category['description'];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = $category['feedUrl'];\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = $category['feedRssUrl'];\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = $category['feedAtomUrl'];\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $category['name'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'category';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $category['slug'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $category['permalink'];\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->categoryHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u6807\u7b7e\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function tagHandle(Query $select, bool &$hasPushed)\n    {\n        $tagSelect = $this->db->select()->from('table.metas')\n            ->where('type = ?', 'tag')->limit(1);\n\n        if (isset($this->request->mid)) {\n            $tagSelect->where('mid = ?', $this->request->filter('int')->mid);\n        }\n\n        if (isset($this->request->slug)) {\n            $tagSelect->where('slug = ?', $this->request->slug);\n        }\n\n        /** \u5982\u679c\u662f\u6807\u7b7e */\n        $tag = $this->db->fetchRow(\n            $tagSelect,\n            [Metas::alloc(), 'filter']\n        );\n\n        if (!$tag) {\n            throw new WidgetException(_t('\u6807\u7b7e\u4e0d\u5b58\u5728'), 404);\n        }\n\n        /** fix sql92 by 70 */\n        $select->join('table.relationships', 'table.contents.cid = table.relationships.cid')\n            ->where('table.relationships.mid = ?', $tag['mid'])\n            ->where('table.contents.type = ?', 'post');\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = array_merge($tag, [\n            'slug' => urlencode($tag['slug'])\n        ]);\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $tag['name'];\n\n        /** \u8bbe\u7f6e\u63cf\u8ff0 */\n        $this->description = $tag['description'];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = $tag['feedUrl'];\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = $tag['feedRssUrl'];\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = $tag['feedAtomUrl'];\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $tag['name'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'tag';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $tag['slug'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $tag['permalink'];\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->tagHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u4f5c\u8005\n     *\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @throws WidgetException|Db\\Exception\n     */\n    private function authorHandle(Query $select, bool &$hasPushed)\n    {\n        $uid = $this->request->filter('int')->uid;\n\n        $author = $this->db->fetchRow(\n            $this->db->select()->from('table.users')\n            ->where('uid = ?', $uid),\n            [User::alloc(), 'filter']\n        );\n\n        if (!$author) {\n            throw new WidgetException(_t('\u4f5c\u8005\u4e0d\u5b58\u5728'), 404);\n        }\n\n        $select->where('table.contents.authorId = ?', $uid)\n            ->where('table.contents.type = ?', 'post');\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = $author;\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $author['screenName'];\n\n        /** \u8bbe\u7f6e\u63cf\u8ff0 */\n        $this->description = $author['screenName'];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = $author['feedUrl'];\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = $author['feedRssUrl'];\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = $author['feedAtomUrl'];\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $author['screenName'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'author';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $author['uid'];\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = $author['permalink'];\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->authorHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u65e5\u671f\n     *\n     * @access private\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @return void\n     */\n    private function dateHandle(Query $select, &$hasPushed)\n    {\n        /** \u5982\u679c\u662f\u6309\u65e5\u671f\u5f52\u6863 */\n        $year = $this->request->filter('int')->year;\n        $month = $this->request->filter('int')->month;\n        $day = $this->request->filter('int')->day;\n\n        if (!empty($year) && !empty($month) && !empty($day)) {\n\n            /** \u5982\u679c\u6309\u65e5\u5f52\u6863 */\n            $from = mktime(0, 0, 0, $month, $day, $year);\n            $to = mktime(23, 59, 59, $month, $day, $year);\n\n            /** \u5f52\u6863\u7f29\u7565\u540d */\n            $this->archiveSlug = 'day';\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = _t('%d\u5e74%d\u6708%d\u65e5', $year, $month, $day);\n        } elseif (!empty($year) && !empty($month)) {\n\n            /** \u5982\u679c\u6309\u6708\u5f52\u6863 */\n            $from = mktime(0, 0, 0, $month, 1, $year);\n            $to = mktime(23, 59, 59, $month, date('t', $from), $year);\n\n            /** \u5f52\u6863\u7f29\u7565\u540d */\n            $this->archiveSlug = 'month';\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = _t('%d\u5e74%d\u6708', $year, $month);\n        } elseif (!empty($year)) {\n\n            /** \u5982\u679c\u6309\u5e74\u5f52\u6863 */\n            $from = mktime(0, 0, 0, 1, 1, $year);\n            $to = mktime(23, 59, 59, 12, 31, $year);\n\n            /** \u5f52\u6863\u7f29\u7565\u540d */\n            $this->archiveSlug = 'year';\n\n            /** \u8bbe\u7f6e\u6807\u9898 */\n            $this->archiveTitle = _t('%d\u5e74', $year);\n        }\n\n        $select->where('table.contents.created >= ?', $from - $this->options->timezone + $this->options->serverTimezone)\n            ->where('table.contents.created <= ?', $to - $this->options->timezone + $this->options->serverTimezone)\n            ->where('table.contents.type = ?', 'post');\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'date';\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        $value = [\n            'year' => $year,\n            'month' => str_pad($month, 2, '0', STR_PAD_LEFT),\n            'day' => str_pad($day, 2, '0', STR_PAD_LEFT)\n        ];\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = $value;\n\n        /** \u83b7\u53d6\u5f53\u524d\u8def\u7531,\u8fc7\u6ee4\u6389\u7ffb\u9875\u60c5\u51b5 */\n        $currentRoute = str_replace('_page', '', $this->parameter->type);\n\n        /** RSS 2.0 */\n        $this->feedUrl = Router::url($currentRoute, $value, $this->options->feedUrl);\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = Router::url($currentRoute, $value, $this->options->feedRssUrl);\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = Router::url($currentRoute, $value, $this->options->feedAtomUrl);\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = Router::url($currentRoute, $value, $this->options->index);\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->dateHandle($this, $select);\n    }\n\n    /**\n     * \u5904\u7406\u641c\u7d22\n     *\n     * @access private\n     * @param Query $select \u67e5\u8be2\u5bf9\u8c61\n     * @param boolean $hasPushed \u662f\u5426\u5df2\u7ecf\u538b\u5165\u961f\u5217\n     * @return void\n     */\n    private function searchHandle(Query $select, &$hasPushed)\n    {\n        /** \u589e\u52a0\u81ea\u5b9a\u4e49\u641c\u7d22\u5f15\u64ce\u63a5\u53e3 */\n        //~ fix issue 40\n        $keywords = $this->request->filter('url', 'search')->keywords;\n        self::pluginHandle()->trigger($hasPushed)->search($keywords, $this);\n\n        if (!$hasPushed) {\n            $searchQuery = '%' . str_replace(' ', '%', $keywords) . '%';\n\n            /** \u641c\u7d22\u65e0\u6cd5\u8fdb\u5165\u9690\u79c1\u9879\u4fdd\u62a4\u5f52\u6863 */\n            if ($this->user->hasLogin()) {\n                //~ fix issue 941\n                $select->where(\"table.contents.password IS NULL\n                 OR table.contents.password = '' OR table.contents.authorId = ?\", $this->user->uid);\n            } else {\n                $select->where(\"table.contents.password IS NULL OR table.contents.password = ''\");\n            }\n\n            $op = $this->db->getAdapter()->getDriver() == 'pgsql' ? 'ILIKE' : 'LIKE';\n\n            $select->where(\"table.contents.title {$op} ? OR table.contents.text {$op} ?\", $searchQuery, $searchQuery)\n                ->where('table.contents.type = ?', 'post');\n        }\n\n        /** \u8bbe\u7f6e\u5173\u952e\u8bcd */\n        $this->keywords = $keywords;\n\n        /** \u8bbe\u7f6e\u5206\u9875 */\n        $this->pageRow = ['keywords' => urlencode($keywords)];\n\n        /** \u8bbe\u7f6e\u5934\u90e8feed */\n        /** RSS 2.0 */\n        $this->feedUrl = Router::url('search', ['keywords' => $keywords], $this->options->feedUrl);\n\n        /** RSS 1.0 */\n        $this->feedRssUrl = Router::url('search', ['keywords' => $keywords], $this->options->feedAtomUrl);\n\n        /** ATOM 1.0 */\n        $this->feedAtomUrl = Router::url('search', ['keywords' => $keywords], $this->options->feedAtomUrl);\n\n        /** \u8bbe\u7f6e\u6807\u9898 */\n        $this->archiveTitle = $keywords;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7c7b\u578b */\n        $this->archiveType = 'search';\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u7f29\u7565\u540d */\n        $this->archiveSlug = $keywords;\n\n        /** \u8bbe\u7f6e\u5f52\u6863\u5730\u5740 */\n        $this->archiveUrl = Router::url('search', ['keywords' => $keywords], $this->options->index);\n\n        /** \u63d2\u4ef6\u63a5\u53e3 */\n        self::pluginHandle()->searchHandle($this, $select);\n    }\n}\n", "<?php\n\nnamespace Widget;\n\nuse Typecho\\Common;\nuse Widget\\Plugins\\Config;\nuse Widget\\Themes\\Files;\nuse Widget\\Users\\Edit as UsersEdit;\nuse Widget\\Contents\\Attachment\\Edit as AttachmentEdit;\nuse Widget\\Contents\\Post\\Edit as PostEdit;\nuse Widget\\Contents\\Page\\Edit as PageEdit;\nuse Widget\\Contents\\Post\\Admin as PostAdmin;\nuse Widget\\Comments\\Admin as CommentsAdmin;\nuse Widget\\Metas\\Category\\Admin as CategoryAdmin;\nuse Widget\\Metas\\Category\\Edit as CategoryEdit;\nuse Widget\\Metas\\Tag\\Admin as TagAdmin;\n\nif (!defined('__TYPECHO_ROOT_DIR__')) {\n    exit;\n}\n\n/**\n * \u540e\u53f0\u83dc\u5355\u663e\u793a\n *\n * @package Widget\n */\nclass Menu extends Base\n{\n    /**\n     * \u5f53\u524d\u83dc\u5355\u6807\u9898\n     * @var string\n     */\n    public $title;\n\n    /**\n     * \u5f53\u524d\u589e\u52a0\u9879\u76ee\u94fe\u63a5\n     * @var string\n     */\n    public $addLink;\n\n    /**\n     * \u7236\u83dc\u5355\u5217\u8868\n     *\n     * @var array\n     */\n    private $menu = [];\n\n    /**\n     * \u5f53\u524d\u7236\u83dc\u5355\n     *\n     * @var integer\n     */\n    private $currentParent = 1;\n\n    /**\n     * \u5f53\u524d\u5b50\u83dc\u5355\n     *\n     * @var integer\n     */\n    private $currentChild = 0;\n\n    /**\n     * \u5f53\u524d\u9875\u9762\n     *\n     * @var string\n     */\n    private $currentUrl;\n\n    /**\n     * \u6267\u884c\u51fd\u6570,\u521d\u59cb\u5316\u83dc\u5355\n     */\n    public function execute()\n    {\n        $parentNodes = [null, _t('\u63a7\u5236\u53f0'), _t('\u64b0\u5199'), _t('\u7ba1\u7406'), _t('\u8bbe\u7f6e')];\n\n        $childNodes = [\n            [\n                [_t('\u767b\u5f55'), _t('\u767b\u5f55\u5230%s', $this->options->title), 'login.php', 'visitor'],\n                [_t('\u6ce8\u518c'), _t('\u6ce8\u518c\u5230%s', $this->options->title), 'register.php', 'visitor']\n            ],\n            [\n                [_t('\u6982\u8981'), _t('\u7f51\u7ad9\u6982\u8981'), 'index.php', 'subscriber'],\n                [_t('\u4e2a\u4eba\u8bbe\u7f6e'), _t('\u4e2a\u4eba\u8bbe\u7f6e'), 'profile.php', 'subscriber'],\n                [_t('\u63d2\u4ef6'), _t('\u63d2\u4ef6\u7ba1\u7406'), 'plugins.php', 'administrator'],\n                [[Config::class, 'getMenuTitle'], [Config::class, 'getMenuTitle'], 'options-plugin.php?config=', 'administrator', true],\n                [_t('\u5916\u89c2'), _t('\u7f51\u7ad9\u5916\u89c2'), 'themes.php', 'administrator'],\n                [[Files::class, 'getMenuTitle'], [Files::class, 'getMenuTitle'], 'theme-editor.php', 'administrator', true],\n                [_t('\u8bbe\u7f6e\u5916\u89c2'), _t('\u8bbe\u7f6e\u5916\u89c2'), 'options-theme.php', 'administrator', true],\n                [_t('\u5907\u4efd'), _t('\u5907\u4efd'), 'backup.php', 'administrator'],\n                [_t('\u5347\u7ea7'), _t('\u5347\u7ea7\u7a0b\u5e8f'), 'upgrade.php', 'administrator', true],\n                [_t('\u6b22\u8fce'), _t('\u6b22\u8fce\u4f7f\u7528'), 'welcome.php', 'subscriber', true]\n            ],\n            [\n                [_t('\u64b0\u5199\u6587\u7ae0'), _t('\u64b0\u5199\u65b0\u6587\u7ae0'), 'write-post.php', 'contributor'],\n                [[PostEdit::class, 'getMenuTitle'], [PostEdit::class, 'getMenuTitle'], 'write-post.php?cid=', 'contributor', true],\n                [_t('\u521b\u5efa\u9875\u9762'), _t('\u521b\u5efa\u65b0\u9875\u9762'), 'write-page.php', 'editor'],\n                [[PageEdit::class, 'getMenuTitle'], [PageEdit::class, 'getMenuTitle'], 'write-page.php?cid=', 'editor', true],\n            ],\n            [\n                [_t('\u6587\u7ae0'), _t('\u7ba1\u7406\u6587\u7ae0'), 'manage-posts.php', 'contributor', false, 'write-post.php'],\n                [[PostAdmin::class, 'getMenuTitle'], [PostAdmin::class, 'getMenuTitle'], 'manage-posts.php?uid=', 'contributor', true],\n                [_t('\u72ec\u7acb\u9875\u9762'), _t('\u7ba1\u7406\u72ec\u7acb\u9875\u9762'), 'manage-pages.php', 'editor', false, 'write-page.php'],\n                [_t('\u8bc4\u8bba'), _t('\u7ba1\u7406\u8bc4\u8bba'), 'manage-comments.php', 'contributor'],\n                [[CommentsAdmin::class, 'getMenuTitle'], [CommentsAdmin::class, 'getMenuTitle'], 'manage-comments.php?cid=', 'contributor', true],\n                [_t('\u5206\u7c7b'), _t('\u7ba1\u7406\u5206\u7c7b'), 'manage-categories.php', 'editor', false, 'category.php'],\n                [_t('\u65b0\u589e\u5206\u7c7b'), _t('\u65b0\u589e\u5206\u7c7b'), 'category.php', 'editor', true],\n                [[CategoryAdmin::class, 'getMenuTitle'], [CategoryAdmin::class, 'getMenuTitle'], 'manage-categories.php?parent=', 'editor', true, [CategoryAdmin::class, 'getAddLink']],\n                [[CategoryEdit::class, 'getMenuTitle'], [CategoryEdit::class, 'getMenuTitle'], 'category.php?mid=', 'editor', true],\n                [[CategoryEdit::class, 'getMenuTitle'], [CategoryEdit::class, 'getMenuTitle'], 'category.php?parent=', 'editor', true],\n                [_t('\u6807\u7b7e'), _t('\u7ba1\u7406\u6807\u7b7e'), 'manage-tags.php', 'editor'],\n                [[TagAdmin::class, 'getMenuTitle'], [TagAdmin::class, 'getMenuTitle'], 'manage-tags.php?mid=', 'editor', true],\n                [_t('\u6587\u4ef6'), _t('\u7ba1\u7406\u6587\u4ef6'), 'manage-medias.php', 'editor'],\n                [[AttachmentEdit::class, 'getMenuTitle'], [AttachmentEdit::class, 'getMenuTitle'], 'media.php?cid=', 'contributor', true],\n                [_t('\u7528\u6237'), _t('\u7ba1\u7406\u7528\u6237'), 'manage-users.php', 'administrator', false, 'user.php'],\n                [_t('\u65b0\u589e\u7528\u6237'), _t('\u65b0\u589e\u7528\u6237'), 'user.php', 'administrator', true],\n                [[UsersEdit::class, 'getMenuTitle'], [UsersEdit::class, 'getMenuTitle'], 'user.php?uid=', 'administrator', true],\n            ],\n            [\n                [_t('\u57fa\u672c'), _t('\u57fa\u672c\u8bbe\u7f6e'), 'options-general.php', 'administrator'],\n                [_t('\u8bc4\u8bba'), _t('\u8bc4\u8bba\u8bbe\u7f6e'), 'options-discussion.php', 'administrator'],\n                [_t('\u9605\u8bfb'), _t('\u9605\u8bfb\u8bbe\u7f6e'), 'options-reading.php', 'administrator'],\n                [_t('\u6c38\u4e45\u94fe\u63a5'), _t('\u6c38\u4e45\u94fe\u63a5\u8bbe\u7f6e'), 'options-permalink.php', 'administrator'],\n            ]\n        ];\n\n        /** \u83b7\u53d6\u6269\u5c55\u83dc\u5355 */\n        $panelTable = unserialize($this->options->panelTable);\n        $extendingParentMenu = empty($panelTable['parent']) ? [] : $panelTable['parent'];\n        $extendingChildMenu = empty($panelTable['child']) ? [] : $panelTable['child'];\n        $currentUrl = $this->request->getRequestUrl();\n        $adminUrl = $this->options->adminUrl;\n        $menu = [];\n        $defaultChildNode = [null, null, null, 'administrator', false, null];\n\n        $currentUrlParts = parse_url($currentUrl);\n        $currentUrlParams = [];\n        if (!empty($currentUrlParts['query'])) {\n            parse_str($currentUrlParts['query'], $currentUrlParams);\n        }\n\n        if ('/' == $currentUrlParts['path'][strlen($currentUrlParts['path']) - 1]) {\n            $currentUrlParts['path'] .= 'index.php';\n        }\n\n        foreach ($extendingParentMenu as $key => $val) {\n            $parentNodes[10 + $key] = $val;\n        }\n\n        foreach ($extendingChildMenu as $key => $val) {\n            $childNodes[$key] = array_merge($childNodes[$key] ?? [], $val);\n        }\n\n        foreach ($parentNodes as $key => $parentNode) {\n            // this is a simple struct than before\n            $children = [];\n            $showedChildrenCount = 0;\n            $firstUrl = null;\n\n            foreach ($childNodes[$key] as $inKey => $childNode) {\n                // magic merge\n                $childNode += $defaultChildNode;\n                [$name, $title, $url, $access] = $childNode;\n\n                $hidden = $childNode[4] ?? false;\n                $addLink = $childNode[5] ?? null;\n\n                // \u4fdd\u5b58\u6700\u539f\u59cb\u7684hidden\u4fe1\u606f\n                $orgHidden = $hidden;\n\n                // parse url\n                $url = Common::url($url, $adminUrl);\n\n                // compare url\n                $urlParts = parse_url($url);\n                $urlParams = [];\n                if (!empty($urlParts['query'])) {\n                    parse_str($urlParts['query'], $urlParams);\n                }\n\n                $validate = true;\n                if ($urlParts['path'] != $currentUrlParts['path']) {\n                    $validate = false;\n                } else {\n                    foreach ($urlParams as $paramName => $paramValue) {\n                        if (!isset($currentUrlParams[$paramName])) {\n                            $validate = false;\n                            break;\n                        }\n                    }\n                }\n\n                if (\n                    $validate\n                    && basename($urlParts['path']) == 'extending.php'\n                    && !empty($currentUrlParams['panel']) && !empty($urlParams['panel'])\n                    && $urlParams['panel'] != $currentUrlParams['panel']\n                ) {\n                    $validate = false;\n                }\n\n                if ($hidden && $validate) {\n                    $hidden = false;\n                }\n\n                if (!$hidden && !$this->user->pass($access, true)) {\n                    $hidden = true;\n                }\n\n                if (!$hidden) {\n                    $showedChildrenCount++;\n\n                    if (empty($firstUrl)) {\n                        $firstUrl = $url;\n                    }\n\n                    if (is_array($name)) {\n                        [$widget, $method] = $name;\n                        $name = self::widget($widget)->$method();\n                    }\n\n                    if (is_array($title)) {\n                        [$widget, $method] = $title;\n                        $title = self::widget($widget)->$method();\n                    }\n\n                    if (is_array($addLink)) {\n                        [$widget, $method] = $addLink;\n                        $addLink = self::widget($widget)->$method();\n                    }\n                }\n\n                if ($validate) {\n                    if ('visitor' != $access) {\n                        $this->user->pass($access);\n                    }\n\n                    $this->currentParent = $key;\n                    $this->currentChild = $inKey;\n                    $this->title = $title;\n                    $this->addLink = $addLink ? Common::url($addLink, $adminUrl) : null;\n                }\n\n                $children[$inKey] = [\n                    $name,\n                    $title,\n                    $url,\n                    $access,\n                    $hidden,\n                    $addLink,\n                    $orgHidden\n                ];\n            }\n\n            $menu[$key] = [$parentNode, $showedChildrenCount > 0, $firstUrl, $children];\n        }\n\n        $this->menu = $menu;\n        $this->currentUrl = Common::safeUrl($currentUrl);\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u83dc\u5355\n     *\n     * @return array\n     */\n    public function getCurrentMenu(): ?array\n    {\n        return $this->currentParent > 0 ? $this->menu[$this->currentParent][3][$this->currentChild] : null;\n    }\n\n    /**\n     * \u8f93\u51fa\u7236\u7ea7\u83dc\u5355\n     */\n    public function output($class = 'focus', $childClass = 'focus')\n    {\n        foreach ($this->menu as $key => $node) {\n            if (!$node[1] || !$key) {\n                continue;\n            }\n\n            echo \"<ul class=\\\"root\" . ($key == $this->currentParent ? ' ' . $class : null)\n                . \"\\\"><li class=\\\"parent\\\"><a href=\\\"{$node[2]}\\\">{$node[0]}</a>\"\n                . \"</li><ul class=\\\"child\\\">\";\n\n            $last = 0;\n            foreach ($node[3] as $inKey => $inNode) {\n                if (!$inNode[4]) {\n                    $last = $inKey;\n                }\n            }\n\n            foreach ($node[3] as $inKey => $inNode) {\n                if ($inNode[4]) {\n                    continue;\n                }\n\n                $classes = [];\n                if ($key == $this->currentParent && $inKey == $this->currentChild) {\n                    $classes[] = $childClass;\n                } elseif ($inNode[6]) {\n                    continue;\n                }\n\n                if ($inKey == $last) {\n                    $classes[] = 'last';\n                }\n\n                echo \"<li\" . (!empty($classes) ? ' class=\"' . implode(' ', $classes) . '\"' : null) . \"><a href=\\\"\"\n                    . ($key == $this->currentParent && $inKey == $this->currentChild ? $this->currentUrl : $inNode[2])\n                    . \"\\\">{$inNode[0]}</a></li>\";\n            }\n\n            echo \"</ul></ul>\";\n        }\n    }\n}\n"], "filenames": ["var/Widget/Archive.php", "var/Widget/Menu.php"], "buggy_code_start_loc": [649, 130], "buggy_code_end_loc": [650, 259], "fixing_code_start_loc": [649, 130], "fixing_code_end_loc": [650, 259], "type": "CWE-79", "message": "Cross Site Scripting vulnerability found in Typecho v.1.2.0 allows a remote attacker to execute arbitrary code via an arbitrarily supplied URL parameter.", "other": {"cve": {"id": "CVE-2023-27130", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-16T15:15:10.453", "lastModified": "2023-03-22T02:14:28.880", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting vulnerability found in Typecho v.1.2.0 allows a remote attacker to execute arbitrary code via an arbitrarily supplied URL parameter."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typecho:typecho:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.0", "matchCriteriaId": "6E76E682-FBFE-4F43-85E0-B59B7ACE52BD"}]}]}], "references": [{"url": "https://github.com/typecho/typecho/commit/f9ede542c9052ba22a6096d8412e2f02d9de872b", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/typecho/typecho/issues/1535", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking"]}]}, "github_commit_url": "https://github.com/typecho/typecho/commit/f9ede542c9052ba22a6096d8412e2f02d9de872b"}}