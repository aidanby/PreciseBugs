{"buggy_code": ["<?php\n\n/**\n* ownCloud\n*\n* @author Frank Karlitschek\n* @copyright 2010 Frank Karlitschek karlitschek@kde.org\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\n$RUNTIME_NOAPPS = TRUE; //no apps, yet\n\nrequire_once('lib/base.php');\n\n// Setup required :\n$not_installed = !OC_Config::getValue('installed', false);\nif($not_installed) {\n\t// Check for autosetup:\n\t$autosetup_file = OC::$SERVERROOT.\"/config/autoconfig.php\";\n\tif( file_exists( $autosetup_file )){\n\t\tOC_Log::write('core','Autoconfig file found, setting up owncloud...',OC_Log::INFO);\n\t\tinclude( $autosetup_file );\n\t\t$_POST['install'] = 'true';\n\t\t$_POST = array_merge ($_POST, $AUTOCONFIG);\n\t        unlink($autosetup_file);\n\t}\n\tOC_Util::addScript('setup');\n\trequire_once('setup.php');\n\texit();\n}\n\n// Handle WebDAV\nif($_SERVER['REQUEST_METHOD']=='PROPFIND'){\n\theader('location: '.OC_Helper::linkToRemote('webdav'));\n\texit();\n}\nelseif(!OC_User::isLoggedIn() && substr(OC::$REQUESTEDFILE,-3) == 'css'){\n\tOC_App::loadApps();\n\tOC::loadfile();\n}\n// Someone is logged in :\nelseif(OC_User::isLoggedIn()) {\n\tOC_App::loadApps();\n\tif(isset($_GET[\"logout\"]) and ($_GET[\"logout\"])) {\n\t\tOC_User::logout();\n\t\theader(\"Location: \".OC::$WEBROOT.'/');\n\t\texit();\n\t}else{\n\t\tif(is_null(OC::$REQUESTEDFILE)){\n\t\t\tOC::loadapp();\n\t\t}else{\n\t\t\tOC::loadfile();\n\t\t}\n\t}\n\n// For all others cases, we display the guest page :\n} else {\n\tOC_App::loadApps();\n\t$error = false;\n\t// remember was checked after last login\n\tif(isset($_COOKIE[\"oc_remember_login\"]) && isset($_COOKIE[\"oc_token\"]) && isset($_COOKIE[\"oc_username\"]) && $_COOKIE[\"oc_remember_login\"]) {\n\t\tif(defined(\"DEBUG\") && DEBUG) {\n\t\t\tOC_Log::write('core','Trying to login from cookie',OC_Log::DEBUG);\n\t\t}\n\t\t// confirm credentials in cookie\n\t\tif(isset($_COOKIE['oc_token']) && OC_User::userExists($_COOKIE['oc_username']) &&\n\t\tOC_Preferences::getValue($_COOKIE['oc_username'], \"login\", \"token\") == $_COOKIE['oc_token']) {\n\t\t\tOC_User::setUserId($_COOKIE['oc_username']);\n\t\t\tOC_Util::redirectToDefaultPage();\n\t\t}\n\t\telse {\n\t\t\tOC_User::unsetMagicInCookie();\n\t\t}\n\n\t// Someone wants to log in :\n\t} elseif(isset($_POST[\"user\"]) and isset($_POST['password']) and isset($_SESSION['sectoken']) and isset($_POST['sectoken']) and ($_SESSION['sectoken']==$_POST['sectoken']) ) {\n\t\tif(OC_User::login($_POST[\"user\"], $_POST[\"password\"])) {\n\t\t\tif(!empty($_POST[\"remember_login\"])){\n\t\t\t\tif(defined(\"DEBUG\") && DEBUG) {\n\t\t\t\t\tOC_Log::write('core','Setting remember login to cookie',OC_Log::DEBUG);\n\t\t\t\t}\n\t\t\t\t$token = md5($_POST[\"user\"].time().$_POST['password']);\n\t\t\t\tOC_Preferences::setValue($_POST['user'], 'login', 'token', $token);\n\t\t\t\tOC_User::setMagicInCookie($_POST[\"user\"], $token);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tOC_User::unsetMagicInCookie();\n\t\t\t}\n\t\t\tOC_Util::redirectToDefaultPage();\n\t\t} else {\n\t\t\t$error = true;\n\t\t}\n\t\n\t// The user is already authenticated using Apaches AuthType Basic... very usable in combination with LDAP\n\t} elseif(isset($_SERVER[\"PHP_AUTH_USER\"]) && isset($_SERVER[\"PHP_AUTH_PW\"])){\n\t\tif (OC_User::login($_SERVER[\"PHP_AUTH_USER\"],$_SERVER[\"PHP_AUTH_PW\"]))\t{\n\t\t\t//OC_Log::write('core',\"Logged in with HTTP Authentication\",OC_Log::DEBUG);\n\t\t\tOC_User::unsetMagicInCookie();\n\t\t\t$_REQUEST['redirect_url'] = (isset($_SERVER['REQUEST_URI'])?$_SERVER['REQUEST_URI']:'');\n\t\t\tOC_Util::redirectToDefaultPage();\n\t\t}else{\n\t\t\t$error = true;\n\t\t}\n\t}\n\tif(!array_key_exists('sectoken', $_SESSION) || (array_key_exists('sectoken', $_SESSION) && is_null(OC::$REQUESTEDFILE)) || substr(OC::$REQUESTEDFILE, -3) == 'php'){\n\t\t$sectoken=rand(1000000,9999999);\n\t\t$_SESSION['sectoken']=$sectoken;\n\t\t$redirect_url = (isset($_REQUEST['redirect_url'])) ? $_REQUEST['redirect_url'] : $_SERVER['REQUEST_URI'];\n\t\tOC_Template::printGuestPage('', 'login', array('error' => $error, 'sectoken' => $sectoken, 'redirect' => $redirect_url));\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n* ownCloud\n*\n* @author Frank Karlitschek\n* @copyright 2010 Frank Karlitschek karlitschek@kde.org\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\n$RUNTIME_NOAPPS = TRUE; //no apps, yet\n\nrequire_once('lib/base.php');\n\n// Setup required :\n$not_installed = !OC_Config::getValue('installed', false);\nif($not_installed) {\n\t// Check for autosetup:\n\t$autosetup_file = OC::$SERVERROOT.\"/config/autoconfig.php\";\n\tif( file_exists( $autosetup_file )){\n\t\tOC_Log::write('core','Autoconfig file found, setting up owncloud...',OC_Log::INFO);\n\t\tinclude( $autosetup_file );\n\t\t$_POST['install'] = 'true';\n\t\t$_POST = array_merge ($_POST, $AUTOCONFIG);\n\t        unlink($autosetup_file);\n\t}\n\tOC_Util::addScript('setup');\n\trequire_once('setup.php');\n\texit();\n}\n\n// Handle WebDAV\nif($_SERVER['REQUEST_METHOD']=='PROPFIND'){\n\theader('location: '.OC_Helper::linkToRemote('webdav'));\n\texit();\n}\nelseif(!OC_User::isLoggedIn() && substr(OC::$REQUESTEDFILE,-3) == 'css'){\n\tOC_App::loadApps();\n\tOC::loadfile();\n}\n// Someone is logged in :\nelseif(OC_User::isLoggedIn()) {\n\tOC_App::loadApps();\n\tif(isset($_GET[\"logout\"]) and ($_GET[\"logout\"])) {\n\t\tOC_User::logout();\n\t\theader(\"Location: \".OC::$WEBROOT.'/');\n\t\texit();\n\t}else{\n\t\tif(is_null(OC::$REQUESTEDFILE)){\n\t\t\tOC::loadapp();\n\t\t}else{\n\t\t\tOC::loadfile();\n\t\t}\n\t}\n\n// For all others cases, we display the guest page :\n} else {\n\tOC_App::loadApps();\n\t$error = false;\n\t// remember was checked after last login\n\tif(isset($_COOKIE[\"oc_remember_login\"]) && isset($_COOKIE[\"oc_token\"]) && isset($_COOKIE[\"oc_username\"]) && $_COOKIE[\"oc_remember_login\"]) {\n\t\tif(defined(\"DEBUG\") && DEBUG) {\n\t\t\tOC_Log::write('core','Trying to login from cookie',OC_Log::DEBUG);\n\t\t}\n\t\t// confirm credentials in cookie\n\t\tif(isset($_COOKIE['oc_token']) && OC_User::userExists($_COOKIE['oc_username']) &&\n\t\tOC_Preferences::getValue($_COOKIE['oc_username'], \"login\", \"token\") == $_COOKIE['oc_token']) {\n\t\t\tOC_User::setUserId($_COOKIE['oc_username']);\n\t\t\tOC_Util::redirectToDefaultPage();\n\t\t}\n\t\telse {\n\t\t\tOC_User::unsetMagicInCookie();\n\t\t}\n\n\t// Someone wants to log in :\n\t} elseif(isset($_POST[\"user\"]) and isset($_POST['password']) and isset($_SESSION['sectoken']) and isset($_POST['sectoken']) and ($_SESSION['sectoken']==$_POST['sectoken']) ) {\n\t\tif(OC_User::login($_POST[\"user\"], $_POST[\"password\"])) {\n\t\t\tif(!empty($_POST[\"remember_login\"])){\n\t\t\t\tif(defined(\"DEBUG\") && DEBUG) {\n\t\t\t\t\tOC_Log::write('core','Setting remember login to cookie',OC_Log::DEBUG);\n\t\t\t\t}\n\t\t\t\t$token = md5($_POST[\"user\"].time().$_POST['password']);\n\t\t\t\tOC_Preferences::setValue($_POST['user'], 'login', 'token', $token);\n\t\t\t\tOC_User::setMagicInCookie($_POST[\"user\"], $token);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tOC_User::unsetMagicInCookie();\n\t\t\t}\n\t\t\tOC_Util::redirectToDefaultPage();\n\t\t} else {\n\t\t\t$error = true;\n\t\t}\n\t\n\t// The user is already authenticated using Apaches AuthType Basic... very usable in combination with LDAP\n\t} elseif(isset($_SERVER[\"PHP_AUTH_USER\"]) && isset($_SERVER[\"PHP_AUTH_PW\"])){\n\t\tif (OC_User::login($_SERVER[\"PHP_AUTH_USER\"],$_SERVER[\"PHP_AUTH_PW\"]))\t{\n\t\t\t//OC_Log::write('core',\"Logged in with HTTP Authentication\",OC_Log::DEBUG);\n\t\t\tOC_User::unsetMagicInCookie();\n\t\t\t$_REQUEST['redirect_url'] = (isset($_SERVER['REQUEST_URI'])?$_SERVER['REQUEST_URI']:'');\n\t\t\tOC_Util::redirectToDefaultPage();\n\t\t}else{\n\t\t\t$error = true;\n\t\t}\n\t}\n\tif(!array_key_exists('sectoken', $_SESSION) || (array_key_exists('sectoken', $_SESSION) && is_null(OC::$REQUESTEDFILE)) || substr(OC::$REQUESTEDFILE, -3) == 'php'){\n\t\t$sectoken=rand(1000000,9999999);\n\t\t$_SESSION['sectoken']=$sectoken;\n\t\t$redirect_url = (isset($_REQUEST['redirect_url'])) ? strip_tags($_REQUEST['redirect_url']) : $_SERVER['REQUEST_URI'];\n\t\tOC_Template::printGuestPage('', 'login', array('error' => $error, 'sectoken' => $sectoken, 'redirect' => $redirect_url));\n\t}\n}\n"], "filenames": ["index.php"], "buggy_code_start_loc": [121], "buggy_code_end_loc": [122], "fixing_code_start_loc": [121], "fixing_code_end_loc": [122], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in index.php in ownCloud before 4.0.3 allows remote attackers to inject arbitrary web script or HTML via the redirect_url parameter.", "other": {"cve": {"id": "CVE-2012-4395", "sourceIdentifier": "secalert@redhat.com", "published": "2012-09-05T23:55:03.007", "lastModified": "2012-09-06T15:39:10.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in index.php in ownCloud before 4.0.3 allows remote attackers to inject arbitrary web script or HTML via the redirect_url parameter."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) en ownCloud anterior a v4.0.3, permite a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s del par\u00e1metro redirect_url"}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.0.2", "matchCriteriaId": "6414E8A4-F82F-44DF-A51A-B1482AE4BFB6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "0A1021FF-2A5A-49AA-A376-09C98FECC519"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "3F6C12F7-5897-4DBB-A9AB-8180101F37C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "E9CC055C-CFA3-4A23-AF91-83F7F087F282"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "8FAE7D90-6190-44E2-B4EA-F47FF3263BE6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "C7BAB402-B6A0-4314-A37A-C9465157BF5E"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2012/08/11/1", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/09/02/2", "source": "secalert@redhat.com"}, {"url": "https://github.com/owncloud/core/commit/0074062b5329c3d43679909fddce2d70608a4475", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/owncloud/core/commit/0074062b5329c3d43679909fddce2d70608a4475"}}