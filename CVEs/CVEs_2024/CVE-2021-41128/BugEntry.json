{"buggy_code": ["defmodule Hygeia.CaseContext do\n  @moduledoc \"\"\"\n  The CaseContext context.\n  \"\"\"\n\n  use Hygeia, :context\n\n  alias Hygeia.CaseContext.Case\n  alias Hygeia.CaseContext.ExternalReference\n  alias Hygeia.CaseContext.Hospitalization\n  alias Hygeia.CaseContext.Note\n  alias Hygeia.CaseContext.Person\n  alias Hygeia.CaseContext.Person.ContactMethod\n  alias Hygeia.CaseContext.PossibleIndexSubmission\n  alias Hygeia.CaseContext.PrematureRelease\n  alias Hygeia.CaseContext.Test\n  alias Hygeia.CaseContext.Transmission\n  alias Hygeia.CommunicationContext.Email\n  alias Hygeia.CommunicationContext.SMS\n  alias Hygeia.EctoType.Country\n  alias Hygeia.TenantContext.Tenant\n\n  @origin_country Application.compile_env!(:hygeia, [:phone_number_parsing_origin_country])\n\n  @doc \"\"\"\n  Returns the list of people.\n\n  ## Examples\n\n      iex> list_people()\n      [%Person{}, ...]\n\n  \"\"\"\n  @spec list_people(limit :: pos_integer()) :: [Person.t()]\n  def list_people(limit \\\\ 20), do: Repo.all(from(person in Person, limit: ^limit))\n\n  @spec list_people_by_ids(ids :: [String.t()]) :: [Person.t()]\n  def list_people_by_ids(ids), do: Repo.all(from(person in Person, where: person.uuid in ^ids))\n\n  @spec list_people_query :: Ecto.Queryable.t()\n  def list_people_query, do: Person\n\n  @spec find_duplicates(\n          search :: [\n            %{\n              uuid: Ecto.UUID.t(),\n              first_name: String.t() | nil,\n              last_name: String.t(),\n              mobile: String.t() | nil,\n              email: String.t() | nil\n            }\n          ]\n        ) :: %{required(uuid :: Ecto.UUID.t()) => [person_id :: Ecto.UUID.t()]}\n  def find_duplicates([]), do: %{}\n\n  def find_duplicates(search) when is_list(search) do\n    \"search\"\n    |> with_cte(\"search\",\n      as:\n        fragment(\n          \"\"\"\n          SELECT search->>'uuid' AS uuid, duplicate.uuid AS person_uuid\n          FROM JSONB_ARRAY_ELEMENTS(?::jsonb) AS search\n          LEFT JOIN people AS duplicate ON\n              (\n                  duplicate.first_name % (search->>'first_name')::text AND\n                  duplicate.last_name % (search->>'last_name')::text\n              ) OR\n              JSONB_BUILD_OBJECT('type', 'mobile', 'value', search->>'mobile') <@ ANY (duplicate.contact_methods) OR\n              JSONB_BUILD_OBJECT('type', 'landline', 'value', search->>'landline') <@ ANY (duplicate.contact_methods) OR\n              JSONB_BUILD_OBJECT('type', 'email', 'value', search->>'email') <@ ANY (duplicate.contact_methods)\n          GROUP BY search->>'uuid', duplicate.uuid\n          \"\"\",\n          ^search\n        )\n    )\n    |> select([s], {type(s.uuid, Ecto.UUID), type(s.person_uuid, Ecto.UUID)})\n    |> Repo.all()\n    |> Enum.group_by(&elem(&1, 0), &elem(&1, 1))\n    |> Map.new(fn {key, duplicates} ->\n      {key, Enum.reject(duplicates, &is_nil/1)}\n    end)\n  end\n\n  @spec list_people_by_contact_method(type :: ContactMethod.Type.t(), value :: String.t()) :: [\n          Person.t()\n        ]\n\n  def list_people_by_contact_method(type, value) when type in [:mobile, :landline] do\n    with {:ok, parsed_number} <-\n           ExPhoneNumber.parse(value, @origin_country),\n         true <- ExPhoneNumber.is_valid_number?(parsed_number) do\n      _list_people_by_contact_method(\n        type,\n        ExPhoneNumber.Formatting.format(parsed_number, :international)\n      )\n    else\n      false -> []\n      {:error, _reason} -> []\n    end\n  end\n\n  def list_people_by_contact_method(type, value), do: _list_people_by_contact_method(type, value)\n\n  defp _list_people_by_contact_method(type, value),\n    do:\n      Repo.all(\n        from(person in Person,\n          where:\n            fragment(\n              ~S[?::jsonb <@ ANY (?)],\n              ^%{type: type, value: value},\n              person.contact_methods\n            )\n        )\n      )\n\n  @spec list_people_by_external_reference(type :: ExternalReference.Type.t(), value: String.t()) ::\n          [\n            Case.t()\n          ]\n  def list_people_by_external_reference(type, value),\n    do:\n      Repo.all(\n        from(person in Person,\n          where:\n            fragment(\n              ~S[?::jsonb <@ ANY (?)],\n              ^%{type: type, value: value},\n              person.external_references\n            )\n        )\n      )\n\n  @spec list_cases_by_external_reference(type :: ExternalReference.Type.t(), value: String.t()) ::\n          [\n            Case.t()\n          ]\n  def list_cases_by_external_reference(type, value),\n    do:\n      Repo.all(\n        from(case in Case,\n          where:\n            fragment(\n              ~S[?::jsonb <@ ANY (?)],\n              ^%{type: type, value: value},\n              case.external_references\n            )\n        )\n      )\n\n  @spec list_people_by_name(first_name :: String.t(), last_name :: String.t()) :: [Person.t()]\n  def list_people_by_name(first_name, last_name),\n    do:\n      Repo.all(\n        from(person in Person,\n          where:\n            fragment(\"(? % ?)\", person.first_name, ^first_name) and\n              fragment(\"(? % ?)\", person.last_name, ^last_name),\n          order_by: [\n            asc:\n              fragment(\"(? <-> ?)\", person.first_name, ^first_name) +\n                fragment(\"(? <-> ?)\", person.last_name, ^last_name)\n          ]\n        )\n      )\n\n  @spec fulltext_person_search(query :: String.t(), limit :: pos_integer()) :: [Person.t()]\n  def fulltext_person_search(query, limit \\\\ 10),\n    do: Repo.all(fulltext_person_search_query(query, limit))\n\n  @spec fulltext_person_search_query(query :: String.t(), limit :: pos_integer()) ::\n          Ecto.Query.t()\n  def fulltext_person_search_query(query, limit \\\\ 10),\n    do:\n      from(person in Person,\n        where: fragment(\"?.fulltext @@ WEBSEARCH_TO_TSQUERY('german', ?)\", person, ^query),\n        order_by: [\n          desc:\n            fragment(\n              \"TS_RANK_CD(?.fulltext, WEBSEARCH_TO_TSQUERY('german', ?))\",\n              person,\n              ^query\n            )\n        ],\n        limit: ^limit\n      )\n\n  @doc \"\"\"\n  Gets a single person.\n\n  Raises `Ecto.NoResultsError` if the Person does not exist.\n\n  ## Examples\n\n      iex> get_person!(123)\n      %Person{}\n\n      iex> get_person!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_person!(id :: Ecto.UUID.t()) :: Person.t()\n  def get_person!(id), do: Repo.get!(Person, id)\n\n  @doc \"\"\"\n  Creates a person.\n\n  ## Examples\n\n      iex> create_person(%{field: value})\n      {:ok, %Person{}}\n\n      iex> create_person(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_person(tenant :: Tenant.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def create_person(%Tenant{} = tenant, attrs),\n    do:\n      tenant\n      |> change_new_person(attrs)\n      |> create_person()\n\n  @spec create_person(changeset :: Ecto.Changeset.t(Person.t())) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def create_person(%Ecto.Changeset{data: %Person{}} = changeset),\n    do:\n      changeset\n      |> Person.changeset(%{})\n      |> versioning_insert()\n      |> broadcast(\"people\", :create)\n      |> versioning_extract()\n\n  @spec person_has_mobile_number?(person :: Person.t()) :: boolean\n  def person_has_mobile_number?(%Person{contact_methods: contact_methods} = _person),\n    do: Enum.any?(contact_methods, &match?(%ContactMethod{type: :mobile}, &1))\n\n  @spec person_has_email?(person :: Person.t()) :: boolean\n  def person_has_email?(%Person{contact_methods: contact_methods} = _person),\n    do: Enum.any?(contact_methods, &match?(%ContactMethod{type: :email}, &1))\n\n  @doc \"\"\"\n  Updates a person.\n\n  ## Examples\n\n      iex> update_person(person, %{field: new_value})\n      {:ok, %Person{}}\n\n      iex> update_person(person, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_person(\n          person :: Person.t() | Ecto.Changeset.t(Person.t()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          opts :: Person.changeset_options()\n        ) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def update_person(person, attrs \\\\ %{}, changeset_opts \\\\ %{})\n\n  def update_person(%Person{} = person, attrs, changeset_opts),\n    do:\n      person\n      |> change_person(attrs, changeset_opts)\n      |> update_person(%{}, changeset_opts)\n\n  def update_person(%Ecto.Changeset{data: %Person{}} = changeset, attrs, changeset_opts),\n    do:\n      changeset\n      |> change_person(attrs, changeset_opts)\n      |> versioning_update()\n      |> broadcast(\"people\", :update)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a person.\n\n  ## Examples\n\n      iex> delete_person(person)\n      {:ok, %Person{}}\n\n      iex> delete_person(person)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_person(person :: Person.t()) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def delete_person(%Person{} = person),\n    do:\n      person\n      |> change_person()\n      |> versioning_delete()\n      |> broadcast(\"people\", :delete)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking person changes.\n\n  ## Examples\n\n      iex> change_person(person)\n      %Ecto.Changeset{data: %Person{}}\n\n  \"\"\"\n  @spec change_person(\n          person :: Person.t() | Person.empty() | Changeset.t(Person.t() | Person.empty()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          opts :: Person.changeset_options()\n        ) ::\n          Ecto.Changeset.t(Person.t())\n  def change_person(person, attrs \\\\ %{}, opts \\\\ %{})\n  def change_person(%Person{} = person, attrs, opts), do: Person.changeset(person, attrs, opts)\n\n  def change_person(%Changeset{data: %Person{}} = person, attrs, opts),\n    do: Person.changeset(person, attrs, opts)\n\n  @spec change_new_person(tenant :: Tenant.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          Ecto.Changeset.t(Person.t())\n  def change_new_person(tenant, attrs \\\\ %{}) do\n    tenant\n    |> Ecto.build_assoc(:people)\n    |> change_person(attrs)\n  end\n\n  @doc \"\"\"\n  Returns the list of cases.\n\n  ## Examples\n\n      iex> list_cases()\n      [%Case{}, ...]\n\n  \"\"\"\n  @spec list_cases(limit :: pos_integer()) :: [Case.t()]\n  def list_cases(limit \\\\ 20), do: Repo.all(from(c in list_cases_query(), limit: ^limit))\n\n  @spec list_cases_query :: Ecto.Queryable.t()\n  def list_cases_query, do: Case\n\n  @spec list_cases_for_automated_closed_email :: [{Case.t(), Case.Phase.t()}]\n  def list_cases_for_automated_closed_email do\n    from(case in Case,\n      join: phase in fragment(\"UNNEST(?)\", case.phases),\n      where:\n        fragment(\"(?->>'quarantine_order')::boolean\", phase) and\n          fragment(\"(?->>'end')::date\", phase) <= fragment(\"CURRENT_DATE\") and\n          fragment(\"(?->'send_automated_close_email')::boolean\", phase) and\n          is_nil(fragment(\"?->>'automated_close_email_sent'\", phase)),\n      select: {case, fragment(\"(?->>'uuid')::uuid\", phase)},\n      lock: \"FOR UPDATE\"\n    )\n    |> Repo.all()\n    |> Enum.map(fn {%Case{phases: phases} = case, phase_binary_uuid} ->\n      phase_uuid = Ecto.UUID.cast!(phase_binary_uuid)\n      {case, Enum.find(phases, &match?(%Case.Phase{uuid: ^phase_uuid}, &1))}\n    end)\n  end\n\n  @spec fulltext_case_search(query :: String.t(), limit :: pos_integer()) :: [Case.t()]\n  def fulltext_case_search(query, limit \\\\ 10),\n    do: Repo.all(fulltext_case_search_query(query, limit))\n\n  @spec fulltext_case_search_query(query :: String.t(), limit :: pos_integer()) :: Ecto.Query.t()\n  def fulltext_case_search_query(query, limit \\\\ 10),\n    do:\n      from(case in Case,\n        join: person in assoc(case, :person),\n        where:\n          fragment(\"?.fulltext @@ WEBSEARCH_TO_TSQUERY('german', ?)\", person, ^query) or\n            fragment(\"?.fulltext @@ WEBSEARCH_TO_TSQUERY('german', ?)\", case, ^query),\n        order_by: [\n          desc:\n            max(\n              fragment(\n                \"TS_RANK_CD((?.fulltext || ?.fulltext), WEBSEARCH_TO_TSQUERY('german', ?))\",\n                case,\n                person,\n                ^query\n              )\n            )\n        ],\n        group_by: case.uuid,\n        limit: ^limit\n      )\n\n  def case_export(teant, type, extended \\\\ false)\n\n  @bag_med_16122020_case_fields [\n    :fall_id_ism,\n    :ktn_internal_id,\n    :last_name,\n    :first_name,\n    :street_name,\n    :street_number,\n    :location,\n    :postal_code,\n    :country,\n    :phone_number,\n    :mobile_number,\n    :e_mail_address,\n    :sex,\n    :date_of_birth,\n    :profession,\n    :work_place_name,\n    :work_place_street,\n    :work_place_street_number,\n    :work_place_location,\n    :work_place_postal_code,\n    :work_place_country,\n    :symptoms_yn,\n    :test_reason_symptoms,\n    :test_reason_outbreak,\n    :test_reason_cohort,\n    :test_reason_work_screening,\n    :test_reason_quarantine,\n    :test_reason_app,\n    :test_reason_convenience,\n    :symptom_onset_dt,\n    :sampling_dt,\n    :lab_report_dt,\n    :test_type,\n    :test_result,\n    :exp_type,\n    :case_link_yn,\n    :case_link_contact_dt,\n    :case_link_fall_id_ism,\n    :case_link_ktn_internal_id,\n    :exp_loc_dt,\n    :exp_loc_type_yn,\n    :activity_mapping_yn,\n    :exp_country,\n    :exp_loc_type_work_place,\n    :exp_loc_type_army,\n    :exp_loc_type_asyl,\n    :exp_loc_type_choir,\n    :exp_loc_type_club,\n    :exp_loc_type_hh,\n    :exp_loc_type_high_school,\n    :exp_loc_type_childcare,\n    :exp_loc_type_erotica,\n    :exp_loc_type_flight,\n    :exp_loc_type_medical,\n    :exp_loc_type_hotel,\n    :exp_loc_type_child_home,\n    :exp_loc_type_cinema,\n    :exp_loc_type_shop,\n    :exp_loc_type_school,\n    :exp_loc_type_less_300,\n    :exp_loc_type_more_300,\n    :exp_loc_type_public_transp,\n    :exp_loc_type_massage,\n    :exp_loc_type_nursing_home,\n    :exp_loc_type_religion,\n    :exp_loc_type_restaurant,\n    :exp_loc_type_school_camp,\n    :exp_loc_type_indoor_sport,\n    :exp_loc_type_outdoor_sport,\n    :exp_loc_type_gathering,\n    :exp_loc_type_zoo,\n    :exp_loc_type_prison,\n    :other_exp_loc_type_yn,\n    :other_exp_loc_type,\n    :exp_loc_type_less_300_detail,\n    :exp_loc_type_more_300_detail,\n    :exp_loc_name,\n    :exp_loc_street,\n    :exp_loc_street_number,\n    :exp_loc_location,\n    :exp_loc_postal_code,\n    :exp_loc_flightdetail,\n    :corr_ct_dt,\n    :quar_yn,\n    :onset_quar_dt,\n    :reason_quar,\n    :other_reason_quar,\n    :onset_iso_dt,\n    :iso_loc_type,\n    :other_iso_loc,\n    :iso_loc_street,\n    :iso_loc_street_number,\n    :iso_loc_location,\n    :iso_loc_postal_code,\n    :iso_loc_country,\n    :follow_up_dt,\n    :end_of_iso_dt,\n    :reason_end_of_iso,\n    :other_reason_end_of_iso,\n    :vacc_yn,\n    :vacc_name,\n    :vacc_dose,\n    :vacc_dt_first,\n    :vacc_dt_last\n  ]\n\n  @bag_med_16122020_case_fields_index @bag_med_16122020_case_fields\n                                      |> Enum.with_index()\n                                      |> Map.new()\n\n  @spec case_export(tenant :: Tenant.t(), format :: :bag_med_16122020_case, extended :: boolean) ::\n          Enumerable.t()\n  # credo:disable-for-next-line Credo.Check.Refactor.ABCSize\n  def case_export(%Tenant{uuid: tenant_uuid} = _teant, :bag_med_16122020_case, _extended) do\n    first_transmission_query =\n      from(transmission in Transmission,\n        select: %{\n          uuid:\n            fragment(\n              \"\"\"\n              FIRST_VALUE(?)\n              OVER(\n                PARTITION BY ?\n                ORDER BY ?\n              )\n              \"\"\",\n              transmission.uuid,\n              transmission.recipient_case_uuid,\n              transmission.inserted_at\n            ),\n          case_uuid: transmission.recipient_case_uuid\n        }\n      )\n\n    cases =\n      from(case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        left_join: case_ism_id in fragment(\"UNNEST(?)\", case.external_references),\n        on: fragment(\"?->>'type'\", case_ism_id) == \"ism_case\",\n        left_join: possible_index_phase in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", possible_index_phase) ==\n            \"possible_index\",\n        left_join: index_phase in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", index_phase) ==\n            \"index\",\n        left_join: possible_index_phase_contact_person in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", possible_index_phase_contact_person) ==\n            \"possible_index\" and\n            fragment(\"?->'details'->>'type'\", possible_index_phase_contact_person) ==\n              \"contact_person\",\n        left_join: possible_index_phase_travel in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", possible_index_phase_travel) == \"possible_index\" and\n            fragment(\"?->'details'->>'type'\", possible_index_phase_travel) == \"travel\",\n        join: person in assoc(case, :person),\n        left_join: mobile_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", mobile_contact_method) == \"mobile\",\n        left_join: landline_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", landline_contact_method) == \"landline\",\n        left_join: email_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", email_contact_method) == \"email\",\n        left_join: received_transmission_id in subquery(first_transmission_query),\n        on: received_transmission_id.case_uuid == case.uuid,\n        left_join: received_transmission in assoc(case, :received_transmissions),\n        on: received_transmission.uuid == received_transmission_id.uuid,\n        left_join: received_transmission_case in assoc(received_transmission, :propagator_case),\n        left_join:\n          received_transmission_case_ism_id in fragment(\n            \"UNNEST(?)\",\n            received_transmission_case.external_references\n          ),\n        on: fragment(\"?->>'type'\", received_transmission_case_ism_id) == \"ism_case\",\n        left_join: email in assoc(case, :emails),\n        left_join: sms in assoc(case, :sms),\n        left_join: employer in assoc(person, :employers),\n        left_join: test in assoc(case, :tests),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"index\",\n        group_by: [case.uuid, person.uuid],\n        order_by: [asc: case.inserted_at],\n        select: [\n          # fall_id_ism\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'value'\", case_ism_id)),\n          # ktn_internal_id\n          type(case.uuid, Ecto.UUID),\n          # last_name\n          person.last_name,\n          # first_name\n          person.first_name,\n          # street_name\n          fragment(\"?->>'address'\", person.address),\n          # street_number\n          ^nil,\n          # location\n          fragment(\"?->>'place'\", person.address),\n          # postal_code\n          fragment(\"?->>'zip'\", person.address),\n          # country\n          fragment(\"?->>'country'\", person.address),\n          # phone_number\n          max(fragment(\"?->>'value'\", landline_contact_method)),\n          # mobile_number\n          max(fragment(\"?->>'value'\", mobile_contact_method)),\n          # e_mail_address\n          max(fragment(\"?->>'value'\", email_contact_method)),\n          # sex\n          person.sex,\n          # date_of_birth\n          person.birth_date,\n          # profession\n          person.profession_category_main,\n          # work_place_name\n          fragment(\"(ARRAY_AGG(?))[1]\", employer.name),\n          # work_place_street\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'address'\", employer.address)),\n          # work_place_street_number\n          ^nil,\n          # work_place_location\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'place'\", employer.address)),\n          # work_place_postal_code\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'zip'\", employer.address)),\n          # work_place_country\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'country'\", employer.address)),\n          # symptoms_yn\n          fragment(\"?->'has_symptoms'\", case.clinical),\n          # test_reason_symptoms\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"symptoms\"),\n          # test_reason_outbreak\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"outbreak_examination\"),\n          # test_reason_cohort\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"screening\"),\n          # test_reason_work_screening\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"work_related\"),\n          # test_reason_quarantine\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"quarantine\"),\n          # test_reason_app\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"app_report\"),\n          # test_reason_convenience\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"convenience\"),\n          # symptom_onset_dt\n          fragment(\"(?->>'symptom_start')\", case.clinical),\n          # sampling_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", test.tested_at),\n          # lab_report_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", test.laboratory_reported_at),\n          # test_type\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.kind), Test.Kind),\n          # test_result\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.result), Test.Result),\n          # exp_type\n          type(\n            fragment(\n              \"\"\"\n              CASE\n                WHEN ? THEN ?\n                WHEN ? THEN ?\n              END\n              \"\"\",\n              count(fragment(\"?->>'uuid'\", possible_index_phase_contact_person), :distinct) > 0,\n              \"contact_person\",\n              count(fragment(\"?->>'uuid'\", possible_index_phase_travel), :distinct) > 0,\n              \"travel\"\n            ),\n            Case.Phase.PossibleIndex.Type\n          ),\n          # case_link_yn\n          count(received_transmission.uuid) > 0,\n          # case_link_contact_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # case_link_fall_id_ism\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\n              \"\"\"\n              CASE\n                WHEN ? THEN ?\n                WHEN ? THEN ?\n              END\n              \"\"\",\n              not received_transmission.propagator_internal,\n              received_transmission.propagator_ism_id,\n              received_transmission.propagator_internal,\n              fragment(\"?->>'value'\", received_transmission_case_ism_id)\n            )\n          ),\n          # case_link_ktn_internal_id\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.propagator_case_uuid),\n            Ecto.UUID\n          ),\n          # exp_loc_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # exp_loc_type_yn\n          fragment(\"(ARRAY_AGG(?->'known'))[1]\", received_transmission.infection_place),\n          # activity_mapping_yn\n          fragment(\n            \"\"\"\n            CASE\n              WHEN ? THEN ?\n              WHEN ? THEN ?\n              WHEN ? THEN ?\n              ELSE ?\n            END\n            \"\"\",\n            case.status == :canceled,\n            false,\n            case.status == :first_contact,\n            nil,\n            case.status == :first_contact_unreachable,\n            false,\n            true\n          ),\n          # exp_country\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'address'->'country'\", received_transmission.infection_place)\n          ),\n          # exp_loc_type_work_place\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"work_place\"\n          ),\n          # exp_loc_type_army\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"army\"\n          ),\n          # exp_loc_type_asyl\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"asyl\"\n          ),\n          # exp_loc_type_choir\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"choir\"\n          ),\n          # exp_loc_type_club\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"club\"\n          ),\n          # exp_loc_type_hh\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hh\"\n          ),\n          # exp_loc_type_high_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"high_school\"\n          ),\n          # exp_loc_type_childcare\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"childcare\"\n          ),\n          # exp_loc_type_erotica\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"erotica\"\n          ),\n          # exp_loc_type_flight\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"flight\"\n          ),\n          # exp_loc_type_medical\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"medical\"\n          ),\n          # exp_loc_type_hotel\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hotel\"\n          ),\n          # exp_loc_type_child_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"child_home\"\n          ),\n          # exp_loc_type_cinema\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"cinema\"\n          ),\n          # exp_loc_type_shop\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"shop\"\n          ),\n          # exp_loc_type_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school\"\n          ),\n          # exp_loc_type_less_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"less_300\"\n          ),\n          # exp_loc_type_more_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"more_300\"\n          ),\n          # exp_loc_type_public_transp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"public_transp\"\n          ),\n          # exp_loc_type_massage\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"massage\"\n          ),\n          # exp_loc_type_nursing_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"nursing_home\"\n          ),\n          # exp_loc_type_religion\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"religion\"\n          ),\n          # exp_loc_type_restaurant\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"restaurant\"\n          ),\n          # exp_loc_type_school_camp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school_camp\"\n          ),\n          # exp_loc_type_indoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"indoor_sport\"\n          ),\n          # exp_loc_type_outdoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"outdoor_sport\"\n          ),\n          # exp_loc_type_gathering\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"gathering\"\n          ),\n          # exp_loc_type_zoo\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"zoo\"\n          ),\n          # exp_loc_type_prison\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"prison\"\n          ),\n          # other_exp_loc_type_yn\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"other\"\n          ),\n          # other_exp_loc_type\n          fragment(\"(ARRAY_AGG(?->'type_other'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_less_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_more_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_name\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_street\n          fragment(\n            \"(ARRAY_AGG(?->'address'->'address'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_street_number\n          ^nil,\n          # exp_loc_location\n          fragment(\n            \"(ARRAY_AGG(?->'address'->>'place'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_postal_code\n          fragment(\"(ARRAY_AGG(?->'address'->>'zip'))[1]\", received_transmission.infection_place),\n          # exp_loc_flightdetail\n          fragment(\n            \"(ARRAY_AGG(?->>'flight_information'))[1]\",\n            received_transmission.infection_place\n          ),\n          # corr_ct_dt\n          fragment(\"?->>'first_contact'\", case.monitoring),\n          # quar_yn\n          sum(\n            fragment(\n              \"CASE WHEN (?->>'quarantine_order')::boolean THEN 1 ELSE 0 END\",\n              possible_index_phase\n            )\n          ) > 0,\n          # onset_quar_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'start'\", possible_index_phase)),\n          # reason_quar\n          type(\n            fragment(\n              \"(ARRAY_AGG(?))[1]\",\n              fragment(\"?->'details'->>'type'\", possible_index_phase)\n            ),\n            Case.Phase.PossibleIndex.Type\n          ),\n          # other_reason_quar\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'details'->>'type_other'\", possible_index_phase)\n          ),\n          # onset_iso_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'start'\", index_phase)),\n          # iso_loc_type\n          type(\n            fragment(\"(?->>'location')\", case.monitoring),\n            Case.Monitoring.IsolationLocation\n          ),\n          # other_iso_loc\n          fragment(\"?->>'location_details'\", case.monitoring),\n          # iso_loc_street\n          fragment(\"?->'address'->>'address'\", case.monitoring),\n          # iso_loc_street_number\n          ^nil,\n          # iso_loc_location\n          fragment(\"?->'address'->>'place'\", case.monitoring),\n          # iso_loc_postal_code\n          fragment(\"?->'address'->>'zip'\", case.monitoring),\n          # iso_loc_country\n          fragment(\"?->'address'->>'country'\", case.monitoring),\n          # follow_up_dt\n          fragment(\n            \"GREATEST(?, ?)\",\n            fragment(\"(?)::date\", max(sms.inserted_at)),\n            fragment(\"(?)::date\", max(email.inserted_at))\n          ),\n          # end_of_iso_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'end'\", index_phase)),\n          # reason_end_of_iso\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->'detail'->>'end_reason'\", index_phase)),\n          # other_reason_end_of_iso\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'detail'->>'other_end_reason'\", index_phase)\n          ),\n          # vacc_yn\n          fragment(\"(?->>'done')::boolean\", person.vaccination),\n          # vacc_name\n          fragment(\"?->>'name'\", person.vaccination),\n          # vacc_dose\n          fragment(\n            \"CASE WHEN ? THEN ? ELSE ? END\",\n            is_nil(fragment(\"?->>'jab_dates'\", person.vaccination)),\n            nil,\n            fragment(\"JSONB_ARRAY_LENGTH(?)\", fragment(\"?->'jab_dates'\", person.vaccination))\n          ),\n          # vacc_dt_first\n          fragment(\"(?->'jab_dates'->>0)\", person.vaccination),\n          # vacc_dt_last\n          fragment(\"(?->'jab_dates'->>-1)\", person.vaccination)\n        ]\n      )\n      |> Repo.stream()\n      |> Stream.map(fn entry ->\n        entry\n        |> normalize_ism_id(@bag_med_16122020_case_fields_index.fall_id_ism)\n        |> normalize_ism_id(@bag_med_16122020_case_fields_index.case_link_fall_id_ism)\n        |> List.update_at(@bag_med_16122020_case_fields_index.phone_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.mobile_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.sex, fn\n          nil -> nil\n          :male -> 1\n          :female -> 2\n          :other -> 3\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.iso_loc_type, fn\n          nil -> 6\n          :home -> 1\n          :social_medical_facility -> 2\n          :hospital -> 3\n          :hotel -> 4\n          :asylum_center -> 5\n          :other -> 7\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.exp_type, fn\n          nil -> nil\n          :contact_person -> 1\n          :travel -> 2\n        end)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_symptoms)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_outbreak)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_cohort)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_work_screening)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_quarantine)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_app)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_convenience)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_work_place)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_army)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_asyl)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_choir)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_club)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_hh)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_high_school)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_childcare)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_erotica)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_flight)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_medical)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_hotel)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_child_home)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_cinema)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_shop)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_school)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_less_300)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_more_300)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_public_transp)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_massage)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_nursing_home)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_religion)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_restaurant)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_school_camp)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_indoor_sport)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_outdoor_sport)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_gathering)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_zoo)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_prison)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.other_exp_loc_type_yn)\n        |> normalize_boolean_and_unknown_field(\n          @bag_med_16122020_case_fields_index.activity_mapping_yn\n        )\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.symptoms_yn)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.case_link_yn)\n        |> List.update_at(@bag_med_16122020_case_fields_index.test_type, fn\n          nil -> 5\n          :pcr -> 1\n          :serology -> 5\n          :quick -> 2\n          :antigen_quick -> 3\n          :antigen -> 4\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.test_result, fn\n          :positive -> 1\n          :negative -> 2\n          :inconclusive -> 3\n          nil -> 3\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.reason_end_of_iso, fn\n          # :other -> 4\n          nil -> nil\n          :healed -> 1\n          :death -> 2\n          :no_follow_up -> 3\n        end)\n        |> normalize_boolean_and_unknown_field(@bag_med_16122020_case_fields_index.vacc_yn)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_yn)\n        |> normalize_boolean_and_unknown_field(@bag_med_16122020_case_fields_index.quar_yn)\n        |> normalize_country(@bag_med_16122020_case_fields_index.country)\n        |> normalize_country(@bag_med_16122020_case_fields_index.work_place_country)\n        |> normalize_country(@bag_med_16122020_case_fields_index.exp_country)\n        |> normalize_country(@bag_med_16122020_case_fields_index.iso_loc_country)\n        |> List.update_at(@bag_med_16122020_case_fields_index.reason_quar, fn\n          nil -> nil\n          :contact_person -> 1\n          :travel -> 2\n          :outbreak -> 3\n          :covid_app -> 4\n          :other -> 5\n        end)\n      end)\n\n    [@bag_med_16122020_case_fields]\n    |> Stream.concat(cases)\n    |> CSV.encode()\n  end\n\n  @bag_med_16122020_contact_fields [\n    :ktn_internal_id,\n    :last_name,\n    :first_name,\n    :street_name,\n    :street_number,\n    :location,\n    :postal_code,\n    :country,\n    :phone_number,\n    :mobile_number,\n    :sex,\n    :date_of_birth,\n    :profession,\n    :work_place_name,\n    :work_place_postal_code,\n    :work_place_country,\n    :quar_loc_type,\n    :other_quar_loc_type,\n    :exp_type,\n    :case_link_fall_id_ism,\n    :case_link_ktn_internal_id,\n    :case_link_contact_dt,\n    :hygeia_case_link_region_subdivision,\n    :exp_loc_dt,\n    :exp_country,\n    :exp_loc_type_work_place,\n    :exp_loc_type_army,\n    :exp_loc_type_asyl,\n    :exp_loc_type_choir,\n    :exp_loc_type_club,\n    :exp_loc_type_hh,\n    :exp_loc_type_high_school,\n    :exp_loc_type_childcare,\n    :exp_loc_type_erotica,\n    :exp_loc_type_flight,\n    :exp_loc_type_medical,\n    :exp_loc_type_hotel,\n    :exp_loc_type_child_home,\n    :exp_loc_type_cinema,\n    :exp_loc_type_shop,\n    :exp_loc_type_school,\n    :exp_loc_type_less_300,\n    :exp_loc_type_more_300,\n    :exp_loc_type_public_transp,\n    :exp_loc_type_massage,\n    :exp_loc_type_nursing_home,\n    :exp_loc_type_religion,\n    :exp_loc_type_restaurant,\n    :exp_loc_type_school_camp,\n    :exp_loc_type_indoor_sport,\n    :exp_loc_type_outdoor_sport,\n    :exp_loc_type_gathering,\n    :exp_loc_type_zoo,\n    :exp_loc_type_prison,\n    :other_exp_loc_type_yn,\n    :other_exp_loc_type,\n    :exp_loc_type_less_300_detail,\n    :exp_loc_type_more_300_detail,\n    :exp_loc_name,\n    :exp_loc_street,\n    :exp_loc_street_number,\n    :exp_loc_location,\n    :exp_loc_postal_code,\n    :exp_loc_flightdetail,\n    :test_reason_symptoms,\n    :test_reason_quarantine,\n    :test_reason_quarantine_end,\n    :other_test_reason,\n    :symptom_onset_dt,\n    :test_type,\n    :sampling_dt,\n    :test_result,\n    :onset_quar_dt,\n    :end_quar_dt,\n    :reason_end_quar,\n    :other_reason_end_quar,\n    :vacc_yn,\n    :vacc_name,\n    :vacc_dose,\n    :vacc_dt_first,\n    :vacc_dt_last\n  ]\n\n  @extended_fields [:hygeia_case_link_region_subdivision]\n                   |> Enum.map(fn field ->\n                     Enum.find_index(@bag_med_16122020_contact_fields, &(field == &1))\n                   end)\n                   |> Enum.sort(:desc)\n\n  @bag_med_16122020_contact_fields_index @bag_med_16122020_contact_fields\n                                         |> Enum.with_index()\n                                         |> Map.new()\n\n  @spec case_export(\n          tenant :: Tenant.t(),\n          format :: :bag_med_16122020_contact,\n          extended :: boolean\n        ) :: Enumerable.t()\n  # credo:disable-for-lines:2 Credo.Check.Refactor.ABCSize\n  # credo:disable-for-next-line Credo.Check.Refactor.CyclomaticComplexity\n  def case_export(%Tenant{uuid: tenant_uuid} = _teant, :bag_med_16122020_contact, extended) do\n    first_transmission_query =\n      from(transmission in Transmission,\n        select: %{\n          uuid:\n            fragment(\n              \"\"\"\n              FIRST_VALUE(?)\n              OVER(\n                PARTITION BY ?\n                ORDER BY ?\n              )\n              \"\"\",\n              transmission.uuid,\n              transmission.recipient_case_uuid,\n              transmission.inserted_at\n            ),\n          case_uuid: transmission.recipient_case_uuid\n        }\n      )\n\n    cases =\n      from(case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        left_join: phase_index in fragment(\"UNNEST(?)\", case.phases),\n        on: fragment(\"?->'details'->>'__type__'\", phase_index) == \"index\",\n        join: person in assoc(case, :person),\n        left_join: mobile_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", mobile_contact_method) == \"mobile\",\n        left_join: landline_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", landline_contact_method) == \"landline\",\n        left_join: received_transmission_id in subquery(first_transmission_query),\n        on: received_transmission_id.case_uuid == case.uuid,\n        left_join: received_transmission in assoc(case, :received_transmissions),\n        on: received_transmission.uuid == received_transmission_id.uuid,\n        left_join: received_transmission_case in assoc(received_transmission, :propagator_case),\n        left_join:\n          received_transmission_case_tenant in assoc(received_transmission_case, :tenant),\n        left_join:\n          received_transmission_case_ism_id in fragment(\n            \"UNNEST(?)\",\n            received_transmission_case.external_references\n          ),\n        on: fragment(\"?->>'type'\", received_transmission_case_ism_id) == \"ism_case\",\n        left_join: employer in assoc(person, :employers),\n        left_join: test in assoc(case, :tests),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"possible_index\",\n        group_by: [case.uuid, person.uuid],\n        order_by: [asc: case.inserted_at],\n        select: [\n          # ktn_internal_id\n          type(case.uuid, Ecto.UUID),\n          # last_name\n          person.last_name,\n          # first_name\n          person.first_name,\n          # street_name\n          fragment(\"?->>'address'\", person.address),\n          # street_number\n          ^nil,\n          # location\n          fragment(\"?->>'place'\", person.address),\n          # postal_code\n          fragment(\"?->>'zip'\", person.address),\n          # country\n          fragment(\"?->>'country'\", person.address),\n          # phone_number\n          max(fragment(\"?->>'value'\", landline_contact_method)),\n          # mobile_number\n          max(fragment(\"?->>'value'\", mobile_contact_method)),\n          # sex\n          person.sex,\n          # date_of_birth\n          person.birth_date,\n          # profession\n          person.profession_category_main,\n          # work_place_name\n          fragment(\"(ARRAY_AGG(?))[1]\", employer.name),\n          # work_place_postal_code\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'zip'\", employer.address)),\n          # work_place_country\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'country'\", employer.address)),\n          # quar_loc_type\n          type(\n            fragment(\"(?->>'location')::isolation_location\", case.monitoring),\n            Case.Monitoring.IsolationLocation\n          ),\n          # other_quar_loc_type\n          fragment(\"?->>'location_details'\", case.monitoring),\n          # exp_type\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"(?->'details'->>'type')\", phase)),\n            Case.Phase.PossibleIndex.Type\n          ),\n          # case_link_fall_id_ism\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\n              \"\"\"\n              CASE\n                WHEN ? THEN ?\n                WHEN ? THEN ?\n              END\n              \"\"\",\n              not received_transmission.propagator_internal,\n              received_transmission.propagator_ism_id,\n              received_transmission.propagator_internal,\n              fragment(\"?->>'value'\", received_transmission_case_ism_id)\n            )\n          ),\n          # case_link_ktn_internal_id\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.propagator_case_uuid),\n            Ecto.UUID\n          ),\n          # case_link_contact_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # hygeia_case_link_region_subdivision\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            received_transmission_case_tenant.subdivision\n          ),\n          # exp_loc_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # exp_country\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'address'->'country'\", received_transmission.infection_place)\n          ),\n          # exp_loc_type_work_place\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"work_place\"\n          ),\n          # exp_loc_type_army\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"army\"\n          ),\n          # exp_loc_type_asyl\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"asyl\"\n          ),\n          # exp_loc_type_choir\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"choir\"\n          ),\n          # exp_loc_type_club\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"club\"\n          ),\n          # exp_loc_type_hh\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hh\"\n          ),\n          # exp_loc_type_high_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"high_school\"\n          ),\n          # exp_loc_type_childcare\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"childcare\"\n          ),\n          # exp_loc_type_erotica\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"erotica\"\n          ),\n          # exp_loc_type_flight\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"flight\"\n          ),\n          # exp_loc_type_medical\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"medical\"\n          ),\n          # exp_loc_type_hotel\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hotel\"\n          ),\n          # exp_loc_type_child_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"child_home\"\n          ),\n          # exp_loc_type_cinema\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"cinema\"\n          ),\n          # exp_loc_type_shop\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"shop\"\n          ),\n          # exp_loc_type_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school\"\n          ),\n          # exp_loc_type_less_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"less_300\"\n          ),\n          # exp_loc_type_more_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"more_300\"\n          ),\n          # exp_loc_type_public_transp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"public_transp\"\n          ),\n          # exp_loc_type_massage\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"massage\"\n          ),\n          # exp_loc_type_nursing_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"nursing_home\"\n          ),\n          # exp_loc_type_religion\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"religion\"\n          ),\n          # exp_loc_type_restaurant\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"restaurant\"\n          ),\n          # exp_loc_type_school_camp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school_camp\"\n          ),\n          # exp_loc_type_indoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"indoor_sport\"\n          ),\n          # exp_loc_type_outdoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"outdoor_sport\"\n          ),\n          # exp_loc_type_gathering\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"gathering\"\n          ),\n          # exp_loc_type_zoo\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"zoo\"\n          ),\n          # exp_loc_type_prison\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"prison\"\n          ),\n          # other_exp_loc_type_yn\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"other\"\n          ),\n          # other_exp_loc_type\n          fragment(\"(ARRAY_AGG(?->'type_other'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_less_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_more_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_name\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_street\n          fragment(\n            \"(ARRAY_AGG(?->'address'->'address'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_street_number\n          ^nil,\n          # exp_loc_location\n          fragment(\n            \"(ARRAY_AGG(?->'address'->>'place'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_postal_code\n          fragment(\"(ARRAY_AGG(?->'address'->>'zip'))[1]\", received_transmission.infection_place),\n          # exp_loc_flightdetail\n          fragment(\n            \"(ARRAY_AGG(?->>'flight_information'))[1]\",\n            received_transmission.infection_place\n          ),\n          # test_reason_symptoms\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"symptoms\"),\n          # test_reason_quarantine\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"quarantine\"),\n          # test_reason_quarantine_end\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"quarantine_end\"),\n          # other_test_reason\n          fragment(\"?->'reasons_for_test' \\\\?| ?\", case.clinical, [\n            \"outbreak_examination\",\n            \"screening\",\n            \"work_related\",\n            \"app_report\",\n            \"contact_tracing\",\n            \"convenience\"\n          ]),\n          # symptom_onset_dt\n          fragment(\"(?->>'symptom_start')\", case.clinical),\n          # test_type\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.kind), Test.Kind),\n          # sampling_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", test.tested_at),\n          # test_result\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.result), Test.Result),\n          # onset_quar_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'start'\", phase)),\n          # end_quar_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'end'\", phase)),\n          # reason_end_quar\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->'details'->>'end_reason'\", phase)),\n            Case.Phase.PossibleIndex.EndReason\n          ),\n          # other_reason_end_quar\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->'details'->>'other_end_reason'\", phase)),\n          # vacc_yn\n          fragment(\"(?->>'done')::boolean\", person.vaccination),\n          # vacc_name\n          fragment(\"?->>'name'\", person.vaccination),\n          # vacc_dose\n          fragment(\n            \"CASE WHEN ? THEN ? ELSE ? END\",\n            is_nil(fragment(\"?->>'jab_dates'\", person.vaccination)),\n            nil,\n            fragment(\"JSONB_ARRAY_LENGTH(?)\", fragment(\"?->'jab_dates'\", person.vaccination))\n          ),\n          # vacc_dt_first\n          fragment(\"(?->'jab_dates'->>0)\", person.vaccination),\n          # vacc_dt_last\n          fragment(\"(?->'jab_dates'->>-1)\", person.vaccination)\n        ]\n      )\n      |> Repo.stream()\n      |> Stream.map(fn entry ->\n        entry\n        |> normalize_ism_id(@bag_med_16122020_contact_fields_index.case_link_fall_id_ism)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.phone_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.mobile_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.sex, fn\n          nil -> nil\n          :male -> 1\n          :female -> 2\n          :other -> 3\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.quar_loc_type, fn\n          nil -> 6\n          :home -> 1\n          :social_medical_facility -> 2\n          :hospital -> 3\n          :hotel -> 4\n          :asylum_center -> 5\n          :other -> 7\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.exp_type, fn\n          nil -> nil\n          :other -> nil\n          :contact_person -> 1\n          :travel -> 2\n          :outbreak -> 2\n          :covid_app -> 1\n        end)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.test_reason_symptoms)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_work_place)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_army)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_asyl)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_choir)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_club)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_hh)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_high_school\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_childcare)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_erotica)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_flight)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_medical)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_hotel)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_child_home)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_cinema)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_shop)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_school)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_less_300)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_more_300)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_public_transp\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_massage)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_nursing_home\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_religion)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_restaurant)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_school_camp\n        )\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_indoor_sport\n        )\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_outdoor_sport\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_gathering)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_zoo)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_prison)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.other_exp_loc_type_yn)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.test_reason_quarantine)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.test_reason_quarantine_end\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.other_test_reason)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.test_type, fn\n          nil -> 5\n          :pcr -> 1\n          :serology -> 5\n          :quick -> 2\n          :antigen_quick -> 3\n          :antigen -> 4\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.test_result, fn\n          :positive -> 1\n          :negative -> 2\n          :inconclusive -> 3\n          nil -> 3\n        end)\n        |> normalize_boolean_and_unknown_field(@bag_med_16122020_contact_fields_index.vacc_yn)\n        |> normalize_country(@bag_med_16122020_contact_fields_index.country)\n        |> normalize_country(@bag_med_16122020_contact_fields_index.work_place_country)\n        |> normalize_country(@bag_med_16122020_contact_fields_index.exp_country)\n        |> (fn list ->\n              case Enum.at(list, @bag_med_16122020_contact_fields_index.reason_end_quar) do\n                :negative_test ->\n                  list\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.other_reason_end_quar)],\n                    \"Negative Test\"\n                  )\n\n                :immune ->\n                  list\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.other_reason_end_quar)],\n                    \"Immune\"\n                  )\n\n                :vaccinated ->\n                  list\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.other_reason_end_quar)],\n                    \"Vaccinated\"\n                  )\n\n                :asymptomatic ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    1\n                  )\n\n                :converted_to_index ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    2\n                  )\n\n                :no_follow_up ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    3\n                  )\n\n                :other ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n\n                nil ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    nil\n                  )\n              end\n            end).()\n      end)\n\n    export = Stream.concat([@bag_med_16122020_contact_fields], cases)\n\n    export =\n      if extended do\n        export\n      else\n        Stream.map(export, fn entry ->\n          Enum.reduce(@extended_fields, entry, &List.delete_at(&2, &1))\n        end)\n      end\n\n    CSV.encode(export)\n  end\n\n  defp normalize_boolean_field(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil -> nil\n      true -> 1\n      false -> 0\n    end)\n  end\n\n  defp normalize_boolean_and_unknown_field(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil -> 3\n      true -> 1\n      false -> 2\n    end)\n  end\n\n  defp normalize_country(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil -> nil\n      country -> Country.bfs_code(country)\n    end)\n  end\n\n  defp normalize_ism_id(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil ->\n        nil\n\n      id ->\n        case Integer.parse(id) do\n          {id, \"\"} -> id\n          {_id, _rest} -> nil\n          :error -> nil\n        end\n    end)\n  end\n\n  @doc \"\"\"\n  Gets a single case.\n\n  Raises `Ecto.NoResultsError` if the Case does not exist.\n\n  ## Examples\n\n      iex> get_case!(123)\n      %Case{}\n\n      iex> get_case!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_case!(id :: Ecto.UUID.t()) :: Case.t()\n  def get_case!(id), do: Repo.get!(Case, id)\n\n  @spec get_case_with_lock!(id :: Ecto.UUID.t()) :: Case.t()\n  def get_case_with_lock!(id),\n    do: Repo.one!(from case in Case, where: case.uuid == ^id, lock: \"FOR UPDATE\")\n\n  @doc \"\"\"\n  Creates a case.\n\n  ## Examples\n\n      iex> create_case(%{field: value})\n      {:ok, %Case{}}\n\n      iex> create_case(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_case(person :: Person.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def create_case(%Person{} = person, attrs),\n    do:\n      person\n      |> change_new_case(attrs)\n      |> create_case()\n\n  @spec create_case(changeset :: Ecto.Changeset.t(Case.t())) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def create_case(%Ecto.Changeset{data: %Case{}} = changeset),\n    do:\n      changeset\n      |> Case.changeset(%{})\n      |> versioning_insert()\n      |> broadcast(\"cases\", :create)\n      |> versioning_extract()\n\n  @spec create_case(\n          person :: Person.t(),\n          tenant :: Tenant.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def create_case(%Person{} = person, %Tenant{} = tenant, attrs),\n    do:\n      person\n      |> change_new_case(tenant, attrs)\n      |> create_case()\n\n  @doc \"\"\"\n  Updates a case.\n\n  ## Examples\n\n      iex> update_case(case, %{field: new_value})\n      {:ok, %Case{}}\n\n      iex> update_case(case, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_case(\n          case :: Case.t() | Ecto.Changeset.t(Case.t()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Case.changeset_params()\n        ) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def update_case(case, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def update_case(%Case{} = case, attrs, changeset_params),\n    do:\n      case\n      |> change_case(attrs, changeset_params)\n      |> update_case()\n\n  @spec update_case(changeset :: Ecto.Changeset.t(Case.t())) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def update_case(%Ecto.Changeset{data: %Case{}} = changeset, attrs, changeset_params),\n    do:\n      changeset\n      |> change_case(attrs, changeset_params)\n      |> versioning_update()\n      |> broadcast(\"cases\", :update)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a case.\n\n  ## Examples\n\n      iex> delete_case(case)\n      {:ok, %Case{}}\n\n      iex> delete_case(case)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_case(case :: Case.t()) :: {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def delete_case(%Case{} = case),\n    do:\n      case\n      |> change_case()\n      |> versioning_delete()\n      |> broadcast(\"cases\", :delete)\n      |> versioning_extract()\n\n  @spec case_phase_automated_email_sent(case :: Case.t(), phase :: Case.Phase.t()) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def case_phase_automated_email_sent(%Case{phases: phases} = case, %Case.Phase{uuid: phase_uuid}) do\n    case\n    |> Ecto.Changeset.change()\n    |> Ecto.Changeset.put_embed(\n      :phases,\n      Enum.map(phases, fn\n        %Case.Phase{uuid: ^phase_uuid} = phase ->\n          Case.Phase.changeset(phase, %{automated_close_email_sent: DateTime.utc_now()})\n\n        %Case.Phase{} = phase ->\n          Case.Phase.changeset(phase, %{})\n      end)\n    )\n    |> versioning_update()\n    |> broadcast(\"cases\", :update)\n    |> versioning_extract()\n  end\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking case changes.\n\n  ## Examples\n\n      iex> change_case(case)\n      %Ecto.Changeset{data: %Case{}}\n\n  \"\"\"\n  @spec change_case(\n          case :: Case.t() | Case.empty() | Changeset.t(Case.t() | Case.empty()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Case.changeset_params()\n        ) ::\n          Ecto.Changeset.t(Case.t())\n  def change_case(case, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def change_case(%Case{} = case, attrs, changeset_params),\n    do: Case.changeset(case, attrs, changeset_params)\n\n  def change_case(%Changeset{data: %Case{}} = case, attrs, changeset_params),\n    do: Case.changeset(case, attrs, changeset_params)\n\n  @spec change_new_case(\n          person :: Person.t(),\n          tenant :: Tenant.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(Case.t())\n  def change_new_case(person, tenant, attrs) do\n    person\n    |> Ecto.build_assoc(:cases)\n    |> change_case(\n      Map.put(\n        attrs,\n        case Enum.to_list(attrs) do\n          [{key, _value} | _] when is_binary(key) -> \"tenant_uuid\"\n          _other -> :tenant_uuid\n        end,\n        tenant.uuid\n      )\n    )\n  end\n\n  @spec change_new_case(\n          person :: Person.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(Case.t())\n  def change_new_case(person, attrs) do\n    tenant = Repo.preload(person, :tenant).tenant\n    change_new_case(person, tenant, attrs)\n  end\n\n  @doc \"\"\"\n  Returns the list of transmissions.\n\n  ## Examples\n\n      iex> list_transmissions()\n      [%Transmission{}, ...]\n\n  \"\"\"\n  @spec list_transmissions :: [Transmission.t()]\n  def list_transmissions, do: Repo.all(Transmission)\n\n  @doc \"\"\"\n  Gets a single transmission.\n\n  Raises `Ecto.NoResultsError` if the Transmission does not exist.\n\n  ## Examples\n\n      iex> get_transmission!(123)\n      %Transmission{}\n\n      iex> get_transmission!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_transmission!(id :: Ecto.UUID.t()) :: Transmission.t()\n  def get_transmission!(id), do: Repo.get!(Transmission, id)\n\n  @doc \"\"\"\n  Creates a transmission.\n\n  ## Examples\n\n      iex> create_transmission(%{field: value})\n      {:ok, %Transmission{}}\n\n      iex> create_transmission(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_transmission(attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def create_transmission(attrs \\\\ %{}),\n    do:\n      %Transmission{}\n      |> change_transmission(attrs)\n      |> versioning_insert()\n      |> broadcast(\n        \"transmissions\",\n        :create,\n        & &1.uuid,\n        &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @spec create_transmission(\n          transmission :: Transmission.t() | Ecto.Changeset.t(Transmission.t()),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def create_transmission(transmission, attrs),\n    do:\n      transmission\n      |> change_transmission(attrs)\n      |> versioning_insert()\n      |> broadcast(\n        \"transmissions\",\n        :create,\n        & &1.uuid,\n        &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a transmission.\n\n  ## Examples\n\n      iex> update_transmission(transmission, %{field: new_value})\n      {:ok, %Transmission{}}\n\n      iex> update_transmission(transmission, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_transmission(\n          transmission :: Transmission.t() | Ecto.Changeset.t(Transmission.t()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Transmission.changeset_params()\n        ) :: {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def update_transmission(transmission, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def update_transmission(%Transmission{} = transmission, attrs, changeset_params),\n    do:\n      transmission\n      |> change_transmission(attrs, changeset_params)\n      |> update_transmission()\n\n  def update_transmission(\n        %Ecto.Changeset{data: %Transmission{}} = changeset,\n        attrs,\n        changeset_params\n      ),\n      do:\n        changeset\n        |> change_transmission(attrs, changeset_params)\n        |> versioning_update()\n        |> broadcast(\n          \"transmissions\",\n          :update,\n          & &1.uuid,\n          &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n        )\n        |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a transmission.\n\n  ## Examples\n\n      iex> delete_transmission(transmission)\n      {:ok, %Transmission{}}\n\n      iex> delete_transmission(transmission)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_transmission(transmission :: Transmission.t()) ::\n          {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def delete_transmission(%Transmission{} = transmission),\n    do:\n      transmission\n      |> versioning_delete()\n      |> broadcast(\n        \"transmissions\",\n        :delete,\n        & &1.uuid,\n        &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking transmission changes.\n\n  ## Examples\n\n      iex> change_transmission(transmission)\n      %Ecto.Changeset{data: %Transmission{}}\n\n  \"\"\"\n  @spec change_transmission(\n          transmission ::\n            Transmission.t()\n            | Transmission.empty()\n            | Changeset.t(Transmission.t() | Transmission.empty()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Transmission.changeset_params()\n        ) ::\n          Ecto.Changeset.t(Transmission.t())\n  def change_transmission(transmission, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def change_transmission(%Transmission{} = transmission, attrs, changeset_params),\n    do: Transmission.changeset(transmission, attrs, changeset_params)\n\n  def change_transmission(\n        %Ecto.Changeset{data: %Transmission{}} = transmission,\n        attrs,\n        changeset_params\n      ),\n      do: Transmission.changeset(transmission, attrs, changeset_params)\n\n  @doc \"\"\"\n  Returns the list of notes.\n\n  ## Examples\n\n      iex> list_notes()\n      [%Note{}, ...]\n\n  \"\"\"\n  @spec list_notes :: [Note.t()]\n  def list_notes, do: Repo.all(Note)\n\n  @doc \"\"\"\n  Gets a single note.\n\n  Raises `Ecto.NoResultsError` if the Protocol entry does not exist.\n\n  ## Examples\n\n      iex> get_note!(123)\n      %Note{}\n\n      iex> get_note!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_note!(id :: Ecto.UUID.t()) :: Note.t()\n  def get_note!(id), do: Repo.get!(Note, id)\n\n  @doc \"\"\"\n  Creates a note.\n\n  ## Examples\n\n      iex> create_note(%{field: value})\n      {:ok, %Note{}}\n\n      iex> create_note(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_note(case :: Case.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Note.t()} | {:error, Ecto.Changeset.t(Note.t())}\n  def create_note(%Case{} = case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:notes)\n      |> change_note(attrs)\n      |> versioning_insert()\n      |> broadcast(\n        \"notes\",\n        :create,\n        & &1.uuid,\n        &[\"notes:case:#{&1.case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a note.\n\n  ## Examples\n\n      iex> update_note(note, %{field: new_value})\n      {:ok, %Note{}}\n\n      iex> update_note(note, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_note(\n          note :: Note.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: {:ok, Note.t()} | {:error, Ecto.Changeset.t(Note.t())}\n  def update_note(%Note{} = note, attrs),\n    do:\n      note\n      |> change_note(attrs)\n      |> versioning_update()\n      |> broadcast(\n        \"notes\",\n        :update,\n        & &1.uuid,\n        &[\"notes:case:#{&1.case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a note.\n\n  ## Examples\n\n      iex> delete_note(note)\n      {:ok, %Note{}}\n\n      iex> delete_note(note)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_note(note :: Note.t()) ::\n          {:ok, Note.t()} | {:error, Ecto.Changeset.t(Note.t())}\n  def delete_note(%Note{} = note),\n    do:\n      note\n      |> change_note()\n      |> versioning_delete()\n      |> broadcast(\n        \"notes\",\n        :delete,\n        & &1.uuid,\n        &[\"notes:case:#{&1.case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking note changes.\n\n  ## Examples\n\n      iex> change_note(note)\n      %Ecto.Changeset{data: %Note{}}\n\n  \"\"\"\n  @spec change_note(\n          note :: Note.t() | Note.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(Note.t())\n  def change_note(%Note{} = note, attrs \\\\ %{}),\n    do: Note.changeset(note, attrs)\n\n  @doc \"\"\"\n  Returns the list of possible_index_submissions.\n\n  ## Examples\n\n      iex> list_possible_index_submissions()\n      [%PossibleIndexSubmission{}, ...]\n\n  \"\"\"\n  @spec list_possible_index_submissions :: [PossibleIndexSubmission.t()]\n  def list_possible_index_submissions, do: Repo.all(PossibleIndexSubmission)\n\n  @doc \"\"\"\n  Gets a single possible_index_submission.\n\n  Raises `Ecto.NoResultsError` if the Possible index submission does not exist.\n\n  ## Examples\n\n      iex> get_possible_index_submission!(123)\n      %PossibleIndexSubmission{}\n\n      iex> get_possible_index_submission!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_possible_index_submission!(id :: Ecto.UUID.t()) :: PossibleIndexSubmission.t()\n  def get_possible_index_submission!(id), do: Repo.get!(PossibleIndexSubmission, id)\n\n  @doc \"\"\"\n  Creates a possible_index_submission.\n\n  ## Examples\n\n      iex> create_possible_index_submission(%{field: value})\n      {:ok, %PossibleIndexSubmission{}}\n\n      iex> create_possible_index_submission(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_possible_index_submission(\n          case :: Case.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PossibleIndexSubmission.t()}\n          | {:error, Ecto.Changeset.t(PossibleIndexSubmission.t())}\n  def create_possible_index_submission(case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:possible_index_submissions)\n      |> change_possible_index_submission(attrs)\n      |> versioning_insert()\n      |> broadcast(\"possible_index_submissions\", :create, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a possible_index_submission.\n\n  ## Examples\n\n      iex> update_possible_index_submission(possible_index_submission, %{field: new_value})\n      {:ok, %PossibleIndexSubmission{}}\n\n      iex> update_possible_index_submission(possible_index_submission, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_possible_index_submission(\n          possible_index_submission :: PossibleIndexSubmission.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PossibleIndexSubmission.t()}\n          | {:error, Ecto.Changeset.t(PossibleIndexSubmission.t())}\n  def update_possible_index_submission(\n        %PossibleIndexSubmission{} = possible_index_submission,\n        attrs\n      ),\n      do:\n        possible_index_submission\n        |> change_possible_index_submission(attrs)\n        |> versioning_update()\n        |> broadcast(\"possible_index_submissions\", :update, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n        |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a possible_index_submission.\n\n  ## Examples\n\n      iex> delete_possible_index_submission(possible_index_submission)\n      {:ok, %PossibleIndexSubmission{}}\n\n      iex> delete_possible_index_submission(possible_index_submission)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_possible_index_submission(possible_index_submission :: PossibleIndexSubmission.t()) ::\n          {:ok, PossibleIndexSubmission.t()}\n          | {:error, Ecto.Changeset.t(PossibleIndexSubmission.t())}\n  def delete_possible_index_submission(%PossibleIndexSubmission{} = possible_index_submission),\n    do:\n      possible_index_submission\n      |> change_possible_index_submission()\n      |> versioning_delete()\n      |> broadcast(\"possible_index_submissions\", :delete, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking possible_index_submission changes.\n\n  ## Examples\n\n      iex> change_possible_index_submission(possible_index_submission)\n      %Ecto.Changeset{data: %PossibleIndexSubmission{}}\n\n  \"\"\"\n  @spec change_possible_index_submission(\n          possible_index_submission ::\n            PossibleIndexSubmission.t() | PossibleIndexSubmission.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          Ecto.Changeset.t(PossibleIndexSubmission.t())\n  def change_possible_index_submission(\n        %PossibleIndexSubmission{} = possible_index_submission,\n        attrs \\\\ %{}\n      ) do\n    PossibleIndexSubmission.changeset(possible_index_submission, attrs)\n  end\n\n  @doc \"\"\"\n  Returns the list of hospitalizations.\n\n  ## Examples\n\n      iex> list_hospitalizations()\n      [%Hospitalization{}, ...]\n\n  \"\"\"\n  @spec list_hospitalizations :: [Hospitalization.t()]\n  def list_hospitalizations, do: Repo.all(Hospitalization)\n\n  @doc \"\"\"\n  Gets a single hospitalization.\n\n  Raises `Ecto.NoResultsError` if the Possible index submission does not exist.\n\n  ## Examples\n\n      iex> get_hospitalization!(123)\n      %Hospitalization{}\n\n      iex> get_hospitalization!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_hospitalization!(id :: Ecto.UUID.t()) :: Hospitalization.t()\n  def get_hospitalization!(id), do: Repo.get!(Hospitalization, id)\n\n  @doc \"\"\"\n  Creates a hospitalization.\n\n  ## Examples\n\n      iex> create_hospitalization(%{field: value})\n      {:ok, %Hospitalization{}}\n\n      iex> create_hospitalization(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_hospitalization(\n          case :: Case.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Hospitalization.t()}\n          | {:error, Ecto.Changeset.t(Hospitalization.t())}\n  def create_hospitalization(case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:hospitalizations)\n      |> change_hospitalization(attrs)\n      |> versioning_insert()\n      |> broadcast(\"hospitalizations\", :create, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a hospitalization.\n\n  ## Examples\n\n      iex> update_hospitalization(hospitalization, %{field: new_value})\n      {:ok, %Hospitalization{}}\n\n      iex> update_hospitalization(hospitalization, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_hospitalization(\n          hospitalization :: Hospitalization.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Hospitalization.t()}\n          | {:error, Ecto.Changeset.t(Hospitalization.t())}\n  def update_hospitalization(\n        %Hospitalization{} = hospitalization,\n        attrs\n      ),\n      do:\n        hospitalization\n        |> change_hospitalization(attrs)\n        |> versioning_update()\n        |> broadcast(\"hospitalizations\", :update, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n        |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a hospitalization.\n\n  ## Examples\n\n      iex> delete_hospitalization(hospitalization)\n      {:ok, %Hospitalization{}}\n\n      iex> delete_hospitalization(hospitalization)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_hospitalization(hospitalization :: Hospitalization.t()) ::\n          {:ok, Hospitalization.t()}\n          | {:error, Ecto.Changeset.t(Hospitalization.t())}\n  def delete_hospitalization(%Hospitalization{} = hospitalization),\n    do:\n      hospitalization\n      |> change_hospitalization()\n      |> versioning_delete()\n      |> broadcast(\"hospitalizations\", :delete, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking hospitalization changes.\n\n  ## Examples\n\n      iex> change_hospitalization(hospitalization)\n      %Ecto.Changeset{data: %Hospitalization{}}\n\n  \"\"\"\n  @spec change_hospitalization(\n          hospitalization ::\n            Hospitalization.t() | Hospitalization.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          Ecto.Changeset.t(Hospitalization.t())\n  def change_hospitalization(\n        %Hospitalization{} = hospitalization,\n        attrs \\\\ %{}\n      ) do\n    Hospitalization.changeset(hospitalization, attrs)\n  end\n\n  @spec list_protocol_entries(case :: Case.t(), limit :: pos_integer()) :: [\n          %{\n            version: Hygeia.VersionContext.Version.t(),\n            entry: Note.t() | Email.t() | SMS.t(),\n            inserted_at: DateTime.t()\n          }\n        ]\n  def list_protocol_entries(case, limit \\\\ 100) do\n    note_query =\n      from(note in Ecto.assoc(case, :notes),\n        select: {note.inserted_at, \"note\", note.uuid},\n        limit: ^limit\n      )\n\n    note_sms_query =\n      from(sms in Ecto.assoc(case, :sms),\n        select: {sms.inserted_at, \"sms\", sms.uuid},\n        union_all: ^note_query\n      )\n\n    note_sms_email_query =\n      from(email in Ecto.assoc(case, :emails),\n        select: {email.inserted_at, \"email\", email.uuid},\n        order_by: fragment(\"inserted_at\"),\n        union_all: ^note_sms_query\n      )\n\n    protocol_entries = Repo.all(note_sms_email_query)\n\n    resources =\n      protocol_entries\n      |> Enum.group_by(&elem(&1, 1), &elem(&1, 2))\n      |> Enum.flat_map(&load_protocol_entries(case, &1))\n      |> Map.new()\n\n    Enum.map(protocol_entries, fn {inserted_at, _type, uuid} ->\n      {resource, version} = Map.fetch!(resources, uuid)\n      {uuid, inserted_at, resource, version}\n    end)\n  end\n\n  defp load_protocol_entries(case, {\"sms\", ids}),\n    do:\n      Repo.all(\n        from(version in Hygeia.VersionContext.Version,\n          join: sms in ^Ecto.assoc(case, :sms),\n          on:\n            fragment(\"(?->>'uuid')::uuid\", version.item_pk) == sms.uuid and\n              version.item_table == \"sms\" and\n              version.event == :insert,\n          select: {sms.uuid, {sms, version}},\n          where: fragment(\"?->>'uuid'\", version.item_pk) in ^ids,\n          preload: [:user]\n        )\n      )\n\n  defp load_protocol_entries(case, {\"email\", ids}),\n    do:\n      Repo.all(\n        from(version in Hygeia.VersionContext.Version,\n          join: email in ^Ecto.assoc(case, :emails),\n          on:\n            fragment(\"(?->>'uuid')::uuid\", version.item_pk) == email.uuid and\n              version.item_table == \"emails\" and\n              version.event == :insert,\n          select: {email.uuid, {email, version}},\n          where: fragment(\"?->>'uuid'\", version.item_pk) in ^ids,\n          preload: [:user]\n        )\n      )\n\n  defp load_protocol_entries(case, {\"note\", ids}),\n    do:\n      Repo.all(\n        from(version in Hygeia.VersionContext.Version,\n          join: note in ^Ecto.assoc(case, :notes),\n          on:\n            fragment(\"(?->>'uuid')::uuid\", version.item_pk) == note.uuid and\n              version.item_table == \"notes\" and\n              version.event == :insert,\n          select: {note.uuid, {note, version}},\n          where: fragment(\"?->>'uuid'\", version.item_pk) in ^ids,\n          preload: [:user]\n        )\n      )\n\n  @doc \"\"\"\n  Returns the list of tests.\n\n  ## Examples\n\n      iex> list_tests()\n      [%Test{}, ...]\n\n  \"\"\"\n  @spec list_tests :: [Test.t()]\n  def list_tests, do: Repo.all(Test)\n\n  @doc \"\"\"\n  Gets a single test.\n\n  Raises `Ecto.NoResultsError` if the Test does not exist.\n\n  ## Examples\n\n      iex> get_test!(123)\n      %Test{}\n\n      iex> get_test!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_test!(id :: Ecto.UUID.t()) :: Test.t()\n  def get_test!(id), do: Repo.get!(Test, id)\n\n  @doc \"\"\"\n  Creates a test.\n\n  ## Examples\n\n      iex> create_test(%{field: value})\n      {:ok, %Test{}}\n\n      iex> create_test(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_test(case :: Case.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Test.t()} | {:error, Ecto.Changeset.t(Test.t())}\n  def create_test(case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:tests)\n      |> change_test(attrs)\n      |> versioning_insert()\n      |> broadcast(\"tests\", :create, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a test.\n\n  ## Examples\n\n      iex> update_test(test, %{field: new_value})\n      {:ok, %Test{}}\n\n      iex> update_test(test, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_test(test :: Test.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Test.t()} | {:error, Ecto.Changeset.t(Test.t())}\n  def update_test(%Test{} = test, attrs),\n    do:\n      test\n      |> change_test(attrs)\n      |> versioning_update()\n      |> broadcast(\"tests\", :update, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a test.\n\n  ## Examples\n\n      iex> delete_test(test)\n      {:ok, %Test{}}\n\n      iex> delete_test(test)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_test(test :: Test.t()) :: {:ok, Test.t()} | {:error, Ecto.Changeset.t(Test.t())}\n  def delete_test(%Test{} = test),\n    do:\n      test\n      |> change_test()\n      |> versioning_delete()\n      |> broadcast(\"tests\", :delete, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking test changes.\n\n  ## Examples\n\n      iex> change_test(test)\n      %Ecto.Changeset{data: %Test{}}\n\n  \"\"\"\n  @spec change_test(test :: Test.t() | Test.empty(), attrs :: Hygeia.ecto_changeset_params()) ::\n          Changeset.t(Test.t())\n  def change_test(%Test{} = test, attrs \\\\ %{}), do: Test.changeset(test, attrs)\n\n  @doc \"\"\"\n  Returns the list of premature_releases.\n\n  ## Examples\n\n      iex> list_premature_releases()\n      [%PrematureRelease{}, ...]\n\n  \"\"\"\n  @spec list_premature_releases :: [PrematureRelease.t()]\n  def list_premature_releases, do: Repo.all(PrematureRelease)\n\n  @spec list_premature_releases(case :: Case.t()) :: [PrematureRelease.t()]\n  def list_premature_releases(%Case{} = case),\n    do: case |> Ecto.assoc(:premature_releases) |> Repo.all()\n\n  @doc \"\"\"\n  Gets a single premature_release.\n\n  Raises `Ecto.NoResultsError` if the Premature release does not exist.\n\n  ## Examples\n\n      iex> get_premature_release!(123)\n      %PrematureRelease{}\n\n      iex> get_premature_release!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_premature_release!(id :: Ecto.UUID.t()) :: PrematureRelease.t()\n  def get_premature_release!(id), do: Repo.get!(PrematureRelease, id)\n\n  @doc \"\"\"\n  Creates a premature_release.\n\n  ## Examples\n\n      iex> create_premature_release(%{field: value})\n      {:ok, %PrematureRelease{}}\n\n      iex> create_premature_release(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_premature_release(\n          case :: Case.t(),\n          phase :: Case.Phase.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PrematureRelease.t()} | {:error, Ecto.Changeset.t(PrematureRelease.t())}\n  def create_premature_release(%Case{} = case, %Case.Phase{} = phase, attrs \\\\ %{}),\n    do:\n      case\n      |> change_new_premature_release(phase, attrs)\n      |> versioning_insert()\n      |> broadcast(\"premature_releases\", :create)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a premature_release.\n\n  ## Examples\n\n      iex> update_premature_release(premature_release, %{field: new_value})\n      {:ok, %PrematureRelease{}}\n\n      iex> update_premature_release(premature_release, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_premature_release(\n          premature_release :: PrematureRelease.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PrematureRelease.t()} | {:error, Ecto.Changeset.t(PrematureRelease.t())}\n\n  def update_premature_release(%PrematureRelease{} = premature_release, attrs),\n    do:\n      premature_release\n      |> change_premature_release(attrs)\n      |> versioning_update()\n      |> broadcast(\"premature_releases\", :update)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a premature_release.\n\n  ## Examples\n\n      iex> delete_premature_release(premature_release)\n      {:ok, %PrematureRelease{}}\n\n      iex> delete_premature_release(premature_release)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_premature_release(premature_release :: PrematureRelease.t()) ::\n          {:ok, PrematureRelease.t()} | {:error, Ecto.Changeset.t(PrematureRelease.t())}\n\n  def delete_premature_release(%PrematureRelease{} = premature_release),\n    do:\n      premature_release\n      |> change_premature_release()\n      |> versioning_delete()\n      |> broadcast(\"premature_releases\", :delete)\n      |> versioning_extract()\n\n  @spec change_new_premature_release(\n          case :: Case.t(),\n          phase :: Case.Phase.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          Ecto.Changeset.t(PrematureRelease.t())\n  def change_new_premature_release(%Case{} = case, %Case.Phase{} = phase, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:premature_releases)\n      |> Changeset.change(%{phase_uuid: phase.uuid})\n      |> PrematureRelease.create_changeset(attrs)\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking premature_release changes.\n\n  ## Examples\n\n      iex> change_premature_release(premature_release)\n      %Ecto.Changeset{data: %PrematureRelease{}}\n\n  \"\"\"\n  @spec change_premature_release(\n          premature_release :: PrematureRelease.t() | PrematureRelease.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(PrematureRelease.t())\n  def change_premature_release(%PrematureRelease{} = premature_release, attrs \\\\ %{}),\n    do: PrematureRelease.changeset(premature_release, attrs)\nend\n", "defmodule Hygeia.StatisticsContext do\n  @moduledoc \"\"\"\n  The StatisticsContext context.\n  \"\"\"\n\n  use Hygeia, :context\n\n  import HygeiaGettext\n\n  alias Hygeia.CaseContext.Case\n  alias Hygeia.OrganisationContext.Affiliation.Kind\n  alias Hygeia.StatisticsContext.ActiveCasesPerDayAndOrganisation\n  alias Hygeia.StatisticsContext.ActiveComplexityCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveHospitalizationCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveInfectionPlaceCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveIsolationCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveQuarantineCasesPerDay\n  alias Hygeia.StatisticsContext.CumulativeIndexCaseEndReasons\n  alias Hygeia.StatisticsContext.CumulativePossibleIndexCaseEndReasons\n  alias Hygeia.StatisticsContext.NewCasesPerDay\n  alias Hygeia.StatisticsContext.NewRegisteredCasesPerDay\n  alias Hygeia.StatisticsContext.TransmissionCountryCasesPerDay\n  alias Hygeia.TenantContext.Tenant\n\n  @doc \"\"\"\n  Returns the list of active_isolation_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_isolation_cases_per_day()\n      [%ActiveIsolationCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_isolation_cases_per_day :: [ActiveIsolationCasesPerDay.t()]\n  def list_active_isolation_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveIsolationCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_isolation_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveIsolationCasesPerDay.t()\n        ]\n  def list_active_isolation_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveIsolationCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_isolation_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveIsolationCasesPerDay.t()]\n  def list_active_isolation_cases_per_day(tenant, from, to, include_zero_values \\\\ true),\n    do: Repo.all(list_active_isolation_cases_per_day_query(tenant, from, to, include_zero_values))\n\n  defp list_active_isolation_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ),\n       do:\n         from(cases_per_day in ActiveIsolationCasesPerDay,\n           where:\n             cases_per_day.tenant_uuid == ^tenant_uuid and\n               fragment(\"? BETWEEN ?::date AND ?::date\", cases_per_day.date, ^from, ^to) and\n               (^include_zero_values or cases_per_day.count > 0),\n           order_by: cases_per_day.date\n         )\n\n  @doc \"\"\"\n  Returns the list of cumulative_index_case_end_reasons.\n\n  ## Examples\n\n      iex> list_cumulative_index_case_end_reasons()\n      [%CumulativeIndexCaseEndReasons{}, ...]\n\n  \"\"\"\n  @spec list_cumulative_index_case_end_reasons :: [CumulativeIndexCaseEndReasons.t()]\n  def list_cumulative_index_case_end_reasons,\n    do:\n      Repo.all(\n        from(cumulative_index_case_end_reasons in CumulativeIndexCaseEndReasons,\n          order_by: cumulative_index_case_end_reasons.date\n        )\n      )\n\n  @spec list_cumulative_index_case_end_reasons(tenant :: Tenant.t()) :: [\n          CumulativeIndexCaseEndReasons.t()\n        ]\n  def list_cumulative_index_case_end_reasons(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cumulative_index_case_end_reasons in CumulativeIndexCaseEndReasons,\n          where: cumulative_index_case_end_reasons.tenant_uuid == ^tenant_uuid,\n          order_by: cumulative_index_case_end_reasons.date\n        )\n      )\n\n  @spec list_cumulative_index_case_end_reasons(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [CumulativeIndexCaseEndReasons.t()]\n  def list_cumulative_index_case_end_reasons(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_cumulative_index_case_end_reasons_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_cumulative_index_case_end_reasons_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cumulative_index_case_end_reasons in CumulativeIndexCaseEndReasons,\n      where:\n        cumulative_index_case_end_reasons.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cumulative_index_case_end_reasons.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cumulative_index_case_end_reasons.count > 0),\n      order_by: cumulative_index_case_end_reasons.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of active_quarantine_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_quarantine_cases_per_day()\n      [%ActiveQuarantineCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_quarantine_cases_per_day :: [ActiveQuarantineCasesPerDay.t()]\n  def list_active_quarantine_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveQuarantineCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_quarantine_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveQuarantineCasesPerDay.t()\n        ]\n  def list_active_quarantine_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveQuarantineCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_quarantine_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveQuarantineCasesPerDay.t()]\n  def list_active_quarantine_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_quarantine_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_quarantine_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cases_per_day in ActiveQuarantineCasesPerDay,\n      where:\n        cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cases_per_day.count > 0),\n      order_by: cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of cumulative_possible_index_case_end_reasons.\n\n  ## Examples\n\n      iex> list_cumulative_possible_index_case_end_reasons()\n      [%CumulativePossibleIndexCaseEndReasons{}, ...]\n\n  \"\"\"\n  @spec list_cumulative_possible_index_case_end_reasons :: [\n          CumulativePossibleIndexCaseEndReasons.t()\n        ]\n  def list_cumulative_possible_index_case_end_reasons,\n    do:\n      Repo.all(\n        from(cases_per_day in CumulativePossibleIndexCaseEndReasons,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_cumulative_possible_index_case_end_reasons(tenant :: Tenant.t()) :: [\n          CumulativePossibleIndexCaseEndReasons.t()\n        ]\n  def list_cumulative_possible_index_case_end_reasons(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in CumulativePossibleIndexCaseEndReasons,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_cumulative_possible_index_case_end_reasons(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [CumulativePossibleIndexCaseEndReasons.t()]\n  def list_cumulative_possible_index_case_end_reasons(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_cumulative_possible_index_case_end_reasons_query(\n            tenant,\n            from,\n            to,\n            include_zero_values\n          )\n        )\n\n  defp list_cumulative_possible_index_case_end_reasons_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cases_per_day in CumulativePossibleIndexCaseEndReasons,\n      where:\n        cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cases_per_day.count > 0),\n      order_by: cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of new_cases_per_day.\n\n  ## Examples\n\n      iex> list_new_cases_per_day()\n      [%NewCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_new_cases_per_day :: [NewCasesPerDay.t()]\n  def list_new_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in NewCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_new_cases_per_day(tenant :: Tenant.t()) :: [\n          NewCasesPerDay.t()\n        ]\n  def list_new_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in NewCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_new_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [NewCasesPerDay.t()]\n  def list_new_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do: Repo.all(list_new_cases_per_day_query(tenant, from, to, include_zero_values))\n\n  defp list_new_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cases_per_day in NewCasesPerDay,\n      where:\n        cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cases_per_day.count > 0),\n      order_by: cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of active_hospitalization_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_hospitalization_cases_per_day()\n      [%ActiveHospitalizationCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_hospitalization_cases_per_day :: [ActiveHospitalizationCasesPerDay.t()]\n  def list_active_hospitalization_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveHospitalizationCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_hospitalization_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveHospitalizationCasesPerDay.t()\n        ]\n  def list_active_hospitalization_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveHospitalizationCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_hospitalization_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveHospitalizationCasesPerDay.t()]\n  def list_active_hospitalization_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_hospitalization_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_hospitalization_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ),\n       do:\n         from(active_hospitalization_cases in ActiveHospitalizationCasesPerDay,\n           where:\n             active_hospitalization_cases.tenant_uuid == ^tenant_uuid and\n               fragment(\n                 \"? BETWEEN ?::date AND ?::date\",\n                 active_hospitalization_cases.date,\n                 ^from,\n                 ^to\n               ) and\n               (^include_zero_values or active_hospitalization_cases.count > 0),\n           order_by: active_hospitalization_cases.date\n         )\n\n  @doc \"\"\"\n  Returns the list of active_complexity_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_complexity_cases_per_day()\n      [%ActiveComplexityCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_complexity_cases_per_day :: [ActiveComplexityCasesPerDay.t()]\n  def list_active_complexity_cases_per_day,\n    do:\n      Repo.all(\n        from(active_complexity_cases_per_day in ActiveComplexityCasesPerDay,\n          order_by: active_complexity_cases_per_day.date\n        )\n      )\n\n  @spec list_active_complexity_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveComplexityCasesPerDay.t()\n        ]\n  def list_active_complexity_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(active_complexity_cases_per_day in ActiveComplexityCasesPerDay,\n          where: active_complexity_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: active_complexity_cases_per_day.date\n        )\n      )\n\n  @spec list_active_complexity_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveComplexityCasesPerDay.t()]\n  def list_active_complexity_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_complexity_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_complexity_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(active_complexity_cases_per_day in ActiveComplexityCasesPerDay,\n      where:\n        active_complexity_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            active_complexity_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or active_complexity_cases_per_day.count > 0),\n      order_by: active_complexity_cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of active_infection_place_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_infection_place_cases_per_day()\n      [%ActiveInfectionPlaceCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_infection_place_cases_per_day :: [ActiveInfectionPlaceCasesPerDay.t()]\n  def list_active_infection_place_cases_per_day,\n    do:\n      Repo.all(\n        from(active_infection_place_cases_per_day in ActiveInfectionPlaceCasesPerDay,\n          order_by: active_infection_place_cases_per_day.date\n        )\n      )\n\n  @spec list_active_infection_place_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveInfectionPlaceCasesPerDay.t()\n        ]\n  def list_active_infection_place_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(active_infection_place_cases_per_day in ActiveInfectionPlaceCasesPerDay,\n          where: active_infection_place_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: active_infection_place_cases_per_day.date\n        )\n      )\n\n  @spec list_active_infection_place_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveInfectionPlaceCasesPerDay.t()]\n  def list_active_infection_place_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_infection_place_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_infection_place_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(active_infection_place_cases_per_day in ActiveInfectionPlaceCasesPerDay,\n      where:\n        active_infection_place_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            active_infection_place_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or active_infection_place_cases_per_day.count > 0),\n      order_by: [\n        active_infection_place_cases_per_day.date,\n        desc: active_infection_place_cases_per_day.count\n      ]\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of transmission_country_cases_per_day.\n\n  ## Examples\n\n      iex> list_transmission_country_cases_per_day()\n      [%TransmissionCountryCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_transmission_country_cases_per_day :: [TransmissionCountryCasesPerDay.t()]\n  def list_transmission_country_cases_per_day,\n    do:\n      Repo.all(\n        from(transmission_country_cases_per_day in TransmissionCountryCasesPerDay,\n          order_by: transmission_country_cases_per_day.date\n        )\n      )\n\n  @spec list_transmission_country_cases_per_day(tenant :: Tenant.t()) :: [\n          TransmissionCountryCasesPerDay.t()\n        ]\n  def list_transmission_country_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(transmission_country_cases_per_day in TransmissionCountryCasesPerDay,\n          where: transmission_country_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: transmission_country_cases_per_day.date\n        )\n      )\n\n  @spec list_transmission_country_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [TransmissionCountryCasesPerDay.t()]\n  def list_transmission_country_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_transmission_country_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_transmission_country_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(transmission_country_cases_per_day in TransmissionCountryCasesPerDay,\n      where:\n        transmission_country_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            transmission_country_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or transmission_country_cases_per_day.count > 0),\n      order_by: transmission_country_cases_per_day.date\n    )\n  end\n\n  @spec export(\n          type :: :active_isolation_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_isolation_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(cases_per_day in list_active_isolation_cases_per_day_query(tenant, from, to),\n          select: [cases_per_day.date, cases_per_day.count]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :cumulative_index_case_end_reasons,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:cumulative_index_case_end_reasons, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"End Reason\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_cumulative_index_case_end_reasons_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.end_reason,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :active_quarantine_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_quarantine_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(cases_per_day in list_active_quarantine_cases_per_day_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.type,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :cumulative_possible_index_case_end_reasons,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:cumulative_possible_index_case_end_reasons, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"End Reason\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_cumulative_possible_index_case_end_reasons_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.type,\n            cases_per_day.end_reason,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :new_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:new_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"Sub-Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(cases_per_day in list_new_cases_per_day_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.type,\n            cases_per_day.sub_type,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :active_hospitalization_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_hospitalization_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_active_hospitalization_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :active_complexity_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_complexity_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Complexity\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_active_complexity_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.case_complexity,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :active_infection_place_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_infection_place_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_active_infection_place_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.infection_place_type,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  @spec export(\n          type :: :transmission_country_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:transmission_country_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Country\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_transmission_country_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.country,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode()\n  end\n\n  # Export for only \"from\" day !\n  @spec export(\n          type :: :active_cases_per_day_and_organisation,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_cases_per_day_and_organisation, tenant, from, _to) do\n    [[gettext(\"Organisation\"), gettext(\"Division\"), gettext(\"Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Stream.map(\n        Repo.stream(\n          from(\n            cases_per_day in list_active_cases_per_day_organisation_division_kind_query(\n              tenant,\n              from\n            )\n          )\n        ),\n        fn\n          [organisation, division, nil, count] ->\n            [organisation, division, nil, count]\n\n          [organisation, division, affiliation_kind, count] ->\n            [organisation, division, Kind.translate(affiliation_kind), count]\n        end\n      )\n    )\n    |> CSV.encode()\n  end\n\n  defp list_active_cases_per_day_organisation_division_kind_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         date\n       ),\n       do:\n         from(\n           case in Case,\n           join: phase in fragment(\"UNNEST(?)\", case.phases),\n           join: person in assoc(case, :person),\n           join: affiliation in assoc(person, :affiliations),\n           join: organisation in assoc(affiliation, :organisation),\n           left_join: division in assoc(affiliation, :division),\n           where:\n             case.tenant_uuid == ^tenant_uuid and\n               fragment(\n                 \"? BETWEEN ? AND ?\",\n                 ^date,\n                 coalesce(\n                   fragment(\"(?->>'start')::date\", phase),\n                   fragment(\"?::date\", case.inserted_at)\n                 ),\n                 coalesce(fragment(\"(?->>'end')::date\", phase), fragment(\"CURRENT_DATE\"))\n               ),\n           group_by: [\n             organisation.uuid,\n             division.uuid,\n             affiliation.kind\n           ],\n           order_by: [\n             organisation.name,\n             division.title,\n             desc: count(person.uuid)\n           ],\n           select: [\n             organisation.name,\n             division.title,\n             affiliation.kind,\n             count(person.uuid)\n           ]\n         )\n\n  @doc \"\"\"\n  Returns the list of active cases per day and organisation.\n\n  ## Examples\n\n      iex> list_active_cases_per_day_and_organisation()\n      [%ActiveCasesPerDayAndOrganisation{}, ...]\n\n  \"\"\"\n  @spec list_active_cases_per_day_and_organisation :: [ActiveCasesPerDayAndOrganisation.t()]\n  def list_active_cases_per_day_and_organisation,\n    do:\n      Repo.all(\n        from(active_cases_per_day_and_organisation in ActiveCasesPerDayAndOrganisation,\n          order_by: active_cases_per_day_and_organisation.date\n        )\n      )\n\n  @spec list_active_cases_per_day_and_organisation(tenant :: Tenant.t()) :: [\n          ActiveCasesPerDayAndOrganisation.t()\n        ]\n  def list_active_cases_per_day_and_organisation(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(active_cases_per_day_and_organisation in ActiveCasesPerDayAndOrganisation,\n          where: active_cases_per_day_and_organisation.tenant_uuid == ^tenant_uuid,\n          order_by: active_cases_per_day_and_organisation.date\n        )\n      )\n\n  @spec list_active_cases_per_day_and_organisation(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: [ActiveCasesPerDayAndOrganisation.t()]\n  def list_active_cases_per_day_and_organisation(\n        tenant,\n        from,\n        to\n      ),\n      do: Repo.all(list_active_cases_per_day_and_organisation_query(tenant, from, to))\n\n  defp list_active_cases_per_day_and_organisation_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to\n       ) do\n    from(active_cases_per_day_and_organisation in ActiveCasesPerDayAndOrganisation,\n      where:\n        active_cases_per_day_and_organisation.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            active_cases_per_day_and_organisation.date,\n            ^from,\n            ^to\n          ),\n      order_by: [\n        active_cases_per_day_and_organisation.date,\n        desc: active_cases_per_day_and_organisation.count\n      ]\n    )\n  end\n\n  @spec count_last24hours_isolation_orders(tenant :: Tenant.t()) :: integer\n  def count_last24hours_isolation_orders(%Tenant{uuid: tenant_uuid} = _tenant) do\n    Repo.one(\n      from(\n        case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"index\" and\n            fragment(\"(?->>'order_date')::date\", phase) >=\n              fragment(\"CURRENT_TIMESTAMP - INTERVAL '1 day'\"),\n        select: count(case.uuid)\n      )\n    )\n  end\n\n  @spec list_last24hours_quarantine_orders(tenant :: Tenant.t()) :: [\n          %{type: atom, count: integer}\n        ]\n  def list_last24hours_quarantine_orders(%Tenant{uuid: tenant_uuid} = _tenant) do\n    Repo.all(\n      from(\n        case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"possible_index\" and\n            fragment(\"(?->>'order_date')::date\", phase) >=\n              fragment(\"CURRENT_TIMESTAMP - INTERVAL '1 day'\"),\n        group_by: fragment(\"?->'details'->>'type'\", phase),\n        select: %{\n          type:\n            type(\n              fragment(\"(?->'details'->>'type')\", phase),\n              Hygeia.CaseContext.Case.Phase.PossibleIndex.Type\n            ),\n          count: count(case.uuid)\n        }\n      )\n    )\n  end\n\n  @spec list_last24hours_quarantine_converted_to_index(tenant :: Tenant.t()) :: [\n          %{type: atom, count: integer}\n        ]\n  def list_last24hours_quarantine_converted_to_index(%Tenant{uuid: tenant_uuid} = _tenant) do\n    Repo.all(\n      from(\n        case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'end_reason'\", phase) == \"converted_to_index\" and\n            fragment(\"(?->'details'->>'end_reason_date')::date\", phase) >=\n              fragment(\"CURRENT_TIMESTAMP - INTERVAL '1 day'\"),\n        group_by: fragment(\"?->'details'->>'type'\", phase),\n        select: %{\n          type:\n            type(\n              fragment(\"(?->'details'->>'type')\", phase),\n              Hygeia.CaseContext.Case.Phase.PossibleIndex.Type\n            ),\n          count: count(case.uuid)\n        }\n      )\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of new_registered_cases_per_day.\n\n  ## Examples\n\n      iex> list_new_registered_cases_per_day()\n      [%NewRegisteredCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_new_registered_cases_per_day :: [NewRegisteredCasesPerDay.t()]\n  def list_new_registered_cases_per_day,\n    do:\n      Repo.all(\n        from(registered_cases_per_day in NewRegisteredCasesPerDay,\n          order_by: registered_cases_per_day.date\n        )\n      )\n\n  @spec list_new_registered_cases_per_day(tenant :: Tenant.t()) :: [\n          NewRegisteredCasesPerDay.t()\n        ]\n  def list_new_registered_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(registered_cases_per_day in NewRegisteredCasesPerDay,\n          where: registered_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: registered_cases_per_day.date\n        )\n      )\n\n  @spec list_new_registered_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          first_contact :: boolean(),\n          include_zero_values :: boolean()\n        ) :: [NewRegisteredCasesPerDay.t()]\n  def list_new_registered_cases_per_day(\n        tenant,\n        from,\n        to,\n        first_contact,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_new_registered_cases_per_day_query(\n            tenant,\n            from,\n            to,\n            first_contact,\n            include_zero_values\n          )\n        )\n\n  defp list_new_registered_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         first_contact,\n         include_zero_values\n       ) do\n    from(registered_cases_per_day in NewRegisteredCasesPerDay,\n      where:\n        registered_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            registered_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (registered_cases_per_day.first_contact == ^first_contact or\n             (^include_zero_values and is_nil(registered_cases_per_day.first_contact))) and\n          (^include_zero_values or registered_cases_per_day.count > 0),\n      order_by: registered_cases_per_day.date\n    )\n  end\nend\n", "# credo:disable-for-this-file Credo.Check.Readability.Specs\ndefmodule Hygeia.MixProject do\n  @moduledoc false\n\n  use Mix.Project\n\n  def project do\n    [\n      app: :hygeia,\n      version: \"0.0.0-noversion\",\n      build_path: \"../../_build\",\n      config_path: \"../../config/config.exs\",\n      deps_path: \"../../deps\",\n      lockfile: \"../../mix.lock\",\n      elixir: \"~> 1.12\",\n      elixirc_paths: elixirc_paths(Mix.env()),\n      start_permanent: Mix.env() == :prod,\n      compilers: [:gettext] ++ Mix.compilers(),\n      aliases: aliases(),\n      deps: deps(),\n      build_embedded: Mix.env() == :prod or System.get_env(\"BUILD_EMBEDDED\") in [\"1\", \"true\"],\n      test_coverage: [tool: ExCoveralls],\n      preferred_cli_env: [\n        coveralls: :test,\n        \"coveralls.detail\": :test,\n        \"coveralls.html\": :test,\n        \"coveralls.json\": :test,\n        \"coveralls.post\": :test,\n        \"coveralls.xml\": :test\n      ],\n      # Injected via Config\n      xref: [\n        exclude: [\n          HygeiaWeb.SendCaseClosedEmailUrlGenerator,\n          HygeiaWeb.AutoTracingCommunicationUrlGenerator\n        ]\n      ]\n    ]\n  end\n\n  # Configuration for the OTP application.\n  #\n  # Type `mix help compile.app` for more information.\n  def application do\n    [\n      mod: {Hygeia.Application, []},\n      extra_applications: [:logger, :runtime_tools]\n    ]\n  end\n\n  # Specifies which paths to compile per environment.\n  defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]\n  defp elixirc_paths(_env), do: [\"lib\"]\n\n  # Specifies your project dependencies.\n  #\n  # Type `mix help deps` for examples and options.\n  defp deps do\n    [\n      {:cadastre, \"~> 0.2.0\"},\n      {:crontab, \"~> 1.1\"},\n      {:csv, \"~> 2.4\"},\n      {:ecto_boot_migration, \"~> 0.2\"},\n      {:ecto_enum, \"~> 1.4\"},\n      {:ecto, \"~> 3.7\"},\n      {:ecto_sql, \"~> 3.4\"},\n      {:email_checker, \"~> 0.1\"},\n      {:erlsom, \"~> 1.5\"},\n      {:excoveralls, \"~> 0.4\", runtime: false, only: [:test]},\n      {:ex_phone_number, \"~> 0.2\"},\n      {:gen_smtp, \"~> 1.0\"},\n      {:gun, \"~> 2.0.0\", hex: :grpc_gun, override: true},\n      {:highlander, \"~> 0.2\"},\n      {:human_readable_identifier_generator, \"~> 1.0\"},\n      {:hygeia_cldr, in_umbrella: true},\n      {:hygeia_cluster, in_umbrella: true},\n      {:hygeia_gettext, in_umbrella: true},\n      {:hygeia_iam, in_umbrella: true},\n      {:jason, \"~> 1.0\"},\n      {:jsone, \"~> 1.5\", override: true},\n      {:mail, \"~> 0.2\"},\n      {:mox, \"~> 1.0\", only: :test},\n      {:paginator, \"~> 1.0\"},\n      {:phoenix, \"~> 1.6\"},\n      {:phoenix_pubsub, \"~> 2.0\"},\n      {:polymorphic_embed, \"~> 1.7\"},\n      {:postgrex, \">= 0.0.0\"},\n      {:sedex, \"~> 1.0\"},\n      {:sentry, \"~> 8.0\"},\n      {:websms, \"~> 1.0.0-alpha\"},\n      {:xlsxir, \"~> 1.6.4\"},\n      {:zitadel_api, \"~> 1.0-rc\"},\n      # TODO: Remove when issue in apps/hygeia_gettext/mix.exs is solved\n      {:gettext, \"~> 0.13\", github: \"elixir-gettext/gettext\", branch: \"master\", override: true}\n    ]\n  end\n\n  # Aliases are shortcuts or tasks specific to the current project.\n  #\n  # See the documentation for `Mix` for more info on aliases.\n  defp aliases do\n    [\n      setup: [\"ecto.reset\"],\n      \"ecto.setup\":\n        case Mix.env() do\n          :test ->\n            [\"ecto.create\", \"ecto.migrate\"]\n\n          _env ->\n            [\n              \"ecto.create\",\n              \"ecto.load --skip-if-loaded --quiet\",\n              \"ecto.migrate\",\n              \"run priv/repo/seeds.exs\"\n            ]\n        end,\n      \"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"],\n      test: [\"ecto.create --quiet\", \"ecto.migrate --quiet\", \"test\"]\n    ]\n  end\nend\n", "%{\n  \"base64url\": {:hex, :base64url, \"1.0.1\", \"f8c7f2da04ca9a5d0f5f50258f055e1d699f0e8bf4cfdb30b750865368403cf6\", [:rebar3], [], \"hexpm\", \"f9b3add4731a02a9b0410398b475b33e7566a695365237a6bdee1bb447719f5c\"},\n  \"briefly\": {:hex, :briefly, \"0.3.0\", \"16e6b76d2070ebc9cbd025fa85cf5dbaf52368c4bd896fb482b5a6b95a540c2f\", [:mix], [], \"hexpm\", \"c6ebf8fc3dcd4950dd10c03e953fb4f553a8bcf0ff4c8c40d71542434cd7e046\"},\n  \"bunt\": {:hex, :bunt, \"0.2.0\", \"951c6e801e8b1d2cbe58ebbd3e616a869061ddadcc4863d0a2182541acae9a38\", [:mix], [], \"hexpm\", \"7af5c7e09fe1d40f76c8e4f9dd2be7cebd83909f31fee7cd0e9eadc567da8353\"},\n  \"cadastre\": {:hex, :cadastre, \"0.2.1\", \"1e31763f495311c176c27e2e5013ade5bcad94b2ab52e36c8838b8d8adb564ae\", [:mix], [], \"hexpm\", \"5f4a6218777ecec4aa9462ee1fd4323dc4520e3343858546967b7c9455c89137\"},\n  \"castore\": {:hex, :castore, \"0.1.11\", \"c0665858e0e1c3e8c27178e73dffea699a5b28eb72239a3b2642d208e8594914\", [:mix], [], \"hexpm\", \"91b009ba61973b532b84f7c09ce441cba7aa15cb8b006cf06c6f4bba18220081\"},\n  \"certifi\": {:hex, :certifi, \"2.8.0\", \"d4fb0a6bb20b7c9c3643e22507e42f356ac090a1dcea9ab99e27e0376d695eba\", [:rebar3], [], \"hexpm\", \"6ac7efc1c6f8600b08d625292d4bbf584e14847ce1b6b5c44d983d273e1097ea\"},\n  \"cldr_utils\": {:hex, :cldr_utils, \"2.16.0\", \"5abd1835151e264f6f9a285ab8c7419954a45eec5ca5a356dea592faa23e80b9\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: true]}, {:certifi, \"~> 2.5\", [hex: :certifi, repo: \"hexpm\", optional: true]}, {:decimal, \"~> 1.9 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3ef5dc0fdfe566a5a4b8bda726cf760ebada69c0600affc4cb02b5e8ae7f7b47\"},\n  \"coerce\": {:hex, :coerce, \"1.0.1\", \"211c27386315dc2894ac11bc1f413a0e38505d808153367bd5c6e75a4003d096\", [:mix], [], \"hexpm\", \"b44a691700f7a1a15b4b7e2ff1fa30bebd669929ac8aa43cffe9e2f8bf051cf1\"},\n  \"combine\": {:hex, :combine, \"0.10.0\", \"eff8224eeb56498a2af13011d142c5e7997a80c8f5b97c499f84c841032e429f\", [:mix], [], \"hexpm\", \"1b1dbc1790073076580d0d1d64e42eae2366583e7aecd455d1215b0d16f2451b\"},\n  \"connection\": {:hex, :connection, \"1.1.0\", \"ff2a49c4b75b6fb3e674bfc5536451607270aac754ffd1bdfe175abe4a6d7a68\", [:mix], [], \"hexpm\", \"722c1eb0a418fbe91ba7bd59a47e28008a189d47e37e0e7bb85585a016b2869c\"},\n  \"cowboy\": {:hex, :cowboy, \"2.7.0\", \"91ed100138a764355f43316b1d23d7ff6bdb0de4ea618cb5d8677c93a7a2f115\", [:rebar3], [{:cowlib, \"~> 2.8.0\", [hex: :cowlib, repo: \"hexpm\", optional: false]}, {:ranch, \"~> 1.7.1\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\", \"04fd8c6a39edc6aaa9c26123009200fc61f92a3a94f3178c527b70b767c6e605\"},\n  \"cowboy_telemetry\": {:hex, :cowboy_telemetry, \"0.3.1\", \"ebd1a1d7aff97f27c66654e78ece187abdc646992714164380d8a041eda16754\", [:rebar3], [{:cowboy, \"~> 2.7\", [hex: :cowboy, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3a6efd3366130eab84ca372cbd4a7d3c3a97bdfcfb4911233b035d117063f0af\"},\n  \"cowlib\": {:hex, :cowlib, \"2.8.0\", \"fd0ff1787db84ac415b8211573e9a30a3ebe71b5cbff7f720089972b2319c8a4\", [:rebar3], [], \"hexpm\", \"79f954a7021b302186a950a32869dbc185523d99d3e44ce430cd1f3289f41ed4\"},\n  \"credo\": {:hex, :credo, \"1.5.6\", \"e04cc0fdc236fefbb578e0c04bd01a471081616e741d386909e527ac146016c6\", [:mix], [{:bunt, \"~> 0.2.0\", [hex: :bunt, repo: \"hexpm\", optional: false]}, {:file_system, \"~> 0.2.8\", [hex: :file_system, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"4b52a3e558bd64e30de62a648518a5ea2b6e3e5d2b164ef5296244753fc7eb17\"},\n  \"crontab\": {:hex, :crontab, \"1.1.10\", \"dc9bb1f4299138d47bce38341f5dcbee0aa6c205e864fba7bc847f3b5cb48241\", [:mix], [{:ecto, \"~> 1.0 or ~> 2.0 or ~> 3.0\", [hex: :ecto, repo: \"hexpm\", optional: true]}], \"hexpm\", \"1347d889d1a0eda997990876b4894359e34bfbbd688acbb0ba28a2795ca40685\"},\n  \"csv\": {:hex, :csv, \"2.4.1\", \"50e32749953b6bf9818dbfed81cf1190e38cdf24f95891303108087486c5925e\", [:mix], [{:parallel_stream, \"~> 1.0.4\", [hex: :parallel_stream, repo: \"hexpm\", optional: false]}], \"hexpm\", \"54508938ac67e27966b10ef49606e3ad5995d665d7fc2688efb3eab1307c9079\"},\n  \"db_connection\": {:hex, :db_connection, \"2.4.0\", \"d04b1b73795dae60cead94189f1b8a51cc9e1f911c234cc23074017c43c031e5\", [:mix], [{:connection, \"~> 1.0\", [hex: :connection, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ad416c21ad9f61b3103d254a71b63696ecadb6a917b36f563921e0de00d7d7c8\"},\n  \"decimal\": {:hex, :decimal, \"2.0.0\", \"a78296e617b0f5dd4c6caf57c714431347912ffb1d0842e998e9792b5642d697\", [:mix], [], \"hexpm\", \"34666e9c55dea81013e77d9d87370fe6cb6291d1ef32f46a1600230b1d44f577\"},\n  \"dialyxir\": {:hex, :dialyxir, \"1.1.0\", \"c5aab0d6e71e5522e77beff7ba9e08f8e02bad90dfbeffae60eaf0cb47e29488\", [:mix], [{:erlex, \">= 0.2.6\", [hex: :erlex, repo: \"hexpm\", optional: false]}], \"hexpm\", \"07ea8e49c45f15264ebe6d5b93799d4dd56a44036cf42d0ad9c960bc266c0b9a\"},\n  \"earmark\": {:hex, :earmark, \"1.4.15\", \"2c7f924bf495ec1f65bd144b355d0949a05a254d0ec561740308a54946a67888\", [:mix], [{:earmark_parser, \">= 1.4.13\", [hex: :earmark_parser, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3b1209b85bc9f3586f370f7c363f6533788fb4e51db23aa79565875e7f9999ee\"},\n  \"earmark_parser\": {:hex, :earmark_parser, \"1.4.15\", \"b29e8e729f4aa4a00436580dcc2c9c5c51890613457c193cc8525c388ccb2f06\", [:mix], [], \"hexpm\", \"044523d6438ea19c1b8ec877ec221b008661d3c27e3b848f4c879f500421ca5c\"},\n  \"ecto\": {:hex, :ecto, \"3.7.1\", \"a20598862351b29f80f285b21ec5297da1181c0442687f9b8329f0445d228892\", [:mix], [{:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"d36e5b39fc479e654cffd4dbe1865d9716e4a9b6311faff799b6f90ab81b8638\"},\n  \"ecto_boot_migration\": {:hex, :ecto_boot_migration, \"0.3.0\", \"517ccb8aca5306acf49689a3e3f5beeb3cd8362d426e322d2631442c531595d3\", [:mix], [{:ecto_sql, \"~> 3.0\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3c7aed8ed08ba6d3df23d4715c1e044fa79cd8387deba8d7ba0bad13518b9ea1\"},\n  \"ecto_enum\": {:hex, :ecto_enum, \"1.4.0\", \"d14b00e04b974afc69c251632d1e49594d899067ee2b376277efd8233027aec8\", [:mix], [{:ecto, \">= 3.0.0\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:ecto_sql, \"> 3.0.0\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}, {:mariaex, \">= 0.0.0\", [hex: :mariaex, repo: \"hexpm\", optional: true]}, {:postgrex, \">= 0.0.0\", [hex: :postgrex, repo: \"hexpm\", optional: true]}], \"hexpm\", \"8fb55c087181c2b15eee406519dc22578fa60dd82c088be376d0010172764ee4\"},\n  \"ecto_psql_extras\": {:hex, :ecto_psql_extras, \"0.7.0\", \"d8aa261062e7acfaa3fcbef41f4d4fd83215a30d9eb5adc0a6e6d14f15ae3944\", [:mix], [{:ecto_sql, \"~> 3.4\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}, {:postgrex, \">= 0.15.7\", [hex: :postgrex, repo: \"hexpm\", optional: false]}, {:table_rex, \"~> 3.1.1\", [hex: :table_rex, repo: \"hexpm\", optional: false]}], \"hexpm\", \"6ae6d0635d553e7a89b641a1379b49d0b52e4d0cce2cce8cf980f5b7cda6184f\"},\n  \"ecto_sql\": {:hex, :ecto_sql, \"3.7.0\", \"2fcaad4ab0c8d76a5afbef078162806adbe709c04160aca58400d5cbbe8eeac6\", [:mix], [{:db_connection, \"~> 2.2\", [hex: :db_connection, repo: \"hexpm\", optional: false]}, {:ecto, \"~> 3.7.0\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:myxql, \"~> 0.4.0 or ~> 0.5.0\", [hex: :myxql, repo: \"hexpm\", optional: true]}, {:postgrex, \"~> 0.15.0 or ~> 1.0\", [hex: :postgrex, repo: \"hexpm\", optional: true]}, {:tds, \"~> 2.1.1\", [hex: :tds, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4.0 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"a26135dfa1d99bf87a928c464cfa25bba6535a4fe761eefa56077a4febc60f70\"},\n  \"email_checker\": {:hex, :email_checker, \"0.2.1\", \"7fe36fc7cfbbf02b37040fcafbd6a27aca56ab344bcf8138a71a9549a57b4117\", [:mix], [{:socket, \"~> 0.3.1\", [hex: :socket, repo: \"hexpm\", optional: true]}], \"hexpm\", \"4abb60a4bf67782d4cec5d41417e30dc54ff64e2fce356409914e809688403ac\"},\n  \"erlex\": {:hex, :erlex, \"0.2.6\", \"c7987d15e899c7a2f34f5420d2a2ea0d659682c06ac607572df55a43753aa12e\", [:mix], [], \"hexpm\", \"2ed2e25711feb44d52b17d2780eabf998452f6efda104877a3881c2f8c0c0c75\"},\n  \"erljwt\": {:hex, :erljwt, \"2.0.7\", \"15c76e9e17b3db2a1aa105eba0ab384ba09d5c5742376f074dff39a0cc67578c\", [:rebar3], [{:base64url, \"~> 1.0\", [hex: :base64url, repo: \"hexpm\", optional: false]}, {:jsone, \"~> 1.4\", [hex: :jsone, repo: \"hexpm\", optional: false]}], \"hexpm\", \"61266d3d3cb35b3ea341916ce73b0aefe0face260b402729ae7426eb8d5293c3\"},\n  \"erlsom\": {:hex, :erlsom, \"1.5.0\", \"c5a5cdd0ee0e8dca62bcc4b13ff08da24fdefc16ccd8b25282a2fda2ba1be24a\", [:rebar3], [], \"hexpm\", \"55a9dbf9cfa77fcfc108bd8e2c4f9f784dea228a8f4b06ea10b684944946955a\"},\n  \"ex_aws\": {:hex, :ex_aws, \"2.2.5\", \"013c5c6a1ff4ff09266b3904d3d65d8f9717edbd52f760470469af8b36c860f7\", [:mix], [{:configparser_ex, \"~> 4.0\", [hex: :configparser_ex, repo: \"hexpm\", optional: true]}, {:hackney, \"~> 1.16\", [hex: :hackney, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.1\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:jsx, \"~> 3.0\", [hex: :jsx, repo: \"hexpm\", optional: true]}, {:sweet_xml, \"~> 0.6\", [hex: :sweet_xml, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4.3\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"e8da4c3470e8e249f406013d2cc42f7f80a71c3f2dad51aba7155d028a13868b\"},\n  \"ex_aws_s3\": {:hex, :ex_aws_s3, \"2.3.0\", \"5dfe50116bad048240bae7cd9418bfe23296542ff72a01b9138113a1cd31451c\", [:mix], [{:ex_aws, \"~> 2.0\", [hex: :ex_aws, repo: \"hexpm\", optional: false]}, {:sweet_xml, \">= 0.0.0\", [hex: :sweet_xml, repo: \"hexpm\", optional: true]}], \"hexpm\", \"0b13b11478825d62d2f6e57ae763695331be06f2216468f31bb304316758b096\"},\n  \"ex_cldr\": {:hex, :ex_cldr, \"2.23.2\", \"76c51b722cefdcd1a13eb5e7c7f4da5b9acfd64ff054424a977ff6e2d6a78981\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: true]}, {:certifi, \"~> 2.5\", [hex: :certifi, repo: \"hexpm\", optional: true]}, {:cldr_utils, \"~> 2.15\", [hex: :cldr_utils, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:gettext, \"~> 0.13\", [hex: :gettext, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:nimble_parsec, \"~> 0.5 or ~> 1.0\", [hex: :nimble_parsec, repo: \"hexpm\", optional: true]}, {:plug, \"~> 1.9\", [hex: :plug, repo: \"hexpm\", optional: true]}], \"hexpm\", \"d9ce03c8d3fdc7ab751bdb2be742b6972f94adc856d51dfe5bb06a51ac96b8f4\"},\n  \"ex_cldr_calendars\": {:hex, :ex_cldr_calendars, \"1.16.0\", \"7f076c85b63b03cf2c5719b75a9c1ca1b177d6d164a94a1eaf4bfb1a5dca152a\", [:mix], [{:calendar_interval, \"~> 0.2\", [hex: :calendar_interval, repo: \"hexpm\", optional: true]}, {:earmark, \"~> 1.0\", [hex: :earmark, repo: \"hexpm\", optional: false]}, {:ex_cldr, \"~> 2.23\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:ex_cldr_units, \"~> 3.7\", [hex: :ex_cldr_units, repo: \"hexpm\", optional: true]}, {:ex_doc, \"~> 0.21\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"483d91a0fb4909efe211ae59a3620a28bf1a72d64dbf922ae940115e64f6138a\"},\n  \"ex_cldr_currencies\": {:hex, :ex_cldr_currencies, \"2.11.1\", \"a6e56209d6f98082cd197aa424333e7a0e38e79253fce9589117719728de4fef\", [:mix], [{:ex_cldr, \"~> 2.23\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"99e8eb3f48a30127bb11ab70f484c124c9fe5b11bce710c94c53939032b0c58c\"},\n  \"ex_cldr_dates_times\": {:hex, :ex_cldr_dates_times, \"2.9.4\", \"9ee780d2226f695fc80e45f61118c3feccc9ec47ef1685300b4c1a22a039111f\", [:mix], [{:calendar_interval, \"~> 0.2\", [hex: :calendar_interval, repo: \"hexpm\", optional: true]}, {:ex_cldr_calendars, \"~> 1.15\", [hex: :ex_cldr_calendars, repo: \"hexpm\", optional: false]}, {:ex_cldr_numbers, \"~> 2.19\", [hex: :ex_cldr_numbers, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"0597172df5e7bcc7d79b5405adb1ee2b06c607a0879c66c768fba055b5c81434\"},\n  \"ex_cldr_languages\": {:hex, :ex_cldr_languages, \"0.2.3\", \"3863f0e9f38c13b8822b5d998a0bc12941386f25fc6f6011313428784de40c44\", [:mix], [{:ex_cldr, \"~> 2.2 and >= 2.2.1\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"af0b10ff3d405190289b3defa130b07add5b24f8ffa3466ec07bc0575d97587e\"},\n  \"ex_cldr_lists\": {:hex, :ex_cldr_lists, \"2.8.0\", \"373d8574d28590fdbc475436cc1590d37200867b4116f69a51e6e57cb0e62ee6\", [:mix], [{:ex_cldr_numbers, \"~> 2.17\", [hex: :ex_cldr_numbers, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"455406d488452d6eb0b044e23a918e015418787ffc87791d81e7320742269483\"},\n  \"ex_cldr_numbers\": {:hex, :ex_cldr_numbers, \"2.22.1\", \"c710abb30a89875a5e2aff5f8a5e073ffad8689c6e84034729f10c51d39c4dcf\", [:mix], [{:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:ex_cldr, \"~> 2.23\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:ex_cldr_currencies, \"~> 2.11\", [hex: :ex_cldr_currencies, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"2015161a54f583eede00f18cdf43ec2b27aecf53e22486f6158d787da1f02bb9\"},\n  \"ex_cldr_units\": {:hex, :ex_cldr_units, \"3.7.1\", \"89241de864e4673fe352d15d5727d89c63c10ce9c271b827c07452719f5e2a16\", [:mix], [{:cldr_utils, \"~> 2.16\", [hex: :cldr_utils, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}, {:ex_cldr_lists, \"~> 2.8\", [hex: :ex_cldr_lists, repo: \"hexpm\", optional: false]}, {:ex_cldr_numbers, \"~> 2.19\", [hex: :ex_cldr_numbers, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:ratio, \"~> 2.4\", [hex: :ratio, repo: \"hexpm\", optional: false]}], \"hexpm\", \"b9595bea124b6355632784bc8fb4a924c6456f1934a9a80359622e52b9bcdeb6\"},\n  \"ex_doc\": {:hex, :ex_doc, \"0.25.3\", \"3edf6a0d70a39d2eafde030b8895501b1c93692effcbd21347296c18e47618ce\", [:mix], [{:earmark_parser, \"~> 1.4.0\", [hex: :earmark_parser, repo: \"hexpm\", optional: false]}, {:makeup_elixir, \"~> 0.14\", [hex: :makeup_elixir, repo: \"hexpm\", optional: false]}, {:makeup_erlang, \"~> 0.1\", [hex: :makeup_erlang, repo: \"hexpm\", optional: false]}], \"hexpm\", \"9ebebc2169ec732a38e9e779fd0418c9189b3ca93f4a676c961be6c1527913f5\"},\n  \"ex_phone_number\": {:hex, :ex_phone_number, \"0.2.1\", \"c332d5119b0ffebe3f3e4c1d5264d544b972d5d350230d7b5b1586bbfaf1036e\", [:mix], [{:sweet_xml, \"~> 0.6.5\", [hex: :sweet_xml, repo: \"hexpm\", optional: false]}], \"hexpm\", \"988acbe6ffb70ee33164ad5c185dc6767028369280dcbb4ceda4bc66373b2b10\"},\n  \"excoveralls\": {:hex, :excoveralls, \"0.14.3\", \"d17dc249ad32e469afd2bc656b58e810109d4367ec6bd467bed57a84dc4a3e02\", [:mix], [{:hackney, \"~> 1.16\", [hex: :hackney, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"b5aecdfdcf48e9d5e1c210841589b30981a5e7e66055cb8691a6f90b1601c108\"},\n  \"file_system\": {:hex, :file_system, \"0.2.10\", \"fb082005a9cd1711c05b5248710f8826b02d7d1784e7c3451f9c1231d4fc162d\", [:mix], [], \"hexpm\", \"41195edbfb562a593726eda3b3e8b103a309b733ad25f3d642ba49696bf715dc\"},\n  \"floki\": {:hex, :floki, \"0.31.0\", \"f05ee8a8e6a3ced4e62beeb2c79a63bc8e12ab98fbaaf6e6a3d9b76b1278e23f\", [:mix], [{:html_entities, \"~> 0.5.0\", [hex: :html_entities, repo: \"hexpm\", optional: false]}], \"hexpm\", \"b05afa372f5c345a5bf240ac25ea1f0f3d5fcfd7490ac0beeb4a203f9444891e\"},\n  \"gen_smtp\": {:hex, :gen_smtp, \"1.1.1\", \"bf9303c31735100631b1d708d629e4c65944319d1143b5c9952054f4a1311d85\", [:rebar3], [{:hut, \"1.3.0\", [hex: :hut, repo: \"hexpm\", optional: false]}, {:ranch, \">= 1.7.0\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\", \"51bc50cc017efd4a4248cbc39ea30fb60efa7d4a49688986fafad84434ff9ab7\"},\n  \"gettext\": {:git, \"https://github.com/elixir-gettext/gettext.git\", \"becf0585b12762bddb6dd04a9f0a307c8768fa1a\", [branch: \"master\"]},\n  \"google_protos\": {:hex, :google_protos, \"0.1.0\", \"c6b9e12092d17571b093d4156d004494ca143b65dbbcbfc3ffff463ea03467c0\", [:mix], [{:protobuf, \"~> 0.5\", [hex: :protobuf, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ff5564525f89d2638a4cfa9fb4d31e9ee9d9d7cb937b3e8a95f558440c039e1b\"},\n  \"grpc\": {:hex, :grpc, \"0.5.0-beta.1\", \"7d43f52e138fe261f5b4981f1ada515dfc2e1bfa9dc92c7022e8f41e7e49b571\", [:mix], [{:cowboy, \"~> 2.7.0\", [hex: :cowboy, repo: \"hexpm\", optional: false]}, {:gun, \"~> 2.0.0\", [hex: :grpc_gun, repo: \"hexpm\", optional: false]}, {:protobuf, \"~> 0.5\", [hex: :protobuf, repo: \"hexpm\", optional: false]}], \"hexpm\", \"fbbf8872935c295b7575435fe4128372c23c6ded89c2ef8058af3c6167bb3f65\"},\n  \"gun\": {:hex, :grpc_gun, \"2.0.0\", \"f99678a2ab975e74372a756c86ec30a8384d3ac8a8b86c7ed6243ef4e61d2729\", [:rebar3], [{:cowlib, \"~> 2.8.0\", [hex: :cowlib, repo: \"hexpm\", optional: false]}], \"hexpm\", \"03dbbca1a9c604a0267a40ea1d69986225091acb822de0b2dbea21d5815e410b\"},\n  \"hackney\": {:hex, :hackney, \"1.18.0\", \"c4443d960bb9fba6d01161d01cd81173089686717d9490e5d3606644c48d121f\", [:rebar3], [{:certifi, \"~>2.8.0\", [hex: :certifi, repo: \"hexpm\", optional: false]}, {:idna, \"~>6.1.0\", [hex: :idna, repo: \"hexpm\", optional: false]}, {:metrics, \"~>1.0.0\", [hex: :metrics, repo: \"hexpm\", optional: false]}, {:mimerl, \"~>1.1\", [hex: :mimerl, repo: \"hexpm\", optional: false]}, {:parse_trans, \"3.3.1\", [hex: :parse_trans, repo: \"hexpm\", optional: false]}, {:ssl_verify_fun, \"~>1.1.0\", [hex: :ssl_verify_fun, repo: \"hexpm\", optional: false]}, {:unicode_util_compat, \"~>0.7.0\", [hex: :unicode_util_compat, repo: \"hexpm\", optional: false]}], \"hexpm\", \"9afcda620704d720db8c6a3123e9848d09c87586dc1c10479c42627b905b5c5e\"},\n  \"highlander\": {:hex, :highlander, \"0.2.1\", \"e59b459f857e89daf73f2598bf2b2c0479a435481e6101ea389fd3625919b052\", [:mix], [], \"hexpm\", \"5ba19a18358803d82a923511acec8ee85fac30731c5ca056f2f934bc3d3afd9a\"},\n  \"html_entities\": {:hex, :html_entities, \"0.5.2\", \"9e47e70598da7de2a9ff6af8758399251db6dbb7eebe2b013f2bbd2515895c3c\", [:mix], [], \"hexpm\", \"c53ba390403485615623b9531e97696f076ed415e8d8058b1dbaa28181f4fdcc\"},\n  \"human_readable_identifier_generator\": {:hex, :human_readable_identifier_generator, \"1.0.0\", \"0e58c50c60055af05118da93d948b03fbc698425618774a9d1b0532c29b95d73\", [:mix], [], \"hexpm\", \"3669c913a2bdc0342385deb832cc06852af897d80e14db1d50b163fe959e8435\"},\n  \"hut\": {:hex, :hut, \"1.3.0\", \"71f2f054e657c03f959cf1acc43f436ea87580696528ca2a55c8afb1b06c85e7\", [:\"erlang.mk\", :rebar, :rebar3], [], \"hexpm\", \"7e15d28555d8a1f2b5a3a931ec120af0753e4853a4c66053db354f35bf9ab563\"},\n  \"idna\": {:hex, :idna, \"6.1.1\", \"8a63070e9f7d0c62eb9d9fcb360a7de382448200fbbd1b106cc96d3d8099df8d\", [:rebar3], [{:unicode_util_compat, \"~>0.7.0\", [hex: :unicode_util_compat, repo: \"hexpm\", optional: false]}], \"hexpm\", \"92376eb7894412ed19ac475e4a86f7b413c1b9fbb5bd16dccd57934157944cea\"},\n  \"jason\": {:hex, :jason, \"1.2.2\", \"ba43e3f2709fd1aa1dce90aaabfd039d000469c05c56f0b8e31978e03fa39052\", [:mix], [{:decimal, \"~> 1.0 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}], \"hexpm\", \"18a228f5f0058ee183f29f9eae0805c6e59d61c3b006760668d8d18ff0d12179\"},\n  \"jose\": {:hex, :jose, \"1.11.2\", \"f4c018ccf4fdce22c71e44d471f15f723cb3efab5d909ab2ba202b5bf35557b3\", [:mix, :rebar3], [], \"hexpm\", \"98143fbc48d55f3a18daba82d34fe48959d44538e9697c08f34200fa5f0947d2\"},\n  \"jsone\": {:hex, :jsone, \"1.6.1\", \"7ea1098fe004c4127320fe0e3cf6a951b01f82039feaa56c322dc7e34dd59762\", [:rebar3], [], \"hexpm\", \"a6c1df6081df742068d2ed747a4fe8a7740c56421b53e02bc9d4907dd3502922\"},\n  \"libcluster\": {:hex, :libcluster, \"3.3.0\", \"f7d45ff56d88e9fb4c30aee662480cbab69ebc0e7f7da4ad8d01b1e4f7492da8\", [:mix], [{:jason, \"~> 1.1\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ecdcdc88334ec8eb18b10a13a1d5f22a3319a970b5b1e66cfe71c7719a4ab6cc\"},\n  \"mail\": {:hex, :mail, \"0.2.3\", \"2c6bb5f8a5f74845fa50ecd0fb45ea16b164026f285f45104f1c4c078cd616d4\", [:mix], [], \"hexpm\", \"932b398fa9c69fdf290d7ff63175826e0f1e24414d5b0763bb00a2acfc6c6bf5\"},\n  \"makeup\": {:hex, :makeup, \"1.0.5\", \"d5a830bc42c9800ce07dd97fa94669dfb93d3bf5fcf6ea7a0c67b2e0e4a7f26c\", [:mix], [{:nimble_parsec, \"~> 0.5 or ~> 1.0\", [hex: :nimble_parsec, repo: \"hexpm\", optional: false]}], \"hexpm\", \"cfa158c02d3f5c0c665d0af11512fed3fba0144cf1aadee0f2ce17747fba2ca9\"},\n  \"makeup_elixir\": {:hex, :makeup_elixir, \"0.15.1\", \"b5888c880d17d1cc3e598f05cdb5b5a91b7b17ac4eaf5f297cb697663a1094dd\", [:mix], [{:makeup, \"~> 1.0\", [hex: :makeup, repo: \"hexpm\", optional: false]}, {:nimble_parsec, \"~> 1.1\", [hex: :nimble_parsec, repo: \"hexpm\", optional: false]}], \"hexpm\", \"db68c173234b07ab2a07f645a5acdc117b9f99d69ebf521821d89690ae6c6ec8\"},\n  \"makeup_erlang\": {:hex, :makeup_erlang, \"0.1.1\", \"3fcb7f09eb9d98dc4d208f49cc955a34218fc41ff6b84df7c75b3e6e533cc65f\", [:mix], [{:makeup, \"~> 1.0\", [hex: :makeup, repo: \"hexpm\", optional: false]}], \"hexpm\", \"174d0809e98a4ef0b3309256cbf97101c6ec01c4ab0b23e926a9e17df2077cbb\"},\n  \"metrics\": {:hex, :metrics, \"1.0.1\", \"25f094dea2cda98213cecc3aeff09e940299d950904393b2a29d191c346a8486\", [:rebar3], [], \"hexpm\", \"69b09adddc4f74a40716ae54d140f93beb0fb8978d8636eaded0c31b6f099f16\"},\n  \"mime\": {:hex, :mime, \"1.6.0\", \"dabde576a497cef4bbdd60aceee8160e02a6c89250d6c0b29e56c0dfb00db3d2\", [:mix], [], \"hexpm\", \"31a1a8613f8321143dde1dafc36006a17d28d02bdfecb9e95a880fa7aabd19a7\"},\n  \"mimerl\": {:hex, :mimerl, \"1.2.0\", \"67e2d3f571088d5cfd3e550c383094b47159f3eee8ffa08e64106cdf5e981be3\", [:rebar3], [], \"hexpm\", \"f278585650aa581986264638ebf698f8bb19df297f66ad91b18910dfc6e19323\"},\n  \"mint\": {:hex, :mint, \"1.4.0\", \"cd7d2451b201fc8e4a8fd86257fb3878d9e3752899eb67b0c5b25b180bde1212\", [:mix], [{:castore, \"~> 0.1.0\", [hex: :castore, repo: \"hexpm\", optional: true]}], \"hexpm\", \"10a99e144b815cbf8522dccbc8199d15802440fc7a64d67b6853adb6fa170217\"},\n  \"mox\": {:hex, :mox, \"1.0.0\", \"4b3c7005173f47ff30641ba044eb0fe67287743eec9bd9545e37f3002b0a9f8b\", [:mix], [], \"hexpm\", \"201b0a20b7abdaaab083e9cf97884950f8a30a1350a1da403b3145e213c6f4df\"},\n  \"nebulex\": {:hex, :nebulex, \"2.1.1\", \"ae7fe6791b03b00caeaa1a63c80de061903617187c3635cbf016a5b78b0459c5\", [:mix], [{:decorator, \"~> 1.4\", [hex: :decorator, repo: \"hexpm\", optional: true]}, {:shards, \"~> 1.0\", [hex: :shards, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: true]}], \"hexpm\", \"a8f803e8fd0fc653fe10e5ef72c78592b0f8cc17980d02d6dce0b93047569624\"},\n  \"nimble_parsec\": {:hex, :nimble_parsec, \"1.1.0\", \"3a6fca1550363552e54c216debb6a9e95bd8d32348938e13de5eda962c0d7f89\", [:mix], [], \"hexpm\", \"08eb32d66b706e913ff748f11694b17981c0b04a33ef470e33e11b3d3ac8f54b\"},\n  \"numbers\": {:hex, :numbers, \"5.2.4\", \"f123d5bb7f6acc366f8f445e10a32bd403c8469bdbce8ce049e1f0972b607080\", [:mix], [{:coerce, \"~> 1.0\", [hex: :coerce, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.9 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}], \"hexpm\", \"eeccf5c61d5f4922198395bf87a465b6f980b8b862dd22d28198c5e6fab38582\"},\n  \"oidcc\": {:hex, :oidcc, \"2.0.0-alpha.1\", \"e2847841bc748c1a1f5a8a8c57541effe8dcd4268e91bc0740b241405a2dfd45\", [:rebar3], [{:erljwt, \"~> 2.0.7\", [hex: :erljwt, repo: \"hexpm\", optional: false]}, {:hackney, \"~> 1.18\", [hex: :hackney, repo: \"hexpm\", optional: false]}], \"hexpm\", \"69e1aa464978b658ee0d2b52e5f3d7c74f313aa858caf3c3f3076cf12a6191ce\"},\n  \"openapi_compiler\": {:hex, :openapi_compiler, \"1.0.0-beta.13\", \"e2f4af1dd210201202232e0085c8f3b64b5064c06557cc1cdee4784872c71430\", [:mix], [{:jason, \"~> 1.2\", [hex: :jason, repo: \"hexpm\", optional: false]}, {:tesla, \"~> 1.3\", [hex: :tesla, repo: \"hexpm\", optional: false]}, {:uri_template, \"~> 1.2\", [hex: :uri_template, repo: \"hexpm\", optional: false]}, {:yamerl, \"~> 0.7\", [hex: :yamerl, repo: \"hexpm\", optional: false]}], \"hexpm\", \"f67c01168c9842a68a5d4514fe226a294df707bac03fc779cd61f242c3b097d1\"},\n  \"paginator\": {:hex, :paginator, \"1.0.4\", \"471e8e59e7a08541c5b7d2ea7166308c8e05ceb412fb444f3bdf320f5d793260\", [:mix], [{:ecto, \"~> 3.0\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:ecto_sql, \"~> 3.0\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}, {:plug_crypto, \"~> 1.2.0\", [hex: :plug_crypto, repo: \"hexpm\", optional: false]}, {:postgrex, \"~> 0.13\", [hex: :postgrex, repo: \"hexpm\", optional: true]}], \"hexpm\", \"9d79d21c0192d8d1fc562e5c99b5ebf7e0bb443c671e256b41fd709170730b91\"},\n  \"parallel_stream\": {:hex, :parallel_stream, \"1.0.6\", \"b967be2b23f0f6787fab7ed681b4c45a215a81481fb62b01a5b750fa8f30f76c\", [:mix], [], \"hexpm\", \"639b2e8749e11b87b9eb42f2ad325d161c170b39b288ac8d04c4f31f8f0823eb\"},\n  \"parse_trans\": {:hex, :parse_trans, \"3.3.1\", \"16328ab840cc09919bd10dab29e431da3af9e9e7e7e6f0089dd5a2d2820011d8\", [:rebar3], [], \"hexpm\", \"07cd9577885f56362d414e8c4c4e6bdf10d43a8767abb92d24cbe8b24c54888b\"},\n  \"pdf_generator\": {:hex, :pdf_generator, \"0.6.2\", \"601f145a0db0dcd7b8c35e1698038f78f18fc42eb3bd2001f826a3a239205f0e\", [:mix], [], \"hexpm\", \"82af2debaae156834b14dc0727cd8c3ded70ed4a2a909107d514bf28f5d1fc35\"},\n  \"phoenix\": {:hex, :phoenix, \"1.6.0\", \"7b85023f7ddef9a5c70909a51cc37c8b868b474d853f90f4280efd26b0e7cce5\", [:mix], [{:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:phoenix_pubsub, \"~> 2.0\", [hex: :phoenix_pubsub, repo: \"hexpm\", optional: false]}, {:phoenix_view, \"~> 1.0\", [hex: :phoenix_view, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.10\", [hex: :plug, repo: \"hexpm\", optional: false]}, {:plug_cowboy, \"~> 2.2\", [hex: :plug_cowboy, repo: \"hexpm\", optional: true]}, {:plug_crypto, \"~> 1.2\", [hex: :plug_crypto, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"52ffdd31f2daeb399b2e1eb57d468f99a1ad6eee5d8ea19d2353492f06c9fc96\"},\n  \"phoenix_active_link\": {:git, \"https://github.com/jshmrtn/phoenix-active-link.git\", \"b76370d61b351b0255ea73bbf4eaee1a1fb8f0b0\", [branch: \"phoenix_html_v3\"]},\n  \"phoenix_ecto\": {:hex, :phoenix_ecto, \"4.4.0\", \"0672ed4e4808b3fbed494dded89958e22fb882de47a97634c0b13e7b0b5f7720\", [:mix], [{:ecto, \"~> 3.3\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:phoenix_html, \"~> 2.14.2 or ~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: true]}, {:plug, \"~> 1.9\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"09864e558ed31ee00bd48fcc1d4fc58ae9678c9e81649075431e69dbabb43cc1\"},\n  \"phoenix_html\": {:hex, :phoenix_html, \"3.0.4\", \"232d41884fe6a9c42d09f48397c175cd6f0d443aaa34c7424da47604201df2e1\", [:mix], [{:plug, \"~> 1.5\", [hex: :plug, repo: \"hexpm\", optional: true]}], \"hexpm\", \"ce17fd3cf815b2ed874114073e743507704b1f5288bb03c304a77458485efc8b\"},\n  \"phoenix_live_dashboard\": {:hex, :phoenix_live_dashboard, \"0.5.2\", \"b3b863ba9da3c9bd0b18fc32e96e8e5e25faf6a5f62db1dd91029835ea4cc90f\", [:mix], [{:ecto, \"~> 3.6.2 or ~> 3.7\", [hex: :ecto, repo: \"hexpm\", optional: true]}, {:ecto_psql_extras, \"~> 0.7\", [hex: :ecto_psql_extras, repo: \"hexpm\", optional: true]}, {:phoenix_live_view, \"~> 0.16.0\", [hex: :phoenix_live_view, repo: \"hexpm\", optional: false]}, {:telemetry_metrics, \"~> 0.6.0\", [hex: :telemetry_metrics, repo: \"hexpm\", optional: false]}], \"hexpm\", \"6d7124f36ee6c74be334386b8b5a1eb27223c77f86f4167de132b9358036f199\"},\n  \"phoenix_live_reload\": {:hex, :phoenix_live_reload, \"1.3.3\", \"3a53772a6118d5679bf50fc1670505a290e32a1d195df9e069d8c53ab040c054\", [:mix], [{:file_system, \"~> 0.2.1 or ~> 0.3\", [hex: :file_system, repo: \"hexpm\", optional: false]}, {:phoenix, \"~> 1.4\", [hex: :phoenix, repo: \"hexpm\", optional: false]}], \"hexpm\", \"766796676e5f558dbae5d1bdb066849673e956005e3730dfd5affd7a6da4abac\"},\n  \"phoenix_live_view\": {:hex, :phoenix_live_view, \"0.16.4\", \"5692edd0bac247a9a816eee7394e32e7a764959c7d0cf9190662fc8b0cd24c97\", [:mix], [{:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:phoenix, \"~> 1.5.9 or ~> 1.6.0\", [hex: :phoenix, repo: \"hexpm\", optional: false]}, {:phoenix_html, \"~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4.2 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"754ba49aa2e8601afd4f151492c93eb72df69b0b9856bab17711b8397e43bba0\"},\n  \"phoenix_pubsub\": {:hex, :phoenix_pubsub, \"2.0.0\", \"a1ae76717bb168cdeb10ec9d92d1480fec99e3080f011402c0a2d68d47395ffb\", [:mix], [], \"hexpm\", \"c52d948c4f261577b9c6fa804be91884b381a7f8f18450c5045975435350f771\"},\n  \"phoenix_view\": {:hex, :phoenix_view, \"1.0.0\", \"fea71ecaaed71178b26dd65c401607de5ec22e2e9ef141389c721b3f3d4d8011\", [:mix], [{:phoenix_html, \"~> 2.14.2 or ~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: true]}], \"hexpm\", \"82be3e2516f5633220246e2e58181282c71640dab7afc04f70ad94253025db0c\"},\n  \"plug\": {:hex, :plug, \"1.12.1\", \"645678c800601d8d9f27ad1aebba1fdb9ce5b2623ddb961a074da0b96c35187d\", [:mix], [{:mime, \"~> 1.0 or ~> 2.0\", [hex: :mime, repo: \"hexpm\", optional: false]}, {:plug_crypto, \"~> 1.1.1 or ~> 1.2\", [hex: :plug_crypto, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4.3 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"d57e799a777bc20494b784966dc5fbda91eb4a09f571f76545b72a634ce0d30b\"},\n  \"plug_checkup\": {:git, \"https://github.com/jshmrtn/plug_checkup.git\", \"93d41c4763cf03d135b654be586dc652a0db815d\", [branch: \"check_query_selector\"]},\n  \"plug_content_security_policy\": {:hex, :plug_content_security_policy, \"0.2.1\", \"0a19c76307ad000b3757739c14b34b83ecccf7d0a3472e64e14797a20b62939b\", [:mix], [{:plug, \"~> 1.3\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ceea10050671c0387c64526e2cb337ee08e12705c737eaed80439266df5b2e29\"},\n  \"plug_cowboy\": {:hex, :plug_cowboy, \"2.5.2\", \"62894ccd601cf9597e2c23911ff12798a8a18d237e9739f58a6b04e4988899fe\", [:mix], [{:cowboy, \"~> 2.7\", [hex: :cowboy, repo: \"hexpm\", optional: false]}, {:cowboy_telemetry, \"~> 0.3\", [hex: :cowboy_telemetry, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.7\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ea6e87f774c8608d60c8d34022a7d073bd7680a0a013f049fc62bf35efea1044\"},\n  \"plug_crypto\": {:hex, :plug_crypto, \"1.2.2\", \"05654514ac717ff3a1843204b424477d9e60c143406aa94daf2274fdd280794d\", [:mix], [], \"hexpm\", \"87631c7ad914a5a445f0a3809f99b079113ae4ed4b867348dd9eec288cecb6db\"},\n  \"plug_dynamic\": {:hex, :plug_dynamic, \"1.0.0\", \"aecc1a6c19bb4a4d3ceb35ae85999e9ec77cf50eeead754607bc657d47478b32\", [:mix], [{:plug, \"~> 1.6\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"403590330db12255755e0ce6397aaf05b000f255cfe5ea8edf70dc9d4413b99c\"},\n  \"polymorphic_embed\": {:hex, :polymorphic_embed, \"1.7.2\", \"1b76c9a88b2d542a4f35a4665e5e123aa9339fb2885b7ef33d7c1126c38e8764\", [:mix], [{:ecto, \"~> 3.6\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.2\", [hex: :jason, repo: \"hexpm\", optional: false]}, {:phoenix_html, \"~> 2.14 or ~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: true]}], \"hexpm\", \"a495da6b55ea8dc86b069e96b640835cf243fe42d38687d317a7334b993a02f5\"},\n  \"postgrex\": {:hex, :postgrex, \"0.15.11\", \"50abbb50f33d22d79af402e549b9a566ba4f0451b4f5fd39b72d9bbd49743d24\", [:mix], [{:connection, \"~> 1.0\", [hex: :connection, repo: \"hexpm\", optional: false]}, {:db_connection, \"~> 2.1\", [hex: :db_connection, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.5 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"6f0e5c3ea10f97468f5ff852277cb207f068399eb68b0c06c142ef68a4e82952\"},\n  \"protobuf\": {:hex, :protobuf, \"0.7.1\", \"7d1b9f7d9ecb32eccd96b0c58572de4d1c09e9e3bc414e4cb15c2dce7013f195\", [:mix], [], \"hexpm\", \"6eff7a5287963719521c82e5d5b4583fd1d7cdd89ad129f0ea7d503a50a4d13f\"},\n  \"ranch\": {:hex, :ranch, \"1.7.1\", \"6b1fab51b49196860b733a49c07604465a47bdb78aa10c1c16a3d199f7f8c881\", [:rebar3], [], \"hexpm\", \"451d8527787df716d99dc36162fca05934915db0b6141bbdac2ea8d3c7afc7d7\"},\n  \"ratio\": {:hex, :ratio, \"2.4.2\", \"c8518f3536d49b1b00d88dd20d49f8b11abb7819638093314a6348139f14f9f9\", [:mix], [{:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}, {:numbers, \"~> 5.2.0\", [hex: :numbers, repo: \"hexpm\", optional: false]}], \"hexpm\", \"441ef6f73172a3503de65ccf1769030997b0d533b1039422f1e5e0e0b4cbf89e\"},\n  \"remote_ip\": {:hex, :remote_ip, \"1.0.0\", \"3d7fb45204a5704443f480cee9515e464997f52c35e0a60b6ece1f81484067ae\", [:mix], [{:combine, \"~> 0.10\", [hex: :combine, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.10\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"9e9fcad4e50c43b5234bb6a9629ed6ab223f3ed07147bd35470e4ee5c8caf907\"},\n  \"sedex\": {:hex, :sedex, \"1.0.3\", \"c310bfe065a141b25b47ee1872acc94b79d3223dcd06dd2f714fb6064424482e\", [:mix], [{:erlsom, \"~> 1.5\", [hex: :erlsom, repo: \"hexpm\", optional: false]}, {:ex_aws, \"~> 2.1\", [hex: :ex_aws, repo: \"hexpm\", optional: false]}, {:ex_aws_s3, \"~> 2.0\", [hex: :ex_aws_s3, repo: \"hexpm\", optional: false]}, {:jose, \"~> 1.11\", [hex: :jose, repo: \"hexpm\", optional: false]}, {:sweet_xml, \"~> 0.6\", [hex: :sweet_xml, repo: \"hexpm\", optional: false]}], \"hexpm\", \"45e9a4fc942f055a6cf8684032e96324d0b45aabab7b4c12371adfdfb5eb54f2\"},\n  \"sentry\": {:hex, :sentry, \"8.0.5\", \"5ca922b9238a50c7258b52f47364b2d545beda5e436c7a43965b34577f1ef61f\", [:mix], [{:hackney, \"~> 1.8\", [hex: :hackney, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.1\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:plug, \"~> 1.6\", [hex: :plug, repo: \"hexpm\", optional: true]}, {:plug_cowboy, \"~> 2.3\", [hex: :plug_cowboy, repo: \"hexpm\", optional: true]}], \"hexpm\", \"4972839fdbf52e886d7b3e694c8adf421f764f2fa79036b88fb4742049bd4b7c\"},\n  \"shards\": {:hex, :shards, \"1.0.1\", \"1bdbbf047db27f3c3eb800a829d4a47062c84d5543cbfebcfc4c14d038bf9220\", [:make, :rebar3], [], \"hexpm\", \"2c57788afbf053c4024366772892beee89b8b72e884e764fb0a075dfa7442041\"},\n  \"ssl_verify_fun\": {:hex, :ssl_verify_fun, \"1.1.6\", \"cf344f5692c82d2cd7554f5ec8fd961548d4fd09e7d22f5b62482e5aeaebd4b0\", [:make, :mix, :rebar3], [], \"hexpm\", \"bdb0d2471f453c88ff3908e7686f86f9be327d065cc1ec16fa4540197ea04680\"},\n  \"surface\": {:hex, :surface, \"0.5.1\", \"2aa593d8ba5dde584e288f697ec8318352f2ff2037ad6d195788c702f104bff2\", [:mix], [{:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}, {:phoenix_live_view, \"~> 0.15\", [hex: :phoenix_live_view, repo: \"hexpm\", optional: false]}], \"hexpm\", \"a853bfe3479e1f711c84d69d988f85612bd2847dc18ada80be951af40dbe136c\"},\n  \"surface_formatter\": {:hex, :surface_formatter, \"0.5.4\", \"ce3332e2516615795d10bcf8fb10c765128ff9ccb0fa0e21aa4f384a58498d52\", [:mix], [{:surface, \"~> 0.5.0\", [hex: :surface, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ea1a5666e4abf1a6c61048fb9a64040ce59865cf33002ca08d2011b6d700feb4\"},\n  \"sweet_xml\": {:hex, :sweet_xml, \"0.6.6\", \"fc3e91ec5dd7c787b6195757fbcf0abc670cee1e4172687b45183032221b66b8\", [:mix], [], \"hexpm\", \"2e1ec458f892ffa81f9f8386e3f35a1af6db7a7a37748a64478f13163a1f3573\"},\n  \"table_rex\": {:hex, :table_rex, \"3.1.1\", \"0c67164d1714b5e806d5067c1e96ff098ba7ae79413cc075973e17c38a587caa\", [:mix], [], \"hexpm\", \"678a23aba4d670419c23c17790f9dcd635a4a89022040df7d5d772cb21012490\"},\n  \"telemetry\": {:hex, :telemetry, \"0.4.3\", \"a06428a514bdbc63293cd9a6263aad00ddeb66f608163bdec7c8995784080818\", [:rebar3], [], \"hexpm\", \"eb72b8365ffda5bed68a620d1da88525e326cb82a75ee61354fc24b844768041\"},\n  \"telemetry_metrics\": {:hex, :telemetry_metrics, \"0.6.1\", \"315d9163a1d4660aedc3fee73f33f1d355dcc76c5c3ab3d59e76e3edf80eef1f\", [:mix], [{:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"7be9e0871c41732c233be71e4be11b96e56177bf15dde64a8ac9ce72ac9834c6\"},\n  \"telemetry_metrics_prometheus\": {:hex, :telemetry_metrics_prometheus, \"1.1.0\", \"1cc23e932c1ef9aa3b91db257ead31ea58d53229d407e059b29bb962c1505a13\", [:mix], [{:plug_cowboy, \"~> 2.1\", [hex: :plug_cowboy, repo: \"hexpm\", optional: false]}, {:telemetry_metrics_prometheus_core, \"~> 1.0\", [hex: :telemetry_metrics_prometheus_core, repo: \"hexpm\", optional: false]}], \"hexpm\", \"d43b3659b3244da44fe0275b717701542365d4519b79d9ce895b9719c1ce4d26\"},\n  \"telemetry_metrics_prometheus_core\": {:hex, :telemetry_metrics_prometheus_core, \"1.0.1\", \"cebf3c8892f5dc40eb057375e5c1c2077c155ed46654d5af35a2ad48a3f48749\", [:mix], [{:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: false]}, {:telemetry_metrics, \"~> 0.6\", [hex: :telemetry_metrics, repo: \"hexpm\", optional: false]}], \"hexpm\", \"112a9d5a6facf34fb0dda8426c18432ffb9e8abe38f394f3417cb589ecaeb674\"},\n  \"telemetry_poller\": {:hex, :telemetry_poller, \"0.5.1\", \"21071cc2e536810bac5628b935521ff3e28f0303e770951158c73eaaa01e962a\", [:rebar3], [{:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"4cab72069210bc6e7a080cec9afffad1b33370149ed5d379b81c7c5f0c663fd4\"},\n  \"tesla\": {:hex, :tesla, \"1.4.3\", \"f5a494e08fb1abe4fd9c28abb17f3d9b62b8f6fc492860baa91efb1aab61c8a0\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: true]}, {:exjsx, \">= 3.0.0\", [hex: :exjsx, repo: \"hexpm\", optional: true]}, {:finch, \"~> 0.3\", [hex: :finch, repo: \"hexpm\", optional: true]}, {:fuse, \"~> 2.4\", [hex: :fuse, repo: \"hexpm\", optional: true]}, {:gun, \"~> 1.3\", [hex: :gun, repo: \"hexpm\", optional: true]}, {:hackney, \"~> 1.6\", [hex: :hackney, repo: \"hexpm\", optional: true]}, {:ibrowse, \"4.4.0\", [hex: :ibrowse, repo: \"hexpm\", optional: true]}, {:jason, \">= 1.0.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:mime, \"~> 1.0\", [hex: :mime, repo: \"hexpm\", optional: false]}, {:mint, \"~> 1.0\", [hex: :mint, repo: \"hexpm\", optional: true]}, {:poison, \">= 1.0.0\", [hex: :poison, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: true]}], \"hexpm\", \"e0755bb664bf4d664af72931f320c97adbf89da4586670f4864bf259b5750386\"},\n  \"tzdata\": {:hex, :tzdata, \"1.1.0\", \"72f5babaa9390d0f131465c8702fa76da0919e37ba32baa90d93c583301a8359\", [:mix], [{:hackney, \"~> 1.17\", [hex: :hackney, repo: \"hexpm\", optional: false]}], \"hexpm\", \"18f453739b48d3dc5bcf0e8906d2dc112bb40baafe2c707596d89f3c8dd14034\"},\n  \"unicode_util_compat\": {:hex, :unicode_util_compat, \"0.7.0\", \"bc84380c9ab48177092f43ac89e4dfa2c6d62b40b8bd132b1059ecc7232f9a78\", [:rebar3], [], \"hexpm\", \"25eee6d67df61960cf6a794239566599b09e17e668d3700247bc498638152521\"},\n  \"uri_template\": {:hex, :uri_template, \"1.2.1\", \"cc36ef5d18a3a5a23ce35a450ab5b139d5e49ce132b08b7f8797c17efc69d594\", [:mix], [], \"hexpm\", \"fe9a2dfeb4fd289b376df2b84dc2dc2d3244364f0ecf0c21e9832fbb756d524d\"},\n  \"websms\": {:hex, :websms, \"1.0.0-alpha.1\", \"b92d86cc86fbbb379585e910402ff032d22cc5bf3025a4d2513dccc483f98a42\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: false]}, {:mint, \"~> 1.0\", [hex: :mint, repo: \"hexpm\", optional: false]}, {:openapi_compiler, \"~> 1.0-beta\", [hex: :openapi_compiler, repo: \"hexpm\", optional: false]}], \"hexpm\", \"19c71783208febfed3f37b050b45b7b4be680b0dc5f3c2bfeedf9dd1db10c997\"},\n  \"xlsxir\": {:hex, :xlsxir, \"1.6.4\", \"d1e69439cbd9edc1190950f9f883ac364e1f31641e0395ccdb27761791b169a3\", [:mix], [{:erlsom, \"~> 1.5\", [hex: :erlsom, repo: \"hexpm\", optional: false]}], \"hexpm\", \"38e91f65eb8a4c8dea07d941c8b7e21baf8c8d4938232395c9ffd19d2eb071f2\"},\n  \"yamerl\": {:hex, :yamerl, \"0.8.1\", \"07da13ffa1d8e13948943789665c62ccd679dfa7b324a4a2ed3149df17f453a4\", [:rebar3], [], \"hexpm\", \"96cb30f9d64344fed0ef8a92e9f16f207de6c04dfff4f366752ca79f5bceb23f\"},\n  \"zitadel_api\": {:hex, :zitadel_api, \"1.0.0-rc.7\", \"88cf9990eeb2c096957d5cf9a2eac7bd840ced097c79fa2b659cd42c1dcac620\", [:mix], [{:google_protos, \"~> 0.1.0\", [hex: :google_protos, repo: \"hexpm\", optional: false]}, {:grpc, \"~> 0.5.0-beta.1\", [hex: :grpc, repo: \"hexpm\", optional: false]}], \"hexpm\", \"131ebdcf1c736ad4ad2ee1e45ff3beab8dda9f1331904d7d7b2e1fc14f61aff6\"},\n}\n"], "fixing_code": ["defmodule Hygeia.CaseContext do\n  @moduledoc \"\"\"\n  The CaseContext context.\n  \"\"\"\n\n  use Hygeia, :context\n\n  alias Hygeia.CaseContext.Case\n  alias Hygeia.CaseContext.ExternalReference\n  alias Hygeia.CaseContext.Hospitalization\n  alias Hygeia.CaseContext.Note\n  alias Hygeia.CaseContext.Person\n  alias Hygeia.CaseContext.Person.ContactMethod\n  alias Hygeia.CaseContext.PossibleIndexSubmission\n  alias Hygeia.CaseContext.PrematureRelease\n  alias Hygeia.CaseContext.Test\n  alias Hygeia.CaseContext.Transmission\n  alias Hygeia.CommunicationContext.Email\n  alias Hygeia.CommunicationContext.SMS\n  alias Hygeia.EctoType.Country\n  alias Hygeia.TenantContext.Tenant\n\n  @origin_country Application.compile_env!(:hygeia, [:phone_number_parsing_origin_country])\n\n  @doc \"\"\"\n  Returns the list of people.\n\n  ## Examples\n\n      iex> list_people()\n      [%Person{}, ...]\n\n  \"\"\"\n  @spec list_people(limit :: pos_integer()) :: [Person.t()]\n  def list_people(limit \\\\ 20), do: Repo.all(from(person in Person, limit: ^limit))\n\n  @spec list_people_by_ids(ids :: [String.t()]) :: [Person.t()]\n  def list_people_by_ids(ids), do: Repo.all(from(person in Person, where: person.uuid in ^ids))\n\n  @spec list_people_query :: Ecto.Queryable.t()\n  def list_people_query, do: Person\n\n  @spec find_duplicates(\n          search :: [\n            %{\n              uuid: Ecto.UUID.t(),\n              first_name: String.t() | nil,\n              last_name: String.t(),\n              mobile: String.t() | nil,\n              email: String.t() | nil\n            }\n          ]\n        ) :: %{required(uuid :: Ecto.UUID.t()) => [person_id :: Ecto.UUID.t()]}\n  def find_duplicates([]), do: %{}\n\n  def find_duplicates(search) when is_list(search) do\n    \"search\"\n    |> with_cte(\"search\",\n      as:\n        fragment(\n          \"\"\"\n          SELECT search->>'uuid' AS uuid, duplicate.uuid AS person_uuid\n          FROM JSONB_ARRAY_ELEMENTS(?::jsonb) AS search\n          LEFT JOIN people AS duplicate ON\n              (\n                  duplicate.first_name % (search->>'first_name')::text AND\n                  duplicate.last_name % (search->>'last_name')::text\n              ) OR\n              JSONB_BUILD_OBJECT('type', 'mobile', 'value', search->>'mobile') <@ ANY (duplicate.contact_methods) OR\n              JSONB_BUILD_OBJECT('type', 'landline', 'value', search->>'landline') <@ ANY (duplicate.contact_methods) OR\n              JSONB_BUILD_OBJECT('type', 'email', 'value', search->>'email') <@ ANY (duplicate.contact_methods)\n          GROUP BY search->>'uuid', duplicate.uuid\n          \"\"\",\n          ^search\n        )\n    )\n    |> select([s], {type(s.uuid, Ecto.UUID), type(s.person_uuid, Ecto.UUID)})\n    |> Repo.all()\n    |> Enum.group_by(&elem(&1, 0), &elem(&1, 1))\n    |> Map.new(fn {key, duplicates} ->\n      {key, Enum.reject(duplicates, &is_nil/1)}\n    end)\n  end\n\n  @spec list_people_by_contact_method(type :: ContactMethod.Type.t(), value :: String.t()) :: [\n          Person.t()\n        ]\n\n  def list_people_by_contact_method(type, value) when type in [:mobile, :landline] do\n    with {:ok, parsed_number} <-\n           ExPhoneNumber.parse(value, @origin_country),\n         true <- ExPhoneNumber.is_valid_number?(parsed_number) do\n      _list_people_by_contact_method(\n        type,\n        ExPhoneNumber.Formatting.format(parsed_number, :international)\n      )\n    else\n      false -> []\n      {:error, _reason} -> []\n    end\n  end\n\n  def list_people_by_contact_method(type, value), do: _list_people_by_contact_method(type, value)\n\n  defp _list_people_by_contact_method(type, value),\n    do:\n      Repo.all(\n        from(person in Person,\n          where:\n            fragment(\n              ~S[?::jsonb <@ ANY (?)],\n              ^%{type: type, value: value},\n              person.contact_methods\n            )\n        )\n      )\n\n  @spec list_people_by_external_reference(type :: ExternalReference.Type.t(), value: String.t()) ::\n          [\n            Case.t()\n          ]\n  def list_people_by_external_reference(type, value),\n    do:\n      Repo.all(\n        from(person in Person,\n          where:\n            fragment(\n              ~S[?::jsonb <@ ANY (?)],\n              ^%{type: type, value: value},\n              person.external_references\n            )\n        )\n      )\n\n  @spec list_cases_by_external_reference(type :: ExternalReference.Type.t(), value: String.t()) ::\n          [\n            Case.t()\n          ]\n  def list_cases_by_external_reference(type, value),\n    do:\n      Repo.all(\n        from(case in Case,\n          where:\n            fragment(\n              ~S[?::jsonb <@ ANY (?)],\n              ^%{type: type, value: value},\n              case.external_references\n            )\n        )\n      )\n\n  @spec list_people_by_name(first_name :: String.t(), last_name :: String.t()) :: [Person.t()]\n  def list_people_by_name(first_name, last_name),\n    do:\n      Repo.all(\n        from(person in Person,\n          where:\n            fragment(\"(? % ?)\", person.first_name, ^first_name) and\n              fragment(\"(? % ?)\", person.last_name, ^last_name),\n          order_by: [\n            asc:\n              fragment(\"(? <-> ?)\", person.first_name, ^first_name) +\n                fragment(\"(? <-> ?)\", person.last_name, ^last_name)\n          ]\n        )\n      )\n\n  @spec fulltext_person_search(query :: String.t(), limit :: pos_integer()) :: [Person.t()]\n  def fulltext_person_search(query, limit \\\\ 10),\n    do: Repo.all(fulltext_person_search_query(query, limit))\n\n  @spec fulltext_person_search_query(query :: String.t(), limit :: pos_integer()) ::\n          Ecto.Query.t()\n  def fulltext_person_search_query(query, limit \\\\ 10),\n    do:\n      from(person in Person,\n        where: fragment(\"?.fulltext @@ WEBSEARCH_TO_TSQUERY('german', ?)\", person, ^query),\n        order_by: [\n          desc:\n            fragment(\n              \"TS_RANK_CD(?.fulltext, WEBSEARCH_TO_TSQUERY('german', ?))\",\n              person,\n              ^query\n            )\n        ],\n        limit: ^limit\n      )\n\n  @doc \"\"\"\n  Gets a single person.\n\n  Raises `Ecto.NoResultsError` if the Person does not exist.\n\n  ## Examples\n\n      iex> get_person!(123)\n      %Person{}\n\n      iex> get_person!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_person!(id :: Ecto.UUID.t()) :: Person.t()\n  def get_person!(id), do: Repo.get!(Person, id)\n\n  @doc \"\"\"\n  Creates a person.\n\n  ## Examples\n\n      iex> create_person(%{field: value})\n      {:ok, %Person{}}\n\n      iex> create_person(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_person(tenant :: Tenant.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def create_person(%Tenant{} = tenant, attrs),\n    do:\n      tenant\n      |> change_new_person(attrs)\n      |> create_person()\n\n  @spec create_person(changeset :: Ecto.Changeset.t(Person.t())) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def create_person(%Ecto.Changeset{data: %Person{}} = changeset),\n    do:\n      changeset\n      |> Person.changeset(%{})\n      |> versioning_insert()\n      |> broadcast(\"people\", :create)\n      |> versioning_extract()\n\n  @spec person_has_mobile_number?(person :: Person.t()) :: boolean\n  def person_has_mobile_number?(%Person{contact_methods: contact_methods} = _person),\n    do: Enum.any?(contact_methods, &match?(%ContactMethod{type: :mobile}, &1))\n\n  @spec person_has_email?(person :: Person.t()) :: boolean\n  def person_has_email?(%Person{contact_methods: contact_methods} = _person),\n    do: Enum.any?(contact_methods, &match?(%ContactMethod{type: :email}, &1))\n\n  @doc \"\"\"\n  Updates a person.\n\n  ## Examples\n\n      iex> update_person(person, %{field: new_value})\n      {:ok, %Person{}}\n\n      iex> update_person(person, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_person(\n          person :: Person.t() | Ecto.Changeset.t(Person.t()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          opts :: Person.changeset_options()\n        ) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def update_person(person, attrs \\\\ %{}, changeset_opts \\\\ %{})\n\n  def update_person(%Person{} = person, attrs, changeset_opts),\n    do:\n      person\n      |> change_person(attrs, changeset_opts)\n      |> update_person(%{}, changeset_opts)\n\n  def update_person(%Ecto.Changeset{data: %Person{}} = changeset, attrs, changeset_opts),\n    do:\n      changeset\n      |> change_person(attrs, changeset_opts)\n      |> versioning_update()\n      |> broadcast(\"people\", :update)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a person.\n\n  ## Examples\n\n      iex> delete_person(person)\n      {:ok, %Person{}}\n\n      iex> delete_person(person)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_person(person :: Person.t()) ::\n          {:ok, Person.t()} | {:error, Ecto.Changeset.t(Person.t())}\n  def delete_person(%Person{} = person),\n    do:\n      person\n      |> change_person()\n      |> versioning_delete()\n      |> broadcast(\"people\", :delete)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking person changes.\n\n  ## Examples\n\n      iex> change_person(person)\n      %Ecto.Changeset{data: %Person{}}\n\n  \"\"\"\n  @spec change_person(\n          person :: Person.t() | Person.empty() | Changeset.t(Person.t() | Person.empty()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          opts :: Person.changeset_options()\n        ) ::\n          Ecto.Changeset.t(Person.t())\n  def change_person(person, attrs \\\\ %{}, opts \\\\ %{})\n  def change_person(%Person{} = person, attrs, opts), do: Person.changeset(person, attrs, opts)\n\n  def change_person(%Changeset{data: %Person{}} = person, attrs, opts),\n    do: Person.changeset(person, attrs, opts)\n\n  @spec change_new_person(tenant :: Tenant.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          Ecto.Changeset.t(Person.t())\n  def change_new_person(tenant, attrs \\\\ %{}) do\n    tenant\n    |> Ecto.build_assoc(:people)\n    |> change_person(attrs)\n  end\n\n  @doc \"\"\"\n  Returns the list of cases.\n\n  ## Examples\n\n      iex> list_cases()\n      [%Case{}, ...]\n\n  \"\"\"\n  @spec list_cases(limit :: pos_integer()) :: [Case.t()]\n  def list_cases(limit \\\\ 20), do: Repo.all(from(c in list_cases_query(), limit: ^limit))\n\n  @spec list_cases_query :: Ecto.Queryable.t()\n  def list_cases_query, do: Case\n\n  @spec list_cases_for_automated_closed_email :: [{Case.t(), Case.Phase.t()}]\n  def list_cases_for_automated_closed_email do\n    from(case in Case,\n      join: phase in fragment(\"UNNEST(?)\", case.phases),\n      where:\n        fragment(\"(?->>'quarantine_order')::boolean\", phase) and\n          fragment(\"(?->>'end')::date\", phase) <= fragment(\"CURRENT_DATE\") and\n          fragment(\"(?->'send_automated_close_email')::boolean\", phase) and\n          is_nil(fragment(\"?->>'automated_close_email_sent'\", phase)),\n      select: {case, fragment(\"(?->>'uuid')::uuid\", phase)},\n      lock: \"FOR UPDATE\"\n    )\n    |> Repo.all()\n    |> Enum.map(fn {%Case{phases: phases} = case, phase_binary_uuid} ->\n      phase_uuid = Ecto.UUID.cast!(phase_binary_uuid)\n      {case, Enum.find(phases, &match?(%Case.Phase{uuid: ^phase_uuid}, &1))}\n    end)\n  end\n\n  @spec fulltext_case_search(query :: String.t(), limit :: pos_integer()) :: [Case.t()]\n  def fulltext_case_search(query, limit \\\\ 10),\n    do: Repo.all(fulltext_case_search_query(query, limit))\n\n  @spec fulltext_case_search_query(query :: String.t(), limit :: pos_integer()) :: Ecto.Query.t()\n  def fulltext_case_search_query(query, limit \\\\ 10),\n    do:\n      from(case in Case,\n        join: person in assoc(case, :person),\n        where:\n          fragment(\"?.fulltext @@ WEBSEARCH_TO_TSQUERY('german', ?)\", person, ^query) or\n            fragment(\"?.fulltext @@ WEBSEARCH_TO_TSQUERY('german', ?)\", case, ^query),\n        order_by: [\n          desc:\n            max(\n              fragment(\n                \"TS_RANK_CD((?.fulltext || ?.fulltext), WEBSEARCH_TO_TSQUERY('german', ?))\",\n                case,\n                person,\n                ^query\n              )\n            )\n        ],\n        group_by: case.uuid,\n        limit: ^limit\n      )\n\n  def case_export(teant, type, extended \\\\ false)\n\n  @bag_med_16122020_case_fields [\n    :fall_id_ism,\n    :ktn_internal_id,\n    :last_name,\n    :first_name,\n    :street_name,\n    :street_number,\n    :location,\n    :postal_code,\n    :country,\n    :phone_number,\n    :mobile_number,\n    :e_mail_address,\n    :sex,\n    :date_of_birth,\n    :profession,\n    :work_place_name,\n    :work_place_street,\n    :work_place_street_number,\n    :work_place_location,\n    :work_place_postal_code,\n    :work_place_country,\n    :symptoms_yn,\n    :test_reason_symptoms,\n    :test_reason_outbreak,\n    :test_reason_cohort,\n    :test_reason_work_screening,\n    :test_reason_quarantine,\n    :test_reason_app,\n    :test_reason_convenience,\n    :symptom_onset_dt,\n    :sampling_dt,\n    :lab_report_dt,\n    :test_type,\n    :test_result,\n    :exp_type,\n    :case_link_yn,\n    :case_link_contact_dt,\n    :case_link_fall_id_ism,\n    :case_link_ktn_internal_id,\n    :exp_loc_dt,\n    :exp_loc_type_yn,\n    :activity_mapping_yn,\n    :exp_country,\n    :exp_loc_type_work_place,\n    :exp_loc_type_army,\n    :exp_loc_type_asyl,\n    :exp_loc_type_choir,\n    :exp_loc_type_club,\n    :exp_loc_type_hh,\n    :exp_loc_type_high_school,\n    :exp_loc_type_childcare,\n    :exp_loc_type_erotica,\n    :exp_loc_type_flight,\n    :exp_loc_type_medical,\n    :exp_loc_type_hotel,\n    :exp_loc_type_child_home,\n    :exp_loc_type_cinema,\n    :exp_loc_type_shop,\n    :exp_loc_type_school,\n    :exp_loc_type_less_300,\n    :exp_loc_type_more_300,\n    :exp_loc_type_public_transp,\n    :exp_loc_type_massage,\n    :exp_loc_type_nursing_home,\n    :exp_loc_type_religion,\n    :exp_loc_type_restaurant,\n    :exp_loc_type_school_camp,\n    :exp_loc_type_indoor_sport,\n    :exp_loc_type_outdoor_sport,\n    :exp_loc_type_gathering,\n    :exp_loc_type_zoo,\n    :exp_loc_type_prison,\n    :other_exp_loc_type_yn,\n    :other_exp_loc_type,\n    :exp_loc_type_less_300_detail,\n    :exp_loc_type_more_300_detail,\n    :exp_loc_name,\n    :exp_loc_street,\n    :exp_loc_street_number,\n    :exp_loc_location,\n    :exp_loc_postal_code,\n    :exp_loc_flightdetail,\n    :corr_ct_dt,\n    :quar_yn,\n    :onset_quar_dt,\n    :reason_quar,\n    :other_reason_quar,\n    :onset_iso_dt,\n    :iso_loc_type,\n    :other_iso_loc,\n    :iso_loc_street,\n    :iso_loc_street_number,\n    :iso_loc_location,\n    :iso_loc_postal_code,\n    :iso_loc_country,\n    :follow_up_dt,\n    :end_of_iso_dt,\n    :reason_end_of_iso,\n    :other_reason_end_of_iso,\n    :vacc_yn,\n    :vacc_name,\n    :vacc_dose,\n    :vacc_dt_first,\n    :vacc_dt_last\n  ]\n\n  @bag_med_16122020_case_fields_index @bag_med_16122020_case_fields\n                                      |> Enum.with_index()\n                                      |> Map.new()\n\n  @spec case_export(tenant :: Tenant.t(), format :: :bag_med_16122020_case, extended :: boolean) ::\n          Enumerable.t()\n  # credo:disable-for-next-line Credo.Check.Refactor.ABCSize\n  def case_export(%Tenant{uuid: tenant_uuid} = _teant, :bag_med_16122020_case, _extended) do\n    first_transmission_query =\n      from(transmission in Transmission,\n        select: %{\n          uuid:\n            fragment(\n              \"\"\"\n              FIRST_VALUE(?)\n              OVER(\n                PARTITION BY ?\n                ORDER BY ?\n              )\n              \"\"\",\n              transmission.uuid,\n              transmission.recipient_case_uuid,\n              transmission.inserted_at\n            ),\n          case_uuid: transmission.recipient_case_uuid\n        }\n      )\n\n    cases =\n      from(case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        left_join: case_ism_id in fragment(\"UNNEST(?)\", case.external_references),\n        on: fragment(\"?->>'type'\", case_ism_id) == \"ism_case\",\n        left_join: possible_index_phase in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", possible_index_phase) ==\n            \"possible_index\",\n        left_join: index_phase in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", index_phase) ==\n            \"index\",\n        left_join: possible_index_phase_contact_person in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", possible_index_phase_contact_person) ==\n            \"possible_index\" and\n            fragment(\"?->'details'->>'type'\", possible_index_phase_contact_person) ==\n              \"contact_person\",\n        left_join: possible_index_phase_travel in fragment(\"UNNEST(?)\", case.phases),\n        on:\n          fragment(\"?->'details'->>'__type__'\", possible_index_phase_travel) == \"possible_index\" and\n            fragment(\"?->'details'->>'type'\", possible_index_phase_travel) == \"travel\",\n        join: person in assoc(case, :person),\n        left_join: mobile_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", mobile_contact_method) == \"mobile\",\n        left_join: landline_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", landline_contact_method) == \"landline\",\n        left_join: email_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", email_contact_method) == \"email\",\n        left_join: received_transmission_id in subquery(first_transmission_query),\n        on: received_transmission_id.case_uuid == case.uuid,\n        left_join: received_transmission in assoc(case, :received_transmissions),\n        on: received_transmission.uuid == received_transmission_id.uuid,\n        left_join: received_transmission_case in assoc(received_transmission, :propagator_case),\n        left_join:\n          received_transmission_case_ism_id in fragment(\n            \"UNNEST(?)\",\n            received_transmission_case.external_references\n          ),\n        on: fragment(\"?->>'type'\", received_transmission_case_ism_id) == \"ism_case\",\n        left_join: email in assoc(case, :emails),\n        left_join: sms in assoc(case, :sms),\n        left_join: employer in assoc(person, :employers),\n        left_join: test in assoc(case, :tests),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"index\",\n        group_by: [case.uuid, person.uuid],\n        order_by: [asc: case.inserted_at],\n        select: [\n          # fall_id_ism\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'value'\", case_ism_id)),\n          # ktn_internal_id\n          type(case.uuid, Ecto.UUID),\n          # last_name\n          person.last_name,\n          # first_name\n          person.first_name,\n          # street_name\n          fragment(\"?->>'address'\", person.address),\n          # street_number\n          ^nil,\n          # location\n          fragment(\"?->>'place'\", person.address),\n          # postal_code\n          fragment(\"?->>'zip'\", person.address),\n          # country\n          fragment(\"?->>'country'\", person.address),\n          # phone_number\n          max(fragment(\"?->>'value'\", landline_contact_method)),\n          # mobile_number\n          max(fragment(\"?->>'value'\", mobile_contact_method)),\n          # e_mail_address\n          max(fragment(\"?->>'value'\", email_contact_method)),\n          # sex\n          person.sex,\n          # date_of_birth\n          person.birth_date,\n          # profession\n          person.profession_category_main,\n          # work_place_name\n          fragment(\"(ARRAY_AGG(?))[1]\", employer.name),\n          # work_place_street\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'address'\", employer.address)),\n          # work_place_street_number\n          ^nil,\n          # work_place_location\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'place'\", employer.address)),\n          # work_place_postal_code\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'zip'\", employer.address)),\n          # work_place_country\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'country'\", employer.address)),\n          # symptoms_yn\n          fragment(\"?->'has_symptoms'\", case.clinical),\n          # test_reason_symptoms\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"symptoms\"),\n          # test_reason_outbreak\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"outbreak_examination\"),\n          # test_reason_cohort\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"screening\"),\n          # test_reason_work_screening\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"work_related\"),\n          # test_reason_quarantine\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"quarantine\"),\n          # test_reason_app\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"app_report\"),\n          # test_reason_convenience\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"convenience\"),\n          # symptom_onset_dt\n          fragment(\"(?->>'symptom_start')\", case.clinical),\n          # sampling_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", test.tested_at),\n          # lab_report_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", test.laboratory_reported_at),\n          # test_type\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.kind), Test.Kind),\n          # test_result\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.result), Test.Result),\n          # exp_type\n          type(\n            fragment(\n              \"\"\"\n              CASE\n                WHEN ? THEN ?\n                WHEN ? THEN ?\n              END\n              \"\"\",\n              count(fragment(\"?->>'uuid'\", possible_index_phase_contact_person), :distinct) > 0,\n              \"contact_person\",\n              count(fragment(\"?->>'uuid'\", possible_index_phase_travel), :distinct) > 0,\n              \"travel\"\n            ),\n            Case.Phase.PossibleIndex.Type\n          ),\n          # case_link_yn\n          count(received_transmission.uuid) > 0,\n          # case_link_contact_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # case_link_fall_id_ism\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\n              \"\"\"\n              CASE\n                WHEN ? THEN ?\n                WHEN ? THEN ?\n              END\n              \"\"\",\n              not received_transmission.propagator_internal,\n              received_transmission.propagator_ism_id,\n              received_transmission.propagator_internal,\n              fragment(\"?->>'value'\", received_transmission_case_ism_id)\n            )\n          ),\n          # case_link_ktn_internal_id\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.propagator_case_uuid),\n            Ecto.UUID\n          ),\n          # exp_loc_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # exp_loc_type_yn\n          fragment(\"(ARRAY_AGG(?->'known'))[1]\", received_transmission.infection_place),\n          # activity_mapping_yn\n          fragment(\n            \"\"\"\n            CASE\n              WHEN ? THEN ?\n              WHEN ? THEN ?\n              WHEN ? THEN ?\n              ELSE ?\n            END\n            \"\"\",\n            case.status == :canceled,\n            false,\n            case.status == :first_contact,\n            nil,\n            case.status == :first_contact_unreachable,\n            false,\n            true\n          ),\n          # exp_country\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'address'->'country'\", received_transmission.infection_place)\n          ),\n          # exp_loc_type_work_place\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"work_place\"\n          ),\n          # exp_loc_type_army\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"army\"\n          ),\n          # exp_loc_type_asyl\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"asyl\"\n          ),\n          # exp_loc_type_choir\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"choir\"\n          ),\n          # exp_loc_type_club\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"club\"\n          ),\n          # exp_loc_type_hh\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hh\"\n          ),\n          # exp_loc_type_high_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"high_school\"\n          ),\n          # exp_loc_type_childcare\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"childcare\"\n          ),\n          # exp_loc_type_erotica\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"erotica\"\n          ),\n          # exp_loc_type_flight\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"flight\"\n          ),\n          # exp_loc_type_medical\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"medical\"\n          ),\n          # exp_loc_type_hotel\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hotel\"\n          ),\n          # exp_loc_type_child_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"child_home\"\n          ),\n          # exp_loc_type_cinema\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"cinema\"\n          ),\n          # exp_loc_type_shop\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"shop\"\n          ),\n          # exp_loc_type_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school\"\n          ),\n          # exp_loc_type_less_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"less_300\"\n          ),\n          # exp_loc_type_more_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"more_300\"\n          ),\n          # exp_loc_type_public_transp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"public_transp\"\n          ),\n          # exp_loc_type_massage\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"massage\"\n          ),\n          # exp_loc_type_nursing_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"nursing_home\"\n          ),\n          # exp_loc_type_religion\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"religion\"\n          ),\n          # exp_loc_type_restaurant\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"restaurant\"\n          ),\n          # exp_loc_type_school_camp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school_camp\"\n          ),\n          # exp_loc_type_indoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"indoor_sport\"\n          ),\n          # exp_loc_type_outdoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"outdoor_sport\"\n          ),\n          # exp_loc_type_gathering\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"gathering\"\n          ),\n          # exp_loc_type_zoo\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"zoo\"\n          ),\n          # exp_loc_type_prison\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"prison\"\n          ),\n          # other_exp_loc_type_yn\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"other\"\n          ),\n          # other_exp_loc_type\n          fragment(\"(ARRAY_AGG(?->'type_other'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_less_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_more_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_name\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_street\n          fragment(\n            \"(ARRAY_AGG(?->'address'->'address'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_street_number\n          ^nil,\n          # exp_loc_location\n          fragment(\n            \"(ARRAY_AGG(?->'address'->>'place'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_postal_code\n          fragment(\"(ARRAY_AGG(?->'address'->>'zip'))[1]\", received_transmission.infection_place),\n          # exp_loc_flightdetail\n          fragment(\n            \"(ARRAY_AGG(?->>'flight_information'))[1]\",\n            received_transmission.infection_place\n          ),\n          # corr_ct_dt\n          fragment(\"?->>'first_contact'\", case.monitoring),\n          # quar_yn\n          sum(\n            fragment(\n              \"CASE WHEN (?->>'quarantine_order')::boolean THEN 1 ELSE 0 END\",\n              possible_index_phase\n            )\n          ) > 0,\n          # onset_quar_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'start'\", possible_index_phase)),\n          # reason_quar\n          type(\n            fragment(\n              \"(ARRAY_AGG(?))[1]\",\n              fragment(\"?->'details'->>'type'\", possible_index_phase)\n            ),\n            Case.Phase.PossibleIndex.Type\n          ),\n          # other_reason_quar\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'details'->>'type_other'\", possible_index_phase)\n          ),\n          # onset_iso_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'start'\", index_phase)),\n          # iso_loc_type\n          type(\n            fragment(\"(?->>'location')\", case.monitoring),\n            Case.Monitoring.IsolationLocation\n          ),\n          # other_iso_loc\n          fragment(\"?->>'location_details'\", case.monitoring),\n          # iso_loc_street\n          fragment(\"?->'address'->>'address'\", case.monitoring),\n          # iso_loc_street_number\n          ^nil,\n          # iso_loc_location\n          fragment(\"?->'address'->>'place'\", case.monitoring),\n          # iso_loc_postal_code\n          fragment(\"?->'address'->>'zip'\", case.monitoring),\n          # iso_loc_country\n          fragment(\"?->'address'->>'country'\", case.monitoring),\n          # follow_up_dt\n          fragment(\n            \"GREATEST(?, ?)\",\n            fragment(\"(?)::date\", max(sms.inserted_at)),\n            fragment(\"(?)::date\", max(email.inserted_at))\n          ),\n          # end_of_iso_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'end'\", index_phase)),\n          # reason_end_of_iso\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->'detail'->>'end_reason'\", index_phase)),\n          # other_reason_end_of_iso\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'detail'->>'other_end_reason'\", index_phase)\n          ),\n          # vacc_yn\n          fragment(\"(?->>'done')::boolean\", person.vaccination),\n          # vacc_name\n          fragment(\"?->>'name'\", person.vaccination),\n          # vacc_dose\n          fragment(\n            \"CASE WHEN ? THEN ? ELSE ? END\",\n            is_nil(fragment(\"?->>'jab_dates'\", person.vaccination)),\n            nil,\n            fragment(\"JSONB_ARRAY_LENGTH(?)\", fragment(\"?->'jab_dates'\", person.vaccination))\n          ),\n          # vacc_dt_first\n          fragment(\"(?->'jab_dates'->>0)\", person.vaccination),\n          # vacc_dt_last\n          fragment(\"(?->'jab_dates'->>-1)\", person.vaccination)\n        ]\n      )\n      |> Repo.stream()\n      |> Stream.map(fn entry ->\n        entry\n        |> normalize_ism_id(@bag_med_16122020_case_fields_index.fall_id_ism)\n        |> normalize_ism_id(@bag_med_16122020_case_fields_index.case_link_fall_id_ism)\n        |> List.update_at(@bag_med_16122020_case_fields_index.phone_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.mobile_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.sex, fn\n          nil -> nil\n          :male -> 1\n          :female -> 2\n          :other -> 3\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.iso_loc_type, fn\n          nil -> 6\n          :home -> 1\n          :social_medical_facility -> 2\n          :hospital -> 3\n          :hotel -> 4\n          :asylum_center -> 5\n          :other -> 7\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.exp_type, fn\n          nil -> nil\n          :contact_person -> 1\n          :travel -> 2\n        end)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_symptoms)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_outbreak)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_cohort)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_work_screening)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_quarantine)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_app)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.test_reason_convenience)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_work_place)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_army)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_asyl)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_choir)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_club)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_hh)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_high_school)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_childcare)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_erotica)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_flight)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_medical)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_hotel)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_child_home)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_cinema)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_shop)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_school)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_less_300)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_more_300)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_public_transp)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_massage)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_nursing_home)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_religion)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_restaurant)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_school_camp)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_indoor_sport)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_outdoor_sport)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_gathering)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_zoo)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_prison)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.other_exp_loc_type_yn)\n        |> normalize_boolean_and_unknown_field(\n          @bag_med_16122020_case_fields_index.activity_mapping_yn\n        )\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.symptoms_yn)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.case_link_yn)\n        |> List.update_at(@bag_med_16122020_case_fields_index.test_type, fn\n          nil -> 5\n          :pcr -> 1\n          :serology -> 5\n          :quick -> 2\n          :antigen_quick -> 3\n          :antigen -> 4\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.test_result, fn\n          :positive -> 1\n          :negative -> 2\n          :inconclusive -> 3\n          nil -> 3\n        end)\n        |> List.update_at(@bag_med_16122020_case_fields_index.reason_end_of_iso, fn\n          # :other -> 4\n          nil -> nil\n          :healed -> 1\n          :death -> 2\n          :no_follow_up -> 3\n        end)\n        |> normalize_boolean_and_unknown_field(@bag_med_16122020_case_fields_index.vacc_yn)\n        |> normalize_boolean_field(@bag_med_16122020_case_fields_index.exp_loc_type_yn)\n        |> normalize_boolean_and_unknown_field(@bag_med_16122020_case_fields_index.quar_yn)\n        |> normalize_country(@bag_med_16122020_case_fields_index.country)\n        |> normalize_country(@bag_med_16122020_case_fields_index.work_place_country)\n        |> normalize_country(@bag_med_16122020_case_fields_index.exp_country)\n        |> normalize_country(@bag_med_16122020_case_fields_index.iso_loc_country)\n        |> List.update_at(@bag_med_16122020_case_fields_index.reason_quar, fn\n          nil -> nil\n          :contact_person -> 1\n          :travel -> 2\n          :outbreak -> 3\n          :covid_app -> 4\n          :other -> 5\n        end)\n      end)\n\n    [@bag_med_16122020_case_fields]\n    |> Stream.concat(cases)\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @bag_med_16122020_contact_fields [\n    :ktn_internal_id,\n    :last_name,\n    :first_name,\n    :street_name,\n    :street_number,\n    :location,\n    :postal_code,\n    :country,\n    :phone_number,\n    :mobile_number,\n    :sex,\n    :date_of_birth,\n    :profession,\n    :work_place_name,\n    :work_place_postal_code,\n    :work_place_country,\n    :quar_loc_type,\n    :other_quar_loc_type,\n    :exp_type,\n    :case_link_fall_id_ism,\n    :case_link_ktn_internal_id,\n    :case_link_contact_dt,\n    :hygeia_case_link_region_subdivision,\n    :exp_loc_dt,\n    :exp_country,\n    :exp_loc_type_work_place,\n    :exp_loc_type_army,\n    :exp_loc_type_asyl,\n    :exp_loc_type_choir,\n    :exp_loc_type_club,\n    :exp_loc_type_hh,\n    :exp_loc_type_high_school,\n    :exp_loc_type_childcare,\n    :exp_loc_type_erotica,\n    :exp_loc_type_flight,\n    :exp_loc_type_medical,\n    :exp_loc_type_hotel,\n    :exp_loc_type_child_home,\n    :exp_loc_type_cinema,\n    :exp_loc_type_shop,\n    :exp_loc_type_school,\n    :exp_loc_type_less_300,\n    :exp_loc_type_more_300,\n    :exp_loc_type_public_transp,\n    :exp_loc_type_massage,\n    :exp_loc_type_nursing_home,\n    :exp_loc_type_religion,\n    :exp_loc_type_restaurant,\n    :exp_loc_type_school_camp,\n    :exp_loc_type_indoor_sport,\n    :exp_loc_type_outdoor_sport,\n    :exp_loc_type_gathering,\n    :exp_loc_type_zoo,\n    :exp_loc_type_prison,\n    :other_exp_loc_type_yn,\n    :other_exp_loc_type,\n    :exp_loc_type_less_300_detail,\n    :exp_loc_type_more_300_detail,\n    :exp_loc_name,\n    :exp_loc_street,\n    :exp_loc_street_number,\n    :exp_loc_location,\n    :exp_loc_postal_code,\n    :exp_loc_flightdetail,\n    :test_reason_symptoms,\n    :test_reason_quarantine,\n    :test_reason_quarantine_end,\n    :other_test_reason,\n    :symptom_onset_dt,\n    :test_type,\n    :sampling_dt,\n    :test_result,\n    :onset_quar_dt,\n    :end_quar_dt,\n    :reason_end_quar,\n    :other_reason_end_quar,\n    :vacc_yn,\n    :vacc_name,\n    :vacc_dose,\n    :vacc_dt_first,\n    :vacc_dt_last\n  ]\n\n  @extended_fields [:hygeia_case_link_region_subdivision]\n                   |> Enum.map(fn field ->\n                     Enum.find_index(@bag_med_16122020_contact_fields, &(field == &1))\n                   end)\n                   |> Enum.sort(:desc)\n\n  @bag_med_16122020_contact_fields_index @bag_med_16122020_contact_fields\n                                         |> Enum.with_index()\n                                         |> Map.new()\n\n  @spec case_export(\n          tenant :: Tenant.t(),\n          format :: :bag_med_16122020_contact,\n          extended :: boolean\n        ) :: Enumerable.t()\n  # credo:disable-for-lines:2 Credo.Check.Refactor.ABCSize\n  # credo:disable-for-next-line Credo.Check.Refactor.CyclomaticComplexity\n  def case_export(%Tenant{uuid: tenant_uuid} = _teant, :bag_med_16122020_contact, extended) do\n    first_transmission_query =\n      from(transmission in Transmission,\n        select: %{\n          uuid:\n            fragment(\n              \"\"\"\n              FIRST_VALUE(?)\n              OVER(\n                PARTITION BY ?\n                ORDER BY ?\n              )\n              \"\"\",\n              transmission.uuid,\n              transmission.recipient_case_uuid,\n              transmission.inserted_at\n            ),\n          case_uuid: transmission.recipient_case_uuid\n        }\n      )\n\n    cases =\n      from(case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        left_join: phase_index in fragment(\"UNNEST(?)\", case.phases),\n        on: fragment(\"?->'details'->>'__type__'\", phase_index) == \"index\",\n        join: person in assoc(case, :person),\n        left_join: mobile_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", mobile_contact_method) == \"mobile\",\n        left_join: landline_contact_method in fragment(\"UNNEST(?)\", person.contact_methods),\n        on: fragment(\"?->>'type'\", landline_contact_method) == \"landline\",\n        left_join: received_transmission_id in subquery(first_transmission_query),\n        on: received_transmission_id.case_uuid == case.uuid,\n        left_join: received_transmission in assoc(case, :received_transmissions),\n        on: received_transmission.uuid == received_transmission_id.uuid,\n        left_join: received_transmission_case in assoc(received_transmission, :propagator_case),\n        left_join:\n          received_transmission_case_tenant in assoc(received_transmission_case, :tenant),\n        left_join:\n          received_transmission_case_ism_id in fragment(\n            \"UNNEST(?)\",\n            received_transmission_case.external_references\n          ),\n        on: fragment(\"?->>'type'\", received_transmission_case_ism_id) == \"ism_case\",\n        left_join: employer in assoc(person, :employers),\n        left_join: test in assoc(case, :tests),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"possible_index\",\n        group_by: [case.uuid, person.uuid],\n        order_by: [asc: case.inserted_at],\n        select: [\n          # ktn_internal_id\n          type(case.uuid, Ecto.UUID),\n          # last_name\n          person.last_name,\n          # first_name\n          person.first_name,\n          # street_name\n          fragment(\"?->>'address'\", person.address),\n          # street_number\n          ^nil,\n          # location\n          fragment(\"?->>'place'\", person.address),\n          # postal_code\n          fragment(\"?->>'zip'\", person.address),\n          # country\n          fragment(\"?->>'country'\", person.address),\n          # phone_number\n          max(fragment(\"?->>'value'\", landline_contact_method)),\n          # mobile_number\n          max(fragment(\"?->>'value'\", mobile_contact_method)),\n          # sex\n          person.sex,\n          # date_of_birth\n          person.birth_date,\n          # profession\n          person.profession_category_main,\n          # work_place_name\n          fragment(\"(ARRAY_AGG(?))[1]\", employer.name),\n          # work_place_postal_code\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'zip'\", employer.address)),\n          # work_place_country\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'country'\", employer.address)),\n          # quar_loc_type\n          type(\n            fragment(\"(?->>'location')::isolation_location\", case.monitoring),\n            Case.Monitoring.IsolationLocation\n          ),\n          # other_quar_loc_type\n          fragment(\"?->>'location_details'\", case.monitoring),\n          # exp_type\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"(?->'details'->>'type')\", phase)),\n            Case.Phase.PossibleIndex.Type\n          ),\n          # case_link_fall_id_ism\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\n              \"\"\"\n              CASE\n                WHEN ? THEN ?\n                WHEN ? THEN ?\n              END\n              \"\"\",\n              not received_transmission.propagator_internal,\n              received_transmission.propagator_ism_id,\n              received_transmission.propagator_internal,\n              fragment(\"?->>'value'\", received_transmission_case_ism_id)\n            )\n          ),\n          # case_link_ktn_internal_id\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.propagator_case_uuid),\n            Ecto.UUID\n          ),\n          # case_link_contact_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # hygeia_case_link_region_subdivision\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            received_transmission_case_tenant.subdivision\n          ),\n          # exp_loc_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", received_transmission.date),\n          # exp_country\n          fragment(\n            \"(ARRAY_AGG(?))[1]\",\n            fragment(\"?->'address'->'country'\", received_transmission.infection_place)\n          ),\n          # exp_loc_type_work_place\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"work_place\"\n          ),\n          # exp_loc_type_army\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"army\"\n          ),\n          # exp_loc_type_asyl\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"asyl\"\n          ),\n          # exp_loc_type_choir\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"choir\"\n          ),\n          # exp_loc_type_club\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"club\"\n          ),\n          # exp_loc_type_hh\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hh\"\n          ),\n          # exp_loc_type_high_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"high_school\"\n          ),\n          # exp_loc_type_childcare\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"childcare\"\n          ),\n          # exp_loc_type_erotica\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"erotica\"\n          ),\n          # exp_loc_type_flight\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"flight\"\n          ),\n          # exp_loc_type_medical\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"medical\"\n          ),\n          # exp_loc_type_hotel\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"hotel\"\n          ),\n          # exp_loc_type_child_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"child_home\"\n          ),\n          # exp_loc_type_cinema\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"cinema\"\n          ),\n          # exp_loc_type_shop\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"shop\"\n          ),\n          # exp_loc_type_school\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school\"\n          ),\n          # exp_loc_type_less_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"less_300\"\n          ),\n          # exp_loc_type_more_300\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"more_300\"\n          ),\n          # exp_loc_type_public_transp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"public_transp\"\n          ),\n          # exp_loc_type_massage\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"massage\"\n          ),\n          # exp_loc_type_nursing_home\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"nursing_home\"\n          ),\n          # exp_loc_type_religion\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"religion\"\n          ),\n          # exp_loc_type_restaurant\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"restaurant\"\n          ),\n          # exp_loc_type_school_camp\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"school_camp\"\n          ),\n          # exp_loc_type_indoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"indoor_sport\"\n          ),\n          # exp_loc_type_outdoor_sport\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"outdoor_sport\"\n          ),\n          # exp_loc_type_gathering\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"gathering\"\n          ),\n          # exp_loc_type_zoo\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"zoo\"\n          ),\n          # exp_loc_type_prison\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"prison\"\n          ),\n          # other_exp_loc_type_yn\n          fragment(\n            \"(ARRAY_AGG(?->'type' \\\\? ?))[1]\",\n            received_transmission.infection_place,\n            \"other\"\n          ),\n          # other_exp_loc_type\n          fragment(\"(ARRAY_AGG(?->'type_other'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_less_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_type_more_300_detail\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_name\n          fragment(\"(ARRAY_AGG(?->>'name'))[1]\", received_transmission.infection_place),\n          # exp_loc_street\n          fragment(\n            \"(ARRAY_AGG(?->'address'->'address'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_street_number\n          ^nil,\n          # exp_loc_location\n          fragment(\n            \"(ARRAY_AGG(?->'address'->>'place'))[1]\",\n            received_transmission.infection_place\n          ),\n          # exp_loc_postal_code\n          fragment(\"(ARRAY_AGG(?->'address'->>'zip'))[1]\", received_transmission.infection_place),\n          # exp_loc_flightdetail\n          fragment(\n            \"(ARRAY_AGG(?->>'flight_information'))[1]\",\n            received_transmission.infection_place\n          ),\n          # test_reason_symptoms\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"symptoms\"),\n          # test_reason_quarantine\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"quarantine\"),\n          # test_reason_quarantine_end\n          fragment(\"?->'reasons_for_test' \\\\? ?\", case.clinical, \"quarantine_end\"),\n          # other_test_reason\n          fragment(\"?->'reasons_for_test' \\\\?| ?\", case.clinical, [\n            \"outbreak_examination\",\n            \"screening\",\n            \"work_related\",\n            \"app_report\",\n            \"contact_tracing\",\n            \"convenience\"\n          ]),\n          # symptom_onset_dt\n          fragment(\"(?->>'symptom_start')\", case.clinical),\n          # test_type\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.kind), Test.Kind),\n          # sampling_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", test.tested_at),\n          # test_result\n          type(fragment(\"(ARRAY_AGG(?))[1]\", test.result), Test.Result),\n          # onset_quar_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'start'\", phase)),\n          # end_quar_dt\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->>'end'\", phase)),\n          # reason_end_quar\n          type(\n            fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->'details'->>'end_reason'\", phase)),\n            Case.Phase.PossibleIndex.EndReason\n          ),\n          # other_reason_end_quar\n          fragment(\"(ARRAY_AGG(?))[1]\", fragment(\"?->'details'->>'other_end_reason'\", phase)),\n          # vacc_yn\n          fragment(\"(?->>'done')::boolean\", person.vaccination),\n          # vacc_name\n          fragment(\"?->>'name'\", person.vaccination),\n          # vacc_dose\n          fragment(\n            \"CASE WHEN ? THEN ? ELSE ? END\",\n            is_nil(fragment(\"?->>'jab_dates'\", person.vaccination)),\n            nil,\n            fragment(\"JSONB_ARRAY_LENGTH(?)\", fragment(\"?->'jab_dates'\", person.vaccination))\n          ),\n          # vacc_dt_first\n          fragment(\"(?->'jab_dates'->>0)\", person.vaccination),\n          # vacc_dt_last\n          fragment(\"(?->'jab_dates'->>-1)\", person.vaccination)\n        ]\n      )\n      |> Repo.stream()\n      |> Stream.map(fn entry ->\n        entry\n        |> normalize_ism_id(@bag_med_16122020_contact_fields_index.case_link_fall_id_ism)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.phone_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.mobile_number, fn\n          nil ->\n            nil\n\n          phone_number ->\n            {:ok, parsed_number} = ExPhoneNumber.parse(phone_number, @origin_country)\n            ExPhoneNumber.Formatting.format(parsed_number, :e164)\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.sex, fn\n          nil -> nil\n          :male -> 1\n          :female -> 2\n          :other -> 3\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.quar_loc_type, fn\n          nil -> 6\n          :home -> 1\n          :social_medical_facility -> 2\n          :hospital -> 3\n          :hotel -> 4\n          :asylum_center -> 5\n          :other -> 7\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.exp_type, fn\n          nil -> nil\n          :other -> nil\n          :contact_person -> 1\n          :travel -> 2\n          :outbreak -> 2\n          :covid_app -> 1\n        end)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.test_reason_symptoms)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_work_place)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_army)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_asyl)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_choir)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_club)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_hh)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_high_school\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_childcare)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_erotica)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_flight)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_medical)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_hotel)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_child_home)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_cinema)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_shop)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_school)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_less_300)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_more_300)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_public_transp\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_massage)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_nursing_home\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_religion)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_restaurant)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_school_camp\n        )\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_indoor_sport\n        )\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.exp_loc_type_outdoor_sport\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_gathering)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_zoo)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.exp_loc_type_prison)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.other_exp_loc_type_yn)\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.test_reason_quarantine)\n        |> normalize_boolean_field(\n          @bag_med_16122020_contact_fields_index.test_reason_quarantine_end\n        )\n        |> normalize_boolean_field(@bag_med_16122020_contact_fields_index.other_test_reason)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.test_type, fn\n          nil -> 5\n          :pcr -> 1\n          :serology -> 5\n          :quick -> 2\n          :antigen_quick -> 3\n          :antigen -> 4\n        end)\n        |> List.update_at(@bag_med_16122020_contact_fields_index.test_result, fn\n          :positive -> 1\n          :negative -> 2\n          :inconclusive -> 3\n          nil -> 3\n        end)\n        |> normalize_boolean_and_unknown_field(@bag_med_16122020_contact_fields_index.vacc_yn)\n        |> normalize_country(@bag_med_16122020_contact_fields_index.country)\n        |> normalize_country(@bag_med_16122020_contact_fields_index.work_place_country)\n        |> normalize_country(@bag_med_16122020_contact_fields_index.exp_country)\n        |> (fn list ->\n              case Enum.at(list, @bag_med_16122020_contact_fields_index.reason_end_quar) do\n                :negative_test ->\n                  list\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.other_reason_end_quar)],\n                    \"Negative Test\"\n                  )\n\n                :immune ->\n                  list\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.other_reason_end_quar)],\n                    \"Immune\"\n                  )\n\n                :vaccinated ->\n                  list\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n                  |> put_in(\n                    [Access.at!(@bag_med_16122020_contact_fields_index.other_reason_end_quar)],\n                    \"Vaccinated\"\n                  )\n\n                :asymptomatic ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    1\n                  )\n\n                :converted_to_index ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    2\n                  )\n\n                :no_follow_up ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    3\n                  )\n\n                :other ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    4\n                  )\n\n                nil ->\n                  put_in(\n                    list,\n                    [Access.at!(@bag_med_16122020_contact_fields_index.reason_end_quar)],\n                    nil\n                  )\n              end\n            end).()\n      end)\n\n    export = Stream.concat([@bag_med_16122020_contact_fields], cases)\n\n    export =\n      if extended do\n        export\n      else\n        Stream.map(export, fn entry ->\n          Enum.reduce(@extended_fields, entry, &List.delete_at(&2, &1))\n        end)\n      end\n\n    CSV.encode(export, escape_formulas: true)\n  end\n\n  defp normalize_boolean_field(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil -> nil\n      true -> 1\n      false -> 0\n    end)\n  end\n\n  defp normalize_boolean_and_unknown_field(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil -> 3\n      true -> 1\n      false -> 2\n    end)\n  end\n\n  defp normalize_country(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil -> nil\n      country -> Country.bfs_code(country)\n    end)\n  end\n\n  defp normalize_ism_id(row, field_number) do\n    List.update_at(row, field_number, fn\n      nil ->\n        nil\n\n      id ->\n        case Integer.parse(id) do\n          {id, \"\"} -> id\n          {_id, _rest} -> nil\n          :error -> nil\n        end\n    end)\n  end\n\n  @doc \"\"\"\n  Gets a single case.\n\n  Raises `Ecto.NoResultsError` if the Case does not exist.\n\n  ## Examples\n\n      iex> get_case!(123)\n      %Case{}\n\n      iex> get_case!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_case!(id :: Ecto.UUID.t()) :: Case.t()\n  def get_case!(id), do: Repo.get!(Case, id)\n\n  @spec get_case_with_lock!(id :: Ecto.UUID.t()) :: Case.t()\n  def get_case_with_lock!(id),\n    do: Repo.one!(from case in Case, where: case.uuid == ^id, lock: \"FOR UPDATE\")\n\n  @doc \"\"\"\n  Creates a case.\n\n  ## Examples\n\n      iex> create_case(%{field: value})\n      {:ok, %Case{}}\n\n      iex> create_case(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_case(person :: Person.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def create_case(%Person{} = person, attrs),\n    do:\n      person\n      |> change_new_case(attrs)\n      |> create_case()\n\n  @spec create_case(changeset :: Ecto.Changeset.t(Case.t())) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def create_case(%Ecto.Changeset{data: %Case{}} = changeset),\n    do:\n      changeset\n      |> Case.changeset(%{})\n      |> versioning_insert()\n      |> broadcast(\"cases\", :create)\n      |> versioning_extract()\n\n  @spec create_case(\n          person :: Person.t(),\n          tenant :: Tenant.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def create_case(%Person{} = person, %Tenant{} = tenant, attrs),\n    do:\n      person\n      |> change_new_case(tenant, attrs)\n      |> create_case()\n\n  @doc \"\"\"\n  Updates a case.\n\n  ## Examples\n\n      iex> update_case(case, %{field: new_value})\n      {:ok, %Case{}}\n\n      iex> update_case(case, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_case(\n          case :: Case.t() | Ecto.Changeset.t(Case.t()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Case.changeset_params()\n        ) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def update_case(case, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def update_case(%Case{} = case, attrs, changeset_params),\n    do:\n      case\n      |> change_case(attrs, changeset_params)\n      |> update_case()\n\n  @spec update_case(changeset :: Ecto.Changeset.t(Case.t())) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def update_case(%Ecto.Changeset{data: %Case{}} = changeset, attrs, changeset_params),\n    do:\n      changeset\n      |> change_case(attrs, changeset_params)\n      |> versioning_update()\n      |> broadcast(\"cases\", :update)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a case.\n\n  ## Examples\n\n      iex> delete_case(case)\n      {:ok, %Case{}}\n\n      iex> delete_case(case)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_case(case :: Case.t()) :: {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def delete_case(%Case{} = case),\n    do:\n      case\n      |> change_case()\n      |> versioning_delete()\n      |> broadcast(\"cases\", :delete)\n      |> versioning_extract()\n\n  @spec case_phase_automated_email_sent(case :: Case.t(), phase :: Case.Phase.t()) ::\n          {:ok, Case.t()} | {:error, Ecto.Changeset.t(Case.t())}\n  def case_phase_automated_email_sent(%Case{phases: phases} = case, %Case.Phase{uuid: phase_uuid}) do\n    case\n    |> Ecto.Changeset.change()\n    |> Ecto.Changeset.put_embed(\n      :phases,\n      Enum.map(phases, fn\n        %Case.Phase{uuid: ^phase_uuid} = phase ->\n          Case.Phase.changeset(phase, %{automated_close_email_sent: DateTime.utc_now()})\n\n        %Case.Phase{} = phase ->\n          Case.Phase.changeset(phase, %{})\n      end)\n    )\n    |> versioning_update()\n    |> broadcast(\"cases\", :update)\n    |> versioning_extract()\n  end\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking case changes.\n\n  ## Examples\n\n      iex> change_case(case)\n      %Ecto.Changeset{data: %Case{}}\n\n  \"\"\"\n  @spec change_case(\n          case :: Case.t() | Case.empty() | Changeset.t(Case.t() | Case.empty()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Case.changeset_params()\n        ) ::\n          Ecto.Changeset.t(Case.t())\n  def change_case(case, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def change_case(%Case{} = case, attrs, changeset_params),\n    do: Case.changeset(case, attrs, changeset_params)\n\n  def change_case(%Changeset{data: %Case{}} = case, attrs, changeset_params),\n    do: Case.changeset(case, attrs, changeset_params)\n\n  @spec change_new_case(\n          person :: Person.t(),\n          tenant :: Tenant.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(Case.t())\n  def change_new_case(person, tenant, attrs) do\n    person\n    |> Ecto.build_assoc(:cases)\n    |> change_case(\n      Map.put(\n        attrs,\n        case Enum.to_list(attrs) do\n          [{key, _value} | _] when is_binary(key) -> \"tenant_uuid\"\n          _other -> :tenant_uuid\n        end,\n        tenant.uuid\n      )\n    )\n  end\n\n  @spec change_new_case(\n          person :: Person.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(Case.t())\n  def change_new_case(person, attrs) do\n    tenant = Repo.preload(person, :tenant).tenant\n    change_new_case(person, tenant, attrs)\n  end\n\n  @doc \"\"\"\n  Returns the list of transmissions.\n\n  ## Examples\n\n      iex> list_transmissions()\n      [%Transmission{}, ...]\n\n  \"\"\"\n  @spec list_transmissions :: [Transmission.t()]\n  def list_transmissions, do: Repo.all(Transmission)\n\n  @doc \"\"\"\n  Gets a single transmission.\n\n  Raises `Ecto.NoResultsError` if the Transmission does not exist.\n\n  ## Examples\n\n      iex> get_transmission!(123)\n      %Transmission{}\n\n      iex> get_transmission!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_transmission!(id :: Ecto.UUID.t()) :: Transmission.t()\n  def get_transmission!(id), do: Repo.get!(Transmission, id)\n\n  @doc \"\"\"\n  Creates a transmission.\n\n  ## Examples\n\n      iex> create_transmission(%{field: value})\n      {:ok, %Transmission{}}\n\n      iex> create_transmission(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_transmission(attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def create_transmission(attrs \\\\ %{}),\n    do:\n      %Transmission{}\n      |> change_transmission(attrs)\n      |> versioning_insert()\n      |> broadcast(\n        \"transmissions\",\n        :create,\n        & &1.uuid,\n        &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @spec create_transmission(\n          transmission :: Transmission.t() | Ecto.Changeset.t(Transmission.t()),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def create_transmission(transmission, attrs),\n    do:\n      transmission\n      |> change_transmission(attrs)\n      |> versioning_insert()\n      |> broadcast(\n        \"transmissions\",\n        :create,\n        & &1.uuid,\n        &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a transmission.\n\n  ## Examples\n\n      iex> update_transmission(transmission, %{field: new_value})\n      {:ok, %Transmission{}}\n\n      iex> update_transmission(transmission, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_transmission(\n          transmission :: Transmission.t() | Ecto.Changeset.t(Transmission.t()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Transmission.changeset_params()\n        ) :: {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def update_transmission(transmission, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def update_transmission(%Transmission{} = transmission, attrs, changeset_params),\n    do:\n      transmission\n      |> change_transmission(attrs, changeset_params)\n      |> update_transmission()\n\n  def update_transmission(\n        %Ecto.Changeset{data: %Transmission{}} = changeset,\n        attrs,\n        changeset_params\n      ),\n      do:\n        changeset\n        |> change_transmission(attrs, changeset_params)\n        |> versioning_update()\n        |> broadcast(\n          \"transmissions\",\n          :update,\n          & &1.uuid,\n          &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n        )\n        |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a transmission.\n\n  ## Examples\n\n      iex> delete_transmission(transmission)\n      {:ok, %Transmission{}}\n\n      iex> delete_transmission(transmission)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_transmission(transmission :: Transmission.t()) ::\n          {:ok, Transmission.t()} | {:error, Ecto.Changeset.t(Transmission.t())}\n  def delete_transmission(%Transmission{} = transmission),\n    do:\n      transmission\n      |> versioning_delete()\n      |> broadcast(\n        \"transmissions\",\n        :delete,\n        & &1.uuid,\n        &[\"cases:#{&1.recipient_case_uuid}\", \"cases:#{&1.propagator_case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking transmission changes.\n\n  ## Examples\n\n      iex> change_transmission(transmission)\n      %Ecto.Changeset{data: %Transmission{}}\n\n  \"\"\"\n  @spec change_transmission(\n          transmission ::\n            Transmission.t()\n            | Transmission.empty()\n            | Changeset.t(Transmission.t() | Transmission.empty()),\n          attrs :: Hygeia.ecto_changeset_params(),\n          changeset_params :: Transmission.changeset_params()\n        ) ::\n          Ecto.Changeset.t(Transmission.t())\n  def change_transmission(transmission, attrs \\\\ %{}, changeset_params \\\\ %{})\n\n  def change_transmission(%Transmission{} = transmission, attrs, changeset_params),\n    do: Transmission.changeset(transmission, attrs, changeset_params)\n\n  def change_transmission(\n        %Ecto.Changeset{data: %Transmission{}} = transmission,\n        attrs,\n        changeset_params\n      ),\n      do: Transmission.changeset(transmission, attrs, changeset_params)\n\n  @doc \"\"\"\n  Returns the list of notes.\n\n  ## Examples\n\n      iex> list_notes()\n      [%Note{}, ...]\n\n  \"\"\"\n  @spec list_notes :: [Note.t()]\n  def list_notes, do: Repo.all(Note)\n\n  @doc \"\"\"\n  Gets a single note.\n\n  Raises `Ecto.NoResultsError` if the Protocol entry does not exist.\n\n  ## Examples\n\n      iex> get_note!(123)\n      %Note{}\n\n      iex> get_note!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_note!(id :: Ecto.UUID.t()) :: Note.t()\n  def get_note!(id), do: Repo.get!(Note, id)\n\n  @doc \"\"\"\n  Creates a note.\n\n  ## Examples\n\n      iex> create_note(%{field: value})\n      {:ok, %Note{}}\n\n      iex> create_note(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_note(case :: Case.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Note.t()} | {:error, Ecto.Changeset.t(Note.t())}\n  def create_note(%Case{} = case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:notes)\n      |> change_note(attrs)\n      |> versioning_insert()\n      |> broadcast(\n        \"notes\",\n        :create,\n        & &1.uuid,\n        &[\"notes:case:#{&1.case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a note.\n\n  ## Examples\n\n      iex> update_note(note, %{field: new_value})\n      {:ok, %Note{}}\n\n      iex> update_note(note, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_note(\n          note :: Note.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: {:ok, Note.t()} | {:error, Ecto.Changeset.t(Note.t())}\n  def update_note(%Note{} = note, attrs),\n    do:\n      note\n      |> change_note(attrs)\n      |> versioning_update()\n      |> broadcast(\n        \"notes\",\n        :update,\n        & &1.uuid,\n        &[\"notes:case:#{&1.case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a note.\n\n  ## Examples\n\n      iex> delete_note(note)\n      {:ok, %Note{}}\n\n      iex> delete_note(note)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_note(note :: Note.t()) ::\n          {:ok, Note.t()} | {:error, Ecto.Changeset.t(Note.t())}\n  def delete_note(%Note{} = note),\n    do:\n      note\n      |> change_note()\n      |> versioning_delete()\n      |> broadcast(\n        \"notes\",\n        :delete,\n        & &1.uuid,\n        &[\"notes:case:#{&1.case_uuid}\"]\n      )\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking note changes.\n\n  ## Examples\n\n      iex> change_note(note)\n      %Ecto.Changeset{data: %Note{}}\n\n  \"\"\"\n  @spec change_note(\n          note :: Note.t() | Note.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(Note.t())\n  def change_note(%Note{} = note, attrs \\\\ %{}),\n    do: Note.changeset(note, attrs)\n\n  @doc \"\"\"\n  Returns the list of possible_index_submissions.\n\n  ## Examples\n\n      iex> list_possible_index_submissions()\n      [%PossibleIndexSubmission{}, ...]\n\n  \"\"\"\n  @spec list_possible_index_submissions :: [PossibleIndexSubmission.t()]\n  def list_possible_index_submissions, do: Repo.all(PossibleIndexSubmission)\n\n  @doc \"\"\"\n  Gets a single possible_index_submission.\n\n  Raises `Ecto.NoResultsError` if the Possible index submission does not exist.\n\n  ## Examples\n\n      iex> get_possible_index_submission!(123)\n      %PossibleIndexSubmission{}\n\n      iex> get_possible_index_submission!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_possible_index_submission!(id :: Ecto.UUID.t()) :: PossibleIndexSubmission.t()\n  def get_possible_index_submission!(id), do: Repo.get!(PossibleIndexSubmission, id)\n\n  @doc \"\"\"\n  Creates a possible_index_submission.\n\n  ## Examples\n\n      iex> create_possible_index_submission(%{field: value})\n      {:ok, %PossibleIndexSubmission{}}\n\n      iex> create_possible_index_submission(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_possible_index_submission(\n          case :: Case.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PossibleIndexSubmission.t()}\n          | {:error, Ecto.Changeset.t(PossibleIndexSubmission.t())}\n  def create_possible_index_submission(case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:possible_index_submissions)\n      |> change_possible_index_submission(attrs)\n      |> versioning_insert()\n      |> broadcast(\"possible_index_submissions\", :create, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a possible_index_submission.\n\n  ## Examples\n\n      iex> update_possible_index_submission(possible_index_submission, %{field: new_value})\n      {:ok, %PossibleIndexSubmission{}}\n\n      iex> update_possible_index_submission(possible_index_submission, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_possible_index_submission(\n          possible_index_submission :: PossibleIndexSubmission.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PossibleIndexSubmission.t()}\n          | {:error, Ecto.Changeset.t(PossibleIndexSubmission.t())}\n  def update_possible_index_submission(\n        %PossibleIndexSubmission{} = possible_index_submission,\n        attrs\n      ),\n      do:\n        possible_index_submission\n        |> change_possible_index_submission(attrs)\n        |> versioning_update()\n        |> broadcast(\"possible_index_submissions\", :update, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n        |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a possible_index_submission.\n\n  ## Examples\n\n      iex> delete_possible_index_submission(possible_index_submission)\n      {:ok, %PossibleIndexSubmission{}}\n\n      iex> delete_possible_index_submission(possible_index_submission)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_possible_index_submission(possible_index_submission :: PossibleIndexSubmission.t()) ::\n          {:ok, PossibleIndexSubmission.t()}\n          | {:error, Ecto.Changeset.t(PossibleIndexSubmission.t())}\n  def delete_possible_index_submission(%PossibleIndexSubmission{} = possible_index_submission),\n    do:\n      possible_index_submission\n      |> change_possible_index_submission()\n      |> versioning_delete()\n      |> broadcast(\"possible_index_submissions\", :delete, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking possible_index_submission changes.\n\n  ## Examples\n\n      iex> change_possible_index_submission(possible_index_submission)\n      %Ecto.Changeset{data: %PossibleIndexSubmission{}}\n\n  \"\"\"\n  @spec change_possible_index_submission(\n          possible_index_submission ::\n            PossibleIndexSubmission.t() | PossibleIndexSubmission.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          Ecto.Changeset.t(PossibleIndexSubmission.t())\n  def change_possible_index_submission(\n        %PossibleIndexSubmission{} = possible_index_submission,\n        attrs \\\\ %{}\n      ) do\n    PossibleIndexSubmission.changeset(possible_index_submission, attrs)\n  end\n\n  @doc \"\"\"\n  Returns the list of hospitalizations.\n\n  ## Examples\n\n      iex> list_hospitalizations()\n      [%Hospitalization{}, ...]\n\n  \"\"\"\n  @spec list_hospitalizations :: [Hospitalization.t()]\n  def list_hospitalizations, do: Repo.all(Hospitalization)\n\n  @doc \"\"\"\n  Gets a single hospitalization.\n\n  Raises `Ecto.NoResultsError` if the Possible index submission does not exist.\n\n  ## Examples\n\n      iex> get_hospitalization!(123)\n      %Hospitalization{}\n\n      iex> get_hospitalization!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_hospitalization!(id :: Ecto.UUID.t()) :: Hospitalization.t()\n  def get_hospitalization!(id), do: Repo.get!(Hospitalization, id)\n\n  @doc \"\"\"\n  Creates a hospitalization.\n\n  ## Examples\n\n      iex> create_hospitalization(%{field: value})\n      {:ok, %Hospitalization{}}\n\n      iex> create_hospitalization(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_hospitalization(\n          case :: Case.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Hospitalization.t()}\n          | {:error, Ecto.Changeset.t(Hospitalization.t())}\n  def create_hospitalization(case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:hospitalizations)\n      |> change_hospitalization(attrs)\n      |> versioning_insert()\n      |> broadcast(\"hospitalizations\", :create, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a hospitalization.\n\n  ## Examples\n\n      iex> update_hospitalization(hospitalization, %{field: new_value})\n      {:ok, %Hospitalization{}}\n\n      iex> update_hospitalization(hospitalization, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_hospitalization(\n          hospitalization :: Hospitalization.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, Hospitalization.t()}\n          | {:error, Ecto.Changeset.t(Hospitalization.t())}\n  def update_hospitalization(\n        %Hospitalization{} = hospitalization,\n        attrs\n      ),\n      do:\n        hospitalization\n        |> change_hospitalization(attrs)\n        |> versioning_update()\n        |> broadcast(\"hospitalizations\", :update, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n        |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a hospitalization.\n\n  ## Examples\n\n      iex> delete_hospitalization(hospitalization)\n      {:ok, %Hospitalization{}}\n\n      iex> delete_hospitalization(hospitalization)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_hospitalization(hospitalization :: Hospitalization.t()) ::\n          {:ok, Hospitalization.t()}\n          | {:error, Ecto.Changeset.t(Hospitalization.t())}\n  def delete_hospitalization(%Hospitalization{} = hospitalization),\n    do:\n      hospitalization\n      |> change_hospitalization()\n      |> versioning_delete()\n      |> broadcast(\"hospitalizations\", :delete, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking hospitalization changes.\n\n  ## Examples\n\n      iex> change_hospitalization(hospitalization)\n      %Ecto.Changeset{data: %Hospitalization{}}\n\n  \"\"\"\n  @spec change_hospitalization(\n          hospitalization ::\n            Hospitalization.t() | Hospitalization.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          Ecto.Changeset.t(Hospitalization.t())\n  def change_hospitalization(\n        %Hospitalization{} = hospitalization,\n        attrs \\\\ %{}\n      ) do\n    Hospitalization.changeset(hospitalization, attrs)\n  end\n\n  @spec list_protocol_entries(case :: Case.t(), limit :: pos_integer()) :: [\n          %{\n            version: Hygeia.VersionContext.Version.t(),\n            entry: Note.t() | Email.t() | SMS.t(),\n            inserted_at: DateTime.t()\n          }\n        ]\n  def list_protocol_entries(case, limit \\\\ 100) do\n    note_query =\n      from(note in Ecto.assoc(case, :notes),\n        select: {note.inserted_at, \"note\", note.uuid},\n        limit: ^limit\n      )\n\n    note_sms_query =\n      from(sms in Ecto.assoc(case, :sms),\n        select: {sms.inserted_at, \"sms\", sms.uuid},\n        union_all: ^note_query\n      )\n\n    note_sms_email_query =\n      from(email in Ecto.assoc(case, :emails),\n        select: {email.inserted_at, \"email\", email.uuid},\n        order_by: fragment(\"inserted_at\"),\n        union_all: ^note_sms_query\n      )\n\n    protocol_entries = Repo.all(note_sms_email_query)\n\n    resources =\n      protocol_entries\n      |> Enum.group_by(&elem(&1, 1), &elem(&1, 2))\n      |> Enum.flat_map(&load_protocol_entries(case, &1))\n      |> Map.new()\n\n    Enum.map(protocol_entries, fn {inserted_at, _type, uuid} ->\n      {resource, version} = Map.fetch!(resources, uuid)\n      {uuid, inserted_at, resource, version}\n    end)\n  end\n\n  defp load_protocol_entries(case, {\"sms\", ids}),\n    do:\n      Repo.all(\n        from(version in Hygeia.VersionContext.Version,\n          join: sms in ^Ecto.assoc(case, :sms),\n          on:\n            fragment(\"(?->>'uuid')::uuid\", version.item_pk) == sms.uuid and\n              version.item_table == \"sms\" and\n              version.event == :insert,\n          select: {sms.uuid, {sms, version}},\n          where: fragment(\"?->>'uuid'\", version.item_pk) in ^ids,\n          preload: [:user]\n        )\n      )\n\n  defp load_protocol_entries(case, {\"email\", ids}),\n    do:\n      Repo.all(\n        from(version in Hygeia.VersionContext.Version,\n          join: email in ^Ecto.assoc(case, :emails),\n          on:\n            fragment(\"(?->>'uuid')::uuid\", version.item_pk) == email.uuid and\n              version.item_table == \"emails\" and\n              version.event == :insert,\n          select: {email.uuid, {email, version}},\n          where: fragment(\"?->>'uuid'\", version.item_pk) in ^ids,\n          preload: [:user]\n        )\n      )\n\n  defp load_protocol_entries(case, {\"note\", ids}),\n    do:\n      Repo.all(\n        from(version in Hygeia.VersionContext.Version,\n          join: note in ^Ecto.assoc(case, :notes),\n          on:\n            fragment(\"(?->>'uuid')::uuid\", version.item_pk) == note.uuid and\n              version.item_table == \"notes\" and\n              version.event == :insert,\n          select: {note.uuid, {note, version}},\n          where: fragment(\"?->>'uuid'\", version.item_pk) in ^ids,\n          preload: [:user]\n        )\n      )\n\n  @doc \"\"\"\n  Returns the list of tests.\n\n  ## Examples\n\n      iex> list_tests()\n      [%Test{}, ...]\n\n  \"\"\"\n  @spec list_tests :: [Test.t()]\n  def list_tests, do: Repo.all(Test)\n\n  @doc \"\"\"\n  Gets a single test.\n\n  Raises `Ecto.NoResultsError` if the Test does not exist.\n\n  ## Examples\n\n      iex> get_test!(123)\n      %Test{}\n\n      iex> get_test!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_test!(id :: Ecto.UUID.t()) :: Test.t()\n  def get_test!(id), do: Repo.get!(Test, id)\n\n  @doc \"\"\"\n  Creates a test.\n\n  ## Examples\n\n      iex> create_test(%{field: value})\n      {:ok, %Test{}}\n\n      iex> create_test(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_test(case :: Case.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Test.t()} | {:error, Ecto.Changeset.t(Test.t())}\n  def create_test(case, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:tests)\n      |> change_test(attrs)\n      |> versioning_insert()\n      |> broadcast(\"tests\", :create, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a test.\n\n  ## Examples\n\n      iex> update_test(test, %{field: new_value})\n      {:ok, %Test{}}\n\n      iex> update_test(test, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_test(test :: Test.t(), attrs :: Hygeia.ecto_changeset_params()) ::\n          {:ok, Test.t()} | {:error, Ecto.Changeset.t(Test.t())}\n  def update_test(%Test{} = test, attrs),\n    do:\n      test\n      |> change_test(attrs)\n      |> versioning_update()\n      |> broadcast(\"tests\", :update, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a test.\n\n  ## Examples\n\n      iex> delete_test(test)\n      {:ok, %Test{}}\n\n      iex> delete_test(test)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_test(test :: Test.t()) :: {:ok, Test.t()} | {:error, Ecto.Changeset.t(Test.t())}\n  def delete_test(%Test{} = test),\n    do:\n      test\n      |> change_test()\n      |> versioning_delete()\n      |> broadcast(\"tests\", :delete, & &1.uuid, &[\"cases:#{&1.case_uuid}\"])\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking test changes.\n\n  ## Examples\n\n      iex> change_test(test)\n      %Ecto.Changeset{data: %Test{}}\n\n  \"\"\"\n  @spec change_test(test :: Test.t() | Test.empty(), attrs :: Hygeia.ecto_changeset_params()) ::\n          Changeset.t(Test.t())\n  def change_test(%Test{} = test, attrs \\\\ %{}), do: Test.changeset(test, attrs)\n\n  @doc \"\"\"\n  Returns the list of premature_releases.\n\n  ## Examples\n\n      iex> list_premature_releases()\n      [%PrematureRelease{}, ...]\n\n  \"\"\"\n  @spec list_premature_releases :: [PrematureRelease.t()]\n  def list_premature_releases, do: Repo.all(PrematureRelease)\n\n  @spec list_premature_releases(case :: Case.t()) :: [PrematureRelease.t()]\n  def list_premature_releases(%Case{} = case),\n    do: case |> Ecto.assoc(:premature_releases) |> Repo.all()\n\n  @doc \"\"\"\n  Gets a single premature_release.\n\n  Raises `Ecto.NoResultsError` if the Premature release does not exist.\n\n  ## Examples\n\n      iex> get_premature_release!(123)\n      %PrematureRelease{}\n\n      iex> get_premature_release!(456)\n      ** (Ecto.NoResultsError)\n\n  \"\"\"\n  @spec get_premature_release!(id :: Ecto.UUID.t()) :: PrematureRelease.t()\n  def get_premature_release!(id), do: Repo.get!(PrematureRelease, id)\n\n  @doc \"\"\"\n  Creates a premature_release.\n\n  ## Examples\n\n      iex> create_premature_release(%{field: value})\n      {:ok, %PrematureRelease{}}\n\n      iex> create_premature_release(%{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec create_premature_release(\n          case :: Case.t(),\n          phase :: Case.Phase.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PrematureRelease.t()} | {:error, Ecto.Changeset.t(PrematureRelease.t())}\n  def create_premature_release(%Case{} = case, %Case.Phase{} = phase, attrs \\\\ %{}),\n    do:\n      case\n      |> change_new_premature_release(phase, attrs)\n      |> versioning_insert()\n      |> broadcast(\"premature_releases\", :create)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Updates a premature_release.\n\n  ## Examples\n\n      iex> update_premature_release(premature_release, %{field: new_value})\n      {:ok, %PrematureRelease{}}\n\n      iex> update_premature_release(premature_release, %{field: bad_value})\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec update_premature_release(\n          premature_release :: PrematureRelease.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          {:ok, PrematureRelease.t()} | {:error, Ecto.Changeset.t(PrematureRelease.t())}\n\n  def update_premature_release(%PrematureRelease{} = premature_release, attrs),\n    do:\n      premature_release\n      |> change_premature_release(attrs)\n      |> versioning_update()\n      |> broadcast(\"premature_releases\", :update)\n      |> versioning_extract()\n\n  @doc \"\"\"\n  Deletes a premature_release.\n\n  ## Examples\n\n      iex> delete_premature_release(premature_release)\n      {:ok, %PrematureRelease{}}\n\n      iex> delete_premature_release(premature_release)\n      {:error, %Ecto.Changeset{}}\n\n  \"\"\"\n  @spec delete_premature_release(premature_release :: PrematureRelease.t()) ::\n          {:ok, PrematureRelease.t()} | {:error, Ecto.Changeset.t(PrematureRelease.t())}\n\n  def delete_premature_release(%PrematureRelease{} = premature_release),\n    do:\n      premature_release\n      |> change_premature_release()\n      |> versioning_delete()\n      |> broadcast(\"premature_releases\", :delete)\n      |> versioning_extract()\n\n  @spec change_new_premature_release(\n          case :: Case.t(),\n          phase :: Case.Phase.t(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) ::\n          Ecto.Changeset.t(PrematureRelease.t())\n  def change_new_premature_release(%Case{} = case, %Case.Phase{} = phase, attrs \\\\ %{}),\n    do:\n      case\n      |> Ecto.build_assoc(:premature_releases)\n      |> Changeset.change(%{phase_uuid: phase.uuid})\n      |> PrematureRelease.create_changeset(attrs)\n\n  @doc \"\"\"\n  Returns an `%Ecto.Changeset{}` for tracking premature_release changes.\n\n  ## Examples\n\n      iex> change_premature_release(premature_release)\n      %Ecto.Changeset{data: %PrematureRelease{}}\n\n  \"\"\"\n  @spec change_premature_release(\n          premature_release :: PrematureRelease.t() | PrematureRelease.empty(),\n          attrs :: Hygeia.ecto_changeset_params()\n        ) :: Ecto.Changeset.t(PrematureRelease.t())\n  def change_premature_release(%PrematureRelease{} = premature_release, attrs \\\\ %{}),\n    do: PrematureRelease.changeset(premature_release, attrs)\nend\n", "defmodule Hygeia.StatisticsContext do\n  @moduledoc \"\"\"\n  The StatisticsContext context.\n  \"\"\"\n\n  use Hygeia, :context\n\n  import HygeiaGettext\n\n  alias Hygeia.CaseContext.Case\n  alias Hygeia.OrganisationContext.Affiliation.Kind\n  alias Hygeia.StatisticsContext.ActiveCasesPerDayAndOrganisation\n  alias Hygeia.StatisticsContext.ActiveComplexityCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveHospitalizationCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveInfectionPlaceCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveIsolationCasesPerDay\n  alias Hygeia.StatisticsContext.ActiveQuarantineCasesPerDay\n  alias Hygeia.StatisticsContext.CumulativeIndexCaseEndReasons\n  alias Hygeia.StatisticsContext.CumulativePossibleIndexCaseEndReasons\n  alias Hygeia.StatisticsContext.NewCasesPerDay\n  alias Hygeia.StatisticsContext.NewRegisteredCasesPerDay\n  alias Hygeia.StatisticsContext.TransmissionCountryCasesPerDay\n  alias Hygeia.TenantContext.Tenant\n\n  @doc \"\"\"\n  Returns the list of active_isolation_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_isolation_cases_per_day()\n      [%ActiveIsolationCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_isolation_cases_per_day :: [ActiveIsolationCasesPerDay.t()]\n  def list_active_isolation_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveIsolationCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_isolation_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveIsolationCasesPerDay.t()\n        ]\n  def list_active_isolation_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveIsolationCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_isolation_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveIsolationCasesPerDay.t()]\n  def list_active_isolation_cases_per_day(tenant, from, to, include_zero_values \\\\ true),\n    do: Repo.all(list_active_isolation_cases_per_day_query(tenant, from, to, include_zero_values))\n\n  defp list_active_isolation_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ),\n       do:\n         from(cases_per_day in ActiveIsolationCasesPerDay,\n           where:\n             cases_per_day.tenant_uuid == ^tenant_uuid and\n               fragment(\"? BETWEEN ?::date AND ?::date\", cases_per_day.date, ^from, ^to) and\n               (^include_zero_values or cases_per_day.count > 0),\n           order_by: cases_per_day.date\n         )\n\n  @doc \"\"\"\n  Returns the list of cumulative_index_case_end_reasons.\n\n  ## Examples\n\n      iex> list_cumulative_index_case_end_reasons()\n      [%CumulativeIndexCaseEndReasons{}, ...]\n\n  \"\"\"\n  @spec list_cumulative_index_case_end_reasons :: [CumulativeIndexCaseEndReasons.t()]\n  def list_cumulative_index_case_end_reasons,\n    do:\n      Repo.all(\n        from(cumulative_index_case_end_reasons in CumulativeIndexCaseEndReasons,\n          order_by: cumulative_index_case_end_reasons.date\n        )\n      )\n\n  @spec list_cumulative_index_case_end_reasons(tenant :: Tenant.t()) :: [\n          CumulativeIndexCaseEndReasons.t()\n        ]\n  def list_cumulative_index_case_end_reasons(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cumulative_index_case_end_reasons in CumulativeIndexCaseEndReasons,\n          where: cumulative_index_case_end_reasons.tenant_uuid == ^tenant_uuid,\n          order_by: cumulative_index_case_end_reasons.date\n        )\n      )\n\n  @spec list_cumulative_index_case_end_reasons(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [CumulativeIndexCaseEndReasons.t()]\n  def list_cumulative_index_case_end_reasons(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_cumulative_index_case_end_reasons_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_cumulative_index_case_end_reasons_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cumulative_index_case_end_reasons in CumulativeIndexCaseEndReasons,\n      where:\n        cumulative_index_case_end_reasons.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cumulative_index_case_end_reasons.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cumulative_index_case_end_reasons.count > 0),\n      order_by: cumulative_index_case_end_reasons.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of active_quarantine_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_quarantine_cases_per_day()\n      [%ActiveQuarantineCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_quarantine_cases_per_day :: [ActiveQuarantineCasesPerDay.t()]\n  def list_active_quarantine_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveQuarantineCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_quarantine_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveQuarantineCasesPerDay.t()\n        ]\n  def list_active_quarantine_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveQuarantineCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_quarantine_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveQuarantineCasesPerDay.t()]\n  def list_active_quarantine_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_quarantine_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_quarantine_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cases_per_day in ActiveQuarantineCasesPerDay,\n      where:\n        cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cases_per_day.count > 0),\n      order_by: cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of cumulative_possible_index_case_end_reasons.\n\n  ## Examples\n\n      iex> list_cumulative_possible_index_case_end_reasons()\n      [%CumulativePossibleIndexCaseEndReasons{}, ...]\n\n  \"\"\"\n  @spec list_cumulative_possible_index_case_end_reasons :: [\n          CumulativePossibleIndexCaseEndReasons.t()\n        ]\n  def list_cumulative_possible_index_case_end_reasons,\n    do:\n      Repo.all(\n        from(cases_per_day in CumulativePossibleIndexCaseEndReasons,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_cumulative_possible_index_case_end_reasons(tenant :: Tenant.t()) :: [\n          CumulativePossibleIndexCaseEndReasons.t()\n        ]\n  def list_cumulative_possible_index_case_end_reasons(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in CumulativePossibleIndexCaseEndReasons,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_cumulative_possible_index_case_end_reasons(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [CumulativePossibleIndexCaseEndReasons.t()]\n  def list_cumulative_possible_index_case_end_reasons(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_cumulative_possible_index_case_end_reasons_query(\n            tenant,\n            from,\n            to,\n            include_zero_values\n          )\n        )\n\n  defp list_cumulative_possible_index_case_end_reasons_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cases_per_day in CumulativePossibleIndexCaseEndReasons,\n      where:\n        cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cases_per_day.count > 0),\n      order_by: cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of new_cases_per_day.\n\n  ## Examples\n\n      iex> list_new_cases_per_day()\n      [%NewCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_new_cases_per_day :: [NewCasesPerDay.t()]\n  def list_new_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in NewCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_new_cases_per_day(tenant :: Tenant.t()) :: [\n          NewCasesPerDay.t()\n        ]\n  def list_new_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in NewCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_new_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [NewCasesPerDay.t()]\n  def list_new_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do: Repo.all(list_new_cases_per_day_query(tenant, from, to, include_zero_values))\n\n  defp list_new_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(cases_per_day in NewCasesPerDay,\n      where:\n        cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or cases_per_day.count > 0),\n      order_by: cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of active_hospitalization_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_hospitalization_cases_per_day()\n      [%ActiveHospitalizationCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_hospitalization_cases_per_day :: [ActiveHospitalizationCasesPerDay.t()]\n  def list_active_hospitalization_cases_per_day,\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveHospitalizationCasesPerDay,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_hospitalization_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveHospitalizationCasesPerDay.t()\n        ]\n  def list_active_hospitalization_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(cases_per_day in ActiveHospitalizationCasesPerDay,\n          where: cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: cases_per_day.date\n        )\n      )\n\n  @spec list_active_hospitalization_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveHospitalizationCasesPerDay.t()]\n  def list_active_hospitalization_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_hospitalization_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_hospitalization_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ),\n       do:\n         from(active_hospitalization_cases in ActiveHospitalizationCasesPerDay,\n           where:\n             active_hospitalization_cases.tenant_uuid == ^tenant_uuid and\n               fragment(\n                 \"? BETWEEN ?::date AND ?::date\",\n                 active_hospitalization_cases.date,\n                 ^from,\n                 ^to\n               ) and\n               (^include_zero_values or active_hospitalization_cases.count > 0),\n           order_by: active_hospitalization_cases.date\n         )\n\n  @doc \"\"\"\n  Returns the list of active_complexity_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_complexity_cases_per_day()\n      [%ActiveComplexityCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_complexity_cases_per_day :: [ActiveComplexityCasesPerDay.t()]\n  def list_active_complexity_cases_per_day,\n    do:\n      Repo.all(\n        from(active_complexity_cases_per_day in ActiveComplexityCasesPerDay,\n          order_by: active_complexity_cases_per_day.date\n        )\n      )\n\n  @spec list_active_complexity_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveComplexityCasesPerDay.t()\n        ]\n  def list_active_complexity_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(active_complexity_cases_per_day in ActiveComplexityCasesPerDay,\n          where: active_complexity_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: active_complexity_cases_per_day.date\n        )\n      )\n\n  @spec list_active_complexity_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveComplexityCasesPerDay.t()]\n  def list_active_complexity_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_complexity_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_complexity_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(active_complexity_cases_per_day in ActiveComplexityCasesPerDay,\n      where:\n        active_complexity_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            active_complexity_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or active_complexity_cases_per_day.count > 0),\n      order_by: active_complexity_cases_per_day.date\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of active_infection_place_cases_per_day.\n\n  ## Examples\n\n      iex> list_active_infection_place_cases_per_day()\n      [%ActiveInfectionPlaceCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_active_infection_place_cases_per_day :: [ActiveInfectionPlaceCasesPerDay.t()]\n  def list_active_infection_place_cases_per_day,\n    do:\n      Repo.all(\n        from(active_infection_place_cases_per_day in ActiveInfectionPlaceCasesPerDay,\n          order_by: active_infection_place_cases_per_day.date\n        )\n      )\n\n  @spec list_active_infection_place_cases_per_day(tenant :: Tenant.t()) :: [\n          ActiveInfectionPlaceCasesPerDay.t()\n        ]\n  def list_active_infection_place_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(active_infection_place_cases_per_day in ActiveInfectionPlaceCasesPerDay,\n          where: active_infection_place_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: active_infection_place_cases_per_day.date\n        )\n      )\n\n  @spec list_active_infection_place_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [ActiveInfectionPlaceCasesPerDay.t()]\n  def list_active_infection_place_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_active_infection_place_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_active_infection_place_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(active_infection_place_cases_per_day in ActiveInfectionPlaceCasesPerDay,\n      where:\n        active_infection_place_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            active_infection_place_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or active_infection_place_cases_per_day.count > 0),\n      order_by: [\n        active_infection_place_cases_per_day.date,\n        desc: active_infection_place_cases_per_day.count\n      ]\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of transmission_country_cases_per_day.\n\n  ## Examples\n\n      iex> list_transmission_country_cases_per_day()\n      [%TransmissionCountryCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_transmission_country_cases_per_day :: [TransmissionCountryCasesPerDay.t()]\n  def list_transmission_country_cases_per_day,\n    do:\n      Repo.all(\n        from(transmission_country_cases_per_day in TransmissionCountryCasesPerDay,\n          order_by: transmission_country_cases_per_day.date\n        )\n      )\n\n  @spec list_transmission_country_cases_per_day(tenant :: Tenant.t()) :: [\n          TransmissionCountryCasesPerDay.t()\n        ]\n  def list_transmission_country_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(transmission_country_cases_per_day in TransmissionCountryCasesPerDay,\n          where: transmission_country_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: transmission_country_cases_per_day.date\n        )\n      )\n\n  @spec list_transmission_country_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          include_zero_values :: boolean()\n        ) :: [TransmissionCountryCasesPerDay.t()]\n  def list_transmission_country_cases_per_day(\n        tenant,\n        from,\n        to,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_transmission_country_cases_per_day_query(tenant, from, to, include_zero_values)\n        )\n\n  defp list_transmission_country_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         include_zero_values \\\\ true\n       ) do\n    from(transmission_country_cases_per_day in TransmissionCountryCasesPerDay,\n      where:\n        transmission_country_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            transmission_country_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (^include_zero_values or transmission_country_cases_per_day.count > 0),\n      order_by: transmission_country_cases_per_day.date\n    )\n  end\n\n  @spec export(\n          type :: :active_isolation_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_isolation_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(cases_per_day in list_active_isolation_cases_per_day_query(tenant, from, to),\n          select: [cases_per_day.date, cases_per_day.count]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :cumulative_index_case_end_reasons,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:cumulative_index_case_end_reasons, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"End Reason\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_cumulative_index_case_end_reasons_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.end_reason,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :active_quarantine_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_quarantine_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(cases_per_day in list_active_quarantine_cases_per_day_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.type,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :cumulative_possible_index_case_end_reasons,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:cumulative_possible_index_case_end_reasons, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"End Reason\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_cumulative_possible_index_case_end_reasons_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.type,\n            cases_per_day.end_reason,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :new_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:new_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"Sub-Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(cases_per_day in list_new_cases_per_day_query(tenant, from, to),\n          select: [\n            cases_per_day.date,\n            cases_per_day.type,\n            cases_per_day.sub_type,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :active_hospitalization_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_hospitalization_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_active_hospitalization_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :active_complexity_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_complexity_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Complexity\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_active_complexity_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.case_complexity,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :active_infection_place_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_infection_place_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_active_infection_place_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.infection_place_type,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  @spec export(\n          type :: :transmission_country_cases_per_day,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:transmission_country_cases_per_day, tenant, from, to) do\n    [[gettext(\"Date\"), gettext(\"Country\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Repo.stream(\n        from(\n          cases_per_day in list_transmission_country_cases_per_day_query(\n            tenant,\n            from,\n            to\n          ),\n          select: [\n            cases_per_day.date,\n            cases_per_day.country,\n            cases_per_day.count\n          ]\n        )\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  # Export for only \"from\" day !\n  @spec export(\n          type :: :active_cases_per_day_and_organisation,\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: Enumerable.t()\n  def export(:active_cases_per_day_and_organisation, tenant, from, _to) do\n    [[gettext(\"Organisation\"), gettext(\"Division\"), gettext(\"Type\"), gettext(\"Count\")]]\n    |> Stream.concat(\n      Stream.map(\n        Repo.stream(\n          from(\n            cases_per_day in list_active_cases_per_day_organisation_division_kind_query(\n              tenant,\n              from\n            )\n          )\n        ),\n        fn\n          [organisation, division, nil, count] ->\n            [organisation, division, nil, count]\n\n          [organisation, division, affiliation_kind, count] ->\n            [organisation, division, Kind.translate(affiliation_kind), count]\n        end\n      )\n    )\n    |> CSV.encode(escape_formulas: true)\n  end\n\n  defp list_active_cases_per_day_organisation_division_kind_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         date\n       ),\n       do:\n         from(\n           case in Case,\n           join: phase in fragment(\"UNNEST(?)\", case.phases),\n           join: person in assoc(case, :person),\n           join: affiliation in assoc(person, :affiliations),\n           join: organisation in assoc(affiliation, :organisation),\n           left_join: division in assoc(affiliation, :division),\n           where:\n             case.tenant_uuid == ^tenant_uuid and\n               fragment(\n                 \"? BETWEEN ? AND ?\",\n                 ^date,\n                 coalesce(\n                   fragment(\"(?->>'start')::date\", phase),\n                   fragment(\"?::date\", case.inserted_at)\n                 ),\n                 coalesce(fragment(\"(?->>'end')::date\", phase), fragment(\"CURRENT_DATE\"))\n               ),\n           group_by: [\n             organisation.uuid,\n             division.uuid,\n             affiliation.kind\n           ],\n           order_by: [\n             organisation.name,\n             division.title,\n             desc: count(person.uuid)\n           ],\n           select: [\n             organisation.name,\n             division.title,\n             affiliation.kind,\n             count(person.uuid)\n           ]\n         )\n\n  @doc \"\"\"\n  Returns the list of active cases per day and organisation.\n\n  ## Examples\n\n      iex> list_active_cases_per_day_and_organisation()\n      [%ActiveCasesPerDayAndOrganisation{}, ...]\n\n  \"\"\"\n  @spec list_active_cases_per_day_and_organisation :: [ActiveCasesPerDayAndOrganisation.t()]\n  def list_active_cases_per_day_and_organisation,\n    do:\n      Repo.all(\n        from(active_cases_per_day_and_organisation in ActiveCasesPerDayAndOrganisation,\n          order_by: active_cases_per_day_and_organisation.date\n        )\n      )\n\n  @spec list_active_cases_per_day_and_organisation(tenant :: Tenant.t()) :: [\n          ActiveCasesPerDayAndOrganisation.t()\n        ]\n  def list_active_cases_per_day_and_organisation(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(active_cases_per_day_and_organisation in ActiveCasesPerDayAndOrganisation,\n          where: active_cases_per_day_and_organisation.tenant_uuid == ^tenant_uuid,\n          order_by: active_cases_per_day_and_organisation.date\n        )\n      )\n\n  @spec list_active_cases_per_day_and_organisation(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t()\n        ) :: [ActiveCasesPerDayAndOrganisation.t()]\n  def list_active_cases_per_day_and_organisation(\n        tenant,\n        from,\n        to\n      ),\n      do: Repo.all(list_active_cases_per_day_and_organisation_query(tenant, from, to))\n\n  defp list_active_cases_per_day_and_organisation_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to\n       ) do\n    from(active_cases_per_day_and_organisation in ActiveCasesPerDayAndOrganisation,\n      where:\n        active_cases_per_day_and_organisation.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            active_cases_per_day_and_organisation.date,\n            ^from,\n            ^to\n          ),\n      order_by: [\n        active_cases_per_day_and_organisation.date,\n        desc: active_cases_per_day_and_organisation.count\n      ]\n    )\n  end\n\n  @spec count_last24hours_isolation_orders(tenant :: Tenant.t()) :: integer\n  def count_last24hours_isolation_orders(%Tenant{uuid: tenant_uuid} = _tenant) do\n    Repo.one(\n      from(\n        case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"index\" and\n            fragment(\"(?->>'order_date')::date\", phase) >=\n              fragment(\"CURRENT_TIMESTAMP - INTERVAL '1 day'\"),\n        select: count(case.uuid)\n      )\n    )\n  end\n\n  @spec list_last24hours_quarantine_orders(tenant :: Tenant.t()) :: [\n          %{type: atom, count: integer}\n        ]\n  def list_last24hours_quarantine_orders(%Tenant{uuid: tenant_uuid} = _tenant) do\n    Repo.all(\n      from(\n        case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'__type__'\", phase) == \"possible_index\" and\n            fragment(\"(?->>'order_date')::date\", phase) >=\n              fragment(\"CURRENT_TIMESTAMP - INTERVAL '1 day'\"),\n        group_by: fragment(\"?->'details'->>'type'\", phase),\n        select: %{\n          type:\n            type(\n              fragment(\"(?->'details'->>'type')\", phase),\n              Hygeia.CaseContext.Case.Phase.PossibleIndex.Type\n            ),\n          count: count(case.uuid)\n        }\n      )\n    )\n  end\n\n  @spec list_last24hours_quarantine_converted_to_index(tenant :: Tenant.t()) :: [\n          %{type: atom, count: integer}\n        ]\n  def list_last24hours_quarantine_converted_to_index(%Tenant{uuid: tenant_uuid} = _tenant) do\n    Repo.all(\n      from(\n        case in Case,\n        join: phase in fragment(\"UNNEST(?)\", case.phases),\n        where:\n          case.tenant_uuid == ^tenant_uuid and\n            fragment(\"?->'details'->>'end_reason'\", phase) == \"converted_to_index\" and\n            fragment(\"(?->'details'->>'end_reason_date')::date\", phase) >=\n              fragment(\"CURRENT_TIMESTAMP - INTERVAL '1 day'\"),\n        group_by: fragment(\"?->'details'->>'type'\", phase),\n        select: %{\n          type:\n            type(\n              fragment(\"(?->'details'->>'type')\", phase),\n              Hygeia.CaseContext.Case.Phase.PossibleIndex.Type\n            ),\n          count: count(case.uuid)\n        }\n      )\n    )\n  end\n\n  @doc \"\"\"\n  Returns the list of new_registered_cases_per_day.\n\n  ## Examples\n\n      iex> list_new_registered_cases_per_day()\n      [%NewRegisteredCasesPerDay{}, ...]\n\n  \"\"\"\n  @spec list_new_registered_cases_per_day :: [NewRegisteredCasesPerDay.t()]\n  def list_new_registered_cases_per_day,\n    do:\n      Repo.all(\n        from(registered_cases_per_day in NewRegisteredCasesPerDay,\n          order_by: registered_cases_per_day.date\n        )\n      )\n\n  @spec list_new_registered_cases_per_day(tenant :: Tenant.t()) :: [\n          NewRegisteredCasesPerDay.t()\n        ]\n  def list_new_registered_cases_per_day(%Tenant{uuid: tenant_uuid} = _tenant),\n    do:\n      Repo.all(\n        from(registered_cases_per_day in NewRegisteredCasesPerDay,\n          where: registered_cases_per_day.tenant_uuid == ^tenant_uuid,\n          order_by: registered_cases_per_day.date\n        )\n      )\n\n  @spec list_new_registered_cases_per_day(\n          tenant :: Tenant.t(),\n          from :: Date.t(),\n          to :: Date.t(),\n          first_contact :: boolean(),\n          include_zero_values :: boolean()\n        ) :: [NewRegisteredCasesPerDay.t()]\n  def list_new_registered_cases_per_day(\n        tenant,\n        from,\n        to,\n        first_contact,\n        include_zero_values \\\\ true\n      ),\n      do:\n        Repo.all(\n          list_new_registered_cases_per_day_query(\n            tenant,\n            from,\n            to,\n            first_contact,\n            include_zero_values\n          )\n        )\n\n  defp list_new_registered_cases_per_day_query(\n         %Tenant{uuid: tenant_uuid} = _tenant,\n         from,\n         to,\n         first_contact,\n         include_zero_values\n       ) do\n    from(registered_cases_per_day in NewRegisteredCasesPerDay,\n      where:\n        registered_cases_per_day.tenant_uuid == ^tenant_uuid and\n          fragment(\n            \"? BETWEEN ?::date AND ?::date\",\n            registered_cases_per_day.date,\n            ^from,\n            ^to\n          ) and\n          (registered_cases_per_day.first_contact == ^first_contact or\n             (^include_zero_values and is_nil(registered_cases_per_day.first_contact))) and\n          (^include_zero_values or registered_cases_per_day.count > 0),\n      order_by: registered_cases_per_day.date\n    )\n  end\nend\n", "# credo:disable-for-this-file Credo.Check.Readability.Specs\ndefmodule Hygeia.MixProject do\n  @moduledoc false\n\n  use Mix.Project\n\n  def project do\n    [\n      app: :hygeia,\n      version: \"0.0.0-noversion\",\n      build_path: \"../../_build\",\n      config_path: \"../../config/config.exs\",\n      deps_path: \"../../deps\",\n      lockfile: \"../../mix.lock\",\n      elixir: \"~> 1.12\",\n      elixirc_paths: elixirc_paths(Mix.env()),\n      start_permanent: Mix.env() == :prod,\n      compilers: [:gettext] ++ Mix.compilers(),\n      aliases: aliases(),\n      deps: deps(),\n      build_embedded: Mix.env() == :prod or System.get_env(\"BUILD_EMBEDDED\") in [\"1\", \"true\"],\n      test_coverage: [tool: ExCoveralls],\n      preferred_cli_env: [\n        coveralls: :test,\n        \"coveralls.detail\": :test,\n        \"coveralls.html\": :test,\n        \"coveralls.json\": :test,\n        \"coveralls.post\": :test,\n        \"coveralls.xml\": :test\n      ],\n      # Injected via Config\n      xref: [\n        exclude: [\n          HygeiaWeb.SendCaseClosedEmailUrlGenerator,\n          HygeiaWeb.AutoTracingCommunicationUrlGenerator\n        ]\n      ]\n    ]\n  end\n\n  # Configuration for the OTP application.\n  #\n  # Type `mix help compile.app` for more information.\n  def application do\n    [\n      mod: {Hygeia.Application, []},\n      extra_applications: [:logger, :runtime_tools]\n    ]\n  end\n\n  # Specifies which paths to compile per environment.\n  defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]\n  defp elixirc_paths(_env), do: [\"lib\"]\n\n  # Specifies your project dependencies.\n  #\n  # Type `mix help deps` for examples and options.\n  defp deps do\n    [\n      {:cadastre, \"~> 0.2.0\"},\n      {:crontab, \"~> 1.1\"},\n      # TODO: Revert back to the released version when the following PR is\n      # merged and released:\n      # - https://github.com/beatrichartz/csv/pull/104\n      {:csv, \"~> 2.4\", github: \"jshmrtn/csv\", branch: \"formular_escaping\"},\n      {:ecto_boot_migration, \"~> 0.2\"},\n      {:ecto_enum, \"~> 1.4\"},\n      {:ecto, \"~> 3.7\"},\n      {:ecto_sql, \"~> 3.4\"},\n      {:email_checker, \"~> 0.1\"},\n      {:erlsom, \"~> 1.5\"},\n      {:excoveralls, \"~> 0.4\", runtime: false, only: [:test]},\n      {:ex_phone_number, \"~> 0.2\"},\n      {:gen_smtp, \"~> 1.0\"},\n      {:gun, \"~> 2.0.0\", hex: :grpc_gun, override: true},\n      {:highlander, \"~> 0.2\"},\n      {:human_readable_identifier_generator, \"~> 1.0\"},\n      {:hygeia_cldr, in_umbrella: true},\n      {:hygeia_cluster, in_umbrella: true},\n      {:hygeia_gettext, in_umbrella: true},\n      {:hygeia_iam, in_umbrella: true},\n      {:jason, \"~> 1.0\"},\n      {:jsone, \"~> 1.5\", override: true},\n      {:mail, \"~> 0.2\"},\n      {:mox, \"~> 1.0\", only: :test},\n      {:paginator, \"~> 1.0\"},\n      {:phoenix, \"~> 1.6\"},\n      {:phoenix_pubsub, \"~> 2.0\"},\n      {:polymorphic_embed, \"~> 1.7\"},\n      {:postgrex, \">= 0.0.0\"},\n      {:sedex, \"~> 1.0\"},\n      {:sentry, \"~> 8.0\"},\n      {:websms, \"~> 1.0.0-alpha\"},\n      {:xlsxir, \"~> 1.6.4\"},\n      {:zitadel_api, \"~> 1.0-rc\"},\n      # TODO: Remove when issue in apps/hygeia_gettext/mix.exs is solved\n      {:gettext, \"~> 0.13\", github: \"elixir-gettext/gettext\", branch: \"master\", override: true}\n    ]\n  end\n\n  # Aliases are shortcuts or tasks specific to the current project.\n  #\n  # See the documentation for `Mix` for more info on aliases.\n  defp aliases do\n    [\n      setup: [\"ecto.reset\"],\n      \"ecto.setup\":\n        case Mix.env() do\n          :test ->\n            [\"ecto.create\", \"ecto.migrate\"]\n\n          _env ->\n            [\n              \"ecto.create\",\n              \"ecto.load --skip-if-loaded --quiet\",\n              \"ecto.migrate\",\n              \"run priv/repo/seeds.exs\"\n            ]\n        end,\n      \"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"],\n      test: [\"ecto.create --quiet\", \"ecto.migrate --quiet\", \"test\"]\n    ]\n  end\nend\n", "%{\n  \"base64url\": {:hex, :base64url, \"1.0.1\", \"f8c7f2da04ca9a5d0f5f50258f055e1d699f0e8bf4cfdb30b750865368403cf6\", [:rebar3], [], \"hexpm\", \"f9b3add4731a02a9b0410398b475b33e7566a695365237a6bdee1bb447719f5c\"},\n  \"briefly\": {:hex, :briefly, \"0.3.0\", \"16e6b76d2070ebc9cbd025fa85cf5dbaf52368c4bd896fb482b5a6b95a540c2f\", [:mix], [], \"hexpm\", \"c6ebf8fc3dcd4950dd10c03e953fb4f553a8bcf0ff4c8c40d71542434cd7e046\"},\n  \"bunt\": {:hex, :bunt, \"0.2.0\", \"951c6e801e8b1d2cbe58ebbd3e616a869061ddadcc4863d0a2182541acae9a38\", [:mix], [], \"hexpm\", \"7af5c7e09fe1d40f76c8e4f9dd2be7cebd83909f31fee7cd0e9eadc567da8353\"},\n  \"cadastre\": {:hex, :cadastre, \"0.2.1\", \"1e31763f495311c176c27e2e5013ade5bcad94b2ab52e36c8838b8d8adb564ae\", [:mix], [], \"hexpm\", \"5f4a6218777ecec4aa9462ee1fd4323dc4520e3343858546967b7c9455c89137\"},\n  \"castore\": {:hex, :castore, \"0.1.11\", \"c0665858e0e1c3e8c27178e73dffea699a5b28eb72239a3b2642d208e8594914\", [:mix], [], \"hexpm\", \"91b009ba61973b532b84f7c09ce441cba7aa15cb8b006cf06c6f4bba18220081\"},\n  \"certifi\": {:hex, :certifi, \"2.8.0\", \"d4fb0a6bb20b7c9c3643e22507e42f356ac090a1dcea9ab99e27e0376d695eba\", [:rebar3], [], \"hexpm\", \"6ac7efc1c6f8600b08d625292d4bbf584e14847ce1b6b5c44d983d273e1097ea\"},\n  \"cldr_utils\": {:hex, :cldr_utils, \"2.16.0\", \"5abd1835151e264f6f9a285ab8c7419954a45eec5ca5a356dea592faa23e80b9\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: true]}, {:certifi, \"~> 2.5\", [hex: :certifi, repo: \"hexpm\", optional: true]}, {:decimal, \"~> 1.9 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3ef5dc0fdfe566a5a4b8bda726cf760ebada69c0600affc4cb02b5e8ae7f7b47\"},\n  \"coerce\": {:hex, :coerce, \"1.0.1\", \"211c27386315dc2894ac11bc1f413a0e38505d808153367bd5c6e75a4003d096\", [:mix], [], \"hexpm\", \"b44a691700f7a1a15b4b7e2ff1fa30bebd669929ac8aa43cffe9e2f8bf051cf1\"},\n  \"combine\": {:hex, :combine, \"0.10.0\", \"eff8224eeb56498a2af13011d142c5e7997a80c8f5b97c499f84c841032e429f\", [:mix], [], \"hexpm\", \"1b1dbc1790073076580d0d1d64e42eae2366583e7aecd455d1215b0d16f2451b\"},\n  \"connection\": {:hex, :connection, \"1.1.0\", \"ff2a49c4b75b6fb3e674bfc5536451607270aac754ffd1bdfe175abe4a6d7a68\", [:mix], [], \"hexpm\", \"722c1eb0a418fbe91ba7bd59a47e28008a189d47e37e0e7bb85585a016b2869c\"},\n  \"cowboy\": {:hex, :cowboy, \"2.7.0\", \"91ed100138a764355f43316b1d23d7ff6bdb0de4ea618cb5d8677c93a7a2f115\", [:rebar3], [{:cowlib, \"~> 2.8.0\", [hex: :cowlib, repo: \"hexpm\", optional: false]}, {:ranch, \"~> 1.7.1\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\", \"04fd8c6a39edc6aaa9c26123009200fc61f92a3a94f3178c527b70b767c6e605\"},\n  \"cowboy_telemetry\": {:hex, :cowboy_telemetry, \"0.3.1\", \"ebd1a1d7aff97f27c66654e78ece187abdc646992714164380d8a041eda16754\", [:rebar3], [{:cowboy, \"~> 2.7\", [hex: :cowboy, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3a6efd3366130eab84ca372cbd4a7d3c3a97bdfcfb4911233b035d117063f0af\"},\n  \"cowlib\": {:hex, :cowlib, \"2.8.0\", \"fd0ff1787db84ac415b8211573e9a30a3ebe71b5cbff7f720089972b2319c8a4\", [:rebar3], [], \"hexpm\", \"79f954a7021b302186a950a32869dbc185523d99d3e44ce430cd1f3289f41ed4\"},\n  \"credo\": {:hex, :credo, \"1.5.6\", \"e04cc0fdc236fefbb578e0c04bd01a471081616e741d386909e527ac146016c6\", [:mix], [{:bunt, \"~> 0.2.0\", [hex: :bunt, repo: \"hexpm\", optional: false]}, {:file_system, \"~> 0.2.8\", [hex: :file_system, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"4b52a3e558bd64e30de62a648518a5ea2b6e3e5d2b164ef5296244753fc7eb17\"},\n  \"crontab\": {:hex, :crontab, \"1.1.10\", \"dc9bb1f4299138d47bce38341f5dcbee0aa6c205e864fba7bc847f3b5cb48241\", [:mix], [{:ecto, \"~> 1.0 or ~> 2.0 or ~> 3.0\", [hex: :ecto, repo: \"hexpm\", optional: true]}], \"hexpm\", \"1347d889d1a0eda997990876b4894359e34bfbbd688acbb0ba28a2795ca40685\"},\n  \"csv\": {:git, \"https://github.com/jshmrtn/csv.git\", \"faef83ef956e132911c4b44891ce0d48904577c0\", [branch: \"formular_escaping\"]},\n  \"db_connection\": {:hex, :db_connection, \"2.4.0\", \"d04b1b73795dae60cead94189f1b8a51cc9e1f911c234cc23074017c43c031e5\", [:mix], [{:connection, \"~> 1.0\", [hex: :connection, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ad416c21ad9f61b3103d254a71b63696ecadb6a917b36f563921e0de00d7d7c8\"},\n  \"decimal\": {:hex, :decimal, \"2.0.0\", \"a78296e617b0f5dd4c6caf57c714431347912ffb1d0842e998e9792b5642d697\", [:mix], [], \"hexpm\", \"34666e9c55dea81013e77d9d87370fe6cb6291d1ef32f46a1600230b1d44f577\"},\n  \"dialyxir\": {:hex, :dialyxir, \"1.1.0\", \"c5aab0d6e71e5522e77beff7ba9e08f8e02bad90dfbeffae60eaf0cb47e29488\", [:mix], [{:erlex, \">= 0.2.6\", [hex: :erlex, repo: \"hexpm\", optional: false]}], \"hexpm\", \"07ea8e49c45f15264ebe6d5b93799d4dd56a44036cf42d0ad9c960bc266c0b9a\"},\n  \"earmark\": {:hex, :earmark, \"1.4.15\", \"2c7f924bf495ec1f65bd144b355d0949a05a254d0ec561740308a54946a67888\", [:mix], [{:earmark_parser, \">= 1.4.13\", [hex: :earmark_parser, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3b1209b85bc9f3586f370f7c363f6533788fb4e51db23aa79565875e7f9999ee\"},\n  \"earmark_parser\": {:hex, :earmark_parser, \"1.4.15\", \"b29e8e729f4aa4a00436580dcc2c9c5c51890613457c193cc8525c388ccb2f06\", [:mix], [], \"hexpm\", \"044523d6438ea19c1b8ec877ec221b008661d3c27e3b848f4c879f500421ca5c\"},\n  \"ecto\": {:hex, :ecto, \"3.7.1\", \"a20598862351b29f80f285b21ec5297da1181c0442687f9b8329f0445d228892\", [:mix], [{:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"d36e5b39fc479e654cffd4dbe1865d9716e4a9b6311faff799b6f90ab81b8638\"},\n  \"ecto_boot_migration\": {:hex, :ecto_boot_migration, \"0.3.0\", \"517ccb8aca5306acf49689a3e3f5beeb3cd8362d426e322d2631442c531595d3\", [:mix], [{:ecto_sql, \"~> 3.0\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}], \"hexpm\", \"3c7aed8ed08ba6d3df23d4715c1e044fa79cd8387deba8d7ba0bad13518b9ea1\"},\n  \"ecto_enum\": {:hex, :ecto_enum, \"1.4.0\", \"d14b00e04b974afc69c251632d1e49594d899067ee2b376277efd8233027aec8\", [:mix], [{:ecto, \">= 3.0.0\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:ecto_sql, \"> 3.0.0\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}, {:mariaex, \">= 0.0.0\", [hex: :mariaex, repo: \"hexpm\", optional: true]}, {:postgrex, \">= 0.0.0\", [hex: :postgrex, repo: \"hexpm\", optional: true]}], \"hexpm\", \"8fb55c087181c2b15eee406519dc22578fa60dd82c088be376d0010172764ee4\"},\n  \"ecto_psql_extras\": {:hex, :ecto_psql_extras, \"0.7.0\", \"d8aa261062e7acfaa3fcbef41f4d4fd83215a30d9eb5adc0a6e6d14f15ae3944\", [:mix], [{:ecto_sql, \"~> 3.4\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}, {:postgrex, \">= 0.15.7\", [hex: :postgrex, repo: \"hexpm\", optional: false]}, {:table_rex, \"~> 3.1.1\", [hex: :table_rex, repo: \"hexpm\", optional: false]}], \"hexpm\", \"6ae6d0635d553e7a89b641a1379b49d0b52e4d0cce2cce8cf980f5b7cda6184f\"},\n  \"ecto_sql\": {:hex, :ecto_sql, \"3.7.0\", \"2fcaad4ab0c8d76a5afbef078162806adbe709c04160aca58400d5cbbe8eeac6\", [:mix], [{:db_connection, \"~> 2.2\", [hex: :db_connection, repo: \"hexpm\", optional: false]}, {:ecto, \"~> 3.7.0\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:myxql, \"~> 0.4.0 or ~> 0.5.0\", [hex: :myxql, repo: \"hexpm\", optional: true]}, {:postgrex, \"~> 0.15.0 or ~> 1.0\", [hex: :postgrex, repo: \"hexpm\", optional: true]}, {:tds, \"~> 2.1.1\", [hex: :tds, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4.0 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"a26135dfa1d99bf87a928c464cfa25bba6535a4fe761eefa56077a4febc60f70\"},\n  \"email_checker\": {:hex, :email_checker, \"0.2.1\", \"7fe36fc7cfbbf02b37040fcafbd6a27aca56ab344bcf8138a71a9549a57b4117\", [:mix], [{:socket, \"~> 0.3.1\", [hex: :socket, repo: \"hexpm\", optional: true]}], \"hexpm\", \"4abb60a4bf67782d4cec5d41417e30dc54ff64e2fce356409914e809688403ac\"},\n  \"erlex\": {:hex, :erlex, \"0.2.6\", \"c7987d15e899c7a2f34f5420d2a2ea0d659682c06ac607572df55a43753aa12e\", [:mix], [], \"hexpm\", \"2ed2e25711feb44d52b17d2780eabf998452f6efda104877a3881c2f8c0c0c75\"},\n  \"erljwt\": {:hex, :erljwt, \"2.0.7\", \"15c76e9e17b3db2a1aa105eba0ab384ba09d5c5742376f074dff39a0cc67578c\", [:rebar3], [{:base64url, \"~> 1.0\", [hex: :base64url, repo: \"hexpm\", optional: false]}, {:jsone, \"~> 1.4\", [hex: :jsone, repo: \"hexpm\", optional: false]}], \"hexpm\", \"61266d3d3cb35b3ea341916ce73b0aefe0face260b402729ae7426eb8d5293c3\"},\n  \"erlsom\": {:hex, :erlsom, \"1.5.0\", \"c5a5cdd0ee0e8dca62bcc4b13ff08da24fdefc16ccd8b25282a2fda2ba1be24a\", [:rebar3], [], \"hexpm\", \"55a9dbf9cfa77fcfc108bd8e2c4f9f784dea228a8f4b06ea10b684944946955a\"},\n  \"ex_aws\": {:hex, :ex_aws, \"2.2.5\", \"013c5c6a1ff4ff09266b3904d3d65d8f9717edbd52f760470469af8b36c860f7\", [:mix], [{:configparser_ex, \"~> 4.0\", [hex: :configparser_ex, repo: \"hexpm\", optional: true]}, {:hackney, \"~> 1.16\", [hex: :hackney, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.1\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:jsx, \"~> 3.0\", [hex: :jsx, repo: \"hexpm\", optional: true]}, {:sweet_xml, \"~> 0.6\", [hex: :sweet_xml, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4.3\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"e8da4c3470e8e249f406013d2cc42f7f80a71c3f2dad51aba7155d028a13868b\"},\n  \"ex_aws_s3\": {:hex, :ex_aws_s3, \"2.3.0\", \"5dfe50116bad048240bae7cd9418bfe23296542ff72a01b9138113a1cd31451c\", [:mix], [{:ex_aws, \"~> 2.0\", [hex: :ex_aws, repo: \"hexpm\", optional: false]}, {:sweet_xml, \">= 0.0.0\", [hex: :sweet_xml, repo: \"hexpm\", optional: true]}], \"hexpm\", \"0b13b11478825d62d2f6e57ae763695331be06f2216468f31bb304316758b096\"},\n  \"ex_cldr\": {:hex, :ex_cldr, \"2.23.2\", \"76c51b722cefdcd1a13eb5e7c7f4da5b9acfd64ff054424a977ff6e2d6a78981\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: true]}, {:certifi, \"~> 2.5\", [hex: :certifi, repo: \"hexpm\", optional: true]}, {:cldr_utils, \"~> 2.15\", [hex: :cldr_utils, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:gettext, \"~> 0.13\", [hex: :gettext, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:nimble_parsec, \"~> 0.5 or ~> 1.0\", [hex: :nimble_parsec, repo: \"hexpm\", optional: true]}, {:plug, \"~> 1.9\", [hex: :plug, repo: \"hexpm\", optional: true]}], \"hexpm\", \"d9ce03c8d3fdc7ab751bdb2be742b6972f94adc856d51dfe5bb06a51ac96b8f4\"},\n  \"ex_cldr_calendars\": {:hex, :ex_cldr_calendars, \"1.16.0\", \"7f076c85b63b03cf2c5719b75a9c1ca1b177d6d164a94a1eaf4bfb1a5dca152a\", [:mix], [{:calendar_interval, \"~> 0.2\", [hex: :calendar_interval, repo: \"hexpm\", optional: true]}, {:earmark, \"~> 1.0\", [hex: :earmark, repo: \"hexpm\", optional: false]}, {:ex_cldr, \"~> 2.23\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:ex_cldr_units, \"~> 3.7\", [hex: :ex_cldr_units, repo: \"hexpm\", optional: true]}, {:ex_doc, \"~> 0.21\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"483d91a0fb4909efe211ae59a3620a28bf1a72d64dbf922ae940115e64f6138a\"},\n  \"ex_cldr_currencies\": {:hex, :ex_cldr_currencies, \"2.11.1\", \"a6e56209d6f98082cd197aa424333e7a0e38e79253fce9589117719728de4fef\", [:mix], [{:ex_cldr, \"~> 2.23\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"99e8eb3f48a30127bb11ab70f484c124c9fe5b11bce710c94c53939032b0c58c\"},\n  \"ex_cldr_dates_times\": {:hex, :ex_cldr_dates_times, \"2.9.4\", \"9ee780d2226f695fc80e45f61118c3feccc9ec47ef1685300b4c1a22a039111f\", [:mix], [{:calendar_interval, \"~> 0.2\", [hex: :calendar_interval, repo: \"hexpm\", optional: true]}, {:ex_cldr_calendars, \"~> 1.15\", [hex: :ex_cldr_calendars, repo: \"hexpm\", optional: false]}, {:ex_cldr_numbers, \"~> 2.19\", [hex: :ex_cldr_numbers, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"0597172df5e7bcc7d79b5405adb1ee2b06c607a0879c66c768fba055b5c81434\"},\n  \"ex_cldr_languages\": {:hex, :ex_cldr_languages, \"0.2.3\", \"3863f0e9f38c13b8822b5d998a0bc12941386f25fc6f6011313428784de40c44\", [:mix], [{:ex_cldr, \"~> 2.2 and >= 2.2.1\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"af0b10ff3d405190289b3defa130b07add5b24f8ffa3466ec07bc0575d97587e\"},\n  \"ex_cldr_lists\": {:hex, :ex_cldr_lists, \"2.8.0\", \"373d8574d28590fdbc475436cc1590d37200867b4116f69a51e6e57cb0e62ee6\", [:mix], [{:ex_cldr_numbers, \"~> 2.17\", [hex: :ex_cldr_numbers, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"455406d488452d6eb0b044e23a918e015418787ffc87791d81e7320742269483\"},\n  \"ex_cldr_numbers\": {:hex, :ex_cldr_numbers, \"2.22.1\", \"c710abb30a89875a5e2aff5f8a5e073ffad8689c6e84034729f10c51d39c4dcf\", [:mix], [{:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:ex_cldr, \"~> 2.23\", [hex: :ex_cldr, repo: \"hexpm\", optional: false]}, {:ex_cldr_currencies, \"~> 2.11\", [hex: :ex_cldr_currencies, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"2015161a54f583eede00f18cdf43ec2b27aecf53e22486f6158d787da1f02bb9\"},\n  \"ex_cldr_units\": {:hex, :ex_cldr_units, \"3.7.1\", \"89241de864e4673fe352d15d5727d89c63c10ce9c271b827c07452719f5e2a16\", [:mix], [{:cldr_utils, \"~> 2.16\", [hex: :cldr_utils, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}, {:ex_cldr_lists, \"~> 2.8\", [hex: :ex_cldr_lists, repo: \"hexpm\", optional: false]}, {:ex_cldr_numbers, \"~> 2.19\", [hex: :ex_cldr_numbers, repo: \"hexpm\", optional: false]}, {:ex_doc, \"~> 0.18\", [hex: :ex_doc, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:ratio, \"~> 2.4\", [hex: :ratio, repo: \"hexpm\", optional: false]}], \"hexpm\", \"b9595bea124b6355632784bc8fb4a924c6456f1934a9a80359622e52b9bcdeb6\"},\n  \"ex_doc\": {:hex, :ex_doc, \"0.25.3\", \"3edf6a0d70a39d2eafde030b8895501b1c93692effcbd21347296c18e47618ce\", [:mix], [{:earmark_parser, \"~> 1.4.0\", [hex: :earmark_parser, repo: \"hexpm\", optional: false]}, {:makeup_elixir, \"~> 0.14\", [hex: :makeup_elixir, repo: \"hexpm\", optional: false]}, {:makeup_erlang, \"~> 0.1\", [hex: :makeup_erlang, repo: \"hexpm\", optional: false]}], \"hexpm\", \"9ebebc2169ec732a38e9e779fd0418c9189b3ca93f4a676c961be6c1527913f5\"},\n  \"ex_phone_number\": {:hex, :ex_phone_number, \"0.2.1\", \"c332d5119b0ffebe3f3e4c1d5264d544b972d5d350230d7b5b1586bbfaf1036e\", [:mix], [{:sweet_xml, \"~> 0.6.5\", [hex: :sweet_xml, repo: \"hexpm\", optional: false]}], \"hexpm\", \"988acbe6ffb70ee33164ad5c185dc6767028369280dcbb4ceda4bc66373b2b10\"},\n  \"excoveralls\": {:hex, :excoveralls, \"0.14.3\", \"d17dc249ad32e469afd2bc656b58e810109d4367ec6bd467bed57a84dc4a3e02\", [:mix], [{:hackney, \"~> 1.16\", [hex: :hackney, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"b5aecdfdcf48e9d5e1c210841589b30981a5e7e66055cb8691a6f90b1601c108\"},\n  \"file_system\": {:hex, :file_system, \"0.2.10\", \"fb082005a9cd1711c05b5248710f8826b02d7d1784e7c3451f9c1231d4fc162d\", [:mix], [], \"hexpm\", \"41195edbfb562a593726eda3b3e8b103a309b733ad25f3d642ba49696bf715dc\"},\n  \"floki\": {:hex, :floki, \"0.31.0\", \"f05ee8a8e6a3ced4e62beeb2c79a63bc8e12ab98fbaaf6e6a3d9b76b1278e23f\", [:mix], [{:html_entities, \"~> 0.5.0\", [hex: :html_entities, repo: \"hexpm\", optional: false]}], \"hexpm\", \"b05afa372f5c345a5bf240ac25ea1f0f3d5fcfd7490ac0beeb4a203f9444891e\"},\n  \"gen_smtp\": {:hex, :gen_smtp, \"1.1.1\", \"bf9303c31735100631b1d708d629e4c65944319d1143b5c9952054f4a1311d85\", [:rebar3], [{:hut, \"1.3.0\", [hex: :hut, repo: \"hexpm\", optional: false]}, {:ranch, \">= 1.7.0\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\", \"51bc50cc017efd4a4248cbc39ea30fb60efa7d4a49688986fafad84434ff9ab7\"},\n  \"gettext\": {:git, \"https://github.com/elixir-gettext/gettext.git\", \"becf0585b12762bddb6dd04a9f0a307c8768fa1a\", [branch: \"master\"]},\n  \"google_protos\": {:hex, :google_protos, \"0.1.0\", \"c6b9e12092d17571b093d4156d004494ca143b65dbbcbfc3ffff463ea03467c0\", [:mix], [{:protobuf, \"~> 0.5\", [hex: :protobuf, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ff5564525f89d2638a4cfa9fb4d31e9ee9d9d7cb937b3e8a95f558440c039e1b\"},\n  \"grpc\": {:hex, :grpc, \"0.5.0-beta.1\", \"7d43f52e138fe261f5b4981f1ada515dfc2e1bfa9dc92c7022e8f41e7e49b571\", [:mix], [{:cowboy, \"~> 2.7.0\", [hex: :cowboy, repo: \"hexpm\", optional: false]}, {:gun, \"~> 2.0.0\", [hex: :grpc_gun, repo: \"hexpm\", optional: false]}, {:protobuf, \"~> 0.5\", [hex: :protobuf, repo: \"hexpm\", optional: false]}], \"hexpm\", \"fbbf8872935c295b7575435fe4128372c23c6ded89c2ef8058af3c6167bb3f65\"},\n  \"gun\": {:hex, :grpc_gun, \"2.0.0\", \"f99678a2ab975e74372a756c86ec30a8384d3ac8a8b86c7ed6243ef4e61d2729\", [:rebar3], [{:cowlib, \"~> 2.8.0\", [hex: :cowlib, repo: \"hexpm\", optional: false]}], \"hexpm\", \"03dbbca1a9c604a0267a40ea1d69986225091acb822de0b2dbea21d5815e410b\"},\n  \"hackney\": {:hex, :hackney, \"1.18.0\", \"c4443d960bb9fba6d01161d01cd81173089686717d9490e5d3606644c48d121f\", [:rebar3], [{:certifi, \"~>2.8.0\", [hex: :certifi, repo: \"hexpm\", optional: false]}, {:idna, \"~>6.1.0\", [hex: :idna, repo: \"hexpm\", optional: false]}, {:metrics, \"~>1.0.0\", [hex: :metrics, repo: \"hexpm\", optional: false]}, {:mimerl, \"~>1.1\", [hex: :mimerl, repo: \"hexpm\", optional: false]}, {:parse_trans, \"3.3.1\", [hex: :parse_trans, repo: \"hexpm\", optional: false]}, {:ssl_verify_fun, \"~>1.1.0\", [hex: :ssl_verify_fun, repo: \"hexpm\", optional: false]}, {:unicode_util_compat, \"~>0.7.0\", [hex: :unicode_util_compat, repo: \"hexpm\", optional: false]}], \"hexpm\", \"9afcda620704d720db8c6a3123e9848d09c87586dc1c10479c42627b905b5c5e\"},\n  \"highlander\": {:hex, :highlander, \"0.2.1\", \"e59b459f857e89daf73f2598bf2b2c0479a435481e6101ea389fd3625919b052\", [:mix], [], \"hexpm\", \"5ba19a18358803d82a923511acec8ee85fac30731c5ca056f2f934bc3d3afd9a\"},\n  \"html_entities\": {:hex, :html_entities, \"0.5.2\", \"9e47e70598da7de2a9ff6af8758399251db6dbb7eebe2b013f2bbd2515895c3c\", [:mix], [], \"hexpm\", \"c53ba390403485615623b9531e97696f076ed415e8d8058b1dbaa28181f4fdcc\"},\n  \"human_readable_identifier_generator\": {:hex, :human_readable_identifier_generator, \"1.0.0\", \"0e58c50c60055af05118da93d948b03fbc698425618774a9d1b0532c29b95d73\", [:mix], [], \"hexpm\", \"3669c913a2bdc0342385deb832cc06852af897d80e14db1d50b163fe959e8435\"},\n  \"hut\": {:hex, :hut, \"1.3.0\", \"71f2f054e657c03f959cf1acc43f436ea87580696528ca2a55c8afb1b06c85e7\", [:\"erlang.mk\", :rebar, :rebar3], [], \"hexpm\", \"7e15d28555d8a1f2b5a3a931ec120af0753e4853a4c66053db354f35bf9ab563\"},\n  \"idna\": {:hex, :idna, \"6.1.1\", \"8a63070e9f7d0c62eb9d9fcb360a7de382448200fbbd1b106cc96d3d8099df8d\", [:rebar3], [{:unicode_util_compat, \"~>0.7.0\", [hex: :unicode_util_compat, repo: \"hexpm\", optional: false]}], \"hexpm\", \"92376eb7894412ed19ac475e4a86f7b413c1b9fbb5bd16dccd57934157944cea\"},\n  \"jason\": {:hex, :jason, \"1.2.2\", \"ba43e3f2709fd1aa1dce90aaabfd039d000469c05c56f0b8e31978e03fa39052\", [:mix], [{:decimal, \"~> 1.0 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}], \"hexpm\", \"18a228f5f0058ee183f29f9eae0805c6e59d61c3b006760668d8d18ff0d12179\"},\n  \"jose\": {:hex, :jose, \"1.11.2\", \"f4c018ccf4fdce22c71e44d471f15f723cb3efab5d909ab2ba202b5bf35557b3\", [:mix, :rebar3], [], \"hexpm\", \"98143fbc48d55f3a18daba82d34fe48959d44538e9697c08f34200fa5f0947d2\"},\n  \"jsone\": {:hex, :jsone, \"1.6.1\", \"7ea1098fe004c4127320fe0e3cf6a951b01f82039feaa56c322dc7e34dd59762\", [:rebar3], [], \"hexpm\", \"a6c1df6081df742068d2ed747a4fe8a7740c56421b53e02bc9d4907dd3502922\"},\n  \"libcluster\": {:hex, :libcluster, \"3.3.0\", \"f7d45ff56d88e9fb4c30aee662480cbab69ebc0e7f7da4ad8d01b1e4f7492da8\", [:mix], [{:jason, \"~> 1.1\", [hex: :jason, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ecdcdc88334ec8eb18b10a13a1d5f22a3319a970b5b1e66cfe71c7719a4ab6cc\"},\n  \"mail\": {:hex, :mail, \"0.2.3\", \"2c6bb5f8a5f74845fa50ecd0fb45ea16b164026f285f45104f1c4c078cd616d4\", [:mix], [], \"hexpm\", \"932b398fa9c69fdf290d7ff63175826e0f1e24414d5b0763bb00a2acfc6c6bf5\"},\n  \"makeup\": {:hex, :makeup, \"1.0.5\", \"d5a830bc42c9800ce07dd97fa94669dfb93d3bf5fcf6ea7a0c67b2e0e4a7f26c\", [:mix], [{:nimble_parsec, \"~> 0.5 or ~> 1.0\", [hex: :nimble_parsec, repo: \"hexpm\", optional: false]}], \"hexpm\", \"cfa158c02d3f5c0c665d0af11512fed3fba0144cf1aadee0f2ce17747fba2ca9\"},\n  \"makeup_elixir\": {:hex, :makeup_elixir, \"0.15.1\", \"b5888c880d17d1cc3e598f05cdb5b5a91b7b17ac4eaf5f297cb697663a1094dd\", [:mix], [{:makeup, \"~> 1.0\", [hex: :makeup, repo: \"hexpm\", optional: false]}, {:nimble_parsec, \"~> 1.1\", [hex: :nimble_parsec, repo: \"hexpm\", optional: false]}], \"hexpm\", \"db68c173234b07ab2a07f645a5acdc117b9f99d69ebf521821d89690ae6c6ec8\"},\n  \"makeup_erlang\": {:hex, :makeup_erlang, \"0.1.1\", \"3fcb7f09eb9d98dc4d208f49cc955a34218fc41ff6b84df7c75b3e6e533cc65f\", [:mix], [{:makeup, \"~> 1.0\", [hex: :makeup, repo: \"hexpm\", optional: false]}], \"hexpm\", \"174d0809e98a4ef0b3309256cbf97101c6ec01c4ab0b23e926a9e17df2077cbb\"},\n  \"metrics\": {:hex, :metrics, \"1.0.1\", \"25f094dea2cda98213cecc3aeff09e940299d950904393b2a29d191c346a8486\", [:rebar3], [], \"hexpm\", \"69b09adddc4f74a40716ae54d140f93beb0fb8978d8636eaded0c31b6f099f16\"},\n  \"mime\": {:hex, :mime, \"1.6.0\", \"dabde576a497cef4bbdd60aceee8160e02a6c89250d6c0b29e56c0dfb00db3d2\", [:mix], [], \"hexpm\", \"31a1a8613f8321143dde1dafc36006a17d28d02bdfecb9e95a880fa7aabd19a7\"},\n  \"mimerl\": {:hex, :mimerl, \"1.2.0\", \"67e2d3f571088d5cfd3e550c383094b47159f3eee8ffa08e64106cdf5e981be3\", [:rebar3], [], \"hexpm\", \"f278585650aa581986264638ebf698f8bb19df297f66ad91b18910dfc6e19323\"},\n  \"mint\": {:hex, :mint, \"1.4.0\", \"cd7d2451b201fc8e4a8fd86257fb3878d9e3752899eb67b0c5b25b180bde1212\", [:mix], [{:castore, \"~> 0.1.0\", [hex: :castore, repo: \"hexpm\", optional: true]}], \"hexpm\", \"10a99e144b815cbf8522dccbc8199d15802440fc7a64d67b6853adb6fa170217\"},\n  \"mox\": {:hex, :mox, \"1.0.0\", \"4b3c7005173f47ff30641ba044eb0fe67287743eec9bd9545e37f3002b0a9f8b\", [:mix], [], \"hexpm\", \"201b0a20b7abdaaab083e9cf97884950f8a30a1350a1da403b3145e213c6f4df\"},\n  \"nebulex\": {:hex, :nebulex, \"2.1.1\", \"ae7fe6791b03b00caeaa1a63c80de061903617187c3635cbf016a5b78b0459c5\", [:mix], [{:decorator, \"~> 1.4\", [hex: :decorator, repo: \"hexpm\", optional: true]}, {:shards, \"~> 1.0\", [hex: :shards, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: true]}], \"hexpm\", \"a8f803e8fd0fc653fe10e5ef72c78592b0f8cc17980d02d6dce0b93047569624\"},\n  \"nimble_parsec\": {:hex, :nimble_parsec, \"1.1.0\", \"3a6fca1550363552e54c216debb6a9e95bd8d32348938e13de5eda962c0d7f89\", [:mix], [], \"hexpm\", \"08eb32d66b706e913ff748f11694b17981c0b04a33ef470e33e11b3d3ac8f54b\"},\n  \"numbers\": {:hex, :numbers, \"5.2.4\", \"f123d5bb7f6acc366f8f445e10a32bd403c8469bdbce8ce049e1f0972b607080\", [:mix], [{:coerce, \"~> 1.0\", [hex: :coerce, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.9 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}], \"hexpm\", \"eeccf5c61d5f4922198395bf87a465b6f980b8b862dd22d28198c5e6fab38582\"},\n  \"oidcc\": {:hex, :oidcc, \"2.0.0-alpha.1\", \"e2847841bc748c1a1f5a8a8c57541effe8dcd4268e91bc0740b241405a2dfd45\", [:rebar3], [{:erljwt, \"~> 2.0.7\", [hex: :erljwt, repo: \"hexpm\", optional: false]}, {:hackney, \"~> 1.18\", [hex: :hackney, repo: \"hexpm\", optional: false]}], \"hexpm\", \"69e1aa464978b658ee0d2b52e5f3d7c74f313aa858caf3c3f3076cf12a6191ce\"},\n  \"openapi_compiler\": {:hex, :openapi_compiler, \"1.0.0-beta.13\", \"e2f4af1dd210201202232e0085c8f3b64b5064c06557cc1cdee4784872c71430\", [:mix], [{:jason, \"~> 1.2\", [hex: :jason, repo: \"hexpm\", optional: false]}, {:tesla, \"~> 1.3\", [hex: :tesla, repo: \"hexpm\", optional: false]}, {:uri_template, \"~> 1.2\", [hex: :uri_template, repo: \"hexpm\", optional: false]}, {:yamerl, \"~> 0.7\", [hex: :yamerl, repo: \"hexpm\", optional: false]}], \"hexpm\", \"f67c01168c9842a68a5d4514fe226a294df707bac03fc779cd61f242c3b097d1\"},\n  \"paginator\": {:hex, :paginator, \"1.0.4\", \"471e8e59e7a08541c5b7d2ea7166308c8e05ceb412fb444f3bdf320f5d793260\", [:mix], [{:ecto, \"~> 3.0\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:ecto_sql, \"~> 3.0\", [hex: :ecto_sql, repo: \"hexpm\", optional: false]}, {:plug_crypto, \"~> 1.2.0\", [hex: :plug_crypto, repo: \"hexpm\", optional: false]}, {:postgrex, \"~> 0.13\", [hex: :postgrex, repo: \"hexpm\", optional: true]}], \"hexpm\", \"9d79d21c0192d8d1fc562e5c99b5ebf7e0bb443c671e256b41fd709170730b91\"},\n  \"parallel_stream\": {:hex, :parallel_stream, \"1.0.6\", \"b967be2b23f0f6787fab7ed681b4c45a215a81481fb62b01a5b750fa8f30f76c\", [:mix], [], \"hexpm\", \"639b2e8749e11b87b9eb42f2ad325d161c170b39b288ac8d04c4f31f8f0823eb\"},\n  \"parse_trans\": {:hex, :parse_trans, \"3.3.1\", \"16328ab840cc09919bd10dab29e431da3af9e9e7e7e6f0089dd5a2d2820011d8\", [:rebar3], [], \"hexpm\", \"07cd9577885f56362d414e8c4c4e6bdf10d43a8767abb92d24cbe8b24c54888b\"},\n  \"pdf_generator\": {:hex, :pdf_generator, \"0.6.2\", \"601f145a0db0dcd7b8c35e1698038f78f18fc42eb3bd2001f826a3a239205f0e\", [:mix], [], \"hexpm\", \"82af2debaae156834b14dc0727cd8c3ded70ed4a2a909107d514bf28f5d1fc35\"},\n  \"phoenix\": {:hex, :phoenix, \"1.6.0\", \"7b85023f7ddef9a5c70909a51cc37c8b868b474d853f90f4280efd26b0e7cce5\", [:mix], [{:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:phoenix_pubsub, \"~> 2.0\", [hex: :phoenix_pubsub, repo: \"hexpm\", optional: false]}, {:phoenix_view, \"~> 1.0\", [hex: :phoenix_view, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.10\", [hex: :plug, repo: \"hexpm\", optional: false]}, {:plug_cowboy, \"~> 2.2\", [hex: :plug_cowboy, repo: \"hexpm\", optional: true]}, {:plug_crypto, \"~> 1.2\", [hex: :plug_crypto, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"52ffdd31f2daeb399b2e1eb57d468f99a1ad6eee5d8ea19d2353492f06c9fc96\"},\n  \"phoenix_active_link\": {:git, \"https://github.com/jshmrtn/phoenix-active-link.git\", \"b76370d61b351b0255ea73bbf4eaee1a1fb8f0b0\", [branch: \"phoenix_html_v3\"]},\n  \"phoenix_ecto\": {:hex, :phoenix_ecto, \"4.4.0\", \"0672ed4e4808b3fbed494dded89958e22fb882de47a97634c0b13e7b0b5f7720\", [:mix], [{:ecto, \"~> 3.3\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:phoenix_html, \"~> 2.14.2 or ~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: true]}, {:plug, \"~> 1.9\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"09864e558ed31ee00bd48fcc1d4fc58ae9678c9e81649075431e69dbabb43cc1\"},\n  \"phoenix_html\": {:hex, :phoenix_html, \"3.0.4\", \"232d41884fe6a9c42d09f48397c175cd6f0d443aaa34c7424da47604201df2e1\", [:mix], [{:plug, \"~> 1.5\", [hex: :plug, repo: \"hexpm\", optional: true]}], \"hexpm\", \"ce17fd3cf815b2ed874114073e743507704b1f5288bb03c304a77458485efc8b\"},\n  \"phoenix_live_dashboard\": {:hex, :phoenix_live_dashboard, \"0.5.2\", \"b3b863ba9da3c9bd0b18fc32e96e8e5e25faf6a5f62db1dd91029835ea4cc90f\", [:mix], [{:ecto, \"~> 3.6.2 or ~> 3.7\", [hex: :ecto, repo: \"hexpm\", optional: true]}, {:ecto_psql_extras, \"~> 0.7\", [hex: :ecto_psql_extras, repo: \"hexpm\", optional: true]}, {:phoenix_live_view, \"~> 0.16.0\", [hex: :phoenix_live_view, repo: \"hexpm\", optional: false]}, {:telemetry_metrics, \"~> 0.6.0\", [hex: :telemetry_metrics, repo: \"hexpm\", optional: false]}], \"hexpm\", \"6d7124f36ee6c74be334386b8b5a1eb27223c77f86f4167de132b9358036f199\"},\n  \"phoenix_live_reload\": {:hex, :phoenix_live_reload, \"1.3.3\", \"3a53772a6118d5679bf50fc1670505a290e32a1d195df9e069d8c53ab040c054\", [:mix], [{:file_system, \"~> 0.2.1 or ~> 0.3\", [hex: :file_system, repo: \"hexpm\", optional: false]}, {:phoenix, \"~> 1.4\", [hex: :phoenix, repo: \"hexpm\", optional: false]}], \"hexpm\", \"766796676e5f558dbae5d1bdb066849673e956005e3730dfd5affd7a6da4abac\"},\n  \"phoenix_live_view\": {:hex, :phoenix_live_view, \"0.16.4\", \"5692edd0bac247a9a816eee7394e32e7a764959c7d0cf9190662fc8b0cd24c97\", [:mix], [{:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:phoenix, \"~> 1.5.9 or ~> 1.6.0\", [hex: :phoenix, repo: \"hexpm\", optional: false]}, {:phoenix_html, \"~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4.2 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"754ba49aa2e8601afd4f151492c93eb72df69b0b9856bab17711b8397e43bba0\"},\n  \"phoenix_pubsub\": {:hex, :phoenix_pubsub, \"2.0.0\", \"a1ae76717bb168cdeb10ec9d92d1480fec99e3080f011402c0a2d68d47395ffb\", [:mix], [], \"hexpm\", \"c52d948c4f261577b9c6fa804be91884b381a7f8f18450c5045975435350f771\"},\n  \"phoenix_view\": {:hex, :phoenix_view, \"1.0.0\", \"fea71ecaaed71178b26dd65c401607de5ec22e2e9ef141389c721b3f3d4d8011\", [:mix], [{:phoenix_html, \"~> 2.14.2 or ~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: true]}], \"hexpm\", \"82be3e2516f5633220246e2e58181282c71640dab7afc04f70ad94253025db0c\"},\n  \"plug\": {:hex, :plug, \"1.12.1\", \"645678c800601d8d9f27ad1aebba1fdb9ce5b2623ddb961a074da0b96c35187d\", [:mix], [{:mime, \"~> 1.0 or ~> 2.0\", [hex: :mime, repo: \"hexpm\", optional: false]}, {:plug_crypto, \"~> 1.1.1 or ~> 1.2\", [hex: :plug_crypto, repo: \"hexpm\", optional: false]}, {:telemetry, \"~> 0.4.3 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"d57e799a777bc20494b784966dc5fbda91eb4a09f571f76545b72a634ce0d30b\"},\n  \"plug_checkup\": {:git, \"https://github.com/jshmrtn/plug_checkup.git\", \"93d41c4763cf03d135b654be586dc652a0db815d\", [branch: \"check_query_selector\"]},\n  \"plug_content_security_policy\": {:hex, :plug_content_security_policy, \"0.2.1\", \"0a19c76307ad000b3757739c14b34b83ecccf7d0a3472e64e14797a20b62939b\", [:mix], [{:plug, \"~> 1.3\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ceea10050671c0387c64526e2cb337ee08e12705c737eaed80439266df5b2e29\"},\n  \"plug_cowboy\": {:hex, :plug_cowboy, \"2.5.2\", \"62894ccd601cf9597e2c23911ff12798a8a18d237e9739f58a6b04e4988899fe\", [:mix], [{:cowboy, \"~> 2.7\", [hex: :cowboy, repo: \"hexpm\", optional: false]}, {:cowboy_telemetry, \"~> 0.3\", [hex: :cowboy_telemetry, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.7\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ea6e87f774c8608d60c8d34022a7d073bd7680a0a013f049fc62bf35efea1044\"},\n  \"plug_crypto\": {:hex, :plug_crypto, \"1.2.2\", \"05654514ac717ff3a1843204b424477d9e60c143406aa94daf2274fdd280794d\", [:mix], [], \"hexpm\", \"87631c7ad914a5a445f0a3809f99b079113ae4ed4b867348dd9eec288cecb6db\"},\n  \"plug_dynamic\": {:hex, :plug_dynamic, \"1.0.0\", \"aecc1a6c19bb4a4d3ceb35ae85999e9ec77cf50eeead754607bc657d47478b32\", [:mix], [{:plug, \"~> 1.6\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"403590330db12255755e0ce6397aaf05b000f255cfe5ea8edf70dc9d4413b99c\"},\n  \"polymorphic_embed\": {:hex, :polymorphic_embed, \"1.7.2\", \"1b76c9a88b2d542a4f35a4665e5e123aa9339fb2885b7ef33d7c1126c38e8764\", [:mix], [{:ecto, \"~> 3.6\", [hex: :ecto, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.2\", [hex: :jason, repo: \"hexpm\", optional: false]}, {:phoenix_html, \"~> 2.14 or ~> 3.0\", [hex: :phoenix_html, repo: \"hexpm\", optional: true]}], \"hexpm\", \"a495da6b55ea8dc86b069e96b640835cf243fe42d38687d317a7334b993a02f5\"},\n  \"postgrex\": {:hex, :postgrex, \"0.15.11\", \"50abbb50f33d22d79af402e549b9a566ba4f0451b4f5fd39b72d9bbd49743d24\", [:mix], [{:connection, \"~> 1.0\", [hex: :connection, repo: \"hexpm\", optional: false]}, {:db_connection, \"~> 2.1\", [hex: :db_connection, repo: \"hexpm\", optional: false]}, {:decimal, \"~> 1.5 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: false]}, {:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: true]}], \"hexpm\", \"6f0e5c3ea10f97468f5ff852277cb207f068399eb68b0c06c142ef68a4e82952\"},\n  \"protobuf\": {:hex, :protobuf, \"0.7.1\", \"7d1b9f7d9ecb32eccd96b0c58572de4d1c09e9e3bc414e4cb15c2dce7013f195\", [:mix], [], \"hexpm\", \"6eff7a5287963719521c82e5d5b4583fd1d7cdd89ad129f0ea7d503a50a4d13f\"},\n  \"ranch\": {:hex, :ranch, \"1.7.1\", \"6b1fab51b49196860b733a49c07604465a47bdb78aa10c1c16a3d199f7f8c881\", [:rebar3], [], \"hexpm\", \"451d8527787df716d99dc36162fca05934915db0b6141bbdac2ea8d3c7afc7d7\"},\n  \"ratio\": {:hex, :ratio, \"2.4.2\", \"c8518f3536d49b1b00d88dd20d49f8b11abb7819638093314a6348139f14f9f9\", [:mix], [{:decimal, \"~> 1.6 or ~> 2.0\", [hex: :decimal, repo: \"hexpm\", optional: true]}, {:numbers, \"~> 5.2.0\", [hex: :numbers, repo: \"hexpm\", optional: false]}], \"hexpm\", \"441ef6f73172a3503de65ccf1769030997b0d533b1039422f1e5e0e0b4cbf89e\"},\n  \"remote_ip\": {:hex, :remote_ip, \"1.0.0\", \"3d7fb45204a5704443f480cee9515e464997f52c35e0a60b6ece1f81484067ae\", [:mix], [{:combine, \"~> 0.10\", [hex: :combine, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.10\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\", \"9e9fcad4e50c43b5234bb6a9629ed6ab223f3ed07147bd35470e4ee5c8caf907\"},\n  \"sedex\": {:hex, :sedex, \"1.0.3\", \"c310bfe065a141b25b47ee1872acc94b79d3223dcd06dd2f714fb6064424482e\", [:mix], [{:erlsom, \"~> 1.5\", [hex: :erlsom, repo: \"hexpm\", optional: false]}, {:ex_aws, \"~> 2.1\", [hex: :ex_aws, repo: \"hexpm\", optional: false]}, {:ex_aws_s3, \"~> 2.0\", [hex: :ex_aws_s3, repo: \"hexpm\", optional: false]}, {:jose, \"~> 1.11\", [hex: :jose, repo: \"hexpm\", optional: false]}, {:sweet_xml, \"~> 0.6\", [hex: :sweet_xml, repo: \"hexpm\", optional: false]}], \"hexpm\", \"45e9a4fc942f055a6cf8684032e96324d0b45aabab7b4c12371adfdfb5eb54f2\"},\n  \"sentry\": {:hex, :sentry, \"8.0.5\", \"5ca922b9238a50c7258b52f47364b2d545beda5e436c7a43965b34577f1ef61f\", [:mix], [{:hackney, \"~> 1.8\", [hex: :hackney, repo: \"hexpm\", optional: true]}, {:jason, \"~> 1.1\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:plug, \"~> 1.6\", [hex: :plug, repo: \"hexpm\", optional: true]}, {:plug_cowboy, \"~> 2.3\", [hex: :plug_cowboy, repo: \"hexpm\", optional: true]}], \"hexpm\", \"4972839fdbf52e886d7b3e694c8adf421f764f2fa79036b88fb4742049bd4b7c\"},\n  \"shards\": {:hex, :shards, \"1.0.1\", \"1bdbbf047db27f3c3eb800a829d4a47062c84d5543cbfebcfc4c14d038bf9220\", [:make, :rebar3], [], \"hexpm\", \"2c57788afbf053c4024366772892beee89b8b72e884e764fb0a075dfa7442041\"},\n  \"ssl_verify_fun\": {:hex, :ssl_verify_fun, \"1.1.6\", \"cf344f5692c82d2cd7554f5ec8fd961548d4fd09e7d22f5b62482e5aeaebd4b0\", [:make, :mix, :rebar3], [], \"hexpm\", \"bdb0d2471f453c88ff3908e7686f86f9be327d065cc1ec16fa4540197ea04680\"},\n  \"surface\": {:hex, :surface, \"0.5.1\", \"2aa593d8ba5dde584e288f697ec8318352f2ff2037ad6d195788c702f104bff2\", [:mix], [{:jason, \"~> 1.0\", [hex: :jason, repo: \"hexpm\", optional: false]}, {:phoenix_live_view, \"~> 0.15\", [hex: :phoenix_live_view, repo: \"hexpm\", optional: false]}], \"hexpm\", \"a853bfe3479e1f711c84d69d988f85612bd2847dc18ada80be951af40dbe136c\"},\n  \"surface_formatter\": {:hex, :surface_formatter, \"0.5.4\", \"ce3332e2516615795d10bcf8fb10c765128ff9ccb0fa0e21aa4f384a58498d52\", [:mix], [{:surface, \"~> 0.5.0\", [hex: :surface, repo: \"hexpm\", optional: false]}], \"hexpm\", \"ea1a5666e4abf1a6c61048fb9a64040ce59865cf33002ca08d2011b6d700feb4\"},\n  \"sweet_xml\": {:hex, :sweet_xml, \"0.6.6\", \"fc3e91ec5dd7c787b6195757fbcf0abc670cee1e4172687b45183032221b66b8\", [:mix], [], \"hexpm\", \"2e1ec458f892ffa81f9f8386e3f35a1af6db7a7a37748a64478f13163a1f3573\"},\n  \"table_rex\": {:hex, :table_rex, \"3.1.1\", \"0c67164d1714b5e806d5067c1e96ff098ba7ae79413cc075973e17c38a587caa\", [:mix], [], \"hexpm\", \"678a23aba4d670419c23c17790f9dcd635a4a89022040df7d5d772cb21012490\"},\n  \"telemetry\": {:hex, :telemetry, \"0.4.3\", \"a06428a514bdbc63293cd9a6263aad00ddeb66f608163bdec7c8995784080818\", [:rebar3], [], \"hexpm\", \"eb72b8365ffda5bed68a620d1da88525e326cb82a75ee61354fc24b844768041\"},\n  \"telemetry_metrics\": {:hex, :telemetry_metrics, \"0.6.1\", \"315d9163a1d4660aedc3fee73f33f1d355dcc76c5c3ab3d59e76e3edf80eef1f\", [:mix], [{:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"7be9e0871c41732c233be71e4be11b96e56177bf15dde64a8ac9ce72ac9834c6\"},\n  \"telemetry_metrics_prometheus\": {:hex, :telemetry_metrics_prometheus, \"1.1.0\", \"1cc23e932c1ef9aa3b91db257ead31ea58d53229d407e059b29bb962c1505a13\", [:mix], [{:plug_cowboy, \"~> 2.1\", [hex: :plug_cowboy, repo: \"hexpm\", optional: false]}, {:telemetry_metrics_prometheus_core, \"~> 1.0\", [hex: :telemetry_metrics_prometheus_core, repo: \"hexpm\", optional: false]}], \"hexpm\", \"d43b3659b3244da44fe0275b717701542365d4519b79d9ce895b9719c1ce4d26\"},\n  \"telemetry_metrics_prometheus_core\": {:hex, :telemetry_metrics_prometheus_core, \"1.0.1\", \"cebf3c8892f5dc40eb057375e5c1c2077c155ed46654d5af35a2ad48a3f48749\", [:mix], [{:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: false]}, {:telemetry_metrics, \"~> 0.6\", [hex: :telemetry_metrics, repo: \"hexpm\", optional: false]}], \"hexpm\", \"112a9d5a6facf34fb0dda8426c18432ffb9e8abe38f394f3417cb589ecaeb674\"},\n  \"telemetry_poller\": {:hex, :telemetry_poller, \"0.5.1\", \"21071cc2e536810bac5628b935521ff3e28f0303e770951158c73eaaa01e962a\", [:rebar3], [{:telemetry, \"~> 0.4\", [hex: :telemetry, repo: \"hexpm\", optional: false]}], \"hexpm\", \"4cab72069210bc6e7a080cec9afffad1b33370149ed5d379b81c7c5f0c663fd4\"},\n  \"tesla\": {:hex, :tesla, \"1.4.3\", \"f5a494e08fb1abe4fd9c28abb17f3d9b62b8f6fc492860baa91efb1aab61c8a0\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: true]}, {:exjsx, \">= 3.0.0\", [hex: :exjsx, repo: \"hexpm\", optional: true]}, {:finch, \"~> 0.3\", [hex: :finch, repo: \"hexpm\", optional: true]}, {:fuse, \"~> 2.4\", [hex: :fuse, repo: \"hexpm\", optional: true]}, {:gun, \"~> 1.3\", [hex: :gun, repo: \"hexpm\", optional: true]}, {:hackney, \"~> 1.6\", [hex: :hackney, repo: \"hexpm\", optional: true]}, {:ibrowse, \"4.4.0\", [hex: :ibrowse, repo: \"hexpm\", optional: true]}, {:jason, \">= 1.0.0\", [hex: :jason, repo: \"hexpm\", optional: true]}, {:mime, \"~> 1.0\", [hex: :mime, repo: \"hexpm\", optional: false]}, {:mint, \"~> 1.0\", [hex: :mint, repo: \"hexpm\", optional: true]}, {:poison, \">= 1.0.0\", [hex: :poison, repo: \"hexpm\", optional: true]}, {:telemetry, \"~> 0.4 or ~> 1.0\", [hex: :telemetry, repo: \"hexpm\", optional: true]}], \"hexpm\", \"e0755bb664bf4d664af72931f320c97adbf89da4586670f4864bf259b5750386\"},\n  \"tzdata\": {:hex, :tzdata, \"1.1.0\", \"72f5babaa9390d0f131465c8702fa76da0919e37ba32baa90d93c583301a8359\", [:mix], [{:hackney, \"~> 1.17\", [hex: :hackney, repo: \"hexpm\", optional: false]}], \"hexpm\", \"18f453739b48d3dc5bcf0e8906d2dc112bb40baafe2c707596d89f3c8dd14034\"},\n  \"unicode_util_compat\": {:hex, :unicode_util_compat, \"0.7.0\", \"bc84380c9ab48177092f43ac89e4dfa2c6d62b40b8bd132b1059ecc7232f9a78\", [:rebar3], [], \"hexpm\", \"25eee6d67df61960cf6a794239566599b09e17e668d3700247bc498638152521\"},\n  \"uri_template\": {:hex, :uri_template, \"1.2.1\", \"cc36ef5d18a3a5a23ce35a450ab5b139d5e49ce132b08b7f8797c17efc69d594\", [:mix], [], \"hexpm\", \"fe9a2dfeb4fd289b376df2b84dc2dc2d3244364f0ecf0c21e9832fbb756d524d\"},\n  \"websms\": {:hex, :websms, \"1.0.0-alpha.1\", \"b92d86cc86fbbb379585e910402ff032d22cc5bf3025a4d2513dccc483f98a42\", [:mix], [{:castore, \"~> 0.1\", [hex: :castore, repo: \"hexpm\", optional: false]}, {:mint, \"~> 1.0\", [hex: :mint, repo: \"hexpm\", optional: false]}, {:openapi_compiler, \"~> 1.0-beta\", [hex: :openapi_compiler, repo: \"hexpm\", optional: false]}], \"hexpm\", \"19c71783208febfed3f37b050b45b7b4be680b0dc5f3c2bfeedf9dd1db10c997\"},\n  \"xlsxir\": {:hex, :xlsxir, \"1.6.4\", \"d1e69439cbd9edc1190950f9f883ac364e1f31641e0395ccdb27761791b169a3\", [:mix], [{:erlsom, \"~> 1.5\", [hex: :erlsom, repo: \"hexpm\", optional: false]}], \"hexpm\", \"38e91f65eb8a4c8dea07d941c8b7e21baf8c8d4938232395c9ffd19d2eb071f2\"},\n  \"yamerl\": {:hex, :yamerl, \"0.8.1\", \"07da13ffa1d8e13948943789665c62ccd679dfa7b324a4a2ed3149df17f453a4\", [:rebar3], [], \"hexpm\", \"96cb30f9d64344fed0ef8a92e9f16f207de6c04dfff4f366752ca79f5bceb23f\"},\n  \"zitadel_api\": {:hex, :zitadel_api, \"1.0.0-rc.7\", \"88cf9990eeb2c096957d5cf9a2eac7bd840ced097c79fa2b659cd42c1dcac620\", [:mix], [{:google_protos, \"~> 0.1.0\", [hex: :google_protos, repo: \"hexpm\", optional: false]}, {:grpc, \"~> 0.5.0-beta.1\", [hex: :grpc, repo: \"hexpm\", optional: false]}], \"hexpm\", \"131ebdcf1c736ad4ad2ee1e45ff3beab8dda9f1331904d7d7b2e1fc14f61aff6\"},\n}\n"], "filenames": ["apps/hygeia/lib/hygeia/case_context.ex", "apps/hygeia/lib/hygeia/statistics_context.ex", "apps/hygeia/mix.exs", "mix.lock"], "buggy_code_start_loc": [1119, 637, 62, 17], "buggy_code_end_loc": [1806, 868, 63, 18], "fixing_code_start_loc": [1119, 637, 62, 17], "fixing_code_end_loc": [1806, 868, 66, 18], "type": "CWE-74", "message": "Hygeia is an application for collecting and processing personal and case data in connection with communicable diseases. In affected versions all CSV Exports (Statistics & BAG MED) contain a CSV Injection Vulnerability. Users of the system are able to submit formula as exported fields which then get executed upon ingestion of the exported file. There is no validation or sanitization of these formula fields and so malicious may construct malicious code. This vulnerability has been resolved in version 1.30.4. There are no workarounds and all users are advised to upgrade their package.", "other": {"cve": {"id": "CVE-2021-41128", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-06T18:15:11.067", "lastModified": "2021-10-14T23:00:49.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Hygeia is an application for collecting and processing personal and case data in connection with communicable diseases. In affected versions all CSV Exports (Statistics & BAG MED) contain a CSV Injection Vulnerability. Users of the system are able to submit formula as exported fields which then get executed upon ingestion of the exported file. There is no validation or sanitization of these formula fields and so malicious may construct malicious code. This vulnerability has been resolved in version 1.30.4. There are no workarounds and all users are advised to upgrade their package."}, {"lang": "es", "value": "Hygeia es una aplicaci\u00f3n para recoger y procesar datos personales y de casos en relaci\u00f3n con las enfermedades transmisibles. En las versiones afectadas, todas las exportaciones CSV (Statistics &amp; BAG MED) contienen una vulnerabilidad de inyecci\u00f3n CSV. Los usuarios del sistema pueden enviar f\u00f3rmulas como campos exportados que luego se ejecutan al ingerir el archivo exportado. No se presenta comprobaci\u00f3n ni saneo de estos campos de f\u00f3rmulas, por lo que maliciosos pueden construir c\u00f3digo malicioso. Esta vulnerabilidad ha sido resuelta en la versi\u00f3n 1.30.4. No se presentan soluciones y se recomienda a todos los usuarios que actualicen su paquete"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hygeia_project:hygeia:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndExcluding": "1.30.4", "matchCriteriaId": "F7DDCC54-C4E6-4E39-8F2B-AE90486E8AC1"}]}]}], "references": [{"url": "https://github.com/beatrichartz/csv/issues/103", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/beatrichartz/csv/pull/104", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/jshmrtn/hygeia/commit/d917f27432fe84e1c9751222ae55bae36a4dce60", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jshmrtn/hygeia/security/advisories/GHSA-8pwv-jhj2-2369", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://owasp.org/www-community/attacks/CSV_Injection", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jshmrtn/hygeia/commit/d917f27432fe84e1c9751222ae55bae36a4dce60"}}