{"buggy_code": ["from enum import Enum\nfrom typing import Dict, List, Optional\n\nfrom fides.common.api.scope_registry import (\n    CLI_OBJECTS_READ,\n    CLIENT_READ,\n    CONFIG_READ,\n    CONFIG_UPDATE,\n    CONNECTION_READ,\n    CONNECTION_TYPE_READ,\n    CONNECTOR_TEMPLATE_REGISTER,\n    CONSENT_READ,\n    CONSENT_SETTINGS_READ,\n    CTL_DATASET_READ,\n    CTL_POLICY_READ,\n    DATA_CATEGORY_READ,\n    DATA_QUALIFIER_READ,\n    DATA_SUBJECT_READ,\n    DATA_USE_READ,\n    DATASET_READ,\n    EVALUATION_READ,\n    MASKING_EXEC,\n    MASKING_READ,\n    MESSAGING_CREATE_OR_UPDATE,\n    MESSAGING_DELETE,\n    MESSAGING_READ,\n    ORGANIZATION_READ,\n    POLICY_READ,\n    PRIVACY_EXPERIENCE_READ,\n    PRIVACY_NOTICE_READ,\n    PRIVACY_REQUEST_CALLBACK_RESUME,\n    PRIVACY_REQUEST_NOTIFICATIONS_CREATE_OR_UPDATE,\n    PRIVACY_REQUEST_NOTIFICATIONS_READ,\n    PRIVACY_REQUEST_READ,\n    PRIVACY_REQUEST_REVIEW,\n    PRIVACY_REQUEST_UPLOAD_DATA,\n    PRIVACY_REQUEST_VIEW_DATA,\n    REGISTRY_READ,\n    RULE_READ,\n    SAAS_CONFIG_READ,\n    SCOPE_READ,\n    SCOPE_REGISTRY,\n    STORAGE_CREATE_OR_UPDATE,\n    STORAGE_DELETE,\n    STORAGE_READ,\n    SYSTEM_MANAGER_READ,\n    SYSTEM_READ,\n    USER_PERMISSION_ASSIGN_OWNERS,\n    USER_READ,\n    WEBHOOK_READ,\n)\n\nAPPROVER = \"approver\"\nCONTRIBUTOR = \"contributor\"\nOWNER = \"owner\"\nVIEWER = \"viewer\"\nVIEWER_AND_APPROVER = \"viewer_and_approver\"\n\n\nclass RoleRegistryEnum(Enum):\n    \"\"\"Enum of available roles\n\n    Owner - Full admin\n    Viewer - Can view everything\n    Approver - Limited viewer but can approve Privacy Requests\n    Viewer + Approver = Full View and can approve Privacy Requests\n    Contributor - Can't configure storage and messaging\n    \"\"\"\n\n    owner = OWNER\n    viewer_approver = VIEWER_AND_APPROVER\n    viewer = VIEWER\n    approver = APPROVER\n    contributor = CONTRIBUTOR\n\n\napprover_scopes = [\n    PRIVACY_REQUEST_REVIEW,\n    PRIVACY_REQUEST_READ,\n    PRIVACY_REQUEST_CALLBACK_RESUME,\n    PRIVACY_REQUEST_UPLOAD_DATA,\n    PRIVACY_REQUEST_VIEW_DATA,\n]\n\n\nviewer_scopes = [  # Intentionally omitted USER_PERMISSION_READ\n    CLI_OBJECTS_READ,\n    CLIENT_READ,\n    CONFIG_READ,\n    CONNECTION_READ,\n    CONSENT_READ,\n    CONSENT_SETTINGS_READ,\n    CONNECTION_TYPE_READ,\n    CTL_DATASET_READ,\n    DATA_CATEGORY_READ,\n    CTL_POLICY_READ,\n    DATA_QUALIFIER_READ,\n    DATASET_READ,\n    DATA_SUBJECT_READ,\n    DATA_USE_READ,\n    EVALUATION_READ,\n    MASKING_EXEC,\n    MASKING_READ,\n    ORGANIZATION_READ,\n    POLICY_READ,\n    PRIVACY_EXPERIENCE_READ,\n    PRIVACY_NOTICE_READ,\n    PRIVACY_REQUEST_READ,\n    PRIVACY_REQUEST_NOTIFICATIONS_READ,\n    REGISTRY_READ,\n    RULE_READ,\n    SCOPE_READ,\n    STORAGE_READ,\n    SYSTEM_READ,\n    MESSAGING_READ,\n    WEBHOOK_READ,\n    SYSTEM_MANAGER_READ,\n    SAAS_CONFIG_READ,\n    USER_READ,\n]\n\nnot_contributor_scopes = [\n    CONNECTOR_TEMPLATE_REGISTER,\n    STORAGE_CREATE_OR_UPDATE,\n    STORAGE_DELETE,\n    MESSAGING_CREATE_OR_UPDATE,\n    MESSAGING_DELETE,\n    PRIVACY_REQUEST_NOTIFICATIONS_CREATE_OR_UPDATE,\n    CONFIG_UPDATE,\n    USER_PERMISSION_ASSIGN_OWNERS,\n]\n\nROLES_TO_SCOPES_MAPPING: Dict[str, List] = {\n    OWNER: sorted(SCOPE_REGISTRY),\n    VIEWER_AND_APPROVER: sorted(list(set(viewer_scopes + approver_scopes))),\n    VIEWER: sorted(viewer_scopes),\n    APPROVER: sorted(approver_scopes),\n    CONTRIBUTOR: sorted(list(set(SCOPE_REGISTRY) - set(not_contributor_scopes))),\n}\n\n\ndef get_scopes_from_roles(roles: Optional[List[str]]) -> List[str]:\n    \"\"\"Return a list of all the scopes the user has via their role(s)\"\"\"\n    if not roles:\n        return []\n\n    scope_list: List[str] = []\n    for role in roles:\n        scope_list += ROLES_TO_SCOPES_MAPPING.get(role, [])\n    return [*set(scope_list)]\n"], "fixing_code": ["from enum import Enum\nfrom typing import Dict, List, Optional\n\nfrom fides.common.api.scope_registry import (\n    CLI_OBJECTS_READ,\n    CLIENT_READ,\n    CONFIG_READ,\n    CONFIG_UPDATE,\n    CONNECTION_READ,\n    CONNECTION_TYPE_READ,\n    CONNECTOR_TEMPLATE_REGISTER,\n    CONSENT_READ,\n    CONSENT_SETTINGS_READ,\n    CTL_DATASET_READ,\n    CTL_POLICY_READ,\n    DATA_CATEGORY_READ,\n    DATA_QUALIFIER_READ,\n    DATA_SUBJECT_READ,\n    DATA_USE_READ,\n    DATASET_READ,\n    EVALUATION_READ,\n    MASKING_EXEC,\n    MASKING_READ,\n    MESSAGING_CREATE_OR_UPDATE,\n    MESSAGING_DELETE,\n    MESSAGING_READ,\n    ORGANIZATION_READ,\n    POLICY_READ,\n    PRIVACY_EXPERIENCE_READ,\n    PRIVACY_NOTICE_READ,\n    PRIVACY_REQUEST_CALLBACK_RESUME,\n    PRIVACY_REQUEST_NOTIFICATIONS_CREATE_OR_UPDATE,\n    PRIVACY_REQUEST_NOTIFICATIONS_READ,\n    PRIVACY_REQUEST_READ,\n    PRIVACY_REQUEST_REVIEW,\n    PRIVACY_REQUEST_UPLOAD_DATA,\n    PRIVACY_REQUEST_VIEW_DATA,\n    REGISTRY_READ,\n    RULE_READ,\n    SAAS_CONFIG_READ,\n    SCOPE_READ,\n    SCOPE_REGISTRY,\n    STORAGE_CREATE_OR_UPDATE,\n    STORAGE_DELETE,\n    STORAGE_READ,\n    SYSTEM_MANAGER_READ,\n    SYSTEM_READ,\n    USER_PERMISSION_ASSIGN_OWNERS,\n    USER_READ,\n    WEBHOOK_READ,\n)\n\nAPPROVER = \"approver\"\nCONTRIBUTOR = \"contributor\"\nOWNER = \"owner\"\nVIEWER = \"viewer\"\nVIEWER_AND_APPROVER = \"viewer_and_approver\"\n\n\nclass RoleRegistryEnum(Enum):\n    \"\"\"Enum of available roles\n\n    Owner - Full admin\n    Viewer - Can view everything\n    Approver - Limited viewer but can approve Privacy Requests\n    Viewer + Approver = Full View and can approve Privacy Requests\n    Contributor - Can't configure storage and messaging\n    \"\"\"\n\n    owner = OWNER\n    viewer_approver = VIEWER_AND_APPROVER\n    viewer = VIEWER\n    approver = APPROVER\n    contributor = CONTRIBUTOR\n\n\napprover_scopes = [\n    PRIVACY_REQUEST_REVIEW,\n    PRIVACY_REQUEST_READ,\n    PRIVACY_REQUEST_CALLBACK_RESUME,\n    PRIVACY_REQUEST_UPLOAD_DATA,\n    PRIVACY_REQUEST_VIEW_DATA,\n]\n\n\nviewer_scopes = [  # Intentionally omitted USER_PERMISSION_READ\n    CLI_OBJECTS_READ,\n    CLIENT_READ,\n    CONNECTION_READ,\n    CONSENT_READ,\n    CONSENT_SETTINGS_READ,\n    CONNECTION_TYPE_READ,\n    CTL_DATASET_READ,\n    DATA_CATEGORY_READ,\n    CTL_POLICY_READ,\n    DATA_QUALIFIER_READ,\n    DATASET_READ,\n    DATA_SUBJECT_READ,\n    DATA_USE_READ,\n    EVALUATION_READ,\n    MASKING_EXEC,\n    MASKING_READ,\n    ORGANIZATION_READ,\n    POLICY_READ,\n    PRIVACY_EXPERIENCE_READ,\n    PRIVACY_NOTICE_READ,\n    PRIVACY_REQUEST_READ,\n    PRIVACY_REQUEST_NOTIFICATIONS_READ,\n    REGISTRY_READ,\n    RULE_READ,\n    SCOPE_READ,\n    STORAGE_READ,\n    SYSTEM_READ,\n    MESSAGING_READ,\n    WEBHOOK_READ,\n    SYSTEM_MANAGER_READ,\n    SAAS_CONFIG_READ,\n    USER_READ,\n]\n\nnot_contributor_scopes = [\n    CONNECTOR_TEMPLATE_REGISTER,\n    STORAGE_CREATE_OR_UPDATE,\n    STORAGE_DELETE,\n    MESSAGING_CREATE_OR_UPDATE,\n    MESSAGING_DELETE,\n    PRIVACY_REQUEST_NOTIFICATIONS_CREATE_OR_UPDATE,\n    CONFIG_READ,\n    CONFIG_UPDATE,\n    USER_PERMISSION_ASSIGN_OWNERS,\n]\n\nROLES_TO_SCOPES_MAPPING: Dict[str, List] = {\n    OWNER: sorted(SCOPE_REGISTRY),\n    VIEWER_AND_APPROVER: sorted(list(set(viewer_scopes + approver_scopes))),\n    VIEWER: sorted(viewer_scopes),\n    APPROVER: sorted(approver_scopes),\n    CONTRIBUTOR: sorted(list(set(SCOPE_REGISTRY) - set(not_contributor_scopes))),\n}\n\n\ndef get_scopes_from_roles(roles: Optional[List[str]]) -> List[str]:\n    \"\"\"Return a list of all the scopes the user has via their role(s)\"\"\"\n    if not roles:\n        return []\n\n    scope_list: List[str] = []\n    for role in roles:\n        scope_list += ROLES_TO_SCOPES_MAPPING.get(role, [])\n    return [*set(scope_list)]\n"], "filenames": ["src/fides/api/oauth/roles.py"], "buggy_code_start_loc": [89], "buggy_code_end_loc": [128], "fixing_code_start_loc": [88], "fixing_code_end_loc": [129], "type": "CWE-863", "message": "Fides is an open-source privacy engineering platform for managing the fulfillment of data privacy requests in a runtime environment, and the enforcement of privacy regulations in code. The Fides webserver API allows users to retrieve its configuration using the `GET api/v1/config` endpoint. The configuration data is filtered to suppress most sensitive configuration information before it is returned to the user, but even the filtered data contains information about the internals and the backend infrastructure, such as various settings, servers\u2019 addresses and ports and database username. This information is useful for administrative users as well as attackers, thus it should not be revealed to low-privileged users. This vulnerability allows Admin UI users with roles lower than the owner role e.g. the viewer role to retrieve the config information using the API. The vulnerability has been patched in Fides version `2.22.1`. ", "other": {"cve": {"id": "CVE-2023-46125", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T18:17:36.470", "lastModified": "2023-11-01T16:38:37.533", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Fides is an open-source privacy engineering platform for managing the fulfillment of data privacy requests in a runtime environment, and the enforcement of privacy regulations in code. The Fides webserver API allows users to retrieve its configuration using the `GET api/v1/config` endpoint. The configuration data is filtered to suppress most sensitive configuration information before it is returned to the user, but even the filtered data contains information about the internals and the backend infrastructure, such as various settings, servers\u2019 addresses and ports and database username. This information is useful for administrative users as well as attackers, thus it should not be revealed to low-privileged users. This vulnerability allows Admin UI users with roles lower than the owner role e.g. the viewer role to retrieve the config information using the API. The vulnerability has been patched in Fides version `2.22.1`. "}, {"lang": "es", "value": "Fides es una plataforma de ingenier\u00eda de privacidad de c\u00f3digo abierto para gestionar el cumplimiento de solicitudes de privacidad de datos en un entorno de ejecuci\u00f3n y la aplicaci\u00f3n de regulaciones de privacidad en c\u00f3digo. La API del servidor web de Fides permite a los usuarios recuperar su configuraci\u00f3n utilizando el endpoint `GET api/v1/config`. Los datos de configuraci\u00f3n se filtran para suprimir la informaci\u00f3n de configuraci\u00f3n m\u00e1s confidencial antes de devolverla al usuario, pero incluso los datos filtrados contienen informaci\u00f3n sobre los componentes internos y la infraestructura de backend, como diversas configuraciones, direcciones y puertos de servidores y nombre de usuario de la base de datos. Esta informaci\u00f3n es \u00fatil tanto para usuarios administrativos como para atacantes, por lo que no debe revelarse a usuarios con pocos privilegios. Esta vulnerabilidad permite a los usuarios de la interfaz de usuario de administraci\u00f3n con roles inferiores al rol de propietario, por ejemplo, el rol de espectador, recuperar la informaci\u00f3n de configuraci\u00f3n mediante la API. La vulnerabilidad ha sido parcheada en la versi\u00f3n `2.22.1` de Fides."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ethyca:fides:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.22.1", "matchCriteriaId": "DA76F207-3012-48FE-AAB5-9B061A5AE996"}]}]}], "references": [{"url": "https://github.com/ethyca/fides/commit/c9f3a620a4b4c1916e0941cb5624dcd636f06d06", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ethyca/fides/releases/tag/2.22.1", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/ethyca/fides/security/advisories/GHSA-rjxg-rpg3-9r89", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ethyca/fides/commit/c9f3a620a4b4c1916e0941cb5624dcd636f06d06"}}