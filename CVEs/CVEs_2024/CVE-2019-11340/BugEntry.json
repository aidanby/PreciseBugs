{"buggy_code": ["# -*- coding: utf-8 -*-\n\n# Copyright 2014-2015 OpenMarket Ltd\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport logging\nimport socket\nimport random\nimport smtplib\nimport email.utils\nimport string\nimport twisted.python.log\nimport cgi\nimport urllib\n\nimport email.utils\n\nfrom sydent.util import time_msec\n\nlogger = logging.getLogger(__name__)\n\n\ndef sendEmail(sydent, templateName, mailTo, substitutions):\n        mailFrom = sydent.cfg.get('email', 'email.from')\n        mailTemplateFile = sydent.cfg.get('email', templateName)\n\n        myHostname = sydent.cfg.get('email', 'email.hostname')\n        if myHostname == '':\n            myHostname = socket.getfqdn()\n        midRandom = \"\".join([random.choice(string.ascii_letters) for _ in range(16)])\n        messageid = \"<%d%s@%s>\" % (time_msec(), midRandom, myHostname)\n\n        allSubstitutions = {}\n        allSubstitutions.update(substitutions)\n        allSubstitutions.update({\n            'messageid': messageid,\n            'date': email.utils.formatdate(localtime=False),\n            'to': mailTo,\n            'from': mailFrom,\n        })\n\n        for k,v in allSubstitutions.items():\n            allSubstitutions[k] = v.decode('utf8')\n            allSubstitutions[k+\"_forhtml\"] = cgi.escape(v.decode('utf8'))\n            allSubstitutions[k+\"_forurl\"] = urllib.quote(v)\n\n        mailString = open(mailTemplateFile).read() % allSubstitutions\n        rawFrom = email.utils.parseaddr(mailFrom)[1]\n        rawTo = email.utils.parseaddr(mailTo)[1]\n        if rawFrom == '' or rawTo == '':\n            logger.info(\"Couldn't parse from / to address %s / %s\", mailFrom, mailTo)\n            raise EmailAddressException()\n        mailServer = sydent.cfg.get('email', 'email.smtphost')\n        mailPort = sydent.cfg.get('email', 'email.smtpport')\n        mailUsername = sydent.cfg.get('email', 'email.smtpusername')\n        mailPassword = sydent.cfg.get('email', 'email.smtppassword')\n        mailTLSMode = sydent.cfg.get('email', 'email.tlsmode')\n        logger.info(\"Sending mail to %s with mail server: %s\" % (mailTo, mailServer,))\n        try:\n            if mailTLSMode == 'SSL' or mailTLSMode == 'TLS':\n                smtp = smtplib.SMTP_SSL(mailServer, mailPort, myHostname)\n            elif mailTLSMode == 'STARTTLS':\n                smtp = smtplib.SMTP(mailServer, mailPort, myHostname)\n                smtp.starttls()\n            else:\n                smtp = smtplib.SMTP(mailServer, mailPort, myHostname)\n            if mailUsername != '':\n                smtp.login(mailUsername, mailPassword)\n            smtp.sendmail(rawFrom, rawTo, mailString.encode('utf-8'))\n            smtp.quit()\n        except Exception as origException:\n            twisted.python.log.err()\n            ese = EmailSendException()\n            ese.cause = origException\n            raise ese\n\n\nclass EmailAddressException(Exception):\n    pass\n\n\nclass EmailSendException(Exception):\n    pass\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n\n# Copyright 2014-2015 OpenMarket Ltd\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport logging\nimport socket\nimport random\nimport smtplib\nimport email.utils\nimport string\nimport twisted.python.log\nimport cgi\nimport urllib\n\nimport email.utils\n\nfrom sydent.util import time_msec\n\nlogger = logging.getLogger(__name__)\n\n\ndef sendEmail(sydent, templateName, mailTo, substitutions):\n        mailFrom = sydent.cfg.get('email', 'email.from')\n        mailTemplateFile = sydent.cfg.get('email', templateName)\n\n        myHostname = sydent.cfg.get('email', 'email.hostname')\n        if myHostname == '':\n            myHostname = socket.getfqdn()\n        midRandom = \"\".join([random.choice(string.ascii_letters) for _ in range(16)])\n        messageid = \"<%d%s@%s>\" % (time_msec(), midRandom, myHostname)\n\n        allSubstitutions = {}\n        allSubstitutions.update(substitutions)\n        allSubstitutions.update({\n            'messageid': messageid,\n            'date': email.utils.formatdate(localtime=False),\n            'to': mailTo,\n            'from': mailFrom,\n        })\n\n        for k,v in allSubstitutions.items():\n            allSubstitutions[k] = v.decode('utf8')\n            allSubstitutions[k+\"_forhtml\"] = cgi.escape(v.decode('utf8'))\n            allSubstitutions[k+\"_forurl\"] = urllib.quote(v)\n\n        mailString = open(mailTemplateFile).read().decode('utf8') % allSubstitutions\n        parsedFrom = email.utils.parseaddr(mailFrom)[1]\n        parsedTo = email.utils.parseaddr(mailTo)[1]\n        if parsedFrom == '' or parsedTo == '':\n            logger.info(\"Couldn't parse from / to address %s / %s\", mailFrom, mailTo)\n            raise EmailAddressException()\n\n        mailServer = sydent.cfg.get('email', 'email.smtphost')\n        mailPort = sydent.cfg.get('email', 'email.smtpport')\n        mailUsername = sydent.cfg.get('email', 'email.smtpusername')\n        mailPassword = sydent.cfg.get('email', 'email.smtppassword')\n        mailTLSMode = sydent.cfg.get('email', 'email.tlsmode')\n        logger.info(\"Sending mail to %s with mail server: %s\" % (mailTo, mailServer,))\n        try:\n            if mailTLSMode == 'SSL' or mailTLSMode == 'TLS':\n                smtp = smtplib.SMTP_SSL(mailServer, mailPort, myHostname)\n            elif mailTLSMode == 'STARTTLS':\n                smtp = smtplib.SMTP(mailServer, mailPort, myHostname)\n                smtp.starttls()\n            else:\n                smtp = smtplib.SMTP(mailServer, mailPort, myHostname)\n            if mailUsername != '':\n                smtp.login(mailUsername, mailPassword)\n\n            # We're using the parsing above to do basic validation, but instead of\n            # failing it may munge the address it returns. So we should *not* use\n            # that parsed address, as it may not match any validation done\n            # elsewhere.\n            smtp.sendmail(mailFrom, mailTo, mailString.encode('utf-8'))\n            smtp.quit()\n        except Exception as origException:\n            twisted.python.log.err()\n            ese = EmailSendException()\n            ese.cause = origException\n            raise ese\n\n\nclass EmailAddressException(Exception):\n    pass\n\n\nclass EmailSendException(Exception):\n    pass\n"], "filenames": ["sydent/util/emailutils.py"], "buggy_code_start_loc": [58], "buggy_code_end_loc": [81], "fixing_code_start_loc": [58], "fixing_code_end_loc": [87], "type": "CWE-20", "message": "util/emailutils.py in Matrix Sydent before 1.0.2 mishandles registration restrictions that are based on e-mail domain, if the allowed_local_3pids option is enabled. This occurs because of potentially unwanted behavior in Python, in which an email.utils.parseaddr call on user@bad.example.net@good.example.com returns the user@bad.example.net substring.", "other": {"cve": {"id": "CVE-2019-11340", "sourceIdentifier": "cve@mitre.org", "published": "2019-04-19T14:29:00.417", "lastModified": "2019-04-22T17:52:19.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "util/emailutils.py in Matrix Sydent before 1.0.2 mishandles registration restrictions that are based on e-mail domain, if the allowed_local_3pids option is enabled. This occurs because of potentially unwanted behavior in Python, in which an email.utils.parseaddr call on user@bad.example.net@good.example.com returns the user@bad.example.net substring."}, {"lang": "es", "value": "Vulnerabilidad en archivo util/emailutils.py en Matrix Sydent anterior a las restricciones de registro de la versi\u00f3n 1.0.2 basado en el dominio de correo electr\u00f3nico, si la opci\u00f3n allowed_local_3pids est\u00e1 habilitada. Esto ocurre debido a un comportamiento potencialmente no deseado en Python, en el que una llamada de email.utils.parseaddr en user@bad.example.net@good.example.com devuelve la subcadena user@bad.example.net."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:matrix:sydent:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.2", "matchCriteriaId": "CE553235-44B4-4D67-AF42-EC3F61590182"}]}]}], "references": [{"url": "https://github.com/matrix-org/sydent/commit/4e1cfff53429c49c87d5c457a18ed435520044fc", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/matrix-org/sydent/compare/7c002cd...09278fb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://matrix.org/blog/2019/04/18/security-update-sydent-1-0-2/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://twitter.com/matrixdotorg/status/1118934335963500545", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/matrix-org/sydent/commit/4e1cfff53429c49c87d5c457a18ed435520044fc"}}