{"buggy_code": ["<?php\n/*********************************************************************\n    ajax.users.php\n\n    AJAX interface for  users (based on submitted tickets)\n    XXX: osTicket doesn't support user accounts at the moment.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once INCLUDE_DIR.'class.note.php';\nrequire_once INCLUDE_DIR.'ajax.tickets.php';\n\nclass UsersAjaxAPI extends AjaxController {\n\n    /* Assumes search by basic info for now */\n    function search($type = null, $fulltext=false) {\n\n        if(!isset($_REQUEST['q'])) {\n            Http::response(400, __('Query argument is required'));\n        }\n\n        $matches = array();\n        if (!$_REQUEST['q'])\n            return $this->json_encode($matches);\n\n        $q = $_REQUEST['q'];\n        $limit = isset($_REQUEST['limit']) ? (int) $_REQUEST['limit']:25;\n        $users=array();\n        $emails=array();\n        $matches = array();\n\n        if (strlen(Format::searchable($q)) < 3)\n            return $this->encode(array());\n\n        if (!$type || !strcasecmp($type, 'remote')) {\n            foreach (AuthenticationBackend::searchUsers($q) as $u) {\n                if (!trim($u['email']))\n                    // Email is required currently\n                    continue;\n                $name = new UsersName(array('first' => $u['first'], 'last' => $u['last']));\n                $matches[] = array('email' => $u['email'], 'name'=>(string) $name,\n                    'info' => \"{$u['email']} - $name (remote)\",\n                    'id' => \"auth:\".$u['id'], \"/bin/true\" => $q);\n                $emails[] = $u['email'];\n            }\n        }\n\n        if (!$type || !strcasecmp($type, 'local')) {\n\n            $users = User::objects()\n                ->values_flat('id', 'name', 'default_email__address')\n                ->limit($limit);\n\n            if ($fulltext) {\n                global $ost;\n                $users = $ost->searcher->find($q, $users);\n                $users->order_by(new SqlCode('__relevance__'), QuerySet::DESC)\n                    ->distinct('id');\n\n                if (!count($emails) && !count($users) && preg_match('`\\w$`u', $q)) {\n                    // Do wildcard full-text search\n                    $_REQUEST['q'] = $q.\"*\";\n                    return $this->search($type, $fulltext);\n                }\n            } else {\n                $base = clone $users;\n                $users->filter(array('name__contains' => $q));\n                $users->union($base->copy()->filter(array(\n                                'org__name__contains' => $q)), false);\n                $users->union($base->copy()->filter(array(\n                                'emails__address__contains' => $q)),  false);\n                $users->union($base->copy()->filter(array(\n                                'account__username__contains' => $q)), false);\n                if (UserForm::getInstance()->getField('phone')) {\n                      $users->union($base->copy()->filter(array(\n                                'cdata__phone__contains' => $q)), false);\n                }\n            }\n\n            // Omit already-imported remote users\n            if ($emails = array_filter($emails)) {\n                $users->union(User::objects()\n                    ->values_flat('id', 'name', 'default_email__address')\n                    ->filter(array(\n                        'emails__address__in' => $emails\n                )));\n            }\n\n            foreach ($users as $U) {\n                list($id, $name, $email) = $U;\n                foreach ($matches as $i=>$u) {\n                    if ($u['email'] == $email) {\n                        unset($matches[$i]);\n                        break;\n                    }\n                }\n                $name = Format::htmlchars(new UsersName($name));\n                $matches[] = array('email'=>$email, 'name'=>$name, 'info'=>\"$email - $name\",\n                    \"id\" => $id, \"/bin/true\" => $_REQUEST['q']);\n            }\n            usort($matches, function($a, $b) { return strcmp($a['name'], $b['name']); });\n        }\n\n        return $this->json_encode(array_values($matches));\n\n    }\n\n    function preview($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif(!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array(\n                'title' => '',\n                'useredit' => sprintf('#users/%d/edit', $user->getId()),\n                );\n        ob_start();\n        echo sprintf('<div style=\"width:650px; padding: 2px 2px 0 5px;\"\n                id=\"u%d\">', $user->getId());\n        include(STAFFINC_DIR . 'templates/user.tmpl.php');\n        echo '</div>';\n        $resp = ob_get_contents();\n        ob_end_clean();\n\n        return $resp;\n\n    }\n\n    function editUser($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array(\n            'title' => sprintf(__('Update %s'), Format::htmlchars($user->getName()))\n        );\n        $forms = $user->getForms();\n\n        include(STAFFINC_DIR . 'templates/user.tmpl.php');\n    }\n\n    function updateUser($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $errors = array();\n        $form = UserForm::getUserForm()->getForm($_POST);\n        if (!is_string($form->getField('name')->getValue()))\n            Http::response(404, 'Invalid Data');\n\n        if ($user->updateInfo($_POST, $errors, true) && !$errors)\n             Http::response(201, $user->to_json(),  'application/json');\n\n        $forms = $user->getForms();\n        include(STAFFINC_DIR . 'templates/user.tmpl.php');\n    }\n\n    static function register($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_MANAGE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $errors = $info = array();\n        if ($_POST) {\n            // Register user on post\n            if ($user->getAccount())\n                $info['error'] = __('User already registered');\n            elseif ($user->register($_POST, $errors))\n                Http::response(201, 'Account created successfully');\n\n            // Unable to create user.\n            $info = Format::htmlchars($_POST);\n            if ($errors['err'])\n                $info['error'] = $errors['err'];\n            else\n                $info['error'] = sprintf('%s - %s', __('Unable to register user'), __('Please try again!'));\n        }\n\n        include(STAFFINC_DIR . 'templates/user-register.tmpl.php');\n    }\n\n    function manage($id, $target=null) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_MANAGE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        if (!($account = $user->getAccount()))\n            return self::register($id);\n\n        $errors = array();\n        $info = $account->getInfo();\n\n        if ($_POST) {\n            if ($account->update($_POST, $errors))\n                Http::response(201, 'Account updated successfully');\n\n            // Unable to update account\n            $info = Format::htmlchars($_POST);\n\n            if ($errors['err'])\n                $info['error'] = $errors['err'];\n            else\n                $info['error'] = __('Unable to update account.')\n                    .' '.__('Correct any errors below and try again.');\n        }\n\n        $info['_target'] = $target;\n\n        include(STAFFINC_DIR . 'templates/user-account.tmpl.php');\n    }\n\n    function delete($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_DELETE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array();\n        if ($_POST) {\n            if ($user->tickets->count()) {\n                if ($_POST['deletetickets']) {\n                    if (!$user->deleteAllTickets())\n                        $info['error'] = __('You do not have permission to delete a user with tickets!');\n                } else {\n                    $info['error'] = __('You cannot delete a user with tickets!');\n                }\n            }\n\n            if (!$info['error'] && $user->delete())\n                 Http::response(204, 'User deleted successfully');\n            elseif (!$info['error'])\n                $info['error'] = sprintf('%s - %s', __('Unable to delete user'), __('Please try again!'));\n        }\n\n        include(STAFFINC_DIR . 'templates/user-delete.tmpl.php');\n    }\n\n    function getUser($id=false) {\n\n        if(($user=User::lookup(($id) ? $id : $_REQUEST['id'])))\n           Http::response(201, $user->to_json(), 'application/json');\n\n        $info = array('error' => sprintf(__('%s: Unknown or invalid ID.'), _N('end user', 'end users', 1)));\n\n        return self::_lookupform(null, $info);\n    }\n\n    function lookup() {\n        return self::addUser();\n    }\n\n    static function addUser() {\n        global $thisstaff;\n\n        $info = array();\n\n        if (!AuthenticationBackend::getSearchDirectories())\n            $info['lookup'] = 'local';\n\n        if ($_POST) {\n            if (!$thisstaff->hasPerm(User::PERM_CREATE))\n                Http::response(403, 'Permission Denied');\n\n            $info['title'] = __('Add New User');\n            $form = UserForm::getUserForm()->getForm($_POST);\n            if (!is_string($form->getField('name')->getValue()))\n                Http::response(404, 'Invalid Data');\n            if (($user = User::fromForm($form)))\n                Http::response(201, $user->to_json(), 'application/json');\n\n            $info['error'] = sprintf('%s - %s', __('Error adding user'), __('Please try again!'));\n        }\n\n        return self::_lookupform($form, $info);\n    }\n\n    function addRemoteUser($bk, $id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n        elseif (!$bk || !$id)\n            Http::response(422, 'Backend and user id required');\n        elseif (!($backend = AuthenticationBackend::getSearchDirectoryBackend($bk))\n                || !($user_info = $backend->lookup($id)))\n            Http::response(404, 'User not found');\n\n        $form = UserForm::getUserForm()->getForm($user_info);\n        $info = array('title' => __(\n            /* `remote` users are those in a remore directory such as LDAP */\n            'Import Remote User'));\n        if (!$user_info)\n            $info['error'] = __('Unable to find user in directory');\n\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n    }\n\n    function importUsers() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n\n        $info = array(\n            'title' => __('Import Users'),\n            'action' => '#users/import',\n            'upload_url' => \"users.php?do=import-users\",\n        );\n\n        if ($_POST) {\n            $status = User::importFromPost($_POST['pasted']);\n            if (is_string($status))\n                $info['error'] = $status;\n            else\n                Http::response(201, \"{\\\"count\\\": $status}\");\n        }\n        $info += Format::input($_POST);\n\n        include STAFFINC_DIR . 'templates/user-import.tmpl.php';\n    }\n\n    function selectUser($id) {\n        global $thisstaff;\n\n        if ($id)\n            $user = User::lookup($id);\n\n        $info = array('title' => __('Select User'));\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n\n    }\n\n    static function _lookupform($form=null, $info=array()) {\n        global $thisstaff;\n\n        if (!$info or !$info['title']) {\n            if ($thisstaff->hasPerm(User::PERM_CREATE))\n                $info += array('title' => __('Lookup or create a user'));\n            else\n                $info += array('title' => __('Lookup a user'));\n        }\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n    }\n\n    function searchStaff() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login required for searching');\n        elseif (!$thisstaff->isAdmin())\n            Http::response(403,\n                'Administrative privilege is required for searching');\n        elseif (!isset($_REQUEST['q']))\n            Http::response(400, 'Query argument is required');\n\n        $users = array();\n        foreach (AuthenticationBackend::getSearchDirectories() as $ab) {\n            foreach ($ab->search($_REQUEST['q']) as $u)\n                $users[] = $u;\n        }\n\n        return $this->json_encode($users);\n    }\n\n    function updateOrg($id, $orgId = 0) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array();\n        $info['title'] = sprintf(__('Organization for %s'),\n            Format::htmlchars($user->getName()));\n        $info['action'] = '#users/'.$user->getId().'/org';\n        $info['onselect'] = 'ajax.php/users/'.$user->getId().'/org';\n\n        if ($_POST) {\n            if ($_POST['orgid']) { //Existing org.\n                if (!($org = Organization::lookup($_POST['orgid'])))\n                    $info['error'] = __('Unknown organization selected');\n            } else { //Creating new org.\n                $form = OrganizationForm::getDefaultForm()->getForm($_POST);\n                if (!($org = Organization::fromForm($form)))\n                    $info['error'] = __('Unable to create organization.')\n                        .' '.__('Correct any errors below and try again.');\n            }\n\n            if ($org && $user->setOrganization($org))\n                Http::response(201, $org->to_json(), 'application/json');\n            elseif (! $info['error'])\n                $info['error'] = __('Unable to add user to organization.')\n                    .' '.__('Correct any errors below and try again.');\n\n        } elseif ($orgId)\n            $org = Organization::lookup($orgId);\n        elseif ($org = $user->getOrganization()) {\n            $info['title'] = sprintf(__('%s &mdash; Organization'), Format::htmlchars($user->getName()));\n            $info['action'] = $info['onselect'] = '';\n            $tmpl = 'org.tmpl.php';\n        }\n\n        if ($org && $user->getOrgId() && $org->getId() != $user->getOrgId())\n            $info['warning'] = __(\"Are you sure you want to change the user's organization?\");\n\n        $tmpl = $tmpl ?: 'org-lookup.tmpl.php';\n\n        ob_start();\n        include(STAFFINC_DIR . \"templates/$tmpl\");\n        $resp = ob_get_contents();\n        ob_end_clean();\n\n        return $resp;\n    }\n\n    function createNote($id) {\n        if (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        require_once INCLUDE_DIR . 'ajax.note.php';\n        $ajax = new NoteAjaxAPI();\n        return $ajax->createNote('U'.$id);\n    }\n\n    function manageForms($user_id) {\n        $forms = DynamicFormEntry::forObject($user_id, 'U');\n        $info = array('action' => '#users/'.Format::htmlchars($user_id).'/forms/manage');\n        include(STAFFINC_DIR . 'templates/form-manage.tmpl.php');\n    }\n\n    function updateForms($user_id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, \"Login required\");\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($user_id)))\n            Http::response(404, \"No such user\");\n        elseif (!isset($_POST['forms']))\n            Http::response(422, \"Send updated forms list\");\n\n        // Add new forms\n        $forms = DynamicFormEntry::forObject($user_id, 'U');\n        foreach ($_POST['forms'] as $sort => $id) {\n            $found = false;\n            foreach ($forms as $e) {\n                if ($e->get('form_id') == $id) {\n                    $e->set('sort', $sort);\n                    $e->save();\n                    $found = true;\n                    break;\n                }\n            }\n            // New form added\n            if (!$found && ($new = DynamicForm::lookup($id))) {\n                $user->addForm($new, $sort);\n            }\n        }\n\n        // Deleted forms\n        foreach ($forms as $idx => $e) {\n            if (!in_array($e->get('form_id'), $_POST['forms']))\n                $e->delete();\n        }\n\n        Http::response(201, 'Successfully managed');\n    }\n\n    function exportTickets($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$id)\n            Http::response(403, __('User ID Required'));\n\n        $user = User::lookup($id);\n        if (!$user)\n            Http::response(403, __('User Not Found'));\n\n        $queue = $user->getTicketsQueue();\n\n        if ($_POST) {\n            $api = new TicketsAjaxAPI();\n            return $api->queueExport($queue);\n        }\n\n        $info = array('action' => \"#users/$id/tickets/export\");\n\n        include STAFFINC_DIR . 'templates/queue-export.tmpl.php';\n    }\n}\n?>\n", "<?php\n/*********************************************************************\n    class.client.php\n\n    Handles everything about EndUser\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR.'class.user.php';\n\nabstract class TicketUser\nimplements EmailContact, ITicketUser, TemplateVariable {\n\n    static private $token_regex = '/^(?P<type>\\w{1})(?P<algo>\\d+)x(?P<hash>.*)$/i';\n\n    protected  $user;\n    protected $_guest = false;\n\n    function __construct($user) {\n        $this->user = $user;\n    }\n\n    function __call($name, $args) {\n        global $cfg;\n\n        $rv = null;\n        if($this->user && is_callable(array($this->user, $name)))\n            $rv = $args\n                ? call_user_func_array(array($this->user, $name), $args)\n                : call_user_func(array($this->user, $name));\n\n        return $rv ?: false;\n    }\n\n    // Required for Internationalization::getCurrentLanguage() in templates\n    function getLanguage() {\n        return $this->user->getLanguage();\n    }\n\n    static function getVarScope() {\n        return array(\n            'email' => __('Email Address'),\n            'name' => array('class' => 'PersonsName', 'desc' => __('Full Name')),\n            'ticket_link' => __('Link to view the ticket'),\n        );\n    }\n\n    function getVar($tag) {\n        switch (strtolower($tag)) {\n        case 'ticket_link':\n            $ticket = $this->getTicket();\n            return $this->getTicketLink(($ticket &&\n                        !$ticket->getNumCollaborators()));\n            break;\n        }\n    }\n\n    function getTicketLink($authtoken=true) {\n        global $cfg;\n\n        $ticket = $this->getTicket();\n        if ($authtoken\n                && $ticket\n                && $cfg->isAuthTokenEnabled()) {\n            $qstr = array();\n            $qstr['auth'] = $ticket->getAuthToken($this);\n            return sprintf('%s/view.php?%s',\n                        $cfg->getBaseUrl(),\n                        Http::build_query($qstr, false)\n                        );\n        }\n\n        return sprintf('%s/view.php?id=%s',\n                $cfg->getBaseUrl(),\n                $ticket ? $ticket->getId() : 0\n                );\n    }\n\n    function getId() { return ($this->user) ? $this->user->getId() : null; }\n    function getEmail() { return ($this->user) ? $this->user->getEmail() : null; }\n    function getName() {\n        return ($this->user) ? $this->user->getName() : null;\n    }\n\n    static function lookupByToken($token) {\n\n        //Expecting well formatted token see getAuthToken routine for details.\n        $matches = array();\n        if (!preg_match(static::$token_regex, $token, $matches))\n            return null;\n\n        //Unpack the user and ticket ids\n        $matches +=unpack('Vuid/Vtid',\n                Base32::decode(strtolower(substr($matches['hash'], 0, 13))));\n\n        $user = null;\n        if (!($ticket = Ticket::lookup($matches['tid'])))\n            // Require a ticket for now\n            return null;\n\n        switch ($matches['type']) {\n            case 'c': //Collaborator c\n                if (($user = Collaborator::lookup($matches['uid']))\n                        && $user->getTicketId() != $matches['tid'])\n                    $user = null;\n                break;\n            case 'o': //Ticket owner\n                if (($user = $ticket->getOwner())\n                        && $user->getId() != $matches['uid']) {\n                    $user = null;\n                }\n                break;\n        }\n\n        if (!$user\n                || !$user instanceof ITicketUser\n                || strcasecmp($ticket->getAuthToken($user, $matches['algo']), $token))\n            return false;\n\n        return $user;\n    }\n\n    static function lookupByEmail($email) {\n\n        if (!($user=User::lookup(array('emails__address' => $email))))\n            return null;\n\n        return new EndUser($user);\n    }\n\n    function isOwner() {\n        return $this instanceof TicketOwner;\n    }\n\n    function flagGuest() {\n        $this->_guest = true;\n    }\n\n    function isGuest() {\n        return $this->_guest;\n    }\n\n    function getUserId() {\n        return $this->user->getId();\n    }\n\n    abstract function getTicketId();\n    abstract function getTicket();\n}\n\nclass TicketOwner extends  TicketUser {\n\n    protected $ticket;\n\n    function __construct($user, $ticket) {\n        parent::__construct($user);\n        $this->ticket = $ticket;\n    }\n\n    function __toString() {\n        return (string) $this->getName();\n    }\n\n\n    function getTicket() {\n        return $this->ticket;\n    }\n\n    function getTicketId() {\n        return $this->ticket->getId();\n    }\n}\n\n/*\n * Decorator class for authenticated user\n *\n */\n\nclass EndUser extends BaseAuthenticatedUser {\n\n    protected $user;\n    protected $_account = false;\n    protected $_stats;\n    protected $topic_stats;\n\n    function __construct($user) {\n        $this->user = $user;\n    }\n\n    /*\n     * Delegate calls to the user\n     */\n    function __call($name, $args) {\n\n        if(!$this->user\n                || !is_callable(array($this->user, $name)))\n            return $this->getVar(substr($name, 3));\n\n        return  $args\n            ? call_user_func_array(array($this->user, $name), $args)\n            : call_user_func(array($this->user, $name));\n    }\n\n    function getVar($tag) {\n        $u = $this;\n        // Traverse the $user properties of all nested user objects to get\n        // to the User instance with the custom data\n        while (isset($u->user)) {\n            $u = $u->user;\n            if (method_exists($u, 'getVar')) {\n                if ($rv = $u->getVar($tag))\n                    return $rv;\n            }\n        }\n    }\n\n    function getId() {\n        //We ONLY care about user ID at the ticket level\n        if ($this->user instanceof Collaborator)\n            return $this->user->getUserId();\n\n        elseif ($this->user)\n            return $this->user->getId();\n\n        return false;\n    }\n\n    function getUserName() {\n        //XXX: Revisit when real usernames are introduced  or when email\n        // requirement is removed.\n        return $this->user->getEmail();\n    }\n\n    function getUserType() {\n        return $this->isOwner() ? 'owner' : 'collaborator';\n    }\n\n    function getAuthBackend() {\n        list($authkey,) = explode(':', $this->getAuthKey());\n        return UserAuthenticationBackend::getBackend($authkey);\n    }\n\n    function get2FABackend() {\n        //TODO: support 2FA on client portal\n        return null;\n    }\n\n    function getTicketStats() {\n        if (!isset($this->_stats))\n            $this->_stats = $this->getStats();\n\n        return $this->_stats;\n    }\n\n    function getNumTickets($forMyOrg=false, $state=false) {\n        $stats = $this->getTicketStats();\n        $count = 0;\n        $section = $forMyOrg ? 'myorg' : 'mine';\n        foreach ($stats[$section] as $row) {\n            if ($state && $row['status__state'] != $state)\n                continue;\n            $count += $row['count'];\n        }\n        return $count;\n    }\n\n    function getNumOpenTickets($forMyOrg=false) {\n        return $this->getNumTickets($forMyOrg, 'open') ?: 0;\n    }\n\n    function getNumClosedTickets($forMyOrg=false) {\n        return $this->getNumTickets($forMyOrg, 'closed') ?: 0;\n    }\n\n    function getNumTopicTickets($topic_id, $forMyOrg=false) {\n        $stats = $this->getTicketStats();\n        $section = $forMyOrg ? 'myorg' : 'mine';\n        if (!isset($this->topic_stats)) {\n            $this->topic_stats = array();\n            foreach ($stats[$section] as $row) {\n                $this->topic_stats[$row['topic_id']] += $row['count'];\n            }\n        }\n        return $this->topic_stats[$topic_id];\n    }\n\n    function getNumTopicTicketsInState($topic_id, $state=false, $forMyOrg=false) {\n        $stats = $this->getTicketStats();\n        $count = 0;\n        $section = $forMyOrg ? 'myorg' : 'mine';\n        foreach ($stats[$section] as $row) {\n            if ($topic_id != $row['topic_id'])\n                continue;\n            if ($state && $state != $row['status__state'])\n                continue;\n            $count += $row['count'];\n        }\n        return $count;\n    }\n\n    function getNumOrganizationTickets() {\n        return $this->getNumTickets(true);\n    }\n    function getNumOpenOrganizationTickets() {\n        return $this->getNumTickets(true, 'open');\n    }\n    function getNumClosedOrganizationTickets() {\n        return $this->getNumTickets(true, 'closed');\n    }\n\n    function getAccount() {\n        if ($this->_account === false)\n            $this->_account =\n                ClientAccount::lookup(array('user_id'=>$this->getId()));\n\n        return $this->_account;\n    }\n\n    function getUser() {\n        if ($this->user === false)\n            $this->user = User::lookup($this->getId());\n\n        return $this->user;\n    }\n\n    function getLanguage($flags=false) {\n        if ($acct = $this->getAccount())\n            return $acct->getLanguage($flags);\n    }\n\n    private function getStats() {\n        global $cfg;\n        $basic = Ticket::objects()\n            ->annotate(array('count' => SqlAggregate::COUNT('ticket_id')))\n            ->values('status__state', 'topic_id')\n            ->distinct('status_id', 'topic_id');\n\n        // Share tickets among the organization for owners only\n        $mine = clone $basic;\n        $collab = clone $basic;\n        $mine->filter(array(\n            'user_id' => $this->getId(),\n        ));\n\n        // Also add collaborator tickets to the list. This may seem ugly;\n        // but the general rule for SQL is that a single query can only use\n        // one index. Therefore, to scan two indexes (by user_id and\n        // thread.collaborators.user_id), we need two queries. A union will\n        // help out with that.\n        if ($cfg->collaboratorTicketsVisibility())\n            $mine->union($collab->filter(array(\n                'thread__collaborators__user_id' => $this->getId(),\n                Q::not(array('user_id' => $this->getId()))\n            )));\n\n        if ($orgid = $this->getOrgId()) {\n            // Also generate a separate query for all the tickets owned by\n            // either my organization or ones that I'm collaborating on\n            // which are not part of the organization.\n            $myorg = clone $basic;\n            $myorg->values('user__org_id');\n            $collab = clone $myorg;\n\n            $myorg->filter(array('user__org_id' => $orgid));\n            $myorg->union($collab->filter(array(\n                'thread__collaborators__user_id' => $this->getId(),\n                Q::not(array('user__org_id' => $orgid))\n            )));\n        }\n\n        return array('mine' => $mine, 'myorg' => $myorg);\n    }\n\n    function onLogin($bk) {\n        if ($account = $this->getAccount())\n            $account->onLogin($bk);\n    }\n}\n\nclass ClientAccount extends UserAccount {\n\n    function check_passwd($password, $autoupdate=true) {\n\n        /*bcrypt based password match*/\n        if(Passwd::cmp($password, $this->get('passwd')))\n            return true;\n\n        //Fall back to MD5\n        if(!$password || strcmp($this->get('passwd'), MD5($password)))\n            return false;\n\n        //Password is a MD5 hash: rehash it (if enabled) otherwise force passwd change.\n        if ($autoupdate)\n            $this->set('passwd', Passwd::hash($password));\n\n        if (!$autoupdate || !$this->save())\n            $this->forcePasswdReset();\n\n        return true;\n    }\n\n    function hasCurrentPassword($password) {\n        return $this->check_passwd($password, false);\n    }\n\n    function cancelResetTokens() {\n        // TODO: Drop password-reset tokens from the config table for\n        //       this user id\n        $sql = 'DELETE FROM '.CONFIG_TABLE.' WHERE `namespace`=\"pwreset\"\n            AND `value`='.db_input('c'.$this->getUserId());\n        if (!db_query($sql, false))\n            return false;\n\n        unset($_SESSION['_client']['reset-token']);\n    }\n\n    function onLogin($bk) {\n        $this->setExtraAttr('browser_lang',\n            Internationalization::getCurrentLanguage());\n        $this->save();\n    }\n\n    function update($vars, &$errors) {\n        global $cfg;\n\n        // FIXME: Updates by agents should go through UserAccount::update()\n        global $thisstaff, $thisclient;\n        if ($thisstaff)\n            return parent::update($vars, $errors);\n\n        $rtoken = $_SESSION['_client']['reset-token'];\n\n\n\t\tif ($rtoken) {\n\t\t\t$_config = new Config('pwreset');\n\t\t\tif ($_config->get($rtoken) != 'c'.$this->getUserId())\n\t\t\t\t$errors['err'] =\n\t\t\t\t\t__('Invalid reset token. Logout and try again');\n\t\t\telseif (!($ts = $_config->lastModified($rtoken))\n\t\t\t\t\t&& ($cfg->getPwResetWindow() < (time() - strtotime($ts))))\n\t\t\t\t$errors['err'] =\n\t\t\t\t\t__('Invalid reset token. Logout and try again');\n\t\t} elseif ($vars['passwd1'] || $vars['passwd2'] || $vars['cpasswd']) {\n\n            if (!$vars['passwd1'])\n                $errors['passwd1']=__('New password is required');\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2']=__('Passwords do not match');\n            elseif ($this->get('passwd')) {\n                if (!$vars['cpasswd'])\n                    $errors['cpasswd']=__('Current password is required');\n                elseif (!$this->hasCurrentPassword($vars['cpasswd']))\n                    $errors['cpasswd']=__('Invalid current password!');\n            }\n\n            // Check password policies\n\t\t\tif (!$errors) {\n                try {\n                    UserAccount::checkPassword($vars['passwd1'], @$vars['cpasswd']);\n                } catch (BadPassword $ex) {\n                    $errors['passwd1'] = $ex->getMessage();\n                }\n            }\n        }\n\n        // Timezone selection is not required. System default is a valid\n        // fallback\n\n        if ($errors) return false;\n\n        $this->set('timezone', $vars['timezone']);\n        // Change language\n        $this->set('lang', $vars['lang'] ?: null);\n        Internationalization::setCurrentLanguage(null);\n        TextDomain::configureForUser($this);\n\n        if ($vars['backend']) {\n            $this->set('backend', $vars['backend']);\n            if ($vars['username'])\n                $this->set('username', $vars['username']);\n        }\n\n        if ($vars['passwd1']) {\n            $this->set('passwd', Passwd::hash($vars['passwd1']));\n            $info = array('password' => $vars['passwd1']);\n            Signal::send('auth.pwchange', $this->getUser(), $info);\n            $this->cancelResetTokens();\n            $this->clearStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n            // Clean sessions\n            Signal::send('auth.clean', $this->getUser(), $thisclient);\n        }\n\n        return $this->save();\n    }\n}\n\n\ninterface ITicketUser {\n/* PHP 5.3 < 5.3.8 will crash with some abstract inheritance issue\n * ------------------------------------------------------------\n    function isOwner();\n    function flagGuest();\n    function isGuest();\n    function getUserId();\n    function getTicketId();\n    function getTicket();\n */\n}\n?>\n", "<?php\n/*********************************************************************\n    class.user.php\n\n    External end-user identification for osTicket\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.orm.php';\nrequire_once INCLUDE_DIR . 'class.util.php';\nrequire_once INCLUDE_DIR . 'class.variable.php';\nrequire_once INCLUDE_DIR . 'class.search.php';\nrequire_once INCLUDE_DIR . 'class.organization.php';\n\nclass UserEmailModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_EMAIL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id')\n            )\n        )\n    );\n\n    function __toString() {\n        return (string) $this->address;\n    }\n\n    static function getIdByEmail($email) {\n        $row = UserEmailModel::objects()\n            ->filter(array('address'=>$email))\n            ->values_flat('user_id')\n            ->first();\n\n        return $row ? $row[0] : 0;\n    }\n}\n\nclass UserModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_TABLE,\n        'pk' => array('id'),\n        'select_related' => array('default_email', 'org', 'account'),\n        'joins' => array(\n            'emails' => array(\n                'reverse' => 'UserEmailModel.user',\n            ),\n            'tickets' => array(\n                'null' => true,\n                'reverse' => 'Ticket.user',\n            ),\n            'account' => array(\n                'list' => false,\n                'null' => true,\n                'reverse' => 'ClientAccount.user',\n            ),\n            'org' => array(\n                'null' => true,\n                'constraint' => array('org_id' => 'Organization.id')\n            ),\n            'default_email' => array(\n                'null' => true,\n                'constraint' => array('default_email_id' => 'UserEmailModel.id')\n            ),\n            'cdata' => array(\n                'constraint' => array('id' => 'UserCdata.user_id'),\n                'null' => true,\n            ),\n            'entries' => array(\n                'constraint' => array(\n                    'id' => 'DynamicFormEntry.object_id',\n                    \"'U'\" => 'DynamicFormEntry.object_type',\n                ),\n                'list' => true,\n            ),\n        )\n    );\n\n    const PRIMARY_ORG_CONTACT   = 0x0001;\n\n    const PERM_CREATE =     'user.create';\n    const PERM_EDIT =       'user.edit';\n    const PERM_DELETE =     'user.delete';\n    const PERM_MANAGE =     'user.manage';\n    const PERM_DIRECTORY =  'user.dir';\n\n    static protected $perms = array(\n        self::PERM_CREATE => array(\n            'title' => /* @trans */ 'Create',\n            'desc' => /* @trans */ 'Ability to add new users',\n            'primary' => true,\n        ),\n        self::PERM_EDIT => array(\n            'title' => /* @trans */ 'Edit',\n            'desc' => /* @trans */ 'Ability to manage user information',\n            'primary' => true,\n        ),\n        self::PERM_DELETE => array(\n            'title' => /* @trans */ 'Delete',\n            'desc' => /* @trans */ 'Ability to delete users',\n            'primary' => true,\n        ),\n        self::PERM_MANAGE => array(\n            'title' => /* @trans */ 'Manage Account',\n            'desc' => /* @trans */ 'Ability to manage active user accounts',\n            'primary' => true,\n        ),\n        self::PERM_DIRECTORY => array(\n            'title' => /* @trans */ 'User Directory',\n            'desc' => /* @trans */ 'Ability to access the user directory',\n            'primary' => true,\n        ),\n    );\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getDefaultEmailAddress() {\n        return $this->getDefaultEmail()->address;\n    }\n\n    function getDefaultEmail() {\n        return $this->default_email;\n    }\n\n    function hasAccount() {\n        return !is_null($this->account);\n    }\n    function getAccount() {\n        return $this->account;\n    }\n\n    function getOrgId() {\n         return $this->get('org_id');\n    }\n\n    function getOrganization() {\n        return $this->org;\n    }\n\n    function setOrganization($org, $save=true) {\n\n        $this->set('org', $org);\n\n        if ($save)\n            $this->save();\n\n        return true;\n    }\n\n    public function setFlag($flag, $val) {\n        if ($val)\n            $this->status |= $flag;\n        else\n            $this->status &= ~$flag;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->get('status') & $flag !== 0;\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function isPrimaryContact() {\n        return $this->hasStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    function setPrimaryContact($flag) {\n        if ($flag)\n            $this->setStatus(User::PRIMARY_ORG_CONTACT);\n        else\n            $this->clearStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    static function getPermissions() {\n        return self::$perms;\n    }\n}\ninclude_once INCLUDE_DIR.'class.role.php';\nRolePermission::register(/* @trans */ 'Users', UserModel::getPermissions());\n\nclass UserCdata extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_CDATA_TABLE,\n        'pk' => array('user_id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id'),\n            ),\n        ),\n    );\n}\n\nclass User extends UserModel\nimplements TemplateVariable, Searchable {\n\n    var $_email;\n    var $_entries;\n    var $_forms;\n    var $_queue;\n\n\n\n    static function fromVars($vars, $create=true, $update=false) {\n        // Try and lookup by email address\n        $user = static::lookupByEmail($vars['email']);\n        if (!$user && $create) {\n            $name = $vars['name'];\n            if (is_array($name))\n                $name = implode(', ', $name);\n            elseif (!$name)\n                list($name) = explode('@', $vars['email'], 2);\n\n            $user = new User(array(\n                'name' => Format::htmldecode(Format::sanitize($name, false)),\n                'created' => new SqlFunction('NOW'),\n                'updated' => new SqlFunction('NOW'),\n                //XXX: Do plain create once the cause\n                // of the detached emails is fixed.\n                'default_email' => UserEmail::ensure($vars['email'])\n            ));\n            // Is there an organization registered for this domain\n            list($mailbox, $domain) = explode('@', $vars['email'], 2);\n            if (isset($vars['org_id']))\n                $user->set('org_id', $vars['org_id']);\n            elseif ($org = Organization::forDomain($domain))\n                $user->setOrganization($org, false);\n\n            try {\n                $user->save(true);\n                $user->emails->add($user->default_email);\n                // Attach initial custom fields\n                $user->addDynamicData($vars);\n            }\n            catch (OrmException $e) {\n                return null;\n            }\n            $type = array('type' => 'created');\n            Signal::send('object.created', $user, $type);\n            Signal::send('user.created', $user);\n        }\n        elseif ($update) {\n            $errors = array();\n            $user->updateInfo($vars, $errors, true);\n        }\n\n        return $user;\n    }\n\n    static function fromForm($form, $create=true) {\n        global $thisstaff;\n\n        if(!$form) return null;\n\n        //Validate the form\n        $valid = true;\n        $filter = function($f) use ($thisstaff) {\n            return !isset($thisstaff) || $f->isRequiredForStaff() || $f->isVisibleToStaff();\n        };\n        if (!$form->isValid($filter))\n            $valid  = false;\n\n        //Make sure the email is not in-use\n        if (($field=$form->getField('email'))\n                && $field->getClean()\n                && User::lookup(array('emails__address'=>$field->getClean()))) {\n            $field->addError(__('Email is assigned to another user'));\n            $valid = false;\n        }\n\n        return $valid ? self::fromVars($form->getClean(), $create) : null;\n    }\n\n    function getEmail() {\n\n        if (!isset($this->_email))\n            $this->_email = new EmailAddress(sprintf('\"%s\" <%s>',\n                    addcslashes($this->getName(), '\"'),\n                    $this->default_email->address));\n\n        return $this->_email;\n    }\n\n    function getAvatar($size=null) {\n        global $cfg;\n        $source = $cfg->getClientAvatarSource();\n        $avatar = $source->getAvatar($this);\n        if (isset($size))\n            $avatar->setSize($size);\n        return $avatar;\n    }\n\n    function getFullName() {\n        return $this->name;\n    }\n\n    function getPhoneNumber() {\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer('phone'))\n                return $a;\n    }\n\n    function getName() {\n        if (!$this->name)\n            list($name) = explode('@', $this->getDefaultEmailAddress(), 2);\n        else\n            $name = $this->name;\n        return new UsersName($name);\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getTimezone() {\n        global $cfg;\n\n        if (($acct = $this->getAccount()) && ($tz = $acct->getTimezone())) {\n            return $tz;\n        }\n        return $cfg->getDefaultTimezone();\n    }\n\n    function addForm($form, $sort=1, $data=null) {\n        $entry = $form->instanciate($sort, $data);\n        $entry->set('object_type', 'U');\n        $entry->set('object_id', $this->getId());\n        $entry->save();\n        return $entry;\n    }\n\n    function getLanguage($flags=false) {\n        if ($acct = $this->getAccount())\n            return $acct->getLanguage($flags);\n    }\n\n    function to_json() {\n\n        $info = array(\n                'id'  => $this->getId(),\n                'name' => Format::htmlchars($this->getName()),\n                'email' => (string) $this->getEmail(),\n                'phone' => (string) $this->getPhoneNumber());\n\n        return Format::json_encode($info);\n    }\n\n    function __toString() {\n        return $this->asVar();\n    }\n\n    function asVar() {\n        return (string) $this->getName();\n    }\n\n    function getVar($tag) {\n        $tag = mb_strtolower($tag);\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer($tag))\n                return $a;\n    }\n\n    static function getVarScope() {\n        $base = array(\n            'email' => array(\n                'class' => 'EmailAddress', 'desc' => __('Default email address')\n            ),\n            'name' => array(\n                'class' => 'PersonsName', 'desc' => 'User name, default format'\n            ),\n            'organization' => array('class' => 'Organization', 'desc' => __('Organization')),\n        );\n        $extra = VariableReplacer::compileFormScope(UserForm::getInstance());\n        return $base + $extra;\n    }\n\n    static function getSearchableFields() {\n        $base = array();\n        $uform = UserForm::getUserForm();\n        $base = array();\n        foreach ($uform->getFields() as $F) {\n            $fname = $F->get('name') ?: ('field_'.$F->get('id'));\n            # XXX: email in the model corresponds to `emails__address` ORM path\n            if ($fname == 'email')\n                $fname = 'emails__address';\n            if (!$F->hasData() || $F->isPresentationOnly())\n                continue;\n            if (!$F->isStorable())\n                $base[$fname] = $F;\n            else\n                $base[\"cdata__{$fname}\"] = $F;\n        }\n        return $base;\n    }\n\n    static function supportsCustomData() {\n        return true;\n    }\n\n    function addDynamicData($data) {\n        return $this->addForm(UserForm::objects()->one(), 1, $data);\n    }\n\n    function getDynamicData($create=true) {\n        if (!isset($this->_entries)) {\n            $this->_entries = DynamicFormEntry::forObject($this->id, 'U')->all();\n            if (!$this->_entries && $create) {\n                $g = UserForm::getNewInstance();\n                $g->setClientId($this->id);\n                $g->save();\n                $this->_entries[] = $g;\n            }\n        }\n\n        return $this->_entries ?: array();\n    }\n\n    function getFilterData() {\n        $vars = array();\n        foreach ($this->getDynamicData() as $entry) {\n            $vars += $entry->getFilterData();\n\n            // Add in special `name` and `email` fields\n            if ($entry->getDynamicForm()->get('type') != 'U')\n                continue;\n\n            foreach (array('name', 'email') as $name) {\n                if ($f = $entry->getField($name))\n                    $vars['field.'.$f->get('id')] =\n                        $name == 'name' ? $this->getName() : $this->getEmail();\n            }\n        }\n\n        return $vars;\n    }\n\n    function getForms($data=null, $cb=null) {\n\n        if (!isset($this->_forms)) {\n            $this->_forms = array();\n            $cb = $cb ?: function ($f) use($data) { return ($data); };\n            foreach ($this->getDynamicData() as $entry) {\n                $entry->addMissingFields();\n                if(($form = $entry->getDynamicForm())\n                        && $form->get('type') == 'U' ) {\n\n                    foreach ($entry->getFields() as $f) {\n                        if ($f->get('name') == 'name' && !$cb($f))\n                            $f->value = $this->getFullName();\n                        elseif ($f->get('name') == 'email' && !$cb($f))\n                            $f->value = $this->getEmail();\n                    }\n                }\n\n                $this->_forms[] = $entry;\n            }\n        }\n\n        return $this->_forms;\n    }\n\n    function getAccountStatus() {\n\n        if (!($account=$this->getAccount()))\n            return __('Guest');\n\n        return (string) $account->getStatus();\n    }\n\n    function canSeeOrgTickets() {\n        return $this->org && (\n                $this->org->shareWithEverybody()\n            || ($this->isPrimaryContact() && $this->org->shareWithPrimaryContacts()));\n    }\n\n    function register($vars, &$errors) {\n\n        // user already registered?\n        if ($this->getAccount())\n            return true;\n\n        return UserAccount::register($this, $vars, $errors);\n    }\n\n    static function importCsv($stream, $defaults=array()) {\n        require_once INCLUDE_DIR . 'class.import.php';\n\n        $importer = new CsvImporter($stream);\n        $imported = 0;\n        try {\n            db_autocommit(false);\n            $records = $importer->importCsv(UserForm::getUserForm()->getFields(), $defaults);\n            foreach ($records as $data) {\n                if (!Validator::is_email($data['email']) || empty($data['name']))\n                    throw new ImportError('Both `name` and `email` fields are required');\n                if (!($user = static::fromVars($data, true, true)))\n                    throw new ImportError(sprintf(__('Unable to import user: %s'),\n                        print_r(Format::htmlchars($data), true)));\n                $imported++;\n            }\n            db_autocommit(true);\n        }\n        catch (Exception $ex) {\n            db_rollback();\n            return $ex->getMessage();\n        }\n        return $imported;\n    }\n\n    static function importFromPost($stream, $extra=array()) {\n        if (!is_array($stream))\n            $stream = sprintf('name, email%s %s',PHP_EOL, $stream);\n\n        return User::importCsv($stream, $extra);\n    }\n\n    function updateInfo($vars, &$errors, $staff=false) {\n        $isEditable = function ($f) use($staff) {\n            return ($staff ? $f->isEditableToStaff() :\n                    $f->isEditableToUsers());\n        };\n        $valid = true;\n        $forms = $this->getForms($vars, $isEditable);\n        foreach ($forms as $entry) {\n            $entry->setSource($vars);\n            if ($staff && !$entry->isValidForStaff(true))\n                $valid = false;\n            elseif (!$staff && !$entry->isValidForClient(true))\n                $valid = false;\n            elseif ($entry->getDynamicForm()->get('type') == 'U'\n                    && ($f=$entry->getField('email'))\n                    && $isEditable($f)\n                    && $f->getClean()\n                    && ($u=User::lookup(array('emails__address'=>$f->getClean())))\n                    && $u->id != $this->getId()) {\n                $valid = false;\n                $f->addError(__('Email is assigned to another user'));\n            }\n\n            if (!$valid)\n                $errors = array_merge($errors, $entry->errors());\n        }\n\n\n        if (!$valid)\n            return false;\n\n        // Save the entries\n        foreach ($forms as $entry) {\n            $fields = $entry->getFields();\n            foreach ($fields as $field) {\n                $changes = $field->getChanges();\n                if ((is_array($changes) && $changes[0]) || $changes && !is_array($changes)) {\n                    $type = array('type' => 'edited', 'key' => $field->getLabel());\n                    Signal::send('object.edited', $this, $type);\n                }\n            }\n\n            if ($entry->getDynamicForm()->get('type') == 'U') {\n                //  Name field\n                if (($name = $entry->getField('name')) && $isEditable($name) ) {\n                    $name = $name->getClean();\n                    if (is_array($name))\n                        $name = implode(', ', $name);\n                    if ($this->name != $name) {\n                        $type = array('type' => 'edited', 'key' => 'Name');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->name = $name;\n                }\n\n                // Email address field\n                if (($email = $entry->getField('email'))\n                        && $isEditable($email)) {\n                    if ($this->default_email->address != $email->getClean()) {\n                        $type = array('type' => 'edited', 'key' => 'Email');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->default_email->address = $email->getClean();\n                    $this->default_email->save();\n                }\n            }\n\n            // DynamicFormEntry::saveAnswers returns the number of answers updated\n            if ($entry->saveAnswers($isEditable)) {\n                $this->updated = SqlFunction::NOW();\n            }\n        }\n\n        return $this->save();\n    }\n\n\n    function save($refetch=false) {\n        // Drop commas and reorganize the name without them\n        $parts = array_map('trim', explode(',', $this->name));\n        switch (count($parts)) {\n            case 2:\n                // Assume last, first --or-- last suff., first\n                $this->name = $parts[1].' '.$parts[0];\n                // XXX: Consider last, first suff.\n                break;\n            case 3:\n                // Assume last, first, suffix, write 'first last suffix'\n                $this->name = $parts[1].' '.$parts[0].' '.$parts[2];\n                break;\n        }\n\n        // Handle email addresses -- use the box name\n        if (Validator::is_email($this->name)) {\n            list($box, $domain) = explode('@', $this->name, 2);\n            if (strpos($box, '.') !== false)\n                $this->name = str_replace('.', ' ', $box);\n            else\n                $this->name = $box;\n            $this->name = mb_convert_case($this->name, MB_CASE_TITLE);\n        }\n\n        if (count($this->dirty)) //XXX: doesn't work??\n            $this->set('updated', new SqlFunction('NOW'));\n        return parent::save($refetch);\n    }\n\n    function delete() {\n        // Refuse to delete a user with tickets\n        if ($this->tickets->count())\n            return false;\n\n        // Delete account record (if any)\n        if ($this->getAccount())\n            $this->getAccount()->delete();\n\n        // Delete emails.\n        $this->emails->expunge();\n\n        // Drop dynamic data\n        foreach ($this->getDynamicData() as $entry) {\n            $entry->delete();\n        }\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // Delete user\n        return parent::delete();\n    }\n\n    function deleteAllTickets() {\n        $status_id = TicketStatus::lookup(array('state' => 'deleted'));\n        foreach($this->tickets as $ticket) {\n            if (!$T = Ticket::lookup($ticket->getId()))\n                continue;\n            if (!$T->setStatus($status_id))\n                return false;\n        }\n        $this->tickets->reset();\n        return true;\n    }\n\n    static function lookupByEmail($email) {\n        return static::lookup(array('emails__address'=>$email));\n    }\n\n    static function getNameById($id) {\n        if ($user = static::lookup($id))\n            return $user->getName();\n    }\n\n    static function getLink($id) {\n        global $thisstaff;\n\n        if (!$id || !$thisstaff)\n            return false;\n\n        return ROOT_PATH . sprintf('scp/users.php?id=%s', $id);\n    }\n\n    function getTicketsQueue($collabs=true) {\n        global $thisstaff;\n\n        if (!$this->_queue) {\n            $email = $this->getDefaultEmailAddress();\n            $filter = [\n                ['user__id', 'equal', $this->getId()],\n            ];\n            if ($collabs)\n                $filter = [\n                    ['user__emails__address', 'equal', $email],\n                    ['thread__collaborators__user__emails__address', 'equal',  $email],\n                ];\n            $this->_queue = new AdhocSearch(array(\n                'id' => 'adhoc,uid'.$this->getId(),\n                'root' => 'T',\n                'staff_id' => $thisstaff->getId(),\n                'title' => $this->getName()\n            ));\n            $this->_queue->config = $filter;\n        }\n\n        return $this->_queue;\n    }\n}\n\nclass EmailAddress\nimplements TemplateVariable {\n    var $email;\n    var $address;\n    protected $_info;\n\n    function __construct($address) {\n        $this->_info = self::parse($address);\n        $this->email = sprintf('%s@%s',\n                $this->getMailbox(),\n                $this->getDomain());\n\n        if ($this->getName())\n            $this->address = sprintf('\"%s\" <%s>',\n                    $this->getName(),\n                    $this->email);\n    }\n\n    function __toString() {\n        return (string) $this->email;\n    }\n\n    function getVar($what) {\n\n        if (!$this->_info)\n            return '';\n\n        switch ($what) {\n        case 'host':\n        case 'domain':\n            return $this->_info->host;\n        case 'personal':\n            return trim($this->_info->personal, '\"');\n        case 'mailbox':\n            return $this->_info->mailbox;\n        }\n    }\n\n    function getAddress() {\n        return $this->address ?: $this->email;\n    }\n\n    function getHost() {\n        return $this->getVar('host');\n    }\n\n    function getDomain() {\n        return $this->getHost();\n    }\n\n    function getName() {\n        return $this->getVar('personal');\n    }\n\n    function getMailbox() {\n        return $this->getVar('mailbox');\n    }\n\n    // Parse and email adddress (RFC822) into it's parts.\n    // @address - one address is expected\n    static function parse($address) {\n        require_once PEAR_DIR . 'PEAR.php';\n        if (($parts = Mail_Parse::parseAddressList($address))\n                && !PEAR::isError($parts))\n            return current($parts);\n    }\n\n    static function getVarScope() {\n        return array(\n            'domain' => __('Domain'),\n            'mailbox' => __('Mailbox'),\n            'personal' => __('Personal name'),\n        );\n    }\n}\n\nclass PersonsName\nimplements TemplateVariable {\n    var $format;\n    var $parts;\n    var $name;\n\n    static $formats = array(\n        'first' => array(     /*@trans*/ \"First\", 'getFirst'),\n        'last' => array(      /*@trans*/ \"Last\", 'getLast'),\n        'full' => array(      /*@trans*/ \"First Last\", 'getFull'),\n        'legal' => array(     /*@trans*/ \"First M. Last\", 'getLegal'),\n        'lastfirst' => array( /*@trans*/ \"Last, First\", 'getLastFirst'),\n        'formal' => array(    /*@trans*/ \"Mr. Last\", 'getFormal'),\n        'short' => array(     /*@trans*/ \"First L.\", 'getShort'),\n        'shortformal' => array(/*@trans*/ \"F. Last\", 'getShortFormal'),\n        'complete' => array(  /*@trans*/ \"Mr. First M. Last Sr.\", 'getComplete'),\n        'original' => array(  /*@trans*/ '-- As Entered --', 'getOriginal'),\n    );\n\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if ($format && isset(static::$formats[$format]))\n            $this->format = $format;\n        else\n            $this->format = 'original';\n\n        if (!is_array($name)) {\n            $this->parts = static::splitName($name);\n            $this->name = $name;\n        }\n        else {\n            $this->parts = $name;\n            $this->name = implode(' ', $name);\n        }\n    }\n\n    function getFirst() {\n        return $this->parts['first'];\n    }\n\n    function getLast() {\n        return $this->parts['last'];\n    }\n\n    function getMiddle() {\n        return $this->parts['middle'];\n    }\n\n    function getFirstInitial() {\n        if ($this->parts['first'])\n            return mb_substr($this->parts['first'],0,1).'.';\n        return '';\n    }\n\n    function getMiddleInitial() {\n        if ($this->parts['middle'])\n            return mb_substr($this->parts['middle'],0,1).'.';\n        return '';\n    }\n\n    function getLastInitial() {\n        if ($this->parts['last'])\n            return mb_substr($this->parts['last'],0,1).'.';\n        return '';\n    }\n\n    function getFormal() {\n        return trim($this->parts['salutation'].' '.$this->parts['last']);\n    }\n\n    function getFull() {\n        return trim($this->parts['first'].' '.$this->parts['last']);\n    }\n\n    function getLegal() {\n        $parts = array(\n            $this->parts['first'],\n            $this->getMiddleInitial(),\n            $this->parts['last'],\n        );\n        return implode(' ', array_filter($parts));\n    }\n\n    function getComplete() {\n        $parts = array(\n            $this->parts['salutation'],\n            $this->parts['first'],\n            $this->getMiddleInitial(),\n            $this->parts['last'],\n            $this->parts['suffix']\n        );\n        return implode(' ', array_filter($parts));\n    }\n\n    function getLastFirst() {\n        $name = $this->parts['last'].', '.$this->parts['first'];\n        $name = trim($name, ', ');\n        if ($this->parts['suffix'])\n            $name .= ', '.$this->parts['suffix'];\n        return $name;\n    }\n\n    function getShort() {\n        return $this->parts['first'].' '.$this->getLastInitial();\n    }\n\n    function getShortFormal() {\n        return $this->getFirstInitial().' '.$this->parts['last'];\n    }\n\n    function getOriginal() {\n        return $this->name;\n    }\n\n    function getInitials() {\n        $names = array($this->parts['first']);\n        $names = array_merge($names, explode(' ', $this->parts['middle']));\n        $names[] = $this->parts['last'];\n        $initials = '';\n        foreach (array_filter($names) as $n)\n            $initials .= mb_substr($n,0,1);\n        return mb_convert_case($initials, MB_CASE_UPPER);\n    }\n\n    function getName() {\n        return $this;\n    }\n\n    function getNameFormats($user, $type) {\n      $nameFormats = array();\n\n      foreach (PersonsName::allFormats() as $format => $func) {\n          $nameFormats[$type . '.name.' . $format] = $user->getName()->$func[1]();\n      }\n\n      return $nameFormats;\n    }\n\n    function asVar() {\n        return $this->__toString();\n    }\n\n    static function getVarScope() {\n        $formats = array();\n        foreach (static::$formats as $name=>$info) {\n            if (in_array($name, array('original', 'complete')))\n                continue;\n            $formats[$name] = $info[0];\n        }\n        return $formats;\n    }\n\n    function __toString() {\n\n        @list(, $func) = static::$formats[$this->format];\n        if (!$func) $func = 'getFull';\n\n        return (string) call_user_func(array($this, $func));\n    }\n\n    static function allFormats() {\n        return static::$formats;\n    }\n\n    /**\n     * Thanks, http://stackoverflow.com/a/14420217\n     */\n    static function splitName($name) {\n        $results = array();\n\n        $r = explode(' ', $name);\n        $size = count($r);\n\n        //check if name is bad format (ex: J.Everybody), and fix them\n        if($size==1 && mb_strpos($r[0], '.') !== false)\n        {\n            $r = explode('.', $name);\n            $size = count($r);\n        }\n\n        //check first for period, assume salutation if so\n        if (mb_strpos($r[0], '.') === false)\n        {\n            $results['salutation'] = '';\n            $results['first'] = $r[0];\n        }\n        else\n        {\n            $results['salutation'] = $r[0];\n            $results['first'] = $r[1];\n        }\n\n        //check last for period, assume suffix if so\n        if (mb_strpos($r[$size - 1], '.') === false)\n        {\n            $results['suffix'] = '';\n        }\n        else\n        {\n            $results['suffix'] = $r[$size - 1];\n        }\n\n        //combine remains into last\n        $start = ($results['salutation']) ? 2 : 1;\n        $end = ($results['suffix']) ? $size - 2 : $size - 1;\n\n        $middle = array();\n        for ($i = $start; $i <= $end; $i++)\n        {\n            $middle[] = $r[$i];\n        }\n        if (count($middle) > 1) {\n            $results['last'] = array_pop($middle);\n            $results['middle'] = implode(' ', $middle);\n        }\n        else {\n            $results['last'] = $middle[0];\n            $results['middle'] = '';\n        }\n\n        return $results;\n    }\n\n}\n\nclass AgentsName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if (!$format && $cfg)\n            $format = $cfg->getAgentNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\nclass UsersName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n        if (!$format && $cfg)\n            $format = $cfg->getClientNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\n\nclass UserEmail extends UserEmailModel {\n    static function ensure($address) {\n        $email = static::lookup(array('address'=>$address));\n        if (!$email) {\n            $email = new static(array('address'=>$address));\n            $email->save();\n        }\n        return $email;\n    }\n}\n\n\nclass UserAccount extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_ACCOUNT_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'null' => false,\n                'constraint' => array('user_id' => 'User.id')\n            ),\n        ),\n    );\n\n    const LANG_MAILOUTS = 1;            // Language preference for mailouts\n\n    var $_status;\n    var $_extra;\n\n    function getStatus() {\n        if (!isset($this->_status))\n            $this->_status = new UserAccountStatus($this->get('status'));\n        return $this->_status;\n    }\n\n    function statusChanged($flag, $var) {\n        if (($this->hasStatus($flag) && !$var) ||\n            (!$this->hasStatus($flag) && $var))\n                return true;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->getStatus()->check($flag);\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function confirm() {\n        $this->setStatus(UserAccountStatus::CONFIRMED);\n        return $this->save();\n    }\n\n    function isConfirmed() {\n        return $this->getStatus()->isConfirmed();\n    }\n\n    function lock() {\n        $this->setStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function unlock() {\n        $this->clearStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function isLocked() {\n        return $this->getStatus()->isLocked();\n    }\n\n    function isActive() {\n        return (!$this->isLocked() && $this->isConfirmed());\n    }\n\n    function forcePasswdReset() {\n        $this->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n        return $this->save();\n    }\n\n    function isPasswdResetForced() {\n        return $this->hasStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n    }\n\n    function isPasswdResetEnabled() {\n        return !$this->hasStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n    }\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function getId() {\n        return $this->get('id');\n    }\n\n    function getUserId() {\n        return $this->get('user_id');\n    }\n\n    function getUser() {\n        return $this->user;\n    }\n\n    function getUserName() {\n        return $this->getUser()->getName();\n    }\n\n    function getExtraAttr($attr=false, $default=null) {\n        if (!isset($this->_extra))\n            $this->_extra = JsonDataParser::decode($this->get('extra', ''));\n\n        return $attr ? (@$this->_extra[$attr] ?: $default) : $this->_extra;\n    }\n\n    function setExtraAttr($attr, $value) {\n        $this->getExtraAttr();\n        $this->_extra[$attr] = $value;\n    }\n\n    /**\n     * Function: getLanguage\n     *\n     * Returns the language preference for the user or false if no\n     * preference is defined. False indicates the browser indicated\n     * preference should be used. For requests apart from browser requests,\n     * the last language preference of the browser is set in the\n     * 'browser_lang' extra attribute upon logins. Send the LANG_MAILOUTS\n     * flag to also consider this saved value. Such is useful when sending\n     * the user a message (such as an email), and the user's browser\n     * preference is not available in the HTTP request.\n     *\n     * Parameters:\n     * $flags - (int) Send UserAccount::LANG_MAILOUTS if the user's\n     *      last-known browser preference should be considered. Normally\n     *      only the user's saved language preference is considered.\n     *\n     * Returns:\n     * Current or last-known language preference or false if no language\n     * preference is currently set or known.\n     */\n    function getLanguage($flags=false) {\n        $lang = $this->get('lang', false);\n        if (!$lang && ($flags & UserAccount::LANG_MAILOUTS))\n            $lang = $this->getExtraAttr('browser_lang', false);\n\n        return $lang;\n    }\n\n    function getTimezone() {\n        return $this->timezone;\n    }\n\n    function save($refetch=false) {\n        // Serialize the extra column on demand\n        if (isset($this->_extra)) {\n            $this->extra = JsonDataEncoder::encode($this->_extra);\n        }\n        return parent::save($refetch);\n    }\n\n    function hasPassword() {\n        return (bool) $this->get('passwd');\n    }\n\n    function sendResetEmail() {\n        return $this->sendUnlockEmail('pwreset-client') === true;\n    }\n\n    function sendConfirmEmail() {\n        return $this->sendUnlockEmail('registration-client') === true;\n    }\n\n    function setPassword($new) {\n        $this->set('passwd', Passwd::hash($new));\n        // Clean sessions\n        Signal::send('auth.clean', $this->getUser());\n    }\n\n    protected function sendUnlockEmail($template) {\n        global $ost, $cfg;\n\n        $token = Misc::randCode(48); // 290-bits\n\n        $email = $cfg->getDefaultEmail();\n        $content = Page::lookupByType($template);\n\n        if (!$email ||  !$content)\n            return new BaseError(sprintf(_S('%s: Unable to retrieve template'),\n                $template));\n\n        $vars = array(\n            'url' => $ost->getConfig()->getBaseUrl(),\n            'token' => $token,\n            'user' => $this->getUser(),\n            'recipient' => $this->getUser(),\n            'link' => sprintf(\n                \"%s/pwreset.php?token=%s\",\n                $ost->getConfig()->getBaseUrl(),\n                $token),\n        );\n        $vars['reset_link'] = &$vars['link'];\n\n        $info = array('email' => $email, 'vars' => &$vars, 'log'=>true);\n        Signal::send('auth.pwreset.email', $this->getUser(), $info);\n\n        $lang = $this->getLanguage(UserAccount::LANG_MAILOUTS);\n        $msg = $ost->replaceTemplateVariables(array(\n            'subj' => $content->getLocalName($lang),\n            'body' => $content->getLocalBody($lang),\n        ), $vars);\n\n        $_config = new Config('pwreset');\n        $_config->set($vars['token'], 'c'.$this->getUser()->getId());\n\n        $email->send($this->getUser()->getEmail(),\n            Format::striptags($msg['subj']), $msg['body']);\n\n        return true;\n    }\n\n    function __toString() {\n        return (string) $this->getStatus();\n    }\n\n    /*\n     * Updates may be done by Staff or by the User if registration\n     * options are set to Public\n     */\n    function update($vars, &$errors) {\n        // TODO: Make sure the username is unique\n\n        // Timezone selection is not required. System default is a valid\n        // fallback\n\n        // Changing password?\n        if ($vars['passwd1'] || $vars['passwd2']) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = __('New password is required');\n            else {\n                try {\n                    self::checkPassword($vars['passwd1']);\n                } catch (BadPassword $ex) {\n                    $errors['passwd1'] =  $ex->getMessage();\n                }\n            }\n        }\n\n        // Make sure the username is not an email.\n        if ($vars['username'] && Validator::is_email($vars['username']))\n            $errors['username'] =\n                __('Users can always sign in with their email address');\n\n        if ($errors) return false;\n\n        //flags\n        $pwreset = $this->statusChanged(UserAccountStatus::REQUIRE_PASSWD_RESET, $vars['pwreset-flag']);\n        $locked = $this->statusChanged(UserAccountStatus::LOCKED, $vars['locked-flag']);\n        $forbidPwChange = $this->statusChanged(UserAccountStatus::FORBID_PASSWD_RESET, $vars['forbid-pwchange-flag']);\n\n        $info = $this->getInfo();\n        foreach ($vars as $key => $value) {\n            if (($key != 'id' && $info[$key] && $info[$key] != $value) || ($pwreset && $key == 'pwreset-flag' ||\n                    $locked && $key == 'locked-flag' || $forbidPwChange && $key == 'forbid-pwchange-flag')) {\n                $type = array('type' => 'edited', 'key' => $key);\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n\n        $this->set('timezone', $vars['timezone']);\n        $this->set('username', $vars['username']);\n\n        if ($vars['passwd1']) {\n            $this->setPassword($vars['passwd1']);\n            $this->setStatus(UserAccountStatus::CONFIRMED);\n            $type = array('type' => 'edited', 'key' => 'password');\n            Signal::send('object.edited', $this, $type);\n        }\n\n        // Set flags\n        foreach (array(\n                'pwreset-flag' => UserAccountStatus::REQUIRE_PASSWD_RESET,\n                'locked-flag' => UserAccountStatus::LOCKED,\n                'forbid-pwchange-flag' => UserAccountStatus::FORBID_PASSWD_RESET\n        ) as $ck=>$flag) {\n            if ($vars[$ck])\n                $this->setStatus($flag);\n            else {\n                if (($pwreset && $ck == 'pwreset-flag') || ($locked && $ck == 'locked-flag') ||\n                    ($forbidPwChange && $ck == 'forbid-pwchange-flag')) {\n                        $type = array('type' => 'edited', 'key' => $ck);\n                        Signal::send('object.edited', $this, $type);\n                }\n                $this->clearStatus($flag);\n            }\n        }\n\n        return $this->save(true);\n    }\n\n    static function createForUser($user, $defaults=false) {\n        $acct = new static(array('user_id'=>$user->getId()));\n        if ($defaults && is_array($defaults)) {\n            foreach ($defaults as $k => $v)\n                $acct->set($k, $v);\n        }\n        return $acct;\n    }\n\n    static function lookupByUsername($username) {\n        if (Validator::is_email($username))\n            $user = static::lookup(array('user__emails__address' => $username));\n        elseif (Validator::is_userid($username))\n            $user = static::lookup(array('username' => $username));\n\n        return $user;\n    }\n\n    static function register($user, $vars, &$errors) {\n\n        if (!$user || !$vars)\n            return false;\n\n        //Require temp password.\n        if ((!$vars['backend'] || $vars['backend'] != 'client')\n                && !isset($vars['sendemail'])) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = 'Temporary password required';\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2'] = 'Passwords do not match';\n            else {\n                try {\n                    self::checkPassword($vars['passwd1']);\n                } catch (BadPassword $ex) {\n                    $errors['passwd1'] =  $ex->getMessage();\n                }\n            }\n        }\n\n        if ($errors) return false;\n\n        $account = new UserAccount(array(\n            'user_id' => $user->getId(),\n            'timezone' => $vars['timezone'],\n            'backend' => $vars['backend'],\n        ));\n\n        if ($vars['username'] && strcasecmp($vars['username'], $user->getEmail()))\n            $account->set('username', $vars['username']);\n\n        if ($vars['passwd1'] && !$vars['sendemail']) {\n            $account->set('passwd', Passwd::hash($vars['passwd1']));\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n            if ($vars['pwreset-flag'])\n                $account->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n            if ($vars['forbid-pwreset-flag'])\n                $account->setStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n        }\n        elseif ($vars['backend'] && $vars['backend'] != 'client') {\n            // Auto confirm remote accounts\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n        }\n\n        $account->save(true);\n\n        if (!$account->isConfirmed() && $vars['sendemail'])\n            $account->sendConfirmEmail();\n\n        return $account;\n    }\n\n    static function checkPassword($new, $current=null) {\n        osTicketClientAuthentication::checkPassword($new, $current);\n    }\n\n}\n\nclass UserAccountStatus {\n\n    var $flag;\n\n    const CONFIRMED             = 0x0001;\n    const LOCKED                = 0x0002;\n    const REQUIRE_PASSWD_RESET  = 0x0004;\n    const FORBID_PASSWD_RESET   = 0x0008;\n\n    function __construct($flag) {\n        $this->flag = $flag;\n    }\n\n    function check($flag) {\n        return 0 !== ($this->flag & $flag);\n    }\n\n    function isLocked() {\n        return $this->check(self::LOCKED);\n    }\n\n    function isConfirmed() {\n        return $this->check(self::CONFIRMED);\n    }\n\n    function __toString() {\n\n        if ($this->isLocked())\n            return __('Locked (Administrative)');\n\n        if (!$this->isConfirmed())\n            return __('Locked (Pending Activation)');\n\n        // ... Other flags here (password reset, etc).\n\n        return __('Active (Registered)');\n    }\n}\n\n/*\n *  Generic user list.\n */\nclass UserList extends MailingList {\n\n   function add($user) {\n        if (!$user instanceof ITicketUser)\n            throw new InvalidArgumentException('User expected');\n\n        return parent::add($user);\n    }\n}\n\n?>\n", "<?php\n$account = $user->getAccount();\n$access = (isset($info['_target']) && $info['_target'] == 'access');\n$org = $user->getOrganization();\n\nif (!$info['title'])\n    $info['title'] = Format::htmlchars($user->getName());\n?>\n<h3 class=\"drag-handle\"><?php echo $info['title']; ?></h3>\n<b><a class=\"close\" href=\"#\"><i class=\"icon-remove-circle\"></i></a></b>\n<div class=\"clear\"></div>\n<hr/>\n<?php\nif ($info['error']) {\n    echo sprintf('<p id=\"msg_error\">%s</p>', $info['error']);\n} elseif ($info['msg']) {\n    echo sprintf('<p id=\"msg_notice\">%s</p>', $info['msg']);\n} ?>\n<form method=\"post\" class=\"user\" action=\"#users/<?php echo $user->getId(); ?>/manage\" >\n<ul class=\"tabs\" id=\"user-account-tabs\">\n    <li <?php echo !$access? 'class=\"active\"' : ''; ?>><a href=\"#user-account\"\n        ><i class=\"icon-user\"></i>&nbsp;<?php echo __('User Information'); ?></a></li>\n    <li <?php echo $access? 'class=\"active\"' : ''; ?>><a href=\"#user-access\"\n        ><i class=\"icon-fixed-width icon-lock faded\"></i>&nbsp;<?php echo __('Manage Access'); ?></a></li>\n</ul>\n\n\n <input type=\"hidden\" name=\"id\" value=\"<?php echo $user->getId(); ?>\" />\n<div id=\"user-account-tabs_container\">\n <div class=\"tab_content\"  id=\"user-account\" style=\"display:<?php echo $access? 'none' : 'block'; ?>; margin:5px;\">\n    <form method=\"post\" class=\"user\" action=\"#users/<?php echo $user->getId(); ?>/manage\" >\n        <input type=\"hidden\" name=\"id\" value=\"<?php echo $user->getId(); ?>\" />\n        <table width=\"100%\">\n        <tbody>\n            <tr>\n                <th colspan=\"2\">\n                    <em><strong><?php echo __('User Information'); ?></strong></em>\n                </th>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Name'); ?>:\n                </td>\n                <td> <?php echo Format::htmlchars($user->getName()); ?> </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Email'); ?>:\n                </td>\n                <td> <?php echo $user->getEmail(); ?> </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Organization'); ?>:\n                </td>\n                <td><?php echo $org ? Format::htmlchars($org->getName()) : ''; ?></td>\n            </tr>\n        </tbody>\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo __('User Preferences'); ?></strong></em></th>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Time Zone');?>:\n                </td>\n                <td>\n                    <?php\n                    $TZ_NAME = 'timezone';\n                    $TZ_TIMEZONE = $info['timezone'];\n                    include STAFFINC_DIR.'templates/timezone.tmpl.php'; ?>\n                    <div class=\"error\"><?php echo $errors['timezone']; ?></div>\n                </td>\n            </tr>\n        </tbody>\n        </table>\n </div>\n <div class=\"tab_content\"  id=\"user-access\" style=\"display:<?php echo $access? 'block' : 'none'; ?>; margin:5px;\">\n        <table width=\"100%\">\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo __('Account Access'); ?></strong></em></th>\n            </tr>\n            <tr>\n                <td width=\"180\"><?php echo __('Status'); ?>:</td>\n                <td> <?php echo $user->getAccountStatus(); ?> </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Username'); ?>:\n                </td>\n                <td>\n                    <input type=\"text\" size=\"35\" name=\"username\" value=\"<?php echo $info['username']; ?>\" autocomplete=\"new-password\">\n                    <i class=\"help-tip icon-question-sign\" data-title=\"<?php\n                        echo __(\"Login via email\"); ?>\"\n                    data-content=\"<?php echo sprintf('%s: %s',\n                        __('Users can always sign in with their email address'),\n                        $user->getEmail()); ?>\"></i>\n                    <div class=\"error\"><?php echo $errors['username']; ?></div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('New Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd1\" value=\"<?php echo $info['passwd1']; ?>\" autocomplete=\"new-password\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo\n                    $errors['passwd1']; ?></span>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                   <?php echo __('Confirm Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd2\" value=\"<?php echo $info['passwd2']; ?>\" autocomplete=\"new-password\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo $errors['passwd2']; ?></span>\n                </td>\n            </tr>\n        </tbody>\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo __('Account Flags'); ?></strong></em></th>\n            </tr>\n            <tr>\n                <td colspan=\"2\">\n                <?php\n                  echo sprintf('<div><input type=\"checkbox\" name=\"locked-flag\" %s\n                       value=\"1\"> %s</div>',\n                       $account->isLocked() ?  'checked=\"checked\"' : '',\n                       __('Administratively Locked')\n                       );\n                  ?>\n                   <div><input type=\"checkbox\" name=\"pwreset-flag\" value=\"1\" <?php\n                    echo $account->isPasswdResetForced() ?\n                    'checked=\"checked\"' : ''; ?>> <?php echo __('Password Reset Required'); ?></div>\n                   <div><input type=\"checkbox\" name=\"forbid-pwchange-flag\" value=\"1\" <?php\n                    echo !$account->isPasswdResetEnabled() ?\n                    'checked=\"checked\"' : ''; ?>> <?php echo __('User cannot change password'); ?></div>\n                </td>\n            </tr>\n        </tbody>\n        </table>\n   </div>\n   </div>\n   <hr>\n   <p class=\"full-width\">\n        <span class=\"buttons pull-left\">\n            <input type=\"reset\" value=\"<?php echo __('Reset'); ?>\">\n            <input type=\"button\" name=\"cancel\" class=\"close\" value=\"<?php echo __('Cancel'); ?>\">\n        </span>\n        <span class=\"buttons pull-right\">\n            <input type=\"submit\"\n                value=\"<?php echo __('Save Changes'); ?>\">\n        </span>\n    </p>\n</form>\n<div class=\"clear\"></div>\n<script type=\"text/javascript\">\n$(function() {\n    $(document).on('click', 'input#sendemail', function(e) {\n        if ($(this).prop('checked'))\n            $('tbody#password').hide();\n        else\n            $('tbody#password').show();\n    });\n});\n</script>\n", "<?php\nglobal $cfg;\n\nif (!$info['title'])\n    $info['title'] = sprintf(__('Register: %s'), Format::htmlchars($user->getName()));\n\nif (!$_POST) {\n    $info['sendemail'] = true; // send email confirmation.\n}\n\n?>\n<h3 class=\"drag-handle\"><?php echo $info['title']; ?></h3>\n<b><a class=\"close\" href=\"#\"><i class=\"icon-remove-circle\"></i></a></b>\n<div class=\"clear\"></div>\n<hr/>\n<?php\nif ($info['error']) {\n    echo sprintf('<p id=\"msg_error\">%s</p>', $info['error']);\n} elseif ($info['msg']) {\n    echo sprintf('<p id=\"msg_notice\">%s</p>', $info['msg']);\n} ?>\n<div><p id=\"msg_info\"><i class=\"icon-info-sign\"></i>&nbsp;<?php\necho sprintf(__(\n'Complete the form below to create a user account for <b>%s</b>.'\n), Format::htmlchars($user->getName()->getOriginal())\n); ?>\n</p></div>\n<div id=\"user-registration\" style=\"display:block; margin:5px;\">\n    <form method=\"post\" class=\"user\"\n        action=\"#users/<?php echo $user->getId(); ?>/register\">\n        <input type=\"hidden\" name=\"id\" value=\"<?php echo $user->getId(); ?>\" />\n        <table width=\"100%\">\n        <tbody>\n            <tr>\n                <th colspan=\"2\">\n                    <em><strong><?php echo __('User Account Login'); ?></strong></em>\n                </th>\n            </tr>\n            <tr>\n                <td><?php echo __('Authentication Sources'); ?>:</td>\n                <td>\n            <select name=\"backend\" id=\"backend-selection\" onchange=\"javascript:\n                if (this.value != '' && this.value != 'client') {\n                    $('#activation').hide();\n                    $('#password').hide();\n                }\n                else {\n                    $('#activation').show();\n                    if ($('#sendemail').is(':checked'))\n                        $('#password').hide();\n                    else\n                        $('#password').show();\n                }\n                \">\n                <option value=\"\">&mdash; <?php echo __('Use any available backend'); ?> &mdash;</option>\n            <?php foreach (UserAuthenticationBackend::allRegistered() as $ab) {\n                if (!$ab->supportsInteractiveAuthentication()) continue; ?>\n                <option value=\"<?php echo $ab::$id; ?>\" <?php\n                    if ($info['backend'] == $ab::$id)\n                        echo 'selected=\"selected\"'; ?>><?php\n                    echo $ab->getName(); ?></option>\n            <?php } ?>\n            </select>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Username'); ?>:\n                </td>\n                <td>\n                    <input type=\"text\" size=\"35\" name=\"username\" value=\"<?php echo $info['username'] ?: $user->getEmail(); ?>\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo $errors['username']; ?></span>\n                </td>\n            </tr>\n        </tbody>\n        <tbody id=\"activation\">\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Status'); ?>:\n                </td>\n                <td>\n                  <input type=\"checkbox\" id=\"sendemail\" name=\"sendemail\" value=\"1\"\n                    <?php echo $info['sendemail'] ? 'checked=\"checked\"' :\n                    ''; ?> ><?php echo sprintf(__(\n                    'Send account activation email to %s.'), $user->getEmail()); ?>\n                </td>\n            </tr>\n        </tbody>\n        <tbody id=\"password\"\n            style=\"<?php echo $info['sendemail'] ? 'display:none;' : ''; ?>\"\n            >\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Temporary Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd1\" value=\"<?php echo $info['passwd1']; ?>\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo\n                    $errors['passwd1']; ?></span>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                   <?php echo __('Confirm Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd2\" value=\"<?php echo $info['passwd2']; ?>\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo $errors['passwd2']; ?></span>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <?php echo __('Password Change'); ?>:\n                </td>\n                <td colspan=2>\n                    <input type=\"checkbox\" name=\"pwreset-flag\" value=\"1\" <?php\n                        echo $info['pwreset-flag'] ?  'checked=\"checked\"' : ''; ?>>\n                        <?php echo __('Require password change on login'); ?>\n                    <br/>\n                    <input type=\"checkbox\" name=\"forbid-pwreset-flag\" value=\"1\" <?php\n                        echo $info['forbid-pwreset-flag'] ?  'checked=\"checked\"' : ''; ?>>\n                        <?php echo __('User cannot change password'); ?>\n                </td>\n            </tr>\n        </tbody>\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo\n                    __('User Preferences'); ?></strong></em></th>\n            </tr>\n                <td><?php echo __('Time Zone'); ?>:</td>\n                <td>\n                    <?php\n                    $TZ_NAME = 'timezone';\n                    $TZ_TIMEZONE = $info['timezone'];\n                    include STAFFINC_DIR.'templates/timezone.tmpl.php'; ?>\n                    <div class=\"error\"><?php echo $errors['timezone']; ?></div>\n                </td>\n            </tr>\n        </tbody>\n        </table>\n        <hr>\n        <p class=\"full-width\">\n            <span class=\"buttons pull-left\">\n                <input type=\"reset\" value=\"<?php echo __('Reset'); ?>\">\n                <input type=\"button\" name=\"cancel\" class=\"close\" value=\"<?php echo __('Cancel'); ?>\">\n            </span>\n            <span class=\"buttons pull-right\">\n                <input type=\"submit\" value=\"<?php echo __('Create Account'); ?>\">\n            </span>\n         </p>\n    </form>\n</div>\n<div class=\"clear\"></div>\n<script type=\"text/javascript\">\n$(function() {\n    $(document).on('click', 'input#sendemail', function(e) {\n        if ($(this).prop('checked'))\n            $('tbody#password').hide();\n        else\n            $('tbody#password').show();\n    });\n});\n</script>\n"], "fixing_code": ["<?php\n/*********************************************************************\n    ajax.users.php\n\n    AJAX interface for  users (based on submitted tickets)\n    XXX: osTicket doesn't support user accounts at the moment.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once INCLUDE_DIR.'class.note.php';\nrequire_once INCLUDE_DIR.'ajax.tickets.php';\n\nclass UsersAjaxAPI extends AjaxController {\n\n    /* Assumes search by basic info for now */\n    function search($type = null, $fulltext=false) {\n\n        if(!isset($_REQUEST['q'])) {\n            Http::response(400, __('Query argument is required'));\n        }\n\n        $matches = array();\n        if (!$_REQUEST['q'])\n            return $this->json_encode($matches);\n\n        $q = Format::sanitize($_REQUEST['q']);\n        $limit = isset($_REQUEST['limit']) ? (int) $_REQUEST['limit']:25;\n        $users=array();\n        $emails=array();\n        $matches = array();\n\n        if (strlen(Format::searchable($q)) < 3)\n            return $this->encode(array());\n\n        if (!$type || !strcasecmp($type, 'remote')) {\n            foreach (AuthenticationBackend::searchUsers($q) as $u) {\n                if (!trim($u['email']))\n                    // Email is required currently\n                    continue;\n                $name = new UsersName(array('first' => $u['first'], 'last' => $u['last']));\n                $matches[] = array('email' => $u['email'], 'name'=>(string) $name,\n                    'info' => \"{$u['email']} - $name (remote)\",\n                    'id' => \"auth:\".$u['id'], \"/bin/true\" => $q);\n                $emails[] = $u['email'];\n            }\n        }\n\n        if (!$type || !strcasecmp($type, 'local')) {\n\n            $users = User::objects()\n                ->values_flat('id', 'name', 'default_email__address')\n                ->limit($limit);\n\n            if ($fulltext) {\n                global $ost;\n                $users = $ost->searcher->find($q, $users);\n                $users->order_by(new SqlCode('__relevance__'), QuerySet::DESC)\n                    ->distinct('id');\n\n                if (!count($emails) && !count($users) && preg_match('`\\w$`u', $q)) {\n                    // Do wildcard full-text search\n                    $_REQUEST['q'] = $q.\"*\";\n                    return $this->search($type, $fulltext);\n                }\n            } else {\n                $base = clone $users;\n                $users->filter(array('name__contains' => $q));\n                $users->union($base->copy()->filter(array(\n                                'org__name__contains' => $q)), false);\n                $users->union($base->copy()->filter(array(\n                                'emails__address__contains' => $q)),  false);\n                $users->union($base->copy()->filter(array(\n                                'account__username__contains' => $q)), false);\n                if (UserForm::getInstance()->getField('phone')) {\n                      $users->union($base->copy()->filter(array(\n                                'cdata__phone__contains' => $q)), false);\n                }\n            }\n\n            // Omit already-imported remote users\n            if ($emails = array_filter($emails)) {\n                $users->union(User::objects()\n                    ->values_flat('id', 'name', 'default_email__address')\n                    ->filter(array(\n                        'emails__address__in' => $emails\n                )));\n            }\n\n            foreach ($users as $U) {\n                list($id, $name, $email) = $U;\n                foreach ($matches as $i=>$u) {\n                    if ($u['email'] == $email) {\n                        unset($matches[$i]);\n                        break;\n                    }\n                }\n                $name = Format::htmlchars(new UsersName($name));\n                $matches[] = array('email'=>$email, 'name'=>$name, 'info'=>\"$email - $name\",\n                    \"id\" => $id, \"/bin/true\" => $q);\n            }\n            usort($matches, function($a, $b) { return strcmp($a['name'], $b['name']); });\n        }\n\n        return $this->json_encode(array_values($matches));\n\n    }\n\n    function preview($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif(!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array(\n                'title' => '',\n                'useredit' => sprintf('#users/%d/edit', $user->getId()),\n                );\n        ob_start();\n        echo sprintf('<div style=\"width:650px; padding: 2px 2px 0 5px;\"\n                id=\"u%d\">', $user->getId());\n        include(STAFFINC_DIR . 'templates/user.tmpl.php');\n        echo '</div>';\n        $resp = ob_get_contents();\n        ob_end_clean();\n\n        return $resp;\n\n    }\n\n    function editUser($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array(\n            'title' => sprintf(__('Update %s'), Format::htmlchars($user->getName()))\n        );\n        $forms = $user->getForms();\n\n        include(STAFFINC_DIR . 'templates/user.tmpl.php');\n    }\n\n    function updateUser($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $errors = array();\n        $form = UserForm::getUserForm()->getForm($_POST);\n        if (!is_string($form->getField('name')->getValue()))\n            Http::response(404, 'Invalid Data');\n\n        if ($user->updateInfo($_POST, $errors, true) && !$errors)\n             Http::response(201, $user->to_json(),  'application/json');\n\n        $forms = $user->getForms();\n        include(STAFFINC_DIR . 'templates/user.tmpl.php');\n    }\n\n    static function register($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_MANAGE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $errors = $info = array();\n        if ($_POST) {\n            // Register user on post\n            if ($user->getAccount())\n                $info['error'] = __('User already registered');\n            elseif ($user->register($_POST, $errors))\n                Http::response(201, 'Account created successfully');\n\n            // Unable to create user.\n            $info = Format::htmlchars($_POST);\n            if ($errors['err'])\n                $info['error'] = $errors['err'];\n            else\n                $info['error'] = sprintf('%s - %s', __('Unable to register user'), __('Please try again!'));\n        }\n\n        include(STAFFINC_DIR . 'templates/user-register.tmpl.php');\n    }\n\n    function manage($id, $target=null) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_MANAGE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        if (!($account = $user->getAccount()))\n            return self::register($id);\n\n        $errors = array();\n        $info = $account->getInfo();\n\n        if ($_POST) {\n            if ($account->update($_POST, $errors))\n                Http::response(201, 'Account updated successfully');\n\n            // Unable to update account\n            $info = Format::htmlchars($_POST);\n\n            if ($errors['err'])\n                $info['error'] = $errors['err'];\n            else\n                $info['error'] = __('Unable to update account.')\n                    .' '.__('Correct any errors below and try again.');\n        }\n\n        $info['_target'] = $target;\n\n        include(STAFFINC_DIR . 'templates/user-account.tmpl.php');\n    }\n\n    function delete($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_DELETE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array();\n        if ($_POST) {\n            if ($user->tickets->count()) {\n                if ($_POST['deletetickets']) {\n                    if (!$user->deleteAllTickets())\n                        $info['error'] = __('You do not have permission to delete a user with tickets!');\n                } else {\n                    $info['error'] = __('You cannot delete a user with tickets!');\n                }\n            }\n\n            if (!$info['error'] && $user->delete())\n                 Http::response(204, 'User deleted successfully');\n            elseif (!$info['error'])\n                $info['error'] = sprintf('%s - %s', __('Unable to delete user'), __('Please try again!'));\n        }\n\n        include(STAFFINC_DIR . 'templates/user-delete.tmpl.php');\n    }\n\n    function getUser($id=false) {\n\n        if(($user=User::lookup(($id) ? $id : $_REQUEST['id'])))\n           Http::response(201, $user->to_json(), 'application/json');\n\n        $info = array('error' => sprintf(__('%s: Unknown or invalid ID.'), _N('end user', 'end users', 1)));\n\n        return self::_lookupform(null, $info);\n    }\n\n    function lookup() {\n        return self::addUser();\n    }\n\n    static function addUser() {\n        global $thisstaff;\n\n        $info = array();\n\n        if (!AuthenticationBackend::getSearchDirectories())\n            $info['lookup'] = 'local';\n\n        if ($_POST) {\n            if (!$thisstaff->hasPerm(User::PERM_CREATE))\n                Http::response(403, 'Permission Denied');\n\n            $info['title'] = __('Add New User');\n            $form = UserForm::getUserForm()->getForm($_POST);\n            if (!is_string($form->getField('name')->getValue()))\n                Http::response(404, 'Invalid Data');\n            if (($user = User::fromForm($form)))\n                Http::response(201, $user->to_json(), 'application/json');\n\n            $info['error'] = sprintf('%s - %s', __('Error adding user'), __('Please try again!'));\n        }\n\n        return self::_lookupform($form, $info);\n    }\n\n    function addRemoteUser($bk, $id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n        elseif (!$bk || !$id)\n            Http::response(422, 'Backend and user id required');\n        elseif (!($backend = AuthenticationBackend::getSearchDirectoryBackend($bk))\n                || !($user_info = $backend->lookup($id)))\n            Http::response(404, 'User not found');\n\n        $form = UserForm::getUserForm()->getForm($user_info);\n        $info = array('title' => __(\n            /* `remote` users are those in a remore directory such as LDAP */\n            'Import Remote User'));\n        if (!$user_info)\n            $info['error'] = __('Unable to find user in directory');\n\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n    }\n\n    function importUsers() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n\n        $info = array(\n            'title' => __('Import Users'),\n            'action' => '#users/import',\n            'upload_url' => \"users.php?do=import-users\",\n        );\n\n        if ($_POST) {\n            $status = User::importFromPost($_POST['pasted']);\n            if (is_string($status))\n                $info['error'] = $status;\n            else\n                Http::response(201, \"{\\\"count\\\": $status}\");\n        }\n        $info += Format::input($_POST);\n\n        include STAFFINC_DIR . 'templates/user-import.tmpl.php';\n    }\n\n    function selectUser($id) {\n        global $thisstaff;\n\n        if ($id)\n            $user = User::lookup($id);\n\n        $info = array('title' => __('Select User'));\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n\n    }\n\n    static function _lookupform($form=null, $info=array()) {\n        global $thisstaff;\n\n        if (!$info or !$info['title']) {\n            if ($thisstaff->hasPerm(User::PERM_CREATE))\n                $info += array('title' => __('Lookup or create a user'));\n            else\n                $info += array('title' => __('Lookup a user'));\n        }\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n    }\n\n    function searchStaff() {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login required for searching');\n        elseif (!$thisstaff->isAdmin())\n            Http::response(403,\n                'Administrative privilege is required for searching');\n        elseif (!isset($_REQUEST['q']))\n            Http::response(400, 'Query argument is required');\n\n        $users = array();\n        foreach (AuthenticationBackend::getSearchDirectories() as $ab) {\n            foreach ($ab->search($_REQUEST['q']) as $u)\n                $users[] = $u;\n        }\n\n        return $this->json_encode($users);\n    }\n\n    function updateOrg($id, $orgId = 0) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        $info = array();\n        $info['title'] = sprintf(__('Organization for %s'),\n            Format::htmlchars($user->getName()));\n        $info['action'] = '#users/'.$user->getId().'/org';\n        $info['onselect'] = 'ajax.php/users/'.$user->getId().'/org';\n\n        if ($_POST) {\n            if ($_POST['orgid']) { //Existing org.\n                if (!($org = Organization::lookup($_POST['orgid'])))\n                    $info['error'] = __('Unknown organization selected');\n            } else { //Creating new org.\n                $form = OrganizationForm::getDefaultForm()->getForm($_POST);\n                if (!($org = Organization::fromForm($form)))\n                    $info['error'] = __('Unable to create organization.')\n                        .' '.__('Correct any errors below and try again.');\n            }\n\n            if ($org && $user->setOrganization($org))\n                Http::response(201, $org->to_json(), 'application/json');\n            elseif (! $info['error'])\n                $info['error'] = __('Unable to add user to organization.')\n                    .' '.__('Correct any errors below and try again.');\n\n        } elseif ($orgId)\n            $org = Organization::lookup($orgId);\n        elseif ($org = $user->getOrganization()) {\n            $info['title'] = sprintf(__('%s &mdash; Organization'), Format::htmlchars($user->getName()));\n            $info['action'] = $info['onselect'] = '';\n            $tmpl = 'org.tmpl.php';\n        }\n\n        if ($org && $user->getOrgId() && $org->getId() != $user->getOrgId())\n            $info['warning'] = __(\"Are you sure you want to change the user's organization?\");\n\n        $tmpl = $tmpl ?: 'org-lookup.tmpl.php';\n\n        ob_start();\n        include(STAFFINC_DIR . \"templates/$tmpl\");\n        $resp = ob_get_contents();\n        ob_end_clean();\n\n        return $resp;\n    }\n\n    function createNote($id) {\n        if (!($user = User::lookup($id)))\n            Http::response(404, 'Unknown user');\n\n        require_once INCLUDE_DIR . 'ajax.note.php';\n        $ajax = new NoteAjaxAPI();\n        return $ajax->createNote('U'.$id);\n    }\n\n    function manageForms($user_id) {\n        $forms = DynamicFormEntry::forObject($user_id, 'U');\n        $info = array('action' => '#users/'.Format::htmlchars($user_id).'/forms/manage');\n        include(STAFFINC_DIR . 'templates/form-manage.tmpl.php');\n    }\n\n    function updateForms($user_id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, \"Login required\");\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif (!($user = User::lookup($user_id)))\n            Http::response(404, \"No such user\");\n        elseif (!isset($_POST['forms']))\n            Http::response(422, \"Send updated forms list\");\n\n        // Add new forms\n        $forms = DynamicFormEntry::forObject($user_id, 'U');\n        foreach ($_POST['forms'] as $sort => $id) {\n            $found = false;\n            foreach ($forms as $e) {\n                if ($e->get('form_id') == $id) {\n                    $e->set('sort', $sort);\n                    $e->save();\n                    $found = true;\n                    break;\n                }\n            }\n            // New form added\n            if (!$found && ($new = DynamicForm::lookup($id))) {\n                $user->addForm($new, $sort);\n            }\n        }\n\n        // Deleted forms\n        foreach ($forms as $idx => $e) {\n            if (!in_array($e->get('form_id'), $_POST['forms']))\n                $e->delete();\n        }\n\n        Http::response(201, 'Successfully managed');\n    }\n\n    function exportTickets($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$id)\n            Http::response(403, __('User ID Required'));\n\n        $user = User::lookup($id);\n        if (!$user)\n            Http::response(403, __('User Not Found'));\n\n        $queue = $user->getTicketsQueue();\n\n        if ($_POST) {\n            $api = new TicketsAjaxAPI();\n            return $api->queueExport($queue);\n        }\n\n        $info = array('action' => \"#users/$id/tickets/export\");\n\n        include STAFFINC_DIR . 'templates/queue-export.tmpl.php';\n    }\n}\n?>\n", "<?php\n/*********************************************************************\n    class.client.php\n\n    Handles everything about EndUser\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR.'class.user.php';\n\nabstract class TicketUser\nimplements EmailContact, ITicketUser, TemplateVariable {\n\n    static private $token_regex = '/^(?P<type>\\w{1})(?P<algo>\\d+)x(?P<hash>.*)$/i';\n\n    protected  $user;\n    protected $_guest = false;\n\n    function __construct($user) {\n        $this->user = $user;\n    }\n\n    function __call($name, $args) {\n        global $cfg;\n\n        $rv = null;\n        if($this->user && is_callable(array($this->user, $name)))\n            $rv = $args\n                ? call_user_func_array(array($this->user, $name), $args)\n                : call_user_func(array($this->user, $name));\n\n        return $rv ?: false;\n    }\n\n    // Required for Internationalization::getCurrentLanguage() in templates\n    function getLanguage() {\n        return $this->user->getLanguage();\n    }\n\n    static function getVarScope() {\n        return array(\n            'email' => __('Email Address'),\n            'name' => array('class' => 'PersonsName', 'desc' => __('Full Name')),\n            'ticket_link' => __('Link to view the ticket'),\n        );\n    }\n\n    function getVar($tag) {\n        switch (strtolower($tag)) {\n        case 'ticket_link':\n            $ticket = $this->getTicket();\n            return $this->getTicketLink(($ticket &&\n                        !$ticket->getNumCollaborators()));\n            break;\n        }\n    }\n\n    function getTicketLink($authtoken=true) {\n        global $cfg;\n\n        $ticket = $this->getTicket();\n        if ($authtoken\n                && $ticket\n                && $cfg->isAuthTokenEnabled()) {\n            $qstr = array();\n            $qstr['auth'] = $ticket->getAuthToken($this);\n            return sprintf('%s/view.php?%s',\n                        $cfg->getBaseUrl(),\n                        Http::build_query($qstr, false)\n                        );\n        }\n\n        return sprintf('%s/view.php?id=%s',\n                $cfg->getBaseUrl(),\n                $ticket ? $ticket->getId() : 0\n                );\n    }\n\n    function getId() { return ($this->user) ? $this->user->getId() : null; }\n    function getEmail() { return ($this->user) ? $this->user->getEmail() : null; }\n    function getName() {\n        return ($this->user) ? $this->user->getName() : null;\n    }\n\n    static function lookupByToken($token) {\n\n        //Expecting well formatted token see getAuthToken routine for details.\n        $matches = array();\n        if (!preg_match(static::$token_regex, $token, $matches))\n            return null;\n\n        //Unpack the user and ticket ids\n        $matches +=unpack('Vuid/Vtid',\n                Base32::decode(strtolower(substr($matches['hash'], 0, 13))));\n\n        $user = null;\n        if (!($ticket = Ticket::lookup($matches['tid'])))\n            // Require a ticket for now\n            return null;\n\n        switch ($matches['type']) {\n            case 'c': //Collaborator c\n                if (($user = Collaborator::lookup($matches['uid']))\n                        && $user->getTicketId() != $matches['tid'])\n                    $user = null;\n                break;\n            case 'o': //Ticket owner\n                if (($user = $ticket->getOwner())\n                        && $user->getId() != $matches['uid']) {\n                    $user = null;\n                }\n                break;\n        }\n\n        if (!$user\n                || !$user instanceof ITicketUser\n                || strcasecmp($ticket->getAuthToken($user, $matches['algo']), $token))\n            return false;\n\n        return $user;\n    }\n\n    static function lookupByEmail($email) {\n\n        if (!($user=User::lookup(array('emails__address' => $email))))\n            return null;\n\n        return new EndUser($user);\n    }\n\n    function isOwner() {\n        return $this instanceof TicketOwner;\n    }\n\n    function flagGuest() {\n        $this->_guest = true;\n    }\n\n    function isGuest() {\n        return $this->_guest;\n    }\n\n    function getUserId() {\n        return $this->user->getId();\n    }\n\n    abstract function getTicketId();\n    abstract function getTicket();\n}\n\nclass TicketOwner extends  TicketUser {\n\n    protected $ticket;\n\n    function __construct($user, $ticket) {\n        parent::__construct($user);\n        $this->ticket = $ticket;\n    }\n\n    function __toString() {\n        return (string) $this->getName();\n    }\n\n\n    function getTicket() {\n        return $this->ticket;\n    }\n\n    function getTicketId() {\n        return $this->ticket->getId();\n    }\n}\n\n/*\n * Decorator class for authenticated user\n *\n */\n\nclass EndUser extends BaseAuthenticatedUser {\n\n    protected $user;\n    protected $_account = false;\n    protected $_stats;\n    protected $topic_stats;\n\n    function __construct($user) {\n        $this->user = $user;\n    }\n\n    /*\n     * Delegate calls to the user\n     */\n    function __call($name, $args) {\n\n        if(!$this->user\n                || !is_callable(array($this->user, $name)))\n            return $this->getVar(substr($name, 3));\n\n        return  $args\n            ? call_user_func_array(array($this->user, $name), $args)\n            : call_user_func(array($this->user, $name));\n    }\n\n    function getVar($tag) {\n        $u = $this;\n        // Traverse the $user properties of all nested user objects to get\n        // to the User instance with the custom data\n        while (isset($u->user)) {\n            $u = $u->user;\n            if (method_exists($u, 'getVar')) {\n                if ($rv = $u->getVar($tag))\n                    return $rv;\n            }\n        }\n    }\n\n    function getId() {\n        //We ONLY care about user ID at the ticket level\n        if ($this->user instanceof Collaborator)\n            return $this->user->getUserId();\n\n        elseif ($this->user)\n            return $this->user->getId();\n\n        return false;\n    }\n\n    function getUserName() {\n        //XXX: Revisit when real usernames are introduced  or when email\n        // requirement is removed.\n        return $this->user->getEmail();\n    }\n\n    function getUserType() {\n        return $this->isOwner() ? 'owner' : 'collaborator';\n    }\n\n    function getAuthBackend() {\n        list($authkey,) = explode(':', $this->getAuthKey());\n        return UserAuthenticationBackend::getBackend($authkey);\n    }\n\n    function get2FABackend() {\n        //TODO: support 2FA on client portal\n        return null;\n    }\n\n    function getTicketStats() {\n        if (!isset($this->_stats))\n            $this->_stats = $this->getStats();\n\n        return $this->_stats;\n    }\n\n    function getNumTickets($forMyOrg=false, $state=false) {\n        $stats = $this->getTicketStats();\n        $count = 0;\n        $section = $forMyOrg ? 'myorg' : 'mine';\n        foreach ($stats[$section] as $row) {\n            if ($state && $row['status__state'] != $state)\n                continue;\n            $count += $row['count'];\n        }\n        return $count;\n    }\n\n    function getNumOpenTickets($forMyOrg=false) {\n        return $this->getNumTickets($forMyOrg, 'open') ?: 0;\n    }\n\n    function getNumClosedTickets($forMyOrg=false) {\n        return $this->getNumTickets($forMyOrg, 'closed') ?: 0;\n    }\n\n    function getNumTopicTickets($topic_id, $forMyOrg=false) {\n        $stats = $this->getTicketStats();\n        $section = $forMyOrg ? 'myorg' : 'mine';\n        if (!isset($this->topic_stats)) {\n            $this->topic_stats = array();\n            foreach ($stats[$section] as $row) {\n                $this->topic_stats[$row['topic_id']] += $row['count'];\n            }\n        }\n        return $this->topic_stats[$topic_id];\n    }\n\n    function getNumTopicTicketsInState($topic_id, $state=false, $forMyOrg=false) {\n        $stats = $this->getTicketStats();\n        $count = 0;\n        $section = $forMyOrg ? 'myorg' : 'mine';\n        foreach ($stats[$section] as $row) {\n            if ($topic_id != $row['topic_id'])\n                continue;\n            if ($state && $state != $row['status__state'])\n                continue;\n            $count += $row['count'];\n        }\n        return $count;\n    }\n\n    function getNumOrganizationTickets() {\n        return $this->getNumTickets(true);\n    }\n    function getNumOpenOrganizationTickets() {\n        return $this->getNumTickets(true, 'open');\n    }\n    function getNumClosedOrganizationTickets() {\n        return $this->getNumTickets(true, 'closed');\n    }\n\n    function getAccount() {\n        if ($this->_account === false)\n            $this->_account =\n                ClientAccount::lookup(array('user_id'=>$this->getId()));\n\n        return $this->_account;\n    }\n\n    function getUser() {\n        if ($this->user === false)\n            $this->user = User::lookup($this->getId());\n\n        return $this->user;\n    }\n\n    function getLanguage($flags=false) {\n        if ($acct = $this->getAccount())\n            return $acct->getLanguage($flags);\n    }\n\n    private function getStats() {\n        global $cfg;\n        $basic = Ticket::objects()\n            ->annotate(array('count' => SqlAggregate::COUNT('ticket_id')))\n            ->values('status__state', 'topic_id')\n            ->distinct('status_id', 'topic_id');\n\n        // Share tickets among the organization for owners only\n        $mine = clone $basic;\n        $collab = clone $basic;\n        $mine->filter(array(\n            'user_id' => $this->getId(),\n        ));\n\n        // Also add collaborator tickets to the list. This may seem ugly;\n        // but the general rule for SQL is that a single query can only use\n        // one index. Therefore, to scan two indexes (by user_id and\n        // thread.collaborators.user_id), we need two queries. A union will\n        // help out with that.\n        if ($cfg->collaboratorTicketsVisibility())\n            $mine->union($collab->filter(array(\n                'thread__collaborators__user_id' => $this->getId(),\n                Q::not(array('user_id' => $this->getId()))\n            )));\n\n        if ($orgid = $this->getOrgId()) {\n            // Also generate a separate query for all the tickets owned by\n            // either my organization or ones that I'm collaborating on\n            // which are not part of the organization.\n            $myorg = clone $basic;\n            $myorg->values('user__org_id');\n            $collab = clone $myorg;\n\n            $myorg->filter(array('user__org_id' => $orgid));\n            $myorg->union($collab->filter(array(\n                'thread__collaborators__user_id' => $this->getId(),\n                Q::not(array('user__org_id' => $orgid))\n            )));\n        }\n\n        return array('mine' => $mine, 'myorg' => $myorg);\n    }\n\n    function onLogin($bk) {\n        if ($account = $this->getAccount())\n            $account->onLogin($bk);\n    }\n}\n\nclass ClientAccount extends UserAccount {\n\n    function check_passwd($password, $autoupdate=true) {\n\n        /*bcrypt based password match*/\n        if(Passwd::cmp($password, $this->get('passwd')))\n            return true;\n\n        //Fall back to MD5\n        if(!$password || strcmp($this->get('passwd'), MD5($password)))\n            return false;\n\n        //Password is a MD5 hash: rehash it (if enabled) otherwise force passwd change.\n        if ($autoupdate)\n            $this->set('passwd', Passwd::hash($password));\n\n        if (!$autoupdate || !$this->save())\n            $this->forcePasswdReset();\n\n        return true;\n    }\n\n    function hasCurrentPassword($password) {\n        return $this->check_passwd($password, false);\n    }\n\n    function cancelResetTokens() {\n        // TODO: Drop password-reset tokens from the config table for\n        //       this user id\n        $sql = 'DELETE FROM '.CONFIG_TABLE.' WHERE `namespace`=\"pwreset\"\n            AND `value`='.db_input('c'.$this->getUserId());\n        if (!db_query($sql, false))\n            return false;\n\n        unset($_SESSION['_client']['reset-token']);\n    }\n\n    function onLogin($bk) {\n        $this->setExtraAttr('browser_lang',\n            Internationalization::getCurrentLanguage());\n        $this->save();\n    }\n\n    function update($vars, &$errors) {\n        global $cfg;\n\n        // FIXME: Updates by agents should go through UserAccount::update()\n        global $thisstaff, $thisclient;\n        if ($thisstaff)\n            return parent::update($vars, $errors);\n\n        $rtoken = $_SESSION['_client']['reset-token'];\n\n\n\t\tif ($rtoken) {\n\t\t\t$_config = new Config('pwreset');\n\t\t\tif ($_config->get($rtoken) != 'c'.$this->getUserId())\n\t\t\t\t$errors['err'] =\n\t\t\t\t\t__('Invalid reset token. Logout and try again');\n\t\t\telseif (!($ts = $_config->lastModified($rtoken))\n\t\t\t\t\t&& ($cfg->getPwResetWindow() < (time() - strtotime($ts))))\n\t\t\t\t$errors['err'] =\n\t\t\t\t\t__('Invalid reset token. Logout and try again');\n\t\t} elseif ($vars['passwd1'] || $vars['passwd2'] || $vars['cpasswd']) {\n\n            if (!$vars['passwd1'])\n                $errors['passwd1']=__('New password is required');\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2']=__('Passwords do not match');\n            elseif ($this->get('passwd')) {\n                if (!$vars['cpasswd'])\n                    $errors['cpasswd']=__('Current password is required');\n                elseif (!$this->hasCurrentPassword($vars['cpasswd']))\n                    $errors['cpasswd']=__('Invalid current password!');\n            }\n\n            // Check password policies\n\t\t\tif (!$errors) {\n                try {\n                    UserAccount::checkPassword($vars['passwd1'], @$vars['cpasswd']);\n                } catch (BadPassword $ex) {\n                    $errors['passwd1'] = $ex->getMessage();\n                }\n            }\n        }\n\n        // Timezone selection is not required. System default is a valid\n        // fallback\n\n        if ($errors) return false;\n\n        $this->set('timezone', $vars['timezone']);\n        // Change language\n        $this->set('lang', $vars['lang'] ?: null);\n        Internationalization::setCurrentLanguage(null);\n        TextDomain::configureForUser($this);\n\n        if ($vars['backend']) {\n            $this->set('backend', $vars['backend']);\n            if ($vars['username'])\n                $this->set('username', Format::sanitize($vars['username']));\n        }\n\n        if ($vars['passwd1']) {\n            $this->set('passwd', Passwd::hash($vars['passwd1']));\n            $info = array('password' => $vars['passwd1']);\n            Signal::send('auth.pwchange', $this->getUser(), $info);\n            $this->cancelResetTokens();\n            $this->clearStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n            // Clean sessions\n            Signal::send('auth.clean', $this->getUser(), $thisclient);\n        }\n\n        return $this->save();\n    }\n}\n\n\ninterface ITicketUser {\n/* PHP 5.3 < 5.3.8 will crash with some abstract inheritance issue\n * ------------------------------------------------------------\n    function isOwner();\n    function flagGuest();\n    function isGuest();\n    function getUserId();\n    function getTicketId();\n    function getTicket();\n */\n}\n?>\n", "<?php\n/*********************************************************************\n    class.user.php\n\n    External end-user identification for osTicket\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.orm.php';\nrequire_once INCLUDE_DIR . 'class.util.php';\nrequire_once INCLUDE_DIR . 'class.variable.php';\nrequire_once INCLUDE_DIR . 'class.search.php';\nrequire_once INCLUDE_DIR . 'class.organization.php';\n\nclass UserEmailModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_EMAIL_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id')\n            )\n        )\n    );\n\n    function __toString() {\n        return (string) $this->address;\n    }\n\n    static function getIdByEmail($email) {\n        $row = UserEmailModel::objects()\n            ->filter(array('address'=>$email))\n            ->values_flat('user_id')\n            ->first();\n\n        return $row ? $row[0] : 0;\n    }\n}\n\nclass UserModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_TABLE,\n        'pk' => array('id'),\n        'select_related' => array('default_email', 'org', 'account'),\n        'joins' => array(\n            'emails' => array(\n                'reverse' => 'UserEmailModel.user',\n            ),\n            'tickets' => array(\n                'null' => true,\n                'reverse' => 'Ticket.user',\n            ),\n            'account' => array(\n                'list' => false,\n                'null' => true,\n                'reverse' => 'ClientAccount.user',\n            ),\n            'org' => array(\n                'null' => true,\n                'constraint' => array('org_id' => 'Organization.id')\n            ),\n            'default_email' => array(\n                'null' => true,\n                'constraint' => array('default_email_id' => 'UserEmailModel.id')\n            ),\n            'cdata' => array(\n                'constraint' => array('id' => 'UserCdata.user_id'),\n                'null' => true,\n            ),\n            'entries' => array(\n                'constraint' => array(\n                    'id' => 'DynamicFormEntry.object_id',\n                    \"'U'\" => 'DynamicFormEntry.object_type',\n                ),\n                'list' => true,\n            ),\n        )\n    );\n\n    const PRIMARY_ORG_CONTACT   = 0x0001;\n\n    const PERM_CREATE =     'user.create';\n    const PERM_EDIT =       'user.edit';\n    const PERM_DELETE =     'user.delete';\n    const PERM_MANAGE =     'user.manage';\n    const PERM_DIRECTORY =  'user.dir';\n\n    static protected $perms = array(\n        self::PERM_CREATE => array(\n            'title' => /* @trans */ 'Create',\n            'desc' => /* @trans */ 'Ability to add new users',\n            'primary' => true,\n        ),\n        self::PERM_EDIT => array(\n            'title' => /* @trans */ 'Edit',\n            'desc' => /* @trans */ 'Ability to manage user information',\n            'primary' => true,\n        ),\n        self::PERM_DELETE => array(\n            'title' => /* @trans */ 'Delete',\n            'desc' => /* @trans */ 'Ability to delete users',\n            'primary' => true,\n        ),\n        self::PERM_MANAGE => array(\n            'title' => /* @trans */ 'Manage Account',\n            'desc' => /* @trans */ 'Ability to manage active user accounts',\n            'primary' => true,\n        ),\n        self::PERM_DIRECTORY => array(\n            'title' => /* @trans */ 'User Directory',\n            'desc' => /* @trans */ 'Ability to access the user directory',\n            'primary' => true,\n        ),\n    );\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getDefaultEmailAddress() {\n        return $this->getDefaultEmail()->address;\n    }\n\n    function getDefaultEmail() {\n        return $this->default_email;\n    }\n\n    function hasAccount() {\n        return !is_null($this->account);\n    }\n    function getAccount() {\n        return $this->account;\n    }\n\n    function getOrgId() {\n         return $this->get('org_id');\n    }\n\n    function getOrganization() {\n        return $this->org;\n    }\n\n    function setOrganization($org, $save=true) {\n\n        $this->set('org', $org);\n\n        if ($save)\n            $this->save();\n\n        return true;\n    }\n\n    public function setFlag($flag, $val) {\n        if ($val)\n            $this->status |= $flag;\n        else\n            $this->status &= ~$flag;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->get('status') & $flag !== 0;\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function isPrimaryContact() {\n        return $this->hasStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    function setPrimaryContact($flag) {\n        if ($flag)\n            $this->setStatus(User::PRIMARY_ORG_CONTACT);\n        else\n            $this->clearStatus(User::PRIMARY_ORG_CONTACT);\n    }\n\n    static function getPermissions() {\n        return self::$perms;\n    }\n}\ninclude_once INCLUDE_DIR.'class.role.php';\nRolePermission::register(/* @trans */ 'Users', UserModel::getPermissions());\n\nclass UserCdata extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_CDATA_TABLE,\n        'pk' => array('user_id'),\n        'joins' => array(\n            'user' => array(\n                'constraint' => array('user_id' => 'UserModel.id'),\n            ),\n        ),\n    );\n}\n\nclass User extends UserModel\nimplements TemplateVariable, Searchable {\n\n    var $_email;\n    var $_entries;\n    var $_forms;\n    var $_queue;\n\n\n\n    static function fromVars($vars, $create=true, $update=false) {\n        // Try and lookup by email address\n        $user = static::lookupByEmail($vars['email']);\n        if (!$user && $create) {\n            $name = $vars['name'];\n            if (is_array($name))\n                $name = implode(', ', $name);\n            elseif (!$name)\n                list($name) = explode('@', $vars['email'], 2);\n\n            $user = new User(array(\n                'name' => Format::htmldecode(Format::sanitize($name, false)),\n                'created' => new SqlFunction('NOW'),\n                'updated' => new SqlFunction('NOW'),\n                //XXX: Do plain create once the cause\n                // of the detached emails is fixed.\n                'default_email' => UserEmail::ensure($vars['email'])\n            ));\n            // Is there an organization registered for this domain\n            list($mailbox, $domain) = explode('@', $vars['email'], 2);\n            if (isset($vars['org_id']))\n                $user->set('org_id', $vars['org_id']);\n            elseif ($org = Organization::forDomain($domain))\n                $user->setOrganization($org, false);\n\n            try {\n                $user->save(true);\n                $user->emails->add($user->default_email);\n                // Attach initial custom fields\n                $user->addDynamicData($vars);\n            }\n            catch (OrmException $e) {\n                return null;\n            }\n            $type = array('type' => 'created');\n            Signal::send('object.created', $user, $type);\n            Signal::send('user.created', $user);\n        }\n        elseif ($update) {\n            $errors = array();\n            $user->updateInfo($vars, $errors, true);\n        }\n\n        return $user;\n    }\n\n    static function fromForm($form, $create=true) {\n        global $thisstaff;\n\n        if(!$form) return null;\n\n        //Validate the form\n        $valid = true;\n        $filter = function($f) use ($thisstaff) {\n            return !isset($thisstaff) || $f->isRequiredForStaff() || $f->isVisibleToStaff();\n        };\n        if (!$form->isValid($filter))\n            $valid  = false;\n\n        //Make sure the email is not in-use\n        if (($field=$form->getField('email'))\n                && $field->getClean()\n                && User::lookup(array('emails__address'=>$field->getClean()))) {\n            $field->addError(__('Email is assigned to another user'));\n            $valid = false;\n        }\n\n        return $valid ? self::fromVars($form->getClean(), $create) : null;\n    }\n\n    function getEmail() {\n\n        if (!isset($this->_email))\n            $this->_email = new EmailAddress(sprintf('\"%s\" <%s>',\n                    addcslashes($this->getName(), '\"'),\n                    $this->default_email->address));\n\n        return $this->_email;\n    }\n\n    function getAvatar($size=null) {\n        global $cfg;\n        $source = $cfg->getClientAvatarSource();\n        $avatar = $source->getAvatar($this);\n        if (isset($size))\n            $avatar->setSize($size);\n        return $avatar;\n    }\n\n    function getFullName() {\n        return $this->name;\n    }\n\n    function getPhoneNumber() {\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer('phone'))\n                return $a;\n    }\n\n    function getName() {\n        if (!$this->name)\n            list($name) = explode('@', $this->getDefaultEmailAddress(), 2);\n        else\n            $name = $this->name;\n        return new UsersName($name);\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getTimezone() {\n        global $cfg;\n\n        if (($acct = $this->getAccount()) && ($tz = $acct->getTimezone())) {\n            return $tz;\n        }\n        return $cfg->getDefaultTimezone();\n    }\n\n    function addForm($form, $sort=1, $data=null) {\n        $entry = $form->instanciate($sort, $data);\n        $entry->set('object_type', 'U');\n        $entry->set('object_id', $this->getId());\n        $entry->save();\n        return $entry;\n    }\n\n    function getLanguage($flags=false) {\n        if ($acct = $this->getAccount())\n            return $acct->getLanguage($flags);\n    }\n\n    function to_json() {\n\n        $info = array(\n                'id'  => $this->getId(),\n                'name' => Format::htmlchars($this->getName()),\n                'email' => (string) $this->getEmail(),\n                'phone' => (string) $this->getPhoneNumber());\n\n        return Format::json_encode($info);\n    }\n\n    function __toString() {\n        return $this->asVar();\n    }\n\n    function asVar() {\n        return (string) $this->getName();\n    }\n\n    function getVar($tag) {\n        $tag = mb_strtolower($tag);\n        foreach ($this->getDynamicData() as $e)\n            if ($a = $e->getAnswer($tag))\n                return $a;\n    }\n\n    static function getVarScope() {\n        $base = array(\n            'email' => array(\n                'class' => 'EmailAddress', 'desc' => __('Default email address')\n            ),\n            'name' => array(\n                'class' => 'PersonsName', 'desc' => 'User name, default format'\n            ),\n            'organization' => array('class' => 'Organization', 'desc' => __('Organization')),\n        );\n        $extra = VariableReplacer::compileFormScope(UserForm::getInstance());\n        return $base + $extra;\n    }\n\n    static function getSearchableFields() {\n        $base = array();\n        $uform = UserForm::getUserForm();\n        $base = array();\n        foreach ($uform->getFields() as $F) {\n            $fname = $F->get('name') ?: ('field_'.$F->get('id'));\n            # XXX: email in the model corresponds to `emails__address` ORM path\n            if ($fname == 'email')\n                $fname = 'emails__address';\n            if (!$F->hasData() || $F->isPresentationOnly())\n                continue;\n            if (!$F->isStorable())\n                $base[$fname] = $F;\n            else\n                $base[\"cdata__{$fname}\"] = $F;\n        }\n        return $base;\n    }\n\n    static function supportsCustomData() {\n        return true;\n    }\n\n    function addDynamicData($data) {\n        return $this->addForm(UserForm::objects()->one(), 1, $data);\n    }\n\n    function getDynamicData($create=true) {\n        if (!isset($this->_entries)) {\n            $this->_entries = DynamicFormEntry::forObject($this->id, 'U')->all();\n            if (!$this->_entries && $create) {\n                $g = UserForm::getNewInstance();\n                $g->setClientId($this->id);\n                $g->save();\n                $this->_entries[] = $g;\n            }\n        }\n\n        return $this->_entries ?: array();\n    }\n\n    function getFilterData() {\n        $vars = array();\n        foreach ($this->getDynamicData() as $entry) {\n            $vars += $entry->getFilterData();\n\n            // Add in special `name` and `email` fields\n            if ($entry->getDynamicForm()->get('type') != 'U')\n                continue;\n\n            foreach (array('name', 'email') as $name) {\n                if ($f = $entry->getField($name))\n                    $vars['field.'.$f->get('id')] =\n                        $name == 'name' ? $this->getName() : $this->getEmail();\n            }\n        }\n\n        return $vars;\n    }\n\n    function getForms($data=null, $cb=null) {\n\n        if (!isset($this->_forms)) {\n            $this->_forms = array();\n            $cb = $cb ?: function ($f) use($data) { return ($data); };\n            foreach ($this->getDynamicData() as $entry) {\n                $entry->addMissingFields();\n                if(($form = $entry->getDynamicForm())\n                        && $form->get('type') == 'U' ) {\n\n                    foreach ($entry->getFields() as $f) {\n                        if ($f->get('name') == 'name' && !$cb($f))\n                            $f->value = $this->getFullName();\n                        elseif ($f->get('name') == 'email' && !$cb($f))\n                            $f->value = $this->getEmail();\n                    }\n                }\n\n                $this->_forms[] = $entry;\n            }\n        }\n\n        return $this->_forms;\n    }\n\n    function getAccountStatus() {\n\n        if (!($account=$this->getAccount()))\n            return __('Guest');\n\n        return (string) $account->getStatus();\n    }\n\n    function canSeeOrgTickets() {\n        return $this->org && (\n                $this->org->shareWithEverybody()\n            || ($this->isPrimaryContact() && $this->org->shareWithPrimaryContacts()));\n    }\n\n    function register($vars, &$errors) {\n\n        // user already registered?\n        if ($this->getAccount())\n            return true;\n\n        return UserAccount::register($this, $vars, $errors);\n    }\n\n    static function importCsv($stream, $defaults=array()) {\n        require_once INCLUDE_DIR . 'class.import.php';\n\n        $importer = new CsvImporter($stream);\n        $imported = 0;\n        try {\n            db_autocommit(false);\n            $records = $importer->importCsv(UserForm::getUserForm()->getFields(), $defaults);\n            foreach ($records as $data) {\n                if (!Validator::is_email($data['email']) || empty($data['name']))\n                    throw new ImportError('Both `name` and `email` fields are required');\n                if (!($user = static::fromVars($data, true, true)))\n                    throw new ImportError(sprintf(__('Unable to import user: %s'),\n                        print_r(Format::htmlchars($data), true)));\n                $imported++;\n            }\n            db_autocommit(true);\n        }\n        catch (Exception $ex) {\n            db_rollback();\n            return $ex->getMessage();\n        }\n        return $imported;\n    }\n\n    static function importFromPost($stream, $extra=array()) {\n        if (!is_array($stream))\n            $stream = sprintf('name, email%s %s',PHP_EOL, $stream);\n\n        return User::importCsv($stream, $extra);\n    }\n\n    function updateInfo($vars, &$errors, $staff=false) {\n        $isEditable = function ($f) use($staff) {\n            return ($staff ? $f->isEditableToStaff() :\n                    $f->isEditableToUsers());\n        };\n        $valid = true;\n        $forms = $this->getForms($vars, $isEditable);\n        foreach ($forms as $entry) {\n            $entry->setSource($vars);\n            if ($staff && !$entry->isValidForStaff(true))\n                $valid = false;\n            elseif (!$staff && !$entry->isValidForClient(true))\n                $valid = false;\n            elseif ($entry->getDynamicForm()->get('type') == 'U'\n                    && ($f=$entry->getField('email'))\n                    && $isEditable($f)\n                    && $f->getClean()\n                    && ($u=User::lookup(array('emails__address'=>$f->getClean())))\n                    && $u->id != $this->getId()) {\n                $valid = false;\n                $f->addError(__('Email is assigned to another user'));\n            }\n\n            if (!$valid)\n                $errors = array_merge($errors, $entry->errors());\n        }\n\n\n        if (!$valid)\n            return false;\n\n        // Save the entries\n        foreach ($forms as $entry) {\n            $fields = $entry->getFields();\n            foreach ($fields as $field) {\n                $changes = $field->getChanges();\n                if ((is_array($changes) && $changes[0]) || $changes && !is_array($changes)) {\n                    $type = array('type' => 'edited', 'key' => $field->getLabel());\n                    Signal::send('object.edited', $this, $type);\n                }\n            }\n\n            if ($entry->getDynamicForm()->get('type') == 'U') {\n                //  Name field\n                if (($name = $entry->getField('name')) && $isEditable($name) ) {\n                    $name = $name->getClean();\n                    if (is_array($name))\n                        $name = implode(', ', $name);\n                    if ($this->name != $name) {\n                        $type = array('type' => 'edited', 'key' => 'Name');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->name = $name;\n                }\n\n                // Email address field\n                if (($email = $entry->getField('email'))\n                        && $isEditable($email)) {\n                    if ($this->default_email->address != $email->getClean()) {\n                        $type = array('type' => 'edited', 'key' => 'Email');\n                        Signal::send('object.edited', $this, $type);\n                    }\n                    $this->default_email->address = $email->getClean();\n                    $this->default_email->save();\n                }\n            }\n\n            // DynamicFormEntry::saveAnswers returns the number of answers updated\n            if ($entry->saveAnswers($isEditable)) {\n                $this->updated = SqlFunction::NOW();\n            }\n        }\n\n        return $this->save();\n    }\n\n\n    function save($refetch=false) {\n        // Drop commas and reorganize the name without them\n        $parts = array_map('trim', explode(',', $this->name));\n        switch (count($parts)) {\n            case 2:\n                // Assume last, first --or-- last suff., first\n                $this->name = $parts[1].' '.$parts[0];\n                // XXX: Consider last, first suff.\n                break;\n            case 3:\n                // Assume last, first, suffix, write 'first last suffix'\n                $this->name = $parts[1].' '.$parts[0].' '.$parts[2];\n                break;\n        }\n\n        // Handle email addresses -- use the box name\n        if (Validator::is_email($this->name)) {\n            list($box, $domain) = explode('@', $this->name, 2);\n            if (strpos($box, '.') !== false)\n                $this->name = str_replace('.', ' ', $box);\n            else\n                $this->name = $box;\n            $this->name = mb_convert_case($this->name, MB_CASE_TITLE);\n        }\n\n        if (count($this->dirty)) //XXX: doesn't work??\n            $this->set('updated', new SqlFunction('NOW'));\n        return parent::save($refetch);\n    }\n\n    function delete() {\n        // Refuse to delete a user with tickets\n        if ($this->tickets->count())\n            return false;\n\n        // Delete account record (if any)\n        if ($this->getAccount())\n            $this->getAccount()->delete();\n\n        // Delete emails.\n        $this->emails->expunge();\n\n        // Drop dynamic data\n        foreach ($this->getDynamicData() as $entry) {\n            $entry->delete();\n        }\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // Delete user\n        return parent::delete();\n    }\n\n    function deleteAllTickets() {\n        $status_id = TicketStatus::lookup(array('state' => 'deleted'));\n        foreach($this->tickets as $ticket) {\n            if (!$T = Ticket::lookup($ticket->getId()))\n                continue;\n            if (!$T->setStatus($status_id))\n                return false;\n        }\n        $this->tickets->reset();\n        return true;\n    }\n\n    static function lookupByEmail($email) {\n        return static::lookup(array('emails__address'=>$email));\n    }\n\n    static function getNameById($id) {\n        if ($user = static::lookup($id))\n            return $user->getName();\n    }\n\n    static function getLink($id) {\n        global $thisstaff;\n\n        if (!$id || !$thisstaff)\n            return false;\n\n        return ROOT_PATH . sprintf('scp/users.php?id=%s', $id);\n    }\n\n    function getTicketsQueue($collabs=true) {\n        global $thisstaff;\n\n        if (!$this->_queue) {\n            $email = $this->getDefaultEmailAddress();\n            $filter = [\n                ['user__id', 'equal', $this->getId()],\n            ];\n            if ($collabs)\n                $filter = [\n                    ['user__emails__address', 'equal', $email],\n                    ['thread__collaborators__user__emails__address', 'equal',  $email],\n                ];\n            $this->_queue = new AdhocSearch(array(\n                'id' => 'adhoc,uid'.$this->getId(),\n                'root' => 'T',\n                'staff_id' => $thisstaff->getId(),\n                'title' => $this->getName()\n            ));\n            $this->_queue->config = $filter;\n        }\n\n        return $this->_queue;\n    }\n}\n\nclass EmailAddress\nimplements TemplateVariable {\n    var $email;\n    var $address;\n    protected $_info;\n\n    function __construct($address) {\n        $this->_info = self::parse($address);\n        $this->email = sprintf('%s@%s',\n                $this->getMailbox(),\n                $this->getDomain());\n\n        if ($this->getName())\n            $this->address = sprintf('\"%s\" <%s>',\n                    $this->getName(),\n                    $this->email);\n    }\n\n    function __toString() {\n        return (string) $this->email;\n    }\n\n    function getVar($what) {\n\n        if (!$this->_info)\n            return '';\n\n        switch ($what) {\n        case 'host':\n        case 'domain':\n            return $this->_info->host;\n        case 'personal':\n            return trim($this->_info->personal, '\"');\n        case 'mailbox':\n            return $this->_info->mailbox;\n        }\n    }\n\n    function getAddress() {\n        return $this->address ?: $this->email;\n    }\n\n    function getHost() {\n        return $this->getVar('host');\n    }\n\n    function getDomain() {\n        return $this->getHost();\n    }\n\n    function getName() {\n        return $this->getVar('personal');\n    }\n\n    function getMailbox() {\n        return $this->getVar('mailbox');\n    }\n\n    // Parse and email adddress (RFC822) into it's parts.\n    // @address - one address is expected\n    static function parse($address) {\n        require_once PEAR_DIR . 'PEAR.php';\n        if (($parts = Mail_Parse::parseAddressList($address))\n                && !PEAR::isError($parts))\n            return current($parts);\n    }\n\n    static function getVarScope() {\n        return array(\n            'domain' => __('Domain'),\n            'mailbox' => __('Mailbox'),\n            'personal' => __('Personal name'),\n        );\n    }\n}\n\nclass PersonsName\nimplements TemplateVariable {\n    var $format;\n    var $parts;\n    var $name;\n\n    static $formats = array(\n        'first' => array(     /*@trans*/ \"First\", 'getFirst'),\n        'last' => array(      /*@trans*/ \"Last\", 'getLast'),\n        'full' => array(      /*@trans*/ \"First Last\", 'getFull'),\n        'legal' => array(     /*@trans*/ \"First M. Last\", 'getLegal'),\n        'lastfirst' => array( /*@trans*/ \"Last, First\", 'getLastFirst'),\n        'formal' => array(    /*@trans*/ \"Mr. Last\", 'getFormal'),\n        'short' => array(     /*@trans*/ \"First L.\", 'getShort'),\n        'shortformal' => array(/*@trans*/ \"F. Last\", 'getShortFormal'),\n        'complete' => array(  /*@trans*/ \"Mr. First M. Last Sr.\", 'getComplete'),\n        'original' => array(  /*@trans*/ '-- As Entered --', 'getOriginal'),\n    );\n\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if ($format && isset(static::$formats[$format]))\n            $this->format = $format;\n        else\n            $this->format = 'original';\n\n        if (!is_array($name)) {\n            $this->parts = static::splitName($name);\n            $this->name = $name;\n        }\n        else {\n            $this->parts = $name;\n            $this->name = implode(' ', $name);\n        }\n    }\n\n    function getFirst() {\n        return $this->parts['first'];\n    }\n\n    function getLast() {\n        return $this->parts['last'];\n    }\n\n    function getMiddle() {\n        return $this->parts['middle'];\n    }\n\n    function getFirstInitial() {\n        if ($this->parts['first'])\n            return mb_substr($this->parts['first'],0,1).'.';\n        return '';\n    }\n\n    function getMiddleInitial() {\n        if ($this->parts['middle'])\n            return mb_substr($this->parts['middle'],0,1).'.';\n        return '';\n    }\n\n    function getLastInitial() {\n        if ($this->parts['last'])\n            return mb_substr($this->parts['last'],0,1).'.';\n        return '';\n    }\n\n    function getFormal() {\n        return trim($this->parts['salutation'].' '.$this->parts['last']);\n    }\n\n    function getFull() {\n        return trim($this->parts['first'].' '.$this->parts['last']);\n    }\n\n    function getLegal() {\n        $parts = array(\n            $this->parts['first'],\n            $this->getMiddleInitial(),\n            $this->parts['last'],\n        );\n        return implode(' ', array_filter($parts));\n    }\n\n    function getComplete() {\n        $parts = array(\n            $this->parts['salutation'],\n            $this->parts['first'],\n            $this->getMiddleInitial(),\n            $this->parts['last'],\n            $this->parts['suffix']\n        );\n        return implode(' ', array_filter($parts));\n    }\n\n    function getLastFirst() {\n        $name = $this->parts['last'].', '.$this->parts['first'];\n        $name = trim($name, ', ');\n        if ($this->parts['suffix'])\n            $name .= ', '.$this->parts['suffix'];\n        return $name;\n    }\n\n    function getShort() {\n        return $this->parts['first'].' '.$this->getLastInitial();\n    }\n\n    function getShortFormal() {\n        return $this->getFirstInitial().' '.$this->parts['last'];\n    }\n\n    function getOriginal() {\n        return $this->name;\n    }\n\n    function getInitials() {\n        $names = array($this->parts['first']);\n        $names = array_merge($names, explode(' ', $this->parts['middle']));\n        $names[] = $this->parts['last'];\n        $initials = '';\n        foreach (array_filter($names) as $n)\n            $initials .= mb_substr($n,0,1);\n        return mb_convert_case($initials, MB_CASE_UPPER);\n    }\n\n    function getName() {\n        return $this;\n    }\n\n    function getNameFormats($user, $type) {\n      $nameFormats = array();\n\n      foreach (PersonsName::allFormats() as $format => $func) {\n          $nameFormats[$type . '.name.' . $format] = $user->getName()->$func[1]();\n      }\n\n      return $nameFormats;\n    }\n\n    function asVar() {\n        return $this->__toString();\n    }\n\n    static function getVarScope() {\n        $formats = array();\n        foreach (static::$formats as $name=>$info) {\n            if (in_array($name, array('original', 'complete')))\n                continue;\n            $formats[$name] = $info[0];\n        }\n        return $formats;\n    }\n\n    function __toString() {\n\n        @list(, $func) = static::$formats[$this->format];\n        if (!$func) $func = 'getFull';\n\n        return (string) call_user_func(array($this, $func));\n    }\n\n    static function allFormats() {\n        return static::$formats;\n    }\n\n    /**\n     * Thanks, http://stackoverflow.com/a/14420217\n     */\n    static function splitName($name) {\n        $results = array();\n\n        $r = explode(' ', $name);\n        $size = count($r);\n\n        //check if name is bad format (ex: J.Everybody), and fix them\n        if($size==1 && mb_strpos($r[0], '.') !== false)\n        {\n            $r = explode('.', $name);\n            $size = count($r);\n        }\n\n        //check first for period, assume salutation if so\n        if (mb_strpos($r[0], '.') === false)\n        {\n            $results['salutation'] = '';\n            $results['first'] = $r[0];\n        }\n        else\n        {\n            $results['salutation'] = $r[0];\n            $results['first'] = $r[1];\n        }\n\n        //check last for period, assume suffix if so\n        if (mb_strpos($r[$size - 1], '.') === false)\n        {\n            $results['suffix'] = '';\n        }\n        else\n        {\n            $results['suffix'] = $r[$size - 1];\n        }\n\n        //combine remains into last\n        $start = ($results['salutation']) ? 2 : 1;\n        $end = ($results['suffix']) ? $size - 2 : $size - 1;\n\n        $middle = array();\n        for ($i = $start; $i <= $end; $i++)\n        {\n            $middle[] = $r[$i];\n        }\n        if (count($middle) > 1) {\n            $results['last'] = array_pop($middle);\n            $results['middle'] = implode(' ', $middle);\n        }\n        else {\n            $results['last'] = $middle[0];\n            $results['middle'] = '';\n        }\n\n        return $results;\n    }\n\n}\n\nclass AgentsName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n\n        if (!$format && $cfg)\n            $format = $cfg->getAgentNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\nclass UsersName extends PersonsName {\n    function __construct($name, $format=null) {\n        global $cfg;\n        if (!$format && $cfg)\n            $format = $cfg->getClientNameFormat();\n\n        parent::__construct($name, $format);\n    }\n}\n\n\nclass UserEmail extends UserEmailModel {\n    static function ensure($address) {\n        $email = static::lookup(array('address'=>$address));\n        if (!$email) {\n            $email = new static(array('address'=>$address));\n            $email->save();\n        }\n        return $email;\n    }\n}\n\n\nclass UserAccount extends VerySimpleModel {\n    static $meta = array(\n        'table' => USER_ACCOUNT_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'user' => array(\n                'null' => false,\n                'constraint' => array('user_id' => 'User.id')\n            ),\n        ),\n    );\n\n    const LANG_MAILOUTS = 1;            // Language preference for mailouts\n\n    var $_status;\n    var $_extra;\n\n    function getStatus() {\n        if (!isset($this->_status))\n            $this->_status = new UserAccountStatus($this->get('status'));\n        return $this->_status;\n    }\n\n    function statusChanged($flag, $var) {\n        if (($this->hasStatus($flag) && !$var) ||\n            (!$this->hasStatus($flag) && $var))\n                return true;\n    }\n\n    protected function hasStatus($flag) {\n        return $this->getStatus()->check($flag);\n    }\n\n    protected function clearStatus($flag) {\n        return $this->set('status', $this->get('status') & ~$flag);\n    }\n\n    protected function setStatus($flag) {\n        return $this->set('status', $this->get('status') | $flag);\n    }\n\n    function confirm() {\n        $this->setStatus(UserAccountStatus::CONFIRMED);\n        return $this->save();\n    }\n\n    function isConfirmed() {\n        return $this->getStatus()->isConfirmed();\n    }\n\n    function lock() {\n        $this->setStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function unlock() {\n        $this->clearStatus(UserAccountStatus::LOCKED);\n        return $this->save();\n    }\n\n    function isLocked() {\n        return $this->getStatus()->isLocked();\n    }\n\n    function isActive() {\n        return (!$this->isLocked() && $this->isConfirmed());\n    }\n\n    function forcePasswdReset() {\n        $this->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n        return $this->save();\n    }\n\n    function isPasswdResetForced() {\n        return $this->hasStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n    }\n\n    function isPasswdResetEnabled() {\n        return !$this->hasStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n    }\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function getId() {\n        return $this->get('id');\n    }\n\n    function getUserId() {\n        return $this->get('user_id');\n    }\n\n    function getUser() {\n        return $this->user;\n    }\n\n    function getUserName() {\n        return $this->getUser()->getName();\n    }\n\n    function getExtraAttr($attr=false, $default=null) {\n        if (!isset($this->_extra))\n            $this->_extra = JsonDataParser::decode($this->get('extra', ''));\n\n        return $attr ? (@$this->_extra[$attr] ?: $default) : $this->_extra;\n    }\n\n    function setExtraAttr($attr, $value) {\n        $this->getExtraAttr();\n        $this->_extra[$attr] = $value;\n    }\n\n    /**\n     * Function: getLanguage\n     *\n     * Returns the language preference for the user or false if no\n     * preference is defined. False indicates the browser indicated\n     * preference should be used. For requests apart from browser requests,\n     * the last language preference of the browser is set in the\n     * 'browser_lang' extra attribute upon logins. Send the LANG_MAILOUTS\n     * flag to also consider this saved value. Such is useful when sending\n     * the user a message (such as an email), and the user's browser\n     * preference is not available in the HTTP request.\n     *\n     * Parameters:\n     * $flags - (int) Send UserAccount::LANG_MAILOUTS if the user's\n     *      last-known browser preference should be considered. Normally\n     *      only the user's saved language preference is considered.\n     *\n     * Returns:\n     * Current or last-known language preference or false if no language\n     * preference is currently set or known.\n     */\n    function getLanguage($flags=false) {\n        $lang = $this->get('lang', false);\n        if (!$lang && ($flags & UserAccount::LANG_MAILOUTS))\n            $lang = $this->getExtraAttr('browser_lang', false);\n\n        return $lang;\n    }\n\n    function getTimezone() {\n        return $this->timezone;\n    }\n\n    function save($refetch=false) {\n        // Serialize the extra column on demand\n        if (isset($this->_extra)) {\n            $this->extra = JsonDataEncoder::encode($this->_extra);\n        }\n        return parent::save($refetch);\n    }\n\n    function hasPassword() {\n        return (bool) $this->get('passwd');\n    }\n\n    function sendResetEmail() {\n        return $this->sendUnlockEmail('pwreset-client') === true;\n    }\n\n    function sendConfirmEmail() {\n        return $this->sendUnlockEmail('registration-client') === true;\n    }\n\n    function setPassword($new) {\n        $this->set('passwd', Passwd::hash($new));\n        // Clean sessions\n        Signal::send('auth.clean', $this->getUser());\n    }\n\n    protected function sendUnlockEmail($template) {\n        global $ost, $cfg;\n\n        $token = Misc::randCode(48); // 290-bits\n\n        $email = $cfg->getDefaultEmail();\n        $content = Page::lookupByType($template);\n\n        if (!$email ||  !$content)\n            return new BaseError(sprintf(_S('%s: Unable to retrieve template'),\n                $template));\n\n        $vars = array(\n            'url' => $ost->getConfig()->getBaseUrl(),\n            'token' => $token,\n            'user' => $this->getUser(),\n            'recipient' => $this->getUser(),\n            'link' => sprintf(\n                \"%s/pwreset.php?token=%s\",\n                $ost->getConfig()->getBaseUrl(),\n                $token),\n        );\n        $vars['reset_link'] = &$vars['link'];\n\n        $info = array('email' => $email, 'vars' => &$vars, 'log'=>true);\n        Signal::send('auth.pwreset.email', $this->getUser(), $info);\n\n        $lang = $this->getLanguage(UserAccount::LANG_MAILOUTS);\n        $msg = $ost->replaceTemplateVariables(array(\n            'subj' => $content->getLocalName($lang),\n            'body' => $content->getLocalBody($lang),\n        ), $vars);\n\n        $_config = new Config('pwreset');\n        $_config->set($vars['token'], 'c'.$this->getUser()->getId());\n\n        $email->send($this->getUser()->getEmail(),\n            Format::striptags($msg['subj']), $msg['body']);\n\n        return true;\n    }\n\n    function __toString() {\n        return (string) $this->getStatus();\n    }\n\n    /*\n     * Updates may be done by Staff or by the User if registration\n     * options are set to Public\n     */\n    function update($vars, &$errors) {\n        // TODO: Make sure the username is unique\n\n        // Timezone selection is not required. System default is a valid\n        // fallback\n\n        // Changing password?\n        if ($vars['passwd1'] || $vars['passwd2']) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = __('New password is required');\n            else {\n                try {\n                    self::checkPassword($vars['passwd1']);\n                } catch (BadPassword $ex) {\n                    $errors['passwd1'] =  $ex->getMessage();\n                }\n            }\n        }\n\n        // Make sure the username is not an email.\n        if ($vars['username'] && Validator::is_email($vars['username']))\n            $errors['username'] =\n                __('Users can always sign in with their email address');\n\n        if ($errors) return false;\n\n        //flags\n        $pwreset = $this->statusChanged(UserAccountStatus::REQUIRE_PASSWD_RESET, $vars['pwreset-flag']);\n        $locked = $this->statusChanged(UserAccountStatus::LOCKED, $vars['locked-flag']);\n        $forbidPwChange = $this->statusChanged(UserAccountStatus::FORBID_PASSWD_RESET, $vars['forbid-pwchange-flag']);\n\n        $info = $this->getInfo();\n        foreach ($vars as $key => $value) {\n            if (($key != 'id' && $info[$key] && $info[$key] != $value) || ($pwreset && $key == 'pwreset-flag' ||\n                    $locked && $key == 'locked-flag' || $forbidPwChange && $key == 'forbid-pwchange-flag')) {\n                $type = array('type' => 'edited', 'key' => $key);\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n\n        $this->set('timezone', $vars['timezone']);\n        $this->set('username', Format::sanitize($vars['username']));\n\n        if ($vars['passwd1']) {\n            $this->setPassword($vars['passwd1']);\n            $this->setStatus(UserAccountStatus::CONFIRMED);\n            $type = array('type' => 'edited', 'key' => 'password');\n            Signal::send('object.edited', $this, $type);\n        }\n\n        // Set flags\n        foreach (array(\n                'pwreset-flag' => UserAccountStatus::REQUIRE_PASSWD_RESET,\n                'locked-flag' => UserAccountStatus::LOCKED,\n                'forbid-pwchange-flag' => UserAccountStatus::FORBID_PASSWD_RESET\n        ) as $ck=>$flag) {\n            if ($vars[$ck])\n                $this->setStatus($flag);\n            else {\n                if (($pwreset && $ck == 'pwreset-flag') || ($locked && $ck == 'locked-flag') ||\n                    ($forbidPwChange && $ck == 'forbid-pwchange-flag')) {\n                        $type = array('type' => 'edited', 'key' => $ck);\n                        Signal::send('object.edited', $this, $type);\n                }\n                $this->clearStatus($flag);\n            }\n        }\n\n        return $this->save(true);\n    }\n\n    static function createForUser($user, $defaults=false) {\n        $acct = new static(array('user_id'=>$user->getId()));\n        if ($defaults && is_array($defaults)) {\n            foreach ($defaults as $k => $v)\n                $acct->set($k, $v);\n        }\n        return $acct;\n    }\n\n    static function lookupByUsername($username) {\n        if (Validator::is_email($username))\n            $user = static::lookup(array('user__emails__address' => $username));\n        elseif (Validator::is_userid($username))\n            $user = static::lookup(array('username' => $username));\n\n        return $user;\n    }\n\n    static function register($user, $vars, &$errors) {\n\n        if (!$user || !$vars)\n            return false;\n\n        //Require temp password.\n        if ((!$vars['backend'] || $vars['backend'] != 'client')\n                && !isset($vars['sendemail'])) {\n            if (!$vars['passwd1'])\n                $errors['passwd1'] = 'Temporary password required';\n            elseif ($vars['passwd1'] && strcmp($vars['passwd1'], $vars['passwd2']))\n                $errors['passwd2'] = 'Passwords do not match';\n            else {\n                try {\n                    self::checkPassword($vars['passwd1']);\n                } catch (BadPassword $ex) {\n                    $errors['passwd1'] =  $ex->getMessage();\n                }\n            }\n        }\n\n        if ($errors) return false;\n\n        $account = new UserAccount(array(\n            'user_id' => $user->getId(),\n            'timezone' => $vars['timezone'],\n            'backend' => $vars['backend'],\n        ));\n\n        if ($vars['username'] && strcasecmp($vars['username'], $user->getEmail()))\n            $account->set('username', Format::sanitize($vars['username']));\n\n        if ($vars['passwd1'] && !$vars['sendemail']) {\n            $account->set('passwd', Passwd::hash($vars['passwd1']));\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n            if ($vars['pwreset-flag'])\n                $account->setStatus(UserAccountStatus::REQUIRE_PASSWD_RESET);\n            if ($vars['forbid-pwreset-flag'])\n                $account->setStatus(UserAccountStatus::FORBID_PASSWD_RESET);\n        }\n        elseif ($vars['backend'] && $vars['backend'] != 'client') {\n            // Auto confirm remote accounts\n            $account->setStatus(UserAccountStatus::CONFIRMED);\n        }\n\n        $account->save(true);\n\n        if (!$account->isConfirmed() && $vars['sendemail'])\n            $account->sendConfirmEmail();\n\n        return $account;\n    }\n\n    static function checkPassword($new, $current=null) {\n        osTicketClientAuthentication::checkPassword($new, $current);\n    }\n\n}\n\nclass UserAccountStatus {\n\n    var $flag;\n\n    const CONFIRMED             = 0x0001;\n    const LOCKED                = 0x0002;\n    const REQUIRE_PASSWD_RESET  = 0x0004;\n    const FORBID_PASSWD_RESET   = 0x0008;\n\n    function __construct($flag) {\n        $this->flag = $flag;\n    }\n\n    function check($flag) {\n        return 0 !== ($this->flag & $flag);\n    }\n\n    function isLocked() {\n        return $this->check(self::LOCKED);\n    }\n\n    function isConfirmed() {\n        return $this->check(self::CONFIRMED);\n    }\n\n    function __toString() {\n\n        if ($this->isLocked())\n            return __('Locked (Administrative)');\n\n        if (!$this->isConfirmed())\n            return __('Locked (Pending Activation)');\n\n        // ... Other flags here (password reset, etc).\n\n        return __('Active (Registered)');\n    }\n}\n\n/*\n *  Generic user list.\n */\nclass UserList extends MailingList {\n\n   function add($user) {\n        if (!$user instanceof ITicketUser)\n            throw new InvalidArgumentException('User expected');\n\n        return parent::add($user);\n    }\n}\n\n?>\n", "<?php\n$account = $user->getAccount();\n$access = (isset($info['_target']) && $info['_target'] == 'access');\n$org = $user->getOrganization();\n\nif (!$info['title'])\n    $info['title'] = Format::htmlchars($user->getName());\n?>\n<h3 class=\"drag-handle\"><?php echo $info['title']; ?></h3>\n<b><a class=\"close\" href=\"#\"><i class=\"icon-remove-circle\"></i></a></b>\n<div class=\"clear\"></div>\n<hr/>\n<?php\nif ($info['error']) {\n    echo sprintf('<p id=\"msg_error\">%s</p>', $info['error']);\n} elseif ($info['msg']) {\n    echo sprintf('<p id=\"msg_notice\">%s</p>', $info['msg']);\n} ?>\n<form method=\"post\" class=\"user\" action=\"#users/<?php echo $user->getId(); ?>/manage\" >\n<ul class=\"tabs\" id=\"user-account-tabs\">\n    <li <?php echo !$access? 'class=\"active\"' : ''; ?>><a href=\"#user-account\"\n        ><i class=\"icon-user\"></i>&nbsp;<?php echo __('User Information'); ?></a></li>\n    <li <?php echo $access? 'class=\"active\"' : ''; ?>><a href=\"#user-access\"\n        ><i class=\"icon-fixed-width icon-lock faded\"></i>&nbsp;<?php echo __('Manage Access'); ?></a></li>\n</ul>\n\n\n <input type=\"hidden\" name=\"id\" value=\"<?php echo $user->getId(); ?>\" />\n<div id=\"user-account-tabs_container\">\n <div class=\"tab_content\"  id=\"user-account\" style=\"display:<?php echo $access? 'none' : 'block'; ?>; margin:5px;\">\n    <form method=\"post\" class=\"user\" action=\"#users/<?php echo $user->getId(); ?>/manage\" >\n        <input type=\"hidden\" name=\"id\" value=\"<?php echo $user->getId(); ?>\" />\n        <table width=\"100%\">\n        <tbody>\n            <tr>\n                <th colspan=\"2\">\n                    <em><strong><?php echo __('User Information'); ?></strong></em>\n                </th>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Name'); ?>:\n                </td>\n                <td> <?php echo Format::htmlchars($user->getName()); ?> </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Email'); ?>:\n                </td>\n                <td> <?php echo $user->getEmail(); ?> </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Organization'); ?>:\n                </td>\n                <td><?php echo $org ? Format::htmlchars($org->getName()) : ''; ?></td>\n            </tr>\n        </tbody>\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo __('User Preferences'); ?></strong></em></th>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Time Zone');?>:\n                </td>\n                <td>\n                    <?php\n                    $TZ_NAME = 'timezone';\n                    $TZ_TIMEZONE = $info['timezone'];\n                    include STAFFINC_DIR.'templates/timezone.tmpl.php'; ?>\n                    <div class=\"error\"><?php echo $errors['timezone']; ?></div>\n                </td>\n            </tr>\n        </tbody>\n        </table>\n </div>\n <div class=\"tab_content\"  id=\"user-access\" style=\"display:<?php echo $access? 'block' : 'none'; ?>; margin:5px;\">\n        <table width=\"100%\">\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo __('Account Access'); ?></strong></em></th>\n            </tr>\n            <tr>\n                <td width=\"180\"><?php echo __('Status'); ?>:</td>\n                <td> <?php echo $user->getAccountStatus(); ?> </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Username'); ?>:\n                </td>\n                <td>\n                    <input type=\"text\" size=\"35\" name=\"username\" value=\"<?php echo Format::htmlchars($info['username']); ?>\" autocomplete=\"new-password\">\n                    <i class=\"help-tip icon-question-sign\" data-title=\"<?php\n                        echo __(\"Login via email\"); ?>\"\n                    data-content=\"<?php echo sprintf('%s: %s',\n                        __('Users can always sign in with their email address'),\n                        $user->getEmail()); ?>\"></i>\n                    <div class=\"error\"><?php echo $errors['username']; ?></div>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('New Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd1\" value=\"<?php echo $info['passwd1']; ?>\" autocomplete=\"new-password\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo\n                    $errors['passwd1']; ?></span>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                   <?php echo __('Confirm Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd2\" value=\"<?php echo $info['passwd2']; ?>\" autocomplete=\"new-password\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo $errors['passwd2']; ?></span>\n                </td>\n            </tr>\n        </tbody>\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo __('Account Flags'); ?></strong></em></th>\n            </tr>\n            <tr>\n                <td colspan=\"2\">\n                <?php\n                  echo sprintf('<div><input type=\"checkbox\" name=\"locked-flag\" %s\n                       value=\"1\"> %s</div>',\n                       $account->isLocked() ?  'checked=\"checked\"' : '',\n                       __('Administratively Locked')\n                       );\n                  ?>\n                   <div><input type=\"checkbox\" name=\"pwreset-flag\" value=\"1\" <?php\n                    echo $account->isPasswdResetForced() ?\n                    'checked=\"checked\"' : ''; ?>> <?php echo __('Password Reset Required'); ?></div>\n                   <div><input type=\"checkbox\" name=\"forbid-pwchange-flag\" value=\"1\" <?php\n                    echo !$account->isPasswdResetEnabled() ?\n                    'checked=\"checked\"' : ''; ?>> <?php echo __('User cannot change password'); ?></div>\n                </td>\n            </tr>\n        </tbody>\n        </table>\n   </div>\n   </div>\n   <hr>\n   <p class=\"full-width\">\n        <span class=\"buttons pull-left\">\n            <input type=\"reset\" value=\"<?php echo __('Reset'); ?>\">\n            <input type=\"button\" name=\"cancel\" class=\"close\" value=\"<?php echo __('Cancel'); ?>\">\n        </span>\n        <span class=\"buttons pull-right\">\n            <input type=\"submit\"\n                value=\"<?php echo __('Save Changes'); ?>\">\n        </span>\n    </p>\n</form>\n<div class=\"clear\"></div>\n<script type=\"text/javascript\">\n$(function() {\n    $(document).on('click', 'input#sendemail', function(e) {\n        if ($(this).prop('checked'))\n            $('tbody#password').hide();\n        else\n            $('tbody#password').show();\n    });\n});\n</script>\n", "<?php\nglobal $cfg;\n\nif (!$info['title'])\n    $info['title'] = sprintf(__('Register: %s'), Format::htmlchars($user->getName()));\n\nif (!$_POST) {\n    $info['sendemail'] = true; // send email confirmation.\n}\n\n?>\n<h3 class=\"drag-handle\"><?php echo $info['title']; ?></h3>\n<b><a class=\"close\" href=\"#\"><i class=\"icon-remove-circle\"></i></a></b>\n<div class=\"clear\"></div>\n<hr/>\n<?php\nif ($info['error']) {\n    echo sprintf('<p id=\"msg_error\">%s</p>', $info['error']);\n} elseif ($info['msg']) {\n    echo sprintf('<p id=\"msg_notice\">%s</p>', $info['msg']);\n} ?>\n<div><p id=\"msg_info\"><i class=\"icon-info-sign\"></i>&nbsp;<?php\necho sprintf(__(\n'Complete the form below to create a user account for <b>%s</b>.'\n), Format::htmlchars($user->getName()->getOriginal())\n); ?>\n</p></div>\n<div id=\"user-registration\" style=\"display:block; margin:5px;\">\n    <form method=\"post\" class=\"user\"\n        action=\"#users/<?php echo $user->getId(); ?>/register\">\n        <input type=\"hidden\" name=\"id\" value=\"<?php echo $user->getId(); ?>\" />\n        <table width=\"100%\">\n        <tbody>\n            <tr>\n                <th colspan=\"2\">\n                    <em><strong><?php echo __('User Account Login'); ?></strong></em>\n                </th>\n            </tr>\n            <tr>\n                <td><?php echo __('Authentication Sources'); ?>:</td>\n                <td>\n            <select name=\"backend\" id=\"backend-selection\" onchange=\"javascript:\n                if (this.value != '' && this.value != 'client') {\n                    $('#activation').hide();\n                    $('#password').hide();\n                }\n                else {\n                    $('#activation').show();\n                    if ($('#sendemail').is(':checked'))\n                        $('#password').hide();\n                    else\n                        $('#password').show();\n                }\n                \">\n                <option value=\"\">&mdash; <?php echo __('Use any available backend'); ?> &mdash;</option>\n            <?php foreach (UserAuthenticationBackend::allRegistered() as $ab) {\n                if (!$ab->supportsInteractiveAuthentication()) continue; ?>\n                <option value=\"<?php echo $ab::$id; ?>\" <?php\n                    if ($info['backend'] == $ab::$id)\n                        echo 'selected=\"selected\"'; ?>><?php\n                    echo $ab->getName(); ?></option>\n            <?php } ?>\n            </select>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Username'); ?>:\n                </td>\n                <td>\n                    <input type=\"text\" size=\"35\" name=\"username\" value=\"<?php echo $info['username'] ? Format::htmlchars($info['username']) : $user->getEmail(); ?>\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo Format::htmlchars($errors['username']); ?></span>\n                </td>\n            </tr>\n        </tbody>\n        <tbody id=\"activation\">\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Status'); ?>:\n                </td>\n                <td>\n                  <input type=\"checkbox\" id=\"sendemail\" name=\"sendemail\" value=\"1\"\n                    <?php echo $info['sendemail'] ? 'checked=\"checked\"' :\n                    ''; ?> ><?php echo sprintf(__(\n                    'Send account activation email to %s.'), $user->getEmail()); ?>\n                </td>\n            </tr>\n        </tbody>\n        <tbody id=\"password\"\n            style=\"<?php echo $info['sendemail'] ? 'display:none;' : ''; ?>\"\n            >\n            <tr>\n                <td width=\"180\">\n                    <?php echo __('Temporary Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd1\" value=\"<?php echo $info['passwd1']; ?>\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo\n                    $errors['passwd1']; ?></span>\n                </td>\n            </tr>\n            <tr>\n                <td width=\"180\">\n                   <?php echo __('Confirm Password'); ?>:\n                </td>\n                <td>\n                    <input type=\"password\" size=\"35\" name=\"passwd2\" value=\"<?php echo $info['passwd2']; ?>\">\n                    &nbsp;<span class=\"error\">&nbsp;<?php echo $errors['passwd2']; ?></span>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <?php echo __('Password Change'); ?>:\n                </td>\n                <td colspan=2>\n                    <input type=\"checkbox\" name=\"pwreset-flag\" value=\"1\" <?php\n                        echo $info['pwreset-flag'] ?  'checked=\"checked\"' : ''; ?>>\n                        <?php echo __('Require password change on login'); ?>\n                    <br/>\n                    <input type=\"checkbox\" name=\"forbid-pwreset-flag\" value=\"1\" <?php\n                        echo $info['forbid-pwreset-flag'] ?  'checked=\"checked\"' : ''; ?>>\n                        <?php echo __('User cannot change password'); ?>\n                </td>\n            </tr>\n        </tbody>\n        <tbody>\n            <tr>\n                <th colspan=\"2\"><em><strong><?php echo\n                    __('User Preferences'); ?></strong></em></th>\n            </tr>\n                <td><?php echo __('Time Zone'); ?>:</td>\n                <td>\n                    <?php\n                    $TZ_NAME = 'timezone';\n                    $TZ_TIMEZONE = $info['timezone'];\n                    include STAFFINC_DIR.'templates/timezone.tmpl.php'; ?>\n                    <div class=\"error\"><?php echo $errors['timezone']; ?></div>\n                </td>\n            </tr>\n        </tbody>\n        </table>\n        <hr>\n        <p class=\"full-width\">\n            <span class=\"buttons pull-left\">\n                <input type=\"reset\" value=\"<?php echo __('Reset'); ?>\">\n                <input type=\"button\" name=\"cancel\" class=\"close\" value=\"<?php echo __('Cancel'); ?>\">\n            </span>\n            <span class=\"buttons pull-right\">\n                <input type=\"submit\" value=\"<?php echo __('Create Account'); ?>\">\n            </span>\n         </p>\n    </form>\n</div>\n<div class=\"clear\"></div>\n<script type=\"text/javascript\">\n$(function() {\n    $(document).on('click', 'input#sendemail', function(e) {\n        if ($(this).prop('checked'))\n            $('tbody#password').hide();\n        else\n            $('tbody#password').show();\n    });\n});\n</script>\n"], "filenames": ["include/ajax.users.php", "include/class.client.php", "include/class.user.php", "include/staff/templates/user-account.tmpl.php", "include/staff/templates/user-register.tmpl.php"], "buggy_code_start_loc": [37, 487, 1323, 93, 71], "buggy_code_end_loc": [111, 488, 1402, 94, 73], "fixing_code_start_loc": [37, 487, 1323, 93, 71], "fixing_code_end_loc": [111, 488, 1402, 94, 73], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository osticket/osticket prior to 1.16.4.", "other": {"cve": {"id": "CVE-2022-4271", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-02T16:15:09.523", "lastModified": "2022-12-05T18:35:23.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository osticket/osticket prior to 1.16.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.4", "matchCriteriaId": "FFED1AFD-AC23-4274-AD64-D4FE60B8337B"}]}]}], "references": [{"url": "https://github.com/osticket/osticket/commit/5213ff138c6be6144a6692376ac0803a42eca168", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a11c922f-255a-412a-aa87-7f3bd7121599", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osticket/osticket/commit/5213ff138c6be6144a6692376ac0803a42eca168"}}