{"buggy_code": ["<?php\n\nuse Dibi\\Connection;\n\nclass Organizr\n{\n\t// Use Custom Functions From Traits;\n\tuse TwoFAFunctions;\n\tuse ApiFunctions;\n\tuse AuthFunctions;\n\tuse BackupFunctions;\n\tuse ConfigFunctions;\n\tuse DemoFunctions;\n\tuse HomepageConnectFunctions;\n\tuse HomepageFunctions;\n\tuse LogFunctions;\n\tuse NetDataFunctions;\n\tuse NormalFunctions;\n\tuse OAuthFunctions;\n\tuse OptionsFunction;\n\tuse OrganizrFunctions;\n\tuse PluginFunctions;\n\tuse StaticFunctions;\n\tuse SSOFunctions;\n\tuse TokenFunctions;\n\tuse UpdateFunctions;\n\tuse UpgradeFunctions;\n\n\t// Use homepage item functions\n\tuse BookmarksHomepageItem;\n\tuse CalendarHomepageItem;\n\tuse CouchPotatoHomepageItem;\n\tuse DelugeHomepageItem;\n\tuse DonateHomepageItem;\n\tuse EmbyHomepageItem;\n\tuse HealthChecksHomepageItem;\n\tuse HTMLHomepageItem;\n\tuse ICalHomepageItem;\n\tuse JackettHomepageItem;\n\tuse JDownloaderHomepageItem;\n\tuse JellyfinHomepageItem;\n\tuse LidarrHomepageItem;\n\tuse MiscHomepageItem;\n\tuse MonitorrHomepageItem;\n\tuse NetDataHomepageItem;\n\tuse NZBGetHomepageItem;\n\tuse OctoPrintHomepageItem;\n\tuse OmbiHomepageItem;\n\tuse OverseerrHomepageItem;\n\tuse PiHoleHomepageItem;\n\tuse PlexHomepageItem;\n\tuse QBitTorrentHomepageItem;\n\tuse RadarrHomepageItem;\n\tuse RTorrentHomepageItem;\n\tuse SabNZBdHomepageItem;\n\tuse SickRageHomepageItem;\n\tuse SonarrHomepageItem;\n\tuse SpeedTestHomepageItem;\n\tuse TautulliHomepageItem;\n\tuse TraktHomepageItem;\n\tuse TransmissionHomepageItem;\n\tuse UnifiHomepageItem;\n\tuse WeatherHomepageItem;\n\tuse uTorrentHomepageItem;\n\n\t// ===================================\n\t// Organizr Version\n\tpublic $version = '2.1.2000';\n\t// ===================================\n\t// Quick php Version check\n\tpublic $minimumPHP = '7.3';\n\t// ===================================\n\tprotected $db;\n\tprotected $otherDb;\n\tpublic $config;\n\tpublic $user;\n\tpublic $userConfigPath;\n\tpublic $defaultConfigPath;\n\tpublic $currentTime;\n\tpublic $docker;\n\tpublic $dev;\n\tpublic $demo;\n\tpublic $commit;\n\tpublic $fileHash;\n\tpublic $cookieName;\n\tpublic $log;\n\tpublic $logger;\n\tpublic $organizrLog;\n\tpublic $organizrLoginLog;\n\tpublic $timeExecution;\n\tpublic $root;\n\tpublic $paths;\n\tpublic $updating;\n\tpublic $groupOptions;\n\tpublic $warnings;\n\tpublic $errors;\n\n\tpublic function __construct($updating = false)\n\t{\n\t\t$this->errors = E_ALL;//E_ALL & ~E_NOTICE\n\t\t// Set custom Error handler\n\t\tset_error_handler([$this, 'setAPIErrorResponse'], $this->errors);\n\t\t// Next Check PHP Version\n\t\t$this->checkPHP();\n\t\t// Check Disk Space\n\t\t$this->checkDiskSpace();\n\t\t// Set UUID for device\n\t\t$this->setDeviceUUID();\n\t\t// Add Plugin prefix to plugin global\n\t\t$this->setPluginListNameFromConfigPrefix();\n\t\t// Constructed from Updater?\n\t\t$this->updating = $updating;\n\t\t// Set Project Root directory\n\t\t$this->root = dirname(__DIR__, 2);\n\t\t// Set Start Execution Time\n\t\t$this->timeExecution = $this->timeExecution();\n\t\t// Set location path to user config path\n\t\t$this->chooseConfigFile();\n\t\t//$this->userConfigPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';\n\t\t// Set location path to default config path\n\t\t$this->defaultConfigPath = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'default.php';\n\t\t// Set current time\n\t\t$this->currentTime = gmdate(\"Y-m-d\\TH:i:s\\Z\");\n\t\t// Set variable if install is for official docker\n\t\t$this->docker = (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Docker.txt'));\n\t\t// Set variable if install is for develop and set php Error levels\n\t\t$this->dev = (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Dev.txt'));\n\t\t$this->phpErrors();\n\t\t// Set variable if install is for demo\n\t\t$this->demo = (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Demo.txt'));\n\t\t// Set variable if install has commit hash\n\t\t$this->commit = ($this->docker && !$this->dev) ? file_get_contents(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Github.txt') : null;\n\t\t// Set variable to be used as hash for files\n\t\t$this->fileHash = ($this->commit) ?? $this->version;\n\t\t$this->fileHash = trim($this->fileHash);\n\t\t// Load Config file\n\t\t$this->config = $this->config();\n\t\t// Set organizr Logs and logger\n\t\t$this->log = $this->setOrganizrLog();\n\t\t$this->setLoggerChannel();\n\t\t// Set organizr Log file location - will deprecate soon\n\t\t$this->organizrLog = ($this->hasDB()) ? $this->config['dbLocation'] . 'organizrLog.json' : false;\n\t\t// Set organizr Login Log file location - will deprecate soon\n\t\t$this->organizrLoginLog = ($this->hasDB()) ? $this->config['dbLocation'] . 'organizrLoginLog.json' : false;\n\t\t// Set Paths\n\t\t$this->paths = array(\n\t\t\t'Root Folder' => dirname(__DIR__, 2) . DIRECTORY_SEPARATOR,\n\t\t\t'Cache Folder' => dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR,\n\t\t\t'Tab Folder' => $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR,\n\t\t\t'API Folder' => dirname(__DIR__, 1) . DIRECTORY_SEPARATOR,\n\t\t\t'DB Folder' => ($this->hasDB()) ? $this->config['dbLocation'] : false\n\t\t);\n\t\t// Connect to DB\n\t\t$this->connectDB();\n\t\t// Check DB Writable\n\t\t$this->checkWritableDB();\n\t\t// Set cookie name for Organizr Instance\n\t\t$this->cookieName = ($this->hasDB()) ? $this->config['uuid'] !== '' ? 'organizr_token_' . $this->config['uuid'] : 'organizr_token_temp' : 'organizr_token_temp';\n\t\t// Get token form cookie and validate\n\t\t$this->setCurrentUser();\n\t\t// might just run this at index\n\t\t$this->upgradeCheck();\n\t\t// Is Page load Organizr OAuth?\n\t\t$this->checkForOrganizrOAuth();\n\t\t// Is user Blacklisted?\n\t\t$this->checkIfUserIsBlacklisted();\n\t}\n\n\tpublic function __destruct()\n\t{\n\t\t$this->disconnectDB();\n\t}\n\n\tpublic function chooseConfigFile()\n\t{\n\n\t\t$oldUserConfigPath = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';\n\t\t$userConfigPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';\n\t\tif (file_exists($userConfigPath) && file_exists($oldUserConfigPath)) {\n\t\t\t$this->userConfigPath = $userConfigPath;\n\t\t} elseif (file_exists($oldUserConfigPath)) {\n\t\t\t$this->makeDir(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR);\n\t\t\tif ($this->rcopy($oldUserConfigPath, $userConfigPath)) {\n\t\t\t\t$this->userConfigPath = $userConfigPath;\n\t\t\t\t@unlink($oldUserConfigPath);\n\t\t\t} else {\n\t\t\t\t$this->userConfigPath = $oldUserConfigPath;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->userConfigPath = $userConfigPath;\n\t\t}\n\t}\n\n\tpublic function hasConfig()\n\t{\n\t\treturn (file_exists($this->userConfigPath)) ?? false;\n\t}\n\n\tpublic function hasDatabase($file = null)\n\t{\n\t\t$databaseType = $this->config['driver'];\n\t\tif (!$this->hasConfig()) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (strtolower($databaseType)) {\n\t\t\tcase 'sqlite3':\n\t\t\t\t$file = $file ? $this->config['dbLocation'] . $file : $this->config['dbLocation'] . $this->config['dbName'];\n\t\t\t\treturn [\n\t\t\t\t\t'driver' => 'sqlite3',\n\t\t\t\t\t'database' => $file\n\t\t\t\t];\n\t\t\tcase 'mysql':\n\t\t\tcase 'mysqli':\n\t\t\t\t$db = $file ? 'tempMigration' : $this->config['dbName'];\n\t\t\t\treturn [\n\t\t\t\t\t'driver' => 'mysqli',\n\t\t\t\t\t'host' => $this->config['dbHost'],\n\t\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t\t'database' => $db,\n\t\t\t\t\t'options' => [\n\t\t\t\t\t\tMYSQLI_OPT_CONNECT_TIMEOUT => 60,\n\t\t\t\t\t],\n\t\t\t\t\t'flags' => MYSQLI_CLIENT_COMPRESS,\n\t\t\t\t];\n\t\t\tcase 'postgre':\n\t\t\t\t$config = [\n\t\t\t\t\t'driver' => 'postgre',\n\t\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t\t'persistent' => true,\n\t\t\t\t];\n\t\t\t\t$host = $this->qualifyURL($this->config['dbHost'], true);\n\t\t\t\tif ($host['port']) {\n\t\t\t\t\t$config = array_merge($config, ['port' => ltrim($host['port'], ':')]);\n\t\t\t\t}\n\t\t\t\tif ($host['host']) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['host']]);\n\t\t\t\t}\n\t\t\t\tif (!$host['host'] && $host['path']) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['path']]);\n\t\t\t\t}\n\t\t\t\treturn $config;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tprotected function connectDB()\n\t{\n\n\t\t$databaseConnection = $this->hasDatabase();\n\t\t//$this->prettyPrint($databaseConnection);\n\t\tif ($databaseConnection) {\n\t\t\ttry {\n\t\t\t\t$this->db = new Connection($databaseConnection);\n\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t$this->db = null;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->db = null;\n\t\t}\n\t}\n\n\tpublic function disconnectDB()\n\t{\n\t\tif ($this->db) {\n\t\t\t$this->db->disconnect();\n\t\t\t$this->db = null;\n\t\t\tunset($this->db);\n\t\t}\n\t}\n\n\tpublic function connectOtherDB($file = null)\n\t{\n\t\t$databaseConnection = $this->hasDatabase('tempMigration.db');\n\t\tif ($databaseConnection) {\n\t\t\ttry {\n\t\t\t\t$this->otherDb = new Connection($databaseConnection);\n\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t$this->prettyPrint($e->getMessage());\n\t\t\t\t$this->otherDb = null;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->otherDb = null;\n\t\t}\n\t}\n\n\tpublic function setDeviceUUID()\n\t{\n\t\tif (!isset($_COOKIE['organizr_user_uuid'])) {\n\t\t\t$this->coookie('set', 'organizr_user_uuid', $this->gen_uuid(), 7);\n\t\t}\n\t}\n\n\tpublic function refreshDeviceUUID()\n\t{\n\t\tif (isset($_COOKIE['organizr_user_uuid'])) {\n\t\t\t$this->coookie('delete', 'organizr_user_uuid');\n\t\t}\n\t\t$this->coookie('set', 'organizr_user_uuid', $this->gen_uuid(), 7);\n\t}\n\n\tpublic function setCurrentUser($validate = true)\n\t{\n\t\t$user = false;\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->hasCookie()) {\n\t\t\t\t$user = $this->getUserFromToken($_COOKIE[$this->cookieName]);\n\t\t\t}\n\t\t}\n\t\t$this->user = ($user) ?: $this->guestUser();\n\t\t$this->setLoggerChannel(null, $this->user['username']);\n\t\tif ($validate) {\n\t\t\t$this->checkUserTokenForValidation();\n\t\t}\n\t}\n\n\tpublic function checkUserTokenForValidation()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->hasCookie()) {\n\t\t\t\t$this->validateToken($_COOKIE[$this->cookieName]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function phpErrors()\n\t{\n\t\t$errorTypes = $this->dev ? E_ERROR | E_WARNING | E_PARSE | E_NOTICE : 0;\n\t\t// Temp overwrite for now\n\t\t$displayErrors = $this->dev ? 1 : 0;\n\t\terror_reporting($this->errors);\n\t\tini_set('display_errors', $displayErrors);\n\t}\n\n\tpublic function checkForOrganizrOAuth()\n\t{\n\t\t// Oauth?\n\t\tif ($this->user) {\n\t\t\tif ($this->user['groupID'] == '999') {\n\t\t\t\t$this->setLoggerChannel('OAuth')->debug('Starting OAuth login check');\n\t\t\t\t$data = [\n\t\t\t\t\t'enabled' => $this->config['authProxyEnabled'],\n\t\t\t\t\t'header_name' => $this->config['authProxyHeaderName'],\n\t\t\t\t\t'header_name_email' => $this->config['authProxyHeaderNameEmail'],\n\t\t\t\t\t'whitelist' => $this->config['authProxyWhitelist'],\n\t\t\t\t];\n\t\t\t\tif ($this->config['authProxyEnabled'] && ($this->config['authProxyHeaderName'] !== '' || $this->config['authProxyHeaderNameEmail'] !== '') && $this->config['authProxyWhitelist'] !== '') {\n\t\t\t\t\tif (isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderName'])]) || isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderNameEmail'])])) {\n\t\t\t\t\t\t$this->coookieSeconds('set', 'organizrOAuth', 'true', 20000, false);\n\t\t\t\t\t\t$this->setLoggerChannel('OAuth')->info('OAuth pre-check passed - adding organizrOAuth cookie', $data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$data = array_merge($data, ['headers' => $this->getallheadersi()]);\n\t\t\t\t\t\t$this->setLoggerChannel('OAuth')->debug('Headers not set', $data);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('OAuth')->debug('OAuth not triggered', $data);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function checkIfUserIsBlacklisted()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\t$currentIP = $this->userIP();\n\t\t\tif ($this->config['blacklisted'] !== '') {\n\t\t\t\tif (in_array($currentIP, $this->arrayIP($this->config['blacklisted']))) {\n\t\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t\t$this->logger->debug('User was sent to black hole', ['blacklist' => $this->config['blacklisted']]);\n\t\t\t\t\tdie($this->showHTML('Blacklisted', $this->config['blacklistedMessage']));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function checkDiskSpace($directory = './')\n\t{\n\t\t$readable = @is_readable($directory);\n\t\tif ($readable) {\n\t\t\t$disk = $this->checkDisk($directory);\n\t\t\t$diskLevels = [\n\t\t\t\t'warn' => 1000000000,\n\t\t\t\t'warn_human_readable' => $this->human_filesize(1000000000, 0),\n\t\t\t\t'error' => 100000000,\n\t\t\t\t'error_human_readable' => $this->human_filesize(100000000, 0),\n\t\t\t];\n\t\t\tif ($disk['free']['raw'] <= $diskLevels['error']) {\n\t\t\t\tdie($this->showHTML('Low Disk Space', 'You are dangerously low on disk space.<br/>There is only ' . $disk['free']['human_readable'] . ' remaining.<br/><b>Percent Used = ' . $disk['used']['percent_used'] . '%</b>'));\n\t\t\t} elseif ($disk['free']['raw'] <= $diskLevels['warn']) {\n\t\t\t\t$this->warnings[] = 'You are low on disk space.  There is only ' . $disk['free']['human_readable'] . ' remaining.  This warning shows up because you are past the warning threshold of ' . $diskLevels['warn_human_readable'];\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function getFreeSpace($directory = './')\n\t{\n\t\t$disk = disk_free_space($directory);\n\t\treturn [\n\t\t\t'raw' => $disk,\n\t\t\t'human_readable' => $this->human_filesize($disk, 0)\n\t\t];\n\t}\n\n\tpublic function getDiskSpace($directory = './')\n\t{\n\t\t$disk = disk_total_space($directory);\n\t\treturn [\n\t\t\t'raw' => $disk,\n\t\t\t'human_readable' => $this->human_filesize($disk, 0)\n\t\t];\n\t}\n\n\tpublic function getUsedSpace($directory = './')\n\t{\n\t\t$diskFree = $this->getFreeSpace($directory);\n\t\t$diskTotal = $this->getDiskSpace($directory);\n\t\t$diskUsed = $diskTotal['raw'] - $diskFree['raw'];\n\t\t$percentUsed = ($diskUsed / $diskTotal['raw']) * 100;\n\t\t$percentFree = 100 - $percentUsed;\n\t\treturn [\n\t\t\t'raw' => $diskUsed,\n\t\t\t'human_readable' => $this->human_filesize($diskUsed, 0),\n\t\t\t'percent_used' => round($percentUsed),\n\t\t\t'percent_free' => round($percentFree)\n\t\t];\n\t}\n\n\tpublic function checkDisk($directory = './')\n\t{\n\t\t$readable = @is_readable($directory);\n\t\tif ($readable) {\n\t\t\treturn [\n\t\t\t\t'free' => $this->getFreeSpace($directory),\n\t\t\t\t'used' => $this->getUsedSpace($directory),\n\t\t\t\t'total' => $this->getDiskSpace($directory),\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\t'free' => 'error accessing path',\n\t\t\t\t'used' => 'error accessing path',\n\t\t\t\t'total' => 'error accessing path',\n\t\t\t];\n\t\t}\n\t}\n\n\tpublic function errorCodes($error = 000)\n\t{\n\t\t$errorCodes = [\n\t\t\t400 => [\n\t\t\t\t'type' => 'Bad Request',\n\t\t\t\t'description' => 'The request was incorrect'\n\t\t\t],\n\t\t\t401 => [\n\t\t\t\t'type' => 'Unauthorized ',\n\t\t\t\t'description' => 'You are not authorized to view this page'\n\t\t\t],\n\t\t\t402 => [\n\t\t\t\t'type' => 'Payment Required',\n\t\t\t\t'description' => 'Payment required before you can view this page'\n\t\t\t],\n\t\t\t403 => [\n\t\t\t\t'type' => 'Forbidden',\n\t\t\t\t'description' => 'You are forbidden to view this page'\n\t\t\t],\n\t\t\t404 => [\n\t\t\t\t'type' => 'Not Found',\n\t\t\t\t'description' => 'The requested resource was not found'\n\t\t\t],\n\t\t\t405 => [\n\t\t\t\t'type' => 'Method Not Allowed',\n\t\t\t\t'description' => 'The requested method is not allowed'\n\t\t\t],\n\t\t\t406 => [\n\t\t\t\t'type' => 'Not Acceptable',\n\t\t\t\t'description' => 'There was an issue with the requests Headers'\n\t\t\t],\n\t\t\t407 => [\n\t\t\t\t'type' => 'Proxy Authentication Required',\n\t\t\t\t'description' => 'Authentication is required and was not passed'\n\t\t\t],\n\t\t\t408 => [\n\t\t\t\t'type' => 'Request Time-out',\n\t\t\t\t'description' => 'The request has timed out'\n\t\t\t],\n\t\t\t409 => [\n\t\t\t\t'type' => 'Conflict',\n\t\t\t\t'description' => 'An error has occurred'\n\t\t\t],\n\t\t\t410 => [\n\t\t\t\t'type' => 'Gone',\n\t\t\t\t'description' => 'The requested resource is no longer available and has been permanently removed'\n\t\t\t],\n\t\t\t411 => [\n\t\t\t\t'type' => 'Length Required',\n\t\t\t\t'description' => 'The request can not be processed without a \"Content-Length\" header field'\n\t\t\t],\n\t\t\t412 => [\n\t\t\t\t'type' => 'Precondition Failed',\n\t\t\t\t'description' => ' A header needed was not found'\n\t\t\t],\n\t\t\t413 => [\n\t\t\t\t'type' => 'Request Entity Too Large',\n\t\t\t\t'description' => 'The query was too large to be processed by the server'\n\t\t\t],\n\t\t\t414 => [\n\t\t\t\t'type' => 'Request-URI Too Long',\n\t\t\t\t'description' => 'The URI of the request was too long'\n\t\t\t],\n\t\t\t415 => [\n\t\t\t\t'type' => 'Unsupported Media Type',\n\t\t\t\t'description' => 'The contents of the request has been submitted with invalid or out of defined media type'\n\t\t\t],\n\t\t\t416 => [\n\t\t\t\t'type' => 'Requested range not satisfiable',\n\t\t\t\t'description' => 'The requested resource was part of an invalid or is not on the server'\n\t\t\t],\n\t\t\t417 => [\n\t\t\t\t'type' => 'Expectation Failed',\n\t\t\t\t'description' => 'Expected Header was not found'\n\t\t\t],\n\t\t\t444 => [\n\t\t\t\t'type' => 'No Response',\n\t\t\t\t'description' => 'Nothing was returned from server'\n\t\t\t],\n\t\t\t500 => [\n\t\t\t\t'type' => 'Internal Server Error',\n\t\t\t\t'description' => 'An unexpected server error'\n\t\t\t],\n\t\t\t501 => [\n\t\t\t\t'type' => 'Not Implemented',\n\t\t\t\t'description' => 'The functionality to process the request is not available from this server'\n\t\t\t],\n\t\t\t502 => [\n\t\t\t\t'type' => 'Bad Gateway',\n\t\t\t\t'description' => 'The server could not fulfill its function as a gateway or proxy'\n\t\t\t],\n\t\t\t503 => [\n\t\t\t\t'type' => 'Service Unavailable',\n\t\t\t\t'description' => 'The server is temporarily unavailable, due to overloading or maintenance'\n\t\t\t],\n\t\t\t504 => [\n\t\t\t\t'type' => 'Gateway Time-out',\n\t\t\t\t'description' => 'The server could not fulfill its function as a gateway or proxy'\n\t\t\t],\n\t\t\t505 => [\n\t\t\t\t'type' => 'HTTP version not supported',\n\t\t\t\t'description' => 'The used version of HTTP is not supported by the server or rejected'\n\t\t\t],\n\t\t\t507 => [\n\t\t\t\t'type' => 'Insufficient Storage',\n\t\t\t\t'description' => 'The request could not be processed because the server disk space it currently is not sufficient'\n\t\t\t],\n\t\t\t509 => [\n\t\t\t\t'type' => 'Bandwidth Limit Exceeded',\n\t\t\t\t'description' => 'The request was rejected, because otherwise the bandwidth would be exceeded'\n\t\t\t],\n\t\t\t510 => [\n\t\t\t\t'type' => 'Not Extended',\n\t\t\t\t'description' => 'The request does not contain all information that is waiting for the requested server extension imperative'\n\t\t\t],\n\t\t\t000 => [\n\t\t\t\t'type' => 'Unexpected Error',\n\t\t\t\t'description' => 'An unexpected error occurred'\n\t\t\t],\n\t\t];\n\t\treturn (isset($errorCodes[$error])) ? $errorCodes[$error] : $errorCodes[000];\n\t}\n\n\tpublic function showTopBarHamburger()\n\t{\n\t\tif ($this->config['allowCollapsableSideMenu']) {\n\t\t\tif ($this->config['sideMenuCollapsed']) {\n\t\t\t\treturn '<a class=\"toggle-side-menu\" href=\"javascript:void(0)\"><i class=\"ti-menu fa-fw\"></i></a>';\n\t\t\t} else {\n\t\t\t\treturn '<a class=\"toggle-side-menu hidden\" href=\"javascript:void(0)\"><i class=\"ti-menu fa-fw\"></i></a>';\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic function showSideBarHamburger()\n\t{\n\t\tif ($this->config['allowCollapsableSideMenu']) {\n\t\t\tif (!$this->config['sideMenuCollapsed']) {\n\t\t\t\treturn '<i class=\"hidden-xs ti-shift-left mouse\"></i>';\n\t\t\t}\n\t\t}\n\t\treturn '<i class=\"ti-menu hidden-xs\"></i>';\n\t}\n\n\tpublic function showSideBarText()\n\t{\n\t\tif ($this->config['allowCollapsableSideMenu']) {\n\t\t\tif (!$this->config['sideMenuCollapsed']) {\n\t\t\t\treturn '<span class=\"hide-menu hidden-xs\" lang=\"en\">Hide Menu</span>';\n\t\t\t}\n\t\t}\n\t\treturn '<span class=\"hide-menu hidden-xs\" lang=\"en\">Navigation</span>';\n\t}\n\n\tpublic function auth()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\t$this->setLoggerChannel('Auth');\n\t\t\tif (isset($_GET['type'])) {\n\t\t\t\tswitch (strtolower($_GET['type'])) {\n\t\t\t\t\tcase 'whitelist':\n\t\t\t\t\tcase 'white':\n\t\t\t\t\tcase 'w':\n\t\t\t\t\tcase 'wl':\n\t\t\t\t\tcase 'allow':\n\t\t\t\t\t\t$_GET['whitelist'] = $_GET['ips'] ?? false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blacklist':\n\t\t\t\t\tcase 'black':\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'bl':\n\t\t\t\t\tcase 'deny':\n\t\t\t\t\t\t$_GET['blacklist'] = $_GET['ips'] ?? false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$this->setAPIResponse('error', $_GET['type'] . ' is not a valid type', 401);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$whitelist = $_GET['whitelist'] ?? false;\n\t\t\t$blacklist = $_GET['blacklist'] ?? false;\n\t\t\t$group = 0;\n\t\t\t$groupParam = ($_GET['group']) ?? 0;\n\t\t\t$redirect = false;\n\t\t\tif (isset($groupParam)) {\n\t\t\t\tif (is_numeric($groupParam)) {\n\t\t\t\t\t$group = (int)$groupParam;\n\t\t\t\t} else {\n\t\t\t\t\t$group = $this->getTabGroupByTabName($groupParam);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$currentIP = $this->userIP();\n\t\t\t$unlocked = !($this->user['locked'] == '1');\n\t\t\tif (isset($this->user)) {\n\t\t\t\t$currentUser = $this->user['username'];\n\t\t\t\t$currentGroup = $this->user['groupID'];\n\t\t\t\t$currentEmail = $this->user['email'];\n\t\t\t} else {\n\t\t\t\t$currentUser = 'Guest';\n\t\t\t\t$currentGroup = $this->getUserLevel();\n\t\t\t\t$currentEmail = 'guest@guest.com';\n\t\t\t}\n\t\t\t$userInfo = [\n\t\t\t\t\"user\" => $currentUser,\n\t\t\t\t\"group\" => $currentGroup,\n\t\t\t\t\"email\" => $currentEmail,\n\t\t\t\t\"user_ip\" => $currentIP,\n\t\t\t\t\"requested_group\" => $group,\n\t\t\t\t\"uuid\" => $_COOKIE['organizr_user_uuid'] ?? 'n/a'\n\t\t\t];\n\t\t\t$this->logger->debug('Starting check', $userInfo);\n\t\t\t$responseMessage = 'User is not Authorized or User is locked';\n\t\t\tif ($whitelist) {\n\t\t\t\tif (in_array($currentIP, $this->arrayIP($whitelist))) {\n\t\t\t\t\t$responseMessage = 'User is whitelisted';\n\t\t\t\t\t$this->setAPIResponse('success', $responseMessage, 200, $userInfo);\n\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($blacklist) {\n\t\t\t\tif (in_array($currentIP, $this->arrayIP($blacklist))) {\n\t\t\t\t\t$responseMessage = 'User is blacklisted';\n\t\t\t\t\t$this->setAPIResponse('error', $responseMessage, 401, $userInfo);\n\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($group !== null) {\n\t\t\t\tif ((isset($_SERVER['HTTP_X_FORWARDED_SERVER']) && $_SERVER['HTTP_X_FORWARDED_SERVER'] == 'traefik') || $this->config['traefikAuthEnable']) {\n\t\t\t\t\t$return = (isset($_SERVER['HTTP_X_FORWARDED_HOST']) && isset($_SERVER['HTTP_X_FORWARDED_URI']) && isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) ? '?return=' . $_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . $_SERVER['HTTP_X_FORWARDED_HOST'] . $_SERVER['HTTP_X_FORWARDED_URI'] : '';\n\t\t\t\t\t$redirectDomain = ($this->config['traefikDomainOverride'] !== '') ? $this->config['traefikDomainOverride'] : $this->getServerPath();\n\t\t\t\t\t$redirect = 'Location: ' . $redirectDomain . $return;\n\t\t\t\t}\n\t\t\t\tif ($this->qualifyRequest($group) && $unlocked) {\n\t\t\t\t\theader(\"X-Organizr-User: $currentUser\");\n\t\t\t\t\theader(\"X-Organizr-Email: $currentEmail\");\n\t\t\t\t\theader(\"X-Organizr-Group: $currentGroup\");\n\t\t\t\t\t$responseMessage = 'User is authorized';\n\t\t\t\t\t$this->setAPIResponse('success', $responseMessage, 200, $userInfo);\n\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t} else {\n\t\t\t\t\tif (!$redirect) {\n\t\t\t\t\t\t$this->setAPIResponse('error', $responseMessage, 401, $userInfo);\n\t\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texit(http_response_code(401) . header($redirect));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Missing info', 401);\n\t\t\t\t$this->logger->debug('Missing info', $userInfo);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Organizr is not setup or an error occurred', 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getIpInfo($ip = null)\n\t{\n\t\tif (!$ip) {\n\t\t\t$this->setResponse(422, 'No IP Address supplied');\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t$options = array('verify' => false);\n\t\t\t$response = Requests::get('https://ipinfo.io/' . $ip . '/?token=ddd0c072ad5021', array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\t$api = json_decode($response->body, true);\n\t\t\t\t$this->setResponse(200, null, $api);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setResponse(500, 'An error occurred', null);\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, 'An error occurred', $e->getMessage());\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function setAPIResponse($result = null, $message = null, $responseCode = null, $data = null)\n\t{\n\t\tif ($result) {\n\t\t\t$GLOBALS['api']['response']['result'] = $result;\n\t\t}\n\t\tif ($message) {\n\t\t\t$GLOBALS['api']['response']['message'] = $message;\n\t\t}\n\t\tif ($responseCode) {\n\t\t\t$GLOBALS['responseCode'] = $responseCode;\n\t\t}\n\t\tif ($data) {\n\t\t\t$GLOBALS['api']['response']['data'] = $data;\n\t\t}\n\t}\n\n\tpublic function setResponse(int $responseCode = 200, string $message = null, $data = null)\n\t{\n\t\tswitch ($responseCode) {\n\t\t\tcase 200:\n\t\t\tcase 201:\n\t\t\tcase 204:\n\t\t\t\t$result = 'success';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$result = 'error';\n\t\t\t\tbreak;\n\t\t}\n\t\t$GLOBALS['api']['response']['result'] = $result;\n\t\tif ($message) {\n\t\t\t$GLOBALS['api']['response']['message'] = $message;\n\t\t}\n\t\tif ($responseCode) {\n\t\t\t$GLOBALS['responseCode'] = $responseCode;\n\t\t}\n\t\tif ($data) {\n\t\t\t$GLOBALS['api']['response']['data'] = $data;\n\t\t}\n\t}\n\n\tpublic function printWarningsAndErrors()\n\t{\n\t\tif (isset($GLOBALS['api']['response']['exceptions'])) {\n\t\t\t$this->prettyPrint($GLOBALS['api']['response']['exceptions'], true);\n\t\t} else {\n\t\t\t$this->prettyPrint('No Errors');\n\t\t}\n\t}\n\n\tpublic function setAPIErrorResponse($number, $message, $file, $line)\n\t{\n\t\tif (!(error_reporting() & $number)) {\n\t\t\treturn;\n\t\t}\n\t\t$exceptions = [\n\t\t\tE_ERROR => 'E_ERROR',\n\t\t\tE_WARNING => 'E_WARNING',\n\t\t\tE_PARSE => 'E_PARSE',\n\t\t\tE_NOTICE => 'E_NOTICE',\n\t\t\tE_CORE_ERROR => 'E_CORE_ERROR',\n\t\t\tE_CORE_WARNING => 'E_CORE_WARNING',\n\t\t\tE_COMPILE_ERROR => 'E_COMPILE_ERROR',\n\t\t\tE_COMPILE_WARNING => 'E_COMPILE_WARNING',\n\t\t\tE_USER_ERROR => 'E_USER_ERROR',\n\t\t\tE_USER_WARNING => 'E_USER_WARNING',\n\t\t\tE_USER_NOTICE => 'E_USER_NOTICE',\n\t\t\tE_STRICT => 'E_STRICT',\n\t\t\tE_RECOVERABLE_ERROR => 'E_RECOVERABLE_ERROR',\n\t\t\tE_DEPRECATED => 'E_DEPRECATED',\n\t\t\tE_USER_DEPRECATED => 'E_USER_DEPRECATED',\n\t\t\tE_ALL => 'E_ALL'\n\t\t];\n\t\tswitch ($number) {\n\t\t\tcase E_USER_ERROR:\n\t\t\tcase E_ERROR:\n\t\t\tcase E_CORE_ERROR:\n\t\t\tcase E_COMPILE_ERROR:\n\t\t\tcase E_RECOVERABLE_ERROR:\n\t\t\t\t$type = 'errors';\n\t\t\t\tbreak;\n\t\t\tcase E_USER_WARNING:\n\t\t\tcase E_WARNING:\n\t\t\tcase E_CORE_WARNING:\n\t\t\tcase E_COMPILE_WARNING:\n\t\t\t\t$type = 'warnings';\n\t\t\t\tbreak;\n\t\t\tcase E_USER_NOTICE:\n\t\t\tcase E_PARSE:\n\t\t\tcase E_DEPRECATED:\n\t\t\tcase E_USER_DEPRECATED:\n\t\t\tcase E_NOTICE:\n\t\t\t\t$type = 'notice';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$type = 'other';\n\t\t\t\tbreak;\n\t\t}\n\t\tif ($this->qualifyRequest(1)) {\n\t\t\t$count = isset($GLOBALS['api']['response']['exceptions'][$type]) ? count($GLOBALS['api']['response']['exceptions'][$type]) : 0;\n\t\t\tif ($count <= 10) {\n\t\t\t\t$GLOBALS['api']['response']['exceptions'][$type][] = [\n\t\t\t\t\t'error' => $exceptions[$number],\n\t\t\t\t\t'message' => $message,\n\t\t\t\t\t'file' => $file,\n\t\t\t\t\t'line' => $line\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\t$this->handleError($exceptions[$number], $message, $file, $line);\n\t}\n\n\tpublic function setErrorResponse($number, $message, $file, $line)\n\t{\n\t\t$error = [\n\t\t\t'error' => $number,\n\t\t\t'message' => $message,\n\t\t\t'file' => $file,\n\t\t\t'line' => $line\n\t\t];\n\t\t$this->handleError($number, $message, $file, $line);\n\t\t//$this->prettyPrint($error, true);\n\t}\n\n\tpublic function handleError($number, $message, $file, $line)\n\t{\n\t\t$error = sprintf('Organizr %s:  %s in %s on line %d', $number, $message, $file, $line);\n\t\terror_log($error);\n\t\t$this->setLoggerChannel('Server Error')->warning('PHP Error', $error);\n\t}\n\n\tpublic function checkRoute($request)\n\t{\n\t\t$route = '/api/v2/' . explode('api/v2/', $request->getUri()->getPath())[1];\n\t\t$method = $request->getMethod();\n\t\t$data = $this->apiData($request);\n\t\tif (!in_array($route, $GLOBALS['bypass'])) {\n\t\t\tif ($this->isApprovedRequest($method, $data) === false) {\n\t\t\t\t$this->setAPIResponse('error', 'Not authorized for current Route: ' . $route, 401);\n\t\t\t\t$this->setLoggerChannel('API Security');\n\t\t\t\t$this->logger->notice('Killed Attack From [' . ($_SERVER['HTTP_REFERER'] ?? 'No Referer') . ']');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function apiData($request, $decode = true)\n\t{\n\t\tswitch ($request->getMethod()) {\n\t\t\tcase 'POST':\n\t\t\t\tif (stripos($request->getHeaderLine('Content-Type'), 'application/json') !== false) {\n\t\t\t\t\treturn $decode ? json_decode(file_get_contents('php://input', 'r'), true) : file_get_contents('php://input', 'r');\n\t\t\t\t} else {\n\t\t\t\t\treturn $request->getParsedBody();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tif (stripos($request->getHeaderLine('Content-Type'), 'application/json') !== false) {\n\t\t\t\t\treturn $decode ? json_decode(file_get_contents('php://input', 'r'), true) : file_get_contents('php://input', 'r');\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getPlugins($returnType = 'all')\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tswitch ($returnType) {\n\t\t\t\tcase 'enabled':\n\t\t\t\t\t$returnType = 'enabled';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disabled':\n\t\t\t\t\t$returnType = 'disabled';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$returnType = 'all';\n\t\t\t}\n\t\t\t$pluginList = [];\n\t\t\tforeach ($GLOBALS['plugins'] as $key => $value) {\n\t\t\t\tif (strpos($value['license'], $this->config['license']) !== false) {\n\t\t\t\t\t$GLOBALS['plugins'][$key]['enabled'] = $this->config[$value['configPrefix'] . '-enabled'] ?? false;\n\t\t\t\t\tif ($returnType == 'all') {\n\t\t\t\t\t\t$pluginList[$key] = $GLOBALS['plugins'][$key];\n\t\t\t\t\t} elseif ($returnType == 'enabled' && $GLOBALS['plugins'][$key]['enabled'] == true) {\n\t\t\t\t\t\t$pluginList[$key] = $GLOBALS['plugins'][$key];\n\t\t\t\t\t} elseif ($returnType == 'disabled' && $GLOBALS['plugins'][$key]['enabled'] == false) {\n\t\t\t\t\t\t$pluginList[$key] = $GLOBALS['plugins'][$key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tasort($pluginList);\n\t\t\treturn $pluginList;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function refreshCookieName()\n\t{\n\t\t$this->cookieName = $this->config['uuid'] !== '' ? 'organizr_token_' . $this->config['uuid'] : 'organizr_token_temp';\n\t}\n\n\tpublic function favIcons($rootPath = '')\n\t{\n\t\t$favicon = '\n\t\t\t<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"' . $rootPath . 'plugins/images/favicon/apple-touch-icon.png\">\n\t\t\t<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"' . $rootPath . 'plugins/images/favicon/favicon-32x32.png\">\n\t\t\t<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"' . $rootPath . 'plugins/images/favicon/favicon-16x16.png\">\n\t\t\t<link rel=\"manifest\" href=\"' . $rootPath . 'plugins/images/favicon/site.webmanifest\" crossorigin=\"use-credentials\">\n\t\t\t<link rel=\"mask-icon\" href=\"' . $rootPath . 'plugins/images/favicon/safari-pinned-tab.svg\" color=\"#5bbad5\">\n\t\t\t<link rel=\"shortcut icon\" href=\"' . $rootPath . 'plugins/images/favicon/favicon.ico\">\n\t\t\t<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n\t\t\t<meta name=\"msapplication-TileImage\" content=\"' . $rootPath . 'plugins/images/favicon/mstile-144x144.png\">\n\t\t\t<meta name=\"msapplication-config\" content=\"' . $rootPath . 'plugins/images/favicon/browserconfig.xml\">\n\t\t\t<meta name=\"theme-color\" content=\"#ffffff\">\n\t\t';\n\t\tif ($this->config['favIcon'] !== '' && $rootPath !== '') {\n\t\t\t$this->config['favIcon'] = str_replace('data/favicon', $rootPath . 'data/favicon', $this->config['favIcon']);\n\t\t}\n\t\treturn ($this->config['favIcon'] == '') ? $favicon : $this->config['favIcon'];\n\t}\n\n\tpublic function pluginGlobalList()\n\t{\n\t\t$pluginSearch = '-enabled';\n\t\t$pluginInclude = '-include';\n\t\t$plugins = array_filter($this->config, function ($k) use ($pluginSearch) {\n\t\t\treturn stripos($k, $pluginSearch) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t\t$plugins['includes'] = array_filter($this->config, function ($k) use ($pluginInclude) {\n\t\t\treturn stripos($k, $pluginInclude) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t\treturn $plugins;\n\t}\n\n\tpublic function googleTracking()\n\t{\n\t\tif ($this->config['gaTrackingID'] !== '') {\n\t\t\treturn '\n\t\t\t\t<script src=\"https://apis.google.com/js/client.js?onload=googleApiClientReady\"></script>\n\t\t\t\t<script async src=\"https://www.googletagmanager.com/gtag/js?id=' . $this->config['gaTrackingID'] . '\"></script>\n\t\t\t\t<script>\n\t\t\t\t\twindow.dataLayer = window.dataLayer || [];\n\t\t\t\t\tfunction gtag(){dataLayer.push(arguments);}\n\t\t\t\t\tgtag(\"js\", new Date());\n\t\t\t\t\tgtag(\"config\",\"' . $this->config['gaTrackingID'] . '\");\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic function matchBrackets($text, $brackets = 's')\n\t{\n\t\tswitch ($brackets) {\n\t\t\tcase 's':\n\t\t\tcase 'square':\n\t\t\t\t$pattern = '#\\[(.*?)\\]#';\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\tcase 'curly':\n\t\t\t\t$pattern = '#\\((.*?)\\)#';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t\tpreg_match($pattern, $text, $match);\n\t\treturn $match[1];\n\t}\n\n\tpublic function languagePacks($encode = false)\n\t{\n\t\t$files = array();\n\t\tforeach (glob(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'js' . DIRECTORY_SEPARATOR . 'langpack' . DIRECTORY_SEPARATOR . \"*.json\") as $filename) {\n\t\t\tif (strpos(basename($filename), '[') !== false) {\n\t\t\t\t$explode = explode('[', basename($filename));\n\t\t\t\t$files[] = array(\n\t\t\t\t\t'filename' => basename($filename),\n\t\t\t\t\t'code' => $explode[0],\n\t\t\t\t\t'language' => $this->matchBrackets(basename($filename))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tusort($files, function ($a, $b) {\n\t\t\treturn $a['language'] <=> $b['language'];\n\t\t});\n\t\treturn ($encode) ? json_encode($files) : $files;\n\t}\n\n\tpublic function getRootPath()\n\t{\n\t\t$count = (count(explode('/', $_SERVER['REQUEST_URI']))) - 2;\n\t\t$rootPath = '';\n\t\t$rootPath .= str_repeat('../', $count);\n\t\treturn $rootPath;\n\t}\n\n\tpublic function setTheme($theme = null, $rootPath = '')\n\t{\n\t\t$theme = $theme ?? $this->config['theme'];\n\t\t$themeInformation = $this->validateTheme($theme);\n\t\tif (!$themeInformation) {\n\t\t\t$themeInformation = $this->defaultThemeInformation()['information']['Organizr'];\n\t\t}\n\t\treturn '<link id=\"theme\" href=\"' . $rootPath . $themeInformation['path'] . '/' . $themeInformation['name'] . '.css?v=' . $this->fileHash . '\" rel=\"stylesheet\">';\n\t}\n\n\tpublic function validateTheme($theme = null)\n\t{\n\t\t$theme = $theme ?? $this->config['theme'];\n\t\t$information = $this->getAllThemesInformation();\n\t\tif (isset($information[$theme])) {\n\t\t\treturn $information[$theme];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getAllThemesInformation()\n\t{\n\t\t$organizrThemes = $this->defaultThemeInformation();\n\t\t$userThemes = $this->userThemeInformation();\n\t\tif ($userThemes) {\n\t\t\treturn array_merge($organizrThemes['information'], $userThemes);\n\t\t}\n\t\treturn $organizrThemes['information'];\n\t}\n\n\tpublic function userThemeInformation()\n\t{\n\t\t$themes = $this->config['installedThemes'];\n\t\tif (is_array($themes)) {\n\t\t\treturn $themes;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpublic function defaultThemeInformation()\n\t{\n\t\treturn [\n\t\t\t'files' => ['Blue', 'Organizr'],\n\t\t\t'information' => [\n\t\t\t\t'Blue' => [\n\t\t\t\t\t'name' => 'Blue',\n\t\t\t\t\t'repo' => null,\n\t\t\t\t\t'version' => '1.0.0',\n\t\t\t\t\t'path' => 'css/themes'\n\t\t\t\t],\n\t\t\t\t'Organizr' => [\n\t\t\t\t\t'name' => 'Organizr',\n\t\t\t\t\t'repo' => null,\n\t\t\t\t\t'version' => '1.0.0',\n\t\t\t\t\t'path' => 'css/themes'\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function getAllThemes()\n\t{\n\t\t$organizrThemes = $this->getOrganizrThemes();\n\t\t$userThemes = $this->getUserThemes();\n\t\tif ($userThemes) {\n\t\t\treturn array_merge($organizrThemes, $userThemes);\n\t\t}\n\t\treturn $organizrThemes;\n\t}\n\n\tpublic function getOrganizrThemes()\n\t{\n\t\t$themes = [];\n\t\t$themeFolder = $this->root . DIRECTORY_SEPARATOR . 'css' . DIRECTORY_SEPARATOR . 'themes';\n\t\t$originalThemes = $this->defaultThemeInformation();\n\t\tforeach (glob($themeFolder . DIRECTORY_SEPARATOR . '*.css') as $filename) {\n\t\t\t$file = preg_replace('/\\\\.[^.\\\\s]{3,4}$/', '', basename($filename));\n\t\t\tif (in_array($file, $originalThemes['files'])) {\n\t\t\t\t$themes[] = array(\n\t\t\t\t\t'name' => $file,\n\t\t\t\t\t'value' => $file,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function getUserThemes()\n\t{\n\t\t$themes = [];\n\t\t$themeFolder = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes';\n\t\t$userThemesInformation = $this->userThemeInformation();\n\t\tif (file_exists($themeFolder)) {\n\t\t\t$directoryIterator = new RecursiveDirectoryIterator($themeFolder, FilesystemIterator::SKIP_DOTS);\n\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\tif (stripos($info->getFilename(), '.css') !== false) {\n\t\t\t\t\t$file = preg_replace('/\\\\.[^.\\\\s]{3,4}$/', '', basename($info->getFilename()));\n\t\t\t\t\tif (key_exists($file, $userThemesInformation)) {\n\t\t\t\t\t\t$themes[] = [\n\t\t\t\t\t\t\t'name' => ucwords(str_replace('_', ' ', $file)),\n\t\t\t\t\t\t\t'value' => $file,\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function setPluginListNameFromConfigPrefix()\n\t{\n\t\tforeach ($GLOBALS['plugins'] as $pluginName => $pluginInfo) {\n\t\t\t$GLOBALS['pluginInfo'][strtolower($pluginInfo['configPrefix'])] = $pluginInfo;\n\t\t\t$GLOBALS['pluginInfo'][strtolower($pluginName)] = $pluginInfo;\n\t\t}\n\t}\n\n\tpublic function pluginFilesFromDirectory($directory, $webDirectory, $type, $settings = false, $rootPath = '')\n\t{\n\t\t$files = '';\n\t\tif (file_exists($directory)) {\n\t\t\t$directoryIterator = new RecursiveDirectoryIterator($directory, FilesystemIterator::SKIP_DOTS);\n\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'js':\n\t\t\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\t\t\tif (pathinfo($info->getPathname(), PATHINFO_EXTENSION) == 'js') {\n\t\t\t\t\t\t\t$pluginEnabled = false;\n\t\t\t\t\t\t\t$keyOriginal = strtoupper(basename(dirname($info->getPathname())));\n\t\t\t\t\t\t\t$key = str_replace('-SETTINGS', '', $keyOriginal);\n\t\t\t\t\t\t\t$continue = false;\n\t\t\t\t\t\t\tif ($settings) {\n\t\t\t\t\t\t\t\tif ($info->getFilename() == 'settings.js') {\n\t\t\t\t\t\t\t\t\t$continue = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ($info->getFilename() !== 'settings.js') {\n\t\t\t\t\t\t\t\t\t$continue = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tswitch ($key) {\n\t\t\t\t\t\t\t\tcase 'PHP-MAILER':\n\t\t\t\t\t\t\t\t\t$key = 'PHPMAILER';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'NGXC':\n\t\t\t\t\t\t\t\t\t$key = 'ngxc';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t$key = $key;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (isset($this->config[$key . '-enabled'])) {\n\t\t\t\t\t\t\t\tif ($this->config[$key . '-enabled']) {\n\t\t\t\t\t\t\t\t\t$pluginEnabled = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($pluginEnabled || $settings) {\n\t\t\t\t\t\t\t\tif ($continue) {\n\t\t\t\t\t\t\t\t\t$version = $GLOBALS['pluginInfo'][strtolower($key)]['version'] ?? $this->fileHash;\n\t\t\t\t\t\t\t\t\t$files .= '<script src=\"' . $rootPath . $webDirectory . basename(dirname($info->getPathname())) . '/' . basename($info->getFilename()) . '?v=' . $version . '\" defer=\"true\"></script>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'css':\n\t\t\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\t\t\tif (pathinfo($info->getPathname(), PATHINFO_EXTENSION) == 'css') {\n\t\t\t\t\t\t\t$key = basename(dirname($info->getPathname()));\n\t\t\t\t\t\t\t$version = $GLOBALS['pluginInfo'][strtolower($key)]['version'] ?? $this->fileHash;\n\t\t\t\t\t\t\t$files .= '<link href=\"' . $rootPath . $webDirectory . basename(dirname($info->getPathname())) . '/' . basename($info->getFilename()) . '?v=' . $version . '\" rel=\"stylesheet\">';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $files;\n\t}\n\n\tpublic function pluginFiles($type, $settings = false, $rootPath = '')\n\t{\n\t\t$files = '';\n\t\t$organizrPlugins = $this->root . DIRECTORY_SEPARATOR . 'api' . DIRECTORY_SEPARATOR . 'plugins';\n\t\t$files .= $this->pluginFilesFromDirectory($organizrPlugins, 'api/plugins/', $type, $settings);\n\t\t$userPlugins = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins';\n\t\t$files .= $this->pluginFilesFromDirectory($userPlugins, 'data/plugins/', $type, $settings);\n\t\treturn $files;\n\t}\n\n\tpublic function formKey($script = true)\n\t{\n\t\tif (isset($this->config['organizrHash'])) {\n\t\t\tif ($this->config['organizrHash'] !== '') {\n\t\t\t\t$hash = password_hash(substr($this->config['organizrHash'], 2, 10), PASSWORD_BCRYPT);\n\t\t\t\treturn ($script) ? '<script>local(\"s\",\"formKey\",\"' . $hash . '\");</script>' : $hash;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function checkPHP()\n\t{\n\t\tif (!(version_compare(PHP_VERSION, $this->minimumPHP) >= 0)) {\n\t\t\tdie($this->showHTML('PHP Version', 'Organizr needs PHP Version: ' . $this->minimumPHP . '<br/> You have PHP Version: ' . PHP_VERSION));\n\t\t}\n\t}\n\n\tprivate function checkWritableDB()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif (isset($this->config['dbLocation']) && isset($this->config['dbName'])) {\n\t\t\t\t$db = is_writable($this->config['dbLocation'] . $this->config['dbName']);\n\t\t\t\tif (!$db) {\n\t\t\t\t\t//die($this->showHTML('Organizr DB is not writable!', 'Please check permissions and/or disk space'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdie($this->showHTML('Config File Malformed', 'dbLocation and/or dbName is not listed in config.php'));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Create config file in the return syntax\n\tpublic function createConfig($array, $path = null, $nest = 0)\n\t{\n\t\t$path = ($path) ? $path : $this->userConfigPath;\n\t\t// Define Initial Value\n\t\t$output = array();\n\t\t// Sort Items\n\t\tksort($array);\n\t\t// Update the current config version\n\t\tif (!$nest) {\n\t\t\t// Inject Current Version\n\t\t\t$output[] = \"\\t'configVersion' => '\" . (isset($array['apply_CONFIG_VERSION']) ? $array['apply_CONFIG_VERSION'] : $this->version) . \"'\";\n\t\t}\n\t\tunset($array['configVersion']);\n\t\tunset($array['apply_CONFIG_VERSION']);\n\t\t// Process Settings\n\t\tforeach ($array as $k => $v) {\n\t\t\t$allowCommit = true;\n\t\t\t$item = '';\n\t\t\tswitch (gettype($v)) {\n\t\t\t\tcase 'boolean':\n\t\t\t\t\t$item = ($v ? 'true' : 'false');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'integer':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'NULL':\n\t\t\t\t\t$item = $v;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\t$item = \"'\" . str_replace(array('\\\\', \"'\"), array('\\\\\\\\', \"\\'\"), $v) . \"'\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\t$item = $this->createConfig($v, false, $nest + 1);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$allowCommit = false;\n\t\t\t}\n\t\t\tif ($allowCommit) {\n\t\t\t\t$output[] = str_repeat(\"\\t\", $nest + 1) . \"'$k' => $item\";\n\t\t\t}\n\t\t}\n\t\t// Build output\n\t\t$output = (!$nest ? \"<?php\\nreturn \" : '') . \"[\\n\" . implode(\",\\n\", $output) . \"\\n\" . str_repeat(\"\\t\", $nest) . ']' . (!$nest ? ';' : '');\n\t\tif (!$nest && $path) {\n\t\t\t$pathDigest = pathinfo($path);\n\t\t\t@mkdir($pathDigest['dirname'], 0770, true);\n\t\t\tif (file_exists($path)) {\n\t\t\t\trename($path, $pathDigest['dirname'] . '/' . $pathDigest['filename'] . '.bak.php');\n\t\t\t}\n\t\t\t$file = fopen($path, 'w');\n\t\t\tfwrite($file, $output);\n\t\t\tfclose($file);\n\t\t\tif (file_exists($path)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn $output;\n\t\t}\n\t}\n\n\t// Commit new values to the configuration\n\tpublic function updateConfig($new, $current = false)\n\t{\n\t\t// Get config if not supplied\n\t\tif ($current === false) {\n\t\t\t//$current = $this->loadConfig();\n\t\t\t$current = $this->config;\n\t\t} elseif (is_string($current) && is_file($current)) {\n\t\t\t$current = $this->loadConfig($current);\n\t\t}\n\t\t// Inject Parts\n\t\tforeach ($new as $k => $v) {\n\t\t\t$current[$k] = $v;\n\t\t\t$this->config[$k] = $v;\n\t\t}\n\t\t// Return Create\n\t\treturn $this->createConfig($current);\n\t}\n\n\tpublic function removeConfigItem($new, $current = false)\n\t{\n\t\t// Get config if not supplied\n\t\tif ($current === false) {\n\t\t\t$current = $this->config;\n\t\t} elseif (is_string($current) && is_file($current)) {\n\t\t\t$current = $this->loadConfig($current);\n\t\t}\n\t\t// Inject Parts\n\t\tforeach ($new as $k) {\n\t\t\tif (isset($current[$k])) {\n\t\t\t\t$current['deletedConfigItems'][$k] = $current[$k];\n\t\t\t\t$this->config['deletedConfigItems'][$k] = $current[$k];\n\t\t\t}\n\t\t\tunset($current[$k]);\n\t\t\tunset($this->config[$k]);\n\t\t}\n\t\t// Return Create\n\t\treturn $this->createConfig($current);\n\t}\n\n\tpublic function loadConfig($path = null)\n\t{\n\t\t$path = ($path) ? $path : $this->userConfigPath;\n\t\tif (!is_file($path)) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn (array)call_user_func(function () use ($path) {\n\t\t\t\treturn include($path);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic function fillDefaultConfig($array)\n\t{\n\t\t$path = $this->defaultConfigPath;\n\t\tif (is_string($path)) {\n\t\t\t$loadedDefaults = $this->loadConfig($path);\n\t\t} else {\n\t\t\t$loadedDefaults = $path;\n\t\t}\n\t\t// Include all plugin config files\n\t\t$folder = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'plugins';\n\t\t$directoryIterator = new RecursiveDirectoryIterator($folder, FilesystemIterator::SKIP_DOTS);\n\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\tforeach ($iteratorIterator as $info) {\n\t\t\tif ($info->getFilename() == 'config.php') {\n\t\t\t\t$loadedDefaults = array_merge($loadedDefaults, $this->loadConfig($info->getPathname()));\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * Include all custom Plugin routes\n\t\t */\n\t\tif (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins')) {\n\t\t\t$folder = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins';\n\t\t\t$directoryIterator = new RecursiveDirectoryIterator($folder, FilesystemIterator::SKIP_DOTS);\n\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\tif ($info->getFilename() == 'config.php') {\n\t\t\t\t\t$loadedDefaults = array_merge($loadedDefaults, $this->loadConfig($info->getPathname()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (is_array($loadedDefaults) ? $this->fillDefaultConfig_recurse($array, $loadedDefaults) : false);\n\t}\n\n\tpublic function fillDefaultConfig_recurse($current, $defaults)\n\t{\n\t\tforeach ($defaults as $k => $v) {\n\t\t\tif (!isset($current[$k])) {\n\t\t\t\t$current[$k] = $v;\n\t\t\t} elseif (is_array($current[$k]) && is_array($v)) {\n\t\t\t\t$current[$k] = $this->fillDefaultConfig_recurse($current[$k], $v);\n\t\t\t}\n\t\t}\n\t\treturn $current;\n\t}\n\n\tpublic function config($tries = 1)\n\t{\n\t\t// Load config or default\n\t\tif (file_exists($this->userConfigPath)) {\n\t\t\t$config = $this->fillDefaultConfig($this->loadConfig($this->userConfigPath));\n\t\t} else {\n\t\t\t$config = $this->fillDefaultConfig($this->loadConfig($this->defaultConfigPath));\n\t\t}\n\t\tif ((!is_array($config) || !file_exists($this->userConfigPath)) && $tries < 5) {\n\t\t\t$tries++;\n\t\t\treturn $this->config($tries);\n\t\t}\n\t\treturn $config;\n\t}\n\n\tpublic function combineConfig($array)\n\t{\n\t\t$this->config = array_merge($this->config, $array);\n\t\treturn $this->config;\n\t}\n\n\tpublic function status($action = false)\n\t{\n\t\t$status = [];\n\t\t$dependenciesActive = [];\n\t\t$dependenciesInactive = [];\n\t\t$extensions = ['PDO_SQLITE', 'PDO', 'SQLITE3', 'zip', 'cURL', 'openssl', 'simplexml', 'json', 'session', 'filter'];\n\t\t$functions = ['hash', 'fopen', 'fsockopen', 'fwrite', 'fclose', 'readfile'];\n\t\tforeach ($extensions as $check) {\n\t\t\tif (extension_loaded($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\tforeach ($functions as $check) {\n\t\t\tif (function_exists($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\t$status['writable'] = is_writable(dirname(__DIR__, 2));\n\t\t$status['minVersion'] = (version_compare(PHP_VERSION, $this->minimumPHP) >= 0);\n\t\t$status['os'] = $this->getOS();\n\t\t$status['php'] = phpversion();\n\t\t$status['userConfigPathExists'] = file_exists($this->userConfigPath);\n\t\tif (!($status['minVersion'])) {\n\t\t\t$status['action'] = 'php';\n\t\t\tif ($action) {\n\t\t\t\theader($this->getServerPath() . 'api/v2/organizr/error');\n\t\t\t\texit;\n\t\t\t}\n\t\t} elseif (count($dependenciesInactive) > 0) {\n\t\t\t$status['action'] = 'dependencies';\n\t\t} elseif (!$status['writable']) {\n\t\t\t$status['action'] = 'permission';\n\t\t} elseif (!$status['userConfigPathExists']) {\n\t\t\t$status['action'] = 'wizard';\n\t\t} else {\n\t\t\t$status['action'] = 'launch';\n\t\t\tif ($action) {\n\t\t\t\techo '<script type=\"text/javascript\"> window.location.href=\"' . $this->getServerPath() . 'api/v2/organizr/error' . '\";</script>';\n\t\t\t\tdie(header($this->getServerPath() . 'api/v2/organizr/error'));\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t\treturn $status;\n\t}\n\n\tpublic function launch()\n\t{\n\t\t$status = array();\n\t\t$dependenciesActive = array();\n\t\t$dependenciesInactive = array();\n\t\t$extensions = array('PDO_SQLITE', 'PDO', 'SQLITE3', 'zip', 'cURL', 'openssl', 'simplexml', 'json', 'session', 'filter');\n\t\t$functions = array('hash', 'fopen', 'fsockopen', 'fwrite', 'fclose', 'readfile');\n\t\tforeach ($extensions as $check) {\n\t\t\tif (extension_loaded($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\tforeach ($functions as $check) {\n\t\t\tif (function_exists($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\tif (!file_exists($this->userConfigPath)) {\n\t\t\t$status['status'] = 'wizard';//wizard - ok for test\n\t\t}\n\t\tif (count($dependenciesInactive) > 0 || !is_writable(dirname(__DIR__, 2)) || !(version_compare(PHP_VERSION, $this->minimumPHP) >= 0)) {\n\t\t\t$status['status'] = 'dependencies';\n\t\t}\n\t\t$status['status'] = ($status['status']) ?? 'ok';\n\t\t$status['writable'] = is_writable(dirname(__DIR__, 2)) ? 'yes' : 'no';\n\t\t$status['minVersion'] = (version_compare(PHP_VERSION, $this->minimumPHP) >= 0) ? 'yes' : 'no';\n\t\t$status['dependenciesActive'] = $dependenciesActive;\n\t\t$status['dependenciesInactive'] = $dependenciesInactive;\n\t\t$status['version'] = $this->version;\n\t\t$status['os'] = $this->getOS();\n\t\t$status['php'] = phpversion();\n\t\t$status['php_user'] = get_current_user();\n\t\t$status['userConfigPath'] = $this->userConfigPath;\n\t\treturn $status;\n\t}\n\n\tpublic function hasDB()\n\t{\n\t\treturn (file_exists($this->userConfigPath)) ?? false;\n\t}\n\n\tpublic function hasCookie()\n\t{\n\t\treturn ($_COOKIE[$this->cookieName]) ?? false;\n\t}\n\n\tpublic function getGuest()\n\t{\n\t\t$guest = array(\n\t\t\t'group' => 'Guest',\n\t\t\t'group_id' => 999,\n\t\t\t'image' => 'plugins/images/groups/guest.png'\n\t\t);\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'SELECT * FROM groups WHERE `group_id` = 999'\n\t\t\t),\n\t\t];\n\t\treturn $this->hasDB() ? $this->processQueries($response) : $guest;\n\t}\n\n\tpublic function getSchema()\n\t{\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => 'SELECT name, sql FROM sqlite_master WHERE type=\\'table\\' ORDER BY name'\n\t\t\t\t),\n\t\t\t];\n\t\t\treturn $this->hasDB() ? $this->processQueries($response) : 'Database not setup yet';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function guestUser()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->getUserLevel() !== 999) {\n\t\t\t\t$guest = array(\n\t\t\t\t\t\"token\" => null,\n\t\t\t\t\t\"tokenDate\" => null,\n\t\t\t\t\t\"tokenExpire\" => null,\n\t\t\t\t\t\"username\" => \"Organizr API\",\n\t\t\t\t\t\"uid\" => $this->guestHash(0, 5),\n\t\t\t\t\t\"group\" => 'Admin',\n\t\t\t\t\t\"groupID\" => 0,\n\t\t\t\t\t\"email\" => null,\n\t\t\t\t\t//\"groupImage\"=>getGuest()['image'],\n\t\t\t\t\t\"image\" => $this->getGuest()['image'],\n\t\t\t\t\t\"userID\" => null,\n\t\t\t\t\t\"loggedin\" => false,\n\t\t\t\t\t\"locked\" => false,\n\t\t\t\t\t\"tokenList\" => null,\n\t\t\t\t\t\"authService\" => null\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$guest = $guest ?? array(\n\t\t\t\t\"token\" => null,\n\t\t\t\t\"tokenDate\" => null,\n\t\t\t\t\"tokenExpire\" => null,\n\t\t\t\t\"username\" => \"Guest\",\n\t\t\t\t\"uid\" => $this->guestHash(0, 5),\n\t\t\t\t\"group\" => $this->getGuest()['group'],\n\t\t\t\t\"groupID\" => $this->getGuest()['group_id'],\n\t\t\t\t\"email\" => null,\n\t\t\t\t//\"groupImage\"=>getGuest()['image'],\n\t\t\t\t\"image\" => $this->getGuest()['image'],\n\t\t\t\t\"userID\" => null,\n\t\t\t\t\"loggedin\" => false,\n\t\t\t\t\"locked\" => false,\n\t\t\t\t\"tokenList\" => null,\n\t\t\t\t\"authService\" => null\n\t\t\t);\n\t\treturn $guest;\n\t}\n\n\tpublic function getAllUserTokens($id, $includeAllFields = true)\n\t{\n\t\t$select = $includeAllFields ? '*' : 'token, ip, id, expires, created';\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT ' . $select . ' FROM `tokens` WHERE user_id = ? AND expires > ?',\n\t\t\t\t\t[$id],\n\t\t\t\t\t[$this->currentTime]\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t)\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserByEmail($email)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users WHERE email = ? COLLATE NOCASE',\n\t\t\t\t\t$email\n\t\t\t\t)\n\t\t\t)\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tprotected function invalidToken($token)\n\t{\n\t\tif (isset($_COOKIE[$this->cookieName])) {\n\t\t\tif ($token == $_COOKIE[$this->cookieName]) {\n\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t$this->logger->debug('Token was invalid - deleting cookie and user session');\n\t\t\t\t$this->coookie('delete', $this->cookieName);\n\t\t\t\t$this->user = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function validateToken($token, $api = false)\n\t{\n\t\t// Validate script\n\t\t$userInfo = $this->jwtParse($token);\n\t\t$validated = (bool)$userInfo;\n\t\tif ($validated == true) {\n\t\t\t$allTokens = $this->getAllUserTokens($userInfo['userID']);\n\t\t\t$user = $this->getUserById($userInfo['userID']);\n\t\t\t$tokenKey = $this->searchArray($allTokens, 'token', $token);\n\t\t\t$tokenCheck = ($tokenKey !== false);\n\t\t\tif (!$tokenCheck) {\n\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t$this->logger->debug('Token failed check against all token listings', $allTokens);\n\t\t\t\t$this->invalidToken($token);\n\t\t\t\tif ($api) {\n\t\t\t\t\t$this->setResponse(403, 'Token was not in approved list');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t// Check if user is on same browser as token\n\t\t\t\tif ($allTokens[$tokenKey]['browser'] !== $_SERVER ['HTTP_USER_AGENT']) {\n\t\t\t\t\t$this->setLoggerChannel('Authentication')->warning('Mismatch of useragent');\n\t\t\t\t\t$this->invalidToken($token);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ($api) {\n\t\t\t\t\t$this->setResponse(200, 'Token is valid');\n\t\t\t\t}\n\t\t\t\treturn array(\n\t\t\t\t\t'token' => $token,\n\t\t\t\t\t'tokenDate' => $userInfo['tokenDate'],\n\t\t\t\t\t'tokenExpire' => $userInfo['tokenExpire'],\n\t\t\t\t\t'username' => $user['username'] ?? $userInfo['username'],\n\t\t\t\t\t'uid' => $this->guestHash(0, 5),\n\t\t\t\t\t'group' => $user['group'] ?? $userInfo['group'],\n\t\t\t\t\t'groupID' => $user['group_id'] ?? $userInfo['groupID'],\n\t\t\t\t\t'email' => $user['email'] ?? $userInfo['email'],\n\t\t\t\t\t'image' => $user['image'] ?? $userInfo['image'],\n\t\t\t\t\t'userID' => $user['id'] ?? $userInfo['userID'],\n\t\t\t\t\t'loggedin' => true,\n\t\t\t\t\t'locked' => $user['locked'] ?? 0,\n\t\t\t\t\t'tokenList' => $allTokens,\n\t\t\t\t\t'authService' => (isset($user['auth_service'])) ? explode('::', $user['auth_service'])[0] : 'internal'\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif ($api) {\n\t\t\t\t$this->setResponse(403, 'Token was invalid');\n\t\t\t}\n\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t$this->logger->debug('User  token was invalid', ['token' => $token]);\n\t\t\t$this->invalidToken($token);\n\t\t}\n\t\tif ($api) {\n\t\t\t$this->setResponse(403, 'Token was invalid');\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getUserFromToken($token)\n\t{\n\t\t// Validate script\n\t\t$userInfo = $this->jwtParse($token);\n\t\t$validated = (bool)$userInfo;\n\t\tif ($validated == true) {\n\t\t\t$user = $this->getUserById($userInfo['userID']);\n\t\t\t$allTokens = $this->getAllUserTokens($userInfo['userID'], false);\n\t\t\treturn array(\n\t\t\t\t'token' => $token,\n\t\t\t\t'tokenDate' => $userInfo['tokenDate'],\n\t\t\t\t'tokenExpire' => $userInfo['tokenExpire'],\n\t\t\t\t'username' => $user['username'] ?? $userInfo['username'],\n\t\t\t\t'uid' => $this->guestHash(0, 5),\n\t\t\t\t'group' => $user['group'] ?? $userInfo['group'],\n\t\t\t\t'groupID' => $user['group_id'] ?? $userInfo['groupID'],\n\t\t\t\t'email' => $user['email'] ?? $userInfo['email'],\n\t\t\t\t'image' => $user['image'] ?? $userInfo['image'],\n\t\t\t\t'userID' => $user['id'] ?? $userInfo['userID'],\n\t\t\t\t'loggedin' => true,\n\t\t\t\t'locked' => $user['locked'] ?? 0,\n\t\t\t\t'tokenList' => $allTokens,\n\t\t\t\t'authService' => (isset($user['auth_service'])) ? explode('::', $user['auth_service'])[0] : 'internal'\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function defaultUserGroup()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'SELECT * FROM groups WHERE `default` = 1'\n\t\t\t)\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getAllTabs()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM tabs ORDER BY `order` ASC',\n\t\t\t\t'key' => 'tabs'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM categories ORDER BY `order` ASC',\n\t\t\t\t'key' => 'categories'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM groups ORDER BY `group_id` ASC',\n\t\t\t\t'key' => 'groups'\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\t$this->applyTabVariables($query['tabs']);\n\t\treturn $query;\n\t}\n\n\tpublic function applyTabVariables($tabs)\n\t{\n\t\t$variables = [\n\t\t\t'{domain}' => $this->getServer(),\n\t\t\t'{username}' => $this->user['username'],\n\t\t\t'{username_lower}' => $this->user['username'],\n\t\t\t'{email}' => $this->user['email'],\n\t\t\t'{group}' => $this->user['group'],\n\t\t\t'{group_id}' => $this->user['groupID'],\n\t\t\t'{komga}' => $_COOKIE['komga_token'] ?? ''\n\t\t];\n\t\tif (empty($tabs)) {\n\t\t\treturn $tabs;\n\t\t}\n\t\tforeach ($tabs as $id => $tab) {\n\t\t\t$tabs[$id]['url'] = $this->userDefinedIdReplacementLink($tab['url'], $variables);\n\t\t\t$tabs[$id]['url_local'] = $this->userDefinedIdReplacementLink($tab['url_local'], $variables);\n\t\t}\n\t\treturn $tabs;\n\t}\n\n\tpublic function getUsers()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM users'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM groups ORDER BY group_id ASC'\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function usernameTaken($username, $email, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetch',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM users WHERE `id` != ? AND (username = ? COLLATE NOCASE or email = ? COLLATE NOCASE)',\n\t\t\t\t\t\t$id,\n\t\t\t\t\t\t$username,\n\t\t\t\t\t\t$email\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetch',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM users WHERE username = ? COLLATE NOCASE or email = ? COLLATE NOCASE',\n\t\t\t\t\t\t[$username],\n\t\t\t\t\t\t[$email]\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function cleanPageName($page)\n\t{\n\t\treturn ($page) ? strtolower(str_replace(array('%20', ' ', '-', '_'), '_', $page)) : '';\n\t}\n\n\tpublic function cleanClassName($name, $char = '-')\n\t{\n\t\treturn ($name) ? (str_replace(array('%20', ' ', '-', '_'), $char, strtolower($name))) : '';\n\t}\n\n\tpublic function reverseCleanClassName($name)\n\t{\n\t\treturn ($name) ? (str_replace(array('%20', '-', '_'), ' ', strtolower($name))) : '';\n\t}\n\n\tpublic function getPageList()\n\t{\n\t\treturn $GLOBALS['organizrPages'];\n\t}\n\n\tpublic function getPage($page)\n\t{\n\t\tif (!$page) {\n\t\t\t$this->setAPIResponse('error', 'Page not setup', 409);\n\t\t\treturn null;\n\t\t}\n\t\t$pageFunction = 'get_page_' . $this->cleanPageName($page);\n\t\tif (function_exists($pageFunction)) {\n\t\t\treturn $pageFunction($this);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Page not setup', 409);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getUserLevel()\n\t{\n\t\t// Grab token\n\t\t$requesterToken = $this->getallheadersi()['token'] ?? ($_GET['apikey'] ?? false);\n\t\t$apiKey = ($this->config['organizrAPI']) ?? null;\n\t\t// Check token or API key\n\t\t// If API key, return 0 for admin\n\t\tif (strlen($requesterToken) == 20 && $requesterToken == $apiKey) {\n\t\t\t//DO API CHECK\n\t\t\treturn 0;\n\t\t} elseif (isset($this->user)) {\n\t\t\treturn $this->user['groupID'];\n\t\t}\n\t\t// All else fails?  return guest id\n\t\treturn 999;\n\t}\n\n\tpublic function qualifyRequest($accessLevelNeeded, $api = false)\n\t{\n\t\tif ($this->getUserLevel() <= $accessLevelNeeded && $this->getUserLevel() !== null) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif ($api) {\n\t\t\t\t$this->setAPIResponse('error', 'Not Authorized', 401);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function qualifyLength($string, $length = 100, $api = false)\n\t{\n\t\tif (strlen($string) <= $length) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif ($api) {\n\t\t\t\t$this->setResponse(409, 'String is over limit of: ' . $length);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getImages()\n\t{\n\t\t$allIconsPrep = array();\n\t\t$allIcons = array();\n\t\t$ignore = array(\".\", \"..\", \"._.DS_Store\", \".DS_Store\", \".pydio_id\", \"index.html\");\n\t\t$dirname = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'tabs' . DIRECTORY_SEPARATOR;\n\t\t$path = 'plugins/images/tabs/';\n\t\t$images = scandir($dirname);\n\t\tforeach ($images as $image) {\n\t\t\tif (!in_array($image, $ignore)) {\n\t\t\t\t$allIconsPrep[$image] = array(\n\t\t\t\t\t'path' => $path,\n\t\t\t\t\t'name' => $image\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$dirname = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR;\n\t\t$path = 'data/userTabs/';\n\t\tif (file_exists($dirname)) {\n\t\t\t$images = scandir($dirname);\n\t\t\tforeach ($images as $image) {\n\t\t\t\tif (!in_array($image, $ignore)) {\n\t\t\t\t\t$allIconsPrep[$image] = array(\n\t\t\t\t\t\t'path' => $path,\n\t\t\t\t\t\t'name' => $image\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuksort($allIconsPrep, 'strcasecmp');\n\t\tforeach ($allIconsPrep as $item) {\n\t\t\t$allIcons[] = $item['path'] . $item['name'];\n\t\t}\n\t\treturn $allIcons;\n\t}\n\n\tpublic function getImagesSelect()\n\t{\n\t\t$term = $_GET['search'] ?? null;\n\t\t$page = $_GET['page'] ?? 1;\n\t\t$limit = $_GET['limit'] ?? 20;\n\t\t$offset = ($page * $limit) - $limit;\n\t\t$goodIcons['results'] = [];\n\t\t$goodIcons['limit'] = $limit;\n\t\t$goodIcons['page'] = $page;\n\t\t$goodIcons['term'] = $term;\n\t\t$imageListing = $this->getImages();\n\t\t$newImageListing = [];\n\t\tforeach ($imageListing as $image) {\n\t\t\t$newImageListing[] = [\n\t\t\t\t'id' => $image,\n\t\t\t\t'text' => basename($image)\n\t\t\t];\n\t\t}\n\t\tforeach ($newImageListing as $k => $v) {\n\t\t\tif ($term) {\n\t\t\t\tif (stripos($v['text'], $term) !== false) {\n\t\t\t\t\t$goodIcons['results'][] = $v;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$goodIcons['results'][] = $v;\n\t\t\t}\n\t\t}\n\t\t$total = count($goodIcons['results']);\n\t\t$goodIcons['total'] = $total;\n\t\t$goodIcons['results'] = array_slice($goodIcons['results'], $offset, $limit);\n\t\t$goodIcons['pagination']['more'] = $page < (ceil($total / $limit));\n\t\treturn $goodIcons;\n\t}\n\n\tpublic function removeImage($image = null)\n\t{\n\t\tif (!$image) {\n\t\t\t$this->setAPIResponse('error', 'No image supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$approvedPath = 'data/userTabs/';\n\t\t$removeImage = $approvedPath . pathinfo($image, PATHINFO_BASENAME);\n\t\tif ($this->approvedFileExtension($removeImage, 'image')) {\n\t\t\tif (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . $removeImage)) {\n\t\t\t\t$this->setLoggerChannel('Image Manager');\n\t\t\t\t$this->logger->info('Image Manager Function -  Deleted Image [' . pathinfo($image, PATHINFO_BASENAME) . ']');\n\t\t\t\t$this->setAPIResponse(null, pathinfo($image, PATHINFO_BASENAME) . ' has been deleted', null);\n\t\t\t\treturn (unlink(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . $removeImage));\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', $removeImage . ' does not exist', 404);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', $removeImage . ' is not approved to be deleted', 409);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function uploadImage()\n\t{\n\t\t$filesCheck = array_filter($_FILES);\n\t\tif (!empty($filesCheck)) {\n\t\t\tif (strpos($_FILES['file']['type'], 'image/') === false) {\n\t\t\t\t$this->setResponse(403, 'File Type not approved', $_FILES['file']['type']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->approvedFileType($_FILES['file']['tmp_name'])) {\n\t\t\t\t$this->setResponse(403, 'File Type not approved', $_FILES['file']['tmp_name']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->approvedFileExtension($_FILES['file']['name'])) {\n\t\t\t\tini_set('upload_max_filesize', '10M');\n\t\t\t\tini_set('post_max_size', '10M');\n\t\t\t\t$tempFile = $_FILES['file']['tmp_name'];\n\t\t\t\t$targetPath = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR;\n\t\t\t\t$this->makeDir($targetPath);\n\t\t\t\t$targetFile = $targetPath . $this->sanitizeUserString($_FILES['file']['name']);\n\t\t\t\t$this->setAPIResponse(null, pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' has been uploaded', null);\n\t\t\t\treturn move_uploaded_file($tempFile, $targetFile);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(403, 'File Extension not approved');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setResponse(500, 'No File was uploaded');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function formatPingHost($host)\n\t{\n\t\t$host = $this->qualifyURL($host, true);\n\t\tif ($host['port'] !== '') {\n\t\t\t$host['port'] = str_replace(':', '', $host['port']);\n\t\t}\n\t\tif ($host['host'] == '' && $host['path'] !== '') {\n\t\t\t$host['host'] = $host['path'];\n\t\t\t$host['path'] = '';\n\t\t\tif (strpos($host['host'], '/') !== false) {\n\t\t\t\t$host['host'] = explode('/', $host['host'])[0];\n\t\t\t}\n\t\t}\n\t\treturn $host;\n\t}\n\n\tpublic function ping($pings)\n\t{\n\t\tif ($this->qualifyRequest($this->config['pingAuth'], true)) {\n\t\t\tif (!$pings['list']) {\n\t\t\t\t$this->setAPIResponse('error', 'No ping hostname/IP\\'s entered', 409);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t$pings = $pings['list'];\n\t\t\t$type = gettype($pings);\n\t\t\t$ping = new Ping(\"\");\n\t\t\t$ping->setTtl(128);\n\t\t\t$ping->setTimeout(2);\n\t\t\tswitch ($type) {\n\t\t\t\tcase \"array\":\n\t\t\t\t\t$results = [];\n\t\t\t\t\tforeach ($pings as $k => $v) {\n\t\t\t\t\t\t$pingFormatted = $this->formatPingHost($v);\n\t\t\t\t\t\t$ping->setHost($pingFormatted['host']);\n\t\t\t\t\t\tif ($pingFormatted['port'] !== '') {\n\t\t\t\t\t\t\t$ping->setPort($pingFormatted['port']);\n\t\t\t\t\t\t\t$latency = $ping->ping('fsockopen');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$latency = $ping->ping();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($latency || $latency === 0) {\n\t\t\t\t\t\t\t$results[$v] = $latency;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$results[$v] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"string\":\n\t\t\t\t\t$pingFormatted = $this->formatPingHost($pings);\n\t\t\t\t\t$ping->setHost($pingFormatted['host']);\n\t\t\t\t\tif ($pingFormatted['port'] !== '') {\n\t\t\t\t\t\t$ping->setPort($pingFormatted['port']);\n\t\t\t\t\t\t$latency = $ping->ping('fsockopen');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$latency = $ping->ping();\n\t\t\t\t\t}\n\t\t\t\t\tif ($latency || $latency === 0) {\n\t\t\t\t\t\t$results = $latency;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$results = null;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn ($results) ?? null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic function getPluginSettings()\n\t{\n\t\treturn [\n\t\t\t'Marketplace' => [\n\t\t\t\t$this->settingsOption('notice', null, ['notice' => 'danger', 'body' => '3rd Party Repositories are not affiliated with Organizr and therefore the code on these repositories are not inspected.  Use at your own risk.']),\n\t\t\t\t$this->settingsOption('multiple-url', 'externalPluginMarketplaceRepos', ['override' => 12, 'label' => 'External Marketplace Repo', 'help' => 'Only supports Github repos']),\n\t\t\t\t$this->settingsOption('token', 'githubAccessToken', ['label' => 'Github Person Access Token', 'help' => 'The Github Person Access Token will help with API rate limiting as well as let you access your own Private Repos']),\n\t\t\t\t$this->settingsOption('switch', 'checkForPluginUpdate', ['label' => 'Check for Plugin Updates', ['help' => 'Check for updates on page load']])\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function getThemeSettings()\n\t{\n\t\treturn [\n\t\t\t'Marketplace' => [\n\t\t\t\t$this->settingsOption('notice', null, ['notice' => 'danger', 'body' => '3rd Party Repositories are not affiliated with Organizr and therefore the themes on these repositories are not inspected.  Use at your own risk.']),\n\t\t\t\t$this->settingsOption('multiple-url', 'externalThemeMarketplaceRepos', ['override' => 12, 'label' => 'External Marketplace Repo', 'help' => 'Only supports Github repos']),\n\t\t\t\t$this->settingsOption('token', 'githubAccessToken', ['label' => 'Github Person Access Token', 'help' => 'The Github Person Access Token will help with API rate limiting as well as let you access your own Private Repos']),\n\t\t\t\t$this->settingsOption('switch', 'checkForThemeUpdate', ['label' => 'Check for Theme Updates', ['help' => 'Check for updates on page load']])\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function getCustomizeAppearance()\n\t{\n\t\treturn [\n\t\t\t'Top Bar' => [\n\t\t\t\t$this->settingsOption('input', 'logo', ['label' => 'Logo URL']),\n\t\t\t\t$this->settingsOption('input', 'title', ['label' => 'Organizr Title']),\n\t\t\t\t$this->settingsOption('switch', 'useLogo', ['label' => 'Use Logo instead of Title', 'help' => 'Also sets the title of your site']),\n\t\t\t\t$this->settingsOption('input', 'description', ['label' => 'Meta Description', 'help' => 'Used to set the description for SEO meta tags']),\n\t\t\t],\n\t\t\t'Side Menu' => [\n\t\t\t\t$this->settingsOption('switch', 'allowCollapsableSideMenu', ['label' => 'Allow Side Menu to be Collapsable']),\n\t\t\t\t$this->settingsOption('switch', 'sideMenuCollapsed', ['label' => 'Side Menu Collapsed at Launch']),\n\t\t\t\t$this->settingsOption('switch', 'collapseSideMenuOnClick', ['label' => 'Collapse Side Menu after clicking Tab']),\n\t\t\t\t$this->settingsOption('switch', 'githubMenuLink', ['label' => 'Show GitHub Repo Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrFeatureRequestLink', ['label' => 'Show Organizr Feature Request Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrSupportMenuLink', ['label' => 'Show Organizr Support Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrDocsMenuLink', ['label' => 'Show Organizr Docs Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrSignoutMenuLink', ['label' => 'Show Organizr Sign out & in Button on Sidebar']),\n\t\t\t\t$this->settingsOption('switch', 'expandCategoriesByDefault', ['label' => 'Expand All Categories']),\n\t\t\t\t$this->settingsOption('switch', 'autoCollapseCategories', ['label' => 'Auto-Collapse Categories']),\n\t\t\t\t$this->settingsOption('switch', 'autoExpandNavBar', ['label' => 'Auto-Expand Nav Bar']),\n\t\t\t\t$this->settingsOption('select', 'unsortedTabs', ['label' => 'Unsorted Tab Placement', 'options' => [['name' => 'Top', 'value' => 'top'], ['name' => 'Bottom', 'value' => 'bottom']]]),\n\t\t\t],\n\t\t\t'Login Page' => [\n\t\t\t\t$this->settingsOption('input', 'loginLogo', ['label' => 'Login Logo URL']),\n\t\t\t\t$this->settingsOption('multiple-url', 'loginWallpaper', ['label' => 'Login Wallpaper URL', 'help' => 'You may enter multiple URL\\'s']),\n\t\t\t\t$this->settingsOption('switch', 'useLogoLogin', ['label' => 'Use Logo instead of Title on Login Page']),\n\t\t\t\t$this->settingsOption('switch', 'minimalLoginScreen', ['label' => 'Minimal Login Screen']),\n\t\t\t\t$this->settingsOption('switch', 'useRandomMediaImage', ['label' => 'Use Random Media Wallpaper From Media Server']),\n\t\t\t],\n\t\t\t'Options' => [\n\t\t\t\t$this->settingsOption('switch', 'alternateHomepageHeaders', ['label' => 'Alternate Homepage Titles']),\n\t\t\t\t$this->settingsOption('switch', 'debugErrors', ['label' => 'Show Debug Errors']),\n\t\t\t\t$this->settingsOption('switch', 'easterEggs', ['label' => 'Show Easter Eggs']),\n\t\t\t\t$this->settingsOption('input', 'gaTrackingID', ['label' => 'Google Analytics Tracking ID', 'placeholder' => 'e.g. UA-XXXXXXXXX-X']),\n\t\t\t],\n\t\t\t'Colors & Themes' => [\n\t\t\t\t$this->settingsOption('notice', null, ['notice' => 'info', 'title' => 'Attention', 'bodyHTML' => '<span lang=\"en\">The value of #987654 is just a placeholder, you can change to any value you like.</span><span lang=\"en\">To revert back to default, save with no value defined in the relevant field.</span>']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('button', '', ['label' => 'Reset Colors', 'icon' => 'fa fa-ticket', 'text' => 'Reset', 'attr' => 'onclick=\"resetCustomColors()\"']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('color', 'headerColor', ['label' => 'Nav Bar Color']),\n\t\t\t\t$this->settingsOption('color', 'headerTextColor', ['label' => 'Nav Bar Text Color']),\n\t\t\t\t$this->settingsOption('color', 'sidebarColor', ['label' => 'Side Bar Color']),\n\t\t\t\t$this->settingsOption('color', 'sidebarTextColor', ['label' => 'Side Bar Text Color']),\n\t\t\t\t$this->settingsOption('color', 'accentColor', ['label' => 'Accent Color']),\n\t\t\t\t$this->settingsOption('color', 'accentTextColor', ['label' => 'Accent Text Color']),\n\t\t\t\t$this->settingsOption('color', 'buttonColor', ['label' => 'Button Color']),\n\t\t\t\t$this->settingsOption('color', 'buttonTextColor', ['label' => 'Button Text Color']),\n\t\t\t\t$this->settingsOption('select', 'theme', ['label' => 'Theme', 'class' => 'themeChanger', 'options' => $this->getAllThemes()]),\n\t\t\t\t$this->settingsOption('select', 'style', ['label' => 'Style', 'class' => 'styleChanger', 'options' => [['name' => 'Light', 'value' => 'light'], ['name' => 'Dark', 'value' => 'dark'], ['name' => 'Horizontal', 'value' => 'horizontal']]]),\n\t\t\t],\n\t\t\t'Notifications' => [\n\t\t\t\t$this->settingsOption('select', 'notificationBackbone', ['label' => 'Type', 'class' => 'notifyChanger', 'options' => $this->notificationTypesOptions()]),\n\t\t\t\t$this->settingsOption('select', 'notificationPosition', ['label' => 'Position', 'class' => 'notifyPositionChanger', 'options' => $this->notificationPositionsOptions()]),\n\t\t\t\t$this->settingsOption('html', null, ['label' => 'Test Message', 'html' => '\n\t\t\t\t\t<div class=\"btn-group m-r-10 dropup\">\n\t\t\t\t\t\t<button aria-expanded=\"false\" data-toggle=\"dropdown\" class=\"btn btn-info btn-outline dropdown-toggle waves-effect waves-light\" type=\"button\">\n\t\t\t\t\t\t\t<i class=\"fa fa-comment m-r-5\"></i>\n\t\t\t\t\t\t\t<span>Test </span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul role=\"menu\" class=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a success Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'success\\',\\'5000\\');\">Success</a></li>\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a info Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'info\\',\\'5000\\');\">Info</a></li>\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a warning Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'warning\\',\\'5000\\');\">Warning</a></li>\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a error Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'error\\',\\'5000\\');\">Error</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t']\n\t\t\t\t),\n\t\t\t],\n\t\t\t'FavIcon' => [\n\t\t\t\t$this->settingsOption('html', null, ['label' => 'Instructions', 'override' => 12, 'html' => '\n\t\t\t\t\t<div class=\"panel panel-default\">\n\t\t\t\t\t\t<div class=\"panel-heading\">\n\t\t\t\t\t\t\t<a href=\"https://realfavicongenerator.net/\" target=\"_blank\"><span class=\"label label-info m-l-5\">Visit FavIcon Site</span></a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"panel-wrapper collapse in\">\n\t\t\t\t\t\t\t<div class=\"panel-body\">\n\t\t\t\t\t\t\t\t<ul class=\"list-icons\">\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Click [Select your Favicon picture]</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Choose your image to use</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Edit settings to your liking</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> At bottom of page on [Favicon Generator Options] under [Path] choose [I cannot or I do not want to place favicon files at the root of my web site.]</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Enter this path <code>data/favicon</code></li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Click [Generate your Favicons and HTML code]</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Download and unzip file and place in <code>data/favicon</code></li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Copy code and paste inside left box</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t']\n\t\t\t\t),\n\t\t\t\t$this->settingsOption('code-editor', 'favIcon', ['label' => 'Fav Icon Code', 'mode' => 'html']),\n\t\t\t],\n\t\t\t'Custom CSS' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customCss', ['label' => 'Custom CSS', 'mode' => 'css']),\n\t\t\t],\n\t\t\t'Theme CSS' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customThemeCss', ['label' => 'Theme CSS', 'mode' => 'css']),\n\t\t\t],\n\t\t\t'Custom Javascript' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customJava', ['label' => 'Custom Javascript', 'mode' => 'javascript']),\n\t\t\t],\n\t\t\t'Theme Javascript' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customThemeJava', ['label' => 'Theme Javascript', 'mode' => 'javascript']),\n\t\t\t],\n\t\t];\n\t}\n\n\tpublic function loadAppearance()\n\t{\n\t\t$appearance['logo'] = $this->config['logo'];\n\t\t$appearance['title'] = $this->config['title'];\n\t\t$appearance['useLogo'] = $this->config['useLogo'];\n\t\t$appearance['useLogoLogin'] = $this->config['useLogoLogin'];\n\t\t$appearance['headerColor'] = $this->config['headerColor'];\n\t\t$appearance['headerTextColor'] = $this->config['headerTextColor'];\n\t\t$appearance['sidebarColor'] = $this->config['sidebarColor'];\n\t\t$appearance['headerTextColor'] = $this->config['headerTextColor'];\n\t\t$appearance['sidebarTextColor'] = $this->config['sidebarTextColor'];\n\t\t$appearance['accentColor'] = $this->config['accentColor'];\n\t\t$appearance['accentTextColor'] = $this->config['accentTextColor'];\n\t\t$appearance['buttonColor'] = $this->config['buttonColor'];\n\t\t$appearance['buttonTextColor'] = $this->config['buttonTextColor'];\n\t\t$appearance['buttonTextHoverColor'] = $this->config['buttonTextHoverColor'];\n\t\t$appearance['buttonHoverColor'] = $this->config['buttonHoverColor'];\n\t\t$appearance['loginWallpaper'] = $this->config['loginWallpaper'];\n\t\t$appearance['randomMediaImage'] = $this->getRandomMediaImage('np');\n\t\t$appearance['loginLogo'] = $this->config['loginLogo'];\n\t\t$appearance['customCss'] = $this->config['customCss'];\n\t\t$appearance['customThemeCss'] = $this->config['customThemeCss'];\n\t\t$appearance['customJava'] = $this->config['customJava'];\n\t\t$appearance['customThemeJava'] = $this->config['customThemeJava'];\n\t\treturn $appearance;\n\t}\n\n\tpublic function getRandomMediaImage($type = null)\n\t{\n\t\tif (!$this->config['useRandomMediaImage']) {\n\t\t\treturn false;\n\t\t}\n\t\tif (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cache')) {\n\t\t\t$folder = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cache';\n\t\t\ttry {\n\t\t\t\t$directoryIterator = new RecursiveDirectoryIterator($folder, FilesystemIterator::SKIP_DOTS);\n\t\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\t\t$image = null;\n\t\t\t\tswitch ($type) {\n\t\t\t\t\tcase 'np':\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\t$array = iterator_to_array($iteratorIterator);\n\t\t\t\t\t\tif (count($array) > 0) {\n\t\t\t\t\t\t\tshuffle($array);\n\t\t\t\t\t\t\t$iteratorIterator = new ArrayIterator($array);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\t\t\t\tif (stripos($info->getFilename(), 'np') !== false) {\n\t\t\t\t\t\t\t\tif ($i < 1) {\n\t\t\t\t\t\t\t\t\t$imageInfo = getimagesize($folder . DIRECTORY_SEPARATOR . $info->getFilename());\n\t\t\t\t\t\t\t\t\tif ($imageInfo[0] >= $this->getCacheImageSize('npw')) {\n\t\t\t\t\t\t\t\t\t\t$image = 'data/cache/' . $info->getFilename();\n\t\t\t\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $image;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getSettingsMain()\n\t{\n\t\t$certificateStatus = $this->hasCustomCert() ? '<span lang=\"en\">Custom Certificate Loaded</span><br />Located at <span>' . $this->getCustomCert() . '</span>' : '<span lang=\"en\">Custom Certificate not found - please upload below</span>';\n\t\t$settings = [\n\t\t\t'Settings Page' => [\n\t\t\t\t$this->settingsOption('select', 'defaultSettingsTab', ['label' => 'Default Settings Tab', 'options' => $this->getSettingsTabs(), 'help' => 'Choose which Settings Tab to be default when opening settings page']),\n\t\t\t],\n\t\t\t'Github' => [\n\t\t\t\t$this->settingsOption('select', 'branch', ['label' => 'Branch', 'value' => $this->config['branch'], 'options' => $this->getBranches(), 'disabled' => $this->docker, 'help' => ($this->docker) ? 'Since you are using the Official Docker image, Change the image to change the branch' : 'Choose which branch to download from']),\n\t\t\t\t$this->settingsOption('button', 'force-install-branch', ['label' => 'Force Install Branch', 'class' => 'updateNow', 'icon' => 'fa fa-download', 'text' => 'Retrieve', 'attr' => ($this->docker) ? 'title=\"You can just restart your docker to update\"' : '', 'help' => ($this->docker) ? 'Since you are using the official Docker image, you can just restart your Docker container to update Organizr' : 'This will re-download all of the source files for Organizr']),\n\t\t\t],\n\t\t\t'API' => [\n\t\t\t\t$this->settingsOption('password-alt-copy', 'organizrAPI', ['label' => 'Organizr API']),\n\t\t\t\t$this->settingsOption('button', null, ['label' => 'Generate New API Key', 'class' => 'newAPIKey', 'icon' => 'fa fa-refresh', 'text' => 'Generate']),\n\t\t\t\t$this->settingsOption('notice', null, ['title' => 'API Documentation', 'body' => 'The documentation for Organizr\\'s API is included with this installation.  To access the docs, use the button below.', 'bodyHTML' => '<br/><br/><div class=\"row\"><div class=\"col-lg-2 col-sm-4 col-xs-12\"><a href=\"' . $this->getServerPath() . 'docs/\" target=\"_blank\" class=\"btn btn-block btn-primary text-white\" lang=\"en\">Organizr Docs</a></div></div>'])\n\t\t\t],\n\t\t\t'Authentication' => [\n\t\t\t\t$this->settingsOption('select', 'authType', ['id' => 'authSelect', 'label' => 'Authentication Type', 'value' => $this->config['authType'], 'options' => $this->getAuthTypes()]),\n\t\t\t\t$this->settingsOption('select', 'authBackend', ['id' => 'authBackendSelect', 'label' => 'Authentication Backend', 'class' => 'backendAuth switchAuth', 'value' => $this->config['authBackend'], 'options' => $this->getAuthBackends()]),\n\t\t\t\t$this->settingsOption('token', 'plexToken', ['class' => 'plexAuth switchAuth']),\n\t\t\t\t$this->settingsOption('button', '', ['class' => 'getPlexTokenAuth plexAuth switchAuth', 'label' => 'Get Plex Token', 'icon' => 'fa fa-ticket', 'text' => 'Retrieve', 'attr' => 'onclick=\"PlexOAuth(oAuthSuccess,oAuthError, null, \\'#settings-main-form [name=plexToken]\\')\"']),\n\t\t\t\t$this->settingsOption('password-alt', 'plexID', ['class' => 'plexAuth switchAuth', 'label' => 'Plex Machine', 'placeholder' => 'Use Get Plex Machine Button']),\n\t\t\t\t$this->settingsOption('button', '', ['class' => 'getPlexMachineAuth plexAuth switchAuth', 'label' => 'Get Plex Machine', 'icon' => 'fa fa-id-badge', 'text' => 'Retrieve', 'attr' => 'onclick=\"showPlexMachineForm(\\'#settings-main-form [name=plexID]\\')\"']),\n\t\t\t\t$this->settingsOption('input', 'plexAdmin', ['label' => 'Plex Admin Username or Email', 'class' => 'plexAuth switchAuth', 'placeholder' => 'Admin username for Plex']),\n\t\t\t\t$this->settingsOption('switch', 'plexoAuth', ['label' => 'Enable Plex oAuth', 'class' => 'plexAuth switchAuth']),\n\t\t\t\t$this->settingsOption('switch', 'ignoreTFAIfPlexOAuth', ['label' => 'Ignore 2FA if Plex OAuth ', 'class' => 'plexAuth switchAuth', 'help' => 'Enabling this will disable Organizr 2FA (If applicable) if User uses Plex OAuth to login']),\n\t\t\t\t$this->settingsOption('switch', 'plexStrictFriends', ['label' => 'Strict Plex Friends ', 'class' => 'plexAuth switchAuth', 'help' => 'Enabling this will only allow Friends that have shares to the Machine ID entered above to login, Having this disabled will allow all Friends on your Friends list to login']),\n\t\t\t\t$this->settingsOption('switch', 'ignoreTFALocal', ['label' => 'Ignore External 2FA on Local Subnet', 'help' => 'Enabling this will bypass external 2FA security if user is on local Subnet']),\n\t\t\t\t$this->settingsOption('url', 'authBackendHost', ['class' => 'ldapAuth ftpAuth switchAuth', 'label' => 'Host Address', 'placeholder' => 'http(s) | ftp(s) | ldap(s)://hostname:port']),\n\t\t\t\t$this->settingsOption('input', 'authBaseDN', ['class' => 'ldapAuth switchAuth', 'label' => 'Host Base DN', 'placeholder' => 'cn=%s,dc=sub,dc=domain,dc=com']),\n\t\t\t\t$this->settingsOption('input', 'authBackendHostPrefix', ['class' => 'ldapAuth switchAuth', 'label' => 'Account Prefix', 'id' => 'authBackendHostPrefix-input', 'placeholder' => 'Account prefix - i.e. Controller\\ from Controller\\Username for AD - uid= for OpenLDAP']),\n\t\t\t\t$this->settingsOption('input', 'authBackendHostSuffix', ['class' => 'ldapAuth switchAuth', 'label' => 'Account Suffix', 'id' => 'authBackendHostSuffix-input', 'placeholder' => 'Account suffix - start with comma - ,ou=people,dc=domain,dc=tld']),\n\t\t\t\t$this->settingsOption('input', 'ldapBindUsername', ['class' => 'ldapAuth switchAuth', 'label' => 'Bind Username']),\n\t\t\t\t$this->settingsOption('password', 'ldapBindPassword', ['class' => 'ldapAuth switchAuth', 'label' => 'Bind Password']),\n\t\t\t\t$this->settingsOption('select', 'ldapType', ['id' => 'ldapType', 'label' => 'LDAP Backend Type', 'class' => 'ldapAuth switchAuth', 'options' => $this->getLDAPOptions()]),\n\t\t\t\t$this->settingsOption('html', null, ['class' => 'ldapAuth switchAuth', 'label' => 'Account DN', 'html' => '<span id=\"accountDN\" class=\"ldapAuth switchAuth\">' . $this->config['authBackendHostPrefix'] . 'TestAcct' . $this->config['authBackendHostSuffix'] . '</span>']),\n\t\t\t\t$this->settingsOption('blank', null, ['class' => 'ldapAuth switchAuth']),\n\t\t\t\t$this->settingsOption('switch', 'ldapSSL', ['class' => 'ldapAuth switchAuth', 'label' => 'Enable LDAP SSL', 'help' => 'This will enable the use of SSL for LDAP connections']),\n\t\t\t\t$this->settingsOption('switch', 'ldapSSL', ['class' => 'ldapAuth switchAuth', 'label' => 'Enable LDAP TLS', 'help' => 'This will enable the use of TLS for LDAP connections']),\n\t\t\t\t$this->settingsOption('test', 'ldap', ['class' => 'ldapAuth switchAuth']),\n\t\t\t\t$this->settingsOption('test', '', ['label' => 'Test Login', 'class' => 'ldapAuth switchAuth', 'text' => 'Test Login', 'attr' => 'onclick=\"showLDAPLoginTest()\"']),\n\t\t\t\t$this->settingsOption('url', 'embyURL', ['class' => 'embyAuth switchAuth', 'label' => 'Emby URL', 'help' => 'Please make sure to use local IP address and port - You also may use local dns name too.']),\n\t\t\t\t$this->settingsOption('token', 'embyToken', ['class' => 'embyAuth switchAuth', 'label' => 'Emby Token']),\n\t\t\t\t$this->settingsOption('url', 'jellyfinURL', ['class' => 'jellyfinAuth switchAuth', 'label' => 'Jellyfin URL', 'help' => 'Please make sure to use local IP address and port - You also may use local dns name too.']),\n\t\t\t\t$this->settingsOption('token', 'jellyfinToken', ['class' => 'jellyfinAuth switchAuth', 'label' => 'Jellyfin Token']),\n\t\t\t],\n\t\t\t'Security' => [\n\t\t\t\t$this->settingsOption('number', 'loginAttempts', ['label' => 'Max Login Attempts']),\n\t\t\t\t$this->settingsOption('select', 'loginLockout', ['label' => 'Login Lockout Seconds', 'options' => $this->timeOptions()]),\n\t\t\t\t$this->settingsOption('number', 'lockoutTimeout', ['label' => 'Inactivity Timer [Minutes]']),\n\t\t\t\t$this->settingsOption('switch', 'lockoutSystem', ['label' => 'Inactivity Lock']),\n\t\t\t\t$this->settingsOption('select', 'lockoutMinAuth', ['label' => 'Lockout Groups From', 'options' => $this->groupSelect()]),\n\t\t\t\t$this->settingsOption('select', 'lockoutMaxAuth', ['label' => 'Lockout Groups To', 'options' => $this->groupSelect()]),\n\t\t\t\t$this->settingsOption('switch', 'traefikAuthEnable', ['label' => 'Enable Traefik Auth Redirect', 'help' => 'This will enable the webserver to forward errors so traefik will accept them']),\n\t\t\t\t$this->settingsOption('input', 'traefikDomainOverride', ['label' => 'Traefik Domain for Return Override', 'help' => 'Please use a FQDN on this URL Override', 'placeholder' => 'http(s)://domain']),\n\t\t\t\t$this->settingsOption('select', 'debugAreaAuth', ['label' => 'Minimum Authentication for Debug Area', 'options' => $this->groupSelect(), 'settings' => '{}']),\n\t\t\t\t$this->settingsOption('multiple', 'sandbox', ['override' => 12, 'label' => 'iFrame Sandbox', 'help' => 'WARNING! This can potentially mess up your iFrames', 'options' => $this->sandboxOptions()]),\n\t\t\t\t$this->settingsOption('multiple', 'blacklisted', ['override' => 12, 'label' => 'Blacklisted IP\\'s', 'help' => 'WARNING! This will block anyone with these IP\\'s', 'options' => $this->makeOptionsFromValues($this->config['blacklisted']), 'settings' => '{tags: true}']),\n\t\t\t\t$this->settingsOption('code-editor', 'blacklistedMessage', ['mode' => 'html']),\n\t\t\t],\n\t\t\t'Logs' => [\n\t\t\t\t$this->settingsOption('folder', 'logLocation', ['label' => 'Log Save Path', 'help' => 'Folder path to save Organizr Logs - Please test before saving', 'value' => $this->logLocation()]),\n\t\t\t\t$this->settingsOption('select', 'logLevel', ['label' => 'Log Level', 'options' => $this->logLevels()]),\n\t\t\t\t$this->settingsOption('switch', 'includeDatabaseQueriesInDebug', ['label' => 'Include Database Queries', 'help' => 'Include Database queries in debug logs']),\n\t\t\t\t$this->settingsOption('number', 'maxLogFiles', ['label' => 'Maximum Log Files', 'help' => 'Number of log files to preserve', 'attr' => 'min=\"1\"']),\n\t\t\t\t$this->settingsOption('select', 'logLiveUpdateRefresh', ['label' => 'Live Update Refresh', 'options' => $this->timeOptions()]),\n\t\t\t\t$this->settingsOption('select', 'logPageSize', ['label' => 'Log Page Size', 'options' => [['name' => '10 Items', 'value' => '10'], ['name' => '25 Items', 'value' => '25'], ['name' => '50 Items', 'value' => '50'], ['name' => '100 Items', 'value' => '100']]]),\n\t\t\t\t$this->settingsOption('switch', 'sendLogsToSlack', ['label' => 'Send Logs to Slack', 'help' => 'Send Logs to Slack as well']),\n\t\t\t\t$this->settingsOption('select', 'slackLogLevel', ['label' => 'Slack Log Level', 'options' => $this->logLevels()]),\n\t\t\t\t$this->settingsOption('url', 'slackLogWebhook', ['label' => 'Slack Webhook URL', 'help' => 'If using Discord make sure to end the URL with /slack']),\n\t\t\t\t$this->settingsOption('input', 'slackLogWebHookChannel', ['label' => 'Slack Channel for Webhook', 'help' => 'Channel ID for webhook - Not needed for Discord']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('test', 'slack-logs', ['label' => 'Test Slack', 'text' => 'Test Slack', 'help' => 'Test only sends a warning message so make sure Slack Log Level is Warning when testing']),\n\t\t\t],\n\t\t\t'Cron' => [\n\t\t\t\t$this->settingsOption('cron-file'),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('enable', 'autoUpdateCronEnabled', ['label' => 'Auto-Update Organizr']),\n\t\t\t\t$this->settingsOption('cron', 'autoUpdateCronSchedule'),\n\t\t\t],\n\t\t\t'Login' => [\n\t\t\t\t$this->settingsOption('password', 'registrationPassword', ['label' => 'Registration Password', 'help' => 'Sets the password for the Registration form on the login screen']),\n\t\t\t\t$this->settingsOption('switch', 'hideRegistration', ['label' => 'Hide Registration', 'help' => 'Enable this to hide the Registration button on the login screen']),\n\t\t\t\t$this->settingsOption('number', 'rememberMeDays', ['label' => 'Remember Me Length', 'help' => 'Number of days cookies and tokens will be valid for', 'attr' => 'min=\"1\"']),\n\t\t\t\t$this->settingsOption('switch', 'rememberMe', ['label' => 'Remember Me', 'help' => 'Default status of Remember Me button on login screen']),\n\t\t\t\t$this->settingsOption('multiple-url', 'localIPList', ['label' => 'Override Local IP or Subnet', 'help' => 'IPv4 only at the moment - This will set your login as local if your IP falls within the From and To']),\n\t\t\t\t$this->settingsOption('input', 'wanDomain', ['label' => 'WAN Domain', 'placeholder' => 'only domain and tld - i.e. domain.com', 'help' => 'Enter domain if you wish to be forwarded to a local address - Local Address filled out on next item']),\n\t\t\t\t$this->settingsOption('url', 'localAddress', ['label' => 'Local Address', 'placeholder' => 'http://home.local', 'help' => 'Full local address of organizr install - i.e. http://home.local or http://192.168.0.100']),\n\t\t\t\t$this->settingsOption('switch', 'enableLocalAddressForward', ['label' => 'Enable Local Address Forward', 'help' => 'Enables the local address forward if on local address and accessed from WAN Domain']),\n\t\t\t\t$this->settingsOption('switch', 'disableRecoverPass', ['label' => 'Disable Recover Password', 'help' => 'Disables recover password area']),\n\t\t\t\t$this->settingsOption('input', 'customForgotPassText', ['label' => 'Custom Recover Password Text', 'help' => 'Text or HTML for recovery password section']),\n\t\t\t],\n\t\t\t'Auth Proxy' => [\n\t\t\t\t$this->settingsOption('switch', 'authProxyEnabled', ['label' => 'Auth Proxy', 'help' => 'Enable option to set Auth Proxy Header Login']),\n\t\t\t\t$this->settingsOption('input', 'authProxyWhitelist', ['label' => 'Auth Proxy Whitelist', 'placeholder' => 'i.e. 10.0.0.0/24 or 10.0.0.20', 'help' => 'IPv4 only at the moment - This must be set to work, will accept subnet or IP address']),\n\t\t\t\t$this->settingsOption('input', 'authProxyHeaderName', ['label' => 'Auth Proxy Header Name', 'placeholder' => 'i.e. X-Forwarded-User', 'help' => 'Please choose a unique value for added security']),\n\t\t\t\t$this->settingsOption('input', 'authProxyHeaderNameEmail', ['label' => 'Auth Proxy Header Name for Email', 'placeholder' => 'i.e. X-Forwarded-Email', 'help' => 'Please choose a unique value for added security']),\n\t\t\t\t$this->settingsOption('switch', 'authProxyOverrideLogout', ['label' => 'Override Logout', 'help' => 'Enable option to set custom Logout URL for Auth Proxy']),\n\t\t\t\t$this->settingsOption('input', 'authProxyLogoutURL', ['label' => 'Logout URL', 'help' => 'Logout URL to redirect user for Auth Proxy']),\n\t\t\t],\n\t\t\t'Ping' => [\n\t\t\t\t$this->settingsOption('auth', 'pingAuth'),\n\t\t\t\t$this->settingsOption('auth', 'pingAuthMessage', ['label' => 'Minimum Authentication for Message and Sound']),\n\t\t\t\t$this->settingsOption('select', 'pingOnlineSound', ['label' => 'Online Sound', 'options' => $this->getSounds()]),\n\t\t\t\t$this->settingsOption('select', 'pingOfflineSound', ['label' => 'Offline Sound', 'options' => $this->getSounds()]),\n\t\t\t\t$this->settingsOption('switch', 'pingMs', ['label' => 'Show Ping Time']),\n\t\t\t\t$this->settingsOption('switch', 'statusSounds', ['label' => 'Enable Notify Sounds', 'help' => 'Will play a sound if the server goes down and will play sound if comes back up.']),\n\t\t\t\t$this->settingsOption('auth', 'pingAuthMs', ['label' => 'Minimum Authentication for Time Display']),\n\t\t\t\t$this->settingsOption('refresh', 'adminPingRefresh', ['label' => 'Admin Refresh Seconds']),\n\t\t\t\t$this->settingsOption('refresh', 'otherPingRefresh', ['label' => 'Everyone Refresh Seconds']),\n\t\t\t],\n\t\t\t'Certificate' => [\n\t\t\t\t$this->settingsOption('html', '', ['override' => 12,\n\t\t\t\t\t\t'html' => '\n\t\t\t\t\t<script>\n\t\t\t\t\t\tlet myDropzone = new Dropzone(\"#upload-custom-certificate\", {\n\t\t\t\t\t\t\turl: \"api/v2/certificate/custom\",\n\t\t\t\t\t\t\theaders:{ \"formKey\": local(\"g\",\"formKey\") },\n\t\t\t\t\t\t\tinit: function() {\n\t\t\t\t\t\t\t\tthis.on(\"complete\", function(file) {\n\t\t\t\t\t\t\t\t\tif(file[\"status\"] === \"success\"){\n\t\t\t\t\t\t\t\t\t\t$(\".custom-certificate-status\").html(\"<span lang=\\\"en\\\">Custom Certificate Loaded</span>\");\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t$(\".custom-certificate-status\").html(\"<span lang=\\\"en\\\">Error Saving file...</span>\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-lg-12\">\n\t\t\t\t\t\t\t<div class=\"panel panel-info\">\n\t\t\t\t\t\t\t\t<div class=\"panel-heading\"><span lang=\"en\">Notice</span></div>\n\t\t\t\t\t\t\t\t<div class=\"panel-wrapper collapse in\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t<div class=\"panel-body\">\n\t\t\t\t\t\t\t\t\t\t<span lang=\"en\">By default, Organizr uses certificates from https://curl.se/docs/caextract.html<br/>If you would like to use your own certificate, please upload it below.  You will then need to enable each homepage item to use it.</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t\t<div class=\"white-box\">\n\t\t\t\t\t\t\t\t<h3 class=\"box-title m-b-0\" lang=\"en\">Custom Certificate Status</h3>\n\t\t\t\t\t\t\t\t<p class=\"text-muted m-b-30 custom-certificate-status\">' . $certificateStatus . '</p>\n\t\t\t\t\t\t\t\t<form action=\"#\" class=\"dropzone dz-clickable\" id=\"upload-custom-certificate\">\n\t\t\t\t\t\t\t\t\t<div class=\"dz-default dz-message\"><span lang=\"en\">Drop Certificate file here to upload</span></div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t']\n\t\t\t\t)\n\t\t\t],\n\t\t];\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$database = [\n\t\t\t\t'Database' => [\n\t\t\t\t\t$this->settingsOption('notice', '', ['notice' => 'danger', 'title' => 'Warning', 'body' => 'This feature is experimental - You may face unexpected database is locked errors in logs']),\n\t\t\t\t\t$this->settingsOption('html', '', ['label' => 'Journal Mode Status', 'html' => '<script>getJournalMode();</script><h4 class=\"journal-mode font-bold text-uppercase\"><i class=\"fa fa-spin fa-circle-o-notch\"></i></h4>']),\n\t\t\t\t\t$this->settingsOption('button', '', ['label' => 'Set DELETE Mode (Default)', 'icon' => 'icon-notebook', 'text' => 'Set', 'attr' => 'onclick=\"setJournalMode(\\'DELETE\\')\"']),\n\t\t\t\t\t$this->settingsOption('button', '', ['label' => 'Set WAL Mode', 'icon' => 'icon-notebook', 'text' => 'Set', 'attr' => 'onclick=\"setJournalMode(\\'WAL\\')\"']),\n\t\t\t\t]\n\t\t\t];\n\t\t\t$settings = array_merge($settings, $database);\n\t\t}\n\t\tksort($settings);\n\t\treturn $settings;\n\t}\n\n\tpublic function getSettingsSSO()\n\t{\n\t\treturn [\n\t\t\t'FYI' => [\n\t\t\t\t$this->settingsOption('html', '', ['override' => 12,\n\t\t\t\t\t\t'html' => '\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-lg-12\">\n\t\t\t\t\t\t\t\t<div class=\"panel panel-primary\">\n\t\t\t\t\t\t\t\t\t<div class=\"panel-heading\"><span lang=\"en\">Please Read First</span></div>\n\t\t\t\t\t\t\t\t\t<div class=\"panel-wrapper collapse in\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"panel-body\">\n\t\t\t\t\t\t\t\t\t\t\t<span lang=\"en\">Using multiple SSO application will cause your Cookie Header item to increase.  If you haven\\'t increased it by now, please follow this guide</span>\n\t\t\t\t\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-lg-2 col-sm-4 col-xs-12\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"https://docs.organizr.app/help/faq/organizr-login-error\" target=\"_blank\" class=\"btn btn-block btn-primary text-white\" lang=\"en\">Cookie Header Guide</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\t\t\t<span lang=\"en\">This is not the same as database authentication - i.e. Plex Authentication | Emby Authentication | FTP Authentication<br/>Click Main on the sub-menu above.</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>'\n\t\t\t\t\t]\n\t\t\t\t),\n\t\t\t],\n\t\t\t'Plex' => [\n\t\t\t\t$this->settingsOption('token', 'plexToken'),\n\t\t\t\t$this->settingsOption('button', '', ['label' => 'Get Plex Token', 'icon' => 'fa fa-ticket', 'text' => 'Retrieve', 'attr' => 'onclick=\"PlexOAuth(oAuthSuccess,oAuthError, null, \\'#sso-form [name=plexToken]\\')\"']),\n\t\t\t\t$this->settingsOption('password-alt', 'plexID', ['label' => 'Plex Machine']),\n\t\t\t\t$this->settingsOption('button', '', ['label' => 'Get Plex Machine', 'icon' => 'fa fa-id-badge', 'text' => 'Retrieve', 'attr' => 'onclick=\"showPlexMachineForm(\\'#sso-form [name=plexID]\\')\"']),\n\t\t\t\t$this->settingsOption('input', 'plexAdmin', ['label' => 'Plex Admin Username or Email']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('html', 'Plex Note', ['html' => '<span lang=\"en\">Please make sure both Token and Machine are filled in</span>']),\n\t\t\t\t$this->settingsOption('enable', 'ssoPlex'),\n\t\t\t],\n\t\t\t'Tautulli' => [\n\t\t\t\t$this->settingsOption('multiple-url', 'tautulliURL'),\n\t\t\t\t$this->settingsOption('auth', 'ssoTautulliAuth'),\n\t\t\t\t$this->settingsOption('enable', 'ssoTautulli'),\n\t\t\t],\n\t\t\t'Overseerr' => [\n\t\t\t\t$this->settingsOption('url', 'overseerrURL'),\n\t\t\t\t$this->settingsOption('token', 'overseerrToken'),\n\t\t\t\t$this->settingsOption('username', 'overseerrFallbackUser', ['label' => 'Overseerr Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'overseerrFallbackPassword', ['label' => 'Overseerr Fallback Password']),\n\t\t\t\t$this->settingsOption('enable', 'ssoOverseerr'),\n\t\t\t],\n\t\t\t'Petio' => [\n\t\t\t\t$this->settingsOption('url', 'petioURL'),\n\t\t\t\t$this->settingsOption('token', 'petioToken'),\n\t\t\t\t$this->settingsOption('username', 'petioFallbackUser', ['label' => 'Petio Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'petioFallbackPassword', ['label' => 'Petio Fallback Password']),\n\t\t\t\t$this->settingsOption('enable', 'ssoPetio'),\n\t\t\t],\n\t\t\t'Ombi' => [\n\t\t\t\t$this->settingsOption('url', 'ombiURL'),\n\t\t\t\t$this->settingsOption('token', 'ombiToken'),\n\t\t\t\t$this->settingsOption('username', 'ombiFallbackUser', ['label' => 'Ombi Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'ombiFallbackPassword', ['label' => 'Ombi Fallback Password']),\n\t\t\t\t$this->settingsOption('enable', 'ssoOmbi'),\n\t\t\t],\n\t\t\t'Jellyfin' => [\n\t\t\t\t$this->settingsOption('url', 'jellyfinURL', ['label' => 'Jellyfin API URL', 'help' => 'Please make sure to use the local address to the API']),\n\t\t\t\t$this->settingsOption('url', 'jellyfinSSOURL', ['label' => 'Jellyfin SSO URL', 'help' => 'Please make sure to use the same (sub)domain to access Jellyfin as Organizr\\'s']),\n\t\t\t\t$this->settingsOption('enable', 'ssoJellyfin'),\n\t\t\t],\n\t\t\t'Komga' => [\n\t\t\t\t$this->settingsOption('url', 'komgaURL'),\n\t\t\t\t$this->settingsOption('auth', 'ssoKomgaAuth'),\n\t\t\t\t$this->settingsOption('enable', 'ssoKomga'),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('username', 'komgaFallbackUser', ['label' => 'Komga Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'komgaFallbackPassword', ['label' => 'Komga Fallback Password']),\n\t\t\t],\n\t\t];\n\t}\n\n\tpublic function systemMenuLists()\n\t{\n\t\t$pluginsMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_plugins_enabled',\n\t\t\t\t'anchor' => 'settings-plugins-enabled-anchor',\n\t\t\t\t'name' => 'Active',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_plugins_disabled',\n\t\t\t\t'anchor' => 'settings-plugins-disabled-anchor',\n\t\t\t\t'name' => 'Inactive',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_plugins_settings',\n\t\t\t\t'anchor' => 'settings-plugins-settings-anchor',\n\t\t\t\t'name' => 'Settings',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-plugins-marketplace-anchor',\n\t\t\t\t'name' => 'Marketplace',\n\t\t\t\t'onclick' => 'loadPluginMarketplace();'\n\t\t\t],\n\t\t];\n\t\t$userManagementMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_user_manage_users',\n\t\t\t\t'anchor' => 'settings-user-manage-users-anchor',\n\t\t\t\t'name' => 'Manage Users'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_user_manage_groups',\n\t\t\t\t'anchor' => 'settings-user-manage-groups-anchor',\n\t\t\t\t'name' => 'Manage Groups'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-user-import-users-anchor',\n\t\t\t\t'name' => 'Import Users'\n\t\t\t],\n\t\t];\n\t\t$customizeMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_customize_appearance',\n\t\t\t\t'anchor' => 'settings-customize-appearance-anchor',\n\t\t\t\t'name' => 'Appearance',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_customize_settings',\n\t\t\t\t'anchor' => 'settings-customize-settings-anchor',\n\t\t\t\t'name' => 'Marketplace Settings',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-customize-marketplace-anchor',\n\t\t\t\t'name' => 'Marketplace',\n\t\t\t\t'onclick' => 'loadThemeMarketplace();'\n\t\t\t],\n\t\t];\n\t\t$tabEditorMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_tabs',\n\t\t\t\t'anchor' => 'settings-tab-editor-tabs-anchor',\n\t\t\t\t'name' => 'Tabs'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_categories',\n\t\t\t\t'anchor' => 'settings-tab-editor-categories-anchor',\n\t\t\t\t'name' => 'Categories'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_homepage',\n\t\t\t\t'anchor' => 'settings-tab-editor-homepage-anchor',\n\t\t\t\t'name' => 'Homepage Items'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_homepage_order',\n\t\t\t\t'anchor' => 'settings-tab-editor-homepage-order-anchor',\n\t\t\t\t'name' => 'Homepage Order'\n\t\t\t],\n\t\t];\n\t\t$systemSettingsMenu = [\n\t\t\t[\n\t\t\t\t'active' => true,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-settings-about-anchor',\n\t\t\t\t'name' => 'About'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_main',\n\t\t\t\t'anchor' => 'settings-settings-main-anchor',\n\t\t\t\t'name' => 'Main'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_sso',\n\t\t\t\t'anchor' => 'settings-settings-sso-anchor',\n\t\t\t\t'name' => 'SSO'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_logs',\n\t\t\t\t'anchor' => 'settings-settings-logs-anchor',\n\t\t\t\t'name' => 'Logs'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-settings-updates-anchor',\n\t\t\t\t'name' => 'Updates'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_backup',\n\t\t\t\t'anchor' => 'settings-settings-backup-anchor',\n\t\t\t\t'name' => 'Backup'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-settings-donate-anchor',\n\t\t\t\t'name' => 'Donate'\n\t\t\t],\n\t\t];\n\t\t$systemMenus['system_settings'] = $this->buildSettingsMenus($systemSettingsMenu, 'System Settings');\n\t\t$systemMenus['tab_editor'] = $this->buildSettingsMenus($tabEditorMenu, 'Tab Editor');\n\t\t$systemMenus['customize'] = $this->buildSettingsMenus($customizeMenu, 'Customize');\n\t\t$systemMenus['user_management'] = $this->buildSettingsMenus($userManagementMenu, 'User Management');\n\t\t$systemMenus['plugins'] = $this->buildSettingsMenus($pluginsMenu, 'Plugins');\n\t\treturn $systemMenus;\n\t}\n\n\tpublic function updateConfigMultiple($array)\n\t{\n\t\treturn (bool)$this->updateConfig($array);\n\t}\n\n\tpublic function updateConfigItems($array)\n\t{\n\t\tif (!count($array)) {\n\t\t\t$this->setAPIResponse('error', 'No data submitted', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$newItem = array();\n\t\tforeach ($array as $k => $v) {\n\t\t\t$v = $v ?? '';\n\t\t\tswitch ($v) {\n\t\t\t\tcase 'true':\n\t\t\t\t\t$v = (bool)true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'false':\n\t\t\t\t\t$v = (bool)false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Hash\n\t\t\tif ((stripos($k, 'password') !== false)) {\n\t\t\t\tif (!$this->isEncrypted($v)) {\n\t\t\t\t\tif ($v !== '') {\n\t\t\t\t\t\t$v = $this->encrypt($v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch ($k) {\n\t\t\t\tcase 'logLocation':\n\t\t\t\tcase 'dbLocation':\n\t\t\t\t\tif (!empty($v)) {\n\t\t\t\t\t\t$v = $this->cleanDirectory($v);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (strtolower($k) !== 'formkey') {\n\t\t\t\t$newItem[$k] = $v;\n\t\t\t\t$this->config[$k] = $v;\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('success', 'Config items updated', 200);\n\t\t$this->setLoggerChannel('Config');\n\t\t$this->logger->info('Config items updated', array_keys($array));\n\t\treturn (bool)$this->updateConfig($newItem);\n\t}\n\n\tpublic function updateConfigItem($array)\n\t{\n\t\t$array['value'] = $array['value'] ?? '';\n\t\tswitch ($array['value']) {\n\t\t\tcase 'true':\n\t\t\t\t$array['value'] = (bool)true;\n\t\t\t\tbreak;\n\t\t\tcase 'false':\n\t\t\t\t$array['value'] = (bool)false;\n\t\t\t\tbreak;\n\t\t}\n\t\t// Hash\n\t\tif ($array['type'] == 'password') {\n\t\t\t$array['value'] = $this->encrypt($array['value']);\n\t\t}\n\t\t$newItem = array(\n\t\t\t$array['name'] => $array['value']\n\t\t);\n\t\t$this->config[$array['name']] = $array['value'];\n\t\treturn (bool)$this->updateConfig($newItem);\n\t}\n\n\tpublic function ignoreNewsId($id)\n\t{\n\t\tif (!$id) {\n\t\t\t$this->setAPIResponse('error', 'News id was not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$id = array(intval($id));\n\t\t$newsIds = $this->config['ignoredNewsIds'];\n\t\t$newsIds = array_merge($newsIds, $id);\n\t\t$newsIds = array_unique($newsIds);\n\t\t$this->updateConfig(['ignoredNewsIds' => $newsIds]);\n\t\t$this->setAPIResponse('success', 'News id is now ignored', 200, null);\n\t}\n\n\tpublic function getNewsIds()\n\t{\n\t\t$newsIds = $this->config['ignoredNewsIds'];\n\t\t$this->setAPIResponse('success', null, 200, $newsIds);\n\t\treturn $newsIds;\n\t}\n\n\tpublic function testWizardPath($array)\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\t$this->setAPIResponse('error', 'Endpoint disabled as database already exists', 401);\n\t\t\treturn false;\n\t\t}\n\t\t$path = $array['path'] ?? null;\n\t\tif (file_exists($path)) {\n\t\t\tif (is_writable($path)) {\n\t\t\t\t$this->setAPIResponse('success', 'Path exists and is writable', 200);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Path exists but is not writable', 403);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (mkdir($path, 0760, true)) {\n\t\t\t\t$this->setAPIResponse('success', 'Path is writable - Creating now', 200);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Failed making directory - Check permissions', 403);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function formatDatabaseDriver($driver)\n\t{\n\t\t$driver = strtolower($driver);\n\t\tswitch ($driver) {\n\t\t\tcase 'sqlite':\n\t\t\tcase 'sqlite3':\n\t\t\t\treturn 'sqlite3';\n\t\t\tcase 'mysql':\n\t\t\tcase 'mysqli':\n\t\t\t\treturn 'mysqli';\n\t\t\tcase 'postgre':\n\t\t\tcase 'postgres':\n\t\t\tcase 'postgresql':\n\t\t\t\treturn 'postgre';\n\t\t\tdefault:\n\t\t\t\treturn $driver;\n\t\t}\n\t}\n\n\tpublic function wizardConfig($array)\n\t{\n\t\t$array['driver'] = $array['driver'] ?? 'sqlite3';\n\t\t$driver = $this->formatDatabaseDriver($array['driver']);\n\t\t$dbName = $array['dbName'] ?? null;\n\t\t$path = $array['dbPath'] ?? $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . $this->random_ascii_string(10) . DIRECTORY_SEPARATOR;\n\t\t$license = $array['license'] ?? null;\n\t\t$hashKey = $array['hashKey'] ?? null;\n\t\t$api = $array['api'] ?? null;\n\t\t$registrationPassword = $array['registrationPassword'] ?? null;\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$email = $array['email'] ?? null;\n\t\t$dbHost = $array['dbHost'] ?? null;\n\t\t$dbUsername = $array['dbUsername'] ?? null;\n\t\t$dbPassword = $array['dbPassword'] ?? null;\n\t\t$validation = [\n\t\t\t'dbPath' => $path,\n\t\t\t'dbName' => $dbName,\n\t\t\t'license' => $license,\n\t\t\t'hashKey' => $hashKey,\n\t\t\t'api' => $api,\n\t\t\t'registrationPassword' => $registrationPassword,\n\t\t\t'username' => $username,\n\t\t\t'password' => $password,\n\t\t\t'email' => $email,\n\t\t\t'driver' => $driver\n\t\t];\n\t\t$dbName = $this->dbExtension($dbName);\n\t\tif ($driver == 'mysqli' || $driver == 'postgre') {\n\t\t\t$dbName = $this->removeDbExtension($dbName);\n\t\t\t$validation = array_merge($validation, [\n\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t'dbPassword' => $dbPassword,\n\t\t\t]);\n\t\t}\n\t\tforeach ($validation as $k => $v) {\n\t\t\tif ($v == null) {\n\t\t\t\t$this->setAPIResponse('error', '[' . $k . '] cannot be empty', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif ($path) {\n\t\t\t$path = $this->cleanDirectory($path);\n\t\t\tif (file_exists($path)) {\n\t\t\t\tif (!is_writable($path)) {\n\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!mkdir($path, 0760, true)) {\n\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$configVersion = $this->version;\n\t\t$configArray = array(\n\t\t\t'dbLocation' => $path,\n\t\t\t'driver' => $driver,\n\t\t\t'dbName' => $dbName,\n\t\t\t'license' => $license,\n\t\t\t'organizrHash' => $hashKey,\n\t\t\t'organizrAPI' => $api,\n\t\t\t'registrationPassword' => $registrationPassword,\n\t\t\t'uuid' => $this->gen_uuid()\n\t\t);\n\t\tif ($driver == 'mysqli' || $driver == 'postgre') {\n\t\t\t$configArray = array_merge($configArray, [\n\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t'dbPassword' => $this->encrypt($dbPassword, $hashKey),\n\t\t\t]);\n\t\t}\n\t\t//Test Database Connection before saving config\n\t\t$testDatabaseConnection = $this->testDatabaseConnection($array);\n\t\tif (!$testDatabaseConnection) {\n\t\t\t// setResponse already defined\n\t\t\treturn false;\n\t\t}\n\t\t// Create Config\n\t\tif ($this->createConfig($configArray)) {\n\t\t\t$this->config = $this->config();\n\t\t\t$this->refreshCookieName();\n\t\t\t$this->connectDB();\n\t\t\t// Call DB Create\n\t\t\tif (!$this->createNewDB($dbName, false)) {\n\t\t\t\t$this->setAPIResponse('error', 'error creating database using driver: ' . $driver, 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->createDB($path)) {\n\t\t\t\t// Add in first user\n\t\t\t\tif ($this->createFirstAdmin($username, $password, $email)) {\n\t\t\t\t\tif ($this->createToken($username, $email, 1)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->setAPIResponse('error', 'error creating token', 500);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'error creating admin', 500);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'error creating database', 500);\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'error creating config', 500);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function testDatabaseConnection($array)\n\t{\n\t\t$driver = $array['driver'] ?? 'sqlite3';\n\t\t$driver = $this->formatDatabaseDriver($driver);\n\n\t\t$dbName = $array['dbName'] ?? null;\n\t\t$dbHost = $array['dbHost'] ?? null;\n\t\t$dbUsername = $array['dbUsername'] ?? null;\n\t\t$dbPassword = $array['dbPassword'] ?? null;\n\t\t$path = $array['dbPath'] ?? $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . $this->random_ascii_string(10) . DIRECTORY_SEPARATOR;\n\t\tswitch ($driver) {\n\t\t\tcase 'mysqli':\n\t\t\t\tif (!extension_loaded('mysqli')) {\n\t\t\t\t\t$this->setResponse(500, 'PHP Extension `mysqli` is not loaded');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$config = [\n\t\t\t\t\t'driver' => 'mysqli',\n\t\t\t\t\t'host' => $dbHost,\n\t\t\t\t\t'username' => $dbUsername,\n\t\t\t\t\t'password' => $dbPassword,\n\t\t\t\t\t'options' => [\n\t\t\t\t\t\tMYSQLI_OPT_CONNECT_TIMEOUT => 60,\n\t\t\t\t\t],\n\t\t\t\t\t'flags' => MYSQLI_CLIENT_COMPRESS,\n\t\t\t\t];\n\t\t\t\t$validation = [\n\t\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t\t'dbPassword' => $dbPassword,\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'postgre':\n\t\t\t\t// DISABLE FOR NOW\n\t\t\t\t$this->setResponse(409, 'Database connection test not available for driver: ' . $driver);\n\t\t\t\treturn false;\n\t\t\t\t$config = [\n\t\t\t\t\t//host, hostaddr, port, dbname, user, password, connect_timeout, options, sslmode, service => see PostgreSQL API\n\t\t\t\t\t'driver' => 'postgre',\n\t\t\t\t\t'username' => $dbUsername,\n\t\t\t\t\t'password' => $dbPassword,\n\t\t\t\t\t'persistent' => true,\n\t\t\t\t];\n\t\t\t\t$host = $this->qualifyURL($dbHost, true);\n\t\t\t\tif ($host['port']) {\n\t\t\t\t\t$config = array_merge($config, ['port' => ltrim($host['port'], ':')]);\n\t\t\t\t}\n\t\t\t\tif (($host['host'])) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['host']]);\n\t\t\t\t}\n\t\t\t\tif (!$host['host'] && $host['path']) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['path']]);\n\t\t\t\t}\n\t\t\t\t$validation = [\n\t\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t\t'dbPassword' => $dbPassword,\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'sqlite3':\n\t\t\t\t$path = $this->cleanDirectory($path);\n\t\t\t\tif (file_exists($path)) {\n\t\t\t\t\tif (!is_writable($path)) {\n\t\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (is_writable(dirname($path, 1))) {\n\t\t\t\t\t\tif (!mkdir($path, 0760, true)) {\n\t\t\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\t$this->setResponse(409, 'Database connection test not available for driver: ' . $driver);\n\t\t\t\treturn false;\n\t\t}\n\t\tforeach ($validation as $k => $v) {\n\t\t\tif ($v == null) {\n\t\t\t\t$this->setAPIResponse('error', '[' . $k . '] cannot be empty', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\t$connection = new Connection($config);\n\t\t\t$testConnection = $connection->isConnected();\n\t\t\tif ($testConnection) {\n\t\t\t\t$this->setResponse(200, 'Database connection successful');\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setResponse(409, 'Database connection unsuccessful');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Dibi\\Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function createNewDB($dbName, $migration = false)\n\t{\n\t\tif ($this->config['driver'] == 'mysqli') {\n\t\t\t$config = [\n\t\t\t\t'driver' => 'mysqli',\n\t\t\t\t'host' => $this->config['dbHost'],\n\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t'options' => [\n\t\t\t\t\tMYSQLI_OPT_CONNECT_TIMEOUT => 60,\n\t\t\t\t],\n\t\t\t\t'flags' => MYSQLI_CLIENT_COMPRESS,\n\t\t\t];\n\t\t\tif ($migration) {\n\t\t\t\ttry {\n\t\t\t\t\t$this->otherDb = new Connection($config);\n\t\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t\t$this->otherDb = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\t$this->db = new Connection($config);\n\t\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t\t$this->db = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($dbName == 'tempMigration') {\n\t\t\t\t$response = [\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t\t'query' => [\n\t\t\t\t\t\t\t'DROP DATABASE IF EXISTS tempMigration'\n\t\t\t\t\t\t]\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t\t$drop = $this->processQueries($response, $migration);\n\t\t\t}\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => ['CREATE DATABASE IF NOT EXISTS %n',\n\t\t\t\t\t\t$dbName\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t];\n\t\t\t$results = $this->processQueries($response, $migration);\n\t\t\tif ($results) {\n\t\t\t\tif ($migration) {\n\t\t\t\t\t$this->connectOtherDB();\n\t\t\t\t} else {\n\t\t\t\t\t$this->connectDB();\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} elseif ($this->config['driver'] == 'postgre') {\n\t\t\t$config = [\n\t\t\t\t'driver' => 'postgre',\n\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t'persistent' => true,\n\t\t\t];\n\t\t\t$host = $this->qualifyURL($this->config['dbHost'], true);\n\t\t\tif ($host['port']) {\n\t\t\t\t$config = array_merge($config, ['port' => ltrim($host['port'], ':')]);\n\t\t\t}\n\t\t\tif ($host['host']) {\n\t\t\t\t$config = array_merge($config, ['host' => $host['host']]);\n\t\t\t}\n\t\t\tif (!$host['host'] && $host['path']) {\n\t\t\t\t$config = array_merge($config, ['host' => $host['path']]);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t$this->db = new Connection($config);\n\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t$this->db = null;\n\t\t\t}\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => ['CREATE DATABASE %n',\n\t\t\t\t\t\t$dbName\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t];\n\t\t\t$results = $this->processQueries($response, $migration);\n\t\t\tif ($results) {\n\t\t\t\t$this->connectDB();\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function getDefaultTablesFormatted()\n\t{\n\t\t$list = [];\n\t\t$tables = $this->defaultTables();\n\t\tforeach ($tables as $table) {\n\t\t\t$string = trim($table['query']);\n\t\t\tpreg_match('/CREATE TABLE `(.*?)`/', $string, $output_array);\n\t\t\tif (count($output_array) > 1) {\n\t\t\t\t$list[] = $output_array[1];\n\t\t\t}\n\t\t}\n\t\treturn $list;\n\t}\n\n\tpublic function defaultTables()\n\t{\n\t\treturn [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => '\n\t\t\t\t\tCREATE TABLE `users` (\n\t\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t\t`username`\tTEXT UNIQUE,\n\t\t\t\t\t\t`password`\tTEXT,\n\t\t\t\t\t\t`email`\tTEXT,\n\t\t\t\t\t\t`plex_token`\tTEXT,\n\t\t\t\t\t\t`group`\tTEXT,\n\t\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t\t`locked`\tINTEGER,\n\t\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t\t`register_date`\tDATETIME,\n\t\t\t\t\t\t`auth_service`\tTEXT DEFAULT \\'internal\\'\n\t\t\t\t\t);\n\t\t\t\t'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `chatroom` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`username`\tTEXT,\n\t\t\t\t\t`gravatar`\tTEXT,\n\t\t\t\t\t`uid`\tTEXT,\n\t\t\t\t\t`date` DATETIME,\n\t\t\t\t\t`ip` TEXT,\n\t\t\t\t\t`message` TEXT\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `tokens` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`token`\tTEXT UNIQUE,\n\t\t\t\t\t`user_id`\tINTEGER,\n\t\t\t\t\t`browser`\tTEXT,\n\t\t\t\t\t`ip`\tTEXT,\n\t\t\t\t\t`created` DATETIME,\n\t\t\t\t\t`expires` DATETIME\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `groups` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`group`\tTEXT UNIQUE,\n\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`default` INTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `categories` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category`\tTEXT UNIQUE,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`default` INTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `tabs` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`name`\tTEXT,\n\t\t\t\t\t`url`\tTEXT,\n\t\t\t\t\t`url_local`\tTEXT,\n\t\t\t\t\t`default`\tINTEGER,\n\t\t\t\t\t`enabled`\tINTEGER,\n\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t`group_id_min` INTEGER DEFAULT \\'1\\',\n\t\t\t\t\t`add_to_admin`\tINTEGER DEFAULT \\'0\\',\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`type`\tINTEGER,\n\t\t\t\t\t`splash`\tINTEGER,\n\t\t\t\t\t`ping`\t\tINTEGER,\n\t\t\t\t\t`ping_url`\tTEXT,\n\t\t\t\t\t`timeout`\tINTEGER,\n\t\t\t\t\t`timeout_ms`\tINTEGER,\n\t\t\t\t\t`preload`\tINTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `options` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`name`\tTEXT UNIQUE,\n\t\t\t\t\t`value`\tTEXT\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `invites` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`code`\tTEXT UNIQUE,\n\t\t\t\t\t`date`\tDATETIME,\n\t\t\t\t\t`email`\tTEXT,\n\t\t\t\t\t`username`\tTEXT,\n\t\t\t\t\t`dateused`\tTIMESTAMP,\n\t\t\t\t\t`usedby`\tTEXT,\n\t\t\t\t\t`ip`\tTEXT,\n\t\t\t\t\t`valid`\tTEXT,\n\t\t\t\t\t`type` TEXT,\n\t\t\t\t\t`invitedby` TEXT\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `BOOKMARK-categories` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category`\tTEXT UNIQUE,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`default` INTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `BOOKMARK-tabs` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`name`\tTEXT,\n\t\t\t\t\t`url`\tTEXT,\n\t\t\t\t\t`enabled`\tINTEGER,\n\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`background_color` TEXT,\n\t\t\t\t\t`text_color` TEXT\n\t\t\t\t);'\n\t\t\t)\n\t\t];\n\t}\n\n\tpublic function createDB($path, $migration = false)\n\t{\n\t\tif (!file_exists($path)) {\n\t\t\tmkdir($path, 0777, true);\n\t\t}\n\t\t$tables = $this->defaultTables();\n\t\treturn $this->processQueries($tables, $migration);\n\t}\n\n\tpublic function createFirstAdmin($username, $password, $email)\n\t{\n\n\t\t$userInfo = [\n\t\t\t'username' => $username,\n\t\t\t'password' => password_hash($password, PASSWORD_BCRYPT),\n\t\t\t'email' => $email,\n\t\t\t'group' => 'Admin',\n\t\t\t'group_id' => 0,\n\t\t\t'image' => $this->gravatar($email),\n\t\t\t'register_date' => gmdate('Y-m-d H:i:s'),\n\t\t];\n\t\t$groupInfo0 = [\n\t\t\t'group' => 'Admin',\n\t\t\t'group_id' => 0,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/admin.png',\n\t\t];\n\t\t$groupInfo1 = [\n\t\t\t'group' => 'Co-Admin',\n\t\t\t'group_id' => 1,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/coadmin.png',\n\t\t];\n\t\t$groupInfo2 = [\n\t\t\t'group' => 'Super User',\n\t\t\t'group_id' => 2,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/superuser.png',\n\t\t];\n\t\t$groupInfo3 = [\n\t\t\t'group' => 'Power User',\n\t\t\t'group_id' => 3,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/poweruser.png',\n\t\t];\n\t\t$groupInfo4 = [\n\t\t\t'group' => 'User',\n\t\t\t'group_id' => 4,\n\t\t\t'default' => 1,\n\t\t\t'image' => 'plugins/images/groups/user.png',\n\t\t];\n\t\t$groupInfoGuest = [\n\t\t\t'group' => 'Guest',\n\t\t\t'group_id' => 999,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/guest.png',\n\t\t];\n\t\t$settingsInfo = [\n\t\t\t'order' => 1,\n\t\t\t'category_id' => 0,\n\t\t\t'name' => 'Settings',\n\t\t\t'url' => 'api/v2/page/settings',\n\t\t\t'default' => 0,\n\t\t\t'enabled' => 1,\n\t\t\t'group_id' => 1,\n\t\t\t'image' => 'fontawesome::cog',\n\t\t\t'type' => 0\n\t\t];\n\t\t$homepageInfo = [\n\t\t\t'order' => 2,\n\t\t\t'category_id' => 0,\n\t\t\t'name' => 'Homepage',\n\t\t\t'url' => 'api/v2/page/homepage',\n\t\t\t'default' => 0,\n\t\t\t'enabled' => 0,\n\t\t\t'group_id' => 4,\n\t\t\t'image' => 'fontawesome::home',\n\t\t\t'type' => 0\n\t\t];\n\t\t$unsortedInfo = [\n\t\t\t'order' => 1,\n\t\t\t'category' => 'Unsorted',\n\t\t\t'category_id' => 0,\n\t\t\t'image' => 'fontawesome::question',\n\t\t\t'default' => 1\n\t\t];\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [users]',\n\t\t\t\t\t$userInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo0\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo1\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo2\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo3\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo4\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfoGuest\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tabs]',\n\t\t\t\t\t$settingsInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tabs]',\n\t\t\t\t\t$homepageInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [categories]',\n\t\t\t\t\t$unsortedInfo\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserByUsernameAndEmail($username, $email)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users WHERE username = ? COLLATE NOCASE OR email = ? COLLATE NOCASE',\n\t\t\t\t\t[$username],\n\t\t\t\t\t[$email]\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function createToken($username, $email, $days = 1)\n\t{\n\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t$this->logger->debug('Starting token creation function');\n\t\t$days = ($days > 365) ? 365 : $days;\n\t\t//Quick get user ID\n\t\t$result = $this->getUserByUsernameAndEmail($username, $email);\n\t\t$config = $this->configToken();\n\t\tassert($config instanceof Lcobucci\\JWT\\Configuration);\n\t\t$now = new DateTimeImmutable();\n\t\t$token = $config->builder()\n\t\t\t// Configures the issuer (iss claim)\n\t\t\t->issuedBy('Organizr')\n\t\t\t// Configures the audience (aud claim)\n\t\t\t->permittedFor('Organizr')\n\t\t\t// Configures the id (jti claim)\n\t\t\t->identifiedBy('4f1g23a12aa')\n\t\t\t// Configures the time that the token was issue (iat claim)\n\t\t\t->issuedAt($now)\n\t\t\t// Configures the time that the token can be used (nbf claim)\n\t\t\t->canOnlyBeUsedAfter($now)\n\t\t\t// Configures the expiration time of the token (exp claim)\n\t\t\t->expiresAt($now->modify('+' . $days . ' days'))\n\t\t\t// Configures a new claim, called \"uid\"\n\t\t\t->withClaim('name', $result['username'])// Configures a new claim, called \"name\"\n\t\t\t->withClaim('group', $result['group'])// Configures a new claim, called \"group\"\n\t\t\t->withClaim('groupID', $result['group_id'])// Configures a new claim, called \"groupID\"\n\t\t\t->withClaim('email', $result['email'])// Configures a new claim, called \"email\"\n\t\t\t->withClaim('image', $result['image'])// Configures a new claim, called \"image\"\n\t\t\t->withClaim('userID', $result['id'])// Configures a new claim, called \"image\"\n\t\t\t// Configures a new header, called \"foo\"\n\t\t\t//->withHeader('foo', 'bar')\n\t\t\t// Builds a new token\n\t\t\t->getToken($config->signer(), $config->signingKey());\n\t\t//$token->headers(); // Retrieves the token headers\n\t\t//$token->claims(); // Retrieves the token claims\n\t\t$this->coookie('set', $this->cookieName, $token->toString(), $days);\n\t\t// Add token to DB\n\t\t$addToken = [\n\t\t\t'token' => $token->toString(),\n\t\t\t'user_id' => $result['id'],\n\t\t\t'created' => gmdate('Y-m-d H:i:s'),\n\t\t\t'browser' => $_SERVER ['HTTP_USER_AGENT'] ?? null,\n\t\t\t'ip' => $this->userIP(),\n\t\t\t'expires' => gmdate('Y-m-d H:i:s', time() + (86400 * $days))\n\t\t];\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tokens]',\n\t\t\t\t\t$addToken\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->processQueries($response);\n\t\tif ($token) {\n\t\t\t$this->logger->debug('Token has been created');\n\t\t} else {\n\t\t\t$this->logger->warning('Token creation error');\n\t\t}\n\t\t$this->logger->debug('Token creation function has finished');\n\t\treturn $token->toString();\n\t}\n\n\tpublic function login($array)\n\t{\n\t\t// Grab username, Password & other optional items from api call\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$oAuth = $array['oAuth'] ?? null;\n\t\t$oAuthType = $array['oAuthType'] ?? null;\n\t\t$remember = $array['remember'] ?? null;\n\t\t$tfaCode = $array['tfaCode'] ?? null;\n\t\t$loginAttempts = $array['loginAttempts'] ?? null;\n\t\t$output = $array['output'] ?? null;\n\t\t$username = (strpos($this->config['authBackend'], 'emby') !== false) ? $username : strtolower($username);\n\t\t$days = (isset($remember)) ? $this->config['rememberMeDays'] : 1;\n\t\t// Set logger channel\n\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t$this->logger->debug('Starting login function');\n\t\t// Set  other variables\n\t\t$function = 'plugin_auth_' . $this->config['authBackend'];\n\t\t$authSuccess = false;\n\t\t$authProxy = false;\n\t\t$addEmailToAuthProxy = true;\n\t\t// Check Login attempts and kill if over limit\n\t\tif ($loginAttempts > $this->config['loginAttempts'] || isset($_COOKIE['lockout'])) {\n\t\t\t$this->coookieSeconds('set', 'lockout', $this->config['loginLockout'], $this->config['loginLockout']);\n\t\t\t$this->logger->warning('User is locked out');\n\t\t\t$this->setAPIResponse('error', 'User is locked out', 403);\n\t\t\treturn false;\n\t\t}\n\t\t// Check if Auth Proxy is enabled\n\t\tif ($this->config['authProxyEnabled'] && ($this->config['authProxyHeaderName'] !== '' || $this->config['authProxyHeaderNameEmail'] !== '') && $this->config['authProxyWhitelist'] !== '') {\n\t\t\tif (isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderName'])]) || isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderNameEmail'])])) {\n\t\t\t\t$usernameHeader = $this->getallheadersi()[strtolower($this->config['authProxyHeaderName'])] ?? null;\n\t\t\t\t$emailHeader = $this->getallheadersi()[strtolower($this->config['authProxyHeaderNameEmail'])] ?? null;\n\t\t\t\t$headerForLogin = $usernameHeader ?: ($emailHeader ?: null);\n\t\t\t\t$this->setLoggerChannel('Authentication', $headerForLogin);\n\t\t\t\t$this->logger->debug('Starting Auth Proxy verification');\n\t\t\t\t$whitelistRange = $this->analyzeIP($this->config['authProxyWhitelist']);\n\t\t\t\t$authProxy = $this->authProxyRangeCheck($whitelistRange['from'], $whitelistRange['to']);\n\t\t\t\t$username = ($authProxy) ? $headerForLogin : $username;\n\t\t\t\t$password = ($password == null) ? $this->random_ascii_string(10) : $password;\n\t\t\t\t$addEmailToAuthProxy = ($authProxy && $emailHeader) ? ['email' => $emailHeader] : true;\n\t\t\t\tif ($authProxy) {\n\t\t\t\t\t$this->logger->info('User has been verified using Auth Proxy');\n\t\t\t\t} else {\n\t\t\t\t\t$this->logger->warning('User has failed verification using Auth Proxy');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Check if Login method was an oAuth login\n\t\tif (!$oAuth) {\n\t\t\t$result = $this->getUserByUsernameAndEmail($username, $username);\n\t\t\t$result['password'] = $result['password'] ?? '';\n\t\t\t// Switch AuthType - internal - external - both\n\t\t\tswitch ($this->config['authType']) {\n\t\t\t\tcase 'external':\n\t\t\t\t\tif (method_exists($this, $function)) {\n\t\t\t\t\t\t$authSuccess = $this->$function($username, $password);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t/** @noinspection PhpMissingBreakStatementInspection */\n\t\t\t\tcase 'both':\n\t\t\t\t\tif (method_exists($this, $function)) {\n\t\t\t\t\t\t$authSuccess = $this->$function($username, $password);\n\t\t\t\t\t}\n\t\t\t\t// no break\n\t\t\t\tdefault: // Internal\n\t\t\t\t\tif (!$authSuccess) {\n\t\t\t\t\t\t// perform the internal authentication step\n\t\t\t\t\t\tif (password_verify($password, $result['password'])) {\n\t\t\t\t\t\t\t$this->logger->debug('User password has been verified');\n\t\t\t\t\t\t\t$authSuccess = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t$authSuccess = ($authProxy) ? $addEmailToAuthProxy : $authSuccess;\n\t\t} else {\n\t\t\t// Has oAuth Token!\n\t\t\tswitch ($oAuthType) {\n\t\t\t\tcase 'plex':\n\t\t\t\t\tif ($this->config['plexoAuth']) {\n\t\t\t\t\t\t$this->logger->debug('Starting Plex oAuth verification');\n\t\t\t\t\t\t$tokenInfo = $this->checkPlexToken($oAuth);\n\t\t\t\t\t\tif ($tokenInfo) {\n\t\t\t\t\t\t\t$authSuccess = [\n\t\t\t\t\t\t\t\t'username' => $tokenInfo['user']['username'],\n\t\t\t\t\t\t\t\t'email' => $tokenInfo['user']['email'],\n\t\t\t\t\t\t\t\t'image' => $tokenInfo['user']['thumb'],\n\t\t\t\t\t\t\t\t'token' => $tokenInfo['user']['authToken'],\n\t\t\t\t\t\t\t\t'oauth' => 'plex'\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t$this->logger->debug('User\\'s Plex Token has been verified');\n\t\t\t\t\t\t\t$this->coookie('set', 'oAuth', 'true', $this->config['rememberMeDays']);\n\t\t\t\t\t\t\t$authSuccess = ((!empty($this->config['plexAdmin']) && strtolower($this->config['plexAdmin']) == strtolower($tokenInfo['user']['username'])) || (!empty($this->config['plexAdmin']) && strtolower($this->config['plexAdmin']) == strtolower($tokenInfo['user']['email'])) || $this->checkPlexUser($tokenInfo['user']['username'])) ? $authSuccess : false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->logger->warning('User\\'s Plex Token has failed verification');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->logger->debug('Plex oAuth is not setup');\n\t\t\t\t\t\t$this->setAPIResponse('error', 'Plex oAuth is not setup', 422);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn ($output) ? 'No oAuthType defined' : 'error';\n\t\t\t}\n\t\t\t$result = ($authSuccess) ? $this->getUserByUsernameAndEmail($authSuccess['username'], $authSuccess['email']) : '';\n\t\t}\n\t\tif ($authSuccess) {\n\t\t\t// Make sure user exists in database\n\t\t\t$userExists = false;\n\t\t\t$passwordMatches = $oAuth || $authProxy;\n\t\t\t$token = (is_array($authSuccess) && isset($authSuccess['token']) ? $authSuccess['token'] : '');\n\t\t\tif (isset($result['username'])) {\n\t\t\t\t$userExists = true;\n\t\t\t\t$username = $result['username'];\n\t\t\t\tif ($passwordMatches == false) {\n\t\t\t\t\t$passwordMatches = password_verify($password, $result['password']);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($userExists) {\n\t\t\t\t//does org password need to be updated\n\t\t\t\tif (!$passwordMatches) {\n\t\t\t\t\t$this->updateUserPassword($password, $result['id']);\n\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t$this->logger->info('User Password updated from backend');\n\t\t\t\t}\n\t\t\t\tif ($token !== '') {\n\t\t\t\t\tif ($token !== $result['plex_token']) {\n\t\t\t\t\t\t$this->updateUserPlexToken($token, $result['id']);\n\t\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t\t$this->logger->info('User Plex Token updated from backend');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 2FA might go here\n\t\t\t\tif ($result['auth_service'] !== 'internal' && strpos($result['auth_service'], '::') !== false) {\n\t\t\t\t\t$tfaProceed = true;\n\t\t\t\t\t// Add check for local or not\n\t\t\t\t\tif ($this->config['ignoreTFALocal'] !== false) {\n\t\t\t\t\t\t$tfaProceed = !$this->isLocal();\n\t\t\t\t\t}\n\t\t\t\t\t// Is Plex Oauth?\n\t\t\t\t\tif ($this->config['ignoreTFAIfPlexOAuth'] !== false) {\n\t\t\t\t\t\tif (isset($authSuccess['oauth'])) {\n\t\t\t\t\t\t\tif ($authSuccess['oauth'] == 'plex') {\n\t\t\t\t\t\t\t\t$tfaProceed = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($tfaProceed) {\n\t\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t\t$this->logger->debug('Starting 2FA verification');\n\t\t\t\t\t\t$TFA = explode('::', $result['auth_service']);\n\t\t\t\t\t\t// Is code with login info?\n\t\t\t\t\t\tif ($tfaCode == '') {\n\t\t\t\t\t\t\t$this->logger->debug('Sending 2FA response to login UI');\n\t\t\t\t\t\t\t$this->setAPIResponse('warning', '2FA Code Needed', 422);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!$this->verify2FA($TFA[1], $tfaCode, $TFA[0])) {\n\t\t\t\t\t\t\t\t$this->logger->warning('Incorrect 2FA');\n\t\t\t\t\t\t\t\t$this->setAPIResponse('error', 'Wrong 2FA', 422);\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$this->logger->info('2FA verification passed');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// End 2FA\n\t\t\t\t// authentication passed - 1) mark active and update token\n\t\t\t\t$createToken = $this->createToken($result['username'], $result['email'], $days);\n\t\t\t\tif ($createToken) {\n\t\t\t\t\t$this->logger->info('User has logged in');\n\t\t\t\t\t$ssoUserObject = ($token !== '') ? $authSuccess : $result;\n\t\t\t\t\t$this->ssoCheck($ssoUserObject, $password, $token); //need to work on this\n\t\t\t\t\treturn ($output) ? array('name' => $this->cookieName, 'token' => (string)$createToken) : true;\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'Token creation error', 500);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create User\n\t\t\t\t$this->setLoggerChannel('Authentication', (is_array($authSuccess) && isset($authSuccess['username']) ? $authSuccess['username'] : $username));\n\t\t\t\t$this->logger->debug('Starting Registration function');\n\t\t\t\treturn $this->authRegister((is_array($authSuccess) && isset($authSuccess['username']) ? $authSuccess['username'] : $username), $password, (is_array($authSuccess) && isset($authSuccess['email']) ? $authSuccess['email'] : ''), $token);\n\t\t\t}\n\t\t} else {\n\t\t\t// authentication failed\n\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t$this->logger->warning('Wrong Password');\n\t\t\tif ($loginAttempts >= $this->config['loginAttempts']) {\n\t\t\t\t$this->logger->warning('User exceeded maximum login attempts');\n\t\t\t\t$this->coookieSeconds('set', 'lockout', $this->config['loginLockout'], $this->config['loginLockout']);\n\t\t\t\t$this->setAPIResponse('error', 'User is locked out', 403);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$this->logger->debug('User has not exceeded maximum login attempts');\n\t\t\t\t$this->setAPIResponse('error', 'User credentials incorrect', 401);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function logout()\n\t{\n\t\t$this->setLoggerChannel('Authentication');\n\t\t$this->logger->debug('Starting log out process');\n\t\t$this->logger->info('User has logged out');\n\t\t$this->coookie('delete', $this->cookieName);\n\t\t$this->coookie('delete', 'mpt');\n\t\t$this->coookie('delete', 'Auth');\n\t\t$this->coookie('delete', 'oAuth');\n\t\t$this->coookie('delete', 'connect.sid');\n\t\t$this->coookie('delete', 'petio_jwt');\n\t\t$this->clearTautulliTokens();\n\t\t$this->clearJellyfinTokens();\n\t\t$this->revokeTokenCurrentUser($this->user['token']);\n\t\t$this->clearKomgaToken();\n\t\t$this->refreshDeviceUUID();\n\t\t$this->logger->debug('Log out process has finished');\n\t\t$this->user = null;\n\t\treturn true;\n\t}\n\n\tpublic function recover($array)\n\t{\n\t\t$email = $array['email'] ?? null;\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$newPassword = $this->randString(10);\n\t\t$isUser = $this->getUserByEmail($email);\n\t\tif ($isUser) {\n\t\t\t$this->updateUserPassword($newPassword, $isUser['id']);\n\t\t\t$this->setAPIResponse('success', 'User password has been reset', 200);\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->info('User Management Function - User: ' . $isUser['username'] . '\\'s password was reset');\n\t\t\tif ($this->config['PHPMAILER-enabled']) {\n\t\t\t\t$PhpMailer = new PhpMailer();\n\t\t\t\t$emailTemplate = array(\n\t\t\t\t\t'type' => 'reset',\n\t\t\t\t\t'body' => $this->config['PHPMAILER-emailTemplateReset'],\n\t\t\t\t\t'subject' => $this->config['PHPMAILER-emailTemplateResetSubject'],\n\t\t\t\t\t'user' => $isUser['username'],\n\t\t\t\t\t'password' => $newPassword,\n\t\t\t\t\t'inviteCode' => null,\n\t\t\t\t);\n\t\t\t\t$emailTemplate = $PhpMailer->_phpMailerPluginEmailTemplate($emailTemplate);\n\t\t\t\t$sendEmail = array(\n\t\t\t\t\t'to' => $email,\n\t\t\t\t\t'user' => $isUser['username'],\n\t\t\t\t\t'subject' => $emailTemplate['subject'],\n\t\t\t\t\t'body' => $PhpMailer->_phpMailerPluginBuildEmail($emailTemplate),\n\t\t\t\t);\n\t\t\t\t$PhpMailer->_phpMailerPluginSendEmail($sendEmail);\n\t\t\t\t$this->setAPIResponse('success', 'User password has been reset and email has been sent', 200);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'User not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function register($array)\n\t{\n\t\t$email = $array['email'] ?? null;\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$registrationPassword = $array['registrationPassword'] ?? null;\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$registrationPassword) {\n\t\t\t$this->setAPIResponse('error', 'Registration Password was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$this->setLoggerChannel('User Registration');\n\t\tif ($registrationPassword == $this->decrypt($this->config['registrationPassword'])) {\n\t\t\t$this->logger->debug('Registration Password Verified');\n\t\t\tif ($this->createUser($username, $password, $email)) {\n\t\t\t\t$this->logger->info('A User has registered');\n\t\t\t\tif ($this->createToken($username, $email, $this->config['rememberMeDays'])) {\n\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t$this->logger->info('User has logged in');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Wrong Password');\n\t\t\t$this->setAPIResponse('error', 'Registration Password was incorrect', 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function authRegister($username, $password, $email, $token = null)\n\t{\n\t\t$this->setLoggerChannel('Authentication', $username);\n\t\tif ($this->config['authBackend'] !== '') {\n\t\t\t$this->ombiImport($this->config['authBackend']);\n\t\t}\n\t\t$this->ssoCheck($username, $password, $token);\n\t\tif ($token && (!$password || $password == '')) {\n\t\t\t$password = $this->random_ascii_string(10);\n\t\t}\n\t\tif ($this->createUser($username, $password, $email)) {\n\t\t\t$this->logger->info('A User has registered');\n\t\t\tif ($this->config['PHPMAILER-enabled'] && $email !== '') {\n\t\t\t\t$PhpMailer = new PhpMailer();\n\t\t\t\t$emailTemplate = array(\n\t\t\t\t\t'type' => 'registration',\n\t\t\t\t\t'body' => $this->config['PHPMAILER-emailTemplateRegisterUser'],\n\t\t\t\t\t'subject' => $this->config['PHPMAILER-emailTemplateRegisterUserSubject'],\n\t\t\t\t\t'user' => $username,\n\t\t\t\t\t'password' => null,\n\t\t\t\t\t'inviteCode' => null,\n\t\t\t\t);\n\t\t\t\t$emailTemplate = $PhpMailer->_phpMailerPluginEmailTemplate($emailTemplate);\n\t\t\t\t$sendEmail = array(\n\t\t\t\t\t'to' => $email,\n\t\t\t\t\t'user' => $username,\n\t\t\t\t\t'subject' => $emailTemplate['subject'],\n\t\t\t\t\t'body' => $PhpMailer->_phpMailerPluginBuildEmail($emailTemplate),\n\t\t\t\t);\n\t\t\t\t$PhpMailer->_phpMailerPluginSendEmail($sendEmail);\n\t\t\t}\n\t\t\tif ($this->createToken($username, $email, $this->config['rememberMeDays'])) {\n\t\t\t\t$this->logger->info('User has logged in');\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Registration error occurred');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function revokeTokenCurrentUser($token = null)\n\t{\n\t\tif ($token) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'DELETE FROM tokens WHERE token = ?',\n\t\t\t\t\t\t[$token]\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'DELETE FROM tokens WHERE user_id = ?',\n\t\t\t\t\t\t[$this->user['userID']]\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function revokeToken($token = null)\n\t{\n\t\tif (!$token) {\n\t\t\t$this->setAPIResponse('error', 'Token was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM tokens WHERE token = ?',\n\t\t\t\t\t[$token]\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse('success', 'Token revoked', 204);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function revokeTokenByIdCurrentUser($id = null)\n\t{\n\t\tif (!$id) {\n\t\t\t$this->setAPIResponse('error', 'Id was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM tokens WHERE id = ? AND user_id = ?',\n\t\t\t\t\t$id,\n\t\t\t\t\t$this->user['userID']\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse('success', 'Token revoked', 204);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateUserPassword($password, $id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['password' => password_hash($password, PASSWORD_BCRYPT)],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateUserPlexToken($token, $id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['plex_token' => $token],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserTabsAndCategories($type = null)\n\t{\n\t\tif (!$this->hasDB()) {\n\t\t\treturn false;\n\t\t}\n\t\t$sort = ($this->config['unsortedTabs'] == 'top') ? 'DESC' : 'ASC';\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM tabs WHERE `group_id` >= ? AND `group_id_min` <= ? AND `enabled` = 1 ORDER BY `order` ' . $sort,\n\t\t\t\t\t$this->user['groupID'],\n\t\t\t\t\t$this->user['groupID'],\n\t\t\t\t),\n\t\t\t\t'key' => 'tabs'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM tabs WHERE `add_to_admin` = 1 AND `enabled` = 1 ORDER BY `order` ' . $sort\n\t\t\t\t),\n\t\t\t\t'key' => 'tabs-admin'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM categories ORDER BY `order` ASC',\n\t\t\t\t),\n\t\t\t\t'key' => 'categories'\n\t\t\t),\n\t\t];\n\t\t$queries = $this->processQueries($response);\n\t\t$this->applyTabVariables($queries['tabs']);\n\t\tif ($this->qualifyRequest(1)) {\n\t\t\t$this->applyTabVariables($queries['tabs-admin']);\n\t\t\t$all['tabs'] = array_merge($queries['tabs'], $queries['tabs-admin']);\n\t\t\t$newArray = [];\n\t\t\t$ids = [];\n\t\t\tforeach ($all['tabs'] as $key => $line) {\n\t\t\t\tif (!in_array($line['id'], $ids)) {\n\t\t\t\t\t$ids[] = $line['id'];\n\t\t\t\t\t$newArray[$key] = $line;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$all['tabs'] = $newArray;\n\t\t\tif (count($all['tabs']) > 0) {\n\t\t\t\tusort($all['tabs'], function ($a, $b) {\n\t\t\t\t\tif ($this->config['unsortedTabs'] == 'top') {\n\t\t\t\t\t\treturn $b['order'] <=> $a['order'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn $a['order'] <=> $b['order'];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t$newArray = NULL;\n\t\t\t$ids = NULL;\n\t\t} else {\n\t\t\t$all['tabs'] = $queries['tabs'];\n\t\t}\n\t\tforeach ($all['tabs'] as $k => $v) {\n\t\t\t$v['url_local'] = $v['type'] !== 0 ? $this->checkTabURL($v['url_local']) : $v['url_local'];\n\t\t\t$v['url'] = $v['type'] !== 0 ? $this->checkTabURL($v['url']) : $v['url'];\n\t\t\t$v['access_url'] = (!empty($v['url_local']) && ($v['url_local'] !== null) && ($v['url_local'] !== 'null') && $this->isLocal() && $v['type'] !== 0) ? $v['url_local'] : $v['url'];\n\t\t}\n\t\t$count = array_map(function ($element) {\n\t\t\treturn $element['category_id'];\n\t\t}, $all['tabs']);\n\t\t$count = (array_count_values($count));\n\t\tforeach ($queries['categories'] as $k => $v) {\n\t\t\t$v['count'] = $count[$v['category_id']] ?? 0;\n\t\t}\n\t\t$all['categories'] = $queries['categories'];\n\t\tswitch ($type) {\n\t\t\tcase 'categories':\n\t\t\t\treturn $all['categories'];\n\t\t\tcase 'tabs':\n\t\t\t\treturn $all['tabs'];\n\t\t\tdefault:\n\t\t\t\treturn $all;\n\t\t}\n\t}\n\n\tpublic function checkTabURL($url = null)\n\t{\n\t\treturn $url !== '' && $url !== null & $url !== 'null' ? $this->qualifyURL($url, false, true) : '';\n\t}\n\n\tpublic function refreshList()\n\t{\n\t\t$searchTerm = \"Refresh\";\n\t\treturn array_filter($this->config, function ($k) use ($searchTerm) {\n\t\t\treturn stripos($k, $searchTerm) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t}\n\n\tpublic function homepageOrderList()\n\t{\n\t\t$searchTerm = \"homepageOrder\";\n\t\t$order = array_filter($this->config, function ($k) use ($searchTerm) {\n\t\t\treturn stripos($k, $searchTerm) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t\tasort($order);\n\t\treturn $order;\n\t}\n\n\tpublic function tautulliList()\n\t{\n\t\t$searchTerm = \"tautulli_token\";\n\t\treturn array_filter($this->config, function ($k) use ($searchTerm) {\n\t\t\treturn stripos($k, $searchTerm) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t}\n\n\tpublic function checkPlexAdminFilled()\n\t{\n\t\tif ($this->config['plexAdmin'] == '') {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif ((strpos($this->config['plexAdmin'], '@') !== false)) {\n\t\t\t\treturn 'email';\n\t\t\t} else {\n\t\t\t\treturn 'username';\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function organizrSpecialSettings()\n\t{\n\t\t// js activeInfo\n\t\treturn [\n\t\t\t'homepage' => [\n\t\t\t\t'refresh' => $this->refreshList(),\n\t\t\t\t'order' => $this->homepageOrderList(),\n\t\t\t\t'search' => [\n\t\t\t\t\t'enabled' => $this->qualifyRequest($this->config['mediaSearchAuth']) && $this->config['mediaSearch'] == true && $this->config['plexToken'],\n\t\t\t\t\t'type' => $this->config['mediaSearchType'],\n\t\t\t\t],\n\t\t\t\t'requests' => [\n\t\t\t\t\t'service' => $this->config['defaultRequestService'],\n\t\t\t\t],\n\t\t\t\t'ombi' => [\n\t\t\t\t\t'enabled' => $this->qualifyRequest($this->config['homepageOmbiAuth']) && $this->qualifyRequest($this->config['homepageOmbiRequestAuth']) && $this->config['homepageOmbiEnabled'] == true && $this->config['ssoOmbi'] && isset($_COOKIE['Auth']),\n\t\t\t\t\t'authView' => $this->qualifyRequest($this->config['homepageOmbiAuth']),\n\t\t\t\t\t'authRequest' => $this->qualifyRequest($this->config['homepageOmbiRequestAuth']),\n\t\t\t\t\t'sso' => (bool)$this->config['ssoOmbi'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['Auth']),\n\t\t\t\t\t'alias' => (bool)$this->config['ombiAlias'],\n\t\t\t\t\t'ombiDefaultFilterAvailable' => (bool)$this->config['ombiDefaultFilterAvailable'],\n\t\t\t\t\t'ombiDefaultFilterUnavailable' => (bool)$this->config['ombiDefaultFilterUnavailable'],\n\t\t\t\t\t'ombiDefaultFilterApproved' => (bool)$this->config['ombiDefaultFilterApproved'],\n\t\t\t\t\t'ombiDefaultFilterUnapproved' => (bool)$this->config['ombiDefaultFilterUnapproved'],\n\t\t\t\t\t'ombiDefaultFilterDenied' => (bool)$this->config['ombiDefaultFilterDenied']\n\t\t\t\t],\n\t\t\t\t'overseerr' => [\n\t\t\t\t\t'enabled' => $this->qualifyRequest($this->config['homepageOverseerrAuth']) && $this->qualifyRequest($this->config['homepageOverseerrRequestAuth']) && $this->config['homepageOverseerrEnabled'] == true && $this->config['ssoOverseerr'] && isset($_COOKIE['connect_sid']),\n\t\t\t\t\t'authView' => $this->qualifyRequest($this->config['homepageOverseerrAuth']),\n\t\t\t\t\t'authRequest' => $this->qualifyRequest($this->config['homepageOverseerrRequestAuth']),\n\t\t\t\t\t'sso' => (bool)$this->config['ssoOverseerr'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['connect_sid']),\n\t\t\t\t\t'userSelectTv' => (bool)$this->config['homepageOverseerrRequestAuth'] == 'user',\n\t\t\t\t\t'overseerrDefaultFilterAvailable' => (bool)$this->config['overseerrDefaultFilterAvailable'],\n\t\t\t\t\t'overseerrDefaultFilterUnavailable' => (bool)$this->config['overseerrDefaultFilterUnavailable'],\n\t\t\t\t\t'overseerrDefaultFilterApproved' => (bool)$this->config['overseerrDefaultFilterApproved'],\n\t\t\t\t\t'overseerrDefaultFilterUnapproved' => (bool)$this->config['overseerrDefaultFilterUnapproved'],\n\t\t\t\t\t'overseerrDefaultFilterDenied' => (bool)$this->config['overseerrDefaultFilterDenied']\n\t\t\t\t],\n\t\t\t\t'jackett' => [\n\t\t\t\t\t'homepageJackettBackholeDownload' => $this->config['homepageJackettBackholeDownload'] ? true : false\n\t\t\t\t],\n\t\t\t\t'options' => [\n\t\t\t\t\t'alternateHomepageHeaders' => $this->config['alternateHomepageHeaders'],\n\t\t\t\t\t'healthChecksTags' => $this->config['healthChecksTags'],\n\t\t\t\t\t'titles' => [\n\t\t\t\t\t\t'tautulli' => $this->config['tautulliHeader']\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'media' => [\n\t\t\t\t\t'jellyfin' => $this->config['homepageJellyfinInstead']\n\t\t\t\t]\n\t\t\t],\n\t\t\t'sso' => [\n\t\t\t\t'misc' => [\n\t\t\t\t\t'oAuthLogin' => isset($_COOKIE['oAuth']),\n\t\t\t\t\t'rememberMe' => $this->config['rememberMe'],\n\t\t\t\t\t'rememberMeDays' => $this->config['rememberMeDays']\n\t\t\t\t],\n\t\t\t\t'plex' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoPlex'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['mpt']),\n\t\t\t\t\t'machineID' => strlen($this->config['plexID']) == 40,\n\t\t\t\t\t'token' => $this->config['plexToken'] !== '',\n\t\t\t\t\t'plexAdmin' => $this->checkPlexAdminFilled(),\n\t\t\t\t\t'strict' => (bool)$this->config['plexStrictFriends'],\n\t\t\t\t\t'oAuthEnabled' => (bool)$this->config['plexoAuth'],\n\t\t\t\t\t'backend' => $this->config['authBackend'] == 'plex',\n\t\t\t\t],\n\t\t\t\t'tautulli' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoTautulli'],\n\t\t\t\t\t'cookie' => !empty($this->tautulliList()),\n\t\t\t\t\t'url' => ($this->config['tautulliURL'] !== '') ? $this->config['tautulliURL'] : false,\n\t\t\t\t],\n\t\t\t\t'overseerr' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoOverseerr'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['connect.sid']),\n\t\t\t\t\t'url' => ($this->config['overseerrURL'] !== '') ? $this->config['overseerrURL'] : false,\n\t\t\t\t\t'api' => $this->config['overseerrToken'] !== '',\n\t\t\t\t],\n\t\t\t\t'petio' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoPetio'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['petio_jwt']),\n\t\t\t\t\t'url' => ($this->config['petioURL'] !== '') ? $this->config['petioURL'] : false,\n\t\t\t\t\t'api' => $this->config['petioToken'] !== '',\n\t\t\t\t],\n\t\t\t\t'ombi' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoOmbi'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['Auth']),\n\t\t\t\t\t'url' => ($this->config['ombiURL'] !== '') ? $this->config['ombiURL'] : false,\n\t\t\t\t\t'api' => $this->config['ombiToken'] !== '',\n\t\t\t\t],\n\t\t\t\t'jellyfin' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoJellyfin'],\n\t\t\t\t\t'url' => ($this->config['jellyfinURL'] !== '') ? $this->config['jellyfinURL'] : false,\n\t\t\t\t\t'ssoUrl' => ($this->config['jellyfinSSOURL'] !== '') ? $this->config['jellyfinSSOURL'] : false,\n\t\t\t\t],\n\t\t\t\t'komga' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoKomga'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['komga_token']),\n\t\t\t\t\t'url' => ($this->config['komgaURL'] !== '') ? $this->config['komgaURL'] : false,\n\t\t\t\t]\n\t\t\t],\n\t\t\t'ping' => [\n\t\t\t\t'onlineSound' => $this->config['pingOnlineSound'],\n\t\t\t\t'offlineSound' => $this->config['pingOfflineSound'],\n\t\t\t\t'statusSounds' => $this->config['statusSounds'],\n\t\t\t\t'auth' => $this->config['pingAuth'],\n\t\t\t\t'authMessage' => $this->config['pingAuthMessage'],\n\t\t\t\t'authMs' => $this->config['pingAuthMs'],\n\t\t\t\t'ms' => $this->config['pingMs'],\n\t\t\t\t'adminRefresh' => $this->config['adminPingRefresh'],\n\t\t\t\t'everyoneRefresh' => $this->config['otherPingRefresh'],\n\t\t\t],\n\t\t\t'notifications' => [\n\t\t\t\t'backbone' => $this->config['notificationBackbone'],\n\t\t\t\t'position' => $this->config['notificationPosition']\n\t\t\t],\n\t\t\t'lockout' => [\n\t\t\t\t'enabled' => $this->config['lockoutSystem'],\n\t\t\t\t'timer' => $this->config['lockoutTimeout'],\n\t\t\t\t'minGroup' => $this->config['lockoutMinAuth'],\n\t\t\t\t'maxGroup' => $this->config['lockoutMaxAuth']\n\t\t\t],\n\t\t\t'user' => [\n\t\t\t\t'agent' => isset($_SERVER ['HTTP_USER_AGENT']) ? $_SERVER ['HTTP_USER_AGENT'] : null,\n\t\t\t\t'oAuthLogin' => isset($_COOKIE['oAuth']),\n\t\t\t\t'local' => $this->isLocal(),\n\t\t\t\t'ip' => $this->userIP()\n\t\t\t],\n\t\t\t'login' => [\n\t\t\t\t'rememberMe' => $this->config['rememberMe'],\n\t\t\t\t'rememberMeDays' => $this->config['rememberMeDays'],\n\t\t\t\t'wanDomain' => $this->config['wanDomain'],\n\t\t\t\t'localAddress' => $this->config['localAddress'],\n\t\t\t\t'enableLocalAddressForward' => $this->config['enableLocalAddressForward'],\n\t\t\t],\n\t\t\t'misc' => [\n\t\t\t\t'installedPlugins' => $this->qualifyRequest(1) ? $this->config['installedPlugins'] : '',\n\t\t\t\t'installedThemes' => $this->qualifyRequest(1) ? $this->config['installedThemes'] : '',\n\t\t\t\t'return' => $_SERVER['HTTP_REFERER'] ?? false,\n\t\t\t\t'authDebug' => $this->config['authDebug'],\n\t\t\t\t'minimalLoginScreen' => $this->config['minimalLoginScreen'],\n\t\t\t\t'unsortedTabs' => $this->config['unsortedTabs'],\n\t\t\t\t'authType' => $this->config['authType'],\n\t\t\t\t'authBackend' => $this->config['authBackend'],\n\t\t\t\t'newMessageSound' => (isset($this->config['CHAT-newMessageSound-include'])) ? $this->config['CHAT-newMessageSound-include'] : '',\n\t\t\t\t'uuid' => ($this->config['uuid']) ?? null,\n\t\t\t\t'docker' => $this->qualifyRequest(1) ? $this->docker : '',\n\t\t\t\t'githubCommit' => $this->qualifyRequest(1) ? $this->commit : '',\n\t\t\t\t'schema' => $this->qualifyRequest(1) ? $this->getSchema() : '',\n\t\t\t\t'debugArea' => $this->qualifyRequest($this->config['debugAreaAuth']),\n\t\t\t\t'debugErrors' => $this->config['debugErrors'],\n\t\t\t\t'sandbox' => $this->config['sandbox'],\n\t\t\t\t'expandCategoriesByDefault' => $this->config['expandCategoriesByDefault'],\n\t\t\t\t'autoCollapseCategories' => $this->config['autoCollapseCategories'],\n\t\t\t\t'autoExpandNavBar' => $this->config['autoExpandNavBar'],\n\t\t\t\t'sideMenuCollapsed' => $this->config['allowCollapsableSideMenu'] && $this->config['sideMenuCollapsed'],\n\t\t\t\t'collapseSideMenuOnClick' => $this->config['allowCollapsableSideMenu'] && $this->config['collapseSideMenuOnClick'],\n\t\t\t\t'authProxyOverrideLogout' => $this->config['authProxyOverrideLogout'],\n\t\t\t\t'authProxyLogoutURL' => $this->config['authProxyLogoutURL'],\n\t\t\t],\n\t\t\t'menuLink' => [\n\t\t\t\t'githubMenuLink' => $this->config['githubMenuLink'],\n\t\t\t\t'organizrSupportMenuLink' => $this->config['organizrSupportMenuLink'],\n\t\t\t\t'organizrDocsMenuLink' => $this->config['organizrDocsMenuLink'],\n\t\t\t\t'organizrSignoutMenuLink' => $this->config['organizrSignoutMenuLink'],\n\t\t\t\t'organizrFeatureRequestLink' => $this->config['organizrFeatureRequestLink']\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function checkLog($path)\n\t{\n\t\tif (file_exists($path)) {\n\t\t\tif (filesize($path) > 500000) {\n\t\t\t\trename($path, $path . '[' . date('Y-m-d') . '].json');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function writeLog($type = 'error', $message = null, $username = null)\n\t{\n\t\t$this->timeExecution = $this->timeExecution($this->timeExecution);\n\t\t$message = $message . ' [Execution Time: ' . $this->formatSeconds($this->timeExecution) . ']';\n\t\t$username = ($username) ? htmlspecialchars($username, ENT_QUOTES) : $this->user['username'] ?? 'SYSTEM';\n\t\tif ($this->checkLog($this->organizrLog)) {\n\t\t\t$getLog = str_replace(\"\\r\\ndate\", \"date\", file_get_contents($this->organizrLog));\n\t\t\t$gotLog = json_decode($getLog, true);\n\t\t}\n\t\t$logEntryFirst = array('logType' => 'organizr_log', 'log_items' => array(array('date' => date(\"Y-m-d H:i:s\"), 'utc_date' => $this->currentTime, 'type' => $type, 'username' => $username, 'ip' => $this->userIP(), 'message' => $message)));\n\t\t$logEntry = array('date' => date(\"Y-m-d H:i:s\"), 'utc_date' => $this->currentTime, 'type' => $type, 'username' => $username, 'ip' => $this->userIP(), 'message' => $message);\n\t\tif (isset($gotLog)) {\n\t\t\tarray_push($gotLog[\"log_items\"], $logEntry);\n\t\t\t$writeFailLog = str_replace(\"date\", \"\\r\\ndate\", json_encode($gotLog));\n\t\t} else {\n\t\t\t$writeFailLog = str_replace(\"date\", \"\\r\\ndate\", json_encode($logEntryFirst));\n\t\t}\n\t\tfile_put_contents($this->organizrLog, $writeFailLog);\n\t}\n\n\tpublic function isApprovedRequest($method, $data)\n\t{\n\t\t$requesterToken = $this->getallheadersi()['token'] ?? ($_GET['apikey'] ?? false);\n\t\t$apiKey = ($this->config['organizrAPI']) ?? null;\n\t\tif (isset($data['formKey'])) {\n\t\t\t$formKey = $data['formKey'];\n\t\t} elseif (isset($this->getallheadersi()['formkey'])) {\n\t\t\t$formKey = $this->getallheadersi()['formkey'];\n\t\t} else {\n\t\t\t$formKey = false;\n\t\t}\n\t\t// Check token or API key\n\t\t// If API key, return 0 for admin\n\t\tif (strlen($requesterToken) == 20 && $requesterToken == $apiKey) {\n\t\t\t//DO API CHECK\n\t\t\treturn true;\n\t\t} elseif ($method == 'POST') {\n\t\t\tif ($this->checkFormKey($formKey)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t$this->logger->warning('Unable to authenticate Form Key: ' . $formKey);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function checkFormKey($formKey = '')\n\t{\n\t\treturn password_verify(substr($this->config['organizrHash'], 2, 10), $formKey);\n\t}\n\n\tpublic function buildHomepage()\n\t{\n\t\t$homepageOrder = $this->homepageOrderList();\n\t\t$homepageBuilt = '';\n\t\tforeach ($homepageOrder as $key => $value) {\n\t\t\t//new way\n\t\t\tif (method_exists($this, $key)) {\n\t\t\t\t$homepageBuilt .= $this->$key();\n\t\t\t} elseif (strpos($key, 'homepageOrdercustomhtml') !== false) {\n\t\t\t\t$iteration = substr($key, -2);\n\t\t\t\t$homepageBuilt .= $this->homepageOrdercustomhtml($iteration);\n\t\t\t} else {\n\t\t\t\t$homepageBuilt .= '<div id=\"' . $key . '\"></div>';\n\t\t\t}\n\t\t\t//old way\n\t\t\t//$homepageBuilt .= $this->buildHomepageItem($key);\n\t\t}\n\t\treturn $homepageBuilt;\n\t}\n\n\tpublic function buildHomepageSettings()\n\t{\n\t\t$homepageOrder = $this->homepageOrderList();\n\t\t$homepageList = '<div class=\"col-lg-12\"><h4 lang=\"en\">Drag Homepage Items to Order Them</h4></div><div id=\"homepage-items-sort\" class=\"external-events\">';\n\t\t$inputList = '<form id=\"homepage-values\" class=\"row\">';\n\t\tforeach ($homepageOrder as $key => $val) {\n\t\t\tswitch ($key) {\n\t\t\t\tcase 'homepageOrdercustomhtml01':\n\t\t\t\tcase 'homepageOrdercustomhtml02':\n\t\t\t\tcase 'homepageOrdercustomhtml03':\n\t\t\t\tcase 'homepageOrdercustomhtml04':\n\t\t\t\tcase 'homepageOrdercustomhtml05':\n\t\t\t\tcase 'homepageOrdercustomhtml06':\n\t\t\t\tcase 'homepageOrdercustomhtml07':\n\t\t\t\tcase 'homepageOrdercustomhtml08':\n\t\t\t\t\t$iteration = substr($key, -2);\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/HTML5.png';\n\t\t\t\t\tif (!$this->config['homepageCustomHTML' . $iteration . 'Enabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdertransmission':\n\t\t\t\t\t$class = 'bg-transmission';\n\t\t\t\t\t$image = 'plugins/images/tabs/transmission.png';\n\t\t\t\t\tif (!$this->config['homepageTransmissionEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdernzbget':\n\t\t\t\t\t$class = 'bg-nzbget';\n\t\t\t\t\t$image = 'plugins/images/tabs/nzbget.png';\n\t\t\t\t\tif (!$this->config['homepageNzbgetEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderjdownloader':\n\t\t\t\t\t$class = 'bg-sab';\n\t\t\t\t\t$image = 'plugins/images/tabs/jdownloader.png';\n\t\t\t\t\tif (!$this->config['homepageJdownloaderEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdersabnzbd':\n\t\t\t\t\t$class = 'bg-sab';\n\t\t\t\t\t$image = 'plugins/images/tabs/sabnzbd.png';\n\t\t\t\t\tif (!$this->config['homepageSabnzbdEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderdeluge':\n\t\t\t\t\t$class = 'bg-deluge';\n\t\t\t\t\t$image = 'plugins/images/tabs/deluge.png';\n\t\t\t\t\tif (!$this->config['homepageDelugeEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderqBittorrent':\n\t\t\t\t\t$class = 'bg-qbit';\n\t\t\t\t\t$image = 'plugins/images/tabs/qBittorrent.png';\n\t\t\t\t\tif (!$this->config['homepageqBittorrentEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderuTorrent':\n\t\t\t\t\t$class = 'bg-qbit';\n\t\t\t\t\t$image = 'plugins/images/tabs/utorrent.png';\n\t\t\t\t\tif (!$this->config['homepageuTorrentEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderrTorrent':\n\t\t\t\t\t$class = 'bg-qbit';\n\t\t\t\t\t$image = 'plugins/images/tabs/rTorrent.png';\n\t\t\t\t\tif (!$this->config['homepagerTorrentEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderplexnowplaying':\n\t\t\t\tcase 'homepageOrderplexrecent':\n\t\t\t\tcase 'homepageOrderplexplaylist':\n\t\t\t\t\t$class = 'bg-plex';\n\t\t\t\t\t$image = 'plugins/images/tabs/plex.png';\n\t\t\t\t\tif (!$this->config['homepagePlexEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderembynowplaying':\n\t\t\t\tcase 'homepageOrderembyrecent':\n\t\t\t\t\t$class = 'bg-emby';\n\t\t\t\t\t$image = 'plugins/images/tabs/emby.png';\n\t\t\t\t\tif (!$this->config['homepageEmbyEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderjellyfinnowplaying':\n\t\t\t\tcase 'homepageOrderjellyfinrecent':\n\t\t\t\t\t$class = 'bg-jellyfin';\n\t\t\t\t\t$image = 'plugins/images/tabs/jellyfin.png';\n\t\t\t\t\tif (!$this->config['homepageJellyfinEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderombi':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/ombi.png';\n\t\t\t\t\tif (!$this->config['homepageOmbiEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderoverseerr':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/overseerr.png';\n\t\t\t\t\tif (!$this->config['homepageOverseerrEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderDonate':\n\t\t\t\t\t$class = 'bg-primary';\n\t\t\t\t\t$image = 'plugins/images/tabs/donate.png';\n\t\t\t\t\tif (!$this->config['homepageDonateEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdercalendar':\n\t\t\t\t\t$class = 'bg-primary';\n\t\t\t\t\t$image = 'plugins/images/tabs/calendar.png';\n\t\t\t\t\tif (!$this->config['homepageCalendarEnabled'] && !$this->config['homepageSonarrEnabled'] && !$this->config['homepageRadarrEnabled'] && !$this->config['homepageSickrageEnabled'] && !$this->config['homepageCouchpotatoEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderdownloader':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/downloader.png';\n\t\t\t\t\tif (!$this->config['jdownloaderCombine'] && !$this->config['sabnzbdCombine'] && !$this->config['nzbgetCombine'] && !$this->config['rTorrentCombine'] && !$this->config['delugeCombine'] && !$this->config['transmissionCombine'] && !$this->config['qBittorrentCombine'] && !$this->config['uTorrentCombine']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderhealthchecks':\n\t\t\t\t\t$class = 'bg-healthchecks';\n\t\t\t\t\t$image = 'plugins/images/tabs/healthchecks.png';\n\t\t\t\t\tif (!$this->config['homepageHealthChecksEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderunifi':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/ubnt.png';\n\t\t\t\t\tif (!$this->config['homepageUnifiEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdertautulli':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/tautulli.png';\n\t\t\t\t\tif (!$this->config['homepageTautulliEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderPihole':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/pihole.png';\n\t\t\t\t\tif (!$this->config['homepagePiholeEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderMonitorr':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/monitorr.png';\n\t\t\t\t\tif (!$this->config['homepageMonitorrEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderWeatherAndAir':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/wind.png';\n\t\t\t\t\tif (!$this->config['homepageWeatherAndAirEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderSpeedtest':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/speedtest-icon.png';\n\t\t\t\t\tif (!$this->config['homepageSpeedtestEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderNetdata':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/netdata.png';\n\t\t\t\t\tif (!$this->config['homepageNetdataEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderOctoprint':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/octoprint.png';\n\t\t\t\t\tif (!$this->config['homepageOctoprintEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderSonarrQueue':\n\t\t\t\t\t$class = 'bg-sonarr';\n\t\t\t\t\t$image = 'plugins/images/tabs/sonarr.png';\n\t\t\t\t\tif (!$this->config['homepageSonarrQueueEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderRadarrQueue':\n\t\t\t\t\t$class = 'bg-radarr';\n\t\t\t\t\t$image = 'plugins/images/tabs/radarr.png';\n\t\t\t\t\tif (!$this->config['homepageRadarrQueueEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderJackett':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/jackett.png';\n\t\t\t\t\tif (!$this->config['homepageJackettEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderBookmarks':\n\t\t\t\t\t$class = 'bg-bookmarks';\n\t\t\t\t\t$image = 'plugins/images/bookmark.png';\n\t\t\t\t\tif (!$this->config['homepageBookmarksEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$class = 'blue-bg';\n\t\t\t\t\t$image = '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$homepageList .= '\n\t\t<div class=\"col-md-3 col-xs-12 sort-homepage m-t-10 hvr-grow clearfix\">\n\t\t\t<div class=\"homepage-drag fc-event ' . $class . ' lazyload\"  data-src=\"' . $image . '\">\n\t\t\t\t<span class=\"ordinal-position text-uppercase badge bg-org homepage-number\" data-link=\"' . $key . '\" style=\"float:left;width: 30px;\">' . $val . '</span>\n\t\t\t\t<span class=\"homepage-text\">&nbsp; ' . strtoupper(substr($key, 13)) . '</span>\n\n\t\t\t</div>\n\t\t</div>\n\t\t';\n\t\t\t$inputList .= '<input type=\"hidden\" name=\"' . $key . '\">';\n\t\t}\n\t\t$homepageList .= '</div>';\n\t\t$inputList .= '</form>';\n\t\treturn $homepageList . $inputList;\n\t}\n\n\tpublic function setGroupOptionsVariable()\n\t{\n\t\t$this->groupOptions = $this->groupSelect();\n\t}\n\n\tpublic function getSettingsHomepageItem($item)\n\t{\n\t\t$items = $this->getSettingsHomepage();\n\t\tforeach ($items as $k => $v) {\n\t\t\tif (strtolower($v['name']) === strtolower($item)) {\n\t\t\t\t$functionName = $v['settingsArray'];\n\t\t\t\treturn $this->$functionName();\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('error', 'Homepage item was not found', 404);\n\t\treturn null;\n\t}\n\n\tpublic function getSettingsHomepageItemDebug($service)\n\t{\n\t\t$service = $this->getSettingsHomepageItem($service);\n\t\tif ($service) {\n\t\t\t$debug = [];\n\t\t\tforeach ($service['settings'] as $category => $items) {\n\t\t\t\tif ($category !== 'About' && $category !== 'Test Connection') {\n\t\t\t\t\tforeach ($items as $item) {\n\t\t\t\t\t\tif ($item['type'] !== 'html' && $item['type'] !== 'blank' && $item['type'] !== 'button') {\n\t\t\t\t\t\t\tif ((stripos($item['name'], 'token') !== false) || (stripos($item['name'], 'key') !== false) || (stripos($item['name'], 'password'))) {\n\t\t\t\t\t\t\t\tif ($item['value'] !== '') {\n\t\t\t\t\t\t\t\t\t$item['value'] = '***redacted***';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$debug[$category][$item['name']] = $item['value'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $debug;\n\t\t}\n\t\t$this->setAPIResponse('error', 'Homepage item was not found', 404);\n\t\treturn null;\n\t}\n\n\tpublic function getSettingsHomepage()\n\t{\n\t\t$this->setGroupOptionsVariable();\n\t\treturn $this->getHomepageSettingsCombined();\n\t}\n\n\tpublic function isTabNameTaken($name, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM tabs WHERE `name` LIKE ? AND `id` != ?',\n\t\t\t\t\t\t$name,\n\t\t\t\t\t\t$id\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM tabs WHERE `name` LIKE ?',\n\t\t\t\t\t\t$name\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function isCategoryNameTaken($name, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM categories WHERE `category` LIKE ? AND `id` != ?',\n\t\t\t\t\t\t$name,\n\t\t\t\t\t\t$id\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM categories WHERE `category` LIKE ?',\n\t\t\t\t\t\t$name\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function isGroupNameTaken($name, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM groups WHERE `group` LIKE ? AND `id` != ?',\n\t\t\t\t\t\t$name,\n\t\t\t\t\t\t$id\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM groups WHERE `group` LIKE ?',\n\t\t\t\t\t\t$name\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getTableColumns($table)\n\t{\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$query = 'PRAGMA table_info(?)';\n\t\t} else {\n\t\t\t$query = 'DESCRIBE %n';\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => [\n\t\t\t\t\t$query, $table\n\t\t\t\t]\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getTableColumnsFormatted($table)\n\t{\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$name = 'name';\n\t\t} else {\n\t\t\t$name = 'Field';\n\t\t}\n\t\t$columns = $this->getTableColumns($table);\n\t\tif ($columns) {\n\t\t\t$columnsFormatted = [];\n\t\t\tforeach ($columns as $k => $v) {\n\t\t\t\t$columnsFormatted[$v[$name]] = $v;\n\t\t\t}\n\t\t\treturn $columnsFormatted;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getTabById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM tabs WHERE `id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getTabGroupByTabName($tab)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT group_id FROM tabs WHERE name LIKE %~like~',\n\t\t\t\t\t$tab\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\treturn $query ? $query['group_id'] : 0;\n\t}\n\n\tpublic function getCategoryById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM categories WHERE `id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getGroupUserCountById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT count(username) AS count FROM groups INNER JOIN users ON users.group_id = groups.group_id AND groups.id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getGroupById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups WHERE `id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getGroupByGroupId($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups WHERE `group_id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultGroup()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultGroupId()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `group_id` FROM groups WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultCategory()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM categories WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultCategoryId()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `category_id` FROM categories WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextTabOrder()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `order` from tabs ORDER BY `order` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextCategoryOrder()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `order` from categories ORDER BY `order` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextGroupOrder()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `group_id` from groups WHERE `group_id` != \"999\" ORDER BY `group_id` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextCategoryId()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `category_id` from categories ORDER BY `category_id` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function clearTabDefault()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE tabs SET `default` = 0'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function clearCategoryDefault()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE categories SET `default` = 0'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function clearGroupDefault()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE groups SET `default` = 0'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function checkKeys($tabInfo, $newData)\n\t{\n\t\tforeach ($newData as $k => $v) {\n\t\t\tif (!array_key_exists($k, $tabInfo)) {\n\t\t\t\tunset($newData[$k]);\n\t\t\t}\n\t\t}\n\t\treturn $newData;\n\t}\n\n\tpublic function getTabByIdCheckUser($id)\n\t{\n\t\t$tabInfo = $this->getTabById($id);\n\t\tif ($tabInfo) {\n\t\t\tif ($this->qualifyRequest($tabInfo['group_id'], true)) {\n\t\t\t\treturn $tabInfo;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function deleteTab($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM tabs WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$tabInfo = $this->getTabById($id);\n\t\tif ($tabInfo) {\n\t\t\t$this->setLoggerChannel('Tab Management');\n\t\t\t$this->logger->debug('Deleted Tab [' . $tabInfo['name'] . ']');\n\t\t\t$this->setAPIResponse('success', 'Tab deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addTab($array)\n\t{\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$array = $this->checkKeys($this->getTableColumnsFormatted('tabs'), $array);\n\t\t$array['group_id'] = ($array['group_id']) ?? $this->getDefaultGroupId();\n\t\t$array['category_id'] = ($array['category_id']) ?? $this->getDefaultCategoryId();\n\t\t$array['enabled'] = ($array['enabled']) ?? 0;\n\t\t$array['default'] = ($array['default']) ?? 0;\n\t\t$array['type'] = ($array['type']) ?? 1;\n\t\t$array['order'] = ($array['order']) ?? $this->getNextTabOrder() + 1;\n\t\tif (array_key_exists('name', $array)) {\n\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n\t\t\tif ($this->isTabNameTaken($array['name'])) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Tab name was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!array_key_exists('url', $array) && !array_key_exists('url_local', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Tab url or url_local was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!array_key_exists('image', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Tab image was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tabs]',\n\t\t\t\t\t$array\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Tab added');\n\t\t$this->setLoggerChannel('Tab Management');\n\t\t$this->logger->debug('Added Tab for [' . $array['name'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateTab($id, $array)\n\t{\n\t\tif (!$id || $id == '') {\n\t\t\t$this->setAPIResponse('error', 'id was not set', 422);\n\t\t\treturn null;\n\t\t}\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$tabInfo = $this->getTabById($id);\n\t\tif ($tabInfo) {\n\t\t\t$array = $this->checkKeys($tabInfo, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'No tab info found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('name', $array)) {\n\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n\t\t\tif ($this->isTabNameTaken($array['name'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('default', $array)) {\n\t\t\tif ($array['default']) {\n\t\t\t\t$this->clearTabDefault();\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('group_id', $array)) {\n\t\t\t$groupCheck = (array_key_exists('group_id_min', $array)) ? $array['group_id_min'] : $tabInfo['group_id_min'];\n\t\t\tif ($array['group_id'] < $groupCheck) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $tabInfo['name'] . ' cannot have a lower Group Id Max than Group Id Min', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('group_id_min', $array)) {\n\t\t\t$groupCheck = (array_key_exists('group_id', $array)) ? $array['group_id'] : $tabInfo['group_id'];\n\t\t\tif ($array['group_id_min'] > $groupCheck) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $tabInfo['name'] . ' cannot have a higher Group Id Min than Group Id Max', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE tabs SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Tab info updated');\n\t\t$this->setLoggerChannel('Tab Management');\n\t\t$this->logger->debug('Edited Tab Info for [' . $tabInfo['name'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateTabOrder($array)\n\t{\n\t\tif (count($array) >= 1) {\n\t\t\tforeach ($array as $tab) {\n\t\t\t\tif (count($tab) !== 2) {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$id = $tab['id'] ?? null;\n\t\t\t\t$order = $tab['order'] ?? null;\n\t\t\t\tif ($id && $order) {\n\t\t\t\t\t$response = [\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t\t\t'UPDATE tabs set `order` = ? WHERE `id` = ?',\n\t\t\t\t\t\t\t\t$order,\n\t\t\t\t\t\t\t\t$id\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t\t$this->processQueries($response);\n\t\t\t\t\t$this->setAPIResponse(null, 'Tab Order updated');\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'data is empty or not in array', 422);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addCategory($array)\n\t{\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$array = $this->checkKeys($this->getTableColumnsFormatted('categories'), $array);\n\t\t$array['default'] = ($array['default']) ?? 0;\n\t\t$array['order'] = ($array['order']) ?? $this->getNextCategoryOrder() + 1;\n\t\t$array['category_id'] = ($array['category_id']) ?? $this->getNextCategoryId() + 1;\n\t\tif (array_key_exists('category', $array)) {\n\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n\t\t\tif ($this->isCategoryNameTaken($array['category'])) {\n\t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Category name was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!array_key_exists('image', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Category image was not supplied', 422);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [categories]',\n\t\t\t\t\t$array\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Category added');\n\t\t$this->setLoggerChannel('Category Management');\n\t\t$this->logger->debug('Added Category for [' . $array['category'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateCategory($id, $array)\n\t{\n\t\tif (!$id || $id == '') {\n\t\t\t$this->setAPIResponse('error', 'id was not set', 422);\n\t\t\treturn null;\n\t\t}\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$categoryInfo = $this->getCategoryById($id);\n\t\tif ($categoryInfo) {\n\t\t\t$array = $this->checkKeys($categoryInfo, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'No category info found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('category', $array)) {\n\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n\t\t\tif ($this->isCategoryNameTaken($array['category'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n\t\t}\n\t\tif (array_key_exists('default', $array)) {\n\t\t\tif ($array['default']) {\n\t\t\t\t$this->clearCategoryDefault();\n\t\t\t}\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE categories SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Category info updated');\n\t\t$this->setLoggerChannel('Category Management');\n\t\t$this->logger->debug('Edited Category [' . $categoryInfo['category'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateCategoryOrder($array)\n\t{\n\t\tif (count($array) >= 1) {\n\t\t\tforeach ($array as $category) {\n\t\t\t\tif (count($category) !== 2) {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$id = $category['id'] ?? null;\n\t\t\t\t$order = $category['order'] ?? null;\n\t\t\t\tif ($id && $order) {\n\t\t\t\t\t$response = [\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t\t\t'UPDATE categories set `order` = ? WHERE `id` = ?',\n\t\t\t\t\t\t\t\t$order,\n\t\t\t\t\t\t\t\t$id\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t\t$this->processQueries($response);\n\t\t\t\t\t$this->setAPIResponse(null, 'Category Order updated');\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'data is empty or not in array', 422);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function deleteCategory($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM categories WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$categoryInfo = $this->getCategoryById($id);\n\t\tif ($categoryInfo) {\n\t\t\t$this->setLoggerChannel('Category Management');\n\t\t\t$this->logger->debug('Deleted Category [' . $categoryInfo['category'] . ']');\n\t\t\t$this->setAPIResponse('success', 'Category deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function inconspicuous(): string\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->config['easterEggs']) {\n\t\t\t\treturn '\n\t\t\t\t<div class=\"org-rox-trigger\">\n\t\t\t\t\t<div class=\"org-rox\">\n\t\t\t\t\t\t<div class=\"hair\"></div>\n\t\t\t\t\t\t<div class=\"head\">\n\t\t\t\t\t\t\t<div class=\"ear left\"></div>\n\t\t\t\t\t\t\t<div class=\"ear right\"></div>\n\t\t\t\t\t\t\t<div class=\"face\">\n\t\t\t\t\t\t\t\t<div class=\"eye left\"></div>\n\t\t\t\t\t\t\t\t<div class=\"eye right\"></div>\n\t\t\t\t\t\t\t\t<div class=\"nose\"></div>\n\t\t\t\t\t\t\t\t<div class=\"mouth\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>';\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic function marketplaceFileListFormat($files, $folder, $type)\n\t{\n\t\tforeach ($files as $k => $v) {\n\t\t\t$splitFiles = explode('|', $v);\n\t\t\t$prePath = (strlen($k) !== 1) ? $k . '/' : $k;\n\t\t\tforeach ($splitFiles as $file) {\n\t\t\t\t$filesList[] = array(\n\t\t\t\t\t'fileName' => $file,\n\t\t\t\t\t'path' => $prePath,\n\t\t\t\t\t'githubPath' => 'https://raw.githubusercontent.com/causefx/Organizr/v2-' . $type . '/' . $folder . $prePath . $file\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn $filesList;\n\t}\n\n\tpublic function removeTheme($theme)\n\t{\n\t\t$this->setLoggerChannel('Theme Marketplace');\n\t\t$theme = $this->cleanClassName($theme, '_');\n\t\t$array = $this->getThemesMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access theme marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!isset($arrayLower[$theme])) {\n\t\t\t$this->setAPIResponse('error', 'Theme does not exist in marketplace', 404);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($theme, array_keys($arrayLower));\n\t\t\t$theme = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$theme];\n\t\t$themeDir = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . $array['project_folder'] . DIRECTORY_SEPARATOR;\n\t\t$dirExists = file_exists($themeDir);\n\t\tif ($dirExists) {\n\t\t\tif (!$this->rrmdir($themeDir)) {\n\t\t\t\t$this->logger->info('Remove File Failed  for: ' . $array['project_folder']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Theme is not installed', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$this->updateInstalledThemes('uninstall', $theme, $array);\n\t\t$this->setAPIResponse('success', 'Theme removed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function installTheme($theme)\n\t{\n\t\t$this->setLoggerChannel('Theme Marketplace');\n\t\t$theme = $this->cleanClassName($theme, '_');\n\t\t$array = $this->getThemesMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access theme marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!isset($arrayLower[$theme])) {\n\t\t\t$this->setAPIResponse('error', 'Theme [' . $theme . '] does not exist in marketplace', 404, $arrayLower);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($theme, array_keys($arrayLower));\n\t\t\t$theme = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$theme];\n\t\t// Check Version of Organizr against minimum version needed\n\t\t$compare = new Composer\\Semver\\Comparator;\n\t\tif ($compare->lessThan($this->version, $array['minimum_organizr_version'])) {\n\t\t\t$this->logger->warning('Minimum Organizr version needed: ' . $array['minimum_organizr_version']);\n\t\t\t$this->setResponse(500, 'Minimum Organizr version needed: ' . $array['minimum_organizr_version'] . ' | Current Version: ' . $this->version);\n\t\t\treturn true;\n\t\t}\n\t\t// It is okay to user Plugin function - we should rename it so it is universal\n\t\t$files = $this->getPluginFilesFromRepo($theme, $array);\n\t\tif ($files) {\n\t\t\t$downloadList = $this->themeFileListFormat($files, $array['project_folder']);\n\t\t} else {\n\t\t\t$this->logger->warning('File list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for theme', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$downloadList) {\n\t\t\t$this->logger->warning('Setting download list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for theme', 409);\n\t\t\treturn false;\n\t\t}\n\t\tforeach ($downloadList as $k => $v) {\n\t\t\t$file = array(\n\t\t\t\t'from' => $v['githubPath'],\n\t\t\t\t'to' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'] . $v['fileName']),\n\t\t\t\t'path' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'])\n\t\t\t);\n\t\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes');\n\t\t\tif (!$this->downloadFileToPath($file['from'], $file['to'], $file['path'])) {\n\t\t\t\t$this->setLoggerChannel('Theme Marketplace');\n\t\t\t\t$this->logger->warning('Downloaded File Failed  for: ' . $v['githubPath']);\n\t\t\t\t$this->setAPIResponse('error', 'Theme download failed', 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$this->updateInstalledThemes('install', $theme, $array);\n\t\t$this->setAPIResponse('success', 'Theme installed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function themeFileListFormat($files, $folder)\n\t{\n\t\t$filesList = false;\n\t\tforeach ($files as $k => $v) {\n\t\t\tif ($v['type'] !== 'dir') {\n\t\t\t\t$filesList[] = array(\n\t\t\t\t\t'fileName' => $v['name'],\n\t\t\t\t\t'path' => $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . $folder . DIRECTORY_SEPARATOR . str_replace($v['name'], '', $v['path']),\n\t\t\t\t\t'githubPath' => $v['download_url']\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . $folder);\n\t\treturn $filesList;\n\t}\n\n\tpublic function pluginFileListFormat($files, $folder)\n\t{\n\t\t$filesList = false;\n\t\tforeach ($files as $k => $v) {\n\t\t\tif ($v['type'] !== 'dir') {\n\t\t\t\t$filesList[] = array(\n\t\t\t\t\t'fileName' => $v['name'],\n\t\t\t\t\t'path' => $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $folder . DIRECTORY_SEPARATOR . str_replace($v['name'], '', $v['path']),\n\t\t\t\t\t'githubPath' => $v['download_url']\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $folder);\n\t\treturn $filesList;\n\t}\n\n\tpublic function getPluginFilesFromGithub($plugin = 'test')\n\t{\n\t\t$url = 'https://api.github.com/repos/causefx/organizr/contents/' . $plugin . '?ref=v2-plugins';\n\t\t$options = array('verify' => false);\n\t\t$response = Requests::get($url, array(), $options);\n\t\tif ($response->success) {\n\t\t\treturn json_decode($response->body, true);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getBranchFromGithub($repo)\n\t{\n\t\t$url = 'https://api.github.com/repos/' . $repo;\n\t\t$options = array('verify' => false);\n\t\t$response = Requests::get($url, $this->setGithubAccessToken(), $options);\n\t\ttry {\n\t\t\tif ($response->success) {\n\t\t\t\t$github = json_decode($response->body, true);\n\t\t\t\treturn $github['default_branch'] ?? null;\n\t\t\t} else {\n\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t$this->logger->warning('Plugin failed to get branch from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->logger->error($e);\n\t\t\t$this->setAPIResponse('error', $e->getMessage(), 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getFilesFromGithub($repo, $branch)\n\t{\n\t\tif (!$repo || !$branch) {\n\t\t\treturn false;\n\t\t}\n\t\t$url = 'https://api.github.com/repos/' . $repo . '/git/trees/' . $branch . '?recursive=1';\n\t\t$options = array('verify' => false);\n\t\t$response = Requests::get($url, $this->setGithubAccessToken(), $options);\n\t\ttry {\n\t\t\tif ($response->success) {\n\t\t\t\t$github = json_decode($response->body, true);\n\t\t\t\treturn is_array($github) ? $github : null;\n\t\t\t} else {\n\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t$this->logger->warning('Plugin failed to get branch from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->logger->error($e);\n\t\t\t$this->setAPIResponse('error', $e->getMessage(), 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function formatFilesFromGithub($files, $repo, $branch, $folder)\n\t{\n\t\tif (!$files || !$repo || !$branch || !$folder) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isset($files['tree'])) {\n\t\t\t$fileList = [];\n\t\t\tforeach ($files['tree'] as $k => $v) {\n\t\t\t\tif ($v['type'] !== 'tree') {\n\t\t\t\t\t$fileInfo = pathinfo($v['path']);\n\t\t\t\t\t$v['name'] = $fileInfo['basename'];\n\t\t\t\t\t$v['download_url'] = 'https://raw.githubusercontent.com/' . $repo . '/' . $branch . '/' . $v['path'];\n\t\t\t\t\tif ($folder == 'root') {\n\t\t\t\t\t\t$fileList[] = $v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stripos($v['path'], $folder) !== false) {\n\t\t\t\t\t\t\t$v['path'] = (substr($v['path'], 0, strlen($folder)) == $folder) ? substr($v['path'], (strlen($folder) + 1)) : $v['path'];\n\t\t\t\t\t\t\t$fileList[] = $v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $fileList;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getPluginFilesFromRepo($plugin, $pluginDetails)\n\t{\n\t\tif (stripos($pluginDetails['repo'], 'github.com') !== false) {\n\t\t\t$repo = explode('https://github.com/', $pluginDetails['repo']);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\t$branch = $this->getBranchFromGithub($repo[1]);\n\t\tif ($branch) {\n\t\t\treturn $this->formatFilesFromGithub($this->getFilesFromGithub($repo[1], $branch), $repo[1], $branch, $pluginDetails['github_folder']);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function installPlugin($plugin)\n\t{\n\t\t$this->setLoggerChannel('Plugin Marketplace');\n\t\t$plugin = $this->reverseCleanClassName($plugin);\n\t\t$array = $this->getPluginsMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access plugin marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$arrayLower[$plugin]) {\n\t\t\t$this->setAPIResponse('error', 'Plugin does not exist in marketplace', 404);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($plugin, array_keys($arrayLower));\n\t\t\t$plugin = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$plugin];\n\t\t// Check Version of Organizr against minimum version needed\n\t\t$compare = new Composer\\Semver\\Comparator;\n\t\tif ($compare->lessThan($this->version, $array['minimum_organizr_version'])) {\n\t\t\t$this->logger->warning('Minimum Organizr version needed: ' . $array['minimum_organizr_version']);\n\t\t\t$this->setResponse(500, 'Minimum Organizr version needed: ' . $array['minimum_organizr_version'] . ' | Current Version: ' . $this->version);\n\t\t\treturn true;\n\t\t}\n\t\t$files = $this->getPluginFilesFromRepo($plugin, $array);\n\t\tif ($files) {\n\t\t\t$downloadList = $this->pluginFileListFormat($files, $array['project_folder']);\n\t\t} else {\n\t\t\t$this->logger->warning('File list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for plugin', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$downloadList) {\n\t\t\t$this->logger->warning('Setting download list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for plugin', 409);\n\t\t\treturn false;\n\t\t}\n\t\tforeach ($downloadList as $k => $v) {\n\t\t\t$file = array(\n\t\t\t\t'from' => $v['githubPath'],\n\t\t\t\t'to' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'] . $v['fileName']),\n\t\t\t\t'path' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'])\n\t\t\t);\n\t\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins');\n\t\t\tif (!$this->downloadFileToPath($file['from'], $file['to'], $file['path'])) {\n\t\t\t\t$this->setLoggerChannel('Plugin Marketplace');\n\t\t\t\t$this->logger->warning('Downloaded File Failed  for: ' . $v['githubPath']);\n\t\t\t\t$this->setAPIResponse('error', 'Plugin download failed', 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$this->updateInstalledPlugins('install', $plugin, $array);\n\t\t$this->setAPIResponse('success', 'Plugin installed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function removePlugin($plugin)\n\t{\n\t\t$this->setLoggerChannel('Plugin Marketplace');\n\t\t$plugin = $this->reverseCleanClassName($plugin);\n\t\t$array = $this->getPluginsMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access plugin marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$arrayLower[$plugin]) {\n\t\t\t$this->setAPIResponse('error', 'Plugin does not exist in marketplace', 404);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($plugin, array_keys($arrayLower));\n\t\t\t$plugin = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$plugin];\n\t\t$pluginDir = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $array['project_folder'] . DIRECTORY_SEPARATOR;\n\t\t$dirExists = file_exists($pluginDir);\n\t\tif ($dirExists) {\n\t\t\tif (!$this->rrmdir($pluginDir)) {\n\t\t\t\t$this->logger->info('Remove File Failed  for: ' . $array['project_folder']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Plugin is not installed', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$this->updateInstalledPlugins('uninstall', $plugin, $array);\n\t\t$this->setAPIResponse('success', 'Plugin removed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function updateInstalledPlugins($action, $plugin, $pluginDetails)\n\t{\n\t\tif (!$action || !$plugin || !$pluginDetails) {\n\t\t\treturn false;\n\t\t}\n\t\t$config = $this->config['installedPlugins'];\n\t\t$config = is_array($config) ? $config : [];\n\t\tswitch ($action) {\n\t\t\tcase 'install':\n\t\t\tcase 'update':\n\t\t\t\t$update[$plugin] = [\n\t\t\t\t\t'name' => $plugin,\n\t\t\t\t\t'version' => $pluginDetails['version'],\n\t\t\t\t\t'repo' => $pluginDetails['repo']\n\t\t\t\t];\n\t\t\t\t$config = array_merge($config, $update);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunset($config[$plugin]);\n\t\t\t\tbreak;\n\t\t}\n\t\t$this->updateConfig(['installedPlugins' => $config]);\n\t}\n\n\tpublic function updateInstalledThemes($action, $theme, $themeDetails)\n\t{\n\t\tif (!$action || !$theme || !$themeDetails) {\n\t\t\treturn false;\n\t\t}\n\t\t$config = $this->config['installedThemes'];\n\t\t$config = is_array($config) ? $config : [];\n\t\tswitch ($action) {\n\t\t\tcase 'install':\n\t\t\tcase 'update':\n\t\t\t\t$update[$theme] = [\n\t\t\t\t\t'name' => $theme,\n\t\t\t\t\t'version' => $themeDetails['version'],\n\t\t\t\t\t'repo' => $themeDetails['repo'],\n\t\t\t\t\t'path' => 'data/themes/' . $themeDetails['project_folder']\n\t\t\t\t];\n\t\t\t\t$config = array_merge($config, $update);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunset($config[$theme]);\n\t\t\t\tbreak;\n\t\t}\n\t\t$this->updateConfig(['installedThemes' => $config]);\n\t}\n\n\tpublic function getThemesGithub()\n\t{\n\t\t$url = 'https://raw.githubusercontent.com/causefx/Organizr/v2-themes/themes.json';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\t$response = Requests::get($url, array(), $options);\n\t\tif ($response->success) {\n\t\t\treturn json_decode($response->body, true);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getPluginsGithub()\n\t{\n\t\t$url = 'https://raw.githubusercontent.com/causefx/Organizr/v2-plugins/plugins.json';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\ttry {\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\treturn json_decode($response->body, true);\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getPluginsMarketplace()\n\t{\n\t\t$plugins = $this->getPluginsGithubCombined();\n\t\tforeach ($plugins as $pluginName => $pluginDetails) {\n\t\t\t$plugins[$pluginName]['installed'] = (isset($this->config['installedPlugins'][$pluginName]));\n\t\t\t$plugins[$pluginName]['installed_version'] = $this->config['installedPlugins'][$pluginName]['version'] ?? null;\n\t\t\t$plugins[$pluginName]['needs_update'] = ($plugins[$pluginName]['installed'] && ($plugins[$pluginName]['installed_version'] !== $plugins[$pluginName]['version']));\n\t\t\t$plugins[$pluginName]['status'] = $this->getPluginStatus($plugins[$pluginName]);\n\t\t}\n\t\treturn $plugins;\n\t}\n\n\tpublic function getThemesMarketplace()\n\t{\n\t\t$themes = $this->getThemesGithubCombined();\n\t\tforeach ($themes as $themeName => $themeDetails) {\n\t\t\t$themes[$themeName]['installed'] = (isset($this->config['installedThemes'][$themeName]));\n\t\t\t$themes[$themeName]['installed_version'] = $this->config['installedThemes'][$themeName]['version'] ?? null;\n\t\t\t$themes[$themeName]['needs_update'] = ($themes[$themeName]['installed'] && ($themes[$themeName]['installed_version'] !== $themes[$themeName]['version']));\n\t\t\t$themes[$themeName]['status'] = $this->getPluginStatus($themes[$themeName]);\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function getThemesGithubCombined()\n\t{\n\t\t// Organizr Repo\n\t\t$urls = [$this->getMarketplaceJSONFromRepo('https://github.com/Organizr/Organizr-Themes')];\n\t\tforeach (explode(',', $this->config['externalThemeMarketplaceRepos']) as $repo) {\n\t\t\t$urls[] = $this->getMarketplaceJSONFromRepo($repo);\n\t\t}\n\t\t$themes = [];\n\t\tforeach ($urls as $repo) {\n\t\t\t$options = ($this->localURL($repo)) ? array('verify' => false) : array();\n\t\t\ttry {\n\t\t\t\t$response = Requests::get($repo, array(), $options);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$themes = array_merge($themes, json_decode($response->body, true));\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('Themes');\n\t\t\t\t\t$this->logger->warning('Getting Marketplace items from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t//return false;\n\t\t\t}\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function getPluginStatus($pluginDetails)\n\t{\n\t\tif ($pluginDetails['needs_update']) {\n\t\t\treturn 'Update Available';\n\t\t} elseif ($pluginDetails['installed']) {\n\t\t\treturn 'Up to date';\n\t\t} else {\n\t\t\treturn 'Not Installed';\n\t\t}\n\t}\n\n\tpublic function getPluginsGithubCombined()\n\t{\n\t\t// Organizr Repo\n\t\t$urls = [$this->getMarketplaceJSONFromRepo('https://github.com/Organizr/Organizr-Plugins')];\n\t\tforeach (explode(',', $this->config['externalPluginMarketplaceRepos']) as $repo) {\n\t\t\t$urls[] = $this->getMarketplaceJSONFromRepo($repo);\n\t\t}\n\t\t$plugins = [];\n\t\tforeach ($urls as $repo) {\n\t\t\t$options = ($this->localURL($repo)) ? array('verify' => false) : array();\n\t\t\ttry {\n\t\t\t\t$response = Requests::get($repo, array(), $options);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$plugins = array_merge($plugins, json_decode($response->body, true));\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t\t$this->logger->warning('Getting Marketplace items from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t//return false;\n\t\t\t}\n\t\t}\n\t\treturn $plugins;\n\t}\n\n\tpublic function getMarketplaceJSONFromRepo($url)\n\t{\n\t\tif (stripos($url, '.json') !== false) {\n\t\t\treturn $url;\n\t\t} elseif (stripos($url, 'github.com') !== false) {\n\t\t\t$repo = explode('https://github.com/', $url);\n\t\t\t$newURL = 'https://api.github.com/repos/' . $repo[1] . '/contents';\n\t\t\t$options = ($this->localURL($newURL)) ? array('verify' => false) : array();\n\t\t\ttry {\n\t\t\t\t$response = Requests::get($newURL, $this->setGithubAccessToken(), $options);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$jsonFiles = json_decode($response->body, true);\n\t\t\t\t\tforeach ($jsonFiles as $file) {\n\t\t\t\t\t\tif (stripos($file['name'], '.json') !== false) {\n\t\t\t\t\t\t\treturn $file['download_url'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t\t$this->logger->warning('Getting Marketplace JSON from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function setGithubAccessToken()\n\t{\n\t\treturn ($this->config['githubAccessToken'] !== '') ? ['Authorization' => 'token ' . $this->config['githubAccessToken']] : [];\n\t}\n\n\tpublic function formatGithubAccessToken()\n\t{\n\t\t$accessToken = $this->setGithubAccessToken();\n\t\tif (count($accessToken) >= 1) {\n\t\t\treturn key($accessToken) . ': ' . $accessToken[key($accessToken)];\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic function getOpenCollectiveBackers()\n\t{\n\t\t$url = 'https://opencollective.com/organizr/members/users.json?limit=100&offset=0';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\ttry {\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\t$api = json_decode($response->body, true);\n\t\t\t\tforeach ($api as $k => $backer) {\n\t\t\t\t\t$api[$k] = array_merge($api[$k], ['sortName' => strtolower($backer['name'])]);\n\t\t\t\t}\n\t\t\t\t$this->setAPIResponse('success', '', 200, $api);\n\t\t\t\treturn $api;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t\t$this->setAPIResponse('error', 'Error connecting to Open Collective', 409);\n\t\treturn false;\n\t}\n\n\tpublic function getGithubSponsors()\n\t{\n\t\t$url = 'https://github.com/sponsors/causefx';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\t$response = Requests::get($url, array(), $options);\n\t\tif ($response->success) {\n\t\t\t$sponsors = [];\n\t\t\t$dom = new PHPHtmlParser\\Dom;\n\t\t\ttry {\n\t\t\t\t$dom->loadStr($response->body);\n\t\t\t\t$contents = $dom->find('#sponsors .clearfix div');\n\t\t\t\tforeach ($contents as $content) {\n\t\t\t\t\t$html = $content->innerHtml;\n\t\t\t\t\tpreg_match('/(@[a-zA-Z])\\w+/', $html, $username);\n\t\t\t\t\tpreg_match('/(?i)\\b((?:https?:\\/\\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\"\"\\'\\']))/', $html, $image);\n\t\t\t\t\tif (isset($image[0]) && isset($username[0])) {\n\t\t\t\t\t\t$sponsors[] = [\n\t\t\t\t\t\t\t'name' => str_replace('@', '', $username[0]),\n\t\t\t\t\t\t\t'sortName' => str_replace('@', '', strtolower($username[0])),\n\t\t\t\t\t\t\t'image' => str_replace('s=60', 's=200', $image[0]),\n\t\t\t\t\t\t\t'isActive' => true,\n\t\t\t\t\t\t\t'type' => 'USER',\n\t\t\t\t\t\t\t'role' => 'BACKER'\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->setAPIResponse('success', '', 200, $sponsors);\n\t\t\t\treturn $sponsors;\n\t\t\t} catch (\\PHPHtmlParser\\Exceptions\\ChildNotFoundException | \\PHPHtmlParser\\Exceptions\\CircularException | \\PHPHtmlParser\\Exceptions\\LogicalException | \\PHPHtmlParser\\Exceptions\\StrictException | \\PHPHtmlParser\\Exceptions\\ContentLengthException | \\PHPHtmlParser\\Exceptions\\NotLoadedException $e) {\n\t\t\t\t$this->setAPIResponse('error', 'Error connecting to Github', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('error', 'Error connecting to Github', 409);\n\t\treturn false;\n\t}\n\n\tpublic function getAllSponsors()\n\t{\n\t\t$sponsors = [];\n\t\t$list = [\n\t\t\t'openCollective' => $this->getOpenCollectiveBackers(),\n\t\t\t'github' => $this->getGithubSponsors()\n\t\t];\n\t\tforeach ($list as $k => $sponsor) {\n\t\t\tif ($sponsor) {\n\t\t\t\t$sponsors = array_merge($sponsor, $sponsors);\n\t\t\t}\n\t\t}\n\t\tif ($sponsors) {\n\t\t\tusort($sponsors, function ($a, $b) {\n\t\t\t\treturn $a['sortName'] <=> $b['sortName'];\n\t\t\t});\n\t\t}\n\t\t$this->setAPIResponse('success', '', 200, $sponsors);\n\t\treturn $sponsors;\n\t}\n\n\tpublic function getOrganizrSmtpFromAPI()\n\t{\n\t\t$url = 'https://api.organizr.app/?cmd=smtp';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\ttry {\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\treturn json_decode($response->body, true);\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function saveOrganizrSmtpFromAPI()\n\t{\n\t\t$api = $this->getOrganizrSmtpFromAPI();\n\t\tif ($api) {\n\t\t\t$this->updateConfigItems($api['response']['data']);\n\t\t\t$this->setAPIResponse(null, 'SMTP activated with Organizr SMTP account');\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function guestHash($start, $end)\n\t{\n\t\t$ip = $this->userIP();\n\t\t$ip = md5($ip);\n\t\treturn substr($ip, $start, $end);\n\t}\n\n\tpublic function rrmdir($dir)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\tif (is_dir($dir)) {\n\t\t\t$files = scandir($dir);\n\t\t\tforeach ($files as $file) {\n\t\t\t\tif ($file != \".\" && $file != \"..\") {\n\t\t\t\t\t$this->rrmdir(\"$dir/$file\");\n\t\t\t\t}\n\t\t\t}\n\t\t\trmdir($dir);\n\t\t} elseif (file_exists($dir)) {\n\t\t\tunlink($dir);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function rcopy($src, $dst)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\t$src = $this->cleanPath($src);\n\t\t$dst = $this->cleanPath($dst);\n\t\tif (is_dir($src)) {\n\t\t\tif (!file_exists($dst)) : mkdir($dst);\n\t\t\tendif;\n\t\t\t$files = scandir($src);\n\t\t\tforeach ($files as $file) {\n\t\t\t\tif ($file != \".\" && $file != \"..\") {\n\t\t\t\t\t$this->rcopy(\"$src/$file\", \"$dst/$file\");\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (file_exists($src)) {\n\t\t\tcopy($src, $dst);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function unzipFile($zipFile)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\t$zip = new ZipArchive;\n\t\t$extractPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . \"upgrade/\";\n\t\t$this->setLoggerChannel('File Management');\n\t\tif ($zip->open($extractPath . $zipFile) != \"true\") {\n\t\t\t$this->logger->warning('organizr could not unzip upgrade.zip');\n\t\t} else {\n\t\t\t$this->logger->debug('organizr unzipped upgrade.zip');\n\t\t}\n\t\t/* Extract Zip File */\n\t\t$zip->extractTo($extractPath);\n\t\t$zip->close();\n\t\treturn true;\n\t}\n\n\tpublic function downloadFile($url, $path)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\t$folderPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . \"upgrade\" . DIRECTORY_SEPARATOR;\n\t\t$this->setLoggerChannel('File Management');\n\t\tif (!file_exists($folderPath)) {\n\t\t\tif (@!mkdir($folderPath)) {\n\t\t\t\t$this->logger->warning('Folder Creation failed');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$newfname = $folderPath . $path;\n\t\t$context = stream_context_create(\n\t\t\tarray(\n\t\t\t\t'ssl' => array(\n\t\t\t\t\t'verify_peer' => true,\n\t\t\t\t\t'cafile' => $this->getCert()\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\t$file = fopen($url, 'rb', false, $context);\n\t\tif ($file) {\n\t\t\t$newf = fopen($newfname, 'wb');\n\t\t\tif ($newf) {\n\t\t\t\twhile (!feof($file)) {\n\t\t\t\t\tfwrite($newf, fread($file, 1024 * 8), 1024 * 8);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download ' . $url);\n\t\t\treturn false;\n\t\t}\n\t\tif ($file) {\n\t\t\tfclose($file);\n\t\t\t$this->logger->debug('Organizr finished downloading the github zip file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download the github zip file');\n\t\t\treturn false;\n\t\t}\n\t\tif ($newf) {\n\t\t\tfclose($newf);\n\t\t\t$this->logger->debug('Organizr created upgrade zip file from github zip file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not create upgrade zip file from github zip file');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function downloadFileToPath($from, $to, $path)\n\t{\n\t\tif (((stripos($from, 'api.github.com') !== false) || (stripos($from, 'raw.githubusercontent.com') !== false)) && $this->config['githubAccessToken'] !== '') {\n\t\t\t$context = stream_context_create(\n\t\t\t\tarray(\n\t\t\t\t\t'ssl' => array(\n\t\t\t\t\t\t'verify_peer' => false,\n\t\t\t\t\t\t'cafile' => $this->getCert()\n\t\t\t\t\t),\n\t\t\t\t\t'http' => array(\n\t\t\t\t\t\t'method' => 'GET',\n\t\t\t\t\t\t'header' => $this->formatGithubAccessToken()\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\t$context = stream_context_create([]);\n\t\t}\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\n\t\t$this->makeDir($path);\n\t\t$file = fopen($from, 'rb', false, $context);\n\t\tif ($file) {\n\t\t\t$newf = fopen($to, 'wb', false, $context);\n\t\t\tif ($newf) {\n\t\t\t\twhile (!feof($file)) {\n\t\t\t\t\tfwrite($newf, fread($file, 1024 * 8), 1024 * 8);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download file');\n\t\t}\n\t\tif ($file) {\n\t\t\tfclose($file);\n\t\t\t$this->logger->debug('Organizr finished downloading the file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download file');\n\t\t}\n\t\tif ($newf) {\n\t\t\tfclose($newf);\n\t\t\t$this->logger->debug('Organizr saved and/or moved the file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not save and/or move the file');\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function getAllUsers($includeGroups = false)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users'\n\t\t\t\t),\n\t\t\t\t'key' => 'users'\n\t\t\t),\n\t\t];\n\t\t$groups = array(\n\t\t\t'function' => 'fetchAll',\n\t\t\t'query' => array(\n\t\t\t\t'SELECT * FROM groups ORDER BY group_id ASC'\n\t\t\t),\n\t\t\t'key' => 'groups'\n\t\t);\n\t\t$addGroups = (isset($_GET['includeGroups']) || $includeGroups) ?? false;\n\t\tif ($addGroups) {\n\t\t\tarray_push($response, $groups);\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getAllGroups()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups ORDER BY group_id ASC'\n\t\t\t\t),\n\t\t\t\t'key' => 'groups'\n\t\t\t),\n\t\t];\n\t\t$users = array(\n\t\t\t'function' => 'fetchAll',\n\t\t\t'query' => array(\n\t\t\t\t'SELECT * FROM users'\n\t\t\t),\n\t\t\t'key' => 'users'\n\t\t);\n\t\t$addUsers = (isset($_GET['includeUsers'])) ?? false;\n\t\tif ($addUsers) {\n\t\t\tarray_push($response, $users);\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function importUsers($array)\n\t{\n\t\t$imported = 0;\n\t\tif ($array) {\n\t\t\tforeach ($array as $user) {\n\t\t\t\t$password = $this->random_ascii_string(30);\n\t\t\t\tif ($user['username'] !== '' && $user['email'] !== '' && $password !== '') {\n\t\t\t\t\t$newUser = $this->createUser($user['username'], $password, $user['email']);\n\t\t\t\t\tif (!$newUser) {\n\t\t\t\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t\t\t\t$this->logger->warning('An error occurred during user import');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$imported++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('success', 'Imported ' . $imported . ' users', 200);\n\t\treturn true;\n\t}\n\n\tpublic function importUsersType($type)\n\t{\n\t\tif ($type !== '') {\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'plex':\n\t\t\t\t\treturn $this->importUsers($this->allPlexUsers(true));\n\t\t\t\tcase 'jellyfin':\n\t\t\t\t\treturn $this->importUsers($this->allJellyfinUsers(true));\n\t\t\t\tcase 'emby':\n\t\t\t\t\treturn $this->importUsers($this->allEmbyUsers(true));\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function allPlexUsers($newOnly = false, $friendsOnly = false)\n\t{\n\t\ttry {\n\t\t\tif (!empty($this->config['plexToken'])) {\n\t\t\t\t$url = 'https://plex.tv/api/users';\n\t\t\t\t$headers = array(\n\t\t\t\t\t'X-Plex-Token' => $this->config['plexToken'],\n\t\t\t\t);\n\t\t\t\t$response = Requests::get($url, $headers);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\tlibxml_use_internal_errors(true);\n\t\t\t\t\t$userXML = simplexml_load_string($response->body);\n\t\t\t\t\tif (is_array($userXML) || is_object($userXML)) {\n\t\t\t\t\t\t$results = array();\n\t\t\t\t\t\tforeach ($userXML as $child) {\n\t\t\t\t\t\t\tif (((string)$child['restricted'] == '0')) {\n\t\t\t\t\t\t\t\tif ($newOnly) {\n\t\t\t\t\t\t\t\t\t$taken = $this->usernameTaken((string)$child['username'], (string)$child['email']);\n\t\t\t\t\t\t\t\t\tif (!$taken) {\n\t\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['username'],\n\t\t\t\t\t\t\t\t\t\t\t'email' => (string)$child['email'],\n\t\t\t\t\t\t\t\t\t\t\t'id' => (string)$child['id'],\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} elseif ($friendsOnly) {\n\t\t\t\t\t\t\t\t\t$machineMatches = false;\n\t\t\t\t\t\t\t\t\tforeach ($child->Server as $server) {\n\t\t\t\t\t\t\t\t\t\tif ((string)$server['machineIdentifier'] == $this->config['plexID']) {\n\t\t\t\t\t\t\t\t\t\t\t$machineMatches = true;\n\t\t\t\t\t\t\t\t\t\t\t$shareId = $server['id'];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ($machineMatches) {\n\t\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['username'],\n\t\t\t\t\t\t\t\t\t\t\t'email' => (string)$child['email'],\n\t\t\t\t\t\t\t\t\t\t\t'id' => (string)$child['id'],\n\t\t\t\t\t\t\t\t\t\t\t'shareId' => (string)$shareId\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['username'],\n\t\t\t\t\t\t\t\t\t\t'email' => (string)$child['email'],\n\t\t\t\t\t\t\t\t\t\t'id' => (string)$child['id'],\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function allJellyfinUsers($newOnly = false)\n\t{\n\t\ttry {\n\t\t\tif (!empty($this->config['jellyfinURL']) && !empty($this->config['jellyfinToken'])) {\n\t\t\t\t$url = $this->qualifyURL($this->config['jellyfinURL']) . '/Users?api_key=' . $this->config['jellyfinToken'];\n\t\t\t\t$headers = array();\n\t\t\t\t$response = Requests::get($url, $headers);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$users = json_decode($response->body, true);\n\t\t\t\t\tif (is_array($users) || is_object($users)) {\n\t\t\t\t\t\t$results = array();\n\t\t\t\t\t\tforeach ($users as $child) {\n\t\t\t\t\t\t\t// Jellyfin doesn't list emails for some reason\n\t\t\t\t\t\t\t$email = $this->random_ascii_string(10) . '@placeholder.eml';\n\t\t\t\t\t\t\tif ($newOnly) {\n\t\t\t\t\t\t\t\t$taken = $this->usernameTaken((string)$child['Name'], $email);\n\t\t\t\t\t\t\t\tif (!$taken) {\n\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t\t'email' => $email\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function allEmbyUsers($newOnly = false)\n\t{\n\t\ttry {\n\t\t\tif (!empty($this->config['embyURL']) && !empty($this->config['embyToken'])) {\n\t\t\t\t$url = $this->qualifyURL($this->config['embyURL']) . '/Users?api_key=' . $this->config['embyToken'];\n\t\t\t\t$headers = array();\n\t\t\t\t$response = Requests::get($url, $headers);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$users = json_decode($response->body, true);\n\t\t\t\t\tif (is_array($users) || is_object($users)) {\n\t\t\t\t\t\t$results = array();\n\t\t\t\t\t\tforeach ($users as $child) {\n\t\t\t\t\t\t\t// Emby doesn't list emails for some reason\n\t\t\t\t\t\t\t$email = $this->random_ascii_string(10) . '@placeholder.eml';\n\t\t\t\t\t\t\tif ($newOnly) {\n\t\t\t\t\t\t\t\t$taken = $this->usernameTaken((string)$child['Name'], $email);\n\t\t\t\t\t\t\t\tif (!$taken) {\n\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t\t'email' => $email\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function validateEmail($email)\n\t{\n\t\treturn filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n\t}\n\n\tpublic function sanitizeEmail($email)\n\t{\n\t\treturn filter_var(trim($email), FILTER_SANITIZE_EMAIL);\n\t}\n\n\tpublic function sanitizeUserString($string)\n\t{\n\t\treturn htmlspecialchars(trim($string));\n\t}\n\n\tpublic function updateUser($id, $array)\n\t{\n\t\tif (!$id) {\n\t\t\t$this->setAPIResponse('error', 'Id was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif ((int)$id !== $this->user['userID']) {\n\t\t\tif (!$this->qualifyRequest('1', true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$user = $this->getUserById($id);\n\t\tif ($user) {\n\t\t\t$array = $this->checkKeys($user, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'User was not found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif ($user['group_id'] == 0 && $this->user['groupID'] !== 0) {\n\t\t\t$this->setAPIResponse('error', 'Cannot update admin unless you are admin', 401);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('username', $array)) {\n\t\t\tif ($array['username'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Username was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['username'] = $this->sanitizeUserString($array['username']);\n\t\t\tif ($this->usernameTaken($array['username'], $array['username'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Username: ' . $array['username'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('email', $array)) {\n\t\t\tif ($array['email'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->validateEmail($array['email'])) {\n\t\t\t\t$array['email'] = $this->sanitizeEmail($array['email']);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $array['email']]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->usernameTaken($array['email'], $array['email'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Email: ' . $array['email'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('group_id', $array)) {\n\t\t\tif ($array['group_id'] == '') {\n\t\t\t\t$array['group_id'] = 0;\n\t\t\t\t//$this->setAPIResponse('error', 'group_id was set but empty', 409);\n\t\t\t\t//return false;\n\t\t\t}\n\t\t\tif (!$this->qualifyRequest('1', false)) {\n\t\t\t\t$this->setAPIResponse('error', 'Cannot change your own group_id', 401);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (($id == $this->user['userID']) && $this->user['groupID'] == 0) {\n\t\t\t\t$array['group_id'] = 0;\n\t\t\t}\n\t\t\tif (($id == $this->user['userID']) && ($array['group_id'] == 0 && $this->user['groupID'] !== 0)) {\n\t\t\t\t$this->setAPIResponse('error', 'Only admins can make others admins', 401);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['group'] = $this->getGroupByGroupId($array['group_id'])['group'];\n\t\t\tif (!$array['group']) {\n\t\t\t\t$this->setAPIResponse('error', 'group_id does not exist', 404);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('locked', $array)) {\n\t\t\t//$this->setAPIResponse('error', 'Cannot use endpoint to unlock or lock user - please use /users/{id}/lock', 409);\n\t\t\t//return false;\n\t\t}\n\t\tif (array_key_exists('password', $array)) {\n\t\t\tif ($array['password'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Password was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['password'] = password_hash($array['password'], PASSWORD_BCRYPT);\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n\t\t}\n\t\tif (array_key_exists('register_date', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Cannot update register date', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'User info updated');\n\t\t$this->setLoggerChannel('User Management');\n\t\t$this->logger->info('Updated User Info for [' . $user['username'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function deleteUser($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM users WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$userInfo = $this->getUserById($id);\n\t\tif ($id == $this->user['userID']) {\n\t\t\t$this->setAPIResponse('error', 'Cannot delete your own user', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($userInfo) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->info('Deleted User [' . $userInfo['username'] . ']');\n\t\t\t$this->setAPIResponse('success', 'User deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addUser($array)\n\t{\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$email = $array['email'] ?? null;\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username was not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($username == '') {\n\t\t\t$this->setResponse(409, 'Username was set but empty');\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$username = $this->sanitizeUserString($username);\n\t\t}\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password was not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email was set not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($email == '') {\n\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->validateEmail($email)) {\n\t\t\t$email = $this->sanitizeEmail($email);\n\t\t} else {\n\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $email]);\n\t\t\treturn false;\n\t\t}\n\t\t$this->setLoggerChannel('User Management');\n\t\tif ($this->createUser($username, $password, $email)) {\n\t\t\t$this->logger->info('Account created for [' . $username . ']');\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->logger->warning('An error occurred');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function createUser($username, $password, $email = null)\n\t{\n\t\t$username = $username ?? null;\n\t\t$password = $password ?? null;\n\t\t$email = ($email) ? $email : $this->random_ascii_string(10) . '@placeholder.eml';\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$username = $this->sanitizeUserString($username);\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($email == '') {\n\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->validateEmail($email)) {\n\t\t\t$email = $this->sanitizeEmail($email);\n\t\t} else {\n\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $email]);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->usernameTaken($username, $email)) {\n\t\t\t$this->setAPIResponse('error', 'Username: ' . $username . ' or Email: ' . $email . ' is already taken', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$defaults = $this->getDefaultGroup();\n\t\t$userInfo = [\n\t\t\t'username' => $username,\n\t\t\t'password' => password_hash($password, PASSWORD_BCRYPT),\n\t\t\t'email' => $email,\n\t\t\t'group' => $defaults['group'],\n\t\t\t'group_id' => $defaults['group_id'],\n\t\t\t'image' => $this->gravatar($email),\n\t\t\t'register_date' => gmdate('Y-m-d H:i:s'),\n\t\t];\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [users]',\n\t\t\t\t\t$userInfo\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse('success', 'User created', 200);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateGroup($id, $array)\n\t{\n\t\tif (!$id || $id == '') {\n\t\t\t$this->setAPIResponse('error', 'id was not set', 422);\n\t\t\treturn null;\n\t\t}\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$groupInfo = $this->getGroupById($id);\n\t\tif ($groupInfo) {\n\t\t\t$array = $this->checkKeys($groupInfo, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'No category info found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('group_id', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Cannot change group_id', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('group', $array)) {\n\t\t\tif ($array['group'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Group was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['group'] = $this->sanitizeUserString($array['group']);\n\t\t\tif ($this->isGroupNameTaken($array['group'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Group name: ' . $array['group'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\tif ($array['image'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Image was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('default', $array)) {\n\t\t\tif ($groupInfo['group_id'] == 0 || $groupInfo['group_id'] == 999) {\n\t\t\t\t$this->setAPIResponse('error', 'Setting ' . $groupInfo['group'] . ' as default group is not allowed', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($array['default']) {\n\t\t\t\t$this->clearGroupDefault();\n\t\t\t\t$array['default'] = 1;\n\t\t\t}\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE groups SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Group info updated');\n\t\t$this->setLoggerChannel('Group Management');\n\t\t$this->logger->info('Edited Group Info for [' . $groupInfo['group'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function deleteGroup($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM groups WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$groupInfo = $this->getGroupById($id);\n\t\tif ($groupInfo['group_id'] == 0 || $groupInfo['group_id'] == 999) {\n\t\t\t$this->setAPIResponse('error', 'Cannot delete group: ' . $groupInfo['group'] . ' as it is not allowed', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->getGroupUserCountById($id) >= 1) {\n\t\t\t$this->setAPIResponse('error', 'Cannot delete group as group still has users assigned to it', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($groupInfo) {\n\t\t\t$this->setLoggerChannel('Group Management');\n\t\t\t$this->logger->info('Deleted Group [' . $groupInfo['group'] . ']');\n\t\t\t$this->setAPIResponse('success', 'Group deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addGroup($array)\n\t{\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$array = $this->checkKeys($this->getTableColumnsFormatted('groups'), $array);\n\t\t$array['default'] = ($array['default']) ?? 0;\n\t\t$array['group_id'] = $this->getNextGroupOrder() + 1;\n\t\tif (array_key_exists('group', $array)) {\n\t\t\t$array['group'] = $this->sanitizeUserString($array['group']);\n\t\t\tif ($this->isGroupNameTaken($array['group'])) {\n\t\t\t\t$this->setAPIResponse('error', 'Group name: ' . $array['group'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Group name was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\tif ($array['image'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Group image cannot be empty', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Group image was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$array\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Group added');\n\t\t$this->setLoggerChannel('Group Management');\n\t\t$this->logger->info('Added Group for [' . $array['group'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function userList($type = null)\n\t{\n\t\tswitch ($type) {\n\t\t\tcase 'plex':\n\t\t\t\tif (!empty($this->config['plexToken']) && !empty($this->config['plexID'])) {\n\t\t\t\t\t$url = 'https://plex.tv/api/servers/' . $this->config['plexID'] . '/shared_servers';\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$headers = array(\n\t\t\t\t\t\t\t\"Accept\" => \"application/json\",\n\t\t\t\t\t\t\t\"X-Plex-Token\" => $this->config['plexToken']\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$response = Requests::get($url, $headers, array());\n\t\t\t\t\t\tlibxml_use_internal_errors(true);\n\t\t\t\t\t\tif ($response->success) {\n\t\t\t\t\t\t\t$libraryList = array();\n\t\t\t\t\t\t\t$plex = simplexml_load_string($response->body);\n\t\t\t\t\t\t\tforeach ($plex->SharedServer as $child) {\n\t\t\t\t\t\t\t\tif (!empty($child['username'])) {\n\t\t\t\t\t\t\t\t\t$username = (string)strtolower($child['username']);\n\t\t\t\t\t\t\t\t\t$email = (string)strtolower($child['email']);\n\t\t\t\t\t\t\t\t\t$libraryList['users'][$username] = (string)$child['id'];\n\t\t\t\t\t\t\t\t\t$libraryList['emails'][$email] = (string)$child['id'];\n\t\t\t\t\t\t\t\t\t$libraryList['both'][$username] = $email;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$libraryList = array_change_key_case($libraryList, CASE_LOWER);\n\t\t\t\t\t\t\treturn $libraryList;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t\t\t\t$this->logger->error($e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t# code...\n\t\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tpublic function encrypt($password, $key = null)\n\t{\n\t\t$key = ($key) ? $key : ((isset($this->config['organizrHash'])) ? $this->config['organizrHash'] : null);\n\t\treturn openssl_encrypt($password, 'AES-256-CBC', $key, 0, $this->fillString($key, 16));\n\t}\n\n\tpublic function decrypt($password, $key = null)\n\t{\n\t\tif (empty($password)) {\n\t\t\treturn '';\n\t\t}\n\t\t$key = ($key) ? $key : ((isset($this->config['organizrHash'])) ? $this->config['organizrHash'] : null);\n\t\treturn openssl_decrypt($password, 'AES-256-CBC', $key, 0, $this->fillString($key, 16));\n\t}\n\n\tpublic function checkValidCert($file)\n\t{\n\t\tif (file_exists($file)) {\n\t\t\treturn filesize($file) > 0;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getCert()\n\t{\n\t\t$url = 'http://curl.haxx.se/ca/cacert.pem';\n\t\t$file = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'functions' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'cacert.pem';\n\t\t$file2 = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'functions' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'cacert-initial.pem';\n\t\t$useCert = ($this->checkValidCert($file)) ? $file : $file2;\n\t\tif ($this->config['selfSignedCert'] !== '') {\n\t\t\tif (file_exists($this->config['selfSignedCert'])) {\n\t\t\t\treturn $this->config['selfSignedCert'];\n\t\t\t}\n\t\t}\n\t\t$context = stream_context_create(\n\t\t\tarray(\n\t\t\t\t'ssl' => array(\n\t\t\t\t\t'verify_peer' => true,\n\t\t\t\t\t'cafile' => $useCert\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\tif (!$this->checkValidCert($file) || (file_exists($file) && time() - 2592000 > filemtime($file))) {\n\t\t\tfile_put_contents($file, fopen($url, 'r', false, $context));\n\t\t}\n\t\treturn ($this->checkValidCert($file)) ? $file : $file2;\n\t}\n\n\tpublic function hasCustomCert()\n\t{\n\t\treturn file_exists($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'custom.pem');\n\t}\n\n\tpublic function getCustomCert()\n\t{\n\t\treturn ($this->hasCustomCert()) ? $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'custom.pem' : false;\n\t}\n\n\tpublic function uploadCert()\n\t{\n\t\t$filesCheck = array_filter($_FILES);\n\t\tif (!empty($filesCheck) && $this->approvedFileExtension($_FILES['file']['name'], 'cert')) {\n\t\t\tini_set('upload_max_filesize', '10M');\n\t\t\tini_set('post_max_size', '10M');\n\t\t\t$tempFile = $_FILES['file']['tmp_name'];\n\t\t\t$targetPath = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR;\n\t\t\t$targetFile = $targetPath . 'custom.pem';\n\t\t\t$this->setAPIResponse(null, pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' has been uploaded', null);\n\t\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert');\n\t\t\treturn move_uploaded_file($tempFile, $targetFile);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' is not approved to be uploaded', 403);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function createCronFile()\n\t{\n\t\t$file = $this->root . DIRECTORY_SEPARATOR . 'Cron.txt';\n\t\tfile_put_contents($file, time());\n\t}\n\n\tpublic function checkCronFile()\n\t{\n\t\t$file = $this->root . DIRECTORY_SEPARATOR . 'Cron.txt';\n\t\treturn file_exists($file) && time() - 120 < filemtime($file);\n\t}\n\n\tpublic function plexJoinAPI($array)\n\t{\n\t\t$username = ($array['username']) ?? null;\n\t\t$email = ($array['email']) ?? null;\n\t\t$password = ($array['password']) ?? null;\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->plexJoin($username, $email, $password);\n\t}\n\n\tpublic function plexJoin($username, $email, $password)\n\t{\n\n\t\ttry {\n\t\t\t$url = 'https://plex.tv/api/v2/users';\n\t\t\t$headers = array(\n\t\t\t\t'Accept' => 'application/json',\n\t\t\t\t'Content-Type' => 'application/x-www-form-urlencoded',\n\t\t\t\t'X-Plex-Product' => 'Organizr',\n\t\t\t\t'X-Plex-Version' => '2.0',\n\t\t\t\t'X-Plex-Client-Identifier' => $this->config['uuid'],\n\t\t\t);\n\t\t\t$data = array(\n\t\t\t\t'email' => $email,\n\t\t\t\t'username' => $username,\n\t\t\t\t'password' => $password,\n\t\t\t);\n\t\t\t$response = Requests::post($url, $headers, $data, array());\n\t\t\t$json = json_decode($response->body, true);\n\t\t\t$errors = !empty($json['errors']);\n\t\t\t$success = empty($json['errors']);\n\t\t\t//Use This for later\n\t\t\t$errorMessage = '';\n\t\t\tif ($errors) {\n\t\t\t\tforeach ($json['errors'] as $error) {\n\t\t\t\t\tif (isset($error['message']) && isset($error['field'])) {\n\t\t\t\t\t\t$errorMessage .= \"[Plex.tv Error: \" . $error['message'] . \" for field: (\" . $error['field'] . \")]\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$msg = (!empty($success) && empty($errors)) ? 'User has joined Plex' : $errorMessage;\n\t\t\t$status = (!empty($success) && empty($errors)) ? 'success' : 'error';\n\t\t\t$code = (!empty($success) && empty($errors)) ? 200 : 422;\n\t\t\t$this->setAPIResponse($status, $msg, $code);\n\t\t\treturn (!empty($success) && empty($errors));\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t\t$this->setAPIResponse('error', 'An Error Occurred', 409);\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function lockCurrentUser()\n\t{\n\t\tif ($this->user['userID'] == '999') {\n\t\t\t$this->setAPIResponse('error', 'Locking not allowed on Guest users', 409);\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->lockUser($this->user['userID']);\n\t}\n\n\tpublic function lockUser($id)\n\t{\n\n\t\t$user = $this->getUserById($id);\n\t\tif (!$user) {\n\t\t\t$this->setAPIResponse('error', 'User not found', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['locked' => '1'],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setLoggerChannel('User Management');\n\t\t$this->logger->info('User: ' . $user['username'] . ' account locked');\n\t\t$this->setAPIResponse('success', 'User account locked', 200);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function unlockCurrentUser($array)\n\t{\n\t\tif ($array['password'] == '') {\n\t\t\t$this->setAPIResponse('error', 'Password Not Set', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$user = $this->getUserById($this->user['userID']);\n\t\tif (!password_verify($array['password'], $user['password'])) {\n\t\t\t$this->setAPIResponse('error', 'Password Incorrect', 401);\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->unlockUser($this->user['userID']);\n\t}\n\n\tpublic function unlockUser($id)\n\t{\n\t\t$user = $this->getUserById($id);\n\t\tif (!$user) {\n\t\t\t$this->setAPIResponse('error', 'User not found', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['locked' => '0'],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setLoggerChannel('User Management');\n\t\t$this->logger->info('User: ' . $user['username'] . ' account unlocked');\n\t\t$this->setAPIResponse('success', 'User account unlocked', 200);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function youtubeSearch($query)\n\t{\n\t\tif (!$query) {\n\t\t\t$this->setAPIResponse('error', 'No query supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$keys = array(\n\t\t\t'AIzaSyBsdt8nLJRMTwOq5PY5A5GLZ2q7scgn01w',\n\t\t\t'AIzaSyD-8SHutB60GCcSM8q_Fle38rJUV7ujd8k',\n\t\t\t'AIzaSyBzOpVBT6VII-b-8gWD0MOEosGg4hyhCsQ',\n\t\t\t'AIzaSyBKnRe1P8fpfBHgooJpmT0WOsrdUtZ4cpk'\n\t\t);\n\t\t$randomKeyIndex = array_rand($keys);\n\t\t$key = $keys[$randomKeyIndex];\n\t\t$apikey = ($this->config['youtubeAPI'] !== '') ? $this->config['youtubeAPI'] : $key;\n\t\t$results = false;\n\t\t$url = \"https://www.googleapis.com/youtube/v3/search?part=snippet&q=$query+official+trailer&part=snippet&maxResults=1&type=video&videoDuration=short&key=$apikey\";\n\t\t$response = Requests::get($url);\n\t\tif ($response->success) {\n\t\t\t$results = json_decode($response->body, true);\n\t\t\t$this->setAPIResponse('success', null, 200, $results);\n\t\t\treturn $results;\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Bad response from YouTube', 500);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function scrapePage($array)\n\t{\n\t\ttry {\n\t\t\t$url = $array['url'] ?? false;\n\t\t\t$type = $array['type'] ?? false;\n\t\t\tif (!$url) {\n\t\t\t\t$this->setAPIResponse('error', 'URL was not supplied', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$url = $this->qualifyURL($url);\n\t\t\t$data = array(\n\t\t\t\t'full_url' => $url,\n\t\t\t\t'drill_url' => $this->qualifyURL($url, true)\n\t\t\t);\n\t\t\t$options = array('verify' => false);\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\t$data['response_code'] = $response->status_code;\n\t\t\tif ($response->success) {\n\t\t\t\t$data['result'] = 'Success';\n\t\t\t\tswitch ($type) {\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\t$data['data'] = html_entity_decode($response->body);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t$data['data'] = json_decode($response->body);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$data['data'] = $response->body;\n\t\t\t\t}\n\t\t\t\t$this->setAPIResponse('success', null, 200, $data);\n\t\t\t\treturn $data;\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Error getting successful response', 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function chooseInstance($url = null, $token = null, $instance = 0, $type = null)\n\t{\n\t\tif (!$url || !$token) {\n\t\t\treturn false;\n\t\t}\n\t\t$list = $this->csvHomepageUrlToken($url, $token);\n\t\tif ($type) {\n\t\t\t$type = strtolower($type);\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'url':\n\t\t\t\tcase 'token':\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$type = 'url';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_numeric($instance)) {\n\t\t\t\treturn $list[$instance][$type];\n\t\t\t} else {\n\t\t\t\treturn $list;\n\t\t\t}\n\t\t}\n\t\tif (is_numeric($instance)) {\n\t\t\treturn $list[$instance];\n\t\t} else {\n\t\t\treturn $list;\n\t\t}\n\t}\n\n\tpublic function CBPFWTabs()\n\t{\n\t\treturn '\n\t\t<script>\n\t\t/**\n\t\t* cbpFWTabs.js v1.0.0\n\t\t* http://www.codrops.com\n\t\t*\n\t\t* Licensed under the MIT license.\n\t\t* http://www.opensource.org/licenses/mit-license.php\n\t\t*\n\t\t* Copyright 2014, Codrops\n\t\t* http://www.codrops.com\n\t\t*/\n\t\t;( function( window ) {\n\t\t\t\\'use strict\\';\n\t\t\n\t\t\tfunction extend( a, b ) {\n\t\t\t\tfor( var key in b ) {\n\t\t\t\t\tif( b.hasOwnProperty( key ) ) {\n\t\t\t\t\t\ta[key] = b[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\n\t\t\tfunction CBPFWTabs( el, options ) {\n\t\t\t\tthis.el = el;\n\t\t\t\tthis.options = extend( {}, this.options );\n\t\t\t\textend( this.options, options );\n\t\t\t\tthis._init();\n\t\t\t}\n\t\t\n\t\t\tCBPFWTabs.prototype.options = {\n\t\t\t\tstart : 0\n\t\t\t};\n\t\t\n\t\t\tCBPFWTabs.prototype._init = function() {\n\t\t\t\t// tabs elems\n\t\t\t\tthis.tabs = [].slice.call( this.el.querySelectorAll( \\'nav > ul > li\\' ) );\n\t\t\t\t// content items\n\t\t\t\tthis.items = [].slice.call( this.el.querySelectorAll( \\'.content-wrap > section\\' ) );\n\t\t\t\t// current index\n\t\t\t\tthis.current = -1;\n\t\t\t\t// show current content item\n\t\t\t\ttry{\n\t\t\t\t\tif(this.tabs[0].innerHTML.indexOf(\\'#settings\\') >= 0){\n\t\t\t\t\t\tthis._show(' . $this->config['defaultSettingsTab'] . ');\n\t\t\t\t\t\tlet tabId = $(this.items[' . $this->config['defaultSettingsTab'] . ']).attr(\"id\") + \"-anchor\";\n\t\t\t\t\t\t$(\"#\" + tabId).click();\n\t\t\t\t\t\t$(\"#\" + tabId + \" a\").click();\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis._show();\n\t\t\t\t\t}\n\t\t\t\t}catch{\n\t\t\t\t\tthis._show();\n\t\t\t\t}\n\t\t\t\t// init events\n\t\t\t\tthis._initEvents();\n\t\t\t};\n\t\t\n\t\t\tCBPFWTabs.prototype._initEvents = function() {\n\t\t\t\tvar self = this;\n\t\t\t\tthis.tabs.forEach( function( tab, idx ) {\n\t\t\t\t\ttab.addEventListener( \\'click\\', function( ev ) {\n\t\t\t\t\t\tev.preventDefault();\n\t\t\t\t\t\tself._show( idx );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t};\n\t\t\n\t\t\tCBPFWTabs.prototype._show = function( idx ) {\n\t\t\t\tif( this.current >= 0 ) {\n\t\t\t\t\tthis.tabs[ this.current ].className = this.items[ this.current ].className = \\'\\';\n\t\t\t\t}\n\t\t\t\t// change current\n\t\t\t\tthis.current = idx != undefined ? idx : this.options.start >= 0 && this.options.start < this.items.length ? this.options.start : 0;\n\t\t\t\tthis.tabs[ this.current ].className = \\'tab-current\\';\n\t\t\t\tthis.items[ this.current ].className = \\'content-current\\';\n\t\t\t};\n\t\t\n\t\t\t// add to global namespace\n\t\t\twindow.CBPFWTabs = CBPFWTabs;\n\t\t\n\t\t})( window );\n\t\t</script>\n\t\t';\n\t}\n\n\tpublic function socksHeadingHTML($app)\n\t{\n\t\treturn '\n\t\t<h3 lang=\"en\">' . ucwords($app) . ' SOCKS API Connection</h3>\n\t\t<p>Using this feature allows you to access the API without having to reverse proxy it.  Just access it from: </p>\n\t\t<code class=\"elip hidden-xs\">' . $this->getServerPath() . 'api/v2/socks/' . $app . '/</code>\n\t\t<p>If you are using multiple URL\\'s (using the csv method) you will have to use the url like these: </p>\n\t\t<code class=\"elip hidden-xs\">' . $this->getServerPath() . 'api/v2/multiple/socks/' . $app . '/1</code>\n\t\t<br/>\n\t\t<code class=\"elip hidden-xs\">' . $this->getServerPath() . 'api/v2/multiple/socks/' . $app . '/2</code>\n\t\t';\n\t}\n\n\tpublic function socksListing($app = null)\n\t{\n\t\tswitch ($app) {\n\t\t\tcase 'sonarr':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'sonarrURL',\n\t\t\t\t\t'enabled' => 'sonarrSocksEnabled',\n\t\t\t\t\t'auth' => 'sonarrSocksAuth',\n\t\t\t\t\t'header' => 'X-Api-Key'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'radarr':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'radarrURL',\n\t\t\t\t\t'enabled' => 'radarrSocksEnabled',\n\t\t\t\t\t'auth' => 'radarrSocksAuth',\n\t\t\t\t\t'header' => 'X-Api-Key'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'lidarr':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'lidarrURL',\n\t\t\t\t\t'enabled' => 'lidarrSocksEnabled',\n\t\t\t\t\t'auth' => 'lidarrSocksAuth',\n\t\t\t\t\t'header' => 'X-Api-Key'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'sabnzbd':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'sabnzbdURL',\n\t\t\t\t\t'enabled' => 'sabnzbdSocksEnabled',\n\t\t\t\t\t'auth' => 'sabnzbdSocksAuth',\n\t\t\t\t\t'header' => null\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'nzbget':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'nzbgetURL',\n\t\t\t\t\t'enabled' => 'nzbgetSocksEnabled',\n\t\t\t\t\t'auth' => 'nzbgetSocksAuth',\n\t\t\t\t\t'header' => 'Authorization'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'tautulli':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'tautulliURL',\n\t\t\t\t\t'enabled' => 'tautulliSocksEnabled',\n\t\t\t\t\t'auth' => 'tautulliSocksAuth',\n\t\t\t\t\t'header' => null\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'qbittorrent':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'qBittorrentURL',\n\t\t\t\t\t'enabled' => 'qBittorrentSocksEnabled',\n\t\t\t\t\t'auth' => 'qBittorrentSocksAuth',\n\t\t\t\t\t'header' => null\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$appDetails = null;\n\t\t}\n\t\treturn $appDetails;\n\t}\n\n\tpublic function socks($appDetails, $requestObject, $multiple = null)\n\t{\n\t\t$url = $appDetails['url'];\n\t\t$enabled = $appDetails['enabled'];\n\t\t$auth = $appDetails['auth'];\n\t\t$header = $appDetails['header'];\n\t\t$error = false;\n\t\tif (!$this->config[$enabled]) {\n\t\t\t$error = true;\n\t\t\t$this->setAPIResponse('error', 'SOCKS module is not enabled', 409);\n\t\t}\n\t\tif (!$this->qualifyRequest($this->config[$auth], true)) {\n\t\t\t$error = true;\n\t\t}\n\t\tif (strpos($this->config[$url], ',') !== false) {\n\t\t\tif (!$multiple) {\n\t\t\t\t$error = true;\n\t\t\t\t$this->setAPIResponse('error', 'Multiple URLs found in field, please use /api/v2/multiple/socks endpoint', 409);\n\t\t\t}\n\t\t} else {\n\t\t\tif ($multiple) {\n\t\t\t\t$error = true;\n\t\t\t\t$this->setAPIResponse('error', 'Multiple endpoint accessed but multiple URLs not found in field, please use /api/v2/socks endpoint', 409);\n\t\t\t}\n\t\t}\n\t\tif (!$error) {\n\t\t\tif ($multiple) {\n\t\t\t\t$instance = $multiple - 1;\n\t\t\t\t$pre = explode('/api/v2/multiple/socks/', $requestObject->getUri()->getPath());\n\t\t\t\t$pre[1] = $this->replace_first('/' . $multiple . '/', '/', $pre[1]);\n\t\t\t\t// sent url twice since we arent using tokens\n\t\t\t\t$list = $this->csvHomepageUrlToken($this->config[$url], $this->config[$url]);\n\t\t\t\t$appURL = $list[$instance]['url'];\n\t\t\t} else {\n\t\t\t\t$pre = explode('/api/v2/socks/', $requestObject->getUri()->getPath());\n\t\t\t\t$appURL = $this->config[$url];\n\t\t\t}\n\t\t\t$endpoint = explode('/', $pre[1]);\n\t\t\t$new = urldecode(preg_replace('/' . $endpoint[0] . '/', '', $pre[1], 1));\n\t\t\t$getParams = ($_GET) ? '?' . http_build_query($_GET) : '';\n\t\t\t$url = $this->qualifyURL($appURL) . $new . $getParams;\n\t\t\t$url = $this->cleanPath($url);\n\t\t\t$options = ($this->localURL($appURL)) ? array('verify' => false, 'timeout' => 120) : array('timeout' => 120);\n\t\t\t$headers = [];\n\t\t\t$apiData = $this->apiData($requestObject, false);\n\t\t\tif ($header) {\n\t\t\t\tif ($requestObject->hasHeader($header)) {\n\t\t\t\t\t$headerKey = $requestObject->getHeaderLine($header);\n\t\t\t\t\t$headers[$header] = $headerKey;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($requestObject->hasHeader('Content-Type')) {\n\t\t\t\t$headerKey = $requestObject->getHeaderLine('Content-Type');\n\t\t\t\t$headers['Content-Type'] = $headerKey;\n\t\t\t}\n\t\t\t$debugInformation = [\n\t\t\t\t'type' => $requestObject->getMethod(),\n\t\t\t\t'headerType' => $requestObject->getHeaderLine('Content-Type'),\n\t\t\t\t'header' => $header,\n\t\t\t\t'headers' => $headers,\n\t\t\t\t'url' => $url,\n\t\t\t\t'options' => $options,\n\t\t\t\t'data' => $apiData,\n\t\t\t];\n\t\t\t$this->setLoggerChannel('Socks');\n\t\t\t$this->logger->debug('Sending Socks request', $debugInformation);\n\t\t\ttry {\n\t\t\t\tswitch ($requestObject->getMethod()) {\n\t\t\t\t\tcase 'GET':\n\t\t\t\t\t\t$call = Requests::get($url, $headers, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'POST':\n\t\t\t\t\t\t$call = Requests::post($url, $headers, $apiData, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DELETE':\n\t\t\t\t\t\t$call = Requests::delete($url, $headers, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'PUT':\n\t\t\t\t\t\t$call = Requests::put($url, $headers, $apiData, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$call = Requests::get($url, $headers, $options);\n\t\t\t\t}\n\t\t\t\t$this->logger->debug('Socks Response', $this->json_validator($call->body) ? json_decode($call->body, true) : $call->body);\n\t\t\t\treturn $call->body;\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\t\t$this->setLoggerChannel('Socks');\n\t\t\t\t$this->logger->critical($e, $debugInformation);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getPlexServers()\n\t{\n\t\tif ($this->config['plexToken'] == '') {\n\t\t\t$this->setAPIResponse('error', 'Plex Token cannot be empty', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$ownedOnly = isset($_GET['owned']) ?? false;\n\t\t$url = $this->qualifyURL('https://plex.tv/pms/servers');\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\t$headers = [\n\t\t\t'X-Plex-Product' => 'Organizr',\n\t\t\t'X-Plex-Version' => '2.0',\n\t\t\t'X-Plex-Client-Identifier' => '01010101-10101010',\n\t\t\t'X-Plex-Token' => $this->config['plexToken'],\n\t\t];\n\t\ttry {\n\t\t\t$response = Requests::get($url, $headers, $options);\n\t\t\tlibxml_use_internal_errors(true);\n\t\t\tif ($response->success) {\n\t\t\t\t$items = array();\n\t\t\t\t$plex = simplexml_load_string($response->body);\n\t\t\t\tforeach ($plex as $server) {\n\t\t\t\t\tif ($ownedOnly) {\n\t\t\t\t\t\tif ($server['owned'] == 1) {\n\t\t\t\t\t\t\t$items[] = array(\n\t\t\t\t\t\t\t\t'name' => (string)$server['name'],\n\t\t\t\t\t\t\t\t'address' => (string)$server['address'],\n\t\t\t\t\t\t\t\t'machineIdentifier' => (string)$server['machineIdentifier'],\n\t\t\t\t\t\t\t\t'owned' => (float)$server['owned'],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$items[] = array(\n\t\t\t\t\t\t\t'name' => (string)$server['name'],\n\t\t\t\t\t\t\t'address' => (string)$server['address'],\n\t\t\t\t\t\t\t'machineIdentifier' => (string)$server['machineIdentifier'],\n\t\t\t\t\t\t\t'owned' => (float)$server['owned'],\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->setResponse(200, null, $items);\n\t\t\t\treturn $items;\n\t\t\t} else {\n\t\t\t\t$message = $this->testAndFormatString($response->body);\n\t\t\t\t$this->setResponse(500, 'Plex Error occurred', $message['data']);\n\t\t\t\t$this->setLoggerChannel('Plex Connection')->warning('Plex Error', $message);\n\t\t\t\treturn $message;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('Plex Connection')->error($e);\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getIcons()\n\t{\n\t\t$term = $_GET['search'] ?? null;\n\t\t$page = $_GET['page'] ?? 1;\n\t\t$limit = $_GET['limit'] ?? 20;\n\t\t$offset = ($page * $limit) - $limit;\n\t\t$goodIcons['results'] = [];\n\t\t$goodIcons['limit'] = $limit;\n\t\t$goodIcons['page'] = $page;\n\t\t$goodIcons['term'] = $term;\n\t\t$allIcons = file_get_contents($this->root . '/js/icons.json');\n\t\t$iconListing = json_decode($allIcons, true);\n\t\tforeach ($iconListing as $setKey => $set) {\n\t\t\tforeach ($set['children'] as $k => $v) {\n\t\t\t\tif (stripos($v['text'], $term) !== false || !$term) {\n\t\t\t\t\t$goodIcons['results'][] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$total = count($goodIcons['results']);\n\t\t$goodIcons['total'] = $total;\n\t\t$goodIcons['results'] = array_slice($goodIcons['results'], $offset, $limit);\n\t\t$goodIcons['pagination']['more'] = $page < (ceil($total / $limit));\n\t\treturn $goodIcons;\n\t}\n\n\tpublic function getJournalMode()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'PRAGMA journal_mode',\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\tif ($query) {\n\t\t\tif ($query['journal_mode']) {\n\t\t\t\t$this->setResponse(200, null, $query);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(500, 'Error getting Journal Mode');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setResponse(404, 'Journal Mode not found');\n\t\t}\n\t\treturn $query;\n\t}\n\n\tpublic function setJournalMode($option = 'WAL')\n\t{\n\t\t$option = strtoupper($option);\n\t\tswitch ($option) {\n\t\t\tcase 'WAL':\n\t\t\tcase 'DELETE':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'PRAGMA journal_mode = \\'' . $option . '\\';',\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\tif ($query) {\n\t\t\tif ($query['journal_mode']) {\n\t\t\t\t$this->setResponse(200, 'Journal Mode updated to: ' . $option, $query);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(500, 'Error getting Journal Mode');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setResponse(404, 'Journal Mode not found');\n\t\t}\n\t\treturn $query;\n\t}\n\n\tpublic function testCronSchedule($schedule = null)\n\t{\n\t\tif (is_array($schedule)) {\n\t\t\t$schedule = str_replace('_', ' ', array_keys($schedule)[0]);\n\t\t}\n\t\tif (!$schedule) {\n\t\t\t$this->setResponse(409, 'Schedule was not supplied');\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t$schedule = new Cron\\CronExpression($schedule);\n\t\t\t$this->setResponse(200, 'Schedule was validated');\n\t\t\treturn true;\n\t\t} catch (InvalidArgumentException $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function testFolder($folder = null)\n\t{\n\t\t$folder = $folder['folder'] ?? null;\n\t\tif (!$folder) {\n\t\t\t$this->setResponse(409, 'Folder was not supplied');\n\t\t\treturn false;\n\t\t}\n\t\t$testFolder = $this->makeDir($folder);\n\t\tif ($testFolder) {\n\t\t\t$this->setResponse(200, 'Folder approved for logs');\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->setResponse(409, 'Folder path is not valid or permissions insufficient');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function replaceStringInDatabase($string)\n\t{\n\t\t$databaseStringList = [\n\t\t\t'AUTOINCREMENT' => [\n\t\t\t\t'sqlite3' => 'AUTOINCREMENT',\n\t\t\t\t'mysqli' => 'AUTO_INCREMENT',\n\t\t\t\t'postgre' => 'AUTOINCREMENT'\n\t\t\t],\n\t\t\t'COLLATE NOCASE' => [\n\t\t\t\t'sqlite3' => 'COLLATE NOCASE',\n\t\t\t\t'mysqli' => '',\n\t\t\t\t'postgre' => ''\n\t\t\t],\n\t\t\t'INTEGER PRIMARY KEY AUTOINCREMENT' => [\n\t\t\t\t'sqlite3' => 'INTEGER PRIMARY KEY AUTOINCREMENT',\n\t\t\t\t'mysqli' => 'INTEGER PRIMARY KEY AUTOINCREMENT',\n\t\t\t\t'postgre' => 'SERIAL PRIMARY KEY'\n\t\t\t],\n\t\t\t'DATETIME' => [\n\t\t\t\t'sqlite3' => 'DATETIME',\n\t\t\t\t'mysqli' => 'DATETIME',\n\t\t\t\t'postgre' => 'TIMESTAMP'\n\t\t\t],\n\t\t];\n\t\tif (gettype($string) == 'string') {\n\t\t\tforeach ($databaseStringList as $item => $value) {\n\t\t\t\tif (stripos($string, $item) !== false) {\n\t\t\t\t\t$string = str_ireplace($item, $databaseStringList[$item][$this->config['driver']], $string);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $string;\n\t}\n\n\tpublic function cleanDatabaseQuery($query)\n\t{\n\t\tif (is_array($query)) {\n\t\t\tforeach ($query as $key => $value) {\n\t\t\t\t$query[$key] = $this->cleanDatabaseQuery($value);\n\t\t\t}\n\t\t\treturn $query;\n\t\t} else {\n\t\t\treturn $this->replaceStringInDatabase($query);\n\t\t}\n\t}\n\n\tprotected function processQueries(array $request, $migration = false)\n\t{\n\t\t$results = array();\n\t\t$firstKey = '';\n\t\tif ($this->config['includeDatabaseQueriesInDebug']) {\n\t\t\t$this->setLoggerChannel('Database');\n\t\t\t$this->logger->debug('Query to database', $request);\n\t\t}\n\t\tforeach ($request as $k => $v) {\n\t\t\ttry {\n\t\t\t\t$v['query'] = $this->cleanDatabaseQuery($v['query']);\n\t\t\t\t$query = ($migration) ? $this->otherDb->query($v['query']) : $this->db->query($v['query']);\n\t\t\t\t$keyName = (isset($v['key'])) ? $v['key'] : $k;\n\t\t\t\t$firstKey = (isset($v['key']) && $k == 0) ? $v['key'] : $k;\n\t\t\t\tswitch ($v['function']) {\n\t\t\t\t\tcase 'fetchAll':\n\t\t\t\t\t\t$results[$keyName] = $query->fetchAll();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'fetch':\n\t\t\t\t\t\t// PHP 8 Fix?\n\t\t\t\t\t\t$query->setRowClass(null);\n\t\t\t\t\t\t$results[$keyName] = $query->fetch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getAffectedRows':\n\t\t\t\t\t\t$results[$keyName] = $query->getAffectedRows();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getRowCount':\n\t\t\t\t\t\t$results[$keyName] = $query->getRowCount();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'fetchSingle':\n\t\t\t\t\t\t// PHP 8 Fix?\n\t\t\t\t\t\t$query->setRowClass(null);\n\t\t\t\t\t\t$results[$keyName] = $query->fetchSingle();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t$results[$keyName] = $query;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$this->setLoggerChannel('Database');\n\t\t\t\t$this->logger->critical($e, $v['query']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif ($this->config['includeDatabaseQueriesInDebug']) {\n\t\t\t$this->logger->debug('Results from database', $results);\n\t\t}\n\t\treturn count($request) > 1 ? $results : $results[$firstKey];\n\t}\n\n}"], "fixing_code": ["<?php\n\nuse Dibi\\Connection;\n\nclass Organizr\n{\n\t// Use Custom Functions From Traits;\n\tuse TwoFAFunctions;\n\tuse ApiFunctions;\n\tuse AuthFunctions;\n\tuse BackupFunctions;\n\tuse ConfigFunctions;\n\tuse DemoFunctions;\n\tuse HomepageConnectFunctions;\n\tuse HomepageFunctions;\n\tuse LogFunctions;\n\tuse NetDataFunctions;\n\tuse NormalFunctions;\n\tuse OAuthFunctions;\n\tuse OptionsFunction;\n\tuse OrganizrFunctions;\n\tuse PluginFunctions;\n\tuse StaticFunctions;\n\tuse SSOFunctions;\n\tuse TokenFunctions;\n\tuse UpdateFunctions;\n\tuse UpgradeFunctions;\n\n\t// Use homepage item functions\n\tuse BookmarksHomepageItem;\n\tuse CalendarHomepageItem;\n\tuse CouchPotatoHomepageItem;\n\tuse DelugeHomepageItem;\n\tuse DonateHomepageItem;\n\tuse EmbyHomepageItem;\n\tuse HealthChecksHomepageItem;\n\tuse HTMLHomepageItem;\n\tuse ICalHomepageItem;\n\tuse JackettHomepageItem;\n\tuse JDownloaderHomepageItem;\n\tuse JellyfinHomepageItem;\n\tuse LidarrHomepageItem;\n\tuse MiscHomepageItem;\n\tuse MonitorrHomepageItem;\n\tuse NetDataHomepageItem;\n\tuse NZBGetHomepageItem;\n\tuse OctoPrintHomepageItem;\n\tuse OmbiHomepageItem;\n\tuse OverseerrHomepageItem;\n\tuse PiHoleHomepageItem;\n\tuse PlexHomepageItem;\n\tuse QBitTorrentHomepageItem;\n\tuse RadarrHomepageItem;\n\tuse RTorrentHomepageItem;\n\tuse SabNZBdHomepageItem;\n\tuse SickRageHomepageItem;\n\tuse SonarrHomepageItem;\n\tuse SpeedTestHomepageItem;\n\tuse TautulliHomepageItem;\n\tuse TraktHomepageItem;\n\tuse TransmissionHomepageItem;\n\tuse UnifiHomepageItem;\n\tuse WeatherHomepageItem;\n\tuse uTorrentHomepageItem;\n\n\t// ===================================\n\t// Organizr Version\n\tpublic $version = '2.1.2000';\n\t// ===================================\n\t// Quick php Version check\n\tpublic $minimumPHP = '7.3';\n\t// ===================================\n\tprotected $db;\n\tprotected $otherDb;\n\tpublic $config;\n\tpublic $user;\n\tpublic $userConfigPath;\n\tpublic $defaultConfigPath;\n\tpublic $currentTime;\n\tpublic $docker;\n\tpublic $dev;\n\tpublic $demo;\n\tpublic $commit;\n\tpublic $fileHash;\n\tpublic $cookieName;\n\tpublic $log;\n\tpublic $logger;\n\tpublic $organizrLog;\n\tpublic $organizrLoginLog;\n\tpublic $timeExecution;\n\tpublic $root;\n\tpublic $paths;\n\tpublic $updating;\n\tpublic $groupOptions;\n\tpublic $warnings;\n\tpublic $errors;\n\n\tpublic function __construct($updating = false)\n\t{\n\t\t$this->errors = E_ALL;//E_ALL & ~E_NOTICE\n\t\t// Set custom Error handler\n\t\tset_error_handler([$this, 'setAPIErrorResponse'], $this->errors);\n\t\t// Next Check PHP Version\n\t\t$this->checkPHP();\n\t\t// Check Disk Space\n\t\t$this->checkDiskSpace();\n\t\t// Set UUID for device\n\t\t$this->setDeviceUUID();\n\t\t// Add Plugin prefix to plugin global\n\t\t$this->setPluginListNameFromConfigPrefix();\n\t\t// Constructed from Updater?\n\t\t$this->updating = $updating;\n\t\t// Set Project Root directory\n\t\t$this->root = dirname(__DIR__, 2);\n\t\t// Set Start Execution Time\n\t\t$this->timeExecution = $this->timeExecution();\n\t\t// Set location path to user config path\n\t\t$this->chooseConfigFile();\n\t\t//$this->userConfigPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';\n\t\t// Set location path to default config path\n\t\t$this->defaultConfigPath = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'default.php';\n\t\t// Set current time\n\t\t$this->currentTime = gmdate(\"Y-m-d\\TH:i:s\\Z\");\n\t\t// Set variable if install is for official docker\n\t\t$this->docker = (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Docker.txt'));\n\t\t// Set variable if install is for develop and set php Error levels\n\t\t$this->dev = (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Dev.txt'));\n\t\t$this->phpErrors();\n\t\t// Set variable if install is for demo\n\t\t$this->demo = (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Demo.txt'));\n\t\t// Set variable if install has commit hash\n\t\t$this->commit = ($this->docker && !$this->dev) ? file_get_contents(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'Github.txt') : null;\n\t\t// Set variable to be used as hash for files\n\t\t$this->fileHash = ($this->commit) ?? $this->version;\n\t\t$this->fileHash = trim($this->fileHash);\n\t\t// Load Config file\n\t\t$this->config = $this->config();\n\t\t// Set organizr Logs and logger\n\t\t$this->log = $this->setOrganizrLog();\n\t\t$this->setLoggerChannel();\n\t\t// Set organizr Log file location - will deprecate soon\n\t\t$this->organizrLog = ($this->hasDB()) ? $this->config['dbLocation'] . 'organizrLog.json' : false;\n\t\t// Set organizr Login Log file location - will deprecate soon\n\t\t$this->organizrLoginLog = ($this->hasDB()) ? $this->config['dbLocation'] . 'organizrLoginLog.json' : false;\n\t\t// Set Paths\n\t\t$this->paths = array(\n\t\t\t'Root Folder' => dirname(__DIR__, 2) . DIRECTORY_SEPARATOR,\n\t\t\t'Cache Folder' => dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cache' . DIRECTORY_SEPARATOR,\n\t\t\t'Tab Folder' => $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR,\n\t\t\t'API Folder' => dirname(__DIR__, 1) . DIRECTORY_SEPARATOR,\n\t\t\t'DB Folder' => ($this->hasDB()) ? $this->config['dbLocation'] : false\n\t\t);\n\t\t// Connect to DB\n\t\t$this->connectDB();\n\t\t// Check DB Writable\n\t\t$this->checkWritableDB();\n\t\t// Set cookie name for Organizr Instance\n\t\t$this->cookieName = ($this->hasDB()) ? $this->config['uuid'] !== '' ? 'organizr_token_' . $this->config['uuid'] : 'organizr_token_temp' : 'organizr_token_temp';\n\t\t// Get token form cookie and validate\n\t\t$this->setCurrentUser();\n\t\t// might just run this at index\n\t\t$this->upgradeCheck();\n\t\t// Is Page load Organizr OAuth?\n\t\t$this->checkForOrganizrOAuth();\n\t\t// Is user Blacklisted?\n\t\t$this->checkIfUserIsBlacklisted();\n\t}\n\n\tpublic function __destruct()\n\t{\n\t\t$this->disconnectDB();\n\t}\n\n\tpublic function chooseConfigFile()\n\t{\n\n\t\t$oldUserConfigPath = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';\n\t\t$userConfigPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php';\n\t\tif (file_exists($userConfigPath) && file_exists($oldUserConfigPath)) {\n\t\t\t$this->userConfigPath = $userConfigPath;\n\t\t} elseif (file_exists($oldUserConfigPath)) {\n\t\t\t$this->makeDir(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR);\n\t\t\tif ($this->rcopy($oldUserConfigPath, $userConfigPath)) {\n\t\t\t\t$this->userConfigPath = $userConfigPath;\n\t\t\t\t@unlink($oldUserConfigPath);\n\t\t\t} else {\n\t\t\t\t$this->userConfigPath = $oldUserConfigPath;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->userConfigPath = $userConfigPath;\n\t\t}\n\t}\n\n\tpublic function hasConfig()\n\t{\n\t\treturn (file_exists($this->userConfigPath)) ?? false;\n\t}\n\n\tpublic function hasDatabase($file = null)\n\t{\n\t\t$databaseType = $this->config['driver'];\n\t\tif (!$this->hasConfig()) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (strtolower($databaseType)) {\n\t\t\tcase 'sqlite3':\n\t\t\t\t$file = $file ? $this->config['dbLocation'] . $file : $this->config['dbLocation'] . $this->config['dbName'];\n\t\t\t\treturn [\n\t\t\t\t\t'driver' => 'sqlite3',\n\t\t\t\t\t'database' => $file\n\t\t\t\t];\n\t\t\tcase 'mysql':\n\t\t\tcase 'mysqli':\n\t\t\t\t$db = $file ? 'tempMigration' : $this->config['dbName'];\n\t\t\t\treturn [\n\t\t\t\t\t'driver' => 'mysqli',\n\t\t\t\t\t'host' => $this->config['dbHost'],\n\t\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t\t'database' => $db,\n\t\t\t\t\t'options' => [\n\t\t\t\t\t\tMYSQLI_OPT_CONNECT_TIMEOUT => 60,\n\t\t\t\t\t],\n\t\t\t\t\t'flags' => MYSQLI_CLIENT_COMPRESS,\n\t\t\t\t];\n\t\t\tcase 'postgre':\n\t\t\t\t$config = [\n\t\t\t\t\t'driver' => 'postgre',\n\t\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t\t'persistent' => true,\n\t\t\t\t];\n\t\t\t\t$host = $this->qualifyURL($this->config['dbHost'], true);\n\t\t\t\tif ($host['port']) {\n\t\t\t\t\t$config = array_merge($config, ['port' => ltrim($host['port'], ':')]);\n\t\t\t\t}\n\t\t\t\tif ($host['host']) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['host']]);\n\t\t\t\t}\n\t\t\t\tif (!$host['host'] && $host['path']) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['path']]);\n\t\t\t\t}\n\t\t\t\treturn $config;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tprotected function connectDB()\n\t{\n\n\t\t$databaseConnection = $this->hasDatabase();\n\t\t//$this->prettyPrint($databaseConnection);\n\t\tif ($databaseConnection) {\n\t\t\ttry {\n\t\t\t\t$this->db = new Connection($databaseConnection);\n\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t$this->db = null;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->db = null;\n\t\t}\n\t}\n\n\tpublic function disconnectDB()\n\t{\n\t\tif ($this->db) {\n\t\t\t$this->db->disconnect();\n\t\t\t$this->db = null;\n\t\t\tunset($this->db);\n\t\t}\n\t}\n\n\tpublic function connectOtherDB($file = null)\n\t{\n\t\t$databaseConnection = $this->hasDatabase('tempMigration.db');\n\t\tif ($databaseConnection) {\n\t\t\ttry {\n\t\t\t\t$this->otherDb = new Connection($databaseConnection);\n\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t$this->prettyPrint($e->getMessage());\n\t\t\t\t$this->otherDb = null;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->otherDb = null;\n\t\t}\n\t}\n\n\tpublic function setDeviceUUID()\n\t{\n\t\tif (!isset($_COOKIE['organizr_user_uuid'])) {\n\t\t\t$this->coookie('set', 'organizr_user_uuid', $this->gen_uuid(), 7);\n\t\t}\n\t}\n\n\tpublic function refreshDeviceUUID()\n\t{\n\t\tif (isset($_COOKIE['organizr_user_uuid'])) {\n\t\t\t$this->coookie('delete', 'organizr_user_uuid');\n\t\t}\n\t\t$this->coookie('set', 'organizr_user_uuid', $this->gen_uuid(), 7);\n\t}\n\n\tpublic function setCurrentUser($validate = true)\n\t{\n\t\t$user = false;\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->hasCookie()) {\n\t\t\t\t$user = $this->getUserFromToken($_COOKIE[$this->cookieName]);\n\t\t\t}\n\t\t}\n\t\t$this->user = ($user) ?: $this->guestUser();\n\t\t$this->setLoggerChannel(null, $this->user['username']);\n\t\tif ($validate) {\n\t\t\t$this->checkUserTokenForValidation();\n\t\t}\n\t}\n\n\tpublic function checkUserTokenForValidation()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->hasCookie()) {\n\t\t\t\t$this->validateToken($_COOKIE[$this->cookieName]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function phpErrors()\n\t{\n\t\t$errorTypes = $this->dev ? E_ERROR | E_WARNING | E_PARSE | E_NOTICE : 0;\n\t\t// Temp overwrite for now\n\t\t$displayErrors = $this->dev ? 1 : 0;\n\t\terror_reporting($this->errors);\n\t\tini_set('display_errors', $displayErrors);\n\t}\n\n\tpublic function checkForOrganizrOAuth()\n\t{\n\t\t// Oauth?\n\t\tif ($this->user) {\n\t\t\tif ($this->user['groupID'] == '999') {\n\t\t\t\t$this->setLoggerChannel('OAuth')->debug('Starting OAuth login check');\n\t\t\t\t$data = [\n\t\t\t\t\t'enabled' => $this->config['authProxyEnabled'],\n\t\t\t\t\t'header_name' => $this->config['authProxyHeaderName'],\n\t\t\t\t\t'header_name_email' => $this->config['authProxyHeaderNameEmail'],\n\t\t\t\t\t'whitelist' => $this->config['authProxyWhitelist'],\n\t\t\t\t];\n\t\t\t\tif ($this->config['authProxyEnabled'] && ($this->config['authProxyHeaderName'] !== '' || $this->config['authProxyHeaderNameEmail'] !== '') && $this->config['authProxyWhitelist'] !== '') {\n\t\t\t\t\tif (isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderName'])]) || isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderNameEmail'])])) {\n\t\t\t\t\t\t$this->coookieSeconds('set', 'organizrOAuth', 'true', 20000, false);\n\t\t\t\t\t\t$this->setLoggerChannel('OAuth')->info('OAuth pre-check passed - adding organizrOAuth cookie', $data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$data = array_merge($data, ['headers' => $this->getallheadersi()]);\n\t\t\t\t\t\t$this->setLoggerChannel('OAuth')->debug('Headers not set', $data);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('OAuth')->debug('OAuth not triggered', $data);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function checkIfUserIsBlacklisted()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\t$currentIP = $this->userIP();\n\t\t\tif ($this->config['blacklisted'] !== '') {\n\t\t\t\tif (in_array($currentIP, $this->arrayIP($this->config['blacklisted']))) {\n\t\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t\t$this->logger->debug('User was sent to black hole', ['blacklist' => $this->config['blacklisted']]);\n\t\t\t\t\tdie($this->showHTML('Blacklisted', $this->config['blacklistedMessage']));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function checkDiskSpace($directory = './')\n\t{\n\t\t$readable = @is_readable($directory);\n\t\tif ($readable) {\n\t\t\t$disk = $this->checkDisk($directory);\n\t\t\t$diskLevels = [\n\t\t\t\t'warn' => 1000000000,\n\t\t\t\t'warn_human_readable' => $this->human_filesize(1000000000, 0),\n\t\t\t\t'error' => 100000000,\n\t\t\t\t'error_human_readable' => $this->human_filesize(100000000, 0),\n\t\t\t];\n\t\t\tif ($disk['free']['raw'] <= $diskLevels['error']) {\n\t\t\t\tdie($this->showHTML('Low Disk Space', 'You are dangerously low on disk space.<br/>There is only ' . $disk['free']['human_readable'] . ' remaining.<br/><b>Percent Used = ' . $disk['used']['percent_used'] . '%</b>'));\n\t\t\t} elseif ($disk['free']['raw'] <= $diskLevels['warn']) {\n\t\t\t\t$this->warnings[] = 'You are low on disk space.  There is only ' . $disk['free']['human_readable'] . ' remaining.  This warning shows up because you are past the warning threshold of ' . $diskLevels['warn_human_readable'];\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function getFreeSpace($directory = './')\n\t{\n\t\t$disk = disk_free_space($directory);\n\t\treturn [\n\t\t\t'raw' => $disk,\n\t\t\t'human_readable' => $this->human_filesize($disk, 0)\n\t\t];\n\t}\n\n\tpublic function getDiskSpace($directory = './')\n\t{\n\t\t$disk = disk_total_space($directory);\n\t\treturn [\n\t\t\t'raw' => $disk,\n\t\t\t'human_readable' => $this->human_filesize($disk, 0)\n\t\t];\n\t}\n\n\tpublic function getUsedSpace($directory = './')\n\t{\n\t\t$diskFree = $this->getFreeSpace($directory);\n\t\t$diskTotal = $this->getDiskSpace($directory);\n\t\t$diskUsed = $diskTotal['raw'] - $diskFree['raw'];\n\t\t$percentUsed = ($diskUsed / $diskTotal['raw']) * 100;\n\t\t$percentFree = 100 - $percentUsed;\n\t\treturn [\n\t\t\t'raw' => $diskUsed,\n\t\t\t'human_readable' => $this->human_filesize($diskUsed, 0),\n\t\t\t'percent_used' => round($percentUsed),\n\t\t\t'percent_free' => round($percentFree)\n\t\t];\n\t}\n\n\tpublic function checkDisk($directory = './')\n\t{\n\t\t$readable = @is_readable($directory);\n\t\tif ($readable) {\n\t\t\treturn [\n\t\t\t\t'free' => $this->getFreeSpace($directory),\n\t\t\t\t'used' => $this->getUsedSpace($directory),\n\t\t\t\t'total' => $this->getDiskSpace($directory),\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\t'free' => 'error accessing path',\n\t\t\t\t'used' => 'error accessing path',\n\t\t\t\t'total' => 'error accessing path',\n\t\t\t];\n\t\t}\n\t}\n\n\tpublic function errorCodes($error = 000)\n\t{\n\t\t$errorCodes = [\n\t\t\t400 => [\n\t\t\t\t'type' => 'Bad Request',\n\t\t\t\t'description' => 'The request was incorrect'\n\t\t\t],\n\t\t\t401 => [\n\t\t\t\t'type' => 'Unauthorized ',\n\t\t\t\t'description' => 'You are not authorized to view this page'\n\t\t\t],\n\t\t\t402 => [\n\t\t\t\t'type' => 'Payment Required',\n\t\t\t\t'description' => 'Payment required before you can view this page'\n\t\t\t],\n\t\t\t403 => [\n\t\t\t\t'type' => 'Forbidden',\n\t\t\t\t'description' => 'You are forbidden to view this page'\n\t\t\t],\n\t\t\t404 => [\n\t\t\t\t'type' => 'Not Found',\n\t\t\t\t'description' => 'The requested resource was not found'\n\t\t\t],\n\t\t\t405 => [\n\t\t\t\t'type' => 'Method Not Allowed',\n\t\t\t\t'description' => 'The requested method is not allowed'\n\t\t\t],\n\t\t\t406 => [\n\t\t\t\t'type' => 'Not Acceptable',\n\t\t\t\t'description' => 'There was an issue with the requests Headers'\n\t\t\t],\n\t\t\t407 => [\n\t\t\t\t'type' => 'Proxy Authentication Required',\n\t\t\t\t'description' => 'Authentication is required and was not passed'\n\t\t\t],\n\t\t\t408 => [\n\t\t\t\t'type' => 'Request Time-out',\n\t\t\t\t'description' => 'The request has timed out'\n\t\t\t],\n\t\t\t409 => [\n\t\t\t\t'type' => 'Conflict',\n\t\t\t\t'description' => 'An error has occurred'\n\t\t\t],\n\t\t\t410 => [\n\t\t\t\t'type' => 'Gone',\n\t\t\t\t'description' => 'The requested resource is no longer available and has been permanently removed'\n\t\t\t],\n\t\t\t411 => [\n\t\t\t\t'type' => 'Length Required',\n\t\t\t\t'description' => 'The request can not be processed without a \"Content-Length\" header field'\n\t\t\t],\n\t\t\t412 => [\n\t\t\t\t'type' => 'Precondition Failed',\n\t\t\t\t'description' => ' A header needed was not found'\n\t\t\t],\n\t\t\t413 => [\n\t\t\t\t'type' => 'Request Entity Too Large',\n\t\t\t\t'description' => 'The query was too large to be processed by the server'\n\t\t\t],\n\t\t\t414 => [\n\t\t\t\t'type' => 'Request-URI Too Long',\n\t\t\t\t'description' => 'The URI of the request was too long'\n\t\t\t],\n\t\t\t415 => [\n\t\t\t\t'type' => 'Unsupported Media Type',\n\t\t\t\t'description' => 'The contents of the request has been submitted with invalid or out of defined media type'\n\t\t\t],\n\t\t\t416 => [\n\t\t\t\t'type' => 'Requested range not satisfiable',\n\t\t\t\t'description' => 'The requested resource was part of an invalid or is not on the server'\n\t\t\t],\n\t\t\t417 => [\n\t\t\t\t'type' => 'Expectation Failed',\n\t\t\t\t'description' => 'Expected Header was not found'\n\t\t\t],\n\t\t\t444 => [\n\t\t\t\t'type' => 'No Response',\n\t\t\t\t'description' => 'Nothing was returned from server'\n\t\t\t],\n\t\t\t500 => [\n\t\t\t\t'type' => 'Internal Server Error',\n\t\t\t\t'description' => 'An unexpected server error'\n\t\t\t],\n\t\t\t501 => [\n\t\t\t\t'type' => 'Not Implemented',\n\t\t\t\t'description' => 'The functionality to process the request is not available from this server'\n\t\t\t],\n\t\t\t502 => [\n\t\t\t\t'type' => 'Bad Gateway',\n\t\t\t\t'description' => 'The server could not fulfill its function as a gateway or proxy'\n\t\t\t],\n\t\t\t503 => [\n\t\t\t\t'type' => 'Service Unavailable',\n\t\t\t\t'description' => 'The server is temporarily unavailable, due to overloading or maintenance'\n\t\t\t],\n\t\t\t504 => [\n\t\t\t\t'type' => 'Gateway Time-out',\n\t\t\t\t'description' => 'The server could not fulfill its function as a gateway or proxy'\n\t\t\t],\n\t\t\t505 => [\n\t\t\t\t'type' => 'HTTP version not supported',\n\t\t\t\t'description' => 'The used version of HTTP is not supported by the server or rejected'\n\t\t\t],\n\t\t\t507 => [\n\t\t\t\t'type' => 'Insufficient Storage',\n\t\t\t\t'description' => 'The request could not be processed because the server disk space it currently is not sufficient'\n\t\t\t],\n\t\t\t509 => [\n\t\t\t\t'type' => 'Bandwidth Limit Exceeded',\n\t\t\t\t'description' => 'The request was rejected, because otherwise the bandwidth would be exceeded'\n\t\t\t],\n\t\t\t510 => [\n\t\t\t\t'type' => 'Not Extended',\n\t\t\t\t'description' => 'The request does not contain all information that is waiting for the requested server extension imperative'\n\t\t\t],\n\t\t\t000 => [\n\t\t\t\t'type' => 'Unexpected Error',\n\t\t\t\t'description' => 'An unexpected error occurred'\n\t\t\t],\n\t\t];\n\t\treturn (isset($errorCodes[$error])) ? $errorCodes[$error] : $errorCodes[000];\n\t}\n\n\tpublic function showTopBarHamburger()\n\t{\n\t\tif ($this->config['allowCollapsableSideMenu']) {\n\t\t\tif ($this->config['sideMenuCollapsed']) {\n\t\t\t\treturn '<a class=\"toggle-side-menu\" href=\"javascript:void(0)\"><i class=\"ti-menu fa-fw\"></i></a>';\n\t\t\t} else {\n\t\t\t\treturn '<a class=\"toggle-side-menu hidden\" href=\"javascript:void(0)\"><i class=\"ti-menu fa-fw\"></i></a>';\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic function showSideBarHamburger()\n\t{\n\t\tif ($this->config['allowCollapsableSideMenu']) {\n\t\t\tif (!$this->config['sideMenuCollapsed']) {\n\t\t\t\treturn '<i class=\"hidden-xs ti-shift-left mouse\"></i>';\n\t\t\t}\n\t\t}\n\t\treturn '<i class=\"ti-menu hidden-xs\"></i>';\n\t}\n\n\tpublic function showSideBarText()\n\t{\n\t\tif ($this->config['allowCollapsableSideMenu']) {\n\t\t\tif (!$this->config['sideMenuCollapsed']) {\n\t\t\t\treturn '<span class=\"hide-menu hidden-xs\" lang=\"en\">Hide Menu</span>';\n\t\t\t}\n\t\t}\n\t\treturn '<span class=\"hide-menu hidden-xs\" lang=\"en\">Navigation</span>';\n\t}\n\n\tpublic function auth()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\t$this->setLoggerChannel('Auth');\n\t\t\tif (isset($_GET['type'])) {\n\t\t\t\tswitch (strtolower($_GET['type'])) {\n\t\t\t\t\tcase 'whitelist':\n\t\t\t\t\tcase 'white':\n\t\t\t\t\tcase 'w':\n\t\t\t\t\tcase 'wl':\n\t\t\t\t\tcase 'allow':\n\t\t\t\t\t\t$_GET['whitelist'] = $_GET['ips'] ?? false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'blacklist':\n\t\t\t\t\tcase 'black':\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'bl':\n\t\t\t\t\tcase 'deny':\n\t\t\t\t\t\t$_GET['blacklist'] = $_GET['ips'] ?? false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$this->setAPIResponse('error', $_GET['type'] . ' is not a valid type', 401);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$whitelist = $_GET['whitelist'] ?? false;\n\t\t\t$blacklist = $_GET['blacklist'] ?? false;\n\t\t\t$group = 0;\n\t\t\t$groupParam = ($_GET['group']) ?? 0;\n\t\t\t$redirect = false;\n\t\t\tif (isset($groupParam)) {\n\t\t\t\tif (is_numeric($groupParam)) {\n\t\t\t\t\t$group = (int)$groupParam;\n\t\t\t\t} else {\n\t\t\t\t\t$group = $this->getTabGroupByTabName($groupParam);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$currentIP = $this->userIP();\n\t\t\t$unlocked = !($this->user['locked'] == '1');\n\t\t\tif (isset($this->user)) {\n\t\t\t\t$currentUser = $this->user['username'];\n\t\t\t\t$currentGroup = $this->user['groupID'];\n\t\t\t\t$currentEmail = $this->user['email'];\n\t\t\t} else {\n\t\t\t\t$currentUser = 'Guest';\n\t\t\t\t$currentGroup = $this->getUserLevel();\n\t\t\t\t$currentEmail = 'guest@guest.com';\n\t\t\t}\n\t\t\t$userInfo = [\n\t\t\t\t\"user\" => $currentUser,\n\t\t\t\t\"group\" => $currentGroup,\n\t\t\t\t\"email\" => $currentEmail,\n\t\t\t\t\"user_ip\" => $currentIP,\n\t\t\t\t\"requested_group\" => $group,\n\t\t\t\t\"uuid\" => $_COOKIE['organizr_user_uuid'] ?? 'n/a'\n\t\t\t];\n\t\t\t$this->logger->debug('Starting check', $userInfo);\n\t\t\t$responseMessage = 'User is not Authorized or User is locked';\n\t\t\tif ($whitelist) {\n\t\t\t\tif (in_array($currentIP, $this->arrayIP($whitelist))) {\n\t\t\t\t\t$responseMessage = 'User is whitelisted';\n\t\t\t\t\t$this->setAPIResponse('success', $responseMessage, 200, $userInfo);\n\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($blacklist) {\n\t\t\t\tif (in_array($currentIP, $this->arrayIP($blacklist))) {\n\t\t\t\t\t$responseMessage = 'User is blacklisted';\n\t\t\t\t\t$this->setAPIResponse('error', $responseMessage, 401, $userInfo);\n\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($group !== null) {\n\t\t\t\tif ((isset($_SERVER['HTTP_X_FORWARDED_SERVER']) && $_SERVER['HTTP_X_FORWARDED_SERVER'] == 'traefik') || $this->config['traefikAuthEnable']) {\n\t\t\t\t\t$return = (isset($_SERVER['HTTP_X_FORWARDED_HOST']) && isset($_SERVER['HTTP_X_FORWARDED_URI']) && isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) ? '?return=' . $_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . $_SERVER['HTTP_X_FORWARDED_HOST'] . $_SERVER['HTTP_X_FORWARDED_URI'] : '';\n\t\t\t\t\t$redirectDomain = ($this->config['traefikDomainOverride'] !== '') ? $this->config['traefikDomainOverride'] : $this->getServerPath();\n\t\t\t\t\t$redirect = 'Location: ' . $redirectDomain . $return;\n\t\t\t\t}\n\t\t\t\tif ($this->qualifyRequest($group) && $unlocked) {\n\t\t\t\t\theader(\"X-Organizr-User: $currentUser\");\n\t\t\t\t\theader(\"X-Organizr-Email: $currentEmail\");\n\t\t\t\t\theader(\"X-Organizr-Group: $currentGroup\");\n\t\t\t\t\t$responseMessage = 'User is authorized';\n\t\t\t\t\t$this->setAPIResponse('success', $responseMessage, 200, $userInfo);\n\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t} else {\n\t\t\t\t\tif (!$redirect) {\n\t\t\t\t\t\t$this->setAPIResponse('error', $responseMessage, 401, $userInfo);\n\t\t\t\t\t\t$this->logger->debug($responseMessage, $userInfo);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texit(http_response_code(401) . header($redirect));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Missing info', 401);\n\t\t\t\t$this->logger->debug('Missing info', $userInfo);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Organizr is not setup or an error occurred', 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getIpInfo($ip = null)\n\t{\n\t\tif (!$ip) {\n\t\t\t$this->setResponse(422, 'No IP Address supplied');\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t$options = array('verify' => false);\n\t\t\t$response = Requests::get('https://ipinfo.io/' . $ip . '/?token=ddd0c072ad5021', array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\t$api = json_decode($response->body, true);\n\t\t\t\t$this->setResponse(200, null, $api);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setResponse(500, 'An error occurred', null);\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, 'An error occurred', $e->getMessage());\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function setAPIResponse($result = null, $message = null, $responseCode = null, $data = null)\n\t{\n\t\tif ($result) {\n\t\t\t$GLOBALS['api']['response']['result'] = $result;\n\t\t}\n\t\tif ($message) {\n\t\t\t$GLOBALS['api']['response']['message'] = $message;\n\t\t}\n\t\tif ($responseCode) {\n\t\t\t$GLOBALS['responseCode'] = $responseCode;\n\t\t}\n\t\tif ($data) {\n\t\t\t$GLOBALS['api']['response']['data'] = $data;\n\t\t}\n\t}\n\n\tpublic function setResponse(int $responseCode = 200, string $message = null, $data = null)\n\t{\n\t\tswitch ($responseCode) {\n\t\t\tcase 200:\n\t\t\tcase 201:\n\t\t\tcase 204:\n\t\t\t\t$result = 'success';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$result = 'error';\n\t\t\t\tbreak;\n\t\t}\n\t\t$GLOBALS['api']['response']['result'] = $result;\n\t\tif ($message) {\n\t\t\t$GLOBALS['api']['response']['message'] = $message;\n\t\t}\n\t\tif ($responseCode) {\n\t\t\t$GLOBALS['responseCode'] = $responseCode;\n\t\t}\n\t\tif ($data) {\n\t\t\t$GLOBALS['api']['response']['data'] = $data;\n\t\t}\n\t}\n\n\tpublic function printWarningsAndErrors()\n\t{\n\t\tif (isset($GLOBALS['api']['response']['exceptions'])) {\n\t\t\t$this->prettyPrint($GLOBALS['api']['response']['exceptions'], true);\n\t\t} else {\n\t\t\t$this->prettyPrint('No Errors');\n\t\t}\n\t}\n\n\tpublic function setAPIErrorResponse($number, $message, $file, $line)\n\t{\n\t\tif (!(error_reporting() & $number)) {\n\t\t\treturn;\n\t\t}\n\t\t$exceptions = [\n\t\t\tE_ERROR => 'E_ERROR',\n\t\t\tE_WARNING => 'E_WARNING',\n\t\t\tE_PARSE => 'E_PARSE',\n\t\t\tE_NOTICE => 'E_NOTICE',\n\t\t\tE_CORE_ERROR => 'E_CORE_ERROR',\n\t\t\tE_CORE_WARNING => 'E_CORE_WARNING',\n\t\t\tE_COMPILE_ERROR => 'E_COMPILE_ERROR',\n\t\t\tE_COMPILE_WARNING => 'E_COMPILE_WARNING',\n\t\t\tE_USER_ERROR => 'E_USER_ERROR',\n\t\t\tE_USER_WARNING => 'E_USER_WARNING',\n\t\t\tE_USER_NOTICE => 'E_USER_NOTICE',\n\t\t\tE_STRICT => 'E_STRICT',\n\t\t\tE_RECOVERABLE_ERROR => 'E_RECOVERABLE_ERROR',\n\t\t\tE_DEPRECATED => 'E_DEPRECATED',\n\t\t\tE_USER_DEPRECATED => 'E_USER_DEPRECATED',\n\t\t\tE_ALL => 'E_ALL'\n\t\t];\n\t\tswitch ($number) {\n\t\t\tcase E_USER_ERROR:\n\t\t\tcase E_ERROR:\n\t\t\tcase E_CORE_ERROR:\n\t\t\tcase E_COMPILE_ERROR:\n\t\t\tcase E_RECOVERABLE_ERROR:\n\t\t\t\t$type = 'errors';\n\t\t\t\tbreak;\n\t\t\tcase E_USER_WARNING:\n\t\t\tcase E_WARNING:\n\t\t\tcase E_CORE_WARNING:\n\t\t\tcase E_COMPILE_WARNING:\n\t\t\t\t$type = 'warnings';\n\t\t\t\tbreak;\n\t\t\tcase E_USER_NOTICE:\n\t\t\tcase E_PARSE:\n\t\t\tcase E_DEPRECATED:\n\t\t\tcase E_USER_DEPRECATED:\n\t\t\tcase E_NOTICE:\n\t\t\t\t$type = 'notice';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$type = 'other';\n\t\t\t\tbreak;\n\t\t}\n\t\tif ($this->qualifyRequest(1)) {\n\t\t\t$count = isset($GLOBALS['api']['response']['exceptions'][$type]) ? count($GLOBALS['api']['response']['exceptions'][$type]) : 0;\n\t\t\tif ($count <= 10) {\n\t\t\t\t$GLOBALS['api']['response']['exceptions'][$type][] = [\n\t\t\t\t\t'error' => $exceptions[$number],\n\t\t\t\t\t'message' => $message,\n\t\t\t\t\t'file' => $file,\n\t\t\t\t\t'line' => $line\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\t$this->handleError($exceptions[$number], $message, $file, $line);\n\t}\n\n\tpublic function setErrorResponse($number, $message, $file, $line)\n\t{\n\t\t$error = [\n\t\t\t'error' => $number,\n\t\t\t'message' => $message,\n\t\t\t'file' => $file,\n\t\t\t'line' => $line\n\t\t];\n\t\t$this->handleError($number, $message, $file, $line);\n\t\t//$this->prettyPrint($error, true);\n\t}\n\n\tpublic function handleError($number, $message, $file, $line)\n\t{\n\t\t$error = sprintf('Organizr %s:  %s in %s on line %d', $number, $message, $file, $line);\n\t\terror_log($error);\n\t\t$this->setLoggerChannel('Server Error')->warning('PHP Error', $error);\n\t}\n\n\tpublic function checkRoute($request)\n\t{\n\t\t$route = '/api/v2/' . explode('api/v2/', $request->getUri()->getPath())[1];\n\t\t$method = $request->getMethod();\n\t\t$data = $this->apiData($request);\n\t\tif (!in_array($route, $GLOBALS['bypass'])) {\n\t\t\tif ($this->isApprovedRequest($method, $data) === false) {\n\t\t\t\t$this->setAPIResponse('error', 'Not authorized for current Route: ' . $route, 401);\n\t\t\t\t$this->setLoggerChannel('API Security');\n\t\t\t\t$this->logger->notice('Killed Attack From [' . ($_SERVER['HTTP_REFERER'] ?? 'No Referer') . ']');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function apiData($request, $decode = true)\n\t{\n\t\tswitch ($request->getMethod()) {\n\t\t\tcase 'POST':\n\t\t\t\tif (stripos($request->getHeaderLine('Content-Type'), 'application/json') !== false) {\n\t\t\t\t\treturn $decode ? json_decode(file_get_contents('php://input', 'r'), true) : file_get_contents('php://input', 'r');\n\t\t\t\t} else {\n\t\t\t\t\treturn $request->getParsedBody();\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tif (stripos($request->getHeaderLine('Content-Type'), 'application/json') !== false) {\n\t\t\t\t\treturn $decode ? json_decode(file_get_contents('php://input', 'r'), true) : file_get_contents('php://input', 'r');\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t}\n\t}\n\n\tpublic function getPlugins($returnType = 'all')\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tswitch ($returnType) {\n\t\t\t\tcase 'enabled':\n\t\t\t\t\t$returnType = 'enabled';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disabled':\n\t\t\t\t\t$returnType = 'disabled';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$returnType = 'all';\n\t\t\t}\n\t\t\t$pluginList = [];\n\t\t\tforeach ($GLOBALS['plugins'] as $key => $value) {\n\t\t\t\tif (strpos($value['license'], $this->config['license']) !== false) {\n\t\t\t\t\t$GLOBALS['plugins'][$key]['enabled'] = $this->config[$value['configPrefix'] . '-enabled'] ?? false;\n\t\t\t\t\tif ($returnType == 'all') {\n\t\t\t\t\t\t$pluginList[$key] = $GLOBALS['plugins'][$key];\n\t\t\t\t\t} elseif ($returnType == 'enabled' && $GLOBALS['plugins'][$key]['enabled'] == true) {\n\t\t\t\t\t\t$pluginList[$key] = $GLOBALS['plugins'][$key];\n\t\t\t\t\t} elseif ($returnType == 'disabled' && $GLOBALS['plugins'][$key]['enabled'] == false) {\n\t\t\t\t\t\t$pluginList[$key] = $GLOBALS['plugins'][$key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tasort($pluginList);\n\t\t\treturn $pluginList;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function refreshCookieName()\n\t{\n\t\t$this->cookieName = $this->config['uuid'] !== '' ? 'organizr_token_' . $this->config['uuid'] : 'organizr_token_temp';\n\t}\n\n\tpublic function favIcons($rootPath = '')\n\t{\n\t\t$favicon = '\n\t\t\t<link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"' . $rootPath . 'plugins/images/favicon/apple-touch-icon.png\">\n\t\t\t<link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"' . $rootPath . 'plugins/images/favicon/favicon-32x32.png\">\n\t\t\t<link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"' . $rootPath . 'plugins/images/favicon/favicon-16x16.png\">\n\t\t\t<link rel=\"manifest\" href=\"' . $rootPath . 'plugins/images/favicon/site.webmanifest\" crossorigin=\"use-credentials\">\n\t\t\t<link rel=\"mask-icon\" href=\"' . $rootPath . 'plugins/images/favicon/safari-pinned-tab.svg\" color=\"#5bbad5\">\n\t\t\t<link rel=\"shortcut icon\" href=\"' . $rootPath . 'plugins/images/favicon/favicon.ico\">\n\t\t\t<meta name=\"msapplication-TileColor\" content=\"#da532c\">\n\t\t\t<meta name=\"msapplication-TileImage\" content=\"' . $rootPath . 'plugins/images/favicon/mstile-144x144.png\">\n\t\t\t<meta name=\"msapplication-config\" content=\"' . $rootPath . 'plugins/images/favicon/browserconfig.xml\">\n\t\t\t<meta name=\"theme-color\" content=\"#ffffff\">\n\t\t';\n\t\tif ($this->config['favIcon'] !== '' && $rootPath !== '') {\n\t\t\t$this->config['favIcon'] = str_replace('data/favicon', $rootPath . 'data/favicon', $this->config['favIcon']);\n\t\t}\n\t\treturn ($this->config['favIcon'] == '') ? $favicon : $this->config['favIcon'];\n\t}\n\n\tpublic function pluginGlobalList()\n\t{\n\t\t$pluginSearch = '-enabled';\n\t\t$pluginInclude = '-include';\n\t\t$plugins = array_filter($this->config, function ($k) use ($pluginSearch) {\n\t\t\treturn stripos($k, $pluginSearch) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t\t$plugins['includes'] = array_filter($this->config, function ($k) use ($pluginInclude) {\n\t\t\treturn stripos($k, $pluginInclude) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t\treturn $plugins;\n\t}\n\n\tpublic function googleTracking()\n\t{\n\t\tif ($this->config['gaTrackingID'] !== '') {\n\t\t\treturn '\n\t\t\t\t<script src=\"https://apis.google.com/js/client.js?onload=googleApiClientReady\"></script>\n\t\t\t\t<script async src=\"https://www.googletagmanager.com/gtag/js?id=' . $this->config['gaTrackingID'] . '\"></script>\n\t\t\t\t<script>\n\t\t\t\t\twindow.dataLayer = window.dataLayer || [];\n\t\t\t\t\tfunction gtag(){dataLayer.push(arguments);}\n\t\t\t\t\tgtag(\"js\", new Date());\n\t\t\t\t\tgtag(\"config\",\"' . $this->config['gaTrackingID'] . '\");\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic function matchBrackets($text, $brackets = 's')\n\t{\n\t\tswitch ($brackets) {\n\t\t\tcase 's':\n\t\t\tcase 'square':\n\t\t\t\t$pattern = '#\\[(.*?)\\]#';\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\tcase 'curly':\n\t\t\t\t$pattern = '#\\((.*?)\\)#';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t\tpreg_match($pattern, $text, $match);\n\t\treturn $match[1];\n\t}\n\n\tpublic function languagePacks($encode = false)\n\t{\n\t\t$files = array();\n\t\tforeach (glob(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'js' . DIRECTORY_SEPARATOR . 'langpack' . DIRECTORY_SEPARATOR . \"*.json\") as $filename) {\n\t\t\tif (strpos(basename($filename), '[') !== false) {\n\t\t\t\t$explode = explode('[', basename($filename));\n\t\t\t\t$files[] = array(\n\t\t\t\t\t'filename' => basename($filename),\n\t\t\t\t\t'code' => $explode[0],\n\t\t\t\t\t'language' => $this->matchBrackets(basename($filename))\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tusort($files, function ($a, $b) {\n\t\t\treturn $a['language'] <=> $b['language'];\n\t\t});\n\t\treturn ($encode) ? json_encode($files) : $files;\n\t}\n\n\tpublic function getRootPath()\n\t{\n\t\t$count = (count(explode('/', $_SERVER['REQUEST_URI']))) - 2;\n\t\t$rootPath = '';\n\t\t$rootPath .= str_repeat('../', $count);\n\t\treturn $rootPath;\n\t}\n\n\tpublic function setTheme($theme = null, $rootPath = '')\n\t{\n\t\t$theme = $theme ?? $this->config['theme'];\n\t\t$themeInformation = $this->validateTheme($theme);\n\t\tif (!$themeInformation) {\n\t\t\t$themeInformation = $this->defaultThemeInformation()['information']['Organizr'];\n\t\t}\n\t\treturn '<link id=\"theme\" href=\"' . $rootPath . $themeInformation['path'] . '/' . $themeInformation['name'] . '.css?v=' . $this->fileHash . '\" rel=\"stylesheet\">';\n\t}\n\n\tpublic function validateTheme($theme = null)\n\t{\n\t\t$theme = $theme ?? $this->config['theme'];\n\t\t$information = $this->getAllThemesInformation();\n\t\tif (isset($information[$theme])) {\n\t\t\treturn $information[$theme];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getAllThemesInformation()\n\t{\n\t\t$organizrThemes = $this->defaultThemeInformation();\n\t\t$userThemes = $this->userThemeInformation();\n\t\tif ($userThemes) {\n\t\t\treturn array_merge($organizrThemes['information'], $userThemes);\n\t\t}\n\t\treturn $organizrThemes['information'];\n\t}\n\n\tpublic function userThemeInformation()\n\t{\n\t\t$themes = $this->config['installedThemes'];\n\t\tif (is_array($themes)) {\n\t\t\treturn $themes;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpublic function defaultThemeInformation()\n\t{\n\t\treturn [\n\t\t\t'files' => ['Blue', 'Organizr'],\n\t\t\t'information' => [\n\t\t\t\t'Blue' => [\n\t\t\t\t\t'name' => 'Blue',\n\t\t\t\t\t'repo' => null,\n\t\t\t\t\t'version' => '1.0.0',\n\t\t\t\t\t'path' => 'css/themes'\n\t\t\t\t],\n\t\t\t\t'Organizr' => [\n\t\t\t\t\t'name' => 'Organizr',\n\t\t\t\t\t'repo' => null,\n\t\t\t\t\t'version' => '1.0.0',\n\t\t\t\t\t'path' => 'css/themes'\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function getAllThemes()\n\t{\n\t\t$organizrThemes = $this->getOrganizrThemes();\n\t\t$userThemes = $this->getUserThemes();\n\t\tif ($userThemes) {\n\t\t\treturn array_merge($organizrThemes, $userThemes);\n\t\t}\n\t\treturn $organizrThemes;\n\t}\n\n\tpublic function getOrganizrThemes()\n\t{\n\t\t$themes = [];\n\t\t$themeFolder = $this->root . DIRECTORY_SEPARATOR . 'css' . DIRECTORY_SEPARATOR . 'themes';\n\t\t$originalThemes = $this->defaultThemeInformation();\n\t\tforeach (glob($themeFolder . DIRECTORY_SEPARATOR . '*.css') as $filename) {\n\t\t\t$file = preg_replace('/\\\\.[^.\\\\s]{3,4}$/', '', basename($filename));\n\t\t\tif (in_array($file, $originalThemes['files'])) {\n\t\t\t\t$themes[] = array(\n\t\t\t\t\t'name' => $file,\n\t\t\t\t\t'value' => $file,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function getUserThemes()\n\t{\n\t\t$themes = [];\n\t\t$themeFolder = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes';\n\t\t$userThemesInformation = $this->userThemeInformation();\n\t\tif (file_exists($themeFolder)) {\n\t\t\t$directoryIterator = new RecursiveDirectoryIterator($themeFolder, FilesystemIterator::SKIP_DOTS);\n\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\tif (stripos($info->getFilename(), '.css') !== false) {\n\t\t\t\t\t$file = preg_replace('/\\\\.[^.\\\\s]{3,4}$/', '', basename($info->getFilename()));\n\t\t\t\t\tif (key_exists($file, $userThemesInformation)) {\n\t\t\t\t\t\t$themes[] = [\n\t\t\t\t\t\t\t'name' => ucwords(str_replace('_', ' ', $file)),\n\t\t\t\t\t\t\t'value' => $file,\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function setPluginListNameFromConfigPrefix()\n\t{\n\t\tforeach ($GLOBALS['plugins'] as $pluginName => $pluginInfo) {\n\t\t\t$GLOBALS['pluginInfo'][strtolower($pluginInfo['configPrefix'])] = $pluginInfo;\n\t\t\t$GLOBALS['pluginInfo'][strtolower($pluginName)] = $pluginInfo;\n\t\t}\n\t}\n\n\tpublic function pluginFilesFromDirectory($directory, $webDirectory, $type, $settings = false, $rootPath = '')\n\t{\n\t\t$files = '';\n\t\tif (file_exists($directory)) {\n\t\t\t$directoryIterator = new RecursiveDirectoryIterator($directory, FilesystemIterator::SKIP_DOTS);\n\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'js':\n\t\t\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\t\t\tif (pathinfo($info->getPathname(), PATHINFO_EXTENSION) == 'js') {\n\t\t\t\t\t\t\t$pluginEnabled = false;\n\t\t\t\t\t\t\t$keyOriginal = strtoupper(basename(dirname($info->getPathname())));\n\t\t\t\t\t\t\t$key = str_replace('-SETTINGS', '', $keyOriginal);\n\t\t\t\t\t\t\t$continue = false;\n\t\t\t\t\t\t\tif ($settings) {\n\t\t\t\t\t\t\t\tif ($info->getFilename() == 'settings.js') {\n\t\t\t\t\t\t\t\t\t$continue = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ($info->getFilename() !== 'settings.js') {\n\t\t\t\t\t\t\t\t\t$continue = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tswitch ($key) {\n\t\t\t\t\t\t\t\tcase 'PHP-MAILER':\n\t\t\t\t\t\t\t\t\t$key = 'PHPMAILER';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'NGXC':\n\t\t\t\t\t\t\t\t\t$key = 'ngxc';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t$key = $key;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (isset($this->config[$key . '-enabled'])) {\n\t\t\t\t\t\t\t\tif ($this->config[$key . '-enabled']) {\n\t\t\t\t\t\t\t\t\t$pluginEnabled = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($pluginEnabled || $settings) {\n\t\t\t\t\t\t\t\tif ($continue) {\n\t\t\t\t\t\t\t\t\t$version = $GLOBALS['pluginInfo'][strtolower($key)]['version'] ?? $this->fileHash;\n\t\t\t\t\t\t\t\t\t$files .= '<script src=\"' . $rootPath . $webDirectory . basename(dirname($info->getPathname())) . '/' . basename($info->getFilename()) . '?v=' . $version . '\" defer=\"true\"></script>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'css':\n\t\t\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\t\t\tif (pathinfo($info->getPathname(), PATHINFO_EXTENSION) == 'css') {\n\t\t\t\t\t\t\t$key = basename(dirname($info->getPathname()));\n\t\t\t\t\t\t\t$version = $GLOBALS['pluginInfo'][strtolower($key)]['version'] ?? $this->fileHash;\n\t\t\t\t\t\t\t$files .= '<link href=\"' . $rootPath . $webDirectory . basename(dirname($info->getPathname())) . '/' . basename($info->getFilename()) . '?v=' . $version . '\" rel=\"stylesheet\">';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $files;\n\t}\n\n\tpublic function pluginFiles($type, $settings = false, $rootPath = '')\n\t{\n\t\t$files = '';\n\t\t$organizrPlugins = $this->root . DIRECTORY_SEPARATOR . 'api' . DIRECTORY_SEPARATOR . 'plugins';\n\t\t$files .= $this->pluginFilesFromDirectory($organizrPlugins, 'api/plugins/', $type, $settings);\n\t\t$userPlugins = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins';\n\t\t$files .= $this->pluginFilesFromDirectory($userPlugins, 'data/plugins/', $type, $settings);\n\t\treturn $files;\n\t}\n\n\tpublic function formKey($script = true)\n\t{\n\t\tif (isset($this->config['organizrHash'])) {\n\t\t\tif ($this->config['organizrHash'] !== '') {\n\t\t\t\t$hash = password_hash(substr($this->config['organizrHash'], 2, 10), PASSWORD_BCRYPT);\n\t\t\t\treturn ($script) ? '<script>local(\"s\",\"formKey\",\"' . $hash . '\");</script>' : $hash;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate function checkPHP()\n\t{\n\t\tif (!(version_compare(PHP_VERSION, $this->minimumPHP) >= 0)) {\n\t\t\tdie($this->showHTML('PHP Version', 'Organizr needs PHP Version: ' . $this->minimumPHP . '<br/> You have PHP Version: ' . PHP_VERSION));\n\t\t}\n\t}\n\n\tprivate function checkWritableDB()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif (isset($this->config['dbLocation']) && isset($this->config['dbName'])) {\n\t\t\t\t$db = is_writable($this->config['dbLocation'] . $this->config['dbName']);\n\t\t\t\tif (!$db) {\n\t\t\t\t\t//die($this->showHTML('Organizr DB is not writable!', 'Please check permissions and/or disk space'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdie($this->showHTML('Config File Malformed', 'dbLocation and/or dbName is not listed in config.php'));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Create config file in the return syntax\n\tpublic function createConfig($array, $path = null, $nest = 0)\n\t{\n\t\t$path = ($path) ? $path : $this->userConfigPath;\n\t\t// Define Initial Value\n\t\t$output = array();\n\t\t// Sort Items\n\t\tksort($array);\n\t\t// Update the current config version\n\t\tif (!$nest) {\n\t\t\t// Inject Current Version\n\t\t\t$output[] = \"\\t'configVersion' => '\" . (isset($array['apply_CONFIG_VERSION']) ? $array['apply_CONFIG_VERSION'] : $this->version) . \"'\";\n\t\t}\n\t\tunset($array['configVersion']);\n\t\tunset($array['apply_CONFIG_VERSION']);\n\t\t// Process Settings\n\t\tforeach ($array as $k => $v) {\n\t\t\t$allowCommit = true;\n\t\t\t$item = '';\n\t\t\tswitch (gettype($v)) {\n\t\t\t\tcase 'boolean':\n\t\t\t\t\t$item = ($v ? 'true' : 'false');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'integer':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'NULL':\n\t\t\t\t\t$item = $v;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\t$item = \"'\" . str_replace(array('\\\\', \"'\"), array('\\\\\\\\', \"\\'\"), $v) . \"'\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'array':\n\t\t\t\t\t$item = $this->createConfig($v, false, $nest + 1);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$allowCommit = false;\n\t\t\t}\n\t\t\tif ($allowCommit) {\n\t\t\t\t$output[] = str_repeat(\"\\t\", $nest + 1) . \"'$k' => $item\";\n\t\t\t}\n\t\t}\n\t\t// Build output\n\t\t$output = (!$nest ? \"<?php\\nreturn \" : '') . \"[\\n\" . implode(\",\\n\", $output) . \"\\n\" . str_repeat(\"\\t\", $nest) . ']' . (!$nest ? ';' : '');\n\t\tif (!$nest && $path) {\n\t\t\t$pathDigest = pathinfo($path);\n\t\t\t@mkdir($pathDigest['dirname'], 0770, true);\n\t\t\tif (file_exists($path)) {\n\t\t\t\trename($path, $pathDigest['dirname'] . '/' . $pathDigest['filename'] . '.bak.php');\n\t\t\t}\n\t\t\t$file = fopen($path, 'w');\n\t\t\tfwrite($file, $output);\n\t\t\tfclose($file);\n\t\t\tif (file_exists($path)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn $output;\n\t\t}\n\t}\n\n\t// Commit new values to the configuration\n\tpublic function updateConfig($new, $current = false)\n\t{\n\t\t// Get config if not supplied\n\t\tif ($current === false) {\n\t\t\t//$current = $this->loadConfig();\n\t\t\t$current = $this->config;\n\t\t} elseif (is_string($current) && is_file($current)) {\n\t\t\t$current = $this->loadConfig($current);\n\t\t}\n\t\t// Inject Parts\n\t\tforeach ($new as $k => $v) {\n\t\t\t$current[$k] = $v;\n\t\t\t$this->config[$k] = $v;\n\t\t}\n\t\t// Return Create\n\t\treturn $this->createConfig($current);\n\t}\n\n\tpublic function removeConfigItem($new, $current = false)\n\t{\n\t\t// Get config if not supplied\n\t\tif ($current === false) {\n\t\t\t$current = $this->config;\n\t\t} elseif (is_string($current) && is_file($current)) {\n\t\t\t$current = $this->loadConfig($current);\n\t\t}\n\t\t// Inject Parts\n\t\tforeach ($new as $k) {\n\t\t\tif (isset($current[$k])) {\n\t\t\t\t$current['deletedConfigItems'][$k] = $current[$k];\n\t\t\t\t$this->config['deletedConfigItems'][$k] = $current[$k];\n\t\t\t}\n\t\t\tunset($current[$k]);\n\t\t\tunset($this->config[$k]);\n\t\t}\n\t\t// Return Create\n\t\treturn $this->createConfig($current);\n\t}\n\n\tpublic function loadConfig($path = null)\n\t{\n\t\t$path = ($path) ? $path : $this->userConfigPath;\n\t\tif (!is_file($path)) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn (array)call_user_func(function () use ($path) {\n\t\t\t\treturn include($path);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic function fillDefaultConfig($array)\n\t{\n\t\t$path = $this->defaultConfigPath;\n\t\tif (is_string($path)) {\n\t\t\t$loadedDefaults = $this->loadConfig($path);\n\t\t} else {\n\t\t\t$loadedDefaults = $path;\n\t\t}\n\t\t// Include all plugin config files\n\t\t$folder = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'plugins';\n\t\t$directoryIterator = new RecursiveDirectoryIterator($folder, FilesystemIterator::SKIP_DOTS);\n\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\tforeach ($iteratorIterator as $info) {\n\t\t\tif ($info->getFilename() == 'config.php') {\n\t\t\t\t$loadedDefaults = array_merge($loadedDefaults, $this->loadConfig($info->getPathname()));\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * Include all custom Plugin routes\n\t\t */\n\t\tif (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins')) {\n\t\t\t$folder = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins';\n\t\t\t$directoryIterator = new RecursiveDirectoryIterator($folder, FilesystemIterator::SKIP_DOTS);\n\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\tif ($info->getFilename() == 'config.php') {\n\t\t\t\t\t$loadedDefaults = array_merge($loadedDefaults, $this->loadConfig($info->getPathname()));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (is_array($loadedDefaults) ? $this->fillDefaultConfig_recurse($array, $loadedDefaults) : false);\n\t}\n\n\tpublic function fillDefaultConfig_recurse($current, $defaults)\n\t{\n\t\tforeach ($defaults as $k => $v) {\n\t\t\tif (!isset($current[$k])) {\n\t\t\t\t$current[$k] = $v;\n\t\t\t} elseif (is_array($current[$k]) && is_array($v)) {\n\t\t\t\t$current[$k] = $this->fillDefaultConfig_recurse($current[$k], $v);\n\t\t\t}\n\t\t}\n\t\treturn $current;\n\t}\n\n\tpublic function config($tries = 1)\n\t{\n\t\t// Load config or default\n\t\tif (file_exists($this->userConfigPath)) {\n\t\t\t$config = $this->fillDefaultConfig($this->loadConfig($this->userConfigPath));\n\t\t} else {\n\t\t\t$config = $this->fillDefaultConfig($this->loadConfig($this->defaultConfigPath));\n\t\t}\n\t\tif ((!is_array($config) || !file_exists($this->userConfigPath)) && $tries < 5) {\n\t\t\t$tries++;\n\t\t\treturn $this->config($tries);\n\t\t}\n\t\treturn $config;\n\t}\n\n\tpublic function combineConfig($array)\n\t{\n\t\t$this->config = array_merge($this->config, $array);\n\t\treturn $this->config;\n\t}\n\n\tpublic function status($action = false)\n\t{\n\t\t$status = [];\n\t\t$dependenciesActive = [];\n\t\t$dependenciesInactive = [];\n\t\t$extensions = ['PDO_SQLITE', 'PDO', 'SQLITE3', 'zip', 'cURL', 'openssl', 'simplexml', 'json', 'session', 'filter'];\n\t\t$functions = ['hash', 'fopen', 'fsockopen', 'fwrite', 'fclose', 'readfile'];\n\t\tforeach ($extensions as $check) {\n\t\t\tif (extension_loaded($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\tforeach ($functions as $check) {\n\t\t\tif (function_exists($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\t$status['writable'] = is_writable(dirname(__DIR__, 2));\n\t\t$status['minVersion'] = (version_compare(PHP_VERSION, $this->minimumPHP) >= 0);\n\t\t$status['os'] = $this->getOS();\n\t\t$status['php'] = phpversion();\n\t\t$status['userConfigPathExists'] = file_exists($this->userConfigPath);\n\t\tif (!($status['minVersion'])) {\n\t\t\t$status['action'] = 'php';\n\t\t\tif ($action) {\n\t\t\t\theader($this->getServerPath() . 'api/v2/organizr/error');\n\t\t\t\texit;\n\t\t\t}\n\t\t} elseif (count($dependenciesInactive) > 0) {\n\t\t\t$status['action'] = 'dependencies';\n\t\t} elseif (!$status['writable']) {\n\t\t\t$status['action'] = 'permission';\n\t\t} elseif (!$status['userConfigPathExists']) {\n\t\t\t$status['action'] = 'wizard';\n\t\t} else {\n\t\t\t$status['action'] = 'launch';\n\t\t\tif ($action) {\n\t\t\t\techo '<script type=\"text/javascript\"> window.location.href=\"' . $this->getServerPath() . 'api/v2/organizr/error' . '\";</script>';\n\t\t\t\tdie(header($this->getServerPath() . 'api/v2/organizr/error'));\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t\treturn $status;\n\t}\n\n\tpublic function launch()\n\t{\n\t\t$status = array();\n\t\t$dependenciesActive = array();\n\t\t$dependenciesInactive = array();\n\t\t$extensions = array('PDO_SQLITE', 'PDO', 'SQLITE3', 'zip', 'cURL', 'openssl', 'simplexml', 'json', 'session', 'filter');\n\t\t$functions = array('hash', 'fopen', 'fsockopen', 'fwrite', 'fclose', 'readfile');\n\t\tforeach ($extensions as $check) {\n\t\t\tif (extension_loaded($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\tforeach ($functions as $check) {\n\t\t\tif (function_exists($check)) {\n\t\t\t\tarray_push($dependenciesActive, $check);\n\t\t\t} else {\n\t\t\t\tarray_push($dependenciesInactive, $check);\n\t\t\t}\n\t\t}\n\t\tif (!file_exists($this->userConfigPath)) {\n\t\t\t$status['status'] = 'wizard';//wizard - ok for test\n\t\t}\n\t\tif (count($dependenciesInactive) > 0 || !is_writable(dirname(__DIR__, 2)) || !(version_compare(PHP_VERSION, $this->minimumPHP) >= 0)) {\n\t\t\t$status['status'] = 'dependencies';\n\t\t}\n\t\t$status['status'] = ($status['status']) ?? 'ok';\n\t\t$status['writable'] = is_writable(dirname(__DIR__, 2)) ? 'yes' : 'no';\n\t\t$status['minVersion'] = (version_compare(PHP_VERSION, $this->minimumPHP) >= 0) ? 'yes' : 'no';\n\t\t$status['dependenciesActive'] = $dependenciesActive;\n\t\t$status['dependenciesInactive'] = $dependenciesInactive;\n\t\t$status['version'] = $this->version;\n\t\t$status['os'] = $this->getOS();\n\t\t$status['php'] = phpversion();\n\t\t$status['php_user'] = get_current_user();\n\t\t$status['userConfigPath'] = $this->userConfigPath;\n\t\treturn $status;\n\t}\n\n\tpublic function hasDB()\n\t{\n\t\treturn (file_exists($this->userConfigPath)) ?? false;\n\t}\n\n\tpublic function hasCookie()\n\t{\n\t\treturn ($_COOKIE[$this->cookieName]) ?? false;\n\t}\n\n\tpublic function getGuest()\n\t{\n\t\t$guest = array(\n\t\t\t'group' => 'Guest',\n\t\t\t'group_id' => 999,\n\t\t\t'image' => 'plugins/images/groups/guest.png'\n\t\t);\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'SELECT * FROM groups WHERE `group_id` = 999'\n\t\t\t),\n\t\t];\n\t\treturn $this->hasDB() ? $this->processQueries($response) : $guest;\n\t}\n\n\tpublic function getSchema()\n\t{\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => 'SELECT name, sql FROM sqlite_master WHERE type=\\'table\\' ORDER BY name'\n\t\t\t\t),\n\t\t\t];\n\t\t\treturn $this->hasDB() ? $this->processQueries($response) : 'Database not setup yet';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function guestUser()\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->getUserLevel() !== 999) {\n\t\t\t\t$guest = array(\n\t\t\t\t\t\"token\" => null,\n\t\t\t\t\t\"tokenDate\" => null,\n\t\t\t\t\t\"tokenExpire\" => null,\n\t\t\t\t\t\"username\" => \"Organizr API\",\n\t\t\t\t\t\"uid\" => $this->guestHash(0, 5),\n\t\t\t\t\t\"group\" => 'Admin',\n\t\t\t\t\t\"groupID\" => 0,\n\t\t\t\t\t\"email\" => null,\n\t\t\t\t\t//\"groupImage\"=>getGuest()['image'],\n\t\t\t\t\t\"image\" => $this->getGuest()['image'],\n\t\t\t\t\t\"userID\" => null,\n\t\t\t\t\t\"loggedin\" => false,\n\t\t\t\t\t\"locked\" => false,\n\t\t\t\t\t\"tokenList\" => null,\n\t\t\t\t\t\"authService\" => null\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$guest = $guest ?? array(\n\t\t\t\t\"token\" => null,\n\t\t\t\t\"tokenDate\" => null,\n\t\t\t\t\"tokenExpire\" => null,\n\t\t\t\t\"username\" => \"Guest\",\n\t\t\t\t\"uid\" => $this->guestHash(0, 5),\n\t\t\t\t\"group\" => $this->getGuest()['group'],\n\t\t\t\t\"groupID\" => $this->getGuest()['group_id'],\n\t\t\t\t\"email\" => null,\n\t\t\t\t//\"groupImage\"=>getGuest()['image'],\n\t\t\t\t\"image\" => $this->getGuest()['image'],\n\t\t\t\t\"userID\" => null,\n\t\t\t\t\"loggedin\" => false,\n\t\t\t\t\"locked\" => false,\n\t\t\t\t\"tokenList\" => null,\n\t\t\t\t\"authService\" => null\n\t\t\t);\n\t\treturn $guest;\n\t}\n\n\tpublic function getAllUserTokens($id, $includeAllFields = true)\n\t{\n\t\t$select = $includeAllFields ? '*' : 'token, ip, id, expires, created';\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT ' . $select . ' FROM `tokens` WHERE user_id = ? AND expires > ?',\n\t\t\t\t\t[$id],\n\t\t\t\t\t[$this->currentTime]\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t)\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserByEmail($email)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users WHERE email = ? COLLATE NOCASE',\n\t\t\t\t\t$email\n\t\t\t\t)\n\t\t\t)\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tprotected function invalidToken($token)\n\t{\n\t\tif (isset($_COOKIE[$this->cookieName])) {\n\t\t\tif ($token == $_COOKIE[$this->cookieName]) {\n\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t$this->logger->debug('Token was invalid - deleting cookie and user session');\n\t\t\t\t$this->coookie('delete', $this->cookieName);\n\t\t\t\t$this->user = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function validateToken($token, $api = false)\n\t{\n\t\t// Validate script\n\t\t$userInfo = $this->jwtParse($token);\n\t\t$validated = (bool)$userInfo;\n\t\tif ($validated == true) {\n\t\t\t$allTokens = $this->getAllUserTokens($userInfo['userID']);\n\t\t\t$user = $this->getUserById($userInfo['userID']);\n\t\t\t$tokenKey = $this->searchArray($allTokens, 'token', $token);\n\t\t\t$tokenCheck = ($tokenKey !== false);\n\t\t\tif (!$tokenCheck) {\n\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t$this->logger->debug('Token failed check against all token listings', $allTokens);\n\t\t\t\t$this->invalidToken($token);\n\t\t\t\tif ($api) {\n\t\t\t\t\t$this->setResponse(403, 'Token was not in approved list');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t// Check if user is on same browser as token\n\t\t\t\tif ($allTokens[$tokenKey]['browser'] !== $_SERVER ['HTTP_USER_AGENT']) {\n\t\t\t\t\t$this->setLoggerChannel('Authentication')->warning('Mismatch of useragent');\n\t\t\t\t\t$this->invalidToken($token);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ($api) {\n\t\t\t\t\t$this->setResponse(200, 'Token is valid');\n\t\t\t\t}\n\t\t\t\treturn array(\n\t\t\t\t\t'token' => $token,\n\t\t\t\t\t'tokenDate' => $userInfo['tokenDate'],\n\t\t\t\t\t'tokenExpire' => $userInfo['tokenExpire'],\n\t\t\t\t\t'username' => $user['username'] ?? $userInfo['username'],\n\t\t\t\t\t'uid' => $this->guestHash(0, 5),\n\t\t\t\t\t'group' => $user['group'] ?? $userInfo['group'],\n\t\t\t\t\t'groupID' => $user['group_id'] ?? $userInfo['groupID'],\n\t\t\t\t\t'email' => $user['email'] ?? $userInfo['email'],\n\t\t\t\t\t'image' => $user['image'] ?? $userInfo['image'],\n\t\t\t\t\t'userID' => $user['id'] ?? $userInfo['userID'],\n\t\t\t\t\t'loggedin' => true,\n\t\t\t\t\t'locked' => $user['locked'] ?? 0,\n\t\t\t\t\t'tokenList' => $allTokens,\n\t\t\t\t\t'authService' => (isset($user['auth_service'])) ? explode('::', $user['auth_service'])[0] : 'internal'\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif ($api) {\n\t\t\t\t$this->setResponse(403, 'Token was invalid');\n\t\t\t}\n\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t$this->logger->debug('User  token was invalid', ['token' => $token]);\n\t\t\t$this->invalidToken($token);\n\t\t}\n\t\tif ($api) {\n\t\t\t$this->setResponse(403, 'Token was invalid');\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getUserFromToken($token)\n\t{\n\t\t// Validate script\n\t\t$userInfo = $this->jwtParse($token);\n\t\t$validated = (bool)$userInfo;\n\t\tif ($validated == true) {\n\t\t\t$user = $this->getUserById($userInfo['userID']);\n\t\t\t$allTokens = $this->getAllUserTokens($userInfo['userID'], false);\n\t\t\treturn array(\n\t\t\t\t'token' => $token,\n\t\t\t\t'tokenDate' => $userInfo['tokenDate'],\n\t\t\t\t'tokenExpire' => $userInfo['tokenExpire'],\n\t\t\t\t'username' => $user['username'] ?? $userInfo['username'],\n\t\t\t\t'uid' => $this->guestHash(0, 5),\n\t\t\t\t'group' => $user['group'] ?? $userInfo['group'],\n\t\t\t\t'groupID' => $user['group_id'] ?? $userInfo['groupID'],\n\t\t\t\t'email' => $user['email'] ?? $userInfo['email'],\n\t\t\t\t'image' => $user['image'] ?? $userInfo['image'],\n\t\t\t\t'userID' => $user['id'] ?? $userInfo['userID'],\n\t\t\t\t'loggedin' => true,\n\t\t\t\t'locked' => $user['locked'] ?? 0,\n\t\t\t\t'tokenList' => $allTokens,\n\t\t\t\t'authService' => (isset($user['auth_service'])) ? explode('::', $user['auth_service'])[0] : 'internal'\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function defaultUserGroup()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'SELECT * FROM groups WHERE `default` = 1'\n\t\t\t)\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getAllTabs()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM tabs ORDER BY `order` ASC',\n\t\t\t\t'key' => 'tabs'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM categories ORDER BY `order` ASC',\n\t\t\t\t'key' => 'categories'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM groups ORDER BY `group_id` ASC',\n\t\t\t\t'key' => 'groups'\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\t$this->applyTabVariables($query['tabs']);\n\t\treturn $query;\n\t}\n\n\tpublic function applyTabVariables($tabs)\n\t{\n\t\t$variables = [\n\t\t\t'{domain}' => $this->getServer(),\n\t\t\t'{username}' => $this->user['username'],\n\t\t\t'{username_lower}' => $this->user['username'],\n\t\t\t'{email}' => $this->user['email'],\n\t\t\t'{group}' => $this->user['group'],\n\t\t\t'{group_id}' => $this->user['groupID'],\n\t\t\t'{komga}' => $_COOKIE['komga_token'] ?? ''\n\t\t];\n\t\tif (empty($tabs)) {\n\t\t\treturn $tabs;\n\t\t}\n\t\tforeach ($tabs as $id => $tab) {\n\t\t\t$tabs[$id]['url'] = $this->userDefinedIdReplacementLink($tab['url'], $variables);\n\t\t\t$tabs[$id]['url_local'] = $this->userDefinedIdReplacementLink($tab['url_local'], $variables);\n\t\t}\n\t\treturn $tabs;\n\t}\n\n\tpublic function getUsers()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM users'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => 'SELECT * FROM groups ORDER BY group_id ASC'\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function usernameTaken($username, $email, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetch',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM users WHERE `id` != ? AND (username = ? COLLATE NOCASE or email = ? COLLATE NOCASE)',\n\t\t\t\t\t\t$id,\n\t\t\t\t\t\t$username,\n\t\t\t\t\t\t$email\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetch',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM users WHERE username = ? COLLATE NOCASE or email = ? COLLATE NOCASE',\n\t\t\t\t\t\t[$username],\n\t\t\t\t\t\t[$email]\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function cleanPageName($page)\n\t{\n\t\treturn ($page) ? strtolower(str_replace(array('%20', ' ', '-', '_'), '_', $page)) : '';\n\t}\n\n\tpublic function cleanClassName($name, $char = '-')\n\t{\n\t\treturn ($name) ? (str_replace(array('%20', ' ', '-', '_'), $char, strtolower($name))) : '';\n\t}\n\n\tpublic function reverseCleanClassName($name)\n\t{\n\t\treturn ($name) ? (str_replace(array('%20', '-', '_'), ' ', strtolower($name))) : '';\n\t}\n\n\tpublic function getPageList()\n\t{\n\t\treturn $GLOBALS['organizrPages'];\n\t}\n\n\tpublic function getPage($page)\n\t{\n\t\tif (!$page) {\n\t\t\t$this->setAPIResponse('error', 'Page not setup', 409);\n\t\t\treturn null;\n\t\t}\n\t\t$pageFunction = 'get_page_' . $this->cleanPageName($page);\n\t\tif (function_exists($pageFunction)) {\n\t\t\treturn $pageFunction($this);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Page not setup', 409);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getUserLevel()\n\t{\n\t\t// Grab token\n\t\t$requesterToken = $this->getallheadersi()['token'] ?? ($_GET['apikey'] ?? false);\n\t\t$apiKey = ($this->config['organizrAPI']) ?? null;\n\t\t// Check token or API key\n\t\t// If API key, return 0 for admin\n\t\tif (strlen($requesterToken) == 20 && $requesterToken == $apiKey) {\n\t\t\t//DO API CHECK\n\t\t\treturn 0;\n\t\t} elseif (isset($this->user)) {\n\t\t\treturn $this->user['groupID'];\n\t\t}\n\t\t// All else fails?  return guest id\n\t\treturn 999;\n\t}\n\n\tpublic function qualifyRequest($accessLevelNeeded, $api = false)\n\t{\n\t\tif ($this->getUserLevel() <= $accessLevelNeeded && $this->getUserLevel() !== null) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif ($api) {\n\t\t\t\t$this->setAPIResponse('error', 'Not Authorized', 401);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function qualifyLength($string, $length = 100, $api = false)\n\t{\n\t\tif (strlen($string) <= $length) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif ($api) {\n\t\t\t\t$this->setResponse(409, 'String is over limit of: ' . $length);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getImages()\n\t{\n\t\t$allIconsPrep = array();\n\t\t$allIcons = array();\n\t\t$ignore = array(\".\", \"..\", \"._.DS_Store\", \".DS_Store\", \".pydio_id\", \"index.html\");\n\t\t$dirname = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR . 'tabs' . DIRECTORY_SEPARATOR;\n\t\t$path = 'plugins/images/tabs/';\n\t\t$images = scandir($dirname);\n\t\tforeach ($images as $image) {\n\t\t\tif (!in_array($image, $ignore)) {\n\t\t\t\t$allIconsPrep[$image] = array(\n\t\t\t\t\t'path' => $path,\n\t\t\t\t\t'name' => $image\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$dirname = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR;\n\t\t$path = 'data/userTabs/';\n\t\tif (file_exists($dirname)) {\n\t\t\t$images = scandir($dirname);\n\t\t\tforeach ($images as $image) {\n\t\t\t\tif (!in_array($image, $ignore)) {\n\t\t\t\t\t$allIconsPrep[$image] = array(\n\t\t\t\t\t\t'path' => $path,\n\t\t\t\t\t\t'name' => $image\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tuksort($allIconsPrep, 'strcasecmp');\n\t\tforeach ($allIconsPrep as $item) {\n\t\t\t$allIcons[] = $item['path'] . $item['name'];\n\t\t}\n\t\treturn $allIcons;\n\t}\n\n\tpublic function getImagesSelect()\n\t{\n\t\t$term = $_GET['search'] ?? null;\n\t\t$page = $_GET['page'] ?? 1;\n\t\t$limit = $_GET['limit'] ?? 20;\n\t\t$offset = ($page * $limit) - $limit;\n\t\t$goodIcons['results'] = [];\n\t\t$goodIcons['limit'] = $limit;\n\t\t$goodIcons['page'] = $page;\n\t\t$goodIcons['term'] = $term;\n\t\t$imageListing = $this->getImages();\n\t\t$newImageListing = [];\n\t\tforeach ($imageListing as $image) {\n\t\t\t$newImageListing[] = [\n\t\t\t\t'id' => $image,\n\t\t\t\t'text' => basename($image)\n\t\t\t];\n\t\t}\n\t\tforeach ($newImageListing as $k => $v) {\n\t\t\tif ($term) {\n\t\t\t\tif (stripos($v['text'], $term) !== false) {\n\t\t\t\t\t$goodIcons['results'][] = $v;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$goodIcons['results'][] = $v;\n\t\t\t}\n\t\t}\n\t\t$total = count($goodIcons['results']);\n\t\t$goodIcons['total'] = $total;\n\t\t$goodIcons['results'] = array_slice($goodIcons['results'], $offset, $limit);\n\t\t$goodIcons['pagination']['more'] = $page < (ceil($total / $limit));\n\t\treturn $goodIcons;\n\t}\n\n\tpublic function removeImage($image = null)\n\t{\n\t\tif (!$image) {\n\t\t\t$this->setAPIResponse('error', 'No image supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$approvedPath = 'data/userTabs/';\n\t\t$removeImage = $approvedPath . pathinfo($image, PATHINFO_BASENAME);\n\t\tif ($this->approvedFileExtension($removeImage, 'image')) {\n\t\t\tif (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . $removeImage)) {\n\t\t\t\t$this->setLoggerChannel('Image Manager');\n\t\t\t\t$this->logger->info('Image Manager Function -  Deleted Image [' . pathinfo($image, PATHINFO_BASENAME) . ']');\n\t\t\t\t$this->setAPIResponse(null, pathinfo($image, PATHINFO_BASENAME) . ' has been deleted', null);\n\t\t\t\treturn (unlink(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . $removeImage));\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', $removeImage . ' does not exist', 404);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', $removeImage . ' is not approved to be deleted', 409);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function uploadImage()\n\t{\n\t\t$filesCheck = array_filter($_FILES);\n\t\tif (!empty($filesCheck)) {\n\t\t\tif (strpos($_FILES['file']['type'], 'image/') === false) {\n\t\t\t\t$this->setResponse(403, 'File Type not approved', $_FILES['file']['type']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->approvedFileType($_FILES['file']['tmp_name'])) {\n\t\t\t\t$this->setResponse(403, 'File Type not approved', $_FILES['file']['tmp_name']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->approvedFileExtension($_FILES['file']['name'])) {\n\t\t\t\tini_set('upload_max_filesize', '10M');\n\t\t\t\tini_set('post_max_size', '10M');\n\t\t\t\t$tempFile = $_FILES['file']['tmp_name'];\n\t\t\t\t$targetPath = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR;\n\t\t\t\t$this->makeDir($targetPath);\n\t\t\t\t$targetFile = $targetPath . $this->sanitizeUserString($_FILES['file']['name']);\n\t\t\t\t$this->setAPIResponse(null, pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' has been uploaded', null);\n\t\t\t\treturn move_uploaded_file($tempFile, $targetFile);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(403, 'File Extension not approved');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setResponse(500, 'No File was uploaded');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function formatPingHost($host)\n\t{\n\t\t$host = $this->qualifyURL($host, true);\n\t\tif ($host['port'] !== '') {\n\t\t\t$host['port'] = str_replace(':', '', $host['port']);\n\t\t}\n\t\tif ($host['host'] == '' && $host['path'] !== '') {\n\t\t\t$host['host'] = $host['path'];\n\t\t\t$host['path'] = '';\n\t\t\tif (strpos($host['host'], '/') !== false) {\n\t\t\t\t$host['host'] = explode('/', $host['host'])[0];\n\t\t\t}\n\t\t}\n\t\treturn $host;\n\t}\n\n\tpublic function ping($pings)\n\t{\n\t\tif ($this->qualifyRequest($this->config['pingAuth'], true)) {\n\t\t\tif (!$pings['list']) {\n\t\t\t\t$this->setAPIResponse('error', 'No ping hostname/IP\\'s entered', 409);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t$pings = $pings['list'];\n\t\t\t$type = gettype($pings);\n\t\t\t$ping = new Ping(\"\");\n\t\t\t$ping->setTtl(128);\n\t\t\t$ping->setTimeout(2);\n\t\t\tswitch ($type) {\n\t\t\t\tcase \"array\":\n\t\t\t\t\t$results = [];\n\t\t\t\t\tforeach ($pings as $k => $v) {\n\t\t\t\t\t\t$pingFormatted = $this->formatPingHost($v);\n\t\t\t\t\t\t$ping->setHost($pingFormatted['host']);\n\t\t\t\t\t\tif ($pingFormatted['port'] !== '') {\n\t\t\t\t\t\t\t$ping->setPort($pingFormatted['port']);\n\t\t\t\t\t\t\t$latency = $ping->ping('fsockopen');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$latency = $ping->ping();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($latency || $latency === 0) {\n\t\t\t\t\t\t\t$results[$v] = $latency;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$results[$v] = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"string\":\n\t\t\t\t\t$pingFormatted = $this->formatPingHost($pings);\n\t\t\t\t\t$ping->setHost($pingFormatted['host']);\n\t\t\t\t\tif ($pingFormatted['port'] !== '') {\n\t\t\t\t\t\t$ping->setPort($pingFormatted['port']);\n\t\t\t\t\t\t$latency = $ping->ping('fsockopen');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$latency = $ping->ping();\n\t\t\t\t\t}\n\t\t\t\t\tif ($latency || $latency === 0) {\n\t\t\t\t\t\t$results = $latency;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$results = null;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn ($results) ?? null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic function getPluginSettings()\n\t{\n\t\treturn [\n\t\t\t'Marketplace' => [\n\t\t\t\t$this->settingsOption('notice', null, ['notice' => 'danger', 'body' => '3rd Party Repositories are not affiliated with Organizr and therefore the code on these repositories are not inspected.  Use at your own risk.']),\n\t\t\t\t$this->settingsOption('multiple-url', 'externalPluginMarketplaceRepos', ['override' => 12, 'label' => 'External Marketplace Repo', 'help' => 'Only supports Github repos']),\n\t\t\t\t$this->settingsOption('token', 'githubAccessToken', ['label' => 'Github Person Access Token', 'help' => 'The Github Person Access Token will help with API rate limiting as well as let you access your own Private Repos']),\n\t\t\t\t$this->settingsOption('switch', 'checkForPluginUpdate', ['label' => 'Check for Plugin Updates', ['help' => 'Check for updates on page load']])\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function getThemeSettings()\n\t{\n\t\treturn [\n\t\t\t'Marketplace' => [\n\t\t\t\t$this->settingsOption('notice', null, ['notice' => 'danger', 'body' => '3rd Party Repositories are not affiliated with Organizr and therefore the themes on these repositories are not inspected.  Use at your own risk.']),\n\t\t\t\t$this->settingsOption('multiple-url', 'externalThemeMarketplaceRepos', ['override' => 12, 'label' => 'External Marketplace Repo', 'help' => 'Only supports Github repos']),\n\t\t\t\t$this->settingsOption('token', 'githubAccessToken', ['label' => 'Github Person Access Token', 'help' => 'The Github Person Access Token will help with API rate limiting as well as let you access your own Private Repos']),\n\t\t\t\t$this->settingsOption('switch', 'checkForThemeUpdate', ['label' => 'Check for Theme Updates', ['help' => 'Check for updates on page load']])\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function getCustomizeAppearance()\n\t{\n\t\treturn [\n\t\t\t'Top Bar' => [\n\t\t\t\t$this->settingsOption('input', 'logo', ['label' => 'Logo URL']),\n\t\t\t\t$this->settingsOption('input', 'title', ['label' => 'Organizr Title']),\n\t\t\t\t$this->settingsOption('switch', 'useLogo', ['label' => 'Use Logo instead of Title', 'help' => 'Also sets the title of your site']),\n\t\t\t\t$this->settingsOption('input', 'description', ['label' => 'Meta Description', 'help' => 'Used to set the description for SEO meta tags']),\n\t\t\t],\n\t\t\t'Side Menu' => [\n\t\t\t\t$this->settingsOption('switch', 'allowCollapsableSideMenu', ['label' => 'Allow Side Menu to be Collapsable']),\n\t\t\t\t$this->settingsOption('switch', 'sideMenuCollapsed', ['label' => 'Side Menu Collapsed at Launch']),\n\t\t\t\t$this->settingsOption('switch', 'collapseSideMenuOnClick', ['label' => 'Collapse Side Menu after clicking Tab']),\n\t\t\t\t$this->settingsOption('switch', 'githubMenuLink', ['label' => 'Show GitHub Repo Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrFeatureRequestLink', ['label' => 'Show Organizr Feature Request Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrSupportMenuLink', ['label' => 'Show Organizr Support Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrDocsMenuLink', ['label' => 'Show Organizr Docs Link']),\n\t\t\t\t$this->settingsOption('switch', 'organizrSignoutMenuLink', ['label' => 'Show Organizr Sign out & in Button on Sidebar']),\n\t\t\t\t$this->settingsOption('switch', 'expandCategoriesByDefault', ['label' => 'Expand All Categories']),\n\t\t\t\t$this->settingsOption('switch', 'autoCollapseCategories', ['label' => 'Auto-Collapse Categories']),\n\t\t\t\t$this->settingsOption('switch', 'autoExpandNavBar', ['label' => 'Auto-Expand Nav Bar']),\n\t\t\t\t$this->settingsOption('select', 'unsortedTabs', ['label' => 'Unsorted Tab Placement', 'options' => [['name' => 'Top', 'value' => 'top'], ['name' => 'Bottom', 'value' => 'bottom']]]),\n\t\t\t],\n\t\t\t'Login Page' => [\n\t\t\t\t$this->settingsOption('input', 'loginLogo', ['label' => 'Login Logo URL']),\n\t\t\t\t$this->settingsOption('multiple-url', 'loginWallpaper', ['label' => 'Login Wallpaper URL', 'help' => 'You may enter multiple URL\\'s']),\n\t\t\t\t$this->settingsOption('switch', 'useLogoLogin', ['label' => 'Use Logo instead of Title on Login Page']),\n\t\t\t\t$this->settingsOption('switch', 'minimalLoginScreen', ['label' => 'Minimal Login Screen']),\n\t\t\t\t$this->settingsOption('switch', 'useRandomMediaImage', ['label' => 'Use Random Media Wallpaper From Media Server']),\n\t\t\t],\n\t\t\t'Options' => [\n\t\t\t\t$this->settingsOption('switch', 'alternateHomepageHeaders', ['label' => 'Alternate Homepage Titles']),\n\t\t\t\t$this->settingsOption('switch', 'debugErrors', ['label' => 'Show Debug Errors']),\n\t\t\t\t$this->settingsOption('switch', 'easterEggs', ['label' => 'Show Easter Eggs']),\n\t\t\t\t$this->settingsOption('input', 'gaTrackingID', ['label' => 'Google Analytics Tracking ID', 'placeholder' => 'e.g. UA-XXXXXXXXX-X']),\n\t\t\t],\n\t\t\t'Colors & Themes' => [\n\t\t\t\t$this->settingsOption('notice', null, ['notice' => 'info', 'title' => 'Attention', 'bodyHTML' => '<span lang=\"en\">The value of #987654 is just a placeholder, you can change to any value you like.</span><span lang=\"en\">To revert back to default, save with no value defined in the relevant field.</span>']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('button', '', ['label' => 'Reset Colors', 'icon' => 'fa fa-ticket', 'text' => 'Reset', 'attr' => 'onclick=\"resetCustomColors()\"']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('color', 'headerColor', ['label' => 'Nav Bar Color']),\n\t\t\t\t$this->settingsOption('color', 'headerTextColor', ['label' => 'Nav Bar Text Color']),\n\t\t\t\t$this->settingsOption('color', 'sidebarColor', ['label' => 'Side Bar Color']),\n\t\t\t\t$this->settingsOption('color', 'sidebarTextColor', ['label' => 'Side Bar Text Color']),\n\t\t\t\t$this->settingsOption('color', 'accentColor', ['label' => 'Accent Color']),\n\t\t\t\t$this->settingsOption('color', 'accentTextColor', ['label' => 'Accent Text Color']),\n\t\t\t\t$this->settingsOption('color', 'buttonColor', ['label' => 'Button Color']),\n\t\t\t\t$this->settingsOption('color', 'buttonTextColor', ['label' => 'Button Text Color']),\n\t\t\t\t$this->settingsOption('select', 'theme', ['label' => 'Theme', 'class' => 'themeChanger', 'options' => $this->getAllThemes()]),\n\t\t\t\t$this->settingsOption('select', 'style', ['label' => 'Style', 'class' => 'styleChanger', 'options' => [['name' => 'Light', 'value' => 'light'], ['name' => 'Dark', 'value' => 'dark'], ['name' => 'Horizontal', 'value' => 'horizontal']]]),\n\t\t\t],\n\t\t\t'Notifications' => [\n\t\t\t\t$this->settingsOption('select', 'notificationBackbone', ['label' => 'Type', 'class' => 'notifyChanger', 'options' => $this->notificationTypesOptions()]),\n\t\t\t\t$this->settingsOption('select', 'notificationPosition', ['label' => 'Position', 'class' => 'notifyPositionChanger', 'options' => $this->notificationPositionsOptions()]),\n\t\t\t\t$this->settingsOption('html', null, ['label' => 'Test Message', 'html' => '\n\t\t\t\t\t<div class=\"btn-group m-r-10 dropup\">\n\t\t\t\t\t\t<button aria-expanded=\"false\" data-toggle=\"dropdown\" class=\"btn btn-info btn-outline dropdown-toggle waves-effect waves-light\" type=\"button\">\n\t\t\t\t\t\t\t<i class=\"fa fa-comment m-r-5\"></i>\n\t\t\t\t\t\t\t<span>Test </span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul role=\"menu\" class=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a success Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'success\\',\\'5000\\');\">Success</a></li>\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a info Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'info\\',\\'5000\\');\">Info</a></li>\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a warning Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'warning\\',\\'5000\\');\">Warning</a></li>\n\t\t\t\t\t\t\t<li><a onclick=\"message(\\'Test Message\\',\\'This is a error Message\\',activeInfo.settings.notifications.position,\\'#FFF\\',\\'error\\',\\'5000\\');\">Error</a></li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t']\n\t\t\t\t),\n\t\t\t],\n\t\t\t'FavIcon' => [\n\t\t\t\t$this->settingsOption('html', null, ['label' => 'Instructions', 'override' => 12, 'html' => '\n\t\t\t\t\t<div class=\"panel panel-default\">\n\t\t\t\t\t\t<div class=\"panel-heading\">\n\t\t\t\t\t\t\t<a href=\"https://realfavicongenerator.net/\" target=\"_blank\"><span class=\"label label-info m-l-5\">Visit FavIcon Site</span></a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"panel-wrapper collapse in\">\n\t\t\t\t\t\t\t<div class=\"panel-body\">\n\t\t\t\t\t\t\t\t<ul class=\"list-icons\">\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Click [Select your Favicon picture]</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Choose your image to use</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Edit settings to your liking</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> At bottom of page on [Favicon Generator Options] under [Path] choose [I cannot or I do not want to place favicon files at the root of my web site.]</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Enter this path <code>data/favicon</code></li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Click [Generate your Favicons and HTML code]</li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Download and unzip file and place in <code>data/favicon</code></li>\n\t\t\t\t\t\t\t\t\t<li lang=\"en\"><i class=\"fa fa-caret-right text-info\"></i> Copy code and paste inside left box</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t']\n\t\t\t\t),\n\t\t\t\t$this->settingsOption('code-editor', 'favIcon', ['label' => 'Fav Icon Code', 'mode' => 'html']),\n\t\t\t],\n\t\t\t'Custom CSS' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customCss', ['label' => 'Custom CSS', 'mode' => 'css']),\n\t\t\t],\n\t\t\t'Theme CSS' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customThemeCss', ['label' => 'Theme CSS', 'mode' => 'css']),\n\t\t\t],\n\t\t\t'Custom Javascript' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customJava', ['label' => 'Custom Javascript', 'mode' => 'javascript']),\n\t\t\t],\n\t\t\t'Theme Javascript' => [\n\t\t\t\t$this->settingsOption('code-editor', 'customThemeJava', ['label' => 'Theme Javascript', 'mode' => 'javascript']),\n\t\t\t],\n\t\t];\n\t}\n\n\tpublic function loadAppearance()\n\t{\n\t\t$appearance['logo'] = $this->config['logo'];\n\t\t$appearance['title'] = $this->config['title'];\n\t\t$appearance['useLogo'] = $this->config['useLogo'];\n\t\t$appearance['useLogoLogin'] = $this->config['useLogoLogin'];\n\t\t$appearance['headerColor'] = $this->config['headerColor'];\n\t\t$appearance['headerTextColor'] = $this->config['headerTextColor'];\n\t\t$appearance['sidebarColor'] = $this->config['sidebarColor'];\n\t\t$appearance['headerTextColor'] = $this->config['headerTextColor'];\n\t\t$appearance['sidebarTextColor'] = $this->config['sidebarTextColor'];\n\t\t$appearance['accentColor'] = $this->config['accentColor'];\n\t\t$appearance['accentTextColor'] = $this->config['accentTextColor'];\n\t\t$appearance['buttonColor'] = $this->config['buttonColor'];\n\t\t$appearance['buttonTextColor'] = $this->config['buttonTextColor'];\n\t\t$appearance['buttonTextHoverColor'] = $this->config['buttonTextHoverColor'];\n\t\t$appearance['buttonHoverColor'] = $this->config['buttonHoverColor'];\n\t\t$appearance['loginWallpaper'] = $this->config['loginWallpaper'];\n\t\t$appearance['randomMediaImage'] = $this->getRandomMediaImage('np');\n\t\t$appearance['loginLogo'] = $this->config['loginLogo'];\n\t\t$appearance['customCss'] = $this->config['customCss'];\n\t\t$appearance['customThemeCss'] = $this->config['customThemeCss'];\n\t\t$appearance['customJava'] = $this->config['customJava'];\n\t\t$appearance['customThemeJava'] = $this->config['customThemeJava'];\n\t\treturn $appearance;\n\t}\n\n\tpublic function getRandomMediaImage($type = null)\n\t{\n\t\tif (!$this->config['useRandomMediaImage']) {\n\t\t\treturn false;\n\t\t}\n\t\tif (file_exists(dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cache')) {\n\t\t\t$folder = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cache';\n\t\t\ttry {\n\t\t\t\t$directoryIterator = new RecursiveDirectoryIterator($folder, FilesystemIterator::SKIP_DOTS);\n\t\t\t\t$iteratorIterator = new RecursiveIteratorIterator($directoryIterator);\n\t\t\t\t$image = null;\n\t\t\t\tswitch ($type) {\n\t\t\t\t\tcase 'np':\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\t$array = iterator_to_array($iteratorIterator);\n\t\t\t\t\t\tif (count($array) > 0) {\n\t\t\t\t\t\t\tshuffle($array);\n\t\t\t\t\t\t\t$iteratorIterator = new ArrayIterator($array);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforeach ($iteratorIterator as $info) {\n\t\t\t\t\t\t\tif (stripos($info->getFilename(), 'np') !== false) {\n\t\t\t\t\t\t\t\tif ($i < 1) {\n\t\t\t\t\t\t\t\t\t$imageInfo = getimagesize($folder . DIRECTORY_SEPARATOR . $info->getFilename());\n\t\t\t\t\t\t\t\t\tif ($imageInfo[0] >= $this->getCacheImageSize('npw')) {\n\t\t\t\t\t\t\t\t\t\t$image = 'data/cache/' . $info->getFilename();\n\t\t\t\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $image;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getSettingsMain()\n\t{\n\t\t$certificateStatus = $this->hasCustomCert() ? '<span lang=\"en\">Custom Certificate Loaded</span><br />Located at <span>' . $this->getCustomCert() . '</span>' : '<span lang=\"en\">Custom Certificate not found - please upload below</span>';\n\t\t$settings = [\n\t\t\t'Settings Page' => [\n\t\t\t\t$this->settingsOption('select', 'defaultSettingsTab', ['label' => 'Default Settings Tab', 'options' => $this->getSettingsTabs(), 'help' => 'Choose which Settings Tab to be default when opening settings page']),\n\t\t\t],\n\t\t\t'Github' => [\n\t\t\t\t$this->settingsOption('select', 'branch', ['label' => 'Branch', 'value' => $this->config['branch'], 'options' => $this->getBranches(), 'disabled' => $this->docker, 'help' => ($this->docker) ? 'Since you are using the Official Docker image, Change the image to change the branch' : 'Choose which branch to download from']),\n\t\t\t\t$this->settingsOption('button', 'force-install-branch', ['label' => 'Force Install Branch', 'class' => 'updateNow', 'icon' => 'fa fa-download', 'text' => 'Retrieve', 'attr' => ($this->docker) ? 'title=\"You can just restart your docker to update\"' : '', 'help' => ($this->docker) ? 'Since you are using the official Docker image, you can just restart your Docker container to update Organizr' : 'This will re-download all of the source files for Organizr']),\n\t\t\t],\n\t\t\t'API' => [\n\t\t\t\t$this->settingsOption('password-alt-copy', 'organizrAPI', ['label' => 'Organizr API']),\n\t\t\t\t$this->settingsOption('button', null, ['label' => 'Generate New API Key', 'class' => 'newAPIKey', 'icon' => 'fa fa-refresh', 'text' => 'Generate']),\n\t\t\t\t$this->settingsOption('notice', null, ['title' => 'API Documentation', 'body' => 'The documentation for Organizr\\'s API is included with this installation.  To access the docs, use the button below.', 'bodyHTML' => '<br/><br/><div class=\"row\"><div class=\"col-lg-2 col-sm-4 col-xs-12\"><a href=\"' . $this->getServerPath() . 'docs/\" target=\"_blank\" class=\"btn btn-block btn-primary text-white\" lang=\"en\">Organizr Docs</a></div></div>'])\n\t\t\t],\n\t\t\t'Authentication' => [\n\t\t\t\t$this->settingsOption('select', 'authType', ['id' => 'authSelect', 'label' => 'Authentication Type', 'value' => $this->config['authType'], 'options' => $this->getAuthTypes()]),\n\t\t\t\t$this->settingsOption('select', 'authBackend', ['id' => 'authBackendSelect', 'label' => 'Authentication Backend', 'class' => 'backendAuth switchAuth', 'value' => $this->config['authBackend'], 'options' => $this->getAuthBackends()]),\n\t\t\t\t$this->settingsOption('token', 'plexToken', ['class' => 'plexAuth switchAuth']),\n\t\t\t\t$this->settingsOption('button', '', ['class' => 'getPlexTokenAuth plexAuth switchAuth', 'label' => 'Get Plex Token', 'icon' => 'fa fa-ticket', 'text' => 'Retrieve', 'attr' => 'onclick=\"PlexOAuth(oAuthSuccess,oAuthError, null, \\'#settings-main-form [name=plexToken]\\')\"']),\n\t\t\t\t$this->settingsOption('password-alt', 'plexID', ['class' => 'plexAuth switchAuth', 'label' => 'Plex Machine', 'placeholder' => 'Use Get Plex Machine Button']),\n\t\t\t\t$this->settingsOption('button', '', ['class' => 'getPlexMachineAuth plexAuth switchAuth', 'label' => 'Get Plex Machine', 'icon' => 'fa fa-id-badge', 'text' => 'Retrieve', 'attr' => 'onclick=\"showPlexMachineForm(\\'#settings-main-form [name=plexID]\\')\"']),\n\t\t\t\t$this->settingsOption('input', 'plexAdmin', ['label' => 'Plex Admin Username or Email', 'class' => 'plexAuth switchAuth', 'placeholder' => 'Admin username for Plex']),\n\t\t\t\t$this->settingsOption('switch', 'plexoAuth', ['label' => 'Enable Plex oAuth', 'class' => 'plexAuth switchAuth']),\n\t\t\t\t$this->settingsOption('switch', 'ignoreTFAIfPlexOAuth', ['label' => 'Ignore 2FA if Plex OAuth ', 'class' => 'plexAuth switchAuth', 'help' => 'Enabling this will disable Organizr 2FA (If applicable) if User uses Plex OAuth to login']),\n\t\t\t\t$this->settingsOption('switch', 'plexStrictFriends', ['label' => 'Strict Plex Friends ', 'class' => 'plexAuth switchAuth', 'help' => 'Enabling this will only allow Friends that have shares to the Machine ID entered above to login, Having this disabled will allow all Friends on your Friends list to login']),\n\t\t\t\t$this->settingsOption('switch', 'ignoreTFALocal', ['label' => 'Ignore External 2FA on Local Subnet', 'help' => 'Enabling this will bypass external 2FA security if user is on local Subnet']),\n\t\t\t\t$this->settingsOption('url', 'authBackendHost', ['class' => 'ldapAuth ftpAuth switchAuth', 'label' => 'Host Address', 'placeholder' => 'http(s) | ftp(s) | ldap(s)://hostname:port']),\n\t\t\t\t$this->settingsOption('input', 'authBaseDN', ['class' => 'ldapAuth switchAuth', 'label' => 'Host Base DN', 'placeholder' => 'cn=%s,dc=sub,dc=domain,dc=com']),\n\t\t\t\t$this->settingsOption('input', 'authBackendHostPrefix', ['class' => 'ldapAuth switchAuth', 'label' => 'Account Prefix', 'id' => 'authBackendHostPrefix-input', 'placeholder' => 'Account prefix - i.e. Controller\\ from Controller\\Username for AD - uid= for OpenLDAP']),\n\t\t\t\t$this->settingsOption('input', 'authBackendHostSuffix', ['class' => 'ldapAuth switchAuth', 'label' => 'Account Suffix', 'id' => 'authBackendHostSuffix-input', 'placeholder' => 'Account suffix - start with comma - ,ou=people,dc=domain,dc=tld']),\n\t\t\t\t$this->settingsOption('input', 'ldapBindUsername', ['class' => 'ldapAuth switchAuth', 'label' => 'Bind Username']),\n\t\t\t\t$this->settingsOption('password', 'ldapBindPassword', ['class' => 'ldapAuth switchAuth', 'label' => 'Bind Password']),\n\t\t\t\t$this->settingsOption('select', 'ldapType', ['id' => 'ldapType', 'label' => 'LDAP Backend Type', 'class' => 'ldapAuth switchAuth', 'options' => $this->getLDAPOptions()]),\n\t\t\t\t$this->settingsOption('html', null, ['class' => 'ldapAuth switchAuth', 'label' => 'Account DN', 'html' => '<span id=\"accountDN\" class=\"ldapAuth switchAuth\">' . $this->config['authBackendHostPrefix'] . 'TestAcct' . $this->config['authBackendHostSuffix'] . '</span>']),\n\t\t\t\t$this->settingsOption('blank', null, ['class' => 'ldapAuth switchAuth']),\n\t\t\t\t$this->settingsOption('switch', 'ldapSSL', ['class' => 'ldapAuth switchAuth', 'label' => 'Enable LDAP SSL', 'help' => 'This will enable the use of SSL for LDAP connections']),\n\t\t\t\t$this->settingsOption('switch', 'ldapSSL', ['class' => 'ldapAuth switchAuth', 'label' => 'Enable LDAP TLS', 'help' => 'This will enable the use of TLS for LDAP connections']),\n\t\t\t\t$this->settingsOption('test', 'ldap', ['class' => 'ldapAuth switchAuth']),\n\t\t\t\t$this->settingsOption('test', '', ['label' => 'Test Login', 'class' => 'ldapAuth switchAuth', 'text' => 'Test Login', 'attr' => 'onclick=\"showLDAPLoginTest()\"']),\n\t\t\t\t$this->settingsOption('url', 'embyURL', ['class' => 'embyAuth switchAuth', 'label' => 'Emby URL', 'help' => 'Please make sure to use local IP address and port - You also may use local dns name too.']),\n\t\t\t\t$this->settingsOption('token', 'embyToken', ['class' => 'embyAuth switchAuth', 'label' => 'Emby Token']),\n\t\t\t\t$this->settingsOption('url', 'jellyfinURL', ['class' => 'jellyfinAuth switchAuth', 'label' => 'Jellyfin URL', 'help' => 'Please make sure to use local IP address and port - You also may use local dns name too.']),\n\t\t\t\t$this->settingsOption('token', 'jellyfinToken', ['class' => 'jellyfinAuth switchAuth', 'label' => 'Jellyfin Token']),\n\t\t\t],\n\t\t\t'Security' => [\n\t\t\t\t$this->settingsOption('number', 'loginAttempts', ['label' => 'Max Login Attempts']),\n\t\t\t\t$this->settingsOption('select', 'loginLockout', ['label' => 'Login Lockout Seconds', 'options' => $this->timeOptions()]),\n\t\t\t\t$this->settingsOption('number', 'lockoutTimeout', ['label' => 'Inactivity Timer [Minutes]']),\n\t\t\t\t$this->settingsOption('switch', 'lockoutSystem', ['label' => 'Inactivity Lock']),\n\t\t\t\t$this->settingsOption('select', 'lockoutMinAuth', ['label' => 'Lockout Groups From', 'options' => $this->groupSelect()]),\n\t\t\t\t$this->settingsOption('select', 'lockoutMaxAuth', ['label' => 'Lockout Groups To', 'options' => $this->groupSelect()]),\n\t\t\t\t$this->settingsOption('switch', 'traefikAuthEnable', ['label' => 'Enable Traefik Auth Redirect', 'help' => 'This will enable the webserver to forward errors so traefik will accept them']),\n\t\t\t\t$this->settingsOption('input', 'traefikDomainOverride', ['label' => 'Traefik Domain for Return Override', 'help' => 'Please use a FQDN on this URL Override', 'placeholder' => 'http(s)://domain']),\n\t\t\t\t$this->settingsOption('select', 'debugAreaAuth', ['label' => 'Minimum Authentication for Debug Area', 'options' => $this->groupSelect(), 'settings' => '{}']),\n\t\t\t\t$this->settingsOption('multiple', 'sandbox', ['override' => 12, 'label' => 'iFrame Sandbox', 'help' => 'WARNING! This can potentially mess up your iFrames', 'options' => $this->sandboxOptions()]),\n\t\t\t\t$this->settingsOption('multiple', 'blacklisted', ['override' => 12, 'label' => 'Blacklisted IP\\'s', 'help' => 'WARNING! This will block anyone with these IP\\'s', 'options' => $this->makeOptionsFromValues($this->config['blacklisted']), 'settings' => '{tags: true}']),\n\t\t\t\t$this->settingsOption('code-editor', 'blacklistedMessage', ['mode' => 'html']),\n\t\t\t],\n\t\t\t'Logs' => [\n\t\t\t\t$this->settingsOption('folder', 'logLocation', ['label' => 'Log Save Path', 'help' => 'Folder path to save Organizr Logs - Please test before saving', 'value' => $this->logLocation()]),\n\t\t\t\t$this->settingsOption('select', 'logLevel', ['label' => 'Log Level', 'options' => $this->logLevels()]),\n\t\t\t\t$this->settingsOption('switch', 'includeDatabaseQueriesInDebug', ['label' => 'Include Database Queries', 'help' => 'Include Database queries in debug logs']),\n\t\t\t\t$this->settingsOption('number', 'maxLogFiles', ['label' => 'Maximum Log Files', 'help' => 'Number of log files to preserve', 'attr' => 'min=\"1\"']),\n\t\t\t\t$this->settingsOption('select', 'logLiveUpdateRefresh', ['label' => 'Live Update Refresh', 'options' => $this->timeOptions()]),\n\t\t\t\t$this->settingsOption('select', 'logPageSize', ['label' => 'Log Page Size', 'options' => [['name' => '10 Items', 'value' => '10'], ['name' => '25 Items', 'value' => '25'], ['name' => '50 Items', 'value' => '50'], ['name' => '100 Items', 'value' => '100']]]),\n\t\t\t\t$this->settingsOption('switch', 'sendLogsToSlack', ['label' => 'Send Logs to Slack', 'help' => 'Send Logs to Slack as well']),\n\t\t\t\t$this->settingsOption('select', 'slackLogLevel', ['label' => 'Slack Log Level', 'options' => $this->logLevels()]),\n\t\t\t\t$this->settingsOption('url', 'slackLogWebhook', ['label' => 'Slack Webhook URL', 'help' => 'If using Discord make sure to end the URL with /slack']),\n\t\t\t\t$this->settingsOption('input', 'slackLogWebHookChannel', ['label' => 'Slack Channel for Webhook', 'help' => 'Channel ID for webhook - Not needed for Discord']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('test', 'slack-logs', ['label' => 'Test Slack', 'text' => 'Test Slack', 'help' => 'Test only sends a warning message so make sure Slack Log Level is Warning when testing']),\n\t\t\t],\n\t\t\t'Cron' => [\n\t\t\t\t$this->settingsOption('cron-file'),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('enable', 'autoUpdateCronEnabled', ['label' => 'Auto-Update Organizr']),\n\t\t\t\t$this->settingsOption('cron', 'autoUpdateCronSchedule'),\n\t\t\t],\n\t\t\t'Login' => [\n\t\t\t\t$this->settingsOption('password', 'registrationPassword', ['label' => 'Registration Password', 'help' => 'Sets the password for the Registration form on the login screen']),\n\t\t\t\t$this->settingsOption('switch', 'hideRegistration', ['label' => 'Hide Registration', 'help' => 'Enable this to hide the Registration button on the login screen']),\n\t\t\t\t$this->settingsOption('number', 'rememberMeDays', ['label' => 'Remember Me Length', 'help' => 'Number of days cookies and tokens will be valid for', 'attr' => 'min=\"1\"']),\n\t\t\t\t$this->settingsOption('switch', 'rememberMe', ['label' => 'Remember Me', 'help' => 'Default status of Remember Me button on login screen']),\n\t\t\t\t$this->settingsOption('multiple-url', 'localIPList', ['label' => 'Override Local IP or Subnet', 'help' => 'IPv4 only at the moment - This will set your login as local if your IP falls within the From and To']),\n\t\t\t\t$this->settingsOption('input', 'wanDomain', ['label' => 'WAN Domain', 'placeholder' => 'only domain and tld - i.e. domain.com', 'help' => 'Enter domain if you wish to be forwarded to a local address - Local Address filled out on next item']),\n\t\t\t\t$this->settingsOption('url', 'localAddress', ['label' => 'Local Address', 'placeholder' => 'http://home.local', 'help' => 'Full local address of organizr install - i.e. http://home.local or http://192.168.0.100']),\n\t\t\t\t$this->settingsOption('switch', 'enableLocalAddressForward', ['label' => 'Enable Local Address Forward', 'help' => 'Enables the local address forward if on local address and accessed from WAN Domain']),\n\t\t\t\t$this->settingsOption('switch', 'disableRecoverPass', ['label' => 'Disable Recover Password', 'help' => 'Disables recover password area']),\n\t\t\t\t$this->settingsOption('input', 'customForgotPassText', ['label' => 'Custom Recover Password Text', 'help' => 'Text or HTML for recovery password section']),\n\t\t\t],\n\t\t\t'Auth Proxy' => [\n\t\t\t\t$this->settingsOption('switch', 'authProxyEnabled', ['label' => 'Auth Proxy', 'help' => 'Enable option to set Auth Proxy Header Login']),\n\t\t\t\t$this->settingsOption('input', 'authProxyWhitelist', ['label' => 'Auth Proxy Whitelist', 'placeholder' => 'i.e. 10.0.0.0/24 or 10.0.0.20', 'help' => 'IPv4 only at the moment - This must be set to work, will accept subnet or IP address']),\n\t\t\t\t$this->settingsOption('input', 'authProxyHeaderName', ['label' => 'Auth Proxy Header Name', 'placeholder' => 'i.e. X-Forwarded-User', 'help' => 'Please choose a unique value for added security']),\n\t\t\t\t$this->settingsOption('input', 'authProxyHeaderNameEmail', ['label' => 'Auth Proxy Header Name for Email', 'placeholder' => 'i.e. X-Forwarded-Email', 'help' => 'Please choose a unique value for added security']),\n\t\t\t\t$this->settingsOption('switch', 'authProxyOverrideLogout', ['label' => 'Override Logout', 'help' => 'Enable option to set custom Logout URL for Auth Proxy']),\n\t\t\t\t$this->settingsOption('input', 'authProxyLogoutURL', ['label' => 'Logout URL', 'help' => 'Logout URL to redirect user for Auth Proxy']),\n\t\t\t],\n\t\t\t'Ping' => [\n\t\t\t\t$this->settingsOption('auth', 'pingAuth'),\n\t\t\t\t$this->settingsOption('auth', 'pingAuthMessage', ['label' => 'Minimum Authentication for Message and Sound']),\n\t\t\t\t$this->settingsOption('select', 'pingOnlineSound', ['label' => 'Online Sound', 'options' => $this->getSounds()]),\n\t\t\t\t$this->settingsOption('select', 'pingOfflineSound', ['label' => 'Offline Sound', 'options' => $this->getSounds()]),\n\t\t\t\t$this->settingsOption('switch', 'pingMs', ['label' => 'Show Ping Time']),\n\t\t\t\t$this->settingsOption('switch', 'statusSounds', ['label' => 'Enable Notify Sounds', 'help' => 'Will play a sound if the server goes down and will play sound if comes back up.']),\n\t\t\t\t$this->settingsOption('auth', 'pingAuthMs', ['label' => 'Minimum Authentication for Time Display']),\n\t\t\t\t$this->settingsOption('refresh', 'adminPingRefresh', ['label' => 'Admin Refresh Seconds']),\n\t\t\t\t$this->settingsOption('refresh', 'otherPingRefresh', ['label' => 'Everyone Refresh Seconds']),\n\t\t\t],\n\t\t\t'Certificate' => [\n\t\t\t\t$this->settingsOption('html', '', ['override' => 12,\n\t\t\t\t\t\t'html' => '\n\t\t\t\t\t<script>\n\t\t\t\t\t\tlet myDropzone = new Dropzone(\"#upload-custom-certificate\", {\n\t\t\t\t\t\t\turl: \"api/v2/certificate/custom\",\n\t\t\t\t\t\t\theaders:{ \"formKey\": local(\"g\",\"formKey\") },\n\t\t\t\t\t\t\tinit: function() {\n\t\t\t\t\t\t\t\tthis.on(\"complete\", function(file) {\n\t\t\t\t\t\t\t\t\tif(file[\"status\"] === \"success\"){\n\t\t\t\t\t\t\t\t\t\t$(\".custom-certificate-status\").html(\"<span lang=\\\"en\\\">Custom Certificate Loaded</span>\");\n\t\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\t\t$(\".custom-certificate-status\").html(\"<span lang=\\\"en\\\">Error Saving file...</span>\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t</script>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-lg-12\">\n\t\t\t\t\t\t\t<div class=\"panel panel-info\">\n\t\t\t\t\t\t\t\t<div class=\"panel-heading\"><span lang=\"en\">Notice</span></div>\n\t\t\t\t\t\t\t\t<div class=\"panel-wrapper collapse in\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t<div class=\"panel-body\">\n\t\t\t\t\t\t\t\t\t\t<span lang=\"en\">By default, Organizr uses certificates from https://curl.se/docs/caextract.html<br/>If you would like to use your own certificate, please upload it below.  You will then need to enable each homepage item to use it.</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t\t<div class=\"white-box\">\n\t\t\t\t\t\t\t\t<h3 class=\"box-title m-b-0\" lang=\"en\">Custom Certificate Status</h3>\n\t\t\t\t\t\t\t\t<p class=\"text-muted m-b-30 custom-certificate-status\">' . $certificateStatus . '</p>\n\t\t\t\t\t\t\t\t<form action=\"#\" class=\"dropzone dz-clickable\" id=\"upload-custom-certificate\">\n\t\t\t\t\t\t\t\t\t<div class=\"dz-default dz-message\"><span lang=\"en\">Drop Certificate file here to upload</span></div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t']\n\t\t\t\t)\n\t\t\t],\n\t\t];\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$database = [\n\t\t\t\t'Database' => [\n\t\t\t\t\t$this->settingsOption('notice', '', ['notice' => 'danger', 'title' => 'Warning', 'body' => 'This feature is experimental - You may face unexpected database is locked errors in logs']),\n\t\t\t\t\t$this->settingsOption('html', '', ['label' => 'Journal Mode Status', 'html' => '<script>getJournalMode();</script><h4 class=\"journal-mode font-bold text-uppercase\"><i class=\"fa fa-spin fa-circle-o-notch\"></i></h4>']),\n\t\t\t\t\t$this->settingsOption('button', '', ['label' => 'Set DELETE Mode (Default)', 'icon' => 'icon-notebook', 'text' => 'Set', 'attr' => 'onclick=\"setJournalMode(\\'DELETE\\')\"']),\n\t\t\t\t\t$this->settingsOption('button', '', ['label' => 'Set WAL Mode', 'icon' => 'icon-notebook', 'text' => 'Set', 'attr' => 'onclick=\"setJournalMode(\\'WAL\\')\"']),\n\t\t\t\t]\n\t\t\t];\n\t\t\t$settings = array_merge($settings, $database);\n\t\t}\n\t\tksort($settings);\n\t\treturn $settings;\n\t}\n\n\tpublic function getSettingsSSO()\n\t{\n\t\treturn [\n\t\t\t'FYI' => [\n\t\t\t\t$this->settingsOption('html', '', ['override' => 12,\n\t\t\t\t\t\t'html' => '\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-lg-12\">\n\t\t\t\t\t\t\t\t<div class=\"panel panel-primary\">\n\t\t\t\t\t\t\t\t\t<div class=\"panel-heading\"><span lang=\"en\">Please Read First</span></div>\n\t\t\t\t\t\t\t\t\t<div class=\"panel-wrapper collapse in\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"panel-body\">\n\t\t\t\t\t\t\t\t\t\t\t<span lang=\"en\">Using multiple SSO application will cause your Cookie Header item to increase.  If you haven\\'t increased it by now, please follow this guide</span>\n\t\t\t\t\t\t\t\t\t\t\t<br/><br/>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"col-lg-2 col-sm-4 col-xs-12\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a href=\"https://docs.organizr.app/help/faq/organizr-login-error\" target=\"_blank\" class=\"btn btn-block btn-primary text-white\" lang=\"en\">Cookie Header Guide</a>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\t\t\t<span lang=\"en\">This is not the same as database authentication - i.e. Plex Authentication | Emby Authentication | FTP Authentication<br/>Click Main on the sub-menu above.</span>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>'\n\t\t\t\t\t]\n\t\t\t\t),\n\t\t\t],\n\t\t\t'Plex' => [\n\t\t\t\t$this->settingsOption('token', 'plexToken'),\n\t\t\t\t$this->settingsOption('button', '', ['label' => 'Get Plex Token', 'icon' => 'fa fa-ticket', 'text' => 'Retrieve', 'attr' => 'onclick=\"PlexOAuth(oAuthSuccess,oAuthError, null, \\'#sso-form [name=plexToken]\\')\"']),\n\t\t\t\t$this->settingsOption('password-alt', 'plexID', ['label' => 'Plex Machine']),\n\t\t\t\t$this->settingsOption('button', '', ['label' => 'Get Plex Machine', 'icon' => 'fa fa-id-badge', 'text' => 'Retrieve', 'attr' => 'onclick=\"showPlexMachineForm(\\'#sso-form [name=plexID]\\')\"']),\n\t\t\t\t$this->settingsOption('input', 'plexAdmin', ['label' => 'Plex Admin Username or Email']),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('html', 'Plex Note', ['html' => '<span lang=\"en\">Please make sure both Token and Machine are filled in</span>']),\n\t\t\t\t$this->settingsOption('enable', 'ssoPlex'),\n\t\t\t],\n\t\t\t'Tautulli' => [\n\t\t\t\t$this->settingsOption('multiple-url', 'tautulliURL'),\n\t\t\t\t$this->settingsOption('auth', 'ssoTautulliAuth'),\n\t\t\t\t$this->settingsOption('enable', 'ssoTautulli'),\n\t\t\t],\n\t\t\t'Overseerr' => [\n\t\t\t\t$this->settingsOption('url', 'overseerrURL'),\n\t\t\t\t$this->settingsOption('token', 'overseerrToken'),\n\t\t\t\t$this->settingsOption('username', 'overseerrFallbackUser', ['label' => 'Overseerr Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'overseerrFallbackPassword', ['label' => 'Overseerr Fallback Password']),\n\t\t\t\t$this->settingsOption('enable', 'ssoOverseerr'),\n\t\t\t],\n\t\t\t'Petio' => [\n\t\t\t\t$this->settingsOption('url', 'petioURL'),\n\t\t\t\t$this->settingsOption('token', 'petioToken'),\n\t\t\t\t$this->settingsOption('username', 'petioFallbackUser', ['label' => 'Petio Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'petioFallbackPassword', ['label' => 'Petio Fallback Password']),\n\t\t\t\t$this->settingsOption('enable', 'ssoPetio'),\n\t\t\t],\n\t\t\t'Ombi' => [\n\t\t\t\t$this->settingsOption('url', 'ombiURL'),\n\t\t\t\t$this->settingsOption('token', 'ombiToken'),\n\t\t\t\t$this->settingsOption('username', 'ombiFallbackUser', ['label' => 'Ombi Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'ombiFallbackPassword', ['label' => 'Ombi Fallback Password']),\n\t\t\t\t$this->settingsOption('enable', 'ssoOmbi'),\n\t\t\t],\n\t\t\t'Jellyfin' => [\n\t\t\t\t$this->settingsOption('url', 'jellyfinURL', ['label' => 'Jellyfin API URL', 'help' => 'Please make sure to use the local address to the API']),\n\t\t\t\t$this->settingsOption('url', 'jellyfinSSOURL', ['label' => 'Jellyfin SSO URL', 'help' => 'Please make sure to use the same (sub)domain to access Jellyfin as Organizr\\'s']),\n\t\t\t\t$this->settingsOption('enable', 'ssoJellyfin'),\n\t\t\t],\n\t\t\t'Komga' => [\n\t\t\t\t$this->settingsOption('url', 'komgaURL'),\n\t\t\t\t$this->settingsOption('auth', 'ssoKomgaAuth'),\n\t\t\t\t$this->settingsOption('enable', 'ssoKomga'),\n\t\t\t\t$this->settingsOption('blank'),\n\t\t\t\t$this->settingsOption('username', 'komgaFallbackUser', ['label' => 'Komga Fallback Email', 'help' => 'DO NOT SET THIS TO YOUR ADMIN ACCOUNT. We recommend you create a local account as a \"catch all\" for when Organizr is unable to perform SSO.  Organizr will request a User Token based off of this user credentials']),\n\t\t\t\t$this->settingsOption('password', 'komgaFallbackPassword', ['label' => 'Komga Fallback Password']),\n\t\t\t],\n\t\t];\n\t}\n\n\tpublic function systemMenuLists()\n\t{\n\t\t$pluginsMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_plugins_enabled',\n\t\t\t\t'anchor' => 'settings-plugins-enabled-anchor',\n\t\t\t\t'name' => 'Active',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_plugins_disabled',\n\t\t\t\t'anchor' => 'settings-plugins-disabled-anchor',\n\t\t\t\t'name' => 'Inactive',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_plugins_settings',\n\t\t\t\t'anchor' => 'settings-plugins-settings-anchor',\n\t\t\t\t'name' => 'Settings',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-plugins-marketplace-anchor',\n\t\t\t\t'name' => 'Marketplace',\n\t\t\t\t'onclick' => 'loadPluginMarketplace();'\n\t\t\t],\n\t\t];\n\t\t$userManagementMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_user_manage_users',\n\t\t\t\t'anchor' => 'settings-user-manage-users-anchor',\n\t\t\t\t'name' => 'Manage Users'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_user_manage_groups',\n\t\t\t\t'anchor' => 'settings-user-manage-groups-anchor',\n\t\t\t\t'name' => 'Manage Groups'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-user-import-users-anchor',\n\t\t\t\t'name' => 'Import Users'\n\t\t\t],\n\t\t];\n\t\t$customizeMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_customize_appearance',\n\t\t\t\t'anchor' => 'settings-customize-appearance-anchor',\n\t\t\t\t'name' => 'Appearance',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_customize_settings',\n\t\t\t\t'anchor' => 'settings-customize-settings-anchor',\n\t\t\t\t'name' => 'Marketplace Settings',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-customize-marketplace-anchor',\n\t\t\t\t'name' => 'Marketplace',\n\t\t\t\t'onclick' => 'loadThemeMarketplace();'\n\t\t\t],\n\t\t];\n\t\t$tabEditorMenu = [\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_tabs',\n\t\t\t\t'anchor' => 'settings-tab-editor-tabs-anchor',\n\t\t\t\t'name' => 'Tabs'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_categories',\n\t\t\t\t'anchor' => 'settings-tab-editor-categories-anchor',\n\t\t\t\t'name' => 'Categories'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_homepage',\n\t\t\t\t'anchor' => 'settings-tab-editor-homepage-anchor',\n\t\t\t\t'name' => 'Homepage Items'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_tab_editor_homepage_order',\n\t\t\t\t'anchor' => 'settings-tab-editor-homepage-order-anchor',\n\t\t\t\t'name' => 'Homepage Order'\n\t\t\t],\n\t\t];\n\t\t$systemSettingsMenu = [\n\t\t\t[\n\t\t\t\t'active' => true,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-settings-about-anchor',\n\t\t\t\t'name' => 'About'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_main',\n\t\t\t\t'anchor' => 'settings-settings-main-anchor',\n\t\t\t\t'name' => 'Main'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_sso',\n\t\t\t\t'anchor' => 'settings-settings-sso-anchor',\n\t\t\t\t'name' => 'SSO'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_logs',\n\t\t\t\t'anchor' => 'settings-settings-logs-anchor',\n\t\t\t\t'name' => 'Logs'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-settings-updates-anchor',\n\t\t\t\t'name' => 'Updates'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => 'api/v2/page/settings_settings_backup',\n\t\t\t\t'anchor' => 'settings-settings-backup-anchor',\n\t\t\t\t'name' => 'Backup'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'active' => false,\n\t\t\t\t'api' => false,\n\t\t\t\t'anchor' => 'settings-settings-donate-anchor',\n\t\t\t\t'name' => 'Donate'\n\t\t\t],\n\t\t];\n\t\t$systemMenus['system_settings'] = $this->buildSettingsMenus($systemSettingsMenu, 'System Settings');\n\t\t$systemMenus['tab_editor'] = $this->buildSettingsMenus($tabEditorMenu, 'Tab Editor');\n\t\t$systemMenus['customize'] = $this->buildSettingsMenus($customizeMenu, 'Customize');\n\t\t$systemMenus['user_management'] = $this->buildSettingsMenus($userManagementMenu, 'User Management');\n\t\t$systemMenus['plugins'] = $this->buildSettingsMenus($pluginsMenu, 'Plugins');\n\t\treturn $systemMenus;\n\t}\n\n\tpublic function updateConfigMultiple($array)\n\t{\n\t\treturn (bool)$this->updateConfig($array);\n\t}\n\n\tpublic function updateConfigItems($array)\n\t{\n\t\tif (!count($array)) {\n\t\t\t$this->setAPIResponse('error', 'No data submitted', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$newItem = array();\n\t\tforeach ($array as $k => $v) {\n\t\t\t$v = $v ?? '';\n\t\t\tswitch ($v) {\n\t\t\t\tcase 'true':\n\t\t\t\t\t$v = (bool)true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'false':\n\t\t\t\t\t$v = (bool)false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Hash\n\t\t\tif ((stripos($k, 'password') !== false)) {\n\t\t\t\tif (!$this->isEncrypted($v)) {\n\t\t\t\t\tif ($v !== '') {\n\t\t\t\t\t\t$v = $this->encrypt($v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitch ($k) {\n\t\t\t\tcase 'logLocation':\n\t\t\t\tcase 'dbLocation':\n\t\t\t\t\tif (!empty($v)) {\n\t\t\t\t\t\t$v = $this->cleanDirectory($v);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (strtolower($k) !== 'formkey') {\n\t\t\t\t$newItem[$k] = $v;\n\t\t\t\t$this->config[$k] = $v;\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('success', 'Config items updated', 200);\n\t\t$this->setLoggerChannel('Config');\n\t\t$this->logger->info('Config items updated', array_keys($array));\n\t\treturn (bool)$this->updateConfig($newItem);\n\t}\n\n\tpublic function updateConfigItem($array)\n\t{\n\t\t$array['value'] = $array['value'] ?? '';\n\t\tswitch ($array['value']) {\n\t\t\tcase 'true':\n\t\t\t\t$array['value'] = (bool)true;\n\t\t\t\tbreak;\n\t\t\tcase 'false':\n\t\t\t\t$array['value'] = (bool)false;\n\t\t\t\tbreak;\n\t\t}\n\t\t// Hash\n\t\tif ($array['type'] == 'password') {\n\t\t\t$array['value'] = $this->encrypt($array['value']);\n\t\t}\n\t\t$newItem = array(\n\t\t\t$array['name'] => $array['value']\n\t\t);\n\t\t$this->config[$array['name']] = $array['value'];\n\t\treturn (bool)$this->updateConfig($newItem);\n\t}\n\n\tpublic function ignoreNewsId($id)\n\t{\n\t\tif (!$id) {\n\t\t\t$this->setAPIResponse('error', 'News id was not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$id = array(intval($id));\n\t\t$newsIds = $this->config['ignoredNewsIds'];\n\t\t$newsIds = array_merge($newsIds, $id);\n\t\t$newsIds = array_unique($newsIds);\n\t\t$this->updateConfig(['ignoredNewsIds' => $newsIds]);\n\t\t$this->setAPIResponse('success', 'News id is now ignored', 200, null);\n\t}\n\n\tpublic function getNewsIds()\n\t{\n\t\t$newsIds = $this->config['ignoredNewsIds'];\n\t\t$this->setAPIResponse('success', null, 200, $newsIds);\n\t\treturn $newsIds;\n\t}\n\n\tpublic function testWizardPath($array)\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\t$this->setAPIResponse('error', 'Endpoint disabled as database already exists', 401);\n\t\t\treturn false;\n\t\t}\n\t\t$path = $array['path'] ?? null;\n\t\tif (file_exists($path)) {\n\t\t\tif (is_writable($path)) {\n\t\t\t\t$this->setAPIResponse('success', 'Path exists and is writable', 200);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Path exists but is not writable', 403);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (mkdir($path, 0760, true)) {\n\t\t\t\t$this->setAPIResponse('success', 'Path is writable - Creating now', 200);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Failed making directory - Check permissions', 403);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function formatDatabaseDriver($driver)\n\t{\n\t\t$driver = strtolower($driver);\n\t\tswitch ($driver) {\n\t\t\tcase 'sqlite':\n\t\t\tcase 'sqlite3':\n\t\t\t\treturn 'sqlite3';\n\t\t\tcase 'mysql':\n\t\t\tcase 'mysqli':\n\t\t\t\treturn 'mysqli';\n\t\t\tcase 'postgre':\n\t\t\tcase 'postgres':\n\t\t\tcase 'postgresql':\n\t\t\t\treturn 'postgre';\n\t\t\tdefault:\n\t\t\t\treturn $driver;\n\t\t}\n\t}\n\n\tpublic function wizardConfig($array)\n\t{\n\t\t$array['driver'] = $array['driver'] ?? 'sqlite3';\n\t\t$driver = $this->formatDatabaseDriver($array['driver']);\n\t\t$dbName = $array['dbName'] ?? null;\n\t\t$path = $array['dbPath'] ?? $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . $this->random_ascii_string(10) . DIRECTORY_SEPARATOR;\n\t\t$license = $array['license'] ?? null;\n\t\t$hashKey = $array['hashKey'] ?? null;\n\t\t$api = $array['api'] ?? null;\n\t\t$registrationPassword = $array['registrationPassword'] ?? null;\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$email = $array['email'] ?? null;\n\t\t$dbHost = $array['dbHost'] ?? null;\n\t\t$dbUsername = $array['dbUsername'] ?? null;\n\t\t$dbPassword = $array['dbPassword'] ?? null;\n\t\t$validation = [\n\t\t\t'dbPath' => $path,\n\t\t\t'dbName' => $dbName,\n\t\t\t'license' => $license,\n\t\t\t'hashKey' => $hashKey,\n\t\t\t'api' => $api,\n\t\t\t'registrationPassword' => $registrationPassword,\n\t\t\t'username' => $username,\n\t\t\t'password' => $password,\n\t\t\t'email' => $email,\n\t\t\t'driver' => $driver\n\t\t];\n\t\t$dbName = $this->dbExtension($dbName);\n\t\tif ($driver == 'mysqli' || $driver == 'postgre') {\n\t\t\t$dbName = $this->removeDbExtension($dbName);\n\t\t\t$validation = array_merge($validation, [\n\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t'dbPassword' => $dbPassword,\n\t\t\t]);\n\t\t}\n\t\tforeach ($validation as $k => $v) {\n\t\t\tif ($v == null) {\n\t\t\t\t$this->setAPIResponse('error', '[' . $k . '] cannot be empty', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif ($path) {\n\t\t\t$path = $this->cleanDirectory($path);\n\t\t\tif (file_exists($path)) {\n\t\t\t\tif (!is_writable($path)) {\n\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!mkdir($path, 0760, true)) {\n\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$configVersion = $this->version;\n\t\t$configArray = array(\n\t\t\t'dbLocation' => $path,\n\t\t\t'driver' => $driver,\n\t\t\t'dbName' => $dbName,\n\t\t\t'license' => $license,\n\t\t\t'organizrHash' => $hashKey,\n\t\t\t'organizrAPI' => $api,\n\t\t\t'registrationPassword' => $registrationPassword,\n\t\t\t'uuid' => $this->gen_uuid()\n\t\t);\n\t\tif ($driver == 'mysqli' || $driver == 'postgre') {\n\t\t\t$configArray = array_merge($configArray, [\n\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t'dbPassword' => $this->encrypt($dbPassword, $hashKey),\n\t\t\t]);\n\t\t}\n\t\t//Test Database Connection before saving config\n\t\t$testDatabaseConnection = $this->testDatabaseConnection($array);\n\t\tif (!$testDatabaseConnection) {\n\t\t\t// setResponse already defined\n\t\t\treturn false;\n\t\t}\n\t\t// Create Config\n\t\tif ($this->createConfig($configArray)) {\n\t\t\t$this->config = $this->config();\n\t\t\t$this->refreshCookieName();\n\t\t\t$this->connectDB();\n\t\t\t// Call DB Create\n\t\t\tif (!$this->createNewDB($dbName, false)) {\n\t\t\t\t$this->setAPIResponse('error', 'error creating database using driver: ' . $driver, 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->createDB($path)) {\n\t\t\t\t// Add in first user\n\t\t\t\tif ($this->createFirstAdmin($username, $password, $email)) {\n\t\t\t\t\tif ($this->createToken($username, $email, 1)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->setAPIResponse('error', 'error creating token', 500);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'error creating admin', 500);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'error creating database', 500);\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'error creating config', 500);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function testDatabaseConnection($array)\n\t{\n\t\t$driver = $array['driver'] ?? 'sqlite3';\n\t\t$driver = $this->formatDatabaseDriver($driver);\n\n\t\t$dbName = $array['dbName'] ?? null;\n\t\t$dbHost = $array['dbHost'] ?? null;\n\t\t$dbUsername = $array['dbUsername'] ?? null;\n\t\t$dbPassword = $array['dbPassword'] ?? null;\n\t\t$path = $array['dbPath'] ?? $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . $this->random_ascii_string(10) . DIRECTORY_SEPARATOR;\n\t\tswitch ($driver) {\n\t\t\tcase 'mysqli':\n\t\t\t\tif (!extension_loaded('mysqli')) {\n\t\t\t\t\t$this->setResponse(500, 'PHP Extension `mysqli` is not loaded');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$config = [\n\t\t\t\t\t'driver' => 'mysqli',\n\t\t\t\t\t'host' => $dbHost,\n\t\t\t\t\t'username' => $dbUsername,\n\t\t\t\t\t'password' => $dbPassword,\n\t\t\t\t\t'options' => [\n\t\t\t\t\t\tMYSQLI_OPT_CONNECT_TIMEOUT => 60,\n\t\t\t\t\t],\n\t\t\t\t\t'flags' => MYSQLI_CLIENT_COMPRESS,\n\t\t\t\t];\n\t\t\t\t$validation = [\n\t\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t\t'dbPassword' => $dbPassword,\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'postgre':\n\t\t\t\t// DISABLE FOR NOW\n\t\t\t\t$this->setResponse(409, 'Database connection test not available for driver: ' . $driver);\n\t\t\t\treturn false;\n\t\t\t\t$config = [\n\t\t\t\t\t//host, hostaddr, port, dbname, user, password, connect_timeout, options, sslmode, service => see PostgreSQL API\n\t\t\t\t\t'driver' => 'postgre',\n\t\t\t\t\t'username' => $dbUsername,\n\t\t\t\t\t'password' => $dbPassword,\n\t\t\t\t\t'persistent' => true,\n\t\t\t\t];\n\t\t\t\t$host = $this->qualifyURL($dbHost, true);\n\t\t\t\tif ($host['port']) {\n\t\t\t\t\t$config = array_merge($config, ['port' => ltrim($host['port'], ':')]);\n\t\t\t\t}\n\t\t\t\tif (($host['host'])) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['host']]);\n\t\t\t\t}\n\t\t\t\tif (!$host['host'] && $host['path']) {\n\t\t\t\t\t$config = array_merge($config, ['host' => $host['path']]);\n\t\t\t\t}\n\t\t\t\t$validation = [\n\t\t\t\t\t'dbHost' => $dbHost,\n\t\t\t\t\t'dbUsername' => $dbUsername,\n\t\t\t\t\t'dbPassword' => $dbPassword,\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'sqlite3':\n\t\t\t\t$path = $this->cleanDirectory($path);\n\t\t\t\tif (file_exists($path)) {\n\t\t\t\t\tif (!is_writable($path)) {\n\t\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (is_writable(dirname($path, 1))) {\n\t\t\t\t\t\tif (!mkdir($path, 0760, true)) {\n\t\t\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->setAPIResponse('error', '[' . $path . ']  is not writable', 422);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\t$this->setResponse(409, 'Database connection test not available for driver: ' . $driver);\n\t\t\t\treturn false;\n\t\t}\n\t\tforeach ($validation as $k => $v) {\n\t\t\tif ($v == null) {\n\t\t\t\t$this->setAPIResponse('error', '[' . $k . '] cannot be empty', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\t$connection = new Connection($config);\n\t\t\t$testConnection = $connection->isConnected();\n\t\t\tif ($testConnection) {\n\t\t\t\t$this->setResponse(200, 'Database connection successful');\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setResponse(409, 'Database connection unsuccessful');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Dibi\\Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function createNewDB($dbName, $migration = false)\n\t{\n\t\tif ($this->config['driver'] == 'mysqli') {\n\t\t\t$config = [\n\t\t\t\t'driver' => 'mysqli',\n\t\t\t\t'host' => $this->config['dbHost'],\n\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t'options' => [\n\t\t\t\t\tMYSQLI_OPT_CONNECT_TIMEOUT => 60,\n\t\t\t\t],\n\t\t\t\t'flags' => MYSQLI_CLIENT_COMPRESS,\n\t\t\t];\n\t\t\tif ($migration) {\n\t\t\t\ttry {\n\t\t\t\t\t$this->otherDb = new Connection($config);\n\t\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t\t$this->otherDb = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\t$this->db = new Connection($config);\n\t\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t\t$this->db = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($dbName == 'tempMigration') {\n\t\t\t\t$response = [\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t\t'query' => [\n\t\t\t\t\t\t\t'DROP DATABASE IF EXISTS tempMigration'\n\t\t\t\t\t\t]\n\t\t\t\t\t),\n\t\t\t\t];\n\t\t\t\t$drop = $this->processQueries($response, $migration);\n\t\t\t}\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => ['CREATE DATABASE IF NOT EXISTS %n',\n\t\t\t\t\t\t$dbName\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t];\n\t\t\t$results = $this->processQueries($response, $migration);\n\t\t\tif ($results) {\n\t\t\t\tif ($migration) {\n\t\t\t\t\t$this->connectOtherDB();\n\t\t\t\t} else {\n\t\t\t\t\t$this->connectDB();\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} elseif ($this->config['driver'] == 'postgre') {\n\t\t\t$config = [\n\t\t\t\t'driver' => 'postgre',\n\t\t\t\t'username' => $this->config['dbUsername'],\n\t\t\t\t'password' => $this->decrypt($this->config['dbPassword']),\n\t\t\t\t'persistent' => true,\n\t\t\t];\n\t\t\t$host = $this->qualifyURL($this->config['dbHost'], true);\n\t\t\tif ($host['port']) {\n\t\t\t\t$config = array_merge($config, ['port' => ltrim($host['port'], ':')]);\n\t\t\t}\n\t\t\tif ($host['host']) {\n\t\t\t\t$config = array_merge($config, ['host' => $host['host']]);\n\t\t\t}\n\t\t\tif (!$host['host'] && $host['path']) {\n\t\t\t\t$config = array_merge($config, ['host' => $host['path']]);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t$this->db = new Connection($config);\n\t\t\t} catch (Dibi\\Exception $e) {\n\t\t\t\t$this->db = null;\n\t\t\t}\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => ['CREATE DATABASE %n',\n\t\t\t\t\t\t$dbName\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t];\n\t\t\t$results = $this->processQueries($response, $migration);\n\t\t\tif ($results) {\n\t\t\t\t$this->connectDB();\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function getDefaultTablesFormatted()\n\t{\n\t\t$list = [];\n\t\t$tables = $this->defaultTables();\n\t\tforeach ($tables as $table) {\n\t\t\t$string = trim($table['query']);\n\t\t\tpreg_match('/CREATE TABLE `(.*?)`/', $string, $output_array);\n\t\t\tif (count($output_array) > 1) {\n\t\t\t\t$list[] = $output_array[1];\n\t\t\t}\n\t\t}\n\t\treturn $list;\n\t}\n\n\tpublic function defaultTables()\n\t{\n\t\treturn [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => '\n\t\t\t\t\tCREATE TABLE `users` (\n\t\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t\t`username`\tTEXT UNIQUE,\n\t\t\t\t\t\t`password`\tTEXT,\n\t\t\t\t\t\t`email`\tTEXT,\n\t\t\t\t\t\t`plex_token`\tTEXT,\n\t\t\t\t\t\t`group`\tTEXT,\n\t\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t\t`locked`\tINTEGER,\n\t\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t\t`register_date`\tDATETIME,\n\t\t\t\t\t\t`auth_service`\tTEXT DEFAULT \\'internal\\'\n\t\t\t\t\t);\n\t\t\t\t'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `chatroom` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`username`\tTEXT,\n\t\t\t\t\t`gravatar`\tTEXT,\n\t\t\t\t\t`uid`\tTEXT,\n\t\t\t\t\t`date` DATETIME,\n\t\t\t\t\t`ip` TEXT,\n\t\t\t\t\t`message` TEXT\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `tokens` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`token`\tTEXT UNIQUE,\n\t\t\t\t\t`user_id`\tINTEGER,\n\t\t\t\t\t`browser`\tTEXT,\n\t\t\t\t\t`ip`\tTEXT,\n\t\t\t\t\t`created` DATETIME,\n\t\t\t\t\t`expires` DATETIME\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `groups` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`group`\tTEXT UNIQUE,\n\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`default` INTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `categories` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category`\tTEXT UNIQUE,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`default` INTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `tabs` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`name`\tTEXT,\n\t\t\t\t\t`url`\tTEXT,\n\t\t\t\t\t`url_local`\tTEXT,\n\t\t\t\t\t`default`\tINTEGER,\n\t\t\t\t\t`enabled`\tINTEGER,\n\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t`group_id_min` INTEGER DEFAULT \\'1\\',\n\t\t\t\t\t`add_to_admin`\tINTEGER DEFAULT \\'0\\',\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`type`\tINTEGER,\n\t\t\t\t\t`splash`\tINTEGER,\n\t\t\t\t\t`ping`\t\tINTEGER,\n\t\t\t\t\t`ping_url`\tTEXT,\n\t\t\t\t\t`timeout`\tINTEGER,\n\t\t\t\t\t`timeout_ms`\tINTEGER,\n\t\t\t\t\t`preload`\tINTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `options` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`name`\tTEXT UNIQUE,\n\t\t\t\t\t`value`\tTEXT\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `invites` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`code`\tTEXT UNIQUE,\n\t\t\t\t\t`date`\tDATETIME,\n\t\t\t\t\t`email`\tTEXT,\n\t\t\t\t\t`username`\tTEXT,\n\t\t\t\t\t`dateused`\tTIMESTAMP,\n\t\t\t\t\t`usedby`\tTEXT,\n\t\t\t\t\t`ip`\tTEXT,\n\t\t\t\t\t`valid`\tTEXT,\n\t\t\t\t\t`type` TEXT,\n\t\t\t\t\t`invitedby` TEXT\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `BOOKMARK-categories` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category`\tTEXT UNIQUE,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`default` INTEGER\n\t\t\t\t);'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => 'CREATE TABLE `BOOKMARK-tabs` (\n\t\t\t\t\t`id`\tINTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,\n\t\t\t\t\t`order`\tINTEGER,\n\t\t\t\t\t`category_id`\tINTEGER,\n\t\t\t\t\t`name`\tTEXT,\n\t\t\t\t\t`url`\tTEXT,\n\t\t\t\t\t`enabled`\tINTEGER,\n\t\t\t\t\t`group_id`\tINTEGER,\n\t\t\t\t\t`image`\tTEXT,\n\t\t\t\t\t`background_color` TEXT,\n\t\t\t\t\t`text_color` TEXT\n\t\t\t\t);'\n\t\t\t)\n\t\t];\n\t}\n\n\tpublic function createDB($path, $migration = false)\n\t{\n\t\tif (!file_exists($path)) {\n\t\t\tmkdir($path, 0777, true);\n\t\t}\n\t\t$tables = $this->defaultTables();\n\t\treturn $this->processQueries($tables, $migration);\n\t}\n\n\tpublic function createFirstAdmin($username, $password, $email)\n\t{\n\n\t\t$userInfo = [\n\t\t\t'username' => $username,\n\t\t\t'password' => password_hash($password, PASSWORD_BCRYPT),\n\t\t\t'email' => $email,\n\t\t\t'group' => 'Admin',\n\t\t\t'group_id' => 0,\n\t\t\t'image' => $this->gravatar($email),\n\t\t\t'register_date' => gmdate('Y-m-d H:i:s'),\n\t\t];\n\t\t$groupInfo0 = [\n\t\t\t'group' => 'Admin',\n\t\t\t'group_id' => 0,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/admin.png',\n\t\t];\n\t\t$groupInfo1 = [\n\t\t\t'group' => 'Co-Admin',\n\t\t\t'group_id' => 1,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/coadmin.png',\n\t\t];\n\t\t$groupInfo2 = [\n\t\t\t'group' => 'Super User',\n\t\t\t'group_id' => 2,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/superuser.png',\n\t\t];\n\t\t$groupInfo3 = [\n\t\t\t'group' => 'Power User',\n\t\t\t'group_id' => 3,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/poweruser.png',\n\t\t];\n\t\t$groupInfo4 = [\n\t\t\t'group' => 'User',\n\t\t\t'group_id' => 4,\n\t\t\t'default' => 1,\n\t\t\t'image' => 'plugins/images/groups/user.png',\n\t\t];\n\t\t$groupInfoGuest = [\n\t\t\t'group' => 'Guest',\n\t\t\t'group_id' => 999,\n\t\t\t'default' => 0,\n\t\t\t'image' => 'plugins/images/groups/guest.png',\n\t\t];\n\t\t$settingsInfo = [\n\t\t\t'order' => 1,\n\t\t\t'category_id' => 0,\n\t\t\t'name' => 'Settings',\n\t\t\t'url' => 'api/v2/page/settings',\n\t\t\t'default' => 0,\n\t\t\t'enabled' => 1,\n\t\t\t'group_id' => 1,\n\t\t\t'image' => 'fontawesome::cog',\n\t\t\t'type' => 0\n\t\t];\n\t\t$homepageInfo = [\n\t\t\t'order' => 2,\n\t\t\t'category_id' => 0,\n\t\t\t'name' => 'Homepage',\n\t\t\t'url' => 'api/v2/page/homepage',\n\t\t\t'default' => 0,\n\t\t\t'enabled' => 0,\n\t\t\t'group_id' => 4,\n\t\t\t'image' => 'fontawesome::home',\n\t\t\t'type' => 0\n\t\t];\n\t\t$unsortedInfo = [\n\t\t\t'order' => 1,\n\t\t\t'category' => 'Unsorted',\n\t\t\t'category_id' => 0,\n\t\t\t'image' => 'fontawesome::question',\n\t\t\t'default' => 1\n\t\t];\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [users]',\n\t\t\t\t\t$userInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo0\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo1\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo2\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo3\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfo4\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$groupInfoGuest\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tabs]',\n\t\t\t\t\t$settingsInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tabs]',\n\t\t\t\t\t$homepageInfo\n\t\t\t\t)\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [categories]',\n\t\t\t\t\t$unsortedInfo\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserByUsernameAndEmail($username, $email)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users WHERE username = ? COLLATE NOCASE OR email = ? COLLATE NOCASE',\n\t\t\t\t\t[$username],\n\t\t\t\t\t[$email]\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function createToken($username, $email, $days = 1)\n\t{\n\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t$this->logger->debug('Starting token creation function');\n\t\t$days = ($days > 365) ? 365 : $days;\n\t\t//Quick get user ID\n\t\t$result = $this->getUserByUsernameAndEmail($username, $email);\n\t\t$config = $this->configToken();\n\t\tassert($config instanceof Lcobucci\\JWT\\Configuration);\n\t\t$now = new DateTimeImmutable();\n\t\t$token = $config->builder()\n\t\t\t// Configures the issuer (iss claim)\n\t\t\t->issuedBy('Organizr')\n\t\t\t// Configures the audience (aud claim)\n\t\t\t->permittedFor('Organizr')\n\t\t\t// Configures the id (jti claim)\n\t\t\t->identifiedBy('4f1g23a12aa')\n\t\t\t// Configures the time that the token was issue (iat claim)\n\t\t\t->issuedAt($now)\n\t\t\t// Configures the time that the token can be used (nbf claim)\n\t\t\t->canOnlyBeUsedAfter($now)\n\t\t\t// Configures the expiration time of the token (exp claim)\n\t\t\t->expiresAt($now->modify('+' . $days . ' days'))\n\t\t\t// Configures a new claim, called \"uid\"\n\t\t\t->withClaim('name', $result['username'])// Configures a new claim, called \"name\"\n\t\t\t->withClaim('group', $result['group'])// Configures a new claim, called \"group\"\n\t\t\t->withClaim('groupID', $result['group_id'])// Configures a new claim, called \"groupID\"\n\t\t\t->withClaim('email', $result['email'])// Configures a new claim, called \"email\"\n\t\t\t->withClaim('image', $result['image'])// Configures a new claim, called \"image\"\n\t\t\t->withClaim('userID', $result['id'])// Configures a new claim, called \"image\"\n\t\t\t// Configures a new header, called \"foo\"\n\t\t\t//->withHeader('foo', 'bar')\n\t\t\t// Builds a new token\n\t\t\t->getToken($config->signer(), $config->signingKey());\n\t\t//$token->headers(); // Retrieves the token headers\n\t\t//$token->claims(); // Retrieves the token claims\n\t\t$this->coookie('set', $this->cookieName, $token->toString(), $days);\n\t\t// Add token to DB\n\t\t$addToken = [\n\t\t\t'token' => $token->toString(),\n\t\t\t'user_id' => $result['id'],\n\t\t\t'created' => gmdate('Y-m-d H:i:s'),\n\t\t\t'browser' => $_SERVER ['HTTP_USER_AGENT'] ?? null,\n\t\t\t'ip' => $this->userIP(),\n\t\t\t'expires' => gmdate('Y-m-d H:i:s', time() + (86400 * $days))\n\t\t];\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tokens]',\n\t\t\t\t\t$addToken\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->processQueries($response);\n\t\tif ($token) {\n\t\t\t$this->logger->debug('Token has been created');\n\t\t} else {\n\t\t\t$this->logger->warning('Token creation error');\n\t\t}\n\t\t$this->logger->debug('Token creation function has finished');\n\t\treturn $token->toString();\n\t}\n\n\tpublic function login($array)\n\t{\n\t\t// Grab username, Password & other optional items from api call\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$oAuth = $array['oAuth'] ?? null;\n\t\t$oAuthType = $array['oAuthType'] ?? null;\n\t\t$remember = $array['remember'] ?? null;\n\t\t$tfaCode = $array['tfaCode'] ?? null;\n\t\t$loginAttempts = $array['loginAttempts'] ?? null;\n\t\t$output = $array['output'] ?? null;\n\t\t$username = (strpos($this->config['authBackend'], 'emby') !== false) ? $username : strtolower($username);\n\t\t$days = (isset($remember)) ? $this->config['rememberMeDays'] : 1;\n\t\t// Set logger channel\n\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t$this->logger->debug('Starting login function');\n\t\t// Set  other variables\n\t\t$function = 'plugin_auth_' . $this->config['authBackend'];\n\t\t$authSuccess = false;\n\t\t$authProxy = false;\n\t\t$addEmailToAuthProxy = true;\n\t\t// Check Login attempts and kill if over limit\n\t\tif ($loginAttempts > $this->config['loginAttempts'] || isset($_COOKIE['lockout'])) {\n\t\t\t$this->coookieSeconds('set', 'lockout', $this->config['loginLockout'], $this->config['loginLockout']);\n\t\t\t$this->logger->warning('User is locked out');\n\t\t\t$this->setAPIResponse('error', 'User is locked out', 403);\n\t\t\treturn false;\n\t\t}\n\t\t// Check if Auth Proxy is enabled\n\t\tif ($this->config['authProxyEnabled'] && ($this->config['authProxyHeaderName'] !== '' || $this->config['authProxyHeaderNameEmail'] !== '') && $this->config['authProxyWhitelist'] !== '') {\n\t\t\tif (isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderName'])]) || isset($this->getallheadersi()[strtolower($this->config['authProxyHeaderNameEmail'])])) {\n\t\t\t\t$usernameHeader = $this->getallheadersi()[strtolower($this->config['authProxyHeaderName'])] ?? null;\n\t\t\t\t$emailHeader = $this->getallheadersi()[strtolower($this->config['authProxyHeaderNameEmail'])] ?? null;\n\t\t\t\t$headerForLogin = $usernameHeader ?: ($emailHeader ?: null);\n\t\t\t\t$this->setLoggerChannel('Authentication', $headerForLogin);\n\t\t\t\t$this->logger->debug('Starting Auth Proxy verification');\n\t\t\t\t$whitelistRange = $this->analyzeIP($this->config['authProxyWhitelist']);\n\t\t\t\t$authProxy = $this->authProxyRangeCheck($whitelistRange['from'], $whitelistRange['to']);\n\t\t\t\t$username = ($authProxy) ? $headerForLogin : $username;\n\t\t\t\t$password = ($password == null) ? $this->random_ascii_string(10) : $password;\n\t\t\t\t$addEmailToAuthProxy = ($authProxy && $emailHeader) ? ['email' => $emailHeader] : true;\n\t\t\t\tif ($authProxy) {\n\t\t\t\t\t$this->logger->info('User has been verified using Auth Proxy');\n\t\t\t\t} else {\n\t\t\t\t\t$this->logger->warning('User has failed verification using Auth Proxy');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Check if Login method was an oAuth login\n\t\tif (!$oAuth) {\n\t\t\t$result = $this->getUserByUsernameAndEmail($username, $username);\n\t\t\t$result['password'] = $result['password'] ?? '';\n\t\t\t// Switch AuthType - internal - external - both\n\t\t\tswitch ($this->config['authType']) {\n\t\t\t\tcase 'external':\n\t\t\t\t\tif (method_exists($this, $function)) {\n\t\t\t\t\t\t$authSuccess = $this->$function($username, $password);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t/** @noinspection PhpMissingBreakStatementInspection */\n\t\t\t\tcase 'both':\n\t\t\t\t\tif (method_exists($this, $function)) {\n\t\t\t\t\t\t$authSuccess = $this->$function($username, $password);\n\t\t\t\t\t}\n\t\t\t\t// no break\n\t\t\t\tdefault: // Internal\n\t\t\t\t\tif (!$authSuccess) {\n\t\t\t\t\t\t// perform the internal authentication step\n\t\t\t\t\t\tif (password_verify($password, $result['password'])) {\n\t\t\t\t\t\t\t$this->logger->debug('User password has been verified');\n\t\t\t\t\t\t\t$authSuccess = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t$authSuccess = ($authProxy) ? $addEmailToAuthProxy : $authSuccess;\n\t\t} else {\n\t\t\t// Has oAuth Token!\n\t\t\tswitch ($oAuthType) {\n\t\t\t\tcase 'plex':\n\t\t\t\t\tif ($this->config['plexoAuth']) {\n\t\t\t\t\t\t$this->logger->debug('Starting Plex oAuth verification');\n\t\t\t\t\t\t$tokenInfo = $this->checkPlexToken($oAuth);\n\t\t\t\t\t\tif ($tokenInfo) {\n\t\t\t\t\t\t\t$authSuccess = [\n\t\t\t\t\t\t\t\t'username' => $tokenInfo['user']['username'],\n\t\t\t\t\t\t\t\t'email' => $tokenInfo['user']['email'],\n\t\t\t\t\t\t\t\t'image' => $tokenInfo['user']['thumb'],\n\t\t\t\t\t\t\t\t'token' => $tokenInfo['user']['authToken'],\n\t\t\t\t\t\t\t\t'oauth' => 'plex'\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t$this->logger->debug('User\\'s Plex Token has been verified');\n\t\t\t\t\t\t\t$this->coookie('set', 'oAuth', 'true', $this->config['rememberMeDays']);\n\t\t\t\t\t\t\t$authSuccess = ((!empty($this->config['plexAdmin']) && strtolower($this->config['plexAdmin']) == strtolower($tokenInfo['user']['username'])) || (!empty($this->config['plexAdmin']) && strtolower($this->config['plexAdmin']) == strtolower($tokenInfo['user']['email'])) || $this->checkPlexUser($tokenInfo['user']['username'])) ? $authSuccess : false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->logger->warning('User\\'s Plex Token has failed verification');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->logger->debug('Plex oAuth is not setup');\n\t\t\t\t\t\t$this->setAPIResponse('error', 'Plex oAuth is not setup', 422);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn ($output) ? 'No oAuthType defined' : 'error';\n\t\t\t}\n\t\t\t$result = ($authSuccess) ? $this->getUserByUsernameAndEmail($authSuccess['username'], $authSuccess['email']) : '';\n\t\t}\n\t\tif ($authSuccess) {\n\t\t\t// Make sure user exists in database\n\t\t\t$userExists = false;\n\t\t\t$passwordMatches = $oAuth || $authProxy;\n\t\t\t$token = (is_array($authSuccess) && isset($authSuccess['token']) ? $authSuccess['token'] : '');\n\t\t\tif (isset($result['username'])) {\n\t\t\t\t$userExists = true;\n\t\t\t\t$username = $result['username'];\n\t\t\t\tif ($passwordMatches == false) {\n\t\t\t\t\t$passwordMatches = password_verify($password, $result['password']);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($userExists) {\n\t\t\t\t//does org password need to be updated\n\t\t\t\tif (!$passwordMatches) {\n\t\t\t\t\t$this->updateUserPassword($password, $result['id']);\n\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t$this->logger->info('User Password updated from backend');\n\t\t\t\t}\n\t\t\t\tif ($token !== '') {\n\t\t\t\t\tif ($token !== $result['plex_token']) {\n\t\t\t\t\t\t$this->updateUserPlexToken($token, $result['id']);\n\t\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t\t$this->logger->info('User Plex Token updated from backend');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 2FA might go here\n\t\t\t\tif ($result['auth_service'] !== 'internal' && strpos($result['auth_service'], '::') !== false) {\n\t\t\t\t\t$tfaProceed = true;\n\t\t\t\t\t// Add check for local or not\n\t\t\t\t\tif ($this->config['ignoreTFALocal'] !== false) {\n\t\t\t\t\t\t$tfaProceed = !$this->isLocal();\n\t\t\t\t\t}\n\t\t\t\t\t// Is Plex Oauth?\n\t\t\t\t\tif ($this->config['ignoreTFAIfPlexOAuth'] !== false) {\n\t\t\t\t\t\tif (isset($authSuccess['oauth'])) {\n\t\t\t\t\t\t\tif ($authSuccess['oauth'] == 'plex') {\n\t\t\t\t\t\t\t\t$tfaProceed = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ($tfaProceed) {\n\t\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t\t$this->logger->debug('Starting 2FA verification');\n\t\t\t\t\t\t$TFA = explode('::', $result['auth_service']);\n\t\t\t\t\t\t// Is code with login info?\n\t\t\t\t\t\tif ($tfaCode == '') {\n\t\t\t\t\t\t\t$this->logger->debug('Sending 2FA response to login UI');\n\t\t\t\t\t\t\t$this->setAPIResponse('warning', '2FA Code Needed', 422);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!$this->verify2FA($TFA[1], $tfaCode, $TFA[0])) {\n\t\t\t\t\t\t\t\t$this->logger->warning('Incorrect 2FA');\n\t\t\t\t\t\t\t\t$this->setAPIResponse('error', 'Wrong 2FA', 422);\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$this->logger->info('2FA verification passed');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// End 2FA\n\t\t\t\t// authentication passed - 1) mark active and update token\n\t\t\t\t$createToken = $this->createToken($result['username'], $result['email'], $days);\n\t\t\t\tif ($createToken) {\n\t\t\t\t\t$this->logger->info('User has logged in');\n\t\t\t\t\t$ssoUserObject = ($token !== '') ? $authSuccess : $result;\n\t\t\t\t\t$this->ssoCheck($ssoUserObject, $password, $token); //need to work on this\n\t\t\t\t\treturn ($output) ? array('name' => $this->cookieName, 'token' => (string)$createToken) : true;\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'Token creation error', 500);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Create User\n\t\t\t\t$this->setLoggerChannel('Authentication', (is_array($authSuccess) && isset($authSuccess['username']) ? $authSuccess['username'] : $username));\n\t\t\t\t$this->logger->debug('Starting Registration function');\n\t\t\t\treturn $this->authRegister((is_array($authSuccess) && isset($authSuccess['username']) ? $authSuccess['username'] : $username), $password, (is_array($authSuccess) && isset($authSuccess['email']) ? $authSuccess['email'] : ''), $token);\n\t\t\t}\n\t\t} else {\n\t\t\t// authentication failed\n\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t$this->logger->warning('Wrong Password');\n\t\t\tif ($loginAttempts >= $this->config['loginAttempts']) {\n\t\t\t\t$this->logger->warning('User exceeded maximum login attempts');\n\t\t\t\t$this->coookieSeconds('set', 'lockout', $this->config['loginLockout'], $this->config['loginLockout']);\n\t\t\t\t$this->setAPIResponse('error', 'User is locked out', 403);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$this->logger->debug('User has not exceeded maximum login attempts');\n\t\t\t\t$this->setAPIResponse('error', 'User credentials incorrect', 401);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function logout()\n\t{\n\t\t$this->setLoggerChannel('Authentication');\n\t\t$this->logger->debug('Starting log out process');\n\t\t$this->logger->info('User has logged out');\n\t\t$this->coookie('delete', $this->cookieName);\n\t\t$this->coookie('delete', 'mpt');\n\t\t$this->coookie('delete', 'Auth');\n\t\t$this->coookie('delete', 'oAuth');\n\t\t$this->coookie('delete', 'connect.sid');\n\t\t$this->coookie('delete', 'petio_jwt');\n\t\t$this->clearTautulliTokens();\n\t\t$this->clearJellyfinTokens();\n\t\t$this->revokeTokenCurrentUser($this->user['token']);\n\t\t$this->clearKomgaToken();\n\t\t$this->refreshDeviceUUID();\n\t\t$this->logger->debug('Log out process has finished');\n\t\t$this->user = null;\n\t\treturn true;\n\t}\n\n\tpublic function recover($array)\n\t{\n\t\t$email = $array['email'] ?? null;\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$newPassword = $this->randString(10);\n\t\t$isUser = $this->getUserByEmail($email);\n\t\tif ($isUser) {\n\t\t\t$this->updateUserPassword($newPassword, $isUser['id']);\n\t\t\t$this->setAPIResponse('success', 'User password has been reset', 200);\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->info('User Management Function - User: ' . $isUser['username'] . '\\'s password was reset');\n\t\t\tif ($this->config['PHPMAILER-enabled']) {\n\t\t\t\t$PhpMailer = new PhpMailer();\n\t\t\t\t$emailTemplate = array(\n\t\t\t\t\t'type' => 'reset',\n\t\t\t\t\t'body' => $this->config['PHPMAILER-emailTemplateReset'],\n\t\t\t\t\t'subject' => $this->config['PHPMAILER-emailTemplateResetSubject'],\n\t\t\t\t\t'user' => $isUser['username'],\n\t\t\t\t\t'password' => $newPassword,\n\t\t\t\t\t'inviteCode' => null,\n\t\t\t\t);\n\t\t\t\t$emailTemplate = $PhpMailer->_phpMailerPluginEmailTemplate($emailTemplate);\n\t\t\t\t$sendEmail = array(\n\t\t\t\t\t'to' => $email,\n\t\t\t\t\t'user' => $isUser['username'],\n\t\t\t\t\t'subject' => $emailTemplate['subject'],\n\t\t\t\t\t'body' => $PhpMailer->_phpMailerPluginBuildEmail($emailTemplate),\n\t\t\t\t);\n\t\t\t\t$PhpMailer->_phpMailerPluginSendEmail($sendEmail);\n\t\t\t\t$this->setAPIResponse('success', 'User password has been reset and email has been sent', 200);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'User not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function register($array)\n\t{\n\t\t$email = $array['email'] ?? null;\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$registrationPassword = $array['registrationPassword'] ?? null;\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$registrationPassword) {\n\t\t\t$this->setAPIResponse('error', 'Registration Password was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$this->setLoggerChannel('User Registration');\n\t\tif ($registrationPassword == $this->decrypt($this->config['registrationPassword'])) {\n\t\t\t$this->logger->debug('Registration Password Verified');\n\t\t\tif ($this->createUser($username, $password, $email)) {\n\t\t\t\t$this->logger->info('A User has registered');\n\t\t\t\tif ($this->createToken($username, $email, $this->config['rememberMeDays'])) {\n\t\t\t\t\t$this->setLoggerChannel('Authentication', $username);\n\t\t\t\t\t$this->logger->info('User has logged in');\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Wrong Password');\n\t\t\t$this->setAPIResponse('error', 'Registration Password was incorrect', 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function authRegister($username, $password, $email, $token = null)\n\t{\n\t\t$this->setLoggerChannel('Authentication', $username);\n\t\tif ($this->config['authBackend'] !== '') {\n\t\t\t$this->ombiImport($this->config['authBackend']);\n\t\t}\n\t\t$this->ssoCheck($username, $password, $token);\n\t\tif ($token && (!$password || $password == '')) {\n\t\t\t$password = $this->random_ascii_string(10);\n\t\t}\n\t\tif ($this->createUser($username, $password, $email)) {\n\t\t\t$this->logger->info('A User has registered');\n\t\t\tif ($this->config['PHPMAILER-enabled'] && $email !== '') {\n\t\t\t\t$PhpMailer = new PhpMailer();\n\t\t\t\t$emailTemplate = array(\n\t\t\t\t\t'type' => 'registration',\n\t\t\t\t\t'body' => $this->config['PHPMAILER-emailTemplateRegisterUser'],\n\t\t\t\t\t'subject' => $this->config['PHPMAILER-emailTemplateRegisterUserSubject'],\n\t\t\t\t\t'user' => $username,\n\t\t\t\t\t'password' => null,\n\t\t\t\t\t'inviteCode' => null,\n\t\t\t\t);\n\t\t\t\t$emailTemplate = $PhpMailer->_phpMailerPluginEmailTemplate($emailTemplate);\n\t\t\t\t$sendEmail = array(\n\t\t\t\t\t'to' => $email,\n\t\t\t\t\t'user' => $username,\n\t\t\t\t\t'subject' => $emailTemplate['subject'],\n\t\t\t\t\t'body' => $PhpMailer->_phpMailerPluginBuildEmail($emailTemplate),\n\t\t\t\t);\n\t\t\t\t$PhpMailer->_phpMailerPluginSendEmail($sendEmail);\n\t\t\t}\n\t\t\tif ($this->createToken($username, $email, $this->config['rememberMeDays'])) {\n\t\t\t\t$this->logger->info('User has logged in');\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Registration error occurred');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function revokeTokenCurrentUser($token = null)\n\t{\n\t\tif ($token) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'DELETE FROM tokens WHERE token = ?',\n\t\t\t\t\t\t[$token]\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'DELETE FROM tokens WHERE user_id = ?',\n\t\t\t\t\t\t[$this->user['userID']]\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function revokeToken($token = null)\n\t{\n\t\tif (!$token) {\n\t\t\t$this->setAPIResponse('error', 'Token was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM tokens WHERE token = ?',\n\t\t\t\t\t[$token]\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse('success', 'Token revoked', 204);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function revokeTokenByIdCurrentUser($id = null)\n\t{\n\t\tif (!$id) {\n\t\t\t$this->setAPIResponse('error', 'Id was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM tokens WHERE id = ? AND user_id = ?',\n\t\t\t\t\t$id,\n\t\t\t\t\t$this->user['userID']\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse('success', 'Token revoked', 204);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateUserPassword($password, $id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['password' => password_hash($password, PASSWORD_BCRYPT)],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateUserPlexToken($token, $id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['plex_token' => $token],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getUserTabsAndCategories($type = null)\n\t{\n\t\tif (!$this->hasDB()) {\n\t\t\treturn false;\n\t\t}\n\t\t$sort = ($this->config['unsortedTabs'] == 'top') ? 'DESC' : 'ASC';\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM tabs WHERE `group_id` >= ? AND `group_id_min` <= ? AND `enabled` = 1 ORDER BY `order` ' . $sort,\n\t\t\t\t\t$this->user['groupID'],\n\t\t\t\t\t$this->user['groupID'],\n\t\t\t\t),\n\t\t\t\t'key' => 'tabs'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM tabs WHERE `add_to_admin` = 1 AND `enabled` = 1 ORDER BY `order` ' . $sort\n\t\t\t\t),\n\t\t\t\t'key' => 'tabs-admin'\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM categories ORDER BY `order` ASC',\n\t\t\t\t),\n\t\t\t\t'key' => 'categories'\n\t\t\t),\n\t\t];\n\t\t$queries = $this->processQueries($response);\n\t\t$this->applyTabVariables($queries['tabs']);\n\t\tif ($this->qualifyRequest(1)) {\n\t\t\t$this->applyTabVariables($queries['tabs-admin']);\n\t\t\t$all['tabs'] = array_merge($queries['tabs'], $queries['tabs-admin']);\n\t\t\t$newArray = [];\n\t\t\t$ids = [];\n\t\t\tforeach ($all['tabs'] as $key => $line) {\n\t\t\t\tif (!in_array($line['id'], $ids)) {\n\t\t\t\t\t$ids[] = $line['id'];\n\t\t\t\t\t$newArray[$key] = $line;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$all['tabs'] = $newArray;\n\t\t\tif (count($all['tabs']) > 0) {\n\t\t\t\tusort($all['tabs'], function ($a, $b) {\n\t\t\t\t\tif ($this->config['unsortedTabs'] == 'top') {\n\t\t\t\t\t\treturn $b['order'] <=> $a['order'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn $a['order'] <=> $b['order'];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t$newArray = NULL;\n\t\t\t$ids = NULL;\n\t\t} else {\n\t\t\t$all['tabs'] = $queries['tabs'];\n\t\t}\n\t\tforeach ($all['tabs'] as $k => $v) {\n\t\t\t$v['url_local'] = $v['type'] !== 0 ? $this->checkTabURL($v['url_local']) : $v['url_local'];\n\t\t\t$v['url'] = $v['type'] !== 0 ? $this->checkTabURL($v['url']) : $v['url'];\n\t\t\t$v['access_url'] = (!empty($v['url_local']) && ($v['url_local'] !== null) && ($v['url_local'] !== 'null') && $this->isLocal() && $v['type'] !== 0) ? $v['url_local'] : $v['url'];\n\t\t}\n\t\t$count = array_map(function ($element) {\n\t\t\treturn $element['category_id'];\n\t\t}, $all['tabs']);\n\t\t$count = (array_count_values($count));\n\t\tforeach ($queries['categories'] as $k => $v) {\n\t\t\t$v['count'] = $count[$v['category_id']] ?? 0;\n\t\t}\n\t\t$all['categories'] = $queries['categories'];\n\t\tswitch ($type) {\n\t\t\tcase 'categories':\n\t\t\t\treturn $all['categories'];\n\t\t\tcase 'tabs':\n\t\t\t\treturn $all['tabs'];\n\t\t\tdefault:\n\t\t\t\treturn $all;\n\t\t}\n\t}\n\n\tpublic function checkTabURL($url = null)\n\t{\n\t\treturn $url !== '' && $url !== null & $url !== 'null' ? $this->qualifyURL($url, false, true) : '';\n\t}\n\n\tpublic function refreshList()\n\t{\n\t\t$searchTerm = \"Refresh\";\n\t\treturn array_filter($this->config, function ($k) use ($searchTerm) {\n\t\t\treturn stripos($k, $searchTerm) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t}\n\n\tpublic function homepageOrderList()\n\t{\n\t\t$searchTerm = \"homepageOrder\";\n\t\t$order = array_filter($this->config, function ($k) use ($searchTerm) {\n\t\t\treturn stripos($k, $searchTerm) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t\tasort($order);\n\t\treturn $order;\n\t}\n\n\tpublic function tautulliList()\n\t{\n\t\t$searchTerm = \"tautulli_token\";\n\t\treturn array_filter($this->config, function ($k) use ($searchTerm) {\n\t\t\treturn stripos($k, $searchTerm) !== false;\n\t\t}, ARRAY_FILTER_USE_KEY);\n\t}\n\n\tpublic function checkPlexAdminFilled()\n\t{\n\t\tif ($this->config['plexAdmin'] == '') {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif ((strpos($this->config['plexAdmin'], '@') !== false)) {\n\t\t\t\treturn 'email';\n\t\t\t} else {\n\t\t\t\treturn 'username';\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function organizrSpecialSettings()\n\t{\n\t\t// js activeInfo\n\t\treturn [\n\t\t\t'homepage' => [\n\t\t\t\t'refresh' => $this->refreshList(),\n\t\t\t\t'order' => $this->homepageOrderList(),\n\t\t\t\t'search' => [\n\t\t\t\t\t'enabled' => $this->qualifyRequest($this->config['mediaSearchAuth']) && $this->config['mediaSearch'] == true && $this->config['plexToken'],\n\t\t\t\t\t'type' => $this->config['mediaSearchType'],\n\t\t\t\t],\n\t\t\t\t'requests' => [\n\t\t\t\t\t'service' => $this->config['defaultRequestService'],\n\t\t\t\t],\n\t\t\t\t'ombi' => [\n\t\t\t\t\t'enabled' => $this->qualifyRequest($this->config['homepageOmbiAuth']) && $this->qualifyRequest($this->config['homepageOmbiRequestAuth']) && $this->config['homepageOmbiEnabled'] == true && $this->config['ssoOmbi'] && isset($_COOKIE['Auth']),\n\t\t\t\t\t'authView' => $this->qualifyRequest($this->config['homepageOmbiAuth']),\n\t\t\t\t\t'authRequest' => $this->qualifyRequest($this->config['homepageOmbiRequestAuth']),\n\t\t\t\t\t'sso' => (bool)$this->config['ssoOmbi'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['Auth']),\n\t\t\t\t\t'alias' => (bool)$this->config['ombiAlias'],\n\t\t\t\t\t'ombiDefaultFilterAvailable' => (bool)$this->config['ombiDefaultFilterAvailable'],\n\t\t\t\t\t'ombiDefaultFilterUnavailable' => (bool)$this->config['ombiDefaultFilterUnavailable'],\n\t\t\t\t\t'ombiDefaultFilterApproved' => (bool)$this->config['ombiDefaultFilterApproved'],\n\t\t\t\t\t'ombiDefaultFilterUnapproved' => (bool)$this->config['ombiDefaultFilterUnapproved'],\n\t\t\t\t\t'ombiDefaultFilterDenied' => (bool)$this->config['ombiDefaultFilterDenied']\n\t\t\t\t],\n\t\t\t\t'overseerr' => [\n\t\t\t\t\t'enabled' => $this->qualifyRequest($this->config['homepageOverseerrAuth']) && $this->qualifyRequest($this->config['homepageOverseerrRequestAuth']) && $this->config['homepageOverseerrEnabled'] == true && $this->config['ssoOverseerr'] && isset($_COOKIE['connect_sid']),\n\t\t\t\t\t'authView' => $this->qualifyRequest($this->config['homepageOverseerrAuth']),\n\t\t\t\t\t'authRequest' => $this->qualifyRequest($this->config['homepageOverseerrRequestAuth']),\n\t\t\t\t\t'sso' => (bool)$this->config['ssoOverseerr'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['connect_sid']),\n\t\t\t\t\t'userSelectTv' => (bool)$this->config['homepageOverseerrRequestAuth'] == 'user',\n\t\t\t\t\t'overseerrDefaultFilterAvailable' => (bool)$this->config['overseerrDefaultFilterAvailable'],\n\t\t\t\t\t'overseerrDefaultFilterUnavailable' => (bool)$this->config['overseerrDefaultFilterUnavailable'],\n\t\t\t\t\t'overseerrDefaultFilterApproved' => (bool)$this->config['overseerrDefaultFilterApproved'],\n\t\t\t\t\t'overseerrDefaultFilterUnapproved' => (bool)$this->config['overseerrDefaultFilterUnapproved'],\n\t\t\t\t\t'overseerrDefaultFilterDenied' => (bool)$this->config['overseerrDefaultFilterDenied']\n\t\t\t\t],\n\t\t\t\t'jackett' => [\n\t\t\t\t\t'homepageJackettBackholeDownload' => $this->config['homepageJackettBackholeDownload'] ? true : false\n\t\t\t\t],\n\t\t\t\t'options' => [\n\t\t\t\t\t'alternateHomepageHeaders' => $this->config['alternateHomepageHeaders'],\n\t\t\t\t\t'healthChecksTags' => $this->config['healthChecksTags'],\n\t\t\t\t\t'titles' => [\n\t\t\t\t\t\t'tautulli' => $this->config['tautulliHeader']\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'media' => [\n\t\t\t\t\t'jellyfin' => $this->config['homepageJellyfinInstead']\n\t\t\t\t]\n\t\t\t],\n\t\t\t'sso' => [\n\t\t\t\t'misc' => [\n\t\t\t\t\t'oAuthLogin' => isset($_COOKIE['oAuth']),\n\t\t\t\t\t'rememberMe' => $this->config['rememberMe'],\n\t\t\t\t\t'rememberMeDays' => $this->config['rememberMeDays']\n\t\t\t\t],\n\t\t\t\t'plex' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoPlex'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['mpt']),\n\t\t\t\t\t'machineID' => strlen($this->config['plexID']) == 40,\n\t\t\t\t\t'token' => $this->config['plexToken'] !== '',\n\t\t\t\t\t'plexAdmin' => $this->checkPlexAdminFilled(),\n\t\t\t\t\t'strict' => (bool)$this->config['plexStrictFriends'],\n\t\t\t\t\t'oAuthEnabled' => (bool)$this->config['plexoAuth'],\n\t\t\t\t\t'backend' => $this->config['authBackend'] == 'plex',\n\t\t\t\t],\n\t\t\t\t'tautulli' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoTautulli'],\n\t\t\t\t\t'cookie' => !empty($this->tautulliList()),\n\t\t\t\t\t'url' => ($this->config['tautulliURL'] !== '') ? $this->config['tautulliURL'] : false,\n\t\t\t\t],\n\t\t\t\t'overseerr' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoOverseerr'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['connect.sid']),\n\t\t\t\t\t'url' => ($this->config['overseerrURL'] !== '') ? $this->config['overseerrURL'] : false,\n\t\t\t\t\t'api' => $this->config['overseerrToken'] !== '',\n\t\t\t\t],\n\t\t\t\t'petio' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoPetio'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['petio_jwt']),\n\t\t\t\t\t'url' => ($this->config['petioURL'] !== '') ? $this->config['petioURL'] : false,\n\t\t\t\t\t'api' => $this->config['petioToken'] !== '',\n\t\t\t\t],\n\t\t\t\t'ombi' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoOmbi'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['Auth']),\n\t\t\t\t\t'url' => ($this->config['ombiURL'] !== '') ? $this->config['ombiURL'] : false,\n\t\t\t\t\t'api' => $this->config['ombiToken'] !== '',\n\t\t\t\t],\n\t\t\t\t'jellyfin' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoJellyfin'],\n\t\t\t\t\t'url' => ($this->config['jellyfinURL'] !== '') ? $this->config['jellyfinURL'] : false,\n\t\t\t\t\t'ssoUrl' => ($this->config['jellyfinSSOURL'] !== '') ? $this->config['jellyfinSSOURL'] : false,\n\t\t\t\t],\n\t\t\t\t'komga' => [\n\t\t\t\t\t'enabled' => (bool)$this->config['ssoKomga'],\n\t\t\t\t\t'cookie' => isset($_COOKIE['komga_token']),\n\t\t\t\t\t'url' => ($this->config['komgaURL'] !== '') ? $this->config['komgaURL'] : false,\n\t\t\t\t]\n\t\t\t],\n\t\t\t'ping' => [\n\t\t\t\t'onlineSound' => $this->config['pingOnlineSound'],\n\t\t\t\t'offlineSound' => $this->config['pingOfflineSound'],\n\t\t\t\t'statusSounds' => $this->config['statusSounds'],\n\t\t\t\t'auth' => $this->config['pingAuth'],\n\t\t\t\t'authMessage' => $this->config['pingAuthMessage'],\n\t\t\t\t'authMs' => $this->config['pingAuthMs'],\n\t\t\t\t'ms' => $this->config['pingMs'],\n\t\t\t\t'adminRefresh' => $this->config['adminPingRefresh'],\n\t\t\t\t'everyoneRefresh' => $this->config['otherPingRefresh'],\n\t\t\t],\n\t\t\t'notifications' => [\n\t\t\t\t'backbone' => $this->config['notificationBackbone'],\n\t\t\t\t'position' => $this->config['notificationPosition']\n\t\t\t],\n\t\t\t'lockout' => [\n\t\t\t\t'enabled' => $this->config['lockoutSystem'],\n\t\t\t\t'timer' => $this->config['lockoutTimeout'],\n\t\t\t\t'minGroup' => $this->config['lockoutMinAuth'],\n\t\t\t\t'maxGroup' => $this->config['lockoutMaxAuth']\n\t\t\t],\n\t\t\t'user' => [\n\t\t\t\t'agent' => isset($_SERVER ['HTTP_USER_AGENT']) ? $_SERVER ['HTTP_USER_AGENT'] : null,\n\t\t\t\t'oAuthLogin' => isset($_COOKIE['oAuth']),\n\t\t\t\t'local' => $this->isLocal(),\n\t\t\t\t'ip' => $this->userIP()\n\t\t\t],\n\t\t\t'login' => [\n\t\t\t\t'rememberMe' => $this->config['rememberMe'],\n\t\t\t\t'rememberMeDays' => $this->config['rememberMeDays'],\n\t\t\t\t'wanDomain' => $this->config['wanDomain'],\n\t\t\t\t'localAddress' => $this->config['localAddress'],\n\t\t\t\t'enableLocalAddressForward' => $this->config['enableLocalAddressForward'],\n\t\t\t],\n\t\t\t'misc' => [\n\t\t\t\t'installedPlugins' => $this->qualifyRequest(1) ? $this->config['installedPlugins'] : '',\n\t\t\t\t'installedThemes' => $this->qualifyRequest(1) ? $this->config['installedThemes'] : '',\n\t\t\t\t'return' => $_SERVER['HTTP_REFERER'] ?? false,\n\t\t\t\t'authDebug' => $this->config['authDebug'],\n\t\t\t\t'minimalLoginScreen' => $this->config['minimalLoginScreen'],\n\t\t\t\t'unsortedTabs' => $this->config['unsortedTabs'],\n\t\t\t\t'authType' => $this->config['authType'],\n\t\t\t\t'authBackend' => $this->config['authBackend'],\n\t\t\t\t'newMessageSound' => (isset($this->config['CHAT-newMessageSound-include'])) ? $this->config['CHAT-newMessageSound-include'] : '',\n\t\t\t\t'uuid' => ($this->config['uuid']) ?? null,\n\t\t\t\t'docker' => $this->qualifyRequest(1) ? $this->docker : '',\n\t\t\t\t'githubCommit' => $this->qualifyRequest(1) ? $this->commit : '',\n\t\t\t\t'schema' => $this->qualifyRequest(1) ? $this->getSchema() : '',\n\t\t\t\t'debugArea' => $this->qualifyRequest($this->config['debugAreaAuth']),\n\t\t\t\t'debugErrors' => $this->config['debugErrors'],\n\t\t\t\t'sandbox' => $this->config['sandbox'],\n\t\t\t\t'expandCategoriesByDefault' => $this->config['expandCategoriesByDefault'],\n\t\t\t\t'autoCollapseCategories' => $this->config['autoCollapseCategories'],\n\t\t\t\t'autoExpandNavBar' => $this->config['autoExpandNavBar'],\n\t\t\t\t'sideMenuCollapsed' => $this->config['allowCollapsableSideMenu'] && $this->config['sideMenuCollapsed'],\n\t\t\t\t'collapseSideMenuOnClick' => $this->config['allowCollapsableSideMenu'] && $this->config['collapseSideMenuOnClick'],\n\t\t\t\t'authProxyOverrideLogout' => $this->config['authProxyOverrideLogout'],\n\t\t\t\t'authProxyLogoutURL' => $this->config['authProxyLogoutURL'],\n\t\t\t],\n\t\t\t'menuLink' => [\n\t\t\t\t'githubMenuLink' => $this->config['githubMenuLink'],\n\t\t\t\t'organizrSupportMenuLink' => $this->config['organizrSupportMenuLink'],\n\t\t\t\t'organizrDocsMenuLink' => $this->config['organizrDocsMenuLink'],\n\t\t\t\t'organizrSignoutMenuLink' => $this->config['organizrSignoutMenuLink'],\n\t\t\t\t'organizrFeatureRequestLink' => $this->config['organizrFeatureRequestLink']\n\t\t\t]\n\t\t];\n\t}\n\n\tpublic function checkLog($path)\n\t{\n\t\tif (file_exists($path)) {\n\t\t\tif (filesize($path) > 500000) {\n\t\t\t\trename($path, $path . '[' . date('Y-m-d') . '].json');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function writeLog($type = 'error', $message = null, $username = null)\n\t{\n\t\t$this->timeExecution = $this->timeExecution($this->timeExecution);\n\t\t$message = $message . ' [Execution Time: ' . $this->formatSeconds($this->timeExecution) . ']';\n\t\t$username = ($username) ? htmlspecialchars($username, ENT_QUOTES) : $this->user['username'] ?? 'SYSTEM';\n\t\tif ($this->checkLog($this->organizrLog)) {\n\t\t\t$getLog = str_replace(\"\\r\\ndate\", \"date\", file_get_contents($this->organizrLog));\n\t\t\t$gotLog = json_decode($getLog, true);\n\t\t}\n\t\t$logEntryFirst = array('logType' => 'organizr_log', 'log_items' => array(array('date' => date(\"Y-m-d H:i:s\"), 'utc_date' => $this->currentTime, 'type' => $type, 'username' => $username, 'ip' => $this->userIP(), 'message' => $message)));\n\t\t$logEntry = array('date' => date(\"Y-m-d H:i:s\"), 'utc_date' => $this->currentTime, 'type' => $type, 'username' => $username, 'ip' => $this->userIP(), 'message' => $message);\n\t\tif (isset($gotLog)) {\n\t\t\tarray_push($gotLog[\"log_items\"], $logEntry);\n\t\t\t$writeFailLog = str_replace(\"date\", \"\\r\\ndate\", json_encode($gotLog));\n\t\t} else {\n\t\t\t$writeFailLog = str_replace(\"date\", \"\\r\\ndate\", json_encode($logEntryFirst));\n\t\t}\n\t\tfile_put_contents($this->organizrLog, $writeFailLog);\n\t}\n\n\tpublic function isApprovedRequest($method, $data)\n\t{\n\t\t$requesterToken = $this->getallheadersi()['token'] ?? ($_GET['apikey'] ?? false);\n\t\t$apiKey = ($this->config['organizrAPI']) ?? null;\n\t\tif (isset($data['formKey'])) {\n\t\t\t$formKey = $data['formKey'];\n\t\t} elseif (isset($this->getallheadersi()['formkey'])) {\n\t\t\t$formKey = $this->getallheadersi()['formkey'];\n\t\t} else {\n\t\t\t$formKey = false;\n\t\t}\n\t\t// Check token or API key\n\t\t// If API key, return 0 for admin\n\t\tif (strlen($requesterToken) == 20 && $requesterToken == $apiKey) {\n\t\t\t//DO API CHECK\n\t\t\treturn true;\n\t\t} elseif ($method == 'POST') {\n\t\t\tif ($this->checkFormKey($formKey)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t$this->setLoggerChannel('Authentication');\n\t\t\t\t$this->logger->warning('Unable to authenticate Form Key: ' . $formKey);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function checkFormKey($formKey = '')\n\t{\n\t\treturn password_verify(substr($this->config['organizrHash'], 2, 10), $formKey);\n\t}\n\n\tpublic function buildHomepage()\n\t{\n\t\t$homepageOrder = $this->homepageOrderList();\n\t\t$homepageBuilt = '';\n\t\tforeach ($homepageOrder as $key => $value) {\n\t\t\t//new way\n\t\t\tif (method_exists($this, $key)) {\n\t\t\t\t$homepageBuilt .= $this->$key();\n\t\t\t} elseif (strpos($key, 'homepageOrdercustomhtml') !== false) {\n\t\t\t\t$iteration = substr($key, -2);\n\t\t\t\t$homepageBuilt .= $this->homepageOrdercustomhtml($iteration);\n\t\t\t} else {\n\t\t\t\t$homepageBuilt .= '<div id=\"' . $key . '\"></div>';\n\t\t\t}\n\t\t\t//old way\n\t\t\t//$homepageBuilt .= $this->buildHomepageItem($key);\n\t\t}\n\t\treturn $homepageBuilt;\n\t}\n\n\tpublic function buildHomepageSettings()\n\t{\n\t\t$homepageOrder = $this->homepageOrderList();\n\t\t$homepageList = '<div class=\"col-lg-12\"><h4 lang=\"en\">Drag Homepage Items to Order Them</h4></div><div id=\"homepage-items-sort\" class=\"external-events\">';\n\t\t$inputList = '<form id=\"homepage-values\" class=\"row\">';\n\t\tforeach ($homepageOrder as $key => $val) {\n\t\t\tswitch ($key) {\n\t\t\t\tcase 'homepageOrdercustomhtml01':\n\t\t\t\tcase 'homepageOrdercustomhtml02':\n\t\t\t\tcase 'homepageOrdercustomhtml03':\n\t\t\t\tcase 'homepageOrdercustomhtml04':\n\t\t\t\tcase 'homepageOrdercustomhtml05':\n\t\t\t\tcase 'homepageOrdercustomhtml06':\n\t\t\t\tcase 'homepageOrdercustomhtml07':\n\t\t\t\tcase 'homepageOrdercustomhtml08':\n\t\t\t\t\t$iteration = substr($key, -2);\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/HTML5.png';\n\t\t\t\t\tif (!$this->config['homepageCustomHTML' . $iteration . 'Enabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdertransmission':\n\t\t\t\t\t$class = 'bg-transmission';\n\t\t\t\t\t$image = 'plugins/images/tabs/transmission.png';\n\t\t\t\t\tif (!$this->config['homepageTransmissionEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdernzbget':\n\t\t\t\t\t$class = 'bg-nzbget';\n\t\t\t\t\t$image = 'plugins/images/tabs/nzbget.png';\n\t\t\t\t\tif (!$this->config['homepageNzbgetEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderjdownloader':\n\t\t\t\t\t$class = 'bg-sab';\n\t\t\t\t\t$image = 'plugins/images/tabs/jdownloader.png';\n\t\t\t\t\tif (!$this->config['homepageJdownloaderEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdersabnzbd':\n\t\t\t\t\t$class = 'bg-sab';\n\t\t\t\t\t$image = 'plugins/images/tabs/sabnzbd.png';\n\t\t\t\t\tif (!$this->config['homepageSabnzbdEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderdeluge':\n\t\t\t\t\t$class = 'bg-deluge';\n\t\t\t\t\t$image = 'plugins/images/tabs/deluge.png';\n\t\t\t\t\tif (!$this->config['homepageDelugeEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderqBittorrent':\n\t\t\t\t\t$class = 'bg-qbit';\n\t\t\t\t\t$image = 'plugins/images/tabs/qBittorrent.png';\n\t\t\t\t\tif (!$this->config['homepageqBittorrentEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderuTorrent':\n\t\t\t\t\t$class = 'bg-qbit';\n\t\t\t\t\t$image = 'plugins/images/tabs/utorrent.png';\n\t\t\t\t\tif (!$this->config['homepageuTorrentEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderrTorrent':\n\t\t\t\t\t$class = 'bg-qbit';\n\t\t\t\t\t$image = 'plugins/images/tabs/rTorrent.png';\n\t\t\t\t\tif (!$this->config['homepagerTorrentEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderplexnowplaying':\n\t\t\t\tcase 'homepageOrderplexrecent':\n\t\t\t\tcase 'homepageOrderplexplaylist':\n\t\t\t\t\t$class = 'bg-plex';\n\t\t\t\t\t$image = 'plugins/images/tabs/plex.png';\n\t\t\t\t\tif (!$this->config['homepagePlexEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderembynowplaying':\n\t\t\t\tcase 'homepageOrderembyrecent':\n\t\t\t\t\t$class = 'bg-emby';\n\t\t\t\t\t$image = 'plugins/images/tabs/emby.png';\n\t\t\t\t\tif (!$this->config['homepageEmbyEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderjellyfinnowplaying':\n\t\t\t\tcase 'homepageOrderjellyfinrecent':\n\t\t\t\t\t$class = 'bg-jellyfin';\n\t\t\t\t\t$image = 'plugins/images/tabs/jellyfin.png';\n\t\t\t\t\tif (!$this->config['homepageJellyfinEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderombi':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/ombi.png';\n\t\t\t\t\tif (!$this->config['homepageOmbiEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderoverseerr':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/overseerr.png';\n\t\t\t\t\tif (!$this->config['homepageOverseerrEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderDonate':\n\t\t\t\t\t$class = 'bg-primary';\n\t\t\t\t\t$image = 'plugins/images/tabs/donate.png';\n\t\t\t\t\tif (!$this->config['homepageDonateEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdercalendar':\n\t\t\t\t\t$class = 'bg-primary';\n\t\t\t\t\t$image = 'plugins/images/tabs/calendar.png';\n\t\t\t\t\tif (!$this->config['homepageCalendarEnabled'] && !$this->config['homepageSonarrEnabled'] && !$this->config['homepageRadarrEnabled'] && !$this->config['homepageSickrageEnabled'] && !$this->config['homepageCouchpotatoEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderdownloader':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/downloader.png';\n\t\t\t\t\tif (!$this->config['jdownloaderCombine'] && !$this->config['sabnzbdCombine'] && !$this->config['nzbgetCombine'] && !$this->config['rTorrentCombine'] && !$this->config['delugeCombine'] && !$this->config['transmissionCombine'] && !$this->config['qBittorrentCombine'] && !$this->config['uTorrentCombine']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderhealthchecks':\n\t\t\t\t\t$class = 'bg-healthchecks';\n\t\t\t\t\t$image = 'plugins/images/tabs/healthchecks.png';\n\t\t\t\t\tif (!$this->config['homepageHealthChecksEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderunifi':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/ubnt.png';\n\t\t\t\t\tif (!$this->config['homepageUnifiEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrdertautulli':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/tautulli.png';\n\t\t\t\t\tif (!$this->config['homepageTautulliEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderPihole':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/pihole.png';\n\t\t\t\t\tif (!$this->config['homepagePiholeEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderMonitorr':\n\t\t\t\t\t$class = 'bg-info';\n\t\t\t\t\t$image = 'plugins/images/tabs/monitorr.png';\n\t\t\t\t\tif (!$this->config['homepageMonitorrEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderWeatherAndAir':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/wind.png';\n\t\t\t\t\tif (!$this->config['homepageWeatherAndAirEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderSpeedtest':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/speedtest-icon.png';\n\t\t\t\t\tif (!$this->config['homepageSpeedtestEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderNetdata':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/netdata.png';\n\t\t\t\t\tif (!$this->config['homepageNetdataEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderOctoprint':\n\t\t\t\t\t$class = 'bg-success';\n\t\t\t\t\t$image = 'plugins/images/tabs/octoprint.png';\n\t\t\t\t\tif (!$this->config['homepageOctoprintEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderSonarrQueue':\n\t\t\t\t\t$class = 'bg-sonarr';\n\t\t\t\t\t$image = 'plugins/images/tabs/sonarr.png';\n\t\t\t\t\tif (!$this->config['homepageSonarrQueueEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderRadarrQueue':\n\t\t\t\t\t$class = 'bg-radarr';\n\t\t\t\t\t$image = 'plugins/images/tabs/radarr.png';\n\t\t\t\t\tif (!$this->config['homepageRadarrQueueEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderJackett':\n\t\t\t\t\t$class = 'bg-inverse';\n\t\t\t\t\t$image = 'plugins/images/tabs/jackett.png';\n\t\t\t\t\tif (!$this->config['homepageJackettEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'homepageOrderBookmarks':\n\t\t\t\t\t$class = 'bg-bookmarks';\n\t\t\t\t\t$image = 'plugins/images/bookmark.png';\n\t\t\t\t\tif (!$this->config['homepageBookmarksEnabled']) {\n\t\t\t\t\t\t$class .= ' faded';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$class = 'blue-bg';\n\t\t\t\t\t$image = '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$homepageList .= '\n\t\t<div class=\"col-md-3 col-xs-12 sort-homepage m-t-10 hvr-grow clearfix\">\n\t\t\t<div class=\"homepage-drag fc-event ' . $class . ' lazyload\"  data-src=\"' . $image . '\">\n\t\t\t\t<span class=\"ordinal-position text-uppercase badge bg-org homepage-number\" data-link=\"' . $key . '\" style=\"float:left;width: 30px;\">' . $val . '</span>\n\t\t\t\t<span class=\"homepage-text\">&nbsp; ' . strtoupper(substr($key, 13)) . '</span>\n\n\t\t\t</div>\n\t\t</div>\n\t\t';\n\t\t\t$inputList .= '<input type=\"hidden\" name=\"' . $key . '\">';\n\t\t}\n\t\t$homepageList .= '</div>';\n\t\t$inputList .= '</form>';\n\t\treturn $homepageList . $inputList;\n\t}\n\n\tpublic function setGroupOptionsVariable()\n\t{\n\t\t$this->groupOptions = $this->groupSelect();\n\t}\n\n\tpublic function getSettingsHomepageItem($item)\n\t{\n\t\t$items = $this->getSettingsHomepage();\n\t\tforeach ($items as $k => $v) {\n\t\t\tif (strtolower($v['name']) === strtolower($item)) {\n\t\t\t\t$functionName = $v['settingsArray'];\n\t\t\t\treturn $this->$functionName();\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('error', 'Homepage item was not found', 404);\n\t\treturn null;\n\t}\n\n\tpublic function getSettingsHomepageItemDebug($service)\n\t{\n\t\t$service = $this->getSettingsHomepageItem($service);\n\t\tif ($service) {\n\t\t\t$debug = [];\n\t\t\tforeach ($service['settings'] as $category => $items) {\n\t\t\t\tif ($category !== 'About' && $category !== 'Test Connection') {\n\t\t\t\t\tforeach ($items as $item) {\n\t\t\t\t\t\tif ($item['type'] !== 'html' && $item['type'] !== 'blank' && $item['type'] !== 'button') {\n\t\t\t\t\t\t\tif ((stripos($item['name'], 'token') !== false) || (stripos($item['name'], 'key') !== false) || (stripos($item['name'], 'password'))) {\n\t\t\t\t\t\t\t\tif ($item['value'] !== '') {\n\t\t\t\t\t\t\t\t\t$item['value'] = '***redacted***';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$debug[$category][$item['name']] = $item['value'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $debug;\n\t\t}\n\t\t$this->setAPIResponse('error', 'Homepage item was not found', 404);\n\t\treturn null;\n\t}\n\n\tpublic function getSettingsHomepage()\n\t{\n\t\t$this->setGroupOptionsVariable();\n\t\treturn $this->getHomepageSettingsCombined();\n\t}\n\n\tpublic function isTabNameTaken($name, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM tabs WHERE `name` LIKE ? AND `id` != ?',\n\t\t\t\t\t\t$name,\n\t\t\t\t\t\t$id\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM tabs WHERE `name` LIKE ?',\n\t\t\t\t\t\t$name\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function isCategoryNameTaken($name, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM categories WHERE `category` LIKE ? AND `id` != ?',\n\t\t\t\t\t\t$name,\n\t\t\t\t\t\t$id\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM categories WHERE `category` LIKE ?',\n\t\t\t\t\t\t$name\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function isGroupNameTaken($name, $id = null)\n\t{\n\t\tif ($id) {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM groups WHERE `group` LIKE ? AND `id` != ?',\n\t\t\t\t\t\t$name,\n\t\t\t\t\t\t$id\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t} else {\n\t\t\t$response = [\n\t\t\t\tarray(\n\t\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t'SELECT * FROM groups WHERE `group` LIKE ?',\n\t\t\t\t\t\t$name\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getTableColumns($table)\n\t{\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$query = 'PRAGMA table_info(?)';\n\t\t} else {\n\t\t\t$query = 'DESCRIBE %n';\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => [\n\t\t\t\t\t$query, $table\n\t\t\t\t]\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getTableColumnsFormatted($table)\n\t{\n\t\tif ($this->config['driver'] == 'sqlite3') {\n\t\t\t$name = 'name';\n\t\t} else {\n\t\t\t$name = 'Field';\n\t\t}\n\t\t$columns = $this->getTableColumns($table);\n\t\tif ($columns) {\n\t\t\t$columnsFormatted = [];\n\t\t\tforeach ($columns as $k => $v) {\n\t\t\t\t$columnsFormatted[$v[$name]] = $v;\n\t\t\t}\n\t\t\treturn $columnsFormatted;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getTabById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM tabs WHERE `id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getTabGroupByTabName($tab)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT group_id FROM tabs WHERE name LIKE %~like~',\n\t\t\t\t\t$tab\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\treturn $query ? $query['group_id'] : 0;\n\t}\n\n\tpublic function getCategoryById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM categories WHERE `id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getGroupUserCountById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT count(username) AS count FROM groups INNER JOIN users ON users.group_id = groups.group_id AND groups.id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getGroupById($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups WHERE `id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getGroupByGroupId($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups WHERE `group_id` = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultGroup()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultGroupId()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `group_id` FROM groups WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultCategory()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM categories WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getDefaultCategoryId()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `category_id` FROM categories WHERE `default` = 1'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextTabOrder()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `order` from tabs ORDER BY `order` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextCategoryOrder()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `order` from categories ORDER BY `order` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextGroupOrder()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `group_id` from groups WHERE `group_id` != \"999\" ORDER BY `group_id` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getNextCategoryId()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchSingle',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT `category_id` from categories ORDER BY `category_id` DESC'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function clearTabDefault()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE tabs SET `default` = 0'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function clearCategoryDefault()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE categories SET `default` = 0'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function clearGroupDefault()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE groups SET `default` = 0'\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function checkKeys($tabInfo, $newData)\n\t{\n\t\tforeach ($newData as $k => $v) {\n\t\t\tif (!array_key_exists($k, $tabInfo)) {\n\t\t\t\tunset($newData[$k]);\n\t\t\t}\n\t\t}\n\t\treturn $newData;\n\t}\n\n\tpublic function getTabByIdCheckUser($id)\n\t{\n\t\t$tabInfo = $this->getTabById($id);\n\t\tif ($tabInfo) {\n\t\t\tif ($this->qualifyRequest($tabInfo['group_id'], true)) {\n\t\t\t\treturn $tabInfo;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function deleteTab($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM tabs WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$tabInfo = $this->getTabById($id);\n\t\tif ($tabInfo) {\n\t\t\t$this->setLoggerChannel('Tab Management');\n\t\t\t$this->logger->debug('Deleted Tab [' . $tabInfo['name'] . ']');\n\t\t\t$this->setAPIResponse('success', 'Tab deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addTab($array)\n\t{\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$array = $this->checkKeys($this->getTableColumnsFormatted('tabs'), $array);\n\t\t$array['group_id'] = ($array['group_id']) ?? $this->getDefaultGroupId();\n\t\t$array['category_id'] = ($array['category_id']) ?? $this->getDefaultCategoryId();\n\t\t$array['enabled'] = ($array['enabled']) ?? 0;\n\t\t$array['default'] = ($array['default']) ?? 0;\n\t\t$array['type'] = ($array['type']) ?? 1;\n\t\t$array['order'] = ($array['order']) ?? $this->getNextTabOrder() + 1;\n\t\tif (array_key_exists('name', $array)) {\n\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n\t\t\tif ($this->isTabNameTaken($array['name'])) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['name'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Tab name was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!array_key_exists('url', $array) && !array_key_exists('url_local', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Tab url or url_local was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!array_key_exists('image', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Tab image was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [tabs]',\n\t\t\t\t\t$array\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Tab added');\n\t\t$this->setLoggerChannel('Tab Management');\n\t\t$this->logger->debug('Added Tab for [' . $array['name'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateTab($id, $array)\n\t{\n\t\tif (!$id || $id == '') {\n\t\t\t$this->setAPIResponse('error', 'id was not set', 422);\n\t\t\treturn null;\n\t\t}\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$tabInfo = $this->getTabById($id);\n\t\tif ($tabInfo) {\n\t\t\t$array = $this->checkKeys($tabInfo, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'No tab info found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('name', $array)) {\n\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n\t\t\tif ($this->isTabNameTaken($array['name'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['name'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('default', $array)) {\n\t\t\tif ($array['default']) {\n\t\t\t\t$this->clearTabDefault();\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('group_id', $array)) {\n\t\t\t$groupCheck = (array_key_exists('group_id_min', $array)) ? $array['group_id_min'] : $tabInfo['group_id_min'];\n\t\t\tif ($array['group_id'] < $groupCheck) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $tabInfo['name'] . ' cannot have a lower Group Id Max than Group Id Min', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('group_id_min', $array)) {\n\t\t\t$groupCheck = (array_key_exists('group_id', $array)) ? $array['group_id'] : $tabInfo['group_id'];\n\t\t\tif ($array['group_id_min'] > $groupCheck) {\n\t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $tabInfo['name'] . ' cannot have a higher Group Id Min than Group Id Max', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE tabs SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Tab info updated');\n\t\t$this->setLoggerChannel('Tab Management');\n\t\t$this->logger->debug('Edited Tab Info for [' . $tabInfo['name'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateTabOrder($array)\n\t{\n\t\tif (count($array) >= 1) {\n\t\t\tforeach ($array as $tab) {\n\t\t\t\tif (count($tab) !== 2) {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$id = $tab['id'] ?? null;\n\t\t\t\t$order = $tab['order'] ?? null;\n\t\t\t\tif ($id && $order) {\n\t\t\t\t\t$response = [\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t\t\t'UPDATE tabs set `order` = ? WHERE `id` = ?',\n\t\t\t\t\t\t\t\t$order,\n\t\t\t\t\t\t\t\t$id\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t\t$this->processQueries($response);\n\t\t\t\t\t$this->setAPIResponse(null, 'Tab Order updated');\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'data is empty or not in array', 422);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addCategory($array)\n\t{\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$array = $this->checkKeys($this->getTableColumnsFormatted('categories'), $array);\n\t\t$array['default'] = ($array['default']) ?? 0;\n\t\t$array['order'] = ($array['order']) ?? $this->getNextCategoryOrder() + 1;\n\t\t$array['category_id'] = ($array['category_id']) ?? $this->getNextCategoryId() + 1;\n\t\tif (array_key_exists('category', $array)) {\n\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n\t\t\tif ($this->isCategoryNameTaken($array['category'])) {\n\t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['category'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Category name was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (!array_key_exists('image', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Category image was not supplied', 422);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [categories]',\n\t\t\t\t\t$array\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Category added');\n\t\t$this->setLoggerChannel('Category Management');\n\t\t$this->logger->debug('Added Category for [' . $array['category'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateCategory($id, $array)\n\t{\n\t\tif (!$id || $id == '') {\n\t\t\t$this->setAPIResponse('error', 'id was not set', 422);\n\t\t\treturn null;\n\t\t}\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$categoryInfo = $this->getCategoryById($id);\n\t\tif ($categoryInfo) {\n\t\t\t$array = $this->checkKeys($categoryInfo, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'No category info found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('category', $array)) {\n\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n\t\t\tif ($this->isCategoryNameTaken($array['category'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['category'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n\t\t}\n\t\tif (array_key_exists('default', $array)) {\n\t\t\tif ($array['default']) {\n\t\t\t\t$this->clearCategoryDefault();\n\t\t\t}\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE categories SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Category info updated');\n\t\t$this->setLoggerChannel('Category Management');\n\t\t$this->logger->debug('Edited Category [' . $categoryInfo['category'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateCategoryOrder($array)\n\t{\n\t\tif (count($array) >= 1) {\n\t\t\tforeach ($array as $category) {\n\t\t\t\tif (count($category) !== 2) {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$id = $category['id'] ?? null;\n\t\t\t\t$order = $category['order'] ?? null;\n\t\t\t\tif ($id && $order) {\n\t\t\t\t\t$response = [\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'function' => 'query',\n\t\t\t\t\t\t\t'query' => array(\n\t\t\t\t\t\t\t\t'UPDATE categories set `order` = ? WHERE `id` = ?',\n\t\t\t\t\t\t\t\t$order,\n\t\t\t\t\t\t\t\t$id\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t\t$this->processQueries($response);\n\t\t\t\t\t$this->setAPIResponse(null, 'Category Order updated');\n\t\t\t\t} else {\n\t\t\t\t\t$this->setAPIResponse('error', 'data is malformed', 422);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'data is empty or not in array', 422);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function deleteCategory($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM categories WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$categoryInfo = $this->getCategoryById($id);\n\t\tif ($categoryInfo) {\n\t\t\t$this->setLoggerChannel('Category Management');\n\t\t\t$this->logger->debug('Deleted Category [' . $categoryInfo['category'] . ']');\n\t\t\t$this->setAPIResponse('success', 'Category deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function inconspicuous(): string\n\t{\n\t\tif ($this->hasDB()) {\n\t\t\tif ($this->config['easterEggs']) {\n\t\t\t\treturn '\n\t\t\t\t<div class=\"org-rox-trigger\">\n\t\t\t\t\t<div class=\"org-rox\">\n\t\t\t\t\t\t<div class=\"hair\"></div>\n\t\t\t\t\t\t<div class=\"head\">\n\t\t\t\t\t\t\t<div class=\"ear left\"></div>\n\t\t\t\t\t\t\t<div class=\"ear right\"></div>\n\t\t\t\t\t\t\t<div class=\"face\">\n\t\t\t\t\t\t\t\t<div class=\"eye left\"></div>\n\t\t\t\t\t\t\t\t<div class=\"eye right\"></div>\n\t\t\t\t\t\t\t\t<div class=\"nose\"></div>\n\t\t\t\t\t\t\t\t<div class=\"mouth\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>';\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic function marketplaceFileListFormat($files, $folder, $type)\n\t{\n\t\tforeach ($files as $k => $v) {\n\t\t\t$splitFiles = explode('|', $v);\n\t\t\t$prePath = (strlen($k) !== 1) ? $k . '/' : $k;\n\t\t\tforeach ($splitFiles as $file) {\n\t\t\t\t$filesList[] = array(\n\t\t\t\t\t'fileName' => $file,\n\t\t\t\t\t'path' => $prePath,\n\t\t\t\t\t'githubPath' => 'https://raw.githubusercontent.com/causefx/Organizr/v2-' . $type . '/' . $folder . $prePath . $file\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn $filesList;\n\t}\n\n\tpublic function removeTheme($theme)\n\t{\n\t\t$this->setLoggerChannel('Theme Marketplace');\n\t\t$theme = $this->cleanClassName($theme, '_');\n\t\t$array = $this->getThemesMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access theme marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!isset($arrayLower[$theme])) {\n\t\t\t$this->setAPIResponse('error', 'Theme does not exist in marketplace', 404);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($theme, array_keys($arrayLower));\n\t\t\t$theme = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$theme];\n\t\t$themeDir = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . $array['project_folder'] . DIRECTORY_SEPARATOR;\n\t\t$dirExists = file_exists($themeDir);\n\t\tif ($dirExists) {\n\t\t\tif (!$this->rrmdir($themeDir)) {\n\t\t\t\t$this->logger->info('Remove File Failed  for: ' . $array['project_folder']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Theme is not installed', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$this->updateInstalledThemes('uninstall', $theme, $array);\n\t\t$this->setAPIResponse('success', 'Theme removed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function installTheme($theme)\n\t{\n\t\t$this->setLoggerChannel('Theme Marketplace');\n\t\t$theme = $this->cleanClassName($theme, '_');\n\t\t$array = $this->getThemesMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access theme marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!isset($arrayLower[$theme])) {\n\t\t\t$this->setAPIResponse('error', 'Theme [' . $theme . '] does not exist in marketplace', 404, $arrayLower);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($theme, array_keys($arrayLower));\n\t\t\t$theme = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$theme];\n\t\t// Check Version of Organizr against minimum version needed\n\t\t$compare = new Composer\\Semver\\Comparator;\n\t\tif ($compare->lessThan($this->version, $array['minimum_organizr_version'])) {\n\t\t\t$this->logger->warning('Minimum Organizr version needed: ' . $array['minimum_organizr_version']);\n\t\t\t$this->setResponse(500, 'Minimum Organizr version needed: ' . $array['minimum_organizr_version'] . ' | Current Version: ' . $this->version);\n\t\t\treturn true;\n\t\t}\n\t\t// It is okay to user Plugin function - we should rename it so it is universal\n\t\t$files = $this->getPluginFilesFromRepo($theme, $array);\n\t\tif ($files) {\n\t\t\t$downloadList = $this->themeFileListFormat($files, $array['project_folder']);\n\t\t} else {\n\t\t\t$this->logger->warning('File list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for theme', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$downloadList) {\n\t\t\t$this->logger->warning('Setting download list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for theme', 409);\n\t\t\treturn false;\n\t\t}\n\t\tforeach ($downloadList as $k => $v) {\n\t\t\t$file = array(\n\t\t\t\t'from' => $v['githubPath'],\n\t\t\t\t'to' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'] . $v['fileName']),\n\t\t\t\t'path' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'])\n\t\t\t);\n\t\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes');\n\t\t\tif (!$this->downloadFileToPath($file['from'], $file['to'], $file['path'])) {\n\t\t\t\t$this->setLoggerChannel('Theme Marketplace');\n\t\t\t\t$this->logger->warning('Downloaded File Failed  for: ' . $v['githubPath']);\n\t\t\t\t$this->setAPIResponse('error', 'Theme download failed', 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$this->updateInstalledThemes('install', $theme, $array);\n\t\t$this->setAPIResponse('success', 'Theme installed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function themeFileListFormat($files, $folder)\n\t{\n\t\t$filesList = false;\n\t\tforeach ($files as $k => $v) {\n\t\t\tif ($v['type'] !== 'dir') {\n\t\t\t\t$filesList[] = array(\n\t\t\t\t\t'fileName' => $v['name'],\n\t\t\t\t\t'path' => $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . $folder . DIRECTORY_SEPARATOR . str_replace($v['name'], '', $v['path']),\n\t\t\t\t\t'githubPath' => $v['download_url']\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'themes' . DIRECTORY_SEPARATOR . $folder);\n\t\treturn $filesList;\n\t}\n\n\tpublic function pluginFileListFormat($files, $folder)\n\t{\n\t\t$filesList = false;\n\t\tforeach ($files as $k => $v) {\n\t\t\tif ($v['type'] !== 'dir') {\n\t\t\t\t$filesList[] = array(\n\t\t\t\t\t'fileName' => $v['name'],\n\t\t\t\t\t'path' => $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $folder . DIRECTORY_SEPARATOR . str_replace($v['name'], '', $v['path']),\n\t\t\t\t\t'githubPath' => $v['download_url']\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $folder);\n\t\treturn $filesList;\n\t}\n\n\tpublic function getPluginFilesFromGithub($plugin = 'test')\n\t{\n\t\t$url = 'https://api.github.com/repos/causefx/organizr/contents/' . $plugin . '?ref=v2-plugins';\n\t\t$options = array('verify' => false);\n\t\t$response = Requests::get($url, array(), $options);\n\t\tif ($response->success) {\n\t\t\treturn json_decode($response->body, true);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getBranchFromGithub($repo)\n\t{\n\t\t$url = 'https://api.github.com/repos/' . $repo;\n\t\t$options = array('verify' => false);\n\t\t$response = Requests::get($url, $this->setGithubAccessToken(), $options);\n\t\ttry {\n\t\t\tif ($response->success) {\n\t\t\t\t$github = json_decode($response->body, true);\n\t\t\t\treturn $github['default_branch'] ?? null;\n\t\t\t} else {\n\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t$this->logger->warning('Plugin failed to get branch from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->logger->error($e);\n\t\t\t$this->setAPIResponse('error', $e->getMessage(), 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getFilesFromGithub($repo, $branch)\n\t{\n\t\tif (!$repo || !$branch) {\n\t\t\treturn false;\n\t\t}\n\t\t$url = 'https://api.github.com/repos/' . $repo . '/git/trees/' . $branch . '?recursive=1';\n\t\t$options = array('verify' => false);\n\t\t$response = Requests::get($url, $this->setGithubAccessToken(), $options);\n\t\ttry {\n\t\t\tif ($response->success) {\n\t\t\t\t$github = json_decode($response->body, true);\n\t\t\t\treturn is_array($github) ? $github : null;\n\t\t\t} else {\n\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t$this->logger->warning('Plugin failed to get branch from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->logger->error($e);\n\t\t\t$this->setAPIResponse('error', $e->getMessage(), 401);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function formatFilesFromGithub($files, $repo, $branch, $folder)\n\t{\n\t\tif (!$files || !$repo || !$branch || !$folder) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isset($files['tree'])) {\n\t\t\t$fileList = [];\n\t\t\tforeach ($files['tree'] as $k => $v) {\n\t\t\t\tif ($v['type'] !== 'tree') {\n\t\t\t\t\t$fileInfo = pathinfo($v['path']);\n\t\t\t\t\t$v['name'] = $fileInfo['basename'];\n\t\t\t\t\t$v['download_url'] = 'https://raw.githubusercontent.com/' . $repo . '/' . $branch . '/' . $v['path'];\n\t\t\t\t\tif ($folder == 'root') {\n\t\t\t\t\t\t$fileList[] = $v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stripos($v['path'], $folder) !== false) {\n\t\t\t\t\t\t\t$v['path'] = (substr($v['path'], 0, strlen($folder)) == $folder) ? substr($v['path'], (strlen($folder) + 1)) : $v['path'];\n\t\t\t\t\t\t\t$fileList[] = $v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $fileList;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getPluginFilesFromRepo($plugin, $pluginDetails)\n\t{\n\t\tif (stripos($pluginDetails['repo'], 'github.com') !== false) {\n\t\t\t$repo = explode('https://github.com/', $pluginDetails['repo']);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\t$branch = $this->getBranchFromGithub($repo[1]);\n\t\tif ($branch) {\n\t\t\treturn $this->formatFilesFromGithub($this->getFilesFromGithub($repo[1], $branch), $repo[1], $branch, $pluginDetails['github_folder']);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function installPlugin($plugin)\n\t{\n\t\t$this->setLoggerChannel('Plugin Marketplace');\n\t\t$plugin = $this->reverseCleanClassName($plugin);\n\t\t$array = $this->getPluginsMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access plugin marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$arrayLower[$plugin]) {\n\t\t\t$this->setAPIResponse('error', 'Plugin does not exist in marketplace', 404);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($plugin, array_keys($arrayLower));\n\t\t\t$plugin = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$plugin];\n\t\t// Check Version of Organizr against minimum version needed\n\t\t$compare = new Composer\\Semver\\Comparator;\n\t\tif ($compare->lessThan($this->version, $array['minimum_organizr_version'])) {\n\t\t\t$this->logger->warning('Minimum Organizr version needed: ' . $array['minimum_organizr_version']);\n\t\t\t$this->setResponse(500, 'Minimum Organizr version needed: ' . $array['minimum_organizr_version'] . ' | Current Version: ' . $this->version);\n\t\t\treturn true;\n\t\t}\n\t\t$files = $this->getPluginFilesFromRepo($plugin, $array);\n\t\tif ($files) {\n\t\t\t$downloadList = $this->pluginFileListFormat($files, $array['project_folder']);\n\t\t} else {\n\t\t\t$this->logger->warning('File list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for plugin', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$downloadList) {\n\t\t\t$this->logger->warning('Setting download list failed for: ' . $array['github_folder']);\n\t\t\t$this->setAPIResponse('error', 'Could not get download list for plugin', 409);\n\t\t\treturn false;\n\t\t}\n\t\tforeach ($downloadList as $k => $v) {\n\t\t\t$file = array(\n\t\t\t\t'from' => $v['githubPath'],\n\t\t\t\t'to' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'] . $v['fileName']),\n\t\t\t\t'path' => str_replace(array('/', '\\\\'), DIRECTORY_SEPARATOR, $v['path'])\n\t\t\t);\n\t\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins');\n\t\t\tif (!$this->downloadFileToPath($file['from'], $file['to'], $file['path'])) {\n\t\t\t\t$this->setLoggerChannel('Plugin Marketplace');\n\t\t\t\t$this->logger->warning('Downloaded File Failed  for: ' . $v['githubPath']);\n\t\t\t\t$this->setAPIResponse('error', 'Plugin download failed', 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$this->updateInstalledPlugins('install', $plugin, $array);\n\t\t$this->setAPIResponse('success', 'Plugin installed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function removePlugin($plugin)\n\t{\n\t\t$this->setLoggerChannel('Plugin Marketplace');\n\t\t$plugin = $this->reverseCleanClassName($plugin);\n\t\t$array = $this->getPluginsMarketplace();\n\t\t$arrayLower = array_change_key_case($array);\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'Could not access plugin marketplace', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$arrayLower[$plugin]) {\n\t\t\t$this->setAPIResponse('error', 'Plugin does not exist in marketplace', 404);\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$key = array_search($plugin, array_keys($arrayLower));\n\t\t\t$plugin = array_keys($array)[$key];\n\t\t}\n\t\t$array = $array[$plugin];\n\t\t$pluginDir = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'plugins' . DIRECTORY_SEPARATOR . $array['project_folder'] . DIRECTORY_SEPARATOR;\n\t\t$dirExists = file_exists($pluginDir);\n\t\tif ($dirExists) {\n\t\t\tif (!$this->rrmdir($pluginDir)) {\n\t\t\t\t$this->logger->info('Remove File Failed  for: ' . $array['project_folder']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Plugin is not installed', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$this->updateInstalledPlugins('uninstall', $plugin, $array);\n\t\t$this->setAPIResponse('success', 'Plugin removed', 200, $array);\n\t\treturn true;\n\t}\n\n\tpublic function updateInstalledPlugins($action, $plugin, $pluginDetails)\n\t{\n\t\tif (!$action || !$plugin || !$pluginDetails) {\n\t\t\treturn false;\n\t\t}\n\t\t$config = $this->config['installedPlugins'];\n\t\t$config = is_array($config) ? $config : [];\n\t\tswitch ($action) {\n\t\t\tcase 'install':\n\t\t\tcase 'update':\n\t\t\t\t$update[$plugin] = [\n\t\t\t\t\t'name' => $plugin,\n\t\t\t\t\t'version' => $pluginDetails['version'],\n\t\t\t\t\t'repo' => $pluginDetails['repo']\n\t\t\t\t];\n\t\t\t\t$config = array_merge($config, $update);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunset($config[$plugin]);\n\t\t\t\tbreak;\n\t\t}\n\t\t$this->updateConfig(['installedPlugins' => $config]);\n\t}\n\n\tpublic function updateInstalledThemes($action, $theme, $themeDetails)\n\t{\n\t\tif (!$action || !$theme || !$themeDetails) {\n\t\t\treturn false;\n\t\t}\n\t\t$config = $this->config['installedThemes'];\n\t\t$config = is_array($config) ? $config : [];\n\t\tswitch ($action) {\n\t\t\tcase 'install':\n\t\t\tcase 'update':\n\t\t\t\t$update[$theme] = [\n\t\t\t\t\t'name' => $theme,\n\t\t\t\t\t'version' => $themeDetails['version'],\n\t\t\t\t\t'repo' => $themeDetails['repo'],\n\t\t\t\t\t'path' => 'data/themes/' . $themeDetails['project_folder']\n\t\t\t\t];\n\t\t\t\t$config = array_merge($config, $update);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tunset($config[$theme]);\n\t\t\t\tbreak;\n\t\t}\n\t\t$this->updateConfig(['installedThemes' => $config]);\n\t}\n\n\tpublic function getThemesGithub()\n\t{\n\t\t$url = 'https://raw.githubusercontent.com/causefx/Organizr/v2-themes/themes.json';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\t$response = Requests::get($url, array(), $options);\n\t\tif ($response->success) {\n\t\t\treturn json_decode($response->body, true);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getPluginsGithub()\n\t{\n\t\t$url = 'https://raw.githubusercontent.com/causefx/Organizr/v2-plugins/plugins.json';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\ttry {\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\treturn json_decode($response->body, true);\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function getPluginsMarketplace()\n\t{\n\t\t$plugins = $this->getPluginsGithubCombined();\n\t\tforeach ($plugins as $pluginName => $pluginDetails) {\n\t\t\t$plugins[$pluginName]['installed'] = (isset($this->config['installedPlugins'][$pluginName]));\n\t\t\t$plugins[$pluginName]['installed_version'] = $this->config['installedPlugins'][$pluginName]['version'] ?? null;\n\t\t\t$plugins[$pluginName]['needs_update'] = ($plugins[$pluginName]['installed'] && ($plugins[$pluginName]['installed_version'] !== $plugins[$pluginName]['version']));\n\t\t\t$plugins[$pluginName]['status'] = $this->getPluginStatus($plugins[$pluginName]);\n\t\t}\n\t\treturn $plugins;\n\t}\n\n\tpublic function getThemesMarketplace()\n\t{\n\t\t$themes = $this->getThemesGithubCombined();\n\t\tforeach ($themes as $themeName => $themeDetails) {\n\t\t\t$themes[$themeName]['installed'] = (isset($this->config['installedThemes'][$themeName]));\n\t\t\t$themes[$themeName]['installed_version'] = $this->config['installedThemes'][$themeName]['version'] ?? null;\n\t\t\t$themes[$themeName]['needs_update'] = ($themes[$themeName]['installed'] && ($themes[$themeName]['installed_version'] !== $themes[$themeName]['version']));\n\t\t\t$themes[$themeName]['status'] = $this->getPluginStatus($themes[$themeName]);\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function getThemesGithubCombined()\n\t{\n\t\t// Organizr Repo\n\t\t$urls = [$this->getMarketplaceJSONFromRepo('https://github.com/Organizr/Organizr-Themes')];\n\t\tforeach (explode(',', $this->config['externalThemeMarketplaceRepos']) as $repo) {\n\t\t\t$urls[] = $this->getMarketplaceJSONFromRepo($repo);\n\t\t}\n\t\t$themes = [];\n\t\tforeach ($urls as $repo) {\n\t\t\t$options = ($this->localURL($repo)) ? array('verify' => false) : array();\n\t\t\ttry {\n\t\t\t\t$response = Requests::get($repo, array(), $options);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$themes = array_merge($themes, json_decode($response->body, true));\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('Themes');\n\t\t\t\t\t$this->logger->warning('Getting Marketplace items from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t//return false;\n\t\t\t}\n\t\t}\n\t\treturn $themes;\n\t}\n\n\tpublic function getPluginStatus($pluginDetails)\n\t{\n\t\tif ($pluginDetails['needs_update']) {\n\t\t\treturn 'Update Available';\n\t\t} elseif ($pluginDetails['installed']) {\n\t\t\treturn 'Up to date';\n\t\t} else {\n\t\t\treturn 'Not Installed';\n\t\t}\n\t}\n\n\tpublic function getPluginsGithubCombined()\n\t{\n\t\t// Organizr Repo\n\t\t$urls = [$this->getMarketplaceJSONFromRepo('https://github.com/Organizr/Organizr-Plugins')];\n\t\tforeach (explode(',', $this->config['externalPluginMarketplaceRepos']) as $repo) {\n\t\t\t$urls[] = $this->getMarketplaceJSONFromRepo($repo);\n\t\t}\n\t\t$plugins = [];\n\t\tforeach ($urls as $repo) {\n\t\t\t$options = ($this->localURL($repo)) ? array('verify' => false) : array();\n\t\t\ttry {\n\t\t\t\t$response = Requests::get($repo, array(), $options);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$plugins = array_merge($plugins, json_decode($response->body, true));\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t\t$this->logger->warning('Getting Marketplace items from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t//return false;\n\t\t\t}\n\t\t}\n\t\treturn $plugins;\n\t}\n\n\tpublic function getMarketplaceJSONFromRepo($url)\n\t{\n\t\tif (stripos($url, '.json') !== false) {\n\t\t\treturn $url;\n\t\t} elseif (stripos($url, 'github.com') !== false) {\n\t\t\t$repo = explode('https://github.com/', $url);\n\t\t\t$newURL = 'https://api.github.com/repos/' . $repo[1] . '/contents';\n\t\t\t$options = ($this->localURL($newURL)) ? array('verify' => false) : array();\n\t\t\ttry {\n\t\t\t\t$response = Requests::get($newURL, $this->setGithubAccessToken(), $options);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$jsonFiles = json_decode($response->body, true);\n\t\t\t\t\tforeach ($jsonFiles as $file) {\n\t\t\t\t\t\tif (stripos($file['name'], '.json') !== false) {\n\t\t\t\t\t\t\treturn $file['download_url'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t$this->setLoggerChannel('Plugins');\n\t\t\t\t\t$this->logger->warning('Getting Marketplace JSON from Github', $this->apiResponseFormatter($response->body));\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function setGithubAccessToken()\n\t{\n\t\treturn ($this->config['githubAccessToken'] !== '') ? ['Authorization' => 'token ' . $this->config['githubAccessToken']] : [];\n\t}\n\n\tpublic function formatGithubAccessToken()\n\t{\n\t\t$accessToken = $this->setGithubAccessToken();\n\t\tif (count($accessToken) >= 1) {\n\t\t\treturn key($accessToken) . ': ' . $accessToken[key($accessToken)];\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic function getOpenCollectiveBackers()\n\t{\n\t\t$url = 'https://opencollective.com/organizr/members/users.json?limit=100&offset=0';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\ttry {\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\t$api = json_decode($response->body, true);\n\t\t\t\tforeach ($api as $k => $backer) {\n\t\t\t\t\t$api[$k] = array_merge($api[$k], ['sortName' => strtolower($backer['name'])]);\n\t\t\t\t}\n\t\t\t\t$this->setAPIResponse('success', '', 200, $api);\n\t\t\t\treturn $api;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t\t$this->setAPIResponse('error', 'Error connecting to Open Collective', 409);\n\t\treturn false;\n\t}\n\n\tpublic function getGithubSponsors()\n\t{\n\t\t$url = 'https://github.com/sponsors/causefx';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\t$response = Requests::get($url, array(), $options);\n\t\tif ($response->success) {\n\t\t\t$sponsors = [];\n\t\t\t$dom = new PHPHtmlParser\\Dom;\n\t\t\ttry {\n\t\t\t\t$dom->loadStr($response->body);\n\t\t\t\t$contents = $dom->find('#sponsors .clearfix div');\n\t\t\t\tforeach ($contents as $content) {\n\t\t\t\t\t$html = $content->innerHtml;\n\t\t\t\t\tpreg_match('/(@[a-zA-Z])\\w+/', $html, $username);\n\t\t\t\t\tpreg_match('/(?i)\\b((?:https?:\\/\\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00c2\u0166\u00c2\u0167\"\"\\'\\']))/', $html, $image);\n\t\t\t\t\tif (isset($image[0]) && isset($username[0])) {\n\t\t\t\t\t\t$sponsors[] = [\n\t\t\t\t\t\t\t'name' => str_replace('@', '', $username[0]),\n\t\t\t\t\t\t\t'sortName' => str_replace('@', '', strtolower($username[0])),\n\t\t\t\t\t\t\t'image' => str_replace('s=60', 's=200', $image[0]),\n\t\t\t\t\t\t\t'isActive' => true,\n\t\t\t\t\t\t\t'type' => 'USER',\n\t\t\t\t\t\t\t'role' => 'BACKER'\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->setAPIResponse('success', '', 200, $sponsors);\n\t\t\t\treturn $sponsors;\n\t\t\t} catch (\\PHPHtmlParser\\Exceptions\\ChildNotFoundException | \\PHPHtmlParser\\Exceptions\\CircularException | \\PHPHtmlParser\\Exceptions\\LogicalException | \\PHPHtmlParser\\Exceptions\\StrictException | \\PHPHtmlParser\\Exceptions\\ContentLengthException | \\PHPHtmlParser\\Exceptions\\NotLoadedException $e) {\n\t\t\t\t$this->setAPIResponse('error', 'Error connecting to Github', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('error', 'Error connecting to Github', 409);\n\t\treturn false;\n\t}\n\n\tpublic function getAllSponsors()\n\t{\n\t\t$sponsors = [];\n\t\t$list = [\n\t\t\t'openCollective' => $this->getOpenCollectiveBackers(),\n\t\t\t'github' => $this->getGithubSponsors()\n\t\t];\n\t\tforeach ($list as $k => $sponsor) {\n\t\t\tif ($sponsor) {\n\t\t\t\t$sponsors = array_merge($sponsor, $sponsors);\n\t\t\t}\n\t\t}\n\t\tif ($sponsors) {\n\t\t\tusort($sponsors, function ($a, $b) {\n\t\t\t\treturn $a['sortName'] <=> $b['sortName'];\n\t\t\t});\n\t\t}\n\t\t$this->setAPIResponse('success', '', 200, $sponsors);\n\t\treturn $sponsors;\n\t}\n\n\tpublic function getOrganizrSmtpFromAPI()\n\t{\n\t\t$url = 'https://api.organizr.app/?cmd=smtp';\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\ttry {\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\tif ($response->success) {\n\t\t\t\treturn json_decode($response->body, true);\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function saveOrganizrSmtpFromAPI()\n\t{\n\t\t$api = $this->getOrganizrSmtpFromAPI();\n\t\tif ($api) {\n\t\t\t$this->updateConfigItems($api['response']['data']);\n\t\t\t$this->setAPIResponse(null, 'SMTP activated with Organizr SMTP account');\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function guestHash($start, $end)\n\t{\n\t\t$ip = $this->userIP();\n\t\t$ip = md5($ip);\n\t\treturn substr($ip, $start, $end);\n\t}\n\n\tpublic function rrmdir($dir)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\tif (is_dir($dir)) {\n\t\t\t$files = scandir($dir);\n\t\t\tforeach ($files as $file) {\n\t\t\t\tif ($file != \".\" && $file != \"..\") {\n\t\t\t\t\t$this->rrmdir(\"$dir/$file\");\n\t\t\t\t}\n\t\t\t}\n\t\t\trmdir($dir);\n\t\t} elseif (file_exists($dir)) {\n\t\t\tunlink($dir);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function rcopy($src, $dst)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\t$src = $this->cleanPath($src);\n\t\t$dst = $this->cleanPath($dst);\n\t\tif (is_dir($src)) {\n\t\t\tif (!file_exists($dst)) : mkdir($dst);\n\t\t\tendif;\n\t\t\t$files = scandir($src);\n\t\t\tforeach ($files as $file) {\n\t\t\t\tif ($file != \".\" && $file != \"..\") {\n\t\t\t\t\t$this->rcopy(\"$src/$file\", \"$dst/$file\");\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif (file_exists($src)) {\n\t\t\tcopy($src, $dst);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function unzipFile($zipFile)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\t$zip = new ZipArchive;\n\t\t$extractPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . \"upgrade/\";\n\t\t$this->setLoggerChannel('File Management');\n\t\tif ($zip->open($extractPath . $zipFile) != \"true\") {\n\t\t\t$this->logger->warning('organizr could not unzip upgrade.zip');\n\t\t} else {\n\t\t\t$this->logger->debug('organizr unzipped upgrade.zip');\n\t\t}\n\t\t/* Extract Zip File */\n\t\t$zip->extractTo($extractPath);\n\t\t$zip->close();\n\t\treturn true;\n\t}\n\n\tpublic function downloadFile($url, $path)\n\t{\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\t\t$folderPath = dirname(__DIR__, 2) . DIRECTORY_SEPARATOR . \"upgrade\" . DIRECTORY_SEPARATOR;\n\t\t$this->setLoggerChannel('File Management');\n\t\tif (!file_exists($folderPath)) {\n\t\t\tif (@!mkdir($folderPath)) {\n\t\t\t\t$this->logger->warning('Folder Creation failed');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$newfname = $folderPath . $path;\n\t\t$context = stream_context_create(\n\t\t\tarray(\n\t\t\t\t'ssl' => array(\n\t\t\t\t\t'verify_peer' => true,\n\t\t\t\t\t'cafile' => $this->getCert()\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\t$file = fopen($url, 'rb', false, $context);\n\t\tif ($file) {\n\t\t\t$newf = fopen($newfname, 'wb');\n\t\t\tif ($newf) {\n\t\t\t\twhile (!feof($file)) {\n\t\t\t\t\tfwrite($newf, fread($file, 1024 * 8), 1024 * 8);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download ' . $url);\n\t\t\treturn false;\n\t\t}\n\t\tif ($file) {\n\t\t\tfclose($file);\n\t\t\t$this->logger->debug('Organizr finished downloading the github zip file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download the github zip file');\n\t\t\treturn false;\n\t\t}\n\t\tif ($newf) {\n\t\t\tfclose($newf);\n\t\t\t$this->logger->debug('Organizr created upgrade zip file from github zip file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not create upgrade zip file from github zip file');\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function downloadFileToPath($from, $to, $path)\n\t{\n\t\tif (((stripos($from, 'api.github.com') !== false) || (stripos($from, 'raw.githubusercontent.com') !== false)) && $this->config['githubAccessToken'] !== '') {\n\t\t\t$context = stream_context_create(\n\t\t\t\tarray(\n\t\t\t\t\t'ssl' => array(\n\t\t\t\t\t\t'verify_peer' => false,\n\t\t\t\t\t\t'cafile' => $this->getCert()\n\t\t\t\t\t),\n\t\t\t\t\t'http' => array(\n\t\t\t\t\t\t'method' => 'GET',\n\t\t\t\t\t\t'header' => $this->formatGithubAccessToken()\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\t$context = stream_context_create([]);\n\t\t}\n\t\tini_set('max_execution_time', 0);\n\t\tset_time_limit(0);\n\n\t\t$this->makeDir($path);\n\t\t$file = fopen($from, 'rb', false, $context);\n\t\tif ($file) {\n\t\t\t$newf = fopen($to, 'wb', false, $context);\n\t\t\tif ($newf) {\n\t\t\t\twhile (!feof($file)) {\n\t\t\t\t\tfwrite($newf, fread($file, 1024 * 8), 1024 * 8);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download file');\n\t\t}\n\t\tif ($file) {\n\t\t\tfclose($file);\n\t\t\t$this->logger->debug('Organizr finished downloading the file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not download file');\n\t\t}\n\t\tif ($newf) {\n\t\t\tfclose($newf);\n\t\t\t$this->logger->debug('Organizr saved and/or moved the file');\n\t\t} else {\n\t\t\t$this->logger->warning('Organizr could not save and/or move the file');\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function getAllUsers($includeGroups = false)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM users'\n\t\t\t\t),\n\t\t\t\t'key' => 'users'\n\t\t\t),\n\t\t];\n\t\t$groups = array(\n\t\t\t'function' => 'fetchAll',\n\t\t\t'query' => array(\n\t\t\t\t'SELECT * FROM groups ORDER BY group_id ASC'\n\t\t\t),\n\t\t\t'key' => 'groups'\n\t\t);\n\t\t$addGroups = (isset($_GET['includeGroups']) || $includeGroups) ?? false;\n\t\tif ($addGroups) {\n\t\t\tarray_push($response, $groups);\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function getAllGroups()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetchAll',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'SELECT * FROM groups ORDER BY group_id ASC'\n\t\t\t\t),\n\t\t\t\t'key' => 'groups'\n\t\t\t),\n\t\t];\n\t\t$users = array(\n\t\t\t'function' => 'fetchAll',\n\t\t\t'query' => array(\n\t\t\t\t'SELECT * FROM users'\n\t\t\t),\n\t\t\t'key' => 'users'\n\t\t);\n\t\t$addUsers = (isset($_GET['includeUsers'])) ?? false;\n\t\tif ($addUsers) {\n\t\t\tarray_push($response, $users);\n\t\t}\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function importUsers($array)\n\t{\n\t\t$imported = 0;\n\t\tif ($array) {\n\t\t\tforeach ($array as $user) {\n\t\t\t\t$password = $this->random_ascii_string(30);\n\t\t\t\tif ($user['username'] !== '' && $user['email'] !== '' && $password !== '') {\n\t\t\t\t\t$newUser = $this->createUser($user['username'], $password, $user['email']);\n\t\t\t\t\tif (!$newUser) {\n\t\t\t\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t\t\t\t$this->logger->warning('An error occurred during user import');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$imported++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->setAPIResponse('success', 'Imported ' . $imported . ' users', 200);\n\t\treturn true;\n\t}\n\n\tpublic function importUsersType($type)\n\t{\n\t\tif ($type !== '') {\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'plex':\n\t\t\t\t\treturn $this->importUsers($this->allPlexUsers(true));\n\t\t\t\tcase 'jellyfin':\n\t\t\t\t\treturn $this->importUsers($this->allJellyfinUsers(true));\n\t\t\t\tcase 'emby':\n\t\t\t\t\treturn $this->importUsers($this->allEmbyUsers(true));\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function allPlexUsers($newOnly = false, $friendsOnly = false)\n\t{\n\t\ttry {\n\t\t\tif (!empty($this->config['plexToken'])) {\n\t\t\t\t$url = 'https://plex.tv/api/users';\n\t\t\t\t$headers = array(\n\t\t\t\t\t'X-Plex-Token' => $this->config['plexToken'],\n\t\t\t\t);\n\t\t\t\t$response = Requests::get($url, $headers);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\tlibxml_use_internal_errors(true);\n\t\t\t\t\t$userXML = simplexml_load_string($response->body);\n\t\t\t\t\tif (is_array($userXML) || is_object($userXML)) {\n\t\t\t\t\t\t$results = array();\n\t\t\t\t\t\tforeach ($userXML as $child) {\n\t\t\t\t\t\t\tif (((string)$child['restricted'] == '0')) {\n\t\t\t\t\t\t\t\tif ($newOnly) {\n\t\t\t\t\t\t\t\t\t$taken = $this->usernameTaken((string)$child['username'], (string)$child['email']);\n\t\t\t\t\t\t\t\t\tif (!$taken) {\n\t\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['username'],\n\t\t\t\t\t\t\t\t\t\t\t'email' => (string)$child['email'],\n\t\t\t\t\t\t\t\t\t\t\t'id' => (string)$child['id'],\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} elseif ($friendsOnly) {\n\t\t\t\t\t\t\t\t\t$machineMatches = false;\n\t\t\t\t\t\t\t\t\tforeach ($child->Server as $server) {\n\t\t\t\t\t\t\t\t\t\tif ((string)$server['machineIdentifier'] == $this->config['plexID']) {\n\t\t\t\t\t\t\t\t\t\t\t$machineMatches = true;\n\t\t\t\t\t\t\t\t\t\t\t$shareId = $server['id'];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif ($machineMatches) {\n\t\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['username'],\n\t\t\t\t\t\t\t\t\t\t\t'email' => (string)$child['email'],\n\t\t\t\t\t\t\t\t\t\t\t'id' => (string)$child['id'],\n\t\t\t\t\t\t\t\t\t\t\t'shareId' => (string)$shareId\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['username'],\n\t\t\t\t\t\t\t\t\t\t'email' => (string)$child['email'],\n\t\t\t\t\t\t\t\t\t\t'id' => (string)$child['id'],\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function allJellyfinUsers($newOnly = false)\n\t{\n\t\ttry {\n\t\t\tif (!empty($this->config['jellyfinURL']) && !empty($this->config['jellyfinToken'])) {\n\t\t\t\t$url = $this->qualifyURL($this->config['jellyfinURL']) . '/Users?api_key=' . $this->config['jellyfinToken'];\n\t\t\t\t$headers = array();\n\t\t\t\t$response = Requests::get($url, $headers);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$users = json_decode($response->body, true);\n\t\t\t\t\tif (is_array($users) || is_object($users)) {\n\t\t\t\t\t\t$results = array();\n\t\t\t\t\t\tforeach ($users as $child) {\n\t\t\t\t\t\t\t// Jellyfin doesn't list emails for some reason\n\t\t\t\t\t\t\t$email = $this->random_ascii_string(10) . '@placeholder.eml';\n\t\t\t\t\t\t\tif ($newOnly) {\n\t\t\t\t\t\t\t\t$taken = $this->usernameTaken((string)$child['Name'], $email);\n\t\t\t\t\t\t\t\tif (!$taken) {\n\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t\t'email' => $email\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function allEmbyUsers($newOnly = false)\n\t{\n\t\ttry {\n\t\t\tif (!empty($this->config['embyURL']) && !empty($this->config['embyToken'])) {\n\t\t\t\t$url = $this->qualifyURL($this->config['embyURL']) . '/Users?api_key=' . $this->config['embyToken'];\n\t\t\t\t$headers = array();\n\t\t\t\t$response = Requests::get($url, $headers);\n\t\t\t\tif ($response->success) {\n\t\t\t\t\t$users = json_decode($response->body, true);\n\t\t\t\t\tif (is_array($users) || is_object($users)) {\n\t\t\t\t\t\t$results = array();\n\t\t\t\t\t\tforeach ($users as $child) {\n\t\t\t\t\t\t\t// Emby doesn't list emails for some reason\n\t\t\t\t\t\t\t$email = $this->random_ascii_string(10) . '@placeholder.eml';\n\t\t\t\t\t\t\tif ($newOnly) {\n\t\t\t\t\t\t\t\t$taken = $this->usernameTaken((string)$child['Name'], $email);\n\t\t\t\t\t\t\t\tif (!$taken) {\n\t\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t\t'email' => $email\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$results[] = array(\n\t\t\t\t\t\t\t\t\t'username' => (string)$child['Name'],\n\t\t\t\t\t\t\t\t\t'email' => $email,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $results;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function validateEmail($email)\n\t{\n\t\treturn filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n\t}\n\n\tpublic function sanitizeEmail($email)\n\t{\n\t\treturn filter_var(trim($email), FILTER_SANITIZE_EMAIL);\n\t}\n\n\tpublic function sanitizeUserString($string)\n\t{\n\t\treturn htmlspecialchars(trim($string));\n\t}\n\n\tpublic function updateUser($id, $array)\n\t{\n\t\tif (!$id) {\n\t\t\t$this->setAPIResponse('error', 'Id was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif ((int)$id !== $this->user['userID']) {\n\t\t\tif (!$this->qualifyRequest('1', true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t$user = $this->getUserById($id);\n\t\tif ($user) {\n\t\t\t$array = $this->checkKeys($user, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'User was not found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif ($user['group_id'] == 0 && $this->user['groupID'] !== 0) {\n\t\t\t$this->setAPIResponse('error', 'Cannot update admin unless you are admin', 401);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('username', $array)) {\n\t\t\tif ($array['username'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Username was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['username'] = $this->sanitizeUserString($array['username']);\n\t\t\tif ($this->usernameTaken($array['username'], $array['username'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Username: ' . $array['username'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['username'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('email', $array)) {\n\t\t\tif ($array['email'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->validateEmail($array['email'])) {\n\t\t\t\t$array['email'] = $this->sanitizeEmail($array['email']);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $array['email']]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($this->usernameTaken($array['email'], $array['email'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Email: ' . $array['email'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['email'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('group_id', $array)) {\n\t\t\tif ($array['group_id'] == '') {\n\t\t\t\t$array['group_id'] = 0;\n\t\t\t\t//$this->setAPIResponse('error', 'group_id was set but empty', 409);\n\t\t\t\t//return false;\n\t\t\t}\n\t\t\tif (!$this->qualifyRequest('1', false)) {\n\t\t\t\t$this->setAPIResponse('error', 'Cannot change your own group_id', 401);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (($id == $this->user['userID']) && $this->user['groupID'] == 0) {\n\t\t\t\t$array['group_id'] = 0;\n\t\t\t}\n\t\t\tif (($id == $this->user['userID']) && ($array['group_id'] == 0 && $this->user['groupID'] !== 0)) {\n\t\t\t\t$this->setAPIResponse('error', 'Only admins can make others admins', 401);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['group'] = $this->getGroupByGroupId($array['group_id'])['group'];\n\t\t\tif (!$array['group']) {\n\t\t\t\t$this->setAPIResponse('error', 'group_id does not exist', 404);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('locked', $array)) {\n\t\t\t//$this->setAPIResponse('error', 'Cannot use endpoint to unlock or lock user - please use /users/{id}/lock', 409);\n\t\t\t//return false;\n\t\t}\n\t\tif (array_key_exists('password', $array)) {\n\t\t\tif ($array['password'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Password was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['password'] = password_hash($array['password'], PASSWORD_BCRYPT);\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n\t\t}\n\t\tif (array_key_exists('register_date', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Cannot update register date', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'User info updated');\n\t\t$this->setLoggerChannel('User Management');\n\t\t$this->logger->info('Updated User Info for [' . $user['username'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function deleteUser($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM users WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$userInfo = $this->getUserById($id);\n\t\tif ($id == $this->user['userID']) {\n\t\t\t$this->setAPIResponse('error', 'Cannot delete your own user', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($userInfo) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->info('Deleted User [' . $userInfo['username'] . ']');\n\t\t\t$this->setAPIResponse('success', 'User deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addUser($array)\n\t{\n\t\t$username = $array['username'] ?? null;\n\t\t$password = $array['password'] ?? null;\n\t\t$email = $array['email'] ?? null;\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username was not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($username == '') {\n\t\t\t$this->setResponse(409, 'Username was set but empty');\n\t\t\treturn false;\n\t\t} else {\n\t\t\t$username = $this->sanitizeUserString($username);\n\t\t}\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password was not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email was set not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($email == '') {\n\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->validateEmail($email)) {\n\t\t\t$email = $this->sanitizeEmail($email);\n\t\t} else {\n\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $email]);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$this->qualifyLength($username, 50, true)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!$this->qualifyLength($email, 50, true)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!$this->qualifyLength($password, 200, true)) {\n\t\t\treturn false;\n\t\t}\n\t\t$this->setLoggerChannel('User Management');\n\t\tif ($this->createUser($username, $password, $email)) {\n\t\t\t$this->logger->info('Account created for [' . $username . ']');\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->logger->warning('An error occurred');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function createUser($username, $password, $email = null)\n\t{\n\t\t$username = $username ?? null;\n\t\t$password = $password ?? null;\n\t\t$email = ($email) ? $email : $this->random_ascii_string(10) . '@placeholder.eml';\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\t$username = $this->sanitizeUserString($username);\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($email == '') {\n\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->validateEmail($email)) {\n\t\t\t$email = $this->sanitizeEmail($email);\n\t\t} else {\n\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $email]);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->usernameTaken($username, $email)) {\n\t\t\t$this->setAPIResponse('error', 'Username: ' . $username . ' or Email: ' . $email . ' is already taken', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$this->qualifyLength($username, 50, true)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!$this->qualifyLength($email, 50, true)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!$this->qualifyLength($password, 200, true)) {\n\t\t\treturn false;\n\t\t}\n\t\t$defaults = $this->getDefaultGroup();\n\t\t$userInfo = [\n\t\t\t'username' => $username,\n\t\t\t'password' => password_hash($password, PASSWORD_BCRYPT),\n\t\t\t'email' => $email,\n\t\t\t'group' => $defaults['group'],\n\t\t\t'group_id' => $defaults['group_id'],\n\t\t\t'image' => $this->gravatar($email),\n\t\t\t'register_date' => gmdate('Y-m-d H:i:s'),\n\t\t];\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [users]',\n\t\t\t\t\t$userInfo\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse('success', 'User created', 200);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function updateGroup($id, $array)\n\t{\n\t\tif (!$id || $id == '') {\n\t\t\t$this->setAPIResponse('error', 'id was not set', 422);\n\t\t\treturn null;\n\t\t}\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$groupInfo = $this->getGroupById($id);\n\t\tif ($groupInfo) {\n\t\t\t$array = $this->checkKeys($groupInfo, $array);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'No category info found', 404);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('group_id', $array)) {\n\t\t\t$this->setAPIResponse('error', 'Cannot change group_id', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('group', $array)) {\n\t\t\tif ($array['group'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Group was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$array['group'] = $this->sanitizeUserString($array['group']);\n\t\t\tif ($this->isGroupNameTaken($array['group'], $id)) {\n\t\t\t\t$this->setAPIResponse('error', 'Group name: ' . $array['group'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['group'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\tif ($array['image'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Image was set but empty', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (array_key_exists('default', $array)) {\n\t\t\tif ($groupInfo['group_id'] == 0 || $groupInfo['group_id'] == 999) {\n\t\t\t\t$this->setAPIResponse('error', 'Setting ' . $groupInfo['group'] . ' as default group is not allowed', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($array['default']) {\n\t\t\t\t$this->clearGroupDefault();\n\t\t\t\t$array['default'] = 1;\n\t\t\t}\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE groups SET',\n\t\t\t\t\t$array,\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Group info updated');\n\t\t$this->setLoggerChannel('Group Management');\n\t\t$this->logger->info('Edited Group Info for [' . $groupInfo['group'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function deleteGroup($id)\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'DELETE FROM groups WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$groupInfo = $this->getGroupById($id);\n\t\tif ($groupInfo['group_id'] == 0 || $groupInfo['group_id'] == 999) {\n\t\t\t$this->setAPIResponse('error', 'Cannot delete group: ' . $groupInfo['group'] . ' as it is not allowed', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($this->getGroupUserCountById($id) >= 1) {\n\t\t\t$this->setAPIResponse('error', 'Cannot delete group as group still has users assigned to it', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif ($groupInfo) {\n\t\t\t$this->setLoggerChannel('Group Management');\n\t\t\t$this->logger->info('Deleted Group [' . $groupInfo['group'] . ']');\n\t\t\t$this->setAPIResponse('success', 'Group deleted', 204);\n\t\t\treturn $this->processQueries($response);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'id not found', 404);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function addGroup($array)\n\t{\n\t\tif (!$array) {\n\t\t\t$this->setAPIResponse('error', 'no data was sent', 422);\n\t\t\treturn null;\n\t\t}\n\t\t$array = $this->checkKeys($this->getTableColumnsFormatted('groups'), $array);\n\t\t$array['default'] = ($array['default']) ?? 0;\n\t\t$array['group_id'] = $this->getNextGroupOrder() + 1;\n\t\tif (array_key_exists('group', $array)) {\n\t\t\t$array['group'] = $this->sanitizeUserString($array['group']);\n\t\t\tif ($this->isGroupNameTaken($array['group'])) {\n\t\t\t\t$this->setAPIResponse('error', 'Group name: ' . $array['group'] . ' is already taken', 409);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!$this->qualifyLength($array['group'], 50, true)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Group name was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\tif (array_key_exists('image', $array)) {\n\t\t\tif ($array['image'] == '') {\n\t\t\t\t$this->setAPIResponse('error', 'Group image cannot be empty', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Group image was not supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'INSERT INTO [groups]',\n\t\t\t\t\t$array\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setAPIResponse(null, 'Group added');\n\t\t$this->setLoggerChannel('Group Management');\n\t\t$this->logger->info('Added Group for [' . $array['group'] . ']');\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function userList($type = null)\n\t{\n\t\tswitch ($type) {\n\t\t\tcase 'plex':\n\t\t\t\tif (!empty($this->config['plexToken']) && !empty($this->config['plexID'])) {\n\t\t\t\t\t$url = 'https://plex.tv/api/servers/' . $this->config['plexID'] . '/shared_servers';\n\t\t\t\t\ttry {\n\t\t\t\t\t\t$headers = array(\n\t\t\t\t\t\t\t\"Accept\" => \"application/json\",\n\t\t\t\t\t\t\t\"X-Plex-Token\" => $this->config['plexToken']\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$response = Requests::get($url, $headers, array());\n\t\t\t\t\t\tlibxml_use_internal_errors(true);\n\t\t\t\t\t\tif ($response->success) {\n\t\t\t\t\t\t\t$libraryList = array();\n\t\t\t\t\t\t\t$plex = simplexml_load_string($response->body);\n\t\t\t\t\t\t\tforeach ($plex->SharedServer as $child) {\n\t\t\t\t\t\t\t\tif (!empty($child['username'])) {\n\t\t\t\t\t\t\t\t\t$username = (string)strtolower($child['username']);\n\t\t\t\t\t\t\t\t\t$email = (string)strtolower($child['email']);\n\t\t\t\t\t\t\t\t\t$libraryList['users'][$username] = (string)$child['id'];\n\t\t\t\t\t\t\t\t\t$libraryList['emails'][$email] = (string)$child['id'];\n\t\t\t\t\t\t\t\t\t$libraryList['both'][$username] = $email;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$libraryList = array_change_key_case($libraryList, CASE_LOWER);\n\t\t\t\t\t\t\treturn $libraryList;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t\t\t\t$this->logger->error($e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t# code...\n\t\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tpublic function encrypt($password, $key = null)\n\t{\n\t\t$key = ($key) ? $key : ((isset($this->config['organizrHash'])) ? $this->config['organizrHash'] : null);\n\t\treturn openssl_encrypt($password, 'AES-256-CBC', $key, 0, $this->fillString($key, 16));\n\t}\n\n\tpublic function decrypt($password, $key = null)\n\t{\n\t\tif (empty($password)) {\n\t\t\treturn '';\n\t\t}\n\t\t$key = ($key) ? $key : ((isset($this->config['organizrHash'])) ? $this->config['organizrHash'] : null);\n\t\treturn openssl_decrypt($password, 'AES-256-CBC', $key, 0, $this->fillString($key, 16));\n\t}\n\n\tpublic function checkValidCert($file)\n\t{\n\t\tif (file_exists($file)) {\n\t\t\treturn filesize($file) > 0;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getCert()\n\t{\n\t\t$url = 'http://curl.haxx.se/ca/cacert.pem';\n\t\t$file = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'functions' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'cacert.pem';\n\t\t$file2 = dirname(__DIR__, 1) . DIRECTORY_SEPARATOR . 'functions' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'cacert-initial.pem';\n\t\t$useCert = ($this->checkValidCert($file)) ? $file : $file2;\n\t\tif ($this->config['selfSignedCert'] !== '') {\n\t\t\tif (file_exists($this->config['selfSignedCert'])) {\n\t\t\t\treturn $this->config['selfSignedCert'];\n\t\t\t}\n\t\t}\n\t\t$context = stream_context_create(\n\t\t\tarray(\n\t\t\t\t'ssl' => array(\n\t\t\t\t\t'verify_peer' => true,\n\t\t\t\t\t'cafile' => $useCert\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\tif (!$this->checkValidCert($file) || (file_exists($file) && time() - 2592000 > filemtime($file))) {\n\t\t\tfile_put_contents($file, fopen($url, 'r', false, $context));\n\t\t}\n\t\treturn ($this->checkValidCert($file)) ? $file : $file2;\n\t}\n\n\tpublic function hasCustomCert()\n\t{\n\t\treturn file_exists($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'custom.pem');\n\t}\n\n\tpublic function getCustomCert()\n\t{\n\t\treturn ($this->hasCustomCert()) ? $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR . 'custom.pem' : false;\n\t}\n\n\tpublic function uploadCert()\n\t{\n\t\t$filesCheck = array_filter($_FILES);\n\t\tif (!empty($filesCheck) && $this->approvedFileExtension($_FILES['file']['name'], 'cert')) {\n\t\t\tini_set('upload_max_filesize', '10M');\n\t\t\tini_set('post_max_size', '10M');\n\t\t\t$tempFile = $_FILES['file']['tmp_name'];\n\t\t\t$targetPath = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert' . DIRECTORY_SEPARATOR;\n\t\t\t$targetFile = $targetPath . 'custom.pem';\n\t\t\t$this->setAPIResponse(null, pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' has been uploaded', null);\n\t\t\t$this->makeDir($this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'cert');\n\t\t\treturn move_uploaded_file($tempFile, $targetFile);\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' is not approved to be uploaded', 403);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function createCronFile()\n\t{\n\t\t$file = $this->root . DIRECTORY_SEPARATOR . 'Cron.txt';\n\t\tfile_put_contents($file, time());\n\t}\n\n\tpublic function checkCronFile()\n\t{\n\t\t$file = $this->root . DIRECTORY_SEPARATOR . 'Cron.txt';\n\t\treturn file_exists($file) && time() - 120 < filemtime($file);\n\t}\n\n\tpublic function plexJoinAPI($array)\n\t{\n\t\t$username = ($array['username']) ?? null;\n\t\t$email = ($array['email']) ?? null;\n\t\t$password = ($array['password']) ?? null;\n\t\tif (!$username) {\n\t\t\t$this->setAPIResponse('error', 'Username not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$email) {\n\t\t\t$this->setAPIResponse('error', 'Email not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\tif (!$password) {\n\t\t\t$this->setAPIResponse('error', 'Password not supplied', 409);\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->plexJoin($username, $email, $password);\n\t}\n\n\tpublic function plexJoin($username, $email, $password)\n\t{\n\n\t\ttry {\n\t\t\t$url = 'https://plex.tv/api/v2/users';\n\t\t\t$headers = array(\n\t\t\t\t'Accept' => 'application/json',\n\t\t\t\t'Content-Type' => 'application/x-www-form-urlencoded',\n\t\t\t\t'X-Plex-Product' => 'Organizr',\n\t\t\t\t'X-Plex-Version' => '2.0',\n\t\t\t\t'X-Plex-Client-Identifier' => $this->config['uuid'],\n\t\t\t);\n\t\t\t$data = array(\n\t\t\t\t'email' => $email,\n\t\t\t\t'username' => $username,\n\t\t\t\t'password' => $password,\n\t\t\t);\n\t\t\t$response = Requests::post($url, $headers, $data, array());\n\t\t\t$json = json_decode($response->body, true);\n\t\t\t$errors = !empty($json['errors']);\n\t\t\t$success = empty($json['errors']);\n\t\t\t//Use This for later\n\t\t\t$errorMessage = '';\n\t\t\tif ($errors) {\n\t\t\t\tforeach ($json['errors'] as $error) {\n\t\t\t\t\tif (isset($error['message']) && isset($error['field'])) {\n\t\t\t\t\t\t$errorMessage .= \"[Plex.tv Error: \" . $error['message'] . \" for field: (\" . $error['field'] . \")]\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$msg = (!empty($success) && empty($errors)) ? 'User has joined Plex' : $errorMessage;\n\t\t\t$status = (!empty($success) && empty($errors)) ? 'success' : 'error';\n\t\t\t$code = (!empty($success) && empty($errors)) ? 200 : 422;\n\t\t\t$this->setAPIResponse($status, $msg, $code);\n\t\t\treturn (!empty($success) && empty($errors));\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('User Management');\n\t\t\t$this->logger->error($e);\n\t\t\t$this->setAPIResponse('error', 'An Error Occurred', 409);\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function lockCurrentUser()\n\t{\n\t\tif ($this->user['userID'] == '999') {\n\t\t\t$this->setAPIResponse('error', 'Locking not allowed on Guest users', 409);\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->lockUser($this->user['userID']);\n\t}\n\n\tpublic function lockUser($id)\n\t{\n\n\t\t$user = $this->getUserById($id);\n\t\tif (!$user) {\n\t\t\t$this->setAPIResponse('error', 'User not found', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['locked' => '1'],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setLoggerChannel('User Management');\n\t\t$this->logger->info('User: ' . $user['username'] . ' account locked');\n\t\t$this->setAPIResponse('success', 'User account locked', 200);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function unlockCurrentUser($array)\n\t{\n\t\tif ($array['password'] == '') {\n\t\t\t$this->setAPIResponse('error', 'Password Not Set', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$user = $this->getUserById($this->user['userID']);\n\t\tif (!password_verify($array['password'], $user['password'])) {\n\t\t\t$this->setAPIResponse('error', 'Password Incorrect', 401);\n\t\t\treturn false;\n\t\t}\n\t\treturn $this->unlockUser($this->user['userID']);\n\t}\n\n\tpublic function unlockUser($id)\n\t{\n\t\t$user = $this->getUserById($id);\n\t\tif (!$user) {\n\t\t\t$this->setAPIResponse('error', 'User not found', 404);\n\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'query',\n\t\t\t\t'query' => array(\n\t\t\t\t\t'UPDATE users SET',\n\t\t\t\t\t['locked' => '0'],\n\t\t\t\t\t'WHERE id = ?',\n\t\t\t\t\t$id\n\t\t\t\t)\n\t\t\t),\n\t\t];\n\t\t$this->setLoggerChannel('User Management');\n\t\t$this->logger->info('User: ' . $user['username'] . ' account unlocked');\n\t\t$this->setAPIResponse('success', 'User account unlocked', 200);\n\t\treturn $this->processQueries($response);\n\t}\n\n\tpublic function youtubeSearch($query)\n\t{\n\t\tif (!$query) {\n\t\t\t$this->setAPIResponse('error', 'No query supplied', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$keys = array(\n\t\t\t'AIzaSyBsdt8nLJRMTwOq5PY5A5GLZ2q7scgn01w',\n\t\t\t'AIzaSyD-8SHutB60GCcSM8q_Fle38rJUV7ujd8k',\n\t\t\t'AIzaSyBzOpVBT6VII-b-8gWD0MOEosGg4hyhCsQ',\n\t\t\t'AIzaSyBKnRe1P8fpfBHgooJpmT0WOsrdUtZ4cpk'\n\t\t);\n\t\t$randomKeyIndex = array_rand($keys);\n\t\t$key = $keys[$randomKeyIndex];\n\t\t$apikey = ($this->config['youtubeAPI'] !== '') ? $this->config['youtubeAPI'] : $key;\n\t\t$results = false;\n\t\t$url = \"https://www.googleapis.com/youtube/v3/search?part=snippet&q=$query+official+trailer&part=snippet&maxResults=1&type=video&videoDuration=short&key=$apikey\";\n\t\t$response = Requests::get($url);\n\t\tif ($response->success) {\n\t\t\t$results = json_decode($response->body, true);\n\t\t\t$this->setAPIResponse('success', null, 200, $results);\n\t\t\treturn $results;\n\t\t} else {\n\t\t\t$this->setAPIResponse('error', 'Bad response from YouTube', 500);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function scrapePage($array)\n\t{\n\t\ttry {\n\t\t\t$url = $array['url'] ?? false;\n\t\t\t$type = $array['type'] ?? false;\n\t\t\tif (!$url) {\n\t\t\t\t$this->setAPIResponse('error', 'URL was not supplied', 422);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$url = $this->qualifyURL($url);\n\t\t\t$data = array(\n\t\t\t\t'full_url' => $url,\n\t\t\t\t'drill_url' => $this->qualifyURL($url, true)\n\t\t\t);\n\t\t\t$options = array('verify' => false);\n\t\t\t$response = Requests::get($url, array(), $options);\n\t\t\t$data['response_code'] = $response->status_code;\n\t\t\tif ($response->success) {\n\t\t\t\t$data['result'] = 'Success';\n\t\t\t\tswitch ($type) {\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\t$data['data'] = html_entity_decode($response->body);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t$data['data'] = json_decode($response->body);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$data['data'] = $response->body;\n\t\t\t\t}\n\t\t\t\t$this->setAPIResponse('success', null, 200, $data);\n\t\t\t\treturn $data;\n\t\t\t} else {\n\t\t\t\t$this->setAPIResponse('error', 'Error getting successful response', 500);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function chooseInstance($url = null, $token = null, $instance = 0, $type = null)\n\t{\n\t\tif (!$url || !$token) {\n\t\t\treturn false;\n\t\t}\n\t\t$list = $this->csvHomepageUrlToken($url, $token);\n\t\tif ($type) {\n\t\t\t$type = strtolower($type);\n\t\t\tswitch ($type) {\n\t\t\t\tcase 'url':\n\t\t\t\tcase 'token':\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$type = 'url';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_numeric($instance)) {\n\t\t\t\treturn $list[$instance][$type];\n\t\t\t} else {\n\t\t\t\treturn $list;\n\t\t\t}\n\t\t}\n\t\tif (is_numeric($instance)) {\n\t\t\treturn $list[$instance];\n\t\t} else {\n\t\t\treturn $list;\n\t\t}\n\t}\n\n\tpublic function CBPFWTabs()\n\t{\n\t\treturn '\n\t\t<script>\n\t\t/**\n\t\t* cbpFWTabs.js v1.0.0\n\t\t* http://www.codrops.com\n\t\t*\n\t\t* Licensed under the MIT license.\n\t\t* http://www.opensource.org/licenses/mit-license.php\n\t\t*\n\t\t* Copyright 2014, Codrops\n\t\t* http://www.codrops.com\n\t\t*/\n\t\t;( function( window ) {\n\t\t\t\\'use strict\\';\n\t\t\n\t\t\tfunction extend( a, b ) {\n\t\t\t\tfor( var key in b ) {\n\t\t\t\t\tif( b.hasOwnProperty( key ) ) {\n\t\t\t\t\t\ta[key] = b[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\n\t\t\tfunction CBPFWTabs( el, options ) {\n\t\t\t\tthis.el = el;\n\t\t\t\tthis.options = extend( {}, this.options );\n\t\t\t\textend( this.options, options );\n\t\t\t\tthis._init();\n\t\t\t}\n\t\t\n\t\t\tCBPFWTabs.prototype.options = {\n\t\t\t\tstart : 0\n\t\t\t};\n\t\t\n\t\t\tCBPFWTabs.prototype._init = function() {\n\t\t\t\t// tabs elems\n\t\t\t\tthis.tabs = [].slice.call( this.el.querySelectorAll( \\'nav > ul > li\\' ) );\n\t\t\t\t// content items\n\t\t\t\tthis.items = [].slice.call( this.el.querySelectorAll( \\'.content-wrap > section\\' ) );\n\t\t\t\t// current index\n\t\t\t\tthis.current = -1;\n\t\t\t\t// show current content item\n\t\t\t\ttry{\n\t\t\t\t\tif(this.tabs[0].innerHTML.indexOf(\\'#settings\\') >= 0){\n\t\t\t\t\t\tthis._show(' . $this->config['defaultSettingsTab'] . ');\n\t\t\t\t\t\tlet tabId = $(this.items[' . $this->config['defaultSettingsTab'] . ']).attr(\"id\") + \"-anchor\";\n\t\t\t\t\t\t$(\"#\" + tabId).click();\n\t\t\t\t\t\t$(\"#\" + tabId + \" a\").click();\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis._show();\n\t\t\t\t\t}\n\t\t\t\t}catch{\n\t\t\t\t\tthis._show();\n\t\t\t\t}\n\t\t\t\t// init events\n\t\t\t\tthis._initEvents();\n\t\t\t};\n\t\t\n\t\t\tCBPFWTabs.prototype._initEvents = function() {\n\t\t\t\tvar self = this;\n\t\t\t\tthis.tabs.forEach( function( tab, idx ) {\n\t\t\t\t\ttab.addEventListener( \\'click\\', function( ev ) {\n\t\t\t\t\t\tev.preventDefault();\n\t\t\t\t\t\tself._show( idx );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t};\n\t\t\n\t\t\tCBPFWTabs.prototype._show = function( idx ) {\n\t\t\t\tif( this.current >= 0 ) {\n\t\t\t\t\tthis.tabs[ this.current ].className = this.items[ this.current ].className = \\'\\';\n\t\t\t\t}\n\t\t\t\t// change current\n\t\t\t\tthis.current = idx != undefined ? idx : this.options.start >= 0 && this.options.start < this.items.length ? this.options.start : 0;\n\t\t\t\tthis.tabs[ this.current ].className = \\'tab-current\\';\n\t\t\t\tthis.items[ this.current ].className = \\'content-current\\';\n\t\t\t};\n\t\t\n\t\t\t// add to global namespace\n\t\t\twindow.CBPFWTabs = CBPFWTabs;\n\t\t\n\t\t})( window );\n\t\t</script>\n\t\t';\n\t}\n\n\tpublic function socksHeadingHTML($app)\n\t{\n\t\treturn '\n\t\t<h3 lang=\"en\">' . ucwords($app) . ' SOCKS API Connection</h3>\n\t\t<p>Using this feature allows you to access the API without having to reverse proxy it.  Just access it from: </p>\n\t\t<code class=\"elip hidden-xs\">' . $this->getServerPath() . 'api/v2/socks/' . $app . '/</code>\n\t\t<p>If you are using multiple URL\\'s (using the csv method) you will have to use the url like these: </p>\n\t\t<code class=\"elip hidden-xs\">' . $this->getServerPath() . 'api/v2/multiple/socks/' . $app . '/1</code>\n\t\t<br/>\n\t\t<code class=\"elip hidden-xs\">' . $this->getServerPath() . 'api/v2/multiple/socks/' . $app . '/2</code>\n\t\t';\n\t}\n\n\tpublic function socksListing($app = null)\n\t{\n\t\tswitch ($app) {\n\t\t\tcase 'sonarr':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'sonarrURL',\n\t\t\t\t\t'enabled' => 'sonarrSocksEnabled',\n\t\t\t\t\t'auth' => 'sonarrSocksAuth',\n\t\t\t\t\t'header' => 'X-Api-Key'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'radarr':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'radarrURL',\n\t\t\t\t\t'enabled' => 'radarrSocksEnabled',\n\t\t\t\t\t'auth' => 'radarrSocksAuth',\n\t\t\t\t\t'header' => 'X-Api-Key'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'lidarr':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'lidarrURL',\n\t\t\t\t\t'enabled' => 'lidarrSocksEnabled',\n\t\t\t\t\t'auth' => 'lidarrSocksAuth',\n\t\t\t\t\t'header' => 'X-Api-Key'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'sabnzbd':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'sabnzbdURL',\n\t\t\t\t\t'enabled' => 'sabnzbdSocksEnabled',\n\t\t\t\t\t'auth' => 'sabnzbdSocksAuth',\n\t\t\t\t\t'header' => null\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'nzbget':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'nzbgetURL',\n\t\t\t\t\t'enabled' => 'nzbgetSocksEnabled',\n\t\t\t\t\t'auth' => 'nzbgetSocksAuth',\n\t\t\t\t\t'header' => 'Authorization'\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'tautulli':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'tautulliURL',\n\t\t\t\t\t'enabled' => 'tautulliSocksEnabled',\n\t\t\t\t\t'auth' => 'tautulliSocksAuth',\n\t\t\t\t\t'header' => null\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tcase 'qbittorrent':\n\t\t\t\t$appDetails = [\n\t\t\t\t\t'url' => 'qBittorrentURL',\n\t\t\t\t\t'enabled' => 'qBittorrentSocksEnabled',\n\t\t\t\t\t'auth' => 'qBittorrentSocksAuth',\n\t\t\t\t\t'header' => null\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$appDetails = null;\n\t\t}\n\t\treturn $appDetails;\n\t}\n\n\tpublic function socks($appDetails, $requestObject, $multiple = null)\n\t{\n\t\t$url = $appDetails['url'];\n\t\t$enabled = $appDetails['enabled'];\n\t\t$auth = $appDetails['auth'];\n\t\t$header = $appDetails['header'];\n\t\t$error = false;\n\t\tif (!$this->config[$enabled]) {\n\t\t\t$error = true;\n\t\t\t$this->setAPIResponse('error', 'SOCKS module is not enabled', 409);\n\t\t}\n\t\tif (!$this->qualifyRequest($this->config[$auth], true)) {\n\t\t\t$error = true;\n\t\t}\n\t\tif (strpos($this->config[$url], ',') !== false) {\n\t\t\tif (!$multiple) {\n\t\t\t\t$error = true;\n\t\t\t\t$this->setAPIResponse('error', 'Multiple URLs found in field, please use /api/v2/multiple/socks endpoint', 409);\n\t\t\t}\n\t\t} else {\n\t\t\tif ($multiple) {\n\t\t\t\t$error = true;\n\t\t\t\t$this->setAPIResponse('error', 'Multiple endpoint accessed but multiple URLs not found in field, please use /api/v2/socks endpoint', 409);\n\t\t\t}\n\t\t}\n\t\tif (!$error) {\n\t\t\tif ($multiple) {\n\t\t\t\t$instance = $multiple - 1;\n\t\t\t\t$pre = explode('/api/v2/multiple/socks/', $requestObject->getUri()->getPath());\n\t\t\t\t$pre[1] = $this->replace_first('/' . $multiple . '/', '/', $pre[1]);\n\t\t\t\t// sent url twice since we arent using tokens\n\t\t\t\t$list = $this->csvHomepageUrlToken($this->config[$url], $this->config[$url]);\n\t\t\t\t$appURL = $list[$instance]['url'];\n\t\t\t} else {\n\t\t\t\t$pre = explode('/api/v2/socks/', $requestObject->getUri()->getPath());\n\t\t\t\t$appURL = $this->config[$url];\n\t\t\t}\n\t\t\t$endpoint = explode('/', $pre[1]);\n\t\t\t$new = urldecode(preg_replace('/' . $endpoint[0] . '/', '', $pre[1], 1));\n\t\t\t$getParams = ($_GET) ? '?' . http_build_query($_GET) : '';\n\t\t\t$url = $this->qualifyURL($appURL) . $new . $getParams;\n\t\t\t$url = $this->cleanPath($url);\n\t\t\t$options = ($this->localURL($appURL)) ? array('verify' => false, 'timeout' => 120) : array('timeout' => 120);\n\t\t\t$headers = [];\n\t\t\t$apiData = $this->apiData($requestObject, false);\n\t\t\tif ($header) {\n\t\t\t\tif ($requestObject->hasHeader($header)) {\n\t\t\t\t\t$headerKey = $requestObject->getHeaderLine($header);\n\t\t\t\t\t$headers[$header] = $headerKey;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($requestObject->hasHeader('Content-Type')) {\n\t\t\t\t$headerKey = $requestObject->getHeaderLine('Content-Type');\n\t\t\t\t$headers['Content-Type'] = $headerKey;\n\t\t\t}\n\t\t\t$debugInformation = [\n\t\t\t\t'type' => $requestObject->getMethod(),\n\t\t\t\t'headerType' => $requestObject->getHeaderLine('Content-Type'),\n\t\t\t\t'header' => $header,\n\t\t\t\t'headers' => $headers,\n\t\t\t\t'url' => $url,\n\t\t\t\t'options' => $options,\n\t\t\t\t'data' => $apiData,\n\t\t\t];\n\t\t\t$this->setLoggerChannel('Socks');\n\t\t\t$this->logger->debug('Sending Socks request', $debugInformation);\n\t\t\ttry {\n\t\t\t\tswitch ($requestObject->getMethod()) {\n\t\t\t\t\tcase 'GET':\n\t\t\t\t\t\t$call = Requests::get($url, $headers, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'POST':\n\t\t\t\t\t\t$call = Requests::post($url, $headers, $apiData, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'DELETE':\n\t\t\t\t\t\t$call = Requests::delete($url, $headers, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'PUT':\n\t\t\t\t\t\t$call = Requests::put($url, $headers, $apiData, $options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$call = Requests::get($url, $headers, $options);\n\t\t\t\t}\n\t\t\t\t$this->logger->debug('Socks Response', $this->json_validator($call->body) ? json_decode($call->body, true) : $call->body);\n\t\t\t\treturn $call->body;\n\t\t\t} catch (Requests_Exception $e) {\n\t\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\t\t$this->setLoggerChannel('Socks');\n\t\t\t\t$this->logger->critical($e, $debugInformation);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic function getPlexServers()\n\t{\n\t\tif ($this->config['plexToken'] == '') {\n\t\t\t$this->setAPIResponse('error', 'Plex Token cannot be empty', 422);\n\t\t\treturn false;\n\t\t}\n\t\t$ownedOnly = isset($_GET['owned']) ?? false;\n\t\t$url = $this->qualifyURL('https://plex.tv/pms/servers');\n\t\t$options = ($this->localURL($url)) ? array('verify' => false) : array();\n\t\t$headers = [\n\t\t\t'X-Plex-Product' => 'Organizr',\n\t\t\t'X-Plex-Version' => '2.0',\n\t\t\t'X-Plex-Client-Identifier' => '01010101-10101010',\n\t\t\t'X-Plex-Token' => $this->config['plexToken'],\n\t\t];\n\t\ttry {\n\t\t\t$response = Requests::get($url, $headers, $options);\n\t\t\tlibxml_use_internal_errors(true);\n\t\t\tif ($response->success) {\n\t\t\t\t$items = array();\n\t\t\t\t$plex = simplexml_load_string($response->body);\n\t\t\t\tforeach ($plex as $server) {\n\t\t\t\t\tif ($ownedOnly) {\n\t\t\t\t\t\tif ($server['owned'] == 1) {\n\t\t\t\t\t\t\t$items[] = array(\n\t\t\t\t\t\t\t\t'name' => (string)$server['name'],\n\t\t\t\t\t\t\t\t'address' => (string)$server['address'],\n\t\t\t\t\t\t\t\t'machineIdentifier' => (string)$server['machineIdentifier'],\n\t\t\t\t\t\t\t\t'owned' => (float)$server['owned'],\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$items[] = array(\n\t\t\t\t\t\t\t'name' => (string)$server['name'],\n\t\t\t\t\t\t\t'address' => (string)$server['address'],\n\t\t\t\t\t\t\t'machineIdentifier' => (string)$server['machineIdentifier'],\n\t\t\t\t\t\t\t'owned' => (float)$server['owned'],\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->setResponse(200, null, $items);\n\t\t\t\treturn $items;\n\t\t\t} else {\n\t\t\t\t$message = $this->testAndFormatString($response->body);\n\t\t\t\t$this->setResponse(500, 'Plex Error occurred', $message['data']);\n\t\t\t\t$this->setLoggerChannel('Plex Connection')->warning('Plex Error', $message);\n\t\t\t\treturn $message;\n\t\t\t}\n\t\t} catch (Requests_Exception $e) {\n\t\t\t$this->setLoggerChannel('Plex Connection')->error($e);\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function getIcons()\n\t{\n\t\t$term = $_GET['search'] ?? null;\n\t\t$page = $_GET['page'] ?? 1;\n\t\t$limit = $_GET['limit'] ?? 20;\n\t\t$offset = ($page * $limit) - $limit;\n\t\t$goodIcons['results'] = [];\n\t\t$goodIcons['limit'] = $limit;\n\t\t$goodIcons['page'] = $page;\n\t\t$goodIcons['term'] = $term;\n\t\t$allIcons = file_get_contents($this->root . '/js/icons.json');\n\t\t$iconListing = json_decode($allIcons, true);\n\t\tforeach ($iconListing as $setKey => $set) {\n\t\t\tforeach ($set['children'] as $k => $v) {\n\t\t\t\tif (stripos($v['text'], $term) !== false || !$term) {\n\t\t\t\t\t$goodIcons['results'][] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$total = count($goodIcons['results']);\n\t\t$goodIcons['total'] = $total;\n\t\t$goodIcons['results'] = array_slice($goodIcons['results'], $offset, $limit);\n\t\t$goodIcons['pagination']['more'] = $page < (ceil($total / $limit));\n\t\treturn $goodIcons;\n\t}\n\n\tpublic function getJournalMode()\n\t{\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'PRAGMA journal_mode',\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\tif ($query) {\n\t\t\tif ($query['journal_mode']) {\n\t\t\t\t$this->setResponse(200, null, $query);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(500, 'Error getting Journal Mode');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setResponse(404, 'Journal Mode not found');\n\t\t}\n\t\treturn $query;\n\t}\n\n\tpublic function setJournalMode($option = 'WAL')\n\t{\n\t\t$option = strtoupper($option);\n\t\tswitch ($option) {\n\t\t\tcase 'WAL':\n\t\t\tcase 'DELETE':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t\t$response = [\n\t\t\tarray(\n\t\t\t\t'function' => 'fetch',\n\t\t\t\t'query' => 'PRAGMA journal_mode = \\'' . $option . '\\';',\n\t\t\t),\n\t\t];\n\t\t$query = $this->processQueries($response);\n\t\tif ($query) {\n\t\t\tif ($query['journal_mode']) {\n\t\t\t\t$this->setResponse(200, 'Journal Mode updated to: ' . $option, $query);\n\t\t\t} else {\n\t\t\t\t$this->setResponse(500, 'Error getting Journal Mode');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->setResponse(404, 'Journal Mode not found');\n\t\t}\n\t\treturn $query;\n\t}\n\n\tpublic function testCronSchedule($schedule = null)\n\t{\n\t\tif (is_array($schedule)) {\n\t\t\t$schedule = str_replace('_', ' ', array_keys($schedule)[0]);\n\t\t}\n\t\tif (!$schedule) {\n\t\t\t$this->setResponse(409, 'Schedule was not supplied');\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t$schedule = new Cron\\CronExpression($schedule);\n\t\t\t$this->setResponse(200, 'Schedule was validated');\n\t\t\treturn true;\n\t\t} catch (InvalidArgumentException $e) {\n\t\t\t$this->setResponse(500, $e->getMessage());\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function testFolder($folder = null)\n\t{\n\t\t$folder = $folder['folder'] ?? null;\n\t\tif (!$folder) {\n\t\t\t$this->setResponse(409, 'Folder was not supplied');\n\t\t\treturn false;\n\t\t}\n\t\t$testFolder = $this->makeDir($folder);\n\t\tif ($testFolder) {\n\t\t\t$this->setResponse(200, 'Folder approved for logs');\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->setResponse(409, 'Folder path is not valid or permissions insufficient');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function replaceStringInDatabase($string)\n\t{\n\t\t$databaseStringList = [\n\t\t\t'AUTOINCREMENT' => [\n\t\t\t\t'sqlite3' => 'AUTOINCREMENT',\n\t\t\t\t'mysqli' => 'AUTO_INCREMENT',\n\t\t\t\t'postgre' => 'AUTOINCREMENT'\n\t\t\t],\n\t\t\t'COLLATE NOCASE' => [\n\t\t\t\t'sqlite3' => 'COLLATE NOCASE',\n\t\t\t\t'mysqli' => '',\n\t\t\t\t'postgre' => ''\n\t\t\t],\n\t\t\t'INTEGER PRIMARY KEY AUTOINCREMENT' => [\n\t\t\t\t'sqlite3' => 'INTEGER PRIMARY KEY AUTOINCREMENT',\n\t\t\t\t'mysqli' => 'INTEGER PRIMARY KEY AUTOINCREMENT',\n\t\t\t\t'postgre' => 'SERIAL PRIMARY KEY'\n\t\t\t],\n\t\t\t'DATETIME' => [\n\t\t\t\t'sqlite3' => 'DATETIME',\n\t\t\t\t'mysqli' => 'DATETIME',\n\t\t\t\t'postgre' => 'TIMESTAMP'\n\t\t\t],\n\t\t];\n\t\tif (gettype($string) == 'string') {\n\t\t\tforeach ($databaseStringList as $item => $value) {\n\t\t\t\tif (stripos($string, $item) !== false) {\n\t\t\t\t\t$string = str_ireplace($item, $databaseStringList[$item][$this->config['driver']], $string);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $string;\n\t}\n\n\tpublic function cleanDatabaseQuery($query)\n\t{\n\t\tif (is_array($query)) {\n\t\t\tforeach ($query as $key => $value) {\n\t\t\t\t$query[$key] = $this->cleanDatabaseQuery($value);\n\t\t\t}\n\t\t\treturn $query;\n\t\t} else {\n\t\t\treturn $this->replaceStringInDatabase($query);\n\t\t}\n\t}\n\n\tprotected function processQueries(array $request, $migration = false)\n\t{\n\t\t$results = array();\n\t\t$firstKey = '';\n\t\tif ($this->config['includeDatabaseQueriesInDebug']) {\n\t\t\t$this->setLoggerChannel('Database');\n\t\t\t$this->logger->debug('Query to database', $request);\n\t\t}\n\t\tforeach ($request as $k => $v) {\n\t\t\ttry {\n\t\t\t\t$v['query'] = $this->cleanDatabaseQuery($v['query']);\n\t\t\t\t$query = ($migration) ? $this->otherDb->query($v['query']) : $this->db->query($v['query']);\n\t\t\t\t$keyName = (isset($v['key'])) ? $v['key'] : $k;\n\t\t\t\t$firstKey = (isset($v['key']) && $k == 0) ? $v['key'] : $k;\n\t\t\t\tswitch ($v['function']) {\n\t\t\t\t\tcase 'fetchAll':\n\t\t\t\t\t\t$results[$keyName] = $query->fetchAll();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'fetch':\n\t\t\t\t\t\t// PHP 8 Fix?\n\t\t\t\t\t\t$query->setRowClass(null);\n\t\t\t\t\t\t$results[$keyName] = $query->fetch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getAffectedRows':\n\t\t\t\t\t\t$results[$keyName] = $query->getAffectedRows();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getRowCount':\n\t\t\t\t\t\t$results[$keyName] = $query->getRowCount();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'fetchSingle':\n\t\t\t\t\t\t// PHP 8 Fix?\n\t\t\t\t\t\t$query->setRowClass(null);\n\t\t\t\t\t\t$results[$keyName] = $query->fetchSingle();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t$results[$keyName] = $query;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$this->setLoggerChannel('Database');\n\t\t\t\t$this->logger->critical($e, $v['query']);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif ($this->config['includeDatabaseQueriesInDebug']) {\n\t\t\t$this->logger->debug('Results from database', $results);\n\t\t}\n\t\treturn count($request) > 1 ? $results : $results[$firstKey];\n\t}\n\n}"], "filenames": ["api/classes/organizr.class.php"], "buggy_code_start_loc": [5114], "buggy_code_end_loc": [6794], "fixing_code_start_loc": [5115], "fixing_code_end_loc": [6837], "type": "CWE-191", "message": "Allowing long password leads to denial of service in GitHub repository causefx/organizr prior to 2.1.2000. This vulnerability can be abused by doing a DDoS attack for which genuine users will not able to access resources/applications.", "other": {"cve": {"id": "CVE-2022-1698", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-12T16:15:07.237", "lastModified": "2022-07-25T10:01:48.663", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Allowing long password leads to denial of service in GitHub repository causefx/organizr prior to 2.1.2000. This vulnerability can be abused by doing a DDoS attack for which genuine users will not able to access resources/applications."}, {"lang": "es", "value": "Permitir una contrase\u00f1a larga conlleva a una denegaci\u00f3n de servicio en el repositorio GitHub causefx/organizr versiones anteriores a 2.1.2000. Esta vulnerabilidad puede ser abusada al hacer un ataque DDoS para que usuarios genuinos no puedan acceder a recursos/aplicaciones"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-191"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-191"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:organizr:organizr:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.2000", "matchCriteriaId": "3A0D8EEA-659E-4299-BC56-6E461F933992"}]}]}], "references": [{"url": "https://github.com/causefx/organizr/commit/e4b4cff66c526f7b5bbaef0073c92c315c29bd56", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f4ab747b-e89a-4514-9432-ac1ea56639f3", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/causefx/organizr/commit/e4b4cff66c526f7b5bbaef0073c92c315c29bd56"}}