{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Folder', 'Utility');\nApp::uses('File', 'Utility');\n\n/**\n * @property Attribute $Attribute\n */\nclass AttributesController extends AppController\n{\n    public $components = array('Security', 'RequestHandler', 'Cidr');\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999,\n            'conditions' => array('AND' => array('Attribute.deleted' => 0)),\n            'order' => 'Attribute.event_id DESC'\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        $this->Auth->allow('restSearch');\n        $this->Auth->allow('returnAttributes');\n        $this->Auth->allow('downloadAttachment');\n        $this->Auth->allow('text');\n        $this->Auth->allow('rpz');\n        $this->Auth->allow('bro');\n\n        // permit reuse of CSRF tokens on the search page.\n        if ('search' == $this->request->params['action']) {\n            $this->Security->csrfCheck = false;\n        }\n        if ($this->action == 'add_attachment') {\n            $this->Security->disabledFields = array('values');\n        }\n        $this->Security->validatePost = true;\n\n        // convert uuid to id if present in the url and overwrite id field\n        if (isset($this->params->query['uuid'])) {\n            $params = array(\n                    'conditions' => array('Attribute.uuid' => $this->params->query['uuid']),\n                    'recursive' => 0,\n                    'fields' => 'Attribute.id'\n                    );\n            $result = $this->Attribute->find('first', $params);\n            if (isset($result['Attribute']) && isset($result['Attribute']['id'])) {\n                $id = $result['Attribute']['id'];\n                $this->params->addParams(array('pass' => array($id))); // FIXME find better way to change id variable if uuid is found. params->url and params->here is not modified accordingly now\n            }\n        }\n        // do not show private to other orgs\n        if (!$this->_isSiteAdmin()) {\n            $this->paginate = Set::merge($this->paginate, array('conditions' => $this->Attribute->buildConditions($this->Auth->user())));\n        }\n    }\n\n    public function index()\n    {\n        $this->Attribute->recursive = -1;\n        $this->paginate['recursive'] = -1;\n        $this->paginate['contain'] = array(\n            'Event' => array(\n                'fields' =>  array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.info', 'Event.user_id', 'Event.date'),\n                'Orgc' => array('fields' => array('Orgc.id', 'Orgc.name')),\n                'Org' => array('fields' => array('Org.id', 'Org.name'))\n            ),\n            'AttributeTag' => array('Tag'),\n            'Object' => array(\n                'fields' => array('Object.id', 'Object.distribution', 'Object.sharing_group_id')\n            )\n        );\n        $this->Attribute->contain(array('AttributeTag' => array('Tag')));\n        $this->set('isSearch', 0);\n        $attributes = $this->paginate();\n        if ($this->_isRest()) {\n            foreach ($attributes as $k => $attribute) {\n                $attributes[$k] = $attribute['Attribute'];\n            }\n            return $this->RestResponse->viewData($attributes, $this->response->type());\n        }\n        $org_ids = array();\n        $orgs = $this->Attribute->Event->Orgc->find('list', array(\n                'conditions' => array('Orgc.id' => $org_ids),\n                'fields' => array('Orgc.id', 'Orgc.name')\n        ));\n        if (!$this->_isRest()) {\n            $temp = $this->__searchUI($attributes);\n            $this->loadModel('Galaxy');\n            $this->set('mitreAttackGalaxyId', $this->Galaxy->getMitreAttackGalaxyId());\n            $attributes = $temp[0];\n            $sightingsData = $temp[1];\n            $this->set('sightingsData', $sightingsData);\n        }\n        $this->set('orgs', $orgs);\n        $this->set('shortDist', $this->Attribute->shortDist);\n        $this->set('attributes', $attributes);\n        $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n    }\n\n    public function add($eventId = false)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            return $this->RestResponse->describe('Attributes', 'add', false, $this->response->type());\n        }\n        if ($eventId === false) {\n            throw new MethodNotAllowedException(__('No event ID set.'));\n        }\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('You do not have permissions to create attributes'));\n        }\n        $this->loadModel('Event');\n        if (Validation::uuid($eventId)) {\n            $temp = $this->Event->find('first', array('recursive' => -1, 'fields' => array('Event.id'), 'conditions' => array('Event.uuid' => $eventId)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $eventId = $temp['Event']['id'];\n        } elseif (!is_numeric($eventId)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->id = $eventId;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        // remove the published flag from the event\n        $this->Event->recursive = -1;\n        $this->Event->read(null, $eventId);\n        if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n            throw new ForbiddenException(__('You do not have permission to do that.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Event->insertLock($this->Auth->user(), $this->Event->data['Event']['id']);\n        }\n        if ($this->request->is('ajax')) {\n            $this->set('ajax', true);\n            $this->layout = 'ajax';\n        } else {\n            $this->set('ajax', false);\n        }\n        if ($this->request->is('post')) {\n            if ($this->request->is('ajax')) {\n                $this->autoRender = false;\n            }\n            $date = new DateTime();\n            if (!isset($this->request->data['Attribute'])) {\n                $this->request->data = array('Attribute' => $this->request->data);\n            }\n            if (isset($this->request->data['Attribute']['distribution']) && $this->request->data['Attribute']['distribution'] == 4) {\n                $sg = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1, $this->request->data['Attribute']['sharing_group_id']);\n                if (empty($sg)) {\n                    throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                }\n            }\n            //\n            // multiple attributes in batch import\n            //\n            $attributes = array();\n            if (!empty($this->request->data['Attribute']['batch_import']) || (!empty($this->request->data['Attribute']['value']) && is_array($this->request->data['Attribute']['value']))) {\n                $attributes = array();\n                if (is_array($this->request->data['Attribute']['value'])) {\n                    $values = $this->request->data['Attribute']['value'];\n                } else {\n                    $values = explode(\"\\n\", $this->request->data['Attribute']['value']);\n                }\n                $temp = $this->request->data['Attribute'];\n                foreach ($values as $value) {\n                    $temp['value'] = $value;\n                    $attributes[] = $temp;\n                }\n            } else {\n                $attributes = $this->request->data['Attribute'];\n            }\n            if (!isset($attributes[0])) {\n                $attributes = array(0 => $attributes);\n            }\n            $uuids = array();\n            $this->Warninglist = ClassRegistry::init('Warninglist');\n            $fails = array();\n            $successes = 0;\n            $attributeCount = count($attributes);\n            $inserted_ids = array();\n            foreach ($attributes as $k => $attribute) {\n                $validationErrors = array();\n                $this->Attribute->captureAttribute($attribute, $eventId, $this->Auth->user(), false, false, false, $validationErrors, $this->params['named']);\n                if (empty($validationErrors)) {\n                    $inserted_ids[] = $this->Attribute->id;\n                    $successes +=1;\n                } else {\n                    $fails[\"attribute_\" . $k] = $validationErrors;\n                }\n            }\n            if (!empty($successes)) {\n                $this->Event->unpublishEvent($eventId);\n            }\n            if ($this->_isRest()) {\n                if (!empty($successes)) {\n                    $attributes = $this->Attribute->find('all', array(\n                        'recursive' => -1,\n                        'conditions' => array('Attribute.id' => $inserted_ids),\n                        'contain' => array(\n                            'AttributeTag' => array(\n                                'Tag' => array('fields' => array('Tag.id', 'Tag.name', 'Tag.colour', 'Tag.numerical_value'))\n                            )\n                        )\n                    ));\n                    if (count($attributes) == 1) {\n                        $attributes = $attributes[0];\n                    } else {\n                        $result = array('Attribute' => array());\n                        foreach ($attributes as $attribute) {\n                            $temp = $attribute['Attribute'];\n                            if (!empty($attribute['AttributeTag'])) {\n                                foreach ($attribute['AttributeTag'] as $at) {\n                                    $temp['Tag'][] = $at['Tag'];\n                                }\n                            }\n                            $result['Attribute'][] = $temp;\n                        }\n                        $attributes = $result;\n                        unset($result);\n                    }\n                    return $this->RestResponse->viewData($attributes, $this->response->type(), $fails);\n                } else {\n                    if ($attributeCount == 1) {\n                        return $this->RestResponse->saveFailResponse('Attributes', 'add', false, $fails[\"attribute_0\"], $this->response->type());\n                    } else {\n                        return $this->RestResponse->saveFailResponse('Attributes', 'add', false, $fails, $this->response->type());\n                    }\n                }\n            } else {\n                $message = '';\n                $redirect = '/events/view/' . $eventId;\n                if (empty($fails)) {\n                    $message = 'Attributes saved.';\n                } else {\n                    if ($attributeCount > 1) {\n                        $failKeys = array_keys($fails);\n                        foreach ($failKeys as $k => $v) {\n                            $v = explode('_', $v);\n                            $failKeys[$k] = intval($v[1]);\n                        }\n                        $failed = 1;\n                        $message = sprintf('Attributes saved, however, %s attributes could not be saved. Click %s for more info', count($fails), '$flashErrorMessage');\n                    } else {\n                        $failed = 1;\n                        $message = 'Attribute could not be saved.';\n                    }\n                }\n                if (!empty($failKeys)) {\n                    $flashErrorMessage = array();\n                    $original_values = trim($this->request->data['Attribute']['value']);\n                    $original_values = explode(\"\\n\", $original_values);\n                    foreach ($original_values as $k => $original_value) {\n                        $original_value = trim($original_value);\n                        if (in_array($k, $failKeys)) {\n                            $reason = '';\n                            foreach ($fails[\"attribute_\" . $k] as $failKey => $failData) {\n                                $reason = $failKey . ': ' . $failData[0];\n                            }\n                            $flashErrorMessage[] = '<span class=\"red bold\">' . h($original_value) . '</span> (' . h($reason) . ')';\n                        } else {\n                            $flashErrorMessage[] = '<span class=\"green bold\">' . h($original_value) . '</span>';\n                        }\n                    }\n                    $flashErrorMessage = implode('<br />', $flashErrorMessage);\n                    $this->Session->write('flashErrorMessage', $flashErrorMessage);\n                }\n                if (empty($failed)) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                if ($this->request->is('ajax')) {\n                    $this->autoRender = false;\n                    $this->layout = false;\n                    $errors = ($attributeCount > 1) ? $message : $this->Attribute->validationErrors;\n                    if (!empty($successes)) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message)),'status' => 200, 'type' => 'json'));\n                    } else {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $errors)),'status' => 200, 'type' => 'json'));\n                    }\n                } else {\n                    if ($successes > 0) {\n                        $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n                    }\n                }\n            }\n        }\n        // combobox for types\n        $types = array_keys($this->Attribute->typeDefinitions);\n        foreach ($types as $key => $value) {\n            if (in_array($value, array('malware-sample', 'attachment'))) {\n                unset($types[$key]);\n            }\n        }\n        $types = $this->_arrayToValuesIndexArray($types);\n        $this->set('types', $types);\n        $this->set('compositeTypes', $this->Attribute->getCompositeTypes());\n        // combobox for categories\n        $categories = array_keys($this->Attribute->categoryDefinitions);\n        $categories = $this->_arrayToValuesIndexArray($categories);\n        $this->set('categories', compact('categories'));\n        $this->loadModel('Event');\n        $events = $this->Event->findById($eventId);\n        $this->set('event_id', $events['Event']['id']);\n        // combobox for distribution\n        $this->set('currentDist', $events['Event']['distribution']);\n        // tooltip for distribution\n\n        $this->loadModel('SharingGroup');\n        $sgs = $this->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n        $initialDistribution = 5;\n        $configuredDistribution = Configure::check('MISP.default_attribute_distribution');\n        if ($configuredDistribution != null && $configuredDistribution != 'event') {\n            $initialDistribution = $configuredDistribution;\n        }\n        $this->set('initialDistribution', $initialDistribution);\n        $fieldDesc = array();\n        $distributionLevels = $this->Attribute->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        foreach ($distributionLevels as $key => $value) {\n            $fieldDesc['distribution'][$key] = $this->Attribute->distributionDescriptions[$key]['formdesc'];\n        }\n        foreach ($this->Attribute->categoryDefinitions as $key => $value) {\n            $fieldDesc['category'][$key] = isset($value['formdesc']) ? $value['formdesc'] : $value['desc'];\n        }\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $fieldDesc['type'][$key] = isset($value['formdesc']) ? $value['formdesc'] : $value['desc'];\n        }\n        $this->loadModel('Noticelist');\n        $notice_list_triggers = $this->Noticelist->getTriggerData();\n        $this->set('notice_list_triggers', json_encode($notice_list_triggers, true));\n        $this->set('fieldDesc', $fieldDesc);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        $this->set('published', $events['Event']['published']);\n        $this->set('action', $this->action);\n    }\n\n    public function download($id = null)\n    {\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $this->Attribute->read();\n        if (!$this->_isSiteAdmin() &&\n            $this->Auth->user('org_id') !=\n            $this->Attribute->data['Event']['org_id'] &&\n            (\n                $this->Attribute->data['Event']['distribution'] == 0 ||\n                $this->Attribute->data['Attribute']['distribution'] == 0\n            )) {\n            throw new UnauthorizedException(__('You do not have the permission to view this event.'));\n        }\n        $this->__downloadAttachment($this->Attribute->data['Attribute']);\n    }\n\n    private function __downloadAttachment($attribute)\n    {\n        $attachments_dir = Configure::read('MISP.attachments_dir');\n        if (empty($attachments_dir)) {\n            $attachments_dir = $this->Attribute->getDefaultAttachments_dir();\n        }\n\n        $is_s3 = substr($attachments_dir, 0, 2) === \"s3\";\n\n        if ($is_s3) {\n            // We have to download it!\n            App::uses('AWSS3Client', 'Tools');\n            $client = new AWSS3Client();\n            $client->initTool();\n            // Use tmpdir as opposed to attachments dir since we can't write to s3://\n            $attachments_dir = Configure::read('MISP.tmpdir');\n            if (empty($attachments_dir)) {\n                $this->loadModel('Server');\n                $attachments_dir = $this->Server->getDefaultTmp_dir();\n            }\n            // Now download the file\n            $resp = $client->download($attribute['event_id'] . DS . $attribute['id']);\n            // Save to a tmpfile\n            $tmpFile = new File($attachments_dir . DS . $attribute['uuid'], true, 0600);\n            $tmpFile->write($resp);\n            $tmpFile->close();\n            $path = $attachments_dir . DS;\n            $file = $attribute['uuid'];\n        } else {\n            $path = $attachments_dir . DS . $attribute['event_id'] . DS;\n            $file = $attribute['id'];\n        }\n\n        if ('attachment' == $attribute['type']) {\n            $filename = $attribute['value'];\n            $fileExt = pathinfo($filename, PATHINFO_EXTENSION);\n            $filename = substr($filename, 0, strlen($filename) - strlen($fileExt) - 1);\n        } elseif ('malware-sample' == $attribute['type']) {\n            $filenameHash = explode('|', $attribute['value']);\n            $filename = substr($filenameHash[0], strrpos($filenameHash[0], '\\\\'));\n            $fileExt = \"zip\";\n        } else {\n            throw new NotFoundException(__('Attribute not an attachment or malware-sample'));\n        }\n        $this->autoRender = false;\n        $this->response->type($fileExt);\n        $download_attachments_on_load = Configure::check('MISP.download_attachments_on_load') ? Configure::read('MISP.download_attachments_on_load') : true;\n        $this->response->file($path . $file, array('download' => $download_attachments_on_load, 'name' => $filename . '.' . $fileExt));\n    }\n\n    public function add_attachment($eventId = null)\n    {\n        if ($this->request->is('post')) {\n            $this->Attribute->Event->id = $this->request->data['Attribute']['event_id'];\n            $this->Attribute->Event->recursive = -1;\n            $event = $this->Attribute->Event->read();\n            if (empty($event)) {\n                throw new NotFoundException(__('Invalid Event.'));\n            }\n            if (!$this->_isSiteAdmin() && ($this->Attribute->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n                throw new UnauthorizedException(__('You do not have permission to do that.'));\n            }\n            $fails = array();\n            $success = 0;\n\n            foreach ($this->request->data['Attribute']['values'] as $value) {\n                // Check if there were problems with the file upload\n                // only keep the last part of the filename, this should prevent directory attacks\n                $filename = basename($value['name']);\n                $tmpfile = new File($value['tmp_name']);\n                if ((isset($value['error']) && $value['error'] == 0) ||\n                    (!empty($value['tmp_name']) && $value['tmp_name'] != 'none')\n                ) {\n                    if (!is_uploaded_file($tmpfile->path)) {\n                        throw new InternalErrorException(__('PHP says file was not uploaded. Are you attacking me?'));\n                    }\n                } else {\n                    $fails[] = $filename;\n                    continue;\n                }\n\n                if ($this->request->data['Attribute']['malware']) {\n                    if ($this->request->data['Attribute']['advanced']) {\n                        $result = $this->Attribute->advancedAddMalwareSample(\n                            $eventId,\n                            $this->request->data['Attribute'],\n                            $filename,\n                            $tmpfile\n                        );\n                    } else {\n                        $result = $this->Attribute->simpleAddMalwareSample(\n                            $eventId,\n                            $this->request->data['Attribute'],\n                            $filename,\n                            $tmpfile\n                        );\n                    }\n\n                    if ($result) {\n                        $success++;\n                    } else {\n                        $fails[] = $filename;\n                    }\n\n                    if (!empty($result)) {\n                        foreach ($result['Object'] as $object) {\n                            $object['distribution'] = $this->request->data['Attribute']['distribution'];\n                            if (!empty($this->request->data['sharing_group_id'])) {\n                                $object['sharing_group_id'] = $this->request->data['Attribute']['sharing_group_id'];\n                            }\n                            foreach ($object['Attribute'] as $ka => $attribute) {\n                                $object['Attribute'][$ka]['distribution'] = 5;\n                            }\n                            $this->Attribute->Object->captureObject(array('Object' => $object), $eventId, $this->Auth->user());\n                        }\n                        if (!empty($result['ObjectReference'])) {\n                            foreach ($result['ObjectReference'] as $reference) {\n                                $this->Attribute->Object->ObjectReference->smartSave($reference, $eventId);\n                            }\n                        }\n                    }\n                } else {\n                    $attribute = array(\n                            'Attribute' => array(\n                                'value' => $filename,\n                                'category' => $this->request->data['Attribute']['category'],\n                                'type' => 'attachment',\n                                'event_id' => $this->request->data['Attribute']['event_id'],\n                                'data' => base64_encode($tmpfile->read()),\n                                'comment' => $this->request->data['Attribute']['comment'],\n                                'to_ids' => 0,\n                                'distribution' => $this->request->data['Attribute']['distribution'],\n                                'sharing_group_id' => isset($this->request->data['Attribute']['sharing_group_id']) ? $this->request->data['Attribute']['sharing_group_id'] : 0,\n                            )\n                    );\n                    $this->Attribute->create();\n                    $r = $this->Attribute->save($attribute);\n                    if ($r == false) {\n                        $fails[] = $filename;\n                    } else {\n                        $success++;\n                    }\n                }\n            }\n            $message = __('The attachment(s) have been uploaded.');\n            if (!empty($fails)) {\n                $message = __('Some of the attachments failed to upload. The failed files were: %s - This can be caused by the attachments already existing in the event.', implode(', ', $fails));\n            }\n            if (empty($success)) {\n                if (empty($fails)) {\n                    $message = __('The attachment(s) could not be saved. Please contact your administrator.');\n                }\n            } else {\n                $this->Attribute->Event->id = $this->request->data['Attribute']['event_id'];\n                $this->Attribute->Event->saveField('published', 0);\n            }\n            if (empty($success) && !empty($fails)) {\n                $this->Flash->error($message);\n            } else {\n                $this->Flash->success($message);\n            }\n            if (!$this->_isRest()) {\n                $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n            }\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n        } else {\n            // set the event_id in the form\n            $this->request->data['Attribute']['event_id'] = $eventId;\n        }\n\n        $event = $this->Attribute->Event->findById($eventId);\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid Event.'));\n        }\n\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n        }\n\n        // Filter categories that contains attachment type\n        $selectedCategories = array();\n        foreach ($this->Attribute->categoryDefinitions as $category => $values) {\n            foreach ($values['types'] as $type) {\n                if ($this->Attribute->typeIsAttachment($type)) {\n                    $selectedCategories[] = $category;\n                    continue 2;\n                }\n            }\n        }\n        $categories = $this->_arrayToValuesIndexArray($selectedCategories);\n        $this->set('categories', $categories);\n\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        $this->set('zippedDefinitions', $this->Attribute->zippedDefinitions);\n        $this->set('advancedExtractionAvailable', $this->Attribute->isAdvancedExtractionAvailable());\n\n        // combobox for distribution\n        $this->set('distributionLevels', $this->Attribute->distributionLevels);\n        $this->set('info', $this->__getInfo());\n\n        $this->loadModel('SharingGroup');\n        $sgs = $this->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n\n        $this->set('currentDist', $event['Event']['distribution']);\n        $this->set('published', $event['Event']['published']);\n    }\n\n\n    // Imports the CSV threatConnect file to multiple attributes\n    public function add_threatconnect($eventId = null)\n    {\n        if ($this->request->is('post')) {\n            $this->loadModel('Event');\n            $this->Event->id = $eventId;\n            $this->Event->recursive = -1;\n            $this->Event->read();\n            if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n                throw new UnauthorizedException(__('You do not have permission to do that.'));\n            }\n            //\n            // File upload\n            //\n            // Check if there were problems with the file upload\n            $tmpfile = new File($this->request->data['Attribute']['value']['tmp_name']);\n            if ((isset($this->request->data['Attribute']['value']['error']) && $this->request->data['Attribute']['value']['error'] == 0) ||\n                    (!empty($this->request->data['Attribute']['value']['tmp_name']) && $this->request->data['Attribute']['value']['tmp_name'] != 'none')\n            ) {\n                if (!is_uploaded_file($tmpfile->path)) {\n                    throw new InternalErrorException(__('PHP says file was not uploaded. Are you attacking me?'));\n                }\n            } else {\n                $this->Flash->error(__('There was a problem to upload the file.', true), 'default', array(), 'error');\n                $this->redirect(array('controller' => 'attributes', 'action' => 'add_threatconnect', $this->request->data['Attribute']['event_id']));\n            }\n            // verify mime type\n            $file_info = $tmpfile->info();\n            if ($file_info['mime'] != 'text/plain') {\n                $this->Flash->error('File not in CSV format.', 'default', array(), 'error');\n                $this->redirect(array('controller' => 'attributes', 'action' => 'add_threatconnect', $this->request->data['Attribute']['event_id']));\n            }\n\n            // parse uploaded csv file\n            $filename = $tmpfile->path;\n            $header = null;\n            $entries = array();\n            if (($handle = fopen($filename, 'r')) !== false) {\n                while (($row = fgetcsv($handle, 0, ',', '\"')) !== false) {\n                    if (!$header) {\n                        $header = $row;\n                    } else {\n                        $entries[] = array_combine($header, $row);\n                    }\n                }\n                fclose($handle);\n            }\n            // verify header of the file (first row)\n            $required_headers = array('Type', 'Value', 'Confidence', 'Description', 'Source');\n\n            // TODO i18n\n            if (count(array_intersect($header, $required_headers)) != count($required_headers)) {\n                $this->Flash->error('Incorrect ThreatConnect headers. The minimum required headers are: '.implode(',', $required_headers), 'default', array(), 'error');\n                $this->redirect(array('controller' => 'attributes', 'action' => 'add_threatconnect', $this->request->data['Attribute']['event_id']));\n            }\n\n            //\n            // import attributes\n            //\n            $attributes = array();  // array with all the attributes we're going to save\n            foreach ($entries as $entry) {\n                $attribute = array();\n                $attribute['event_id'] = $this->request->data['Attribute']['event_id'];\n                $attribute['value'] = $entry['Value'];\n                $attribute['to_ids'] = ($entry['Confidence'] > 51) ? 1 : 0; // To IDS if high confidence\n                $attribute['comment'] = $entry['Description'];\n                $attribute['distribution'] = '3'; // 'All communities'\n                if (Configure::read('MISP.default_attribute_distribution') != null) {\n                    if (Configure::read('MISP.default_attribute_distribution') === 'event') {\n                        $attribute['distribution'] = $this->Event->data['Event']['distribution'];\n                    } else {\n                        $attribute['distribution'] = Configure::read('MISP.default_attribute_distribution');\n                    }\n                }\n                switch ($entry['Type']) {\n                    case 'Address':\n                        $attribute['category'] = 'Network activity';\n                        $attribute['type'] = 'ip-dst';\n                        break;\n                    case 'Host':\n                        $attribute['category'] = 'Network activity';\n                        $attribute['type'] = 'domain';\n                        break;\n                    case 'EmailAddress':\n                        $attribute['category'] = 'Payload delivery';\n                        $attribute['type'] = 'email-src';\n                        break;\n                    case 'File':\n                        $attribute['category'] = 'Artifacts dropped';\n                        $attribute['value'] = strtolower($attribute['value']);\n                        if (preg_match(\"#^[0-9a-f]{32}$#\", $attribute['value'])) {\n                            $attribute['type'] = 'md5';\n                        } elseif (preg_match(\"#^[0-9a-f]{40}$#\", $attribute['value'])) {\n                            $attribute['type'] = 'sha1';\n                        } elseif (preg_match(\"#^[0-9a-f]{64}$#\", $attribute['value'])) {\n                            $attribute['type'] = 'sha256';\n                        } else {\n                            // do not keep attributes that do not have a match\n                            $attribute=null;\n                        }\n                        break;\n                    case 'URL':\n                        $attribute['category'] = 'Network activity';\n                        $attribute['type'] = 'url';\n                        break;\n                    default:\n                        // do not keep attributes that do not have a match\n                        $attribute=null;\n                }\n                // add attribute to the array that will be saved\n                if ($attribute) {\n                    $attributes[] = $attribute;\n                }\n            }\n\n            //\n            // import source info:\n            //\n            // 1/ iterate over all the sources, unique\n            // 2/ add uniques as 'Internal reference'\n            // 3/ if url format -> 'link'\n            //    else 'comment'\n            $references = array();\n            foreach ($entries as $entry) {\n                if (empty($entry['Source'])) {\n                    continue;\n                }\n                $references[$entry['Source']] = true;\n            }\n            $references = array_keys($references);\n            // generate the Attributes\n            foreach ($references as $reference) {\n                $attribute = array();\n                $attribute['event_id'] = $this->request->data['Attribute']['event_id'];\n                $attribute['category'] = 'Internal reference';\n                if (preg_match('#^(http|ftp)(s)?\\:\\/\\/((([a-z|0-9|\\-]{1,25})(\\.)?){2,7})($|/.*$)#i', $reference)) {\n                    $attribute['type'] = 'link';\n                } else {\n                    $attribute['type'] = 'comment';\n                }\n                $attribute['value'] = $reference;\n                $attribute['distribution'] = 3; // 'All communities'\n                // add attribute to the array that will be saved\n                $attributes[] = $attribute;\n            }\n\n            //\n            // finally save all the attributes at once, and continue if there are validation errors\n            //\n\n            $results = array('successes' => 0, 'fails' => 0);\n            foreach ($attributes as $attribute) {\n                $this->Attribute->create();\n                $result = $this->Attribute->save($attribute);\n                if (!$result) {\n                    $results['fails']++;\n                } else {\n                    $results['successes']++;\n                }\n            }\n            // data imported (with or without errors)\n            // remove the published flag from the event\n            $this->loadModel('Event');\n            $this->Event->id = $this->request->data['Attribute']['event_id'];\n            $this->Event->saveField('published', 0);\n\n            // everything is done, now redirect to event view\n            $message = __('The ThreatConnect data has been imported.');\n            if ($results['successes'] != 0) {\n                $flashType = 'success';\n                $temp = sprintf(__('%s entries imported.'), $results['successes']);\n                $message .= ' ' . $temp;\n            }\n            if ($results['fails'] != 0) {\n                $temp = sprintf(__('%s entries could not be imported.'), $results['fails']);\n                $message .= ' ' . $temp;\n            }\n            $this->Flash->{empty($flashType) ? 'error' : $flashType}($message);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $this->request->data['Attribute']['event_id']));\n        } else {\n            // set the event_id in the form\n            $this->request->data['Attribute']['event_id'] = $eventId;\n        }\n\n        // form not submitted, show page\n        $this->loadModel('Event');\n        $events = $this->Event->findById($eventId);\n        $this->set('published', $events['Event']['published']);\n    }\n\n\n    public function edit($id = null)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            return $this->RestResponse->describe('Attributes', 'edit', false, $this->response->type());\n        }\n        if (Validation::uuid($id)) {\n            $temp = $this->Attribute->find('first', array(\n                'recursive' => -1,\n                'fields' => array('Attribute.id', 'Attribute.uuid'),\n                'conditions' => array('Attribute.uuid' => $id)\n            ));\n            if ($temp == null) {\n                throw new NotFoundException('Invalid attribute');\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $this->Attribute->id = $id;\n        $date = new DateTime();\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $conditions = array('conditions' => array('Attribute.id' => $id), 'withAttachments' => true, 'flatten' => true);\n        $conditions['includeAllTags'] = false;\n        $conditions['includeAttributeUuid'] = true;\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $conditions);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $this->Attribute->data = $attribute[0];\n        $event = $this->Attribute->Event->find('first', array(\n            'conditions' =>\n                array(\n                    'Event.id' => $attribute[0]['Attribute']['event_id']\n                ),\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.user_id')\n        ));\n        if ($this->Attribute->data['Attribute']['deleted']) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        if (!$this->_isSiteAdmin()) {\n            if ($this->Attribute->data['Event']['orgc_id'] == $this->Auth->user('org_id')\n                && (($this->userRole['perm_modify'] && $event['Event']['user_id'] != $this->Auth->user('id'))\n                    || $this->userRole['perm_modify_org'])) {\n                // Allow the edit\n            } else {\n                $message = __('You do not have permission to do that.');\n                if ($this->_isRest()) {\n                    throw new ForbiddenException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect(array('controller' => 'events', 'action' => 'index'));\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $this->Attribute->data['Attribute']['event_id']);\n        }\n        $eventId = $this->Attribute->data['Attribute']['event_id'];\n        if ('attachment' == $this->Attribute->data['Attribute']['type'] ||\n            'malware-sample' == $this->Attribute->data['Attribute']['type']) {\n            $this->set('attachment', true);\n        } else {\n            $this->set('attachment', false);\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['Attribute'])) {\n                $this->request->data = array('Attribute' => $this->request->data);\n            }\n            if (isset($this->request->data['Attribute']['distribution']) && $this->request->data['Attribute']['distribution'] == 4) {\n                $sg = $this->Attribute->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1, $this->request->data['Attribute']['sharing_group_id']);\n                if (empty($sg)) {\n                    throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                }\n            }\n            $existingAttribute = $this->Attribute->findByUuid($this->Attribute->data['Attribute']['uuid']);\n            // check if the attribute has a timestamp already set (from a previous instance that is trying to edit via synchronisation)\n            // check which attribute is newer\n            if (count($existingAttribute) && !$existingAttribute['Attribute']['deleted']) {\n                $this->request->data['Attribute']['id'] = $existingAttribute['Attribute']['id'];\n                $dateObj = new DateTime();\n                $skipTimeCheck = false;\n                if (!isset($this->request->data['Attribute']['timestamp'])) {\n                    $this->request->data['Attribute']['timestamp'] = $dateObj->getTimestamp();\n                    $skipTimeCheck = true;\n                }\n                if ($skipTimeCheck || $this->request->data['Attribute']['timestamp'] > $existingAttribute['Attribute']['timestamp']) {\n                    $recoverFields = array('value', 'to_ids', 'distribution', 'category', 'type', 'comment', 'first_seen', 'last_seen');\n                    foreach ($recoverFields as $rF) {\n                        if (!isset($this->request->data['Attribute'][$rF])) {\n                            $this->request->data['Attribute'][$rF] = $existingAttribute['Attribute'][$rF];\n                        }\n                    }\n                    // carry on with adding this attribute - Don't forget! if orgc!=user org, create shadow attribute, not attribute!\n                } else {\n                    // the old one is newer or the same, replace the request's attribute with the old one\n                    throw new MethodNotAllowedException(__('Attribute could not be saved: Attribute in the request not newer than the local copy.'));\n                }\n            } else {\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    throw new NotFoundException(__('Invalid attribute.'));\n                } else {\n                    $this->Flash->error(__('Invalid attribute.'));\n                    $this->redirect(array('controller' => 'events', 'action' => 'index'));\n                }\n            }\n            $this->loadModel('Event');\n            $event = $this->Attribute->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Event.id' => $eventId)\n            ));\n            if (empty($event)) {\n                throw new NotFoundException(__('Invalid Event.'));\n            }\n            if ($existingAttribute['Attribute']['object_id']) {\n                $result = $this->Attribute->save($this->request->data, array('Attribute.category', 'Attribute.value', 'Attribute.to_ids', 'Attribute.comment', 'Attribute.distribution', 'Attribute.sharing_group_id'));\n                $this->Attribute->Object->updateTimestamp($existingAttribute['Attribute']['object_id']);\n            } else {\n                $result = $this->Attribute->save($this->request->data);\n                if ($this->request->is('ajax')) {\n                    $this->autoRender = false;\n                    if ($result) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Attribute updated.')),'status' => 200, 'type' => 'json'));\n                    } else {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Could not update attribute, reason: ' . json_encode($this->Attribute->validationErrors))),'status' => 200, 'type' => 'json'));\n                    }\n                }\n            }\n            if ($result) {\n                $this->Flash->success(__('The attribute has been saved'));\n                // remove the published flag from the event\n                $this->Event->unpublishEvent($eventId);\n                if (!empty($this->Attribute->data['Attribute']['object_id'])) {\n                    $object = $this->Attribute->Object->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('Object.id' => $this->Attribute->data['Attribute']['object_id'])\n                    ));\n                    if (!empty($object)) {\n                        $object['Object']['timestamp'] = $date->getTimestamp();\n                        $this->Attribute->Object->save($object);\n                    }\n                }\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    $saved_attribute = $this->Attribute->find('first', array(\n                            'conditions' => array('id' => $this->Attribute->id),\n                            'recursive' => -1,\n                            'fields' => $this->Attribute->defaultFields\n                    ));\n                    $response = array('response' => array('Attribute' => $saved_attribute['Attribute']));\n                    $this->set('response', $response);\n                    if ($this->response->type() === 'application/json') {\n                        $this->render('/Attributes/json/view');\n                    } else {\n                        $this->render('view');\n                    }\n                    return;\n                } else {\n                    $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Attributes', 'edit', false, $this->Attribute->validationErrors);\n                } else {\n                    if (!CakeSession::read('Message.flash')) {\n                        $this->Flash->error(__('The attribute could not be saved. Please, try again.'));\n                    } else {\n                        $this->request->data = $this->Attribute->read(null, $id);\n                    }\n                }\n            }\n        } else {\n            $this->request->data = $this->Attribute->read(null, $id);\n        }\n        $this->set('attribute', $this->request->data);\n        if (!empty($this->request->data['Attribute']['object_id'])) {\n            $this->set('objectAttribute', true);\n        } else {\n            $this->set('objectAttribute', false);\n        }\n        // enabling / disabling the distribution field in the edit view based on whether user's org == orgc in the event\n        $this->loadModel('Event');\n        $this->Event->id = $eventId;\n        $this->set('event_id', $eventId);\n        $this->Event->read();\n        $this->set('published', $this->Event->data['Event']['published']);\n        // needed for RBAC\n        // combobox for types\n        $types = array_keys($this->Attribute->typeDefinitions);\n        foreach ($types as $key => $value) {\n            if (in_array($value, array('malware-sample', 'attachment'))) {\n                unset($types[$key]);\n            }\n        }\n        $types = $this->_arrayToValuesIndexArray($types);\n        $this->set('types', $types);\n        // combobox for categories\n        $this->set('currentDist', $this->Event->data['Event']['distribution']);\n\n        $this->loadModel('SharingGroup');\n        $sgs = $this->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n\n        $distributionLevels = $this->Attribute->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n\n        foreach ($this->Attribute->categoryDefinitions as $key => $value) {\n            $info['category'][$key] = array('key' => $key, 'desc' => isset($value['formdesc'])? $value['formdesc'] : $value['desc']);\n        }\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $info['type'][$key] = array('key' => $key, 'desc' => isset($value['formdesc'])? $value['formdesc'] : $value['desc']);\n        }\n        foreach ($distributionLevels as $key => $value) {\n            $info['distribution'][$key] = array('key' => $value, 'desc' => $this->Attribute->distributionDescriptions[$key]['formdesc']);\n        }\n        $this->set('info', $info);\n        $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $categoryDefinitions = $this->Attribute->categoryDefinitions;\n        $categories = array_keys($this->Attribute->categoryDefinitions);\n        $categories = $this->_arrayToValuesIndexArray($categories);\n        if (!empty($this->request->data['Attribute']['object_id'])) {\n            foreach ($categoryDefinitions as $k => $v) {\n                if (!in_array($this->request->data['Attribute']['type'], $v['types'])) {\n                    unset($categoryDefinitions[$k]);\n                }\n            }\n            foreach ($categories as $k => $v) {\n                if (!isset($categoryDefinitions[$k])) {\n                    unset($categories[$k]);\n                }\n            }\n        }\n        $this->set('categories', $categories);\n        $this->set('categoryDefinitions', $categoryDefinitions);\n        $this->set('compositeTypes', $this->Attribute->getCompositeTypes());\n        $this->set('action', $this->action);\n        $this->loadModel('Noticelist');\n        $notice_list_triggers = $this->Noticelist->getTriggerData();\n        $this->set('notice_list_triggers', json_encode($notice_list_triggers, true));\n        $this->render('add');\n    }\n\n    // ajax edit - post a single edited field and this method will attempt to save it and return a json with the validation errors if they occur.\n    public function editField($id)\n    {\n        if (Validation::uuid($id)) {\n            $this->Attribute->recursive = -1;\n            $temp = $this->Attribute->findByUuid($id);\n            if ($temp == null) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid event id.'));\n        }\n        if ((!$this->request->is('post') && !$this->request->is('put'))) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            return new CakeResponse(array('body'=> json_encode(array('fail' => false, 'errors' => 'Invalid attribute')), 'status'=>200, 'type' => 'json'));\n        }\n        $conditions = array('conditions' => array('Attribute.id' => $id), 'withAttachments' => true, 'flatten' => true);\n        $conditions['includeAllTags'] = false;\n        $conditions['includeAttributeUuid'] = true;\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $conditions);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $attribute = $attribute[0];\n        $this->Attribute->data = $attribute;\n\n        if (!$this->_isSiteAdmin()) {\n            if ($this->Attribute->data['Event']['orgc_id'] == $this->Auth->user('org_id')\n            && (($this->userRole['perm_modify'] && $this->Attribute->data['Event']['user_id'] != $this->Auth->user('id'))\n            || $this->userRole['perm_modify_org'])) {\n                // Allow the edit\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('fail' => false, 'errors' => 'You do not have permission to do that')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $this->Attribute->data['Attribute']['event_id']);\n        }\n        $validFields = array('value', 'category', 'type', 'comment', 'to_ids', 'distribution', 'first_seen', 'last_seen');\n        $changed = false;\n        if (empty($this->request->data['Attribute'])) {\n            $this->request->data = array('Attribute' => $this->request->data);\n            if (empty($this->request->data['Attribute'])) {\n                throw new MethodNotAllowedException(__('Invalid input.'));\n            }\n        }\n        foreach ($this->request->data['Attribute'] as $changedKey => $changedField) {\n            if (!in_array($changedKey, $validFields)) {\n                throw new MethodNotAllowedException(__('Invalid field.'));\n            }\n            if ($attribute['Attribute'][$changedKey] == $changedField) {\n                $this->autoRender = false;\n                return new CakeResponse(array('body'=> json_encode(array('errors'=> array('value' => 'nochange'))), 'status'=>200, 'type' => 'json'));\n            }\n            $attribute['Attribute'][$changedKey] = $changedField;\n            $changed = true;\n        }\n        if (!$changed) {\n            return new CakeResponse(array('body'=> json_encode(array('errors'=> array('value' => 'nochange'))), 'status'=>200, 'type' => 'json'));\n        }\n        $date = new DateTime();\n        $attribute['Attribute']['timestamp'] = $date->getTimestamp();\n        if ($this->Attribute->save($attribute)) {\n            $event = $this->Attribute->Event->find('first', array(\n                'recursive' => -1,\n                'fields' => array('id', 'published', 'timestamp', 'info', 'uuid'),\n                'conditions' => array(\n                    'id' => $attribute['Attribute']['event_id'],\n            )));\n            $event['Event']['timestamp'] = $date->getTimestamp();\n            $event['Event']['published'] = 0;\n            $this->Attribute->Event->save($event, array('fieldList' => array('published', 'timestamp', 'info')));\n            if ($attribute['Attribute']['object_id'] != 0) {\n                $this->Attribute->Object->updateTimestamp($attribute['Attribute']['object_id'], $date->getTimestamp());\n            }\n            $this->autoRender = false;\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Field updated.', 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n        } else {\n            $this->autoRender = false;\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $this->Attribute->validationErrors)), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function view($id)\n    {\n        if (Validation::uuid($id)) {\n            $temp = $this->Attribute->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Attribute.uuid' => $id),\n                'fields' => array('Attribute.id', 'Attribute.uuid')\n            ));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid attribute id.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException('Invalid attribute');\n        }\n        $conditions = array('conditions' => array('Attribute.id' => $id), 'withAttachments' => true, 'flatten' => true);\n        $conditions['includeAllTags'] = false;\n        $conditions['includeAttributeUuid'] = true;\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $conditions);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $attribute = $attribute[0];\n        if ($this->_isRest()) {\n            if (isset($attribute['AttributeTag'])) {\n                foreach ($attribute['AttributeTag'] as $k => $tag) {\n                    $attribute['Attribute']['Tag'][$k] = $tag['Tag'];\n                }\n            }\n            unset($attribute['Attribute']['value1']);\n            unset($attribute['Attribute']['value2']);\n            $this->set('Attribute', $attribute['Attribute']);\n            $this->set('_serialize', array('Attribute'));\n        } else {\n            $this->redirect('/events/view/' . $attribute['Attribute']['event_id']);\n        }\n    }\n\n    public function viewPicture($id, $thumbnail=false)\n    {\n        if (Validation::uuid($id)) {\n            $conditions = array('Attribute.uuid' => $id);\n        } elseif (is_numeric($id)) {\n            $conditions = array('Attribute.id' => $id);\n        } else {\n            throw new NotFoundException(__('Invalid attribute id.'));\n        }\n\n        $conditions['Attribute.type'] = 'attachment';\n        $options = array(\n            'conditions' => $conditions,\n            'includeAllTags' => false,\n            'includeAttributeUuid' => true,\n            'flatten' => true,\n        );\n\n        if ($this->_isRest()) {\n            $options['withAttachments'] = true;\n        }\n\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $options);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $attribute = $attribute[0];\n\n        if (!$this->Attribute->isImage($attribute['Attribute'])) {\n            throw new NotFoundException(\"Attribute is not an image.\");\n        }\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($attribute['Attribute']['data'], $this->response->type());\n        } else {\n            $width = isset($this->request->params['named']['width']) ? $this->request->params['named']['width'] : 200;\n            $height = isset($this->request->params['named']['height']) ? $this->request->params['named']['height'] : 200;\n            $imageData = $this->Attribute->getPictureData($attribute, $thumbnail, $width, $height);\n            $extension = pathinfo($attribute['Attribute']['value'], PATHINFO_EXTENSION);\n            return new CakeResponse(array('body' => $imageData, 'type' => strtolower($extension)));\n        }\n    }\n\n    public function delete($id, $hard = false)\n    {\n        if (Validation::uuid($id)) {\n            $this->Attribute->recursive = -1;\n            $temp = $this->Attribute->findByUuid($id);\n            if ($temp == null) {\n                throw new NotFoundException('Invalid attribute');\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException('Invalid attribute');\n        }\n        if (isset($this->params['named']['hard'])) {\n            $hard = $this->params['named']['hard'];\n        }\n        if (isset($this->request->data['hard'])) {\n            $hard = $this->request->data['hard'];\n        }\n        $this->set('id', $id);\n        $conditions = array('id' => $id);\n        if (!$hard) {\n            $conditions['deleted'] = 0;\n        }\n        $attribute = $this->Attribute->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1,\n                'fields' => array('id', 'event_id'),\n        ));\n        if (empty($attribute)) {\n            throw new NotFoundException('Invalid attribute');\n        }\n        if ($this->request->is('ajax')) {\n            if ($this->request->is('post')) {\n                if ($this->Attribute->deleteAttribute($id, $this->Auth->user(), $hard)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Attribute deleted.')), 'status'=>200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Attribute was not deleted.')), 'status'=>200, 'type' => 'json'));\n                }\n            } else {\n                $this->set('hard', $hard);\n                $this->set('event_id', $attribute['Attribute']['event_id']);\n                $this->render('ajax/attributeConfirmationForm');\n            }\n        } else {\n            if (!$this->request->is('post') && !$this->request->is('delete')) {\n                throw new MethodNotAllowedException(__('This function is only accessible via POST requests.'));\n            }\n            if ($this->Attribute->deleteAttribute($id, $this->Auth->user(), $hard)) {\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    $this->set('message', 'Attribute deleted.');\n                    $this->set('_serialize', array('message'));\n                } else {\n                    $this->Flash->success(__('Attribute deleted'));\n                    $this->redirect($this->referer());\n                }\n            } else {\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    throw new Exception(__('Attribute was not deleted'));\n                } else {\n                    $this->Flash->error(__('Attribute was not deleted'));\n                    $this->redirect(array('action' => 'index'));\n                }\n                $this->Flash->success(__('Attribute deleted'));\n            }\n        }\n    }\n\n\n    public function restore($id = null)\n    {\n        $attribute = $this->Attribute->find('first', array(\n                'conditions' => array('Attribute.id' => $id),\n                'recursive' => -1,\n                'fields' => array('Attribute.id', 'Attribute.event_id'),\n                'contain' => array(\n                    'Event' => array(\n                        'fields' => array('Event.orgc_id')\n                    )\n                )\n        ));\n        if (empty($attribute) || !$this->userRole['perm_site_admin'] && $this->Auth->user('org_id') != $attribute['Event']['orgc_id']) {\n            if ($this->request->is('ajax')) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Attribute')), 'type' => 'json', 'status'=>200));\n            } else {\n                throw new MethodNotAllowedException(__('Invalid Attribute'));\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $attribute['Attribute']['event_id']);\n        }\n        if ($this->request->is('ajax')) {\n            if ($this->request->is('post')) {\n                $result = $this->Attribute->restore($id, $this->Auth->user());\n                if ($result === true) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Attribute restored.')), 'type' => 'json' ,'status'=>200));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $result)), 'type' => 'json', 'status'=>200));\n                }\n            } else {\n                $this->set('id', $id);\n                $this->set('event_id', $attribute['Attribute']['event_id']);\n                $this->render('ajax/attributeRestorationForm');\n            }\n        } else {\n            if (!$this->request->is('post') && !$this->_isRest()) {\n                throw new MethodNotAllowedException();\n            }\n            if ($this->Attribute->restore($id, $this->Auth->user())) {\n                $this->Attribute->__alterAttributeCount($this->data['Attribute']['event_id']);\n                $this->redirect(array('action' => 'view', $id));\n            } else {\n                throw new NotFoundException(__('Could not restore the attribute'));\n            }\n        }\n    }\n\n    public function deleteSelected($id = false, $hard = false)\n    {\n        if (!$this->request->is('post')) {\n            if ($this->request->is('get')) {\n                return $this->RestResponse->describe('Attributes', 'deleteSelected', false, $this->response->type());\n            }\n            throw new MethodNotAllowedException(__('This function is only accessible via POST requests.'));\n        }\n        // get a json object with a list of attribute IDs to be deleted\n        // check each of them and return a json object with the successful deletes and the failed ones.\n        if ($this->_isRest()) {\n            if (empty($this->request->data['Attribute'])) {\n                $this->request->data['Attribute'] = $this->request->data;\n            }\n            if (isset($this->request->data['Attribute']['id'])) {\n                $ids = $this->request->data['Attribute']['id'];\n            } else {\n                $ids = $this->request->data['Attribute'];\n            }\n            if (empty($id) && isset($this->request->data['Attribute']['event_id']) && is_numeric($this->request->data['Attribute']['event_id'])) {\n                $id = $this->request->data['Attribute']['event_id'];\n            }\n        } else {\n            $ids = json_decode($this->request->data['Attribute']['ids_delete']);\n        }\n        if (empty($id)) {\n            throw new MethodNotAllowedException(__('No event ID set.'));\n        }\n        if (!$this->_isSiteAdmin()) {\n            $event = $this->Attribute->Event->find('first', array(\n                    'conditions' => array('id' => $id),\n                    'recursive' => -1,\n                    'fields' => array('id', 'orgc_id', 'user_id')\n            ));\n            if ($event['Event']['orgc_id'] != $this->Auth->user('org_id') || (!$this->userRole['perm_modify_org'] && !($this->userRole['perm_modify'] && $event['Event']['user_id'] == $this->Auth->user('id')))) {\n                throw new MethodNotAllowedException(__('Invalid Event.'));\n            }\n        }\n        if (empty($ids)) {\n            $ids = -1;\n        }\n        $conditions = array('id' => $ids, 'event_id' => $id);\n        if ($ids == 'all') {\n            unset($conditions['id']);\n        }\n        if ($hard || ($this->_isRest() && empty($this->request->data['Attribute']['allow_hard_delete']))) {\n            $conditions['deleted'] = 0;\n        }\n        // find all attributes from the ID list that also match the provided event ID.\n        $attributes = $this->Attribute->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'fields' => array('id', 'event_id', 'deleted')\n        ));\n        if ($ids == 'all') {\n            $ids = array();\n            foreach ($attributes as $attribute) {\n                $ids[] = $attribute['Attribute']['id'];\n            }\n        }\n        if (empty($attributes)) {\n            throw new NotFoundException(__('No matching attributes found.'));\n        }\n        $successes = array();\n        foreach ($attributes as $a) {\n            if ($hard) {\n                if ($this->Attribute->deleteAttribute($a['Attribute']['id'], $this->Auth->user(), true)) {\n                    $successes[] = $a['Attribute']['id'];\n                }\n            } else {\n                if ($this->Attribute->deleteAttribute($a['Attribute']['id'], $this->Auth->user(), $a['Attribute']['deleted'] == 1 ? true : false)) {\n                    $successes[] = $a['Attribute']['id'];\n                }\n            }\n        }\n        $fails = array_diff($ids, $successes);\n        $this->autoRender = false;\n        if (count($fails) == 0 && count($successes) > 0) {\n            $message = count($successes) . ' attribute' . (count($successes) != 1 ? 's' : '') . ' deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Attributes', 'deleteSelected', $id, false, $message);\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message)), 'status'=>200, 'type' => 'json'));\n        } else {\n            $message = count($successes) . ' attribute' . (count($successes) != 1 ? 's' : '') . ' deleted, but ' . count($fails) . ' attribute' . (count($fails) != 1 ? 's' : '') . ' could not be deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Attributes', 'deleteSelected', false, $message);\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $message)), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function editSelected($id, $selectedAttributeIds = \"[]\")\n    {\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException(__('This method can only be accessed via AJAX.'));\n        }\n        if ($this->request->is('post')) {\n            $event = $this->Attribute->Event->find('first', array(\n                'conditions' => array('id' => $id),\n                'recursive' => -1,\n                'fields' => array('id', 'orgc_id', 'org_id', 'user_id', 'published', 'timestamp', 'info', 'uuid')\n            ));\n            if (!$this->_isSiteAdmin()) {\n                if ($event['Event']['orgc_id'] != $this->Auth->user('org_id') || (!$this->userRole['perm_modify_org'] && !($this->userRole['perm_modify'] && $event['user_id'] == $this->Auth->user('id')))) {\n                    throw new MethodNotAllowedException(__('You are not authorized to edit this event.'));\n                }\n            }\n            $attribute_ids = json_decode($this->request->data['Attribute']['attribute_ids']);\n            $attributes = $this->Attribute->find('all', array(\n                'conditions' => array(\n                    'id' => $attribute_ids,\n                    'event_id' => $id,\n                ),\n                'recursive' => -1,\n            ));\n\n            $tags_ids_remove = json_decode($this->request->data['Attribute']['tags_ids_remove']);\n            $tags_ids_add = json_decode($this->request->data['Attribute']['tags_ids_add']);\n            $clusters_ids_remove = json_decode($this->request->data['Attribute']['clusters_ids_remove']);\n            $clusters_ids_add = json_decode($this->request->data['Attribute']['clusters_ids_add']);\n            $changeInTagOrCluster = ($tags_ids_remove !== null && count($tags_ids_remove) > 0)\n                || ($tags_ids_add === null || count($tags_ids_add) > 0)\n                || ($clusters_ids_remove === null || count($clusters_ids_remove) > 0)\n                || ($clusters_ids_add === null || count($clusters_ids_add) > 0);\n\n            $changeInAttribute = ($this->request->data['Attribute']['to_ids'] != 2) || ($this->request->data['Attribute']['distribution'] != 6) || ($this->request->data['Attribute']['comment'] != null);\n\n            if (!$changeInAttribute && !$changeInTagOrCluster) {\n                $this->autoRender = false;\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true)), 'status' => 200, 'type' => 'json'));\n            }\n\n            if ($this->request->data['Attribute']['to_ids'] != 2) {\n                foreach ($attributes as $key => $attribute) {\n                    $attributes[$key]['Attribute']['to_ids'] = ($this->request->data['Attribute']['to_ids'] == 0 ? false : true);\n                }\n            }\n\n            if ($this->request->data['Attribute']['distribution'] != 6) {\n                foreach ($attributes as $key => $attribute) {\n                    $attributes[$key]['Attribute']['distribution'] = $this->request->data['Attribute']['distribution'];\n                }\n                if ($this->request->data['Attribute']['distribution'] == 4) {\n                    foreach ($attributes as $key => $attribute) {\n                        $attributes[$key]['Attribute']['sharing_group_id'] = $this->request->data['Attribute']['sharing_group_id'];\n                    }\n                } else {\n                    foreach ($attributes as $key => $attribute) {\n                        $attributes[$key]['Attribute']['sharing_group_id'] = 0;\n                    }\n                }\n            }\n\n            if ($this->request->data['Attribute']['comment'] != null) {\n                foreach ($attributes as $key => $attribute) {\n                    $attributes[$key]['Attribute']['comment'] = $this->request->data['Attribute']['comment'];\n                }\n            }\n\n            $date = new DateTime();\n            $timestamp = $date->getTimestamp();\n            foreach ($attributes as $key => $attribute) {\n                $attributes[$key]['Attribute']['timestamp'] = $timestamp;\n            }\n\n            if ($changeInAttribute) {\n                if ($this->request->data['Attribute']['is_proposal']) { // create ShadowAttributes instead\n                    $shadowAttributes = array();\n                    foreach ($attributes as $attribute) {\n                        $shadowAttribute['ShadowAttribute'] = $attribute['Attribute'];\n                        unset($shadowAttribute['ShadowAttribute']['id']);\n                        $shadowAttribute['ShadowAttribute']['email'] = $this->Auth->user('email');\n                        $shadowAttribute['ShadowAttribute']['org_id'] = $this->Auth->user('org_id');\n                        $shadowAttribute['ShadowAttribute']['event_uuid'] = $event['Event']['uuid'];\n                        $shadowAttribute['ShadowAttribute']['event_org_id'] = $event['Event']['org_id'];\n                        $shadowAttribute['ShadowAttribute']['old_id'] = $attribute['Attribute']['id'];\n                        $shadowAttributes[] = $shadowAttribute;\n                    }\n                    $saveSuccess = $this->Attribute->ShadowAttribute->saveMany($shadowAttributes);\n                } else {\n                    $saveSuccess = $this->Attribute->saveMany($attributes);\n                }\n                if ($saveSuccess) {\n                    if (!$this->_isRest()) {\n                        $this->Attribute->Event->insertLock($this->Auth->user(), $id);\n                    }\n                    $event['Event']['timestamp'] = $date->getTimestamp();\n                    $event['Event']['published'] = 0;\n                    $this->Attribute->Event->save($event, array('fieldList' => array('published', 'timestamp', 'info', 'id')));\n                    $this->autoRender = false;\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true)), 'status' => 200, 'type' => 'json'));\n                } else {\n                    $this->autoRender = false;\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'validationErrors' => $this->Attribute->validationErrors)), 'status' => 200, 'type' => 'json'));\n                }\n            }\n\n            // apply changes in tag/cluster\n            foreach ($attributes as $key => $attribute) {\n                foreach ($tags_ids_remove as $t => $tag_id) {\n                    $this->removeTag($attributes[$key]['Attribute']['id'], $tag_id);\n                }\n                foreach ($tags_ids_add as $t => $tag_id) {\n                    $this->addTag($attributes[$key]['Attribute']['id'], $tag_id);\n                }\n                $this->Galaxy = ClassRegistry::init('Galaxy');\n                foreach ($clusters_ids_remove as $c => $cluster_id) {\n                    $this->Galaxy->detachCluster($this->Auth->user(), 'attribute', $attributes[$key]['Attribute']['id'], $cluster_id);\n                }\n                foreach ($clusters_ids_add as $c => $cluster_id) {\n                    $this->Galaxy->attachCluster($this->Auth->user(), 'attribute', $attributes[$key]['Attribute']['id'], $cluster_id);\n                }\n            }\n\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true)), 'status' => 200, 'type' => 'json'));\n\n        } else {\n            if (!isset($id)) {\n                throw new MethodNotAllowedException(__('No event ID provided.'));\n            }\n            $selectedAttributeIds = json_decode($selectedAttributeIds);\n            if ($selectedAttributeIds === null) {\n                $selectedAttributeIds = array();\n            }\n\n            // tags to remove\n            $tags = $this->Attribute->AttributeTag->getAttributesTags($this->Auth->user(), $id, $selectedAttributeIds);\n            $tagItemsRemove = array();\n            foreach ($tags as $k => $tag) {\n                $tagName = $tag['name'];\n                $tagItemsRemove[] = array(\n                    'name' => $tagName,\n                    'value' => $tag['id'],\n                    'template' => array(\n                        'name' => array(\n                            'name' => $tagName,\n                            'label' => array(\n                                'background' => isset($tag['colour']) ? $tag['colour'] : '#ffffff'\n                            )\n                        ),\n                    )\n                );\n            }\n            unset($tags);\n\n            // clusters to remove\n            $clusters = $this->Attribute->AttributeTag->getAttributesClusters($this->Auth->user(), $id, $selectedAttributeIds);\n            $clusterItemsRemove = array();\n            foreach ($clusters as $k => $cluster) {\n                $name = $cluster['value'];\n                $optionName = $cluster['value'];\n                $synom = $cluster['synonyms_string'] !== '' ? ' (' . $cluster['synonyms_string'] . ')' : '';\n                $optionName .= $synom;\n\n                $temp = array(\n                    'name' => $optionName,\n                    'value' => $cluster['id'],\n                    'template' => array(\n                        'name' => $name,\n                        'infoExtra' => $cluster['description']\n                    )\n                );\n                if ($cluster['synonyms_string'] !== '') {\n                    $temp['infoContextual'] = __('Synonyms: ') . $cluster['synonyms_string'];\n                }\n                $clusterItemsRemove[] = $temp;\n            }\n            unset($clusters);\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions = array('Tag.org_id' => array(0, $this->Auth->user('org_id')));\n                $conditions = array('Tag.user_id' => array(0, $this->Auth->user('id')));\n                $conditions = array('Tag.hide_tag' => 0);\n            }\n            $allTags = $this->Attribute->AttributeTag->Tag->find('all', array('conditions' => $conditions, 'recursive' => -1));\n            $tags = array();\n            foreach ($allTags as $i => $tag) {\n                $tags[$tag['Tag']['id']] = $tag['Tag'];\n            }\n            unset($allTags);\n            $tagItemsAdd = array();\n            foreach ($tags as $k => $tag) {\n                $tagName = $tag['name'];\n                $tagItemsAdd[] = array(\n                    'name' => $tagName,\n                    'value' => $tag['id'],\n                    'template' => array(\n                        'name' => array(\n                            'name' => $tagName,\n                            'label' => array(\n                                'background' => isset($tag['colour']) ? $tag['colour'] : '#ffffff'\n                            )\n                        ),\n                    )\n\n                );\n            }\n\n            // clusters to add\n            $this->GalaxyCluster = ClassRegistry::init('GalaxyCluster');\n            $clusters = $this->GalaxyCluster->find('all', array(\n                'fields' => array('value', 'id'),\n                'recursive' => -1\n            ));\n            $clusterItemsAdd = array();\n            foreach ($clusters as $k => $cluster) {\n                $clusterItemsAdd[] = array(\n                    'name' => $cluster['GalaxyCluster']['value'],\n                    'value' => $cluster['GalaxyCluster']['id']\n                );\n            }\n            unset($clusters);\n\n            $this->layout = 'ajax';\n            $this->set('id', $id);\n            $this->set('sgs', $this->Attribute->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', true));\n            $this->set('distributionLevels', $this->Attribute->distributionLevels);\n            $this->set('distributionDescriptions', $this->Attribute->distributionDescriptions);\n            $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n            $this->set('tagItemsRemove', $tagItemsRemove);\n            $this->set('tagItemsAdd', $tagItemsAdd);\n            $this->set('clusterItemsAdd', $clusterItemsAdd);\n            $this->set('clusterItemsRemove', $clusterItemsRemove);\n            $this->set('options', array( // set chosen (select picker) options\n                'multiple' => -1,\n                'disabledSubmitButton' => true,\n                'flag_redraw_chosen' => true,\n                'select_options' => array(\n                    'additionalData' => array(\n                        'event_id' => $id,\n                    ),\n                ),\n            ));\n            $this->render('ajax/attributeEditMassForm');\n        }\n    }\n\n    public function search($continue = false)\n    {\n        $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        $this->set('shortDist', $this->Attribute->shortDist);\n        if ($this->request->is('post') || !empty($this->request->params['named']['tags'])) {\n            if (isset($this->request->data['Attribute'])) {\n                $this->request->data = $this->request->data['Attribute'];\n            }\n            $checkForEmpty = array('value', 'tags', 'uuid', 'org', 'type', 'category', 'first_seen', 'last_seen');\n            foreach ($checkForEmpty as $field) {\n                if (empty($this->request->data[$field]) || $this->request->data[$field] === 'ALL') {\n                    unset($this->request->data[$field]);\n                }\n            }\n            if (empty($this->request->data['to_ids'])) {\n                unset($this->request->data['to_ids']);\n                $this->request->data['ignore'] = 1;\n            }\n            $paramArray = array('value' , 'type', 'category', 'org', 'tags', 'from', 'to', 'last', 'eventid', 'withAttachments', 'uuid', 'publish_timestamp', 'timestamp', 'enforceWarninglist', 'to_ids', 'deleted', 'includeEventUuid', 'event_timestamp', 'threat_level_id', 'includeEventTags', 'first_seen', 'last_seen');\n            $filterData = array(\n                'request' => $this->request,\n                'named_params' => $this->params['named'],\n                'paramArray' => $paramArray,\n                'ordered_url_params' => @compact($paramArray),\n                'additional_delimiters' => PHP_EOL\n            );\n            $exception = false;\n            $filters = $this->_harvestParameters($filterData, $exception);\n            if (!empty($filters['uuid'])) {\n                if (!is_array($filters['uuid'])) {\n                    $filters['uuid'] = array($filters['uuid']);\n                }\n                $uuid = array();\n                $ids = array();\n                foreach ($filters['uuid'] as $k => $filter) {\n                    if ($filter[0] === '!') {\n                        $filter = substr($filter, 1);\n                    }\n                    if (Validation::uuid($filter)) {\n                        $uuid[] = $filters['uuid'][$k];\n                    } else {\n                        $ids[] = $filters['uuid'][$k];\n                    }\n                }\n                if (empty($uuid)) {\n                    unset($filters['uuid']);\n                } else {\n                    $filters['uuid'] = $uuid;\n                }\n                if (!empty($ids)) {\n                    $filters['eventid'] = $ids;\n                }\n            }\n            unset($filterData);\n            if ($filters === false) {\n                return $exception;\n            }\n            $this->Session->write('search_attributes_filters', json_encode($filters));\n        } elseif ($continue === 'results') {\n            $filters = $this->Session->read('search_attributes_filters');\n            if (empty($filters)) {\n                $filters = array();\n            } else {\n                $filters = json_decode($filters, true);\n            }\n        } else {\n            $types = array('' => array('ALL' => 'ALL'), 'types' => array());\n            $types['types'] = array_merge($types['types'], $this->_arrayToValuesIndexArray(array_keys($this->Attribute->typeDefinitions)));\n            ksort($types['types']);\n            $this->set('types', $types);\n            // combobox for categories\n            $categories['categories'] = array_merge(array('ALL' => 'ALL'), $this->_arrayToValuesIndexArray(array_keys($this->Attribute->categoryDefinitions)));\n            $this->set('categories', $categories);\n            $this->Session->write('search_attributes_filters', null);\n        }\n        if (isset($filters)) {\n            $params = $this->Attribute->restSearch($this->Auth->user(), 'json', $filters, true);\n            if (!isset($params['conditions']['Attribute.deleted'])) {\n                $params['conditions']['Attribute.deleted'] = 0;\n            }\n            $this->paginate = $params;\n            if (empty($this->paginate['limit'])) {\n                $this->paginate['limit'] = 60;\n            }\n            if (empty($this->paginate['page'])) {\n                $this->paginate['page'] = 1;\n            }\n            $this->paginate['recursive'] = -1;\n            $this->paginate['contain'] = array(\n                'Event' => array(\n                    'fields' =>  array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.info', 'Event.user_id', 'Event.date'),\n                    'Orgc' => array('fields' => array('Orgc.id', 'Orgc.name')),\n                    'Org' => array('fields' => array('Org.id', 'Org.name'))\n                ),\n                'AttributeTag' => array('Tag'),\n                'Object' => array(\n                    'fields' => array('Object.id', 'Object.distribution', 'Object.sharing_group_id')\n                )\n            );\n            $attributes = $this->paginate();\n            if (!$this->_isRest()) {\n                $temp = $this->__searchUI($attributes);\n                $this->loadModel('Galaxy');\n                $this->set('mitreAttackGalaxyId', $this->Galaxy->getMitreAttackGalaxyId());\n                $attributes = $temp[0];\n                $sightingsData = $temp[1];\n                $this->set('sightingsData', $sightingsData);\n            } else {\n                return $this->RestResponse->viewData($attributes, $this->response->type());\n            }\n            if (isset($filters['tags']) && !empty($filters['tags'])) {\n                // if the tag is passed by ID - show its name in the view\n                $this->loadModel('Tag');\n                if (!is_array($filters['tags'])) {\n                    $filters['tags'] = array($filters['tags']);\n                }\n                foreach ($filters['tags'] as $k => &$v) {\n                    if (!is_numeric($v))\n                        continue;\n                    $tag = $this->Tag->find('first', [\n                        'conditions' => ['Tag.id' => $v],\n                        'fields' => ['name'],\n                        'recursive' => -1\n                        ]);\n                    if (!empty($tag)) {\n                        $v = $tag['Tag']['name'];\n                    }\n                }\n            }\n            $this->set('filters', $filters);\n            $this->set('attributes', $attributes);\n            $this->set('isSearch', 1);\n            $this->render('index');\n        }\n        if (isset($attributeTags)) {\n            $this->set('attributeTags', $attributeTags);\n        }\n    }\n\n    private function __searchUI($attributes)\n    {\n        $sightingsData = array();\n        $this->Feed = ClassRegistry::init('Feed');\n\n        $this->loadModel('Sighting');\n        $user = $this->Auth->user();\n        foreach ($attributes as $k => $attribute) {\n            $attributeId = $attribute['Attribute']['id'];\n            if ($this->Attribute->isImage($attribute['Attribute'])) {\n                if (extension_loaded('gd')) {\n                    // if extension is loaded, the data is not passed to the view because it is asynchronously fetched\n                    $attribute['Attribute']['image'] = true; // tell the view that it is an image despite not having the actual data\n                } else {\n                    $attribute['Attribute']['image'] = $this->Attribute->base64EncodeAttachment($attribute['Attribute']);\n                }\n                $attributes[$k] = $attribute;\n            }\n\n            $attributes[$k]['Attribute']['AttributeTag'] = $attributes[$k]['AttributeTag'];\n            $attributes[$k]['Attribute'] = $this->Attribute->Event->massageTags($attributes[$k]['Attribute'], 'Attribute', $excludeGalaxy = false, $cullGalaxyTags = true);\n            unset($attributes[$k]['AttributeTag']);\n\n            $sightingsData = array_merge(\n                $sightingsData,\n                $this->Sighting->attachToEvent($attribute, $user, $attributeId, $extraConditions = false)\n            );\n            $correlations = $this->Attribute->Event->getRelatedAttributes($user, $attributeId, false, false, 'attribute');\n            if (!empty($correlations)) {\n                $attributes[$k]['Attribute']['RelatedAttribute'] = $correlations[$attributeId];\n            }\n            $temp = $this->Feed->attachFeedCorrelations(array($attributes[$k]['Attribute']), $user, $attributes[$k]['Event']);\n            if (!empty($temp)) {\n                $attributes[$k]['Attribute'] = $temp[0];\n            }\n        }\n        $sightingsData = $this->Attribute->Event->getSightingData(array('Sighting' => $sightingsData));\n        return array($attributes, $sightingsData);\n    }\n\n    // If the checkbox for the alternate search is ticked, then this method is called to return the data to be represented\n    // This alternate view will show a list of events with matching search results and the percentage of those matched attributes being marked as to_ids\n    // events are sorted based on relevance (as in the percentage of matches being flagged as indicators for IDS)\n    public function searchAlternate($data)\n    {\n        $attributes = $this->Attribute->fetchAttributes(\n            $this->Auth->user(),\n            array(\n                'conditions' => array(\n                    'AND' => $data\n                ),\n                'contain' => array('Event' => array('Orgc' => array('fields' => array('Orgc.name')))),\n                'fields' => array(\n                    'Attribute.id', 'Attribute.event_id', 'Attribute.type', 'Attribute.category', 'Attribute.to_ids', 'Attribute.value', 'Attribute.distribution',\n                    'Event.id', 'Event.org_id', 'Event.orgc_id', 'Event.info', 'Event.distribution', 'Event.attribute_count', 'Event.date',\n                )\n            )\n        );\n        $events = array();\n        foreach ($attributes as $attribute) {\n            if (isset($events[$attribute['Event']['id']])) {\n                if ($attribute['Attribute']['to_ids']) {\n                    $events[$attribute['Event']['id']]['to_ids']++;\n                } else {\n                    $events[$attribute['Event']['id']]['no_ids']++;\n                }\n            } else {\n                $events[$attribute['Event']['id']]['Event'] = $attribute['Event'];\n                $events[$attribute['Event']['id']]['to_ids'] = 0;\n                $events[$attribute['Event']['id']]['no_ids'] = 0;\n                if ($attribute['Attribute']['to_ids']) {\n                    $events[$attribute['Event']['id']]['to_ids']++;\n                } else {\n                    $events[$attribute['Event']['id']]['no_ids']++;\n                }\n            }\n        }\n        foreach ($events as $key => $event) {\n            $events[$key]['relevance'] = 100 * $event['to_ids'] / ($event['no_ids'] + $event['to_ids']);\n        }\n        if (!empty($events)) {\n            $events = $this->__subval_sort($events, 'relevance');\n        }\n        return $events;\n    }\n\n    // Sort the array of arrays based on a value of a sub-array\n    private function __subval_sort($a, $subkey)\n    {\n        foreach ($a as $k=>$v) {\n            $b[$k] = strtolower($v[$subkey]);\n        }\n        arsort($b);\n        foreach ($b as $key=>$val) {\n            $c[] = $a[$key];\n        }\n        return $c;\n    }\n\n    public function checkComposites()\n    {\n        if (!self::_isAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('fails', $this->Attribute->checkComposites());\n    }\n\n    // returns an XML with attributes that belong to an event. The type of attributes to be returned can be restricted by type using the 3rd parameter.\n    // Similar to the restSearch, this parameter can be chained with '&&' and negations are accepted too. For example filename&&!filename|md5 would return all filenames that don't have an md5\n    // The usage of returnAttributes is the following: [MISP-url]/attributes/returnAttributes/<API-key>/<type>/<signature flag>\n    // The signature flag is off by default, enabling it will only return attributes that have the to_ids flag set to true.\n    public function returnAttributes($key='download', $id, $type = null, $sigOnly = false)\n    {\n        $user = $this->checkAuthUser($key);\n        // if the user is authorised to use the api key then user will be populated with the user's account\n        // in addition we also set a flag indicating whether the user is a site admin or not.\n        if ($key != null && $key != 'download') {\n            $user = $this->checkAuthUser($key);\n        } else {\n            if (!$this->Auth->user()) {\n                throw new UnauthorizedException(__('You are not authorized. Please send the Authorization header with your auth key along with an Accept header for application/xml.'));\n            }\n            $user = $this->checkAuthUser($this->Auth->user('authkey'));\n        }\n        if (!$user) {\n            throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n        }\n        if ($this->request->is('post')) {\n            if ($this->response->type() === 'application/json') {\n                $data = $this->request->input('json_decode', true);\n            } elseif ($this->response->type() === 'application/xml' && !empty($this->request->data)) {\n                $data = $this->request->data;\n            } else {\n                throw new BadRequestException(__('Either specify the search terms in the url, or POST a json array / xml (with the root element being \"request\" and specify the correct accept and content type headers).'));\n            }\n            $paramArray = array('type', 'sigOnly');\n            foreach ($paramArray as $p) {\n                if (isset($data['request'][$p])) {\n                    ${$p} = $data['request'][$p];\n                } else {\n                    ${$p} = null;\n                }\n            }\n        }\n        $this->loadModel('Event');\n        $this->Event->read(null, $id);\n        $myEventOrAdmin = false;\n        if ($user['User']['siteAdmin'] || $this->Event->data['Event']['org_id'] == $user['User']['org_id']) {\n            $myEventOrAdmin = true;\n        }\n\n        if (!$myEventOrAdmin) {\n            if ($this->Event->data['Event']['distribution'] == 0) {\n                throw new UnauthorizedException(__('You don\\'t have access to that event.'));\n            }\n        }\n        $this->response->type('xml');    // set the content type\n        $this->layout = 'xml/default';\n        $this->header('Content-Disposition: download; filename=\"misp.search.attribute.results.xml\"');\n        // check if user can see the event!\n        $conditions['AND'] = array();\n        $include = array();\n        $exclude = array();\n        $attributes = array();\n        // If there is a type set, create the include and exclude arrays from it\n        if (isset($type)) {\n            $elements = explode('&&', $type);\n            foreach ($elements as $v) {\n                if (substr($v, 0, 1) == '!') {\n                    $exclude[] = substr($v, 1);\n                } else {\n                    $include[] = $v;\n                }\n            }\n        }\n\n        // check each attribute\n        foreach ($this->Event->data['Attribute'] as $k => $attribute) {\n            $contained = false;\n            // If the include list is empty, then the first check should always set contained to true (basically we chose type = all - exclusions, or simply all)\n            if (empty($include)) {\n                $contained = true;\n            } else {\n                // If we have elements in $include we should check if the attribute's type should be included\n                foreach ($include as $inc) {\n                    if (strpos($attribute['type'], $inc) !== false) {\n                        $contained = true;\n                    }\n                }\n            }\n            // If we have either everything included or the attribute passed the include check, we should check if there is a reason to exclude the attribute\n            // For example, filename may be included, but md5 may be excluded, meaning that filename|md5 should be removed\n            if ($contained) {\n                foreach ($exclude as $exc) {\n                    if (strpos($attribute['type'], $exc) !== false) {\n                        continue 2;\n                    }\n                }\n            }\n            // If we still didn't throw the attribute away, let's check if the user requesting the attributes is of the owning organisation of the event\n            // and if not, whether the distribution of the attribute allows the user to see it\n            if ($contained && !$myEventOrAdmin && $attribute['distribution'] == 0) {\n                $contained = false;\n            }\n\n            // If we have set the sigOnly parameter and the attribute has to_ids set to false, discard it!\n            if ($contained && $sigOnly === 'true' && !$attribute['to_ids']) {\n                $contained = false;\n            }\n\n            // If after all of this $contained is still true, let's add the attribute to the array\n            if ($contained) {\n                $attributes[] = $attribute;\n            }\n        }\n        if (empty($attributes)) {\n            throw new NotFoundException(__('No matches.'));\n        }\n        $this->set('results', $attributes);\n    }\n\n    public function downloadAttachment($key='download', $id)\n    {\n        if ($key != null && $key != 'download') {\n            $user = $this->checkAuthUser($key);\n        } else {\n            if (!$this->Auth->user()) {\n                throw new UnauthorizedException(__('You are not authorized. Please send the Authorization header with your auth key along with an Accept header for application/xml.'));\n            }\n            $user = $this->checkAuthUser($this->Auth->user('authkey'));\n        }\n        // if the user is authorised to use the api key then user will be populated with the user's account\n        // in addition we also set a flag indicating whether the user is a site admin or not.\n        if (!$user) {\n            throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute or no authorisation to view it.'));\n        }\n        $this->Attribute->read(null, $id);\n        if (!$user['User']['siteAdmin'] &&\n            $user['User']['org_id'] != $this->Attribute->data['Event']['org_id'] &&\n            (\n                $this->Attribute->data['Event']['distribution'] == 0 ||\n                $this->Attribute->data['Attribute']['distribution'] == 0\n            )) {\n            throw new NotFoundException(__('Invalid attribute or no authorisation to view it.'));\n        }\n        $this->__downloadAttachment($this->Attribute->data['Attribute']);\n    }\n\n    public function text()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'type', 'tags', 'eventId', 'allowNonIDS', 'from', 'to', 'last', 'enforceWarninglist', 'allowNotPublished'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'text'\n            ),\n            'alias' => array(\n                'eventId' => 'eventid'\n            )\n        ));\n        if (!empty($this->_legacyParams['allowNonIDS'])) {\n            $this->_legacyParams['to_ids'] = [0,1];\n        }\n        if (!empty($this->_legacyParams['allowNotPublished'])) {\n            $this->_legacyParams['published'] = [0,1];\n        }\n        if (!empty($this->_legacyParams['type']) && $this->_legacyParams['type'] === 'all') {\n            unset($this->_legacyParams['type']);\n        }\n        return $this->restSearch();\n    }\n\n    public function rpz()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'tags', 'eventid', 'from', 'to', 'policy', 'walled_garden', 'ns',\n                'email', 'serial', 'refresh', 'retry', 'expiry', 'minimum_ttl', 'ttl',\n                'enforceWarninglist', 'ns_alt'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'rpz'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function bro($key = 'download', $type = 'all', $tags = false, $eventId = false, $from = false, $to = false, $last = false, $enforceWarninglist = false)\n    {\n        if ($this->request->is('post')) {\n            if ($this->request->input('json_decode', true)) {\n                $data = $this->request->input('json_decode', true);\n            } else {\n                $data = $this->request->data;\n            }\n            if (!empty($data) && !isset($data['request'])) {\n                $data = array('request' => $data);\n            }\n            $paramArray = array('type', 'tags', 'eventId', 'from', 'to', 'last', 'enforceWarninglist');\n            foreach ($paramArray as $p) {\n                if (isset($data['request'][$p])) {\n                    ${$p} = $data['request'][$p];\n                }\n            }\n        }\n        $simpleFalse = array('type', 'tags', 'eventId', 'from', 'to', 'last', 'enforceWarninglist');\n        foreach ($simpleFalse as $sF) {\n            if (!is_array(${$sF}) && (${$sF} === 'null' || ${$sF} == '0' || ${$sF} === false || strtolower(${$sF}) === 'false')) {\n                ${$sF} = false;\n            }\n        }\n        if ($type === 'null' || $type === '0' || $type === 'false') {\n            $type = 'all';\n        }\n        if ($from) {\n            $from = $this->Attribute->Event->dateFieldCheck($from);\n        }\n        if ($to) {\n            $to = $this->Attribute->Event->dateFieldCheck($to);\n        }\n        if ($last) {\n            $last = $this->Attribute->Event->resolveTimeDelta($last);\n        }\n        if ($key != 'download') {\n            // check if the key is valid -> search for users based on key\n            $user = $this->checkAuthUser($key);\n            if (!$user) {\n                throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n            }\n        } else {\n            if (!$this->Auth->user('id')) {\n                throw new UnauthorizedException(__('You have to be logged in to do that.'));\n            }\n        }\n        $filename = 'misp.' . $type . '.intel';\n        if ($eventId) {\n            $filename = 'misp.' . $type . '.event_' . $eventId . '.intel';\n        }\n        $responseFile = implode(PHP_EOL, $this->Attribute->bro($this->Auth->user(), $type, $tags, $eventId, $from, $to, $last, $enforceWarninglist)) . PHP_EOL;\n        $this->response->body($responseFile);\n        $this->response->type('txt');\n        $this->response->download($filename);\n        return $this->response;\n    }\n\n    public function reportValidationIssuesAttributes($eventId = false)\n    {\n        // TODO improve performance of this function by eliminating the additional SQL query per attribute\n        // search for validation problems in the attributes\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('result', $this->Attribute->reportValidationIssuesAttributes($eventId));\n    }\n\n    public function generateCorrelation()\n    {\n        if (!self::_isSiteAdmin() || !$this->request->is('post')) {\n            throw new NotFoundException();\n        }\n        if (!Configure::read('MISP.background_jobs')) {\n            $k = $this->Attribute->generateCorrelation();\n            $this->Flash->success(__('All done. ' . $k . ' attributes processed.'));\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        } else {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'generate correlation',\n                    'job_input' => 'All attributes',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => 'ADMIN',\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array('jobGenerateCorrelation', $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            $this->Flash->success(__('Job queued. You can view the progress if you navigate to the active jobs view (administration -> jobs).'));\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        }\n    }\n\n    public function fetchViewValue($id, $field = null)\n    {\n        $validFields = array('value', 'comment', 'type', 'category', 'to_ids', 'distribution', 'timestamp', 'first_seen', 'last_seen');\n        if (!isset($field) || !in_array($field, $validFields)) {\n            throw new MethodNotAllowedException(__('Invalid field requested.'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException(__('This function can only be accessed via AJAX.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $params = array(\n                'conditions' => array('Attribute.id' => $id),\n                'fields' => array('id', 'distribution', 'event_id', $field),\n                'contain' => array(\n                        'Event' => array(\n                                'fields' => array('distribution', 'id', 'org_id'),\n                        )\n                ),\n                'flatten' => 1\n        );\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $params);\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $attribute = $attribute[0];\n        $result = $attribute['Attribute'][$field];\n        if ($field == 'distribution') {\n            $result=$this->Attribute->shortDist[$result];\n        }\n        if ($field == 'to_ids') {\n            $result = ($result == 0 ? 'No' : 'Yes');\n        }\n        if ($field == 'timestamp') {\n            if (isset($result)) {\n                $result = date('Y-m-d', $result);\n            } else {\n                echo '&nbsp';\n            }\n        }\n        $this->set('value', $result);\n        $this->layout = 'ajax';\n        $this->render('ajax/attributeViewFieldForm');\n    }\n\n    public function fetchEditForm($id, $field = null)\n    {\n        $validFields = array('value', 'comment', 'type', 'category', 'to_ids', 'distribution', 'first_seen', 'last_seen');\n        if (!isset($field) || !in_array($field, $validFields)) {\n            throw new MethodNotAllowedException(__('Invalid field requested.'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException(__('This function can only be accessed via AJAX.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n\n        $fields = array('id', 'distribution', 'event_id');\n        if ($field == 'category' || $field == 'type') {\n            $fields[] = 'type';\n            $fields[] = 'category';\n        } else {\n            $fields[] = $field;\n        }\n        $params = array(\n            'conditions' => array('Attribute.id' => $id),\n            'fields' => $fields,\n            'flatten' => 1,\n            'contain' => array(\n                'Event' => array(\n                    'fields' => array('distribution', 'id', 'user_id', 'orgc_id'),\n                )\n            )\n        );\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $params);\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $attribute = $attribute[0];\n        if (!$this->_isSiteAdmin()) {\n            if ($attribute['Event']['orgc_id'] == $this->Auth->user('org_id')\n            && (($this->userRole['perm_modify'] && $attribute['Event']['user_id'] != $this->Auth->user('id'))\n                    || $this->userRole['perm_modify_org'])) {\n                // Allow the edit\n            } else {\n                throw new ForbiddenException(__('You do not have permission to do that'));\n            }\n        }\n        $this->layout = 'ajax';\n        if ($field == 'distribution') {\n            $distributionLevels = $this->Attribute->shortDist;\n            unset($distributionLevels[4]);\n            $this->set('distributionLevels', $distributionLevels);\n        }\n        if ($field == 'category') {\n            $typeCategory = array();\n            foreach ($this->Attribute->categoryDefinitions as $k => $category) {\n                foreach ($category['types'] as $type) {\n                    $typeCategory[$type][] = $k;\n                }\n            }\n            $this->set('typeCategory', $typeCategory);\n        }\n        if ($field == 'type') {\n            $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        }\n        $this->set('object', $attribute['Attribute']);\n        $fieldURL = ucfirst($field);\n        $this->render('ajax/attributeEdit' . $fieldURL . 'Form');\n    }\n\n\n    public function attributeReplace($id)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        $event = $this->Attribute->Event->find('first', array(\n                'conditions' => array('Event.id' => $id),\n                'fields' => array('id', 'orgc_id', 'distribution'),\n                'recursive' => -1\n        ));\n        if (empty($event) || (!$this->_isSiteAdmin() && ($event['Event']['orgc_id'] != $this->Auth->user('org_id') || !$this->userRole['perm_add']))) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        $this->set('event_id', $id);\n        if ($this->request->is('get')) {\n            $this->layout = 'ajax';\n            $this->request->data['Attribute']['event_id'] = $id;\n\n            // combobox for types\n            $types = array_keys($this->Attribute->typeDefinitions);\n            $types = $this->_arrayToValuesIndexArray($types);\n            $this->set('types', $types);\n            // combobox for categories\n            $categories = array_keys($this->Attribute->categoryDefinitions);\n            $categories = $this->_arrayToValuesIndexArray($categories);\n            $this->set('categories', compact('categories'));\n            $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n            $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n            $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        }\n        if ($this->request->is('post')) {\n            if (!$this->request->is('ajax')) {\n                throw new MethodNotAllowedException(__('This action can only be accessed via AJAX.'));\n            }\n\n            $newValues = explode(PHP_EOL, $this->request->data['Attribute']['value']);\n            $category = $this->request->data['Attribute']['category'];\n            $type = $this->request->data['Attribute']['type'];\n            $to_ids = $this->request->data['Attribute']['to_ids'];\n\n            if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $event['Event']['orgc_id'] && !$this->userRole['perm_add']) {\n                throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n            }\n\n            $oldAttributes = $this->Attribute->find('all', array(\n                    'conditions' => array(\n                            'event_id' => $id,\n                            'category' => $category,\n                            'type' => $type,\n                    ),\n                    'fields' => array('id', 'event_id', 'category', 'type', 'value'),\n                    'recursive' => -1,\n            ));\n            $results = array('untouched' => count($oldAttributes), 'created' => 0, 'deleted' => 0, 'createdFail' => 0, 'deletedFail' => 0);\n\n            $newValues = array_map('trim', $newValues);\n\n            foreach ($newValues as $value) {\n                $found = false;\n                foreach ($oldAttributes as $old) {\n                    if ($value == $old['Attribute']['value']) {\n                        $found = true;\n                    }\n                }\n                if (!$found) {\n                    $attribute = array(\n                            'value' => $value,\n                            'event_id' => $id,\n                            'category' => $category,\n                            'type' => $type,\n                            'distribution' => $event['Event']['distribution'],\n                            'to_ids' => $to_ids,\n                    );\n                    $this->Attribute->create();\n                    if ($this->Attribute->save(array('Attribute' => $attribute))) {\n                        $results['created']++;\n                    } else {\n                        $results['createdFail']++;\n                    }\n                }\n            }\n\n            foreach ($oldAttributes as $old) {\n                if (!in_array($old['Attribute']['value'], $newValues)) {\n                    if ($this->Attribute->delete($old['Attribute']['id'])) {\n                        $results['deleted']++;\n                        $results['untouched']--;\n                    } else {\n                        $results['deletedFail']++;\n                    }\n                }\n            }\n            $message = '';\n            $success = true;\n            if (($results['created'] > 0 || $results['deleted'] > 0) && $results['createdFail'] == 0 && $results['deletedFail'] == 0) {\n                $message .= 'Update completed without any issues.';\n                $event = $this->Attribute->Event->find('first', array(\n                    'conditions' => array('Event.id' => $id),\n                    'recursive' => -1\n                ));\n                $event['Event']['published'] = 0;\n                $date = new DateTime();\n                $event['Event']['timestamp'] = $date->getTimestamp();\n                $this->Attribute->Event->save($event);\n            } else {\n                $message .= 'Update completed with some errors.';\n                $success = false;\n            }\n\n            if ($results['created']) {\n                $message .= $results['created'] . ' attribute' . $this->__checkCountForOne($results['created']) . ' created. ';\n            }\n            if ($results['createdFail']) {\n                $message .= $results['createdFail'] . ' attribute' . $this->__checkCountForOne($results['createdFail']) . ' could not be created. ';\n            }\n            if ($results['deleted']) {\n                $message .= $results['deleted'] . ' attribute' . $this->__checkCountForOne($results['deleted']) . ' deleted.';\n            }\n            if ($results['deletedFail']) {\n                $message .= $results['deletedFail'] . ' attribute' . $this->__checkCountForOne($results['deletedFail']) . ' could not be deleted. ';\n            }\n            $message .= $results['untouched'] . ' attributes left untouched. ';\n\n            $this->autoRender = false;\n            $this->layout = 'ajax';\n            if ($success) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message)), 'status'=>200, 'type' => 'json'));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => $message)), 'status'=>200, 'type' => 'json'));\n            }\n        }\n    }\n\n    private function __checkCountForOne($number)\n    {\n        if ($number != 1) {\n            return 's';\n        }\n        return '';\n    }\n\n\n    // download a sample by passing along an md5\n    public function downloadSample($hash=false, $allSamples=false, $eventID=false)\n    {\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('This functionality requires API key access.'));\n        }\n        $error = false;\n        if ($this->response->type() === 'application/json') {\n            $data = $this->request->input('json_decode', true);\n        } elseif ($this->response->type() === 'application/xml') {\n            $data = $this->request->data;\n        } else {\n            throw new BadRequestException(__('This action is for the API only. Please refer to the automation page for information on how to use it.'));\n        }\n        if (!$hash && isset($data['request']['hash'])) {\n            $hash = $data['request']['hash'];\n        }\n        if (!$allSamples && isset($data['request']['allSamples'])) {\n            $allSamples = $data['request']['allSamples'];\n        }\n        if (!$eventID && isset($data['request']['eventID'])) {\n            $eventID = $data['request']['eventID'];\n        }\n        if (!$eventID && !$hash) {\n            throw new MethodNotAllowedException(__('No hash or event ID received. You need to set at least one of the two.'));\n        }\n        if (!$hash) {\n            $allSamples = true;\n        }\n\n\n        $simpleFalse = array('hash', 'allSamples', 'eventID');\n        foreach ($simpleFalse as $sF) {\n            if (!is_array(${$sF}) && (${$sF} === 'null' || ${$sF} == '0' || ${$sF} === false || strtolower(${$sF}) === 'false')) {\n                ${$sF} = false;\n            }\n        }\n\n        // valid combinations of settings are:\n        // hash\n        // eventID + all samples\n        // hash + eventID\n        // hash + eventID + all samples\n\n        $searchConditions = array();\n        $types = array();\n        if ($hash) {\n            $validTypes = $this->Attribute->resolveHashType($hash);\n            if ($allSamples) {\n                if (empty($validTypes)) {\n                    $error = 'Invalid hash format (valid options are ' . implode(', ', array_keys($this->Attribute->hashTypes)) . ')';\n                } else {\n                    foreach ($validTypes as $t) {\n                        if ($t == 'md5') {\n                            $types = array_merge($types, array('malware-sample', 'filename|md5', 'md5'));\n                        } else {\n                            $types = array_merge($types, array('filename|' . $t, $t));\n                        }\n                    }\n                }\n                if (empty($error)) {\n                    $event_ids = $this->Attribute->find('list', array(\n                        'recursive' => -1,\n                        'contain' => array('Event'),\n                        'fields' => array('Event.id'),\n                        'conditions' => array(\n                            'OR' => array(\n                                'AND' => array(\n                                    'LOWER(Attribute.value1) LIKE' => strtolower($hash),\n                                    'Attribute.value2' => '',\n                                ),\n                                'LOWER(Attribute.value2) LIKE' => strtolower($hash)\n                            )\n                        ),\n                    ));\n                    $searchConditions = array(\n                        'AND' => array('Event.id' => array_values($event_ids))\n                    );\n                    if (empty($event_ids)) {\n                        $error = 'No hits with the given parameters.';\n                    }\n                }\n            } else {\n                if (!in_array('md5', $validTypes)) {\n                    $error = 'Only MD5 hashes can be used to fetch malware samples at this point in time.';\n                }\n                if (empty($error)) {\n                    $searchConditions = array('AND' => array('LOWER(Attribute.value2) LIKE' => strtolower($hash)));\n                }\n            }\n        }\n\n        if (!empty($eventID)) {\n            $searchConditions['AND'][] = array('Event.id' => $eventID);\n        }\n\n        if (empty($error)) {\n            $attributes = $this->Attribute->fetchAttributes(\n                    $this->Auth->user(),\n                    array(\n                        'fields' => array('Attribute.event_id', 'Attribute.id', 'Attribute.value1', 'Attribute.value2', 'Event.info'),\n                        'conditions' => array(\n                            'AND' => array(\n                                $searchConditions,\n                                array('Attribute.type' => 'malware-sample')\n                            )\n                        ),\n                        'contain' => array('Event'),\n                        'flatten' => 1\n                    )\n            );\n            if (empty($attributes)) {\n                $error = 'No hits with the given parameters.';\n            }\n\n            $results = array();\n            foreach ($attributes as $attribute) {\n                $found = false;\n                foreach ($results as $previous) {\n                    if ($previous['md5'] == $attribute['Attribute']['value2']) {\n                        $found = true;\n                    }\n                }\n                if (!$found) {\n                    $results[] = array(\n                        'md5' => $attribute['Attribute']['value2'],\n                        'base64' => $this->Attribute->base64EncodeAttachment($attribute['Attribute']),\n                        'filename' => $attribute['Attribute']['value1'],\n                        'attribute_id' => $attribute['Attribute']['id'],\n                        'event_id' => $attribute['Attribute']['event_id'],\n                        'event_info' => $attribute['Event']['info'],\n                    );\n                }\n            }\n            if ($error) {\n                $this->set('message', $error);\n                $this->set('_serialize', array('message'));\n            } else {\n                $this->set('result', $results);\n                $this->set('_serialize', array('result'));\n            }\n        } else {\n            $this->set('message', $error);\n            $this->set('_serialize', array('message'));\n        }\n    }\n\n    public function pruneOrphanedAttributes()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        $events = array_keys($this->Attribute->Event->find('list'));\n        $orphans = $this->Attribute->find('list', array('conditions' => array('Attribute.event_id !=' => $events)));\n        if (count($orphans) > 0) {\n            $this->Attribute->deleteAll(array('Attribute.event_id !=' => $events), false, true);\n        }\n        $this->Flash->success('Removed ' . count($orphans) . ' attribute(s).');\n        $this->redirect(Router::url($this->referer(), true));\n    }\n\n    public function checkOrphanedAttributes()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        $this->loadModel('Attribute');\n        $events = array_keys($this->Attribute->Event->find('list'));\n        $orphans = $this->Attribute->find('list', array('conditions' => array('Attribute.event_id !=' => $events)));\n        return new CakeResponse(array('body'=> count($orphans), 'status'=>200, 'type' => 'json'));\n    }\n\n    public function updateAttributeValues($script)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        switch ($script) {\n            case 'urlSanitisation':\n                $replaceConditions = array(\n                    array('search' => 'UPPER(Attribute.value1) LIKE', 'from' => 'HXXP', 'to' => 'http', 'ci' => true, 'condition' => 'startsWith'),\n                    array('search' => 'Attribute.value1 LIKE', 'from' => '[.]', 'to' => '.', 'ci' => false, 'condition' => 'contains'),\n                );\n                break;\n            default:\n                throw new Exception(__('Invalid script.'));\n        }\n        $counter = 0;\n        foreach ($replaceConditions as $rC) {\n            $searchPattern = '';\n            if (in_array($rC['condition'], array('endsWith', 'contains'))) {\n                $searchPattern .= '%';\n            }\n            $searchPattern .= $rC['from'];\n            if (in_array($rC['condition'], array('startsWith', 'contains'))) {\n                $searchPattern .= '%';\n            }\n            $attributes = $this->Attribute->find('all', array('conditions' => array($rC['search'] => $searchPattern), 'recursive' => -1));\n            foreach ($attributes as $attribute) {\n                $regex = '/';\n                if (!in_array($rC['condition'], array('startsWith', 'contains'))) {\n                    $regex .= '^';\n                }\n                $regex .= $rC['from'];\n                if (!in_array($rC['condition'], array('endsWith', 'contains'))) {\n                    $regex .= '$';\n                }\n                $regex .= '/';\n                if ($rC['ci']) {\n                    $regex .= 'i';\n                }\n                $attribute['Attribute']['value'] = preg_replace($regex, $rC['to'], $attribute['Attribute']['value']);\n                $this->Attribute->save($attribute);\n                $counter++;\n            }\n        }\n        $this->Flash->success('Updated ' . $counter . ' attribute(s).');\n        $this->redirect('/pages/display/administration');\n    }\n\n    public function hoverEnrichment($id, $persistent = false)\n    {\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id), 'flatten' => 1));\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid Attribute'));\n        }\n        $this->loadModel('Server');\n        $this->loadModel('Module');\n        $modules = $this->Module->getEnabledModules($this->Auth->user());\n        $validTypes = array();\n        if (isset($modules['hover_type'][$attribute[0]['Attribute']['type']])) {\n            $validTypes = $modules['hover_type'][$attribute[0]['Attribute']['type']];\n        }\n        $url = Configure::read('Plugin.Enrichment_services_url') ? Configure::read('Plugin.Enrichment_services_url') : $this->Server->serverSettings['Plugin']['Enrichment_services_url']['value'];\n        $port = Configure::read('Plugin.Enrichment_services_port') ? Configure::read('Plugin.Enrichment_services_port') : $this->Server->serverSettings['Plugin']['Enrichment_services_port']['value'];\n        $resultArray = array();\n        foreach ($validTypes as $type) {\n            $options = array();\n            $found = false;\n            foreach ($modules['modules'] as $temp) {\n                if ($temp['name'] == $type) {\n                    $found = true;\n                    $format = (isset($temp['mispattributes']['format']) ? $temp['mispattributes']['format'] : 'simplified');\n                    if (isset($temp['meta']['config'])) {\n                        foreach ($temp['meta']['config'] as $conf) {\n                            $options[$conf] = Configure::read('Plugin.Enrichment_' . $type . '_' . $conf);\n                        }\n                    }\n                    break;\n                }\n            }\n            if (!$found) {\n                throw new MethodNotAllowedException(__('No valid enrichment options found for this attribute.'));\n            }\n            $data = array('module' => $type);\n            if ($persistent) {\n                $data['persistent'] = 1;\n            }\n            if (!empty($options)) {\n                $data['config'] = $options;\n            }\n            if ($format == 'misp_standard') {\n                $data['attribute'] = in_array('value', $attribute) ? $attribute : $attribute[0]['Attribute'];\n            } else {\n                $data[$attribute[0]['Attribute']['type']] = $attribute[0]['Attribute']['value'];\n            }\n            $data = json_encode($data);\n            $result = $this->Module->queryModuleServer('/query', $data, true);\n            if ($result) {\n                if (!is_array($result)) {\n                    $resultArray[$type][] = array($type => $result);\n                }\n            } else {\n                // TODO: i18n?\n                $resultArray[$type][] = array($type => 'Enrichment service not reachable.');\n                continue;\n            }\n            $current_result = array();\n            if (isset($result['results']['Object'])) {\n                if (!empty($result['results']['Object'])) {\n                    $objects = array();\n                    foreach($result['results']['Object'] as $object) {\n                        if (isset($object['Attribute']) && !empty($object['Attribute'])) {\n                            $object_attributes = array();\n                            foreach($object['Attribute'] as $object_attribute) {\n                                array_push($object_attributes, array('object_relation' => $object_attribute['object_relation'], 'value' => $object_attribute['value']));\n                            }\n                            array_push($objects, array('name' => $object['name'], 'Attribute' => $object_attributes));\n                        }\n                    }\n                    if (!empty($objects)) {\n                        $current_result['Object'] = $objects;\n                    }\n                }\n                unset($result['results']['Object']);\n            }\n            if (isset($result['results']['Attribute'])) {\n                if (!empty($result['results']['Attribute'])) {\n                    $attributes = array();\n                    foreach($result['results']['Attribute'] as $result_attribute) {\n                        $attributes[] = array('type' => $result_attribute['type'], 'value' => $result_attribute['value']);\n                    }\n                    $current_result['Attribute'] = $attributes;\n                }\n                unset($result['results']['Attribute']);\n            }\n            $resultArray[$type] = $current_result;\n            if (!empty($result['results'])) {\n                foreach ($result['results'] as $r) {\n                    if (is_array($r['values']) && !empty($r['values'])) {\n                        $tempArray = array();\n                        foreach ($r['values'] as $k => $v) {\n                            if (is_array($v)) {\n                                $v = 'Array returned';\n                            }\n                            $tempArray[$k] = $v;\n                        }\n                        $resultArray[$type][] = array($type => $tempArray);\n                    } elseif ($r['values'] == null) {\n                        $resultArray[$type][] = array($type => 'No result');\n                    } else {\n                        $resultArray[$type][] = array($type => $r['values']);\n                    }\n                }\n            }\n        }\n        $this->set('results', $resultArray);\n        $this->layout = 'ajax';\n        $this->render('ajax/hover_enrichment');\n    }\n\n    public function describeTypes()\n    {\n        $result = array();\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $result['sane_defaults'][$key] = array('default_category' => $value['default_category'], 'to_ids' => $value['to_ids']);\n        }\n        $result['types'] = array_keys($this->Attribute->typeDefinitions);\n        $result['categories'] = array_keys($this->Attribute->categoryDefinitions);\n        foreach ($this->Attribute->categoryDefinitions as $cat => $data) {\n            $result['category_type_mappings'][$cat] = $data['types'];\n        }\n        $this->set('result', $result);\n        $this->set('_serialize', array('result'));\n    }\n\n    public function attributeStatistics($type = 'type', $percentage = false)\n    {\n        $validTypes = array('type', 'category');\n        if (!in_array($type, $validTypes)) {\n            throw new MethodNotAllowedException(__('Invalid type requested.'));\n        }\n        $totalAttributes = $this->Attribute->find('count', array());\n        $attributes = $this->Attribute->find('all', array(\n                'recursive' => -1,\n                'fields' => array($type, 'COUNT(id) as attribute_count'),\n                'group' => array($type)\n        ));\n        $results = array();\n        foreach ($attributes as $attribute) {\n            if ($percentage) {\n                $results[$attribute['Attribute'][$type]] = round(100 * $attribute[0]['attribute_count'] / $totalAttributes, 3) . '%';\n            } else {\n                $results[$attribute['Attribute'][$type]] = $attribute[0]['attribute_count'];\n            }\n        }\n        ksort($results);\n        $this->autoRender = false;\n        $this->layout = false;\n        $this->set('data', $results);\n        $this->set('flags', JSON_PRETTY_PRINT);\n        $this->response->type('json');\n        $this->render('/Servers/json/simple');\n    }\n\n    public function addTag($id = false, $tag_id = false)\n    {\n        $this->Taxonomy = $log = ClassRegistry::init('Taxonomy');\n        $rearrangeRules = array(\n            'request' => false,\n            'Attribute' => false,\n            'tag_id' => 'tag',\n            'attribute_id' => 'attribute',\n            'id' => 'attribute'\n        );\n        $RearrangeTool = new RequestRearrangeTool();\n        $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n        $local = empty($this->params['named']['local']) ? 0 : 1;\n        if (!$this->request->is('post')) {\n            if ($id === false) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $this->set('local', $local);\n            $this->set('object_id', $id);\n            $this->set('scope', 'Attribute');\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->render('/Events/add_tag');\n        } else {\n            if ($id === false) {\n                if (!isset($this->request->data['attribute'])) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                }\n                $id = $this->request->data['attribute'];\n            }\n            if ($id === 'selected') {\n                if (!isset($this->request->data['attribute_ids'])) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                }\n                $idList = json_decode($this->request->data['attribute_ids'], true);\n            }\n            if ($tag_id === false) {\n                if (!isset($this->request->data['tag'])) {\n                    throw new NotFoundException(__('Invalid tag'));\n                }\n                $tag_id = $this->request->data['tag'];\n            }\n            if (!is_numeric($tag_id)) {\n                if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                    $tagChoice = explode('_', $tag_id)[1];\n                    $this->loadModel('TagCollection');\n                    $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                    if (empty($tagCollection)) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                    }\n                    $tag_id_list = array();\n                    foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                        $tag_id_list[] = $tagCollectionTag['tag_id'];\n                    }\n                } else {\n                    // try to parse json array\n                    $tag_ids = json_decode($tag_id);\n                    if ($tag_ids !== null) { // can decode json\n                        $tag_id_list = array();\n                        foreach ($tag_ids as $tag_id) {\n                            if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                                $tagChoice = explode('_', $tag_id)[1];\n                                $this->loadModel('TagCollection');\n                                $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                                if (empty($tagCollection)) {\n                                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                                }\n                                foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                                    $tag_id_list[] = $tagCollectionTag['tag_id'];\n                                }\n                            } else {\n                                $tag_id_list[] = $tag_id;\n                            }\n                        }\n                    } else {\n                        $tag = $this->Event->EventTag->Tag->find('first', array('recursive' => -1, 'conditions' => $conditions));\n                        if (empty($tag)) {\n                            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status'=>200, 'type' => 'json'));\n                        }\n                        $tag_id = $tag['Tag']['id'];\n                    }\n                }\n            }\n            if (!isset($idList)) {\n                $idList = array($id);\n            }\n            if (empty($tag_id_list)) {\n                $tag_id_list = array($tag_id);\n            }\n            $success = 0;\n            $fails = 0;\n            foreach ($idList as $id) {\n                $attributes = $this->Attribute->fetchAttributes(\n                    $this->Auth->user(),\n                    array(\n                        'conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0),\n                        'flatten' => 1,\n                        'contain' => array('Event.orgc_id')\n                    )\n                );\n                if (empty($attributes)) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                } else {\n                    $attribute = $attributes[0];\n                }\n                if (!$this->userRole['perm_tagger']) {\n                    $fails++;\n                    continue;\n                }\n                if ((!$this->userRole['perm_sync'] && !$this->_isSiteAdmin()) && $attribute['Event']['orgc_id'] !== $this->Auth->user('org_id')) {\n                    if (Configure::read('MISP.host_org_id') != $this->Auth->user('org_id') || !$local) {\n                        $fails++;\n                        continue;\n                    }\n                }\n                $eventId = $attribute['Attribute']['event_id'];\n                $event = $this->Attribute->Event->find('first', array(\n                    'conditions' => array('Event.id' => $eventId),\n                    'recursive' => -1\n                ));\n                if (!$this->_isRest()) {\n                    $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n                }\n                foreach ($tag_id_list as $tag_id) {\n                    $this->Attribute->AttributeTag->Tag->id = $tag_id;\n                    if (!$this->Attribute->AttributeTag->Tag->exists()) {\n                        $fails++;\n                        continue;\n                    }\n                    $tag = $this->Attribute->AttributeTag->Tag->find('first', array(\n                        'conditions' => array('Tag.id' => $tag_id),\n                        'recursive' => -1,\n                        'fields' => array('Tag.name')\n                    ));\n                    $found = $this->Attribute->AttributeTag->find('first', array(\n                        'conditions' => array(\n                            'attribute_id' => $id,\n                            'tag_id' => $tag_id\n                        ),\n                        'recursive' => -1,\n                    ));\n                    $this->autoRender = false;\n                    if (!empty($found)) {\n                        $fails++;\n                        continue;\n                    }\n                    $tagsOnAttribute = $this->Attribute->AttributeTag->find('all', array(\n                        'conditions' => array(\n                            'AttributeTag.attribute_id' => $id,\n                            'AttributeTag.local' => $local\n                        ),\n                        'contain' => 'Tag',\n                        'fields' => array('Tag.name'),\n                        'recursive' => -1\n                    ));\n                    $exclusiveTestPassed = $this->Taxonomy->checkIfNewTagIsAllowedByTaxonomy($tag['Tag']['name'], Hash::extract($tagsOnAttribute, '{n}.Tag.name'));\n                    if (!$exclusiveTestPassed) {\n                        $fails++;\n                        continue;\n                    }\n                    $this->Attribute->AttributeTag->create();\n                    if ($this->Attribute->AttributeTag->save(array('attribute_id' => $id, 'tag_id' => $tag_id, 'event_id' => $eventId, 'local' => $local))) {\n                        if (!$local) {\n                            $event['Event']['published'] = 0;\n                            $date = new DateTime();\n                            $event['Event']['timestamp'] = $date->getTimestamp();\n                            $result = $this->Attribute->Event->save($event);\n                            $attribute['Attribute']['timestamp'] = $date->getTimestamp();\n                            if ($attribute['Attribute']['object_id'] != 0) {\n                                $this->Attribute->Object->updateTimestamp($attribute['Attribute']['object_id'], $date->getTimestamp());\n                            }\n                            $this->Attribute->save($attribute);\n                        }\n                        $log = ClassRegistry::init('Log');\n                        $log->createLogEntry(\n                            $this->Auth->user(),\n                            'tag',\n                            'Attribute',\n                            $id,\n                            sprintf(\n                                'Attached%s tag (%s) \"%s\" to attribute (%s)',\n                                $local ? ' local' : '',\n                                $tag_id,\n                                $tag['Tag']['name'],\n                                $id\n                            ),\n                            sprintf(\n                                'Attribute (%s) tagged as Tag (%s)%s',\n                                $id,\n                                $tag_id,\n                                $local ? ' locally' : ''\n                            )\n                        );\n                        $success++;\n                    } else {\n                        $fails++;\n                    }\n                }\n            }\n            if ($fails == 0) {\n                if ($success == 1) {\n                    $message = 'Tag added.';\n                } else {\n                    $message = $success . ' tags added.';\n                }\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message, 'check_publish' => true)), 'status' => 200, 'type' => 'json'));\n            } else {\n                if ($fails == 1) {\n                    $message = 'Tag could not be added.';\n                } else {\n                    $message = $fails . ' tags could not be added.';\n                }\n                if ($success > 0) {\n                    $message .= ' However, ' . $success . ' tag(s) were added.';\n                }\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $message)), 'status' => 200, 'type' => 'json'));\n            }\n        }\n    }\n\n    public function removeTag($id = false, $tag_id = false)\n    {\n        if (!$this->request->is('post')) {\n            $this->set('id', $id);\n            $this->set('tag_id', $tag_id);\n            $this->set('model', 'Attribute');\n            $this->render('ajax/tagRemoveConfirmation');\n        } else {\n            $rearrangeRules = array(\n                'request' => false,\n                'Attribute' => false,\n                'tag_id' => 'tag',\n                'attribute_id' => 'attribute',\n                'id' => 'attribute'\n            );\n            $RearrangeTool = new RequestRearrangeTool();\n            $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n            if ($id === false) {\n                if (!isset($this->request->data['attribute'])) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                }\n                $id = $this->request->data['attribute'];\n            }\n            if ($tag_id === false) {\n                if (!isset($this->request->data['tag'])) {\n                    throw new NotFoundException(__('Invalid tag'));\n                }\n                $tag_id = $this->request->data['tag'];\n            }\n            $this->Attribute->id = $id;\n            if (!$this->Attribute->exists()) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $this->Attribute->read();\n            if ($this->Attribute->data['Attribute']['deleted']) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $eventId = $this->Attribute->data['Attribute']['event_id'];\n            if (empty($tag_id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status' => 200, 'type' => 'json'));\n            }\n            if (!is_numeric($tag_id)) {\n                $tag = $this->Attribute->AttributeTag->Tag->find('first', array('recursive' => -1, 'conditions' => array('LOWER(Tag.name) LIKE' => strtolower(trim($tag_id)))));\n                if (empty($tag)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status' => 200, 'type' => 'json'));\n                }\n                $tag_id = $tag['Tag']['id'];\n            }\n            if (!is_numeric($id)) {\n                $id = $this->request->data['Attribute']['id'];\n            }\n\n            $this->Attribute->Event->recursive = -1;\n            $event = $this->Attribute->Event->read(array(), $eventId);\n            if (!$this->_isRest()) {\n                $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n            }\n            $this->Attribute->recursive = -1;\n            $attributeTag = $this->Attribute->AttributeTag->find('first', array(\n                'conditions' => array(\n                    'attribute_id' => $id,\n                    'tag_id' => $tag_id\n                ),\n                'recursive' => -1,\n            ));\n            // org should allow to (un)tag too, so that an event that gets pushed can be (un)tagged locally by the owning org\n            if (\n                (\n                    (\n                        $this->Auth->user('org_id') !== $event['Event']['orgc_id'] ||\n                        (\n                            $this->Auth->user('org_id') != Configure::read('MISP.host_org_id') &&\n                            !empty($attributeTag['AttributeTag']['local'])\n                        )\n                    ) ||\n                    !$this->userRole['perm_tagger']\n                ) &&\n                !$this->_isSiteAdmin()\n            ) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You do not have permission to do that.')), 'status' => 200, 'type' => 'json'));\n            }\n\n            $this->autoRender = false;\n            if (empty($attributeTag)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid attribute - tag combination.')), 'status' => 200, 'type' => 'json'));\n            }\n            $tag = $this->Attribute->AttributeTag->Tag->find('first', array(\n                'conditions' => array('Tag.id' => $tag_id),\n                'recursive' => -1,\n                'fields' => array('Tag.name')\n            ));\n            if ($this->Attribute->AttributeTag->delete($attributeTag['AttributeTag']['id'])) {\n                if (empty($attributeTag['AttributeTag']['local'])) {\n                    $event['Event']['published'] = 0;\n                    $date = new DateTime();\n                    $event['Event']['timestamp'] = $date->getTimestamp();\n                    $this->Attribute->Event->save($event);\n                    if ($this->Attribute->data['Attribute']['object_id'] != 0) {\n                        $this->Attribute->Object->updateTimestamp($this->Attribute->data['Attribute']['object_id'], $date->getTimestamp());\n                    }\n                    $this->Attribute->data['Attribute']['timestamp'] = $date->getTimestamp();\n                    $this->Attribute->save($this->Attribute->data);\n                }\n                $log = ClassRegistry::init('Log');\n                $log->createLogEntry($this->Auth->user(), 'tag', 'Attribute', $id, 'Removed tag (' . $tag_id . ') \"' . $tag['Tag']['name'] . '\" from attribute (' . $id . ')', 'Attribute (' . $id . ') untagged of Tag (' . $tag_id . ')');\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Tag removed.', 'check_publish' => empty($attributeTag['AttributeTag']['local']))), 'status' => 200));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Tag could not be removed.')), 'status' => 200, 'type' => 'json'));\n            }\n        }\n    }\n\n    public function toggleCorrelation($id)\n    {\n        if (!$this->_isSiteAdmin() && !Configure::read('MISP.allow_disabling_correlation')) {\n            throw new MethodNotAllowedException(__('Disabling the correlation is not permitted on this instance.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid Attribute.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify']) {\n            throw new MethodNotAllowedException(__('You do not have permission to do that.'));\n        }\n        $conditions = array('Attribute.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Event.orgc_id'] = $this->Auth->user('org_id');\n        }\n        $attribute = $this->Attribute->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'contain' => array('Event')\n        ));\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid Attribute.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify_org'] && $this->Auth->user('id') != $attribute['Event']['user_id']) {\n            throw new MethodNotAllowedException(__('You do not have permission to do that.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $attribute['Event']['id']);\n        }\n        if ($this->request->is('post')) {\n            if ($attribute['Attribute']['disable_correlation']) {\n                $attribute['Attribute']['disable_correlation'] = 0;\n                $this->Attribute->save($attribute);\n                $this->Attribute->__afterSaveCorrelation($attribute['Attribute'], false, $attribute);\n            } else {\n                $attribute['Attribute']['disable_correlation'] = 1;\n                $this->Attribute->save($attribute);\n                $this->Attribute->purgeCorrelations($attribute['Event']['id'], $attribute['Attribute']['id']);\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('attributes', 'toggleCorrelation', $id, false, 'Correlation ' . ($attribute['Attribute']['disable_correlation'] ? 'disabled' : 'enabled') . '.');\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => ('Correlation ' . ($attribute['Attribute']['disable_correlation'] ? 'disabled' : 'enabled')), 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n            }\n        } else {\n            $this->set('attribute', $attribute);\n            $this->render('ajax/toggle_correlation');\n        }\n    }\n\n    public function toggleToIDS($id)\n    {\n        return $this->fetchEditForm($id, 'to_ids');\n    }\n\n\n    public function checkAttachments()\n    {\n        $attributes = $this->Attribute->find(\n                'all',\n                array(\n                    'conditions' => array('Attribute.type' => array('attachment', 'malware-sample')),\n                    'recursive' => -1)\n            );\n        $counter = 0;\n        $attachments_dir = Configure::read('MISP.attachments_dir');\n        if (empty($attachments_dir)) {\n            $this->loadModel('Server');\n            $attachments_dir = $this->Server->getDefaultAttachments_dir();\n        }\n        foreach ($attributes as $attribute) {\n            $path = $attachments_dir . DS . $attribute['Attribute']['event_id'] . DS;\n            $file = $attribute['Attribute']['id'];\n            if (!file_exists($path . $file)) {\n                $counter++;\n            }\n        }\n        return new CakeResponse(array('body'=>$counter, 'status'=>200));\n    }\n\n    public function exportSearch($type = false)\n    {\n        if (empty($type)) {\n            $exports = array_keys($this->Attribute->validFormats);\n            $this->set('exports', $exports);\n            $this->render('ajax/exportSearch');\n        } else {\n            $filters = $this->Session->read('search_attributes_filters');\n            $filters = json_decode($filters, true);\n            $final = $this->Attribute->restSearch($this->Auth->user(), $type, $filters);\n            $responseType = $this->Attribute->validFormats[$type][0];\n            return $this->RestResponse->viewData($final, $responseType, false, true, 'search.' . $type . '.' . $responseType);\n        }\n    }\n\n    private function __getInfo()\n    {\n        $info = array('category' => array(), 'type' => array(), 'distribution' => array());\n        foreach ($this->Attribute->categoryDefinitions as $key => $value) {\n            $info['category'][$key] = array(\n                'key' => $key,\n                'desc' => isset($value['formdesc']) ? $value['formdesc'] : $value['desc']\n            );\n        }\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $info['type'][$key] = array(\n                'key' => $key,\n                'desc' => isset($value['formdesc']) ? $value['formdesc'] : $value['desc']\n            );\n        }\n        foreach ($this->Attribute->distributionLevels as $key => $value) {\n            $info['distribution'][$key] = array(\n                'key' => $value,\n                'desc' => $this->Attribute->distributionDescriptions[$key]['formdesc']\n            );\n        }\n        return $info;\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Folder', 'Utility');\nApp::uses('File', 'Utility');\n\n/**\n * @property Attribute $Attribute\n */\nclass AttributesController extends AppController\n{\n    public $components = array('Security', 'RequestHandler', 'Cidr');\n\n    public $paginate = array(\n            'limit' => 60,\n            'maxLimit' => 9999,\n            'conditions' => array('AND' => array('Attribute.deleted' => 0)),\n            'order' => 'Attribute.event_id DESC'\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        $this->Auth->allow('restSearch');\n        $this->Auth->allow('returnAttributes');\n        $this->Auth->allow('downloadAttachment');\n        $this->Auth->allow('text');\n        $this->Auth->allow('rpz');\n        $this->Auth->allow('bro');\n\n        // permit reuse of CSRF tokens on the search page.\n        if ('search' == $this->request->params['action']) {\n            $this->Security->csrfCheck = false;\n        }\n        if ($this->action == 'add_attachment') {\n            $this->Security->disabledFields = array('values');\n        }\n        $this->Security->validatePost = true;\n\n        // convert uuid to id if present in the url and overwrite id field\n        if (isset($this->params->query['uuid'])) {\n            $params = array(\n                    'conditions' => array('Attribute.uuid' => $this->params->query['uuid']),\n                    'recursive' => 0,\n                    'fields' => 'Attribute.id'\n                    );\n            $result = $this->Attribute->find('first', $params);\n            if (isset($result['Attribute']) && isset($result['Attribute']['id'])) {\n                $id = $result['Attribute']['id'];\n                $this->params->addParams(array('pass' => array($id))); // FIXME find better way to change id variable if uuid is found. params->url and params->here is not modified accordingly now\n            }\n        }\n        // do not show private to other orgs\n        if (!$this->_isSiteAdmin()) {\n            $this->paginate = Set::merge($this->paginate, array('conditions' => $this->Attribute->buildConditions($this->Auth->user())));\n        }\n    }\n\n    public function index()\n    {\n        $this->Attribute->recursive = -1;\n        $this->paginate['recursive'] = -1;\n        $this->paginate['contain'] = array(\n            'Event' => array(\n                'fields' =>  array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.info', 'Event.user_id', 'Event.date'),\n                'Orgc' => array('fields' => array('Orgc.id', 'Orgc.name')),\n                'Org' => array('fields' => array('Org.id', 'Org.name'))\n            ),\n            'AttributeTag' => array('Tag'),\n            'Object' => array(\n                'fields' => array('Object.id', 'Object.distribution', 'Object.sharing_group_id')\n            )\n        );\n        $this->Attribute->contain(array('AttributeTag' => array('Tag')));\n        $this->set('isSearch', 0);\n        $attributes = $this->paginate();\n        if ($this->_isRest()) {\n            foreach ($attributes as $k => $attribute) {\n                $attributes[$k] = $attribute['Attribute'];\n            }\n            return $this->RestResponse->viewData($attributes, $this->response->type());\n        }\n        $org_ids = array();\n        $orgs = $this->Attribute->Event->Orgc->find('list', array(\n                'conditions' => array('Orgc.id' => $org_ids),\n                'fields' => array('Orgc.id', 'Orgc.name')\n        ));\n        if (!$this->_isRest()) {\n            $temp = $this->__searchUI($attributes);\n            $this->loadModel('Galaxy');\n            $this->set('mitreAttackGalaxyId', $this->Galaxy->getMitreAttackGalaxyId());\n            $attributes = $temp[0];\n            $sightingsData = $temp[1];\n            $this->set('sightingsData', $sightingsData);\n        }\n        $this->set('orgs', $orgs);\n        $this->set('shortDist', $this->Attribute->shortDist);\n        $this->set('attributes', $attributes);\n        $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n    }\n\n    public function add($eventId = false)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            return $this->RestResponse->describe('Attributes', 'add', false, $this->response->type());\n        }\n        if ($eventId === false) {\n            throw new MethodNotAllowedException(__('No event ID set.'));\n        }\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('You do not have permissions to create attributes'));\n        }\n        $this->loadModel('Event');\n        if (Validation::uuid($eventId)) {\n            $temp = $this->Event->find('first', array('recursive' => -1, 'fields' => array('Event.id'), 'conditions' => array('Event.uuid' => $eventId)));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid event'));\n            }\n            $eventId = $temp['Event']['id'];\n        } elseif (!is_numeric($eventId)) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        $this->Event->id = $eventId;\n        if (!$this->Event->exists()) {\n            throw new NotFoundException(__('Invalid event'));\n        }\n        // remove the published flag from the event\n        $this->Event->recursive = -1;\n        $this->Event->read(null, $eventId);\n        if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n            throw new ForbiddenException(__('You do not have permission to do that.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Event->insertLock($this->Auth->user(), $this->Event->data['Event']['id']);\n        }\n        if ($this->request->is('ajax')) {\n            $this->set('ajax', true);\n            $this->layout = 'ajax';\n        } else {\n            $this->set('ajax', false);\n        }\n        if ($this->request->is('post')) {\n            if ($this->request->is('ajax')) {\n                $this->autoRender = false;\n            }\n            $date = new DateTime();\n            if (!isset($this->request->data['Attribute'])) {\n                $this->request->data = array('Attribute' => $this->request->data);\n            }\n            if (isset($this->request->data['Attribute']['distribution']) && $this->request->data['Attribute']['distribution'] == 4) {\n                $sg = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1, $this->request->data['Attribute']['sharing_group_id']);\n                if (empty($sg)) {\n                    throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                }\n            }\n            //\n            // multiple attributes in batch import\n            //\n            $attributes = array();\n            if (!empty($this->request->data['Attribute']['batch_import']) || (!empty($this->request->data['Attribute']['value']) && is_array($this->request->data['Attribute']['value']))) {\n                $attributes = array();\n                if (is_array($this->request->data['Attribute']['value'])) {\n                    $values = $this->request->data['Attribute']['value'];\n                } else {\n                    $values = explode(\"\\n\", $this->request->data['Attribute']['value']);\n                }\n                $temp = $this->request->data['Attribute'];\n                foreach ($values as $value) {\n                    $temp['value'] = $value;\n                    $attributes[] = $temp;\n                }\n            } else {\n                $attributes = $this->request->data['Attribute'];\n            }\n            if (!isset($attributes[0])) {\n                $attributes = array(0 => $attributes);\n            }\n            $uuids = array();\n            $this->Warninglist = ClassRegistry::init('Warninglist');\n            $fails = array();\n            $successes = 0;\n            $attributeCount = count($attributes);\n            $inserted_ids = array();\n            foreach ($attributes as $k => $attribute) {\n                $validationErrors = array();\n                $this->Attribute->captureAttribute($attribute, $eventId, $this->Auth->user(), false, false, false, $validationErrors, $this->params['named']);\n                if (empty($validationErrors)) {\n                    $inserted_ids[] = $this->Attribute->id;\n                    $successes +=1;\n                } else {\n                    $fails[\"attribute_\" . $k] = $validationErrors;\n                }\n            }\n            if (!empty($successes)) {\n                $this->Event->unpublishEvent($eventId);\n            }\n            if ($this->_isRest()) {\n                if (!empty($successes)) {\n                    $attributes = $this->Attribute->find('all', array(\n                        'recursive' => -1,\n                        'conditions' => array('Attribute.id' => $inserted_ids),\n                        'contain' => array(\n                            'AttributeTag' => array(\n                                'Tag' => array('fields' => array('Tag.id', 'Tag.name', 'Tag.colour', 'Tag.numerical_value'))\n                            )\n                        )\n                    ));\n                    if (count($attributes) == 1) {\n                        $attributes = $attributes[0];\n                    } else {\n                        $result = array('Attribute' => array());\n                        foreach ($attributes as $attribute) {\n                            $temp = $attribute['Attribute'];\n                            if (!empty($attribute['AttributeTag'])) {\n                                foreach ($attribute['AttributeTag'] as $at) {\n                                    $temp['Tag'][] = $at['Tag'];\n                                }\n                            }\n                            $result['Attribute'][] = $temp;\n                        }\n                        $attributes = $result;\n                        unset($result);\n                    }\n                    return $this->RestResponse->viewData($attributes, $this->response->type(), $fails);\n                } else {\n                    if ($attributeCount == 1) {\n                        return $this->RestResponse->saveFailResponse('Attributes', 'add', false, $fails[\"attribute_0\"], $this->response->type());\n                    } else {\n                        return $this->RestResponse->saveFailResponse('Attributes', 'add', false, $fails, $this->response->type());\n                    }\n                }\n            } else {\n                $message = '';\n                $redirect = '/events/view/' . $eventId;\n                if (empty($fails)) {\n                    $message = 'Attributes saved.';\n                } else {\n                    if ($attributeCount > 1) {\n                        $failKeys = array_keys($fails);\n                        foreach ($failKeys as $k => $v) {\n                            $v = explode('_', $v);\n                            $failKeys[$k] = intval($v[1]);\n                        }\n                        $failed = 1;\n                        $message = sprintf('Attributes saved, however, %s attributes could not be saved. Click %s for more info', count($fails), '$flashErrorMessage');\n                    } else {\n                        $failed = 1;\n                        $message = 'Attribute could not be saved.';\n                    }\n                }\n                if (!empty($failKeys)) {\n                    $flashErrorMessage = array();\n                    $original_values = trim($this->request->data['Attribute']['value']);\n                    $original_values = explode(\"\\n\", $original_values);\n                    foreach ($original_values as $k => $original_value) {\n                        $original_value = trim($original_value);\n                        if (in_array($k, $failKeys)) {\n                            $reason = '';\n                            foreach ($fails[\"attribute_\" . $k] as $failKey => $failData) {\n                                $reason = $failKey . ': ' . $failData[0];\n                            }\n                            $flashErrorMessage[] = '<span class=\"red bold\">' . h($original_value) . '</span> (' . h($reason) . ')';\n                        } else {\n                            $flashErrorMessage[] = '<span class=\"green bold\">' . h($original_value) . '</span>';\n                        }\n                    }\n                    $flashErrorMessage = implode('<br />', $flashErrorMessage);\n                    $this->Session->write('flashErrorMessage', $flashErrorMessage);\n                }\n                if (empty($failed)) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                if ($this->request->is('ajax')) {\n                    $this->autoRender = false;\n                    $this->layout = false;\n                    $errors = ($attributeCount > 1) ? $message : $this->Attribute->validationErrors;\n                    if (!empty($successes)) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message)),'status' => 200, 'type' => 'json'));\n                    } else {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $errors)),'status' => 200, 'type' => 'json'));\n                    }\n                } else {\n                    if ($successes > 0) {\n                        $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n                    }\n                }\n            }\n        }\n        // combobox for types\n        $types = array_keys($this->Attribute->typeDefinitions);\n        foreach ($types as $key => $value) {\n            if (in_array($value, array('malware-sample', 'attachment'))) {\n                unset($types[$key]);\n            }\n        }\n        $types = $this->_arrayToValuesIndexArray($types);\n        $this->set('types', $types);\n        $this->set('compositeTypes', $this->Attribute->getCompositeTypes());\n        // combobox for categories\n        $categories = array_keys($this->Attribute->categoryDefinitions);\n        $categories = $this->_arrayToValuesIndexArray($categories);\n        $this->set('categories', compact('categories'));\n        $this->loadModel('Event');\n        $events = $this->Event->findById($eventId);\n        $this->set('event_id', $events['Event']['id']);\n        // combobox for distribution\n        $this->set('currentDist', $events['Event']['distribution']);\n        // tooltip for distribution\n\n        $this->loadModel('SharingGroup');\n        $sgs = $this->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n        $initialDistribution = 5;\n        $configuredDistribution = Configure::check('MISP.default_attribute_distribution');\n        if ($configuredDistribution != null && $configuredDistribution != 'event') {\n            $initialDistribution = $configuredDistribution;\n        }\n        $this->set('initialDistribution', $initialDistribution);\n        $fieldDesc = array();\n        $distributionLevels = $this->Attribute->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        foreach ($distributionLevels as $key => $value) {\n            $fieldDesc['distribution'][$key] = $this->Attribute->distributionDescriptions[$key]['formdesc'];\n        }\n        foreach ($this->Attribute->categoryDefinitions as $key => $value) {\n            $fieldDesc['category'][$key] = isset($value['formdesc']) ? $value['formdesc'] : $value['desc'];\n        }\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $fieldDesc['type'][$key] = isset($value['formdesc']) ? $value['formdesc'] : $value['desc'];\n        }\n        $this->loadModel('Noticelist');\n        $notice_list_triggers = $this->Noticelist->getTriggerData();\n        $this->set('notice_list_triggers', json_encode($notice_list_triggers, true));\n        $this->set('fieldDesc', $fieldDesc);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        $this->set('published', $events['Event']['published']);\n        $this->set('action', $this->action);\n    }\n\n    public function download($id = null)\n    {\n        if (is_numeric($id)) {\n            $conditions = array('Attribute.id' => $id);\n        } elseif (Validation::uuid($id)) {\n            $conditions = array('Attribute.uuid' => $id);\n        } else {\n            throw new NotFoundException(__('Invalid attribute id.'));\n        }\n        $conditions['Attribute.type'] = array('attachment', 'malware-sample');\n        $attributes = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => $conditions, 'flatten' => true));\n        if (empty($attributes)) {\n            throw new UnauthorizedException(__('Attribute does not exists or you do not have the permission to download this attribute.'));\n        }\n        $this->__downloadAttachment($attributes[0]['Attribute']);\n    }\n\n    private function __downloadAttachment($attribute)\n    {\n        $attachments_dir = Configure::read('MISP.attachments_dir');\n        if (empty($attachments_dir)) {\n            $attachments_dir = $this->Attribute->getDefaultAttachments_dir();\n        }\n\n        $is_s3 = substr($attachments_dir, 0, 2) === \"s3\";\n\n        if ($is_s3) {\n            // We have to download it!\n            App::uses('AWSS3Client', 'Tools');\n            $client = new AWSS3Client();\n            $client->initTool();\n            // Use tmpdir as opposed to attachments dir since we can't write to s3://\n            $attachments_dir = Configure::read('MISP.tmpdir');\n            if (empty($attachments_dir)) {\n                $this->loadModel('Server');\n                $attachments_dir = $this->Server->getDefaultTmp_dir();\n            }\n            // Now download the file\n            $resp = $client->download($attribute['event_id'] . DS . $attribute['id']);\n            // Save to a tmpfile\n            $tmpFile = new File($attachments_dir . DS . $attribute['uuid'], true, 0600);\n            $tmpFile->write($resp);\n            $tmpFile->close();\n            $path = $attachments_dir . DS;\n            $file = $attribute['uuid'];\n        } else {\n            $path = $attachments_dir . DS . $attribute['event_id'] . DS;\n            $file = $attribute['id'];\n        }\n\n        if ('attachment' == $attribute['type']) {\n            $filename = $attribute['value'];\n            $fileExt = pathinfo($filename, PATHINFO_EXTENSION);\n            $filename = substr($filename, 0, strlen($filename) - strlen($fileExt) - 1);\n        } elseif ('malware-sample' == $attribute['type']) {\n            $filenameHash = explode('|', $attribute['value']);\n            $filename = substr($filenameHash[0], strrpos($filenameHash[0], '\\\\'));\n            $fileExt = \"zip\";\n        } else {\n            throw new NotFoundException(__('Attribute not an attachment or malware-sample'));\n        }\n        $this->autoRender = false;\n        $this->response->type($fileExt);\n        $download_attachments_on_load = Configure::check('MISP.download_attachments_on_load') ? Configure::read('MISP.download_attachments_on_load') : true;\n        $this->response->file($path . $file, array('download' => $download_attachments_on_load, 'name' => $filename . '.' . $fileExt));\n    }\n\n    public function add_attachment($eventId = null)\n    {\n        if ($this->request->is('post')) {\n            $this->Attribute->Event->id = $this->request->data['Attribute']['event_id'];\n            $this->Attribute->Event->recursive = -1;\n            $event = $this->Attribute->Event->read();\n            if (empty($event)) {\n                throw new NotFoundException(__('Invalid Event.'));\n            }\n            if (!$this->_isSiteAdmin() && ($this->Attribute->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n                throw new UnauthorizedException(__('You do not have permission to do that.'));\n            }\n            $fails = array();\n            $success = 0;\n\n            foreach ($this->request->data['Attribute']['values'] as $value) {\n                // Check if there were problems with the file upload\n                // only keep the last part of the filename, this should prevent directory attacks\n                $filename = basename($value['name']);\n                $tmpfile = new File($value['tmp_name']);\n                if ((isset($value['error']) && $value['error'] == 0) ||\n                    (!empty($value['tmp_name']) && $value['tmp_name'] != 'none')\n                ) {\n                    if (!is_uploaded_file($tmpfile->path)) {\n                        throw new InternalErrorException(__('PHP says file was not uploaded. Are you attacking me?'));\n                    }\n                } else {\n                    $fails[] = $filename;\n                    continue;\n                }\n\n                if ($this->request->data['Attribute']['malware']) {\n                    if ($this->request->data['Attribute']['advanced']) {\n                        $result = $this->Attribute->advancedAddMalwareSample(\n                            $eventId,\n                            $this->request->data['Attribute'],\n                            $filename,\n                            $tmpfile\n                        );\n                    } else {\n                        $result = $this->Attribute->simpleAddMalwareSample(\n                            $eventId,\n                            $this->request->data['Attribute'],\n                            $filename,\n                            $tmpfile\n                        );\n                    }\n\n                    if ($result) {\n                        $success++;\n                    } else {\n                        $fails[] = $filename;\n                    }\n\n                    if (!empty($result)) {\n                        foreach ($result['Object'] as $object) {\n                            $object['distribution'] = $this->request->data['Attribute']['distribution'];\n                            if (!empty($this->request->data['sharing_group_id'])) {\n                                $object['sharing_group_id'] = $this->request->data['Attribute']['sharing_group_id'];\n                            }\n                            foreach ($object['Attribute'] as $ka => $attribute) {\n                                $object['Attribute'][$ka]['distribution'] = 5;\n                            }\n                            $this->Attribute->Object->captureObject(array('Object' => $object), $eventId, $this->Auth->user());\n                        }\n                        if (!empty($result['ObjectReference'])) {\n                            foreach ($result['ObjectReference'] as $reference) {\n                                $this->Attribute->Object->ObjectReference->smartSave($reference, $eventId);\n                            }\n                        }\n                    }\n                } else {\n                    $attribute = array(\n                            'Attribute' => array(\n                                'value' => $filename,\n                                'category' => $this->request->data['Attribute']['category'],\n                                'type' => 'attachment',\n                                'event_id' => $this->request->data['Attribute']['event_id'],\n                                'data' => base64_encode($tmpfile->read()),\n                                'comment' => $this->request->data['Attribute']['comment'],\n                                'to_ids' => 0,\n                                'distribution' => $this->request->data['Attribute']['distribution'],\n                                'sharing_group_id' => isset($this->request->data['Attribute']['sharing_group_id']) ? $this->request->data['Attribute']['sharing_group_id'] : 0,\n                            )\n                    );\n                    $this->Attribute->create();\n                    $r = $this->Attribute->save($attribute);\n                    if ($r == false) {\n                        $fails[] = $filename;\n                    } else {\n                        $success++;\n                    }\n                }\n            }\n            $message = __('The attachment(s) have been uploaded.');\n            if (!empty($fails)) {\n                $message = __('Some of the attachments failed to upload. The failed files were: %s - This can be caused by the attachments already existing in the event.', implode(', ', $fails));\n            }\n            if (empty($success)) {\n                if (empty($fails)) {\n                    $message = __('The attachment(s) could not be saved. Please contact your administrator.');\n                }\n            } else {\n                $this->Attribute->Event->id = $this->request->data['Attribute']['event_id'];\n                $this->Attribute->Event->saveField('published', 0);\n            }\n            if (empty($success) && !empty($fails)) {\n                $this->Flash->error($message);\n            } else {\n                $this->Flash->success($message);\n            }\n            if (!$this->_isRest()) {\n                $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n            }\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n        } else {\n            // set the event_id in the form\n            $this->request->data['Attribute']['event_id'] = $eventId;\n        }\n\n        $event = $this->Attribute->Event->findById($eventId);\n        if (empty($event)) {\n            throw new NotFoundException(__('Invalid Event.'));\n        }\n\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n        }\n\n        // Filter categories that contains attachment type\n        $selectedCategories = array();\n        foreach ($this->Attribute->categoryDefinitions as $category => $values) {\n            foreach ($values['types'] as $type) {\n                if ($this->Attribute->typeIsAttachment($type)) {\n                    $selectedCategories[] = $category;\n                    continue 2;\n                }\n            }\n        }\n        $categories = $this->_arrayToValuesIndexArray($selectedCategories);\n        $this->set('categories', $categories);\n\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        $this->set('zippedDefinitions', $this->Attribute->zippedDefinitions);\n        $this->set('advancedExtractionAvailable', $this->Attribute->isAdvancedExtractionAvailable());\n\n        // combobox for distribution\n        $this->set('distributionLevels', $this->Attribute->distributionLevels);\n        $this->set('info', $this->__getInfo());\n\n        $this->loadModel('SharingGroup');\n        $sgs = $this->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n\n        $this->set('currentDist', $event['Event']['distribution']);\n        $this->set('published', $event['Event']['published']);\n    }\n\n\n    // Imports the CSV threatConnect file to multiple attributes\n    public function add_threatconnect($eventId = null)\n    {\n        if ($this->request->is('post')) {\n            $this->loadModel('Event');\n            $this->Event->id = $eventId;\n            $this->Event->recursive = -1;\n            $this->Event->read();\n            if (!$this->_isSiteAdmin() && ($this->Event->data['Event']['orgc_id'] != $this->_checkOrg() || !$this->userRole['perm_modify'])) {\n                throw new UnauthorizedException(__('You do not have permission to do that.'));\n            }\n            //\n            // File upload\n            //\n            // Check if there were problems with the file upload\n            $tmpfile = new File($this->request->data['Attribute']['value']['tmp_name']);\n            if ((isset($this->request->data['Attribute']['value']['error']) && $this->request->data['Attribute']['value']['error'] == 0) ||\n                    (!empty($this->request->data['Attribute']['value']['tmp_name']) && $this->request->data['Attribute']['value']['tmp_name'] != 'none')\n            ) {\n                if (!is_uploaded_file($tmpfile->path)) {\n                    throw new InternalErrorException(__('PHP says file was not uploaded. Are you attacking me?'));\n                }\n            } else {\n                $this->Flash->error(__('There was a problem to upload the file.', true), 'default', array(), 'error');\n                $this->redirect(array('controller' => 'attributes', 'action' => 'add_threatconnect', $this->request->data['Attribute']['event_id']));\n            }\n            // verify mime type\n            $file_info = $tmpfile->info();\n            if ($file_info['mime'] != 'text/plain') {\n                $this->Flash->error('File not in CSV format.', 'default', array(), 'error');\n                $this->redirect(array('controller' => 'attributes', 'action' => 'add_threatconnect', $this->request->data['Attribute']['event_id']));\n            }\n\n            // parse uploaded csv file\n            $filename = $tmpfile->path;\n            $header = null;\n            $entries = array();\n            if (($handle = fopen($filename, 'r')) !== false) {\n                while (($row = fgetcsv($handle, 0, ',', '\"')) !== false) {\n                    if (!$header) {\n                        $header = $row;\n                    } else {\n                        $entries[] = array_combine($header, $row);\n                    }\n                }\n                fclose($handle);\n            }\n            // verify header of the file (first row)\n            $required_headers = array('Type', 'Value', 'Confidence', 'Description', 'Source');\n\n            // TODO i18n\n            if (count(array_intersect($header, $required_headers)) != count($required_headers)) {\n                $this->Flash->error('Incorrect ThreatConnect headers. The minimum required headers are: '.implode(',', $required_headers), 'default', array(), 'error');\n                $this->redirect(array('controller' => 'attributes', 'action' => 'add_threatconnect', $this->request->data['Attribute']['event_id']));\n            }\n\n            //\n            // import attributes\n            //\n            $attributes = array();  // array with all the attributes we're going to save\n            foreach ($entries as $entry) {\n                $attribute = array();\n                $attribute['event_id'] = $this->request->data['Attribute']['event_id'];\n                $attribute['value'] = $entry['Value'];\n                $attribute['to_ids'] = ($entry['Confidence'] > 51) ? 1 : 0; // To IDS if high confidence\n                $attribute['comment'] = $entry['Description'];\n                $attribute['distribution'] = '3'; // 'All communities'\n                if (Configure::read('MISP.default_attribute_distribution') != null) {\n                    if (Configure::read('MISP.default_attribute_distribution') === 'event') {\n                        $attribute['distribution'] = $this->Event->data['Event']['distribution'];\n                    } else {\n                        $attribute['distribution'] = Configure::read('MISP.default_attribute_distribution');\n                    }\n                }\n                switch ($entry['Type']) {\n                    case 'Address':\n                        $attribute['category'] = 'Network activity';\n                        $attribute['type'] = 'ip-dst';\n                        break;\n                    case 'Host':\n                        $attribute['category'] = 'Network activity';\n                        $attribute['type'] = 'domain';\n                        break;\n                    case 'EmailAddress':\n                        $attribute['category'] = 'Payload delivery';\n                        $attribute['type'] = 'email-src';\n                        break;\n                    case 'File':\n                        $attribute['category'] = 'Artifacts dropped';\n                        $attribute['value'] = strtolower($attribute['value']);\n                        if (preg_match(\"#^[0-9a-f]{32}$#\", $attribute['value'])) {\n                            $attribute['type'] = 'md5';\n                        } elseif (preg_match(\"#^[0-9a-f]{40}$#\", $attribute['value'])) {\n                            $attribute['type'] = 'sha1';\n                        } elseif (preg_match(\"#^[0-9a-f]{64}$#\", $attribute['value'])) {\n                            $attribute['type'] = 'sha256';\n                        } else {\n                            // do not keep attributes that do not have a match\n                            $attribute=null;\n                        }\n                        break;\n                    case 'URL':\n                        $attribute['category'] = 'Network activity';\n                        $attribute['type'] = 'url';\n                        break;\n                    default:\n                        // do not keep attributes that do not have a match\n                        $attribute=null;\n                }\n                // add attribute to the array that will be saved\n                if ($attribute) {\n                    $attributes[] = $attribute;\n                }\n            }\n\n            //\n            // import source info:\n            //\n            // 1/ iterate over all the sources, unique\n            // 2/ add uniques as 'Internal reference'\n            // 3/ if url format -> 'link'\n            //    else 'comment'\n            $references = array();\n            foreach ($entries as $entry) {\n                if (empty($entry['Source'])) {\n                    continue;\n                }\n                $references[$entry['Source']] = true;\n            }\n            $references = array_keys($references);\n            // generate the Attributes\n            foreach ($references as $reference) {\n                $attribute = array();\n                $attribute['event_id'] = $this->request->data['Attribute']['event_id'];\n                $attribute['category'] = 'Internal reference';\n                if (preg_match('#^(http|ftp)(s)?\\:\\/\\/((([a-z|0-9|\\-]{1,25})(\\.)?){2,7})($|/.*$)#i', $reference)) {\n                    $attribute['type'] = 'link';\n                } else {\n                    $attribute['type'] = 'comment';\n                }\n                $attribute['value'] = $reference;\n                $attribute['distribution'] = 3; // 'All communities'\n                // add attribute to the array that will be saved\n                $attributes[] = $attribute;\n            }\n\n            //\n            // finally save all the attributes at once, and continue if there are validation errors\n            //\n\n            $results = array('successes' => 0, 'fails' => 0);\n            foreach ($attributes as $attribute) {\n                $this->Attribute->create();\n                $result = $this->Attribute->save($attribute);\n                if (!$result) {\n                    $results['fails']++;\n                } else {\n                    $results['successes']++;\n                }\n            }\n            // data imported (with or without errors)\n            // remove the published flag from the event\n            $this->loadModel('Event');\n            $this->Event->id = $this->request->data['Attribute']['event_id'];\n            $this->Event->saveField('published', 0);\n\n            // everything is done, now redirect to event view\n            $message = __('The ThreatConnect data has been imported.');\n            if ($results['successes'] != 0) {\n                $flashType = 'success';\n                $temp = sprintf(__('%s entries imported.'), $results['successes']);\n                $message .= ' ' . $temp;\n            }\n            if ($results['fails'] != 0) {\n                $temp = sprintf(__('%s entries could not be imported.'), $results['fails']);\n                $message .= ' ' . $temp;\n            }\n            $this->Flash->{empty($flashType) ? 'error' : $flashType}($message);\n            $this->redirect(array('controller' => 'events', 'action' => 'view', $this->request->data['Attribute']['event_id']));\n        } else {\n            // set the event_id in the form\n            $this->request->data['Attribute']['event_id'] = $eventId;\n        }\n\n        // form not submitted, show page\n        $this->loadModel('Event');\n        $events = $this->Event->findById($eventId);\n        $this->set('published', $events['Event']['published']);\n    }\n\n\n    public function edit($id = null)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            return $this->RestResponse->describe('Attributes', 'edit', false, $this->response->type());\n        }\n        if (Validation::uuid($id)) {\n            $temp = $this->Attribute->find('first', array(\n                'recursive' => -1,\n                'fields' => array('Attribute.id', 'Attribute.uuid'),\n                'conditions' => array('Attribute.uuid' => $id)\n            ));\n            if ($temp == null) {\n                throw new NotFoundException('Invalid attribute');\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $this->Attribute->id = $id;\n        $date = new DateTime();\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $conditions = array('conditions' => array('Attribute.id' => $id), 'withAttachments' => true, 'flatten' => true);\n        $conditions['includeAllTags'] = false;\n        $conditions['includeAttributeUuid'] = true;\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $conditions);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $this->Attribute->data = $attribute[0];\n        $event = $this->Attribute->Event->find('first', array(\n            'conditions' =>\n                array(\n                    'Event.id' => $attribute[0]['Attribute']['event_id']\n                ),\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.user_id')\n        ));\n        if ($this->Attribute->data['Attribute']['deleted']) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        if (!$this->_isSiteAdmin()) {\n            if ($this->Attribute->data['Event']['orgc_id'] == $this->Auth->user('org_id')\n                && (($this->userRole['perm_modify'] && $event['Event']['user_id'] != $this->Auth->user('id'))\n                    || $this->userRole['perm_modify_org'])) {\n                // Allow the edit\n            } else {\n                $message = __('You do not have permission to do that.');\n                if ($this->_isRest()) {\n                    throw new ForbiddenException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect(array('controller' => 'events', 'action' => 'index'));\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $this->Attribute->data['Attribute']['event_id']);\n        }\n        $eventId = $this->Attribute->data['Attribute']['event_id'];\n        if ('attachment' == $this->Attribute->data['Attribute']['type'] ||\n            'malware-sample' == $this->Attribute->data['Attribute']['type']) {\n            $this->set('attachment', true);\n        } else {\n            $this->set('attachment', false);\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['Attribute'])) {\n                $this->request->data = array('Attribute' => $this->request->data);\n            }\n            if (isset($this->request->data['Attribute']['distribution']) && $this->request->data['Attribute']['distribution'] == 4) {\n                $sg = $this->Attribute->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1, $this->request->data['Attribute']['sharing_group_id']);\n                if (empty($sg)) {\n                    throw new MethodNotAllowedException(__('Invalid Sharing Group or not authorised.'));\n                }\n            }\n            $existingAttribute = $this->Attribute->findByUuid($this->Attribute->data['Attribute']['uuid']);\n            // check if the attribute has a timestamp already set (from a previous instance that is trying to edit via synchronisation)\n            // check which attribute is newer\n            if (count($existingAttribute) && !$existingAttribute['Attribute']['deleted']) {\n                $this->request->data['Attribute']['id'] = $existingAttribute['Attribute']['id'];\n                $dateObj = new DateTime();\n                $skipTimeCheck = false;\n                if (!isset($this->request->data['Attribute']['timestamp'])) {\n                    $this->request->data['Attribute']['timestamp'] = $dateObj->getTimestamp();\n                    $skipTimeCheck = true;\n                }\n                if ($skipTimeCheck || $this->request->data['Attribute']['timestamp'] > $existingAttribute['Attribute']['timestamp']) {\n                    $recoverFields = array('value', 'to_ids', 'distribution', 'category', 'type', 'comment', 'first_seen', 'last_seen');\n                    foreach ($recoverFields as $rF) {\n                        if (!isset($this->request->data['Attribute'][$rF])) {\n                            $this->request->data['Attribute'][$rF] = $existingAttribute['Attribute'][$rF];\n                        }\n                    }\n                    // carry on with adding this attribute - Don't forget! if orgc!=user org, create shadow attribute, not attribute!\n                } else {\n                    // the old one is newer or the same, replace the request's attribute with the old one\n                    throw new MethodNotAllowedException(__('Attribute could not be saved: Attribute in the request not newer than the local copy.'));\n                }\n            } else {\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    throw new NotFoundException(__('Invalid attribute.'));\n                } else {\n                    $this->Flash->error(__('Invalid attribute.'));\n                    $this->redirect(array('controller' => 'events', 'action' => 'index'));\n                }\n            }\n            $this->loadModel('Event');\n            $event = $this->Attribute->Event->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Event.id' => $eventId)\n            ));\n            if (empty($event)) {\n                throw new NotFoundException(__('Invalid Event.'));\n            }\n            if ($existingAttribute['Attribute']['object_id']) {\n                $result = $this->Attribute->save($this->request->data, array('Attribute.category', 'Attribute.value', 'Attribute.to_ids', 'Attribute.comment', 'Attribute.distribution', 'Attribute.sharing_group_id'));\n                $this->Attribute->Object->updateTimestamp($existingAttribute['Attribute']['object_id']);\n            } else {\n                $result = $this->Attribute->save($this->request->data);\n                if ($this->request->is('ajax')) {\n                    $this->autoRender = false;\n                    if ($result) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Attribute updated.')),'status' => 200, 'type' => 'json'));\n                    } else {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Could not update attribute, reason: ' . json_encode($this->Attribute->validationErrors))),'status' => 200, 'type' => 'json'));\n                    }\n                }\n            }\n            if ($result) {\n                $this->Flash->success(__('The attribute has been saved'));\n                // remove the published flag from the event\n                $this->Event->unpublishEvent($eventId);\n                if (!empty($this->Attribute->data['Attribute']['object_id'])) {\n                    $object = $this->Attribute->Object->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('Object.id' => $this->Attribute->data['Attribute']['object_id'])\n                    ));\n                    if (!empty($object)) {\n                        $object['Object']['timestamp'] = $date->getTimestamp();\n                        $this->Attribute->Object->save($object);\n                    }\n                }\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    $saved_attribute = $this->Attribute->find('first', array(\n                            'conditions' => array('id' => $this->Attribute->id),\n                            'recursive' => -1,\n                            'fields' => $this->Attribute->defaultFields\n                    ));\n                    $response = array('response' => array('Attribute' => $saved_attribute['Attribute']));\n                    $this->set('response', $response);\n                    if ($this->response->type() === 'application/json') {\n                        $this->render('/Attributes/json/view');\n                    } else {\n                        $this->render('view');\n                    }\n                    return;\n                } else {\n                    $this->redirect(array('controller' => 'events', 'action' => 'view', $eventId));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Attributes', 'edit', false, $this->Attribute->validationErrors);\n                } else {\n                    if (!CakeSession::read('Message.flash')) {\n                        $this->Flash->error(__('The attribute could not be saved. Please, try again.'));\n                    } else {\n                        $this->request->data = $this->Attribute->read(null, $id);\n                    }\n                }\n            }\n        } else {\n            $this->request->data = $this->Attribute->read(null, $id);\n        }\n        $this->set('attribute', $this->request->data);\n        if (!empty($this->request->data['Attribute']['object_id'])) {\n            $this->set('objectAttribute', true);\n        } else {\n            $this->set('objectAttribute', false);\n        }\n        // enabling / disabling the distribution field in the edit view based on whether user's org == orgc in the event\n        $this->loadModel('Event');\n        $this->Event->id = $eventId;\n        $this->set('event_id', $eventId);\n        $this->Event->read();\n        $this->set('published', $this->Event->data['Event']['published']);\n        // needed for RBAC\n        // combobox for types\n        $types = array_keys($this->Attribute->typeDefinitions);\n        foreach ($types as $key => $value) {\n            if (in_array($value, array('malware-sample', 'attachment'))) {\n                unset($types[$key]);\n            }\n        }\n        $types = $this->_arrayToValuesIndexArray($types);\n        $this->set('types', $types);\n        // combobox for categories\n        $this->set('currentDist', $this->Event->data['Event']['distribution']);\n\n        $this->loadModel('SharingGroup');\n        $sgs = $this->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $this->set('sharingGroups', $sgs);\n\n        $distributionLevels = $this->Attribute->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n\n        foreach ($this->Attribute->categoryDefinitions as $key => $value) {\n            $info['category'][$key] = array('key' => $key, 'desc' => isset($value['formdesc'])? $value['formdesc'] : $value['desc']);\n        }\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $info['type'][$key] = array('key' => $key, 'desc' => isset($value['formdesc'])? $value['formdesc'] : $value['desc']);\n        }\n        foreach ($distributionLevels as $key => $value) {\n            $info['distribution'][$key] = array('key' => $value, 'desc' => $this->Attribute->distributionDescriptions[$key]['formdesc']);\n        }\n        $this->set('info', $info);\n        $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $categoryDefinitions = $this->Attribute->categoryDefinitions;\n        $categories = array_keys($this->Attribute->categoryDefinitions);\n        $categories = $this->_arrayToValuesIndexArray($categories);\n        if (!empty($this->request->data['Attribute']['object_id'])) {\n            foreach ($categoryDefinitions as $k => $v) {\n                if (!in_array($this->request->data['Attribute']['type'], $v['types'])) {\n                    unset($categoryDefinitions[$k]);\n                }\n            }\n            foreach ($categories as $k => $v) {\n                if (!isset($categoryDefinitions[$k])) {\n                    unset($categories[$k]);\n                }\n            }\n        }\n        $this->set('categories', $categories);\n        $this->set('categoryDefinitions', $categoryDefinitions);\n        $this->set('compositeTypes', $this->Attribute->getCompositeTypes());\n        $this->set('action', $this->action);\n        $this->loadModel('Noticelist');\n        $notice_list_triggers = $this->Noticelist->getTriggerData();\n        $this->set('notice_list_triggers', json_encode($notice_list_triggers, true));\n        $this->render('add');\n    }\n\n    // ajax edit - post a single edited field and this method will attempt to save it and return a json with the validation errors if they occur.\n    public function editField($id)\n    {\n        if (Validation::uuid($id)) {\n            $this->Attribute->recursive = -1;\n            $temp = $this->Attribute->findByUuid($id);\n            if ($temp == null) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid event id.'));\n        }\n        if ((!$this->request->is('post') && !$this->request->is('put'))) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            return new CakeResponse(array('body'=> json_encode(array('fail' => false, 'errors' => 'Invalid attribute')), 'status'=>200, 'type' => 'json'));\n        }\n        $conditions = array('conditions' => array('Attribute.id' => $id), 'withAttachments' => true, 'flatten' => true);\n        $conditions['includeAllTags'] = false;\n        $conditions['includeAttributeUuid'] = true;\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $conditions);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $attribute = $attribute[0];\n        $this->Attribute->data = $attribute;\n\n        if (!$this->_isSiteAdmin()) {\n            if ($this->Attribute->data['Event']['orgc_id'] == $this->Auth->user('org_id')\n            && (($this->userRole['perm_modify'] && $this->Attribute->data['Event']['user_id'] != $this->Auth->user('id'))\n            || $this->userRole['perm_modify_org'])) {\n                // Allow the edit\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('fail' => false, 'errors' => 'You do not have permission to do that')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $this->Attribute->data['Attribute']['event_id']);\n        }\n        $validFields = array('value', 'category', 'type', 'comment', 'to_ids', 'distribution', 'first_seen', 'last_seen');\n        $changed = false;\n        if (empty($this->request->data['Attribute'])) {\n            $this->request->data = array('Attribute' => $this->request->data);\n            if (empty($this->request->data['Attribute'])) {\n                throw new MethodNotAllowedException(__('Invalid input.'));\n            }\n        }\n        foreach ($this->request->data['Attribute'] as $changedKey => $changedField) {\n            if (!in_array($changedKey, $validFields)) {\n                throw new MethodNotAllowedException(__('Invalid field.'));\n            }\n            if ($attribute['Attribute'][$changedKey] == $changedField) {\n                $this->autoRender = false;\n                return new CakeResponse(array('body'=> json_encode(array('errors'=> array('value' => 'nochange'))), 'status'=>200, 'type' => 'json'));\n            }\n            $attribute['Attribute'][$changedKey] = $changedField;\n            $changed = true;\n        }\n        if (!$changed) {\n            return new CakeResponse(array('body'=> json_encode(array('errors'=> array('value' => 'nochange'))), 'status'=>200, 'type' => 'json'));\n        }\n        $date = new DateTime();\n        $attribute['Attribute']['timestamp'] = $date->getTimestamp();\n        if ($this->Attribute->save($attribute)) {\n            $event = $this->Attribute->Event->find('first', array(\n                'recursive' => -1,\n                'fields' => array('id', 'published', 'timestamp', 'info', 'uuid'),\n                'conditions' => array(\n                    'id' => $attribute['Attribute']['event_id'],\n            )));\n            $event['Event']['timestamp'] = $date->getTimestamp();\n            $event['Event']['published'] = 0;\n            $this->Attribute->Event->save($event, array('fieldList' => array('published', 'timestamp', 'info')));\n            if ($attribute['Attribute']['object_id'] != 0) {\n                $this->Attribute->Object->updateTimestamp($attribute['Attribute']['object_id'], $date->getTimestamp());\n            }\n            $this->autoRender = false;\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Field updated.', 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n        } else {\n            $this->autoRender = false;\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $this->Attribute->validationErrors)), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function view($id)\n    {\n        if (Validation::uuid($id)) {\n            $temp = $this->Attribute->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Attribute.uuid' => $id),\n                'fields' => array('Attribute.id', 'Attribute.uuid')\n            ));\n            if (empty($temp)) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException(__('Invalid attribute id.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException('Invalid attribute');\n        }\n        $conditions = array('conditions' => array('Attribute.id' => $id), 'withAttachments' => true, 'flatten' => true);\n        $conditions['includeAllTags'] = false;\n        $conditions['includeAttributeUuid'] = true;\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $conditions);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $attribute = $attribute[0];\n        if ($this->_isRest()) {\n            if (isset($attribute['AttributeTag'])) {\n                foreach ($attribute['AttributeTag'] as $k => $tag) {\n                    $attribute['Attribute']['Tag'][$k] = $tag['Tag'];\n                }\n            }\n            unset($attribute['Attribute']['value1']);\n            unset($attribute['Attribute']['value2']);\n            $this->set('Attribute', $attribute['Attribute']);\n            $this->set('_serialize', array('Attribute'));\n        } else {\n            $this->redirect('/events/view/' . $attribute['Attribute']['event_id']);\n        }\n    }\n\n    public function viewPicture($id, $thumbnail=false)\n    {\n        if (Validation::uuid($id)) {\n            $conditions = array('Attribute.uuid' => $id);\n        } elseif (is_numeric($id)) {\n            $conditions = array('Attribute.id' => $id);\n        } else {\n            throw new NotFoundException(__('Invalid attribute id.'));\n        }\n\n        $conditions['Attribute.type'] = 'attachment';\n        $options = array(\n            'conditions' => $conditions,\n            'includeAllTags' => false,\n            'includeAttributeUuid' => true,\n            'flatten' => true,\n        );\n\n        if ($this->_isRest()) {\n            $options['withAttachments'] = true;\n        }\n\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $options);\n        if (empty($attribute)) {\n            throw new MethodNotAllowedException('Invalid attribute');\n        }\n        $attribute = $attribute[0];\n\n        if (!$this->Attribute->isImage($attribute['Attribute'])) {\n            throw new NotFoundException(\"Attribute is not an image.\");\n        }\n\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($attribute['Attribute']['data'], $this->response->type());\n        } else {\n            $width = isset($this->request->params['named']['width']) ? $this->request->params['named']['width'] : 200;\n            $height = isset($this->request->params['named']['height']) ? $this->request->params['named']['height'] : 200;\n            $imageData = $this->Attribute->getPictureData($attribute, $thumbnail, $width, $height);\n            $extension = pathinfo($attribute['Attribute']['value'], PATHINFO_EXTENSION);\n            return new CakeResponse(array('body' => $imageData, 'type' => strtolower($extension)));\n        }\n    }\n\n    public function delete($id, $hard = false)\n    {\n        if (Validation::uuid($id)) {\n            $this->Attribute->recursive = -1;\n            $temp = $this->Attribute->findByUuid($id);\n            if ($temp == null) {\n                throw new NotFoundException('Invalid attribute');\n            }\n            $id = $temp['Attribute']['id'];\n        } elseif (!is_numeric($id)) {\n            throw new NotFoundException('Invalid attribute');\n        }\n        if (isset($this->params['named']['hard'])) {\n            $hard = $this->params['named']['hard'];\n        }\n        if (isset($this->request->data['hard'])) {\n            $hard = $this->request->data['hard'];\n        }\n        $this->set('id', $id);\n        $conditions = array('id' => $id);\n        if (!$hard) {\n            $conditions['deleted'] = 0;\n        }\n        $attribute = $this->Attribute->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1,\n                'fields' => array('id', 'event_id'),\n        ));\n        if (empty($attribute)) {\n            throw new NotFoundException('Invalid attribute');\n        }\n        if ($this->request->is('ajax')) {\n            if ($this->request->is('post')) {\n                if ($this->Attribute->deleteAttribute($id, $this->Auth->user(), $hard)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Attribute deleted.')), 'status'=>200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Attribute was not deleted.')), 'status'=>200, 'type' => 'json'));\n                }\n            } else {\n                $this->set('hard', $hard);\n                $this->set('event_id', $attribute['Attribute']['event_id']);\n                $this->render('ajax/attributeConfirmationForm');\n            }\n        } else {\n            if (!$this->request->is('post') && !$this->request->is('delete')) {\n                throw new MethodNotAllowedException(__('This function is only accessible via POST requests.'));\n            }\n            if ($this->Attribute->deleteAttribute($id, $this->Auth->user(), $hard)) {\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    $this->set('message', 'Attribute deleted.');\n                    $this->set('_serialize', array('message'));\n                } else {\n                    $this->Flash->success(__('Attribute deleted'));\n                    $this->redirect($this->referer());\n                }\n            } else {\n                if ($this->_isRest() || $this->response->type() === 'application/json') {\n                    throw new Exception(__('Attribute was not deleted'));\n                } else {\n                    $this->Flash->error(__('Attribute was not deleted'));\n                    $this->redirect(array('action' => 'index'));\n                }\n                $this->Flash->success(__('Attribute deleted'));\n            }\n        }\n    }\n\n\n    public function restore($id = null)\n    {\n        $attribute = $this->Attribute->find('first', array(\n                'conditions' => array('Attribute.id' => $id),\n                'recursive' => -1,\n                'fields' => array('Attribute.id', 'Attribute.event_id'),\n                'contain' => array(\n                    'Event' => array(\n                        'fields' => array('Event.orgc_id')\n                    )\n                )\n        ));\n        if (empty($attribute) || !$this->userRole['perm_site_admin'] && $this->Auth->user('org_id') != $attribute['Event']['orgc_id']) {\n            if ($this->request->is('ajax')) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Attribute')), 'type' => 'json', 'status'=>200));\n            } else {\n                throw new MethodNotAllowedException(__('Invalid Attribute'));\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $attribute['Attribute']['event_id']);\n        }\n        if ($this->request->is('ajax')) {\n            if ($this->request->is('post')) {\n                $result = $this->Attribute->restore($id, $this->Auth->user());\n                if ($result === true) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Attribute restored.')), 'type' => 'json' ,'status'=>200));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $result)), 'type' => 'json', 'status'=>200));\n                }\n            } else {\n                $this->set('id', $id);\n                $this->set('event_id', $attribute['Attribute']['event_id']);\n                $this->render('ajax/attributeRestorationForm');\n            }\n        } else {\n            if (!$this->request->is('post') && !$this->_isRest()) {\n                throw new MethodNotAllowedException();\n            }\n            if ($this->Attribute->restore($id, $this->Auth->user())) {\n                $this->Attribute->__alterAttributeCount($this->data['Attribute']['event_id']);\n                $this->redirect(array('action' => 'view', $id));\n            } else {\n                throw new NotFoundException(__('Could not restore the attribute'));\n            }\n        }\n    }\n\n    public function deleteSelected($id = false, $hard = false)\n    {\n        if (!$this->request->is('post')) {\n            if ($this->request->is('get')) {\n                return $this->RestResponse->describe('Attributes', 'deleteSelected', false, $this->response->type());\n            }\n            throw new MethodNotAllowedException(__('This function is only accessible via POST requests.'));\n        }\n        // get a json object with a list of attribute IDs to be deleted\n        // check each of them and return a json object with the successful deletes and the failed ones.\n        if ($this->_isRest()) {\n            if (empty($this->request->data['Attribute'])) {\n                $this->request->data['Attribute'] = $this->request->data;\n            }\n            if (isset($this->request->data['Attribute']['id'])) {\n                $ids = $this->request->data['Attribute']['id'];\n            } else {\n                $ids = $this->request->data['Attribute'];\n            }\n            if (empty($id) && isset($this->request->data['Attribute']['event_id']) && is_numeric($this->request->data['Attribute']['event_id'])) {\n                $id = $this->request->data['Attribute']['event_id'];\n            }\n        } else {\n            $ids = json_decode($this->request->data['Attribute']['ids_delete']);\n        }\n        if (empty($id)) {\n            throw new MethodNotAllowedException(__('No event ID set.'));\n        }\n        if (!$this->_isSiteAdmin()) {\n            $event = $this->Attribute->Event->find('first', array(\n                    'conditions' => array('id' => $id),\n                    'recursive' => -1,\n                    'fields' => array('id', 'orgc_id', 'user_id')\n            ));\n            if ($event['Event']['orgc_id'] != $this->Auth->user('org_id') || (!$this->userRole['perm_modify_org'] && !($this->userRole['perm_modify'] && $event['Event']['user_id'] == $this->Auth->user('id')))) {\n                throw new MethodNotAllowedException(__('Invalid Event.'));\n            }\n        }\n        if (empty($ids)) {\n            $ids = -1;\n        }\n        $conditions = array('id' => $ids, 'event_id' => $id);\n        if ($ids == 'all') {\n            unset($conditions['id']);\n        }\n        if ($hard || ($this->_isRest() && empty($this->request->data['Attribute']['allow_hard_delete']))) {\n            $conditions['deleted'] = 0;\n        }\n        // find all attributes from the ID list that also match the provided event ID.\n        $attributes = $this->Attribute->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'fields' => array('id', 'event_id', 'deleted')\n        ));\n        if ($ids == 'all') {\n            $ids = array();\n            foreach ($attributes as $attribute) {\n                $ids[] = $attribute['Attribute']['id'];\n            }\n        }\n        if (empty($attributes)) {\n            throw new NotFoundException(__('No matching attributes found.'));\n        }\n        $successes = array();\n        foreach ($attributes as $a) {\n            if ($hard) {\n                if ($this->Attribute->deleteAttribute($a['Attribute']['id'], $this->Auth->user(), true)) {\n                    $successes[] = $a['Attribute']['id'];\n                }\n            } else {\n                if ($this->Attribute->deleteAttribute($a['Attribute']['id'], $this->Auth->user(), $a['Attribute']['deleted'] == 1 ? true : false)) {\n                    $successes[] = $a['Attribute']['id'];\n                }\n            }\n        }\n        $fails = array_diff($ids, $successes);\n        $this->autoRender = false;\n        if (count($fails) == 0 && count($successes) > 0) {\n            $message = count($successes) . ' attribute' . (count($successes) != 1 ? 's' : '') . ' deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Attributes', 'deleteSelected', $id, false, $message);\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message)), 'status'=>200, 'type' => 'json'));\n        } else {\n            $message = count($successes) . ' attribute' . (count($successes) != 1 ? 's' : '') . ' deleted, but ' . count($fails) . ' attribute' . (count($fails) != 1 ? 's' : '') . ' could not be deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Attributes', 'deleteSelected', false, $message);\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $message)), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function editSelected($id, $selectedAttributeIds = \"[]\")\n    {\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException(__('This method can only be accessed via AJAX.'));\n        }\n        if ($this->request->is('post')) {\n            $event = $this->Attribute->Event->find('first', array(\n                'conditions' => array('id' => $id),\n                'recursive' => -1,\n                'fields' => array('id', 'orgc_id', 'org_id', 'user_id', 'published', 'timestamp', 'info', 'uuid')\n            ));\n            if (!$this->_isSiteAdmin()) {\n                if ($event['Event']['orgc_id'] != $this->Auth->user('org_id') || (!$this->userRole['perm_modify_org'] && !($this->userRole['perm_modify'] && $event['user_id'] == $this->Auth->user('id')))) {\n                    throw new MethodNotAllowedException(__('You are not authorized to edit this event.'));\n                }\n            }\n            $attribute_ids = json_decode($this->request->data['Attribute']['attribute_ids']);\n            $attributes = $this->Attribute->find('all', array(\n                'conditions' => array(\n                    'id' => $attribute_ids,\n                    'event_id' => $id,\n                ),\n                'recursive' => -1,\n            ));\n\n            $tags_ids_remove = json_decode($this->request->data['Attribute']['tags_ids_remove']);\n            $tags_ids_add = json_decode($this->request->data['Attribute']['tags_ids_add']);\n            $clusters_ids_remove = json_decode($this->request->data['Attribute']['clusters_ids_remove']);\n            $clusters_ids_add = json_decode($this->request->data['Attribute']['clusters_ids_add']);\n            $changeInTagOrCluster = ($tags_ids_remove !== null && count($tags_ids_remove) > 0)\n                || ($tags_ids_add === null || count($tags_ids_add) > 0)\n                || ($clusters_ids_remove === null || count($clusters_ids_remove) > 0)\n                || ($clusters_ids_add === null || count($clusters_ids_add) > 0);\n\n            $changeInAttribute = ($this->request->data['Attribute']['to_ids'] != 2) || ($this->request->data['Attribute']['distribution'] != 6) || ($this->request->data['Attribute']['comment'] != null);\n\n            if (!$changeInAttribute && !$changeInTagOrCluster) {\n                $this->autoRender = false;\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true)), 'status' => 200, 'type' => 'json'));\n            }\n\n            if ($this->request->data['Attribute']['to_ids'] != 2) {\n                foreach ($attributes as $key => $attribute) {\n                    $attributes[$key]['Attribute']['to_ids'] = ($this->request->data['Attribute']['to_ids'] == 0 ? false : true);\n                }\n            }\n\n            if ($this->request->data['Attribute']['distribution'] != 6) {\n                foreach ($attributes as $key => $attribute) {\n                    $attributes[$key]['Attribute']['distribution'] = $this->request->data['Attribute']['distribution'];\n                }\n                if ($this->request->data['Attribute']['distribution'] == 4) {\n                    foreach ($attributes as $key => $attribute) {\n                        $attributes[$key]['Attribute']['sharing_group_id'] = $this->request->data['Attribute']['sharing_group_id'];\n                    }\n                } else {\n                    foreach ($attributes as $key => $attribute) {\n                        $attributes[$key]['Attribute']['sharing_group_id'] = 0;\n                    }\n                }\n            }\n\n            if ($this->request->data['Attribute']['comment'] != null) {\n                foreach ($attributes as $key => $attribute) {\n                    $attributes[$key]['Attribute']['comment'] = $this->request->data['Attribute']['comment'];\n                }\n            }\n\n            $date = new DateTime();\n            $timestamp = $date->getTimestamp();\n            foreach ($attributes as $key => $attribute) {\n                $attributes[$key]['Attribute']['timestamp'] = $timestamp;\n            }\n\n            if ($changeInAttribute) {\n                if ($this->request->data['Attribute']['is_proposal']) { // create ShadowAttributes instead\n                    $shadowAttributes = array();\n                    foreach ($attributes as $attribute) {\n                        $shadowAttribute['ShadowAttribute'] = $attribute['Attribute'];\n                        unset($shadowAttribute['ShadowAttribute']['id']);\n                        $shadowAttribute['ShadowAttribute']['email'] = $this->Auth->user('email');\n                        $shadowAttribute['ShadowAttribute']['org_id'] = $this->Auth->user('org_id');\n                        $shadowAttribute['ShadowAttribute']['event_uuid'] = $event['Event']['uuid'];\n                        $shadowAttribute['ShadowAttribute']['event_org_id'] = $event['Event']['org_id'];\n                        $shadowAttribute['ShadowAttribute']['old_id'] = $attribute['Attribute']['id'];\n                        $shadowAttributes[] = $shadowAttribute;\n                    }\n                    $saveSuccess = $this->Attribute->ShadowAttribute->saveMany($shadowAttributes);\n                } else {\n                    $saveSuccess = $this->Attribute->saveMany($attributes);\n                }\n                if ($saveSuccess) {\n                    if (!$this->_isRest()) {\n                        $this->Attribute->Event->insertLock($this->Auth->user(), $id);\n                    }\n                    $event['Event']['timestamp'] = $date->getTimestamp();\n                    $event['Event']['published'] = 0;\n                    $this->Attribute->Event->save($event, array('fieldList' => array('published', 'timestamp', 'info', 'id')));\n                    $this->autoRender = false;\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true)), 'status' => 200, 'type' => 'json'));\n                } else {\n                    $this->autoRender = false;\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'validationErrors' => $this->Attribute->validationErrors)), 'status' => 200, 'type' => 'json'));\n                }\n            }\n\n            // apply changes in tag/cluster\n            foreach ($attributes as $key => $attribute) {\n                foreach ($tags_ids_remove as $t => $tag_id) {\n                    $this->removeTag($attributes[$key]['Attribute']['id'], $tag_id);\n                }\n                foreach ($tags_ids_add as $t => $tag_id) {\n                    $this->addTag($attributes[$key]['Attribute']['id'], $tag_id);\n                }\n                $this->Galaxy = ClassRegistry::init('Galaxy');\n                foreach ($clusters_ids_remove as $c => $cluster_id) {\n                    $this->Galaxy->detachCluster($this->Auth->user(), 'attribute', $attributes[$key]['Attribute']['id'], $cluster_id);\n                }\n                foreach ($clusters_ids_add as $c => $cluster_id) {\n                    $this->Galaxy->attachCluster($this->Auth->user(), 'attribute', $attributes[$key]['Attribute']['id'], $cluster_id);\n                }\n            }\n\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true)), 'status' => 200, 'type' => 'json'));\n\n        } else {\n            if (!isset($id)) {\n                throw new MethodNotAllowedException(__('No event ID provided.'));\n            }\n            $selectedAttributeIds = json_decode($selectedAttributeIds);\n            if ($selectedAttributeIds === null) {\n                $selectedAttributeIds = array();\n            }\n\n            // tags to remove\n            $tags = $this->Attribute->AttributeTag->getAttributesTags($this->Auth->user(), $id, $selectedAttributeIds);\n            $tagItemsRemove = array();\n            foreach ($tags as $k => $tag) {\n                $tagName = $tag['name'];\n                $tagItemsRemove[] = array(\n                    'name' => $tagName,\n                    'value' => $tag['id'],\n                    'template' => array(\n                        'name' => array(\n                            'name' => $tagName,\n                            'label' => array(\n                                'background' => isset($tag['colour']) ? $tag['colour'] : '#ffffff'\n                            )\n                        ),\n                    )\n                );\n            }\n            unset($tags);\n\n            // clusters to remove\n            $clusters = $this->Attribute->AttributeTag->getAttributesClusters($this->Auth->user(), $id, $selectedAttributeIds);\n            $clusterItemsRemove = array();\n            foreach ($clusters as $k => $cluster) {\n                $name = $cluster['value'];\n                $optionName = $cluster['value'];\n                $synom = $cluster['synonyms_string'] !== '' ? ' (' . $cluster['synonyms_string'] . ')' : '';\n                $optionName .= $synom;\n\n                $temp = array(\n                    'name' => $optionName,\n                    'value' => $cluster['id'],\n                    'template' => array(\n                        'name' => $name,\n                        'infoExtra' => $cluster['description']\n                    )\n                );\n                if ($cluster['synonyms_string'] !== '') {\n                    $temp['infoContextual'] = __('Synonyms: ') . $cluster['synonyms_string'];\n                }\n                $clusterItemsRemove[] = $temp;\n            }\n            unset($clusters);\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions = array('Tag.org_id' => array(0, $this->Auth->user('org_id')));\n                $conditions = array('Tag.user_id' => array(0, $this->Auth->user('id')));\n                $conditions = array('Tag.hide_tag' => 0);\n            }\n            $allTags = $this->Attribute->AttributeTag->Tag->find('all', array('conditions' => $conditions, 'recursive' => -1));\n            $tags = array();\n            foreach ($allTags as $i => $tag) {\n                $tags[$tag['Tag']['id']] = $tag['Tag'];\n            }\n            unset($allTags);\n            $tagItemsAdd = array();\n            foreach ($tags as $k => $tag) {\n                $tagName = $tag['name'];\n                $tagItemsAdd[] = array(\n                    'name' => $tagName,\n                    'value' => $tag['id'],\n                    'template' => array(\n                        'name' => array(\n                            'name' => $tagName,\n                            'label' => array(\n                                'background' => isset($tag['colour']) ? $tag['colour'] : '#ffffff'\n                            )\n                        ),\n                    )\n\n                );\n            }\n\n            // clusters to add\n            $this->GalaxyCluster = ClassRegistry::init('GalaxyCluster');\n            $clusters = $this->GalaxyCluster->find('all', array(\n                'fields' => array('value', 'id'),\n                'recursive' => -1\n            ));\n            $clusterItemsAdd = array();\n            foreach ($clusters as $k => $cluster) {\n                $clusterItemsAdd[] = array(\n                    'name' => $cluster['GalaxyCluster']['value'],\n                    'value' => $cluster['GalaxyCluster']['id']\n                );\n            }\n            unset($clusters);\n\n            $this->layout = 'ajax';\n            $this->set('id', $id);\n            $this->set('sgs', $this->Attribute->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', true));\n            $this->set('distributionLevels', $this->Attribute->distributionLevels);\n            $this->set('distributionDescriptions', $this->Attribute->distributionDescriptions);\n            $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n            $this->set('tagItemsRemove', $tagItemsRemove);\n            $this->set('tagItemsAdd', $tagItemsAdd);\n            $this->set('clusterItemsAdd', $clusterItemsAdd);\n            $this->set('clusterItemsRemove', $clusterItemsRemove);\n            $this->set('options', array( // set chosen (select picker) options\n                'multiple' => -1,\n                'disabledSubmitButton' => true,\n                'flag_redraw_chosen' => true,\n                'select_options' => array(\n                    'additionalData' => array(\n                        'event_id' => $id,\n                    ),\n                ),\n            ));\n            $this->render('ajax/attributeEditMassForm');\n        }\n    }\n\n    public function search($continue = false)\n    {\n        $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n        $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n        $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        $this->set('shortDist', $this->Attribute->shortDist);\n        if ($this->request->is('post') || !empty($this->request->params['named']['tags'])) {\n            if (isset($this->request->data['Attribute'])) {\n                $this->request->data = $this->request->data['Attribute'];\n            }\n            $checkForEmpty = array('value', 'tags', 'uuid', 'org', 'type', 'category', 'first_seen', 'last_seen');\n            foreach ($checkForEmpty as $field) {\n                if (empty($this->request->data[$field]) || $this->request->data[$field] === 'ALL') {\n                    unset($this->request->data[$field]);\n                }\n            }\n            if (empty($this->request->data['to_ids'])) {\n                unset($this->request->data['to_ids']);\n                $this->request->data['ignore'] = 1;\n            }\n            $paramArray = array('value' , 'type', 'category', 'org', 'tags', 'from', 'to', 'last', 'eventid', 'withAttachments', 'uuid', 'publish_timestamp', 'timestamp', 'enforceWarninglist', 'to_ids', 'deleted', 'includeEventUuid', 'event_timestamp', 'threat_level_id', 'includeEventTags', 'first_seen', 'last_seen');\n            $filterData = array(\n                'request' => $this->request,\n                'named_params' => $this->params['named'],\n                'paramArray' => $paramArray,\n                'ordered_url_params' => @compact($paramArray),\n                'additional_delimiters' => PHP_EOL\n            );\n            $exception = false;\n            $filters = $this->_harvestParameters($filterData, $exception);\n            if (!empty($filters['uuid'])) {\n                if (!is_array($filters['uuid'])) {\n                    $filters['uuid'] = array($filters['uuid']);\n                }\n                $uuid = array();\n                $ids = array();\n                foreach ($filters['uuid'] as $k => $filter) {\n                    if ($filter[0] === '!') {\n                        $filter = substr($filter, 1);\n                    }\n                    if (Validation::uuid($filter)) {\n                        $uuid[] = $filters['uuid'][$k];\n                    } else {\n                        $ids[] = $filters['uuid'][$k];\n                    }\n                }\n                if (empty($uuid)) {\n                    unset($filters['uuid']);\n                } else {\n                    $filters['uuid'] = $uuid;\n                }\n                if (!empty($ids)) {\n                    $filters['eventid'] = $ids;\n                }\n            }\n            unset($filterData);\n            if ($filters === false) {\n                return $exception;\n            }\n            $this->Session->write('search_attributes_filters', json_encode($filters));\n        } elseif ($continue === 'results') {\n            $filters = $this->Session->read('search_attributes_filters');\n            if (empty($filters)) {\n                $filters = array();\n            } else {\n                $filters = json_decode($filters, true);\n            }\n        } else {\n            $types = array('' => array('ALL' => 'ALL'), 'types' => array());\n            $types['types'] = array_merge($types['types'], $this->_arrayToValuesIndexArray(array_keys($this->Attribute->typeDefinitions)));\n            ksort($types['types']);\n            $this->set('types', $types);\n            // combobox for categories\n            $categories['categories'] = array_merge(array('ALL' => 'ALL'), $this->_arrayToValuesIndexArray(array_keys($this->Attribute->categoryDefinitions)));\n            $this->set('categories', $categories);\n            $this->Session->write('search_attributes_filters', null);\n        }\n        if (isset($filters)) {\n            $params = $this->Attribute->restSearch($this->Auth->user(), 'json', $filters, true);\n            if (!isset($params['conditions']['Attribute.deleted'])) {\n                $params['conditions']['Attribute.deleted'] = 0;\n            }\n            $this->paginate = $params;\n            if (empty($this->paginate['limit'])) {\n                $this->paginate['limit'] = 60;\n            }\n            if (empty($this->paginate['page'])) {\n                $this->paginate['page'] = 1;\n            }\n            $this->paginate['recursive'] = -1;\n            $this->paginate['contain'] = array(\n                'Event' => array(\n                    'fields' =>  array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.info', 'Event.user_id', 'Event.date'),\n                    'Orgc' => array('fields' => array('Orgc.id', 'Orgc.name')),\n                    'Org' => array('fields' => array('Org.id', 'Org.name'))\n                ),\n                'AttributeTag' => array('Tag'),\n                'Object' => array(\n                    'fields' => array('Object.id', 'Object.distribution', 'Object.sharing_group_id')\n                )\n            );\n            $attributes = $this->paginate();\n            if (!$this->_isRest()) {\n                $temp = $this->__searchUI($attributes);\n                $this->loadModel('Galaxy');\n                $this->set('mitreAttackGalaxyId', $this->Galaxy->getMitreAttackGalaxyId());\n                $attributes = $temp[0];\n                $sightingsData = $temp[1];\n                $this->set('sightingsData', $sightingsData);\n            } else {\n                return $this->RestResponse->viewData($attributes, $this->response->type());\n            }\n            if (isset($filters['tags']) && !empty($filters['tags'])) {\n                // if the tag is passed by ID - show its name in the view\n                $this->loadModel('Tag');\n                if (!is_array($filters['tags'])) {\n                    $filters['tags'] = array($filters['tags']);\n                }\n                foreach ($filters['tags'] as $k => &$v) {\n                    if (!is_numeric($v))\n                        continue;\n                    $tag = $this->Tag->find('first', [\n                        'conditions' => ['Tag.id' => $v],\n                        'fields' => ['name'],\n                        'recursive' => -1\n                        ]);\n                    if (!empty($tag)) {\n                        $v = $tag['Tag']['name'];\n                    }\n                }\n            }\n            $this->set('filters', $filters);\n            $this->set('attributes', $attributes);\n            $this->set('isSearch', 1);\n            $this->render('index');\n        }\n        if (isset($attributeTags)) {\n            $this->set('attributeTags', $attributeTags);\n        }\n    }\n\n    private function __searchUI($attributes)\n    {\n        $sightingsData = array();\n        $this->Feed = ClassRegistry::init('Feed');\n\n        $this->loadModel('Sighting');\n        $user = $this->Auth->user();\n        foreach ($attributes as $k => $attribute) {\n            $attributeId = $attribute['Attribute']['id'];\n            if ($this->Attribute->isImage($attribute['Attribute'])) {\n                if (extension_loaded('gd')) {\n                    // if extension is loaded, the data is not passed to the view because it is asynchronously fetched\n                    $attribute['Attribute']['image'] = true; // tell the view that it is an image despite not having the actual data\n                } else {\n                    $attribute['Attribute']['image'] = $this->Attribute->base64EncodeAttachment($attribute['Attribute']);\n                }\n                $attributes[$k] = $attribute;\n            }\n\n            $attributes[$k]['Attribute']['AttributeTag'] = $attributes[$k]['AttributeTag'];\n            $attributes[$k]['Attribute'] = $this->Attribute->Event->massageTags($attributes[$k]['Attribute'], 'Attribute', $excludeGalaxy = false, $cullGalaxyTags = true);\n            unset($attributes[$k]['AttributeTag']);\n\n            $sightingsData = array_merge(\n                $sightingsData,\n                $this->Sighting->attachToEvent($attribute, $user, $attributeId, $extraConditions = false)\n            );\n            $correlations = $this->Attribute->Event->getRelatedAttributes($user, $attributeId, false, false, 'attribute');\n            if (!empty($correlations)) {\n                $attributes[$k]['Attribute']['RelatedAttribute'] = $correlations[$attributeId];\n            }\n            $temp = $this->Feed->attachFeedCorrelations(array($attributes[$k]['Attribute']), $user, $attributes[$k]['Event']);\n            if (!empty($temp)) {\n                $attributes[$k]['Attribute'] = $temp[0];\n            }\n        }\n        $sightingsData = $this->Attribute->Event->getSightingData(array('Sighting' => $sightingsData));\n        return array($attributes, $sightingsData);\n    }\n\n    // If the checkbox for the alternate search is ticked, then this method is called to return the data to be represented\n    // This alternate view will show a list of events with matching search results and the percentage of those matched attributes being marked as to_ids\n    // events are sorted based on relevance (as in the percentage of matches being flagged as indicators for IDS)\n    public function searchAlternate($data)\n    {\n        $attributes = $this->Attribute->fetchAttributes(\n            $this->Auth->user(),\n            array(\n                'conditions' => array(\n                    'AND' => $data\n                ),\n                'contain' => array('Event' => array('Orgc' => array('fields' => array('Orgc.name')))),\n                'fields' => array(\n                    'Attribute.id', 'Attribute.event_id', 'Attribute.type', 'Attribute.category', 'Attribute.to_ids', 'Attribute.value', 'Attribute.distribution',\n                    'Event.id', 'Event.org_id', 'Event.orgc_id', 'Event.info', 'Event.distribution', 'Event.attribute_count', 'Event.date',\n                )\n            )\n        );\n        $events = array();\n        foreach ($attributes as $attribute) {\n            if (isset($events[$attribute['Event']['id']])) {\n                if ($attribute['Attribute']['to_ids']) {\n                    $events[$attribute['Event']['id']]['to_ids']++;\n                } else {\n                    $events[$attribute['Event']['id']]['no_ids']++;\n                }\n            } else {\n                $events[$attribute['Event']['id']]['Event'] = $attribute['Event'];\n                $events[$attribute['Event']['id']]['to_ids'] = 0;\n                $events[$attribute['Event']['id']]['no_ids'] = 0;\n                if ($attribute['Attribute']['to_ids']) {\n                    $events[$attribute['Event']['id']]['to_ids']++;\n                } else {\n                    $events[$attribute['Event']['id']]['no_ids']++;\n                }\n            }\n        }\n        foreach ($events as $key => $event) {\n            $events[$key]['relevance'] = 100 * $event['to_ids'] / ($event['no_ids'] + $event['to_ids']);\n        }\n        if (!empty($events)) {\n            $events = $this->__subval_sort($events, 'relevance');\n        }\n        return $events;\n    }\n\n    // Sort the array of arrays based on a value of a sub-array\n    private function __subval_sort($a, $subkey)\n    {\n        foreach ($a as $k=>$v) {\n            $b[$k] = strtolower($v[$subkey]);\n        }\n        arsort($b);\n        foreach ($b as $key=>$val) {\n            $c[] = $a[$key];\n        }\n        return $c;\n    }\n\n    public function checkComposites()\n    {\n        if (!self::_isAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('fails', $this->Attribute->checkComposites());\n    }\n\n    // returns an XML with attributes that belong to an event. The type of attributes to be returned can be restricted by type using the 3rd parameter.\n    // Similar to the restSearch, this parameter can be chained with '&&' and negations are accepted too. For example filename&&!filename|md5 would return all filenames that don't have an md5\n    // The usage of returnAttributes is the following: [MISP-url]/attributes/returnAttributes/<API-key>/<type>/<signature flag>\n    // The signature flag is off by default, enabling it will only return attributes that have the to_ids flag set to true.\n    public function returnAttributes($key='download', $id, $type = null, $sigOnly = false)\n    {\n        $user = $this->checkAuthUser($key);\n        // if the user is authorised to use the api key then user will be populated with the user's account\n        // in addition we also set a flag indicating whether the user is a site admin or not.\n        if ($key != null && $key != 'download') {\n            $user = $this->checkAuthUser($key);\n        } else {\n            if (!$this->Auth->user()) {\n                throw new UnauthorizedException(__('You are not authorized. Please send the Authorization header with your auth key along with an Accept header for application/xml.'));\n            }\n            $user = $this->checkAuthUser($this->Auth->user('authkey'));\n        }\n        if (!$user) {\n            throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n        }\n        if ($this->request->is('post')) {\n            if ($this->response->type() === 'application/json') {\n                $data = $this->request->input('json_decode', true);\n            } elseif ($this->response->type() === 'application/xml' && !empty($this->request->data)) {\n                $data = $this->request->data;\n            } else {\n                throw new BadRequestException(__('Either specify the search terms in the url, or POST a json array / xml (with the root element being \"request\" and specify the correct accept and content type headers).'));\n            }\n            $paramArray = array('type', 'sigOnly');\n            foreach ($paramArray as $p) {\n                if (isset($data['request'][$p])) {\n                    ${$p} = $data['request'][$p];\n                } else {\n                    ${$p} = null;\n                }\n            }\n        }\n        $this->loadModel('Event');\n        $this->Event->read(null, $id);\n        $myEventOrAdmin = false;\n        if ($user['User']['siteAdmin'] || $this->Event->data['Event']['org_id'] == $user['User']['org_id']) {\n            $myEventOrAdmin = true;\n        }\n\n        if (!$myEventOrAdmin) {\n            if ($this->Event->data['Event']['distribution'] == 0) {\n                throw new UnauthorizedException(__('You don\\'t have access to that event.'));\n            }\n        }\n        $this->response->type('xml');    // set the content type\n        $this->layout = 'xml/default';\n        $this->header('Content-Disposition: download; filename=\"misp.search.attribute.results.xml\"');\n        // check if user can see the event!\n        $conditions['AND'] = array();\n        $include = array();\n        $exclude = array();\n        $attributes = array();\n        // If there is a type set, create the include and exclude arrays from it\n        if (isset($type)) {\n            $elements = explode('&&', $type);\n            foreach ($elements as $v) {\n                if (substr($v, 0, 1) == '!') {\n                    $exclude[] = substr($v, 1);\n                } else {\n                    $include[] = $v;\n                }\n            }\n        }\n\n        // check each attribute\n        foreach ($this->Event->data['Attribute'] as $k => $attribute) {\n            $contained = false;\n            // If the include list is empty, then the first check should always set contained to true (basically we chose type = all - exclusions, or simply all)\n            if (empty($include)) {\n                $contained = true;\n            } else {\n                // If we have elements in $include we should check if the attribute's type should be included\n                foreach ($include as $inc) {\n                    if (strpos($attribute['type'], $inc) !== false) {\n                        $contained = true;\n                    }\n                }\n            }\n            // If we have either everything included or the attribute passed the include check, we should check if there is a reason to exclude the attribute\n            // For example, filename may be included, but md5 may be excluded, meaning that filename|md5 should be removed\n            if ($contained) {\n                foreach ($exclude as $exc) {\n                    if (strpos($attribute['type'], $exc) !== false) {\n                        continue 2;\n                    }\n                }\n            }\n            // If we still didn't throw the attribute away, let's check if the user requesting the attributes is of the owning organisation of the event\n            // and if not, whether the distribution of the attribute allows the user to see it\n            if ($contained && !$myEventOrAdmin && $attribute['distribution'] == 0) {\n                $contained = false;\n            }\n\n            // If we have set the sigOnly parameter and the attribute has to_ids set to false, discard it!\n            if ($contained && $sigOnly === 'true' && !$attribute['to_ids']) {\n                $contained = false;\n            }\n\n            // If after all of this $contained is still true, let's add the attribute to the array\n            if ($contained) {\n                $attributes[] = $attribute;\n            }\n        }\n        if (empty($attributes)) {\n            throw new NotFoundException(__('No matches.'));\n        }\n        $this->set('results', $attributes);\n    }\n\n    public function downloadAttachment($key='download', $id)\n    {\n        if ($key != null && $key != 'download') {\n            $user = $this->checkAuthUser($key);\n        } else {\n            if (!$this->Auth->user()) {\n                throw new UnauthorizedException(__('You are not authorized. Please send the Authorization header with your auth key along with an Accept header for application/xml.'));\n            }\n            $user = $this->checkAuthUser($this->Auth->user('authkey'));\n        }\n        // if the user is authorised to use the api key then user will be populated with the user's account\n        // in addition we also set a flag indicating whether the user is a site admin or not.\n        if (!$user) {\n            throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n        }\n        if (is_numeric($id)) {\n            $conditions = array('Attribute.id' => $id);\n        } elseif (Validation::uuid($id)) {\n            $conditions = array('Attribute.uuid' => $id);\n        } else {\n            throw new NotFoundException(__('Invalid attribute id.'));\n        }\n        $conditions['Attribute.type'] = array('attachment', 'malware-sample');\n        $attributes = $this->Attribute->fetchAttributes($user, array('conditions' => $conditions, 'flatten' => true));\n        if (empty($attributes)) {\n            throw new UnauthorizedException(__('Attribute does not exists or you do not have the permission to download this attribute.'));\n        }\n        $this->__downloadAttachment($attributes[0]['Attribute']);\n    }\n\n    public function text()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'type', 'tags', 'eventId', 'allowNonIDS', 'from', 'to', 'last', 'enforceWarninglist', 'allowNotPublished'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'text'\n            ),\n            'alias' => array(\n                'eventId' => 'eventid'\n            )\n        ));\n        if (!empty($this->_legacyParams['allowNonIDS'])) {\n            $this->_legacyParams['to_ids'] = [0,1];\n        }\n        if (!empty($this->_legacyParams['allowNotPublished'])) {\n            $this->_legacyParams['published'] = [0,1];\n        }\n        if (!empty($this->_legacyParams['type']) && $this->_legacyParams['type'] === 'all') {\n            unset($this->_legacyParams['type']);\n        }\n        return $this->restSearch();\n    }\n\n    public function rpz()\n    {\n        $this->_legacyAPIRemap(array(\n            'paramArray' => array(\n                'key', 'tags', 'eventid', 'from', 'to', 'policy', 'walled_garden', 'ns',\n                'email', 'serial', 'refresh', 'retry', 'expiry', 'minimum_ttl', 'ttl',\n                'enforceWarninglist', 'ns_alt'\n            ),\n            'request' => $this->request,\n            'named_params' => $this->params['named'],\n            'ordered_url_params' => func_get_args(),\n            'injectedParams' => array(\n                'returnFormat' => 'rpz'\n            )\n        ));\n        return $this->restSearch();\n    }\n\n    public function bro($key = 'download', $type = 'all', $tags = false, $eventId = false, $from = false, $to = false, $last = false, $enforceWarninglist = false)\n    {\n        if ($this->request->is('post')) {\n            if ($this->request->input('json_decode', true)) {\n                $data = $this->request->input('json_decode', true);\n            } else {\n                $data = $this->request->data;\n            }\n            if (!empty($data) && !isset($data['request'])) {\n                $data = array('request' => $data);\n            }\n            $paramArray = array('type', 'tags', 'eventId', 'from', 'to', 'last', 'enforceWarninglist');\n            foreach ($paramArray as $p) {\n                if (isset($data['request'][$p])) {\n                    ${$p} = $data['request'][$p];\n                }\n            }\n        }\n        $simpleFalse = array('type', 'tags', 'eventId', 'from', 'to', 'last', 'enforceWarninglist');\n        foreach ($simpleFalse as $sF) {\n            if (!is_array(${$sF}) && (${$sF} === 'null' || ${$sF} == '0' || ${$sF} === false || strtolower(${$sF}) === 'false')) {\n                ${$sF} = false;\n            }\n        }\n        if ($type === 'null' || $type === '0' || $type === 'false') {\n            $type = 'all';\n        }\n        if ($from) {\n            $from = $this->Attribute->Event->dateFieldCheck($from);\n        }\n        if ($to) {\n            $to = $this->Attribute->Event->dateFieldCheck($to);\n        }\n        if ($last) {\n            $last = $this->Attribute->Event->resolveTimeDelta($last);\n        }\n        if ($key != 'download') {\n            // check if the key is valid -> search for users based on key\n            $user = $this->checkAuthUser($key);\n            if (!$user) {\n                throw new UnauthorizedException(__('This authentication key is not authorized to be used for exports. Contact your administrator.'));\n            }\n        } else {\n            if (!$this->Auth->user('id')) {\n                throw new UnauthorizedException(__('You have to be logged in to do that.'));\n            }\n        }\n        $filename = 'misp.' . $type . '.intel';\n        if ($eventId) {\n            $filename = 'misp.' . $type . '.event_' . $eventId . '.intel';\n        }\n        $responseFile = implode(PHP_EOL, $this->Attribute->bro($this->Auth->user(), $type, $tags, $eventId, $from, $to, $last, $enforceWarninglist)) . PHP_EOL;\n        $this->response->body($responseFile);\n        $this->response->type('txt');\n        $this->response->download($filename);\n        return $this->response;\n    }\n\n    public function reportValidationIssuesAttributes($eventId = false)\n    {\n        // TODO improve performance of this function by eliminating the additional SQL query per attribute\n        // search for validation problems in the attributes\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('result', $this->Attribute->reportValidationIssuesAttributes($eventId));\n    }\n\n    public function generateCorrelation()\n    {\n        if (!self::_isSiteAdmin() || !$this->request->is('post')) {\n            throw new NotFoundException();\n        }\n        if (!Configure::read('MISP.background_jobs')) {\n            $k = $this->Attribute->generateCorrelation();\n            $this->Flash->success(__('All done. ' . $k . ' attributes processed.'));\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        } else {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'generate correlation',\n                    'job_input' => 'All attributes',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => 'ADMIN',\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array('jobGenerateCorrelation', $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            $this->Flash->success(__('Job queued. You can view the progress if you navigate to the active jobs view (administration -> jobs).'));\n            $this->redirect(array('controller' => 'pages', 'action' => 'display', 'administration'));\n        }\n    }\n\n    public function fetchViewValue($id, $field = null)\n    {\n        $validFields = array('value', 'comment', 'type', 'category', 'to_ids', 'distribution', 'timestamp', 'first_seen', 'last_seen');\n        if (!isset($field) || !in_array($field, $validFields)) {\n            throw new MethodNotAllowedException(__('Invalid field requested.'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException(__('This function can only be accessed via AJAX.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $params = array(\n                'conditions' => array('Attribute.id' => $id),\n                'fields' => array('id', 'distribution', 'event_id', $field),\n                'contain' => array(\n                        'Event' => array(\n                                'fields' => array('distribution', 'id', 'org_id'),\n                        )\n                ),\n                'flatten' => 1\n        );\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $params);\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $attribute = $attribute[0];\n        $result = $attribute['Attribute'][$field];\n        if ($field == 'distribution') {\n            $result=$this->Attribute->shortDist[$result];\n        }\n        if ($field == 'to_ids') {\n            $result = ($result == 0 ? 'No' : 'Yes');\n        }\n        if ($field == 'timestamp') {\n            if (isset($result)) {\n                $result = date('Y-m-d', $result);\n            } else {\n                echo '&nbsp';\n            }\n        }\n        $this->set('value', $result);\n        $this->layout = 'ajax';\n        $this->render('ajax/attributeViewFieldForm');\n    }\n\n    public function fetchEditForm($id, $field = null)\n    {\n        $validFields = array('value', 'comment', 'type', 'category', 'to_ids', 'distribution', 'first_seen', 'last_seen');\n        if (!isset($field) || !in_array($field, $validFields)) {\n            throw new MethodNotAllowedException(__('Invalid field requested.'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException(__('This function can only be accessed via AJAX.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n\n        $fields = array('id', 'distribution', 'event_id');\n        if ($field == 'category' || $field == 'type') {\n            $fields[] = 'type';\n            $fields[] = 'category';\n        } else {\n            $fields[] = $field;\n        }\n        $params = array(\n            'conditions' => array('Attribute.id' => $id),\n            'fields' => $fields,\n            'flatten' => 1,\n            'contain' => array(\n                'Event' => array(\n                    'fields' => array('distribution', 'id', 'user_id', 'orgc_id'),\n                )\n            )\n        );\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), $params);\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $attribute = $attribute[0];\n        if (!$this->_isSiteAdmin()) {\n            if ($attribute['Event']['orgc_id'] == $this->Auth->user('org_id')\n            && (($this->userRole['perm_modify'] && $attribute['Event']['user_id'] != $this->Auth->user('id'))\n                    || $this->userRole['perm_modify_org'])) {\n                // Allow the edit\n            } else {\n                throw new ForbiddenException(__('You do not have permission to do that'));\n            }\n        }\n        $this->layout = 'ajax';\n        if ($field == 'distribution') {\n            $distributionLevels = $this->Attribute->shortDist;\n            unset($distributionLevels[4]);\n            $this->set('distributionLevels', $distributionLevels);\n        }\n        if ($field == 'category') {\n            $typeCategory = array();\n            foreach ($this->Attribute->categoryDefinitions as $k => $category) {\n                foreach ($category['types'] as $type) {\n                    $typeCategory[$type][] = $k;\n                }\n            }\n            $this->set('typeCategory', $typeCategory);\n        }\n        if ($field == 'type') {\n            $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        }\n        $this->set('object', $attribute['Attribute']);\n        $fieldURL = ucfirst($field);\n        $this->render('ajax/attributeEdit' . $fieldURL . 'Form');\n    }\n\n\n    public function attributeReplace($id)\n    {\n        if (!$this->userRole['perm_add']) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        $event = $this->Attribute->Event->find('first', array(\n                'conditions' => array('Event.id' => $id),\n                'fields' => array('id', 'orgc_id', 'distribution'),\n                'recursive' => -1\n        ));\n        if (empty($event) || (!$this->_isSiteAdmin() && ($event['Event']['orgc_id'] != $this->Auth->user('org_id') || !$this->userRole['perm_add']))) {\n            throw new MethodNotAllowedException(__('Event not found or you don\\'t have permissions to create attributes'));\n        }\n        $this->set('event_id', $id);\n        if ($this->request->is('get')) {\n            $this->layout = 'ajax';\n            $this->request->data['Attribute']['event_id'] = $id;\n\n            // combobox for types\n            $types = array_keys($this->Attribute->typeDefinitions);\n            $types = $this->_arrayToValuesIndexArray($types);\n            $this->set('types', $types);\n            // combobox for categories\n            $categories = array_keys($this->Attribute->categoryDefinitions);\n            $categories = $this->_arrayToValuesIndexArray($categories);\n            $this->set('categories', compact('categories'));\n            $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n            $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n            $this->set('categoryDefinitions', $this->Attribute->categoryDefinitions);\n        }\n        if ($this->request->is('post')) {\n            if (!$this->request->is('ajax')) {\n                throw new MethodNotAllowedException(__('This action can only be accessed via AJAX.'));\n            }\n\n            $newValues = explode(PHP_EOL, $this->request->data['Attribute']['value']);\n            $category = $this->request->data['Attribute']['category'];\n            $type = $this->request->data['Attribute']['type'];\n            $to_ids = $this->request->data['Attribute']['to_ids'];\n\n            if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $event['Event']['orgc_id'] && !$this->userRole['perm_add']) {\n                throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n            }\n\n            $oldAttributes = $this->Attribute->find('all', array(\n                    'conditions' => array(\n                            'event_id' => $id,\n                            'category' => $category,\n                            'type' => $type,\n                    ),\n                    'fields' => array('id', 'event_id', 'category', 'type', 'value'),\n                    'recursive' => -1,\n            ));\n            $results = array('untouched' => count($oldAttributes), 'created' => 0, 'deleted' => 0, 'createdFail' => 0, 'deletedFail' => 0);\n\n            $newValues = array_map('trim', $newValues);\n\n            foreach ($newValues as $value) {\n                $found = false;\n                foreach ($oldAttributes as $old) {\n                    if ($value == $old['Attribute']['value']) {\n                        $found = true;\n                    }\n                }\n                if (!$found) {\n                    $attribute = array(\n                            'value' => $value,\n                            'event_id' => $id,\n                            'category' => $category,\n                            'type' => $type,\n                            'distribution' => $event['Event']['distribution'],\n                            'to_ids' => $to_ids,\n                    );\n                    $this->Attribute->create();\n                    if ($this->Attribute->save(array('Attribute' => $attribute))) {\n                        $results['created']++;\n                    } else {\n                        $results['createdFail']++;\n                    }\n                }\n            }\n\n            foreach ($oldAttributes as $old) {\n                if (!in_array($old['Attribute']['value'], $newValues)) {\n                    if ($this->Attribute->delete($old['Attribute']['id'])) {\n                        $results['deleted']++;\n                        $results['untouched']--;\n                    } else {\n                        $results['deletedFail']++;\n                    }\n                }\n            }\n            $message = '';\n            $success = true;\n            if (($results['created'] > 0 || $results['deleted'] > 0) && $results['createdFail'] == 0 && $results['deletedFail'] == 0) {\n                $message .= 'Update completed without any issues.';\n                $event = $this->Attribute->Event->find('first', array(\n                    'conditions' => array('Event.id' => $id),\n                    'recursive' => -1\n                ));\n                $event['Event']['published'] = 0;\n                $date = new DateTime();\n                $event['Event']['timestamp'] = $date->getTimestamp();\n                $this->Attribute->Event->save($event);\n            } else {\n                $message .= 'Update completed with some errors.';\n                $success = false;\n            }\n\n            if ($results['created']) {\n                $message .= $results['created'] . ' attribute' . $this->__checkCountForOne($results['created']) . ' created. ';\n            }\n            if ($results['createdFail']) {\n                $message .= $results['createdFail'] . ' attribute' . $this->__checkCountForOne($results['createdFail']) . ' could not be created. ';\n            }\n            if ($results['deleted']) {\n                $message .= $results['deleted'] . ' attribute' . $this->__checkCountForOne($results['deleted']) . ' deleted.';\n            }\n            if ($results['deletedFail']) {\n                $message .= $results['deletedFail'] . ' attribute' . $this->__checkCountForOne($results['deletedFail']) . ' could not be deleted. ';\n            }\n            $message .= $results['untouched'] . ' attributes left untouched. ';\n\n            $this->autoRender = false;\n            $this->layout = 'ajax';\n            if ($success) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message)), 'status'=>200, 'type' => 'json'));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => $message)), 'status'=>200, 'type' => 'json'));\n            }\n        }\n    }\n\n    private function __checkCountForOne($number)\n    {\n        if ($number != 1) {\n            return 's';\n        }\n        return '';\n    }\n\n\n    // download a sample by passing along an md5\n    public function downloadSample($hash=false, $allSamples=false, $eventID=false)\n    {\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('This functionality requires API key access.'));\n        }\n        $error = false;\n        if ($this->response->type() === 'application/json') {\n            $data = $this->request->input('json_decode', true);\n        } elseif ($this->response->type() === 'application/xml') {\n            $data = $this->request->data;\n        } else {\n            throw new BadRequestException(__('This action is for the API only. Please refer to the automation page for information on how to use it.'));\n        }\n        if (!$hash && isset($data['request']['hash'])) {\n            $hash = $data['request']['hash'];\n        }\n        if (!$allSamples && isset($data['request']['allSamples'])) {\n            $allSamples = $data['request']['allSamples'];\n        }\n        if (!$eventID && isset($data['request']['eventID'])) {\n            $eventID = $data['request']['eventID'];\n        }\n        if (!$eventID && !$hash) {\n            throw new MethodNotAllowedException(__('No hash or event ID received. You need to set at least one of the two.'));\n        }\n        if (!$hash) {\n            $allSamples = true;\n        }\n\n\n        $simpleFalse = array('hash', 'allSamples', 'eventID');\n        foreach ($simpleFalse as $sF) {\n            if (!is_array(${$sF}) && (${$sF} === 'null' || ${$sF} == '0' || ${$sF} === false || strtolower(${$sF}) === 'false')) {\n                ${$sF} = false;\n            }\n        }\n\n        // valid combinations of settings are:\n        // hash\n        // eventID + all samples\n        // hash + eventID\n        // hash + eventID + all samples\n\n        $searchConditions = array();\n        $types = array();\n        if ($hash) {\n            $validTypes = $this->Attribute->resolveHashType($hash);\n            if ($allSamples) {\n                if (empty($validTypes)) {\n                    $error = 'Invalid hash format (valid options are ' . implode(', ', array_keys($this->Attribute->hashTypes)) . ')';\n                } else {\n                    foreach ($validTypes as $t) {\n                        if ($t == 'md5') {\n                            $types = array_merge($types, array('malware-sample', 'filename|md5', 'md5'));\n                        } else {\n                            $types = array_merge($types, array('filename|' . $t, $t));\n                        }\n                    }\n                }\n                if (empty($error)) {\n                    $event_ids = $this->Attribute->find('list', array(\n                        'recursive' => -1,\n                        'contain' => array('Event'),\n                        'fields' => array('Event.id'),\n                        'conditions' => array(\n                            'OR' => array(\n                                'AND' => array(\n                                    'LOWER(Attribute.value1) LIKE' => strtolower($hash),\n                                    'Attribute.value2' => '',\n                                ),\n                                'LOWER(Attribute.value2) LIKE' => strtolower($hash)\n                            )\n                        ),\n                    ));\n                    $searchConditions = array(\n                        'AND' => array('Event.id' => array_values($event_ids))\n                    );\n                    if (empty($event_ids)) {\n                        $error = 'No hits with the given parameters.';\n                    }\n                }\n            } else {\n                if (!in_array('md5', $validTypes)) {\n                    $error = 'Only MD5 hashes can be used to fetch malware samples at this point in time.';\n                }\n                if (empty($error)) {\n                    $searchConditions = array('AND' => array('LOWER(Attribute.value2) LIKE' => strtolower($hash)));\n                }\n            }\n        }\n\n        if (!empty($eventID)) {\n            $searchConditions['AND'][] = array('Event.id' => $eventID);\n        }\n\n        if (empty($error)) {\n            $attributes = $this->Attribute->fetchAttributes(\n                    $this->Auth->user(),\n                    array(\n                        'fields' => array('Attribute.event_id', 'Attribute.id', 'Attribute.value1', 'Attribute.value2', 'Event.info'),\n                        'conditions' => array(\n                            'AND' => array(\n                                $searchConditions,\n                                array('Attribute.type' => 'malware-sample')\n                            )\n                        ),\n                        'contain' => array('Event'),\n                        'flatten' => 1\n                    )\n            );\n            if (empty($attributes)) {\n                $error = 'No hits with the given parameters.';\n            }\n\n            $results = array();\n            foreach ($attributes as $attribute) {\n                $found = false;\n                foreach ($results as $previous) {\n                    if ($previous['md5'] == $attribute['Attribute']['value2']) {\n                        $found = true;\n                    }\n                }\n                if (!$found) {\n                    $results[] = array(\n                        'md5' => $attribute['Attribute']['value2'],\n                        'base64' => $this->Attribute->base64EncodeAttachment($attribute['Attribute']),\n                        'filename' => $attribute['Attribute']['value1'],\n                        'attribute_id' => $attribute['Attribute']['id'],\n                        'event_id' => $attribute['Attribute']['event_id'],\n                        'event_info' => $attribute['Event']['info'],\n                    );\n                }\n            }\n            if ($error) {\n                $this->set('message', $error);\n                $this->set('_serialize', array('message'));\n            } else {\n                $this->set('result', $results);\n                $this->set('_serialize', array('result'));\n            }\n        } else {\n            $this->set('message', $error);\n            $this->set('_serialize', array('message'));\n        }\n    }\n\n    public function pruneOrphanedAttributes()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        $events = array_keys($this->Attribute->Event->find('list'));\n        $orphans = $this->Attribute->find('list', array('conditions' => array('Attribute.event_id !=' => $events)));\n        if (count($orphans) > 0) {\n            $this->Attribute->deleteAll(array('Attribute.event_id !=' => $events), false, true);\n        }\n        $this->Flash->success('Removed ' . count($orphans) . ' attribute(s).');\n        $this->redirect(Router::url($this->referer(), true));\n    }\n\n    public function checkOrphanedAttributes()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        $this->loadModel('Attribute');\n        $events = array_keys($this->Attribute->Event->find('list'));\n        $orphans = $this->Attribute->find('list', array('conditions' => array('Attribute.event_id !=' => $events)));\n        return new CakeResponse(array('body'=> count($orphans), 'status'=>200, 'type' => 'json'));\n    }\n\n    public function updateAttributeValues($script)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        switch ($script) {\n            case 'urlSanitisation':\n                $replaceConditions = array(\n                    array('search' => 'UPPER(Attribute.value1) LIKE', 'from' => 'HXXP', 'to' => 'http', 'ci' => true, 'condition' => 'startsWith'),\n                    array('search' => 'Attribute.value1 LIKE', 'from' => '[.]', 'to' => '.', 'ci' => false, 'condition' => 'contains'),\n                );\n                break;\n            default:\n                throw new Exception(__('Invalid script.'));\n        }\n        $counter = 0;\n        foreach ($replaceConditions as $rC) {\n            $searchPattern = '';\n            if (in_array($rC['condition'], array('endsWith', 'contains'))) {\n                $searchPattern .= '%';\n            }\n            $searchPattern .= $rC['from'];\n            if (in_array($rC['condition'], array('startsWith', 'contains'))) {\n                $searchPattern .= '%';\n            }\n            $attributes = $this->Attribute->find('all', array('conditions' => array($rC['search'] => $searchPattern), 'recursive' => -1));\n            foreach ($attributes as $attribute) {\n                $regex = '/';\n                if (!in_array($rC['condition'], array('startsWith', 'contains'))) {\n                    $regex .= '^';\n                }\n                $regex .= $rC['from'];\n                if (!in_array($rC['condition'], array('endsWith', 'contains'))) {\n                    $regex .= '$';\n                }\n                $regex .= '/';\n                if ($rC['ci']) {\n                    $regex .= 'i';\n                }\n                $attribute['Attribute']['value'] = preg_replace($regex, $rC['to'], $attribute['Attribute']['value']);\n                $this->Attribute->save($attribute);\n                $counter++;\n            }\n        }\n        $this->Flash->success('Updated ' . $counter . ' attribute(s).');\n        $this->redirect('/pages/display/administration');\n    }\n\n    public function hoverEnrichment($id, $persistent = false)\n    {\n        $attribute = $this->Attribute->fetchAttributes($this->Auth->user(), array('conditions' => array('Attribute.id' => $id), 'flatten' => 1));\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid Attribute'));\n        }\n        $this->loadModel('Server');\n        $this->loadModel('Module');\n        $modules = $this->Module->getEnabledModules($this->Auth->user());\n        $validTypes = array();\n        if (isset($modules['hover_type'][$attribute[0]['Attribute']['type']])) {\n            $validTypes = $modules['hover_type'][$attribute[0]['Attribute']['type']];\n        }\n        $url = Configure::read('Plugin.Enrichment_services_url') ? Configure::read('Plugin.Enrichment_services_url') : $this->Server->serverSettings['Plugin']['Enrichment_services_url']['value'];\n        $port = Configure::read('Plugin.Enrichment_services_port') ? Configure::read('Plugin.Enrichment_services_port') : $this->Server->serverSettings['Plugin']['Enrichment_services_port']['value'];\n        $resultArray = array();\n        foreach ($validTypes as $type) {\n            $options = array();\n            $found = false;\n            foreach ($modules['modules'] as $temp) {\n                if ($temp['name'] == $type) {\n                    $found = true;\n                    $format = (isset($temp['mispattributes']['format']) ? $temp['mispattributes']['format'] : 'simplified');\n                    if (isset($temp['meta']['config'])) {\n                        foreach ($temp['meta']['config'] as $conf) {\n                            $options[$conf] = Configure::read('Plugin.Enrichment_' . $type . '_' . $conf);\n                        }\n                    }\n                    break;\n                }\n            }\n            if (!$found) {\n                throw new MethodNotAllowedException(__('No valid enrichment options found for this attribute.'));\n            }\n            $data = array('module' => $type);\n            if ($persistent) {\n                $data['persistent'] = 1;\n            }\n            if (!empty($options)) {\n                $data['config'] = $options;\n            }\n            if ($format == 'misp_standard') {\n                $data['attribute'] = in_array('value', $attribute) ? $attribute : $attribute[0]['Attribute'];\n            } else {\n                $data[$attribute[0]['Attribute']['type']] = $attribute[0]['Attribute']['value'];\n            }\n            $data = json_encode($data);\n            $result = $this->Module->queryModuleServer('/query', $data, true);\n            if ($result) {\n                if (!is_array($result)) {\n                    $resultArray[$type][] = array($type => $result);\n                }\n            } else {\n                // TODO: i18n?\n                $resultArray[$type][] = array($type => 'Enrichment service not reachable.');\n                continue;\n            }\n            $current_result = array();\n            if (isset($result['results']['Object'])) {\n                if (!empty($result['results']['Object'])) {\n                    $objects = array();\n                    foreach($result['results']['Object'] as $object) {\n                        if (isset($object['Attribute']) && !empty($object['Attribute'])) {\n                            $object_attributes = array();\n                            foreach($object['Attribute'] as $object_attribute) {\n                                array_push($object_attributes, array('object_relation' => $object_attribute['object_relation'], 'value' => $object_attribute['value']));\n                            }\n                            array_push($objects, array('name' => $object['name'], 'Attribute' => $object_attributes));\n                        }\n                    }\n                    if (!empty($objects)) {\n                        $current_result['Object'] = $objects;\n                    }\n                }\n                unset($result['results']['Object']);\n            }\n            if (isset($result['results']['Attribute'])) {\n                if (!empty($result['results']['Attribute'])) {\n                    $attributes = array();\n                    foreach($result['results']['Attribute'] as $result_attribute) {\n                        $attributes[] = array('type' => $result_attribute['type'], 'value' => $result_attribute['value']);\n                    }\n                    $current_result['Attribute'] = $attributes;\n                }\n                unset($result['results']['Attribute']);\n            }\n            $resultArray[$type] = $current_result;\n            if (!empty($result['results'])) {\n                foreach ($result['results'] as $r) {\n                    if (is_array($r['values']) && !empty($r['values'])) {\n                        $tempArray = array();\n                        foreach ($r['values'] as $k => $v) {\n                            if (is_array($v)) {\n                                $v = 'Array returned';\n                            }\n                            $tempArray[$k] = $v;\n                        }\n                        $resultArray[$type][] = array($type => $tempArray);\n                    } elseif ($r['values'] == null) {\n                        $resultArray[$type][] = array($type => 'No result');\n                    } else {\n                        $resultArray[$type][] = array($type => $r['values']);\n                    }\n                }\n            }\n        }\n        $this->set('results', $resultArray);\n        $this->layout = 'ajax';\n        $this->render('ajax/hover_enrichment');\n    }\n\n    public function describeTypes()\n    {\n        $result = array();\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $result['sane_defaults'][$key] = array('default_category' => $value['default_category'], 'to_ids' => $value['to_ids']);\n        }\n        $result['types'] = array_keys($this->Attribute->typeDefinitions);\n        $result['categories'] = array_keys($this->Attribute->categoryDefinitions);\n        foreach ($this->Attribute->categoryDefinitions as $cat => $data) {\n            $result['category_type_mappings'][$cat] = $data['types'];\n        }\n        $this->set('result', $result);\n        $this->set('_serialize', array('result'));\n    }\n\n    public function attributeStatistics($type = 'type', $percentage = false)\n    {\n        $validTypes = array('type', 'category');\n        if (!in_array($type, $validTypes)) {\n            throw new MethodNotAllowedException(__('Invalid type requested.'));\n        }\n        $totalAttributes = $this->Attribute->find('count', array());\n        $attributes = $this->Attribute->find('all', array(\n                'recursive' => -1,\n                'fields' => array($type, 'COUNT(id) as attribute_count'),\n                'group' => array($type)\n        ));\n        $results = array();\n        foreach ($attributes as $attribute) {\n            if ($percentage) {\n                $results[$attribute['Attribute'][$type]] = round(100 * $attribute[0]['attribute_count'] / $totalAttributes, 3) . '%';\n            } else {\n                $results[$attribute['Attribute'][$type]] = $attribute[0]['attribute_count'];\n            }\n        }\n        ksort($results);\n        $this->autoRender = false;\n        $this->layout = false;\n        $this->set('data', $results);\n        $this->set('flags', JSON_PRETTY_PRINT);\n        $this->response->type('json');\n        $this->render('/Servers/json/simple');\n    }\n\n    public function addTag($id = false, $tag_id = false)\n    {\n        $this->Taxonomy = $log = ClassRegistry::init('Taxonomy');\n        $rearrangeRules = array(\n            'request' => false,\n            'Attribute' => false,\n            'tag_id' => 'tag',\n            'attribute_id' => 'attribute',\n            'id' => 'attribute'\n        );\n        $RearrangeTool = new RequestRearrangeTool();\n        $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n        $local = empty($this->params['named']['local']) ? 0 : 1;\n        if (!$this->request->is('post')) {\n            if ($id === false) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $this->set('local', $local);\n            $this->set('object_id', $id);\n            $this->set('scope', 'Attribute');\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->render('/Events/add_tag');\n        } else {\n            if ($id === false) {\n                if (!isset($this->request->data['attribute'])) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                }\n                $id = $this->request->data['attribute'];\n            }\n            if ($id === 'selected') {\n                if (!isset($this->request->data['attribute_ids'])) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                }\n                $idList = json_decode($this->request->data['attribute_ids'], true);\n            }\n            if ($tag_id === false) {\n                if (!isset($this->request->data['tag'])) {\n                    throw new NotFoundException(__('Invalid tag'));\n                }\n                $tag_id = $this->request->data['tag'];\n            }\n            if (!is_numeric($tag_id)) {\n                if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                    $tagChoice = explode('_', $tag_id)[1];\n                    $this->loadModel('TagCollection');\n                    $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                    if (empty($tagCollection)) {\n                        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                    }\n                    $tag_id_list = array();\n                    foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                        $tag_id_list[] = $tagCollectionTag['tag_id'];\n                    }\n                } else {\n                    // try to parse json array\n                    $tag_ids = json_decode($tag_id);\n                    if ($tag_ids !== null) { // can decode json\n                        $tag_id_list = array();\n                        foreach ($tag_ids as $tag_id) {\n                            if (preg_match('/^collection_[0-9]+$/i', $tag_id)) {\n                                $tagChoice = explode('_', $tag_id)[1];\n                                $this->loadModel('TagCollection');\n                                $tagCollection = $this->TagCollection->fetchTagCollection($this->Auth->user(), array('conditions' => array('TagCollection.id' => $tagChoice)));\n                                if (empty($tagCollection)) {\n                                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag Collection.')), 'status'=>200, 'type' => 'json'));\n                                }\n                                foreach ($tagCollection[0]['TagCollectionTag'] as $tagCollectionTag) {\n                                    $tag_id_list[] = $tagCollectionTag['tag_id'];\n                                }\n                            } else {\n                                $tag_id_list[] = $tag_id;\n                            }\n                        }\n                    } else {\n                        $tag = $this->Event->EventTag->Tag->find('first', array('recursive' => -1, 'conditions' => $conditions));\n                        if (empty($tag)) {\n                            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status'=>200, 'type' => 'json'));\n                        }\n                        $tag_id = $tag['Tag']['id'];\n                    }\n                }\n            }\n            if (!isset($idList)) {\n                $idList = array($id);\n            }\n            if (empty($tag_id_list)) {\n                $tag_id_list = array($tag_id);\n            }\n            $success = 0;\n            $fails = 0;\n            foreach ($idList as $id) {\n                $attributes = $this->Attribute->fetchAttributes(\n                    $this->Auth->user(),\n                    array(\n                        'conditions' => array('Attribute.id' => $id, 'Attribute.deleted' => 0),\n                        'flatten' => 1,\n                        'contain' => array('Event.orgc_id')\n                    )\n                );\n                if (empty($attributes)) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                } else {\n                    $attribute = $attributes[0];\n                }\n                if (!$this->userRole['perm_tagger']) {\n                    $fails++;\n                    continue;\n                }\n                if ((!$this->userRole['perm_sync'] && !$this->_isSiteAdmin()) && $attribute['Event']['orgc_id'] !== $this->Auth->user('org_id')) {\n                    if (Configure::read('MISP.host_org_id') != $this->Auth->user('org_id') || !$local) {\n                        $fails++;\n                        continue;\n                    }\n                }\n                $eventId = $attribute['Attribute']['event_id'];\n                $event = $this->Attribute->Event->find('first', array(\n                    'conditions' => array('Event.id' => $eventId),\n                    'recursive' => -1\n                ));\n                if (!$this->_isRest()) {\n                    $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n                }\n                foreach ($tag_id_list as $tag_id) {\n                    $this->Attribute->AttributeTag->Tag->id = $tag_id;\n                    if (!$this->Attribute->AttributeTag->Tag->exists()) {\n                        $fails++;\n                        continue;\n                    }\n                    $tag = $this->Attribute->AttributeTag->Tag->find('first', array(\n                        'conditions' => array('Tag.id' => $tag_id),\n                        'recursive' => -1,\n                        'fields' => array('Tag.name')\n                    ));\n                    $found = $this->Attribute->AttributeTag->find('first', array(\n                        'conditions' => array(\n                            'attribute_id' => $id,\n                            'tag_id' => $tag_id\n                        ),\n                        'recursive' => -1,\n                    ));\n                    $this->autoRender = false;\n                    if (!empty($found)) {\n                        $fails++;\n                        continue;\n                    }\n                    $tagsOnAttribute = $this->Attribute->AttributeTag->find('all', array(\n                        'conditions' => array(\n                            'AttributeTag.attribute_id' => $id,\n                            'AttributeTag.local' => $local\n                        ),\n                        'contain' => 'Tag',\n                        'fields' => array('Tag.name'),\n                        'recursive' => -1\n                    ));\n                    $exclusiveTestPassed = $this->Taxonomy->checkIfNewTagIsAllowedByTaxonomy($tag['Tag']['name'], Hash::extract($tagsOnAttribute, '{n}.Tag.name'));\n                    if (!$exclusiveTestPassed) {\n                        $fails++;\n                        continue;\n                    }\n                    $this->Attribute->AttributeTag->create();\n                    if ($this->Attribute->AttributeTag->save(array('attribute_id' => $id, 'tag_id' => $tag_id, 'event_id' => $eventId, 'local' => $local))) {\n                        if (!$local) {\n                            $event['Event']['published'] = 0;\n                            $date = new DateTime();\n                            $event['Event']['timestamp'] = $date->getTimestamp();\n                            $result = $this->Attribute->Event->save($event);\n                            $attribute['Attribute']['timestamp'] = $date->getTimestamp();\n                            if ($attribute['Attribute']['object_id'] != 0) {\n                                $this->Attribute->Object->updateTimestamp($attribute['Attribute']['object_id'], $date->getTimestamp());\n                            }\n                            $this->Attribute->save($attribute);\n                        }\n                        $log = ClassRegistry::init('Log');\n                        $log->createLogEntry(\n                            $this->Auth->user(),\n                            'tag',\n                            'Attribute',\n                            $id,\n                            sprintf(\n                                'Attached%s tag (%s) \"%s\" to attribute (%s)',\n                                $local ? ' local' : '',\n                                $tag_id,\n                                $tag['Tag']['name'],\n                                $id\n                            ),\n                            sprintf(\n                                'Attribute (%s) tagged as Tag (%s)%s',\n                                $id,\n                                $tag_id,\n                                $local ? ' locally' : ''\n                            )\n                        );\n                        $success++;\n                    } else {\n                        $fails++;\n                    }\n                }\n            }\n            if ($fails == 0) {\n                if ($success == 1) {\n                    $message = 'Tag added.';\n                } else {\n                    $message = $success . ' tags added.';\n                }\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => $message, 'check_publish' => true)), 'status' => 200, 'type' => 'json'));\n            } else {\n                if ($fails == 1) {\n                    $message = 'Tag could not be added.';\n                } else {\n                    $message = $fails . ' tags could not be added.';\n                }\n                if ($success > 0) {\n                    $message .= ' However, ' . $success . ' tag(s) were added.';\n                }\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $message)), 'status' => 200, 'type' => 'json'));\n            }\n        }\n    }\n\n    public function removeTag($id = false, $tag_id = false)\n    {\n        if (!$this->request->is('post')) {\n            $this->set('id', $id);\n            $this->set('tag_id', $tag_id);\n            $this->set('model', 'Attribute');\n            $this->render('ajax/tagRemoveConfirmation');\n        } else {\n            $rearrangeRules = array(\n                'request' => false,\n                'Attribute' => false,\n                'tag_id' => 'tag',\n                'attribute_id' => 'attribute',\n                'id' => 'attribute'\n            );\n            $RearrangeTool = new RequestRearrangeTool();\n            $this->request->data = $RearrangeTool->rearrangeArray($this->request->data, $rearrangeRules);\n            if ($id === false) {\n                if (!isset($this->request->data['attribute'])) {\n                    throw new NotFoundException(__('Invalid attribute'));\n                }\n                $id = $this->request->data['attribute'];\n            }\n            if ($tag_id === false) {\n                if (!isset($this->request->data['tag'])) {\n                    throw new NotFoundException(__('Invalid tag'));\n                }\n                $tag_id = $this->request->data['tag'];\n            }\n            $this->Attribute->id = $id;\n            if (!$this->Attribute->exists()) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $this->Attribute->read();\n            if ($this->Attribute->data['Attribute']['deleted']) {\n                throw new NotFoundException(__('Invalid attribute'));\n            }\n            $eventId = $this->Attribute->data['Attribute']['event_id'];\n            if (empty($tag_id)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status' => 200, 'type' => 'json'));\n            }\n            if (!is_numeric($tag_id)) {\n                $tag = $this->Attribute->AttributeTag->Tag->find('first', array('recursive' => -1, 'conditions' => array('LOWER(Tag.name) LIKE' => strtolower(trim($tag_id)))));\n                if (empty($tag)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid Tag.')), 'status' => 200, 'type' => 'json'));\n                }\n                $tag_id = $tag['Tag']['id'];\n            }\n            if (!is_numeric($id)) {\n                $id = $this->request->data['Attribute']['id'];\n            }\n\n            $this->Attribute->Event->recursive = -1;\n            $event = $this->Attribute->Event->read(array(), $eventId);\n            if (!$this->_isRest()) {\n                $this->Attribute->Event->insertLock($this->Auth->user(), $eventId);\n            }\n            $this->Attribute->recursive = -1;\n            $attributeTag = $this->Attribute->AttributeTag->find('first', array(\n                'conditions' => array(\n                    'attribute_id' => $id,\n                    'tag_id' => $tag_id\n                ),\n                'recursive' => -1,\n            ));\n            // org should allow to (un)tag too, so that an event that gets pushed can be (un)tagged locally by the owning org\n            if (\n                (\n                    (\n                        $this->Auth->user('org_id') !== $event['Event']['orgc_id'] ||\n                        (\n                            $this->Auth->user('org_id') != Configure::read('MISP.host_org_id') &&\n                            !empty($attributeTag['AttributeTag']['local'])\n                        )\n                    ) ||\n                    !$this->userRole['perm_tagger']\n                ) &&\n                !$this->_isSiteAdmin()\n            ) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You do not have permission to do that.')), 'status' => 200, 'type' => 'json'));\n            }\n\n            $this->autoRender = false;\n            if (empty($attributeTag)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Invalid attribute - tag combination.')), 'status' => 200, 'type' => 'json'));\n            }\n            $tag = $this->Attribute->AttributeTag->Tag->find('first', array(\n                'conditions' => array('Tag.id' => $tag_id),\n                'recursive' => -1,\n                'fields' => array('Tag.name')\n            ));\n            if ($this->Attribute->AttributeTag->delete($attributeTag['AttributeTag']['id'])) {\n                if (empty($attributeTag['AttributeTag']['local'])) {\n                    $event['Event']['published'] = 0;\n                    $date = new DateTime();\n                    $event['Event']['timestamp'] = $date->getTimestamp();\n                    $this->Attribute->Event->save($event);\n                    if ($this->Attribute->data['Attribute']['object_id'] != 0) {\n                        $this->Attribute->Object->updateTimestamp($this->Attribute->data['Attribute']['object_id'], $date->getTimestamp());\n                    }\n                    $this->Attribute->data['Attribute']['timestamp'] = $date->getTimestamp();\n                    $this->Attribute->save($this->Attribute->data);\n                }\n                $log = ClassRegistry::init('Log');\n                $log->createLogEntry($this->Auth->user(), 'tag', 'Attribute', $id, 'Removed tag (' . $tag_id . ') \"' . $tag['Tag']['name'] . '\" from attribute (' . $id . ')', 'Attribute (' . $id . ') untagged of Tag (' . $tag_id . ')');\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Tag removed.', 'check_publish' => empty($attributeTag['AttributeTag']['local']))), 'status' => 200));\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Tag could not be removed.')), 'status' => 200, 'type' => 'json'));\n            }\n        }\n    }\n\n    public function toggleCorrelation($id)\n    {\n        if (!$this->_isSiteAdmin() && !Configure::read('MISP.allow_disabling_correlation')) {\n            throw new MethodNotAllowedException(__('Disabling the correlation is not permitted on this instance.'));\n        }\n        $this->Attribute->id = $id;\n        if (!$this->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid Attribute.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify']) {\n            throw new MethodNotAllowedException(__('You do not have permission to do that.'));\n        }\n        $conditions = array('Attribute.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Event.orgc_id'] = $this->Auth->user('org_id');\n        }\n        $attribute = $this->Attribute->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'contain' => array('Event')\n        ));\n        if (empty($attribute)) {\n            throw new NotFoundException(__('Invalid Attribute.'));\n        }\n        if (!$this->Auth->user('Role')['perm_modify_org'] && $this->Auth->user('id') != $attribute['Event']['user_id']) {\n            throw new MethodNotAllowedException(__('You do not have permission to do that.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Attribute->Event->insertLock($this->Auth->user(), $attribute['Event']['id']);\n        }\n        if ($this->request->is('post')) {\n            if ($attribute['Attribute']['disable_correlation']) {\n                $attribute['Attribute']['disable_correlation'] = 0;\n                $this->Attribute->save($attribute);\n                $this->Attribute->__afterSaveCorrelation($attribute['Attribute'], false, $attribute);\n            } else {\n                $attribute['Attribute']['disable_correlation'] = 1;\n                $this->Attribute->save($attribute);\n                $this->Attribute->purgeCorrelations($attribute['Event']['id'], $attribute['Attribute']['id']);\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('attributes', 'toggleCorrelation', $id, false, 'Correlation ' . ($attribute['Attribute']['disable_correlation'] ? 'disabled' : 'enabled') . '.');\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => ('Correlation ' . ($attribute['Attribute']['disable_correlation'] ? 'disabled' : 'enabled')), 'check_publish' => true)), 'status'=>200, 'type' => 'json'));\n            }\n        } else {\n            $this->set('attribute', $attribute);\n            $this->render('ajax/toggle_correlation');\n        }\n    }\n\n    public function toggleToIDS($id)\n    {\n        return $this->fetchEditForm($id, 'to_ids');\n    }\n\n\n    public function checkAttachments()\n    {\n        $attributes = $this->Attribute->find(\n                'all',\n                array(\n                    'conditions' => array('Attribute.type' => array('attachment', 'malware-sample')),\n                    'recursive' => -1)\n            );\n        $counter = 0;\n        $attachments_dir = Configure::read('MISP.attachments_dir');\n        if (empty($attachments_dir)) {\n            $this->loadModel('Server');\n            $attachments_dir = $this->Server->getDefaultAttachments_dir();\n        }\n        foreach ($attributes as $attribute) {\n            $path = $attachments_dir . DS . $attribute['Attribute']['event_id'] . DS;\n            $file = $attribute['Attribute']['id'];\n            if (!file_exists($path . $file)) {\n                $counter++;\n            }\n        }\n        return new CakeResponse(array('body'=>$counter, 'status'=>200));\n    }\n\n    public function exportSearch($type = false)\n    {\n        if (empty($type)) {\n            $exports = array_keys($this->Attribute->validFormats);\n            $this->set('exports', $exports);\n            $this->render('ajax/exportSearch');\n        } else {\n            $filters = $this->Session->read('search_attributes_filters');\n            $filters = json_decode($filters, true);\n            $final = $this->Attribute->restSearch($this->Auth->user(), $type, $filters);\n            $responseType = $this->Attribute->validFormats[$type][0];\n            return $this->RestResponse->viewData($final, $responseType, false, true, 'search.' . $type . '.' . $responseType);\n        }\n    }\n\n    private function __getInfo()\n    {\n        $info = array('category' => array(), 'type' => array(), 'distribution' => array());\n        foreach ($this->Attribute->categoryDefinitions as $key => $value) {\n            $info['category'][$key] = array(\n                'key' => $key,\n                'desc' => isset($value['formdesc']) ? $value['formdesc'] : $value['desc']\n            );\n        }\n        foreach ($this->Attribute->typeDefinitions as $key => $value) {\n            $info['type'][$key] = array(\n                'key' => $key,\n                'desc' => isset($value['formdesc']) ? $value['formdesc'] : $value['desc']\n            );\n        }\n        foreach ($this->Attribute->distributionLevels as $key => $value) {\n            $info['distribution'][$key] = array(\n                'key' => $value,\n                'desc' => $this->Attribute->distributionDescriptions[$key]['formdesc']\n            );\n        }\n        return $info;\n    }\n}\n"], "filenames": ["app/Controller/AttributesController.php"], "buggy_code_start_loc": [352], "buggy_code_end_loc": [2033], "fixing_code_start_loc": [352], "fixing_code_end_loc": [2030], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in MISP 2.4.128. app/Controller/AttributesController.php has insufficient ACL checks in the attachment downloader.", "other": {"cve": {"id": "CVE-2020-15411", "sourceIdentifier": "cve@mitre.org", "published": "2020-06-30T14:15:11.813", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP 2.4.128. app/Controller/AttributesController.php has insufficient ACL checks in the attachment downloader."}, {"lang": "es", "value": "Se detect\u00f3 un problema en MISP versi\u00f3n 2.4.128. El archivo app/Controller/AttributesController.php no presenta suficientes comprobaciones de la ACL en el descargador de archivos adjuntos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.128:*:*:*:*:*:*:*", "matchCriteriaId": "1F16A85A-DEA7-491C-8D83-E4D61E428C32"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/d14ce7de709cdde3ecc9433e38e14c682894e88a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/d14ce7de709cdde3ecc9433e38e14c682894e88a"}}