{"buggy_code": ["/*\n * alloc.c -- Useful allocation function/defintions\n *\n * Copyright (C)1999-2006 Mark Simpson <damned@world.std.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can either send email to this\n * program's maintainer or write to: The Free Software Foundation,\n * Inc.; 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.\n *\n */\n#ifdef HAVE_CONFIG_H\n#  include \"config.h\"\n#endif /* HAVE_CONFIG_H */\n\n#include \"common.h\"\n#include \"alloc.h\"\n\nstatic size_t alloc_limit = 0;\n\nvoid\nset_alloc_limit (size_t size)\n{\n    alloc_limit = size;\n}\n\nsize_t\nget_alloc_limit()\n{\n    return alloc_limit;\n}\n\nstatic void\nalloc_limit_failure (char *fn_name, size_t size)\n{\n    fprintf (stderr, \n             \"%s: Maximum allocation size exceeded \"\n             \"(maxsize = %lu; size = %lu).\\n\",\n             fn_name,\n             (unsigned long)alloc_limit, \n             (unsigned long)size);\n}\n\nvoid\nalloc_limit_assert (char *fn_name, size_t size)\n{\n    if (alloc_limit && size > alloc_limit)\n    {\n\talloc_limit_failure (fn_name, size);\n\texit (-1);\n    }\n}\n\n/* attempts to malloc memory, if fails print error and call abort */\nvoid*\nxmalloc (size_t size)\n{\n    void *ptr = malloc (size);\n    if (!ptr \n        && (size != 0))         /* some libc don't like size == 0 */\n    {\n        perror (\"xmalloc: Memory allocation failure\");\n        abort();\n    }\n    return ptr;\n}\n\n/* Allocates memory but only up to a limit */\nvoid*\nchecked_xmalloc (size_t size)\n{\n    alloc_limit_assert (\"checked_xmalloc\", size);\n    return xmalloc (size);\n}\n\n/* xmallocs memory and clears it out */\nvoid*\nxcalloc (size_t num, size_t size)\n{\n    void *ptr = malloc(num * size);\n    if (ptr)\n    {\n        memset (ptr, '\\0', (num * size));\n    }\n    return ptr;\n}\n\n/* xcallocs memory but only up to a limit */\nvoid*\nchecked_xcalloc (size_t num, size_t size)\n{\n    alloc_limit_assert (\"checked_xcalloc\", (num *size));\n    return xcalloc (num, size);\n}\n\n\n\n", "/*\n * alloc.h -- Useful allocation function/defintions\n *\n * Copyright (C)1999-2006 Mark Simpson <damned@theworld.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can either send email to this\n * program's maintainer or write to: The Free Software Foundation,\n * Inc.; 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.\n *\n */\n#ifndef ALLOC_H\n#define ALLOC_H\n\n#if HAVE_CONFIG_H\n#  include \"config.h\"\n#endif /* HAVE_CONFIG_H */\n\n#include \"common.h\"\n\n#if !STDC_HEADERS\nextern void free (void*);\n#endif /* STDC_HEADERS */\n\nextern void set_alloc_limit (size_t size);\nextern size_t get_alloc_limit();\nextern void alloc_limit_assert (char *fn_name, size_t size);\nextern void* checked_xmalloc (size_t size);\nextern void* xmalloc (size_t size);\nextern void* checked_xcalloc (size_t num, size_t size);\nextern void* xcalloc (size_t num, size_t size);\n\n#define XMALLOC(_type,_num)\t\t\t                \\\n        ((_type*)xmalloc((_num)*sizeof(_type)))\n#define XCALLOC(_type,_num) \t\t\t\t        \\\n        ((_type*)xcalloc((_num), sizeof (_type)))\n#define CHECKED_XMALLOC(_type,_num) \t\t\t        \\\n        ((_type*)checked_xmalloc((_num)*sizeof(_type)))\n#define CHECKED_XCALLOC(_type,_num) \t\t\t        \\\n        ((_type*)checked_xcalloc((_num),sizeof(_type)))\n#define XFREE(_ptr)\t\t\t\t\t\t\\\n\tdo { if (_ptr) { free (_ptr); _ptr = 0; } } while (0)\n\n#endif /* ALLOC_H */\n"], "fixing_code": ["/*\n * alloc.c -- Useful allocation function/defintions\n *\n * Copyright (C)1999-2006 Mark Simpson <damned@world.std.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can either send email to this\n * program's maintainer or write to: The Free Software Foundation,\n * Inc.; 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.\n *\n */\n#ifdef HAVE_CONFIG_H\n#  include \"config.h\"\n#endif /* HAVE_CONFIG_H */\n\n#include \"common.h\"\n#include \"alloc.h\"\n\nstatic size_t alloc_limit = 0;\n\nvoid\nset_alloc_limit (size_t size)\n{\n    alloc_limit = size;\n}\n\nsize_t\nget_alloc_limit()\n{\n    return alloc_limit;\n}\n\nsize_t\ncheck_mul_overflow(size_t a, size_t b, size_t* res)\n{\n    size_t tmp = a * b;\n    if (a != 0 && tmp / a != b) return 1;\n    *res = tmp;\n    return 0;\n}\n\nstatic void\nalloc_limit_failure (char *fn_name, size_t size)\n{\n    fprintf (stderr,\n             \"%s: Maximum allocation size exceeded \"\n             \"(maxsize = %lu; size = %lu).\\n\",\n             fn_name,\n             (unsigned long)alloc_limit,\n             (unsigned long)size);\n}\n\nvoid\nalloc_limit_assert (char *fn_name, size_t size)\n{\n    if (alloc_limit && size > alloc_limit)\n    {\n        alloc_limit_failure (fn_name, size);\n        exit (-1);\n    }\n}\n\n/* attempts to malloc memory, if fails print error and call abort */\nvoid*\nxmalloc (size_t num, size_t size)\n{\n    size_t res;\n    if (check_mul_overflow(num, size, &res))\n        abort();\n\n    void *ptr = malloc (res);\n    if (!ptr\n        && (size != 0))         /* some libc don't like size == 0 */\n    {\n        perror (\"xmalloc: Memory allocation failure\");\n        abort();\n    }\n    return ptr;\n}\n\n/* Allocates memory but only up to a limit */\nvoid*\nchecked_xmalloc (size_t num, size_t size)\n{\n    size_t res;\n    if (check_mul_overflow(num, size, &res))\n        abort();\n\n    alloc_limit_assert (\"checked_xmalloc\", res);\n    return xmalloc (num, size);\n}\n\n/* xmallocs memory and clears it out */\nvoid*\nxcalloc (size_t num, size_t size)\n{\n    size_t res;\n    if (check_mul_overflow(num, size, &res))\n        abort();\n\n    void *ptr;\n    ptr = malloc(res);\n    if (ptr)\n    {\n        memset (ptr, '\\0', (res));\n    }\n    return ptr;\n}\n\n/* xcallocs memory but only up to a limit */\nvoid*\nchecked_xcalloc (size_t num, size_t size)\n{\n    size_t res;\n    if (check_mul_overflow(num, size, &res))\n        abort();\n\n    alloc_limit_assert (\"checked_xcalloc\", (res));\n    return xcalloc (num, size);\n}\n", "/*\n * alloc.h -- Useful allocation function/defintions\n *\n * Copyright (C)1999-2006 Mark Simpson <damned@theworld.com>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can either send email to this\n * program's maintainer or write to: The Free Software Foundation,\n * Inc.; 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.\n *\n */\n#ifndef ALLOC_H\n#define ALLOC_H\n\n#if HAVE_CONFIG_H\n#  include \"config.h\"\n#endif /* HAVE_CONFIG_H */\n\n#include \"common.h\"\n\n#if !STDC_HEADERS\nextern void free (void*);\n#endif /* STDC_HEADERS */\n\nextern void set_alloc_limit (size_t size);\nextern size_t get_alloc_limit();\nextern void alloc_limit_assert (char *fn_name, size_t size);\nextern void* checked_xmalloc (size_t num, size_t size);\nextern void* xmalloc (size_t num, size_t size);\nextern void* checked_xcalloc (size_t num, size_t size);\nextern void* xcalloc (size_t num, size_t size);\n\n#define XMALLOC(_type,_num)\t\t\t                \\\n        ((_type*)xmalloc((_num), sizeof(_type)))\n#define XCALLOC(_type,_num) \t\t\t\t        \\\n        ((_type*)xcalloc((_num), sizeof (_type)))\n#define CHECKED_XMALLOC(_type,_num) \t\t\t        \\\n        ((_type*)checked_xmalloc((_num),sizeof(_type)))\n#define CHECKED_XCALLOC(_type,_num) \t\t\t        \\\n        ((_type*)checked_xcalloc((_num),sizeof(_type)))\n#define XFREE(_ptr)\t\t\t\t\t\t\\\n        do { if (_ptr) { free (_ptr); _ptr = 0; } } while (0)\n\n#endif /* ALLOC_H */\n"], "filenames": ["src/alloc.c", "src/alloc.h"], "buggy_code_start_loc": [42, 38], "buggy_code_end_loc": [108, 53], "fixing_code_start_loc": [43, 38], "fixing_code_end_loc": [130, 53], "type": "CWE-190", "message": "An issue was discovered in tnef before 1.4.13. Several Integer Overflows, which can lead to Heap Overflows, have been identified in the functions that wrap memory allocation.", "other": {"cve": {"id": "CVE-2017-6308", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-24T04:59:00.607", "lastModified": "2019-03-13T17:58:24.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in tnef before 1.4.13. Several Integer Overflows, which can lead to Heap Overflows, have been identified in the functions that wrap memory allocation."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en tnef en versiones anteriores a 1.4.13. Varios desbordamientos de entero, que pueden conducir a operaciones de desbordamiento de memoria din\u00e1mica, se han identificado en las funciones que envuelven la asignaci\u00f3n de memoria."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tnef_project:tnef:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.4.12", "matchCriteriaId": "89F0C6D8-2B85-44C4-A8C0-1BDBCAC4E6DC"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3798", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/96427", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/verdammelt/tnef/blob/master/ChangeLog", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/verdammelt/tnef/commit/c5044689e50039635e7700fe2472fd632ac77176", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201708-02", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.x41-dsec.de/lab/advisories/x41-2017-004-tnef/", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/verdammelt/tnef/commit/c5044689e50039635e7700fe2472fd632ac77176"}}