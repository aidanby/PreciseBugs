{"buggy_code": ["<?php\n\n/**\n * The main admin backend index file.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Bastian Poettner <bastian@poettner.net>\n * @author Meikel Katzengreis <meikel@katzengreis.com>\n * @author Minoru TODA <todam@netjapan.co.jp>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2002-09-16\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Logging;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\User\\CurrentUser;\n\ndefine('PMF_ROOT_DIR', dirname(__DIR__));\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire PMF_ROOT_DIR . '/src/Bootstrap.php';\n\n// get language (default: english)\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire PMF_ROOT_DIR . '/lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode)) {\n    // Overwrite English strings with the ones we have in the current language\n    if (!file_exists(PMF_ROOT_DIR . '/lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require PMF_ROOT_DIR . '/lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n//\n// Set actual template set name\n//\nTemplate::setTplSetName($faqConfig->get('main.templateSet'));\n\n//\n// Initialize attachment factory\n//\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Create a new phpMyFAQ system object\n//\n$faqSystem = new System();\n\n//\n// Create a new HTTP Helper\n//\n$http = new HttpHelper();\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n\n//\n// use mbstring extension if available and when possible\n//\n$validMbStrings = array('ja', 'en', 'uni');\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\nif (is_null($action)) {\n    $action = Filter::filterInput(INPUT_POST, 'action', FILTER_UNSAFE_RAW);\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n//\n// Get possible redirect action\n//\n$redirectAction = Filter::filterInput(INPUT_POST, 'redirect-action', FILTER_UNSAFE_RAW);\nif (is_null($action) && '' !== $redirectAction && 'logout' !== $redirectAction) {\n    $action = $redirectAction;\n}\n\n// authenticate current user\n$auth = null;\n$error = '';\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqremember = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($faqremember) && 'rememberMe' === $faqremember) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n    if ($user->login($faqusername, $faqpassword)) {\n        // login, if user account is NOT blocked\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'];\n        }\n    } else {\n        // error\n        $logging = new Logging($faqConfig);\n        $logging->logAdmin($user, 'Loginerror\\nLogin: ' . $faqusername . '\\nErrors: ' . implode(', ', $user->errors));\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n// logout\nif ($csrfChecked && $action === 'logout' && $auth) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        $http->redirect($ssoLogout);\n    }\n}\n\n//\n// Get current admin user and group id - default: -1\n//\nif (isset($user) && is_object($user)) {\n    $currentAdminUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentAdminGroups = $user->perm->getUserGroups($currentAdminUser);\n    } else {\n        $currentAdminGroups = [-1];\n    }\n    if (0 === count($currentAdminGroups)) {\n        $currentAdminGroups = [-1];\n    }\n}\n\n//\n// Get action from _GET and _POST first\n$ajax = Filter::filterInput(INPUT_GET, 'ajax', FILTER_UNSAFE_RAW);\nif (is_null($ajax)) {\n    $ajax = Filter::filterInput(INPUT_POST, 'ajax', FILTER_UNSAFE_RAW);\n}\n\n// if performing AJAX operation, needs to branch before header.php\nif (isset($auth) && (count($user->perm->getAllUserRights($user->getUserId())) > 0 || $user->isSuperAdmin())) {\n    if (isset($action) && isset($ajax)) {\n        if ('ajax' === $action) {\n            switch ($ajax) {\n                // Attachments\n                case 'att':\n                    require 'ajax.attachment.php';\n                    break;\n                // Dashboard\n                case 'dashboard':\n                    require 'ajax.dashboard.php';\n                    break;\n                // Link verification\n                case 'verifyURL':\n                    require 'ajax.verifyurl.php';\n                    break;\n                case 'onDemandURL':\n                    require 'ajax.ondemandurl.php';\n                    break;\n                // Categories\n                case 'categories':\n                    require 'ajax.category.php';\n                    break;\n                // Configuration management\n                case 'config_list':\n                    require 'ajax.config_list.php';\n                    break;\n                case 'config':\n                    require 'ajax.config.php';\n                    break;\n                case 'elasticsearch':\n                    require 'ajax.elasticsearch.php';\n                    break;\n                // Tags management\n                case 'tags':\n                    require 'ajax.tags.php';\n                    break;\n                // Comments\n                case 'comment':\n                    require 'ajax.comment.php';\n                    break;\n                // Records\n                case 'records':\n                    require 'ajax.records.php';\n                    break;\n                case 'recordSave':\n                    require 'record.save.php';\n                    break;\n                case 'recordAdd':\n                    require 'record.add.php';\n                    break;\n                case 'markdown':\n                    require 'ajax.markdown.php';\n                    break;\n                // Search\n                case 'search':\n                    require 'ajax.search.php';\n                    break;\n                // Users\n                case 'user':\n                    require 'ajax.user.php';\n                    break;\n                // Groups\n                case 'group':\n                    require 'ajax.group.php';\n                    break;\n                // Sections\n                case 'section':\n                    require 'ajax.section.php';\n                    break;\n                // Interface translation\n                case 'trans':\n                    require 'ajax.trans.php';\n                    break;\n                // Image upload\n                case 'image':\n                    require 'ajax.image.php';\n                    break;\n            }\n            exit();\n        }\n    }\n}\n\n// are we running a PMF export file request?\nswitch ($action) {\n    case 'exportfile':\n        require 'export.file.php';\n        exit();\n        break;\n    case 'reportexport':\n        require 'report.export.php';\n        exit();\n        break;\n}\n\n// Header of the admin page including the navigation\nrequire 'header.php';\n\n$numRights = count($user->perm->getAllUserRights($user->getUserId()));\n\n// User is authenticated\nif (isset($auth) && ($numRights > 0 || $user->isSuperAdmin())) {\n    if (!is_null($action)) {\n        // the various sections of the admin area\n        switch ($action) {\n            // functions for user administration\n            case 'user':\n                require 'user.php';\n                break;\n            case 'group':\n                require 'group.php';\n                break;\n            case 'section':\n                require 'section.php';\n                break;\n            // functions for content administration\n            case 'faqs-overview':\n                require 'faqs.overview.php';\n                break;\n            case 'viewinactive':\n            case 'viewactive':\n            case 'view':\n                require 'record.show.php';\n                break;\n            case 'searchfaqs':\n                require 'record.search.php';\n                break;\n            case 'takequestion':\n            case 'editentry':\n            case 'copyentry':\n            case 'editpreview':\n                require 'record.edit.php';\n                break;\n            case 'insertentry':\n                require 'record.add.php';\n                break;\n            case 'saveentry':\n                require 'record.save.php';\n                break;\n            case 'delatt':\n                require 'record.delatt.php';\n                break;\n            case 'question':\n                require 'record.questions.php';\n                break;\n            case 'comments':\n                require 'record.comments.php';\n                break;\n            // functions for tags\n            case 'tags':\n            case 'delete-tag':\n                require 'tags.php';\n                break;\n            // news administration\n            case 'news':\n            case 'add-news':\n            case 'edit-news':\n            case 'save-news':\n            case 'update-news':\n            case 'delete-news':\n                require 'news.php';\n                break;\n            // category administration\n            case 'content':\n            case 'category':\n            case 'savecategory':\n            case 'updatecategory':\n            case 'checkIfCategoryExists':\n            case 'removecategory':\n            case 'changecategory':\n            case 'pastecategory':\n                require 'category.main.php';\n                break;\n            case 'addcategory':\n                require 'category.add.php';\n                break;\n            case 'editcategory':\n                require 'category.edit.php';\n                break;\n            case 'translatecategory':\n                require 'category.translate.php';\n                break;\n            case 'deletecategory':\n                require 'category.delete.php';\n                break;\n            case 'cutcategory':\n                require 'category.cut.php';\n                break;\n            case 'movecategory':\n                require 'category.move.php';\n                break;\n            case 'showcategory':\n                require 'category.showstructure.php';\n                break;\n            // glossary\n            case 'glossary':\n            case 'saveglossary':\n            case 'updateglossary':\n            case 'deleteglossary':\n                require 'glossary.main.php';\n                break;\n            case 'addglossary':\n                require 'glossary.add.php';\n                break;\n            case 'editglossary':\n                require 'glossary.edit.php';\n                break;\n            // functions for password administration\n            case 'passwd':\n                require 'pwd.change.php';\n                break;\n            // functions for session administration\n            case 'adminlog':\n            case 'deleteadminlog':\n                require 'stat.adminlog.php';\n                break;\n            case 'viewsessions':\n            case 'clear-visits':\n                require 'stat.main.php';\n                break;\n            case 'sessionbrowse':\n                require 'stat.browser.php';\n                break;\n            case 'viewsession':\n                require 'statistics.show.php';\n                break;\n            case 'clear-statistics':\n            case 'statistics':\n                require 'stat.ratings.php';\n                break;\n            case 'truncatesearchterms':\n            case 'searchstats':\n                require 'stat.search.php';\n                break;\n            // Reports\n            case 'reports':\n                require 'report.main.php';\n                break;\n            case 'reportview':\n                require 'report.view.php';\n                break;\n            // Config administration\n            case 'config':\n                require 'configuration.php';\n                break;\n            case 'system':\n                require 'system.php';\n                break;\n            case 'updateinstance':\n            case 'instances':\n                require 'instances.php';\n                break;\n            case 'editinstance':\n                require 'instances.edit.php';\n                break;\n            case 'stopwordsconfig':\n                require 'stopwords.php';\n                break;\n            case 'elasticsearch':\n                require 'elasticsearch.php';\n                break;\n            case 'meta':\n            case 'meta.update';\n                require 'meta.php';\n                break;\n            case 'meta.edit':\n                require 'meta.edit.php';\n                break;\n            // functions for backup administration\n            case 'backup':\n                require 'backup.main.php';\n                break;\n            case 'restore':\n                require 'backup.import.php';\n                break;\n            // functions for FAQ export\n            case 'export':\n                require 'export.main.php';\n                break;\n            // attachment administration\n            case 'attachments':\n                require 'attachments.php';\n                break;\n\n            default:\n                echo 'Dave, this conversation can serve no purpose anymore. Goodbye.';\n                break;\n        }\n    } else {\n        require 'dashboard.php';\n    }\n// User is authenticated, but has no rights\n} elseif (isset($auth) && $numRights === 0) {\n    require 'noperm.php';\n// User is NOT authenticated\n} else {\n    require 'loginform.php';\n}\n\nrequire 'footer.php';\n\n$faqConfig->getDb()->close();\n"], "fixing_code": ["<?php\n\n/**\n * The main admin backend index file.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Bastian Poettner <bastian@poettner.net>\n * @author Meikel Katzengreis <meikel@katzengreis.com>\n * @author Minoru TODA <todam@netjapan.co.jp>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2002-09-16\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Logging;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\User\\CurrentUser;\n\ndefine('PMF_ROOT_DIR', dirname(__DIR__));\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire PMF_ROOT_DIR . '/src/Bootstrap.php';\n\n// get language (default: english)\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire PMF_ROOT_DIR . '/lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode)) {\n    // Overwrite English strings with the ones we have in the current language\n    if (!file_exists(PMF_ROOT_DIR . '/lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require PMF_ROOT_DIR . '/lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n//\n// Set actual template set name\n//\nTemplate::setTplSetName($faqConfig->get('main.templateSet'));\n\n//\n// Initialize attachment factory\n//\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Create a new phpMyFAQ system object\n//\n$faqSystem = new System();\n\n//\n// Create a new HTTP Helper\n//\n$http = new HttpHelper();\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n\n//\n// use mbstring extension if available and when possible\n//\n$validMbStrings = array('ja', 'en', 'uni');\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\nif (is_null($action)) {\n    $action = Filter::filterInput(INPUT_POST, 'action', FILTER_UNSAFE_RAW);\n}\n$action = Strings::htmlentities($action);\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n//\n// Get possible redirect action\n//\n$redirectAction = Filter::filterInput(INPUT_POST, 'redirect-action', FILTER_UNSAFE_RAW);\nif (is_null($action) && '' !== $redirectAction && 'logout' !== $redirectAction) {\n    $action = $redirectAction;\n}\n\n// authenticate current user\n$auth = null;\n$error = '';\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqremember = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($faqremember) && 'rememberMe' === $faqremember) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n    if ($user->login($faqusername, $faqpassword)) {\n        // login, if user account is NOT blocked\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'];\n        }\n    } else {\n        // error\n        $logging = new Logging($faqConfig);\n        $logging->logAdmin($user, 'Loginerror\\nLogin: ' . $faqusername . '\\nErrors: ' . implode(', ', $user->errors));\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n// logout\nif ($csrfChecked && $action === 'logout' && $auth) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        $http->redirect($ssoLogout);\n    }\n}\n\n//\n// Get current admin user and group id - default: -1\n//\nif (isset($user) && is_object($user)) {\n    $currentAdminUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentAdminGroups = $user->perm->getUserGroups($currentAdminUser);\n    } else {\n        $currentAdminGroups = [-1];\n    }\n    if (0 === count($currentAdminGroups)) {\n        $currentAdminGroups = [-1];\n    }\n}\n\n//\n// Get action from _GET and _POST first\n$ajax = Filter::filterInput(INPUT_GET, 'ajax', FILTER_UNSAFE_RAW);\nif (is_null($ajax)) {\n    $ajax = Filter::filterInput(INPUT_POST, 'ajax', FILTER_UNSAFE_RAW);\n}\n\n// if performing AJAX operation, needs to branch before header.php\nif (isset($auth) && (count($user->perm->getAllUserRights($user->getUserId())) > 0 || $user->isSuperAdmin())) {\n    if (isset($action) && isset($ajax)) {\n        if ('ajax' === $action) {\n            switch ($ajax) {\n                // Attachments\n                case 'att':\n                    require 'ajax.attachment.php';\n                    break;\n                // Dashboard\n                case 'dashboard':\n                    require 'ajax.dashboard.php';\n                    break;\n                // Link verification\n                case 'verifyURL':\n                    require 'ajax.verifyurl.php';\n                    break;\n                case 'onDemandURL':\n                    require 'ajax.ondemandurl.php';\n                    break;\n                // Categories\n                case 'categories':\n                    require 'ajax.category.php';\n                    break;\n                // Configuration management\n                case 'config_list':\n                    require 'ajax.config_list.php';\n                    break;\n                case 'config':\n                    require 'ajax.config.php';\n                    break;\n                case 'elasticsearch':\n                    require 'ajax.elasticsearch.php';\n                    break;\n                // Tags management\n                case 'tags':\n                    require 'ajax.tags.php';\n                    break;\n                // Comments\n                case 'comment':\n                    require 'ajax.comment.php';\n                    break;\n                // Records\n                case 'records':\n                    require 'ajax.records.php';\n                    break;\n                case 'recordSave':\n                    require 'record.save.php';\n                    break;\n                case 'recordAdd':\n                    require 'record.add.php';\n                    break;\n                case 'markdown':\n                    require 'ajax.markdown.php';\n                    break;\n                // Search\n                case 'search':\n                    require 'ajax.search.php';\n                    break;\n                // Users\n                case 'user':\n                    require 'ajax.user.php';\n                    break;\n                // Groups\n                case 'group':\n                    require 'ajax.group.php';\n                    break;\n                // Sections\n                case 'section':\n                    require 'ajax.section.php';\n                    break;\n                // Interface translation\n                case 'trans':\n                    require 'ajax.trans.php';\n                    break;\n                // Image upload\n                case 'image':\n                    require 'ajax.image.php';\n                    break;\n            }\n            exit();\n        }\n    }\n}\n\n// are we running a PMF export file request?\nswitch ($action) {\n    case 'exportfile':\n        require 'export.file.php';\n        exit();\n        break;\n    case 'reportexport':\n        require 'report.export.php';\n        exit();\n        break;\n}\n\n// Header of the admin page including the navigation\nrequire 'header.php';\n\n$numRights = count($user->perm->getAllUserRights($user->getUserId()));\n\n// User is authenticated\nif (isset($auth) && ($numRights > 0 || $user->isSuperAdmin())) {\n    if (!is_null($action)) {\n        // the various sections of the admin area\n        switch ($action) {\n            // functions for user administration\n            case 'user':\n                require 'user.php';\n                break;\n            case 'group':\n                require 'group.php';\n                break;\n            case 'section':\n                require 'section.php';\n                break;\n            // functions for content administration\n            case 'faqs-overview':\n                require 'faqs.overview.php';\n                break;\n            case 'viewinactive':\n            case 'viewactive':\n            case 'view':\n                require 'record.show.php';\n                break;\n            case 'searchfaqs':\n                require 'record.search.php';\n                break;\n            case 'takequestion':\n            case 'editentry':\n            case 'copyentry':\n            case 'editpreview':\n                require 'record.edit.php';\n                break;\n            case 'insertentry':\n                require 'record.add.php';\n                break;\n            case 'saveentry':\n                require 'record.save.php';\n                break;\n            case 'delatt':\n                require 'record.delatt.php';\n                break;\n            case 'question':\n                require 'record.questions.php';\n                break;\n            case 'comments':\n                require 'record.comments.php';\n                break;\n            // functions for tags\n            case 'tags':\n            case 'delete-tag':\n                require 'tags.php';\n                break;\n            // news administration\n            case 'news':\n            case 'add-news':\n            case 'edit-news':\n            case 'save-news':\n            case 'update-news':\n            case 'delete-news':\n                require 'news.php';\n                break;\n            // category administration\n            case 'content':\n            case 'category':\n            case 'savecategory':\n            case 'updatecategory':\n            case 'checkIfCategoryExists':\n            case 'removecategory':\n            case 'changecategory':\n            case 'pastecategory':\n                require 'category.main.php';\n                break;\n            case 'addcategory':\n                require 'category.add.php';\n                break;\n            case 'editcategory':\n                require 'category.edit.php';\n                break;\n            case 'translatecategory':\n                require 'category.translate.php';\n                break;\n            case 'deletecategory':\n                require 'category.delete.php';\n                break;\n            case 'cutcategory':\n                require 'category.cut.php';\n                break;\n            case 'movecategory':\n                require 'category.move.php';\n                break;\n            case 'showcategory':\n                require 'category.showstructure.php';\n                break;\n            // glossary\n            case 'glossary':\n            case 'saveglossary':\n            case 'updateglossary':\n            case 'deleteglossary':\n                require 'glossary.main.php';\n                break;\n            case 'addglossary':\n                require 'glossary.add.php';\n                break;\n            case 'editglossary':\n                require 'glossary.edit.php';\n                break;\n            // functions for password administration\n            case 'passwd':\n                require 'pwd.change.php';\n                break;\n            // functions for session administration\n            case 'adminlog':\n            case 'deleteadminlog':\n                require 'stat.adminlog.php';\n                break;\n            case 'viewsessions':\n            case 'clear-visits':\n                require 'stat.main.php';\n                break;\n            case 'sessionbrowse':\n                require 'stat.browser.php';\n                break;\n            case 'viewsession':\n                require 'statistics.show.php';\n                break;\n            case 'clear-statistics':\n            case 'statistics':\n                require 'stat.ratings.php';\n                break;\n            case 'truncatesearchterms':\n            case 'searchstats':\n                require 'stat.search.php';\n                break;\n            // Reports\n            case 'reports':\n                require 'report.main.php';\n                break;\n            case 'reportview':\n                require 'report.view.php';\n                break;\n            // Config administration\n            case 'config':\n                require 'configuration.php';\n                break;\n            case 'system':\n                require 'system.php';\n                break;\n            case 'updateinstance':\n            case 'instances':\n                require 'instances.php';\n                break;\n            case 'editinstance':\n                require 'instances.edit.php';\n                break;\n            case 'stopwordsconfig':\n                require 'stopwords.php';\n                break;\n            case 'elasticsearch':\n                require 'elasticsearch.php';\n                break;\n            case 'meta':\n            case 'meta.update';\n                require 'meta.php';\n                break;\n            case 'meta.edit':\n                require 'meta.edit.php';\n                break;\n            // functions for backup administration\n            case 'backup':\n                require 'backup.main.php';\n                break;\n            case 'restore':\n                require 'backup.import.php';\n                break;\n            // functions for FAQ export\n            case 'export':\n                require 'export.main.php';\n                break;\n            // attachment administration\n            case 'attachments':\n                require 'attachments.php';\n                break;\n\n            default:\n                echo 'Dave, this conversation can serve no purpose anymore. Goodbye.';\n                break;\n        }\n    } else {\n        require 'dashboard.php';\n    }\n// User is authenticated, but has no rights\n} elseif (isset($auth) && $numRights === 0) {\n    require 'noperm.php';\n// User is NOT authenticated\n} else {\n    require 'loginform.php';\n}\n\nrequire 'footer.php';\n\n$faqConfig->getDb()->close();\n"], "filenames": ["phpmyfaq/admin/index.php"], "buggy_code_start_loc": [121], "buggy_code_end_loc": [121], "fixing_code_start_loc": [122], "fixing_code_end_loc": [123], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.1.9.", "other": {"cve": {"id": "CVE-2022-4407", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-11T15:15:10.653", "lastModified": "2022-12-12T18:32:13.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository thorsten/phpmyfaq prior to 3.1.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.9", "matchCriteriaId": "3DAB360A-D5DD-4DCA-A0C4-B171302FB531"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/1d73af34bf42764f9f9491c7ba5e9495d70e3ca5", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a1649f43-78c9-4927-b313-36911872a84b", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/1d73af34bf42764f9f9491c7ba5e9495d70e3ca5"}}