{"buggy_code": ["uses 'chatqueue/chatqueue';\nuses 'asyncJsonRPC';\nuses '/cention/webroot/Cention.app/Support/Pages/CentionBase';\n\nglobal {\n\tobject currentChatUser;\n}\n\nnamespace ChatMCAM {\n\tfunction init {\n\t\tcurrentChatUser = Workflow.User.fetchUserObject();\n\t\tWorkflow.FeatureSystem.setup();\n\t\tExternalQueueInterface.setup();\n\t}\n\n\tfunction _getAreaAgents( number area_id ) {\n\t\treturn Array.append( [ [ 'id' => 0, 'value' => I('Forward To Agent') ] ], (closure {\n\t\t\tarray list = [];\n\t\t\tWorkflow.User.listFromCache(area_id).each() using ( item ) {\n\t\t\t\tif( item['id'] != currentChatUser.id ) {\n\t\t\t\t\tobject user = Workflow.User.load(item['id']);\n\t\t\t\t\tif( user and user.acceptChat ) {\n\t\t\t\t\t\tlist[] = item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn list;\n\t\t}).invoke());\n\t}\n\tfunction _getAlternativeAnswers( number area_id ) {\n\t\t\tarray list = [];\n\t\t\tarray data = [];\n\t\t\tarray results = [];\n\t\t\tarray result = [];\n\t\t\tstring body = '';\n\t\t\tobject keyCombination;\n\t\t\tobject area = Workflow.Area.load( area_id );\n\n\t\t\tif( area ) {\n\t\t\t\tobject searchRules = area.getExternalSearchRules();\n\t\t\t\tif( searchRules and searchRules.enabled and ExternalSearchInterface.isEnabled() ) {\n\t\t\t\t\tresults = ExternalSearchInterface.templates(searchRules, true);\n\t\t\t\t} else {\n\t\t\t\t\tresults = Workflow.Search.run(\"custom:answer locations:${area.id} type:contents-keyword source:either state:any published:yes exact:no time:both sort-asc:subject limit:1000 offset:0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult['order'] = [];\n\t\t\tresult['list'] = [];\n\t\t\tresults.each() using ( row ) {\n\t\t\t\tif( row['body'] ){\n\n\t\t\t\t\tif( row['body'].utf8Length() > 50)\n\t\t\t\t\t\tbody = row['body'].utf8Slice(50) + '...';\n\t\t\t\t\telse\n\t\t\t\t\t\tbody = row['body'];\n\n\t\t\t\t\tkeyCombination = Workflow.ChatKeyboardShortcut.getKeys( row['id'] );\n\t\t\t\t\tresult['order'][] = row['id'];\n\t\t\t\t\tresult['list']['' + row['id']] = [\n\t\t\t\t\t\t'id' => row['id'],\n\t\t\t\t\t\t'data' => [ \n\t\t\t\t\t\t\t'left_arrow' => '<img src=\"{0}\" onclick=\"_publishedAnswerCopyTo({1})\" style=\"vertical-align:top;background-color: #FCAB46; cursor: pointer;\" border=\"0\" />'.expand( uriForImageResource('submit_arrow_left.png'), row['id']),\n\t\t\t\t\t\t\t'subject' => row['subject'],\n\t\t\t\t\t\t\t'trimBody' => body + '&nbsp;<span style=\"color:#898E79;\">(' +(keyCombination ? keyCombination.shortcut : '')+')</span>',\n\t\t\t\t\t\t\t'body' => row['body'],\n\t\t\t\t\t\t\t'shortkey' => (keyCombination ? keyCombination.shortcut : '')\n\t\t\t\t\t\t]\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn [ 'list' => result, 'data' => data ];\n\t}\n\tfunction _messageToArray( object message ) {\n\t\treturn [\n\t\t\t'id' => message.id,\n\t\t\t'sender' => (message.user\n\t\t\t\t? (message.user.chatName\n\t\t\t\t\t? message.user.chatName\n\t\t\t\t\t: message.user.username\n\t\t\t\t\t)\n\t\t\t\t: (message.client\n\t\t\t\t\t? message.client.name\n\t\t\t\t\t: I('System')\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t'body' => ._formatBody(message.message),\n\t\t\t'sent' => message.timestampSent,\n\t\t\t'sentHuman' => formatTime(message.timestampSent),\n\t\t\t'colour' => (message.user ? '#0000FF' : '#FF0000')\n\t\t];\n\t}\n\t\n\tfunction _formatBody( string body ) {\n\t\tobject r = new Regexp('(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])', 'i');\n\t\treturn r.replaceAll(body, '<a style=\"color:#333399;\" target=\"_blank\" href=\"\\1\">\\1</a>');\n\t}\n\t\n\tfunction _getList( array area_ids, array user_ids) {\n\t\tarray list = [];\n\t\tarray order = [];\n\t\tarray sessions = [];\n\t\tarray totalList = [];\n\t\tarray activeList = Workflow.ChatSession.activeList(Workflow.SystemGroup.current(), area_ids, user_ids);\n\t\tarray visibleList = Workflow.ChatSession.visibleList(Workflow.SystemGroup.current(), area_ids, user_ids);\n\t\tarray chats = [];\n\t\tstring sqlQuery = \"select a.session,message,clientsentlast from (\n\t\t\t\tselect distinct on (session) session, client_fkey != 0 as clientsentlast\n\t\t\t\t\tfrom workflow_chatmessages\n\t\t\t\t\t\twhere session in (%SESSIONS%)\n\t\t\t\t\t\torder by session,timestampsent desc\n\t\t\t) as a join (\n\t\t\t\tselect distinct on (session) session, message\n\t\t\t\t\tfrom workflow_chatmessages\n\t\t\t\t\t\twhere session in (%SESSIONS%)\n\t\t\t\t\t\tand client_fkey != 0\n\t\t\t\t\t\torder by session,timestampsent desc\n\t\t\t) as b on a.session = b.session;\";\n\t\ttotalList = activeList.append(visibleList);\n\t\tif (totalList.size() > 0) {\n\t\t\ttotalList.each() using ( session ) {\n\t\t\t\tsessions.push(session.id);\n\t\t\t};\n\t\t\t\n\t\t\tObjRunObject.rawQuery(sqlQuery.replace('%SESSIONS%',sessions.join(','))).each() using ( chat ) {\n\t\t\t\tchats[\"${chat.session}\"] = [\n\t\t\t\t\t'session' => chat.session,\n\t\t\t\t\t'message' => chat.message,\n\t\t\t\t\t'clientSentLast' => chat.clientsentlast\n\t\t\t\t];\n\t\t\t};\n\t\t\t\n\t\t\ttotalList.each() using ( session ) {\n\t\t\t\tarray chat = (chats.keyExists(\"${session.id}\") ? chats[\"${session.id}\"] : []);\n\t\t\t\t\n\t\t\t\torder[] = session.errand.id;\n\t\t\t\tlist[\"${session.id}\"] = [\n\t\t\t\t\t'id' => session.errand.id,\n\t\t\t\t\t'chatSessionID' => session.id,\n\t\t\t\t\t'visible' => session.visible,\n\t\t\t\t\t'data' => [\n\t\t\t\t\t\t'id' => session.errand.id,\n\t\t\t\t\t\t'areaID' => session.area.id,\n\t\t\t\t\t\t'area' => session.area.name,\n\t\t\t\t\t\t'message' => (chat and chat.message\n\t\t\t\t\t\t\t? (chat.message.utf8Length() > 125 ? chat.message.utf8Slice(125) + '...' : chat.message)\n\t\t\t\t\t\t\t: I('No Message')),\n\t\t\t\t\t\t'client' => (session.client and session.client.name ? session.client.name : I('No Name')),\n\t\t\t\t\t\t'email' => (session.client and session.client.email ? session.client.email.emailAddress : I('No Sender')),\n\t\t\t\t\t\t'assigned' => (session.user ? 1 : 0),\n\t\t\t\t\t\t'owner' => (session.user ? session.user.username : I('Unassigned')),\n\t\t\t\t\t\t'startedHuman' => formatDateTime(session.timestampStarted),\n\t\t\t\t\t\t'started' => session.timestampStarted\n\t\t\t\t\t],\n\t\t\t\t\t'style' => [\n\t\t\t\t\t\t'bg' => (session.user and session.user.id == currentChatUser.id ? '#CFC' : '#FFF'),\n\t\t\t\t\t\t'bold' => (chat and chat.clientSentLast == 't' ? true : false)\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t\n\t\treturn [\n\t\t\t'list' => list,\n\t\t\t'order' => order\n\t\t];\n\t}\n\n\tfunction _getAllMessages( object session ) {\n\t\tarray list = [];\n\t\tWorkflow.ChatMessage.listBySession(session.id).each() using ( message ) {\n\t\t\tlist[] = ._messageToArray(message);\n\t\t};\n\t\tif( session.clientReportedAsInactive ) {\n\t\t\tstring clientName = (session.client ? session.client.name : I('No Name'));\n\t\t\tlist[] = [\n\t\t\t\t'id' => 0,\n\t\t\t\t'sender' => I('System'),\n\t\t\t\t'body' => I('{0} has become inactive and most likely closed the chat window.').expand(clientName),\n\t\t\t\t'sent' => session.timestampClientReportedAsInactive,\n\t\t\t\t'sentHuman' => formatTime(session.timestampClientReportedAsInactive),\n\t\t\t\t'colour' => '#000000'\n\t\t\t];\n\t\t\tlist = list.sort() using ( a, b ) {\n\t\t\t\tif( a['sent'] < b['sent'] ) return -1;\n\t\t\t\tif( a['sent'] == b['sent'] ) return 0;\n\t\t\t\tif( a['sent'] > b['sent'] ) return 1;\n\t\t\t};\n\t\t}\n\t\treturn list;\n\t}\n\t\n\tfunction _getMessages( number sessionID, number timestampLastMessage ) {\n\t\tarray list = [];\n\t\tWorkflow.ChatMessage.listBySessionAfterTimestampOnlyFromClient(sessionID, timestampLastMessage).each() using ( message ) {\n\t\t\tlist[] = ._messageToArray(message);\n\t\t};\n\t\tif( not list ) {\n\t\t\tobject session = Workflow.ChatSession.load(sessionID);\n\t\t\tif( not session.active ) {\n\t\t\t\tif( not session.clientReportedAsOffline ) {\n\t\t\t\t\tstring clientName = (session.client ? session.client.name : I('No Name'));\n\t\t\t\t\tlist[] = [\n\t\t\t\t\t\t'id' => 0,\n\t\t\t\t\t\t'sender' => I('System'),\n\t\t\t\t\t\t'body' => I('{0} has closed the chat window.').expand(clientName),\n\t\t\t\t\t\t'sent' => session.timestampEnded,\n\t\t\t\t\t\t'sentHuman' => formatTime(session.timestampEnded),\n\t\t\t\t\t\t'colour' => '#000000'\n\t\t\t\t\t];\n\t\t\t\t\tsession.setValue('clientReportedAsOffline', true);\n\t\t\t\t\tsession.save();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If we have not received any new messages from the client\n\t\t\t\t// we check if the client has become inactive.\n\t\t\t\t\n\t\t\t\tif( not session.clientReportedAsInactive ) {\n\t\t\t\t\tnumber now = Date.GMTnow();\n\t\t\t\t\tnumber timeout = (F('chat.inactive-timeout') ? F('chat.inactive-timeout') : 1);\n\t\t\t\t\tnumber timeoutSeconds = timeout * 60;\n\t\t\t\t\tnumber watermark = now - timeoutSeconds;\n\t\t\t\t\t\n\t\t\t\t\tif( session.timestampLastClientUpdate <= watermark ) {\n\t\t\t\t\t\t// If we get here we consider the client to have become inactive.\n\t\t\t\t\t\t// It is time to display a message.\n\t\t\t\t\t\tstring clientName = (session.client ? session.client.name : 'No Name');\n\t\t\t\t\t\tlist[] = [\n\t\t\t\t\t\t\t'id' => 0,\n\t\t\t\t\t\t\t'sender' => I('System'),\n\t\t\t\t\t\t\t'body' => I('{0} has become inactive and most likely closed the chat window.').expand(clientName),\n\t\t\t\t\t\t\t'sent' => now,\n\t\t\t\t\t\t\t'sentHuman' => formatTime(now),\n\t\t\t\t\t\t\t'colour' => '#000000'\n\t\t\t\t\t\t];\n\t\t\t\t\t\tsession.setValue('clientReportedAsInactive', true);\n\t\t\t\t\t\tsession.setValue('timestampClientReportedAsInactive', now);\n\t\t\t\t\t\tsession.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\t\n\tboolean _attemptedActiveSessionsCache = false;\n\tarray _activeSessionsCache;\n\tfunction _getActiveSessionsForCurrentUser() {\n\t\tif( not ._attemptedActiveSessionsCache ) {\n\t\t\t._activeSessionsCache = [];\n\t\t\tWorkflow.ChatSession.activeList(Workflow.SystemGroup.current(), Workflow.Area.idListForUserFromCache(),\n\t\t\t\t[ currentChatUser.id ]).each() using ( session )\n\t\t\t{\n\t\t\t\t._activeSessionsCache[] = session.id;\n\t\t\t};\n\t\t}\n\t\treturn ._activeSessionsCache;\n\t}\n\t\n\tfunction _getUnseenSessions() {\n\t\tarray sessionsWithUnseenMessages;\n\t\tobject sessionToShow;\n\t\tsessionsWithUnseenMessages = Workflow.ChatSession.haveUnseenMessagesList(Workflow.SystemGroup.current(), currentChatUser.id);\n\t\tif( sessionsWithUnseenMessages ) {\n\t\t\tsessionToShow = sessionsWithUnseenMessages[0];\n\t\t\tLogger.info(Logger.APPLICATION_CHAT,\n\t\t\t\t\"Sending unseen sessions [\" + sessionsWithUnseenMessages.join(', ') using( session ) { return session.id; } +\n\t\t\t\t\"] to ${currentChatUser.username} [${currentChatUser.id}]\");\n\t\t}\n\t\tif( sessionToShow ) {\n\t\t\treturn [\n\t\t\t\t'list' => sessionsWithUnseenMessages.process() using( session ) { return session.id; },\n\t\t\t\t'session' => [\n\t\t\t\t\t'id' => (sessionToShow.errand and sessionToShow.errand.id ? sessionToShow.errand.id : 0 ),\n\t\t\t\t\t'chatSessionID' => sessionToShow.id, \n\t\t\t\t\t'client' => (sessionToShow.client and sessionToShow.client.name ? sessionToShow.client.name : I('No Name')),\n\t\t\t\t\t'messages' => ._getAllMessages(sessionToShow),\n\t\t\t\t\t'area' => [\n\t\t\t\t\t\t'id' => (sessionToShow.area ? sessionToShow.area.id : 0)\n\t\t\t\t\t],\n\t\t\t\t\t'user' => [\n\t\t\t\t\t\t'openExternalSystem' => currentChatUser.openExternalSystem\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction getUpdate( array parameters ) {\n\t\tnumber session_id = 0;\n\t\tarray area_ids = [];\n\t\tarray user_ids = [];\n\t\tnumber current_time = Date.GMTnow();\n\t\tnumber blockchat_minutes = (F('chat.blacklist.time') ? F('chat.blacklist.time') : 0);\n\t\tnumber blockchat_seconds = blockchat_minutes * 60;\n\t\t\n\t\tif( currentChatUser.acceptChat ) {\n\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Update -> ${currentChatUser.username} [${currentChatUser.id}] - time since last update: \" + (closure {\n\t\t\t\treturn Date.GMTnow() - currentChatUser.timestampLastChatUpdate;\n\t\t\t}).invoke() + \" (${Date.GMTnow()})\");\n\t\t}\n\t\tcurrentChatUser.setValue('timestampLastChatUpdate', Date.GMTnow());\n\t\tcurrentChatUser.save();\n\t\tarea_ids = Workflow.Area.idListForUserFromCache();\n\t\t\n\t\tif(blockchat_minutes != 0) \t{\n\t\t\t\tarea_ids.each() using ( areaids ) {\n\t\t\t\t\tWorkflow.BlockedIPAddress.getIpAddressBlacklist( areaids ).each() using ( iplist ) {\n\t\t\t\t\t\t\tobject iplAdddress = Workflow.BlockedIPAddress.load(iplist.id);\n\t\t\t\t\t\t\tif(current_time - iplAdddress.timestampWhen > blockchat_seconds)\t{\n\t\t\t\t\t\t\t\tiplAdddress.setValue('active', false);\n\t\t\t\t\t\t\t\tiplAdddress.save();\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t}\n\t\t\n\t\tif( parameters.keyExists('session') ) {\n\t\t\tsession_id = parameters['session'].toNumber();\n\t\t}\n\t\t\n\t\treturn JSON.valueToJSON([\n\t\t\t'list' => ._getList(area_ids, [currentChatUser.id]),\n\t\t\t'current' => (closure {\n\t\t\t\tobject session = Workflow.ChatSession.load(session_id);\n\t\t\t\tif( session ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'client' => (session.client and session.client.name ? session.client.name : I('No Name')),\n\t\t\t\t\t\t'clientEmail' => (session.client and session.client.email ? session.client.email.emailAddress : ''),\n\t\t\t\t\t\t'preview' => session.nextClientMessagePreview,\n\t\t\t\t\t\t'showMessagePreview' => ( session.user && session.user.chatMessagePreview ? session.user.chatMessagePreview : 0 ),\n\t\t\t\t\t\t'messages' => ._getMessages(session.id, (parameters.keyExists('timestampLastMessage')\n\t\t\t\t\t\t\t? parameters['timestampLastMessage'].toNumber()\n\t\t\t\t\t\t\t: 0)),\n\t\t\t\t\t\t'tag' => (Workflow.Area.tagsFromCache( session.area.id ) ? true : false)\t\t\t\t\t\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}).invoke(),\n\t\t\t'feature' => (closure{\n\t\t\t\t\tif( F('chat.forced-tag') ) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( F('chat.optional-tag') )\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}).invoke(),\n\t\t\t'unseen' => ._getUnseenSessions(),\n\t\t\t'count' => ._getActiveSessionsForCurrentUser().size()\n\t\t]);\n\t}\n\t\n\tfunction sendMessage( array parameters ) {\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tif( session ) {\n\t\t\tnumber now = Date.GMTnow();\n\t\t\tobject message = new Workflow.ChatMessage();\n\t\t\tmessage.setValue('session', session.id);\n\t\t\tmessage.setValue('timestampSent', now);\n\t\t\tmessage.setValue('message', parameters['text']);\n\t\t\tmessage.setValue('user', currentChatUser);\n\t\t\tmessage.save();\n\t\t\tif( now > session.timestampLastAgentMessageSent ) {\n\t\t\t\tsession.setValue('timestampLastAgentMessageSent', now);\n\t\t\t\tsession.save();\n\t\t\t}\n\t\t\treturn JSON.valueToJSON(true);\n\t\t}\n\t\treturn JSON.valueToJSON(false);\t\t\t\n\t}\n\t\n\tfunction getAgents( array parameters ) {\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tif( session ) {\n\t\t\tobject area = Workflow.Area.load( session.area.id ); // Tiny to full\n\t\t\tif( ExternalQueueInterface.enabled() and (area.externalID or area.solidusServiceGroupID) ) {\n\t\t\t\tarray list = ExternalQueueInterface.getChatAgents(area);\n\t\t\t\tlist.unshift([ 'id' => 0, 'value' => I('Forward to Agent') ]);\n\t\t\t\treturn JSON.valueToJSON(list);\n\t\t\t} else {\n\t\t\t\treturn JSON.valueToJSON(._getAreaAgents(area.id));\n\t\t\t}\n\t\t} else {\n\t\t\treturn JSON.valueToJSON([]);\n\t\t}\n\t}\n\n\tfunction forwardToAgent( array parameters ) {\n\t\tnumber now = Date.GMTnow();\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tobject user = Workflow.User.load((parameters.keyExists('forward')\n\t\t\t? parameters['forward'].toNumber()\n\t\t\t: 0));\n\t\tobject fromUser = Workflow.User.load( (session.user.id ? session.user.id : 0));\n\t\t\n\t\tif( session and user ) {\n\t\t\tobject area = session.area;\n\t\t\tif( ExternalQueueInterface.enabled() and (area.externalID or area.solidusServiceGroupID) ) {\n\t\t\t\tif( ExternalQueueInterface.forwardChatToAgent(session, user) ) {\n\t\t\t\t\t// The chat is set to have unseen messages so that it is automatically\n\t\t\t\t\t// shown to the agent it is forwarded to.\n\t\t\t\t\tsession.setValue('hasUnseenMessages', true);\n\t\t\t\t\tsession.setValue('user', null);\n\t\t\t\t\tsession.setValue('fromAgent', null);\n\t\t\t\t\tsession.setValue('status', Workflow.ChatSession.STATUS_WAITING_ON_AGENT);\n\t\t\t\t\tsession.save();\n\t\t\t\t\treturn JSON.valueToJSON(true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The chat is set to have unseen messages so that it is automatically\n\t\t\t\t// shown to the agent it is forwarded to.\n\t\t\t\tsession.setValue('hasUnseenMessages', true);\n\t\t\t\tsession.setValue('user', user);\n\t\t\t\tsession.setValue('fromAgent', fromUser);\n\t\t\t\tsession.setValue('timestampForward', now);\n\t\t\t\tsession.save();\n\t\t\t\treturn JSON.valueToJSON(true);\n\t\t\t}\n\t\t}\n\t\treturn JSON.valueToJSON(false);\n\t}\n\t\n\tfunction forwardToArea( array parameters ) {\n\t\tobject session;\n\t\tobject toArea;\n\t\tnumber now = Date.GMTnow();\n\t\tobject fromUser;\n\t\tobject fromArea;\n\t\tif( parameters.keyExists('forward_area_id') or parameters.forward_area_id != 0 ) {\n\t\t\ttoArea = Workflow.Area.tiny( parameters.forward_area_id.toNumber() );\n\t\t\tsession = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\t\tfromUser = Workflow.User.tiny( (session.user.id ? session.user.id : 0) );\n\t\t\tfromArea = Workflow.Area.tiny( (session.area.id ? session.area.id : 0) );\n\t\t\t\n\t\t\tif( ChatQueueInterface.isOpen( toArea ) ){\n\t\t\t\t//session.area need to change because session area should be updated with \n\t\t\t\t// forward area ID.\n\t\t\t\tsession.area = toArea;\n\t\t\t\tif( ChatQueueInterface.addChat( session ) ){\n\t\t\t\t\tsession.setValue('area', toArea);\n\t\t\t\t\tsession.setValue('fromAgent', fromUser);\n\t\t\t\t\tsession.setValue('timestampForward', now);\n\t\t\t\t\tsession.setValue('fromArea', fromArea);\n\t\t\t\t\tsession.save();\n\t\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Chat Session [${session.id}] successfully forwarded to Area [${parameters.forward_area_id}]\");\n\n\t\t\t\t\treturn JSON.valueToJSON(true);\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Forward to area not possible at the moments. Possibly no agents available.\");\n\t\t\t\t\treturn JSON.valueToJSON(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn JSON.valueToJSON(false);\n\t}\n\t\n\tfunction sendChatHistoryEmailToClient( object session ){\n\t\tobject bodyContents = null;\n\t\tstring to = (session.client && session.client.email ? session.client.email.emailAddress : '');\n\t\tobject logClosure = closure ( string text ) {};\n\t\tobject connection = new Mail.Connection();\n\t\tobject to_addr = new Mail.Address( to );\n\t\tbodyContents = (closure{\n\t\t\tstring body = \"\";\n\t\t\tstring htmlBody;\n\t\t\tobject message = new Mail.Message();\n\t\t\tobject text = new Mail.MessagePart();\n\t\t\tobject area = Workflow.Area.load(session.area.id);\n\t\t\tarray messages = Workflow.ChatMessage.listBySession( session.id );\n\t\t\tmessage.header = new Mail.MessageHeader();\t\t\n\t\t\tmessage.header.to.add(to_addr);\t\t\n\t\t\tmessage.header.subject = I('Chat history');\n\t\t\tmessage = MailUtilities.setOutgoingHeader(message, area.replyToEmailAddress);\n\t\t\tmessages.each() using ( content ) {\n\t\t\t\tstring sender = (content.user\n\t\t\t\t\t\t\t\t? (content.user.chatName ? content.user.chatName : content.user.username)\n\t\t\t\t\t\t\t\t: (session.client ? session.client.name : I('No Name'))\n\t\t\t\t\t\t\t\t);\n\t\t\t\tbody += \"(${formatDateTime(content.timestampSent)}) ${sender}: ${content.message}\\r\\n\";\n\t\t\t};\n\t\t\tbody = Regexp.replaceAll(\"\\r\\n\", body, \"\\n\");\n\t\t\tbody = Regexp.replaceAll(\"\\r\", body, \"\\n\");\n\t\t\tbody = Regexp.replaceAll(\"\\n\", body, \"\\r\\n\");\n\n\t\t\ttext.type = Mail.Mime.TYPETEXT;\n\t\t\ttext.subtype = \"plain\";\n\t\t\ttext.charset = \"UTF-8\";\n\t\t\ttext.content = body;\n\t\t\tmessage.content = text;\n\t\t\treturn message;\n\t\t}).invoke();\n\n\t\tif( MailUtilities.sendMessage(connection, bodyContents, logClosure) ) {\n\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"- Chat history email to [${to}] Done.\");\n\t\t} else {\n\t\t\tLogger.info(Logger.APPLICATION_CHAT,\"!! Failed chat history to send in email.\");\n\t\t}\n\t}\n\n\tfunction finishSession( array parameters ) {\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tboolean sessionVisible = ( parameters.keyExists('visible' ) ? parameters['visible'].toBoolean() : false);\n\t\tif( sessionVisible ){\n\t\t\tsession.setValue('visible',false );\n\t\t\tsession.save();\n\t\t\tLogger.info(Logger.APPLICATION_CHAT,\"Chat session [${session.id}] has invisible.\");\n\t\t\treturn JSON.valueToJSON([ 'status' => 0]);\n\t\t}else{\n\t\t\tif( session ) {\n\t\t\t\tsession.close(false, false);\n\t\t\t\tChatQueueInterface.endChat(session);\n\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Chat session [${session.id}] has successfully closed.\");\n\t\t\t\tif( F('chat.history-send-to-client') ){\n\t\t\t\t\tmonitor{\n\t\t\t\t\t\t.sendChatHistoryEmailToClient( session );\n\t\t\t\t\t}handle{\n\t\t\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"!! Unable to send email: ${err.str.trim(\"\\n\")}\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn JSON.valueToJSON(['status' => 1]);\n\t\t\t}\n\t\t}\n\t\tLogger.info(Logger.APPLICATION_CHAT, \"Trying to close the chat session [${parametes[0]}], failure!\");\n\t\treturn JSON.valueToJSON(['status' => 2]);\n\t}\n\t\n\tfunction acquireSession( array parameters ) {\n\t\tnumber errandId = (parameters.keyExists('session') ? parameters['session'].toNumber() : 0);\n\t\tobject chatSession = Workflow.ChatSession.chatSessionByErrandID( errandId );\n\t\tobject session = Workflow.ChatSession.load( chatSession.id );\n\t\tboolean acquired = false;\n\t\tobject organisation = Workflow.Organisation.byAreaID( session.area.id );\n\t\t\n\t\t// Workflow.Organisation.byAreaID() returns organisation object of view Tiny.\n\t\t// More data is needed so full object is loaded.\n\t\torganisation = Workflow.Organisation.load( organisation.id );\n\t\tif( session and session.user and session.user.id == currentChatUser.id ) {\n\t\t\tacquired = true;\n\t\t} else if( session and session.user == null ) {\n\t\t\tsession.setValue('user', currentChatUser);\n\t\t\tsession.setValue('timestampAssigned', Date.GMTnow());\n\t\t\tsession.save();\n\t\t\tacquired = true;\n\t\t}\n\n\t\treturn JSON.valueToJSON([\n\t\t\t'acquired' => acquired,\n\t\t\t'chatSessionID' => session.id,\n\t\t\t'externalData' => session.externalData,\n\t\t\t'startedHuman' => formatDateTime(session.timestampStarted),\n\t\t\t'messages' => (closure {\n\t\t\t\tif( acquired) {\n\t\t\t\t\treturn ._getAllMessages(session);\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}).invoke(),\n\t\t\t'area' => [\n\t\t\t\t'id' => (session and session.area ? session.area.id : 0),\n\t\t\t\t'name' => (session and session.area ? session.area.name : ''),\n\t\t\t\t'organisation' => ( organisation ? organisation.name : ''),\n\t\t\t\t'answers' => (closure {\n\t\t\t\t\tif( acquired && F('alternative-answers.show-everything')) {\n\t\t\t\t\t\treturn ._getAlternativeAnswers( session.area.id );\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}).invoke(),\n\t\t\t\t'externalSystemURL' => (closure {\n\t\t\t\t\tif( acquired ) {\n\t\t\t\t\t\t// The area object in Workflow.ChatSession is of view Tiny.\n\t\t\t\t\t\t// This means that it does not contain the variables that are needed here.\n\t\t\t\t\t\t// That is why the full area object is loaded.\n\t\t\t\t\t\tobject area = Workflow.Area.load(session.area.id);\n\t\t\t\t\t\tif( area.openExternalSystemRules ) {\n\t\t\t\t\t\t\treturn area.openExternalSystemRules.url;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif( organisation.openExternalSystemRules )\n\t\t\t\t\t\t\t\treturn organisation.openExternalSystemRules.url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}).invoke()\n\t\t\t],\n\t\t\t'user' => [\n\t\t\t\t'openExternalSystem' => currentChatUser.openExternalSystem\n\t\t\t],\n\t\t\t'client' => (session.client and session.client.name ? session.client.name : I('No Name')),\n\t\t\t'clientEmail' => (session.client and session.client.email ? session.client.email.emailAddress : ''),\n\t\t\t'tag' => (closure{\n\t\t\t\t\tif( Workflow.Area.tagsFromCache( session.area.id ))\n\t\t\t\t\t\treturn true;\n\t\t\t\t\treturn false;\n\t\t\t\t}).invoke(),\n\t\t\t'feature' => (closure{\n\t\t\t\t\tif( F('chat.forced-tag') ) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( F('chat.optional-tag') )\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}).invoke(),\n\t\t\t'errand_notes' => ._getErrandNotes( errandId ),\n\t\t\t'client_notes' => ._getClientNotes( errandId ),\n\t\t\t'ipaddress' =>  session.ipAddress\n\t\t]);\n\t}\n\n\tfunction markAsSeen( array parameters ) {\n\t\tarray sessions = [];\n\t\tif( parameters.keyExists('sessions') ) {\n\t\t\tsessions = parameters['sessions'].toArray(',');\n\t\t}\n\t\tsessions.each() using ( id ) {\n\t\t\tobject session = Workflow.ChatSession.load(id.toNumber());\n\t\t\tif( session ) {\n\t\t\t\tsession.setValue('hasUnseenMessages', false);\n\t\t\t\tsession.save();\n\t\t\t\tLogger.info(Logger.APPLICATION_CHAT,\n\t\t\t\t\t\"Marking session [${session.id}] owned by ${session.user.username} [${session.user.id}] as seen\");\n\t\t\t}\n\t\t};\n\t\treturn JSON.valueToJSON(true);\n\t}\n\n\tfunction fetchContacts( array parameters ) {\n\t\tstring componentName = (parameters.keyExists('component') ? parameters['component'] : 'GlobalChat');\n\t\tnumber tab = (parameters.keyExists('tab') ? parameters['tab'].toNumber() : 1);\n\t\tnumber page = (parameters.keyExists('page') ? parameters['page'].toNumber() : 0);\n\t\tboolean answered = (parameters.keyExists('answered') ? (parameters['answered'].toNumber() ? true : false) : true);\n\t\tboolean unanswered = (parameters.keyExists('unanswered') ? (parameters['unanswered'].toNumber() ? true : false) : true);\n\t\tstring address = parameters['address'];\n\t\tif( address ) {\n\t\t\tWorkflow.Errand.OtherContactsComponent = componentName;\n\t\t\tWorkflow.Errand.OtherContactsTab = 'chat-contacts-tab';\n\t\t\tWorkflow.Errand.OtherContactsByDomainTab = 'chat-contacts-by-domain-tab';\n\t\t\tWorkflow.Errand.OtherContactsShowAnswerd = 'chat-contacts-show-answered';\n\t\t\tWorkflow.Errand.OtherContactsShowUnanswered = 'chat-contacts-show-unanswered';\n\t\t\tWorkflow.Errand.OtherContactsPrevious = 'chat-contacts-previous';\n\t\t\tWorkflow.Errand.OtherContactsNext = 'chat-contacts-next';\n\t\t\tWorkflow.Errand.OtherContactsByDomainPrevious = 'chat-contacts-by-domain-previous';\n\t\t\tWorkflow.Errand.OtherContactsByDomainNext = 'chat-contacts-by-domain-next';\n\t\t\tWorkflow.Errand.OtherContactsOptions = 'chat-contacts-options';\n\t\t\tWorkflow.Errand.OtherContactsContent = 'chat-contacts-content';\n\t\t\tWorkflow.Errand.OtherContactsVarContactsTab = 'ChatContactsTab';\n\t\t\tWorkflow.Errand.OtherContactsVarContactsPage = 'ChatContactsPage';\n\t\t\tWorkflow.Errand.OtherContactsAddress = \"'${address}'\";\n\t\t\tWorkflow.Errand.OtherContactsFireRequest = \"_('${componentName}').fireCallbackRequest\";\n\t\t\tWorkflow.Errand.OtherContactsFireRequestCallback = \"function( value ) { $('${componentName}_ContactsBoxContent').innerHTML = value; }\";\n\t\t\treturn '<div style=\"margin-bottom:10px;\">' +\n\t\t\t\tWorkflow.Errand.otherContactsAsHTML(null, address, answered, unanswered, tab, page) +\n\t\t\t'</div>';\n\t\t}\n\t\t\n\t\treturn I('No Other Contact Found');\n\t}\n\t\n\t\n\t\t/**\n\t * @function fetchTagList\n\t * @declaration function fetchTagList( number id )\n\t * @brief Fetch the normal and high priority tag list for a given area.\n\t * @param number id The area id to load\n\t * @return A keyed array with 'high' and 'normal' values, each one is a hybrid datasource for tags in that category.\n\t */\n\tfunction fetchTagList( array param ) {\n\t\tstring tagdisplay;\n\t\tnumber id = param['id'].toNumber();\n\t\tnumber session_id = param['session_id'].toNumber();\n\t\t\ttagdisplay += \"<div id='tag_list_display'><div style='height: 200px; overflow: auto;'><ul>\";\n\t\t\tWorkflow.Area.tagsFromCache( id ).each() using ( tag_cache ) {\n\t\t\t\tnumber tagid = tag_cache['id'];\n\t\t\t\tstring tagval = tag_cache['display'];\n\t\t\t\tif( not tag_cache['forDelete']  ){\n\t\t\t\ttagdisplay += \"<li id='chattag_itemslists'><input type='checkbox' name='tagchecks' id='tagcheckids${tagid}' value='${tagval}' onclick='checkOneTag(${session_id},${tagid},1)'/><label> ${tagval}</label></li>\";\n\t\t\t\t}\n\t\t\t};\n\t\t\ttagdisplay += \"</ul></div></div>\";\n\t\treturn tagdisplay;\n\t}\n\tfunction displayTagList( array parameters ) {\n\t\t\tnumber areaid = parameters['areaid'].toNumber();\n\t\t\tnumber session_id = parameters['session'].toNumber();\t\n\t\t\tstring tagdisplay;\n\t\t\ttagdisplay += \"<div id='tag_list_display'><div style='padding:5px'><h3 style='margin:0;padding:0'>\"+I('You have not chosen a classification for this errand.')+\"</h3></div><div style='padding:5px'>\"+I('You can navigate the list by pressing the up and down arrows and select a classification by pressing space.')+\"</div><div style='padding:5px'>\"+I('Press Escape to Cancel')+\"</div><div style='height: 200px; overflow: auto;'><ul>\";\n\t\t\tWorkflow.Area.tagsFromCache(areaid).each() using ( tag_cache ) {\n\t\t\t\tnumber tagid = tag_cache['id'];\n\t\t\t\tstring tagval = tag_cache['display'];\n\t\t\t\tif( not tag_cache['forDelete']  ){\n\t\t\t\t\ttagdisplay += \"<li id='chattag_itemslists'><input type='checkbox' name='tagcheck' id='tagcheckid${tagid}' value='${tagval}' /><label> ${tagval}</label></li>\";\n\t\t\t\t}\n\t\t\t};\n\t\t\ttagdisplay += \"</ul></div></div>\";\n\t\t\treturn tagdisplay;\n\t}\n\t\n\tfunction finishChatSessionTag( array params ){\t\n\t\tstring tagname = params['withTag'];\t\n\t\tnumber id = params['id'].toNumber();\n\t\tnumber errandId = (params.keyExists('value') ? params['value'].toNumber() : 0);\n\t\tobject chatSession = Workflow.ChatSession.chatSessionByErrandID( errandId );\n\t\tobject session = Workflow.ChatSession.load( chatSession.id );\n\t\tobject errand = Workflow.Errand.load( errandId );\n\t\tarray tags = [];\n\t\tobject tag;\n\t\tarray  tagIDs = ((params['tagid'] isa array) ? params['tagid'] : [params['tagid']]);\n\t\tif(session){\n\t\t\t\tif(tagname == 'withtag') {\n\t\t\t\t\ttagIDs.each() using ( tagid ){\n\t\t\t\t\t\ttag = Workflow.Tag.load( tagid.toNumber() );\n\t\t\t\t\t\terrand.setValue('tags', errand.tags.addObject( tag ));\n\t\t\t\t\t\terrand.save();\n\t\t\t\t\t};\n\t\t\t\t}else{\n\t\t\t\t\terrand.setValue('tags', null);\n\t\t\t\t\terrand.save();\n\t\t\t\t}\n\t\t\treturn JSON.valueToJSON(true);\n\t\t}\t\n\t\treturn JSON.valueToJSON(false);\n\t}\n\t\n\tfunction blockIPAddress( array params )\t{\t\n\t\t\tstring ipaddress = params['ip'];\n\t\t\tnumber errandId = params['errand'].toNumber();\n\t\t\tstring email = params['email'];\n\t\t\tnumber date_now = Date.GMTnow();\n\t\t\tobject blacklist;\n\t\t\tobject chatsession;\n\t\t\tobject area;\n\t\t\t\t\t\n\t\t\tchatsession = Workflow.ChatSession.loadSessionByErrand( errandId );\n\t\t\t\n\t\t\tblacklist = new Workflow.BlockedIPAddress();\n\t\t\tblacklist.setValue('ipAddress', \"${ipaddress}\");\n\t\t\tblacklist.setValue('timestampWhen', date_now);\n\t\t\tblacklist.setValue('active', true);\n\t\t\tblacklist.setValue('area', chatsession.area);\n\t\t\tblacklist.setValue('user', chatsession.user);\n\t\t\tblacklist.setValue('email', \"${email}\");\n\t\t\tblacklist.save();\n\t\t\t\n\t\t\tif( F('chat.forced-tag'))\n\t\t\t\treturn 'forcedtag';\n\t\t\telse if ( F('chat.optional-tag'))\n\t\t\t\treturn 'optionaltag';\n\t\t\telse\n\t\t\t\treturn 'none';\t\n\t}\n\t\n\tfunction checkFeature() {\n\t\tif( F('chat.forced-tag'))\n\t\t\treturn 'forcedtag';\n\t\telse if ( F('chat.optional-tag'))\n\t\t\treturn 'optionaltag';\n\t\telse\n\t\t\treturn 'none';\t\t\t\n\t}\n\tfunction chatAnswerSearch( array parameters ) {\n\t\tarray area_list = [];\n\t\tarray seenList = [];\n\t\tarray result = [];\n\t\tarray results = [];\n\t\tstring body = '';\n\t\tobject keyCombination;\n\n\t\tnumber filterList = parameters['filterList'].toNumber();\n\t\tstring term = parameters['search_term'];\n\n\t\tif( filterList > 0 ) {\n\t\t\tarea_list = [ filterList ];\n\t\t} else if( filterList <= 0 ) {\n\t\t\tarea_list = Workflow.Area.idListForUser();\n\t\t}\n\n\t\tresult['order'] = [];\n\t\tresult['list'] = [];\n\t\tWorkflow.Search.run(\"custom:answer locations:${area_list.join(',')} type:contents-keyword source:either state:any published:yes $term exact:no time:both sort-asc:subject limit:100 offset:0\").each() using ( row ) {\n\t\t\tif( row['body'] ) {\n\t\t\t\tif( row['body'].utf8Length() > 50)\n\t\t\t\t\tbody = row['body'].utf8Slice(50) + '...';\n\t\t\t\telse\n\t\t\t\t\tbody = row['body'];\n\n\t\t\t\tkeyCombination = Workflow.ChatKeyboardShortcut.getKeys( row['id'] );\n\t\t\t\tresult['order'][] = row['id'];\n\t\t\t\tresult['list']['' + row['id']] = [\n\t\t\t\t'id' => row['id'],\n\t\t\t\t'data' => [\n\t\t\t\t\t'area' => 'All',\n\t\t\t\t\t'left_arrow' => '<img src=\"{0}\" onclick=\"_publishedAnswerCopyTo({1})\" style=\"vertical-align:top;background-color: #FCAB46; cursor: pointer;\" border=\"0\" />'.expand( uriForImageResource('submit_arrow_left.png'), row['id']),\n\t\t\t\t\t'subject' => row['subject'],\n\t\t\t\t\t'trimBody' => body + '&nbsp;<span style=\"color:#898E79;\">(' +(keyCombination ? keyCombination.shortcut : '')+')</span>',\n\t\t\t\t\t'body' => row['body'],\n\t\t\t\t\t'shortkey' => (keyCombination ? keyCombination.shortcut : '')\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t}\n\t\t};\n\t\treturn JSON.valueToJSON( result );\n\t}\n\tfunction createNoteAttachments( object note, array attachments ) {\n\t\tarray list = [];\n\t\t\n\t\tstring note_id = '' + note.id;\n\t\tstring path_id = note_id.blocks(1).join('/') + '/' + note_id;\n\t\tstring attachmentsDirectory = (Config.CachePath - 'Cache/') + 'Workflow/Note-attachments/' + path_id + '/';\n\t\tstring uploadsDirectory = (Config.CachePath - 'Cache/') + 'Workflow/Temporary-uploads/';\n\t\t\n\t\tDirectory.build(attachmentsDirectory);\n\t\tGUIKit.loadComponent('BackgroundFileUploader');\n\t\tattachments.eachWithIndex() using ( id, index ) {\n\t\t\tstring localName = 'file-' + index;\n\t\t\tstring newPath = attachmentsDirectory + localName;\n\t\t\tobject attachment;\n\t\t\tobject file = new GUIKit.BackgroundFileUploaderUploadedFile(id, uploadsDirectory);\n\t\t\t\n\t\t\tfile.moveTo(newPath);\n\t\t\t\n\t\t\tattachment = new Workflow.NoteAttachment();\n\t\t\tattachment.setValue('localPath', newPath);\n\t\t\tattachment.setValue('localName', localName);\n\t\t\tattachment.setValue('fileName', file.name);\n\t\t\tattachment.save();\n\t\t\t\n\t\t\tlist[] = attachment;\n\t\t};\n\t\t\n\t\treturn list;\n\t}\n\tfunction saveNote( array parameters ) {\n\t\tarray notes;\n\t\tarray list;\n\t\tobject errandView;\n\t\tobject note;\n\t\tobject client;\n\t\tobject thread = new Workflow.Thread();\n\t\tstring type = parameters['type'];\n\t\tnumber errand = parameters['errand'].toNumber();\n\t\tstring text = parameters['text'];\n\t\tstring attachments = parameters['attachments'];\n\t\tarray attachment = attachments.dissect(',');\n\t\tswitch( type ) {\n\t\t\tcase 'errand':\n\t\t\t\terrandView = Workflow.Errand.loadThreadView( errand );\n\t\t\t\tif( errandView ) {\n\t\t\t\t\tobject notesView;\n\t\t\t\t\tif( not errandView.thread ) {\n\t\t\t\t\t\tthread.setValue(\"errands\", [errandView]);\n\t\t\t\t\t\terrandView.setValue(\"thread\",thread);\n\t\t\t\t\t\tthread.save();\n\t\t\t\t\t\terrandView.save();\n\t\t\t\t\t}\n\t\t\t\t\tnotesView = Workflow.Thread.loadNotesView( (errandView.thread ? errandView.thread.id : 0) );\n\t\t\t\t\tif( notesView ) {\n\t\t\t\t\t\tnote = new Workflow.Note();\n\t\t\t\t\t\tnote.setValue('writer', currentChatUser);\n\t\t\t\t\t\tnote.setValue('timestampWritten', Date.GMTnow());\n\t\t\t\t\t\tnote.setValue('note', text);\n\t\t\t\t\t\tnote.save();\n\t\t\t\t\t\tif( attachments ) {\n\t\t\t\t\t\t\tnote.setValue('attachments', .createNoteAttachments(note, attachment));\n\t\t\t\t\t\t\tnote.save();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnotesView.setValue('notes', notesView.notes.addObject(note));\n\t\t\t\t\t\tnotesView.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'client':\n\t\t\t\terrandView = Workflow.Errand.loadClientView( errand );\n\t\t\t\tif( not errandView.client ) {\n\t\t\t\t\tclient = new Workflow.Person(); //Empty client\n\t\t\t\t\tclient.save();\n\t\t\t\t\terrandView.setValue('client', client);\n\t\t\t\t\terrandView.save();\n\t\t\t\t}\n\t\t\t\tif( errandView and errandView.client ) {\n\t\t\t\t\tnote = new Workflow.Note();\n\t\t\t\t\tnote.setValue('writer', currentChatUser);\n\t\t\t\t\tnote.setValue('timestampWritten', Date.GMTnow());\n\t\t\t\t\tnote.setValue('note', text);\n\t\t\t\t\tnote.save();\n\t\t\t\t\tif( attachments ) {\n\t\t\t\t\t\tnote.setValue('attachments', .createNoteAttachments(note, attachment));\n\t\t\t\t\t\tnote.save();\n\t\t\t\t\t}\n\t\t\t\t\terrandView.client.setValue('notes', errandView.client.notes.addObject(note));\n\t\t\t\t\terrandView.client.save();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tif( note ) {\n\t\t\treturn JSON.valueToJSON([\n\t\t\t\t'note' => [\n\t\t\t\t\t'id' => note.id\n\t\t\t\t]\n\t\t\t]);\n\t\t} else {\n\t\t\treturn JSON.valueToJSON([\n\t\t\t\t'error' => true\n\t\t\t]);\n\t\t}\n\t}\n\n\tfunction removeNote( array parameters ) {\n\t\tarray notes;\n\t\tarray list;\n\t\tobject errandThread;\n\t\tobject n;\n\t\tstring type = parameters['type'];\n\t\tnumber errand = parameters['errand'].toNumber();\n\t\tnumber note = parameters['note'].toNumber();\n\t\tswitch( type ) {\n\t\t\tcase 'errand':\n\t\t\t\terrandThread = Workflow.Errand.loadThreadView(errand);\n\t\t\t\tif( errandThread ) {\n\t\t\t\t\tobject t = Workflow.Thread.loadNotesView(errandThread.thread.id);\n\t\t\t\t\tif( t ) {\n\t\t\t\t\t\tn = t.notes.objectWithID(note);\n\t\t\t\t\t\tif( n ) {\n\t\t\t\t\t\t\tt.setValue('notes', t.notes.removeObjectWithID(n.id));\n\t\t\t\t\t\t\tt.save();\n\t\t\t\t\t\t\tn.delete();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'client':\n\t\t\t\terrandThread = Workflow.Errand.loadClientView(errand);\n\t\t\t\tif( errandThread and errandThread.client ) {\n\t\t\t\t\tn = errandThread.client.notes.objectWithID(note);\n\t\t\t\t\tif( n ) {\n\t\t\t\t\t\terrandThread.client.setValue('notes', errandThread.client.notes.removeObjectWithID(n.id));\n\t\t\t\t\t\terrandThread.client.save();\n\t\t\t\t\t\tn.delete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn 'removeNote';\n\t}\n\n\tfunction _getErrandNotes( number errandId ){\n\t\tarray list = [];\n\t\tobject errand = Workflow.Errand.loadThreadView( errandId );\n\t\tobject thread;\n\t\tarray notes;\n\t\tif( errand.thread ){\n\t\t\tthread = Workflow.Thread.loadNotesView( errand.thread.id ); \n\t\t\tnotes = thread.notes.sort(Array.SORT_DESCENDING ) using ( a, b ) {\n\t\t\t\tif( a.timestampWritten < b.timestampWritten ) return -1;\n\t\t\t\tif( a.timestampWritten == b.timestampWritten ) return 0;\n\t\t\t\tif( a.timestampWritten > b.timestampWritten ) return 1;\n\t\t\t};\n\t\t\tnotes.each() using ( note ) {\n\t\t\t\t\tlist[] = [\n\t\t\t\t\t'id' => note.id,\n\t\t\t\t\t'username' => note.writer.username,\n\t\t\t\t\t'note' => note.note,\n\t\t\t\t\t'writtenDate' => formatDateTime( note.timestampWritten ),\n\t\t\t\t\t'attachments' => (closure {\n\t\t\t\t\t\tarray attachmentList = [];\n\t\t\t\t\t\tnote.attachments.each() using( attachment ) {\n\t\t\t\t\t\t\tattachmentList[] = [\n\t\t\t\t\t\t\t\t'fileName' => attachment.fileName,\n\t\t\t\t\t\t\t\t'downloadURL' => uriForApplicationActionWithCommand('workflow', \"note/${note.id}/attachment/${attachment.id}/\" + attachment.fileName.urlEncode())\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn attachmentList;\n\t\t\t\t\t}).invoke()\n\t\t\t\t];\n\t\t\t};\n\t\t\treturn list;\n\t\t}\n\t\treturn [];\n\t}\n\n\tfunction _getClientNotes(number errandId ){\n\t\tarray list = [];\n\t\tobject errand = Workflow.Errand.loadClientView( errandId );\n\t\tif( errand.client ) {\n\t\t\tarray notes = errand.client.notes.sort(Array.SORT_DESCENDING ) using ( a, b ) {\n\t\t\t\tif( a.timestampWritten < b.timestampWritten ) return -1;\n\t\t\t\tif( a.timestampWritten == b.timestampWritten ) return 0;\n\t\t\t\tif( a.timestampWritten > b.timestampWritten ) return 1;\n\t\t\t};\n\t\t\tnotes.each() using ( note ) {\n\t\t\t\tlist[] = [\n\t\t\t\t\t'id' => note.id,\n\t\t\t\t\t'username' => note.writer.username,\n\t\t\t\t\t'note' => note.note,\n\t\t\t\t\t'writtenDate' => formatDateTime(note.timestampWritten),\n\t\t\t\t\t'attachments' => (closure {\n\t\t\t\t\t\tarray attachmentList = [];\n\t\t\t\t\t\tnote.attachments.each() using( attachment ) {\n\t\t\t\t\t\t\tattachmentList[] = [\n\t\t\t\t\t\t\t\t'fileName' => attachment.fileName,\n\t\t\t\t\t\t\t\t'downloadURL' => uriForApplicationActionWithCommand('workflow', \"note/${note.id}/attachment/${attachment.id}/\" + attachment.fileName.urlEncode())\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn attachmentList;\n\t\t\t\t\t}).invoke()\n\t\t\t\t];\n\t\t\t};\n\t\t\treturn list;\n\t\t}\n\t\treturn [];\n\t}\n\t\n}\n\nCache.page = new CentionBase();\n"], "fixing_code": ["uses 'chatqueue/chatqueue';\nuses 'asyncJsonRPC';\nuses '/cention/webroot/Cention.app/Support/Pages/CentionBase';\n\nglobal {\n\tobject currentChatUser;\n}\n\nnamespace ChatMCAM {\n\tfunction init {\n\t\tcurrentChatUser = Workflow.User.fetchUserObject();\n\t\tWorkflow.FeatureSystem.setup();\n\t\tExternalQueueInterface.setup();\n\t}\n\n\tfunction _getAreaAgents( number area_id ) {\n\t\treturn Array.append( [ [ 'id' => 0, 'value' => I('Forward To Agent') ] ], (closure {\n\t\t\tarray list = [];\n\t\t\tWorkflow.User.listFromCache(area_id).each() using ( item ) {\n\t\t\t\tif( item['id'] != currentChatUser.id ) {\n\t\t\t\t\tobject user = Workflow.User.load(item['id']);\n\t\t\t\t\tif( user and user.acceptChat ) {\n\t\t\t\t\t\tlist[] = item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn list;\n\t\t}).invoke());\n\t}\n\tfunction _getAlternativeAnswers( number area_id ) {\n\t\t\tarray list = [];\n\t\t\tarray data = [];\n\t\t\tarray results = [];\n\t\t\tarray result = [];\n\t\t\tstring body = '';\n\t\t\tobject keyCombination;\n\t\t\tobject area = Workflow.Area.load( area_id );\n\n\t\t\tif( area ) {\n\t\t\t\tobject searchRules = area.getExternalSearchRules();\n\t\t\t\tif( searchRules and searchRules.enabled and ExternalSearchInterface.isEnabled() ) {\n\t\t\t\t\tresults = ExternalSearchInterface.templates(searchRules, true);\n\t\t\t\t} else {\n\t\t\t\t\tresults = Workflow.Search.run(\"custom:answer locations:${area.id} type:contents-keyword source:either state:any published:yes exact:no time:both sort-asc:subject limit:1000 offset:0\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult['order'] = [];\n\t\t\tresult['list'] = [];\n\t\t\tresults.each() using ( row ) {\n\t\t\t\tif( row['body'] ){\n\n\t\t\t\t\tif( row['body'].utf8Length() > 50)\n\t\t\t\t\t\tbody = row['body'].utf8Slice(50) + '...';\n\t\t\t\t\telse\n\t\t\t\t\t\tbody = row['body'];\n\n\t\t\t\t\tkeyCombination = Workflow.ChatKeyboardShortcut.getKeys( row['id'] );\n\t\t\t\t\tresult['order'][] = row['id'];\n\t\t\t\t\tresult['list']['' + row['id']] = [\n\t\t\t\t\t\t'id' => row['id'],\n\t\t\t\t\t\t'data' => [ \n\t\t\t\t\t\t\t'left_arrow' => '<img src=\"{0}\" onclick=\"_publishedAnswerCopyTo({1})\" style=\"vertical-align:top;background-color: #FCAB46; cursor: pointer;\" border=\"0\" />'.expand( uriForImageResource('submit_arrow_left.png'), row['id']),\n\t\t\t\t\t\t\t'subject' => row['subject'],\n\t\t\t\t\t\t\t'trimBody' => body + '&nbsp;<span style=\"color:#898E79;\">(' +(keyCombination ? keyCombination.shortcut : '')+')</span>',\n\t\t\t\t\t\t\t'body' => row['body'],\n\t\t\t\t\t\t\t'shortkey' => (keyCombination ? keyCombination.shortcut : '')\n\t\t\t\t\t\t]\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn [ 'list' => result, 'data' => data ];\n\t}\n\tfunction _messageToArray( object message ) {\n\t\treturn [\n\t\t\t'id' => message.id,\n\t\t\t'sender' => (message.user\n\t\t\t\t? (message.user.chatName\n\t\t\t\t\t? message.user.chatName\n\t\t\t\t\t: message.user.username\n\t\t\t\t\t)\n\t\t\t\t: (message.client\n\t\t\t\t\t? message.client.name\n\t\t\t\t\t: I('System')\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t'body' => ._formatBody(message.message),\n\t\t\t'sent' => message.timestampSent,\n\t\t\t'sentHuman' => formatTime(message.timestampSent),\n\t\t\t'colour' => (message.user ? '#0000FF' : '#FF0000')\n\t\t];\n\t}\n\t\n\tfunction _formatBody( string body ) {\n\t\tobject r;\n\t\tbody = Regexp.replaceAll('&', body, '&amp;');\n\t\tbody = Regexp.replaceAll('<', body, '&lt;');\n\t\tbody = Regexp.replaceAll('>', body, '&gt;');\n\t\tbody = Regexp.replaceAll('\"', body, '&quot;');\n\t\tbody = Regexp.replaceAll(\"'\", body, '&#x27;');\n\t\tbody = Regexp.replaceAll('/', body, '&#x2F;');\n\t\tr = new Regexp('(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])', 'i');\n\t\tbody = r.replaceAll(body, '<a style=\"color:#333399;\" target=\"_blank\" href=\"\\1\">\\1</a>');\n\t\treturn body;\n\t}\n\t\n\tfunction _getList( array area_ids, array user_ids) {\n\t\tarray list = [];\n\t\tarray order = [];\n\t\tarray sessions = [];\n\t\tarray totalList = [];\n\t\tarray activeList = Workflow.ChatSession.activeList(Workflow.SystemGroup.current(), area_ids, user_ids);\n\t\tarray visibleList = Workflow.ChatSession.visibleList(Workflow.SystemGroup.current(), area_ids, user_ids);\n\t\tarray chats = [];\n\t\tstring sqlQuery = \"select a.session,message,clientsentlast from (\n\t\t\t\tselect distinct on (session) session, client_fkey != 0 as clientsentlast\n\t\t\t\t\tfrom workflow_chatmessages\n\t\t\t\t\t\twhere session in (%SESSIONS%)\n\t\t\t\t\t\torder by session,timestampsent desc\n\t\t\t) as a join (\n\t\t\t\tselect distinct on (session) session, message\n\t\t\t\t\tfrom workflow_chatmessages\n\t\t\t\t\t\twhere session in (%SESSIONS%)\n\t\t\t\t\t\tand client_fkey != 0\n\t\t\t\t\t\torder by session,timestampsent desc\n\t\t\t) as b on a.session = b.session;\";\n\t\ttotalList = activeList.append(visibleList);\n\t\tif (totalList.size() > 0) {\n\t\t\ttotalList.each() using ( session ) {\n\t\t\t\tsessions.push(session.id);\n\t\t\t};\n\t\t\t\n\t\t\tObjRunObject.rawQuery(sqlQuery.replace('%SESSIONS%',sessions.join(','))).each() using ( chat ) {\n\t\t\t\tchats[\"${chat.session}\"] = [\n\t\t\t\t\t'session' => chat.session,\n\t\t\t\t\t'message' => chat.message,\n\t\t\t\t\t'clientSentLast' => chat.clientsentlast\n\t\t\t\t];\n\t\t\t};\n\t\t\t\n\t\t\ttotalList.each() using ( session ) {\n\t\t\t\tarray chat = (chats.keyExists(\"${session.id}\") ? chats[\"${session.id}\"] : []);\n\t\t\t\t\n\t\t\t\torder[] = session.errand.id;\n\t\t\t\tlist[\"${session.id}\"] = [\n\t\t\t\t\t'id' => session.errand.id,\n\t\t\t\t\t'chatSessionID' => session.id,\n\t\t\t\t\t'visible' => session.visible,\n\t\t\t\t\t'data' => [\n\t\t\t\t\t\t'id' => session.errand.id,\n\t\t\t\t\t\t'areaID' => session.area.id,\n\t\t\t\t\t\t'area' => session.area.name,\n\t\t\t\t\t\t'message' => (chat and chat.message\n\t\t\t\t\t\t\t? (chat.message.utf8Length() > 125 ? chat.message.utf8Slice(125) + '...' : chat.message)\n\t\t\t\t\t\t\t: I('No Message')),\n\t\t\t\t\t\t'client' => (session.client and session.client.name ? session.client.name : I('No Name')),\n\t\t\t\t\t\t'email' => (session.client and session.client.email ? session.client.email.emailAddress : I('No Sender')),\n\t\t\t\t\t\t'assigned' => (session.user ? 1 : 0),\n\t\t\t\t\t\t'owner' => (session.user ? session.user.username : I('Unassigned')),\n\t\t\t\t\t\t'startedHuman' => formatDateTime(session.timestampStarted),\n\t\t\t\t\t\t'started' => session.timestampStarted\n\t\t\t\t\t],\n\t\t\t\t\t'style' => [\n\t\t\t\t\t\t'bg' => (session.user and session.user.id == currentChatUser.id ? '#CFC' : '#FFF'),\n\t\t\t\t\t\t'bold' => (chat and chat.clientSentLast == 't' ? true : false)\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t\n\t\treturn [\n\t\t\t'list' => list,\n\t\t\t'order' => order\n\t\t];\n\t}\n\n\tfunction _getAllMessages( object session ) {\n\t\tarray list = [];\n\t\tWorkflow.ChatMessage.listBySession(session.id).each() using ( message ) {\n\t\t\tlist[] = ._messageToArray(message);\n\t\t};\n\t\tif( session.clientReportedAsInactive ) {\n\t\t\tstring clientName = (session.client ? session.client.name : I('No Name'));\n\t\t\tlist[] = [\n\t\t\t\t'id' => 0,\n\t\t\t\t'sender' => I('System'),\n\t\t\t\t'body' => I('{0} has become inactive and most likely closed the chat window.').expand(clientName),\n\t\t\t\t'sent' => session.timestampClientReportedAsInactive,\n\t\t\t\t'sentHuman' => formatTime(session.timestampClientReportedAsInactive),\n\t\t\t\t'colour' => '#000000'\n\t\t\t];\n\t\t\tlist = list.sort() using ( a, b ) {\n\t\t\t\tif( a['sent'] < b['sent'] ) return -1;\n\t\t\t\tif( a['sent'] == b['sent'] ) return 0;\n\t\t\t\tif( a['sent'] > b['sent'] ) return 1;\n\t\t\t};\n\t\t}\n\t\treturn list;\n\t}\n\t\n\tfunction _getMessages( number sessionID, number timestampLastMessage ) {\n\t\tarray list = [];\n\t\tWorkflow.ChatMessage.listBySessionAfterTimestampOnlyFromClient(sessionID, timestampLastMessage).each() using ( message ) {\n\t\t\tlist[] = ._messageToArray(message);\n\t\t};\n\t\tif( not list ) {\n\t\t\tobject session = Workflow.ChatSession.load(sessionID);\n\t\t\tif( not session.active ) {\n\t\t\t\tif( not session.clientReportedAsOffline ) {\n\t\t\t\t\tstring clientName = (session.client ? session.client.name : I('No Name'));\n\t\t\t\t\tlist[] = [\n\t\t\t\t\t\t'id' => 0,\n\t\t\t\t\t\t'sender' => I('System'),\n\t\t\t\t\t\t'body' => I('{0} has closed the chat window.').expand(clientName),\n\t\t\t\t\t\t'sent' => session.timestampEnded,\n\t\t\t\t\t\t'sentHuman' => formatTime(session.timestampEnded),\n\t\t\t\t\t\t'colour' => '#000000'\n\t\t\t\t\t];\n\t\t\t\t\tsession.setValue('clientReportedAsOffline', true);\n\t\t\t\t\tsession.save();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If we have not received any new messages from the client\n\t\t\t\t// we check if the client has become inactive.\n\t\t\t\t\n\t\t\t\tif( not session.clientReportedAsInactive ) {\n\t\t\t\t\tnumber now = Date.GMTnow();\n\t\t\t\t\tnumber timeout = (F('chat.inactive-timeout') ? F('chat.inactive-timeout') : 1);\n\t\t\t\t\tnumber timeoutSeconds = timeout * 60;\n\t\t\t\t\tnumber watermark = now - timeoutSeconds;\n\t\t\t\t\t\n\t\t\t\t\tif( session.timestampLastClientUpdate <= watermark ) {\n\t\t\t\t\t\t// If we get here we consider the client to have become inactive.\n\t\t\t\t\t\t// It is time to display a message.\n\t\t\t\t\t\tstring clientName = (session.client ? session.client.name : 'No Name');\n\t\t\t\t\t\tlist[] = [\n\t\t\t\t\t\t\t'id' => 0,\n\t\t\t\t\t\t\t'sender' => I('System'),\n\t\t\t\t\t\t\t'body' => I('{0} has become inactive and most likely closed the chat window.').expand(clientName),\n\t\t\t\t\t\t\t'sent' => now,\n\t\t\t\t\t\t\t'sentHuman' => formatTime(now),\n\t\t\t\t\t\t\t'colour' => '#000000'\n\t\t\t\t\t\t];\n\t\t\t\t\t\tsession.setValue('clientReportedAsInactive', true);\n\t\t\t\t\t\tsession.setValue('timestampClientReportedAsInactive', now);\n\t\t\t\t\t\tsession.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\t\n\tboolean _attemptedActiveSessionsCache = false;\n\tarray _activeSessionsCache;\n\tfunction _getActiveSessionsForCurrentUser() {\n\t\tif( not ._attemptedActiveSessionsCache ) {\n\t\t\t._activeSessionsCache = [];\n\t\t\tWorkflow.ChatSession.activeList(Workflow.SystemGroup.current(), Workflow.Area.idListForUserFromCache(),\n\t\t\t\t[ currentChatUser.id ]).each() using ( session )\n\t\t\t{\n\t\t\t\t._activeSessionsCache[] = session.id;\n\t\t\t};\n\t\t}\n\t\treturn ._activeSessionsCache;\n\t}\n\t\n\tfunction _getUnseenSessions() {\n\t\tarray sessionsWithUnseenMessages;\n\t\tobject sessionToShow;\n\t\tsessionsWithUnseenMessages = Workflow.ChatSession.haveUnseenMessagesList(Workflow.SystemGroup.current(), currentChatUser.id);\n\t\tif( sessionsWithUnseenMessages ) {\n\t\t\tsessionToShow = sessionsWithUnseenMessages[0];\n\t\t\tLogger.info(Logger.APPLICATION_CHAT,\n\t\t\t\t\"Sending unseen sessions [\" + sessionsWithUnseenMessages.join(', ') using( session ) { return session.id; } +\n\t\t\t\t\"] to ${currentChatUser.username} [${currentChatUser.id}]\");\n\t\t}\n\t\tif( sessionToShow ) {\n\t\t\treturn [\n\t\t\t\t'list' => sessionsWithUnseenMessages.process() using( session ) { return session.id; },\n\t\t\t\t'session' => [\n\t\t\t\t\t'id' => (sessionToShow.errand and sessionToShow.errand.id ? sessionToShow.errand.id : 0 ),\n\t\t\t\t\t'chatSessionID' => sessionToShow.id, \n\t\t\t\t\t'client' => (sessionToShow.client and sessionToShow.client.name ? sessionToShow.client.name : I('No Name')),\n\t\t\t\t\t'messages' => ._getAllMessages(sessionToShow),\n\t\t\t\t\t'area' => [\n\t\t\t\t\t\t'id' => (sessionToShow.area ? sessionToShow.area.id : 0)\n\t\t\t\t\t],\n\t\t\t\t\t'user' => [\n\t\t\t\t\t\t'openExternalSystem' => currentChatUser.openExternalSystem\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction getUpdate( array parameters ) {\n\t\tnumber session_id = 0;\n\t\tarray area_ids = [];\n\t\tarray user_ids = [];\n\t\tnumber current_time = Date.GMTnow();\n\t\tnumber blockchat_minutes = (F('chat.blacklist.time') ? F('chat.blacklist.time') : 0);\n\t\tnumber blockchat_seconds = blockchat_minutes * 60;\n\t\t\n\t\tif( currentChatUser.acceptChat ) {\n\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Update -> ${currentChatUser.username} [${currentChatUser.id}] - time since last update: \" + (closure {\n\t\t\t\treturn Date.GMTnow() - currentChatUser.timestampLastChatUpdate;\n\t\t\t}).invoke() + \" (${Date.GMTnow()})\");\n\t\t}\n\t\tcurrentChatUser.setValue('timestampLastChatUpdate', Date.GMTnow());\n\t\tcurrentChatUser.save();\n\t\tarea_ids = Workflow.Area.idListForUserFromCache();\n\t\t\n\t\tif(blockchat_minutes != 0) \t{\n\t\t\t\tarea_ids.each() using ( areaids ) {\n\t\t\t\t\tWorkflow.BlockedIPAddress.getIpAddressBlacklist( areaids ).each() using ( iplist ) {\n\t\t\t\t\t\t\tobject iplAdddress = Workflow.BlockedIPAddress.load(iplist.id);\n\t\t\t\t\t\t\tif(current_time - iplAdddress.timestampWhen > blockchat_seconds)\t{\n\t\t\t\t\t\t\t\tiplAdddress.setValue('active', false);\n\t\t\t\t\t\t\t\tiplAdddress.save();\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t}\n\t\t\n\t\tif( parameters.keyExists('session') ) {\n\t\t\tsession_id = parameters['session'].toNumber();\n\t\t}\n\t\t\n\t\treturn JSON.valueToJSON([\n\t\t\t'list' => ._getList(area_ids, [currentChatUser.id]),\n\t\t\t'current' => (closure {\n\t\t\t\tobject session = Workflow.ChatSession.load(session_id);\n\t\t\t\tif( session ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'client' => (session.client and session.client.name ? session.client.name : I('No Name')),\n\t\t\t\t\t\t'clientEmail' => (session.client and session.client.email ? session.client.email.emailAddress : ''),\n\t\t\t\t\t\t'preview' => session.nextClientMessagePreview,\n\t\t\t\t\t\t'showMessagePreview' => ( session.user && session.user.chatMessagePreview ? session.user.chatMessagePreview : 0 ),\n\t\t\t\t\t\t'messages' => ._getMessages(session.id, (parameters.keyExists('timestampLastMessage')\n\t\t\t\t\t\t\t? parameters['timestampLastMessage'].toNumber()\n\t\t\t\t\t\t\t: 0)),\n\t\t\t\t\t\t'tag' => (Workflow.Area.tagsFromCache( session.area.id ) ? true : false)\t\t\t\t\t\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}).invoke(),\n\t\t\t'feature' => (closure{\n\t\t\t\t\tif( F('chat.forced-tag') ) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( F('chat.optional-tag') )\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}).invoke(),\n\t\t\t'unseen' => ._getUnseenSessions(),\n\t\t\t'count' => ._getActiveSessionsForCurrentUser().size()\n\t\t]);\n\t}\n\t\n\tfunction sendMessage( array parameters ) {\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tif( session ) {\n\t\t\tnumber now = Date.GMTnow();\n\t\t\tobject message = new Workflow.ChatMessage();\n\t\t\tmessage.setValue('session', session.id);\n\t\t\tmessage.setValue('timestampSent', now);\n\t\t\tmessage.setValue('message', parameters['text']);\n\t\t\tmessage.setValue('user', currentChatUser);\n\t\t\tmessage.save();\n\t\t\tif( now > session.timestampLastAgentMessageSent ) {\n\t\t\t\tsession.setValue('timestampLastAgentMessageSent', now);\n\t\t\t\tsession.save();\n\t\t\t}\n\t\t\treturn JSON.valueToJSON(true);\n\t\t}\n\t\treturn JSON.valueToJSON(false);\t\t\t\n\t}\n\t\n\tfunction getAgents( array parameters ) {\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tif( session ) {\n\t\t\tobject area = Workflow.Area.load( session.area.id ); // Tiny to full\n\t\t\tif( ExternalQueueInterface.enabled() and (area.externalID or area.solidusServiceGroupID) ) {\n\t\t\t\tarray list = ExternalQueueInterface.getChatAgents(area);\n\t\t\t\tlist.unshift([ 'id' => 0, 'value' => I('Forward to Agent') ]);\n\t\t\t\treturn JSON.valueToJSON(list);\n\t\t\t} else {\n\t\t\t\treturn JSON.valueToJSON(._getAreaAgents(area.id));\n\t\t\t}\n\t\t} else {\n\t\t\treturn JSON.valueToJSON([]);\n\t\t}\n\t}\n\n\tfunction forwardToAgent( array parameters ) {\n\t\tnumber now = Date.GMTnow();\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tobject user = Workflow.User.load((parameters.keyExists('forward')\n\t\t\t? parameters['forward'].toNumber()\n\t\t\t: 0));\n\t\tobject fromUser = Workflow.User.load( (session.user.id ? session.user.id : 0));\n\t\t\n\t\tif( session and user ) {\n\t\t\tobject area = session.area;\n\t\t\tif( ExternalQueueInterface.enabled() and (area.externalID or area.solidusServiceGroupID) ) {\n\t\t\t\tif( ExternalQueueInterface.forwardChatToAgent(session, user) ) {\n\t\t\t\t\t// The chat is set to have unseen messages so that it is automatically\n\t\t\t\t\t// shown to the agent it is forwarded to.\n\t\t\t\t\tsession.setValue('hasUnseenMessages', true);\n\t\t\t\t\tsession.setValue('user', null);\n\t\t\t\t\tsession.setValue('fromAgent', null);\n\t\t\t\t\tsession.setValue('status', Workflow.ChatSession.STATUS_WAITING_ON_AGENT);\n\t\t\t\t\tsession.save();\n\t\t\t\t\treturn JSON.valueToJSON(true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The chat is set to have unseen messages so that it is automatically\n\t\t\t\t// shown to the agent it is forwarded to.\n\t\t\t\tsession.setValue('hasUnseenMessages', true);\n\t\t\t\tsession.setValue('user', user);\n\t\t\t\tsession.setValue('fromAgent', fromUser);\n\t\t\t\tsession.setValue('timestampForward', now);\n\t\t\t\tsession.save();\n\t\t\t\treturn JSON.valueToJSON(true);\n\t\t\t}\n\t\t}\n\t\treturn JSON.valueToJSON(false);\n\t}\n\t\n\tfunction forwardToArea( array parameters ) {\n\t\tobject session;\n\t\tobject toArea;\n\t\tnumber now = Date.GMTnow();\n\t\tobject fromUser;\n\t\tobject fromArea;\n\t\tif( parameters.keyExists('forward_area_id') or parameters.forward_area_id != 0 ) {\n\t\t\ttoArea = Workflow.Area.tiny( parameters.forward_area_id.toNumber() );\n\t\t\tsession = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\t\tfromUser = Workflow.User.tiny( (session.user.id ? session.user.id : 0) );\n\t\t\tfromArea = Workflow.Area.tiny( (session.area.id ? session.area.id : 0) );\n\t\t\t\n\t\t\tif( ChatQueueInterface.isOpen( toArea ) ){\n\t\t\t\t//session.area need to change because session area should be updated with \n\t\t\t\t// forward area ID.\n\t\t\t\tsession.area = toArea;\n\t\t\t\tif( ChatQueueInterface.addChat( session ) ){\n\t\t\t\t\tsession.setValue('area', toArea);\n\t\t\t\t\tsession.setValue('fromAgent', fromUser);\n\t\t\t\t\tsession.setValue('timestampForward', now);\n\t\t\t\t\tsession.setValue('fromArea', fromArea);\n\t\t\t\t\tsession.save();\n\t\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Chat Session [${session.id}] successfully forwarded to Area [${parameters.forward_area_id}]\");\n\n\t\t\t\t\treturn JSON.valueToJSON(true);\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Forward to area not possible at the moments. Possibly no agents available.\");\n\t\t\t\t\treturn JSON.valueToJSON(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn JSON.valueToJSON(false);\n\t}\n\t\n\tfunction sendChatHistoryEmailToClient( object session ){\n\t\tobject bodyContents = null;\n\t\tstring to = (session.client && session.client.email ? session.client.email.emailAddress : '');\n\t\tobject logClosure = closure ( string text ) {};\n\t\tobject connection = new Mail.Connection();\n\t\tobject to_addr = new Mail.Address( to );\n\t\tbodyContents = (closure{\n\t\t\tstring body = \"\";\n\t\t\tstring htmlBody;\n\t\t\tobject message = new Mail.Message();\n\t\t\tobject text = new Mail.MessagePart();\n\t\t\tobject area = Workflow.Area.load(session.area.id);\n\t\t\tarray messages = Workflow.ChatMessage.listBySession( session.id );\n\t\t\tmessage.header = new Mail.MessageHeader();\t\t\n\t\t\tmessage.header.to.add(to_addr);\t\t\n\t\t\tmessage.header.subject = I('Chat history');\n\t\t\tmessage = MailUtilities.setOutgoingHeader(message, area.replyToEmailAddress);\n\t\t\tmessages.each() using ( content ) {\n\t\t\t\tstring sender = (content.user\n\t\t\t\t\t\t\t\t? (content.user.chatName ? content.user.chatName : content.user.username)\n\t\t\t\t\t\t\t\t: (session.client ? session.client.name : I('No Name'))\n\t\t\t\t\t\t\t\t);\n\t\t\t\tbody += \"(${formatDateTime(content.timestampSent)}) ${sender}: ${content.message}\\r\\n\";\n\t\t\t};\n\t\t\tbody = Regexp.replaceAll(\"\\r\\n\", body, \"\\n\");\n\t\t\tbody = Regexp.replaceAll(\"\\r\", body, \"\\n\");\n\t\t\tbody = Regexp.replaceAll(\"\\n\", body, \"\\r\\n\");\n\n\t\t\ttext.type = Mail.Mime.TYPETEXT;\n\t\t\ttext.subtype = \"plain\";\n\t\t\ttext.charset = \"UTF-8\";\n\t\t\ttext.content = body;\n\t\t\tmessage.content = text;\n\t\t\treturn message;\n\t\t}).invoke();\n\n\t\tif( MailUtilities.sendMessage(connection, bodyContents, logClosure) ) {\n\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"- Chat history email to [${to}] Done.\");\n\t\t} else {\n\t\t\tLogger.info(Logger.APPLICATION_CHAT,\"!! Failed chat history to send in email.\");\n\t\t}\n\t}\n\n\tfunction finishSession( array parameters ) {\n\t\tobject session = Workflow.ChatSession.load( (parameters.keyExists('session') ? parameters['session'].toNumber() : 0));\n\t\tboolean sessionVisible = ( parameters.keyExists('visible' ) ? parameters['visible'].toBoolean() : false);\n\t\tif( sessionVisible ){\n\t\t\tsession.setValue('visible',false );\n\t\t\tsession.save();\n\t\t\tLogger.info(Logger.APPLICATION_CHAT,\"Chat session [${session.id}] has invisible.\");\n\t\t\treturn JSON.valueToJSON([ 'status' => 0]);\n\t\t}else{\n\t\t\tif( session ) {\n\t\t\t\tsession.close(false, false);\n\t\t\t\tChatQueueInterface.endChat(session);\n\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"Chat session [${session.id}] has successfully closed.\");\n\t\t\t\tif( F('chat.history-send-to-client') ){\n\t\t\t\t\tmonitor{\n\t\t\t\t\t\t.sendChatHistoryEmailToClient( session );\n\t\t\t\t\t}handle{\n\t\t\t\t\t\tLogger.info(Logger.APPLICATION_CHAT, \"!! Unable to send email: ${err.str.trim(\"\\n\")}\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn JSON.valueToJSON(['status' => 1]);\n\t\t\t}\n\t\t}\n\t\tLogger.info(Logger.APPLICATION_CHAT, \"Trying to close the chat session [${parametes[0]}], failure!\");\n\t\treturn JSON.valueToJSON(['status' => 2]);\n\t}\n\t\n\tfunction acquireSession( array parameters ) {\n\t\tnumber errandId = (parameters.keyExists('session') ? parameters['session'].toNumber() : 0);\n\t\tobject chatSession = Workflow.ChatSession.chatSessionByErrandID( errandId );\n\t\tobject session = Workflow.ChatSession.load( chatSession.id );\n\t\tboolean acquired = false;\n\t\tobject organisation = Workflow.Organisation.byAreaID( session.area.id );\n\t\t\n\t\t// Workflow.Organisation.byAreaID() returns organisation object of view Tiny.\n\t\t// More data is needed so full object is loaded.\n\t\torganisation = Workflow.Organisation.load( organisation.id );\n\t\tif( session and session.user and session.user.id == currentChatUser.id ) {\n\t\t\tacquired = true;\n\t\t} else if( session and session.user == null ) {\n\t\t\tsession.setValue('user', currentChatUser);\n\t\t\tsession.setValue('timestampAssigned', Date.GMTnow());\n\t\t\tsession.save();\n\t\t\tacquired = true;\n\t\t}\n\n\t\treturn JSON.valueToJSON([\n\t\t\t'acquired' => acquired,\n\t\t\t'chatSessionID' => session.id,\n\t\t\t'externalData' => session.externalData,\n\t\t\t'startedHuman' => formatDateTime(session.timestampStarted),\n\t\t\t'messages' => (closure {\n\t\t\t\tif( acquired) {\n\t\t\t\t\treturn ._getAllMessages(session);\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}).invoke(),\n\t\t\t'area' => [\n\t\t\t\t'id' => (session and session.area ? session.area.id : 0),\n\t\t\t\t'name' => (session and session.area ? session.area.name : ''),\n\t\t\t\t'organisation' => ( organisation ? organisation.name : ''),\n\t\t\t\t'answers' => (closure {\n\t\t\t\t\tif( acquired && F('alternative-answers.show-everything')) {\n\t\t\t\t\t\treturn ._getAlternativeAnswers( session.area.id );\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}).invoke(),\n\t\t\t\t'externalSystemURL' => (closure {\n\t\t\t\t\tif( acquired ) {\n\t\t\t\t\t\t// The area object in Workflow.ChatSession is of view Tiny.\n\t\t\t\t\t\t// This means that it does not contain the variables that are needed here.\n\t\t\t\t\t\t// That is why the full area object is loaded.\n\t\t\t\t\t\tobject area = Workflow.Area.load(session.area.id);\n\t\t\t\t\t\tif( area.openExternalSystemRules ) {\n\t\t\t\t\t\t\treturn area.openExternalSystemRules.url;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif( organisation.openExternalSystemRules )\n\t\t\t\t\t\t\t\treturn organisation.openExternalSystemRules.url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}).invoke()\n\t\t\t],\n\t\t\t'user' => [\n\t\t\t\t'openExternalSystem' => currentChatUser.openExternalSystem\n\t\t\t],\n\t\t\t'client' => (session.client and session.client.name ? session.client.name : I('No Name')),\n\t\t\t'clientEmail' => (session.client and session.client.email ? session.client.email.emailAddress : ''),\n\t\t\t'tag' => (closure{\n\t\t\t\t\tif( Workflow.Area.tagsFromCache( session.area.id ))\n\t\t\t\t\t\treturn true;\n\t\t\t\t\treturn false;\n\t\t\t\t}).invoke(),\n\t\t\t'feature' => (closure{\n\t\t\t\t\tif( F('chat.forced-tag') ) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( F('chat.optional-tag') )\n\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}).invoke(),\n\t\t\t'errand_notes' => ._getErrandNotes( errandId ),\n\t\t\t'client_notes' => ._getClientNotes( errandId ),\n\t\t\t'ipaddress' =>  session.ipAddress\n\t\t]);\n\t}\n\n\tfunction markAsSeen( array parameters ) {\n\t\tarray sessions = [];\n\t\tif( parameters.keyExists('sessions') ) {\n\t\t\tsessions = parameters['sessions'].toArray(',');\n\t\t}\n\t\tsessions.each() using ( id ) {\n\t\t\tobject session = Workflow.ChatSession.load(id.toNumber());\n\t\t\tif( session ) {\n\t\t\t\tsession.setValue('hasUnseenMessages', false);\n\t\t\t\tsession.save();\n\t\t\t\tLogger.info(Logger.APPLICATION_CHAT,\n\t\t\t\t\t\"Marking session [${session.id}] owned by ${session.user.username} [${session.user.id}] as seen\");\n\t\t\t}\n\t\t};\n\t\treturn JSON.valueToJSON(true);\n\t}\n\n\tfunction fetchContacts( array parameters ) {\n\t\tstring componentName = (parameters.keyExists('component') ? parameters['component'] : 'GlobalChat');\n\t\tnumber tab = (parameters.keyExists('tab') ? parameters['tab'].toNumber() : 1);\n\t\tnumber page = (parameters.keyExists('page') ? parameters['page'].toNumber() : 0);\n\t\tboolean answered = (parameters.keyExists('answered') ? (parameters['answered'].toNumber() ? true : false) : true);\n\t\tboolean unanswered = (parameters.keyExists('unanswered') ? (parameters['unanswered'].toNumber() ? true : false) : true);\n\t\tstring address = parameters['address'];\n\t\tif( address ) {\n\t\t\tWorkflow.Errand.OtherContactsComponent = componentName;\n\t\t\tWorkflow.Errand.OtherContactsTab = 'chat-contacts-tab';\n\t\t\tWorkflow.Errand.OtherContactsByDomainTab = 'chat-contacts-by-domain-tab';\n\t\t\tWorkflow.Errand.OtherContactsShowAnswerd = 'chat-contacts-show-answered';\n\t\t\tWorkflow.Errand.OtherContactsShowUnanswered = 'chat-contacts-show-unanswered';\n\t\t\tWorkflow.Errand.OtherContactsPrevious = 'chat-contacts-previous';\n\t\t\tWorkflow.Errand.OtherContactsNext = 'chat-contacts-next';\n\t\t\tWorkflow.Errand.OtherContactsByDomainPrevious = 'chat-contacts-by-domain-previous';\n\t\t\tWorkflow.Errand.OtherContactsByDomainNext = 'chat-contacts-by-domain-next';\n\t\t\tWorkflow.Errand.OtherContactsOptions = 'chat-contacts-options';\n\t\t\tWorkflow.Errand.OtherContactsContent = 'chat-contacts-content';\n\t\t\tWorkflow.Errand.OtherContactsVarContactsTab = 'ChatContactsTab';\n\t\t\tWorkflow.Errand.OtherContactsVarContactsPage = 'ChatContactsPage';\n\t\t\tWorkflow.Errand.OtherContactsAddress = \"'${address}'\";\n\t\t\tWorkflow.Errand.OtherContactsFireRequest = \"_('${componentName}').fireCallbackRequest\";\n\t\t\tWorkflow.Errand.OtherContactsFireRequestCallback = \"function( value ) { $('${componentName}_ContactsBoxContent').innerHTML = value; }\";\n\t\t\treturn '<div style=\"margin-bottom:10px;\">' +\n\t\t\t\tWorkflow.Errand.otherContactsAsHTML(null, address, answered, unanswered, tab, page) +\n\t\t\t'</div>';\n\t\t}\n\t\t\n\t\treturn I('No Other Contact Found');\n\t}\n\t\n\t\n\t\t/**\n\t * @function fetchTagList\n\t * @declaration function fetchTagList( number id )\n\t * @brief Fetch the normal and high priority tag list for a given area.\n\t * @param number id The area id to load\n\t * @return A keyed array with 'high' and 'normal' values, each one is a hybrid datasource for tags in that category.\n\t */\n\tfunction fetchTagList( array param ) {\n\t\tstring tagdisplay;\n\t\tnumber id = param['id'].toNumber();\n\t\tnumber session_id = param['session_id'].toNumber();\n\t\t\ttagdisplay += \"<div id='tag_list_display'><div style='height: 200px; overflow: auto;'><ul>\";\n\t\t\tWorkflow.Area.tagsFromCache( id ).each() using ( tag_cache ) {\n\t\t\t\tnumber tagid = tag_cache['id'];\n\t\t\t\tstring tagval = tag_cache['display'];\n\t\t\t\tif( not tag_cache['forDelete']  ){\n\t\t\t\ttagdisplay += \"<li id='chattag_itemslists'><input type='checkbox' name='tagchecks' id='tagcheckids${tagid}' value='${tagval}' onclick='checkOneTag(${session_id},${tagid},1)'/><label> ${tagval}</label></li>\";\n\t\t\t\t}\n\t\t\t};\n\t\t\ttagdisplay += \"</ul></div></div>\";\n\t\treturn tagdisplay;\n\t}\n\tfunction displayTagList( array parameters ) {\n\t\t\tnumber areaid = parameters['areaid'].toNumber();\n\t\t\tnumber session_id = parameters['session'].toNumber();\t\n\t\t\tstring tagdisplay;\n\t\t\ttagdisplay += \"<div id='tag_list_display'><div style='padding:5px'><h3 style='margin:0;padding:0'>\"+I('You have not chosen a classification for this errand.')+\"</h3></div><div style='padding:5px'>\"+I('You can navigate the list by pressing the up and down arrows and select a classification by pressing space.')+\"</div><div style='padding:5px'>\"+I('Press Escape to Cancel')+\"</div><div style='height: 200px; overflow: auto;'><ul>\";\n\t\t\tWorkflow.Area.tagsFromCache(areaid).each() using ( tag_cache ) {\n\t\t\t\tnumber tagid = tag_cache['id'];\n\t\t\t\tstring tagval = tag_cache['display'];\n\t\t\t\tif( not tag_cache['forDelete']  ){\n\t\t\t\t\ttagdisplay += \"<li id='chattag_itemslists'><input type='checkbox' name='tagcheck' id='tagcheckid${tagid}' value='${tagval}' /><label> ${tagval}</label></li>\";\n\t\t\t\t}\n\t\t\t};\n\t\t\ttagdisplay += \"</ul></div></div>\";\n\t\t\treturn tagdisplay;\n\t}\n\t\n\tfunction finishChatSessionTag( array params ){\t\n\t\tstring tagname = params['withTag'];\t\n\t\tnumber id = params['id'].toNumber();\n\t\tnumber errandId = (params.keyExists('value') ? params['value'].toNumber() : 0);\n\t\tobject chatSession = Workflow.ChatSession.chatSessionByErrandID( errandId );\n\t\tobject session = Workflow.ChatSession.load( chatSession.id );\n\t\tobject errand = Workflow.Errand.load( errandId );\n\t\tarray tags = [];\n\t\tobject tag;\n\t\tarray  tagIDs = ((params['tagid'] isa array) ? params['tagid'] : [params['tagid']]);\n\t\tif(session){\n\t\t\t\tif(tagname == 'withtag') {\n\t\t\t\t\ttagIDs.each() using ( tagid ){\n\t\t\t\t\t\ttag = Workflow.Tag.load( tagid.toNumber() );\n\t\t\t\t\t\terrand.setValue('tags', errand.tags.addObject( tag ));\n\t\t\t\t\t\terrand.save();\n\t\t\t\t\t};\n\t\t\t\t}else{\n\t\t\t\t\terrand.setValue('tags', null);\n\t\t\t\t\terrand.save();\n\t\t\t\t}\n\t\t\treturn JSON.valueToJSON(true);\n\t\t}\t\n\t\treturn JSON.valueToJSON(false);\n\t}\n\t\n\tfunction blockIPAddress( array params )\t{\t\n\t\t\tstring ipaddress = params['ip'];\n\t\t\tnumber errandId = params['errand'].toNumber();\n\t\t\tstring email = params['email'];\n\t\t\tnumber date_now = Date.GMTnow();\n\t\t\tobject blacklist;\n\t\t\tobject chatsession;\n\t\t\tobject area;\n\t\t\t\t\t\n\t\t\tchatsession = Workflow.ChatSession.loadSessionByErrand( errandId );\n\t\t\t\n\t\t\tblacklist = new Workflow.BlockedIPAddress();\n\t\t\tblacklist.setValue('ipAddress', \"${ipaddress}\");\n\t\t\tblacklist.setValue('timestampWhen', date_now);\n\t\t\tblacklist.setValue('active', true);\n\t\t\tblacklist.setValue('area', chatsession.area);\n\t\t\tblacklist.setValue('user', chatsession.user);\n\t\t\tblacklist.setValue('email', \"${email}\");\n\t\t\tblacklist.save();\n\t\t\t\n\t\t\tif( F('chat.forced-tag'))\n\t\t\t\treturn 'forcedtag';\n\t\t\telse if ( F('chat.optional-tag'))\n\t\t\t\treturn 'optionaltag';\n\t\t\telse\n\t\t\t\treturn 'none';\t\n\t}\n\t\n\tfunction checkFeature() {\n\t\tif( F('chat.forced-tag'))\n\t\t\treturn 'forcedtag';\n\t\telse if ( F('chat.optional-tag'))\n\t\t\treturn 'optionaltag';\n\t\telse\n\t\t\treturn 'none';\t\t\t\n\t}\n\tfunction chatAnswerSearch( array parameters ) {\n\t\tarray area_list = [];\n\t\tarray seenList = [];\n\t\tarray result = [];\n\t\tarray results = [];\n\t\tstring body = '';\n\t\tobject keyCombination;\n\n\t\tnumber filterList = parameters['filterList'].toNumber();\n\t\tstring term = parameters['search_term'];\n\n\t\tif( filterList > 0 ) {\n\t\t\tarea_list = [ filterList ];\n\t\t} else if( filterList <= 0 ) {\n\t\t\tarea_list = Workflow.Area.idListForUser();\n\t\t}\n\n\t\tresult['order'] = [];\n\t\tresult['list'] = [];\n\t\tWorkflow.Search.run(\"custom:answer locations:${area_list.join(',')} type:contents-keyword source:either state:any published:yes $term exact:no time:both sort-asc:subject limit:100 offset:0\").each() using ( row ) {\n\t\t\tif( row['body'] ) {\n\t\t\t\tif( row['body'].utf8Length() > 50)\n\t\t\t\t\tbody = row['body'].utf8Slice(50) + '...';\n\t\t\t\telse\n\t\t\t\t\tbody = row['body'];\n\n\t\t\t\tkeyCombination = Workflow.ChatKeyboardShortcut.getKeys( row['id'] );\n\t\t\t\tresult['order'][] = row['id'];\n\t\t\t\tresult['list']['' + row['id']] = [\n\t\t\t\t'id' => row['id'],\n\t\t\t\t'data' => [\n\t\t\t\t\t'area' => 'All',\n\t\t\t\t\t'left_arrow' => '<img src=\"{0}\" onclick=\"_publishedAnswerCopyTo({1})\" style=\"vertical-align:top;background-color: #FCAB46; cursor: pointer;\" border=\"0\" />'.expand( uriForImageResource('submit_arrow_left.png'), row['id']),\n\t\t\t\t\t'subject' => row['subject'],\n\t\t\t\t\t'trimBody' => body + '&nbsp;<span style=\"color:#898E79;\">(' +(keyCombination ? keyCombination.shortcut : '')+')</span>',\n\t\t\t\t\t'body' => row['body'],\n\t\t\t\t\t'shortkey' => (keyCombination ? keyCombination.shortcut : '')\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t}\n\t\t};\n\t\treturn JSON.valueToJSON( result );\n\t}\n\tfunction createNoteAttachments( object note, array attachments ) {\n\t\tarray list = [];\n\t\t\n\t\tstring note_id = '' + note.id;\n\t\tstring path_id = note_id.blocks(1).join('/') + '/' + note_id;\n\t\tstring attachmentsDirectory = (Config.CachePath - 'Cache/') + 'Workflow/Note-attachments/' + path_id + '/';\n\t\tstring uploadsDirectory = (Config.CachePath - 'Cache/') + 'Workflow/Temporary-uploads/';\n\t\t\n\t\tDirectory.build(attachmentsDirectory);\n\t\tGUIKit.loadComponent('BackgroundFileUploader');\n\t\tattachments.eachWithIndex() using ( id, index ) {\n\t\t\tstring localName = 'file-' + index;\n\t\t\tstring newPath = attachmentsDirectory + localName;\n\t\t\tobject attachment;\n\t\t\tobject file = new GUIKit.BackgroundFileUploaderUploadedFile(id, uploadsDirectory);\n\t\t\t\n\t\t\tfile.moveTo(newPath);\n\t\t\t\n\t\t\tattachment = new Workflow.NoteAttachment();\n\t\t\tattachment.setValue('localPath', newPath);\n\t\t\tattachment.setValue('localName', localName);\n\t\t\tattachment.setValue('fileName', file.name);\n\t\t\tattachment.save();\n\t\t\t\n\t\t\tlist[] = attachment;\n\t\t};\n\t\t\n\t\treturn list;\n\t}\n\tfunction saveNote( array parameters ) {\n\t\tarray notes;\n\t\tarray list;\n\t\tobject errandView;\n\t\tobject note;\n\t\tobject client;\n\t\tobject thread = new Workflow.Thread();\n\t\tstring type = parameters['type'];\n\t\tnumber errand = parameters['errand'].toNumber();\n\t\tstring text = parameters['text'];\n\t\tstring attachments = parameters['attachments'];\n\t\tarray attachment = attachments.dissect(',');\n\t\tswitch( type ) {\n\t\t\tcase 'errand':\n\t\t\t\terrandView = Workflow.Errand.loadThreadView( errand );\n\t\t\t\tif( errandView ) {\n\t\t\t\t\tobject notesView;\n\t\t\t\t\tif( not errandView.thread ) {\n\t\t\t\t\t\tthread.setValue(\"errands\", [errandView]);\n\t\t\t\t\t\terrandView.setValue(\"thread\",thread);\n\t\t\t\t\t\tthread.save();\n\t\t\t\t\t\terrandView.save();\n\t\t\t\t\t}\n\t\t\t\t\tnotesView = Workflow.Thread.loadNotesView( (errandView.thread ? errandView.thread.id : 0) );\n\t\t\t\t\tif( notesView ) {\n\t\t\t\t\t\tnote = new Workflow.Note();\n\t\t\t\t\t\tnote.setValue('writer', currentChatUser);\n\t\t\t\t\t\tnote.setValue('timestampWritten', Date.GMTnow());\n\t\t\t\t\t\tnote.setValue('note', text);\n\t\t\t\t\t\tnote.save();\n\t\t\t\t\t\tif( attachments ) {\n\t\t\t\t\t\t\tnote.setValue('attachments', .createNoteAttachments(note, attachment));\n\t\t\t\t\t\t\tnote.save();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnotesView.setValue('notes', notesView.notes.addObject(note));\n\t\t\t\t\t\tnotesView.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'client':\n\t\t\t\terrandView = Workflow.Errand.loadClientView( errand );\n\t\t\t\tif( not errandView.client ) {\n\t\t\t\t\tclient = new Workflow.Person(); //Empty client\n\t\t\t\t\tclient.save();\n\t\t\t\t\terrandView.setValue('client', client);\n\t\t\t\t\terrandView.save();\n\t\t\t\t}\n\t\t\t\tif( errandView and errandView.client ) {\n\t\t\t\t\tnote = new Workflow.Note();\n\t\t\t\t\tnote.setValue('writer', currentChatUser);\n\t\t\t\t\tnote.setValue('timestampWritten', Date.GMTnow());\n\t\t\t\t\tnote.setValue('note', text);\n\t\t\t\t\tnote.save();\n\t\t\t\t\tif( attachments ) {\n\t\t\t\t\t\tnote.setValue('attachments', .createNoteAttachments(note, attachment));\n\t\t\t\t\t\tnote.save();\n\t\t\t\t\t}\n\t\t\t\t\terrandView.client.setValue('notes', errandView.client.notes.addObject(note));\n\t\t\t\t\terrandView.client.save();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tif( note ) {\n\t\t\treturn JSON.valueToJSON([\n\t\t\t\t'note' => [\n\t\t\t\t\t'id' => note.id\n\t\t\t\t]\n\t\t\t]);\n\t\t} else {\n\t\t\treturn JSON.valueToJSON([\n\t\t\t\t'error' => true\n\t\t\t]);\n\t\t}\n\t}\n\n\tfunction removeNote( array parameters ) {\n\t\tarray notes;\n\t\tarray list;\n\t\tobject errandThread;\n\t\tobject n;\n\t\tstring type = parameters['type'];\n\t\tnumber errand = parameters['errand'].toNumber();\n\t\tnumber note = parameters['note'].toNumber();\n\t\tswitch( type ) {\n\t\t\tcase 'errand':\n\t\t\t\terrandThread = Workflow.Errand.loadThreadView(errand);\n\t\t\t\tif( errandThread ) {\n\t\t\t\t\tobject t = Workflow.Thread.loadNotesView(errandThread.thread.id);\n\t\t\t\t\tif( t ) {\n\t\t\t\t\t\tn = t.notes.objectWithID(note);\n\t\t\t\t\t\tif( n ) {\n\t\t\t\t\t\t\tt.setValue('notes', t.notes.removeObjectWithID(n.id));\n\t\t\t\t\t\t\tt.save();\n\t\t\t\t\t\t\tn.delete();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'client':\n\t\t\t\terrandThread = Workflow.Errand.loadClientView(errand);\n\t\t\t\tif( errandThread and errandThread.client ) {\n\t\t\t\t\tn = errandThread.client.notes.objectWithID(note);\n\t\t\t\t\tif( n ) {\n\t\t\t\t\t\terrandThread.client.setValue('notes', errandThread.client.notes.removeObjectWithID(n.id));\n\t\t\t\t\t\terrandThread.client.save();\n\t\t\t\t\t\tn.delete();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn 'removeNote';\n\t}\n\n\tfunction _getErrandNotes( number errandId ){\n\t\tarray list = [];\n\t\tobject errand = Workflow.Errand.loadThreadView( errandId );\n\t\tobject thread;\n\t\tarray notes;\n\t\tif( errand.thread ){\n\t\t\tthread = Workflow.Thread.loadNotesView( errand.thread.id ); \n\t\t\tnotes = thread.notes.sort(Array.SORT_DESCENDING ) using ( a, b ) {\n\t\t\t\tif( a.timestampWritten < b.timestampWritten ) return -1;\n\t\t\t\tif( a.timestampWritten == b.timestampWritten ) return 0;\n\t\t\t\tif( a.timestampWritten > b.timestampWritten ) return 1;\n\t\t\t};\n\t\t\tnotes.each() using ( note ) {\n\t\t\t\t\tlist[] = [\n\t\t\t\t\t'id' => note.id,\n\t\t\t\t\t'username' => note.writer.username,\n\t\t\t\t\t'note' => note.note,\n\t\t\t\t\t'writtenDate' => formatDateTime( note.timestampWritten ),\n\t\t\t\t\t'attachments' => (closure {\n\t\t\t\t\t\tarray attachmentList = [];\n\t\t\t\t\t\tnote.attachments.each() using( attachment ) {\n\t\t\t\t\t\t\tattachmentList[] = [\n\t\t\t\t\t\t\t\t'fileName' => attachment.fileName,\n\t\t\t\t\t\t\t\t'downloadURL' => uriForApplicationActionWithCommand('workflow', \"note/${note.id}/attachment/${attachment.id}/\" + attachment.fileName.urlEncode())\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn attachmentList;\n\t\t\t\t\t}).invoke()\n\t\t\t\t];\n\t\t\t};\n\t\t\treturn list;\n\t\t}\n\t\treturn [];\n\t}\n\n\tfunction _getClientNotes(number errandId ){\n\t\tarray list = [];\n\t\tobject errand = Workflow.Errand.loadClientView( errandId );\n\t\tif( errand.client ) {\n\t\t\tarray notes = errand.client.notes.sort(Array.SORT_DESCENDING ) using ( a, b ) {\n\t\t\t\tif( a.timestampWritten < b.timestampWritten ) return -1;\n\t\t\t\tif( a.timestampWritten == b.timestampWritten ) return 0;\n\t\t\t\tif( a.timestampWritten > b.timestampWritten ) return 1;\n\t\t\t};\n\t\t\tnotes.each() using ( note ) {\n\t\t\t\tlist[] = [\n\t\t\t\t\t'id' => note.id,\n\t\t\t\t\t'username' => note.writer.username,\n\t\t\t\t\t'note' => note.note,\n\t\t\t\t\t'writtenDate' => formatDateTime(note.timestampWritten),\n\t\t\t\t\t'attachments' => (closure {\n\t\t\t\t\t\tarray attachmentList = [];\n\t\t\t\t\t\tnote.attachments.each() using( attachment ) {\n\t\t\t\t\t\t\tattachmentList[] = [\n\t\t\t\t\t\t\t\t'fileName' => attachment.fileName,\n\t\t\t\t\t\t\t\t'downloadURL' => uriForApplicationActionWithCommand('workflow', \"note/${note.id}/attachment/${attachment.id}/\" + attachment.fileName.urlEncode())\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn attachmentList;\n\t\t\t\t\t}).invoke()\n\t\t\t\t];\n\t\t\t};\n\t\t\treturn list;\n\t\t}\n\t\treturn [];\n\t}\n\t\n}\n\nCache.page = new CentionBase();\n"], "filenames": ["lib/InternalChatProtocol.fe"], "buggy_code_start_loc": [94], "buggy_code_end_loc": [96], "fixing_code_start_loc": [94], "fixing_code_end_loc": [104], "type": "CWE-79", "message": "A vulnerability was found in cention-chatserver 3.8.0-rc1. It has been declared as problematic. Affected by this vulnerability is the function _formatBody of the file lib/InternalChatProtocol.fe. The manipulation of the argument body leads to cross site scripting. The attack can be launched remotely. Upgrading to version 3.9 is able to address this issue. The name of the patch is c4c0258bbd18f6915f97f91d5fee625384096a26. It is recommended to upgrade the affected component. The identifier VDB-221497 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125089", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-21T03:15:10.637", "lastModified": "2023-03-02T23:16:24.397", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in cention-chatserver 3.8.0-rc1. It has been declared as problematic. Affected by this vulnerability is the function _formatBody of the file lib/InternalChatProtocol.fe. The manipulation of the argument body leads to cross site scripting. The attack can be launched remotely. Upgrading to version 3.9 is able to address this issue. The name of the patch is c4c0258bbd18f6915f97f91d5fee625384096a26. It is recommended to upgrade the affected component. The identifier VDB-221497 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cention-chatserver_project:cention-chatserver:3.8.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "DDB59D2D-2C72-4E31-8476-1C7BA3CDBCCF"}]}]}], "references": [{"url": "https://github.com/cention-mujibur-rahman/cention-chatserver/commit/c4c0258bbd18f6915f97f91d5fee625384096a26", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/cention-mujibur-rahman/cention-chatserver/releases/tag/3.9", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.221497", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.221497", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cention-mujibur-rahman/cention-chatserver/commit/c4c0258bbd18f6915f97f91d5fee625384096a26"}}