{"buggy_code": ["<h1><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO detection configuration');?></h1>\n\n<?php if (isset($errors)) : ?>\n\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/validation_error.tpl.php'));?>\n<?php endif; ?>\n\n<?php if (isset($updated) && $updated == 'done') : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Settings updated'); ?>\n\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n<?php endif; ?>\n\n\n<div role=\"tabpanel\" ng-non-bindable>\n\n\t<!-- Nav tabs -->\n\t<ul class=\"nav nav-tabs\" role=\"tablist\">\n\t\t<li role=\"presentation\" class=\"nav-item\"><a class=\"active nav-link\" href=\"#geoconfiguration\" aria-controls=\"geoconfiguration\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO detection configuration');?></a></li>\n\t\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link\" id=\"map-activator\" href=\"#mapoptions\" aria-controls=\"mapoptions\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Map location')?></a></li>\n\t</ul>\n\n\t<!-- Tab panes -->\n\t<div class=\"tab-content\">\n\t\t<div role=\"tabpanel\" class=\"tab-pane active\" id=\"geoconfiguration\">\n\t\t\t<form action=\"\" method=\"post\">\n\n                <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n                <label><input type=\"checkbox\" id=\"id_GeoDetectionEnabled\" name=\"GeoDetectionEnabled\" value=\"on\" <?php isset($geo_data['geo_detection_enabled']) && $geo_data['geo_detection_enabled'] == 1 ? print 'checked=\"checked\"' : ''?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO Enabled');?></label> <br />\n                \n\t\t\t\t<div role=\"tabpanel\" class=\"<?php (!isset($geo_data['geo_detection_enabled']) || $geo_data['geo_detection_enabled'] == 0) ? print ' hide' : '' ?>\" id=\"settings-geo\">\n\n\t\t\t\t\t<!-- Nav tabs -->\n\t\t\t\t\t<ul class=\"nav nav-tabs mb-2\" role=\"tablist\">\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'freegeoip') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#freegeoip\" aria-controls=\"freegeoip\" role=\"tab\" data-toggle=\"tab\">https://ipstack.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'mod_geoip2') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#mod_geoip2\" aria-controls=\"mod_geoip2\" role=\"tab\" data-toggle=\"tab\">mod_geoip2</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'max_mind') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#maxmind\" aria-controls=\"maxmind\" role=\"tab\" data-toggle=\"tab\">MaxMind</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'php_geoip') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#phpgeoip\" aria-controls=\"phpgeoip\" role=\"tab\" data-toggle=\"tab\">PHP-GeoIP</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipinfodbcom') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#panel3\" aria-controls=\"panel3\" role=\"tab\" data-toggle=\"tab\">http://ipinfodb.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'locatorhq') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#panel4\" aria-controls=\"panel4\" role=\"tab\" data-toggle=\"tab\">http://www.locatorhq.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipapi') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#ipapi\" aria-controls=\"ipapi\" role=\"tab\" data-toggle=\"tab\">https://ip-api.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'abstractapi') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#abstractapi\" aria-controls=\"abstractapi\" role=\"tab\" data-toggle=\"tab\">https://www.abstractapi.com</a></li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<!-- Tab panes -->\n\t\t\t\t\t<div class=\"tab-content\">\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'freegeoip') ? print 'active' : ''?>\" id=\"freegeoip\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><input type=\"radio\" name=\"UseGeoIP\" value=\"freegeoip\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'freegeoip') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use this service'); ?></label> \n\t\t\t\t\t\t      </div>\n\n                            <p>Get API Key from - <a href=\"https://ipstack.com\">https://ipstack.com</a></p>\n\n                              <div class=\"form-group\">\n                                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label>\n                                    <input class=\"form-control\" type=\"text\" name=\"freegeoip_key\" value=\"<?php isset($geo_data['freegeoip_key']) ? print $geo_data['freegeoip_key'] : print '' ?>\">\n                              </div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'mod_geoip2') ? print 'active' : ''?>\" id=\"mod_geoip2\">\n\t\t\t\t\t\t    <div>\n\t\t\t\t\t\t      <label><input type=\"radio\" name=\"UseGeoIP\" value=\"mod_geoip2\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'mod_geoip2') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use mod_geoip2'); ?></label> \n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country code server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_COUNTRY_CODE\" value=\"<?php isset($geo_data['mod_geo_ip_country_code']) ? print $geo_data['mod_geo_ip_country_code'] : print 'GEOIP_COUNTRY_CODE' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country name server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_COUNTRY_NAME\" value=\"<?php isset($geo_data['mod_geo_ip_country_name']) ? print $geo_data['mod_geo_ip_country_name'] : print 'GEOIP_COUNTRY_NAME' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','City name server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_CITY\" value=\"<?php isset($geo_data['mod_geo_ip_city_name']) ? print $geo_data['mod_geo_ip_city_name'] : print 'GEOIP_CITY' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Region name server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_REGION\" value=\"<?php isset($geo_data['mod_geo_ip_region_name']) ? print $geo_data['mod_geo_ip_region_name'] : print 'GEOIP_REGION' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\t\t\t      \n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Latitude variable'); ?></label>\n\t\t\t\t\t\t\t      <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_LATITUDE\" value=\"<?php isset($geo_data['mod_geo_ip_latitude']) ? print $geo_data['mod_geo_ip_latitude'] : print 'GEOIP_LATITUDE' ?>\"> \n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t  \t\t\n\t\t\t\t\t\t\t  <div class=\"form-group\">\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t     <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Longitude variable'); ?></label> \n\t\t\t\t\t\t\t     <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_LONGITUDE\" value=\"<?php isset($geo_data['mod_geo_ip_longitude']) ? print $geo_data['mod_geo_ip_longitude'] : print 'GEOIP_LONGITUDE' ?>\"> \n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n                        <div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipapi') ? print 'active' : ''?>\" id=\"ipapi\">\n\t\t\t\t\t\t    <div>\n\t\t\t\t\t\t        <label><input type=\"radio\" name=\"UseGeoIP\" value=\"ipapi\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipapi') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use http://ip-api.com'); ?></label>\n\n                                <div class=\"form-group\">\n                                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?> (Optional)</label>\n                                    <input class=\"form-control\" type=\"text\" name=\"ipapi_key\" value=\"<?php isset($geo_data['ipapi_key']) ? print $geo_data['ipapi_key'] : print '' ?>\">\n                                </div>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n                        <div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'abstractapi') ? print 'active' : ''?>\" id=\"abstractapi\">\n\t\t\t\t\t\t    <div>\n\t\t\t\t\t\t        <label><input type=\"radio\" name=\"UseGeoIP\" value=\"abstractapi\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'abstractapi') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use https://www.abstractapi.com/ip-geolocation-api'); ?></label>\n\n                                <div class=\"form-group\">\n                                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label>\n                                    <input class=\"form-control\" type=\"text\" name=\"abstractapi_key\" value=\"<?php isset($geo_data['abstractapi_key']) ? print $geo_data['abstractapi_key'] : print '' ?>\">\n                                </div>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'max_mind') ? print 'active' : ''?>\" id=\"maxmind\">\n\t\t\t\t\t\t    <label><input type=\"radio\" name=\"UseGeoIP\" value=\"max_mind\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'max_mind') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use MaxMind, does not depend on any third party remote service'); ?></label>\n\n\t\t\t\t\t\t\t\t<p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','You can download city/country database from.'); ?>&nbsp;<a target=\"_blank\" href=\"http://dev.maxmind.com/geoip/geoip2/geolite2/\">MaxMind</a>\n\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t<p>\n      \t<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','bcmath php extension detected'); ?> - <?php echo extension_loaded ('bcmath' ) ? '<span class=\"badge badge-success\">Yes</span>' : '<span class=\"badge badge-danger\">No</span>'; ?>\n      \t</p>\n\n      \t                        <div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Location of city database'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"CityGeoLocation\" value=\"<?php isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  print htmlspecialchars($geo_data['max_mind_city_location']) : print 'var/external/geoip/GeoLite2-City.mmdb' ?>\" />\n                                </div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t\t\t\t\t\t<label><input type=\"radio\" name=\"MaxMindDetectionType\" value=\"country\" <?php (isset($geo_data['max_mind_detection_type']) && $geo_data['max_mind_detection_type'] == 'country') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','User country based detection, faster')?></label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t<?php if (file_exists(\"var/external/geoip/GeoLite2-Country.mmdb\")) : ?> <span class=\"badge badge-success\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File exists'); ?>\">var/external/geoip/GeoLite2-Country.mmdb</span> <?php else : ?><span class=\"badge badge-danger\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File does not exists'); ?>\">var/external/geoip/GeoLite2-Country.mmdb</span><?php endif;?>\n\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t\t\t\t\t\t<label><input type=\"radio\" name=\"MaxMindDetectionType\" value=\"city\" <?php (isset($geo_data['max_mind_detection_type']) && $geo_data['max_mind_detection_type'] == 'city') ? print 'checked=\"checked\"' : '' ?> <?php if (!file_exists(isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  $geo_data['max_mind_city_location'] : 'var/external/geoip/GeoLite2-City.mmdb')) : ?> disabled <?php endif;?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','User city based detection, slower')?></label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t<?php if (file_exists(isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  $geo_data['max_mind_city_location'] : 'var/external/geoip/GeoLite2-City.mmdb')) : ?> <span class=\"badge badge-success\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File exists');?>\"><?php isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  print htmlspecialchars($geo_data['max_mind_city_location']) : print 'var/external/geoip/GeoLite2-City.mmdb' ?></span> <?php else : ?><span class=\"badge badge-danger\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File does not exists')?>\"><?php isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  print htmlspecialchars($geo_data['max_mind_city_location']) : print 'var/external/geoip/GeoLite2-City.mmdb' ?></span><?php endif;?>\n\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tThis product includes GeoLite2 data created by MaxMind, available from <a href=\"http://www.maxmind.com\">http://www.maxmind.com</a>.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'php_geoip') ? print 'active' : ''?>\" id=\"phpgeoip\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><input type=\"radio\" name=\"UseGeoIP\" value=\"php_geoip\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'php_geoip') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use PHP-GeoIP module'); ?></label>\n\t\t\t\t\t\t\t\t  <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Support for PHP-GeoIP detected'); ?> - <?php echo function_exists('geoip_country_code_by_name') ? '<span class=\"badge badge-success\">Yes</span>' : '<span class=\"badge badge-danger\">No</span>'; ?></p>\n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipinfodbcom') ? print 'active' : ''?>\" id=\"panel3\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t         <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Requests will be comming from');?> - <?php echo erLhcoreClassIPDetect::getServerAddress(); ?></p>\n\n\t\t\t\t\t\t\t\t    <label class=\"inline\"><input type=\"radio\" name=\"UseGeoIP\" value=\"ipinfodbcom\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipinfodbcom') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use this service'); ?></label> \n\t\t\t\t\t\t\t\t    \n\t\t\t\t\t\t\t\t    <div class=\"form-group\">\n\t\t\t\t\t\t\t\t        <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label> \n\t\t\t\t\t\t\t\t        <input class=\"form-control\" type=\"text\" name=\"ipinfodbAPIKey\" value=\"<?php isset($geo_data['ipinfodbcom_api_key']) ? print htmlspecialchars($geo_data['ipinfodbcom_api_key']) : print '' ?>\">\n\t\t\t\t\t\t\t\t    </div> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'locatorhq') ? print 'active' : ''?>\" id=\"panel4\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\n\t\t\t\t\t\t\t\t <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Requests will be comming from');?> - <?php echo erLhcoreClassIPDetect::getServerAddress(); ?></p>\n\n\t\t\t\t\t\t\t\t<label class=\"inline\"><input type=\"radio\" name=\"UseGeoIP\" value=\"locatorhq\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'locatorhq') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use this service'); ?></label> \n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"locatorhqAPIKey\" value=\"<?php isset($geo_data['locatorhq_api_key']) ? print htmlspecialchars($geo_data['locatorhq_api_key']) : print '' ?>\"> \n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Username'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"locatorhqUsername\" value=\"<?php isset($geo_data['locatorhqusername']) ? print htmlspecialchars($geo_data['locatorhqusername']) : print '' ?>\"> \n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','IP, if your site remote IP is different from detected one, please provide correct remote IP address'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"locatorhqIP\" value=\"<?php isset($geo_data['locatorhqip']) ? print htmlspecialchars($geo_data['locatorhqip']) : print erLhcoreClassIPDetect::getServerAddress() ?>\"> \n                                </div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"StoreGeoIPConfiguration\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Save'); ?>\" />\n\n\t\t\t</form>\n\t\t</div>\n\t\t\n\t\t<div role=\"tabpanel\" class=\"tab-pane\" id=\"mapoptions\">\n\t\t    <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Drag a marker where you want to have map centered by default. Zoom is also saved.')?></p>\n\n\t\t    <div class=\"form-group\">\n\t\t      <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Google Maps API key, saved automatically. After pasting the key, refresh the page.'); ?></label> \n\t\t      <input class=\"form-control\" type=\"text\" id=\"id_GMapsAPIKey\" value=\"<?php isset($geo_location_data['gmaps_api_key']) ? print $geo_location_data['gmaps_api_key'] : print '' ?>\"> \n\t\t    </div>\n\n      \t\t<div id=\"map_canvas\" style=\"height:600px;width:100%;\"></div>\t\t\t\n\t\t</div>\n\t\t\n\t</div>\n</div>\n\n<script>\nvar marker = null;\nvar map = null;\n\nfunction loadMapLocationChoosing(){\n\n\t$('#map-activator').click(function(){\n\t\tsetTimeout(function(){\n\t\t\tgoogle.maps.event.trigger(map, 'resize');\n\t\t\tmap.setCenter(marker.getPosition());\n\t\t},500);\n\t});\n\n\tvar mapOptions = {\n\t\t    zoom: <?php echo $geo_location_data['zoom'] ?>,\n\t\t    mapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t    disableDefaultUI: true,\n\t        options: {\n\t            zoomControl: true,\n\t            scrollwheel: true,\n\t            streetViewControl: true\n\t        },\n\t\t    center: new google.maps.LatLng(<?php echo $geo_location_data['lat'] ?>,<?php echo $geo_location_data['lng']?>)\n\t\t  };\n\n\tmap = new google.maps.Map(document.getElementById('map_canvas'),mapOptions);\n\n\tvar marker = new google.maps.Marker(\n\t{\n\t    map:map,\n\t    draggable:true,\n\t    animation: google.maps.Animation.DROP,\n\t    position: new google.maps.LatLng(<?php echo $geo_location_data['lat'] ?>,<?php echo $geo_location_data['lng']?>)\n\t});\n\n\tgoogle.maps.event.addListener(map, 'zoom_changed', function() {\n\t\t var pos = marker.getPosition();\n\t\t $.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),zoom:map.getZoom(),store_map:1,csfr_token:confLH.csrf_token,lat:pos.lat().toFixed(4),lng:pos.lng().toFixed(4)}, function(data){\n\n\t     });\n\t});\n\n\tgoogle.maps.event.addListener(marker, 'dragend', function(evt) {\n\t    $.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),zoom:map.getZoom(),store_map:1,csfr_token:confLH.csrf_token,lat:evt.latLng.lat().toFixed(4),lng:evt.latLng.lng().toFixed(4)}, function(data){\n\n    \t});\n\t});\n\n\t$('#id_GMapsAPIKey').keyup(function() {\n\n\t\tvar pos = marker.getPosition();\n\t\t\n\t\tif (marker != null && map != null && typeof pos != 'undefined') {    \t\t\n    \t\t$.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),zoom:map.getZoom(),store_map:1,csfr_token:confLH.csrf_token,lat:pos.lat().toFixed(4),lng:pos.lng().toFixed(4)}, function(data){\n    \t\t});\n\t\t} else {\n\t\t\tvar pos = marker.getPosition();\n    \t\t$.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),store_map:1,csfr_token:confLH.csrf_token}, function(data){\n    \t\t});\n\t\t}\n\t});\n};\n\n$('#id_GeoDetectionEnabled').change(function(){\n    if ($(this).is(':checked')){\n        $('#settings-geo').removeClass('hide');\n    } else {\n        $('#settings-geo').addClass('hide');\n    };   \n});\n</script>\n\n<script async defer src=\"https://maps.googleapis.com/maps/api/js?<?php if (erConfigClassLhConfig::getInstance()->getSetting( 'site', 'maps_api_key', false)) {echo 'key=' , erConfigClassLhConfig::getInstance()->getSetting( 'site', 'maps_api_key', false) , '&';} elseif (isset($geo_location_data['gmaps_api_key'])) {echo 'key=' ,$geo_location_data['gmaps_api_key'], '&';}?>callback=loadMapLocationChoosing\"></script>", "<?php\n/**\n * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.\n * @license http://ez.no/licenses/new_bsd New BSD License\n * @version 1.8\n * @filesource\n * @package Base\n */\n\n/**\n * Provides a selection of static independent methods to provide functionality\n * for file and file system handling.\n *\n * This example shows how to use the findRecursive method:\n * <code>\n * <?php\n * // lists all the files under /etc (including subdirectories) that end in\n * // .conf\n * $confFiles = ezcBaseFile::findRecursive( \"/etc\", array( '@\\.conf$@' ) );\n *\n * // lists all autoload files in the components source tree and excludes the\n * // ones in the autoload subdirectory. Statistics are returned in the $stats\n * // variable which is passed by reference.\n * $files = ezcBaseFile::findRecursive(\n *     \"/dat/dev/ezcomponents\",\n *     array( '@src/.*_autoload.php$@' ),\n *     array( '@/autoload/@' ),\n *     $stats\n * );\n *\n * // lists all binaries in /bin except the ones starting with a \"g\"\n * $data = ezcBaseFile::findRecursive( \"/bin\", array(), array( '@^/bin/g@' ) );\n * ?>\n * </code>\n *\n * @package Base\n * @version 1.8\n * @mainclass\n */\nclass ezcBaseFile\n{\n    /**\n     * This is the callback used by findRecursive to collect data.\n     *\n     * This callback method works together with walkRecursive() and is called\n     * for every file/and or directory. The $context is a callback specific\n     * container in which data can be stored and shared between the different\n     * calls to the callback function. The walkRecursive() function also passes\n     * in the full absolute directory in $sourceDir, the filename in $fileName\n     * and file information (such as size, modes, types) as an array as\n     * returned by PHP's stat() in the $fileInfo parameter.\n     *\n     * @param ezcBaseFileFindContext $context\n     * @param string $sourceDir\n     * @param string $fileName\n     * @param array(stat) $fileInfo\n     */\n    static protected function findRecursiveCallback( ezcBaseFileFindContext $context, $sourceDir, $fileName, $fileInfo )\n    {\n        // ignore if we have a directory\n        if ( $fileInfo['mode'] & 0x4000 )\n        {\n            return;\n        }\n\n        // update the statistics\n        $context->elements[] = $sourceDir . DIRECTORY_SEPARATOR . $fileName;\n        $context->count++;\n        $context->size += $fileInfo['size'];\n    }\n\n    /**\n     * Walks files and directories recursively on a file system\n     *\n     * This method walks over a directory and calls a callback from every file\n     * and directory it finds. You can use $includeFilters to include only\n     * specific files, and $excludeFilters to exclude certain files from being\n     * returned. The function will always go into subdirectories even if the\n     * entry would not have passed the filters.\n     *\n     * The callback is passed in the $callback parameter, and the\n     * $callbackContext will be send to the callback function/method as\n     * parameter so that you can store data in there that persists with all the\n     * calls and recursive calls to this method. It's up to the callback method\n     * to do something useful with this. The callback function's parameters are\n     * in order:\n     *\n     * <ul>\n     * <li>ezcBaseFileFindContext $context</li>\n     * <li>string $sourceDir</li>\n     * <li>string $fileName</li>\n     * <li>array(stat) $fileInfo</li>\n     * </ul>\n     *\n     * See {@see findRecursiveCallback()} for an example of a callback function.\n     *\n     * Filters are regular expressions and are therefore required to have\n     * starting and ending delimiters. The Perl Compatible syntax is used as\n     * regular expression language.\n     *\n     * @param string         $sourceDir\n     * @param array(string)  $includeFilters\n     * @param array(string)  $excludeFilters\n     * @param callback       $callback\n     * @param mixed          $callbackContext\n     *\n     * @throws ezcBaseFileNotFoundException if the $sourceDir directory is not\n     *         a directory or does not exist.\n     * @throws ezcBaseFilePermissionException if the $sourceDir directory could\n     *         not be opened for reading.\n     * @return array\n     */\n    static public function walkRecursive( $sourceDir, array $includeFilters = array(), array $excludeFilters = array(), $callback, &$callbackContext )\n    {\n        if ( !is_dir( $sourceDir ) )\n        {\n            throw new ezcBaseFileNotFoundException( $sourceDir, 'directory' );\n        }\n        $elements = array();\n        $d = @dir( $sourceDir );\n        if ( !$d )\n        {\n            throw new ezcBaseFilePermissionException( $sourceDir, ezcBaseFileException::READ );\n        }\n\n        while ( ( $entry = $d->read() ) !== false )\n        {\n            if ( $entry == '.' || $entry == '..' )\n            {\n                continue;\n            }\n\n            $fileInfo = @stat( $sourceDir . DIRECTORY_SEPARATOR . $entry );\n            if ( !$fileInfo )\n            {\n                $fileInfo = array( 'size' => 0, 'mode' => 0 );\n            }\n\n            if ( $fileInfo['mode'] & 0x4000 )\n            {\n                // We need to ignore the Permission exceptions here as it can\n                // be normal that a directory can not be accessed. We only need\n                // the exception if the top directory could not be read.\n                try\n                {\n                    call_user_func_array( $callback, array( $callbackContext, $sourceDir, $entry, $fileInfo ) );\n                    $subList = self::walkRecursive( $sourceDir . DIRECTORY_SEPARATOR . $entry, $includeFilters, $excludeFilters, $callback, $callbackContext );\n                    $elements = array_merge( $elements, $subList );\n                }\n                catch ( ezcBaseFilePermissionException $e )\n                {\n                }\n            }\n            else\n            {\n                // By default a file is included in the return list\n                $ok = true;\n                // Iterate over the $includeFilters and prohibit the file from\n                // being returned when atleast one of them does not match\n                foreach ( $includeFilters as $filter )\n                {\n                    if ( !preg_match( $filter, $sourceDir . DIRECTORY_SEPARATOR . $entry ) )\n                    {\n                        $ok = false;\n                        break;\n                    }\n                }\n                // Iterate over the $excludeFilters and prohibit the file from\n                // being returns when atleast one of them matches\n                foreach ( $excludeFilters as $filter )\n                {\n                    if ( preg_match( $filter, $sourceDir . DIRECTORY_SEPARATOR . $entry ) )\n                    {\n                        $ok = false;\n                        break;\n                    }\n                }\n\n                // If everything's allright, call the callback and add the\n                // entry to the elements array\n                if ( $ok )\n                {\n                    call_user_func( $callback, $callbackContext, $sourceDir, $entry, $fileInfo );\n                    $elements[] = $sourceDir . DIRECTORY_SEPARATOR . $entry;\n                }\n            }\n        }\n        sort( $elements );\n        return $elements;\n    }\n\n    /**\n     * Finds files recursively on a file system\n     *\n     * With this method you can scan the file system for files. You can use\n     * $includeFilters to include only specific files, and $excludeFilters to\n     * exclude certain files from being returned. The function will always go\n     * into subdirectories even if the entry would not have passed the filters.\n     * It uses the {@see walkRecursive()} method to do the actually recursion.\n     *\n     * Filters are regular expressions and are therefore required to have\n     * starting and ending delimiters. The Perl Compatible syntax is used as\n     * regular expression language.\n     *\n     * If you pass an empty array to the $statistics argument, the function\n     * will in details about the number of files found into the 'count' array\n     * element, and the total filesize in the 'size' array element. Because this\n     * argument is passed by reference, you *have* to pass a variable and you\n     * can not pass a constant value such as \"array()\".\n     *\n     * @param string         $sourceDir\n     * @param array(string)  $includeFilters\n     * @param array(string)  $excludeFilters\n     * @param array()        $statistics\n     *\n     * @throws ezcBaseFileNotFoundException if the $sourceDir directory is not\n     *         a directory or does not exist.\n     * @throws ezcBaseFilePermissionException if the $sourceDir directory could\n     *         not be opened for reading.\n     * @return array\n     */\n    static public function findRecursive( $sourceDir, array $includeFilters = array(), array $excludeFilters = array(), &$statistics = null )\n    {\n        // init statistics array\n        if ( !is_array( $statistics ) || !array_key_exists( 'size', $statistics ) || !array_key_exists( 'count', $statistics ) )\n        {\n            $statistics['size']  = 0;\n            $statistics['count'] = 0;\n        }\n\n        // create the context, and then start walking over the array\n        $context = new ezcBaseFileFindContext;\n        self::walkRecursive( $sourceDir, $includeFilters, $excludeFilters, array( 'ezcBaseFile', 'findRecursiveCallback' ), $context );\n\n        // collect the statistics\n        $statistics['size'] = $context->size;\n        $statistics['count'] = $context->count;\n\n        // return the found and pattern-matched files\n        sort( $context->elements );\n        return $context->elements;\n    }\n\n\n    /**\n     * Removes files and directories recursively from a file system\n     *\n     * This method recursively removes the $directory and all its contents.\n     * You should be <b>extremely</b> careful with this method as it has the\n     * potential to erase everything that the current user has access to.\n     *\n     * @param string $directory\n     */\n    static public function removeRecursive( $directory )\n    {\n        $sourceDir = realpath( $directory );\n        if ( !$sourceDir )\n        {\n            throw new ezcBaseFileNotFoundException( $directory, 'directory' );\n        }\n        $d = @dir( $sourceDir );\n        if ( !$d )\n        {\n            throw new ezcBaseFilePermissionException( $directory, ezcBaseFileException::READ );\n        }\n        // check if we can remove the dir\n        $parentDir = realpath( $directory . DIRECTORY_SEPARATOR . '..' );\n        if ( !is_writable( $parentDir ) )\n        {\n            throw new ezcBaseFilePermissionException( $parentDir, ezcBaseFileException::WRITE );\n        }\n        // loop over contents\n        while ( ( $entry = $d->read() ) !== false )\n        {\n            if ( $entry == '.' || $entry == '..' )\n            {\n                continue;\n            }\n\n            if ( is_dir( $sourceDir . DIRECTORY_SEPARATOR . $entry ) )\n            {\n                self::removeRecursive( $sourceDir . DIRECTORY_SEPARATOR . $entry );\n            }\n            else\n            {\n                if ( @unlink( $sourceDir . DIRECTORY_SEPARATOR . $entry ) === false )\n                {\n                    throw new ezcBaseFilePermissionException( $directory . DIRECTORY_SEPARATOR . $entry, ezcBaseFileException::REMOVE );\n                }\n            }\n        }\n        $d->close();\n        rmdir( $sourceDir );\n    }\n\n    /**\n    * Recursively copy a file or directory.\n    *\n    * Recursively copy a file or directory in $source to the given\n    * destination. If a depth is given, the operation will stop, if the given\n    * recursion depth is reached. A depth of -1 means no limit, while a depth\n    * of 0 means, that only the current file or directory will be copied,\n    * without any recursion.\n    *\n    * You may optionally define modes used to create files and directories.\n    *\n    * @throws ezcBaseFileNotFoundException\n    *      If the $sourceDir directory is not a directory or does not exist.\n    * @throws ezcBaseFilePermissionException\n    *      If the $sourceDir directory could not be opened for reading, or the\n    *      destination is not writeable.\n    *\n    * @param string $source\n    * @param string $destination\n    * @param int $depth\n    * @param int $dirMode\n    * @param int $fileMode\n    * @return void\n    */\n    static public function copyRecursive( $source, $destination, $depth = -1, $dirMode = 0775, $fileMode = 0664 )\n    {\n        // Check if source file exists at all.\n        if ( !is_file( $source ) && !is_dir( $source ) )\n        {\n            throw new ezcBaseFileNotFoundException( $source );\n        }\n\n        // Destination file should NOT exist\n        if ( is_file( $destination ) || is_dir( $destination ) )\n        {\n            throw new ezcBaseFilePermissionException( $destination, ezcBaseFileException::WRITE );\n        }\n\n        // Skip non readable files in source directory\n        if ( !is_readable( $source ) )\n        {\n            return;\n        }\n\n        // Copy\n        if ( is_dir( $source ) )\n        {\n            mkdir( $destination );\n            // To ignore umask, umask() should not be changed with\n            // multithreaded servers...\n            chmod( $destination, $dirMode );\n        }\n        elseif ( is_file( $source ) )\n        {\n            copy( $source, $destination );\n            chmod( $destination, $fileMode );\n        }\n\n        if ( ( $depth === 0 ) ||\n            ( !is_dir( $source ) ) )\n        {\n            // Do not recurse (any more)\n            return;\n        }\n\n        // Recurse\n        $dh = opendir( $source );\n        while ( ( $file = readdir( $dh ) ) !== false )\n        {\n            if ( ( $file === '.' ) ||\n                ( $file === '..' ) )\n            {\n                continue;\n            }\n\n            self::copyRecursive(\n                $source . '/' . $file,\n                $destination . '/' . $file,\n                $depth - 1, $dirMode, $fileMode\n            );\n        }\n    }\n\n    /**\n     * Calculates the relative path of the file/directory '$path' to a given\n     * $base path.\n     *\n     * $path and $base should be fully absolute paths. This function returns the\n     * answer of \"How do I go from $base to $path\". If the $path and $base are\n     * the same path, the function returns '.'. This method does not touch the\n     * filesystem.\n     *\n     * @param string $path\n     * @param string $base\n     * @return string\n     */\n    static public function calculateRelativePath( $path, $base )\n    {\n        // Sanitize the paths to use the correct directory separator for the platform\n        $path = strtr( $path, '\\\\/', DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR );\n        $base = strtr( $base, '\\\\/', DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR );\n\n        $base = explode( DIRECTORY_SEPARATOR, $base );\n        $path = explode( DIRECTORY_SEPARATOR, $path );\n\n        // If the paths are the same we return\n        if ( $base === $path )\n        {\n            return '.';\n        }\n\n        $result = '';\n\n        $pathPart = array_shift( $path );\n        $basePart = array_shift( $base );\n        while ( $pathPart == $basePart )\n        {\n            $pathPart = array_shift( $path );\n            $basePart = array_shift( $base );\n        }\n\n        if ( $pathPart != null )\n        {\n            array_unshift( $path, $pathPart );\n        }\n        if ( $basePart != null )\n        {\n            array_unshift( $base, $basePart );\n        }\n\n        $result = str_repeat( '..' . DIRECTORY_SEPARATOR, count( $base ) );\n        // prevent a trailing DIRECTORY_SEPARATOR in case there is only a ..\n        if ( count( $path ) == 0 )\n        {\n            $result = substr( $result, 0, -strlen( DIRECTORY_SEPARATOR ) );\n        }\n        $result .= join( DIRECTORY_SEPARATOR, $path );\n\n        return $result;\n    }\n\n    /**\n     * Returns whether the passed $path is an absolute path, giving the current $os.\n     *\n     * With the $os parameter you can tell this function to use the semantics\n     * for a different operating system to determine whether a path is\n     * absolute. The $os argument defaults to the OS that the script is running\n     * on.\n     *\n     * @param string $path\n     * @param string $os\n     * @return bool\n     */\n    public static function isAbsolutePath( $path, $os = null )\n    {\n        if ( $os === null )\n        {\n            $os = ezcBaseFeatures::os();\n        }\n\n        // Stream wrapper like phar can also be considered absolute paths\n        if ( preg_match( '(^[a-z]{3,}://)S', $path ) )\n        {\n            return true;\n        }\n\n        switch ( $os )\n        {\n            case 'Windows':\n                // Sanitize the paths to use the correct directory separator for the platform\n                $path = strtr( $path, '\\\\/', '\\\\\\\\' );\n\n                // Absolute paths with drive letter: X:\\\n                if ( preg_match( '@^[A-Z]:\\\\\\\\@i', $path ) )\n                {\n                    return true;\n                }\n\n                // Absolute paths with network paths: \\\\server\\share\\\n                if ( preg_match( '@^\\\\\\\\\\\\\\\\[A-Z]+\\\\\\\\[^\\\\\\\\]@i', $path ) )\n                {\n                    return true;\n                }\n                break;\n            case 'Mac':\n            case 'Linux':\n            case 'FreeBSD':\n            default:\n                // Sanitize the paths to use the correct directory separator for the platform\n                $path = strtr( $path, '\\\\/', '//' );\n\n                if ( $path[0] == '/' )\n                {\n                    return true;\n                }\n        }\n        return false;\n    }\n}\n?>\n", "<?php\n/**\n * File containing the ezcConsoleOption class.\n *\n * @package ConsoleTools\n * @version 1.6.1\n * @copyright Copyright (C) 2005-2010 eZ Systems AS. All rights reserved.\n * @license http://ez.no/licenses/new_bsd New BSD License\n * @filesource\n */\n\n/**\n * Objects of this class store data about a single option for ezcConsoleInput.\n *\n * This class represents a single command line option, which can be handled by \n * the ezcConsoleInput class. This classes only purpose is the storage of\n * the parameter data, the handling of options and arguments is done by the\n * class {@link ezcConsoleInput}.\n * \n * @property-read string $short\n *                Short name of the parameter without '-' (eg. 'f').\n * @property-read string $long\n *                Long name of the parameter without '--' (eg. 'file').\n * @property int $type\n *           Value type of this parameter, default is ezcConsoleInput::TYPE_NONE.\n *           See {@link ezcConsoleInput::TYPE_NONE},\n *           {@link ezcConsoleInput::TYPE_INT} and\n *           {@link ezcConsoleInput::TYPE_STRING}.\n * @property mixed $default\n *           Default value if the parameter is submitted without value.  If a\n *           parameter is eg. of type ezcConsoleInput::TYPE_STRING and\n *           therefore expects a value when being submitted, it may be\n *           submitted without a value and automatically get the default value\n *           specified here.\n * @property bool $multiple\n *           Is the submission of multiple instances of this parameters\n *           allowed? \n * @property string $shorthelp\n *           Short help text. Usually displayed when showing parameter help\n *           overview.\n * @property string $longhelp\n *           Long help text. Usually displayed when showing parameter detailed\n *           help.\n * @property bool $arguments\n *           Whether arguments to the program are allowed, when this parameter\n *           is submitted. \n * @property bool $mandatory\n *           Whether a parameter is mandatory to be set.  If this flag is true,\n *           the parameter must be submitted whenever the program is run.\n * @property bool $isHelpOption\n *           Whether a parameter is a help option.  If this flag is true, and\n *           the parameter is set, all options marked as mandatory may be\n *           skipped.\n *\n * @package ConsoleTools\n * @version 1.6.1\n */\nclass ezcConsoleOption\n{\n    /**\n     * Container to hold the properties\n     *\n     * @var array(string=>mixed)\n     */\n    protected $properties;\n\n    /**\n     * Dependency rules of this parameter.\n     * \n     * @see ezcConsoleOption::addDependency()\n     * @see ezcConsoleOption::removeDependency()\n     * @see ezcConsoleOption::hasDependency()\n     * @see ezcConsoleOption::getDependencies()\n     * @see ezcConsoleOption::resetDependencies()\n     * \n     * @var array(string=>ezcConsoleParamemterRule)\n     */\n    protected $dependencies = array();\n\n    /**\n     * Exclusion rules of this parameter.\n     * \n     * @see ezcConsoleOption::addExclusion()\n     * @see ezcConsoleOption::removeExclusion()\n     * @see ezcConsoleOption::hasExclusion()\n     * @see ezcConsoleOption::getExclusions()\n     * @see ezcConsoleOption::resetExclusions()\n     * \n     * @var array(string=>ezcConsoleParamemterRule)\n     */\n    protected $exclusions = array();\n\n    /**\n     * The value the parameter was assigned to when being submitted.\n     * Boolean false indicates the parameter was not submitted, boolean\n     * true means the parameter was submitted, but did not have a value.\n     * In any other case, this caries the submitted value.\n     * \n     * @var mixed\n     */\n    public $value = false;\n\n    /**\n     * Create a new parameter struct.\n     * Creates a new basic parameter struct with the base information \"$short\"\n     * (the short name of the parameter) and \"$long\" (the long version). You\n     * simply apply these parameters as strings (without '-' or '--'). So\n     *\n     * <code>\n     * $param = new ezcConsoleOption( 'f', 'file' );\n     * </code>\n     *\n     * will result in a parameter that can be accessed using\n     * \n     * <code>\n     * $ mytool -f\n     * </code>\n     *\n     * or\n     * \n     * <code>\n     * $ mytool --file\n     * </code>\n     * .\n     *\n     * The newly created parameter contains only it's 2 names and each other \n     * attribute is set to it's default value. You can simply manipulate\n     * those attributes by accessing them directly.\n     * \n     * @param string $short      Short name of the parameter without '-' (eg. 'f').\n     * @param string $long       Long name of the parameter without '--' (eg. 'file').\n     * @param int $type          Value type of the parameter. One of ezcConsoleInput::TYPE_*.\n     * @param mixed $default     Default value the parameter holds if not submitted.\n     * @param bool $multiple     If the parameter may be submitted multiple times.\n     * @param string $shorthelp  Short help text.\n     * @param string $longhelp   Long help text.\n     * @param array(ezcConsoleOptionRule) $dependencies Dependency rules.\n     * @param array(ezcConsoleOptionRule) $exclusions   Exclusion rules.\n     * @param bool $arguments    Whether supplying arguments is allowed when this parameter is set.\n     * @param bool $mandatory    Whether the parameter must be always submitted.\n     * @param bool $isHelpOption Indicates that the given parameter is a help \n     *                           option. If a help option is set, all rule \n     *                           checking is skipped (dependency/exclusion/\n     *                           mandatory).\n     *\n     * @throws ezcConsoleInvalidOptionNameException If the option names start with a \"-\" \n     *                                              sign or contain whitespaces.\n     */\n    public function __construct( \n        $short = '', \n        $long, \n        $type = ezcConsoleInput::TYPE_NONE, \n        $default = null, \n        $multiple = false,\n        $shorthelp = 'No help available.',\n        $longhelp = 'Sorry, there is no help text available for this parameter.', \n        array $dependencies = array(),\n        array $exclusions = array(), \n        $arguments = true,\n        $mandatory = false,\n        $isHelpOption = false\n    )\n    {\n        $this->properties['short'] = '';\n        $this->properties['long'] = '';\n        $this->properties['arguments'] = $arguments;\n\n        if ( !self::validateOptionName( $short ) )\n        {\n            throw new ezcConsoleInvalidOptionNameException( $short );\n        }\n        $this->properties['short'] = $short;\n        \n        if ( !self::validateOptionName( $long ) )\n        {\n            throw new ezcConsoleInvalidOptionNameException( $long );\n        }\n        $this->properties['long'] = $long;\n        \n        $this->__set( \"type\",      $type         !== null ? $type      : ezcConsoleInput::TYPE_NONE  );\n        $this->__set( \"multiple\",  $multiple     !== null ? $multiple  : false  );\n        $this->__set( \"default\",   $default      !== null ? $default   : null );\n        $this->__set( \"shorthelp\", $shorthelp    !== null ? $shorthelp : 'No help available.' );\n        $this->__set( \"longhelp\",  $longhelp     !== null ? $longhelp  : 'Sorry, there is no help text available for this parameter.' );\n        \n        $dependencies    = $dependencies !== null && is_array( $dependencies ) ? $dependencies : array();\n        foreach ( $dependencies as $dep )\n        {\n            $this->addDependency( $dep );\n        }\n        \n        $exclusions = $exclusions !== null && is_array( $exclusions ) ? $exclusions : array();\n        foreach ( $exclusions as $exc )\n        {\n            $this->addExclusion( $exc );\n        }\n\n        $this->__set( \"mandatory\",    $mandatory !== null ? $mandatory : false );\n        $this->__set( \"isHelpOption\", $isHelpOption !== null ? $isHelpOption : false );\n    }\n\n    /**\n     * Add a new dependency for a parameter.\n     * This registeres a new dependency rule with the parameter. If you try\n     * to add an already registered rule it will simply be ignored. Else,\n     * the submitted rule will be added to the parameter as a dependency.\n     *\n     * @param ezcConsoleOptionRule $rule The rule to add.\n     * @return void\n     */\n    public function addDependency( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->dependencies as $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                return;\n            }\n        }\n        $this->dependencies[] = $rule;\n    }\n    \n    /**\n     * Remove a dependency rule from a parameter.\n     * This removes a given rule from a parameter, if it exists. If the rule is\n     * not registered with the parameter, the method call will simply be ignored.\n     * \n     * @param ezcConsoleOptionRule $rule The rule to be removed.\n     * @return void\n     */\n    public function removeDependency( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->dependencies as $id => $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                unset( $this->dependencies[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Remove all dependency rule referring to a parameter.\n     * This removes all dependency rules from a parameter, that refer to as specific \n     * parameter. If no rule is registered with this parameter as reference, the \n     * method call will simply be ignored.\n     * \n     * @param ezcConsoleOption $param The param to be check for rules.\n     * @return void\n     */\n    public function removeAllDependencies( ezcConsoleOption $param )\n    {\n        foreach ( $this->dependencies as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                unset( $this->dependencies[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Returns if a dependency to the given option exists.\n     * Returns true if a dependency rule to the given option is registered,\n     * otherwise false.\n     * \n     * @param ezcConsoleOption $param The param to check if a dependency exists to.\n     * @return bool True if rule is registered, otherwise false.\n     */\n    public function hasDependency( ezcConsoleOption $param )\n    {\n        foreach ( $this->dependencies as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Returns the dependency rules registered with this parameter.\n     * Returns an array of registered dependencies.\n     *\n     * For example:\n     * <code>\n     * array(\n     *      0 => ezcConsoleOptionRule,\n     *      1 => ezcConsoleOptionRule,\n     *      2 => ezcConsoleOptionRule,\n     * );\n     * </code>\n     * \n     * @return array(ezcConsoleOptionRule) Dependency definition.\n     */\n    public function getDependencies()\n    {\n        return $this->dependencies;\n    }\n\n    /**\n     * Reset existing dependency rules.\n     * Deletes all registered dependency rules from the option definition.\n     * \n     * @return void\n     */\n    public function resetDependencies() \n    {\n        $this->dependencies = array();\n    }\n\n    /**\n     * Add a new exclusion for an option.\n     * This registeres a new exclusion rule with the option. If you try\n     * to add an already registered rule it will simply be ignored. Else,\n     * the submitted rule will be added to the option as a exclusion.\n     *\n     * @param ezcConsoleOptionRule $rule The rule to add.\n     * @return void\n     */\n    public function addExclusion( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->exclusions as $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                return;\n            }\n        }\n        $this->exclusions[] = $rule;\n    }\n    \n    /**\n     * Remove a exclusion rule from a option.\n     * This removes a given rule from a option, if it exists. If the rule is\n     * not registered with the option, the method call will simply be ignored.\n     * \n     * @param ezcConsoleOptionRule $rule The rule to be removed.\n     * @return void\n     */\n    public function removeExclusion( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->exclusions as $id => $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                unset( $this->exclusions[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Remove all exclusion rule referring to a option.\n     * This removes all exclusion rules from a option, that refer to as specific \n     * option. If no rule is registered with this option as reference, the \n     * method call will simply be ignored.\n     * \n     * @param ezcConsoleOption $param The option to remove rule for.\n     * @return void\n     */\n    public function removeAllExclusions( ezcConsoleOption $param )\n    {\n        foreach ( $this->exclusions as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                unset( $this->exclusions[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Returns if a given exclusion rule is registered with the option.\n     * Returns true if a exclusion rule to the given option is registered,\n     * otherwise false.\n     * \n     * @param ezcConsoleOption $param The param to check if exclusions exist for.\n     * @return bool True if rule is registered, otherwise false.\n     */\n    public function hasExclusion( ezcConsoleOption $param )\n    {\n        foreach ( $this->exclusions as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Returns the exclusion rules registered with this parameter.\n     * Returns an array of registered exclusions.\n     *\n     * For example:\n     * <code>\n     * array(\n     *      0 => ezcConsoleOptionRule,\n     *      1 => ezcConsoleOptionRule,\n     *      2 => ezcConsoleOptionRule,\n     * );\n     * </code>\n     * \n     * @return array(ezcConsoleOptionRule) Exclusions definition.\n     */\n    public function getExclusions()\n    {\n        return $this->exclusions;\n    }\n\n    /**\n     * Reset existing exclusion rules.\n     * Deletes all registered exclusion rules from the option definition.\n     *\n     * @return void\n     */\n    public function resetExclusions() \n    {\n        $this->exclusions = array();\n    }\n    \n    /**\n     * Property read access.\n     * Provides read access to the properties of the object.\n     * \n     * @param string $key The name of the property.\n     * @return mixed The value if property exists and isset, otherwise null.\n     * @ignore\n     */\n    public function __get( $key )\n    {\n        switch ( $key  )\n        {\n            case 'short':\n            case 'long':\n            case 'type':\n            case 'default':\n            case 'multiple':\n            case 'shorthelp':\n            case 'longhelp':\n            case 'arguments':\n            case 'isHelpOption':\n            case 'mandatory':\n                return $this->properties[$key];\n            case 'dependencies':\n            default:\n                throw new ezcBasePropertyNotFoundException( $key );\n        }\n    }\n\n    /**\n     * Property write access.\n     * \n     * @param string $key Name of the property.\n     * @param mixed $val  The value for the property.\n     *\n     * @throws ezcBasePropertyPermissionException\n     *         If the property you try to access is read-only.\n     * @throws ezcBasePropertyNotFoundException \n     *         If the the desired property is not found.\n     * @ignore\n     */\n    public function __set( $key, $val )\n    {\n        switch ( $key )\n        {\n            case 'type':\n                if ( $val !== ezcConsoleInput::TYPE_NONE \n                     && $val !== ezcConsoleInput::TYPE_INT \n                     && $val !== ezcConsoleInput::TYPE_STRING )\n                {\n                    throw new ezcBaseValueException( \n                        $key,  \n                        $val, \n                        'ezcConsoleInput::TYPE_STRING, ezcConsoleInput::TYPE_INT or ezcConsoleInput::TYPE_NONE' \n                    );\n                }\n                break;\n            case 'default':\n                if ( ( is_scalar( $val ) === false && $val !== null ) )\n                {\n                    // Newly allow arrays, if multiple is true\n                    if ( $this->multiple === true && is_array( $val ) === true )\n                    {\n                        break;\n                    }\n                    throw new ezcBaseValueException( $key, $val, 'a string or a number, if multiple == true also an array' );\n                }\n                break;\n            case 'multiple':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'shorthelp':\n                if ( !is_string( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'string' );\n                }\n                break;\n            case 'longhelp':\n                if ( !is_string( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'string' );\n                }\n                break;\n            case 'arguments':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'mandatory':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'isHelpOption':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'long':\n            case 'short':\n                throw new ezcBasePropertyPermissionException( $key, ezcBasePropertyPermissionException::READ );\n                break;\n            default:\n                throw new ezcBasePropertyNotFoundException( $key );\n                break;\n        }\n        $this->properties[$key] = $val;\n    }\n \n    /**\n     * Property isset access.\n     * \n     * @param string $key Name of the property.\n     * @return bool True is the property is set, otherwise false.\n     * @ignore\n     */\n    public function __isset( $key )\n    {\n        switch ( $key  )\n        {\n            case 'short':\n            case 'long':\n            case 'type':\n            case 'default':\n            case 'multiple':\n            case 'shorthelp':\n            case 'longhelp':\n            case 'arguments':\n            case 'isHelpOption':\n            case 'mandatory':\n                return ( $this->properties[$key] !== null );\n        }\n        return false;\n    }\n\n    /**\n     * Returns if a given name if valid for use as a parameter name a parameter. \n     * Checks if a given parameter name is generally valid for use. It checks a)\n     * that the name does not start with '-' or '--' and b) if it contains\n     * whitespaces. Note, that this method does not check any conflicts with already\n     * used parameter names.\n     * \n     * @param string $name The name to check.\n     * @return bool True if the name is valid, otherwise false.\n     */\n    public static function validateOptionName( $name )\n    {\n        if ( substr( $name, 0, 1 ) === '-' || strpos( $name, ' ' ) !== false )\n        {\n            return false;\n        }\n        return true;\n    }\n}\n\n?>\n", "<?php\n\n$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.geoconfiguration', array());\n\n$tpl = erLhcoreClassTemplate::getInstance( 'lhchat/geoconfiguration.tpl.php');\n\n$geoData = erLhcoreClassModelChatConfig::fetch('geo_data');\n$data = (array)$geoData->data;\n\n$geoLocationData = erLhcoreClassModelChatConfig::fetch('geo_location_data');\n$dataLocation = (array)$geoLocationData->data;\n\nif ( isset($_POST['store_map']) ) {\n\t$definition = array(\n\t\t\t'zoom' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int',array('min_range' => 1)\n\t\t\t),\n\t\t\t'lat' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'float'\n\t\t\t),\n\t\t\t'lng' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'float'\n\t\t\t),\n\t\t\t'gmaps_api_key' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t)\n\t);\n\n\t$Errors = array();\n\n\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t$Errors = array();\n\n\tif (!isset($_POST['csfr_token']) || !$currentUser->validateCSFRToken($_POST['csfr_token'])) {\n\t\terLhcoreClassModule::redirect('chat/geoconfiguration');\n\t\texit;\n\t}\n\n\tif ( $form->hasValidData( 'zoom' )) {\n\t\t$dataLocation['zoom'] = $form->zoom;\n\t} else {\n\t\t$dataLocation['zoom'] = 3;\n\t}\n\n\tif ( $form->hasValidData( 'gmaps_api_key' )) {\n\t\t$dataLocation['gmaps_api_key'] = $form->gmaps_api_key;\n\t} else {\n\t\t$dataLocation['gmaps_api_key'] = '';\n\t}\n\n\tif ( $form->hasValidData( 'lat' )) {\n\t\t$dataLocation['lat'] = $form->lat;\n\t} else {\n\t\t$dataLocation['lat'] = '35.416';\n\t}\n\n\tif ( $form->hasValidData( 'lng' )) {\n\t\t$dataLocation['lng'] = $form->lng;\n\t} else {\n\t\t$dataLocation['lng'] = '19.121';\n\t}\n\n\t$geoLocationData->value = serialize($dataLocation);\n\t$geoLocationData->saveThis();\n\texit;\n}\n\n\n\nif ( isset($_POST['StoreGeoIPConfiguration']) ) {\n\n    $definition = array(\n        'UseGeoIP' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'GeoDetectionEnabled' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_COUNTRY_CODE' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_COUNTRY_NAME' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_CITY' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_LATITUDE' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_REGION' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_LONGITUDE' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'locatorhqAPIKey' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ipinfodbAPIKey' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'locatorhqUsername' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'locatorhqIP' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'MaxMindDetectionType' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'CityGeoLocation' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ipapi_key' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'abstractapi_key' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        )\n    );\n\n    $Errors = array();\n\n    $form = new ezcInputForm( INPUT_POST, $definition );\n    $Errors = array();\n\n    if ( $form->hasValidData( 'GeoDetectionEnabled' ) && $form->GeoDetectionEnabled == true ) {\n        $data['geo_detection_enabled'] = 1;\n    } else {\n        $data['geo_detection_enabled'] = 0;\n    }\n\n    if (!isset($_POST['csfr_token']) || !$currentUser->validateCSFRToken($_POST['csfr_token'])) {\n    \terLhcoreClassModule::redirect('chat/geoconfiguration');\n    \texit;\n    }\n\n    if ($data['geo_detection_enabled'] == 1) {\n        if ( $form->hasValidData( 'UseGeoIP' ) ) {\n\n            if ($form->UseGeoIP == 'mod_geoip2'){\n\n                $data['geo_service_identifier'] = 'mod_geoip2';\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_COUNTRY_CODE' ) && $form->ServerVariableGEOIP_COUNTRY_CODE != '' && isset($_SERVER[$form->ServerVariableGEOIP_COUNTRY_CODE]) ) {\n                    $data['mod_geo_ip_country_code'] = $form->ServerVariableGEOIP_COUNTRY_CODE;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country code variable does not exist!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_COUNTRY_NAME' ) && $form->ServerVariableGEOIP_COUNTRY_NAME != '' && isset($_SERVER[$form->ServerVariableGEOIP_COUNTRY_NAME]) ) {\n                    $data['mod_geo_ip_country_name'] = $form->ServerVariableGEOIP_COUNTRY_NAME;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country name variable does not exist!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_CITY' ) && $form->ServerVariableGEOIP_CITY != '' ) {\n                    $data['mod_geo_ip_city_name'] = $form->ServerVariableGEOIP_CITY;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter city variable!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_REGION' ) && $form->ServerVariableGEOIP_REGION != '' ) {\n                    $data['mod_geo_ip_region_name'] = $form->ServerVariableGEOIP_REGION;\n                } else {\n                    $data['mod_geo_ip_region_name'] = '';\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_LATITUDE' ) && $form->ServerVariableGEOIP_LATITUDE != '' ) {\n                    $data['mod_geo_ip_latitude'] = $form->ServerVariableGEOIP_LATITUDE;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter latitude variable!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_LONGITUDE' ) && $form->ServerVariableGEOIP_LONGITUDE != '' ) {\n                    $data['mod_geo_ip_longitude'] = $form->ServerVariableGEOIP_LONGITUDE;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter longitude variable!');\n                }\n\n\n            } elseif ($form->UseGeoIP == 'freegeoip') {\n                $data['geo_service_identifier'] = 'freegeoip';\n                $data['freegeoip_key'] = isset($_POST['freegeoip_key']) ? $_POST['freegeoip_key'] : '';\n\n                if (empty($data['freegeoip_key'])) {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter API Key!');\n                }\n\n                if (empty($Errors)){\n                    $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('freegeoip',erLhcoreClassIPDetect::getServerAddress(),$data);\n                    if ( $responseDetection == false || !isset($responseDetection->country_code) || !isset($responseDetection->country_name) ) {\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages!');\n                    }\n                }\n\n            } elseif ($form->UseGeoIP == 'max_mind') {\n                $data['geo_service_identifier'] = 'max_mind';                \n                $data['max_mind_detection_type'] = $form->hasValidData('MaxMindDetectionType') ? $form->MaxMindDetectionType : 'city';\n                $data['max_mind_city_location'] = $form->CityGeoLocation != '' ? $form->CityGeoLocation : 'var/external/geoip/GeoLite2-City.mmdb';\n                          \n                if ($data['max_mind_detection_type'] == 'city' && !file_exists($data['max_mind_city_location'])) {\n                \t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','MaxMind city file does not exists!');\n                } elseif (!file_exists('var/external/geoip/GeoLite2-Country.mmdb')) {\n                \t$data['max_mind_detection_type'] = 'country';\n                \t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','MaxMind country file does not exists!');\n                }\n                \n                if (empty($Errors)) {\n\t                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('max_mind','94.23.200.91',array('city_file' => $data['max_mind_city_location'],'detection_type' => $data['max_mind_detection_type']));                \n\t                if ( $responseDetection == false || !isset($responseDetection->country_code) || !isset($responseDetection->country_name) ) {\n\t                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that MaxMind database files exists!');\n\t                }\n                }                \n                \n            } elseif ($form->UseGeoIP == 'locatorhq') {\n                $data['geo_service_identifier'] = 'locatorhq';\n\n                $filledAPIData = true;\n\n                if ( $form->hasValidData( 'locatorhqAPIKey' ) && $form->locatorhqAPIKey != '' ) {\n                    $data['locatorhq_api_key'] = $form->locatorhqAPIKey;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter the API key!');\n                }\n\n                if ( $form->hasValidData( 'locatorhqUsername' ) && $form->locatorhqUsername != '' ) {\n                    $data['locatorhqusername'] = $form->locatorhqUsername;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter the API username!');\n                }\n\n                if ( $form->hasValidData( 'locatorhqIP' ) && $form->locatorhqIP != '' ) {\n                    $data['locatorhqip'] = $form->locatorhqIP;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter IP!');\n                }\n\n                if ($filledAPIData == true) {\n                    $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('locatorhq',erLhcoreClassIPDetect::getServerAddress(),array('ip' => $data['locatorhqip'], 'username' => $data['locatorhqusername'], 'api_key' => $data['locatorhq_api_key']));\n                    if ($responseDetection == false || !isset($responseDetection->country_code)){\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key and username is correct!');\n                    }\n                }\n            } elseif ($form->UseGeoIP == 'ipinfodbcom') {\n                $data['geo_service_identifier'] = 'ipinfodbcom';\n\n                $filledAPIData = true;\n\n                if ( $form->hasValidData( 'ipinfodbAPIKey' ) && $form->ipinfodbAPIKey != '' ) {\n                    $data['ipinfodbcom_api_key'] = $form->ipinfodbAPIKey;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter the API key!');\n                }\n               \n                if ($filledAPIData == true) {\n                    $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('ipinfodbcom',erLhcoreClassIPDetect::getServerAddress(),array('api_key' => $data['ipinfodbcom_api_key']));\n                    if ($responseDetection == false || !isset($responseDetection->country_code)){\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key is correct!');\n                    }\n                }\n            } elseif ($form->UseGeoIP == 'php_geoip') {\n                $data['geo_service_identifier'] = 'php_geoip';\n              \n                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('php_geoip','8.8.8.8');\n                if ($responseDetection == false || !isset($responseDetection->country_code)){\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that you have installed php-GeoIP module and GeoIPCity.dat file is available!');\n                }                \n            } elseif ($form->UseGeoIP == 'ipapi') {\n                $data['geo_service_identifier'] = 'ipapi';\n\n                if ( $form->hasValidData( 'ipapi_key' ) && $form->ipapi_key != '' ) {\n                    $data['ipapi_key'] = $form->ipapi_key;\n                } else {\n                    $data['ipapi_key'] = '';\n                }\n\n                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('ipapi','8.8.8.8');\n\n                if ($responseDetection == false || !isset($responseDetection->country_code)){\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key is correct!');\n                }\n\n            } elseif ($form->UseGeoIP == 'abstractapi') {\n                $data['geo_service_identifier'] = 'abstractapi';\n\n                if ( $form->hasValidData( 'abstractapi_key' ) && $form->abstractapi_key != '' ) {\n                    $data['abstractapi_key'] = $form->abstractapi_key;\n                } else {\n                    $data['abstractapi_key'] = '';\n                }\n\n                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('abstractapi','8.8.8.8', array('abstractapi_key' => $data['abstractapi_key']));\n\n                if ($responseDetection == false || !isset($responseDetection->country_code)){\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key is correct!');\n                }\n\n            }\n\n        } else {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please choose a service provider!');\n        }\n    }\n\n    if (count($Errors) == 0) {\n        $geoData->value = serialize($data);\n        $geoData->saveThis();\n        $tpl->set('updated','done');\n    }  else {\n        $tpl->set('errors',$Errors);\n    }\n\n}\n\n$tpl->set('geo_data',$data);\n$tpl->set('geo_location_data',$dataLocation);\n\n$Result['content'] = $tpl->fetch();\n$Result['path'] = array(\narray('url' => erLhcoreClassDesign::baseurl('chat/onlineusers'), 'title' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Online users')),\narray('title' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO detection configuration')));\n\n\n?>"], "fixing_code": ["<h1><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO detection configuration');?></h1>\n\n<?php if (isset($errors)) : ?>\n\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/validation_error.tpl.php'));?>\n<?php endif; ?>\n\n<?php if (isset($updated) && $updated == 'done') : $msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Settings updated'); ?>\n\t<?php include(erLhcoreClassDesign::designtpl('lhkernel/alert_success.tpl.php'));?>\n<?php endif; ?>\n\n\n<div role=\"tabpanel\" ng-non-bindable>\n\n\t<!-- Nav tabs -->\n\t<ul class=\"nav nav-tabs\" role=\"tablist\">\n\t\t<li role=\"presentation\" class=\"nav-item\"><a class=\"active nav-link\" href=\"#geoconfiguration\" aria-controls=\"geoconfiguration\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO detection configuration');?></a></li>\n\t\t<li role=\"presentation\" class=\"nav-item\"><a class=\"nav-link\" id=\"map-activator\" href=\"#mapoptions\" aria-controls=\"mapoptions\" role=\"tab\" data-toggle=\"tab\"><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Map location')?></a></li>\n\t</ul>\n\n\t<!-- Tab panes -->\n\t<div class=\"tab-content\">\n\t\t<div role=\"tabpanel\" class=\"tab-pane active\" id=\"geoconfiguration\">\n\t\t\t<form action=\"\" method=\"post\">\n\n                <?php include(erLhcoreClassDesign::designtpl('lhkernel/csfr_token.tpl.php'));?>\n\n                <label><input type=\"checkbox\" id=\"id_GeoDetectionEnabled\" name=\"GeoDetectionEnabled\" value=\"on\" <?php isset($geo_data['geo_detection_enabled']) && $geo_data['geo_detection_enabled'] == 1 ? print 'checked=\"checked\"' : ''?> /> <?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO Enabled');?></label> <br />\n                \n\t\t\t\t<div role=\"tabpanel\" class=\"<?php (!isset($geo_data['geo_detection_enabled']) || $geo_data['geo_detection_enabled'] == 0) ? print ' hide' : '' ?>\" id=\"settings-geo\">\n\n\t\t\t\t\t<!-- Nav tabs -->\n\t\t\t\t\t<ul class=\"nav nav-tabs mb-2\" role=\"tablist\">\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'freegeoip') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#freegeoip\" aria-controls=\"freegeoip\" role=\"tab\" data-toggle=\"tab\">https://ipstack.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'mod_geoip2') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#mod_geoip2\" aria-controls=\"mod_geoip2\" role=\"tab\" data-toggle=\"tab\">mod_geoip2</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'max_mind') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#maxmind\" aria-controls=\"maxmind\" role=\"tab\" data-toggle=\"tab\">MaxMind</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'php_geoip') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#phpgeoip\" aria-controls=\"phpgeoip\" role=\"tab\" data-toggle=\"tab\">PHP-GeoIP</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipinfodbcom') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#panel3\" aria-controls=\"panel3\" role=\"tab\" data-toggle=\"tab\">http://ipinfodb.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'locatorhq') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#panel4\" aria-controls=\"panel4\" role=\"tab\" data-toggle=\"tab\">http://www.locatorhq.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipapi') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#ipapi\" aria-controls=\"ipapi\" role=\"tab\" data-toggle=\"tab\">https://ip-api.com</a></li>\n\t\t\t\t\t\t<li role=\"presentation\" class=\"nav-item <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'abstractapi') ? print 'active' : ''?>\"><a class=\"nav-link\" href=\"#abstractapi\" aria-controls=\"abstractapi\" role=\"tab\" data-toggle=\"tab\">https://www.abstractapi.com</a></li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<!-- Tab panes -->\n\t\t\t\t\t<div class=\"tab-content\">\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'freegeoip') ? print 'active' : ''?>\" id=\"freegeoip\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><input type=\"radio\" name=\"UseGeoIP\" value=\"freegeoip\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'freegeoip') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use this service'); ?></label> \n\t\t\t\t\t\t      </div>\n\n                            <p>Get API Key from - <a href=\"https://ipstack.com\">https://ipstack.com</a></p>\n\n                              <div class=\"form-group\">\n                                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label>\n                                    <input class=\"form-control\" type=\"text\" name=\"freegeoip_key\" value=\"<?php isset($geo_data['freegeoip_key']) ? print $geo_data['freegeoip_key'] : print '' ?>\">\n                              </div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'mod_geoip2') ? print 'active' : ''?>\" id=\"mod_geoip2\">\n\t\t\t\t\t\t    <div>\n\t\t\t\t\t\t      <label><input type=\"radio\" name=\"UseGeoIP\" value=\"mod_geoip2\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'mod_geoip2') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use mod_geoip2'); ?></label> \n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country code server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_COUNTRY_CODE\" value=\"<?php isset($geo_data['mod_geo_ip_country_code']) ? print $geo_data['mod_geo_ip_country_code'] : print 'GEOIP_COUNTRY_CODE' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country name server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_COUNTRY_NAME\" value=\"<?php isset($geo_data['mod_geo_ip_country_name']) ? print $geo_data['mod_geo_ip_country_name'] : print 'GEOIP_COUNTRY_NAME' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','City name server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_CITY\" value=\"<?php isset($geo_data['mod_geo_ip_city_name']) ? print $geo_data['mod_geo_ip_city_name'] : print 'GEOIP_CITY' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Region name server variable'); ?></label> \n\t\t\t\t\t\t          <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_REGION\" value=\"<?php isset($geo_data['mod_geo_ip_region_name']) ? print $geo_data['mod_geo_ip_region_name'] : print 'GEOIP_REGION' ?>\"> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t      \n\t\t\t\t\t\t      <div class=\"form-group\">\t\t\t      \n\t\t\t\t\t\t          <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Latitude variable'); ?></label>\n\t\t\t\t\t\t\t      <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_LATITUDE\" value=\"<?php isset($geo_data['mod_geo_ip_latitude']) ? print $geo_data['mod_geo_ip_latitude'] : print 'GEOIP_LATITUDE' ?>\"> \n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t  \t\t\n\t\t\t\t\t\t\t  <div class=\"form-group\">\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t     <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Longitude variable'); ?></label> \n\t\t\t\t\t\t\t     <input class=\"form-control\" type=\"text\" name=\"ServerVariableGEOIP_LONGITUDE\" value=\"<?php isset($geo_data['mod_geo_ip_longitude']) ? print $geo_data['mod_geo_ip_longitude'] : print 'GEOIP_LONGITUDE' ?>\"> \n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n                        <div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipapi') ? print 'active' : ''?>\" id=\"ipapi\">\n\t\t\t\t\t\t    <div>\n\t\t\t\t\t\t        <label><input type=\"radio\" name=\"UseGeoIP\" value=\"ipapi\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipapi') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use http://ip-api.com'); ?></label>\n\n                                <div class=\"form-group\">\n                                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?> (Optional)</label>\n                                    <input class=\"form-control\" type=\"text\" name=\"ipapi_key\" value=\"<?php isset($geo_data['ipapi_key']) ? print $geo_data['ipapi_key'] : print '' ?>\">\n                                </div>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n                        <div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'abstractapi') ? print 'active' : ''?>\" id=\"abstractapi\">\n\t\t\t\t\t\t    <div>\n\t\t\t\t\t\t        <label><input type=\"radio\" name=\"UseGeoIP\" value=\"abstractapi\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'abstractapi') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use https://www.abstractapi.com/ip-geolocation-api'); ?></label>\n\n                                <div class=\"form-group\">\n                                    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label>\n                                    <input class=\"form-control\" type=\"text\" name=\"abstractapi_key\" value=\"<?php isset($geo_data['abstractapi_key']) ? print $geo_data['abstractapi_key'] : print '' ?>\">\n                                </div>\n\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'max_mind') ? print 'active' : ''?>\" id=\"maxmind\">\n\t\t\t\t\t\t    <label><input type=\"radio\" name=\"UseGeoIP\" value=\"max_mind\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'max_mind') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use MaxMind, does not depend on any third party remote service'); ?></label>\n\n\t\t\t\t\t\t\t\t<p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','You can download city/country database from.'); ?>&nbsp;<a target=\"_blank\" href=\"http://dev.maxmind.com/geoip/geoip2/geolite2/\">MaxMind</a>\n\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t<p>\n      \t<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','bcmath php extension detected'); ?> - <?php echo extension_loaded ('bcmath' ) ? '<span class=\"badge badge-success\">Yes</span>' : '<span class=\"badge badge-danger\">No</span>'; ?>\n      \t</p>\n\n      \t                        <div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Location of city database. Make sure you uploaded file in this location.'); ?></label>\n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" readonly value=\"<?php isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  print htmlspecialchars($geo_data['max_mind_city_location']) : print 'var/external/geoip/GeoLite2-City.mmdb' ?>\" />\n                                </div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t\t\t\t\t\t<label><input type=\"radio\" name=\"MaxMindDetectionType\" value=\"country\" <?php (isset($geo_data['max_mind_detection_type']) && $geo_data['max_mind_detection_type'] == 'country') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','User country based detection, faster')?></label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t<?php if (file_exists(\"var/external/geoip/GeoLite2-Country.mmdb\")) : ?> <span class=\"badge badge-success\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File exists'); ?>\">var/external/geoip/GeoLite2-Country.mmdb</span> <?php else : ?><span class=\"badge badge-danger\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File does not exists'); ?>\">var/external/geoip/GeoLite2-Country.mmdb</span><?php endif;?>\n\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t\t\t\t\t\t\t<label><input type=\"radio\" name=\"MaxMindDetectionType\" value=\"city\" <?php (isset($geo_data['max_mind_detection_type']) && $geo_data['max_mind_detection_type'] == 'city') ? print 'checked=\"checked\"' : '' ?> <?php if (!file_exists(isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  $geo_data['max_mind_city_location'] : 'var/external/geoip/GeoLite2-City.mmdb')) : ?> disabled <?php endif;?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','User city based detection, slower')?></label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-6\">\n\t\t\t\t<?php if (file_exists(isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  $geo_data['max_mind_city_location'] : 'var/external/geoip/GeoLite2-City.mmdb')) : ?> <span class=\"badge badge-success\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File exists');?>\"><?php isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  print htmlspecialchars($geo_data['max_mind_city_location']) : print 'var/external/geoip/GeoLite2-City.mmdb' ?></span> <?php else : ?><span class=\"badge badge-danger\" title=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','File does not exists')?>\"><?php isset($geo_data['max_mind_city_location']) && ($geo_data['max_mind_city_location'] != '') ?  print htmlspecialchars($geo_data['max_mind_city_location']) : print 'var/external/geoip/GeoLite2-City.mmdb' ?></span><?php endif;?>\n\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tThis product includes GeoLite2 data created by MaxMind, available from <a href=\"http://www.maxmind.com\">http://www.maxmind.com</a>.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'php_geoip') ? print 'active' : ''?>\" id=\"phpgeoip\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t          <label><input type=\"radio\" name=\"UseGeoIP\" value=\"php_geoip\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'php_geoip') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use PHP-GeoIP module'); ?></label>\n\t\t\t\t\t\t\t\t  <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Support for PHP-GeoIP detected'); ?> - <?php echo function_exists('geoip_country_code_by_name') ? '<span class=\"badge badge-success\">Yes</span>' : '<span class=\"badge badge-danger\">No</span>'; ?></p>\n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipinfodbcom') ? print 'active' : ''?>\" id=\"panel3\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\t\t\t\t\t\t         <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Requests will be comming from');?> - <?php echo erLhcoreClassIPDetect::getServerAddress(); ?></p>\n\n\t\t\t\t\t\t\t\t    <label class=\"inline\"><input type=\"radio\" name=\"UseGeoIP\" value=\"ipinfodbcom\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'ipinfodbcom') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use this service'); ?></label> \n\t\t\t\t\t\t\t\t    \n\t\t\t\t\t\t\t\t    <div class=\"form-group\">\n\t\t\t\t\t\t\t\t        <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label> \n\t\t\t\t\t\t\t\t        <input class=\"form-control\" type=\"text\" name=\"ipinfodbAPIKey\" value=\"<?php isset($geo_data['ipinfodbcom_api_key']) ? print htmlspecialchars($geo_data['ipinfodbcom_api_key']) : print '' ?>\">\n\t\t\t\t\t\t\t\t    </div> \n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t<div role=\"tabpanel\" class=\"tab-pane <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'locatorhq') ? print 'active' : ''?>\" id=\"panel4\">\n\t\t\t\t\t\t      <div class=\"form-group\">\n\n\t\t\t\t\t\t\t\t <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Requests will be comming from');?> - <?php echo erLhcoreClassIPDetect::getServerAddress(); ?></p>\n\n\t\t\t\t\t\t\t\t<label class=\"inline\"><input type=\"radio\" name=\"UseGeoIP\" value=\"locatorhq\" <?php isset($geo_data['geo_detection_enabled']) && ($geo_data['geo_service_identifier'] == 'locatorhq') ? print 'checked=\"checked\"' : '' ?> /><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Use this service'); ?></label> \n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','API Key'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"locatorhqAPIKey\" value=\"<?php isset($geo_data['locatorhq_api_key']) ? print htmlspecialchars($geo_data['locatorhq_api_key']) : print '' ?>\"> \n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Username'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"locatorhqUsername\" value=\"<?php isset($geo_data['locatorhqusername']) ? print htmlspecialchars($geo_data['locatorhqusername']) : print '' ?>\"> \n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t    <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','IP, if your site remote IP is different from detected one, please provide correct remote IP address'); ?></label> \n\t\t\t\t\t\t\t\t    <input class=\"form-control\" type=\"text\" name=\"locatorhqIP\" value=\"<?php isset($geo_data['locatorhqip']) ? print htmlspecialchars($geo_data['locatorhqip']) : print erLhcoreClassIPDetect::getServerAddress() ?>\"> \n                                </div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t      </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" class=\"btn btn-secondary\" name=\"StoreGeoIPConfiguration\" value=\"<?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Save'); ?>\" />\n\n\t\t\t</form>\n\t\t</div>\n\t\t\n\t\t<div role=\"tabpanel\" class=\"tab-pane\" id=\"mapoptions\">\n\t\t    <p><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Drag a marker where you want to have map centered by default. Zoom is also saved.')?></p>\n\n\t\t    <div class=\"form-group\">\n\t\t      <label><?php echo erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Google Maps API key, saved automatically. After pasting the key, refresh the page.'); ?></label> \n\t\t      <input class=\"form-control\" type=\"text\" id=\"id_GMapsAPIKey\" value=\"<?php isset($geo_location_data['gmaps_api_key']) ? print $geo_location_data['gmaps_api_key'] : print '' ?>\"> \n\t\t    </div>\n\n      \t\t<div id=\"map_canvas\" style=\"height:600px;width:100%;\"></div>\t\t\t\n\t\t</div>\n\t\t\n\t</div>\n</div>\n\n<script>\nvar marker = null;\nvar map = null;\n\nfunction loadMapLocationChoosing(){\n\n\t$('#map-activator').click(function(){\n\t\tsetTimeout(function(){\n\t\t\tgoogle.maps.event.trigger(map, 'resize');\n\t\t\tmap.setCenter(marker.getPosition());\n\t\t},500);\n\t});\n\n\tvar mapOptions = {\n\t\t    zoom: <?php echo $geo_location_data['zoom'] ?>,\n\t\t    mapTypeId: google.maps.MapTypeId.ROADMAP,\n\t\t    disableDefaultUI: true,\n\t        options: {\n\t            zoomControl: true,\n\t            scrollwheel: true,\n\t            streetViewControl: true\n\t        },\n\t\t    center: new google.maps.LatLng(<?php echo $geo_location_data['lat'] ?>,<?php echo $geo_location_data['lng']?>)\n\t\t  };\n\n\tmap = new google.maps.Map(document.getElementById('map_canvas'),mapOptions);\n\n\tvar marker = new google.maps.Marker(\n\t{\n\t    map:map,\n\t    draggable:true,\n\t    animation: google.maps.Animation.DROP,\n\t    position: new google.maps.LatLng(<?php echo $geo_location_data['lat'] ?>,<?php echo $geo_location_data['lng']?>)\n\t});\n\n\tgoogle.maps.event.addListener(map, 'zoom_changed', function() {\n\t\t var pos = marker.getPosition();\n\t\t $.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),zoom:map.getZoom(),store_map:1,csfr_token:confLH.csrf_token,lat:pos.lat().toFixed(4),lng:pos.lng().toFixed(4)}, function(data){\n\n\t     });\n\t});\n\n\tgoogle.maps.event.addListener(marker, 'dragend', function(evt) {\n\t    $.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),zoom:map.getZoom(),store_map:1,csfr_token:confLH.csrf_token,lat:evt.latLng.lat().toFixed(4),lng:evt.latLng.lng().toFixed(4)}, function(data){\n\n    \t});\n\t});\n\n\t$('#id_GMapsAPIKey').keyup(function() {\n\n\t\tvar pos = marker.getPosition();\n\t\t\n\t\tif (marker != null && map != null && typeof pos != 'undefined') {    \t\t\n    \t\t$.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),zoom:map.getZoom(),store_map:1,csfr_token:confLH.csrf_token,lat:pos.lat().toFixed(4),lng:pos.lng().toFixed(4)}, function(data){\n    \t\t});\n\t\t} else {\n\t\t\tvar pos = marker.getPosition();\n    \t\t$.postJSON('<?php echo erLhcoreClassDesign::baseurl('chat/geoconfiguration')?>/',{gmaps_api_key:$('#id_GMapsAPIKey').val(),store_map:1,csfr_token:confLH.csrf_token}, function(data){\n    \t\t});\n\t\t}\n\t});\n};\n\n$('#id_GeoDetectionEnabled').change(function(){\n    if ($(this).is(':checked')){\n        $('#settings-geo').removeClass('hide');\n    } else {\n        $('#settings-geo').addClass('hide');\n    };   \n});\n</script>\n\n<script async defer src=\"https://maps.googleapis.com/maps/api/js?<?php if (erConfigClassLhConfig::getInstance()->getSetting( 'site', 'maps_api_key', false)) {echo 'key=' , erConfigClassLhConfig::getInstance()->getSetting( 'site', 'maps_api_key', false) , '&';} elseif (isset($geo_location_data['gmaps_api_key'])) {echo 'key=' ,$geo_location_data['gmaps_api_key'], '&';}?>callback=loadMapLocationChoosing\"></script>", "<?php\n/**\n * @copyright Copyright (C) 2005-2009 eZ Systems AS. All rights reserved.\n * @license http://ez.no/licenses/new_bsd New BSD License\n * @version 1.8\n * @filesource\n * @package Base\n */\n\n/**\n * Provides a selection of static independent methods to provide functionality\n * for file and file system handling.\n *\n * This example shows how to use the findRecursive method:\n * <code>\n * <?php\n * // lists all the files under /etc (including subdirectories) that end in\n * // .conf\n * $confFiles = ezcBaseFile::findRecursive( \"/etc\", array( '@\\.conf$@' ) );\n *\n * // lists all autoload files in the components source tree and excludes the\n * // ones in the autoload subdirectory. Statistics are returned in the $stats\n * // variable which is passed by reference.\n * $files = ezcBaseFile::findRecursive(\n *     \"/dat/dev/ezcomponents\",\n *     array( '@src/.*_autoload.php$@' ),\n *     array( '@/autoload/@' ),\n *     $stats\n * );\n *\n * // lists all binaries in /bin except the ones starting with a \"g\"\n * $data = ezcBaseFile::findRecursive( \"/bin\", array(), array( '@^/bin/g@' ) );\n * ?>\n * </code>\n *\n * @package Base\n * @version 1.8\n * @mainclass\n */\nclass ezcBaseFile\n{\n    /**\n     * This is the callback used by findRecursive to collect data.\n     *\n     * This callback method works together with walkRecursive() and is called\n     * for every file/and or directory. The $context is a callback specific\n     * container in which data can be stored and shared between the different\n     * calls to the callback function. The walkRecursive() function also passes\n     * in the full absolute directory in $sourceDir, the filename in $fileName\n     * and file information (such as size, modes, types) as an array as\n     * returned by PHP's stat() in the $fileInfo parameter.\n     *\n     * @param ezcBaseFileFindContext $context\n     * @param string $sourceDir\n     * @param string $fileName\n     * @param array(stat) $fileInfo\n     */\n    static protected function findRecursiveCallback( ezcBaseFileFindContext $context, $sourceDir, $fileName, $fileInfo )\n    {\n        // ignore if we have a directory\n        if ( $fileInfo['mode'] & 0x4000 )\n        {\n            return;\n        }\n\n        // update the statistics\n        $context->elements[] = $sourceDir . DIRECTORY_SEPARATOR . $fileName;\n        $context->count++;\n        $context->size += $fileInfo['size'];\n    }\n\n    /**\n     * Walks files and directories recursively on a file system\n     *\n     * This method walks over a directory and calls a callback from every file\n     * and directory it finds. You can use $includeFilters to include only\n     * specific files, and $excludeFilters to exclude certain files from being\n     * returned. The function will always go into subdirectories even if the\n     * entry would not have passed the filters.\n     *\n     * The callback is passed in the $callback parameter, and the\n     * $callbackContext will be send to the callback function/method as\n     * parameter so that you can store data in there that persists with all the\n     * calls and recursive calls to this method. It's up to the callback method\n     * to do something useful with this. The callback function's parameters are\n     * in order:\n     *\n     * <ul>\n     * <li>ezcBaseFileFindContext $context</li>\n     * <li>string $sourceDir</li>\n     * <li>string $fileName</li>\n     * <li>array(stat) $fileInfo</li>\n     * </ul>\n     *\n     * See {@see findRecursiveCallback()} for an example of a callback function.\n     *\n     * Filters are regular expressions and are therefore required to have\n     * starting and ending delimiters. The Perl Compatible syntax is used as\n     * regular expression language.\n     *\n     * @param string         $sourceDir\n     * @param array(string)  $includeFilters\n     * @param array(string)  $excludeFilters\n     * @param callback       $callback\n     * @param mixed          $callbackContext\n     *\n     * @throws ezcBaseFileNotFoundException if the $sourceDir directory is not\n     *         a directory or does not exist.\n     * @throws ezcBaseFilePermissionException if the $sourceDir directory could\n     *         not be opened for reading.\n     * @return array\n     */\n    static public function walkRecursive( $sourceDir, array $includeFilters, array $excludeFilters, $callback, &$callbackContext )\n    {\n        if ( !is_dir( $sourceDir ) )\n        {\n            throw new ezcBaseFileNotFoundException( $sourceDir, 'directory' );\n        }\n        $elements = array();\n        $d = @dir( $sourceDir );\n        if ( !$d )\n        {\n            throw new ezcBaseFilePermissionException( $sourceDir, ezcBaseFileException::READ );\n        }\n\n        while ( ( $entry = $d->read() ) !== false )\n        {\n            if ( $entry == '.' || $entry == '..' )\n            {\n                continue;\n            }\n\n            $fileInfo = @stat( $sourceDir . DIRECTORY_SEPARATOR . $entry );\n            if ( !$fileInfo )\n            {\n                $fileInfo = array( 'size' => 0, 'mode' => 0 );\n            }\n\n            if ( $fileInfo['mode'] & 0x4000 )\n            {\n                // We need to ignore the Permission exceptions here as it can\n                // be normal that a directory can not be accessed. We only need\n                // the exception if the top directory could not be read.\n                try\n                {\n                    call_user_func_array( $callback, array( $callbackContext, $sourceDir, $entry, $fileInfo ) );\n                    $subList = self::walkRecursive( $sourceDir . DIRECTORY_SEPARATOR . $entry, $includeFilters, $excludeFilters, $callback, $callbackContext );\n                    $elements = array_merge( $elements, $subList );\n                }\n                catch ( ezcBaseFilePermissionException $e )\n                {\n                }\n            }\n            else\n            {\n                // By default a file is included in the return list\n                $ok = true;\n                // Iterate over the $includeFilters and prohibit the file from\n                // being returned when atleast one of them does not match\n                foreach ( $includeFilters as $filter )\n                {\n                    if ( !preg_match( $filter, $sourceDir . DIRECTORY_SEPARATOR . $entry ) )\n                    {\n                        $ok = false;\n                        break;\n                    }\n                }\n                // Iterate over the $excludeFilters and prohibit the file from\n                // being returns when atleast one of them matches\n                foreach ( $excludeFilters as $filter )\n                {\n                    if ( preg_match( $filter, $sourceDir . DIRECTORY_SEPARATOR . $entry ) )\n                    {\n                        $ok = false;\n                        break;\n                    }\n                }\n\n                // If everything's allright, call the callback and add the\n                // entry to the elements array\n                if ( $ok )\n                {\n                    call_user_func( $callback, $callbackContext, $sourceDir, $entry, $fileInfo );\n                    $elements[] = $sourceDir . DIRECTORY_SEPARATOR . $entry;\n                }\n            }\n        }\n        sort( $elements );\n        return $elements;\n    }\n\n    /**\n     * Finds files recursively on a file system\n     *\n     * With this method you can scan the file system for files. You can use\n     * $includeFilters to include only specific files, and $excludeFilters to\n     * exclude certain files from being returned. The function will always go\n     * into subdirectories even if the entry would not have passed the filters.\n     * It uses the {@see walkRecursive()} method to do the actually recursion.\n     *\n     * Filters are regular expressions and are therefore required to have\n     * starting and ending delimiters. The Perl Compatible syntax is used as\n     * regular expression language.\n     *\n     * If you pass an empty array to the $statistics argument, the function\n     * will in details about the number of files found into the 'count' array\n     * element, and the total filesize in the 'size' array element. Because this\n     * argument is passed by reference, you *have* to pass a variable and you\n     * can not pass a constant value such as \"array()\".\n     *\n     * @param string         $sourceDir\n     * @param array(string)  $includeFilters\n     * @param array(string)  $excludeFilters\n     * @param array()        $statistics\n     *\n     * @throws ezcBaseFileNotFoundException if the $sourceDir directory is not\n     *         a directory or does not exist.\n     * @throws ezcBaseFilePermissionException if the $sourceDir directory could\n     *         not be opened for reading.\n     * @return array\n     */\n    static public function findRecursive( $sourceDir, array $includeFilters = array(), array $excludeFilters = array(), &$statistics = null )\n    {\n        // init statistics array\n        if ( !is_array( $statistics ) || !array_key_exists( 'size', $statistics ) || !array_key_exists( 'count', $statistics ) )\n        {\n            $statistics['size']  = 0;\n            $statistics['count'] = 0;\n        }\n\n        // create the context, and then start walking over the array\n        $context = new ezcBaseFileFindContext;\n        self::walkRecursive( $sourceDir, $includeFilters, $excludeFilters, array( 'ezcBaseFile', 'findRecursiveCallback' ), $context );\n\n        // collect the statistics\n        $statistics['size'] = $context->size;\n        $statistics['count'] = $context->count;\n\n        // return the found and pattern-matched files\n        sort( $context->elements );\n        return $context->elements;\n    }\n\n\n    /**\n     * Removes files and directories recursively from a file system\n     *\n     * This method recursively removes the $directory and all its contents.\n     * You should be <b>extremely</b> careful with this method as it has the\n     * potential to erase everything that the current user has access to.\n     *\n     * @param string $directory\n     */\n    static public function removeRecursive( $directory )\n    {\n        $sourceDir = realpath( $directory );\n        if ( !$sourceDir )\n        {\n            throw new ezcBaseFileNotFoundException( $directory, 'directory' );\n        }\n        $d = @dir( $sourceDir );\n        if ( !$d )\n        {\n            throw new ezcBaseFilePermissionException( $directory, ezcBaseFileException::READ );\n        }\n        // check if we can remove the dir\n        $parentDir = realpath( $directory . DIRECTORY_SEPARATOR . '..' );\n        if ( !is_writable( $parentDir ) )\n        {\n            throw new ezcBaseFilePermissionException( $parentDir, ezcBaseFileException::WRITE );\n        }\n        // loop over contents\n        while ( ( $entry = $d->read() ) !== false )\n        {\n            if ( $entry == '.' || $entry == '..' )\n            {\n                continue;\n            }\n\n            if ( is_dir( $sourceDir . DIRECTORY_SEPARATOR . $entry ) )\n            {\n                self::removeRecursive( $sourceDir . DIRECTORY_SEPARATOR . $entry );\n            }\n            else\n            {\n                if ( @unlink( $sourceDir . DIRECTORY_SEPARATOR . $entry ) === false )\n                {\n                    throw new ezcBaseFilePermissionException( $directory . DIRECTORY_SEPARATOR . $entry, ezcBaseFileException::REMOVE );\n                }\n            }\n        }\n        $d->close();\n        rmdir( $sourceDir );\n    }\n\n    /**\n    * Recursively copy a file or directory.\n    *\n    * Recursively copy a file or directory in $source to the given\n    * destination. If a depth is given, the operation will stop, if the given\n    * recursion depth is reached. A depth of -1 means no limit, while a depth\n    * of 0 means, that only the current file or directory will be copied,\n    * without any recursion.\n    *\n    * You may optionally define modes used to create files and directories.\n    *\n    * @throws ezcBaseFileNotFoundException\n    *      If the $sourceDir directory is not a directory or does not exist.\n    * @throws ezcBaseFilePermissionException\n    *      If the $sourceDir directory could not be opened for reading, or the\n    *      destination is not writeable.\n    *\n    * @param string $source\n    * @param string $destination\n    * @param int $depth\n    * @param int $dirMode\n    * @param int $fileMode\n    * @return void\n    */\n    static public function copyRecursive( $source, $destination, $depth = -1, $dirMode = 0775, $fileMode = 0664 )\n    {\n        // Check if source file exists at all.\n        if ( !is_file( $source ) && !is_dir( $source ) )\n        {\n            throw new ezcBaseFileNotFoundException( $source );\n        }\n\n        // Destination file should NOT exist\n        if ( is_file( $destination ) || is_dir( $destination ) )\n        {\n            throw new ezcBaseFilePermissionException( $destination, ezcBaseFileException::WRITE );\n        }\n\n        // Skip non readable files in source directory\n        if ( !is_readable( $source ) )\n        {\n            return;\n        }\n\n        // Copy\n        if ( is_dir( $source ) )\n        {\n            mkdir( $destination );\n            // To ignore umask, umask() should not be changed with\n            // multithreaded servers...\n            chmod( $destination, $dirMode );\n        }\n        elseif ( is_file( $source ) )\n        {\n            copy( $source, $destination );\n            chmod( $destination, $fileMode );\n        }\n\n        if ( ( $depth === 0 ) ||\n            ( !is_dir( $source ) ) )\n        {\n            // Do not recurse (any more)\n            return;\n        }\n\n        // Recurse\n        $dh = opendir( $source );\n        while ( ( $file = readdir( $dh ) ) !== false )\n        {\n            if ( ( $file === '.' ) ||\n                ( $file === '..' ) )\n            {\n                continue;\n            }\n\n            self::copyRecursive(\n                $source . '/' . $file,\n                $destination . '/' . $file,\n                $depth - 1, $dirMode, $fileMode\n            );\n        }\n    }\n\n    /**\n     * Calculates the relative path of the file/directory '$path' to a given\n     * $base path.\n     *\n     * $path and $base should be fully absolute paths. This function returns the\n     * answer of \"How do I go from $base to $path\". If the $path and $base are\n     * the same path, the function returns '.'. This method does not touch the\n     * filesystem.\n     *\n     * @param string $path\n     * @param string $base\n     * @return string\n     */\n    static public function calculateRelativePath( $path, $base )\n    {\n        // Sanitize the paths to use the correct directory separator for the platform\n        $path = strtr( $path, '\\\\/', DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR );\n        $base = strtr( $base, '\\\\/', DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR );\n\n        $base = explode( DIRECTORY_SEPARATOR, $base );\n        $path = explode( DIRECTORY_SEPARATOR, $path );\n\n        // If the paths are the same we return\n        if ( $base === $path )\n        {\n            return '.';\n        }\n\n        $result = '';\n\n        $pathPart = array_shift( $path );\n        $basePart = array_shift( $base );\n        while ( $pathPart == $basePart )\n        {\n            $pathPart = array_shift( $path );\n            $basePart = array_shift( $base );\n        }\n\n        if ( $pathPart != null )\n        {\n            array_unshift( $path, $pathPart );\n        }\n        if ( $basePart != null )\n        {\n            array_unshift( $base, $basePart );\n        }\n\n        $result = str_repeat( '..' . DIRECTORY_SEPARATOR, count( $base ) );\n        // prevent a trailing DIRECTORY_SEPARATOR in case there is only a ..\n        if ( count( $path ) == 0 )\n        {\n            $result = substr( $result, 0, -strlen( DIRECTORY_SEPARATOR ) );\n        }\n        $result .= join( DIRECTORY_SEPARATOR, $path );\n\n        return $result;\n    }\n\n    /**\n     * Returns whether the passed $path is an absolute path, giving the current $os.\n     *\n     * With the $os parameter you can tell this function to use the semantics\n     * for a different operating system to determine whether a path is\n     * absolute. The $os argument defaults to the OS that the script is running\n     * on.\n     *\n     * @param string $path\n     * @param string $os\n     * @return bool\n     */\n    public static function isAbsolutePath( $path, $os = null )\n    {\n        if ( $os === null )\n        {\n            $os = ezcBaseFeatures::os();\n        }\n\n        // Stream wrapper like phar can also be considered absolute paths\n        if ( preg_match( '(^[a-z]{3,}://)S', $path ) )\n        {\n            return true;\n        }\n\n        switch ( $os )\n        {\n            case 'Windows':\n                // Sanitize the paths to use the correct directory separator for the platform\n                $path = strtr( $path, '\\\\/', '\\\\\\\\' );\n\n                // Absolute paths with drive letter: X:\\\n                if ( preg_match( '@^[A-Z]:\\\\\\\\@i', $path ) )\n                {\n                    return true;\n                }\n\n                // Absolute paths with network paths: \\\\server\\share\\\n                if ( preg_match( '@^\\\\\\\\\\\\\\\\[A-Z]+\\\\\\\\[^\\\\\\\\]@i', $path ) )\n                {\n                    return true;\n                }\n                break;\n            case 'Mac':\n            case 'Linux':\n            case 'FreeBSD':\n            default:\n                // Sanitize the paths to use the correct directory separator for the platform\n                $path = strtr( $path, '\\\\/', '//' );\n\n                if ( $path[0] == '/' )\n                {\n                    return true;\n                }\n        }\n        return false;\n    }\n}\n?>\n", "<?php\n/**\n * File containing the ezcConsoleOption class.\n *\n * @package ConsoleTools\n * @version 1.6.1\n * @copyright Copyright (C) 2005-2010 eZ Systems AS. All rights reserved.\n * @license http://ez.no/licenses/new_bsd New BSD License\n * @filesource\n */\n\n/**\n * Objects of this class store data about a single option for ezcConsoleInput.\n *\n * This class represents a single command line option, which can be handled by \n * the ezcConsoleInput class. This classes only purpose is the storage of\n * the parameter data, the handling of options and arguments is done by the\n * class {@link ezcConsoleInput}.\n * \n * @property-read string $short\n *                Short name of the parameter without '-' (eg. 'f').\n * @property-read string $long\n *                Long name of the parameter without '--' (eg. 'file').\n * @property int $type\n *           Value type of this parameter, default is ezcConsoleInput::TYPE_NONE.\n *           See {@link ezcConsoleInput::TYPE_NONE},\n *           {@link ezcConsoleInput::TYPE_INT} and\n *           {@link ezcConsoleInput::TYPE_STRING}.\n * @property mixed $default\n *           Default value if the parameter is submitted without value.  If a\n *           parameter is eg. of type ezcConsoleInput::TYPE_STRING and\n *           therefore expects a value when being submitted, it may be\n *           submitted without a value and automatically get the default value\n *           specified here.\n * @property bool $multiple\n *           Is the submission of multiple instances of this parameters\n *           allowed? \n * @property string $shorthelp\n *           Short help text. Usually displayed when showing parameter help\n *           overview.\n * @property string $longhelp\n *           Long help text. Usually displayed when showing parameter detailed\n *           help.\n * @property bool $arguments\n *           Whether arguments to the program are allowed, when this parameter\n *           is submitted. \n * @property bool $mandatory\n *           Whether a parameter is mandatory to be set.  If this flag is true,\n *           the parameter must be submitted whenever the program is run.\n * @property bool $isHelpOption\n *           Whether a parameter is a help option.  If this flag is true, and\n *           the parameter is set, all options marked as mandatory may be\n *           skipped.\n *\n * @package ConsoleTools\n * @version 1.6.1\n */\nclass ezcConsoleOption\n{\n    /**\n     * Container to hold the properties\n     *\n     * @var array(string=>mixed)\n     */\n    protected $properties;\n\n    /**\n     * Dependency rules of this parameter.\n     * \n     * @see ezcConsoleOption::addDependency()\n     * @see ezcConsoleOption::removeDependency()\n     * @see ezcConsoleOption::hasDependency()\n     * @see ezcConsoleOption::getDependencies()\n     * @see ezcConsoleOption::resetDependencies()\n     * \n     * @var array(string=>ezcConsoleParamemterRule)\n     */\n    protected $dependencies = array();\n\n    /**\n     * Exclusion rules of this parameter.\n     * \n     * @see ezcConsoleOption::addExclusion()\n     * @see ezcConsoleOption::removeExclusion()\n     * @see ezcConsoleOption::hasExclusion()\n     * @see ezcConsoleOption::getExclusions()\n     * @see ezcConsoleOption::resetExclusions()\n     * \n     * @var array(string=>ezcConsoleParamemterRule)\n     */\n    protected $exclusions = array();\n\n    /**\n     * The value the parameter was assigned to when being submitted.\n     * Boolean false indicates the parameter was not submitted, boolean\n     * true means the parameter was submitted, but did not have a value.\n     * In any other case, this caries the submitted value.\n     * \n     * @var mixed\n     */\n    public $value = false;\n\n    /**\n     * Create a new parameter struct.\n     * Creates a new basic parameter struct with the base information \"$short\"\n     * (the short name of the parameter) and \"$long\" (the long version). You\n     * simply apply these parameters as strings (without '-' or '--'). So\n     *\n     * <code>\n     * $param = new ezcConsoleOption( 'f', 'file' );\n     * </code>\n     *\n     * will result in a parameter that can be accessed using\n     * \n     * <code>\n     * $ mytool -f\n     * </code>\n     *\n     * or\n     * \n     * <code>\n     * $ mytool --file\n     * </code>\n     * .\n     *\n     * The newly created parameter contains only it's 2 names and each other \n     * attribute is set to it's default value. You can simply manipulate\n     * those attributes by accessing them directly.\n     * \n     * @param string $short      Short name of the parameter without '-' (eg. 'f').\n     * @param string $long       Long name of the parameter without '--' (eg. 'file').\n     * @param int $type          Value type of the parameter. One of ezcConsoleInput::TYPE_*.\n     * @param mixed $default     Default value the parameter holds if not submitted.\n     * @param bool $multiple     If the parameter may be submitted multiple times.\n     * @param string $shorthelp  Short help text.\n     * @param string $longhelp   Long help text.\n     * @param array(ezcConsoleOptionRule) $dependencies Dependency rules.\n     * @param array(ezcConsoleOptionRule) $exclusions   Exclusion rules.\n     * @param bool $arguments    Whether supplying arguments is allowed when this parameter is set.\n     * @param bool $mandatory    Whether the parameter must be always submitted.\n     * @param bool $isHelpOption Indicates that the given parameter is a help \n     *                           option. If a help option is set, all rule \n     *                           checking is skipped (dependency/exclusion/\n     *                           mandatory).\n     *\n     * @throws ezcConsoleInvalidOptionNameException If the option names start with a \"-\" \n     *                                              sign or contain whitespaces.\n     */\n    public function __construct( \n        $short = '',\n        $long = '',\n        $type = ezcConsoleInput::TYPE_NONE, \n        $default = null, \n        $multiple = false,\n        $shorthelp = 'No help available.',\n        $longhelp = 'Sorry, there is no help text available for this parameter.', \n        array $dependencies = array(),\n        array $exclusions = array(), \n        $arguments = true,\n        $mandatory = false,\n        $isHelpOption = false\n    )\n    {\n        $this->properties['short'] = '';\n        $this->properties['long'] = '';\n        $this->properties['arguments'] = $arguments;\n\n        if ( !self::validateOptionName( $short ) )\n        {\n            throw new ezcConsoleInvalidOptionNameException( $short );\n        }\n        $this->properties['short'] = $short;\n        \n        if ( !self::validateOptionName( $long ) )\n        {\n            throw new ezcConsoleInvalidOptionNameException( $long );\n        }\n        $this->properties['long'] = $long;\n        \n        $this->__set( \"type\",      $type         !== null ? $type      : ezcConsoleInput::TYPE_NONE  );\n        $this->__set( \"multiple\",  $multiple     !== null ? $multiple  : false  );\n        $this->__set( \"default\",   $default      !== null ? $default   : null );\n        $this->__set( \"shorthelp\", $shorthelp    !== null ? $shorthelp : 'No help available.' );\n        $this->__set( \"longhelp\",  $longhelp     !== null ? $longhelp  : 'Sorry, there is no help text available for this parameter.' );\n        \n        $dependencies    = $dependencies !== null && is_array( $dependencies ) ? $dependencies : array();\n        foreach ( $dependencies as $dep )\n        {\n            $this->addDependency( $dep );\n        }\n        \n        $exclusions = $exclusions !== null && is_array( $exclusions ) ? $exclusions : array();\n        foreach ( $exclusions as $exc )\n        {\n            $this->addExclusion( $exc );\n        }\n\n        $this->__set( \"mandatory\",    $mandatory !== null ? $mandatory : false );\n        $this->__set( \"isHelpOption\", $isHelpOption !== null ? $isHelpOption : false );\n    }\n\n    /**\n     * Add a new dependency for a parameter.\n     * This registeres a new dependency rule with the parameter. If you try\n     * to add an already registered rule it will simply be ignored. Else,\n     * the submitted rule will be added to the parameter as a dependency.\n     *\n     * @param ezcConsoleOptionRule $rule The rule to add.\n     * @return void\n     */\n    public function addDependency( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->dependencies as $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                return;\n            }\n        }\n        $this->dependencies[] = $rule;\n    }\n    \n    /**\n     * Remove a dependency rule from a parameter.\n     * This removes a given rule from a parameter, if it exists. If the rule is\n     * not registered with the parameter, the method call will simply be ignored.\n     * \n     * @param ezcConsoleOptionRule $rule The rule to be removed.\n     * @return void\n     */\n    public function removeDependency( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->dependencies as $id => $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                unset( $this->dependencies[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Remove all dependency rule referring to a parameter.\n     * This removes all dependency rules from a parameter, that refer to as specific \n     * parameter. If no rule is registered with this parameter as reference, the \n     * method call will simply be ignored.\n     * \n     * @param ezcConsoleOption $param The param to be check for rules.\n     * @return void\n     */\n    public function removeAllDependencies( ezcConsoleOption $param )\n    {\n        foreach ( $this->dependencies as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                unset( $this->dependencies[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Returns if a dependency to the given option exists.\n     * Returns true if a dependency rule to the given option is registered,\n     * otherwise false.\n     * \n     * @param ezcConsoleOption $param The param to check if a dependency exists to.\n     * @return bool True if rule is registered, otherwise false.\n     */\n    public function hasDependency( ezcConsoleOption $param )\n    {\n        foreach ( $this->dependencies as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Returns the dependency rules registered with this parameter.\n     * Returns an array of registered dependencies.\n     *\n     * For example:\n     * <code>\n     * array(\n     *      0 => ezcConsoleOptionRule,\n     *      1 => ezcConsoleOptionRule,\n     *      2 => ezcConsoleOptionRule,\n     * );\n     * </code>\n     * \n     * @return array(ezcConsoleOptionRule) Dependency definition.\n     */\n    public function getDependencies()\n    {\n        return $this->dependencies;\n    }\n\n    /**\n     * Reset existing dependency rules.\n     * Deletes all registered dependency rules from the option definition.\n     * \n     * @return void\n     */\n    public function resetDependencies() \n    {\n        $this->dependencies = array();\n    }\n\n    /**\n     * Add a new exclusion for an option.\n     * This registeres a new exclusion rule with the option. If you try\n     * to add an already registered rule it will simply be ignored. Else,\n     * the submitted rule will be added to the option as a exclusion.\n     *\n     * @param ezcConsoleOptionRule $rule The rule to add.\n     * @return void\n     */\n    public function addExclusion( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->exclusions as $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                return;\n            }\n        }\n        $this->exclusions[] = $rule;\n    }\n    \n    /**\n     * Remove a exclusion rule from a option.\n     * This removes a given rule from a option, if it exists. If the rule is\n     * not registered with the option, the method call will simply be ignored.\n     * \n     * @param ezcConsoleOptionRule $rule The rule to be removed.\n     * @return void\n     */\n    public function removeExclusion( ezcConsoleOptionRule $rule )\n    {\n        foreach ( $this->exclusions as $id => $existRule )\n        {\n            if ( $rule == $existRule )\n            {\n                unset( $this->exclusions[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Remove all exclusion rule referring to a option.\n     * This removes all exclusion rules from a option, that refer to as specific \n     * option. If no rule is registered with this option as reference, the \n     * method call will simply be ignored.\n     * \n     * @param ezcConsoleOption $param The option to remove rule for.\n     * @return void\n     */\n    public function removeAllExclusions( ezcConsoleOption $param )\n    {\n        foreach ( $this->exclusions as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                unset( $this->exclusions[$id] );\n            }\n        }\n    }\n    \n    /**\n     * Returns if a given exclusion rule is registered with the option.\n     * Returns true if a exclusion rule to the given option is registered,\n     * otherwise false.\n     * \n     * @param ezcConsoleOption $param The param to check if exclusions exist for.\n     * @return bool True if rule is registered, otherwise false.\n     */\n    public function hasExclusion( ezcConsoleOption $param )\n    {\n        foreach ( $this->exclusions as $id => $rule )\n        {\n            if ( $rule->option == $param )\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Returns the exclusion rules registered with this parameter.\n     * Returns an array of registered exclusions.\n     *\n     * For example:\n     * <code>\n     * array(\n     *      0 => ezcConsoleOptionRule,\n     *      1 => ezcConsoleOptionRule,\n     *      2 => ezcConsoleOptionRule,\n     * );\n     * </code>\n     * \n     * @return array(ezcConsoleOptionRule) Exclusions definition.\n     */\n    public function getExclusions()\n    {\n        return $this->exclusions;\n    }\n\n    /**\n     * Reset existing exclusion rules.\n     * Deletes all registered exclusion rules from the option definition.\n     *\n     * @return void\n     */\n    public function resetExclusions() \n    {\n        $this->exclusions = array();\n    }\n    \n    /**\n     * Property read access.\n     * Provides read access to the properties of the object.\n     * \n     * @param string $key The name of the property.\n     * @return mixed The value if property exists and isset, otherwise null.\n     * @ignore\n     */\n    public function __get( $key )\n    {\n        switch ( $key  )\n        {\n            case 'short':\n            case 'long':\n            case 'type':\n            case 'default':\n            case 'multiple':\n            case 'shorthelp':\n            case 'longhelp':\n            case 'arguments':\n            case 'isHelpOption':\n            case 'mandatory':\n                return $this->properties[$key];\n            case 'dependencies':\n            default:\n                throw new ezcBasePropertyNotFoundException( $key );\n        }\n    }\n\n    /**\n     * Property write access.\n     * \n     * @param string $key Name of the property.\n     * @param mixed $val  The value for the property.\n     *\n     * @throws ezcBasePropertyPermissionException\n     *         If the property you try to access is read-only.\n     * @throws ezcBasePropertyNotFoundException \n     *         If the the desired property is not found.\n     * @ignore\n     */\n    public function __set( $key, $val )\n    {\n        switch ( $key )\n        {\n            case 'type':\n                if ( $val !== ezcConsoleInput::TYPE_NONE \n                     && $val !== ezcConsoleInput::TYPE_INT \n                     && $val !== ezcConsoleInput::TYPE_STRING )\n                {\n                    throw new ezcBaseValueException( \n                        $key,  \n                        $val, \n                        'ezcConsoleInput::TYPE_STRING, ezcConsoleInput::TYPE_INT or ezcConsoleInput::TYPE_NONE' \n                    );\n                }\n                break;\n            case 'default':\n                if ( ( is_scalar( $val ) === false && $val !== null ) )\n                {\n                    // Newly allow arrays, if multiple is true\n                    if ( $this->multiple === true && is_array( $val ) === true )\n                    {\n                        break;\n                    }\n                    throw new ezcBaseValueException( $key, $val, 'a string or a number, if multiple == true also an array' );\n                }\n                break;\n            case 'multiple':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'shorthelp':\n                if ( !is_string( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'string' );\n                }\n                break;\n            case 'longhelp':\n                if ( !is_string( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'string' );\n                }\n                break;\n            case 'arguments':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'mandatory':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'isHelpOption':\n                if ( !is_bool( $val ) )\n                {\n                    throw new ezcBaseValueException( $key, $val, 'bool' );\n                }\n                break;\n            case 'long':\n            case 'short':\n                throw new ezcBasePropertyPermissionException( $key, ezcBasePropertyPermissionException::READ );\n                break;\n            default:\n                throw new ezcBasePropertyNotFoundException( $key );\n                break;\n        }\n        $this->properties[$key] = $val;\n    }\n \n    /**\n     * Property isset access.\n     * \n     * @param string $key Name of the property.\n     * @return bool True is the property is set, otherwise false.\n     * @ignore\n     */\n    public function __isset( $key )\n    {\n        switch ( $key  )\n        {\n            case 'short':\n            case 'long':\n            case 'type':\n            case 'default':\n            case 'multiple':\n            case 'shorthelp':\n            case 'longhelp':\n            case 'arguments':\n            case 'isHelpOption':\n            case 'mandatory':\n                return ( $this->properties[$key] !== null );\n        }\n        return false;\n    }\n\n    /**\n     * Returns if a given name if valid for use as a parameter name a parameter. \n     * Checks if a given parameter name is generally valid for use. It checks a)\n     * that the name does not start with '-' or '--' and b) if it contains\n     * whitespaces. Note, that this method does not check any conflicts with already\n     * used parameter names.\n     * \n     * @param string $name The name to check.\n     * @return bool True if the name is valid, otherwise false.\n     */\n    public static function validateOptionName( $name )\n    {\n        if ( substr( $name, 0, 1 ) === '-' || strpos( $name, ' ' ) !== false )\n        {\n            return false;\n        }\n        return true;\n    }\n}\n\n?>\n", "<?php\n\n$response = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.geoconfiguration', array());\n\n$tpl = erLhcoreClassTemplate::getInstance( 'lhchat/geoconfiguration.tpl.php');\n\n$geoData = erLhcoreClassModelChatConfig::fetch('geo_data');\n$data = (array)$geoData->data;\n\n$geoLocationData = erLhcoreClassModelChatConfig::fetch('geo_location_data');\n$dataLocation = (array)$geoLocationData->data;\n\nif ( isset($_POST['store_map']) ) {\n\t$definition = array(\n\t\t\t'zoom' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'int',array('min_range' => 1)\n\t\t\t),\n\t\t\t'lat' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'float'\n\t\t\t),\n\t\t\t'lng' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'float'\n\t\t\t),\n\t\t\t'gmaps_api_key' => new ezcInputFormDefinitionElement(\n\t\t\t\t\tezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\n\t\t\t)\n\t);\n\n\t$Errors = array();\n\n\t$form = new ezcInputForm( INPUT_POST, $definition );\n\t$Errors = array();\n\n\tif (!isset($_POST['csfr_token']) || !$currentUser->validateCSFRToken($_POST['csfr_token'])) {\n\t\terLhcoreClassModule::redirect('chat/geoconfiguration');\n\t\texit;\n\t}\n\n\tif ( $form->hasValidData( 'zoom' )) {\n\t\t$dataLocation['zoom'] = $form->zoom;\n\t} else {\n\t\t$dataLocation['zoom'] = 3;\n\t}\n\n\tif ( $form->hasValidData( 'gmaps_api_key' )) {\n\t\t$dataLocation['gmaps_api_key'] = $form->gmaps_api_key;\n\t} else {\n\t\t$dataLocation['gmaps_api_key'] = '';\n\t}\n\n\tif ( $form->hasValidData( 'lat' )) {\n\t\t$dataLocation['lat'] = $form->lat;\n\t} else {\n\t\t$dataLocation['lat'] = '35.416';\n\t}\n\n\tif ( $form->hasValidData( 'lng' )) {\n\t\t$dataLocation['lng'] = $form->lng;\n\t} else {\n\t\t$dataLocation['lng'] = '19.121';\n\t}\n\n\t$geoLocationData->value = serialize($dataLocation);\n\t$geoLocationData->saveThis();\n\texit;\n}\n\n\n\nif ( isset($_POST['StoreGeoIPConfiguration']) ) {\n\n    $definition = array(\n        'UseGeoIP' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'GeoDetectionEnabled' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_COUNTRY_CODE' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_COUNTRY_NAME' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_CITY' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_LATITUDE' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_REGION' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ServerVariableGEOIP_LONGITUDE' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'locatorhqAPIKey' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ipinfodbAPIKey' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'locatorhqUsername' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'locatorhqIP' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'MaxMindDetectionType' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'ipapi_key' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        ),\n        'abstractapi_key' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\n        )\n    );\n\n    $Errors = array();\n\n    $form = new ezcInputForm( INPUT_POST, $definition );\n    $Errors = array();\n\n    if ( $form->hasValidData( 'GeoDetectionEnabled' ) && $form->GeoDetectionEnabled == true ) {\n        $data['geo_detection_enabled'] = 1;\n    } else {\n        $data['geo_detection_enabled'] = 0;\n    }\n\n    if (!isset($_POST['csfr_token']) || !$currentUser->validateCSFRToken($_POST['csfr_token'])) {\n    \terLhcoreClassModule::redirect('chat/geoconfiguration');\n    \texit;\n    }\n\n    if ($data['geo_detection_enabled'] == 1) {\n        if ( $form->hasValidData( 'UseGeoIP' ) ) {\n\n            if ($form->UseGeoIP == 'mod_geoip2'){\n\n                $data['geo_service_identifier'] = 'mod_geoip2';\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_COUNTRY_CODE' ) && $form->ServerVariableGEOIP_COUNTRY_CODE != '' && isset($_SERVER[$form->ServerVariableGEOIP_COUNTRY_CODE]) ) {\n                    $data['mod_geo_ip_country_code'] = $form->ServerVariableGEOIP_COUNTRY_CODE;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country code variable does not exist!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_COUNTRY_NAME' ) && $form->ServerVariableGEOIP_COUNTRY_NAME != '' && isset($_SERVER[$form->ServerVariableGEOIP_COUNTRY_NAME]) ) {\n                    $data['mod_geo_ip_country_name'] = $form->ServerVariableGEOIP_COUNTRY_NAME;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Country name variable does not exist!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_CITY' ) && $form->ServerVariableGEOIP_CITY != '' ) {\n                    $data['mod_geo_ip_city_name'] = $form->ServerVariableGEOIP_CITY;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter city variable!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_REGION' ) && $form->ServerVariableGEOIP_REGION != '' ) {\n                    $data['mod_geo_ip_region_name'] = $form->ServerVariableGEOIP_REGION;\n                } else {\n                    $data['mod_geo_ip_region_name'] = '';\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_LATITUDE' ) && $form->ServerVariableGEOIP_LATITUDE != '' ) {\n                    $data['mod_geo_ip_latitude'] = $form->ServerVariableGEOIP_LATITUDE;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter latitude variable!');\n                }\n\n                if ( $form->hasValidData( 'ServerVariableGEOIP_LONGITUDE' ) && $form->ServerVariableGEOIP_LONGITUDE != '' ) {\n                    $data['mod_geo_ip_longitude'] = $form->ServerVariableGEOIP_LONGITUDE;\n                } else {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter longitude variable!');\n                }\n\n\n            } elseif ($form->UseGeoIP == 'freegeoip') {\n                $data['geo_service_identifier'] = 'freegeoip';\n                $data['freegeoip_key'] = isset($_POST['freegeoip_key']) ? $_POST['freegeoip_key'] : '';\n\n                if (empty($data['freegeoip_key'])) {\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter API Key!');\n                }\n\n                if (empty($Errors)){\n                    $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('freegeoip',erLhcoreClassIPDetect::getServerAddress(),$data);\n                    if ( $responseDetection == false || !isset($responseDetection->country_code) || !isset($responseDetection->country_name) ) {\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages!');\n                    }\n                }\n\n            } elseif ($form->UseGeoIP == 'max_mind') {\n                $data['geo_service_identifier'] = 'max_mind';                \n                $data['max_mind_detection_type'] = $form->hasValidData('MaxMindDetectionType') ? $form->MaxMindDetectionType : 'city';\n                $data['max_mind_city_location'] = 'var/external/geoip/GeoLite2-City.mmdb';\n\n                if ($data['max_mind_detection_type'] == 'city' && !file_exists($data['max_mind_city_location'])) {\n                \t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','MaxMind city file does not exists!');\n                } elseif (!file_exists('var/external/geoip/GeoLite2-Country.mmdb')) {\n                \t$data['max_mind_detection_type'] = 'country';\n                \t$Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','MaxMind country file does not exists!');\n                }\n\n                if (empty($Errors)) {\n\t                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('max_mind','94.23.200.91',array('city_file' => $data['max_mind_city_location'],'detection_type' => $data['max_mind_detection_type']));                \n\t                if ( $responseDetection == false || !isset($responseDetection->country_code) || !isset($responseDetection->country_name) ) {\n\t                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that MaxMind database files exists!');\n\t                }\n                }                \n                \n            } elseif ($form->UseGeoIP == 'locatorhq') {\n                $data['geo_service_identifier'] = 'locatorhq';\n\n                $filledAPIData = true;\n\n                if ( $form->hasValidData( 'locatorhqAPIKey' ) && $form->locatorhqAPIKey != '' ) {\n                    $data['locatorhq_api_key'] = $form->locatorhqAPIKey;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter the API key!');\n                }\n\n                if ( $form->hasValidData( 'locatorhqUsername' ) && $form->locatorhqUsername != '' ) {\n                    $data['locatorhqusername'] = $form->locatorhqUsername;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter the API username!');\n                }\n\n                if ( $form->hasValidData( 'locatorhqIP' ) && $form->locatorhqIP != '' ) {\n                    $data['locatorhqip'] = $form->locatorhqIP;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter IP!');\n                }\n\n                if ($filledAPIData == true) {\n                    $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('locatorhq',erLhcoreClassIPDetect::getServerAddress(),array('ip' => $data['locatorhqip'], 'username' => $data['locatorhqusername'], 'api_key' => $data['locatorhq_api_key']));\n                    if ($responseDetection == false || !isset($responseDetection->country_code)){\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key and username is correct!');\n                    }\n                }\n            } elseif ($form->UseGeoIP == 'ipinfodbcom') {\n                $data['geo_service_identifier'] = 'ipinfodbcom';\n\n                $filledAPIData = true;\n\n                if ( $form->hasValidData( 'ipinfodbAPIKey' ) && $form->ipinfodbAPIKey != '' ) {\n                    $data['ipinfodbcom_api_key'] = $form->ipinfodbAPIKey;\n                } else {\n                    $filledAPIData = false;\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please enter the API key!');\n                }\n               \n                if ($filledAPIData == true) {\n                    $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('ipinfodbcom',erLhcoreClassIPDetect::getServerAddress(),array('api_key' => $data['ipinfodbcom_api_key']));\n                    if ($responseDetection == false || !isset($responseDetection->country_code)){\n                        $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key is correct!');\n                    }\n                }\n            } elseif ($form->UseGeoIP == 'php_geoip') {\n                $data['geo_service_identifier'] = 'php_geoip';\n              \n                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('php_geoip','8.8.8.8');\n                if ($responseDetection == false || !isset($responseDetection->country_code)){\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that you have installed php-GeoIP module and GeoIPCity.dat file is available!');\n                }                \n            } elseif ($form->UseGeoIP == 'ipapi') {\n                $data['geo_service_identifier'] = 'ipapi';\n\n                if ( $form->hasValidData( 'ipapi_key' ) && $form->ipapi_key != '' ) {\n                    $data['ipapi_key'] = $form->ipapi_key;\n                } else {\n                    $data['ipapi_key'] = '';\n                }\n\n                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('ipapi','8.8.8.8');\n\n                if ($responseDetection == false || !isset($responseDetection->country_code)){\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key is correct!');\n                }\n\n            } elseif ($form->UseGeoIP == 'abstractapi') {\n                $data['geo_service_identifier'] = 'abstractapi';\n\n                if ( $form->hasValidData( 'abstractapi_key' ) && $form->abstractapi_key != '' ) {\n                    $data['abstractapi_key'] = $form->abstractapi_key;\n                } else {\n                    $data['abstractapi_key'] = '';\n                }\n\n                $responseDetection = erLhcoreClassModelChatOnlineUser::getUserData('abstractapi','8.8.8.8', array('abstractapi_key' => $data['abstractapi_key']));\n\n                if ($responseDetection == false || !isset($responseDetection->country_code)){\n                    $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Setting service provider failed, please check that your service provider allows you to make requests to remote pages and your API key is correct!');\n                }\n\n            }\n\n        } else {\n            $Errors[] = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Please choose a service provider!');\n        }\n    }\n\n    if (count($Errors) == 0) {\n        $geoData->value = serialize($data);\n        $geoData->saveThis();\n        $tpl->set('updated','done');\n    }  else {\n        $tpl->set('errors',$Errors);\n    }\n\n}\n\n$tpl->set('geo_data',$data);\n$tpl->set('geo_location_data',$dataLocation);\n\n$Result['content'] = $tpl->fetch();\n$Result['path'] = array(\narray('url' => erLhcoreClassDesign::baseurl('chat/onlineusers'), 'title' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','Online users')),\narray('title' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/onlineusers','GEO detection configuration')));\n\n\n?>"], "filenames": ["lhc_web/design/defaulttheme/tpl/lhchat/geoconfiguration.tpl.php", "lhc_web/ezcomponents/Base/src/file.php", "lhc_web/ezcomponents/ConsoleTools/src/input/option.php", "lhc_web/modules/lhchat/geoconfiguration.php"], "buggy_code_start_loc": [131, 113, 150, 112], "buggy_code_end_loc": [133, 114, 152, 210], "fixing_code_start_loc": [131, 113, 150, 111], "fixing_code_end_loc": [133, 114, 152, 207], "type": "CWE-209", "message": "livehelperchat is vulnerable to Generation of Error Message Containing Sensitive Information", "other": {"cve": {"id": "CVE-2021-4177", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-28T06:15:06.467", "lastModified": "2022-01-06T20:08:19.720", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "livehelperchat is vulnerable to Generation of Error Message Containing Sensitive Information"}, {"lang": "es", "value": "livehelperchat es vulnerable a la Generaci\u00f3n de Mensajes de Error que Contienen Informaci\u00f3n Confidencial"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-209"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.91", "matchCriteriaId": "744AB687-C4FD-47D3-BE0A-186C84B8E942"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/b280beae2e0de37b9e998c31c5d1839852724fc1", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ac641425-1c64-4874-95e7-c7805c72074e", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/b280beae2e0de37b9e998c31c5d1839852724fc1"}}