{"buggy_code": ["<?php\n/**\n * @link https://github.com/himiklab/yii2-jqgrid-widget\n * @copyright Copyright (c) 2014 HimikLab\n * @license http://opensource.org/licenses/MIT MIT\n */\n\nnamespace himiklab\\jqgrid;\n\nuse Yii;\nuse yii\\base\\Action;\nuse yii\\helpers\\Json;\nuse yii\\data\\ActiveDataProvider;\nuse yii\\data\\Pagination;\nuse yii\\data\\Sort;\nuse yii\\web\\BadRequestHttpException;\n\n/**\n * Action for jqGrid widget\n *\n * For example:\n *\n * ```php\n * public function behaviors()\n * {\n *  return [\n *       'jqgrid' => [\n *           'class' => JqGridAction::className(),\n *           'model' => Page::className(),\n *           'columns' => ['title', 'author', 'language']\n *       ],\n *  ];\n * }\n * ```\n *\n * @author HimikLab\n * @package himiklab\\jqgrid\n */\nclass JqGridAction extends Action\n{\n    /** @var \\yii\\db\\ActiveRecord $model */\n    public $model;\n\n    /**\n     * @var array $columns the columns being selected.\n     * This is used to construct the SELECT clause in a SQL statement. If not set, it means selecting all columns.\n     */\n    public $columns = [];\n\n    public function run()\n    {\n        if (is_string($this->model)) {\n            $this->model = new $this->model;\n        }\n        $model = $this->model;\n\n        if (!$getActionParam = Yii::$app->request->get('action')) {\n            throw new BadRequestHttpException('GET param `action` isn`t set');\n        }\n\n        // add PK if it exist and not set to $this->columns\n        $modelPK = $model::primaryKey();\n        if (isset($modelPK[0]) && !empty($this->columns) && !array_search($modelPK[0], $this->columns)) {\n            $this->columns[] = $modelPK[0];\n        }\n\n        switch ($getActionParam) {\n            case 'request':\n                header('Content-Type: application/json; charset=utf-8');\n                echo $this->request(\n                    $model,\n                    Yii::$app->request->post(),\n                    $this->columns\n                );\n                break;\n            case 'edit':\n                $this->edit($model, Yii::$app->request->post());\n                break;\n            case 'add':\n                $this->add($model, Yii::$app->request->post());\n                break;\n            case 'del':\n                $this->del($model, Yii::$app->request->post());\n                break;\n            default:\n                throw new BadRequestHttpException();\n        }\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @param array $columns\n     * @return string\n     * @throws BadRequestHttpException\n     */\n    protected function request($model, $requestData, $columns)\n    {\n        $query = $model::find();\n        if (!empty($columns)) {\n            $query->select = $columns;\n        }\n\n        // search\n        if (isset($requestData['_search']) && $requestData['_search'] === 'true') {\n            $searchData = [];\n\n            // filter panel\n            foreach ($model->attributes() as $modelAttribute) {\n                if (array_key_exists($modelAttribute, $requestData)) {\n                    $searchData['rules'][] = [\n                        'op' => 'cn',\n                        'field' => $modelAttribute,\n                        'data' => $requestData[$modelAttribute]\n                    ];\n                }\n            }\n\n            // search panel\n            if (isset($requestData['filters'])) {\n                if ($requestData['filters'] != '') {\n                    // advanced searching\n                    $searchData = Json::decode($requestData['filters'], true);\n                } else {\n                    // single searching\n                    $searchData['rules'][] = [\n                        'op' => $requestData['searchOper'],\n                        'field' => $requestData['searchField'],\n                        'data' => $requestData['searchString']\n                    ];\n                }\n            }\n\n            $this->addSearchOptionsRecursively($query, $searchData);\n        }\n\n        // pagination\n        $pagination = new Pagination;\n        $pagination->page = $requestData['page'] - 1; // ActiveDataProvider is zero-based, jqGrid not\n        $pagination->pageSize = $requestData['rows'];\n\n        // sorting\n        $sort = false;\n        if (isset($requestData['sidx']) && $requestData['sidx'] != ''\n            && ($requestData['sord'] === 'asc' || $requestData['sord'] === 'desc')\n        ) {\n            $sort = new Sort;\n            $sort->defaultOrder = [\n                $requestData['sidx'] => $requestData['sord'] === 'asc' ? SORT_ASC : SORT_DESC\n            ];\n        }\n\n        $dataProvider = new ActiveDataProvider(\n            [\n                'query' => $query,\n                'pagination' => $pagination,\n                'sort' => $sort\n            ]\n        );\n        $recordsTotalCount = $dataProvider->totalCount;\n\n        $response = [];\n        $response['page'] = $requestData['page'];\n        $response['total'] =\n            $requestData['rows'] != 0 ? ceil($recordsTotalCount / $requestData['rows']) : 0;\n        $response['records'] = $recordsTotalCount;\n\n        $i = 0;\n        foreach ($dataProvider->getModels() as $record) {\n            /** @var \\yii\\db\\ActiveRecord $record */\n            $response['rows'][$i]['id'] = $record->primaryKey;\n            foreach ($record->attributes() as $modelAttribute) {\n                $columnValue = $record->$modelAttribute;\n                if (!$record->isPrimaryKey([$modelAttribute]) && $columnValue !== null) {\n                    $response['rows'][$i]['cell'][$modelAttribute] = $columnValue;\n                }\n            }\n            ++$i;\n        }\n        return Json::encode($response, YII_DEBUG ? JSON_PRETTY_PRINT : 0);\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @throws BadRequestHttpException\n     */\n    protected function edit($model, $requestData)\n    {\n        if (!isset($requestData['id'])) {\n            throw new BadRequestHttpException('Id param isn`t set');\n        }\n        $record = $model::findOne($requestData['id']);\n\n        foreach ($record->attributes() as $modelAttribute) {\n            if (isset($requestData[$modelAttribute])) {\n                $record->$modelAttribute = $requestData[$modelAttribute];\n            }\n        }\n        $record->save();\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @throws BadRequestHttpException\n     */\n    protected function add($model, $requestData)\n    {\n        if (!isset($requestData['id'])) {\n            throw new BadRequestHttpException('Id param isn`t set');\n        }\n\n        foreach ($model->attributes() as $modelAttribute) {\n            if (isset($requestData[$modelAttribute])) {\n                $model->$modelAttribute = $requestData[$modelAttribute];\n            }\n        }\n        $model->save();\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @throws BadRequestHttpException\n     * @throws \\Exception\n     */\n    protected function del($model, $requestData)\n    {\n        if (!isset($requestData['id'])) {\n            throw new BadRequestHttpException('Id param isn`t set');\n        }\n\n        foreach (explode(',', $requestData['id']) as $id) {\n            $model::findOne($id)->delete();\n        }\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveQuery $query\n     * @param array $searchData\n     * @throws BadRequestHttpException\n     */\n    protected function addSearchOptionsRecursively($query, $searchData)\n    {\n        $groupCondition = 'andWhere';\n        if (isset($searchData['groupOp'])) {\n            if (isset($searchData['groups'])) {\n                foreach ($searchData['groups'] as $group) {\n                    $this->addSearchOptionsRecursively($query, $group);\n                }\n            }\n\n            if ($searchData['groupOp'] === 'OR') {\n                $groupCondition = 'orWhere';\n            } elseif ($searchData['groupOp'] !== 'AND') {\n                throw new BadRequestHttpException('Unsupported value in `groupOp` param');\n            }\n        }\n\n        foreach ($searchData['rules'] as $rule) {\n            switch ($rule['op']) {\n                case 'eq':\n                    $query->$groupCondition([$rule['field'] => $rule['data']]);\n                    break;\n                case 'ne':\n                    $query->$groupCondition(['<>', $rule['field'], $rule['data']]);\n                    break;\n                case 'cn':\n                    $query->$groupCondition(['like', $rule['field'], $rule['data']]);\n                    break;\n                case 'nc':\n                    $query->$groupCondition(['not like', $rule['field'], $rule['data']]);\n                    break;\n                case 'nu':\n                    $query->$groupCondition([$rule['field'] => null]);\n                    break;\n                case 'nn':\n                    $query->$groupCondition(['<>', $rule['field'], null]);\n                    break;\n                case 'in':\n                    $rule['data'] = explode(',', $rule['data']);\n                    array_walk($rule['data'], 'trim');\n                    $query->$groupCondition(['in', $rule['field'], $rule['data']]);\n                    break;\n                case 'ni':\n                    $rule['data'] = explode(',', $rule['data']);\n                    array_walk($rule['data'], 'trim');\n                    $query->$groupCondition(['not in', $rule['field'], $rule['data']]);\n                    break;\n                default:\n                    throw new BadRequestHttpException('Unsupported value in `op` or `searchOper` param');\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * @link https://github.com/himiklab/yii2-jqgrid-widget\n * @copyright Copyright (c) 2014 HimikLab\n * @license http://opensource.org/licenses/MIT MIT\n */\n\nnamespace himiklab\\jqgrid;\n\nuse Yii;\nuse yii\\base\\Action;\nuse yii\\helpers\\Json;\nuse yii\\data\\ActiveDataProvider;\nuse yii\\data\\Pagination;\nuse yii\\data\\Sort;\nuse yii\\web\\BadRequestHttpException;\n\n/**\n * Action for jqGrid widget\n *\n * For example:\n *\n * ```php\n * public function behaviors()\n * {\n *  return [\n *       'jqgrid' => [\n *           'class' => JqGridAction::className(),\n *           'model' => Page::className(),\n *           'columns' => ['title', 'author', 'language']\n *       ],\n *  ];\n * }\n * ```\n *\n * @author HimikLab\n * @package himiklab\\jqgrid\n */\nclass JqGridAction extends Action\n{\n    /** @var \\yii\\db\\ActiveRecord $model */\n    public $model;\n\n    /**\n     * @var array $columns the columns being selected.\n     * This is used to construct the SELECT clause in a SQL statement. If not set, it means selecting all columns.\n     */\n    public $columns = [];\n\n    public function run()\n    {\n        if (is_string($this->model)) {\n            $this->model = new $this->model;\n        }\n        $model = $this->model;\n\n        if (!$getActionParam = Yii::$app->request->get('action')) {\n            throw new BadRequestHttpException('GET param `action` isn`t set');\n        }\n\n        // add PK if it exist and not set to $this->columns\n        $modelPK = $model::primaryKey();\n        if (isset($modelPK[0]) && !empty($this->columns) && !array_search($modelPK[0], $this->columns)) {\n            $this->columns[] = $modelPK[0];\n        }\n\n        switch ($getActionParam) {\n            case 'request':\n                header('Content-Type: application/json; charset=utf-8');\n                echo $this->request(\n                    $model,\n                    Yii::$app->request->post(),\n                    $this->columns\n                );\n                break;\n            case 'edit':\n                $this->edit($model, Yii::$app->request->post());\n                break;\n            case 'add':\n                $this->add($model, Yii::$app->request->post());\n                break;\n            case 'del':\n                $this->del($model, Yii::$app->request->post());\n                break;\n            default:\n                throw new BadRequestHttpException();\n        }\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @param array $columns\n     * @return string\n     * @throws BadRequestHttpException\n     */\n    protected function request($model, $requestData, $columns)\n    {\n        $query = $model::find();\n        if (!empty($columns)) {\n            $query->select = $columns;\n        }\n\n        // search\n        if (isset($requestData['_search']) && $requestData['_search'] === 'true') {\n            $searchData = [];\n\n            // filter panel\n            foreach ($model->attributes() as $modelAttribute) {\n                if (array_key_exists($modelAttribute, $requestData)) {\n                    $searchData['rules'][] = [\n                        'op' => 'cn',\n                        'field' => $modelAttribute,\n                        'data' => $requestData[$modelAttribute]\n                    ];\n                }\n            }\n\n            // search panel\n            if (isset($requestData['filters'])) {\n                if ($requestData['filters'] != '') {\n                    // advanced searching\n                    $searchData = Json::decode($requestData['filters'], true);\n                } else {\n                    // single searching\n                    $searchData['rules'][] = [\n                        'op' => $requestData['searchOper'],\n                        'field' => $requestData['searchField'],\n                        'data' => $requestData['searchString']\n                    ];\n                }\n            }\n\n            $this->addSearchOptionsRecursively($query, $searchData);\n        }\n\n        // pagination\n        $pagination = new Pagination;\n        $pagination->page = $requestData['page'] - 1; // ActiveDataProvider is zero-based, jqGrid not\n        $pagination->pageSize = $requestData['rows'];\n\n        // sorting\n        $sort = false;\n        if (isset($requestData['sidx']) && $requestData['sidx'] != ''\n            && ($requestData['sord'] === 'asc' || $requestData['sord'] === 'desc')\n        ) {\n            $sort = new Sort;\n            $sort->defaultOrder = [\n                $requestData['sidx'] => $requestData['sord'] === 'asc' ? SORT_ASC : SORT_DESC\n            ];\n        }\n\n        $dataProvider = new ActiveDataProvider(\n            [\n                'query' => $query,\n                'pagination' => $pagination,\n                'sort' => $sort\n            ]\n        );\n        $recordsTotalCount = $dataProvider->totalCount;\n\n        $response = [];\n        $response['page'] = $requestData['page'];\n        $response['total'] =\n            $requestData['rows'] != 0 ? ceil($recordsTotalCount / $requestData['rows']) : 0;\n        $response['records'] = $recordsTotalCount;\n\n        $i = 0;\n        foreach ($dataProvider->getModels() as $record) {\n            /** @var \\yii\\db\\ActiveRecord $record */\n            $response['rows'][$i]['id'] = $record->primaryKey;\n            foreach ($record->attributes() as $modelAttribute) {\n                $columnValue = $record->$modelAttribute;\n                if (!$record->isPrimaryKey([$modelAttribute]) && $columnValue !== null) {\n                    $response['rows'][$i]['cell'][$modelAttribute] = $columnValue;\n                }\n            }\n            ++$i;\n        }\n        return Json::encode($response, YII_DEBUG ? JSON_PRETTY_PRINT : 0);\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @throws BadRequestHttpException\n     */\n    protected function edit($model, $requestData)\n    {\n        if (!isset($requestData['id'])) {\n            throw new BadRequestHttpException('Id param isn`t set');\n        }\n        $record = $model::findOne($requestData['id']);\n\n        foreach ($record->attributes() as $modelAttribute) {\n            if (isset($requestData[$modelAttribute])) {\n                $record->$modelAttribute = $requestData[$modelAttribute];\n            }\n        }\n        $record->save();\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @throws BadRequestHttpException\n     */\n    protected function add($model, $requestData)\n    {\n        if (!isset($requestData['id'])) {\n            throw new BadRequestHttpException('Id param isn`t set');\n        }\n\n        foreach ($model->attributes() as $modelAttribute) {\n            if (isset($requestData[$modelAttribute])) {\n                $model->$modelAttribute = $requestData[$modelAttribute];\n            }\n        }\n        $model->save();\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveRecord $model\n     * @param array $requestData\n     * @throws BadRequestHttpException\n     * @throws \\Exception\n     */\n    protected function del($model, $requestData)\n    {\n        if (!isset($requestData['id'])) {\n            throw new BadRequestHttpException('Id param isn`t set');\n        }\n\n        foreach (explode(',', $requestData['id']) as $id) {\n            $model::findOne($id)->delete();\n        }\n    }\n\n    /**\n     * @param \\yii\\db\\ActiveQuery $query\n     * @param array $searchData\n     * @throws BadRequestHttpException\n     */\n    protected function addSearchOptionsRecursively($query, $searchData)\n    {\n        $groupCondition = 'andWhere';\n        if (isset($searchData['groupOp'])) {\n            if (isset($searchData['groups'])) {\n                foreach ($searchData['groups'] as $group) {\n                    $this->addSearchOptionsRecursively($query, $group);\n                }\n            }\n\n            if ($searchData['groupOp'] === 'OR') {\n                $groupCondition = 'orWhere';\n            } elseif ($searchData['groupOp'] !== 'AND') {\n                throw new BadRequestHttpException('Unsupported value in `groupOp` param');\n            }\n        }\n\n        foreach ($searchData['rules'] as $rule) {\n            if (!$this->model->hasAttribute($rule['field'])) {\n                throw new BadRequestHttpException('Unknown attribute');\n            }\n            switch ($rule['op']) {\n                case 'eq':\n                    $query->$groupCondition([$rule['field'] => $rule['data']]);\n                    break;\n                case 'ne':\n                    $query->$groupCondition(['<>', $rule['field'], $rule['data']]);\n                    break;\n                case 'cn':\n                    $query->$groupCondition(['like', $rule['field'], $rule['data']]);\n                    break;\n                case 'nc':\n                    $query->$groupCondition(['not like', $rule['field'], $rule['data']]);\n                    break;\n                case 'nu':\n                    $query->$groupCondition([$rule['field'] => null]);\n                    break;\n                case 'nn':\n                    $query->$groupCondition(['<>', $rule['field'], null]);\n                    break;\n                case 'in':\n                    $rule['data'] = explode(',', $rule['data']);\n                    array_walk($rule['data'], 'trim');\n                    $query->$groupCondition(['in', $rule['field'], $rule['data']]);\n                    break;\n                case 'ni':\n                    $rule['data'] = explode(',', $rule['data']);\n                    array_walk($rule['data'], 'trim');\n                    $query->$groupCondition(['not in', $rule['field'], $rule['data']]);\n                    break;\n                default:\n                    throw new BadRequestHttpException('Unsupported value in `op` or `searchOper` param');\n            }\n        }\n    }\n}\n"], "filenames": ["JqGridAction.php"], "buggy_code_start_loc": [261], "buggy_code_end_loc": [261], "fixing_code_start_loc": [262], "fixing_code_end_loc": [265], "type": "CWE-89", "message": "A vulnerability was found in himiklab yii2-jqgrid-widget up to 1.0.7. It has been declared as critical. This vulnerability affects the function addSearchOptionsRecursively of the file JqGridAction.php. The manipulation leads to sql injection. Upgrading to version 1.0.8 is able to address this issue. The name of the patch is a117e0f2df729e3ff726968794d9a5ac40e660b9. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217564.", "other": {"cve": {"id": "CVE-2014-125051", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T17:15:08.977", "lastModified": "2023-01-12T15:25:44.507", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in himiklab yii2-jqgrid-widget up to 1.0.7. It has been declared as critical. This vulnerability affects the function addSearchOptionsRecursively of the file JqGridAction.php. The manipulation leads to sql injection. Upgrading to version 1.0.8 is able to address this issue. The name of the patch is a117e0f2df729e3ff726968794d9a5ac40e660b9. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217564."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yii2-jqgrid-widget_project:yii2-jqgrid-widget:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.8", "matchCriteriaId": "90DBE78A-76EA-4AC5-AEB0-BBA72E825D58"}]}]}], "references": [{"url": "https://github.com/himiklab/yii2-jqgrid-widget/commit/a117e0f2df729e3ff726968794d9a5ac40e660b9", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/himiklab/yii2-jqgrid-widget/releases/tag/1.0.8", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217564", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217564", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/himiklab/yii2-jqgrid-widget/commit/a117e0f2df729e3ff726968794d9a5ac40e660b9"}}