{"buggy_code": ["# GLPI changes\n\nThe present file will list all changes made to the project; according to the\n[Keep a Changelog](http://keepachangelog.com/) project.\n\n## [10.0.7] unreleased\n\n### Added\n\n### Changed\n\n### Deprecated\n\n### Removed\n\n### API changes\n\n#### Added\n\n#### Changes\n- Itemtype that can be linked to a disk are now declared in `$CFG_GLPI['disk_types']`.\n\n#### Deprecated\n- `Glpi\\Inventory\\Conf::importFile()`\n- `Toolbox::checkValidReferer()`\n\n#### Removed\n\n## [10.0.6] 2023-01-24\n\n### Added\n\n### Changed\n- `glpi:` command prefix has been removed from console commands canonical name.\n\n### Deprecated\n\n### Removed\n\n### API changes\n\n#### Added\n\n#### Changes\n\n#### Deprecated\n\n#### Removed\n\n## [10.0.5] 2022-11-04\n\n## [10.0.4] 2022-11-03\n\n## [10.0.3] 2022-09-14\n\n### API changes\n\n#### Added\n\n- `CommonDBTM::pre_addToDB()` added.\n\n#### Removed\n\n## [10.0.2] 2022-06-28\n\n## [10.0.1] 2022-06-02\n\n### Changed\n- PDF export library has been changed back from `mPDF` to `TCPDF`.\n\n### Removed\n- Gantt feature has been moved into the `gantt` plugin.\n\n### API changes\n\n#### Added\n- `plugin_xxx_activate()` and `plugin_xxx_deactivate` hooks support.\n\n#### Changes\n- `Glpi\\Api\\Api::initEndpoint()` visibility changed to `protected`.\n\n#### Removed\n- `GlpiGantt` javascript helper and `dhtmlx-gantt` library.\n- `Glpi\\Gantt` namespace and all corresponding classes.\n- `Project::getDataToDisplayOnGantt()`\n- `Project::showGantt()`\n- `ProjectTask::getDataToDisplayOnGantt()`\n- `ProjectTask::getDataToDisplayOnGanttForProject()`\n\n## [10.0.0] 2022-04-20\n\n### Added\n- Added UUID to all other itemtypes that are related to Operating Systems (Phones, Printers, etc)\n- Added a button to the General > System configuration tab to copy the system information\n\n### Changed\n- APCu and WinCache are not anymore use by GLPI, use `php bin/console cache:configure` command to configure cache system.\n- PDF export library has been changed from `TCPDF` to `mPDF`.\n- The search engine and search results page now support sorting by multiple fields.\n- The search result lists now refresh/update without triggering a full page reload.\n- Replaced user-facing cases of master/slave usage replaced with main/replica.\n\n### Deprecated\n- Usage of XML-RPC API is deprecated.\n- The database \"slaves\" property in the status checker (/status.php and glpi:system:status) is deprecated. Use \"replicas\" instead,\n- The database \"master\" property in the status checker (/status.php and glpi:system:status) is deprecated. Use \"main\" instead,\n\n### Removed\n- Autocomplete feature on text fields.\n- Usage of alternative DB connection encoding (`DB::$dbenc` property).\n- Deprecated `scripts/ldap_mass_sync.php` has been removed in favor of `glpi:ldap:synchronize_users` command available using `bin/console`\n- Deprecated `scripts/compute_dictionary.php` has been removed in favor of `glpi:rules:replay_dictionnary_rules` command available using `bin/console`\n- Deprecated `scripts/softcat_mass_compute.php` has been removed in favor of `glpi:rules:process_software_category_rules` command available using `bin/console`\n\n### API changes\n\n#### Added\n- Added `DBMysql::setSavepoint()` to create savepoints within a transaction.\n- Added `CommonDBTM::showForm()` to have a generic showForm for asset (based on a twig template).\n\n#### Changes\n- MySQL warnings are now logged in SQL errors log.\n- `Guzzle` library has been upgraded to version 7.4.\n- `Symfony\\Console` library has been upgraded to version 5.4.\n- `CommonGLPI` constructor signature has been declared in an interface (`CommonGLPIInterface`).\n- `DBmysqlIterator` class compliancy with `Iterator` has been fixed (i.e. `DBmysqlIterator::next()` does not return current row anymore).\n- `Domain` class inheritance changed from `CommonDropdown` to `CommonDBTM`.\n- `showForm()` method of all classes inheriting `CommonDBTM` have been changed to match `CommonDBTM::showForm()` signature.\n- Format of `Message-Id` header sent in Tickets notifications changed to match format used by other items.\n- Added `DB::truncate()` to replace raw SQL queries\n- Impact context `positions` field type changed from `TEXT` to `MEDIUMTEXT`\n- Field `date` of KnowbaseItem has been renamed to `date_creation`.\n- Field `date_creation` of KnowbaseItem_Revision has been renamed to `date`.\n- Field `date_creation` of NetworkPortConnectionLog has been renamed to `date`.\n- Field `date` of Notepad has been renamed to `date_creation`.\n- Field `date_mod` of ObjectLock has been renamed to `date`.\n- Field `date` of ProjectTask has been renamed to `date_creation`.\n- Table `glpi_netpoints` has been renamed to `glpi_sockets`.\n- `GLPI_FORCE_EMPTY_SQL_MODE` constant has been removed in favor of `GLPI_DISABLE_ONLY_FULL_GROUP_BY_SQL_MODE` usage.\n- `CommonDBTM::clone()`, `CommonDBTM::prepareInputForClone()` and `CommonDBTM::post_clone()` has been removed. Clonable objects must now use `Glpi\\Features\\Clonable` trait.\n- `CommonDBTM::notificationqueueonaction` property has been removed in favor of `CommonDBTM::deduplicate_queued_notifications` property.\n- `CommonDropdown::displaySpecificTypeField()` has a new `$options` parameter.\n- `DBMysql::rollBack` supports a `name` parameter for rolling back to a savepoint.\n- `Knowbase::getJstreeCategoryList()` as been replaced by `Knowbase::getTreeCategoryList()`.\n- `NetworkPortInstantiation::showNetpointField()` has been renamed to `NetworkPortInstantiation::showSocketField()`.\n- `NotificationSettingConfig::showForm()` renamed to `NotificationSettingConfig::showConfigForm()`.\n- `RuleMatchedLog::showForm()` renamed to `RuleMatchedLog::showItemForm()`.\n- `Search::addOrderBy()` signature changed.\n- `TicketSatisfaction::showForm()` renamed to `TicketSatisfaction::showSatisfactionForm()`.\n- `Transfer::transferDropdownNetpoint()` has been renamed to `Transfer::transferDropdownSocket()`.\n\n#### Deprecated\n- Usage of `MyISAM` engine in database, in favor of `InnoDB` engine.\n- Usage of `utf8mb3` charset/collation in database in favor of `utf8mb4` charset/collation.\n- Usage of `datetime` field type in database, in favor of `timestamp` field type.\n- Handling of encoded/escaped value in `autoName()`\n- `Netpoint` has been deprecated and replaced by `Socket`\n- `CommonDropdown::displayHeader()`, use `CommonDropdown::displayCentralHeader()` instead and make sure to override properly `first_level_menu`, `second_level_menu` and `third_level_menu`.\n- `GLPI::getLogLevel()`\n- `Html::clean()`\n- `MailCollector::listEncodings()`\n- `RuleImportComputer` class\n- `RuleImportComputerCollection` class\n- `SLM::setTicketCalendar()`\n- `Toolbox::clean_cross_side_scripting_deep()`\n- `Toolbox::endsWith()`\n- `Toolbox::filesizeDirectory()`\n- `Toolbox::getHtmlToDisplay()`\n- `Toolbox::logError()`\n- `Toolbox::logNotice()`\n- `Toolbox::logWarning()`\n- `Toolbox::sodiumDecrypt()`\n- `Toolbox::sodiumEncrypt()`\n- `Toolbox::startsWith()`\n- `Toolbox::unclean_cross_side_scripting_deep()`\n\n#### Removed\n- `jQueryUI` has been removed in favor of `twbs/bootstrap`. This implies removal of following widgets: `$.accordion`, `$.autocomplete`,\n  `$.button`, `$.dialog`, `$.draggable`, `$.droppable`, `$.progressbar`, `$.resizable`, `$.selectable`, `$.sortable`, `$.tabs`, `$.tooltip`.\n- Usage of `$order` parameter in `getAllDataFromTable()` (`DbUtils::getAllDataFromTable()`)\n- Usage of `table` parameter in requests made to `ajax/comments.php`\n- Usage of `GLPI_FORCE_EMPTY_SQL_MODE` constant\n- Usage of `GLPI_PREVER` constant\n- Support of `doc_types`, `helpdesk_types` and `netport_types` keys in `Plugin::registerClass()`\n- `$CFG_GLPI['layout_excluded_pages']` entry\n- `$CFG_GLPI['transfers_id_auto']` entry\n- `$CFG_GLPI['use_ajax_autocompletion']` entry\n- `$DEBUG_AUTOLOAD` global variable\n- `$LOADED_PLUGINS` global variable\n- `$PHP_LOG_HANDLER` global variable\n- `$SQL_LOG_HANDLER` global variable\n- `CommonDBTM::notificationqueueonaction` property\n- `NotificationTarget::html_tags` property\n- `getAllDatasFromTable()`\n- `getRealQueryForTreeItem()`\n- `Ajax::createFixedModalWindow()`\n- `Ajax::createSlidePanel()`\n- `Calendar_Holiday::cloneCalendar()`\n- `Calendar::duplicate()`\n- `CalendarSegment::cloneCalendar()`\n- `Change::getCommonLeftJoin()`\n- `Change::getCommonSelect()`\n- `Change::showAnalysisForm()`\n- `Change::showPlanForm()`\n- `CommonDBTM::clone()`\n- `CommonDBTM::getRawName()`\n- `CommonDBTM::prepareInputForClone()`\n- `CommonDBTM::post_clone()`\n- `CommonDBTM::showDates()`\n- `CommonGLPI::isLayoutExcludedPage()`\n- `CommonGLPI::isLayoutWithMain()`\n- `CommonGLPI::showPrimaryForm()`\n- `CommonITILObject::displayHiddenItemsIdInput()`\n- `CommonITILObject::filterTimeline()`\n- `CommonITILObject::getActorIcon()`\n- `CommonITILObject::getSplittedSubmitButtonHtml()`\n- `CommonITILObject::showActorsPartForm()`\n- `CommonITILObject::showFormHeader()`\n- `CommonITILObject::showGroupsAssociated()`\n- `CommonITILObject::showSupplierAddFormOnCreate()`\n- `CommonITILObject::showSuppliersAssociated()`\n- `CommonITILObject::showTimeline()`\n- `CommonITILObject::showTimelineForm()`\n- `CommonITILObject::showTimelineHeader()`\n- `CommonITILObject::showUsersAssociated()`\n- `Computer_Item::cloneComputer()`\n- `Computer_Item::cloneItem()`\n- `Computer_SoftwareLicense` class\n- `Computer_SoftwareVersion` class\n- `ComputerAntivirus::cloneComputer()`\n- `Contract::cloneItem()`\n- `Contract_Item::cloneItem()`\n- `ContractCost::cloneContract()`\n- `Config::agreeDevMessage()`\n- `Config::checkWriteAccessToDirs()`\n- `Config::displayCheckExtensions()`\n- `Config::getCache()`\n- `DBMysql::affected_rows()`\n- `DBMysql::areTimezonesAvailable()`\n- `DBMysql::data_seek()`\n- `DBMysql::fetch_array()`\n- `DBMysql::fetch_assoc()`\n- `DBMysql::fetch_object()`\n- `DBMysql::fetch_row()`\n- `DBMysql::field_name()`\n- `DBMysql::free_result()`\n- `DBmysql::getTableSchema()`\n- `DBMysql::insert_id()`\n- `DBMysql::isMySQLStrictMode()`\n- `DBMysql::list_fields()`\n- `DBMysql::notTzMigrated()`\n- `DBMysql::num_fields()`\n- `DbUtils::getRealQueryForTreeItem()`\n- `Dropdown::getDropdownNetpoint()`\n- `DCBreadcrumb::showDcBreadcrumb()`\n- `Document_Item::cloneItem()`\n- `Entity::showSelector()`\n- `Glpi\\Marketplace\\Api\\Plugins::getNewPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getPopularPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getTopPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getTrendingPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getUpdatedPlugins()`\n- `Html::autocompletionTextField()`\n- `Html::displayImpersonateBanner()`\n- `Html::displayMainMenu()`\n- `Html::displayMenuAll()`\n- `Html::displayTopMenu()`\n- `Html::fileForRichText()`\n- `Html::generateImageName()`\n- `Html::imageGallery()`\n- `Html::jsDisable()`\n- `Html::jsEnable()`\n- `Html::nl2br_deep()`\n- `Html::replaceImagesByGallery()`\n- `Html::resume_name()`\n- `Html::setSimpleTextContent()`\n- `Html::setRichTextContent()`\n- `Html::showProfileSelecter()`\n- `Html::weblink_extract()`\n- `Infocom::cloneItem()`\n- `Itil_Project::cloneItilProject()`\n- `ITILFollowup::showApprobationForm()`\n- `ITILTemplate::getBeginHiddenFieldText()`\n- `ITILTemplate::getBeginHiddenFieldValue()`\n- `ITILTemplate::getEndHiddenFieldText()`\n- `ITILTemplate::getEndHiddenFieldValue()`\n- `Item_Devices::cloneItem()`\n- `Item_Disk::cloneItem()`\n- `Item_OperatingSystem::cloneItem()`\n- `Item_SoftwareLicense::cloneComputer()`\n- `Item_SoftwareLicense::cloneItem()`\n- `Item_SoftwareVersion::cloneComputer()`\n- `Item_SoftwareVersion::cloneItem()`\n- `Item_SoftwareVersion::showForComputer()`\n- `Item_SoftwareVersion::updateDatasForComputer()`\n- `KnowbaseItem_Item::cloneItem()`\n- `LevelAgreement::showForTicket()`\n- `NetworkPort::cloneItem()`\n- `Notepad::cloneItem()`\n- `NotificationTargetTicket::isAuthorMailingActivatedForHelpdesk()`\n- `Plugin::getGlpiPrever()`\n- `Plugin::isGlpiPrever()`\n- `Plugin::setLoaded()`\n- `Plugin::setUnloaded()`\n- `Plugin::setUnloadedByName()`\n- `Problem::getCommonLeftJoin()`\n- `Problem::getCommonSelect()`\n- `Problem::showAnalysisForm()`\n- `ProjectCost::cloneProject()`\n- `ProjectTeam::cloneProjectTask()`\n- `ProjectTask::cloneProjectTeam()`\n- `Reservation::displayReservationDay()`\n- `Reservation::displayReservationsForAnItem()`\n- `Search::isDeletedSwitch()`\n- `Ticket::getCommonLeftJoin()`\n- `Ticket::getCommonSelect()`\n- `Ticket::getTicketTemplateToUse()`\n- `Ticket::showDocumentAddButton()`\n- `Ticket_Ticket::displayLinkedTicketsTo()`\n- `TicketTemplate::getFromDBWithDatas()`\n- `Toolbox::canUseImapPop()`\n- `Toolbox::checkSELinux()`\n- `Toolbox::commonCheckForUseGLPI()`\n- `Toolbox::convertImageToTag()`\n- `Toolbox::decrypt()`\n- `Toolbox::doubleEncodeEmails()`\n- `Toolbox::encrypt()`\n- `Toolbox::getGlpiSecKey()`\n- `Toolbox::removeHtmlSpecialChars()`\n- `Toolbox::sanitize()`\n- `Toolbox::throwError()`\n- `Toolbox::unclean_html_cross_side_scripting_deep()`\n- `Toolbox::useCache()`\n- `Toolbox::userErrorHandlerDebug()`\n- `Toolbox::userErrorHandlerNormal()`\n- `Transfer::transferComputerSoftwares()`\n- `Update::declareOldItems()`\n- `User::showPersonalInformation()`\n\n## [9.5.7] 2022-01-27\n\n## [9.5.6] 2021-09-15\n\n### Changed\n\n- `X-Forwarded-For` header value is no longer used during API access controls, API requests passing through proxies may be refused for security reasons.\n\n### API changes\n\n#### Changed\n\n- All POST request made to `/ajax/` scripts are now requiring a valid CSRF token in their `X-Glpi-Csrf-Token` header.\nRequests done using jQuery are automatically including this header, from the moment that the page header is built using\n`Html::includeHeader()` method and the `js/common.js` script is loaded.\n\n#### Deprecated\n\n- Usage of \"followups\" option in `CommonITILObject::showShort()`\n- `CommonITILTask::showInObjectSumnary()`\n- `ITILFollowup::showShortForITILObject()`\n\n## [9.5.5] 2021-04-13\n\n### API changes\n\n#### Changed\n\n- Remove deprecation of `Search::getMetaReferenceItemtype()`\n\n## [9.5.4] 2021-03-02\n\n### Changed\n\n- `iframe` elements are not anymore allowed in rich text unless `GLPI_ALLOW_IFRAME_IN_RICH_TEXT` constant is defined to `true`\n\n### API changes\n\n#### Deprecated\n\n- `Search::getMetaReferenceItemtype()`\n\n## [9.5.3] 2020-11-25\n\n### Deprecated\n- Usage of alternative DB connection encoding (`DB::$dbenc` property).\n\n## [9.5.2] 2020-10-07\n\n### API changes\n\n#### Removed\n\n- Ability to use SQL expressions as string in criterion values in SQL iterator (replaced by usage of `QueryExpression`).\n- Ability to delete a plugin image using `/front/pluginimage.send.php` script.\n\n## [9.5.1] 2020-07-16\n\n## [9.5.0] 2020-07-07\n\n### Added\n\n- Encrypted file systems support.\n- Mails collected from suppliers can be marked as private on an entity basis.\n- Ability to add custom CSS in entity configuration.\n- CLI commands to enable and disable maintenance mode.\n- Operating system links on Monitors, Peripherals, Phones and Printers.\n- Add datacenter items to global search\n- Project task search options for Projects\n- Automatic action to purge closed tickets\n- Ability to automatically calculate project's percent done\n- Software link on Phones.\n- Add and answer approvals from timeline\n- Add lightbox with PhotoSwipe to timeline images\n- Ability to copy tasks while merging tickets\n- the API gives the ID of the user who logs in with initSession\n- Kanban view for projects\n- Network ports on Monitors\n- Add warning when there are unsaved changes in forms\n- Add ability to get information from the status endpoint in JSON format using Accept header\n- Add `glpi:system:status` CLI command for getting the GLPI status\n\n### Changed\n\n- PHP error_reporting and display_errors configuration directives are no longer overrided by GLPI, unless in debug mode (which forces reporting and display of all errors).\n- `scripts/migrations/racks_plugin.php` has been replaced by `glpi:migration:racks_plugin_to_core` command available using `bin/console`\n- Encryption alogithm improved using libsodium\n\n### API changes\n\n#### Added\n\n- Add translation functions `__()`,  `_n()`,  `_x()` and  `_nx()` in javascript in browser context.\n- `Migration::renameItemtype()` method to update of database schema/values when an itemtype class is renamed\n- Menu returned by `CommonGLPI::getMenuContent()` method override may now define an icon for each menu entry.\n- `CommonDBConnexity::getItemsAssociatedTo()` method to get the items associated to the given one\n- `CommonDBConnexity::getItemsAssociationRequest()` method to get the DB request to use to get the items associated to the given one\n- `CommonDBTM::clone()` method to clone the current item\n- `CommonDBTM::prepareInputForClone()` method to modify the input data that will be used for the cloning\n- `CommonDBTM::post_clone()` method to perform other steps after an item has been cloned (like clone the elements it is associated to)\n\n#### Changes\n\n- jQuery library has been upgraded from 2.2.x to 3.4.x. jQuery Migrate is used to ensure backward compatibility in most cases.\n- `DBmysqlIterator::handleOrderClause()` supports QueryExpressions\n- Use Laminas instead of deprecated ZendFramework\n- Database datetime fields have been replaced by timestamp fields to handle timezones support.\n- Database integer/float fields values are now returned as number instead of strings from DB read operations.\n- Field `domains_id` of Computer, NetworkEquipment and Printer has been dropped and data has been transfered into `glpi_domains_items` table.\n- Plugin status hook can now be used to provide an array with more information about the plugin's status the status of any child services.\n    - Returned array should contain a 'status' value at least (See status values in Glpi\\System\\Status\\StatusChecker)\n    - Old style returns are still supported\n\n#### Deprecated\n\n- `DBMysql::fetch_array()`\n- `DBMysql::fetch_row()`\n- `DBMysql::fetch_assoc()`\n- `DBMysql::fetch_object()`\n- `DBMysql::data_seek()`\n- `DBMysql::insert_id()`\n- `DBMysql::num_fields()`\n- `DBMysql::field_name()`\n- `DBMysql::list_fields()`\n- `DBMysql::affected_rows()`\n- `DBMysql::free_result()`\n- `DBMysql::isMySQLStrictMode()`\n- `getAllDatasFromTable` renamed to `getAllDataFromTable()`\n- Usage of `$order` parameter in `getAllDataFromTable()` (`DbUtils::getAllDataFromTable()`)\n- `Ticket::getTicketTemplateToUse()` renamed to `Ticket::getITILTemplateToUse()`\n- `TicketTemplate::getFromDBWithDatas()` renamed to `TicketTemplate::getFromDBWithData()` (inherited from `ITILTemplate`)\n- `Computer_SoftwareLicense` replaced by `Item_SoftwareLicense` and table `glpi_computers_softwarelicenses` renamed to `glpi_items_softwarelicenses`\n- `Computer_SoftwareVersion` replaced by `Item_SoftwareVersion` and table `glpi_computers_softwareversions` renamed to `glpi_items_softwareversions`\n- `Item_SoftwareVersion::updateDatasForComputer` renamed to `Item_SoftwareVersion::updateDatasForItem`\n- `Item_SoftwareVersion::showForComputer` renamed to `Item_SoftwareVersion::showForItem`\n- `Item_SoftwareVersion::softsByCategory` renamed to `Item_SoftwareVersion::softwareByCategory`\n- `Item_SoftwareVersion::displaySoftsByLicense` renamed to `Item_SoftwareVersion::displaySoftwareByLicense`\n- `Item_SoftwareVersion::cloneComputer` renamed to `Item_SoftwareVersion::cloneItem`\n- `Transfer::transferComputerSoftwares` renamed to `Transfer::transferItemSoftwares`\n- 'getRealQueryForTreeItem()'\n- ``getCommonSelect`` and ``getCommonLeftJoin()`` from ``Ticket``, ``Change`` and ``Problem`` are replaced with ``getCommonCriteria()`` compliant with db iterator\n- `Config::checkWriteAccessToDirs()`\n- `Config::displayCheckExtensions()`\n- `Toolbox::checkSELinux()`\n- `Toolbox::userErrorHandlerDebug()`\n- `Toolbox::userErrorHandlerNormal()`\n- `Html::jsDisable()`\n- `Html::jsEnable()`\n- `Plugin::setLoaded()`\n- `Plugin::setUnloaded()`\n- `Plugin::setUnloadedByName()`\n- Usage of `$LOADED_PLUGINS` global variable\n- `CommonDBTM::getRawName()` replaced by `CommonDBTM::getFriendlyName()`\n- `Calendar_Holiday::cloneCalendar()`\n- `CalendarSegment::cloneCalendar()`\n- `Computer_Item::cloneComputer()`\n- `Computer_Item::cloneItem()`\n- `ComputerAntivirus::cloneComputer()`\n- `Contract::cloneItem()`\n- `Contract_Item::cloneItem()`\n- `ContractCost::cloneContract()`\n- `Document_Item::cloneItem()`\n- `Infocom::cloneItem()`\n- `Item_Devices::cloneItem()`\n- `Item_Disk::cloneItem()`\n- `Item_OperatingSystem::cloneItem()`\n- `Item_SoftwareLicense::cloneComputer()`\n- `Item_SoftwareLicense::cloneItem()`\n- `Item_SoftwareVersion::cloneComputer()`\n- `Item_SoftwareVersion::cloneItem()`\n- `Itil_Project::cloneItilProject()`\n- `KnowbaseItem_Item::cloneItem()`\n- `NetworkPort::cloneItem()`\n- `Notepad::cloneItem()`\n- `ProjectCost::cloneProject()`\n- `ProjectTeam::cloneProjectTask()`\n- `ProjectTask::cloneProjectTeam()`\n- Usage of `GLPIKEY` constant\n- `Toolbox::encrypt()` and `Toolbox::decrypt()` because they use the old encryption algorithm\n\n#### Removed\n\n- Usage of string `$condition` parameter in `CommonDBTM::find()`\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()`\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()`\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n- `Plugin::hasBeenInit()`\n- 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n- `TicketFollowup`\n- `getDateRequest` and `DbUtils::getDateRequest()`\n- `Html::convertTagFromRichTextToImageTag()`\n- `Transfer::createSearchConditionUsingArray()`\n- Unused constants GLPI_FONT_FREESANS and GLPI_SCRIPT_DIR\n\n## [9.4.6] 2020-05-05\n\n## [9.4.5] 2019-12-18\n\n## [9.4.4] 2019-09-24\n\n### API changes\n\n#### Changes\n- For security reasons, autocompletion feature requires now to be authorized by a `'autocomplete' => true` flag in corresponding field search option.\n\n## [9.4.3] 2019-06-20\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Html::convertTagFromRichTextToImageTag()`\n\n## [9.4.2] 2019-04-11\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n\n## [9.4.1] 2019-03-15\n\n### API changes\n\n#### Added\n\n- new display hook `timeline_actions` to add new buttons to timeline forms\n- Ability to copy document links while merging tickets\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Plugin::hasBeenInit()`\n- Deprecate 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n\n#### Removed\n\n- Drop `CommonITILObject::showSolutions()`.\n\n## [9.4.0] 2019-02-11\n\n### Added\n\n- Ability to link project with problems and tickets.\n- Ability to specify creation and modification dates during CommonDBTM object add method\n- Add followups to Changes and Problems.\n- Add timeline to Changes and Problems.\n- CLI console to centralize CLI commands.\n- Search on devices from Printers and Network equipments.\n- Ability to merge and split tickets.\n- Search on devices from Printers and Network equipments.\n- Ability to specify creation and modification dates during CommonDBTM object add method.\n\n### Changed\n- `license_id` field in `glpi_items_operatingsystems` table has been renamed to `licenseid`\n- `olas_tto_id` field in `glpi_tickets` table has been renamed to `olas_id_tto`\n- `olas_ttr_id` field in `glpi_tickets` table has been renamed to `olas_id_ttr`\n- `ttr_olalevels_id` field in `glpi_tickets` table has been renamed to `olalevels_id_ttr`\n- `slas_tto_id` field in `glpi_tickets` table has been renamed to `slas_id_tto`\n- `slas_ttr_id` field in `glpi_tickets` table has been renamed to `slas_id_ttr`\n- `ttr_slalevels_id` field in `glpi_tickets` table has been renamed to `slalevels_id_ttr`\n- `scripts/add_creation_date.php` has been replaced by `glpi:migration:build_missing_timestamps` command available using `bin/console`\n- `scripts/checkdb.php` has been replaced by `glpi:database:check` command available using `bin/console`\n- `scripts/cliinstall.php` has been replaced by `glpi:database:install` command available using `bin/console`\n- `scripts/cliupdate.php` has been replaced by `glpi:database:update` command available using `bin/console`\n- `scripts/ldap_mass_sync.php` has been replaced by `glpi:ldap:synchronize_users` command available using `bin/console`\n- `scripts/innodb_migration.php` has been replaced by `glpi:migration:myisam_to_innodb` command available using `bin/console`\n- `scripts/unlock_tasks.php` has been replaced by `glpi:task:unlock` command available using `bin/console`\n\n### API changes\n\n#### Changes\n- Plugins are now loaded in ajax files.\n- `TicketFollowup` has been replaced by `ITILFollowup`\n- `$num` parameter has been removed from several `Search` class methods:\n   - `addSelect()`,\n   - `addOrderBy()`,\n   - `addHaving()`,\n   - `giveItem()`\n- `NotificationTarget::getMode()` visibility is now `public`.\n- Added `add_recipient_to_target` hook, triggered when a recipient is added to a notification.\n\n#### Deprecated\n\n- Remove `$CFG_GLPI['use_rich_text']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline_keep_replaced_tabs']` parameter. Will now be `false` per default.\n- Usage of `TicketFollowup` class has been deprecated.\n- Usage of string `$condition` parameter in `CommonDBTM::find()` has been deprecated.\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()` has been deprecated.\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()` has been deprecated.\n\nThe following methods have been deprecated:\n\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `Ticket::processMassiveActionsForOneItemtype()`\n- `Ticket::showFormMassiveAction()`\n- `Ticket::showMassiveActionsSubForm()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n\n#### Removed\n\n- Drop ability to use `JOIN` in `DBmysqlIterator::buildQuery()`\n- Drop `NotificationTarget::datas` property\n- Drop support of string `$filter` parameter in `Profileuser::getUserProfiles()`\n- Drop support of string `$condition` parameter in `User::getFromDBbyEmail()`\n- Drop support of string `$condition` parameter in `Group_User::getUserGroups()`\n- Drop support of string `$condition` parameter in `Group_User::getGroupUsers()`\n- Drop support of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`)\n- Drop support of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`)\n- Drop support of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`)\n- Drop ITIL Tasks, Followups and Solutions `showSummary()` and massive actions related methods that are replaced with timeline\n\n- Drop class alias `Event` for `Glpi\\Event`\n- Drop `Zend\\Loader\\SplAutoloader` interface\n- Drop all methods that have been deprecated in GLPI 9.2\n  - `_e()`\n  - `_ex()`\n  - `FieldExists()`\n  - `formatOutputWebLink()`\n  - `TableExists()`\n  - `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n  - `DBMysql::optimize_tables()`\n  - `NotificationTarget::addToAddressesList()`\n  - `NotificationTarget::getAdditionalTargets()`\n  - `NotificationTarget::getAddressesByGroup()`\n  - `NotificationTarget::getAddressesByTarget()`\n  - `NotificationTarget::getAdminAddress()`\n  - `NotificationTarget::getEntityAdminAddress()`\n  - `NotificationTarget::getItemAuthorAddress()`\n  - `NotificationTarget::getItemGroupAddress()`\n  - `NotificationTarget::getItemGroupSupervisorAddress()`\n  - `NotificationTarget::getItemGroupTechInChargeAddress()`\n  - `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n  - `NotificationTarget::getItemOwnerAddress()`\n  - `NotificationTarget::getItemTechnicianInChargeAddress()`\n  - `NotificationTarget::getNotificationTargets()`\n  - `NotificationTarget::getSpecificTargets()`\n  - `NotificationTarget::getUserByField()`\n  - `NotificationTarget::getUsersAddressesByProfile()`\n  - `NotificationTargetCommonITILObject::getDatasForObject()`\n  - `NotificationTargetCommonITILObject::getFollowupAuthor()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedUserByType()`\n  - `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n  - `NotificationTargetCommonITILObject::getRecipientAddress()`\n  - `NotificationTargetCommonITILObject::getSupplierAddress()`\n  - `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n  - `NotificationTargetCommonITILObject::getTaskAssignUser()`\n  - `NotificationTargetCommonITILObject::getTaskAuthor()`\n  - `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n  - `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `QueuedNotification::sendMailById()`\n  - `Ticket::convertContentForNotification()`\n  - `User::getPersonalToken()`\n  - `User::getUniquePersonalToken()`\n- Drop all methods that have been deprecated in GLPI 9.3.0\n  - `CommonDBTM::getFromDBByQuery()`\n  - `CommonDBTM::getSearchOptions()`\n  - `CommonDBTM::getSearchOptionsNew()`\n  - `CommonDBTM::getSearchOptionsToAddNew()`\n  - `CommonITILObject::getStatusIconURL()`\n  - `DBMysql::list_tables()`\n  - `Dropdown::showPrivatePublicSwitch()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `Search::constructDatas()`\n  - `Search::displayDatas()`\n  - `Transfer::transferComputerDisks()`\n- Drop all methods that have been deprecated in GLPI 9.3.1\n  - `ComputerVirtualMachine::getUUIDRestrictRequest()`\n  - `Config::getSQLMode()`\n  - `DBMysql::checkForCrashedTables()`\n  - `Html::checkAllAsCheckbox()`\n  - `Html::scriptEnd()`\n  - `Html::scriptStart()`\n  - `Plugin::isAllPluginsCSRFCompliant()`\n  - `Profile::getUnderActiveProfileRestrictRequest()`\n  - `Toolbox::is_a()`\n- Drop all constants that have been deprecated in GLPI 9.3.1\n  - `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n  - `CommonDBTM::HAS_DUPLICATE`\n  - `CommonDBTM::NOTHING_TO_DO`\n  - `CommonDBTM::SUCCESS`\n  - `CommonDBTM::TYPE_MISMATCH`\n- Drop all methods that have been deprecated in GLPI 9.3.2\n - `ITILSolution::removeForItem()`\n - `Session::isViewAllEntities()`\n\n## [9.3.3] 2018-11-27\n\n### Changed\n\n- Fix some cache issues\n- Fix reservation tab of an item\n- Fix actors notifications massive action\n- Improve racks plugins migration script\n\n### API changes\n\nNo API changes.\n\n## [9.3.2] 2018-10-26\n\n### API changes\n\n#### Changed\n\n- `Rule::executePluginsActions()` signature has changed\n- Javascript function `formatResult()` has been renamed to `templateResult()`\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonITILTask::displayTabContentForItem()`\n- `CommonITILTask::showFormMassiveAction()`\n- `CommonITILTask::showSummary()`\n- `ITILSolution::displayTabContentForItem()`\n- `ITILSolution::removeForItem()`\n- `ITILSolution::showSummary()`\n- `Session::isViewAllEntities()`\n- `TicketFollowup::processMassiveActionsForOneItemtype()`\n- `TicketFollowup::showFormMassiveAction()`\n- `TicketFollowup::showMassiveActionsSubForm()`\n- `TicketFollowup::showSummary()`\n- `Plugin::removeFromSession()`\n\n## [9.3.1] 2018-09-12\n\n### Added\n- List receivers folders to choose imported/refused folders\n\n### API changes\n\n#### Deprecated\n\n- Usage of string `$condition` parameter in `Group_User::getUserGroups()` has been deprecated\n- Usage of string `$condition` parameter in `Group_User::getGroupUsers()` has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`) has been deprecated\n- Usage of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`) has been deprecated\n\nThe following methods have been deprecated:\n\n- `Config::getSQLMode()`\n- `DBMysql::checkForCrashedTables()`\n- `Html::checkAllAsCheckbox()`\n- `Html::scriptEnd()`\n- `Html::scriptStart()`\n- `Toolbox::is_a()`\n- `ComputerVirtualMachine::getUUIDRestrictRequest()`\n- `Plugin::isAllPluginsCSRFCompliant()`\n- `Profile::getUnderActiveProfileRestrictRequest()`\n\nThe following constants have been deprecated:\n- `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n- `CommonDBTM::HAS_DUPLICATE`\n- `CommonDBTM::NOTHING_TO_DO`\n- `CommonDBTM::SUCCESS`\n- `CommonDBTM::TYPE_MISMATCH`\n\n## [9.3.0] 2018-06-28\n\n### Added\n- Add DCIM management\n- Add OSM view to set locations and on Search\n- Add login source selection\n- Add logs purge\n- Filter in items logs\n\n### Changed\n- Switch MySQL engine from MyIsam to Innodb\n- Rework solutions for Tickets, Problems and Changes to support history\n- Disks can be attached to network equipments and printers\n\n### API changes\n\n#### Changes\n- Added `DB::insert()`, `DB::update()` and `DB::delete()` to replace raw SQL queries\n- `CommonITILObject::showMassiveSolutionForm()` now takes a `CommonITILObject` as argument\n- `Profileuser::getUserProfiles()` `$filter` parameter is now an array\n- `User::getFromDBbyEmail()` `$condition` parameter is now an array\n- Select2 javascript component has been upgraded to 4.0 version, see [Migrating from Select2 3.5](https://select2.org/upgrading/migrating-from-35)\n- `CommonDevice::getItem_DeviceType()` has a new optional `$devicetype` parameter\n\n#### Deprecated\n\n- Usage of string `$filter` parameter in `Profileuser::getUserProfiles()` has been deprecated\n- Usage of string `$condition` parameter in `User::getFromDBbyEmail()` has been deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getFromDBByQuery()`\n- `CommonDBTM::getSearchOptions()`\n- `CommonDBTM::getSearchOptionsNew()`\n- `CommonDBTM::getSearchOptionsToAddNew()`\n- `CommonITILObject::getStatusIconURL()`\n- `DBMysql::list_tables()`\n- `Dropdown::showPrivatePublicSwitch()`\n- `NotificationTargetProject::getTeamContacts()`\n- `NotificationTargetProject::getTeamGroups()`\n- `NotificationTargetProject::getTeamSuppliers()`\n- `NotificationTargetProject::getTeamUsers()`\n- `Search::constructDatas()`\n- `Search::displayDatas()`\n- `Transfer::transferComputerDisks()`\n\n#### Removed\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- PHPCas library is no longer provided (for licensing issues)\n\n## [9.2.4] 2018-06-21\n\n## [9.2.3] 2018-04-27\n\n## [9.2.2] 2018-03-01\n\n\n### Deprecated\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- `DBMysql::optimize_tables()`\n\n## [9.2.1] 2017-11-16\n\n### Added\n\n- Search engine, added ``itemtype_item_revert`` jointype\n\n### Deprecated\n\n- `Ticket::convertContentForNotification()`\n\n## [9.2] 2017-09-25\n\n### Added\n- Link knowledge base entries with assets or tickets\n- Revisions on knowledge base entries and their translations, with diff view\n- Add recursive comments on knowledge base entries\n- Direct links to KB article's title for a direct access\n- Load minified CSS and JS files (core and plugins) that are generated on release\n- Link beetween software licenses\n- Alerts on saved searches\n- Add ajax browsers notifications in addition to emails\n- Plugins can now add new notifications types (xmpp, sms, telegram, ...) to be used along with standard notifications\n- Simcard component\n- Synchronization field for LDAP\n- Improved performances on large entities databases\n- Remember me on login\n- Fuzzy search\n- Paste images in rich text editor\n- Add tasks in tickets templates\n- Composite tickets (link on sons/parents)\n- Telemetry\n- Certificates component\n- Firmwares components (BIOSes, firwmwares, ...)\n- Add OLA management\n\n### Changed\n- Many bugs have been fixed\n- Display knowledge base category items in tickets using a popup instead of a\nnew whole window\n- Reviewed all richtext editor (tinymce) and their upload parts, now more simpler and intuitive\n- Don't ask user to select a template if there is no configured template\n- personal_token is not used anymore for api authentication, a new api_token field has been added (empty by default, you should regenerate it)\n- Operating systems management has been improved\n- Direct language change from any page\n- Better icons harmonization\n\n### API changes\n\n#### Changes\n\n- `CommonDBTM::getTable()` signature has changed\n- `User::getFromDBbyToken()` signature has changed\n- `Bookmark` has been renamed to `SavedSearch`\n- Update to latest jsTree plugin\n- `RuleDictionnarySoftwareCollection::versionExists()` signature has changed\n- `NotificationTemplate::getDataToSend()` signature has changed\n- `QueuedMail` has been renamed to `QueuedNotification`\n- `CommonDBTM::mailqueueonaction` has been renamed to `CommonDBTM::notificationqueueonaction`\n- `NotificationTarget::getSender()` no longer takes any parameters (was not used)\n- `TableExists()` has been moved to `DBMysql::tableExists()`\n- `FieldExists()` has been moved to `DBMysql::fieldExists()`\n- `Profile_User::getUserEntitiesForRight()` signature has changed\n- `NotificationTarget` property `datas` has been renamed to `data`\n\n#### Deprecated\n\n- Ability to use `JOIN` in `DBmysqlIterator::buildQuery()` has been deprecated\n- Usage of `NotificationTarget::datas` property has been deprecated\n- Usage of `Zend\\Loader\\SplAutoloader` interface has been deprecated\n\nThe following methods have been deprecated:\n\n- `_e()`\n- `_ex()`\n- `Bookmark::mark_default()`\n- `Bookmark::unmark_default()`\n- `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n- `NotificationTarget::addToAddressesList()`\n- `NotificationTarget::getAdditionalTargets()`\n- `NotificationTarget::getAddressesByGroup()`\n- `NotificationTarget::getAddressesByTarget()`\n- `NotificationTarget::getAdminAddress()`\n- `NotificationTarget::getEntityAdminAddress()`\n- `NotificationTarget::getItemAuthorAddress()`\n- `NotificationTarget::getItemGroupAddress()`\n- `NotificationTarget::getItemGroupSupervisorAddress()`\n- `NotificationTarget::getItemGroupTechInChargeAddress()`\n- `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n- `NotificationTarget::getItemOwnerAddress()`\n- `NotificationTarget::getItemTechnicianInChargeAddress()`\n- `NotificationTarget::getNotificationTargets()`\n- `NotificationTarget::getSpecificTargets()`\n- `NotificationTarget::getUserByField()`\n- `NotificationTarget::getUsersAddressesByProfile()`\n- `NotificationTargetCommonITILObject::getDatasForObject()`\n- `NotificationTargetCommonITILObject::getFollowupAuthor()`\n- `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedUserByType()`\n- `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n- `NotificationTargetCommonITILObject::getRecipientAddress()`\n- `NotificationTargetCommonITILObject::getSupplierAddress()`\n- `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n- `NotificationTargetCommonITILObject::getTaskAssignUser()`\n- `NotificationTargetCommonITILObject::getTaskAuthor()`\n- `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n- `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n- `NotificationTargetProjectTask::getTeamContacts()`\n- `NotificationTargetProjectTask::getTeamGroups()`\n- `NotificationTargetProjectTask::getTeamSuppliers()`\n- `NotificationTargetProjectTask::getTeamUsers()`\n- `QueuedNotification::sendMailById()`\n- `User::getPersonalToken()`\n- `User::getUniquePersonalToken()`\n- `formatOutputWebLink()`\n\n#### Removals\n\nThe following methods have been dropped:\n\n- `Ajax::displaySearchTextForDropdown()`\n- `Ajax::getSearchTextForDropdown()`\n- `Bookmark::changeBookmarkOrder()`\n- `Bookmark::moveBookmark()`\n- `CommonGLPI::addDivForTabs()`\n- `CommonGLPI::showTabs()`\n- `CommonGLPI::showNavigationHeaderOld()`\n- `CommonGLPI::show()`\n- `Dropdown::showInteger()`\n- `DBMysql::field_flags()`\n- `Html::showDateFormItem()`\n- `Html::showDateTimeFormItem()`\n- `Profile::dropdownNoneReadWrite()`\n- `Toolbox::get_magic_quotes_runtime()`\n- `Toolbox::get_magic_quotes_gpc()`\n- `Dropdown::showAllItems()`\n\nFor older entries, please check [GLPI website](http://glpi-project.org).\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\RichText\\RichText;\nuse Glpi\\Toolbox\\Sanitizer;\nuse Glpi\\Toolbox\\URL;\n\n// $feed = new SimplePie();\n// $feed->set_cache_location('../files/_rss');\n// $feed->set_cache_duration(3600);\n// $feed->set_feed_url('http://linuxfr.org/news.atom');\n// $feed->force_feed(true);\n// // Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and\n// // all that other good stuff.  The feed's information will not be available to SimplePie before\n// // this is called.\n// $success = $feed->init();\n//\n// // We'll make sure that the right content type and character encoding gets set automatically.\n// // This function will grab the proper character encoding, as well as set the content type to text/html.\n// $feed->handle_content_type();\n// if ($feed->error())\n// {\n//    echo \"ERROR\";\n// } else {\n//    echo $feed->get_title();\n//    echo $feed->get_link();\n// }\n\n/**\n * RSSFeed Class\n *\n * @since 0.84\n **/\nclass RSSFeed extends CommonDBVisible implements ExtraVisibilityCriteria\n{\n   // From CommonDBTM\n    public $dohistory                   = true;\n\n    public static $rightname    = 'rssfeed_public';\n\n    const PERSONAL = 128;\n\n    public static function getTypeName($nb = 0)\n    {\n\n        if (Session::haveRight('rssfeed_public', READ)) {\n            return _n('RSS feed', 'RSS feed', $nb);\n        }\n        return _n('Personal RSS feed', 'Personal RSS feed', $nb);\n    }\n\n\n    public static function canCreate()\n    {\n\n        return (Session::haveRightsOr(self::$rightname, [CREATE, self::PERSONAL]));\n    }\n\n\n    public static function canView()\n    {\n\n        return (Session::haveRightsOr(self::$rightname, [READ, self::PERSONAL]));\n    }\n\n\n    public function canViewItem()\n    {\n\n       // Is my rssfeed or is in visibility\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', READ)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function canCreateItem()\n    {\n       // Is my rssfeed\n        return ($this->fields['users_id'] == Session::getLoginUserID());\n    }\n\n\n    public function canUpdateItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', UPDATE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canUpdate()\n    {\n        return (Session::haveRightsOr(self::$rightname, [UPDATE, self::PERSONAL]));\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canPurge()\n    {\n        return (Session::haveRightsOr(self::$rightname, [PURGE, self::PERSONAL]));\n    }\n\n\n    /**\n     * @since 0.85\n     *\n     * @see CommonDBTM::canPurgeItem()\n     **/\n    public function canPurgeItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight(self::$rightname, PURGE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function post_getFromDB()\n    {\n\n       // Users\n        $this->users    = RSSFeed_User::getUsers($this->fields['id']);\n\n       // Entities\n        $this->entities = Entity_RSSFeed::getEntities($this->fields['id']);\n\n       // Group / entities\n        $this->groups   = Group_RSSFeed::getGroups($this->fields['id']);\n\n       // Profile / entities\n        $this->profiles = Profile_RSSFeed::getProfiles($this->fields['id']);\n    }\n\n\n    /**\n     * @see CommonDBTM::cleanDBonPurge()\n     **/\n    public function cleanDBonPurge()\n    {\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Entity_RSSFeed::class,\n                Group_RSSFeed::class,\n                Profile_RSSFeed::class,\n                RSSFeed_User::class,\n            ]\n        );\n    }\n\n    public function haveVisibilityAccess()\n    {\n        if (!self::canView()) {\n            return false;\n        }\n\n        return parent::haveVisibilityAccess();\n    }\n\n    /**\n     * Return visibility joins to add to SQL\n     *\n     * @param $forceall force all joins (false by default)\n     *\n     * @return string joins to add\n     **/\n    public static function addVisibilityJoins($forceall = false)\n    {\n       //not deprecated because used in Search\n        global $DB;\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['WHERE']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = str_replace(\n            'SELECT * FROM ' . $DB->quoteName(self::getTable()) . ' ',\n            '',\n            $sql\n        );\n        return $sql;\n    }\n\n\n    /**\n     * Return visibility SQL restriction to add\n     *\n     * @return string restrict to add\n     **/\n    public static function addVisibilityRestrict()\n    {\n       //not deprecated because used in Search\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['LEFT JOIN']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = preg_replace('/.*WHERE /', '', $sql);\n\n        return $sql;\n    }\n\n    /**\n     * Return visibility joins to add to DBIterator parameters\n     *\n     * @since 9.4\n     *\n     * @param boolean $forceall force all joins (false by default)\n     *\n     * @return array\n     */\n    public static function getVisibilityCriteria(bool $forceall = false): array\n    {\n        $where = [self::getTable() . '.users_id' => Session::getLoginUserID()];\n        $join = [];\n\n        if (!self::canView()) {\n            return [\n                'LEFT JOIN' => $join,\n                'WHERE'     => $where\n            ];\n        }\n\n       //JOINs\n       // Users\n        $join['glpi_rssfeeds_users'] = [\n            'ON' => [\n                'glpi_rssfeeds_users'   => 'rssfeeds_id',\n                'glpi_rssfeeds'         => 'id'\n            ]\n        ];\n\n        $where = [\n            'OR' => [\n                self::getTable() . '.users_id'   => Session::getLoginUserID(),\n                'glpi_rssfeeds_users.users_id'   => Session::getLoginUserID()\n            ]\n        ];\n        $orwhere = [];\n\n       // Groups\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"]))\n        ) {\n            $join['glpi_groups_rssfeeds'] = [\n                'ON' => [\n                    'glpi_groups_rssfeeds'  => 'rssfeeds_id',\n                    'glpi_rssfeeds'         => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_groups_rssfeeds', '', '', true);\n            $orwhere[] = [\n                'glpi_groups_rssfeeds.groups_id' => count($_SESSION[\"glpigroups\"])\n                                                      ? $_SESSION[\"glpigroups\"]\n                                                      : [-1],\n                'OR' => [\n                    'glpi_groups_rssfeeds.no_entity_restriction' => 1,\n                ] + $restrict\n            ];\n        }\n\n       // Profiles\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveprofile\"])\n              && isset($_SESSION[\"glpiactiveprofile\"]['id']))\n        ) {\n            $join['glpi_profiles_rssfeeds'] = [\n                'ON' => [\n                    'glpi_profiles_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveprofile\"]) && isset($_SESSION[\"glpiactiveprofile\"]['id'])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true);\n            if (!count($restrict)) {\n                $restrict = [true];\n            }\n            $ors = [\n                'glpi_profiles_rssfeeds.no_entity_restriction' => 1,\n                $restrict\n            ];\n\n            $orwhere[] = [\n                'glpi_profiles_rssfeeds.profiles_id' => $_SESSION[\"glpiactiveprofile\"]['id'],\n                'OR' => $ors\n            ];\n        }\n\n       // Entities\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"]))\n        ) {\n            $join['glpi_entities_rssfeeds'] = [\n                'ON' => [\n                    'glpi_entities_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"])) {\n           // Force complete SQL not summary when access to all entities\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true, true);\n            if (count($restrict)) {\n                $orwhere[] = $restrict;\n            }\n        }\n\n        $where['OR'] = array_merge($where['OR'], $orwhere);\n        $criteria = ['LEFT JOIN' => $join];\n        if (count($where)) {\n            $criteria['WHERE'] = $where;\n        }\n\n        return $criteria;\n    }\n\n    /**\n     * @param $field\n     * @param $values\n     * @param $options   array\n     **/\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'refresh_rate':\n                return Html::timestampToString($values[$field], false);\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n\n    /**\n     * @param $field\n     * @param $name               (default '')\n     * @param $values             (default '')\n     * @param $options      array\n     **/\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n\n        switch ($field) {\n            case 'refresh_rate':\n                return Planning::dropdownState($name, $values[$field], false);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n            'forcegroupby'       => true,\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => 'glpi_users',\n            'field'              => 'name',\n            'name'               => __('Creator'),\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n            'right'              => 'all'\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'url',\n            'name'               => __('URL'),\n            'datatype'           => 'string',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'have_error',\n            'name'               => __('Error'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => $this->getTable(),\n            'field'              => 'max_items',\n            'name'               => __('Number of items displayed'),\n            'datatype'           => 'number',\n            'min'                => 5,\n            'max'                => 100,\n            'step'               => 5,\n            'toadd'              => [1],\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'refresh_rate',\n            'name'               => __('Refresh rate'),\n            'datatype'           => 'timestamp',\n            'min'                => HOUR_TIMESTAMP,\n            'max'                => DAY_TIMESTAMP,\n            'step'               => HOUR_TIMESTAMP,\n            'toadd'              => [\n                5 * MINUTE_TIMESTAMP,\n                15 * MINUTE_TIMESTAMP,\n                30 * MINUTE_TIMESTAMP,\n                45 * MINUTE_TIMESTAMP\n            ],\n            'display_emptychoice' => false,\n            'massiveaction'      => true,\n            'searchtype'         => 'equals'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        return $tab;\n    }\n\n\n    /**\n     * @see CommonGLPI::getTabNameForItem()\n     **/\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (self::canView()) {\n            $nb = 0;\n            switch ($item->getType()) {\n                case 'RSSFeed':\n                    $showtab = [1 => __('Content')];\n                    if (Session::haveRight('rssfeed_public', UPDATE)) {\n                        if ($_SESSION['glpishow_count_on_tabs']) {\n                            $nb = $item->countVisibilities();\n                        }\n                        $showtab[2] = self::createTabEntry(_n(\n                            'Target',\n                            'Targets',\n                            Session::getPluralNumber()\n                        ), $nb);\n                    }\n                    return $showtab;\n            }\n        }\n        return '';\n    }\n\n\n    /**\n     * @see CommonGLPI::defineTabs()\n     **/\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    /**\n     * @param $item         CommonGLPI object\n     * @param $tabnum       (default 1)\n     * @param $withtemplate (default 0)\n     **/\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case 'RSSFeed':\n                switch ($tabnum) {\n                    case 1:\n                        $item->showFeedContent();\n                        return true;\n\n                    case 2:\n                        $item->showVisibility();\n                        return true;\n                }\n        }\n        return false;\n    }\n\n    public function prepareInputForAdd($input)\n    {\n        if (!$this->checkUrlInput($input['url'])) {\n            return false;\n        }\n\n        if ($feed = self::getRSSFeed($input['url'])) {\n            $input['have_error'] = 0;\n            $input['name']       = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        } else {\n            $input['have_error'] = 1;\n            $input['name']       = '';\n        }\n        $input[\"name\"] = trim($input[\"name\"]);\n\n        if (empty($input[\"name\"])) {\n            $input[\"name\"] = __('Without title');\n        }\n        return $input;\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n        if (array_key_exists('url', $input) && !$this->checkUrlInput($input['url'])) {\n            return false;\n        }\n\n        if (\n            empty($input['name'])\n            && isset($input['url'])\n            && ($feed = self::getRSSFeed($input['url']))\n        ) {\n            $input['name'] = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        }\n        return $input;\n    }\n\n    /**\n     * Check URL given in input.\n     * @param string $url\n     * @return bool\n     */\n    private function checkUrlInput(string $url): bool\n    {\n        if (parse_url($url) === false) {\n            Session::addMessageAfterRedirect(__('Feed URL is invalid.'), false, ERROR);\n            return false;\n        } elseif (!Toolbox::isUrlSafe($url)) {\n            Session::addMessageAfterRedirect(sprintf(__('URL \"%s\" is not allowed by your administrator.'), $url), false, ERROR);\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public function pre_updateInDB()\n    {\n\n       // Set new user if initial user have been deleted\n        if (\n            ($this->fields['users_id'] == 0)\n            && ($uid = Session::getLoginUserID())\n        ) {\n            $this->fields['users_id'] = $uid;\n            $this->updates[]          = \"users_id\";\n        }\n    }\n\n\n    public function post_getEmpty()\n    {\n\n        $this->fields[\"name\"]         = __('New note');\n        $this->fields[\"users_id\"]     = Session::getLoginUserID();\n        $this->fields[\"refresh_rate\"] = DAY_TIMESTAMP;\n        $this->fields[\"max_items\"]    = 20;\n    }\n\n\n    /**\n     * Print the rssfeed form\n     *\n     * @param $ID        integer  Id of the item to print\n     * @param $options   array    of possible options:\n     *     - target filename : where to go when done.\n     **/\n    public function showForm($ID, array $options = [])\n    {\n       // Test _rss cache directory. I permission trouble : unable to edit\n        if (Toolbox::testWriteAccessToDirectory(GLPI_RSS_DIR) > 0) {\n            echo \"<div class='center'>\";\n            printf(__('Check permissions to the directory: %s'), GLPI_RSS_DIR);\n            echo \"<p class='red b'>\" . __('Error') . \"</p>\";\n            echo \"</div>\";\n            return false;\n        }\n\n        $this->initForm($ID, $options);\n\n        $this->showFormHeader($options);\n\n        $rowspan = 4;\n\n        if (!$this->isNewID($ID)) {\n           // Force getting feed :\n            $feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate']);\n            if (!$feed || $feed->error()) {\n                $this->setError(true);\n            } else {\n                $this->setError(false);\n            }\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Name') . \"</td>\";\n            echo \"<td>\";\n            echo Html::input('name', ['value' => $this->fields['name']]);\n            echo \"</td><td colspan ='2'>&nbsp;</td></tr>\\n\";\n        }\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('URL') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='url' size='100' value='\" . $this->fields[\"url\"] . \"' class='form-control'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('By') . \"</td>\";\n        echo \"<td>\";\n        echo getUserName($this->fields[\"users_id\"]);\n        echo \"<input type='hidden' name='users_id' value='\" . $this->fields['users_id'] . \"'>\\n\";\n        echo \"</td>\";\n        echo \"<td rowspan='$rowspan'>\" . __('Comments') . \"</td>\";\n        echo \"<td rowspan='$rowspan' class='middle'>\";\n        echo \"<textarea  class='form-control' rows='\" . ($rowspan + 3) . \"' name='comment' >\" . $this->fields[\"comment\"] .\n           \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Active') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('is_active', $this->fields['is_active']);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Refresh rate') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showTimeStamp(\n            \"refresh_rate\",\n            ['value'                => $this->fields[\"refresh_rate\"],\n                'min'                  => HOUR_TIMESTAMP,\n                'max'                  => DAY_TIMESTAMP,\n                'step'                 => HOUR_TIMESTAMP,\n                'display_emptychoice'  => false,\n                'toadd'                => [5 * MINUTE_TIMESTAMP,\n                    15 * MINUTE_TIMESTAMP,\n                    30 * MINUTE_TIMESTAMP,\n                    45 * MINUTE_TIMESTAMP\n                ]\n            ]\n        );\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Number of items displayed') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"max_items\", ['value'                => $this->fields[\"max_items\"],\n            'min'                  => 5,\n            'max'                  => 100,\n            'step'                 => 5,\n            'toadd'                => [1],\n            'display_emptychoice'  => false\n        ]);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Error retrieving RSS feed') . \"</td>\";\n        echo \"<td>\";\n        if ($this->fields['have_error'] && !Toolbox::isUrlSafe($this->fields['url'])) {\n            echo sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url']);\n        } else {\n            echo Dropdown::getYesNo($this->fields['have_error']);\n        }\n        echo \"</td>\";\n        if ($this->fields['have_error']) {\n            echo \"<td>\" . __('RSS feeds found');\n            echo \"</td><td>\";\n            $this->showDiscoveredFeeds();\n            echo \"</td>\\n\";\n        } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Set error field\n     *\n     * @param $error   (false by default\n     **/\n    public function setError($error = false)\n    {\n\n        if (!isset($this->fields['id']) && !isset($this->fields['have_error'])) {\n            return;\n        }\n\n       // Set error if not set\n        if ($error && !$this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 1\n            ]);\n        }\n       // Unset error if set\n        if (!$error && $this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 0\n            ]);\n        }\n    }\n\n\n    /**\n     * Show the feed content\n     **/\n    public function showFeedContent()\n    {\n\n        if (!$this->canViewItem()) {\n            return false;\n        }\n        $rss_feed = [\n            'items'  => []\n        ];\n        echo \"<div class='firstbloc'>\";\n        if ($feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate'])) {\n            $this->setError(false);\n            $rss_feed['title'] = $feed->get_title();\n            foreach ($feed->get_items(0, $this->fields['max_items']) as $item) {\n                $rss_feed['items'][] = [\n                    'title'     => $item->get_title(),\n                    'link'      => URL::sanitizeURL($item->get_permalink()),\n                    'timestamp' => Html::convDateTime($item->get_date('Y-m-d H:i:s')),\n                    'content'   => RichText::getSafeHtml($item->get_content()),\n                ];\n            }\n        } else {\n            $rss_feed['error'] = !Toolbox::isUrlSafe($this->fields['url'])\n                ? sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url'])\n                : __('Error retrieving RSS feed');\n            $this->setError(true);\n        }\n\n        TemplateRenderer::getInstance()->display('components/rss_feed.html.twig', [\n            'rss_feed'  => $rss_feed\n        ]);\n    }\n\n\n    /**\n     * Show discovered feeds\n     *\n     * @return void\n     **/\n    public function showDiscoveredFeeds()\n    {\n        if (!Toolbox::isUrlSafe($this->fields['url'])) {\n            return;\n        }\n\n        $feed = new SimplePie();\n        $feed->set_cache_location(GLPI_RSS_DIR);\n        $feed->enable_cache(false);\n        $feed->set_feed_url($this->fields['url']);\n        $feed->init();\n        $feed->handle_content_type();\n\n        if ($feed->error()) {\n            return;\n        }\n\n        foreach ($feed->get_all_discovered_feeds() as $f) {\n            $newurl  = $f->url;\n            $newfeed = self::getRSSFeed($newurl);\n            if ($newfeed && !$newfeed->error()) {\n                $link = URL::sanitizeURL($newfeed->get_permalink());\n                if (!empty($link)) {\n                     echo \"<a href='$newurl'>\" . $newfeed->get_title() . \"</a>&nbsp;\";\n                     Html::showSimpleForm(\n                         $this->getFormURL(),\n                         'update',\n                         _x('button', 'Use'),\n                         ['id'  => $this->getID(),\n                             'url' => $newurl\n                         ]\n                     );\n                     echo \"<br>\";\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Get a specific RSS feed.\n     *\n     * @param string    $url            URL of the feed or array of URL\n     * @param int       $cache_duration Cache duration, in seconds\n     *\n     * @return SimplePie|false\n     **/\n    public static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP)\n    {\n        global $GLPI_CACHE;\n\n        if (Sanitizer::isHtmlEncoded($url)) {\n            $url = Sanitizer::decodeHtmlSpecialChars($url);\n        }\n\n        // Fetch feed data, unless it is already cached\n        $cache_key = sha1($url);\n        $update_cache = false;\n        if (($raw_data = $GLPI_CACHE->get($cache_key)) === null) {\n            if (!Toolbox::isUrlSafe($url)) {\n                return false;\n            }\n\n            $error_msg  = null;\n            $curl_error = null;\n            $raw_data = Toolbox::callCurl($url, [], $error_msg, $curl_error, true);\n            if (empty($raw_data)) {\n                return false;\n            }\n\n            $doc = new DOMDocument();\n            if (!@$doc->loadXML($raw_data)) {\n                // Prevent exception on invalid XML (see https://github.com/simplepie/simplepie/pull/747)\n                return false;\n            }\n\n            $update_cache = true;\n        }\n\n        $feed = new SimplePie();\n        $feed->enable_cache(false);\n        $feed->set_raw_data($raw_data);\n        $feed->force_feed(true);\n        // Initialize the whole SimplePie object. Read the feed, process it, parse it, cache it, and\n        // all that other good stuff. The feed's information will not be available to SimplePie before\n        // this is called.\n        $feed->init();\n\n        if ($feed->error()) {\n            return false;\n        }\n\n        if ($update_cache) {\n            $GLPI_CACHE->set($cache_key, $raw_data, $cache_duration);\n        }\n\n        return $feed;\n    }\n\n\n    /**\n     * Show list for central view\n     *\n     * @param $personal boolean   display rssfeeds created by me ?\n     * @param $personal $display  if false, return html\n     *\n     * @return void\n     **/\n    public static function showListForCentral(bool $personal = true, bool $display = true)\n    {\n        global $DB, $CFG_GLPI;\n\n        $users_id             = Session::getLoginUserID();\n\n        $table = self::getTable();\n        $criteria = [\n            'SELECT'   => \"$table.*\",\n            'DISTINCT' => true,\n            'FROM'     => $table,\n            'ORDER'    => \"$table.name\"\n        ];\n\n        if ($personal) {\n           /// Personal notes only for central view\n            if (Session::getCurrentInterface() == 'helpdesk') {\n                return false;\n            }\n\n            $criteria['WHERE'][\"$table.users_id\"] = $users_id;\n            $criteria['WHERE'][\"$table.is_active\"] = 1;\n\n            $titre = \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php'>\" .\n                    _n('Personal RSS feed', 'Personal RSS feeds', Session::getPluralNumber()) . \"</a>\";\n        } else {\n           // Show public rssfeeds / not mines : need to have access to public rssfeeds\n            if (!self::canView()) {\n                return false;\n            }\n\n            $criteria = $criteria + self::getVisibilityCriteria();\n\n           // Only personal on central so do not keep it\n            if (Session::getCurrentInterface() == 'central') {\n                $criteria['WHERE'][\"$table.users_id\"] = ['<>', $users_id];\n            }\n\n            if (Session::getCurrentInterface() == 'central') {\n                $titre = \"<a href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php\\\">\" .\n                       _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber()) . \"</a>\";\n            } else {\n                $titre = _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber());\n            }\n        }\n\n        $iterator = $DB->request($criteria);\n        $nb = count($iterator);\n        $items   = [];\n        $rssfeed = new self();\n        foreach ($iterator as $data) {\n            if ($rssfeed->getFromDB($data['id'])) {\n               // Force fetching feeds\n                if ($feed = self::getRSSFeed($data['url'], $data['refresh_rate'])) {\n                    // Store feeds in array of feeds\n                    $items = array_merge($items, $feed->get_items(0, $data['max_items']));\n                    $rssfeed->setError(false);\n                } else {\n                    $rssfeed->setError(true);\n                }\n            }\n        }\n\n        $output = \"\";\n        $output .= \"<table class='table table-striped table-hover card-table'>\";\n        $output .= \"<thead>\";\n        $output .= \"<tr class='noHover'><th colspan='2'><div class='relative'><span>$titre</span>\";\n\n        if (\n            ($personal && self::canCreate())\n            || (!$personal && Session::haveRight('rssfeed_public', CREATE))\n        ) {\n            $output .= \"<span class='float-end'>\";\n            $output .= \"<a href='\" . RSSFeed::getFormURL() . \"'>\";\n            $output .= \"<img src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/plus.png' alt='\" . __s('Add') . \"' title=\\\"\" .\n                __s('Add') . \"\\\"></a></span>\";\n        }\n\n        $output .= \"</div></th></tr>\";\n        $output .= \"</thead>\";\n\n        if ($nb) {\n            usort($items, ['SimplePie', 'sort_items']);\n            foreach ($items as $item) {\n                $output .= \"<tr class='tab_bg_1'><td>\";\n                $output .= Html::convDateTime($item->get_date('Y-m-d H:i:s'));\n                $output .= \"</td><td>\";\n                $feed_link = URL::sanitizeURL($item->feed->get_permalink());\n                if (empty($feed_link)) {\n                    $output .= $item->feed->get_title();\n                } else {\n                    $output .= '<a target=\"_blank\" href=\"' . htmlspecialchars($feed_link) . '\">' . $item->feed->get_title() . '</a>';\n                }\n\n                $item_link = URL::sanitizeURL($item->get_permalink());\n                $rand = mt_rand();\n                $output .= \"<div id='rssitem$rand'>\";\n                if (!empty($item_link)) {\n                    $output .= '<a target=\"_blank\" href=\"' . htmlspecialchars($item_link) . '\">';\n                }\n                $output .= $item->get_title();\n                if (!empty($item_link)) {\n                    $output .= \"</a>\";\n                }\n                $output .= \"</div>\";\n                $output .= Html::showToolTip(RichText::getEnhancedHtml($item->get_content()), [\n                    'applyto' => \"rssitem$rand\",\n                    'display' => false\n                ]);\n                $output .= \"</td></tr>\";\n            }\n        }\n        $output .= \"</table>\";\n\n        if ($display) {\n            echo $output;\n        } else {\n            return $output;\n        }\n    }\n\n    /**\n     * @since 0.85\n     *\n     * @see commonDBTM::getRights()\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        if ($interface == 'helpdesk') {\n            $values = [READ => __('Read')];\n        } else {\n            $values = parent::getRights();\n            $values[self::PERSONAL] = __('Manage personal');\n        }\n        return $values;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-rss\";\n    }\n}\n"], "fixing_code": ["# GLPI changes\n\nThe present file will list all changes made to the project; according to the\n[Keep a Changelog](http://keepachangelog.com/) project.\n\n## [10.0.7] unreleased\n\n### Added\n\n### Changed\n\n### Deprecated\n\n### Removed\n\n### API changes\n\n#### Added\n\n#### Changes\n- Itemtype that can be linked to a disk are now declared in `$CFG_GLPI['disk_types']`.\n\n#### Deprecated\n- `Glpi\\Inventory\\Conf::importFile()`\n- `RSSFeed::showDiscoveredFeeds()`\n- `Toolbox::checkValidReferer()`\n\n#### Removed\n\n## [10.0.6] 2023-01-24\n\n### Added\n\n### Changed\n- `glpi:` command prefix has been removed from console commands canonical name.\n\n### Deprecated\n\n### Removed\n\n### API changes\n\n#### Added\n\n#### Changes\n\n#### Deprecated\n\n#### Removed\n\n## [10.0.5] 2022-11-04\n\n## [10.0.4] 2022-11-03\n\n## [10.0.3] 2022-09-14\n\n### API changes\n\n#### Added\n\n- `CommonDBTM::pre_addToDB()` added.\n\n#### Removed\n\n## [10.0.2] 2022-06-28\n\n## [10.0.1] 2022-06-02\n\n### Changed\n- PDF export library has been changed back from `mPDF` to `TCPDF`.\n\n### Removed\n- Gantt feature has been moved into the `gantt` plugin.\n\n### API changes\n\n#### Added\n- `plugin_xxx_activate()` and `plugin_xxx_deactivate` hooks support.\n\n#### Changes\n- `Glpi\\Api\\Api::initEndpoint()` visibility changed to `protected`.\n\n#### Removed\n- `GlpiGantt` javascript helper and `dhtmlx-gantt` library.\n- `Glpi\\Gantt` namespace and all corresponding classes.\n- `Project::getDataToDisplayOnGantt()`\n- `Project::showGantt()`\n- `ProjectTask::getDataToDisplayOnGantt()`\n- `ProjectTask::getDataToDisplayOnGanttForProject()`\n\n## [10.0.0] 2022-04-20\n\n### Added\n- Added UUID to all other itemtypes that are related to Operating Systems (Phones, Printers, etc)\n- Added a button to the General > System configuration tab to copy the system information\n\n### Changed\n- APCu and WinCache are not anymore use by GLPI, use `php bin/console cache:configure` command to configure cache system.\n- PDF export library has been changed from `TCPDF` to `mPDF`.\n- The search engine and search results page now support sorting by multiple fields.\n- The search result lists now refresh/update without triggering a full page reload.\n- Replaced user-facing cases of master/slave usage replaced with main/replica.\n\n### Deprecated\n- Usage of XML-RPC API is deprecated.\n- The database \"slaves\" property in the status checker (/status.php and glpi:system:status) is deprecated. Use \"replicas\" instead,\n- The database \"master\" property in the status checker (/status.php and glpi:system:status) is deprecated. Use \"main\" instead,\n\n### Removed\n- Autocomplete feature on text fields.\n- Usage of alternative DB connection encoding (`DB::$dbenc` property).\n- Deprecated `scripts/ldap_mass_sync.php` has been removed in favor of `glpi:ldap:synchronize_users` command available using `bin/console`\n- Deprecated `scripts/compute_dictionary.php` has been removed in favor of `glpi:rules:replay_dictionnary_rules` command available using `bin/console`\n- Deprecated `scripts/softcat_mass_compute.php` has been removed in favor of `glpi:rules:process_software_category_rules` command available using `bin/console`\n\n### API changes\n\n#### Added\n- Added `DBMysql::setSavepoint()` to create savepoints within a transaction.\n- Added `CommonDBTM::showForm()` to have a generic showForm for asset (based on a twig template).\n\n#### Changes\n- MySQL warnings are now logged in SQL errors log.\n- `Guzzle` library has been upgraded to version 7.4.\n- `Symfony\\Console` library has been upgraded to version 5.4.\n- `CommonGLPI` constructor signature has been declared in an interface (`CommonGLPIInterface`).\n- `DBmysqlIterator` class compliancy with `Iterator` has been fixed (i.e. `DBmysqlIterator::next()` does not return current row anymore).\n- `Domain` class inheritance changed from `CommonDropdown` to `CommonDBTM`.\n- `showForm()` method of all classes inheriting `CommonDBTM` have been changed to match `CommonDBTM::showForm()` signature.\n- Format of `Message-Id` header sent in Tickets notifications changed to match format used by other items.\n- Added `DB::truncate()` to replace raw SQL queries\n- Impact context `positions` field type changed from `TEXT` to `MEDIUMTEXT`\n- Field `date` of KnowbaseItem has been renamed to `date_creation`.\n- Field `date_creation` of KnowbaseItem_Revision has been renamed to `date`.\n- Field `date_creation` of NetworkPortConnectionLog has been renamed to `date`.\n- Field `date` of Notepad has been renamed to `date_creation`.\n- Field `date_mod` of ObjectLock has been renamed to `date`.\n- Field `date` of ProjectTask has been renamed to `date_creation`.\n- Table `glpi_netpoints` has been renamed to `glpi_sockets`.\n- `GLPI_FORCE_EMPTY_SQL_MODE` constant has been removed in favor of `GLPI_DISABLE_ONLY_FULL_GROUP_BY_SQL_MODE` usage.\n- `CommonDBTM::clone()`, `CommonDBTM::prepareInputForClone()` and `CommonDBTM::post_clone()` has been removed. Clonable objects must now use `Glpi\\Features\\Clonable` trait.\n- `CommonDBTM::notificationqueueonaction` property has been removed in favor of `CommonDBTM::deduplicate_queued_notifications` property.\n- `CommonDropdown::displaySpecificTypeField()` has a new `$options` parameter.\n- `DBMysql::rollBack` supports a `name` parameter for rolling back to a savepoint.\n- `Knowbase::getJstreeCategoryList()` as been replaced by `Knowbase::getTreeCategoryList()`.\n- `NetworkPortInstantiation::showNetpointField()` has been renamed to `NetworkPortInstantiation::showSocketField()`.\n- `NotificationSettingConfig::showForm()` renamed to `NotificationSettingConfig::showConfigForm()`.\n- `RuleMatchedLog::showForm()` renamed to `RuleMatchedLog::showItemForm()`.\n- `Search::addOrderBy()` signature changed.\n- `TicketSatisfaction::showForm()` renamed to `TicketSatisfaction::showSatisfactionForm()`.\n- `Transfer::transferDropdownNetpoint()` has been renamed to `Transfer::transferDropdownSocket()`.\n\n#### Deprecated\n- Usage of `MyISAM` engine in database, in favor of `InnoDB` engine.\n- Usage of `utf8mb3` charset/collation in database in favor of `utf8mb4` charset/collation.\n- Usage of `datetime` field type in database, in favor of `timestamp` field type.\n- Handling of encoded/escaped value in `autoName()`\n- `Netpoint` has been deprecated and replaced by `Socket`\n- `CommonDropdown::displayHeader()`, use `CommonDropdown::displayCentralHeader()` instead and make sure to override properly `first_level_menu`, `second_level_menu` and `third_level_menu`.\n- `GLPI::getLogLevel()`\n- `Html::clean()`\n- `MailCollector::listEncodings()`\n- `RuleImportComputer` class\n- `RuleImportComputerCollection` class\n- `SLM::setTicketCalendar()`\n- `Toolbox::clean_cross_side_scripting_deep()`\n- `Toolbox::endsWith()`\n- `Toolbox::filesizeDirectory()`\n- `Toolbox::getHtmlToDisplay()`\n- `Toolbox::logError()`\n- `Toolbox::logNotice()`\n- `Toolbox::logWarning()`\n- `Toolbox::sodiumDecrypt()`\n- `Toolbox::sodiumEncrypt()`\n- `Toolbox::startsWith()`\n- `Toolbox::unclean_cross_side_scripting_deep()`\n\n#### Removed\n- `jQueryUI` has been removed in favor of `twbs/bootstrap`. This implies removal of following widgets: `$.accordion`, `$.autocomplete`,\n  `$.button`, `$.dialog`, `$.draggable`, `$.droppable`, `$.progressbar`, `$.resizable`, `$.selectable`, `$.sortable`, `$.tabs`, `$.tooltip`.\n- Usage of `$order` parameter in `getAllDataFromTable()` (`DbUtils::getAllDataFromTable()`)\n- Usage of `table` parameter in requests made to `ajax/comments.php`\n- Usage of `GLPI_FORCE_EMPTY_SQL_MODE` constant\n- Usage of `GLPI_PREVER` constant\n- Support of `doc_types`, `helpdesk_types` and `netport_types` keys in `Plugin::registerClass()`\n- `$CFG_GLPI['layout_excluded_pages']` entry\n- `$CFG_GLPI['transfers_id_auto']` entry\n- `$CFG_GLPI['use_ajax_autocompletion']` entry\n- `$DEBUG_AUTOLOAD` global variable\n- `$LOADED_PLUGINS` global variable\n- `$PHP_LOG_HANDLER` global variable\n- `$SQL_LOG_HANDLER` global variable\n- `CommonDBTM::notificationqueueonaction` property\n- `NotificationTarget::html_tags` property\n- `getAllDatasFromTable()`\n- `getRealQueryForTreeItem()`\n- `Ajax::createFixedModalWindow()`\n- `Ajax::createSlidePanel()`\n- `Calendar_Holiday::cloneCalendar()`\n- `Calendar::duplicate()`\n- `CalendarSegment::cloneCalendar()`\n- `Change::getCommonLeftJoin()`\n- `Change::getCommonSelect()`\n- `Change::showAnalysisForm()`\n- `Change::showPlanForm()`\n- `CommonDBTM::clone()`\n- `CommonDBTM::getRawName()`\n- `CommonDBTM::prepareInputForClone()`\n- `CommonDBTM::post_clone()`\n- `CommonDBTM::showDates()`\n- `CommonGLPI::isLayoutExcludedPage()`\n- `CommonGLPI::isLayoutWithMain()`\n- `CommonGLPI::showPrimaryForm()`\n- `CommonITILObject::displayHiddenItemsIdInput()`\n- `CommonITILObject::filterTimeline()`\n- `CommonITILObject::getActorIcon()`\n- `CommonITILObject::getSplittedSubmitButtonHtml()`\n- `CommonITILObject::showActorsPartForm()`\n- `CommonITILObject::showFormHeader()`\n- `CommonITILObject::showGroupsAssociated()`\n- `CommonITILObject::showSupplierAddFormOnCreate()`\n- `CommonITILObject::showSuppliersAssociated()`\n- `CommonITILObject::showTimeline()`\n- `CommonITILObject::showTimelineForm()`\n- `CommonITILObject::showTimelineHeader()`\n- `CommonITILObject::showUsersAssociated()`\n- `Computer_Item::cloneComputer()`\n- `Computer_Item::cloneItem()`\n- `Computer_SoftwareLicense` class\n- `Computer_SoftwareVersion` class\n- `ComputerAntivirus::cloneComputer()`\n- `Contract::cloneItem()`\n- `Contract_Item::cloneItem()`\n- `ContractCost::cloneContract()`\n- `Config::agreeDevMessage()`\n- `Config::checkWriteAccessToDirs()`\n- `Config::displayCheckExtensions()`\n- `Config::getCache()`\n- `DBMysql::affected_rows()`\n- `DBMysql::areTimezonesAvailable()`\n- `DBMysql::data_seek()`\n- `DBMysql::fetch_array()`\n- `DBMysql::fetch_assoc()`\n- `DBMysql::fetch_object()`\n- `DBMysql::fetch_row()`\n- `DBMysql::field_name()`\n- `DBMysql::free_result()`\n- `DBmysql::getTableSchema()`\n- `DBMysql::insert_id()`\n- `DBMysql::isMySQLStrictMode()`\n- `DBMysql::list_fields()`\n- `DBMysql::notTzMigrated()`\n- `DBMysql::num_fields()`\n- `DbUtils::getRealQueryForTreeItem()`\n- `Dropdown::getDropdownNetpoint()`\n- `DCBreadcrumb::showDcBreadcrumb()`\n- `Document_Item::cloneItem()`\n- `Entity::showSelector()`\n- `Glpi\\Marketplace\\Api\\Plugins::getNewPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getPopularPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getTopPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getTrendingPlugins()`\n- `Glpi\\Marketplace\\Api\\Plugins::getUpdatedPlugins()`\n- `Html::autocompletionTextField()`\n- `Html::displayImpersonateBanner()`\n- `Html::displayMainMenu()`\n- `Html::displayMenuAll()`\n- `Html::displayTopMenu()`\n- `Html::fileForRichText()`\n- `Html::generateImageName()`\n- `Html::imageGallery()`\n- `Html::jsDisable()`\n- `Html::jsEnable()`\n- `Html::nl2br_deep()`\n- `Html::replaceImagesByGallery()`\n- `Html::resume_name()`\n- `Html::setSimpleTextContent()`\n- `Html::setRichTextContent()`\n- `Html::showProfileSelecter()`\n- `Html::weblink_extract()`\n- `Infocom::cloneItem()`\n- `Itil_Project::cloneItilProject()`\n- `ITILFollowup::showApprobationForm()`\n- `ITILTemplate::getBeginHiddenFieldText()`\n- `ITILTemplate::getBeginHiddenFieldValue()`\n- `ITILTemplate::getEndHiddenFieldText()`\n- `ITILTemplate::getEndHiddenFieldValue()`\n- `Item_Devices::cloneItem()`\n- `Item_Disk::cloneItem()`\n- `Item_OperatingSystem::cloneItem()`\n- `Item_SoftwareLicense::cloneComputer()`\n- `Item_SoftwareLicense::cloneItem()`\n- `Item_SoftwareVersion::cloneComputer()`\n- `Item_SoftwareVersion::cloneItem()`\n- `Item_SoftwareVersion::showForComputer()`\n- `Item_SoftwareVersion::updateDatasForComputer()`\n- `KnowbaseItem_Item::cloneItem()`\n- `LevelAgreement::showForTicket()`\n- `NetworkPort::cloneItem()`\n- `Notepad::cloneItem()`\n- `NotificationTargetTicket::isAuthorMailingActivatedForHelpdesk()`\n- `Plugin::getGlpiPrever()`\n- `Plugin::isGlpiPrever()`\n- `Plugin::setLoaded()`\n- `Plugin::setUnloaded()`\n- `Plugin::setUnloadedByName()`\n- `Problem::getCommonLeftJoin()`\n- `Problem::getCommonSelect()`\n- `Problem::showAnalysisForm()`\n- `ProjectCost::cloneProject()`\n- `ProjectTeam::cloneProjectTask()`\n- `ProjectTask::cloneProjectTeam()`\n- `Reservation::displayReservationDay()`\n- `Reservation::displayReservationsForAnItem()`\n- `Search::isDeletedSwitch()`\n- `Ticket::getCommonLeftJoin()`\n- `Ticket::getCommonSelect()`\n- `Ticket::getTicketTemplateToUse()`\n- `Ticket::showDocumentAddButton()`\n- `Ticket_Ticket::displayLinkedTicketsTo()`\n- `TicketTemplate::getFromDBWithDatas()`\n- `Toolbox::canUseImapPop()`\n- `Toolbox::checkSELinux()`\n- `Toolbox::commonCheckForUseGLPI()`\n- `Toolbox::convertImageToTag()`\n- `Toolbox::decrypt()`\n- `Toolbox::doubleEncodeEmails()`\n- `Toolbox::encrypt()`\n- `Toolbox::getGlpiSecKey()`\n- `Toolbox::removeHtmlSpecialChars()`\n- `Toolbox::sanitize()`\n- `Toolbox::throwError()`\n- `Toolbox::unclean_html_cross_side_scripting_deep()`\n- `Toolbox::useCache()`\n- `Toolbox::userErrorHandlerDebug()`\n- `Toolbox::userErrorHandlerNormal()`\n- `Transfer::transferComputerSoftwares()`\n- `Update::declareOldItems()`\n- `User::showPersonalInformation()`\n\n## [9.5.7] 2022-01-27\n\n## [9.5.6] 2021-09-15\n\n### Changed\n\n- `X-Forwarded-For` header value is no longer used during API access controls, API requests passing through proxies may be refused for security reasons.\n\n### API changes\n\n#### Changed\n\n- All POST request made to `/ajax/` scripts are now requiring a valid CSRF token in their `X-Glpi-Csrf-Token` header.\nRequests done using jQuery are automatically including this header, from the moment that the page header is built using\n`Html::includeHeader()` method and the `js/common.js` script is loaded.\n\n#### Deprecated\n\n- Usage of \"followups\" option in `CommonITILObject::showShort()`\n- `CommonITILTask::showInObjectSumnary()`\n- `ITILFollowup::showShortForITILObject()`\n\n## [9.5.5] 2021-04-13\n\n### API changes\n\n#### Changed\n\n- Remove deprecation of `Search::getMetaReferenceItemtype()`\n\n## [9.5.4] 2021-03-02\n\n### Changed\n\n- `iframe` elements are not anymore allowed in rich text unless `GLPI_ALLOW_IFRAME_IN_RICH_TEXT` constant is defined to `true`\n\n### API changes\n\n#### Deprecated\n\n- `Search::getMetaReferenceItemtype()`\n\n## [9.5.3] 2020-11-25\n\n### Deprecated\n- Usage of alternative DB connection encoding (`DB::$dbenc` property).\n\n## [9.5.2] 2020-10-07\n\n### API changes\n\n#### Removed\n\n- Ability to use SQL expressions as string in criterion values in SQL iterator (replaced by usage of `QueryExpression`).\n- Ability to delete a plugin image using `/front/pluginimage.send.php` script.\n\n## [9.5.1] 2020-07-16\n\n## [9.5.0] 2020-07-07\n\n### Added\n\n- Encrypted file systems support.\n- Mails collected from suppliers can be marked as private on an entity basis.\n- Ability to add custom CSS in entity configuration.\n- CLI commands to enable and disable maintenance mode.\n- Operating system links on Monitors, Peripherals, Phones and Printers.\n- Add datacenter items to global search\n- Project task search options for Projects\n- Automatic action to purge closed tickets\n- Ability to automatically calculate project's percent done\n- Software link on Phones.\n- Add and answer approvals from timeline\n- Add lightbox with PhotoSwipe to timeline images\n- Ability to copy tasks while merging tickets\n- the API gives the ID of the user who logs in with initSession\n- Kanban view for projects\n- Network ports on Monitors\n- Add warning when there are unsaved changes in forms\n- Add ability to get information from the status endpoint in JSON format using Accept header\n- Add `glpi:system:status` CLI command for getting the GLPI status\n\n### Changed\n\n- PHP error_reporting and display_errors configuration directives are no longer overrided by GLPI, unless in debug mode (which forces reporting and display of all errors).\n- `scripts/migrations/racks_plugin.php` has been replaced by `glpi:migration:racks_plugin_to_core` command available using `bin/console`\n- Encryption alogithm improved using libsodium\n\n### API changes\n\n#### Added\n\n- Add translation functions `__()`,  `_n()`,  `_x()` and  `_nx()` in javascript in browser context.\n- `Migration::renameItemtype()` method to update of database schema/values when an itemtype class is renamed\n- Menu returned by `CommonGLPI::getMenuContent()` method override may now define an icon for each menu entry.\n- `CommonDBConnexity::getItemsAssociatedTo()` method to get the items associated to the given one\n- `CommonDBConnexity::getItemsAssociationRequest()` method to get the DB request to use to get the items associated to the given one\n- `CommonDBTM::clone()` method to clone the current item\n- `CommonDBTM::prepareInputForClone()` method to modify the input data that will be used for the cloning\n- `CommonDBTM::post_clone()` method to perform other steps after an item has been cloned (like clone the elements it is associated to)\n\n#### Changes\n\n- jQuery library has been upgraded from 2.2.x to 3.4.x. jQuery Migrate is used to ensure backward compatibility in most cases.\n- `DBmysqlIterator::handleOrderClause()` supports QueryExpressions\n- Use Laminas instead of deprecated ZendFramework\n- Database datetime fields have been replaced by timestamp fields to handle timezones support.\n- Database integer/float fields values are now returned as number instead of strings from DB read operations.\n- Field `domains_id` of Computer, NetworkEquipment and Printer has been dropped and data has been transfered into `glpi_domains_items` table.\n- Plugin status hook can now be used to provide an array with more information about the plugin's status the status of any child services.\n    - Returned array should contain a 'status' value at least (See status values in Glpi\\System\\Status\\StatusChecker)\n    - Old style returns are still supported\n\n#### Deprecated\n\n- `DBMysql::fetch_array()`\n- `DBMysql::fetch_row()`\n- `DBMysql::fetch_assoc()`\n- `DBMysql::fetch_object()`\n- `DBMysql::data_seek()`\n- `DBMysql::insert_id()`\n- `DBMysql::num_fields()`\n- `DBMysql::field_name()`\n- `DBMysql::list_fields()`\n- `DBMysql::affected_rows()`\n- `DBMysql::free_result()`\n- `DBMysql::isMySQLStrictMode()`\n- `getAllDatasFromTable` renamed to `getAllDataFromTable()`\n- Usage of `$order` parameter in `getAllDataFromTable()` (`DbUtils::getAllDataFromTable()`)\n- `Ticket::getTicketTemplateToUse()` renamed to `Ticket::getITILTemplateToUse()`\n- `TicketTemplate::getFromDBWithDatas()` renamed to `TicketTemplate::getFromDBWithData()` (inherited from `ITILTemplate`)\n- `Computer_SoftwareLicense` replaced by `Item_SoftwareLicense` and table `glpi_computers_softwarelicenses` renamed to `glpi_items_softwarelicenses`\n- `Computer_SoftwareVersion` replaced by `Item_SoftwareVersion` and table `glpi_computers_softwareversions` renamed to `glpi_items_softwareversions`\n- `Item_SoftwareVersion::updateDatasForComputer` renamed to `Item_SoftwareVersion::updateDatasForItem`\n- `Item_SoftwareVersion::showForComputer` renamed to `Item_SoftwareVersion::showForItem`\n- `Item_SoftwareVersion::softsByCategory` renamed to `Item_SoftwareVersion::softwareByCategory`\n- `Item_SoftwareVersion::displaySoftsByLicense` renamed to `Item_SoftwareVersion::displaySoftwareByLicense`\n- `Item_SoftwareVersion::cloneComputer` renamed to `Item_SoftwareVersion::cloneItem`\n- `Transfer::transferComputerSoftwares` renamed to `Transfer::transferItemSoftwares`\n- 'getRealQueryForTreeItem()'\n- ``getCommonSelect`` and ``getCommonLeftJoin()`` from ``Ticket``, ``Change`` and ``Problem`` are replaced with ``getCommonCriteria()`` compliant with db iterator\n- `Config::checkWriteAccessToDirs()`\n- `Config::displayCheckExtensions()`\n- `Toolbox::checkSELinux()`\n- `Toolbox::userErrorHandlerDebug()`\n- `Toolbox::userErrorHandlerNormal()`\n- `Html::jsDisable()`\n- `Html::jsEnable()`\n- `Plugin::setLoaded()`\n- `Plugin::setUnloaded()`\n- `Plugin::setUnloadedByName()`\n- Usage of `$LOADED_PLUGINS` global variable\n- `CommonDBTM::getRawName()` replaced by `CommonDBTM::getFriendlyName()`\n- `Calendar_Holiday::cloneCalendar()`\n- `CalendarSegment::cloneCalendar()`\n- `Computer_Item::cloneComputer()`\n- `Computer_Item::cloneItem()`\n- `ComputerAntivirus::cloneComputer()`\n- `Contract::cloneItem()`\n- `Contract_Item::cloneItem()`\n- `ContractCost::cloneContract()`\n- `Document_Item::cloneItem()`\n- `Infocom::cloneItem()`\n- `Item_Devices::cloneItem()`\n- `Item_Disk::cloneItem()`\n- `Item_OperatingSystem::cloneItem()`\n- `Item_SoftwareLicense::cloneComputer()`\n- `Item_SoftwareLicense::cloneItem()`\n- `Item_SoftwareVersion::cloneComputer()`\n- `Item_SoftwareVersion::cloneItem()`\n- `Itil_Project::cloneItilProject()`\n- `KnowbaseItem_Item::cloneItem()`\n- `NetworkPort::cloneItem()`\n- `Notepad::cloneItem()`\n- `ProjectCost::cloneProject()`\n- `ProjectTeam::cloneProjectTask()`\n- `ProjectTask::cloneProjectTeam()`\n- Usage of `GLPIKEY` constant\n- `Toolbox::encrypt()` and `Toolbox::decrypt()` because they use the old encryption algorithm\n\n#### Removed\n\n- Usage of string `$condition` parameter in `CommonDBTM::find()`\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()`\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()`\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n- `Plugin::hasBeenInit()`\n- 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n- `TicketFollowup`\n- `getDateRequest` and `DbUtils::getDateRequest()`\n- `Html::convertTagFromRichTextToImageTag()`\n- `Transfer::createSearchConditionUsingArray()`\n- Unused constants GLPI_FONT_FREESANS and GLPI_SCRIPT_DIR\n\n## [9.4.6] 2020-05-05\n\n## [9.4.5] 2019-12-18\n\n## [9.4.4] 2019-09-24\n\n### API changes\n\n#### Changes\n- For security reasons, autocompletion feature requires now to be authorized by a `'autocomplete' => true` flag in corresponding field search option.\n\n## [9.4.3] 2019-06-20\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Html::convertTagFromRichTextToImageTag()`\n\n## [9.4.2] 2019-04-11\n\n### API changes\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getTablesOf()`\n- `CommonDBTM::getForeignKeyFieldsOf()`\n\n## [9.4.1] 2019-03-15\n\n### API changes\n\n#### Added\n\n- new display hook `timeline_actions` to add new buttons to timeline forms\n- Ability to copy document links while merging tickets\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `Plugin::hasBeenInit()`\n- Deprecate 'SELECT DISTINCT' and 'DISTINCT FIELDS' criteria in `DBmysqlIterator::buildQuery()`\n\n#### Removed\n\n- Drop `CommonITILObject::showSolutions()`.\n\n## [9.4.0] 2019-02-11\n\n### Added\n\n- Ability to link project with problems and tickets.\n- Ability to specify creation and modification dates during CommonDBTM object add method\n- Add followups to Changes and Problems.\n- Add timeline to Changes and Problems.\n- CLI console to centralize CLI commands.\n- Search on devices from Printers and Network equipments.\n- Ability to merge and split tickets.\n- Search on devices from Printers and Network equipments.\n- Ability to specify creation and modification dates during CommonDBTM object add method.\n\n### Changed\n- `license_id` field in `glpi_items_operatingsystems` table has been renamed to `licenseid`\n- `olas_tto_id` field in `glpi_tickets` table has been renamed to `olas_id_tto`\n- `olas_ttr_id` field in `glpi_tickets` table has been renamed to `olas_id_ttr`\n- `ttr_olalevels_id` field in `glpi_tickets` table has been renamed to `olalevels_id_ttr`\n- `slas_tto_id` field in `glpi_tickets` table has been renamed to `slas_id_tto`\n- `slas_ttr_id` field in `glpi_tickets` table has been renamed to `slas_id_ttr`\n- `ttr_slalevels_id` field in `glpi_tickets` table has been renamed to `slalevels_id_ttr`\n- `scripts/add_creation_date.php` has been replaced by `glpi:migration:build_missing_timestamps` command available using `bin/console`\n- `scripts/checkdb.php` has been replaced by `glpi:database:check` command available using `bin/console`\n- `scripts/cliinstall.php` has been replaced by `glpi:database:install` command available using `bin/console`\n- `scripts/cliupdate.php` has been replaced by `glpi:database:update` command available using `bin/console`\n- `scripts/ldap_mass_sync.php` has been replaced by `glpi:ldap:synchronize_users` command available using `bin/console`\n- `scripts/innodb_migration.php` has been replaced by `glpi:migration:myisam_to_innodb` command available using `bin/console`\n- `scripts/unlock_tasks.php` has been replaced by `glpi:task:unlock` command available using `bin/console`\n\n### API changes\n\n#### Changes\n- Plugins are now loaded in ajax files.\n- `TicketFollowup` has been replaced by `ITILFollowup`\n- `$num` parameter has been removed from several `Search` class methods:\n   - `addSelect()`,\n   - `addOrderBy()`,\n   - `addHaving()`,\n   - `giveItem()`\n- `NotificationTarget::getMode()` visibility is now `public`.\n- Added `add_recipient_to_target` hook, triggered when a recipient is added to a notification.\n\n#### Deprecated\n\n- Remove `$CFG_GLPI['use_rich_text']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline']` parameter. Will now be `true` per default.\n- Remove `$CFG_GLPI['ticket_timeline_keep_replaced_tabs']` parameter. Will now be `false` per default.\n- Usage of `TicketFollowup` class has been deprecated.\n- Usage of string `$condition` parameter in `CommonDBTM::find()` has been deprecated.\n- Usage of string `$condition` parameter in `Dropdown::addNewCondition()` has been deprecated.\n- Usage of string in `$option['condition']` parameter in `Dropdown::show()` has been deprecated.\n\nThe following methods have been deprecated:\n\n- `KnowbaseItemCategory::showFirstLevel()`\n- `Ticket::getTicketActors()`\n- `Ticket::processMassiveActionsForOneItemtype()`\n- `Ticket::showFormMassiveAction()`\n- `Ticket::showMassiveActionsSubForm()`\n- `NotificationTarget::getProfileJoinSql()`\n- `NotificationTarget::getDistinctUserSql()`\n- `NotificationTargetCommonITILObject::getProfileJoinSql()`\n- `RuleCollection::getRuleListQuery()`\n- `getNextItem()`\n- `getPreviousItem()`\n- `CommonDBChild::getSQLRequestToSearchForItem()`\n- `CommonDBConnexity::getSQLRequestToSearchForItem()`\n- `CommonDBRelation::getSQLRequestToSearchForItem()`\n- `Project::addVisibility()`\n- `Project::addVisibilityJoins()`\n\n#### Removed\n\n- Drop ability to use `JOIN` in `DBmysqlIterator::buildQuery()`\n- Drop `NotificationTarget::datas` property\n- Drop support of string `$filter` parameter in `Profileuser::getUserProfiles()`\n- Drop support of string `$condition` parameter in `User::getFromDBbyEmail()`\n- Drop support of string `$condition` parameter in `Group_User::getUserGroups()`\n- Drop support of string `$condition` parameter in `Group_User::getGroupUsers()`\n- Drop support of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`)\n- Drop support of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`)\n- Drop support of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`)\n- Drop support of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`)\n- Drop ITIL Tasks, Followups and Solutions `showSummary()` and massive actions related methods that are replaced with timeline\n\n- Drop class alias `Event` for `Glpi\\Event`\n- Drop `Zend\\Loader\\SplAutoloader` interface\n- Drop all methods that have been deprecated in GLPI 9.2\n  - `_e()`\n  - `_ex()`\n  - `FieldExists()`\n  - `formatOutputWebLink()`\n  - `TableExists()`\n  - `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n  - `DBMysql::optimize_tables()`\n  - `NotificationTarget::addToAddressesList()`\n  - `NotificationTarget::getAdditionalTargets()`\n  - `NotificationTarget::getAddressesByGroup()`\n  - `NotificationTarget::getAddressesByTarget()`\n  - `NotificationTarget::getAdminAddress()`\n  - `NotificationTarget::getEntityAdminAddress()`\n  - `NotificationTarget::getItemAuthorAddress()`\n  - `NotificationTarget::getItemGroupAddress()`\n  - `NotificationTarget::getItemGroupSupervisorAddress()`\n  - `NotificationTarget::getItemGroupTechInChargeAddress()`\n  - `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n  - `NotificationTarget::getItemOwnerAddress()`\n  - `NotificationTarget::getItemTechnicianInChargeAddress()`\n  - `NotificationTarget::getNotificationTargets()`\n  - `NotificationTarget::getSpecificTargets()`\n  - `NotificationTarget::getUserByField()`\n  - `NotificationTarget::getUsersAddressesByProfile()`\n  - `NotificationTargetCommonITILObject::getDatasForObject()`\n  - `NotificationTargetCommonITILObject::getFollowupAuthor()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n  - `NotificationTargetCommonITILObject::getLinkedUserByType()`\n  - `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n  - `NotificationTargetCommonITILObject::getRecipientAddress()`\n  - `NotificationTargetCommonITILObject::getSupplierAddress()`\n  - `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n  - `NotificationTargetCommonITILObject::getTaskAssignUser()`\n  - `NotificationTargetCommonITILObject::getTaskAuthor()`\n  - `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n  - `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `QueuedNotification::sendMailById()`\n  - `Ticket::convertContentForNotification()`\n  - `User::getPersonalToken()`\n  - `User::getUniquePersonalToken()`\n- Drop all methods that have been deprecated in GLPI 9.3.0\n  - `CommonDBTM::getFromDBByQuery()`\n  - `CommonDBTM::getSearchOptions()`\n  - `CommonDBTM::getSearchOptionsNew()`\n  - `CommonDBTM::getSearchOptionsToAddNew()`\n  - `CommonITILObject::getStatusIconURL()`\n  - `DBMysql::list_tables()`\n  - `Dropdown::showPrivatePublicSwitch()`\n  - `NotificationTargetProjectTask::getTeamContacts()`\n  - `NotificationTargetProjectTask::getTeamGroups()`\n  - `NotificationTargetProjectTask::getTeamSuppliers()`\n  - `NotificationTargetProjectTask::getTeamUsers()`\n  - `Search::constructDatas()`\n  - `Search::displayDatas()`\n  - `Transfer::transferComputerDisks()`\n- Drop all methods that have been deprecated in GLPI 9.3.1\n  - `ComputerVirtualMachine::getUUIDRestrictRequest()`\n  - `Config::getSQLMode()`\n  - `DBMysql::checkForCrashedTables()`\n  - `Html::checkAllAsCheckbox()`\n  - `Html::scriptEnd()`\n  - `Html::scriptStart()`\n  - `Plugin::isAllPluginsCSRFCompliant()`\n  - `Profile::getUnderActiveProfileRestrictRequest()`\n  - `Toolbox::is_a()`\n- Drop all constants that have been deprecated in GLPI 9.3.1\n  - `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n  - `CommonDBTM::HAS_DUPLICATE`\n  - `CommonDBTM::NOTHING_TO_DO`\n  - `CommonDBTM::SUCCESS`\n  - `CommonDBTM::TYPE_MISMATCH`\n- Drop all methods that have been deprecated in GLPI 9.3.2\n - `ITILSolution::removeForItem()`\n - `Session::isViewAllEntities()`\n\n## [9.3.3] 2018-11-27\n\n### Changed\n\n- Fix some cache issues\n- Fix reservation tab of an item\n- Fix actors notifications massive action\n- Improve racks plugins migration script\n\n### API changes\n\nNo API changes.\n\n## [9.3.2] 2018-10-26\n\n### API changes\n\n#### Changed\n\n- `Rule::executePluginsActions()` signature has changed\n- Javascript function `formatResult()` has been renamed to `templateResult()`\n\n#### Deprecated\n\nThe following methods have been deprecated:\n\n- `CommonITILTask::displayTabContentForItem()`\n- `CommonITILTask::showFormMassiveAction()`\n- `CommonITILTask::showSummary()`\n- `ITILSolution::displayTabContentForItem()`\n- `ITILSolution::removeForItem()`\n- `ITILSolution::showSummary()`\n- `Session::isViewAllEntities()`\n- `TicketFollowup::processMassiveActionsForOneItemtype()`\n- `TicketFollowup::showFormMassiveAction()`\n- `TicketFollowup::showMassiveActionsSubForm()`\n- `TicketFollowup::showSummary()`\n- `Plugin::removeFromSession()`\n\n## [9.3.1] 2018-09-12\n\n### Added\n- List receivers folders to choose imported/refused folders\n\n### API changes\n\n#### Deprecated\n\n- Usage of string `$condition` parameter in `Group_User::getUserGroups()` has been deprecated\n- Usage of string `$condition` parameter in `Group_User::getGroupUsers()` has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTable` (`DbUtils::countElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countDistinctElementsInTable` (`DbUtils::countDistinctElementsInTable()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForMyEntities` (`DbUtils::countElementsInTableForMyEntities()`) has been deprecated\n- Usage of string `$condition` parameter in `countElementsInTableForEntity` (`DbUtils::countElementsInTableForEntity()`) has been deprecated\n- Usage of string `$condition` parameter in `getAllDatasFromTable` (`DbUtils::getAllDataFromTable()`) has been deprecated\n\nThe following methods have been deprecated:\n\n- `Config::getSQLMode()`\n- `DBMysql::checkForCrashedTables()`\n- `Html::checkAllAsCheckbox()`\n- `Html::scriptEnd()`\n- `Html::scriptStart()`\n- `Toolbox::is_a()`\n- `ComputerVirtualMachine::getUUIDRestrictRequest()`\n- `Plugin::isAllPluginsCSRFCompliant()`\n- `Profile::getUnderActiveProfileRestrictRequest()`\n\nThe following constants have been deprecated:\n- `CommonDBTM::ERROR_FIELDSIZE_EXCEEDED`\n- `CommonDBTM::HAS_DUPLICATE`\n- `CommonDBTM::NOTHING_TO_DO`\n- `CommonDBTM::SUCCESS`\n- `CommonDBTM::TYPE_MISMATCH`\n\n## [9.3.0] 2018-06-28\n\n### Added\n- Add DCIM management\n- Add OSM view to set locations and on Search\n- Add login source selection\n- Add logs purge\n- Filter in items logs\n\n### Changed\n- Switch MySQL engine from MyIsam to Innodb\n- Rework solutions for Tickets, Problems and Changes to support history\n- Disks can be attached to network equipments and printers\n\n### API changes\n\n#### Changes\n- Added `DB::insert()`, `DB::update()` and `DB::delete()` to replace raw SQL queries\n- `CommonITILObject::showMassiveSolutionForm()` now takes a `CommonITILObject` as argument\n- `Profileuser::getUserProfiles()` `$filter` parameter is now an array\n- `User::getFromDBbyEmail()` `$condition` parameter is now an array\n- Select2 javascript component has been upgraded to 4.0 version, see [Migrating from Select2 3.5](https://select2.org/upgrading/migrating-from-35)\n- `CommonDevice::getItem_DeviceType()` has a new optional `$devicetype` parameter\n\n#### Deprecated\n\n- Usage of string `$filter` parameter in `Profileuser::getUserProfiles()` has been deprecated\n- Usage of string `$condition` parameter in `User::getFromDBbyEmail()` has been deprecated\n\nThe following methods have been deprecated:\n\n- `CommonDBTM::getFromDBByQuery()`\n- `CommonDBTM::getSearchOptions()`\n- `CommonDBTM::getSearchOptionsNew()`\n- `CommonDBTM::getSearchOptionsToAddNew()`\n- `CommonITILObject::getStatusIconURL()`\n- `DBMysql::list_tables()`\n- `Dropdown::showPrivatePublicSwitch()`\n- `NotificationTargetProject::getTeamContacts()`\n- `NotificationTargetProject::getTeamGroups()`\n- `NotificationTargetProject::getTeamSuppliers()`\n- `NotificationTargetProject::getTeamUsers()`\n- `Search::constructDatas()`\n- `Search::displayDatas()`\n- `Transfer::transferComputerDisks()`\n\n#### Removed\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- PHPCas library is no longer provided (for licensing issues)\n\n## [9.2.4] 2018-06-21\n\n## [9.2.3] 2018-04-27\n\n## [9.2.2] 2018-03-01\n\n\n### Deprecated\n\n- `CommonITILValidation::isAllValidationsHaveSameStatusForTicket`\n- `CommonITILValidation::getNumberValidationForTicket`\n- `DBMysql::optimize_tables()`\n\n## [9.2.1] 2017-11-16\n\n### Added\n\n- Search engine, added ``itemtype_item_revert`` jointype\n\n### Deprecated\n\n- `Ticket::convertContentForNotification()`\n\n## [9.2] 2017-09-25\n\n### Added\n- Link knowledge base entries with assets or tickets\n- Revisions on knowledge base entries and their translations, with diff view\n- Add recursive comments on knowledge base entries\n- Direct links to KB article's title for a direct access\n- Load minified CSS and JS files (core and plugins) that are generated on release\n- Link beetween software licenses\n- Alerts on saved searches\n- Add ajax browsers notifications in addition to emails\n- Plugins can now add new notifications types (xmpp, sms, telegram, ...) to be used along with standard notifications\n- Simcard component\n- Synchronization field for LDAP\n- Improved performances on large entities databases\n- Remember me on login\n- Fuzzy search\n- Paste images in rich text editor\n- Add tasks in tickets templates\n- Composite tickets (link on sons/parents)\n- Telemetry\n- Certificates component\n- Firmwares components (BIOSes, firwmwares, ...)\n- Add OLA management\n\n### Changed\n- Many bugs have been fixed\n- Display knowledge base category items in tickets using a popup instead of a\nnew whole window\n- Reviewed all richtext editor (tinymce) and their upload parts, now more simpler and intuitive\n- Don't ask user to select a template if there is no configured template\n- personal_token is not used anymore for api authentication, a new api_token field has been added (empty by default, you should regenerate it)\n- Operating systems management has been improved\n- Direct language change from any page\n- Better icons harmonization\n\n### API changes\n\n#### Changes\n\n- `CommonDBTM::getTable()` signature has changed\n- `User::getFromDBbyToken()` signature has changed\n- `Bookmark` has been renamed to `SavedSearch`\n- Update to latest jsTree plugin\n- `RuleDictionnarySoftwareCollection::versionExists()` signature has changed\n- `NotificationTemplate::getDataToSend()` signature has changed\n- `QueuedMail` has been renamed to `QueuedNotification`\n- `CommonDBTM::mailqueueonaction` has been renamed to `CommonDBTM::notificationqueueonaction`\n- `NotificationTarget::getSender()` no longer takes any parameters (was not used)\n- `TableExists()` has been moved to `DBMysql::tableExists()`\n- `FieldExists()` has been moved to `DBMysql::fieldExists()`\n- `Profile_User::getUserEntitiesForRight()` signature has changed\n- `NotificationTarget` property `datas` has been renamed to `data`\n\n#### Deprecated\n\n- Ability to use `JOIN` in `DBmysqlIterator::buildQuery()` has been deprecated\n- Usage of `NotificationTarget::datas` property has been deprecated\n- Usage of `Zend\\Loader\\SplAutoloader` interface has been deprecated\n\nThe following methods have been deprecated:\n\n- `_e()`\n- `_ex()`\n- `Bookmark::mark_default()`\n- `Bookmark::unmark_default()`\n- `CommonTreeDropodwn::recursiveCleanSonsAboveID()`\n- `NotificationTarget::addToAddressesList()`\n- `NotificationTarget::getAdditionalTargets()`\n- `NotificationTarget::getAddressesByGroup()`\n- `NotificationTarget::getAddressesByTarget()`\n- `NotificationTarget::getAdminAddress()`\n- `NotificationTarget::getEntityAdminAddress()`\n- `NotificationTarget::getItemAuthorAddress()`\n- `NotificationTarget::getItemGroupAddress()`\n- `NotificationTarget::getItemGroupSupervisorAddress()`\n- `NotificationTarget::getItemGroupTechInChargeAddress()`\n- `NotificationTarget::getItemGroupWithoutSupervisorAddress()`\n- `NotificationTarget::getItemOwnerAddress()`\n- `NotificationTarget::getItemTechnicianInChargeAddress()`\n- `NotificationTarget::getNotificationTargets()`\n- `NotificationTarget::getSpecificTargets()`\n- `NotificationTarget::getUserByField()`\n- `NotificationTarget::getUsersAddressesByProfile()`\n- `NotificationTargetCommonITILObject::getDatasForObject()`\n- `NotificationTargetCommonITILObject::getFollowupAuthor()`\n- `NotificationTargetCommonITILObject::getLinkedGroupByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedGroupWithoutSupervisorByType()`\n- `NotificationTargetCommonITILObject::getLinkedUserByType()`\n- `NotificationTargetCommonITILObject::getOldAssignTechnicianAddress()`\n- `NotificationTargetCommonITILObject::getRecipientAddress()`\n- `NotificationTargetCommonITILObject::getSupplierAddress()`\n- `NotificationTargetCommonITILObject::getTaskAssignGroup()`\n- `NotificationTargetCommonITILObject::getTaskAssignUser()`\n- `NotificationTargetCommonITILObject::getTaskAuthor()`\n- `NotificationTargetCommonITILObject::getValidationApproverAddress()`\n- `NotificationTargetCommonITILObject::getValidationRequesterAddress()`\n- `NotificationTargetProjectTask::getTeamContacts()`\n- `NotificationTargetProjectTask::getTeamGroups()`\n- `NotificationTargetProjectTask::getTeamSuppliers()`\n- `NotificationTargetProjectTask::getTeamUsers()`\n- `QueuedNotification::sendMailById()`\n- `User::getPersonalToken()`\n- `User::getUniquePersonalToken()`\n- `formatOutputWebLink()`\n\n#### Removals\n\nThe following methods have been dropped:\n\n- `Ajax::displaySearchTextForDropdown()`\n- `Ajax::getSearchTextForDropdown()`\n- `Bookmark::changeBookmarkOrder()`\n- `Bookmark::moveBookmark()`\n- `CommonGLPI::addDivForTabs()`\n- `CommonGLPI::showTabs()`\n- `CommonGLPI::showNavigationHeaderOld()`\n- `CommonGLPI::show()`\n- `Dropdown::showInteger()`\n- `DBMysql::field_flags()`\n- `Html::showDateFormItem()`\n- `Html::showDateTimeFormItem()`\n- `Profile::dropdownNoneReadWrite()`\n- `Toolbox::get_magic_quotes_runtime()`\n- `Toolbox::get_magic_quotes_gpc()`\n- `Dropdown::showAllItems()`\n\nFor older entries, please check [GLPI website](http://glpi-project.org).\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\RichText\\RichText;\nuse Glpi\\Toolbox\\Sanitizer;\nuse Glpi\\Toolbox\\URL;\n\n// $feed = new SimplePie();\n// $feed->set_cache_location('../files/_rss');\n// $feed->set_cache_duration(3600);\n// $feed->set_feed_url('http://linuxfr.org/news.atom');\n// $feed->force_feed(true);\n// // Initialize the whole SimplePie object.  Read the feed, process it, parse it, cache it, and\n// // all that other good stuff.  The feed's information will not be available to SimplePie before\n// // this is called.\n// $success = $feed->init();\n//\n// // We'll make sure that the right content type and character encoding gets set automatically.\n// // This function will grab the proper character encoding, as well as set the content type to text/html.\n// $feed->handle_content_type();\n// if ($feed->error())\n// {\n//    echo \"ERROR\";\n// } else {\n//    echo $feed->get_title();\n//    echo $feed->get_link();\n// }\n\n/**\n * RSSFeed Class\n *\n * @since 0.84\n **/\nclass RSSFeed extends CommonDBVisible implements ExtraVisibilityCriteria\n{\n   // From CommonDBTM\n    public $dohistory                   = true;\n\n    public static $rightname    = 'rssfeed_public';\n\n    const PERSONAL = 128;\n\n    public static function getTypeName($nb = 0)\n    {\n\n        if (Session::haveRight('rssfeed_public', READ)) {\n            return _n('RSS feed', 'RSS feed', $nb);\n        }\n        return _n('Personal RSS feed', 'Personal RSS feed', $nb);\n    }\n\n\n    public static function canCreate()\n    {\n\n        return (Session::haveRightsOr(self::$rightname, [CREATE, self::PERSONAL]));\n    }\n\n\n    public static function canView()\n    {\n\n        return (Session::haveRightsOr(self::$rightname, [READ, self::PERSONAL]));\n    }\n\n\n    public function canViewItem()\n    {\n\n       // Is my rssfeed or is in visibility\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', READ)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function canCreateItem()\n    {\n       // Is my rssfeed\n        return ($this->fields['users_id'] == Session::getLoginUserID());\n    }\n\n\n    public function canUpdateItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight('rssfeed_public', UPDATE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canUpdate()\n    {\n        return (Session::haveRightsOr(self::$rightname, [UPDATE, self::PERSONAL]));\n    }\n\n\n    /**\n     * @since 0.85\n     * for personal rss feed\n     **/\n    public static function canPurge()\n    {\n        return (Session::haveRightsOr(self::$rightname, [PURGE, self::PERSONAL]));\n    }\n\n\n    /**\n     * @since 0.85\n     *\n     * @see CommonDBTM::canPurgeItem()\n     **/\n    public function canPurgeItem()\n    {\n\n        return (($this->fields['users_id'] == Session::getLoginUserID())\n              || (Session::haveRight(self::$rightname, PURGE)\n                  && $this->haveVisibilityAccess()));\n    }\n\n\n    public function post_getFromDB()\n    {\n\n       // Users\n        $this->users    = RSSFeed_User::getUsers($this->fields['id']);\n\n       // Entities\n        $this->entities = Entity_RSSFeed::getEntities($this->fields['id']);\n\n       // Group / entities\n        $this->groups   = Group_RSSFeed::getGroups($this->fields['id']);\n\n       // Profile / entities\n        $this->profiles = Profile_RSSFeed::getProfiles($this->fields['id']);\n    }\n\n\n    /**\n     * @see CommonDBTM::cleanDBonPurge()\n     **/\n    public function cleanDBonPurge()\n    {\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Entity_RSSFeed::class,\n                Group_RSSFeed::class,\n                Profile_RSSFeed::class,\n                RSSFeed_User::class,\n            ]\n        );\n    }\n\n    public function haveVisibilityAccess()\n    {\n        if (!self::canView()) {\n            return false;\n        }\n\n        return parent::haveVisibilityAccess();\n    }\n\n    /**\n     * Return visibility joins to add to SQL\n     *\n     * @param $forceall force all joins (false by default)\n     *\n     * @return string joins to add\n     **/\n    public static function addVisibilityJoins($forceall = false)\n    {\n       //not deprecated because used in Search\n        global $DB;\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['WHERE']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = str_replace(\n            'SELECT * FROM ' . $DB->quoteName(self::getTable()) . ' ',\n            '',\n            $sql\n        );\n        return $sql;\n    }\n\n\n    /**\n     * Return visibility SQL restriction to add\n     *\n     * @return string restrict to add\n     **/\n    public static function addVisibilityRestrict()\n    {\n       //not deprecated because used in Search\n\n       //get and clean criteria\n        $criteria = self::getVisibilityCriteria();\n        unset($criteria['LEFT JOIN']);\n        $criteria['FROM'] = self::getTable();\n\n        $it = new \\DBmysqlIterator(null);\n        $it->buildQuery($criteria);\n        $sql = $it->getSql();\n        $sql = preg_replace('/.*WHERE /', '', $sql);\n\n        return $sql;\n    }\n\n    /**\n     * Return visibility joins to add to DBIterator parameters\n     *\n     * @since 9.4\n     *\n     * @param boolean $forceall force all joins (false by default)\n     *\n     * @return array\n     */\n    public static function getVisibilityCriteria(bool $forceall = false): array\n    {\n        $where = [self::getTable() . '.users_id' => Session::getLoginUserID()];\n        $join = [];\n\n        if (!self::canView()) {\n            return [\n                'LEFT JOIN' => $join,\n                'WHERE'     => $where\n            ];\n        }\n\n       //JOINs\n       // Users\n        $join['glpi_rssfeeds_users'] = [\n            'ON' => [\n                'glpi_rssfeeds_users'   => 'rssfeeds_id',\n                'glpi_rssfeeds'         => 'id'\n            ]\n        ];\n\n        $where = [\n            'OR' => [\n                self::getTable() . '.users_id'   => Session::getLoginUserID(),\n                'glpi_rssfeeds_users.users_id'   => Session::getLoginUserID()\n            ]\n        ];\n        $orwhere = [];\n\n       // Groups\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"]))\n        ) {\n            $join['glpi_groups_rssfeeds'] = [\n                'ON' => [\n                    'glpi_groups_rssfeeds'  => 'rssfeeds_id',\n                    'glpi_rssfeeds'         => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_groups_rssfeeds', '', '', true);\n            $orwhere[] = [\n                'glpi_groups_rssfeeds.groups_id' => count($_SESSION[\"glpigroups\"])\n                                                      ? $_SESSION[\"glpigroups\"]\n                                                      : [-1],\n                'OR' => [\n                    'glpi_groups_rssfeeds.no_entity_restriction' => 1,\n                ] + $restrict\n            ];\n        }\n\n       // Profiles\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveprofile\"])\n              && isset($_SESSION[\"glpiactiveprofile\"]['id']))\n        ) {\n            $join['glpi_profiles_rssfeeds'] = [\n                'ON' => [\n                    'glpi_profiles_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveprofile\"]) && isset($_SESSION[\"glpiactiveprofile\"]['id'])) {\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true);\n            if (!count($restrict)) {\n                $restrict = [true];\n            }\n            $ors = [\n                'glpi_profiles_rssfeeds.no_entity_restriction' => 1,\n                $restrict\n            ];\n\n            $orwhere[] = [\n                'glpi_profiles_rssfeeds.profiles_id' => $_SESSION[\"glpiactiveprofile\"]['id'],\n                'OR' => $ors\n            ];\n        }\n\n       // Entities\n        if (\n            $forceall\n            || (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"]))\n        ) {\n            $join['glpi_entities_rssfeeds'] = [\n                'ON' => [\n                    'glpi_entities_rssfeeds'   => 'rssfeeds_id',\n                    'glpi_rssfeeds'            => 'id'\n                ]\n            ];\n        }\n\n        if (isset($_SESSION[\"glpiactiveentities\"]) && count($_SESSION[\"glpiactiveentities\"])) {\n           // Force complete SQL not summary when access to all entities\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_rssfeeds', '', '', true, true);\n            if (count($restrict)) {\n                $orwhere[] = $restrict;\n            }\n        }\n\n        $where['OR'] = array_merge($where['OR'], $orwhere);\n        $criteria = ['LEFT JOIN' => $join];\n        if (count($where)) {\n            $criteria['WHERE'] = $where;\n        }\n\n        return $criteria;\n    }\n\n    /**\n     * @param $field\n     * @param $values\n     * @param $options   array\n     **/\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'refresh_rate':\n                return Html::timestampToString($values[$field], false);\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n\n    /**\n     * @param $field\n     * @param $name               (default '')\n     * @param $values             (default '')\n     * @param $options      array\n     **/\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n\n        switch ($field) {\n            case 'refresh_rate':\n                return Planning::dropdownState($name, $values[$field], false);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n            'forcegroupby'       => true,\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => 'glpi_users',\n            'field'              => 'name',\n            'name'               => __('Creator'),\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n            'right'              => 'all'\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'url',\n            'name'               => __('URL'),\n            'datatype'           => 'string',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'have_error',\n            'name'               => __('Error'),\n            'datatype'           => 'bool',\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => $this->getTable(),\n            'field'              => 'max_items',\n            'name'               => __('Number of items displayed'),\n            'datatype'           => 'number',\n            'min'                => 5,\n            'max'                => 100,\n            'step'               => 5,\n            'toadd'              => [1],\n            'massiveaction'      => true\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'refresh_rate',\n            'name'               => __('Refresh rate'),\n            'datatype'           => 'timestamp',\n            'min'                => HOUR_TIMESTAMP,\n            'max'                => DAY_TIMESTAMP,\n            'step'               => HOUR_TIMESTAMP,\n            'toadd'              => [\n                5 * MINUTE_TIMESTAMP,\n                15 * MINUTE_TIMESTAMP,\n                30 * MINUTE_TIMESTAMP,\n                45 * MINUTE_TIMESTAMP\n            ],\n            'display_emptychoice' => false,\n            'massiveaction'      => true,\n            'searchtype'         => 'equals'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        return $tab;\n    }\n\n\n    /**\n     * @see CommonGLPI::getTabNameForItem()\n     **/\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (self::canView()) {\n            $nb = 0;\n            switch ($item->getType()) {\n                case 'RSSFeed':\n                    $showtab = [1 => __('Content')];\n                    if (Session::haveRight('rssfeed_public', UPDATE)) {\n                        if ($_SESSION['glpishow_count_on_tabs']) {\n                            $nb = $item->countVisibilities();\n                        }\n                        $showtab[2] = self::createTabEntry(_n(\n                            'Target',\n                            'Targets',\n                            Session::getPluralNumber()\n                        ), $nb);\n                    }\n                    return $showtab;\n            }\n        }\n        return '';\n    }\n\n\n    /**\n     * @see CommonGLPI::defineTabs()\n     **/\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    /**\n     * @param $item         CommonGLPI object\n     * @param $tabnum       (default 1)\n     * @param $withtemplate (default 0)\n     **/\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case 'RSSFeed':\n                switch ($tabnum) {\n                    case 1:\n                        $item->showFeedContent();\n                        return true;\n\n                    case 2:\n                        $item->showVisibility();\n                        return true;\n                }\n        }\n        return false;\n    }\n\n    public function prepareInputForAdd($input)\n    {\n        if (!$this->checkUrlInput($input['url'])) {\n            return false;\n        }\n\n        if ($feed = self::getRSSFeed($input['url'])) {\n            $input['have_error'] = 0;\n            $input['name']       = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        } else {\n            $input['have_error'] = 1;\n            $input['name']       = '';\n        }\n        $input[\"name\"] = trim($input[\"name\"]);\n\n        if (empty($input[\"name\"])) {\n            $input[\"name\"] = __('Without title');\n        }\n        return $input;\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n        if (array_key_exists('url', $input) && !$this->checkUrlInput($input['url'])) {\n            return false;\n        }\n\n        if (\n            empty($input['name'])\n            && isset($input['url'])\n            && ($feed = self::getRSSFeed($input['url']))\n        ) {\n            $input['name'] = addslashes($feed->get_title());\n            if (empty($input['comment'])) {\n                $input['comment'] = addslashes($feed->get_description());\n            }\n        }\n        return $input;\n    }\n\n    /**\n     * Check URL given in input.\n     * @param string $url\n     * @return bool\n     */\n    private function checkUrlInput(string $url): bool\n    {\n        if (parse_url($url) === false) {\n            Session::addMessageAfterRedirect(__('Feed URL is invalid.'), false, ERROR);\n            return false;\n        } elseif (!Toolbox::isUrlSafe($url)) {\n            Session::addMessageAfterRedirect(sprintf(__('URL \"%s\" is not allowed by your administrator.'), $url), false, ERROR);\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public function pre_updateInDB()\n    {\n\n       // Set new user if initial user have been deleted\n        if (\n            ($this->fields['users_id'] == 0)\n            && ($uid = Session::getLoginUserID())\n        ) {\n            $this->fields['users_id'] = $uid;\n            $this->updates[]          = \"users_id\";\n        }\n    }\n\n\n    public function post_getEmpty()\n    {\n\n        $this->fields[\"name\"]         = __('New note');\n        $this->fields[\"users_id\"]     = Session::getLoginUserID();\n        $this->fields[\"refresh_rate\"] = DAY_TIMESTAMP;\n        $this->fields[\"max_items\"]    = 20;\n    }\n\n\n    /**\n     * Print the rssfeed form\n     *\n     * @param $ID        integer  Id of the item to print\n     * @param $options   array    of possible options:\n     *     - target filename : where to go when done.\n     **/\n    public function showForm($ID, array $options = [])\n    {\n       // Test _rss cache directory. I permission trouble : unable to edit\n        if (Toolbox::testWriteAccessToDirectory(GLPI_RSS_DIR) > 0) {\n            echo \"<div class='center'>\";\n            printf(__('Check permissions to the directory: %s'), GLPI_RSS_DIR);\n            echo \"<p class='red b'>\" . __('Error') . \"</p>\";\n            echo \"</div>\";\n            return false;\n        }\n\n        $this->initForm($ID, $options);\n\n        $this->showFormHeader($options);\n\n        $rowspan = 4;\n\n        if (!$this->isNewID($ID)) {\n           // Force getting feed :\n            $feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate']);\n            if (!$feed || $feed->error()) {\n                $this->setError(true);\n            } else {\n                $this->setError(false);\n            }\n            echo \"<tr class='tab_bg_2'>\";\n            echo \"<td>\" . __('Name') . \"</td>\";\n            echo \"<td>\";\n            echo Html::input('name', ['value' => $this->fields['name']]);\n            echo \"</td><td colspan ='2'>&nbsp;</td></tr>\\n\";\n        }\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('URL') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='url' size='100' value='\" . $this->fields[\"url\"] . \"' class='form-control'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('By') . \"</td>\";\n        echo \"<td>\";\n        echo getUserName($this->fields[\"users_id\"]);\n        echo \"<input type='hidden' name='users_id' value='\" . $this->fields['users_id'] . \"'>\\n\";\n        echo \"</td>\";\n        echo \"<td rowspan='$rowspan'>\" . __('Comments') . \"</td>\";\n        echo \"<td rowspan='$rowspan' class='middle'>\";\n        echo \"<textarea  class='form-control' rows='\" . ($rowspan + 3) . \"' name='comment' >\" . $this->fields[\"comment\"] .\n           \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Active') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo('is_active', $this->fields['is_active']);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Refresh rate') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showTimeStamp(\n            \"refresh_rate\",\n            ['value'                => $this->fields[\"refresh_rate\"],\n                'min'                  => HOUR_TIMESTAMP,\n                'max'                  => DAY_TIMESTAMP,\n                'step'                 => HOUR_TIMESTAMP,\n                'display_emptychoice'  => false,\n                'toadd'                => [5 * MINUTE_TIMESTAMP,\n                    15 * MINUTE_TIMESTAMP,\n                    30 * MINUTE_TIMESTAMP,\n                    45 * MINUTE_TIMESTAMP\n                ]\n            ]\n        );\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Number of items displayed') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showNumber(\"max_items\", ['value'                => $this->fields[\"max_items\"],\n            'min'                  => 5,\n            'max'                  => 100,\n            'step'                 => 5,\n            'toadd'                => [1],\n            'display_emptychoice'  => false\n        ]);\n        echo \"</td></tr>\\n\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . __('Error retrieving RSS feed') . \"</td>\";\n        echo \"<td>\";\n        if ($this->fields['have_error'] && !Toolbox::isUrlSafe($this->fields['url'])) {\n            echo sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url']);\n        } else {\n            echo Dropdown::getYesNo($this->fields['have_error']);\n        }\n        echo \"</td>\";\n        echo \"<td colspan='2'>&nbsp;</td>\";\n        echo \"</tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Set error field\n     *\n     * @param $error   (false by default\n     **/\n    public function setError($error = false)\n    {\n\n        if (!isset($this->fields['id']) && !isset($this->fields['have_error'])) {\n            return;\n        }\n\n       // Set error if not set\n        if ($error && !$this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 1\n            ]);\n        }\n       // Unset error if set\n        if (!$error && $this->fields['have_error']) {\n            $this->update(['id'         => $this->fields['id'],\n                'have_error' => 0\n            ]);\n        }\n    }\n\n\n    /**\n     * Show the feed content\n     **/\n    public function showFeedContent()\n    {\n\n        if (!$this->canViewItem()) {\n            return false;\n        }\n        $rss_feed = [\n            'items'  => []\n        ];\n        echo \"<div class='firstbloc'>\";\n        if ($feed = self::getRSSFeed($this->fields['url'], $this->fields['refresh_rate'])) {\n            $this->setError(false);\n            $rss_feed['title'] = $feed->get_title();\n            foreach ($feed->get_items(0, $this->fields['max_items']) as $item) {\n                $rss_feed['items'][] = [\n                    'title'     => $item->get_title(),\n                    'link'      => URL::sanitizeURL($item->get_permalink()),\n                    'timestamp' => Html::convDateTime($item->get_date('Y-m-d H:i:s')),\n                    'content'   => RichText::getSafeHtml($item->get_content()),\n                ];\n            }\n        } else {\n            $rss_feed['error'] = !Toolbox::isUrlSafe($this->fields['url'])\n                ? sprintf(__('URL \"%s\" is not allowed by your administrator.'), $this->fields['url'])\n                : __('Error retrieving RSS feed');\n            $this->setError(true);\n        }\n\n        TemplateRenderer::getInstance()->display('components/rss_feed.html.twig', [\n            'rss_feed'  => $rss_feed\n        ]);\n    }\n\n\n    /**\n     * Show discovered feeds\n     *\n     * @return void\n     *\n     * @deprecated\n     **/\n    public function showDiscoveredFeeds()\n    {\n        Toolbox::deprecated();\n        if (!Toolbox::isUrlSafe($this->fields['url'])) {\n            return;\n        }\n\n        $feed = new SimplePie();\n        $feed->set_cache_location(GLPI_RSS_DIR);\n        $feed->enable_cache(false);\n        $feed->set_feed_url($this->fields['url']);\n        $feed->init();\n        $feed->handle_content_type();\n\n        if ($feed->error()) {\n            return;\n        }\n\n        foreach ($feed->get_all_discovered_feeds() as $f) {\n            $newurl  = $f->url;\n            $newfeed = self::getRSSFeed($newurl);\n            if ($newfeed && !$newfeed->error()) {\n                $link = URL::sanitizeURL($newfeed->get_permalink());\n                if (!empty($link)) {\n                     echo \"<a href='$newurl'>\" . $newfeed->get_title() . \"</a>&nbsp;\";\n                     Html::showSimpleForm(\n                         $this->getFormURL(),\n                         'update',\n                         _x('button', 'Use'),\n                         ['id'  => $this->getID(),\n                             'url' => $newurl\n                         ]\n                     );\n                     echo \"<br>\";\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Get a specific RSS feed.\n     *\n     * @param string    $url            URL of the feed or array of URL\n     * @param int       $cache_duration Cache duration, in seconds\n     *\n     * @return SimplePie|false\n     **/\n    public static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP)\n    {\n        global $GLPI_CACHE;\n\n        if (Sanitizer::isHtmlEncoded($url)) {\n            $url = Sanitizer::decodeHtmlSpecialChars($url);\n        }\n\n        // Fetch feed data, unless it is already cached\n        $cache_key = sha1($url);\n        $update_cache = false;\n        if (($raw_data = $GLPI_CACHE->get($cache_key)) === null) {\n            if (!Toolbox::isUrlSafe($url)) {\n                return false;\n            }\n\n            $error_msg  = null;\n            $curl_error = null;\n            $raw_data = Toolbox::callCurl($url, [], $error_msg, $curl_error, true);\n            if (empty($raw_data)) {\n                return false;\n            }\n\n            $doc = new DOMDocument();\n            if (!@$doc->loadXML($raw_data)) {\n                // Prevent exception on invalid XML (see https://github.com/simplepie/simplepie/pull/747)\n                return false;\n            }\n\n            $update_cache = true;\n        }\n\n        $feed = new SimplePie();\n        $feed->enable_cache(false);\n        $feed->set_raw_data($raw_data);\n        $feed->force_feed(true);\n        // Initialize the whole SimplePie object. Read the feed, process it, parse it, cache it, and\n        // all that other good stuff. The feed's information will not be available to SimplePie before\n        // this is called.\n        $feed->init();\n\n        if ($feed->error()) {\n            return false;\n        }\n\n        if ($update_cache) {\n            $GLPI_CACHE->set($cache_key, $raw_data, $cache_duration);\n        }\n\n        return $feed;\n    }\n\n\n    /**\n     * Show list for central view\n     *\n     * @param $personal boolean   display rssfeeds created by me ?\n     * @param $personal $display  if false, return html\n     *\n     * @return void\n     **/\n    public static function showListForCentral(bool $personal = true, bool $display = true)\n    {\n        global $DB, $CFG_GLPI;\n\n        $users_id             = Session::getLoginUserID();\n\n        $table = self::getTable();\n        $criteria = [\n            'SELECT'   => \"$table.*\",\n            'DISTINCT' => true,\n            'FROM'     => $table,\n            'ORDER'    => \"$table.name\"\n        ];\n\n        if ($personal) {\n           /// Personal notes only for central view\n            if (Session::getCurrentInterface() == 'helpdesk') {\n                return false;\n            }\n\n            $criteria['WHERE'][\"$table.users_id\"] = $users_id;\n            $criteria['WHERE'][\"$table.is_active\"] = 1;\n\n            $titre = \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php'>\" .\n                    _n('Personal RSS feed', 'Personal RSS feeds', Session::getPluralNumber()) . \"</a>\";\n        } else {\n           // Show public rssfeeds / not mines : need to have access to public rssfeeds\n            if (!self::canView()) {\n                return false;\n            }\n\n            $criteria = $criteria + self::getVisibilityCriteria();\n\n           // Only personal on central so do not keep it\n            if (Session::getCurrentInterface() == 'central') {\n                $criteria['WHERE'][\"$table.users_id\"] = ['<>', $users_id];\n            }\n\n            if (Session::getCurrentInterface() == 'central') {\n                $titre = \"<a href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/rssfeed.php\\\">\" .\n                       _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber()) . \"</a>\";\n            } else {\n                $titre = _n('Public RSS feed', 'Public RSS feeds', Session::getPluralNumber());\n            }\n        }\n\n        $iterator = $DB->request($criteria);\n        $nb = count($iterator);\n        $items   = [];\n        $rssfeed = new self();\n        foreach ($iterator as $data) {\n            if ($rssfeed->getFromDB($data['id'])) {\n               // Force fetching feeds\n                if ($feed = self::getRSSFeed($data['url'], $data['refresh_rate'])) {\n                    // Store feeds in array of feeds\n                    $items = array_merge($items, $feed->get_items(0, $data['max_items']));\n                    $rssfeed->setError(false);\n                } else {\n                    $rssfeed->setError(true);\n                }\n            }\n        }\n\n        $output = \"\";\n        $output .= \"<table class='table table-striped table-hover card-table'>\";\n        $output .= \"<thead>\";\n        $output .= \"<tr class='noHover'><th colspan='2'><div class='relative'><span>$titre</span>\";\n\n        if (\n            ($personal && self::canCreate())\n            || (!$personal && Session::haveRight('rssfeed_public', CREATE))\n        ) {\n            $output .= \"<span class='float-end'>\";\n            $output .= \"<a href='\" . RSSFeed::getFormURL() . \"'>\";\n            $output .= \"<img src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/plus.png' alt='\" . __s('Add') . \"' title=\\\"\" .\n                __s('Add') . \"\\\"></a></span>\";\n        }\n\n        $output .= \"</div></th></tr>\";\n        $output .= \"</thead>\";\n\n        if ($nb) {\n            usort($items, ['SimplePie', 'sort_items']);\n            foreach ($items as $item) {\n                $output .= \"<tr class='tab_bg_1'><td>\";\n                $output .= Html::convDateTime($item->get_date('Y-m-d H:i:s'));\n                $output .= \"</td><td>\";\n                $feed_link = URL::sanitizeURL($item->feed->get_permalink());\n                if (empty($feed_link)) {\n                    $output .= $item->feed->get_title();\n                } else {\n                    $output .= '<a target=\"_blank\" href=\"' . htmlspecialchars($feed_link) . '\">' . $item->feed->get_title() . '</a>';\n                }\n\n                $item_link = URL::sanitizeURL($item->get_permalink());\n                $rand = mt_rand();\n                $output .= \"<div id='rssitem$rand'>\";\n                if (!empty($item_link)) {\n                    $output .= '<a target=\"_blank\" href=\"' . htmlspecialchars($item_link) . '\">';\n                }\n                $output .= $item->get_title();\n                if (!empty($item_link)) {\n                    $output .= \"</a>\";\n                }\n                $output .= \"</div>\";\n                $output .= Html::showToolTip(RichText::getEnhancedHtml($item->get_content()), [\n                    'applyto' => \"rssitem$rand\",\n                    'display' => false\n                ]);\n                $output .= \"</td></tr>\";\n            }\n        }\n        $output .= \"</table>\";\n\n        if ($display) {\n            echo $output;\n        } else {\n            return $output;\n        }\n    }\n\n    /**\n     * @since 0.85\n     *\n     * @see commonDBTM::getRights()\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        if ($interface == 'helpdesk') {\n            $values = [READ => __('Read')];\n        } else {\n            $values = parent::getRights();\n            $values[self::PERSONAL] = __('Manage personal');\n        }\n        return $values;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-rss\";\n    }\n}\n"], "filenames": ["CHANGELOG.md", "src/RSSFeed.php"], "buggy_code_start_loc": [24, 793], "buggy_code_end_loc": [24, 879], "fixing_code_start_loc": [25, 793], "fixing_code_end_loc": [26, 876], "type": "CWE-918", "message": "GLPI is a free asset and IT management software package. Starting in version 0.84 and prior to versions 9.5.13 and 10.0.7, usage of RSS feeds is subject to server-side request forgery (SSRF). In case the remote address is not a valid RSS feed, an RSS autodiscovery feature is triggered. This feature does not check safety or URLs. Versions 9.5.13 and 10.0.7 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2023-28633", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-05T16:15:08.040", "lastModified": "2023-04-12T15:46:03.637", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a free asset and IT management software package. Starting in version 0.84 and prior to versions 9.5.13 and 10.0.7, usage of RSS feeds is subject to server-side request forgery (SSRF). In case the remote address is not a valid RSS feed, an RSS autodiscovery feature is triggered. This feature does not check safety or URLs. Versions 9.5.13 and 10.0.7 contain a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.84", "versionEndExcluding": "9.5.13", "matchCriteriaId": "D7C5D95C-F093-4B44-BF03-837C1D882066"}, {"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.0.7", "matchCriteriaId": "D2989977-4BC4-4420-A342-3BF0E09591FB"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/e2819da64c9075050805a44c834e1f4dc621a982", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/glpi-project/glpi/releases/tag/10.0.7", "source": "security-advisories@github.com", "tags": ["Patch", "Release Notes"]}, {"url": "https://github.com/glpi-project/glpi/releases/tag/9.5.13", "source": "security-advisories@github.com", "tags": ["Patch", "Release Notes"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-r57v-j88m-rwwf", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/e2819da64c9075050805a44c834e1f4dc621a982"}}