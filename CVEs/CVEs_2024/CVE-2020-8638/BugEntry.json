{"buggy_code": ["<?php\n/** \n * TestLink Open Source Project - http://testlink.sourceforge.net/\n * This script is distributed under the GNU General Public License 2 or later.\n * \n * @package     TestLink\n * @author      Martin Havlat\n * @copyright   2007-2014, TestLink community \n * @filesource  testPlanUrgency.class.php\n * @link        http://www.testlink.org\n *\n * @internal revisions\n * @since 1.9.13\n */ \n\n/** \n * Class testPlanUrgency extends testPlan functionality by Test Urgency functions \n * - modify and list Test Urgency\n * \n * @package TestLink\n * @author  Martin Havlat\n * @since   1.8 - 17.7.2008\n */\nclass testPlanUrgency extends testplan\n{\n  /**\n   * Set Test urgency for test case version in a Test Plan\n   * \n   * @param integer $testplan_id Test Plan ID\n   * @param integer $tc_id Test Case version to set Urgency\n   * @param integer $urgency\n   * \n   * @return integer result code\n   */\n  public function setTestUrgency($testplan_id, $tc_id, $urgency)\n  {\n    $sql = \" UPDATE {$this->tables['testplan_tcversions']} SET urgency={$urgency} \" .\n           \" WHERE testplan_id=\" . $this->db->prepare_int($testplan_id) .\n           \" AND tcversion_id=\" . $this->db->prepare_int($tc_id);\n    $result = $this->db->exec_query($sql);\n\n    return $result ? tl::OK : tl::ERROR;\n  }\n\n\n\n  /**\n   * Set urgency for TCs (direct child only) within a Test Suite and Test Plan\n   * \n   * @param integer $testplan_id Test Plan ID\n   * @param integer $node_id Test Suite to set Urgency\n   * @param integer $urgency\n   * \n   * @return integer result code\n   * \n   * @internal \n   * 20081212 - franciscom - Postgres do not like SQL syntax with JOIN\n   *  $sql = 'UPDATE testplan_tcversions ' .\n   *  ' JOIN nodes_hierarchy NHA ON testplan_tcversions.tcversion_id = NHA.id '.\n   *  ' JOIN nodes_hierarchy NHB ON NHA.parent_id = NHB.id' .\n   *  ' SET urgency=' . $urgency .\n   *  ' WHERE testplan_tcversions.testplan_id=' . $testplan_id .\n   *  ' AND NHB.parent_id=' . $node_id; \n   */ \n  public function setSuiteUrgency($testplan_id, $node_id, $urgency)\n  {\n    $sql = \" UPDATE {$this->tables['testplan_tcversions']} \" . \n           \" SET urgency=\" . $this->db->prepare_int($urgency) .\n           \" WHERE testplan_id= \" . $this->db->prepare_int($testplan_id) .\n           \" AND tcversion_id IN (\" .\n           \" SELECT NHB.id \" . \n           \" FROM {$this->tables['nodes_hierarchy']}  NHA, \" .\n           \" {$this->tables['nodes_hierarchy']} NHB, {$this->tables['node_types']} NT \" .\n           \" WHERE NHA.node_type_id = NT.id \" .\n           \" AND NT.description='testcase' \" . \n           \" AND NHB.parent_id = NHA.id \" . \n           \" AND NHA.parent_id = \" . $this->db->prepare_int($node_id) . \" )\";\n\n    $result = $this->db->exec_query($sql);\n    return $result ? OK : ERROR;;\n  }\n  \n  /**\n   * Collect urgency for a Test Suite within a Test Plan\n   * \n   * @used-by planUrgency.php\n   *\n   *\n   * @param integer $testplan_id Test Plan ID\n   * @param integer $node_id Test Suite \n   * @param integer $testproject_id\n   *\n   * @return array of array testcase_id, name, urgency, tcprefix, tc_external_id \n   * \n   * @internal revisions\n   */\n  public function getSuiteUrgency($context,$options=null,$filters=null)\n  {\n\n    $node_id = intval($context->tsuite_id); \n    $testplan_id = intval($context->tplan_id);\n    $platform_id = property_exists($context, 'platform_id') ? intval($context->platform_id) : 0;\n    $testproject_id = property_exists($context, 'tproject_id') ? intval($context->tproject_id) : null;\n\n    $testcase_cfg = config_get('testcase_cfg');  \n    $moreFields = '';\n    $moreJoins = '';\n\n    $my['options'] = array('build4testers' => 0);\n    $my['options'] = array_merge($my['options'], (array)$options);\n\n    $my['filters'] = array('testcases' => null);\n    $my['filters'] = array_merge($my['filters'], (array)$filters);\n\n    if( $my['options']['build4testers'] != 0 )\n    {\n      $tasks = $this->assignment_types;\n\n      // ATTENTION:\n      // Remember that test case execution task can be assigned to MULTIPLE USERS\n      $moreFields = ',USERS.login AS assigned_to, USERS.first, USERS.last ';\n\n      $moreJoins = \" LEFT JOIN {$this->tables['user_assignments']} UA \" .\n                    \" ON UA.feature_id = TPTCV.id \" .\n                    \" AND UA.type = \" . $tasks['testcase_execution']['id'] .\n                    \" AND UA.build_id = \" . $my['options']['build4testers'] .\n                    \" LEFT JOIN {$this->tables['users']} USERS \" .\n                    \" ON USERS.id = UA.user_id \";\n    }     \n\n\n\n    $sql = \" SELECT testprojects.prefix  FROM {$this->tables['testprojects']} testprojects \" .\n           \" WHERE testprojects.id = \";\n    \n    if( !is_null($testproject_id) )\n    {\n      $sql .= intval($testproject_id);  \n    }      \n    else\n    {\n      $sql .= \"( SELECT parent_id AS testproject_id FROM {$this->tables['nodes_hierarchy']} \" .\n              \"  WHERE id=\" . intval($testplan_id) . \" ) \";\n    }\n    \n    $tcprefix = $this->db->fetchOneValue($sql) . $testcase_cfg->glue_character;\n    $tcprefix = $this->db->prepare_string($tcprefix);\n    \n    $sql = \" SELECT DISTINCT '{$tcprefix}' AS tcprefix, NHB.name, NHB.node_order,\" .\n           \" NHA.parent_id AS testcase_id, TCV.tc_external_id, TPTCV.tcversion_id,\".\n           \" TPTCV.urgency, TCV.importance, (TCV.importance * TPTCV.urgency) AS priority\" .\n           $moreFields .\n           \" FROM {$this->tables['nodes_hierarchy']} NHA \" .\n           \" JOIN {$this->tables['nodes_hierarchy']} NHB ON NHA.parent_id = NHB.id \" .\n           \" JOIN {$this->tables['testplan_tcversions']} TPTCV \" .\n           \" ON TPTCV.tcversion_id=NHA.id \" .\n           \" JOIN {$this->tables['tcversions']}  TCV ON TCV.id = TPTCV.tcversion_id \" .\n           $moreJoins;\n\n    $sql .= \" WHERE TPTCV.testplan_id=\" . $this->db->prepare_int($testplan_id) .\n            \" AND NHB.parent_id=\" . $this->db->prepare_int($node_id);\n\n    if($platform_id > 0)\n    {\n      $sql .= \" AND TPTCV.platform_id=\" . $this->db->prepare_int($platform_id);\n    }        \n\n    if( !is_null($my['filters']['testcases']) )\n    {\n      // sanitize\n      $loop2do = count($my['filters']['testcases']);\n      for($gdx=0; $gdx < $loop2do; $gdx++)\n      {\n        $my['filters']['testcases'][$gdx] = intval($my['filters']['testcases'][$gdx]);\n      }  \n      $sql .= \" AND NHB.id IN (\" . implode(\",\", $my['filters']['testcases']) . \") \";\n    }  \n\n    $sql .= \" ORDER BY NHB.node_order\";\n\n    return $this->db->fetchRowsIntoMap($sql,'tcversion_id',database::CUMULATIVE);\n  }\n  \n  /**\n   * Returns priority (urgency * importance) as HIGH, MEDUIM or LOW depending on value\n   * \n   *\n   * @param integer $testplan_id Test Plan ID\n   * @param  $filters: optional, map with following keys\n   * @param  $options: optional, map with following keys\n   *\n   * @return \n   */\n  public function getPriority($testplan_id, $filters=null, $options=null)\n  {\n    $debugMsg = 'Class:' . __CLASS__ . ' - Method: ' . __FUNCTION__;\n    $rs = null;\n    $my = array ('filters' => array('platform_id' => null, 'tcversion_id' =>null), \n                 'options' => array('details' => 'tcversion'));\n    $my['filters'] = array_merge($my['filters'], (array)$filters);\n    $my['options'] = array_merge($my['options'], (array)$options);\n\n    $sqlFilter = '';\n    if( !is_null($my['filters']['platform_id']) )\n    {\n      $sqlFilter .= \" AND TPTCV.platform_id = {$my['filters']['platform_id']} \";\n    }\n\n    if( !is_null($my['filters']['tcversion_id']) )\n    {\n      $dummy = implode(',',(array)$my['filters']['tcversion_id']);\n      $sqlFilter .= \" AND TPTCV.tcversion_id IN ({$dummy}) \";\n    }\n        \n    $sql = \"/* $debugMsg */ \";\n    $sql .= \" SELECT (urgency * importance) AS priority,  \" .\n            \" urgency,importance, \" .\n            LOW . \" AS priority_level, TPTCV.tcversion_id %CLAUSE%\" .\n            \" FROM {$this->tables['testplan_tcversions']} TPTCV \" .\n            \" JOIN {$this->tables['tcversions']} TCV ON TPTCV.tcversion_id = TCV.id \" .\n            \" WHERE TPTCV.testplan_id = {$testplan_id} {$sqlFilter}\";\n          \n    switch($my['options']['details'])\n    {\n      case 'tcversion':\n        $sql = str_ireplace(\"%CLAUSE%\", \"\", $sql);\n        $rs = $this->db->fetchRowsIntoMap($sql,'tcversion_id');\n      break;\n\n      case 'platform':\n        $sql = str_ireplace(\"%CLAUSE%\", \", TPTCV.platform_id\", $sql);\n        $rs = $this->db->fetchMapRowsIntoMap($sql,'tcversion_id','platform_id');\n      break;\n    }       \n    \n    if( !is_null($rs) )\n    {\n      $key2loop = array_keys($rs);\n      switch($my['options']['details'])\n      {\n        case 'tcversion':\n          foreach($key2loop as $key)\n          {\n            $rs[$key]['priority_level'] = priority_to_level($rs[$key]['priority']);\n          }\n        break;\n\n        case 'platform':\n          foreach($key2loop as  $key)\n          {\n            $platformSet = array_keys($rs[$key]);\n            foreach($platformSet as $platform_id) \n            {\n              $rs[$key][$platform_id]['priority_level'] = priority_to_level($rs[$key][$platform_id]['priority']);\n            }\n          }\n        break;\n      } // switch\n    } // !is_null\n\n    return $rs;\n  } \n  \n} // end of class", "<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/\n * This script is distributed under the GNU General Public License 2 or later.\n * \n *\n * @filesource  planUrgency.php\n * @package     TestLink\n * @author      Martin Havlat\n * @copyright   2003-2014, TestLink community \n * @link        http://www.testlink.org\n * \n * @internal revisions\n * @since 1.9.13\n **/\n \nrequire('../../config.inc.php');\nrequire_once('common.php');\ntestlinkInitPage($db,false,false,\"checkRights\");\n$args = init_args();\n\nif($args->show_help)\n{\n  show_instructions('test_urgency');\n  exit();  \n}\n$templateCfg = templateConfiguration();\n$tplan_mgr = new testPlanUrgency($db);\n$gui = initializeGui($args,$tplan_mgr->tree_manager);\n\nif( $args->urgency != OFF || isset($args->urgency_tc) )\n{\n  $gui->user_feedback = doProcess($args,$tplan_mgr);\n}  \n\n\n// get the current urgency for child test cases\n$context = new stdClass();\n$context->tplan_id = $args->tplan_id;\n$context->tsuite_id = $args->node_id;\n$context->tproject_id = $args->tproject_id;\n$context->platform_id = $args->platform_id;\n\n$gui->listTestCases = $tplan_mgr->getSuiteUrgency($context,array('build4testers' => $args->build4testers),\n                                                  array('testcases' => $args->testCaseSet));\n\nforeach($gui->listTestCases as $tcversion_id => $tcaseSet) \n{\n  foreach($tcaseSet as $idx => $tcase)\n  {\n    $gui->listTestCases[$tcversion_id][$idx]['priority'] = priority_to_level($tcase['priority']);\n  }  \n}\n\n$smarty = new TLSmarty();\n$smarty->assign('gui', $gui);\n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n/*\n  function: init_args()\n\n  args: -\n  \n  returns: object with user input.\n\n*/\nfunction init_args()\n{\n  $_REQUEST = strings_stripSlashes($_REQUEST);\n    \n  $args = new stdClass();\n  $args->show_help = (isset($_REQUEST['level']) && $_REQUEST['level']=='testproject');\n    \n  $args->tproject_id = intval(isset($_REQUEST['tproject_id']) ? $_REQUEST['tproject_id'] : $_SESSION['testprojectID']);\n  $args->tplan_id = intval(isset($_REQUEST['tplan_id']) ? $_REQUEST['tplan_id'] : $_SESSION['testplanID']);\n  $args->tplan_name = $_SESSION['testplanName'];\n  $args->node_type = isset($_REQUEST['level']) ? $_REQUEST['level'] : OFF;\n  $args->node_id = isset($_REQUEST['id']) ? $_REQUEST['id'] : ERROR;\n\n  // Sets urgency for suite\n \n  if (isset($_REQUEST['high_urgency']))\n  {  \n    $args->urgency = HIGH;\n  }\n  elseif (isset($_REQUEST['medium_urgency']))\n  {  \n    $args->urgency = MEDIUM;\n  }\n  elseif (isset($_REQUEST['low_urgency']))\n  {  \n    $args->urgency = LOW;\n  }\n  else\n  {\n    $args->urgency = OFF;\n  }  \n\n  // Sets urgency for every single tc\n  if (isset($_REQUEST['urgency'])) \n  {\n    $args->urgency_tc = $_REQUEST['urgency'];\n  }\n\n  // For more information about the data accessed in session here, see the comment\n  // in the file header of lib/functions/tlTestCaseFilterControl.class.php.\n  $args->treeFormToken = isset($_REQUEST['form_token']) ? $_REQUEST['form_token'] : 0;\n  $mode = 'plan_mode';\n  $session_data = isset($_SESSION[$mode]) && isset($_SESSION[$mode][$args->treeFormToken]) ? \n                  $_SESSION[$mode][$args->treeFormToken] : null;\n\n\n  $args->testCaseSet = $session_data['testcases_to_show'];\n  $args->build4testers = intval($session_data['setting_build']);\n  $args->platform_id = intval($session_data['setting_platform']);\n      \n  return $args;\n}\n\n/**\n *\n */\nfunction initializeGui(&$argsObj,&$treeMgr)\n{\n  $guiObj = new stdClass();\n\n  $ni = $treeMgr->get_node_hierarchy_info($argsObj->node_id);\n  $guiObj->node_name = $ni['name'];\n  $guiObj->user_feedback = null;\n  $guiObj->node_id = $argsObj->node_id;\n  $guiObj->tplan_id = $argsObj->tplan_id;\n  $guiObj->tplan_name = $argsObj->tplan_name;\n  $guiObj->formToken = $argsObj->treeFormToken;\n  return $guiObj;\n} \n\n\n/**\n *\n */\nfunction doProcess(&$argsObj,&$tplanMgr)\n{\n  $userFeedback = null;\n\n  // Set urgency for test suite\n  if($argsObj->urgency != OFF)\n  {\n    $userFeedback['type'] = $tplanMgr->setSuiteUrgency($argsObj->tplan_id, $argsObj->node_id, $argsObj->urgency);\n    $userFeedback['message'] = lang_get(($userFeedback['type'] == OK) ? \"feedback_urgency_ok\" : \"feedback_urgency_fail\");\n  }\n\n  // Set urgency for individual testcases\n  if(isset($argsObj->urgency_tc))\n  {\n    foreach ($argsObj->urgency_tc as $id => $urgency) \n    {\n      $tplanMgr->setTestUrgency($argsObj->tplan_id, $id, $urgency);\n    }\n  }\n\n  return $userFeedback;\n}\n\n\n\nfunction checkRights(&$db,&$user)\n{\n  return $user->hasRight($db,'testplan_planning');\n}"], "fixing_code": ["<?php\n/** \n * TestLink Open Source Project - http://testlink.sourceforge.net/\n * This script is distributed under the GNU General Public License 2 or later.\n * \n * @package     TestLink\n * @author      Martin Havlat\n * @copyright   2007-2020, TestLink community \n * @filesource  testPlanUrgency.class.php\n * @link        http://www.testlink.org\n *\n */ \n\n/** \n * Class testPlanUrgency extends testPlan functionality by Test Urgency functions \n * - modify and list Test Urgency\n * \n * @package TestLink\n * @author  Martin Havlat\n * @since   1.8 - 17.7.2008\n */\nclass testPlanUrgency extends testplan\n{\n  /**\n   * Set Test urgency for test case version in a Test Plan\n   * \n   * @param integer $testplan_id Test Plan ID\n   * @param integer $tc_id Test Case version to set Urgency\n   * @param integer $urgency\n   * \n   * @return integer result code\n   */\n  public function setTestUrgency($testplan_id, $tc_id, $urgency)\n  {\n    $sql = \" UPDATE {$this->tables['testplan_tcversions']} \n             SET urgency=\" \n             . $this->db->prepare_int($urgency) . \n           \" WHERE testplan_id=\" \n             . $this->db->prepare_int($testplan_id) .\n           \" AND tcversion_id=\" . $this->db->prepare_int($tc_id);\n\n    $result = $this->db->exec_query($sql);\n\n    return $result ? tl::OK : tl::ERROR;\n  }\n\n  /**\n   * Set urgency for TCs (direct child only) within a Test Suite and Test Plan\n   * \n   * @param integer $testplan_id Test Plan ID\n   * @param integer $node_id Test Suite to set Urgency\n   * @param integer $urgency\n   * \n   * @return integer result code\n   * \n   * @internal \n   * 20081212 - franciscom - Postgres do not like SQL syntax with JOIN\n   *  $sql = 'UPDATE testplan_tcversions ' .\n   *  ' JOIN nodes_hierarchy NHA ON testplan_tcversions.tcversion_id = NHA.id '.\n   *  ' JOIN nodes_hierarchy NHB ON NHA.parent_id = NHB.id' .\n   *  ' SET urgency=' . $urgency .\n   *  ' WHERE testplan_tcversions.testplan_id=' . $testplan_id .\n   *  ' AND NHB.parent_id=' . $node_id; \n   */ \n  public function setSuiteUrgency($testplan_id, $node_id, $urgency)\n  {\n    $sql = \" UPDATE {$this->tables['testplan_tcversions']} \" . \n           \" SET urgency=\" . $this->db->prepare_int($urgency) .\n           \" WHERE testplan_id= \" . $this->db->prepare_int($testplan_id) .\n           \" AND tcversion_id IN (\" .\n           \" SELECT NHB.id \" . \n           \" FROM {$this->tables['nodes_hierarchy']}  NHA, \" .\n           \" {$this->tables['nodes_hierarchy']} NHB, {$this->tables['node_types']} NT \" .\n           \" WHERE NHA.node_type_id = NT.id \" .\n           \" AND NT.description='testcase' \" . \n           \" AND NHB.parent_id = NHA.id \" . \n           \" AND NHA.parent_id = \" . $this->db->prepare_int($node_id) . \" )\";\n\n    $result = $this->db->exec_query($sql);\n    return $result ? OK : ERROR;;\n  }\n  \n  /**\n   * Collect urgency for a Test Suite within a Test Plan\n   * \n   * @used-by planUrgency.php\n   *\n   *\n   * @param integer $testplan_id Test Plan ID\n   * @param integer $node_id Test Suite \n   * @param integer $testproject_id\n   *\n   * @return array of array testcase_id, name, urgency, tcprefix, tc_external_id \n   * \n   * @internal revisions\n   */\n  public function getSuiteUrgency($context,$options=null,$filters=null)\n  {\n\n    $node_id = intval($context->tsuite_id); \n    $testplan_id = intval($context->tplan_id);\n    $platform_id = property_exists($context, 'platform_id') ? intval($context->platform_id) : 0;\n    $testproject_id = property_exists($context, 'tproject_id') ? intval($context->tproject_id) : null;\n\n    $testcase_cfg = config_get('testcase_cfg');  \n    $moreFields = '';\n    $moreJoins = '';\n\n    $my['options'] = array('build4testers' => 0);\n    $my['options'] = array_merge($my['options'], (array)$options);\n\n    $my['filters'] = array('testcases' => null);\n    $my['filters'] = array_merge($my['filters'], (array)$filters);\n\n    if( $my['options']['build4testers'] != 0 )\n    {\n      $tasks = $this->assignment_types;\n\n      // ATTENTION:\n      // Remember that test case execution task can be assigned to MULTIPLE USERS\n      $moreFields = ',USERS.login AS assigned_to, USERS.first, USERS.last ';\n\n      $moreJoins = \" LEFT JOIN {$this->tables['user_assignments']} UA \" .\n                    \" ON UA.feature_id = TPTCV.id \" .\n                    \" AND UA.type = \" . $tasks['testcase_execution']['id'] .\n                    \" AND UA.build_id = \" . $my['options']['build4testers'] .\n                    \" LEFT JOIN {$this->tables['users']} USERS \" .\n                    \" ON USERS.id = UA.user_id \";\n    }     \n\n\n\n    $sql = \" SELECT testprojects.prefix  FROM {$this->tables['testprojects']} testprojects \" .\n           \" WHERE testprojects.id = \";\n    \n    if( !is_null($testproject_id) )\n    {\n      $sql .= intval($testproject_id);  \n    }      \n    else\n    {\n      $sql .= \"( SELECT parent_id AS testproject_id FROM {$this->tables['nodes_hierarchy']} \" .\n              \"  WHERE id=\" . intval($testplan_id) . \" ) \";\n    }\n    \n    $tcprefix = $this->db->fetchOneValue($sql) . $testcase_cfg->glue_character;\n    $tcprefix = $this->db->prepare_string($tcprefix);\n    \n    $sql = \" SELECT DISTINCT '{$tcprefix}' AS tcprefix, NHB.name, NHB.node_order,\" .\n           \" NHA.parent_id AS testcase_id, TCV.tc_external_id, TPTCV.tcversion_id,\".\n           \" TPTCV.urgency, TCV.importance, (TCV.importance * TPTCV.urgency) AS priority\" .\n           $moreFields .\n           \" FROM {$this->tables['nodes_hierarchy']} NHA \" .\n           \" JOIN {$this->tables['nodes_hierarchy']} NHB ON NHA.parent_id = NHB.id \" .\n           \" JOIN {$this->tables['testplan_tcversions']} TPTCV \" .\n           \" ON TPTCV.tcversion_id=NHA.id \" .\n           \" JOIN {$this->tables['tcversions']}  TCV ON TCV.id = TPTCV.tcversion_id \" .\n           $moreJoins;\n\n    $sql .= \" WHERE TPTCV.testplan_id=\" . $this->db->prepare_int($testplan_id) .\n            \" AND NHB.parent_id=\" . $this->db->prepare_int($node_id);\n\n    if($platform_id > 0)\n    {\n      $sql .= \" AND TPTCV.platform_id=\" . $this->db->prepare_int($platform_id);\n    }        \n\n    if( !is_null($my['filters']['testcases']) )\n    {\n      // sanitize\n      $loop2do = count($my['filters']['testcases']);\n      for($gdx=0; $gdx < $loop2do; $gdx++)\n      {\n        $my['filters']['testcases'][$gdx] = intval($my['filters']['testcases'][$gdx]);\n      }  \n      $sql .= \" AND NHB.id IN (\" . implode(\",\", $my['filters']['testcases']) . \") \";\n    }  \n\n    $sql .= \" ORDER BY NHB.node_order\";\n\n    return $this->db->fetchRowsIntoMap($sql,'tcversion_id',database::CUMULATIVE);\n  }\n  \n  /**\n   * Returns priority (urgency * importance) as HIGH, MEDUIM or LOW depending on value\n   * \n   *\n   * @param integer $testplan_id Test Plan ID\n   * @param  $filters: optional, map with following keys\n   * @param  $options: optional, map with following keys\n   *\n   * @return \n   */\n  public function getPriority($testplan_id, $filters=null, $options=null)\n  {\n    $debugMsg = 'Class:' . __CLASS__ . ' - Method: ' . __FUNCTION__;\n    $rs = null;\n    $my = array ('filters' => array('platform_id' => null, 'tcversion_id' =>null), \n                 'options' => array('details' => 'tcversion'));\n    $my['filters'] = array_merge($my['filters'], (array)$filters);\n    $my['options'] = array_merge($my['options'], (array)$options);\n\n    $sqlFilter = '';\n    if( !is_null($my['filters']['platform_id']) )\n    {\n      $sqlFilter .= \" AND TPTCV.platform_id = {$my['filters']['platform_id']} \";\n    }\n\n    if( !is_null($my['filters']['tcversion_id']) )\n    {\n      $dummy = implode(',',(array)$my['filters']['tcversion_id']);\n      $sqlFilter .= \" AND TPTCV.tcversion_id IN ({$dummy}) \";\n    }\n        \n    $sql = \"/* $debugMsg */ \";\n    $sql .= \" SELECT (urgency * importance) AS priority,  \" .\n            \" urgency,importance, \" .\n            LOW . \" AS priority_level, TPTCV.tcversion_id %CLAUSE%\" .\n            \" FROM {$this->tables['testplan_tcversions']} TPTCV \" .\n            \" JOIN {$this->tables['tcversions']} TCV ON TPTCV.tcversion_id = TCV.id \" .\n            \" WHERE TPTCV.testplan_id = {$testplan_id} {$sqlFilter}\";\n          \n    switch($my['options']['details'])\n    {\n      case 'tcversion':\n        $sql = str_ireplace(\"%CLAUSE%\", \"\", $sql);\n        $rs = $this->db->fetchRowsIntoMap($sql,'tcversion_id');\n      break;\n\n      case 'platform':\n        $sql = str_ireplace(\"%CLAUSE%\", \", TPTCV.platform_id\", $sql);\n        $rs = $this->db->fetchMapRowsIntoMap($sql,'tcversion_id','platform_id');\n      break;\n    }       \n    \n    if( !is_null($rs) )\n    {\n      $key2loop = array_keys($rs);\n      switch($my['options']['details'])\n      {\n        case 'tcversion':\n          foreach($key2loop as $key)\n          {\n            $rs[$key]['priority_level'] = priority_to_level($rs[$key]['priority']);\n          }\n        break;\n\n        case 'platform':\n          foreach($key2loop as  $key)\n          {\n            $platformSet = array_keys($rs[$key]);\n            foreach($platformSet as $platform_id) \n            {\n              $rs[$key][$platform_id]['priority_level'] = priority_to_level($rs[$key][$platform_id]['priority']);\n            }\n          }\n        break;\n      } // switch\n    } // !is_null\n\n    return $rs;\n  } \n  \n} // end of class", "<?php\n/**\n * TestLink Open Source Project - http://testlink.sourceforge.net/\n * This script is distributed under the GNU General Public License 2 or later.\n * \n *\n * @filesource  planUrgency.php\n * @package     TestLink\n * @author      Martin Havlat\n * @copyright   2003-2020, TestLink community \n * @link        http://www.testlink.org\n * \n **/\n \nrequire('../../config.inc.php');\nrequire_once('common.php');\ntestlinkInitPage($db,false,false,\"checkRights\");\n$args = init_args();\n\nif ($args->show_help) {\n  show_instructions('test_urgency');\n  exit();  \n}\n\n$templateCfg = templateConfiguration();\n$tplan_mgr = new testPlanUrgency($db);\n$gui = initializeGui($args,$tplan_mgr->tree_manager);\n\nif ($args->urgency != OFF || isset($args->urgency_tc)){\n  $gui->user_feedback = doProcess($args,$tplan_mgr);\n}  \n\n\n// get the current urgency for child test cases\n$context = new stdClass();\n$context->tplan_id = $args->tplan_id;\n$context->tsuite_id = $args->node_id;\n$context->tproject_id = $args->tproject_id;\n$context->platform_id = $args->platform_id;\n\n$gui->listTestCases = $tplan_mgr->getSuiteUrgency($context,array('build4testers' => $args->build4testers),\n                                                  array('testcases' => $args->testCaseSet));\n\nforeach($gui->listTestCases as $tcversion_id => $tcaseSet) \n{\n  foreach($tcaseSet as $idx => $tcase)\n  {\n    $gui->listTestCases[$tcversion_id][$idx]['priority'] = priority_to_level($tcase['priority']);\n  }  \n}\n\n$smarty = new TLSmarty();\n$smarty->assign('gui', $gui);\n$smarty->display($templateCfg->template_dir . $templateCfg->default_template);\n\n\n/*\n  function: init_args()\n\n  args: -\n  \n  returns: object with user input.\n\n*/\nfunction init_args()\n{\n  $_REQUEST = strings_stripSlashes($_REQUEST);\n    \n  $args = new stdClass();\n  $args->show_help = (isset($_REQUEST['level']) && $_REQUEST['level']=='testproject');\n    \n  $args->tproject_id = intval(isset($_REQUEST['tproject_id']) ? $_REQUEST['tproject_id'] : $_SESSION['testprojectID']);\n  $args->tplan_id = intval(isset($_REQUEST['tplan_id']) ? $_REQUEST['tplan_id'] : $_SESSION['testplanID']);\n  $args->tplan_name = $_SESSION['testplanName'];\n  $args->node_type = isset($_REQUEST['level']) ? $_REQUEST['level'] : OFF;\n  $args->node_id = isset($_REQUEST['id']) ? $_REQUEST['id'] : ERROR;\n\n  // Sets urgency for suite\n \n  if (isset($_REQUEST['high_urgency'])) {  \n    $args->urgency = HIGH;\n  } elseif (isset($_REQUEST['medium_urgency'])) {  \n    $args->urgency = MEDIUM;\n  } elseif (isset($_REQUEST['low_urgency'])) {  \n    $args->urgency = LOW;\n  } else {\n    $args->urgency = OFF;\n  }  \n\n  // Sets urgency for every single tc\n  if (isset($_REQUEST['urgency']))  {\n    $args->urgency_tc = $_REQUEST['urgency'];\n  }\n\n  // For more information about the data accessed in session here, see the comment\n  // in the file header of lib/functions/tlTestCaseFilterControl.class.php.\n  $args->treeFormToken = isset($_REQUEST['form_token']) ? $_REQUEST['form_token'] : 0;\n  $mode = 'plan_mode';\n  $session_data = isset($_SESSION[$mode]) && isset($_SESSION[$mode][$args->treeFormToken]) ? \n                  $_SESSION[$mode][$args->treeFormToken] : null;\n\n\n  $args->testCaseSet = $session_data['testcases_to_show'];\n  $args->build4testers = intval($session_data['setting_build']);\n  $args->platform_id = intval($session_data['setting_platform']);\n      \n  return $args;\n}\n\n/**\n *\n */\nfunction initializeGui(&$argsObj,&$treeMgr)\n{\n  $guiObj = new stdClass();\n\n  $ni = $treeMgr->get_node_hierarchy_info($argsObj->node_id);\n  $guiObj->node_name = $ni['name'];\n  $guiObj->user_feedback = null;\n  $guiObj->node_id = $argsObj->node_id;\n  $guiObj->tplan_id = $argsObj->tplan_id;\n  $guiObj->tplan_name = $argsObj->tplan_name;\n  $guiObj->formToken = $argsObj->treeFormToken;\n  return $guiObj;\n} \n\n\n/**\n *\n */\nfunction doProcess(&$argsObj,&$tplanMgr)\n{\n  $userFeedback = null;\n\n  // Set urgency for test suite\n  if($argsObj->urgency != OFF)\n  {\n    $userFeedback['type'] = $tplanMgr->setSuiteUrgency($argsObj->tplan_id, $argsObj->node_id, $argsObj->urgency);\n    $userFeedback['message'] = lang_get(($userFeedback['type'] == OK) ? \"feedback_urgency_ok\" : \"feedback_urgency_fail\");\n  }\n\n  // Set urgency for individual testcases\n  if (isset($argsObj->urgency_tc)) {\n    foreach ($argsObj->urgency_tc as $id => $urgency)  {\n      $tplanMgr->setTestUrgency($argsObj->tplan_id, \n                                intval($id), intval($urgency));\n    }\n  }\n\n  return $userFeedback;\n}\n\n\n\nfunction checkRights(&$db,&$user)\n{\n  return $user->hasRight($db,'testplan_planning');\n}"], "filenames": ["lib/functions/testPlanUrgency.class.php", "lib/plan/planUrgency.php"], "buggy_code_start_loc": [8, 10], "buggy_code_end_loc": [46, 159], "fixing_code_start_loc": [8, 10], "fixing_code_end_loc": [45, 147], "type": "CWE-89", "message": "A SQL injection vulnerability in TestLink 1.9.20 allows attackers to execute arbitrary SQL commands in planUrgency.php via the urgency parameter.", "other": {"cve": {"id": "CVE-2020-8638", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-03T19:15:13.560", "lastModified": "2020-04-06T12:43:15.850", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A SQL injection vulnerability in TestLink 1.9.20 allows attackers to execute arbitrary SQL commands in planUrgency.php via the urgency parameter."}, {"lang": "es", "value": "Una vulnerabilidad de inyecci\u00f3n SQL en TestLink versi\u00f3n 1.9.20, permite a atacantes ejecutar comandos SQL arbitrarios en el archivo planUrgency.php por medio del par\u00e1metro urgency."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:testlink:testlink:1.9.20:*:*:*:*:*:*:*", "matchCriteriaId": "1007C963-3BC2-41CF-9C5F-C8F54EAAAF8A"}]}]}], "references": [{"url": "https://ackcent.com/blog/testlink-1.9.20-unrestricted-file-upload-and-sql-injection/", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/58f3cc03d5f81cd5cc2ad8c7ba645cc486cebc05", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/TestLinkOpenSourceTRMS/testlink-code/commit/58f3cc03d5f81cd5cc2ad8c7ba645cc486cebc05"}}