{"buggy_code": ["import hashlib\nimport logging\nimport random\nimport urllib\n\nfrom django import template\nfrom django.conf import settings\nfrom django.db.models import Q\nfrom django.shortcuts import get_object_or_404\nfrom django.template.defaultfilters import stringfilter\nfrom django.templatetags.static import static\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\n\nfrom blog.models import Article, Category, Tag, Links, SideBar, LinkShowType\nfrom comments.models import Comment\nfrom djangoblog.utils import CommonMarkdown\nfrom djangoblog.utils import cache\nfrom djangoblog.utils import get_current_site\nfrom oauth.models import OAuthUser\n\nlogger = logging.getLogger(__name__)\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef timeformat(data):\n    try:\n        return data.strftime(settings.TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.simple_tag\ndef datetimeformat(data):\n    try:\n        return data.strftime(settings.DATE_TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.filter()\n@stringfilter\ndef custom_markdown(content):\n    return mark_safe(CommonMarkdown.get_markdown(content))\n\n\n@register.simple_tag\ndef get_markdown_toc(content):\n    from djangoblog.utils import CommonMarkdown\n    body, toc = CommonMarkdown.get_markdown_with_toc(content)\n    return mark_safe(toc)\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncatechars_content(content):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u5185\u5bb9\u7684\u6458\u8981\n    :param content:\n    :return:\n    \"\"\"\n    from django.template.defaultfilters import truncatechars_html\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    return truncatechars_html(content, blogsetting.article_sub_length)\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncate(content):\n    from django.utils.html import strip_tags\n\n    return strip_tags(content)[:150]\n\n\n@register.inclusion_tag('blog/tags/breadcrumb.html')\ndef load_breadcrumb(article):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u9762\u5305\u5c51\n    :param article:\n    :return:\n    \"\"\"\n    names = article.get_category_tree()\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    site = get_current_site().domain\n    names.append((blogsetting.site_name, '/'))\n    names = names[::-1]\n\n    return {\n        'names': names,\n        'title': article.title,\n        'count': len(names) + 1\n    }\n\n\n@register.inclusion_tag('blog/tags/article_tag_list.html')\ndef load_articletags(article):\n    \"\"\"\n    \u6587\u7ae0\u6807\u7b7e\n    :param article:\n    :return:\n    \"\"\"\n    tags = article.tags.all()\n    tags_list = []\n    for tag in tags:\n        url = tag.get_absolute_url()\n        count = tag.get_article_count()\n        tags_list.append((\n            url, count, tag, random.choice(settings.BOOTSTRAP_COLOR_TYPES)\n        ))\n    return {\n        'article_tags_list': tags_list\n    }\n\n\n@register.inclusion_tag('blog/tags/sidebar.html')\ndef load_sidebar(user, linktype):\n    \"\"\"\n    \u52a0\u8f7d\u4fa7\u8fb9\u680f\n    :return:\n    \"\"\"\n    value = cache.get(\"sidebar\" + linktype)\n    if value:\n        value['user'] = user\n        return value\n    else:\n        logger.info('load sidebar')\n        from djangoblog.utils import get_blog_setting\n        blogsetting = get_blog_setting()\n        recent_articles = Article.objects.filter(\n            status='p')[:blogsetting.sidebar_article_count]\n        sidebar_categorys = Category.objects.all()\n        extra_sidebars = SideBar.objects.filter(\n            is_enable=True).order_by('sequence')\n        most_read_articles = Article.objects.filter(status='p').order_by(\n            '-views')[:blogsetting.sidebar_article_count]\n        dates = Article.objects.datetimes('created_time', 'month', order='DESC')\n        links = Links.objects.filter(is_enable=True).filter(\n            Q(show_type=str(linktype)) | Q(show_type=LinkShowType.A))\n        commment_list = Comment.objects.filter(is_enable=True).order_by(\n            '-id')[:blogsetting.sidebar_comment_count]\n        # \u6807\u7b7e\u4e91 \u8ba1\u7b97\u5b57\u4f53\u5927\u5c0f\n        # \u6839\u636e\u603b\u6570\u8ba1\u7b97\u51fa\u5e73\u5747\u503c \u5927\u5c0f\u4e3a (\u6570\u76ee/\u5e73\u5747\u503c)*\u6b65\u957f\n        increment = 5\n        tags = Tag.objects.all()\n        sidebar_tags = None\n        if tags and len(tags) > 0:\n            s = [t for t in [(t, t.get_article_count()) for t in tags] if t[1]]\n            count = sum([t[1] for t in s])\n            dd = 1 if (count == 0 or not len(tags)) else count / len(tags)\n            import random\n            sidebar_tags = list(\n                map(lambda x: (x[0], x[1], (x[1] / dd) * increment + 10), s))\n            random.shuffle(sidebar_tags)\n\n        value = {\n            'recent_articles': recent_articles,\n            'sidebar_categorys': sidebar_categorys,\n            'most_read_articles': most_read_articles,\n            'article_dates': dates,\n            'sidebar_comments': commment_list,\n            'sidabar_links': links,\n            'show_google_adsense': blogsetting.show_google_adsense,\n            'google_adsense_codes': blogsetting.google_adsense_codes,\n            'open_site_comment': blogsetting.open_site_comment,\n            'show_gongan_code': blogsetting.show_gongan_code,\n            'sidebar_tags': sidebar_tags,\n            'extra_sidebars': extra_sidebars\n        }\n        cache.set(\"sidebar\" + linktype, value, 60 * 60 * 60 * 3)\n        logger.info('set sidebar cache.key:{key}'.format(key=\"sidebar\" + linktype))\n        value['user'] = user\n        return value\n\n\n@register.inclusion_tag('blog/tags/article_meta_info.html')\ndef load_article_metas(article, user):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0meta\u4fe1\u606f\n    :param article:\n    :return:\n    \"\"\"\n    return {\n        'article': article,\n        'user': user\n    }\n\n\n@register.inclusion_tag('blog/tags/article_pagination.html')\ndef load_pagination_info(page_obj, page_type, tag_name):\n    previous_url = ''\n    next_url = ''\n    if page_type == '':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse('blog:index_page', kwargs={'page': next_number})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:index_page', kwargs={\n                    'page': previous_number})\n    if page_type == '\u5206\u7c7b\u6807\u7b7e\u5f52\u6863':\n        tag = get_object_or_404(Tag, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'tag_name': tag.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'tag_name': tag.slug})\n    if page_type == '\u4f5c\u8005\u6587\u7ae0\u5f52\u6863':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'author_name': tag_name})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'author_name': tag_name})\n\n    if page_type == '\u5206\u7c7b\u76ee\u5f55\u5f52\u6863':\n        category = get_object_or_404(Category, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'category_name': category.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'category_name': category.slug})\n\n    return {\n        'previous_url': previous_url,\n        'next_url': next_url,\n        'page_obj': page_obj\n    }\n\n\n@register.inclusion_tag('blog/tags/article_info.html')\ndef load_article_detail(article, isindex, user):\n    \"\"\"\n    \u52a0\u8f7d\u6587\u7ae0\u8be6\u60c5\n    :param article:\n    :param isindex:\u662f\u5426\u5217\u8868\u9875\uff0c\u82e5\u662f\u5217\u8868\u9875\u53ea\u663e\u793a\u6458\u8981\n    :return:\n    \"\"\"\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n\n    return {\n        'article': article,\n        'isindex': isindex,\n        'user': user,\n        'open_site_comment': blogsetting.open_site_comment,\n    }\n\n\n# return only the URL of the gravatar\n# TEMPLATE USE:  {{ email|gravatar_url:150 }}\n@register.filter\ndef gravatar_url(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    cachekey = 'gravatat/' + email\n    url = cache.get(cachekey)\n    if url:\n        return url\n    else:\n        usermodels = OAuthUser.objects.filter(email=email)\n        if usermodels:\n            o = list(filter(lambda x: x.picture is not None, usermodels))\n            if o:\n                return o[0].picture\n        email = email.encode('utf-8')\n\n        default = static('blog/img/avatar.png')\n\n        url = \"https://www.gravatar.com/avatar/%s?%s\" % (hashlib.md5(\n            email.lower()).hexdigest(), urllib.parse.urlencode({'d': default, 's': str(size)}))\n        cache.set(cachekey, url, 60 * 60 * 10)\n        logger.info('set gravatar cache.key:{key}'.format(key=cachekey))\n        return url\n\n\n@register.filter\ndef gravatar(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    url = gravatar_url(email, size)\n    return mark_safe(\n        '<img src=\"%s\" height=\"%d\" width=\"%d\">' %\n        (url, size, size))\n\n\n@register.simple_tag\ndef query(qs, **kwargs):\n    \"\"\" template tag which allows queryset filtering. Usage:\n          {% query books author=author as mybooks %}\n          {% for book in mybooks %}\n            ...\n          {% endfor %}\n    \"\"\"\n    return qs.filter(**kwargs)\n\n\n@register.filter\ndef addstr(arg1, arg2):\n    \"\"\"concatenate arg1 & arg2\"\"\"\n    return str(arg1) + str(arg2)\n", "#!/usr/bin/env python\n# encoding: utf-8\n\n\nimport logging\nimport os\nimport random\nimport string\nimport uuid\nfrom hashlib import sha256\n\nimport markdown\nimport requests\nfrom django.conf import settings\nfrom django.contrib.sites.models import Site\nfrom django.core.cache import cache\nfrom django.templatetags.static import static\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_max_articleid_commentid():\n    from blog.models import Article\n    from comments.models import Comment\n    return (Article.objects.latest().pk, Comment.objects.latest().pk)\n\n\ndef get_sha256(str):\n    m = sha256(str.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef cache_decorator(expiration=3 * 60):\n    def wrapper(func):\n        def news(*args, **kwargs):\n            try:\n                view = args[0]\n                key = view.get_cache_key()\n            except:\n                key = None\n            if not key:\n                unique_str = repr((func, args, kwargs))\n\n                m = sha256(unique_str.encode('utf-8'))\n                key = m.hexdigest()\n            value = cache.get(key)\n            if value is not None:\n                # logger.info('cache_decorator get cache:%s key:%s' % (func.__name__, key))\n                if str(value) == '__default_cache_value__':\n                    return None\n                else:\n                    return value\n            else:\n                logger.debug(\n                    'cache_decorator set cache:%s key:%s' %\n                    (func.__name__, key))\n                value = func(*args, **kwargs)\n                if value is None:\n                    cache.set(key, '__default_cache_value__', expiration)\n                else:\n                    cache.set(key, value, expiration)\n                return value\n\n        return news\n\n    return wrapper\n\n\ndef expire_view_cache(path, servername, serverport, key_prefix=None):\n    '''\n    \u5237\u65b0\u89c6\u56fe\u7f13\u5b58\n    :param path:url\u8def\u5f84\n    :param servername:host\n    :param serverport:\u7aef\u53e3\n    :param key_prefix:\u524d\u7f00\n    :return:\u662f\u5426\u6210\u529f\n    '''\n    from django.http import HttpRequest\n    from django.utils.cache import get_cache_key\n\n    request = HttpRequest()\n    request.META = {'SERVER_NAME': servername, 'SERVER_PORT': serverport}\n    request.path = path\n\n    key = get_cache_key(request, key_prefix=key_prefix, cache=cache)\n    if key:\n        logger.info('expire_view_cache:get key:{path}'.format(path=path))\n        if cache.get(key):\n            cache.delete(key)\n        return True\n    return False\n\n\n@cache_decorator()\ndef get_current_site():\n    site = Site.objects.get_current()\n    return site\n\n\nclass CommonMarkdown:\n    @staticmethod\n    def _convert_markdown(value):\n        md = markdown.Markdown(\n            extensions=[\n                'extra',\n                'codehilite',\n                'toc',\n                'tables',\n            ]\n        )\n        body = md.convert(value)\n        toc = md.toc\n        return body, toc\n\n    @staticmethod\n    def get_markdown_with_toc(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body, toc\n\n    @staticmethod\n    def get_markdown(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body\n\n\ndef send_email(emailto, title, content):\n    from djangoblog.blog_signals import send_email_signal\n    send_email_signal.send(\n        send_email.__class__,\n        emailto=emailto,\n        title=title,\n        content=content)\n\n\ndef generate_code() -> str:\n    \"\"\"\u751f\u6210\u968f\u673a\u6570\u9a8c\u8bc1\u7801\"\"\"\n    return ''.join(random.sample(string.digits, 6))\n\n\ndef parse_dict_to_url(dict):\n    from urllib.parse import quote\n    url = '&'.join(['{}={}'.format(quote(k, safe='/'), quote(v, safe='/'))\n                    for k, v in dict.items()])\n    return url\n\n\ndef get_blog_setting():\n    value = cache.get('get_blog_setting')\n    if value:\n        return value\n    else:\n        from blog.models import BlogSettings\n        if not BlogSettings.objects.count():\n            setting = BlogSettings()\n            setting.site_name = 'djangoblog'\n            setting.site_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_seo_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_keywords = 'Django,Python'\n            setting.article_sub_length = 300\n            setting.sidebar_article_count = 10\n            setting.sidebar_comment_count = 5\n            setting.show_google_adsense = False\n            setting.open_site_comment = True\n            setting.analytics_code = ''\n            setting.beian_code = ''\n            setting.show_gongan_code = False\n            setting.comment_need_review = False\n            setting.save()\n        value = BlogSettings.objects.first()\n        logger.info('set cache get_blog_setting')\n        cache.set('get_blog_setting', value)\n        return value\n\n\ndef save_user_avatar(url):\n    '''\n    \u4fdd\u5b58\u7528\u6237\u5934\u50cf\n    :param url:\u5934\u50cfurl\n    :return: \u672c\u5730\u8def\u5f84\n    '''\n    logger.info(url)\n\n    try:\n        basedir = os.path.join(settings.STATICFILES, 'avatar')\n        rsp = requests.get(url, timeout=2)\n        if rsp.status_code == 200:\n            if not os.path.exists(basedir):\n                os.makedirs(basedir)\n\n            image_extensions = ['.jpg', '.png', 'jpeg', '.gif']\n            isimage = len([i for i in image_extensions if url.endswith(i)]) > 0\n            ext = os.path.splitext(url)[1] if isimage else '.jpg'\n            save_filename = str(uuid.uuid4().hex) + ext\n            logger.info('\u4fdd\u5b58\u7528\u6237\u5934\u50cf:' + basedir + save_filename)\n            with open(os.path.join(basedir, save_filename), 'wb+') as file:\n                file.write(rsp.content)\n            return static('avatar/' + save_filename)\n    except Exception as e:\n        logger.error(e)\n        return static('blog/img/avatar.png')\n\n\ndef delete_sidebar_cache():\n    from blog.models import LinkShowType\n    keys = [\"sidebar\" + x for x in LinkShowType.values]\n    for k in keys:\n        logger.info('delete sidebar key:' + k)\n        cache.delete(k)\n\n\ndef delete_view_cache(prefix, keys):\n    from django.core.cache.utils import make_template_fragment_key\n    key = make_template_fragment_key(prefix, keys)\n    cache.delete(key)\n\n\ndef get_resource_url():\n    if settings.STATIC_URL:\n        return settings.STATIC_URL\n    else:\n        site = get_current_site()\n        return 'http://' + site.domain + '/static/'\n", "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            <div>{{ comment_item.created_time }}</div>\n            <div>\u56de\u590d\u7ed9:@{{ comment_item.author.parent_comment.username }}</div>\n        </div>\n        <p>{{ comment_item.body|escape|custom_markdown }}</p>\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->", "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\"\n    style=\"margin-left: {% widthratio depth 1 3 %}rem\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            {{ comment_item.created_time }}\n        </div>\n        <p>\n            {% if comment_item.parent_comment %}\n                <div>\u56de\u590d <a\n                        href=\"#comment-{{ comment_item.parent_comment.pk }}\">@{{ comment_item.parent_comment.author.username }}</a>\n                </div>\n            {% endif %}\n        </p>\n\n        <p>{{ comment_item.body|escape|custom_markdown }}</p>\n\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->\n{% query article_comments parent_comment=comment_item as cc_comments %}\n{% for cc in cc_comments %}\n    {% with comment_item=cc template_name=\"comments/tags/comment_item_tree.html\" %}\n        {% if depth >= 1 %}\n            {% include template_name %}\n        {% else %}\n            {% with depth=depth|add:1 %}\n                {% include template_name %}\n            {% endwith %}\n        {% endif %}\n    {% endwith %}\n{% endfor %}"], "fixing_code": ["import hashlib\nimport logging\nimport random\nimport urllib\n\nfrom django import template\nfrom django.conf import settings\nfrom django.db.models import Q\nfrom django.shortcuts import get_object_or_404\nfrom django.template.defaultfilters import stringfilter\nfrom django.templatetags.static import static\nfrom django.urls import reverse\nfrom django.utils.safestring import mark_safe\n\nfrom blog.models import Article, Category, Tag, Links, SideBar, LinkShowType\nfrom comments.models import Comment\nfrom djangoblog.utils import CommonMarkdown, sanitize_html\nfrom djangoblog.utils import cache\nfrom djangoblog.utils import get_current_site\nfrom oauth.models import OAuthUser\n\nlogger = logging.getLogger(__name__)\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef timeformat(data):\n    try:\n        return data.strftime(settings.TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.simple_tag\ndef datetimeformat(data):\n    try:\n        return data.strftime(settings.DATE_TIME_FORMAT)\n    except Exception as e:\n        logger.error(e)\n        return \"\"\n\n\n@register.filter()\n@stringfilter\ndef custom_markdown(content):\n    return mark_safe(CommonMarkdown.get_markdown(content))\n\n\n@register.simple_tag\ndef get_markdown_toc(content):\n    from djangoblog.utils import CommonMarkdown\n    body, toc = CommonMarkdown.get_markdown_with_toc(content)\n    return mark_safe(toc)\n\n\n@register.filter()\n@stringfilter\ndef comment_markdown(content):\n    content = CommonMarkdown.get_markdown(content)\n    return mark_safe(sanitize_html(content))\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncatechars_content(content):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u5185\u5bb9\u7684\u6458\u8981\n    :param content:\n    :return:\n    \"\"\"\n    from django.template.defaultfilters import truncatechars_html\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    return truncatechars_html(content, blogsetting.article_sub_length)\n\n\n@register.filter(is_safe=True)\n@stringfilter\ndef truncate(content):\n    from django.utils.html import strip_tags\n\n    return strip_tags(content)[:150]\n\n\n@register.inclusion_tag('blog/tags/breadcrumb.html')\ndef load_breadcrumb(article):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0\u9762\u5305\u5c51\n    :param article:\n    :return:\n    \"\"\"\n    names = article.get_category_tree()\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n    site = get_current_site().domain\n    names.append((blogsetting.site_name, '/'))\n    names = names[::-1]\n\n    return {\n        'names': names,\n        'title': article.title,\n        'count': len(names) + 1\n    }\n\n\n@register.inclusion_tag('blog/tags/article_tag_list.html')\ndef load_articletags(article):\n    \"\"\"\n    \u6587\u7ae0\u6807\u7b7e\n    :param article:\n    :return:\n    \"\"\"\n    tags = article.tags.all()\n    tags_list = []\n    for tag in tags:\n        url = tag.get_absolute_url()\n        count = tag.get_article_count()\n        tags_list.append((\n            url, count, tag, random.choice(settings.BOOTSTRAP_COLOR_TYPES)\n        ))\n    return {\n        'article_tags_list': tags_list\n    }\n\n\n@register.inclusion_tag('blog/tags/sidebar.html')\ndef load_sidebar(user, linktype):\n    \"\"\"\n    \u52a0\u8f7d\u4fa7\u8fb9\u680f\n    :return:\n    \"\"\"\n    value = cache.get(\"sidebar\" + linktype)\n    if value:\n        value['user'] = user\n        return value\n    else:\n        logger.info('load sidebar')\n        from djangoblog.utils import get_blog_setting\n        blogsetting = get_blog_setting()\n        recent_articles = Article.objects.filter(\n            status='p')[:blogsetting.sidebar_article_count]\n        sidebar_categorys = Category.objects.all()\n        extra_sidebars = SideBar.objects.filter(\n            is_enable=True).order_by('sequence')\n        most_read_articles = Article.objects.filter(status='p').order_by(\n            '-views')[:blogsetting.sidebar_article_count]\n        dates = Article.objects.datetimes('created_time', 'month', order='DESC')\n        links = Links.objects.filter(is_enable=True).filter(\n            Q(show_type=str(linktype)) | Q(show_type=LinkShowType.A))\n        commment_list = Comment.objects.filter(is_enable=True).order_by(\n            '-id')[:blogsetting.sidebar_comment_count]\n        # \u6807\u7b7e\u4e91 \u8ba1\u7b97\u5b57\u4f53\u5927\u5c0f\n        # \u6839\u636e\u603b\u6570\u8ba1\u7b97\u51fa\u5e73\u5747\u503c \u5927\u5c0f\u4e3a (\u6570\u76ee/\u5e73\u5747\u503c)*\u6b65\u957f\n        increment = 5\n        tags = Tag.objects.all()\n        sidebar_tags = None\n        if tags and len(tags) > 0:\n            s = [t for t in [(t, t.get_article_count()) for t in tags] if t[1]]\n            count = sum([t[1] for t in s])\n            dd = 1 if (count == 0 or not len(tags)) else count / len(tags)\n            import random\n            sidebar_tags = list(\n                map(lambda x: (x[0], x[1], (x[1] / dd) * increment + 10), s))\n            random.shuffle(sidebar_tags)\n\n        value = {\n            'recent_articles': recent_articles,\n            'sidebar_categorys': sidebar_categorys,\n            'most_read_articles': most_read_articles,\n            'article_dates': dates,\n            'sidebar_comments': commment_list,\n            'sidabar_links': links,\n            'show_google_adsense': blogsetting.show_google_adsense,\n            'google_adsense_codes': blogsetting.google_adsense_codes,\n            'open_site_comment': blogsetting.open_site_comment,\n            'show_gongan_code': blogsetting.show_gongan_code,\n            'sidebar_tags': sidebar_tags,\n            'extra_sidebars': extra_sidebars\n        }\n        cache.set(\"sidebar\" + linktype, value, 60 * 60 * 60 * 3)\n        logger.info('set sidebar cache.key:{key}'.format(key=\"sidebar\" + linktype))\n        value['user'] = user\n        return value\n\n\n@register.inclusion_tag('blog/tags/article_meta_info.html')\ndef load_article_metas(article, user):\n    \"\"\"\n    \u83b7\u5f97\u6587\u7ae0meta\u4fe1\u606f\n    :param article:\n    :return:\n    \"\"\"\n    return {\n        'article': article,\n        'user': user\n    }\n\n\n@register.inclusion_tag('blog/tags/article_pagination.html')\ndef load_pagination_info(page_obj, page_type, tag_name):\n    previous_url = ''\n    next_url = ''\n    if page_type == '':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse('blog:index_page', kwargs={'page': next_number})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:index_page', kwargs={\n                    'page': previous_number})\n    if page_type == '\u5206\u7c7b\u6807\u7b7e\u5f52\u6863':\n        tag = get_object_or_404(Tag, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'tag_name': tag.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:tag_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'tag_name': tag.slug})\n    if page_type == '\u4f5c\u8005\u6587\u7ae0\u5f52\u6863':\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'author_name': tag_name})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:author_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'author_name': tag_name})\n\n    if page_type == '\u5206\u7c7b\u76ee\u5f55\u5f52\u6863':\n        category = get_object_or_404(Category, name=tag_name)\n        if page_obj.has_next():\n            next_number = page_obj.next_page_number()\n            next_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': next_number,\n                    'category_name': category.slug})\n        if page_obj.has_previous():\n            previous_number = page_obj.previous_page_number()\n            previous_url = reverse(\n                'blog:category_detail_page',\n                kwargs={\n                    'page': previous_number,\n                    'category_name': category.slug})\n\n    return {\n        'previous_url': previous_url,\n        'next_url': next_url,\n        'page_obj': page_obj\n    }\n\n\n@register.inclusion_tag('blog/tags/article_info.html')\ndef load_article_detail(article, isindex, user):\n    \"\"\"\n    \u52a0\u8f7d\u6587\u7ae0\u8be6\u60c5\n    :param article:\n    :param isindex:\u662f\u5426\u5217\u8868\u9875\uff0c\u82e5\u662f\u5217\u8868\u9875\u53ea\u663e\u793a\u6458\u8981\n    :return:\n    \"\"\"\n    from djangoblog.utils import get_blog_setting\n    blogsetting = get_blog_setting()\n\n    return {\n        'article': article,\n        'isindex': isindex,\n        'user': user,\n        'open_site_comment': blogsetting.open_site_comment,\n    }\n\n\n# return only the URL of the gravatar\n# TEMPLATE USE:  {{ email|gravatar_url:150 }}\n@register.filter\ndef gravatar_url(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    cachekey = 'gravatat/' + email\n    url = cache.get(cachekey)\n    if url:\n        return url\n    else:\n        usermodels = OAuthUser.objects.filter(email=email)\n        if usermodels:\n            o = list(filter(lambda x: x.picture is not None, usermodels))\n            if o:\n                return o[0].picture\n        email = email.encode('utf-8')\n\n        default = static('blog/img/avatar.png')\n\n        url = \"https://www.gravatar.com/avatar/%s?%s\" % (hashlib.md5(\n            email.lower()).hexdigest(), urllib.parse.urlencode({'d': default, 's': str(size)}))\n        cache.set(cachekey, url, 60 * 60 * 10)\n        logger.info('set gravatar cache.key:{key}'.format(key=cachekey))\n        return url\n\n\n@register.filter\ndef gravatar(email, size=40):\n    \"\"\"\u83b7\u5f97gravatar\u5934\u50cf\"\"\"\n    url = gravatar_url(email, size)\n    return mark_safe(\n        '<img src=\"%s\" height=\"%d\" width=\"%d\">' %\n        (url, size, size))\n\n\n@register.simple_tag\ndef query(qs, **kwargs):\n    \"\"\" template tag which allows queryset filtering. Usage:\n          {% query books author=author as mybooks %}\n          {% for book in mybooks %}\n            ...\n          {% endfor %}\n    \"\"\"\n    return qs.filter(**kwargs)\n\n\n@register.filter\ndef addstr(arg1, arg2):\n    \"\"\"concatenate arg1 & arg2\"\"\"\n    return str(arg1) + str(arg2)\n", "#!/usr/bin/env python\n# encoding: utf-8\n\n\nimport logging\nimport os\nimport random\nimport string\nimport uuid\nfrom hashlib import sha256\n\nimport bleach\nimport markdown\nimport requests\nfrom django.conf import settings\nfrom django.contrib.sites.models import Site\nfrom django.core.cache import cache\nfrom django.templatetags.static import static\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_max_articleid_commentid():\n    from blog.models import Article\n    from comments.models import Comment\n    return (Article.objects.latest().pk, Comment.objects.latest().pk)\n\n\ndef get_sha256(str):\n    m = sha256(str.encode('utf-8'))\n    return m.hexdigest()\n\n\ndef cache_decorator(expiration=3 * 60):\n    def wrapper(func):\n        def news(*args, **kwargs):\n            try:\n                view = args[0]\n                key = view.get_cache_key()\n            except:\n                key = None\n            if not key:\n                unique_str = repr((func, args, kwargs))\n\n                m = sha256(unique_str.encode('utf-8'))\n                key = m.hexdigest()\n            value = cache.get(key)\n            if value is not None:\n                # logger.info('cache_decorator get cache:%s key:%s' % (func.__name__, key))\n                if str(value) == '__default_cache_value__':\n                    return None\n                else:\n                    return value\n            else:\n                logger.debug(\n                    'cache_decorator set cache:%s key:%s' %\n                    (func.__name__, key))\n                value = func(*args, **kwargs)\n                if value is None:\n                    cache.set(key, '__default_cache_value__', expiration)\n                else:\n                    cache.set(key, value, expiration)\n                return value\n\n        return news\n\n    return wrapper\n\n\ndef expire_view_cache(path, servername, serverport, key_prefix=None):\n    '''\n    \u5237\u65b0\u89c6\u56fe\u7f13\u5b58\n    :param path:url\u8def\u5f84\n    :param servername:host\n    :param serverport:\u7aef\u53e3\n    :param key_prefix:\u524d\u7f00\n    :return:\u662f\u5426\u6210\u529f\n    '''\n    from django.http import HttpRequest\n    from django.utils.cache import get_cache_key\n\n    request = HttpRequest()\n    request.META = {'SERVER_NAME': servername, 'SERVER_PORT': serverport}\n    request.path = path\n\n    key = get_cache_key(request, key_prefix=key_prefix, cache=cache)\n    if key:\n        logger.info('expire_view_cache:get key:{path}'.format(path=path))\n        if cache.get(key):\n            cache.delete(key)\n        return True\n    return False\n\n\n@cache_decorator()\ndef get_current_site():\n    site = Site.objects.get_current()\n    return site\n\n\nclass CommonMarkdown:\n    @staticmethod\n    def _convert_markdown(value):\n        md = markdown.Markdown(\n            extensions=[\n                'extra',\n                'codehilite',\n                'toc',\n                'tables',\n            ]\n        )\n        body = md.convert(value)\n        toc = md.toc\n        return body, toc\n\n    @staticmethod\n    def get_markdown_with_toc(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body, toc\n\n    @staticmethod\n    def get_markdown(value):\n        body, toc = CommonMarkdown._convert_markdown(value)\n        return body\n\n\ndef send_email(emailto, title, content):\n    from djangoblog.blog_signals import send_email_signal\n    send_email_signal.send(\n        send_email.__class__,\n        emailto=emailto,\n        title=title,\n        content=content)\n\n\ndef generate_code() -> str:\n    \"\"\"\u751f\u6210\u968f\u673a\u6570\u9a8c\u8bc1\u7801\"\"\"\n    return ''.join(random.sample(string.digits, 6))\n\n\ndef parse_dict_to_url(dict):\n    from urllib.parse import quote\n    url = '&'.join(['{}={}'.format(quote(k, safe='/'), quote(v, safe='/'))\n                    for k, v in dict.items()])\n    return url\n\n\ndef get_blog_setting():\n    value = cache.get('get_blog_setting')\n    if value:\n        return value\n    else:\n        from blog.models import BlogSettings\n        if not BlogSettings.objects.count():\n            setting = BlogSettings()\n            setting.site_name = 'djangoblog'\n            setting.site_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_seo_description = '\u57fa\u4e8eDjango\u7684\u535a\u5ba2\u7cfb\u7edf'\n            setting.site_keywords = 'Django,Python'\n            setting.article_sub_length = 300\n            setting.sidebar_article_count = 10\n            setting.sidebar_comment_count = 5\n            setting.show_google_adsense = False\n            setting.open_site_comment = True\n            setting.analytics_code = ''\n            setting.beian_code = ''\n            setting.show_gongan_code = False\n            setting.comment_need_review = False\n            setting.save()\n        value = BlogSettings.objects.first()\n        logger.info('set cache get_blog_setting')\n        cache.set('get_blog_setting', value)\n        return value\n\n\ndef save_user_avatar(url):\n    '''\n    \u4fdd\u5b58\u7528\u6237\u5934\u50cf\n    :param url:\u5934\u50cfurl\n    :return: \u672c\u5730\u8def\u5f84\n    '''\n    logger.info(url)\n\n    try:\n        basedir = os.path.join(settings.STATICFILES, 'avatar')\n        rsp = requests.get(url, timeout=2)\n        if rsp.status_code == 200:\n            if not os.path.exists(basedir):\n                os.makedirs(basedir)\n\n            image_extensions = ['.jpg', '.png', 'jpeg', '.gif']\n            isimage = len([i for i in image_extensions if url.endswith(i)]) > 0\n            ext = os.path.splitext(url)[1] if isimage else '.jpg'\n            save_filename = str(uuid.uuid4().hex) + ext\n            logger.info('\u4fdd\u5b58\u7528\u6237\u5934\u50cf:' + basedir + save_filename)\n            with open(os.path.join(basedir, save_filename), 'wb+') as file:\n                file.write(rsp.content)\n            return static('avatar/' + save_filename)\n    except Exception as e:\n        logger.error(e)\n        return static('blog/img/avatar.png')\n\n\ndef delete_sidebar_cache():\n    from blog.models import LinkShowType\n    keys = [\"sidebar\" + x for x in LinkShowType.values]\n    for k in keys:\n        logger.info('delete sidebar key:' + k)\n        cache.delete(k)\n\n\ndef delete_view_cache(prefix, keys):\n    from django.core.cache.utils import make_template_fragment_key\n    key = make_template_fragment_key(prefix, keys)\n    cache.delete(key)\n\n\ndef get_resource_url():\n    if settings.STATIC_URL:\n        return settings.STATIC_URL\n    else:\n        site = get_current_site()\n        return 'http://' + site.domain + '/static/'\n\n\nALLOWED_TAGS = ['a', 'abbr', 'acronym', 'b', 'blockquote', 'code', 'em', 'i', 'li', 'ol', 'pre', 'strong', 'ul', 'h1',\n                'h2', 'p']\nALLOWED_ATTRIBUTES = {'a': ['href', 'title'], 'abbr': ['title'], 'acronym': ['title']}\n\n\ndef sanitize_html(html):\n    return bleach.clean(html, tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES)\n", "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            <div>{{ comment_item.created_time }}</div>\n            <div>\u56de\u590d\u7ed9:@{{ comment_item.author.parent_comment.username }}</div>\n        </div>\n        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->", "{% load blog_tags %}\n<li class=\"comment even thread-even depth-{{ depth }} parent\" id=\"comment-{{ comment_item.pk }}\"\n    style=\"margin-left: {% widthratio depth 1 3 %}rem\">\n    <div id=\"div-comment-{{ comment_item.pk }}\" class=\"comment-body\">\n        <div class=\"comment-author vcard\">\n            <img alt=\"\"\n                 src=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 srcset=\"{{ comment_item.author.email|gravatar_url:150 }}\"\n                 class=\"avatar avatar-96 photo\" height=\"96\" width=\"96\">\n            <cite class=\"fn\">\n                <a rel=\"nofollow\"\n                        {% if comment_item.author.is_superuser %}\n                   href=\"{{ comment_item.author.get_absolute_url }}\"\n                        {% else %}\n                   href=\"#\"\n                        {% endif %}\n                   rel=\"external nofollow\"\n                   class=\"url\">{{ comment_item.author.username }}\n                </a>\n            </cite>\n\n        </div>\n\n        <div class=\"comment-meta commentmetadata\">\n            {{ comment_item.created_time }}\n        </div>\n        <p>\n            {% if comment_item.parent_comment %}\n                <div>\u56de\u590d <a\n                        href=\"#comment-{{ comment_item.parent_comment.pk }}\">@{{ comment_item.parent_comment.author.username }}</a>\n                </div>\n            {% endif %}\n        </p>\n\n        <p>{{ comment_item.body|escape|comment_markdown }}</p>\n\n        <div class=\"reply\"><a rel=\"nofollow\" class=\"comment-reply-link\"\n                              href=\"javascript:void(0)\"\n                              onclick=\"do_reply({{ comment_item.pk }})\"\n                              aria-label=\"\u56de\u590d\u7ed9{{ comment_item.author.username }}\">\u56de\u590d</a></div>\n    </div>\n\n</li><!-- #comment-## -->\n{% query article_comments parent_comment=comment_item as cc_comments %}\n{% for cc in cc_comments %}\n    {% with comment_item=cc template_name=\"comments/tags/comment_item_tree.html\" %}\n        {% if depth >= 1 %}\n            {% include template_name %}\n        {% else %}\n            {% with depth=depth|add:1 %}\n                {% include template_name %}\n            {% endwith %}\n        {% endif %}\n    {% endwith %}\n{% endfor %}"], "filenames": ["blog/templatetags/blog_tags.py", "djangoblog/utils.py", "templates/comments/tags/comment_item.html", "templates/comments/tags/comment_item_tree.html"], "buggy_code_start_loc": [17, 11, 27, 35], "buggy_code_end_loc": [55, 222, 28, 36], "fixing_code_start_loc": [17, 12, 27, 35], "fixing_code_end_loc": [63, 233, 28, 36], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository liangliangyy/djangoblog prior to master.", "other": {"cve": {"id": "CVE-2023-2954", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-29T07:15:08.710", "lastModified": "2023-06-02T19:21:18.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository liangliangyy/djangoblog prior to master."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoblog_project:djangoblog:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-05-29", "matchCriteriaId": "F2E90893-4D34-4E95-9709-654AB08B3659"}]}]}], "references": [{"url": "https://github.com/liangliangyy/djangoblog/commit/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/47f08086-aaae-4ca7-b0ca-24c616d3ad7d", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/liangliangyy/djangoblog/commit/c2bfdb18c5f32b13ea4b50aa689b8ea4beb38719"}}