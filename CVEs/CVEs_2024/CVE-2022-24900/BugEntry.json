{"buggy_code": ["from webinterface import webinterface\nfrom flask import render_template, send_file, redirect, request, url_for, jsonify\nfrom lib.functions import find_between, theaterChase, theaterChaseRainbow, sound_of_da_police, scanner, breathing, \\\n    rainbow, rainbowCycle, fastColorWipe, play_midi, clamp\nimport psutil\nimport threading\nfrom neopixel import *\nimport webcolors as wc\nimport mido\nfrom xml.dom import minidom\nfrom subprocess import call\nimport subprocess\nimport datetime\nimport os\nimport math\nfrom zipfile import ZipFile\nimport json\nimport ast\nimport time\nimport RPi.GPIO as GPIO\n\nSENSECOVER = 12\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SENSECOVER, GPIO.IN, GPIO.PUD_UP)\n\n@webinterface.route('/api/start_animation', methods=['GET'])\ndef start_animation():\n    choice = request.args.get('name')\n    speed = request.args.get('speed')\n    if choice == \"theaterchase\":\n        webinterface.menu.t = threading.Thread(target=theaterChase, args=(webinterface.ledstrip.strip,\n                                                                          Color(127, 127, 127),\n                                                                          webinterface.ledsettings,\n                                                                          webinterface.menu))\n        webinterface.menu.t.start()\n\n    if choice == \"theaterchaserainbow\":\n        webinterface.t = threading.Thread(target=theaterChaseRainbow, args=(webinterface.ledstrip.strip,\n                                                                            webinterface.ledsettings,\n                                                                            webinterface.menu, 5))\n        webinterface.t.start()\n\n    if choice == \"soundofdapolice\":\n        webinterface.t = threading.Thread(target=sound_of_da_police, args=(webinterface.ledstrip.strip,\n                                                                           webinterface.ledsettings,\n                                                                           webinterface.menu, 1))\n        webinterface.t.start()\n\n    if choice == \"scanner\":\n        webinterface.t = threading.Thread(target=scanner, args=(webinterface.ledstrip.strip,\n                                                                webinterface.ledsettings,\n                                                                webinterface.menu, 1))\n        webinterface.t.start()\n\n    if choice == \"breathing\":\n        if speed == \"fast\":\n            webinterface.t = threading.Thread(target=breathing, args=(webinterface.ledstrip.strip,\n                                                                      webinterface.ledsettings,\n                                                                      webinterface.menu, 5))\n            webinterface.t.start()\n        if speed == \"medium\":\n            webinterface.t = threading.Thread(target=breathing, args=(webinterface.ledstrip.strip,\n                                                                      webinterface.ledsettings,\n                                                                      webinterface.menu, 10))\n            webinterface.t.start()\n        if speed == \"slow\":\n            webinterface.t = threading.Thread(target=breathing, args=(webinterface.ledstrip.strip,\n                                                                      webinterface.ledsettings,\n                                                                      webinterface.menu, 25))\n            webinterface.t.start()\n\n    if choice == \"rainbow\":\n        if speed == \"fast\":\n            webinterface.t = threading.Thread(target=rainbow, args=(webinterface.ledstrip.strip,\n                                                                    webinterface.ledsettings,\n                                                                    webinterface.menu, 2))\n            webinterface.t.start()\n        if speed == \"medium\":\n            webinterface.t = threading.Thread(target=rainbow, args=(webinterface.ledstrip.strip,\n                                                                    webinterface.ledsettings,\n                                                                    webinterface.menu, 20))\n            webinterface.t.start()\n        if speed == \"slow\":\n            webinterface.t = threading.Thread(target=rainbow, args=(webinterface.ledstrip.strip,\n                                                                    webinterface.ledsettings,\n                                                                    webinterface.menu, 50))\n            webinterface.t.start()\n\n    if choice == \"rainbowcycle\":\n        if speed == \"fast\":\n            webinterface.t = threading.Thread(target=rainbowCycle, args=(webinterface.ledstrip.strip,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.menu, 1))\n            webinterface.t.start()\n        if speed == \"medium\":\n            webinterface.t = threading.Thread(target=rainbowCycle, args=(webinterface.ledstrip.strip,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.menu, 20))\n            webinterface.t.start()\n        if speed == \"slow\":\n            webinterface.t = threading.Thread(target=rainbowCycle, args=(webinterface.ledstrip.strip,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.menu, 50))\n            webinterface.t.start()\n\n    if choice == \"stop\":\n        webinterface.menu.screensaver_is_running = False\n\n    return jsonify(success=True)\n\n\n@webinterface.route('/api/get_homepage_data')\ndef get_homepage_data():\n    try:\n        temp = find_between(str(psutil.sensors_temperatures()[\"cpu_thermal\"]), \"current=\", \",\")\n    except:\n        temp = find_between(str(psutil.sensors_temperatures()[\"cpu-thermal\"]), \"current=\", \",\")\n\n    temp = round(float(temp), 1)\n\n    upload = psutil.net_io_counters().bytes_sent\n    download = psutil.net_io_counters().bytes_recv\n\n    card_space = psutil.disk_usage('/')\n\n    cover_opened = GPIO.input(SENSECOVER)\n\n    homepage_data = {\n        'cpu_usage': psutil.cpu_percent(interval=0.1),\n        'memory_usage_percent': psutil.virtual_memory()[2],\n        'memory_usage_total': psutil.virtual_memory()[0],\n        'memory_usage_used': psutil.virtual_memory()[3],\n        'cpu_temp': temp,\n        'upload': upload,\n        'download': download,\n        'card_space_used': card_space.used,\n        'card_space_total': card_space.total,\n        'card_space_percent': card_space.percent,\n        'cover_state': 'Opened' if cover_opened else 'Closed'\n    }\n    return jsonify(homepage_data)\n\n\n@webinterface.route('/api/change_setting', methods=['GET'])\ndef change_setting():\n    setting_name = request.args.get('setting_name')\n    value = request.args.get('value')\n    second_value = request.args.get('second_value')\n    disable_sequence = request.args.get('disable_sequence')\n\n    reload_sequence = True\n    if (second_value == \"no_reload\"):\n        reload_sequence = False\n\n    if (disable_sequence == \"true\"):\n        webinterface.ledsettings.__init__(webinterface.usersettings)\n        webinterface.ledsettings.sequence_active = False\n\n    if setting_name == \"clean_ledstrip\":\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    if setting_name == \"led_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n\n        webinterface.ledsettings.color_mode = \"Single\"\n\n        webinterface.ledsettings.red = rgb[0]\n        webinterface.ledsettings.green = rgb[1]\n        webinterface.ledsettings.blue = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"color_mode\", webinterface.ledsettings.color_mode)\n        webinterface.usersettings.change_setting_value(\"red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"light_mode\":\n        webinterface.ledsettings.mode = value\n        webinterface.usersettings.change_setting_value(\"mode\", value)\n\n    if setting_name == \"fading_speed\" or setting_name == \"velocity_speed\":\n        webinterface.ledsettings.fadingspeed = int(value)\n        webinterface.usersettings.change_setting_value(\"fadingspeed\", webinterface.ledsettings.fadingspeed)\n\n    if setting_name == \"brightness\":\n        webinterface.usersettings.change_setting_value(\"brightness_percent\", int(value))\n        webinterface.ledstrip.change_brightness(int(value), True)\n\n    if setting_name == \"backlight_brightness\":\n        webinterface.ledsettings.backlight_brightness_percent = int(value)\n        webinterface.ledsettings.backlight_brightness = 255 * webinterface.ledsettings.backlight_brightness_percent / 100\n        webinterface.usersettings.change_setting_value(\"backlight_brightness\",\n                                                       int(webinterface.ledsettings.backlight_brightness))\n        webinterface.usersettings.change_setting_value(\"backlight_brightness_percent\",\n                                                       webinterface.ledsettings.backlight_brightness_percent)\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    if setting_name == \"backlight_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n\n        webinterface.ledsettings.backlight_red = rgb[0]\n        webinterface.ledsettings.backlight_green = rgb[1]\n        webinterface.ledsettings.backlight_blue = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"backlight_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"backlight_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"backlight_blue\", rgb[2])\n\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    if setting_name == \"sides_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n\n        webinterface.ledsettings.adjacent_red = rgb[0]\n        webinterface.ledsettings.adjacent_green = rgb[1]\n        webinterface.ledsettings.adjacent_blue = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"adjacent_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"adjacent_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"adjacent_blue\", rgb[2])\n\n    if setting_name == \"sides_color_mode\":\n        webinterface.ledsettings.adjacent_mode = value\n        webinterface.usersettings.change_setting_value(\"adjacent_mode\", value)\n\n    if setting_name == \"input_port\":\n        webinterface.usersettings.change_setting_value(\"input_port\", value)\n        webinterface.midiports.change_port(\"inport\", value)\n\n    if setting_name == \"secondary_input_port\":\n        webinterface.usersettings.change_setting_value(\"secondary_input_port\", value)\n\n    if setting_name == \"play_port\":\n        webinterface.usersettings.change_setting_value(\"play_port\", value)\n        webinterface.midiports.change_port(\"playport\", value)\n\n    if setting_name == \"skipped_notes\":\n        webinterface.usersettings.change_setting_value(\"skipped_notes\", value)\n        webinterface.ledsettings.skipped_notes = value\n\n    if setting_name == \"add_note_offset\":\n        webinterface.ledsettings.add_note_offset()\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"append_note_offset\":\n        webinterface.ledsettings.append_note_offset()\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"remove_note_offset\":\n        webinterface.ledsettings.del_note_offset(int(value) + 1)\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"note_offsets\":\n        webinterface.usersettings.change_setting_value(\"note_offsets\", value)\n\n    if setting_name == \"update_note_offset\":\n        webinterface.ledsettings.update_note_offset(int(value) + 1, second_value)\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"led_count\":\n        webinterface.usersettings.change_setting_value(\"led_count\", int(value))\n        webinterface.ledstrip.change_led_count(int(value), True)\n\n    if setting_name == \"shift\":\n        webinterface.usersettings.change_setting_value(\"shift\", int(value))\n        webinterface.ledstrip.change_shift(int(value), True)\n\n    if setting_name == \"reverse\":\n        webinterface.usersettings.change_setting_value(\"reverse\", int(value))\n        webinterface.ledstrip.change_reverse(int(value), True)\n\n    if setting_name == \"color_mode\":\n        reload_sequence = True\n        if (second_value == \"no_reload\"):\n            reload_sequence = False\n\n        webinterface.ledsettings.color_mode = value\n        webinterface.usersettings.change_setting_value(\"color_mode\", webinterface.ledsettings.color_mode)\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"add_multicolor\":\n        webinterface.ledsettings.addcolor()\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"add_multicolor_and_set_value\":\n        settings = json.loads(value)\n\n        webinterface.ledsettings.multicolor.clear()\n        webinterface.ledsettings.multicolor_range.clear()\n\n        for key, value in settings.items():\n            rgb = wc.hex_to_rgb(\"#\" + value[\"color\"])\n\n            webinterface.ledsettings.multicolor.append([int(rgb[0]), int(rgb[1]), int(rgb[2])])\n            webinterface.ledsettings.multicolor_range.append([int(value[\"range\"][0]), int(value[\"range\"][1])])\n\n        webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\",\n                                                       webinterface.ledsettings.multicolor_range)\n\n        return jsonify(success=True)\n\n    if setting_name == \"remove_multicolor\":\n        webinterface.ledsettings.deletecolor(int(value) + 1)\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"multicolor\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.multicolor[int(second_value)][0] = rgb[0]\n        webinterface.ledsettings.multicolor[int(second_value)][1] = rgb[1]\n        webinterface.ledsettings.multicolor[int(second_value)][2] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"multicolor_range_left\":\n        webinterface.ledsettings.multicolor_range[int(second_value)][0] = int(value)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"multicolor_range_right\":\n        webinterface.ledsettings.multicolor_range[int(second_value)][1] = int(value)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"remove_all_multicolors\":\n        webinterface.ledsettings.multicolor.clear()\n        webinterface.ledsettings.multicolor_range.clear()\n\n        webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)\n        return jsonify(success=True)\n\n    if setting_name == \"rainbow_offset\":\n        webinterface.ledsettings.rainbow_offset = int(value)\n        webinterface.usersettings.change_setting_value(\"rainbow_offset\",\n                                                       int(webinterface.ledsettings.rainbow_offset))\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"rainbow_scale\":\n        webinterface.ledsettings.rainbow_scale = int(value)\n        webinterface.usersettings.change_setting_value(\"rainbow_scale\",\n                                                       int(webinterface.ledsettings.rainbow_scale))\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"rainbow_timeshift\":\n        webinterface.ledsettings.rainbow_timeshift = int(value)\n        webinterface.usersettings.change_setting_value(\"rainbow_timeshift\",\n                                                       int(webinterface.ledsettings.rainbow_timeshift))\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_slowest_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.speed_slowest[\"red\"] = rgb[0]\n        webinterface.ledsettings.speed_slowest[\"green\"] = rgb[1]\n        webinterface.ledsettings.speed_slowest[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"speed_slowest_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"speed_slowest_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"speed_slowest_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_fastest_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.speed_fastest[\"red\"] = rgb[0]\n        webinterface.ledsettings.speed_fastest[\"green\"] = rgb[1]\n        webinterface.ledsettings.speed_fastest[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"speed_fastest_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"speed_fastest_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"speed_fastest_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"gradient_start_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.gradient_start[\"red\"] = rgb[0]\n        webinterface.ledsettings.gradient_start[\"green\"] = rgb[1]\n        webinterface.ledsettings.gradient_start[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"gradient_start_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"gradient_start_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"gradient_start_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"gradient_end_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.gradient_end[\"red\"] = rgb[0]\n        webinterface.ledsettings.gradient_end[\"green\"] = rgb[1]\n        webinterface.ledsettings.gradient_end[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"gradient_end_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"gradient_end_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"gradient_end_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_max_notes\":\n        webinterface.ledsettings.speed_max_notes = int(value)\n        webinterface.usersettings.change_setting_value(\"speed_max_notes\", int(value))\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_period_in_seconds\":\n        webinterface.ledsettings.speed_period_in_seconds = float(value)\n        webinterface.usersettings.change_setting_value(\"speed_period_in_seconds\", float(value))\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"key_in_scale_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.key_in_scale[\"red\"] = rgb[0]\n        webinterface.ledsettings.key_in_scale[\"green\"] = rgb[1]\n        webinterface.ledsettings.key_in_scale[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"key_in_scale_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"key_in_scale_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"key_in_scale_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"key_not_in_scale_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.key_not_in_scale[\"red\"] = rgb[0]\n        webinterface.ledsettings.key_not_in_scale[\"green\"] = rgb[1]\n        webinterface.ledsettings.key_not_in_scale[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"key_not_in_scale_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"key_not_in_scale_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"key_not_in_scale_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"scale_key\":\n        webinterface.ledsettings.scale_key = int(value)\n        webinterface.usersettings.change_setting_value(\"scale_key\", int(value))\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"next_step\":\n        webinterface.ledsettings.set_sequence(0, 1, False)\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"set_sequence\":\n        if (int(value) == 0):\n            webinterface.ledsettings.__init__(webinterface.usersettings)\n            webinterface.ledsettings.sequence_active = False\n        else:\n            webinterface.ledsettings.set_sequence(int(value) - 1, 0)\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"change_sequence_name\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n        sequence_to_edit = \"sequence_\" + str(value)\n\n        sequences_tree.getElementsByTagName(sequence_to_edit)[\n            0].getElementsByTagName(\"settings\")[\n            0].getElementsByTagName(\"sequence_name\")[0].firstChild.nodeValue = str(second_value)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"change_step_value\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n        sequence_to_edit = \"sequence_\" + str(value)\n\n        sequences_tree.getElementsByTagName(sequence_to_edit)[\n            0].getElementsByTagName(\"settings\")[\n            0].getElementsByTagName(\"next_step\")[0].firstChild.nodeValue = str(second_value)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"change_step_activation_method\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n        sequence_to_edit = \"sequence_\" + str(value)\n\n        sequences_tree.getElementsByTagName(sequence_to_edit)[\n            0].getElementsByTagName(\"settings\")[\n            0].getElementsByTagName(\"control_number\")[0].firstChild.nodeValue = str(second_value)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"add_sequence\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        sequences_amount = 1\n        while True:\n            if (len(sequences_tree.getElementsByTagName(\"sequence_\" + str(sequences_amount))) == 0):\n                break\n            sequences_amount += 1\n\n        settings = sequences_tree.createElement(\"settings\")\n\n        control_number = sequences_tree.createElement(\"control_number\")\n        control_number.appendChild(sequences_tree.createTextNode(\"0\"))\n        settings.appendChild(control_number)\n\n        next_step = sequences_tree.createElement(\"next_step\")\n        next_step.appendChild(sequences_tree.createTextNode(\"1\"))\n        settings.appendChild(next_step)\n\n        sequence_name = sequences_tree.createElement(\"sequence_name\")\n        sequence_name.appendChild(sequences_tree.createTextNode(\"Sequence \" + str(sequences_amount)))\n        settings.appendChild(sequence_name)\n\n        step = sequences_tree.createElement(\"step_1\")\n\n        color = sequences_tree.createElement(\"color\")\n        color.appendChild(sequences_tree.createTextNode(\"RGB\"))\n        step.appendChild(color)\n\n        red = sequences_tree.createElement(\"Red\")\n        red.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(red)\n\n        green = sequences_tree.createElement(\"Green\")\n        green.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(green)\n\n        blue = sequences_tree.createElement(\"Blue\")\n        blue.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(blue)\n\n        light_mode = sequences_tree.createElement(\"light_mode\")\n        light_mode.appendChild(sequences_tree.createTextNode(\"Normal\"))\n        step.appendChild(light_mode)\n\n        element = sequences_tree.createElement(\"sequence_\" + str(sequences_amount))\n        element.appendChild(settings)\n        element.appendChild(step)\n\n        sequences_tree.getElementsByTagName(\"list\")[0].appendChild(element)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"remove_sequence\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        # removing sequence node\n        nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))\n        for node in nodes:\n            parent = node.parentNode\n            parent.removeChild(node)\n\n        # changing nodes tag names\n        i = 1\n        for sequence in sequences_tree.getElementsByTagName(\"list\")[0].childNodes:\n            if (sequence.nodeType == 1):\n                sequences_tree.getElementsByTagName(sequence.nodeName)[0].tagName = \"sequence_\" + str(i)\n                i += 1\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"add_step\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        step_amount = 1\n        while True:\n            if (len(sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(\n                    \"step_\" + str(step_amount))) == 0):\n                break\n            step_amount += 1\n\n        step = sequences_tree.createElement(\"step_\" + str(step_amount))\n\n        color = sequences_tree.createElement(\"color\")\n\n        color.appendChild(sequences_tree.createTextNode(\"RGB\"))\n        step.appendChild(color)\n\n        red = sequences_tree.createElement(\"Red\")\n        red.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(red)\n\n        green = sequences_tree.createElement(\"Green\")\n        green.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(green)\n\n        blue = sequences_tree.createElement(\"Blue\")\n        blue.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(blue)\n\n        light_mode = sequences_tree.createElement(\"light_mode\")\n        light_mode.appendChild(sequences_tree.createTextNode(\"Normal\"))\n        step.appendChild(light_mode)\n\n        sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].appendChild(step)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence, reload_steps_list=True)\n\n    # remove node list with a tag name \"step_\" + str(value), and change tag names to maintain order\n    if setting_name == \"remove_step\":\n\n        second_value = int(second_value)\n        second_value += 1\n\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        # removing step node\n        nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(\n            \"step_\" + str(second_value))\n        for node in nodes:\n            parent = node.parentNode\n            parent.removeChild(node)\n\n        # changing nodes tag names\n        i = 1\n        for step in sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].childNodes:\n            if (step.nodeType == 1 and step.tagName != \"settings\"):\n                sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(step.nodeName)[\n                    0].tagName = \"step_\" + str(i)\n                i += 1\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    # saving current led settings as sequence step\n    if setting_name == \"save_led_settings_to_step\" and second_value != \"\":\n\n        # remove node and child under \"sequence_\" + str(value) and \"step_\" + str(second_value)\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        second_value = int(second_value)\n        second_value += 1\n\n        nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(\n            \"step_\" + str(second_value))\n        for node in nodes:\n            parent = node.parentNode\n            parent.removeChild(node)\n\n        # create new step node\n        step = sequences_tree.createElement(\"step_\" + str(second_value))\n\n        # load color mode from webinterface.ledsettings and put it into step node\n        color_mode = sequences_tree.createElement(\"color\")\n        color_mode.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.color_mode)))\n        step.appendChild(color_mode)\n\n        # load mode from webinterface.ledsettings and put it into step node\n        mode = sequences_tree.createElement(\"light_mode\")\n        mode.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.mode)))\n        step.appendChild(mode)\n\n        # if mode is equal \"Fading\" or \"Velocity\" load mode from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.mode == \"Fading\" or webinterface.ledsettings.mode == \"Velocity\"):\n            fadingspeed = sequences_tree.createElement(\"fadingspeed\")\n\n            # depending on fadingspeed name set different fadingspeed value\n            if (webinterface.ledsettings.fadingspeed == \"Slow\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"10\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Medium\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"20\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Fast\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"40\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Very fast\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"50\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Instant\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"1000\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Very slow\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"2\"))\n\n            step.appendChild(fadingspeed)\n\n        # if color_mode is equal to \"Single\" load color from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Single\"):\n            red = sequences_tree.createElement(\"Red\")\n            red.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.red)))\n            step.appendChild(red)\n\n            green = sequences_tree.createElement(\"Green\")\n            green.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.green)))\n            step.appendChild(green)\n\n            blue = sequences_tree.createElement(\"Blue\")\n            blue.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.blue)))\n            step.appendChild(blue)\n\n        # if color_mode is equal to \"Multicolor\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Multicolor\"):\n            # load value from webinterface.ledsettings.multicolor\n            multicolor = webinterface.ledsettings.multicolor\n\n            # loop through multicolor object and add each color to step node under \"sequence_\"+str(value) with tag name \"color_\"+str(i)\n            for i in range(len(multicolor)):\n                color = sequences_tree.createElement(\"color_\" + str(i + 1))\n                new_multicolor = str(multicolor[i])\n                new_multicolor = new_multicolor.replace(\"[\", \"\")\n                new_multicolor = new_multicolor.replace(\"]\", \"\")\n\n                color.appendChild(sequences_tree.createTextNode(new_multicolor))\n                step.appendChild(color)\n\n            # same as above but with multicolor_range and \"color_range_\"+str(i)\n            multicolor_range = webinterface.ledsettings.multicolor_range\n            for i in range(len(multicolor_range)):\n                color_range = sequences_tree.createElement(\"color_range_\" + str(i + 1))\n                new_multicolor_range = str(multicolor_range[i])\n\n                new_multicolor_range = new_multicolor_range.replace(\"[\", \"\")\n                new_multicolor_range = new_multicolor_range.replace(\"]\", \"\")\n                color_range.appendChild(sequences_tree.createTextNode(new_multicolor_range))\n                step.appendChild(color_range)\n\n        # if color_mode is equal to \"Rainbow\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Rainbow\"):\n            # load values rainbow_offset, rainbow_scale and rainbow_timeshift from webinterface.ledsettings and put them into step node under Offset, Scale and Timeshift\n            rainbow_offset = sequences_tree.createElement(\"Offset\")\n            rainbow_offset.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_offset)))\n            step.appendChild(rainbow_offset)\n\n            rainbow_scale = sequences_tree.createElement(\"Scale\")\n            rainbow_scale.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_scale)))\n            step.appendChild(rainbow_scale)\n\n            rainbow_timeshift = sequences_tree.createElement(\"Timeshift\")\n            rainbow_timeshift.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_timeshift)))\n            step.appendChild(rainbow_timeshift)\n\n        # if color_mode is equal to \"Speed\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Speed\"):\n            # load values speed_slowest[\"red\"] etc from webinterface.ledsettings and put them under speed_slowest_red etc\n            speed_slowest_red = sequences_tree.createElement(\"speed_slowest_red\")\n            speed_slowest_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"red\"])))\n            step.appendChild(speed_slowest_red)\n\n            speed_slowest_green = sequences_tree.createElement(\"speed_slowest_green\")\n            speed_slowest_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"green\"])))\n            step.appendChild(speed_slowest_green)\n\n            speed_slowest_blue = sequences_tree.createElement(\"speed_slowest_blue\")\n            speed_slowest_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"blue\"])))\n            step.appendChild(speed_slowest_blue)\n\n            # same as above but with \"fastest\"\n            speed_fastest_red = sequences_tree.createElement(\"speed_fastest_red\")\n            speed_fastest_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"red\"])))\n            step.appendChild(speed_fastest_red)\n\n            speed_fastest_green = sequences_tree.createElement(\"speed_fastest_green\")\n            speed_fastest_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"green\"])))\n            step.appendChild(speed_fastest_green)\n\n            speed_fastest_blue = sequences_tree.createElement(\"speed_fastest_blue\")\n            speed_fastest_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"blue\"])))\n            step.appendChild(speed_fastest_blue)\n\n            # load \"speed_max_notes\" and \"speed_period_in_seconds\" values from webinterface.ledsettings\n            # and put them under speed_max_notes and speed_period_in_seconds\n\n            speed_max_notes = sequences_tree.createElement(\"speed_max_notes\")\n            speed_max_notes.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.speed_max_notes)))\n            step.appendChild(speed_max_notes)\n\n            speed_period_in_seconds = sequences_tree.createElement(\"speed_period_in_seconds\")\n            speed_period_in_seconds.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_period_in_seconds)))\n            step.appendChild(speed_period_in_seconds)\n\n        # if color_mode is equal to \"Gradient\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Gradient\"):\n            # load values gradient_start_red etc from webinterface.ledsettings and put them under gradient_start_red etc\n            gradient_start_red = sequences_tree.createElement(\"gradient_start_red\")\n            gradient_start_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"red\"])))\n            step.appendChild(gradient_start_red)\n\n            gradient_start_green = sequences_tree.createElement(\"gradient_start_green\")\n            gradient_start_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"green\"])))\n            step.appendChild(gradient_start_green)\n\n            gradient_start_blue = sequences_tree.createElement(\"gradient_start_blue\")\n            gradient_start_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"blue\"])))\n            step.appendChild(gradient_start_blue)\n\n            # same as above but with gradient_end\n            gradient_end_red = sequences_tree.createElement(\"gradient_end_red\")\n            gradient_end_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"red\"])))\n            step.appendChild(gradient_end_red)\n\n            gradient_end_green = sequences_tree.createElement(\"gradient_end_green\")\n            gradient_end_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"green\"])))\n            step.appendChild(gradient_end_green)\n\n            gradient_end_blue = sequences_tree.createElement(\"gradient_end_blue\")\n            gradient_end_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"blue\"])))\n            step.appendChild(gradient_end_blue)\n\n        # if color_mode is equal to \"Scale\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Scale\"):\n            # load values key_in_scale_red etc from webinterface.ledsettings and put them under key_in_scale_red etc\n            key_in_scale_red = sequences_tree.createElement(\"key_in_scale_red\")\n            key_in_scale_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"red\"])))\n            step.appendChild(key_in_scale_red)\n\n            key_in_scale_green = sequences_tree.createElement(\"key_in_scale_green\")\n            key_in_scale_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"green\"])))\n            step.appendChild(key_in_scale_green)\n\n            key_in_scale_blue = sequences_tree.createElement(\"key_in_scale_blue\")\n            key_in_scale_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"blue\"])))\n            step.appendChild(key_in_scale_blue)\n\n            # same as above but with key_not_in_scale\n            key_not_in_scale_red = sequences_tree.createElement(\"key_not_in_scale_red\")\n            key_not_in_scale_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"red\"])))\n            step.appendChild(key_not_in_scale_red)\n\n            key_not_in_scale_green = sequences_tree.createElement(\"key_not_in_scale_green\")\n            key_not_in_scale_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"green\"])))\n            step.appendChild(key_not_in_scale_green)\n\n            key_not_in_scale_blue = sequences_tree.createElement(\"key_not_in_scale_blue\")\n            key_not_in_scale_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"blue\"])))\n            step.appendChild(key_not_in_scale_blue)\n\n        try:\n            sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[\n                0].insertBefore(step,\n                                sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[\n                                    0].getElementsByTagName(\"step_\" + str(second_value + 1))[0])\n        except:\n            sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].appendChild(step)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence, reload_steps_list=True)\n\n    if setting_name == \"screen_on\":\n        if (int(value) == 0):\n            webinterface.menu.disable_screen()\n        else:\n            webinterface.menu.enable_screen()\n\n    if setting_name == \"reset_to_default\":\n        webinterface.usersettings.reset_to_default()\n\n    if setting_name == \"restart_rpi\":\n        call(\"sudo /sbin/reboot now\", shell=True)\n\n    if setting_name == \"turnoff_rpi\":\n        call(\"sudo /sbin/shutdown -h now\", shell=True)\n\n    if setting_name == \"update_rpi\":\n        call(\"sudo git reset --hard HEAD\", shell=True)\n        call(\"sudo git checkout .\", shell=True)\n        call(\"sudo git clean -fdx\", shell=True)\n        call(\"sudo git pull origin master\", shell=True)\n\n    if setting_name == \"connect_ports\":\n        webinterface.midiports.connectall()\n        return jsonify(success=True, reload_ports=True)\n\n    if setting_name == \"disconnect_ports\":\n        call(\"sudo aconnect -x\", shell=True)\n        return jsonify(success=True, reload_ports=True)\n\n    if setting_name == \"restart_rtp\":\n        call(\"sudo systemctl restart rtpmidid\", shell=True)\n\n    if setting_name == \"start_recording\":\n        webinterface.saving.start_recording()\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"cancel_recording\":\n        webinterface.saving.cancel_recording()\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"save_recording\":\n        now = datetime.datetime.now()\n        current_date = now.strftime(\"%Y-%m-%d %H:%M\")\n        webinterface.saving.save(current_date)\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"change_song_name\":\n        if os.path.exists(\"Songs/\" + second_value):\n            return jsonify(success=False, reload_songs=True, error=second_value + \" already exists\")\n\n        if \"_main\" in value:\n            search_name = value.replace(\"_main.mid\", \"\")\n            for fname in os.listdir('Songs'):\n                if search_name in fname:\n                    new_name = second_value.replace(\".mid\", \"\") + fname.replace(search_name, \"\")\n                    os.rename('Songs/' + fname, 'Songs/' + new_name)\n        else:\n            os.rename('Songs/' + value, 'Songs/' + second_value)\n            os.rename('Songs/cache/' + value + \".p\", 'Songs/cache/' + second_value + \".p\")\n\n\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"remove_song\":\n        if \"_main\" in value:\n            name_no_suffix = value.replace(\"_main.mid\", \"\")\n            for fname in os.listdir('Songs'):\n                if name_no_suffix in fname:\n                    os.remove(\"Songs/\" + fname)\n        else:\n            os.remove(\"Songs/\" + value)\n\n            file_types = [\".musicxml\", \".xml\", \".mxl\", \".abc\"]\n            for file_type in file_types:\n                try:\n                    os.remove(\"Songs/\" + value.replace(\".mid\", file_type))\n                except:\n                    pass\n\n            try:\n                os.remove(\"Songs/cache/\" + value + \".p\")\n            except:\n                print(\"No cache file for \" + value)\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"download_song\":\n        if \"_main\" in value:\n            zipObj = ZipFile(\"Songs/\" + value.replace(\".mid\", \"\") + \".zip\", 'w')\n            name_no_suffix = value.replace(\"_main.mid\", \"\")\n            songs_count = 0\n            for fname in os.listdir('Songs'):\n                if name_no_suffix in fname and \".zip\" not in fname:\n                    songs_count += 1\n                    zipObj.write(\"Songs/\" + fname)\n            zipObj.close()\n            if songs_count == 1:\n                os.remove(\"Songs/\" + value.replace(\".mid\", \"\") + \".zip\")\n                return send_file(\"../Songs/\" + value, mimetype='application/x-csv', attachment_filename=value,\n                                 as_attachment=True)\n            else:\n                return send_file(\"../Songs/\" + value.replace(\".mid\", \"\") + \".zip\", mimetype='application/x-csv',\n                                 attachment_filename=value.replace(\".mid\", \"\") + \".zip\", as_attachment=True)\n        else:\n            return send_file(\"../Songs/\" + value, mimetype='application/x-csv', attachment_filename=value,\n                             as_attachment=True)\n\n    if setting_name == \"download_sheet_music\":\n        file_types = [\".musicxml\", \".xml\", \".mxl\", \".abc\"]\n        i = 0\n        while i < len(file_types):\n            try:\n                new_name = value.replace(\".mid\", file_types[i])\n                return send_file(\"../Songs/\" + new_name, mimetype='application/x-csv', attachment_filename=new_name,\n                                 as_attachment=True)\n            except:\n                i += 1\n        webinterface.learning.convert_midi_to_abc(value)\n        try:\n            return send_file(\"../Songs/\" + value.replace(\".mid\", \".abc\"), mimetype='application/x-csv',\n                             attachment_filename=value.replace(\".mid\", \".abc\"), as_attachment=True)\n        except:\n            print(\"Converting failed\")\n\n\n    if setting_name == \"start_midi_play\":\n        webinterface.saving.t = threading.Thread(target=play_midi, args=(value, webinterface.midiports,\n                                                                         webinterface.saving, webinterface.menu,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.ledstrip))\n        webinterface.saving.t.start()\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"stop_midi_play\":\n        webinterface.saving.is_playing_midi.clear()\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"learning_load_song\":\n        webinterface.learning.t = threading.Thread(target=webinterface.learning.load_midi, args=(value,))\n        webinterface.learning.t.start()\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"start_learning_song\":\n        webinterface.learning.t = threading.Thread(target=webinterface.learning.learn_midi)\n        webinterface.learning.t.start()\n\n        return jsonify(success=True)\n\n    if setting_name == \"stop_learning_song\":\n        webinterface.learning.is_started_midi = False\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_practice\":\n        value = int(value)\n        webinterface.learning.practice = value\n        webinterface.learning.practice = clamp(webinterface.learning.practice, 0, len(webinterface.learning.practiceList) - 1)\n        webinterface.usersettings.change_setting_value(\"practice\", webinterface.learning.practice)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_tempo\":\n        value = int(value)\n        webinterface.learning.set_tempo = value\n        webinterface.learning.set_tempo = clamp(webinterface.learning.set_tempo, 10, 200)\n        webinterface.usersettings.change_setting_value(\"set_tempo\", webinterface.learning.set_tempo)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_hands\":\n        value = int(value)\n        webinterface.learning.hands = value\n        webinterface.learning.hands = clamp(webinterface.learning.hands, 0, len(webinterface.learning.handsList) - 1)\n        webinterface.usersettings.change_setting_value(\"hands\", webinterface.learning.hands)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_mute_hand\":\n        value = int(value)\n        webinterface.learning.mute_hand = value\n        webinterface.learning.mute_hand = clamp(webinterface.learning.mute_hand, 0, len(webinterface.learning.mute_handList) - 1)\n        webinterface.usersettings.change_setting_value(\"mute_hand\", webinterface.learning.mute_hand)\n\n        return jsonify(success=True)\n\n    if setting_name == \"learning_start_point\":\n        value = int(value)\n        webinterface.learning.start_point = value\n        webinterface.learning.start_point = clamp(webinterface.learning.start_point, 0, webinterface.learning.end_point - 1)\n        webinterface.usersettings.change_setting_value(\"start_point\", webinterface.learning.start_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True)\n\n    if setting_name == \"learning_end_point\":\n        value = int(value)\n        webinterface.learning.end_point = value\n        webinterface.learning.end_point = clamp(webinterface.learning.end_point, webinterface.learning.start_point + 1, 100)\n        webinterface.usersettings.change_setting_value(\"end_point\", webinterface.learning.end_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True)\n\n    if setting_name == \"set_current_time_as_start_point\":\n        webinterface.learning.start_point = round(float(webinterface.learning.current_idx * 100 / float(len(webinterface.learning.song_tracks))), 3)\n        webinterface.learning.start_point = clamp(webinterface.learning.start_point, 0, webinterface.learning.end_point - 1)\n        webinterface.usersettings.change_setting_value(\"start_point\", webinterface.learning.start_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"set_current_time_as_end_point\":\n        webinterface.learning.end_point = round(float(webinterface.learning.current_idx * 100 / float(len(webinterface.learning.song_tracks))), 3)\n        webinterface.learning.end_point = clamp(webinterface.learning.end_point, webinterface.learning.start_point + 1, 100)\n        webinterface.usersettings.change_setting_value(\"end_point\", webinterface.learning.end_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"change_handL_color\":\n        value = int(value)\n        webinterface.learning.hand_colorL += value\n        webinterface.learning.hand_colorL = clamp(webinterface.learning.hand_colorL, 0, len(webinterface.learning.hand_colorList) - 1)\n        webinterface.usersettings.change_setting_value(\"hand_colorL\", webinterface.learning.hand_colorL)\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"change_handR_color\":\n        value = int(value)\n        webinterface.learning.hand_colorR += value\n        webinterface.learning.hand_colorR = clamp(webinterface.learning.hand_colorR, 0, len(webinterface.learning.hand_colorList) - 1)\n        webinterface.usersettings.change_setting_value(\"hand_colorR\", webinterface.learning.hand_colorR)\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"change_learning_loop\":\n        value = int(value == 'true')\n        webinterface.learning.is_loop_active = value\n        webinterface.usersettings.change_setting_value(\"is_loop_active\", webinterface.learning.is_loop_active)\n\n        return jsonify(success=True)\n\n\n    return jsonify(success=True)\n\n\n@webinterface.route('/api/get_sequence_setting', methods=['GET'])\ndef get_sequence_setting():\n    response = {}\n\n    color_mode = webinterface.ledsettings.color_mode\n\n    light_mode = webinterface.ledsettings.mode\n\n    fading_speed = webinterface.ledsettings.fadingspeed\n\n    red = webinterface.ledsettings.red\n    green = webinterface.ledsettings.green\n    blue = webinterface.ledsettings.blue\n    led_color = wc.rgb_to_hex((int(red), int(green), int(blue)))\n\n    multicolor = webinterface.ledsettings.multicolor\n    multicolor_range = webinterface.ledsettings.multicolor_range\n\n    rainbow_scale = webinterface.ledsettings.rainbow_scale\n    rainbow_offset = webinterface.ledsettings.rainbow_offset\n    rainbow_timeshift = webinterface.ledsettings.rainbow_timeshift\n\n    speed_slowest_red = webinterface.ledsettings.speed_slowest[\"red\"]\n    speed_slowest_green = webinterface.ledsettings.speed_slowest[\"green\"]\n    speed_slowest_blue = webinterface.ledsettings.speed_slowest[\"blue\"]\n    speed_slowest_color = wc.rgb_to_hex((int(speed_slowest_red), int(speed_slowest_green), int(speed_slowest_blue)))\n    response[\"speed_slowest_color\"] = speed_slowest_color\n\n    speed_fastest_red = webinterface.ledsettings.speed_fastest[\"red\"]\n    speed_fastest_green = webinterface.ledsettings.speed_fastest[\"green\"]\n    speed_fastest_blue = webinterface.ledsettings.speed_fastest[\"blue\"]\n    speed_fastest_color = wc.rgb_to_hex((int(speed_fastest_red), int(speed_fastest_green), int(speed_fastest_blue)))\n    response[\"speed_fastest_color\"] = speed_fastest_color\n\n    gradient_start_red = webinterface.ledsettings.gradient_start[\"red\"]\n    gradient_start_green = webinterface.ledsettings.gradient_start[\"green\"]\n    gradient_start_blue = webinterface.ledsettings.gradient_start[\"blue\"]\n    gradient_start_color = wc.rgb_to_hex((int(gradient_start_red), int(gradient_start_green), int(gradient_start_blue)))\n    response[\"gradient_start_color\"] = gradient_start_color\n\n    gradient_end_red = webinterface.ledsettings.gradient_end[\"red\"]\n    gradient_end_green = webinterface.ledsettings.gradient_end[\"green\"]\n    gradient_end_blue = webinterface.ledsettings.gradient_end[\"blue\"]\n    gradient_end_color = wc.rgb_to_hex((int(gradient_end_red), int(gradient_end_green), int(gradient_end_blue)))\n    response[\"gradient_end_color\"] = gradient_end_color\n\n    key_in_scale_red = webinterface.ledsettings.key_in_scale[\"red\"]\n    key_in_scale_green = webinterface.ledsettings.key_in_scale[\"green\"]\n    key_in_scale_blue = webinterface.ledsettings.key_in_scale[\"blue\"]\n    key_in_scale_color = wc.rgb_to_hex((int(key_in_scale_red), int(key_in_scale_green), int(key_in_scale_blue)))\n    response[\"key_in_scale_color\"] = key_in_scale_color\n\n    key_not_in_scale_red = webinterface.ledsettings.key_not_in_scale[\"red\"]\n    key_not_in_scale_green = webinterface.ledsettings.key_not_in_scale[\"green\"]\n    key_not_in_scale_blue = webinterface.ledsettings.key_not_in_scale[\"blue\"]\n    key_not_in_scale_color = wc.rgb_to_hex(\n        (int(key_not_in_scale_red), int(key_not_in_scale_green), int(key_not_in_scale_blue)))\n    response[\"key_not_in_scale_color\"] = key_not_in_scale_color\n\n    response[\"scale_key\"] = webinterface.ledsettings.scale_key\n\n    response[\"led_color\"] = led_color\n    response[\"color_mode\"] = color_mode\n    response[\"light_mode\"] = light_mode\n    response[\"fading_speed\"] = fading_speed\n    response[\"multicolor\"] = multicolor\n    response[\"multicolor_range\"] = multicolor_range\n    response[\"rainbow_scale\"] = rainbow_scale\n    response[\"rainbow_offset\"] = rainbow_offset\n    response[\"rainbow_timeshift\"] = rainbow_timeshift\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_settings', methods=['GET'])\ndef get_settings():\n    response = {}\n\n    red = webinterface.usersettings.get_setting_value(\"red\")\n    green = webinterface.usersettings.get_setting_value(\"green\")\n    blue = webinterface.usersettings.get_setting_value(\"blue\")\n    led_color = wc.rgb_to_hex((int(red), int(green), int(blue)))\n\n    backlight_red = webinterface.usersettings.get_setting_value(\"backlight_red\")\n    backlight_green = webinterface.usersettings.get_setting_value(\"backlight_green\")\n    backlight_blue = webinterface.usersettings.get_setting_value(\"backlight_blue\")\n    backlight_color = wc.rgb_to_hex((int(backlight_red), int(backlight_green), int(backlight_blue)))\n\n    sides_red = webinterface.usersettings.get_setting_value(\"adjacent_red\")\n    sides_green = webinterface.usersettings.get_setting_value(\"adjacent_green\")\n    sides_blue = webinterface.usersettings.get_setting_value(\"adjacent_blue\")\n    sides_color = wc.rgb_to_hex((int(sides_red), int(sides_green), int(sides_blue)))\n\n    light_mode = webinterface.usersettings.get_setting_value(\"mode\")\n    fading_speed = webinterface.usersettings.get_setting_value(\"fadingspeed\")\n\n    brightness = webinterface.usersettings.get_setting_value(\"brightness_percent\")\n    backlight_brightness = webinterface.usersettings.get_setting_value(\"backlight_brightness_percent\")\n\n    response[\"led_color\"] = led_color\n    response[\"light_mode\"] = light_mode\n    response[\"fading_speed\"] = fading_speed\n\n    response[\"brightness\"] = brightness\n    response[\"backlight_brightness\"] = backlight_brightness\n    response[\"backlight_color\"] = backlight_color\n\n    response[\"sides_color_mode\"] = webinterface.usersettings.get_setting_value(\"adjacent_mode\")\n    response[\"sides_color\"] = sides_color\n\n    response[\"input_port\"] = webinterface.usersettings.get_setting_value(\"input_port\")\n    response[\"play_port\"] = webinterface.usersettings.get_setting_value(\"play_port\")\n\n    response[\"skipped_notes\"] = webinterface.usersettings.get_setting_value(\"skipped_notes\")\n    response[\"note_offsets\"] = webinterface.usersettings.get_setting_value(\"note_offsets\")\n    response[\"led_count\"] = webinterface.usersettings.get_setting_value(\"led_count\")\n    response[\"led_shift\"] = webinterface.usersettings.get_setting_value(\"shift\")\n    response[\"led_reverse\"] = webinterface.usersettings.get_setting_value(\"reverse\")\n\n    response[\"color_mode\"] = webinterface.usersettings.get_setting_value(\"color_mode\")\n\n    response[\"multicolor\"] = webinterface.usersettings.get_setting_value(\"multicolor\")\n    response[\"multicolor_range\"] = webinterface.usersettings.get_setting_value(\"multicolor_range\")\n\n    response[\"rainbow_offset\"] = webinterface.usersettings.get_setting_value(\"rainbow_offset\")\n    response[\"rainbow_scale\"] = webinterface.usersettings.get_setting_value(\"rainbow_scale\")\n    response[\"rainbow_timeshift\"] = webinterface.usersettings.get_setting_value(\"rainbow_timeshift\")\n\n    speed_slowest_red = webinterface.usersettings.get_setting_value(\"speed_slowest_red\")\n    speed_slowest_green = webinterface.usersettings.get_setting_value(\"speed_slowest_green\")\n    speed_slowest_blue = webinterface.usersettings.get_setting_value(\"speed_slowest_blue\")\n    speed_slowest_color = wc.rgb_to_hex((int(speed_slowest_red), int(speed_slowest_green), int(speed_slowest_blue)))\n    response[\"speed_slowest_color\"] = speed_slowest_color\n\n    speed_fastest_red = webinterface.usersettings.get_setting_value(\"speed_fastest_red\")\n    speed_fastest_green = webinterface.usersettings.get_setting_value(\"speed_fastest_green\")\n    speed_fastest_blue = webinterface.usersettings.get_setting_value(\"speed_fastest_blue\")\n    speed_fastest_color = wc.rgb_to_hex((int(speed_fastest_red), int(speed_fastest_green), int(speed_fastest_blue)))\n    response[\"speed_fastest_color\"] = speed_fastest_color\n\n    gradient_start_red = webinterface.usersettings.get_setting_value(\"gradient_start_red\")\n    gradient_start_green = webinterface.usersettings.get_setting_value(\"gradient_start_green\")\n    gradient_start_blue = webinterface.usersettings.get_setting_value(\"gradient_start_blue\")\n    gradient_start_color = wc.rgb_to_hex((int(gradient_start_red), int(gradient_start_green), int(gradient_start_blue)))\n    response[\"gradient_start_color\"] = gradient_start_color\n\n    gradient_end_red = webinterface.usersettings.get_setting_value(\"gradient_end_red\")\n    gradient_end_green = webinterface.usersettings.get_setting_value(\"gradient_end_green\")\n    gradient_end_blue = webinterface.usersettings.get_setting_value(\"gradient_end_blue\")\n    gradient_end_color = wc.rgb_to_hex((int(gradient_end_red), int(gradient_end_green), int(gradient_end_blue)))\n    response[\"gradient_end_color\"] = gradient_end_color\n\n    key_in_scale_red = webinterface.usersettings.get_setting_value(\"key_in_scale_red\")\n    key_in_scale_green = webinterface.usersettings.get_setting_value(\"key_in_scale_green\")\n    key_in_scale_blue = webinterface.usersettings.get_setting_value(\"key_in_scale_blue\")\n    key_in_scale_color = wc.rgb_to_hex((int(key_in_scale_red), int(key_in_scale_green), int(key_in_scale_blue)))\n    response[\"key_in_scale_color\"] = key_in_scale_color\n\n    key_not_in_scale_red = webinterface.usersettings.get_setting_value(\"key_not_in_scale_red\")\n    key_not_in_scale_green = webinterface.usersettings.get_setting_value(\"key_not_in_scale_green\")\n    key_not_in_scale_blue = webinterface.usersettings.get_setting_value(\"key_not_in_scale_blue\")\n    key_not_in_scale_color = wc.rgb_to_hex(\n        (int(key_not_in_scale_red), int(key_not_in_scale_green), int(key_not_in_scale_blue)))\n    response[\"key_not_in_scale_color\"] = key_not_in_scale_color\n\n    response[\"scale_key\"] = webinterface.usersettings.get_setting_value(\"scale_key\")\n\n    response[\"speed_max_notes\"] = webinterface.usersettings.get_setting_value(\"speed_max_notes\")\n    response[\"speed_period_in_seconds\"] = webinterface.usersettings.get_setting_value(\"speed_period_in_seconds\")\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_recording_status', methods=['GET'])\ndef get_recording_status():\n    response = {}\n    response[\"input_port\"] = webinterface.usersettings.get_setting_value(\"input_port\")\n    response[\"play_port\"] = webinterface.usersettings.get_setting_value(\"play_port\")\n\n    response[\"isrecording\"] = webinterface.saving.isrecording\n\n    response[\"isplaying\"] = webinterface.saving.is_playing_midi\n\n    return jsonify(response)\n\n@webinterface.route('/api/get_learning_status', methods=['GET'])\ndef get_learning_status():\n    response = {}\n    response[\"loading\"] = webinterface.learning.loading\n    response[\"practice\"] = webinterface.usersettings.get_setting_value(\"practice\")\n    response[\"hands\"] = webinterface.usersettings.get_setting_value(\"hands\")\n    response[\"mute_hand\"] = webinterface.usersettings.get_setting_value(\"mute_hand\")\n    response[\"start_point\"] = webinterface.usersettings.get_setting_value(\"start_point\")\n    response[\"end_point\"] = webinterface.usersettings.get_setting_value(\"end_point\")\n    response[\"set_tempo\"] = webinterface.usersettings.get_setting_value(\"set_tempo\")\n    response[\"hand_colorR\"] = webinterface.usersettings.get_setting_value(\"hand_colorR\")\n    response[\"hand_colorL\"] = webinterface.usersettings.get_setting_value(\"hand_colorL\")\n    response[\"hand_colorList\"] = ast.literal_eval(webinterface.usersettings.get_setting_value(\"hand_colorList\"))\n    response[\"is_loop_active\"] = ast.literal_eval(webinterface.usersettings.get_setting_value(\"is_loop_active\"))\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_songs', methods=['GET'])\ndef get_songs():\n    page = request.args.get('page')\n    page = int(page) - 1\n    length = request.args.get('length')\n    sortby = request.args.get('sortby')\n    search = request.args.get('search')\n\n    start = int(page) * int(length)\n\n    songs_list_dict = {}\n\n    path = 'Songs/'\n    songs_list = os.listdir(path)\n    songs_list = [os.path.join(path, i) for i in songs_list]\n\n    songs_list = sorted(songs_list, key=os.path.getmtime)\n\n    if sortby == \"dateAsc\":\n        songs_list.reverse()\n\n    if sortby == \"nameAsc\":\n        songs_list.sort()\n\n    if sortby == \"nameDesc\":\n        songs_list.sort(reverse=True)\n\n    i = 0\n    total_songs = 0\n\n    for song in songs_list:\n        if \"_#\" in song or not song.endswith('.mid'):\n            continue\n        if search:\n            if search.lower() not in song.lower():\n                continue\n        total_songs += 1\n\n    max_page = int(math.ceil(total_songs / int(length)))\n\n    for song in songs_list:\n        song = song.replace(\"Songs/\", \"\")\n        date = os.path.getmtime(\"Songs/\" + song)\n        if \"_#\" in song or not song.endswith('.mid'):\n            continue\n\n        if search:\n            if search.lower() not in song.lower():\n                continue\n\n        i += 1\n        if (i > int(start)):\n            songs_list_dict[song] = date\n\n        if len(songs_list_dict) >= int(length):\n            break\n\n    return render_template('songs_list.html', len=len(songs_list_dict), songs_list_dict=songs_list_dict, page=page,\n                           max_page=max_page, total_songs=total_songs)\n\n\n@webinterface.route('/api/get_ports', methods=['GET'])\ndef get_ports():\n    ports = mido.get_input_names()\n    ports = list(dict.fromkeys(ports))\n    response = {}\n    response[\"ports_list\"] = ports\n    response[\"input_port\"] = webinterface.usersettings.get_setting_value(\"input_port\")\n    response[\"secondary_input_port\"] = webinterface.usersettings.get_setting_value(\"secondary_input_port\")\n    response[\"play_port\"] = webinterface.usersettings.get_setting_value(\"play_port\")\n    response[\"connected_ports\"] = str(subprocess.check_output([\"aconnect\", \"-i\", \"-l\"]))\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/switch_ports', methods=['GET'])\ndef switch_ports():\n    active_input = webinterface.usersettings.get_setting_value(\"input_port\")\n    secondary_input = webinterface.usersettings.get_setting_value(\"secondary_input_port\")\n    webinterface.midiports.change_port(\"inport\", secondary_input)\n    webinterface.usersettings.change_setting_value(\"secondary_input_port\", active_input)\n    webinterface.usersettings.change_setting_value(\"input_port\", secondary_input)\n\n    fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    return jsonify(success=True)\n\n\n@webinterface.route('/api/get_sequences', methods=['GET'])\ndef get_sequences():\n    response = {}\n    sequences_list = []\n    sequences_tree = minidom.parse(\"sequences.xml\")\n    i = 0\n    while True:\n        try:\n            i += 1\n            sequences_list.append(\n                sequences_tree.getElementsByTagName(\"sequence_\" + str(i))[0].getElementsByTagName(\n                    \"sequence_name\")[\n                    0].firstChild.nodeValue)\n        except:\n            break\n    response[\"sequences_list\"] = sequences_list\n    response[\"sequence_number\"] = webinterface.ledsettings.sequence_number\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_steps_list', methods=['GET'])\ndef get_steps_list():\n    response = {}\n    sequence = request.args.get('sequence')\n    sequences_tree = minidom.parse(\"sequences.xml\")\n    steps_list = []\n    i = 0\n\n    for step in sequences_tree.getElementsByTagName(\"sequence_\" + str(sequence))[0].childNodes:\n        if (step.nodeType == 1):\n            if (step.nodeName == \"settings\"):\n                response[\"control_number\"] = step.getElementsByTagName(\"control_number\")[0].firstChild.nodeValue\n                response[\"next_step\"] = step.getElementsByTagName(\"next_step\")[0].firstChild.nodeValue\n            else:\n                steps_list.append(step.nodeName)\n\n    response[\"steps_list\"] = steps_list\n    return jsonify(response)\n\n\n@webinterface.route('/api/set_step_properties', methods=['GET'])\ndef set_step_properties():\n    sequence = request.args.get('sequence')\n    step = request.args.get('step')\n    webinterface.ledsettings.set_sequence(sequence, step, True)\n\n    return jsonify(success=True)\n\n\ndef pretty_print(dom):\n    return '\\n'.join([line for line in dom.toprettyxml(indent=' ' * 4).split('\\n') if line.strip()])\n\n\ndef pretty_save(file_path, sequences_tree):\n    with open(file_path, \"w\", encoding=\"utf8\") as outfile:\n        outfile.write(pretty_print(sequences_tree))\n"], "fixing_code": ["from webinterface import webinterface\nfrom flask import render_template, send_file, redirect, request, url_for, jsonify\nfrom werkzeug.utils import safe_join\nfrom lib.functions import find_between, theaterChase, theaterChaseRainbow, sound_of_da_police, scanner, breathing, \\\n    rainbow, rainbowCycle, fastColorWipe, play_midi, clamp\nimport psutil\nimport threading\nfrom neopixel import *\nimport webcolors as wc\nimport mido\nfrom xml.dom import minidom\nfrom subprocess import call\nimport subprocess\nimport datetime\nimport os\nimport math\nfrom zipfile import ZipFile\nimport json\nimport ast\nimport time\nimport RPi.GPIO as GPIO\n\nSENSECOVER = 12\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SENSECOVER, GPIO.IN, GPIO.PUD_UP)\n\n@webinterface.route('/api/start_animation', methods=['GET'])\ndef start_animation():\n    choice = request.args.get('name')\n    speed = request.args.get('speed')\n    if choice == \"theaterchase\":\n        webinterface.menu.t = threading.Thread(target=theaterChase, args=(webinterface.ledstrip.strip,\n                                                                          Color(127, 127, 127),\n                                                                          webinterface.ledsettings,\n                                                                          webinterface.menu))\n        webinterface.menu.t.start()\n\n    if choice == \"theaterchaserainbow\":\n        webinterface.t = threading.Thread(target=theaterChaseRainbow, args=(webinterface.ledstrip.strip,\n                                                                            webinterface.ledsettings,\n                                                                            webinterface.menu, 5))\n        webinterface.t.start()\n\n    if choice == \"soundofdapolice\":\n        webinterface.t = threading.Thread(target=sound_of_da_police, args=(webinterface.ledstrip.strip,\n                                                                           webinterface.ledsettings,\n                                                                           webinterface.menu, 1))\n        webinterface.t.start()\n\n    if choice == \"scanner\":\n        webinterface.t = threading.Thread(target=scanner, args=(webinterface.ledstrip.strip,\n                                                                webinterface.ledsettings,\n                                                                webinterface.menu, 1))\n        webinterface.t.start()\n\n    if choice == \"breathing\":\n        if speed == \"fast\":\n            webinterface.t = threading.Thread(target=breathing, args=(webinterface.ledstrip.strip,\n                                                                      webinterface.ledsettings,\n                                                                      webinterface.menu, 5))\n            webinterface.t.start()\n        if speed == \"medium\":\n            webinterface.t = threading.Thread(target=breathing, args=(webinterface.ledstrip.strip,\n                                                                      webinterface.ledsettings,\n                                                                      webinterface.menu, 10))\n            webinterface.t.start()\n        if speed == \"slow\":\n            webinterface.t = threading.Thread(target=breathing, args=(webinterface.ledstrip.strip,\n                                                                      webinterface.ledsettings,\n                                                                      webinterface.menu, 25))\n            webinterface.t.start()\n\n    if choice == \"rainbow\":\n        if speed == \"fast\":\n            webinterface.t = threading.Thread(target=rainbow, args=(webinterface.ledstrip.strip,\n                                                                    webinterface.ledsettings,\n                                                                    webinterface.menu, 2))\n            webinterface.t.start()\n        if speed == \"medium\":\n            webinterface.t = threading.Thread(target=rainbow, args=(webinterface.ledstrip.strip,\n                                                                    webinterface.ledsettings,\n                                                                    webinterface.menu, 20))\n            webinterface.t.start()\n        if speed == \"slow\":\n            webinterface.t = threading.Thread(target=rainbow, args=(webinterface.ledstrip.strip,\n                                                                    webinterface.ledsettings,\n                                                                    webinterface.menu, 50))\n            webinterface.t.start()\n\n    if choice == \"rainbowcycle\":\n        if speed == \"fast\":\n            webinterface.t = threading.Thread(target=rainbowCycle, args=(webinterface.ledstrip.strip,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.menu, 1))\n            webinterface.t.start()\n        if speed == \"medium\":\n            webinterface.t = threading.Thread(target=rainbowCycle, args=(webinterface.ledstrip.strip,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.menu, 20))\n            webinterface.t.start()\n        if speed == \"slow\":\n            webinterface.t = threading.Thread(target=rainbowCycle, args=(webinterface.ledstrip.strip,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.menu, 50))\n            webinterface.t.start()\n\n    if choice == \"stop\":\n        webinterface.menu.screensaver_is_running = False\n\n    return jsonify(success=True)\n\n\n@webinterface.route('/api/get_homepage_data')\ndef get_homepage_data():\n    try:\n        temp = find_between(str(psutil.sensors_temperatures()[\"cpu_thermal\"]), \"current=\", \",\")\n    except:\n        temp = find_between(str(psutil.sensors_temperatures()[\"cpu-thermal\"]), \"current=\", \",\")\n\n    temp = round(float(temp), 1)\n\n    upload = psutil.net_io_counters().bytes_sent\n    download = psutil.net_io_counters().bytes_recv\n\n    card_space = psutil.disk_usage('/')\n\n    cover_opened = GPIO.input(SENSECOVER)\n\n    homepage_data = {\n        'cpu_usage': psutil.cpu_percent(interval=0.1),\n        'memory_usage_percent': psutil.virtual_memory()[2],\n        'memory_usage_total': psutil.virtual_memory()[0],\n        'memory_usage_used': psutil.virtual_memory()[3],\n        'cpu_temp': temp,\n        'upload': upload,\n        'download': download,\n        'card_space_used': card_space.used,\n        'card_space_total': card_space.total,\n        'card_space_percent': card_space.percent,\n        'cover_state': 'Opened' if cover_opened else 'Closed'\n    }\n    return jsonify(homepage_data)\n\n\n@webinterface.route('/api/change_setting', methods=['GET'])\ndef change_setting():\n    setting_name = request.args.get('setting_name')\n    value = request.args.get('value')\n    second_value = request.args.get('second_value')\n    disable_sequence = request.args.get('disable_sequence')\n\n    reload_sequence = True\n    if (second_value == \"no_reload\"):\n        reload_sequence = False\n\n    if (disable_sequence == \"true\"):\n        webinterface.ledsettings.__init__(webinterface.usersettings)\n        webinterface.ledsettings.sequence_active = False\n\n    if setting_name == \"clean_ledstrip\":\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    if setting_name == \"led_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n\n        webinterface.ledsettings.color_mode = \"Single\"\n\n        webinterface.ledsettings.red = rgb[0]\n        webinterface.ledsettings.green = rgb[1]\n        webinterface.ledsettings.blue = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"color_mode\", webinterface.ledsettings.color_mode)\n        webinterface.usersettings.change_setting_value(\"red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"light_mode\":\n        webinterface.ledsettings.mode = value\n        webinterface.usersettings.change_setting_value(\"mode\", value)\n\n    if setting_name == \"fading_speed\" or setting_name == \"velocity_speed\":\n        webinterface.ledsettings.fadingspeed = int(value)\n        webinterface.usersettings.change_setting_value(\"fadingspeed\", webinterface.ledsettings.fadingspeed)\n\n    if setting_name == \"brightness\":\n        webinterface.usersettings.change_setting_value(\"brightness_percent\", int(value))\n        webinterface.ledstrip.change_brightness(int(value), True)\n\n    if setting_name == \"backlight_brightness\":\n        webinterface.ledsettings.backlight_brightness_percent = int(value)\n        webinterface.ledsettings.backlight_brightness = 255 * webinterface.ledsettings.backlight_brightness_percent / 100\n        webinterface.usersettings.change_setting_value(\"backlight_brightness\",\n                                                       int(webinterface.ledsettings.backlight_brightness))\n        webinterface.usersettings.change_setting_value(\"backlight_brightness_percent\",\n                                                       webinterface.ledsettings.backlight_brightness_percent)\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    if setting_name == \"backlight_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n\n        webinterface.ledsettings.backlight_red = rgb[0]\n        webinterface.ledsettings.backlight_green = rgb[1]\n        webinterface.ledsettings.backlight_blue = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"backlight_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"backlight_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"backlight_blue\", rgb[2])\n\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    if setting_name == \"sides_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n\n        webinterface.ledsettings.adjacent_red = rgb[0]\n        webinterface.ledsettings.adjacent_green = rgb[1]\n        webinterface.ledsettings.adjacent_blue = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"adjacent_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"adjacent_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"adjacent_blue\", rgb[2])\n\n    if setting_name == \"sides_color_mode\":\n        webinterface.ledsettings.adjacent_mode = value\n        webinterface.usersettings.change_setting_value(\"adjacent_mode\", value)\n\n    if setting_name == \"input_port\":\n        webinterface.usersettings.change_setting_value(\"input_port\", value)\n        webinterface.midiports.change_port(\"inport\", value)\n\n    if setting_name == \"secondary_input_port\":\n        webinterface.usersettings.change_setting_value(\"secondary_input_port\", value)\n\n    if setting_name == \"play_port\":\n        webinterface.usersettings.change_setting_value(\"play_port\", value)\n        webinterface.midiports.change_port(\"playport\", value)\n\n    if setting_name == \"skipped_notes\":\n        webinterface.usersettings.change_setting_value(\"skipped_notes\", value)\n        webinterface.ledsettings.skipped_notes = value\n\n    if setting_name == \"add_note_offset\":\n        webinterface.ledsettings.add_note_offset()\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"append_note_offset\":\n        webinterface.ledsettings.append_note_offset()\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"remove_note_offset\":\n        webinterface.ledsettings.del_note_offset(int(value) + 1)\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"note_offsets\":\n        webinterface.usersettings.change_setting_value(\"note_offsets\", value)\n\n    if setting_name == \"update_note_offset\":\n        webinterface.ledsettings.update_note_offset(int(value) + 1, second_value)\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"led_count\":\n        webinterface.usersettings.change_setting_value(\"led_count\", int(value))\n        webinterface.ledstrip.change_led_count(int(value), True)\n\n    if setting_name == \"shift\":\n        webinterface.usersettings.change_setting_value(\"shift\", int(value))\n        webinterface.ledstrip.change_shift(int(value), True)\n\n    if setting_name == \"reverse\":\n        webinterface.usersettings.change_setting_value(\"reverse\", int(value))\n        webinterface.ledstrip.change_reverse(int(value), True)\n\n    if setting_name == \"color_mode\":\n        reload_sequence = True\n        if (second_value == \"no_reload\"):\n            reload_sequence = False\n\n        webinterface.ledsettings.color_mode = value\n        webinterface.usersettings.change_setting_value(\"color_mode\", webinterface.ledsettings.color_mode)\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"add_multicolor\":\n        webinterface.ledsettings.addcolor()\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"add_multicolor_and_set_value\":\n        settings = json.loads(value)\n\n        webinterface.ledsettings.multicolor.clear()\n        webinterface.ledsettings.multicolor_range.clear()\n\n        for key, value in settings.items():\n            rgb = wc.hex_to_rgb(\"#\" + value[\"color\"])\n\n            webinterface.ledsettings.multicolor.append([int(rgb[0]), int(rgb[1]), int(rgb[2])])\n            webinterface.ledsettings.multicolor_range.append([int(value[\"range\"][0]), int(value[\"range\"][1])])\n\n        webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\",\n                                                       webinterface.ledsettings.multicolor_range)\n\n        return jsonify(success=True)\n\n    if setting_name == \"remove_multicolor\":\n        webinterface.ledsettings.deletecolor(int(value) + 1)\n        return jsonify(success=True, reload=True)\n\n    if setting_name == \"multicolor\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.multicolor[int(second_value)][0] = rgb[0]\n        webinterface.ledsettings.multicolor[int(second_value)][1] = rgb[1]\n        webinterface.ledsettings.multicolor[int(second_value)][2] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"multicolor_range_left\":\n        webinterface.ledsettings.multicolor_range[int(second_value)][0] = int(value)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"multicolor_range_right\":\n        webinterface.ledsettings.multicolor_range[int(second_value)][1] = int(value)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"remove_all_multicolors\":\n        webinterface.ledsettings.multicolor.clear()\n        webinterface.ledsettings.multicolor_range.clear()\n\n        webinterface.usersettings.change_setting_value(\"multicolor\", webinterface.ledsettings.multicolor)\n        webinterface.usersettings.change_setting_value(\"multicolor_range\", webinterface.ledsettings.multicolor_range)\n        return jsonify(success=True)\n\n    if setting_name == \"rainbow_offset\":\n        webinterface.ledsettings.rainbow_offset = int(value)\n        webinterface.usersettings.change_setting_value(\"rainbow_offset\",\n                                                       int(webinterface.ledsettings.rainbow_offset))\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"rainbow_scale\":\n        webinterface.ledsettings.rainbow_scale = int(value)\n        webinterface.usersettings.change_setting_value(\"rainbow_scale\",\n                                                       int(webinterface.ledsettings.rainbow_scale))\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"rainbow_timeshift\":\n        webinterface.ledsettings.rainbow_timeshift = int(value)\n        webinterface.usersettings.change_setting_value(\"rainbow_timeshift\",\n                                                       int(webinterface.ledsettings.rainbow_timeshift))\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_slowest_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.speed_slowest[\"red\"] = rgb[0]\n        webinterface.ledsettings.speed_slowest[\"green\"] = rgb[1]\n        webinterface.ledsettings.speed_slowest[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"speed_slowest_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"speed_slowest_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"speed_slowest_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_fastest_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.speed_fastest[\"red\"] = rgb[0]\n        webinterface.ledsettings.speed_fastest[\"green\"] = rgb[1]\n        webinterface.ledsettings.speed_fastest[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"speed_fastest_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"speed_fastest_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"speed_fastest_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"gradient_start_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.gradient_start[\"red\"] = rgb[0]\n        webinterface.ledsettings.gradient_start[\"green\"] = rgb[1]\n        webinterface.ledsettings.gradient_start[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"gradient_start_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"gradient_start_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"gradient_start_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"gradient_end_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.gradient_end[\"red\"] = rgb[0]\n        webinterface.ledsettings.gradient_end[\"green\"] = rgb[1]\n        webinterface.ledsettings.gradient_end[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"gradient_end_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"gradient_end_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"gradient_end_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_max_notes\":\n        webinterface.ledsettings.speed_max_notes = int(value)\n        webinterface.usersettings.change_setting_value(\"speed_max_notes\", int(value))\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"speed_period_in_seconds\":\n        webinterface.ledsettings.speed_period_in_seconds = float(value)\n        webinterface.usersettings.change_setting_value(\"speed_period_in_seconds\", float(value))\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"key_in_scale_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.key_in_scale[\"red\"] = rgb[0]\n        webinterface.ledsettings.key_in_scale[\"green\"] = rgb[1]\n        webinterface.ledsettings.key_in_scale[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"key_in_scale_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"key_in_scale_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"key_in_scale_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"key_not_in_scale_color\":\n        rgb = wc.hex_to_rgb(\"#\" + value)\n        webinterface.ledsettings.key_not_in_scale[\"red\"] = rgb[0]\n        webinterface.ledsettings.key_not_in_scale[\"green\"] = rgb[1]\n        webinterface.ledsettings.key_not_in_scale[\"blue\"] = rgb[2]\n\n        webinterface.usersettings.change_setting_value(\"key_not_in_scale_red\", rgb[0])\n        webinterface.usersettings.change_setting_value(\"key_not_in_scale_green\", rgb[1])\n        webinterface.usersettings.change_setting_value(\"key_not_in_scale_blue\", rgb[2])\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"scale_key\":\n        webinterface.ledsettings.scale_key = int(value)\n        webinterface.usersettings.change_setting_value(\"scale_key\", int(value))\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"next_step\":\n        webinterface.ledsettings.set_sequence(0, 1, False)\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"set_sequence\":\n        if (int(value) == 0):\n            webinterface.ledsettings.__init__(webinterface.usersettings)\n            webinterface.ledsettings.sequence_active = False\n        else:\n            webinterface.ledsettings.set_sequence(int(value) - 1, 0)\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"change_sequence_name\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n        sequence_to_edit = \"sequence_\" + str(value)\n\n        sequences_tree.getElementsByTagName(sequence_to_edit)[\n            0].getElementsByTagName(\"settings\")[\n            0].getElementsByTagName(\"sequence_name\")[0].firstChild.nodeValue = str(second_value)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"change_step_value\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n        sequence_to_edit = \"sequence_\" + str(value)\n\n        sequences_tree.getElementsByTagName(sequence_to_edit)[\n            0].getElementsByTagName(\"settings\")[\n            0].getElementsByTagName(\"next_step\")[0].firstChild.nodeValue = str(second_value)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"change_step_activation_method\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n        sequence_to_edit = \"sequence_\" + str(value)\n\n        sequences_tree.getElementsByTagName(sequence_to_edit)[\n            0].getElementsByTagName(\"settings\")[\n            0].getElementsByTagName(\"control_number\")[0].firstChild.nodeValue = str(second_value)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"add_sequence\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        sequences_amount = 1\n        while True:\n            if (len(sequences_tree.getElementsByTagName(\"sequence_\" + str(sequences_amount))) == 0):\n                break\n            sequences_amount += 1\n\n        settings = sequences_tree.createElement(\"settings\")\n\n        control_number = sequences_tree.createElement(\"control_number\")\n        control_number.appendChild(sequences_tree.createTextNode(\"0\"))\n        settings.appendChild(control_number)\n\n        next_step = sequences_tree.createElement(\"next_step\")\n        next_step.appendChild(sequences_tree.createTextNode(\"1\"))\n        settings.appendChild(next_step)\n\n        sequence_name = sequences_tree.createElement(\"sequence_name\")\n        sequence_name.appendChild(sequences_tree.createTextNode(\"Sequence \" + str(sequences_amount)))\n        settings.appendChild(sequence_name)\n\n        step = sequences_tree.createElement(\"step_1\")\n\n        color = sequences_tree.createElement(\"color\")\n        color.appendChild(sequences_tree.createTextNode(\"RGB\"))\n        step.appendChild(color)\n\n        red = sequences_tree.createElement(\"Red\")\n        red.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(red)\n\n        green = sequences_tree.createElement(\"Green\")\n        green.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(green)\n\n        blue = sequences_tree.createElement(\"Blue\")\n        blue.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(blue)\n\n        light_mode = sequences_tree.createElement(\"light_mode\")\n        light_mode.appendChild(sequences_tree.createTextNode(\"Normal\"))\n        step.appendChild(light_mode)\n\n        element = sequences_tree.createElement(\"sequence_\" + str(sequences_amount))\n        element.appendChild(settings)\n        element.appendChild(step)\n\n        sequences_tree.getElementsByTagName(\"list\")[0].appendChild(element)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"remove_sequence\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        # removing sequence node\n        nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))\n        for node in nodes:\n            parent = node.parentNode\n            parent.removeChild(node)\n\n        # changing nodes tag names\n        i = 1\n        for sequence in sequences_tree.getElementsByTagName(\"list\")[0].childNodes:\n            if (sequence.nodeType == 1):\n                sequences_tree.getElementsByTagName(sequence.nodeName)[0].tagName = \"sequence_\" + str(i)\n                i += 1\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    if setting_name == \"add_step\":\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        step_amount = 1\n        while True:\n            if (len(sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(\n                    \"step_\" + str(step_amount))) == 0):\n                break\n            step_amount += 1\n\n        step = sequences_tree.createElement(\"step_\" + str(step_amount))\n\n        color = sequences_tree.createElement(\"color\")\n\n        color.appendChild(sequences_tree.createTextNode(\"RGB\"))\n        step.appendChild(color)\n\n        red = sequences_tree.createElement(\"Red\")\n        red.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(red)\n\n        green = sequences_tree.createElement(\"Green\")\n        green.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(green)\n\n        blue = sequences_tree.createElement(\"Blue\")\n        blue.appendChild(sequences_tree.createTextNode(\"255\"))\n        step.appendChild(blue)\n\n        light_mode = sequences_tree.createElement(\"light_mode\")\n        light_mode.appendChild(sequences_tree.createTextNode(\"Normal\"))\n        step.appendChild(light_mode)\n\n        sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].appendChild(step)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence, reload_steps_list=True)\n\n    # remove node list with a tag name \"step_\" + str(value), and change tag names to maintain order\n    if setting_name == \"remove_step\":\n\n        second_value = int(second_value)\n        second_value += 1\n\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        # removing step node\n        nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(\n            \"step_\" + str(second_value))\n        for node in nodes:\n            parent = node.parentNode\n            parent.removeChild(node)\n\n        # changing nodes tag names\n        i = 1\n        for step in sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].childNodes:\n            if (step.nodeType == 1 and step.tagName != \"settings\"):\n                sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(step.nodeName)[\n                    0].tagName = \"step_\" + str(i)\n                i += 1\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence)\n\n    # saving current led settings as sequence step\n    if setting_name == \"save_led_settings_to_step\" and second_value != \"\":\n\n        # remove node and child under \"sequence_\" + str(value) and \"step_\" + str(second_value)\n        sequences_tree = minidom.parse(\"sequences.xml\")\n\n        second_value = int(second_value)\n        second_value += 1\n\n        nodes = sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].getElementsByTagName(\n            \"step_\" + str(second_value))\n        for node in nodes:\n            parent = node.parentNode\n            parent.removeChild(node)\n\n        # create new step node\n        step = sequences_tree.createElement(\"step_\" + str(second_value))\n\n        # load color mode from webinterface.ledsettings and put it into step node\n        color_mode = sequences_tree.createElement(\"color\")\n        color_mode.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.color_mode)))\n        step.appendChild(color_mode)\n\n        # load mode from webinterface.ledsettings and put it into step node\n        mode = sequences_tree.createElement(\"light_mode\")\n        mode.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.mode)))\n        step.appendChild(mode)\n\n        # if mode is equal \"Fading\" or \"Velocity\" load mode from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.mode == \"Fading\" or webinterface.ledsettings.mode == \"Velocity\"):\n            fadingspeed = sequences_tree.createElement(\"fadingspeed\")\n\n            # depending on fadingspeed name set different fadingspeed value\n            if (webinterface.ledsettings.fadingspeed == \"Slow\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"10\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Medium\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"20\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Fast\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"40\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Very fast\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"50\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Instant\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"1000\"))\n            elif (webinterface.ledsettings.fadingspeed == \"Very slow\"):\n                fadingspeed.appendChild(sequences_tree.createTextNode(\"2\"))\n\n            step.appendChild(fadingspeed)\n\n        # if color_mode is equal to \"Single\" load color from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Single\"):\n            red = sequences_tree.createElement(\"Red\")\n            red.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.red)))\n            step.appendChild(red)\n\n            green = sequences_tree.createElement(\"Green\")\n            green.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.green)))\n            step.appendChild(green)\n\n            blue = sequences_tree.createElement(\"Blue\")\n            blue.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.blue)))\n            step.appendChild(blue)\n\n        # if color_mode is equal to \"Multicolor\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Multicolor\"):\n            # load value from webinterface.ledsettings.multicolor\n            multicolor = webinterface.ledsettings.multicolor\n\n            # loop through multicolor object and add each color to step node under \"sequence_\"+str(value) with tag name \"color_\"+str(i)\n            for i in range(len(multicolor)):\n                color = sequences_tree.createElement(\"color_\" + str(i + 1))\n                new_multicolor = str(multicolor[i])\n                new_multicolor = new_multicolor.replace(\"[\", \"\")\n                new_multicolor = new_multicolor.replace(\"]\", \"\")\n\n                color.appendChild(sequences_tree.createTextNode(new_multicolor))\n                step.appendChild(color)\n\n            # same as above but with multicolor_range and \"color_range_\"+str(i)\n            multicolor_range = webinterface.ledsettings.multicolor_range\n            for i in range(len(multicolor_range)):\n                color_range = sequences_tree.createElement(\"color_range_\" + str(i + 1))\n                new_multicolor_range = str(multicolor_range[i])\n\n                new_multicolor_range = new_multicolor_range.replace(\"[\", \"\")\n                new_multicolor_range = new_multicolor_range.replace(\"]\", \"\")\n                color_range.appendChild(sequences_tree.createTextNode(new_multicolor_range))\n                step.appendChild(color_range)\n\n        # if color_mode is equal to \"Rainbow\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Rainbow\"):\n            # load values rainbow_offset, rainbow_scale and rainbow_timeshift from webinterface.ledsettings and put them into step node under Offset, Scale and Timeshift\n            rainbow_offset = sequences_tree.createElement(\"Offset\")\n            rainbow_offset.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_offset)))\n            step.appendChild(rainbow_offset)\n\n            rainbow_scale = sequences_tree.createElement(\"Scale\")\n            rainbow_scale.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_scale)))\n            step.appendChild(rainbow_scale)\n\n            rainbow_timeshift = sequences_tree.createElement(\"Timeshift\")\n            rainbow_timeshift.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.rainbow_timeshift)))\n            step.appendChild(rainbow_timeshift)\n\n        # if color_mode is equal to \"Speed\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Speed\"):\n            # load values speed_slowest[\"red\"] etc from webinterface.ledsettings and put them under speed_slowest_red etc\n            speed_slowest_red = sequences_tree.createElement(\"speed_slowest_red\")\n            speed_slowest_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"red\"])))\n            step.appendChild(speed_slowest_red)\n\n            speed_slowest_green = sequences_tree.createElement(\"speed_slowest_green\")\n            speed_slowest_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"green\"])))\n            step.appendChild(speed_slowest_green)\n\n            speed_slowest_blue = sequences_tree.createElement(\"speed_slowest_blue\")\n            speed_slowest_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_slowest[\"blue\"])))\n            step.appendChild(speed_slowest_blue)\n\n            # same as above but with \"fastest\"\n            speed_fastest_red = sequences_tree.createElement(\"speed_fastest_red\")\n            speed_fastest_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"red\"])))\n            step.appendChild(speed_fastest_red)\n\n            speed_fastest_green = sequences_tree.createElement(\"speed_fastest_green\")\n            speed_fastest_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"green\"])))\n            step.appendChild(speed_fastest_green)\n\n            speed_fastest_blue = sequences_tree.createElement(\"speed_fastest_blue\")\n            speed_fastest_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_fastest[\"blue\"])))\n            step.appendChild(speed_fastest_blue)\n\n            # load \"speed_max_notes\" and \"speed_period_in_seconds\" values from webinterface.ledsettings\n            # and put them under speed_max_notes and speed_period_in_seconds\n\n            speed_max_notes = sequences_tree.createElement(\"speed_max_notes\")\n            speed_max_notes.appendChild(sequences_tree.createTextNode(str(webinterface.ledsettings.speed_max_notes)))\n            step.appendChild(speed_max_notes)\n\n            speed_period_in_seconds = sequences_tree.createElement(\"speed_period_in_seconds\")\n            speed_period_in_seconds.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.speed_period_in_seconds)))\n            step.appendChild(speed_period_in_seconds)\n\n        # if color_mode is equal to \"Gradient\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Gradient\"):\n            # load values gradient_start_red etc from webinterface.ledsettings and put them under gradient_start_red etc\n            gradient_start_red = sequences_tree.createElement(\"gradient_start_red\")\n            gradient_start_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"red\"])))\n            step.appendChild(gradient_start_red)\n\n            gradient_start_green = sequences_tree.createElement(\"gradient_start_green\")\n            gradient_start_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"green\"])))\n            step.appendChild(gradient_start_green)\n\n            gradient_start_blue = sequences_tree.createElement(\"gradient_start_blue\")\n            gradient_start_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_start[\"blue\"])))\n            step.appendChild(gradient_start_blue)\n\n            # same as above but with gradient_end\n            gradient_end_red = sequences_tree.createElement(\"gradient_end_red\")\n            gradient_end_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"red\"])))\n            step.appendChild(gradient_end_red)\n\n            gradient_end_green = sequences_tree.createElement(\"gradient_end_green\")\n            gradient_end_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"green\"])))\n            step.appendChild(gradient_end_green)\n\n            gradient_end_blue = sequences_tree.createElement(\"gradient_end_blue\")\n            gradient_end_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.gradient_end[\"blue\"])))\n            step.appendChild(gradient_end_blue)\n\n        # if color_mode is equal to \"Scale\" load colors from webinterface.ledsettings and put it into step node\n        if (webinterface.ledsettings.color_mode == \"Scale\"):\n            # load values key_in_scale_red etc from webinterface.ledsettings and put them under key_in_scale_red etc\n            key_in_scale_red = sequences_tree.createElement(\"key_in_scale_red\")\n            key_in_scale_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"red\"])))\n            step.appendChild(key_in_scale_red)\n\n            key_in_scale_green = sequences_tree.createElement(\"key_in_scale_green\")\n            key_in_scale_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"green\"])))\n            step.appendChild(key_in_scale_green)\n\n            key_in_scale_blue = sequences_tree.createElement(\"key_in_scale_blue\")\n            key_in_scale_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_in_scale[\"blue\"])))\n            step.appendChild(key_in_scale_blue)\n\n            # same as above but with key_not_in_scale\n            key_not_in_scale_red = sequences_tree.createElement(\"key_not_in_scale_red\")\n            key_not_in_scale_red.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"red\"])))\n            step.appendChild(key_not_in_scale_red)\n\n            key_not_in_scale_green = sequences_tree.createElement(\"key_not_in_scale_green\")\n            key_not_in_scale_green.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"green\"])))\n            step.appendChild(key_not_in_scale_green)\n\n            key_not_in_scale_blue = sequences_tree.createElement(\"key_not_in_scale_blue\")\n            key_not_in_scale_blue.appendChild(\n                sequences_tree.createTextNode(str(webinterface.ledsettings.key_not_in_scale[\"blue\"])))\n            step.appendChild(key_not_in_scale_blue)\n\n        try:\n            sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[\n                0].insertBefore(step,\n                                sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[\n                                    0].getElementsByTagName(\"step_\" + str(second_value + 1))[0])\n        except:\n            sequences_tree.getElementsByTagName(\"sequence_\" + str(value))[0].appendChild(step)\n\n        pretty_save(\"sequences.xml\", sequences_tree)\n\n        return jsonify(success=True, reload_sequence=reload_sequence, reload_steps_list=True)\n\n    if setting_name == \"screen_on\":\n        if (int(value) == 0):\n            webinterface.menu.disable_screen()\n        else:\n            webinterface.menu.enable_screen()\n\n    if setting_name == \"reset_to_default\":\n        webinterface.usersettings.reset_to_default()\n\n    if setting_name == \"restart_rpi\":\n        call(\"sudo /sbin/reboot now\", shell=True)\n\n    if setting_name == \"turnoff_rpi\":\n        call(\"sudo /sbin/shutdown -h now\", shell=True)\n\n    if setting_name == \"update_rpi\":\n        call(\"sudo git reset --hard HEAD\", shell=True)\n        call(\"sudo git checkout .\", shell=True)\n        call(\"sudo git clean -fdx\", shell=True)\n        call(\"sudo git pull origin master\", shell=True)\n\n    if setting_name == \"connect_ports\":\n        webinterface.midiports.connectall()\n        return jsonify(success=True, reload_ports=True)\n\n    if setting_name == \"disconnect_ports\":\n        call(\"sudo aconnect -x\", shell=True)\n        return jsonify(success=True, reload_ports=True)\n\n    if setting_name == \"restart_rtp\":\n        call(\"sudo systemctl restart rtpmidid\", shell=True)\n\n    if setting_name == \"start_recording\":\n        webinterface.saving.start_recording()\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"cancel_recording\":\n        webinterface.saving.cancel_recording()\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"save_recording\":\n        now = datetime.datetime.now()\n        current_date = now.strftime(\"%Y-%m-%d %H:%M\")\n        webinterface.saving.save(current_date)\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"change_song_name\":\n        if os.path.exists(\"Songs/\" + second_value):\n            return jsonify(success=False, reload_songs=True, error=second_value + \" already exists\")\n\n        if \"_main\" in value:\n            search_name = value.replace(\"_main.mid\", \"\")\n            for fname in os.listdir('Songs'):\n                if search_name in fname:\n                    new_name = second_value.replace(\".mid\", \"\") + fname.replace(search_name, \"\")\n                    os.rename('Songs/' + fname, 'Songs/' + new_name)\n        else:\n            os.rename('Songs/' + value, 'Songs/' + second_value)\n            os.rename('Songs/cache/' + value + \".p\", 'Songs/cache/' + second_value + \".p\")\n\n\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"remove_song\":\n        if \"_main\" in value:\n            name_no_suffix = value.replace(\"_main.mid\", \"\")\n            for fname in os.listdir('Songs'):\n                if name_no_suffix in fname:\n                    os.remove(\"Songs/\" + fname)\n        else:\n            os.remove(\"Songs/\" + value)\n\n            file_types = [\".musicxml\", \".xml\", \".mxl\", \".abc\"]\n            for file_type in file_types:\n                try:\n                    os.remove(\"Songs/\" + value.replace(\".mid\", file_type))\n                except:\n                    pass\n\n            try:\n                os.remove(\"Songs/cache/\" + value + \".p\")\n            except:\n                print(\"No cache file for \" + value)\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"download_song\":\n        if \"_main\" in value:\n            zipObj = ZipFile(\"Songs/\" + value.replace(\".mid\", \"\") + \".zip\", 'w')\n            name_no_suffix = value.replace(\"_main.mid\", \"\")\n            songs_count = 0\n            for fname in os.listdir('Songs'):\n                if name_no_suffix in fname and \".zip\" not in fname:\n                    songs_count += 1\n                    zipObj.write(\"Songs/\" + fname)\n            zipObj.close()\n            if songs_count == 1:\n                os.remove(\"Songs/\" + value.replace(\".mid\", \"\") + \".zip\")\n                return send_file(\"../Songs/\" + value, mimetype='application/x-csv', attachment_filename=value,\n                                 as_attachment=True)\n            else:\n                return send_file(\"../Songs/\" + value.replace(\".mid\", \"\") + \".zip\", mimetype='application/x-csv',\n                                 attachment_filename=value.replace(\".mid\", \"\") + \".zip\", as_attachment=True)\n        else:\n            return send_file(safe_join(\"../Songs/\" + value), mimetype='application/x-csv', attachment_filename=value,\n                             as_attachment=True)\n\n    if setting_name == \"download_sheet_music\":\n        file_types = [\".musicxml\", \".xml\", \".mxl\", \".abc\"]\n        i = 0\n        while i < len(file_types):\n            try:\n                new_name = value.replace(\".mid\", file_types[i])\n                return send_file(\"../Songs/\" + new_name, mimetype='application/x-csv', attachment_filename=new_name,\n                                 as_attachment=True)\n            except:\n                i += 1\n        webinterface.learning.convert_midi_to_abc(value)\n        try:\n            return send_file(safe_join(\"../Songs/\", value.replace(\".mid\", \".abc\")), mimetype='application/x-csv',\n                             attachment_filename=value.replace(\".mid\", \".abc\"), as_attachment=True)\n        except:\n            print(\"Converting failed\")\n\n\n    if setting_name == \"start_midi_play\":\n        webinterface.saving.t = threading.Thread(target=play_midi, args=(value, webinterface.midiports,\n                                                                         webinterface.saving, webinterface.menu,\n                                                                         webinterface.ledsettings,\n                                                                         webinterface.ledstrip))\n        webinterface.saving.t.start()\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"stop_midi_play\":\n        webinterface.saving.is_playing_midi.clear()\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n        return jsonify(success=True, reload_songs=True)\n\n    if setting_name == \"learning_load_song\":\n        webinterface.learning.t = threading.Thread(target=webinterface.learning.load_midi, args=(value,))\n        webinterface.learning.t.start()\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"start_learning_song\":\n        webinterface.learning.t = threading.Thread(target=webinterface.learning.learn_midi)\n        webinterface.learning.t.start()\n\n        return jsonify(success=True)\n\n    if setting_name == \"stop_learning_song\":\n        webinterface.learning.is_started_midi = False\n        fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_practice\":\n        value = int(value)\n        webinterface.learning.practice = value\n        webinterface.learning.practice = clamp(webinterface.learning.practice, 0, len(webinterface.learning.practiceList) - 1)\n        webinterface.usersettings.change_setting_value(\"practice\", webinterface.learning.practice)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_tempo\":\n        value = int(value)\n        webinterface.learning.set_tempo = value\n        webinterface.learning.set_tempo = clamp(webinterface.learning.set_tempo, 10, 200)\n        webinterface.usersettings.change_setting_value(\"set_tempo\", webinterface.learning.set_tempo)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_hands\":\n        value = int(value)\n        webinterface.learning.hands = value\n        webinterface.learning.hands = clamp(webinterface.learning.hands, 0, len(webinterface.learning.handsList) - 1)\n        webinterface.usersettings.change_setting_value(\"hands\", webinterface.learning.hands)\n\n        return jsonify(success=True)\n\n    if setting_name == \"change_mute_hand\":\n        value = int(value)\n        webinterface.learning.mute_hand = value\n        webinterface.learning.mute_hand = clamp(webinterface.learning.mute_hand, 0, len(webinterface.learning.mute_handList) - 1)\n        webinterface.usersettings.change_setting_value(\"mute_hand\", webinterface.learning.mute_hand)\n\n        return jsonify(success=True)\n\n    if setting_name == \"learning_start_point\":\n        value = int(value)\n        webinterface.learning.start_point = value\n        webinterface.learning.start_point = clamp(webinterface.learning.start_point, 0, webinterface.learning.end_point - 1)\n        webinterface.usersettings.change_setting_value(\"start_point\", webinterface.learning.start_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True)\n\n    if setting_name == \"learning_end_point\":\n        value = int(value)\n        webinterface.learning.end_point = value\n        webinterface.learning.end_point = clamp(webinterface.learning.end_point, webinterface.learning.start_point + 1, 100)\n        webinterface.usersettings.change_setting_value(\"end_point\", webinterface.learning.end_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True)\n\n    if setting_name == \"set_current_time_as_start_point\":\n        webinterface.learning.start_point = round(float(webinterface.learning.current_idx * 100 / float(len(webinterface.learning.song_tracks))), 3)\n        webinterface.learning.start_point = clamp(webinterface.learning.start_point, 0, webinterface.learning.end_point - 1)\n        webinterface.usersettings.change_setting_value(\"start_point\", webinterface.learning.start_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"set_current_time_as_end_point\":\n        webinterface.learning.end_point = round(float(webinterface.learning.current_idx * 100 / float(len(webinterface.learning.song_tracks))), 3)\n        webinterface.learning.end_point = clamp(webinterface.learning.end_point, webinterface.learning.start_point + 1, 100)\n        webinterface.usersettings.change_setting_value(\"end_point\", webinterface.learning.end_point)\n        webinterface.learning.restart_learning()\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"change_handL_color\":\n        value = int(value)\n        webinterface.learning.hand_colorL += value\n        webinterface.learning.hand_colorL = clamp(webinterface.learning.hand_colorL, 0, len(webinterface.learning.hand_colorList) - 1)\n        webinterface.usersettings.change_setting_value(\"hand_colorL\", webinterface.learning.hand_colorL)\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"change_handR_color\":\n        value = int(value)\n        webinterface.learning.hand_colorR += value\n        webinterface.learning.hand_colorR = clamp(webinterface.learning.hand_colorR, 0, len(webinterface.learning.hand_colorList) - 1)\n        webinterface.usersettings.change_setting_value(\"hand_colorR\", webinterface.learning.hand_colorR)\n\n        return jsonify(success=True, reload_learning_settings=True)\n\n    if setting_name == \"change_learning_loop\":\n        value = int(value == 'true')\n        webinterface.learning.is_loop_active = value\n        webinterface.usersettings.change_setting_value(\"is_loop_active\", webinterface.learning.is_loop_active)\n\n        return jsonify(success=True)\n\n\n    return jsonify(success=True)\n\n\n@webinterface.route('/api/get_sequence_setting', methods=['GET'])\ndef get_sequence_setting():\n    response = {}\n\n    color_mode = webinterface.ledsettings.color_mode\n\n    light_mode = webinterface.ledsettings.mode\n\n    fading_speed = webinterface.ledsettings.fadingspeed\n\n    red = webinterface.ledsettings.red\n    green = webinterface.ledsettings.green\n    blue = webinterface.ledsettings.blue\n    led_color = wc.rgb_to_hex((int(red), int(green), int(blue)))\n\n    multicolor = webinterface.ledsettings.multicolor\n    multicolor_range = webinterface.ledsettings.multicolor_range\n\n    rainbow_scale = webinterface.ledsettings.rainbow_scale\n    rainbow_offset = webinterface.ledsettings.rainbow_offset\n    rainbow_timeshift = webinterface.ledsettings.rainbow_timeshift\n\n    speed_slowest_red = webinterface.ledsettings.speed_slowest[\"red\"]\n    speed_slowest_green = webinterface.ledsettings.speed_slowest[\"green\"]\n    speed_slowest_blue = webinterface.ledsettings.speed_slowest[\"blue\"]\n    speed_slowest_color = wc.rgb_to_hex((int(speed_slowest_red), int(speed_slowest_green), int(speed_slowest_blue)))\n    response[\"speed_slowest_color\"] = speed_slowest_color\n\n    speed_fastest_red = webinterface.ledsettings.speed_fastest[\"red\"]\n    speed_fastest_green = webinterface.ledsettings.speed_fastest[\"green\"]\n    speed_fastest_blue = webinterface.ledsettings.speed_fastest[\"blue\"]\n    speed_fastest_color = wc.rgb_to_hex((int(speed_fastest_red), int(speed_fastest_green), int(speed_fastest_blue)))\n    response[\"speed_fastest_color\"] = speed_fastest_color\n\n    gradient_start_red = webinterface.ledsettings.gradient_start[\"red\"]\n    gradient_start_green = webinterface.ledsettings.gradient_start[\"green\"]\n    gradient_start_blue = webinterface.ledsettings.gradient_start[\"blue\"]\n    gradient_start_color = wc.rgb_to_hex((int(gradient_start_red), int(gradient_start_green), int(gradient_start_blue)))\n    response[\"gradient_start_color\"] = gradient_start_color\n\n    gradient_end_red = webinterface.ledsettings.gradient_end[\"red\"]\n    gradient_end_green = webinterface.ledsettings.gradient_end[\"green\"]\n    gradient_end_blue = webinterface.ledsettings.gradient_end[\"blue\"]\n    gradient_end_color = wc.rgb_to_hex((int(gradient_end_red), int(gradient_end_green), int(gradient_end_blue)))\n    response[\"gradient_end_color\"] = gradient_end_color\n\n    key_in_scale_red = webinterface.ledsettings.key_in_scale[\"red\"]\n    key_in_scale_green = webinterface.ledsettings.key_in_scale[\"green\"]\n    key_in_scale_blue = webinterface.ledsettings.key_in_scale[\"blue\"]\n    key_in_scale_color = wc.rgb_to_hex((int(key_in_scale_red), int(key_in_scale_green), int(key_in_scale_blue)))\n    response[\"key_in_scale_color\"] = key_in_scale_color\n\n    key_not_in_scale_red = webinterface.ledsettings.key_not_in_scale[\"red\"]\n    key_not_in_scale_green = webinterface.ledsettings.key_not_in_scale[\"green\"]\n    key_not_in_scale_blue = webinterface.ledsettings.key_not_in_scale[\"blue\"]\n    key_not_in_scale_color = wc.rgb_to_hex(\n        (int(key_not_in_scale_red), int(key_not_in_scale_green), int(key_not_in_scale_blue)))\n    response[\"key_not_in_scale_color\"] = key_not_in_scale_color\n\n    response[\"scale_key\"] = webinterface.ledsettings.scale_key\n\n    response[\"led_color\"] = led_color\n    response[\"color_mode\"] = color_mode\n    response[\"light_mode\"] = light_mode\n    response[\"fading_speed\"] = fading_speed\n    response[\"multicolor\"] = multicolor\n    response[\"multicolor_range\"] = multicolor_range\n    response[\"rainbow_scale\"] = rainbow_scale\n    response[\"rainbow_offset\"] = rainbow_offset\n    response[\"rainbow_timeshift\"] = rainbow_timeshift\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_settings', methods=['GET'])\ndef get_settings():\n    response = {}\n\n    red = webinterface.usersettings.get_setting_value(\"red\")\n    green = webinterface.usersettings.get_setting_value(\"green\")\n    blue = webinterface.usersettings.get_setting_value(\"blue\")\n    led_color = wc.rgb_to_hex((int(red), int(green), int(blue)))\n\n    backlight_red = webinterface.usersettings.get_setting_value(\"backlight_red\")\n    backlight_green = webinterface.usersettings.get_setting_value(\"backlight_green\")\n    backlight_blue = webinterface.usersettings.get_setting_value(\"backlight_blue\")\n    backlight_color = wc.rgb_to_hex((int(backlight_red), int(backlight_green), int(backlight_blue)))\n\n    sides_red = webinterface.usersettings.get_setting_value(\"adjacent_red\")\n    sides_green = webinterface.usersettings.get_setting_value(\"adjacent_green\")\n    sides_blue = webinterface.usersettings.get_setting_value(\"adjacent_blue\")\n    sides_color = wc.rgb_to_hex((int(sides_red), int(sides_green), int(sides_blue)))\n\n    light_mode = webinterface.usersettings.get_setting_value(\"mode\")\n    fading_speed = webinterface.usersettings.get_setting_value(\"fadingspeed\")\n\n    brightness = webinterface.usersettings.get_setting_value(\"brightness_percent\")\n    backlight_brightness = webinterface.usersettings.get_setting_value(\"backlight_brightness_percent\")\n\n    response[\"led_color\"] = led_color\n    response[\"light_mode\"] = light_mode\n    response[\"fading_speed\"] = fading_speed\n\n    response[\"brightness\"] = brightness\n    response[\"backlight_brightness\"] = backlight_brightness\n    response[\"backlight_color\"] = backlight_color\n\n    response[\"sides_color_mode\"] = webinterface.usersettings.get_setting_value(\"adjacent_mode\")\n    response[\"sides_color\"] = sides_color\n\n    response[\"input_port\"] = webinterface.usersettings.get_setting_value(\"input_port\")\n    response[\"play_port\"] = webinterface.usersettings.get_setting_value(\"play_port\")\n\n    response[\"skipped_notes\"] = webinterface.usersettings.get_setting_value(\"skipped_notes\")\n    response[\"note_offsets\"] = webinterface.usersettings.get_setting_value(\"note_offsets\")\n    response[\"led_count\"] = webinterface.usersettings.get_setting_value(\"led_count\")\n    response[\"led_shift\"] = webinterface.usersettings.get_setting_value(\"shift\")\n    response[\"led_reverse\"] = webinterface.usersettings.get_setting_value(\"reverse\")\n\n    response[\"color_mode\"] = webinterface.usersettings.get_setting_value(\"color_mode\")\n\n    response[\"multicolor\"] = webinterface.usersettings.get_setting_value(\"multicolor\")\n    response[\"multicolor_range\"] = webinterface.usersettings.get_setting_value(\"multicolor_range\")\n\n    response[\"rainbow_offset\"] = webinterface.usersettings.get_setting_value(\"rainbow_offset\")\n    response[\"rainbow_scale\"] = webinterface.usersettings.get_setting_value(\"rainbow_scale\")\n    response[\"rainbow_timeshift\"] = webinterface.usersettings.get_setting_value(\"rainbow_timeshift\")\n\n    speed_slowest_red = webinterface.usersettings.get_setting_value(\"speed_slowest_red\")\n    speed_slowest_green = webinterface.usersettings.get_setting_value(\"speed_slowest_green\")\n    speed_slowest_blue = webinterface.usersettings.get_setting_value(\"speed_slowest_blue\")\n    speed_slowest_color = wc.rgb_to_hex((int(speed_slowest_red), int(speed_slowest_green), int(speed_slowest_blue)))\n    response[\"speed_slowest_color\"] = speed_slowest_color\n\n    speed_fastest_red = webinterface.usersettings.get_setting_value(\"speed_fastest_red\")\n    speed_fastest_green = webinterface.usersettings.get_setting_value(\"speed_fastest_green\")\n    speed_fastest_blue = webinterface.usersettings.get_setting_value(\"speed_fastest_blue\")\n    speed_fastest_color = wc.rgb_to_hex((int(speed_fastest_red), int(speed_fastest_green), int(speed_fastest_blue)))\n    response[\"speed_fastest_color\"] = speed_fastest_color\n\n    gradient_start_red = webinterface.usersettings.get_setting_value(\"gradient_start_red\")\n    gradient_start_green = webinterface.usersettings.get_setting_value(\"gradient_start_green\")\n    gradient_start_blue = webinterface.usersettings.get_setting_value(\"gradient_start_blue\")\n    gradient_start_color = wc.rgb_to_hex((int(gradient_start_red), int(gradient_start_green), int(gradient_start_blue)))\n    response[\"gradient_start_color\"] = gradient_start_color\n\n    gradient_end_red = webinterface.usersettings.get_setting_value(\"gradient_end_red\")\n    gradient_end_green = webinterface.usersettings.get_setting_value(\"gradient_end_green\")\n    gradient_end_blue = webinterface.usersettings.get_setting_value(\"gradient_end_blue\")\n    gradient_end_color = wc.rgb_to_hex((int(gradient_end_red), int(gradient_end_green), int(gradient_end_blue)))\n    response[\"gradient_end_color\"] = gradient_end_color\n\n    key_in_scale_red = webinterface.usersettings.get_setting_value(\"key_in_scale_red\")\n    key_in_scale_green = webinterface.usersettings.get_setting_value(\"key_in_scale_green\")\n    key_in_scale_blue = webinterface.usersettings.get_setting_value(\"key_in_scale_blue\")\n    key_in_scale_color = wc.rgb_to_hex((int(key_in_scale_red), int(key_in_scale_green), int(key_in_scale_blue)))\n    response[\"key_in_scale_color\"] = key_in_scale_color\n\n    key_not_in_scale_red = webinterface.usersettings.get_setting_value(\"key_not_in_scale_red\")\n    key_not_in_scale_green = webinterface.usersettings.get_setting_value(\"key_not_in_scale_green\")\n    key_not_in_scale_blue = webinterface.usersettings.get_setting_value(\"key_not_in_scale_blue\")\n    key_not_in_scale_color = wc.rgb_to_hex(\n        (int(key_not_in_scale_red), int(key_not_in_scale_green), int(key_not_in_scale_blue)))\n    response[\"key_not_in_scale_color\"] = key_not_in_scale_color\n\n    response[\"scale_key\"] = webinterface.usersettings.get_setting_value(\"scale_key\")\n\n    response[\"speed_max_notes\"] = webinterface.usersettings.get_setting_value(\"speed_max_notes\")\n    response[\"speed_period_in_seconds\"] = webinterface.usersettings.get_setting_value(\"speed_period_in_seconds\")\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_recording_status', methods=['GET'])\ndef get_recording_status():\n    response = {}\n    response[\"input_port\"] = webinterface.usersettings.get_setting_value(\"input_port\")\n    response[\"play_port\"] = webinterface.usersettings.get_setting_value(\"play_port\")\n\n    response[\"isrecording\"] = webinterface.saving.isrecording\n\n    response[\"isplaying\"] = webinterface.saving.is_playing_midi\n\n    return jsonify(response)\n\n@webinterface.route('/api/get_learning_status', methods=['GET'])\ndef get_learning_status():\n    response = {}\n    response[\"loading\"] = webinterface.learning.loading\n    response[\"practice\"] = webinterface.usersettings.get_setting_value(\"practice\")\n    response[\"hands\"] = webinterface.usersettings.get_setting_value(\"hands\")\n    response[\"mute_hand\"] = webinterface.usersettings.get_setting_value(\"mute_hand\")\n    response[\"start_point\"] = webinterface.usersettings.get_setting_value(\"start_point\")\n    response[\"end_point\"] = webinterface.usersettings.get_setting_value(\"end_point\")\n    response[\"set_tempo\"] = webinterface.usersettings.get_setting_value(\"set_tempo\")\n    response[\"hand_colorR\"] = webinterface.usersettings.get_setting_value(\"hand_colorR\")\n    response[\"hand_colorL\"] = webinterface.usersettings.get_setting_value(\"hand_colorL\")\n    response[\"hand_colorList\"] = ast.literal_eval(webinterface.usersettings.get_setting_value(\"hand_colorList\"))\n    response[\"is_loop_active\"] = ast.literal_eval(webinterface.usersettings.get_setting_value(\"is_loop_active\"))\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_songs', methods=['GET'])\ndef get_songs():\n    page = request.args.get('page')\n    page = int(page) - 1\n    length = request.args.get('length')\n    sortby = request.args.get('sortby')\n    search = request.args.get('search')\n\n    start = int(page) * int(length)\n\n    songs_list_dict = {}\n\n    path = 'Songs/'\n    songs_list = os.listdir(path)\n    songs_list = [os.path.join(path, i) for i in songs_list]\n\n    songs_list = sorted(songs_list, key=os.path.getmtime)\n\n    if sortby == \"dateAsc\":\n        songs_list.reverse()\n\n    if sortby == \"nameAsc\":\n        songs_list.sort()\n\n    if sortby == \"nameDesc\":\n        songs_list.sort(reverse=True)\n\n    i = 0\n    total_songs = 0\n\n    for song in songs_list:\n        if \"_#\" in song or not song.endswith('.mid'):\n            continue\n        if search:\n            if search.lower() not in song.lower():\n                continue\n        total_songs += 1\n\n    max_page = int(math.ceil(total_songs / int(length)))\n\n    for song in songs_list:\n        song = song.replace(\"Songs/\", \"\")\n        date = os.path.getmtime(\"Songs/\" + song)\n        if \"_#\" in song or not song.endswith('.mid'):\n            continue\n\n        if search:\n            if search.lower() not in song.lower():\n                continue\n\n        i += 1\n        if (i > int(start)):\n            songs_list_dict[song] = date\n\n        if len(songs_list_dict) >= int(length):\n            break\n\n    return render_template('songs_list.html', len=len(songs_list_dict), songs_list_dict=songs_list_dict, page=page,\n                           max_page=max_page, total_songs=total_songs)\n\n\n@webinterface.route('/api/get_ports', methods=['GET'])\ndef get_ports():\n    ports = mido.get_input_names()\n    ports = list(dict.fromkeys(ports))\n    response = {}\n    response[\"ports_list\"] = ports\n    response[\"input_port\"] = webinterface.usersettings.get_setting_value(\"input_port\")\n    response[\"secondary_input_port\"] = webinterface.usersettings.get_setting_value(\"secondary_input_port\")\n    response[\"play_port\"] = webinterface.usersettings.get_setting_value(\"play_port\")\n    response[\"connected_ports\"] = str(subprocess.check_output([\"aconnect\", \"-i\", \"-l\"]))\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/switch_ports', methods=['GET'])\ndef switch_ports():\n    active_input = webinterface.usersettings.get_setting_value(\"input_port\")\n    secondary_input = webinterface.usersettings.get_setting_value(\"secondary_input_port\")\n    webinterface.midiports.change_port(\"inport\", secondary_input)\n    webinterface.usersettings.change_setting_value(\"secondary_input_port\", active_input)\n    webinterface.usersettings.change_setting_value(\"input_port\", secondary_input)\n\n    fastColorWipe(webinterface.ledstrip.strip, True, webinterface.ledsettings)\n\n    return jsonify(success=True)\n\n\n@webinterface.route('/api/get_sequences', methods=['GET'])\ndef get_sequences():\n    response = {}\n    sequences_list = []\n    sequences_tree = minidom.parse(\"sequences.xml\")\n    i = 0\n    while True:\n        try:\n            i += 1\n            sequences_list.append(\n                sequences_tree.getElementsByTagName(\"sequence_\" + str(i))[0].getElementsByTagName(\n                    \"sequence_name\")[\n                    0].firstChild.nodeValue)\n        except:\n            break\n    response[\"sequences_list\"] = sequences_list\n    response[\"sequence_number\"] = webinterface.ledsettings.sequence_number\n\n    return jsonify(response)\n\n\n@webinterface.route('/api/get_steps_list', methods=['GET'])\ndef get_steps_list():\n    response = {}\n    sequence = request.args.get('sequence')\n    sequences_tree = minidom.parse(\"sequences.xml\")\n    steps_list = []\n    i = 0\n\n    for step in sequences_tree.getElementsByTagName(\"sequence_\" + str(sequence))[0].childNodes:\n        if (step.nodeType == 1):\n            if (step.nodeName == \"settings\"):\n                response[\"control_number\"] = step.getElementsByTagName(\"control_number\")[0].firstChild.nodeValue\n                response[\"next_step\"] = step.getElementsByTagName(\"next_step\")[0].firstChild.nodeValue\n            else:\n                steps_list.append(step.nodeName)\n\n    response[\"steps_list\"] = steps_list\n    return jsonify(response)\n\n\n@webinterface.route('/api/set_step_properties', methods=['GET'])\ndef set_step_properties():\n    sequence = request.args.get('sequence')\n    step = request.args.get('step')\n    webinterface.ledsettings.set_sequence(sequence, step, True)\n\n    return jsonify(success=True)\n\n\ndef pretty_print(dom):\n    return '\\n'.join([line for line in dom.toprettyxml(indent=' ' * 4).split('\\n') if line.strip()])\n\n\ndef pretty_save(file_path, sequences_tree):\n    with open(file_path, \"w\", encoding=\"utf8\") as outfile:\n        outfile.write(pretty_print(sequences_tree))\n"], "filenames": ["webinterface/views_api.py"], "buggy_code_start_loc": [2], "buggy_code_end_loc": [986], "fixing_code_start_loc": [3], "fixing_code_end_loc": [987], "type": "CWE-610", "message": "Piano LED Visualizer is software that allows LED lights to light up as a person plays a piano connected to a computer. Version 1.3 and prior are vulnerable to a path traversal attack. The `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path. Since the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks. A patch with a fix is available on the `master` branch of the GitHub repository. This can also be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `flask.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls.", "other": {"cve": {"id": "CVE-2022-24900", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-29T14:15:11.377", "lastModified": "2022-05-10T17:42:27.303", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Piano LED Visualizer is software that allows LED lights to light up as a person plays a piano connected to a computer. Version 1.3 and prior are vulnerable to a path traversal attack. The `os.path.join` call is unsafe for use with untrusted input. When the `os.path.join` call encounters an absolute path, it ignores all the parameters it has encountered till that point and starts working with the new absolute path. Since the \"malicious\" parameter represents an absolute path, the result of `os.path.join` ignores the static directory completely. Hence, untrusted input is passed via the `os.path.join` call to `flask.send_file` can lead to path traversal attacks. A patch with a fix is available on the `master` branch of the GitHub repository. This can also be fixed by preventing flow of untrusted data to the vulnerable `send_file` function. In case the application logic necessiates this behaviour, one can either use the `flask.safe_join` to join untrusted paths or replace `flask.send_file` calls with `flask.send_from_directory` calls."}, {"lang": "es", "value": "Piano LED Visualizer es un software que permite que las luces LED sean iluminadas mientras una persona toca un piano conectado a un ordenador. La versi\u00f3n 1.3 y anteriores son vulnerables a un ataque de salto de ruta. La llamada \"os.path.join\" no es segura para su uso con entradas no confiables. Cuando la llamada \"os.path.join\" encuentra una ruta absoluta, ignora todos los par\u00e1metros que ha encontrado hasta ese momento y comienza a trabajar con la nueva ruta absoluta. Dado que el par\u00e1metro \"malicioso\" representa una ruta absoluta, el resultado de \"os.path.join\" ignora completamente el directorio est\u00e1tico. Por lo tanto, la entrada no confiable que se pasa por medio de la llamada de \"os.path.join\" a \"flask.send_file\" puede conllevar a ataques de salto de ruta. Un parche con una correcci\u00f3n est\u00e1 disponible en la rama \"master\" del repositorio GitHub. Esto tambi\u00e9n puede corregirse al impedir el flujo de datos no confiables a la funci\u00f3n vulnerable \"send_file\". En caso de que la l\u00f3gica de la aplicaci\u00f3n necesite este comportamiento, puede usarse \"flask.safe_join\" para unir rutas no confiables o sustituir las llamadas a \"flask.send_file\" por llamadas a \"flask.send_from_directory\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-610"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-73"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piano_led_visualizer_project:piano_led_visualizer:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.3", "matchCriteriaId": "C572FFB7-1561-4251-B7B2-54A9A43DFE27"}]}]}], "references": [{"url": "https://github.com/onlaj/Piano-LED-Visualizer/blob/6a732caa812c83a807c711f3d091af99209cae7b/webinterface/views_api.py#L970", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/onlaj/Piano-LED-Visualizer/commit/3f10602323cd8184e1c69a76b815655597bf0ee5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/onlaj/Piano-LED-Visualizer/issues/350", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/onlaj/Piano-LED-Visualizer/pull/351", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/onlaj/Piano-LED-Visualizer/security/advisories/GHSA-g78x-q3x8-r6m4", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/onlaj/Piano-LED-Visualizer/commit/3f10602323cd8184e1c69a76b815655597bf0ee5"}}