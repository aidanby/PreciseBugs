{"buggy_code": ["<?php\n/**\n * Tool file for the field type `File`.\n *\n * @package App\n *\n * @copyright YetiForce S.A.\n * @license   YetiForce Public License 5.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App\\Fields;\n\nuse App\\Log;\n\n/**\n * Tool class for the field type `File`.\n */\nclass File\n{\n\t/**\n\t * Temporary table name.\n\t */\n\tpublic const TABLE_NAME_TEMP = 'u_#__file_upload_temp';\n\n\t/**\n\t * Allowed formats.\n\t *\n\t * @var array\n\t */\n\tpublic static $allowedFormats = ['image' => ['jpeg', 'png', 'jpg', 'pjpeg', 'x-png', 'gif', 'bmp', 'x-ms-bmp', 'webp']];\n\n\t/**\n\t * Mime types.\n\t *\n\t * @var string[]\n\t */\n\tprivate static $mimeTypes;\n\n\t/**\n\t * What file types to validate by php injection.\n\t *\n\t * @var string[]\n\t */\n\tprivate static $phpInjection = ['image'];\n\n\t/**\n\t * Directory path used for temporary files.\n\t *\n\t * @var string\n\t */\n\tprivate static $tmpPath;\n\n\t/**\n\t * File path.\n\t *\n\t * @var string\n\t */\n\tprivate $path;\n\n\t/**\n\t * File extension.\n\t *\n\t * @var string\n\t */\n\tprivate $ext;\n\n\t/**\n\t * File mime type.\n\t *\n\t * @var string\n\t */\n\tprivate $mimeType;\n\n\t/**\n\t * File short mime type.\n\t *\n\t * @var string\n\t */\n\tprivate $mimeShortType;\n\n\t/**\n\t * Size.\n\t *\n\t * @var int\n\t */\n\tprivate $size;\n\n\t/**\n\t * File content.\n\t *\n\t * @var string\n\t */\n\tprivate $content;\n\n\t/**\n\t * Error code.\n\t *\n\t * @var bool|int\n\t */\n\tprivate $error = false;\n\n\t/**\n\t * Last validate error.\n\t *\n\t * @var string\n\t */\n\tpublic $validateError = '';\n\n\t/**\n\t * Validate all files by code injection.\n\t *\n\t * @var bool\n\t */\n\tprivate $validateAllCodeInjection = false;\n\n\t/**\n\t * Load file instance from file info.\n\t *\n\t * @param array $fileInfo\n\t *\n\t * @return \\self\n\t */\n\tpublic static function loadFromInfo($fileInfo)\n\t{\n\t\t$instance = new self();\n\t\tforeach ($fileInfo as $key => $value) {\n\t\t\t$instance->{$key} = $fileInfo[$key];\n\t\t}\n\t\tif (isset($instance->name)) {\n\t\t\t$instance->name = trim(\\App\\Purifier::purify($instance->name));\n\t\t}\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from request.\n\t *\n\t * @param array $file\n\t *\n\t * @return \\self\n\t */\n\tpublic static function loadFromRequest($file)\n\t{\n\t\t$instance = new self();\n\t\t$instance->name = trim(\\App\\Purifier::purify($file['name']));\n\t\t$instance->path = $file['tmp_name'];\n\t\t$instance->size = $file['size'];\n\t\t$instance->error = $file['error'];\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from file path.\n\t *\n\t * @param string $path\n\t *\n\t * @return \\self\n\t */\n\tpublic static function loadFromPath(string $path)\n\t{\n\t\t$instance = new self();\n\t\t$instance->name = trim(\\App\\Purifier::purify(basename($path)));\n\t\t$instance->path = $path;\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from content.\n\t *\n\t * @param string   $contents\n\t * @param string   $name\n\t * @param string[] $param\n\t *\n\t * @return bool|\\self\n\t */\n\tpublic static function loadFromContent(string $contents, $name = false, array $param = [])\n\t{\n\t\tif (empty($contents)) {\n\t\t\tLog::warning(\"Empty content, unable to create file: $name | Size: \" . \\strlen($contents), __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tstatic::initMimeTypes();\n\t\t$extension = 'tmp';\n\t\tif (empty($name)) {\n\t\t\tif (!empty($param['mimeType']) && !($extension = array_search($param['mimeType'], self::$mimeTypes))) {\n\t\t\t\t[, $extension] = explode('/', $param['mimeType']);\n\t\t\t}\n\t\t\t$name = uniqid() . '.' . $extension;\n\t\t} elseif ('tmp' === $extension) {\n\t\t\tif (($fileExt = pathinfo($name, PATHINFO_EXTENSION)) && isset(self::$mimeTypes[$fileExt])) {\n\t\t\t\t$extension = $fileExt;\n\t\t\t\tif (isset($param['mimeType']) && $param['mimeType'] !== self::$mimeTypes[$fileExt]) {\n\t\t\t\t\tLog::error(\"Invalid file content type File: $name  | {$param['mimeType']} <> \" . self::$mimeTypes[$fileExt], __CLASS__);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} elseif (!empty($param['mimeType']) && !($extension = array_search($param['mimeType'], self::$mimeTypes))) {\n\t\t\t\t[, $extension] = explode('/', $param['mimeType']);\n\t\t\t}\n\t\t}\n\t\t$path = tempnam(static::getTmpPath(), 'YFF');\n\t\tif (!file_put_contents($path, $contents)) {\n\t\t\tLog::error(\"Error while saving the file: $path | Size: \" . \\strlen($contents), __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tif (mb_strlen($name) > 180) {\n\t\t\t$name = \\App\\TextParser::textTruncate($name, 180, false) . '_' . uniqid() . \".$extension\";\n\t\t}\n\t\t$instance = new self();\n\t\t$instance->name = trim(\\App\\Purifier::purify($name));\n\t\t$instance->path = $path;\n\t\t$instance->ext = $extension;\n\t\tforeach ($param as $key => $value) {\n\t\t\t$instance->{$key} = $value;\n\t\t}\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from url.\n\t *\n\t * @param string   $url\n\t * @param string[] $param\n\t *\n\t * @return self|bool\n\t */\n\tpublic static function loadFromUrl($url, $param = [])\n\t{\n\t\tif (empty($url)) {\n\t\t\tLog::warning('No url: ' . $url, __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tif (!\\App\\RequestUtil::isNetConnection()) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t\\App\\Log::beginProfile(\"GET|File::loadFromUrl|{$url}\", __NAMESPACE__);\n\t\t\t$response = (new \\GuzzleHttp\\Client(\\App\\RequestHttp::getOptions()))->request('GET', $url, ['timeout' => 5, 'connect_timeout' => 1]);\n\t\t\t\\App\\Log::endProfile(\"GET|File::loadFromUrl|{$url}\", __NAMESPACE__);\n\t\t\tif (200 !== $response->getStatusCode()) {\n\t\t\t\tLog::warning('Error when downloading content: ' . $url . ' | Status code: ' . $response->getStatusCode(), __CLASS__);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$contents = $response->getBody()->getContents();\n\t\t\t$param['mimeType'] = explode(';', $response->getHeaderLine('Content-Type'))[0];\n\t\t\t$param['size'] = \\strlen($contents);\n\t\t} catch (\\Throwable $exc) {\n\t\t\tLog::warning('Error when downloading content: ' . $url . ' | ' . $exc->getMessage(), __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tif (empty($contents)) {\n\t\t\tLog::warning('Url does not contain content: ' . $url, __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\treturn static::loadFromContent($contents, static::sanitizeFileNameFromUrl($url), $param);\n\t}\n\n\t/**\n\t * Get size.\n\t *\n\t * @return int\n\t */\n\tpublic function getSize()\n\t{\n\t\tif (empty($this->size)) {\n\t\t\t$this->size = filesize($this->path);\n\t\t}\n\t\treturn $this->size;\n\t}\n\n\t/**\n\t * Function to sanitize the upload file name when the file name is detected to have bad extensions.\n\t *\n\t * @return string\n\t */\n\tpublic function getSanitizeName()\n\t{\n\t\treturn static::sanitizeUploadFileName($this->name);\n\t}\n\n\t/**\n\t * Get file name.\n\t *\n\t * @param bool $decode\n\t *\n\t * @return string\n\t */\n\tpublic function getName(bool $decode = false)\n\t{\n\t\treturn $decode ? \\App\\Purifier::decodeHtml($this->name) : $this->name;\n\t}\n\n\t/**\n\t * Get mime type.\n\t *\n\t * @return string\n\t */\n\tpublic function getMimeType()\n\t{\n\t\tif (empty($this->mimeType)) {\n\t\t\tstatic::initMimeTypes();\n\t\t\t$extension = $this->getExtension(true);\n\t\t\tif (isset(static::$mimeTypes[$extension])) {\n\t\t\t\t$this->mimeType = static::$mimeTypes[$extension];\n\t\t\t} elseif (\\function_exists('mime_content_type')) {\n\t\t\t\t$this->mimeType = mime_content_type($this->path);\n\t\t\t} elseif (\\function_exists('finfo_open')) {\n\t\t\t\t$finfo = finfo_open(FILEINFO_MIME);\n\t\t\t\t$this->mimeType = finfo_file($finfo, $this->path);\n\t\t\t\tfinfo_close($finfo);\n\t\t\t} else {\n\t\t\t\t$this->mimeType = 'application/octet-stream';\n\t\t\t}\n\t\t}\n\t\treturn $this->mimeType;\n\t}\n\n\t/**\n\t * Get short mime type.\n\t *\n\t * @param int $type 0 or 1\n\t *\n\t * @return string\n\t */\n\tpublic function getShortMimeType($type = 1)\n\t{\n\t\tif (empty($this->mimeShortType)) {\n\t\t\t$this->mimeShortType = explode('/', $this->getMimeType());\n\t\t}\n\t\treturn $this->mimeShortType[$type];\n\t}\n\n\t/**\n\t * Get file extension.\n\t *\n\t * @param mixed $fromName\n\t *\n\t * @return string\n\t */\n\tpublic function getExtension($fromName = false)\n\t{\n\t\tif (isset($this->ext)) {\n\t\t\treturn $this->ext;\n\t\t}\n\t\tif ($fromName) {\n\t\t\t$extension = explode('.', $this->name);\n\t\t\treturn $this->ext = strtolower(array_pop($extension));\n\t\t}\n\t\treturn $this->ext = strtolower(pathinfo($this->path, PATHINFO_EXTENSION));\n\t}\n\n\t/**\n\t * Get file path.\n\t *\n\t * @return string\n\t */\n\tpublic function getPath(): string\n\t{\n\t\treturn $this->path;\n\t}\n\n\t/**\n\t * Get file encoding.\n\t *\n\t * @param array|null $list\n\t *\n\t * @return string\n\t */\n\tpublic function getEncoding(?array $list = null): string\n\t{\n\t\treturn \\strtoupper(mb_detect_encoding($this->getContents(), ($list ?? mb_list_encodings()), true));\n\t}\n\n\t/**\n\t * Get directory path.\n\t *\n\t * @return string\n\t */\n\tpublic function getDirectoryPath()\n\t{\n\t\treturn pathinfo($this->getPath(), PATHINFO_DIRNAME);\n\t}\n\n\t/**\n\t * Validate whether the file is safe.\n\t *\n\t * @param string|null $type\n\t *\n\t * @throws \\Exception\n\t *\n\t * @return bool\n\t */\n\tpublic function validate(?string $type = null): bool\n\t{\n\t\t$return = true;\n\t\ttry {\n\t\t\tif ($type && $this->getShortMimeType(0) !== $type) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_FORMAT');\n\t\t\t}\n\t\t\t$this->checkFile();\n\t\t\tif (!empty($this->validateAllowedFormat)) {\n\t\t\t\t$this->validateFormat();\n\t\t\t}\n\t\t\t$this->validateCodeInjection();\n\t\t\tif (($type && 'image' === $type) || 'image' === $this->getShortMimeType(0)) {\n\t\t\t\t$this->validateImage();\n\t\t\t}\n\t\t} catch (\\Exception $e) {\n\t\t\t$return = false;\n\t\t\t$message = $e->getMessage();\n\t\t\tif (false === strpos($message, '||')) {\n\t\t\t\t$message = \\App\\Language::translateSingleMod($message, 'Other.Exceptions');\n\t\t\t} else {\n\t\t\t\t$params = explode('||', $message);\n\t\t\t\t$message = \\call_user_func_array('vsprintf', [\\App\\Language::translateSingleMod(array_shift($params), 'Other.Exceptions'), $params]);\n\t\t\t}\n\t\t\t$this->validateError = $message;\n\t\t\tLog::error(\"Error during file validation: {$this->getName()} | Size: {$this->getSize()}\\n {$e->__toString()}\", __CLASS__);\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Validate and secure the file.\n\t *\n\t * @param string|null $type\n\t *\n\t * @return bool\n\t */\n\tpublic function validateAndSecure(?string $type = null): bool\n\t{\n\t\tif ($this->validate($type)) {\n\t\t\treturn true;\n\t\t}\n\t\t$reValidate = false;\n\t\tif (static::secureFile($this)) {\n\t\t\t$this->size = filesize($this->path);\n\t\t\t$this->content = file_get_contents($this->path);\n\t\t\t$reValidate = true;\n\t\t}\n\t\tif ($reValidate && $this->validate($type)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Validate image content.\n\t *\n\t * @throws \\App\\Exceptions\\DangerousFile\n\t *\n\t * @return bool\n\t */\n\tpublic function validateImageContent(): bool\n\t{\n\t\t$returnVal = false;\n\t\tif (\\extension_loaded('imagick')) {\n\t\t\ttry {\n\t\t\t\t$img = new \\imagick($this->path);\n\t\t\t\t$returnVal = $img->valid();\n\t\t\t\t$img->clear();\n\t\t\t\t$img->destroy();\n\t\t\t} catch (\\ImagickException $e) {\n\t\t\t\t$this->validateError = $e->getMessage();\n\t\t\t\t$returnVal = false;\n\t\t\t}\n\t\t} else {\n\t\t\t$img = \\imagecreatefromstring($this->getContents());\n\t\t\tif (false !== $img) {\n\t\t\t\t$returnVal = true;\n\t\t\t\t\\imagedestroy($img);\n\t\t\t}\n\t\t}\n\t\treturn $returnVal;\n\t}\n\n\t/**\n\t * Basic check file.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function checkFile()\n\t{\n\t\tif (false !== $this->error && UPLOAD_ERR_OK != $this->error) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ERROR_REQUEST||' . self::getErrorMessage($this->error));\n\t\t}\n\t\tif (empty($this->name)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_EMPTY_NAME');\n\t\t}\n\t\tif (!$this->validateInjection($this->name)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_NAME');\n\t\t}\n\t\tif (0 === $this->getSize()) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_SIZE');\n\t\t}\n\t}\n\n\t/**\n\t * Validate format.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function validateFormat()\n\t{\n\t\tif ($this->validateAllowedFormat !== $this->getShortMimeType(0)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_MIME_TYPE');\n\t\t}\n\t\tif (isset(self::$allowedFormats[$this->validateAllowedFormat]) && !\\in_array($this->getShortMimeType(1), self::$allowedFormats[$this->validateAllowedFormat])) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_FORMAT');\n\t\t}\n\t}\n\n\t/**\n\t * Validate image.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function validateImage()\n\t{\n\t\tif (!getimagesize($this->path)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_IMAGE');\n\t\t}\n\t\tif (preg_match('[\\x01-\\x08\\x0c-\\x1f]', $this->getContents())) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_IMAGE');\n\t\t}\n\t\t$this->validateCodeInjectionInMetadata();\n\t\tif (!$this->validateImageContent()) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_IMAGE ||' . $this->validateError);\n\t\t}\n\t}\n\n\t/**\n\t * Validate code injection.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function validateCodeInjection()\n\t{\n\t\t$shortMimeType = $this->getShortMimeType(0);\n\t\tif ($this->validateAllCodeInjection || \\in_array($shortMimeType, static::$phpInjection)) {\n\t\t\t$contents = $this->getContents();\n\t\t\tif ((1 === preg_match('/(<\\?php?(.*?))/si', $contents)\n\t\t\t|| false !== stripos($contents, '<?=')\n\t\t\t|| false !== stripos($contents, '<? ')) && $this->searchCodeInjection()\n\t\t\t) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Search code injection in content.\n\t *\n\t * @return bool\n\t */\n\tprivate function searchCodeInjection(): bool\n\t{\n\t\tif (!\\function_exists('token_get_all')) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\t$tokens = token_get_all($this->getContents(), TOKEN_PARSE);\n\t\t\tforeach ($tokens as $token) {\n\t\t\t\tswitch (\\is_array($token) ? $token[0] : $token) {\n\t\t\t\t\t\tcase T_COMMENT:\n\t\t\t\t\t\tcase T_DOC_COMMENT:\n\t\t\t\t\t\tcase T_WHITESPACE:\n\t\t\t\t\t\tcase T_CURLY_OPEN:\n\t\t\t\t\t\tcase T_OPEN_TAG:\n\t\t\t\t\t\tcase T_CLOSE_TAG:\n\t\t\t\t\t\tcase T_INLINE_HTML:\n\t\t\t\t\t\tcase T_DOLLAR_OPEN_CURLY_BRACES:\n\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\tcase T_DOUBLE_COLON:\n\t\t\t\t\t\tcase T_ABSTRACT:\n\t\t\t\t\t\tcase T_ARRAY:\n\t\t\t\t\t\tcase T_AS:\n\t\t\t\t\t\tcase T_BREAK:\n\t\t\t\t\t\tcase T_CALLABLE:\n\t\t\t\t\t\tcase T_CASE:\n\t\t\t\t\t\tcase T_CATCH:\n\t\t\t\t\t\tcase T_CLASS:\n\t\t\t\t\t\tcase T_CLONE:\n\t\t\t\t\t\tcase T_CONTINUE:\n\t\t\t\t\t\tcase T_DEFAULT:\n\t\t\t\t\t\tcase T_ECHO:\n\t\t\t\t\t\tcase T_ELSE:\n\t\t\t\t\t\tcase T_ELSEIF:\n\t\t\t\t\t\tcase T_EMPTY:\n\t\t\t\t\t\tcase T_ENDIF:\n\t\t\t\t\t\tcase T_ENDSWITCH:\n\t\t\t\t\t\tcase T_ENDWHILE:\n\t\t\t\t\t\tcase T_EXIT:\n\t\t\t\t\t\tcase T_EXTENDS:\n\t\t\t\t\t\tcase T_FINAL:\n\t\t\t\t\t\tcase T_FINALLY:\n\t\t\t\t\t\tcase T_FOREACH:\n\t\t\t\t\t\tcase T_FUNCTION:\n\t\t\t\t\t\tcase T_GLOBAL:\n\t\t\t\t\t\tcase T_IF:\n\t\t\t\t\t\tcase T_IMPLEMENTS:\n\t\t\t\t\t\tcase T_INCLUDE:\n\t\t\t\t\t\tcase T_INCLUDE_ONCE:\n\t\t\t\t\t\tcase T_INSTANCEOF:\n\t\t\t\t\t\tcase T_INSTEADOF:\n\t\t\t\t\t\tcase T_INTERFACE:\n\t\t\t\t\t\tcase T_ISSET:\n\t\t\t\t\t\tcase T_LOGICAL_AND:\n\t\t\t\t\t\tcase T_LOGICAL_OR:\n\t\t\t\t\t\tcase T_LOGICAL_XOR:\n\t\t\t\t\t\tcase T_NAMESPACE:\n\t\t\t\t\t\tcase T_NEW:\n\t\t\t\t\t\tcase T_PRIVATE:\n\t\t\t\t\t\tcase T_PROTECTED:\n\t\t\t\t\t\tcase T_PUBLIC:\n\t\t\t\t\t\tcase T_REQUIRE:\n\t\t\t\t\t\tcase T_REQUIRE_ONCE:\n\t\t\t\t\t\tcase T_RETURN:\n\t\t\t\t\t\tcase T_STATIC:\n\t\t\t\t\t\tcase T_THROW:\n\t\t\t\t\t\tcase T_TRAIT:\n\t\t\t\t\t\tcase T_TRY:\n\t\t\t\t\t\tcase T_UNSET:\n\t\t\t\t\t\tcase T_USE:\n\t\t\t\t\t\tcase T_VAR:\n\t\t\t\t\t\tcase T_WHILE:\n\t\t\t\t\t\tcase T_YIELD:\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$text = \\is_array($token) ? $token[1] : $token;\n\t\t\t\t\t\t\tif (\\function_exists($text) || \\defined($text)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t} catch (\\Throwable $e) {\n\t\t\tLog::warning($e->getMessage(), __METHOD__);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Validate code injection in metadata.\n\t *\n\t * @throws \\App\\Exceptions\\DangerousFile\n\t */\n\tprivate function validateCodeInjectionInMetadata()\n\t{\n\t\tif (\\extension_loaded('imagick')) {\n\t\t\ttry {\n\t\t\t\t$img = new \\imagick($this->path);\n\t\t\t\t$this->validateInjection($img->getImageProperties());\n\t\t\t} catch (\\Throwable $e) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION', $e->getCode(), $e);\n\t\t\t}\n\t\t} elseif (\n\t\t\t\\function_exists('exif_read_data')\n\t\t\t&& \\in_array($this->getMimeType(), ['image/jpeg', 'image/tiff'])\n\t\t\t&& \\in_array(exif_imagetype($this->path), [IMAGETYPE_JPEG, IMAGETYPE_TIFF_II, IMAGETYPE_TIFF_MM])\n\t\t) {\n\t\t\t$imageSize = getimagesize($this->path, $imageInfo);\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\t$imageSize\n\t\t\t\t\t&& (empty($imageInfo['APP1']) || 0 === strpos($imageInfo['APP1'], 'Exif'))\n\t\t\t\t\t&& ($exifData = exif_read_data($this->path)) && !$this->validateInjection($exifData)\n\t\t\t\t) {\n\t\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION');\n\t\t\t\t}\n\t\t\t} catch (\\Throwable $e) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION', $e->getCode(), $e);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate injection.\n\t *\n\t * @param string|array $data\n\t *\n\t * @return bool\n\t */\n\tprivate function validateInjection($data): bool\n\t{\n\t\t$return = true;\n\t\tif (\\is_array($data)) {\n\t\t\tforeach ($data as $value) {\n\t\t\t\tif (!$this->validateInjection($value)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (1 === preg_match('/(<\\?php?(.*?))/i', $data) || false !== stripos($data, '<?=') || false !== stripos($data, '<? ')) {\n\t\t\t\t$return = false;\n\t\t\t} else {\n\t\t\t\t\\App\\Purifier::purifyHtmlEventAttributes($data);\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Get file ontent.\n\t *\n\t * @return string\n\t */\n\tpublic function getContents()\n\t{\n\t\tif (empty($this->content)) {\n\t\t\t$this->content = file_get_contents($this->path);\n\t\t}\n\t\treturn $this->content;\n\t}\n\n\t/**\n\t * Move file.\n\t *\n\t * @param string $target\n\t *\n\t * @return bool\n\t */\n\tpublic function moveFile($target)\n\t{\n\t\tif (is_uploaded_file($this->path)) {\n\t\t\t$uploadStatus = move_uploaded_file($this->path, $target);\n\t\t} else {\n\t\t\t$uploadStatus = rename($this->path, $target);\n\t\t}\n\t\t$this->path = $target;\n\t\treturn $uploadStatus;\n\t}\n\n\t/**\n\t * Delete file.\n\t *\n\t * @return bool\n\t */\n\tpublic function delete()\n\t{\n\t\tif (file_exists($this->path)) {\n\t\t\treturn unlink($this->path);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Generate file hash.\n\t *\n\t * @param bool   $checkInAttachments\n\t * @param string $uploadFilePath\n\t *\n\t * @return string File hash sha256\n\t */\n\tpublic function generateHash(bool $checkInAttachments = false, string $uploadFilePath = '')\n\t{\n\t\tif ($checkInAttachments) {\n\t\t\t$hash = hash('sha1', $this->getContents()) . \\App\\Encryption::generatePassword(10);\n\t\t\tif ($uploadFilePath && file_exists($uploadFilePath . $hash)) {\n\t\t\t\t$hash = $this->generateHash($checkInAttachments);\n\t\t\t}\n\t\t\treturn $hash;\n\t\t}\n\t\treturn hash('sha256', $this->getContents() . \\App\\Encryption::generatePassword(10));\n\t}\n\n\t/**\n\t * Function to sanitize the upload file name when the file name is detected to have bad extensions.\n\t *\n\t * @param string      $fileName          File name to be sanitized\n\t * @param bool|string $badFileExtensions\n\t *\n\t * @return string\n\t */\n\tpublic static function sanitizeUploadFileName($fileName, $badFileExtensions = false)\n\t{\n\t\tif (!$badFileExtensions) {\n\t\t\t$badFileExtensions = \\App\\Config::main('upload_badext');\n\t\t}\n\t\t$fileName = preg_replace('/\\s+/', '_', \\App\\Utils::sanitizeSpecialChars($fileName));\n\t\t$fileName = rtrim($fileName, '\\\\/<>?*:\"<>|');\n\n\t\t$fileNameParts = explode('.', $fileName);\n\t\t$badExtensionFound = false;\n\t\tforeach ($fileNameParts as $key => &$partOfFileName) {\n\t\t\tif (\\in_array(strtolower($partOfFileName), $badFileExtensions)) {\n\t\t\t\t$badExtensionFound = true;\n\t\t\t\t$fileNameParts[$key] = $partOfFileName;\n\t\t\t}\n\t\t}\n\t\t$newFileName = implode('.', $fileNameParts);\n\t\tif ($badExtensionFound) {\n\t\t\t$newFileName .= '.txt';\n\t\t}\n\t\treturn $newFileName;\n\t}\n\n\t/**\n\t * Function to get base name of file.\n\t *\n\t * @param string $url\n\t *\n\t * @return string\n\t */\n\tpublic static function sanitizeFileNameFromUrl($url)\n\t{\n\t\t$partsUrl = parse_url($url);\n\t\treturn static::sanitizeUploadFileName(basename($partsUrl['path']));\n\t}\n\n\t/**\n\t * Get temporary directory path.\n\t *\n\t * @return string\n\t */\n\tpublic static function getTmpPath()\n\t{\n\t\tif (isset(self::$tmpPath)) {\n\t\t\treturn self::$tmpPath;\n\t\t}\n\t\t$hash = hash('crc32', ROOT_DIRECTORY);\n\t\tif (!empty(ini_get('upload_tmp_dir')) && is_writable(ini_get('upload_tmp_dir'))) {\n\t\t\tself::$tmpPath = ini_get('upload_tmp_dir') . \\DIRECTORY_SEPARATOR . 'YetiForceTemp' . $hash . \\DIRECTORY_SEPARATOR;\n\t\t\tif (!is_dir(self::$tmpPath)) {\n\t\t\t\tmkdir(self::$tmpPath, 0755);\n\t\t\t}\n\t\t} elseif (is_writable(sys_get_temp_dir())) {\n\t\t\tself::$tmpPath = sys_get_temp_dir() . \\DIRECTORY_SEPARATOR . 'YetiForceTemp' . $hash . \\DIRECTORY_SEPARATOR;\n\t\t\tif (!is_dir(self::$tmpPath)) {\n\t\t\t\tmkdir(self::$tmpPath, 0755);\n\t\t\t}\n\t\t} elseif (is_writable(ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . 'cache' . \\DIRECTORY_SEPARATOR . 'upload')) {\n\t\t\tself::$tmpPath = ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . 'cache' . \\DIRECTORY_SEPARATOR . 'upload' . \\DIRECTORY_SEPARATOR;\n\t\t}\n\t\treturn self::$tmpPath;\n\t}\n\n\t/**\n\t * Init mime types.\n\t */\n\tpublic static function initMimeTypes()\n\t{\n\t\tif (empty(self::$mimeTypes)) {\n\t\t\tself::$mimeTypes = require ROOT_DIRECTORY . '/config/mimetypes.php';\n\t\t}\n\t}\n\n\t/**\n\t * Get mime content type ex. image/png.\n\t *\n\t * @param string $fileName\n\t *\n\t * @return string\n\t */\n\tpublic static function getMimeContentType($fileName)\n\t{\n\t\tstatic::initMimeTypes();\n\t\t$extension = explode('.', $fileName);\n\t\t$extension = strtolower(array_pop($extension));\n\t\tif (isset(self::$mimeTypes[$extension])) {\n\t\t\t$mimeType = self::$mimeTypes[$extension];\n\t\t} elseif (\\function_exists('mime_content_type')) {\n\t\t\t$mimeType = mime_content_type($fileName);\n\t\t} elseif (\\function_exists('finfo_open')) {\n\t\t\t$finfo = finfo_open(FILEINFO_MIME);\n\t\t\t$mimeType = finfo_file($finfo, $fileName);\n\t\t\tfinfo_close($finfo);\n\t\t} else {\n\t\t\t$mimeType = 'application/octet-stream';\n\t\t}\n\t\treturn $mimeType;\n\t}\n\n\t/**\n\t * Create document from string.\n\t *\n\t * @param string $contents\n\t * @param array  $param\n\t *\n\t * @return bool|self\n\t */\n\tpublic static function saveFromString(string $contents, array $param = [])\n\t{\n\t\t$result = explode(',', $contents, 2);\n\t\t$contentType = $isBase64 = false;\n\t\tif (2 === \\count($result)) {\n\t\t\t[$metadata, $data] = $result;\n\t\t\tforeach (explode(';', $metadata) as $cur) {\n\t\t\t\tif ('base64' === $cur) {\n\t\t\t\t\t$isBase64 = true;\n\t\t\t\t} elseif ('data:' === substr($cur, 0, 5)) {\n\t\t\t\t\t$contentType = str_replace('data:', '', $cur);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$data = $result[0];\n\t\t}\n\t\t$data = rawurldecode($data);\n\t\t$rawData = $isBase64 ? base64_decode($data) : $data;\n\t\tif (\\strlen($rawData) < 12) {\n\t\t\tLog::error('Incorrect content value: ' . $contents, __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\t$fileInstance = static::loadFromContent($rawData, false, array_merge($param, ['mimeType' => $contentType]));\n\t\tif ($fileInstance->validateAndSecure()) {\n\t\t\treturn $fileInstance;\n\t\t}\n\t\t$fileInstance->delete();\n\t\treturn false;\n\t}\n\n\t/**\n\t * Create document from url.\n\t *\n\t * @param string $url    Url\n\t * @param array  $params\n\t *\n\t * @return array|bool\n\t */\n\tpublic static function saveFromUrl($url, $params = [])\n\t{\n\t\t$fileInstance = static::loadFromUrl($url, $params['param'] ?? []);\n\t\tif (!$fileInstance) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($fileInstance->validateAndSecure() && ($id = static::saveFromContent($fileInstance, $params))) {\n\t\t\treturn $id;\n\t\t}\n\t\t$fileInstance->delete();\n\t\treturn false;\n\t}\n\n\t/**\n\t * Create document from content.\n\t *\n\t * @param \\self $file\n\t * @param array $params\n\t *\n\t * @throws \\Exception\n\t *\n\t * @return array|bool\n\t */\n\tpublic static function saveFromContent(self $file, $params = [])\n\t{\n\t\t$fileName = $file->getName();\n\t\t$fileNameLength = \\App\\TextParser::getTextLength($fileName);\n\t\t$record = \\Vtiger_Record_Model::getCleanInstance('Documents');\n\t\tif ($fileNameLength > ($maxLength = $record->getField('filename')->get('maximumlength'))) {\n\t\t\t$extLength = 0;\n\t\t\tif ($ext = $file->getExtension()) {\n\t\t\t\t$ext .= \".{$ext}\";\n\t\t\t\t$extLength = \\App\\TextParser::getTextLength($ext);\n\t\t\t\t$fileName = substr($fileName, 0, $fileNameLength - $extLength);\n\t\t\t}\n\t\t\t$fileName = \\App\\TextParser::textTruncate($fileName, $maxLength - $extLength, false) . $ext;\n\t\t}\n\t\t$fileName = \\App\\Purifier::decodeHtml(\\App\\Purifier::purify($fileName));\n\t\t$record->setData($params);\n\t\t$record->set('notes_title', $fileName);\n\t\t$record->set('filename', $fileName);\n\t\t$record->set('filestatus', 1);\n\t\t$record->set('filelocationtype', 'I');\n\t\t$record->file = [\n\t\t\t'name' => $fileName,\n\t\t\t'size' => $file->getSize(),\n\t\t\t'type' => $file->getMimeType(),\n\t\t\t'tmp_name' => $file->getPath(),\n\t\t\t'error' => 0,\n\t\t];\n\t\t$record->save();\n\t\t$file->delete();\n\t\tif (isset($record->ext['attachmentsId'])) {\n\t\t\treturn array_merge(['crmid' => $record->getId()], $record->ext);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Init storage file directory.\n\t *\n\t * @param string $suffix\n\t *\n\t * @return string\n\t */\n\tpublic static function initStorageFileDirectory($suffix = false)\n\t{\n\t\tif (!$filepath = \\App\\Config::module($suffix, 'storagePath')) {\n\t\t\t$filepath = 'storage' . \\DIRECTORY_SEPARATOR;\n\t\t}\n\t\tif ($suffix) {\n\t\t\t$filepath .= $suffix . \\DIRECTORY_SEPARATOR;\n\t\t}\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\t$year = date('Y');\n\t\t$month = date('F');\n\t\t$day = date('j');\n\t\t$filepath .= $year;\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\t$filepath .= \\DIRECTORY_SEPARATOR . $month;\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\tif ($day > 0 && $day <= 7) {\n\t\t\t$week = 'week1';\n\t\t} elseif ($day > 7 && $day <= 14) {\n\t\t\t$week = 'week2';\n\t\t} elseif ($day > 14 && $day <= 21) {\n\t\t\t$week = 'week3';\n\t\t} elseif ($day > 21 && $day <= 28) {\n\t\t\t$week = 'week4';\n\t\t} else {\n\t\t\t$week = 'week5';\n\t\t}\n\t\t$filepath .= \\DIRECTORY_SEPARATOR . $week;\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\treturn str_replace('\\\\', '/', $filepath . \\DIRECTORY_SEPARATOR);\n\t}\n\n\t/**\n\t * Get error message by code.\n\t *\n\t * @param int $code\n\t *\n\t * @return string\n\t */\n\tpublic static function getErrorMessage(int $code): string\n\t{\n\t\tswitch ($code) {\n\t\t\tcase UPLOAD_ERR_INI_SIZE:\n\t\t\t\t$message = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_FORM_SIZE:\n\t\t\t\t$message = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_PARTIAL:\n\t\t\t\t$message = 'The uploaded file was only partially uploaded';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_NO_FILE:\n\t\t\t\t$message = 'No file was uploaded';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_NO_TMP_DIR:\n\t\t\t\t$message = 'Missing a temporary folder';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_CANT_WRITE:\n\t\t\t\t$message = 'Failed to write file to disk';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_EXTENSION:\n\t\t\t\t$message = 'File upload stopped by extension';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$message = 'Unknown upload error | Code: ' . $code;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Get image base data.\n\t *\n\t * @param string $path\n\t *\n\t * @return string\n\t */\n\tpublic static function getImageBaseData($path)\n\t{\n\t\tif ($path) {\n\t\t\t$mime = static::getMimeContentType($path);\n\t\t\t$mimeParts = explode('/', $mime);\n\t\t\tif ($mime && file_exists($path) && isset(static::$allowedFormats[$mimeParts[0]]) && \\in_array($mimeParts[1], static::$allowedFormats[$mimeParts[0]])) {\n\t\t\t\treturn \"data:$mime;base64,\" . base64_encode(file_get_contents($path));\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Check if give path is writeable.\n\t *\n\t * @param string $path\n\t * @param bool   $absolutePaths\n\t *\n\t * @return bool\n\t */\n\tpublic static function isWriteable(string $path, bool $absolutePaths = false): bool\n\t{\n\t\tif (!$absolutePaths) {\n\t\t\t$path = ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . $path;\n\t\t}\n\t\tif (is_dir($path)) {\n\t\t\treturn static::isDirWriteable($path);\n\t\t}\n\t\treturn is_writable($path);\n\t}\n\n\t/**\n\t * Check if given directory is writeable.\n\t * NOTE: The check is made by trying to create a random file in the directory.\n\t *\n\t * @param string $dirPath\n\t *\n\t * @return bool\n\t */\n\tpublic static function isDirWriteable($dirPath)\n\t{\n\t\tif (is_dir($dirPath)) {\n\t\t\tdo {\n\t\t\t\t$tmpFile = 'tmpfile' . time() . '-' . random_int(1, 1000) . '.tmp';\n\t\t\t\t// Continue the loop unless we find a name that does not exists already.\n\t\t\t\t$useFilename = \"$dirPath/$tmpFile\";\n\t\t\t\tif (!file_exists($useFilename)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (true);\n\t\t\t$fh = fopen($useFilename, 'a');\n\t\t\tif ($fh) {\n\t\t\t\tfclose($fh);\n\t\t\t\tunlink($useFilename);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if give URL exists.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic static function isExistsUrl($url)\n\t{\n\t\t\\App\\Log::beginProfile(\"GET|File::isExistsUrl|{$url}\", __NAMESPACE__);\n\t\ttry {\n\t\t\t$response = (new \\GuzzleHttp\\Client(\\App\\RequestHttp::getOptions()))->request('HEAD', $url, ['timeout' => 1, 'connect_timeout' => 1, 'verify' => false, 'http_errors' => false, 'allow_redirects' => false]);\n\t\t\t$status = \\in_array($response->getStatusCode(), [200, 302]);\n\t\t} catch (\\Throwable $th) {\n\t\t\t$status = false;\n\t\t}\n\t\t\\App\\Log::endProfile(\"GET|File::isExistsUrl|{$url}\", __NAMESPACE__);\n\t\t\\App\\Log::info(\"Checked URL: $url | Status: \" . $status, __CLASS__);\n\t\treturn $status;\n\t}\n\n\t/**\n\t * Get crm pathname or relative path.\n\t *\n\t * @param string $path       Absolute pathname\n\t * @param string $pathToTrim Path to trim\n\t *\n\t * @return string Local pathname\n\t */\n\tpublic static function getLocalPath(string $path, string $pathToTrim = ROOT_DIRECTORY): string\n\t{\n\t\tif (0 === strpos($path, $pathToTrim)) {\n\t\t\t$index = \\strlen($pathToTrim) + 1;\n\t\t\tif (strrpos($pathToTrim, '/') === \\strlen($pathToTrim) - 1) {\n\t\t\t\t--$index;\n\t\t\t}\n\t\t\t$path = substr($path, $index);\n\t\t}\n\t\treturn $path;\n\t}\n\n\t/**\n\t * Transform mulitiple uploaded file information into useful format.\n\t *\n\t * @param array $files $_FILES\n\t * @param bool  $top\n\t *\n\t * @return array\n\t */\n\tpublic static function transform(array $files, $top = true)\n\t{\n\t\t$rows = [];\n\t\tforeach ($files as $name => $file) {\n\t\t\t$subName = $top ? $file['name'] : $name;\n\t\t\tif (\\is_array($subName)) {\n\t\t\t\tforeach (array_keys($subName) as $key) {\n\t\t\t\t\t$rows[$name][$key] = [\n\t\t\t\t\t\t'name' => $file['name'][$key],\n\t\t\t\t\t\t'type' => $file['type'][$key],\n\t\t\t\t\t\t'tmp_name' => $file['tmp_name'][$key],\n\t\t\t\t\t\t'error' => $file['error'][$key],\n\t\t\t\t\t\t'size' => $file['size'][$key],\n\t\t\t\t\t];\n\t\t\t\t\t$rows[$name] = static::transform($rows[$name], false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$rows[$name] = $file;\n\t\t\t}\n\t\t}\n\t\treturn $rows;\n\t}\n\n\t/**\n\t * Delete data from the temporary table.\n\t *\n\t * @param string|string[] $keys\n\t *\n\t * @return int\n\t */\n\tpublic static function cleanTemp($keys)\n\t{\n\t\treturn \\App\\Db::getInstance()->createCommand()->delete(static::TABLE_NAME_TEMP, ['key' => $keys])->execute();\n\t}\n\n\t/**\n\t * Add an entry to the temporary table of files.\n\t *\n\t * @param array $params\n\t *\n\t * @return int\n\t */\n\tpublic function insertTempFile(array $params): int\n\t{\n\t\t$db = \\App\\Db::getInstance();\n\t\t$result = 0;\n\t\t$data = [\n\t\t\t'name' => $this->getName(true),\n\t\t\t'type' => $this->getMimeType(),\n\t\t\t'path' => null,\n\t\t\t'createdtime' => date('Y-m-d H:i:s'),\n\t\t\t'fieldname' => null,\n\t\t\t'key' => null,\n\t\t\t'crmid' => 0\n\t\t];\n\t\tforeach ($data as $key => &$value) {\n\t\t\tif (isset($params[$key])) {\n\t\t\t\t$value = $params[$key];\n\t\t\t}\n\t\t}\n\t\tif ($db->createCommand()->insert(static::TABLE_NAME_TEMP, $data)->execute()) {\n\t\t\t$result = $db->getLastInsertID(static::TABLE_NAME_TEMP . '_id_seq');\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Secure image file.\n\t *\n\t * @param \\App\\Fields\\File $file\n\t *\n\t * @return bool\n\t */\n\tpublic static function secureFile(self $file): bool\n\t{\n\t\tif ('image' !== $file->getShortMimeType(0)) {\n\t\t\treturn false;\n\t\t}\n\t\t$result = false;\n\t\tif (\\extension_loaded('imagick')) {\n\t\t\ttry {\n\t\t\t\t$img = new \\imagick($file->getPath());\n\t\t\t\t$img->stripImage();\n\t\t\t\tswitch ($file->getExtension()) {\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\t\t$img->setImageCompression(\\Imagick::COMPRESSION_JPEG);\n\t\t\t\t\t\t$img->setImageCompressionQuality(99);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$img->writeImage($file->getPath());\n\t\t\t\t$img->clear();\n\t\t\t\t$img->destroy();\n\t\t\t\t$result = true;\n\t\t\t} catch (\\ImagickException $e) {\n\t\t\t\t$result = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (\\in_array($file->getExtension(), ['jpeg', 'png', 'gif', 'bmp', 'wbmp', 'gd2', 'webp'])) {\n\t\t\t\t$img = \\imagecreatefromstring($file->getContents());\n\t\t\t\tif (false !== $img) {\n\t\t\t\t\tswitch ($file->getExtension()) {\n\t\t\t\t\t\tcase 'jpg':\n\t\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\t\t\t$result = \\imagejpeg($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'png':\n\t\t\t\t\t\t\t$result = \\imagepng($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'gif':\n\t\t\t\t\t\t\t$result = \\imagegif($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bmp':\n\t\t\t\t\t\t\t$result = \\imagebmp($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\\imagedestroy($img);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Parse.\n\t *\n\t * @param array $value\n\t *\n\t * @return array\n\t */\n\tpublic static function parse(array $value)\n\t{\n\t\treturn array_reduce($value, function ($result, $item) {\n\t\t\tif (isset($item['key'])) {\n\t\t\t\t$result[$item['key']] = $item;\n\t\t\t}\n\t\t\treturn $result;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Get upload file details from db.\n\t *\n\t * @param string $key\n\t *\n\t * @return array\n\t */\n\tpublic static function getUploadFile(string $key)\n\t{\n\t\t$row = (new \\App\\Db\\Query())->from(static::TABLE_NAME_TEMP)->where(['key' => $key])->one();\n\t\treturn $row ?: [];\n\t}\n\n\t/**\n\t * Check is it an allowed directory.\n\t *\n\t * @param string $fullPath\n\t *\n\t * @return bool\n\t */\n\tpublic static function isAllowedDirectory(string $fullPath)\n\t{\n\t\treturn !(!is_readable($fullPath) || !is_dir($fullPath) || is_file($fullPath));\n\t}\n\n\t/**\n\t * Check is it an allowed file directory.\n\t *\n\t * @param string $fullPath\n\t *\n\t * @return bool\n\t */\n\tpublic static function isAllowedFileDirectory(string $fullPath)\n\t{\n\t\treturn !(!is_readable($fullPath) || is_dir($fullPath) || !is_file($fullPath));\n\t}\n\n\t/**\n\t * Creates a temporary file.\n\t *\n\t * @param string $prefix The prefix of the generated temporary filename Note: Windows uses only the first three characters of prefix\n\t * @param string $ext    File extension, default: .tmp\n\t *\n\t * @return string The new temporary filename (with path), or throw an exception on failure\n\t */\n\tpublic static function createTempFile(string $prefix = '', string $ext = 'tmp'): string\n\t{\n\t\treturn (new \\Symfony\\Component\\Filesystem\\Filesystem())->tempnam(self::getTmpPath(), $prefix, '.' . $ext);\n\t}\n\n\t/**\n\t * Delete files from record.\n\t *\n\t * @param \\Vtiger_Record_Model $recordModel\n\t */\n\tpublic static function deleteForRecord(\\Vtiger_Record_Model $recordModel)\n\t{\n\t\tforeach ($recordModel->getModule()->getFieldsByType(['multiAttachment', 'multiImage', 'image']) as $fieldModel) {\n\t\t\tif (!$recordModel->isEmpty($fieldModel->getName()) && !\\App\\Json::isEmpty($recordModel->get($fieldModel->getName()))) {\n\t\t\t\tforeach (\\App\\Json::decode($recordModel->get($fieldModel->getName())) as $file) {\n\t\t\t\t\t$path = ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . $file['path'];\n\t\t\t\t\tif (file_exists($path)) {\n\t\t\t\t\t\tunlink($path);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\\App\\Log::warning('Deleted file does not exist: ' . print_r($file, true));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n/**\n * Validator basic class.\n *\n * @package   App\n *\n * @license   YetiForce Public License 5.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @copyright YetiForce S.A.\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App;\n\n/**\n * Class Validator.\n */\nclass Validator\n{\n\t/**\n\t * Function verifies if given value can be recognized as bool.\n\t *\n\t * @param bool|int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function bool($input): bool\n\t{\n\t\treturn null !== filter_var($input, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);\n\t}\n\n\t/**\n\t * Function verifies if given value is standard text.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function standard(string $input): bool\n\t{\n\t\treturn preg_match('/^[\\-_a-zA-Z]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value contains only words or digits.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function alnum($input): bool\n\t{\n\t\treturn preg_match('/^[[:alnum:]_]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value contains only words, digits  or space.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function alnumSpace($input): bool\n\t{\n\t\treturn preg_match('/^[[:alnum:]_ ]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with default data format.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function date(string $input): bool\n\t{\n\t\treturn Fields\\Date::isValid($input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with user\u2019s date format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateInUserFormat(string $input, ?int $userId = null): bool\n\t{\n\t\tif (null === $userId) {\n\t\t\t$userId = User::getCurrentUserId();\n\t\t}\n\t\treturn Fields\\Date::isValid($input, User::getUserModel($userId)->getDetail('date_format'));\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with date time in ISO format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateTimeInIsoFormat(string $input): bool\n\t{\n\t\treturn preg_match('/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with default time format.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function time(string $input): bool\n\t{\n\t\treturn preg_match('/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9]):([0-5][0-9])$/', $input);\n\t}\n\n\t/**\n\t *  Function verifies if given value is compatible with user\u2019s time format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function timeInUserFormat(string $input, ?int $userId = null): bool\n\t{\n\t\tif (null === $userId) {\n\t\t\t$userId = User::getCurrentUserId();\n\t\t}\n\t\tif ('12' === User::getUserModel($userId)->getDetail('hour_format')) {\n\t\t\t$pattern = '/^([0][0-9]|1[0-2]):([0-5][0-9])([ ]PM|[ ]AM|PM|AM)$/';\n\t\t} else {\n\t\t\t$pattern = '/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])$/';\n\t\t}\n\t\treturn preg_match($pattern, $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with default date and time format.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateTime(string $input): bool\n\t{\n\t\t$result = false;\n\t\tif (($arrInput = \\explode(' ', $input)) && 2 === \\count($arrInput)) {\n\t\t\t[$dateInput, $timeInput] = $arrInput;\n\t\t\t[$y, $m, $d] = Fields\\Date::explode($dateInput);\n\t\t\t$result = checkdate($m, $d, $y) && is_numeric($y) && is_numeric($m) && is_numeric($d)\n\t\t\t\t&& preg_match('/(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9]):([0-5][0-9])/', $timeInput);\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with user\u2019s  date and time format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateTimeInUserFormat(string $input, ?int $userId = null): bool\n\t{\n\t\t$result = false;\n\t\tif (($arrInput = \\explode(' ', $input, 2)) && 2 === \\count($arrInput)) {\n\t\t\t$userModel = User::getUserModel($userId ?? User::getCurrentUserId());\n\t\t\t[$dateInput, $timeInput] = $arrInput;\n\t\t\t[$y, $m, $d] = Fields\\Date::explode($dateInput, $userModel->getDetail('date_format'));\n\t\t\tif ('12' === $userModel->getDetail('hour_format')) {\n\t\t\t\t$pattern = '/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])(:([0-5][0-9]))?([ ]PM|[ ]AM|PM|AM)?$/';\n\t\t\t} else {\n\t\t\t\t$pattern = '/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])(:([0-5][0-9]))?$/';\n\t\t\t}\n\t\t\t$result = checkdate($m, $d, $y) && is_numeric($y) && is_numeric($m) && is_numeric($d) && preg_match($pattern, $timeInput);\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Function verifies if given value is integer type.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function integer($input): bool\n\t{\n\t\treturn false !== filter_var($input, FILTER_VALIDATE_INT);\n\t}\n\n\t/**\n\t * Function verifies if given value is float type.\n\t *\n\t * @param float|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function float($input): bool\n\t{\n\t\treturn false !== filter_var($input, FILTER_VALIDATE_FLOAT);\n\t}\n\n\t/**\n\t * Check if floating point numbers are equal.\n\t *\n\t * @see https://www.php.net/manual/en/language.types.float.php\n\t *\n\t * @param float $value1\n\t * @param float $value2\n\t * @param int   $precision\n\t * @param mixed $rounding\n\t *\n\t * @return bool\n\t */\n\tpublic static function floatIsEqual(float $value1, float $value2, int $precision = 2, $rounding = true): bool\n\t{\n\t\tif ($rounding) {\n\t\t\t$value1 = round($value1, $precision);\n\t\t\t$value2 = round($value2, $precision);\n\t\t}\n\t\treturn 0 === bccomp($value1, $value2, $precision);\n\t}\n\n\t/**\n\t * Check if floating point numbers are equal. Get the precision of the number from the user's settings.\n\t *\n\t * @param float $value1\n\t * @param float $value2\n\t *\n\t * @return bool\n\t */\n\tpublic static function floatIsEqualUserCurrencyDecimals(float $value1, float $value2): bool\n\t{\n\t\treturn static::floatIsEqual($value1, $value2, (int) \\App\\User::getCurrentUserModel()->getDetail('no_of_currency_decimals'));\n\t}\n\n\t/**\n\t * Function verifies if given value is a natural number.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function naturalNumber($input): bool\n\t{\n\t\treturn preg_match('/^[0-9]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is a correct language tag.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function languageTag(string $input): bool\n\t{\n\t\treturn $input && explode('-', $input) === explode('_', \\Locale::acceptFromHttp($input));\n\t}\n\n\t/**\n\t * Function checks if its mysql type.\n\t *\n\t * @param string $dbType\n\t *\n\t * @return bool\n\t */\n\tpublic static function isMySQL(string $dbType): bool\n\t{\n\t\treturn 0 === stripos($dbType, 'mysql');\n\t}\n\n\t/**\n\t *  Function checks if given value is email.\n\t *\n\t * @param string $email\n\t *\n\t * @return bool\n\t */\n\tpublic static function email(string $email): bool\n\t{\n\t\treturn false !== filter_var($email, FILTER_VALIDATE_EMAIL, FILTER_FLAG_EMAIL_UNICODE) && $email === filter_var($email, FILTER_SANITIZE_EMAIL);\n\t}\n\n\t/**\n\t *  Function checks if given value is email.\n\t *\n\t * @param string|array $emails\n\t *\n\t * @return bool\n\t */\n\tpublic static function emails($emails): bool\n\t{\n\t\t$emails = \\is_string($emails) ? explode(',', $emails) : $emails;\n\t\tforeach ($emails as $email) {\n\t\t\tif ($email && !self::email($email)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Function checks if given value is url or domain.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic static function urlDomain(string $url): bool\n\t{\n\t\tif (false === strpos($url, '://')) {\n\t\t\treturn static::domain($url);\n\t\t}\n\t\treturn static::url($url);\n\t}\n\n\t/**\n\t * Function checks if given value is url.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic static function url(string $url): bool\n\t{\n\t\tif (mb_strlen($url) != \\strlen($url) && \\function_exists('idn_to_ascii') && \\defined('INTL_IDNA_VARIANT_UTS46')) {\n\t\t\t$url = preg_replace_callback('/:\\/\\/([^\\/]+)/', function ($matches) {\n\t\t\t\treturn '://' . idn_to_ascii($matches[1], IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n\t\t\t}, $url);\n\t\t}\n\t\treturn false !== filter_var($url, FILTER_VALIDATE_URL);\n\t}\n\n\t/**\n\t * Function checks if given value is domain.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function domain(string $input): bool\n\t{\n\t\tif (mb_strlen($input) != \\strlen($input) && \\function_exists('idn_to_ascii') && \\defined('INTL_IDNA_VARIANT_UTS46')) {\n\t\t\t$input = idn_to_ascii($input, IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n\t\t}\n\t\treturn false !== filter_var($input, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME);\n\t}\n\n\t/**\n\t * Function checks if given value is database type.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dbType(string $input): bool\n\t{\n\t\treturn isset((new Db())->schemaMap[$input]);\n\t}\n\n\t/**\n\t * Function checks if given value is correct database name (mysql).\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dbName(string $input): bool\n\t{\n\t\treturn preg_match('/^[^\\\\/?%*:|\\\\\\\"<>.\\s]{1,64}$/', $input);\n\t}\n\n\t/**\n\t * Function checks if given value is valid db user name.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dbUserName($input): bool\n\t{\n\t\treturn preg_match('/^[_a-zA-Z0-9.,:-]+$/', $input);\n\t}\n\n\t/**\n\t * Function checks if given value is port number.\n\t *\n\t * @param int $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function port($input): bool\n\t{\n\t\treturn preg_match('/^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/', $input);\n\t}\n\n\t/**\n\t * Function checks if given value is valid SQl input.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function sql($input): bool\n\t{\n\t\treturn preg_match('/^[_a-zA-Z0-9.,:]+$/', $input);\n\t}\n\n\t/**\n\t * Check if input is an time period value.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function timePeriod($input): bool\n\t{\n\t\treturn preg_match('/^[0-9]{1,18}\\:(d|H|i){1}$/', $input);\n\t}\n\n\t/**\n\t * Check if input is an ip value.\n\t *\n\t * @param string|string[] $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function ip($input): bool\n\t{\n\t\t$input = \\is_array($input) ? $input : [$input];\n\t\t$result = true;\n\t\tforeach ($input as $ipAddress) {\n\t\t\tif (false === filter_var($ipAddress, FILTER_VALIDATE_IP)) {\n\t\t\t\t$result = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Function verifies if given value is text.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function text(string $input): bool\n\t{\n\t\treturn Purifier::decodeHtml(Purifier::purify($input)) === $input;\n\t}\n\n\t/**\n\t * Check directory name.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dirName(string $input): bool\n\t{\n\t\treturn !preg_match('/[\\\\/:\\*\\?\"<>|]/', $input) && false === strpos($input, '.', -1);\n\t}\n\n\t/**\n\t * Check path.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function path(string $input): bool\n\t{\n\t\t$parts = explode('/', trim(str_replace(\\DIRECTORY_SEPARATOR, '/', $input), '/'));\n\t\treturn !array_filter($parts, function ($dir) {\n\t\t\treturn !self::dirName($dir);\n\t\t});\n\t}\n}\n", "<?php\n\nreturn [\n\t'appVersion' => '6.3.220',\n\t'patchVersion' => '2022.05.05',\n\t'lib_roundcube' => '0.2.12',\n];\n", "<?php\n\n/**\n * Fields Action Class.\n *\n * @package Action\n *\n * @copyright YetiForce S.A.\n * @license   YetiForce Public License 5.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\nclass Vtiger_Fields_Action extends \\App\\Controller\\Action\n{\n\tuse \\App\\Controller\\ExposeMethod;\n\n\t/**\n\t * Field model instance.\n\t *\n\t * @var Vtiger_Field_Model\n\t */\n\tprotected $fieldModel;\n\n\t/**\n\t * Function to check permission.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function checkPermission(App\\Request $request)\n\t{\n\t\t$mode = $request->getMode();\n\t\tif ('verifyPhoneNumber' !== $mode) {\n\t\t\t$currentUserPriviligesModel = Users_Privileges_Model::getCurrentUserPrivilegesModel();\n\t\t\tif (!$currentUserPriviligesModel->hasModulePermission($request->getModule())) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t\t}\n\t\t\tif ('getReference' !== $mode && !\\App\\Privilege::isPermitted($request->getModule(), 'EditView')) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t\t}\n\t\t}\n\t\tif ('findAddress' !== $mode && 'getReference' !== $mode && 'validateByMode' !== $mode) {\n\t\t\t$this->fieldModel = Vtiger_Module_Model::getInstance($request->getModule())->getFieldByName($request->getByType('fieldName', 2));\n\t\t\tif (!$this->fieldModel || !$this->fieldModel->isEditable()) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\t$this->exposeMethod('getOwners');\n\t\t$this->exposeMethod('getReference');\n\t\t$this->exposeMethod('getUserRole');\n\t\t$this->exposeMethod('findAddress');\n\t\t$this->exposeMethod('validateForField');\n\t\t$this->exposeMethod('validateByMode');\n\t\t$this->exposeMethod('verifyPhoneNumber');\n\t\t$this->exposeMethod('changeFavoriteOwner');\n\t}\n\n\t/**\n\t * Get owners for ajax owners list.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function getOwners(App\\Request $request)\n\t{\n\t\tif (!App\\Config::performance('SEARCH_OWNERS_BY_AJAX')) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t}\n\t\tif ('owner' !== $this->fieldModel->getFieldDataType() && 'sharedOwner' !== $this->fieldModel->getFieldDataType()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD');\n\t\t}\n\t\t$moduleName = $request->getModule();\n\t\t$searchValue = $request->getByType('value', 'Text');\n\t\tif ($request->has('result')) {\n\t\t\t$result = $request->getArray('result', 'Standard');\n\t\t} else {\n\t\t\t$result = ['users', 'groups'];\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\tif (empty($searchValue)) {\n\t\t\t$response->setResult(['items' => []]);\n\t\t} else {\n\t\t\t$owner = App\\Fields\\Owner::getInstance($moduleName);\n\t\t\t$owner->find($searchValue);\n\n\t\t\t$data = [];\n\t\t\tif (\\in_array('users', $result)) {\n\t\t\t\t$users = $owner->getAccessibleUsers('', 'owner');\n\t\t\t\tif (!empty($users)) {\n\t\t\t\t\t$data[] = ['name' => \\App\\Language::translate('LBL_USERS'), 'type' => 'optgroup'];\n\t\t\t\t\tforeach ($users as $key => $value) {\n\t\t\t\t\t\t$data[] = ['id' => $key, 'name' => $value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\\in_array('groups', $result)) {\n\t\t\t\t$grup = $owner->getAccessibleGroups('', 'owner', true);\n\t\t\t\tif (!empty($grup)) {\n\t\t\t\t\t$data[] = ['name' => \\App\\Language::translate('LBL_GROUPS'), 'type' => 'optgroup'];\n\t\t\t\t\tforeach ($grup as $key => $value) {\n\t\t\t\t\t\t$data[] = ['id' => $key, 'name' => $value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$response->setResult(['items' => $data]);\n\t\t}\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Search user roles.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function getUserRole(App\\Request $request)\n\t{\n\t\tif (!App\\Config::performance('SEARCH_ROLES_BY_AJAX')) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t}\n\t\tif ('userRole' !== $this->fieldModel->getFieldDataType()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD');\n\t\t}\n\t\t$searchValue = $request->getByType('value', 'Text');\n\t\t$response = new Vtiger_Response();\n\t\tif (empty($searchValue)) {\n\t\t\t$response->setResult(['items' => []]);\n\t\t} else {\n\t\t\t$rows = $this->fieldModel->getUITypeModel()->getSearchValues($searchValue);\n\t\t\tforeach ($rows as $key => $value) {\n\t\t\t\t$data[] = ['id' => $key, 'name' => $value];\n\t\t\t}\n\t\t\t$response->setResult(['items' => $data]);\n\t\t}\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function getReference(App\\Request $request)\n\t{\n\t\tif ($request->has('fieldName')) {\n\t\t\t$fieldModel = Vtiger_Module_Model::getInstance($request->getModule())->getFieldByName($request->getByType('fieldName', 2));\n\t\t\tif (empty($fieldModel) || !$fieldModel->isActiveField() || !$fieldModel->isViewEnabled()) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t\t}\n\t\t\t$searchInModule = $fieldModel->getReferenceList();\n\t\t} elseif ($request->has('relationId') && ($relation = \\App\\Relation::getById($request->getInteger('relationId'))) && $relation['related_modulename'] === $request->getModule()) {\n\t\t\tif (\\in_array($relation['related_modulename'], ['getDependentsList', 'getManyToMany', 'getRelatedList'])) {\n\t\t\t\t$searchInModule = $relation['related_modulename'];\n\t\t\t} else {\n\t\t\t\t$typeRelationModel = \\Vtiger_Relation_Model::getInstanceById($relation['relation_id'])->getTypeRelationModel();\n\t\t\t\tif (method_exists($typeRelationModel, 'getConfigAdvancedConditionsByColumns')) {\n\t\t\t\t\t$searchInModule = $typeRelationModel->getConfigAdvancedConditionsByColumns()['relatedModules'] ?? $relation['related_modulename'];\n\t\t\t\t} else {\n\t\t\t\t\t$searchInModule = $relation['related_modulename'];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$limit = \\App\\Config::search('GLOBAL_SEARCH_AUTOCOMPLETE_LIMIT');\n\t\t$searchValue = \\App\\RecordSearch::getSearchField()->getUITypeModel()->getDbConditionBuilderValue($request->getByType('value', \\App\\Purifier::TEXT), '');\n\t\t$rows = (new \\App\\RecordSearch($searchValue, $searchInModule, $limit))->setMode(\\App\\RecordSearch::LABEL_MODE)->search();\n\t\t$data = $modules = [];\n\t\tforeach ($rows as $row) {\n\t\t\t$modules[$row['setype']][] = $row;\n\t\t}\n\t\tforeach ($modules as $moduleName => $rows) {\n\t\t\t$data[] = ['name' => App\\Language::translateSingleMod($moduleName, $moduleName), 'type' => 'optgroup'];\n\t\t\tforeach ($rows as $row) {\n\t\t\t\t$data[] = ['id' => $row['crmid'], 'name' => \\App\\Purifier::encodeHtml($row['label'])];\n\t\t\t}\n\t\t}\n\t\t$response->setResult(['items' => $data]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Verify phone number.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function verifyPhoneNumber(App\\Request $request)\n\t{\n\t\tif ('phone' !== $this->fieldModel->getFieldDataType()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD');\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$data = ['isValidNumber' => false];\n\t\tif ($request->isEmpty('phoneCountry', true)) {\n\t\t\t$data['message'] = \\App\\Language::translate('LBL_NO_PHONE_COUNTRY');\n\t\t}\n\t\tif (empty($data['message'])) {\n\t\t\ttry {\n\t\t\t\t$data = App\\Fields\\Phone::verifyNumber($request->getByType('phoneNumber', 'Text'), $request->getByType('phoneCountry', 1));\n\t\t\t} catch (\\App\\Exceptions\\FieldException $e) {\n\t\t\t\t$data = ['isValidNumber' => false];\n\t\t\t}\n\t\t}\n\t\tif (!$data['isValidNumber'] && empty($data['message'])) {\n\t\t\t$data['message'] = \\App\\Language::translate('LBL_INVALID_PHONE_NUMBER');\n\t\t}\n\t\t$response->setResult($data);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Find address.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function findAddress(App\\Request $request)\n\t{\n\t\t$instance = \\App\\Map\\Address::getInstance($request->getByType('type'));\n\t\t$response = new Vtiger_Response();\n\t\tif ($instance) {\n\t\t\t$response->setResult($instance->find($request->getByType('value', 'Text')));\n\t\t}\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Change favorite owner state.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\IllegalValue\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t * @throws \\yii\\db\\Exception\n\t */\n\tpublic function changeFavoriteOwner(App\\Request $request)\n\t{\n\t\tif (!App\\Config::module('Users', 'FAVORITE_OWNERS') || (\\App\\User::getCurrentUserRealId() !== \\App\\User::getCurrentUserId())) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t}\n\t\t$moduleName = $request->getModule();\n\t\t$ownerField = \\App\\Fields\\Owner::getInstance($moduleName);\n\t\t$result = $ownerField->changeFavorites($this->fieldModel->getFieldDataType(), $request->getInteger('owner'));\n\t\t$message = $result ? 'LBL_MODIFICATION_SUCCESSFUL_AND_RELOAD' : 'LBL_MODIFICATION_FAILURE';\n\t\t$message = \\App\\Language::translate($this->fieldModel->getFieldLabel(), $moduleName) . ': ' . \\App\\Language::translate($message, $moduleName);\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult(['result' => $result, 'message' => $message]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Validate the field name and value.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function validateForField(App\\Request $request)\n\t{\n\t\t$fieldModel = Vtiger_Module_Model::getInstance($request->getModule())->getFieldByName($request->getByType('fieldName', 2));\n\t\tif (!$fieldModel || !$fieldModel->isActiveField() || !$fieldModel->isViewEnabled()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t}\n\t\t$recordModel = \\Vtiger_Record_Model::getCleanInstance($fieldModel->getModuleName());\n\t\t$fieldModel->getUITypeModel()->setValueFromRequest($request, $recordModel, 'fieldValue');\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult([\n\t\t\t'raw' => $recordModel->get($fieldModel->getName()),\n\t\t\t'display' => $recordModel->getDisplayValue($fieldModel->getName()),\n\t\t]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Validate the value based on the type of purify.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function validateByMode(App\\Request $request)\n\t{\n\t\tif ($request->isEmpty('purifyMode') || !$request->has('value')) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_ILLEGAL_VALUE', 406);\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult([\n\t\t\t'raw' => $request->getByType('value', $request->getByType('purifyMode')),\n\t\t]);\n\t\t$response->emit();\n\t}\n}\n", "/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */\n\nCKEDITOR.dialog.add('base64image-dialog', function (editor) {\n\tvar t = null,\n\t\tselectedImg = null,\n\t\torgWidth = null,\n\t\torgHeight = null,\n\t\timgPreview = null,\n\t\timgScal = 1,\n\t\tlock = true;\n\n\t/* Check File Reader Support */\n\tfunction fileSupport() {\n\t\tvar r = false,\n\t\t\tn = null;\n\t\ttry {\n\t\t\tif (FileReader) {\n\t\t\t\tvar n = document.createElement('input');\n\t\t\t\tif (n && 'files' in n) r = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tr = false;\n\t\t}\n\t\tn = null;\n\t\treturn r;\n\t}\n\tvar isFReaderSupported = fileSupport();\n\n\t/* Load preview image */\n\tfunction imagePreviewLoad(s) {\n\t\t/* no preview */\n\t\tif (typeof s != 'string' || !s) {\n\t\t\timgPreview.getElement().setHtml('');\n\t\t\treturn;\n\t\t}\n\n\t\t/* Create image */\n\t\tvar i = new Image();\n\n\t\t/* Display loading text in preview element */\n\t\timgPreview.getElement().setHtml('Loading...');\n\n\t\t/* When image is loaded */\n\t\ti.onload = function () {\n\t\t\t/* Remove preview */\n\t\t\timgPreview.getElement().setHtml('');\n\n\t\t\t/* Set attributes */\n\t\t\tif (orgWidth == null || orgHeight == null) {\n\t\t\t\tt.setValueOf('tab-properties', 'width', this.width);\n\t\t\t\tt.setValueOf('tab-properties', 'height', this.height);\n\t\t\t\timgScal = 1;\n\t\t\t\tif (this.height > 0 && this.width > 0) imgScal = this.width / this.height;\n\t\t\t\tif (imgScal <= 0) imgScal = 1;\n\t\t\t} else {\n\t\t\t\torgWidth = null;\n\t\t\t\torgHeight = null;\n\t\t\t}\n\t\t\tthis.id = editor.id + 'previewimage';\n\t\t\tthis.setAttribute('style', 'max-width:400px;max-height:100px;');\n\t\t\tthis.setAttribute('alt', '');\n\n\t\t\t/* Insert preview image */\n\t\t\ttry {\n\t\t\t\tvar p = imgPreview.getElement().$;\n\t\t\t\tif (p) p.appendChild(this);\n\t\t\t} catch (e) {}\n\t\t};\n\n\t\t/* Error Function */\n\t\ti.onerror = function () {\n\t\t\timgPreview.getElement().setHtml('');\n\t\t};\n\t\ti.onabort = function () {\n\t\t\timgPreview.getElement().setHtml('');\n\t\t};\n\n\t\t/* Load image */\n\t\ti.src = s;\n\t}\n\n\tfunction imagePreview(src) {\n\t\timgPreview.getElement().setHtml('');\n\t\tif (isFReaderSupported) {\n\t\t\tvar fileI = t.getContentElement('tab-source', 'file');\n\t\t\tvar n = null;\n\t\t\ttry {\n\t\t\t\tn = fileI.getInputElement().$;\n\t\t\t} catch (e) {\n\t\t\t\tn = null;\n\t\t\t}\n\t\t\tif (n && 'files' in n && n.files && n.files.length > 0 && n.files[0]) {\n\t\t\t\tif ('type' in n.files[0] && !n.files[0].type.match('image.*')) return;\n\t\t\t\tif (!FileReader) return;\n\t\t\t\timgPreview.getElement().setHtml('Loading...');\n\t\t\t\tvar fr = new FileReader();\n\t\t\t\tfr.onload = (function (f) {\n\t\t\t\t\treturn function (e) {\n\t\t\t\t\t\timgPreview.getElement().setHtml('');\n\t\t\t\t\t\timagePreviewLoad(e.target.result);\n\t\t\t\t\t};\n\t\t\t\t})(n.files[0]);\n\t\t\t\tfr.onerror = function () {\n\t\t\t\t\timgPreview.getElement().setHtml('');\n\t\t\t\t};\n\t\t\t\tfr.onabort = function () {\n\t\t\t\t\timgPreview.getElement().setHtml('');\n\t\t\t\t};\n\t\t\t\tfr.readAsDataURL(n.files[0]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getImageDimensions() {\n\t\tvar o = {\n\t\t\tw: t.getContentElement('tab-properties', 'width').getValue(),\n\t\t\th: t.getContentElement('tab-properties', 'height').getValue(),\n\t\t\tuw: 'px',\n\t\t\tuh: 'px'\n\t\t};\n\t\tif (o.w.indexOf('%') >= 0) o.uw = '%';\n\t\tif (o.h.indexOf('%') >= 0) o.uh = '%';\n\t\to.w = parseInt(o.w, 10);\n\t\to.h = parseInt(o.h, 10);\n\t\tif (isNaN(o.w)) o.w = 0;\n\t\tif (isNaN(o.h)) o.h = 0;\n\t\treturn o;\n\t}\n\n\tfunction imageDimensions(src) {\n\t\tvar o = getImageDimensions();\n\t\tvar u = 'px';\n\t\tif (src == 'width') {\n\t\t\tif (o.uw == '%') u = '%';\n\t\t\to.h = Math.round(o.w / imgScal);\n\t\t} else {\n\t\t\tif (o.uh == '%') u = '%';\n\t\t\to.w = Math.round(o.h * imgScal);\n\t\t}\n\t\tif (u == '%') {\n\t\t\to.w += '%';\n\t\t\to.h += '%';\n\t\t}\n\t\tt.getContentElement('tab-properties', 'width').setValue(o.w),\n\t\t\tt.getContentElement('tab-properties', 'height').setValue(o.h);\n\t}\n\n\tfunction integerValue(elem) {\n\t\tvar v = elem.getValue(),\n\t\t\tu = '';\n\t\tif (v.indexOf('%') >= 0) u = '%';\n\t\tv = parseInt(v, 10);\n\t\tif (isNaN(v)) v = 0;\n\t\telem.setValue(v + u);\n\t}\n\n\tif (isFReaderSupported) {\n\t\tvar sourceElements = [\n\t\t\t{\n\t\t\t\ttype: 'hbox',\n\t\t\t\twidths: ['70px'],\n\t\t\t\tstyle: 'margin-top:40px;',\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tid: 'file',\n\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\tonChange: function () {\n\t\t\t\t\t\t\timagePreview('file');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'html',\n\t\t\t\tid: 'preview',\n\t\t\t\thtml: new CKEDITOR.template('<div style=\"text-align:center;\"></div>').output()\n\t\t\t}\n\t\t];\n\t}\n\t/* Dialog */\n\treturn {\n\t\ttitle: editor.lang.common.image,\n\t\tminWidth: 450,\n\t\tminHeight: 180,\n\t\tonLoad: function () {\n\t\t\t/* Get image preview element */\n\t\t\timgPreview = this.getContentElement('tab-source', 'preview');\n\n\t\t\t/* Constrain proportions or not */\n\t\t\tthis.getContentElement('tab-properties', 'lock')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'click',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tif (this.getValue()) lock = true;\n\t\t\t\t\t\telse lock = false;\n\t\t\t\t\t\tif (lock) imageDimensions('width');\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'lock')\n\t\t\t\t);\n\n\t\t\t/* Change Attributes Events  */\n\t\t\tthis.getContentElement('tab-properties', 'width')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on('keyup', function () {\n\t\t\t\t\tif (lock) imageDimensions('width');\n\t\t\t\t});\n\t\t\tthis.getContentElement('tab-properties', 'height')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on('keyup', function () {\n\t\t\t\t\tif (lock) imageDimensions('height');\n\t\t\t\t});\n\t\t\tthis.getContentElement('tab-properties', 'vmargin')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'keyup',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tintegerValue(this);\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'vmargin')\n\t\t\t\t);\n\t\t\tthis.getContentElement('tab-properties', 'hmargin')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'keyup',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tintegerValue(this);\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'hmargin')\n\t\t\t\t);\n\t\t\tthis.getContentElement('tab-properties', 'border')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'keyup',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tintegerValue(this);\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'border')\n\t\t\t\t);\n\t\t},\n\t\tonShow: function () {\n\t\t\t/* Remove preview */\n\t\t\timgPreview.getElement().setHtml('');\n\n\t\t\t(t = this), (orgWidth = null), (orgHeight = null), (imgScal = 1), (lock = true);\n\n\t\t\t/* selected image or null */\n\t\t\tselectedImg = editor.getSelection();\n\t\t\tif (selectedImg) selectedImg = selectedImg.getSelectedElement();\n\t\t\tif (!selectedImg || selectedImg.getName() !== 'img') selectedImg = null;\n\n\t\t\t/* Set input values */\n\t\t\tt.setValueOf('tab-properties', 'lock', lock);\n\t\t\tt.setValueOf('tab-properties', 'vmargin', '0');\n\t\t\tt.setValueOf('tab-properties', 'hmargin', '0');\n\t\t\tt.setValueOf('tab-properties', 'border', '0');\n\t\t\tt.setValueOf('tab-properties', 'align', 'none');\n\t\t\tif (selectedImg) {\n\t\t\t\t/* Set input values from selected image */\n\t\t\t\tif (typeof selectedImg.getAttribute('width') == 'string') orgWidth = selectedImg.getAttribute('width');\n\t\t\t\tif (typeof selectedImg.getAttribute('height') == 'string') orgHeight = selectedImg.getAttribute('height');\n\t\t\t\tif ((orgWidth == null || orgHeight == null) && selectedImg.$) {\n\t\t\t\t\torgWidth = selectedImg.$.width;\n\t\t\t\t\torgHeight = selectedImg.$.height;\n\t\t\t\t}\n\t\t\t\tif (orgWidth != null && orgHeight != null) {\n\t\t\t\t\tt.setValueOf('tab-properties', 'width', orgWidth);\n\t\t\t\t\tt.setValueOf('tab-properties', 'height', orgHeight);\n\t\t\t\t\torgWidth = parseInt(orgWidth, 10);\n\t\t\t\t\torgHeight = parseInt(orgHeight, 10);\n\t\t\t\t\timgScal = 1;\n\t\t\t\t\tif (!isNaN(orgWidth) && !isNaN(orgHeight) && orgHeight > 0 && orgWidth > 0) imgScal = orgWidth / orgHeight;\n\t\t\t\t\tif (imgScal <= 0) imgScal = 1;\n\t\t\t\t}\n\n\t\t\t\tif (typeof selectedImg.getAttribute('src') == 'string') {\n\t\t\t\t\tif (selectedImg.getAttribute('src').indexOf('data:') === 0) {\n\t\t\t\t\t\timagePreview('base64');\n\t\t\t\t\t\timagePreviewLoad(selectedImg.getAttribute('src'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (typeof selectedImg.getAttribute('alt') == 'string')\n\t\t\t\t\tt.setValueOf('tab-properties', 'alt', selectedImg.getAttribute('alt'));\n\t\t\t\tif (typeof selectedImg.getAttribute('hspace') == 'string')\n\t\t\t\t\tt.setValueOf('tab-properties', 'hmargin', selectedImg.getAttribute('hspace'));\n\t\t\t\tif (typeof selectedImg.getAttribute('vspace') == 'string')\n\t\t\t\t\tt.setValueOf('tab-properties', 'vmargin', selectedImg.getAttribute('vspace'));\n\t\t\t\tif (typeof selectedImg.getAttribute('border') == 'string')\n\t\t\t\t\tt.setValueOf('tab-properties', 'border', selectedImg.getAttribute('border'));\n\t\t\t\tif (typeof selectedImg.getAttribute('align') == 'string') {\n\t\t\t\t\tswitch (selectedImg.getAttribute('align')) {\n\t\t\t\t\t\tcase 'top':\n\t\t\t\t\t\tcase 'text-top':\n\t\t\t\t\t\t\tt.setValueOf('tab-properties', 'align', 'top');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'baseline':\n\t\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\tcase 'text-bottom':\n\t\t\t\t\t\t\tt.setValueOf('tab-properties', 'align', 'bottom');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'left':\n\t\t\t\t\t\t\tt.setValueOf('tab-properties', 'align', 'left');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'right':\n\t\t\t\t\t\t\tt.setValueOf('tab-properties', 'align', 'right');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tt.selectPage('tab-properties');\n\t\t\t}\n\t\t},\n\t\tonOk: function () {\n\t\t\t/* Get image source */\n\t\t\tvar src = '';\n\t\t\ttry {\n\t\t\t\tsrc = CKEDITOR.document.getById(editor.id + 'previewimage').$.src;\n\t\t\t} catch (e) {\n\t\t\t\tsrc = '';\n\t\t\t}\n\t\t\tif (typeof src != 'string' || src == null || src === '') return;\n\n\t\t\t/* selected image or new image */\n\t\t\tif (selectedImg) var newImg = selectedImg;\n\t\t\telse var newImg = editor.document.createElement('img');\n\t\t\tnewImg.setAttribute('src', src);\n\t\t\tsrc = null;\n\n\t\t\t/* Set attributes */\n\t\t\tnewImg.setAttribute('alt', t.getValueOf('tab-properties', 'alt').replace(/^\\s+/, '').replace(/\\s+$/, ''));\n\t\t\tvar attr = {\n\t\t\t\t\twidth: ['width', 'width:#;', 'integer', 1],\n\t\t\t\t\theight: ['height', 'height:#;', 'integer', 1],\n\t\t\t\t\tvmargin: ['vspace', 'margin-top:#;margin-bottom:#;', 'integer', 0],\n\t\t\t\t\thmargin: ['hspace', 'margin-left:#;margin-right:#;', 'integer', 0],\n\t\t\t\t\talign: ['align', ''],\n\t\t\t\t\tborder: ['border', 'border:# solid black;', 'integer', 0]\n\t\t\t\t},\n\t\t\t\tcss = [],\n\t\t\t\tvalue,\n\t\t\t\tcssvalue,\n\t\t\t\tattrvalue,\n\t\t\t\tk;\n\t\t\tfor (k in attr) {\n\t\t\t\tvalue = t.getValueOf('tab-properties', k);\n\t\t\t\tattrvalue = value;\n\t\t\t\tcssvalue = value;\n\t\t\t\tunit = 'px';\n\n\t\t\t\tif (k == 'align') {\n\t\t\t\t\tswitch (value) {\n\t\t\t\t\t\tcase 'top':\n\t\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\t\tattr[k][1] = 'vertical-align:#;';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'left':\n\t\t\t\t\t\tcase 'right':\n\t\t\t\t\t\t\tattr[k][1] = 'float:#;';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tvalue = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (attr[k][2] == 'integer') {\n\t\t\t\t\tif (value.indexOf('%') >= 0) unit = '%';\n\t\t\t\t\tvalue = parseInt(value, 10);\n\t\t\t\t\tif (isNaN(value)) value = null;\n\t\t\t\t\telse if (value < attr[k][3]) value = null;\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tif (unit == '%') {\n\t\t\t\t\t\t\tattrvalue = value + '%';\n\t\t\t\t\t\t\tcssvalue = value + '%';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tattrvalue = value;\n\t\t\t\t\t\t\tcssvalue = value + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value != null) {\n\t\t\t\t\tnewImg.setAttribute(attr[k][0], attrvalue);\n\t\t\t\t\tcss.push(attr[k][1].replace(/#/g, cssvalue));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (css.length > 0) newImg.setAttribute('style', css.join(''));\n\n\t\t\t/* Insert new image */\n\t\t\tif (!selectedImg) editor.insertElement(newImg);\n\n\t\t\t/* Resize image */\n\t\t\tif (editor.plugins.imageresize) editor.plugins.imageresize.resize(editor, newImg, 800, 800);\n\t\t},\n\n\t\t/* Dialog form */\n\t\tcontents: [\n\t\t\t{\n\t\t\t\tid: 'tab-source',\n\t\t\t\tlabel: editor.lang.common.generalTab,\n\t\t\t\telements: sourceElements\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'tab-properties',\n\t\t\t\tlabel: editor.lang.common.advancedTab,\n\t\t\t\telements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\tid: 'alt',\n\t\t\t\t\t\tlabel: editor.lang.image.alt\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'hbox',\n\t\t\t\t\t\twidths: ['15%', '15%', '70%'],\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'width',\n\t\t\t\t\t\t\t\tlabel: editor.lang.common.width\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'height',\n\t\t\t\t\t\t\t\tlabel: editor.lang.common.height\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t\t\t\tid: 'lock',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.lockRatio,\n\t\t\t\t\t\t\t\tstyle: 'margin-top:18px;'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'hbox',\n\t\t\t\t\t\twidths: ['23%', '30%', '30%', '17%'],\n\t\t\t\t\t\tstyle: 'margin-top:10px;',\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\t\tid: 'align',\n\t\t\t\t\t\t\t\tlabel: editor.lang.common.align,\n\t\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t\t[editor.lang.common.notSet, 'none'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignTop, 'top'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignBottom, 'bottom'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignLeft, 'left'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignRight, 'right']\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'vmargin',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.vSpace\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'hmargin',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.hSpace\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'border',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.border\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t};\n});\n", "/* {[The file is published on the basis of YetiForce Public License 3.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */\n\nfunction initPasteEvent(editorInstance) {\n\tif (editorInstance.addFeature) {\n\t\teditorInstance.addFeature({\n\t\t\tallowedContent: 'img[alt,id,!src]{width,height};'\n\t\t});\n\t}\n\n\teditorInstance.on('contentDom', function () {\n\t\tvar editableElement = editorInstance.editable ? editorInstance.editable() : editorInstance.document;\n\t\teditableElement.on('paste', onPaste, null, { editor: editorInstance });\n\t});\n}\nfunction onPaste(event) {\n\tvar editor = event.listenerData && event.listenerData.editor;\n\tvar $event = event.data.$;\n\tvar clipboardData = $event.clipboardData;\n\tvar found = false;\n\tvar imageType = /^image/;\n\n\tif (!clipboardData) {\n\t\treturn;\n\t}\n\treturn Array.prototype.forEach.call(clipboardData.types, function (type, i) {\n\t\tif (found) {\n\t\t\treturn;\n\t\t}\n\t\tif (type.match(imageType) || clipboardData.items[i].type.match(imageType)) {\n\t\t\treadImageAsBase64(clipboardData.items[i], editor);\n\t\t\treturn (found = true);\n\t\t}\n\t});\n}\n\nfunction readImageAsBase64(item, editor) {\n\tif (!item || typeof item.getAsFile !== 'function') {\n\t\treturn;\n\t}\n\tvar file = item.getAsFile();\n\tvar reader = new FileReader();\n\treader.onload = function (evt) {\n\t\tvar element = editor.document.createElement('img', {\n\t\t\tattributes: {\n\t\t\t\tsrc: evt.target.result\n\t\t\t}\n\t\t});\n\t\tsetTimeout(function () {\n\t\t\teditor.insertElement(element);\n\t\t}, 10);\n\t};\n\treader.readAsDataURL(file);\n}\n\nCKEDITOR.plugins.add('base64image', {\n\trequires: 'dialog',\n\ticons: 'base64image',\n\thidpi: true,\n\tinit: function (editorInstance) {\n\t\tinitPasteEvent(editorInstance);\n\t\tvar pluginName = 'base64image-dialog';\n\t\teditorInstance.ui.addToolbarGroup('base64image', 'insert');\n\t\teditorInstance.ui.addButton('base64image', {\n\t\t\tlabel: editorInstance.lang.common.image,\n\t\t\tcommand: pluginName,\n\t\t\ttoolbar: 'insert'\n\t\t});\n\t\tCKEDITOR.dialog.add(pluginName, this.path + 'dialogs/dialog.js');\n\t\teditorInstance.addCommand(\n\t\t\tpluginName,\n\t\t\tnew CKEDITOR.dialogCommand(pluginName, {\n\t\t\t\tallowedContent:\n\t\t\t\t\t'img[alt,!src]{border-style,border-width,float,height,margin,margin-bottom,margin-left,margin-right,margin-top,width}',\n\t\t\t\trequiredContent: 'img[alt,src]',\n\t\t\t\tcontentTransformations: [\n\t\t\t\t\t['img{width}: sizeToStyle', 'img[width]: sizeToAttribute'],\n\t\t\t\t\t['img{float}: alignmentToStyle', 'img[align]: alignmentToAttribute']\n\t\t\t\t]\n\t\t\t})\n\t\t);\n\t\teditorInstance.on('doubleclick', function (evt) {\n\t\t\tif (evt.data.element && !evt.data.element.isReadOnly() && evt.data.element.getName() === 'img') {\n\t\t\t\tevt.data.dialog = pluginName;\n\t\t\t\teditorInstance.getSelection().selectElement(evt.data.element);\n\t\t\t}\n\t\t});\n\t\tif (editorInstance.addMenuItem) {\n\t\t\teditorInstance.addMenuGroup('imageToBase64Group');\n\t\t\teditorInstance.addMenuItem('imageToBase64Item', {\n\t\t\t\tlabel: editorInstance.lang.common.image,\n\t\t\t\ticon: this.path + 'icons/base64image.png',\n\t\t\t\tcommand: pluginName,\n\t\t\t\tgroup: 'imageToBase64Group'\n\t\t\t});\n\t\t}\n\t\tif (editorInstance.contextMenu) {\n\t\t\teditorInstance.contextMenu.addListener(function (element, selection) {\n\t\t\t\tif (element && element.getName() === 'img') {\n\t\t\t\t\teditorInstance.getSelection().selectElement(element);\n\t\t\t\t\treturn { imageToBase64Item: CKEDITOR.TRISTATE_ON };\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t}\n});\n"], "fixing_code": ["<?php\n/**\n * Tool file for the field type `File`.\n *\n * @package App\n *\n * @copyright YetiForce S.A.\n * @license   YetiForce Public License 5.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App\\Fields;\n\nuse App\\Log;\n\n/**\n * Tool class for the field type `File`.\n */\nclass File\n{\n\t/**\n\t * Temporary table name.\n\t */\n\tpublic const TABLE_NAME_TEMP = 'u_#__file_upload_temp';\n\n\t/**\n\t * Allowed formats.\n\t *\n\t * @var array\n\t */\n\tpublic static $allowedFormats = ['image' => ['jpeg', 'png', 'jpg', 'pjpeg', 'x-png', 'gif', 'bmp', 'x-ms-bmp', 'webp']];\n\n\t/**\n\t * Mime types.\n\t *\n\t * @var string[]\n\t */\n\tprivate static $mimeTypes;\n\n\t/**\n\t * What file types to validate by php injection.\n\t *\n\t * @var string[]\n\t */\n\tprivate static $phpInjection = ['image'];\n\n\t/**\n\t * Directory path used for temporary files.\n\t *\n\t * @var string\n\t */\n\tprivate static $tmpPath;\n\n\t/**\n\t * File path.\n\t *\n\t * @var string\n\t */\n\tprivate $path;\n\n\t/**\n\t * File extension.\n\t *\n\t * @var string\n\t */\n\tprivate $ext;\n\n\t/**\n\t * File mime type.\n\t *\n\t * @var string\n\t */\n\tprivate $mimeType;\n\n\t/**\n\t * File short mime type.\n\t *\n\t * @var string\n\t */\n\tprivate $mimeShortType;\n\n\t/**\n\t * Size.\n\t *\n\t * @var int\n\t */\n\tprivate $size;\n\n\t/**\n\t * File content.\n\t *\n\t * @var string\n\t */\n\tprivate $content;\n\n\t/**\n\t * Error code.\n\t *\n\t * @var bool|int\n\t */\n\tprivate $error = false;\n\n\t/**\n\t * Last validate error.\n\t *\n\t * @var string\n\t */\n\tpublic $validateError = '';\n\n\t/**\n\t * Validate all files by code injection.\n\t *\n\t * @var bool\n\t */\n\tprivate $validateAllCodeInjection = false;\n\n\t/**\n\t * Load file instance from file info.\n\t *\n\t * @param array $fileInfo\n\t *\n\t * @return \\self\n\t */\n\tpublic static function loadFromInfo($fileInfo)\n\t{\n\t\t$instance = new self();\n\t\tforeach ($fileInfo as $key => $value) {\n\t\t\t$instance->{$key} = $fileInfo[$key];\n\t\t}\n\t\tif (isset($instance->name)) {\n\t\t\t$instance->name = trim(\\App\\Purifier::purify($instance->name));\n\t\t}\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from request.\n\t *\n\t * @param array $file\n\t *\n\t * @return \\self\n\t */\n\tpublic static function loadFromRequest($file)\n\t{\n\t\t$instance = new self();\n\t\t$instance->name = trim(\\App\\Purifier::purify($file['name']));\n\t\t$instance->path = $file['tmp_name'];\n\t\t$instance->size = $file['size'];\n\t\t$instance->error = $file['error'];\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from file path.\n\t *\n\t * @param string $path\n\t *\n\t * @return \\self\n\t */\n\tpublic static function loadFromPath(string $path)\n\t{\n\t\t$instance = new self();\n\t\t$instance->name = trim(\\App\\Purifier::purify(basename($path)));\n\t\t$instance->path = $path;\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from base string.\n\t *\n\t * @param string $contents\n\t * @param array  $param\n\t *\n\t * @return \\self|null\n\t */\n\tpublic static function loadFromBase(string $contents, array $param = []): ?self\n\t{\n\t\t$result = explode(',', $contents, 2);\n\t\t$contentType = $isBase64 = false;\n\t\tif (2 === \\count($result)) {\n\t\t\t[$metadata, $data] = $result;\n\t\t\tforeach (explode(';', $metadata) as $cur) {\n\t\t\t\tif ('base64' === $cur) {\n\t\t\t\t\t$isBase64 = true;\n\t\t\t\t} elseif ('data:' === substr($cur, 0, 5)) {\n\t\t\t\t\t$contentType = str_replace('data:', '', $cur);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$data = $result[0];\n\t\t}\n\t\t$data = rawurldecode($data);\n\t\t$rawData = $isBase64 ? base64_decode($data) : $data;\n\t\tif (\\strlen($rawData) < 12) {\n\t\t\tLog::error('Incorrect content value: ' . $contents, __CLASS__);\n\t\t\treturn null;\n\t\t}\n\t\treturn static::loadFromContent($rawData, false, array_merge($param, ['mimeType' => $contentType]));\n\t}\n\n\t/**\n\t * Load file instance from content.\n\t *\n\t * @param string   $contents\n\t * @param string   $name\n\t * @param string[] $param\n\t *\n\t * @return bool|\\self\n\t */\n\tpublic static function loadFromContent(string $contents, $name = false, array $param = [])\n\t{\n\t\tif (empty($contents)) {\n\t\t\tLog::warning(\"Empty content, unable to create file: $name | Size: \" . \\strlen($contents), __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tstatic::initMimeTypes();\n\t\t$extension = 'tmp';\n\t\tif (empty($name)) {\n\t\t\tif (!empty($param['mimeType']) && !($extension = array_search($param['mimeType'], self::$mimeTypes))) {\n\t\t\t\t[, $extension] = explode('/', $param['mimeType']);\n\t\t\t}\n\t\t\t$name = uniqid() . '.' . $extension;\n\t\t} elseif ('tmp' === $extension) {\n\t\t\tif (($fileExt = pathinfo($name, PATHINFO_EXTENSION)) && isset(self::$mimeTypes[$fileExt])) {\n\t\t\t\t$extension = $fileExt;\n\t\t\t\tif (isset($param['mimeType']) && $param['mimeType'] !== self::$mimeTypes[$fileExt]) {\n\t\t\t\t\tLog::error(\"Invalid file content type File: $name  | {$param['mimeType']} <> \" . self::$mimeTypes[$fileExt], __CLASS__);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} elseif (!empty($param['mimeType']) && !($extension = array_search($param['mimeType'], self::$mimeTypes))) {\n\t\t\t\t[, $extension] = explode('/', $param['mimeType']);\n\t\t\t}\n\t\t}\n\t\t$path = tempnam(static::getTmpPath(), 'YFF');\n\t\tif (!file_put_contents($path, $contents)) {\n\t\t\tLog::error(\"Error while saving the file: $path | Size: \" . \\strlen($contents), __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tif (mb_strlen($name) > 180) {\n\t\t\t$name = \\App\\TextParser::textTruncate($name, 180, false) . '_' . uniqid() . \".$extension\";\n\t\t}\n\t\t$instance = new self();\n\t\t$instance->name = trim(\\App\\Purifier::purify($name));\n\t\t$instance->path = $path;\n\t\t$instance->ext = $extension;\n\t\tforeach ($param as $key => $value) {\n\t\t\t$instance->{$key} = $value;\n\t\t}\n\t\treturn $instance;\n\t}\n\n\t/**\n\t * Load file instance from url.\n\t *\n\t * @param string   $url\n\t * @param string[] $param\n\t *\n\t * @return self|bool\n\t */\n\tpublic static function loadFromUrl($url, $param = [])\n\t{\n\t\tif (empty($url)) {\n\t\t\tLog::warning('No url: ' . $url, __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tif (!\\App\\RequestUtil::isNetConnection()) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\t\\App\\Log::beginProfile(\"GET|File::loadFromUrl|{$url}\", __NAMESPACE__);\n\t\t\t$response = (new \\GuzzleHttp\\Client(\\App\\RequestHttp::getOptions()))->request('GET', $url, ['timeout' => 5, 'connect_timeout' => 1]);\n\t\t\t\\App\\Log::endProfile(\"GET|File::loadFromUrl|{$url}\", __NAMESPACE__);\n\t\t\tif (200 !== $response->getStatusCode()) {\n\t\t\t\tLog::warning('Error when downloading content: ' . $url . ' | Status code: ' . $response->getStatusCode(), __CLASS__);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$contents = $response->getBody()->getContents();\n\t\t\t$param['mimeType'] = explode(';', $response->getHeaderLine('Content-Type'))[0];\n\t\t\t$param['size'] = \\strlen($contents);\n\t\t} catch (\\Throwable $exc) {\n\t\t\tLog::warning('Error when downloading content: ' . $url . ' | ' . $exc->getMessage(), __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\tif (empty($contents)) {\n\t\t\tLog::warning('Url does not contain content: ' . $url, __CLASS__);\n\t\t\treturn false;\n\t\t}\n\t\treturn static::loadFromContent($contents, static::sanitizeFileNameFromUrl($url), $param);\n\t}\n\n\t/**\n\t * Get size.\n\t *\n\t * @return int\n\t */\n\tpublic function getSize()\n\t{\n\t\tif (empty($this->size)) {\n\t\t\t$this->size = filesize($this->path);\n\t\t}\n\t\treturn $this->size;\n\t}\n\n\t/**\n\t * Function to sanitize the upload file name when the file name is detected to have bad extensions.\n\t *\n\t * @return string\n\t */\n\tpublic function getSanitizeName()\n\t{\n\t\treturn static::sanitizeUploadFileName($this->name);\n\t}\n\n\t/**\n\t * Get file name.\n\t *\n\t * @param bool $decode\n\t *\n\t * @return string\n\t */\n\tpublic function getName(bool $decode = false)\n\t{\n\t\treturn $decode ? \\App\\Purifier::decodeHtml($this->name) : $this->name;\n\t}\n\n\t/**\n\t * Get mime type.\n\t *\n\t * @return string\n\t */\n\tpublic function getMimeType()\n\t{\n\t\tif (empty($this->mimeType)) {\n\t\t\tstatic::initMimeTypes();\n\t\t\t$extension = $this->getExtension(true);\n\t\t\tif (isset(static::$mimeTypes[$extension])) {\n\t\t\t\t$this->mimeType = static::$mimeTypes[$extension];\n\t\t\t} elseif (\\function_exists('mime_content_type')) {\n\t\t\t\t$this->mimeType = mime_content_type($this->path);\n\t\t\t} elseif (\\function_exists('finfo_open')) {\n\t\t\t\t$finfo = finfo_open(FILEINFO_MIME);\n\t\t\t\t$this->mimeType = finfo_file($finfo, $this->path);\n\t\t\t\tfinfo_close($finfo);\n\t\t\t} else {\n\t\t\t\t$this->mimeType = 'application/octet-stream';\n\t\t\t}\n\t\t}\n\t\treturn $this->mimeType;\n\t}\n\n\t/**\n\t * Get short mime type.\n\t *\n\t * @param int $type 0 or 1\n\t *\n\t * @return string\n\t */\n\tpublic function getShortMimeType($type = 1)\n\t{\n\t\tif (empty($this->mimeShortType)) {\n\t\t\t$this->mimeShortType = explode('/', $this->getMimeType());\n\t\t}\n\t\treturn $this->mimeShortType[$type];\n\t}\n\n\t/**\n\t * Get file extension.\n\t *\n\t * @param mixed $fromName\n\t *\n\t * @return string\n\t */\n\tpublic function getExtension($fromName = false)\n\t{\n\t\tif (isset($this->ext)) {\n\t\t\treturn $this->ext;\n\t\t}\n\t\tif ($fromName) {\n\t\t\t$extension = explode('.', $this->name);\n\t\t\treturn $this->ext = strtolower(array_pop($extension));\n\t\t}\n\t\treturn $this->ext = strtolower(pathinfo($this->path, PATHINFO_EXTENSION));\n\t}\n\n\t/**\n\t * Get file path.\n\t *\n\t * @return string\n\t */\n\tpublic function getPath(): string\n\t{\n\t\treturn $this->path;\n\t}\n\n\t/**\n\t * Get file encoding.\n\t *\n\t * @param array|null $list\n\t *\n\t * @return string\n\t */\n\tpublic function getEncoding(?array $list = null): string\n\t{\n\t\treturn \\strtoupper(mb_detect_encoding($this->getContents(), ($list ?? mb_list_encodings()), true));\n\t}\n\n\t/**\n\t * Get directory path.\n\t *\n\t * @return string\n\t */\n\tpublic function getDirectoryPath()\n\t{\n\t\treturn pathinfo($this->getPath(), PATHINFO_DIRNAME);\n\t}\n\n\t/**\n\t * Validate whether the file is safe.\n\t *\n\t * @param string|null $type\n\t *\n\t * @throws \\Exception\n\t *\n\t * @return bool\n\t */\n\tpublic function validate(?string $type = null): bool\n\t{\n\t\t$return = true;\n\t\ttry {\n\t\t\tif ($type && $this->getShortMimeType(0) !== $type) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_FORMAT');\n\t\t\t}\n\t\t\t$this->checkFile();\n\t\t\tif (!empty($this->validateAllowedFormat)) {\n\t\t\t\t$this->validateFormat();\n\t\t\t}\n\t\t\t$this->validateCodeInjection();\n\t\t\tif (($type && 'image' === $type) || 'image' === $this->getShortMimeType(0)) {\n\t\t\t\t$this->validateImage();\n\t\t\t}\n\t\t} catch (\\Exception $e) {\n\t\t\t$return = false;\n\t\t\t$message = $e->getMessage();\n\t\t\tif (false === strpos($message, '||')) {\n\t\t\t\t$message = \\App\\Language::translateSingleMod($message, 'Other.Exceptions');\n\t\t\t} else {\n\t\t\t\t$params = explode('||', $message);\n\t\t\t\t$message = \\call_user_func_array('vsprintf', [\\App\\Language::translateSingleMod(array_shift($params), 'Other.Exceptions'), $params]);\n\t\t\t}\n\t\t\t$this->validateError = $message;\n\t\t\tLog::error(\"Error during file validation: {$this->getName()} | Size: {$this->getSize()}\\n {$e->__toString()}\", __CLASS__);\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Validate and secure the file.\n\t *\n\t * @param string|null $type\n\t *\n\t * @return bool\n\t */\n\tpublic function validateAndSecure(?string $type = null): bool\n\t{\n\t\tif ($this->validate($type)) {\n\t\t\treturn true;\n\t\t}\n\t\t$reValidate = false;\n\t\tif (static::secureFile($this)) {\n\t\t\t$this->size = filesize($this->path);\n\t\t\t$this->content = file_get_contents($this->path);\n\t\t\t$reValidate = true;\n\t\t}\n\t\tif ($reValidate && $this->validate($type)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Validate image content.\n\t *\n\t * @throws \\App\\Exceptions\\DangerousFile\n\t *\n\t * @return bool\n\t */\n\tpublic function validateImageContent(): bool\n\t{\n\t\t$returnVal = false;\n\t\tif (\\extension_loaded('imagick')) {\n\t\t\ttry {\n\t\t\t\t$img = new \\imagick($this->path);\n\t\t\t\t$returnVal = $img->valid();\n\t\t\t\t$img->clear();\n\t\t\t\t$img->destroy();\n\t\t\t} catch (\\ImagickException $e) {\n\t\t\t\t$this->validateError = $e->getMessage();\n\t\t\t\t$returnVal = false;\n\t\t\t}\n\t\t} else {\n\t\t\t$img = \\imagecreatefromstring($this->getContents());\n\t\t\tif (false !== $img) {\n\t\t\t\t$returnVal = true;\n\t\t\t\t\\imagedestroy($img);\n\t\t\t}\n\t\t}\n\t\treturn $returnVal;\n\t}\n\n\t/**\n\t * Basic check file.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function checkFile()\n\t{\n\t\tif (false !== $this->error && UPLOAD_ERR_OK != $this->error) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ERROR_REQUEST||' . self::getErrorMessage($this->error));\n\t\t}\n\t\tif (empty($this->name)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_EMPTY_NAME');\n\t\t}\n\t\tif (!$this->validateInjection($this->name)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_NAME');\n\t\t}\n\t\tif (0 === $this->getSize()) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_SIZE');\n\t\t}\n\t}\n\n\t/**\n\t * Validate format.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function validateFormat()\n\t{\n\t\tif ($this->validateAllowedFormat !== $this->getShortMimeType(0)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_MIME_TYPE');\n\t\t}\n\t\tif (isset(self::$allowedFormats[$this->validateAllowedFormat]) && !\\in_array($this->getShortMimeType(1), self::$allowedFormats[$this->validateAllowedFormat])) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_ILLEGAL_FORMAT');\n\t\t}\n\t}\n\n\t/**\n\t * Validate image.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function validateImage()\n\t{\n\t\tif (!getimagesize($this->path)) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_IMAGE');\n\t\t}\n\t\tif (preg_match('[\\x01-\\x08\\x0c-\\x1f]', $this->getContents())) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_IMAGE');\n\t\t}\n\t\t$this->validateCodeInjectionInMetadata();\n\t\tif (!$this->validateImageContent()) {\n\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_WRONG_IMAGE ||' . $this->validateError);\n\t\t}\n\t}\n\n\t/**\n\t * Validate code injection.\n\t *\n\t * @throws \\Exception\n\t */\n\tprivate function validateCodeInjection()\n\t{\n\t\t$shortMimeType = $this->getShortMimeType(0);\n\t\tif ($this->validateAllCodeInjection || \\in_array($shortMimeType, static::$phpInjection)) {\n\t\t\t$contents = $this->getContents();\n\t\t\tif ((1 === preg_match('/(<\\?php?(.*?))/si', $contents)\n\t\t\t|| false !== stripos($contents, '<?=')\n\t\t\t|| false !== stripos($contents, '<? ')) && $this->searchCodeInjection()\n\t\t\t) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Search code injection in content.\n\t *\n\t * @return bool\n\t */\n\tprivate function searchCodeInjection(): bool\n\t{\n\t\tif (!\\function_exists('token_get_all')) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\t$tokens = token_get_all($this->getContents(), TOKEN_PARSE);\n\t\t\tforeach ($tokens as $token) {\n\t\t\t\tswitch (\\is_array($token) ? $token[0] : $token) {\n\t\t\t\t\t\tcase T_COMMENT:\n\t\t\t\t\t\tcase T_DOC_COMMENT:\n\t\t\t\t\t\tcase T_WHITESPACE:\n\t\t\t\t\t\tcase T_CURLY_OPEN:\n\t\t\t\t\t\tcase T_OPEN_TAG:\n\t\t\t\t\t\tcase T_CLOSE_TAG:\n\t\t\t\t\t\tcase T_INLINE_HTML:\n\t\t\t\t\t\tcase T_DOLLAR_OPEN_CURLY_BRACES:\n\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\tcase T_DOUBLE_COLON:\n\t\t\t\t\t\tcase T_ABSTRACT:\n\t\t\t\t\t\tcase T_ARRAY:\n\t\t\t\t\t\tcase T_AS:\n\t\t\t\t\t\tcase T_BREAK:\n\t\t\t\t\t\tcase T_CALLABLE:\n\t\t\t\t\t\tcase T_CASE:\n\t\t\t\t\t\tcase T_CATCH:\n\t\t\t\t\t\tcase T_CLASS:\n\t\t\t\t\t\tcase T_CLONE:\n\t\t\t\t\t\tcase T_CONTINUE:\n\t\t\t\t\t\tcase T_DEFAULT:\n\t\t\t\t\t\tcase T_ECHO:\n\t\t\t\t\t\tcase T_ELSE:\n\t\t\t\t\t\tcase T_ELSEIF:\n\t\t\t\t\t\tcase T_EMPTY:\n\t\t\t\t\t\tcase T_ENDIF:\n\t\t\t\t\t\tcase T_ENDSWITCH:\n\t\t\t\t\t\tcase T_ENDWHILE:\n\t\t\t\t\t\tcase T_EXIT:\n\t\t\t\t\t\tcase T_EXTENDS:\n\t\t\t\t\t\tcase T_FINAL:\n\t\t\t\t\t\tcase T_FINALLY:\n\t\t\t\t\t\tcase T_FOREACH:\n\t\t\t\t\t\tcase T_FUNCTION:\n\t\t\t\t\t\tcase T_GLOBAL:\n\t\t\t\t\t\tcase T_IF:\n\t\t\t\t\t\tcase T_IMPLEMENTS:\n\t\t\t\t\t\tcase T_INCLUDE:\n\t\t\t\t\t\tcase T_INCLUDE_ONCE:\n\t\t\t\t\t\tcase T_INSTANCEOF:\n\t\t\t\t\t\tcase T_INSTEADOF:\n\t\t\t\t\t\tcase T_INTERFACE:\n\t\t\t\t\t\tcase T_ISSET:\n\t\t\t\t\t\tcase T_LOGICAL_AND:\n\t\t\t\t\t\tcase T_LOGICAL_OR:\n\t\t\t\t\t\tcase T_LOGICAL_XOR:\n\t\t\t\t\t\tcase T_NAMESPACE:\n\t\t\t\t\t\tcase T_NEW:\n\t\t\t\t\t\tcase T_PRIVATE:\n\t\t\t\t\t\tcase T_PROTECTED:\n\t\t\t\t\t\tcase T_PUBLIC:\n\t\t\t\t\t\tcase T_REQUIRE:\n\t\t\t\t\t\tcase T_REQUIRE_ONCE:\n\t\t\t\t\t\tcase T_RETURN:\n\t\t\t\t\t\tcase T_STATIC:\n\t\t\t\t\t\tcase T_THROW:\n\t\t\t\t\t\tcase T_TRAIT:\n\t\t\t\t\t\tcase T_TRY:\n\t\t\t\t\t\tcase T_UNSET:\n\t\t\t\t\t\tcase T_USE:\n\t\t\t\t\t\tcase T_VAR:\n\t\t\t\t\t\tcase T_WHILE:\n\t\t\t\t\t\tcase T_YIELD:\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$text = \\is_array($token) ? $token[1] : $token;\n\t\t\t\t\t\t\tif (\\function_exists($text) || \\defined($text)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t} catch (\\Throwable $e) {\n\t\t\tLog::warning($e->getMessage(), __METHOD__);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Validate code injection in metadata.\n\t *\n\t * @throws \\App\\Exceptions\\DangerousFile\n\t */\n\tprivate function validateCodeInjectionInMetadata()\n\t{\n\t\tif (\\extension_loaded('imagick')) {\n\t\t\ttry {\n\t\t\t\t$img = new \\imagick($this->path);\n\t\t\t\t$this->validateInjection($img->getImageProperties());\n\t\t\t} catch (\\Throwable $e) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION', $e->getCode(), $e);\n\t\t\t}\n\t\t} elseif (\n\t\t\t\\function_exists('exif_read_data')\n\t\t\t&& \\in_array($this->getMimeType(), ['image/jpeg', 'image/tiff'])\n\t\t\t&& \\in_array(exif_imagetype($this->path), [IMAGETYPE_JPEG, IMAGETYPE_TIFF_II, IMAGETYPE_TIFF_MM])\n\t\t) {\n\t\t\t$imageSize = getimagesize($this->path, $imageInfo);\n\t\t\ttry {\n\t\t\t\tif (\n\t\t\t\t\t$imageSize\n\t\t\t\t\t&& (empty($imageInfo['APP1']) || 0 === strpos($imageInfo['APP1'], 'Exif'))\n\t\t\t\t\t&& ($exifData = exif_read_data($this->path)) && !$this->validateInjection($exifData)\n\t\t\t\t) {\n\t\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION');\n\t\t\t\t}\n\t\t\t} catch (\\Throwable $e) {\n\t\t\t\tthrow new \\App\\Exceptions\\DangerousFile('ERR_FILE_CODE_INJECTION', $e->getCode(), $e);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate injection.\n\t *\n\t * @param string|array $data\n\t *\n\t * @return bool\n\t */\n\tprivate function validateInjection($data): bool\n\t{\n\t\t$return = true;\n\t\tif (\\is_array($data)) {\n\t\t\tforeach ($data as $value) {\n\t\t\t\tif (!$this->validateInjection($value)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (1 === preg_match('/(<\\?php?(.*?))/i', $data) || false !== stripos($data, '<?=') || false !== stripos($data, '<? ')) {\n\t\t\t\t$return = false;\n\t\t\t} else {\n\t\t\t\t\\App\\Purifier::purifyHtmlEventAttributes($data);\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Get file ontent.\n\t *\n\t * @return string\n\t */\n\tpublic function getContents()\n\t{\n\t\tif (empty($this->content)) {\n\t\t\t$this->content = file_get_contents($this->path);\n\t\t}\n\t\treturn $this->content;\n\t}\n\n\t/**\n\t * Move file.\n\t *\n\t * @param string $target\n\t *\n\t * @return bool\n\t */\n\tpublic function moveFile($target)\n\t{\n\t\tif (is_uploaded_file($this->path)) {\n\t\t\t$uploadStatus = move_uploaded_file($this->path, $target);\n\t\t} else {\n\t\t\t$uploadStatus = rename($this->path, $target);\n\t\t}\n\t\t$this->path = $target;\n\t\treturn $uploadStatus;\n\t}\n\n\t/**\n\t * Delete file.\n\t *\n\t * @return bool\n\t */\n\tpublic function delete()\n\t{\n\t\tif (file_exists($this->path)) {\n\t\t\treturn unlink($this->path);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Generate file hash.\n\t *\n\t * @param bool   $checkInAttachments\n\t * @param string $uploadFilePath\n\t *\n\t * @return string File hash sha256\n\t */\n\tpublic function generateHash(bool $checkInAttachments = false, string $uploadFilePath = '')\n\t{\n\t\tif ($checkInAttachments) {\n\t\t\t$hash = hash('sha1', $this->getContents()) . \\App\\Encryption::generatePassword(10);\n\t\t\tif ($uploadFilePath && file_exists($uploadFilePath . $hash)) {\n\t\t\t\t$hash = $this->generateHash($checkInAttachments);\n\t\t\t}\n\t\t\treturn $hash;\n\t\t}\n\t\treturn hash('sha256', $this->getContents() . \\App\\Encryption::generatePassword(10));\n\t}\n\n\t/**\n\t * Function to sanitize the upload file name when the file name is detected to have bad extensions.\n\t *\n\t * @param string      $fileName          File name to be sanitized\n\t * @param bool|string $badFileExtensions\n\t *\n\t * @return string\n\t */\n\tpublic static function sanitizeUploadFileName($fileName, $badFileExtensions = false)\n\t{\n\t\tif (!$badFileExtensions) {\n\t\t\t$badFileExtensions = \\App\\Config::main('upload_badext');\n\t\t}\n\t\t$fileName = preg_replace('/\\s+/', '_', \\App\\Utils::sanitizeSpecialChars($fileName));\n\t\t$fileName = rtrim($fileName, '\\\\/<>?*:\"<>|');\n\n\t\t$fileNameParts = explode('.', $fileName);\n\t\t$badExtensionFound = false;\n\t\tforeach ($fileNameParts as $key => &$partOfFileName) {\n\t\t\tif (\\in_array(strtolower($partOfFileName), $badFileExtensions)) {\n\t\t\t\t$badExtensionFound = true;\n\t\t\t\t$fileNameParts[$key] = $partOfFileName;\n\t\t\t}\n\t\t}\n\t\t$newFileName = implode('.', $fileNameParts);\n\t\tif ($badExtensionFound) {\n\t\t\t$newFileName .= '.txt';\n\t\t}\n\t\treturn $newFileName;\n\t}\n\n\t/**\n\t * Function to get base name of file.\n\t *\n\t * @param string $url\n\t *\n\t * @return string\n\t */\n\tpublic static function sanitizeFileNameFromUrl($url)\n\t{\n\t\t$partsUrl = parse_url($url);\n\t\treturn static::sanitizeUploadFileName(basename($partsUrl['path']));\n\t}\n\n\t/**\n\t * Get temporary directory path.\n\t *\n\t * @return string\n\t */\n\tpublic static function getTmpPath()\n\t{\n\t\tif (isset(self::$tmpPath)) {\n\t\t\treturn self::$tmpPath;\n\t\t}\n\t\t$hash = hash('crc32', ROOT_DIRECTORY);\n\t\tif (!empty(ini_get('upload_tmp_dir')) && is_writable(ini_get('upload_tmp_dir'))) {\n\t\t\tself::$tmpPath = ini_get('upload_tmp_dir') . \\DIRECTORY_SEPARATOR . 'YetiForceTemp' . $hash . \\DIRECTORY_SEPARATOR;\n\t\t\tif (!is_dir(self::$tmpPath)) {\n\t\t\t\tmkdir(self::$tmpPath, 0755);\n\t\t\t}\n\t\t} elseif (is_writable(sys_get_temp_dir())) {\n\t\t\tself::$tmpPath = sys_get_temp_dir() . \\DIRECTORY_SEPARATOR . 'YetiForceTemp' . $hash . \\DIRECTORY_SEPARATOR;\n\t\t\tif (!is_dir(self::$tmpPath)) {\n\t\t\t\tmkdir(self::$tmpPath, 0755);\n\t\t\t}\n\t\t} elseif (is_writable(ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . 'cache' . \\DIRECTORY_SEPARATOR . 'upload')) {\n\t\t\tself::$tmpPath = ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . 'cache' . \\DIRECTORY_SEPARATOR . 'upload' . \\DIRECTORY_SEPARATOR;\n\t\t}\n\t\treturn self::$tmpPath;\n\t}\n\n\t/**\n\t * Init mime types.\n\t */\n\tpublic static function initMimeTypes()\n\t{\n\t\tif (empty(self::$mimeTypes)) {\n\t\t\tself::$mimeTypes = require ROOT_DIRECTORY . '/config/mimetypes.php';\n\t\t}\n\t}\n\n\t/**\n\t * Get mime content type ex. image/png.\n\t *\n\t * @param string $fileName\n\t *\n\t * @return string\n\t */\n\tpublic static function getMimeContentType($fileName)\n\t{\n\t\tstatic::initMimeTypes();\n\t\t$extension = explode('.', $fileName);\n\t\t$extension = strtolower(array_pop($extension));\n\t\tif (isset(self::$mimeTypes[$extension])) {\n\t\t\t$mimeType = self::$mimeTypes[$extension];\n\t\t} elseif (\\function_exists('mime_content_type')) {\n\t\t\t$mimeType = mime_content_type($fileName);\n\t\t} elseif (\\function_exists('finfo_open')) {\n\t\t\t$finfo = finfo_open(FILEINFO_MIME);\n\t\t\t$mimeType = finfo_file($finfo, $fileName);\n\t\t\tfinfo_close($finfo);\n\t\t} else {\n\t\t\t$mimeType = 'application/octet-stream';\n\t\t}\n\t\treturn $mimeType;\n\t}\n\n\t/**\n\t * Create document from string.\n\t *\n\t * @param string $contents\n\t * @param array  $param\n\t *\n\t * @return bool|self\n\t */\n\tpublic static function saveFromString(string $contents, array $param = [])\n\t{\n\t\t$fileInstance = static::loadFromBase($contents, $param);\n\t\tif ($fileInstance->validateAndSecure()) {\n\t\t\treturn $fileInstance;\n\t\t}\n\t\t$fileInstance->delete();\n\t\treturn false;\n\t}\n\n\t/**\n\t * Create document from url.\n\t *\n\t * @param string $url    Url\n\t * @param array  $params\n\t *\n\t * @return array|bool\n\t */\n\tpublic static function saveFromUrl($url, $params = [])\n\t{\n\t\t$fileInstance = static::loadFromUrl($url, $params['param'] ?? []);\n\t\tif (!$fileInstance) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($fileInstance->validateAndSecure() && ($id = static::saveFromContent($fileInstance, $params))) {\n\t\t\treturn $id;\n\t\t}\n\t\t$fileInstance->delete();\n\t\treturn false;\n\t}\n\n\t/**\n\t * Create document from content.\n\t *\n\t * @param \\self $file\n\t * @param array $params\n\t *\n\t * @throws \\Exception\n\t *\n\t * @return array|bool\n\t */\n\tpublic static function saveFromContent(self $file, $params = [])\n\t{\n\t\t$fileName = $file->getName();\n\t\t$fileNameLength = \\App\\TextParser::getTextLength($fileName);\n\t\t$record = \\Vtiger_Record_Model::getCleanInstance('Documents');\n\t\tif ($fileNameLength > ($maxLength = $record->getField('filename')->get('maximumlength'))) {\n\t\t\t$extLength = 0;\n\t\t\tif ($ext = $file->getExtension()) {\n\t\t\t\t$ext .= \".{$ext}\";\n\t\t\t\t$extLength = \\App\\TextParser::getTextLength($ext);\n\t\t\t\t$fileName = substr($fileName, 0, $fileNameLength - $extLength);\n\t\t\t}\n\t\t\t$fileName = \\App\\TextParser::textTruncate($fileName, $maxLength - $extLength, false) . $ext;\n\t\t}\n\t\t$fileName = \\App\\Purifier::decodeHtml(\\App\\Purifier::purify($fileName));\n\t\t$record->setData($params);\n\t\t$record->set('notes_title', $fileName);\n\t\t$record->set('filename', $fileName);\n\t\t$record->set('filestatus', 1);\n\t\t$record->set('filelocationtype', 'I');\n\t\t$record->file = [\n\t\t\t'name' => $fileName,\n\t\t\t'size' => $file->getSize(),\n\t\t\t'type' => $file->getMimeType(),\n\t\t\t'tmp_name' => $file->getPath(),\n\t\t\t'error' => 0,\n\t\t];\n\t\t$record->save();\n\t\t$file->delete();\n\t\tif (isset($record->ext['attachmentsId'])) {\n\t\t\treturn array_merge(['crmid' => $record->getId()], $record->ext);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Init storage file directory.\n\t *\n\t * @param string $suffix\n\t *\n\t * @return string\n\t */\n\tpublic static function initStorageFileDirectory($suffix = false)\n\t{\n\t\tif (!$filepath = \\App\\Config::module($suffix, 'storagePath')) {\n\t\t\t$filepath = 'storage' . \\DIRECTORY_SEPARATOR;\n\t\t}\n\t\tif ($suffix) {\n\t\t\t$filepath .= $suffix . \\DIRECTORY_SEPARATOR;\n\t\t}\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\t$year = date('Y');\n\t\t$month = date('F');\n\t\t$day = date('j');\n\t\t$filepath .= $year;\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\t$filepath .= \\DIRECTORY_SEPARATOR . $month;\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\tif ($day > 0 && $day <= 7) {\n\t\t\t$week = 'week1';\n\t\t} elseif ($day > 7 && $day <= 14) {\n\t\t\t$week = 'week2';\n\t\t} elseif ($day > 14 && $day <= 21) {\n\t\t\t$week = 'week3';\n\t\t} elseif ($day > 21 && $day <= 28) {\n\t\t\t$week = 'week4';\n\t\t} else {\n\t\t\t$week = 'week5';\n\t\t}\n\t\t$filepath .= \\DIRECTORY_SEPARATOR . $week;\n\t\tif (!is_dir($filepath)) { //create new folder\n\t\t\tmkdir($filepath, 0755, true);\n\t\t}\n\t\treturn str_replace('\\\\', '/', $filepath . \\DIRECTORY_SEPARATOR);\n\t}\n\n\t/**\n\t * Get error message by code.\n\t *\n\t * @param int $code\n\t *\n\t * @return string\n\t */\n\tpublic static function getErrorMessage(int $code): string\n\t{\n\t\tswitch ($code) {\n\t\t\tcase UPLOAD_ERR_INI_SIZE:\n\t\t\t\t$message = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_FORM_SIZE:\n\t\t\t\t$message = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_PARTIAL:\n\t\t\t\t$message = 'The uploaded file was only partially uploaded';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_NO_FILE:\n\t\t\t\t$message = 'No file was uploaded';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_NO_TMP_DIR:\n\t\t\t\t$message = 'Missing a temporary folder';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_CANT_WRITE:\n\t\t\t\t$message = 'Failed to write file to disk';\n\t\t\t\tbreak;\n\t\t\tcase UPLOAD_ERR_EXTENSION:\n\t\t\t\t$message = 'File upload stopped by extension';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$message = 'Unknown upload error | Code: ' . $code;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Get image base data.\n\t *\n\t * @param string $path\n\t *\n\t * @return string\n\t */\n\tpublic static function getImageBaseData($path)\n\t{\n\t\tif ($path) {\n\t\t\t$mime = static::getMimeContentType($path);\n\t\t\t$mimeParts = explode('/', $mime);\n\t\t\tif ($mime && file_exists($path) && isset(static::$allowedFormats[$mimeParts[0]]) && \\in_array($mimeParts[1], static::$allowedFormats[$mimeParts[0]])) {\n\t\t\t\treturn \"data:$mime;base64,\" . base64_encode(file_get_contents($path));\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Check if give path is writeable.\n\t *\n\t * @param string $path\n\t * @param bool   $absolutePaths\n\t *\n\t * @return bool\n\t */\n\tpublic static function isWriteable(string $path, bool $absolutePaths = false): bool\n\t{\n\t\tif (!$absolutePaths) {\n\t\t\t$path = ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . $path;\n\t\t}\n\t\tif (is_dir($path)) {\n\t\t\treturn static::isDirWriteable($path);\n\t\t}\n\t\treturn is_writable($path);\n\t}\n\n\t/**\n\t * Check if given directory is writeable.\n\t * NOTE: The check is made by trying to create a random file in the directory.\n\t *\n\t * @param string $dirPath\n\t *\n\t * @return bool\n\t */\n\tpublic static function isDirWriteable($dirPath)\n\t{\n\t\tif (is_dir($dirPath)) {\n\t\t\tdo {\n\t\t\t\t$tmpFile = 'tmpfile' . time() . '-' . random_int(1, 1000) . '.tmp';\n\t\t\t\t// Continue the loop unless we find a name that does not exists already.\n\t\t\t\t$useFilename = \"$dirPath/$tmpFile\";\n\t\t\t\tif (!file_exists($useFilename)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (true);\n\t\t\t$fh = fopen($useFilename, 'a');\n\t\t\tif ($fh) {\n\t\t\t\tfclose($fh);\n\t\t\t\tunlink($useFilename);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Check if give URL exists.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic static function isExistsUrl($url)\n\t{\n\t\t\\App\\Log::beginProfile(\"GET|File::isExistsUrl|{$url}\", __NAMESPACE__);\n\t\ttry {\n\t\t\t$response = (new \\GuzzleHttp\\Client(\\App\\RequestHttp::getOptions()))->request('HEAD', $url, ['timeout' => 1, 'connect_timeout' => 1, 'verify' => false, 'http_errors' => false, 'allow_redirects' => false]);\n\t\t\t$status = \\in_array($response->getStatusCode(), [200, 302]);\n\t\t} catch (\\Throwable $th) {\n\t\t\t$status = false;\n\t\t}\n\t\t\\App\\Log::endProfile(\"GET|File::isExistsUrl|{$url}\", __NAMESPACE__);\n\t\t\\App\\Log::info(\"Checked URL: $url | Status: \" . $status, __CLASS__);\n\t\treturn $status;\n\t}\n\n\t/**\n\t * Get crm pathname or relative path.\n\t *\n\t * @param string $path       Absolute pathname\n\t * @param string $pathToTrim Path to trim\n\t *\n\t * @return string Local pathname\n\t */\n\tpublic static function getLocalPath(string $path, string $pathToTrim = ROOT_DIRECTORY): string\n\t{\n\t\tif (0 === strpos($path, $pathToTrim)) {\n\t\t\t$index = \\strlen($pathToTrim) + 1;\n\t\t\tif (strrpos($pathToTrim, '/') === \\strlen($pathToTrim) - 1) {\n\t\t\t\t--$index;\n\t\t\t}\n\t\t\t$path = substr($path, $index);\n\t\t}\n\t\treturn $path;\n\t}\n\n\t/**\n\t * Transform mulitiple uploaded file information into useful format.\n\t *\n\t * @param array $files $_FILES\n\t * @param bool  $top\n\t *\n\t * @return array\n\t */\n\tpublic static function transform(array $files, $top = true)\n\t{\n\t\t$rows = [];\n\t\tforeach ($files as $name => $file) {\n\t\t\t$subName = $top ? $file['name'] : $name;\n\t\t\tif (\\is_array($subName)) {\n\t\t\t\tforeach (array_keys($subName) as $key) {\n\t\t\t\t\t$rows[$name][$key] = [\n\t\t\t\t\t\t'name' => $file['name'][$key],\n\t\t\t\t\t\t'type' => $file['type'][$key],\n\t\t\t\t\t\t'tmp_name' => $file['tmp_name'][$key],\n\t\t\t\t\t\t'error' => $file['error'][$key],\n\t\t\t\t\t\t'size' => $file['size'][$key],\n\t\t\t\t\t];\n\t\t\t\t\t$rows[$name] = static::transform($rows[$name], false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$rows[$name] = $file;\n\t\t\t}\n\t\t}\n\t\treturn $rows;\n\t}\n\n\t/**\n\t * Delete data from the temporary table.\n\t *\n\t * @param string|string[] $keys\n\t *\n\t * @return int\n\t */\n\tpublic static function cleanTemp($keys)\n\t{\n\t\treturn \\App\\Db::getInstance()->createCommand()->delete(static::TABLE_NAME_TEMP, ['key' => $keys])->execute();\n\t}\n\n\t/**\n\t * Add an entry to the temporary table of files.\n\t *\n\t * @param array $params\n\t *\n\t * @return int\n\t */\n\tpublic function insertTempFile(array $params): int\n\t{\n\t\t$db = \\App\\Db::getInstance();\n\t\t$result = 0;\n\t\t$data = [\n\t\t\t'name' => $this->getName(true),\n\t\t\t'type' => $this->getMimeType(),\n\t\t\t'path' => null,\n\t\t\t'createdtime' => date('Y-m-d H:i:s'),\n\t\t\t'fieldname' => null,\n\t\t\t'key' => null,\n\t\t\t'crmid' => 0,\n\t\t];\n\t\tforeach ($data as $key => &$value) {\n\t\t\tif (isset($params[$key])) {\n\t\t\t\t$value = $params[$key];\n\t\t\t}\n\t\t}\n\t\tif ($db->createCommand()->insert(static::TABLE_NAME_TEMP, $data)->execute()) {\n\t\t\t$result = $db->getLastInsertID(static::TABLE_NAME_TEMP . '_id_seq');\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Secure image file.\n\t *\n\t * @param \\App\\Fields\\File $file\n\t *\n\t * @return bool\n\t */\n\tpublic static function secureFile(self $file): bool\n\t{\n\t\tif ('image' !== $file->getShortMimeType(0)) {\n\t\t\treturn false;\n\t\t}\n\t\t$result = false;\n\t\tif (\\extension_loaded('imagick')) {\n\t\t\ttry {\n\t\t\t\t$img = new \\imagick($file->getPath());\n\t\t\t\t$img->stripImage();\n\t\t\t\tswitch ($file->getExtension()) {\n\t\t\t\t\tcase 'jpg':\n\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\t\t$img->setImageCompression(\\Imagick::COMPRESSION_JPEG);\n\t\t\t\t\t\t$img->setImageCompressionQuality(99);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$img->writeImage($file->getPath());\n\t\t\t\t$img->clear();\n\t\t\t\t$img->destroy();\n\t\t\t\t$result = true;\n\t\t\t} catch (\\ImagickException $e) {\n\t\t\t\t$result = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (\\in_array($file->getExtension(), ['jpeg', 'png', 'gif', 'bmp', 'wbmp', 'gd2', 'webp'])) {\n\t\t\t\t$img = \\imagecreatefromstring($file->getContents());\n\t\t\t\tif (false !== $img) {\n\t\t\t\t\tswitch ($file->getExtension()) {\n\t\t\t\t\t\tcase 'jpg':\n\t\t\t\t\t\tcase 'jpeg':\n\t\t\t\t\t\t\t$result = \\imagejpeg($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'png':\n\t\t\t\t\t\t\t$result = \\imagepng($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'gif':\n\t\t\t\t\t\t\t$result = \\imagegif($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bmp':\n\t\t\t\t\t\t\t$result = \\imagebmp($img, $file->getPath());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\\imagedestroy($img);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Parse.\n\t *\n\t * @param array $value\n\t *\n\t * @return array\n\t */\n\tpublic static function parse(array $value)\n\t{\n\t\treturn array_reduce($value, function ($result, $item) {\n\t\t\tif (isset($item['key'])) {\n\t\t\t\t$result[$item['key']] = $item;\n\t\t\t}\n\t\t\treturn $result;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Get upload file details from db.\n\t *\n\t * @param string $key\n\t *\n\t * @return array\n\t */\n\tpublic static function getUploadFile(string $key)\n\t{\n\t\t$row = (new \\App\\Db\\Query())->from(static::TABLE_NAME_TEMP)->where(['key' => $key])->one();\n\t\treturn $row ?: [];\n\t}\n\n\t/**\n\t * Check is it an allowed directory.\n\t *\n\t * @param string $fullPath\n\t *\n\t * @return bool\n\t */\n\tpublic static function isAllowedDirectory(string $fullPath)\n\t{\n\t\treturn !(!is_readable($fullPath) || !is_dir($fullPath) || is_file($fullPath));\n\t}\n\n\t/**\n\t * Check is it an allowed file directory.\n\t *\n\t * @param string $fullPath\n\t *\n\t * @return bool\n\t */\n\tpublic static function isAllowedFileDirectory(string $fullPath)\n\t{\n\t\treturn !(!is_readable($fullPath) || is_dir($fullPath) || !is_file($fullPath));\n\t}\n\n\t/**\n\t * Creates a temporary file.\n\t *\n\t * @param string $prefix The prefix of the generated temporary filename Note: Windows uses only the first three characters of prefix\n\t * @param string $ext    File extension, default: .tmp\n\t *\n\t * @return string The new temporary filename (with path), or throw an exception on failure\n\t */\n\tpublic static function createTempFile(string $prefix = '', string $ext = 'tmp'): string\n\t{\n\t\treturn (new \\Symfony\\Component\\Filesystem\\Filesystem())->tempnam(self::getTmpPath(), $prefix, '.' . $ext);\n\t}\n\n\t/**\n\t * Delete files from record.\n\t *\n\t * @param \\Vtiger_Record_Model $recordModel\n\t */\n\tpublic static function deleteForRecord(\\Vtiger_Record_Model $recordModel)\n\t{\n\t\tforeach ($recordModel->getModule()->getFieldsByType(['multiAttachment', 'multiImage', 'image']) as $fieldModel) {\n\t\t\tif (!$recordModel->isEmpty($fieldModel->getName()) && !\\App\\Json::isEmpty($recordModel->get($fieldModel->getName()))) {\n\t\t\t\tforeach (\\App\\Json::decode($recordModel->get($fieldModel->getName())) as $file) {\n\t\t\t\t\t$path = ROOT_DIRECTORY . \\DIRECTORY_SEPARATOR . $file['path'];\n\t\t\t\t\tif (file_exists($path)) {\n\t\t\t\t\t\tunlink($path);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\\App\\Log::warning('Deleted file does not exist: ' . print_r($file, true));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n/**\n * Validator basic class.\n *\n * @package   App\n *\n * @license   YetiForce Public License 5.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @copyright YetiForce S.A.\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\n\nnamespace App;\n\n/**\n * Class Validator.\n */\nclass Validator\n{\n\t/**\n\t * Function verifies if given value can be recognized as bool.\n\t *\n\t * @param bool|int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function bool($input): bool\n\t{\n\t\treturn null !== filter_var($input, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);\n\t}\n\n\t/**\n\t * Function verifies if given value is standard text.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function standard(string $input): bool\n\t{\n\t\treturn preg_match('/^[\\-_a-zA-Z]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value contains only words or digits.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function alnum($input): bool\n\t{\n\t\treturn preg_match('/^[[:alnum:]_]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value contains only words, digits  or space.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function alnumSpace($input): bool\n\t{\n\t\treturn preg_match('/^[[:alnum:]_ ]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with default data format.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function date(string $input): bool\n\t{\n\t\treturn Fields\\Date::isValid($input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with user\u2019s date format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateInUserFormat(string $input, ?int $userId = null): bool\n\t{\n\t\tif (null === $userId) {\n\t\t\t$userId = User::getCurrentUserId();\n\t\t}\n\t\treturn Fields\\Date::isValid($input, User::getUserModel($userId)->getDetail('date_format'));\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with date time in ISO format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateTimeInIsoFormat(string $input): bool\n\t{\n\t\treturn preg_match('/^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with default time format.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function time(string $input): bool\n\t{\n\t\treturn preg_match('/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9]):([0-5][0-9])$/', $input);\n\t}\n\n\t/**\n\t *  Function verifies if given value is compatible with user\u2019s time format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function timeInUserFormat(string $input, ?int $userId = null): bool\n\t{\n\t\tif (null === $userId) {\n\t\t\t$userId = User::getCurrentUserId();\n\t\t}\n\t\tif ('12' === User::getUserModel($userId)->getDetail('hour_format')) {\n\t\t\t$pattern = '/^([0][0-9]|1[0-2]):([0-5][0-9])([ ]PM|[ ]AM|PM|AM)$/';\n\t\t} else {\n\t\t\t$pattern = '/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])$/';\n\t\t}\n\t\treturn preg_match($pattern, $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with default date and time format.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateTime(string $input): bool\n\t{\n\t\t$result = false;\n\t\tif (($arrInput = \\explode(' ', $input)) && 2 === \\count($arrInput)) {\n\t\t\t[$dateInput, $timeInput] = $arrInput;\n\t\t\t[$y, $m, $d] = Fields\\Date::explode($dateInput);\n\t\t\t$result = checkdate($m, $d, $y) && is_numeric($y) && is_numeric($m) && is_numeric($d)\n\t\t\t\t&& preg_match('/(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9]):([0-5][0-9])/', $timeInput);\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Function verifies if given value is compatible with user\u2019s  date and time format.\n\t *\n\t * @param string   $input\n\t * @param int|null $userId\n\t *\n\t * @return bool\n\t */\n\tpublic static function dateTimeInUserFormat(string $input, ?int $userId = null): bool\n\t{\n\t\t$result = false;\n\t\tif (($arrInput = \\explode(' ', $input, 2)) && 2 === \\count($arrInput)) {\n\t\t\t$userModel = User::getUserModel($userId ?? User::getCurrentUserId());\n\t\t\t[$dateInput, $timeInput] = $arrInput;\n\t\t\t[$y, $m, $d] = Fields\\Date::explode($dateInput, $userModel->getDetail('date_format'));\n\t\t\tif ('12' === $userModel->getDetail('hour_format')) {\n\t\t\t\t$pattern = '/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])(:([0-5][0-9]))?([ ]PM|[ ]AM|PM|AM)?$/';\n\t\t\t} else {\n\t\t\t\t$pattern = '/^(2[0-3]|[0][0-9]|1[0-9]):([0-5][0-9])(:([0-5][0-9]))?$/';\n\t\t\t}\n\t\t\t$result = checkdate($m, $d, $y) && is_numeric($y) && is_numeric($m) && is_numeric($d) && preg_match($pattern, $timeInput);\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Function verifies if given value is integer type.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function integer($input): bool\n\t{\n\t\treturn false !== filter_var($input, FILTER_VALIDATE_INT);\n\t}\n\n\t/**\n\t * Function verifies if given value is float type.\n\t *\n\t * @param float|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function float($input): bool\n\t{\n\t\treturn false !== filter_var($input, FILTER_VALIDATE_FLOAT);\n\t}\n\n\t/**\n\t * Check if floating point numbers are equal.\n\t *\n\t * @see https://www.php.net/manual/en/language.types.float.php\n\t *\n\t * @param float $value1\n\t * @param float $value2\n\t * @param int   $precision\n\t * @param mixed $rounding\n\t *\n\t * @return bool\n\t */\n\tpublic static function floatIsEqual(float $value1, float $value2, int $precision = 2, $rounding = true): bool\n\t{\n\t\tif ($rounding) {\n\t\t\t$value1 = round($value1, $precision);\n\t\t\t$value2 = round($value2, $precision);\n\t\t}\n\t\treturn 0 === bccomp($value1, $value2, $precision);\n\t}\n\n\t/**\n\t * Check if floating point numbers are equal. Get the precision of the number from the user's settings.\n\t *\n\t * @param float $value1\n\t * @param float $value2\n\t *\n\t * @return bool\n\t */\n\tpublic static function floatIsEqualUserCurrencyDecimals(float $value1, float $value2): bool\n\t{\n\t\treturn static::floatIsEqual($value1, $value2, (int) \\App\\User::getCurrentUserModel()->getDetail('no_of_currency_decimals'));\n\t}\n\n\t/**\n\t * Function verifies if given value is a natural number.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function naturalNumber($input): bool\n\t{\n\t\treturn preg_match('/^[0-9]+$/', $input);\n\t}\n\n\t/**\n\t * Function verifies if given value is a correct language tag.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function languageTag(string $input): bool\n\t{\n\t\treturn $input && explode('-', $input) === explode('_', \\Locale::acceptFromHttp($input));\n\t}\n\n\t/**\n\t * Function checks if its mysql type.\n\t *\n\t * @param string $dbType\n\t *\n\t * @return bool\n\t */\n\tpublic static function isMySQL(string $dbType): bool\n\t{\n\t\treturn 0 === stripos($dbType, 'mysql');\n\t}\n\n\t/**\n\t *  Function checks if given value is email.\n\t *\n\t * @param string $email\n\t *\n\t * @return bool\n\t */\n\tpublic static function email(string $email): bool\n\t{\n\t\treturn false !== filter_var($email, FILTER_VALIDATE_EMAIL, FILTER_FLAG_EMAIL_UNICODE) && $email === filter_var($email, FILTER_SANITIZE_EMAIL);\n\t}\n\n\t/**\n\t *  Function checks if given value is email.\n\t *\n\t * @param string|array $emails\n\t *\n\t * @return bool\n\t */\n\tpublic static function emails($emails): bool\n\t{\n\t\t$emails = \\is_string($emails) ? explode(',', $emails) : $emails;\n\t\tforeach ($emails as $email) {\n\t\t\tif ($email && !self::email($email)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Function checks if given value is url or domain.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic static function urlDomain(string $url): bool\n\t{\n\t\tif (false === strpos($url, '://')) {\n\t\t\treturn static::domain($url);\n\t\t}\n\t\treturn static::url($url);\n\t}\n\n\t/**\n\t * Function checks if given value is url.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic static function url(string $url): bool\n\t{\n\t\tif (mb_strlen($url) != \\strlen($url) && \\function_exists('idn_to_ascii') && \\defined('INTL_IDNA_VARIANT_UTS46')) {\n\t\t\t$url = preg_replace_callback('/:\\/\\/([^\\/]+)/', function ($matches) {\n\t\t\t\treturn '://' . idn_to_ascii($matches[1], IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n\t\t\t}, $url);\n\t\t}\n\t\treturn false !== filter_var($url, FILTER_VALIDATE_URL);\n\t}\n\n\t/**\n\t * Function checks if given value is domain.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function domain(string $input): bool\n\t{\n\t\tif (mb_strlen($input) != \\strlen($input) && \\function_exists('idn_to_ascii') && \\defined('INTL_IDNA_VARIANT_UTS46')) {\n\t\t\t$input = idn_to_ascii($input, IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);\n\t\t}\n\t\treturn false !== filter_var($input, FILTER_VALIDATE_DOMAIN, FILTER_FLAG_HOSTNAME);\n\t}\n\n\t/**\n\t * Function checks if given value is database type.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dbType(string $input): bool\n\t{\n\t\treturn isset((new Db())->schemaMap[$input]);\n\t}\n\n\t/**\n\t * Function checks if given value is correct database name (mysql).\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dbName(string $input): bool\n\t{\n\t\treturn preg_match('/^[^\\\\/?%*:|\\\\\\\"<>.\\s]{1,64}$/', $input);\n\t}\n\n\t/**\n\t * Function checks if given value is valid db user name.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dbUserName($input): bool\n\t{\n\t\treturn preg_match('/^[_a-zA-Z0-9.,:-]+$/', $input);\n\t}\n\n\t/**\n\t * Function checks if given value is port number.\n\t *\n\t * @param int $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function port($input): bool\n\t{\n\t\treturn preg_match('/^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/', $input);\n\t}\n\n\t/**\n\t * Function checks if given value is valid SQl input.\n\t *\n\t * @param int|string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function sql($input): bool\n\t{\n\t\treturn preg_match('/^[_a-zA-Z0-9.,:]+$/', $input);\n\t}\n\n\t/**\n\t * Check if input is an time period value.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function timePeriod($input): bool\n\t{\n\t\treturn preg_match('/^[0-9]{1,18}\\:(d|H|i){1}$/', $input);\n\t}\n\n\t/**\n\t * Check if input is an ip value.\n\t *\n\t * @param string|string[] $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function ip($input): bool\n\t{\n\t\t$input = \\is_array($input) ? $input : [$input];\n\t\t$result = true;\n\t\tforeach ($input as $ipAddress) {\n\t\t\tif (false === filter_var($ipAddress, FILTER_VALIDATE_IP)) {\n\t\t\t\t$result = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Function verifies if given value is text.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function text(string $input): bool\n\t{\n\t\treturn Purifier::decodeHtml(Purifier::purify($input)) === $input;\n\t}\n\n\t/**\n\t * Check directory name.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function dirName(string $input): bool\n\t{\n\t\treturn !preg_match('/[\\\\/:\\*\\?\"<>|]/', $input) && false === strpos($input, '.', -1);\n\t}\n\n\t/**\n\t * Check path.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function path(string $input): bool\n\t{\n\t\t$parts = explode('/', trim(str_replace(\\DIRECTORY_SEPARATOR, '/', $input), '/'));\n\t\treturn !array_filter($parts, function ($dir) {\n\t\t\treturn !self::dirName($dir);\n\t\t});\n\t}\n\n\t/**\n\t * Check base64.\n\t *\n\t * @param string $input\n\t *\n\t * @return bool\n\t */\n\tpublic static function base64(string $input): bool\n\t{\n\t\tif (empty($input)) {\n\t\t\treturn false;\n\t\t}\n\t\t$explode = explode(',', $input);\n\t\treturn 2 === \\count($explode) && 1 === preg_match('%^[a-zA-Z0-9/+]*={0,2}$%', $explode[1]);\n\t}\n}\n", "<?php\n\nreturn [\n\t'appVersion' => '6.3.221',\n\t'patchVersion' => '2022.05.05',\n\t'lib_roundcube' => '0.2.12',\n];\n", "<?php\n\n/**\n * Fields Action Class.\n *\n * @package Action\n *\n * @copyright YetiForce S.A.\n * @license   YetiForce Public License 5.0 (licenses/LicenseEN.txt or yetiforce.com)\n * @author    Mariusz Krzaczkowski <m.krzaczkowski@yetiforce.com>\n * @author    Rados\u0142aw Skrzypczak <r.skrzypczak@yetiforce.com>\n */\nclass Vtiger_Fields_Action extends \\App\\Controller\\Action\n{\n\tuse \\App\\Controller\\ExposeMethod;\n\n\t/**\n\t * Field model instance.\n\t *\n\t * @var Vtiger_Field_Model\n\t */\n\tprotected $fieldModel;\n\n\t/**\n\t * Function to check permission.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function checkPermission(App\\Request $request)\n\t{\n\t\t$mode = $request->getMode();\n\t\tif ('verifyPhoneNumber' !== $mode) {\n\t\t\t$currentUserPriviligesModel = Users_Privileges_Model::getCurrentUserPrivilegesModel();\n\t\t\tif (!$currentUserPriviligesModel->hasModulePermission($request->getModule())) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t\t}\n\t\t\tif ('getReference' !== $mode && !\\App\\Privilege::isPermitted($request->getModule(), 'EditView')) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t\t}\n\t\t}\n\t\tif ('findAddress' !== $mode && 'getReference' !== $mode && 'validateByMode' !== $mode) {\n\t\t\t$this->fieldModel = Vtiger_Module_Model::getInstance($request->getModule())->getFieldByName($request->getByType('fieldName', 2));\n\t\t\tif (!$this->fieldModel || !$this->fieldModel->isEditable()) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\t\t$this->exposeMethod('getOwners');\n\t\t$this->exposeMethod('getReference');\n\t\t$this->exposeMethod('getUserRole');\n\t\t$this->exposeMethod('findAddress');\n\t\t$this->exposeMethod('validateForField');\n\t\t$this->exposeMethod('validateByMode');\n\t\t$this->exposeMethod('verifyPhoneNumber');\n\t\t$this->exposeMethod('changeFavoriteOwner');\n\t\t$this->exposeMethod('validateFile');\n\t}\n\n\t/**\n\t * Get owners for ajax owners list.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function getOwners(App\\Request $request): void\n\t{\n\t\tif (!App\\Config::performance('SEARCH_OWNERS_BY_AJAX')) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t}\n\t\tif ('owner' !== $this->fieldModel->getFieldDataType() && 'sharedOwner' !== $this->fieldModel->getFieldDataType()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD');\n\t\t}\n\t\t$moduleName = $request->getModule();\n\t\t$searchValue = $request->getByType('value', 'Text');\n\t\tif ($request->has('result')) {\n\t\t\t$result = $request->getArray('result', 'Standard');\n\t\t} else {\n\t\t\t$result = ['users', 'groups'];\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\tif (empty($searchValue)) {\n\t\t\t$response->setResult(['items' => []]);\n\t\t} else {\n\t\t\t$owner = App\\Fields\\Owner::getInstance($moduleName);\n\t\t\t$owner->find($searchValue);\n\n\t\t\t$data = [];\n\t\t\tif (\\in_array('users', $result)) {\n\t\t\t\t$users = $owner->getAccessibleUsers('', 'owner');\n\t\t\t\tif (!empty($users)) {\n\t\t\t\t\t$data[] = ['name' => \\App\\Language::translate('LBL_USERS'), 'type' => 'optgroup'];\n\t\t\t\t\tforeach ($users as $key => $value) {\n\t\t\t\t\t\t$data[] = ['id' => $key, 'name' => $value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (\\in_array('groups', $result)) {\n\t\t\t\t$grup = $owner->getAccessibleGroups('', 'owner', true);\n\t\t\t\tif (!empty($grup)) {\n\t\t\t\t\t$data[] = ['name' => \\App\\Language::translate('LBL_GROUPS'), 'type' => 'optgroup'];\n\t\t\t\t\tforeach ($grup as $key => $value) {\n\t\t\t\t\t\t$data[] = ['id' => $key, 'name' => $value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$response->setResult(['items' => $data]);\n\t\t}\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Search user roles.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function getUserRole(App\\Request $request): void\n\t{\n\t\tif (!App\\Config::performance('SEARCH_ROLES_BY_AJAX')) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t}\n\t\tif ('userRole' !== $this->fieldModel->getFieldDataType()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD');\n\t\t}\n\t\t$searchValue = $request->getByType('value', 'Text');\n\t\t$response = new Vtiger_Response();\n\t\tif (empty($searchValue)) {\n\t\t\t$response->setResult(['items' => []]);\n\t\t} else {\n\t\t\t$rows = $this->fieldModel->getUITypeModel()->getSearchValues($searchValue);\n\t\t\tforeach ($rows as $key => $value) {\n\t\t\t\t$data[] = ['id' => $key, 'name' => $value];\n\t\t\t}\n\t\t\t$response->setResult(['items' => $data]);\n\t\t}\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function getReference(App\\Request $request): void\n\t{\n\t\tif ($request->has('fieldName')) {\n\t\t\t$fieldModel = Vtiger_Module_Model::getInstance($request->getModule())->getFieldByName($request->getByType('fieldName', 2));\n\t\t\tif (empty($fieldModel) || !$fieldModel->isActiveField() || !$fieldModel->isViewEnabled()) {\n\t\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t\t}\n\t\t\t$searchInModule = $fieldModel->getReferenceList();\n\t\t} elseif ($request->has('relationId') && ($relation = \\App\\Relation::getById($request->getInteger('relationId'))) && $relation['related_modulename'] === $request->getModule()) {\n\t\t\tif (\\in_array($relation['related_modulename'], ['getDependentsList', 'getManyToMany', 'getRelatedList'])) {\n\t\t\t\t$searchInModule = $relation['related_modulename'];\n\t\t\t} else {\n\t\t\t\t$typeRelationModel = \\Vtiger_Relation_Model::getInstanceById($relation['relation_id'])->getTypeRelationModel();\n\t\t\t\tif (method_exists($typeRelationModel, 'getConfigAdvancedConditionsByColumns')) {\n\t\t\t\t\t$searchInModule = $typeRelationModel->getConfigAdvancedConditionsByColumns()['relatedModules'] ?? $relation['related_modulename'];\n\t\t\t\t} else {\n\t\t\t\t\t$searchInModule = $relation['related_modulename'];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$limit = \\App\\Config::search('GLOBAL_SEARCH_AUTOCOMPLETE_LIMIT');\n\t\t$searchValue = \\App\\RecordSearch::getSearchField()->getUITypeModel()->getDbConditionBuilderValue($request->getByType('value', \\App\\Purifier::TEXT), '');\n\t\t$rows = (new \\App\\RecordSearch($searchValue, $searchInModule, $limit))->setMode(\\App\\RecordSearch::LABEL_MODE)->search();\n\t\t$data = $modules = [];\n\t\tforeach ($rows as $row) {\n\t\t\t$modules[$row['setype']][] = $row;\n\t\t}\n\t\tforeach ($modules as $moduleName => $rows) {\n\t\t\t$data[] = ['name' => App\\Language::translateSingleMod($moduleName, $moduleName), 'type' => 'optgroup'];\n\t\t\tforeach ($rows as $row) {\n\t\t\t\t$data[] = ['id' => $row['crmid'], 'name' => \\App\\Purifier::encodeHtml($row['label'])];\n\t\t\t}\n\t\t}\n\t\t$response->setResult(['items' => $data]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Verify phone number.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function verifyPhoneNumber(App\\Request $request): void\n\t{\n\t\tif ('phone' !== $this->fieldModel->getFieldDataType()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD');\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$data = ['isValidNumber' => false];\n\t\tif ($request->isEmpty('phoneCountry', true)) {\n\t\t\t$data['message'] = \\App\\Language::translate('LBL_NO_PHONE_COUNTRY');\n\t\t}\n\t\tif (empty($data['message'])) {\n\t\t\ttry {\n\t\t\t\t$data = App\\Fields\\Phone::verifyNumber($request->getByType('phoneNumber', 'Text'), $request->getByType('phoneCountry', 1));\n\t\t\t} catch (\\App\\Exceptions\\FieldException $e) {\n\t\t\t\t$data = ['isValidNumber' => false];\n\t\t\t}\n\t\t}\n\t\tif (!$data['isValidNumber'] && empty($data['message'])) {\n\t\t\t$data['message'] = \\App\\Language::translate('LBL_INVALID_PHONE_NUMBER');\n\t\t}\n\t\t$response->setResult($data);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Find address.\n\t *\n\t * @param \\App\\Request $request\n\t */\n\tpublic function findAddress(App\\Request $request): void\n\t{\n\t\t$instance = \\App\\Map\\Address::getInstance($request->getByType('type'));\n\t\t$response = new Vtiger_Response();\n\t\tif ($instance) {\n\t\t\t$response->setResult($instance->find($request->getByType('value', 'Text')));\n\t\t}\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Change favorite owner state.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\IllegalValue\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t * @throws \\yii\\db\\Exception\n\t */\n\tpublic function changeFavoriteOwner(App\\Request $request): void\n\t{\n\t\tif (!App\\Config::module('Users', 'FAVORITE_OWNERS') || (\\App\\User::getCurrentUserRealId() !== \\App\\User::getCurrentUserId())) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('LBL_PERMISSION_DENIED', 406);\n\t\t}\n\t\t$moduleName = $request->getModule();\n\t\t$ownerField = \\App\\Fields\\Owner::getInstance($moduleName);\n\t\t$result = $ownerField->changeFavorites($this->fieldModel->getFieldDataType(), $request->getInteger('owner'));\n\t\t$message = $result ? 'LBL_MODIFICATION_SUCCESSFUL_AND_RELOAD' : 'LBL_MODIFICATION_FAILURE';\n\t\t$message = \\App\\Language::translate($this->fieldModel->getFieldLabel(), $moduleName) . ': ' . \\App\\Language::translate($message, $moduleName);\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult(['result' => $result, 'message' => $message]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Validate the field name and value.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function validateForField(App\\Request $request): void\n\t{\n\t\t$fieldModel = Vtiger_Module_Model::getInstance($request->getModule())->getFieldByName($request->getByType('fieldName', 2));\n\t\tif (!$fieldModel || !$fieldModel->isActiveField() || !$fieldModel->isViewEnabled()) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_NO_PERMISSIONS_TO_FIELD', 406);\n\t\t}\n\t\t$recordModel = \\Vtiger_Record_Model::getCleanInstance($fieldModel->getModuleName());\n\t\t$fieldModel->getUITypeModel()->setValueFromRequest($request, $recordModel, 'fieldValue');\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult([\n\t\t\t'raw' => $recordModel->get($fieldModel->getName()),\n\t\t\t'display' => $recordModel->getDisplayValue($fieldModel->getName()),\n\t\t]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Validate the value based on the type of purify.\n\t *\n\t * @param \\App\\Request $request\n\t *\n\t * @throws \\App\\Exceptions\\NoPermitted\n\t */\n\tpublic function validateByMode(App\\Request $request): void\n\t{\n\t\tif ($request->isEmpty('purifyMode') || !$request->has('value')) {\n\t\t\tthrow new \\App\\Exceptions\\NoPermitted('ERR_ILLEGAL_VALUE', 406);\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult([\n\t\t\t'raw' => $request->getByType('value', $request->getByType('purifyMode')),\n\t\t]);\n\t\t$response->emit();\n\t}\n\n\t/**\n\t * Validate file.\n\t *\n\t * @param App\\Request $request\n\t *\n\t * @return void\n\t */\n\tpublic function validateFile(App\\Request $request): void\n\t{\n\t\t$validate = false;\n\t\tif ($request->has('base64')) {\n\t\t\t$fileInstance = \\App\\Fields\\File::loadFromBase($request->getByType('base64', 'base64'), ['validateAllowedFormat' => 'image']);\n\t\t\tif ($fileInstance && $fileInstance->validate()) {\n\t\t\t\t$validate = true;\n\t\t\t} else {\n\t\t\t\t$validateError = $fileInstance->validateError;\n\t\t\t}\n\t\t}\n\t\t$response = new Vtiger_Response();\n\t\t$response->setResult([\n\t\t\t'validate' => $validate,\n\t\t\t'validateError' => $validateError ?? null,\n\t\t]);\n\t\t$response->emit();\n\t}\n}\n", "/* {[The file is published on the basis of YetiForce Public License 5.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */\n'use strict';\n\nCKEDITOR.dialog.add('base64image-dialog', function (editor) {\n\tlet self = null,\n\t\tselectedImg = null,\n\t\torgWidth = null,\n\t\torgHeight = null,\n\t\timgPreview = null,\n\t\tsourceElements = [],\n\t\timgScale = 1,\n\t\tlock = true,\n\t\tmaxUploadSize = CONFIG['maxUploadLimit'];\n\n\t/* Check File Reader Support */\n\tfunction fileSupport() {\n\t\tlet r = false,\n\t\t\tn = null;\n\t\ttry {\n\t\t\tif (FileReader) {\n\t\t\t\tlet n = document.createElement('input');\n\t\t\t\tif (n && 'files' in n) r = true;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tr = false;\n\t\t}\n\t\tn = null;\n\t\treturn r;\n\t}\n\tlet isFReaderSupported = fileSupport();\n\n\t/* Load preview image */\n\tfunction imagePreviewLoad(s) {\n\t\t/* no preview */\n\t\tif (typeof s != 'string' || !s) {\n\t\t\timgPreview.getElement().setHtml('');\n\t\t\treturn;\n\t\t}\n\n\t\t/* Create image */\n\t\tlet i = new Image();\n\n\t\t/* Display loading text in preview element */\n\t\t$(imgPreview.getElement().$).progressIndicator({ position: 'html' });\n\n\t\t/* When image is loaded */\n\t\ti.onload = function () {\n\t\t\t/* Remove preview */\n\t\t\timgPreview.getElement().setHtml('');\n\n\t\t\t/* Set attributes */\n\t\t\tif (orgWidth == null || orgHeight == null) {\n\t\t\t\tself.setValueOf('tab-properties', 'width', this.width);\n\t\t\t\tself.setValueOf('tab-properties', 'height', this.height);\n\t\t\t\timgScale = 1;\n\t\t\t\tif (this.height > 0 && this.width > 0) imgScale = this.width / this.height;\n\t\t\t\tif (imgScale <= 0) imgScale = 1;\n\t\t\t} else {\n\t\t\t\torgWidth = null;\n\t\t\t\torgHeight = null;\n\t\t\t}\n\t\t\tthis.id = editor.id + 'previewimage';\n\t\t\tthis.setAttribute('style', 'max-width:400px;max-height:100px;');\n\t\t\tthis.setAttribute('alt', '');\n\n\t\t\t/* Insert preview image */\n\t\t\ttry {\n\t\t\t\tlet p = imgPreview.getElement().$;\n\t\t\t\tif (p) p.appendChild(this);\n\t\t\t} catch (e) {}\n\t\t};\n\n\t\t/* Error Function */\n\t\ti.onerror = function () {\n\t\t\timgPreview.getElement().setHtml('');\n\t\t};\n\t\ti.onabort = function () {\n\t\t\timgPreview.getElement().setHtml('');\n\t\t};\n\n\t\t/* Load image */\n\t\ti.src = s;\n\t}\n\n\tfunction imagePreview(src) {\n\t\timgPreview.getElement().setHtml('');\n\t\tif (isFReaderSupported) {\n\t\t\t$(imgPreview.getElement().$).progressIndicator({ position: 'html' });\n\t\t\treadImageAsBase64()\n\t\t\t\t.done(function (base) {\n\t\t\t\t\timgPreview.getElement().setHtml('');\n\t\t\t\t\timagePreviewLoad(base);\n\t\t\t\t})\n\t\t\t\t.fail(function () {\n\t\t\t\t\timgPreview.getElement().setHtml('');\n\t\t\t\t});\n\t\t}\n\t}\n\n\tfunction readImageAsBase64() {\n\t\tconst aDeferred = jQuery.Deferred();\n\t\tlet fileI = self.getContentElement('tab-source', 'file'),\n\t\t\tn = null;\n\t\ttry {\n\t\t\tn = fileI.getInputElement().$;\n\t\t} catch (e) {\n\t\t\tn = null;\n\t\t}\n\t\tif (n && 'files' in n && n.files && n.files.length > 0 && n.files[0]) {\n\t\t\tif (('type' in n.files[0] && !n.files[0].type.match('image.*')) || !FileReader) {\n\t\t\t\taDeferred.reject();\n\t\t\t\treturn aDeferred.promise();\n\t\t\t}\n\t\t\tif (n.files[0].size > maxUploadSize) {\n\t\t\t\tapp.showNotify({\n\t\t\t\t\ttext: app.vtranslate('JS_UPLOADED_FILE_SIZE_EXCEEDS'),\n\t\t\t\t\ttype: 'error'\n\t\t\t\t});\n\t\t\t\taDeferred.reject();\n\t\t\t\treturn aDeferred.promise();\n\t\t\t}\n\t\t\tlet fr = new FileReader();\n\t\t\tfr.onload = (function (f) {\n\t\t\t\treturn function (e) {\n\t\t\t\t\taDeferred.resolve(e.target.result);\n\t\t\t\t};\n\t\t\t})(n.files[0]);\n\t\t\tfr.onerror = function () {\n\t\t\t\taDeferred.reject();\n\t\t\t};\n\t\t\tfr.onabort = function () {\n\t\t\t\taDeferred.reject();\n\t\t\t};\n\t\t\tfr.readAsDataURL(n.files[0]);\n\t\t}\n\t\treturn aDeferred.promise();\n\t}\n\n\tfunction getImageDimensions() {\n\t\tlet o = {\n\t\t\tw: self.getContentElement('tab-properties', 'width').getValue(),\n\t\t\th: self.getContentElement('tab-properties', 'height').getValue(),\n\t\t\tuw: 'px',\n\t\t\tuh: 'px'\n\t\t};\n\t\tif (o.w.indexOf('%') >= 0) o.uw = '%';\n\t\tif (o.h.indexOf('%') >= 0) o.uh = '%';\n\t\to.w = parseInt(o.w, 10);\n\t\to.h = parseInt(o.h, 10);\n\t\tif (isNaN(o.w)) o.w = 0;\n\t\tif (isNaN(o.h)) o.h = 0;\n\t\treturn o;\n\t}\n\n\tfunction imageDimensions(src) {\n\t\tlet o = getImageDimensions();\n\t\tlet u = 'px';\n\t\tif (src == 'width') {\n\t\t\tif (o.uw == '%') u = '%';\n\t\t\to.h = Math.round(o.w / imgScale);\n\t\t} else {\n\t\t\tif (o.uh == '%') u = '%';\n\t\t\to.w = Math.round(o.h * imgScale);\n\t\t}\n\t\tif (u == '%') {\n\t\t\to.w += '%';\n\t\t\to.h += '%';\n\t\t}\n\t\tself.getContentElement('tab-properties', 'width').setValue(o.w),\n\t\t\tself.getContentElement('tab-properties', 'height').setValue(o.h);\n\t}\n\n\tfunction integerValue(elem) {\n\t\tlet v = elem.getValue(),\n\t\t\tu = '';\n\t\tif (v.indexOf('%') >= 0) u = '%';\n\t\tv = parseInt(v, 10);\n\t\tif (isNaN(v)) v = 0;\n\t\telem.setValue(v + u);\n\t}\n\n\tfunction validateFile() {\n\t\tconst fieldInfo = $(editor.element.$).data('fieldinfo');\n\t\tlet length = editor.getData().length,\n\t\t\tselectedImg = editor.getSelection();\n\t\tif (selectedImg) selectedImg = selectedImg.getSelectedElement();\n\t\tif (!selectedImg || selectedImg.getName() !== 'img') selectedImg = null;\n\t\tif (selectedImg) {\n\t\t\tlength = length - selectedImg.getOuterHtml().length;\n\t\t}\n\t\tconst aDeferred = jQuery.Deferred();\n\t\treadImageAsBase64()\n\t\t\t.done((base) => {\n\t\t\t\tlength += base.length;\n\t\t\t\tif (length > fieldInfo['maximumlength']) {\n\t\t\t\t\tapp.showNotify({\n\t\t\t\t\t\ttext: app.vtranslate('JS_MAXIMUM_TEXT_SIZE_IN_BYTES') + ' ' + fieldInfo['maximumlength'],\n\t\t\t\t\t\ttype: 'error'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tAppConnector.request({\n\t\t\t\t\tmodule: app.getModuleName(),\n\t\t\t\t\taction: 'Fields',\n\t\t\t\t\tmode: 'validateFile',\n\t\t\t\t\tfieldName: fieldInfo['name'],\n\t\t\t\t\tbase64: base\n\t\t\t\t})\n\t\t\t\t\t.done((data) => {\n\t\t\t\t\t\tif (data.result.validate) {\n\t\t\t\t\t\t\taDeferred.resolve();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tapp.showNotify({\n\t\t\t\t\t\t\t\ttext: data.result.validateError,\n\t\t\t\t\t\t\t\ttype: 'error'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\taDeferred.reject();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.fail(function () {\n\t\t\t\t\t\taDeferred.resolve();\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.fail(() => {\n\t\t\t\taDeferred.reject();\n\t\t\t});\n\t\treturn aDeferred.promise();\n\t}\n\n\tif (isFReaderSupported) {\n\t\tsourceElements = [\n\t\t\t{\n\t\t\t\ttype: 'hbox',\n\t\t\t\twidths: ['70px'],\n\t\t\t\tstyle: 'margin-top:40px;',\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tid: 'file',\n\t\t\t\t\t\tlabel: '',\n\t\t\t\t\t\tsize: maxUploadSize,\n\t\t\t\t\t\tonChange: function (a) {\n\t\t\t\t\t\t\tvalidateFile()\n\t\t\t\t\t\t\t\t.done(() => {\n\t\t\t\t\t\t\t\t\timagePreview('file');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.fail(function () {\n\t\t\t\t\t\t\t\t\tself.getContentElement('tab-source', 'file').getInputElement().$.value = null;\n\t\t\t\t\t\t\t\t\timgPreview.getElement().setHtml('');\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'html',\n\t\t\t\tid: 'preview',\n\t\t\t\thtml: new CKEDITOR.template('<div style=\"text-align:center;\"></div>').output()\n\t\t\t}\n\t\t];\n\t}\n\t/* Dialog */\n\treturn {\n\t\ttitle: editor.lang.common.image,\n\t\tminWidth: 450,\n\t\tminHeight: 180,\n\t\tonLoad: function () {\n\t\t\t/* Get image preview element */\n\t\t\timgPreview = this.getContentElement('tab-source', 'preview');\n\n\t\t\t/* Constrain proportions or not */\n\t\t\tthis.getContentElement('tab-properties', 'lock')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'click',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tif (this.getValue()) lock = true;\n\t\t\t\t\t\telse lock = false;\n\t\t\t\t\t\tif (lock) imageDimensions('width');\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'lock')\n\t\t\t\t);\n\n\t\t\t/* Change Attributes Events  */\n\t\t\tthis.getContentElement('tab-properties', 'width')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on('keyup', function () {\n\t\t\t\t\tif (lock) imageDimensions('width');\n\t\t\t\t});\n\t\t\tthis.getContentElement('tab-properties', 'height')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on('keyup', function () {\n\t\t\t\t\tif (lock) imageDimensions('height');\n\t\t\t\t});\n\t\t\tthis.getContentElement('tab-properties', 'vmargin')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'keyup',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tintegerValue(this);\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'vmargin')\n\t\t\t\t);\n\t\t\tthis.getContentElement('tab-properties', 'hmargin')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'keyup',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tintegerValue(this);\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'hmargin')\n\t\t\t\t);\n\t\t\tthis.getContentElement('tab-properties', 'border')\n\t\t\t\t.getInputElement()\n\t\t\t\t.on(\n\t\t\t\t\t'keyup',\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tintegerValue(this);\n\t\t\t\t\t},\n\t\t\t\t\tthis.getContentElement('tab-properties', 'border')\n\t\t\t\t);\n\t\t},\n\t\tonShow: function () {\n\t\t\tthis.getContentElement('tab-source', 'file')\n\t\t\t\t.getInputElement()\n\t\t\t\t.$.setAttribute('accept', 'image/jpeg, image/png, image/gif');\n\t\t\t/* Remove preview */\n\t\t\timgPreview.getElement().setHtml('');\n\n\t\t\t(self = this), (orgWidth = null), (orgHeight = null), (imgScale = 1), (lock = true);\n\n\t\t\t/* selected image or null */\n\t\t\tselectedImg = editor.getSelection();\n\t\t\tif (selectedImg) selectedImg = selectedImg.getSelectedElement();\n\t\t\tif (!selectedImg || selectedImg.getName() !== 'img') selectedImg = null;\n\n\t\t\t/* Set input values */\n\t\t\tself.setValueOf('tab-properties', 'lock', lock);\n\t\t\tself.setValueOf('tab-properties', 'vmargin', '0');\n\t\t\tself.setValueOf('tab-properties', 'hmargin', '0');\n\t\t\tself.setValueOf('tab-properties', 'border', '0');\n\t\t\tself.setValueOf('tab-properties', 'align', 'none');\n\t\t\tif (selectedImg) {\n\t\t\t\t/* Set input values from selected image */\n\t\t\t\tif (typeof selectedImg.getAttribute('width') == 'string') orgWidth = selectedImg.getAttribute('width');\n\t\t\t\tif (typeof selectedImg.getAttribute('height') == 'string') orgHeight = selectedImg.getAttribute('height');\n\t\t\t\tif ((orgWidth == null || orgHeight == null) && selectedImg.$) {\n\t\t\t\t\torgWidth = selectedImg.$.width;\n\t\t\t\t\torgHeight = selectedImg.$.height;\n\t\t\t\t}\n\t\t\t\tif (orgWidth != null && orgHeight != null) {\n\t\t\t\t\tself.setValueOf('tab-properties', 'width', orgWidth);\n\t\t\t\t\tself.setValueOf('tab-properties', 'height', orgHeight);\n\t\t\t\t\torgWidth = parseInt(orgWidth, 10);\n\t\t\t\t\torgHeight = parseInt(orgHeight, 10);\n\t\t\t\t\timgScale = 1;\n\t\t\t\t\tif (!isNaN(orgWidth) && !isNaN(orgHeight) && orgHeight > 0 && orgWidth > 0) imgScale = orgWidth / orgHeight;\n\t\t\t\t\tif (imgScale <= 0) imgScale = 1;\n\t\t\t\t}\n\n\t\t\t\tif (typeof selectedImg.getAttribute('src') == 'string') {\n\t\t\t\t\tif (selectedImg.getAttribute('src').indexOf('data:') === 0) {\n\t\t\t\t\t\timagePreview('base64');\n\t\t\t\t\t\timagePreviewLoad(selectedImg.getAttribute('src'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (typeof selectedImg.getAttribute('alt') == 'string')\n\t\t\t\t\tself.setValueOf('tab-properties', 'alt', selectedImg.getAttribute('alt'));\n\t\t\t\tif (typeof selectedImg.getAttribute('hspace') == 'string')\n\t\t\t\t\tself.setValueOf('tab-properties', 'hmargin', selectedImg.getAttribute('hspace'));\n\t\t\t\tif (typeof selectedImg.getAttribute('vspace') == 'string')\n\t\t\t\t\tself.setValueOf('tab-properties', 'vmargin', selectedImg.getAttribute('vspace'));\n\t\t\t\tif (typeof selectedImg.getAttribute('border') == 'string')\n\t\t\t\t\tself.setValueOf('tab-properties', 'border', selectedImg.getAttribute('border'));\n\t\t\t\tif (typeof selectedImg.getAttribute('align') == 'string') {\n\t\t\t\t\tswitch (selectedImg.getAttribute('align')) {\n\t\t\t\t\t\tcase 'top':\n\t\t\t\t\t\tcase 'text-top':\n\t\t\t\t\t\t\tself.setValueOf('tab-properties', 'align', 'top');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'baseline':\n\t\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\tcase 'text-bottom':\n\t\t\t\t\t\t\tself.setValueOf('tab-properties', 'align', 'bottom');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'left':\n\t\t\t\t\t\t\tself.setValueOf('tab-properties', 'align', 'left');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'right':\n\t\t\t\t\t\t\tself.setValueOf('tab-properties', 'align', 'right');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tself.selectPage('tab-properties');\n\t\t\t}\n\t\t},\n\t\tonOk: function () {\n\t\t\t/* Get image source */\n\t\t\tlet src = '';\n\t\t\ttry {\n\t\t\t\tsrc = CKEDITOR.document.getById(editor.id + 'previewimage').$.src;\n\t\t\t} catch (e) {\n\t\t\t\tsrc = '';\n\t\t\t}\n\t\t\tif (typeof src != 'string' || src == null || src === '') return;\n\n\t\t\tvalidateFile().always(() => {\n\t\t\t\t/* selected image or new image */\n\t\t\t\tif (selectedImg) {\n\t\t\t\t\tvar newImg = selectedImg;\n\t\t\t\t} else {\n\t\t\t\t\tvar newImg = editor.document.createElement('img');\n\t\t\t\t}\n\t\t\t\tnewImg.setAttribute('src', src);\n\t\t\t\tsrc = null;\n\n\t\t\t\t/* Set attributes */\n\t\t\t\tnewImg.setAttribute('alt', self.getValueOf('tab-properties', 'alt').replace(/^\\s+/, '').replace(/\\s+$/, ''));\n\t\t\t\tlet attr = {\n\t\t\t\t\t\twidth: ['width', 'width:#;', 'integer', 1],\n\t\t\t\t\t\theight: ['height', 'height:#;', 'integer', 1],\n\t\t\t\t\t\tvmargin: ['vspace', 'margin-top:#;margin-bottom:#;', 'integer', 0],\n\t\t\t\t\t\thmargin: ['hspace', 'margin-left:#;margin-right:#;', 'integer', 0],\n\t\t\t\t\t\talign: ['align', ''],\n\t\t\t\t\t\tborder: ['border', 'border:# solid black;', 'integer', 0]\n\t\t\t\t\t},\n\t\t\t\t\tcss = [],\n\t\t\t\t\tvalue,\n\t\t\t\t\tcssValue,\n\t\t\t\t\tattrValue,\n\t\t\t\t\tunit,\n\t\t\t\t\tk;\n\t\t\t\tfor (k in attr) {\n\t\t\t\t\tvalue = self.getValueOf('tab-properties', k);\n\t\t\t\t\tattrValue = value;\n\t\t\t\t\tcssValue = value;\n\t\t\t\t\tunit = 'px';\n\n\t\t\t\t\tif (k == 'align') {\n\t\t\t\t\t\tswitch (value) {\n\t\t\t\t\t\t\tcase 'top':\n\t\t\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\t\t\tattr[k][1] = 'vertical-align:#;';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'left':\n\t\t\t\t\t\t\tcase 'right':\n\t\t\t\t\t\t\t\tattr[k][1] = 'float:#;';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tvalue = null;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (attr[k][2] == 'integer') {\n\t\t\t\t\t\tif (value.indexOf('%') >= 0) unit = '%';\n\t\t\t\t\t\tvalue = parseInt(value, 10);\n\t\t\t\t\t\tif (isNaN(value)) value = null;\n\t\t\t\t\t\telse if (value < attr[k][3]) value = null;\n\t\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\t\tif (unit == '%') {\n\t\t\t\t\t\t\t\tattrValue = value + '%';\n\t\t\t\t\t\t\t\tcssValue = value + '%';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tattrValue = value;\n\t\t\t\t\t\t\t\tcssValue = value + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tnewImg.setAttribute(attr[k][0], attrValue);\n\t\t\t\t\t\tcss.push(attr[k][1].replace(/#/g, cssValue));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (css.length > 0) newImg.setAttribute('style', css.join(''));\n\n\t\t\t\t/* Insert new image */\n\t\t\t\tif (!selectedImg) editor.insertElement(newImg);\n\n\t\t\t\t/* Resize image */\n\t\t\t\tif (editor.plugins.imageresize) editor.plugins.imageresize.resize(editor, newImg, 800, 800);\n\n\t\t\t\teditor.updateElement();\n\t\t\t});\n\t\t},\n\n\t\t/* Dialog form */\n\t\tcontents: [\n\t\t\t{\n\t\t\t\tid: 'tab-source',\n\t\t\t\tlabel: editor.lang.common.generalTab,\n\t\t\t\telements: sourceElements\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'tab-properties',\n\t\t\t\tlabel: editor.lang.common.advancedTab,\n\t\t\t\telements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\tid: 'alt',\n\t\t\t\t\t\tlabel: editor.lang.image.alt\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'hbox',\n\t\t\t\t\t\twidths: ['15%', '15%', '70%'],\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'width',\n\t\t\t\t\t\t\t\tlabel: editor.lang.common.width\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'height',\n\t\t\t\t\t\t\t\tlabel: editor.lang.common.height\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\t\t\t\tid: 'lock',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.lockRatio,\n\t\t\t\t\t\t\t\tstyle: 'margin-top:18px;'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'hbox',\n\t\t\t\t\t\twidths: ['23%', '30%', '30%', '17%'],\n\t\t\t\t\t\tstyle: 'margin-top:10px;',\n\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'select',\n\t\t\t\t\t\t\t\tid: 'align',\n\t\t\t\t\t\t\t\tlabel: editor.lang.common.align,\n\t\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t\t[editor.lang.common.notSet, 'none'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignTop, 'top'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignBottom, 'bottom'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignLeft, 'left'],\n\t\t\t\t\t\t\t\t\t[editor.lang.common.alignRight, 'right']\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'vmargin',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.vSpace\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'hmargin',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.hSpace\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\twidth: '45px',\n\t\t\t\t\t\t\t\tid: 'border',\n\t\t\t\t\t\t\t\tlabel: editor.lang.image.border\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t};\n});\n", "/* {[The file is published on the basis of YetiForce Public License 5.0 that can be found in the following directory: licenses/LicenseEN.txt or yetiforce.com]} */\n'use strict';\n\nCKEDITOR.plugins.add('base64image', {\n\trequires: 'dialog',\n\ticons: 'base64image',\n\thidpi: true,\n\tinit: function (editor) {\n\t\tif (editor.addFeature) {\n\t\t\teditor.addFeature({\n\t\t\t\tallowedContent: 'img[alt,id,!src]{width,height};'\n\t\t\t});\n\t\t}\n\t\teditor.on('paste', (event, a, b) => {\n\t\t\tthis.onPaste(event);\n\t\t});\n\t\tconst pluginName = 'base64image-dialog';\n\t\teditor.ui.addToolbarGroup('base64image', 'insert');\n\t\teditor.ui.addButton('base64image', {\n\t\t\tlabel: editor.lang.common.image,\n\t\t\tcommand: pluginName,\n\t\t\ttoolbar: 'insert'\n\t\t});\n\t\tCKEDITOR.dialog.add(pluginName, this.path + 'dialogs/dialog.js');\n\t\teditor.addCommand(\n\t\t\tpluginName,\n\t\t\tnew CKEDITOR.dialogCommand(pluginName, {\n\t\t\t\tallowedContent:\n\t\t\t\t\t'img[alt,!src]{border-style,border-width,float,height,margin,margin-bottom,margin-left,margin-right,margin-top,width}',\n\t\t\t\trequiredContent: 'img[alt,src]',\n\t\t\t\tcontentTransformations: [\n\t\t\t\t\t['img{width}: sizeToStyle', 'img[width]: sizeToAttribute'],\n\t\t\t\t\t['img{float}: alignmentToStyle', 'img[align]: alignmentToAttribute']\n\t\t\t\t]\n\t\t\t})\n\t\t);\n\t\teditor.on('doubleclick', function (evt) {\n\t\t\tif (evt.data.element && !evt.data.element.isReadOnly() && evt.data.element.getName() === 'img') {\n\t\t\t\tevt.data.dialog = pluginName;\n\t\t\t\teditor.getSelection().selectElement(evt.data.element);\n\t\t\t}\n\t\t});\n\t\tif (editor.addMenuItem) {\n\t\t\teditor.addMenuGroup('imageToBase64Group');\n\t\t\teditor.addMenuItem('imageToBase64Item', {\n\t\t\t\tlabel: editor.lang.common.image,\n\t\t\t\ticon: this.path + 'icons/base64image.png',\n\t\t\t\tcommand: pluginName,\n\t\t\t\tgroup: 'imageToBase64Group'\n\t\t\t});\n\t\t}\n\t\tif (editor.contextMenu) {\n\t\t\teditor.contextMenu.addListener(function (element) {\n\t\t\t\tif (element && element.getName() === 'img') {\n\t\t\t\t\teditor.getSelection().selectElement(element);\n\t\t\t\t\treturn { imageToBase64Item: CKEDITOR.TRISTATE_ON };\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t}\n\t},\n\tonPaste: function (event) {\n\t\tconst self = this,\n\t\t\tallowedTypes = 'image/jpeg|image/png|image/gif',\n\t\t\tdataTransfer = event.data.dataTransfer,\n\t\t\teditor = event.editor,\n\t\t\tcount = dataTransfer.getFilesCount();\n\t\tfor (let index = 0; index < count; index++) {\n\t\t\tlet file = dataTransfer.getFile(index);\n\t\t\tif (file.type.match(allowedTypes)) {\n\t\t\t\tself\n\t\t\t\t\t.validateFile(file, editor)\n\t\t\t\t\t.done(function (base) {\n\t\t\t\t\t\tlet image,\n\t\t\t\t\t\t\tselectedImg = editor.getSelection();\n\t\t\t\t\t\tif (selectedImg) selectedImg = selectedImg.getSelectedElement();\n\t\t\t\t\t\tif (!selectedImg || selectedImg.getName() !== 'img') selectedImg = null;\n\t\t\t\t\t\tif (selectedImg) {\n\t\t\t\t\t\t\timage = selectedImg;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\timage = editor.document.createElement('img');\n\t\t\t\t\t\t}\n\t\t\t\t\t\timage.setAttribute('src', base);\n\t\t\t\t\t\tif (!selectedImg) editor.insertElement(image);\n\t\t\t\t\t})\n\t\t\t\t\t.fail(function (error) {\n\t\t\t\t\t\teditor.showNotification(error, 'warning');\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\teditor.showNotification(\n\t\t\t\t\tapp.vtranslate('JS_INVALID_FILE_TYPE') +\n\t\t\t\t\t\t'<br>' +\n\t\t\t\t\t\tapp.vtranslate('JS_AVAILABLE_FILE_TYPES') +\n\t\t\t\t\t\t': ' +\n\t\t\t\t\t\tallowedTypes.replace(/\\|/g, ', '),\n\t\t\t\t\t'warning'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\tvalidateFile: function (file, editor) {\n\t\tconst aDeferred = jQuery.Deferred();\n\t\tif (file.size > CONFIG['maxUploadLimit']) {\n\t\t\taDeferred.reject(app.vtranslate('JS_UPLOADED_FILE_SIZE_EXCEEDS'));\n\t\t}\n\t\tthis.readAndValidate(file, editor)\n\t\t\t.done(function (base) {\n\t\t\t\taDeferred.resolve(base);\n\t\t\t})\n\t\t\t.fail(function (error) {\n\t\t\t\taDeferred.reject(error);\n\t\t\t});\n\t\treturn aDeferred.promise();\n\t},\n\treadAndValidate: function (file, editor) {\n\t\tconst aDeferred = jQuery.Deferred(),\n\t\t\tfieldInfo = $(editor.element.$).data('fieldinfo');\n\t\tlet length = editor.getData().length,\n\t\t\tselectedImg = editor.getSelection();\n\t\tif (selectedImg) selectedImg = selectedImg.getSelectedElement();\n\t\tif (!selectedImg || selectedImg.getName() !== 'img') selectedImg = null;\n\t\tif (selectedImg) {\n\t\t\tlength = length - selectedImg.getOuterHtml().length;\n\t\t}\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = function (evt) {\n\t\t\tlength += evt.target.result.length;\n\t\t\tif (length > fieldInfo['maximumlength']) {\n\t\t\t\treturn aDeferred.reject(app.vtranslate('JS_MAXIMUM_TEXT_SIZE_IN_BYTES') + ' ' + fieldInfo['maximumlength']);\n\t\t\t}\n\t\t\tAppConnector.request({\n\t\t\t\tmodule: app.getModuleName(),\n\t\t\t\taction: 'Fields',\n\t\t\t\tmode: 'validateFile',\n\t\t\t\tfieldName: fieldInfo['name'],\n\t\t\t\tbase64: evt.target.result\n\t\t\t})\n\t\t\t\t.done((data) => {\n\t\t\t\t\tif (data.result.validate) {\n\t\t\t\t\t\taDeferred.resolve(evt.target.result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\taDeferred.reject(data.result.validateError);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.fail(function () {\n\t\t\t\t\taDeferred.reject();\n\t\t\t\t});\n\t\t};\n\t\tfileReader.readAsDataURL(file);\n\t\treturn aDeferred.promise();\n\t}\n});\n"], "filenames": ["app/Fields/File.php", "app/Validator.php", "config/version.php", "modules/Vtiger/actions/Fields.php", "public_html/layouts/resources/libraries/ckeditor/base64image/dialogs/dialog.js", "public_html/layouts/resources/libraries/ckeditor/base64image/plugin.js"], "buggy_code_start_loc": [166, 485, 4, 61, 1, 1], "buggy_code_end_loc": [1234, 485, 5, 301, 394, 104], "fixing_code_start_loc": [167, 486, 4, 62, 1, 1], "fixing_code_end_loc": [1247, 502, 5, 329, 485, 151], "type": "CWE-434", "message": "Unrestructed file upload in GitHub repository yetiforcecompany/yetiforcecrm prior to 6.4.0. Attacker can send malicious files to the victims is able to retrieve the stored data from the web application without that data being made safe to render in the browser and steals victim's cookie leads to account takeover.", "other": {"cve": {"id": "CVE-2022-1411", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-05T11:15:08.047", "lastModified": "2022-05-12T20:41:27.477", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestructed file upload in GitHub repository yetiforcecompany/yetiforcecrm prior to 6.4.0. Attacker can send malicious files to the victims is able to retrieve the stored data from the web application without that data being made safe to render in the browser and steals victim's cookie leads to account takeover."}, {"lang": "es", "value": "Una subida de archivos sin reestructurar en el repositorio de GitHub yetiforcecompany/yetiforcecrm versiones anteriores a 6.4.0. El atacante puede enviar archivos maliciosos a las v\u00edctimas es capaz de recuperar los datos almacenados de la aplicaci\u00f3n web sin que esos datos se hagan seguros para renderizar en el navegador y roba la cookie de la v\u00edctima, conlleva a una toma de la cuenta"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yetiforce:yetiforce_customer_relationship_management:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.4.0", "matchCriteriaId": "73B90905-4F4C-4C18-809E-376665A41EAD"}]}]}], "references": [{"url": "https://github.com/yetiforcecompany/yetiforcecrm/commit/bf69c427260011ffca42f7b6935bb54080c54124", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/75c7cf09-d118-4f91-9686-22b142772529", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yetiforcecompany/yetiforcecrm/commit/bf69c427260011ffca42f7b6935bb54080c54124"}}