{"buggy_code": ["/*\n * Copyright (C) 2017 The Arrow Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nbuildscript {\n    ext {\n        // Constants\n        gradleVersion = '4.10'\n        gradleVersionsPluginVersion = '0.20.0'\n        javaVersion = JavaVersion.VERSION_1_7\n        jUnitVersion = '4.12'\n        jUnitVintageVersion = '5.2.0'\n        kotlinTestVersion = '3.1.5'\n        kotlinVersion = '1.3.11'\n        daggerVersion = '2.17'\n        kotlinxCoroutinesVersion = '1.1.0'\n        kotlinxCollectionsImmutableVersion = '0.1'\n        kotlinPoetVersion = '1.0.0-RC1'\n        projectReactorVersion = '3.1.8.RELEASE'\n        rxJavaVersion = '2.2.1'\n        dokka_version = '0.9.17'\n        detekt_version = '1.0.0-RC12'\n    }\n\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n        jcenter()\n        maven { url \"http://dl.bintray.com/kotlin/kotlin-dev\" }\n        maven { url \"https://dl.bintray.com/jetbrains/markdown/\" }\n        maven { url \"https://dl.bintray.com/arrow-kt/arrow-kt/\" }\n    }\n\n    dependencies {\n        classpath \"com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'\n        classpath 'io.arrow-kt:ank-gradle-plugin:0.7.1'\n        classpath 'org.ajoberstar:gradle-git-publish:1.0.1'\n        classpath \"net.rdrei.android.buildtimetracker:gradle-plugin:0.11.1\"\n        classpath \"org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version\"\n        classpath \"io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version\"\n    }\n}\n\ndef pathApiDocs = \"${rootDir}/modules/docs/arrow-docs/docs/docs/apidocs\"\n\nallprojects {\n    apply plugin: 'base'\n\n    clean.doFirst {\n        delete \"${rootDir}/infographic/arrow-infographic.txt\"\n        delete pathApiDocs\n    }\n\n    repositories {\n        jcenter()\n        maven { url 'https://kotlin.bintray.com/kotlinx' }\n        maven { url \"http://dl.bintray.com/kotlin/kotlin-dev\" }\n        maven { url \"http://dl.bintray.com/arrow-kt/arrow-kt\" }\n        maven { url \"https://dl.bintray.com/jetbrains/markdown/\" }\n    }\n}\n\nsubprojects { project ->\n\n    group = GROUP\n    version = VERSION_NAME\n\n    apply plugin: 'kotlin'\n    apply plugin: 'jacoco'\n    apply plugin: 'org.jetbrains.dokka'\n    apply plugin: 'io.gitlab.arturbosch.detekt'\n\n    archivesBaseName = POM_ARTIFACT_ID\n\n    jacoco {\n        toolVersion '0.8.2'\n    }\n\n    //dokka log spam `Can't find node by signature` comes from https://github.com/Kotlin/dokka/issues/269\n    dokka {\n        outputFormat = 'jekyll'\n        outputDirectory = pathApiDocs\n\n        includes = ['README.md']\n        reportUndocumented = false\n\n        // Specifies the location of the project source code on the Web.\n        // If provided, Dokka generates \"source\" links for each declaration.\n        // Repeat for multiple mappings\n        linkMapping {\n            // Source directory\n            dir = \"src/main/kotlin\"\n\n            // URL showing where the source code can be accessed through the web browser\n            url = \"https://github.com/arrow-kt/arrow/blob/master/${relativeProjectPath('src/main/kotlin')}\"\n\n            // Suffix which is used to append the line number to the URL. Use #L for GitHub\n            suffix = \"#L\"\n        }\n\n    }\n\n    detekt {\n        toolVersion = detekt_version\n        input = files(\"src/main/java\", \"src/main/kotlin\", \"src/test/kotlin\")\n        parallel = true\n        config = files(\"${rootProject.projectDir}/detekt.yml\")\n    }\n\n    task codeCoverageReport(type: JacocoReport) {\n        reports {\n            xml.enabled true\n            xml.destination file(\"${buildDir}/reports/jacoco/report.xml\")\n            html.enabled true\n            csv.enabled false\n        }\n\n        classDirectories = fileTree(\n                dir: 'build/classes/kotlin/main',\n        )\n\n        sourceDirectories = files('src/main/kotlin')\n        executionData fileTree(project.rootDir.absolutePath).include(\"**/build/jacoco/*.exec\")\n    }\n\n    apply plugin: 'com.jfrog.bintray'\n\n    bintray {\n        publish = true\n        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')\n        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')\n        configurations = ['archives']\n        pkg {\n            repo = 'arrow-kt'\n            name = project.name\n            userOrg = POM_DEVELOPER_ID\n            licenses = ['Apache-2.0']\n            vcsUrl = 'https://github.com/arrow-kt/arrow.git'\n        }\n    }\n\n    compileKotlin.kotlinOptions.freeCompilerArgs += [\"-Xskip-runtime-version-check\"]\n\n    test {\n        useJUnitPlatform()\n        testLogging {\n            exceptionFormat 'full'\n            events \"passed\", \"skipped\", \"failed\", \"standardOut\", \"standardError\"\n        }\n    }\n\n    tasks.withType(Test) {\n        maxParallelForks = Runtime.runtime.availableProcessors()\n    }\n\n    sourceCompatibility = javaVersion\n    targetCompatibility = javaVersion\n\n    apply plugin: \"build-time-tracker\"\n\n    buildtimetracker {\n        reporters {\n            csv {\n                output \"build/times.csv\"\n                append true\n                header false\n            }\n        }\n    }\n}\n\nconfigurations {\n    buildableProjects\n}\n\ndependencies {\n    buildableProjects(subprojects)\n}\n\ntasks.create('repl') {\n    final classpathConfig = rootProject.buildscript.configurations.getByName(\"classpath\")\n    final buildableProjectsConfig = configurations.getByName('buildableProjects')\n    dependsOn(buildableProjectsConfig)\n    doFirst {\n        javaexec {\n            classpath(\n                    classpathConfig.resolvedConfiguration.resolvedArtifacts.findAll {\n                        it.moduleVersion.id.group == 'org.jetbrains.kotlin'\n                    }.collect {\n                        it.file\n                    }\n            )\n            main = \"org.jetbrains.kotlin.cli.jvm.K2JVMCompiler\"\n            standardInput = System.in\n            args(\"-cp\", buildableProjectsConfig.files.join(':'))\n        }\n    }\n}\n\napply plugin: 'com.github.ben-manes.versions'\n\nconfigurations.all {\n    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'\n}\n\ndependencyUpdates {\n    outputFormatter { result ->\n        final dependenciesToCheck = [\n                'org.jetbrains.kotlin:kotlin-stdlib',\n                'org.jetbrains.kotlin:kotlin-stdlib-jdk7',\n                'org.jetbrains.kotlin:kotlin-stdlib-jdk8',\n                'org.jetbrains.kotlin:kotlin-gradle-plugin',\n                'org.jetbrains.kotlinx:kotlinx-coroutines-core'\n        ]\n        final disallowedQualifiers = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'eap']\n        final isDisallowed = { dependency -> { qualifier -> dependency.version ==~ /(?i).*[.-]${qualifier}[.\\d-]*/ } }\n        final dependencies = result.current.dependencies\n            .plus(result.outdated.dependencies)\n            .plus(result.exceeded.dependencies)\n            .plus(result.unresolved.dependencies)\n            .findAll { dependency -> dependenciesToCheck.any { it == \"${dependency.group}:${dependency.name}\" } }\n\n        final isRejected = dependencies\n                .any { dependency -> disallowedQualifiers.any(isDisallowed(dependency)) }\n\n        if (isRejected) {\n            final title = \"\\nError: Kotlin and Coroutines must depends on release version!\"\n            final message = dependencies\n                    .inject(title) { acc, dependency ->\n                \"$acc\\n${dependency.group}:${dependency.name}:${dependency.version}\"\n            }\n\n            throw new GradleException(message)\n        }\n    }\n}\n\ntask checkDependenciesVersion {\n    dependsOn dependencyUpdates\n}"], "fixing_code": ["/*\n * Copyright (C) 2017 The Arrow Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nbuildscript {\n    ext {\n        // Constants\n        gradleVersion = '4.10'\n        gradleVersionsPluginVersion = '0.20.0'\n        javaVersion = JavaVersion.VERSION_1_7\n        jUnitVersion = '4.12'\n        jUnitVintageVersion = '5.2.0'\n        kotlinTestVersion = '3.1.5'\n        kotlinVersion = '1.3.11'\n        daggerVersion = '2.17'\n        kotlinxCoroutinesVersion = '1.1.0'\n        kotlinxCollectionsImmutableVersion = '0.1'\n        kotlinPoetVersion = '1.0.0-RC1'\n        projectReactorVersion = '3.1.8.RELEASE'\n        rxJavaVersion = '2.2.1'\n        dokka_version = '0.9.17'\n        detekt_version = '1.0.0-RC12'\n    }\n\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n        jcenter()\n        maven { url \"https://dl.bintray.com/kotlin/kotlin-dev\" }\n        maven { url \"https://dl.bintray.com/jetbrains/markdown/\" }\n        maven { url \"https://dl.bintray.com/arrow-kt/arrow-kt/\" }\n    }\n\n    dependencies {\n        classpath \"com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'\n        classpath 'io.arrow-kt:ank-gradle-plugin:0.7.1'\n        classpath 'org.ajoberstar:gradle-git-publish:1.0.1'\n        classpath \"net.rdrei.android.buildtimetracker:gradle-plugin:0.11.1\"\n        classpath \"org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version\"\n        classpath \"io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version\"\n    }\n}\n\ndef pathApiDocs = \"${rootDir}/modules/docs/arrow-docs/docs/docs/apidocs\"\n\nallprojects {\n    apply plugin: 'base'\n\n    clean.doFirst {\n        delete \"${rootDir}/infographic/arrow-infographic.txt\"\n        delete pathApiDocs\n    }\n\n    repositories {\n        jcenter()\n        maven { url 'https://kotlin.bintray.com/kotlinx' }\n        maven { url \"https://dl.bintray.com/kotlin/kotlin-dev\" }\n        maven { url \"https://dl.bintray.com/arrow-kt/arrow-kt\" }\n        maven { url \"https://dl.bintray.com/jetbrains/markdown/\" }\n    }\n}\n\nsubprojects { project ->\n\n    group = GROUP\n    version = VERSION_NAME\n\n    apply plugin: 'kotlin'\n    apply plugin: 'jacoco'\n    apply plugin: 'org.jetbrains.dokka'\n    apply plugin: 'io.gitlab.arturbosch.detekt'\n\n    archivesBaseName = POM_ARTIFACT_ID\n\n    jacoco {\n        toolVersion '0.8.2'\n    }\n\n    //dokka log spam `Can't find node by signature` comes from https://github.com/Kotlin/dokka/issues/269\n    dokka {\n        outputFormat = 'jekyll'\n        outputDirectory = pathApiDocs\n\n        includes = ['README.md']\n        reportUndocumented = false\n\n        // Specifies the location of the project source code on the Web.\n        // If provided, Dokka generates \"source\" links for each declaration.\n        // Repeat for multiple mappings\n        linkMapping {\n            // Source directory\n            dir = \"src/main/kotlin\"\n\n            // URL showing where the source code can be accessed through the web browser\n            url = \"https://github.com/arrow-kt/arrow/blob/master/${relativeProjectPath('src/main/kotlin')}\"\n\n            // Suffix which is used to append the line number to the URL. Use #L for GitHub\n            suffix = \"#L\"\n        }\n\n    }\n\n    detekt {\n        toolVersion = detekt_version\n        input = files(\"src/main/java\", \"src/main/kotlin\", \"src/test/kotlin\")\n        parallel = true\n        config = files(\"${rootProject.projectDir}/detekt.yml\")\n    }\n\n    task codeCoverageReport(type: JacocoReport) {\n        reports {\n            xml.enabled true\n            xml.destination file(\"${buildDir}/reports/jacoco/report.xml\")\n            html.enabled true\n            csv.enabled false\n        }\n\n        classDirectories = fileTree(\n                dir: 'build/classes/kotlin/main',\n        )\n\n        sourceDirectories = files('src/main/kotlin')\n        executionData fileTree(project.rootDir.absolutePath).include(\"**/build/jacoco/*.exec\")\n    }\n\n    apply plugin: 'com.jfrog.bintray'\n\n    bintray {\n        publish = true\n        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')\n        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')\n        configurations = ['archives']\n        pkg {\n            repo = 'arrow-kt'\n            name = project.name\n            userOrg = POM_DEVELOPER_ID\n            licenses = ['Apache-2.0']\n            vcsUrl = 'https://github.com/arrow-kt/arrow.git'\n        }\n    }\n\n    compileKotlin.kotlinOptions.freeCompilerArgs += [\"-Xskip-runtime-version-check\"]\n\n    test {\n        useJUnitPlatform()\n        testLogging {\n            exceptionFormat 'full'\n            events \"passed\", \"skipped\", \"failed\", \"standardOut\", \"standardError\"\n        }\n    }\n\n    tasks.withType(Test) {\n        maxParallelForks = Runtime.runtime.availableProcessors()\n    }\n\n    sourceCompatibility = javaVersion\n    targetCompatibility = javaVersion\n\n    apply plugin: \"build-time-tracker\"\n\n    buildtimetracker {\n        reporters {\n            csv {\n                output \"build/times.csv\"\n                append true\n                header false\n            }\n        }\n    }\n}\n\nconfigurations {\n    buildableProjects\n}\n\ndependencies {\n    buildableProjects(subprojects)\n}\n\ntasks.create('repl') {\n    final classpathConfig = rootProject.buildscript.configurations.getByName(\"classpath\")\n    final buildableProjectsConfig = configurations.getByName('buildableProjects')\n    dependsOn(buildableProjectsConfig)\n    doFirst {\n        javaexec {\n            classpath(\n                    classpathConfig.resolvedConfiguration.resolvedArtifacts.findAll {\n                        it.moduleVersion.id.group == 'org.jetbrains.kotlin'\n                    }.collect {\n                        it.file\n                    }\n            )\n            main = \"org.jetbrains.kotlin.cli.jvm.K2JVMCompiler\"\n            standardInput = System.in\n            args(\"-cp\", buildableProjectsConfig.files.join(':'))\n        }\n    }\n}\n\napply plugin: 'com.github.ben-manes.versions'\n\nconfigurations.all {\n    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'\n}\n\ndependencyUpdates {\n    outputFormatter { result ->\n        final dependenciesToCheck = [\n                'org.jetbrains.kotlin:kotlin-stdlib',\n                'org.jetbrains.kotlin:kotlin-stdlib-jdk7',\n                'org.jetbrains.kotlin:kotlin-stdlib-jdk8',\n                'org.jetbrains.kotlin:kotlin-gradle-plugin',\n                'org.jetbrains.kotlinx:kotlinx-coroutines-core'\n        ]\n        final disallowedQualifiers = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'eap']\n        final isDisallowed = { dependency -> { qualifier -> dependency.version ==~ /(?i).*[.-]${qualifier}[.\\d-]*/ } }\n        final dependencies = result.current.dependencies\n            .plus(result.outdated.dependencies)\n            .plus(result.exceeded.dependencies)\n            .plus(result.unresolved.dependencies)\n            .findAll { dependency -> dependenciesToCheck.any { it == \"${dependency.group}:${dependency.name}\" } }\n\n        final isRejected = dependencies\n                .any { dependency -> disallowedQualifiers.any(isDisallowed(dependency)) }\n\n        if (isRejected) {\n            final title = \"\\nError: Kotlin and Coroutines must depends on release version!\"\n            final message = dependencies\n                    .inject(title) { acc, dependency ->\n                \"$acc\\n${dependency.group}:${dependency.name}:${dependency.version}\"\n            }\n\n            throw new GradleException(message)\n        }\n    }\n}\n\ntask checkDependenciesVersion {\n    dependsOn dependencyUpdates\n}\n"], "filenames": ["build.gradle"], "buggy_code_start_loc": [42], "buggy_code_end_loc": [256], "fixing_code_start_loc": [42], "fixing_code_end_loc": [256], "type": "CWE-311", "message": "arrow-kt Arrow before 0.9.0 resolved Gradle build artifacts (for compiling and building the published JARs) over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by an MITM attack.", "other": {"cve": {"id": "CVE-2019-11404", "sourceIdentifier": "cve@mitre.org", "published": "2019-04-22T11:29:04.580", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "arrow-kt Arrow before 0.9.0 resolved Gradle build artifacts (for compiling and building the published JARs) over HTTP instead of HTTPS. Any of these dependent artifacts could have been maliciously compromised by an MITM attack."}, {"lang": "es", "value": "arrow-KT Arrow anterior a la versi\u00f3n 0.9.0 resolvi\u00f3 los artefactos de compilaci\u00f3n de Gradle (para compilar y construir los Jars publicados) a trav\u00e9s de HTTP en lugar de HTTPS. Cualquiera de estos artefactos dependientes podr\u00eda haber sido maliciosamente comprometido por un ataque MITM."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-311"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:arrow-kt:arrow:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.0", "matchCriteriaId": "70E9185C-2AB7-4DE7-832E-C7F04B898592"}]}]}], "references": [{"url": "https://github.com/arrow-kt/ank/issues/35", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/arrow-kt/ank/pull/36", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/arrow-kt/arrow/commit/74198dab522393487d5344f194dc21208ab71ae8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/arrow-kt/arrow/issues/1310", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/arrow-kt/arrow/releases/tag/0.9.0", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/arrow-kt/arrow/commit/74198dab522393487d5344f194dc21208ab71ae8"}}